void sub_2395149D0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_23946B318((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2395149E4(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v19;
  char *v20;

  v5 = (a1[1] - *a1) >> 7;
  v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) >> 57)
    sub_2394189F8();
  v10 = a1[2] - *a1;
  if (v10 >> 6 > v6)
    v6 = v10 >> 6;
  if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFF80)
    v11 = 0x1FFFFFFFFFFFFFFLL;
  else
    v11 = v6;
  if (v11)
  {
    if (v11 >> 57)
      sub_239418A80();
    v12 = (char *)operator new(v11 << 7);
  }
  else
  {
    v12 = 0;
  }
  v19 = (uint64_t)&v12[128 * v5];
  v20 = &v12[128 * v11];
  sub_239508124(v19, a2, a3, a4);
  v13 = v19;
  v14 = v19 + 128;
  v16 = (_QWORD *)*a1;
  v15 = (_QWORD *)a1[1];
  if (v15 == (_QWORD *)*a1)
  {
    *a1 = v19;
    a1[1] = v14;
    a1[2] = (uint64_t)v20;
  }
  else
  {
    do
    {
      v13 -= 128;
      v15 -= 16;
      sub_239514BB0((uint64_t)(a1 + 2), v13, (uint64_t)v15);
    }
    while (v15 != v16);
    v17 = (_QWORD *)*a1;
    v15 = (_QWORD *)a1[1];
    *a1 = v13;
    a1[1] = v14;
    a1[2] = (uint64_t)v20;
    if (v15 != v17)
    {
      do
      {
        v15 -= 16;
        sub_239506B74(v15);
      }
      while (v15 != v17);
      v15 = v17;
    }
  }
  if (v15)
    operator delete(v15);
  return v19 + 128;
}

void sub_239514B4C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_239514B60((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_239514B60(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 128;
    sub_239506B74((_QWORD *)(i - 128));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_239514BB0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;

  *(_OWORD *)a2 = *(_OWORD *)a3;
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a3 + 16);
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 24) = 0;
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(a3 + 32);
  *(_QWORD *)(a3 + 32) = 0;
  *(_QWORD *)(a3 + 40) = 0;
  v3 = *(_QWORD *)(a3 + 48);
  *(_QWORD *)(a3 + 48) = 0;
  *(_QWORD *)(a2 + 48) = v3;
  *(_QWORD *)(a2 + 56) = *(_QWORD *)(a3 + 56);
  *(_QWORD *)(a3 + 56) = 0;
  v4 = *(_QWORD *)(a3 + 64);
  *(_QWORD *)(a2 + 64) = v4;
  v5 = *(_QWORD *)(a3 + 72);
  *(_QWORD *)(a2 + 72) = v5;
  *(_DWORD *)(a2 + 80) = *(_DWORD *)(a3 + 80);
  if (v5)
  {
    v6 = *(_QWORD *)(v4 + 8);
    v7 = *(_QWORD *)(a2 + 56);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7)
        v6 %= v7;
    }
    else
    {
      v6 &= v7 - 1;
    }
    *(_QWORD *)(v3 + 8 * v6) = a2 + 64;
    *(_QWORD *)(a3 + 64) = 0;
    *(_QWORD *)(a3 + 72) = 0;
  }
  v8 = *(_QWORD *)(a3 + 88);
  *(_QWORD *)(a3 + 88) = 0;
  *(_QWORD *)(a2 + 88) = v8;
  *(_QWORD *)(a2 + 96) = *(_QWORD *)(a3 + 96);
  *(_QWORD *)(a3 + 96) = 0;
  v11 = *(_QWORD *)(a3 + 104);
  v9 = a3 + 104;
  v10 = v11;
  *(_QWORD *)(a2 + 104) = v11;
  v12 = *(_QWORD *)(v9 + 8);
  *(_QWORD *)(a2 + 112) = v12;
  *(_DWORD *)(a2 + 120) = *(_DWORD *)(v9 + 16);
  if (v12)
  {
    v13 = *(_QWORD *)(v10 + 8);
    v14 = *(_QWORD *)(a2 + 96);
    if ((v14 & (v14 - 1)) != 0)
    {
      if (v13 >= v14)
        v13 %= v14;
    }
    else
    {
      v13 &= v14 - 1;
    }
    *(_QWORD *)(v8 + 8 * v13) = a2 + 104;
    *(_QWORD *)v9 = 0;
    *(_QWORD *)(v9 + 8) = 0;
  }
}

void sub_239514CB8()
{
  JUMPOUT(0x23B83E31CLL);
}

__n128 sub_239514CCC(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = &off_250ADD4A8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_239514D0C(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_250ADD4A8;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_239514D34(_QWORD *a1)
{
  _BYTE *v2;
  _BYTE *v3;
  uint64_t v4;
  void *__p;
  char v6;

  if (sub_2396FD7B0(a1[2]))
  {
    v2 = (_BYTE *)a1[3];
    if (v2[8])
      sub_2394202DC((_QWORD *)(*(_QWORD *)v2 + 120), 2);
  }
  v3 = (_BYTE *)a1[3];
  if (v3[8])
    sub_2396F20BC((int **)(*(_QWORD *)v3 + 160));
  v4 = a1[1];
  v6 = 0;
  LOBYTE(__p) = 0;
  sub_2396FCC6C(v4, (uint64_t)&__p);
  if (v6 < 0)
    operator delete(__p);
}

void sub_239514E00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_239514E28()
{
  JUMPOUT(0x23B83E31CLL);
}

__n128 sub_239514E3C(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x88uLL);
  *(_QWORD *)v2 = &off_250ADD4F0;
  *(_OWORD *)(v2 + 72) = *(_OWORD *)(a1 + 72);
  *(_OWORD *)(v2 + 88) = *(_OWORD *)(a1 + 88);
  *(_OWORD *)(v2 + 104) = *(_OWORD *)(a1 + 104);
  *(_OWORD *)(v2 + 120) = *(_OWORD *)(a1 + 120);
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  result = *(__n128 *)(a1 + 56);
  *(__n128 *)(v2 + 56) = result;
  return result;
}

__n128 sub_239514EAC(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __n128 result;
  __int128 v6;
  __int128 v7;

  *(_QWORD *)a2 = &off_250ADD4F0;
  v2 = *(_OWORD *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  v4 = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 56) = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(a2 + 40) = v4;
  *(_OWORD *)(a2 + 24) = v3;
  *(_OWORD *)(a2 + 8) = v2;
  result = *(__n128 *)(a1 + 72);
  v6 = *(_OWORD *)(a1 + 88);
  v7 = *(_OWORD *)(a1 + 104);
  *(_OWORD *)(a2 + 120) = *(_OWORD *)(a1 + 120);
  *(_OWORD *)(a2 + 104) = v7;
  *(_OWORD *)(a2 + 88) = v6;
  *(__n128 *)(a2 + 72) = result;
  return result;
}

void sub_239514F04(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  unint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  float v15;
  uint64_t v16;
  uint64_t v17;
  float v18;
  char **v19;
  uint64_t v20;
  char **v21;
  float v22;
  char *v24;
  unsigned int *v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  float v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int *v33;
  unsigned int *v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  char *v38;
  int64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  _BYTE *v44;
  _QWORD *v45;
  uint64_t v46;
  unint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _OWORD *v52;
  char *v53;
  uint64_t v54;
  __int128 v55;
  _QWORD *v56;
  uint64_t v57;
  char v58;
  uint64_t v59;
  void **v60;
  uint64_t v61;
  char *v62;
  char *v63;
  char *v64;
  uint64_t v65;
  int v66;
  void *v67;
  __int128 v68;
  int v69;
  char v70;
  void *__p;
  unsigned int *v72;
  uint64_t v73;
  void *v74;
  char *v75;
  char *v76;
  void *v77[3];
  void *v78;
  __int128 v79;
  void **v80;
  _BYTE v81[24];
  _BYTE *v82;
  uint64_t v83;

  v1 = a1;
  v83 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD **)(a1 + 72);
  v3 = (_QWORD *)*v2;
  v4 = (_QWORD *)v2[1];
  while (v4 != v3)
  {
    v6 = *--v4;
    v5 = v6;
    *v4 = 0;
    if (v6)
    {
      sub_239416DA0(v5 + 8);
      v7 = nullsub_4(v5);
      MEMORY[0x23B83E31C](v7, 0x10F1C405026F4E9);
    }
  }
  v2[1] = v3;
  v8 = *(_QWORD **)(v1 + 8);
  v9 = **(_QWORD **)(v1 + 16);
  v10 = *(_QWORD *)(v1 + 32);
  v11 = **(_DWORD **)(v1 + 24);
  v12 = *(_QWORD *)(v10 + 80);
  v13 = *(_QWORD **)(v1 + 40);
  v14 = *(_QWORD *)(v10 + 112);
  v15 = *(float *)(v8[18] + 4 * v9);
  memset(v77, 0, sizeof(v77));
  sub_23941C5D8((uint64_t)v77, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v8[1] - *v8) >> 6), 0);
  v74 = 0;
  v75 = 0;
  v76 = 0;
  __p = 0;
  v72 = 0;
  v73 = 0;
  v16 = v8[18];
  if (((v8[19] - v16) >> 2) - 1 == v9)
  {
    if (!v11)
      goto LABEL_15;
    v17 = 24 * --v11;
    v18 = **(float **)(v8[21] + v17);
    v19 = *(char ***)(v8[15] + v17);
    if (&__p != (void **)v19)
      sub_23942156C(&__p, *v19, v19[1], (v19[1] - *v19) >> 2);
  }
  else
  {
    v18 = *(float *)(v16 + 4 * (v9 + 1));
    v20 = v8[12];
    v21 = (char **)(v20 + 24 * (v9 + 1));
    if (&__p != (void **)v21)
      sub_23942156C(&__p, *v21, *(char **)(v20 + 24 * (v9 + 1) + 8), (uint64_t)(*(_QWORD *)(v20 + 24 * (v9 + 1) + 8) - (_QWORD)*v21) >> 2);
  }
  v22 = v18 + (float)((float)((float)(unint64_t)sub_2396F5F50() * 0.00097656) * 0.00097656);
  if ((float)(v15 + v18) > (float)v12 || v22 >= (float)((float)v14 * 0.9))
  {
LABEL_15:
    v24 = 0;
    LOBYTE(v67) = 0;
    v70 = 0;
    v25 = (unsigned int *)__p;
    if (!__p)
      goto LABEL_17;
    goto LABEL_16;
  }
  v33 = (unsigned int *)__p;
  v34 = v72;
  if (__p == v72)
  {
    v24 = 0;
    goto LABEL_85;
  }
  v65 = v1;
  v66 = v11;
  v24 = 0;
  do
  {
    while (1)
    {
      v35 = *v33;
      v36 = *v13;
      if (v24 >= v76)
        break;
      *(_QWORD *)v24 = *(_QWORD *)(v36 + 8 * v35);
      v24 += 8;
      v75 = v24;
      if (++v33 == v34)
        goto LABEL_79;
    }
    v37 = v13;
    v38 = (char *)v74;
    v39 = v24 - (_BYTE *)v74;
    v40 = (v24 - (_BYTE *)v74) >> 3;
    v41 = v40 + 1;
    if ((unint64_t)(v40 + 1) >> 61)
      sub_2394189F8();
    v42 = v76 - (_BYTE *)v74;
    if ((v76 - (_BYTE *)v74) >> 2 > v41)
      v41 = v42 >> 2;
    if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFF8)
      v43 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v43 = v41;
    if (v43)
    {
      if (v43 >> 61)
        sub_239418A80();
      v44 = operator new(8 * v43);
      v45 = &v44[8 * v40];
      *v45 = *(_QWORD *)(v36 + 8 * v35);
      v46 = (uint64_t)(v45 + 1);
      if (v24 != v38)
      {
LABEL_39:
        v47 = v24 - 8 - v38;
        if (v47 < 0x168
          || &v44[v39 - 8 - (v47 & 0xFFFFFFFFFFFFFFF8)] > &v44[v39 - 8]
          || &v24[-(v47 & 0xFFFFFFFFFFFFFFF8) - 8] > v24 - 8
          || (unint64_t)(v24 - &v44[v39]) < 0x20)
        {
          v48 = v24;
          v13 = v37;
        }
        else
        {
          v50 = (v47 >> 3) + 1;
          v51 = 8 * (v50 & 0x3FFFFFFFFFFFFFFCLL);
          v48 = &v24[-v51];
          v45 = (_QWORD *)((char *)v45 - v51);
          v52 = &v44[8 * v40 - 16];
          v53 = v24 - 16;
          v54 = v50 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v55 = *(_OWORD *)v53;
            *(v52 - 1) = *((_OWORD *)v53 - 1);
            *v52 = v55;
            v52 -= 2;
            v53 -= 32;
            v54 -= 4;
          }
          while (v54);
          v13 = v37;
          if (v50 == (v50 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_42:
            v24 = (char *)v74;
            v74 = v45;
            v75 = (char *)v46;
            v76 = &v44[8 * v43];
            if (!v24)
              goto LABEL_44;
LABEL_43:
            operator delete(v24);
            goto LABEL_44;
          }
        }
        do
        {
          v49 = *((_QWORD *)v48 - 1);
          v48 -= 8;
          *--v45 = v49;
        }
        while (v48 != v38);
        goto LABEL_42;
      }
    }
    else
    {
      v44 = 0;
      v45 = (_QWORD *)(8 * v40);
      *(_QWORD *)(8 * v40) = *(_QWORD *)(v36 + 8 * v35);
      v46 = 8 * v40 + 8;
      if (v24 != v38)
        goto LABEL_39;
    }
    v13 = v37;
    v74 = v45;
    v75 = (char *)v46;
    v76 = &v44[8 * v43];
    if (v24)
      goto LABEL_43;
LABEL_44:
    v24 = (char *)v46;
    v75 = (char *)v46;
    ++v33;
  }
  while (v33 != v34);
LABEL_79:
  v62 = (char *)v74;
  if (v74 == v24)
  {
    v11 = v66;
    v1 = v65;
  }
  else
  {
    v63 = (char *)v77[0];
    v64 = (char *)v74;
    v11 = v66;
    v1 = v65;
    do
    {
      *(_QWORD *)&v63[((unint64_t)*(unsigned int *)v64 >> 3) & 0x1FFFFFF8] |= 1 << *(_DWORD *)v64;
      *(_QWORD *)&v63[((unint64_t)*((unsigned int *)v64 + 1) >> 3) & 0x1FFFFFF8] |= 1 << *((_DWORD *)v64 + 1);
      v64 += 8;
    }
    while (v64 != v24);
    v24 = v62;
  }
LABEL_85:
  sub_23948C0E0(&v78, (uint64_t)v77);
  v67 = v78;
  v68 = v79;
  v69 = v11;
  v70 = 1;
  v25 = (unsigned int *)__p;
  if (__p)
  {
LABEL_16:
    v72 = v25;
    operator delete(v25);
  }
LABEL_17:
  if (v24)
  {
    v75 = v24;
    operator delete(v24);
  }
  if (v77[0])
    operator delete(v77[0]);
  if (v70)
  {
    v26 = *(_QWORD *)(v1 + 48);
    v27 = *(uint64_t **)(v1 + 56);
    v28 = *(_QWORD *)(v1 + 64);
    v29 = *(float *)(*(_QWORD *)(v1 + 32) + 92);
    v30 = *(_QWORD *)(v1 + 80);
    v31 = *(_QWORD *)(v1 + 88);
    v32 = *(_QWORD *)(v31 + 24);
    if (!v32)
      goto LABEL_25;
    if (v32 == v31)
    {
      v80 = &v78;
      (*(void (**)(_QWORD, void **))(**(_QWORD **)(v31 + 24) + 24))(*(_QWORD *)(v31 + 24), &v78);
    }
    else
    {
      v32 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v32 + 16))(v32);
LABEL_25:
      v80 = (void **)v32;
    }
    v56 = v81;
    v57 = *(_QWORD *)(v31 + 56);
    if (v57)
    {
      if (v57 != v31 + 32)
      {
        v57 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v57 + 16))(v57);
        goto LABEL_60;
      }
      v82 = v81;
      (*(void (**)(_QWORD, _BYTE *))(**(_QWORD **)(v31 + 56) + 24))(*(_QWORD *)(v31 + 56), v81);
    }
    else
    {
LABEL_60:
      v82 = (_BYTE *)v57;
    }
    v58 = sub_239518E70(v26, (uint64_t)&v67, v27, v28, v69, v30, &v78, *(_QWORD **)(v1 + 72), v29, **(_DWORD **)(v1 + 120));
    if (v82 == v81)
    {
      v59 = 4;
LABEL_66:
      (*(void (**)(_QWORD *))(*v56 + 8 * v59))(v56);
    }
    else if (v82)
    {
      v59 = 5;
      v56 = v82;
      goto LABEL_66;
    }
    v60 = v80;
    if (v80 == &v78)
    {
      v61 = 4;
      v60 = &v78;
LABEL_71:
      (*((void (**)(void))*v60 + v61))();
    }
    else if (v80)
    {
      v61 = 5;
      goto LABEL_71;
    }
    if ((v58 & 1) == 0 && *(_BYTE *)(*(_QWORD *)(v1 + 96) + 8))
    {
      j__pthread_rwlock_wrlock(*(pthread_rwlock_t **)(v1 + 112));
      sub_2394202DC((_QWORD *)(**(_QWORD **)(v1 + 96) + 120), 6009);
      j__pthread_rwlock_unlock(*(pthread_rwlock_t **)(v1 + 112));
      **(_BYTE **)(v1 + 104) = 0;
    }
    if (v70 && v67)
      operator delete(v67);
  }
}

void sub_23951555C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, void *a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  void *v35;
  void *v36;

  if (a18)
  {
    operator delete(a18);
    v35 = a21;
    if (!a21)
    {
LABEL_3:
      v36 = __p;
      if (!__p)
        goto LABEL_5;
      goto LABEL_4;
    }
  }
  else
  {
    v35 = a21;
    if (!a21)
      goto LABEL_3;
  }
  operator delete(v35);
  v36 = __p;
  if (!__p)
LABEL_5:
    _Unwind_Resume(exception_object);
LABEL_4:
  operator delete(v36);
  goto LABEL_5;
}

void sub_239515660()
{
  JUMPOUT(0x23B83E31CLL);
}

__n128 sub_239515674(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0xB0uLL);
  *(_QWORD *)v2 = &off_250ADD538;
  *(_OWORD *)(v2 + 120) = *(_OWORD *)(a1 + 120);
  *(_OWORD *)(v2 + 136) = *(_OWORD *)(a1 + 136);
  *(_OWORD *)(v2 + 152) = *(_OWORD *)(a1 + 152);
  *((_QWORD *)v2 + 21) = *(_QWORD *)(a1 + 168);
  *(_OWORD *)(v2 + 56) = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(v2 + 72) = *(_OWORD *)(a1 + 72);
  *(_OWORD *)(v2 + 88) = *(_OWORD *)(a1 + 88);
  *(_OWORD *)(v2 + 104) = *(_OWORD *)(a1 + 104);
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  return result;
}

__n128 sub_2395156FC(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __n128 result;
  __int128 v8;
  __int128 v9;

  *(_QWORD *)a2 = &off_250ADD538;
  v2 = *(_OWORD *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(_OWORD *)(a2 + 8) = v2;
  v4 = *(_OWORD *)(a1 + 56);
  v5 = *(_OWORD *)(a1 + 72);
  v6 = *(_OWORD *)(a1 + 88);
  *(_OWORD *)(a2 + 104) = *(_OWORD *)(a1 + 104);
  *(_OWORD *)(a2 + 88) = v6;
  *(_OWORD *)(a2 + 72) = v5;
  *(_OWORD *)(a2 + 56) = v4;
  result = *(__n128 *)(a1 + 120);
  v8 = *(_OWORD *)(a1 + 136);
  v9 = *(_OWORD *)(a1 + 152);
  *(_QWORD *)(a2 + 168) = *(_QWORD *)(a1 + 168);
  *(_OWORD *)(a2 + 152) = v9;
  *(_OWORD *)(a2 + 136) = v8;
  *(__n128 *)(a2 + 120) = result;
  return result;
}

uint64_t sub_23951576C(uint64_t result)
{
  uint64_t v1;
  int v2;
  float v3;
  void **v4;
  int v5;
  void *v6;
  size_t v7;
  id v8;
  char *v9;
  __int128 v10;
  __int128 v11;
  _QWORD *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  _QWORD *v30;
  unsigned int **v31;
  int32x2_t **v32;
  _QWORD *v33;
  float **v34;
  uint64_t v35;
  float v36;
  float v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  int v44;
  char v45;
  int v46;
  _QWORD *v47;
  uint64_t v48;
  void **v49;
  int v50;
  uint64_t v51;
  int v52;
  void *v53;
  void *v54;
  void *v55;
  uint64_t v56;
  int v57;
  __int128 v58;
  std::__shared_weak_count *v59;
  __int128 v60;
  __int128 v61;
  _QWORD v62[3];
  _QWORD *v63;
  _BYTE v64[24];
  _BYTE *v65;
  _BYTE v66[24];
  _BYTE *v67;
  _BYTE v68[24];
  _BYTE *v69;
  _QWORD v70[3];
  _QWORD *v71;
  _QWORD v72[3];
  _QWORD *v73;
  uint64_t v74;

  v74 = *MEMORY[0x24BDAC8D0];
  if (*(int *)(**(_QWORD **)(result + 16) + 4 * **(int **)(result + 24)) >= 1)
  {
    v1 = result;
    v2 = 0;
    v3 = 1.0;
    while (1)
    {
      result = sub_2396FD7B0(*(_QWORD *)(v1 + 32));
      if ((_DWORD)result)
      {
LABEL_77:
        **(_BYTE **)(v1 + 80) = 0;
        return result;
      }
      kdebug_trace();
      LODWORD(v70[0]) = 0;
      v4 = *(void ***)(v1 + 40);
      result = sub_23950F94C(*(_QWORD *)(v1 + 48), *v4, v4[2], v4[1], v4[4], v4[3], **(_QWORD **)(v1 + 56), v4[6], 0.1, v4[7], v4[8], v70);
      v5 = v70[0];
      if (LODWORD(v70[0]))
      {
        if (*(_BYTE *)(*(_QWORD *)(v1 + 88) + 8))
        {
          j__pthread_rwlock_wrlock(*(pthread_rwlock_t **)(v1 + 136));
          sub_2394202DC((_QWORD *)(**(_QWORD **)(v1 + 88) + 120), v5);
          result = j__pthread_rwlock_unlock(*(pthread_rwlock_t **)(v1 + 136));
        }
        goto LABEL_77;
      }
      kdebug_trace();
      result = sub_2396FD7B0(*(_QWORD *)(v1 + 32));
      if ((_DWORD)result)
        goto LABEL_77;
      v6 = *(void **)(*(_QWORD *)(v1 + 40) + 72);
      v7 = objc_msgSend(v6, "length");
      v8 = objc_retainAutorelease(v6);
      bzero((void *)objc_msgSend(v8, "contents"), v7);
      nullsub_4(v8);

      result = sub_2396FD7B0(*(_QWORD *)(v1 + 32));
      if ((_DWORD)result)
        goto LABEL_77;
      sub_2396FDAA8(*(_QWORD **)(v1 + 32), (uint64_t)v68);
      sub_2396FD534(&v58, *(_QWORD *)(v1 + 96), **(int **)(v1 + 104));
      v67 = 0;
      v9 = (char *)operator new(0x40uLL);
      *(_QWORD *)v9 = &off_250ADB9D8;
      *(_OWORD *)(v9 + 8) = v58;
      *((_QWORD *)v9 + 3) = v59;
      *((_QWORD *)&v58 + 1) = 0;
      v59 = 0;
      v10 = v60;
      v60 = 0uLL;
      v11 = v61;
      *((_OWORD *)v9 + 2) = v10;
      *((_OWORD *)v9 + 3) = v11;
      v61 = 0uLL;
      v67 = v9;
      sub_2396FD600((uint64_t)v70, (uint64_t)v68, (uint64_t)v66);
      v12 = v67;
      if (v67 == v66)
        break;
      if (v67)
      {
        v13 = 5;
LABEL_11:
        (*(void (**)(void))(*v12 + 8 * v13))();
      }
      v14 = (std::__shared_weak_count *)*((_QWORD *)&v61 + 1);
      if (!*((_QWORD *)&v61 + 1))
        goto LABEL_16;
      v15 = (unint64_t *)(*((_QWORD *)&v61 + 1) + 8);
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
        v17 = (std::__shared_weak_count *)*((_QWORD *)&v60 + 1);
        if (!*((_QWORD *)&v60 + 1))
          goto LABEL_22;
      }
      else
      {
LABEL_16:
        v17 = (std::__shared_weak_count *)*((_QWORD *)&v60 + 1);
        if (!*((_QWORD *)&v60 + 1))
          goto LABEL_22;
      }
      p_shared_owners = (unint64_t *)&v17->__shared_owners_;
      do
        v19 = __ldaxr(p_shared_owners);
      while (__stlxr(v19 - 1, p_shared_owners));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
LABEL_22:
      v20 = v59;
      if (!v59)
        goto LABEL_26;
      v21 = (unint64_t *)&v59->__shared_owners_;
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
        v23 = v69;
        if (v69 == v68)
        {
LABEL_30:
          v23 = v68;
          v24 = 4;
          goto LABEL_31;
        }
      }
      else
      {
LABEL_26:
        v23 = v69;
        if (v69 == v68)
          goto LABEL_30;
      }
      if (!v23)
        goto LABEL_32;
      v24 = 5;
LABEL_31:
      (*(void (**)(void))(*v23 + 8 * v24))();
LABEL_32:
      v52 = v2;
      v57 = 0;
      v25 = *(_QWORD **)(v1 + 40);
      v55 = (void *)v25[3];
      v56 = *(_QWORD *)(v1 + 48);
      v26 = (void *)v25[5];
      v53 = (void *)v25[6];
      v54 = (void *)v25[7];
      v27 = **(_QWORD **)(v1 + 56);
      v28 = **(_QWORD **)(v1 + 64);
      v29 = *(uint64_t **)(v1 + 8);
      v30 = *(_QWORD **)(v1 + 112);
      v31 = *(unsigned int ***)(v1 + 120);
      v32 = *(int32x2_t ***)(v1 + 144);
      v33 = *(_QWORD **)(v1 + 152);
      v34 = *(float ***)(v1 + 160);
      v35 = *(_QWORD *)(v1 + 128);
      v36 = *(float *)(v35 + 100);
      v37 = *(float *)(v35 + 104);
      v38 = (uint64_t)v71;
      if (!v71)
        goto LABEL_35;
      if (v71 != v70)
      {
        v38 = (*(uint64_t (**)(void))(*v71 + 16))();
LABEL_35:
        v63 = (_QWORD *)v38;
        goto LABEL_37;
      }
      v63 = v62;
      (*(void (**)(_QWORD *, _QWORD *))(v70[0] + 24))(v70, v62);
LABEL_37:
      v39 = (uint64_t)v73;
      if (!v73)
        goto LABEL_40;
      if (v73 != v72)
      {
        v39 = (*(uint64_t (**)(void))(*v73 + 16))();
LABEL_40:
        v65 = (_BYTE *)v39;
        goto LABEL_42;
      }
      v65 = v64;
      (*(void (**)(_QWORD *))(v72[0] + 24))(v72);
LABEL_42:
      sub_239510F28(v56, v55, v26, v54, v53, v27, v28, v29, v36, v37, v30, v31, v32, v33, v34, v62, *(void **)(*(_QWORD *)(v1 + 40) + 72), &v57);
      v40 = v65;
      if (v65 == v64)
      {
        v40 = v64;
        v41 = 4;
      }
      else
      {
        if (!v65)
          goto LABEL_47;
        v41 = 5;
      }
      (*(void (**)(void))(*v40 + 8 * v41))();
LABEL_47:
      v42 = v63;
      if (v63 == v62)
      {
        v42 = v62;
        v43 = 4;
      }
      else
      {
        if (!v63)
          goto LABEL_52;
        v43 = 5;
      }
      (*(void (**)(void))(*v42 + 8 * v43))();
LABEL_52:
      v44 = v57;
      if (v57)
      {
        if (*(_BYTE *)(*(_QWORD *)(v1 + 88) + 8))
        {
          j__pthread_rwlock_wrlock(*(pthread_rwlock_t **)(v1 + 136));
          sub_2394202DC((_QWORD *)(**(_QWORD **)(v1 + 88) + 120), v44);
          j__pthread_rwlock_unlock(*(pthread_rwlock_t **)(v1 + 136));
        }
        v45 = 0;
        **(_BYTE **)(v1 + 80) = 0;
        v46 = v52;
        v47 = v73;
        if (v73 == v72)
        {
LABEL_63:
          v47 = v72;
          v48 = 4;
          goto LABEL_64;
        }
      }
      else
      {
        v46 = v52;
        if (sub_2396FD7B0(*(_QWORD *)(v1 + 32)))
          goto LABEL_62;
        v57 = 0;
        v49 = *(void ***)(v1 + 40);
        sub_23950F450(*(_QWORD *)(v1 + 48), v49[9], **(_QWORD **)(v1 + 56), *v49, v49[1], v49[2], v49[3], v49[8], 1.0, 0.25, v3, &v57);
        v50 = v57;
        if (v57)
        {
          if (*(_BYTE *)(*(_QWORD *)(v1 + 88) + 8))
          {
            j__pthread_rwlock_wrlock(*(pthread_rwlock_t **)(v1 + 136));
            sub_2394202DC((_QWORD *)(**(_QWORD **)(v1 + 88) + 120), v50);
            j__pthread_rwlock_unlock(*(pthread_rwlock_t **)(v1 + 136));
          }
LABEL_62:
          v45 = 0;
          **(_BYTE **)(v1 + 80) = 0;
          v47 = v73;
          if (v73 == v72)
            goto LABEL_63;
          goto LABEL_56;
        }
        sub_2396B92F4(*(int32x2_t ***)(v1 + 120));
        v3 = v3 * 0.75;
        v45 = 1;
        v47 = v73;
        if (v73 == v72)
          goto LABEL_63;
      }
LABEL_56:
      if (!v47)
        goto LABEL_65;
      v48 = 5;
LABEL_64:
      (*(void (**)(void))(*v47 + 8 * v48))();
LABEL_65:
      result = (uint64_t)v71;
      if (v71 == v70)
      {
        result = (uint64_t)v70;
        v51 = 4;
      }
      else
      {
        if (!v71)
          goto LABEL_70;
        v51 = 5;
      }
      result = (*(uint64_t (**)(void))(*(_QWORD *)result + 8 * v51))();
LABEL_70:
      if ((v45 & 1) != 0)
      {
        v2 = v46 + 1;
        if (v2 < *(_DWORD *)(**(_QWORD **)(v1 + 16) + 4 * **(int **)(v1 + 24)))
          continue;
      }
      return result;
    }
    v12 = v66;
    v13 = 4;
    goto LABEL_11;
  }
  return result;
}

void sub_239515E10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,_QWORD *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,char a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,_QWORD *a59)
{
  uint64_t v59;
  uint64_t v61;

  if (a59 == a22)
  {
    v61 = 4;
  }
  else
  {
    if (!a59)
      goto LABEL_6;
    v61 = 5;
    a22 = a59;
  }
  (*(void (**)(void))(*a22 + 8 * v61))();
LABEL_6:
  if (a55 == v59 - 200)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)(v59 - 200) + 32))(v59 - 200);
    _Unwind_Resume(exception_object);
  }
  if (a55)
  {
    (*(void (**)(void))(*(_QWORD *)a55 + 40))();
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

double sub_239516070(float64x2_t *a1)
{
  double v2;
  double v3;
  double v4;
  int v5;
  double v6;
  double v7;
  double v8;
  double v10;
  double v17;
  double v18;
  double v19;
  double cosval;
  double v21;
  __double2 v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double result;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  uint64_t v35;
  double v36;
  int8x16_t v37;
  double v38;

  v37 = 0uLL;
  v38 = 0.0;
  sub_239458B60(a1, (double *)v37.i64);
  v2 = *(double *)&v37.i64[1] * *(double *)&v37.i64[1] + *(double *)v37.i64 * *(double *)v37.i64 + v38 * v38;
  if (v2 > 9.8696044)
  {
    v3 = sqrt(v2) / 3.14159265;
    v4 = ceil(v3) + -1.0;
    v5 = (int)v4;
    v6 = v3 - v4;
    if ((v5 & 1) != 0)
      v6 = v6 + -1.0;
    v7 = v6 / v3;
    *(double *)v37.i64 = *(double *)v37.i64 * v7;
    *(double *)&v37.i64[1] = *(double *)&v37.i64[1] * v7;
    v38 = v38 * v7;
  }
  v8 = v38;
  _Q7 = v37;
  *(_QWORD *)&v10 = vextq_s8(_Q7, _Q7, 8uLL).u64[0];
  _D1 = v37.i64[1];
  __asm { FMLA            D0, D1, V7.D[1] }
  v17 = _D0 + v8 * v8;
  if (v17 >= 0.0000002635)
  {
    v21 = sqrt(v17);
    v35 = v37.i64[0];
    v36 = v38;
    v34 = v10;
    v22 = __sincos_stret(v21);
    cosval = v22.__cosval;
    v10 = v34;
    _Q7.i64[0] = v35;
    v8 = v36;
    v19 = v22.__sinval / v21;
    v18 = 1.0 / v17 * (1.0 - v22.__cosval);
  }
  else
  {
    v18 = 0.5 - v17 * (v17 / -720.0 + 0.0416666667);
    v19 = 1.0 - v17 * (0.166666667 - v17 * (v17 / -5040.0 + 0.00833333333));
    cosval = 1.0 - v17 * v18;
  }
  v23 = *(double *)_Q7.i64 * v18;
  v24 = v10 * v18;
  v25 = cosval + *(double *)_Q7.i64 * v18 * *(double *)_Q7.i64;
  v26 = cosval + v10 * v18 * v10;
  result = cosval + v8 * v18 * v8;
  v28 = v10 * v23;
  v29 = v8 * v23;
  v30 = v8 * v24;
  v31 = *(double *)_Q7.i64 * v19;
  v32 = v10 * v19;
  v33 = v8 * v19;
  a1->f64[0] = v25;
  a1->f64[1] = v28 + v33;
  a1[1].f64[0] = v29 - v32;
  a1[1].f64[1] = v28 - v33;
  a1[2].f64[0] = v26;
  a1[2].f64[1] = v31 + v30;
  a1[3].f64[0] = v32 + v29;
  a1[3].f64[1] = v30 - v31;
  a1[4].f64[0] = result;
  return result;
}

_QWORD *sub_239516238(_QWORD *a1, id *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  _QWORD *v12;
  char *v13;
  char *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  char *v25;
  void *v26;

  v3 = a1[1] - *a1;
  v4 = v3 >> 3;
  v5 = (v3 >> 3) + 1;
  if (v5 >> 61)
    sub_2394189F8();
  v7 = a1[2] - *a1;
  if (v7 >> 2 > v5)
    v5 = v7 >> 2;
  if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFF8)
    v8 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v8 = v5;
  if (v8)
  {
    if (v8 >> 61)
      sub_239418A80();
    v9 = (char *)operator new(8 * v8);
  }
  else
  {
    v9 = 0;
  }
  v10 = &v9[8 * v4];
  v11 = &v9[8 * v8];
  *(_QWORD *)v10 = *a2;
  v12 = v10 + 8;
  v13 = (char *)*a1;
  v14 = (char *)a1[1];
  if (v14 == (char *)*a1)
  {
    *a1 = v10;
    a1[1] = v12;
    a1[2] = v11;
    if (!v14)
      return v12;
    goto LABEL_23;
  }
  v15 = (unint64_t)&v14[-*a1 - 8];
  if (v15 < 0x78 || &v14[-(v15 & 0xFFFFFFFFFFFFFFF8) - 8] < v10 && &v9[v3 - (v15 & 0xFFFFFFFFFFFFFFF8) - 8] < v14)
    goto LABEL_31;
  v16 = (v15 >> 3) + 1;
  v17 = 8 * (v16 & 0x3FFFFFFFFFFFFFFCLL);
  v10 -= v17;
  v18 = &v14[-v17];
  v19 = v14 - 16;
  v20 = &v9[8 * v4 - 16];
  v21 = v16 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    v23 = *((_OWORD *)v19 - 1);
    v22 = *(_OWORD *)v19;
    *((_OWORD *)v19 - 1) = 0uLL;
    *(_OWORD *)v19 = 0uLL;
    *((_OWORD *)v20 - 1) = v23;
    *(_OWORD *)v20 = v22;
    v19 -= 32;
    v20 -= 32;
    v21 -= 4;
  }
  while (v21);
  v14 = v18;
  if (v16 != (v16 & 0x3FFFFFFFFFFFFFFCLL))
  {
LABEL_31:
    do
    {
      v24 = *((_QWORD *)v14 - 1);
      v14 -= 8;
      *(_QWORD *)v14 = 0;
      *((_QWORD *)v10 - 1) = v24;
      v10 -= 8;
    }
    while (v14 != v13);
  }
  v25 = (char *)*a1;
  v14 = (char *)a1[1];
  *a1 = v10;
  a1[1] = v12;
  a1[2] = v11;
  if (v14 != v25)
  {
    do
    {
      v26 = (void *)*((_QWORD *)v14 - 1);
      v14 -= 8;

    }
    while (v14 != v25);
    v14 = v25;
  }
  if (v14)
LABEL_23:
    operator delete(v14);
  return v12;
}

char *sub_2395163E0(char **a1, uint64_t a2)
{
  char *v3;
  char *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char **v12;
  const void *v13;
  int64_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  __int128 v19;
  char *v20;
  char *v21;
  void *v22;
  void *v23;
  char *v25;

  v4 = *a1;
  v3 = a1[1];
  v5 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 3);
  v6 = v5 + 1;
  if (v5 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_2394189F8();
  if (0x5555555555555556 * ((a1[2] - v4) >> 3) > v6)
    v6 = 0x5555555555555556 * ((a1[2] - v4) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - v4) >> 3) >= 0x555555555555555)
    v8 = 0xAAAAAAAAAAAAAAALL;
  else
    v8 = v6;
  if (v8)
  {
    if (v8 > 0xAAAAAAAAAAAAAAALL)
      sub_239418A80();
    v9 = (char *)operator new(24 * v8);
  }
  else
  {
    v9 = 0;
  }
  v10 = &v9[24 * v5];
  v11 = &v9[24 * v8];
  *((_QWORD *)v10 + 1) = 0;
  v12 = (char **)(v10 + 8);
  *((_QWORD *)v10 + 2) = 0;
  *(_QWORD *)v10 = 0;
  v13 = *(const void **)a2;
  v14 = *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
  if (v14)
  {
    if (v14 < 0)
      sub_2394189F8();
    v15 = (char *)operator new(v14);
    *(_QWORD *)v10 = v15;
    *v12 = v15;
    v16 = &v15[4 * (v14 >> 2)];
    *((_QWORD *)v10 + 2) = v16;
    memcpy(v15, v13, v14);
    *v12 = v16;
  }
  v17 = v10 + 24;
  v25 = v10 + 24;
  if (v3 == v4)
  {
    *a1 = v10;
    a1[1] = v17;
    a1[2] = v11;
  }
  else
  {
    do
    {
      v18 = v10;
      *((_QWORD *)v10 - 2) = 0;
      *((_QWORD *)v10 - 1) = 0;
      v19 = *(_OWORD *)(v3 - 24);
      v3 -= 24;
      *(_OWORD *)(v10 - 24) = v19;
      v10 -= 24;
      *((_QWORD *)v18 - 1) = *((_QWORD *)v3 + 2);
      *(_QWORD *)v3 = 0;
      *((_QWORD *)v3 + 1) = 0;
      *((_QWORD *)v3 + 2) = 0;
    }
    while (v3 != v4);
    v20 = *a1;
    v3 = a1[1];
    v17 = v25;
    *a1 = v10;
    a1[1] = v25;
    a1[2] = v11;
    if (v3 != v20)
    {
      v21 = v3;
      do
      {
        v23 = (void *)*((_QWORD *)v21 - 3);
        v21 -= 24;
        v22 = v23;
        if (v23)
        {
          *((_QWORD *)v3 - 2) = v22;
          operator delete(v22);
        }
        v3 = v21;
      }
      while (v21 != v20);
      v3 = v20;
    }
  }
  if (v3)
    operator delete(v3);
  return v17;
}

void sub_2395165C8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void **v2;
  _QWORD *v3;
  void *v5;
  va_list va;

  va_start(va, a2);
  v5 = *v2;
  if (*v2)
  {
    *v3 = v5;
    operator delete(v5);
  }
  sub_23942A5F4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_2395165EC(uint64_t a1, int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  uint64_t **v10;
  uint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v15;
  float v16;
  float v17;
  uint64_t v18;
  _QWORD *v19;
  _BOOL8 v20;
  unint64_t v21;
  unint64_t v22;
  size_t prime;
  unint64_t v24;
  uint8x8_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v8 <= v7)
        v4 = v7 % v8;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
    v10 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      v11 = *v10;
      if (*v10)
      {
        if (v9.u32[0] < 2uLL)
        {
          while (1)
          {
            v13 = v11[1];
            if (v13 == v7)
            {
              if (*((_DWORD *)v11 + 4) == (_DWORD)v7)
                return v11;
            }
            else if ((v13 & (v8 - 1)) != v4)
            {
              goto LABEL_23;
            }
            v11 = (uint64_t *)*v11;
            if (!v11)
              goto LABEL_23;
          }
        }
        do
        {
          v12 = v11[1];
          if (v12 == v7)
          {
            if (*((_DWORD *)v11 + 4) == (_DWORD)v7)
              return v11;
          }
          else
          {
            if (v12 >= v8)
              v12 %= v8;
            if (v12 != v4)
              break;
          }
          v11 = (uint64_t *)*v11;
        }
        while (v11);
      }
    }
  }
LABEL_23:
  v15 = operator new(0x18uLL);
  *v15 = 0;
  v15[1] = v7;
  *((_DWORD *)v15 + 4) = **a4;
  *((_DWORD *)v15 + 5) = 0;
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (v8 && (float)(v17 * (float)v8) >= v16)
  {
    v18 = *(_QWORD *)a1;
    v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v19)
    {
LABEL_26:
      *v15 = *v19;
LABEL_61:
      *v19 = v15;
      goto LABEL_62;
    }
  }
  else
  {
    v20 = 1;
    if (v8 >= 3)
      v20 = (v8 & (v8 - 1)) != 0;
    v21 = v20 | (2 * v8);
    v22 = vcvtps_u32_f32(v16 / v17);
    if (v21 <= v22)
      prime = v22;
    else
      prime = v21;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v8 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v8)
      goto LABEL_37;
    if (prime < v8)
    {
      v24 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v8 < 3 || (v25 = (uint8x8_t)vcnt_s8((int8x8_t)v8), v25.i16[0] = vaddlv_u8(v25), v25.u32[0] > 1uLL))
      {
        v24 = std::__next_prime(v24);
      }
      else
      {
        v26 = 1 << -(char)__clz(v24 - 1);
        if (v24 >= 2)
          v24 = v26;
      }
      if (prime <= v24)
        prime = v24;
      if (prime < v8)
LABEL_37:
        sub_239427FE0(a1, prime);
    }
    v8 = *(_QWORD *)(a1 + 8);
    v27 = v8 - 1;
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7)
      {
        v4 = v7 % v8;
        v18 = *(_QWORD *)a1;
        v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v7 % v8));
        if (v19)
          goto LABEL_26;
      }
      else
      {
        v4 = v7;
        v18 = *(_QWORD *)a1;
        v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v7);
        if (v19)
          goto LABEL_26;
      }
    }
    else
    {
      v4 = v27 & v7;
      v18 = *(_QWORD *)a1;
      v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v27 & v7));
      if (v19)
        goto LABEL_26;
    }
  }
  *v15 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v15;
  *(_QWORD *)(v18 + 8 * v4) = a1 + 16;
  if (*v15)
  {
    v28 = *(_QWORD *)(*v15 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v28 >= v8)
        v28 %= v8;
    }
    else
    {
      v28 &= v8 - 1;
    }
    v19 = (_QWORD *)(*(_QWORD *)a1 + 8 * v28);
    goto LABEL_61;
  }
LABEL_62:
  ++*(_QWORD *)(a1 + 24);
  return v15;
}

void sub_2395168FC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_239516914()
{
  JUMPOUT(0x23B83E31CLL);
}

__n128 sub_239516928(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_250ADD580;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 sub_239516968(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_250ADD580;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

_QWORD **sub_239516990(_QWORD **result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;

  v2 = *result[1];
  v3 = 4 * *a2;
  v4 = *(_DWORD *)(*result[2] + v3);
  if (*(_DWORD *)(*result[3] + v3) < v4)
    v4 = *(_DWORD *)(*result[3] + v3);
  if (*(_DWORD *)(v2 + v3) > (signed int)v4)
    v4 = *(_DWORD *)(v2 + v3);
  *(_DWORD *)(v2 + v3) = v4;
  return result;
}

uint64_t sub_2395169D0(uint64_t *a1, float a2)
{
  _DWORD v4[4];
  void *__p;
  uint64_t v6;
  uint64_t v7;
  void *v8[2];
  void *v9[2];
  __int128 v10;
  void *v11[3];
  char v12;
  void *v13[3];
  char v14;
  void *v15[3];
  char v16;

  v12 = 0;
  LOBYTE(v13[0]) = 0;
  v14 = 0;
  LOBYTE(v15[0]) = 0;
  v16 = 0;
  *(_OWORD *)v8 = 0u;
  *(_OWORD *)v9 = 0u;
  v10 = 0u;
  LOBYTE(v11[0]) = 0;
  v4[2] = 1268291200;
  v6 = 0;
  v7 = 0;
  __p = 0;
  *(float *)v4 = a2;
  v4[1] = 256;
  sub_2394E8FB8(a1, v8, (uint64_t)v4);
  if (v8 != (void **)a1)
  {
    sub_2394ECC58(a1, (char *)v8[0], (char *)v8[1], 0xAAAAAAAAAAAAAAABLL * (((char *)v8[1] - (char *)v8[0]) >> 2));
    sub_2394ECE5C(a1 + 3, (char *)v9[1], (char *)v10, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v10 - (unint64_t)v9[1]) >> 2));
  }
  sub_2394ED088((uint64_t)(a1 + 6), (uint64_t)v11);
  sub_2394ED1E4((uint64_t)(a1 + 10), (uint64_t)v13);
  sub_2394ED088((uint64_t)(a1 + 14), (uint64_t)v15);
  if (__p)
    operator delete(__p);
  if (v16 && v15[0])
  {
    v15[1] = v15[0];
    operator delete(v15[0]);
  }
  if (v14 && v13[0])
  {
    v13[1] = v13[0];
    operator delete(v13[0]);
  }
  if (v12 && v11[0])
  {
    v11[1] = v11[0];
    operator delete(v11[0]);
  }
  if (v9[1])
  {
    *(void **)&v10 = v9[1];
    operator delete(v9[1]);
  }
  if (v8[0])
  {
    v8[1] = v8[0];
    operator delete(v8[0]);
  }
  return 1;
}

void sub_239516B2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, char a15)
{
  if (__p)
    operator delete(__p);
  sub_2394AEEDC((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t sub_239516B4C(unsigned int **a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  unsigned int *v7;
  unsigned int *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t **v12;
  uint64_t **v13;
  uint64_t *v14;
  uint64_t *v15;
  unint64_t v16;
  uint64_t *v17;
  uint64_t **v18;
  uint64_t **v19;
  unint64_t v20;
  uint64_t *v21;
  _QWORD *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t **v29;
  BOOL v30;
  unsigned int *v31;
  unint64_t v32;
  unint64_t v33;
  unsigned int *v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int *v37;
  unint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  _DWORD *v41;
  _QWORD *v42;
  _QWORD *v43;
  void *v44;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  void *v50[2];
  void *__p[2];
  int v52;
  uint64_t **v53;
  uint64_t *v54;
  uint64_t v55;
  unint64_t *v56;

  v54 = 0;
  v55 = 0;
  v53 = &v54;
  v7 = *a1;
  v8 = a1[1];
  if (*a1 == v8)
  {
    v9 = 0;
    v22 = a3 + 1;
    v23 = *a3;
    v24 = (a3[1] - *a3) >> 3;
  }
  else
  {
    v9 = 0;
    do
    {
      v11 = *v7;
      v10 = v7[1];
      v12 = &v54;
      v13 = &v54;
      v14 = v54;
      if (v54)
      {
        v15 = v54;
        while (1)
        {
          while (1)
          {
            v13 = (uint64_t **)v15;
            v16 = v15[4];
            if (v16 <= v11)
              break;
            v15 = *v13;
            v12 = v13;
            if (!*v13)
              goto LABEL_12;
          }
          if (v16 >= v11)
            break;
          v15 = v13[1];
          if (!v15)
          {
            v12 = v13 + 1;
            goto LABEL_12;
          }
        }
      }
      else
      {
LABEL_12:
        v17 = (uint64_t *)operator new(0x28uLL);
        v17[4] = v11;
        *v17 = 0;
        v17[1] = 0;
        v17[2] = (uint64_t)v13;
        *v12 = v17;
        if (*v53)
        {
          v53 = (uint64_t **)*v53;
          v17 = *v12;
        }
        sub_2394213B8(v54, v17);
        v14 = v54;
        v9 = ++v55;
      }
      v18 = &v54;
      v19 = &v54;
      if (v14)
      {
        while (1)
        {
          while (1)
          {
            v19 = (uint64_t **)v14;
            v20 = v14[4];
            if (v20 <= v10)
              break;
            v14 = *v19;
            v18 = v19;
            if (!*v19)
              goto LABEL_22;
          }
          if (v20 >= v10)
            break;
          v14 = v19[1];
          if (!v14)
          {
            v18 = v19 + 1;
            goto LABEL_22;
          }
        }
      }
      else
      {
LABEL_22:
        v21 = (uint64_t *)operator new(0x28uLL);
        v21[4] = v10;
        *v21 = 0;
        v21[1] = 0;
        v21[2] = (uint64_t)v19;
        *v18 = v21;
        if (*v53)
        {
          v53 = (uint64_t **)*v53;
          v21 = *v18;
        }
        sub_2394213B8(v54, v21);
        v9 = ++v55;
      }
      v7 += 2;
    }
    while (v7 != v8);
    v22 = a3 + 1;
    v23 = *a3;
    v24 = (a3[1] - *a3) >> 3;
    if (v9 > v24)
    {
      sub_23946DAD4((uint64_t)a3, v9 - v24);
      goto LABEL_29;
    }
  }
  if (v24 > v9)
    *v22 = v23 + 8 * v9;
LABEL_29:
  *(_OWORD *)v50 = 0u;
  *(_OWORD *)__p = 0u;
  v52 = 1065353216;
  v49 = 0;
  v25 = (uint64_t *)v53;
  if (v53 != &v54)
  {
    v26 = 0;
    do
    {
      v56 = (unint64_t *)(v25 + 4);
      sub_2395193BC((uint64_t)v50, (unint64_t *)v25 + 4, (uint64_t)&unk_239EC6E98, &v56)[3] = v26;
      v27 = v25[4];
      v56 = &v49;
      sub_2395193BC(a2, &v49, (uint64_t)&unk_239EC6E98, &v56)[3] = v27;
      *(_QWORD *)(*a3 + 8 * v49) = v49;
      v26 = ++v49;
      v28 = (uint64_t *)v25[1];
      if (v28)
      {
        do
        {
          v29 = (uint64_t **)v28;
          v28 = (uint64_t *)*v28;
        }
        while (v28);
      }
      else
      {
        do
        {
          v29 = (uint64_t **)v25[2];
          v30 = *v29 == v25;
          v25 = (uint64_t *)v29;
        }
        while (!v30);
      }
      v25 = (uint64_t *)v29;
    }
    while (v29 != &v54);
  }
  v31 = *a1;
  v32 = ((char *)a1[1] - (char *)*a1) >> 3;
  v33 = (uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 3;
  if (v32 <= v33)
  {
    if (v32 < v33)
      *(_QWORD *)(a4 + 8) = *(_QWORD *)a4 + 8 * v32;
  }
  else
  {
    sub_2394FBB68((void **)a4, v32 - v33);
    v31 = *a1;
  }
  v34 = a1[1];
  if (v34 != v31)
  {
    v35 = 0;
    v36 = ((char *)v34 - (char *)v31) >> 3;
    do
    {
      v37 = &(*a1)[v35];
      v38 = v37[1];
      v48 = *v37;
      v56 = &v48;
      v39 = sub_2395196E0((uint64_t)v50, &v48, (uint64_t)&unk_239EC6E98, &v56);
      v47 = v38;
      v56 = &v47;
      v40 = sub_2395196E0((uint64_t)v50, &v47, (uint64_t)&unk_239EC6E98, &v56)[3];
      v41 = (_DWORD *)(*(_QWORD *)a4 + v35 * 4);
      *v41 = v39[3];
      v41[1] = v40;
      v35 += 2;
      --v36;
    }
    while (v36);
  }
  v42 = __p[0];
  if (__p[0])
  {
    do
    {
      v43 = (_QWORD *)*v42;
      operator delete(v42);
      v42 = v43;
    }
    while (v43);
  }
  v44 = v50[0];
  v50[0] = 0;
  if (v44)
    operator delete(v44);
  sub_239421038((uint64_t)&v53, v54);
  return 1;
}

void sub_239516F0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, _QWORD *a19)
{
  sub_239421038((uint64_t)&a18, a19);
  _Unwind_Resume(a1);
}

void sub_239516F24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, _QWORD *a19)
{
  sub_239420950((uint64_t)&a13);
  sub_239421038((uint64_t)&a18, a19);
  _Unwind_Resume(a1);
}

uint64_t sub_239516F68(uint64_t a1, int a2, uint64_t **a3, _QWORD *a4, uint64_t *a5, unsigned int a6, _QWORD *a7, float a8)
{
  _QWORD *v8;
  uint64_t v11;
  void **v12;
  uint64_t **v13;
  uint64_t *v14;
  uint64_t *v15;
  unint64_t v16;
  unint64_t v18;
  void **v19;
  void **v20;
  void **v21;
  void **v22;
  void **v23;
  void *v24;
  void **v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  void *v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t *v44;
  uint64_t v45;
  _OWORD *v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  uint64_t v53;
  float64x2_t v54;
  int8x8_t v55;
  unint64_t v56;
  uint8x8_t v57;
  unint64_t v58;
  _QWORD *v59;
  _QWORD *v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  int8x8_t v65;
  uint8x8_t v66;
  unint64_t v67;
  _QWORD *v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t *v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  __int128 v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  __int128 v84;
  unint64_t v85;
  _OWORD *v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  uint64_t v93;
  uint64_t *v98;
  uint64_t *v99;
  uint64_t v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  float64x2_t v107;
  uint64_t v108;
  uint64_t v109;
  _DWORD *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  __int128 v118;
  void **v119;
  unint64_t v120;
  size_t v121;
  size_t v122;
  void *v123;
  _QWORD *v124;
  uint64_t v125;
  void **v126;
  unint64_t v127;
  unsigned int v128;
  void **v129;
  void **v130;
  void *v131;
  char *v132;
  char *v133;
  char *v134;
  char *v135;
  void *v136;
  void *v137;
  uint64_t v138;
  uint64_t v139;
  unint64_t v140;
  uint64_t v141;
  uint64_t v142;
  void *v143;
  void *v144;
  uint64_t v145;
  int v146;
  std::bad_alloc *exception;
  std::bad_alloc *v149;
  unint64_t v154;
  double v156;
  unint64_t *v158;
  float64x2_t v159;
  void *memptr;

  v8 = a7;
  v11 = a7[3];
  v12 = (void **)a7[4];
  v13 = (uint64_t **)(a7 + 3);
  v15 = *a3;
  v14 = a3[1];
  v16 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v12 - v11) >> 3);
  v154 = a2;
  _CF = a2 >= v16;
  v18 = a2 - v16;
  if (v18 != 0 && _CF)
  {
    sub_239519A04((uint64_t)(a7 + 3), v18);
  }
  else if (!_CF)
  {
    v19 = (void **)(v11 + 24 * (int)v154);
    if (v12 != v19)
    {
      v20 = (void **)a7[4];
      do
      {
        v22 = (void **)*(v20 - 3);
        v20 -= 3;
        v21 = v22;
        if (v22)
        {
          v23 = (void **)*(v12 - 2);
          v24 = v21;
          if (v23 != v21)
          {
            do
            {
              v25 = v23 - 24;
              free(*(v23 - 19));
              v23 = v25;
            }
            while (v25 != v21);
            v24 = *v20;
          }
          *(v12 - 2) = v21;
          operator delete(v24);
        }
        v12 = v20;
      }
      while (v20 != v19);
    }
    a7[4] = v19;
    v8 = a7;
  }
  v26 = v13 + 6;
  v28 = v8[9];
  v27 = v8[10];
  v29 = 0xAAAAAAAAAAAAAAABLL * ((v27 - v28) >> 3);
  if (v154 <= v29)
  {
    if (v154 < v29)
    {
      v30 = v28 + 24 * (int)v154;
      if (v27 != v30)
      {
        v31 = v8[10];
        do
        {
          v33 = *(void **)(v31 - 24);
          v31 -= 24;
          v32 = v33;
          if (v33)
          {
            *(_QWORD *)(v27 - 16) = v32;
            operator delete(v32);
          }
          v27 = v31;
        }
        while (v31 != v30);
      }
      a7[10] = v30;
    }
  }
  else
  {
    sub_2394D951C((uint64_t)(v13 + 6), v154 - v29);
  }
  if (a2 >= 1)
  {
    v34 = 0;
    v35 = v14 - v15;
    do
    {
      v36 = (uint64_t)&(*v13)[3 * v34];
      v38 = (uint64_t *)(v36 + 8);
      v37 = *(_QWORD *)(v36 + 8);
      v39 = 0xAAAAAAAAAAAAAAABLL * ((v37 - *(_QWORD *)v36) >> 6);
      if (v35 <= v39)
      {
        if (v35 < v39)
        {
          v40 = *(_QWORD *)v36 + 192 * v35;
          if (v37 != v40)
          {
            do
            {
              v41 = v37 - 192;
              free(*(void **)(v37 - 152));
              v37 = v41;
            }
            while (v41 != v40);
          }
          *v38 = v40;
        }
      }
      else
      {
        sub_239519C24((void **)v36, v35 - v39);
      }
      v42 = (unint64_t *)(*v26 + 24 * v34);
      memptr = 0;
      v43 = (uint64_t)(v42[1] - *v42) >> 3;
      if (v35 > v43)
      {
        sub_23951A0B4(v42, v35 - v43, (uint64_t *)&memptr);
      }
      else if (v35 < v43)
      {
        v42[1] = *v42 + 8 * v35;
      }
      ++v34;
    }
    while (v34 != a2);
  }
  v44 = (unint64_t *)*a3;
  v158 = (unint64_t *)a3[1];
  v45 = a1;
  if (*a3 == (uint64_t *)v158)
    goto LABEL_89;
  v156 = a8;
  while (2)
  {
    v55 = (int8x8_t)a4[1];
    if (!*(_QWORD *)&v55)
      goto LABEL_133;
    v56 = *v44;
    v57 = (uint8x8_t)vcnt_s8(v55);
    v57.i16[0] = vaddlv_u8(v57);
    if (v57.u32[0] > 1uLL)
    {
      v58 = *v44;
      if (v56 >= *(_QWORD *)&v55)
        v58 = v56 % *(_QWORD *)&v55;
    }
    else
    {
      v58 = (*(_QWORD *)&v55 - 1) & v56;
    }
    v59 = *(_QWORD **)(*a4 + 8 * v58);
    if (!v59 || (v60 = (_QWORD *)*v59) == 0)
LABEL_133:
      sub_23941D898("unordered_map::at: key not found");
    if (v57.u32[0] < 2uLL)
    {
      v61 = *(_QWORD *)&v55 - 1;
      while (1)
      {
        v63 = v60[1];
        if (v56 == v63)
        {
          if (v60[2] == v56)
            goto LABEL_60;
        }
        else if ((v63 & v61) != v58)
        {
          goto LABEL_133;
        }
        v60 = (_QWORD *)*v60;
        if (!v60)
          goto LABEL_133;
      }
    }
    while (1)
    {
      v62 = v60[1];
      if (v56 == v62)
        break;
      if (v62 >= *(_QWORD *)&v55)
        v62 %= *(_QWORD *)&v55;
      if (v62 != v58)
        goto LABEL_133;
LABEL_50:
      v60 = (_QWORD *)*v60;
      if (!v60)
        goto LABEL_133;
    }
    if (v60[2] != v56)
      goto LABEL_50;
LABEL_60:
    v64 = sub_239470FCC(v45, v60[3]);
    v65 = (int8x8_t)a4[1];
    if (!*(_QWORD *)&v65)
      goto LABEL_133;
    v66 = (uint8x8_t)vcnt_s8(v65);
    v66.i16[0] = vaddlv_u8(v66);
    if (v66.u32[0] > 1uLL)
    {
      v67 = v56;
      if (v56 >= *(_QWORD *)&v65)
        v67 = v56 % *(_QWORD *)&v65;
    }
    else
    {
      v67 = (*(_QWORD *)&v65 - 1) & v56;
    }
    v68 = *(_QWORD **)(*a4 + 8 * v67);
    if (!v68)
      goto LABEL_133;
    v69 = (_QWORD *)*v68;
    if (!v69)
      goto LABEL_133;
    v70 = v64[25];
    if (v66.u32[0] < 2uLL)
    {
      v71 = *(_QWORD *)&v65 - 1;
      while (1)
      {
        v73 = v69[1];
        if (v56 == v73)
        {
          if (v69[2] == v56)
            goto LABEL_80;
        }
        else if ((v73 & v71) != v67)
        {
          goto LABEL_133;
        }
        v69 = (_QWORD *)*v69;
        if (!v69)
          goto LABEL_133;
      }
    }
    while (1)
    {
      v72 = v69[1];
      if (v56 == v72)
        break;
      if (v72 >= *(_QWORD *)&v65)
        v72 %= *(_QWORD *)&v65;
      if (v72 != v67)
        goto LABEL_133;
LABEL_70:
      v69 = (_QWORD *)*v69;
      if (!v69)
        goto LABEL_133;
    }
    if (v69[2] != v56)
      goto LABEL_70;
LABEL_80:
    v74 = sub_2394650AC(v45, v69[3]);
    v75 = v74;
    if (a8 == 1.0)
    {
      *(_QWORD *)(*(_QWORD *)*v26 + 8 * v56) = v70;
      v82 = **v13;
      v83 = v82 + 192 * v56;
      v84 = *((_OWORD *)v74 + 1);
      *(_OWORD *)v83 = *(_OWORD *)v74;
      *(_OWORD *)(v83 + 16) = v84;
      *(_BYTE *)(v83 + 32) = *((_BYTE *)v74 + 32);
      if ((uint64_t *)v83 != v74)
      {
        v85 = *((unsigned int *)v74 + 14);
        sub_23945215C(v83 + 40, v85);
        if ((_DWORD)v85)
          memcpy(*(void **)(v83 + 40), (const void *)v75[5], 8 * v85);
        *(_DWORD *)(v83 + 56) = *((_DWORD *)v75 + 14);
        v45 = a1;
      }
      v86 = (_OWORD *)(v82 + 192 * v56);
      v87 = *((_OWORD *)v75 + 4);
      v88 = *((_OWORD *)v75 + 5);
      v89 = *((_OWORD *)v75 + 7);
      v86[6] = *((_OWORD *)v75 + 6);
      v86[7] = v89;
      v86[4] = v87;
      v86[5] = v88;
      v90 = *((_OWORD *)v75 + 8);
      v91 = *((_OWORD *)v75 + 9);
      v92 = *((_OWORD *)v75 + 11);
      v86[10] = *((_OWORD *)v75 + 10);
      v86[11] = v92;
      v86[8] = v90;
      v86[9] = v91;
      if (++v44 != v158)
        continue;
    }
    else
    {
      v76 = (v70 & 1) + v70;
      v77 = (BYTE4(v70) & 1u) + HIDWORD(v70);
      LODWORD(v76) = vcvtas_u32_f32((float)v76 * a8);
      LODWORD(v77) = vcvtas_u32_f32((float)v77 * a8);
      *(_QWORD *)(*(_QWORD *)*v26 + 8 * v56) = v76 | (v77 << 32);
      v78 = **v13;
      v79 = v78 + 192 * v56;
      v80 = *((_OWORD *)v74 + 1);
      *(_OWORD *)v79 = *(_OWORD *)v74;
      *(_OWORD *)(v79 + 16) = v80;
      *(_BYTE *)(v79 + 32) = *((_BYTE *)v74 + 32);
      if ((uint64_t *)v79 != v74)
      {
        v81 = *((unsigned int *)v74 + 14);
        sub_23945215C(v79 + 40, v81);
        if ((_DWORD)v81)
          memcpy(*(void **)(v79 + 40), (const void *)v75[5], 8 * v81);
        *(_DWORD *)(v79 + 56) = *((_DWORD *)v75 + 14);
        v45 = a1;
      }
      v46 = (_OWORD *)(v78 + 192 * v56);
      v47 = *((_OWORD *)v75 + 4);
      v48 = *((_OWORD *)v75 + 5);
      v49 = *((_OWORD *)v75 + 7);
      v46[6] = *((_OWORD *)v75 + 6);
      v46[7] = v49;
      v46[4] = v47;
      v46[5] = v48;
      v50 = *((_OWORD *)v75 + 8);
      v51 = *((_OWORD *)v75 + 9);
      v52 = *((_OWORD *)v75 + 11);
      v46[10] = *((_OWORD *)v75 + 10);
      v46[11] = v52;
      v46[8] = v50;
      v46[9] = v51;
      v53 = **v13 + 192 * v56;
      v54 = vmulq_n_f64(*((float64x2_t *)v75 + 1), v156);
      *(float64x2_t *)v53 = vmulq_n_f64(*(float64x2_t *)v75, v156);
      *(float64x2_t *)(v53 + 16) = v54;
      if (++v44 != v158)
        continue;
    }
    break;
  }
LABEL_89:
  if (a2 >= 2 && *a3 != a3[1])
  {
    v93 = 1;
    __asm { FMOV            V0.2D, #0.5 }
    v159 = _Q0;
    do
    {
      v98 = *a3;
      v99 = a3[1];
      if (*a3 != v99)
      {
        v100 = v93 - 1;
        do
        {
          v108 = *v98;
          v109 = 8 * *v98;
          v110 = (_DWORD *)(*(_QWORD *)(*v26 + 24 * v100) + v109);
          v111 = *(_QWORD *)(*v26 + 24 * v93);
          v112 = (*v110 & 1u) + *v110;
          *(_DWORD *)(v111 + v109) = v112;
          v113 = (v110[1] & 1u) + v110[1];
          LODWORD(v112) = vcvtas_u32_f32((float)v112 * 0.5);
          LODWORD(v113) = vcvtas_u32_f32((float)v113 * 0.5);
          *(_QWORD *)(v111 + v109) = v112 | (v113 << 32);
          v114 = (*v13)[3 * v100];
          v108 *= 192;
          v115 = v114 + v108;
          v116 = (*v13)[3 * v93];
          v117 = v116 + v108;
          v118 = *(_OWORD *)(v114 + v108 + 16);
          *(_OWORD *)v117 = *(_OWORD *)(v114 + v108);
          *(_OWORD *)(v117 + 16) = v118;
          *(_BYTE *)(v117 + 32) = *(_BYTE *)(v114 + v108 + 32);
          if (v116 != v114)
          {
            v119 = (void **)(v117 + 40);
            v120 = *(unsigned int *)(v115 + 56);
            if ((_DWORD)v120)
            {
              v121 = 8 * v120;
              if (*(_QWORD *)(v117 + 48) < v120)
              {
                free(*(void **)(v117 + 40));
                v122 = (v121 + 31) & 0xFFFFFFFE0;
                *(_QWORD *)(v117 + 40) = 0;
                *(_QWORD *)(v117 + 48) = v122 >> 3;
                memptr = 0;
                malloc_type_posix_memalign(&memptr, 0x20uLL, v122, 0x100BBD03uLL);
                v123 = memptr;
                *(_QWORD *)(v117 + 40) = memptr;
                if (!v123)
                {
                  exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
                  v149 = std::bad_alloc::bad_alloc(exception);
                  __cxa_throw(v149, (struct type_info *)&unk_250ADB310, (void (*)(void *))MEMORY[0x24BEDB670]);
                }
              }
              memcpy(*v119, *(const void **)(v115 + 40), v121);
            }
            else
            {
              free(*v119);
              *v119 = 0;
              *(_QWORD *)(v117 + 48) = 0;
            }
            *(_DWORD *)(v117 + 56) = *(_DWORD *)(v115 + 56);
          }
          v101 = *(_OWORD *)(v115 + 64);
          v102 = *(_OWORD *)(v115 + 80);
          v103 = *(_OWORD *)(v115 + 112);
          *(_OWORD *)(v117 + 96) = *(_OWORD *)(v115 + 96);
          *(_OWORD *)(v117 + 112) = v103;
          *(_OWORD *)(v117 + 64) = v101;
          *(_OWORD *)(v117 + 80) = v102;
          v104 = *(_OWORD *)(v115 + 128);
          v105 = *(_OWORD *)(v115 + 144);
          v106 = *(_OWORD *)(v115 + 176);
          *(_OWORD *)(v117 + 160) = *(_OWORD *)(v115 + 160);
          *(_OWORD *)(v117 + 176) = v106;
          *(_OWORD *)(v117 + 128) = v104;
          *(_OWORD *)(v117 + 144) = v105;
          v107 = vmulq_f64(*(float64x2_t *)(v115 + 16), v159);
          *(float64x2_t *)v117 = vmulq_f64(*(float64x2_t *)v115, v159);
          *(float64x2_t *)(v117 + 16) = v107;
          ++v98;
        }
        while (v98 != v99);
      }
      ++v93;
    }
    while (v93 != a2);
  }
  v124 = a7;
  v125 = a7[15];
  v126 = (void **)a7[16];
  v127 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v126 - v125) >> 3);
  if (v154 > v127)
  {
    sub_23951A318((uint64_t)(a7 + 15), v154 - v127);
    goto LABEL_119;
  }
  v128 = a6;
  if (v154 < v127)
  {
    v129 = (void **)(v125 + 24 * (int)v154);
    if (v126 != v129)
    {
      v130 = (void **)a7[16];
      do
      {
        v133 = (char *)*(v130 - 3);
        v130 -= 3;
        v132 = v133;
        if (v133)
        {
          v134 = (char *)*(v126 - 2);
          v131 = v132;
          if (v134 != v132)
          {
            v135 = (char *)*(v126 - 2);
            do
            {
              v137 = (void *)*((_QWORD *)v135 - 3);
              v135 -= 24;
              v136 = v137;
              if (v137)
              {
                *((_QWORD *)v134 - 2) = v136;
                operator delete(v136);
              }
              v134 = v135;
            }
            while (v135 != v132);
            v131 = *v130;
          }
          *(v126 - 2) = v132;
          operator delete(v131);
        }
        v126 = v130;
      }
      while (v130 != v129);
    }
    v124 = a7;
    a7[16] = v129;
LABEL_119:
    v128 = a6;
  }
  v139 = v124[21];
  v138 = v124[22];
  v140 = 0xAAAAAAAAAAAAAAABLL * ((v138 - v139) >> 3);
  if (v154 <= v140)
  {
    if (v154 < v140)
    {
      v141 = v139 + 24 * (int)v154;
      if (v138 != v141)
      {
        v142 = v124[22];
        do
        {
          v144 = *(void **)(v142 - 24);
          v142 -= 24;
          v143 = v144;
          if (v144)
          {
            *(_QWORD *)(v138 - 16) = v143;
            operator delete(v143);
          }
          v138 = v142;
        }
        while (v142 != v141);
      }
      v124[22] = v141;
    }
  }
  else
  {
    sub_2394D951C((uint64_t)(a7 + 21), v154 - v140);
  }
  if (a2 >= 1)
  {
    v145 = 0;
    v146 = 0;
    do
    {
      sub_2395178E8(a5, v26, v146++, v128, (char **)(a7[15] + v145), (float **)(a7[21] + v145));
      v145 += 24;
    }
    while (24 * a2 != v145);
  }
  return 1;
}

uint64_t sub_2395178E8(uint64_t *a1, _QWORD *a2, int a3, unsigned int a4, char **a5, float **a6)
{
  char *v11;
  char *v12;
  char *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  unint64_t v23;
  uint64_t v24;
  _QWORD **v25;
  float v26;
  uint64_t *v27;
  unint64_t v28;
  float v29;
  float v30;
  _QWORD *v31;
  uint64_t v32;
  _QWORD **v33;
  _QWORD *v34;
  _QWORD *v35;
  _QWORD **v36;
  unsigned int v37;
  float v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD **v41;
  _QWORD *v42;
  _QWORD **v43;
  unsigned int v44;
  _QWORD *v45;
  _QWORD *v46;
  unsigned int *v47;
  char *v48;
  uint64_t v49;
  char *v50;
  int64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  char *v56;
  char *v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  char *v64;
  uint64_t v65;
  __int128 v66;
  int v67;
  _QWORD *v68;
  unsigned int v69;
  _QWORD *v70;
  _QWORD *v71;
  unsigned int v72;
  _QWORD *v73;
  _QWORD *v74;
  BOOL v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  _BYTE *v79;
  int v80;
  uint64_t v81;
  int v82;
  uint64_t *v83;
  uint64_t v84;
  uint64_t v85;
  unsigned int v86;
  _QWORD *v87;
  _QWORD *v88;
  _QWORD **v89;
  unsigned int v90;
  _QWORD *v91;
  _QWORD *v92;
  uint64_t v93;
  _QWORD *v94;
  uint64_t v95;
  _BYTE *v96;
  int v97;
  uint64_t v98;
  int v99;
  uint64_t *v100;
  uint64_t v101;
  uint64_t v102;
  _QWORD *v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  void *v107;
  int64_t v108;
  float **v109;
  char *v110;
  char *v111;
  char *v112;
  unint64_t v113;
  float *v114;
  uint64_t v115;
  float *v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  uint64_t v120;
  unint64_t v121;
  _BYTE *v122;
  float *v123;
  unint64_t v124;
  unint64_t v125;
  uint64_t v126;
  uint64_t v127;
  float *v128;
  _OWORD *v129;
  float *v130;
  uint64_t v131;
  __int128 v132;
  int v133;
  float **v135;
  char **v136;
  _QWORD *v137;
  uint64_t v138;
  int v140;
  _QWORD *v141;
  _QWORD *v142;
  uint64_t v143;
  void *__p;
  char *v145;
  char *v146;
  _QWORD *v147;
  uint64_t v148;
  unint64_t v149;

  v12 = *a5;
  v11 = a5[1];
  if (v11 != *a5)
  {
    v13 = a5[1];
    do
    {
      v15 = (void *)*((_QWORD *)v13 - 3);
      v13 -= 24;
      v14 = v15;
      if (v15)
      {
        *((_QWORD *)v11 - 2) = v14;
        operator delete(v14);
      }
      v11 = v13;
    }
    while (v13 != v12);
  }
  v135 = a6;
  v136 = a5;
  a5[1] = v12;
  a6[1] = *a6;
  v17 = *a1;
  v16 = a1[1];
  v148 = 0;
  v149 = 0;
  v147 = 0;
  v18 = v16 - v17;
  if (v16 != v17)
  {
    if (v18 < 0)
      sub_2394189F8();
    v19 = v18 >> 3;
    v20 = (unint64_t)((v18 >> 3) - 1) >> 6;
    v21 = operator new(8 * (v20 + 1));
    v22 = v21;
    v148 = v18 >> 3;
    v149 = v20 + 1;
    v147 = v21;
    if ((unint64_t)v18 >= 0x208)
      v23 = (unint64_t)((v18 >> 3) - 1) >> 6;
    else
      v23 = 0;
    v21[v23] = 0;
    if ((unint64_t)v18 >= 0x200)
      bzero(v21, 8 * (v19 >> 6));
    v24 = ((unint64_t)v18 >> 3) & 0x3F;
    if (v24)
      v22[v19 >> 6] &= ~(0xFFFFFFFFFFFFFFFFLL >> -(char)v24);
    v137 = a2;
    v138 = 0;
    v25 = &v142;
    v140 = a3;
    v26 = (float)a4;
    v27 = a1;
    while (1)
    {
      __p = 0;
      v145 = 0;
      v146 = 0;
      v142 = 0;
      v143 = 0;
      v141 = &v142;
      if (v16 != v17)
      {
        v28 = 0;
        v29 = 0.0;
        while (1)
        {
          while (1)
          {
            if ((v22[v28 >> 6] & (1 << v28)) == 0)
            {
              v31 = v142;
              v32 = *(unsigned int *)(v17 + 8 * v28);
              if (!v142)
                goto LABEL_31;
              v33 = &v142;
              v34 = v142;
              do
              {
                v35 = v34;
                v36 = v33;
                v37 = *((_DWORD *)v34 + 7);
                if (v37 >= v32)
                  v33 = (_QWORD **)v34;
                else
                  ++v34;
                v34 = (_QWORD *)*v34;
              }
              while (v34);
              if (v33 == &v142)
                goto LABEL_31;
              if (v37 < v32)
                v35 = v36;
              v38 = 0.0;
              if (v32 < *((_DWORD *)v35 + 7))
              {
LABEL_31:
                v39 = *(_QWORD *)(*a2 + 24 * v140);
                v38 = (float)((float)((float)*(unsigned int *)(v39 + 8 * v32)
                                    * (float)*(unsigned int *)(v39 + 8 * v32 + 4))
                            * 0.00000095367)
                    + 0.0;
              }
              v40 = *(unsigned int *)(v17 + 8 * v28 + 4);
              if (!v142)
                goto LABEL_42;
              v41 = &v142;
              do
              {
                v42 = v31;
                v43 = v41;
                v44 = *((_DWORD *)v31 + 7);
                v45 = v31 + 1;
                if (v44 >= v40)
                {
                  v45 = v42;
                  v41 = (_QWORD **)v42;
                }
                v31 = (_QWORD *)*v45;
              }
              while (v31);
              if (v41 == &v142
                || (v44 >= v40 ? (v46 = v42) : (v46 = v43), v40 < *((_DWORD *)v46 + 7)))
              {
LABEL_42:
                v47 = (unsigned int *)(*(_QWORD *)(*a2 + 24 * v140) + 8 * v40);
                v38 = v38 + (float)((float)((float)*v47 * (float)v47[1]) * 0.00000095367);
              }
              v30 = v29 + v38;
              if ((float)(v29 + v38) <= v26)
                break;
            }
            v30 = v29;
            if (++v28 >= (v16 - v17) >> 3)
              goto LABEL_147;
          }
          v48 = v145;
          if (v145 >= v146)
            break;
          *(_DWORD *)v145 = v28;
          v49 = (uint64_t)(v48 + 4);
LABEL_67:
          v145 = (char *)v49;
          v68 = v142;
          v69 = *(_DWORD *)(v17 + 8 * v28);
          v70 = &v142;
          a2 = v137;
          if (v142)
          {
            v71 = v142;
            do
            {
              while (1)
              {
                v25 = (_QWORD **)v71;
                v72 = *((_DWORD *)v71 + 7);
                if (v69 >= v72)
                  break;
                v71 = *v25;
                v70 = v25;
                if (!*v25)
                  goto LABEL_74;
              }
              if (v72 >= v69)
              {
                v86 = *(_DWORD *)(v17 + 8 * v28 + 4);
                goto LABEL_102;
              }
              v71 = v25[1];
            }
            while (v71);
            v70 = v25 + 1;
          }
LABEL_74:
          v73 = operator new(0x20uLL);
          *((_DWORD *)v73 + 7) = v69;
          *v73 = 0;
          v73[1] = 0;
          v73[2] = v25;
          *v70 = v73;
          if (*v141)
          {
            v141 = (_QWORD *)*v141;
            v73 = (_QWORD *)*v70;
          }
          v74 = v142;
          v75 = v73 == v142;
          *((_BYTE *)v73 + 24) = v73 == v142;
          v27 = a1;
          if (!v75)
          {
            do
            {
              v76 = v73[2];
              if (*(_BYTE *)(v76 + 24))
                break;
              v77 = *(_QWORD **)(v76 + 16);
              v78 = *v77;
              if (*v77 == v76)
              {
                v81 = v77[1];
                if (!v81 || (v82 = *(unsigned __int8 *)(v81 + 24), v79 = (_BYTE *)(v81 + 24), v82))
                {
                  if (*(_QWORD **)v76 == v73)
                  {
                    *(_BYTE *)(v76 + 24) = 1;
                    *((_BYTE *)v77 + 24) = 0;
                    v85 = *(_QWORD *)(v76 + 8);
                    *v77 = v85;
                    if (v85)
                      goto LABEL_91;
                  }
                  else
                  {
                    v83 = *(uint64_t **)(v76 + 8);
                    v84 = *v83;
                    *(_QWORD *)(v76 + 8) = *v83;
                    if (v84)
                    {
                      *(_QWORD *)(v84 + 16) = v76;
                      v77 = *(_QWORD **)(v76 + 16);
                    }
                    v83[2] = (uint64_t)v77;
                    *(_QWORD *)(*(_QWORD *)(v76 + 16) + 8 * (**(_QWORD **)(v76 + 16) != v76)) = v83;
                    *v83 = v76;
                    *(_QWORD *)(v76 + 16) = v83;
                    v77 = (_QWORD *)v83[2];
                    v76 = *v77;
                    *((_BYTE *)v83 + 24) = 1;
                    *((_BYTE *)v77 + 24) = 0;
                    v85 = *(_QWORD *)(v76 + 8);
                    *v77 = v85;
                    if (v85)
LABEL_91:
                      *(_QWORD *)(v85 + 16) = v77;
                  }
                  *(_QWORD *)(v76 + 16) = v77[2];
                  *(_QWORD *)(v77[2] + 8 * (*(_QWORD *)v77[2] != (_QWORD)v77)) = v76;
                  *(_QWORD *)(v76 + 8) = v77;
LABEL_98:
                  v77[2] = v76;
                  break;
                }
              }
              else if (!v78 || (v80 = *(unsigned __int8 *)(v78 + 24), v79 = (_BYTE *)(v78 + 24), v80))
              {
                if (*(_QWORD **)v76 == v73)
                {
                  v104 = v73[1];
                  *(_QWORD *)v76 = v104;
                  if (v104)
                  {
                    *(_QWORD *)(v104 + 16) = v76;
                    v77 = *(_QWORD **)(v76 + 16);
                  }
                  v73[2] = v77;
                  *(_QWORD *)(*(_QWORD *)(v76 + 16) + 8 * (**(_QWORD **)(v76 + 16) != v76)) = v73;
                  v73[1] = v76;
                  *(_QWORD *)(v76 + 16) = v73;
                  v77 = (_QWORD *)v73[2];
                  *((_BYTE *)v73 + 24) = 1;
                  *((_BYTE *)v77 + 24) = 0;
                  v76 = v77[1];
                  v87 = *(_QWORD **)v76;
                  v77[1] = *(_QWORD *)v76;
                  if (v87)
LABEL_96:
                    v87[2] = v77;
                }
                else
                {
                  *(_BYTE *)(v76 + 24) = 1;
                  *((_BYTE *)v77 + 24) = 0;
                  v76 = v77[1];
                  v87 = *(_QWORD **)v76;
                  v77[1] = *(_QWORD *)v76;
                  if (v87)
                    goto LABEL_96;
                }
                *(_QWORD *)(v76 + 16) = v77[2];
                *(_QWORD *)(v77[2] + 8 * (*(_QWORD *)v77[2] != (_QWORD)v77)) = v76;
                *(_QWORD *)v76 = v77;
                goto LABEL_98;
              }
              *(_BYTE *)(v76 + 24) = 1;
              v73 = v77;
              *((_BYTE *)v77 + 24) = v77 == v74;
              *v79 = 1;
            }
            while (v77 != v74);
          }
          v68 = v142;
          ++v143;
          v17 = *a1;
          v86 = *(_DWORD *)(*a1 + 8 * v28 + 4);
          v88 = &v142;
          v89 = &v142;
          if (v142)
          {
            while (1)
            {
LABEL_102:
              while (1)
              {
                v89 = (_QWORD **)v68;
                v90 = *((_DWORD *)v68 + 7);
                if (v86 >= v90)
                  break;
                v68 = *v89;
                v88 = v89;
                if (!*v89)
                  goto LABEL_106;
              }
              if (v90 >= v86)
                break;
              v68 = v89[1];
              if (!v68)
              {
                v88 = v89 + 1;
                goto LABEL_106;
              }
            }
            v25 = &v142;
          }
          else
          {
LABEL_106:
            v91 = operator new(0x20uLL);
            *((_DWORD *)v91 + 7) = v86;
            *v91 = 0;
            v91[1] = 0;
            v91[2] = v89;
            *v88 = v91;
            if (*v141)
            {
              v141 = (_QWORD *)*v141;
              v91 = (_QWORD *)*v88;
            }
            v92 = v142;
            v75 = v91 == v142;
            *((_BYTE *)v91 + 24) = v91 == v142;
            v27 = a1;
            v25 = &v142;
            if (!v75)
            {
              do
              {
                v93 = v91[2];
                if (*(_BYTE *)(v93 + 24))
                  break;
                v94 = *(_QWORD **)(v93 + 16);
                v95 = *v94;
                if (*v94 == v93)
                {
                  v98 = v94[1];
                  if (!v98 || (v99 = *(unsigned __int8 *)(v98 + 24), v96 = (_BYTE *)(v98 + 24), v99))
                  {
                    if (*(_QWORD **)v93 == v91)
                    {
                      *(_BYTE *)(v93 + 24) = 1;
                      *((_BYTE *)v94 + 24) = 0;
                      v102 = *(_QWORD *)(v93 + 8);
                      *v94 = v102;
                      if (v102)
                        goto LABEL_123;
                    }
                    else
                    {
                      v100 = *(uint64_t **)(v93 + 8);
                      v101 = *v100;
                      *(_QWORD *)(v93 + 8) = *v100;
                      if (v101)
                      {
                        *(_QWORD *)(v101 + 16) = v93;
                        v94 = *(_QWORD **)(v93 + 16);
                      }
                      v100[2] = (uint64_t)v94;
                      *(_QWORD *)(*(_QWORD *)(v93 + 16) + 8 * (**(_QWORD **)(v93 + 16) != v93)) = v100;
                      *v100 = v93;
                      *(_QWORD *)(v93 + 16) = v100;
                      v94 = (_QWORD *)v100[2];
                      v93 = *v94;
                      *((_BYTE *)v100 + 24) = 1;
                      *((_BYTE *)v94 + 24) = 0;
                      v102 = *(_QWORD *)(v93 + 8);
                      *v94 = v102;
                      if (v102)
LABEL_123:
                        *(_QWORD *)(v102 + 16) = v94;
                    }
                    *(_QWORD *)(v93 + 16) = v94[2];
                    *(_QWORD *)(v94[2] + 8 * (*(_QWORD *)v94[2] != (_QWORD)v94)) = v93;
                    *(_QWORD *)(v93 + 8) = v94;
LABEL_130:
                    v94[2] = v93;
                    break;
                  }
                }
                else if (!v95 || (v97 = *(unsigned __int8 *)(v95 + 24), v96 = (_BYTE *)(v95 + 24), v97))
                {
                  if (*(_QWORD **)v93 == v91)
                  {
                    v105 = v91[1];
                    *(_QWORD *)v93 = v105;
                    if (v105)
                    {
                      *(_QWORD *)(v105 + 16) = v93;
                      v94 = *(_QWORD **)(v93 + 16);
                    }
                    v91[2] = v94;
                    *(_QWORD *)(*(_QWORD *)(v93 + 16) + 8 * (**(_QWORD **)(v93 + 16) != v93)) = v91;
                    v91[1] = v93;
                    *(_QWORD *)(v93 + 16) = v91;
                    v94 = (_QWORD *)v91[2];
                    *((_BYTE *)v91 + 24) = 1;
                    *((_BYTE *)v94 + 24) = 0;
                    v93 = v94[1];
                    v103 = *(_QWORD **)v93;
                    v94[1] = *(_QWORD *)v93;
                    if (v103)
LABEL_128:
                      v103[2] = v94;
                  }
                  else
                  {
                    *(_BYTE *)(v93 + 24) = 1;
                    *((_BYTE *)v94 + 24) = 0;
                    v93 = v94[1];
                    v103 = *(_QWORD **)v93;
                    v94[1] = *(_QWORD *)v93;
                    if (v103)
                      goto LABEL_128;
                  }
                  *(_QWORD *)(v93 + 16) = v94[2];
                  *(_QWORD *)(v94[2] + 8 * (*(_QWORD *)v94[2] != (_QWORD)v94)) = v93;
                  *(_QWORD *)v93 = v94;
                  goto LABEL_130;
                }
                *(_BYTE *)(v93 + 24) = 1;
                v91 = v94;
                *((_BYTE *)v94 + 24) = v94 == v92;
                *v96 = 1;
              }
              while (v94 != v92);
            }
            ++v143;
            v17 = *a1;
          }
          v22 = v147;
          v147[v28 >> 6] |= 1 << v28;
          ++v138;
          v16 = v27[1];
          ++v28;
          v29 = v30;
          if (v28 >= (v16 - v17) >> 3)
            goto LABEL_147;
        }
        v50 = (char *)__p;
        v51 = v145 - (_BYTE *)__p;
        v52 = (v145 - (_BYTE *)__p) >> 2;
        v53 = v52 + 1;
        if ((unint64_t)(v52 + 1) >> 62)
          sub_2394189F8();
        v54 = v146 - (_BYTE *)__p;
        if ((v146 - (_BYTE *)__p) >> 1 > v53)
          v53 = v54 >> 1;
        if ((unint64_t)v54 >= 0x7FFFFFFFFFFFFFFCLL)
          v55 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v55 = v53;
        if (v55)
        {
          if (v55 >> 62)
            sub_239418A80();
          v56 = (char *)operator new(4 * v55);
          v57 = &v56[4 * v52];
          *(_DWORD *)v57 = v28;
          v49 = (uint64_t)(v57 + 4);
          if (v48 != v50)
          {
LABEL_55:
            v58 = v48 - 4 - v50;
            if (v58 < 0x2C)
            {
              v27 = a1;
              goto LABEL_63;
            }
            v59 = v48 - &v56[v51];
            v27 = a1;
            if (v59 < 0x20)
              goto LABEL_188;
            v60 = (v58 >> 2) + 1;
            v61 = 4 * (v60 & 0x7FFFFFFFFFFFFFF8);
            v62 = &v48[-v61];
            v57 -= v61;
            v63 = &v56[4 * v52 - 16];
            v64 = v48 - 16;
            v65 = v60 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v66 = *(_OWORD *)v64;
              *((_OWORD *)v63 - 1) = *((_OWORD *)v64 - 1);
              *(_OWORD *)v63 = v66;
              v63 -= 32;
              v64 -= 32;
              v65 -= 8;
            }
            while (v65);
            v48 = v62;
            if (v60 != (v60 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_188:
              do
              {
LABEL_63:
                v67 = *((_DWORD *)v48 - 1);
                v48 -= 4;
                *((_DWORD *)v57 - 1) = v67;
                v57 -= 4;
              }
              while (v48 != v50);
            }
LABEL_64:
            __p = v57;
            v145 = (char *)v49;
            v146 = &v56[4 * v55];
            if (v50)
            {
              operator delete(v50);
              v17 = *v27;
            }
            v25 = &v142;
            goto LABEL_67;
          }
        }
        else
        {
          v56 = 0;
          v57 = (char *)(4 * v52);
          *(_DWORD *)(4 * v52) = v28;
          v49 = 4 * v52 + 4;
          if (v48 != v50)
            goto LABEL_55;
        }
        v27 = a1;
        goto LABEL_64;
      }
      v30 = 0.0;
LABEL_147:
      v106 = v136[1];
      if (v106 >= v136[2])
      {
        v112 = sub_23951A940(v136, (uint64_t)&__p);
        v109 = v135;
      }
      else
      {
        *(_QWORD *)v106 = 0;
        *((_QWORD *)v106 + 1) = 0;
        *((_QWORD *)v106 + 2) = 0;
        v107 = __p;
        v108 = v145 - (_BYTE *)__p;
        v109 = v135;
        if (v145 != __p)
        {
          if (v108 < 0)
            sub_2394189F8();
          v110 = (char *)operator new(v145 - (_BYTE *)__p);
          *(_QWORD *)v106 = v110;
          *((_QWORD *)v106 + 1) = v110;
          v111 = &v110[4 * (v108 >> 2)];
          *((_QWORD *)v106 + 2) = v111;
          memcpy(v110, v107, v108);
          *((_QWORD *)v106 + 1) = v111;
        }
        v112 = v106 + 24;
        v136[1] = v106 + 24;
      }
      v136[1] = v112;
      v114 = v109[1];
      v113 = (unint64_t)v109[2];
      if ((unint64_t)v114 >= v113)
        break;
      *v114 = v30;
      v115 = (uint64_t)(v114 + 1);
      v27 = a1;
LABEL_175:
      v25 = &v142;
      v109[1] = (float *)v115;
      sub_239421038((uint64_t)&v141, v142);
      if (__p)
      {
        v145 = (char *)__p;
        operator delete(__p);
      }
      v17 = *v27;
      v16 = v27[1];
      if (v138 == (v16 - *v27) >> 3)
      {
        if (v22)
          operator delete(v22);
        return 1;
      }
    }
    v116 = *v109;
    v117 = (char *)v114 - (char *)*v109;
    v118 = v117 >> 2;
    v119 = (v117 >> 2) + 1;
    if (v119 >> 62)
      sub_2394189F8();
    v120 = v113 - (_QWORD)v116;
    if (v120 >> 1 > v119)
      v119 = v120 >> 1;
    if ((unint64_t)v120 >= 0x7FFFFFFFFFFFFFFCLL)
      v121 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v121 = v119;
    if (v121)
    {
      if (v121 >> 62)
        sub_239418A80();
      v122 = operator new(4 * v121);
      v123 = (float *)&v122[4 * v118];
      *v123 = v30;
      v115 = (uint64_t)(v123 + 1);
      if (v114 != v116)
      {
LABEL_164:
        v124 = (char *)(v114 - 1) - (char *)v116;
        if (v124 >= 0x2C)
        {
          v125 = (char *)v114 - &v122[v117];
          v27 = a1;
          if (v125 >= 0x20)
          {
            v126 = (v124 >> 2) + 1;
            v127 = 4 * (v126 & 0x7FFFFFFFFFFFFFF8);
            v128 = &v114[v127 / 0xFFFFFFFFFFFFFFFCLL];
            v123 = (float *)((char *)v123 - v127);
            v129 = &v122[4 * v118 - 16];
            v130 = v114 - 4;
            v131 = v126 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v132 = *(_OWORD *)v130;
              *(v129 - 1) = *((_OWORD *)v130 - 1);
              *v129 = v132;
              v129 -= 2;
              v130 -= 8;
              v131 -= 8;
            }
            while (v131);
            v114 = v128;
            if (v126 == (v126 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_173:
              *v109 = v123;
              v109[1] = (float *)v115;
              v109[2] = (float *)&v122[4 * v121];
              if (v116)
                operator delete(v116);
              goto LABEL_175;
            }
          }
        }
        else
        {
          v27 = a1;
        }
        do
        {
          v133 = *((_DWORD *)v114-- - 1);
          *((_DWORD *)v123-- - 1) = v133;
        }
        while (v114 != v116);
        goto LABEL_173;
      }
    }
    else
    {
      v122 = 0;
      v123 = (float *)(4 * v118);
      *(float *)(4 * v118) = v30;
      v115 = 4 * v118 + 4;
      if (v114 != v116)
        goto LABEL_164;
    }
    v27 = a1;
    goto LABEL_173;
  }
  return 1;
}

void sub_239518444(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, _QWORD *a18, uint64_t a19, void *__p,uint64_t a21,uint64_t a22,void *a23)
{
  uint64_t v23;
  void *v25;
  void *v26;

  v25 = *(void **)v23;
  if (*(_QWORD *)v23)
  {
    *(_QWORD *)(v23 + 8) = v25;
    operator delete(v25);
  }
  *(_QWORD *)(a10 + 8) = v23;
  sub_239421038((uint64_t)&a17, a18);
  if (__p)
  {
    a21 = (uint64_t)__p;
    operator delete(__p);
    v26 = a23;
    if (!a23)
LABEL_5:
      _Unwind_Resume(a1);
  }
  else
  {
    v26 = a23;
    if (!a23)
      goto LABEL_5;
  }
  operator delete(v26);
  _Unwind_Resume(a1);
}

uint64_t sub_2395184B8(int a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v2 = (uint64_t *)(a2[3] + 24 * a1);
  v3 = *a2;
  *a2 = *v2;
  *v2 = v3;
  v4 = a2[1];
  a2[1] = v2[1];
  v2[1] = v4;
  v5 = a2[2];
  a2[2] = v2[2];
  v2[2] = v5;
  v6 = (uint64_t *)(a2[9] + 24 * a1);
  v7 = a2[6];
  a2[6] = *v6;
  *v6 = v7;
  v8 = a2[7];
  a2[7] = v6[1];
  v6[1] = v8;
  v9 = a2[8];
  a2[8] = v6[2];
  v6[2] = v9;
  v10 = (uint64_t *)(a2[15] + 24 * a1);
  v11 = a2[12];
  a2[12] = *v10;
  *v10 = v11;
  v12 = a2[13];
  a2[13] = v10[1];
  v10[1] = v12;
  v13 = a2[14];
  a2[14] = v10[2];
  v10[2] = v13;
  v14 = (uint64_t *)(a2[21] + 24 * a1);
  v15 = a2[18];
  a2[18] = *v14;
  *v14 = v15;
  v16 = a2[19];
  a2[19] = v14[1];
  v14[1] = v16;
  v17 = a2[20];
  a2[20] = v14[2];
  v14[2] = v17;
  return 1;
}

uint64_t sub_2395185A4(_QWORD *a1, uint64_t *a2, _QWORD *a3, _QWORD *a4, unint64_t a5, uint64_t *a6, uint64_t *a7, uint64_t *a8, double a9, double a10, float64x2_t a11)
{
  uint64_t *v12;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  unint64_t v29;
  char v30;
  double v31;
  double v32;
  float v33;
  float v34;
  float *v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int *v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int *v52;
  char v53;
  unsigned int *v54;
  unint64_t v55;
  unint64_t v56;
  uint32x2_t v57;
  uint64x2_t v58;
  float64x2_t v59;
  float64x2_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  float64x2_t *v64;
  double v65;
  double v66;
  float64x2_t *v67;
  float64x2_t *v68;
  float32x2_t v69;
  double v70;
  float64x2_t v71;
  float64x2_t v72;
  uint64_t v73;
  float *v74;
  double v75;
  double v76;
  double v77;
  double v78;
  float64x2_t v79;
  float64x2_t v80;
  float64x2_t v81;
  float64x2_t v82;
  float64x2_t v83;
  int32x2_t v85;
  char *v86;
  float v87;
  unint64_t v88;
  float *v89;
  float *v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  unint64_t v95;
  _BYTE *v96;
  float *v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t v100;
  float *v101;
  float64x2_t *v102;
  float64x2_t *v103;
  uint64_t v104;
  float64x2_t v105;
  int v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  float v115;
  float v116;
  unsigned int *v117;
  unsigned int v118;
  float *v119;
  float v120;
  float v121;
  uint64_t v122;
  unint64_t v123;
  uint64_t v124;
  float v125;
  unsigned int v126;
  float *v127;
  uint64_t v128;
  unint64_t v129;
  uint64_t v130;
  float v131;
  float v132;
  uint64_t v133;
  uint64_t v134;
  _QWORD *v135;
  uint64_t v136;
  char *v137;
  char *v138;
  void *v139;
  char *v140;
  void *v141;
  void *v142;
  char v144;
  unint64_t v146;
  uint64_t *v147;
  _QWORD *v148;
  _QWORD *v149;
  uint64_t *v150;
  unint64_t v152;
  uint64_t v153;
  _QWORD *v154;
  float64x2_t *v155;
  unint64_t v156;
  unint64_t v157;
  char v158;
  float64x2_t v159;
  float64x2_t v160;
  float64x2_t v161;
  float64x2_t v162;
  int v163;
  void *__p;
  uint64_t v165;
  unint64_t v166;
  char *v167;
  char *v168;
  uint64_t v169;

  v146 = a5;
  v12 = a6;
  v16 = (a6[1] - *a6) >> 4;
  if (a5 <= v16)
  {
    if (a5 < v16)
      a6[1] = *a6 + 16 * a5;
  }
  else
  {
    sub_239441074(a6, a5 - v16);
    a5 = v146;
  }
  v17 = (a7[1] - *a7) >> 3;
  if (a5 > v17)
  {
    sub_23951A544(a7, a5 - v17);
    a5 = v146;
    goto LABEL_10;
  }
  if (a5 < v17)
    a7[1] = *a7 + 8 * a5;
  if (a5)
  {
LABEL_10:
    v18 = 0;
    v19 = 0;
    do
    {
      v20 = (_QWORD *)(*v12 + v18);
      v21 = *(_QWORD *)(*a1 + 8 * v19);
      *v20 = 0;
      v20[1] = v21;
      *(_QWORD *)(*a7 + 8 * v19++) = 0xFF8000007F800000;
      v18 += 16;
    }
    while (a5 != v19);
    v167 = 0;
    v168 = 0;
    v169 = 0;
    if (a5)
    {
      v22 = a5;
      sub_2394D951C((uint64_t)&v167, a5);
      __p = 0;
      v165 = 0;
      v166 = 0;
      a5 = v22;
      if ((v22 & 0x8000000000000000) != 0)
        sub_2394189F8();
    }
    else
    {
      __p = 0;
      v165 = 0;
      v166 = 0;
    }
    v23 = ((a5 - 1) >> 6) + 1;
    v24 = a5;
    __p = operator new(8 * v23);
    v165 = 0;
    v166 = v23;
    sub_23942D8C8(&__p, v24, 0);
    v144 = 0;
    v25 = a3[1];
    v26 = v25 - *a3;
    if (v25 != *a3)
      goto LABEL_17;
    goto LABEL_98;
  }
  v167 = 0;
  v168 = 0;
  v169 = 0;
  __p = 0;
  v165 = 0;
  v166 = 0;
  v144 = 1;
  v25 = a3[1];
  v26 = v25 - *a3;
  if (v25 != *a3)
  {
LABEL_17:
    v27 = 0;
    v28 = __p;
    v149 = a1;
    v150 = v12;
    v147 = a7;
    v148 = a3;
    v154 = a4;
    while (1)
    {
      v30 = 1;
      v152 = v27;
      do
      {
        v53 = v30;
        v54 = (unsigned int *)(*a3 + 8 * v27);
        if ((v53 & 1) == 0)
          ++v54;
        v55 = *v54;
        v56 = v55 >> 6;
        if (((1 << v55) & v28[v55 >> 6]) == 0)
        {
          v153 = 1 << v55;
          v57 = *(uint32x2_t *)(*a1 + 8 * v55);
          v58.i64[0] = v57.u32[0];
          v58.i64[1] = v57.u32[1];
          *(_QWORD *)&v59.f64[1] = v57.u32[1];
          v60 = vcvtq_f64_u64(v58);
          v62 = *a4;
          v61 = a4[1];
          if (v61 != *a4)
          {
            v63 = 0;
            v64 = (float64x2_t *)(*a2 + 192 * v55);
            v65 = -1.79769313e308;
            v66 = 1.79769313e308;
            v67 = v64 + 4;
            v68 = v64 + 10;
            v69 = vcvt_f32_u32(v57);
            *(float *)a11.f64 = 0.025 * v69.f32[0];
            v70 = (float)-(float)(v69.f32[0] * 0.025);
            v71 = vcvtq_f64_f32(vadd_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)&a11.f64[0], 0), v69));
            v72 = 0uLL;
            v159 = v71;
            v158 = v53;
            v156 = v55;
            v157 = v55 >> 6;
            v155 = v64;
            while (1)
            {
              v74 = (float *)(v62 + 12 * v63);
              v75 = *v74;
              v76 = v74[1];
              v77 = v74[2];
              v59.f64[0] = v67[1].f64[0] * v75 + v67[3].f64[0] * v76 + v67[5].f64[0] * v77;
              a11.f64[0] = v68[1].f64[0];
              v78 = a11.f64[0] + v59.f64[0];
              if (a11.f64[0] + v59.f64[0] > 0.001)
              {
                v79 = *v67;
                v80 = v67[2];
                v81 = v67[4];
                v82 = *v68;
                *(_QWORD *)&v81.f64[1] = vextq_s8((int8x16_t)v81, (int8x16_t)v81, 8uLL).u64[0];
                *(_QWORD *)&v80.f64[1] = vextq_s8((int8x16_t)v80, (int8x16_t)v80, 8uLL).u64[0];
                *(_QWORD *)&v79.f64[1] = vextq_s8((int8x16_t)v79, (int8x16_t)v79, 8uLL).u64[0];
                *(_QWORD *)&v82.f64[1] = vextq_s8((int8x16_t)v82, (int8x16_t)v82, 8uLL).u64[0];
                v83 = vdivq_f64(vaddq_f64(v82, vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v79, v75), v80, v76), v81, v77)), (float64x2_t)vdupq_lane_s64(*(_OWORD *)&vaddq_f64(a11, v59), 0));
                v59 = *v64;
                a11 = vmlaq_f64(v64[1], *v64, v83);
                if (a11.f64[0] > v70 && a11.f64[1] > v70)
                {
                  v85 = vmovn_s64(vcgtq_f64(v71, a11));
                  if ((v85.i8[0] & 1) != 0 && (v85.i8[4] & 1) != 0)
                    break;
                }
              }
LABEL_67:
              if (++v63 >= 0xAAAAAAAAAAAAAAABLL * ((v61 - v62) >> 2))
              {
                v31 = v72.f64[1];
                a1 = v149;
                v12 = v150;
                a7 = v147;
                a3 = v148;
                goto LABEL_21;
              }
            }
            v86 = &v167[24 * v55];
            v87 = v78;
            v89 = (float *)*((_QWORD *)v86 + 1);
            v88 = *((_QWORD *)v86 + 2);
            if ((unint64_t)v89 >= v88)
            {
              v90 = *(float **)v86;
              v91 = (uint64_t)v89 - *(_QWORD *)v86;
              v92 = v91 >> 2;
              v93 = (v91 >> 2) + 1;
              if (v93 >> 62)
                sub_2394189F8();
              v94 = v88 - (_QWORD)v90;
              if (v94 >> 1 > v93)
                v93 = v94 >> 1;
              if ((unint64_t)v94 >= 0x7FFFFFFFFFFFFFFCLL)
                v95 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v95 = v93;
              v161 = v72;
              v162 = v60;
              v160 = a11;
              if (v95)
              {
                if (v95 >> 62)
                  sub_239418A80();
                v96 = operator new(4 * v95);
                v72 = v161;
                v60 = v162;
                v71 = v159;
                a11 = v160;
                v97 = (float *)&v96[4 * v92];
                *v97 = v87;
                v73 = (uint64_t)(v97 + 1);
                if (v89 == v90)
                {
LABEL_93:
                  *(_QWORD *)v86 = v97;
                  *((_QWORD *)v86 + 1) = v73;
                  *((_QWORD *)v86 + 2) = &v96[4 * v95];
                  if (v90)
                  {
                    operator delete(v90);
                    v71 = v159;
                    a11 = v160;
                    v72 = v161;
                    v60 = v162;
                  }
                  a4 = v154;
                  v64 = v155;
                  v53 = v158;
                  v55 = v156;
                  v56 = v157;
                  goto LABEL_62;
                }
              }
              else
              {
                v96 = 0;
                v97 = (float *)(4 * v92);
                *(float *)(4 * v92) = v87;
                v73 = 4 * v92 + 4;
                if (v89 == v90)
                  goto LABEL_93;
              }
              v98 = (char *)(v89 - 1) - (char *)v90;
              if (v98 < 0x2C)
                goto LABEL_139;
              if ((unint64_t)((char *)v89 - &v96[v91]) < 0x20)
                goto LABEL_139;
              v99 = (v98 >> 2) + 1;
              v100 = 4 * (v99 & 0x7FFFFFFFFFFFFFF8);
              v101 = &v89[v100 / 0xFFFFFFFFFFFFFFFCLL];
              v97 = (float *)((char *)v97 - v100);
              v102 = (float64x2_t *)&v96[4 * v92 - 16];
              v103 = (float64x2_t *)(v89 - 4);
              v104 = v99 & 0x7FFFFFFFFFFFFFF8;
              do
              {
                v59 = v103[-1];
                v105 = *v103;
                v102[-1] = v59;
                *v102 = v105;
                v102 -= 2;
                v103 -= 2;
                v104 -= 8;
              }
              while (v104);
              v89 = v101;
              if (v99 != (v99 & 0x7FFFFFFFFFFFFFF8))
              {
LABEL_139:
                do
                {
                  v106 = *((_DWORD *)v89-- - 1);
                  *((_DWORD *)v97-- - 1) = v106;
                }
                while (v89 != v90);
              }
              goto LABEL_93;
            }
            *v89 = v87;
            v73 = (uint64_t)(v89 + 1);
LABEL_62:
            *((_QWORD *)v86 + 1) = v73;
            v72 = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(a11, v72), (int8x16_t)a11, (int8x16_t)v72);
            v60 = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v60, a11), (int8x16_t)a11, (int8x16_t)v60);
            if (v78 < v66)
              v66 = v78;
            if (v65 < v78)
              v65 = v78;
            v62 = *a4;
            v61 = a4[1];
            goto LABEL_67;
          }
          v31 = 0.0;
          v66 = 1.79769313e308;
          v65 = -1.79769313e308;
          v72.f64[0] = 0.0;
LABEL_21:
          if (v66 >= 0.0001)
            v32 = v66;
          else
            v32 = 0.0001;
          a11.f64[0] = 10000.0;
          if (v65 < v32)
            v32 = 0.0001;
          else
            a11.f64[0] = v65;
          v33 = v32;
          v34 = a11.f64[0];
          v35 = (float *)(*a7 + 8 * v55);
          *v35 = v33;
          v35[1] = v34;
          v36 = vcvtpd_s64_f64(v72.f64[0]);
          v37 = vcvtpd_s64_f64(v31);
          v38 = vcvtmd_s64_f64(v60.f64[0]);
          v39 = vcvtmd_s64_f64(v60.f64[1]);
          v40 = (int *)(*a1 + 8 * v55);
          v42 = *v40;
          v41 = v40[1];
          if (v42 < v36)
            v36 = v42;
          v43 = v36 & ~(v36 >> 31);
          if (v41 < v37)
            v37 = v41;
          v44 = v37 & ~(v37 >> 31);
          v45 = v38 & ~(v38 >> 31);
          if (v45 >= v42)
            v45 = v42;
          v46 = v39 & ~(v39 >> 31);
          if (v46 >= v41)
            v46 = v41;
          v47 = v45 - (v45 > 0);
          if (v43 >= v42)
            v48 = v43;
          else
            v48 = v43 + 1;
          if (v43 < v42)
            v47 = v45;
          if ((((_BYTE)v43 - (_BYTE)v45) & 1) != 0)
          {
            v43 = v48;
            v45 = v47;
          }
          v49 = v46 - (v46 > 0);
          if (v44 >= v41)
            v50 = v44;
          else
            v50 = v44 + 1;
          if (v44 < v41)
            v49 = v46;
          if ((((_BYTE)v44 - (_BYTE)v46) & 1) != 0)
          {
            v44 = v50;
            v46 = v49;
          }
          if (v45 > v43)
          {
            v43 = v42;
            v45 = 0;
          }
          if (v46 > v44)
          {
            v51 = 0;
          }
          else
          {
            v41 = v44;
            v51 = v46;
          }
          v52 = (int *)(*v12 + 16 * v55);
          *v52 = v45;
          v52[1] = v51;
          v52[2] = v43;
          v52[3] = v41;
          v28 = __p;
          *((_QWORD *)__p + v56) |= v153;
          v27 = v152;
        }
        v30 = 0;
      }
      while ((v53 & 1) != 0);
      ++v27;
      v25 = a3[1];
      v29 = (v25 - *a3) >> 3;
      if (v27 >= v29)
        goto LABEL_99;
    }
  }
LABEL_98:
  v29 = v26 >> 3;
LABEL_99:
  v163 = 1065353216;
  v107 = (a8[1] - *a8) >> 2;
  if (v29 <= v107)
  {
    if (v29 < v107)
      a8[1] = *a8 + 4 * v29;
  }
  else
  {
    sub_23951A6E0((uint64_t)a8, v29 - v107, (const float *)&v163);
    v25 = a3[1];
  }
  v108 = *a3;
  v109 = v25 - *a3;
  if (v25 != *a3)
  {
    v110 = 0;
    v111 = v109 >> 3;
    v112 = v167;
    v113 = *a2;
    v114 = *a8;
    if (v111 <= 1)
      v111 = 1;
    do
    {
      v117 = (unsigned int *)(v108 + 8 * v110);
      v118 = *v117;
      v119 = *(float **)&v112[24 * *v117];
      v120 = 0.0;
      v121 = 0.0;
      v122 = *(_QWORD *)&v112[24 * *v117 + 8] - (_QWORD)v119;
      if (v122)
      {
        v123 = v122 >> 2;
        if (v123 <= 1)
          v124 = 1;
        else
          v124 = v123;
        do
        {
          v125 = *v119++;
          v121 = v121 + v125;
          --v124;
        }
        while (v124);
        v121 = v121 / (float)v123;
      }
      v126 = v117[1];
      v127 = *(float **)&v112[24 * v126];
      v128 = *(_QWORD *)&v112[24 * v126 + 8] - (_QWORD)v127;
      if (v128)
      {
        v129 = v128 >> 2;
        if (v129 <= 1)
          v130 = 1;
        else
          v130 = v129;
        v131 = 0.0;
        do
        {
          v132 = *v127++;
          v131 = v131 + v132;
          --v130;
        }
        while (v130);
        v120 = v131 / (float)v129;
      }
      v115 = *(double *)(v113 + 192 * v118);
      v116 = *(double *)(v113 + 192 * v126);
      *(float *)(v114 + 4 * v110++) = (float)(v121 * v120) / (float)(v115 * v116);
    }
    while (v110 != v111);
  }
  if ((v144 & 1) == 0)
  {
    v133 = 0;
    v134 = 0;
    do
    {
      v135 = (_QWORD *)(*v12 + v133);
      v136 = *(_QWORD *)(*a1 + 8 * v134);
      *v135 = 0;
      v135[1] = v136;
      ++v134;
      v133 += 16;
    }
    while (v146 != v134);
  }
  if (__p)
    operator delete(__p);
  v137 = v167;
  if (v167)
  {
    v138 = v168;
    v139 = v167;
    if (v168 != v167)
    {
      v140 = v168;
      do
      {
        v142 = (void *)*((_QWORD *)v140 - 3);
        v140 -= 24;
        v141 = v142;
        if (v142)
        {
          *((_QWORD *)v138 - 2) = v141;
          operator delete(v141);
        }
        v138 = v140;
      }
      while (v140 != v137);
      v139 = v167;
    }
    v168 = v137;
    operator delete(v139);
  }
  return 1;
}

void sub_239518E28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *__p)
{
  uint64_t v34;
  char *v36;

  if (__p)
    operator delete(__p);
  v36 = *(char **)(v34 - 176);
  if (v36)
    sub_239EC0290((void **)(v34 - 168), v36, (void **)(v34 - 176));
  _Unwind_Resume(exception_object);
}

uint64_t sub_239518E70(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, int a5, uint64_t a6, _QWORD *a7, _QWORD *a8, float a9, int a10)
{
  unint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  _QWORD *v28;
  uint64_t v29;
  float v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  float v39;
  char v40;
  _QWORD v41[3];
  _QWORD *v42;
  unint64_t v43[44];
  _BYTE v44[24];
  _BYTE *v45;
  _BYTE v46[568];
  uint64_t v47;

  v47 = *MEMORY[0x24BDAC8D0];
  v18 = (a3[1] - *a3) >> 3;
  v19 = (_QWORD *)a8[1];
  v20 = ((uint64_t)v19 - *a8) >> 3;
  if (v18 <= v20)
  {
    if (v18 < v20)
    {
      v21 = *a8 + 8 * v18;
      while (v19 != (_QWORD *)v21)
      {
        v23 = *--v19;
        v22 = v23;
        *v19 = 0;
        if (v23)
        {
          sub_239416DA0(v22 + 8);
          v24 = nullsub_4(v22);
          MEMORY[0x23B83E31C](v24, 0x10F1C405026F4E9);
        }
      }
      a8[1] = v21;
    }
  }
  else
  {
    sub_23951AB4C(a8, v18 - v20);
  }
  v26 = *a3;
  v25 = a3[1];
  sub_2396FD800(a7, (uint64_t)v44);
  v43[0] = 0x42C8000000000000;
  sub_2396FCC68(v46, (v25 - v26) >> 3, v44, v43, 1.0);
  v27 = a10;
  v28 = v45;
  if (v45 == v44)
  {
    v29 = 4;
    v28 = v44;
  }
  else
  {
    if (!v45)
      goto LABEL_14;
    v29 = 5;
  }
  (*(void (**)(void))(*v28 + 8 * v29))();
LABEL_14:
  if (a10 <= 0)
    v27 = std::thread::hardware_concurrency();
  sub_2397A2A50((uint64_t)v43, v27, 0);
  v40 = 1;
  v30 = exp2(-(double)a5) * a9;
  v39 = v30;
  v32 = *a3;
  v31 = a3[1];
  v33 = operator new(0x58uLL);
  *v33 = &off_250ADD5C8;
  v33[1] = v46;
  v33[2] = a7;
  v33[3] = a3;
  v33[4] = a2;
  v33[5] = a1;
  v33[6] = a4;
  v33[7] = &v40;
  v33[8] = a8;
  v33[9] = &v39;
  v33[10] = a6;
  v42 = v33;
  sub_2397A376C(v43, (v31 - v32) >> 3, v41, 0);
  v34 = v42;
  if (v42 == v41)
  {
    v35 = 4;
    v34 = v41;
  }
  else
  {
    if (!v42)
      goto LABEL_21;
    v35 = 5;
  }
  (*(void (**)(void))(*v34 + 8 * v35))();
LABEL_21:
  sub_2397A2D24((uint64_t)v43);
  if (v40)
    v36 = sub_2396FD7B0((uint64_t)a7) ^ 1;
  else
    v36 = 0;
  sub_2397A2E14(v43);
  sub_2396FCD14((uint64_t)v46);
  return v36;
}

void sub_2395190F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a64;

  sub_2396FCD14((uint64_t)&a64);
  _Unwind_Resume(a1);
}

void sub_239519104(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a64;
  char *v64;
  char *v66;
  uint64_t v67;

  v66 = a15;
  if (a15 == v64)
  {
    v67 = 4;
    v66 = &a12;
  }
  else
  {
    if (!a15)
    {
      sub_2397A2E14(&a16);
      sub_2396FCD14((uint64_t)&a64);
      _Unwind_Resume(a1);
    }
    v67 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v66 + 8 * v67))();
  sub_2397A2E14(&a16);
  sub_2396FCD14((uint64_t)&a64);
  _Unwind_Resume(a1);
}

_QWORD *sub_2395191D0(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  void *v7;
  void *v8;

  v2 = (_QWORD *)*a1;
  if (*a1)
  {
    v3 = (_QWORD *)a1[1];
    v4 = (_QWORD *)*a1;
    if (v3 != v2)
    {
      do
      {
        v5 = (_QWORD *)*(v3 - 3);
        if (v5)
        {
          do
          {
            v6 = (_QWORD *)*v5;
            operator delete(v5);
            v5 = v6;
          }
          while (v6);
        }
        v8 = (void *)*(v3 - 5);
        v3 -= 5;
        v7 = v8;
        *v3 = 0;
        if (v8)
          operator delete(v7);
      }
      while (v3 != v2);
      v4 = (_QWORD *)*a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_239519254(uint64_t *a1, unsigned int **a2, int a3, unint64_t a4, uint64_t a5)
{
  unsigned int *v8;
  unsigned int *v9;
  uint64_t v10;
  float v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int *v15;
  float v16;
  double v17;
  float v18;
  uint64_t v19;
  unint64_t v20;
  signed int v21;
  long double v22;
  int v23;

  v8 = *a2;
  v9 = a2[1];
  if (*a2 == v9)
  {
    v17 = 1.17549435e-38;
  }
  else
  {
    v10 = *a1;
    v11 = 1.1755e-38;
    do
    {
      v12 = *v8;
      v13 = v8[1];
      v8 += 2;
      v14 = (unsigned int *)(v10 + 8 * v12);
      v15 = (unsigned int *)(v10 + 8 * v13);
      if (v11 < (float)((float)((float)*v14 * (float)v14[1]) * 0.00000095367))
        v11 = (float)((float)*v14 * (float)v14[1]) * 0.00000095367;
      v16 = (float)v15[1];
      if (v11 < (float)((float)((float)*v15 * v16) * 0.00000095367))
        v11 = (float)((float)*v15 * v16) * 0.00000095367;
    }
    while (v8 != v9);
    v17 = v11;
  }
  v18 = *(float *)(a5 + 92);
  v19 = sub_2396F5F50();
  v20 = *(_QWORD *)(a5 + 112);
  v21 = *(_DWORD *)(a5 + 88);
  if (v21 <= 0)
    v21 = std::thread::hardware_concurrency();
  v22 = exp2(-(double)a3);
  v23 = (int)((float)((float)((float)v20
                            - (float)((float)((float)((float)a4 * 0.00097656) * 0.00097656)
                                    + (float)((float)((float)(unint64_t)v19 * 0.00097656) * 0.00097656)))
                    + -100.0)
            / (v17 + v17 / (v22 * v18 * (v22 * v18)) * 4.0 + 100.0));
  if (v23 <= 1)
    v23 = 1;
  if (v23 >= v21)
    return v21;
  else
    return v23;
}

_QWORD *sub_2395193BC(uint64_t a1, unint64_t *a2, uint64_t a3, _QWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  _QWORD *v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v15;
  float v16;
  float v17;
  uint64_t v18;
  _QWORD *v19;
  _BOOL8 v20;
  unint64_t v21;
  unint64_t v22;
  size_t prime;
  unint64_t v24;
  uint8x8_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v7 >= v8)
        v4 = v7 % v8;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
    v10 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      v11 = (_QWORD *)*v10;
      if (*v10)
      {
        if (v9.u32[0] < 2uLL)
        {
          while (1)
          {
            v13 = v11[1];
            if (v13 == v7)
            {
              if (v11[2] == v7)
                return v11;
            }
            else if ((v13 & (v8 - 1)) != v4)
            {
              goto LABEL_23;
            }
            v11 = (_QWORD *)*v11;
            if (!v11)
              goto LABEL_23;
          }
        }
        do
        {
          v12 = v11[1];
          if (v12 == v7)
          {
            if (v11[2] == v7)
              return v11;
          }
          else
          {
            if (v12 >= v8)
              v12 %= v8;
            if (v12 != v4)
              break;
          }
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
    }
  }
LABEL_23:
  v15 = operator new(0x20uLL);
  *v15 = 0;
  v15[1] = v7;
  v15[2] = **a4;
  v15[3] = 0;
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (v8 && (float)(v17 * (float)v8) >= v16)
  {
    v18 = *(_QWORD *)a1;
    v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v19)
    {
LABEL_26:
      *v15 = *v19;
LABEL_61:
      *v19 = v15;
      goto LABEL_62;
    }
  }
  else
  {
    v20 = 1;
    if (v8 >= 3)
      v20 = (v8 & (v8 - 1)) != 0;
    v21 = v20 | (2 * v8);
    v22 = vcvtps_u32_f32(v16 / v17);
    if (v21 <= v22)
      prime = v22;
    else
      prime = v21;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v8 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v8)
      goto LABEL_37;
    if (prime < v8)
    {
      v24 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v8 < 3 || (v25 = (uint8x8_t)vcnt_s8((int8x8_t)v8), v25.i16[0] = vaddlv_u8(v25), v25.u32[0] > 1uLL))
      {
        v24 = std::__next_prime(v24);
      }
      else
      {
        v26 = 1 << -(char)__clz(v24 - 1);
        if (v24 >= 2)
          v24 = v26;
      }
      if (prime <= v24)
        prime = v24;
      if (prime < v8)
LABEL_37:
        sub_239427FE0(a1, prime);
    }
    v8 = *(_QWORD *)(a1 + 8);
    v27 = v8 - 1;
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
      {
        v4 = v7 % v8;
        v18 = *(_QWORD *)a1;
        v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v7 % v8));
        if (v19)
          goto LABEL_26;
      }
      else
      {
        v4 = v7;
        v18 = *(_QWORD *)a1;
        v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v7);
        if (v19)
          goto LABEL_26;
      }
    }
    else
    {
      v4 = v27 & v7;
      v18 = *(_QWORD *)a1;
      v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v27 & v7));
      if (v19)
        goto LABEL_26;
    }
  }
  *v15 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v15;
  *(_QWORD *)(v18 + 8 * v4) = a1 + 16;
  if (*v15)
  {
    v28 = *(_QWORD *)(*v15 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v28 >= v8)
        v28 %= v8;
    }
    else
    {
      v28 &= v8 - 1;
    }
    v19 = (_QWORD *)(*(_QWORD *)a1 + 8 * v28);
    goto LABEL_61;
  }
LABEL_62:
  ++*(_QWORD *)(a1 + 24);
  return v15;
}

void sub_2395196CC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_2395196E0(uint64_t a1, unint64_t *a2, uint64_t a3, _QWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  _QWORD *v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v15;
  float v16;
  float v17;
  uint64_t v18;
  _QWORD *v19;
  _BOOL8 v20;
  unint64_t v21;
  unint64_t v22;
  size_t prime;
  unint64_t v24;
  uint8x8_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v7 >= v8)
        v4 = v7 % v8;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
    v10 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      v11 = (_QWORD *)*v10;
      if (*v10)
      {
        if (v9.u32[0] < 2uLL)
        {
          while (1)
          {
            v13 = v11[1];
            if (v13 == v7)
            {
              if (v11[2] == v7)
                return v11;
            }
            else if ((v13 & (v8 - 1)) != v4)
            {
              goto LABEL_23;
            }
            v11 = (_QWORD *)*v11;
            if (!v11)
              goto LABEL_23;
          }
        }
        do
        {
          v12 = v11[1];
          if (v12 == v7)
          {
            if (v11[2] == v7)
              return v11;
          }
          else
          {
            if (v12 >= v8)
              v12 %= v8;
            if (v12 != v4)
              break;
          }
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
    }
  }
LABEL_23:
  v15 = operator new(0x20uLL);
  *v15 = 0;
  v15[1] = v7;
  v15[2] = **a4;
  v15[3] = 0;
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (v8 && (float)(v17 * (float)v8) >= v16)
  {
    v18 = *(_QWORD *)a1;
    v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v19)
    {
LABEL_26:
      *v15 = *v19;
LABEL_61:
      *v19 = v15;
      goto LABEL_62;
    }
  }
  else
  {
    v20 = 1;
    if (v8 >= 3)
      v20 = (v8 & (v8 - 1)) != 0;
    v21 = v20 | (2 * v8);
    v22 = vcvtps_u32_f32(v16 / v17);
    if (v21 <= v22)
      prime = v22;
    else
      prime = v21;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v8 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v8)
      goto LABEL_37;
    if (prime < v8)
    {
      v24 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v8 < 3 || (v25 = (uint8x8_t)vcnt_s8((int8x8_t)v8), v25.i16[0] = vaddlv_u8(v25), v25.u32[0] > 1uLL))
      {
        v24 = std::__next_prime(v24);
      }
      else
      {
        v26 = 1 << -(char)__clz(v24 - 1);
        if (v24 >= 2)
          v24 = v26;
      }
      if (prime <= v24)
        prime = v24;
      if (prime < v8)
LABEL_37:
        sub_239427FE0(a1, prime);
    }
    v8 = *(_QWORD *)(a1 + 8);
    v27 = v8 - 1;
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
      {
        v4 = v7 % v8;
        v18 = *(_QWORD *)a1;
        v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v7 % v8));
        if (v19)
          goto LABEL_26;
      }
      else
      {
        v4 = v7;
        v18 = *(_QWORD *)a1;
        v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v7);
        if (v19)
          goto LABEL_26;
      }
    }
    else
    {
      v4 = v27 & v7;
      v18 = *(_QWORD *)a1;
      v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v27 & v7));
      if (v19)
        goto LABEL_26;
    }
  }
  *v15 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v15;
  *(_QWORD *)(v18 + 8 * v4) = a1 + 16;
  if (*v15)
  {
    v28 = *(_QWORD *)(*v15 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v28 >= v8)
        v28 %= v8;
    }
    else
    {
      v28 &= v8 - 1;
    }
    v19 = (_QWORD *)(*(_QWORD *)a1 + 8 * v28);
    goto LABEL_61;
  }
LABEL_62:
  ++*(_QWORD *)(a1 + 24);
  return v15;
}

void sub_2395199F0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_239519A04(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  void **v5;
  void **v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  size_t v15;
  char *v16;
  char *v17;
  __int128 v18;
  void **v19;
  void **v20;
  void **v21;
  void **v22;
  void **v23;
  void *v24;
  void **v25;

  v5 = *(void ***)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - (uint64_t)v5) >> 3) >= a2)
  {
    if (a2)
    {
      v12 = 24 * ((24 * a2 - 24) / 0x18) + 24;
      bzero(*(void **)(a1 + 8), v12);
      v5 = (void **)((char *)v5 + v12);
    }
    *(_QWORD *)(a1 + 8) = v5;
  }
  else
  {
    v6 = *(void ***)a1;
    v7 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v5 - *(_QWORD *)a1) >> 3);
    v8 = v7 + a2;
    if (v7 + a2 > 0xAAAAAAAAAAAAAAALL)
      sub_2394189F8();
    v9 = 0xAAAAAAAAAAAAAAABLL * ((v4 - (uint64_t)v6) >> 3);
    if (2 * v9 > v8)
      v8 = 2 * v9;
    if (v9 >= 0x555555555555555)
      v10 = 0xAAAAAAAAAAAAAAALL;
    else
      v10 = v8;
    if (v10)
    {
      if (v10 > 0xAAAAAAAAAAAAAAALL)
        sub_239418A80();
      v11 = (char *)operator new(24 * v10);
    }
    else
    {
      v11 = 0;
    }
    v13 = &v11[24 * v7];
    v14 = &v11[24 * v10];
    v15 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v13, v15);
    v16 = &v13[v15];
    if (v5 == v6)
    {
      *(_QWORD *)a1 = v13;
      *(_QWORD *)(a1 + 8) = v16;
      *(_QWORD *)(a1 + 16) = v14;
      if (v5)
LABEL_27:
        operator delete(v5);
    }
    else
    {
      do
      {
        v17 = v13;
        *((_QWORD *)v13 - 2) = 0;
        *((_QWORD *)v13 - 1) = 0;
        v18 = *(_OWORD *)(v5 - 3);
        v5 -= 3;
        *(_OWORD *)(v13 - 24) = v18;
        v13 -= 24;
        *((_QWORD *)v17 - 1) = v5[2];
        *v5 = 0;
        v5[1] = 0;
        v5[2] = 0;
      }
      while (v5 != v6);
      v19 = *(void ***)a1;
      v5 = *(void ***)(a1 + 8);
      *(_QWORD *)a1 = v13;
      *(_QWORD *)(a1 + 8) = v16;
      *(_QWORD *)(a1 + 16) = v14;
      if (v5 != v19)
      {
        v20 = v5;
        do
        {
          v22 = (void **)*(v20 - 3);
          v20 -= 3;
          v21 = v22;
          if (v22)
          {
            v23 = (void **)*(v5 - 2);
            v24 = v21;
            if (v23 != v21)
            {
              do
              {
                v25 = v23 - 24;
                free(*(v23 - 19));
                v23 = v25;
              }
              while (v25 != v21);
              v24 = *v20;
            }
            *(v5 - 2) = v21;
            operator delete(v24);
          }
          v5 = v20;
        }
        while (v20 != v19);
        v5 = v19;
      }
      if (v5)
        goto LABEL_27;
    }
  }
}

void sub_239519C24(void **a1, unint64_t a2)
{
  _BYTE *v4;
  _BYTE *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v20;
  _QWORD *v21;
  char *v22;
  char *v23;
  char *v24;
  uint64_t v25;
  char *v26;
  char *v27;
  __int128 v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  char *v36;
  char *v37;
  void **v38;
  std::bad_alloc *exception;
  std::bad_alloc *v40;
  __int128 v41;
  char *v42;
  void *memptr;

  v4 = a1[2];
  v5 = a1[1];
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - v5) >> 6) >= a2)
  {
    sub_239519F20((uint64_t)a1, a2);
  }
  else
  {
    v6 = 0xAAAAAAAAAAAAAAABLL * ((v5 - (_BYTE *)*a1) >> 6);
    v7 = v6 + a2;
    if (v6 + a2 > 0x155555555555555)
      sub_2394189F8();
    v8 = 0xAAAAAAAAAAAAAAABLL * ((v4 - (_BYTE *)*a1) >> 6);
    if (2 * v8 > v7)
      v7 = 2 * v8;
    if (v8 >= 0xAAAAAAAAAAAAAALL)
      v9 = 0x155555555555555;
    else
      v9 = v7;
    if (v9)
    {
      if (v9 > 0x155555555555555)
        sub_239418A80();
      v10 = (char *)operator new(192 * v9);
    }
    else
    {
      v10 = 0;
    }
    v11 = 0;
    v12 = &v10[192 * v6];
    v42 = &v10[192 * v9];
    v13 = 192 * a2;
    v14 = &v12[192 * a2];
    __asm { FMOV            V0.2D, #-1.0 }
    v41 = _Q0;
    do
    {
      v20 = &v12[v11];
      *(_OWORD *)v20 = v41;
      *((_OWORD *)v20 + 1) = v41;
      v20[32] = 1;
      *((_QWORD *)v20 + 5) = 0;
      *((_QWORD *)v20 + 6) = 8;
      memptr = 0;
      malloc_type_posix_memalign(&memptr, 0x20uLL, 0x40uLL, 0x100BBD03uLL);
      v21 = memptr;
      *((_QWORD *)v20 + 5) = memptr;
      if (!v21)
      {
        exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
        v40 = std::bad_alloc::bad_alloc(exception);
        __cxa_throw(v40, (struct type_info *)&unk_250ADB310, (void (*)(void *))MEMORY[0x24BEDB670]);
      }
      v22 = &v12[v11];
      *((_DWORD *)v22 + 14) = 5;
      v21[4] = 0;
      *(_OWORD *)v21 = 0u;
      *((_OWORD *)v21 + 1) = 0u;
      *((_OWORD *)v22 + 8) = xmmword_239EC6EF0;
      *((_OWORD *)v22 + 9) = unk_239EC6F00;
      *((_OWORD *)v22 + 10) = xmmword_239EC6F10;
      *((_OWORD *)v22 + 11) = unk_239EC6F20;
      *((_OWORD *)v22 + 4) = xmmword_239EC6EB0;
      *((_OWORD *)v22 + 5) = unk_239EC6EC0;
      v11 += 192;
      *((_OWORD *)v22 + 6) = xmmword_239EC6ED0;
      *((_OWORD *)v22 + 7) = unk_239EC6EE0;
    }
    while (v13 != v11);
    v24 = (char *)*a1;
    v23 = (char *)a1[1];
    if (v23 == *a1)
    {
      v36 = (char *)a1[1];
      v37 = v42;
    }
    else
    {
      v25 = 0;
      do
      {
        v26 = &v23[v25];
        v27 = &v12[v25];
        v28 = *(_OWORD *)&v23[v25 - 176];
        *((_OWORD *)v27 - 12) = *(_OWORD *)&v23[v25 - 192];
        *((_OWORD *)v27 - 11) = v28;
        *(v27 - 160) = v23[v25 - 160];
        *((_QWORD *)v27 - 19) = 0;
        *((_QWORD *)v27 - 18) = 0;
        *((_QWORD *)v27 - 19) = *(_QWORD *)&v23[v25 - 152];
        v29 = *(_QWORD *)&v23[v25 - 144];
        *((_QWORD *)v26 - 19) = 0;
        *((_QWORD *)v27 - 18) = v29;
        *((_QWORD *)v26 - 18) = 0;
        *((_DWORD *)v27 - 34) = *(_DWORD *)&v23[v25 - 136];
        *((_DWORD *)v26 - 34) = 0;
        v30 = *(_OWORD *)&v23[v25 - 128];
        v31 = *(_OWORD *)&v23[v25 - 112];
        v32 = *(_OWORD *)&v23[v25 - 80];
        *((_OWORD *)v27 - 6) = *(_OWORD *)&v23[v25 - 96];
        *((_OWORD *)v27 - 5) = v32;
        *((_OWORD *)v27 - 8) = v30;
        *((_OWORD *)v27 - 7) = v31;
        v33 = *(_OWORD *)&v23[v25 - 64];
        v34 = *(_OWORD *)&v23[v25 - 48];
        v35 = *(_OWORD *)&v23[v25 - 16];
        *((_OWORD *)v27 - 2) = *(_OWORD *)&v23[v25 - 32];
        *((_OWORD *)v27 - 1) = v35;
        *((_OWORD *)v27 - 4) = v33;
        *((_OWORD *)v27 - 3) = v34;
        v25 -= 192;
      }
      while (&v23[v25] != v24);
      v36 = (char *)*a1;
      v23 = (char *)a1[1];
      v12 += v25;
      v37 = v42;
    }
    *a1 = v12;
    a1[1] = v14;
    a1[2] = v37;
    if (v23 != v36)
    {
      v38 = (void **)(v23 - 192);
      do
      {
        free(v38[5]);
        _ZF = v38 == (void **)v36;
        v38 -= 24;
      }
      while (!_ZF);
      v23 = v36;
    }
    if (v23)
      operator delete(v23);
  }
}

void sub_239519F00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15)
{
  uint64_t v15;
  uint64_t v16;

  a15 = v15 + v16;
  sub_23951A060((uint64_t)&a13);
  _Unwind_Resume(a1);
}

uint64_t sub_239519F20(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  std::bad_alloc *exception;
  std::bad_alloc *v16;
  __int128 v17;
  void *memptr;

  v2 = result;
  v3 = *(_QWORD *)(result + 8);
  if (a2)
  {
    v4 = 0;
    v5 = v3 + 192 * a2;
    v6 = 192 * a2;
    __asm { FMOV            V0.2D, #-1.0 }
    v17 = _Q0;
    do
    {
      v12 = v3 + v4;
      *(_OWORD *)v12 = v17;
      *(_OWORD *)(v12 + 16) = v17;
      *(_BYTE *)(v12 + 32) = 1;
      *(_QWORD *)(v12 + 40) = 0;
      *(_QWORD *)(v12 + 48) = 8;
      memptr = 0;
      result = malloc_type_posix_memalign(&memptr, 0x20uLL, 0x40uLL, 0x100BBD03uLL);
      v13 = memptr;
      *(_QWORD *)(v12 + 40) = memptr;
      if (!v13)
      {
        exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
        v16 = std::bad_alloc::bad_alloc(exception);
        __cxa_throw(v16, (struct type_info *)&unk_250ADB310, (void (*)(void *))MEMORY[0x24BEDB670]);
      }
      v14 = v3 + v4;
      *(_DWORD *)(v14 + 56) = 5;
      v13[4] = 0;
      *(_OWORD *)v13 = 0u;
      *((_OWORD *)v13 + 1) = 0u;
      *(_OWORD *)(v14 + 128) = xmmword_239EC6EF0;
      *(_OWORD *)(v14 + 144) = unk_239EC6F00;
      *(_OWORD *)(v14 + 160) = xmmword_239EC6F10;
      *(_OWORD *)(v14 + 176) = unk_239EC6F20;
      *(_OWORD *)(v14 + 64) = xmmword_239EC6EB0;
      *(_OWORD *)(v14 + 80) = unk_239EC6EC0;
      v4 += 192;
      *(_OWORD *)(v14 + 96) = xmmword_239EC6ED0;
      *(_OWORD *)(v14 + 112) = unk_239EC6EE0;
    }
    while (v6 != v4);
  }
  else
  {
    v5 = *(_QWORD *)(result + 8);
  }
  *(_QWORD *)(v2 + 8) = v5;
  return result;
}

void sub_23951A048(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(v1 + 8) = v2 + v3;
  _Unwind_Resume(a1);
}

void sub_23951A054(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(v1 + 8) = v2 + v3;
  _Unwind_Resume(a1);
}

uint64_t sub_23951A060(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 192;
    free(*(void **)(i - 152));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_23951A0B4(unint64_t *a1, unint64_t a2, uint64_t *a3)
{
  unint64_t v6;
  unint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  unint64_t v16;
  unint64_t v17;
  int64x2_t v18;
  int64x2_t *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t *v22;
  unint64_t v23;
  uint64_t *v24;
  unint64_t v25;
  int64x2_t v26;
  int64x2_t *v27;
  uint64_t v28;
  uint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  __int128 *v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;

  v7 = a1[1];
  v6 = a1[2];
  v8 = (uint64_t *)v7;
  if (a2 <= (uint64_t)(v6 - v7) >> 3)
  {
    if (a2)
    {
      v16 = (a2 - 1) & 0x1FFFFFFFFFFFFFFFLL;
      if (v16 < 0xF || v7 < (unint64_t)(a3 + 1) && v7 + 8 * a2 > (unint64_t)a3)
        goto LABEL_44;
      v17 = v16 + 1;
      v8 = (uint64_t *)(v7 + 8 * (v17 & 0x3FFFFFFFFFFFFFFCLL));
      v18 = vdupq_lane_s64(*a3, 0);
      v19 = (int64x2_t *)(v7 + 16);
      v20 = v17 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v19[-1] = v18;
        *v19 = v18;
        v19 += 2;
        v20 -= 4;
      }
      while (v20);
      if (v17 != (v17 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_44:
        do
          *v8++ = *a3;
        while (v8 != (uint64_t *)(v7 + 8 * a2));
      }
      v8 = (uint64_t *)(v7 + 8 * a2);
    }
    a1[1] = (unint64_t)v8;
  }
  else
  {
    v9 = v7 - *a1;
    v10 = v9 >> 3;
    v11 = (v9 >> 3) + a2;
    if (v11 >> 61)
      sub_2394189F8();
    v12 = v6 - *a1;
    v13 = v12 >> 2;
    if (v12 >> 2 <= v11)
      v13 = (v9 >> 3) + a2;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
      v14 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v14 = v13;
    if (v14)
    {
      if (v14 >> 61)
        sub_239418A80();
      v15 = (char *)operator new(8 * v14);
    }
    else
    {
      v15 = 0;
    }
    v21 = (unint64_t)&v15[8 * v10];
    v22 = (uint64_t *)(v21 + 8 * a2);
    v23 = (a2 - 1) & 0x1FFFFFFFFFFFFFFFLL;
    v24 = (uint64_t *)v21;
    if (v23 < 0x13)
      goto LABEL_45;
    if (v21 < (unint64_t)(a3 + 1))
    {
      v24 = (uint64_t *)&v15[8 * v10];
      if (&v15[8 * a2 + v9] > (char *)a3)
        goto LABEL_45;
    }
    v25 = v23 + 1;
    v24 = (uint64_t *)(v21 + 8 * (v25 & 0x3FFFFFFFFFFFFFFCLL));
    v26 = vdupq_lane_s64(*a3, 0);
    v27 = (int64x2_t *)&v15[8 * v10 + 16];
    v28 = v25 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v27[-1] = v26;
      *v27 = v26;
      v27 += 2;
      v28 -= 4;
    }
    while (v28);
    if (v25 != (v25 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_45:
      do
        *v24++ = *a3;
      while (v24 != v22);
    }
    v29 = (uint64_t *)*a1;
    if (v7 != *a1)
    {
      v30 = v7 - *a1 - 8;
      if (v30 < 0x58)
        goto LABEL_46;
      if (v7 - (unint64_t)&v15[v9] < 0x20)
        goto LABEL_46;
      v31 = (v30 >> 3) + 1;
      v32 = 8 * (v31 & 0x3FFFFFFFFFFFFFFCLL);
      v8 = (uint64_t *)(v7 - v32);
      v21 -= v32;
      v33 = &v15[8 * v10 - 16];
      v34 = (__int128 *)(v7 - 16);
      v35 = v31 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v36 = *v34;
        *((_OWORD *)v33 - 1) = *(v34 - 1);
        *(_OWORD *)v33 = v36;
        v33 -= 32;
        v34 -= 2;
        v35 -= 4;
      }
      while (v35);
      if (v31 != (v31 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_46:
        do
        {
          v37 = *--v8;
          *(_QWORD *)(v21 - 8) = v37;
          v21 -= 8;
        }
        while (v8 != v29);
      }
      v8 = (uint64_t *)*a1;
    }
    *a1 = v21;
    a1[1] = (unint64_t)v22;
    a1[2] = (unint64_t)&v15[8 * v14];
    if (v8)
      operator delete(v8);
  }
}

void sub_23951A318(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  void **v5;
  void **v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  size_t v15;
  char *v16;
  char *v17;
  __int128 v18;
  void **v19;
  void **v20;
  void *v21;
  char *v22;
  char *v23;
  char *v24;
  char *v25;
  void *v26;
  void *v27;

  v5 = *(void ***)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - (uint64_t)v5) >> 3) >= a2)
  {
    if (a2)
    {
      v12 = 24 * ((24 * a2 - 24) / 0x18) + 24;
      bzero(*(void **)(a1 + 8), v12);
      v5 = (void **)((char *)v5 + v12);
    }
    *(_QWORD *)(a1 + 8) = v5;
  }
  else
  {
    v6 = *(void ***)a1;
    v7 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v5 - *(_QWORD *)a1) >> 3);
    v8 = v7 + a2;
    if (v7 + a2 > 0xAAAAAAAAAAAAAAALL)
      sub_2394189F8();
    v9 = 0xAAAAAAAAAAAAAAABLL * ((v4 - (uint64_t)v6) >> 3);
    if (2 * v9 > v8)
      v8 = 2 * v9;
    if (v9 >= 0x555555555555555)
      v10 = 0xAAAAAAAAAAAAAAALL;
    else
      v10 = v8;
    if (v10)
    {
      if (v10 > 0xAAAAAAAAAAAAAAALL)
        sub_239418A80();
      v11 = (char *)operator new(24 * v10);
    }
    else
    {
      v11 = 0;
    }
    v13 = &v11[24 * v7];
    v14 = &v11[24 * v10];
    v15 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v13, v15);
    v16 = &v13[v15];
    if (v5 == v6)
    {
      *(_QWORD *)a1 = v13;
      *(_QWORD *)(a1 + 8) = v16;
      *(_QWORD *)(a1 + 16) = v14;
      if (v5)
LABEL_30:
        operator delete(v5);
    }
    else
    {
      do
      {
        v17 = v13;
        *((_QWORD *)v13 - 2) = 0;
        *((_QWORD *)v13 - 1) = 0;
        v18 = *(_OWORD *)(v5 - 3);
        v5 -= 3;
        *(_OWORD *)(v13 - 24) = v18;
        v13 -= 24;
        *((_QWORD *)v17 - 1) = v5[2];
        *v5 = 0;
        v5[1] = 0;
        v5[2] = 0;
      }
      while (v5 != v6);
      v19 = *(void ***)a1;
      v5 = *(void ***)(a1 + 8);
      *(_QWORD *)a1 = v13;
      *(_QWORD *)(a1 + 8) = v16;
      *(_QWORD *)(a1 + 16) = v14;
      if (v5 != v19)
      {
        v20 = v5;
        do
        {
          v23 = (char *)*(v20 - 3);
          v20 -= 3;
          v22 = v23;
          if (v23)
          {
            v24 = (char *)*(v5 - 2);
            v21 = v22;
            if (v24 != v22)
            {
              v25 = (char *)*(v5 - 2);
              do
              {
                v27 = (void *)*((_QWORD *)v25 - 3);
                v25 -= 24;
                v26 = v27;
                if (v27)
                {
                  *((_QWORD *)v24 - 2) = v26;
                  operator delete(v26);
                }
                v24 = v25;
              }
              while (v25 != v22);
              v21 = *v20;
            }
            *(v5 - 2) = v22;
            operator delete(v21);
          }
          v5 = v20;
        }
        while (v20 != v19);
        v5 = v19;
      }
      if (v5)
        goto LABEL_30;
    }
  }
}

void sub_23951A544(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  _OWORD *v21;
  char *v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;

  v5 = (char *)a1[1];
  v4 = a1[2];
  if (a2 <= (v4 - (uint64_t)v5) >> 3)
  {
    a1[1] = (uint64_t)&v5[8 * a2];
    return;
  }
  v6 = (_BYTE *)*a1;
  v7 = (uint64_t)&v5[-*a1];
  v8 = v7 >> 3;
  v9 = (v7 >> 3) + a2;
  if (v9 >> 61)
    sub_2394189F8();
  v10 = v4 - (_QWORD)v6;
  if (v10 >> 2 > v9)
    v9 = v10 >> 2;
  if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
    v11 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v11 = v9;
  if (v11)
  {
    if (v11 >> 61)
      sub_239418A80();
    v12 = operator new(8 * v11);
    v13 = (uint64_t)&v12[8 * v8];
    v14 = &v12[8 * v11];
    v15 = v13 + 8 * a2;
    v16 = (char *)(v5 - v6);
    if (v5 == v6)
    {
LABEL_11:
      *a1 = v13;
      a1[1] = v15;
      a1[2] = (uint64_t)v14;
      if (!v5)
        return;
LABEL_22:
      operator delete(v5);
      return;
    }
  }
  else
  {
    v12 = 0;
    v13 = 8 * v8;
    v14 = 0;
    v15 = 8 * v8 + 8 * a2;
    v16 = (char *)(v5 - v6);
    if (v5 == v6)
      goto LABEL_11;
  }
  v17 = (unint64_t)(v16 - 8);
  if (v17 < 0x58)
    goto LABEL_27;
  if ((unint64_t)(v5 - &v12[v7]) < 0x20)
    goto LABEL_27;
  v18 = (v17 >> 3) + 1;
  v19 = 8 * (v18 & 0x3FFFFFFFFFFFFFFCLL);
  v20 = &v5[-v19];
  v13 -= v19;
  v21 = &v12[8 * v8 - 16];
  v22 = v5 - 16;
  v23 = v18 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    v24 = *(_OWORD *)v22;
    *(v21 - 1) = *((_OWORD *)v22 - 1);
    *v21 = v24;
    v21 -= 2;
    v22 -= 32;
    v23 -= 4;
  }
  while (v23);
  v5 = v20;
  if (v18 != (v18 & 0x3FFFFFFFFFFFFFFCLL))
  {
LABEL_27:
    do
    {
      v25 = *((_QWORD *)v5 - 1);
      v5 -= 8;
      *(_QWORD *)(v13 - 8) = v25;
      v13 -= 8;
    }
    while (v5 != v6);
  }
  v5 = (char *)*a1;
  *a1 = v13;
  a1[1] = v15;
  a1[2] = (uint64_t)v14;
  if (v5)
    goto LABEL_22;
}

void sub_23951A6E0(uint64_t a1, unint64_t a2, const float *a3)
{
  uint64_t v6;
  unint64_t v7;
  _DWORD *v8;
  _DWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  unint64_t v16;
  unint64_t v17;
  float32x4_t v18;
  float32x4_t *v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  unint64_t v23;
  char *v24;
  unint64_t v25;
  float32x4_t v26;
  float32x4_t *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  __int128 *v33;
  uint64_t v34;
  __int128 v35;
  int v36;

  v7 = *(_QWORD *)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 16);
  v8 = (_DWORD *)v7;
  if (a2 <= (uint64_t)(v6 - v7) >> 2)
  {
    if (a2)
    {
      v16 = (a2 - 1) & 0x3FFFFFFFFFFFFFFFLL;
      if (v16 < 0xF || v7 < (unint64_t)(a3 + 1) && v7 + 4 * a2 > (unint64_t)a3)
        goto LABEL_43;
      v17 = v16 + 1;
      v8 = (_DWORD *)(v7 + 4 * (v17 & 0x7FFFFFFFFFFFFFF8));
      v18 = vld1q_dup_f32(a3);
      v19 = (float32x4_t *)(v7 + 16);
      v20 = v17 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v19[-1] = v18;
        *v19 = v18;
        v19 += 2;
        v20 -= 8;
      }
      while (v20);
      if (v17 != (v17 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_43:
        do
          *v8++ = *(_DWORD *)a3;
        while (v8 != (_DWORD *)(v7 + 4 * a2));
      }
      v8 = (_DWORD *)(v7 + 4 * a2);
    }
    *(_QWORD *)(a1 + 8) = v8;
  }
  else
  {
    v9 = *(_DWORD **)a1;
    v10 = v7 - *(_QWORD *)a1;
    v11 = v10 >> 2;
    v12 = (v10 >> 2) + a2;
    if (v12 >> 62)
      sub_2394189F8();
    v13 = v6 - (_QWORD)v9;
    if (v13 >> 1 > v12)
      v12 = v13 >> 1;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFFCLL)
      v14 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v14 = v12;
    if (v14)
    {
      if (v14 >> 62)
        sub_239418A80();
      v15 = (char *)operator new(4 * v14);
    }
    else
    {
      v15 = 0;
    }
    v21 = (unint64_t)&v15[4 * v11];
    v22 = (char *)(v21 + 4 * a2);
    v23 = (a2 - 1) & 0x3FFFFFFFFFFFFFFFLL;
    v24 = (char *)v21;
    if (v23 < 0x13)
      goto LABEL_44;
    if (v21 < (unint64_t)(a3 + 1))
    {
      v24 = &v15[4 * v11];
      if (&v15[4 * a2 + v10] > (char *)a3)
        goto LABEL_44;
    }
    v25 = v23 + 1;
    v24 = (char *)(v21 + 4 * (v25 & 0x7FFFFFFFFFFFFFF8));
    v26 = vld1q_dup_f32(a3);
    v27 = (float32x4_t *)&v15[4 * v11 + 16];
    v28 = v25 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v27[-1] = v26;
      *v27 = v26;
      v27 += 2;
      v28 -= 8;
    }
    while (v28);
    if (v25 != (v25 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_44:
      do
      {
        *(float *)v24 = *a3;
        v24 += 4;
      }
      while (v24 != v22);
    }
    if ((_DWORD *)v7 != v9)
    {
      v29 = v7 - (_QWORD)v9 - 4;
      if (v29 < 0x2C)
        goto LABEL_45;
      if (v7 - (unint64_t)&v15[v10] < 0x20)
        goto LABEL_45;
      v30 = (v29 >> 2) + 1;
      v31 = 4 * (v30 & 0x7FFFFFFFFFFFFFF8);
      v8 = (_DWORD *)(v7 - v31);
      v21 -= v31;
      v32 = &v15[4 * v11 - 16];
      v33 = (__int128 *)(v7 - 16);
      v34 = v30 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v35 = *v33;
        *((_OWORD *)v32 - 1) = *(v33 - 1);
        *(_OWORD *)v32 = v35;
        v32 -= 32;
        v33 -= 2;
        v34 -= 8;
      }
      while (v34);
      if (v30 != (v30 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_45:
        do
        {
          v36 = *--v8;
          *(_DWORD *)(v21 - 4) = v36;
          v21 -= 4;
        }
        while (v8 != v9);
      }
    }
    *(_QWORD *)a1 = v21;
    *(_QWORD *)(a1 + 8) = v22;
    *(_QWORD *)(a1 + 16) = &v15[4 * v14];
    if (v9)
      operator delete(v9);
  }
}

char *sub_23951A940(char **a1, uint64_t a2)
{
  char *v3;
  char *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char **v12;
  const void *v13;
  int64_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  __int128 v19;
  char *v20;
  char *v21;
  void *v22;
  void *v23;
  char *v25;

  v4 = *a1;
  v3 = a1[1];
  v5 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 3);
  v6 = v5 + 1;
  if (v5 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_2394189F8();
  if (0x5555555555555556 * ((a1[2] - v4) >> 3) > v6)
    v6 = 0x5555555555555556 * ((a1[2] - v4) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - v4) >> 3) >= 0x555555555555555)
    v8 = 0xAAAAAAAAAAAAAAALL;
  else
    v8 = v6;
  if (v8)
  {
    if (v8 > 0xAAAAAAAAAAAAAAALL)
      sub_239418A80();
    v9 = (char *)operator new(24 * v8);
  }
  else
  {
    v9 = 0;
  }
  v10 = &v9[24 * v5];
  v11 = &v9[24 * v8];
  *((_QWORD *)v10 + 1) = 0;
  v12 = (char **)(v10 + 8);
  *((_QWORD *)v10 + 2) = 0;
  *(_QWORD *)v10 = 0;
  v13 = *(const void **)a2;
  v14 = *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
  if (v14)
  {
    if (v14 < 0)
      sub_2394189F8();
    v15 = (char *)operator new(v14);
    *(_QWORD *)v10 = v15;
    *v12 = v15;
    v16 = &v15[4 * (v14 >> 2)];
    *((_QWORD *)v10 + 2) = v16;
    memcpy(v15, v13, v14);
    *v12 = v16;
  }
  v17 = v10 + 24;
  v25 = v10 + 24;
  if (v3 == v4)
  {
    *a1 = v10;
    a1[1] = v17;
    a1[2] = v11;
  }
  else
  {
    do
    {
      v18 = v10;
      *((_QWORD *)v10 - 2) = 0;
      *((_QWORD *)v10 - 1) = 0;
      v19 = *(_OWORD *)(v3 - 24);
      v3 -= 24;
      *(_OWORD *)(v10 - 24) = v19;
      v10 -= 24;
      *((_QWORD *)v18 - 1) = *((_QWORD *)v3 + 2);
      *(_QWORD *)v3 = 0;
      *((_QWORD *)v3 + 1) = 0;
      *((_QWORD *)v3 + 2) = 0;
    }
    while (v3 != v4);
    v20 = *a1;
    v3 = a1[1];
    v17 = v25;
    *a1 = v10;
    a1[1] = v25;
    a1[2] = v11;
    if (v3 != v20)
    {
      v21 = v3;
      do
      {
        v23 = (void *)*((_QWORD *)v21 - 3);
        v21 -= 24;
        v22 = v23;
        if (v23)
        {
          *((_QWORD *)v3 - 2) = v22;
          operator delete(v22);
        }
        v3 = v21;
      }
      while (v21 != v20);
      v3 = v20;
    }
  }
  if (v3)
    operator delete(v3);
  return v17;
}

void sub_23951AB28(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void **v2;
  _QWORD *v3;
  void *v5;
  va_list va;

  va_start(va, a2);
  v5 = *v2;
  if (*v2)
  {
    *v3 = v5;
    operator delete(v5);
  }
  sub_23942A5F4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_23951AB4C(_QWORD *a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  size_t v15;
  char *v16;
  char *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v5 = (char *)a1[1];
  v4 = a1[2];
  v6 = v5;
  if (a2 <= (v4 - (uint64_t)v5) >> 3)
  {
    if (a2)
    {
      bzero(v5, 8 * a2);
      v6 = &v5[8 * a2];
    }
    a1[1] = v6;
  }
  else
  {
    v7 = (char *)*a1;
    v8 = (uint64_t)&v5[-*a1];
    v9 = v8 >> 3;
    v10 = (v8 >> 3) + a2;
    if (v10 >> 61)
      sub_2394189F8();
    v11 = v4 - (_QWORD)v7;
    if (v11 >> 2 > v10)
      v10 = v11 >> 2;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
    {
      if (v12 >> 61)
        sub_239418A80();
      v13 = (char *)operator new(8 * v12);
    }
    else
    {
      v13 = 0;
    }
    v14 = &v13[8 * v9];
    v15 = 8 * a2;
    v16 = &v13[8 * v12];
    bzero(v14, v15);
    v17 = &v14[v15];
    if (v5 == v7)
    {
      *a1 = v14;
      a1[1] = v17;
      a1[2] = v16;
      if (v5)
LABEL_30:
        operator delete(v6);
    }
    else
    {
      v18 = v5 - v7 - 8;
      if (v18 < 0x78
        || &v5[-(v18 & 0xFFFFFFFFFFFFFFF8) - 8] < v14 && &v13[v8 - (v18 & 0xFFFFFFFFFFFFFFF8) - 8] < v5)
      {
        goto LABEL_37;
      }
      v19 = (v18 >> 3) + 1;
      v20 = 8 * (v19 & 0x3FFFFFFFFFFFFFFCLL);
      v14 -= v20;
      v6 = &v5[-v20];
      v21 = v5 - 16;
      v22 = &v13[8 * v9 - 16];
      v23 = v19 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v25 = *((_OWORD *)v21 - 1);
        v24 = *(_OWORD *)v21;
        *((_OWORD *)v21 - 1) = 0uLL;
        *(_OWORD *)v21 = 0uLL;
        *((_OWORD *)v22 - 1) = v25;
        *(_OWORD *)v22 = v24;
        v21 -= 32;
        v22 -= 32;
        v23 -= 4;
      }
      while (v23);
      if (v19 != (v19 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_37:
        do
        {
          v26 = *((_QWORD *)v6 - 1);
          v6 -= 8;
          *(_QWORD *)v6 = 0;
          *((_QWORD *)v14 - 1) = v26;
          v14 -= 8;
        }
        while (v6 != v7);
      }
      v27 = (char *)*a1;
      v6 = (char *)a1[1];
      *a1 = v14;
      a1[1] = v17;
      a1[2] = v16;
      if (v6 != v27)
      {
        do
        {
          v29 = *((_QWORD *)v6 - 1);
          v6 -= 8;
          v28 = v29;
          *(_QWORD *)v6 = 0;
          if (v29)
          {
            sub_239416DA0(v28 + 8);
            v30 = nullsub_4(v28);
            MEMORY[0x23B83E31C](v30, 0x10F1C405026F4E9);
          }
        }
        while (v6 != v27);
        v6 = v27;
      }
      if (v6)
        goto LABEL_30;
    }
  }
}

void sub_23951AD6C()
{
  JUMPOUT(0x23B83E31CLL);
}

__n128 sub_23951AD80(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x58uLL);
  *(_QWORD *)v2 = &off_250ADD5C8;
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(v2 + 56) = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(v2 + 72) = *(_OWORD *)(a1 + 72);
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_23951ADD8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_QWORD *)a2 = &off_250ADD5C8;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  v3 = *(_OWORD *)(a1 + 40);
  v4 = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(a2 + 72) = *(_OWORD *)(a1 + 72);
  *(_OWORD *)(a2 + 56) = v4;
  *(_OWORD *)(a2 + 40) = v3;
  *(__n128 *)(a2 + 24) = result;
  return result;
}

uint64_t sub_23951AE18(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  int8x8_t v8;
  uint8x8_t v9;
  unint64_t v10;
  uint64_t ***v11;
  uint64_t **v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *p_shared_owners;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  float v31;
  uint64_t v32;
  __int128 v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  void *__p;
  __int128 v46;
  _OWORD v47[3];
  uint64_t v48;
  __int16 v49;
  uint64_t (**v50)();
  uint64_t v51;
  std::__shared_weak_count *v52;
  uint64_t v53;
  _QWORD *v54;
  std::__shared_weak_count *v55;
  _QWORD v56[4];

  v3 = *a2;
  v4 = *(_QWORD *)(a1 + 8);
  HIBYTE(v46) = 0;
  LOBYTE(__p) = 0;
  sub_2396FD394(v56, v4, (__int128 *)&__p);
  if (SHIBYTE(v46) < 0)
    operator delete(__p);
  if (sub_2396FD7B0(*(_QWORD *)(a1 + 16)))
  {
    v5 = *(_QWORD *)(a1 + 8);
    HIBYTE(v46) = 0;
    LOBYTE(__p) = 0;
    sub_2396FCC6C(v5, (uint64_t)&__p);
    if (SHIBYTE(v46) < 0)
      operator delete(__p);
    return sub_2396FD3E8((uint64_t)v56);
  }
  v6 = *(_QWORD *)(**(_QWORD **)(a1 + 24) + 8 * v3);
  if (((*(_QWORD *)(**(_QWORD **)(a1 + 32) + ((v6 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
    return sub_2396FD3E8((uint64_t)v56);
  v7 = *(_QWORD **)(a1 + 48);
  v8 = (int8x8_t)v7[1];
  if (!*(_QWORD *)&v8)
    goto LABEL_61;
  v9 = (uint8x8_t)vcnt_s8(v8);
  v9.i16[0] = vaddlv_u8(v9);
  if (v9.u32[0] > 1uLL)
  {
    v10 = *(_QWORD *)(**(_QWORD **)(a1 + 24) + 8 * v3);
    if (v6 >= *(_QWORD *)&v8)
      v10 = v6 % *(_QWORD *)&v8;
  }
  else
  {
    v10 = (*(_QWORD *)&v8 - 1) & v6;
  }
  v11 = *(uint64_t ****)(*v7 + 8 * v10);
  if (!v11 || (v12 = *v11) == 0)
LABEL_61:
    sub_23941D898("unordered_map::at: key not found");
  v13 = *(_QWORD *)(a1 + 40);
  if (v9.u32[0] < 2uLL)
  {
    v14 = *(_QWORD *)&v8 - 1;
    while (1)
    {
      v16 = v12[1];
      if ((uint64_t *)v6 == v16)
      {
        if (v12[2] == (uint64_t *)v6)
          goto LABEL_27;
      }
      else if (((unint64_t)v16 & v14) != v10)
      {
        goto LABEL_61;
      }
      v12 = (uint64_t **)*v12;
      if (!v12)
        goto LABEL_61;
    }
  }
  while (1)
  {
    v15 = (unint64_t)v12[1];
    if (v6 == v15)
      break;
    if (v15 >= *(_QWORD *)&v8)
      v15 %= *(_QWORD *)&v8;
    if (v15 != v10)
      goto LABEL_61;
LABEL_17:
    v12 = (uint64_t **)*v12;
    if (!v12)
      goto LABEL_61;
  }
  if (v12[2] != (uint64_t *)v6)
    goto LABEL_17;
LABEL_27:
  __p = v12[3];
  v17 = *(_QWORD *)(v13 + 24);
  if (!v17)
    sub_2394172E0();
  (*(void (**)(_QWORD **__return_ptr, uint64_t, void **))(*(_QWORD *)v17 + 48))(&v54, v17, &__p);
  if (v54)
  {
    v18 = operator new();
    *(_QWORD *)v18 = &off_250ADB628;
    sub_239422F30((_WORD *)(v18 + 8));
    v19 = **(_QWORD **)(a1 + 64);
    v20 = *(_QWORD *)(v19 + 8 * v6);
    *(_QWORD *)(v19 + 8 * v6) = v18;
    if (v20)
    {
      sub_239416DA0(v20 + 8);
      v21 = nullsub_4(v20);
      MEMORY[0x23B83E31C](v21, 0x10F1C405026F4E9);
    }
    v50 = &off_250ADB210;
    sub_239423B80(v54, (uint64_t)&v51);
    sub_2397078F8((uint64_t)&v50, 1, &__p);
    sub_239422CF0(*(_QWORD *)(**(_QWORD **)(a1 + 64) + 8 * v6), (uint64_t)&__p);
    nullsub_4((char *)v47 + 8);
    v22 = (std::__shared_weak_count *)*((_QWORD *)&v46 + 1);
    if (*((_QWORD *)&v46 + 1))
    {
      v23 = (unint64_t *)(*((_QWORD *)&v46 + 1) + 8);
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
    }
    j_nullsub_4_89(&__p);
    nullsub_4(&v53);
    v25 = v52;
    if (v52)
    {
      p_shared_owners = (unint64_t *)&v52->__shared_owners_;
      do
        v27 = __ldaxr(p_shared_owners);
      while (__stlxr(v27 - 1, p_shared_owners));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v25);
      }
    }
    nullsub_4(&v50);
    v28 = v55;
    v54 = 0;
    v55 = 0;
    if (v28)
    {
      v29 = (unint64_t *)&v28->__shared_owners_;
      do
        v30 = __ldaxr(v29);
      while (__stlxr(v30 - 1, v29));
      if (!v30)
      {
        ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
        std::__shared_weak_count::__release_weak(v28);
      }
    }
    v31 = **(float **)(a1 + 72);
    if (v31 != 1.0)
    {
      sub_239716C7C(&__p, *(_QWORD *)(**(_QWORD **)(a1 + 64) + 8 * v6), *(_QWORD *)(a1 + 80), 1, v31, v31);
      v32 = *(_QWORD *)(**(_QWORD **)(a1 + 64) + 8 * v6);
      v33 = v46;
      v46 = 0uLL;
      v34 = *(std::__shared_weak_count **)(v32 + 16);
      *(_OWORD *)(v32 + 8) = v33;
      if (v34)
      {
        v35 = (unint64_t *)&v34->__shared_owners_;
        do
          v36 = __ldaxr(v35);
        while (__stlxr(v36 - 1, v35));
        if (!v36)
        {
          ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
          std::__shared_weak_count::__release_weak(v34);
        }
      }
      v37 = v47[0];
      v38 = v47[1];
      v39 = v47[2];
      *(_QWORD *)(v32 + 72) = v48;
      *(_OWORD *)(v32 + 56) = v39;
      *(_OWORD *)(v32 + 40) = v38;
      *(_OWORD *)(v32 + 24) = v37;
      *(_WORD *)(v32 + 80) = v49;
      sub_239416DA0((uint64_t)&v46);
      nullsub_4(&__p);
    }
  }
  else
  {
    **(_BYTE **)(a1 + 56) = 0;
    v40 = *(_QWORD *)(a1 + 8);
    HIBYTE(v46) = 0;
    LOBYTE(__p) = 0;
    sub_2396FCC6C(v40, (uint64_t)&__p);
    if (SHIBYTE(v46) < 0)
      operator delete(__p);
  }
  v41 = v55;
  if (v55)
  {
    v42 = (unint64_t *)&v55->__shared_owners_;
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  return sub_2396FD3E8((uint64_t)v56);
}

void sub_23951B298(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25)
{
  uint64_t v25;
  std::__shared_weak_count *v27;
  unint64_t *p_shared_owners;
  unint64_t v29;

  if (a14 < 0)
    operator delete(__p);
  v27 = *(std::__shared_weak_count **)(v25 - 72);
  if (v27)
  {
    p_shared_owners = (unint64_t *)&v27->__shared_owners_;
    do
      v29 = __ldaxr(p_shared_owners);
    while (__stlxr(v29 - 1, p_shared_owners));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  sub_2396FD3E8(v25 - 64);
  _Unwind_Resume(a1);
}

float sub_23951B3E4(unsigned int a1, unsigned int a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v5;
  float **v6;
  unint64_t v7;
  uint64_t *v8;
  unint64_t v9;
  float *v10;
  float *v11;
  uint64_t v12;
  unsigned int v13;
  unint64_t v14;
  unint64_t v15;
  unsigned int *v16;
  float *v17;
  unsigned int v18;
  float v19;
  float result;
  float v21;

  v4 = *a4;
  v5 = *(_QWORD *)(*a4 + 40);
  if (a1 >= (unint64_t)((*(_QWORD *)(*a4 + 48) - v5) >> 2))
    sub_23941D884();
  v6 = (float **)(**(_QWORD **)(v4 + 8) + 56 * *(unsigned int *)(v5 + 4 * a1));
  v7 = *(_QWORD *)(v4 + 72);
  if ((v7 & (v7 - 1)) != 0)
  {
    v9 = a2;
    if (v7 <= a2)
      v9 = a2 % v7;
    v8 = *(uint64_t **)(*(_QWORD *)(v4 + 64) + 8 * v9);
    do
    {
      do
        v8 = (uint64_t *)*v8;
      while (v8[1] != a2);
    }
    while (*((_DWORD *)v8 + 4) != a2);
  }
  else
  {
    v8 = *(uint64_t **)(*(_QWORD *)(v4 + 64) + 8 * (((_DWORD)v7 - 1) & a2));
    do
    {
      do
        v8 = (uint64_t *)*v8;
      while (v8[1] != a2);
    }
    while (*((_DWORD *)v8 + 4) != a2);
  }
  v10 = *v6;
  v11 = v6[1];
  v12 = (char *)v11 - (char *)*v6;
  if (v11 == *v6)
    goto LABEL_25;
  v13 = *((_DWORD *)v8 + 5);
  v14 = v12 >> 3;
  do
  {
    v15 = v14 >> 1;
    v16 = (unsigned int *)&v10[2 * (v14 >> 1)];
    v18 = *v16;
    v17 = (float *)(v16 + 2);
    v14 += ~(v14 >> 1);
    if (v18 < v13)
      v10 = v17;
    else
      v14 = v15;
  }
  while (v14);
  if (v10 == v11)
    goto LABEL_25;
  if (*(_DWORD *)v10 > v13)
    goto LABEL_25;
  v19 = 1.0 - v10[1];
  result = 0.0001;
  if (v19 >= 0.0001)
  {
    result = 1.0 - v10[1];
    if (v19 == 0.0)
      goto LABEL_25;
  }
  v21 = 0.0 - result;
  if (result >= 0.0)
    v21 = result;
  if (v21 <= 0.000001)
  {
LABEL_25:
    result = 0.0;
    if (((*(_QWORD *)(*(_QWORD *)(v4 + 16) + (((unint64_t)a1 >> 3) & 0x1FFFFFF8)) >> a1) & 1) == 0)
      result = *(float *)v4;
  }
  if (fabsf(result) == INFINITY)
    return *(float *)v4;
  return result;
}

float sub_23951B588(uint64_t a1, uint64_t a2, int a3, int a4, uint64_t a5, uint64_t a6)
{
  if (a3 == a4)
    return 0.000001;
  else
    return *(float *)(*(_QWORD *)a6 + 4);
}

uint64_t sub_23951B5AC(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, _QWORD *a5, uint64_t *a6, float a7)
{
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  uint64_t *v18;
  std::__shared_weak_count *v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  const float *v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  float32x4_t v51;
  _QWORD *v52;
  std::__shared_weak_count *v53;
  float32x4_t v54;
  float32x2_t *v55;
  float32x4_t v56;
  uint64_t v57;
  unsigned int *v62;
  float *v63;
  uint64_t v64;
  float32x4_t v65;
  float *v66;
  float32x4_t v67;
  float *v68;
  float32x4_t v69;
  _OWORD *v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  __int128 *v74;
  _QWORD *v75;
  uint64_t v76;
  unint64_t *v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  uint64_t v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  uint64_t v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  _QWORD *v92;
  _QWORD *v93;
  uint64_t v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  std::__shared_weak_count *v107;
  unint64_t *v108;
  unint64_t v109;
  std::__shared_weak_count *v110;
  unint64_t *v111;
  unint64_t v112;
  unsigned int v114;
  unsigned int v115;
  unsigned int *v116;
  char *v117;
  _BYTE *v118;
  _QWORD *v119;
  _QWORD *v120;
  uint64_t v121;
  int v122;
  _QWORD *v123;
  _QWORD *v124;
  std::__shared_weak_count *v125;
  unint64_t *v126;
  unint64_t v127;
  unint64_t *v128;
  unint64_t v129;
  unint64_t v130;
  float32x4_t v131;
  _BYTE *v132;
  uint64_t v133;
  uint64_t v136;
  float32x4_t v137;
  float32x4_t v138;
  char *v139;
  int v140;
  int v141;
  unsigned int v142;
  uint64_t v143;
  uint64_t v144;
  std::__shared_weak_count *v145;
  uint64_t v146;
  std::__shared_weak_count *v147;
  uint64_t v148;
  std::__shared_weak_count *v149;
  void *__p;
  _QWORD *v151;
  unint64_t v152;
  float32x2_t *v153;
  std::__shared_weak_count *v154;
  _BYTE v155[24];
  _QWORD v156[2];
  uint64_t v157;
  std::__shared_weak_count *v158;
  uint64_t v159;
  std::__shared_weak_count *v160;
  uint64_t v161;
  std::__shared_weak_count *v162;
  uint64_t v163;
  uint64_t v164;
  std::__shared_weak_count *v165;
  uint64_t v166;
  std::__shared_weak_count *v167;
  uint64_t v168;
  std::__shared_weak_count *v169;
  uint64_t v170;
  uint64_t v171;
  std::__shared_weak_count *v172;
  uint64_t v173;
  std::__shared_weak_count *v174;
  uint64_t v175;
  std::__shared_weak_count *v176;
  float v177;
  _QWORD v178[3];
  _QWORD *v179;
  unint64_t v180[44];
  _BYTE v181[24];
  _BYTE *v182;
  float32x4_t v183;
  char v184;
  uint64_t v185;
  uint64_t v186;
  _BYTE v187[24];
  _BYTE *v188;
  _QWORD v189[71];
  _BYTE v190[24];
  _BYTE *v191;
  _BYTE v192[568];
  uint64_t v193;

  v193 = *MEMORY[0x24BDAC8D0];
  v177 = a7;
  kdebug_trace();
  sub_2396FD800(a5, (uint64_t)v190);
  v189[0] = 0x42C8000000000000;
  sub_2396FCC68(v192, 100, v190, v189, 1.0);
  v11 = v191;
  if (v191 == v190)
  {
    v12 = 4;
    v11 = v190;
  }
  else
  {
    if (!v191)
      goto LABEL_6;
    v12 = 5;
  }
  (*(void (**)(void))(*v11 + 8 * v12))();
LABEL_6:
  sub_2396FD534(&v170, v192, 10);
  v133 = (uint64_t)a5;
  sub_2396FD534(&v163, v192, 90);
  v13 = v170;
  v14 = v171;
  v156[1] = v170;
  v157 = v171;
  v15 = v172;
  v158 = v172;
  if (v172)
  {
    p_shared_owners = (unint64_t *)&v172->__shared_owners_;
    do
      v17 = __ldxr(p_shared_owners);
    while (__stxr(v17 + 1, p_shared_owners));
  }
  v136 = a3;
  v18 = a2;
  v20 = v173;
  v19 = v174;
  v159 = v173;
  v160 = v174;
  if (v174)
  {
    v21 = (unint64_t *)&v174->__shared_owners_;
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }
  v24 = v175;
  v23 = v176;
  v161 = v175;
  v162 = v176;
  if (v176)
  {
    v25 = (unint64_t *)&v176->__shared_owners_;
    do
      v26 = __ldxr(v25);
    while (__stxr(v26 + 1, v25));
  }
  v188 = 0;
  v27 = operator new(0x40uLL);
  *v27 = &off_250ADB9D8;
  v27[1] = v13;
  v27[2] = v14;
  v27[3] = v15;
  v157 = 0;
  v158 = 0;
  v27[4] = v20;
  v27[5] = v19;
  v159 = 0;
  v160 = 0;
  v27[6] = v24;
  v27[7] = v23;
  v161 = 0;
  v162 = 0;
  v188 = v27;
  v183.i64[0] = 0x42C8000000000000;
  sub_2396FCC68(v189, 1, v187, &v183, 1.0);
  v28 = v188;
  v29 = v18;
  if (v188 == v187)
  {
    v31 = 4;
    v28 = v187;
    v30 = a1;
  }
  else
  {
    v30 = a1;
    if (!v188)
      goto LABEL_20;
    v31 = 5;
  }
  (*(void (**)(void))(*v28 + 8 * v31))();
LABEL_20:
  v33 = *(_QWORD *)(v30 + 24);
  v32 = *(_QWORD *)(v30 + 32);
  v34 = *v29;
  v35 = v32 - v33;
  v36 = 0xAAAAAAAAAAAAAAABLL * ((v32 - v33) >> 2);
  if (v36 != 0x6DB6DB6DB6DB6DB7 * ((v29[1] - *v29) >> 3))
  {
    v44 = 0;
    goto LABEL_76;
  }
  if (v32 == v33)
  {
LABEL_75:
    v44 = 1;
    goto LABEL_76;
  }
  v37 = *(uint64_t **)v136;
  v38 = *(_QWORD *)(v136 + 8) - *(_QWORD *)v136;
  if (v38 >> 3 == 1)
  {
    v183.i32[0] = *v37;
    v39 = (uint64_t)a6;
    v40 = *a6;
    v45 = (a6[1] - *a6) >> 2;
    _CF = v36 >= v45;
    v43 = v36 - v45;
    if (v36 > v45)
      goto LABEL_25;
LABEL_34:
    if (_CF)
      goto LABEL_75;
    v49 = v40 + 4 * v36;
LABEL_36:
    *(_QWORD *)(v39 + 8) = v49;
    goto LABEL_75;
  }
  if (!(v38 >> 3))
  {
    v183.i32[0] = 0;
    v39 = (uint64_t)a6;
    v40 = *a6;
    v41 = (a6[1] - *a6) >> 2;
    _CF = v36 >= v41;
    v43 = v36 - v41;
    if (v36 > v41)
    {
LABEL_25:
      sub_2394DE27C(v39, v43, v183.f32);
      goto LABEL_75;
    }
    goto LABEL_34;
  }
  v156[0] = 0;
  v46 = *v37;
  v156[0] = v46;
  if (v35 == 12)
  {
    v47 = *(const float **)v34;
    if (*(_QWORD *)(v34 + 8) == *(_QWORD *)v34)
    {
      v183.i32[0] = v46;
      sub_23951C284(a6, 1uLL, v183.f32);
      goto LABEL_75;
    }
    v39 = (uint64_t)a6;
    v48 = a6[1] - *a6;
    if (!v48)
    {
      v44 = 1;
      sub_2394DE27C((uint64_t)a6, 1uLL, v47);
      goto LABEL_76;
    }
    if (v48 < 5)
      goto LABEL_75;
    v49 = *a6 + 4;
    goto LABEL_36;
  }
  v50 = (a6[1] - *a6) >> 2;
  if (v36 <= v50)
  {
    if (v36 < v50)
      a6[1] = *a6 + 4 * v36;
  }
  else
  {
    sub_23942CB44((uint64_t)a6, v36 - v50);
  }
  *(_OWORD *)v155 = xmmword_239EC6AF0;
  *(_QWORD *)&v155[16] = 0x80000000800000;
  sub_2396C3A58((float **)v30, (uint64_t)v155);
  v51.i64[0] = *(_QWORD *)&v155[12];
  v51.i32[2] = *(_DWORD *)&v155[20];
  v137 = v51;
  v131 = *(float32x4_t *)v155;
  v52 = operator new(0xD8uLL);
  v53 = (std::__shared_weak_count *)v52;
  v130 = v38;
  v54 = vsubq_f32(v137, v131);
  if (v54.f32[0] < v54.f32[1])
    v54.f32[0] = v54.f32[1];
  if (v54.f32[0] < v54.f32[2])
    v54.f32[0] = v54.f32[2];
  v52[1] = 0;
  v52[2] = 0;
  *v52 = &off_250ADD610;
  v55 = (float32x2_t *)(v52 + 3);
  sub_23951D5E4((uint64_t)(v52 + 3), (uint64_t *)v155, v54.f32[0]);
  v57 = 0;
  v153 = v55;
  v154 = v53;
  v53[3].__vftable = (std::__shared_weak_count_vtbl *)*(int *)(a4 + 4);
  __asm { FMOV            V0.4S, #3.0 }
  v138 = _Q0;
  do
  {
    v62 = (unsigned int *)(*(_QWORD *)(v30 + 24) + 12 * v57);
    v183.i64[0] = 0;
    v183.i32[2] = 0;
    v63 = *(float **)v30;
    v64 = *(_QWORD *)v30 + 12 * *v62;
    v56.i64[0] = *(_QWORD *)v64;
    v56.i32[2] = *(_DWORD *)(v64 + 8);
    v65 = vaddq_f32(v183, v56);
    v183.i32[2] = v65.i32[2];
    v183.i64[0] = v65.i64[0];
    v66 = &v63[3 * v62[1]];
    v56.i64[0] = *(_QWORD *)v66;
    v56.f32[2] = v66[2];
    v67 = vaddq_f32(v65, v56);
    v183.i32[2] = v67.i32[2];
    v183.i64[0] = v67.i64[0];
    v68 = &v63[3 * v62[2]];
    v56.i64[0] = *(_QWORD *)v68;
    v56.f32[2] = v68[2];
    v69 = vdivq_f32(vaddq_f32(v67, v56), v138);
    v183.i32[2] = v69.i32[2];
    v183.i64[0] = v69.i64[0];
    sub_23951C2B0(v55, v183.f32, v57++);
  }
  while (v36 != v57);
  __p = 0;
  v151 = 0;
  v152 = 0;
  sub_23951CBA0((uint64_t *)v55, (uint64_t)&v183);
  while (1)
  {
    memset(v180, 0, 48);
    v71 = v186;
    sub_239465B20((uint64_t)v180);
    if (!v71)
      break;
    v72 = v186 + v185 - 1;
    v73 = *(_QWORD *)(v183.i64[1] + ((v72 >> 5) & 0x7FFFFFFFFFFFFF8));
    v74 = (__int128 *)(v73 + 16 * v72);
    if (!*(_QWORD *)(*(_QWORD *)v74 + 56))
    {
      v75 = v151;
      if ((unint64_t)v151 >= v152)
      {
        v70 = sub_23951E0F0((uint64_t)&__p, v74);
      }
      else
      {
        *v151 = *(_QWORD *)v74;
        v76 = *(_QWORD *)(v73 + 16 * v72 + 8);
        v75[1] = v76;
        if (v76)
        {
          v77 = (unint64_t *)(v76 + 8);
          do
            v78 = __ldxr(v77);
          while (__stxr(v78 + 1, v77));
        }
        v70 = v75 + 2;
      }
      v151 = v70;
    }
    sub_23951CCD0(&v183);
  }
  sub_239465B20((uint64_t)&v183);
  if ((sub_2396FD7B0(v133) & 1) != 0)
  {
    v44 = 0;
    goto LABEL_122;
  }
  v184 = 0;
  v183.i8[0] = 0;
  sub_2396FCDAC((uint64_t)v189, (__int128 *)&v183, 1);
  if (v184 < 0)
    operator delete((void *)v183.i64[0]);
  v139 = (char *)v151;
  v132 = __p;
  v79 = v163;
  v80 = v164;
  v143 = v163;
  v144 = v164;
  v81 = v165;
  v145 = v165;
  if (v165)
  {
    v82 = (unint64_t *)&v165->__shared_owners_;
    do
      v83 = __ldxr(v82);
    while (__stxr(v83 + 1, v82));
  }
  v84 = v166;
  v85 = v167;
  v146 = v166;
  v147 = v167;
  if (v167)
  {
    v86 = (unint64_t *)&v167->__shared_owners_;
    do
      v87 = __ldxr(v86);
    while (__stxr(v87 + 1, v86));
  }
  v88 = v168;
  v89 = v169;
  v148 = v168;
  v149 = v169;
  if (v169)
  {
    v90 = (unint64_t *)&v169->__shared_owners_;
    do
      v91 = __ldxr(v90);
    while (__stxr(v91 + 1, v90));
  }
  v182 = 0;
  v92 = operator new(0x40uLL);
  *v92 = &off_250ADB9D8;
  v92[1] = v79;
  v92[2] = v80;
  v92[3] = v81;
  v144 = 0;
  v145 = 0;
  v92[4] = v84;
  v92[5] = v85;
  v146 = 0;
  v147 = 0;
  v92[6] = v88;
  v92[7] = v89;
  v148 = 0;
  v149 = 0;
  v182 = v92;
  v180[0] = 0x42C8000000000000;
  sub_2396FCC68(&v183, (v139 - v132) >> 4, v181, v180, 1.0);
  v93 = v182;
  if (v182 == v181)
  {
    v94 = 4;
    v93 = v181;
  }
  else
  {
    if (!v182)
      goto LABEL_110;
    v94 = 5;
  }
  (*(void (**)(void))(*v93 + 8 * v94))();
LABEL_110:
  v114 = sub_239548C68(v130 >> 3);
  v142 = v114;
  v116 = (unsigned int *)(a4 + 72);
  v115 = *(_DWORD *)(a4 + 72);
  if (!v115)
  {
    v115 = std::thread::hardware_concurrency();
    LODWORD(v180[0]) = v115;
    v116 = (unsigned int *)v180;
  }
  if (v114 < v115)
    v116 = &v142;
  sub_2397A2A50((uint64_t)v180, *v116, 0);
  sub_2397A15E0(&v141);
  v140 = 0;
  v118 = __p;
  v117 = (char *)v151;
  v179 = 0;
  v119 = operator new(0x60uLL);
  *v119 = &off_250ADD648;
  v119[1] = &v183;
  v119[2] = v133;
  v119[3] = &v141;
  v119[4] = &v140;
  v119[5] = &__p;
  v119[6] = &v177;
  v119[7] = v29;
  v119[8] = a6;
  v119[9] = v156;
  v119[10] = a4;
  v119[11] = v30;
  v179 = v119;
  sub_2397A376C(v180, (v117 - v118) >> 4, v178, 0);
  v120 = v179;
  if (v179 == v178)
  {
    v121 = 4;
    v120 = v178;
    goto LABEL_118;
  }
  if (v179)
  {
    v121 = 5;
LABEL_118:
    (*(void (**)(void))(*v120 + 8 * v121))();
  }
  v122 = sub_2396FD7B0(v133);
  if ((v122 & 1) == 0)
    kdebug_trace();
  v44 = v122 ^ 1u;
  nullsub_4(&v141);
  sub_2397A2E14(v180);
  sub_2396FCD14((uint64_t)&v183);
LABEL_122:
  v123 = __p;
  if (!__p)
  {
LABEL_132:
    v128 = (unint64_t *)&v53->__shared_owners_;
    do
      v129 = __ldaxr(v128);
    while (__stlxr(v129 - 1, v128));
    if (!v129)
    {
      ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
      std::__shared_weak_count::__release_weak(v53);
    }
    goto LABEL_76;
  }
  v124 = v151;
  if (v151 == __p)
  {
    v151 = __p;
    operator delete(__p);
    goto LABEL_132;
  }
  do
  {
    v125 = (std::__shared_weak_count *)*(v124 - 1);
    if (v125)
    {
      v126 = (unint64_t *)&v125->__shared_owners_;
      do
        v127 = __ldaxr(v126);
      while (__stlxr(v127 - 1, v126));
      if (!v127)
      {
        ((void (*)(std::__shared_weak_count *))v125->__on_zero_shared)(v125);
        std::__shared_weak_count::__release_weak(v125);
      }
    }
    v124 -= 2;
  }
  while (v124 != v123);
  v53 = v154;
  v151 = v123;
  operator delete(__p);
  if (v53)
    goto LABEL_132;
LABEL_76:
  sub_2396FCD14((uint64_t)v189);
  v95 = v169;
  if (v169)
  {
    v96 = (unint64_t *)&v169->__shared_owners_;
    do
      v97 = __ldaxr(v96);
    while (__stlxr(v97 - 1, v96));
    if (!v97)
    {
      ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
      std::__shared_weak_count::__release_weak(v95);
    }
  }
  v98 = v167;
  if (v167)
  {
    v99 = (unint64_t *)&v167->__shared_owners_;
    do
      v100 = __ldaxr(v99);
    while (__stlxr(v100 - 1, v99));
    if (!v100)
    {
      ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
      std::__shared_weak_count::__release_weak(v98);
    }
  }
  v101 = v165;
  if (v165)
  {
    v102 = (unint64_t *)&v165->__shared_owners_;
    do
      v103 = __ldaxr(v102);
    while (__stlxr(v103 - 1, v102));
    if (!v103)
    {
      ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
      std::__shared_weak_count::__release_weak(v101);
    }
  }
  v104 = v176;
  if (v176)
  {
    v105 = (unint64_t *)&v176->__shared_owners_;
    do
      v106 = __ldaxr(v105);
    while (__stlxr(v106 - 1, v105));
    if (!v106)
    {
      ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
      std::__shared_weak_count::__release_weak(v104);
    }
  }
  v107 = v174;
  if (v174)
  {
    v108 = (unint64_t *)&v174->__shared_owners_;
    do
      v109 = __ldaxr(v108);
    while (__stlxr(v109 - 1, v108));
    if (!v109)
    {
      ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
      std::__shared_weak_count::__release_weak(v107);
    }
  }
  v110 = v172;
  if (v172)
  {
    v111 = (unint64_t *)&v172->__shared_owners_;
    do
      v112 = __ldaxr(v111);
    while (__stlxr(v112 - 1, v111));
    if (!v112)
    {
      ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
      std::__shared_weak_count::__release_weak(v110);
    }
  }
  sub_2396FCD14((uint64_t)v192);
  return v44;
}

void sub_23951C04C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51)
{
  sub_2396FCD14((uint64_t)&STACK[0x330]);
  sub_2394631DC(&a28);
  sub_239416DA0((uint64_t)&a31);
  sub_2396FCD14((uint64_t)&STACK[0x588]);
  sub_23942FEFC(&a44);
  sub_23942FEFC(&a51);
  sub_2396FCD14((uint64_t)&STACK[0x7E0]);
  _Unwind_Resume(a1);
}

void sub_23951C284(_QWORD *a1, unint64_t a2, const float *a3)
{
  unint64_t v3;
  BOOL v4;
  unint64_t v5;

  v3 = (uint64_t)(a1[1] - *a1) >> 2;
  v4 = a2 >= v3;
  v5 = a2 - v3;
  if (v5 != 0 && v4)
  {
    sub_2394DE27C((uint64_t)a1, v5, a3);
  }
  else if (!v4)
  {
    a1[1] = *a1 + 4 * a2;
  }
}

uint64_t sub_23951C2B0(float32x2_t *__sz, float *a2, int a3)
{
  float32x2_t *j;
  float *v6;
  float32x2_t *v7;
  float v8;
  float v9;
  float v10;
  float32x2_t *v11;
  float v12;
  float v13;
  float v14;
  BOOL v15;
  float v16;
  float v17;
  BOOL v18;
  float v19;
  float v20;
  float v21;
  BOOL v22;
  float v23;
  float v24;
  BOOL v25;
  float v26;
  float v27;
  float v28;
  BOOL v29;
  float v30;
  float v31;
  BOOL v32;
  float v33;
  float v34;
  float v35;
  BOOL v36;
  float v37;
  float v38;
  BOOL v39;
  float v40;
  float v41;
  float v42;
  BOOL v43;
  float v44;
  float v45;
  BOOL v46;
  float v47;
  float v48;
  float v49;
  BOOL v50;
  float v51;
  float v52;
  BOOL v53;
  float v54;
  float v55;
  float v56;
  BOOL v57;
  float v58;
  float v59;
  BOOL v60;
  float v61;
  float v62;
  float v63;
  float v65;
  float32x2_t v66;
  float *v67;
  int v68;
  float32x2_t i;
  float *v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  BOOL v74;
  unint64_t v75;
  uint64_t v76;
  char *v77;
  float *v78;
  uint64_t v79;
  int v80;
  unint64_t v81;
  uint64_t v82;
  float v83;
  double v84;
  char v85;
  char v86;
  unint64_t v87;
  unint64_t v88;
  char v89;
  char v90;
  float64x2_t v91;
  float v92;
  float32x2_t v93;
  std::__shared_weak_count *v94;
  std::__shared_weak_count *v95;
  unint64_t *p_shared_owners;
  void **v97;
  float32x2_t v98;
  float32x2_t v99;
  char *v100;
  uint64_t v101;
  float v102;
  float v103;
  float v104;
  float v105;
  float v107;
  float v108;
  float v109;
  unint64_t shared_weak_owners;
  float32x2_t *v112;
  char *v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t v116;
  unint64_t v117;
  char *v118;
  char *v119;
  uint64_t v120;
  char *v121;
  uint64_t v122;
  int v123;
  float32x2_t v124;
  float32x2_t v125;
  float v126;
  float v127;
  float v128;
  float v129;
  float v131;
  float v132;
  float v133;
  uint64_t v135;
  float v136;
  float v137;
  float v138;
  float v139;
  BOOL v140;
  float v141;
  float v142;
  float v143;
  BOOL v144;
  uint64_t v145;
  unint64_t v146;
  float32x2_t *v147;
  std::__shared_weak_count *v148;
  unint64_t *v149;
  unint64_t v150;
  unint64_t v151;
  char v153;
  char v154;
  float32x2_t *v155;
  float64x2_t v156;
  double v157;
  unint64_t v158;
  float64_t v159;
  unint64_t v160;
  char v161;

  j = __sz;
  v7 = __sz + 7;
  v6 = (float *)__sz[7];
  if (v6)
  {
    v8 = *a2;
    v9 = a2[1];
    v10 = a2[2];
    while (1)
    {
      v11 = j;
      v12 = v6[6];
      if (v8 < v12)
        goto LABEL_95;
      v13 = v6[9];
      if (v8 > (float)(v12 + v13))
        goto LABEL_95;
      v14 = v6[7];
      v15 = v9 < v14 || v9 > (float)(v13 + v14);
      if (v15
        || ((v16 = v6[8], v17 = v13 + v16, v10 >= v16) ? (v18 = v10 > v17) : (v18 = 1), j = (float32x2_t *)v6, v18))
      {
LABEL_95:
        j = (float32x2_t *)v11[9];
        if (!j)
          goto LABEL_198;
        v19 = j[3].f32[0];
        if (v8 < v19)
          goto LABEL_198;
        v20 = j[4].f32[1];
        if (v8 > (float)(v19 + v20))
          goto LABEL_198;
        v21 = j[3].f32[1];
        v22 = v9 < v21 || v9 > (float)(v20 + v21);
        if (v22 || ((v23 = j[4].f32[0], v24 = v20 + v23, v10 >= v23) ? (v25 = v10 > v24) : (v25 = 1), v25))
        {
LABEL_198:
          j = (float32x2_t *)v11[11];
          if (!j)
            goto LABEL_199;
          v26 = j[3].f32[0];
          if (v8 < v26)
            goto LABEL_199;
          v27 = j[4].f32[1];
          if (v8 > (float)(v26 + v27))
            goto LABEL_199;
          v28 = j[3].f32[1];
          v29 = v9 < v28 || v9 > (float)(v27 + v28);
          if (v29 || ((v30 = j[4].f32[0], v31 = v27 + v30, v10 >= v30) ? (v32 = v10 > v31) : (v32 = 1), v32))
          {
LABEL_199:
            j = (float32x2_t *)v11[13];
            if (!j)
              goto LABEL_200;
            v33 = j[3].f32[0];
            if (v8 < v33)
              goto LABEL_200;
            v34 = j[4].f32[1];
            if (v8 > (float)(v33 + v34))
              goto LABEL_200;
            v35 = j[3].f32[1];
            v36 = v9 < v35 || v9 > (float)(v34 + v35);
            if (v36 || ((v37 = j[4].f32[0], v38 = v34 + v37, v10 >= v37) ? (v39 = v10 > v38) : (v39 = 1), v39))
            {
LABEL_200:
              j = (float32x2_t *)v11[15];
              if (!j)
                goto LABEL_201;
              v40 = j[3].f32[0];
              if (v8 < v40)
                goto LABEL_201;
              v41 = j[4].f32[1];
              if (v8 > (float)(v40 + v41))
                goto LABEL_201;
              v42 = j[3].f32[1];
              v43 = v9 < v42 || v9 > (float)(v41 + v42);
              if (v43 || ((v44 = j[4].f32[0], v45 = v41 + v44, v10 >= v44) ? (v46 = v10 > v45) : (v46 = 1), v46))
              {
LABEL_201:
                j = (float32x2_t *)v11[17];
                if (!j)
                  goto LABEL_202;
                v47 = j[3].f32[0];
                if (v8 < v47)
                  goto LABEL_202;
                v48 = j[4].f32[1];
                if (v8 > (float)(v47 + v48))
                  goto LABEL_202;
                v49 = j[3].f32[1];
                v50 = v9 < v49 || v9 > (float)(v48 + v49);
                if (v50 || ((v51 = j[4].f32[0], v52 = v48 + v51, v10 >= v51) ? (v53 = v10 > v52) : (v53 = 1), v53))
                {
LABEL_202:
                  j = (float32x2_t *)v11[19];
                  if (!j)
                    goto LABEL_203;
                  v54 = j[3].f32[0];
                  if (v8 < v54)
                    goto LABEL_203;
                  v55 = j[4].f32[1];
                  if (v8 > (float)(v54 + v55))
                    goto LABEL_203;
                  v56 = j[3].f32[1];
                  v57 = v9 < v56 || v9 > (float)(v55 + v56);
                  if (v57 || ((v58 = j[4].f32[0], v59 = v55 + v58, v10 >= v58) ? (v60 = v10 > v59) : (v60 = 1), v60))
                  {
LABEL_203:
                    j = (float32x2_t *)v11[21];
                    if (!j)
                      break;
                    v61 = j[3].f32[0];
                    if (v8 < v61)
                      break;
                    v62 = j[4].f32[1];
                    if (v8 > (float)(v61 + v62))
                      break;
                    v63 = j[3].f32[1];
                    if (v9 < v63 || v9 > (float)(v62 + v63))
                      break;
                    v65 = j[4].f32[0];
                    if (v10 < v65 || v10 > (float)(v62 + v65))
                      break;
                  }
                }
              }
            }
          }
        }
      }
      v6 = (float *)j[7];
      if (!v6)
      {
        v7 = j + 7;
        goto LABEL_98;
      }
    }
  }
  else
  {
LABEL_98:
    v67 = (float *)j[1];
    v66 = j[2];
    v155 = v7;
    if ((unint64_t)v67 >= *(_QWORD *)&v66)
    {
      v70 = (float *)*j;
      v71 = ((uint64_t)v67 - *(_QWORD *)j) >> 4;
      v72 = v71 + 1;
      if ((unint64_t)(v71 + 1) >> 60)
        sub_2394189F8();
      v73 = *(_QWORD *)&v66 - (_QWORD)v70;
      if (v73 >> 3 > v72)
        v72 = v73 >> 3;
      v74 = (unint64_t)v73 >= 0x7FFFFFFFFFFFFFF0;
      v75 = 0xFFFFFFFFFFFFFFFLL;
      if (!v74)
        v75 = v72;
      if (v75 >> 60)
        sub_239418A80();
      v76 = 16 * v75;
      v77 = (char *)operator new(16 * v75);
      v78 = (float *)&v77[16 * v71];
      *(_QWORD *)v78 = *(_QWORD *)a2;
      v78[2] = a2[2];
      *((_DWORD *)v78 + 3) = a3;
      for (i = (float32x2_t)(v78 + 4); v67 != v70; v78[3] = v67[3])
      {
        v79 = *((_QWORD *)v67 - 2);
        v67 -= 4;
        v80 = *((_DWORD *)v67 + 2);
        *((_QWORD *)v78 - 2) = v79;
        v78 -= 4;
        *((_DWORD *)v78 + 2) = v80;
      }
      *j = (float32x2_t)v78;
      j[1] = i;
      j[2] = (float32x2_t)&v77[v76];
      v7 = v155;
      if (v70)
        operator delete(v70);
    }
    else
    {
      v68 = *((_DWORD *)a2 + 2);
      *(_QWORD *)v67 = *(_QWORD *)a2;
      *((_DWORD *)v67 + 2) = v68;
      *((_DWORD *)v67 + 3) = a3;
      i = (float32x2_t)(v67 + 4);
    }
    j[1] = i;
    if (*(_QWORD *)&j[6] < (unint64_t)((uint64_t)(*(_QWORD *)&i - *(_QWORD *)j) >> 4))
    {
      v81 = 0;
      *(double *)&v82 = j[4].f32[1] * 0.5;
      v83 = *(double *)&v82;
      v157 = *(double *)&v82;
      v156 = (float64x2_t)vdupq_lane_s64(v82, 0);
      v84 = 0.0;
      v85 = 1;
      do
      {
        v153 = v85;
        v86 = 1;
        v159 = 0.0;
        do
        {
          v87 = 0;
          v154 = v86;
          v88 = 8 - v81;
          if (v81 > 8)
            v88 = 0;
          v158 = v88;
          v89 = 1;
          do
          {
            v90 = v89;
            v91.f64[0] = (double)v87;
            v92 = j[4].f32[0] + v84 * v157;
            v91.f64[1] = v159;
            v93 = vcvt_f32_f64(vmlaq_f64(vcvtq_f64_f32(j[3]), v156, v91));
            v94 = (std::__shared_weak_count *)operator new(0xD8uLL);
            v95 = v94;
            v94->__shared_owners_ = 0;
            p_shared_owners = (unint64_t *)&v94->__shared_owners_;
            v94->__shared_weak_owners_ = 0;
            v94[1].__vftable = 0;
            v97 = (void **)&v94[1].__vftable;
            v94->__vftable = (std::__shared_weak_count_vtbl *)&off_250ADD610;
            v94[1].__shared_owners_ = 0;
            v94[1].__shared_weak_owners_ = 0;
            v94[2].__vftable = (std::__shared_weak_count_vtbl *)v93;
            *(float *)&v94[2].__shared_owners_ = v92;
            *((float *)&v94[2].__shared_owners_ + 1) = v83;
            *(_OWORD *)&v94[2].__shared_weak_owners_ = xmmword_239EC6F50;
            *(_OWORD *)&v94[3].__shared_owners_ = 0u;
            v94[4].std::__shared_count = 0u;
            *(_OWORD *)&v94[4].__shared_weak_owners_ = 0u;
            *(_OWORD *)&v94[5].__shared_owners_ = 0u;
            v94[6].std::__shared_count = 0u;
            *(_OWORD *)&v94[6].__shared_weak_owners_ = 0u;
            *(_OWORD *)&v94[7].__shared_owners_ = 0u;
            v94[8].std::__shared_count = 0u;
            v94[8].__shared_weak_owners_ = 0;
            v94[2].__shared_weak_owners_ = *(_QWORD *)&j[5] + 1;
            if (v87 == v158)
            {
              sub_239A444D4((uint64_t)"unknown file", 93, (uint64_t)"", (void (*)(void *))sub_239A4463C);
              sub_239A4475C();
              abort();
            }
            v94[8].__shared_weak_owners_ = v81;
            v94[3].__vftable = (std::__shared_weak_count_vtbl *)j[6];
            v98 = *j;
            v99 = j[1];
            if (*j != *(_QWORD *)&v99)
            {
              v161 = v90;
              v100 = 0;
              do
              {
                v102 = *(float *)&v95[2].__vftable;
                if (**(float **)v98.f32 >= v102)
                {
                  v103 = *((float *)&v95[2].__shared_owners_ + 1);
                  if (**(float **)v98.f32 <= (float)(v102 + v103))
                  {
                    v104 = *(float *)(*(_QWORD *)&v98 + 4);
                    v105 = *((float *)&v95[2].__vftable + 1);
                    if (v104 >= v105 && v104 <= (float)(v103 + v105))
                    {
                      v107 = *(float *)(*(_QWORD *)&v98 + 8);
                      v108 = *(float *)&v95[2].__shared_owners_;
                      v109 = v103 + v108;
                      if (v107 >= v108 && v107 <= v109)
                      {
                        shared_weak_owners = v95[1].__shared_weak_owners_;
                        if ((unint64_t)v100 < shared_weak_owners)
                        {
                          v101 = **(_QWORD **)&v98;
                          *((_DWORD *)v100 + 2) = *(_DWORD *)(*(_QWORD *)&v98 + 8);
                          *(_QWORD *)v100 = v101;
                          *((_DWORD *)v100 + 3) = *(_DWORD *)(*(_QWORD *)&v98 + 12);
                          v100 += 16;
                        }
                        else
                        {
                          v112 = j;
                          v113 = (char *)*v97;
                          v114 = (v100 - (_BYTE *)*v97) >> 4;
                          v115 = v114 + 1;
                          if ((unint64_t)(v114 + 1) >> 60)
                            sub_2394189F8();
                          v160 = v81;
                          v116 = shared_weak_owners - (_QWORD)v113;
                          if (v116 >> 3 > v115)
                            v115 = v116 >> 3;
                          if ((unint64_t)v116 >= 0x7FFFFFFFFFFFFFF0)
                            v117 = 0xFFFFFFFFFFFFFFFLL;
                          else
                            v117 = v115;
                          if (v117 >> 60)
                            sub_239418A80();
                          v118 = (char *)operator new(16 * v117);
                          v119 = &v118[16 * v114];
                          v120 = **(_QWORD **)&v98;
                          *((_DWORD *)v119 + 2) = *(_DWORD *)(*(_QWORD *)&v98 + 8);
                          *(_QWORD *)v119 = v120;
                          *((_DWORD *)v119 + 3) = *(_DWORD *)(*(_QWORD *)&v98 + 12);
                          v121 = v119;
                          for (j = v112; v100 != v113; *((_DWORD *)v121 + 3) = *((_DWORD *)v100 + 3))
                          {
                            v122 = *((_QWORD *)v100 - 2);
                            v100 -= 16;
                            v123 = *((_DWORD *)v100 + 2);
                            *((_QWORD *)v121 - 2) = v122;
                            v121 -= 16;
                            *((_DWORD *)v121 + 2) = v123;
                          }
                          v100 = v119 + 16;
                          v95[1].__vftable = (std::__shared_weak_count_vtbl *)v121;
                          v95[1].__shared_owners_ = (uint64_t)(v119 + 16);
                          v95[1].__shared_weak_owners_ = (uint64_t)&v118[16 * v117];
                          v7 = v155;
                          if (v113)
                            operator delete(v113);
                          v81 = v160;
                        }
                        v95[1].__shared_owners_ = (uint64_t)v100;
                      }
                    }
                  }
                }
                *(_QWORD *)&v98 += 16;
              }
              while (*(_QWORD *)&v98 != *(_QWORD *)&v99);
              v124 = *j;
              v125 = j[1];
              v90 = v161;
              if (*j != *(_QWORD *)&v125)
              {
                v126 = *(float *)&v95[2].__vftable;
                while (1)
                {
                  if (**(float **)v124.f32 >= v126)
                  {
                    v127 = *((float *)&v95[2].__shared_owners_ + 1);
                    if (**(float **)v124.f32 <= (float)(v126 + v127))
                    {
                      v128 = *(float *)(*(_QWORD *)&v124 + 4);
                      v129 = *((float *)&v95[2].__vftable + 1);
                      if (v128 >= v129 && v128 <= (float)(v127 + v129))
                      {
                        v131 = *(float *)(*(_QWORD *)&v124 + 8);
                        v132 = *(float *)&v95[2].__shared_owners_;
                        v133 = v127 + v132;
                        if (v131 >= v132 && v131 <= v133)
                          break;
                      }
                    }
                  }
                  *(_QWORD *)&v124 += 16;
                  if (*(_QWORD *)&v124 == *(_QWORD *)&v125)
                    goto LABEL_179;
                }
                if (*(_QWORD *)&v124 != *(_QWORD *)&v125)
                {
                  v135 = *(_QWORD *)&v124 + 16;
                  if (*(_QWORD *)&v124 + 16 != *(_QWORD *)&v125)
                  {
                    do
                    {
                      v136 = *(float *)&v95[2].__vftable;
                      if (*(float *)v135 < v136)
                        goto LABEL_174;
                      v137 = *((float *)&v95[2].__shared_owners_ + 1);
                      if (*(float *)v135 > (float)(v136 + v137))
                        goto LABEL_174;
                      v138 = *(float *)(v135 + 4);
                      v139 = *((float *)&v95[2].__vftable + 1);
                      v140 = v138 < v139 || v138 > (float)(v137 + v139);
                      if (v140
                        || ((v141 = *(float *)(v135 + 8),
                             v142 = *(float *)&v95[2].__shared_owners_,
                             v143 = v137 + v142,
                             v141 >= v142)
                          ? (v144 = v141 > v143)
                          : (v144 = 1),
                            v144))
                      {
LABEL_174:
                        v145 = *(_QWORD *)v135;
                        *(_DWORD *)(*(_QWORD *)&v124 + 8) = *(_DWORD *)(v135 + 8);
                        **(_QWORD **)&v124 = v145;
                        *(_DWORD *)(*(_QWORD *)&v124 + 12) = *(_DWORD *)(v135 + 12);
                        *(_QWORD *)&v124 += 16;
                      }
                      v135 += 16;
                    }
                    while (v135 != *(_QWORD *)&v125);
                    v125 = j[1];
                  }
                }
                if (*(_QWORD *)&v124 != *(_QWORD *)&v125)
                  j[1] = v124;
              }
            }
            do
LABEL_179:
              v146 = __ldxr(p_shared_owners);
            while (__stxr(v146 + 1, p_shared_owners));
            v7[2 * v81] = (float32x2_t)v97;
            v147 = &v7[2 * v81];
            v148 = (std::__shared_weak_count *)v147[1];
            v147[1] = (float32x2_t)v95;
            if (v148)
            {
              v149 = (unint64_t *)&v148->__shared_owners_;
              do
                v150 = __ldaxr(v149);
              while (__stlxr(v150 - 1, v149));
              if (!v150)
              {
                ((void (*)(std::__shared_weak_count *))v148->__on_zero_shared)(v148);
                std::__shared_weak_count::__release_weak(v148);
              }
            }
            ++v81;
            do
              v151 = __ldaxr(p_shared_owners);
            while (__stlxr(v151 - 1, p_shared_owners));
            if (!v151)
            {
              ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
              std::__shared_weak_count::__release_weak(v95);
            }
            v89 = 0;
            v87 = 1;
          }
          while ((v90 & 1) != 0);
          v86 = 0;
          v159 = 1.0;
        }
        while ((v154 & 1) != 0);
        v85 = 0;
        v84 = 1.0;
      }
      while ((v153 & 1) != 0);
      j[1] = *j;
    }
  }
  return 1;
}

void sub_23951CBA0(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;

  v4 = (std::__shared_weak_count *)operator new(0xD8uLL);
  v4->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  v4->__shared_weak_owners_ = 0;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&off_250ADD610;
  sub_23951D944((uint64_t)&v4[1], a1);
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  sub_23951DB34(a2);
  v6 = *(_QWORD *)(a2 + 40);
  v7 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 8)
                            + (((unint64_t)(*(_QWORD *)(a2 + 32) + v6) >> 5) & 0x7FFFFFFFFFFFFF8))
                + 16 * (*(_BYTE *)(a2 + 32) + v6));
  *v7 = v4 + 1;
  v7[1] = v4;
  do
    v8 = __ldxr(p_shared_owners);
  while (__stxr(v8 + 1, p_shared_owners));
  *(_QWORD *)(a2 + 40) = v6 + 1;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
}

void sub_23951CC9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  sub_239465B20(v9);
  sub_239416DA0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_23951CCB8(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

_QWORD *sub_23951CCD0(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  __int128 v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  __int128 v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  __int128 v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  __int128 v37;
  unint64_t *v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  __int128 v43;
  unint64_t *v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  __int128 v49;
  unint64_t *v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  __int128 v55;
  unint64_t *v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  __int128 v61;
  unint64_t *v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  __int128 v68;
  unint64_t *v69;
  unint64_t v70;
  unint64_t *v71;
  unint64_t v72;
  __int128 v74;

  v2 = a1[5];
  if (!v2)
    return a1;
  v6 = v2 + a1[4] - 1;
  v3 = a1[1];
  v4 = v6 >> 8;
  v5 = *(_QWORD *)(v3 + 8 * (v6 >> 8));
  v6 = v6;
  v7 = *(_OWORD *)(v5 + 16 * v6);
  v74 = v7;
  if (*((_QWORD *)&v7 + 1))
  {
    v8 = (unint64_t *)(*((_QWORD *)&v7 + 1) + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
    v3 = a1[1];
    v4 = (unint64_t)(a1[5] + a1[4] - 1) >> 8;
    v6 = (*((_BYTE *)a1 + 40) + *((_BYTE *)a1 + 32) - 1);
  }
  v10 = *(std::__shared_weak_count **)(*(_QWORD *)(v3 + 8 * v4) + 16 * v6 + 8);
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v14 = a1[1];
  v13 = a1[2];
  v15 = v13 - v14;
  v16 = v13 == v14;
  v18 = a1[4];
  v17 = a1[5];
  a1[5] = v17 - 1;
  v19 = 32 * v15 - 1;
  if (v16)
    v19 = 0;
  if ((unint64_t)(v19 - (v17 + v18) + 1) >= 0x200)
  {
    operator delete(*(void **)(v13 - 8));
    v13 = a1[2] - 8;
    a1[2] = v13;
  }
  if (*(_QWORD *)(v74 + 56))
  {
    v20 = a1[1];
    if (v13 == v20)
      v21 = 0;
    else
      v21 = 32 * (v13 - v20) - 1;
    v22 = a1[4];
    v23 = a1[5];
    v24 = v23 + v22;
    if (v21 == v23 + v22)
    {
      sub_23951DB34((uint64_t)a1);
      v20 = a1[1];
      v13 = a1[2];
      v22 = a1[4];
      v23 = a1[5];
      v24 = v23 + v22;
    }
    v25 = *(_OWORD *)(v74 + 168);
    *(_OWORD *)(*(_QWORD *)(v20 + ((v24 >> 5) & 0x7FFFFFFFFFFFFF8)) + 16 * v24) = v25;
    if (*((_QWORD *)&v25 + 1))
    {
      v26 = (unint64_t *)(*((_QWORD *)&v25 + 1) + 8);
      do
        v27 = __ldxr(v26);
      while (__stxr(v27 + 1, v26));
      v20 = a1[1];
      v13 = a1[2];
      v22 = a1[4];
      v23 = a1[5];
    }
    v28 = v23 + 1;
    a1[5] = v28;
    if (v13 == v20)
      v29 = 0;
    else
      v29 = 32 * (v13 - v20) - 1;
    v30 = v28 + v22;
    if (v29 == v28 + v22)
    {
      sub_23951DB34((uint64_t)a1);
      v20 = a1[1];
      v13 = a1[2];
      v22 = a1[4];
      v28 = a1[5];
      v30 = v28 + v22;
    }
    v31 = *(_OWORD *)(v74 + 152);
    *(_OWORD *)(*(_QWORD *)(v20 + ((v30 >> 5) & 0x7FFFFFFFFFFFFF8)) + 16 * v30) = v31;
    if (*((_QWORD *)&v31 + 1))
    {
      v32 = (unint64_t *)(*((_QWORD *)&v31 + 1) + 8);
      do
        v33 = __ldxr(v32);
      while (__stxr(v33 + 1, v32));
      v20 = a1[1];
      v13 = a1[2];
      v22 = a1[4];
      v28 = a1[5];
    }
    v34 = v28 + 1;
    a1[5] = v34;
    if (v13 == v20)
      v35 = 0;
    else
      v35 = 32 * (v13 - v20) - 1;
    v36 = v34 + v22;
    if (v35 == v34 + v22)
    {
      sub_23951DB34((uint64_t)a1);
      v20 = a1[1];
      v13 = a1[2];
      v22 = a1[4];
      v34 = a1[5];
      v36 = v34 + v22;
    }
    v37 = *(_OWORD *)(v74 + 136);
    *(_OWORD *)(*(_QWORD *)(v20 + ((v36 >> 5) & 0x7FFFFFFFFFFFFF8)) + 16 * v36) = v37;
    if (*((_QWORD *)&v37 + 1))
    {
      v38 = (unint64_t *)(*((_QWORD *)&v37 + 1) + 8);
      do
        v39 = __ldxr(v38);
      while (__stxr(v39 + 1, v38));
      v20 = a1[1];
      v13 = a1[2];
      v22 = a1[4];
      v34 = a1[5];
    }
    v40 = v34 + 1;
    a1[5] = v40;
    if (v13 == v20)
      v41 = 0;
    else
      v41 = 32 * (v13 - v20) - 1;
    v42 = v40 + v22;
    if (v41 == v40 + v22)
    {
      sub_23951DB34((uint64_t)a1);
      v20 = a1[1];
      v13 = a1[2];
      v22 = a1[4];
      v40 = a1[5];
      v42 = v40 + v22;
    }
    v43 = *(_OWORD *)(v74 + 120);
    *(_OWORD *)(*(_QWORD *)(v20 + ((v42 >> 5) & 0x7FFFFFFFFFFFFF8)) + 16 * v42) = v43;
    if (*((_QWORD *)&v43 + 1))
    {
      v44 = (unint64_t *)(*((_QWORD *)&v43 + 1) + 8);
      do
        v45 = __ldxr(v44);
      while (__stxr(v45 + 1, v44));
      v20 = a1[1];
      v13 = a1[2];
      v22 = a1[4];
      v40 = a1[5];
    }
    v46 = v40 + 1;
    a1[5] = v46;
    if (v13 == v20)
      v47 = 0;
    else
      v47 = 32 * (v13 - v20) - 1;
    v48 = v46 + v22;
    if (v47 == v46 + v22)
    {
      sub_23951DB34((uint64_t)a1);
      v20 = a1[1];
      v13 = a1[2];
      v22 = a1[4];
      v46 = a1[5];
      v48 = v46 + v22;
    }
    v49 = *(_OWORD *)(v74 + 104);
    *(_OWORD *)(*(_QWORD *)(v20 + ((v48 >> 5) & 0x7FFFFFFFFFFFFF8)) + 16 * v48) = v49;
    if (*((_QWORD *)&v49 + 1))
    {
      v50 = (unint64_t *)(*((_QWORD *)&v49 + 1) + 8);
      do
        v51 = __ldxr(v50);
      while (__stxr(v51 + 1, v50));
      v20 = a1[1];
      v13 = a1[2];
      v22 = a1[4];
      v46 = a1[5];
    }
    v52 = v46 + 1;
    a1[5] = v52;
    if (v13 == v20)
      v53 = 0;
    else
      v53 = 32 * (v13 - v20) - 1;
    v54 = v52 + v22;
    if (v53 == v52 + v22)
    {
      sub_23951DB34((uint64_t)a1);
      v20 = a1[1];
      v13 = a1[2];
      v22 = a1[4];
      v52 = a1[5];
      v54 = v52 + v22;
    }
    v55 = *(_OWORD *)(v74 + 88);
    *(_OWORD *)(*(_QWORD *)(v20 + ((v54 >> 5) & 0x7FFFFFFFFFFFFF8)) + 16 * v54) = v55;
    if (*((_QWORD *)&v55 + 1))
    {
      v56 = (unint64_t *)(*((_QWORD *)&v55 + 1) + 8);
      do
        v57 = __ldxr(v56);
      while (__stxr(v57 + 1, v56));
      v20 = a1[1];
      v13 = a1[2];
      v22 = a1[4];
      v52 = a1[5];
    }
    v58 = v52 + 1;
    a1[5] = v58;
    if (v13 == v20)
      v59 = 0;
    else
      v59 = 32 * (v13 - v20) - 1;
    v60 = v58 + v22;
    if (v59 == v58 + v22)
    {
      sub_23951DB34((uint64_t)a1);
      v20 = a1[1];
      v13 = a1[2];
      v22 = a1[4];
      v58 = a1[5];
      v60 = v58 + v22;
    }
    v61 = *(_OWORD *)(v74 + 72);
    *(_OWORD *)(*(_QWORD *)(v20 + ((v60 >> 5) & 0x7FFFFFFFFFFFFF8)) + 16 * v60) = v61;
    if (*((_QWORD *)&v61 + 1))
    {
      v62 = (unint64_t *)(*((_QWORD *)&v61 + 1) + 8);
      do
        v63 = __ldxr(v62);
      while (__stxr(v63 + 1, v62));
      v20 = a1[1];
      v13 = a1[2];
      v22 = a1[4];
      v58 = a1[5];
    }
    v64 = 32 * (v13 - v20) - 1;
    v16 = v13 == v20;
    v65 = v58 + 1;
    a1[5] = v58 + 1;
    if (v16)
      v66 = 0;
    else
      v66 = v64;
    v67 = v65 + v22;
    if (v66 == v67)
    {
      sub_23951DB34((uint64_t)a1);
      v20 = a1[1];
      v65 = a1[5];
      v67 = v65 + a1[4];
    }
    v68 = *(_OWORD *)(v74 + 56);
    *(_OWORD *)(*(_QWORD *)(v20 + ((v67 >> 5) & 0x7FFFFFFFFFFFFF8)) + 16 * v67) = v68;
    if (*((_QWORD *)&v68 + 1))
    {
      v69 = (unint64_t *)(*((_QWORD *)&v68 + 1) + 8);
      do
        v70 = __ldxr(v69);
      while (__stxr(v70 + 1, v69));
      v65 = a1[5];
    }
    a1[5] = v65 + 1;
  }
  if (!*((_QWORD *)&v74 + 1))
    return a1;
  v71 = (unint64_t *)(*((_QWORD *)&v74 + 1) + 8);
  do
    v72 = __ldaxr(v71);
  while (__stlxr(v72 - 1, v71));
  if (v72)
    return a1;
  (*(void (**)(_QWORD))(**((_QWORD **)&v74 + 1) + 16))(*((_QWORD *)&v74 + 1));
  std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v74 + 1));
  return a1;
}

void sub_23951D200(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_239416DA0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

float sub_23951D214(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  float *v3;
  float *v4;
  float *v5;
  float v6;
  float v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  _BYTE *v11;
  float *v12;
  uint64_t v13;
  unint64_t v14;
  float *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  _OWORD *v19;
  float *v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  float *v25;
  float v26;
  uint64_t v27;
  float *v28;
  float v29;
  uint64_t v30;
  float *v31;

  v1 = *a1;
  v2 = a1[1];
  if (*a1 == v2)
  {
    v29 = 0.0;
    return sqrtf(200.0 / v29);
  }
  v3 = 0;
  v4 = 0;
  v5 = 0;
  do
  {
    v6 = *(float *)(v1 + 48);
    if (v6 != 0.0)
    {
      v7 = 0.0 - v6;
      if (v6 >= 0.0)
        v7 = *(float *)(v1 + 48);
      if (v7 > 0.000001)
      {
        if (v3 < v4)
        {
          *v3++ = v6;
          goto LABEL_4;
        }
        v8 = v3 - v5;
        v9 = v8 + 1;
        if ((unint64_t)(v8 + 1) >> 62)
          sub_2394189F8();
        if (((char *)v4 - (char *)v5) >> 1 > v9)
          v9 = ((char *)v4 - (char *)v5) >> 1;
        if ((unint64_t)((char *)v4 - (char *)v5) >= 0x7FFFFFFFFFFFFFFCLL)
          v10 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v10 = v9;
        if (v10)
        {
          if (v10 >> 62)
            sub_239418A80();
          v11 = operator new(4 * v10);
          v12 = (float *)&v11[4 * v8];
          *v12 = v6;
          v13 = (uint64_t)(v12 + 1);
          if (v3 == v5)
            goto LABEL_24;
        }
        else
        {
          v11 = 0;
          v12 = (float *)(4 * v8);
          *(float *)(4 * v8) = v6;
          v13 = 4 * v8 + 4;
          if (v3 == v5)
            goto LABEL_24;
        }
        v14 = (char *)(v3 - 1) - (char *)v5;
        if (v14 >= 0xBC)
        {
          if (&v11[(char *)v3 - (char *)v5 - 4 - (v14 & 0xFFFFFFFFFFFFFFFCLL)] > &v11[(char *)v3 - (char *)v5 - 4])
          {
            v15 = v3;
          }
          else if ((float *)((char *)v3 - (v14 & 0xFFFFFFFFFFFFFFFCLL) - 4) > v3 - 1)
          {
            v15 = v3;
          }
          else if ((unint64_t)((char *)v5 - v11) >= 0x20)
          {
            v17 = (v14 >> 2) + 1;
            v18 = 4 * (v17 & 0x7FFFFFFFFFFFFFF8);
            v15 = &v3[v18 / 0xFFFFFFFFFFFFFFFCLL];
            v12 = (float *)((char *)v12 - v18);
            v19 = &v11[4 * v8 - 16];
            v20 = v3 - 4;
            v21 = v17 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v22 = *(_OWORD *)v20;
              *(v19 - 1) = *((_OWORD *)v20 - 1);
              *v19 = v22;
              v19 -= 2;
              v20 -= 8;
              v21 -= 8;
            }
            while (v21);
            if (v17 == (v17 & 0x7FFFFFFFFFFFFFF8))
              goto LABEL_24;
          }
          else
          {
            v15 = v3;
          }
        }
        else
        {
          v15 = v3;
        }
        do
        {
          v16 = *((_DWORD *)v15-- - 1);
          *((_DWORD *)v12-- - 1) = v16;
        }
        while (v15 != v5);
LABEL_24:
        v4 = (float *)&v11[4 * v10];
        if (v5)
          operator delete(v5);
        v3 = (float *)v13;
        v5 = v12;
      }
    }
LABEL_4:
    v1 += 56;
  }
  while (v1 != v2);
  v23 = (char *)v3 - (char *)v5;
  if (v3 == v5)
  {
    v29 = 0.0;
    if (v5)
      goto LABEL_50;
  }
  else
  {
    v24 = v23 << 29;
    if ((v23 & 4) != 0)
    {
      v30 = (v24 - 0x80000000) >> 32;
      v31 = &v5[v30];
      if (v31 != v3)
        sub_2394F1C6C(v5, &v5[v30], v3);
      v29 = *v31;
    }
    else
    {
      v25 = &v5[(int)(v23 >> 3)];
      if (v25 != v3)
        sub_2394F1C6C(v5, &v5[(int)(v23 >> 3)], v3);
      v26 = *v25;
      v27 = (v24 - 0x100000000) >> 32;
      v28 = &v5[v27];
      if (v28 != v3)
        sub_2394F1C6C(v5, &v5[v27], v3);
      v29 = (float)(v26 + *v28) * 0.5;
    }
LABEL_50:
    operator delete(v5);
  }
  return sqrtf(200.0 / v29);
}

void sub_23951D52C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  void *v11;

  if (v11)
    operator delete(v11);
  _Unwind_Resume(exception_object);
}

void sub_23951D564(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_250ADD610;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_23951D574(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_250ADD610;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x23B83E31CLL);
}

void sub_23951D5A4(_QWORD *a1)
{
  void *v2;

  sub_23951D724(a1 + 10);
  v2 = (void *)a1[3];
  if (v2)
  {
    a1[4] = v2;
    operator delete(v2);
  }
}

uint64_t sub_23951D5E4(uint64_t a1, uint64_t *a2, float a3)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v4 = *a2;
  *(_DWORD *)(a1 + 32) = *((_DWORD *)a2 + 2);
  *(_QWORD *)(a1 + 24) = v4;
  *(float *)(a1 + 36) = a3;
  *(_OWORD *)(a1 + 40) = xmmword_239EC6F50;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_QWORD *)(a1 + 184) = 0;
  v5 = *(std::__shared_weak_count **)(a1 + 144);
  if (!v5)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(p_shared_owners);
  while (__stlxr(v7 - 1, p_shared_owners));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    v8 = *(std::__shared_weak_count **)(a1 + 160);
    *(_QWORD *)(a1 + 152) = 0;
    *(_QWORD *)(a1 + 160) = 0;
    if (!v8)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v8 = *(std::__shared_weak_count **)(a1 + 160);
    *(_QWORD *)(a1 + 152) = 0;
    *(_QWORD *)(a1 + 160) = 0;
    if (!v8)
      goto LABEL_11;
  }
  v9 = (unint64_t *)&v8->__shared_owners_;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
LABEL_11:
  v11 = *(std::__shared_weak_count **)(a1 + 176);
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 176) = 0;
  if (!v11)
    return a1;
  v12 = (unint64_t *)&v11->__shared_owners_;
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 - 1, v12));
  if (v13)
    return a1;
  ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
  std::__shared_weak_count::__release_weak(v11);
  return a1;
}

_QWORD *sub_23951D724(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;

  v2 = (std::__shared_weak_count *)a1[15];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[13];
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[13];
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  v8 = (std::__shared_weak_count *)a1[11];
  if (!v8)
    goto LABEL_15;
  v9 = (unint64_t *)&v8->__shared_owners_;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    v11 = (std::__shared_weak_count *)a1[9];
    if (!v11)
      goto LABEL_21;
  }
  else
  {
LABEL_15:
    v11 = (std::__shared_weak_count *)a1[9];
    if (!v11)
      goto LABEL_21;
  }
  v12 = (unint64_t *)&v11->__shared_owners_;
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 - 1, v12));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
LABEL_21:
  v14 = (std::__shared_weak_count *)a1[7];
  if (!v14)
    goto LABEL_25;
  v15 = (unint64_t *)&v14->__shared_owners_;
  do
    v16 = __ldaxr(v15);
  while (__stlxr(v16 - 1, v15));
  if (!v16)
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
    v17 = (std::__shared_weak_count *)a1[5];
    if (!v17)
      goto LABEL_31;
  }
  else
  {
LABEL_25:
    v17 = (std::__shared_weak_count *)a1[5];
    if (!v17)
      goto LABEL_31;
  }
  v18 = (unint64_t *)&v17->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
LABEL_31:
  v20 = (std::__shared_weak_count *)a1[3];
  if (v20)
  {
    v21 = (unint64_t *)&v20->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
      v23 = (std::__shared_weak_count *)a1[1];
      if (v23)
        goto LABEL_36;
      return a1;
    }
  }
  v23 = (std::__shared_weak_count *)a1[1];
  if (!v23)
    return a1;
LABEL_36:
  v24 = (unint64_t *)&v23->__shared_owners_;
  do
    v25 = __ldaxr(v24);
  while (__stlxr(v25 - 1, v24));
  if (v25)
    return a1;
  ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
  std::__shared_weak_count::__release_weak(v23);
  return a1;
}

uint64_t sub_23951D944(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t *v36;
  unint64_t v37;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v4 = *a2;
  v5 = a2[1];
  v6 = v5 - *a2;
  if (v5 != *a2)
  {
    if (v6 < 0)
      sub_2394189F8();
    v7 = (char *)operator new(v5 - *a2);
    v8 = 0;
    *(_QWORD *)a1 = v7;
    *(_QWORD *)(a1 + 8) = v7;
    *(_QWORD *)(a1 + 16) = &v7[16 * (v6 >> 4)];
    do
    {
      v9 = v4 + v8;
      v10 = &v7[v8];
      v11 = *(_QWORD *)(v4 + v8);
      *((_DWORD *)v10 + 2) = *(_DWORD *)(v4 + v8 + 8);
      *(_QWORD *)v10 = v11;
      *((_DWORD *)v10 + 3) = *(_DWORD *)(v4 + v8 + 12);
      v8 += 16;
    }
    while (v9 + 16 != v5);
    *(_QWORD *)(a1 + 8) = &v7[v8];
  }
  v12 = a2[3];
  *(_DWORD *)(a1 + 32) = *((_DWORD *)a2 + 8);
  *(_QWORD *)(a1 + 24) = v12;
  v13 = *(_OWORD *)((char *)a2 + 36);
  *(_DWORD *)(a1 + 52) = *((_DWORD *)a2 + 13);
  *(_OWORD *)(a1 + 36) = v13;
  v14 = a2[8];
  *(_QWORD *)(a1 + 56) = a2[7];
  *(_QWORD *)(a1 + 64) = v14;
  if (v14)
  {
    v15 = (unint64_t *)(v14 + 8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  v17 = a2[10];
  *(_QWORD *)(a1 + 72) = a2[9];
  *(_QWORD *)(a1 + 80) = v17;
  if (v17)
  {
    v18 = (unint64_t *)(v17 + 8);
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  v20 = a2[12];
  *(_QWORD *)(a1 + 88) = a2[11];
  *(_QWORD *)(a1 + 96) = v20;
  if (v20)
  {
    v21 = (unint64_t *)(v20 + 8);
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }
  v23 = a2[14];
  *(_QWORD *)(a1 + 104) = a2[13];
  *(_QWORD *)(a1 + 112) = v23;
  if (v23)
  {
    v24 = (unint64_t *)(v23 + 8);
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 1, v24));
  }
  v26 = a2[16];
  *(_QWORD *)(a1 + 120) = a2[15];
  *(_QWORD *)(a1 + 128) = v26;
  if (v26)
  {
    v27 = (unint64_t *)(v26 + 8);
    do
      v28 = __ldxr(v27);
    while (__stxr(v28 + 1, v27));
  }
  v29 = a2[18];
  *(_QWORD *)(a1 + 136) = a2[17];
  *(_QWORD *)(a1 + 144) = v29;
  if (v29)
  {
    v30 = (unint64_t *)(v29 + 8);
    do
      v31 = __ldxr(v30);
    while (__stxr(v31 + 1, v30));
  }
  v32 = a2[20];
  *(_QWORD *)(a1 + 152) = a2[19];
  *(_QWORD *)(a1 + 160) = v32;
  if (v32)
  {
    v33 = (unint64_t *)(v32 + 8);
    do
      v34 = __ldxr(v33);
    while (__stxr(v34 + 1, v33));
  }
  v35 = a2[22];
  *(_QWORD *)(a1 + 168) = a2[21];
  *(_QWORD *)(a1 + 176) = v35;
  if (v35)
  {
    v36 = (unint64_t *)(v35 + 8);
    do
      v37 = __ldxr(v36);
    while (__stxr(v37 + 1, v36));
  }
  *(_QWORD *)(a1 + 184) = a2[23];
  return a1;
}

void sub_23951DB18(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_23951DB34(uint64_t a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  char *v5;
  _QWORD *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  void *v26;
  char *v27;
  char *v28;
  char *v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  char *v36;
  BOOL v37;
  int64_t v38;
  unint64_t v39;
  char *v40;
  _QWORD *v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  int64_t v45;
  unint64_t v46;
  char *v47;
  unint64_t v48;
  char *v49;
  uint64_t v50;
  char *v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  char *v57;
  size_t v58;
  unint64_t v59;
  char *v60;
  unint64_t v61;
  int64_t v62;
  unint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  __int128 *v69;
  char *v70;
  uint64_t v71;
  __int128 v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  __int128 *v77;
  _OWORD *v78;
  uint64_t v79;
  __int128 v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  __int128 *v85;
  _OWORD *v86;
  uint64_t v87;
  __int128 v88;
  uint64_t v89;
  void *v90;
  void *v91;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = v2 >= 0x100;
  v4 = v2 - 256;
  if (v3)
  {
    *(_QWORD *)(a1 + 32) = v4;
    v6 = *(_QWORD **)(a1 + 8);
    v5 = *(char **)(a1 + 16);
    v7 = (char *)(v6 + 1);
    v8 = *v6;
    *(_QWORD *)(a1 + 8) = v6 + 1;
    if (v5 != *(char **)(a1 + 24))
    {
LABEL_78:
      *(_QWORD *)v5 = v8;
      *(_QWORD *)(a1 + 16) += 8;
      return;
    }
    v9 = *(char **)a1;
    v10 = (uint64_t)&v7[-*(_QWORD *)a1];
    if ((unint64_t)v7 <= *(_QWORD *)a1)
    {
      v31 = (v5 - v9) >> 2;
      if (v5 == v9)
        v31 = 1;
      if (!(v31 >> 61))
      {
        v32 = v31 >> 2;
        v33 = 8 * v31;
        v34 = (char *)operator new(8 * v31);
        v35 = &v34[8 * v32];
        v36 = &v34[v33];
        v38 = v5 - v7;
        v37 = v5 == v7;
        v5 = v35;
        if (!v37)
        {
          v5 = &v35[v38 & 0xFFFFFFFFFFFFFFF8];
          v39 = v38 - 8;
          if ((unint64_t)(v38 - 8) >= 0x38)
          {
            v74 = &v34[8 * v32];
            v40 = v74;
            if ((unint64_t)(v74 - v7) >= 0x20)
            {
              v75 = (v39 >> 3) + 1;
              v76 = 8 * (v75 & 0x3FFFFFFFFFFFFFFCLL);
              v40 = &v35[v76];
              v7 += v76;
              v77 = (__int128 *)(v6 + 3);
              v78 = v74 + 16;
              v79 = v75 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v80 = *v77;
                *(v78 - 1) = *(v77 - 1);
                *v78 = v80;
                v77 += 2;
                v78 += 2;
                v79 -= 4;
              }
              while (v79);
              if (v75 == (v75 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_76;
            }
          }
          else
          {
            v40 = &v34[8 * v32];
          }
          do
          {
            v81 = *(_QWORD *)v7;
            v7 += 8;
            *(_QWORD *)v40 = v81;
            v40 += 8;
          }
          while (v40 != v5);
        }
        goto LABEL_76;
      }
LABEL_87:
      sub_239418A80();
    }
LABEL_5:
    v11 = v10 >> 3;
    if (v11 >= -1)
      v12 = v11 + 1;
    else
      v12 = v11 + 2;
    v13 = v12 >> 1;
    v14 = -v13;
    v15 = &v7[-8 * v13];
    v16 = v5 - v7;
    if (v5 != v7)
    {
      memmove(&v7[-8 * v13], v7, v5 - v7);
      v7 = *(char **)(a1 + 8);
    }
    v5 = &v15[v16];
    *(_QWORD *)(a1 + 8) = &v7[8 * v14];
    *(_QWORD *)(a1 + 16) = &v15[v16];
    goto LABEL_78;
  }
  v18 = *(_QWORD *)(a1 + 16);
  v17 = *(_QWORD *)(a1 + 24);
  v19 = *(_QWORD *)(a1 + 8);
  v20 = v18 - v19;
  v21 = (v18 - v19) >> 3;
  v22 = v17 - *(_QWORD *)a1;
  if (v21 < (unint64_t)(v22 >> 3))
  {
    if (v17 != v18)
    {
      v91 = operator new(0x1000uLL);
      sub_23946CE0C((char **)a1, &v91);
      return;
    }
    v91 = operator new(0x1000uLL);
    sub_23946CF98((void **)a1, &v91);
    v41 = *(_QWORD **)(a1 + 8);
    v5 = *(char **)(a1 + 16);
    v7 = (char *)(v41 + 1);
    v8 = *v41;
    *(_QWORD *)(a1 + 8) = v41 + 1;
    if (v5 != *(char **)(a1 + 24))
      goto LABEL_78;
    v9 = *(char **)a1;
    v10 = (uint64_t)&v7[-*(_QWORD *)a1];
    if ((unint64_t)v7 <= *(_QWORD *)a1)
    {
      v42 = (v5 - v9) >> 2;
      if (v5 == v9)
        v42 = 1;
      if (!(v42 >> 61))
      {
        v43 = v42 >> 2;
        v44 = 8 * v42;
        v34 = (char *)operator new(8 * v42);
        v35 = &v34[8 * v43];
        v36 = &v34[v44];
        v45 = v5 - v7;
        v37 = v5 == v7;
        v5 = v35;
        if (!v37)
        {
          v5 = &v35[v45 & 0xFFFFFFFFFFFFFFF8];
          v46 = v45 - 8;
          if ((unint64_t)(v45 - 8) >= 0x38)
          {
            v82 = &v34[8 * v43];
            v47 = v82;
            if ((unint64_t)(v82 - v7) >= 0x20)
            {
              v83 = (v46 >> 3) + 1;
              v84 = 8 * (v83 & 0x3FFFFFFFFFFFFFFCLL);
              v47 = &v35[v84];
              v7 += v84;
              v85 = (__int128 *)(v41 + 3);
              v86 = v82 + 16;
              v87 = v83 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v88 = *v85;
                *(v86 - 1) = *(v85 - 1);
                *v86 = v88;
                v85 += 2;
                v86 += 2;
                v87 -= 4;
              }
              while (v87);
              if (v83 == (v83 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_76;
            }
          }
          else
          {
            v47 = &v34[8 * v43];
          }
          do
          {
            v89 = *(_QWORD *)v7;
            v7 += 8;
            *(_QWORD *)v47 = v89;
            v47 += 8;
          }
          while (v47 != v5);
        }
LABEL_76:
        *(_QWORD *)a1 = v34;
        *(_QWORD *)(a1 + 8) = v35;
        *(_QWORD *)(a1 + 16) = v5;
        *(_QWORD *)(a1 + 24) = v36;
        if (v9)
        {
          operator delete(v9);
          v5 = *(char **)(a1 + 16);
        }
        goto LABEL_78;
      }
      goto LABEL_87;
    }
    goto LABEL_5;
  }
  v23 = v22 >> 2;
  if (v17 == *(_QWORD *)a1)
    v24 = 1;
  else
    v24 = v23;
  if (v24 >> 61)
    goto LABEL_87;
  v25 = (char *)operator new(8 * v24);
  v26 = operator new(0x1000uLL);
  v27 = &v25[8 * v21];
  v28 = &v25[8 * v24];
  if (v21 == v24)
  {
    v90 = v26;
    if (v20 < 1)
    {
      if (v18 == v19)
        v48 = 1;
      else
        v48 = v20 >> 2;
      if (v48 >> 61)
        sub_239418A80();
      v49 = (char *)operator new(8 * v48);
      v27 = &v49[8 * (v48 >> 2)];
      v28 = &v49[8 * v48];
      operator delete(v25);
      v50 = *(_QWORD *)(a1 + 8);
      v18 = *(_QWORD *)(a1 + 16);
      v25 = v49;
      *(_QWORD *)v27 = v90;
      v29 = v27 + 8;
      if (v18 == v50)
        goto LABEL_45;
    }
    else
    {
      v30 = v21 + 2;
      if (v21 >= -1)
        v30 = v21 + 1;
      v27 -= 8 * (v30 >> 1);
      *(_QWORD *)v27 = v26;
      v29 = v27 + 8;
      if (v18 == v19)
        goto LABEL_45;
    }
    do
    {
LABEL_50:
      if (v27 == v25)
      {
        if (v29 >= v28)
        {
          if (v28 == v27)
            v59 = 1;
          else
            v59 = (v28 - v27) >> 2;
          if (v59 >> 61)
            sub_239418A80();
          v60 = (char *)operator new(8 * v59);
          v25 = v60;
          v61 = (v59 + 3) >> 2;
          v53 = &v60[8 * v61];
          v62 = v29 - v27;
          v37 = v29 == v27;
          v29 = v53;
          if (!v37)
          {
            v29 = &v53[v62 & 0xFFFFFFFFFFFFFFF8];
            v63 = v62 - 8;
            v64 = &v60[8 * v61];
            v65 = v27;
            if (v63 < 0x38)
              goto LABEL_91;
            v66 = 8 * v61;
            v64 = &v60[8 * v61];
            v65 = v27;
            if ((unint64_t)(v64 - v27) < 0x20)
              goto LABEL_91;
            v67 = (v63 >> 3) + 1;
            v68 = 8 * (v67 & 0x3FFFFFFFFFFFFFFCLL);
            v64 = &v53[v68];
            v65 = &v27[v68];
            v69 = (__int128 *)(v27 + 16);
            v70 = &v60[v66 + 16];
            v71 = v67 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v72 = *v69;
              *((_OWORD *)v70 - 1) = *(v69 - 1);
              *(_OWORD *)v70 = v72;
              v69 += 2;
              v70 += 32;
              v71 -= 4;
            }
            while (v71);
            if (v67 != (v67 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_91:
              do
              {
                v73 = *(_QWORD *)v65;
                v65 += 8;
                *(_QWORD *)v64 = v73;
                v64 += 8;
              }
              while (v64 != v29);
            }
          }
          v28 = &v60[8 * v59];
          operator delete(v27);
        }
        else
        {
          v55 = (v28 - v29) >> 3;
          if (v55 >= -1)
            v56 = v55 + 1;
          else
            v56 = v55 + 2;
          v57 = &v29[8 * (v56 >> 1)];
          v53 = &v57[-(v29 - v27)];
          v58 = v29 - v27;
          v37 = v29 == v27;
          v29 = v57;
          if (!v37)
            memmove(v53, v27, v58);
          v25 = v27;
        }
      }
      else
      {
        v53 = v27;
      }
      v54 = *(_QWORD *)(v18 - 8);
      v18 -= 8;
      *((_QWORD *)v53 - 1) = v54;
      v51 = v53 - 8;
      v27 = v51;
    }
    while (v18 != *(_QWORD *)(a1 + 8));
    goto LABEL_46;
  }
  *(_QWORD *)v27 = v26;
  v29 = v27 + 8;
  if (v18 != v19)
    goto LABEL_50;
LABEL_45:
  v51 = v27;
LABEL_46:
  v52 = *(char **)a1;
  *(_QWORD *)a1 = v25;
  *(_QWORD *)(a1 + 8) = v51;
  *(_QWORD *)(a1 + 16) = v29;
  *(_QWORD *)(a1 + 24) = v28;
  if (v52)
    operator delete(v52);
}

void sub_23951E090(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p)
{
  void *v9;

  operator delete(__p);
  operator delete(v9);
  _Unwind_Resume(a1);
}

void sub_23951E0AC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_23951E0C0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_23951E0D8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_OWORD *sub_23951E0F0(uint64_t a1, __int128 *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v9;
  char *v10;
  char *v11;
  __int128 v12;
  unint64_t *v13;
  unint64_t v14;
  char *v15;
  _OWORD *v16;
  __int128 v17;
  _QWORD *v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;

  v3 = *(_QWORD **)a1;
  v4 = *(_QWORD **)(a1 + 8);
  v5 = ((uint64_t)v4 - *(_QWORD *)a1) >> 4;
  v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) >> 60)
    sub_2394189F8();
  v7 = *(_QWORD *)(a1 + 16) - (_QWORD)v3;
  if (v7 >> 3 > v6)
    v6 = v7 >> 3;
  if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFF0)
    v6 = 0xFFFFFFFFFFFFFFFLL;
  if (v6 >> 60)
    sub_239418A80();
  v9 = 16 * v6;
  v10 = (char *)operator new(16 * v6);
  v11 = &v10[16 * v5];
  v12 = *a2;
  *(_OWORD *)v11 = *a2;
  if (*((_QWORD *)&v12 + 1))
  {
    v13 = (unint64_t *)(*((_QWORD *)&v12 + 1) + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
    v3 = *(_QWORD **)a1;
    v4 = *(_QWORD **)(a1 + 8);
  }
  v15 = &v10[v9];
  v16 = v11 + 16;
  if (v4 == v3)
  {
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v16;
    *(_QWORD *)(a1 + 16) = v15;
    if (!v3)
      return v16;
    goto LABEL_23;
  }
  do
  {
    v17 = *((_OWORD *)v4 - 1);
    v4 -= 2;
    *((_OWORD *)v11 - 1) = v17;
    v11 -= 16;
    *v4 = 0;
    v4[1] = 0;
  }
  while (v4 != v3);
  v18 = *(_QWORD **)a1;
  v3 = *(_QWORD **)(a1 + 8);
  *(_QWORD *)a1 = v11;
  *(_QWORD *)(a1 + 8) = v16;
  *(_QWORD *)(a1 + 16) = v15;
  if (v3 != v18)
  {
    do
    {
      v19 = (std::__shared_weak_count *)*(v3 - 1);
      if (v19)
      {
        p_shared_owners = (unint64_t *)&v19->__shared_owners_;
        do
          v21 = __ldaxr(p_shared_owners);
        while (__stlxr(v21 - 1, p_shared_owners));
        if (!v21)
        {
          ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
          std::__shared_weak_count::__release_weak(v19);
        }
      }
      v3 -= 2;
    }
    while (v3 != v18);
    v3 = v18;
  }
  if (v3)
LABEL_23:
    operator delete(v3);
  return v16;
}

void sub_23951E254()
{
  JUMPOUT(0x23B83E31CLL);
}

__n128 sub_23951E268(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x60uLL);
  *(_QWORD *)v2 = &off_250ADD648;
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(v2 + 56) = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(v2 + 72) = *(_OWORD *)(a1 + 72);
  *((_QWORD *)v2 + 11) = *(_QWORD *)(a1 + 88);
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_23951E2C8(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __n128 result;
  __int128 v4;
  __int128 v5;

  *(_QWORD *)a2 = &off_250ADD648;
  v2 = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  result = *(__n128 *)(a1 + 40);
  v4 = *(_OWORD *)(a1 + 56);
  v5 = *(_OWORD *)(a1 + 72);
  *(_QWORD *)(a2 + 88) = *(_QWORD *)(a1 + 88);
  *(_OWORD *)(a2 + 72) = v5;
  *(_OWORD *)(a2 + 56) = v4;
  *(__n128 *)(a2 + 40) = result;
  return result;
}

uint64_t sub_23951E310(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  os_unfair_lock_s *v5;
  uint64_t v6;
  void *v7;
  char *v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  unint64_t *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t *v15;
  _QWORD *v16;
  size_t prime;
  uint64_t v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int *v21;
  size_t v22;
  unint64_t v23;
  int8x8_t v24;
  BOOL v25;
  void *v26;
  BOOL v27;
  int8x8_t v28;
  unint64_t v29;
  uint8x8_t v30;
  uint64_t v31;
  unint64_t v32;
  uint8x8_t v33;
  uint64_t v34;
  unint64_t v35;
  uint8x8_t v36;
  uint64_t v37;
  uint64_t *v38;
  int v39;
  int v40;
  uint64_t v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *p_shared_owners;
  unint64_t v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unsigned int *v52;
  _QWORD *v53;
  _QWORD *v54;
  _QWORD *v55;
  unsigned int v56;
  unsigned int v57;
  _QWORD *v58;
  _QWORD *v59;
  BOOL v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  float v64;
  float v65;
  unint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t v68;
  unsigned int *v69;
  uint64_t v70;
  int *v71;
  uint64_t v72;
  float v73;
  uint64_t v74;
  float **v75;
  float *v76;
  int *v77;
  float v78;
  float v79;
  float v80;
  float v81;
  unsigned int *v82;
  int v83;
  uint64_t v84;
  unsigned int v85;
  _QWORD *v86;
  _QWORD *v87;
  void *v88;
  _QWORD *v89;
  _QWORD *v90;
  void *v91;
  unint64_t v92;
  size_t v94;
  void **v95;
  uint64_t v96;
  uint64_t v97;
  unsigned int *v98;
  unint64_t v99;
  uint64_t v100;
  _QWORD *v101;
  unint64_t v102;
  unint64_t v103;
  uint64_t *v104;
  unint64_t v105;
  char *v106;
  char *v107;
  void *v108;
  char *v109;
  unint64_t v110;
  std::__shared_weak_count *v111;
  unint64_t *v112;
  unint64_t v113;
  unint64_t v114;
  std::__shared_weak_count *v115;
  unint64_t *v116;
  unint64_t v117;
  uint64_t v118;
  uint64_t v119;
  unsigned int *v120;
  std::__shared_weak_count *v121;
  std::__shared_weak_count *v122;
  std::__shared_weak_count_vtbl *v123;
  int on_zero_shared_weak;
  int on_zero_shared_weak_high;
  uint64_t *v126;
  uint64_t *on_zero_shared;
  unint64_t v128;
  uint64_t v129;
  uint64_t v130;
  float v131;
  float v132;
  uint64_t *v133;
  float v134;
  uint64_t v135;
  float v136;
  _OWORD *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  _OWORD *v141;
  _OWORD *v142;
  __int128 v143;
  uint64_t v144;
  uint64_t v145;
  float v146;
  float v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  __int128 *v151;
  __int128 v152;
  _OWORD *v153;
  float v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  _OWORD *v158;
  _OWORD *v159;
  __int128 v160;
  float v161;
  float v162;
  float v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  _OWORD *v167;
  _OWORD *v168;
  __int128 v169;
  float v170;
  float v171;
  float v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  _OWORD *v176;
  _OWORD *v177;
  __int128 v178;
  float v179;
  float v180;
  float v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  _OWORD *v185;
  _OWORD *v186;
  __int128 v187;
  float v188;
  float v189;
  float v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  _OWORD *v194;
  _OWORD *v195;
  __int128 v196;
  float v197;
  float v198;
  float v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  _OWORD *v203;
  _OWORD *v204;
  __int128 v205;
  float v206;
  float v207;
  float v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  _OWORD *v212;
  _OWORD *v213;
  __int128 v214;
  float v215;
  float v216;
  float v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  _OWORD *v221;
  _OWORD *v222;
  __int128 v223;
  float v224;
  float v225;
  float v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  _OWORD *v230;
  _OWORD *v231;
  __int128 v232;
  float v233;
  unint64_t v234;
  unsigned int *v235;
  uint64_t v236;
  int *v237;
  uint64_t v238;
  float v239;
  uint64_t v240;
  float **v241;
  float *v242;
  int *v243;
  float v244;
  float v245;
  float v246;
  float v247;
  uint64_t v248;
  unsigned int *v249;
  uint64_t v250;
  int8x8_t v251;
  uint64_t shared_weak_owners;
  uint8x8_t v253;
  uint64_t v254;
  unint64_t v255;
  uint64_t *v256;
  unint64_t v257;
  std::__shared_weak_count *v258;
  std::__shared_weak_count *v259;
  void *v260;
  std::__shared_weak_count *v261;
  int v262;
  size_t __sz;
  void *v264;
  char *v265;
  uint64_t v266;
  _QWORD *v267;
  void *v268;
  std::__shared_weak_count *v269;
  char *v270;
  unsigned int v271;
  void *v272;
  std::__shared_weak_count *v273;
  uint64_t v274;
  void *v275;
  std::__shared_weak_count *v276;
  uint64_t *v277;
  std::__shared_weak_count *v278;
  void *v279[2];
  void *v280[2];
  float v281;
  __int128 v282;
  __int128 v283;
  float v284;
  void *v285;
  void *v286;
  uint64_t v287;
  _QWORD v288[4];
  void *v289;
  _QWORD *v290;
  uint64_t v291;
  void **v292;
  void *__p[2];
  char v294;
  unint64_t v295;
  unint64_t v296;
  uint64_t v297;
  char v298;
  uint64_t v299;
  char v300;
  uint64_t v301;

  v301 = *MEMORY[0x24BDAC8D0];
  v3 = *a2;
  v4 = *(_QWORD *)(a1 + 8);
  v294 = 0;
  LOBYTE(__p[0]) = 0;
  sub_2396FD394(v288, v4, (__int128 *)__p);
  if (v294 < 0)
    operator delete(__p[0]);
  if ((sub_2396FD7B0(*(_QWORD *)(a1 + 16)) & 1) == 0)
  {
    v5 = *(os_unfair_lock_s **)(a1 + 24);
    sub_2397A15E8(v5);
    ++**(_DWORD **)(a1 + 32);
    sub_2397A1600(v5);
    v266 = a1;
    v6 = **(_QWORD **)(a1 + 40);
    v285 = 0;
    v286 = 0;
    v287 = 0;
    sub_23951FF18(*(uint64_t **)(v6 + 16 * v3), (uint64_t)&v285);
    v8 = (char *)v285;
    v7 = v286;
    v9 = (_BYTE *)v286 - (_BYTE *)v285;
    if (v286 == v285)
    {
LABEL_126:
      if (v7)
      {
        v286 = v7;
        operator delete(v7);
      }
      return sub_2396FD3E8((uint64_t)v288);
    }
    v262 = v3;
    v10 = (char *)operator new(0x80uLL);
    __sz = v9;
    v11 = v9 >> 2;
    *((_QWORD *)v10 + 1) = 0;
    v12 = (unint64_t *)(v10 + 8);
    *((_QWORD *)v10 + 2) = 0;
    *(_QWORD *)v10 = &off_250ADD690;
    *((_QWORD *)v10 + 3) = 0x3F800000447A0000;
    v264 = v10 + 24;
    v265 = v10;
    *(_OWORD *)(v10 + 40) = 0u;
    v13 = (uint64_t)(v10 + 40);
    *(_OWORD *)(v10 + 56) = 0u;
    *(_OWORD *)(v10 + 72) = 0u;
    *(_OWORD *)(v10 + 104) = 0u;
    *(_OWORD *)(v10 + 88) = 0u;
    v14 = v10 + 88;
    *((_DWORD *)v10 + 30) = 1065353216;
    v15 = *(uint64_t **)(v266 + 56);
    *((_DWORD *)v10 + 7) = **(_DWORD **)(v266 + 48);
    *((_QWORD *)v10 + 4) = v15;
    v16 = v10 + 64;
    sub_23942156C((_QWORD *)v10 + 8, v8, (char *)v7, v11);
    sub_23941C5D8(v13, v11, 0);
    v282 = 0u;
    v283 = 0u;
    v284 = 1.0;
    prime = (unint64_t)(float)v11;
    if (prime == 1)
    {
      prime = 2;
    }
    else
    {
      if ((prime & (prime - 1)) != 0)
      {
        prime = std::__next_prime((unint64_t)(float)v11);
        v24 = *(int8x8_t *)((char *)&v282 + 8);
        v25 = prime >= *((_QWORD *)&v282 + 1);
        if (prime > *((_QWORD *)&v282 + 1))
          goto LABEL_7;
      }
      else
      {
        v24 = 0;
        v25 = 1;
        if (prime)
          goto LABEL_7;
      }
      if (v25)
        goto LABEL_8;
      v32 = vcvtps_u32_f32((float)*((unint64_t *)&v283 + 1) / v284);
      if (*(_QWORD *)&v24 < 3uLL || (v33 = (uint8x8_t)vcnt_s8(v24), v33.i16[0] = vaddlv_u8(v33), v33.u32[0] > 1uLL))
      {
        v32 = std::__next_prime(v32);
      }
      else
      {
        v34 = 1 << -(char)__clz(v32 - 1);
        if (v32 >= 2)
          v32 = v34;
      }
      if (prime <= v32)
        prime = v32;
      if (prime >= *(_QWORD *)&v24)
      {
LABEL_8:
        v267 = (_QWORD *)v13;
        v18 = 0;
        do
        {
          v19 = *v15 + 56 * *(unsigned int *)(*v16 + 4 * v18);
          v21 = *(unsigned int **)v19;
          v20 = *(unsigned int **)(v19 + 8);
          if (*(unsigned int **)v19 != v20)
          {
            do
            {
              sub_239456168((uint64_t)&v282, v21, v21);
              v21 += 2;
            }
            while (v21 != v20);
          }
          ++v18;
        }
        while (v18 != v11);
        *(_OWORD *)v279 = 0u;
        *(_OWORD *)v280 = 0u;
        v281 = 1.0;
        LODWORD(v289) = 0;
        v22 = (unint64_t)(float)*((unint64_t *)&v283 + 1);
        if (v22 == 1)
        {
          v22 = 2;
        }
        else
        {
          if ((v22 & (v22 - 1)) != 0)
          {
            v22 = std::__next_prime((unint64_t)(float)*((unint64_t *)&v283 + 1));
            v26 = v279[1];
            v27 = (void *)v22 >= v279[1];
            if ((void *)v22 > v279[1])
              goto LABEL_14;
          }
          else
          {
            v26 = 0;
            v27 = 1;
            if (v22)
              goto LABEL_14;
          }
          if (v27)
            goto LABEL_15;
          v35 = vcvtps_u32_f32((float)(unint64_t)v280[1] / v281);
          if ((unint64_t)v26 < 3
            || (v36 = (uint8x8_t)vcnt_s8((int8x8_t)v26), v36.i16[0] = vaddlv_u8(v36), v36.u32[0] > 1uLL))
          {
            v35 = std::__next_prime(v35);
          }
          else
          {
            v37 = 1 << -(char)__clz(v35 - 1);
            if (v35 >= 2)
              v35 = v37;
          }
          if (v22 <= v35)
            v22 = v35;
          if (v22 >= (unint64_t)v26)
          {
LABEL_15:
            v23 = vcvtps_u32_f32((float)*((unint64_t *)&v283 + 1) / *((float *)v265 + 30));
            if (v23 == 1)
            {
              v23 = 2;
            }
            else if ((v23 & (v23 - 1)) != 0)
            {
              v23 = std::__next_prime(v23);
            }
            v28 = *(int8x8_t *)(v265 + 96);
            if (v23 > *(_QWORD *)&v28)
              goto LABEL_26;
            if (v23 < *(_QWORD *)&v28)
            {
              v29 = vcvtps_u32_f32((float)*((unint64_t *)v265 + 14) / *((float *)v265 + 30));
              if (*(_QWORD *)&v28 < 3uLL
                || (v30 = (uint8x8_t)vcnt_s8(v28), v30.i16[0] = vaddlv_u8(v30), v30.u32[0] > 1uLL))
              {
                v29 = std::__next_prime(v29);
              }
              else
              {
                v31 = 1 << -(char)__clz(v29 - 1);
                if (v29 >= 2)
                  v29 = v31;
              }
              if (v23 <= v29)
                v23 = v29;
              if (v23 < *(_QWORD *)&v28)
LABEL_26:
                sub_239427FE0((uint64_t)v14, v23);
            }
            v38 = (uint64_t *)v283;
            if ((_QWORD)v283)
            {
              v39 = (int)v289;
              do
              {
                LODWORD(v272) = *((_DWORD *)v38 + 4);
                __p[0] = &v272;
                *((_DWORD *)sub_2394F126C((uint64_t)v279, (unsigned int *)&v272, (uint64_t)&unk_239EC6E98, (_DWORD **)__p)
                + 5) = v39;
                v40 = (int)v272;
                __p[0] = &v289;
                *((_DWORD *)sub_2394F126C((uint64_t)v14, (unsigned int *)&v289, (uint64_t)&unk_239EC6E98, (_DWORD **)__p)
                + 5) = v40;
                v39 = (_DWORD)v289 + 1;
                LODWORD(v289) = (_DWORD)v289 + 1;
                v38 = (uint64_t *)*v38;
              }
              while (v38);
            }
            v41 = *((_QWORD *)&v283 + 1);
            if (!*((_QWORD *)&v283 + 1))
            {
              v82 = (unsigned int *)v285;
              v67 = (std::__shared_weak_count *)v265;
              v83 = **(_DWORD **)(v266 + 72);
              v84 = **(_QWORD **)(v266 + 64);
              do
              {
                v85 = *v82++;
                *(_DWORD *)(v84 + 4 * v85) = v83;
                --v11;
              }
              while (v11);
              v86 = v280[0];
              if (!v280[0])
                goto LABEL_116;
              goto LABEL_115;
            }
            if (*(_BYTE *)(*(_QWORD *)(v266 + 80) + 11))
            {
              sub_2396F83B0(__p, __sz >> 2, *((_QWORD *)&v283 + 1));
              v272 = v264;
              v273 = (std::__shared_weak_count *)v265;
              do
                v42 = __ldxr(v12);
              while (__stxr(v42 + 1, v12));
              sub_239520018((uint64_t)__p, (uint64_t)sub_23951B3E4, v262, (uint64_t *)&v272);
              v43 = v273;
              if (v273)
              {
                p_shared_owners = (unint64_t *)&v273->__shared_owners_;
                do
                  v45 = __ldaxr(p_shared_owners);
                while (__stlxr(v45 - 1, p_shared_owners));
                if (!v45)
                {
                  ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
                  std::__shared_weak_count::__release_weak(v43);
                }
              }
              v268 = v264;
              v269 = (std::__shared_weak_count *)v265;
              do
                v46 = __ldxr(v12);
              while (__stxr(v46 + 1, v12));
              sub_239520250((uint64_t)__p, (uint64_t)sub_23951B588, v262, (uint64_t *)&v268);
              v47 = v269;
              if (v269)
              {
                v48 = (unint64_t *)&v269->__shared_owners_;
                do
                  v49 = __ldaxr(v48);
                while (__stlxr(v49 - 1, v48));
                if (!v49)
                {
                  ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
                  std::__shared_weak_count::__release_weak(v47);
                }
              }
              v290 = 0;
              v291 = 0;
              v289 = 0;
              v50 = *(_QWORD *)(*(_QWORD *)(v266 + 88) + 8) - **(_QWORD **)(v266 + 88);
              if (v50)
                sub_239520580(&v289, 0xAAAAAAAAAAAAAAABLL * (v50 >> 2));
              v51 = 0;
              do
              {
                v52 = (unsigned int *)(*(_QWORD *)(*(_QWORD *)(v266 + 88) + 24) + 12 * *((unsigned int *)v285 + v51));
                sub_2396BFBB0(*v52, v52[1], v51, &v289);
                sub_2396BFBB0(*v52, v52[2], v51, &v289);
                sub_2396BFBB0(v52[1], v52[2], v51++, &v289);
              }
              while (v11 != v51);
              v53 = v289;
              v54 = v290;
              while (v53 != v54)
              {
                v55 = (_QWORD *)*v53;
                if ((_QWORD *)*v53 != v53 + 1)
                {
                  do
                  {
                    v56 = *((_DWORD *)v55 + 8);
                    if (v56 != -1)
                    {
                      v57 = *((_DWORD *)v55 + 9);
                      if (v57 != -1)
                        sub_2396F94CC((uint64_t)__p, v56, v57);
                    }
                    v58 = (_QWORD *)v55[1];
                    if (v58)
                    {
                      do
                      {
                        v59 = v58;
                        v58 = (_QWORD *)*v58;
                      }
                      while (v58);
                    }
                    else
                    {
                      do
                      {
                        v59 = (_QWORD *)v55[2];
                        v60 = *v59 == (_QWORD)v55;
                        v55 = v59;
                      }
                      while (!v60);
                    }
                    v55 = v59;
                  }
                  while (v59 != v53 + 1);
                }
                v53 += 3;
              }
              v61 = 0;
              while (1)
              {
                while (1)
                {
                  v63 = *(_QWORD *)(*v15 + 56 * *(unsigned int *)(*v16 + 4 * v61));
                  v62 = *(_QWORD *)(*v15 + 56 * *(unsigned int *)(*v16 + 4 * v61) + 8);
                  if (v62 == v63)
                    break;
                  LODWORD(v275) = 0;
                  LODWORD(v275) = *(_DWORD *)v63;
                  v64 = 0.0;
                  do
                  {
                    v65 = *(float *)(v63 + 4);
                    if (v65 > v64)
                    {
                      LODWORD(v275) = *(_DWORD *)v63;
                      v64 = v65;
                    }
                    v63 += 8;
                  }
                  while (v63 != v62);
                  v277 = (uint64_t *)&v275;
                  v66 = *((unsigned int *)sub_2394F126C((uint64_t)v279, (unsigned int *)&v275, (uint64_t)&unk_239EC6E98, (_DWORD **)&v277)+ 5);
                  if (v295 <= v66)
                  {
                    v144 = 141;
                    goto LABEL_216;
                  }
                  if (v296 <= v61)
                  {
                    v144 = 142;
LABEL_216:
                    sub_239A444D4((uint64_t)"unknown file", v144, (uint64_t)"", (void (*)(void *))sub_239A4463C);
                    sub_239A4475C();
                    abort();
                  }
                  *(_DWORD *)(v297 + 4 * v61) = v66;
                  v300 = 1;
                  if (++v61 == v11)
                    goto LABEL_102;
                }
                *(_QWORD *)(*v267 + ((v61 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v61;
                if (!v295)
                  break;
                if (v296 <= v61)
                {
                  v145 = 142;
LABEL_220:
                  sub_239A444D4((uint64_t)"unknown file", v145, (uint64_t)"", (void (*)(void *))sub_239A4463C);
                  sub_239A4475C();
                  abort();
                }
                *(_DWORD *)(v297 + 4 * v61) = 0;
                v300 = 1;
                if (++v61 == v11)
                {
LABEL_102:
                  v67 = (std::__shared_weak_count *)v265;
                  if (fabsf(sub_2396F8694((uint64_t)__p)) == INFINITY)
                  {
                    v68 = 0;
                    v69 = (unsigned int *)v285;
                    v70 = *v15;
                    v71 = *(int **)(v266 + 72);
                    v72 = **(_QWORD **)(v266 + 64);
                    do
                    {
                      v74 = v69[v68];
                      v75 = (float **)(v70 + 56 * v74);
                      v76 = *v75;
                      v77 = (int *)v75[1];
                      if (v77 == (int *)*v75)
                      {
                        *(_QWORD *)(*v267 + ((v68 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v68;
                        v73 = *(float *)v71;
                      }
                      else
                      {
                        v73 = 0.0;
                        v78 = 0.0;
                        do
                        {
                          v79 = v76[1];
                          v81 = *v76;
                          v76 += 2;
                          v80 = v81;
                          if (v79 > v78)
                          {
                            v73 = v80;
                            v78 = v79;
                          }
                        }
                        while (v76 != (float *)v77);
                      }
                      *(float *)(v72 + 4 * v74) = v73;
                      ++v68;
                    }
                    while (v68 != v11);
                  }
                  else
                  {
                    v97 = 0;
                    v98 = (unsigned int *)v285;
                    v99 = v296;
                    v100 = v297;
                    v101 = *(_QWORD **)(v266 + 64);
                    do
                    {
                      if (v99 <= v97)
                      {
                        sub_239A444D4((uint64_t)"unknown file", 136, (uint64_t)"", (void (*)(void *))sub_239A4463C);
                        sub_239A4475C();
                        abort();
                      }
                      v102 = *(unsigned int *)(v100 + 4 * v97);
                      v103 = *((_QWORD *)v265 + 12);
                      if ((v103 & (v103 - 1)) != 0)
                      {
                        v105 = *(unsigned int *)(v100 + 4 * v97);
                        if (v103 <= v102)
                          v105 = v102 % v103;
                        v104 = *(uint64_t **)(*v14 + 8 * v105);
                        do
                        {
                          do
                            v104 = (uint64_t *)*v104;
                          while (v104[1] != v102);
                        }
                        while (*((_DWORD *)v104 + 4) != (_DWORD)v102);
                      }
                      else
                      {
                        v104 = *(uint64_t **)(*v14 + 8 * (((_DWORD)v103 - 1) & v102));
                        do
                        {
                          do
                            v104 = (uint64_t *)*v104;
                          while (v104[1] != v102);
                        }
                        while (*((_DWORD *)v104 + 4) != (_DWORD)v102);
                      }
                      *(_DWORD *)(*v101 + 4 * v98[v97++]) = *((_DWORD *)v104 + 5);
                    }
                    while (v97 != v11);
                  }
                  v106 = (char *)v289;
                  if (v289)
                  {
                    v107 = (char *)v290;
                    v108 = v289;
                    if (v290 != v289)
                    {
                      do
                      {
                        v109 = v107 - 24;
                        sub_239421038((uint64_t)(v107 - 24), *((_QWORD **)v107 - 2));
                        v107 = v109;
                      }
                      while (v109 != v106);
                      v108 = v289;
                    }
                    v290 = v106;
                    operator delete(v108);
                  }
                  sub_2396F8690(__p);
                  v286 = v285;
                  v86 = v280[0];
                  if (!v280[0])
                    goto LABEL_116;
                  do
                  {
LABEL_115:
                    v87 = (_QWORD *)*v86;
                    operator delete(v86);
                    v86 = v87;
                  }
                  while (v87);
                  goto LABEL_116;
                }
              }
              v145 = 141;
              goto LABEL_220;
            }
            sub_2396FDAA8(*(_QWORD **)(v266 + 16), (uint64_t)&v289);
            v94 = __sz >> 2;
            sub_2396F9FD4(__p, __sz >> 2, v41, &v289);
            v95 = v292;
            if (v292 == &v289)
            {
              v96 = 4;
              v95 = &v289;
            }
            else
            {
              if (!v292)
              {
LABEL_155:
                v277 = (uint64_t *)v264;
                v278 = (std::__shared_weak_count *)v265;
                do
                  v110 = __ldxr(v12);
                while (__stxr(v110 + 1, v12));
                sub_2396FAFAC((uint64_t)__p, (uint64_t)sub_23951B3E4, v262, (uint64_t *)&v277);
                v111 = v278;
                if (v278)
                {
                  v112 = (unint64_t *)&v278->__shared_owners_;
                  do
                    v113 = __ldaxr(v112);
                  while (__stlxr(v113 - 1, v112));
                  if (!v113)
                  {
                    ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
                    std::__shared_weak_count::__release_weak(v111);
                  }
                }
                v275 = v264;
                v276 = (std::__shared_weak_count *)v265;
                do
                  v114 = __ldxr(v12);
                while (__stxr(v114 + 1, v12));
                sub_2396FB1CC((uint64_t)__p, (uint64_t)sub_23951B588, v262, (uint64_t *)&v275);
                v115 = v276;
                if (v276)
                {
                  v116 = (unint64_t *)&v276->__shared_owners_;
                  do
                    v117 = __ldaxr(v116);
                  while (__stlxr(v117 - 1, v116));
                  if (!v117)
                  {
                    ((void (*)(std::__shared_weak_count *))v115->__on_zero_shared)(v115);
                    std::__shared_weak_count::__release_weak(v115);
                  }
                }
                v273 = 0;
                v274 = 0;
                v272 = 0;
                v118 = *(_QWORD *)(*(_QWORD *)(v266 + 88) + 8) - **(_QWORD **)(v266 + 88);
                if (v118)
                  sub_239520580(&v272, 0xAAAAAAAAAAAAAAABLL * (v118 >> 2));
                v119 = 0;
                do
                {
                  v120 = (unsigned int *)(*(_QWORD *)(*(_QWORD *)(v266 + 88) + 24)
                                        + 12 * *((unsigned int *)v285 + v119));
                  sub_2396BFBB0(*v120, v120[1], v119, &v272);
                  sub_2396BFBB0(*v120, v120[2], v119, &v272);
                  sub_2396BFBB0(v120[1], v120[2], v119++, &v272);
                }
                while (v11 != v119);
                v121 = (std::__shared_weak_count *)v272;
                v122 = v273;
                while (v121 != v122)
                {
                  v123 = v121->__vftable;
                  if ((uint64_t *)v121->__vftable != &v121->__shared_owners_)
                  {
                    do
                    {
                      on_zero_shared_weak = (int)v123->__on_zero_shared_weak;
                      if (on_zero_shared_weak != -1)
                      {
                        on_zero_shared_weak_high = HIDWORD(v123->__on_zero_shared_weak);
                        if (on_zero_shared_weak_high != -1)
                          sub_2396FAC94((uint64_t)__p, on_zero_shared_weak, on_zero_shared_weak_high, 1.0);
                      }
                      v126 = (uint64_t *)v123->~__shared_weak_count_0;
                      if (v126)
                      {
                        do
                        {
                          on_zero_shared = v126;
                          v126 = (uint64_t *)*v126;
                        }
                        while (v126);
                      }
                      else
                      {
                        do
                        {
                          on_zero_shared = (uint64_t *)v123->__on_zero_shared;
                          v60 = *on_zero_shared == (_QWORD)v123;
                          v123 = (std::__shared_weak_count_vtbl *)on_zero_shared;
                        }
                        while (!v60);
                      }
                      v123 = (std::__shared_weak_count_vtbl *)on_zero_shared;
                    }
                    while (on_zero_shared != &v121->__shared_owners_);
                  }
                  ++v121;
                }
                v128 = 0;
                do
                {
                  while (1)
                  {
                    v130 = *(_QWORD *)(*v15 + 56 * *((unsigned int *)v285 + v128));
                    v129 = *(_QWORD *)(*v15 + 56 * *((unsigned int *)v285 + v128) + 8);
                    if (v129 != v130)
                      break;
                    *(_QWORD *)(*v267 + ((v128 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v128;
                    *(_DWORD *)(v299 + 4 * v128) = 0;
                    v298 = 1;
                    if (++v128 == v11)
                      goto LABEL_196;
                  }
                  v271 = 0;
                  v271 = *(_DWORD *)v130;
                  v131 = 0.0;
                  do
                  {
                    v132 = *(float *)(v130 + 4);
                    if (v132 > v131)
                    {
                      v271 = *(_DWORD *)v130;
                      v131 = v132;
                    }
                    v130 += 8;
                  }
                  while (v130 != v129);
                  v268 = &v271;
                  v133 = sub_2394F126C((uint64_t)v279, &v271, (uint64_t)&unk_239EC6E98, (_DWORD **)&v268);
                  *(_DWORD *)(v299 + 4 * v128) = *((_DWORD *)v133 + 5);
                  v298 = 1;
                  ++v128;
                }
                while (v128 != v11);
LABEL_196:
                v134 = sub_2396FBAA0(__p);
                v268 = 0;
                v269 = 0;
                v270 = 0;
                v67 = (std::__shared_weak_count *)v265;
                v135 = v266;
                if ((__sz & 0x8000000000000000) != 0)
                  sub_2394189F8();
                v136 = v134;
                v137 = operator new(__sz);
                v268 = v137;
                v270 = (char *)v137 + 4 * v11;
                bzero(v137, __sz & 0xFFFFFFFFFFFFFFFCLL);
                v269 = (std::__shared_weak_count *)((char *)v137 + 4 * v11);
                if (__sz >= 4)
                {
                  v138 = 0;
                  v139 = v299;
                  if (__sz < 0x20 || v94 - 0x100000001 < 0xFFFFFFFF00000000 || (unint64_t)v137 - v299 < 0x20)
                    goto LABEL_223;
                  v140 = 0;
                  v138 = v94 & 0x3FFFFFFFFFFFFFF8;
                  v141 = v137 + 1;
                  do
                  {
                    v142 = (_OWORD *)(v139 + 4 * (v140 & 0xFFFFFFF8));
                    v143 = v142[1];
                    *(v141 - 1) = *v142;
                    *v141 = v143;
                    v140 += 8;
                    v141 += 2;
                  }
                  while (v138 != v140);
                  while (v94 != v138)
                  {
LABEL_223:
                    *((_DWORD *)v137 + v138) = *(_DWORD *)(v139 + 4 * v138);
                    ++v138;
                  }
                }
                sub_2396FBD88((unint64_t *)__p, 1);
                v147 = v146;
                if (v146 <= v136)
                {
                  if (v146 == v136)
                    goto LABEL_363;
                  v154 = v146 - v136;
                  if (v147 < v136)
                    v154 = v136 - v147;
                  if (v154 <= 1.0e-12)
                    goto LABEL_363;
                  if (__sz >= 4)
                  {
                    v155 = 0;
                    v156 = v299;
                    if (__sz < 0x20
                      || v94 - 0x100000001 < 0xFFFFFFFF00000000
                      || (unint64_t)v137 - v299 < 0x20)
                    {
                      goto LABEL_243;
                    }
                    v157 = 0;
                    v155 = v94 & 0x3FFFFFFFFFFFFFF8;
                    v158 = v137 + 1;
                    do
                    {
                      v159 = (_OWORD *)(v156 + 4 * (v157 & 0xFFFFFFF8));
                      v160 = v159[1];
                      *(v158 - 1) = *v159;
                      *v158 = v160;
                      v157 += 8;
                      v158 += 2;
                    }
                    while (v155 != v157);
                    while (v94 != v155)
                    {
LABEL_243:
                      *((_DWORD *)v137 + v155) = *(_DWORD *)(v156 + 4 * v155);
                      ++v155;
                    }
                  }
                  sub_2396FBD88((unint64_t *)__p, 1);
                  v162 = v161;
                  if (v161 <= v147)
                  {
                    if (v161 == v147)
                      goto LABEL_363;
                    v163 = v161 - v147;
                    if (v162 < v147)
                      v163 = v147 - v162;
                    if (v163 <= 1.0e-12)
                      goto LABEL_363;
                    if (__sz >= 4)
                    {
                      v164 = 0;
                      v165 = v299;
                      if (__sz < 0x20
                        || v94 - 0x100000001 < 0xFFFFFFFF00000000
                        || (unint64_t)v137 - v299 < 0x20)
                      {
                        goto LABEL_257;
                      }
                      v166 = 0;
                      v164 = v94 & 0x3FFFFFFFFFFFFFF8;
                      v167 = v137 + 1;
                      do
                      {
                        v168 = (_OWORD *)(v165 + 4 * (v166 & 0xFFFFFFF8));
                        v169 = v168[1];
                        *(v167 - 1) = *v168;
                        *v167 = v169;
                        v166 += 8;
                        v167 += 2;
                      }
                      while (v164 != v166);
                      while (v94 != v164)
                      {
LABEL_257:
                        *((_DWORD *)v137 + v164) = *(_DWORD *)(v165 + 4 * v164);
                        ++v164;
                      }
                    }
                    sub_2396FBD88((unint64_t *)__p, 1);
                    v171 = v170;
                    if (v170 <= v162)
                    {
                      if (v170 == v162)
                        goto LABEL_363;
                      v172 = v170 - v162;
                      if (v171 < v162)
                        v172 = v162 - v171;
                      if (v172 <= 1.0e-12)
                        goto LABEL_363;
                      if (__sz >= 4)
                      {
                        v173 = 0;
                        v174 = v299;
                        if (__sz < 0x20
                          || v94 - 0x100000001 < 0xFFFFFFFF00000000
                          || (unint64_t)v137 - v299 < 0x20)
                        {
                          goto LABEL_271;
                        }
                        v175 = 0;
                        v173 = v94 & 0x3FFFFFFFFFFFFFF8;
                        v176 = v137 + 1;
                        do
                        {
                          v177 = (_OWORD *)(v174 + 4 * (v175 & 0xFFFFFFF8));
                          v178 = v177[1];
                          *(v176 - 1) = *v177;
                          *v176 = v178;
                          v175 += 8;
                          v176 += 2;
                        }
                        while (v173 != v175);
                        while (v94 != v173)
                        {
LABEL_271:
                          *((_DWORD *)v137 + v173) = *(_DWORD *)(v174 + 4 * v173);
                          ++v173;
                        }
                      }
                      v67 = (std::__shared_weak_count *)v265;
                      sub_2396FBD88((unint64_t *)__p, 1);
                      v135 = v266;
                      v180 = v179;
                      if (v179 <= v171)
                      {
                        if (v179 == v171)
                          goto LABEL_363;
                        v181 = v179 - v171;
                        if (v180 < v171)
                          v181 = v171 - v180;
                        if (v181 <= 1.0e-12)
                          goto LABEL_363;
                        if (__sz >= 4)
                        {
                          v182 = 0;
                          v183 = v299;
                          if (__sz < 0x20
                            || v94 - 0x100000001 < 0xFFFFFFFF00000000
                            || (unint64_t)v137 - v299 < 0x20)
                          {
                            goto LABEL_285;
                          }
                          v184 = 0;
                          v182 = v94 & 0x3FFFFFFFFFFFFFF8;
                          v185 = v137 + 1;
                          do
                          {
                            v186 = (_OWORD *)(v183 + 4 * (v184 & 0xFFFFFFF8));
                            v187 = v186[1];
                            *(v185 - 1) = *v186;
                            *v185 = v187;
                            v184 += 8;
                            v185 += 2;
                          }
                          while (v182 != v184);
                          while (v94 != v182)
                          {
LABEL_285:
                            *((_DWORD *)v137 + v182) = *(_DWORD *)(v183 + 4 * v182);
                            ++v182;
                          }
                        }
                        v67 = (std::__shared_weak_count *)v265;
                        sub_2396FBD88((unint64_t *)__p, 1);
                        v135 = v266;
                        v189 = v188;
                        if (v188 <= v180)
                        {
                          if (v188 == v180)
                            goto LABEL_363;
                          v190 = v188 - v180;
                          if (v189 < v180)
                            v190 = v180 - v189;
                          if (v190 <= 1.0e-12)
                            goto LABEL_363;
                          if (__sz >= 4)
                          {
                            v191 = 0;
                            v192 = v299;
                            if (__sz < 0x20
                              || v94 - 0x100000001 < 0xFFFFFFFF00000000
                              || (unint64_t)v137 - v299 < 0x20)
                            {
                              goto LABEL_299;
                            }
                            v193 = 0;
                            v191 = v94 & 0x3FFFFFFFFFFFFFF8;
                            v194 = v137 + 1;
                            do
                            {
                              v195 = (_OWORD *)(v192 + 4 * (v193 & 0xFFFFFFF8));
                              v196 = v195[1];
                              *(v194 - 1) = *v195;
                              *v194 = v196;
                              v193 += 8;
                              v194 += 2;
                            }
                            while (v191 != v193);
                            while (v94 != v191)
                            {
LABEL_299:
                              *((_DWORD *)v137 + v191) = *(_DWORD *)(v192 + 4 * v191);
                              ++v191;
                            }
                          }
                          v67 = (std::__shared_weak_count *)v265;
                          sub_2396FBD88((unint64_t *)__p, 1);
                          v135 = v266;
                          v198 = v197;
                          if (v197 <= v189)
                          {
                            if (v197 == v189)
                              goto LABEL_363;
                            v199 = v197 - v189;
                            if (v198 < v189)
                              v199 = v189 - v198;
                            if (v199 <= 1.0e-12)
                              goto LABEL_363;
                            if (__sz >= 4)
                            {
                              v200 = 0;
                              v201 = v299;
                              if (__sz < 0x20
                                || v94 - 0x100000001 < 0xFFFFFFFF00000000
                                || (unint64_t)v137 - v299 < 0x20)
                              {
                                goto LABEL_313;
                              }
                              v202 = 0;
                              v200 = v94 & 0x3FFFFFFFFFFFFFF8;
                              v203 = v137 + 1;
                              do
                              {
                                v204 = (_OWORD *)(v201 + 4 * (v202 & 0xFFFFFFF8));
                                v205 = v204[1];
                                *(v203 - 1) = *v204;
                                *v203 = v205;
                                v202 += 8;
                                v203 += 2;
                              }
                              while (v200 != v202);
                              while (v94 != v200)
                              {
LABEL_313:
                                *((_DWORD *)v137 + v200) = *(_DWORD *)(v201 + 4 * v200);
                                ++v200;
                              }
                            }
                            v67 = (std::__shared_weak_count *)v265;
                            sub_2396FBD88((unint64_t *)__p, 1);
                            v135 = v266;
                            v207 = v206;
                            if (v206 <= v198)
                            {
                              if (v206 == v198)
                                goto LABEL_363;
                              v208 = v206 - v198;
                              if (v207 < v198)
                                v208 = v198 - v207;
                              if (v208 <= 1.0e-12)
                                goto LABEL_363;
                              if (__sz >= 4)
                              {
                                v209 = 0;
                                v210 = v299;
                                if (__sz < 0x20
                                  || v94 - 0x100000001 < 0xFFFFFFFF00000000
                                  || (unint64_t)v137 - v299 < 0x20)
                                {
                                  goto LABEL_327;
                                }
                                v211 = 0;
                                v209 = v94 & 0x3FFFFFFFFFFFFFF8;
                                v212 = v137 + 1;
                                do
                                {
                                  v213 = (_OWORD *)(v210 + 4 * (v211 & 0xFFFFFFF8));
                                  v214 = v213[1];
                                  *(v212 - 1) = *v213;
                                  *v212 = v214;
                                  v211 += 8;
                                  v212 += 2;
                                }
                                while (v209 != v211);
                                while (v94 != v209)
                                {
LABEL_327:
                                  *((_DWORD *)v137 + v209) = *(_DWORD *)(v210 + 4 * v209);
                                  ++v209;
                                }
                              }
                              v67 = (std::__shared_weak_count *)v265;
                              sub_2396FBD88((unint64_t *)__p, 1);
                              v135 = v266;
                              v216 = v215;
                              if (v215 <= v207)
                              {
                                if (v215 == v207)
                                  goto LABEL_363;
                                v217 = v215 - v207;
                                if (v216 < v207)
                                  v217 = v207 - v216;
                                if (v217 <= 1.0e-12)
                                  goto LABEL_363;
                                if (__sz >= 4)
                                {
                                  v218 = 0;
                                  v219 = v299;
                                  if (__sz < 0x20
                                    || v94 - 0x100000001 < 0xFFFFFFFF00000000
                                    || (unint64_t)v137 - v299 < 0x20)
                                  {
                                    goto LABEL_341;
                                  }
                                  v220 = 0;
                                  v218 = v94 & 0x3FFFFFFFFFFFFFF8;
                                  v221 = v137 + 1;
                                  do
                                  {
                                    v222 = (_OWORD *)(v219 + 4 * (v220 & 0xFFFFFFF8));
                                    v223 = v222[1];
                                    *(v221 - 1) = *v222;
                                    *v221 = v223;
                                    v220 += 8;
                                    v221 += 2;
                                  }
                                  while (v218 != v220);
                                  while (v94 != v218)
                                  {
LABEL_341:
                                    *((_DWORD *)v137 + v218) = *(_DWORD *)(v219 + 4 * v218);
                                    ++v218;
                                  }
                                }
                                v67 = (std::__shared_weak_count *)v265;
                                sub_2396FBD88((unint64_t *)__p, 1);
                                v135 = v266;
                                v225 = v224;
                                if (v224 <= v216)
                                {
                                  if (v224 == v216)
                                    goto LABEL_363;
                                  v226 = v224 - v216;
                                  if (v225 < v216)
                                    v226 = v216 - v225;
                                  if (v226 <= 1.0e-12)
                                    goto LABEL_363;
                                  if (__sz >= 4)
                                  {
                                    v227 = 0;
                                    v228 = v299;
                                    if (__sz < 0x20
                                      || v94 - 0x100000001 < 0xFFFFFFFF00000000
                                      || (unint64_t)v137 - v299 < 0x20)
                                    {
                                      goto LABEL_355;
                                    }
                                    v229 = 0;
                                    v227 = v94 & 0x3FFFFFFFFFFFFFF8;
                                    v230 = v137 + 1;
                                    do
                                    {
                                      v231 = (_OWORD *)(v228 + 4 * (v229 & 0xFFFFFFF8));
                                      v232 = v231[1];
                                      *(v230 - 1) = *v231;
                                      *v230 = v232;
                                      v229 += 8;
                                      v230 += 2;
                                    }
                                    while (v227 != v229);
                                    while (v94 != v227)
                                    {
LABEL_355:
                                      *((_DWORD *)v137 + v227) = *(_DWORD *)(v228 + 4 * v227);
                                      ++v227;
                                    }
                                  }
                                  v67 = (std::__shared_weak_count *)v265;
                                  sub_2396FBD88((unint64_t *)__p, 1);
                                  v135 = v266;
                                  if (__sz < 4 || v233 <= v225)
                                    goto LABEL_363;
                                  goto LABEL_226;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
                if (__sz >= 4)
                {
LABEL_226:
                  v148 = 0;
                  v149 = v299;
                  if (__sz < 0x20
                    || v94 - 0x100000001 < 0xFFFFFFFF00000000
                    || (unint64_t)(v299 - (_QWORD)v137) < 0x20)
                  {
                    goto LABEL_360;
                  }
                  v150 = 0;
                  v148 = v94 & 0x3FFFFFFFFFFFFFF8;
                  v151 = v137 + 1;
                  do
                  {
                    v152 = *v151;
                    v153 = (_OWORD *)(v149 + 4 * (v150 & 0xFFFFFFF8));
                    *v153 = *(v151 - 1);
                    v153[1] = v152;
                    v150 += 8;
                    v151 += 2;
                  }
                  while (v148 != v150);
                  while (v94 != v148)
                  {
LABEL_360:
                    *(_DWORD *)(v149 + 4 * v148) = *((_DWORD *)v137 + v148);
                    ++v148;
                  }
                  v298 = 1;
                }
LABEL_363:
                if (fabsf(sub_2396FBAA0(__p)) == INFINITY)
                {
                  v234 = 0;
                  v235 = (unsigned int *)v285;
                  v236 = *v15;
                  v237 = *(int **)(v135 + 72);
                  v238 = **(_QWORD **)(v135 + 64);
                  do
                  {
                    v240 = v235[v234];
                    v241 = (float **)(v236 + 56 * v240);
                    v242 = *v241;
                    v243 = (int *)v241[1];
                    if (v243 == (int *)*v241)
                    {
                      *(_QWORD *)(*v267 + ((v234 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v234;
                      v239 = *(float *)v237;
                    }
                    else
                    {
                      v239 = 0.0;
                      v244 = 0.0;
                      do
                      {
                        v245 = v242[1];
                        v247 = *v242;
                        v242 += 2;
                        v246 = v247;
                        if (v245 > v244)
                        {
                          v244 = v245;
                          v239 = v246;
                        }
                      }
                      while (v242 != (float *)v243);
                    }
                    *(float *)(v238 + 4 * v240) = v239;
                    ++v234;
                  }
                  while (v234 != v11);
                }
                else
                {
                  v248 = 0;
                  v249 = (unsigned int *)v285;
                  v250 = v299;
                  shared_weak_owners = v67[3].__shared_weak_owners_;
                  v251 = (int8x8_t)v67[4].__vftable;
                  v253 = (uint8x8_t)vcnt_s8(v251);
                  v253.i16[0] = vaddlv_u8(v253);
                  v254 = **(_QWORD **)(v135 + 64);
                  do
                  {
                    v255 = *(unsigned int *)(v250 + 4 * v248);
                    if (v253.u32[0] >= 2uLL)
                    {
                      v257 = *(unsigned int *)(v250 + 4 * v248);
                      if (*(_QWORD *)&v251 <= v255)
                        v257 = v255 % *(_QWORD *)&v251;
                      v256 = *(uint64_t **)(shared_weak_owners + 8 * v257);
                      do
                      {
                        do
                          v256 = (uint64_t *)*v256;
                        while (v256[1] != v255);
                      }
                      while (*((_DWORD *)v256 + 4) != (_DWORD)v255);
                    }
                    else
                    {
                      v256 = *(uint64_t **)(shared_weak_owners + 8 * ((*(_QWORD *)&v251 + 0xFFFFFFFFLL) & v255));
                      do
                      {
                        do
                          v256 = (uint64_t *)*v256;
                        while (v256[1] != v255);
                      }
                      while (*((_DWORD *)v256 + 4) != (_DWORD)v255);
                    }
                    *(_DWORD *)(v254 + 4 * v249[v248++]) = *((_DWORD *)v256 + 5);
                  }
                  while (v248 != v11);
                }
                operator delete(v137);
                v258 = (std::__shared_weak_count *)v272;
                if (v272)
                {
                  v259 = v273;
                  v260 = v272;
                  if (v273 != v272)
                  {
                    do
                    {
                      v261 = v259 - 1;
                      sub_239421038((uint64_t)&v259[-1], (_QWORD *)v259[-1].__shared_owners_);
                      v259 = v261;
                    }
                    while (v261 != v258);
                    v260 = v272;
                  }
                  v273 = v258;
                  operator delete(v260);
                }
                sub_2396FA250(__p);
                v286 = v285;
                v86 = v280[0];
                if (v280[0])
                  goto LABEL_115;
LABEL_116:
                v88 = v279[0];
                v279[0] = 0;
                if (v88)
                  operator delete(v88);
                v89 = (_QWORD *)v283;
                if ((_QWORD)v283)
                {
                  do
                  {
                    v90 = (_QWORD *)*v89;
                    operator delete(v89);
                    v89 = v90;
                  }
                  while (v90);
                }
                v91 = (void *)v282;
                *(_QWORD *)&v282 = 0;
                if (v91)
                  operator delete(v91);
                do
                  v92 = __ldaxr(v12);
                while (__stlxr(v92 - 1, v12));
                if (!v92)
                {
                  ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
                  std::__shared_weak_count::__release_weak(v67);
                }
                v7 = v285;
                goto LABEL_126;
              }
              v96 = 5;
            }
            (*((void (**)(void))*v95 + v96))();
            goto LABEL_155;
          }
        }
LABEL_14:
        sub_239427FE0((uint64_t)v279, v22);
        goto LABEL_15;
      }
    }
LABEL_7:
    sub_239427FE0((uint64_t)&v282, prime);
    goto LABEL_8;
  }
  return sub_2396FD3E8((uint64_t)v288);
}

uint64_t sub_23951FF18(uint64_t *a1, uint64_t a2)
{
  char v2;
  uint64_t *v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v16;
  uint64_t i;

  v4 = a1;
  v5 = 0;
  v6 = a1[7];
  if (v6)
  {
    while (1)
    {
      sub_23951FF18(v6, a2);
      v7 = v4[9];
      if (v7)
        sub_23951FF18(v7, a2);
      v8 = v4[11];
      if (v8)
        sub_23951FF18(v8, a2);
      v9 = v4[13];
      if (v9)
        sub_23951FF18(v9, a2);
      v10 = v4[15];
      if (v10)
        sub_23951FF18(v10, a2);
      v11 = v4[17];
      if (v11)
        sub_23951FF18(v11, a2);
      v12 = v4[19];
      if (v12)
        sub_23951FF18(v12, a2);
      v4 = (uint64_t *)v4[21];
      if (!v4)
        break;
      v2 |= v5 ^ 1;
      v5 = 1;
      v6 = v4[7];
      if (!v6)
        goto LABEL_16;
    }
  }
  else
  {
LABEL_16:
    v14 = *v4;
    v13 = v4[1];
    for (i = a2; v14 != v13; v14 += 16)
    {
      v16 = *(_DWORD *)(v14 + 12);
      sub_2394AB184(&i, &v16);
    }
  }
  return v2 & 1 | ((v5 & 1) == 0);
}

void sub_239520018(uint64_t a1, uint64_t a2, int a3, uint64_t *a4)
{
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  std::__shared_weak_count *v34;

  v8 = *(_QWORD *)(a1 + 240);
  if (v8)
  {
    *(_QWORD *)(a1 + 240) = 0;
    v9 = *(std::__shared_weak_count **)(v8 + 24);
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    MEMORY[0x23B83E31C](v8, 0x10E0C4033E2FC60);
  }
  v12 = *a4;
  v13 = (std::__shared_weak_count *)a4[1];
  v30 = v13;
  if (v13)
  {
    v14 = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
    v31 = a2;
    v32 = a3;
    v33 = v12;
    v34 = v13;
    do
      v16 = __ldxr(v14);
    while (__stxr(v16 + 1, v14));
  }
  else
  {
    v31 = a2;
    v32 = a3;
    v33 = *a4;
    v34 = 0;
  }
  v17 = operator new();
  *(_QWORD *)v17 = v31;
  *(_DWORD *)(v17 + 8) = v32;
  v18 = v34;
  *(_QWORD *)(v17 + 16) = v33;
  *(_QWORD *)(v17 + 24) = v34;
  if (v34)
  {
    v19 = (unint64_t *)&v34->__shared_owners_;
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
  }
  v21 = *(_QWORD *)(a1 + 240);
  *(_QWORD *)(a1 + 240) = v17;
  if (v21)
  {
    v22 = *(std::__shared_weak_count **)(v21 + 24);
    if (v22)
    {
      v23 = (unint64_t *)&v22->__shared_owners_;
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
    }
    MEMORY[0x23B83E31C](v21, 0x10E0C4033E2FC60);
    v18 = v34;
  }
  if (!v18)
    goto LABEL_29;
  v25 = (unint64_t *)&v18->__shared_owners_;
  do
    v26 = __ldaxr(v25);
  while (__stlxr(v26 - 1, v25));
  if (!v26)
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
    v27 = v30;
    if (!v30)
      return;
  }
  else
  {
LABEL_29:
    v27 = v30;
    if (!v30)
      return;
  }
  v28 = (unint64_t *)&v27->__shared_owners_;
  do
    v29 = __ldaxr(v28);
  while (__stlxr(v29 - 1, v28));
  if (!v29)
  {
    ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
    std::__shared_weak_count::__release_weak(v27);
  }
}

void sub_239520234(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  sub_239520518((uint64_t)&a11);
  sub_239416DA0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_239520250(uint64_t a1, uint64_t a2, int a3, uint64_t *a4)
{
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  std::__shared_weak_count *v34;

  v8 = *(_QWORD *)(a1 + 248);
  if (v8)
  {
    *(_QWORD *)(a1 + 248) = 0;
    v9 = *(std::__shared_weak_count **)(v8 + 24);
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    MEMORY[0x23B83E31C](v8, 0x10E0C4033E2FC60);
  }
  v12 = *a4;
  v13 = (std::__shared_weak_count *)a4[1];
  v30 = v13;
  if (v13)
  {
    v14 = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
    v31 = a2;
    v32 = a3;
    v33 = v12;
    v34 = v13;
    do
      v16 = __ldxr(v14);
    while (__stxr(v16 + 1, v14));
  }
  else
  {
    v31 = a2;
    v32 = a3;
    v33 = *a4;
    v34 = 0;
  }
  v17 = operator new();
  *(_QWORD *)v17 = v31;
  *(_DWORD *)(v17 + 8) = v32;
  v18 = v34;
  *(_QWORD *)(v17 + 16) = v33;
  *(_QWORD *)(v17 + 24) = v34;
  if (v34)
  {
    v19 = (unint64_t *)&v34->__shared_owners_;
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
  }
  v21 = *(_QWORD *)(a1 + 248);
  *(_QWORD *)(a1 + 248) = v17;
  if (v21)
  {
    v22 = *(std::__shared_weak_count **)(v21 + 24);
    if (v22)
    {
      v23 = (unint64_t *)&v22->__shared_owners_;
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
    }
    MEMORY[0x23B83E31C](v21, 0x10E0C4033E2FC60);
    v18 = v34;
  }
  if (v18)
  {
    v25 = (unint64_t *)&v18->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  if (v30)
  {
    v27 = (unint64_t *)&v30->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  return sub_2396F92E0(a1);
}

void sub_239520450(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  sub_239520518((uint64_t)&a11);
  sub_239416DA0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_23952046C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_250ADD690;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_23952047C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_250ADD690;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x23B83E31CLL);
}

void sub_2395204AC(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  void *v5;
  void *v6;

  v2 = (_QWORD *)a1[13];
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = (void *)a1[11];
  a1[11] = 0;
  if (v4)
    operator delete(v4);
  v5 = (void *)a1[8];
  if (v5)
  {
    a1[9] = v5;
    operator delete(v5);
  }
  v6 = (void *)a1[5];
  if (v6)
    operator delete(v6);
}

uint64_t sub_239520518(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 24);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_239520580(void **a1, unint64_t a2)
{
  _QWORD *v4;
  _BYTE *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  char *v17;
  _QWORD *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;

  v4 = a1[1];
  v5 = a1[2];
  if (0xAAAAAAAAAAAAAAABLL * ((v5 - (_BYTE *)v4) >> 3) >= a2)
  {
    if (a2)
    {
      v11 = &v4[3 * a2];
      v12 = 24 * a2;
      v13 = v4 + 1;
      do
      {
        *v13 = 0;
        v13[1] = 0;
        *(v13 - 1) = v13;
        v13 += 3;
        v12 -= 24;
      }
      while (v12);
      a1[1] = v11;
    }
    else
    {
      a1[1] = v4;
    }
    return;
  }
  v6 = 0xAAAAAAAAAAAAAAABLL * (((char *)v4 - (_BYTE *)*a1) >> 3);
  v7 = v6 + a2;
  if (v6 + a2 > 0xAAAAAAAAAAAAAAALL)
    sub_2394189F8();
  v8 = 0xAAAAAAAAAAAAAAABLL * ((v5 - (_BYTE *)*a1) >> 3);
  if (2 * v8 > v7)
    v7 = 2 * v8;
  if (v8 >= 0x555555555555555)
    v9 = 0xAAAAAAAAAAAAAAALL;
  else
    v9 = v7;
  if (v9)
  {
    if (v9 > 0xAAAAAAAAAAAAAAALL)
      sub_239418A80();
    v10 = (char *)operator new(24 * v9);
  }
  else
  {
    v10 = 0;
  }
  v14 = &v10[24 * v6];
  v15 = &v10[24 * v9];
  v16 = 24 * a2;
  v17 = &v14[24 * a2];
  v18 = v14 + 8;
  do
  {
    *v18 = 0;
    v18[1] = 0;
    *(v18 - 1) = v18;
    v18 += 3;
    v16 -= 24;
  }
  while (v16);
  v20 = (char *)*a1;
  v19 = (char *)a1[1];
  if (v19 == *a1)
  {
    *a1 = v14;
    a1[1] = v17;
    a1[2] = v15;
    if (!v19)
      return;
LABEL_31:
    operator delete(v19);
    return;
  }
  v21 = 0;
  do
  {
    while (1)
    {
      v22 = &v14[v21];
      *((_QWORD *)v22 - 3) = *(_QWORD *)&v19[v21 - 24];
      v23 = &v19[v21 - 16];
      v24 = *(_QWORD *)v23;
      *(_QWORD *)&v14[v21 - 16] = *(_QWORD *)v23;
      v25 = (uint64_t)&v14[v21 - 16];
      v26 = *(_QWORD *)&v19[v21 - 8];
      *((_QWORD *)v22 - 1) = v26;
      if (!v26)
        break;
      *(_QWORD *)(v24 + 16) = v25;
      *(_QWORD *)&v19[v21 - 24] = v23;
      *(_QWORD *)v23 = 0;
      *(_QWORD *)&v19[v21 - 8] = 0;
      v21 -= 24;
      if (&v19[v21] == v20)
        goto LABEL_25;
    }
    *((_QWORD *)v22 - 3) = v25;
    v21 -= 24;
  }
  while (&v19[v21] != v20);
LABEL_25:
  v27 = (char *)*a1;
  v19 = (char *)a1[1];
  *a1 = &v14[v21];
  a1[1] = v17;
  a1[2] = v15;
  if (v19 != v27)
  {
    do
    {
      v28 = v19 - 24;
      sub_239421038((uint64_t)(v19 - 24), *((_QWORD **)v19 - 2));
      v19 = v28;
    }
    while (v28 != v27);
    v19 = v27;
  }
  if (v19)
    goto LABEL_31;
}

void **sub_239520780(void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  void *v5;
  void *v6;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        v5 = (void *)*((_QWORD *)v3 - 4);
        if (v5)
        {
          *((_QWORD *)v3 - 3) = v5;
          operator delete(v5);
        }
        v6 = (void *)*((_QWORD *)v3 - 7);
        if (v6)
        {
          *((_QWORD *)v3 - 6) = v6;
          operator delete(v6);
        }
        v3 -= 56;
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_239520800(uint64_t a1, uint64_t a2, _QWORD *a3, unsigned int a4, int a5, int a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  _QWORD *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  uint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  char v32;
  _QWORD *v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *p_shared_owners;
  unint64_t v45;
  uint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  uint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  _QWORD *v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  uint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  uint64_t v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  _QWORD *v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  uint64_t v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  uint64_t v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  _QWORD *v87;
  char v88;
  _QWORD *v89;
  uint64_t v90;
  _QWORD *v91;
  uint64_t v92;
  _QWORD *v93;
  uint64_t v94;
  _QWORD *v95;
  uint64_t v96;
  uint64_t v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  std::__shared_weak_count *v107;
  unint64_t *v108;
  unint64_t v109;
  std::__shared_weak_count *v110;
  unint64_t *v111;
  unint64_t v112;
  std::__shared_weak_count *v113;
  unint64_t *v114;
  unint64_t v115;
  _QWORD *v116;
  uint64_t v117;
  int v119;
  int v120;
  void *__p[2];
  char v127;
  uint64_t v128;
  uint64_t v129;
  std::__shared_weak_count *v130;
  uint64_t v131;
  std::__shared_weak_count *v132;
  uint64_t v133;
  std::__shared_weak_count *v134;
  uint64_t v135;
  uint64_t v136;
  std::__shared_weak_count *v137;
  uint64_t v138;
  std::__shared_weak_count *v139;
  uint64_t v140;
  std::__shared_weak_count *v141;
  uint64_t v142;
  uint64_t v143;
  std::__shared_weak_count *v144;
  uint64_t v145;
  std::__shared_weak_count *v146;
  uint64_t v147;
  std::__shared_weak_count *v148;
  uint64_t v149;
  uint64_t v150;
  std::__shared_weak_count *v151;
  uint64_t v152;
  std::__shared_weak_count *v153;
  uint64_t v154;
  std::__shared_weak_count *v155;
  _BYTE v156[24];
  _BYTE *v157;
  _BYTE v158[24];
  _BYTE *v159;
  _BYTE v160[24];
  _BYTE *v161;
  _QWORD v162[3];
  _QWORD *v163;
  _BYTE v164[24];
  _BYTE *v165;
  _BYTE v166[24];
  _BYTE *v167;
  _QWORD v168[71];
  _BYTE v169[24];
  _BYTE *v170;
  _BYTE v171[24];
  _BYTE *v172;
  _QWORD v173[3];
  _QWORD *v174;
  _BYTE v175[24];
  _BYTE *v176;
  _BYTE v177[24];
  _BYTE *v178;
  _BYTE v179[568];
  _QWORD v180[3];
  _QWORD *v181;
  uint64_t v182;

  v182 = *MEMORY[0x24BDAC8D0];
  kdebug_trace();
  v180[0] = &off_250ADD6C8;
  v180[1] = a3;
  v181 = v180;
  sub_2396FD800(a3, (uint64_t)v177);
  v168[0] = 0x42C8000000000000;
  sub_2396FCC68(v179, 100, v177, v168, 1.0);
  v13 = v178;
  if (v178 == v177)
  {
    v14 = 4;
    v13 = v177;
  }
  else
  {
    if (!v178)
      goto LABEL_6;
    v14 = 5;
  }
  (*(void (**)(void))(*v13 + 8 * v14))();
LABEL_6:
  sub_2396FD534(&v149, v179, 90);
  sub_2396FD534(&v142, v179, 10);
  v119 = a6;
  if (!a5)
  {
    v41 = v149;
    v42 = v150;
    v128 = v149;
    v129 = v150;
    v43 = v151;
    v130 = v151;
    if (v151)
    {
      p_shared_owners = (unint64_t *)&v151->__shared_owners_;
      do
        v45 = __ldxr(p_shared_owners);
      while (__stxr(v45 + 1, p_shared_owners));
    }
    v46 = v152;
    v47 = v153;
    v131 = v152;
    v132 = v153;
    if (v153)
    {
      v48 = (unint64_t *)&v153->__shared_owners_;
      do
        v49 = __ldxr(v48);
      while (__stxr(v49 + 1, v48));
    }
    v50 = v154;
    v51 = v155;
    v133 = v154;
    v134 = v155;
    if (v155)
    {
      v52 = (unint64_t *)&v155->__shared_owners_;
      do
        v53 = __ldxr(v52);
      while (__stxr(v53 + 1, v52));
    }
    v167 = 0;
    v54 = operator new(0x40uLL);
    *v54 = &off_250ADB9D8;
    v54[1] = v41;
    v54[2] = v42;
    v54[3] = v43;
    v129 = 0;
    v130 = 0;
    v54[4] = v46;
    v54[5] = v47;
    v131 = 0;
    v132 = 0;
    v54[6] = v50;
    v54[7] = v51;
    v133 = 0;
    v134 = 0;
    v167 = v54;
    __p[0] = (void *)0x42C8000000000000;
    sub_2396FCC68(v168, 1, v166, __p, 1.0);
    v55 = v167;
    if (v167 == v166)
    {
      v56 = 4;
      v55 = v166;
    }
    else
    {
      if (!v167)
      {
LABEL_60:
        v127 = 0;
        LOBYTE(__p[0]) = 0;
        sub_2396FCDAC((uint64_t)v168, (__int128 *)__p, 1);
        if (v127 < 0)
          operator delete(__p[0]);
        sub_2396FCD14((uint64_t)v168);
LABEL_63:
        if (v119)
        {
          v57 = (uint64_t)v181;
          if (v181)
          {
            if (v181 == v180)
            {
              v161 = v160;
              (*(void (**)(_QWORD *, _BYTE *))(v180[0] + 24))(v180, v160);
LABEL_86:
              v74 = v142;
              v75 = v143;
              v76 = v144;
              if (v144)
              {
                v77 = (unint64_t *)&v144->__shared_owners_;
                do
                  v78 = __ldxr(v77);
                while (__stxr(v78 + 1, v77));
              }
              v79 = v145;
              v80 = v146;
              if (v146)
              {
                v81 = (unint64_t *)&v146->__shared_owners_;
                do
                  v82 = __ldxr(v81);
                while (__stxr(v82 + 1, v81));
              }
              v83 = v147;
              v84 = v148;
              if (v148)
              {
                v85 = (unint64_t *)&v148->__shared_owners_;
                do
                  v86 = __ldxr(v85);
                while (__stxr(v86 + 1, v85));
              }
              v159 = 0;
              v87 = operator new(0x40uLL);
              *v87 = &off_250ADB9D8;
              v87[1] = v74;
              v87[2] = v75;
              v87[3] = v76;
              v87[4] = v79;
              v87[5] = v80;
              v87[6] = v83;
              v87[7] = v84;
              v159 = v87;
              sub_2396FD600((uint64_t)v162, (uint64_t)v160, (uint64_t)v158);
              v88 = sub_23952F188(a1, a2, v162, 1, a4);
              v89 = v165;
              if (v165 == v164)
              {
                v90 = 4;
                v89 = v164;
              }
              else
              {
                if (!v165)
                  goto LABEL_100;
                v90 = 5;
              }
              (*(void (**)(void))(*v89 + 8 * v90))();
LABEL_100:
              v91 = v163;
              if (v163 == v162)
              {
                v92 = 4;
                v91 = v162;
              }
              else
              {
                if (!v163)
                  goto LABEL_105;
                v92 = 5;
              }
              (*(void (**)(void))(*v91 + 8 * v92))();
LABEL_105:
              v93 = v159;
              if (v159 == v158)
              {
                v94 = 4;
                v93 = v158;
              }
              else
              {
                if (!v159)
                  goto LABEL_110;
                v94 = 5;
              }
              (*(void (**)(void))(*v93 + 8 * v94))();
LABEL_110:
              v95 = v161;
              if (v161 == v160)
              {
                v96 = 4;
                v95 = v160;
              }
              else
              {
                if (!v161)
                  goto LABEL_115;
                v96 = 5;
              }
              (*(void (**)(void))(*v95 + 8 * v96))();
LABEL_115:
              if ((v88 & 1) == 0)
                goto LABEL_118;
LABEL_116:
              kdebug_trace();
              v97 = 1;
              v98 = v148;
              if (v148)
                goto LABEL_119;
              goto LABEL_123;
            }
            v57 = (*(uint64_t (**)(_QWORD *))(*v181 + 16))(v181);
          }
          v161 = (_BYTE *)v57;
          goto LABEL_86;
        }
        v58 = v142;
        v59 = v143;
        v60 = v144;
        if (v144)
        {
          v61 = (unint64_t *)&v144->__shared_owners_;
          do
            v62 = __ldxr(v61);
          while (__stxr(v62 + 1, v61));
        }
        v63 = v145;
        v64 = v146;
        if (v146)
        {
          v65 = (unint64_t *)&v146->__shared_owners_;
          do
            v66 = __ldxr(v65);
          while (__stxr(v66 + 1, v65));
        }
        v67 = v147;
        v68 = v148;
        if (v148)
        {
          v69 = (unint64_t *)&v148->__shared_owners_;
          do
            v70 = __ldxr(v69);
          while (__stxr(v70 + 1, v69));
        }
        v157 = 0;
        v71 = operator new(0x40uLL);
        *v71 = &off_250ADB9D8;
        v71[1] = v58;
        v71[2] = v59;
        v71[3] = v60;
        v71[4] = v63;
        v71[5] = v64;
        v71[6] = v67;
        v71[7] = v68;
        v157 = v71;
        __p[0] = (void *)0x42C8000000000000;
        sub_2396FCC68(v168, 1, v156, __p, 1.0);
        v72 = v157;
        if (v157 == v156)
        {
          v73 = 4;
          v72 = v156;
        }
        else
        {
          if (!v157)
          {
LABEL_82:
            v127 = 0;
            LOBYTE(__p[0]) = 0;
            sub_2396FCDAC((uint64_t)v168, (__int128 *)__p, 1);
            if (v127 < 0)
              operator delete(__p[0]);
            sub_2396FCD14((uint64_t)v168);
            goto LABEL_116;
          }
          v73 = 5;
        }
        (*(void (**)(void))(*v72 + 8 * v73))();
        goto LABEL_82;
      }
      v56 = 5;
    }
    (*(void (**)(void))(*v55 + 8 * v56))();
    goto LABEL_60;
  }
  v15 = 0;
  v120 = a6 ^ 1;
  do
  {
    v16 = (uint64_t)v181;
    if (!v181)
      goto LABEL_11;
    if (v181 != v180)
    {
      v16 = (*(uint64_t (**)(_QWORD *))(*v181 + 16))(v181);
LABEL_11:
      v172 = (_BYTE *)v16;
      goto LABEL_13;
    }
    v172 = v171;
    (*(void (**)(_QWORD *, _BYTE *))(v180[0] + 24))(v180, v171);
LABEL_13:
    v18 = v149;
    v17 = v150;
    v135 = v149;
    v136 = v150;
    v19 = v151;
    v137 = v151;
    if (v151)
    {
      v20 = (unint64_t *)&v151->__shared_owners_;
      do
        v21 = __ldxr(v20);
      while (__stxr(v21 + 1, v20));
    }
    v23 = v152;
    v22 = v153;
    v138 = v152;
    v139 = v153;
    if (v153)
    {
      v24 = (unint64_t *)&v153->__shared_owners_;
      do
        v25 = __ldxr(v24);
      while (__stxr(v25 + 1, v24));
    }
    v27 = v154;
    v26 = v155;
    v140 = v154;
    v141 = v155;
    if (v155)
    {
      v28 = (unint64_t *)&v155->__shared_owners_;
      do
        v29 = __ldxr(v28);
      while (__stxr(v29 + 1, v28));
    }
    v170 = 0;
    v30 = operator new(0x40uLL);
    *v30 = &off_250ADB9D8;
    v30[1] = v18;
    v30[2] = v17;
    v30[3] = v19;
    v136 = 0;
    v137 = 0;
    v30[4] = v23;
    v30[5] = v22;
    v138 = 0;
    v139 = 0;
    v30[6] = v27;
    v30[7] = v26;
    v140 = 0;
    v141 = 0;
    v170 = v30;
    sub_2396FD600((uint64_t)v173, (uint64_t)v171, (uint64_t)v169);
    v32 = sub_23952B87C(a1, a2, v173, v120, a4, a7, a8, v31, a9, a10);
    v33 = v176;
    if (v176 == v175)
    {
      v33 = v175;
      v34 = 4;
    }
    else
    {
      if (!v176)
        goto LABEL_27;
      v34 = 5;
    }
    (*(void (**)(void))(*v33 + 8 * v34))();
LABEL_27:
    v35 = v174;
    if (v174 == v173)
    {
      v35 = v173;
      v36 = 4;
    }
    else
    {
      if (!v174)
        goto LABEL_32;
      v36 = 5;
    }
    (*(void (**)(void))(*v35 + 8 * v36))();
LABEL_32:
    v37 = v170;
    if (v170 == v169)
    {
      v37 = v169;
      v38 = 4;
    }
    else
    {
      if (!v170)
        goto LABEL_37;
      v38 = 5;
    }
    (*(void (**)(void))(*v37 + 8 * v38))();
LABEL_37:
    v39 = v172;
    if (v172 == v171)
    {
      v39 = v171;
      v40 = 4;
    }
    else
    {
      if (!v172)
        goto LABEL_42;
      v40 = 5;
    }
    (*(void (**)(void))(*v39 + 8 * v40))();
LABEL_42:
    if ((v32 & 1) != 0)
      goto LABEL_63;
    ++v15;
  }
  while (v15 != 10);
  if ((_BYTE)a10)
    sub_2394202DC((_QWORD *)(a9 + 176), 7010);
LABEL_118:
  v97 = 0;
  v98 = v148;
  if (v148)
  {
LABEL_119:
    v99 = (unint64_t *)&v98->__shared_owners_;
    do
      v100 = __ldaxr(v99);
    while (__stlxr(v100 - 1, v99));
    if (!v100)
    {
      ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
      std::__shared_weak_count::__release_weak(v98);
    }
  }
LABEL_123:
  v101 = v146;
  if (v146)
  {
    v102 = (unint64_t *)&v146->__shared_owners_;
    do
      v103 = __ldaxr(v102);
    while (__stlxr(v103 - 1, v102));
    if (!v103)
    {
      ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
      std::__shared_weak_count::__release_weak(v101);
    }
  }
  v104 = v144;
  if (v144)
  {
    v105 = (unint64_t *)&v144->__shared_owners_;
    do
      v106 = __ldaxr(v105);
    while (__stlxr(v106 - 1, v105));
    if (!v106)
    {
      ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
      std::__shared_weak_count::__release_weak(v104);
    }
  }
  v107 = v155;
  if (v155)
  {
    v108 = (unint64_t *)&v155->__shared_owners_;
    do
      v109 = __ldaxr(v108);
    while (__stlxr(v109 - 1, v108));
    if (!v109)
    {
      ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
      std::__shared_weak_count::__release_weak(v107);
    }
  }
  v110 = v153;
  if (v153)
  {
    v111 = (unint64_t *)&v153->__shared_owners_;
    do
      v112 = __ldaxr(v111);
    while (__stlxr(v112 - 1, v111));
    if (!v112)
    {
      ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
      std::__shared_weak_count::__release_weak(v110);
      v113 = v151;
      if (v151)
        goto LABEL_143;
      goto LABEL_146;
    }
  }
  v113 = v151;
  if (!v151)
    goto LABEL_146;
LABEL_143:
  v114 = (unint64_t *)&v113->__shared_owners_;
  do
    v115 = __ldaxr(v114);
  while (__stlxr(v115 - 1, v114));
  if (v115)
  {
LABEL_146:
    sub_2396FCD14((uint64_t)v179);
    v116 = v181;
    if (v181 != v180)
      goto LABEL_147;
LABEL_152:
    v117 = 4;
    v116 = v180;
LABEL_153:
    (*(void (**)(void))(*v116 + 8 * v117))();
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v113->__on_zero_shared)(v113);
    std::__shared_weak_count::__release_weak(v113);
    sub_2396FCD14((uint64_t)v179);
    v116 = v181;
    if (v181 == v180)
      goto LABEL_152;
LABEL_147:
    if (v116)
    {
      v117 = 5;
      goto LABEL_153;
    }
  }
  return v97;
}

void sub_23952119C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *__p,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60)
{
  uint64_t v60;
  _QWORD *v62;
  uint64_t v63;

  sub_23942FEFC(&a53);
  sub_23942FEFC(&a60);
  sub_2396FCD14((uint64_t)&STACK[0x568]);
  v62 = *(_QWORD **)(v60 - 120);
  if (v62 == (_QWORD *)(v60 - 144))
  {
    v63 = 4;
    v62 = (_QWORD *)(v60 - 144);
  }
  else
  {
    if (!v62)
      goto LABEL_6;
    v63 = 5;
  }
  (*(void (**)(void))(*v62 + 8 * v63))();
LABEL_6:
  _Unwind_Resume(a1);
}

uint64_t sub_2395213FC(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v5;

  v5 = sub_2396FD7B0(a1);
  if ((_DWORD)v5 && a3)
    sub_2394202DC((_QWORD *)(a2 + 176), 2);
  return v5;
}

uint64_t sub_239521448(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _QWORD *a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  _QWORD *v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  char v25;
  char v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  _BYTE *v31;
  _BYTE *v32;
  int64_t v33;
  char *v34;
  char *v35;
  unsigned int *v36;
  unsigned int *v37;
  unint64_t v38;
  unsigned int *v39;
  uint64_t v40;
  int v41;
  void *v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  _QWORD *v79;
  uint64_t v80;
  std::chrono::system_clock::time_point v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t *p_shared_owners;
  unint64_t v86;
  unint64_t *v87;
  unint64_t v88;
  unint64_t *v89;
  unint64_t v90;
  char v91;
  _QWORD *v92;
  uint64_t v93;
  _QWORD *v94;
  uint64_t v95;
  _QWORD *v96;
  uint64_t v97;
  _QWORD *v98;
  uint64_t v99;
  float v100;
  std::chrono::system_clock::time_point v101;
  uint64_t v102;
  uint64_t v103;
  _QWORD *v104;
  unint64_t v105;
  float v106;
  _BYTE *v107;
  int v108;
  int v110;
  unsigned int v111;
  _QWORD *v112;
  std::chrono::system_clock::time_point v113;
  uint64_t v114;
  unint64_t *v115;
  unint64_t v116;
  unint64_t *v117;
  unint64_t v118;
  unint64_t *v119;
  unint64_t v120;
  char v121;
  _QWORD *v122;
  uint64_t v123;
  _QWORD *v124;
  uint64_t v125;
  std::chrono::system_clock::time_point v126;
  std::chrono::system_clock::time_point v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  unint64_t *v131;
  unint64_t v132;
  unint64_t *v133;
  unint64_t v134;
  unint64_t *v135;
  unint64_t v136;
  char v137;
  _QWORD *v138;
  uint64_t v139;
  _QWORD *v140;
  uint64_t v141;
  _QWORD *v142;
  uint64_t v143;
  void *v144;
  std::chrono::system_clock::time_point v145;
  std::chrono::system_clock::time_point v146;
  uint64_t v147;
  uint64_t v148;
  _BYTE *v149;
  void *v150;
  unint64_t *v151;
  unint64_t v152;
  unint64_t *v153;
  unint64_t v154;
  unint64_t *v155;
  unint64_t v156;
  char v157;
  _QWORD *v158;
  uint64_t v159;
  _QWORD *v160;
  uint64_t v161;
  std::chrono::system_clock::time_point v162;
  char v163;
  int v164;
  uint64_t v165;
  __int128 v166;
  std::__shared_weak_count *v167;
  uint64_t v168;
  std::__shared_weak_count *v169;
  uint64_t v170;
  std::__shared_weak_count *v171;
  __int128 v172;
  std::__shared_weak_count *v173;
  uint64_t v174;
  std::__shared_weak_count *v175;
  uint64_t v176;
  std::__shared_weak_count *v177;
  void *v178;
  char v179;
  void *v180[2];
  uint64_t v181;
  __int128 v182;
  std::__shared_weak_count *v183;
  uint64_t v184;
  std::__shared_weak_count *v185;
  uint64_t v186;
  std::__shared_weak_count *v187;
  void *v188;
  char v189;
  __int128 v190;
  std::__shared_weak_count *v191;
  uint64_t v192;
  std::__shared_weak_count *v193;
  uint64_t v194;
  std::__shared_weak_count *v195;
  void *v196;
  char v197;
  void *v198;
  void *v199;
  uint64_t v200;
  void *v201;
  unint64_t v202;
  __int128 v203;
  uint64_t v204;
  uint64_t v205[2];
  void *v206;
  void *v207;
  uint64_t v208;
  void *v209;
  void *v210;
  char *v211;
  __int128 v212;
  std::__shared_weak_count *v213;
  uint64_t v214;
  std::__shared_weak_count *v215;
  uint64_t v216;
  std::__shared_weak_count *v217;
  __int128 v218;
  std::__shared_weak_count *v219;
  uint64_t v220;
  std::__shared_weak_count *v221;
  uint64_t v222;
  std::__shared_weak_count *v223;
  __int128 v224;
  std::__shared_weak_count *v225;
  uint64_t v226;
  std::__shared_weak_count *v227;
  uint64_t v228;
  std::__shared_weak_count *v229;
  __int128 v230;
  std::__shared_weak_count *v231;
  uint64_t v232;
  std::__shared_weak_count *v233;
  uint64_t v234;
  std::__shared_weak_count *v235;
  char __p[23];
  char v237;
  _QWORD v238[8];
  _BYTE v239[64];
  _BYTE v240[24];
  _BYTE *v241;
  _BYTE v242[24];
  _BYTE *v243;
  _QWORD v244[8];
  _BYTE v245[64];
  _BYTE v246[24];
  _BYTE *v247;
  _BYTE v248[24];
  _BYTE *v249;
  _QWORD v250[8];
  _BYTE v251[24];
  _BYTE *v252;
  _BYTE v253[64];
  _BYTE v254[24];
  _BYTE *v255;
  _BYTE v256[24];
  _BYTE *v257;
  _QWORD v258[8];
  _BYTE v259[64];
  _BYTE v260[24];
  _BYTE *v261;
  _BYTE v262[24];
  _BYTE *v263;
  _QWORD v264[8];
  _BYTE v265[24];
  _BYTE *v266;
  _BYTE v267[24];
  _BYTE *v268;
  _BYTE v269[24];
  _BYTE *v270;
  _BYTE v271[24];
  _BYTE *v272;
  _BYTE v273[24];
  _BYTE *v274;
  _BYTE v275[568];
  _QWORD v276[3];
  _QWORD *v277;
  uint64_t v278;

  v278 = *MEMORY[0x24BDAC8D0];
  kdebug_trace();
  if (!*(_QWORD *)(a4 + 24))
    sub_239EC02F8();
  if (!*(_QWORD *)(a1 + 96))
    sub_239EC0328();
  v237 = 7;
  strcpy(__p, "Current");
  sub_23955CBE8();
  v276[0] = &off_250ADD710;
  v276[1] = a6;
  v277 = v276;
  sub_2396FD800(a6, (uint64_t)v273);
  *(_QWORD *)&v230 = 0x42C8000000000000;
  sub_2396FCC68(v275, 100, v273, &v230, 1.0);
  v17 = v274;
  if (v274 == v273)
  {
    v18 = 4;
    v17 = v273;
  }
  else
  {
    if (!v274)
      goto LABEL_8;
    v18 = 5;
  }
  (*(void (**)(void))(*v17 + 8 * v18))();
LABEL_8:
  sub_2396FD534(&v230, v275, 15);
  sub_2396FD534(&v224, v275, 65);
  sub_2396FD534(&v218, v275, 15);
  sub_2396FD534(&v212, v275, 5);
  if ((_BYTE)a10)
  {
    v19 = *(_OWORD *)a3;
    *(_QWORD *)(a9 + 261) = *(_QWORD *)(a3 + 13);
    *(_OWORD *)(a9 + 248) = v19;
    std::string::operator=((std::string *)(a9 + 272), (const std::string *)(a3 + 24));
    if (a9 + 248 != a3)
      sub_23945D3D0((_QWORD *)(a9 + 296), *(char **)(a3 + 48), *(char **)(a3 + 56), (uint64_t)(*(_QWORD *)(a3 + 56) - *(_QWORD *)(a3 + 48)) >> 3);
    v20 = *(_OWORD *)(a3 + 72);
    v21 = *(_OWORD *)(a3 + 88);
    *(_WORD *)(a9 + 352) = *(_WORD *)(a3 + 104);
    *(_OWORD *)(a9 + 320) = v20;
    *(_OWORD *)(a9 + 336) = v21;
  }
  v22 = a6[3];
  if (!v22)
    goto LABEL_15;
  if ((_QWORD *)v22 != a6)
  {
    v22 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v22 + 16))(v22);
LABEL_15:
    v270 = (_BYTE *)v22;
    goto LABEL_17;
  }
  v270 = v269;
  (*(void (**)(_QWORD *, _BYTE *))(*a6 + 24))(a6, v269);
LABEL_17:
  v23 = v271;
  v24 = a6[7];
  if (!v24)
  {
LABEL_20:
    v272 = (_BYTE *)v24;
    goto LABEL_22;
  }
  if ((_QWORD *)v24 != a6 + 4)
  {
    v24 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v24 + 16))(v24);
    goto LABEL_20;
  }
  v272 = v271;
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v24 + 24))(v24, v271);
LABEL_22:
  v25 = sub_2396FD7B0((uint64_t)v269);
  v26 = v25 ^ 1;
  if (!(_BYTE)a10)
    v26 = 1;
  if ((v26 & 1) == 0)
    sub_2394202DC((_QWORD *)(a9 + 176), 2);
  if (v272 == v271)
  {
    v27 = 4;
  }
  else
  {
    if (!v272)
      goto LABEL_31;
    v27 = 5;
    v23 = v272;
  }
  (*(void (**)(_QWORD *))(*v23 + 8 * v27))(v23);
LABEL_31:
  v28 = v270;
  if (v270 == v269)
  {
    v29 = 4;
    v28 = v269;
  }
  else
  {
    if (!v270)
      goto LABEL_36;
    v29 = 5;
  }
  (*(void (**)(void))(*v28 + 8 * v29))();
LABEL_36:
  if ((v25 & 1) != 0)
  {
    v30 = 0;
    goto LABEL_70;
  }
  v165 = a7;
  v164 = *(unsigned __int8 *)(a3 + 10);
  v210 = 0;
  v209 = 0;
  v211 = 0;
  v32 = *(_BYTE **)(a3 + 48);
  v31 = *(_BYTE **)(a3 + 56);
  v33 = v31 - v32;
  if (v31 == v32)
  {
    v35 = 0;
    v34 = 0;
  }
  else
  {
    if (v33 < 0)
      sub_2394189F8();
    v34 = (char *)operator new(v31 - v32);
    v209 = v34;
    v35 = &v34[8 * (v33 >> 3)];
    v211 = v35;
    memcpy(v34, v32, v33);
    v210 = v35;
  }
  v37 = *(unsigned int **)(a2 + 24);
  v36 = *(unsigned int **)(a2 + 32);
  v207 = 0;
  v206 = 0;
  v208 = 0;
  if (v34 == v35)
  {
    if ((_BYTE)a10)
    {
      v41 = 7001;
      goto LABEL_64;
    }
    v30 = 0;
  }
  else
  {
    if (v37 != v36)
    {
      v38 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
      v39 = v37;
      while (v38 > *v39 && v38 > v39[1] && v38 > v39[2])
      {
        v39 += 3;
        if (v39 == v36)
          goto LABEL_49;
      }
      goto LABEL_60;
    }
LABEL_49:
    if (*(_BYTE *)(a2 + 104)
      && 0xAAAAAAAAAAAAAAABLL * (*(_QWORD *)(a2 + 88) - *(_QWORD *)(a2 + 80)) != 0xAAAAAAAAAAAAAAABLL
                                                                               * ((uint64_t)(*(_QWORD *)(a2 + 8)
                                                                                          - *(_QWORD *)a2) >> 2)
      || *(_BYTE *)(a2 + 72) && *(_QWORD *)(a2 + 56) - *(_QWORD *)(a2 + 48) != *(_QWORD *)(a2 + 8) - *(_QWORD *)a2
      || (v40 = (char *)v36 - (char *)v37, *(_BYTE *)(a2 + 136)) && *(_QWORD *)(a2 + 120) - *(_QWORD *)(a2 + 112) != v40
      || *(_QWORD *)(a2 + 8) == *(_QWORD *)a2
      || v37 == v36)
    {
LABEL_60:
      if (!(_BYTE)a10)
        goto LABEL_65;
      v41 = 7003;
LABEL_64:
      sub_2394202DC((_QWORD *)(a9 + 176), v41);
LABEL_65:
      v30 = 0;
      v42 = v206;
      if (!v206)
        goto LABEL_68;
      goto LABEL_66;
    }
    if (*(_DWORD *)(a3 + 92) > 0x2000u)
    {
      if (!(_BYTE)a10)
        goto LABEL_65;
      v41 = 7007;
      goto LABEL_64;
    }
    sub_2394B5624(a1, (uint64_t)&v206, 1);
    v42 = v206;
    if (v207 != v206)
    {
      sub_239536838(a3 + 24, (unint64_t **)&v209, v205);
      if (!v205[0])
      {
        v30 = 0;
        goto LABEL_202;
      }
      v203 = 0uLL;
      v204 = 0;
      LOBYTE(v198) = 0;
      sub_239522D40(&v201, 0xAAAAAAAAAAAAAAABLL * (v40 >> 2), (unsigned __int8 *)&v198);
      v198 = 0;
      v199 = 0;
      v200 = 0;
      if ((sub_2396FD7B0((uint64_t)a6) & 1) != 0)
        goto LABEL_196;
      sub_23941A4FC(&v196, "Current");
      sub_23955CBE8();
      if (v197 < 0)
        operator delete(v196);
      v82.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
      v83 = v205[0];
      sub_2394A4DCC((uint64_t)v267, a4);
      sub_2394A4DCC((uint64_t)v265, a5);
      v84 = (uint64_t)v277;
      if (v277)
      {
        if (v277 == v276)
        {
          v263 = v262;
          (*(void (**)(_QWORD *, _BYTE *))(v276[0] + 24))(v276, v262);
LABEL_152:
          v190 = v230;
          v191 = v231;
          if (v231)
          {
            p_shared_owners = (unint64_t *)&v231->__shared_owners_;
            do
              v86 = __ldxr(p_shared_owners);
            while (__stxr(v86 + 1, p_shared_owners));
          }
          v192 = v232;
          v193 = v233;
          if (v233)
          {
            v87 = (unint64_t *)&v233->__shared_owners_;
            do
              v88 = __ldxr(v87);
            while (__stxr(v88 + 1, v87));
          }
          v194 = v234;
          v195 = v235;
          if (v235)
          {
            v89 = (unint64_t *)&v235->__shared_owners_;
            do
              v90 = __ldxr(v89);
            while (__stxr(v90 + 1, v89));
          }
          sub_2394B11D4((uint64_t)v260, (uint64_t)&v190);
          sub_2396FD600((uint64_t)v264, (uint64_t)v262, (uint64_t)v260);
          v91 = sub_23953C408(a1, a2, v83, (uint64_t)v267, (uint64_t)v265, a3, (uint64_t)v264, (uint64_t)&v203, a9, a10, 0, 0);
          sub_23942FE80(v264);
          v92 = v261;
          if (v261 == v260)
          {
            v93 = 4;
            v92 = v260;
          }
          else
          {
            if (!v261)
              goto LABEL_166;
            v93 = 5;
          }
          (*(void (**)(void))(*v92 + 8 * v93))();
LABEL_166:
          sub_23942FEFC(&v190);
          v94 = v263;
          if (v263 == v262)
          {
            v95 = 4;
            v94 = v262;
          }
          else
          {
            if (!v263)
              goto LABEL_171;
            v95 = 5;
          }
          (*(void (**)(void))(*v94 + 8 * v95))();
LABEL_171:
          v96 = v266;
          if (v266 == v265)
          {
            v97 = 4;
            v96 = v265;
          }
          else
          {
            if (!v266)
              goto LABEL_176;
            v97 = 5;
          }
          (*(void (**)(void))(*v96 + 8 * v97))();
LABEL_176:
          v98 = v268;
          if (v268 == v267)
          {
            v99 = 4;
            v98 = v267;
          }
          else
          {
            if (!v268)
              goto LABEL_181;
            v99 = 5;
          }
          (*(void (**)(void))(*v98 + 8 * v99))();
LABEL_181:
          if ((v91 & 1) == 0)
          {
            sub_2394B2548((uint64_t)v259, (uint64_t)a6);
            sub_2395213FC((uint64_t)v259, a9, a10);
            v107 = v259;
            goto LABEL_195;
          }
          v100 = sub_23951D214((uint64_t *)&v203);
          v101.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
          if ((_BYTE)a10)
          {
            *(float *)(a9 + 16) = v100;
            *(double *)(a9 + 144) = (double)(v101.__d_.__rep_ - v82.__d_.__rep_) / 1000000.0;
          }
          if ((sub_2396FD7B0((uint64_t)a6) & 1) != 0)
            goto LABEL_196;
          v103 = *((_QWORD *)&v203 + 1);
          v102 = v203;
          v104 = v201;
          if ((_QWORD)v203 != *((_QWORD *)&v203 + 1))
          {
            v105 = 0;
            do
            {
              v106 = *(float *)(v102 + 48);
              if (v106 == 0.0)
                goto LABEL_187;
              if (v106 < 0.0)
                v106 = 0.0 - v106;
              if (v106 <= 0.000001)
LABEL_187:
                *(_QWORD *)((char *)v104 + ((v105 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v105;
              v102 += 56;
              ++v105;
            }
            while (v102 != v103);
            v104 = v201;
          }
          v108 = v202 & 0x3F;
          if (v202 <= 0x3F && v108 == 0)
          {
            v111 = 0;
          }
          else
          {
            v110 = 0;
            v111 = 0;
            v112 = &v104[v202 >> 6];
            do
            {
              v111 += (*v104 >> v110) & 1;
              v104 += v110 == 63;
              if (v110 == 63)
                v110 = 0;
              else
                ++v110;
            }
            while (v110 != v108 || v104 != v112);
          }
          if ((_BYTE)a10)
            *(_QWORD *)(a9 + 8) = v111;
          sub_23941A4FC(&v188, "Current");
          sub_23955CBE8();
          if (v189 < 0)
            operator delete(v188);
          v113.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
          v114 = (uint64_t)v277;
          if (v277)
          {
            if (v277 == v276)
            {
              v257 = v256;
              (*(void (**)(_QWORD *, _BYTE *))(v276[0] + 24))(v276, v256);
LABEL_226:
              v182 = v224;
              v183 = v225;
              if (v225)
              {
                v115 = (unint64_t *)&v225->__shared_owners_;
                do
                  v116 = __ldxr(v115);
                while (__stxr(v116 + 1, v115));
              }
              v184 = v226;
              v185 = v227;
              if (v227)
              {
                v117 = (unint64_t *)&v227->__shared_owners_;
                do
                  v118 = __ldxr(v117);
                while (__stxr(v118 + 1, v117));
              }
              v186 = v228;
              v187 = v229;
              if (v229)
              {
                v119 = (unint64_t *)&v229->__shared_owners_;
                do
                  v120 = __ldxr(v119);
                while (__stxr(v120 + 1, v119));
              }
              sub_2394B11D4((uint64_t)v254, (uint64_t)&v182);
              sub_2396FD600((uint64_t)v258, (uint64_t)v256, (uint64_t)v254);
              v121 = sub_23951B5AC(a2, (uint64_t *)&v203, (uint64_t)&v206, a3, v258, (uint64_t *)&v198, v100);
              sub_23942FE80(v258);
              v122 = v255;
              if (v255 == v254)
              {
                v123 = 4;
                v122 = v254;
              }
              else
              {
                if (!v255)
                  goto LABEL_240;
                v123 = 5;
              }
              (*(void (**)(void))(*v122 + 8 * v123))();
LABEL_240:
              sub_23942FEFC(&v182);
              v124 = v257;
              if (v257 == v256)
              {
                v125 = 4;
                v124 = v256;
              }
              else
              {
                if (!v257)
                {
LABEL_245:
                  if ((v121 & 1) != 0)
                  {
                    *(_OWORD *)v180 = v203;
                    v203 = 0uLL;
                    v181 = v204;
                    v204 = 0;
                    sub_239520780(v180);
                    v126.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
                    if ((_BYTE)a10)
                      *(double *)(a9 + 152) = (double)(v126.__d_.__rep_ - v113.__d_.__rep_) / 1000000.0;
                    if ((sub_2396FD7B0((uint64_t)a6) & 1) == 0)
                    {
                      sub_23941A4FC(&v178, "Current");
                      sub_23955CBE8();
                      if (v179 < 0)
                        operator delete(v178);
                      v127.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
                      v180[0] = 0;
                      v180[1] = 0;
                      v181 = 0;
                      v128 = v205[0];
                      sub_2394A4DCC((uint64_t)v251, a4);
                      v129 = (uint64_t)v277;
                      if (v277)
                      {
                        if (v277 == v276)
                        {
                          v249 = v248;
                          (*(void (**)(_QWORD *, _BYTE *))(v276[0] + 24))(v276, v248);
                          v130 = v165;
LABEL_258:
                          v172 = v218;
                          v173 = v219;
                          if (v219)
                          {
                            v131 = (unint64_t *)&v219->__shared_owners_;
                            do
                              v132 = __ldxr(v131);
                            while (__stxr(v132 + 1, v131));
                          }
                          v174 = v220;
                          v175 = v221;
                          if (v221)
                          {
                            v133 = (unint64_t *)&v221->__shared_owners_;
                            do
                              v134 = __ldxr(v133);
                            while (__stxr(v134 + 1, v133));
                          }
                          v176 = v222;
                          v177 = v223;
                          if (v223)
                          {
                            v135 = (unint64_t *)&v223->__shared_owners_;
                            do
                              v136 = __ldxr(v135);
                            while (__stxr(v136 + 1, v135));
                          }
                          sub_2394B11D4((uint64_t)v246, (uint64_t)&v172);
                          sub_2396FD600((uint64_t)v250, (uint64_t)v248, (uint64_t)v246);
                          v137 = sub_239556728((_QWORD *)a2, a1, (uint64_t)&v198, v128, (uint64_t)v251, a3, (uint64_t)&v201, v250, v130, (char **)v180, a9, a10);
                          sub_23942FE80(v250);
                          v138 = v247;
                          if (v247 == v246)
                          {
                            v139 = 4;
                            v138 = v246;
                          }
                          else
                          {
                            if (!v247)
                              goto LABEL_272;
                            v139 = 5;
                          }
                          (*(void (**)(void))(*v138 + 8 * v139))();
LABEL_272:
                          sub_23942FEFC(&v172);
                          v140 = v249;
                          if (v249 == v248)
                          {
                            v141 = 4;
                            v140 = v248;
                          }
                          else
                          {
                            if (!v249)
                              goto LABEL_277;
                            v141 = 5;
                          }
                          (*(void (**)(void))(*v140 + 8 * v141))();
LABEL_277:
                          v142 = v252;
                          if (v252 == v251)
                          {
                            v143 = 4;
                            v142 = v251;
                          }
                          else
                          {
                            if (!v252)
                              goto LABEL_282;
                            v143 = 5;
                          }
                          (*(void (**)(void))(*v142 + 8 * v143))();
LABEL_282:
                          if ((v137 & 1) == 0)
                          {
                            sub_2394B2548((uint64_t)v245, (uint64_t)a6);
                            v149 = v245;
                            sub_2395213FC((uint64_t)v245, a9, a10);
LABEL_295:
                            sub_23942FE80(v149);
                            goto LABEL_296;
                          }
                          if (*(_BYTE *)(a3 + 105))
                            sub_23955CE54(&v198, v165);
                          v144 = v198;
                          v199 = 0;
                          v200 = 0;
                          v198 = 0;
                          if (v144)
                            operator delete(v144);
                          v145.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
                          if ((_BYTE)a10)
                          {
                            *(double *)(a9 + 160) = (double)(v145.__d_.__rep_ - v127.__d_.__rep_) / 1000000.0;
                            sub_239522CD0(a9 + 248, (__int128 *)a3);
                          }
                          if ((sub_2396FD7B0((uint64_t)a6) & 1) != 0)
                          {
LABEL_296:
                            v30 = 0;
                            v150 = v180[0];
                            if (v180[0])
                            {
LABEL_297:
                              v180[1] = v150;
                              operator delete(v150);
                            }
LABEL_197:
                            if (v198)
                            {
                              v199 = v198;
                              operator delete(v198);
                            }
                            if (v201)
                              operator delete(v201);
                            sub_239520780((void **)&v203);
LABEL_202:
                            sub_239416DA0((uint64_t)v205);
                            v42 = v206;
                            if (!v206)
                              goto LABEL_68;
LABEL_66:
                            v207 = v42;
                            operator delete(v42);
                            goto LABEL_68;
                          }
                          v146.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
                          v147 = v205[0];
                          v148 = (uint64_t)v277;
                          if (v277)
                          {
                            if (v277 == v276)
                            {
                              v243 = v242;
                              (*(void (**)(_QWORD *, _BYTE *))(v276[0] + 24))(v276, v242);
LABEL_299:
                              v166 = v212;
                              v167 = v213;
                              if (v213)
                              {
                                v151 = (unint64_t *)&v213->__shared_owners_;
                                do
                                  v152 = __ldxr(v151);
                                while (__stxr(v152 + 1, v151));
                              }
                              v168 = v214;
                              v169 = v215;
                              if (v215)
                              {
                                v153 = (unint64_t *)&v215->__shared_owners_;
                                do
                                  v154 = __ldxr(v153);
                                while (__stxr(v154 + 1, v153));
                              }
                              v170 = v216;
                              v171 = v217;
                              if (v217)
                              {
                                v155 = (unint64_t *)&v217->__shared_owners_;
                                do
                                  v156 = __ldxr(v155);
                                while (__stxr(v156 + 1, v155));
                              }
                              sub_2394B11D4((uint64_t)v240, (uint64_t)&v166);
                              sub_2396FD600((uint64_t)v244, (uint64_t)v242, (uint64_t)v240);
                              v157 = sub_239520800(v165, v147, v244, *(_DWORD *)(a3 + 72), *(unsigned __int8 *)(a3 + 8), *(unsigned __int8 *)(a3 + 9), (uint64_t)v180, 1, a9, a10);
                              sub_23942FE80(v244);
                              v158 = v241;
                              if (v241 == v240)
                              {
                                v159 = 4;
                                v158 = v240;
                              }
                              else
                              {
                                if (!v241)
                                  goto LABEL_313;
                                v159 = 5;
                              }
                              (*(void (**)(void))(*v158 + 8 * v159))();
LABEL_313:
                              sub_23942FEFC(&v166);
                              v160 = v243;
                              if (v243 == v242)
                              {
                                v161 = 4;
                                v160 = v242;
                              }
                              else
                              {
                                if (!v243)
                                {
LABEL_318:
                                  if ((v157 & 1) != 0)
                                  {
                                    v162.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
                                    if ((_BYTE)a10)
                                      *(double *)(a9 + 168) = (double)(v162.__d_.__rep_ - v146.__d_.__rep_) / 1000000.0;
                                    if (!v164
                                      || (sub_23952CB40(v165, v205[0], 1, 3.0),
                                          sub_2394B2548((uint64_t)v238, (uint64_t)a6),
                                          v163 = sub_2395213FC((uint64_t)v238, a9, a10),
                                          sub_23942FE80(v238),
                                          (v163 & 1) == 0))
                                    {
                                      kdebug_trace();
                                      v30 = 1;
                                      v150 = v180[0];
                                      if (!v180[0])
                                        goto LABEL_197;
                                      goto LABEL_297;
                                    }
                                    goto LABEL_296;
                                  }
                                  sub_2394B2548((uint64_t)v239, (uint64_t)a6);
                                  v149 = v239;
                                  sub_2395213FC((uint64_t)v239, a9, a10);
                                  goto LABEL_295;
                                }
                                v161 = 5;
                              }
                              (*(void (**)(void))(*v160 + 8 * v161))();
                              goto LABEL_318;
                            }
                            v148 = (*(uint64_t (**)(void))(*v277 + 16))();
                          }
                          v243 = (_BYTE *)v148;
                          goto LABEL_299;
                        }
                        v129 = (*(uint64_t (**)(void))(*v277 + 16))();
                        v130 = v165;
                      }
                      else
                      {
                        v130 = v165;
                      }
                      v249 = (_BYTE *)v129;
                      goto LABEL_258;
                    }
LABEL_196:
                    v30 = 0;
                    goto LABEL_197;
                  }
                  sub_2394B2548((uint64_t)v253, (uint64_t)a6);
                  sub_2395213FC((uint64_t)v253, a9, a10);
                  v107 = v253;
LABEL_195:
                  sub_23942FE80(v107);
                  goto LABEL_196;
                }
                v125 = 5;
              }
              (*(void (**)(void))(*v124 + 8 * v125))();
              goto LABEL_245;
            }
            v114 = (*(uint64_t (**)(void))(*v277 + 16))();
          }
          v257 = (_BYTE *)v114;
          goto LABEL_226;
        }
        v84 = (*(uint64_t (**)(_QWORD *))(*v277 + 16))(v277);
      }
      v263 = (_BYTE *)v84;
      goto LABEL_152;
    }
    if ((_BYTE)a10)
    {
      v41 = 7004;
      goto LABEL_64;
    }
    v30 = 0;
    if (v206)
      goto LABEL_66;
  }
LABEL_68:
  if (v209)
  {
    v210 = v209;
    operator delete(v209);
  }
LABEL_70:
  v43 = v217;
  if (v217)
  {
    v44 = (unint64_t *)&v217->__shared_owners_;
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 - 1, v44));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
    }
  }
  v46 = v215;
  if (v215)
  {
    v47 = (unint64_t *)&v215->__shared_owners_;
    do
      v48 = __ldaxr(v47);
    while (__stlxr(v48 - 1, v47));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
      std::__shared_weak_count::__release_weak(v46);
    }
  }
  v49 = v213;
  if (v213)
  {
    v50 = (unint64_t *)&v213->__shared_owners_;
    do
      v51 = __ldaxr(v50);
    while (__stlxr(v51 - 1, v50));
    if (!v51)
    {
      ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
      std::__shared_weak_count::__release_weak(v49);
    }
  }
  v52 = v223;
  if (v223)
  {
    v53 = (unint64_t *)&v223->__shared_owners_;
    do
      v54 = __ldaxr(v53);
    while (__stlxr(v54 - 1, v53));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
    }
  }
  v55 = v221;
  if (v221)
  {
    v56 = (unint64_t *)&v221->__shared_owners_;
    do
      v57 = __ldaxr(v56);
    while (__stlxr(v57 - 1, v56));
    if (!v57)
    {
      ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
      std::__shared_weak_count::__release_weak(v55);
    }
  }
  v58 = v219;
  if (v219)
  {
    v59 = (unint64_t *)&v219->__shared_owners_;
    do
      v60 = __ldaxr(v59);
    while (__stlxr(v60 - 1, v59));
    if (!v60)
    {
      ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
      std::__shared_weak_count::__release_weak(v58);
    }
  }
  v61 = v229;
  if (v229)
  {
    v62 = (unint64_t *)&v229->__shared_owners_;
    do
      v63 = __ldaxr(v62);
    while (__stlxr(v63 - 1, v62));
    if (!v63)
    {
      ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
      std::__shared_weak_count::__release_weak(v61);
    }
  }
  v64 = v227;
  if (v227)
  {
    v65 = (unint64_t *)&v227->__shared_owners_;
    do
      v66 = __ldaxr(v65);
    while (__stlxr(v66 - 1, v65));
    if (!v66)
    {
      ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
      std::__shared_weak_count::__release_weak(v64);
    }
  }
  v67 = v225;
  if (v225)
  {
    v68 = (unint64_t *)&v225->__shared_owners_;
    do
      v69 = __ldaxr(v68);
    while (__stlxr(v69 - 1, v68));
    if (!v69)
    {
      ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
      std::__shared_weak_count::__release_weak(v67);
    }
  }
  v70 = v235;
  if (v235)
  {
    v71 = (unint64_t *)&v235->__shared_owners_;
    do
      v72 = __ldaxr(v71);
    while (__stlxr(v72 - 1, v71));
    if (!v72)
    {
      ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
      std::__shared_weak_count::__release_weak(v70);
    }
  }
  v73 = v233;
  if (!v233)
    goto LABEL_124;
  v74 = (unint64_t *)&v233->__shared_owners_;
  do
    v75 = __ldaxr(v74);
  while (__stlxr(v75 - 1, v74));
  if (!v75)
  {
    ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
    std::__shared_weak_count::__release_weak(v73);
    v76 = v231;
    if (!v231)
      goto LABEL_128;
  }
  else
  {
LABEL_124:
    v76 = v231;
    if (!v231)
      goto LABEL_128;
  }
  v77 = (unint64_t *)&v76->__shared_owners_;
  do
    v78 = __ldaxr(v77);
  while (__stlxr(v78 - 1, v77));
  if (v78)
  {
LABEL_128:
    sub_2396FCD14((uint64_t)v275);
    v79 = v277;
    if (v277 != v276)
      goto LABEL_129;
LABEL_134:
    v80 = 4;
    v79 = v276;
    goto LABEL_135;
  }
  ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
  std::__shared_weak_count::__release_weak(v76);
  sub_2396FCD14((uint64_t)v275);
  v79 = v277;
  if (v277 == v276)
    goto LABEL_134;
LABEL_129:
  if (v79)
  {
    v80 = 5;
LABEL_135:
    (*(void (**)(void))(*v79 + 8 * v80))();
  }
  return v30;
}

void sub_2395227A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,void *__p,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,void *a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,void *a58,uint64_t a59,uint64_t a60,void *a61,uint64_t a62,uint64_t a63)
{
  void *a64;
  void *a67;
  char a71;
  uint64_t v71;
  void *v73;
  void *v74;
  uint64_t v75;

  sub_23942FE80(&STACK[0x348]);
  if (__p)
    operator delete(__p);
  if (a61)
    operator delete(a61);
  if (a64)
    operator delete(a64);
  sub_239520780(&a67);
  sub_239416DA0((uint64_t)&a71);
  v73 = (void *)STACK[0x200];
  if (STACK[0x200])
  {
    STACK[0x208] = (unint64_t)v73;
    operator delete(v73);
  }
  v74 = (void *)STACK[0x218];
  if (STACK[0x218])
  {
    STACK[0x220] = (unint64_t)v74;
    operator delete(v74);
  }
  sub_23942FEFC(&STACK[0x230]);
  sub_23942FEFC(&STACK[0x270]);
  sub_23942FEFC(&STACK[0x2B0]);
  sub_23942FEFC(&STACK[0x2F0]);
  sub_2396FCD14((uint64_t)&STACK[0x748]);
  v75 = *(_QWORD *)(v71 - 120);
  if (v75 == v71 - 144)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)(v71 - 144) + 32))(v71 - 144);
    _Unwind_Resume(a1);
  }
  if (v75)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v75 + 40))(v75);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_239522CD0(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;

  v4 = *a2;
  *(_QWORD *)(a1 + 13) = *(_QWORD *)((char *)a2 + 13);
  *(_OWORD *)a1 = v4;
  std::string::operator=((std::string *)(a1 + 24), (const std::string *)a2 + 1);
  if ((__int128 *)a1 != a2)
    sub_23945D3D0((_QWORD *)(a1 + 48), *((char **)a2 + 6), *((char **)a2 + 7), (uint64_t)(*((_QWORD *)a2 + 7) - *((_QWORD *)a2 + 6)) >> 3);
  v5 = *(__int128 *)((char *)a2 + 72);
  v6 = *(__int128 *)((char *)a2 + 88);
  *(_WORD *)(a1 + 104) = *((_WORD *)a2 + 52);
  *(_OWORD *)(a1 + 88) = v6;
  *(_OWORD *)(a1 + 72) = v5;
  return a1;
}

void **sub_239522D40(void **a1, unint64_t a2, unsigned __int8 *a3)
{
  unint64_t v6;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    if ((a2 & 0x8000000000000000) != 0)
      sub_2394189F8();
    v6 = ((a2 - 1) >> 6) + 1;
    *a1 = operator new(8 * v6);
    a1[1] = 0;
    a1[2] = (void *)v6;
    sub_23942D8C8(a1, a2, *a3);
  }
  return a1;
}

uint64_t sub_239522DB4(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(_QWORD *)(a1 + 56) = v2;
    operator delete(v2);
  }
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  return a1;
}

void sub_239522E08()
{
  JUMPOUT(0x23B83E31CLL);
}

_QWORD *sub_239522E1C(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_250ADD6C8;
  result[1] = v3;
  return result;
}

uint64_t sub_239522E50(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_250ADD6C8;
  a2[1] = v2;
  return result;
}

uint64_t sub_239522E6C(uint64_t a1)
{
  return sub_2396FD7B0(*(_QWORD *)(a1 + 8));
}

void sub_239522E78()
{
  JUMPOUT(0x23B83E31CLL);
}

_QWORD *sub_239522E8C(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_250ADD710;
  result[1] = v3;
  return result;
}

uint64_t sub_239522EC0(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_250ADD710;
  a2[1] = v2;
  return result;
}

uint64_t sub_239522EDC(uint64_t a1)
{
  return sub_2396FD7B0(*(_QWORD *)(a1 + 8));
}

void sub_239522EE4(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_250ADD758;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_239522EF4(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_250ADD758;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x23B83E31CLL);
}

uint64_t sub_239522F24(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 + 24;
  sub_239416DA0(a1 + 32);
  return nullsub_4(v1);
}

uint64_t sub_239522F50(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 120) || !*(_BYTE *)(a1 + 112))
    return a1;
  if (*(_BYTE *)(a1 + 104))
  {
    if ((*(char *)(a1 + 103) & 0x80000000) == 0)
    {
      if ((*(char *)(a1 + 71) & 0x80000000) == 0)
        goto LABEL_7;
LABEL_11:
      operator delete(*(void **)(a1 + 48));
      if (!*(_BYTE *)(a1 + 40))
        return a1;
      goto LABEL_8;
    }
    operator delete(*(void **)(a1 + 80));
    if (*(char *)(a1 + 71) < 0)
      goto LABEL_11;
  }
LABEL_7:
  if (!*(_BYTE *)(a1 + 40))
    return a1;
LABEL_8:
  if ((*(char *)(a1 + 39) & 0x80000000) == 0)
    return a1;
  operator delete(*(void **)(a1 + 16));
  return a1;
}

uint64_t sub_239522FE4(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 112))
    return a1;
  if (*(_BYTE *)(a1 + 104))
  {
    if ((*(char *)(a1 + 103) & 0x80000000) == 0)
    {
      if ((*(char *)(a1 + 71) & 0x80000000) == 0)
        goto LABEL_5;
LABEL_9:
      operator delete(*(void **)(a1 + 48));
      if (!*(_BYTE *)(a1 + 40))
        return a1;
      goto LABEL_6;
    }
    operator delete(*(void **)(a1 + 80));
    if (*(char *)(a1 + 71) < 0)
      goto LABEL_9;
  }
LABEL_5:
  if (!*(_BYTE *)(a1 + 40))
    return a1;
LABEL_6:
  if ((*(char *)(a1 + 39) & 0x80000000) == 0)
    return a1;
  operator delete(*(void **)(a1 + 16));
  return a1;
}

uint64_t sub_239523070(uint64_t result, uint64_t *a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  int v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unsigned __int8 v15;
  __int16 v16;

  v5 = result;
  v6 = *a2;
  v7 = (std::__shared_weak_count *)a2[1];
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  *(_QWORD *)result = v6;
  *(_QWORD *)(result + 8) = v7;
  v10 = *(_DWORD *)(a3 + 8);
  *(_QWORD *)(result + 16) = *(_QWORD *)a3;
  *(_DWORD *)(result + 24) = v10;
  *(_QWORD *)(result + 32) = a4;
  *(_DWORD *)(result + 40) = a5;
  if (v6)
  {
    if (v7)
    {
      v11 = (unint64_t *)&v7->__shared_owners_;
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 1, v11));
      do
        v13 = __ldaxr(v11);
      while (__stlxr(v13 - 1, v11));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 104))(v6);
    v15 = v14;
    if ((v14 & 0xFFFFFF) <= 0x10000)
      v15 = 0;
    v16 = v14 & 0xFF00;
    if ((v14 & 0xFF0000) == 0)
      v16 = 0;
    *(_WORD *)(v5 + 44) = v16 & 0xFF00 | v15;
    return v5;
  }
  else
  {
    *(_WORD *)(result + 44) = 0;
  }
  return result;
}

void sub_239523168(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  std::__shared_weak_count *v4;

  nullsub_4(v2);
  v4 = *(std::__shared_weak_count **)(v1 + 8);
  if (v4)
    sub_239EC0358(v4);
  _Unwind_Resume(a1);
}

uint64_t sub_239523188(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 96))
    return a1;
  if (*(_BYTE *)(a1 + 88))
  {
    if ((*(char *)(a1 + 87) & 0x80000000) == 0)
    {
      if ((*(char *)(a1 + 55) & 0x80000000) == 0)
        goto LABEL_5;
LABEL_9:
      operator delete(*(void **)(a1 + 32));
      if (!*(_BYTE *)(a1 + 24))
        return a1;
      goto LABEL_6;
    }
    operator delete(*(void **)(a1 + 64));
    if (*(char *)(a1 + 55) < 0)
      goto LABEL_9;
  }
LABEL_5:
  if (!*(_BYTE *)(a1 + 24))
    return a1;
LABEL_6:
  if ((*(char *)(a1 + 23) & 0x80000000) == 0)
    return a1;
  operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_239523214(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 56))
    return a1;
  if (*(char *)(a1 + 55) < 0)
  {
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 23) & 0x80000000) == 0)
      return a1;
  }
  else if ((*(char *)(a1 + 23) & 0x80000000) == 0)
  {
    return a1;
  }
  operator delete(*(void **)a1);
  return a1;
}

void sub_239523278(std::exception *a1)
{
  std::exception::~exception(a1);
  JUMPOUT(0x23B83E31CLL);
}

_BYTE *sub_23952329C(_BYTE *__dst, __int128 *a2)
{
  __int128 v4;

  *__dst = 0;
  __dst[96] = 0;
  if (*((_BYTE *)a2 + 96))
  {
    *__dst = 0;
    __dst[24] = 0;
    if (*((_BYTE *)a2 + 24))
    {
      if (*((char *)a2 + 23) < 0)
      {
        sub_23941A7F8(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
      }
      else
      {
        v4 = *a2;
        *((_QWORD *)__dst + 2) = *((_QWORD *)a2 + 2);
        *(_OWORD *)__dst = v4;
      }
      __dst[24] = 1;
    }
    sub_239523354(__dst + 32, a2 + 2);
    __dst[96] = 1;
  }
  return __dst;
}

void sub_239523324(_Unwind_Exception *a1)
{
  uint64_t v1;

  if (*(_BYTE *)(v1 + 24))
  {
    if (*(char *)(v1 + 23) < 0)
      operator delete(*(void **)v1);
  }
  sub_239523188(v1);
  _Unwind_Resume(a1);
}

char *sub_239523354(char *__dst, __int128 *a2)
{
  __int128 v4;
  _BYTE *v5;
  __int128 v6;

  *__dst = 0;
  __dst[56] = 0;
  if (*((_BYTE *)a2 + 56))
  {
    if (*((char *)a2 + 23) < 0)
    {
      sub_23941A7F8(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
    }
    else
    {
      v4 = *a2;
      *((_QWORD *)__dst + 2) = *((_QWORD *)a2 + 2);
      *(_OWORD *)__dst = v4;
    }
    *((_QWORD *)__dst + 3) = *((_QWORD *)a2 + 3);
    v5 = __dst + 32;
    if (*((char *)a2 + 55) < 0)
    {
      sub_23941A7F8(v5, *((void **)a2 + 4), *((_QWORD *)a2 + 5));
    }
    else
    {
      v6 = a2[2];
      *((_QWORD *)__dst + 6) = *((_QWORD *)a2 + 6);
      *(_OWORD *)v5 = v6;
    }
    __dst[56] = 1;
  }
  return __dst;
}

void sub_2395233EC(_Unwind_Exception *a1)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
  {
    operator delete(*(void **)v1);
    sub_239523214(v1);
    _Unwind_Resume(a1);
  }
  sub_239523214(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_239523424(uint64_t a1, _OWORD *a2)
{
  *(_QWORD *)a1 = off_250ADD7E8;
  *(_OWORD *)(a1 + 8) = *a2;
  sub_23952329C((_BYTE *)(a1 + 24), a2 + 1);
  return a1;
}

void sub_239523460(_Unwind_Exception *a1)
{
  std::exception *v1;

  std::exception::~exception(v1);
  _Unwind_Resume(a1);
}

void sub_239523474(std::exception *this)
{
  this->__vftable = (std::exception_vtbl *)off_250ADD7E8;
  if (!LOBYTE(this[15].__vftable))
    goto LABEL_7;
  if (!LOBYTE(this[14].__vftable))
    goto LABEL_5;
  if (SHIBYTE(this[13].__vftable) < 0)
  {
    operator delete(this[11].__vftable);
    if (SHIBYTE(this[9].__vftable) < 0)
      goto LABEL_10;
LABEL_5:
    if (!LOBYTE(this[6].__vftable))
      goto LABEL_7;
    goto LABEL_6;
  }
  if ((SHIBYTE(this[9].__vftable) & 0x80000000) == 0)
    goto LABEL_5;
LABEL_10:
  operator delete(this[7].__vftable);
  if (!LOBYTE(this[6].__vftable))
    goto LABEL_7;
LABEL_6:
  if (SHIBYTE(this[5].__vftable) < 0)
  {
    operator delete(this[3].__vftable);
    std::exception::~exception(this);
    return;
  }
LABEL_7:
  std::exception::~exception(this);
}

void sub_23952350C(std::exception *this)
{
  this->__vftable = (std::exception_vtbl *)off_250ADD7E8;
  if (!LOBYTE(this[15].__vftable))
    goto LABEL_10;
  if (!LOBYTE(this[14].__vftable))
    goto LABEL_5;
  if (SHIBYTE(this[13].__vftable) < 0)
  {
    operator delete(this[11].__vftable);
    if ((SHIBYTE(this[9].__vftable) & 0x80000000) == 0)
    {
LABEL_5:
      if (!LOBYTE(this[6].__vftable))
        goto LABEL_10;
      goto LABEL_6;
    }
  }
  else if ((SHIBYTE(this[9].__vftable) & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(this[7].__vftable);
  if (!LOBYTE(this[6].__vftable))
    goto LABEL_10;
LABEL_6:
  if (SHIBYTE(this[5].__vftable) < 0)
    operator delete(this[3].__vftable);
LABEL_10:
  std::exception::~exception(this);
  JUMPOUT(0x23B83E31CLL);
}

uint64_t sub_2395235AC(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  int v9;
  uint64_t v10;
  uint64_t **i;
  _QWORD *v12;
  void *v13;
  _QWORD *v14;
  _QWORD *v15;
  void *v16;
  void *v17;
  void *__p;
  _QWORD *v20;
  uint64_t v21;

  __p = 0;
  v20 = 0;
  v21 = 0;
  v4 = sub_2396CB0E4(a1, (uint64_t)&__p);
  if ((v4 & 1) == 0)
  {
LABEL_12:
    v8 = __p;
    goto LABEL_13;
  }
  v5 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24)) >> 2);
  v6 = (a2[1] - *a2) >> 2;
  if (v5 <= v6)
  {
    if (v5 < v6)
      a2[1] = *a2 - 0x5555555555555554 * ((uint64_t)(*(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24)) >> 2);
  }
  else
  {
    sub_23942CB44((uint64_t)a2, v5 - v6);
  }
  v8 = __p;
  v7 = v20;
  if (__p != v20)
  {
    v9 = 0;
    v10 = *a2;
    do
    {
      for (i = (uint64_t **)v8[2]; i; i = (uint64_t **)*i)
        *(_DWORD *)(v10 + 4 * *((unsigned int *)i + 4)) = v9;
      v8 += 5;
      ++v9;
    }
    while (v8 != v7);
    goto LABEL_12;
  }
LABEL_13:
  if (v8)
  {
    v12 = v20;
    v13 = v8;
    if (v20 != v8)
    {
      do
      {
        v14 = (_QWORD *)*(v12 - 3);
        if (v14)
        {
          do
          {
            v15 = (_QWORD *)*v14;
            operator delete(v14);
            v14 = v15;
          }
          while (v15);
        }
        v17 = (void *)*(v12 - 5);
        v12 -= 5;
        v16 = v17;
        *v12 = 0;
        if (v17)
          operator delete(v16);
      }
      while (v12 != v8);
      v13 = __p;
    }
    v20 = v8;
    operator delete(v13);
  }
  return v4;
}

void sub_2395236DC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_2395191D0((uint64_t *)va);
  _Unwind_Resume(a1);
}

float *sub_2395236F0(uint64_t a1, unint64_t *a2, uint64_t a3, float a4)
{
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  unint64_t v12;
  size_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  size_t v17;
  void *v18;
  char *v19;
  char *v20;
  unint64_t v21;
  char *v22;
  char *v23;
  unint64_t v24;
  __int128 v25;
  char *v26;
  char *v27;
  unint64_t v28;
  uint64_t v29;
  char *v30;
  char v31;
  unint64_t v32;
  float *v33;
  float *result;
  uint64_t v35;
  char *v36;
  _QWORD v37[3];
  float *v38;
  uint64_t v39;

  v39 = *MEMORY[0x24BDAC8D0];
  v8 = *(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24);
  v9 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 2);
  v11 = *(char **)a3;
  v10 = *(char **)(a3 + 8);
  v12 = (unint64_t)&v10[-*(_QWORD *)a3];
  v13 = v9 - v12;
  if (v9 <= v12)
  {
    if (v9 < v12)
      *(_QWORD *)(a3 + 8) = &v11[0xAAAAAAAAAAAAAAABLL * (v8 >> 2)];
  }
  else
  {
    v14 = *(_QWORD *)(a3 + 16);
    if (v14 - (uint64_t)v10 >= v13)
    {
      bzero(*(void **)(a3 + 8), v9 - v12);
      *(_QWORD *)(a3 + 8) = &v10[v13];
      goto LABEL_32;
    }
    if (v8 < 0)
      sub_2394189F8();
    v15 = v14 - (_QWORD)v11;
    v16 = 2 * (v14 - (_QWORD)v11);
    if (v16 <= v9)
      v16 = v9;
    if (v15 >= 0x3FFFFFFFFFFFFFFFLL)
      v17 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v17 = v16;
    v18 = operator new(v17);
    v19 = (char *)v18 + v17;
    v36 = (char *)v18 + v9;
    v20 = (char *)v18 + v12;
    bzero((char *)v18 + v12, v13);
    if (v10 != v11)
    {
      if (v12 < 8 || (unint64_t)(v11 - (_BYTE *)v18) < 0x20)
        goto LABEL_28;
      if (v12 >= 0x20)
      {
        v21 = v12 & 0xFFFFFFFFFFFFFFE0;
        v22 = v10 - 16;
        v23 = (char *)v18 + v10 - 16 - v11;
        v24 = v12 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v25 = *(_OWORD *)v22;
          *((_OWORD *)v23 - 1) = *((_OWORD *)v22 - 1);
          *(_OWORD *)v23 = v25;
          v23 -= 32;
          v22 -= 32;
          v24 -= 32;
        }
        while (v24);
        if (v12 == v21)
        {
LABEL_30:
          v10 = v11;
          *(_QWORD *)a3 = v18;
          *(_QWORD *)(a3 + 8) = v36;
          *(_QWORD *)(a3 + 16) = v19;
          if (!v11)
            goto LABEL_32;
          goto LABEL_31;
        }
        if ((v12 & 0x18) == 0)
        {
          v20 -= v21;
          v10 -= v21;
          goto LABEL_28;
        }
      }
      else
      {
        v21 = 0;
      }
      v20 -= v12 & 0xFFFFFFFFFFFFFFF8;
      v26 = &v10[-v21 - 8];
      v27 = (char *)(v26 - v11);
      v28 = v21 - (v12 & 0xFFFFFFFFFFFFFFF8);
      do
      {
        v29 = *(_QWORD *)v26;
        v26 -= 8;
        *(_QWORD *)&v27[(_QWORD)v18] = v29;
        v27 -= 8;
        v28 += 8;
      }
      while (v28);
      v10 -= v12 & 0xFFFFFFFFFFFFFFF8;
      if (v12 == (v12 & 0xFFFFFFFFFFFFFFF8))
        goto LABEL_30;
LABEL_28:
      v30 = v20 - 1;
      do
      {
        v31 = *--v10;
        *v30-- = v31;
      }
      while (v10 != v11);
      goto LABEL_30;
    }
    *(_QWORD *)a3 = v20;
    *(_QWORD *)(a3 + 8) = v36;
    *(_QWORD *)(a3 + 16) = v19;
    if (v10)
LABEL_31:
      operator delete(v10);
  }
LABEL_32:
  v32 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24)) >> 2);
  v33 = (float *)operator new(0x20uLL);
  *(_QWORD *)v33 = &off_250ADD810;
  *((_QWORD *)v33 + 1) = a1;
  *((_QWORD *)v33 + 2) = a3;
  v33[6] = a4;
  v38 = v33;
  sub_2397A376C(a2, v32, v37, 0);
  result = v38;
  if (v38 == (float *)v37)
  {
    v35 = 4;
    result = (float *)v37;
  }
  else
  {
    if (!v38)
      return result;
    v35 = 5;
  }
  return (float *)(*(uint64_t (**)(void))(*(_QWORD *)result + 8 * v35))();
}

void sub_2395239A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

BOOL sub_2395239DC(char **a1, char **a2, uint64_t a3, int a4, int a5, unsigned int a6, uint64_t a7, uint64_t a8, unint64_t *a9, _BYTE *a10)
{
  int v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  unsigned __int8 v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  int v30;
  _OWORD v31[6];
  uint64_t v32;
  void *v33[2];
  void *v34[2];
  void *v35;
  char v36[8];
  void *v37;
  void *v38;
  __int16 v39;
  void *v40;
  char v41[8];
  void *v42;
  void *v43;
  __int16 v44;
  void *v45;
  int v46;
  void *v47;
  void *v48;
  __int16 v49;
  void *v50;
  char v51[8];
  void *v52;
  void *v53;
  __int16 v54;
  void *v55;
  int v56;
  void *v57;
  void *v58;
  __int16 v59;
  void *v60;
  int v61;
  void *v62;
  void *v63;
  __int16 v64;
  void *v65;
  int v66;
  void *v67;
  void *v68;
  __int16 v69;
  void *v70;
  __int128 v71;
  __int128 v72;
  void *v73;
  _OWORD v74[6];
  uint64_t v75;
  _QWORD v76[3];
  _QWORD *v77;
  uint64_t v78;

  v78 = *MEMORY[0x24BDAC8D0];
  sub_239523F88(a2, a6, a5, 0, (uint64_t)&v66);
  sub_239523F88(a1, a6, a4, 0, (uint64_t)&v61);
  sub_2395244C0((uint64_t)&v61, (uint64_t)&v56);
  sub_2395245D4(&v56, &v61, (uint64_t)v51);
  sub_2395244C0((uint64_t)&v66, (uint64_t)&v46);
  sub_2395245D4(&v46, &v66, (uint64_t)v41);
  sub_239525AF4((uint64_t)v51, (uint64_t)v41, (uint64_t)v36);
  sub_239526260((uint64_t)v36, (uint64_t)v33);
  v30 = 2;
  v71 = *(_OWORD *)v33;
  v72 = *(_OWORD *)v34;
  v73 = v35;
  WORD4(v72) = (uint64_t)v34[1] & 0xFFF1 | 0xC;
  sub_239A232FC(SparseFactorizationCholesky, (uint64_t)&v71, (uint64_t)v74);
  v32 = v75;
  v31[4] = v74[4];
  v31[5] = v74[5];
  v31[0] = v74[0];
  v31[1] = v74[1];
  v31[2] = v74[2];
  v31[3] = v74[3];
  v16 = v74[0];
  switch(LODWORD(v74[0]))
  {
    case 0xFFFFFFFC:
    case 0xFFFFFFFD:
      goto LABEL_4;
    case 0xFFFFFFFE:
    case 0xFFFFFFFF:
      v16 = 1;
      goto LABEL_5;
    case 0:
      goto LABEL_5;
    default:
      if (LODWORD(v74[0]) != -2147483647)
        goto LABEL_6;
LABEL_4:
      v16 = 2;
LABEL_5:
      v30 = v16;
LABEL_6:
      LOBYTE(v74[0]) = 0;
      v77 = 0;
      v17 = operator new(0x50uLL);
      *v17 = &off_250ADD858;
      v17[1] = a3;
      v17[2] = a8;
      v17[3] = &v56;
      v17[4] = &v30;
      v17[5] = a10;
      v17[6] = v74;
      *((_DWORD *)v17 + 14) = a6;
      v17[8] = a7;
      *((_DWORD *)v17 + 18) = a4;
      v77 = v17;
      sub_2397A376C(a9, 3uLL, v76, 0);
      v18 = v77;
      if (v77 == v76)
      {
        v19 = 4;
        v18 = v76;
      }
      else
      {
        if (!v77)
          goto LABEL_11;
        v19 = 5;
      }
      (*(void (**)(void))(*v18 + 8 * v19))();
LABEL_11:
      v20 = atomic_load((unsigned __int8 *)v74);
      if ((v20 & 1) != 0 && a10[8])
        sub_2394202DC((_QWORD *)(*(_QWORD *)a10 + 176), 7501);
      if (v30 != 2)
        sub_239A232BC((uint64_t)v31);
      if (SLOWORD(v34[1]) < 0)
      {
        v21 = v33[1];
      }
      else
      {
        if (v33[1])
        {
          free(v33[1]);
          v33[1] = 0;
        }
        if (v34[0])
        {
          free(v34[0]);
          v34[0] = 0;
        }
        v21 = v35;
        if (!v35)
        {
          if ((v39 & 0x80000000) == 0)
            goto LABEL_23;
LABEL_67:
          v22 = v37;
          goto LABEL_68;
        }
      }
      free(v21);
      if (v39 < 0)
        goto LABEL_67;
LABEL_23:
      if (v37)
      {
        free(v37);
        v37 = 0;
      }
      if (v38)
      {
        free(v38);
        v38 = 0;
      }
      v22 = v40;
      if (!v40)
      {
        if ((v44 & 0x80000000) == 0)
          goto LABEL_29;
LABEL_69:
        v23 = v42;
        goto LABEL_70;
      }
LABEL_68:
      free(v22);
      if (v44 < 0)
        goto LABEL_69;
LABEL_29:
      if (v42)
      {
        free(v42);
        v42 = 0;
      }
      if (v43)
      {
        free(v43);
        v43 = 0;
      }
      v23 = v45;
      if (!v45)
      {
        if ((v49 & 0x80000000) == 0)
          goto LABEL_35;
LABEL_71:
        v24 = v47;
        goto LABEL_72;
      }
LABEL_70:
      free(v23);
      if (v49 < 0)
        goto LABEL_71;
LABEL_35:
      if (v47)
      {
        free(v47);
        v47 = 0;
      }
      if (v48)
      {
        free(v48);
        v48 = 0;
      }
      v24 = v50;
      if (!v50)
      {
        if ((v54 & 0x80000000) == 0)
          goto LABEL_41;
LABEL_73:
        v25 = v52;
        goto LABEL_74;
      }
LABEL_72:
      free(v24);
      if (v54 < 0)
        goto LABEL_73;
LABEL_41:
      if (v52)
      {
        free(v52);
        v52 = 0;
      }
      if (v53)
      {
        free(v53);
        v53 = 0;
      }
      v25 = v55;
      if (!v55)
      {
        if ((v59 & 0x80000000) == 0)
          goto LABEL_47;
LABEL_75:
        v26 = v57;
        goto LABEL_76;
      }
LABEL_74:
      free(v25);
      if (v59 < 0)
        goto LABEL_75;
LABEL_47:
      if (v57)
      {
        free(v57);
        v57 = 0;
      }
      if (v58)
      {
        free(v58);
        v58 = 0;
      }
      v26 = v60;
      if (!v60)
      {
        if ((v64 & 0x80000000) == 0)
          goto LABEL_53;
LABEL_77:
        v27 = v62;
        goto LABEL_78;
      }
LABEL_76:
      free(v26);
      if (v64 < 0)
        goto LABEL_77;
LABEL_53:
      if (v62)
      {
        free(v62);
        v62 = 0;
      }
      if (v63)
      {
        free(v63);
        v63 = 0;
      }
      v27 = v65;
      if (!v65)
      {
        if ((v69 & 0x80000000) == 0)
          goto LABEL_59;
LABEL_79:
        v28 = v67;
LABEL_80:
        free(v28);
        return (v20 & 1) == 0;
      }
LABEL_78:
      free(v27);
      if (v69 < 0)
        goto LABEL_79;
LABEL_59:
      if (v67)
      {
        free(v67);
        v67 = 0;
      }
      if (v68)
      {
        free(v68);
        v68 = 0;
      }
      v28 = v70;
      if (v70)
        goto LABEL_80;
      return (v20 & 1) == 0;
  }
}

void sub_239523E7C(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_239416A48(a1);
  _Unwind_Resume(a1);
}

void sub_239523F88(char **a1@<X0>, unsigned int a2@<W1>, int a3@<W2>, char a4@<W3>, uint64_t a5@<X8>)
{
  int64x2_t v7;
  void *v8;
  void *v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint32x4_t *v16;
  unint64_t v17;
  int64x2_t v18;
  int64x2_t v19;
  int64x2_t v20;
  uint32x4_t v21;
  unint64_t v22;
  unsigned int *v23;
  unsigned int v24;
  void *v25;
  _QWORD *v26;
  uint64_t v27;
  unsigned int *v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  unsigned int v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  BOOL v36;
  unint64_t v37;
  int64x2_t *v38;
  int64x2_t *v39;
  int64x2_t *v40;
  unint64_t v41;
  int64x2_t v42;
  unint64_t v43;
  uint64_t v44;
  __int32 *v45;
  char *v46;
  int v47;
  _BYTE *v48;
  int v49;
  unint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  const float *v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t i;
  uint64_t v60;
  float v61;
  float *v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  float32x4_t *v71;
  uint64_t v72;
  float32x4_t v73;
  float32x4_t *v74;
  float32x4_t *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  int32x4_t v83;
  int32x4_t *v84;
  _DWORD *v85;
  uint64_t v86;
  int32x4_t *v87;
  uint64_t v88;
  void *__p;
  _BYTE *v90;
  uint64_t v91;
  void *v92;
  _BYTE *v93;
  uint64_t v94;
  void *v95;
  void *v96;
  uint64_t v97;

  v95 = 0;
  v96 = 0;
  v97 = 0;
  v92 = 0;
  v93 = 0;
  v94 = 0;
  __p = 0;
  v90 = 0;
  v91 = 0;
  sub_2395306BC(a1, a2, &v95, (uint64_t *)&v92, (unint64_t *)&__p, a4);
  *(_WORD *)(a5 + 24) &= 0x7FF0u;
  *(_BYTE *)(a5 + 28) = 1;
  *(_QWORD *)(a5 + 32) = 0;
  *(_QWORD *)(a5 + 40) = 0;
  *(_QWORD *)(a5 + 8) = 0;
  *(_QWORD *)(a5 + 16) = 0;
  *(_QWORD *)a5 = 0;
  *(_QWORD *)(a5 + 8) = malloc_type_calloc(1uLL, 8uLL, 0x100004000313F17uLL);
  sub_239530A0C(a5, a3, (unsigned int **)&v92);
  v9 = v92;
  v8 = v93;
  v10 = v93 - (_BYTE *)v92;
  v11 = (v93 - (_BYTE *)v92) >> 2;
  if (v11 != *(_DWORD *)(a5 + 4))
    goto LABEL_33;
  if (v93 == v92)
  {
    v13 = 0;
    goto LABEL_13;
  }
  v12 = 2;
  if ((unint64_t)(v11 + 1) > 2)
    v12 = v11 + 1;
  if (v12 < 9)
  {
    v13 = 0;
    v14 = 1;
LABEL_11:
    v22 = v12 - v14;
    v23 = (unsigned int *)((char *)v92 + 4 * v14 - 4);
    do
    {
      v24 = *v23++;
      v13 += v24;
      --v22;
    }
    while (v22);
    goto LABEL_13;
  }
  v15 = (v12 - 1) & 0xFFFFFFFFFFFFFFF8;
  v14 = v15 | 1;
  v16 = (uint32x4_t *)((char *)v92 + 16);
  v7 = 0uLL;
  v17 = v15;
  v18 = 0uLL;
  v19 = 0uLL;
  v20 = 0uLL;
  do
  {
    v21 = v16[-1];
    v18 = (int64x2_t)vaddw_high_u32((uint64x2_t)v18, v21);
    v7 = (int64x2_t)vaddw_u32((uint64x2_t)v7, *(uint32x2_t *)v21.i8);
    v20 = (int64x2_t)vaddw_high_u32((uint64x2_t)v20, *v16);
    v19 = (int64x2_t)vaddw_u32((uint64x2_t)v19, *(uint32x2_t *)v16->i8);
    v16 += 2;
    v17 -= 8;
  }
  while (v17);
  v7.i64[0] = vaddvq_s64(vaddq_s64(vaddq_s64(v19, v7), vaddq_s64(v20, v18)));
  v13 = v7.i64[0];
  if (v12 - 1 != v15)
    goto LABEL_11;
LABEL_13:
  if (v13 == *(_QWORD *)(a5 + 40))
  {
    v25 = *(void **)(a5 + 8);
    if (v25)
    {
      free(v25);
      *(_QWORD *)(a5 + 8) = 0;
      v9 = v92;
      v8 = v93;
      v10 = v93 - (_BYTE *)v92;
      v11 = (v93 - (_BYTE *)v92) >> 2;
    }
    *(_DWORD *)(a5 + 4) = v11;
    v26 = malloc_type_malloc(2 * v10 + 8, 0x100004000313F17uLL);
    *(_QWORD *)(a5 + 8) = v26;
    *v26 = 0;
    if (v8 != v9)
    {
      v27 = 0;
      v28 = (unsigned int *)v92;
      v29 = 2;
      if ((unint64_t)(v11 + 1) > 2)
        v29 = v11 + 1;
      v30 = v29 - 1;
      v31 = v26 + 1;
      do
      {
        v32 = *v28++;
        v27 += v32;
        *v31++ = v27;
        --v30;
      }
      while (v30);
    }
    v33 = (char *)__p;
    v34 = (v90 - (_BYTE *)__p) >> 2;
    v35 = *(_QWORD *)(a5 + 40);
    if (v35)
      v36 = v34 == v35;
    else
      v36 = 0;
    if (v36)
    {
      v37 = 0;
      v38 = *(int64x2_t **)(a5 + 16);
      if ((unint64_t)(v90 - (_BYTE *)__p) < 0x20)
        goto LABEL_31;
      if ((unint64_t)((char *)v38 - (_BYTE *)__p) < 0x20)
        goto LABEL_31;
      v37 = v34 & 0xFFFFFFFFFFFFFFF8;
      v39 = (int64x2_t *)((char *)__p + 16);
      v40 = v38 + 1;
      v41 = v34 & 0xFFFFFFFFFFFFFFF8;
      do
      {
        v7 = v39[-1];
        v42 = *v39;
        v40[-1] = v7;
        *v40 = v42;
        v39 += 2;
        v40 += 2;
        v41 -= 8;
      }
      while (v41);
      if (v34 != v37)
      {
LABEL_31:
        v43 = v34 - v37;
        v44 = v37;
        v45 = &v38->i32[v44];
        v46 = &v33[v44 * 4];
        do
        {
          v47 = *(_DWORD *)v46;
          v46 += 4;
          *v45++ = v47;
          --v43;
        }
        while (v43);
      }
    }
  }
LABEL_33:
  v48 = v92;
  if (v93 != v92)
  {
    v49 = *(unsigned __int8 *)(a5 + 28);
    if (*(_BYTE *)(a5 + 28))
    {
      v50 = (v93 - (_BYTE *)v92) >> 2;
      v51 = *(uint64_t **)(a5 + 8);
      v52 = *(_QWORD *)(a5 + 32);
      v53 = (v49 * v49);
      v54 = *(unsigned __int8 *)(a5 + 28);
      v55 = (const float *)v95;
      v56 = (v54 - 1) & 0x3FFFFFFFFFFFFFFFLL;
      if (v56 > 6)
      {
        v64 = v56 + 1;
        v65 = (v56 + 1) & 0x7FFFFFFFFFFFFFF8;
        if (v64 == v65)
        {
          v66 = 0;
          v67 = v52 + 16;
          v68 = 4 * v53;
          do
          {
            v69 = v51[v66++];
            v70 = v51[v66];
            if (v69 != v70)
            {
              v71 = (float32x4_t *)(v67 + v68 * v69);
              do
              {
                v72 = 0;
                v73 = vld1q_dup_f32(v55);
                v74 = v71;
                do
                {
                  v75 = v74;
                  v76 = v65;
                  do
                  {
                    v75[-1] = v73;
                    *v75 = v73;
                    v75 += 2;
                    v76 -= 8;
                  }
                  while (v76);
                  ++v72;
                  v74 = (float32x4_t *)((char *)v74 + 4 * v54);
                }
                while (v72 != v54);
                ++v69;
                ++v55;
                v71 = (float32x4_t *)((char *)v71 + v68);
              }
              while (v69 != v70);
            }
          }
          while (v50 > v66);
        }
        else
        {
          v77 = 0;
          v78 = 4 * v53;
          do
          {
            v79 = v51[v77++];
            v80 = v51[v77];
            if (v79 != v80)
            {
              v81 = v52 + 16 + v78 * v79;
              do
              {
                v82 = 0;
                *(float *)v7.i32 = *v55;
                v83 = vdupq_lane_s32(*(int32x2_t *)v7.i8, 0);
                v84 = (int32x4_t *)v81;
                do
                {
                  v85 = (_DWORD *)(v52 + 4 * v79 * v53 + 4 * (v82 * v49) + 4 * v65);
                  v86 = v65;
                  v87 = v84;
                  do
                  {
                    v87[-1] = v83;
                    *v87 = v83;
                    v87 += 2;
                    v86 -= 8;
                  }
                  while (v86);
                  v88 = 4 * v54 - 4 * v65;
                  do
                  {
                    *v85++ = v7.i32[0];
                    v88 -= 4;
                  }
                  while (v88);
                  ++v82;
                  v84 = (int32x4_t *)((char *)v84 + 4 * v54);
                }
                while (v82 != v54);
                ++v79;
                ++v55;
                v81 += v78;
              }
              while (v79 != v80);
            }
          }
          while (v50 > v77);
        }
      }
      else
      {
        v57 = *v51;
        v58 = 1;
        i = v51[1];
        if (*v51 != i)
          goto LABEL_39;
        while (v50 > v58)
        {
          v57 = v51[v58++];
          for (i = v51[v58]; v57 != i; ++v55)
          {
LABEL_39:
            v60 = 0;
            v61 = *v55;
            do
            {
              v62 = (float *)(v52 + 4 * v57 * v53 + 4 * (v60 * v49));
              v63 = 4 * v54;
              do
              {
                *v62++ = v61;
                v63 -= 4;
              }
              while (v63);
              ++v60;
            }
            while (v60 != v54);
            ++v57;
          }
        }
      }
    }
  }
  if (__p)
  {
    v90 = __p;
    operator delete(__p);
    v48 = v92;
  }
  if (v48)
  {
    v93 = v48;
    operator delete(v48);
  }
  if (v95)
  {
    v96 = v95;
    operator delete(v95);
  }
}

void sub_23952445C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17)
{
  uint64_t v17;
  void *v19;
  void *v20;

  sub_239526A6C(v17);
  if (__p)
  {
    operator delete(__p);
    v19 = a13;
    if (!a13)
    {
LABEL_3:
      v20 = a16;
      if (!a16)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else
  {
    v19 = a13;
    if (!a13)
      goto LABEL_3;
  }
  operator delete(v19);
  v20 = a16;
  if (!a16)
LABEL_4:
    _Unwind_Resume(a1);
LABEL_7:
  operator delete(v20);
  _Unwind_Resume(a1);
}

void sub_2395244C0(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int32x2_t *v4;
  char *v5;
  unint64_t v6;
  int32x2_t *v7;
  unint64_t v8;
  uint64_t v9;
  int v10;
  __int16 v11;
  BOOL v12;
  int v13;
  unsigned int v14;
  int v15;
  void *__p;
  int32x2_t *v17;

  sub_239532748((int *)a1, (int **)&__p);
  v5 = (char *)__p;
  v4 = v17;
  if (__p == v17)
    goto LABEL_8;
  v6 = (char *)v17 - (_BYTE *)__p - 12;
  if (v6 >= 0xC)
  {
    v8 = v6 / 0xC + 1;
    v7 = (int32x2_t *)((char *)__p + 12 * (v8 & 0x3FFFFFFFFFFFFFFELL));
    v9 = v8 & 0x3FFFFFFFFFFFFFFELL;
    do
    {
      *(int32x2_t *)v5 = vrev64_s32(*(int32x2_t *)v5);
      *(int32x2_t *)(v5 + 12) = vrev64_s32(*(int32x2_t *)(v5 + 12));
      v5 += 24;
      v9 -= 2;
    }
    while (v9);
    if (v8 == (v8 & 0x3FFFFFFFFFFFFFFELL))
      goto LABEL_8;
  }
  else
  {
    v7 = (int32x2_t *)__p;
  }
  do
  {
    *v7 = vrev64_s32(*v7);
    v7 = (int32x2_t *)((char *)v7 + 12);
  }
  while (v7 != v4);
LABEL_8:
  v10 = *(unsigned __int8 *)(a1 + 28);
  v11 = *(_WORD *)(a1 + 24);
  v12 = (v11 & 1) == 0;
  if ((v11 & 1) != 0)
    v13 = *(_DWORD *)(a1 + 4);
  else
    v13 = *(_DWORD *)a1;
  v14 = v13 * v10;
  if (v12)
    v15 = *(_DWORD *)(a1 + 4);
  else
    v15 = *(_DWORD *)a1;
  sub_239523F88((char **)&__p, v14, v15 * v10, 0, a2);
  if (__p)
  {
    v17 = (int32x2_t *)__p;
    operator delete(__p);
  }
}

void sub_2395245B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_2395245D4(int *a1@<X0>, int *a2@<X1>, uint64_t a3@<X8>)
{
  __int16 v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  _DWORD *v8;
  int *v9;
  char *v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  unint64_t v15;
  uint64_t v16;
  _DWORD *v17;
  _DWORD *v18;
  _DWORD *v19;
  unint64_t v20;
  uint64_t v21;
  char *v22;
  int *v23;
  char *v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _DWORD *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  _BYTE *v35;
  char *v36;
  unint64_t v37;
  char *v38;
  int v39;
  uint64_t v40;
  int v41;
  char *v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  _BYTE *v47;
  int *v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  _OWORD *v53;
  char *v54;
  uint64_t v55;
  __int128 v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  _OWORD *v60;
  __int128 *v61;
  uint64_t v62;
  __int128 v63;
  int *v64;
  uint64_t v65;
  int v66;
  unint64_t v67;
  _DWORD *v68;
  char *v69;
  int v70;
  _QWORD *v71;
  __int16 v72;
  unsigned int v73;
  unsigned int v74;
  uint64_t v75;
  char *v76;
  char *v77;
  char *v78;
  _QWORD *v79;
  unsigned int v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  char *v84;
  unint64_t v85;
  uint64_t v86;
  char *v87;
  char *v88;
  unint64_t v89;
  uint64_t v90;
  char *v91;
  char *v92;
  int *v93;
  unint64_t v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  _DWORD *v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  unint64_t v103;
  _BYTE *v104;
  char *v105;
  unint64_t v106;
  char *v107;
  int v108;
  uint64_t v109;
  int v110;
  char *v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t v114;
  unint64_t v115;
  _BYTE *v116;
  int *v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t v120;
  char *v121;
  _OWORD *v122;
  char *v123;
  uint64_t v124;
  __int128 v125;
  int v126;
  uint64_t v127;
  uint64_t v128;
  _OWORD *v129;
  __int128 *v130;
  uint64_t v131;
  __int128 v132;
  unint64_t v133;
  char *v134;
  int *v135;
  int v136;
  uint64_t v137;
  _DWORD *v138;
  int *v139;
  int v140;
  _QWORD *v141;
  uint64_t v142;
  _QWORD *v143;
  unint64_t v144;
  char *v145;
  uint64_t v146;
  uint64_t v147;
  char *v148;
  char *v149;
  uint64_t v150;
  uint64_t v151;
  float *v152;
  char *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  unint64_t v157;
  unint64_t v158;
  float v159;
  int v160;
  float v161;
  unint64_t v162;
  unint64_t v163;
  char *v164;
  char *v165;
  char *v166;
  uint64_t v167;
  int v168;
  unint64_t v169;
  uint64_t v170;
  char *v171;
  char *v172;
  unint64_t v173;
  char *v174;
  char *v175;
  char *v176;
  char *v177;
  char *v178;
  uint64_t v179;
  int v180;
  char *v181;
  char *v182;
  uint64_t v183;
  char *v184;
  char *v185;
  unint64_t v186;
  unint64_t v187;
  char *v188;
  char *v189;
  uint64_t v190;
  uint64_t v191;
  int v192;
  char *v193;
  unint64_t i;
  uint64_t v195;
  char *v196;
  char *v197;
  char *v198;
  unint64_t v199;
  unint64_t v200;
  unint64_t v201;
  char *v202;
  char *v203;
  uint64_t v204;
  char *v205;
  uint64_t v206;
  int v207;
  _DWORD *v208;
  unsigned int v209;
  _DWORD *v210;
  uint64_t v211;
  uint64_t v212;
  int *v213;
  char *v214;
  char *v215;
  _DWORD *v216;
  char *v217;
  unsigned int *v218;
  _DWORD *v219;
  unint64_t v220;
  unint64_t v221;
  char *v223;
  _DWORD *v224;
  unint64_t v225;
  char *v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  char *v230;
  unint64_t v231;
  unint64_t v232;
  char *v233;
  uint64_t v234;
  uint64_t v235;
  float *v236;
  void *__p;
  char *v238;
  char *v239;
  void *v240;
  char *v241;
  unint64_t v242;
  void *v243;
  char *v244;
  char *v245;
  void *v246;
  uint64_t v247;
  char *v248;
  char *v249;
  char *v250;
  char *v251;
  char *v252;
  uint64_t v253;
  char *v254;
  char v255[9];

  v4 = *((_WORD *)a1 + 12);
  v5 = *a1;
  v6 = a1[1];
  if ((v4 & 1) != 0)
    v7 = *a1;
  else
    v7 = a1[1];
  if ((a2[6] & 1) != 0)
    v8 = a2 + 1;
  else
    v8 = a2;
  if (v7 * *((unsigned __int8 *)a1 + 28) != *v8 * *((unsigned __int8 *)a2 + 28))
    sub_239EC0394();
  v9 = a1;
  if (v7)
  {
    v10 = (char *)operator new(4 * v7);
    bzero(v10, 4 * v7);
    v230 = v10;
    v252 = 0;
    v253 = 0;
    v254 = 0;
    v11 = (_QWORD *)*((_QWORD *)v9 + 1);
    v211 = a3;
    v223 = &v10[4 * v7];
    if (v11)
      goto LABEL_10;
LABEL_14:
    v14 = 0;
    v249 = 0;
    v250 = 0;
    v251 = 0;
    goto LABEL_19;
  }
  v230 = 0;
  v252 = 0;
  v253 = 0;
  v254 = 0;
  v11 = (_QWORD *)*((_QWORD *)a1 + 1);
  v211 = a3;
  v223 = 0;
  if (!v11)
    goto LABEL_14;
LABEL_10:
  v12 = v11[v6];
  v13 = v12 - *v11;
  if (v12 == *v11)
  {
    v14 = 0;
    v249 = 0;
    v250 = 0;
    v251 = 0;
    v15 = v11[v6] - *v11;
    if (!v15)
      goto LABEL_19;
    goto LABEL_17;
  }
  if (v13 >> 62)
    sub_2394189F8();
  v14 = (char *)operator new(4 * v13);
  v252 = v14;
  v253 = (uint64_t)v14;
  v254 = &v14[4 * v13];
  v249 = 0;
  v250 = 0;
  v251 = 0;
  v15 = v11[v6] - *v11;
  if (v15)
  {
LABEL_17:
    if (v15 >> 62)
      sub_2394189F8();
    v249 = (char *)operator new(4 * v15);
    v250 = v249;
    v251 = &v249[4 * v15];
  }
LABEL_19:
  v16 = v7 + 1;
  v213 = v9;
  if (v7 == -1)
  {
    v17 = 0;
    v18 = 0;
    goto LABEL_22;
  }
  v19 = operator new(4 * v16);
  bzero(v19, 4 * v16);
  v17 = v19;
  v18 = &v19[v16];
  if (v7)
  {
LABEL_22:
    v219 = v18;
    v216 = v17;
    v20 = 0;
    v22 = v252;
    v21 = v253;
    v23 = (int *)v249;
    v24 = v230;
    while (1)
    {
      v27 = *((_QWORD *)v9 + 1);
      v28 = *(_QWORD *)(v27 + 8 * v20);
      v25 = v20 + 1;
      v234 = *(_QWORD *)(v27 + 8 * (v20 + 1));
      if (v28 != v234)
        break;
LABEL_24:
      if ((v4 & 1) != 0)
        v26 = v5;
      else
        v26 = v6;
      v20 = v25;
      if (v25 >= v26)
      {
        v252 = v22;
        v253 = v21;
        v249 = (char *)v23;
        v18 = v219;
        *v216 = 0;
        v64 = a2;
        v65 = v223 - v24;
        if (v223 != v24)
          goto LABEL_87;
        goto LABEL_91;
      }
    }
    v225 = v20 + 1;
    v231 = v20;
    while (1)
    {
      if (*((_BYTE *)v9 + 28))
        v30 = (_DWORD *)(*((_QWORD *)v9 + 4)
                       + 4 * v28 * *((unsigned __int8 *)v9 + 28) * *((unsigned __int8 *)v9 + 28));
      else
        v30 = 0;
      if (v14 < v254)
      {
        *(_DWORD *)v14 = *v30;
        v21 = (uint64_t)(v14 + 4);
        goto LABEL_54;
      }
      v31 = (v14 - v22) >> 2;
      v32 = v31 + 1;
      if ((unint64_t)(v31 + 1) >> 62)
      {
        v252 = v22;
        v253 = v21;
        v249 = (char *)v23;
        sub_2394189F8();
      }
      v33 = v254 - v22;
      if ((v254 - v22) >> 1 > v32)
        v32 = v33 >> 1;
      if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFFCLL)
        v34 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v34 = v32;
      if (v34)
      {
        if (v34 >> 62)
        {
          v252 = v22;
          v253 = v21;
          v249 = (char *)v23;
          sub_239418A80();
        }
        v35 = operator new(4 * v34);
        v36 = &v35[4 * v31];
        *(_DWORD *)v36 = *v30;
        v21 = (uint64_t)(v36 + 4);
        if (v14 == v22)
          goto LABEL_51;
      }
      else
      {
        v35 = 0;
        v36 = (char *)(4 * v31);
        *(_DWORD *)(4 * v31) = *v30;
        v21 = 4 * v31 + 4;
        if (v14 == v22)
          goto LABEL_51;
      }
      v37 = v14 - 4 - v22;
      if (v37 >= 0xBC)
      {
        if (&v35[v14 - v22 - 4 - (v37 & 0xFFFFFFFFFFFFFFFCLL)] > &v35[v14 - v22 - 4])
        {
          v38 = v14;
        }
        else if (&v14[-(v37 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v14 - 4)
        {
          v38 = v14;
        }
        else if ((unint64_t)(v22 - v35) >= 0x20)
        {
          v58 = (v37 >> 2) + 1;
          v59 = 4 * (v58 & 0x7FFFFFFFFFFFFFF8);
          v38 = &v14[-v59];
          v36 -= v59;
          v60 = &v35[4 * v31 - 16];
          v61 = (__int128 *)(v14 - 16);
          v62 = v58 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v63 = *v61;
            *(v60 - 1) = *(v61 - 1);
            *v60 = v63;
            v60 -= 2;
            v61 -= 2;
            v62 -= 8;
          }
          while (v62);
          if (v58 == (v58 & 0x7FFFFFFFFFFFFFF8))
            goto LABEL_51;
        }
        else
        {
          v38 = v14;
        }
      }
      else
      {
        v38 = v14;
      }
      do
      {
        v39 = *((_DWORD *)v38 - 1);
        v38 -= 4;
        *((_DWORD *)v36 - 1) = v39;
        v36 -= 4;
      }
      while (v38 != v22);
LABEL_51:
      v254 = &v35[4 * v34];
      if (v22)
      {
        v40 = v21;
        operator delete(v22);
        v21 = v40;
      }
      v22 = v36;
      v20 = v231;
LABEL_54:
      v41 = *(_DWORD *)(*((_QWORD *)v9 + 2) + 4 * v28) * *((unsigned __int8 *)v9 + 28);
      v42 = v250;
      if (v250 >= v251)
      {
        v43 = (v250 - (char *)v23) >> 2;
        v44 = v43 + 1;
        if ((unint64_t)(v43 + 1) >> 62)
        {
          v252 = v22;
          v253 = v21;
          v249 = (char *)v23;
          sub_2394189F8();
        }
        v45 = v251 - (char *)v23;
        if ((v251 - (char *)v23) >> 1 > v44)
          v44 = v45 >> 1;
        if ((unint64_t)v45 >= 0x7FFFFFFFFFFFFFFCLL)
          v46 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v46 = v44;
        v227 = v21;
        if (v46)
        {
          if (v46 >> 62)
          {
            v252 = v22;
            v253 = v21;
            v249 = (char *)v23;
            sub_239418A80();
          }
          v47 = operator new(4 * v46);
          v48 = (int *)&v47[4 * v43];
          *v48 = v41;
          v29 = (uint64_t)(v48 + 1);
          if (v42 != (char *)v23)
          {
LABEL_64:
            v49 = v42 - 4 - (char *)v23;
            v24 = v230;
            if (v49 < 0x2C)
            {
              v9 = v213;
              goto LABEL_76;
            }
            v9 = v213;
            if ((unint64_t)((char *)v23 - v47) < 0x20)
              goto LABEL_323;
            v50 = (v49 >> 2) + 1;
            v51 = 4 * (v50 & 0x7FFFFFFFFFFFFFF8);
            v52 = &v42[-v51];
            v48 = (int *)((char *)v48 - v51);
            v53 = &v47[4 * v43 - 16];
            v54 = v42 - 16;
            v55 = v50 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v56 = *(_OWORD *)v54;
              *(v53 - 1) = *((_OWORD *)v54 - 1);
              *v53 = v56;
              v53 -= 2;
              v54 -= 32;
              v55 -= 8;
            }
            while (v55);
            v42 = v52;
            if (v50 != (v50 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_323:
              do
              {
LABEL_76:
                v57 = *((_DWORD *)v42 - 1);
                v42 -= 4;
                *--v48 = v57;
              }
              while (v42 != (char *)v23);
            }
LABEL_77:
            v251 = &v47[4 * v46];
            if (v23)
              operator delete(v23);
            v23 = v48;
            v21 = v227;
            v20 = v231;
            goto LABEL_31;
          }
        }
        else
        {
          v47 = 0;
          v48 = (int *)(4 * v43);
          *(_DWORD *)(4 * v43) = v41;
          v29 = 4 * v43 + 4;
          if (v42 != (char *)v23)
            goto LABEL_64;
        }
        v24 = v230;
        v9 = v213;
        goto LABEL_77;
      }
      *(_DWORD *)v250 = v41;
      v29 = (uint64_t)(v42 + 4);
      v24 = v230;
LABEL_31:
      v250 = (char *)v29;
      ++*(_DWORD *)&v24[4 * v20];
      ++v28;
      v14 = (char *)v21;
      if (v28 == v234)
      {
        v4 = *((_WORD *)v9 + 12);
        v14 = (char *)v21;
        v5 = *v9;
        v6 = v9[1];
        v25 = v225;
        goto LABEL_24;
      }
    }
  }
  v24 = v230;
  v216 = v19;
  *v19 = 0;
  v64 = a2;
  v65 = v223 - v230;
  if (v223 != v230)
  {
LABEL_87:
    v66 = 0;
    v67 = v65 >> 2;
    if (v67 <= 1)
      v67 = 1;
    v68 = v216 + 1;
    v69 = v24;
    do
    {
      v70 = *(_DWORD *)v69;
      v69 += 4;
      v66 += v70;
      *v68++ = v66;
      --v67;
    }
    while (v67);
  }
LABEL_91:
  v71 = (_QWORD *)*((_QWORD *)v9 + 1);
  if (v71)
    v71 = (_QWORD *)(v71[v6] - *v71);
  *(v18 - 1) = (_DWORD)v71;
  v72 = *((_WORD *)v64 + 12);
  v73 = *v64;
  v74 = v64[1];
  if ((v72 & 1) != 0)
    v75 = v73;
  else
    v75 = v74;
  if (!(_DWORD)v75)
  {
    v77 = 0;
    v78 = 0;
    v246 = 0;
    v247 = 0;
    v248 = 0;
    v79 = (_QWORD *)*((_QWORD *)a2 + 1);
    if (v79)
      goto LABEL_98;
LABEL_101:
    v84 = 0;
    v243 = 0;
    v244 = 0;
    v245 = 0;
    goto LABEL_107;
  }
  v76 = (char *)operator new(4 * v75);
  bzero(v76, 4 * v75);
  v77 = &v76[4 * v75];
  v78 = v76;
  v246 = 0;
  v247 = 0;
  v248 = 0;
  v79 = (_QWORD *)*((_QWORD *)a2 + 1);
  if (!v79)
    goto LABEL_101;
LABEL_98:
  v80 = v74;
  v81 = (int)v74;
  v82 = v79[v74];
  v83 = v82 - *v79;
  if (v82 == *v79)
  {
    v84 = 0;
  }
  else
  {
    if (v83 >> 62)
      sub_2394189F8();
    v84 = (char *)operator new(4 * v83);
    v246 = v84;
    v247 = (uint64_t)v84;
    v248 = &v84[4 * v83];
  }
  v243 = 0;
  v244 = 0;
  v245 = 0;
  v85 = v79[v81] - *v79;
  v74 = v80;
  if (v85)
  {
    if (v85 >> 62)
      sub_2394189F8();
    v243 = operator new(4 * v85);
    v244 = (char *)v243;
    v245 = (char *)v243 + 4 * v85;
  }
LABEL_107:
  v217 = v77;
  v86 = (v75 + 1);
  v226 = v78;
  if ((_DWORD)v75 == -1)
  {
    v224 = 0;
    v87 = 0;
    goto LABEL_110;
  }
  v88 = (char *)operator new(4 * v86);
  bzero(v88, 4 * v86);
  v224 = v88;
  v87 = &v88[4 * v86];
  if ((_DWORD)v75)
  {
LABEL_110:
    v214 = v87;
    v89 = 0;
    v91 = (char *)v246;
    v90 = v247;
    v92 = (char *)v243;
    v93 = a2;
    while (1)
    {
      v96 = *((_QWORD *)v93 + 1);
      v97 = *(_QWORD *)(v96 + 8 * v89);
      v94 = v89 + 1;
      v235 = *(_QWORD *)(v96 + 8 * (v89 + 1));
      if (v97 != v235)
        break;
LABEL_112:
      if ((v72 & 1) != 0)
        v95 = v73;
      else
        v95 = v74;
      v89 = v94;
      if (v94 >= v95)
      {
        v246 = v91;
        v247 = v90;
        v243 = v92;
        v87 = v214;
        goto LABEL_173;
      }
    }
    v220 = v89 + 1;
    v232 = v89;
    while (1)
    {
      if (*((_BYTE *)v93 + 28))
        v99 = (_DWORD *)(*((_QWORD *)v93 + 4)
                       + 4 * v97 * *((unsigned __int8 *)v93 + 28) * *((unsigned __int8 *)v93 + 28));
      else
        v99 = 0;
      if (v84 < v248)
      {
        *(_DWORD *)v84 = *v99;
        v90 = (uint64_t)(v84 + 4);
        goto LABEL_140;
      }
      v100 = (v84 - v91) >> 2;
      v101 = v100 + 1;
      if ((unint64_t)(v100 + 1) >> 62)
      {
        v246 = v91;
        v247 = v90;
        v243 = v92;
        sub_2394189F8();
      }
      v102 = v248 - v91;
      if ((v248 - v91) >> 1 > v101)
        v101 = v102 >> 1;
      v103 = (unint64_t)v102 >= 0x7FFFFFFFFFFFFFFCLL ? 0x3FFFFFFFFFFFFFFFLL : v101;
      if (v103)
      {
        if (v103 >> 62)
        {
          v246 = v91;
          v247 = v90;
          v243 = v92;
          sub_239418A80();
        }
        v104 = operator new(4 * v103);
        v105 = &v104[4 * v100];
        *(_DWORD *)v105 = *v99;
        v90 = (uint64_t)(v105 + 4);
        if (v84 == v91)
        {
LABEL_160:
          v93 = a2;
          v248 = &v104[4 * v103];
          if (!v91)
            goto LABEL_139;
LABEL_138:
          v109 = v90;
          operator delete(v91);
          v90 = v109;
          goto LABEL_139;
        }
      }
      else
      {
        v104 = 0;
        v105 = (char *)(4 * v100);
        *(_DWORD *)(4 * v100) = *v99;
        v90 = 4 * v100 + 4;
        if (v84 == v91)
          goto LABEL_160;
      }
      v106 = v84 - 4 - v91;
      if (v106 < 0xBC
        || &v104[v84 - v91 - 4 - (v106 & 0xFFFFFFFFFFFFFFFCLL)] > &v104[v84 - v91 - 4]
        || &v84[-(v106 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v84 - 4
        || (unint64_t)(v91 - v104) < 0x20)
      {
        break;
      }
      v127 = (v106 >> 2) + 1;
      v128 = 4 * (v127 & 0x7FFFFFFFFFFFFFF8);
      v107 = &v84[-v128];
      v105 -= v128;
      v129 = &v104[4 * v100 - 16];
      v130 = (__int128 *)(v84 - 16);
      v131 = v127 & 0x7FFFFFFFFFFFFFF8;
      v93 = a2;
      do
      {
        v132 = *v130;
        *(v129 - 1) = *(v130 - 1);
        *v129 = v132;
        v129 -= 2;
        v130 -= 2;
        v131 -= 8;
      }
      while (v131);
      if (v127 != (v127 & 0x7FFFFFFFFFFFFFF8))
        goto LABEL_136;
LABEL_137:
      v248 = &v104[4 * v103];
      if (v91)
        goto LABEL_138;
LABEL_139:
      v91 = v105;
      v89 = v232;
LABEL_140:
      v110 = *(_DWORD *)(*((_QWORD *)v93 + 2) + 4 * v97) * *((unsigned __int8 *)v93 + 28);
      v111 = v244;
      if (v244 >= v245)
      {
        v112 = (v244 - v92) >> 2;
        v113 = v112 + 1;
        if ((unint64_t)(v112 + 1) >> 62)
        {
          v246 = v91;
          v247 = v90;
          v243 = v92;
          sub_2394189F8();
        }
        v114 = v245 - v92;
        if ((v245 - v92) >> 1 > v113)
          v113 = v114 >> 1;
        if ((unint64_t)v114 >= 0x7FFFFFFFFFFFFFFCLL)
          v115 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v115 = v113;
        v228 = v90;
        if (v115)
        {
          if (v115 >> 62)
          {
            v246 = v91;
            v247 = v90;
            v243 = v92;
            sub_239418A80();
          }
          v116 = operator new(4 * v115);
          v117 = (int *)&v116[4 * v112];
          *v117 = v110;
          v98 = (uint64_t)(v117 + 1);
          if (v111 != v92)
          {
LABEL_150:
            v118 = v111 - 4 - v92;
            v78 = v226;
            if (v118 < 0x2C)
              goto LABEL_324;
            if ((unint64_t)(v92 - v116) < 0x20)
              goto LABEL_324;
            v119 = (v118 >> 2) + 1;
            v120 = 4 * (v119 & 0x7FFFFFFFFFFFFFF8);
            v121 = &v111[-v120];
            v117 = (int *)((char *)v117 - v120);
            v122 = &v116[4 * v112 - 16];
            v123 = v111 - 16;
            v124 = v119 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v125 = *(_OWORD *)v123;
              *(v122 - 1) = *((_OWORD *)v123 - 1);
              *v122 = v125;
              v122 -= 2;
              v123 -= 32;
              v124 -= 8;
            }
            while (v124);
            v111 = v121;
            if (v119 != (v119 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_324:
              do
              {
                v126 = *((_DWORD *)v111 - 1);
                v111 -= 4;
                *--v117 = v126;
              }
              while (v111 != v92);
            }
            v245 = &v116[4 * v115];
            if (v92)
LABEL_157:
              operator delete(v92);
LABEL_158:
            v92 = (char *)v117;
            v93 = a2;
            v90 = v228;
            v89 = v232;
            goto LABEL_119;
          }
        }
        else
        {
          v116 = 0;
          v117 = (int *)(4 * v112);
          *(_DWORD *)(4 * v112) = v110;
          v98 = 4 * v112 + 4;
          if (v111 != v92)
            goto LABEL_150;
        }
        v78 = v226;
        v245 = &v116[4 * v115];
        if (v92)
          goto LABEL_157;
        goto LABEL_158;
      }
      *(_DWORD *)v244 = v110;
      v98 = (uint64_t)(v111 + 4);
      v78 = v226;
LABEL_119:
      v244 = (char *)v98;
      ++*(_DWORD *)&v78[4 * v89];
      ++v97;
      v84 = (char *)v90;
      if (v97 == v235)
      {
        v72 = *((_WORD *)v93 + 12);
        v84 = (char *)v90;
        v73 = *v93;
        v74 = v93[1];
        v94 = v220;
        goto LABEL_112;
      }
    }
    v107 = v84;
    v93 = a2;
    do
    {
LABEL_136:
      v108 = *((_DWORD *)v107 - 1);
      v107 -= 4;
      *((_DWORD *)v105 - 1) = v108;
      v105 -= 4;
    }
    while (v107 != v91);
    goto LABEL_137;
  }
  v93 = a2;
LABEL_173:
  *v224 = 0;
  v133 = (v217 - v78) >> 2;
  v134 = v230;
  v135 = v213;
  if (v217 != v78)
  {
    v136 = 0;
    if (v133 <= 1)
      v137 = 1;
    else
      v137 = (v217 - v78) >> 2;
    v138 = v224 + 1;
    v139 = (int *)v78;
    do
    {
      v140 = *v139++;
      v136 += v140;
      *v138++ = v136;
      --v137;
    }
    while (v137);
  }
  v141 = (_QWORD *)*((_QWORD *)v93 + 1);
  if (v141)
    v142 = v141[v74] - *v141;
  else
    LODWORD(v142) = 0;
  *((_DWORD *)v87 - 1) = v142;
  v240 = 0;
  v241 = 0;
  v242 = 0;
  __p = 0;
  v238 = 0;
  v239 = 0;
  v143 = (_QWORD *)*((_QWORD *)v213 + 1);
  if (v143)
    v143 = (_QWORD *)(v143[v213[1]] - *v143);
  if (v141)
    v141 = (_QWORD *)(v141[v74] - *v141);
  v144 = (unint64_t)v143 + (_QWORD)v141;
  if ((_QWORD *)((char *)v143 + (_QWORD)v141))
  {
    if (v144 > 0x1555555555555555)
      goto LABEL_315;
    v145 = (char *)operator new(12 * v144);
    v144 = (unint64_t)&v145[12 * v144];
    v241 = v145;
    v134 = v230;
    if (v217 != v78)
      goto LABEL_189;
LABEL_220:
    v149 = v145;
    goto LABEL_221;
  }
  v145 = 0;
  if (v217 == v78)
    goto LABEL_220;
LABEL_189:
  v146 = 0;
  v218 = (unsigned int *)v243;
  v215 = (char *)v246;
  if (v133 <= 1)
    v147 = 1;
  else
    v147 = v133;
  v212 = v147;
  v148 = v241;
  v149 = v145;
  do
  {
    v150 = *(unsigned int *)&v78[4 * v146];
    if ((_DWORD)v150)
    {
      v151 = v224[v146];
      v221 = v150 + v151;
      v152 = (float *)v252;
      v153 = v249;
      v233 = v249;
      v236 = (float *)v252;
      do
      {
        v229 = v151;
        v154 = 4 * v151;
        v155 = v218[v151];
        v156 = *(unsigned int *)&v134[v155 * 4];
        if ((_DWORD)v156)
        {
          v157 = v216[v155];
          v158 = v156 + v157;
          v159 = *(float *)&v215[v154];
          do
          {
            while (1)
            {
              v160 = *(_DWORD *)&v153[4 * v157];
              v161 = v159 * v152[v157];
              if ((unint64_t)v145 >= v144)
                break;
              *(_DWORD *)v145 = v160;
              *((_DWORD *)v145 + 1) = v146;
              v148 = v145 + 12;
              *((float *)v145 + 2) = v161;
              ++v157;
              v145 += 12;
              if (v157 >= v158)
                goto LABEL_196;
            }
            v162 = 0xAAAAAAAAAAAAAAABLL * ((v145 - v149) >> 2) + 1;
            if (v162 > 0x1555555555555555)
            {
              v241 = v148;
              v242 = v144;
              v240 = v149;
              sub_2394189F8();
            }
            if (0x5555555555555556 * ((uint64_t)(v144 - (_QWORD)v149) >> 2) > v162)
              v162 = 0x5555555555555556 * ((uint64_t)(v144 - (_QWORD)v149) >> 2);
            if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v144 - (_QWORD)v149) >> 2) >= 0xAAAAAAAAAAAAAAALL)
              v163 = 0x1555555555555555;
            else
              v163 = v162;
            if (v163)
            {
              if (v163 > 0x1555555555555555)
              {
                v241 = v148;
                v242 = v144;
                v240 = v149;
                sub_239418A80();
              }
              v164 = (char *)operator new(12 * v163);
            }
            else
            {
              v164 = 0;
            }
            v165 = &v164[4 * ((v145 - v149) >> 2)];
            *(_DWORD *)v165 = v160;
            *((_DWORD *)v165 + 1) = v146;
            *((float *)v165 + 2) = v161;
            v166 = v165;
            while (v145 != v149)
            {
              v167 = *(_QWORD *)(v145 - 12);
              v145 -= 12;
              v168 = *((_DWORD *)v145 + 2);
              *(_QWORD *)(v166 - 12) = v167;
              v166 -= 12;
              *((_DWORD *)v166 + 2) = v168;
            }
            v144 = (unint64_t)&v164[12 * v163];
            v148 = v165 + 12;
            if (v149)
              operator delete(v149);
            v149 = v166;
            v153 = v233;
            v152 = v236;
            ++v157;
            v145 = v148;
          }
          while (v157 < v158);
        }
LABEL_196:
        v134 = v230;
        v151 = v229 + 1;
      }
      while (v229 + 1 < v221);
    }
    ++v146;
    v78 = v226;
  }
  while (v146 != v212);
  v241 = v148;
  v135 = v213;
LABEL_221:
  v169 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * ((v145 - v149) >> 2));
  v242 = v144;
  v240 = v149;
  if (v145 == v149)
    v170 = 0;
  else
    v170 = v169;
  sub_239532A48((unsigned int *)v149, (unsigned int *)v145, (uint64_t)v255, v170, 1);
  v171 = (char *)v240;
  v172 = v241;
  v173 = 0xAAAAAAAAAAAAAAABLL * ((v241 - (_BYTE *)v240) >> 2);
  v174 = (char *)__p;
  if (0xAAAAAAAAAAAAAAABLL * ((v239 - (_BYTE *)__p) >> 2) < v173)
  {
    if (v173 > 0x1555555555555555)
      goto LABEL_315;
    v175 = v238;
    v176 = (char *)operator new(v241 - (_BYTE *)v240);
    v177 = &v176[12 * ((v238 - (_BYTE *)__p) / 12)];
    v178 = v177;
    if (v238 != __p)
    {
      v178 = &v176[12 * ((v238 - (_BYTE *)__p) / 12)];
      do
      {
        v179 = *(_QWORD *)(v175 - 12);
        v175 -= 12;
        v180 = *((_DWORD *)v175 + 2);
        *(_QWORD *)(v178 - 12) = v179;
        v178 -= 12;
        *((_DWORD *)v178 + 2) = v180;
      }
      while (v175 != v174);
    }
    __p = v178;
    v238 = v177;
    v239 = &v176[12 * v173];
    if (v174)
    {
      operator delete(v174);
      v171 = (char *)v240;
      v172 = v241;
    }
  }
  v181 = v172;
  if (v171 == v172)
    goto LABEL_253;
  v182 = v238;
  if (v238 >= v239)
  {
    v185 = (char *)__p;
    v186 = 0xAAAAAAAAAAAAAAABLL * ((v238 - (_BYTE *)__p) >> 2) + 1;
    if (v186 <= 0x1555555555555555)
    {
      if (0x5555555555555556 * ((v239 - (_BYTE *)__p) >> 2) > v186)
        v186 = 0x5555555555555556 * ((v239 - (_BYTE *)__p) >> 2);
      if (0xAAAAAAAAAAAAAAABLL * ((v239 - (_BYTE *)__p) >> 2) >= 0xAAAAAAAAAAAAAAALL)
        v187 = 0x1555555555555555;
      else
        v187 = v186;
      if (v187)
      {
        if (v187 > 0x1555555555555555)
          sub_239418A80();
        v188 = (char *)operator new(12 * v187);
      }
      else
      {
        v188 = 0;
      }
      v189 = &v188[4 * ((v238 - (_BYTE *)__p) >> 2)];
      v190 = *(_QWORD *)v171;
      *((_DWORD *)v189 + 2) = *((_DWORD *)v171 + 2);
      *(_QWORD *)v189 = v190;
      v184 = v189 + 12;
      if (v182 != v185)
      {
        do
        {
          v191 = *(_QWORD *)(v182 - 12);
          v182 -= 12;
          v192 = *((_DWORD *)v182 + 2);
          *(_QWORD *)(v189 - 12) = v191;
          v189 -= 12;
          *((_DWORD *)v189 + 2) = v192;
        }
        while (v182 != v185);
        v182 = (char *)__p;
      }
      __p = v189;
      v238 = v184;
      v239 = &v188[12 * v187];
      if (v182)
        operator delete(v182);
      goto LABEL_252;
    }
LABEL_315:
    sub_2394189F8();
  }
  v183 = *(_QWORD *)v171;
  *((_DWORD *)v238 + 2) = *((_DWORD *)v171 + 2);
  *(_QWORD *)v182 = v183;
  v184 = v182 + 12;
LABEL_252:
  v238 = v184;
  v172 = (char *)v240;
  v181 = v241;
LABEL_253:
  if (0xAAAAAAAAAAAAAAABLL * ((v181 - v172) >> 2) >= 2)
  {
    v193 = v238;
    for (i = 1; i < 0xAAAAAAAAAAAAAAABLL * ((v241 - (_BYTE *)v240) >> 2); ++i)
    {
      while (1)
      {
        v197 = &v172[12 * i];
        if (*((_DWORD *)v193 - 3) != *(_DWORD *)v197 || *((_DWORD *)v193 - 2) != *(_DWORD *)&v172[12 * i + 4])
          break;
        *((float *)v193 - 1) = *(float *)&v172[12 * i++ + 8] + *((float *)v193 - 1);
        if (i >= 0xAAAAAAAAAAAAAAABLL * ((v181 - v172) >> 2))
          goto LABEL_279;
      }
      if (v193 < v239)
      {
        v195 = *(_QWORD *)v197;
        *((_DWORD *)v193 + 2) = *((_DWORD *)v197 + 2);
        *(_QWORD *)v193 = v195;
        v196 = v193 + 12;
      }
      else
      {
        v198 = (char *)__p;
        v199 = 0xAAAAAAAAAAAAAAABLL * ((v193 - (_BYTE *)__p) >> 2);
        v200 = v199 + 1;
        if (v199 + 1 > 0x1555555555555555)
          sub_2394189F8();
        if (0x5555555555555556 * ((v239 - (_BYTE *)__p) >> 2) > v200)
          v200 = 0x5555555555555556 * ((v239 - (_BYTE *)__p) >> 2);
        if (0xAAAAAAAAAAAAAAABLL * ((v239 - (_BYTE *)__p) >> 2) >= 0xAAAAAAAAAAAAAAALL)
          v201 = 0x1555555555555555;
        else
          v201 = v200;
        if (v201)
        {
          if (v201 > 0x1555555555555555)
            sub_239418A80();
          v202 = (char *)operator new(12 * v201);
        }
        else
        {
          v202 = 0;
        }
        v203 = &v202[4 * ((v193 - (_BYTE *)__p) >> 2)];
        v204 = *(_QWORD *)v197;
        v205 = &v202[12 * v201];
        *((_DWORD *)v203 + 2) = *((_DWORD *)v197 + 2);
        *(_QWORD *)v203 = v204;
        v196 = v203 + 12;
        if (v193 == v198)
        {
          __p = &v202[12 * v199];
          v238 = v203 + 12;
          v239 = &v202[12 * v201];
          v78 = v226;
        }
        else
        {
          v78 = v226;
          do
          {
            v206 = *(_QWORD *)(v193 - 12);
            v193 -= 12;
            v207 = *((_DWORD *)v193 + 2);
            *(_QWORD *)(v203 - 12) = v206;
            v203 -= 12;
            *((_DWORD *)v203 + 2) = v207;
          }
          while (v193 != v198);
          v193 = (char *)__p;
          __p = v203;
          v238 = v196;
          v239 = v205;
          if (!v193)
            goto LABEL_256;
        }
        operator delete(v193);
      }
LABEL_256:
      v238 = v196;
      v193 = v196;
      v172 = (char *)v240;
      v181 = v241;
    }
  }
LABEL_279:
  if ((a2[6] & 1) != 0)
    v208 = a2;
  else
    v208 = a2 + 1;
  v209 = *v208 * *((unsigned __int8 *)a2 + 28);
  if ((v135[6] & 1) != 0)
    v210 = v135 + 1;
  else
    v210 = v135;
  sub_239523F88((char **)&__p, v209, *v210 * *((unsigned __int8 *)v135 + 28), 1, v211);
  if (__p)
  {
    v238 = (char *)__p;
    operator delete(__p);
  }
  if (v240)
  {
    v241 = (char *)v240;
    operator delete(v240);
  }
  operator delete(v224);
  if (v243)
  {
    v244 = (char *)v243;
    operator delete(v243);
  }
  if (v246)
  {
    v247 = (uint64_t)v246;
    operator delete(v246);
  }
  if (v78)
    operator delete(v78);
  operator delete(v216);
  if (v249)
  {
    v250 = v249;
    operator delete(v249);
  }
  if (v252)
  {
    v253 = (uint64_t)v252;
    operator delete(v252);
  }
  if (v230)
    operator delete(v230);
}

void sub_2395258E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,uint64_t a31,void *a32,uint64_t a33)
{
  void *v33;
  uint64_t v34;
  void *v36;
  void *v37;
  void *v38;
  void *v39;

  if (__p)
  {
    operator delete(__p);
    v36 = a32;
    if (!a32)
    {
LABEL_3:
      if (!v33)
        goto LABEL_4;
      goto LABEL_11;
    }
  }
  else
  {
    v36 = a32;
    if (!a32)
      goto LABEL_3;
  }
  operator delete(v36);
  if (!v33)
  {
LABEL_4:
    v37 = a13;
    if (!a13)
      goto LABEL_5;
    goto LABEL_12;
  }
LABEL_11:
  operator delete(v33);
  v37 = a13;
  if (!a13)
  {
LABEL_5:
    v38 = *(void **)(v34 - 160);
    if (!v38)
      goto LABEL_6;
    goto LABEL_13;
  }
LABEL_12:
  operator delete(v37);
  v38 = *(void **)(v34 - 160);
  if (!v38)
  {
LABEL_6:
    v39 = *(void **)(v34 - 136);
    if (!v39)
      goto LABEL_7;
    goto LABEL_14;
  }
LABEL_13:
  *(_QWORD *)(v34 - 152) = v38;
  operator delete(v38);
  v39 = *(void **)(v34 - 136);
  if (!v39)
  {
LABEL_7:
    if (!a20)
      goto LABEL_8;
    goto LABEL_15;
  }
LABEL_14:
  *(_QWORD *)(v34 - 128) = v39;
  operator delete(v39);
  if (!a20)
LABEL_8:
    _Unwind_Resume(exception_object);
LABEL_15:
  operator delete(a20);
  _Unwind_Resume(exception_object);
}

void sub_239525AF4(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v4;
  __int16 v5;
  int v6;
  int v7;
  int v8;
  __int16 v9;
  int v10;
  int v11;
  int v12;
  int v13;
  char *v15;
  char *v16;
  float *v17;
  float *v18;
  uint64_t v19;
  unint64_t v20;
  float *v21;
  int v22;
  __int16 v23;
  BOOL v24;
  int v25;
  unsigned int v26;
  int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  float v32;
  _DWORD *v33;
  float v34;
  int v35;
  _DWORD *v36;
  float *v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  char *v41;
  float *v42;
  unint64_t v43;
  unint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  int v48;
  float *v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  char *v53;
  float *v54;
  unint64_t v55;
  unint64_t v56;
  float v57;
  _DWORD *v58;
  char *v59;
  char *v60;
  uint64_t v61;
  int v62;
  float *v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  char *v67;
  uint64_t v68;
  int v69;
  uint64_t v70;
  int v71;
  char *v72;
  char *v73;
  uint64_t v74;
  int v75;
  void *__p;
  void *v78;
  char *v79;
  void *v80;
  float *v81;
  void *v82;
  char *v83;

  v4 = *(unsigned __int8 *)(a1 + 28);
  v5 = *(_WORD *)(a1 + 24);
  if ((v5 & 1) != 0)
    v6 = *(_DWORD *)a1;
  else
    v6 = *(_DWORD *)(a1 + 4);
  v7 = v6 * v4;
  v8 = *(unsigned __int8 *)(a2 + 28);
  v9 = *(_WORD *)(a2 + 24);
  if ((v9 & 1) != 0)
    v10 = *(_DWORD *)a2;
  else
    v10 = *(_DWORD *)(a2 + 4);
  if (v7 != v10 * v8
    || ((v5 & 1) != 0 ? (v11 = *(_DWORD *)(a1 + 4)) : (v11 = *(_DWORD *)a1),
        (v12 = v11 * v4, (v9 & 1) != 0) ? (v13 = *(_DWORD *)(a2 + 4)) : (v13 = *(_DWORD *)a2),
        v12 != v13 * v8))
  {
    sub_239EC03C4();
  }
  sub_239532748((int *)a1, (int **)&v82);
  sub_239532748((int *)a2, (int **)&v80);
  __p = 0;
  v78 = 0;
  v79 = 0;
  v16 = (char *)v82;
  v15 = v83;
  v17 = (float *)v80;
  v18 = v81;
  v19 = ((char *)v81 - (_BYTE *)v80) >> 2;
  if (0xAAAAAAAAAAAAAAABLL * ((v83 - (_BYTE *)v82) >> 2) <= 0xAAAAAAAAAAAAAAABLL * v19)
    v20 = 0xAAAAAAAAAAAAAAABLL * v19;
  else
    v20 = 0xAAAAAAAAAAAAAAABLL * ((v83 - (_BYTE *)v82) >> 2);
  if (v20)
  {
    if (v20 > 0x1555555555555555)
      sub_2394189F8();
    v21 = (float *)operator new(12 * v20);
    __p = v21;
    v78 = v21;
    v79 = (char *)&v21[3 * v20];
    if (v16 != v15)
    {
      while (1)
      {
LABEL_37:
        while (v16 == v15)
        {
          v29 = *((_DWORD *)v17 + 1);
LABEL_47:
          v34 = *v17;
          v35 = *((_DWORD *)v17 + 2);
          if (v21 >= (float *)v79)
          {
            v37 = (float *)__p;
            v38 = 0xAAAAAAAAAAAAAAABLL * (((char *)v21 - (_BYTE *)__p) >> 2);
            v39 = v38 + 1;
            if (v38 + 1 > 0x1555555555555555)
              sub_2394189F8();
            if (0x5555555555555556 * ((v79 - (_BYTE *)__p) >> 2) > v39)
              v39 = 0x5555555555555556 * ((v79 - (_BYTE *)__p) >> 2);
            if (0xAAAAAAAAAAAAAAABLL * ((v79 - (_BYTE *)__p) >> 2) >= 0xAAAAAAAAAAAAAAALL)
              v40 = 0x1555555555555555;
            else
              v40 = v39;
            if (v40)
            {
              if (v40 > 0x1555555555555555)
                sub_239418A80();
              v41 = (char *)operator new(12 * v40);
            }
            else
            {
              v41 = 0;
            }
            v45 = &v41[4 * (((char *)v21 - (_BYTE *)__p) >> 2)];
            *(float *)v45 = v34;
            *((_DWORD *)v45 + 1) = v29;
            *((_DWORD *)v45 + 2) = v35;
            v46 = &v41[12 * v38];
            if (v21 != v37)
            {
              do
              {
                v47 = *(_QWORD *)(v21 - 3);
                v21 -= 3;
                v48 = *((_DWORD *)v21 + 2);
                *(_QWORD *)(v46 - 12) = v47;
                v46 -= 12;
                *((_DWORD *)v46 + 2) = v48;
              }
              while (v21 != v37);
LABEL_72:
              v21 = (float *)__p;
            }
LABEL_73:
            v36 = v45 + 12;
            __p = v46;
            v78 = v45 + 12;
            v79 = &v41[12 * v40];
            if (v21)
              operator delete(v21);
            goto LABEL_75;
          }
LABEL_48:
          *v21 = v34;
          *((_DWORD *)v21 + 1) = v29;
          v36 = v21 + 3;
          *((_DWORD *)v21 + 2) = v35;
LABEL_75:
          v78 = v36;
          v17 += 3;
          v21 = (float *)v36;
          v15 = v83;
          v18 = v81;
          if (v16 == v83)
          {
LABEL_106:
            if (v17 == v18)
              goto LABEL_24;
          }
        }
        v28 = *((_DWORD *)v16 + 1);
        v29 = *((_DWORD *)v17 + 1);
        if (v28 > v29)
          goto LABEL_47;
        v30 = *(_DWORD *)v16;
        if (v28 < v29 || v17 == v18)
        {
          v32 = *((float *)v16 + 2);
          if (v21 >= (float *)v79)
          {
            v49 = (float *)__p;
            v50 = 0xAAAAAAAAAAAAAAABLL * (((char *)v21 - (_BYTE *)__p) >> 2);
            v51 = v50 + 1;
            if (v50 + 1 > 0x1555555555555555)
              sub_2394189F8();
            if (0x5555555555555556 * ((v79 - (_BYTE *)__p) >> 2) > v51)
              v51 = 0x5555555555555556 * ((v79 - (_BYTE *)__p) >> 2);
            if (0xAAAAAAAAAAAAAAABLL * ((v79 - (_BYTE *)__p) >> 2) >= 0xAAAAAAAAAAAAAAALL)
              v52 = 0x1555555555555555;
            else
              v52 = v51;
            if (v52)
            {
              if (v52 > 0x1555555555555555)
                sub_239418A80();
              v53 = (char *)operator new(12 * v52);
            }
            else
            {
              v53 = 0;
            }
            v59 = &v53[4 * (((char *)v21 - (_BYTE *)__p) >> 2)];
            *(_DWORD *)v59 = v30;
            *((_DWORD *)v59 + 1) = v28;
            *((float *)v59 + 2) = v32;
            v60 = &v53[12 * v50];
            if (v21 != v49)
            {
              do
              {
                v61 = *(_QWORD *)(v21 - 3);
                v21 -= 3;
                v62 = *((_DWORD *)v21 + 2);
                *(_QWORD *)(v60 - 12) = v61;
                v60 -= 12;
                *((_DWORD *)v60 + 2) = v62;
              }
              while (v21 != v49);
LABEL_102:
              v21 = (float *)__p;
            }
LABEL_103:
            v33 = v59 + 12;
            __p = v60;
            v78 = v59 + 12;
            v79 = &v53[12 * v52];
            if (v21)
              operator delete(v21);
            goto LABEL_105;
          }
LABEL_45:
          *(_DWORD *)v21 = v30;
          *((_DWORD *)v21 + 1) = v28;
          v33 = v21 + 3;
          v21[2] = v32;
LABEL_105:
          v78 = v33;
          v16 += 12;
          v21 = (float *)v33;
          v15 = v83;
          v18 = v81;
          if (v16 == v83)
            goto LABEL_106;
        }
        else
        {
          v34 = *v17;
          if (v30 > *(_DWORD *)v17)
          {
            v35 = *((_DWORD *)v17 + 2);
            if (v21 >= (float *)v79)
            {
              v42 = (float *)__p;
              v43 = 0xAAAAAAAAAAAAAAABLL * (((char *)v21 - (_BYTE *)__p) >> 2);
              v44 = v43 + 1;
              if (v43 + 1 > 0x1555555555555555)
                sub_2394189F8();
              if (0x5555555555555556 * ((v79 - (_BYTE *)__p) >> 2) > v44)
                v44 = 0x5555555555555556 * ((v79 - (_BYTE *)__p) >> 2);
              if (0xAAAAAAAAAAAAAAABLL * ((v79 - (_BYTE *)__p) >> 2) >= 0xAAAAAAAAAAAAAAALL)
                v40 = 0x1555555555555555;
              else
                v40 = v44;
              if (v40)
              {
                if (v40 > 0x1555555555555555)
                  sub_239418A80();
                v41 = (char *)operator new(12 * v40);
              }
              else
              {
                v41 = 0;
              }
              v45 = &v41[4 * (((char *)v21 - (_BYTE *)__p) >> 2)];
              *(float *)v45 = v34;
              *((_DWORD *)v45 + 1) = v29;
              *((_DWORD *)v45 + 2) = v35;
              v46 = &v41[12 * v43];
              if (v21 != v42)
              {
                do
                {
                  v68 = *(_QWORD *)(v21 - 3);
                  v21 -= 3;
                  v69 = *((_DWORD *)v21 + 2);
                  *(_QWORD *)(v46 - 12) = v68;
                  v46 -= 12;
                  *((_DWORD *)v46 + 2) = v69;
                }
                while (v21 != v42);
                goto LABEL_72;
              }
              goto LABEL_73;
            }
            goto LABEL_48;
          }
          v32 = *((float *)v16 + 2);
          if (v30 < LODWORD(v34))
          {
            if (v21 >= (float *)v79)
            {
              v54 = (float *)__p;
              v55 = 0xAAAAAAAAAAAAAAABLL * (((char *)v21 - (_BYTE *)__p) >> 2);
              v56 = v55 + 1;
              if (v55 + 1 > 0x1555555555555555)
                sub_2394189F8();
              if (0x5555555555555556 * ((v79 - (_BYTE *)__p) >> 2) > v56)
                v56 = 0x5555555555555556 * ((v79 - (_BYTE *)__p) >> 2);
              if (0xAAAAAAAAAAAAAAABLL * ((v79 - (_BYTE *)__p) >> 2) >= 0xAAAAAAAAAAAAAAALL)
                v52 = 0x1555555555555555;
              else
                v52 = v56;
              if (v52)
              {
                if (v52 > 0x1555555555555555)
                  sub_239418A80();
                v53 = (char *)operator new(12 * v52);
              }
              else
              {
                v53 = 0;
              }
              v59 = &v53[4 * (((char *)v21 - (_BYTE *)__p) >> 2)];
              *(_DWORD *)v59 = v30;
              *((_DWORD *)v59 + 1) = v28;
              *((float *)v59 + 2) = v32;
              v60 = &v53[12 * v55];
              if (v21 != v54)
              {
                do
                {
                  v70 = *(_QWORD *)(v21 - 3);
                  v21 -= 3;
                  v71 = *((_DWORD *)v21 + 2);
                  *(_QWORD *)(v60 - 12) = v70;
                  v60 -= 12;
                  *((_DWORD *)v60 + 2) = v71;
                }
                while (v21 != v54);
                goto LABEL_102;
              }
              goto LABEL_103;
            }
            goto LABEL_45;
          }
          v57 = v32 + v17[2];
          if (v21 >= (float *)v79)
          {
            v63 = (float *)__p;
            v64 = 0xAAAAAAAAAAAAAAABLL * (((char *)v21 - (_BYTE *)__p) >> 2);
            v65 = v64 + 1;
            if (v64 + 1 > 0x1555555555555555)
              sub_2394189F8();
            if (0x5555555555555556 * ((v79 - (_BYTE *)__p) >> 2) > v65)
              v65 = 0x5555555555555556 * ((v79 - (_BYTE *)__p) >> 2);
            if (0xAAAAAAAAAAAAAAABLL * ((v79 - (_BYTE *)__p) >> 2) >= 0xAAAAAAAAAAAAAAALL)
              v66 = 0x1555555555555555;
            else
              v66 = v65;
            if (v66)
            {
              if (v66 > 0x1555555555555555)
                sub_239418A80();
              v67 = (char *)operator new(12 * v66);
            }
            else
            {
              v67 = 0;
            }
            v72 = &v67[4 * (((char *)v21 - (_BYTE *)__p) >> 2)];
            *(_DWORD *)v72 = v30;
            *((_DWORD *)v72 + 1) = v28;
            *((float *)v72 + 2) = v57;
            v73 = &v67[12 * v64];
            if (v21 != v63)
            {
              do
              {
                v74 = *(_QWORD *)(v21 - 3);
                v21 -= 3;
                v75 = *((_DWORD *)v21 + 2);
                *(_QWORD *)(v73 - 12) = v74;
                v73 -= 12;
                *((_DWORD *)v73 + 2) = v75;
              }
              while (v21 != v63);
              v21 = (float *)__p;
            }
            v58 = v72 + 12;
            __p = v73;
            v78 = v72 + 12;
            v79 = &v67[12 * v66];
            if (v21)
              operator delete(v21);
          }
          else
          {
            *(_DWORD *)v21 = v30;
            *((_DWORD *)v21 + 1) = v28;
            v58 = v21 + 3;
            v21[2] = v57;
          }
          v78 = v58;
          v16 += 12;
          v17 += 3;
          v21 = (float *)v58;
          v15 = v83;
          v18 = v81;
          if (v16 == v83)
            goto LABEL_106;
        }
      }
    }
  }
  else
  {
    v21 = 0;
    if (v82 != v83)
      goto LABEL_37;
  }
  if (v17 != v18)
    goto LABEL_37;
LABEL_24:
  v22 = *(unsigned __int8 *)(a1 + 28);
  v23 = *(_WORD *)(a1 + 24);
  v24 = (v23 & 1) == 0;
  if ((v23 & 1) != 0)
    v25 = *(_DWORD *)a1;
  else
    v25 = *(_DWORD *)(a1 + 4);
  v26 = v25 * v22;
  if (v24)
    v27 = *(_DWORD *)a1;
  else
    v27 = *(_DWORD *)(a1 + 4);
  sub_239523F88((char **)&__p, v26, v27 * v22, 1, a3);
  if (__p)
  {
    v78 = __p;
    operator delete(__p);
  }
  if (v80)
  {
    v81 = (float *)v80;
    operator delete(v80);
  }
  if (v82)
  {
    v83 = (char *)v82;
    operator delete(v82);
  }
}

void sub_2395261D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17)
{
  void *v18;
  void *v19;

  if (__p)
  {
    operator delete(__p);
    v18 = a13;
    if (!a13)
    {
LABEL_3:
      v19 = a16;
      if (!a16)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else
  {
    v18 = a13;
    if (!a13)
      goto LABEL_3;
  }
  operator delete(v18);
  v19 = a16;
  if (!a16)
LABEL_4:
    _Unwind_Resume(exception_object);
LABEL_7:
  operator delete(v19);
  _Unwind_Resume(exception_object);
}

void sub_239526260(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int v3;
  __int16 v4;
  int v5;
  BOOL v6;
  int v7;
  int v8;
  _DWORD *v10;
  _DWORD *v11;
  int64_t v12;
  unint64_t v13;
  char *v14;
  uint64_t v15;
  _DWORD *v16;
  char *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  int v26;
  _DWORD *v27;
  _DWORD *v28;
  int64x2_t v29;
  void *v30;
  void *v31;
  int64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint32x4_t *v38;
  unint64_t v39;
  int64x2_t v40;
  int64x2_t v41;
  int64x2_t v42;
  uint32x4_t v43;
  unint64_t v44;
  unsigned int *v45;
  unsigned int v46;
  void *v47;
  _QWORD *v48;
  uint64_t v49;
  unsigned int *v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  unsigned int v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  BOOL v58;
  unint64_t v59;
  int64x2_t *v60;
  int64x2_t *v61;
  int64x2_t *v62;
  unint64_t v63;
  int64x2_t v64;
  unint64_t v65;
  uint64_t v66;
  __int32 *v67;
  char *v68;
  int v69;
  _BYTE *v70;
  int v71;
  unint64_t v72;
  uint64_t *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  const float *v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t j;
  uint64_t v82;
  float v83;
  float *v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  float32x4_t *v93;
  uint64_t v94;
  float32x4_t v95;
  float32x4_t *v96;
  float32x4_t *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  int32x4_t v105;
  int32x4_t *v106;
  _DWORD *v107;
  uint64_t v108;
  int32x4_t *v109;
  uint64_t v110;
  uint64_t v111;
  void *__p;
  _BYTE *v113;
  uint64_t v114;
  void *v115;
  _BYTE *v116;
  uint64_t v117;
  void *v118;
  void *v119;
  uint64_t v120;
  void *v121;
  void *v122;
  char *i;
  void *v124;
  _BYTE *v125;

  v3 = *(unsigned __int8 *)(a1 + 28);
  v4 = *(_WORD *)(a1 + 24);
  v5 = *(_DWORD *)(a1 + 4);
  v6 = (v4 & 1) == 0;
  if ((v4 & 1) != 0)
    v7 = *(_DWORD *)a1;
  else
    v7 = *(_DWORD *)(a1 + 4);
  v8 = v7 * v3;
  if (v6)
    v5 = *(_DWORD *)a1;
  if (v8 != v5 * v3)
    sub_239EC03F4();
  sub_239532748((int *)a1, (int **)&v124);
  v121 = 0;
  v122 = 0;
  i = 0;
  v11 = v124;
  v10 = v125;
  v12 = v125 - (_BYTE *)v124;
  v111 = a2;
  if (v125 != v124)
  {
    v13 = 0xAAAAAAAAAAAAAAABLL * (v12 >> 2);
    if (v13 > 0x1555555555555555)
      sub_2394189F8();
    v14 = (char *)operator new(v12);
    v121 = v14;
    v122 = v14;
    for (i = &v14[12 * v13]; v11 != v10; v11 += 3)
    {
      if (v11[1] >= *v11)
      {
        if (v14 < i)
        {
          v15 = *(_QWORD *)v11;
          *((_DWORD *)v14 + 2) = v11[2];
          *(_QWORD *)v14 = v15;
          v16 = v14 + 12;
        }
        else
        {
          v17 = (char *)v121;
          v18 = 0xAAAAAAAAAAAAAAABLL * ((v14 - (_BYTE *)v121) >> 2);
          v19 = v18 + 1;
          if (v18 + 1 > 0x1555555555555555)
            sub_2394189F8();
          if (0x5555555555555556 * ((i - (_BYTE *)v121) >> 2) > v19)
            v19 = 0x5555555555555556 * ((i - (_BYTE *)v121) >> 2);
          if (0xAAAAAAAAAAAAAAABLL * ((i - (_BYTE *)v121) >> 2) >= 0xAAAAAAAAAAAAAAALL)
            v20 = 0x1555555555555555;
          else
            v20 = v19;
          if (v20)
          {
            if (v20 > 0x1555555555555555)
              sub_239418A80();
            v21 = (char *)operator new(12 * v20);
          }
          else
          {
            v21 = 0;
          }
          v22 = *(_QWORD *)v11;
          v23 = &v21[4 * ((v14 - (_BYTE *)v121) >> 2)];
          *((_DWORD *)v23 + 2) = v11[2];
          *(_QWORD *)v23 = v22;
          v24 = &v21[12 * v18];
          if (v14 != v17)
          {
            do
            {
              v25 = *(_QWORD *)(v14 - 12);
              v14 -= 12;
              v26 = *((_DWORD *)v14 + 2);
              *(_QWORD *)(v24 - 12) = v25;
              v24 -= 12;
              *((_DWORD *)v24 + 2) = v26;
            }
            while (v14 != v17);
            v14 = (char *)v121;
          }
          v16 = v23 + 12;
          v121 = v24;
          v122 = v23 + 12;
          i = &v21[12 * v20];
          if (v14)
            operator delete(v14);
        }
        v122 = v16;
        v14 = (char *)v16;
      }
    }
  }
  v118 = 0;
  v119 = 0;
  v120 = 0;
  v115 = 0;
  v116 = 0;
  v117 = 0;
  __p = 0;
  v113 = 0;
  v114 = 0;
  if ((*(_WORD *)(a1 + 24) & 1) != 0)
    v27 = (_DWORD *)a1;
  else
    v27 = (_DWORD *)(a1 + 4);
  sub_2395306BC((char **)&v121, *v27 * *(unsigned __int8 *)(a1 + 28), &v118, (uint64_t *)&v115, (unint64_t *)&__p, 1);
  *(_WORD *)(v111 + 24) = *(_WORD *)(v111 + 24) & 0x7FF0 | 0xC;
  *(_BYTE *)(v111 + 28) = 1;
  *(_QWORD *)(v111 + 32) = 0;
  *(_QWORD *)(v111 + 40) = 0;
  *(_QWORD *)(v111 + 8) = 0;
  *(_QWORD *)(v111 + 16) = 0;
  *(_QWORD *)v111 = 0;
  *(_QWORD *)(v111 + 8) = malloc_type_calloc(1uLL, 8uLL, 0x100004000313F17uLL);
  if ((*(_WORD *)(a1 + 24) & 1) != 0)
    v28 = (_DWORD *)(a1 + 4);
  else
    v28 = (_DWORD *)a1;
  sub_239530A0C(v111, *v28 * *(unsigned __int8 *)(a1 + 28), (unsigned int **)&v115);
  v31 = v115;
  v30 = v116;
  v32 = v116 - (_BYTE *)v115;
  v33 = (v116 - (_BYTE *)v115) >> 2;
  if (v33 == *(_DWORD *)(v111 + 4))
  {
    if (v116 == v115)
    {
      v35 = 0;
      goto LABEL_51;
    }
    v34 = 2;
    if ((unint64_t)(v33 + 1) > 2)
      v34 = v33 + 1;
    if (v34 >= 9)
    {
      v37 = (v34 - 1) & 0xFFFFFFFFFFFFFFF8;
      v36 = v37 | 1;
      v38 = (uint32x4_t *)((char *)v115 + 16);
      v29 = 0uLL;
      v39 = v37;
      v40 = 0uLL;
      v41 = 0uLL;
      v42 = 0uLL;
      do
      {
        v43 = v38[-1];
        v40 = (int64x2_t)vaddw_high_u32((uint64x2_t)v40, v43);
        v29 = (int64x2_t)vaddw_u32((uint64x2_t)v29, *(uint32x2_t *)v43.i8);
        v42 = (int64x2_t)vaddw_high_u32((uint64x2_t)v42, *v38);
        v41 = (int64x2_t)vaddw_u32((uint64x2_t)v41, *(uint32x2_t *)v38->i8);
        v38 += 2;
        v39 -= 8;
      }
      while (v39);
      v29.i64[0] = vaddvq_s64(vaddq_s64(vaddq_s64(v41, v29), vaddq_s64(v42, v40)));
      v35 = v29.i64[0];
      if (v34 - 1 == v37)
      {
LABEL_51:
        if (v35 == *(_QWORD *)(v111 + 40))
        {
          v47 = *(void **)(v111 + 8);
          if (v47)
          {
            free(v47);
            *(_QWORD *)(v111 + 8) = 0;
            v31 = v115;
            v30 = v116;
            v32 = v116 - (_BYTE *)v115;
            v33 = (v116 - (_BYTE *)v115) >> 2;
          }
          *(_DWORD *)(v111 + 4) = v33;
          v48 = malloc_type_malloc(2 * v32 + 8, 0x100004000313F17uLL);
          *(_QWORD *)(v111 + 8) = v48;
          *v48 = 0;
          if (v30 != v31)
          {
            v49 = 0;
            v50 = (unsigned int *)v115;
            v51 = 2;
            if ((unint64_t)(v33 + 1) > 2)
              v51 = v33 + 1;
            v52 = v51 - 1;
            v53 = v48 + 1;
            do
            {
              v54 = *v50++;
              v49 += v54;
              *v53++ = v49;
              --v52;
            }
            while (v52);
          }
          v55 = (char *)__p;
          v56 = (v113 - (_BYTE *)__p) >> 2;
          v57 = *(_QWORD *)(v111 + 40);
          if (v57)
            v58 = v56 == v57;
          else
            v58 = 0;
          if (v58)
          {
            v59 = 0;
            v60 = *(int64x2_t **)(v111 + 16);
            if ((unint64_t)(v113 - (_BYTE *)__p) < 0x20)
              goto LABEL_69;
            if ((unint64_t)((char *)v60 - (_BYTE *)__p) < 0x20)
              goto LABEL_69;
            v59 = v56 & 0xFFFFFFFFFFFFFFF8;
            v61 = (int64x2_t *)((char *)__p + 16);
            v62 = v60 + 1;
            v63 = v56 & 0xFFFFFFFFFFFFFFF8;
            do
            {
              v29 = v61[-1];
              v64 = *v61;
              v62[-1] = v29;
              *v62 = v64;
              v61 += 2;
              v62 += 2;
              v63 -= 8;
            }
            while (v63);
            if (v56 != v59)
            {
LABEL_69:
              v65 = v56 - v59;
              v66 = v59;
              v67 = &v60->i32[v66];
              v68 = &v55[v66 * 4];
              do
              {
                v69 = *(_DWORD *)v68;
                v68 += 4;
                *v67++ = v69;
                --v65;
              }
              while (v65);
            }
          }
        }
        goto LABEL_71;
      }
    }
    else
    {
      v35 = 0;
      v36 = 1;
    }
    v44 = v34 - v36;
    v45 = (unsigned int *)((char *)v115 + 4 * v36 - 4);
    do
    {
      v46 = *v45++;
      v35 += v46;
      --v44;
    }
    while (v44);
    goto LABEL_51;
  }
LABEL_71:
  v70 = v115;
  if (v116 != v115)
  {
    v71 = *(unsigned __int8 *)(v111 + 28);
    if (*(_BYTE *)(v111 + 28))
    {
      v72 = (v116 - (_BYTE *)v115) >> 2;
      v73 = *(uint64_t **)(v111 + 8);
      v74 = *(_QWORD *)(v111 + 32);
      v75 = (v71 * v71);
      v76 = *(unsigned __int8 *)(v111 + 28);
      v77 = (const float *)v118;
      v78 = (v76 - 1) & 0x3FFFFFFFFFFFFFFFLL;
      if (v78 > 6)
      {
        v86 = v78 + 1;
        v87 = (v78 + 1) & 0x7FFFFFFFFFFFFFF8;
        if (v86 == v87)
        {
          v88 = 0;
          v89 = v74 + 16;
          v90 = 4 * v75;
          do
          {
            v91 = v73[v88++];
            v92 = v73[v88];
            if (v91 != v92)
            {
              v93 = (float32x4_t *)(v89 + v90 * v91);
              do
              {
                v94 = 0;
                v95 = vld1q_dup_f32(v77);
                v96 = v93;
                do
                {
                  v97 = v96;
                  v98 = v87;
                  do
                  {
                    v97[-1] = v95;
                    *v97 = v95;
                    v97 += 2;
                    v98 -= 8;
                  }
                  while (v98);
                  ++v94;
                  v96 = (float32x4_t *)((char *)v96 + 4 * v76);
                }
                while (v94 != v76);
                ++v91;
                ++v77;
                v93 = (float32x4_t *)((char *)v93 + v90);
              }
              while (v91 != v92);
            }
          }
          while (v72 > v88);
        }
        else
        {
          v99 = 0;
          v100 = 4 * v75;
          do
          {
            v101 = v73[v99++];
            v102 = v73[v99];
            if (v101 != v102)
            {
              v103 = v74 + 16 + v100 * v101;
              do
              {
                v104 = 0;
                *(float *)v29.i32 = *v77;
                v105 = vdupq_lane_s32(*(int32x2_t *)v29.i8, 0);
                v106 = (int32x4_t *)v103;
                do
                {
                  v107 = (_DWORD *)(v74 + 4 * v101 * v75 + 4 * (v104 * v71) + 4 * v87);
                  v108 = v87;
                  v109 = v106;
                  do
                  {
                    v109[-1] = v105;
                    *v109 = v105;
                    v109 += 2;
                    v108 -= 8;
                  }
                  while (v108);
                  v110 = 4 * v76 - 4 * v87;
                  do
                  {
                    *v107++ = v29.i32[0];
                    v110 -= 4;
                  }
                  while (v110);
                  ++v104;
                  v106 = (int32x4_t *)((char *)v106 + 4 * v76);
                }
                while (v104 != v76);
                ++v101;
                ++v77;
                v103 += v100;
              }
              while (v101 != v102);
            }
          }
          while (v72 > v99);
        }
      }
      else
      {
        v79 = *v73;
        v80 = 1;
        j = v73[1];
        if (*v73 != j)
          goto LABEL_77;
        while (v72 > v80)
        {
          v79 = v73[v80++];
          for (j = v73[v80]; v79 != j; ++v77)
          {
LABEL_77:
            v82 = 0;
            v83 = *v77;
            do
            {
              v84 = (float *)(v74 + 4 * v79 * v75 + 4 * (v82 * v71));
              v85 = 4 * v76;
              do
              {
                *v84++ = v83;
                v85 -= 4;
              }
              while (v85);
              ++v82;
            }
            while (v82 != v76);
            ++v79;
          }
        }
      }
    }
  }
  if (__p)
  {
    v113 = __p;
    operator delete(__p);
    v70 = v115;
  }
  if (v70)
  {
    v116 = v70;
    operator delete(v70);
  }
  if (v118)
  {
    v119 = v118;
    operator delete(v118);
  }
  if (v121)
  {
    v122 = v121;
    operator delete(v121);
  }
  if (v124)
  {
    v125 = v124;
    operator delete(v124);
  }
}

void sub_239526970(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23)
{
  uint64_t v23;
  void *v25;
  void *v26;
  void *v27;
  void *v28;

  sub_239526A6C(v23);
  if (__p)
  {
    operator delete(__p);
    v25 = a13;
    if (!a13)
    {
LABEL_3:
      v26 = a16;
      if (!a16)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else
  {
    v25 = a13;
    if (!a13)
      goto LABEL_3;
  }
  operator delete(v25);
  v26 = a16;
  if (!a16)
  {
LABEL_4:
    v27 = a19;
    if (!a19)
      goto LABEL_5;
    goto LABEL_10;
  }
LABEL_9:
  operator delete(v26);
  v27 = a19;
  if (!a19)
  {
LABEL_5:
    v28 = a22;
    if (!a22)
      goto LABEL_6;
    goto LABEL_11;
  }
LABEL_10:
  operator delete(v27);
  v28 = a22;
  if (!a22)
LABEL_6:
    _Unwind_Resume(a1);
LABEL_11:
  operator delete(v28);
  _Unwind_Resume(a1);
}

_DWORD *sub_239526A34(_DWORD *a1)
{
  if (*a1 != 2)
    sub_239A232BC((uint64_t)(a1 + 2));
  return a1;
}

uint64_t sub_239526A6C(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;

  if (*(__int16 *)(a1 + 24) < 0)
  {
    free(*(void **)(a1 + 8));
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)a1 = 0u;
    return a1;
  }
  else
  {
    v2 = *(void **)(a1 + 8);
    if (v2)
    {
      free(v2);
      *(_QWORD *)(a1 + 8) = 0;
    }
    v3 = *(void **)(a1 + 16);
    if (v3)
    {
      free(v3);
      *(_QWORD *)(a1 + 16) = 0;
    }
    v4 = *(void **)(a1 + 32);
    if (v4)
    {
      free(v4);
      *(_QWORD *)(a1 + 32) = 0;
    }
    *(_QWORD *)(a1 + 40) = 0;
    return a1;
  }
}

uint64_t sub_239526AEC(uint64_t a1, int a2, uint64_t a3, uint64_t *a4, char **a5, _DWORD *a6)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  char *v26;
  uint64_t v27;
  void **v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  unsigned int v32;
  _DWORD *v33;
  uint64_t v34;
  _DWORD *v35;
  BOOL v36;
  uint64_t v37;
  _BYTE *v38;
  uint64_t v39;
  _BYTE *v40;
  int v41;
  uint64_t v42;
  int v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  void **v48;
  _DWORD *v49;
  _QWORD *v50;
  _QWORD *v51;
  unsigned int v52;
  _DWORD *v53;
  uint64_t v54;
  _DWORD *v55;
  uint64_t v56;
  _BYTE *v57;
  uint64_t v58;
  _BYTE *v59;
  int v60;
  uint64_t v61;
  int v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  _DWORD *v66;
  uint64_t v67;
  uint64_t v68;
  char **v69;
  _DWORD *v70;
  char *v71;
  char *v72;
  char *v73;
  char *v74;
  char *v75;
  uint64_t v76;
  int v77;
  uint64_t v78;
  unint64_t v79;
  char *v80;
  _QWORD *v81;
  _QWORD *v82;
  _QWORD *v83;
  unint64_t v84;
  char *v85;
  char *v86;
  char *v87;
  char *v88;
  char *v89;
  unint64_t v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  char *v94;
  char *v95;
  char *i;
  uint64_t v97;
  int v98;
  char *v99;
  unint64_t v100;
  unint64_t v101;
  unint64_t v102;
  unint64_t v103;
  char *v104;
  char *v105;
  char *j;
  uint64_t v107;
  int v108;
  char *v109;
  _QWORD *v110;
  _QWORD *v111;
  int v112;
  char *v113;
  unint64_t v114;
  char *v115;
  unint64_t v116;
  unint64_t v117;
  unint64_t v118;
  unint64_t v119;
  char *v120;
  char *v121;
  char *k;
  uint64_t v123;
  int v124;
  char *v125;
  char *v126;
  unsigned int v128;
  int v129;
  uint64_t v130;
  unint64_t v131;
  uint64_t v132;
  int v133;
  uint64_t v134;
  uint64_t v135;
  char **v136;
  _DWORD *v137;
  char *__p;
  char *v139;

  v10 = a1;
  v11 = sub_2395235AC(a1, a4);
  if ((_DWORD)v11)
  {
    if (!*(_BYTE *)(v10 + 168))
      sub_2394875CC();
    v139 = 0;
    __p = 0;
    v12 = *(_QWORD *)(v10 + 152) - *(_QWORD *)(v10 + 144);
    if (v12)
    {
      if ((unint64_t)v12 >= 0x5555555555555551)
        sub_2394189F8();
      v13 = 3 * (v12 >> 3);
      v14 = operator new(v13 * 8);
      v15 = (char *)&v14[v13];
      __p = (char *)v14;
      v16 = v14 + 1;
      do
      {
        *v16 = 0;
        v16[1] = 0;
        *(v16 - 1) = v16;
        v16 += 3;
        v13 -= 3;
      }
      while (v13 * 8);
      v139 = v15;
    }
    v130 = a3;
    v128 = v11;
    v129 = a2;
    v136 = a5;
    v137 = a6;
    v17 = *(_QWORD *)(v10 + 32) - *(_QWORD *)(v10 + 24);
    if (v17)
    {
      v18 = 0;
      v131 = 0xAAAAAAAAAAAAAAABLL * (v17 >> 2);
      v132 = v10;
      v133 = *(unsigned __int8 *)(v10 + 200);
      do
      {
        if (!v133)
          sub_2394875CC();
        v19 = 0;
        v135 = v18;
        v20 = *(_QWORD *)(v10 + 176) + 12 * v18;
        do
        {
          v21 = *(_DWORD *)(v20 + 4 * v19);
          v22 = v19 + 1;
          v23 = (v19 + 1);
          if (v19 == 2)
            v23 = 0;
          v24 = *(_DWORD *)(v20 + 4 * v23);
          v25 = *(_DWORD *)(v20 + 4 * (((int)v19 + 2) % 3u));
          v26 = &__p[24 * v21];
          v28 = (void **)(v26 + 8);
          v27 = *((_QWORD *)v26 + 1);
          v29 = v26 + 8;
          v30 = v26 + 8;
          if (v27)
          {
            v31 = *((_QWORD *)v26 + 1);
            do
            {
              while (1)
              {
                v30 = (_QWORD *)v31;
                v32 = *(_DWORD *)(v31 + 28);
                if (v24 >= v32)
                  break;
                v31 = *v30;
                v29 = v30;
                if (!*v30)
                  goto LABEL_27;
              }
              if (v32 >= v24)
              {
                v47 = &__p[24 * v21];
                v48 = (void **)(v47 + 8);
                goto LABEL_55;
              }
              v31 = v30[1];
            }
            while (v31);
            v29 = v30 + 1;
          }
LABEL_27:
          v33 = operator new(0x20uLL);
          v33[7] = v24;
          *(_QWORD *)v33 = 0;
          *((_QWORD *)v33 + 1) = 0;
          *((_QWORD *)v33 + 2) = v30;
          *v29 = v33;
          v34 = **(_QWORD **)v26;
          if (v34)
          {
            *(_QWORD *)v26 = v34;
            v33 = (_DWORD *)*v29;
          }
          v35 = *v28;
          v36 = v33 == *v28;
          *((_BYTE *)v33 + 24) = v36;
          if (!v36)
          {
            do
            {
              v37 = *((_QWORD *)v33 + 2);
              if (*(_BYTE *)(v37 + 24))
                break;
              v38 = *(_BYTE **)(v37 + 16);
              v39 = *(_QWORD *)v38;
              if (*(_QWORD *)v38 == v37)
              {
                v42 = *((_QWORD *)v38 + 1);
                if (!v42 || (v43 = *(unsigned __int8 *)(v42 + 24), v40 = (_BYTE *)(v42 + 24), v43))
                {
                  if (*(_DWORD **)v37 == v33)
                  {
                    *(_BYTE *)(v37 + 24) = 1;
                    v38[24] = 0;
                    v46 = *(_QWORD *)(v37 + 8);
                    *(_QWORD *)v38 = v46;
                    if (v46)
                      goto LABEL_44;
                  }
                  else
                  {
                    v44 = *(uint64_t **)(v37 + 8);
                    v45 = *v44;
                    *(_QWORD *)(v37 + 8) = *v44;
                    if (v45)
                    {
                      *(_QWORD *)(v45 + 16) = v37;
                      v38 = *(_BYTE **)(v37 + 16);
                    }
                    v44[2] = (uint64_t)v38;
                    *(_QWORD *)(*(_QWORD *)(v37 + 16) + 8 * (**(_QWORD **)(v37 + 16) != v37)) = v44;
                    *v44 = v37;
                    *(_QWORD *)(v37 + 16) = v44;
                    v38 = (_BYTE *)v44[2];
                    v37 = *(_QWORD *)v38;
                    *((_BYTE *)v44 + 24) = 1;
                    v38[24] = 0;
                    v46 = *(_QWORD *)(v37 + 8);
                    *(_QWORD *)v38 = v46;
                    if (v46)
LABEL_44:
                      *(_QWORD *)(v46 + 16) = v38;
                  }
                  *(_QWORD *)(v37 + 16) = *((_QWORD *)v38 + 2);
                  *(_QWORD *)(*((_QWORD *)v38 + 2) + 8 * (**((_QWORD **)v38 + 2) != (_QWORD)v38)) = v37;
                  *(_QWORD *)(v37 + 8) = v38;
LABEL_51:
                  *((_QWORD *)v38 + 2) = v37;
                  break;
                }
              }
              else if (!v39 || (v41 = *(unsigned __int8 *)(v39 + 24), v40 = (_BYTE *)(v39 + 24), v41))
              {
                if (*(_DWORD **)v37 == v33)
                {
                  v67 = *((_QWORD *)v33 + 1);
                  *(_QWORD *)v37 = v67;
                  if (v67)
                  {
                    *(_QWORD *)(v67 + 16) = v37;
                    v38 = *(_BYTE **)(v37 + 16);
                  }
                  *((_QWORD *)v33 + 2) = v38;
                  *(_QWORD *)(*(_QWORD *)(v37 + 16) + 8 * (**(_QWORD **)(v37 + 16) != v37)) = v33;
                  *((_QWORD *)v33 + 1) = v37;
                  *(_QWORD *)(v37 + 16) = v33;
                  v38 = (_BYTE *)*((_QWORD *)v33 + 2);
                  *((_BYTE *)v33 + 24) = 1;
                  v38[24] = 0;
                  v37 = *((_QWORD *)v38 + 1);
                  v49 = *(_DWORD **)v37;
                  *((_QWORD *)v38 + 1) = *(_QWORD *)v37;
                  if (v49)
LABEL_49:
                    *((_QWORD *)v49 + 2) = v38;
                }
                else
                {
                  *(_BYTE *)(v37 + 24) = 1;
                  v38[24] = 0;
                  v37 = *((_QWORD *)v38 + 1);
                  v49 = *(_DWORD **)v37;
                  *((_QWORD *)v38 + 1) = *(_QWORD *)v37;
                  if (v49)
                    goto LABEL_49;
                }
                *(_QWORD *)(v37 + 16) = *((_QWORD *)v38 + 2);
                *(_QWORD *)(*((_QWORD *)v38 + 2) + 8 * (**((_QWORD **)v38 + 2) != (_QWORD)v38)) = v37;
                *(_QWORD *)v37 = v38;
                goto LABEL_51;
              }
              *(_BYTE *)(v37 + 24) = 1;
              v33 = v38;
              v38[24] = v38 == (_BYTE *)v35;
              *v40 = 1;
            }
            while (v38 != (_BYTE *)v35);
          }
          ++*((_QWORD *)v26 + 2);
          v27 = *(_QWORD *)&__p[24 * v21 + 8];
          v47 = &__p[24 * v21];
          v48 = (void **)(v47 + 8);
          v50 = v47 + 8;
          v51 = v47 + 8;
          if (v27)
          {
            while (1)
            {
LABEL_55:
              while (1)
              {
                v51 = (_QWORD *)v27;
                v52 = *(_DWORD *)(v27 + 28);
                if (v25 >= v52)
                  break;
                v27 = *v51;
                v50 = v51;
                if (!*v51)
                  goto LABEL_59;
              }
              if (v52 >= v25)
                break;
              v27 = v51[1];
              if (!v27)
              {
                v50 = v51 + 1;
                goto LABEL_59;
              }
            }
          }
          else
          {
LABEL_59:
            v53 = operator new(0x20uLL);
            v53[7] = v25;
            *(_QWORD *)v53 = 0;
            *((_QWORD *)v53 + 1) = 0;
            *((_QWORD *)v53 + 2) = v51;
            *v50 = v53;
            v54 = **(_QWORD **)v47;
            if (v54)
            {
              *(_QWORD *)v47 = v54;
              v53 = (_DWORD *)*v50;
            }
            v55 = *v48;
            v36 = v53 == *v48;
            *((_BYTE *)v53 + 24) = v36;
            if (!v36)
            {
              do
              {
                v56 = *((_QWORD *)v53 + 2);
                if (*(_BYTE *)(v56 + 24))
                  break;
                v57 = *(_BYTE **)(v56 + 16);
                v58 = *(_QWORD *)v57;
                if (*(_QWORD *)v57 == v56)
                {
                  v61 = *((_QWORD *)v57 + 1);
                  if (!v61 || (v62 = *(unsigned __int8 *)(v61 + 24), v59 = (_BYTE *)(v61 + 24), v62))
                  {
                    if (*(_DWORD **)v56 == v53)
                    {
                      *(_BYTE *)(v56 + 24) = 1;
                      v57[24] = 0;
                      v65 = *(_QWORD *)(v56 + 8);
                      *(_QWORD *)v57 = v65;
                      if (v65)
                        goto LABEL_76;
                    }
                    else
                    {
                      v63 = *(uint64_t **)(v56 + 8);
                      v64 = *v63;
                      *(_QWORD *)(v56 + 8) = *v63;
                      if (v64)
                      {
                        *(_QWORD *)(v64 + 16) = v56;
                        v57 = *(_BYTE **)(v56 + 16);
                      }
                      v63[2] = (uint64_t)v57;
                      *(_QWORD *)(*(_QWORD *)(v56 + 16) + 8 * (**(_QWORD **)(v56 + 16) != v56)) = v63;
                      *v63 = v56;
                      *(_QWORD *)(v56 + 16) = v63;
                      v57 = (_BYTE *)v63[2];
                      v56 = *(_QWORD *)v57;
                      *((_BYTE *)v63 + 24) = 1;
                      v57[24] = 0;
                      v65 = *(_QWORD *)(v56 + 8);
                      *(_QWORD *)v57 = v65;
                      if (v65)
LABEL_76:
                        *(_QWORD *)(v65 + 16) = v57;
                    }
                    *(_QWORD *)(v56 + 16) = *((_QWORD *)v57 + 2);
                    *(_QWORD *)(*((_QWORD *)v57 + 2) + 8 * (**((_QWORD **)v57 + 2) != (_QWORD)v57)) = v56;
                    *(_QWORD *)(v56 + 8) = v57;
LABEL_15:
                    *((_QWORD *)v57 + 2) = v56;
                    break;
                  }
                }
                else if (!v58 || (v60 = *(unsigned __int8 *)(v58 + 24), v59 = (_BYTE *)(v58 + 24), v60))
                {
                  if (*(_DWORD **)v56 == v53)
                  {
                    v68 = *((_QWORD *)v53 + 1);
                    *(_QWORD *)v56 = v68;
                    if (v68)
                    {
                      *(_QWORD *)(v68 + 16) = v56;
                      v57 = *(_BYTE **)(v56 + 16);
                    }
                    *((_QWORD *)v53 + 2) = v57;
                    *(_QWORD *)(*(_QWORD *)(v56 + 16) + 8 * (**(_QWORD **)(v56 + 16) != v56)) = v53;
                    *((_QWORD *)v53 + 1) = v56;
                    *(_QWORD *)(v56 + 16) = v53;
                    v57 = (_BYTE *)*((_QWORD *)v53 + 2);
                    *((_BYTE *)v53 + 24) = 1;
                    v57[24] = 0;
                    v56 = *((_QWORD *)v57 + 1);
                    v66 = *(_DWORD **)v56;
                    *((_QWORD *)v57 + 1) = *(_QWORD *)v56;
                    if (!v66)
                      goto LABEL_14;
                  }
                  else
                  {
                    *(_BYTE *)(v56 + 24) = 1;
                    v57[24] = 0;
                    v56 = *((_QWORD *)v57 + 1);
                    v66 = *(_DWORD **)v56;
                    *((_QWORD *)v57 + 1) = *(_QWORD *)v56;
                    if (!v66)
                      goto LABEL_14;
                  }
                  *((_QWORD *)v66 + 2) = v57;
LABEL_14:
                  *(_QWORD *)(v56 + 16) = *((_QWORD *)v57 + 2);
                  *(_QWORD *)(*((_QWORD *)v57 + 2) + 8 * (**((_QWORD **)v57 + 2) != (_QWORD)v57)) = v56;
                  *(_QWORD *)v56 = v57;
                  goto LABEL_15;
                }
                *(_BYTE *)(v56 + 24) = 1;
                v53 = v57;
                v57[24] = v57 == (_BYTE *)v55;
                *v59 = 1;
              }
              while (v57 != (_BYTE *)v55);
            }
            ++*((_QWORD *)v47 + 2);
          }
          v19 = v22;
        }
        while (v22 != 3);
        v18 = v135 + 1;
        v10 = v132;
      }
      while (v135 + 1 != v131);
    }
    v69 = v136;
    v70 = v137;
    v71 = *v136;
    if (0xAAAAAAAAAAAAAAABLL * ((v136[2] - *v136) >> 2) < 2 * v130)
    {
      if ((unint64_t)(2 * v130) > 0x1555555555555555)
        sub_2394189F8();
      v72 = v136[1];
      v73 = (char *)operator new(24 * v130);
      v74 = &v73[12 * ((v72 - v71) / 12)];
      v75 = v74;
      if (v72 != v71)
      {
        v75 = &v73[12 * ((v72 - v71) / 12)];
        do
        {
          v76 = *(_QWORD *)(v72 - 12);
          v72 -= 12;
          v77 = *((_DWORD *)v72 + 2);
          *(_QWORD *)(v75 - 12) = v76;
          v75 -= 12;
          *((_DWORD *)v75 + 2) = v77;
        }
        while (v72 != v71);
      }
      *v136 = v75;
      v136[1] = v74;
      v136[2] = &v73[24 * v130];
      if (v71)
      {
        operator delete(v71);
        if (!*(_BYTE *)(v10 + 168))
          sub_2394875CC();
      }
    }
    v78 = *(_QWORD *)(v10 + 152) - *(_QWORD *)(v10 + 144);
    if (v78)
    {
      v79 = 0;
      v134 = v78 >> 3;
      while (1)
      {
        v80 = &__p[24 * v79];
        v83 = *(_QWORD **)v80;
        v81 = v80 + 8;
        v82 = v83;
        if (v83 != v81)
          break;
LABEL_102:
        if (++v79 == v134)
          goto LABEL_141;
      }
      while (1)
      {
        v84 = *((unsigned int *)v82 + 7);
        if (v79 >= v84)
          break;
LABEL_135:
        v110 = (_QWORD *)v82[1];
        if (v110)
        {
          do
          {
            v111 = v110;
            v110 = (_QWORD *)*v110;
          }
          while (v110);
        }
        else
        {
          do
          {
            v111 = (_QWORD *)v82[2];
            v36 = *v111 == (_QWORD)v82;
            v82 = v111;
          }
          while (!v36);
        }
        v82 = v111;
        if (v111 == v81)
          goto LABEL_102;
      }
      v86 = v69[1];
      v85 = v69[2];
      if (v86 >= v85)
      {
        v89 = *v69;
        v90 = 0xAAAAAAAAAAAAAAABLL * ((v86 - *v69) >> 2);
        v91 = v90 + 1;
        if (v90 + 1 > 0x1555555555555555)
          sub_2394189F8();
        v92 = 0xAAAAAAAAAAAAAAABLL * ((v85 - v89) >> 2);
        if (2 * v92 > v91)
          v91 = 2 * v92;
        if (v92 >= 0xAAAAAAAAAAAAAAALL)
          v93 = 0x1555555555555555;
        else
          v93 = v91;
        if (v93 > 0x1555555555555555)
          sub_239418A80();
        v94 = (char *)operator new(12 * v93);
        v95 = &v94[12 * v90];
        *(_DWORD *)v95 = *v137;
        *((_DWORD *)v95 + 1) = v79;
        *((_DWORD *)v95 + 2) = 1045220557;
        for (i = v95; v86 != v89; *((_DWORD *)i + 2) = v98)
        {
          v97 = *(_QWORD *)(v86 - 12);
          v86 -= 12;
          v98 = *((_DWORD *)v86 + 2);
          *(_QWORD *)(i - 12) = v97;
          i -= 12;
        }
        v85 = &v94[12 * v93];
        v87 = v95 + 12;
        v69 = v136;
        *v136 = i;
        v136[1] = v95 + 12;
        v136[2] = v85;
        if (v89)
        {
          operator delete(v89);
          v85 = v136[2];
        }
        v70 = v137;
        v136[1] = v87;
        if (v87 < v85)
          goto LABEL_109;
      }
      else
      {
        *(_DWORD *)v86 = *v70;
        *((_DWORD *)v86 + 1) = v79;
        *((_DWORD *)v86 + 2) = 1045220557;
        v87 = v86 + 12;
        v69[1] = v87;
        if (v87 < v85)
        {
LABEL_109:
          *(_DWORD *)v87 = *v70;
          *((_DWORD *)v87 + 1) = v84;
          *((_DWORD *)v87 + 2) = -1102263091;
          v88 = v87 + 12;
LABEL_134:
          v69[1] = v88;
          ++*v70;
          goto LABEL_135;
        }
      }
      v99 = *v69;
      v100 = 0xAAAAAAAAAAAAAAABLL * ((v87 - *v69) >> 2);
      v101 = v100 + 1;
      if (v100 + 1 > 0x1555555555555555)
        sub_2394189F8();
      v102 = 0xAAAAAAAAAAAAAAABLL * ((v85 - v99) >> 2);
      if (2 * v102 > v101)
        v101 = 2 * v102;
      if (v102 >= 0xAAAAAAAAAAAAAAALL)
        v103 = 0x1555555555555555;
      else
        v103 = v101;
      if (v103 > 0x1555555555555555)
        sub_239418A80();
      v104 = (char *)operator new(12 * v103);
      v105 = &v104[12 * v100];
      *(_DWORD *)v105 = *v137;
      *((_DWORD *)v105 + 1) = v84;
      *((_DWORD *)v105 + 2) = -1102263091;
      for (j = v105; v87 != v99; *((_DWORD *)j + 2) = v108)
      {
        v107 = *(_QWORD *)(v87 - 12);
        v87 -= 12;
        v108 = *((_DWORD *)v87 + 2);
        *(_QWORD *)(j - 12) = v107;
        j -= 12;
      }
      v109 = &v104[12 * v103];
      v88 = v105 + 12;
      v69 = v136;
      *v136 = j;
      v136[1] = v105 + 12;
      v136[2] = v109;
      if (v99)
        operator delete(v99);
      v70 = v137;
      goto LABEL_134;
    }
LABEL_141:
    if (v129)
    {
      v112 = 0;
      v113 = v69[1];
      do
      {
        v114 = (unint64_t)v69[2];
        if ((unint64_t)v113 < v114)
        {
          *(_DWORD *)v113 = *v70;
          *((_DWORD *)v113 + 1) = v112;
          *((_DWORD *)v113 + 2) = 1014350479;
          v113 += 12;
        }
        else
        {
          v115 = *v69;
          v116 = 0xAAAAAAAAAAAAAAABLL * ((v113 - *v69) >> 2);
          v117 = v116 + 1;
          if (v116 + 1 > 0x1555555555555555)
            sub_2394189F8();
          v118 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v114 - (_QWORD)v115) >> 2);
          if (2 * v118 > v117)
            v117 = 2 * v118;
          if (v118 >= 0xAAAAAAAAAAAAAAALL)
            v119 = 0x1555555555555555;
          else
            v119 = v117;
          if (v119 > 0x1555555555555555)
            sub_239418A80();
          v120 = (char *)operator new(12 * v119);
          v121 = &v120[12 * v116];
          *(_DWORD *)v121 = *v137;
          *((_DWORD *)v121 + 1) = v112;
          *((_DWORD *)v121 + 2) = 1014350479;
          for (k = v121; v113 != v115; *((_DWORD *)k + 2) = v124)
          {
            v123 = *(_QWORD *)(v113 - 12);
            v113 -= 12;
            v124 = *((_DWORD *)v113 + 2);
            *(_QWORD *)(k - 12) = v123;
            k -= 12;
          }
          v113 = v121 + 12;
          *v69 = k;
          v69[1] = v121 + 12;
          v69[2] = &v120[12 * v119];
          if (v115)
            operator delete(v115);
          v70 = v137;
        }
        v69[1] = v113;
        ++*v70;
        ++v112;
      }
      while (v112 != v129);
    }
    v11 = v128;
    if (__p)
    {
      v125 = v139;
      if (v139 != __p)
      {
        do
        {
          v126 = v125 - 24;
          sub_239421038((uint64_t)(v125 - 24), *((_QWORD **)v125 - 2));
          v125 = v126;
        }
        while (v126 != __p);
      }
      operator delete(__p);
    }
  }
  return v11;
}

void sub_239527644(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  sub_2394E9A28((void **)va);
  _Unwind_Resume(a1);
}

void sub_239527658(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  sub_2394E9A28((void **)va);
  _Unwind_Resume(a1);
}

void sub_23952766C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char *a18, void *a19)
{
  if (a18)
    sub_239EC0424(&a19, a18, (void **)&a18);
  _Unwind_Resume(exception_object);
}

void sub_239527690(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  sub_2394E9A28((void **)va);
  _Unwind_Resume(a1);
}

void sub_2395276A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  sub_2394E9A28((void **)va);
  _Unwind_Resume(a1);
}

void sub_2395276B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  sub_2394E9A28((void **)va);
  _Unwind_Resume(a1);
}

void sub_2395276CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  sub_2394E9A28((void **)va);
  _Unwind_Resume(a1);
}

void sub_2395276E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  sub_2394E9A28((void **)va);
  _Unwind_Resume(a1);
}

void sub_2395276F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  sub_2394E9A28((void **)va);
  _Unwind_Resume(a1);
}

void sub_239527708(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  sub_2394E9A28((void **)va);
  _Unwind_Resume(a1);
}

void sub_23952771C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  sub_2394E9A28((void **)va);
  _Unwind_Resume(a1);
}

void sub_239527730(uint64_t *a1, uint64_t *a2, _QWORD *a3, _QWORD *a4, _DWORD *a5, char **a6, _QWORD *a7, _BYTE *a8)
{
  float v8;
  float v9;
  int v10;
  BOOL v11;
  float32x4_t v13;
  float v14;
  float v15;
  float32x4_t v16;
  float32x4_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  unint64_t v28;
  unint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  _DWORD *v43;
  uint64_t v44;
  unsigned int *v45;
  uint64_t v46;
  int v47;
  unint64_t v48;
  int v49;
  _DWORD *v50;
  unsigned int *v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  int v55;
  unint64_t v56;
  uint64_t v57;
  int v58;
  unint64_t v59;
  uint64_t v60;
  float32x4_t v61;
  float32x4_t v62;
  __int128 v63;
  float32x4_t v64;
  float32x4_t v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  uint64_t v70;
  unsigned int *v71;
  uint64_t v72;
  float *v73;
  float v74;
  float *v75;
  float v76;
  unsigned int *v77;
  uint64_t v78;
  float *v79;
  float *v80;
  float *v81;
  float *v82;
  unsigned int v83;
  uint64_t v84;
  float32x2_t v85;
  _BYTE *v86;
  uint64_t v87;
  _BYTE *v88;
  int64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  unint64_t v93;
  _BYTE *v94;
  float32x2_t *v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  float32x4_t *v100;
  float32x4_t *v101;
  uint64_t v102;
  float32x2_t v103;
  float32x2_t v104;
  _BYTE *v105;
  _BYTE *v106;
  int64_t v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  unint64_t v111;
  _BYTE *v112;
  float32x2_t *v113;
  unint64_t v114;
  uint64_t v115;
  uint64_t v116;
  char *v117;
  float32x4_t *v118;
  float32x4_t *v119;
  uint64_t v120;
  float32x2_t v121;
  float v122;
  char *v123;
  uint64_t v124;
  char *v125;
  uint64_t v126;
  unint64_t v127;
  uint64_t v128;
  unint64_t v129;
  _BYTE *v130;
  char *v131;
  __int8 *v132;
  float v133;
  float v134;
  unsigned int v135;
  unsigned int v136;
  float v137;
  unsigned int v138;
  _BYTE *v139;
  float v140;
  float v141;
  float v142;
  float32_t v143;
  unint64_t v144;
  char *v145;
  unint64_t v146;
  char **v147;
  char *v148;
  char *v149;
  char *v150;
  _DWORD *v151;
  unint64_t v152;
  char *v153;
  unint64_t v154;
  uint64_t v155;
  uint64_t v156;
  char *v157;
  float32x4_t *v158;
  float32x4_t *v159;
  uint64_t v160;
  float32x4_t v161;
  int v162;
  char *v163;
  uint64_t v164;
  char *v165;
  uint64_t v166;
  unint64_t v167;
  uint64_t v168;
  unint64_t v169;
  _BYTE *v170;
  char *v171;
  unint64_t v172;
  uint64_t v173;
  uint64_t v174;
  char *v175;
  float32x4_t *v176;
  float32x4_t *v177;
  uint64_t v178;
  float32x4_t v179;
  int v180;
  char *v181;
  uint64_t v182;
  char *v183;
  uint64_t v184;
  unint64_t v185;
  uint64_t v186;
  unint64_t v187;
  _BYTE *v188;
  char *v189;
  unint64_t v190;
  char *v191;
  unint64_t v192;
  unint64_t v193;
  unint64_t v194;
  unint64_t v195;
  char *v196;
  uint64_t v197;
  uint64_t v198;
  char *v199;
  float32x4_t *v200;
  float32x4_t *v201;
  uint64_t v202;
  float32x4_t v203;
  int v204;
  float v205;
  char *v206;
  uint64_t v207;
  char *v208;
  uint64_t v209;
  unint64_t v210;
  uint64_t v211;
  unint64_t v212;
  _BYTE *v213;
  char *v214;
  unint64_t v215;
  uint64_t v216;
  uint64_t v217;
  char *v218;
  float32x4_t *v219;
  float32x4_t *v220;
  uint64_t v221;
  float32x4_t v222;
  int v223;
  char *v224;
  uint64_t v225;
  char *v226;
  uint64_t v227;
  unint64_t v228;
  uint64_t v229;
  unint64_t v230;
  _BYTE *v231;
  char *v232;
  unint64_t v233;
  uint64_t v234;
  uint64_t v235;
  char *v236;
  float32x4_t *v237;
  float32x4_t *v238;
  uint64_t v239;
  float32x4_t v240;
  int v241;
  char *v242;
  uint64_t v243;
  char *v244;
  uint64_t v245;
  unint64_t v246;
  uint64_t v247;
  unint64_t v248;
  _BYTE *v249;
  char *v250;
  unint64_t v251;
  uint64_t v252;
  uint64_t v253;
  char *v254;
  float32x4_t *v255;
  float32x4_t *v256;
  uint64_t v257;
  float32x4_t v258;
  int v259;
  float *v260;
  float *v261;
  uint64_t v262;
  float v263;
  char *v264;
  uint64_t v265;
  char *v266;
  uint64_t v267;
  unint64_t v268;
  uint64_t v269;
  unint64_t v270;
  _BYTE *v271;
  char *v272;
  unint64_t v273;
  uint64_t v274;
  uint64_t v275;
  char *v276;
  float32x4_t *v277;
  float32x4_t *v278;
  uint64_t v279;
  float32x4_t v280;
  int v281;
  char *v282;
  uint64_t v283;
  char *v284;
  uint64_t v285;
  unint64_t v286;
  uint64_t v287;
  unint64_t v288;
  _BYTE *v289;
  char *v290;
  unint64_t v291;
  uint64_t v292;
  uint64_t v293;
  char *v294;
  float32x4_t *v295;
  float32x4_t *v296;
  uint64_t v297;
  float32x4_t v298;
  int v299;
  char *v300;
  char *v301;
  uint64_t v302;
  unint64_t v303;
  uint64_t v304;
  unint64_t v305;
  _BYTE *v306;
  char *v307;
  unint64_t v308;
  uint64_t v309;
  uint64_t v310;
  char *v311;
  float32x4_t *v312;
  float32x4_t *v313;
  uint64_t v314;
  float32x4_t v315;
  int v316;
  float v317;
  float v318;
  unint64_t v319;
  uint64_t v320;
  float v321;
  float *v322;
  float v323;
  unint64_t v324;
  uint64_t v325;
  float v326;
  float *v327;
  float v328;
  unint64_t v329;
  uint64_t v330;
  float v331;
  float *v332;
  float v333;
  float v334;
  float v335;
  char *v336;
  uint64_t v337;
  char *v338;
  uint64_t v339;
  unint64_t v340;
  uint64_t v341;
  unint64_t v342;
  _BYTE *v343;
  char *v344;
  unint64_t v345;
  uint64_t v346;
  uint64_t v347;
  char *v348;
  float32x4_t *v349;
  float32x4_t *v350;
  uint64_t v351;
  float32x4_t v352;
  int v353;
  char *v354;
  uint64_t v355;
  char *v356;
  int64_t v357;
  uint64_t v358;
  unint64_t v359;
  uint64_t v360;
  unint64_t v361;
  char *v362;
  char *v363;
  unint64_t v364;
  uint64_t v365;
  uint64_t v366;
  char *v367;
  char *v368;
  float32x4_t *v369;
  uint64_t v370;
  float32x4_t v371;
  int v372;
  char *v373;
  uint64_t v374;
  char *v375;
  int64_t v376;
  uint64_t v377;
  unint64_t v378;
  uint64_t v379;
  unint64_t v380;
  char *v381;
  char *v382;
  unint64_t v383;
  uint64_t v384;
  uint64_t v385;
  char *v386;
  char *v387;
  float32x4_t *v388;
  uint64_t v389;
  float32x4_t v390;
  int v391;
  float v392;
  char *v393;
  uint64_t v394;
  char *v395;
  uint64_t v396;
  unint64_t v397;
  uint64_t v398;
  unint64_t v399;
  _BYTE *v400;
  char *v401;
  unint64_t v402;
  uint64_t v403;
  uint64_t v404;
  char *v405;
  _OWORD *v406;
  char *v407;
  uint64_t v408;
  __int128 v409;
  int v410;
  char *v411;
  uint64_t v412;
  char *v413;
  int64_t v414;
  uint64_t v415;
  unint64_t v416;
  uint64_t v417;
  unint64_t v418;
  char *v419;
  char *v420;
  unint64_t v421;
  uint64_t v422;
  uint64_t v423;
  char *v424;
  char *v425;
  char *v426;
  uint64_t v427;
  __int128 v428;
  int v429;
  char *v430;
  uint64_t v431;
  char *v432;
  int64_t v433;
  uint64_t v434;
  unint64_t v435;
  uint64_t v436;
  unint64_t v437;
  char *v438;
  char *v439;
  unint64_t v440;
  uint64_t v441;
  uint64_t v442;
  char *v443;
  char *v444;
  char *v445;
  uint64_t v446;
  __int128 v447;
  int v448;
  float *v449;
  float *v450;
  uint64_t v451;
  float v452;
  char *v453;
  uint64_t v454;
  char *v455;
  uint64_t v456;
  unint64_t v457;
  uint64_t v458;
  unint64_t v459;
  _BYTE *v460;
  char *v461;
  unint64_t v462;
  uint64_t v463;
  uint64_t v464;
  char *v465;
  _OWORD *v466;
  char *v467;
  uint64_t v468;
  __int128 v469;
  int v470;
  char *v471;
  uint64_t v472;
  char *v473;
  int64_t v474;
  uint64_t v475;
  unint64_t v476;
  uint64_t v477;
  unint64_t v478;
  char *v479;
  char *v480;
  unint64_t v481;
  uint64_t v482;
  uint64_t v483;
  char *v484;
  char *v485;
  char *v486;
  uint64_t v487;
  __int128 v488;
  int v489;
  char *v490;
  char *v491;
  int64_t v492;
  uint64_t v493;
  unint64_t v494;
  uint64_t v495;
  unint64_t v496;
  char *v497;
  char *v498;
  unint64_t v499;
  uint64_t v500;
  uint64_t v501;
  char *v502;
  char *v503;
  char *v504;
  uint64_t v505;
  __int128 v506;
  int v507;
  float v508;
  float v509;
  unint64_t v510;
  uint64_t v511;
  float *v512;
  float v513;
  unint64_t v514;
  uint64_t v515;
  float v516;
  float *v517;
  float v518;
  unint64_t v519;
  uint64_t v520;
  float v521;
  float *v522;
  float v523;
  float32_t v524;
  _QWORD *v525;
  int v526;
  unint64_t v527;
  char *v528;
  char **v529;
  char *v530;
  char *v531;
  char *v532;
  _DWORD *v533;
  unint64_t v534;
  char *v535;
  char *v536;
  unint64_t v537;
  unint64_t v538;
  unint64_t v539;
  unint64_t v540;
  char *v541;
  char *v542;
  char *v543;
  uint64_t v544;
  int v545;
  _QWORD *v546;
  char *v547;
  _QWORD *v548;
  char *v549;
  unint64_t v550;
  unint64_t v551;
  unint64_t v552;
  unint64_t v553;
  char *v554;
  char *v555;
  char *n;
  uint64_t v557;
  int v558;
  char *v559;
  unint64_t v560;
  unint64_t v561;
  unint64_t v562;
  unint64_t v563;
  char *v564;
  char *v565;
  char *ii;
  uint64_t v567;
  int v568;
  char *v569;
  int v570;
  void *v571;
  _QWORD *v572;
  _QWORD *v573;
  unint64_t v574;
  char *v575;
  char **v576;
  char *v577;
  char *v578;
  char *v579;
  unint64_t v580;
  unint64_t v581;
  unint64_t v582;
  unint64_t v583;
  char *v584;
  char *v585;
  char *v586;
  uint64_t v587;
  int v588;
  _QWORD *v589;
  char *v590;
  char *v591;
  char *v592;
  unint64_t v593;
  unint64_t v594;
  unint64_t v595;
  unint64_t v596;
  char *v597;
  char *v598;
  char *jj;
  uint64_t v600;
  int v601;
  _DWORD *v602;
  unint64_t v603;
  char *v604;
  char *v605;
  unint64_t v606;
  unint64_t v607;
  unint64_t v608;
  unint64_t v609;
  char *v610;
  char *v611;
  char *kk;
  uint64_t v613;
  int v614;
  char *v615;
  char *v616;
  char *v617;
  char *v618;
  uint64_t v619;
  int v620;
  _QWORD *v621;
  char *v622;
  _QWORD *v623;
  char *v624;
  unint64_t v625;
  unint64_t v626;
  unint64_t v627;
  unint64_t v628;
  char *v629;
  char *v630;
  char *k;
  uint64_t v632;
  int v633;
  char *v634;
  unint64_t v635;
  unint64_t v636;
  unint64_t v637;
  unint64_t v638;
  char *v639;
  char *v640;
  char *m;
  uint64_t v642;
  int v643;
  char *v644;
  _QWORD *v645;
  uint64_t v646;
  unint64_t v647;
  __int8 *v648;
  float v649;
  float v650;
  unsigned int v651;
  unsigned int v652;
  float v653;
  unsigned int v654;
  _BYTE *v655;
  float v656;
  float v657;
  float v658;
  float32_t v659;
  unint64_t v660;
  char *v661;
  char **v662;
  char *v663;
  char *v664;
  char *v665;
  _DWORD *v666;
  char *v667;
  char *v668;
  unint64_t v669;
  unint64_t v670;
  unint64_t v671;
  unint64_t v672;
  unint64_t v673;
  char *v674;
  char *v675;
  char *v676;
  uint64_t v677;
  int v678;
  _QWORD *v679;
  char *v680;
  _QWORD *v681;
  char *v682;
  unint64_t v683;
  unint64_t v684;
  unint64_t v685;
  unint64_t v686;
  unint64_t v687;
  char *v688;
  char *v689;
  char *i;
  uint64_t v691;
  int v692;
  char *v693;
  unint64_t v694;
  unint64_t v695;
  unint64_t v696;
  unint64_t v697;
  unint64_t v698;
  char *v699;
  char *v700;
  char *j;
  uint64_t v702;
  int v703;
  char *v704;
  _QWORD *v705;
  unsigned int v706;
  uint64_t v707;
  uint64_t v711;
  _DWORD *v714;
  unint64_t v715;
  uint64_t v717;
  unint64_t v718;
  uint64_t v719;
  uint64_t v720;
  uint64_t v721;
  uint64_t v722;
  float32x4_t v723;
  float32x4_t v724;
  uint64_t v725;
  float32x4_t v726;
  float32x4_t v727;
  float32x2_t v729;
  float32x2_t v730;
  float32x4_t v731;
  float32x4_t v732;
  float32x4_t v733;
  float v734;
  __int128 v735;
  char v736;
  float32x4_t v737;
  float v738;
  float32x4_t v739;
  int v740;
  int v741;
  int v742;
  int v743;
  int v744;
  int v745;
  void *__p;
  char *v747;
  char *v748;
  void *v749;
  char *v750;
  char *v751;
  void *v752;
  uint64_t v753;
  unint64_t v754;
  void *v755;
  char *v756;
  char *v757;
  void *v758;
  char *v759;
  char *v760;
  char *v761;
  char *v762;
  char *v763;
  char *v764;
  char *v765;
  char *v766;
  char *v767;
  char *v768;
  char *v769;
  char *v770;
  char *v771;
  char *v772;

  v10 = *((unsigned __int8 *)a1 + 168);
  if (a8[8])
    v11 = v10 == 0;
  else
    v11 = 0;
  if (v11)
    sub_2394875CC();
  v770 = (char *)operator new(0xCuLL);
  v771 = v770;
  v772 = v770 + 12;
  v767 = (char *)operator new(0xCuLL);
  v768 = v767;
  v769 = v767 + 12;
  v764 = (char *)operator new(0xCuLL);
  v765 = v764;
  v766 = v764 + 12;
  v761 = (char *)operator new(0xCuLL);
  v762 = v761;
  v763 = v761 + 12;
  v758 = operator new(0xCuLL);
  v759 = (char *)v758;
  v760 = (char *)v758 + 12;
  v755 = operator new(0xCuLL);
  v756 = (char *)v755;
  v757 = (char *)v755 + 12;
  if (!v10)
    sub_2394875CC();
  v19 = a1[18];
  v18 = a1[19];
  v753 = 0;
  v754 = 0;
  v752 = 0;
  v20 = v18 - v19;
  if (v20)
  {
    if (v20 < 0)
      sub_2394189F8();
    v21 = v20 >> 3;
    v22 = ((unint64_t)((v20 >> 3) - 1) >> 6) + 1;
    v752 = operator new(8 * v22);
    v753 = 0;
    v754 = v22;
    sub_23942D8C8(&v752, v21, 0);
  }
  v714 = a5;
  v24 = a2;
  v23 = a3;
  v26 = *a2;
  v25 = a2[1];
  v27 = a4;
  if (v25 != *a2)
  {
    v28 = 0;
    v29 = 0;
    v730.i32[0] = v13.i32[0];
    v729.i32[0] = v13.i32[0];
    v731 = v13;
    v732 = v13;
    while (1)
    {
      v30 = (_QWORD *)(v26 + 24 * v28);
      v33 = (_QWORD *)*v30;
      v32 = v30 + 1;
      v31 = v33;
      if (v33 != v32)
        break;
LABEL_12:
      v28 = (v29 + 1);
      v29 = v28;
      if (0xAAAAAAAAAAAAAAABLL * ((v25 - v26) >> 3) <= v28)
        goto LABEL_791;
    }
LABEL_16:
    v34 = *((unsigned int *)v31 + 8);
    v35 = *((unsigned int *)v31 + 9);
    v36 = (_DWORD)v34 == -1 || (_DWORD)v35 == -1;
    if (v36
      || *(_BYTE *)(*v23 + v34)
      || *(_BYTE *)(*v23 + v35)
      || *(_DWORD *)(*v27 + 4 * v34) == *(_DWORD *)(*v27 + 4 * v35))
    {
      goto LABEL_658;
    }
    if (!*((_BYTE *)a1 + 264) || !*((_BYTE *)a1 + 232))
      sub_2394875CC();
    v37 = a1[30];
    v38 = a1[26];
    v39 = v38 + 912 * *(unsigned int *)(v37 + 4 * v34);
    if (!*(_BYTE *)(v39 + 208))
      goto LABEL_658;
    v40 = v38 + 912 * *(unsigned int *)(v37 + 4 * v35);
    if (!*(_BYTE *)(v40 + 208))
      goto LABEL_658;
    if (!*((_BYTE *)a1 + 200))
      sub_2394875CC();
    v41 = *((_DWORD *)v31 + 7);
    v42 = a1[3];
    v43 = (_DWORD *)(v42 + 12 * v34);
    v44 = a1[22];
    v45 = (unsigned int *)(v44 + 12 * v34);
    if (*v43 == (_DWORD)v29)
    {
      v718 = *v45;
      v46 = 0xFFFFFFFFLL;
      v47 = v43[1];
      if (v47 != (_DWORD)v29)
        goto LABEL_30;
LABEL_38:
      v718 = v45[1];
      goto LABEL_39;
    }
    if (*v43 == v41)
    {
      v46 = *v45;
      v718 = 0xFFFFFFFFLL;
      v47 = v43[1];
      if (v47 == (_DWORD)v29)
        goto LABEL_38;
    }
    else
    {
      v46 = 0xFFFFFFFFLL;
      v718 = 0xFFFFFFFFLL;
      v47 = v43[1];
      if (v47 == (_DWORD)v29)
        goto LABEL_38;
    }
LABEL_30:
    if (v47 == v41)
    {
      v48 = v45[1];
      v49 = v43[2];
      if (v49 != (_DWORD)v29)
        goto LABEL_32;
      goto LABEL_40;
    }
LABEL_39:
    v48 = v46;
    v49 = v43[2];
    if (v49 != (_DWORD)v29)
    {
LABEL_32:
      if (v49 == v41)
        v48 = v45[2];
LABEL_41:
      v50 = (_DWORD *)(v42 + 12 * v35);
      v51 = (unsigned int *)(v44 + 12 * v35);
      if (*v50 == (_DWORD)v29)
      {
        v52 = *v51;
        v53 = 0xFFFFFFFFLL;
        v54 = v50[1];
        if (v54 != (_DWORD)v29)
          goto LABEL_43;
LABEL_51:
        v52 = v51[1];
        v55 = v50[2];
        if (v55 == (_DWORD)v29)
        {
LABEL_46:
          v52 = v51[2];
          v56 = v718;
LABEL_55:
          if (v56 == 0xFFFFFFFF || v48 == 0xFFFFFFFF || v52 == 0xFFFFFFFFLL || v53 == 0xFFFFFFFFLL)
            goto LABEL_658;
          v707 = v52;
          v711 = v53;
          v715 = v48;
          if (a8[8])
          {
            if (!*((_BYTE *)a1 + 168))
              sub_2394875CC();
            v57 = **(_QWORD **)a8;
            if (0xAAAAAAAAAAAAAAABLL * (*(_QWORD *)(*(_QWORD *)a8 + 8) - v57) == (a1[19] - a1[18]) >> 3)
            {
              v58 = v718;
              if ((*((_QWORD *)v752 + (v718 >> 6)) & (1 << v718)) != 0)
              {
                v59 = v48 >> 6;
                v60 = 1 << v48;
                if ((*((_QWORD *)v752 + (v48 >> 6)) & (1 << v48)) != 0)
                  goto LABEL_787;
LABEL_741:
                v646 = **(_QWORD **)a8;
                v647 = v711;
                v648 = (__int8 *)(v646 + 3 * v711);
                v13.i8[0] = *v648;
                v649 = (float)v13.u32[0];
                LOBYTE(v14) = v648[1];
                v650 = (float)LODWORD(v14);
                LOBYTE(v15) = v648[2];
                *(float *)&v651 = (float)LODWORD(v15);
                v17.f32[0] = (float)((float)(v650 * 0.587) + (float)(v649 * 0.299)) + (float)(*(float *)&v651 * 0.114);
                *(float *)&v652 = (float)((float)((float)(v650 * -0.33126) + (float)(v649 * -0.16874))
                                        + (float)(*(float *)&v651 * 0.5))
                                + 128.0;
                v653 = (float)(v650 * -0.41869) + (float)(v649 * 0.5);
                v14 = -0.081312;
                v17.i32[1] = v652;
                *(float *)&v654 = (float)(v653 + (float)(*(float *)&v651 * -0.081312)) + 128.0;
                v17.i32[2] = v654;
                v655 = (_BYTE *)(v646 + 3 * v48);
                LOBYTE(v654) = *v655;
                v656 = (float)v654;
                LOBYTE(v651) = v655[1];
                v657 = (float)v651;
                LOBYTE(v652) = v655[2];
                v658 = (float)v652;
                v16.f32[0] = (float)((float)(v657 * 0.587) + (float)(v656 * 0.299)) + (float)(v658 * 0.114);
                v659 = (float)((float)((float)(v657 * -0.33126) + (float)(v656 * -0.16874)) + (float)(v658 * 0.5))
                     + 128.0;
                v15 = v657 * -0.41869;
                v16.f32[1] = v659;
                v16.f32[2] = (float)((float)(v15 + (float)(v656 * 0.5)) + (float)(v658 * -0.081312)) + 128.0;
                v13 = vsubq_f32(v17, v16);
                v661 = (char *)a7[1];
                v660 = a7[2];
                if ((unint64_t)v661 < v660)
                {
                  *((_DWORD *)v661 + 2) = v13.i32[2];
                  *(_QWORD *)v661 = v13.i64[0];
                  v662 = a6;
                  a7[1] = v661 + 12;
                  v664 = a6[1];
                  v663 = a6[2];
                  if (v664 < v663)
                    goto LABEL_743;
LABEL_762:
                  v682 = *v662;
                  v683 = 0xAAAAAAAAAAAAAAABLL * ((v664 - *v662) >> 2);
                  v684 = v683 + 1;
                  if (v683 + 1 > 0x1555555555555555)
                    sub_2394189F8();
                  v685 = 0xAAAAAAAAAAAAAAABLL * ((v663 - v682) >> 2);
                  if (2 * v685 > v684)
                    v684 = 2 * v685;
                  if (v685 >= 0xAAAAAAAAAAAAAAALL)
                    v686 = 0x1555555555555555;
                  else
                    v686 = v684;
                  if (v686 > 0x1555555555555555)
                    sub_239418A80();
                  v687 = v29;
                  v688 = (char *)operator new(12 * v686);
                  v689 = &v688[12 * v683];
                  *(_DWORD *)v689 = *v714;
                  *((_DWORD *)v689 + 1) = v715;
                  *((_DWORD *)v689 + 2) = 1065353216;
                  for (i = v689; v664 != v682; *((_DWORD *)i + 2) = v692)
                  {
                    v691 = *(_QWORD *)(v664 - 12);
                    v664 -= 12;
                    v692 = *((_DWORD *)v664 + 2);
                    *(_QWORD *)(i - 12) = v691;
                    i -= 12;
                  }
                  v663 = &v688[12 * v686];
                  v665 = v689 + 12;
                  v662 = a6;
                  *a6 = i;
                  a6[1] = v689 + 12;
                  a6[2] = v663;
                  if (v682)
                  {
                    operator delete(v682);
                    v662 = a6;
                    v663 = a6[2];
                  }
                  v23 = a3;
                  v27 = a4;
                  v24 = a2;
                  v29 = v687;
                  v647 = v711;
                  v662[1] = v665;
                  if (v665 >= v663)
                    goto LABEL_774;
LABEL_744:
                  v666 = v714;
                  *(_DWORD *)v665 = *v714;
                  *((_DWORD *)v665 + 1) = v647;
                  *((_DWORD *)v665 + 2) = -1082130432;
                  v667 = v665 + 12;
                  goto LABEL_786;
                }
                v668 = (char *)*a7;
                v669 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v661[-*a7] >> 2);
                v670 = v669 + 1;
                v662 = a6;
                if (v669 + 1 > 0x1555555555555555)
                  sub_2394189F8();
                v671 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v660 - (_QWORD)v668) >> 2);
                if (2 * v671 > v670)
                  v670 = 2 * v671;
                if (v671 >= 0xAAAAAAAAAAAAAAALL)
                  v672 = 0x1555555555555555;
                else
                  v672 = v670;
                if (v672)
                {
                  v739 = v13;
                  if (v672 > 0x1555555555555555)
                    sub_239418A80();
                  v673 = v29;
                  v674 = (char *)operator new(12 * v672);
                  LODWORD(v48) = v715;
                  v662 = a6;
                  v13 = v739;
                }
                else
                {
                  v673 = v29;
                  v674 = 0;
                }
                v675 = &v674[12 * v669];
                *(_QWORD *)v675 = v13.i64[0];
                *((_DWORD *)v675 + 2) = v13.i32[2];
                v676 = v675;
                if (v661 == v668)
                {
                  v679 = a7;
                  v680 = v675 + 12;
                  *a7 = v675;
                  a7[1] = v675 + 12;
                  a7[2] = &v674[12 * v672];
                  if (v661)
                    goto LABEL_758;
                }
                else
                {
                  do
                  {
                    v677 = *(_QWORD *)(v661 - 12);
                    v661 -= 12;
                    v678 = *((_DWORD *)v661 + 2);
                    *(_QWORD *)(v676 - 12) = v677;
                    v676 -= 12;
                    *((_DWORD *)v676 + 2) = v678;
                  }
                  while (v661 != v668);
                  v679 = a7;
                  v661 = (char *)*a7;
                  v662 = a6;
                  v680 = v675 + 12;
                  *a7 = v676;
                  a7[1] = v675 + 12;
                  a7[2] = &v674[12 * v672];
                  if (v661)
                  {
LABEL_758:
                    operator delete(v661);
                    LODWORD(v48) = v715;
                    v662 = a6;
                    v681 = a7;
LABEL_761:
                    v23 = a3;
                    v27 = a4;
                    v24 = a2;
                    v29 = v673;
                    v647 = v711;
                    v681[1] = v680;
                    v664 = v662[1];
                    v663 = v662[2];
                    if (v664 >= v663)
                      goto LABEL_762;
LABEL_743:
                    *(_DWORD *)v664 = *v714;
                    *((_DWORD *)v664 + 1) = v48;
                    *((_DWORD *)v664 + 2) = 1065353216;
                    v665 = v664 + 12;
                    v662[1] = v665;
                    if (v665 < v663)
                      goto LABEL_744;
LABEL_774:
                    v693 = *v662;
                    v694 = 0xAAAAAAAAAAAAAAABLL * ((v665 - *v662) >> 2);
                    v695 = v694 + 1;
                    if (v694 + 1 > 0x1555555555555555)
                      sub_2394189F8();
                    v696 = 0xAAAAAAAAAAAAAAABLL * ((v663 - v693) >> 2);
                    if (2 * v696 > v695)
                      v695 = 2 * v696;
                    if (v696 >= 0xAAAAAAAAAAAAAAALL)
                      v697 = 0x1555555555555555;
                    else
                      v697 = v695;
                    if (v697 > 0x1555555555555555)
                      sub_239418A80();
                    v698 = v29;
                    v699 = (char *)operator new(12 * v697);
                    v700 = &v699[12 * v694];
                    v647 = v711;
                    *(_DWORD *)v700 = *v714;
                    *((_DWORD *)v700 + 1) = v711;
                    *((_DWORD *)v700 + 2) = -1082130432;
                    for (j = v700; v665 != v693; *((_DWORD *)j + 2) = v703)
                    {
                      v702 = *(_QWORD *)(v665 - 12);
                      v665 -= 12;
                      v703 = *((_DWORD *)v665 + 2);
                      *(_QWORD *)(j - 12) = v702;
                      j -= 12;
                    }
                    v667 = v700 + 12;
                    v662 = a6;
                    *a6 = j;
                    a6[1] = v700 + 12;
                    a6[2] = &v699[12 * v697];
                    if (v693)
                    {
                      operator delete(v693);
                      v647 = v711;
                      v662 = a6;
                    }
                    v666 = v714;
                    v23 = a3;
                    v27 = a4;
                    v24 = a2;
                    v29 = v698;
LABEL_786:
                    v662[1] = v667;
                    ++*v666;
                    v704 = (char *)v752;
                    *((_QWORD *)v752 + v59) |= v60;
                    *(_QWORD *)&v704[(v647 >> 3) & 0x1FFFFFF8] |= 1 << v647;
LABEL_787:
                    v572 = (_QWORD *)v31[1];
                    if (v572)
                      goto LABEL_659;
                    do
                    {
LABEL_788:
                      v573 = (_QWORD *)v31[2];
                      v11 = *v573 == (_QWORD)v31;
                      v31 = v573;
                    }
                    while (!v11);
                    goto LABEL_15;
                  }
                }
                v681 = v679;
                goto LABEL_761;
              }
              v132 = (__int8 *)(v57 + 3 * v52);
              v13.i8[0] = *v132;
              v133 = (float)v13.u32[0];
              LOBYTE(v14) = v132[1];
              v134 = (float)LODWORD(v14);
              LOBYTE(v15) = v132[2];
              *(float *)&v135 = (float)LODWORD(v15);
              v17.f32[0] = (float)((float)(v134 * 0.587) + (float)(v133 * 0.299)) + (float)(*(float *)&v135 * 0.114);
              *(float *)&v136 = (float)((float)((float)(v134 * -0.33126) + (float)(v133 * -0.16874))
                                      + (float)(*(float *)&v135 * 0.5))
                              + 128.0;
              v137 = (float)(v134 * -0.41869) + (float)(v133 * 0.5);
              v14 = -0.081312;
              v17.i32[1] = v136;
              *(float *)&v138 = (float)(v137 + (float)(*(float *)&v135 * -0.081312)) + 128.0;
              v17.i32[2] = v138;
              v139 = (_BYTE *)(v57 + 3 * v718);
              LOBYTE(v138) = *v139;
              v140 = (float)v138;
              LOBYTE(v135) = v139[1];
              v141 = (float)v135;
              LOBYTE(v136) = v139[2];
              v142 = (float)v136;
              v16.f32[0] = (float)((float)(v141 * 0.587) + (float)(v140 * 0.299)) + (float)(v142 * 0.114);
              v143 = (float)((float)((float)(v141 * -0.33126) + (float)(v140 * -0.16874)) + (float)(v142 * 0.5)) + 128.0;
              v15 = v141 * -0.41869;
              v16.f32[1] = v143;
              v16.f32[2] = (float)((float)(v15 + (float)(v140 * 0.5)) + (float)(v142 * -0.081312)) + 128.0;
              v13 = vsubq_f32(v17, v16);
              v145 = (char *)a7[1];
              v144 = a7[2];
              if ((unint64_t)v145 < v144)
              {
                v146 = v29;
                *((_DWORD *)v145 + 2) = v13.i32[2];
                *(_QWORD *)v145 = v13.i64[0];
                v147 = a6;
                a7[1] = v145 + 12;
                v149 = a6[1];
                v148 = a6[2];
                if (v149 < v148)
                  goto LABEL_170;
LABEL_716:
                v624 = *v147;
                v625 = 0xAAAAAAAAAAAAAAABLL * ((v149 - *v147) >> 2);
                v626 = v625 + 1;
                if (v625 + 1 > 0x1555555555555555)
                  sub_2394189F8();
                v627 = 0xAAAAAAAAAAAAAAABLL * ((v148 - v624) >> 2);
                if (2 * v627 > v626)
                  v626 = 2 * v627;
                if (v627 >= 0xAAAAAAAAAAAAAAALL)
                  v628 = 0x1555555555555555;
                else
                  v628 = v626;
                if (v628 > 0x1555555555555555)
                  sub_239418A80();
                v629 = (char *)operator new(12 * v628);
                v630 = &v629[12 * v625];
                *(_DWORD *)v630 = *v714;
                *((_DWORD *)v630 + 1) = v718;
                *((_DWORD *)v630 + 2) = 1065353216;
                for (k = v630; v149 != v624; *((_DWORD *)k + 2) = v633)
                {
                  v632 = *(_QWORD *)(v149 - 12);
                  v149 -= 12;
                  v633 = *((_DWORD *)v149 + 2);
                  *(_QWORD *)(k - 12) = v632;
                  k -= 12;
                }
                v148 = &v629[12 * v628];
                v150 = v630 + 12;
                v147 = a6;
                *a6 = k;
                a6[1] = v630 + 12;
                a6[2] = v148;
                if (v624)
                {
                  operator delete(v624);
                  v147 = a6;
                  v148 = a6[2];
                }
                v48 = v715;
                v147[1] = v150;
                if (v150 >= v148)
                  goto LABEL_728;
LABEL_171:
                v151 = v714;
                v152 = v707;
                *(_DWORD *)v150 = *v714;
                *((_DWORD *)v150 + 1) = v707;
                *((_DWORD *)v150 + 2) = -1082130432;
                v153 = v150 + 12;
                goto LABEL_740;
              }
              v191 = (char *)*a7;
              v192 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v145[-*a7] >> 2);
              v193 = v192 + 1;
              if (v192 + 1 > 0x1555555555555555)
                sub_2394189F8();
              v194 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v144 - (_QWORD)v191) >> 2);
              if (2 * v194 > v193)
                v193 = 2 * v194;
              if (v194 >= 0xAAAAAAAAAAAAAAALL)
                v195 = 0x1555555555555555;
              else
                v195 = v193;
              if (v195)
              {
                v737 = v13;
                if (v195 > 0x1555555555555555)
                  sub_239418A80();
                v146 = v29;
                v196 = (char *)operator new(12 * v195);
                v48 = v715;
                v13 = v737;
              }
              else
              {
                v146 = v29;
                v196 = 0;
              }
              v617 = &v196[12 * v192];
              *(_QWORD *)v617 = v13.i64[0];
              *((_DWORD *)v617 + 2) = v13.i32[2];
              v618 = v617;
              if (v145 == v191)
              {
                v621 = a7;
                v622 = v617 + 12;
                *a7 = v617;
                a7[1] = v617 + 12;
                a7[2] = &v196[12 * v195];
                if (v145)
                  goto LABEL_712;
              }
              else
              {
                do
                {
                  v619 = *(_QWORD *)(v145 - 12);
                  v145 -= 12;
                  v620 = *((_DWORD *)v145 + 2);
                  *(_QWORD *)(v618 - 12) = v619;
                  v618 -= 12;
                  *((_DWORD *)v618 + 2) = v620;
                }
                while (v145 != v191);
                v621 = a7;
                v145 = (char *)*a7;
                v622 = v617 + 12;
                *a7 = v618;
                a7[1] = v617 + 12;
                a7[2] = &v196[12 * v195];
                if (v145)
                {
LABEL_712:
                  operator delete(v145);
                  v48 = v715;
                  v623 = a7;
LABEL_715:
                  v147 = a6;
                  v58 = v718;
                  v623[1] = v622;
                  v149 = a6[1];
                  v148 = a6[2];
                  if (v149 >= v148)
                    goto LABEL_716;
LABEL_170:
                  *(_DWORD *)v149 = *v714;
                  *((_DWORD *)v149 + 1) = v58;
                  *((_DWORD *)v149 + 2) = 1065353216;
                  v150 = v149 + 12;
                  v147[1] = v150;
                  if (v150 < v148)
                    goto LABEL_171;
LABEL_728:
                  v634 = *v147;
                  v635 = 0xAAAAAAAAAAAAAAABLL * ((v150 - *v147) >> 2);
                  v636 = v635 + 1;
                  if (v635 + 1 > 0x1555555555555555)
                    sub_2394189F8();
                  v637 = 0xAAAAAAAAAAAAAAABLL * ((v148 - v634) >> 2);
                  if (2 * v637 > v636)
                    v636 = 2 * v637;
                  if (v637 >= 0xAAAAAAAAAAAAAAALL)
                    v638 = 0x1555555555555555;
                  else
                    v638 = v636;
                  if (v638 > 0x1555555555555555)
                    sub_239418A80();
                  v639 = (char *)operator new(12 * v638);
                  v640 = &v639[12 * v635];
                  *(_DWORD *)v640 = *v714;
                  *((_DWORD *)v640 + 1) = v707;
                  *((_DWORD *)v640 + 2) = -1082130432;
                  for (m = v640; v150 != v634; *((_DWORD *)m + 2) = v643)
                  {
                    v642 = *(_QWORD *)(v150 - 12);
                    v150 -= 12;
                    v643 = *((_DWORD *)v150 + 2);
                    *(_QWORD *)(m - 12) = v642;
                    m -= 12;
                  }
                  v644 = &v639[12 * v638];
                  v153 = v640 + 12;
                  v147 = a6;
                  *a6 = m;
                  a6[1] = v640 + 12;
                  a6[2] = v644;
                  if (v634)
                  {
                    operator delete(v634);
                    v147 = a6;
                  }
                  v151 = v714;
                  v48 = v715;
                  v152 = v707;
LABEL_740:
                  v147[1] = v153;
                  ++*v151;
                  v645 = v752;
                  *((_QWORD *)v752 + (v718 >> 6)) |= 1 << v718;
                  *(_QWORD *)((char *)v645 + ((v152 >> 3) & 0x1FFFFFF8)) |= 1 << v152;
                  v23 = a3;
                  v27 = a4;
                  v24 = a2;
                  v29 = v146;
                  v59 = v48 >> 6;
                  v60 = 1 << v48;
                  if ((v645[v48 >> 6] & (1 << v48)) == 0)
                    goto LABEL_741;
                  goto LABEL_787;
                }
              }
              v623 = v621;
              goto LABEL_715;
            }
          }
          v705 = v32;
          v706 = v29;
          v749 = 0;
          v750 = 0;
          v751 = 0;
          __p = 0;
          v747 = 0;
          v748 = 0;
          v749 = operator new(0x50uLL);
          v750 = (char *)v749;
          v751 = (char *)v749 + 80;
          __p = operator new(0x50uLL);
          v747 = (char *)__p;
          v748 = (char *)__p + 80;
          v66 = a1;
          if (!*((_BYTE *)a1 + 200))
            sub_2394875CC();
          v67 = 0;
          LODWORD(v68) = 0;
          v69 = 0;
          v725 = v39 + 48;
          v721 = v40 + 48;
          v722 = v39 + 72;
          v70 = a1[3] + 12 * v34;
          v719 = a1[22] + 12 * v34;
          v720 = v40 + 72;
          v717 = v70;
          while (1)
          {
            if (!*((_BYTE *)v66 + 200))
              sub_2394875CC();
            v71 = (unsigned int *)(v66[3] + 12 * v35);
            v72 = *v66;
            v73 = (float *)(*v66 + 12 * *(unsigned int *)(v70 + 4 * v67));
            v74 = *v73;
            v75 = (float *)(*v66 + 12 * *v71);
            v76 = *v75;
            if (*((_BYTE *)v66 + 168))
            {
              v77 = (unsigned int *)(v66[22] + 12 * v35);
              v78 = v66[18];
              if (v74 == v76 && v73[1] == v75[1] && v73[2] == v75[2])
              {
                if ((v68 & 1) != 0)
                {
                  if ((v69 & 1) == 0)
                  {
                    v68 = 0;
                    goto LABEL_109;
                  }
                }
                else
                {
                  v62.i64[0] = *(_QWORD *)(v78 + 8 * *(unsigned int *)(v719 + 4 * v67));
                  v732 = v62;
                  v62.i64[0] = *(_QWORD *)(v78 + 8 * *v77);
                  v731 = v62;
                }
                LODWORD(v68) = 1;
              }
              v81 = (float *)(v72 + 12 * v71[1]);
              if (v74 == *v81 && v73[1] == v81[1] && v73[2] == v81[2])
              {
                if ((v68 & 1) != 0)
                {
                  v68 = 1;
                  if ((v69 & 1) == 0)
                    goto LABEL_109;
                }
                else
                {
                  v62.i64[0] = *(_QWORD *)(v78 + 8 * *(unsigned int *)(v719 + 4 * v67));
                  v732 = v62;
                  v62.i64[0] = *(_QWORD *)(v78 + 8 * v77[1]);
                  v731 = v62;
                  LODWORD(v68) = 1;
                }
              }
              v82 = (float *)(v72 + 12 * v71[2]);
              if (v74 != *v82 || v73[1] != v82[1] || v73[2] != v82[2])
                goto LABEL_68;
              if ((v68 & 1) == 0)
              {
                v61.i64[0] = *(_QWORD *)(v78 + 8 * *(unsigned int *)(v719 + 4 * v67));
                v732 = v61;
                v61.i64[0] = *(_QWORD *)(v78 + 8 * v77[2]);
                v731 = v61;
                LODWORD(v68) = 1;
                goto LABEL_68;
              }
              if ((v69 & 1) == 0)
              {
                v68 = 2;
LABEL_109:
                v83 = 0;
                v729 = *(float32x2_t *)(v78 + 8 * v77[v68]);
                v730 = *(float32x2_t *)(v78 + 8 * *(unsigned int *)(v719 + 4 * v67));
                v8 = v729.f32[1];
                v9 = v730.f32[1];
                while (2)
                {
                  v16.f32[0] = (float)((float)v83 + 1.0) / 11.0;
                  *(float *)&v63 = 1.0 - v16.f32[0];
                  v61.i64[1] = v732.i64[1];
                  v85 = vmla_n_f32(vmul_n_f32(v730, 1.0 - v16.f32[0]), *(float32x2_t *)v732.f32, v16.f32[0]);
                  v86 = v750;
                  if (v750 < v751)
                  {
                    *(float32x2_t *)v750 = v85;
                    v87 = (uint64_t)(v86 + 8);
                    goto LABEL_134;
                  }
                  v88 = v749;
                  v89 = v750 - (_BYTE *)v749;
                  v90 = (v750 - (_BYTE *)v749) >> 3;
                  v91 = v90 + 1;
                  if ((unint64_t)(v90 + 1) >> 61)
                    sub_2394189F8();
                  v92 = v751 - (_BYTE *)v749;
                  if ((v751 - (_BYTE *)v749) >> 2 > v91)
                    v91 = v92 >> 2;
                  if ((unint64_t)v92 >= 0x7FFFFFFFFFFFFFF8)
                    v93 = 0x1FFFFFFFFFFFFFFFLL;
                  else
                    v93 = v91;
                  v733 = v16;
                  v735 = v63;
                  if (v93)
                  {
                    if (v93 >> 61)
                      sub_239418A80();
                    v94 = operator new(8 * v93);
                    v16 = v733;
                    v63 = v735;
                    v95 = (float32x2_t *)&v94[8 * v90];
                    *v95 = v85;
                    v87 = (uint64_t)&v95[1];
                    if (v86 == v88)
                      goto LABEL_132;
LABEL_125:
                    v96 = v86 - 8 - v88;
                    if (v96 < 0x58)
                      goto LABEL_861;
                    if ((unint64_t)(v86 - &v94[v89]) < 0x20)
                      goto LABEL_861;
                    v97 = (v96 >> 3) + 1;
                    v98 = 8 * (v97 & 0x3FFFFFFFFFFFFFFCLL);
                    v99 = &v86[-v98];
                    v95 = (float32x2_t *)((char *)v95 - v98);
                    v100 = (float32x4_t *)&v94[8 * v90 - 16];
                    v101 = (float32x4_t *)(v86 - 16);
                    v102 = v97 & 0x3FFFFFFFFFFFFFFCLL;
                    do
                    {
                      v61 = *v101;
                      v100[-1] = v101[-1];
                      *v100 = v61;
                      v100 -= 2;
                      v101 -= 2;
                      v102 -= 4;
                    }
                    while (v102);
                    v86 = v99;
                    if (v97 != (v97 & 0x3FFFFFFFFFFFFFFCLL))
                    {
LABEL_861:
                      do
                      {
                        v103 = *(float32x2_t *)(v86 - 8);
                        v86 -= 8;
                        v95[-1] = v103;
                        --v95;
                      }
                      while (v86 != v88);
                    }
                    v86 = v749;
                  }
                  else
                  {
                    v94 = 0;
                    v95 = (float32x2_t *)(8 * v90);
                    *(float32x2_t *)(8 * v90) = v85;
                    v87 = 8 * v90 + 8;
                    if (v86 != v88)
                      goto LABEL_125;
                  }
LABEL_132:
                  v749 = v95;
                  v751 = &v94[8 * v93];
                  if (v86)
                  {
                    operator delete(v86);
                    v16 = v733;
                    v63 = v735;
                  }
LABEL_134:
                  v750 = (char *)v87;
                  v62 = v731;
                  v104 = vmla_f32(vmul_n_f32(v729, *(float *)&v63), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v16.f32, 0), *(float32x2_t *)v731.f32);
                  v105 = v747;
                  if (v747 < v748)
                  {
                    *(float32x2_t *)v747 = v104;
                    v84 = (uint64_t)(v105 + 8);
                    goto LABEL_111;
                  }
                  v106 = __p;
                  v107 = v747 - (_BYTE *)__p;
                  v108 = (v747 - (_BYTE *)__p) >> 3;
                  v109 = v108 + 1;
                  if ((unint64_t)(v108 + 1) >> 61)
                    sub_2394189F8();
                  v110 = v748 - (_BYTE *)__p;
                  if ((v748 - (_BYTE *)__p) >> 2 > v109)
                    v109 = v110 >> 2;
                  if ((unint64_t)v110 >= 0x7FFFFFFFFFFFFFF8)
                    v111 = 0x1FFFFFFFFFFFFFFFLL;
                  else
                    v111 = v109;
                  if (v111)
                  {
                    if (v111 >> 61)
                      sub_239418A80();
                    v112 = operator new(8 * v111);
                    v113 = (float32x2_t *)&v112[8 * v108];
                    *v113 = v104;
                    v84 = (uint64_t)&v113[1];
                    if (v105 == v106)
                    {
LABEL_144:
                      __p = v113;
                      v748 = &v112[8 * v111];
                      if (!v105)
                        goto LABEL_111;
                      break;
                    }
                  }
                  else
                  {
                    v112 = 0;
                    v113 = (float32x2_t *)(8 * v108);
                    *(float32x2_t *)(8 * v108) = v104;
                    v84 = 8 * v108 + 8;
                    if (v105 == v106)
                      goto LABEL_144;
                  }
                  v114 = v105 - 8 - v106;
                  if (v114 < 0x58)
                    goto LABEL_862;
                  if ((unint64_t)(v105 - &v112[v107]) < 0x20)
                    goto LABEL_862;
                  v115 = (v114 >> 3) + 1;
                  v116 = 8 * (v115 & 0x3FFFFFFFFFFFFFFCLL);
                  v117 = &v105[-v116];
                  v113 = (float32x2_t *)((char *)v113 - v116);
                  v118 = (float32x4_t *)&v112[8 * v108 - 16];
                  v119 = (float32x4_t *)(v105 - 16);
                  v120 = v115 & 0x3FFFFFFFFFFFFFFCLL;
                  do
                  {
                    v62 = v119[-1];
                    v61 = *v119;
                    v118[-1] = v62;
                    *v118 = v61;
                    v118 -= 2;
                    v119 -= 2;
                    v120 -= 4;
                  }
                  while (v120);
                  v105 = v117;
                  if (v115 != (v115 & 0x3FFFFFFFFFFFFFFCLL))
                  {
LABEL_862:
                    do
                    {
                      v121 = *(float32x2_t *)(v105 - 8);
                      v105 -= 8;
                      v113[-1] = v121;
                      --v113;
                    }
                    while (v105 != v106);
                  }
                  v105 = __p;
                  __p = v113;
                  v748 = &v112[8 * v111];
                  if (!v105)
                  {
LABEL_111:
                    v747 = (char *)v84;
                    if (++v83 == 10)
                    {
                      LODWORD(v68) = 1;
                      v69 = 1;
                      v66 = a1;
                      v70 = v717;
                      goto LABEL_68;
                    }
                    continue;
                  }
                  break;
                }
                operator delete(v105);
                goto LABEL_111;
              }
            }
            else
            {
              if (v74 == v76 && v73[1] == v75[1] && v73[2] == v75[2])
              {
                if ((v68 & v69 & 1) == 0)
                  goto LABEL_814;
                LODWORD(v68) = 1;
              }
              v79 = (float *)(v72 + 12 * v71[1]);
              if (v74 == *v79 && v73[1] == v79[1] && v73[2] == v79[2])
              {
                if ((v68 & v69 & 1) == 0)
                  goto LABEL_814;
                LODWORD(v68) = 1;
              }
              v80 = (float *)(v72 + 12 * v71[2]);
              if (v74 != *v80 || v73[1] != v80[1] || v73[2] != v80[2])
                goto LABEL_68;
              if ((v68 & v69 & 1) == 0)
LABEL_814:
                sub_2394875CC();
            }
            LODWORD(v68) = 1;
            v69 = 1;
LABEL_68:
            if (++v67 == 3)
            {
              v736 = v69;
              if ((v68 & 1) == 0)
                goto LABEL_234;
              v62.i32[0] = *(_DWORD *)(v725 + 140);
              v122 = (double)v62.u64[0] * (1.0 - v732.f32[1]) + -0.5;
              sub_23952B290(v722, (float *)&v743, vmlas_n_f32(-0.5, (float)*(unsigned int *)(v725 + 136), v732.f32[0]), v122);
              v123 = v771;
              if (v771 < v772)
              {
                *(_DWORD *)v771 = v743;
                v124 = (uint64_t)(v123 + 4);
                goto LABEL_181;
              }
              v125 = v770;
              v126 = (v771 - v770) >> 2;
              v127 = v126 + 1;
              if ((unint64_t)(v126 + 1) >> 62)
LABEL_833:
                sub_2394189F8();
              v128 = v772 - v770;
              if ((v772 - v770) >> 1 > v127)
                v127 = v128 >> 1;
              if ((unint64_t)v128 >= 0x7FFFFFFFFFFFFFFCLL)
                v129 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v129 = v127;
              if (!v129)
              {
                v130 = 0;
                v131 = (char *)(4 * v126);
                *(_DWORD *)(4 * v126) = v743;
                v124 = 4 * v126 + 4;
                if (v123 == v125)
                  goto LABEL_179;
LABEL_173:
                v154 = v123 - 4 - v125;
                if (v154 < 0x2C)
                  goto LABEL_863;
                if ((unint64_t)(v125 - v130) < 0x20)
                  goto LABEL_863;
                v155 = (v154 >> 2) + 1;
                v156 = 4 * (v155 & 0x7FFFFFFFFFFFFFF8);
                v157 = &v123[-v156];
                v131 -= v156;
                v158 = (float32x4_t *)&v130[4 * v126 - 16];
                v159 = (float32x4_t *)(v123 - 16);
                v160 = v155 & 0x7FFFFFFFFFFFFFF8;
                do
                {
                  v62 = v159[-1];
                  v161 = *v159;
                  v158[-1] = v62;
                  *v158 = v161;
                  v158 -= 2;
                  v159 -= 2;
                  v160 -= 8;
                }
                while (v160);
                v123 = v157;
                if (v155 != (v155 & 0x7FFFFFFFFFFFFFF8))
                {
LABEL_863:
                  do
                  {
                    v162 = *((_DWORD *)v123 - 1);
                    v123 -= 4;
                    *((_DWORD *)v131 - 1) = v162;
                    v131 -= 4;
                  }
                  while (v123 != v125);
                }
                goto LABEL_179;
              }
              if (v129 >> 62)
                goto LABEL_826;
              v130 = operator new(4 * v129);
              v131 = &v130[4 * v126];
              *(_DWORD *)v131 = v743;
              v124 = (uint64_t)(v131 + 4);
              if (v123 != v125)
                goto LABEL_173;
LABEL_179:
              v770 = v131;
              v771 = (char *)v124;
              v772 = &v130[4 * v129];
              if (v125)
                operator delete(v125);
LABEL_181:
              v771 = (char *)v124;
              v163 = v768;
              if (v768 < v769)
              {
                *(_DWORD *)v768 = v744;
                v164 = (uint64_t)(v163 + 4);
                goto LABEL_202;
              }
              v165 = v767;
              v166 = (v768 - v767) >> 2;
              v167 = v166 + 1;
              if ((unint64_t)(v166 + 1) >> 62)
                goto LABEL_833;
              v168 = v769 - v767;
              if ((v769 - v767) >> 1 > v167)
                v167 = v168 >> 1;
              if ((unint64_t)v168 >= 0x7FFFFFFFFFFFFFFCLL)
                v169 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v169 = v167;
              if (!v169)
              {
                v170 = 0;
                v171 = (char *)(4 * v166);
                *(_DWORD *)(4 * v166) = v744;
                v164 = 4 * v166 + 4;
                if (v163 == v165)
                  goto LABEL_200;
LABEL_194:
                v172 = v163 - 4 - v165;
                if (v172 < 0x2C)
                  goto LABEL_864;
                if ((unint64_t)(v165 - v170) < 0x20)
                  goto LABEL_864;
                v173 = (v172 >> 2) + 1;
                v174 = 4 * (v173 & 0x7FFFFFFFFFFFFFF8);
                v175 = &v163[-v174];
                v171 -= v174;
                v176 = (float32x4_t *)&v170[4 * v166 - 16];
                v177 = (float32x4_t *)(v163 - 16);
                v178 = v173 & 0x7FFFFFFFFFFFFFF8;
                do
                {
                  v62 = v177[-1];
                  v179 = *v177;
                  v176[-1] = v62;
                  *v176 = v179;
                  v176 -= 2;
                  v177 -= 2;
                  v178 -= 8;
                }
                while (v178);
                v163 = v175;
                if (v173 != (v173 & 0x7FFFFFFFFFFFFFF8))
                {
LABEL_864:
                  do
                  {
                    v180 = *((_DWORD *)v163 - 1);
                    v163 -= 4;
                    *((_DWORD *)v171 - 1) = v180;
                    v171 -= 4;
                  }
                  while (v163 != v165);
                }
                goto LABEL_200;
              }
              if (v169 >> 62)
                goto LABEL_826;
              v170 = operator new(4 * v169);
              v171 = &v170[4 * v166];
              *(_DWORD *)v171 = v744;
              v164 = (uint64_t)(v171 + 4);
              if (v163 != v165)
                goto LABEL_194;
LABEL_200:
              v767 = v171;
              v768 = (char *)v164;
              v769 = &v170[4 * v169];
              if (v165)
                operator delete(v165);
LABEL_202:
              v768 = (char *)v164;
              v181 = v765;
              if (v765 < v766)
              {
                *(_DWORD *)v765 = v745;
                v182 = (uint64_t)(v181 + 4);
                goto LABEL_233;
              }
              v183 = v764;
              v184 = (v765 - v764) >> 2;
              v185 = v184 + 1;
              if ((unint64_t)(v184 + 1) >> 62)
                goto LABEL_833;
              v186 = v766 - v764;
              if ((v766 - v764) >> 1 > v185)
                v185 = v186 >> 1;
              if ((unint64_t)v186 >= 0x7FFFFFFFFFFFFFFCLL)
                v187 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v187 = v185;
              if (v187)
              {
                if (!(v187 >> 62))
                {
                  v188 = operator new(4 * v187);
                  v189 = &v188[4 * v184];
                  *(_DWORD *)v189 = v745;
                  v182 = (uint64_t)(v189 + 4);
                  if (v181 != v183)
                    goto LABEL_213;
                  goto LABEL_231;
                }
LABEL_826:
                sub_239418A80();
              }
              v188 = 0;
              v189 = (char *)(4 * v184);
              *(_DWORD *)(4 * v184) = v745;
              v182 = 4 * v184 + 4;
              if (v181 != v183)
              {
LABEL_213:
                v190 = v181 - 4 - v183;
                if (v190 < 0x2C)
                  goto LABEL_865;
                if ((unint64_t)(v183 - v188) < 0x20)
                  goto LABEL_865;
                v197 = (v190 >> 2) + 1;
                v198 = 4 * (v197 & 0x7FFFFFFFFFFFFFF8);
                v199 = &v181[-v198];
                v189 -= v198;
                v200 = (float32x4_t *)&v188[4 * v184 - 16];
                v201 = (float32x4_t *)(v181 - 16);
                v202 = v197 & 0x7FFFFFFFFFFFFFF8;
                do
                {
                  v62 = v201[-1];
                  v203 = *v201;
                  v200[-1] = v62;
                  *v200 = v203;
                  v200 -= 2;
                  v201 -= 2;
                  v202 -= 8;
                }
                while (v202);
                v181 = v199;
                if (v197 != (v197 & 0x7FFFFFFFFFFFFFF8))
                {
LABEL_865:
                  do
                  {
                    v204 = *((_DWORD *)v181 - 1);
                    v181 -= 4;
                    *((_DWORD *)v189 - 1) = v204;
                    v189 -= 4;
                  }
                  while (v181 != v183);
                }
              }
LABEL_231:
              v764 = v189;
              v765 = (char *)v182;
              v766 = &v188[4 * v187];
              if (v183)
                operator delete(v183);
LABEL_233:
              v765 = (char *)v182;
LABEL_234:
              if ((v69 & 1) != 0)
              {
                v62.i32[0] = *(_DWORD *)(v725 + 140);
                v205 = (double)v62.u64[0] * (1.0 - v9) + -0.5;
                sub_23952B290(v722, (float *)&v743, (float)((float)*(unsigned int *)(v725 + 136) * v730.f32[0]) + -0.5, v205);
                v206 = v771;
                if (v771 < v772)
                {
                  *(_DWORD *)v771 = v743;
                  v207 = (uint64_t)(v206 + 4);
                  goto LABEL_256;
                }
                v208 = v770;
                v209 = (v771 - v770) >> 2;
                v210 = v209 + 1;
                if ((unint64_t)(v209 + 1) >> 62)
                  goto LABEL_834;
                v211 = v772 - v770;
                if ((v772 - v770) >> 1 > v210)
                  v210 = v211 >> 1;
                if ((unint64_t)v211 >= 0x7FFFFFFFFFFFFFFCLL)
                  v212 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v212 = v210;
                if (v212)
                {
                  if (v212 >> 62)
                    goto LABEL_827;
                  v213 = operator new(4 * v212);
                  v214 = &v213[4 * v209];
                  *(_DWORD *)v214 = v743;
                  v207 = (uint64_t)(v214 + 4);
                  if (v206 == v208)
                  {
LABEL_254:
                    v770 = v214;
                    v771 = (char *)v207;
                    v772 = &v213[4 * v212];
                    if (v208)
                      operator delete(v208);
LABEL_256:
                    v771 = (char *)v207;
                    v224 = v768;
                    if (v768 < v769)
                    {
                      *(_DWORD *)v768 = v744;
                      v225 = (uint64_t)(v224 + 4);
                      goto LABEL_277;
                    }
                    v226 = v767;
                    v227 = (v768 - v767) >> 2;
                    v228 = v227 + 1;
                    if ((unint64_t)(v227 + 1) >> 62)
                      goto LABEL_834;
                    v229 = v769 - v767;
                    if ((v769 - v767) >> 1 > v228)
                      v228 = v229 >> 1;
                    if ((unint64_t)v229 >= 0x7FFFFFFFFFFFFFFCLL)
                      v230 = 0x3FFFFFFFFFFFFFFFLL;
                    else
                      v230 = v228;
                    if (v230)
                    {
                      if (v230 >> 62)
                        goto LABEL_827;
                      v231 = operator new(4 * v230);
                      v232 = &v231[4 * v227];
                      *(_DWORD *)v232 = v744;
                      v225 = (uint64_t)(v232 + 4);
                      if (v224 == v226)
                      {
LABEL_275:
                        v767 = v232;
                        v768 = (char *)v225;
                        v769 = &v231[4 * v230];
                        if (v226)
                          operator delete(v226);
LABEL_277:
                        v768 = (char *)v225;
                        v242 = v765;
                        if (v765 < v766)
                        {
                          *(_DWORD *)v765 = v745;
                          v243 = (uint64_t)(v242 + 4);
                          goto LABEL_299;
                        }
                        v244 = v764;
                        v245 = (v765 - v764) >> 2;
                        v246 = v245 + 1;
                        if (!((unint64_t)(v245 + 1) >> 62))
                        {
                          v247 = v766 - v764;
                          if ((v766 - v764) >> 1 > v246)
                            v246 = v247 >> 1;
                          if ((unint64_t)v247 >= 0x7FFFFFFFFFFFFFFCLL)
                            v248 = 0x3FFFFFFFFFFFFFFFLL;
                          else
                            v248 = v246;
                          if (v248)
                          {
                            if (!(v248 >> 62))
                            {
                              v249 = operator new(4 * v248);
                              v250 = &v249[4 * v245];
                              *(_DWORD *)v250 = v745;
                              v243 = (uint64_t)(v250 + 4);
                              if (v242 != v244)
                                goto LABEL_288;
                              goto LABEL_297;
                            }
LABEL_827:
                            sub_239418A80();
                          }
                          v249 = 0;
                          v250 = (char *)(4 * v245);
                          *(_DWORD *)(4 * v245) = v745;
                          v243 = 4 * v245 + 4;
                          if (v242 != v244)
                          {
LABEL_288:
                            v251 = v242 - 4 - v244;
                            if (v251 < 0x2C)
                              goto LABEL_866;
                            if ((unint64_t)(v244 - v249) < 0x20)
                              goto LABEL_866;
                            v252 = (v251 >> 2) + 1;
                            v253 = 4 * (v252 & 0x7FFFFFFFFFFFFFF8);
                            v254 = &v242[-v253];
                            v250 -= v253;
                            v255 = (float32x4_t *)&v249[4 * v245 - 16];
                            v256 = (float32x4_t *)(v242 - 16);
                            v257 = v252 & 0x7FFFFFFFFFFFFFF8;
                            do
                            {
                              v62 = v256[-1];
                              v258 = *v256;
                              v255[-1] = v62;
                              *v255 = v258;
                              v255 -= 2;
                              v256 -= 2;
                              v257 -= 8;
                            }
                            while (v257);
                            v242 = v254;
                            if (v252 != (v252 & 0x7FFFFFFFFFFFFFF8))
                            {
LABEL_866:
                              do
                              {
                                v259 = *((_DWORD *)v242 - 1);
                                v242 -= 4;
                                *((_DWORD *)v250 - 1) = v259;
                                v250 -= 4;
                              }
                              while (v242 != v244);
                            }
                          }
LABEL_297:
                          v764 = v250;
                          v765 = (char *)v243;
                          v766 = &v249[4 * v248];
                          if (v244)
                            operator delete(v244);
LABEL_299:
                          v765 = (char *)v243;
                          v260 = (float *)v749;
                          v261 = (float *)v750;
                          while (2)
                          {
                            if (v260 == v261)
                              goto LABEL_366;
                            v62.i32[0] = *(_DWORD *)(v725 + 140);
                            v263 = (double)v62.u64[0] * (1.0 - v260[1]) + -0.5;
                            sub_23952B290(v722, (float *)&v740, (float)((float)*(unsigned int *)(v725 + 136) * *v260) + -0.5, v263);
                            v264 = v771;
                            if (v771 < v772)
                            {
                              *(_DWORD *)v771 = v740;
                              v265 = (uint64_t)(v264 + 4);
                              goto LABEL_324;
                            }
                            v266 = v770;
                            v267 = (v771 - v770) >> 2;
                            v268 = v267 + 1;
                            if ((unint64_t)(v267 + 1) >> 62)
                              goto LABEL_819;
                            v269 = v772 - v770;
                            if ((v772 - v770) >> 1 > v268)
                              v268 = v269 >> 1;
                            if ((unint64_t)v269 >= 0x7FFFFFFFFFFFFFFCLL)
                              v270 = 0x3FFFFFFFFFFFFFFFLL;
                            else
                              v270 = v268;
                            if (v270)
                            {
                              if (v270 >> 62)
                                goto LABEL_812;
                              v271 = operator new(4 * v270);
                              v272 = &v271[4 * v267];
                              *(_DWORD *)v272 = v740;
                              v265 = (uint64_t)(v272 + 4);
                              if (v264 == v266)
                                goto LABEL_322;
LABEL_316:
                              v273 = v264 - 4 - v266;
                              if (v273 < 0x2C)
                                goto LABEL_867;
                              if ((unint64_t)(v266 - v271) < 0x20)
                                goto LABEL_867;
                              v274 = (v273 >> 2) + 1;
                              v275 = 4 * (v274 & 0x7FFFFFFFFFFFFFF8);
                              v276 = &v264[-v275];
                              v272 -= v275;
                              v277 = (float32x4_t *)&v271[4 * v267 - 16];
                              v278 = (float32x4_t *)(v264 - 16);
                              v279 = v274 & 0x7FFFFFFFFFFFFFF8;
                              do
                              {
                                v62 = v278[-1];
                                v280 = *v278;
                                v277[-1] = v62;
                                *v277 = v280;
                                v277 -= 2;
                                v278 -= 2;
                                v279 -= 8;
                              }
                              while (v279);
                              v264 = v276;
                              if (v274 != (v274 & 0x7FFFFFFFFFFFFFF8))
                              {
LABEL_867:
                                do
                                {
                                  v281 = *((_DWORD *)v264 - 1);
                                  v264 -= 4;
                                  *((_DWORD *)v272 - 1) = v281;
                                  v272 -= 4;
                                }
                                while (v264 != v266);
                              }
                            }
                            else
                            {
                              v271 = 0;
                              v272 = (char *)(4 * v267);
                              *(_DWORD *)(4 * v267) = v740;
                              v265 = 4 * v267 + 4;
                              if (v264 != v266)
                                goto LABEL_316;
                            }
LABEL_322:
                            v770 = v272;
                            v771 = (char *)v265;
                            v772 = &v271[4 * v270];
                            if (v266)
                              operator delete(v266);
LABEL_324:
                            v771 = (char *)v265;
                            v282 = v768;
                            if (v768 < v769)
                            {
                              *(_DWORD *)v768 = v741;
                              v283 = (uint64_t)(v282 + 4);
                              goto LABEL_345;
                            }
                            v284 = v767;
                            v285 = (v768 - v767) >> 2;
                            v286 = v285 + 1;
                            if ((unint64_t)(v285 + 1) >> 62)
                              goto LABEL_819;
                            v287 = v769 - v767;
                            if ((v769 - v767) >> 1 > v286)
                              v286 = v287 >> 1;
                            if ((unint64_t)v287 >= 0x7FFFFFFFFFFFFFFCLL)
                              v288 = 0x3FFFFFFFFFFFFFFFLL;
                            else
                              v288 = v286;
                            if (v288)
                            {
                              if (v288 >> 62)
                                goto LABEL_812;
                              v289 = operator new(4 * v288);
                              v290 = &v289[4 * v285];
                              *(_DWORD *)v290 = v741;
                              v283 = (uint64_t)(v290 + 4);
                              if (v282 == v284)
                                goto LABEL_343;
LABEL_337:
                              v291 = v282 - 4 - v284;
                              if (v291 < 0x2C)
                                goto LABEL_868;
                              if ((unint64_t)(v284 - v289) < 0x20)
                                goto LABEL_868;
                              v292 = (v291 >> 2) + 1;
                              v293 = 4 * (v292 & 0x7FFFFFFFFFFFFFF8);
                              v294 = &v282[-v293];
                              v290 -= v293;
                              v295 = (float32x4_t *)&v289[4 * v285 - 16];
                              v296 = (float32x4_t *)(v282 - 16);
                              v297 = v292 & 0x7FFFFFFFFFFFFFF8;
                              do
                              {
                                v62 = v296[-1];
                                v298 = *v296;
                                v295[-1] = v62;
                                *v295 = v298;
                                v295 -= 2;
                                v296 -= 2;
                                v297 -= 8;
                              }
                              while (v297);
                              v282 = v294;
                              if (v292 != (v292 & 0x7FFFFFFFFFFFFFF8))
                              {
LABEL_868:
                                do
                                {
                                  v299 = *((_DWORD *)v282 - 1);
                                  v282 -= 4;
                                  *((_DWORD *)v290 - 1) = v299;
                                  v290 -= 4;
                                }
                                while (v282 != v284);
                              }
                            }
                            else
                            {
                              v289 = 0;
                              v290 = (char *)(4 * v285);
                              *(_DWORD *)(4 * v285) = v741;
                              v283 = 4 * v285 + 4;
                              if (v282 != v284)
                                goto LABEL_337;
                            }
LABEL_343:
                            v767 = v290;
                            v768 = (char *)v283;
                            v769 = &v289[4 * v288];
                            if (v284)
                              operator delete(v284);
LABEL_345:
                            v768 = (char *)v283;
                            v300 = v765;
                            if (v765 >= v766)
                            {
                              v301 = v764;
                              v302 = (v765 - v764) >> 2;
                              v303 = v302 + 1;
                              if ((unint64_t)(v302 + 1) >> 62)
LABEL_819:
                                sub_2394189F8();
                              v304 = v766 - v764;
                              if ((v766 - v764) >> 1 > v303)
                                v303 = v304 >> 1;
                              if ((unint64_t)v304 >= 0x7FFFFFFFFFFFFFFCLL)
                                v305 = 0x3FFFFFFFFFFFFFFFLL;
                              else
                                v305 = v303;
                              if (v305)
                              {
                                if (v305 >> 62)
LABEL_812:
                                  sub_239418A80();
                                v306 = operator new(4 * v305);
                                v307 = &v306[4 * v302];
                                *(_DWORD *)v307 = v742;
                                v262 = (uint64_t)(v307 + 4);
                                if (v300 != v301)
                                {
LABEL_355:
                                  v308 = v300 - 4 - v301;
                                  if (v308 < 0x2C)
                                  {
                                    LOBYTE(v69) = v736;
                                    goto LABEL_363;
                                  }
                                  LOBYTE(v69) = v736;
                                  if ((unint64_t)(v301 - v306) < 0x20)
                                    goto LABEL_869;
                                  v309 = (v308 >> 2) + 1;
                                  v310 = 4 * (v309 & 0x7FFFFFFFFFFFFFF8);
                                  v311 = &v300[-v310];
                                  v307 -= v310;
                                  v312 = (float32x4_t *)&v306[4 * v302 - 16];
                                  v313 = (float32x4_t *)(v300 - 16);
                                  v314 = v309 & 0x7FFFFFFFFFFFFFF8;
                                  do
                                  {
                                    v62 = v313[-1];
                                    v315 = *v313;
                                    v312[-1] = v62;
                                    *v312 = v315;
                                    v312 -= 2;
                                    v313 -= 2;
                                    v314 -= 8;
                                  }
                                  while (v314);
                                  v300 = v311;
                                  if (v309 != (v309 & 0x7FFFFFFFFFFFFFF8))
                                  {
LABEL_869:
                                    do
                                    {
LABEL_363:
                                      v316 = *((_DWORD *)v300 - 1);
                                      v300 -= 4;
                                      *((_DWORD *)v307 - 1) = v316;
                                      v307 -= 4;
                                    }
                                    while (v300 != v301);
                                  }
LABEL_364:
                                  v764 = v307;
                                  v765 = (char *)v262;
                                  v766 = &v306[4 * v305];
                                  if (v301)
                                    operator delete(v301);
LABEL_301:
                                  v765 = (char *)v262;
                                  v260 += 2;
                                  continue;
                                }
                              }
                              else
                              {
                                v306 = 0;
                                v307 = (char *)(4 * v302);
                                *(_DWORD *)(4 * v302) = v742;
                                v262 = 4 * v302 + 4;
                                if (v300 != v301)
                                  goto LABEL_355;
                              }
                              LOBYTE(v69) = v736;
                              goto LABEL_364;
                            }
                            break;
                          }
                          *(_DWORD *)v765 = v742;
                          v262 = (uint64_t)(v300 + 4);
                          LOBYTE(v69) = v736;
                          goto LABEL_301;
                        }
LABEL_834:
                        sub_2394189F8();
                      }
                    }
                    else
                    {
                      v231 = 0;
                      v232 = (char *)(4 * v227);
                      *(_DWORD *)(4 * v227) = v744;
                      v225 = 4 * v227 + 4;
                      if (v224 == v226)
                        goto LABEL_275;
                    }
                    v233 = v224 - 4 - v226;
                    if (v233 < 0x2C)
                      goto LABEL_870;
                    if ((unint64_t)(v226 - v231) < 0x20)
                      goto LABEL_870;
                    v234 = (v233 >> 2) + 1;
                    v235 = 4 * (v234 & 0x7FFFFFFFFFFFFFF8);
                    v236 = &v224[-v235];
                    v232 -= v235;
                    v237 = (float32x4_t *)&v231[4 * v227 - 16];
                    v238 = (float32x4_t *)(v224 - 16);
                    v239 = v234 & 0x7FFFFFFFFFFFFFF8;
                    do
                    {
                      v62 = v238[-1];
                      v240 = *v238;
                      v237[-1] = v62;
                      *v237 = v240;
                      v237 -= 2;
                      v238 -= 2;
                      v239 -= 8;
                    }
                    while (v239);
                    v224 = v236;
                    if (v234 != (v234 & 0x7FFFFFFFFFFFFFF8))
                    {
LABEL_870:
                      do
                      {
                        v241 = *((_DWORD *)v224 - 1);
                        v224 -= 4;
                        *((_DWORD *)v232 - 1) = v241;
                        v232 -= 4;
                      }
                      while (v224 != v226);
                    }
                    goto LABEL_275;
                  }
                }
                else
                {
                  v213 = 0;
                  v214 = (char *)(4 * v209);
                  *(_DWORD *)(4 * v209) = v743;
                  v207 = 4 * v209 + 4;
                  if (v206 == v208)
                    goto LABEL_254;
                }
                v215 = v206 - 4 - v208;
                if (v215 < 0x2C)
                  goto LABEL_871;
                if ((unint64_t)(v208 - v213) < 0x20)
                  goto LABEL_871;
                v216 = (v215 >> 2) + 1;
                v217 = 4 * (v216 & 0x7FFFFFFFFFFFFFF8);
                v218 = &v206[-v217];
                v214 -= v217;
                v219 = (float32x4_t *)&v213[4 * v209 - 16];
                v220 = (float32x4_t *)(v206 - 16);
                v221 = v216 & 0x7FFFFFFFFFFFFFF8;
                do
                {
                  v62 = v220[-1];
                  v222 = *v220;
                  v219[-1] = v62;
                  *v219 = v222;
                  v219 -= 2;
                  v220 -= 2;
                  v221 -= 8;
                }
                while (v221);
                v206 = v218;
                if (v216 != (v216 & 0x7FFFFFFFFFFFFFF8))
                {
LABEL_871:
                  do
                  {
                    v223 = *((_DWORD *)v206 - 1);
                    v206 -= 4;
                    *((_DWORD *)v214 - 1) = v223;
                    v214 -= 4;
                  }
                  while (v206 != v208);
                }
                goto LABEL_254;
              }
LABEL_366:
              v734 = v9;
              v738 = v8;
              v317 = 0.0;
              v318 = 0.0;
              if (v771 != v770)
              {
                v319 = (v771 - v770) >> 2;
                if (v319 <= 1)
                  v320 = 1;
                else
                  v320 = (v771 - v770) >> 2;
                v321 = 0.0;
                v322 = (float *)v770;
                do
                {
                  v323 = *v322++;
                  v321 = v321 + v323;
                  --v320;
                }
                while (v320);
                v318 = v321 / (float)v319;
              }
              if (v768 != v767)
              {
                v324 = (v768 - v767) >> 2;
                if (v324 <= 1)
                  v325 = 1;
                else
                  v325 = (v768 - v767) >> 2;
                v326 = 0.0;
                v327 = (float *)v767;
                do
                {
                  v328 = *v327++;
                  v326 = v326 + v328;
                  --v325;
                }
                while (v325);
                v317 = v326 / (float)v324;
              }
              if (v765 == v764)
              {
                v334 = 0.0;
                v771 = v770;
                v768 = v767;
                v765 = v764;
                if ((v68 & 1) == 0)
                  goto LABEL_387;
LABEL_390:
                v62.i32[0] = *(_DWORD *)(v721 + 140);
                v335 = (double)v62.u64[0] * (1.0 - v731.f32[1]) + -0.5;
                sub_23952B290(v720, (float *)&v743, vmlas_n_f32(-0.5, (float)*(unsigned int *)(v721 + 136), v731.f32[0]), v335);
                v336 = v762;
                if (v762 < v763)
                {
                  *(_DWORD *)v762 = v743;
                  v337 = (uint64_t)(v336 + 4);
                  goto LABEL_411;
                }
                v338 = v761;
                v339 = (v762 - v761) >> 2;
                v340 = v339 + 1;
                if ((unint64_t)(v339 + 1) >> 62)
                  goto LABEL_831;
                v341 = v763 - v761;
                if ((v763 - v761) >> 1 > v340)
                  v340 = v341 >> 1;
                if ((unint64_t)v341 >= 0x7FFFFFFFFFFFFFFCLL)
                  v342 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v342 = v340;
                if (v342)
                {
                  if (v342 >> 62)
                    goto LABEL_828;
                  v343 = operator new(4 * v342);
                  v344 = &v343[4 * v339];
                  *(_DWORD *)v344 = v743;
                  v337 = (uint64_t)(v344 + 4);
                  if (v336 == v338)
                  {
LABEL_409:
                    v761 = v344;
                    v762 = (char *)v337;
                    v763 = &v343[4 * v342];
                    if (v338)
                      operator delete(v338);
LABEL_411:
                    v762 = (char *)v337;
                    v354 = v759;
                    if (v759 < v760)
                    {
                      *(_DWORD *)v759 = v744;
                      v355 = (uint64_t)(v354 + 4);
                      goto LABEL_432;
                    }
                    v356 = (char *)v758;
                    v357 = v759 - (_BYTE *)v758;
                    v358 = (v759 - (_BYTE *)v758) >> 2;
                    v359 = v358 + 1;
                    if ((unint64_t)(v358 + 1) >> 62)
                      goto LABEL_831;
                    v360 = v760 - (_BYTE *)v758;
                    if ((v760 - (_BYTE *)v758) >> 1 > v359)
                      v359 = v360 >> 1;
                    if ((unint64_t)v360 >= 0x7FFFFFFFFFFFFFFCLL)
                      v361 = 0x3FFFFFFFFFFFFFFFLL;
                    else
                      v361 = v359;
                    if (v361)
                    {
                      if (v361 >> 62)
                        goto LABEL_828;
                      v362 = (char *)operator new(4 * v361);
                      v363 = &v362[4 * v358];
                      *(_DWORD *)v363 = v744;
                      v355 = (uint64_t)(v363 + 4);
                      if (v354 == v356)
                      {
LABEL_430:
                        v758 = v363;
                        v759 = (char *)v355;
                        v760 = &v362[4 * v361];
                        if (v356)
                          operator delete(v356);
LABEL_432:
                        v759 = (char *)v355;
                        v373 = v756;
                        if (v756 < v757)
                        {
                          *(_DWORD *)v756 = v745;
                          v374 = (uint64_t)(v373 + 4);
                          goto LABEL_453;
                        }
                        v375 = (char *)v755;
                        v376 = v756 - (_BYTE *)v755;
                        v377 = (v756 - (_BYTE *)v755) >> 2;
                        v378 = v377 + 1;
                        if (!((unint64_t)(v377 + 1) >> 62))
                        {
                          v379 = v757 - (_BYTE *)v755;
                          if ((v757 - (_BYTE *)v755) >> 1 > v378)
                            v378 = v379 >> 1;
                          if ((unint64_t)v379 >= 0x7FFFFFFFFFFFFFFCLL)
                            v380 = 0x3FFFFFFFFFFFFFFFLL;
                          else
                            v380 = v378;
                          if (!v380)
                          {
                            v381 = 0;
                            v382 = (char *)(4 * v377);
                            *(_DWORD *)(4 * v377) = v745;
                            v374 = 4 * v377 + 4;
                            if (v373 == v375)
                              goto LABEL_451;
                            goto LABEL_445;
                          }
                          if (!(v380 >> 62))
                          {
                            v381 = (char *)operator new(4 * v380);
                            v382 = &v381[4 * v377];
                            *(_DWORD *)v382 = v745;
                            v374 = (uint64_t)(v382 + 4);
                            if (v373 == v375)
                            {
LABEL_451:
                              v755 = v382;
                              v756 = (char *)v374;
                              v757 = &v381[4 * v380];
                              if (v375)
                                operator delete(v375);
LABEL_453:
                              v756 = (char *)v374;
                              if ((v69 & 1) == 0)
                                goto LABEL_583;
LABEL_454:
                              v62.i32[0] = *(_DWORD *)(v721 + 140);
                              v392 = (double)v62.u64[0] * (1.0 - v738) + -0.5;
                              sub_23952B290(v720, (float *)&v743, (float)((float)*(unsigned int *)(v721 + 136) * v729.f32[0]) + -0.5, v392);
                              v393 = v762;
                              if (v762 < v763)
                              {
                                *(_DWORD *)v762 = v743;
                                v394 = (uint64_t)(v393 + 4);
                                goto LABEL_475;
                              }
                              v395 = v761;
                              v396 = (v762 - v761) >> 2;
                              v397 = v396 + 1;
                              if ((unint64_t)(v396 + 1) >> 62)
                                goto LABEL_832;
                              v398 = v763 - v761;
                              if ((v763 - v761) >> 1 > v397)
                                v397 = v398 >> 1;
                              if ((unint64_t)v398 >= 0x7FFFFFFFFFFFFFFCLL)
                                v399 = 0x3FFFFFFFFFFFFFFFLL;
                              else
                                v399 = v397;
                              if (v399)
                              {
                                if (v399 >> 62)
                                  goto LABEL_829;
                                v400 = operator new(4 * v399);
                                v401 = &v400[4 * v396];
                                *(_DWORD *)v401 = v743;
                                v394 = (uint64_t)(v401 + 4);
                                if (v393 == v395)
                                {
LABEL_473:
                                  v761 = v401;
                                  v762 = (char *)v394;
                                  v763 = &v400[4 * v399];
                                  if (v395)
                                    operator delete(v395);
LABEL_475:
                                  v762 = (char *)v394;
                                  v411 = v759;
                                  if (v759 < v760)
                                  {
                                    *(_DWORD *)v759 = v744;
                                    v412 = (uint64_t)(v411 + 4);
                                    goto LABEL_496;
                                  }
                                  v413 = (char *)v758;
                                  v414 = v759 - (_BYTE *)v758;
                                  v415 = (v759 - (_BYTE *)v758) >> 2;
                                  v416 = v415 + 1;
                                  if ((unint64_t)(v415 + 1) >> 62)
                                    goto LABEL_832;
                                  v417 = v760 - (_BYTE *)v758;
                                  if ((v760 - (_BYTE *)v758) >> 1 > v416)
                                    v416 = v417 >> 1;
                                  if ((unint64_t)v417 >= 0x7FFFFFFFFFFFFFFCLL)
                                    v418 = 0x3FFFFFFFFFFFFFFFLL;
                                  else
                                    v418 = v416;
                                  if (v418)
                                  {
                                    if (v418 >> 62)
                                      goto LABEL_829;
                                    v419 = (char *)operator new(4 * v418);
                                    v420 = &v419[4 * v415];
                                    *(_DWORD *)v420 = v744;
                                    v412 = (uint64_t)(v420 + 4);
                                    if (v411 == v413)
                                    {
LABEL_494:
                                      v758 = v420;
                                      v759 = (char *)v412;
                                      v760 = &v419[4 * v418];
                                      if (v413)
                                        operator delete(v413);
LABEL_496:
                                      v759 = (char *)v412;
                                      v430 = v756;
                                      if (v756 < v757)
                                      {
                                        *(_DWORD *)v756 = v745;
                                        v431 = (uint64_t)(v430 + 4);
                                        goto LABEL_517;
                                      }
                                      v432 = (char *)v755;
                                      v433 = v756 - (_BYTE *)v755;
                                      v434 = (v756 - (_BYTE *)v755) >> 2;
                                      v435 = v434 + 1;
                                      if (!((unint64_t)(v434 + 1) >> 62))
                                      {
                                        v436 = v757 - (_BYTE *)v755;
                                        if ((v757 - (_BYTE *)v755) >> 1 > v435)
                                          v435 = v436 >> 1;
                                        if ((unint64_t)v436 >= 0x7FFFFFFFFFFFFFFCLL)
                                          v437 = 0x3FFFFFFFFFFFFFFFLL;
                                        else
                                          v437 = v435;
                                        if (!v437)
                                        {
                                          v438 = 0;
                                          v439 = (char *)(4 * v434);
                                          *(_DWORD *)(4 * v434) = v745;
                                          v431 = 4 * v434 + 4;
                                          if (v430 == v432)
                                            goto LABEL_515;
                                          goto LABEL_509;
                                        }
                                        if (!(v437 >> 62))
                                        {
                                          v438 = (char *)operator new(4 * v437);
                                          v439 = &v438[4 * v434];
                                          *(_DWORD *)v439 = v745;
                                          v431 = (uint64_t)(v439 + 4);
                                          if (v430 == v432)
                                          {
LABEL_515:
                                            v755 = v439;
                                            v756 = (char *)v431;
                                            v757 = &v438[4 * v437];
                                            if (v432)
                                              operator delete(v432);
LABEL_517:
                                            v756 = (char *)v431;
                                            v449 = (float *)__p;
                                            v450 = (float *)v747;
                                            while (2)
                                            {
                                              if (v449 == v450)
                                                goto LABEL_583;
                                              v16.i32[0] = *(_DWORD *)(v721 + 140);
                                              v452 = (double)v16.u64[0] * (1.0 - v449[1]) + -0.5;
                                              sub_23952B290(v720, (float *)&v740, (float)((float)*(unsigned int *)(v721 + 136) * *v449) + -0.5, v452);
                                              v453 = v762;
                                              if (v762 < v763)
                                              {
                                                *(_DWORD *)v762 = v740;
                                                v454 = (uint64_t)(v453 + 4);
                                                goto LABEL_542;
                                              }
                                              v455 = v761;
                                              v456 = (v762 - v761) >> 2;
                                              v457 = v456 + 1;
                                              if ((unint64_t)(v456 + 1) >> 62)
                                                goto LABEL_820;
                                              v458 = v763 - v761;
                                              if ((v763 - v761) >> 1 > v457)
                                                v457 = v458 >> 1;
                                              if ((unint64_t)v458 >= 0x7FFFFFFFFFFFFFFCLL)
                                                v459 = 0x3FFFFFFFFFFFFFFFLL;
                                              else
                                                v459 = v457;
                                              if (v459)
                                              {
                                                if (v459 >> 62)
                                                  goto LABEL_813;
                                                v460 = operator new(4 * v459);
                                                v461 = &v460[4 * v456];
                                                *(_DWORD *)v461 = v740;
                                                v454 = (uint64_t)(v461 + 4);
                                                if (v453 == v455)
                                                  goto LABEL_540;
LABEL_534:
                                                v462 = v453 - 4 - v455;
                                                if (v462 < 0x2C)
                                                  goto LABEL_872;
                                                if ((unint64_t)(v455 - v460) < 0x20)
                                                  goto LABEL_872;
                                                v463 = (v462 >> 2) + 1;
                                                v464 = 4 * (v463 & 0x7FFFFFFFFFFFFFF8);
                                                v465 = &v453[-v464];
                                                v461 -= v464;
                                                v466 = &v460[4 * v456 - 16];
                                                v467 = v453 - 16;
                                                v468 = v463 & 0x7FFFFFFFFFFFFFF8;
                                                do
                                                {
                                                  v469 = *(_OWORD *)v467;
                                                  *(v466 - 1) = *((_OWORD *)v467 - 1);
                                                  *v466 = v469;
                                                  v466 -= 2;
                                                  v467 -= 32;
                                                  v468 -= 8;
                                                }
                                                while (v468);
                                                v453 = v465;
                                                if (v463 != (v463 & 0x7FFFFFFFFFFFFFF8))
                                                {
LABEL_872:
                                                  do
                                                  {
                                                    v470 = *((_DWORD *)v453 - 1);
                                                    v453 -= 4;
                                                    *((_DWORD *)v461 - 1) = v470;
                                                    v461 -= 4;
                                                  }
                                                  while (v453 != v455);
                                                }
                                              }
                                              else
                                              {
                                                v460 = 0;
                                                v461 = (char *)(4 * v456);
                                                *(_DWORD *)(4 * v456) = v740;
                                                v454 = 4 * v456 + 4;
                                                if (v453 != v455)
                                                  goto LABEL_534;
                                              }
LABEL_540:
                                              v761 = v461;
                                              v762 = (char *)v454;
                                              v763 = &v460[4 * v459];
                                              if (v455)
                                                operator delete(v455);
LABEL_542:
                                              v762 = (char *)v454;
                                              v471 = v759;
                                              if (v759 < v760)
                                              {
                                                *(_DWORD *)v759 = v741;
                                                v472 = (uint64_t)(v471 + 4);
                                                goto LABEL_563;
                                              }
                                              v473 = (char *)v758;
                                              v474 = v759 - (_BYTE *)v758;
                                              v475 = (v759 - (_BYTE *)v758) >> 2;
                                              v476 = v475 + 1;
                                              if ((unint64_t)(v475 + 1) >> 62)
                                                goto LABEL_820;
                                              v477 = v760 - (_BYTE *)v758;
                                              if ((v760 - (_BYTE *)v758) >> 1 > v476)
                                                v476 = v477 >> 1;
                                              if ((unint64_t)v477 >= 0x7FFFFFFFFFFFFFFCLL)
                                                v478 = 0x3FFFFFFFFFFFFFFFLL;
                                              else
                                                v478 = v476;
                                              if (v478)
                                              {
                                                if (v478 >> 62)
                                                  goto LABEL_813;
                                                v479 = (char *)operator new(4 * v478);
                                                v480 = &v479[4 * v475];
                                                *(_DWORD *)v480 = v741;
                                                v472 = (uint64_t)(v480 + 4);
                                                if (v471 == v473)
                                                  goto LABEL_561;
LABEL_555:
                                                v481 = v471 - 4 - v473;
                                                if (v481 < 0x2C)
                                                  goto LABEL_873;
                                                if ((unint64_t)(v471 - &v479[v474]) < 0x20)
                                                  goto LABEL_873;
                                                v482 = (v481 >> 2) + 1;
                                                v483 = 4 * (v482 & 0x7FFFFFFFFFFFFFF8);
                                                v484 = &v471[-v483];
                                                v480 -= v483;
                                                v485 = &v479[4 * v475 - 16];
                                                v486 = v471 - 16;
                                                v487 = v482 & 0x7FFFFFFFFFFFFFF8;
                                                do
                                                {
                                                  v488 = *(_OWORD *)v486;
                                                  *((_OWORD *)v485 - 1) = *((_OWORD *)v486 - 1);
                                                  *(_OWORD *)v485 = v488;
                                                  v485 -= 32;
                                                  v486 -= 32;
                                                  v487 -= 8;
                                                }
                                                while (v487);
                                                v471 = v484;
                                                if (v482 != (v482 & 0x7FFFFFFFFFFFFFF8))
                                                {
LABEL_873:
                                                  do
                                                  {
                                                    v489 = *((_DWORD *)v471 - 1);
                                                    v471 -= 4;
                                                    *((_DWORD *)v480 - 1) = v489;
                                                    v480 -= 4;
                                                  }
                                                  while (v471 != v473);
                                                }
                                              }
                                              else
                                              {
                                                v479 = 0;
                                                v480 = (char *)(4 * v475);
                                                *(_DWORD *)(4 * v475) = v741;
                                                v472 = 4 * v475 + 4;
                                                if (v471 != v473)
                                                  goto LABEL_555;
                                              }
LABEL_561:
                                              v758 = v480;
                                              v759 = (char *)v472;
                                              v760 = &v479[4 * v478];
                                              if (v473)
                                                operator delete(v473);
LABEL_563:
                                              v759 = (char *)v472;
                                              v490 = v756;
                                              if (v756 >= v757)
                                              {
                                                v491 = (char *)v755;
                                                v492 = v756 - (_BYTE *)v755;
                                                v493 = (v756 - (_BYTE *)v755) >> 2;
                                                v494 = v493 + 1;
                                                if ((unint64_t)(v493 + 1) >> 62)
LABEL_820:
                                                  sub_2394189F8();
                                                v495 = v757 - (_BYTE *)v755;
                                                if ((v757 - (_BYTE *)v755) >> 1 > v494)
                                                  v494 = v495 >> 1;
                                                if ((unint64_t)v495 >= 0x7FFFFFFFFFFFFFFCLL)
                                                  v496 = 0x3FFFFFFFFFFFFFFFLL;
                                                else
                                                  v496 = v494;
                                                if (v496)
                                                {
                                                  if (v496 >> 62)
LABEL_813:
                                                    sub_239418A80();
                                                  v497 = (char *)operator new(4 * v496);
                                                  v498 = &v497[4 * v493];
                                                  *(_DWORD *)v498 = v742;
                                                  v451 = (uint64_t)(v498 + 4);
                                                  if (v490 == v491)
                                                  {
LABEL_581:
                                                    v755 = v498;
                                                    v756 = (char *)v451;
                                                    v757 = &v497[4 * v496];
                                                    if (v491)
                                                      operator delete(v491);
                                                    goto LABEL_519;
                                                  }
                                                }
                                                else
                                                {
                                                  v497 = 0;
                                                  v498 = (char *)(4 * v493);
                                                  *(_DWORD *)(4 * v493) = v742;
                                                  v451 = 4 * v493 + 4;
                                                  if (v490 == v491)
                                                    goto LABEL_581;
                                                }
                                                v499 = v490 - 4 - v491;
                                                if (v499 < 0x2C)
                                                  goto LABEL_874;
                                                if ((unint64_t)(v490 - &v497[v492]) < 0x20)
                                                  goto LABEL_874;
                                                v500 = (v499 >> 2) + 1;
                                                v501 = 4 * (v500 & 0x7FFFFFFFFFFFFFF8);
                                                v502 = &v490[-v501];
                                                v498 -= v501;
                                                v503 = &v497[4 * v493 - 16];
                                                v504 = v490 - 16;
                                                v505 = v500 & 0x7FFFFFFFFFFFFFF8;
                                                do
                                                {
                                                  v506 = *(_OWORD *)v504;
                                                  *((_OWORD *)v503 - 1) = *((_OWORD *)v504 - 1);
                                                  *(_OWORD *)v503 = v506;
                                                  v503 -= 32;
                                                  v504 -= 32;
                                                  v505 -= 8;
                                                }
                                                while (v505);
                                                v490 = v502;
                                                if (v500 != (v500 & 0x7FFFFFFFFFFFFFF8))
                                                {
LABEL_874:
                                                  do
                                                  {
                                                    v507 = *((_DWORD *)v490 - 1);
                                                    v490 -= 4;
                                                    *((_DWORD *)v498 - 1) = v507;
                                                    v498 -= 4;
                                                  }
                                                  while (v490 != v491);
                                                }
                                                goto LABEL_581;
                                              }
                                              *(_DWORD *)v756 = v742;
                                              v451 = (uint64_t)(v490 + 4);
LABEL_519:
                                              v756 = (char *)v451;
                                              v449 += 2;
                                              continue;
                                            }
                                          }
LABEL_509:
                                          v440 = v430 - 4 - v432;
                                          if (v440 < 0x2C)
                                            goto LABEL_875;
                                          if ((unint64_t)(v430 - &v438[v433]) < 0x20)
                                            goto LABEL_875;
                                          v441 = (v440 >> 2) + 1;
                                          v442 = 4 * (v441 & 0x7FFFFFFFFFFFFFF8);
                                          v443 = &v430[-v442];
                                          v439 -= v442;
                                          v444 = &v438[4 * v434 - 16];
                                          v445 = v430 - 16;
                                          v446 = v441 & 0x7FFFFFFFFFFFFFF8;
                                          do
                                          {
                                            v447 = *(_OWORD *)v445;
                                            *((_OWORD *)v444 - 1) = *((_OWORD *)v445 - 1);
                                            *(_OWORD *)v444 = v447;
                                            v444 -= 32;
                                            v445 -= 32;
                                            v446 -= 8;
                                          }
                                          while (v446);
                                          v430 = v443;
                                          if (v441 != (v441 & 0x7FFFFFFFFFFFFFF8))
                                          {
LABEL_875:
                                            do
                                            {
                                              v448 = *((_DWORD *)v430 - 1);
                                              v430 -= 4;
                                              *((_DWORD *)v439 - 1) = v448;
                                              v439 -= 4;
                                            }
                                            while (v430 != v432);
                                          }
                                          goto LABEL_515;
                                        }
LABEL_829:
                                        sub_239418A80();
                                      }
LABEL_832:
                                      sub_2394189F8();
                                    }
                                  }
                                  else
                                  {
                                    v419 = 0;
                                    v420 = (char *)(4 * v415);
                                    *(_DWORD *)(4 * v415) = v744;
                                    v412 = 4 * v415 + 4;
                                    if (v411 == v413)
                                      goto LABEL_494;
                                  }
                                  v421 = v411 - 4 - v413;
                                  if (v421 < 0x2C)
                                    goto LABEL_876;
                                  if ((unint64_t)(v411 - &v419[v414]) < 0x20)
                                    goto LABEL_876;
                                  v422 = (v421 >> 2) + 1;
                                  v423 = 4 * (v422 & 0x7FFFFFFFFFFFFFF8);
                                  v424 = &v411[-v423];
                                  v420 -= v423;
                                  v425 = &v419[4 * v415 - 16];
                                  v426 = v411 - 16;
                                  v427 = v422 & 0x7FFFFFFFFFFFFFF8;
                                  do
                                  {
                                    v428 = *(_OWORD *)v426;
                                    *((_OWORD *)v425 - 1) = *((_OWORD *)v426 - 1);
                                    *(_OWORD *)v425 = v428;
                                    v425 -= 32;
                                    v426 -= 32;
                                    v427 -= 8;
                                  }
                                  while (v427);
                                  v411 = v424;
                                  if (v422 != (v422 & 0x7FFFFFFFFFFFFFF8))
                                  {
LABEL_876:
                                    do
                                    {
                                      v429 = *((_DWORD *)v411 - 1);
                                      v411 -= 4;
                                      *((_DWORD *)v420 - 1) = v429;
                                      v420 -= 4;
                                    }
                                    while (v411 != v413);
                                  }
                                  goto LABEL_494;
                                }
                              }
                              else
                              {
                                v400 = 0;
                                v401 = (char *)(4 * v396);
                                *(_DWORD *)(4 * v396) = v743;
                                v394 = 4 * v396 + 4;
                                if (v393 == v395)
                                  goto LABEL_473;
                              }
                              v402 = v393 - 4 - v395;
                              if (v402 < 0x2C)
                                goto LABEL_877;
                              if ((unint64_t)(v395 - v400) < 0x20)
                                goto LABEL_877;
                              v403 = (v402 >> 2) + 1;
                              v404 = 4 * (v403 & 0x7FFFFFFFFFFFFFF8);
                              v405 = &v393[-v404];
                              v401 -= v404;
                              v406 = &v400[4 * v396 - 16];
                              v407 = v393 - 16;
                              v408 = v403 & 0x7FFFFFFFFFFFFFF8;
                              do
                              {
                                v409 = *(_OWORD *)v407;
                                *(v406 - 1) = *((_OWORD *)v407 - 1);
                                *v406 = v409;
                                v406 -= 2;
                                v407 -= 32;
                                v408 -= 8;
                              }
                              while (v408);
                              v393 = v405;
                              if (v403 != (v403 & 0x7FFFFFFFFFFFFFF8))
                              {
LABEL_877:
                                do
                                {
                                  v410 = *((_DWORD *)v393 - 1);
                                  v393 -= 4;
                                  *((_DWORD *)v401 - 1) = v410;
                                  v401 -= 4;
                                }
                                while (v393 != v395);
                              }
                              goto LABEL_473;
                            }
LABEL_445:
                            v383 = v373 - 4 - v375;
                            if (v383 < 0x2C)
                              goto LABEL_878;
                            if ((unint64_t)(v373 - &v381[v376]) < 0x20)
                              goto LABEL_878;
                            v384 = (v383 >> 2) + 1;
                            v385 = 4 * (v384 & 0x7FFFFFFFFFFFFFF8);
                            v386 = &v373[-v385];
                            v382 -= v385;
                            v387 = &v381[4 * v377 - 16];
                            v388 = (float32x4_t *)(v373 - 16);
                            v389 = v384 & 0x7FFFFFFFFFFFFFF8;
                            do
                            {
                              v62 = v388[-1];
                              v390 = *v388;
                              *((float32x4_t *)v387 - 1) = v62;
                              *(float32x4_t *)v387 = v390;
                              v387 -= 32;
                              v388 -= 2;
                              v389 -= 8;
                            }
                            while (v389);
                            v373 = v386;
                            if (v384 != (v384 & 0x7FFFFFFFFFFFFFF8))
                            {
LABEL_878:
                              do
                              {
                                v391 = *((_DWORD *)v373 - 1);
                                v373 -= 4;
                                *((_DWORD *)v382 - 1) = v391;
                                v382 -= 4;
                              }
                              while (v373 != v375);
                            }
                            goto LABEL_451;
                          }
LABEL_828:
                          sub_239418A80();
                        }
LABEL_831:
                        sub_2394189F8();
                      }
                    }
                    else
                    {
                      v362 = 0;
                      v363 = (char *)(4 * v358);
                      *(_DWORD *)(4 * v358) = v744;
                      v355 = 4 * v358 + 4;
                      if (v354 == v356)
                        goto LABEL_430;
                    }
                    v364 = v354 - 4 - v356;
                    if (v364 < 0x2C)
                      goto LABEL_879;
                    if ((unint64_t)(v354 - &v362[v357]) < 0x20)
                      goto LABEL_879;
                    v365 = (v364 >> 2) + 1;
                    v366 = 4 * (v365 & 0x7FFFFFFFFFFFFFF8);
                    v367 = &v354[-v366];
                    v363 -= v366;
                    v368 = &v362[4 * v358 - 16];
                    v369 = (float32x4_t *)(v354 - 16);
                    v370 = v365 & 0x7FFFFFFFFFFFFFF8;
                    do
                    {
                      v62 = v369[-1];
                      v371 = *v369;
                      *((float32x4_t *)v368 - 1) = v62;
                      *(float32x4_t *)v368 = v371;
                      v368 -= 32;
                      v369 -= 2;
                      v370 -= 8;
                    }
                    while (v370);
                    v354 = v367;
                    if (v365 != (v365 & 0x7FFFFFFFFFFFFFF8))
                    {
LABEL_879:
                      do
                      {
                        v372 = *((_DWORD *)v354 - 1);
                        v354 -= 4;
                        *((_DWORD *)v363 - 1) = v372;
                        v363 -= 4;
                      }
                      while (v354 != v356);
                    }
                    goto LABEL_430;
                  }
                }
                else
                {
                  v343 = 0;
                  v344 = (char *)(4 * v339);
                  *(_DWORD *)(4 * v339) = v743;
                  v337 = 4 * v339 + 4;
                  if (v336 == v338)
                    goto LABEL_409;
                }
                v345 = v336 - 4 - v338;
                if (v345 < 0x2C)
                  goto LABEL_880;
                if ((unint64_t)(v338 - v343) < 0x20)
                  goto LABEL_880;
                v346 = (v345 >> 2) + 1;
                v347 = 4 * (v346 & 0x7FFFFFFFFFFFFFF8);
                v348 = &v336[-v347];
                v344 -= v347;
                v349 = (float32x4_t *)&v343[4 * v339 - 16];
                v350 = (float32x4_t *)(v336 - 16);
                v351 = v346 & 0x7FFFFFFFFFFFFFF8;
                do
                {
                  v62 = v350[-1];
                  v352 = *v350;
                  v349[-1] = v62;
                  *v349 = v352;
                  v349 -= 2;
                  v350 -= 2;
                  v351 -= 8;
                }
                while (v351);
                v336 = v348;
                if (v346 != (v346 & 0x7FFFFFFFFFFFFFF8))
                {
LABEL_880:
                  do
                  {
                    v353 = *((_DWORD *)v336 - 1);
                    v336 -= 4;
                    *((_DWORD *)v344 - 1) = v353;
                    v344 -= 4;
                  }
                  while (v336 != v338);
                }
                goto LABEL_409;
              }
              v329 = (v765 - v764) >> 2;
              if (v329 <= 1)
                v330 = 1;
              else
                v330 = (v765 - v764) >> 2;
              v331 = 0.0;
              v332 = (float *)v764;
              do
              {
                v333 = *v332++;
                v331 = v331 + v333;
                --v330;
              }
              while (v330);
              v334 = v331 / (float)v329;
              v771 = v770;
              v768 = v767;
              v765 = v764;
              if ((v68 & 1) != 0)
                goto LABEL_390;
LABEL_387:
              if ((v69 & 1) != 0)
                goto LABEL_454;
LABEL_583:
              v508 = 0.0;
              v509 = 0.0;
              if (v762 != v761)
              {
                v510 = (v762 - v761) >> 2;
                if (v510 <= 1)
                  v511 = 1;
                else
                  v511 = (v762 - v761) >> 2;
                v512 = (float *)v761;
                do
                {
                  v513 = *v512++;
                  v509 = v509 + v513;
                  --v511;
                }
                while (v511);
                v509 = v509 / (float)v510;
              }
              if (v759 != v758)
              {
                v514 = (v759 - (_BYTE *)v758) >> 2;
                if (v514 <= 1)
                  v515 = 1;
                else
                  v515 = (v759 - (_BYTE *)v758) >> 2;
                v516 = 0.0;
                v517 = (float *)v758;
                do
                {
                  v518 = *v517++;
                  v516 = v516 + v518;
                  --v515;
                }
                while (v515);
                v508 = v516 / (float)v514;
              }
              if (v756 == v755)
              {
                v15 = 0.0;
              }
              else
              {
                v519 = (v756 - (_BYTE *)v755) >> 2;
                if (v519 <= 1)
                  v520 = 1;
                else
                  v520 = (v756 - (_BYTE *)v755) >> 2;
                v521 = 0.0;
                v522 = (float *)v755;
                do
                {
                  v523 = *v522++;
                  v521 = v521 + v523;
                  --v520;
                }
                while (v520);
                v15 = v521 / (float)v519;
              }
              v762 = v761;
              v759 = (char *)v758;
              v756 = (char *)v755;
              v65.f32[0] = (float)((float)(v317 * 0.587) + (float)(v318 * 0.299)) + (float)(v334 * 0.114);
              v65.f32[1] = (float)((float)((float)(v317 * -0.33126) + (float)(v318 * -0.16874)) + (float)(v334 * 0.5))
                         + 128.0;
              v65.f32[2] = (float)((float)((float)(v317 * -0.41869) + (float)(v318 * 0.5)) + (float)(v334 * -0.081312))
                         + 128.0;
              v64.f32[0] = (float)((float)(v508 * 0.587) + (float)(v509 * 0.299)) + (float)(v15 * 0.114);
              v524 = (float)((float)((float)(v508 * -0.33126) + (float)(v509 * -0.16874)) + (float)(v15 * 0.5)) + 128.0;
              v14 = v508 * -0.41869;
              v13.f32[0] = (float)((float)(v14 + (float)(v509 * 0.5)) + (float)(v15 * -0.081312)) + 128.0;
              v64.f32[1] = v524;
              v64.i32[2] = v13.i32[0];
              v525 = v752;
              v526 = v718;
              v8 = v738;
              v9 = v734;
              if ((*((_QWORD *)v752 + (v718 >> 6)) & (1 << v718)) != 0)
                goto LABEL_652;
              v528 = (char *)a7[1];
              v527 = a7[2];
              v723 = v64;
              v726 = v65;
              if ((unint64_t)v528 < v527)
              {
                v13 = vsubq_f32(v64, v65);
                *((_DWORD *)v528 + 2) = v13.i32[2];
                *(_QWORD *)v528 = v13.i64[0];
                v529 = a6;
                a7[1] = v528 + 12;
                v531 = a6[1];
                v530 = a6[2];
                if (v531 < v530)
                  goto LABEL_608;
LABEL_627:
                v549 = *v529;
                v550 = 0xAAAAAAAAAAAAAAABLL * ((v531 - *v529) >> 2);
                v551 = v550 + 1;
                if (v550 + 1 > 0x1555555555555555)
                  sub_2394189F8();
                v552 = 0xAAAAAAAAAAAAAAABLL * ((v530 - v549) >> 2);
                if (2 * v552 > v551)
                  v551 = 2 * v552;
                if (v552 >= 0xAAAAAAAAAAAAAAALL)
                  v553 = 0x1555555555555555;
                else
                  v553 = v551;
                if (v553 > 0x1555555555555555)
                  sub_239418A80();
                v554 = (char *)operator new(12 * v553);
                v555 = &v554[12 * v550];
                *(_DWORD *)v555 = *v714;
                *((_DWORD *)v555 + 1) = v718;
                *((_DWORD *)v555 + 2) = 1065353216;
                for (n = v555; v531 != v549; *((_DWORD *)n + 2) = v558)
                {
                  v557 = *(_QWORD *)(v531 - 12);
                  v531 -= 12;
                  v558 = *((_DWORD *)v531 + 2);
                  *(_QWORD *)(n - 12) = v557;
                  n -= 12;
                }
                v530 = &v554[12 * v553];
                v532 = v555 + 12;
                v529 = a6;
                *a6 = n;
                a6[1] = v555 + 12;
                a6[2] = v530;
                if (v549)
                {
                  operator delete(v549);
                  v529 = a6;
                  v530 = a6[2];
                }
                v64 = v723;
                v65 = v726;
                v529[1] = v532;
                if (v532 >= v530)
                  goto LABEL_639;
LABEL_609:
                v533 = v714;
                v534 = v707;
                *(_DWORD *)v532 = *v714;
                *((_DWORD *)v532 + 1) = v707;
                *((_DWORD *)v532 + 2) = -1082130432;
                v535 = v532 + 12;
                goto LABEL_651;
              }
              v536 = (char *)*a7;
              v537 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v528[-*a7] >> 2);
              v538 = v537 + 1;
              if (v537 + 1 > 0x1555555555555555)
                sub_2394189F8();
              v539 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v527 - (_QWORD)v536) >> 2);
              if (2 * v539 > v538)
                v538 = 2 * v539;
              if (v539 >= 0xAAAAAAAAAAAAAAALL)
                v540 = 0x1555555555555555;
              else
                v540 = v538;
              if (v540)
              {
                if (v540 > 0x1555555555555555)
                  sub_239418A80();
                v541 = (char *)operator new(12 * v540);
                v64 = v723;
                v65 = v726;
              }
              else
              {
                v541 = 0;
              }
              v542 = &v541[12 * v537];
              v13 = vsubq_f32(v64, v65);
              *(_QWORD *)v542 = v13.i64[0];
              *((_DWORD *)v542 + 2) = v13.i32[2];
              v543 = v542;
              if (v528 == v536)
              {
                v546 = a7;
                v547 = v542 + 12;
                *a7 = v542;
                a7[1] = v542 + 12;
                a7[2] = &v541[12 * v540];
                if (v528)
                  goto LABEL_623;
LABEL_625:
                v548 = v546;
                goto LABEL_626;
              }
              do
              {
                v544 = *(_QWORD *)(v528 - 12);
                v528 -= 12;
                v545 = *((_DWORD *)v528 + 2);
                *(_QWORD *)(v543 - 12) = v544;
                v543 -= 12;
                *((_DWORD *)v543 + 2) = v545;
              }
              while (v528 != v536);
              v546 = a7;
              v528 = (char *)*a7;
              v547 = v542 + 12;
              *a7 = v543;
              a7[1] = v542 + 12;
              a7[2] = &v541[12 * v540];
              if (!v528)
                goto LABEL_625;
LABEL_623:
              operator delete(v528);
              v64 = v723;
              v65 = v726;
              v548 = a7;
LABEL_626:
              v529 = a6;
              v526 = v718;
              v548[1] = v547;
              v531 = a6[1];
              v530 = a6[2];
              if (v531 >= v530)
                goto LABEL_627;
LABEL_608:
              *(_DWORD *)v531 = *v714;
              *((_DWORD *)v531 + 1) = v526;
              *((_DWORD *)v531 + 2) = 1065353216;
              v532 = v531 + 12;
              v529[1] = v532;
              if (v532 < v530)
                goto LABEL_609;
LABEL_639:
              v559 = *v529;
              v560 = 0xAAAAAAAAAAAAAAABLL * ((v532 - *v529) >> 2);
              v561 = v560 + 1;
              if (v560 + 1 > 0x1555555555555555)
                sub_2394189F8();
              v562 = 0xAAAAAAAAAAAAAAABLL * ((v530 - v559) >> 2);
              if (2 * v562 > v561)
                v561 = 2 * v562;
              if (v562 >= 0xAAAAAAAAAAAAAAALL)
                v563 = 0x1555555555555555;
              else
                v563 = v561;
              if (v563 > 0x1555555555555555)
                sub_239418A80();
              v564 = (char *)operator new(12 * v563);
              v565 = &v564[12 * v560];
              *(_DWORD *)v565 = *v714;
              *((_DWORD *)v565 + 1) = v707;
              *((_DWORD *)v565 + 2) = -1082130432;
              for (ii = v565; v532 != v559; *((_DWORD *)ii + 2) = v568)
              {
                v567 = *(_QWORD *)(v532 - 12);
                v532 -= 12;
                v568 = *((_DWORD *)v532 + 2);
                *(_QWORD *)(ii - 12) = v567;
                ii -= 12;
              }
              v569 = &v564[12 * v563];
              v535 = v565 + 12;
              v529 = a6;
              *a6 = ii;
              a6[1] = v565 + 12;
              a6[2] = v569;
              if (v559)
              {
                operator delete(v559);
                v529 = a6;
              }
              v533 = v714;
              v534 = v707;
              v64 = v723;
              v65 = v726;
LABEL_651:
              v529[1] = v535;
              v525 = v752;
              *((_QWORD *)v752 + (v718 >> 6)) |= 1 << v718;
              *(_QWORD *)((char *)v525 + ((v534 >> 3) & 0x1FFFFFF8)) |= 1 << v534;
              ++*v533;
LABEL_652:
              v570 = v715;
              if ((v525[v715 >> 6] & (1 << v715)) != 0)
              {
                v571 = __p;
                if (__p)
                  goto LABEL_654;
                goto LABEL_655;
              }
              v575 = (char *)a7[1];
              v574 = a7[2];
              if ((unint64_t)v575 >= v574)
              {
                v579 = (char *)*a7;
                v580 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v575[-*a7] >> 2);
                v581 = v580 + 1;
                if (v580 + 1 > 0x1555555555555555)
                  sub_2394189F8();
                v582 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v574 - (_QWORD)v579) >> 2);
                if (2 * v582 > v581)
                  v581 = 2 * v582;
                if (v582 >= 0xAAAAAAAAAAAAAAALL)
                  v583 = 0x1555555555555555;
                else
                  v583 = v581;
                if (v583)
                {
                  v724 = v64;
                  v727 = v65;
                  if (v583 > 0x1555555555555555)
                    sub_239418A80();
                  v584 = (char *)operator new(12 * v583);
                  v570 = v715;
                  v64 = v724;
                  v65 = v727;
                }
                else
                {
                  v584 = 0;
                }
                v585 = &v584[12 * v580];
                v13 = vsubq_f32(v64, v65);
                *(_QWORD *)v585 = v13.i64[0];
                *((_DWORD *)v585 + 2) = v13.i32[2];
                v586 = v585;
                if (v575 == v579)
                {
                  v589 = a7;
                  v590 = v585 + 12;
                  *a7 = v585;
                  a7[1] = v585 + 12;
                  a7[2] = &v584[12 * v583];
                  if (!v575)
                    goto LABEL_680;
LABEL_677:
                  operator delete(v575);
                  v570 = v715;
                  v576 = a6;
                  a7[1] = v590;
                  v578 = a6[1];
                  v577 = a6[2];
                  if (v578 >= v577)
                    goto LABEL_681;
                }
                else
                {
                  do
                  {
                    v587 = *(_QWORD *)(v575 - 12);
                    v575 -= 12;
                    v588 = *((_DWORD *)v575 + 2);
                    *(_QWORD *)(v586 - 12) = v587;
                    v586 -= 12;
                    *((_DWORD *)v586 + 2) = v588;
                  }
                  while (v575 != v579);
                  v589 = a7;
                  v575 = (char *)*a7;
                  v590 = v585 + 12;
                  *a7 = v586;
                  a7[1] = v585 + 12;
                  a7[2] = &v584[12 * v583];
                  if (v575)
                    goto LABEL_677;
LABEL_680:
                  v576 = a6;
                  v589[1] = v590;
                  v578 = a6[1];
                  v577 = a6[2];
                  if (v578 >= v577)
                    goto LABEL_681;
                }
LABEL_678:
                *(_DWORD *)v578 = *v714;
                *((_DWORD *)v578 + 1) = v570;
                *((_DWORD *)v578 + 2) = 1065353216;
                v591 = v578 + 12;
                goto LABEL_692;
              }
              v13 = vsubq_f32(v64, v65);
              *((_DWORD *)v575 + 2) = v13.i32[2];
              *(_QWORD *)v575 = v13.i64[0];
              v576 = a6;
              a7[1] = v575 + 12;
              v578 = a6[1];
              v577 = a6[2];
              if (v578 < v577)
                goto LABEL_678;
LABEL_681:
              v592 = *v576;
              v593 = 0xAAAAAAAAAAAAAAABLL * ((v578 - *v576) >> 2);
              v594 = v593 + 1;
              if (v593 + 1 > 0x1555555555555555)
                sub_2394189F8();
              v595 = 0xAAAAAAAAAAAAAAABLL * ((v577 - v592) >> 2);
              if (2 * v595 > v594)
                v594 = 2 * v595;
              if (v595 >= 0xAAAAAAAAAAAAAAALL)
                v596 = 0x1555555555555555;
              else
                v596 = v594;
              if (v596 > 0x1555555555555555)
                sub_239418A80();
              v597 = (char *)operator new(12 * v596);
              v598 = &v597[12 * v593];
              *(_DWORD *)v598 = *v714;
              *((_DWORD *)v598 + 1) = v715;
              *((_DWORD *)v598 + 2) = 1065353216;
              for (jj = v598; v578 != v592; *((_DWORD *)jj + 2) = v601)
              {
                v600 = *(_QWORD *)(v578 - 12);
                v578 -= 12;
                v601 = *((_DWORD *)v578 + 2);
                *(_QWORD *)(jj - 12) = v600;
                jj -= 12;
              }
              v577 = &v597[12 * v596];
              v591 = v598 + 12;
              v576 = a6;
              *a6 = jj;
              a6[1] = v598 + 12;
              a6[2] = v577;
              if (v592)
              {
                operator delete(v592);
                v576 = a6;
                v577 = a6[2];
              }
LABEL_692:
              v576[1] = v591;
              if (v591 >= v577)
              {
                v605 = *v576;
                v606 = 0xAAAAAAAAAAAAAAABLL * ((v591 - *v576) >> 2);
                v607 = v606 + 1;
                if (v606 + 1 > 0x1555555555555555)
                  sub_2394189F8();
                v608 = 0xAAAAAAAAAAAAAAABLL * ((v577 - v605) >> 2);
                if (2 * v608 > v607)
                  v607 = 2 * v608;
                if (v608 >= 0xAAAAAAAAAAAAAAALL)
                  v609 = 0x1555555555555555;
                else
                  v609 = v607;
                if (v609 > 0x1555555555555555)
                  sub_239418A80();
                v610 = (char *)operator new(12 * v609);
                v611 = &v610[12 * v606];
                *(_DWORD *)v611 = *v714;
                *((_DWORD *)v611 + 1) = v711;
                *((_DWORD *)v611 + 2) = -1082130432;
                for (kk = v611; v591 != v605; *((_DWORD *)kk + 2) = v614)
                {
                  v613 = *(_QWORD *)(v591 - 12);
                  v591 -= 12;
                  v614 = *((_DWORD *)v591 + 2);
                  *(_QWORD *)(kk - 12) = v613;
                  kk -= 12;
                }
                v615 = &v610[12 * v609];
                v604 = v611 + 12;
                v576 = a6;
                *a6 = kk;
                a6[1] = v611 + 12;
                a6[2] = v615;
                if (v605)
                {
                  operator delete(v605);
                  v576 = a6;
                }
                v602 = v714;
                v603 = v711;
              }
              else
              {
                v602 = v714;
                v603 = v711;
                *(_DWORD *)v591 = *v714;
                *((_DWORD *)v591 + 1) = v711;
                *((_DWORD *)v591 + 2) = -1082130432;
                v604 = v591 + 12;
              }
              v576[1] = v604;
              v616 = (char *)v752;
              *((_QWORD *)v752 + (v715 >> 6)) |= 1 << v715;
              *(_QWORD *)&v616[(v603 >> 3) & 0x1FFFFFF8] |= 1 << v603;
              ++*v602;
              v571 = __p;
              if (__p)
LABEL_654:
                operator delete(v571);
LABEL_655:
              if (v749)
                operator delete(v749);
              v23 = a3;
              v27 = a4;
              v24 = a2;
              v29 = v706;
              v32 = v705;
LABEL_658:
              v572 = (_QWORD *)v31[1];
              if (!v572)
                goto LABEL_788;
              do
              {
LABEL_659:
                v573 = v572;
                v572 = (_QWORD *)*v572;
              }
              while (v572);
LABEL_15:
              v31 = v573;
              if (v573 == v32)
              {
                v26 = *v24;
                v25 = v24[1];
                goto LABEL_12;
              }
              goto LABEL_16;
            }
          }
        }
LABEL_52:
        v11 = v55 == v41;
        v56 = v718;
        if (v11)
          v53 = v51[2];
        goto LABEL_55;
      }
      if (*v50 == v41)
      {
        v53 = *v51;
        v52 = 0xFFFFFFFFLL;
        v54 = v50[1];
        if (v54 == (_DWORD)v29)
          goto LABEL_51;
      }
      else
      {
        v53 = 0xFFFFFFFFLL;
        v52 = 0xFFFFFFFFLL;
        v54 = v50[1];
        if (v54 == (_DWORD)v29)
          goto LABEL_51;
      }
LABEL_43:
      if (v54 == v41)
        v53 = v51[1];
      v55 = v50[2];
      if (v55 == (_DWORD)v29)
        goto LABEL_46;
      goto LABEL_52;
    }
LABEL_40:
    v718 = v45[2];
    goto LABEL_41;
  }
LABEL_791:
  if (v752)
    operator delete(v752);
  if (v755)
  {
    v756 = (char *)v755;
    operator delete(v755);
  }
  if (v758)
  {
    v759 = (char *)v758;
    operator delete(v758);
  }
  if (v761)
  {
    v762 = v761;
    operator delete(v761);
  }
  if (v764)
  {
    v765 = v764;
    operator delete(v764);
  }
  if (v767)
  {
    v768 = v767;
    operator delete(v767);
  }
  if (v770)
  {
    v771 = v770;
    operator delete(v770);
  }
}

void sub_23952B07C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,void *a52,uint64_t a53,uint64_t a54,void *__p,uint64_t a56,uint64_t a57,void *a58,uint64_t a59,uint64_t a60,void *a61,uint64_t a62)
{
  uint64_t v62;
  void *v64;
  void *v65;
  void *v66;
  void *v67;
  void *v68;
  void *v69;

  if (__p)
  {
    operator delete(__p);
    v64 = a58;
    if (!a58)
    {
LABEL_3:
      v65 = a61;
      if (!a61)
        goto LABEL_4;
      goto LABEL_11;
    }
  }
  else
  {
    v64 = a58;
    if (!a58)
      goto LABEL_3;
  }
  operator delete(v64);
  v65 = a61;
  if (!a61)
  {
LABEL_4:
    v66 = *(void **)(v62 - 248);
    if (!v66)
      goto LABEL_5;
    goto LABEL_12;
  }
LABEL_11:
  operator delete(v65);
  v66 = *(void **)(v62 - 248);
  if (!v66)
  {
LABEL_5:
    v67 = *(void **)(v62 - 224);
    if (!v67)
      goto LABEL_6;
    goto LABEL_13;
  }
LABEL_12:
  *(_QWORD *)(v62 - 240) = v66;
  operator delete(v66);
  v67 = *(void **)(v62 - 224);
  if (!v67)
  {
LABEL_6:
    v68 = *(void **)(v62 - 200);
    if (!v68)
      goto LABEL_7;
    goto LABEL_14;
  }
LABEL_13:
  *(_QWORD *)(v62 - 216) = v67;
  operator delete(v67);
  v68 = *(void **)(v62 - 200);
  if (!v68)
  {
LABEL_7:
    v69 = *(void **)(v62 - 176);
    if (!v69)
      goto LABEL_8;
    goto LABEL_15;
  }
LABEL_14:
  *(_QWORD *)(v62 - 192) = v68;
  operator delete(v68);
  v69 = *(void **)(v62 - 176);
  if (!v69)
LABEL_8:
    _Unwind_Resume(exception_object);
LABEL_15:
  *(_QWORD *)(v62 - 168) = v69;
  operator delete(v69);
  _Unwind_Resume(exception_object);
}

signed int sub_23952B290@<W0>(uint64_t a1@<X0>, float *a2@<X8>, float a3@<S0>, float a4@<S1>)
{
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  int v11;
  signed int v12;
  int v13;
  int v14;
  uint64_t v15;
  signed int result;
  int v17;
  float v18;
  BOOL v19;
  int v20;
  float v21;
  float v22;
  float v23;
  float v24;
  unsigned int v25;
  int v26;
  int v27;
  float v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  int v32;
  float v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  float v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  float v41;

  v4 = floorf(a3);
  v5 = floorf(a4);
  v6 = v5 + 1.0;
  v7 = v4 + 1.0;
  v8 = a3 - v4;
  v9 = a4 - v5;
  v10 = 1.0 - v9;
  v12 = *(_DWORD *)(a1 + 112);
  v11 = *(_DWORD *)(a1 + 116);
  v13 = *(_DWORD *)(a1 + 120);
  v14 = *(_DWORD *)(a1 + 124);
  v15 = *(_QWORD *)(a1 + 80);
  result = vcvtms_s32_f32(a3);
  v17 = vcvtms_s32_f32(a4);
  if (result < 0 || v12 <= result)
  {
    v26 = (int)v6;
    v27 = 1;
    v21 = 0.0;
    v22 = 0.0;
    v23 = 0.0;
    v24 = 0.0;
  }
  else
  {
    v18 = 1.0 - v8;
    v19 = v17 < 0 || v11 <= v17;
    v20 = v19;
    v21 = 0.0;
    v22 = 0.0;
    v23 = 0.0;
    v24 = 0.0;
    if (!v19)
    {
      v25 = v14 * v17 + v13 * result;
      LOBYTE(v21) = *(_BYTE *)(v15 + v25);
      v21 = (float)((float)LODWORD(v21) * (float)(v18 * v10)) + 0.0;
      LOBYTE(v22) = *(_BYTE *)(v15 + v25 + 1);
      v22 = (float)((float)LODWORD(v22) * (float)(v18 * v10)) + 0.0;
      LOBYTE(v23) = *(_BYTE *)(v15 + v25 + 2);
      v23 = (float)((float)LODWORD(v23) * (float)(v18 * v10)) + 0.0;
      v24 = (float)(v18 * v10) + 0.0;
    }
    v26 = (int)v6;
    v27 = 1;
    if (((int)v6 & 0x80000000) == 0 && v11 > v26)
    {
      v28 = v18 * v9;
      v29 = v14 * v26 + v13 * result;
      LOBYTE(v18) = *(_BYTE *)(v15 + v29);
      *(float *)&v30 = (float)LODWORD(v18);
      v21 = v21 + (float)(*(float *)&v30 * v28);
      result = v29 + 1;
      LOBYTE(v30) = *(_BYTE *)(v15 + v29 + 1);
      *(float *)&v31 = (float)v30;
      v22 = v22 + (float)(*(float *)&v31 * v28);
      LOBYTE(v31) = *(_BYTE *)(v15 + v29 + 2);
      v23 = v23 + (float)((float)v31 * v28);
      v24 = v24 + v28;
      v27 = v20;
    }
  }
  v32 = (int)v7;
  if (((int)v7 & 0x80000000) == 0 && v12 > v32)
  {
    if (v17 < 0 || v11 <= v17)
    {
      v27 = 1;
      if (v26 < 0)
        goto LABEL_24;
    }
    else
    {
      v33 = v8 * v10;
      v34 = v14 * v17 + v13 * v32;
      LOBYTE(v7) = *(_BYTE *)(v15 + v34);
      *(float *)&v35 = (float)LODWORD(v7);
      v21 = v21 + (float)(*(float *)&v35 * v33);
      LOBYTE(v35) = *(_BYTE *)(v15 + v34 + 1);
      *(float *)&v36 = (float)v35;
      v22 = v22 + (float)(*(float *)&v36 * v33);
      LOBYTE(v36) = *(_BYTE *)(v15 + v34 + 2);
      v23 = v23 + (float)((float)v36 * v33);
      v24 = v24 + v33;
      if (v26 < 0)
        goto LABEL_24;
    }
    if (v11 > v26)
    {
      v37 = v8 * v9;
      v38 = v14 * v26 + v13 * v32;
      LOBYTE(v9) = *(_BYTE *)(v15 + v38);
      *(float *)&v39 = (float)LODWORD(v9);
      v21 = v21 + (float)(*(float *)&v39 * v37);
      LOBYTE(v39) = *(_BYTE *)(v15 + v38 + 1);
      *(float *)&v40 = (float)v39;
      v22 = v22 + (float)(*(float *)&v40 * v37);
      LOBYTE(v40) = *(_BYTE *)(v15 + v38 + 2);
      v23 = v23 + (float)((float)v40 * v37);
      v24 = v24 + v37;
      if (!v27)
        goto LABEL_26;
    }
  }
LABEL_24:
  if (v24 > 0.00000011921)
  {
    v41 = 1.0 / v24;
    *a2 = v41 * v21;
    a2[1] = v41 * v22;
    a2[2] = v41 * v23;
    return result;
  }
LABEL_26:
  *a2 = v21;
  a2[1] = v22;
  a2[2] = v23;
  return result;
}

void sub_23952B4A0(uint64_t a1, void *a2, void *a3, void *a4, void *a5, void *a6, uint64_t a7, int a8)
{
  id v15;
  id v16;
  id v17;
  id v18;
  uint64_t *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  id v25;

  v25 = a2;
  v15 = a3;
  v16 = a4;
  v17 = a5;
  v18 = a6;
  v19 = sub_23953674C(a1, 5);
  sub_2397A9494((uint64_t)v19);
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  v21 = (void *)objc_opt_new();
  objc_msgSend(v21, "colorAttachments");
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v22, "objectAtIndexedSubscript:", 0);
  v23 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v23, "setTexture:", v18);
  objc_msgSend(v23, "setLoadAction:", 2);
  objc_msgSend(v23, "setStoreAction:", 1);
  objc_msgSend(v23, "setClearColor:", 0.0, 0.0, 0.0, 0.0);

  objc_msgSend(v21, "setRenderTargetWidth:", *(_QWORD *)a7);
  objc_msgSend(v21, "setRenderTargetHeight:", *(unsigned int *)(a7 + 4));
  objc_msgSend(v21, "setRenderTargetArrayLength:", 1);
  objc_msgSend(v21, "setDefaultRasterSampleCount:", 1);
  objc_msgSend(v25, "renderCommandEncoderWithDescriptor:", v21);
  v24 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v24, "setRenderPipelineState:", v20);
  objc_msgSend(v24, "setVertexBuffer:offset:atIndex:", v15, 0, 0);
  objc_msgSend(v24, "setVertexBuffer:offset:atIndex:", v17, 0, 1);
  objc_msgSend(v24, "drawIndexedPrimitives:indexCount:indexType:indexBuffer:indexBufferOffset:", 3, (3 * a8), 1, v16, 0);
  objc_msgSend(v24, "endEncoding");

}

void sub_23952B66C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_23952B6D0(uint64_t a1, void *a2, void *a3, void *a4, uint64_t *a5)
{
  id v9;
  id v10;
  id v11;
  uint64_t *v12;
  void *v13;
  unint64_t v14;
  unint64_t v15;
  void *v16;
  uint64_t v17;
  _QWORD v18[3];
  _QWORD v19[3];

  v9 = a2;
  v10 = a3;
  v11 = a4;
  v12 = sub_239536660(a1, 31);
  sub_2397A9494((uint64_t)v12);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v14 = objc_msgSend(v13, "threadExecutionWidth");
  v15 = objc_msgSend(v13, "maxTotalThreadsPerThreadgroup");
  v17 = *a5;
  objc_msgSend(v9, "computeCommandEncoder");
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v16, "setTexture:atIndex:", v10, 0);
  objc_msgSend(v16, "setBuffer:offset:atIndex:", v11, 0, 0);
  objc_msgSend(v16, "setBytes:length:atIndex:", a5, 8, 1);
  objc_msgSend(v16, "setComputePipelineState:", v13);
  v19[0] = ((int)v14 + (int)v17 - 1) / v14;
  v19[1] = ((v15 / v14) + HIDWORD(v17) - 1) / (v15 / v14);
  v19[2] = 1;
  v18[0] = v14;
  v18[1] = v15 / v14;
  v18[2] = 1;
  objc_msgSend(v16, "dispatchThreadgroups:threadsPerThreadgroup:", v19, v18);
  objc_msgSend(v16, "endEncoding");

}

void sub_23952B81C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

uint64_t sub_23952B87C(uint64_t a1, uint64_t a2, _QWORD *a3, int a4, unsigned int a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  char *v17;
  __int128 v18;
  __int128 v19;
  _QWORD *v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *p_shared_owners;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  __int128 v34;
  __int128 v35;
  _QWORD *v36;
  uint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  void *v52;
  char *v53;
  char *v54;
  char *v55;
  char *v56;
  char *v57;
  char *v58;
  uint64_t v60;
  uint64_t v61;
  unsigned int v62;
  long double v63;
  void *v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  id v70;
  uint64_t v71;
  uint64_t v72;
  unsigned int *v73;
  unsigned int *v74;
  int v75;
  uint64_t v76;
  unsigned int v77;
  unsigned int v78;
  _DWORD *v79;
  id v80;
  void *v81;
  uint64_t v82;
  _BYTE *v83;
  int v84;
  void *v85;
  id v86;
  id v87;
  id v88;
  id v89;
  void *v90;
  int v91;
  int v92;
  unsigned int v93;
  double v94;
  unsigned int v95;
  void *v96;
  id v97;
  const void *v98;
  char *v99;
  char *v100;
  void *v101;
  void *v102;
  char *v103;
  char *v104;
  void *v105;
  void *v106;
  int v107;
  void *v108;
  void *v109;
  int v110;
  unint64_t v111;
  void *v112;
  void *v113;
  void *v114;
  void *v115;
  id v116;
  void *v117;
  id v118;
  void *v119;
  _QWORD *v120;
  _BYTE *v121;
  const void **v122;
  uint64_t v123;
  void *context;
  uint64_t v126;
  void *v127;
  uint64_t v128;
  int v129;
  void *v130[2];
  char v131;
  void *v132[2];
  char v133;
  void *v134;
  char *v135;
  uint64_t v136;
  void *v137;
  char *v138;
  uint64_t v139;
  void *__p;
  char *v141;
  char *v142;
  unsigned int v143;
  char *v144;
  char *v145;
  char *v146;
  char *v147;
  char *v148;
  char *v149;
  char *v150;
  char *v151;
  uint64_t v152;
  void *v153;
  void *v154;
  uint64_t v155;
  int v156;
  void *v157;
  void *v158;
  uint64_t v159;
  char *v160;
  char *v161;
  uint64_t v162;
  __int128 v163;
  std::__shared_weak_count *v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  std::__shared_weak_count *v168;
  __int128 v169;
  __int128 v170;
  uint64_t v171;
  uint64_t v172;
  _QWORD v173[2];
  unint64_t v174[44];
  _BYTE v175[24];
  _BYTE *v176;
  _QWORD v177[71];
  _BYTE v178[24];
  _BYTE *v179;
  _QWORD v180[71];
  _BYTE v181[24];
  _BYTE *v182;
  _BYTE v183[568];
  uint64_t v184;

  v184 = *MEMORY[0x24BDAC8D0];
  v173[0] = a6;
  v173[1] = a7;
  v171 = a9;
  v172 = a10;
  context = (void *)MEMORY[0x23B83EC40]();
  kdebug_trace();
  if ((sub_2396FD7B0((uint64_t)a3) & 1) != 0)
  {
    v14 = 0;
    goto LABEL_86;
  }
  v126 = a1;
  v123 = (uint64_t)a3;
  sub_2396FD800(a3, (uint64_t)v181);
  v180[0] = 0x42C8000000000000;
  sub_2396FCC68(v183, 100, v181, v180, 1.0);
  v15 = v182;
  if (v182 == v181)
  {
    v16 = 4;
    v15 = v181;
  }
  else
  {
    if (!v182)
      goto LABEL_8;
    v16 = 5;
  }
  (*(void (**)(void))(*v15 + 8 * v16))();
LABEL_8:
  sub_2396FD534(&v167, v183, 60);
  v179 = 0;
  v17 = (char *)operator new(0x40uLL);
  *(_QWORD *)v17 = &off_250ADB9D8;
  *(_OWORD *)(v17 + 8) = v167;
  *((_QWORD *)v17 + 3) = v168;
  *((_QWORD *)&v167 + 1) = 0;
  v168 = 0;
  v18 = v169;
  v169 = 0uLL;
  v19 = v170;
  *((_OWORD *)v17 + 2) = v18;
  *((_OWORD *)v17 + 3) = v19;
  v170 = 0uLL;
  v179 = v17;
  v177[0] = 0x42C8000000000000;
  sub_2396FCC68(v180, 1, v178, v177, 1.0);
  v20 = v179;
  if (v179 == v178)
  {
    v21 = 4;
    v20 = v178;
    goto LABEL_12;
  }
  if (v179)
  {
    v21 = 5;
LABEL_12:
    (*(void (**)(void))(*v20 + 8 * v21))();
  }
  v22 = (std::__shared_weak_count *)*((_QWORD *)&v170 + 1);
  if (*((_QWORD *)&v170 + 1))
  {
    v23 = (unint64_t *)(*((_QWORD *)&v170 + 1) + 8);
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  v25 = (std::__shared_weak_count *)*((_QWORD *)&v169 + 1);
  if (*((_QWORD *)&v169 + 1))
  {
    v26 = (unint64_t *)(*((_QWORD *)&v169 + 1) + 8);
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  v28 = v168;
  if (v168)
  {
    p_shared_owners = (unint64_t *)&v168->__shared_owners_;
    do
      v30 = __ldaxr(p_shared_owners);
    while (__stlxr(v30 - 1, p_shared_owners));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  if (!*(_BYTE *)(a1 + 232))
    sub_2394875CC();
  v32 = *(_QWORD *)(a1 + 208);
  v31 = *(_QWORD *)(a1 + 216);
  sub_2396FD534(&v163, v183, 40);
  v176 = 0;
  v33 = (char *)operator new(0x40uLL);
  *(_QWORD *)v33 = &off_250ADB9D8;
  *(_OWORD *)(v33 + 8) = v163;
  *((_QWORD *)v33 + 3) = v164;
  *((_QWORD *)&v163 + 1) = 0;
  v164 = 0;
  v34 = v165;
  v35 = v166;
  v165 = 0uLL;
  *((_OWORD *)v33 + 2) = v34;
  *((_OWORD *)v33 + 3) = v35;
  v166 = 0uLL;
  v176 = v33;
  v174[0] = 0x42C8000000000000;
  sub_2396FCC68(v177, 0x823EE08FB823EE09 * ((v31 - v32) >> 4), v175, v174, 1.0);
  v36 = v176;
  if (v176 == v175)
  {
    v37 = 4;
    v36 = v175;
    goto LABEL_33;
  }
  if (v176)
  {
    v37 = 5;
LABEL_33:
    (*(void (**)(void))(*v36 + 8 * v37))();
  }
  v38 = (std::__shared_weak_count *)*((_QWORD *)&v166 + 1);
  if (*((_QWORD *)&v166 + 1))
  {
    v39 = (unint64_t *)(*((_QWORD *)&v166 + 1) + 8);
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
  v41 = (std::__shared_weak_count *)*((_QWORD *)&v165 + 1);
  if (*((_QWORD *)&v165 + 1))
  {
    v42 = (unint64_t *)(*((_QWORD *)&v165 + 1) + 8);
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  v44 = v164;
  if (v164)
  {
    v45 = (unint64_t *)&v164->__shared_owners_;
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
    }
  }
  sub_2397A2A50((uint64_t)v174, a5, 0);
  v161 = 0;
  v162 = 0;
  v157 = 0;
  v158 = 0;
  v159 = 0;
  v160 = 0;
  sub_2396C2608((_QWORD *)a1, &v160);
  sub_2395236F0(a1, v174, (uint64_t)&v157, 1.0);
  if (!*(_BYTE *)(a1 + 168))
    sub_2394875CC();
  v48 = *(_QWORD *)(a1 + 144);
  v47 = *(_QWORD *)(a1 + 152);
  v49 = v47 - v48;
  v50 = (v47 - v48) >> 3;
  v156 = 0;
  v154 = 0;
  v155 = 0;
  v150 = 0;
  v151 = 0;
  v152 = 0;
  v153 = 0;
  if ((sub_239526AEC(v126, v50, v50, (uint64_t *)&v153, &v150, &v156) & 1) != 0)
  {
    v148 = 0;
    v149 = 0;
    v144 = 0;
    v145 = 0;
    v146 = 0;
    v147 = 0;
    v143 = 0;
    if (v47 != v48)
    {
      if (v49 < 0)
        sub_2394189F8();
      v147 = (char *)operator new(12 * v50);
      v148 = v147;
      v149 = &v147[12 * v50];
      v144 = (char *)operator new(12 * v50);
      v145 = v144;
      v146 = &v144[12 * v50];
    }
    sub_239527730((uint64_t *)v126, (uint64_t *)&v160, &v157, &v153, &v143, &v147, &v144, v173);
    if ((_BYTE)v172)
      *(_QWORD *)(v171 + 32) = v143;
    __p = 0;
    v141 = 0;
    v142 = 0;
    if (v47 != v48)
    {
      if (v49 < 0)
        sub_2394189F8();
      __p = operator new(12 * v50);
      v141 = (char *)__p + 12 * v50;
      v142 = v141;
    }
    if (!sub_2395239DC(&v147, &v150, (uint64_t)&v144, v143, v156, (v47 - v48) >> 3, (v47 - v48) >> 3, (uint64_t)&__p, v174, &v171))goto LABEL_67;
    v51 = v147;
    v148 = 0;
    v149 = 0;
    v147 = 0;
    if (v51)
      operator delete(v51);
    v52 = v144;
    v145 = 0;
    v146 = 0;
    v144 = 0;
    if (v52)
      operator delete(v52);
    v53 = v150;
    v151 = 0;
    v152 = 0;
    v150 = 0;
    if (v53)
      operator delete(v53);
    if ((sub_2396FD7B0(v123) & 1) == 0)
    {
      v133 = 0;
      LOBYTE(v132[0]) = 0;
      sub_2396FCDAC((uint64_t)v180, (__int128 *)v132, 1);
      if (v133 < 0)
        operator delete(v132[0]);
      nullsub_4(a2);
      sub_2397A9494(v60);
      v109 = (void *)objc_claimAutoreleasedReturnValue();
      v61 = sub_2397A9F50(a2);
      sub_2397A9494(v61);
      v115 = (void *)objc_claimAutoreleasedReturnValue();
      if (!*(_BYTE *)(v126 + 232))
        sub_2394875CC();
      if (!*(_BYTE *)(v126 + 168))
        sub_2394875CC();
      v127 = *(void **)(*(_QWORD *)(v126 + 208) + 184);
      v113 = (void *)objc_msgSend(v109, "newBufferWithBytes:length:options:", *(_QWORD *)(v126 + 144), *(_QWORD *)(v126 + 152) - *(_QWORD *)(v126 + 144), 0);
      v118 = (id)objc_msgSend(v109, "newBufferWithLength:options:", *(_QWORD *)(v126 + 32) - *(_QWORD *)(v126 + 24), 0);
      v114 = (void *)objc_msgSend(v109, "newBufferWithBytes:length:options:", __p, v141 - (_BYTE *)__p, 0);
      v110 = (int)v127;
      v107 = HIDWORD(v127);
      v116 = (id)objc_msgSend(v109, "newBufferWithLength:options:", (3 * HIDWORD(v127) * (_DWORD)v127), 0);
      v112 = (void *)objc_msgSend(v109, "newBufferWithLength:options:", (3 * HIDWORD(v127) * (_DWORD)v127), 0);
      v108 = 0;
      v137 = 0;
      v138 = 0;
      v139 = 0;
      v134 = 0;
      v135 = 0;
      v136 = 0;
      if (a4)
      {
        if (HIDWORD(v127) >= v127)
          v62 = v127;
        else
          v62 = HIDWORD(v127);
        v63 = log2((double)v62);
        v132[0] = v127;
        sub_23955D808(v109, &v134, &v137, (v63 + -1.0), v132, 1);
        v108 = (void *)objc_msgSend(v109, "newBufferWithLength:options:", (4 * HIDWORD(v127) * (_DWORD)v127), 0);
      }
      objc_msgSend(MEMORY[0x24BDDD740], "texture2DDescriptorWithPixelFormat:width:height:mipmapped:", 73, v127, HIDWORD(v127), 0);
      v64 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v64, "setUsage:", 7);
      v117 = (void *)objc_msgSend(v109, "newTextureWithDescriptor:", v64);

      objc_msgSend(MEMORY[0x24BDDD740], "texture2DDescriptorWithPixelFormat:width:height:mipmapped:", 73, v127, HIDWORD(v127), 0);
      v65 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v65, "setUsage:", 3);
      v119 = (void *)objc_msgSend(v109, "newTextureWithDescriptor:", v65);

      v66 = v126;
      if (!*(_BYTE *)(v126 + 232))
        sub_2394875CC();
      v67 = *(_QWORD *)(v126 + 216) - *(_QWORD *)(v126 + 208);
      v68 = v123;
      if (v67)
      {
        v128 = 0;
        v111 = 0x823EE08FB823EE09 * (v67 >> 4);
        while (1)
        {
          v131 = 0;
          LOBYTE(v130[0]) = 0;
          sub_2396FD394(v132, (uint64_t)v177, (__int128 *)v130);
          if (v131 < 0)
            operator delete(v130[0]);
          if ((sub_2396FD7B0(v68) & 1) != 0)
            break;
          if (!*(_BYTE *)(v66 + 232))
            sub_2394875CC();
          v69 = *(_QWORD *)(v66 + 208);
          v130[0] = 0;
          v130[0] = *(void **)(v69 + 912 * v128 + 184);
          v70 = objc_retainAutorelease(v118);
          v71 = objc_msgSend(v70, "contents");
          v72 = v69 + 912 * v128;
          v73 = *(unsigned int **)(v72 + 24);
          v74 = *(unsigned int **)(v72 + 32);
          if (v73 == v74)
          {
            v75 = 0;
          }
          else
          {
            if (!*(_BYTE *)(v126 + 200))
              sub_2394875CC();
            v75 = 0;
            v76 = *(_QWORD *)(v126 + 176);
            v77 = 2;
            do
            {
              v78 = *v73++;
              v79 = (_DWORD *)(v76 + 12 * v78);
              *(_DWORD *)(v71 + 4 * (v77 - 2)) = *v79;
              *(_DWORD *)(v71 + 4 * (v77 - 1)) = v79[1];
              *(_DWORD *)(v71 + 4 * v77) = v79[2];
              ++v75;
              v77 += 3;
            }
            while (v73 != v74);
          }
          nullsub_4(v70);
          v80 = objc_retainAutorelease(v116);
          v81 = (void *)objc_msgSend(v80, "contents");
          v82 = v69 + 912 * v128;
          v84 = *(unsigned __int8 *)(v82 + 200);
          v83 = (_BYTE *)(v82 + 200);
          if (v84 && *(_QWORD *)(v69 + 912 * v128 + 104))
            (*(void (**)(_QWORD, uint64_t, const char *))(**((_QWORD **)v83 - 15) + 88))(*((_QWORD *)v83 - 15), 1, "unknown location");
          v122 = (const void **)(v69 + 912 * v128 + 104);
          memcpy(v81, *v122, (3 * HIDWORD(v130[0]) * LODWORD(v130[0])));
          objc_msgSend(v115, "commandBuffer", nullsub_4(v80).n128_f64[0]);
          v85 = (void *)objc_claimAutoreleasedReturnValue();
          v120 = v83 - 120;
          v121 = v83;
          sub_23952B4A0(a2, v85, v113, v70, v114, v117, (uint64_t)v130, v75);
          sub_23952B6D0(a2, v85, v117, v80, (uint64_t *)v130);
          v86 = v80;
          v87 = v112;
          v88 = v117;
          v89 = v119;
          sub_23955E308(a2, v85, v88, v89, v86, v87, (uint64_t *)v130);
          sub_23955E308(a2, v85, v89, v88, v87, v86, (uint64_t *)v130);
          sub_23955E308(a2, v85, v88, v89, v86, v87, (uint64_t *)v130);
          v90 = v85;
          if ((a4 & 1) != 0)
          {
            v91 = HIDWORD(v130[0]);
            v92 = (int)v130[0];
            if (HIDWORD(v130[0]) >= LODWORD(v130[0]))
              v93 = v130[0];
            else
              v93 = HIDWORD(v130[0]);
            v94 = log2((double)v93) + -1.0;
            v95 = v94;
            if (v92 != v110 || v91 != v107)
              sub_23955D808(v109, &v134, &v137, v94, v130, 1);
            v129 = 0;
            sub_23955DA4C(a2, v85, v89, v87, v108, (_QWORD **)&v137, &v134, (uint64_t *)v130, (uint64_t)&v129, v95, 0);
          }
          nullsub_4(v85);
          sub_23971DB68();
          objc_msgSend(v85, "commit");
          objc_msgSend(v85, "waitUntilCompleted");
          v96 = (void *)*v122;
          if (*v121 && v96)
          {
            (*(void (**)(_QWORD, uint64_t, const char *))(*(_QWORD *)*v120 + 88))(*v120, 1, "unknown location");
            v96 = (void *)*v122;
          }
          v97 = objc_retainAutorelease(v87);
          v98 = (const void *)objc_msgSend(v97, "contents");
          memcpy(v96, v98, (3 * HIDWORD(v130[0]) * LODWORD(v130[0])));

          sub_2396FD3E8((uint64_t)v132);
          v66 = v126;
          ++v128;
          v68 = v123;
          if (v128 == v111)
            goto LABEL_126;
        }
        sub_2396FD3E8((uint64_t)v132);
      }
LABEL_126:

      v99 = (char *)v134;
      if (v134)
      {
        v100 = v135;
        v101 = v134;
        if (v135 != v134)
        {
          do
          {
            v102 = (void *)*((_QWORD *)v100 - 2);
            v100 -= 16;

          }
          while (v100 != v99);
          v101 = v134;
        }
        v135 = v99;
        operator delete(v101);
      }
      v103 = (char *)v137;
      if (v137)
      {
        v104 = v138;
        v105 = v137;
        if (v138 != v137)
        {
          do
          {
            v106 = (void *)*((_QWORD *)v104 - 2);
            v104 -= 16;

          }
          while (v104 != v103);
          v105 = v137;
        }
        v138 = v103;
        operator delete(v105);
      }

      v14 = 1;
      v54 = (char *)__p;
      if (!__p)
        goto LABEL_69;
    }
    else
    {
LABEL_67:
      v14 = 0;
      v54 = (char *)__p;
      if (!__p)
      {
LABEL_69:
        if (v144)
        {
          v145 = v144;
          operator delete(v144);
        }
        if (v147)
        {
          v148 = v147;
          operator delete(v147);
        }
        goto LABEL_74;
      }
    }
    v141 = v54;
    operator delete(v54);
    goto LABEL_69;
  }
  v14 = 0;
LABEL_74:
  if (v150)
  {
    v151 = v150;
    operator delete(v150);
  }
  if (v153)
  {
    v154 = v153;
    operator delete(v153);
  }
  if (v157)
  {
    v158 = v157;
    operator delete(v157);
  }
  v55 = v160;
  if (v160)
  {
    v56 = v161;
    v57 = v160;
    if (v161 != v160)
    {
      do
      {
        v58 = v56 - 24;
        sub_239421038((uint64_t)(v56 - 24), *((_QWORD **)v56 - 2));
        v56 = v58;
      }
      while (v58 != v55);
      v57 = v160;
    }
    v161 = v55;
    operator delete(v57);
  }
  sub_2397A2E14(v174);
  sub_2396FCD14((uint64_t)v177);
  sub_2396FCD14((uint64_t)v180);
  sub_2396FCD14((uint64_t)v183);
LABEL_86:
  objc_autoreleasePoolPop(context);
  return v14;
}

void sub_23952C69C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *a16, void *a17, void *a18, void *a19, void *a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,uint64_t a47,void *__p,void *a49,uint64_t a50,uint64_t a51,void *a52,void *a53,uint64_t a54,void *a55,void *a56,uint64_t a57,void *a58,void *a59,uint64_t a60,void *a61,void *a62,uint64_t a63)
{
  void *a65;
  void *a66;
  void *a68;
  void *v69;
  void *v70;
  void *v71;
  void *v72;
  void *v73;

  sub_23952CAE4(&a42);
  sub_23952CAE4(&a45);

  if (__p)
  {
    a49 = __p;
    operator delete(__p);
    v69 = a52;
    if (!a52)
    {
LABEL_3:
      v70 = a55;
      if (!a55)
        goto LABEL_4;
      goto LABEL_11;
    }
  }
  else
  {
    v69 = a52;
    if (!a52)
      goto LABEL_3;
  }
  a53 = v69;
  operator delete(v69);
  v70 = a55;
  if (!a55)
  {
LABEL_4:
    v71 = a58;
    if (!a58)
      goto LABEL_5;
    goto LABEL_12;
  }
LABEL_11:
  a56 = v70;
  operator delete(v70);
  v71 = a58;
  if (!a58)
  {
LABEL_5:
    v72 = a61;
    if (!a61)
      goto LABEL_6;
    goto LABEL_13;
  }
LABEL_12:
  a59 = v71;
  operator delete(v71);
  v72 = a61;
  if (!a61)
  {
LABEL_6:
    v73 = a65;
    if (!a65)
      goto LABEL_8;
    goto LABEL_7;
  }
LABEL_13:
  a62 = v72;
  operator delete(v72);
  v73 = a65;
  if (!a65)
  {
LABEL_8:
    sub_2394E9A28(&a68);
    sub_2397A2E14(&STACK[0x290]);
    sub_2396FCD14((uint64_t)&STACK[0x410]);
    sub_2396FCD14((uint64_t)&STACK[0x668]);
    sub_2396FCD14((uint64_t)&STACK[0x8C0]);
    _Unwind_Resume(a1);
  }
LABEL_7:
  a66 = v73;
  operator delete(v73);
  goto LABEL_8;
}

void **sub_23952CAE4(void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  void *v5;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        v5 = (void *)*((_QWORD *)v3 - 2);
        v3 -= 16;

      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_23952CB40(uint64_t a1, uint64_t a2, char a3, float a4)
{
  uint64_t v4;
  uint64_t v5;
  __n128 v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  __n128 v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  float v17;
  float v18;
  int v19;
  int v20;
  int v21;
  int i;
  uint64_t v23;
  uint64_t v24;
  float v25;
  float v26;
  float v27;
  uint64_t v28;
  float v29;
  float v30;
  float v31;
  uint64_t v32;
  float v33;
  uint64_t (**v35)();
  uint64_t v36;
  std::__shared_weak_count *v37;
  _BYTE v38[32];
  _BYTE v39[16];
  std::__shared_weak_count *v40;
  uint64_t v41;
  uint64_t (**v42)();
  _BYTE v43[24];
  uint64_t v44;
  int v45;
  int v46;

  if (!*(_BYTE *)(a1 + 232))
    sub_2394875CC();
  v4 = *(_QWORD *)(a1 + 208);
  v5 = *(_QWORD *)(a1 + 216);
  if (v4 != v5)
  {
    while (!*(_BYTE *)(v4 + 208))
    {
LABEL_5:
      v4 += 912;
      if (v4 == v5)
        return 1;
    }
    v35 = &off_250ADB778;
    sub_23946936C(v4 + 72, (uint64_t)&v36);
    sub_239715E78((uint64_t)&v35, a2, a3, (uint64_t)v39, a4);
    v42 = &off_250ADBEA0;
    sub_239469644((uint64_t)v39, (uint64_t)v43);
    v9 = nullsub_4(&v41);
    v10 = v40;
    if (!v40)
      goto LABEL_11;
    p_shared_owners = (unint64_t *)&v40->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v10->__on_zero_shared)(v10, v9);
      std::__shared_weak_count::__release_weak(v10);
      j_nullsub_4_89(v39);
      v13 = nullsub_4(v38);
      v14 = v37;
      if (v37)
        goto LABEL_12;
    }
    else
    {
LABEL_11:
      j_nullsub_4_89(v39);
      v13 = nullsub_4(v38);
      v14 = v37;
      if (v37)
      {
LABEL_12:
        v15 = (unint64_t *)&v14->__shared_owners_;
        do
          v16 = __ldaxr(v15);
        while (__stlxr(v16 - 1, v15));
        if (!v16)
        {
          ((void (*)(std::__shared_weak_count *, __n128))v14->__on_zero_shared)(v14, v13);
          std::__shared_weak_count::__release_weak(v14);
        }
      }
    }
    j_nullsub_4_89(&v35);
    v19 = *(_DWORD *)(v4 + 188);
    if (v19)
    {
      v20 = *(_DWORD *)(v4 + 184);
      if (v20)
      {
        v21 = 0;
LABEL_20:
        for (i = 0; i != v20; ++i)
        {
          v23 = (*(_DWORD *)(v4 + 192) * i + *(_DWORD *)(v4 + 196) * v21);
          v24 = *(_QWORD *)(v4 + 104);
          LOBYTE(v17) = *(_BYTE *)(v24 + v23);
          LOBYTE(v18) = *(_BYTE *)(v44 + (v45 * i + v46 * v21));
          v25 = (float)((float)LODWORD(v18) * -0.5) + (float)((float)LODWORD(v17) * 1.5);
          v18 = 255.0;
          if (v25 <= 255.0)
            v26 = v25;
          else
            v26 = 255.0;
          if (v25 >= 0.0)
            v27 = v26;
          else
            v27 = 0.0;
          *(_BYTE *)(v24 + v23) = (int)v27;
          v28 = *(_QWORD *)(v4 + 104) + (*(_DWORD *)(v4 + 192) * i + *(_DWORD *)(v4 + 196) * v21);
          LOBYTE(v27) = *(_BYTE *)(v28 + 1);
          LOBYTE(v26) = *(_BYTE *)(v44 + (v45 * i + v46 * v21) + 1);
          v29 = (float)((float)LODWORD(v26) * -0.5) + (float)((float)LODWORD(v27) * 1.5);
          if (v29 <= 255.0)
            v30 = v29;
          else
            v30 = 255.0;
          if (v29 >= 0.0)
            v31 = v30;
          else
            v31 = 0.0;
          *(_BYTE *)(v28 + 1) = (int)v31;
          v32 = *(_QWORD *)(v4 + 104) + (*(_DWORD *)(v4 + 192) * i + *(_DWORD *)(v4 + 196) * v21);
          LOBYTE(v31) = *(_BYTE *)(v32 + 2);
          LOBYTE(v30) = *(_BYTE *)(v44 + (v45 * i + v46 * v21) + 2);
          v33 = (float)((float)LODWORD(v30) * -0.5) + (float)((float)LODWORD(v31) * 1.5);
          if (v33 <= 255.0)
            v18 = v33;
          if (v33 >= 0.0)
            v17 = v18;
          else
            v17 = 0.0;
          *(_BYTE *)(v32 + 2) = (int)v17;
        }
        while (++v21 != v19)
        {
          v20 = *(_DWORD *)(v4 + 184);
          if (v20)
            goto LABEL_20;
        }
      }
    }
    sub_239416DA0((uint64_t)v43);
    nullsub_4(&v42);
    goto LABEL_5;
  }
  return 1;
}

void sub_23952CE44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  nullsub_4(&a25);
  sub_239422DD0((uint64_t)&a17);
  sub_239422DD0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_23952CE68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_239422DD0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_23952CE7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  j_nullsub_4_89(&a9);
  _Unwind_Resume(a1);
}

void sub_23952CE90(uint64_t a1, void *a2, _QWORD *a3, _QWORD *a4, _QWORD *a5, _QWORD *a6, _QWORD *a7, int a8)
{
  id v13;
  uint64_t v14;
  uint64_t v15;
  size_t v16;
  __int128 v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  unint64_t v22;
  __int128 v23;
  _BYTE *v24;
  char *v25;
  _QWORD *v26;
  unint64_t v27;
  uint64_t v28;
  char *v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  _BYTE *v39;
  uint64_t v40;
  unint64_t v41;
  char *v42;
  int v43;
  uint64_t v44;
  unsigned int *v45;
  float *v46;
  float *v47;
  float *v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  uint64_t v55;
  unsigned int v56;
  unsigned int v57;
  char *v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  char *v63;
  char *v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  char *v69;
  char *v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  uint64_t v76;
  char *v77;
  char *v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  _OWORD *v85;
  __int128 *v86;
  uint64_t v87;
  int *v88;
  int v89;
  void **v90;
  void **v91;
  unint64_t v92;
  unint64_t v93;
  uint64_t v94;
  void *v95;
  size_t v96;
  char *v97;
  char *v98;
  char *v99;
  uint64_t v100;
  char *v101;
  uint64_t v102;
  char *v103;
  char *v104;
  char *v105;
  int64_t v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  unint64_t v110;
  char *v111;
  char *v112;
  unint64_t v113;
  unint64_t v114;
  uint64_t v115;
  uint64_t v116;
  char *v117;
  char *v118;
  char *v119;
  uint64_t v120;
  __int128 v121;
  int v122;
  int i;
  _DWORD *v124;
  int64_t v125;
  unsigned int *v126;
  unsigned int *v127;
  uint64_t v128;
  uint64_t v129;
  char *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  _BYTE *v135;
  int64_t v136;
  uint64_t v137;
  unint64_t v138;
  uint64_t v139;
  unint64_t v140;
  unint64_t v141;
  _BYTE *v142;
  _DWORD *v143;
  unint64_t v144;
  _DWORD *v145;
  int v146;
  _BYTE *v147;
  int64_t v148;
  uint64_t v149;
  unint64_t v150;
  uint64_t v151;
  unint64_t v152;
  unint64_t v153;
  _BYTE *v154;
  _DWORD *v155;
  unint64_t v156;
  _DWORD *v157;
  int v158;
  uint64_t v159;
  _BYTE *v160;
  int64_t v161;
  uint64_t v162;
  unint64_t v163;
  uint64_t v164;
  unint64_t v165;
  _BYTE *v166;
  _DWORD *v167;
  unint64_t v168;
  _DWORD *v169;
  int v170;
  uint64_t v171;
  uint64_t v172;
  _OWORD *v173;
  __int128 *v174;
  uint64_t v175;
  __int128 v176;
  uint64_t v177;
  uint64_t v178;
  _OWORD *v179;
  __int128 *v180;
  uint64_t v181;
  __int128 v182;
  uint64_t v183;
  uint64_t v184;
  _OWORD *v185;
  __int128 *v186;
  uint64_t v187;
  __int128 v188;
  char *v189;
  _QWORD *v190;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  void *v196;
  _BYTE *v197;
  void *v198;
  unint64_t v199;
  int v200;
  unsigned int *v201;
  float v202;
  unsigned int *v203;
  char *__p;
  void *v205[2];
  __int128 v206;
  __int128 v207;
  void *v208;
  char *v209;
  char *v210;
  char *v211;
  char *v212;
  char *v213;
  char *v214;
  char *v215;
  uint64_t v216;
  char *v217;
  char *v218;
  uint64_t v219;

  v13 = a2;
  v194 = *(_QWORD *)(a1 + 24);
  v195 = *(_QWORD *)(a1 + 32);
  v217 = 0;
  v218 = 0;
  v219 = 0;
  v196 = v13;
  sub_2396C277C((_QWORD *)a1, (uint64_t)&v217, a8, 0, 0);
  *a6 = (id)objc_msgSend(v13, "newBufferWithBytes:length:options:", v217, v218 - v217, 0);
  v214 = 0;
  v215 = 0;
  v216 = 0;
  sub_2396CA790(a1, (uint64_t)&v214, a8);
  v15 = v194;
  v14 = v195;
  v16 = (v195 - v194) / 12;
  *a7 = (id)objc_msgSend(v13, "newBufferWithBytes:length:options:", v214, v215 - v214, 0);
  v211 = 0;
  v212 = 0;
  v213 = 0;
  v193 = v195 - v194;
  if (v195 != v194)
  {
    if (v195 - v194 < 0)
      sub_2394189F8();
    v18 = (char *)operator new(v16);
    v190 = a5;
    v19 = &v18[v16];
    v211 = v18;
    v213 = &v18[v16];
    v197 = v18;
    bzero(v18, v16);
    v212 = v19;
    v208 = operator new(8 * (((v16 - 1) >> 6) + 1));
    v209 = 0;
    v210 = (char *)(((v16 - 1) >> 6) + 1);
    sub_23942D8C8(&v208, v16, 0);
    v20 = 0;
    v21 = 0;
    v22 = 0;
    *(_QWORD *)&v23 = 0;
    v206 = 0u;
    v207 = 0u;
    *(_OWORD *)v205 = 0u;
    __p = 0;
    v24 = v197;
    while (1)
    {
      v26 = v208;
      v27 = v22 >> 6;
      v28 = 1 << v22;
      if ((*((_QWORD *)v208 + (v22 >> 6)) & (1 << v22)) != 0)
        goto LABEL_4;
      v199 = v22;
      *(void **)&v23 = v205[1];
      v29 = (char *)v205[1];
      if ((void *)v206 == v205[1])
        v30 = 0;
      else
        v30 = (((_QWORD)v206 - (unint64_t)v205[1]) << 7) - 1;
      v31 = *((_QWORD *)&v207 + 1);
      v32 = *((_QWORD *)&v207 + 1) + v207;
      if (v30 == *((_QWORD *)&v207 + 1) + (_QWORD)v207)
      {
        sub_2394F0374((uint64_t)v205);
        v31 = *((_QWORD *)&v207 + 1);
        v29 = (char *)v205[1];
        v32 = v207 + *((_QWORD *)&v207 + 1);
        v26 = v208;
      }
      *(_DWORD *)(*(_QWORD *)&v29[(v32 >> 7) & 0x1FFFFFFFFFFFFF8] + 4 * (v32 & 0x3FF)) = v199;
      *((_QWORD *)&v207 + 1) = v31 + 1;
      v26[v27] |= v28;
      v33 = *((_QWORD *)&v207 + 1);
      if (!*((_QWORD *)&v207 + 1))
      {
        v22 = v199;
        v24 = v197;
        v25 = __p;
        if (__p == v21)
          goto LABEL_4;
        goto LABEL_77;
      }
      v202 = 0.0;
      v25 = v21;
      do
      {
        while (1)
        {
          v34 = *(unsigned int *)(*(_QWORD *)((char *)v205[1] + (((unint64_t)v207 >> 7) & 0x1FFFFFFFFFFFFF8))
                                + 4 * (v207 & 0x3FF));
          *(_QWORD *)&v207 = v207 + 1;
          *((_QWORD *)&v207 + 1) = v33 - 1;
          if ((unint64_t)v207 >= 0x800)
          {
            operator delete(*(void **)v205[1]);
            v205[1] = (char *)v205[1] + 8;
            *(_QWORD *)&v207 = v207 - 1024;
          }
          if (v21 < v20)
          {
            *(_DWORD *)v21 = v34;
            v21 += 4;
            goto LABEL_34;
          }
          v35 = __p;
          v36 = (v21 - __p) >> 2;
          v37 = v36 + 1;
          if ((unint64_t)(v36 + 1) >> 62)
            sub_2394189F8();
          if ((v20 - __p) >> 1 > v37)
            v37 = (v20 - __p) >> 1;
          if ((unint64_t)(v20 - __p) >= 0x7FFFFFFFFFFFFFFCLL)
            v38 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v38 = v37;
          if (v38)
          {
            if (v38 >> 62)
              sub_239418A80();
            v39 = operator new(4 * v38);
            v25 = &v39[4 * v36];
            *(_DWORD *)v25 = v34;
            v40 = (uint64_t)(v25 + 4);
            if (v21 == __p)
            {
LABEL_64:
              v20 = &v39[4 * v38];
              __p = v25;
              if (!v35)
                goto LABEL_33;
LABEL_32:
              operator delete(v35);
              goto LABEL_33;
            }
          }
          else
          {
            v39 = 0;
            v25 = (char *)(4 * v36);
            *(_DWORD *)(4 * v36) = v34;
            v40 = 4 * v36 + 4;
            if (v21 == __p)
              goto LABEL_64;
          }
          v41 = v21 - 4 - __p;
          if (v41 < 0xBC
            || &v39[v21 - __p - 4 - (v41 & 0xFFFFFFFFFFFFFFFCLL)] > &v39[v21 - __p - 4]
            || &v21[-(v41 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v21 - 4
            || (unint64_t)(__p - v39) < 0x20)
          {
            v42 = v21;
            do
            {
LABEL_30:
              v43 = *((_DWORD *)v42 - 1);
              v42 -= 4;
              *((_DWORD *)v25 - 1) = v43;
              v25 -= 4;
            }
            while (v42 != __p);
            goto LABEL_31;
          }
          v83 = (v41 >> 2) + 1;
          v84 = 4 * (v83 & 0x7FFFFFFFFFFFFFF8);
          v42 = &v21[-v84];
          v25 -= v84;
          v85 = &v39[4 * v36 - 16];
          v86 = (__int128 *)(v21 - 16);
          v87 = v83 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v17 = *(v86 - 1);
            v23 = *v86;
            *(v85 - 1) = v17;
            *v85 = v23;
            v85 -= 2;
            v86 -= 2;
            v87 -= 8;
          }
          while (v87);
          if (v83 != (v83 & 0x7FFFFFFFFFFFFFF8))
            goto LABEL_30;
LABEL_31:
          v20 = &v39[4 * v38];
          __p = v25;
          if (v35)
            goto LABEL_32;
LABEL_33:
          v21 = (char *)v40;
LABEL_34:
          if (!*(_BYTE *)(a1 + 200))
            sub_2394875CC();
          if (!*(_BYTE *)(a1 + 168))
            sub_2394875CC();
          if (!*(_BYTE *)(a1 + 232) || !*(_BYTE *)(a1 + 264))
            sub_2394875CC();
          v44 = *(_QWORD *)(a1 + 144);
          v45 = (unsigned int *)(*(_QWORD *)(a1 + 176) + 12 * v34);
          v46 = (float *)(v44 + 8 * v45[1]);
          v47 = (float *)(v44 + 8 * *v45);
          v48 = (float *)(v44 + 8 * v45[2]);
          v49 = *v47;
          v50 = v47[1];
          v52 = *v46;
          v51 = v46[1];
          v54 = *v48;
          v53 = v48[1];
          v55 = *(_QWORD *)(a1 + 208) + 912 * *(unsigned int *)(*(_QWORD *)(a1 + 240) + 4 * v34);
          v56 = *(_DWORD *)(v55 + 184);
          v57 = *(_DWORD *)(v55 + 188);
          v58 = &v214[12 * v34];
          v59 = *(unsigned int *)v58;
          if ((_DWORD)v59 == -1 || (v60 = *((_QWORD *)v208 + (v59 >> 6)), (v60 & (1 << v59)) != 0))
          {
            v61 = *((unsigned int *)v58 + 1);
            if ((_DWORD)v61 == -1)
              goto LABEL_54;
LABEL_41:
            v62 = *((_QWORD *)v208 + (v61 >> 6));
            if ((v62 & (1 << v61)) == 0)
            {
              DWORD1(v23) = HIDWORD(v205[1]);
              v63 = (char *)v206;
              v64 = (char *)v205[1];
              v65 = (((_QWORD)v206 - (unint64_t)v205[1]) << 7) - 1;
              *((_QWORD *)v208 + (v61 >> 6)) = v62 | (1 << v61);
              if (v63 == v64)
                v66 = 0;
              else
                v66 = v65;
              v67 = *((_QWORD *)&v207 + 1);
              v68 = *((_QWORD *)&v207 + 1) + v207;
              if (v66 == *((_QWORD *)&v207 + 1) + (_QWORD)v207)
              {
                sub_2394F0374((uint64_t)v205);
                v67 = *((_QWORD *)&v207 + 1);
                v64 = (char *)v205[1];
                v68 = v207 + *((_QWORD *)&v207 + 1);
              }
              *(_DWORD *)(*(_QWORD *)&v64[(v68 >> 7) & 0x1FFFFFFFFFFFFF8] + 4 * (v68 & 0x3FF)) = v61;
              *((_QWORD *)&v207 + 1) = v67 + 1;
            }
            goto LABEL_54;
          }
          DWORD1(v23) = HIDWORD(v205[1]);
          v69 = (char *)v206;
          v70 = (char *)v205[1];
          v71 = (((_QWORD)v206 - (unint64_t)v205[1]) << 7) - 1;
          *((_QWORD *)v208 + (v59 >> 6)) = v60 | (1 << v59);
          if (v69 == v70)
            v72 = 0;
          else
            v72 = v71;
          v73 = *((_QWORD *)&v207 + 1);
          v74 = *((_QWORD *)&v207 + 1) + v207;
          if (v72 == *((_QWORD *)&v207 + 1) + (_QWORD)v207)
          {
            sub_2394F0374((uint64_t)v205);
            v73 = *((_QWORD *)&v207 + 1);
            v70 = (char *)v205[1];
            v74 = v207 + *((_QWORD *)&v207 + 1);
          }
          *(_DWORD *)(*(_QWORD *)&v70[(v74 >> 7) & 0x1FFFFFFFFFFFFF8] + 4 * (v74 & 0x3FF)) = v59;
          *((_QWORD *)&v207 + 1) = v73 + 1;
          v61 = *((unsigned int *)v58 + 1);
          if ((_DWORD)v61 != -1)
            goto LABEL_41;
LABEL_54:
          v202 = v202
               + (float)((float)((float)(fabsf((float)((float)(v52 - v49) * (float)(v53 - v50))- (float)((float)(v54 - v49) * (float)(v51 - v50)))* 0.5)* (float)v56)* (float)v57);
          v75 = *((unsigned int *)v58 + 2);
          if ((_DWORD)v75 != -1)
          {
            v76 = *((_QWORD *)v208 + (v75 >> 6));
            if ((v76 & (1 << v75)) == 0)
              break;
          }
          v33 = *((_QWORD *)&v207 + 1);
          if (!*((_QWORD *)&v207 + 1))
            goto LABEL_73;
        }
        DWORD1(v23) = HIDWORD(v205[1]);
        v77 = (char *)v206;
        v78 = (char *)v205[1];
        v79 = (((_QWORD)v206 - (unint64_t)v205[1]) << 7) - 1;
        *((_QWORD *)v208 + (v75 >> 6)) = v76 | (1 << v75);
        if (v77 == v78)
          v80 = 0;
        else
          v80 = v79;
        v81 = *((_QWORD *)&v207 + 1);
        v82 = *((_QWORD *)&v207 + 1) + v207;
        if (v80 == *((_QWORD *)&v207 + 1) + (_QWORD)v207)
        {
          sub_2394F0374((uint64_t)v205);
          v81 = *((_QWORD *)&v207 + 1);
          v78 = (char *)v205[1];
          v82 = v207 + *((_QWORD *)&v207 + 1);
        }
        *(_DWORD *)(*(_QWORD *)&v78[(v82 >> 7) & 0x1FFFFFFFFFFFFF8] + 4 * (v82 & 0x3FF)) = v75;
        v33 = v81 + 1;
        *((_QWORD *)&v207 + 1) = v81 + 1;
      }
      while (v81 != -1);
LABEL_73:
      LODWORD(v23) = 1120403456;
      *(float *)&v17 = v202;
      v24 = v197;
      v22 = v199;
      if (v202 <= 100.0)
      {
        v25 = __p;
        if (__p == v21)
        {
LABEL_4:
          v25 = v21;
          goto LABEL_5;
        }
LABEL_77:
        v88 = (int *)v25;
        do
        {
          v89 = *v88++;
          v24[v89] = 1;
        }
        while (v88 != (int *)v21);
      }
LABEL_5:
      ++v22;
      v21 = v25;
      v16 = (v195 - v194) / 12;
      if (v22 == v16)
      {
        v15 = v194;
        v14 = v195;
        a5 = v190;
        goto LABEL_82;
      }
    }
  }
  v24 = 0;
  v208 = 0;
  v209 = 0;
  v210 = 0;
  *(_QWORD *)&v23 = 0;
  v206 = 0u;
  v207 = 0u;
  *(_OWORD *)v205 = 0u;
  __p = 0;
LABEL_82:
  v198 = v24;
  *a5 = (id)objc_msgSend(v196, "newBufferWithBytes:length:options:", *(double *)&v23, *(double *)&v17);
  if (__p)
    operator delete(__p);
  v90 = (void **)v205[1];
  v91 = (void **)v206;
  *((_QWORD *)&v207 + 1) = 0;
  v92 = v206 - (unint64_t)v205[1];
  if ((unint64_t)v206 - (unint64_t)v205[1] >= 0x11)
  {
    do
    {
      operator delete(*v90);
      v91 = (void **)v206;
      v90 = (void **)((char *)v205[1] + 8);
      v205[1] = v90;
      v92 = v206 - (_QWORD)v90;
    }
    while ((_QWORD)v206 - (_QWORD)v90 > 0x10uLL);
  }
  v93 = v92 >> 3;
  if (v93 == 1)
  {
    v94 = 512;
    goto LABEL_90;
  }
  if (v93 == 2)
  {
    v94 = 1024;
LABEL_90:
    *(_QWORD *)&v207 = v94;
  }
  if (v90 != v91)
  {
    do
    {
      v95 = *v90++;
      operator delete(v95);
    }
    while (v90 != v91);
    if ((void *)v206 != v205[1])
      *(_QWORD *)&v206 = v206 + (((unint64_t)v205[1] - v206 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v205[0])
    operator delete(v205[0]);
  if (v208)
    operator delete(v208);
  if (v198)
    operator delete(v198);
  v205[0] = 0;
  v205[1] = 0;
  v96 = v16 >> 62;
  *(_QWORD *)&v206 = 0;
  if (v14 == v15)
  {
    v97 = 0;
    v211 = 0;
    v212 = 0;
    v213 = 0;
    v208 = 0;
    v209 = 0;
    v210 = 0;
    if ((unint64_t)(v193 + 11) < 0x17)
      goto LABEL_105;
LABEL_108:
    if (v96)
      sub_2394189F8();
    v208 = operator new(4 * v16);
    v209 = (char *)v208;
    v210 = (char *)v208 + 4 * v16;
    if (v14 == v15)
      goto LABEL_146;
    goto LABEL_110;
  }
  if (v193 < 0)
    sub_2394189F8();
  v97 = (char *)operator new(v16);
  v205[0] = v97;
  *(_QWORD *)&v206 = &v97[v16];
  bzero(v97, v16);
  v205[1] = &v97[v16];
  v211 = 0;
  v212 = 0;
  v213 = 0;
  if (v96)
    sub_2394189F8();
  v98 = (char *)operator new(4 * v16);
  v99 = &v98[4 * v16];
  v211 = v98;
  v213 = v99;
  memset(v98, 255, 4 * v16);
  v212 = v99;
  v208 = 0;
  v209 = 0;
  v210 = 0;
  if ((unint64_t)(v193 + 11) >= 0x17)
    goto LABEL_108;
LABEL_105:
  if (v14 != v15)
  {
LABEL_110:
    v100 = 0;
    while (1)
    {
      if (((v103 = &v214[12 * v100], *(_DWORD *)v103 != -1) || *(_DWORD *)&v217[12 * v100] == -1)
        && (*((_DWORD *)v103 + 1) != -1 || *(_DWORD *)&v217[12 * v100 + 4] == -1))
      {
        if (*((_DWORD *)v103 + 2) == -1)
        {
          v97[v100] = *(_DWORD *)&v217[12 * v100 + 8] != -1;
          v97 = (char *)v205[0];
          if (!*((_BYTE *)v205[0] + v100))
            goto LABEL_113;
        }
        else
        {
          v97[v100] = 0;
          v97 = (char *)v205[0];
          if (!*((_BYTE *)v205[0] + v100))
            goto LABEL_113;
        }
      }
      else
      {
        v97[v100] = 1;
        v97 = (char *)v205[0];
        if (!*((_BYTE *)v205[0] + v100))
          goto LABEL_113;
      }
      *(_DWORD *)&v211[4 * v100] = v100;
      v104 = v209;
      if (v209 >= v210)
        break;
      v101 = v97;
      *(_DWORD *)v209 = v100;
      v102 = (uint64_t)(v104 + 4);
LABEL_112:
      v209 = (char *)v102;
      v97 = v101;
LABEL_113:
      if (++v100 == v16)
        goto LABEL_146;
    }
    v105 = (char *)v208;
    v106 = v209 - (_BYTE *)v208;
    v107 = (v209 - (_BYTE *)v208) >> 2;
    v108 = v107 + 1;
    if ((unint64_t)(v107 + 1) >> 62)
      sub_2394189F8();
    v109 = v210 - (_BYTE *)v208;
    if ((v210 - (_BYTE *)v208) >> 1 > v108)
      v108 = v109 >> 1;
    if ((unint64_t)v109 >= 0x7FFFFFFFFFFFFFFCLL)
      v110 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v110 = v108;
    if (v110)
    {
      if (v110 >> 62)
        sub_239418A80();
      v111 = (char *)operator new(4 * v110);
      v101 = v97;
      v112 = &v111[4 * v107];
      *(_DWORD *)v112 = v100;
      v102 = (uint64_t)(v112 + 4);
      if (v104 != v105)
      {
LABEL_135:
        v113 = v104 - 4 - v105;
        if (v113 >= 0x2C)
        {
          v114 = v104 - &v111[v106];
          v16 = (v195 - v194) / 12;
          if (v114 >= 0x20)
          {
            v115 = (v113 >> 2) + 1;
            v116 = 4 * (v115 & 0x7FFFFFFFFFFFFFF8);
            v117 = &v104[-v116];
            v112 -= v116;
            v118 = &v111[4 * v107 - 16];
            v119 = v104 - 16;
            v120 = v115 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v121 = *(_OWORD *)v119;
              *((_OWORD *)v118 - 1) = *((_OWORD *)v119 - 1);
              *(_OWORD *)v118 = v121;
              v118 -= 32;
              v119 -= 32;
              v120 -= 8;
            }
            while (v120);
            v104 = v117;
            if (v115 == (v115 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_144:
              v208 = v112;
              v209 = (char *)v102;
              v210 = &v111[4 * v110];
              if (v105)
                operator delete(v105);
              goto LABEL_112;
            }
          }
        }
        else
        {
          v16 = (v195 - v194) / 12;
        }
        do
        {
          v122 = *((_DWORD *)v104 - 1);
          v104 -= 4;
          *((_DWORD *)v112 - 1) = v122;
          v112 -= 4;
        }
        while (v104 != v105);
        goto LABEL_144;
      }
    }
    else
    {
      v101 = v97;
      v111 = 0;
      v112 = (char *)(4 * v107);
      *(_DWORD *)(4 * v107) = v100;
      v102 = 4 * v107 + 4;
      if (v104 != v105)
        goto LABEL_135;
    }
    v16 = (v195 - v194) / 12;
    goto LABEL_144;
  }
LABEL_146:
  for (i = 0; i != 5; ++i)
  {
    while (1)
    {
      v124 = v208;
      v125 = v209 - (_BYTE *)v208;
      if (v209 == v208)
        break;
      if (v125 < 0)
        sub_2394189F8();
      v200 = i;
      v126 = (unsigned int *)operator new(v209 - (_BYTE *)v208);
      v127 = &v126[v125 >> 2];
      memcpy(v126, v124, v125);
      v209 = (char *)v124;
      v201 = v126;
      v203 = v127;
      do
      {
        v129 = *v126;
        v130 = v217;
        v131 = *(unsigned int *)&v217[12 * v129];
        if ((_DWORD)v131 == -1 || *(_DWORD *)&v214[12 * v129] == -1 || *(_DWORD *)&v211[4 * v131] != -1)
        {
          v132 = *(unsigned int *)&v217[12 * v129 + 4];
          if ((_DWORD)v132 == -1)
            goto LABEL_195;
          goto LABEL_158;
        }
        *(_DWORD *)&v211[4 * v131] = *(_DWORD *)&v211[4 * v129];
        if (v124 < (_DWORD *)v210)
        {
          *v124 = v131;
          v134 = (uint64_t)(v124 + 1);
          goto LABEL_178;
        }
        v135 = v208;
        v136 = (char *)v124 - (_BYTE *)v208;
        v137 = ((char *)v124 - (_BYTE *)v208) >> 2;
        v138 = v137 + 1;
        if ((unint64_t)(v137 + 1) >> 62)
          goto LABEL_258;
        v139 = v210 - (_BYTE *)v208;
        if ((v210 - (_BYTE *)v208) >> 1 > v138)
          v138 = v139 >> 1;
        if ((unint64_t)v139 >= 0x7FFFFFFFFFFFFFFCLL)
          v140 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v140 = v138;
        if (v140)
        {
          if (v140 >> 62)
            goto LABEL_259;
          v141 = v140;
          v142 = operator new(4 * v140);
          v140 = v141;
          v143 = &v142[4 * v137];
          *v143 = v131;
          v134 = (uint64_t)(v143 + 1);
          if (v124 != (_DWORD *)v135)
          {
LABEL_173:
            v144 = (char *)(v124 - 1) - v135;
            if (v144 < 0xBC
              || &v142[v136 - 4 - (v144 & 0xFFFFFFFFFFFFFFFCLL)] > &v142[v136 - 4]
              || (_DWORD *)((char *)v124 - (v144 & 0xFFFFFFFFFFFFFFFCLL) - 4) > v124 - 1
              || (unint64_t)((char *)v124 - v142 - v136) < 0x20)
            {
              v145 = v124;
              v127 = v203;
            }
            else
            {
              v171 = (v144 >> 2) + 1;
              v172 = 4 * (v171 & 0x7FFFFFFFFFFFFFF8);
              v145 = &v124[v172 / 0xFFFFFFFFFFFFFFFCLL];
              v143 = (_DWORD *)((char *)v143 - v172);
              v173 = &v142[4 * v137 - 16];
              v174 = (__int128 *)(v124 - 4);
              v175 = v171 & 0x7FFFFFFFFFFFFFF8;
              do
              {
                v176 = *v174;
                *(v173 - 1) = *(v174 - 1);
                *v173 = v176;
                v173 -= 2;
                v174 -= 2;
                v175 -= 8;
              }
              while (v175);
              v127 = v203;
              if (v171 == (v171 & 0x7FFFFFFFFFFFFFF8))
              {
LABEL_176:
                v208 = v143;
                v209 = (char *)v134;
                v210 = &v142[4 * v140];
                if (!v135)
                  goto LABEL_178;
LABEL_177:
                operator delete(v135);
                v130 = v217;
                goto LABEL_178;
              }
            }
            do
            {
              v146 = *--v145;
              *--v143 = v146;
            }
            while (v145 != (_DWORD *)v135);
            goto LABEL_176;
          }
        }
        else
        {
          v142 = 0;
          v143 = (_DWORD *)(4 * v137);
          *(_DWORD *)(4 * v137) = v131;
          v134 = 4 * v137 + 4;
          if (v124 != (_DWORD *)v135)
            goto LABEL_173;
        }
        v127 = v203;
        v208 = v143;
        v209 = (char *)v134;
        v210 = &v142[4 * v140];
        if (v135)
          goto LABEL_177;
LABEL_178:
        v209 = (char *)v134;
        v124 = (_DWORD *)v134;
        v132 = *(unsigned int *)&v130[12 * v129 + 4];
        if ((_DWORD)v132 == -1)
          goto LABEL_195;
LABEL_158:
        if (*(_DWORD *)&v214[12 * v129 + 4] != -1 && *(_DWORD *)&v211[4 * v132] == -1)
        {
          *(_DWORD *)&v211[4 * v132] = *(_DWORD *)&v211[4 * v129];
          if (v124 < (_DWORD *)v210)
          {
            *v124 = v132;
            v133 = (uint64_t)(v124 + 1);
LABEL_194:
            v209 = (char *)v133;
            v124 = (_DWORD *)v133;
            goto LABEL_195;
          }
          v147 = v208;
          v148 = (char *)v124 - (_BYTE *)v208;
          v149 = ((char *)v124 - (_BYTE *)v208) >> 2;
          v150 = v149 + 1;
          if ((unint64_t)(v149 + 1) >> 62)
            goto LABEL_258;
          v151 = v210 - (_BYTE *)v208;
          if ((v210 - (_BYTE *)v208) >> 1 > v150)
            v150 = v151 >> 1;
          if ((unint64_t)v151 >= 0x7FFFFFFFFFFFFFFCLL)
            v152 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v152 = v150;
          if (v152)
          {
            if (v152 >> 62)
              goto LABEL_259;
            v153 = v152;
            v154 = operator new(4 * v152);
            v152 = v153;
            v155 = &v154[4 * v149];
            *v155 = v132;
            v133 = (uint64_t)(v155 + 1);
            if (v124 != (_DWORD *)v147)
            {
LABEL_189:
              v156 = (char *)(v124 - 1) - v147;
              if (v156 < 0xBC
                || &v154[v148 - 4 - (v156 & 0xFFFFFFFFFFFFFFFCLL)] > &v154[v148 - 4]
                || (_DWORD *)((char *)v124 - (v156 & 0xFFFFFFFFFFFFFFFCLL) - 4) > v124 - 1
                || (unint64_t)((char *)v124 - v154 - v148) < 0x20)
              {
                v157 = v124;
                v127 = v203;
              }
              else
              {
                v177 = (v156 >> 2) + 1;
                v178 = 4 * (v177 & 0x7FFFFFFFFFFFFFF8);
                v157 = &v124[v178 / 0xFFFFFFFFFFFFFFFCLL];
                v155 = (_DWORD *)((char *)v155 - v178);
                v179 = &v154[4 * v149 - 16];
                v180 = (__int128 *)(v124 - 4);
                v181 = v177 & 0x7FFFFFFFFFFFFFF8;
                do
                {
                  v182 = *v180;
                  *(v179 - 1) = *(v180 - 1);
                  *v179 = v182;
                  v179 -= 2;
                  v180 -= 2;
                  v181 -= 8;
                }
                while (v181);
                v127 = v203;
                if (v177 == (v177 & 0x7FFFFFFFFFFFFFF8))
                  goto LABEL_192;
              }
              do
              {
                v158 = *--v157;
                *--v155 = v158;
              }
              while (v157 != (_DWORD *)v147);
LABEL_192:
              v208 = v155;
              v209 = (char *)v133;
              v210 = &v154[4 * v152];
              if (!v147)
                goto LABEL_194;
LABEL_193:
              operator delete(v147);
              v130 = v217;
              goto LABEL_194;
            }
          }
          else
          {
            v154 = 0;
            v155 = (_DWORD *)(4 * v149);
            *(_DWORD *)(4 * v149) = v132;
            v133 = 4 * v149 + 4;
            if (v124 != (_DWORD *)v147)
              goto LABEL_189;
          }
          v127 = v203;
          v208 = v155;
          v209 = (char *)v133;
          v210 = &v154[4 * v152];
          if (!v147)
            goto LABEL_194;
          goto LABEL_193;
        }
LABEL_195:
        v159 = *(unsigned int *)&v130[12 * v129 + 8];
        if ((_DWORD)v159 != -1
          && *(_DWORD *)&v214[12 * v129 + 8] != -1
          && *(_DWORD *)&v211[4 * v159] == -1)
        {
          *(_DWORD *)&v211[4 * v159] = *(_DWORD *)&v211[4 * v129];
          if (v124 < (_DWORD *)v210)
          {
            *v124 = v159;
            v128 = (uint64_t)(v124 + 1);
            goto LABEL_152;
          }
          v160 = v208;
          v161 = (char *)v124 - (_BYTE *)v208;
          v162 = ((char *)v124 - (_BYTE *)v208) >> 2;
          v163 = v162 + 1;
          if ((unint64_t)(v162 + 1) >> 62)
LABEL_258:
            sub_2394189F8();
          v164 = v210 - (_BYTE *)v208;
          if ((v210 - (_BYTE *)v208) >> 1 > v163)
            v163 = v164 >> 1;
          if ((unint64_t)v164 >= 0x7FFFFFFFFFFFFFFCLL)
            v165 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v165 = v163;
          if (v165)
          {
            if (v165 >> 62)
LABEL_259:
              sub_239418A80();
            v166 = operator new(4 * v165);
            v167 = &v166[4 * v162];
            *v167 = v159;
            v128 = (uint64_t)(v167 + 1);
            if (v124 != (_DWORD *)v160)
            {
LABEL_208:
              v168 = (char *)(v124 - 1) - v160;
              if (v168 < 0xBC
                || &v166[v161 - 4 - (v168 & 0xFFFFFFFFFFFFFFFCLL)] > &v166[v161 - 4]
                || (_DWORD *)((char *)v124 - (v168 & 0xFFFFFFFFFFFFFFFCLL) - 4) > v124 - 1
                || (unint64_t)((char *)v124 - &v166[v161]) < 0x20)
              {
                v169 = v124;
                v127 = v203;
              }
              else
              {
                v183 = (v168 >> 2) + 1;
                v184 = 4 * (v183 & 0x7FFFFFFFFFFFFFF8);
                v169 = &v124[v184 / 0xFFFFFFFFFFFFFFFCLL];
                v167 = (_DWORD *)((char *)v167 - v184);
                v185 = &v166[4 * v162 - 16];
                v186 = (__int128 *)(v124 - 4);
                v187 = v183 & 0x7FFFFFFFFFFFFFF8;
                do
                {
                  v188 = *v186;
                  *(v185 - 1) = *(v186 - 1);
                  *v185 = v188;
                  v185 -= 2;
                  v186 -= 2;
                  v187 -= 8;
                }
                while (v187);
                v127 = v203;
                if (v183 == (v183 & 0x7FFFFFFFFFFFFFF8))
                {
LABEL_211:
                  v208 = v167;
                  v209 = (char *)v128;
                  v210 = &v166[4 * v165];
                  if (!v160)
                    goto LABEL_152;
LABEL_221:
                  operator delete(v160);
LABEL_152:
                  v209 = (char *)v128;
                  v124 = (_DWORD *)v128;
                  goto LABEL_153;
                }
              }
              do
              {
                v170 = *--v169;
                *--v167 = v170;
              }
              while (v169 != (_DWORD *)v160);
              goto LABEL_211;
            }
          }
          else
          {
            v166 = 0;
            v167 = (_DWORD *)(4 * v162);
            *(_DWORD *)(4 * v162) = v159;
            v128 = 4 * v162 + 4;
            if (v124 != (_DWORD *)v160)
              goto LABEL_208;
          }
          v127 = v203;
          v208 = v167;
          v209 = (char *)v128;
          v210 = &v166[4 * v165];
          if (v160)
            goto LABEL_221;
          goto LABEL_152;
        }
LABEL_153:
        ++v126;
      }
      while (v126 != v127);
      operator delete(v201);
      i = v200 + 1;
      if (v200 == 4)
        goto LABEL_244;
    }
    v209 = (char *)v208;
  }
LABEL_244:
  if (v208)
  {
    v209 = (char *)v208;
    operator delete(v208);
  }
  *a3 = (id)objc_msgSend(v196, "newBufferWithBytes:length:options:", v97, (char *)v205[1] - (char *)v97, 0);
  v189 = v211;
  *a4 = (id)objc_msgSend(v196, "newBufferWithBytes:length:options:", v211, v212 - v211, 0);
  if (v189)
  {
    v212 = v189;
    operator delete(v189);
  }
  if (v205[0])
    operator delete(v205[0]);
  if (v214)
  {
    v215 = v214;
    operator delete(v214);
  }
  if (v217)
  {
    v218 = v217;
    operator delete(v217);
  }

}

void sub_23952E0A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33,uint64_t a34,void *a35,uint64_t a36)
{
  uint64_t v36;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;

  v38 = a17;
  if (__p)
  {
    operator delete(__p);
    v38 = a17;
    v39 = a35;
    if (!a35)
    {
LABEL_3:
      v40 = a25;
      if (!a25)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else
  {
    v39 = a35;
    if (!a35)
      goto LABEL_3;
  }
  operator delete(v39);
  v38 = a17;
  v40 = a25;
  if (!a25)
  {
LABEL_4:
    v41 = *(void **)(v36 - 200);
    if (!v41)
      goto LABEL_5;
    goto LABEL_10;
  }
LABEL_9:
  operator delete(v40);
  v38 = a17;
  v41 = *(void **)(v36 - 200);
  if (!v41)
  {
LABEL_5:
    v42 = *(void **)(v36 - 176);
    if (!v42)
      goto LABEL_6;
    goto LABEL_11;
  }
LABEL_10:
  *(_QWORD *)(v36 - 192) = v41;
  operator delete(v41);
  v38 = a17;
  v42 = *(void **)(v36 - 176);
  if (!v42)
  {
LABEL_6:

    _Unwind_Resume(a1);
  }
LABEL_11:
  *(_QWORD *)(v36 - 168) = v42;
  operator delete(v42);

  _Unwind_Resume(a1);
}

void sub_23952E258(uint64_t a1, void *a2, _QWORD *a3, _QWORD *a4, void **a5, _QWORD *a6, _QWORD *a7)
{
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  void *v20;
  id v21;

  v21 = a2;
  if (!*(_BYTE *)(a1 + 168)
    || (*a3 = (id)objc_msgSend(v21, "newBufferWithBytes:length:options:", *(_QWORD *)(a1 + 144), *(_QWORD *)(a1 + 152) - *(_QWORD *)(a1 + 144), 0), !*(_BYTE *)(a1 + 200))|| (*a4 = (id)objc_msgSend(v21, "newBufferWithBytes:length:options:", *(_QWORD *)(a1 + 176), *(_QWORD *)(a1 + 184) - *(_QWORD *)(a1 + 176), 0), *a7 = (id)objc_msgSend(v21, "newBufferWithBytes:length:options:", *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24), 0), !*(_BYTE *)(a1 + 264))
    || (*a6 = (id)objc_msgSend(v21, "newBufferWithBytes:length:options:", *(_QWORD *)(a1 + 240), 0xAAAAAAAAAAAAAAACLL * ((*(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24)) >> 2), 0), !*(_BYTE *)(a1 + 232)))
  {
    sub_2394875CC();
  }
  v13 = (id)objc_msgSend(v21, "newBufferWithLength:options:", 0x11F7047DC11F7048 * ((uint64_t)(*(_QWORD *)(a1 + 216) - *(_QWORD *)(a1 + 208)) >> 4), 0);
  *a5 = v13;
  v14 = objc_msgSend(objc_retainAutorelease(v13), "contents");
  if (!*(_BYTE *)(a1 + 232))
    sub_2394875CC();
  v15 = *(_QWORD *)(a1 + 208);
  v16 = *(_QWORD *)(a1 + 216) - v15;
  if (v16)
  {
    v17 = v16 / 912;
    v18 = v14 + 4;
    v19 = (_QWORD *)(v15 + 184);
    do
    {
      *(_QWORD *)(v18 - 4) = *v19;
      v18 += 8;
      v19 += 114;
      --v17;
    }
    while (v17);
  }
  v20 = *a5;
  objc_msgSend(v20, "length");
  nullsub_4(v20);

}

void sub_23952E408(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_23952E41C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_23952E430(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_23952E444(uint64_t a1, void *a2, void *a3, void *a4, void *a5, void *a6, int a7, uint64_t a8)
{
  id v15;
  id v16;
  id v17;
  id v18;
  uint64_t *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  id v27;

  v27 = a2;
  v15 = a3;
  v16 = a4;
  v17 = a5;
  v18 = a6;
  v19 = sub_23953674C(a1, 6);
  sub_2397A9494((uint64_t)v19);
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  v21 = (void *)objc_opt_new();
  objc_msgSend(v21, "colorAttachments");
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v22, "objectAtIndexedSubscript:", 0);
  v23 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v23, "setTexture:", v17);
  objc_msgSend(v23, "setLoadAction:", 2);
  objc_msgSend(v23, "setStoreAction:", 1);
  objc_msgSend(v23, "setClearColor:", 0.0, 0.0, 0.0, 0.0);

  objc_msgSend(v21, "colorAttachments");
  v24 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v24, "objectAtIndexedSubscript:", 1);
  v25 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v25, "setTexture:", v18);
  objc_msgSend(v25, "setLoadAction:", 2);
  objc_msgSend(v25, "setStoreAction:", 1);
  objc_msgSend(v25, "setClearColor:", 0.0, 0.0, 0.0, 0.0);

  objc_msgSend(v21, "setRenderTargetWidth:", *(_QWORD *)a8);
  objc_msgSend(v21, "setRenderTargetHeight:", *(unsigned int *)(a8 + 4));
  objc_msgSend(v21, "setRenderTargetArrayLength:", 1);
  objc_msgSend(v21, "setDefaultRasterSampleCount:", 1);
  objc_msgSend(v27, "renderCommandEncoderWithDescriptor:", v21);
  v26 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v26, "setRenderPipelineState:", v20);
  objc_msgSend(v26, "setVertexBuffer:offset:atIndex:", v15, 0, 0);
  objc_msgSend(v26, "drawIndexedPrimitives:indexCount:indexType:indexBuffer:indexBufferOffset:", 3, (3 * a7), 1, v16, 0);
  objc_msgSend(v26, "endEncoding");

}

void sub_23952E660(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_23952E6D0(uint64_t a1, void *a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8, void *a9, void *a10, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16, void *a17, uint64_t *a18)
{
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  uint64_t *v29;
  void *v30;
  unint64_t v31;
  unint64_t v32;
  void *v33;
  uint64_t v35;
  id v36;
  id v37;
  id v38;
  id v39;
  id v40;
  id v41;
  id v42;
  id v43;
  id v44;
  id v45;
  id v46;
  _QWORD v47[3];
  _QWORD v48[4];

  v46 = a2;
  v45 = a3;
  v44 = a4;
  v43 = a5;
  v42 = a6;
  v41 = a7;
  v40 = a8;
  v39 = a9;
  v38 = a10;
  v37 = a11;
  v36 = a12;
  v24 = a13;
  v25 = a14;
  v26 = a15;
  v27 = a16;
  v28 = a17;
  v29 = sub_239536660(a1, 32);
  sub_2397A9494((uint64_t)v29);
  v30 = (void *)objc_claimAutoreleasedReturnValue();
  v31 = objc_msgSend(v30, "threadExecutionWidth");
  v32 = objc_msgSend(v30, "maxTotalThreadsPerThreadgroup");
  v35 = *a18;
  objc_msgSend(v46, "computeCommandEncoder");
  v33 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v33, "setTexture:atIndex:", v25, 0);
  objc_msgSend(v33, "setTexture:atIndex:", v26, 1);
  objc_msgSend(v33, "setTexture:atIndex:", v27, 2);
  objc_msgSend(v33, "setBuffer:offset:atIndex:", v45, 0, 0);
  objc_msgSend(v33, "setBuffer:offset:atIndex:", v44, 0, 1);
  objc_msgSend(v33, "setBuffer:offset:atIndex:", v43, 0, 2);
  objc_msgSend(v33, "setBuffer:offset:atIndex:", v42, 0, 3);
  objc_msgSend(v33, "setBuffer:offset:atIndex:", v41, 0, 4);
  objc_msgSend(v33, "setBuffer:offset:atIndex:", v40, 0, 5);
  objc_msgSend(v33, "setBuffer:offset:atIndex:", v39, 0, 6);
  objc_msgSend(v33, "setBuffer:offset:atIndex:", v38, 0, 7);
  objc_msgSend(v33, "setBuffer:offset:atIndex:", v37, 0, 8);
  objc_msgSend(v33, "setBuffer:offset:atIndex:", v36, 0, 9);
  objc_msgSend(v33, "setBuffer:offset:atIndex:", v24, 0, 10);
  objc_msgSend(v33, "setBytes:length:atIndex:", a18, 8, 11);
  objc_msgSend(v33, "setBuffer:offset:atIndex:", v28, 0, 12);
  objc_msgSend(v33, "setComputePipelineState:", v30);
  v48[0] = ((int)v31 + (int)v35 - 1) / v31;
  v48[1] = ((v32 / v31) + HIDWORD(v35) - 1) / (v32 / v31);
  v48[2] = 1;
  v47[0] = v31;
  v47[1] = v32 / v31;
  v47[2] = 1;
  objc_msgSend(v33, "dispatchThreadgroups:threadsPerThreadgroup:", v48, v47);
  objc_msgSend(v33, "endEncoding");

}

void sub_23952EA3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, void *a18, void *a19, void *a20,void *a21,void *a22,void *a23,void *a24,void *a25,void *a26,void *a27)
{
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;

  _Unwind_Resume(a1);
}

void sub_23952EAE0(uint64_t a1, unint64_t *a2, uint64_t a3, void *a4, int a5, _QWORD *a6)
{
  id v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  __int128 v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  __int128 v19;
  _QWORD v20[3];
  _QWORD *v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  v11 = objc_retainAutorelease(a4);
  v12 = objc_msgSend(v11, "contents");
  v13 = objc_retainAutorelease(v11);
  v14 = objc_msgSend(v13, "contents");
  *(_QWORD *)&v15 = *a6;
  v19 = v15;
  v16 = operator new(0x38uLL);
  *v16 = &off_250ADD8A0;
  v16[1] = a6;
  v16[2] = a1;
  v16[3] = a3;
  *((_DWORD *)v16 + 8) = a5;
  v16[5] = v12;
  v16[6] = v14;
  v21 = v16;
  sub_2397A376C(a2, DWORD1(v19), v20, 0);
  v17 = v21;
  if (v21 == v20)
  {
    v18 = 4;
    v17 = v20;
    goto LABEL_5;
  }
  if (v21)
  {
    v18 = 5;
LABEL_5:
    (*(void (**)(void))(*v17 + 8 * v18))();
  }
  objc_msgSend(v13, "length", v19);
  nullsub_4(v13);

}

void sub_23952EC1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  void *v15;
  char *v16;
  char *v18;
  uint64_t v19;

  v18 = a15;
  if (a15 == v16)
  {
    v19 = 4;
    v18 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v19 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v18 + 8 * v19))();
LABEL_6:

  _Unwind_Resume(a1);
}

void sub_23952EC6C(uint64_t a1, void *a2, void *a3, void *a4, uint64_t *a5)
{
  id v9;
  id v10;
  id v11;
  uint64_t *v12;
  void *v13;
  unint64_t v14;
  unint64_t v15;
  void *v16;
  uint64_t v17;
  _QWORD v18[3];
  _QWORD v19[3];

  v9 = a2;
  v10 = a3;
  v11 = a4;
  v12 = sub_239536660(a1, 33);
  sub_2397A9494((uint64_t)v12);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v14 = objc_msgSend(v13, "threadExecutionWidth");
  v15 = objc_msgSend(v13, "maxTotalThreadsPerThreadgroup");
  v17 = *a5;
  objc_msgSend(v9, "computeCommandEncoder");
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v16, "setTexture:atIndex:", v10, 0);
  objc_msgSend(v16, "setTexture:atIndex:", v11, 1);
  objc_msgSend(v16, "setBytes:length:atIndex:", a5, 8, 0);
  objc_msgSend(v16, "setComputePipelineState:", v13);
  v19[0] = ((int)v14 + (int)v17 - 1) / v14;
  v19[1] = ((v15 / v14) + HIDWORD(v17) - 1) / (v15 / v14);
  v19[2] = 1;
  v18[0] = v14;
  v18[1] = v15 / v14;
  v18[2] = 1;
  objc_msgSend(v16, "dispatchThreadgroups:threadsPerThreadgroup:", v19, v18);
  objc_msgSend(v16, "endEncoding");

}

void sub_23952EDB4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_23952EDD8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_23952EDF0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_23952EE10(uint64_t a1, void *a2, void *a3, void *a4, void *a5, uint64_t *a6)
{
  id v11;
  id v12;
  id v13;
  id v14;
  uint64_t *v15;
  void *v16;
  unint64_t v17;
  unint64_t v18;
  void *v19;
  uint64_t v20;
  _QWORD v21[3];
  _QWORD v22[3];

  v11 = a2;
  v12 = a3;
  v13 = a4;
  v14 = a5;
  v15 = sub_239536660(a1, 34);
  sub_2397A9494((uint64_t)v15);
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  v17 = objc_msgSend(v16, "threadExecutionWidth");
  v18 = objc_msgSend(v16, "maxTotalThreadsPerThreadgroup");
  v20 = *a6;
  objc_msgSend(v11, "computeCommandEncoder");
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v19, "setTexture:atIndex:", v12, 0);
  objc_msgSend(v19, "setTexture:atIndex:", v13, 1);
  objc_msgSend(v19, "setBuffer:offset:atIndex:", v14, 0, 0);
  objc_msgSend(v19, "setBytes:length:atIndex:", a6, 8, 1);
  objc_msgSend(v19, "setComputePipelineState:", v16);
  v22[0] = ((int)v17 + (int)v20 - 1) / v17;
  v22[1] = ((v18 / v17) + HIDWORD(v20) - 1) / (v18 / v17);
  v22[2] = 1;
  v21[0] = v17;
  v21[1] = v18 / v17;
  v21[2] = 1;
  objc_msgSend(v19, "dispatchThreadgroups:threadsPerThreadgroup:", v22, v21);
  objc_msgSend(v19, "endEncoding");

}

void sub_23952EF84(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_23952EFDC(uint64_t a1, void *a2, void *a3, void *a4, uint64_t *a5)
{
  id v9;
  id v10;
  id v11;
  uint64_t *v12;
  void *v13;
  unint64_t v14;
  unint64_t v15;
  void *v16;
  uint64_t v17;
  _QWORD v18[3];
  _QWORD v19[3];

  v9 = a2;
  v10 = a3;
  v11 = a4;
  v12 = sub_239536660(a1, 35);
  sub_2397A9494((uint64_t)v12);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v14 = objc_msgSend(v13, "threadExecutionWidth");
  v15 = objc_msgSend(v13, "maxTotalThreadsPerThreadgroup");
  v17 = *a5;
  objc_msgSend(v9, "computeCommandEncoder");
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v16, "setBuffer:offset:atIndex:", v11, 0, 0);
  objc_msgSend(v16, "setBuffer:offset:atIndex:", v10, 0, 1);
  objc_msgSend(v16, "setBytes:length:atIndex:", a5, 8, 2);
  objc_msgSend(v16, "setComputePipelineState:", v13);
  v19[0] = ((int)v14 + (int)v17 - 1) / v14;
  v19[1] = ((v15 / v14) + HIDWORD(v17) - 1) / (v15 / v14);
  v19[2] = 1;
  v18[0] = v14;
  v18[1] = v15 / v14;
  v18[2] = 1;
  objc_msgSend(v16, "dispatchThreadgroups:threadsPerThreadgroup:", v19, v18);
  objc_msgSend(v16, "endEncoding");

}

void sub_23952F12C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_23952F150(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_23952F168(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

uint64_t sub_23952F188(uint64_t a1, uint64_t a2, _QWORD *a3, char a4, unsigned int a5)
{
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  __int128 v10;
  __int128 v11;
  _QWORD *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  __int128 v26;
  __int128 v27;
  _QWORD *v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  void *v46;
  unsigned int v47;
  long double v48;
  void *v49;
  void *v50;
  uint64_t v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unsigned int *v56;
  unsigned int *v57;
  unsigned int v58;
  unsigned int v59;
  unsigned int v60;
  int *v61;
  int v62;
  id v63;
  int v64;
  id v65;
  int v66;
  id v67;
  void *v68;
  uint64_t v69;
  id v70;
  void *v71;
  void *v72;
  id v73;
  id v74;
  int v75;
  int v76;
  unsigned int v77;
  double v78;
  unsigned int v79;
  id v80;
  id v81;
  id v82;
  id v83;
  id v84;
  void *v85;
  id v86;
  const void *v87;
  uint64_t v88;
  char *v89;
  char *v90;
  void *v91;
  void *v92;
  char *v93;
  char *v94;
  void *v95;
  void *v96;
  int v98;
  void *context;
  int v100;
  id v101;
  id v102;
  id v103;
  id v104;
  id v105;
  id v106;
  id v107;
  id v108;
  void *v109;
  id v110;
  id v111;
  void *v112;
  void *v113;
  int v115;
  uint64_t v116;
  unsigned int v117;
  uint64_t v118;
  void *v119;
  void *v120;
  _QWORD *v121;
  _BYTE *v122;
  id v123;
  void *v124;
  const void **v125;
  void *v126;
  void *v127;
  void *v128;
  uint64_t v130;
  uint64_t v131;
  id v132;
  id v133;
  int v135;
  void *__p[2];
  char v137;
  _QWORD v138[4];
  void *v139;
  char *v140;
  uint64_t v141;
  void *v142;
  char *v143;
  uint64_t v144;
  id v145;
  id v146;
  void *v147;
  id v148;
  id v149;
  id v150;
  id v151;
  id v152;
  id v153;
  id v154;
  __int128 v155;
  std::__shared_weak_count *v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  std::__shared_weak_count *v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  char v164;
  _BYTE v165[24];
  _BYTE *v166;
  _QWORD v167[71];
  _BYTE v168[24];
  _BYTE *v169;
  _QWORD v170[71];
  _BYTE v171[24];
  _BYTE *v172;
  _BYTE v173[568];
  uint64_t v174;

  v174 = *MEMORY[0x24BDAC8D0];
  context = (void *)MEMORY[0x23B83EC40]();
  v116 = (uint64_t)a3;
  sub_2396FD800(a3, (uint64_t)v171);
  v170[0] = 0x42C8000000000000;
  sub_2396FCC68(v173, 100, v171, v170, 1.0);
  v7 = v172;
  if (v172 == v171)
  {
    v8 = 4;
    v7 = v171;
  }
  else
  {
    if (!v172)
      goto LABEL_6;
    v8 = 5;
  }
  (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_6:
  sub_2396FD534(&v159, v173, 40);
  v169 = 0;
  v9 = (char *)operator new(0x40uLL);
  *(_QWORD *)v9 = &off_250ADB9D8;
  *(_OWORD *)(v9 + 8) = v159;
  *((_QWORD *)v9 + 3) = v160;
  *((_QWORD *)&v159 + 1) = 0;
  v160 = 0;
  v10 = v161;
  v11 = v162;
  v161 = 0uLL;
  *((_OWORD *)v9 + 2) = v10;
  *((_OWORD *)v9 + 3) = v11;
  v162 = 0uLL;
  v169 = v9;
  v167[0] = 0x42C8000000000000;
  sub_2396FCC68(v170, 1, v168, v167, 1.0);
  v12 = v169;
  if (v169 == v168)
  {
    v13 = 4;
    v12 = v168;
    goto LABEL_10;
  }
  if (v169)
  {
    v13 = 5;
LABEL_10:
    (*(void (**)(void))(*v12 + 8 * v13))();
  }
  v14 = (std::__shared_weak_count *)*((_QWORD *)&v162 + 1);
  if (*((_QWORD *)&v162 + 1))
  {
    v15 = (unint64_t *)(*((_QWORD *)&v162 + 1) + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = (std::__shared_weak_count *)*((_QWORD *)&v161 + 1);
  if (*((_QWORD *)&v161 + 1))
  {
    v18 = (unint64_t *)(*((_QWORD *)&v161 + 1) + 8);
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  v20 = v160;
  if (v160)
  {
    p_shared_owners = (unint64_t *)&v160->__shared_owners_;
    do
      v22 = __ldaxr(p_shared_owners);
    while (__stlxr(v22 - 1, p_shared_owners));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  if (!*(_BYTE *)(a1 + 232))
    sub_2394875CC();
  v24 = *(_QWORD *)(a1 + 208);
  v23 = *(_QWORD *)(a1 + 216);
  sub_2396FD534(&v155, v173, 60);
  v166 = 0;
  v25 = (char *)operator new(0x40uLL);
  *(_QWORD *)v25 = &off_250ADB9D8;
  *(_OWORD *)(v25 + 8) = v155;
  *((_QWORD *)v25 + 3) = v156;
  *((_QWORD *)&v155 + 1) = 0;
  v156 = 0;
  v26 = v157;
  v27 = v158;
  v157 = 0uLL;
  *((_OWORD *)v25 + 2) = v26;
  *((_OWORD *)v25 + 3) = v27;
  v158 = 0uLL;
  v166 = v25;
  *(_QWORD *)&v163 = 0x42C8000000000000;
  sub_2396FCC68(v167, 0x823EE08FB823EE09 * ((v23 - v24) >> 4), v165, &v163, 1.0);
  v28 = v166;
  if (v166 == v165)
  {
    v29 = 4;
    v28 = v165;
    goto LABEL_31;
  }
  if (v166)
  {
    v29 = 5;
LABEL_31:
    (*(void (**)(void))(*v28 + 8 * v29))();
  }
  v30 = (std::__shared_weak_count *)*((_QWORD *)&v158 + 1);
  if (*((_QWORD *)&v158 + 1))
  {
    v31 = (unint64_t *)(*((_QWORD *)&v158 + 1) + 8);
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  v33 = (std::__shared_weak_count *)*((_QWORD *)&v157 + 1);
  if (*((_QWORD *)&v157 + 1))
  {
    v34 = (unint64_t *)(*((_QWORD *)&v157 + 1) + 8);
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  v36 = v156;
  if (v156)
  {
    v37 = (unint64_t *)&v156->__shared_owners_;
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
  if (!*(_BYTE *)(a1 + 232))
    sub_2394875CC();
  if (*(_QWORD *)(a1 + 216) == *(_QWORD *)(a1 + 208))
  {
    v88 = 0;
  }
  else
  {
    nullsub_4(a2);
    sub_2397A9494(v39);
    v40 = (void *)objc_claimAutoreleasedReturnValue();
    v119 = v40;
    v41 = sub_2397A9F50(a2);
    sub_2397A9494(v41);
    v126 = (void *)objc_claimAutoreleasedReturnValue();
    if (!*(_BYTE *)(a1 + 232))
      sub_2394875CC();
    v100 = -1205604855 * ((*(_QWORD *)(a1 + 216) - *(_QWORD *)(a1 + 208)) >> 4);
    if (v100)
    {
      v153 = 0;
      v154 = 0;
      v151 = 0;
      v152 = 0;
      v150 = 0;
      sub_23952CE90(a1, v40, &v154, &v153, &v152, &v151, &v150, a5);
      v103 = v154;
      v104 = v153;
      v106 = v152;
      v101 = v151;
      v102 = v150;
      v148 = 0;
      v149 = 0;
      v146 = 0;
      v147 = 0;
      v145 = 0;
      sub_23952E258(a1, v40, &v149, &v148, &v147, &v146, &v145);
      v123 = v149;
      v105 = v148;
      v109 = v147;
      v108 = v146;
      v107 = v145;
      v132 = (id)objc_msgSend(v40, "newBufferWithLength:options:", *(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24), 0);
      v133 = (id)objc_msgSend(v40, "newBufferWithLength:options:", 0xAAAAAAAAAAAAAAACLL * ((*(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24)) >> 2), 0);
      if (!*(_BYTE *)(a1 + 232))
        sub_2394875CC();
      v42 = *(_QWORD *)(*(_QWORD *)(a1 + 208) + 184);
      v43 = v42;
      v130 = v42;
      v44 = HIDWORD(v42);
      v45 = HIDWORD(v42) * v42;
      v110 = (id)objc_msgSend(v40, "newBufferWithLength:options:", 4 * (HIDWORD(v42) * v42), 0);
      v115 = v44;
      objc_msgSend(MEMORY[0x24BDDD740], "texture2DDescriptorWithPixelFormat:width:height:mipmapped:", 13, v43, v44, 0);
      v46 = (void *)objc_claimAutoreleasedReturnValue();
      v118 = v43;
      objc_msgSend(v46, "setUsage:", 3);
      v127 = (void *)objc_msgSend(v119, "newTextureWithDescriptor:", v46);

      if (v44 >= v43)
        v47 = v43;
      else
        v47 = v44;
      v48 = log2((double)v47);
      v142 = 0;
      v143 = 0;
      v144 = 0;
      v139 = 0;
      v140 = 0;
      v141 = 0;
      *(_QWORD *)&v163 = v130;
      sub_23955D808(v119, &v139, &v142, (v48 + -1.0), &v163, 1);
      v111 = (id)objc_msgSend(v119, "newBufferWithLength:options:", (3 * v45), 0);
      v120 = (void *)objc_msgSend(v119, "newBufferWithLength:options:", (4 * v45), 0);
      objc_msgSend(MEMORY[0x24BDDD740], "texture2DDescriptorWithPixelFormat:width:height:mipmapped:", 13, v43, v44, 0);
      v49 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v49, "setUsage:", 7);
      v128 = (void *)objc_msgSend(v119, "newTextureWithDescriptor:", v49);

      objc_msgSend(MEMORY[0x24BDDD740], "texture2DDescriptorWithPixelFormat:width:height:mipmapped:", 13, v43, v44, 0);
      v50 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v50, "setUsage:", 3);
      v51 = objc_msgSend(v119, "newTextureWithDescriptor:", v50);
      v113 = (void *)objc_msgSend(v119, "newTextureWithDescriptor:", v50);
      v112 = (void *)v51;

      objc_msgSend(MEMORY[0x24BDDD740], "texture2DDescriptorWithPixelFormat:width:height:mipmapped:", 53, v118, v44, 0);
      v52 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v52, "setUsage:", 5);
      v124 = (void *)objc_msgSend(v119, "newTextureWithDescriptor:", v52);

      v53 = a1;
      v98 = sub_2396FD7B0(v116);
      if ((v98 & 1) == 0)
      {
        v164 = 0;
        LOBYTE(v163) = 0;
        sub_2396FCDAC((uint64_t)v170, &v163, 1);
        if (v164 < 0)
          operator delete((void *)v163);
        sub_2397A2A50((uint64_t)&v163, a5, 0);
        v131 = 0;
        while (1)
        {
          v137 = 0;
          LOBYTE(__p[0]) = 0;
          sub_2396FD394(v138, (uint64_t)v167, (__int128 *)__p);
          if (v137 < 0)
            operator delete(__p[0]);
          if ((sub_2396FD7B0(v116) & 1) != 0)
            break;
          if (!*(_BYTE *)(v53 + 232))
            sub_2394875CC();
          v54 = *(_QWORD *)(v53 + 208);
          v55 = v54 + 912 * v131;
          __p[0] = 0;
          __p[0] = *(void **)(v55 + 184);
          v56 = *(unsigned int **)(v55 + 24);
          v57 = *(unsigned int **)(v55 + 32);
          if (v56 == v57)
          {
            v58 = 0;
          }
          else
          {
            v58 = 0;
            v59 = 2;
            do
            {
              if (!*(_BYTE *)(a1 + 200))
                sub_2394875CC();
              v60 = *v56;
              v61 = (int *)(*(_QWORD *)(a1 + 176) + 12 * *v56);
              *(_DWORD *)(objc_msgSend(objc_retainAutorelease(v133), "contents") + 4 * v58) = v60;
              v62 = *v61;
              v63 = objc_retainAutorelease(v132);
              *(_DWORD *)(objc_msgSend(v63, "contents") + 4 * (v59 - 2)) = v62;
              v64 = v61[1];
              v65 = objc_retainAutorelease(v63);
              *(_DWORD *)(objc_msgSend(v65, "contents") + 4 * (v59 - 1)) = v64;
              v66 = v61[2];
              *(_DWORD *)(objc_msgSend(objc_retainAutorelease(v65), "contents") + 4 * v59) = v66;
              ++v58;
              ++v56;
              v59 += 3;
            }
            while (v56 != v57);
          }
          nullsub_4(v133);
          nullsub_4(v132);
          v67 = objc_retainAutorelease(v111);
          v68 = (void *)objc_msgSend(v67, "contents");
          v69 = v54 + 912 * v131;
          v122 = (_BYTE *)(v69 + 200);
          v121 = (_QWORD *)(v69 + 80);
          if (*(_BYTE *)(v69 + 200) && *(_QWORD *)(v54 + 912 * v131 + 104))
            (*(void (**)(_QWORD, uint64_t, const char *))(*(_QWORD *)*v121 + 88))(*v121, 1, "unknown location");
          v125 = (const void **)(v54 + 912 * v131 + 104);
          memcpy(v68, *v125, (3 * HIDWORD(__p[0]) * LODWORD(__p[0])));
          nullsub_4(v67);
          v70 = objc_retainAutorelease(v110);
          bzero((void *)objc_msgSend(v70, "contents"), objc_msgSend(v70, "length"));
          objc_msgSend(v70, "length");
          objc_msgSend(v126, "commandBuffer", nullsub_4(v70).n128_f64[0]);
          v71 = (void *)objc_claimAutoreleasedReturnValue();
          sub_23952E444(a2, v71, v123, v132, v124, v128, v58, (uint64_t)__p);
          sub_23952E6D0(a2, v71, v103, v106, v133, v104, v101, v102, v123, v105, v107, v108, v109, v124, v128, v127, v70, (uint64_t *)__p);
          nullsub_4(v71);
          sub_23971DB68();
          objc_msgSend(v71, "commit");
          objc_msgSend(v71, "waitUntilCompleted");

          sub_23952EAE0(a1, (unint64_t *)&v163, v55 + 72, v70, v131, __p);
          objc_msgSend(v126, "commandBuffer");
          v72 = (void *)objc_claimAutoreleasedReturnValue();
          sub_23952EC6C(a2, v72, v128, v112, (uint64_t *)__p);
          v73 = v112;
          v74 = v113;
          sub_23952EC6C(a2, v72, v73, v74, (uint64_t *)__p);
          sub_23952EC6C(a2, v72, v74, v73, (uint64_t *)__p);
          sub_23952EC6C(a2, v72, v73, v74, (uint64_t *)__p);
          sub_23952EC6C(a2, v72, v74, v73, (uint64_t *)__p);
          sub_23952EC6C(a2, v72, v73, v74, (uint64_t *)__p);
          sub_23952EC6C(a2, v72, v74, v73, (uint64_t *)__p);
          sub_23952EC6C(a2, v72, v73, v74, (uint64_t *)__p);
          sub_23952EC6C(a2, v72, v74, v73, (uint64_t *)__p);
          sub_23952EC6C(a2, v72, v73, v74, (uint64_t *)__p);
          sub_23952EE10(a2, v72, v74, v127, v70, (uint64_t *)__p);

          v75 = HIDWORD(__p[0]);
          v76 = (int)__p[0];
          if (HIDWORD(__p[0]) >= LODWORD(__p[0]))
            v77 = __p[0];
          else
            v77 = HIDWORD(__p[0]);
          v78 = log2((double)v77) + -1.0;
          v79 = v78;
          if (v76 != (_DWORD)v118 || v75 != v115)
            sub_23955D808(v119, &v139, &v142, v78, __p, 1);
          v135 = 1;
          sub_23955DA4C(a2, v72, v127, v70, v120, (_QWORD **)&v142, &v139, (uint64_t *)__p, (uint64_t)&v135, v79, 1);
          sub_23952EFDC(a2, v72, v67, v70, (uint64_t *)__p);
          v117 = v79;
          v80 = v67;
          v81 = v70;
          v82 = v128;
          v83 = v127;
          sub_23955E308(a2, v72, v82, v83, v80, v81, (uint64_t *)__p);
          sub_23955E308(a2, v72, v83, v82, v81, v80, (uint64_t *)__p);
          sub_23955E308(a2, v72, v82, v83, v80, v81, (uint64_t *)__p);
          if ((a4 & 1) != 0)
          {
            v135 = 0;
            sub_23955DA4C(a2, v72, v83, v81, v120, (_QWORD **)&v142, &v139, (uint64_t *)__p, (uint64_t)&v135, v117, 0);
          }
          nullsub_4(v72);
          v84 = v81;
          sub_23971DB68();
          objc_msgSend(v72, "commit");
          objc_msgSend(v72, "waitUntilCompleted");

          v85 = (void *)*v125;
          if (*v122 && v85)
          {
            (*(void (**)(_QWORD, uint64_t, const char *))(*(_QWORD *)*v121 + 88))(*v121, 1, "unknown location");
            v85 = (void *)*v125;
          }
          v86 = objc_retainAutorelease(v84);
          v87 = (const void *)objc_msgSend(v86, "contents");
          memcpy(v85, v87, (3 * HIDWORD(__p[0]) * LODWORD(__p[0])));

          sub_2396FD3E8((uint64_t)v138);
          ++v131;
          v53 = a1;
          if ((_DWORD)v131 == v100)
            goto LABEL_88;
        }
        sub_2396FD3E8((uint64_t)v138);
LABEL_88:
        sub_2397A2E14(&v163);
      }

      v89 = (char *)v139;
      if (v139)
      {
        v90 = v140;
        v91 = v139;
        if (v140 != v139)
        {
          do
          {
            v92 = (void *)*((_QWORD *)v90 - 2);
            v90 -= 16;

          }
          while (v90 != v89);
          v91 = v139;
        }
        v140 = v89;
        operator delete(v91);
      }
      v93 = (char *)v142;
      if (v142)
      {
        v94 = v143;
        v95 = v142;
        if (v143 != v142)
        {
          do
          {
            v96 = (void *)*((_QWORD *)v94 - 2);
            v94 -= 16;

          }
          while (v94 != v93);
          v95 = v142;
        }
        v143 = v93;
        operator delete(v95);
      }

      v88 = v98 ^ 1u;
    }
    else
    {
      v88 = 0;
    }

  }
  sub_2396FCD14((uint64_t)v167);
  sub_2396FCD14((uint64_t)v170);
  sub_2396FCD14((uint64_t)v173);
  objc_autoreleasePoolPop(context);
  return v88;
}

void sub_239530148(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,void *a23,void *a24,void *a25,void *a26,void *a27,void *a28,void *a29,void *a30,void *a31,void *a32,void *a33,void *a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *a40,void *a41,uint64_t a42,uint64_t a43,void *a44,void *a45,uint64_t a46,void *a47,void *a48,void *a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,void *a54,void *a55,uint64_t a56,uint64_t a57,void *__p,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *a65;
  void *a68;

  sub_23952CAE4(&a65);
  sub_23952CAE4(&a68);

  sub_2396FCD14((uint64_t)&STACK[0x440]);
  sub_2396FCD14((uint64_t)&STACK[0x698]);
  sub_2396FCD14((uint64_t)&STACK[0x8F0]);
  _Unwind_Resume(a1);
}

_DWORD *sub_239530504(_DWORD *a1)
{
  if (*a1 != 2)
    sub_239A232BC((uint64_t)(a1 + 2));
  return a1;
}

void sub_239530540()
{
  JUMPOUT(0x23B83E31CLL);
}

__n128 sub_239530554(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_250ADD810;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 sub_239530594(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_250ADD810;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_2395305BC(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  uint64_t v8;
  float *v9;
  float *v10;
  float *v11;

  v2 = *(_QWORD *)(result + 8);
  if (!*(_BYTE *)(v2 + 200) || !*(_BYTE *)(v2 + 168) || !*(_BYTE *)(v2 + 264) || !*(_BYTE *)(v2 + 232))
    sub_2394875CC();
  v3 = *a2;
  v4 = *(unsigned int *)(*(_QWORD *)(v2 + 240) + 4 * *a2);
  v5 = *(_QWORD *)(v2 + 208);
  if (0x823EE08FB823EE09 * ((*(_QWORD *)(v2 + 216) - v5) >> 4) > v4)
  {
    v6 = v5 + 912 * v4;
    if (*(_BYTE *)(v6 + 208))
    {
      v7 = (unsigned int *)(*(_QWORD *)(v2 + 176) + 12 * v3);
      v8 = *(_QWORD *)(v2 + 144);
      v9 = (float *)(v8 + 8 * *v7);
      v10 = (float *)(v8 + 8 * v7[1]);
      v11 = (float *)(v8 + 8 * v7[2]);
      *(_BYTE *)(**(_QWORD **)(result + 16) + v3) = (float)((float)((float)(fabsf((float)((float)(*v10 - *v9)* (float)(v11[1] - v9[1]))- (float)((float)(*v11 - *v9)* (float)(v10[1] - v9[1])))* 0.5)* (float)*(unsigned int *)(v6 + 184))* (float)*(unsigned int *)(v6 + 188)) < *(float *)(result + 24);
    }
  }
  return result;
}

void sub_2395306BC(char **a1, unsigned int a2, _QWORD *a3, uint64_t *a4, unint64_t *a5, char a6)
{
  void **p_p;
  unsigned int *v11;
  unsigned int *v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _BYTE *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  int *v27;
  uint64_t v28;
  _DWORD *v29;
  _DWORD *v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  _DWORD *v39;
  unint64_t v40;
  BOOL v42;
  _DWORD *v44;
  unint64_t v45;
  _QWORD *v46;
  _QWORD *v47;
  uint64_t v48;
  int v49;
  void *__p;
  unsigned int *v51;
  uint64_t v52;

  p_p = (void **)a1;
  __p = 0;
  v51 = 0;
  v52 = 0;
  if ((a6 & 1) == 0)
  {
    if (&__p == (void **)a1)
    {
      v12 = 0;
      v11 = 0;
    }
    else
    {
      sub_2394750BC(&__p, *a1, a1[1], 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 2));
      v11 = (unsigned int *)__p;
      v12 = v51;
    }
    v13 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (v12 - v11));
    if (v12 == v11)
      v14 = 0;
    else
      v14 = v13;
    sub_239530B68(v11, v12, (uint64_t)&v49, v14, 1);
    p_p = &__p;
  }
  v15 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)p_p[1] - (_BYTE *)*p_p) >> 2);
  v16 = (uint64_t)(a3[1] - *a3) >> 2;
  if (v15 <= v16)
  {
    if (v15 < v16)
      a3[1] = *a3 - 0x5555555555555554 * (((_BYTE *)p_p[1] - (_BYTE *)*p_p) >> 2);
  }
  else
  {
    sub_2394807B4((uint64_t)a3, v15 - v16);
  }
  v49 = 0;
  v17 = (a4[1] - *a4) >> 2;
  if (a2 <= v17)
  {
    if (a2 < v17)
      a4[1] = *a4 + 4 * a2;
  }
  else
  {
    sub_2394DE27C((uint64_t)a4, a2 - v17, (const float *)&v49);
  }
  v18 = (unint64_t)*p_p;
  v19 = p_p[1];
  v20 = (v19 - (_BYTE *)*p_p) / 12;
  v21 = (uint64_t)(a5[1] - *a5) >> 2;
  if (v20 <= v21)
  {
    if (v20 < v21)
      a5[1] = *a5 + 4 * v20;
  }
  else
  {
    sub_23942CB44((uint64_t)a5, v20 - v21);
    v18 = (unint64_t)*p_p;
    v19 = p_p[1];
    v20 = (v19 - (_BYTE *)*p_p) / 12;
  }
  if (v19 != (_BYTE *)v18)
  {
    v22 = *a5;
    v23 = (_QWORD *)*a3;
    if (v20 <= 1)
      v24 = 1;
    else
      v24 = v20;
    if (v24 < 0xA)
    {
      v25 = 0;
LABEL_27:
      v26 = v24 - v25;
      v27 = (int *)(v18 + 12 * v25 + 8);
      v28 = 4 * v25;
      v29 = (_DWORD *)(v22 + v28);
      v30 = (_DWORD *)((char *)v23 + v28);
      do
      {
        *v29++ = *(v27 - 2);
        v31 = *v27;
        v27 += 3;
        *v30++ = v31;
        --v26;
      }
      while (v26);
      goto LABEL_29;
    }
    v25 = 0;
    v40 = v18 + 12 * v24;
    v42 = (unint64_t)v23 < v40 && v18 + 8 < (unint64_t)v23 + 4 * v24;
    if (v18 < v22 + 4 * v24 && v22 < v40 - 8)
      goto LABEL_27;
    if (v42)
      goto LABEL_27;
    v25 = v24 & 0xFFFFFFFFFFFFFFFELL;
    v44 = (_DWORD *)(v18 + 12);
    v45 = v24 & 0xFFFFFFFFFFFFFFFELL;
    v46 = (_QWORD *)*a3;
    v47 = (_QWORD *)*a5;
    do
    {
      LODWORD(v48) = *(v44 - 3);
      HIDWORD(v48) = *v44;
      *v47++ = v48;
      LODWORD(v48) = *(v44 - 1);
      HIDWORD(v48) = v44[2];
      *v46++ = v48;
      v44 += 6;
      v45 -= 2;
    }
    while (v45);
    if (v24 != v25)
      goto LABEL_27;
  }
LABEL_29:
  if (v19 != (_BYTE *)v18)
  {
    v32 = *a4;
    v33 = a4[1];
    if (v33 != *a4)
    {
      v34 = 0;
      v35 = 0;
      v36 = (v33 - v32) >> 2;
      v37 = v18 + 4;
      do
      {
        if (v34 <= v20)
          v38 = v20;
        else
          v38 = v34;
        v39 = (_DWORD *)(v37 + 12 * v34);
        while (1)
        {
          if (v38 == v34)
            sub_23941D884();
          if (v35 != *v39)
            break;
          ++*(_DWORD *)(v32 + 4 * v35);
          ++v34;
          v39 += 3;
          if (v20 == v34)
            goto LABEL_42;
        }
        if (v34 >= v20)
          break;
        ++v35;
      }
      while (v35 < v36);
    }
  }
LABEL_42:
  if (__p)
  {
    v51 = (unsigned int *)__p;
    operator delete(__p);
  }
}

void sub_2395309E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_239530A0C(uint64_t a1, int a2, unsigned int **a3)
{
  void *v6;
  void *v7;
  void *v8;
  unsigned int *v9;
  unsigned int *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *result;
  _QWORD *v14;
  unsigned int *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  unsigned int v19;

  if (*(__int16 *)(a1 + 24) < 0)
  {
    free(*(void **)(a1 + 8));
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)a1 = 0u;
  }
  else
  {
    v6 = *(void **)(a1 + 8);
    if (v6)
    {
      free(v6);
      *(_QWORD *)(a1 + 8) = 0;
    }
    v7 = *(void **)(a1 + 16);
    if (v7)
    {
      free(v7);
      *(_QWORD *)(a1 + 16) = 0;
    }
    v8 = *(void **)(a1 + 32);
    if (v8)
    {
      free(v8);
      *(_QWORD *)(a1 + 32) = 0;
    }
    *(_QWORD *)(a1 + 40) = 0;
  }
  v10 = *a3;
  v9 = a3[1];
  v11 = (char *)v9 - (char *)*a3;
  v12 = v11 >> 2;
  *(_DWORD *)a1 = a2;
  *(_DWORD *)(a1 + 4) = v11 >> 2;
  result = malloc_type_malloc(2 * v11 + 8, 0x100004000313F17uLL);
  *(_QWORD *)(a1 + 8) = result;
  *result = 0;
  if (v9 == v10)
  {
    *(_QWORD *)(a1 + 40) = 0;
  }
  else
  {
    v14 = result;
    result = 0;
    v15 = *a3;
    v16 = 2;
    if ((unint64_t)(v12 + 1) > 2)
      v16 = v12 + 1;
    v17 = v16 - 1;
    v18 = v14 + 1;
    do
    {
      v19 = *v15++;
      result = (_QWORD *)((char *)result + v19);
      *v18++ = result;
      --v17;
    }
    while (v17);
    *(_QWORD *)(a1 + 40) = result;
    if (result)
    {
      *(_QWORD *)(a1 + 16) = malloc_type_calloc((size_t)result, 4uLL, 0x100004052888210uLL);
      result = malloc_type_malloc(4 * *(_QWORD *)(a1 + 40) * *(unsigned __int8 *)(a1 + 28) * *(unsigned __int8 *)(a1 + 28), 0x9004C1C4uLL);
      *(_QWORD *)(a1 + 32) = result;
    }
  }
  return result;
}

unsigned int *sub_239530B68(unsigned int *result, unsigned int *a2, uint64_t a3, uint64_t a4, char a5)
{
  unsigned int *v7;
  unsigned int *v8;
  unsigned int *v9;
  unsigned int *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int *v20;
  unsigned int v21;
  BOOL v22;
  _BOOL4 v23;
  _BOOL4 v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int *v27;
  BOOL v28;
  _BOOL4 v29;
  _BOOL4 v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  _BOOL4 v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  _BOOL4 v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int v41;
  _BOOL4 v42;
  uint64_t v43;
  uint64_t *v44;
  unsigned int *v45;
  unsigned int *v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int *v49;
  unsigned int v50;
  unsigned int v51;
  BOOL v52;
  BOOL v53;
  unsigned int v54;
  _BOOL4 v55;
  _BOOL4 v56;
  unsigned int v57;
  uint64_t v58;
  unsigned int v59;
  uint64_t v60;
  unsigned int v61;
  _BOOL4 v62;
  uint64_t v63;
  unsigned int v64;
  unsigned int v65;
  uint64_t v66;
  unsigned int v67;
  unsigned int v68;
  _BOOL4 v69;
  uint64_t v70;
  uint64_t v71;
  unsigned int v72;
  unsigned int v73;
  _BOOL4 v74;
  uint64_t v75;
  uint64_t *v76;
  unsigned int *v77;
  unsigned int *v78;
  unsigned int v79;
  unsigned int v80;
  unsigned int *v81;
  unsigned int v82;
  unsigned int v83;
  BOOL v84;
  BOOL v85;
  unsigned int v86;
  _BOOL4 v87;
  _BOOL4 v88;
  unsigned int v89;
  uint64_t v90;
  unsigned int v91;
  uint64_t v92;
  unsigned int v93;
  _BOOL4 v94;
  uint64_t v95;
  unsigned int v96;
  unsigned int v97;
  uint64_t v98;
  unsigned int v99;
  unsigned int v100;
  _BOOL4 v101;
  uint64_t v102;
  unsigned int v103;
  BOOL v104;
  _BOOL4 v105;
  unsigned int v106;
  unsigned int v107;
  _BOOL4 v108;
  unsigned int v109;
  _BOOL4 v110;
  uint64_t v111;
  unsigned int v112;
  unsigned int v113;
  BOOL v114;
  unsigned int *v115;
  char v116;
  BOOL v117;
  unsigned int v118;
  unsigned int v119;
  unsigned int *v120;
  unsigned int v121;
  _BOOL4 v122;
  _BOOL4 v123;
  uint64_t v124;
  _QWORD *v125;
  unsigned int v126;
  unsigned int v127;
  unsigned int v128;
  BOOL v129;
  unsigned int *v130;
  unsigned int v131;
  _BOOL4 v132;
  uint64_t v133;
  unsigned int *v134;
  BOOL v135;
  char v136;
  uint64_t v137;
  unsigned int *v138;
  unsigned int *v139;
  unsigned int *v140;
  unsigned int v141;
  unsigned int v142;
  unsigned int v143;
  _BOOL4 v144;
  unsigned int v145;
  uint64_t v146;
  char *v147;
  unsigned int v148;
  BOOL v149;
  BOOL v150;
  unsigned int v151;
  uint64_t v152;
  unsigned int v153;
  unsigned int v154;
  _BOOL4 v155;
  unsigned int *v156;
  unsigned int v157;
  unsigned int v158;
  unsigned int v159;
  _BOOL4 v160;
  unsigned int v161;
  unsigned int *v162;
  unsigned int *v163;
  uint64_t v164;
  unsigned int v165;
  BOOL v166;
  BOOL v167;
  unsigned int v168;
  unsigned int v169;
  _BOOL4 v170;
  unsigned int v171;
  uint64_t v172;
  unsigned int v173;
  unsigned int *v174;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  unsigned int v197;
  unsigned int v198;
  unsigned int v199;
  unsigned int v200;
  unsigned int v201;
  unsigned int v202;
  unsigned int v203;
  unsigned int v204;
  unsigned int v205;
  unsigned int v206;
  unsigned int v207;
  unsigned int v208;
  unsigned int v209;
  unsigned int v210;
  unsigned int v211;
  unsigned int v212;
  unsigned int v213;
  unsigned int v214;
  unsigned int v215;
  unsigned int v216;
  unsigned int v217;

  v7 = result;
LABEL_2:
  v8 = a2 - 3;
  v174 = a2 - 6;
  v9 = a2 - 9;
  v10 = v7;
LABEL_3:
  v11 = 1 - a4;
  while (2)
  {
    v7 = v10;
    v12 = v11;
    v13 = (char *)a2 - (char *)v10;
    v14 = 0xAAAAAAAAAAAAAAABLL * (a2 - v10);
    switch(v14)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v118 = *(a2 - 3);
        v119 = *(a2 - 2);
        v120 = a2 - 3;
        v121 = v10[1];
        v122 = v118 < *v10;
        v135 = v119 == v121;
        v123 = v119 < v121;
        if (!v135)
          v122 = v123;
        if (v122)
        {
          v214 = v10[2];
          v193 = *(_QWORD *)v10;
          v124 = *(_QWORD *)v120;
          v10[2] = v120[2];
          *(_QWORD *)v10 = v124;
          *(_QWORD *)v120 = v193;
          v120[2] = v214;
        }
        return result;
      case 3uLL:
        v125 = v10 + 3;
        v126 = v10[3];
        v127 = v10[4];
        v128 = v10[1];
        v135 = v127 == v128;
        v129 = v127 < v128;
        if (v135)
          v129 = v126 < *v10;
        v131 = *(a2 - 2);
        v130 = a2 - 3;
        v132 = *(a2 - 3) < v126;
        if (v131 != v127)
          v132 = v131 < v127;
        if (v129)
        {
          if (v132)
          {
            v215 = v10[2];
            v194 = *(_QWORD *)v10;
            v133 = *(_QWORD *)v130;
            v10[2] = *(a2 - 1);
            *(_QWORD *)v10 = v133;
            *(_QWORD *)v130 = v194;
            *(a2 - 1) = v215;
          }
          else
          {
            v217 = v10[2];
            v196 = *(_QWORD *)v10;
            *(_QWORD *)v10 = *v125;
            v10[2] = v10[5];
            *v125 = v196;
            v10[5] = v217;
            v168 = *(a2 - 2);
            v169 = v10[4];
            v135 = v168 == v169;
            v170 = v168 < v169;
            if (v135)
              v170 = *(a2 - 3) < v10[3];
            if (v170)
            {
              v171 = v10[5];
              v172 = *v125;
              v173 = *(a2 - 1);
              *v125 = *(_QWORD *)v130;
              v10[5] = v173;
              *(_QWORD *)v130 = v172;
              *(a2 - 1) = v171;
            }
          }
        }
        else if (v132)
        {
          v151 = v10[5];
          v152 = *v125;
          v153 = *(a2 - 1);
          *v125 = *(_QWORD *)v130;
          v10[5] = v153;
          *(_QWORD *)v130 = v152;
          *(a2 - 1) = v151;
          v154 = v10[4];
          LODWORD(v152) = v10[1];
          v135 = v154 == (_DWORD)v152;
          v155 = v154 < v152;
          if (v135)
            v155 = v10[3] < *v10;
          if (v155)
          {
            v216 = v10[2];
            v195 = *(_QWORD *)v10;
            *(_QWORD *)v10 = *v125;
            v10[2] = v10[5];
            *v125 = v195;
            v10[5] = v216;
          }
        }
        return result;
      case 4uLL:
        return sub_239531FA8(v10, v10 + 3, v10 + 6, a2 - 3);
      case 5uLL:
        return sub_2395321A8(v10, v10 + 3, v10 + 6, v10 + 9, a2 - 3);
      default:
        if (v13 > 287)
        {
          if (v12 == 1)
          {
            if (v10 != a2)
              return sub_239532304(v10, a2, a2, a3);
            return result;
          }
          v15 = v14 >> 1;
          v16 = &v10[3 * (v14 >> 1)];
          v18 = *(a2 - 3);
          v17 = *(a2 - 2);
          if ((unint64_t)v13 >= 0x601)
          {
            v19 = v10[1];
            v20 = &v10[3 * v15 + 1];
            v21 = *v20;
            v135 = *v20 == v19;
            v22 = *v20 < v19;
            if (v135)
              v22 = *v16 < *v10;
            v23 = v18 < *v16;
            v135 = v17 == v21;
            v24 = v17 < v21;
            if (v135)
              v24 = v23;
            if (v22)
            {
              if (v24)
              {
                v197 = v10[2];
                v176 = *(_QWORD *)v10;
                v25 = *(_QWORD *)v8;
                v10[2] = *(a2 - 1);
                *(_QWORD *)v10 = v25;
LABEL_37:
                *(_QWORD *)v8 = v176;
                *(a2 - 1) = v197;
                goto LABEL_38;
              }
              v203 = v10[2];
              v182 = *(_QWORD *)v10;
              v40 = *(_QWORD *)v16;
              v10[2] = v16[2];
              *(_QWORD *)v10 = v40;
              v16[2] = v203;
              *(_QWORD *)v16 = v182;
              v41 = *(a2 - 2);
              v42 = v41 < *v20;
              if (v41 == *v20)
                v42 = *(a2 - 3) < *v16;
              if (v42)
              {
                v197 = v16[2];
                v176 = *(_QWORD *)v16;
                v43 = *(_QWORD *)v8;
                v16[2] = *(a2 - 1);
                *(_QWORD *)v16 = v43;
                goto LABEL_37;
              }
            }
            else if (v24)
            {
              v199 = v16[2];
              v178 = *(_QWORD *)v16;
              v32 = *(_QWORD *)v8;
              v16[2] = *(a2 - 1);
              *(_QWORD *)v16 = v32;
              *(_QWORD *)v8 = v178;
              *(a2 - 1) = v199;
              v33 = v10[1];
              v34 = *v20 < v33;
              if (*v20 == v33)
                v34 = *v16 < *v10;
              if (v34)
              {
                v200 = v10[2];
                v179 = *(_QWORD *)v10;
                v35 = *(_QWORD *)v16;
                v10[2] = v16[2];
                *(_QWORD *)v10 = v35;
                v16[2] = v200;
                *(_QWORD *)v16 = v179;
              }
            }
LABEL_38:
            v44 = (uint64_t *)(v10 + 3);
            v45 = &v10[3 * v15];
            v48 = *(v45 - 3);
            v46 = v45 - 3;
            v47 = v48;
            v49 = v46 + 1;
            v50 = v46[1];
            v51 = v10[4];
            v52 = v48 < v10[3];
            v135 = v50 == v51;
            v53 = v50 < v51;
            if (v135)
              v53 = v52;
            v54 = *(a2 - 5);
            v55 = *(a2 - 6) < v47;
            v135 = v54 == v50;
            v56 = v54 < v50;
            if (v135)
              v56 = v55;
            if (v53)
            {
              if (v56)
              {
                v57 = v10[5];
                v58 = *v44;
                v59 = *(a2 - 4);
                *v44 = *(_QWORD *)v174;
                v10[5] = v59;
                *(_QWORD *)v174 = v58;
                *(a2 - 4) = v57;
              }
              else
              {
                v71 = *v44;
                v72 = v10[5];
                v73 = v46[2];
                *v44 = *(_QWORD *)v46;
                v10[5] = v73;
                v46[2] = v72;
                *(_QWORD *)v46 = v71;
                LODWORD(v71) = *(a2 - 5);
                v74 = v71 < *v49;
                if ((_DWORD)v71 == *v49)
                  v74 = *(a2 - 6) < *v46;
                if (v74)
                {
                  v206 = v46[2];
                  v185 = *(_QWORD *)v46;
                  v75 = *(_QWORD *)v174;
                  v46[2] = *(a2 - 4);
                  *(_QWORD *)v46 = v75;
                  *(_QWORD *)v174 = v185;
                  *(a2 - 4) = v206;
                }
              }
            }
            else if (v56)
            {
              v204 = v46[2];
              v183 = *(_QWORD *)v46;
              v60 = *(_QWORD *)v174;
              v46[2] = *(a2 - 4);
              *(_QWORD *)v46 = v60;
              *(_QWORD *)v174 = v183;
              *(a2 - 4) = v204;
              v61 = v10[4];
              v62 = *v49 < v61;
              if (*v49 == v61)
                v62 = *v46 < v10[3];
              if (v62)
              {
                v63 = *v44;
                v64 = v10[5];
                v65 = v46[2];
                *v44 = *(_QWORD *)v46;
                v10[5] = v65;
                v46[2] = v64;
                *(_QWORD *)v46 = v63;
              }
            }
            v76 = (uint64_t *)(v10 + 6);
            v77 = &v10[3 * v15];
            v80 = v77[3];
            v78 = v77 + 3;
            v79 = v80;
            v81 = v78 + 1;
            v82 = v78[1];
            v83 = v10[7];
            v84 = v80 < v10[6];
            v135 = v82 == v83;
            v85 = v82 < v83;
            if (v135)
              v85 = v84;
            v86 = *(a2 - 8);
            v87 = *(a2 - 9) < v79;
            v135 = v86 == v82;
            v88 = v86 < v82;
            if (v135)
              v88 = v87;
            if (v85)
            {
              if (v88)
              {
                v89 = v10[8];
                v90 = *v76;
                v91 = *(a2 - 7);
                *v76 = *(_QWORD *)v9;
                v10[8] = v91;
                *(_QWORD *)v9 = v90;
                *(a2 - 7) = v89;
              }
              else
              {
                v98 = *v76;
                v99 = v10[8];
                v100 = v78[2];
                *v76 = *(_QWORD *)v78;
                v10[8] = v100;
                v78[2] = v99;
                *(_QWORD *)v78 = v98;
                LODWORD(v98) = *(a2 - 8);
                v101 = v98 < *v81;
                if ((_DWORD)v98 == *v81)
                  v101 = *(a2 - 9) < *v78;
                if (v101)
                {
                  v208 = v78[2];
                  v187 = *(_QWORD *)v78;
                  v102 = *(_QWORD *)v9;
                  v78[2] = *(a2 - 7);
                  *(_QWORD *)v78 = v102;
                  *(_QWORD *)v9 = v187;
                  *(a2 - 7) = v208;
                }
              }
            }
            else if (v88)
            {
              v207 = v78[2];
              v186 = *(_QWORD *)v78;
              v92 = *(_QWORD *)v9;
              v78[2] = *(a2 - 7);
              *(_QWORD *)v78 = v92;
              *(_QWORD *)v9 = v186;
              *(a2 - 7) = v207;
              v93 = v10[7];
              v94 = *v81 < v93;
              if (*v81 == v93)
                v94 = *v78 < v10[6];
              if (v94)
              {
                v95 = *v76;
                v96 = v10[8];
                v97 = v78[2];
                *v76 = *(_QWORD *)v78;
                v10[8] = v97;
                v78[2] = v96;
                *(_QWORD *)v78 = v95;
              }
            }
            v103 = *v20;
            v104 = *v20 < *v49;
            if (*v20 == *v49)
              v104 = *v16 < *v46;
            v135 = *v81 == v103;
            v105 = *v81 < v103;
            if (v135)
              v105 = *v78 < *v16;
            if (v104)
            {
              if (v105)
              {
                v209 = v46[2];
                v188 = *(_QWORD *)v46;
                *(_QWORD *)v46 = *(_QWORD *)v78;
                v46[2] = v78[2];
LABEL_93:
                v78[2] = v209;
                *(_QWORD *)v78 = v188;
                goto LABEL_94;
              }
              v212 = v46[2];
              v191 = *(_QWORD *)v46;
              *(_QWORD *)v46 = *(_QWORD *)v16;
              v46[2] = v16[2];
              v16[2] = v212;
              *(_QWORD *)v16 = v191;
              v109 = *v20;
              v135 = *v81 == v109;
              v110 = *v81 < v109;
              if (v135)
                v110 = *v78 < *v16;
              if (v110)
              {
                v209 = v16[2];
                v188 = *(_QWORD *)v16;
                *(_QWORD *)v16 = *(_QWORD *)v78;
                v16[2] = v78[2];
                goto LABEL_93;
              }
            }
            else if (v105)
            {
              v210 = v16[2];
              v189 = *(_QWORD *)v16;
              *(_QWORD *)v16 = *(_QWORD *)v78;
              v16[2] = v78[2];
              v78[2] = v210;
              *(_QWORD *)v78 = v189;
              v106 = *v20;
              v107 = *v49;
              v135 = v106 == v107;
              v108 = v106 < v107;
              if (v135)
                v108 = *v16 < *v46;
              if (v108)
              {
                v211 = v46[2];
                v190 = *(_QWORD *)v46;
                *(_QWORD *)v46 = *(_QWORD *)v16;
                v46[2] = v16[2];
                v16[2] = v211;
                *(_QWORD *)v16 = v190;
              }
            }
LABEL_94:
            v213 = v10[2];
            v192 = *(_QWORD *)v10;
            v111 = *(_QWORD *)v16;
            v10[2] = v16[2];
            *(_QWORD *)v10 = v111;
            v16[2] = v213;
            *(_QWORD *)v16 = v192;
            if ((a5 & 1) != 0)
              goto LABEL_98;
            goto LABEL_95;
          }
          v26 = v10[1];
          v27 = &v10[3 * v15 + 1];
          v28 = v26 < *v27;
          if (v26 == *v27)
            v28 = *v10 < *v16;
          v29 = v18 < *v10;
          v135 = v17 == v26;
          v30 = v17 < v26;
          if (v135)
            v30 = v29;
          if (v28)
          {
            if (v30)
            {
              v198 = v16[2];
              v177 = *(_QWORD *)v16;
              v31 = *(_QWORD *)v8;
              v16[2] = *(a2 - 1);
              *(_QWORD *)v16 = v31;
              goto LABEL_54;
            }
            v205 = v16[2];
            v184 = *(_QWORD *)v16;
            v66 = *(_QWORD *)v10;
            v16[2] = v10[2];
            *(_QWORD *)v16 = v66;
            v10[2] = v205;
            *(_QWORD *)v10 = v184;
            v67 = *(a2 - 2);
            v68 = v10[1];
            v135 = v67 == v68;
            v69 = v67 < v68;
            if (v135)
              v69 = *(a2 - 3) < *v10;
            if (v69)
            {
              v198 = v10[2];
              v177 = *(_QWORD *)v10;
              v70 = *(_QWORD *)v8;
              v10[2] = *(a2 - 1);
              *(_QWORD *)v10 = v70;
LABEL_54:
              *(_QWORD *)v8 = v177;
              *(a2 - 1) = v198;
            }
LABEL_55:
            if ((a5 & 1) != 0)
              goto LABEL_98;
            goto LABEL_95;
          }
          if (!v30)
            goto LABEL_55;
          v201 = v10[2];
          v180 = *(_QWORD *)v10;
          v36 = *(_QWORD *)v8;
          v10[2] = *(a2 - 1);
          *(_QWORD *)v10 = v36;
          *(_QWORD *)v8 = v180;
          *(a2 - 1) = v201;
          v37 = *v27;
          LODWORD(v36) = v10[1];
          v135 = (_DWORD)v36 == v37;
          v38 = v36 < v37;
          if (v135)
            v38 = *v10 < *v16;
          if (!v38)
            goto LABEL_55;
          v202 = v16[2];
          v181 = *(_QWORD *)v16;
          v39 = *(_QWORD *)v10;
          v16[2] = v10[2];
          *(_QWORD *)v16 = v39;
          v10[2] = v202;
          *(_QWORD *)v10 = v181;
          if ((a5 & 1) != 0)
            goto LABEL_98;
LABEL_95:
          v112 = *(v10 - 2);
          v113 = v10[1];
          v135 = v112 == v113;
          v114 = v112 < v113;
          if (v135)
            v114 = *(v10 - 3) < *v10;
          if (!v114)
          {
            result = sub_239531884(v10, (unint64_t)a2);
            v10 = result;
            goto LABEL_103;
          }
LABEL_98:
          v115 = sub_2395319D0(v10, (unint64_t)a2);
          if ((v116 & 1) == 0)
            goto LABEL_101;
          v117 = sub_239531B0C(v10, v115);
          v10 = v115 + 3;
          result = (unsigned int *)sub_239531B0C(v115 + 3, a2);
          if (!(_DWORD)result)
          {
            v11 = v12 + 1;
            if (v117)
              continue;
LABEL_101:
            result = (unsigned int *)sub_239530B68(v7, v115, a3, -v12, a5 & 1);
            v10 = v115 + 3;
LABEL_103:
            a5 = 0;
            a4 = -v12;
            goto LABEL_3;
          }
          a4 = -v12;
          a2 = v115;
          if (v117)
            return result;
          goto LABEL_2;
        }
        v134 = v10 + 3;
        v135 = v10 == a2 || v134 == a2;
        v136 = v135;
        if ((a5 & 1) != 0)
        {
          if ((v136 & 1) == 0)
          {
            v137 = 0;
            v138 = v10;
            do
            {
              v140 = v134;
              v142 = v138[3];
              v141 = v138[4];
              v143 = v138[1];
              v135 = v141 == v143;
              v144 = v141 < v143;
              if (v135)
                v144 = v142 < *v138;
              if (v144)
              {
                v145 = v138[5];
                v146 = v137;
                do
                {
                  v147 = (char *)v10 + v146;
                  *(_QWORD *)(v147 + 12) = *(_QWORD *)((char *)v10 + v146);
                  *((_DWORD *)v147 + 5) = *(unsigned int *)((char *)v10 + v146 + 8);
                  if (!v146)
                  {
                    v139 = v10;
                    goto LABEL_131;
                  }
                  v148 = *((_DWORD *)v147 - 2);
                  v149 = v142 < *((_DWORD *)v147 - 3);
                  v135 = v141 == v148;
                  v150 = v141 < v148;
                  if (!v135)
                    v149 = v150;
                  v146 -= 12;
                }
                while (v149);
                v139 = (unsigned int *)((char *)v10 + v146 + 12);
LABEL_131:
                *v139 = v142;
                v139[1] = v141;
                v139[2] = v145;
              }
              v134 = v140 + 3;
              v137 += 12;
              v138 = v140;
            }
            while (v140 + 3 != a2);
          }
        }
        else if ((v136 & 1) == 0)
        {
          do
          {
            v156 = v134;
            v158 = v7[3];
            v157 = v7[4];
            v159 = v7[1];
            v135 = v157 == v159;
            v160 = v157 < v159;
            if (v135)
              v160 = v158 < *v7;
            if (v160)
            {
              v161 = v7[5];
              v162 = v156;
              do
              {
                v163 = v162;
                v164 = *(_QWORD *)(v162 - 3);
                v162 -= 3;
                *(_QWORD *)v163 = v164;
                v163[2] = *(v163 - 1);
                v165 = *(v163 - 5);
                v166 = v158 < *(v163 - 6);
                v135 = v157 == v165;
                v167 = v157 < v165;
                if (!v135)
                  v166 = v167;
              }
              while (v166);
              *v162 = v158;
              v162[1] = v157;
              v162[2] = v161;
            }
            v134 = v156 + 3;
            v7 = v156;
          }
          while (v156 + 3 != a2);
        }
        return result;
    }
  }
}

unsigned int *sub_239531884(unsigned int *a1, unint64_t a2)
{
  unsigned int v2;
  unsigned int v3;
  unsigned int v4;
  BOOL v5;
  BOOL v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  BOOL v10;
  BOOL v11;
  unsigned int *v12;
  unsigned int v13;
  _BOOL4 v14;
  _BOOL4 v15;
  unsigned int v16;
  unsigned int v17;
  BOOL v18;
  BOOL v19;
  unsigned int v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  _BOOL4 v24;
  _BOOL4 v25;
  unsigned int v26;
  unsigned int v27;
  BOOL v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v32;
  unsigned int v33;

  v2 = *a1;
  v3 = a1[1];
  v4 = *(_DWORD *)(a2 - 8);
  v5 = v3 == v4;
  v6 = v3 < v4;
  if (v5)
    v6 = *a1 < *(_DWORD *)(a2 - 12);
  if (v6)
  {
    v7 = a1;
    do
    {
      v8 = v7[3];
      v9 = v7[4];
      v7 += 3;
      v10 = v2 < v8;
      v5 = v3 == v9;
      v11 = v3 < v9;
      if (!v5)
        v10 = v11;
    }
    while (!v10);
  }
  else
  {
    v12 = a1 + 3;
    do
    {
      v7 = v12;
      if ((unint64_t)v12 >= a2)
        break;
      v13 = v12[1];
      v14 = v2 < *v7;
      v5 = v3 == v13;
      v15 = v3 < v13;
      if (!v5)
        v14 = v15;
      v12 = v7 + 3;
    }
    while (!v14);
  }
  if ((unint64_t)v7 < a2)
  {
    do
    {
      v16 = *(_DWORD *)(a2 - 12);
      v17 = *(_DWORD *)(a2 - 8);
      a2 -= 12;
      v18 = v2 < v16;
      v5 = v3 == v17;
      v19 = v3 < v17;
      if (!v5)
        v18 = v19;
    }
    while (v18);
  }
  v20 = a1[2];
  while ((unint64_t)v7 < a2)
  {
    v33 = v7[2];
    v32 = *(_QWORD *)v7;
    v21 = *(_QWORD *)a2;
    v7[2] = *(_DWORD *)(a2 + 8);
    *(_QWORD *)v7 = v21;
    *(_DWORD *)(a2 + 8) = v33;
    *(_QWORD *)a2 = v32;
    do
    {
      v22 = v7[3];
      v23 = v7[4];
      v7 += 3;
      v24 = v2 < v22;
      v5 = v3 == v23;
      v25 = v3 < v23;
      if (!v5)
        v24 = v25;
    }
    while (!v24);
    do
    {
      v26 = *(_DWORD *)(a2 - 12);
      v27 = *(_DWORD *)(a2 - 8);
      a2 -= 12;
      v28 = v2 < v26;
      v5 = v3 == v27;
      v29 = v3 < v27;
      if (!v5)
        v28 = v29;
    }
    while (v28);
  }
  if (v7 - 3 != a1)
  {
    v30 = *(_QWORD *)(v7 - 3);
    a1[2] = *(v7 - 1);
    *(_QWORD *)a1 = v30;
  }
  *(v7 - 3) = v2;
  *(v7 - 2) = v3;
  *(v7 - 1) = v20;
  return v7;
}

unsigned int *sub_2395319D0(unsigned int *a1, unint64_t a2)
{
  uint64_t v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  BOOL v7;
  BOOL v8;
  BOOL v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  _BOOL4 v13;
  _BOOL4 v14;
  unsigned int v15;
  unsigned int v16;
  BOOL v17;
  BOOL v18;
  unsigned int *v19;
  unint64_t v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  BOOL v26;
  BOOL v27;
  unsigned int v28;
  unsigned int v29;
  _BOOL4 v30;
  _BOOL4 v31;
  uint64_t v32;

  v2 = 0;
  v3 = *a1;
  v4 = a1[1];
  v5 = a1[2];
  do
  {
    v6 = a1[v2 + 4];
    v7 = a1[v2 + 3] < v3;
    v8 = v6 == v4;
    v9 = v6 < v4;
    if (!v8)
      v7 = v9;
    v2 += 3;
  }
  while (v7);
  v10 = &a1[v2];
  if (v2 == 3)
  {
    do
    {
      if ((unint64_t)v10 >= a2)
        break;
      v15 = *(_DWORD *)(a2 - 12);
      v16 = *(_DWORD *)(a2 - 8);
      a2 -= 12;
      v17 = v15 < v3;
      v8 = v16 == v4;
      v18 = v16 < v4;
      if (!v8)
        v17 = v18;
    }
    while (!v17);
  }
  else
  {
    do
    {
      v11 = *(_DWORD *)(a2 - 12);
      v12 = *(_DWORD *)(a2 - 8);
      a2 -= 12;
      v13 = v11 < v3;
      v8 = v12 == v4;
      v14 = v12 < v4;
      if (!v8)
        v13 = v14;
    }
    while (!v13);
  }
  v19 = v10;
  if ((unint64_t)v10 < a2)
  {
    v20 = a2;
    do
    {
      v21 = *(_QWORD *)v19;
      v22 = v19[2];
      v23 = *(_DWORD *)(v20 + 8);
      *(_QWORD *)v19 = *(_QWORD *)v20;
      v19[2] = v23;
      *(_DWORD *)(v20 + 8) = v22;
      *(_QWORD *)v20 = v21;
      do
      {
        v24 = v19[3];
        v25 = v19[4];
        v19 += 3;
        v26 = v24 < v3;
        v8 = v25 == v4;
        v27 = v25 < v4;
        if (!v8)
          v26 = v27;
      }
      while (v26);
      do
      {
        v28 = *(_DWORD *)(v20 - 12);
        v29 = *(_DWORD *)(v20 - 8);
        v20 -= 12;
        v30 = v28 < v3;
        v8 = v29 == v4;
        v31 = v29 < v4;
        if (!v8)
          v30 = v31;
      }
      while (!v30);
    }
    while ((unint64_t)v19 < v20);
  }
  if (v19 - 3 != a1)
  {
    v32 = *(_QWORD *)(v19 - 3);
    a1[2] = *(v19 - 1);
    *(_QWORD *)a1 = v32;
  }
  *(v19 - 3) = v3;
  *(v19 - 2) = v4;
  *(v19 - 1) = v5;
  return v19 - 3;
}

BOOL sub_239531B0C(unsigned int *a1, unsigned int *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  _BOOL4 v7;
  BOOL v8;
  _BOOL4 v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  _QWORD *v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  BOOL v17;
  unsigned int *v18;
  unsigned int v19;
  _BOOL4 v20;
  unsigned int v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int *v24;
  unsigned int v25;
  _QWORD *v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  BOOL v31;
  unsigned int v32;
  _BOOL4 v33;
  _BOOL4 v34;
  unsigned int v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;
  unsigned int v39;
  unsigned int v40;
  _BOOL4 v41;
  unsigned int v42;
  uint64_t v43;
  unsigned int v44;
  uint64_t v45;
  unsigned int v46;
  _BOOL4 v47;
  _BOOL4 v48;
  unsigned int v49;
  uint64_t v50;
  unsigned int v51;
  uint64_t v52;
  unsigned int v53;
  unsigned int v54;
  _BOOL4 v55;
  unsigned int v56;
  uint64_t v57;
  unsigned int v58;
  unsigned int v59;
  uint64_t v60;
  unsigned int v61;
  _BOOL4 v62;
  _BOOL4 v63;
  unsigned int v64;
  uint64_t v65;
  unsigned int *v66;
  uint64_t v67;
  int v68;
  unsigned int v69;
  unsigned int v70;
  unsigned int v71;
  _BOOL4 v72;
  _BOOL4 v73;
  unsigned int v74;
  uint64_t v75;
  char *v76;
  unsigned int v77;
  BOOL v78;
  BOOL v79;
  _DWORD *v80;

  switch(0xAAAAAAAAAAAAAAABLL * (a2 - a1))
  {
    case 0uLL:
    case 1uLL:
      return 1;
    case 2uLL:
      v4 = *(a2 - 3);
      v5 = *(a2 - 2);
      v3 = a2 - 3;
      v6 = a1[1];
      v7 = v4 < *a1;
      v8 = v5 == v6;
      v9 = v5 < v6;
      if (!v8)
        v7 = v9;
      if (v7)
      {
        v10 = a1[2];
        v11 = *(_QWORD *)a1;
        v12 = v3[2];
        *(_QWORD *)a1 = *(_QWORD *)v3;
        a1[2] = v12;
        *(_QWORD *)v3 = v11;
        v3[2] = v10;
      }
      return 1;
    case 3uLL:
      v13 = a1 + 3;
      v14 = a1[3];
      v15 = a1[4];
      v16 = a1[1];
      v8 = v15 == v16;
      v17 = v15 < v16;
      if (v8)
        v17 = v14 < *a1;
      v19 = *(a2 - 2);
      v18 = a2 - 3;
      v20 = *(a2 - 3) < v14;
      if (v19 != v15)
        v20 = v19 < v15;
      if (v17)
      {
        if (v20)
        {
          v21 = a1[2];
          v22 = *(_QWORD *)a1;
          v23 = *(a2 - 1);
          *(_QWORD *)a1 = *(_QWORD *)v18;
          a1[2] = v23;
          *(_QWORD *)v18 = v22;
          *(a2 - 1) = v21;
          return 1;
        }
        v51 = a1[2];
        v52 = *(_QWORD *)a1;
        *(_QWORD *)a1 = *v13;
        a1[2] = a1[5];
        *v13 = v52;
        a1[5] = v51;
        v53 = *(a2 - 2);
        v54 = a1[4];
        v8 = v53 == v54;
        v55 = v53 < v54;
        if (v8)
          v55 = *(a2 - 3) < a1[3];
        if (v55)
        {
          v56 = a1[5];
          v57 = *v13;
          v58 = *(a2 - 1);
          *v13 = *(_QWORD *)v18;
          a1[5] = v58;
          *(_QWORD *)v18 = v57;
          *(a2 - 1) = v56;
          return 1;
        }
      }
      else if (v20)
      {
        v37 = a1[5];
        v38 = *v13;
        v39 = *(a2 - 1);
        *v13 = *(_QWORD *)v18;
        a1[5] = v39;
        *(_QWORD *)v18 = v38;
        *(a2 - 1) = v37;
        v40 = a1[4];
        LODWORD(v38) = a1[1];
        v8 = v40 == (_DWORD)v38;
        v41 = v40 < v38;
        if (v8)
          v41 = a1[3] < *a1;
        if (v41)
        {
          v42 = a1[2];
          v43 = *(_QWORD *)a1;
          *(_QWORD *)a1 = *v13;
          a1[2] = a1[5];
          *v13 = v43;
          a1[5] = v42;
          return 1;
        }
      }
      return 1;
    case 4uLL:
      sub_239531FA8(a1, a1 + 3, a1 + 6, a2 - 3);
      return 1;
    case 5uLL:
      sub_2395321A8(a1, a1 + 3, a1 + 6, a1 + 9, a2 - 3);
      return 1;
    default:
      v24 = a1 + 6;
      v25 = a1[6];
      v26 = a1 + 3;
      v27 = a1[3];
      v28 = a1[4];
      v30 = *a1;
      v29 = a1[1];
      v31 = __PAIR64__(v28, v27) < *(_QWORD *)a1;
      v32 = a1[7];
      v33 = v25 < v27;
      v8 = v32 == v28;
      v34 = v32 < v28;
      if (!v8)
        v33 = v34;
      if (v31)
      {
        if (v33)
        {
          v35 = a1[2];
          v36 = *(_QWORD *)a1;
          *(_QWORD *)a1 = *(_QWORD *)v24;
          a1[2] = a1[8];
          *(_QWORD *)v24 = v36;
          a1[8] = v35;
        }
        else
        {
          v59 = a1[2];
          v60 = *(_QWORD *)a1;
          *(_QWORD *)a1 = *v26;
          a1[2] = a1[5];
          *v26 = v60;
          a1[5] = v59;
          v61 = a1[4];
          v62 = v25 < a1[3];
          v8 = v32 == v61;
          v63 = v32 < v61;
          if (!v8)
            v62 = v63;
          if (v62)
          {
            v64 = a1[5];
            v65 = *v26;
            *v26 = *(_QWORD *)v24;
            a1[5] = a1[8];
            *(_QWORD *)v24 = v65;
            a1[8] = v64;
          }
        }
      }
      else if (v33)
      {
        v44 = a1[5];
        v45 = *v26;
        *v26 = *(_QWORD *)v24;
        a1[5] = a1[8];
        *(_QWORD *)v24 = v45;
        a1[8] = v44;
        v46 = a1[4];
        v47 = a1[3] < v30;
        v8 = v46 == v29;
        v48 = v46 < v29;
        if (v8)
          v48 = v47;
        if (v48)
        {
          v49 = a1[2];
          v50 = *(_QWORD *)a1;
          *(_QWORD *)a1 = *v26;
          a1[2] = a1[5];
          *v26 = v50;
          a1[5] = v49;
        }
      }
      v66 = a1 + 9;
      if (a1 + 9 == a2)
        return 1;
      v67 = 0;
      v68 = 0;
      break;
  }
  while (1)
  {
    v70 = *v66;
    v69 = v66[1];
    v71 = v24[1];
    v72 = *v66 < *v24;
    v8 = v69 == v71;
    v73 = v69 < v71;
    if (!v8)
      v72 = v73;
    if (v72)
      break;
LABEL_53:
    v24 = v66;
    v67 += 12;
    v66 += 3;
    if (v66 == a2)
      return 1;
  }
  v74 = v66[2];
  v75 = v67;
  do
  {
    v76 = (char *)a1 + v75;
    *(_QWORD *)(v76 + 36) = *(_QWORD *)((char *)a1 + v75 + 24);
    *((_DWORD *)v76 + 11) = *(unsigned int *)((char *)a1 + v75 + 32);
    if (v75 == -24)
    {
      *a1 = v70;
      a1[1] = v69;
      a1[2] = v74;
      if (++v68 != 8)
        goto LABEL_53;
      return v66 + 3 == a2;
    }
    v77 = *((_DWORD *)v76 + 4);
    v78 = v70 < *((_DWORD *)v76 + 3);
    v8 = v69 == v77;
    v79 = v69 < v77;
    if (!v8)
      v78 = v79;
    v75 -= 12;
  }
  while (v78);
  v80 = (unsigned int *)((char *)a1 + v75);
  v80[9] = v70;
  v80[10] = v69;
  v80[11] = v74;
  if (++v68 != 8)
    goto LABEL_53;
  return v66 + 3 == a2;
}

_DWORD *sub_239531FA8(_DWORD *result, _DWORD *a2, _DWORD *a3, _DWORD *a4)
{
  unsigned int v4;
  unsigned int v5;
  BOOL v6;
  BOOL v7;
  unsigned int v8;
  _BOOL4 v9;
  int v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  int v15;
  unsigned int v16;
  unsigned int v17;
  _BOOL4 v18;
  int v19;
  uint64_t v20;
  int v21;
  int v22;
  uint64_t v23;
  int v24;
  unsigned int v25;
  unsigned int v26;
  _BOOL4 v27;
  int v28;
  unsigned int v29;
  unsigned int v30;
  _BOOL4 v31;
  int v32;
  uint64_t v33;
  int v34;
  unsigned int v35;
  unsigned int v36;
  _BOOL4 v37;
  int v38;
  uint64_t v39;
  int v40;
  unsigned int v41;
  unsigned int v42;
  _BOOL4 v43;
  int v44;
  uint64_t v45;
  int v46;

  v4 = a2[1];
  v5 = result[1];
  v6 = v4 == v5;
  v7 = v4 < v5;
  if (v6)
    v7 = *a2 < *result;
  v8 = a3[1];
  v6 = v8 == v4;
  v9 = v8 < v4;
  if (v6)
    v9 = *a3 < *a2;
  if (v7)
  {
    if (v9)
    {
      v10 = result[2];
      v11 = *(_QWORD *)result;
      v12 = a3[2];
      *(_QWORD *)result = *(_QWORD *)a3;
      result[2] = v12;
LABEL_17:
      *(_QWORD *)a3 = v11;
      a3[2] = v10;
      goto LABEL_18;
    }
    v22 = result[2];
    v23 = *(_QWORD *)result;
    v24 = a2[2];
    *(_QWORD *)result = *(_QWORD *)a2;
    result[2] = v24;
    *(_QWORD *)a2 = v23;
    a2[2] = v22;
    v25 = a3[1];
    v26 = a2[1];
    v6 = v25 == v26;
    v27 = v25 < v26;
    if (v6)
      v27 = *a3 < *a2;
    if (v27)
    {
      v10 = a2[2];
      v11 = *(_QWORD *)a2;
      v28 = a3[2];
      *(_QWORD *)a2 = *(_QWORD *)a3;
      a2[2] = v28;
      goto LABEL_17;
    }
  }
  else if (v9)
  {
    v13 = a2[2];
    v14 = *(_QWORD *)a2;
    v15 = a3[2];
    *(_QWORD *)a2 = *(_QWORD *)a3;
    a2[2] = v15;
    *(_QWORD *)a3 = v14;
    a3[2] = v13;
    v16 = a2[1];
    v17 = result[1];
    v6 = v16 == v17;
    v18 = v16 < v17;
    if (v6)
      v18 = *a2 < *result;
    if (v18)
    {
      v19 = result[2];
      v20 = *(_QWORD *)result;
      v21 = a2[2];
      *(_QWORD *)result = *(_QWORD *)a2;
      result[2] = v21;
      *(_QWORD *)a2 = v20;
      a2[2] = v19;
    }
  }
LABEL_18:
  v29 = a4[1];
  v30 = a3[1];
  v6 = v29 == v30;
  v31 = v29 < v30;
  if (v6)
    v31 = *a4 < *a3;
  if (v31)
  {
    v32 = a3[2];
    v33 = *(_QWORD *)a3;
    v34 = a4[2];
    *(_QWORD *)a3 = *(_QWORD *)a4;
    a3[2] = v34;
    *(_QWORD *)a4 = v33;
    a4[2] = v32;
    v35 = a3[1];
    v36 = a2[1];
    v6 = v35 == v36;
    v37 = v35 < v36;
    if (v6)
      v37 = *a3 < *a2;
    if (v37)
    {
      v38 = a2[2];
      v39 = *(_QWORD *)a2;
      v40 = a3[2];
      *(_QWORD *)a2 = *(_QWORD *)a3;
      a2[2] = v40;
      *(_QWORD *)a3 = v39;
      a3[2] = v38;
      v41 = a2[1];
      v42 = result[1];
      v6 = v41 == v42;
      v43 = v41 < v42;
      if (v6)
        v43 = *a2 < *result;
      if (v43)
      {
        v44 = result[2];
        v45 = *(_QWORD *)result;
        v46 = a2[2];
        *(_QWORD *)result = *(_QWORD *)a2;
        result[2] = v46;
        *(_QWORD *)a2 = v45;
        a2[2] = v44;
      }
    }
  }
  return result;
}

_DWORD *sub_2395321A8(_DWORD *a1, _DWORD *a2, _DWORD *a3, _DWORD *a4, _DWORD *a5)
{
  _DWORD *result;
  unsigned int v11;
  unsigned int v12;
  BOOL v13;
  _BOOL4 v14;
  int v15;
  uint64_t v16;
  int v17;
  unsigned int v18;
  unsigned int v19;
  _BOOL4 v20;
  int v21;
  uint64_t v22;
  int v23;
  unsigned int v24;
  unsigned int v25;
  _BOOL4 v26;
  int v27;
  uint64_t v28;
  int v29;
  unsigned int v30;
  unsigned int v31;
  _BOOL4 v32;
  int v33;
  uint64_t v34;
  int v35;

  result = sub_239531FA8(a1, a2, a3, a4);
  v11 = a5[1];
  v12 = a4[1];
  v13 = v11 == v12;
  v14 = v11 < v12;
  if (v13)
    v14 = *a5 < *a4;
  if (v14)
  {
    v15 = a4[2];
    v16 = *(_QWORD *)a4;
    v17 = a5[2];
    *(_QWORD *)a4 = *(_QWORD *)a5;
    a4[2] = v17;
    *(_QWORD *)a5 = v16;
    a5[2] = v15;
    v18 = a4[1];
    v19 = a3[1];
    v13 = v18 == v19;
    v20 = v18 < v19;
    if (v13)
      v20 = *a4 < *a3;
    if (v20)
    {
      v21 = a3[2];
      v22 = *(_QWORD *)a3;
      v23 = a4[2];
      *(_QWORD *)a3 = *(_QWORD *)a4;
      a3[2] = v23;
      *(_QWORD *)a4 = v22;
      a4[2] = v21;
      v24 = a3[1];
      v25 = a2[1];
      v13 = v24 == v25;
      v26 = v24 < v25;
      if (v13)
        v26 = *a3 < *a2;
      if (v26)
      {
        v27 = a2[2];
        v28 = *(_QWORD *)a2;
        v29 = a3[2];
        *(_QWORD *)a2 = *(_QWORD *)a3;
        a2[2] = v29;
        *(_QWORD *)a3 = v28;
        a3[2] = v27;
        v30 = a2[1];
        v31 = a1[1];
        v13 = v30 == v31;
        v32 = v30 < v31;
        if (v13)
          v32 = *a2 < *a1;
        if (v32)
        {
          v33 = a1[2];
          v34 = *(_QWORD *)a1;
          v35 = a2[2];
          *(_QWORD *)a1 = *(_QWORD *)a2;
          a1[2] = v35;
          *(_QWORD *)a2 = v34;
          a2[2] = v33;
        }
      }
    }
  }
  return result;
}

unsigned int *sub_239532304(unsigned int *a1, unsigned int *a2, unsigned int *a3, uint64_t a4)
{
  unsigned int *v6;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int *v12;
  unsigned int *v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  BOOL v17;
  _BOOL4 v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int v21;
  int64_t v22;
  uint64_t v24;
  unsigned int *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  unsigned int v32;
  _BOOL4 v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unsigned int *v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  _BOOL4 v41;
  int v42;
  char *v43;
  uint64_t v44;
  unsigned int v45;
  BOOL v46;
  uint64_t v48;
  unsigned int v49;

  if (a1 != a2)
  {
    v6 = a2;
    v8 = (char *)a2 - (char *)a1;
    v9 = ((char *)a2 - (char *)a1) / 12;
    if ((char *)a2 - (char *)a1 >= 13)
    {
      v10 = (unint64_t)(v9 - 2) >> 1;
      v11 = v10 + 1;
      v12 = &a1[3 * v10];
      do
      {
        sub_2395325DC((uint64_t)a1, a4, v9, v12);
        v12 -= 3;
        --v11;
      }
      while (v11);
    }
    v13 = v6;
    if (v6 != a3)
    {
      v14 = v6;
      do
      {
        v15 = v14[1];
        v16 = a1[1];
        v17 = v15 == v16;
        v18 = v15 < v16;
        if (v17)
          v18 = *v14 < *a1;
        if (v18)
        {
          v19 = v14[2];
          v20 = *(_QWORD *)v14;
          v21 = a1[2];
          *(_QWORD *)v14 = *(_QWORD *)a1;
          v14[2] = v21;
          *(_QWORD *)a1 = v20;
          a1[2] = v19;
          sub_2395325DC((uint64_t)a1, a4, v9, a1);
        }
        v14 += 3;
      }
      while (v14 != a3);
      v13 = a3;
    }
    if (v8 >= 13)
    {
      v22 = v8 / 0xCuLL;
      do
      {
        v24 = 0;
        v48 = *(_QWORD *)a1;
        v49 = a1[2];
        v25 = a1;
        do
        {
          v27 = v24 + 1;
          v28 = (char *)&v25[3 * v24 + 3];
          v29 = (2 * v24) | 1;
          v30 = 2 * v24 + 2;
          if (v30 < v22)
          {
            v31 = v25[3 * v27 + 1];
            v32 = *((_DWORD *)v28 + 4);
            v17 = v31 == v32;
            v33 = v31 < v32;
            if (v17)
              v33 = *(_DWORD *)v28 < *((_DWORD *)v28 + 3);
            if (v33)
            {
              v28 += 12;
              v29 = v30;
            }
          }
          v26 = *(_QWORD *)v28;
          v25[2] = *((_DWORD *)v28 + 2);
          *(_QWORD *)v25 = v26;
          v25 = (unsigned int *)v28;
          v24 = v29;
        }
        while (v29 <= (uint64_t)((unint64_t)(v22 - 2) >> 1));
        v6 -= 3;
        if (v28 == (char *)v6)
        {
          *((_DWORD *)v28 + 2) = v49;
          *(_QWORD *)v28 = v48;
        }
        else
        {
          v34 = *(_QWORD *)v6;
          *((_DWORD *)v28 + 2) = v6[2];
          *(_QWORD *)v28 = v34;
          *(_QWORD *)v6 = v48;
          v6[2] = v49;
          v35 = v28 - (char *)a1 + 12;
          if (v35 >= 13)
          {
            v36 = (v35 / 0xCuLL - 2) >> 1;
            v37 = &a1[3 * v36];
            v38 = v37[1];
            v40 = *(_DWORD *)v28;
            v39 = *((_DWORD *)v28 + 1);
            v17 = v38 == v39;
            v41 = v38 < v39;
            if (v17)
              v41 = *v37 < *(_DWORD *)v28;
            if (v41)
            {
              v42 = *((_DWORD *)v28 + 2);
              do
              {
                v43 = v28;
                v28 = (char *)v37;
                v44 = *(_QWORD *)v37;
                *((_DWORD *)v43 + 2) = *((_DWORD *)v28 + 2);
                *(_QWORD *)v43 = v44;
                if (!v36)
                  break;
                v36 = (v36 - 1) >> 1;
                v37 = &a1[3 * v36];
                v45 = v37[1];
                v17 = v45 == v39;
                v46 = v45 < v39;
                if (v17)
                  v46 = *v37 < v40;
              }
              while (v46);
              *(_DWORD *)v28 = v40;
              *((_DWORD *)v28 + 1) = v39;
              *((_DWORD *)v28 + 2) = v42;
            }
          }
        }
      }
      while (v22-- > 2);
    }
    return v13;
  }
  return a3;
}

uint64_t sub_2395325DC(uint64_t result, uint64_t a2, uint64_t a3, unsigned int *a4)
{
  int64_t v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  _BOOL4 v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  BOOL v14;
  BOOL v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  _BOOL4 v19;
  BOOL v20;
  unsigned int v21;
  unsigned int v22;
  _BOOL4 v23;
  _BOOL4 v24;
  unsigned int *v25;
  uint64_t v26;
  uint64_t v27;

  if (a3 >= 2)
  {
    v4 = (unint64_t)(a3 - 2) >> 1;
    if (v4 >= (uint64_t)(0xAAAAAAAAAAAAAAABLL * (((uint64_t)a4 - result) >> 2)))
    {
      v5 = (0x5555555555555556 * (((uint64_t)a4 - result) >> 2)) | 1;
      v6 = (unsigned int *)(result + 12 * v5);
      if (0x5555555555555556 * (((uint64_t)a4 - result) >> 2) + 2 >= a3)
      {
        v10 = *v6;
      }
      else
      {
        v7 = *(_DWORD *)(result + 12 * v5 + 4);
        v8 = v6[4];
        v20 = v7 == v8;
        v9 = v7 < v8;
        if (v20)
          v9 = *v6 < v6[3];
        if (v9)
          v10 = v6[3];
        else
          v10 = *v6;
        if (v9)
        {
          v6 += 3;
          v5 = 0x5555555555555556 * (((uint64_t)a4 - result) >> 2) + 2;
        }
      }
      v11 = v6[1];
      v13 = *a4;
      v12 = a4[1];
      v14 = v10 < *a4;
      v20 = v11 == v12;
      v15 = v11 < v12;
      if (!v20)
        v14 = v15;
      if (!v14)
      {
        v16 = a4[2];
        do
        {
          v25 = a4;
          a4 = v6;
          v26 = *(_QWORD *)v6;
          v25[2] = a4[2];
          *(_QWORD *)v25 = v26;
          if (v4 < v5)
            break;
          v27 = (2 * v5) | 1;
          v6 = (unsigned int *)(result + 12 * v27);
          v5 = 2 * v5 + 2;
          if (v5 < a3)
          {
            v17 = *(_DWORD *)(result + 12 * v27 + 4);
            v18 = v6[4];
            v20 = v17 == v18;
            v19 = v17 < v18;
            if (v20)
              v19 = *v6 < v6[3];
            v20 = !v19;
            v21 = v19 ? v6[3] : *v6;
            if (v20)
              v5 = v27;
            else
              v6 += 3;
          }
          else
          {
            v21 = *v6;
            v5 = v27;
          }
          v22 = v6[1];
          v23 = v21 < v13;
          v20 = v22 == v12;
          v24 = v22 < v12;
          if (v20)
            v24 = v23;
        }
        while (!v24);
        *a4 = v13;
        a4[1] = v12;
        a4[2] = v16;
      }
    }
  }
  return result;
}

void sub_239532748(int *a1@<X0>, int **a2@<X8>)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  int *v10;
  uint64_t v11;
  unsigned int v12;
  int v13;
  int v14;
  int v15;
  uint64_t i;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  int v23;
  int *v24;
  unint64_t v25;
  unint64_t v26;
  _QWORD *v27;
  unint64_t v28;
  char *v29;
  int *v30;
  char *v31;
  uint64_t v32;
  int v33;
  int *v34;
  unint64_t v35;
  uint64_t v36;

  if (*((_BYTE *)a1 + 28) != 1)
    sub_239EC0488();
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v4 = (uint64_t *)*((_QWORD *)a1 + 1);
  if (v4)
  {
    v5 = a1[1];
    v6 = v4[v5];
    v7 = *v4;
    v8 = a2 + 2;
    v9 = v6 - v7;
    if (v6 == v7)
    {
      v10 = 0;
      LOWORD(v11) = *((_WORD *)a1 + 12);
      v12 = *a1;
      if ((v11 & 1) != 0)
        v13 = *a1;
      else
        v13 = a1[1];
      if (!v13)
        return;
      goto LABEL_19;
    }
    if (v9 > 0x1555555555555555)
      sub_2394189F8();
    v10 = (int *)operator new(12 * v9);
    *a2 = v10;
    a2[1] = v10;
    a2[2] = &v10[3 * v9];
    LOWORD(v11) = *((_WORD *)a1 + 12);
    v12 = *a1;
    if ((v11 & 1) != 0)
      v15 = *a1;
    else
      v15 = v5;
    if (v15)
    {
LABEL_19:
      for (i = 0; ; ++i)
      {
        v18 = *((_QWORD *)a1 + 1);
        v19 = *(_QWORD *)(v18 + 8 * i);
        v35 = i + 1;
        v20 = *(_QWORD *)(v18 + 8 * (i + 1));
        if (v19 != v20)
          break;
LABEL_21:
        LODWORD(v17) = a1[1];
        if ((v11 & 1) != 0)
          v17 = v12;
        else
          v17 = v17;
        if (v35 >= v17)
          return;
      }
      v36 = *(_QWORD *)(v18 + 8 * (i + 1));
      while (1)
      {
        while (1)
        {
          v21 = *((unsigned __int8 *)a1 + 28);
          v22 = *(_DWORD *)(*((_QWORD *)a1 + 2) + 4 * v19) * v21;
          v23 = *(_DWORD *)(*((_QWORD *)a1 + 4) + 4 * v19 * (v21 * v21));
          if ((unint64_t)v10 >= *v8)
            break;
          *v10 = v22;
          v10[1] = i;
          v10[2] = v23;
          v10 += 3;
          a2[1] = v10;
          if (++v19 == v20)
            goto LABEL_20;
        }
        v24 = *a2;
        v25 = 0xAAAAAAAAAAAAAAABLL * (v10 - *a2);
        v26 = v25 + 1;
        if (v25 + 1 > 0x1555555555555555)
          sub_2394189F8();
        v27 = v8;
        if (0x5555555555555556 * ((uint64_t)(*v8 - (_QWORD)v24) >> 2) > v26)
          v26 = 0x5555555555555556 * ((uint64_t)(*v8 - (_QWORD)v24) >> 2);
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*v8 - (_QWORD)v24) >> 2) >= 0xAAAAAAAAAAAAAAALL)
          v28 = 0x1555555555555555;
        else
          v28 = v26;
        if (v28)
        {
          if (v28 > 0x1555555555555555)
            sub_239418A80();
          v29 = (char *)operator new(12 * v28);
        }
        else
        {
          v29 = 0;
        }
        v30 = (int *)&v29[12 * v25];
        *v30 = v22;
        v30[1] = i;
        v30[2] = v23;
        if (v10 == v24)
        {
          v34 = v10;
          v10 = v30 + 3;
          *a2 = v30;
          a2[1] = v30 + 3;
          a2[2] = (int *)&v29[12 * v28];
          if (!v34)
            goto LABEL_44;
        }
        else
        {
          v31 = &v29[12 * v25];
          do
          {
            v32 = *(_QWORD *)(v10 - 3);
            v10 -= 3;
            v33 = v10[2];
            *(_QWORD *)(v31 - 12) = v32;
            v31 -= 12;
            *((_DWORD *)v31 + 2) = v33;
          }
          while (v10 != v24);
          v34 = *a2;
          v10 = v30 + 3;
          *a2 = (int *)v31;
          a2[1] = v30 + 3;
          a2[2] = (int *)&v29[12 * v28];
          if (!v34)
            goto LABEL_44;
        }
        operator delete(v34);
LABEL_44:
        v8 = v27;
        v20 = v36;
        a2[1] = v10;
        if (++v19 == v36)
        {
LABEL_20:
          LOWORD(v11) = *((_WORD *)a1 + 12);
          v12 = *a1;
          goto LABEL_21;
        }
      }
    }
  }
  else
  {
    v10 = 0;
    v8 = a2 + 2;
    v12 = *a1;
    v11 = *((unsigned __int16 *)a1 + 12);
    if ((v11 & 1) != 0)
      v14 = *a1;
    else
      v14 = a1[1];
    if (v14)
      goto LABEL_19;
  }
}

void sub_239532A24(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

unsigned int *sub_239532A48(unsigned int *result, unsigned int *a2, uint64_t a3, uint64_t a4, char a5)
{
  unsigned int *v7;
  unsigned int *v8;
  unsigned int *v9;
  unsigned int *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int *v20;
  unsigned int v21;
  BOOL v22;
  _BOOL4 v23;
  _BOOL4 v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int *v27;
  BOOL v28;
  _BOOL4 v29;
  _BOOL4 v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  _BOOL4 v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  _BOOL4 v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int v41;
  _BOOL4 v42;
  uint64_t v43;
  uint64_t *v44;
  unsigned int *v45;
  unsigned int *v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int *v49;
  unsigned int v50;
  unsigned int v51;
  BOOL v52;
  BOOL v53;
  unsigned int v54;
  _BOOL4 v55;
  _BOOL4 v56;
  unsigned int v57;
  uint64_t v58;
  unsigned int v59;
  uint64_t v60;
  unsigned int v61;
  _BOOL4 v62;
  uint64_t v63;
  unsigned int v64;
  unsigned int v65;
  uint64_t v66;
  unsigned int v67;
  unsigned int v68;
  _BOOL4 v69;
  uint64_t v70;
  uint64_t v71;
  unsigned int v72;
  unsigned int v73;
  _BOOL4 v74;
  uint64_t v75;
  uint64_t *v76;
  unsigned int *v77;
  unsigned int *v78;
  unsigned int v79;
  unsigned int v80;
  unsigned int *v81;
  unsigned int v82;
  unsigned int v83;
  BOOL v84;
  BOOL v85;
  unsigned int v86;
  _BOOL4 v87;
  _BOOL4 v88;
  unsigned int v89;
  uint64_t v90;
  unsigned int v91;
  uint64_t v92;
  unsigned int v93;
  _BOOL4 v94;
  uint64_t v95;
  unsigned int v96;
  unsigned int v97;
  uint64_t v98;
  unsigned int v99;
  unsigned int v100;
  _BOOL4 v101;
  uint64_t v102;
  unsigned int v103;
  BOOL v104;
  _BOOL4 v105;
  unsigned int v106;
  unsigned int v107;
  _BOOL4 v108;
  unsigned int v109;
  _BOOL4 v110;
  uint64_t v111;
  unsigned int v112;
  unsigned int v113;
  BOOL v114;
  unsigned int *v115;
  char v116;
  BOOL v117;
  unsigned int v118;
  unsigned int v119;
  unsigned int *v120;
  unsigned int v121;
  _BOOL4 v122;
  _BOOL4 v123;
  uint64_t v124;
  _QWORD *v125;
  unsigned int v126;
  unsigned int v127;
  unsigned int v128;
  BOOL v129;
  unsigned int *v130;
  unsigned int v131;
  _BOOL4 v132;
  uint64_t v133;
  unsigned int *v134;
  BOOL v135;
  char v136;
  uint64_t v137;
  unsigned int *v138;
  unsigned int *v139;
  unsigned int *v140;
  unsigned int v141;
  unsigned int v142;
  unsigned int v143;
  _BOOL4 v144;
  unsigned int v145;
  uint64_t v146;
  char *v147;
  unsigned int v148;
  BOOL v149;
  BOOL v150;
  unsigned int v151;
  uint64_t v152;
  unsigned int v153;
  unsigned int v154;
  _BOOL4 v155;
  unsigned int *v156;
  unsigned int v157;
  unsigned int v158;
  unsigned int v159;
  _BOOL4 v160;
  unsigned int v161;
  unsigned int *v162;
  unsigned int *v163;
  uint64_t v164;
  unsigned int v165;
  BOOL v166;
  BOOL v167;
  unsigned int v168;
  unsigned int v169;
  _BOOL4 v170;
  unsigned int v171;
  uint64_t v172;
  unsigned int v173;
  unsigned int *v174;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  unsigned int v197;
  unsigned int v198;
  unsigned int v199;
  unsigned int v200;
  unsigned int v201;
  unsigned int v202;
  unsigned int v203;
  unsigned int v204;
  unsigned int v205;
  unsigned int v206;
  unsigned int v207;
  unsigned int v208;
  unsigned int v209;
  unsigned int v210;
  unsigned int v211;
  unsigned int v212;
  unsigned int v213;
  unsigned int v214;
  unsigned int v215;
  unsigned int v216;
  unsigned int v217;

  v7 = result;
LABEL_2:
  v8 = a2 - 3;
  v174 = a2 - 6;
  v9 = a2 - 9;
  v10 = v7;
LABEL_3:
  v11 = 1 - a4;
  while (2)
  {
    v7 = v10;
    v12 = v11;
    v13 = (char *)a2 - (char *)v10;
    v14 = 0xAAAAAAAAAAAAAAABLL * (a2 - v10);
    switch(v14)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v118 = *(a2 - 3);
        v119 = *(a2 - 2);
        v120 = a2 - 3;
        v121 = v10[1];
        v122 = v118 < *v10;
        v135 = v119 == v121;
        v123 = v119 < v121;
        if (!v135)
          v122 = v123;
        if (v122)
        {
          v214 = v10[2];
          v193 = *(_QWORD *)v10;
          v124 = *(_QWORD *)v120;
          v10[2] = v120[2];
          *(_QWORD *)v10 = v124;
          *(_QWORD *)v120 = v193;
          v120[2] = v214;
        }
        return result;
      case 3uLL:
        v125 = v10 + 3;
        v126 = v10[3];
        v127 = v10[4];
        v128 = v10[1];
        v135 = v127 == v128;
        v129 = v127 < v128;
        if (v135)
          v129 = v126 < *v10;
        v131 = *(a2 - 2);
        v130 = a2 - 3;
        v132 = *(a2 - 3) < v126;
        if (v131 != v127)
          v132 = v131 < v127;
        if (v129)
        {
          if (v132)
          {
            v215 = v10[2];
            v194 = *(_QWORD *)v10;
            v133 = *(_QWORD *)v130;
            v10[2] = *(a2 - 1);
            *(_QWORD *)v10 = v133;
            *(_QWORD *)v130 = v194;
            *(a2 - 1) = v215;
          }
          else
          {
            v217 = v10[2];
            v196 = *(_QWORD *)v10;
            *(_QWORD *)v10 = *v125;
            v10[2] = v10[5];
            *v125 = v196;
            v10[5] = v217;
            v168 = *(a2 - 2);
            v169 = v10[4];
            v135 = v168 == v169;
            v170 = v168 < v169;
            if (v135)
              v170 = *(a2 - 3) < v10[3];
            if (v170)
            {
              v171 = v10[5];
              v172 = *v125;
              v173 = *(a2 - 1);
              *v125 = *(_QWORD *)v130;
              v10[5] = v173;
              *(_QWORD *)v130 = v172;
              *(a2 - 1) = v171;
            }
          }
        }
        else if (v132)
        {
          v151 = v10[5];
          v152 = *v125;
          v153 = *(a2 - 1);
          *v125 = *(_QWORD *)v130;
          v10[5] = v153;
          *(_QWORD *)v130 = v152;
          *(a2 - 1) = v151;
          v154 = v10[4];
          LODWORD(v152) = v10[1];
          v135 = v154 == (_DWORD)v152;
          v155 = v154 < v152;
          if (v135)
            v155 = v10[3] < *v10;
          if (v155)
          {
            v216 = v10[2];
            v195 = *(_QWORD *)v10;
            *(_QWORD *)v10 = *v125;
            v10[2] = v10[5];
            *v125 = v195;
            v10[5] = v216;
          }
        }
        return result;
      case 4uLL:
        return sub_239531FA8(v10, v10 + 3, v10 + 6, a2 - 3);
      case 5uLL:
        return sub_2395321A8(v10, v10 + 3, v10 + 6, v10 + 9, a2 - 3);
      default:
        if (v13 > 287)
        {
          if (v12 == 1)
          {
            if (v10 != a2)
              return sub_239532304(v10, a2, a2, a3);
            return result;
          }
          v15 = v14 >> 1;
          v16 = &v10[3 * (v14 >> 1)];
          v18 = *(a2 - 3);
          v17 = *(a2 - 2);
          if ((unint64_t)v13 >= 0x601)
          {
            v19 = v10[1];
            v20 = &v10[3 * v15 + 1];
            v21 = *v20;
            v135 = *v20 == v19;
            v22 = *v20 < v19;
            if (v135)
              v22 = *v16 < *v10;
            v23 = v18 < *v16;
            v135 = v17 == v21;
            v24 = v17 < v21;
            if (v135)
              v24 = v23;
            if (v22)
            {
              if (v24)
              {
                v197 = v10[2];
                v176 = *(_QWORD *)v10;
                v25 = *(_QWORD *)v8;
                v10[2] = *(a2 - 1);
                *(_QWORD *)v10 = v25;
LABEL_37:
                *(_QWORD *)v8 = v176;
                *(a2 - 1) = v197;
                goto LABEL_38;
              }
              v203 = v10[2];
              v182 = *(_QWORD *)v10;
              v40 = *(_QWORD *)v16;
              v10[2] = v16[2];
              *(_QWORD *)v10 = v40;
              v16[2] = v203;
              *(_QWORD *)v16 = v182;
              v41 = *(a2 - 2);
              v42 = v41 < *v20;
              if (v41 == *v20)
                v42 = *(a2 - 3) < *v16;
              if (v42)
              {
                v197 = v16[2];
                v176 = *(_QWORD *)v16;
                v43 = *(_QWORD *)v8;
                v16[2] = *(a2 - 1);
                *(_QWORD *)v16 = v43;
                goto LABEL_37;
              }
            }
            else if (v24)
            {
              v199 = v16[2];
              v178 = *(_QWORD *)v16;
              v32 = *(_QWORD *)v8;
              v16[2] = *(a2 - 1);
              *(_QWORD *)v16 = v32;
              *(_QWORD *)v8 = v178;
              *(a2 - 1) = v199;
              v33 = v10[1];
              v34 = *v20 < v33;
              if (*v20 == v33)
                v34 = *v16 < *v10;
              if (v34)
              {
                v200 = v10[2];
                v179 = *(_QWORD *)v10;
                v35 = *(_QWORD *)v16;
                v10[2] = v16[2];
                *(_QWORD *)v10 = v35;
                v16[2] = v200;
                *(_QWORD *)v16 = v179;
              }
            }
LABEL_38:
            v44 = (uint64_t *)(v10 + 3);
            v45 = &v10[3 * v15];
            v48 = *(v45 - 3);
            v46 = v45 - 3;
            v47 = v48;
            v49 = v46 + 1;
            v50 = v46[1];
            v51 = v10[4];
            v52 = v48 < v10[3];
            v135 = v50 == v51;
            v53 = v50 < v51;
            if (v135)
              v53 = v52;
            v54 = *(a2 - 5);
            v55 = *(a2 - 6) < v47;
            v135 = v54 == v50;
            v56 = v54 < v50;
            if (v135)
              v56 = v55;
            if (v53)
            {
              if (v56)
              {
                v57 = v10[5];
                v58 = *v44;
                v59 = *(a2 - 4);
                *v44 = *(_QWORD *)v174;
                v10[5] = v59;
                *(_QWORD *)v174 = v58;
                *(a2 - 4) = v57;
              }
              else
              {
                v71 = *v44;
                v72 = v10[5];
                v73 = v46[2];
                *v44 = *(_QWORD *)v46;
                v10[5] = v73;
                v46[2] = v72;
                *(_QWORD *)v46 = v71;
                LODWORD(v71) = *(a2 - 5);
                v74 = v71 < *v49;
                if ((_DWORD)v71 == *v49)
                  v74 = *(a2 - 6) < *v46;
                if (v74)
                {
                  v206 = v46[2];
                  v185 = *(_QWORD *)v46;
                  v75 = *(_QWORD *)v174;
                  v46[2] = *(a2 - 4);
                  *(_QWORD *)v46 = v75;
                  *(_QWORD *)v174 = v185;
                  *(a2 - 4) = v206;
                }
              }
            }
            else if (v56)
            {
              v204 = v46[2];
              v183 = *(_QWORD *)v46;
              v60 = *(_QWORD *)v174;
              v46[2] = *(a2 - 4);
              *(_QWORD *)v46 = v60;
              *(_QWORD *)v174 = v183;
              *(a2 - 4) = v204;
              v61 = v10[4];
              v62 = *v49 < v61;
              if (*v49 == v61)
                v62 = *v46 < v10[3];
              if (v62)
              {
                v63 = *v44;
                v64 = v10[5];
                v65 = v46[2];
                *v44 = *(_QWORD *)v46;
                v10[5] = v65;
                v46[2] = v64;
                *(_QWORD *)v46 = v63;
              }
            }
            v76 = (uint64_t *)(v10 + 6);
            v77 = &v10[3 * v15];
            v80 = v77[3];
            v78 = v77 + 3;
            v79 = v80;
            v81 = v78 + 1;
            v82 = v78[1];
            v83 = v10[7];
            v84 = v80 < v10[6];
            v135 = v82 == v83;
            v85 = v82 < v83;
            if (v135)
              v85 = v84;
            v86 = *(a2 - 8);
            v87 = *(a2 - 9) < v79;
            v135 = v86 == v82;
            v88 = v86 < v82;
            if (v135)
              v88 = v87;
            if (v85)
            {
              if (v88)
              {
                v89 = v10[8];
                v90 = *v76;
                v91 = *(a2 - 7);
                *v76 = *(_QWORD *)v9;
                v10[8] = v91;
                *(_QWORD *)v9 = v90;
                *(a2 - 7) = v89;
              }
              else
              {
                v98 = *v76;
                v99 = v10[8];
                v100 = v78[2];
                *v76 = *(_QWORD *)v78;
                v10[8] = v100;
                v78[2] = v99;
                *(_QWORD *)v78 = v98;
                LODWORD(v98) = *(a2 - 8);
                v101 = v98 < *v81;
                if ((_DWORD)v98 == *v81)
                  v101 = *(a2 - 9) < *v78;
                if (v101)
                {
                  v208 = v78[2];
                  v187 = *(_QWORD *)v78;
                  v102 = *(_QWORD *)v9;
                  v78[2] = *(a2 - 7);
                  *(_QWORD *)v78 = v102;
                  *(_QWORD *)v9 = v187;
                  *(a2 - 7) = v208;
                }
              }
            }
            else if (v88)
            {
              v207 = v78[2];
              v186 = *(_QWORD *)v78;
              v92 = *(_QWORD *)v9;
              v78[2] = *(a2 - 7);
              *(_QWORD *)v78 = v92;
              *(_QWORD *)v9 = v186;
              *(a2 - 7) = v207;
              v93 = v10[7];
              v94 = *v81 < v93;
              if (*v81 == v93)
                v94 = *v78 < v10[6];
              if (v94)
              {
                v95 = *v76;
                v96 = v10[8];
                v97 = v78[2];
                *v76 = *(_QWORD *)v78;
                v10[8] = v97;
                v78[2] = v96;
                *(_QWORD *)v78 = v95;
              }
            }
            v103 = *v20;
            v104 = *v20 < *v49;
            if (*v20 == *v49)
              v104 = *v16 < *v46;
            v135 = *v81 == v103;
            v105 = *v81 < v103;
            if (v135)
              v105 = *v78 < *v16;
            if (v104)
            {
              if (v105)
              {
                v209 = v46[2];
                v188 = *(_QWORD *)v46;
                *(_QWORD *)v46 = *(_QWORD *)v78;
                v46[2] = v78[2];
LABEL_93:
                v78[2] = v209;
                *(_QWORD *)v78 = v188;
                goto LABEL_94;
              }
              v212 = v46[2];
              v191 = *(_QWORD *)v46;
              *(_QWORD *)v46 = *(_QWORD *)v16;
              v46[2] = v16[2];
              v16[2] = v212;
              *(_QWORD *)v16 = v191;
              v109 = *v20;
              v135 = *v81 == v109;
              v110 = *v81 < v109;
              if (v135)
                v110 = *v78 < *v16;
              if (v110)
              {
                v209 = v16[2];
                v188 = *(_QWORD *)v16;
                *(_QWORD *)v16 = *(_QWORD *)v78;
                v16[2] = v78[2];
                goto LABEL_93;
              }
            }
            else if (v105)
            {
              v210 = v16[2];
              v189 = *(_QWORD *)v16;
              *(_QWORD *)v16 = *(_QWORD *)v78;
              v16[2] = v78[2];
              v78[2] = v210;
              *(_QWORD *)v78 = v189;
              v106 = *v20;
              v107 = *v49;
              v135 = v106 == v107;
              v108 = v106 < v107;
              if (v135)
                v108 = *v16 < *v46;
              if (v108)
              {
                v211 = v46[2];
                v190 = *(_QWORD *)v46;
                *(_QWORD *)v46 = *(_QWORD *)v16;
                v46[2] = v16[2];
                v16[2] = v211;
                *(_QWORD *)v16 = v190;
              }
            }
LABEL_94:
            v213 = v10[2];
            v192 = *(_QWORD *)v10;
            v111 = *(_QWORD *)v16;
            v10[2] = v16[2];
            *(_QWORD *)v10 = v111;
            v16[2] = v213;
            *(_QWORD *)v16 = v192;
            if ((a5 & 1) != 0)
              goto LABEL_98;
            goto LABEL_95;
          }
          v26 = v10[1];
          v27 = &v10[3 * v15 + 1];
          v28 = v26 < *v27;
          if (v26 == *v27)
            v28 = *v10 < *v16;
          v29 = v18 < *v10;
          v135 = v17 == v26;
          v30 = v17 < v26;
          if (v135)
            v30 = v29;
          if (v28)
          {
            if (v30)
            {
              v198 = v16[2];
              v177 = *(_QWORD *)v16;
              v31 = *(_QWORD *)v8;
              v16[2] = *(a2 - 1);
              *(_QWORD *)v16 = v31;
              goto LABEL_54;
            }
            v205 = v16[2];
            v184 = *(_QWORD *)v16;
            v66 = *(_QWORD *)v10;
            v16[2] = v10[2];
            *(_QWORD *)v16 = v66;
            v10[2] = v205;
            *(_QWORD *)v10 = v184;
            v67 = *(a2 - 2);
            v68 = v10[1];
            v135 = v67 == v68;
            v69 = v67 < v68;
            if (v135)
              v69 = *(a2 - 3) < *v10;
            if (v69)
            {
              v198 = v10[2];
              v177 = *(_QWORD *)v10;
              v70 = *(_QWORD *)v8;
              v10[2] = *(a2 - 1);
              *(_QWORD *)v10 = v70;
LABEL_54:
              *(_QWORD *)v8 = v177;
              *(a2 - 1) = v198;
            }
LABEL_55:
            if ((a5 & 1) != 0)
              goto LABEL_98;
            goto LABEL_95;
          }
          if (!v30)
            goto LABEL_55;
          v201 = v10[2];
          v180 = *(_QWORD *)v10;
          v36 = *(_QWORD *)v8;
          v10[2] = *(a2 - 1);
          *(_QWORD *)v10 = v36;
          *(_QWORD *)v8 = v180;
          *(a2 - 1) = v201;
          v37 = *v27;
          LODWORD(v36) = v10[1];
          v135 = (_DWORD)v36 == v37;
          v38 = v36 < v37;
          if (v135)
            v38 = *v10 < *v16;
          if (!v38)
            goto LABEL_55;
          v202 = v16[2];
          v181 = *(_QWORD *)v16;
          v39 = *(_QWORD *)v10;
          v16[2] = v10[2];
          *(_QWORD *)v16 = v39;
          v10[2] = v202;
          *(_QWORD *)v10 = v181;
          if ((a5 & 1) != 0)
            goto LABEL_98;
LABEL_95:
          v112 = *(v10 - 2);
          v113 = v10[1];
          v135 = v112 == v113;
          v114 = v112 < v113;
          if (v135)
            v114 = *(v10 - 3) < *v10;
          if (!v114)
          {
            result = sub_239531884(v10, (unint64_t)a2);
            v10 = result;
            goto LABEL_103;
          }
LABEL_98:
          v115 = sub_2395319D0(v10, (unint64_t)a2);
          if ((v116 & 1) == 0)
            goto LABEL_101;
          v117 = sub_239533764(v10, v115);
          v10 = v115 + 3;
          result = (unsigned int *)sub_239533764(v115 + 3, a2);
          if (!(_DWORD)result)
          {
            v11 = v12 + 1;
            if (v117)
              continue;
LABEL_101:
            result = (unsigned int *)sub_239532A48(v7, v115, a3, -v12, a5 & 1);
            v10 = v115 + 3;
LABEL_103:
            a5 = 0;
            a4 = -v12;
            goto LABEL_3;
          }
          a4 = -v12;
          a2 = v115;
          if (v117)
            return result;
          goto LABEL_2;
        }
        v134 = v10 + 3;
        v135 = v10 == a2 || v134 == a2;
        v136 = v135;
        if ((a5 & 1) != 0)
        {
          if ((v136 & 1) == 0)
          {
            v137 = 0;
            v138 = v10;
            do
            {
              v140 = v134;
              v142 = v138[3];
              v141 = v138[4];
              v143 = v138[1];
              v135 = v141 == v143;
              v144 = v141 < v143;
              if (v135)
                v144 = v142 < *v138;
              if (v144)
              {
                v145 = v138[5];
                v146 = v137;
                do
                {
                  v147 = (char *)v10 + v146;
                  *(_QWORD *)(v147 + 12) = *(_QWORD *)((char *)v10 + v146);
                  *((_DWORD *)v147 + 5) = *(unsigned int *)((char *)v10 + v146 + 8);
                  if (!v146)
                  {
                    v139 = v10;
                    goto LABEL_131;
                  }
                  v148 = *((_DWORD *)v147 - 2);
                  v149 = v142 < *((_DWORD *)v147 - 3);
                  v135 = v141 == v148;
                  v150 = v141 < v148;
                  if (!v135)
                    v149 = v150;
                  v146 -= 12;
                }
                while (v149);
                v139 = (unsigned int *)((char *)v10 + v146 + 12);
LABEL_131:
                *v139 = v142;
                v139[1] = v141;
                v139[2] = v145;
              }
              v134 = v140 + 3;
              v137 += 12;
              v138 = v140;
            }
            while (v140 + 3 != a2);
          }
        }
        else if ((v136 & 1) == 0)
        {
          do
          {
            v156 = v134;
            v158 = v7[3];
            v157 = v7[4];
            v159 = v7[1];
            v135 = v157 == v159;
            v160 = v157 < v159;
            if (v135)
              v160 = v158 < *v7;
            if (v160)
            {
              v161 = v7[5];
              v162 = v156;
              do
              {
                v163 = v162;
                v164 = *(_QWORD *)(v162 - 3);
                v162 -= 3;
                *(_QWORD *)v163 = v164;
                v163[2] = *(v163 - 1);
                v165 = *(v163 - 5);
                v166 = v158 < *(v163 - 6);
                v135 = v157 == v165;
                v167 = v157 < v165;
                if (!v135)
                  v166 = v167;
              }
              while (v166);
              *v162 = v158;
              v162[1] = v157;
              v162[2] = v161;
            }
            v134 = v156 + 3;
            v7 = v156;
          }
          while (v156 + 3 != a2);
        }
        return result;
    }
  }
}

BOOL sub_239533764(unsigned int *a1, unsigned int *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  _BOOL4 v7;
  BOOL v8;
  _BOOL4 v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  _QWORD *v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  BOOL v17;
  unsigned int *v18;
  unsigned int v19;
  _BOOL4 v20;
  unsigned int v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int *v24;
  unsigned int v25;
  _QWORD *v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  BOOL v31;
  unsigned int v32;
  _BOOL4 v33;
  _BOOL4 v34;
  unsigned int v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;
  unsigned int v39;
  unsigned int v40;
  _BOOL4 v41;
  unsigned int v42;
  uint64_t v43;
  unsigned int v44;
  uint64_t v45;
  unsigned int v46;
  _BOOL4 v47;
  _BOOL4 v48;
  unsigned int v49;
  uint64_t v50;
  unsigned int v51;
  uint64_t v52;
  unsigned int v53;
  unsigned int v54;
  _BOOL4 v55;
  unsigned int v56;
  uint64_t v57;
  unsigned int v58;
  unsigned int v59;
  uint64_t v60;
  unsigned int v61;
  _BOOL4 v62;
  _BOOL4 v63;
  unsigned int v64;
  uint64_t v65;
  unsigned int *v66;
  uint64_t v67;
  int v68;
  unsigned int v69;
  unsigned int v70;
  unsigned int v71;
  _BOOL4 v72;
  _BOOL4 v73;
  unsigned int v74;
  uint64_t v75;
  char *v76;
  unsigned int v77;
  BOOL v78;
  BOOL v79;
  _DWORD *v80;

  switch(0xAAAAAAAAAAAAAAABLL * (a2 - a1))
  {
    case 0uLL:
    case 1uLL:
      return 1;
    case 2uLL:
      v4 = *(a2 - 3);
      v5 = *(a2 - 2);
      v3 = a2 - 3;
      v6 = a1[1];
      v7 = v4 < *a1;
      v8 = v5 == v6;
      v9 = v5 < v6;
      if (!v8)
        v7 = v9;
      if (v7)
      {
        v10 = a1[2];
        v11 = *(_QWORD *)a1;
        v12 = v3[2];
        *(_QWORD *)a1 = *(_QWORD *)v3;
        a1[2] = v12;
        *(_QWORD *)v3 = v11;
        v3[2] = v10;
      }
      return 1;
    case 3uLL:
      v13 = a1 + 3;
      v14 = a1[3];
      v15 = a1[4];
      v16 = a1[1];
      v8 = v15 == v16;
      v17 = v15 < v16;
      if (v8)
        v17 = v14 < *a1;
      v19 = *(a2 - 2);
      v18 = a2 - 3;
      v20 = *(a2 - 3) < v14;
      if (v19 != v15)
        v20 = v19 < v15;
      if (v17)
      {
        if (v20)
        {
          v21 = a1[2];
          v22 = *(_QWORD *)a1;
          v23 = *(a2 - 1);
          *(_QWORD *)a1 = *(_QWORD *)v18;
          a1[2] = v23;
          *(_QWORD *)v18 = v22;
          *(a2 - 1) = v21;
          return 1;
        }
        v51 = a1[2];
        v52 = *(_QWORD *)a1;
        *(_QWORD *)a1 = *v13;
        a1[2] = a1[5];
        *v13 = v52;
        a1[5] = v51;
        v53 = *(a2 - 2);
        v54 = a1[4];
        v8 = v53 == v54;
        v55 = v53 < v54;
        if (v8)
          v55 = *(a2 - 3) < a1[3];
        if (v55)
        {
          v56 = a1[5];
          v57 = *v13;
          v58 = *(a2 - 1);
          *v13 = *(_QWORD *)v18;
          a1[5] = v58;
          *(_QWORD *)v18 = v57;
          *(a2 - 1) = v56;
          return 1;
        }
      }
      else if (v20)
      {
        v37 = a1[5];
        v38 = *v13;
        v39 = *(a2 - 1);
        *v13 = *(_QWORD *)v18;
        a1[5] = v39;
        *(_QWORD *)v18 = v38;
        *(a2 - 1) = v37;
        v40 = a1[4];
        LODWORD(v38) = a1[1];
        v8 = v40 == (_DWORD)v38;
        v41 = v40 < v38;
        if (v8)
          v41 = a1[3] < *a1;
        if (v41)
        {
          v42 = a1[2];
          v43 = *(_QWORD *)a1;
          *(_QWORD *)a1 = *v13;
          a1[2] = a1[5];
          *v13 = v43;
          a1[5] = v42;
          return 1;
        }
      }
      return 1;
    case 4uLL:
      sub_239531FA8(a1, a1 + 3, a1 + 6, a2 - 3);
      return 1;
    case 5uLL:
      sub_2395321A8(a1, a1 + 3, a1 + 6, a1 + 9, a2 - 3);
      return 1;
    default:
      v24 = a1 + 6;
      v25 = a1[6];
      v26 = a1 + 3;
      v27 = a1[3];
      v28 = a1[4];
      v30 = *a1;
      v29 = a1[1];
      v31 = __PAIR64__(v28, v27) < *(_QWORD *)a1;
      v32 = a1[7];
      v33 = v25 < v27;
      v8 = v32 == v28;
      v34 = v32 < v28;
      if (!v8)
        v33 = v34;
      if (v31)
      {
        if (v33)
        {
          v35 = a1[2];
          v36 = *(_QWORD *)a1;
          *(_QWORD *)a1 = *(_QWORD *)v24;
          a1[2] = a1[8];
          *(_QWORD *)v24 = v36;
          a1[8] = v35;
        }
        else
        {
          v59 = a1[2];
          v60 = *(_QWORD *)a1;
          *(_QWORD *)a1 = *v26;
          a1[2] = a1[5];
          *v26 = v60;
          a1[5] = v59;
          v61 = a1[4];
          v62 = v25 < a1[3];
          v8 = v32 == v61;
          v63 = v32 < v61;
          if (!v8)
            v62 = v63;
          if (v62)
          {
            v64 = a1[5];
            v65 = *v26;
            *v26 = *(_QWORD *)v24;
            a1[5] = a1[8];
            *(_QWORD *)v24 = v65;
            a1[8] = v64;
          }
        }
      }
      else if (v33)
      {
        v44 = a1[5];
        v45 = *v26;
        *v26 = *(_QWORD *)v24;
        a1[5] = a1[8];
        *(_QWORD *)v24 = v45;
        a1[8] = v44;
        v46 = a1[4];
        v47 = a1[3] < v30;
        v8 = v46 == v29;
        v48 = v46 < v29;
        if (v8)
          v48 = v47;
        if (v48)
        {
          v49 = a1[2];
          v50 = *(_QWORD *)a1;
          *(_QWORD *)a1 = *v26;
          a1[2] = a1[5];
          *v26 = v50;
          a1[5] = v49;
        }
      }
      v66 = a1 + 9;
      if (a1 + 9 == a2)
        return 1;
      v67 = 0;
      v68 = 0;
      break;
  }
  while (1)
  {
    v70 = *v66;
    v69 = v66[1];
    v71 = v24[1];
    v72 = *v66 < *v24;
    v8 = v69 == v71;
    v73 = v69 < v71;
    if (!v8)
      v72 = v73;
    if (v72)
      break;
LABEL_53:
    v24 = v66;
    v67 += 12;
    v66 += 3;
    if (v66 == a2)
      return 1;
  }
  v74 = v66[2];
  v75 = v67;
  do
  {
    v76 = (char *)a1 + v75;
    *(_QWORD *)(v76 + 36) = *(_QWORD *)((char *)a1 + v75 + 24);
    *((_DWORD *)v76 + 11) = *(unsigned int *)((char *)a1 + v75 + 32);
    if (v75 == -24)
    {
      *a1 = v70;
      a1[1] = v69;
      a1[2] = v74;
      if (++v68 != 8)
        goto LABEL_53;
      return v66 + 3 == a2;
    }
    v77 = *((_DWORD *)v76 + 4);
    v78 = v70 < *((_DWORD *)v76 + 3);
    v8 = v69 == v77;
    v79 = v69 < v77;
    if (!v8)
      v78 = v79;
    v75 -= 12;
  }
  while (v78);
  v80 = (unsigned int *)((char *)a1 + v75);
  v80[9] = v70;
  v80[10] = v69;
  v80[11] = v74;
  if (++v68 != 8)
    goto LABEL_53;
  return v66 + 3 == a2;
}

void sub_239533C04()
{
  JUMPOUT(0x23B83E31CLL);
}

__n128 sub_239533C18(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x50uLL);
  *(_QWORD *)v2 = &off_250ADD858;
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(v2 + 56) = *(_OWORD *)(a1 + 56);
  *((_QWORD *)v2 + 9) = *(_QWORD *)(a1 + 72);
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_239533C70(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_QWORD *)a2 = &off_250ADD858;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  v3 = *(_OWORD *)(a1 + 40);
  v4 = *(_OWORD *)(a1 + 56);
  *(_QWORD *)(a2 + 72) = *(_QWORD *)(a1 + 72);
  *(_OWORD *)(a2 + 56) = v4;
  *(_OWORD *)(a2 + 40) = v3;
  *(__n128 *)(a2 + 24) = result;
  return result;
}

void sub_239533CB0(uint64_t a1, unsigned int *a2)
{
  uint64_t v3;
  uint64_t v4;
  size_t v5;
  float *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  float *v12;
  _BYTE *v13;
  float v14;
  float v16;
  float *v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v20;
  size_t v21;
  _DWORD *v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  int v26;
  unint64_t v27;
  int32x2_t v28;
  float v29;
  float *v30;
  uint64_t v31;
  float *v32;
  uint64_t v33;
  float v34;
  _BYTE *v35;
  uint64_t v36;
  unint64_t v37;
  float *v38;
  unint64_t v39;
  float32x4_t v40;
  float32x4_t *v41;
  uint64_t v42;
  float32x4_t v43;
  float *v44;
  uint64_t v45;
  uint64_t v46;
  BOOL v47;
  uint64_t v48;
  unint64_t v49;
  _DWORD *v50;
  unint64_t v51;
  __int128 v52;
  _DWORD *v53;
  std::bad_alloc *exception;
  std::bad_alloc *v55;
  std::bad_alloc *v56;
  std::bad_alloc *v57;
  void *v58[2];
  unsigned int v59;
  void *memptr[2];
  unsigned int v61;
  void *v62[2];
  int v63;
  _QWORD v64[2];
  void *v65[2];

  v3 = *a2;
  v4 = *(unsigned int *)(a1 + 72);
  v5 = (4 * v4 + 31) & 0x7FFFFFFE0;
  v62[1] = (void *)(v5 >> 2);
  memptr[0] = 0;
  malloc_type_posix_memalign(memptr, 0x20uLL, v5, 0x100BBD03uLL);
  v6 = (float *)memptr[0];
  v62[0] = memptr[0];
  if (!memptr[0])
  {
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v55 = std::bad_alloc::bad_alloc(exception);
    __cxa_throw(v55, (struct type_info *)&unk_250ADB310, (void (*)(void *))MEMORY[0x24BEDB670]);
  }
  v63 = v4;
  v7 = *(uint64_t **)(a1 + 8);
  v8 = *v7;
  v9 = v7[1] - *v7;
  if (v9)
  {
    v10 = 0;
    v11 = v9 / 12;
    v12 = (float *)(v8 + 4 * v3);
    if (v11 <= 1)
      v11 = 1;
    v13 = *(_BYTE **)(a1 + 40);
    do
    {
      v14 = *v12;
      if (*v12 < -255.0 || v14 > 255.0)
      {
        v16 = 255.0;
        if (v14 <= 255.0)
          v16 = *v12;
        if (v14 >= -255.0)
          v14 = v16;
        else
          v14 = -255.0;
        if (v13[8])
          ++*(_DWORD *)(*(_QWORD *)(*(_QWORD *)v13 + 64) + 4 * v3);
      }
      v6[v10++] = v14;
      v12 += 3;
    }
    while (v11 != v10);
  }
  sub_2395341D4(*(_QWORD *)(a1 + 24), (uint64_t *)v62, (uint64_t)memptr);
  if (v61)
  {
    v17 = (float *)memptr[0];
    v18 = *(_BYTE **)(a1 + 40);
    v19 = 4 * v61;
    do
    {
      if (fabsf(*v17) == INFINITY)
      {
        *v17 = 0.0;
        if (v18[8])
          ++*(_DWORD *)(*(_QWORD *)(*(_QWORD *)v18 + 88) + 4 * v3);
      }
      ++v17;
      v19 -= 4;
    }
    while (v19);
  }
  v20 = *(unsigned int *)(a1 + 56);
  v21 = (4 * v20 + 31) & 0x7FFFFFFE0;
  v58[1] = (void *)(v21 >> 2);
  v65[0] = 0;
  malloc_type_posix_memalign(v65, 0x20uLL, v21, 0x100BBD03uLL);
  v22 = v65[0];
  v58[0] = v65[0];
  if (!v65[0])
  {
    v56 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v57 = std::bad_alloc::bad_alloc(v56);
    __cxa_throw(v57, (struct type_info *)&unk_250ADB310, (void (*)(void *))MEMORY[0x24BEDB670]);
  }
  v59 = v20;
  v23 = *(_QWORD *)(a1 + 32);
  v24 = v23 + 8;
  if (!*(_DWORD *)v23)
  {
    v25 = v61;
    v26 = *(unsigned __int8 *)(v23 + 32);
    if (v61 == *(_DWORD *)(v23 + 20) * v26)
    {
      v27 = (*(_DWORD *)(v23 + 24) * v26);
      if ((_DWORD)v20 != (_DWORD)v27)
      {
        v59 = *(_DWORD *)(v23 + 24) * v26;
        sub_2395342E8((uint64_t)v58, v27);
        v25 = v61;
        LODWORD(v20) = v59;
        v22 = v58[0];
      }
      v65[1] = memptr[0];
      v65[0] = (void *)v25;
      v64[1] = v22;
      v64[0] = v20;
      if (v22)
      {
        if (memptr[0])
        {
          sub_239A234C8(v24, (uint64_t)v64, (uint64_t)v65, 0);
          if (v59)
          {
            v29 = *(float *)v58[0];
            if (v59 != 1)
            {
              v30 = (float *)((char *)v58[0] + 4);
              if (((v59 + 0x3FFFFFFFFFFFFFFELL) & 0x3FFFFFFFFFFFFFFFLL) == 0)
                goto LABEL_68;
              v31 = ((v59 + 0x3FFFFFFFFFFFFFFELL) & 0x3FFFFFFFFFFFFFFFLL) + 1;
              v30 += v31 & 0x7FFFFFFFFFFFFFFELL;
              v32 = (float *)((char *)v58[0] + 8);
              v33 = v31 & 0x7FFFFFFFFFFFFFFELL;
              do
              {
                v29 = (float)(v29 + *(v32 - 1)) + *v32;
                v32 += 2;
                v33 -= 2;
              }
              while (v33);
              if (v31 != (v31 & 0x7FFFFFFFFFFFFFFELL))
              {
LABEL_68:
                do
                {
                  v34 = *v30++;
                  v29 = v29 + v34;
                }
                while (v30 != (float *)((char *)v58[0] + 4 * v59));
              }
            }
          }
          else
          {
            v29 = 0.0;
          }
          *(float *)v28.i32 = v29 / (float)v59;
          v35 = *(_BYTE **)(a1 + 40);
          if (v35[8])
            *(_DWORD *)(*(_QWORD *)(*(_QWORD *)v35 + 40) + 4 * v3) = v28.i32[0];
          v36 = v59;
          v22 = v58[0];
          if (v59)
          {
            v37 = (v59 - 1) & 0x3FFFFFFFFFFFFFFFLL;
            v38 = (float *)v58[0];
            if (v37 < 7)
              goto LABEL_47;
            v39 = v37 + 1;
            v38 = (float *)((char *)v58[0] + 4 * (v39 & 0x7FFFFFFFFFFFFFF8));
            v40 = (float32x4_t)vdupq_lane_s32(v28, 0);
            v41 = (float32x4_t *)((char *)v58[0] + 16);
            v42 = v39 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v43 = vsubq_f32(*v41, v40);
              v41[-1] = vsubq_f32(v41[-1], v40);
              *v41 = v43;
              v41 += 2;
              v42 -= 8;
            }
            while (v42);
            if (v39 != (v39 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_47:
              v44 = (float *)&v22[v36];
              do
              {
                *v38 = *v38 - *(float *)v28.i32;
                ++v38;
              }
              while (v38 != v44);
            }
          }
          v45 = *(_QWORD *)(a1 + 64);
          if (v45)
          {
            v46 = **(_QWORD **)(a1 + 16);
            if ((unint64_t)(v45 - 0x100000001) < 0xFFFFFFFF00000027
              || (v46 + 4 * v3 < (unint64_t)&v22[v45]
                ? (v47 = (unint64_t)v22 >= 12 * v45 + 4 * v3 + v46 - 8)
                : (v47 = 1),
                  !v47))
            {
              v49 = 0;
LABEL_61:
              v53 = (_DWORD *)(v46 + 12 * v49 + 4 * v3);
              do
              {
                *v53 = v22[v49];
                v53 += 3;
                ++v49;
              }
              while (v45 != v49);
              goto LABEL_63;
            }
            v48 = 0;
            v49 = v45 & 0xFFFFFFFFFFFFFFFCLL;
            v50 = (_DWORD *)(v46 + 4 * v3 + 24);
            v51 = v45 & 0xFFFFFFFFFFFFFFFCLL;
            do
            {
              v52 = *(_OWORD *)&v22[v48];
              *(v50 - 3) = DWORD1(v52);
              *v50 = DWORD2(v52);
              *(v50 - 6) = v52;
              v50[3] = HIDWORD(v52);
              v48 += 4;
              v50 += 12;
              v51 -= 4;
            }
            while (v51);
            if (v45 != v49)
              goto LABEL_61;
          }
        }
      }
    }
  }
LABEL_63:
  free(v22);
  free(memptr[0]);
  free(v62[0]);
}

void sub_239534180(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *a16)
{
  free(a10);
  free(a13);
  free(a16);
  _Unwind_Resume(a1);
}

void sub_2395341A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16)
{
  free(a16);
  _Unwind_Resume(a1);
}

void sub_2395341B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *a16)
{
  free(a13);
  free(a16);
  _Unwind_Resume(a1);
}

void sub_2395341D4(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  _DWORD *v4;
  _DWORD *v5;
  _DWORD *v8;
  unint64_t v9;
  float *v10;
  uint64_t v11;
  int *v12;
  int *v13;
  uint64_t v14;
  int *v15;
  int *v16;
  int *v17;

  v4 = (_DWORD *)(a1 + 4);
  if ((*(_WORD *)(a1 + 24) & 1) != 0)
    v5 = (_DWORD *)a1;
  else
    v5 = (_DWORD *)(a1 + 4);
  if (*v5 * *(unsigned __int8 *)(a1 + 28) != *((_DWORD *)a2 + 4))
    sub_239EC04B8();
  sub_239532748((int *)a1, &v16);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  if ((*(_WORD *)(a1 + 24) & 1) != 0)
    v8 = v4;
  else
    v8 = (_DWORD *)a1;
  v9 = *v8 * *(unsigned __int8 *)(a1 + 28);
  *(_DWORD *)(a3 + 16) = v9;
  sub_2395342E8(a3, v9);
  v10 = *(float **)a3;
  v11 = *(unsigned int *)(a3 + 16);
  if ((_DWORD)v11)
    bzero(*(void **)a3, 4 * v11);
  v12 = v16;
  v13 = v17;
  if (v16 != v17)
  {
    v14 = *a2;
    v15 = v16;
    do
    {
      v10[*v15] = v10[*v15] + (float)(*((float *)v15 + 2) * *(float *)(v14 + 4 * v15[1]));
      v15 += 3;
    }
    while (v15 != v13);
  }
  if (v12)
  {
    v17 = v12;
    operator delete(v12);
  }
}

void sub_2395342C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  void **v11;

  free(*v11);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_2395342E8(uint64_t a1, unint64_t a2)
{
  size_t v4;
  void *v5;
  std::bad_alloc *exception;
  std::bad_alloc *v7;
  void *memptr;

  if (a2)
  {
    if (*(_QWORD *)(a1 + 8) < a2)
    {
      free(*(void **)a1);
      v4 = (4 * a2 + 31) & 0xFFFFFFFFFFFFFFE0;
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = v4 >> 2;
      memptr = 0;
      malloc_type_posix_memalign(&memptr, 0x20uLL, v4, 0x100BBD03uLL);
      v5 = memptr;
      *(_QWORD *)a1 = memptr;
      if (!v5)
      {
        exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
        v7 = std::bad_alloc::bad_alloc(exception);
        __cxa_throw(v7, (struct type_info *)&unk_250ADB310, (void (*)(void *))MEMORY[0x24BEDB670]);
      }
    }
  }
  else
  {
    free(*(void **)a1);
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
  }
}

uint64_t sub_23953439C(uint64_t a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *(void ***)(a1 + 8);
  v3 = *(void ***)(a1 + 16);
  *(_QWORD *)(a1 + 40) = 0;
  v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = *(void ***)(a1 + 16);
      v2 = (void **)(*(_QWORD *)(a1 + 8) + 8);
      *(_QWORD *)(a1 + 8) = v2;
      v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v5 = v4 >> 3;
  if (v5 == 1)
  {
    v6 = 512;
    goto LABEL_7;
  }
  if (v5 == 2)
  {
    v6 = 1024;
LABEL_7:
    *(_QWORD *)(a1 + 32) = v6;
  }
  if (v2 != v3)
  {
    do
    {
      v7 = *v2++;
      operator delete(v7);
    }
    while (v2 != v3);
    v9 = *(_QWORD *)(a1 + 8);
    v8 = *(_QWORD *)(a1 + 16);
    if (v8 != v9)
      *(_QWORD *)(a1 + 16) = v8 + ((v9 - v8 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_239534464()
{
  JUMPOUT(0x23B83E31CLL);
}

__n128 sub_239534478(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x38uLL);
  *(_QWORD *)v2 = &off_250ADD8A0;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  return result;
}

__n128 sub_2395344C0(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  *(_QWORD *)a2 = &off_250ADD8A0;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_2395344F0(uint64_t result, int *a2, double a3, double a4, double a5, float a6)
{
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  float v16;
  float v17;
  uint64_t v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;

  v6 = **(_QWORD **)(result + 8);
  if (v6)
  {
    v7 = 0;
    v8 = *a2;
    do
    {
      v9 = **(_QWORD **)(result + 8);
      v10 = v7 + v9 * v8;
      v11 = *(unsigned int *)(*(_QWORD *)(result + 40) + 4 * v10);
      v12 = v11 >> 26;
      if (*(_DWORD *)(*(_QWORD *)(result + 40) + 4 * v10) >> 26 != 63)
      {
        v13 = *(_QWORD *)(result + 16);
        if (!*(_BYTE *)(v13 + 232))
          sub_2394875CC();
        v14 = *(_QWORD *)(v13 + 208) + 912 * v12;
        v15 = (_BYTE *)(*(_QWORD *)(v14 + 152)
                      + *(_DWORD *)(v14 + 192) * (v11 & 0x1FFF)
                      + *(_DWORD *)(v14 + 196) * ((v11 >> 13) & 0x1FFF));
        LOBYTE(v9) = *v15;
        LOBYTE(a6) = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 24) + 80)
                              + (*(_DWORD *)(*(_QWORD *)(result + 24) + 120) * v7
                                             + *(_DWORD *)(*(_QWORD *)(result + 24) + 124) * v8));
        *(float *)&v9 = (float)v9 - (float)LODWORD(a6);
        if (v12 >= *(_DWORD *)(result + 32))
          *(float *)&v9 = *(float *)&v9 * 0.5;
        a6 = 127.0;
        if (*(float *)&v9 <= 127.0)
          v16 = *(float *)&v9;
        else
          v16 = 127.0;
        if (*(float *)&v9 >= -128.0)
          v17 = v16;
        else
          v17 = -128.0;
        v18 = 4 * v10;
        *(_BYTE *)(*(_QWORD *)(result + 48) + v18) = vcvtms_s32_f32(v17);
        LOBYTE(v17) = v15[1];
        LOBYTE(v16) = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 24) + 80)
                               + (*(_DWORD *)(*(_QWORD *)(result + 24) + 120) * v7
                                              + *(_DWORD *)(*(_QWORD *)(result + 24) + 124) * v8)
                               + 1);
        v19 = (float)LODWORD(v17) - (float)LODWORD(v16);
        if (v12 >= *(_DWORD *)(result + 32))
          v19 = v19 * 0.5;
        if (v19 <= 127.0)
          v20 = v19;
        else
          v20 = 127.0;
        if (v19 >= -128.0)
          v21 = v20;
        else
          v21 = -128.0;
        *(_BYTE *)(*(_QWORD *)(result + 48) + v18 + 1) = vcvtms_s32_f32(v21);
        LOBYTE(v21) = v15[2];
        LOBYTE(v20) = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 24) + 80)
                               + (*(_DWORD *)(*(_QWORD *)(result + 24) + 120) * v7
                                              + *(_DWORD *)(*(_QWORD *)(result + 24) + 124) * v8)
                               + 2);
        v22 = (float)LODWORD(v21) - (float)LODWORD(v20);
        if (v12 >= *(_DWORD *)(result + 32))
          v22 = v22 * 0.5;
        if (v22 <= 127.0)
          a6 = v22;
        if (v22 >= -128.0)
          v23 = a6;
        else
          v23 = -128.0;
        *(_BYTE *)(*(_QWORD *)(result + 48) + v18 + 2) = vcvtms_s32_f32(v23);
      }
      ++v7;
    }
    while (v6 != v7);
  }
  return result;
}

void sub_2395346A8(int a1@<W0>, _QWORD *a2@<X8>)
{
  const char *v3;
  int v4;
  std::string::size_type size;
  int v6;
  size_t v7;
  unint64_t v8;
  std::string *v9;
  char *v10;
  const void *p_p;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  void *__p;
  size_t v16;
  uint64_t v17;
  std::string v18;
  std::string v19;
  std::string v20;
  std::string v21;
  std::string __str;

  *((_BYTE *)&__str.__r_.__value_.__s + 23) = 5;
  strcpy((char *)&__str, "viz::");
  *((_BYTE *)&v21.__r_.__value_.__s + 23) = 8;
  strcpy((char *)&v21, "render::");
  *((_BYTE *)&v20.__r_.__value_.__s + 23) = 5;
  strcpy((char *)&v20, "bld::");
  *((_BYTE *)&v19.__r_.__value_.__s + 23) = 7;
  strcpy((char *)&v19, "utils::");
  memset(&v18, 0, sizeof(v18));
  __p = 0;
  v16 = 0;
  v17 = 0;
  switch(a1)
  {
    case 0:
      std::string::operator=(&v18, &__str);
      v3 = "mFEzvGZ80YdXyVkx";
      goto LABEL_49;
    case 1:
      std::string::operator=(&v18, &__str);
      v3 = "SwzYL1cA3GC6pa55";
      goto LABEL_49;
    case 2:
      std::string::operator=(&v18, &__str);
      v3 = "oIvuGrqCzcCw004D";
      goto LABEL_49;
    case 3:
      std::string::operator=(&v18, &__str);
      v3 = "cusyGz5Bxzafj1tZ";
      goto LABEL_49;
    case 4:
      std::string::operator=(&v18, &__str);
      v3 = "FcGPtA4rhdosV6Sy";
      goto LABEL_49;
    case 5:
      std::string::operator=(&v18, &__str);
      v3 = "nDRJlGoOX8K3vckS";
      goto LABEL_49;
    case 6:
      std::string::operator=(&v18, &__str);
      v3 = "vjNODYLlavfn2YVh";
      goto LABEL_49;
    case 7:
      std::string::operator=(&v18, &__str);
      v3 = "CzyQAuojUtjnsLbl";
      goto LABEL_49;
    case 8:
      std::string::operator=(&v18, &__str);
      v3 = "jC4EiSNejqce1Lwg";
      goto LABEL_49;
    case 9:
      std::string::operator=(&v18, &__str);
      v3 = "xu5fCsTPooAP2LTj";
      goto LABEL_49;
    case 10:
      std::string::operator=(&v18, &__str);
      v3 = "xKrarx0gZDf2hFcY";
      goto LABEL_49;
    case 11:
      std::string::operator=(&v18, &__str);
      v3 = "aXWvScuR4VFwUzGa";
      goto LABEL_49;
    case 12:
      std::string::operator=(&v18, &__str);
      v3 = "YmbWSHADSyceXlmw";
      goto LABEL_49;
    case 13:
      std::string::operator=(&v18, &__str);
      v3 = "z7EVefQp3vnf5dSL";
      goto LABEL_49;
    case 14:
      std::string::operator=(&v18, &__str);
      v3 = "rruE03poot7Gr3FG";
      goto LABEL_49;
    case 15:
      std::string::operator=(&v18, &__str);
      v3 = "jQ6J45VrZoRYvHeD";
      goto LABEL_49;
    case 16:
      std::string::operator=(&v18, &__str);
      v3 = "PobUf5yFg6j1ZbVy";
      goto LABEL_49;
    case 17:
      std::string::operator=(&v18, &__str);
      v3 = "zzASM7fj5IsvMnNy";
      goto LABEL_49;
    case 18:
      std::string::operator=(&v18, &__str);
      v3 = "KR5BzQ7HSFfSf5AC";
      goto LABEL_49;
    case 19:
      std::string::operator=(&v18, &__str);
      v3 = "M6AvLdBV0NqoTfnp";
      goto LABEL_49;
    case 20:
      std::string::operator=(&v18, &__str);
      v3 = "NBPNfLKfOhCGlfEK";
      goto LABEL_49;
    case 21:
      std::string::operator=(&v18, &__str);
      v3 = "TpFICKt0DPx6nuTc";
      goto LABEL_49;
    case 22:
      std::string::operator=(&v18, &v21);
      v3 = "jm9NQN3V028naXrs";
      goto LABEL_49;
    case 23:
      std::string::operator=(&v18, &v21);
      v3 = "bhanTt8DQUtAwBl4";
      goto LABEL_49;
    case 24:
      std::string::operator=(&v18, &v21);
      v3 = "fOEh9gRaFhiU7bB5";
      goto LABEL_49;
    case 25:
      std::string::operator=(&v18, &v21);
      v3 = "CgkgrTC5f21x7RfE";
      goto LABEL_49;
    case 26:
      std::string::operator=(&v18, &v21);
      v3 = "Dundsi096sJ6z6Tn";
      goto LABEL_49;
    case 27:
      std::string::operator=(&v18, &v21);
      v3 = "JZJl9PSapHp1Yv3U";
      goto LABEL_49;
    case 28:
      std::string::operator=(&v18, &v21);
      v3 = "BdDeQKts3ZFy8W5k";
      goto LABEL_49;
    case 29:
      std::string::operator=(&v18, &v21);
      v3 = "Z3q4gNvUDLTvznDm";
      goto LABEL_49;
    case 30:
      std::string::operator=(&v18, &v21);
      v3 = "psa7CDPIwIGiQdu3";
      goto LABEL_49;
    case 31:
      std::string::operator=(&v18, &v20);
      v3 = "oTMC757WNLra8Ph2";
      goto LABEL_49;
    case 32:
      std::string::operator=(&v18, &v20);
      v3 = "ElI4TpWQXIU1EzXS";
      goto LABEL_49;
    case 33:
      std::string::operator=(&v18, &v20);
      v3 = "C95ZY1AqU4rDoMMd";
      goto LABEL_49;
    case 34:
      std::string::operator=(&v18, &v20);
      v3 = "NhDnmvb2lcXBq3w9";
      goto LABEL_49;
    case 35:
      std::string::operator=(&v18, &v20);
      v3 = "q5oS1ntE2zxXE3ZL";
      goto LABEL_49;
    case 36:
      std::string::operator=(&v18, &v19);
      v3 = "V9cYpQ7IXHUT4PE7";
      goto LABEL_49;
    case 37:
      std::string::operator=(&v18, &v19);
      v3 = "WXAOumldewTWnKKq";
      goto LABEL_49;
    case 38:
      std::string::operator=(&v18, &v19);
      v3 = "MXQ57dKhwth0cwmU";
      goto LABEL_49;
    case 39:
      std::string::operator=(&v18, &v19);
      v3 = "mLK3g0TGKMyeCcjH";
      goto LABEL_49;
    case 40:
      std::string::operator=(&v18, &v19);
      v3 = "SrgGXwWzmzR09S0A";
      goto LABEL_49;
    case 41:
      std::string::operator=(&v18, &v19);
      v3 = "EsgPDJd8Ub975wBO";
      goto LABEL_49;
    case 42:
      std::string::operator=(&v18, &v19);
      v3 = "xoIyxyAY5xhBLSQz";
      goto LABEL_49;
    case 43:
      std::string::operator=(&v18, &v19);
      v3 = "bBmDNRoSjsuSqZe9";
      goto LABEL_49;
    case 44:
      std::string::operator=(&v18, &v19);
      v3 = "GYmxR5SZECLb6P4b";
      goto LABEL_49;
    case 45:
      std::string::operator=(&v18, &v19);
      v3 = "DilateMaskF";
      goto LABEL_49;
    case 46:
      std::string::operator=(&v18, &v19);
      v3 = "DilateMaskU";
LABEL_49:
      MEMORY[0x23B83DBFC](&__p, v3);
      break;
    default:
      break;
  }
  v4 = SHIBYTE(v18.__r_.__value_.__r.__words[2]);
  if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v18.__r_.__value_.__r.__words[2]);
  else
    size = v18.__r_.__value_.__l.__size_;
  v6 = SHIBYTE(v17);
  if (v17 >= 0)
    v7 = HIBYTE(v17);
  else
    v7 = v16;
  v8 = v7 + size;
  if (v7 + size >= 0x7FFFFFFFFFFFFFF8)
    sub_23941A5AC();
  if (v8 <= 0x16)
  {
    a2[1] = 0;
    a2[2] = 0;
    *a2 = 0;
    *((_BYTE *)a2 + 23) = v8;
    if (!size)
      goto LABEL_63;
    goto LABEL_59;
  }
  v12 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v8 | 7) != 0x17)
    v12 = v8 | 7;
  v13 = v12 + 1;
  v14 = operator new(v12 + 1);
  a2[1] = v8;
  a2[2] = v13 | 0x8000000000000000;
  *a2 = v14;
  a2 = v14;
  if (size)
  {
LABEL_59:
    if (v4 >= 0)
      v9 = &v18;
    else
      v9 = (std::string *)v18.__r_.__value_.__r.__words[0];
    memmove(a2, v9, size);
  }
LABEL_63:
  v10 = (char *)a2 + size;
  if (v7)
  {
    if (v6 >= 0)
      p_p = &__p;
    else
      p_p = __p;
    memmove(v10, p_p, v7);
  }
  v10[v7] = 0;
  if (v6 < 0)
  {
    operator delete(__p);
    if ((*((_BYTE *)&v18.__r_.__value_.__s + 23) & 0x80) == 0)
    {
LABEL_70:
      if ((SHIBYTE(v19.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_71;
      goto LABEL_81;
    }
  }
  else if ((v4 & 0x80) == 0)
  {
    goto LABEL_70;
  }
  operator delete(v18.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v19.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_71:
    if ((SHIBYTE(v20.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_72;
    goto LABEL_82;
  }
LABEL_81:
  operator delete(v19.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v20.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_72:
    if ((SHIBYTE(v21.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_73;
    goto LABEL_83;
  }
LABEL_82:
  operator delete(v20.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v21.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_73:
    if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_84:
    operator delete(__str.__r_.__value_.__l.__data_);
    return;
  }
LABEL_83:
  operator delete(v21.__r_.__value_.__l.__data_);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_84;
}

void sub_239534D54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  uint64_t v38;

  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a26 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  if ((a26 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a32 & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_11;
  }
LABEL_10:
  operator delete(a21);
  if ((a32 & 0x80000000) == 0)
  {
LABEL_5:
    if ((a38 & 0x80000000) == 0)
      goto LABEL_6;
    goto LABEL_12;
  }
LABEL_11:
  operator delete(a27);
  if ((a38 & 0x80000000) == 0)
  {
LABEL_6:
    if ((*(char *)(v38 - 65) & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_13;
  }
LABEL_12:
  operator delete(a33);
  if ((*(char *)(v38 - 65) & 0x80000000) == 0)
LABEL_7:
    _Unwind_Resume(exception_object);
LABEL_13:
  operator delete(*(void **)(v38 - 88));
  _Unwind_Resume(exception_object);
}

void sub_239534DF0(int a1@<W0>, uint64_t a2@<X8>)
{
  int v3;
  std::string::size_type size;
  int v5;
  size_t v6;
  unint64_t v7;
  char *v8;
  std::string *v9;
  char *v10;
  void **v11;
  int v12;
  size_t v13;
  unint64_t v14;
  __int128 *v15;
  std::string *v16;
  char *v17;
  void **v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  unint64_t v24;
  void *__dst[2];
  void *v26;
  __int128 v27;
  void *v28;
  void *__p[2];
  void *v30[4];
  std::string v31;
  std::string v32;
  std::string v33;
  std::string v34;
  std::string __str;

  *((_BYTE *)&__str.__r_.__value_.__s + 23) = 5;
  strcpy((char *)&__str, "viz::");
  *((_BYTE *)&v34.__r_.__value_.__s + 23) = 8;
  strcpy((char *)&v34, "render::");
  *((_BYTE *)&v33.__r_.__value_.__s + 23) = 5;
  strcpy((char *)&v33, "bld::");
  *((_BYTE *)&v32.__r_.__value_.__s + 23) = 7;
  strcpy((char *)&v32, "utils::");
  memset(&v31, 0, sizeof(v31));
  memset(v30, 0, sizeof(v30));
  *(_OWORD *)__p = 0u;
  switch(a1)
  {
    case 0:
      std::string::operator=(&v31, &__str);
      sub_239536BB8((uint64_t)__dst, "F1behCbio72UwPea", "X4k1vdCZ9LKHTp9b");
      goto LABEL_12;
    case 1:
      std::string::operator=(&v31, &__str);
      sub_239536BB8((uint64_t)__dst, "nvdyKjxkjRtiZNIU", "y7UKO9yios9CedEF");
      goto LABEL_12;
    case 2:
      std::string::operator=(&v31, &v34);
      sub_239536BB8((uint64_t)__dst, "N2D8ekESgkoMgM7r", "Dy9iUk0SmfunhBnC");
      goto LABEL_12;
    case 3:
      std::string::operator=(&v31, &v34);
      sub_239536BB8((uint64_t)__dst, "QZf8niLlGcc55XTj", "NWhz61itXz6kH5ui");
      goto LABEL_12;
    case 4:
      std::string::operator=(&v31, &v34);
      sub_239536BB8((uint64_t)__dst, "QZf8niLlGcc55XTj", "sT8GLJW7mzAX4pH0");
      goto LABEL_12;
    case 5:
      std::string::operator=(&v31, &v33);
      sub_239536BB8((uint64_t)__dst, "iZBfooO83QQUg8gq", "fXYZ4vvFfJv5GD8S");
      goto LABEL_12;
    case 6:
      std::string::operator=(&v31, &v33);
      sub_239536BB8((uint64_t)__dst, "dZqoO7KdUUQUNpo4", "RbINkslda7194jfJ");
      goto LABEL_12;
    case 7:
      std::string::operator=(&v31, &v34);
      sub_239536BB8((uint64_t)__dst, "ZeS4YvPTEQN9ycu5", "ogqvWG836bb2JOCW");
      goto LABEL_12;
    case 8:
      std::string::operator=(&v31, &v34);
      sub_239536BB8((uint64_t)__dst, "Jj977ZFtGXdiz8rM", "DMQP5E1iz40NY1L3");
      goto LABEL_12;
    case 9:
      std::string::operator=(&v31, &v32);
      sub_239536BB8((uint64_t)__dst, "VhZkVgBDlTkRaTs0", "dghUzLN0fJlgqf23");
LABEL_12:
      if (SHIBYTE(v30[0]) < 0)
        operator delete(__p[0]);
      *(_OWORD *)__p = *(_OWORD *)__dst;
      v30[0] = v26;
      HIBYTE(v26) = 0;
      LOBYTE(__dst[0]) = 0;
      if (SHIBYTE(v30[3]) < 0)
      {
        operator delete(v30[1]);
        *(_OWORD *)&v30[1] = v27;
        v30[3] = v28;
        HIBYTE(v28) = 0;
        LOBYTE(v27) = 0;
        if (SHIBYTE(v26) < 0)
          operator delete(__dst[0]);
      }
      else
      {
        *(_OWORD *)&v30[1] = v27;
        v30[3] = v28;
      }
      break;
    default:
      break;
  }
  v3 = SHIBYTE(v31.__r_.__value_.__r.__words[2]);
  if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v31.__r_.__value_.__r.__words[2]);
  else
    size = v31.__r_.__value_.__l.__size_;
  v5 = SHIBYTE(v30[0]);
  if (SHIBYTE(v30[0]) >= 0)
    v6 = HIBYTE(v30[0]);
  else
    v6 = (size_t)__p[1];
  v7 = v6 + size;
  if (v6 + size > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  if (v7 <= 0x16)
  {
    __dst[1] = 0;
    v26 = 0;
    __dst[0] = 0;
    v8 = (char *)__dst;
    HIBYTE(v26) = v6 + size;
    if (!size)
      goto LABEL_31;
    goto LABEL_27;
  }
  v19 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v7 | 7) != 0x17)
    v19 = v7 | 7;
  v20 = v19 + 1;
  v8 = (char *)operator new(v19 + 1);
  __dst[1] = (void *)(v6 + size);
  v26 = (void *)(v20 | 0x8000000000000000);
  __dst[0] = v8;
  if (size)
  {
LABEL_27:
    if (v3 >= 0)
      v9 = &v31;
    else
      v9 = (std::string *)v31.__r_.__value_.__r.__words[0];
    memmove(v8, v9, size);
  }
LABEL_31:
  v10 = &v8[size];
  if (v6)
  {
    if (v5 >= 0)
      v11 = __p;
    else
      v11 = (void **)__p[0];
    memmove(v10, v11, v6);
  }
  v10[v6] = 0;
  v12 = SHIBYTE(v30[3]);
  if (SHIBYTE(v30[3]) >= 0)
    v13 = HIBYTE(v30[3]);
  else
    v13 = (size_t)v30[2];
  v14 = v13 + size;
  if (v13 + size > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  if (v14 <= 0x16)
  {
    v24 = 0;
    v23 = 0uLL;
    v15 = &v23;
    HIBYTE(v24) = v13 + size;
    if (!size)
      goto LABEL_46;
    goto LABEL_42;
  }
  v21 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v14 | 7) != 0x17)
    v21 = v14 | 7;
  v22 = v21 + 1;
  v15 = (__int128 *)operator new(v21 + 1);
  *((_QWORD *)&v23 + 1) = v13 + size;
  v24 = v22 | 0x8000000000000000;
  *(_QWORD *)&v23 = v15;
  if (size)
  {
LABEL_42:
    if (v3 >= 0)
      v16 = &v31;
    else
      v16 = (std::string *)v31.__r_.__value_.__r.__words[0];
    memmove(v15, v16, size);
  }
LABEL_46:
  v17 = (char *)v15 + size;
  if (v13)
  {
    if (v12 >= 0)
      v18 = &v30[1];
    else
      v18 = (void **)v30[1];
    memmove(v17, v18, v13);
  }
  v17[v13] = 0;
  *(_OWORD *)a2 = *(_OWORD *)__dst;
  *(_QWORD *)(a2 + 16) = v26;
  *(_OWORD *)(a2 + 24) = v23;
  *(_QWORD *)(a2 + 40) = v24;
  if (v12 < 0)
  {
    operator delete(v30[1]);
    if ((HIBYTE(v30[0]) & 0x80) == 0)
    {
LABEL_53:
      if ((SHIBYTE(v31.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_54;
      goto LABEL_69;
    }
  }
  else if ((v5 & 0x80) == 0)
  {
    goto LABEL_53;
  }
  operator delete(__p[0]);
  if ((SHIBYTE(v31.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_54:
    if ((SHIBYTE(v32.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_55;
    goto LABEL_70;
  }
LABEL_69:
  operator delete(v31.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v32.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_55:
    if ((SHIBYTE(v33.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_56;
    goto LABEL_71;
  }
LABEL_70:
  operator delete(v32.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v33.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_56:
    if ((SHIBYTE(v34.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_57;
    goto LABEL_72;
  }
LABEL_71:
  operator delete(v33.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v34.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_57:
    if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_73:
    operator delete(__str.__r_.__value_.__l.__data_);
    return;
  }
LABEL_72:
  operator delete(v34.__r_.__value_.__l.__data_);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_73;
}

void sub_23953534C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  uint64_t v39;

  sub_2395080CC((uint64_t)&a22);
  if (a33 < 0)
  {
    operator delete(__p);
    if ((a39 & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(v39 - 137) & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else if ((a39 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a34);
  if ((*(char *)(v39 - 137) & 0x80000000) == 0)
  {
LABEL_4:
    if ((*(char *)(v39 - 113) & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_10;
  }
LABEL_9:
  operator delete(*(void **)(v39 - 160));
  if ((*(char *)(v39 - 113) & 0x80000000) == 0)
  {
LABEL_5:
    if ((*(char *)(v39 - 89) & 0x80000000) == 0)
      goto LABEL_6;
    goto LABEL_11;
  }
LABEL_10:
  operator delete(*(void **)(v39 - 136));
  if ((*(char *)(v39 - 89) & 0x80000000) == 0)
LABEL_6:
    _Unwind_Resume(a1);
LABEL_11:
  operator delete(*(void **)(v39 - 112));
  _Unwind_Resume(a1);
}

BOOL sub_239535518(uint64_t a1)
{
  _OWORD *v2;
  int *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  unint64_t i;
  id v8;
  const char *v9;
  size_t v10;
  void *v11;
  void *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  unint64_t v18;
  uint8x8_t v19;
  char *v20;
  char *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  _QWORD *v26;
  void *v27;
  void **v28;
  void *v29;
  void **v31;
  int *v32;
  void *__p[2];
  unint64_t v34;
  void *v35[2];
  char v36;
  void *v37[2];
  void *v38[2];
  int v39;

  v2 = operator new(0xBCuLL);
  v2[8] = xmmword_239EC7084;
  v2[9] = unk_239EC7094;
  v2[10] = xmmword_239EC70A4;
  *(_OWORD *)((char *)v2 + 172) = *(__int128 *)((char *)&xmmword_239EC70A4 + 12);
  v2[4] = xmmword_239EC7044;
  v2[5] = unk_239EC7054;
  v2[6] = xmmword_239EC7064;
  v2[7] = unk_239EC7074;
  *v2 = xmmword_239EC7004;
  v2[1] = unk_239EC7014;
  v2[2] = xmmword_239EC7024;
  v2[3] = unk_239EC7034;
  v3 = (int *)operator new(0x28uLL);
  v4 = 0;
  *((_QWORD *)v3 + 4) = 0x900000008;
  *(_OWORD *)v3 = xmmword_239EC70C0;
  *((_OWORD *)v3 + 1) = unk_239EC70D0;
  *(_OWORD *)v37 = 0u;
  *(_OWORD *)v38 = 0u;
  v39 = 1065353216;
  v32 = v3;
  do
  {
    sub_2395346A8(*(_DWORD *)((char *)v2 + v4), __p);
    sub_2395138D4((uint64_t)v37, (uint64_t)__p, (uint64_t)__p);
    if (SHIBYTE(v34) < 0)
      operator delete(__p[0]);
    v4 += 4;
  }
  while (v4 != 188);
  sub_239534DF0(*v3, (uint64_t)__p);
  sub_239513CF4((uint64_t)v37, (uint64_t)__p, (uint64_t)__p);
  sub_239513CF4((uint64_t)v37, (uint64_t)v35, (uint64_t)v35);
  if (v36 < 0)
  {
    operator delete(v35[0]);
    if ((SHIBYTE(v34) & 0x80000000) == 0)
      goto LABEL_7;
  }
  else if ((SHIBYTE(v34) & 0x80000000) == 0)
  {
    goto LABEL_7;
  }
  operator delete(__p[0]);
LABEL_7:
  sub_239534DF0(v3[1], (uint64_t)__p);
  sub_239513CF4((uint64_t)v37, (uint64_t)__p, (uint64_t)__p);
  sub_239513CF4((uint64_t)v37, (uint64_t)v35, (uint64_t)v35);
  if (v36 < 0)
  {
    operator delete(v35[0]);
    if ((SHIBYTE(v34) & 0x80000000) == 0)
      goto LABEL_9;
  }
  else if ((SHIBYTE(v34) & 0x80000000) == 0)
  {
    goto LABEL_9;
  }
  operator delete(__p[0]);
LABEL_9:
  sub_239534DF0(v3[2], (uint64_t)__p);
  sub_239513CF4((uint64_t)v37, (uint64_t)__p, (uint64_t)__p);
  sub_239513CF4((uint64_t)v37, (uint64_t)v35, (uint64_t)v35);
  if (v36 < 0)
  {
    operator delete(v35[0]);
    if ((SHIBYTE(v34) & 0x80000000) == 0)
      goto LABEL_11;
  }
  else if ((SHIBYTE(v34) & 0x80000000) == 0)
  {
    goto LABEL_11;
  }
  operator delete(__p[0]);
LABEL_11:
  sub_239534DF0(v3[3], (uint64_t)__p);
  sub_239513CF4((uint64_t)v37, (uint64_t)__p, (uint64_t)__p);
  sub_239513CF4((uint64_t)v37, (uint64_t)v35, (uint64_t)v35);
  if (v36 < 0)
  {
    operator delete(v35[0]);
    if ((SHIBYTE(v34) & 0x80000000) == 0)
      goto LABEL_13;
  }
  else if ((SHIBYTE(v34) & 0x80000000) == 0)
  {
    goto LABEL_13;
  }
  operator delete(__p[0]);
LABEL_13:
  sub_239534DF0(v3[4], (uint64_t)__p);
  sub_239513CF4((uint64_t)v37, (uint64_t)__p, (uint64_t)__p);
  sub_239513CF4((uint64_t)v37, (uint64_t)v35, (uint64_t)v35);
  if (v36 < 0)
  {
    operator delete(v35[0]);
    if ((SHIBYTE(v34) & 0x80000000) == 0)
      goto LABEL_15;
  }
  else if ((SHIBYTE(v34) & 0x80000000) == 0)
  {
    goto LABEL_15;
  }
  operator delete(__p[0]);
LABEL_15:
  sub_239534DF0(v3[5], (uint64_t)__p);
  sub_239513CF4((uint64_t)v37, (uint64_t)__p, (uint64_t)__p);
  sub_239513CF4((uint64_t)v37, (uint64_t)v35, (uint64_t)v35);
  if (v36 < 0)
  {
    operator delete(v35[0]);
    if ((SHIBYTE(v34) & 0x80000000) == 0)
      goto LABEL_17;
  }
  else if ((SHIBYTE(v34) & 0x80000000) == 0)
  {
    goto LABEL_17;
  }
  operator delete(__p[0]);
LABEL_17:
  sub_239534DF0(v3[6], (uint64_t)__p);
  sub_239513CF4((uint64_t)v37, (uint64_t)__p, (uint64_t)__p);
  sub_239513CF4((uint64_t)v37, (uint64_t)v35, (uint64_t)v35);
  if (v36 < 0)
  {
    operator delete(v35[0]);
    if ((SHIBYTE(v34) & 0x80000000) == 0)
      goto LABEL_19;
  }
  else if ((SHIBYTE(v34) & 0x80000000) == 0)
  {
    goto LABEL_19;
  }
  operator delete(__p[0]);
LABEL_19:
  sub_239534DF0(v3[7], (uint64_t)__p);
  sub_239513CF4((uint64_t)v37, (uint64_t)__p, (uint64_t)__p);
  sub_239513CF4((uint64_t)v37, (uint64_t)v35, (uint64_t)v35);
  if (v36 < 0)
  {
    operator delete(v35[0]);
    if ((SHIBYTE(v34) & 0x80000000) == 0)
      goto LABEL_21;
  }
  else if ((SHIBYTE(v34) & 0x80000000) == 0)
  {
    goto LABEL_21;
  }
  operator delete(__p[0]);
LABEL_21:
  sub_239534DF0(v3[8], (uint64_t)__p);
  sub_239513CF4((uint64_t)v37, (uint64_t)__p, (uint64_t)__p);
  sub_239513CF4((uint64_t)v37, (uint64_t)v35, (uint64_t)v35);
  if (v36 < 0)
  {
    operator delete(v35[0]);
    if ((SHIBYTE(v34) & 0x80000000) == 0)
      goto LABEL_23;
  }
  else if ((SHIBYTE(v34) & 0x80000000) == 0)
  {
    goto LABEL_23;
  }
  operator delete(__p[0]);
LABEL_23:
  sub_239534DF0(v3[9], (uint64_t)__p);
  sub_239513CF4((uint64_t)v37, (uint64_t)__p, (uint64_t)__p);
  sub_239513CF4((uint64_t)v37, (uint64_t)v35, (uint64_t)v35);
  if (v36 < 0)
  {
    operator delete(v35[0]);
    if ((SHIBYTE(v34) & 0x80000000) == 0)
      goto LABEL_25;
LABEL_97:
    operator delete(__p[0]);
    goto LABEL_25;
  }
  if (SHIBYTE(v34) < 0)
    goto LABEL_97;
LABEL_25:
  sub_2397A9494(a1);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "functionNames");
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  for (i = 0; i < objc_msgSend(v6, "count"); ++i)
  {
    objc_msgSend(v6, "objectAtIndexedSubscript:", i);
    v8 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    v9 = (const char *)objc_msgSend(v8, "UTF8String");
    v10 = strlen(v9);
    if (v10 >= 0x7FFFFFFFFFFFFFF8)
      sub_23941A5AC();
    v11 = (void *)v10;
    if (v10 >= 0x17)
    {
      v14 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v10 | 7) != 0x17)
        v14 = v10 | 7;
      v15 = v14 + 1;
      v12 = operator new(v14 + 1);
      __p[1] = v11;
      v34 = v15 | 0x8000000000000000;
      __p[0] = v12;
    }
    else
    {
      HIBYTE(v34) = v10;
      v12 = __p;
      if (!v10)
      {
        v3 = v32;
        LOBYTE(__p[0]) = 0;
        v13 = (char *)sub_239514158(v37, (uint64_t)__p);
        if (!v13)
          goto LABEL_26;
        goto LABEL_38;
      }
    }
    memmove(v12, v9, (size_t)v11);
    v3 = v32;
    *((_BYTE *)v11 + (_QWORD)v12) = 0;
    v13 = (char *)sub_239514158(v37, (uint64_t)__p);
    if (!v13)
    {
LABEL_26:
      if ((SHIBYTE(v34) & 0x80000000) == 0)
        goto LABEL_27;
      goto LABEL_68;
    }
LABEL_38:
    v16 = v13;
    v17 = (unint64_t)v37[1];
    v18 = *((_QWORD *)v13 + 1);
    v19 = (uint8x8_t)vcnt_s8((int8x8_t)v37[1]);
    v19.i16[0] = vaddlv_u8(v19);
    if (v19.u32[0] > 1uLL)
    {
      if ((void *)v18 >= v37[1])
        v18 %= (unint64_t)v37[1];
    }
    else
    {
      v18 &= (unint64_t)v37[1] - 1;
    }
    v20 = (char *)*((_QWORD *)v37[0] + v18);
    do
    {
      v21 = v20;
      v20 = *(char **)v20;
    }
    while (v20 != v13);
    if (v21 == (char *)v38)
      goto LABEL_55;
    v22 = *((_QWORD *)v21 + 1);
    if (v19.u32[0] > 1uLL)
    {
      if ((void *)v22 >= v37[1])
        v22 %= (unint64_t)v37[1];
    }
    else
    {
      v22 &= (unint64_t)v37[1] - 1;
    }
    if (v22 != v18)
    {
LABEL_55:
      if (!*(_QWORD *)v13)
        goto LABEL_56;
      v23 = *(_QWORD *)(*(_QWORD *)v13 + 8);
      if (v19.u32[0] > 1uLL)
      {
        if ((void *)v23 >= v37[1])
          v23 %= (unint64_t)v37[1];
      }
      else
      {
        v23 &= (unint64_t)v37[1] - 1;
      }
      if (v23 != v18)
LABEL_56:
        *((_QWORD *)v37[0] + v18) = 0;
    }
    v24 = *(_QWORD *)v13;
    if (*(_QWORD *)v13)
    {
      v25 = *(_QWORD *)(v24 + 8);
      if (v19.u32[0] > 1uLL)
      {
        if (v25 >= v17)
          v25 %= v17;
      }
      else
      {
        v25 &= v17 - 1;
      }
      if (v25 != v18)
      {
        *((_QWORD *)v37[0] + v25) = v21;
        v24 = *(_QWORD *)v13;
      }
    }
    *(_QWORD *)v21 = v24;
    *(_QWORD *)v13 = 0;
    --v38[1];
    if (v13[39] < 0)
    {
      operator delete(*((void **)v13 + 2));
      operator delete(v16);
      if ((SHIBYTE(v34) & 0x80000000) == 0)
        goto LABEL_27;
    }
    else
    {
      operator delete(v13);
      if ((SHIBYTE(v34) & 0x80000000) == 0)
        goto LABEL_27;
    }
LABEL_68:
    operator delete(__p[0]);
LABEL_27:

  }
  v26 = v38[0];
  if (v38[0])
  {
    do
      v26 = (_QWORD *)*v26;
    while (v26);
  }
  v27 = v38[1];

  v28 = (void **)v38[0];
  if (v38[0])
  {
    do
    {
      v31 = (void **)*v28;
      if (*((char *)v28 + 39) < 0)
        operator delete(v28[2]);
      operator delete(v28);
      v28 = v31;
    }
    while (v31);
  }
  v29 = v37[0];
  v37[0] = 0;
  if (v29)
    operator delete(v29);
  operator delete(v3);
  operator delete(v2);
  return v27 == 0;
}

void sub_239535C90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
  void *v20;
  void *v21;
  void *v22;

  sub_23942823C((uint64_t)&a20);
  operator delete(v22);
  operator delete(v20);
  _Unwind_Resume(a1);
}

uint64_t sub_239535D3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v6;
  void *v7;
  _OWORD *v8;
  id v9;
  uint64_t v10;
  void *v11;
  void *v12;
  void **v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  _QWORD *v18;
  __int128 v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  unint64_t v28;
  void **v29;
  void *v30;
  void **v31;
  void *v32;
  void *v33;
  void *v34;
  id v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  id v46;
  _QWORD *v47;
  __int128 v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  _DWORD *v59;
  void *v61;
  __int128 v62;
  id v63;
  void *__p[2];
  char v65;
  void *v66;
  char v67;
  int v68;
  id v69;
  int v70[4];

  v6 = sub_2397A9EBC((_QWORD *)a1, a2, a3) + 4;
  sub_23946D5E0(v6, a4);
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_DWORD *)(a1 + 80) = 1065353216;
  *(_OWORD *)(a1 + 88) = 0u;
  v58 = a1 + 88;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 120) = 1065353216;
  sub_2397A9494((uint64_t)v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v56 = a1;
  v8 = operator new(0xBCuLL);
  v9 = 0;
  v10 = 0;
  v8[8] = xmmword_239EC7084;
  v8[9] = unk_239EC7094;
  v8[10] = xmmword_239EC70A4;
  *(_OWORD *)((char *)v8 + 172) = *(__int128 *)((char *)&xmmword_239EC70A4 + 12);
  v8[4] = xmmword_239EC7044;
  v8[5] = unk_239EC7054;
  v8[6] = xmmword_239EC7064;
  v8[7] = unk_239EC7074;
  *v8 = xmmword_239EC7004;
  v8[1] = unk_239EC7014;
  v8[2] = xmmword_239EC7024;
  v8[3] = unk_239EC7034;
  v59 = v8;
  v61 = v7;
  do
  {
    v11 = v9;
    v70[0] = v59[v10];
    v12 = (void *)MEMORY[0x24BDD17C8];
    sub_2395346A8(v70[0], __p);
    if (v65 >= 0)
      v13 = __p;
    else
      v13 = (void **)__p[0];
    objc_msgSend(v12, "stringWithUTF8String:", v13);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    if (v65 < 0)
      operator delete(__p[0]);
    v15 = (void *)objc_msgSend(v7, "newFunctionWithName:", v14);
    sub_2397A9494(a2);
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    v69 = v9;
    v17 = (void *)objc_msgSend(v16, "newComputePipelineStateWithFunction:error:", v15, &v69);
    v9 = v69;

    sub_2397A9468((std::__shared_weak_count_vtbl **)__p, v17);
    *(_QWORD *)&v62 = v70;
    v18 = sub_239536D10(a1 + 48, v70, (uint64_t)&unk_239EC6E98, (_DWORD **)&v62);
    v19 = *(_OWORD *)__p;
    __p[0] = 0;
    __p[1] = 0;
    v20 = (std::__shared_weak_count *)v18[4];
    *(_OWORD *)(v18 + 3) = v19;
    if (!v20)
      goto LABEL_12;
    p_shared_owners = (unint64_t *)&v20->__shared_owners_;
    do
      v22 = __ldaxr(p_shared_owners);
    while (__stlxr(v22 - 1, p_shared_owners));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
      v23 = (std::__shared_weak_count *)__p[1];
      if (!__p[1])
        goto LABEL_2;
    }
    else
    {
LABEL_12:
      v23 = (std::__shared_weak_count *)__p[1];
      if (!__p[1])
        goto LABEL_2;
    }
    v24 = (unint64_t *)&v23->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
LABEL_2:

    ++v10;
    v7 = v61;
  }
  while (v10 != 47);
  v26 = operator new(0x28uLL);
  v27 = 0;
  v26[4] = 0x900000008;
  *(_OWORD *)v26 = xmmword_239EC70C0;
  *((_OWORD *)v26 + 1) = unk_239EC70D0;
  v57 = v26;
  v28 = 0x24BDD1000;
  while (1)
  {
LABEL_22:
    v68 = *((_DWORD *)v26 + v27);
    sub_239534DF0(v68, (uint64_t)__p);
    v29 = v65 >= 0 ? __p : (void **)__p[0];
    objc_msgSend(*(id *)(v28 + 1992), "stringWithUTF8String:", v29);
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    v31 = v67 >= 0 ? &v66 : (void **)v66;
    objc_msgSend(*(id *)(v28 + 1992), "stringWithUTF8String:", v31);
    v32 = (void *)objc_claimAutoreleasedReturnValue();
    v33 = (void *)objc_msgSend(v7, "newFunctionWithName:", v30);
    v34 = (void *)objc_msgSend(v7, "newFunctionWithName:", v32);
    v35 = objc_alloc_init(MEMORY[0x24BDDD6B8]);
    objc_msgSend(v35, "setVertexFunction:", v33);
    objc_msgSend(v35, "setFragmentFunction:", v34);
    switch(v68)
    {
      case 0:
      case 1:
        objc_msgSend(v35, "colorAttachments");
        v36 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v36, "objectAtIndexedSubscript:", 0);
        v37 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v37, "setPixelFormat:", 53);

        objc_msgSend(v35, "colorAttachments");
        v38 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v38, "objectAtIndexedSubscript:", 1);
        v39 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v39, "setPixelFormat:", 55);

        objc_msgSend(v35, "setDepthAttachmentPixelFormat:", 252);
        goto LABEL_35;
      case 3:
      case 5:
        objc_msgSend(v35, "colorAttachments");
        v40 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v40, "objectAtIndexedSubscript:", 0);
        v41 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v41, "setPixelFormat:", 73);
        goto LABEL_34;
      case 4:
      case 7:
      case 9:
        objc_msgSend(v35, "colorAttachments");
        v40 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v40, "objectAtIndexedSubscript:", 0);
        v41 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v41, "setPixelFormat:", 13);
        goto LABEL_34;
      case 6:
        objc_msgSend(v35, "colorAttachments");
        v42 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v42, "objectAtIndexedSubscript:", 0);
        v43 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v43, "setPixelFormat:", 53);

        objc_msgSend(v35, "colorAttachments");
        v40 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v40, "objectAtIndexedSubscript:", 1);
        v41 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v41, "setPixelFormat:", 13);
        goto LABEL_34;
      case 8:
        objc_msgSend(v35, "colorAttachments");
        v40 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v40, "objectAtIndexedSubscript:", 0);
        v41 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v41, "setPixelFormat:", 70);
LABEL_34:

        break;
      default:
        goto LABEL_35;
    }
    sub_2397A9494(a2);
    v44 = (void *)objc_claimAutoreleasedReturnValue();
    v63 = v9;
    v45 = (void *)objc_msgSend(v44, "newRenderPipelineStateWithDescriptor:error:", v35, &v63);
    v46 = v63;

    sub_2397A9468((std::__shared_weak_count_vtbl **)&v62, v45);
    *(_QWORD *)v70 = &v68;
    v47 = sub_239537040(v58, &v68, (uint64_t)&unk_239EC6E98, (_DWORD **)v70);
    v48 = v62;
    v62 = 0uLL;
    v49 = (std::__shared_weak_count *)v47[4];
    *(_OWORD *)(v47 + 3) = v48;
    if (!v49)
      goto LABEL_39;
LABEL_35:
    v50 = (unint64_t *)&v49->__shared_owners_;
    do
      v51 = __ldaxr(v50);
    while (__stlxr(v51 - 1, v50));
    if (!v51)
    {
      ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
      std::__shared_weak_count::__release_weak(v49);
      v52 = (std::__shared_weak_count *)*((_QWORD *)&v62 + 1);
      if (!*((_QWORD *)&v62 + 1))
        goto LABEL_45;
    }
    else
    {
LABEL_39:
      v52 = (std::__shared_weak_count *)*((_QWORD *)&v62 + 1);
      if (!*((_QWORD *)&v62 + 1))
        goto LABEL_45;
    }
    v53 = (unint64_t *)&v52->__shared_owners_;
    do
      v54 = __ldaxr(v53);
    while (__stlxr(v54 - 1, v53));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
    }
LABEL_45:

    if ((v67 & 0x80000000) == 0)
      break;
    operator delete(v66);
    v7 = v61;
    v26 = v57;
    v28 = 0x24BDD1000uLL;
    if (v65 < 0)
      goto LABEL_47;
LABEL_21:
    ++v27;
    v9 = v46;
    if (v27 == 10)
      goto LABEL_48;
  }
  v7 = v61;
  v26 = v57;
  v28 = 0x24BDD1000;
  if ((v65 & 0x80000000) == 0)
    goto LABEL_21;
LABEL_47:
  operator delete(__p[0]);
  ++v27;
  v9 = v46;
  if (v27 != 10)
    goto LABEL_22;
LABEL_48:
  operator delete(v26);
  operator delete(v59);

  return v56;
}

void sub_239536408(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  void *v28;
  void *v29;

  operator delete(__p);

  sub_23946314C(a14);
  sub_23946314C(a15);
  sub_239416DA0(a10);
  sub_239420490(a11);
  _Unwind_Resume(a1);
}

uint64_t *sub_239536660(uint64_t a1, int a2)
{
  unint64_t v2;
  uint8x8_t v3;
  unint64_t v4;
  uint64_t **v5;
  uint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;

  v2 = *(_QWORD *)(a1 + 56);
  if (!v2)
    goto LABEL_22;
  v3 = (uint8x8_t)vcnt_s8((int8x8_t)v2);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    v4 = a2;
    if (v2 <= a2)
      v4 = a2 % v2;
  }
  else
  {
    v4 = (v2 - 1) & a2;
  }
  v5 = *(uint64_t ***)(*(_QWORD *)(a1 + 48) + 8 * v4);
  if (!v5 || (v6 = *v5) == 0)
LABEL_22:
    sub_239EC04E8();
  if (v3.u32[0] < 2uLL)
  {
    v7 = v2 - 1;
    while (1)
    {
      v9 = v6[1];
      if (v9 == a2)
      {
        if (*((_DWORD *)v6 + 4) == a2)
          return v6 + 3;
      }
      else if ((v9 & v7) != v4)
      {
        goto LABEL_22;
      }
      v6 = (uint64_t *)*v6;
      if (!v6)
        goto LABEL_22;
    }
  }
  while (1)
  {
    v8 = v6[1];
    if (v8 == a2)
      break;
    if (v8 >= v2)
      v8 %= v2;
    if (v8 != v4)
      goto LABEL_22;
LABEL_11:
    v6 = (uint64_t *)*v6;
    if (!v6)
      goto LABEL_22;
  }
  if (*((_DWORD *)v6 + 4) != a2)
    goto LABEL_11;
  return v6 + 3;
}

uint64_t *sub_23953674C(uint64_t a1, int a2)
{
  unint64_t v2;
  uint8x8_t v3;
  unint64_t v4;
  uint64_t **v5;
  uint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;

  v2 = *(_QWORD *)(a1 + 96);
  if (!v2)
    goto LABEL_22;
  v3 = (uint8x8_t)vcnt_s8((int8x8_t)v2);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    v4 = a2;
    if (v2 <= a2)
      v4 = a2 % v2;
  }
  else
  {
    v4 = (v2 - 1) & a2;
  }
  v5 = *(uint64_t ***)(*(_QWORD *)(a1 + 88) + 8 * v4);
  if (!v5 || (v6 = *v5) == 0)
LABEL_22:
    sub_239EC0518();
  if (v3.u32[0] < 2uLL)
  {
    v7 = v2 - 1;
    while (1)
    {
      v9 = v6[1];
      if (v9 == a2)
      {
        if (*((_DWORD *)v6 + 4) == a2)
          return v6 + 3;
      }
      else if ((v9 & v7) != v4)
      {
        goto LABEL_22;
      }
      v6 = (uint64_t *)*v6;
      if (!v6)
        goto LABEL_22;
    }
  }
  while (1)
  {
    v8 = v6[1];
    if (v8 == a2)
      break;
    if (v8 >= v2)
      v8 %= v2;
    if (v8 != v4)
      goto LABEL_22;
LABEL_11:
    v6 = (uint64_t *)*v6;
    if (!v6)
      goto LABEL_22;
  }
  if (*((_DWORD *)v6 + 4) != a2)
    goto LABEL_11;
  return v6 + 3;
}

void sub_239536838(uint64_t a1@<X0>, unint64_t **a2@<X1>, _QWORD *a3@<X8>)
{
  char *v6;
  char *v7;
  unint64_t *v8;
  unint64_t v9;
  char *v10;
  unint64_t *v11;
  __int128 v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  _QWORD *v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  char *v29;
  void *v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  void *__p[2];
  uint64_t v35;
  std::__shared_weak_count_vtbl *v36;
  std::__shared_weak_count *v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  void *v40;
  char *v41;

  sub_2397A98A4(&v40);
  v6 = (char *)v40;
  v7 = v41;
  if (v41 == v40)
  {
LABEL_18:
    *a3 = 0;
    a3[1] = 0;
    if (v7)
      goto LABEL_45;
    return;
  }
  v8 = *a2;
  v9 = **a2;
  if (v9 >= (v41 - (_BYTE *)v40) >> 4)
  {
    *a3 = 0;
    a3[1] = 0;
    v7 = v6;
    if (v6)
      goto LABEL_45;
    return;
  }
  v10 = (char *)v40 + 16 * v9;
  v11 = a2[1];
  while (v8 != v11)
  {
    v7 = (char *)v40;
    if (*v8 >= (v41 - (_BYTE *)v40) >> 4)
      goto LABEL_18;
    sub_23946D5E0(__p, (uint64_t)v40 + 16 * *v8);
    v12 = *(_OWORD *)__p;
    __p[0] = 0;
    __p[1] = 0;
    v13 = (std::__shared_weak_count *)*((_QWORD *)v10 + 1);
    *(_OWORD *)v10 = v12;
    if (!v13)
      goto LABEL_11;
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
      v16 = (std::__shared_weak_count *)__p[1];
      if (!__p[1])
        goto LABEL_4;
    }
    else
    {
LABEL_11:
      v16 = (std::__shared_weak_count *)__p[1];
      if (!__p[1])
        goto LABEL_4;
    }
    v17 = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
LABEL_4:
    ++v8;
  }
  v38 = 0;
  v39 = 0;
  if (*(char *)(a1 + 23) < 0)
  {
    sub_23941A7F8(__p, *(void **)a1, *(_QWORD *)(a1 + 8));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)a1;
    v35 = *(_QWORD *)(a1 + 16);
  }
  sub_2397A9AC8((uint64_t)v10, (uint64_t *)__p, (uint64_t)&v38, &v36);
  if (SHIBYTE(v35) < 0)
    operator delete(__p[0]);
  sub_2397A9494((uint64_t)&v38);

  if (sub_239535518((uint64_t)&v36))
  {
    sub_2397A9CD8((uint64_t)v10, (std::__shared_weak_count_vtbl **)__p);
    v19 = operator new(0x98uLL);
    sub_239537370(v19, (uint64_t)v10, (uint64_t)__p, (uint64_t)&v36);
    *a3 = v19 + 3;
    a3[1] = v19;
    v20 = (std::__shared_weak_count *)__p[1];
    if (__p[1])
    {
      v21 = (unint64_t *)((char *)__p[1] + 8);
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
  }
  v23 = v37;
  if (v37)
  {
    v24 = (unint64_t *)&v37->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  v26 = v39;
  if (v39)
  {
    v27 = (unint64_t *)&v39->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  v7 = (char *)v40;
  if (v40)
  {
LABEL_45:
    v29 = v41;
    v30 = v7;
    if (v41 != v7)
    {
      do
      {
        v31 = (std::__shared_weak_count *)*((_QWORD *)v29 - 1);
        if (v31)
        {
          v32 = (unint64_t *)&v31->__shared_owners_;
          do
            v33 = __ldaxr(v32);
          while (__stlxr(v33 - 1, v32));
          if (!v33)
          {
            ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
            std::__shared_weak_count::__release_weak(v31);
          }
        }
        v29 -= 16;
      }
      while (v29 != v7);
      v30 = v40;
    }
    v41 = v7;
    operator delete(v30);
  }
}

void sub_239536B3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, char a17, uint64_t a18, void *a19)
{
  sub_239416DA0((uint64_t)&a17);
  sub_2394631DC(&a19);
  _Unwind_Resume(a1);
}

void sub_239536BA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  sub_2394631DC((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_239536BB8(uint64_t a1, char *__s, const char *a3)
{
  size_t v6;
  size_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  size_t v12;
  size_t v13;
  uint64_t v14;
  uint64_t v15;

  v6 = strlen(__s);
  if (v6 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v7 = v6;
  if (v6 >= 0x17)
  {
    v9 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17)
      v9 = v6 | 7;
    v10 = v9 + 1;
    v8 = operator new(v9 + 1);
    *(_QWORD *)(a1 + 8) = v7;
    *(_QWORD *)(a1 + 16) = v10 | 0x8000000000000000;
    *(_QWORD *)a1 = v8;
    goto LABEL_8;
  }
  *(_BYTE *)(a1 + 23) = v6;
  v8 = (void *)a1;
  if (v6)
LABEL_8:
    memmove(v8, __s, v7);
  *((_BYTE *)v8 + v7) = 0;
  v11 = (void *)(a1 + 24);
  v12 = strlen(a3);
  if (v12 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v13 = v12;
  if (v12 >= 0x17)
  {
    v14 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v12 | 7) != 0x17)
      v14 = v12 | 7;
    v15 = v14 + 1;
    v11 = operator new(v14 + 1);
    *(_QWORD *)(a1 + 32) = v13;
    *(_QWORD *)(a1 + 40) = v15 | 0x8000000000000000;
    *(_QWORD *)(a1 + 24) = v11;
  }
  else
  {
    *(_BYTE *)(a1 + 47) = v12;
    if (!v12)
      goto LABEL_17;
  }
  memmove(v11, a3, v13);
LABEL_17:
  *((_BYTE *)v11 + v13) = 0;
  return a1;
}

void sub_239536CF4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_239536D10(uint64_t a1, int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  void **v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  float v15;
  float v16;
  uint64_t v17;
  _QWORD *v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t prime;
  unint64_t v23;
  uint8x8_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v8 <= v7)
        v4 = v7 % v8;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
    v10 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      v11 = *v10;
      if (*v10)
      {
        if (v9.u32[0] < 2uLL)
        {
          while (1)
          {
            v13 = v11[1];
            if (v13 == v7)
            {
              if (*((_DWORD *)v11 + 4) == (_DWORD)v7)
                return v11;
            }
            else if ((v13 & (v8 - 1)) != v4)
            {
              goto LABEL_23;
            }
            v11 = (_QWORD *)*v11;
            if (!v11)
              goto LABEL_23;
          }
        }
        do
        {
          v12 = v11[1];
          if (v12 == v7)
          {
            if (*((_DWORD *)v11 + 4) == (_DWORD)v7)
              return v11;
          }
          else
          {
            if (v12 >= v8)
              v12 %= v8;
            if (v12 != v4)
              break;
          }
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
    }
  }
LABEL_23:
  v14 = (_QWORD *)(a1 + 16);
  v11 = operator new(0x28uLL);
  *v11 = 0;
  v11[1] = v7;
  *((_DWORD *)v11 + 4) = **a4;
  v11[3] = 0;
  v11[4] = 0;
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (v8 && (float)(v16 * (float)v8) >= v15)
  {
    v17 = *(_QWORD *)a1;
    v18 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v18)
    {
LABEL_26:
      *v11 = *v18;
LABEL_61:
      *v18 = v11;
      goto LABEL_62;
    }
  }
  else
  {
    v19 = 1;
    if (v8 >= 3)
      v19 = (v8 & (v8 - 1)) != 0;
    v20 = v19 | (2 * v8);
    v21 = vcvtps_u32_f32(v15 / v16);
    if (v20 <= v21)
      prime = v21;
    else
      prime = v20;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v8 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v8)
      goto LABEL_37;
    if (prime < v8)
    {
      v23 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v8 < 3 || (v24 = (uint8x8_t)vcnt_s8((int8x8_t)v8), v24.i16[0] = vaddlv_u8(v24), v24.u32[0] > 1uLL))
      {
        v23 = std::__next_prime(v23);
      }
      else
      {
        v25 = 1 << -(char)__clz(v23 - 1);
        if (v23 >= 2)
          v23 = v25;
      }
      if (prime <= v23)
        prime = v23;
      if (prime < v8)
LABEL_37:
        sub_239427FE0(a1, prime);
    }
    v8 = *(_QWORD *)(a1 + 8);
    v26 = v8 - 1;
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7)
      {
        v4 = v7 % v8;
        v17 = *(_QWORD *)a1;
        v18 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v7 % v8));
        if (v18)
          goto LABEL_26;
      }
      else
      {
        v4 = v7;
        v17 = *(_QWORD *)a1;
        v18 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v7);
        if (v18)
          goto LABEL_26;
      }
    }
    else
    {
      v4 = v26 & v7;
      v17 = *(_QWORD *)a1;
      v18 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v26 & v7));
      if (v18)
        goto LABEL_26;
    }
  }
  *v11 = *v14;
  *v14 = v11;
  *(_QWORD *)(v17 + 8 * v4) = v14;
  if (*v11)
  {
    v27 = *(_QWORD *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v27 >= v8)
        v27 %= v8;
    }
    else
    {
      v27 &= v8 - 1;
    }
    v18 = (_QWORD *)(*(_QWORD *)a1 + 8 * v27);
    goto LABEL_61;
  }
LABEL_62:
  ++*(_QWORD *)(a1 + 24);
  return v11;
}

void sub_23953702C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_23946B318((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_239537040(uint64_t a1, int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  void **v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  float v15;
  float v16;
  uint64_t v17;
  _QWORD *v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t prime;
  unint64_t v23;
  uint8x8_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v8 <= v7)
        v4 = v7 % v8;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
    v10 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      v11 = *v10;
      if (*v10)
      {
        if (v9.u32[0] < 2uLL)
        {
          while (1)
          {
            v13 = v11[1];
            if (v13 == v7)
            {
              if (*((_DWORD *)v11 + 4) == (_DWORD)v7)
                return v11;
            }
            else if ((v13 & (v8 - 1)) != v4)
            {
              goto LABEL_23;
            }
            v11 = (_QWORD *)*v11;
            if (!v11)
              goto LABEL_23;
          }
        }
        do
        {
          v12 = v11[1];
          if (v12 == v7)
          {
            if (*((_DWORD *)v11 + 4) == (_DWORD)v7)
              return v11;
          }
          else
          {
            if (v12 >= v8)
              v12 %= v8;
            if (v12 != v4)
              break;
          }
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
    }
  }
LABEL_23:
  v14 = (_QWORD *)(a1 + 16);
  v11 = operator new(0x28uLL);
  *v11 = 0;
  v11[1] = v7;
  *((_DWORD *)v11 + 4) = **a4;
  v11[3] = 0;
  v11[4] = 0;
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (v8 && (float)(v16 * (float)v8) >= v15)
  {
    v17 = *(_QWORD *)a1;
    v18 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v18)
    {
LABEL_26:
      *v11 = *v18;
LABEL_61:
      *v18 = v11;
      goto LABEL_62;
    }
  }
  else
  {
    v19 = 1;
    if (v8 >= 3)
      v19 = (v8 & (v8 - 1)) != 0;
    v20 = v19 | (2 * v8);
    v21 = vcvtps_u32_f32(v15 / v16);
    if (v20 <= v21)
      prime = v21;
    else
      prime = v20;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v8 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v8)
      goto LABEL_37;
    if (prime < v8)
    {
      v23 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v8 < 3 || (v24 = (uint8x8_t)vcnt_s8((int8x8_t)v8), v24.i16[0] = vaddlv_u8(v24), v24.u32[0] > 1uLL))
      {
        v23 = std::__next_prime(v23);
      }
      else
      {
        v25 = 1 << -(char)__clz(v23 - 1);
        if (v23 >= 2)
          v23 = v25;
      }
      if (prime <= v23)
        prime = v23;
      if (prime < v8)
LABEL_37:
        sub_239427FE0(a1, prime);
    }
    v8 = *(_QWORD *)(a1 + 8);
    v26 = v8 - 1;
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7)
      {
        v4 = v7 % v8;
        v17 = *(_QWORD *)a1;
        v18 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v7 % v8));
        if (v18)
          goto LABEL_26;
      }
      else
      {
        v4 = v7;
        v17 = *(_QWORD *)a1;
        v18 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v7);
        if (v18)
          goto LABEL_26;
      }
    }
    else
    {
      v4 = v26 & v7;
      v17 = *(_QWORD *)a1;
      v18 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v26 & v7));
      if (v18)
        goto LABEL_26;
    }
  }
  *v11 = *v14;
  *v14 = v11;
  *(_QWORD *)(v17 + 8 * v4) = v14;
  if (*v11)
  {
    v27 = *(_QWORD *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v27 >= v8)
        v27 %= v8;
    }
    else
    {
      v27 &= v8 - 1;
    }
    v18 = (_QWORD *)(*(_QWORD *)a1 + 8 * v27);
    goto LABEL_61;
  }
LABEL_62:
  ++*(_QWORD *)(a1 + 24);
  return v11;
}

void sub_23953735C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_23946B318((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_239537370(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v11;
  std::__shared_weak_count *v12;

  a1[1] = 0;
  a1[2] = 0;
  *a1 = &off_250ADD8E8;
  sub_23946D5E0(&v11, a3);
  sub_239535D3C((uint64_t)(a1 + 3), a2, (uint64_t)&v11, a4);
  v7 = v12;
  if (!v12)
    return a1;
  p_shared_owners = (unint64_t *)&v12->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
    return a1;
  ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
  std::__shared_weak_count::__release_weak(v7);
  return a1;
}

void sub_239537428(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v13;

  if (a10)
  {
    p_shared_owners = (unint64_t *)&a10->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
      std::__shared_weak_count::__release_weak(a10);
      std::__shared_weak_count::~__shared_weak_count(v10);
      _Unwind_Resume(a1);
    }
  }
  std::__shared_weak_count::~__shared_weak_count(v10);
  _Unwind_Resume(a1);
}

void sub_239537488(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_250ADD8E8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_239537498(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_250ADD8E8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x23B83E31CLL);
}

_QWORD *sub_2395374C8(uint64_t a1)
{
  return sub_239506B74((_QWORD *)(a1 + 24));
}

void sub_2395374D4(uint64_t a1, __int32 *a2, __int32 *a3, int8x8_t *a4, _QWORD *a5)
{
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t i;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  __int32 v17;
  __int32 v18;
  BOOL v19;
  int32x2_t v20;
  int32x2_t v21;
  int8x8_t v22;
  unsigned int v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  unsigned int *v27;

  if (a5[3])
  {
    v10 = (_QWORD *)a5[2];
    if (v10)
    {
      do
      {
        v11 = (_QWORD *)*v10;
        operator delete(v10);
        v10 = v11;
      }
      while (v11);
    }
    a5[2] = 0;
    v12 = a5[1];
    if (v12)
    {
      for (i = 0; i != v12; ++i)
        *(_QWORD *)(*a5 + 8 * i) = 0;
    }
    a5[3] = 0;
  }
  *a3 = 0;
  *a2 = 0;
  *a4 = 0;
  v24 = 0;
  v25 = 0;
  v26 = 0;
  sub_2394B5624(a1, (uint64_t)&v24, 1);
  v14 = v24;
  v15 = v25;
  if (v24 != v25)
  {
    do
    {
      v16 = *v14;
      v22 = (int8x8_t)sub_239470FCC(a1, *v14)[25];
      v23 = v16;
      v27 = &v23;
      sub_239540E28((uint64_t)a5, &v23, (uint64_t)&unk_239EC6E98, &v27)[3] = (uint64_t)v22;
      v17 = v22.i32[0];
      v18 = v22.i32[1];
      if (v22.i32[0])
        v19 = v22.i32[1] == 0;
      else
        v19 = 1;
      if (!v19)
      {
        if (*a2 > v22.i32[0])
          v17 = *a2;
        *a2 = v17;
        if (*a3 > v22.i32[1])
          v18 = *a3;
        *a3 = v18;
        v20.i32[0] = (__int32)*a4;
        v20.i32[1] = v22.i32[1];
        v21 = vmul_s32(v20, (int32x2_t)vext_s8(*a4, v22, 4uLL));
        if ((vcgt_u32((uint32x2_t)vdup_lane_s32(v21, 1), (uint32x2_t)v21).u32[0] & 1) != 0)
          *a4 = v22;
      }
      ++v14;
    }
    while (v14 != v15);
    v14 = v24;
  }
  if (v14)
  {
    v25 = v14;
    operator delete(v14);
  }
}

void sub_239537670(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_239537694(uint64_t a1, void *a2, void *a3, void *a4, void *a5)
{
  id v9;
  id v10;
  id v11;
  id v12;
  uint64_t v13;
  const void *v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  size_t v18;
  void *v19;
  void *v20;
  id v21;
  id v22;
  void *v23;
  void *__src;
  void *v25;
  uint64_t v26;

  v9 = a2;
  v10 = a3;
  v11 = a4;
  v12 = a5;
  v14 = *(const void **)a1;
  v13 = *(_QWORD *)(a1 + 8);
  v16 = *(_QWORD *)(a1 + 24);
  v15 = *(_QWORD *)(a1 + 32);
  v17 = objc_retainAutorelease(v9);
  memcpy((void *)objc_msgSend(v17, "contents"), *(const void **)a1, ((_DWORD)v13 - (_DWORD)v14) & 0xFFFFFFFC);
  nullsub_4(v17);
  v18 = 4 * ((v15 - v16) >> 2);
  if (*(_BYTE *)(a1 + 136)
    && *(_QWORD *)(a1 + 120) - *(_QWORD *)(a1 + 112) == *(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24))
  {
    v19 = (void *)objc_msgSend(objc_retainAutorelease(v11), "contents");
    if (!*(_BYTE *)(a1 + 136))
      sub_2394875CC();
    memcpy(v19, *(const void **)(a1 + 112), 4 * ((v15 - v16) >> 2));
  }
  else
  {
    __src = 0;
    v25 = 0;
    v26 = 0;
    sub_2396C35F8((_QWORD *)a1, (uint64_t)&__src);
    v20 = (void *)objc_msgSend(objc_retainAutorelease(v11), "contents");
    memcpy(v20, __src, 4 * ((v15 - v16) >> 2));
    if (__src)
    {
      v25 = __src;
      operator delete(__src);
    }
  }
  nullsub_4(v11);
  v21 = objc_retainAutorelease(v10);
  memcpy((void *)objc_msgSend(v21, "contents"), *(const void **)(a1 + 24), v18);
  nullsub_4(v21);
  __src = 0;
  v25 = 0;
  v26 = 0;
  sub_2396C277C((_QWORD *)a1, (uint64_t)&__src, 1, 0, 0);
  v22 = objc_retainAutorelease(v12);
  v23 = (void *)objc_msgSend(v22, "contents");
  memcpy(v23, __src, v18);
  nullsub_4(v22);
  if (__src)
  {
    v25 = __src;
    operator delete(__src);
  }

}

void sub_23953788C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  void *v11;
  void *v12;
  void *v13;
  void *v14;

  if (__p)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_2395378E0(uint64_t *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _DWORD *v14;
  _DWORD *v15;
  int v16;
  unsigned int *v17;
  _DWORD *v18;
  _DWORD *v19;
  _DWORD *v20;
  id v21;

  v5 = a2;
  v6 = a3;
  v21 = objc_retainAutorelease(v5);
  v7 = objc_msgSend(v21, "contents");
  v8 = objc_retainAutorelease(v6);
  v9 = objc_msgSend(v8, "contents");
  v10 = a1[3];
  v11 = (a1[4] - v10) / 12;
  if (a1[4] != v10)
  {
    v12 = 0;
    v13 = *a1;
    v14 = (_DWORD *)(v7 + 16);
    v15 = (_DWORD *)(v9 + 8);
    v16 = 1;
    do
    {
      v17 = (unsigned int *)(v10 + 12 * v12);
      v18 = (_DWORD *)(v13 + 12 * *v17);
      *(v15 - 2) = v16 - 1;
      *(v14 - 4) = *v18;
      *(v14 - 3) = v18[1];
      *(v14 - 2) = v18[2];
      v19 = (_DWORD *)(v13 + 12 * v17[1]);
      *(v15 - 1) = v16;
      *(v14 - 1) = *v19;
      *v14 = v19[1];
      v14[1] = v19[2];
      v20 = (_DWORD *)(v13 + 12 * v17[2]);
      *v15 = v16 + 1;
      v15 += 3;
      v14[2] = *v20;
      v14[3] = v20[1];
      ++v12;
      v14[4] = v20[2];
      v16 += 3;
      v14 += 9;
    }
    while (v11 != v12);
  }
  nullsub_4(v21);
  nullsub_4(v8);

}

void sub_239537A40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_239537A58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_239537A70(uint64_t a1, void *a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8, char a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14)
{
  id v20;
  id v21;
  id v22;
  id v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  uint64_t *v30;
  void *v31;
  void *v32;
  uint64_t *v33;
  id v35;
  id v36;
  id v37;
  id v38;
  id v39;

  v39 = a2;
  v35 = a3;
  v37 = a4;
  v38 = a5;
  v36 = a6;
  v20 = a7;
  v21 = a8;
  v22 = a13;
  v23 = a14;
  v24 = (void *)objc_opt_new();
  objc_msgSend(v24, "colorAttachments");
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v25, "objectAtIndexedSubscript:", 0);
  v26 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v26, "setTexture:", v22);
  objc_msgSend(v26, "setLoadAction:", 2);
  objc_msgSend(v26, "setStoreAction:", 1);
  objc_msgSend(v26, "setClearColor:", 0.0, 0.0, 0.0, 0.0);

  objc_msgSend(v24, "colorAttachments");
  v27 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v27, "objectAtIndexedSubscript:", 1);
  v28 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v28, "setTexture:", v23);
  objc_msgSend(v28, "setLoadAction:", 2);
  objc_msgSend(v28, "setStoreAction:", 1);
  objc_msgSend(v28, "setClearColor:", 0.0, 0.0, 0.0, 0.0);

  objc_msgSend(v24, "setRenderTargetWidth:", *(_QWORD *)a12);
  objc_msgSend(v24, "setRenderTargetHeight:", *(unsigned int *)(a12 + 4));
  objc_msgSend(v24, "setRenderTargetArrayLength:", 1);
  objc_msgSend(v24, "setDefaultRasterSampleCount:", 1);
  objc_msgSend(v24, "depthAttachment");
  v29 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v29, "setTexture:", v20);
  objc_msgSend(v29, "setLoadAction:", 2);
  objc_msgSend(v29, "setStoreAction:", 0);

  if (a9)
  {
    v30 = sub_23953674C(a1, 1);
    sub_2397A9494((uint64_t)v30);
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v39, "renderCommandEncoderWithDescriptor:", v24);
    v32 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v32, "setRenderPipelineState:", v31);
    objc_msgSend(v32, "setCullMode:", 0);
    objc_msgSend(v32, "setFrontFacingWinding:", 1);
    objc_msgSend(v32, "setDepthStencilState:", v21);
    objc_msgSend(v32, "setVertexBuffer:offset:atIndex:", v38, 0, 0);
    objc_msgSend(v32, "setVertexBytes:length:atIndex:", a10, 64, 1);
    objc_msgSend(v32, "setFragmentBytes:length:atIndex:", a12, 8, 0);
    objc_msgSend(v32, "drawIndexedPrimitives:indexCount:indexType:indexBuffer:indexBufferOffset:", 3, 3 * a11, 1, v36, 0);
  }
  else
  {
    v33 = sub_23953674C(a1, 0);
    sub_2397A9494((uint64_t)v33);
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v39, "renderCommandEncoderWithDescriptor:", v24);
    v32 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v32, "setRenderPipelineState:", v31);
    objc_msgSend(v32, "setCullMode:", 0);
    objc_msgSend(v32, "setFrontFacingWinding:", 1);
    objc_msgSend(v32, "setDepthStencilState:", v21);
    objc_msgSend(v32, "setVertexBuffer:offset:atIndex:", v35, 0, 0);
    objc_msgSend(v32, "setVertexBytes:length:atIndex:", a10, 64, 1);
    objc_msgSend(v32, "setFragmentBytes:length:atIndex:", a12, 8, 0);
    objc_msgSend(v32, "drawIndexedPrimitives:indexCount:indexType:indexBuffer:indexBufferOffset:", 3, 3 * a11, 1, v37, 0);
  }
  objc_msgSend(v32, "endEncoding");

}

void sub_239537E2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, void *a14, void *a15, id a16)
{
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;

  _Unwind_Resume(a1);
}

void sub_239537ED8(uint64_t a1, void *a2, void *a3, void *a4, void *a5, uint64_t *a6, uint64_t a7, int a8, int a9, void *a10, void *a11)
{
  int v17;
  void *v18;
  void *v19;
  id v20;
  id v21;
  id v22;
  id v23;
  uint64_t *v24;
  void *v25;
  unint64_t v26;
  unint64_t v27;
  void *v28;
  void *v29;
  uint64_t *v30;
  void *v31;
  unint64_t v32;
  unint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  id v38;
  id v39;
  _QWORD v40[3];
  _QWORD v41[3];
  _QWORD v42[3];
  _QWORD v43[3];
  _DWORD v44[3];

  v17 = a9;
  v19 = a10;
  v18 = a11;
  v20 = a2;
  v39 = a3;
  v21 = a4;
  v38 = a5;
  v44[0] = a8;
  v22 = v19;
  v23 = v18;
  if (a8 | v17)
  {
    sub_23955D438(a1, v20, v22);
    v24 = sub_239536660(a1, 16);
    sub_2397A9494((uint64_t)v24);
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    v26 = objc_msgSend(v25, "threadExecutionWidth");
    v27 = objc_msgSend(v25, "maxTotalThreadsPerThreadgroup");
    v35 = *a6;
    objc_msgSend(v20, "computeCommandEncoder");
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v28, "setTexture:atIndex:", v39, 0);
    objc_msgSend(v28, "setTexture:atIndex:", v21, 1);
    objc_msgSend(v28, "setTexture:atIndex:", v22, 2);
    objc_msgSend(v28, "setBytes:length:atIndex:", a6, 8, 0);
    objc_msgSend(v28, "setComputePipelineState:", v25);
    v43[0] = ((int)v26 + (int)v35 - 1) / v26;
    v43[1] = ((v27 / v26) + HIDWORD(v35) - 1) / (v27 / v26);
    v43[2] = 1;
    v42[0] = v26;
    v42[1] = v27 / v26;
    v42[2] = 1;
    objc_msgSend(v28, "dispatchThreadgroups:threadsPerThreadgroup:", v43, v42);
    objc_msgSend(v28, "endEncoding");

    objc_msgSend(v20, "blitCommandEncoder");
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v29, "generateMipmapsForTexture:", v22);
    objc_msgSend(v29, "endEncoding");

    v30 = sub_239536660(a1, 18);
    sub_2397A9494((uint64_t)v30);
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    v36 = *a6;
    v32 = objc_msgSend(v31, "threadExecutionWidth");
    v33 = objc_msgSend(v31, "maxTotalThreadsPerThreadgroup");
    objc_msgSend(v20, "computeCommandEncoder");
    v34 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v34, "setTexture:atIndex:", v21, 0);
    objc_msgSend(v34, "setTexture:atIndex:", v22, 1);
    objc_msgSend(v34, "setBuffer:offset:atIndex:", v38, 0, 0);
    objc_msgSend(v34, "setBytes:length:atIndex:", &a9, 4, 1);
    objc_msgSend(v34, "setBytes:length:atIndex:", v44, 4, 2);
    objc_msgSend(v34, "setBytes:length:atIndex:", a6, 8, 3);
    objc_msgSend(v34, "setBytes:length:atIndex:", a7, 8, 4);
    objc_msgSend(v34, "setBuffer:offset:atIndex:", v23, 0, 5);
    objc_msgSend(v34, "setComputePipelineState:", v31);
    v41[0] = ((int)v36 + (int)v32 - 1) / v32;
    v41[1] = (HIDWORD(v36) + (v33 / v32) - 1) / (v33 / v32);
    v41[2] = 1;
    v40[0] = v32;
    v40[1] = v33 / v32;
    v40[2] = 1;
    objc_msgSend(v34, "dispatchThreadgroups:threadsPerThreadgroup:", v41, v40);
    objc_msgSend(v34, "endEncoding");

  }
}

void sub_2395381F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;

  _Unwind_Resume(a1);
}

void sub_2395382AC(uint64_t a1, void *a2, void *a3, void *a4, void *a5, uint64_t *a6, uint64_t a7, void *a8)
{
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  uint64_t *v20;
  void *v21;
  unint64_t v22;
  unint64_t v23;
  void *v24;
  uint64_t v25;
  void *v26;
  _QWORD v27[3];
  _QWORD v28[3];

  v15 = a2;
  v16 = a3;
  v17 = a4;
  v18 = a5;
  v19 = objc_retainAutorelease(a8);
  v26 = v15;
  bzero((void *)objc_msgSend(v19, "contents"), objc_msgSend(v19, "length"));
  objc_msgSend(v19, "length");
  nullsub_4(v19);
  v20 = sub_239536660(a1, 0);
  sub_2397A9494((uint64_t)v20);
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  v22 = objc_msgSend(v21, "threadExecutionWidth");
  v23 = objc_msgSend(v21, "maxTotalThreadsPerThreadgroup");
  v25 = *a6;
  objc_msgSend(v15, "computeCommandEncoder");
  v24 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v24, "setTexture:atIndex:", v16, 0);
  objc_msgSend(v24, "setBuffer:offset:atIndex:", v17, 0, 0);
  objc_msgSend(v24, "setBuffer:offset:atIndex:", v18, 0, 1);
  objc_msgSend(v24, "setBytes:length:atIndex:", a6, 8, 2);
  objc_msgSend(v24, "setBytes:length:atIndex:", a7, 8, 3);
  objc_msgSend(v24, "setBytes:length:atIndex:", a6, 8, 4);
  objc_msgSend(v24, "setBuffer:offset:atIndex:", v19, 0, 5);
  objc_msgSend(v24, "setComputePipelineState:", v21);
  v28[0] = (v22 + v25 - 1) / v22;
  v28[1] = (v23 / v22 + HIDWORD(v25) - 1) / (v23 / v22);
  v28[2] = 1;
  v27[0] = v22;
  v27[1] = v23 / v22;
  v27[2] = 1;
  objc_msgSend(v24, "dispatchThreadgroups:threadsPerThreadgroup:", v28, v27);
  objc_msgSend(v24, "endEncoding");

}

void sub_2395384B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

void sub_23953850C(uint64_t a1, void *a2, void *a3, void *a4, void *a5, unsigned int *a6, uint64_t *a7, uint64_t a8, void *a9, void *a10, void *a11, void *a12, void *a13)
{
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  uint64_t *v24;
  void *v25;
  unint64_t v26;
  unint64_t v27;
  void *v28;
  uint64_t *v29;
  void *v30;
  unint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t *v34;
  void *v35;
  unint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  id v41;
  id v42;
  id v43;
  id v44;
  id v45;
  id v46;
  unint64_t v48;
  int64x2_t v49;
  unint64_t v50;
  int64x2_t v51;
  unint64_t v52;
  int64x2_t v53;
  unint64_t v54;
  int64x2_t v55;
  _QWORD v56[3];
  _QWORD v57[4];

  v46 = a2;
  v45 = a3;
  v44 = a4;
  v43 = a5;
  v18 = a9;
  v42 = a10;
  v19 = a11;
  v20 = a12;
  v41 = a13;
  v21 = objc_retainAutorelease(v18);
  bzero((void *)objc_msgSend(v21, "contents", v20, v19), objc_msgSend(v21, "length"));
  v22 = objc_retainAutorelease(v19);
  bzero((void *)objc_msgSend(v22, "contents"), objc_msgSend(v22, "length"));
  v23 = objc_retainAutorelease(v20);
  bzero((void *)objc_msgSend(v23, "contents"), objc_msgSend(v23, "length"));
  objc_msgSend(v21, "length");
  nullsub_4(v21);
  objc_msgSend(v22, "length");
  nullsub_4(v22);
  objc_msgSend(v23, "length");
  nullsub_4(v23);
  v24 = sub_239536660(a1, 1);
  sub_2397A9494((uint64_t)v24);
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  v26 = objc_msgSend(v25, "threadExecutionWidth");
  v27 = objc_msgSend(v25, "maxTotalThreadsPerThreadgroup");
  v39 = *a7;
  objc_msgSend(v46, "computeCommandEncoder");
  v28 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v28, "setTexture:atIndex:", v45, 0);
  objc_msgSend(v28, "setBuffer:offset:atIndex:", v44, 0, 0);
  objc_msgSend(v28, "setBuffer:offset:atIndex:", v43, 0, 1);
  objc_msgSend(v28, "setBytes:length:atIndex:", a7, 8, 2);
  objc_msgSend(v28, "setBytes:length:atIndex:", a8, 8, 3);
  objc_msgSend(v28, "setBytes:length:atIndex:", a7, 8, 4);
  objc_msgSend(v28, "setBuffer:offset:atIndex:", v21, 0, 5);
  objc_msgSend(v28, "setBuffer:offset:atIndex:", v22, 0, 6);
  objc_msgSend(v28, "setBuffer:offset:atIndex:", v23, 0, 7);
  objc_msgSend(v28, "setComputePipelineState:", v25);
  v57[0] = (v26 + v39 - 1) / v26;
  v57[1] = (v27 / v26 + HIDWORD(v39) - 1) / (v27 / v26);
  v57[2] = 1;
  v56[0] = v26;
  v56[1] = v27 / v26;
  v56[2] = 1;
  objc_msgSend(v28, "dispatchThreadgroups:threadsPerThreadgroup:", v57, v56);
  objc_msgSend(v28, "endEncoding");

  v29 = sub_239536660(a1, 2);
  sub_2397A9494((uint64_t)v29);
  v30 = (void *)objc_claimAutoreleasedReturnValue();
  v31 = objc_msgSend(v30, "threadExecutionWidth");
  v32 = *a6;
  objc_msgSend(v46, "computeCommandEncoder");
  v33 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v33, "setBuffer:offset:atIndex:", v21, 0, 0);
  objc_msgSend(v33, "setBuffer:offset:atIndex:", v22, 0, 1);
  objc_msgSend(v33, "setBytes:length:atIndex:", a6, 4, 2);
  objc_msgSend(v33, "setBuffer:offset:atIndex:", v42, 0, 3);
  objc_msgSend(v33, "setComputePipelineState:", v30);
  v54 = (v31 + v32 - 1) / v31;
  v55 = vdupq_n_s64(1uLL);
  v52 = v31;
  v53 = v55;
  objc_msgSend(v33, "dispatchThreadgroups:threadsPerThreadgroup:", &v54, &v52);
  objc_msgSend(v33, "endEncoding");

  v34 = sub_239536660(a1, 3);
  sub_2397A9494((uint64_t)v34);
  v35 = (void *)objc_claimAutoreleasedReturnValue();
  v36 = objc_msgSend(v35, "threadExecutionWidth");
  v37 = *a6;
  objc_msgSend(v46, "computeCommandEncoder");
  v38 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v38, "setLabel:", CFSTR("Color Stdev"));
  objc_msgSend(v38, "setBuffer:offset:atIndex:", v23, 0, 0);
  objc_msgSend(v38, "setBuffer:offset:atIndex:", v22, 0, 1);
  objc_msgSend(v38, "setBytes:length:atIndex:", a6, 4, 2);
  objc_msgSend(v38, "setBuffer:offset:atIndex:", v41, 0, 3);
  objc_msgSend(v38, "setComputePipelineState:", v35);
  v50 = (v36 + v37 - 1) / v36;
  v51 = vdupq_n_s64(1uLL);
  v48 = v36;
  v49 = v51;
  objc_msgSend(v38, "dispatchThreadgroups:threadsPerThreadgroup:", &v50, &v48);
  objc_msgSend(v38, "endEncoding");

}

void sub_2395389C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16, void *a17, void *a18, void *a19, void *a20)
{
  void *v20;
  void *v21;
  void *v22;

  _Unwind_Resume(a1);
}

void sub_239538A94(uint64_t a1, void *a2, void *a3, void *a4, void *a5, void *a6, void *a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, unsigned int *a12, void *a13)
{
  id v20;
  id v21;
  id v22;
  id v23;
  uint64_t *v24;
  void *v25;
  id v26;
  unint64_t v27;
  uint64_t v28;
  void *v29;
  id v30;
  void *v31;
  id v32;
  id v33;
  unint64_t v34;
  int64x2_t v35;
  unint64_t v36;
  int64x2_t v37;

  v20 = a2;
  v33 = a3;
  v32 = a4;
  v21 = a5;
  v22 = a6;
  v23 = a7;
  v30 = a13;
  v31 = v20;
  v24 = sub_239536660(a1, 4);
  sub_2397A9494((uint64_t)v24);
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  v26 = objc_retainAutorelease(v30);
  bzero((void *)objc_msgSend(v26, "contents", v30), 4 * *a12);
  nullsub_4(v26);
  v27 = objc_msgSend(v25, "threadExecutionWidth");
  v28 = *a12;
  objc_msgSend(v20, "computeCommandEncoder");
  v29 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v29, "setTexture:atIndex:", v33, 0);
  objc_msgSend(v29, "setBuffer:offset:atIndex:", v32, 0, 0);
  objc_msgSend(v29, "setBuffer:offset:atIndex:", v21, 0, 1);
  objc_msgSend(v29, "setBuffer:offset:atIndex:", v22, 0, 2);
  objc_msgSend(v29, "setBuffer:offset:atIndex:", v23, 0, 3);
  objc_msgSend(v29, "setBytes:length:atIndex:", a8, 64, 4);
  objc_msgSend(v29, "setBytes:length:atIndex:", a9, 16, 5);
  objc_msgSend(v29, "setBytes:length:atIndex:", a10, 8, 6);
  objc_msgSend(v29, "setBytes:length:atIndex:", a11, 8, 7);
  objc_msgSend(v29, "setBytes:length:atIndex:", a12, 4, 8);
  objc_msgSend(v29, "setBuffer:offset:atIndex:", v26, 0, 9);
  objc_msgSend(v29, "setComputePipelineState:", v25);
  v36 = (v27 + v28 - 1) / v27;
  v37 = vdupq_n_s64(1uLL);
  v34 = v27;
  v35 = v37;
  objc_msgSend(v29, "dispatchThreadgroups:threadsPerThreadgroup:", &v36, &v34);
  objc_msgSend(v29, "endEncoding");

}

void sub_239538CE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11, void *a12)
{
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_239538D4C(uint64_t a1, void *a2, void *a3, void *a4, unsigned int *a5, void *a6)
{
  id v11;
  id v12;
  id v13;
  id v14;
  uint64_t *v15;
  void *v16;
  unint64_t v17;
  uint64_t v18;
  void *v19;
  unint64_t v20;
  int64x2_t v21;
  unint64_t v22;
  int64x2_t v23;

  v11 = a2;
  v12 = a3;
  v13 = a4;
  v14 = a6;
  v15 = sub_239536660(a1, 5);
  sub_2397A9494((uint64_t)v15);
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  v17 = objc_msgSend(v16, "threadExecutionWidth");
  v18 = *a5;
  objc_msgSend(v11, "computeCommandEncoder");
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v19, "setBuffer:offset:atIndex:", v12, 0, 0);
  objc_msgSend(v19, "setBuffer:offset:atIndex:", v13, 0, 1);
  objc_msgSend(v19, "setBytes:length:atIndex:", a5, 4, 2);
  objc_msgSend(v19, "setBuffer:offset:atIndex:", v14, 0, 3);
  objc_msgSend(v19, "setComputePipelineState:", v16);
  v22 = (v17 + v18 - 1) / v17;
  v23 = vdupq_n_s64(1uLL);
  v20 = v17;
  v21 = v23;
  objc_msgSend(v19, "dispatchThreadgroups:threadsPerThreadgroup:", &v22, &v20);
  objc_msgSend(v19, "endEncoding");

}

void sub_239538EA0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_239538EF0(uint64_t a1, void *a2, void *a3, void *a4, void *a5, uint64_t a6, uint64_t a7, unsigned int *a8, void *a9)
{
  id v16;
  id v17;
  id v18;
  id v19;
  uint64_t *v20;
  void *v21;
  unint64_t v22;
  uint64_t v23;
  void *v24;
  void *v25;
  id v26;
  unint64_t v27;
  int64x2_t v28;
  unint64_t v29;
  int64x2_t v30;

  v16 = a2;
  v26 = a3;
  v17 = a4;
  v18 = a5;
  v19 = a9;
  v25 = v16;
  v20 = sub_239536660(a1, 7);
  sub_2397A9494((uint64_t)v20);
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  v22 = objc_msgSend(v21, "threadExecutionWidth");
  v23 = *a8;
  objc_msgSend(v16, "computeCommandEncoder");
  v24 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v24, "setBuffer:offset:atIndex:", v26, 0, 0);
  objc_msgSend(v24, "setBuffer:offset:atIndex:", v17, 0, 1);
  objc_msgSend(v24, "setBuffer:offset:atIndex:", v18, 0, 2);
  objc_msgSend(v24, "setBytes:length:atIndex:", a6, 16, 3);
  objc_msgSend(v24, "setBytes:length:atIndex:", a7, 64, 4);
  objc_msgSend(v24, "setBytes:length:atIndex:", a8, 4, 5);
  objc_msgSend(v24, "setBuffer:offset:atIndex:", v19, 0, 6);
  objc_msgSend(v24, "setComputePipelineState:", v21);
  v29 = (v22 + v23 - 1) / v22;
  v30 = vdupq_n_s64(1uLL);
  v27 = v22;
  v28 = v30;
  objc_msgSend(v24, "dispatchThreadgroups:threadsPerThreadgroup:", &v29, &v27);
  objc_msgSend(v24, "endEncoding");

}

void sub_2395390A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

void sub_2395390EC(uint64_t a1, void *a2, void *a3, uint64_t *a4, void *a5)
{
  id v9;
  id v10;
  id v11;
  uint64_t *v12;
  void *v13;
  unint64_t v14;
  unint64_t v15;
  void *v16;
  uint64_t v17;
  _QWORD v18[3];
  _QWORD v19[3];

  v9 = a2;
  v10 = a3;
  v11 = a5;
  v12 = sub_239536660(a1, 14);
  sub_2397A9494((uint64_t)v12);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v14 = objc_msgSend(v13, "threadExecutionWidth");
  v15 = objc_msgSend(v13, "maxTotalThreadsPerThreadgroup");
  v17 = *a4;
  objc_msgSend(v9, "computeCommandEncoder");
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v16, "setBuffer:offset:atIndex:", v10, 0, 0);
  objc_msgSend(v16, "setBytes:length:atIndex:", a4, 8, 1);
  objc_msgSend(v16, "setBuffer:offset:atIndex:", v11, 0, 2);
  objc_msgSend(v16, "setComputePipelineState:", v13);
  v19[0] = (v14 + v17 - 1) / v14;
  v19[1] = (v15 / v14 + HIDWORD(v17) - 1) / (v15 / v14);
  v19[2] = 1;
  v18[0] = v14;
  v18[1] = v15 / v14;
  v18[2] = 1;
  objc_msgSend(v16, "dispatchThreadgroups:threadsPerThreadgroup:", v19, v18);
  objc_msgSend(v16, "endEncoding");

}

void sub_23953923C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_239539260(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_239539278(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_239539298(uint64_t a1, void *a2, void *a3, uint64_t *a4, void *a5)
{
  id v9;
  id v10;
  id v11;
  uint64_t *v12;
  void *v13;
  unint64_t v14;
  unint64_t v15;
  void *v16;
  uint64_t v17;
  _QWORD v18[3];
  _QWORD v19[3];

  v9 = a2;
  v10 = a3;
  v11 = a5;
  v12 = sub_239536660(a1, 15);
  sub_2397A9494((uint64_t)v12);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v14 = objc_msgSend(v13, "threadExecutionWidth");
  v15 = objc_msgSend(v13, "maxTotalThreadsPerThreadgroup");
  v17 = *a4;
  objc_msgSend(v9, "computeCommandEncoder");
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v16, "setBuffer:offset:atIndex:", v10, 0, 0);
  objc_msgSend(v16, "setBytes:length:atIndex:", a4, 8, 1);
  objc_msgSend(v16, "setBytes:length:atIndex:", a4, 8, 2);
  objc_msgSend(v16, "setBuffer:offset:atIndex:", v11, 0, 3);
  objc_msgSend(v16, "setComputePipelineState:", v13);
  v19[0] = (v14 + v17 - 1) / v14;
  v19[1] = (v15 / v14 + HIDWORD(v17) - 1) / (v15 / v14);
  v19[2] = 1;
  v18[0] = v14;
  v18[1] = v15 / v14;
  v18[2] = 1;
  objc_msgSend(v16, "dispatchThreadgroups:threadsPerThreadgroup:", v19, v18);
  objc_msgSend(v16, "endEncoding");

}

void sub_2395393FC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_239539420(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_239539438(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_239539458(uint64_t a1, void *a2, void *a3, void *a4, unsigned int *a5, void *a6)
{
  id v11;
  id v12;
  id v13;
  id v14;
  uint64_t *v15;
  void *v16;
  unint64_t v17;
  uint64_t v18;
  void *v19;
  unint64_t v20;
  int64x2_t v21;
  unint64_t v22;
  int64x2_t v23;

  v11 = a2;
  v12 = a3;
  v13 = a4;
  v14 = a6;
  v15 = sub_239536660(a1, 6);
  sub_2397A9494((uint64_t)v15);
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  v17 = objc_msgSend(v16, "threadExecutionWidth");
  v18 = *a5;
  objc_msgSend(v11, "computeCommandEncoder");
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v19, "setBuffer:offset:atIndex:", v12, 0, 0);
  objc_msgSend(v19, "setBuffer:offset:atIndex:", v13, 0, 1);
  objc_msgSend(v19, "setBytes:length:atIndex:", a5, 4, 2);
  objc_msgSend(v19, "setBuffer:offset:atIndex:", v14, 0, 3);
  objc_msgSend(v19, "setComputePipelineState:", v16);
  v22 = (v17 + v18 - 1) / v17;
  v23 = vdupq_n_s64(1uLL);
  v20 = v17;
  v21 = v23;
  objc_msgSend(v19, "dispatchThreadgroups:threadsPerThreadgroup:", &v22, &v20);
  objc_msgSend(v19, "endEncoding");

}

void sub_2395395AC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_2395395FC(uint64_t a1, void *a2, void *a3, void *a4, _DWORD *a5, uint64_t a6, void *a7, void *a8, void *a9, void *a10)
{
  id v17;
  id v18;
  id v19;
  uint64_t *v20;
  void *v21;
  unint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t *v26;
  void *v27;
  unint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t *v31;
  void *v32;
  unint64_t v33;
  uint64_t v34;
  void *v35;
  id v36;
  id v37;
  id v38;
  id v39;
  id v40;
  unint64_t v41;
  int64x2_t v42;
  unint64_t v43;
  int64x2_t v44;
  unint64_t v45;
  int64x2_t v46;
  unint64_t v47;
  int64x2_t v48;
  unint64_t v49;
  int64x2_t v50;
  unint64_t v51;
  int64x2_t v52;

  v17 = a2;
  v40 = a3;
  v39 = a4;
  v38 = a7;
  v37 = a8;
  v36 = a9;
  v18 = a10;
  LODWORD(a7) = *a5;
  v19 = objc_retainAutorelease(v18);
  bzero((void *)objc_msgSend(v19, "contents"), 8 * *a5);
  nullsub_4(v19);
  v20 = sub_239536660(a1, 19);
  sub_2397A9494((uint64_t)v20);
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  v22 = objc_msgSend(v21, "threadExecutionWidth");
  v23 = *a5;
  objc_msgSend(v17, "computeCommandEncoder");
  v24 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v24, "setBuffer:offset:atIndex:", v38, 0, 0);
  objc_msgSend(v24, "setBuffer:offset:atIndex:", v19, 0, 1);
  objc_msgSend(v24, "setBuffer:offset:atIndex:", v40, 0, 2);
  objc_msgSend(v24, "setBuffer:offset:atIndex:", v39, 0, 3);
  objc_msgSend(v24, "setBytes:length:atIndex:", a6, 1, 4);
  objc_msgSend(v24, "setBytes:length:atIndex:", a5, 4, 5);
  v25 = (4 * (_DWORD)a7);
  objc_msgSend(v24, "setBuffer:offset:atIndex:", v19, v25, 6);
  objc_msgSend(v24, "setComputePipelineState:", v21);
  v51 = (v22 + v23 - 1) / v22;
  v52 = vdupq_n_s64(1uLL);
  v49 = v22;
  v50 = v52;
  objc_msgSend(v24, "dispatchThreadgroups:threadsPerThreadgroup:", &v51, &v49);
  objc_msgSend(v24, "endEncoding");

  v26 = sub_239536660(a1, 20);
  sub_2397A9494((uint64_t)v26);
  v27 = (void *)objc_claimAutoreleasedReturnValue();
  v28 = objc_msgSend(v27, "threadExecutionWidth");
  v29 = *a5;
  objc_msgSend(v17, "computeCommandEncoder");
  v30 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v30, "setBuffer:offset:atIndex:", v19, v25, 0);
  objc_msgSend(v30, "setBuffer:offset:atIndex:", v40, 0, 1);
  objc_msgSend(v30, "setBytes:length:atIndex:", a5, 4, 2);
  objc_msgSend(v30, "setBuffer:offset:atIndex:", v19, 0, 3);
  objc_msgSend(v30, "setComputePipelineState:", v27);
  v47 = (v28 + v29 - 1) / v28;
  v48 = vdupq_n_s64(1uLL);
  v45 = v28;
  v46 = v48;
  objc_msgSend(v30, "dispatchThreadgroups:threadsPerThreadgroup:", &v47, &v45);
  objc_msgSend(v30, "endEncoding");

  v31 = sub_239536660(a1, 21);
  sub_2397A9494((uint64_t)v31);
  v32 = (void *)objc_claimAutoreleasedReturnValue();
  v33 = objc_msgSend(v32, "threadExecutionWidth");
  v34 = *a5;
  objc_msgSend(v17, "computeCommandEncoder");
  v35 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v35, "setBuffer:offset:atIndex:", v19, 0, 0);
  objc_msgSend(v35, "setBuffer:offset:atIndex:", v39, 0, 1);
  objc_msgSend(v35, "setBytes:length:atIndex:", a6, 1, 2);
  objc_msgSend(v35, "setBytes:length:atIndex:", a5, 4, 3);
  objc_msgSend(v35, "setBuffer:offset:atIndex:", v38, 0, 4);
  objc_msgSend(v35, "setBuffer:offset:atIndex:", v37, 0, 5);
  objc_msgSend(v35, "setBuffer:offset:atIndex:", v36, 0, 6);
  objc_msgSend(v35, "setComputePipelineState:", v32);
  v43 = (v33 + v34 - 1) / v33;
  v44 = vdupq_n_s64(1uLL);
  v41 = v33;
  v42 = v44;
  objc_msgSend(v35, "dispatchThreadgroups:threadsPerThreadgroup:", &v43, &v41);
  objc_msgSend(v35, "endEncoding");

}

void sub_2395399D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11, void *a12, void *a13)
{
  void *v13;
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_239539A74(uint64_t a1, void *a2, void *a3, void *a4, void *a5, uint64_t *a6, uint64_t a7, void *a8)
{
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  uint64_t *v20;
  void *v21;
  unint64_t v22;
  unint64_t v23;
  void *v24;
  uint64_t v25;
  void *v26;
  _QWORD v27[3];
  _QWORD v28[3];

  v15 = a2;
  v16 = a3;
  v17 = a4;
  v18 = a5;
  v19 = a8;
  v26 = v15;
  v20 = sub_239536660(a1, 9);
  sub_2397A9494((uint64_t)v20);
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  v22 = objc_msgSend(v21, "threadExecutionWidth");
  v23 = objc_msgSend(v21, "maxTotalThreadsPerThreadgroup");
  v25 = *a6;
  objc_msgSend(v15, "computeCommandEncoder");
  v24 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v24, "setTexture:atIndex:", v18, 0);
  objc_msgSend(v24, "setBuffer:offset:atIndex:", v16, 0, 0);
  objc_msgSend(v24, "setBuffer:offset:atIndex:", v17, 0, 1);
  objc_msgSend(v24, "setBytes:length:atIndex:", a6, 8, 2);
  objc_msgSend(v24, "setBytes:length:atIndex:", a7, 8, 3);
  objc_msgSend(v24, "setBytes:length:atIndex:", a6, 8, 4);
  objc_msgSend(v24, "setBuffer:offset:atIndex:", v19, 0, 5);
  objc_msgSend(v24, "setComputePipelineState:", v21);
  v28[0] = (v22 + v25 - 1) / v22;
  v28[1] = (v23 / v22 + HIDWORD(v25) - 1) / (v23 / v22);
  v28[2] = 1;
  v27[0] = v22;
  v27[1] = v23 / v22;
  v27[2] = 1;
  objc_msgSend(v24, "dispatchThreadgroups:threadsPerThreadgroup:", v28, v27);
  objc_msgSend(v24, "endEncoding");

}

void sub_239539C44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_239539C90(uint64_t a1, void *a2, void *a3, void *a4, unsigned int *a5, void *a6)
{
  id v11;
  id v12;
  id v13;
  id v14;
  uint64_t *v15;
  void *v16;
  unint64_t v17;
  uint64_t v18;
  void *v19;
  unint64_t v20;
  int64x2_t v21;
  unint64_t v22;
  int64x2_t v23;

  v11 = a2;
  v12 = a3;
  v13 = a4;
  v14 = a6;
  v15 = sub_239536660(a1, 8);
  sub_2397A9494((uint64_t)v15);
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  v17 = objc_msgSend(v16, "threadExecutionWidth");
  v18 = *a5;
  objc_msgSend(v11, "computeCommandEncoder");
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v19, "setBuffer:offset:atIndex:", v12, 0, 0);
  objc_msgSend(v19, "setBuffer:offset:atIndex:", v13, 0, 1);
  objc_msgSend(v19, "setBytes:length:atIndex:", a5, 4, 2);
  objc_msgSend(v19, "setBuffer:offset:atIndex:", v14, 0, 3);
  objc_msgSend(v19, "setComputePipelineState:", v16);
  v22 = (v17 + v18 - 1) / v17;
  v23 = vdupq_n_s64(1uLL);
  v20 = v17;
  v21 = v23;
  objc_msgSend(v19, "dispatchThreadgroups:threadsPerThreadgroup:", &v22, &v20);
  objc_msgSend(v19, "endEncoding");

}

void sub_239539DE4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

BOOL sub_239539E34(uint64_t a1, void *a2, float *a3)
{
  id v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  float *v11;
  float *v12;
  float *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int **v16;
  unsigned int *v17;
  unsigned int *v18;
  float v19;
  unsigned int *v20;
  unsigned int v21;
  float v22;
  float v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  _BYTE *v28;
  float *v29;
  unint64_t v30;
  float *v31;
  int v32;
  float *v33;
  uint64_t v34;
  uint64_t v35;
  _OWORD *v36;
  float *v37;
  uint64_t v38;
  __int128 v39;
  float *v40;
  _BOOL8 v41;
  unint64_t v42;
  float *v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  float v47;
  float v48;
  float v49;
  int v50;
  unint64_t v51;
  float v52;
  float *v53;
  uint64_t v54;
  float *v55;
  uint64_t v56;
  float v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  float v63;
  float v64;
  float v65;
  float v66;
  uint64_t v67;
  char *v68;
  char *v69;
  void *v70;
  char *v71;
  void *v72;
  void *v73;
  float *v75;
  id v76;
  float *__p;
  float *v78;
  void *v79;
  char *v80;
  uint64_t v81;
  char v82;

  v4 = a2;
  v79 = 0;
  v80 = 0;
  v81 = 0;
  sub_2396BFD08(a3, &v79);
  v5 = objc_retainAutorelease(v4);
  v6 = objc_msgSend(v5, "contents");
  v7 = *((_QWORD *)a3 + 1) - *(_QWORD *)a3;
  if (!v7)
  {
    v41 = 0;
    goto LABEL_72;
  }
  v8 = v7 / 12;
  if ((unint64_t)(v7 / 12) >> 62)
    sub_2394189F8();
  v9 = v6;
  v75 = a3;
  v76 = v5;
  v10 = operator new(4 * v8);
  bzero(v10, 4 * v8);
  v11 = 0;
  v12 = 0;
  v13 = 0;
  v14 = 0;
  __p = 0;
  v78 = 0;
  do
  {
    v16 = (unsigned int **)((char *)v79 + 24 * v14);
    v17 = *v16;
    v18 = v16[1];
    v19 = *((float *)v10 + v14);
    if (v17 != v18)
    {
      v20 = v17;
      do
      {
        v21 = *v20++;
        v19 = *(float *)(v9 + 4 * v21) + v19;
        *((float *)v10 + v14) = v19;
      }
      while (v20 != v18);
    }
    v22 = v19 / (float)(unint64_t)(v18 - v17);
    *((float *)v10 + v14) = v22;
    if (v22 != 0.0)
    {
      v23 = 0.0 - v22;
      if (v22 >= 0.0)
        v23 = v22;
      if (v23 > 0.000001)
      {
        if (v13 < v12)
        {
          *v13 = v22;
          v15 = (uint64_t)(v13 + 1);
LABEL_5:
          v78 = (float *)v15;
          v13 = (float *)v15;
          goto LABEL_6;
        }
        v24 = v13 - v11;
        v25 = v24 + 1;
        if ((unint64_t)(v24 + 1) >> 62)
          sub_2394189F8();
        if (((char *)v12 - (char *)v11) >> 1 > v25)
          v25 = ((char *)v12 - (char *)v11) >> 1;
        if ((unint64_t)((char *)v12 - (char *)v11) >= 0x7FFFFFFFFFFFFFFCLL)
          v26 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v26 = v25;
        if (v26)
        {
          if (v26 >> 62)
            sub_239418A80();
          v27 = v26;
          v28 = operator new(4 * v26);
          v26 = v27;
          v29 = (float *)&v28[4 * v24];
          *v29 = *((float *)v10 + v14);
          v15 = (uint64_t)(v29 + 1);
          if (v13 == v11)
            goto LABEL_29;
        }
        else
        {
          v28 = 0;
          v29 = (float *)(4 * v24);
          *(float *)(4 * v24) = v22;
          v15 = 4 * v24 + 4;
          if (v13 == v11)
            goto LABEL_29;
        }
        v30 = (char *)(v13 - 1) - (char *)v11;
        if (v30 >= 0xBC)
        {
          if (&v28[(char *)v13 - (char *)v11 - 4 - (v30 & 0xFFFFFFFFFFFFFFFCLL)] > &v28[(char *)v13 - (char *)v11 - 4])
          {
            v31 = v13;
          }
          else if ((float *)((char *)v13 - (v30 & 0xFFFFFFFFFFFFFFFCLL) - 4) > v13 - 1)
          {
            v31 = v13;
          }
          else if ((unint64_t)((char *)v11 - v28) >= 0x20)
          {
            v34 = (v30 >> 2) + 1;
            v35 = 4 * (v34 & 0x7FFFFFFFFFFFFFF8);
            v31 = &v13[v35 / 0xFFFFFFFFFFFFFFFCLL];
            v29 = (float *)((char *)v29 - v35);
            v36 = &v28[4 * v24 - 16];
            v37 = v13 - 4;
            v38 = v34 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v39 = *(_OWORD *)v37;
              *(v36 - 1) = *((_OWORD *)v37 - 1);
              *v36 = v39;
              v36 -= 2;
              v37 -= 8;
              v38 -= 8;
            }
            while (v38);
            if (v34 == (v34 & 0x7FFFFFFFFFFFFFF8))
              goto LABEL_29;
          }
          else
          {
            v31 = v13;
          }
        }
        else
        {
          v31 = v13;
        }
        do
        {
          v32 = *((_DWORD *)v31-- - 1);
          *((_DWORD *)v29-- - 1) = v32;
        }
        while (v31 != v11);
LABEL_29:
        v12 = (float *)&v28[4 * v26];
        __p = v29;
        if (v11)
        {
          v33 = v12;
          operator delete(v11);
          v12 = v33;
        }
        v11 = v29;
        goto LABEL_5;
      }
    }
LABEL_6:
    ++v14;
  }
  while (v14 != v8);
  v40 = __p;
  v41 = v13 != __p;
  if (v13 == __p)
  {
    v5 = v76;
  }
  else
  {
    v42 = v13 - __p - 1;
    v43 = &__p[v42];
    v44 = 126 - 2 * __clz(v42);
    if (v13 - __p == 1)
      v45 = 0;
    else
      v45 = v44;
    sub_239541130(__p, v43, (uint64_t)&v82, v45, 1);
    v5 = v76;
    v40 = __p;
    v46 = v78 - __p;
    v47 = (float)(unint64_t)(v46 - 1);
    v48 = __p[(float)(v47 * 0.05)];
    v49 = __p[(float)(v47 * 0.95)];
    v75[38] = __p[v46 - 1];
    v75[39] = *__p;
    v50 = *(_DWORD *)((char *)__p + ((2 * (v46 - 1)) & 0xFFFFFFFFFFFFFFFCLL));
    *((_DWORD *)v75 + 37) = v50;
    if (v78 == __p)
    {
      v52 = 0.0;
    }
    else
    {
      v51 = (char *)v78 - (char *)__p - 4;
      v52 = 0.0;
      v53 = __p;
      if (v51 < 4)
        goto LABEL_87;
      v54 = (v51 >> 2) + 1;
      v53 = &__p[v54 & 0x7FFFFFFFFFFFFFFELL];
      v55 = __p + 1;
      v56 = v54 & 0x7FFFFFFFFFFFFFFELL;
      do
      {
        v52 = (float)(v52 + *(v55 - 1)) + *v55;
        v55 += 2;
        v56 -= 2;
      }
      while (v56);
      if (v54 != (v54 & 0x7FFFFFFFFFFFFFFELL))
      {
LABEL_87:
        do
        {
          v57 = *v53++;
          v52 = v52 + v57;
        }
        while (v53 != v78);
      }
    }
    v75[36] = v52 / (float)(unint64_t)v46;
    *((_DWORD *)v75 + 50) = v50;
    v58 = *((_QWORD *)v75 + 1);
    v59 = v58 - *(_QWORD *)v75;
    if (v58 != *(_QWORD *)v75)
    {
      v60 = 0;
      v61 = 0;
      v62 = v59 / 12;
      v63 = v48 - v49;
      do
      {
        if (*(_QWORD *)((char *)v79 + v60 + 8) != *(_QWORD *)((char *)v79 + v60))
        {
          if (!*((_BYTE *)v75 + 104))
            sub_2394875CC();
          v64 = (float)((float)(*((float *)v10 + v61) - v49) / v63) * 255.0;
          if (v64 <= 255.0)
            v65 = (float)((float)(*((float *)v10 + v61) - v49) / v63) * 255.0;
          else
            v65 = 255.0;
          if (v64 >= 0.0)
            v66 = v65;
          else
            v66 = 0.0;
          v67 = *((_QWORD *)v75 + 10) + 3 * v61;
          *(_BYTE *)v67 = (int)(v66 + 0.5);
          *(_WORD *)(v67 + 1) = (int)((float)(255.0 - v66) + 0.5);
        }
        ++v61;
        v60 += 24;
      }
      while (v62 != v61);
    }
  }
  if (v40)
    operator delete(v40);
  if (v10)
    operator delete(v10);
LABEL_72:
  v68 = (char *)v79;
  if (v79)
  {
    v69 = v80;
    v70 = v79;
    if (v80 != v79)
    {
      v71 = v80;
      do
      {
        v73 = (void *)*((_QWORD *)v71 - 3);
        v71 -= 24;
        v72 = v73;
        if (v73)
        {
          *((_QWORD *)v69 - 2) = v72;
          operator delete(v72);
        }
        v69 = v71;
      }
      while (v71 != v68);
      v70 = v79;
    }
    v80 = v68;
    operator delete(v70);
  }

  return v41;
}

void sub_23953A3D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *a19)
{
  if (__p)
    operator delete(__p);
  if (a16)
    operator delete(a16);
  sub_23942A16C(&a19);

  _Unwind_Resume(a1);
}

uint64_t sub_23953A454(uint64_t a1, void *a2, int32x2_t *a3, uint64_t a4)
{
  id v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *v10;
  id v11;
  _BYTE v13[16];
  std::__shared_weak_count *v14;
  uint64_t v15;

  v6 = a2;
  sub_2398D8228(4);
  sub_23953A5B0(a4, (uint64_t)v13);
  nullsub_4(&v15);
  v7 = v14;
  if (!v14)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v14->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    j_nullsub_4_89(v13);
    v10 = *(void **)(a4 + 32);
    if (!*(_BYTE *)(a4 + 80))
      goto LABEL_8;
  }
  else
  {
LABEL_5:
    j_nullsub_4_89(v13);
    v10 = *(void **)(a4 + 32);
    if (!*(_BYTE *)(a4 + 80))
      goto LABEL_8;
  }
  if (v10)
  {
    (*(void (**)(_QWORD, uint64_t, const char *))(**(_QWORD **)(a4 + 8) + 88))(*(_QWORD *)(a4 + 8), 1, "unknown location");
    v10 = *(void **)(a4 + 32);
  }
LABEL_8:
  v11 = objc_retainAutorelease(v6);
  memcpy(v10, (const void *)objc_msgSend(v11, "contents"), 4 * vmul_lane_s32(*a3, *a3, 1).u32[0]);

  return 1;
}

void sub_23953A578(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  void *v3;
  va_list va;

  va_start(va, a3);
  sub_239422DD0((uint64_t)va);

  _Unwind_Resume(a1);
}

void sub_23953A590(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_23953A5A0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_23953A5B0(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t (**v8)();
  _OWORD v9[4];
  uint64_t v10;
  __int16 v11;

  v8 = &off_250ADD920;
  sub_239541EE0(a2, (uint64_t)v9);
  v3 = v9[0];
  v9[0] = 0uLL;
  v4 = *(std::__shared_weak_count **)(a1 + 16);
  *(_OWORD *)(a1 + 8) = v3;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  *(_OWORD *)(a1 + 24) = v9[1];
  *(_OWORD *)(a1 + 40) = v9[2];
  *(_OWORD *)(a1 + 56) = v9[3];
  *(_QWORD *)(a1 + 72) = v10;
  *(_WORD *)(a1 + 80) = v11;
  sub_239416DA0((uint64_t)v9);
  nullsub_4(&v8);
  return a1;
}

void sub_23953A67C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  nullsub_4(va);
  _Unwind_Resume(a1);
}

void sub_23953A690(uint64_t a1, float *a2)
{
  uint64_t v4;
  BOOL v5;
  float *v6;
  uint64_t v7;
  unint64_t v8;
  float v9;
  uint64_t v10;
  uint64_t v11;
  float *v12;
  float v13;
  uint64_t v14;
  float v15;
  float v16;
  uint64_t v17;
  float *v18;
  float v19;
  uint64_t v20;
  float *v21;
  unint64_t v22;
  unint64_t v23;
  float *v24;
  float v25;
  unint64_t v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *p_shared_owners;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  float *v33;
  uint64_t v34;
  float v35;
  float v36;
  float *v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  _BYTE *v42;
  float *v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  float *v47;
  _OWORD *v48;
  float *v49;
  uint64_t v50;
  __int128 v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  float *v55;
  unint64_t v56;
  float *v57;
  float v58;
  float *v59;
  float *v60;

  v60 = 0;
  v4 = *(_QWORD *)(a1 + 56);
  if (*(_BYTE *)(a1 + 80))
    v5 = v4 == 0;
  else
    v5 = 1;
  if (!v5)
  {
    v27 = *(_QWORD *)(a1 + 8);
    v28 = *(std::__shared_weak_count **)(a1 + 16);
    if (v28)
    {
      p_shared_owners = (unint64_t *)&v28->__shared_owners_;
      do
        v30 = __ldxr(p_shared_owners);
      while (__stxr(v30 + 1, p_shared_owners));
      do
        v31 = __ldaxr(p_shared_owners);
      while (__stlxr(v31 - 1, p_shared_owners));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
        std::__shared_weak_count::__release_weak(v28);
      }
    }
    (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v27 + 88))(v27, 0, "unknown location");
    v4 = *(_QWORD *)(a1 + 56);
    v6 = 0;
    v7 = (*(_DWORD *)(a1 + 68) * *(_DWORD *)(a1 + 64));
    if ((_DWORD)v7)
      goto LABEL_40;
LABEL_70:
    *((_QWORD *)a2 + 17) = 0;
    *((_QWORD *)a2 + 18) = 0;
    if (v6)
      goto LABEL_83;
    return;
  }
  v6 = 0;
  v7 = (*(_DWORD *)(a1 + 68) * *(_DWORD *)(a1 + 64));
  if (!(_DWORD)v7)
    goto LABEL_70;
LABEL_40:
  v59 = a2;
  v32 = 0;
  v33 = 0;
  do
  {
    v35 = *(float *)(v4 + 4 * v32);
    if (v35 != 0.0)
    {
      v36 = 0.0 - v35;
      if (v35 >= 0.0)
        v36 = *(float *)(v4 + 4 * v32);
      if (v36 > 1.0e-12)
      {
        v37 = v60;
        if (v60 < v33)
        {
          *v60 = v35;
          v34 = (uint64_t)(v60 + 1);
LABEL_42:
          v60 = (float *)v34;
          goto LABEL_43;
        }
        v38 = v60 - v6;
        v39 = v38 + 1;
        if ((unint64_t)(v38 + 1) >> 62)
          sub_2394189F8();
        if (((char *)v33 - (char *)v6) >> 1 > v39)
          v39 = ((char *)v33 - (char *)v6) >> 1;
        if ((unint64_t)((char *)v33 - (char *)v6) >= 0x7FFFFFFFFFFFFFFCLL)
          v40 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v40 = v39;
        if (v40)
        {
          if (v40 >> 62)
            sub_239418A80();
          v41 = v40;
          v42 = operator new(4 * v40);
          v40 = v41;
          v43 = (float *)&v42[4 * v38];
          *v43 = *(float *)(v4 + 4 * v32);
          v34 = (uint64_t)(v43 + 1);
          if (v60 == v6)
            goto LABEL_66;
        }
        else
        {
          v42 = 0;
          v43 = (float *)(4 * v38);
          *(float *)(4 * v38) = v35;
          v34 = 4 * v38 + 4;
          if (v60 == v6)
          {
LABEL_66:
            v33 = (float *)&v42[4 * v40];
            if (v6)
              operator delete(v6);
            v6 = v43;
            goto LABEL_42;
          }
        }
        v44 = (char *)(v60 - 1) - (char *)v6;
        if (v44 < 0x2C)
          goto LABEL_88;
        if ((unint64_t)((char *)v6 - v42) < 0x20)
          goto LABEL_88;
        v45 = (v44 >> 2) + 1;
        v46 = 4 * (v45 & 0x7FFFFFFFFFFFFFF8);
        v47 = &v60[v46 / 0xFFFFFFFFFFFFFFFCLL];
        v43 = (float *)((char *)v43 - v46);
        v48 = &v42[4 * v38 - 16];
        v49 = v60 - 4;
        v50 = v45 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v51 = *(_OWORD *)v49;
          *(v48 - 1) = *((_OWORD *)v49 - 1);
          *v48 = v51;
          v48 -= 2;
          v49 -= 8;
          v50 -= 8;
        }
        while (v50);
        v37 = v47;
        if (v45 != (v45 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_88:
          do
          {
            v52 = *((_DWORD *)v37-- - 1);
            *((_DWORD *)v43-- - 1) = v52;
          }
          while (v37 != v6);
        }
        goto LABEL_66;
      }
    }
LABEL_43:
    ++v32;
  }
  while (v32 != v7);
  a2 = v59;
  v53 = (char *)v60 - (char *)v6;
  if (v60 == v6)
    goto LABEL_70;
  v8 = v53 >> 2;
  v9 = *v6;
  if ((unint64_t)v53 <= 4)
  {
    v59[37] = v9;
    v59[36] = *v6;
    v17 = v53 << 29;
    if ((v53 & 4) == 0)
      goto LABEL_21;
  }
  else
  {
    if (v8 <= 2)
      v10 = 2;
    else
      v10 = v53 >> 2;
    v11 = 1;
    do
    {
      if (v6[v11] > v9)
        v9 = v6[v11];
      ++v11;
    }
    while (v10 != v11);
    v59[37] = v9;
    v12 = v6 + 1;
    v13 = *v6;
    v14 = v10 - 1;
    do
    {
      v15 = *v12++;
      v16 = v15;
      if (v15 < v13)
        v13 = v16;
      --v14;
    }
    while (v14);
    v59[36] = v13;
    v17 = v53 << 29;
    if ((v53 & 4) == 0)
    {
LABEL_21:
      v18 = &v6[v17 >> 32];
      if (v18 != v60)
        sub_2394F1C6C(v6, &v6[v17 >> 32], v60);
      v19 = *v18;
      v20 = (v17 - 0x100000000) >> 32;
      v21 = &v6[v20];
      if (v21 != v60)
        sub_2394F1C6C(v6, &v6[v20], v60);
      v59[35] = (float)(v19 + *v21) * 0.5;
      if (v8 <= 1)
        v22 = 1;
      else
        v22 = v8;
      if (v22 >= 2)
        goto LABEL_29;
LABEL_79:
      v23 = 0;
      v25 = 0.0;
      goto LABEL_80;
    }
  }
  v54 = (v17 - 0x80000000) >> 32;
  v55 = &v6[v54];
  if (v55 != v60)
    sub_2394F1C6C(v6, &v6[v54], v60);
  v59[35] = *v55;
  if (v8 <= 1)
    v22 = 1;
  else
    v22 = v8;
  if (v22 < 2)
    goto LABEL_79;
LABEL_29:
  v23 = v22 & 0xFFFFFFFFFFFFFFFELL;
  v24 = v6 + 1;
  v25 = 0.0;
  v26 = v22 & 0xFFFFFFFFFFFFFFFELL;
  do
  {
    v25 = (float)(v25 + *(v24 - 1)) + *v24;
    v24 += 2;
    v26 -= 2;
  }
  while (v26);
  if (v22 != v23)
  {
LABEL_80:
    v56 = v22 - v23;
    v57 = &v6[v23];
    do
    {
      v58 = *v57++;
      v25 = v25 + v58;
      --v56;
    }
    while (v56);
  }
  v59[34] = v25 / (float)v8;
LABEL_83:
  operator delete(v6);
}

void sub_23953AB04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_23953AB38(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  float *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  float *v12;
  uint64_t v13;
  float v14;
  float v15;
  float *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  _BYTE *v21;
  float *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  float *v26;
  _OWORD *v27;
  float *v28;
  uint64_t v29;
  __int128 v30;
  int v31;
  float *v32;
  BOOL v33;
  unint64_t v34;
  float *v35;
  unint64_t v36;
  uint64_t v37;
  void *v38;
  unint64_t *v39;
  float v40;
  float v41;
  float v42;
  _QWORD *v43;
  int v44;
  int v45;
  __n128 v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  int i;
  int j;
  uint64_t v52;
  _BYTE *v53;
  float v54;
  float v55;
  uint64_t v56;
  float v57;
  float v58;
  float v59;
  uint64_t v60;
  uint64_t *v63;
  _QWORD *v64[2];
  std::__shared_weak_count *v65;
  uint64_t v66;
  void *__p;
  float *v68;
  float *v69;

  if (!*(_QWORD *)(a1 + 24))
    return;
  __p = 0;
  v68 = 0;
  v69 = 0;
  v2 = *(uint64_t **)(a1 + 16);
  if (v2)
  {
    v3 = 0;
    while (1)
    {
      if (*((_BYTE *)v2 + 104) && v2[10])
      {
        v4 = v2[4];
        v5 = (std::__shared_weak_count *)v2[5];
        if (v5)
        {
          p_shared_owners = (unint64_t *)&v5->__shared_owners_;
          do
            v7 = __ldxr(p_shared_owners);
          while (__stxr(v7 + 1, p_shared_owners));
          do
            v8 = __ldaxr(p_shared_owners);
          while (__stlxr(v8 - 1, p_shared_owners));
          if (!v8)
          {
            ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
            std::__shared_weak_count::__release_weak(v5);
          }
        }
        (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v4 + 88))(v4, 0, "unknown location");
        v3 = (float *)__p;
      }
      v9 = (*((_DWORD *)v2 + 23) * *((_DWORD *)v2 + 22));
      if ((_DWORD)v9)
        break;
LABEL_5:
      __p = v3;
      v2 = (uint64_t *)*v2;
      if (!v2)
      {
        v32 = v68;
        goto LABEL_48;
      }
    }
    v10 = 0;
    v63 = v2;
    v11 = v2[10];
    v12 = v69;
    while (1)
    {
      v14 = *(float *)(v11 + 4 * v10);
      if (v14 == 0.0)
        goto LABEL_19;
      v15 = 0.0 - v14;
      if (v14 >= 0.0)
        v15 = *(float *)(v11 + 4 * v10);
      if (v15 <= 1.0e-12)
        goto LABEL_19;
      v16 = v68;
      if (v68 >= v12)
        break;
      *v68 = v14;
      v13 = (uint64_t)(v16 + 1);
LABEL_18:
      v68 = (float *)v13;
LABEL_19:
      if (++v10 == v9)
      {
        v69 = v12;
        v2 = v63;
        goto LABEL_5;
      }
    }
    v17 = v68 - v3;
    v18 = v17 + 1;
    if ((unint64_t)(v17 + 1) >> 62)
    {
      v69 = v12;
      __p = v3;
      sub_2394189F8();
    }
    if (((char *)v12 - (char *)v3) >> 1 > v18)
      v18 = ((char *)v12 - (char *)v3) >> 1;
    if ((unint64_t)((char *)v12 - (char *)v3) >= 0x7FFFFFFFFFFFFFFCLL)
      v19 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v19 = v18;
    if (v19)
    {
      if (v19 >> 62)
      {
        v69 = v12;
        __p = v3;
        sub_239418A80();
      }
      v20 = v19;
      v21 = operator new(4 * v19);
      v19 = v20;
      v22 = (float *)&v21[4 * v17];
      *v22 = *(float *)(v11 + 4 * v10);
      v13 = (uint64_t)(v22 + 1);
      if (v16 == v3)
        goto LABEL_43;
    }
    else
    {
      v21 = 0;
      v22 = (float *)(4 * v17);
      *(float *)(4 * v17) = v14;
      v13 = 4 * v17 + 4;
      if (v16 == v3)
      {
LABEL_43:
        v12 = (float *)&v21[4 * v19];
        if (v3)
          operator delete(v3);
        v3 = v22;
        goto LABEL_18;
      }
    }
    v23 = (char *)(v16 - 1) - (char *)v3;
    if (v23 < 0x2C)
      goto LABEL_89;
    if ((unint64_t)((char *)v3 - v21) < 0x20)
      goto LABEL_89;
    v24 = (v23 >> 2) + 1;
    v25 = 4 * (v24 & 0x7FFFFFFFFFFFFFF8);
    v26 = &v16[v25 / 0xFFFFFFFFFFFFFFFCLL];
    v22 = (float *)((char *)v22 - v25);
    v27 = &v21[4 * v17 - 16];
    v28 = v16 - 4;
    v29 = v24 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v30 = *(_OWORD *)v28;
      *(v27 - 1) = *((_OWORD *)v28 - 1);
      *v27 = v30;
      v27 -= 2;
      v28 -= 8;
      v29 -= 8;
    }
    while (v29);
    v16 = v26;
    if (v24 != (v24 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_89:
      do
      {
        v31 = *((_DWORD *)v16-- - 1);
        *((_DWORD *)v22-- - 1) = v31;
      }
      while (v16 != v3);
    }
    goto LABEL_43;
  }
  v32 = 0;
  v3 = 0;
LABEL_48:
  v34 = v32 - v3 - 1;
  v33 = v34 == 0;
  v35 = &v3[v34];
  v36 = 126 - 2 * __clz(v34);
  if (v33)
    v37 = 0;
  else
    v37 = v36;
  sub_239541130(v3, v35, (uint64_t)v64, v37, 1);
  v38 = __p;
  v39 = *(unint64_t **)(a1 + 16);
  if (!v39)
  {
LABEL_81:
    operator delete(v38);
    return;
  }
  v40 = (float)(unint64_t)((((char *)v68 - (_BYTE *)__p) >> 2) - 1);
  v41 = *((float *)__p + (float)(v40 * 0.95));
  v42 = *((float *)__p + (float)(v40 * 0.05)) - v41;
  do
  {
    v64[0] = v39 + 2;
    v43 = sub_2395426F8(a2 + 160, v39 + 2, (uint64_t)&unk_239EC6E98, v64);
    v44 = *((_DWORD *)v39 + 22);
    v45 = *((_DWORD *)v39 + 23);
    sub_2398D8228(21);
    sub_23953B120((uint64_t)(v43 + 3), (uint64_t)v64);
    v46 = nullsub_4(&v66);
    v47 = v65;
    if (!v65)
      goto LABEL_58;
    v48 = (unint64_t *)&v65->__shared_owners_;
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 - 1, v48));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v47->__on_zero_shared)(v47, v46);
      std::__shared_weak_count::__release_weak(v47);
      j_nullsub_4_89(v64);
      if (!v45)
        goto LABEL_53;
    }
    else
    {
LABEL_58:
      j_nullsub_4_89(v64);
      if (!v45)
        goto LABEL_53;
    }
    if (v44)
    {
      for (i = 0; i != v45; ++i)
      {
        for (j = 0; j != v44; ++j)
        {
          while (1)
          {
            v54 = *(float *)(v39[10] + 4 * (*((_DWORD *)v39 + 24) * j + *((_DWORD *)v39 + 25) * i));
            if (v54 == 0.0)
              break;
            v55 = 0.0 - v54;
            if (v54 >= 0.0)
              v55 = *(float *)(v39[10] + 4 * (*((_DWORD *)v39 + 24) * j + *((_DWORD *)v39 + 25) * i));
            if (v55 <= 1.0e-12)
              break;
            v56 = v43[7];
            if (!v56)
            {
              sub_239A444D4((uint64_t)"unknown file", 248, (uint64_t)"", (void (*)(void *))sub_239A4463C);
              sub_239A4475C();
              abort();
            }
            v57 = (float)((float)(v54 - v41) / v42) * 255.0;
            if (v57 <= 255.0)
              v58 = v57;
            else
              v58 = 255.0;
            if (v57 >= 0.0)
              v59 = v58;
            else
              v59 = 0.0;
            v60 = v56 + (*((_DWORD *)v43 + 37) * i + *((_DWORD *)v43 + 36) * j);
            *(_BYTE *)v60 = (int)(v59 + 0.5);
            *(_WORD *)(v60 + 1) = (int)((float)(255.0 - v59) + 0.5);
            if (v44 == ++j)
              goto LABEL_61;
          }
          v52 = v43[7];
          if (!v52)
          {
            sub_239A444D4((uint64_t)"unknown file", 248, (uint64_t)"", (void (*)(void *))sub_239A4463C);
            sub_239A4475C();
            abort();
          }
          v53 = (_BYTE *)(v52 + (*((_DWORD *)v43 + 37) * i + *((_DWORD *)v43 + 36) * j));
          *v53 = 0;
          v53[1] = 0;
          v53[2] = 0;
        }
LABEL_61:
        ;
      }
    }
LABEL_53:
    v39 = (unint64_t *)*v39;
  }
  while (v39);
  v38 = __p;
  if (__p)
    goto LABEL_81;
}

void sub_23953B0C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,uint64_t a23)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_23953B120(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t (**v8)();
  _OWORD v9[7];
  uint64_t v10;
  __int16 v11;

  v8 = &off_250ADBEA0;
  sub_239469644(a2, (uint64_t)v9);
  v3 = v9[0];
  v9[0] = 0uLL;
  v4 = *(std::__shared_weak_count **)(a1 + 16);
  *(_OWORD *)(a1 + 8) = v3;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  *(_OWORD *)(a1 + 72) = v9[4];
  *(_OWORD *)(a1 + 88) = v9[5];
  *(_OWORD *)(a1 + 104) = v9[6];
  *(_QWORD *)(a1 + 120) = v10;
  *(_OWORD *)(a1 + 24) = v9[1];
  *(_OWORD *)(a1 + 40) = v9[2];
  *(_OWORD *)(a1 + 56) = v9[3];
  *(_WORD *)(a1 + 128) = v11;
  sub_239416DA0((uint64_t)v9);
  nullsub_4(&v8);
  return a1;
}

void sub_23953B204(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  nullsub_4(va);
  _Unwind_Resume(a1);
}

void sub_23953B218(uint64_t a1, void *a2, void *a3, unsigned int *a4, void *a5)
{
  id v9;
  id v10;
  id v11;
  uint64_t *v12;
  void *v13;
  unint64_t v14;
  uint64_t v15;
  void *v16;
  unint64_t v17;
  int64x2_t v18;
  unint64_t v19;
  int64x2_t v20;

  v9 = a2;
  v10 = a3;
  v11 = a5;
  v12 = sub_239536660(a1, 11);
  sub_2397A9494((uint64_t)v12);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v14 = objc_msgSend(v13, "threadExecutionWidth");
  v15 = *a4;
  objc_msgSend(v9, "computeCommandEncoder");
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v16, "setBuffer:offset:atIndex:", v10, 0, 0);
  objc_msgSend(v16, "setBytes:length:atIndex:", a4, 4, 1);
  objc_msgSend(v16, "setBuffer:offset:atIndex:", v11, 0, 2);
  objc_msgSend(v16, "setComputePipelineState:", v13);
  v19 = (v14 + v15 - 1) / v14;
  v20 = vdupq_n_s64(1uLL);
  v17 = v14;
  v18 = v20;
  objc_msgSend(v16, "dispatchThreadgroups:threadsPerThreadgroup:", &v19, &v17);
  objc_msgSend(v16, "endEncoding");

}

void sub_23953B340(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_23953B360(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_23953B378(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_23953B398(uint64_t a1, void *a2, unsigned int *a3, void *a4)
{
  id v7;
  id v8;
  uint64_t *v9;
  void *v10;
  unint64_t v11;
  uint64_t v12;
  void *v13;
  unint64_t v14;
  int64x2_t v15;
  unint64_t v16;
  int64x2_t v17;

  v7 = a2;
  v8 = a4;
  v9 = sub_239536660(a1, 10);
  sub_2397A9494((uint64_t)v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = objc_msgSend(v10, "threadExecutionWidth");
  v12 = *a3;
  objc_msgSend(v7, "computeCommandEncoder");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v13, "setBytes:length:atIndex:", a3, 4, 0);
  objc_msgSend(v13, "setBuffer:offset:atIndex:", v8, 0, 1);
  objc_msgSend(v13, "setComputePipelineState:", v10);
  v16 = (v11 + v12 - 1) / v11;
  v17 = vdupq_n_s64(1uLL);
  v14 = v11;
  v15 = v17;
  objc_msgSend(v13, "dispatchThreadgroups:threadsPerThreadgroup:", &v16, &v14);
  objc_msgSend(v13, "endEncoding");

}

void sub_23953B49C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_23953B4B4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_23953B4CC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_23953B4E0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_23953B4FC(uint64_t a1, void *a2, void *a3, void *a4, void *a5, uint64_t a6, unsigned int *a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12)
{
  id v19;
  id v20;
  id v21;
  uint64_t *v22;
  void *v23;
  unint64_t v24;
  uint64_t v25;
  void *v26;
  id v27;
  id v28;
  id v29;
  id v30;
  unint64_t v31;
  int64x2_t v32;
  unint64_t v33;
  int64x2_t v34;

  v30 = a2;
  v29 = a3;
  v28 = a4;
  v27 = a5;
  v19 = a10;
  v20 = a11;
  v21 = a12;
  v22 = sub_239536660(a1, 12);
  sub_2397A9494((uint64_t)v22);
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  v24 = objc_msgSend(v23, "threadExecutionWidth");
  v25 = *a7;
  objc_msgSend(v30, "computeCommandEncoder");
  v26 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v26, "setBuffer:offset:atIndex:", v29, 0, 0);
  objc_msgSend(v26, "setBuffer:offset:atIndex:", v28, 0, 1);
  objc_msgSend(v26, "setBuffer:offset:atIndex:", v27, 0, 2);
  objc_msgSend(v26, "setBytes:length:atIndex:", a6, 4, 3);
  objc_msgSend(v26, "setBytes:length:atIndex:", a7, 4, 4);
  objc_msgSend(v26, "setBytes:length:atIndex:", a8, 4, 5);
  objc_msgSend(v26, "setBytes:length:atIndex:", a7, 4, 6);
  objc_msgSend(v26, "setBytes:length:atIndex:", a9, 1, 7);
  objc_msgSend(v26, "setBuffer:offset:atIndex:", v19, 0, 8);
  objc_msgSend(v26, "setBuffer:offset:atIndex:", v20, 0, 9);
  objc_msgSend(v26, "setBuffer:offset:atIndex:", v21, 0, 10);
  objc_msgSend(v26, "setComputePipelineState:", v23);
  v33 = (v24 + v25 - 1) / v24;
  v34 = vdupq_n_s64(1uLL);
  v31 = v24;
  v32 = v34;
  objc_msgSend(v26, "dispatchThreadgroups:threadsPerThreadgroup:", &v33, &v31);
  objc_msgSend(v26, "endEncoding");

}

void sub_23953B720(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11, void *a12)
{
  void *v12;
  void *v13;
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

uint64_t sub_23953B778(void *a1, void *a2, void *a3, uint64_t a4, unint64_t a5, int a6, char a7, unsigned int a8, uint64_t a9)
{
  id v16;
  id v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  id v27;
  id v28;
  _QWORD v29[3];
  _QWORD *v30;
  unint64_t v31[46];

  v31[44] = *MEMORY[0x24BDAC8D0];
  v16 = a1;
  v17 = a2;
  v27 = a3;
  v28 = objc_retainAutorelease(v16);
  v18 = objc_msgSend(v28, "contents");
  v19 = objc_retainAutorelease(v17);
  v20 = objc_msgSend(v19, "contents");
  v21 = objc_retainAutorelease(v27);
  v22 = objc_msgSend(v21, "contents");
  sub_2397A2A50((uint64_t)v31, a8, 0);
  v23 = operator new(0x40uLL);
  *v23 = &off_250ADD960;
  v23[1] = a9;
  v23[2] = v18;
  v23[3] = v20;
  v23[4] = v22;
  *((_DWORD *)v23 + 10) = a6;
  v23[6] = a4;
  *((_BYTE *)v23 + 56) = a7;
  v30 = v23;
  sub_2397A376C(v31, a5, v29, 0);
  v24 = v30;
  if (v30 == v29)
  {
    v25 = 4;
    v24 = v29;
    goto LABEL_5;
  }
  if (v30)
  {
    v25 = 5;
LABEL_5:
    (*(void (**)(void))(*v24 + 8 * v25))();
  }
  sub_2397A2E14(v31);

  return 1;
}

void sub_23953B8FC(_Unwind_Exception *a1, uint64_t a2, void *a3, void *a4, void *a5, ...)
{
  va_list v5;
  va_list v7;
  uint64_t v8;
  uint64_t v9;
  va_list va;
  uint64_t v11;
  uint64_t v12;
  va_list v13;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v9 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, va_list);
  v7 = v13;
  if (v13 == v5)
  {
    v8 = 4;
    va_copy(v7, va);
  }
  else
  {
    if (!v13)
      goto LABEL_6;
    v8 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v7 + 8 * v8))();
LABEL_6:
  sub_2397A2E14(va1);

  _Unwind_Resume(a1);
}

uint64_t sub_23953B978(uint64_t a1, void *a2, unsigned int a3, _QWORD *a4)
{
  id v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  uint64_t v10;
  float v11;

  v6 = objc_retainAutorelease(a2);
  v7 = objc_msgSend(v6, "contents");
  if (a3)
  {
    v8 = 0;
    v9 = (_DWORD *)(*a4 + 48);
    v10 = 2 * a3;
    do
    {
      while (1)
      {
        v11 = *(float *)(v7 + 4 * (v8 & 0xFFFFFFFE));
        if (fabsf(v11) != INFINITY && *((_QWORD *)v9 - 5) != *((_QWORD *)v9 - 6))
          break;
        *v9 = 0;
        v9 += 14;
        v8 += 2;
        if (v10 == v8)
          goto LABEL_7;
      }
      *(float *)v9 = v11;
      v9 += 14;
      v8 += 2;
    }
    while (v10 != v8);
  }
LABEL_7:

  return 1;
}

void sub_23953BA1C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_23953BA2C(uint64_t a1, void *a2, void *a3, void *a4, unsigned int a5, unsigned int a6, int a7, _QWORD *a8)
{
  id v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  void *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  int v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  float v28;
  float v29;
  unint64_t v30;
  float *v31;
  _DWORD *v32;
  uint64_t v33;
  float *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  char *v40;
  int v41;
  char *v42;
  unint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  float *v47;
  char *v48;
  float *v49;
  uint64_t v50;
  __int128 v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  char *v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  char *v61;
  int v62;
  int v63;
  char *v64;
  char *i;
  uint64_t v66;
  int v67;
  _QWORD *v69;
  unint64_t v70;
  id v71;
  id v72;
  void **v73;
  _QWORD *v74;
  char **v76;
  uint64_t v77;
  uint64_t v78;
  unsigned int v79;
  id v80;

  v80 = a2;
  v72 = a3;
  v13 = a4;
  v79 = a6;
  v14 = a6;
  v15 = a8[1];
  v16 = 0x6DB6DB6DB6DB6DB7 * ((v15 - *a8) >> 3);
  v70 = v14;
  v71 = v13;
  if (v14 <= v16)
  {
    if (v14 < v16)
    {
      v17 = *a8 + 56 * v14;
      while (v15 != v17)
      {
        v18 = *(void **)(v15 - 32);
        if (v18)
        {
          *(_QWORD *)(v15 - 24) = v18;
          operator delete(v18);
        }
        v19 = *(void **)(v15 - 56);
        if (v19)
        {
          *(_QWORD *)(v15 - 48) = v19;
          operator delete(v19);
        }
        v15 -= 56;
      }
      a8[1] = v17;
    }
  }
  else
  {
    sub_239543294((uint64_t)a8, v14 - v16);
  }
  if (v79 && a5)
  {
    v20 = 0;
    v78 = a5;
    v69 = a8;
    do
    {
      v21 = 0;
      v22 = *a8 + 56 * v20;
      v76 = (char **)(v22 + 32);
      v77 = v22;
      v73 = (void **)(v22 + 24);
      v74 = (_QWORD *)(v22 + 40);
      do
      {
        v26 = v20 + (_DWORD)v21 * v79;
        v27 = objc_msgSend(objc_retainAutorelease(v80), "contents") + 8 * v26;
        v28 = *(float *)(v27 + 4);
        if (v28 == 0.0)
          goto LABEL_19;
        v29 = 0.0 - v28;
        if (v28 >= 0.0)
          v29 = *(float *)(v27 + 4);
        if (v29 <= 0.000001)
          goto LABEL_19;
        if (v28 < -1000000.0)
          break;
        v31 = *(float **)(v77 + 8);
        v30 = *(_QWORD *)(v77 + 16);
        if ((unint64_t)v31 >= v30)
        {
          v34 = *(float **)v77;
          v35 = (uint64_t)v31 - *(_QWORD *)v77;
          v36 = v35 >> 3;
          v37 = (v35 >> 3) + 1;
          if (v37 >> 61)
            sub_2394189F8();
          v38 = v30 - (_QWORD)v34;
          if (v38 >> 2 > v37)
            v37 = v38 >> 2;
          if ((unint64_t)v38 >= 0x7FFFFFFFFFFFFFF8)
            v39 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v39 = v37;
          if (v39 >> 61)
            sub_239418A80();
          v40 = (char *)operator new(8 * v39);
          v41 = *(_DWORD *)(v27 + 4);
          v42 = &v40[8 * v36];
          *(_DWORD *)v42 = *(_DWORD *)v27;
          *((_DWORD *)v42 + 1) = v41;
          if (v31 == v34)
          {
            v44 = &v40[8 * v36];
          }
          else
          {
            v43 = (char *)(v31 - 2) - (char *)v34;
            if (v43 < 0x58)
            {
              v44 = &v40[8 * v36];
              goto LABEL_42;
            }
            v44 = &v40[8 * v36];
            if ((unint64_t)((char *)v31 - v35 - v40) < 0x20)
              goto LABEL_65;
            v45 = (v43 >> 3) + 1;
            v46 = 8 * (v45 & 0x3FFFFFFFFFFFFFFCLL);
            v47 = &v31[v46 / 0xFFFFFFFFFFFFFFFCLL];
            v44 = &v42[-v46];
            v48 = &v40[8 * v36 - 16];
            v49 = v31 - 4;
            v50 = v45 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v51 = *(_OWORD *)v49;
              *((_OWORD *)v48 - 1) = *((_OWORD *)v49 - 1);
              *(_OWORD *)v48 = v51;
              v48 -= 32;
              v49 -= 8;
              v50 -= 4;
            }
            while (v50);
            v31 = v47;
            if (v45 != (v45 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_65:
              do
              {
LABEL_42:
                v52 = *((_QWORD *)v31 - 1);
                v31 -= 2;
                *((_QWORD *)v44 - 1) = v52;
                v44 -= 8;
              }
              while (v31 != v34);
            }
          }
          v32 = v42 + 8;
          v33 = v77;
          *(_QWORD *)v77 = v44;
          *(_QWORD *)(v77 + 8) = v32;
          *(_QWORD *)(v77 + 16) = &v40[8 * v39];
          if (v34)
          {
            operator delete(v34);
            v33 = v77;
          }
          goto LABEL_45;
        }
        *v31 = *(float *)v27;
        v31[1] = v28;
        v32 = v31 + 2;
        v33 = v77;
LABEL_45:
        *(_QWORD *)(v33 + 8) = v32;
        if (a7)
        {
          v53 = objc_msgSend(objc_retainAutorelease(v72), "contents");
          v54 = objc_msgSend(objc_retainAutorelease(v71), "contents");
          v55 = v54;
          v56 = *v76;
          if ((unint64_t)*v76 < *v74)
          {
            v23 = *(_DWORD *)(v53 + 4 * v26);
            v24 = *(_DWORD *)(v54 + 4 * v26);
            *(_DWORD *)v56 = *(_DWORD *)v27;
            *((_DWORD *)v56 + 1) = v23;
            *((_DWORD *)v56 + 2) = v24;
            v25 = v56 + 12;
          }
          else
          {
            v57 = (char *)*v73;
            v58 = 0xAAAAAAAAAAAAAAABLL * ((v56 - (_BYTE *)*v73) >> 2);
            v59 = v58 + 1;
            if (v58 + 1 > 0x1555555555555555)
              sub_2394189F8();
            if (0x5555555555555556 * ((uint64_t)(*v74 - (_QWORD)v57) >> 2) > v59)
              v59 = 0x5555555555555556 * ((uint64_t)(*v74 - (_QWORD)v57) >> 2);
            if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*v74 - (_QWORD)v57) >> 2) >= 0xAAAAAAAAAAAAAAALL)
              v60 = 0x1555555555555555;
            else
              v60 = v59;
            if (v60 > 0x1555555555555555)
              sub_239418A80();
            v61 = (char *)operator new(12 * v60);
            v62 = *(_DWORD *)(v53 + 4 * v26);
            v63 = *(_DWORD *)(v55 + 4 * v26);
            v64 = &v61[12 * v58];
            *(_DWORD *)v64 = *(_DWORD *)v27;
            *((_DWORD *)v64 + 1) = v62;
            *((_DWORD *)v64 + 2) = v63;
            for (i = v64; v56 != v57; *((_DWORD *)i + 2) = v67)
            {
              v66 = *(_QWORD *)(v56 - 12);
              v56 -= 12;
              v67 = *((_DWORD *)v56 + 2);
              *(_QWORD *)(i - 12) = v66;
              i -= 12;
            }
            *v73 = i;
            v25 = v64 + 12;
            *v76 = v64 + 12;
            *v74 = &v61[12 * v60];
            if (v57)
              operator delete(v57);
          }
          *v76 = v25;
        }
LABEL_19:
        ++v21;
      }
      while (v21 != v78);
      ++v20;
      a8 = v69;
    }
    while (v20 != v70);
  }

  return 1;
}

void sub_23953BEC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20)
{

  _Unwind_Resume(a1);
}

void sub_23953BF00(_QWORD *a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;

  v3 = a1[1];
  v4 = 0x6DB6DB6DB6DB6DB7 * ((v3 - *a1) >> 3);
  v5 = a2 >= v4;
  v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    sub_239543294((uint64_t)a1, v6);
  }
  else if (!v5)
  {
    v7 = *a1 + 56 * a2;
    while (v3 != v7)
    {
      v8 = *(void **)(v3 - 32);
      if (v8)
      {
        *(_QWORD *)(v3 - 24) = v8;
        operator delete(v8);
      }
      v9 = *(void **)(v3 - 56);
      if (v9)
      {
        *(_QWORD *)(v3 - 48) = v9;
        operator delete(v9);
      }
      v3 -= 56;
    }
    a1[1] = v7;
  }
}

void sub_23953BFA8(char **a1, unsigned int a2, char a3, uint64_t a4, unint64_t *a5)
{
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  void *v16;
  void *v17;
  _QWORD v18[3];
  _QWORD *v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v9 = a2;
  v10 = operator new(0x20uLL);
  *v10 = &off_250ADD9A8;
  v10[1] = a1;
  v10[2] = a4;
  *((_BYTE *)v10 + 24) = a3;
  v19 = v10;
  sub_2397A376C(a5, v9, v18, 0);
  v11 = v19;
  if (v19 == v18)
  {
    v12 = 4;
    v11 = v18;
  }
  else
  {
    if (!v19)
      goto LABEL_6;
    v12 = 5;
  }
  (*(void (**)(void))(*v11 + 8 * v12))();
LABEL_6:
  v14 = *a1;
  v13 = a1[1];
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (v14)
  {
    if (v13 != v14)
    {
      v15 = v13;
      do
      {
        v17 = (void *)*((_QWORD *)v15 - 4);
        v15 -= 32;
        v16 = v17;
        if (v17)
        {
          *((_QWORD *)v13 - 3) = v16;
          operator delete(v16);
        }
        v13 = v15;
      }
      while (v15 != v14);
    }
    operator delete(v14);
  }
}

void sub_23953C0C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void **sub_23953C0FC(void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  char *v5;
  void *v6;
  void *v7;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      v5 = (char *)a1[1];
      do
      {
        v7 = (void *)*((_QWORD *)v5 - 4);
        v5 -= 32;
        v6 = v7;
        if (v7)
        {
          *((_QWORD *)v3 - 3) = v6;
          operator delete(v6);
        }
        v3 = v5;
      }
      while (v5 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_23953C170(uint64_t **a1, unint64_t *a2, uint64_t a3, char a4)
{
  uint64_t *v4;
  uint64_t *v5;
  char v6;
  uint64_t *v7;
  uint64_t i;
  float v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD v13[3];
  _QWORD *v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v4 = *a1;
  v5 = a1[1];
  if (*a1 != v5)
  {
    v6 = 0;
    v7 = *a1;
    do
    {
      for (i = *v7; i != v7[1]; i += 8)
      {
        v9 = *(float *)(i + 4);
        if (v9 != 0.0)
        {
          if (v9 < 0.0)
            v9 = 0.0 - v9;
          if (v9 > 0.000001)
            v6 = 1;
        }
      }
      v7 += 7;
    }
    while (v7 != v5);
    if ((v6 & 1) != 0)
    {
      v13[0] = &off_250ADD9F0;
      v13[1] = a1;
      v14 = v13;
      sub_2397A376C(a2, 0x6DB6DB6DB6DB6DB7 * (v5 - v4), v13, 0);
      v10 = v14;
      if (v14 == v13)
      {
        v11 = 4;
        v10 = v13;
      }
      else
      {
        if (!v14)
          return 1;
        v11 = 5;
      }
      (*(void (**)(void))(*v10 + 8 * v11))();
      return 1;
    }
  }
  if (a4)
    sub_2394202DC((_QWORD *)(a3 + 176), 7005);
  return 0;
}

void sub_23953C2D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

_QWORD *sub_23953C30C(_QWORD *a1, unint64_t *a2)
{
  unint64_t v3;
  _QWORD *result;
  uint64_t v5;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v3 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(a1[1] - *a1) >> 3);
  v6[0] = &off_250ADDA38;
  v6[1] = a1;
  v7 = v6;
  sub_2397A3340(a2, v3, v6, 0);
  result = v7;
  if (v7 == v6)
  {
    v5 = 4;
    result = v6;
  }
  else
  {
    if (!v7)
      return result;
    v5 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v5))();
}

void sub_23953C3CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t sub_23953C408(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, float *a11, float *a12)
{
  uint64_t v12;
  _QWORD *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t *v23;
  void *v24;
  unsigned __int8 v25;
  unsigned int v26;
  uint64_t v27;
  void *v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  int v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  _QWORD *v45;
  _QWORD *v46;
  char *v47;
  uint64_t *v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t *v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  char *v57;
  uint64_t *v58;
  int64_t v59;
  unint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t *v65;
  uint64_t v66;
  __int128 v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t *v70;
  int64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t v75;
  _BYTE *v76;
  uint64_t *v77;
  unint64_t v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t v81;
  _OWORD *v82;
  uint64_t *v83;
  uint64_t v84;
  __int128 v85;
  uint64_t v86;
  uint64_t *v87;
  uint64_t *v88;
  int64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  unint64_t v93;
  _BYTE *v94;
  uint64_t *v95;
  unint64_t v96;
  uint64_t *v97;
  uint64_t v98;
  uint64_t v99;
  _OWORD *v100;
  uint64_t *v101;
  uint64_t v102;
  __int128 v103;
  uint64_t v104;
  uint64_t *v105;
  uint64_t *v106;
  int64_t v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  unint64_t v111;
  _BYTE *v112;
  uint64_t *v113;
  unint64_t v114;
  uint64_t *v115;
  uint64_t v116;
  uint64_t v117;
  _OWORD *v118;
  uint64_t *v119;
  uint64_t v120;
  __int128 v121;
  uint64_t v122;
  uint64_t *v123;
  uint64_t *v124;
  int64_t v125;
  uint64_t v126;
  unint64_t v127;
  uint64_t v128;
  unint64_t v129;
  _BYTE *v130;
  uint64_t *v131;
  unint64_t v132;
  uint64_t *v133;
  uint64_t v134;
  uint64_t v135;
  _OWORD *v136;
  uint64_t *v137;
  uint64_t v138;
  __int128 v139;
  uint64_t v140;
  uint64_t *v141;
  uint64_t *v142;
  int64_t v143;
  uint64_t v144;
  unint64_t v145;
  uint64_t v146;
  unint64_t v147;
  _BYTE *v148;
  uint64_t *v149;
  int64_t v150;
  unint64_t v151;
  uint64_t *v152;
  uint64_t v153;
  uint64_t v154;
  _OWORD *v155;
  uint64_t *v156;
  uint64_t v157;
  __int128 v158;
  uint64_t v159;
  uint64_t *v160;
  uint64_t *v161;
  int64_t v162;
  uint64_t v163;
  unint64_t v164;
  uint64_t v165;
  unint64_t v166;
  _BYTE *v167;
  uint64_t *v168;
  unint64_t v169;
  uint64_t *v170;
  uint64_t v171;
  uint64_t v172;
  _OWORD *v173;
  uint64_t *v174;
  uint64_t v175;
  __int128 v176;
  uint64_t v177;
  uint64_t *v178;
  uint64_t *v179;
  int64_t v180;
  uint64_t v181;
  unint64_t v182;
  uint64_t v183;
  unint64_t v184;
  _BYTE *v185;
  uint64_t *v186;
  unint64_t v187;
  uint64_t *v188;
  uint64_t v189;
  uint64_t v190;
  _OWORD *v191;
  uint64_t *v192;
  uint64_t v193;
  __int128 v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t *v197;
  uint64_t *v198;
  int64_t v199;
  uint64_t v200;
  unint64_t v201;
  uint64_t v202;
  unint64_t v203;
  _BYTE *v204;
  uint64_t *v205;
  int64_t v206;
  unint64_t v207;
  uint64_t *v208;
  uint64_t v209;
  uint64_t v210;
  _OWORD *v211;
  uint64_t *v212;
  uint64_t v213;
  __int128 v214;
  uint64_t v215;
  uint64_t *v216;
  uint64_t *v217;
  int64_t v218;
  uint64_t v219;
  unint64_t v220;
  uint64_t v221;
  unint64_t v222;
  _BYTE *v223;
  uint64_t *v224;
  int64_t v225;
  unint64_t v226;
  uint64_t *v227;
  uint64_t v228;
  uint64_t v229;
  _OWORD *v230;
  uint64_t *v231;
  uint64_t v232;
  __int128 v233;
  uint64_t v234;
  uint64_t *v235;
  uint64_t *v236;
  int64_t v237;
  uint64_t v238;
  unint64_t v239;
  uint64_t v240;
  unint64_t v241;
  _BYTE *v242;
  uint64_t *v243;
  int64_t v244;
  unint64_t v245;
  uint64_t *v246;
  uint64_t v247;
  uint64_t v248;
  _OWORD *v249;
  uint64_t *v250;
  uint64_t v251;
  __int128 v252;
  uint64_t v253;
  uint64_t *v254;
  uint64_t *v255;
  int64_t v256;
  uint64_t v257;
  unint64_t v258;
  uint64_t v259;
  unint64_t v260;
  _BYTE *v261;
  uint64_t *v262;
  int64_t v263;
  unint64_t v264;
  uint64_t *v265;
  uint64_t v266;
  uint64_t v267;
  _OWORD *v268;
  __int128 *v269;
  uint64_t v270;
  __int128 v271;
  uint64_t v272;
  uint64_t *v273;
  uint64_t *v274;
  int64_t v275;
  uint64_t v276;
  unint64_t v277;
  uint64_t v278;
  unint64_t v279;
  _BYTE *v280;
  uint64_t *v281;
  int64_t v282;
  unint64_t v283;
  uint64_t *v284;
  uint64_t v285;
  uint64_t v286;
  _OWORD *v287;
  __int128 *v288;
  uint64_t v289;
  __int128 v290;
  uint64_t v291;
  uint64_t *v292;
  uint64_t *v293;
  int64_t v294;
  uint64_t v295;
  unint64_t v296;
  uint64_t v297;
  unint64_t v298;
  _BYTE *v299;
  uint64_t *v300;
  int64_t v301;
  unint64_t v302;
  uint64_t *v303;
  uint64_t v304;
  uint64_t v305;
  _OWORD *v306;
  uint64_t *v307;
  uint64_t v308;
  __int128 v309;
  uint64_t v310;
  uint64_t *v311;
  uint64_t *v312;
  int64_t v313;
  uint64_t v314;
  unint64_t v315;
  uint64_t v316;
  unint64_t v317;
  _BYTE *v318;
  uint64_t *v319;
  unint64_t v320;
  uint64_t *v321;
  uint64_t v322;
  uint64_t v323;
  _OWORD *v324;
  uint64_t *v325;
  uint64_t v326;
  __int128 v327;
  uint64_t v328;
  uint64_t v329;
  unint64_t *v330;
  uint64_t *v331;
  int64_t v332;
  uint64_t v333;
  unint64_t v334;
  uint64_t v335;
  unint64_t v336;
  _BYTE *v337;
  uint64_t *v338;
  int64_t v339;
  unint64_t v340;
  uint64_t *v341;
  uint64_t v342;
  uint64_t v343;
  _OWORD *v344;
  uint64_t *v345;
  uint64_t v346;
  __int128 v347;
  uint64_t v348;
  unint64_t *v349;
  unint64_t *v350;
  int64_t v351;
  uint64_t v352;
  unint64_t v353;
  uint64_t v354;
  unint64_t v355;
  _BYTE *v356;
  unint64_t *v357;
  unint64_t v358;
  unint64_t *v359;
  uint64_t v360;
  uint64_t v361;
  _OWORD *v362;
  unint64_t *v363;
  uint64_t v364;
  __int128 v365;
  unint64_t v366;
  uint64_t *v367;
  uint64_t v368;
  uint64_t v369;
  unint64_t *v370;
  int64_t v371;
  uint64_t v372;
  unint64_t v373;
  uint64_t v374;
  unint64_t v375;
  _BYTE *v376;
  unint64_t *v377;
  unint64_t v378;
  unint64_t *v379;
  uint64_t v380;
  uint64_t v381;
  _OWORD *v382;
  unint64_t *v383;
  uint64_t v384;
  __int128 v385;
  unint64_t v386;
  uint64_t *v387;
  uint64_t *v388;
  int64_t v389;
  uint64_t v390;
  unint64_t v391;
  uint64_t v392;
  unint64_t v393;
  _BYTE *v394;
  uint64_t *v395;
  char *v396;
  unint64_t v397;
  uint64_t *v398;
  uint64_t v399;
  uint64_t v400;
  _OWORD *v401;
  uint64_t *v402;
  uint64_t v403;
  __int128 v404;
  uint64_t v405;
  uint64_t *v406;
  uint64_t *v407;
  uint64_t v408;
  int64x2_t *v409;
  uint64_t v410;
  unint64_t v411;
  int8x8_t v412;
  unint64_t v413;
  unint64_t v414;
  uint64_t *v415;
  int64_t v416;
  uint64_t v417;
  unint64_t v418;
  uint64_t v419;
  unint64_t v420;
  _BYTE *v421;
  uint64_t *v422;
  int64_t v423;
  int64x2_t *v424;
  int8x16_t v425;
  unint64_t v426;
  int8x16_t v427;
  int64x2_t v428;
  int64x2_t v429;
  int8x16_t v430;
  int8x16_t v431;
  unint64_t v432;
  unint64_t v433;
  int8x8_t *v434;
  int8x8_t v435;
  int8x8_t v436;
  unint64_t v437;
  uint64_t *v438;
  uint64_t v439;
  uint64_t v440;
  _OWORD *v441;
  uint64_t *v442;
  uint64_t v443;
  __int128 v444;
  uint64_t v445;
  uint64_t *v446;
  uint64_t *v447;
  int64_t v448;
  uint64_t v449;
  unint64_t v450;
  uint64_t v451;
  unint64_t v452;
  _BYTE *v453;
  uint64_t *v454;
  int64_t v455;
  unint64_t v456;
  uint64_t *v457;
  uint64_t v458;
  uint64_t v459;
  _OWORD *v460;
  uint64_t *v461;
  uint64_t v462;
  __int128 v463;
  uint64_t v464;
  void *v465;
  uint64_t v466;
  _QWORD *v467;
  _QWORD *v468;
  _QWORD *v469;
  uint64_t *v470;
  int64_t v471;
  uint64_t v472;
  unint64_t v473;
  uint64_t v474;
  unint64_t v475;
  _BYTE *v476;
  _QWORD *v477;
  void *v478;
  id v479;
  void *v480;
  id v481;
  _QWORD *v482;
  _QWORD *v483;
  _QWORD *v484;
  _QWORD *v485;
  _QWORD *v486;
  _QWORD *v487;
  _QWORD *v488;
  uint64_t v489;
  uint64_t v490;
  void *v491;
  void *v492;
  void *v493;
  void *v494;
  void *v495;
  _QWORD *v496;
  _QWORD *v497;
  _QWORD *v498;
  _QWORD *v499;
  _QWORD *v500;
  _QWORD *v501;
  id v502;
  uint64_t v503;
  unint64_t v504;
  uint64_t v505;
  char *v506;
  unint64_t v507;
  void *v508;
  id v509;
  _QWORD *v510;
  char *v511;
  char *v512;
  void *v513;
  void *v514;
  uint64_t *v515;
  char *v516;
  void *v517;
  unint64_t v518;
  uint64_t *v519;
  uint64_t v520;
  void *v521;
  id v522;
  void *v523;
  id v524;
  _QWORD *v525;
  _QWORD *v526;
  _QWORD *v527;
  _QWORD *v528;
  _QWORD *v529;
  _QWORD *v530;
  _QWORD *v531;
  _QWORD *v532;
  void *v533;
  id v534;
  _QWORD *v535;
  _QWORD *v536;
  void *v537;
  id v538;
  void *v539;
  id v540;
  void *v541;
  id v542;
  void *v543;
  id v544;
  _QWORD *v545;
  _QWORD *v546;
  _QWORD *v547;
  _QWORD *v548;
  _QWORD *v549;
  void *v550;
  id v551;
  _QWORD *v552;
  _QWORD *v553;
  void *v554;
  id v555;
  void *v556;
  id v557;
  _QWORD *v558;
  _QWORD *v559;
  _QWORD *v560;
  _QWORD *v561;
  _QWORD *v562;
  _QWORD *v563;
  _QWORD *v564;
  _QWORD *v565;
  void *v566;
  void *v567;
  unsigned int v568;
  uint64_t v569;
  void *v570;
  void *v571;
  int v572;
  _QWORD *v573;
  _QWORD *v574;
  void *v575;
  char *v576;
  char *v577;
  void *v578;
  char *v579;
  void *v580;
  void *v581;
  _QWORD *v582;
  _QWORD *v583;
  void *v584;
  void *v585;
  _QWORD *v586;
  _QWORD *v587;
  void *v588;
  void *v589;
  _QWORD *v590;
  _QWORD *v591;
  void *v592;
  _QWORD *v594;
  uint64_t v595;
  uint64_t v596;
  uint64_t v597;
  _OWORD *v598;
  uint64_t *v599;
  uint64_t v600;
  __int128 v601;
  unint64_t *p_shared_owners;
  unint64_t v603;
  unint64_t *v604;
  unint64_t v605;
  unint64_t *v606;
  unint64_t v607;
  _QWORD *v608;
  __int128 v609;
  __int128 v610;
  _QWORD *v611;
  uint64_t v612;
  unint64_t *v613;
  unint64_t v614;
  unint64_t *v615;
  unint64_t v616;
  _BYTE *v617;
  _BYTE *v618;
  unint64_t *v619;
  unint64_t v620;
  unint64_t *v621;
  unint64_t v622;
  unint64_t *v623;
  unint64_t v624;
  _QWORD *v625;
  __int128 v626;
  __int128 v627;
  _QWORD *v628;
  uint64_t v629;
  unint64_t *v630;
  unint64_t v631;
  unint64_t *v632;
  unint64_t v633;
  unint64_t *v634;
  unint64_t v635;
  unint64_t *v636;
  unint64_t v637;
  unint64_t *v638;
  unint64_t v639;
  _QWORD *v640;
  __int128 v641;
  __int128 v642;
  _QWORD *v643;
  uint64_t v644;
  std::__shared_weak_count *v645;
  unint64_t *v646;
  unint64_t v647;
  std::__shared_weak_count *v648;
  unint64_t *v649;
  unint64_t v650;
  std::__shared_weak_count *v651;
  unint64_t *v652;
  unint64_t v653;
  _BYTE *v654;
  _BYTE *v655;
  _QWORD *v656;
  _QWORD *v657;
  uint64_t v658;
  float *v659;
  uint64_t v660;
  void *v661;
  void *v662;
  void *v663;
  void *v664;
  int v665;
  void *v666;
  uint64_t v667;
  uint64_t v668;
  uint64_t v669;
  id v670;
  id v671;
  std::__shared_weak_count *v672;
  unint64_t *v673;
  unint64_t v674;
  std::__shared_weak_count *v675;
  unint64_t *v676;
  unint64_t v677;
  std::__shared_weak_count *v678;
  unint64_t *v679;
  unint64_t v680;
  std::__shared_weak_count *v681;
  unint64_t *v682;
  unint64_t v683;
  std::__shared_weak_count *v684;
  unint64_t *v685;
  unint64_t v686;
  std::__shared_weak_count *v687;
  unint64_t *v688;
  unint64_t v689;
  std::__shared_weak_count *v690;
  unint64_t *v691;
  unint64_t v692;
  std::__shared_weak_count *v693;
  unint64_t *v694;
  unint64_t v695;
  std::__shared_weak_count *v696;
  unint64_t *v697;
  unint64_t v698;
  uint64_t v699;
  uint64_t v700;
  uint64_t v701;
  unint64_t v702;
  uint64_t v703;
  unint64_t v704;
  uint64_t v705;
  uint64_t v706;
  uint64_t v707;
  uint64_t *v708;
  uint64_t v709;
  uint64_t v710;
  uint64_t *v711;
  _QWORD *v712;
  unint64_t v713;
  void *v714;
  _BOOL4 v715;
  uint64_t v716;
  uint64_t v717;
  uint64_t v718;
  uint64_t v719;
  uint64_t v720;
  uint64_t v721;
  uint64_t v722;
  void *v723[2];
  char v724;
  char v725;
  int v726;
  _BYTE v727[24];
  __int128 v728;
  __int128 v729;
  _BYTE v730[24];
  __int128 v731;
  __int128 v732;
  _BYTE v733[24];
  __int128 v734;
  __int128 v735;
  __int128 v736;
  std::__shared_weak_count *v737;
  __int128 v738;
  __int128 v739;
  __int128 v740;
  std::__shared_weak_count *v741;
  __int128 v742;
  __int128 v743;
  __int128 v744;
  std::__shared_weak_count *v745;
  __int128 v746;
  __int128 v747;
  void *v748;
  int v749;
  __int128 v750;
  __int128 v751;
  int v752;
  id v753;
  id v754;
  id v755;
  id v756;
  id location;
  id v758;
  id v759;
  id obj;
  id v761;
  id v762;
  id v763;
  id v764;
  id v765;
  id v766;
  id v767;
  id v768;
  void *v769;
  char *v770;
  uint64_t v771;
  id v772;
  id v773;
  id v774;
  id v775;
  id v776;
  id v777;
  id v778;
  id v779;
  id v780;
  id v781;
  id v782;
  id v783;
  id v784;
  id v785;
  id v786;
  id v787;
  void *v788;
  _QWORD *v789;
  unint64_t v790;
  void *v791;
  _QWORD *v792;
  unint64_t v793;
  id v794;
  char v795;
  void *v796;
  void *v797;
  uint64_t *v798;
  unsigned int v799;
  float v800;
  __int128 v801;
  __int128 v802;
  int v803;
  int8x8_t v804;
  uint64_t v805;
  void *v806;
  _BYTE *v807;
  uint64_t v808;
  unsigned int v809;
  char v810;
  BOOL v811;
  int v812;
  int v813;
  char v814;
  unsigned __int8 v815;
  unsigned __int8 v816;
  float *v817[2];
  uint64_t v818;
  uint64_t v819;
  _QWORD v820[3];
  _QWORD *v821;
  _BYTE v822[24];
  _BYTE *v823;
  _QWORD v824[71];
  _BYTE v825[24];
  _BYTE *v826;
  _QWORD v827[71];
  _BYTE v828[24];
  _BYTE *v829;
  _QWORD v830[71];
  _BYTE v831[24];
  _BYTE *v832;
  void *__p;
  void *v834;
  char *v835;
  pthread_mutex_t v836;
  unint64_t v837[47];

  v12 = MEMORY[0x24BDAC7A8](a1);
  v711 = v14;
  v712 = v13;
  v16 = v15;
  v18 = v17;
  v722 = v19;
  v21 = v20;
  v23 = v22;
  v717 = v12;
  v837[44] = *MEMORY[0x24BDAC8D0];
  v818 = a9;
  v819 = a10;
  v817[0] = a11;
  v817[1] = a12;
  v24 = (void *)MEMORY[0x23B83EC40]();
  kdebug_trace();
  v816 = *(_BYTE *)(v16 + 2);
  v25 = *(_BYTE *)(v16 + 1);
  if (v25)
    v25 = *(_QWORD *)(v18 + 24) != 0;
  v815 = v25;
  v814 = (char)a12;
  v26 = *(_DWORD *)(v16 + 16);
  v813 = v26;
  v812 = v26;
  if (v26 >= 0x79)
  {
    v26 = 120;
    v813 = 120;
    v812 = 120;
  }
  v811 = v26 != 0;
  v715 = (a12 | v26) != 0;
  if (!*(_QWORD *)(v722 + 24))
  {
    v42 = 0;
    goto LABEL_720;
  }
  v703 = v18;
  v714 = v24;
  nullsub_4(v21);
  sub_2397A9494(v27);
  v28 = (void *)objc_claimAutoreleasedReturnValue();
  v29 = objc_msgSend(v28, "areBarycentricCoordsSupported") ^ 1;

  v810 = v29;
  v31 = *v23;
  v30 = v23[1];
  v809 = -1431655765 * ((unint64_t)(v23[4] - v23[3]) >> 2);
  v807 = 0;
  v806 = 0;
  v808 = 0;
  sub_2394B5624(v717, (uint64_t)&v806, 1);
  v708 = v23;
  v805 = 0;
  v804 = 0;
  v801 = 0u;
  v802 = 0u;
  v803 = 1065353216;
  sub_2395374D4(v717, (__int32 *)&v805 + 1, (__int32 *)&v805, &v804, &v801);
  v32 = HIDWORD(v805);
  if (HIDWORD(v805))
  {
    v33 = v805;
    if ((_DWORD)v805)
    {
      v800 = 0.0;
      if (v814)
      {
        if (HIDWORD(v805) <= v805)
          v34 = v805;
        else
          v34 = HIDWORD(v805);
        v800 = 512.0 / (float)v34;
      }
      v699 = (uint64_t)(v23 + 3);
      v799 = sub_239548B94(v809);
      v797 = 0;
      v796 = 0;
      v798 = 0;
      v35 = 12 * v809;
      v716 = 8 * v809;
      if (v810)
        v36 = 36 * v809;
      else
        v36 = 0;
      if (v810)
        v37 = 12 * v809;
      else
        v37 = 0;
      v700 = v37;
      v701 = v36;
      if (v816)
        v38 = 4 * v809;
      else
        v38 = 0;
      v707 = v38;
      if (v715)
        v39 = 4 * v809;
      else
        v39 = 0;
      v718 = 4 * v809;
      if (v814)
        v40 = 4 * v809;
      else
        v40 = 0;
      v705 = v40;
      v713 = (v804.i32[0] * v804.i32[1]);
      if (v815)
        v41 = (v804.i32[0] * v804.i32[1]);
      else
        v41 = 0;
      v706 = v41;
      v709 = v21;
      if (v814)
        v704 = 4
             * (unint64_t)(float)(v800 * (float)v804.u32[1])
             * (unint64_t)(float)(v800 * (float)v804.u32[0]);
      else
        v704 = 0;
      v795 = 1;
      v43 = (char *)operator new(8uLL);
      v702 = 0xFFFFFFFC00000004 * ((v30 - v31) >> 2);
      *(_QWORD *)v43 = v702;
      v796 = v43;
      v798 = (uint64_t *)(v43 + 8);
      v44 = operator new(0x10uLL);
      v45 = v44 + 2;
      *v44 = *(_QWORD *)v43;
      v44[1] = v35;
      v796 = v44;
      v798 = v44 + 2;
      operator delete(v43);
      v797 = v44 + 2;
      v46 = operator new(0x20uLL);
      v47 = (char *)(v46 + 2);
      v48 = v46 + 4;
      v46[2] = v35;
      v49 = v46 + 3;
      if (v44 + 2 != v44)
      {
        do
        {
          v50 = *--v45;
          *((_QWORD *)v47 - 1) = v50;
          v47 -= 8;
        }
        while (v45 != v44);
      }
      v796 = v47;
      v797 = v46 + 3;
      v798 = v46 + 4;
      if (v44)
      {
        operator delete(v44);
        v48 = v798;
      }
      v797 = v49;
      if (v49 < v48)
      {
        *v49 = v35;
        v51 = v49 + 1;
        goto LABEL_61;
      }
      v52 = (uint64_t *)v796;
      v53 = ((char *)v49 - (_BYTE *)v796) >> 3;
      v54 = v53 + 1;
      if ((unint64_t)(v53 + 1) >> 61)
        goto LABEL_882;
      v55 = (char *)v48 - (_BYTE *)v796;
      if (v55 >> 2 > v54)
        v54 = v55 >> 2;
      if ((unint64_t)v55 >= 0x7FFFFFFFFFFFFFF8)
        v56 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v56 = v54;
      if (v56)
      {
        if (v56 >> 61)
          goto LABEL_883;
        v57 = (char *)operator new(8 * v56);
        v58 = (uint64_t *)&v57[8 * v53];
        v48 = (uint64_t *)&v57[8 * v56];
        *v58 = v35;
        v51 = v58 + 1;
        v59 = (char *)v49 - (char *)v52;
        if (v49 == v52)
          goto LABEL_59;
      }
      else
      {
        v57 = 0;
        v58 = (uint64_t *)(8 * v53);
        v48 = 0;
        *(_QWORD *)(8 * v53) = v35;
        v51 = (uint64_t *)(8 * v53 + 8);
        v59 = (char *)v49 - (char *)v52;
        if (v49 == v52)
          goto LABEL_59;
      }
      v60 = v59 - 8;
      if (v60 >= 0x18)
      {
        v62 = (v60 >> 3) + 1;
        v63 = 8 * (v62 & 0x3FFFFFFFFFFFFFFCLL);
        v61 = &v49[v63 / 0xFFFFFFFFFFFFFFF8];
        v58 = (uint64_t *)((char *)v58 - v63);
        v64 = &v57[8 * v53 - 16];
        v65 = v49 - 2;
        v66 = v62 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v67 = *(_OWORD *)v65;
          *((_OWORD *)v64 - 1) = *((_OWORD *)v65 - 1);
          *(_OWORD *)v64 = v67;
          v64 -= 32;
          v65 -= 4;
          v66 -= 4;
        }
        while (v66);
        if (v62 == (v62 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_59:
          v796 = v58;
          v797 = v51;
          v798 = v48;
          if (v52)
          {
            operator delete(v52);
            v48 = v798;
          }
LABEL_61:
          v797 = v51;
          if (v51 < v48)
          {
            *v51 = v718;
            v69 = v51 + 1;
            goto LABEL_84;
          }
          v70 = (uint64_t *)v796;
          v71 = (char *)v51 - (_BYTE *)v796;
          v72 = ((char *)v51 - (_BYTE *)v796) >> 3;
          v73 = v72 + 1;
          if ((unint64_t)(v72 + 1) >> 61)
            goto LABEL_882;
          v74 = (char *)v48 - (_BYTE *)v796;
          if (v74 >> 2 > v73)
            v73 = v74 >> 2;
          if ((unint64_t)v74 >= 0x7FFFFFFFFFFFFFF8)
            v75 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v75 = v73;
          if (v75)
          {
            if (v75 >> 61)
              goto LABEL_883;
            v76 = operator new(8 * v75);
          }
          else
          {
            v76 = 0;
          }
          v77 = (uint64_t *)&v76[8 * v72];
          v48 = (uint64_t *)&v76[8 * v75];
          *v77 = v718;
          v69 = v77 + 1;
          if (v51 != v70)
          {
            v78 = (char *)v51 - (char *)v70 - 8;
            if (v78 < 0x58)
            {
              v79 = v51;
              goto LABEL_81;
            }
            if ((unint64_t)((char *)v51 - &v76[v71]) < 0x20)
            {
              v79 = v51;
              do
              {
LABEL_81:
                v86 = *--v79;
                *--v77 = v86;
              }
              while (v79 != v70);
              goto LABEL_82;
            }
            v80 = (v78 >> 3) + 1;
            v81 = 8 * (v80 & 0x3FFFFFFFFFFFFFFCLL);
            v79 = &v51[v81 / 0xFFFFFFFFFFFFFFF8];
            v77 = (uint64_t *)((char *)v77 - v81);
            v82 = &v76[8 * v72 - 16];
            v83 = v51 - 2;
            v84 = v80 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v85 = *(_OWORD *)v83;
              *(v82 - 1) = *((_OWORD *)v83 - 1);
              *v82 = v85;
              v82 -= 2;
              v83 -= 4;
              v84 -= 4;
            }
            while (v84);
            if (v80 != (v80 & 0x3FFFFFFFFFFFFFFCLL))
              goto LABEL_81;
          }
LABEL_82:
          v796 = v77;
          v797 = v69;
          v798 = v48;
          if (v70)
          {
            operator delete(v70);
            v48 = v798;
          }
LABEL_84:
          v797 = v69;
          if (v69 < v48)
          {
            *v69 = v707;
            v87 = v69 + 1;
            goto LABEL_107;
          }
          v88 = (uint64_t *)v796;
          v89 = (char *)v69 - (_BYTE *)v796;
          v90 = ((char *)v69 - (_BYTE *)v796) >> 3;
          v91 = v90 + 1;
          if ((unint64_t)(v90 + 1) >> 61)
            goto LABEL_882;
          v92 = (char *)v48 - (_BYTE *)v796;
          if (v92 >> 2 > v91)
            v91 = v92 >> 2;
          if ((unint64_t)v92 >= 0x7FFFFFFFFFFFFFF8)
            v93 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v93 = v91;
          if (v93)
          {
            if (v93 >> 61)
              goto LABEL_883;
            v94 = operator new(8 * v93);
          }
          else
          {
            v94 = 0;
          }
          v95 = (uint64_t *)&v94[8 * v90];
          v48 = (uint64_t *)&v94[8 * v93];
          *v95 = v707;
          v87 = v95 + 1;
          if (v69 != v88)
          {
            v96 = (char *)v69 - (char *)v88 - 8;
            if (v96 < 0x58)
            {
              v97 = v69;
              goto LABEL_104;
            }
            if ((unint64_t)((char *)v69 - &v94[v89]) < 0x20)
            {
              v97 = v69;
              do
              {
LABEL_104:
                v104 = *--v97;
                *--v95 = v104;
              }
              while (v97 != v88);
              goto LABEL_105;
            }
            v98 = (v96 >> 3) + 1;
            v99 = 8 * (v98 & 0x3FFFFFFFFFFFFFFCLL);
            v97 = &v69[v99 / 0xFFFFFFFFFFFFFFF8];
            v95 = (uint64_t *)((char *)v95 - v99);
            v100 = &v94[8 * v90 - 16];
            v101 = v69 - 2;
            v102 = v98 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v103 = *(_OWORD *)v101;
              *(v100 - 1) = *((_OWORD *)v101 - 1);
              *v100 = v103;
              v100 -= 2;
              v101 -= 4;
              v102 -= 4;
            }
            while (v102);
            if (v98 != (v98 & 0x3FFFFFFFFFFFFFFCLL))
              goto LABEL_104;
          }
LABEL_105:
          v796 = v95;
          v797 = v87;
          v798 = v48;
          if (v88)
          {
            operator delete(v88);
            v48 = v798;
          }
LABEL_107:
          v797 = v87;
          if (v87 < v48)
          {
            *v87 = v718;
            v105 = v87 + 1;
            goto LABEL_130;
          }
          v106 = (uint64_t *)v796;
          v107 = (char *)v87 - (_BYTE *)v796;
          v108 = ((char *)v87 - (_BYTE *)v796) >> 3;
          v109 = v108 + 1;
          if ((unint64_t)(v108 + 1) >> 61)
            goto LABEL_882;
          v110 = (char *)v48 - (_BYTE *)v796;
          if (v110 >> 2 > v109)
            v109 = v110 >> 2;
          if ((unint64_t)v110 >= 0x7FFFFFFFFFFFFFF8)
            v111 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v111 = v109;
          if (v111)
          {
            if (v111 >> 61)
              goto LABEL_883;
            v112 = operator new(8 * v111);
          }
          else
          {
            v112 = 0;
          }
          v113 = (uint64_t *)&v112[8 * v108];
          v48 = (uint64_t *)&v112[8 * v111];
          *v113 = v718;
          v105 = v113 + 1;
          if (v87 != v106)
          {
            v114 = (char *)v87 - (char *)v106 - 8;
            if (v114 < 0x58)
            {
              v115 = v87;
              goto LABEL_127;
            }
            if ((unint64_t)((char *)v87 - &v112[v107]) < 0x20)
            {
              v115 = v87;
              do
              {
LABEL_127:
                v122 = *--v115;
                *--v113 = v122;
              }
              while (v115 != v106);
              goto LABEL_128;
            }
            v116 = (v114 >> 3) + 1;
            v117 = 8 * (v116 & 0x3FFFFFFFFFFFFFFCLL);
            v115 = &v87[v117 / 0xFFFFFFFFFFFFFFF8];
            v113 = (uint64_t *)((char *)v113 - v117);
            v118 = &v112[8 * v108 - 16];
            v119 = v87 - 2;
            v120 = v116 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v121 = *(_OWORD *)v119;
              *(v118 - 1) = *((_OWORD *)v119 - 1);
              *v118 = v121;
              v118 -= 2;
              v119 -= 4;
              v120 -= 4;
            }
            while (v120);
            if (v116 != (v116 & 0x3FFFFFFFFFFFFFFCLL))
              goto LABEL_127;
          }
LABEL_128:
          v796 = v113;
          v797 = v105;
          v798 = v48;
          if (v106)
          {
            operator delete(v106);
            v48 = v798;
          }
LABEL_130:
          v797 = v105;
          if (v105 < v48)
          {
            *v105 = v716;
            v123 = v105 + 1;
            goto LABEL_153;
          }
          v124 = (uint64_t *)v796;
          v125 = (char *)v105 - (_BYTE *)v796;
          v126 = ((char *)v105 - (_BYTE *)v796) >> 3;
          v127 = v126 + 1;
          if ((unint64_t)(v126 + 1) >> 61)
            goto LABEL_882;
          v128 = (char *)v48 - (_BYTE *)v796;
          if (v128 >> 2 > v127)
            v127 = v128 >> 2;
          if ((unint64_t)v128 >= 0x7FFFFFFFFFFFFFF8)
            v129 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v129 = v127;
          if (v129)
          {
            if (v129 >> 61)
              goto LABEL_883;
            v130 = operator new(8 * v129);
          }
          else
          {
            v130 = 0;
          }
          v131 = (uint64_t *)&v130[8 * v126];
          v48 = (uint64_t *)&v130[8 * v129];
          *v131 = v716;
          v123 = v131 + 1;
          if (v105 != v124)
          {
            v132 = (char *)v105 - (char *)v124 - 8;
            if (v132 < 0x58)
            {
              v133 = v105;
              goto LABEL_150;
            }
            if ((unint64_t)((char *)v105 - &v130[v125]) < 0x20)
            {
              v133 = v105;
              do
              {
LABEL_150:
                v140 = *--v133;
                *--v131 = v140;
              }
              while (v133 != v124);
              goto LABEL_151;
            }
            v134 = (v132 >> 3) + 1;
            v135 = 8 * (v134 & 0x3FFFFFFFFFFFFFFCLL);
            v133 = &v105[v135 / 0xFFFFFFFFFFFFFFF8];
            v131 = (uint64_t *)((char *)v131 - v135);
            v136 = &v130[8 * v126 - 16];
            v137 = v105 - 2;
            v138 = v134 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v139 = *(_OWORD *)v137;
              *(v136 - 1) = *((_OWORD *)v137 - 1);
              *v136 = v139;
              v136 -= 2;
              v137 -= 4;
              v138 -= 4;
            }
            while (v138);
            if (v134 != (v134 & 0x3FFFFFFFFFFFFFFCLL))
              goto LABEL_150;
          }
LABEL_151:
          v796 = v131;
          v797 = v123;
          v798 = v48;
          if (v124)
          {
            operator delete(v124);
            v48 = v798;
          }
LABEL_153:
          v797 = v123;
          if (v123 < v48)
          {
            *v123 = v39;
            v141 = v123 + 1;
            goto LABEL_176;
          }
          v142 = (uint64_t *)v796;
          v143 = (char *)v123 - (_BYTE *)v796;
          v144 = ((char *)v123 - (_BYTE *)v796) >> 3;
          v145 = v144 + 1;
          if ((unint64_t)(v144 + 1) >> 61)
            goto LABEL_882;
          v146 = (char *)v48 - (_BYTE *)v796;
          if (v146 >> 2 > v145)
            v145 = v146 >> 2;
          if ((unint64_t)v146 >= 0x7FFFFFFFFFFFFFF8)
            v147 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v147 = v145;
          if (v147)
          {
            if (v147 >> 61)
              goto LABEL_883;
            v148 = operator new(8 * v147);
            v149 = (uint64_t *)&v148[8 * v144];
            v48 = (uint64_t *)&v148[8 * v147];
            *v149 = v39;
            v141 = v149 + 1;
            v150 = (char *)v123 - (char *)v142;
            if (v123 == v142)
              goto LABEL_174;
          }
          else
          {
            v148 = 0;
            v149 = (uint64_t *)(8 * v144);
            v48 = 0;
            *(_QWORD *)(8 * v144) = v39;
            v141 = (uint64_t *)(8 * v144 + 8);
            v150 = (char *)v123 - (char *)v142;
            if (v123 == v142)
              goto LABEL_174;
          }
          v151 = v150 - 8;
          if (v151 >= 0x58)
          {
            if ((unint64_t)((char *)v123 - &v148[v143]) >= 0x20)
            {
              v153 = (v151 >> 3) + 1;
              v154 = 8 * (v153 & 0x3FFFFFFFFFFFFFFCLL);
              v152 = &v123[v154 / 0xFFFFFFFFFFFFFFF8];
              v149 = (uint64_t *)((char *)v149 - v154);
              v155 = &v148[8 * v144 - 16];
              v156 = v123 - 2;
              v157 = v153 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v158 = *(_OWORD *)v156;
                *(v155 - 1) = *((_OWORD *)v156 - 1);
                *v155 = v158;
                v155 -= 2;
                v156 -= 4;
                v157 -= 4;
              }
              while (v157);
              if (v153 == (v153 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_174:
                v796 = v149;
                v797 = v141;
                v798 = v48;
                if (v142)
                {
                  operator delete(v142);
                  v48 = v798;
                }
LABEL_176:
                v797 = v141;
                if (v141 < v48)
                {
                  *v141 = v705;
                  v160 = v141 + 1;
                  goto LABEL_199;
                }
                v161 = (uint64_t *)v796;
                v162 = (char *)v141 - (_BYTE *)v796;
                v163 = ((char *)v141 - (_BYTE *)v796) >> 3;
                v164 = v163 + 1;
                if ((unint64_t)(v163 + 1) >> 61)
                  goto LABEL_882;
                v165 = (char *)v48 - (_BYTE *)v796;
                if (v165 >> 2 > v164)
                  v164 = v165 >> 2;
                if ((unint64_t)v165 >= 0x7FFFFFFFFFFFFFF8)
                  v166 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v166 = v164;
                if (v166)
                {
                  if (v166 >> 61)
                    goto LABEL_883;
                  v167 = operator new(8 * v166);
                }
                else
                {
                  v167 = 0;
                }
                v168 = (uint64_t *)&v167[8 * v163];
                v48 = (uint64_t *)&v167[8 * v166];
                *v168 = v705;
                v160 = v168 + 1;
                if (v141 != v161)
                {
                  v169 = (char *)v141 - (char *)v161 - 8;
                  if (v169 < 0x58)
                  {
                    v170 = v141;
                    goto LABEL_196;
                  }
                  if ((unint64_t)((char *)v141 - &v167[v162]) < 0x20)
                  {
                    v170 = v141;
                    do
                    {
LABEL_196:
                      v177 = *--v170;
                      *--v168 = v177;
                    }
                    while (v170 != v161);
                    goto LABEL_197;
                  }
                  v171 = (v169 >> 3) + 1;
                  v172 = 8 * (v171 & 0x3FFFFFFFFFFFFFFCLL);
                  v170 = &v141[v172 / 0xFFFFFFFFFFFFFFF8];
                  v168 = (uint64_t *)((char *)v168 - v172);
                  v173 = &v167[8 * v163 - 16];
                  v174 = v141 - 2;
                  v175 = v171 & 0x3FFFFFFFFFFFFFFCLL;
                  do
                  {
                    v176 = *(_OWORD *)v174;
                    *(v173 - 1) = *((_OWORD *)v174 - 1);
                    *v173 = v176;
                    v173 -= 2;
                    v174 -= 4;
                    v175 -= 4;
                  }
                  while (v175);
                  if (v171 != (v171 & 0x3FFFFFFFFFFFFFFCLL))
                    goto LABEL_196;
                }
LABEL_197:
                v796 = v168;
                v797 = v160;
                v798 = (uint64_t *)&v167[8 * v166];
                if (v161)
                {
                  operator delete(v161);
                  v48 = v798;
                }
LABEL_199:
                v797 = v160;
                if (v160 < v48)
                {
                  *v160 = v706;
                  v178 = v160 + 1;
                  goto LABEL_222;
                }
                v179 = (uint64_t *)v796;
                v180 = (char *)v160 - (_BYTE *)v796;
                v181 = ((char *)v160 - (_BYTE *)v796) >> 3;
                v182 = v181 + 1;
                if ((unint64_t)(v181 + 1) >> 61)
                  goto LABEL_882;
                v183 = (char *)v48 - (_BYTE *)v796;
                if (v183 >> 2 > v182)
                  v182 = v183 >> 2;
                if ((unint64_t)v183 >= 0x7FFFFFFFFFFFFFF8)
                  v184 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v184 = v182;
                if (v184)
                {
                  if (v184 >> 61)
                    goto LABEL_883;
                  v185 = operator new(8 * v184);
                }
                else
                {
                  v185 = 0;
                }
                v186 = (uint64_t *)&v185[8 * v181];
                v48 = (uint64_t *)&v185[8 * v184];
                *v186 = v706;
                v178 = v186 + 1;
                if (v160 != v179)
                {
                  v187 = (char *)v160 - (char *)v179 - 8;
                  if (v187 < 0x58)
                  {
                    v188 = v160;
                    goto LABEL_219;
                  }
                  if ((unint64_t)((char *)v160 - &v185[v180]) < 0x20)
                  {
                    v188 = v160;
                    do
                    {
LABEL_219:
                      v195 = *--v188;
                      *--v186 = v195;
                    }
                    while (v188 != v179);
                    goto LABEL_220;
                  }
                  v189 = (v187 >> 3) + 1;
                  v190 = 8 * (v189 & 0x3FFFFFFFFFFFFFFCLL);
                  v188 = &v160[v190 / 0xFFFFFFFFFFFFFFF8];
                  v186 = (uint64_t *)((char *)v186 - v190);
                  v191 = &v185[8 * v181 - 16];
                  v192 = v160 - 2;
                  v193 = v189 & 0x3FFFFFFFFFFFFFFCLL;
                  do
                  {
                    v194 = *(_OWORD *)v192;
                    *(v191 - 1) = *((_OWORD *)v192 - 1);
                    *v191 = v194;
                    v191 -= 2;
                    v192 -= 4;
                    v193 -= 4;
                  }
                  while (v193);
                  if (v189 != (v189 & 0x3FFFFFFFFFFFFFFCLL))
                    goto LABEL_219;
                }
LABEL_220:
                v796 = v186;
                v797 = v178;
                v798 = (uint64_t *)&v185[8 * v184];
                if (v179)
                {
                  operator delete(v179);
                  v48 = v798;
                }
LABEL_222:
                v196 = 4 * (v33 * v32);
                v797 = v178;
                if (v178 < v48)
                {
                  *v178 = v196;
                  v197 = v178 + 1;
                  goto LABEL_245;
                }
                v198 = (uint64_t *)v796;
                v199 = (char *)v178 - (_BYTE *)v796;
                v200 = ((char *)v178 - (_BYTE *)v796) >> 3;
                v201 = v200 + 1;
                if ((unint64_t)(v200 + 1) >> 61)
                  goto LABEL_882;
                v202 = (char *)v48 - (_BYTE *)v796;
                if (v202 >> 2 > v201)
                  v201 = v202 >> 2;
                if ((unint64_t)v202 >= 0x7FFFFFFFFFFFFFF8)
                  v203 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v203 = v201;
                if (v203)
                {
                  if (v203 >> 61)
                    goto LABEL_883;
                  v204 = operator new(8 * v203);
                  v205 = (uint64_t *)&v204[8 * v200];
                  v48 = (uint64_t *)&v204[8 * v203];
                  *v205 = v196;
                  v197 = v205 + 1;
                  v206 = (char *)v178 - (char *)v198;
                  if (v178 == v198)
                    goto LABEL_243;
                }
                else
                {
                  v204 = 0;
                  v205 = (uint64_t *)(8 * v200);
                  v48 = 0;
                  *(_QWORD *)(8 * v200) = v196;
                  v197 = (uint64_t *)(8 * v200 + 8);
                  v206 = (char *)v178 - (char *)v198;
                  if (v178 == v198)
                    goto LABEL_243;
                }
                v207 = v206 - 8;
                if (v207 >= 0x58)
                {
                  if ((unint64_t)((char *)v178 - &v204[v199]) >= 0x20)
                  {
                    v209 = (v207 >> 3) + 1;
                    v210 = 8 * (v209 & 0x3FFFFFFFFFFFFFFCLL);
                    v208 = &v178[v210 / 0xFFFFFFFFFFFFFFF8];
                    v205 = (uint64_t *)((char *)v205 - v210);
                    v211 = &v204[8 * v200 - 16];
                    v212 = v178 - 2;
                    v213 = v209 & 0x3FFFFFFFFFFFFFFCLL;
                    do
                    {
                      v214 = *(_OWORD *)v212;
                      *(v211 - 1) = *((_OWORD *)v212 - 1);
                      *v211 = v214;
                      v211 -= 2;
                      v212 -= 4;
                      v213 -= 4;
                    }
                    while (v213);
                    if (v209 == (v209 & 0x3FFFFFFFFFFFFFFCLL))
                    {
LABEL_243:
                      v796 = v205;
                      v797 = v197;
                      v798 = v48;
                      if (v198)
                      {
                        operator delete(v198);
                        v48 = v798;
                      }
LABEL_245:
                      v797 = v197;
                      if (v197 < v48)
                      {
                        *v197 = v196;
                        v216 = v197 + 1;
                        goto LABEL_268;
                      }
                      v217 = (uint64_t *)v796;
                      v218 = (char *)v197 - (_BYTE *)v796;
                      v219 = ((char *)v197 - (_BYTE *)v796) >> 3;
                      v220 = v219 + 1;
                      if ((unint64_t)(v219 + 1) >> 61)
                        goto LABEL_882;
                      v221 = (char *)v48 - (_BYTE *)v796;
                      if (v221 >> 2 > v220)
                        v220 = v221 >> 2;
                      if ((unint64_t)v221 >= 0x7FFFFFFFFFFFFFF8)
                        v222 = 0x1FFFFFFFFFFFFFFFLL;
                      else
                        v222 = v220;
                      if (v222)
                      {
                        if (v222 >> 61)
                          goto LABEL_883;
                        v223 = operator new(8 * v222);
                        v224 = (uint64_t *)&v223[8 * v219];
                        v48 = (uint64_t *)&v223[8 * v222];
                        *v224 = v196;
                        v216 = v224 + 1;
                        v225 = (char *)v197 - (char *)v217;
                        if (v197 == v217)
                          goto LABEL_266;
                      }
                      else
                      {
                        v223 = 0;
                        v224 = (uint64_t *)(8 * v219);
                        v48 = 0;
                        *(_QWORD *)(8 * v219) = v196;
                        v216 = (uint64_t *)(8 * v219 + 8);
                        v225 = (char *)v197 - (char *)v217;
                        if (v197 == v217)
                          goto LABEL_266;
                      }
                      v226 = v225 - 8;
                      if (v226 >= 0x58)
                      {
                        if ((unint64_t)((char *)v197 - &v223[v218]) >= 0x20)
                        {
                          v228 = (v226 >> 3) + 1;
                          v229 = 8 * (v228 & 0x3FFFFFFFFFFFFFFCLL);
                          v227 = &v197[v229 / 0xFFFFFFFFFFFFFFF8];
                          v224 = (uint64_t *)((char *)v224 - v229);
                          v230 = &v223[8 * v219 - 16];
                          v231 = v197 - 2;
                          v232 = v228 & 0x3FFFFFFFFFFFFFFCLL;
                          do
                          {
                            v233 = *(_OWORD *)v231;
                            *(v230 - 1) = *((_OWORD *)v231 - 1);
                            *v230 = v233;
                            v230 -= 2;
                            v231 -= 4;
                            v232 -= 4;
                          }
                          while (v232);
                          if (v228 == (v228 & 0x3FFFFFFFFFFFFFFCLL))
                          {
LABEL_266:
                            v796 = v224;
                            v797 = v216;
                            v798 = v48;
                            if (v217)
                            {
                              operator delete(v217);
                              v48 = v798;
                            }
LABEL_268:
                            v797 = v216;
                            if (v216 < v48)
                            {
                              *v216 = v196;
                              v235 = v216 + 1;
                              goto LABEL_291;
                            }
                            v236 = (uint64_t *)v796;
                            v237 = (char *)v216 - (_BYTE *)v796;
                            v238 = ((char *)v216 - (_BYTE *)v796) >> 3;
                            v239 = v238 + 1;
                            if ((unint64_t)(v238 + 1) >> 61)
                              goto LABEL_882;
                            v240 = (char *)v48 - (_BYTE *)v796;
                            if (v240 >> 2 > v239)
                              v239 = v240 >> 2;
                            if ((unint64_t)v240 >= 0x7FFFFFFFFFFFFFF8)
                              v241 = 0x1FFFFFFFFFFFFFFFLL;
                            else
                              v241 = v239;
                            if (v241)
                            {
                              if (v241 >> 61)
                                goto LABEL_883;
                              v242 = operator new(8 * v241);
                              v243 = (uint64_t *)&v242[8 * v238];
                              v48 = (uint64_t *)&v242[8 * v241];
                              *v243 = v196;
                              v235 = v243 + 1;
                              v244 = (char *)v216 - (char *)v236;
                              if (v216 == v236)
                                goto LABEL_289;
                            }
                            else
                            {
                              v242 = 0;
                              v243 = (uint64_t *)(8 * v238);
                              v48 = 0;
                              *(_QWORD *)(8 * v238) = v196;
                              v235 = (uint64_t *)(8 * v238 + 8);
                              v244 = (char *)v216 - (char *)v236;
                              if (v216 == v236)
                                goto LABEL_289;
                            }
                            v245 = v244 - 8;
                            if (v245 >= 0x58)
                            {
                              if ((unint64_t)((char *)v216 - &v242[v237]) >= 0x20)
                              {
                                v247 = (v245 >> 3) + 1;
                                v248 = 8 * (v247 & 0x3FFFFFFFFFFFFFFCLL);
                                v246 = &v216[v248 / 0xFFFFFFFFFFFFFFF8];
                                v243 = (uint64_t *)((char *)v243 - v248);
                                v249 = &v242[8 * v238 - 16];
                                v250 = v216 - 2;
                                v251 = v247 & 0x3FFFFFFFFFFFFFFCLL;
                                do
                                {
                                  v252 = *(_OWORD *)v250;
                                  *(v249 - 1) = *((_OWORD *)v250 - 1);
                                  *v249 = v252;
                                  v249 -= 2;
                                  v250 -= 4;
                                  v251 -= 4;
                                }
                                while (v251);
                                if (v247 == (v247 & 0x3FFFFFFFFFFFFFFCLL))
                                {
LABEL_289:
                                  v796 = v243;
                                  v797 = v235;
                                  v798 = v48;
                                  if (v236)
                                  {
                                    operator delete(v236);
                                    v48 = v798;
                                  }
LABEL_291:
                                  v797 = v235;
                                  if (v235 < v48)
                                  {
                                    *v235 = 0;
                                    v254 = v235 + 1;
                                    goto LABEL_314;
                                  }
                                  v255 = (uint64_t *)v796;
                                  v256 = (char *)v235 - (_BYTE *)v796;
                                  v257 = ((char *)v235 - (_BYTE *)v796) >> 3;
                                  v258 = v257 + 1;
                                  if ((unint64_t)(v257 + 1) >> 61)
                                    goto LABEL_882;
                                  v259 = (char *)v48 - (_BYTE *)v796;
                                  if (v259 >> 2 > v258)
                                    v258 = v259 >> 2;
                                  if ((unint64_t)v259 >= 0x7FFFFFFFFFFFFFF8)
                                    v260 = 0x1FFFFFFFFFFFFFFFLL;
                                  else
                                    v260 = v258;
                                  if (v260)
                                  {
                                    if (v260 >> 61)
                                      goto LABEL_883;
                                    v261 = operator new(8 * v260);
                                    v262 = (uint64_t *)&v261[8 * v257];
                                    v48 = (uint64_t *)&v261[8 * v260];
                                    *v262 = 0;
                                    v254 = v262 + 1;
                                    v263 = (char *)v235 - (char *)v255;
                                    if (v235 == v255)
                                      goto LABEL_312;
                                  }
                                  else
                                  {
                                    v261 = 0;
                                    v262 = (uint64_t *)(8 * v257);
                                    v48 = 0;
                                    *(_QWORD *)(8 * v257) = 0;
                                    v254 = (uint64_t *)(8 * v257 + 8);
                                    v263 = (char *)v235 - (char *)v255;
                                    if (v235 == v255)
                                      goto LABEL_312;
                                  }
                                  v264 = v263 - 8;
                                  if (v264 >= 0x58)
                                  {
                                    if ((unint64_t)((char *)v235 - &v261[v256]) >= 0x20)
                                    {
                                      v266 = (v264 >> 3) + 1;
                                      v267 = 8 * (v266 & 0x3FFFFFFFFFFFFFFCLL);
                                      v265 = &v235[v267 / 0xFFFFFFFFFFFFFFF8];
                                      v262 = (uint64_t *)((char *)v262 - v267);
                                      v268 = &v261[8 * v257 - 16];
                                      v269 = (__int128 *)(v235 - 2);
                                      v270 = v266 & 0x3FFFFFFFFFFFFFFCLL;
                                      do
                                      {
                                        v271 = *v269;
                                        *(v268 - 1) = *(v269 - 1);
                                        *v268 = v271;
                                        v268 -= 2;
                                        v269 -= 2;
                                        v270 -= 4;
                                      }
                                      while (v270);
                                      if (v266 == (v266 & 0x3FFFFFFFFFFFFFFCLL))
                                      {
LABEL_312:
                                        v796 = v262;
                                        v797 = v254;
                                        v798 = v48;
                                        if (v255)
                                        {
                                          operator delete(v255);
                                          v48 = v798;
                                        }
LABEL_314:
                                        v797 = v254;
                                        if (v254 < v48)
                                        {
                                          *v254 = 0;
                                          v273 = v254 + 1;
                                          goto LABEL_337;
                                        }
                                        v274 = (uint64_t *)v796;
                                        v275 = (char *)v254 - (_BYTE *)v796;
                                        v276 = ((char *)v254 - (_BYTE *)v796) >> 3;
                                        v277 = v276 + 1;
                                        if ((unint64_t)(v276 + 1) >> 61)
                                          goto LABEL_882;
                                        v278 = (char *)v48 - (_BYTE *)v796;
                                        if (v278 >> 2 > v277)
                                          v277 = v278 >> 2;
                                        if ((unint64_t)v278 >= 0x7FFFFFFFFFFFFFF8)
                                          v279 = 0x1FFFFFFFFFFFFFFFLL;
                                        else
                                          v279 = v277;
                                        if (v279)
                                        {
                                          if (v279 >> 61)
                                            goto LABEL_883;
                                          v280 = operator new(8 * v279);
                                          v281 = (uint64_t *)&v280[8 * v276];
                                          v48 = (uint64_t *)&v280[8 * v279];
                                          *v281 = 0;
                                          v273 = v281 + 1;
                                          v282 = (char *)v254 - (char *)v274;
                                          if (v254 == v274)
                                            goto LABEL_335;
                                        }
                                        else
                                        {
                                          v280 = 0;
                                          v281 = (uint64_t *)(8 * v276);
                                          v48 = 0;
                                          *(_QWORD *)(8 * v276) = 0;
                                          v273 = (uint64_t *)(8 * v276 + 8);
                                          v282 = (char *)v254 - (char *)v274;
                                          if (v254 == v274)
                                            goto LABEL_335;
                                        }
                                        v283 = v282 - 8;
                                        if (v283 >= 0x58)
                                        {
                                          if ((unint64_t)((char *)v254 - &v280[v275]) >= 0x20)
                                          {
                                            v285 = (v283 >> 3) + 1;
                                            v286 = 8 * (v285 & 0x3FFFFFFFFFFFFFFCLL);
                                            v284 = &v254[v286 / 0xFFFFFFFFFFFFFFF8];
                                            v281 = (uint64_t *)((char *)v281 - v286);
                                            v287 = &v280[8 * v276 - 16];
                                            v288 = (__int128 *)(v254 - 2);
                                            v289 = v285 & 0x3FFFFFFFFFFFFFFCLL;
                                            do
                                            {
                                              v290 = *v288;
                                              *(v287 - 1) = *(v288 - 1);
                                              *v287 = v290;
                                              v287 -= 2;
                                              v288 -= 2;
                                              v289 -= 4;
                                            }
                                            while (v289);
                                            if (v285 == (v285 & 0x3FFFFFFFFFFFFFFCLL))
                                            {
LABEL_335:
                                              v796 = v281;
                                              v797 = v273;
                                              v798 = v48;
                                              if (v274)
                                              {
                                                operator delete(v274);
                                                v48 = v798;
                                              }
LABEL_337:
                                              v797 = v273;
                                              if (v273 < v48)
                                              {
                                                *v273 = 0;
                                                v292 = v273 + 1;
                                                goto LABEL_360;
                                              }
                                              v293 = (uint64_t *)v796;
                                              v294 = (char *)v273 - (_BYTE *)v796;
                                              v295 = ((char *)v273 - (_BYTE *)v796) >> 3;
                                              v296 = v295 + 1;
                                              if ((unint64_t)(v295 + 1) >> 61)
                                                goto LABEL_882;
                                              v297 = (char *)v48 - (_BYTE *)v796;
                                              if (v297 >> 2 > v296)
                                                v296 = v297 >> 2;
                                              if ((unint64_t)v297 >= 0x7FFFFFFFFFFFFFF8)
                                                v298 = 0x1FFFFFFFFFFFFFFFLL;
                                              else
                                                v298 = v296;
                                              if (v298)
                                              {
                                                if (v298 >> 61)
                                                  goto LABEL_883;
                                                v299 = operator new(8 * v298);
                                                v300 = (uint64_t *)&v299[8 * v295];
                                                v48 = (uint64_t *)&v299[8 * v298];
                                                *v300 = 0;
                                                v292 = v300 + 1;
                                                v301 = (char *)v273 - (char *)v293;
                                                if (v273 == v293)
                                                  goto LABEL_358;
                                              }
                                              else
                                              {
                                                v299 = 0;
                                                v300 = (uint64_t *)(8 * v295);
                                                v48 = 0;
                                                *(_QWORD *)(8 * v295) = 0;
                                                v292 = (uint64_t *)(8 * v295 + 8);
                                                v301 = (char *)v273 - (char *)v293;
                                                if (v273 == v293)
                                                  goto LABEL_358;
                                              }
                                              v302 = v301 - 8;
                                              if (v302 >= 0x58)
                                              {
                                                if ((unint64_t)((char *)v273 - &v299[v294]) >= 0x20)
                                                {
                                                  v304 = (v302 >> 3) + 1;
                                                  v305 = 8 * (v304 & 0x3FFFFFFFFFFFFFFCLL);
                                                  v303 = &v273[v305 / 0xFFFFFFFFFFFFFFF8];
                                                  v300 = (uint64_t *)((char *)v300 - v305);
                                                  v306 = &v299[8 * v295 - 16];
                                                  v307 = v273 - 2;
                                                  v308 = v304 & 0x3FFFFFFFFFFFFFFCLL;
                                                  do
                                                  {
                                                    v309 = *(_OWORD *)v307;
                                                    *(v306 - 1) = *((_OWORD *)v307 - 1);
                                                    *v306 = v309;
                                                    v306 -= 2;
                                                    v307 -= 4;
                                                    v308 -= 4;
                                                  }
                                                  while (v308);
                                                  if (v304 == (v304 & 0x3FFFFFFFFFFFFFFCLL))
                                                  {
LABEL_358:
                                                    v796 = v300;
                                                    v797 = v292;
                                                    v798 = v48;
                                                    if (v293)
                                                    {
                                                      operator delete(v293);
                                                      v48 = v798;
                                                    }
LABEL_360:
                                                    v797 = v292;
                                                    if (v292 < v48)
                                                    {
                                                      *v292 = v716;
                                                      v311 = v292 + 1;
                                                      goto LABEL_383;
                                                    }
                                                    v312 = (uint64_t *)v796;
                                                    v313 = (char *)v292 - (_BYTE *)v796;
                                                    v314 = ((char *)v292 - (_BYTE *)v796) >> 3;
                                                    v315 = v314 + 1;
                                                    if ((unint64_t)(v314 + 1) >> 61)
                                                      goto LABEL_882;
                                                    v316 = (char *)v48 - (_BYTE *)v796;
                                                    if (v316 >> 2 > v315)
                                                      v315 = v316 >> 2;
                                                    if ((unint64_t)v316 >= 0x7FFFFFFFFFFFFFF8)
                                                      v317 = 0x1FFFFFFFFFFFFFFFLL;
                                                    else
                                                      v317 = v315;
                                                    if (v317)
                                                    {
                                                      if (v317 >> 61)
                                                        goto LABEL_883;
                                                      v318 = operator new(8 * v317);
                                                    }
                                                    else
                                                    {
                                                      v318 = 0;
                                                    }
                                                    v319 = (uint64_t *)&v318[8 * v314];
                                                    v48 = (uint64_t *)&v318[8 * v317];
                                                    *v319 = v716;
                                                    v311 = v319 + 1;
                                                    if (v292 != v312)
                                                    {
                                                      v320 = (char *)v292 - (char *)v312 - 8;
                                                      if (v320 < 0x58)
                                                      {
                                                        v321 = v292;
                                                        goto LABEL_380;
                                                      }
                                                      if ((unint64_t)((char *)v292 - &v318[v313]) < 0x20)
                                                      {
                                                        v321 = v292;
                                                        do
                                                        {
LABEL_380:
                                                          v328 = *--v321;
                                                          *--v319 = v328;
                                                        }
                                                        while (v321 != v312);
                                                        goto LABEL_381;
                                                      }
                                                      v322 = (v320 >> 3) + 1;
                                                      v323 = 8 * (v322 & 0x3FFFFFFFFFFFFFFCLL);
                                                      v321 = &v292[v323 / 0xFFFFFFFFFFFFFFF8];
                                                      v319 = (uint64_t *)((char *)v319 - v323);
                                                      v324 = &v318[8 * v314 - 16];
                                                      v325 = v292 - 2;
                                                      v326 = v322 & 0x3FFFFFFFFFFFFFFCLL;
                                                      do
                                                      {
                                                        v327 = *(_OWORD *)v325;
                                                        *(v324 - 1) = *((_OWORD *)v325 - 1);
                                                        *v324 = v327;
                                                        v324 -= 2;
                                                        v325 -= 4;
                                                        v326 -= 4;
                                                      }
                                                      while (v326);
                                                      if (v322 != (v322 & 0x3FFFFFFFFFFFFFFCLL))
                                                        goto LABEL_380;
                                                    }
LABEL_381:
                                                    v796 = v319;
                                                    v797 = v311;
                                                    v798 = v48;
                                                    if (v312)
                                                    {
                                                      operator delete(v312);
                                                      v48 = v798;
                                                    }
LABEL_383:
                                                    v329 = 4 * v713;
                                                    v797 = v311;
                                                    if (v311 < v48)
                                                    {
                                                      *v311 = v329;
                                                      v330 = (unint64_t *)(v311 + 1);
                                                      goto LABEL_406;
                                                    }
                                                    v331 = (uint64_t *)v796;
                                                    v332 = (char *)v311 - (_BYTE *)v796;
                                                    v333 = ((char *)v311 - (_BYTE *)v796) >> 3;
                                                    v334 = v333 + 1;
                                                    if ((unint64_t)(v333 + 1) >> 61)
                                                      goto LABEL_882;
                                                    v335 = (char *)v48 - (_BYTE *)v796;
                                                    if (v335 >> 2 > v334)
                                                      v334 = v335 >> 2;
                                                    if ((unint64_t)v335 >= 0x7FFFFFFFFFFFFFF8)
                                                      v336 = 0x1FFFFFFFFFFFFFFFLL;
                                                    else
                                                      v336 = v334;
                                                    if (v336)
                                                    {
                                                      if (v336 >> 61)
                                                        goto LABEL_883;
                                                      v337 = operator new(8 * v336);
                                                      v338 = (uint64_t *)&v337[8 * v333];
                                                      v48 = (uint64_t *)&v337[8 * v336];
                                                      *v338 = v329;
                                                      v330 = (unint64_t *)(v338 + 1);
                                                      v339 = (char *)v311 - (char *)v331;
                                                      if (v311 == v331)
                                                        goto LABEL_404;
                                                    }
                                                    else
                                                    {
                                                      v337 = 0;
                                                      v338 = (uint64_t *)(8 * v333);
                                                      v48 = 0;
                                                      *(_QWORD *)(8 * v333) = v329;
                                                      v330 = (unint64_t *)(8 * v333 + 8);
                                                      v339 = (char *)v311 - (char *)v331;
                                                      if (v311 == v331)
                                                        goto LABEL_404;
                                                    }
                                                    v340 = v339 - 8;
                                                    if (v340 >= 0x58)
                                                    {
                                                      if ((unint64_t)((char *)v311 - &v337[v332]) >= 0x20)
                                                      {
                                                        v342 = (v340 >> 3) + 1;
                                                        v343 = 8 * (v342 & 0x3FFFFFFFFFFFFFFCLL);
                                                        v341 = &v311[v343 / 0xFFFFFFFFFFFFFFF8];
                                                        v338 = (uint64_t *)((char *)v338 - v343);
                                                        v344 = &v337[8 * v333 - 16];
                                                        v345 = v311 - 2;
                                                        v346 = v342 & 0x3FFFFFFFFFFFFFFCLL;
                                                        do
                                                        {
                                                          v347 = *(_OWORD *)v345;
                                                          *(v344 - 1) = *((_OWORD *)v345 - 1);
                                                          *v344 = v347;
                                                          v344 -= 2;
                                                          v345 -= 4;
                                                          v346 -= 4;
                                                        }
                                                        while (v346);
                                                        if (v342 == (v342 & 0x3FFFFFFFFFFFFFFCLL))
                                                        {
LABEL_404:
                                                          v796 = v338;
                                                          v797 = v330;
                                                          v798 = v48;
                                                          if (v331)
                                                          {
                                                            operator delete(v331);
                                                            v48 = v798;
                                                          }
LABEL_406:
                                                          v797 = v330;
                                                          if (v330 < (unint64_t *)v48)
                                                          {
                                                            *v330 = v713;
                                                            v349 = v330 + 1;
                                                            goto LABEL_429;
                                                          }
                                                          v350 = (unint64_t *)v796;
                                                          v351 = (char *)v330 - (_BYTE *)v796;
                                                          v352 = ((char *)v330 - (_BYTE *)v796) >> 3;
                                                          v353 = v352 + 1;
                                                          if ((unint64_t)(v352 + 1) >> 61)
                                                            goto LABEL_882;
                                                          v354 = (char *)v48 - (_BYTE *)v796;
                                                          if (v354 >> 2 > v353)
                                                            v353 = v354 >> 2;
                                                          if ((unint64_t)v354 >= 0x7FFFFFFFFFFFFFF8)
                                                            v355 = 0x1FFFFFFFFFFFFFFFLL;
                                                          else
                                                            v355 = v353;
                                                          if (v355)
                                                          {
                                                            if (v355 >> 61)
                                                              goto LABEL_883;
                                                            v356 = operator new(8 * v355);
                                                          }
                                                          else
                                                          {
                                                            v356 = 0;
                                                          }
                                                          v357 = (unint64_t *)&v356[8 * v352];
                                                          v48 = (uint64_t *)&v356[8 * v355];
                                                          *v357 = v713;
                                                          v349 = v357 + 1;
                                                          if (v330 != v350)
                                                          {
                                                            v358 = (char *)v330 - (char *)v350 - 8;
                                                            if (v358 < 0x58)
                                                            {
                                                              v359 = v330;
                                                              goto LABEL_426;
                                                            }
                                                            if ((unint64_t)((char *)v330 - &v356[v351]) < 0x20)
                                                            {
                                                              v359 = v330;
                                                              do
                                                              {
LABEL_426:
                                                                v366 = *--v359;
                                                                *--v357 = v366;
                                                              }
                                                              while (v359 != v350);
                                                              goto LABEL_427;
                                                            }
                                                            v360 = (v358 >> 3) + 1;
                                                            v361 = 8 * (v360 & 0x3FFFFFFFFFFFFFFCLL);
                                                            v359 = &v330[v361 / 0xFFFFFFFFFFFFFFF8];
                                                            v357 = (unint64_t *)((char *)v357 - v361);
                                                            v362 = &v356[8 * v352 - 16];
                                                            v363 = v330 - 2;
                                                            v364 = v360 & 0x3FFFFFFFFFFFFFFCLL;
                                                            do
                                                            {
                                                              v365 = *(_OWORD *)v363;
                                                              *(v362 - 1) = *((_OWORD *)v363 - 1);
                                                              *v362 = v365;
                                                              v362 -= 2;
                                                              v363 -= 4;
                                                              v364 -= 4;
                                                            }
                                                            while (v364);
                                                            if (v360 != (v360 & 0x3FFFFFFFFFFFFFFCLL))
                                                              goto LABEL_426;
                                                          }
LABEL_427:
                                                          v796 = v357;
                                                          v797 = v349;
                                                          v798 = v48;
                                                          if (v350)
                                                          {
                                                            operator delete(v350);
                                                            v48 = v798;
                                                          }
LABEL_429:
                                                          v797 = v349;
                                                          if (v349 < (unint64_t *)v48)
                                                          {
                                                            *v349 = v704;
                                                            v367 = (uint64_t *)(v349 + 1);
                                                            v368 = v709;
                                                            v369 = v718;
                                                            goto LABEL_453;
                                                          }
                                                          v370 = (unint64_t *)v796;
                                                          v371 = (char *)v349 - (_BYTE *)v796;
                                                          v372 = ((char *)v349 - (_BYTE *)v796) >> 3;
                                                          v373 = v372 + 1;
                                                          if ((unint64_t)(v372 + 1) >> 61)
                                                            goto LABEL_882;
                                                          v374 = (char *)v48 - (_BYTE *)v796;
                                                          if (v374 >> 2 > v373)
                                                            v373 = v374 >> 2;
                                                          if ((unint64_t)v374 >= 0x7FFFFFFFFFFFFFF8)
                                                            v375 = 0x1FFFFFFFFFFFFFFFLL;
                                                          else
                                                            v375 = v373;
                                                          if (v375)
                                                          {
                                                            if (v375 >> 61)
                                                              goto LABEL_883;
                                                            v376 = operator new(8 * v375);
                                                          }
                                                          else
                                                          {
                                                            v376 = 0;
                                                          }
                                                          v377 = (unint64_t *)&v376[8 * v372];
                                                          v48 = (uint64_t *)&v376[8 * v375];
                                                          *v377 = v704;
                                                          v367 = (uint64_t *)(v377 + 1);
                                                          if (v349 == v370)
                                                          {
                                                            v368 = v709;
                                                            v369 = v718;
                                                            goto LABEL_451;
                                                          }
                                                          v378 = (char *)v349 - (char *)v370 - 8;
                                                          v368 = v709;
                                                          v369 = v718;
                                                          if (v378 >= 0x58)
                                                          {
                                                            if ((unint64_t)((char *)v349 - &v376[v371]) >= 0x20)
                                                            {
                                                              v380 = (v378 >> 3) + 1;
                                                              v381 = 8 * (v380 & 0x3FFFFFFFFFFFFFFCLL);
                                                              v379 = &v349[v381 / 0xFFFFFFFFFFFFFFF8];
                                                              v377 = (unint64_t *)((char *)v377 - v381);
                                                              v382 = &v376[8 * v372 - 16];
                                                              v383 = v349 - 2;
                                                              v384 = v380 & 0x3FFFFFFFFFFFFFFCLL;
                                                              do
                                                              {
                                                                v385 = *(_OWORD *)v383;
                                                                *(v382 - 1) = *((_OWORD *)v383 - 1);
                                                                *v382 = v385;
                                                                v382 -= 2;
                                                                v383 -= 4;
                                                                v384 -= 4;
                                                              }
                                                              while (v384);
                                                              if (v380 == (v380 & 0x3FFFFFFFFFFFFFFCLL))
                                                              {
LABEL_451:
                                                                v796 = v377;
                                                                v797 = v367;
                                                                v798 = v48;
                                                                if (v370)
                                                                {
                                                                  operator delete(v370);
                                                                  v48 = v798;
                                                                }
LABEL_453:
                                                                v797 = v367;
                                                                if (v367 < v48)
                                                                {
                                                                  *v367 = v369;
                                                                  v387 = v367 + 1;
                                                                  goto LABEL_476;
                                                                }
                                                                v388 = (uint64_t *)v796;
                                                                v389 = (char *)v367 - (_BYTE *)v796;
                                                                v390 = ((char *)v367 - (_BYTE *)v796) >> 3;
                                                                v391 = v390 + 1;
                                                                if (!((unint64_t)(v390 + 1) >> 61))
                                                                {
                                                                  v392 = (char *)v48 - (_BYTE *)v796;
                                                                  if (v392 >> 2 > v391)
                                                                    v391 = v392 >> 2;
                                                                  if ((unint64_t)v392 >= 0x7FFFFFFFFFFFFFF8)
                                                                    v393 = 0x1FFFFFFFFFFFFFFFLL;
                                                                  else
                                                                    v393 = v391;
                                                                  if (!v393)
                                                                  {
                                                                    v394 = 0;
LABEL_465:
                                                                    v395 = (uint64_t *)&v394[8 * v390];
                                                                    v396 = &v394[8 * v393];
                                                                    v369 = v718;
                                                                    *v395 = v718;
                                                                    v387 = v395 + 1;
                                                                    v368 = v709;
                                                                    if (v367 == v388)
                                                                      goto LABEL_474;
                                                                    v397 = (char *)v367 - (char *)v388 - 8;
                                                                    if (v397 >= 0x58)
                                                                    {
                                                                      if ((unint64_t)((char *)v367 - &v394[v389]) >= 0x20)
                                                                      {
                                                                        v399 = (v397 >> 3) + 1;
                                                                        v400 = 8 * (v399 & 0x3FFFFFFFFFFFFFFCLL);
                                                                        v398 = &v367[v400 / 0xFFFFFFFFFFFFFFF8];
                                                                        v395 = (uint64_t *)((char *)v395 - v400);
                                                                        v401 = &v394[8 * v390 - 16];
                                                                        v402 = v367 - 2;
                                                                        v403 = v399 & 0x3FFFFFFFFFFFFFFCLL;
                                                                        do
                                                                        {
                                                                          v404 = *(_OWORD *)v402;
                                                                          *(v401 - 1) = *((_OWORD *)v402 - 1);
                                                                          *v401 = v404;
                                                                          v401 -= 2;
                                                                          v402 -= 4;
                                                                          v403 -= 4;
                                                                        }
                                                                        while (v403);
                                                                        if (v399 == (v399 & 0x3FFFFFFFFFFFFFFCLL))
                                                                        {
LABEL_474:
                                                                          v796 = v395;
                                                                          v797 = v387;
                                                                          v798 = (uint64_t *)v396;
                                                                          if (v388)
                                                                            operator delete(v388);
LABEL_476:
                                                                          v797 = v387;
                                                                          if (!v816)
                                                                          {
                                                                            v408 = 0;
                                                                            v710 = 0;
                                                                            v369 = 0;
                                                                            v409 = (int64x2_t *)v796;
                                                                            v410 = (char *)v387 - (_BYTE *)v796;
                                                                            if (v387 == v796)
                                                                            {
LABEL_538:
                                                                              v413 = 0;
                                                                              v412 = 0;
                                                                              goto LABEL_539;
                                                                            }
LABEL_480:
                                                                            v411 = v410 >> 3;
                                                                            if (v411 <= 1)
                                                                              v411 = 1;
                                                                            if (v411 >= 4)
                                                                            {
                                                                              v414 = v411 & 0xFFFFFFFFFFFFFFFCLL;
                                                                              v424 = v409 + 1;
                                                                              v425 = 0uLL;
                                                                              v426 = v411 & 0xFFFFFFFFFFFFFFFCLL;
                                                                              v427 = 0uLL;
                                                                              v428 = 0uLL;
                                                                              v429 = 0uLL;
                                                                              do
                                                                              {
                                                                                v430 = (int8x16_t)v424[-1];
                                                                                v428 = vaddq_s64((int64x2_t)v430, v428);
                                                                                v429 = vaddq_s64(*v424, v429);
                                                                                v425 = vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v430, (uint64x2_t)v425), v430, v425);
                                                                                v427 = vbslq_s8((int8x16_t)vcgtq_u64(*(uint64x2_t *)v424, (uint64x2_t)v427), *(int8x16_t *)v424, v427);
                                                                                v424 += 2;
                                                                                v426 -= 4;
                                                                              }
                                                                              while (v426);
                                                                              v413 = vaddvq_s64(vaddq_s64(v429, v428));
                                                                              v431 = vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v425, (uint64x2_t)v427), v425, v427);
                                                                              v432 = vextq_s8(v431, v431, 8uLL).u64[0];
                                                                              v412 = vbsl_s8((int8x8_t)vcgtd_u64(v431.u64[0], v432), *(int8x8_t *)v431.i8, (int8x8_t)v432);
                                                                              if (v411 == v414)
                                                                                goto LABEL_539;
                                                                            }
                                                                            else
                                                                            {
                                                                              v412 = 0;
                                                                              v413 = 0;
                                                                              v414 = 0;
                                                                            }
                                                                            v433 = v411 - v414;
                                                                            v434 = (int8x8_t *)v409 + v414;
                                                                            do
                                                                            {
                                                                              v436 = *v434++;
                                                                              v435 = v436;
                                                                              v413 += *(_QWORD *)&v436;
                                                                              if (*(_QWORD *)&v436 > *(_QWORD *)&v412)
                                                                                v412 = v435;
                                                                              --v433;
                                                                            }
                                                                            while (v433);
LABEL_539:
                                                                            nullsub_4(v368);
                                                                            sub_2397A969C();
                                                                            if (HIDWORD(*(_QWORD *)&v412))
                                                                            {
                                                                              v42 = 0;
LABEL_712:
                                                                              if (v796)
                                                                              {
                                                                                v797 = v796;
                                                                                operator delete(v796);
                                                                              }
                                                                              goto LABEL_714;
                                                                            }
                                                                            nullsub_4(v368);
                                                                            sub_2397A9494(v466);
                                                                            v794 = (id)objc_claimAutoreleasedReturnValue();
                                                                            v792 = 0;
                                                                            v791 = 0;
                                                                            v793 = 0;
                                                                            v789 = 0;
                                                                            v788 = 0;
                                                                            v790 = 0;
                                                                            v787 = (id)objc_msgSend(v794, "newBufferWithLength:options:", 64, 0);
                                                                            v786 = (id)objc_msgSend(v794, "newBufferWithLength:options:", v702, 0);
                                                                            v785 = (id)objc_msgSend(v794, "newBufferWithLength:options:", v35, 0);
                                                                            v784 = (id)objc_msgSend(v794, "newBufferWithLength:options:", v35, 0);
                                                                            v783 = (id)objc_msgSend(v794, "newBufferWithLength:options:", v35, 0);
                                                                            v477 = sub_239516238(&v791, &v787);
                                                                            v792 = v477;
                                                                            if ((unint64_t)v477 < v793)
                                                                            {
                                                                              *v477 = v786;
                                                                              v467 = v477 + 1;
                                                                              v792 = v467;
                                                                              if ((unint64_t)v467 >= v793)
                                                                                goto LABEL_558;
                                                                            }
                                                                            else
                                                                            {
                                                                              v467 = sub_239516238(&v791, &v786);
                                                                              v792 = v467;
                                                                              if ((unint64_t)v467 >= v793)
                                                                              {
LABEL_558:
                                                                                v468 = sub_239516238(&v791, &v785);
                                                                                v792 = v468;
                                                                                if ((unint64_t)v468 >= v793)
                                                                                {
LABEL_559:
                                                                                  v469 = sub_239516238(&v791, &v784);
                                                                                  v792 = v469;
                                                                                  if ((unint64_t)v469 >= v793)
                                                                                  {
LABEL_560:
                                                                                    v792 = sub_239516238(&v791, &v783);
                                                                                    v782 = 0;
                                                                                    v781 = 0;
                                                                                    if (!v810)
                                                                                      goto LABEL_567;
                                                                                    goto LABEL_561;
                                                                                  }
LABEL_545:
                                                                                  *v469 = v783;
                                                                                  v792 = v469 + 1;
                                                                                  v782 = 0;
                                                                                  v781 = 0;
                                                                                  if (!v810)
                                                                                  {
LABEL_567:
                                                                                    v780 = (id)objc_msgSend(v794, "newBufferWithLength:options:", v718, 0);
                                                                                    v779 = (id)objc_msgSend(v794, "newBufferWithLength:options:", v718, 0);
                                                                                    v778 = (id)objc_msgSend(v794, "newBufferWithLength:options:", v716, 0);
                                                                                    v485 = v792;
                                                                                    if ((unint64_t)v792 >= v793)
                                                                                    {
                                                                                      v486 = sub_239516238(&v791, &v780);
                                                                                      v792 = v486;
                                                                                      if ((unint64_t)v486 < v793)
                                                                                      {
LABEL_569:
                                                                                        *v486 = v779;
                                                                                        v487 = v486 + 1;
                                                                                        v792 = v487;
                                                                                        if ((unint64_t)v487 < v793)
                                                                                        {
LABEL_570:
                                                                                          *v487 = v778;
                                                                                          v488 = v487 + 1;
                                                                                          goto LABEL_574;
                                                                                        }
LABEL_573:
                                                                                        v488 = sub_239516238(&v791, &v778);
LABEL_574:
                                                                                        v792 = v488;
                                                                                        v489 = HIDWORD(v805);
                                                                                        v490 = v805;
                                                                                        objc_msgSend(MEMORY[0x24BDDD740], "texture2DDescriptorWithPixelFormat:width:height:mipmapped:", 53, HIDWORD(v805), v805, 0);
                                                                                        v491 = (void *)objc_claimAutoreleasedReturnValue();
                                                                                        objc_msgSend(v491, "setUsage:", 5);
                                                                                        v777 = (id)objc_msgSend(v794, "newTextureWithDescriptor:", v491);

                                                                                        objc_msgSend(MEMORY[0x24BDDD740], "texture2DDescriptorWithPixelFormat:width:height:mipmapped:", 55, v489, v490, 0);
                                                                                        v492 = (void *)objc_claimAutoreleasedReturnValue();
                                                                                        objc_msgSend(v492, "setUsage:", 5);
                                                                                        v776 = (id)objc_msgSend(v794, "newTextureWithDescriptor:", v492);

                                                                                        objc_msgSend(MEMORY[0x24BDDD740], "texture2DDescriptorWithPixelFormat:width:height:mipmapped:", 252, v489, v490, 0);
                                                                                        v493 = (void *)objc_claimAutoreleasedReturnValue();
                                                                                        objc_msgSend(v493, "setStorageMode:", 2);
                                                                                        objc_msgSend(v493, "setUsage:", 4);
                                                                                        v775 = (id)objc_msgSend(v794, "newTextureWithDescriptor:", v493);

                                                                                        objc_msgSend(MEMORY[0x24BDDD740], "texture2DDescriptorWithPixelFormat:width:height:mipmapped:", 13, 1, 1, 0);
                                                                                        v494 = (void *)objc_claimAutoreleasedReturnValue();
                                                                                        objc_msgSend(v494, "setStorageMode:", 2);
                                                                                        objc_msgSend(v494, "setUsage:", 4);
                                                                                        v774 = (id)objc_msgSend(v794, "newTextureWithDescriptor:", v494);

                                                                                        objc_msgSend(MEMORY[0x24BDDD740], "texture2DDescriptorWithPixelFormat:width:height:mipmapped:", 10, v489, v490, 1);
                                                                                        v495 = (void *)objc_claimAutoreleasedReturnValue();
                                                                                        objc_msgSend(v495, "setUsage:", 7);
                                                                                        objc_msgSend(v495, "setStorageMode:", 0);
                                                                                        v773 = (id)objc_msgSend(v794, "newTextureWithDescriptor:", v495);

                                                                                        v496 = v789;
                                                                                        if ((unint64_t)v789 >= v790)
                                                                                        {
                                                                                          v497 = sub_239516238(&v788, &v777);
                                                                                          v789 = v497;
                                                                                          if ((unint64_t)v497 < v790)
                                                                                          {
LABEL_576:
                                                                                            *v497 = v776;
                                                                                            v498 = v497 + 1;
                                                                                            v789 = v498;
                                                                                            if ((unint64_t)v498 < v790)
                                                                                              goto LABEL_577;
                                                                                            goto LABEL_582;
                                                                                          }
                                                                                        }
                                                                                        else
                                                                                        {
                                                                                          *v496 = v777;
                                                                                          v497 = v496 + 1;
                                                                                          v789 = v497;
                                                                                          if ((unint64_t)v497 < v790)
                                                                                            goto LABEL_576;
                                                                                        }
                                                                                        v498 = sub_239516238(&v788, &v776);
                                                                                        v789 = v498;
                                                                                        if ((unint64_t)v498 < v790)
                                                                                        {
LABEL_577:
                                                                                          *v498 = v775;
                                                                                          v499 = v498 + 1;
                                                                                          v789 = v499;
                                                                                          if ((unint64_t)v499 < v790)
                                                                                            goto LABEL_578;
                                                                                          goto LABEL_583;
                                                                                        }
LABEL_582:
                                                                                        v499 = sub_239516238(&v788, &v775);
                                                                                        v789 = v499;
                                                                                        if ((unint64_t)v499 < v790)
                                                                                        {
LABEL_578:
                                                                                          *v499 = v773;
                                                                                          v500 = v499 + 1;
                                                                                          v789 = v500;
                                                                                          if ((unint64_t)v500 < v790)
                                                                                          {
LABEL_579:
                                                                                            *v500 = v774;
                                                                                            v501 = v500 + 1;
                                                                                            goto LABEL_585;
                                                                                          }
LABEL_584:
                                                                                          v501 = sub_239516238(&v788, &v774);
LABEL_585:
                                                                                          v789 = v501;
                                                                                          v502 = objc_alloc_init(MEMORY[0x24BDDD590]);
                                                                                          objc_msgSend(v502, "setDepthCompareFunction:", 1);
                                                                                          objc_msgSend(v502, "setDepthWriteEnabled:", 1);
                                                                                          v772 = (id)objc_msgSend(v794, "newDepthStencilStateWithDescriptor:", v502);

                                                                                          v770 = 0;
                                                                                          v769 = 0;
                                                                                          v771 = 0;
                                                                                          v768 = v787;
                                                                                          v767 = v768;
                                                                                          v766 = v787;
                                                                                          if (v795)
                                                                                          {
                                                                                            v503 = v408;
                                                                                            v504 = v809;
                                                                                            v505 = v799;
                                                                                            v835 = 0;
                                                                                            __p = 0;
                                                                                            v834 = 0;
                                                                                            if (v799)
                                                                                            {
                                                                                              __p = operator new(16 * v799);
                                                                                              v834 = __p;
                                                                                              v835 = (char *)__p + 16 * v505;
                                                                                            }
                                                                                            v506 = v770;
                                                                                            v507 = (v770 - (_BYTE *)v769) >> 5;
                                                                                            if (v504 <= v507)
                                                                                            {
                                                                                              v408 = v503;
                                                                                              if (v504 < v507)
                                                                                              {
                                                                                                v511 = (char *)v769 + 32 * v504;
                                                                                                if (v770 != v511)
                                                                                                {
                                                                                                  v512 = v770;
                                                                                                  do
                                                                                                  {
                                                                                                    v514 = (void *)*((_QWORD *)v512 - 4);
                                                                                                    v512 -= 32;
                                                                                                    v513 = v514;
                                                                                                    if (v514)
                                                                                                    {
                                                                                                      *((_QWORD *)v506 - 3) = v513;
                                                                                                      operator delete(v513);
                                                                                                    }
                                                                                                    v506 = v512;
                                                                                                  }
                                                                                                  while (v512 != v511);
                                                                                                }
                                                                                                v770 = v511;
                                                                                                v408 = v503;
                                                                                              }
                                                                                            }
                                                                                            else
                                                                                            {
                                                                                              sub_23954501C((char **)&v769, v504 - v507, (uint64_t)&__p);
                                                                                              v408 = v503;
                                                                                            }
                                                                                            if (__p)
                                                                                            {
                                                                                              v834 = __p;
                                                                                              operator delete(__p);
                                                                                            }
                                                                                          }
                                                                                          else
                                                                                          {
                                                                                            v508 = (void *)objc_msgSend(v794, "newBufferWithLength:options:", 0, 0);
                                                                                            v509 = v768;
                                                                                            v768 = v508;

                                                                                            v510 = v792;
                                                                                            if ((unint64_t)v792 >= v793)
                                                                                            {
                                                                                              v792 = sub_239516238(&v791, &v768);
                                                                                              if (!v816)
                                                                                                goto LABEL_622;
                                                                                            }
                                                                                            else
                                                                                            {
                                                                                              *v510 = v768;
                                                                                              v792 = v510 + 1;
                                                                                              if (!v816)
                                                                                                goto LABEL_622;
                                                                                            }
                                                                                            v521 = (void *)objc_msgSend(v794, "newBufferWithLength:options:", 0, 0);
                                                                                            v522 = v767;
                                                                                            v767 = v521;

                                                                                            v523 = (void *)objc_msgSend(v794, "newBufferWithLength:options:", 0, 0);
                                                                                            v524 = v766;
                                                                                            v766 = v523;

                                                                                            v525 = v792;
                                                                                            if ((unint64_t)v792 >= v793)
                                                                                            {
                                                                                              v526 = sub_239516238(&v791, &v767);
                                                                                            }
                                                                                            else
                                                                                            {
                                                                                              *v525 = v767;
                                                                                              v526 = v525 + 1;
                                                                                            }
                                                                                            v792 = v526;
                                                                                            if ((unint64_t)v526 >= v793)
                                                                                            {
                                                                                              v527 = sub_239516238(&v791, &v766);
                                                                                            }
                                                                                            else
                                                                                            {
                                                                                              *v526 = v766;
                                                                                              v527 = v526 + 1;
                                                                                            }
                                                                                            v792 = v527;
                                                                                          }
LABEL_622:
                                                                                          v765 = (id)objc_msgSend(v794, "newBufferWithLength:options:", v716, 0);
                                                                                          v764 = (id)objc_msgSend(v794, "newBufferWithLength:options:", 4 * v713, 0);
                                                                                          v763 = (id)objc_msgSend(v794, "newBufferWithLength:options:", v713, 0);
                                                                                          v762 = (id)objc_msgSend(v794, "newBufferWithLength:options:", v718, 0);
                                                                                          v528 = v792;
                                                                                          if ((unint64_t)v792 >= v793)
                                                                                          {
                                                                                            v529 = sub_239516238(&v791, &v765);
                                                                                            v792 = v529;
                                                                                            if ((unint64_t)v529 < v793)
                                                                                            {
LABEL_624:
                                                                                              *v529 = v764;
                                                                                              v530 = v529 + 1;
                                                                                              v792 = v530;
                                                                                              if ((unint64_t)v530 < v793)
                                                                                                goto LABEL_625;
                                                                                              goto LABEL_629;
                                                                                            }
                                                                                          }
                                                                                          else
                                                                                          {
                                                                                            *v528 = v765;
                                                                                            v529 = v528 + 1;
                                                                                            v792 = v529;
                                                                                            if ((unint64_t)v529 < v793)
                                                                                              goto LABEL_624;
                                                                                          }
                                                                                          v530 = sub_239516238(&v791, &v764);
                                                                                          v792 = v530;
                                                                                          if ((unint64_t)v530 < v793)
                                                                                          {
LABEL_625:
                                                                                            *v530 = v763;
                                                                                            v531 = v530 + 1;
                                                                                            v792 = v531;
                                                                                            if ((unint64_t)v531 < v793)
                                                                                            {
LABEL_626:
                                                                                              *v531 = v762;
                                                                                              v532 = v531 + 1;
                                                                                              goto LABEL_631;
                                                                                            }
LABEL_630:
                                                                                            v532 = sub_239516238(&v791, &v762);
LABEL_631:
                                                                                            v792 = v532;
                                                                                            v761 = v787;
                                                                                            obj = v761;
                                                                                            v759 = v787;
                                                                                            v758 = v759;
                                                                                            location = v787;
                                                                                            v756 = location;
                                                                                            v755 = v787;
                                                                                            v754 = v755;
                                                                                            v753 = v787;
                                                                                            v750 = 0u;
                                                                                            v751 = 0u;
                                                                                            v752 = 1065353216;
                                                                                            if (v815)
                                                                                            {
                                                                                              v533 = (void *)objc_msgSend(v794, "newBufferWithLength:options:", v706, 0);
                                                                                              v534 = v761;
                                                                                              v761 = v533;

                                                                                              v535 = v792;
                                                                                              if ((unint64_t)v792 >= v793)
                                                                                              {
                                                                                                v536 = sub_239516238(&v791, &v761);
                                                                                              }
                                                                                              else
                                                                                              {
                                                                                                *v535 = v761;
                                                                                                v536 = v535 + 1;
                                                                                              }
                                                                                              v792 = v536;
                                                                                            }
                                                                                            if (!v816)
                                                                                            {
LABEL_647:
                                                                                              if (v715)
                                                                                              {
                                                                                                v550 = (void *)objc_msgSend(v794, "newBufferWithLength:options:", v718, 0);
                                                                                                v551 = v755;
                                                                                                v755 = v550;

                                                                                                v552 = v792;
                                                                                                if ((unint64_t)v792 >= v793)
                                                                                                {
                                                                                                  v553 = sub_239516238(&v791, &v755);
                                                                                                }
                                                                                                else
                                                                                                {
                                                                                                  *v552 = v755;
                                                                                                  v553 = v552 + 1;
                                                                                                }
                                                                                                v792 = v553;
                                                                                              }
                                                                                              if (!v814)
                                                                                              {
                                                                                                v560 = v792;
                                                                                                v561 = v791;
                                                                                                if (v791 == v792)
                                                                                                {
LABEL_664:
                                                                                                  v563 = v788;
                                                                                                  v564 = v789;
                                                                                                  if (v788 != v789)
                                                                                                  {
                                                                                                    v565 = v788;
                                                                                                    while (*v565)
                                                                                                    {
                                                                                                      if (++v565 == v789)
                                                                                                        goto LABEL_668;
                                                                                                    }
                                                                                                    if ((_BYTE)v819)
LABEL_688:
                                                                                                      sub_2394202DC((_QWORD *)(v818 + 176), 7002);
LABEL_689:
                                                                                                    v42 = 0;
                                                                                                    v573 = (_QWORD *)v751;
                                                                                                    if ((_QWORD)v751)
                                                                                                      goto LABEL_690;
                                                                                                    goto LABEL_691;
                                                                                                  }
LABEL_668:
                                                                                                  if (v561 != v560)
                                                                                                  {
                                                                                                    do
                                                                                                    {
                                                                                                      v566 = (void *)*--v560;

                                                                                                    }
                                                                                                    while (v560 != v561);
                                                                                                    v564 = v789;
                                                                                                    v563 = v788;
                                                                                                  }
                                                                                                  v792 = v561;
                                                                                                  while (v564 != v563)
                                                                                                  {
                                                                                                    v567 = (void *)*--v564;

                                                                                                  }
                                                                                                  v789 = v563;
                                                                                                  v568 = sub_239548D08(v489, v490, v413, *(_DWORD *)(v16 + 72), *(_QWORD *)(v16 + 80), v815);
                                                                                                  sub_2397A2A50((uint64_t)v837, v568, 0);
                                                                                                  sub_2397A15E0(&v749);
                                                                                                  sub_2397A1618(&v836);
                                                                                                  sub_239537694((uint64_t)v708, v786, v785, v784, v783);
                                                                                                  if (v810)
                                                                                                    sub_2395378E0(v708, v782, v781);
                                                                                                  v569 = sub_2397A9F50(v368);
                                                                                                  sub_2397A9494(v569);
                                                                                                  v570 = (void *)objc_claimAutoreleasedReturnValue();
                                                                                                  objc_msgSend(v570, "commandBuffer");
                                                                                                  v748 = (void *)objc_claimAutoreleasedReturnValue();

                                                                                                  if (v715)
                                                                                                    sub_239539458(v368, v748, v786, v785, &v809, v755);
                                                                                                  if (!v795)
                                                                                                    sub_23953B398(v368, v748, &v809, v768);
                                                                                                  sub_23971DB68();
                                                                                                  objc_msgSend(v748, "commit");
                                                                                                  objc_msgSend(v748, "waitUntilCompleted");
                                                                                                  objc_msgSend(v748, "error");
                                                                                                  v571 = (void *)objc_claimAutoreleasedReturnValue();
                                                                                                  v572 = sub_23955E668(v571);

                                                                                                  if (v572)
                                                                                                  {
                                                                                                    if ((_BYTE)v819)
                                                                                                      sub_2394202DC((_QWORD *)(v818 + 176), 7009);
                                                                                                    goto LABEL_686;
                                                                                                  }
                                                                                                  if ((sub_2396FD7B0((uint64_t)v712) & 1) != 0)
                                                                                                  {
LABEL_686:
                                                                                                    v42 = 0;
                                                                                                    goto LABEL_880;
                                                                                                  }
                                                                                                  sub_2396FD800(v712, (uint64_t)v831);
                                                                                                  v830[0] = 0x42C8000000000000;
                                                                                                  sub_2396FCC68(&__p, 100, v831, v830, 1.0);
                                                                                                  v594 = v832;
                                                                                                  if (v832 == v831)
                                                                                                  {
                                                                                                    v595 = 4;
                                                                                                    v594 = v831;
                                                                                                  }
                                                                                                  else
                                                                                                  {
                                                                                                    if (!v832)
                                                                                                      goto LABEL_730;
                                                                                                    v595 = 5;
                                                                                                  }
                                                                                                  (*(void (**)(void))(*v594 + 8 * v595))();
LABEL_730:
                                                                                                  sub_2396FD534(&v744, &__p, 15);
                                                                                                  sub_2396FD534(&v740, &__p, 60);
                                                                                                  sub_2396FD534(&v736, &__p, 25);
                                                                                                  v719 = v744;
                                                                                                  *(_OWORD *)v733 = v744;
                                                                                                  *(_QWORD *)&v733[16] = v745;
                                                                                                  if (v745)
                                                                                                  {
                                                                                                    p_shared_owners = (unint64_t *)&v745->__shared_owners_;
                                                                                                    do
                                                                                                      v603 = __ldxr(p_shared_owners);
                                                                                                    while (__stxr(v603 + 1, p_shared_owners));
                                                                                                  }
                                                                                                  v734 = v746;
                                                                                                  if (*((_QWORD *)&v746 + 1))
                                                                                                  {
                                                                                                    v604 = (unint64_t *)(*((_QWORD *)&v746 + 1) + 8);
                                                                                                    do
                                                                                                      v605 = __ldxr(v604);
                                                                                                    while (__stxr(v605 + 1, v604));
                                                                                                  }
                                                                                                  v735 = v747;
                                                                                                  if (*((_QWORD *)&v747 + 1))
                                                                                                  {
                                                                                                    v606 = (unint64_t *)(*((_QWORD *)&v747 + 1) + 8);
                                                                                                    do
                                                                                                      v607 = __ldxr(v606);
                                                                                                    while (__stxr(v607 + 1, v606));
                                                                                                  }
                                                                                                  v829 = 0;
                                                                                                  v608 = operator new(0x40uLL);
                                                                                                  *v608 = &off_250ADB9D8;
                                                                                                  v608[1] = v719;
                                                                                                  v609 = *(_OWORD *)&v733[8];
                                                                                                  *(_QWORD *)&v733[8] = 0;
                                                                                                  *(_QWORD *)&v733[16] = 0;
                                                                                                  v610 = v734;
                                                                                                  *((_OWORD *)v608 + 1) = v609;
                                                                                                  *((_OWORD *)v608 + 2) = v610;
                                                                                                  v734 = 0uLL;
                                                                                                  *((_OWORD *)v608 + 3) = v735;
                                                                                                  v735 = 0uLL;
                                                                                                  v829 = v608;
                                                                                                  v827[0] = 0x42C8000000000000;
                                                                                                  sub_2396FCC68(v830, 1, v828, v827, 1.0);
                                                                                                  v611 = v829;
                                                                                                  if (v829 == v828)
                                                                                                  {
                                                                                                    v612 = 4;
                                                                                                    v611 = v828;
                                                                                                  }
                                                                                                  else
                                                                                                  {
                                                                                                    if (!v829)
                                                                                                    {
LABEL_744:
                                                                                                      if (*((_QWORD *)&v734 + 1))
                                                                                                      {
                                                                                                        v613 = (unint64_t *)(*((_QWORD *)&v734 + 1) + 8);
                                                                                                        do
                                                                                                          v614 = __ldaxr(v613);
                                                                                                        while (__stlxr(v614 - 1, v613));
                                                                                                        if (!v614)
                                                                                                        {
                                                                                                          (*(void (**)(_QWORD))(**((_QWORD **)&v734 + 1) + 16))(*((_QWORD *)&v734 + 1));
                                                                                                          std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v734 + 1));
                                                                                                        }
                                                                                                      }
                                                                                                      if (*(_QWORD *)&v733[16])
                                                                                                      {
                                                                                                        v615 = (unint64_t *)(*(_QWORD *)&v733[16] + 8);
                                                                                                        do
                                                                                                          v616 = __ldaxr(v615);
                                                                                                        while (__stlxr(v616 - 1, v615));
                                                                                                        if (!v616)
                                                                                                        {
                                                                                                          (*(void (**)(_QWORD))(**(_QWORD **)&v733[16] + 16))(*(_QWORD *)&v733[16]);
                                                                                                          std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&v733[16]);
                                                                                                        }
                                                                                                      }
                                                                                                      v617 = v807;
                                                                                                      v618 = v806;
                                                                                                      v720 = v740;
                                                                                                      *(_OWORD *)v730 = v740;
                                                                                                      *(_QWORD *)&v730[16] = v741;
                                                                                                      if (v741)
                                                                                                      {
                                                                                                        v619 = (unint64_t *)&v741->__shared_owners_;
                                                                                                        do
                                                                                                          v620 = __ldxr(v619);
                                                                                                        while (__stxr(v620 + 1, v619));
                                                                                                      }
                                                                                                      v731 = v742;
                                                                                                      if (*((_QWORD *)&v742 + 1))
                                                                                                      {
                                                                                                        v621 = (unint64_t *)(*((_QWORD *)&v742 + 1) + 8);
                                                                                                        do
                                                                                                          v622 = __ldxr(v621);
                                                                                                        while (__stxr(v622 + 1, v621));
                                                                                                      }
                                                                                                      v732 = v743;
                                                                                                      if (*((_QWORD *)&v743 + 1))
                                                                                                      {
                                                                                                        v623 = (unint64_t *)(*((_QWORD *)&v743 + 1) + 8);
                                                                                                        do
                                                                                                          v624 = __ldxr(v623);
                                                                                                        while (__stxr(v624 + 1, v623));
                                                                                                      }
                                                                                                      v826 = 0;
                                                                                                      v625 = operator new(0x40uLL);
                                                                                                      *v625 = &off_250ADB9D8;
                                                                                                      v625[1] = v720;
                                                                                                      v626 = *(_OWORD *)&v730[8];
                                                                                                      *(_QWORD *)&v730[8] = 0;
                                                                                                      *(_QWORD *)&v730[16] = 0;
                                                                                                      v627 = v731;
                                                                                                      *((_OWORD *)v625 + 1) = v626;
                                                                                                      *((_OWORD *)v625 + 2) = v627;
                                                                                                      v731 = 0uLL;
                                                                                                      *((_OWORD *)v625 + 3) = v732;
                                                                                                      v732 = 0uLL;
                                                                                                      v826 = v625;
                                                                                                      v824[0] = 0x42C8000000000000;
                                                                                                      sub_2396FCC68(v827, (v617 - v618) >> 3, v825, v824, 1.0);
                                                                                                      v628 = v826;
                                                                                                      if (v826 == v825)
                                                                                                      {
                                                                                                        v629 = 4;
                                                                                                        v628 = v825;
                                                                                                      }
                                                                                                      else
                                                                                                      {
                                                                                                        if (!v826)
                                                                                                        {
LABEL_768:
                                                                                                          if (*((_QWORD *)&v731 + 1))
                                                                                                          {
                                                                                                            v630 = (unint64_t *)(*((_QWORD *)&v731 + 1) + 8);
                                                                                                            do
                                                                                                              v631 = __ldaxr(v630);
                                                                                                            while (__stlxr(v631 - 1, v630));
                                                                                                            if (!v631)
                                                                                                            {
                                                                                                              (*(void (**)(_QWORD))(**((_QWORD **)&v731 + 1) + 16))(*((_QWORD *)&v731 + 1));
                                                                                                              std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v731 + 1));
                                                                                                            }
                                                                                                          }
                                                                                                          if (*(_QWORD *)&v730[16])
                                                                                                          {
                                                                                                            v632 = (unint64_t *)(*(_QWORD *)&v730[16] + 8);
                                                                                                            do
                                                                                                              v633 = __ldaxr(v632);
                                                                                                            while (__stlxr(v633 - 1, v632));
                                                                                                            if (!v633)
                                                                                                            {
                                                                                                              (*(void (**)(_QWORD))(**(_QWORD **)&v730[16] + 16))(*(_QWORD *)&v730[16]);
                                                                                                              std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&v730[16]);
                                                                                                            }
                                                                                                          }
                                                                                                          v721 = v736;
                                                                                                          *(_OWORD *)v727 = v736;
                                                                                                          *(_QWORD *)&v727[16] = v737;
                                                                                                          if (v737)
                                                                                                          {
                                                                                                            v634 = (unint64_t *)&v737->__shared_owners_;
                                                                                                            do
                                                                                                              v635 = __ldxr(v634);
                                                                                                            while (__stxr(v635 + 1, v634));
                                                                                                          }
                                                                                                          v728 = v738;
                                                                                                          if (*((_QWORD *)&v738 + 1))
                                                                                                          {
                                                                                                            v636 = (unint64_t *)(*((_QWORD *)&v738 + 1) + 8);
                                                                                                            do
                                                                                                              v637 = __ldxr(v636);
                                                                                                            while (__stxr(v637 + 1, v636));
                                                                                                          }
                                                                                                          v729 = v739;
                                                                                                          if (*((_QWORD *)&v739 + 1))
                                                                                                          {
                                                                                                            v638 = (unint64_t *)(*((_QWORD *)&v739 + 1) + 8);
                                                                                                            do
                                                                                                              v639 = __ldxr(v638);
                                                                                                            while (__stxr(v639 + 1, v638));
                                                                                                          }
                                                                                                          v823 = 0;
                                                                                                          v640 = operator new(0x40uLL);
                                                                                                          *v640 = &off_250ADB9D8;
                                                                                                          v640[1] = v721;
                                                                                                          v641 = *(_OWORD *)&v727[8];
                                                                                                          *(_QWORD *)&v727[8] = 0;
                                                                                                          *(_QWORD *)&v727[16] = 0;
                                                                                                          v642 = v728;
                                                                                                          *((_OWORD *)v640 + 1) = v641;
                                                                                                          *((_OWORD *)v640 + 2) = v642;
                                                                                                          v728 = 0uLL;
                                                                                                          *((_OWORD *)v640 + 3) = v729;
                                                                                                          v729 = 0uLL;
                                                                                                          v823 = v640;
                                                                                                          v723[0] = (void *)0x42C8000000000000;
                                                                                                          sub_2396FCC68(v824, 1, v822, v723, 1.0);
                                                                                                          v643 = v823;
                                                                                                          if (v823 == v822)
                                                                                                          {
                                                                                                            v644 = 4;
                                                                                                            v643 = v822;
                                                                                                          }
                                                                                                          else
                                                                                                          {
                                                                                                            if (!v823)
                                                                                                            {
LABEL_792:
                                                                                                              v645 = (std::__shared_weak_count *)*((_QWORD *)&v729 + 1);
                                                                                                              if (*((_QWORD *)&v729 + 1))
                                                                                                              {
                                                                                                                v646 = (unint64_t *)(*((_QWORD *)&v729 + 1) + 8);
                                                                                                                do
                                                                                                                  v647 = __ldaxr(v646);
                                                                                                                while (__stlxr(v647 - 1, v646));
                                                                                                                if (!v647)
                                                                                                                {
                                                                                                                  ((void (*)(std::__shared_weak_count *))v645->__on_zero_shared)(v645);
                                                                                                                  std::__shared_weak_count::__release_weak(v645);
                                                                                                                }
                                                                                                              }
                                                                                                              v648 = (std::__shared_weak_count *)*((_QWORD *)&v728 + 1);
                                                                                                              if (*((_QWORD *)&v728 + 1))
                                                                                                              {
                                                                                                                v649 = (unint64_t *)(*((_QWORD *)&v728 + 1) + 8);
                                                                                                                do
                                                                                                                  v650 = __ldaxr(v649);
                                                                                                                while (__stlxr(v650 - 1, v649));
                                                                                                                if (!v650)
                                                                                                                {
                                                                                                                  ((void (*)(std::__shared_weak_count *))v648->__on_zero_shared)(v648);
                                                                                                                  std::__shared_weak_count::__release_weak(v648);
                                                                                                                }
                                                                                                              }
                                                                                                              v651 = *(std::__shared_weak_count **)&v727[16];
                                                                                                              if (*(_QWORD *)&v727[16])
                                                                                                              {
                                                                                                                v652 = (unint64_t *)(*(_QWORD *)&v727[16] + 8);
                                                                                                                do
                                                                                                                  v653 = __ldaxr(v652);
                                                                                                                while (__stlxr(v653 - 1, v652));
                                                                                                                if (!v653)
                                                                                                                {
                                                                                                                  ((void (*)(std::__shared_weak_count *))v651->__on_zero_shared)(v651);
                                                                                                                  std::__shared_weak_count::__release_weak(v651);
                                                                                                                }
                                                                                                              }
                                                                                                              v724 = 0;
                                                                                                              LOBYTE(v723[0]) = 0;
                                                                                                              sub_2396FCDAC((uint64_t)v830, (__int128 *)v723, 1);
                                                                                                              if (v724 < 0)
                                                                                                                operator delete(v723[0]);
                                                                                                              v726 = 0;
                                                                                                              v725 = 0;
                                                                                                              v654 = v807;
                                                                                                              v655 = v806;
                                                                                                              v821 = 0;
                                                                                                              v656 = operator new(0x1E8uLL);
                                                                                                              *v656 = &off_250ADDA80;
                                                                                                              v656[1] = v827;
                                                                                                              v656[2] = v712;
                                                                                                              v656[3] = &v806;
                                                                                                              v656[4] = &v801;
                                                                                                              v656[5] = v717;
                                                                                                              v656[6] = &v749;
                                                                                                              v656[7] = &v726;
                                                                                                              v656[8] = v708;
                                                                                                              v656[9] = v722;
                                                                                                              v656[10] = &v818;
                                                                                                              v656[11] = &v725;
                                                                                                              v656[12] = &v815;
                                                                                                              v656[13] = v703;
                                                                                                              v656[14] = &v814;
                                                                                                              v656[15] = &v800;
                                                                                                              v656[16] = &v836;
                                                                                                              v656[17] = &v748;
                                                                                                              v656[18] = v368;
                                                                                                              v656[19] = &v764;
                                                                                                              v656[20] = &v761;
                                                                                                              v656[21] = &v794;
                                                                                                              v656[22] = &v786;
                                                                                                              v656[23] = &v785;
                                                                                                              v656[24] = &v782;
                                                                                                              v656[25] = &v781;
                                                                                                              v656[26] = &v775;
                                                                                                              v656[27] = &v772;
                                                                                                              v656[28] = &v810;
                                                                                                              v656[29] = &v809;
                                                                                                              v656[30] = &v777;
                                                                                                              v656[31] = &v776;
                                                                                                              v656[32] = &v773;
                                                                                                              v656[33] = &v784;
                                                                                                              v656[34] = &v779;
                                                                                                              v656[35] = &v816;
                                                                                                              v656[36] = &obj;
                                                                                                              v656[37] = &v759;
                                                                                                              v656[38] = &v756;
                                                                                                              v656[39] = &v758;
                                                                                                              v656[40] = &location;
                                                                                                              v656[41] = &v763;
                                                                                                              v656[42] = &v762;
                                                                                                              v656[43] = &v780;
                                                                                                              v656[44] = &v811;
                                                                                                              v656[45] = &v813;
                                                                                                              v656[46] = &v812;
                                                                                                              v656[47] = &v783;
                                                                                                              v656[48] = &v778;
                                                                                                              v656[49] = &v765;
                                                                                                              v656[50] = &v755;
                                                                                                              v656[51] = &v753;
                                                                                                              v656[52] = &v750;
                                                                                                              v656[53] = v817;
                                                                                                              v656[54] = &v795;
                                                                                                              v656[55] = &v799;
                                                                                                              v656[56] = &v768;
                                                                                                              v656[57] = &v767;
                                                                                                              v656[58] = &v766;
                                                                                                              v656[59] = v16;
                                                                                                              v656[60] = &v769;
                                                                                                              v821 = v656;
                                                                                                              sub_2397A376C(v837, (v654 - v655) >> 3, v820, 0);
                                                                                                              v657 = v821;
                                                                                                              if (v821 == v820)
                                                                                                              {
                                                                                                                v658 = 4;
                                                                                                                v657 = v820;
                                                                                                              }
                                                                                                              else
                                                                                                              {
                                                                                                                if (!v821)
                                                                                                                {
LABEL_814:
                                                                                                                  if (v725 || (sub_2396FD7B0((uint64_t)v712) & 1) != 0)
                                                                                                                    goto LABEL_833;
                                                                                                                  if (v814)
                                                                                                                  {
                                                                                                                    v659 = v817[0];
                                                                                                                    sub_239547640((uint64_t)v723, (uint64_t)v708, v699);
                                                                                                                    sub_239540798((uint64_t)v659, (uint64_t)v723);
                                                                                                                    sub_2394AEEDC((uint64_t)v723);
                                                                                                                    if (!*((_BYTE *)v659 + 104))
                                                                                                                    {
                                                                                                                      *((_QWORD *)v659 + 10) = 0;
                                                                                                                      *((_QWORD *)v659 + 11) = 0;
                                                                                                                      *((_QWORD *)v659 + 12) = 0;
                                                                                                                      *((_BYTE *)v659 + 104) = 1;
                                                                                                                    }
                                                                                                                    sub_239540A60((_QWORD *)v659 + 10, 0xAAAAAAAAAAAAAAABLL * ((v708[1] - *v708) >> 2));
                                                                                                                    v660 = sub_2397A9F50(v368);
                                                                                                                    sub_2397A9494(v660);
                                                                                                                    v661 = (void *)objc_claimAutoreleasedReturnValue();
                                                                                                                    objc_msgSend(v661, "commandBuffer");
                                                                                                                    v662 = (void *)objc_claimAutoreleasedReturnValue();
                                                                                                                    v663 = v748;
                                                                                                                    v748 = v662;

                                                                                                                    sub_239539C90(v368, v748, v765, v755, &v809, v754);
                                                                                                                    sub_23971DB68();
                                                                                                                    objc_msgSend(v748, "commit");
                                                                                                                    objc_msgSend(v748, "waitUntilCompleted");
                                                                                                                    objc_msgSend(v748, "error");
                                                                                                                    v664 = (void *)objc_claimAutoreleasedReturnValue();
                                                                                                                    v665 = sub_23955E668(v664);

                                                                                                                    if (v665)
                                                                                                                    {
                                                                                                                      if ((_BYTE)v819)
                                                                                                                        sub_2394202DC((_QWORD *)(v818 + 176), 7009);
                                                                                                                      goto LABEL_833;
                                                                                                                    }
                                                                                                                    v666 = v748;
                                                                                                                    v748 = 0;

                                                                                                                    if (!sub_239539E34(v667, v754, v817[0]))
                                                                                                                    {
LABEL_833:
                                                                                                                      v42 = 0;
LABEL_834:
                                                                                                                      sub_2396FCD14((uint64_t)v824);
                                                                                                                      sub_2396FCD14((uint64_t)v827);
                                                                                                                      sub_2396FCD14((uint64_t)v830);
                                                                                                                      v672 = (std::__shared_weak_count *)*((_QWORD *)&v739 + 1);
                                                                                                                      if (*((_QWORD *)&v739 + 1))
                                                                                                                      {
                                                                                                                        v673 = (unint64_t *)(*((_QWORD *)&v739 + 1) + 8);
                                                                                                                        do
                                                                                                                          v674 = __ldaxr(v673);
                                                                                                                        while (__stlxr(v674 - 1, v673));
                                                                                                                        if (!v674)
                                                                                                                        {
                                                                                                                          ((void (*)(std::__shared_weak_count *))v672->__on_zero_shared)(v672);
                                                                                                                          std::__shared_weak_count::__release_weak(v672);
                                                                                                                        }
                                                                                                                      }
                                                                                                                      v675 = (std::__shared_weak_count *)*((_QWORD *)&v738 + 1);
                                                                                                                      if (*((_QWORD *)&v738 + 1))
                                                                                                                      {
                                                                                                                        v676 = (unint64_t *)(*((_QWORD *)&v738 + 1) + 8);
                                                                                                                        do
                                                                                                                          v677 = __ldaxr(v676);
                                                                                                                        while (__stlxr(v677 - 1, v676));
                                                                                                                        if (!v677)
                                                                                                                        {
                                                                                                                          ((void (*)(std::__shared_weak_count *))v675->__on_zero_shared)(v675);
                                                                                                                          std::__shared_weak_count::__release_weak(v675);
                                                                                                                        }
                                                                                                                      }
                                                                                                                      v678 = v737;
                                                                                                                      if (v737)
                                                                                                                      {
                                                                                                                        v679 = (unint64_t *)&v737->__shared_owners_;
                                                                                                                        do
                                                                                                                          v680 = __ldaxr(v679);
                                                                                                                        while (__stlxr(v680 - 1, v679));
                                                                                                                        if (!v680)
                                                                                                                        {
                                                                                                                          ((void (*)(std::__shared_weak_count *))v678->__on_zero_shared)(v678);
                                                                                                                          std::__shared_weak_count::__release_weak(v678);
                                                                                                                        }
                                                                                                                      }
                                                                                                                      v681 = (std::__shared_weak_count *)*((_QWORD *)&v743 + 1);
                                                                                                                      if (*((_QWORD *)&v743 + 1))
                                                                                                                      {
                                                                                                                        v682 = (unint64_t *)(*((_QWORD *)&v743 + 1) + 8);
                                                                                                                        do
                                                                                                                          v683 = __ldaxr(v682);
                                                                                                                        while (__stlxr(v683 - 1, v682));
                                                                                                                        if (!v683)
                                                                                                                        {
                                                                                                                          ((void (*)(std::__shared_weak_count *))v681->__on_zero_shared)(v681);
                                                                                                                          std::__shared_weak_count::__release_weak(v681);
                                                                                                                        }
                                                                                                                      }
                                                                                                                      v684 = (std::__shared_weak_count *)*((_QWORD *)&v742 + 1);
                                                                                                                      if (*((_QWORD *)&v742 + 1))
                                                                                                                      {
                                                                                                                        v685 = (unint64_t *)(*((_QWORD *)&v742 + 1) + 8);
                                                                                                                        do
                                                                                                                          v686 = __ldaxr(v685);
                                                                                                                        while (__stlxr(v686 - 1, v685));
                                                                                                                        if (!v686)
                                                                                                                        {
                                                                                                                          ((void (*)(std::__shared_weak_count *))v684->__on_zero_shared)(v684);
                                                                                                                          std::__shared_weak_count::__release_weak(v684);
                                                                                                                        }
                                                                                                                      }
                                                                                                                      v687 = v741;
                                                                                                                      if (v741)
                                                                                                                      {
                                                                                                                        v688 = (unint64_t *)&v741->__shared_owners_;
                                                                                                                        do
                                                                                                                          v689 = __ldaxr(v688);
                                                                                                                        while (__stlxr(v689 - 1, v688));
                                                                                                                        if (!v689)
                                                                                                                        {
                                                                                                                          ((void (*)(std::__shared_weak_count *))v687->__on_zero_shared)(v687);
                                                                                                                          std::__shared_weak_count::__release_weak(v687);
                                                                                                                        }
                                                                                                                      }
                                                                                                                      v690 = (std::__shared_weak_count *)*((_QWORD *)&v747 + 1);
                                                                                                                      if (*((_QWORD *)&v747 + 1))
                                                                                                                      {
                                                                                                                        v691 = (unint64_t *)(*((_QWORD *)&v747 + 1) + 8);
                                                                                                                        do
                                                                                                                          v692 = __ldaxr(v691);
                                                                                                                        while (__stlxr(v692 - 1, v691));
                                                                                                                        if (!v692)
                                                                                                                        {
                                                                                                                          ((void (*)(std::__shared_weak_count *))v690->__on_zero_shared)(v690);
                                                                                                                          std::__shared_weak_count::__release_weak(v690);
                                                                                                                        }
                                                                                                                      }
                                                                                                                      v693 = (std::__shared_weak_count *)*((_QWORD *)&v746 + 1);
                                                                                                                      if (*((_QWORD *)&v746 + 1))
                                                                                                                      {
                                                                                                                        v694 = (unint64_t *)(*((_QWORD *)&v746 + 1) + 8);
                                                                                                                        do
                                                                                                                          v695 = __ldaxr(v694);
                                                                                                                        while (__stlxr(v695 - 1, v694));
                                                                                                                        if (!v695)
                                                                                                                        {
                                                                                                                          ((void (*)(std::__shared_weak_count *))v693->__on_zero_shared)(v693);
                                                                                                                          std::__shared_weak_count::__release_weak(v693);
                                                                                                                        }
                                                                                                                      }
                                                                                                                      v696 = v745;
                                                                                                                      if (v745)
                                                                                                                      {
                                                                                                                        v697 = (unint64_t *)&v745->__shared_owners_;
                                                                                                                        do
                                                                                                                          v698 = __ldaxr(v697);
                                                                                                                        while (__stlxr(v698 - 1, v697));
                                                                                                                        if (!v698)
                                                                                                                        {
                                                                                                                          ((void (*)(std::__shared_weak_count *))v696->__on_zero_shared)(v696);
                                                                                                                          std::__shared_weak_count::__release_weak(v696);
                                                                                                                        }
                                                                                                                      }
                                                                                                                      sub_2396FCD14((uint64_t)&__p);
LABEL_880:

                                                                                                                      sub_2397A163C(&v836);
                                                                                                                      nullsub_4(&v749);
                                                                                                                      sub_2397A2E14(v837);
                                                                                                                      v573 = (_QWORD *)v751;
                                                                                                                      if ((_QWORD)v751)
                                                                                                                      {
                                                                                                                        do
                                                                                                                        {
LABEL_690:
                                                                                                                          v574 = (_QWORD *)*v573;
                                                                                                                          sub_239416DA0((uint64_t)(v573 + 4));
                                                                                                                          nullsub_4(v573 + 3);
                                                                                                                          operator delete(v573);
                                                                                                                          v573 = v574;
                                                                                                                        }
                                                                                                                        while (v574);
                                                                                                                      }
LABEL_691:
                                                                                                                      v575 = (void *)v750;
                                                                                                                      *(_QWORD *)&v750 = 0;
                                                                                                                      if (v575)
                                                                                                                        operator delete(v575);

                                                                                                                      v576 = (char *)v769;
                                                                                                                      if (v769)
                                                                                                                      {
                                                                                                                        v577 = v770;
                                                                                                                        v578 = v769;
                                                                                                                        if (v770 != v769)
                                                                                                                        {
                                                                                                                          v579 = v770;
                                                                                                                          do
                                                                                                                          {
                                                                                                                            v581 = (void *)*((_QWORD *)v579 - 4);
                                                                                                                            v579 -= 32;
                                                                                                                            v580 = v581;
                                                                                                                            if (v581)
                                                                                                                            {
                                                                                                                              *((_QWORD *)v577 - 3) = v580;
                                                                                                                              operator delete(v580);
                                                                                                                            }
                                                                                                                            v577 = v579;
                                                                                                                          }
                                                                                                                          while (v579 != v576);
                                                                                                                          v578 = v769;
                                                                                                                        }
                                                                                                                        v770 = v576;
                                                                                                                        operator delete(v578);
                                                                                                                      }

                                                                                                                      v582 = v788;
                                                                                                                      if (v788)
                                                                                                                      {
                                                                                                                        v583 = v789;
                                                                                                                        v584 = v788;
                                                                                                                        if (v789 != v788)
                                                                                                                        {
                                                                                                                          do
                                                                                                                          {
                                                                                                                            v585 = (void *)*--v583;

                                                                                                                          }
                                                                                                                          while (v583 != v582);
                                                                                                                          v584 = v788;
                                                                                                                        }
                                                                                                                        v789 = v582;
                                                                                                                        operator delete(v584);
                                                                                                                      }
                                                                                                                      v586 = v791;
                                                                                                                      if (v791)
                                                                                                                      {
                                                                                                                        v587 = v792;
                                                                                                                        v588 = v791;
                                                                                                                        if (v792 != v791)
                                                                                                                        {
                                                                                                                          do
                                                                                                                          {
                                                                                                                            v589 = (void *)*--v587;

                                                                                                                          }
                                                                                                                          while (v587 != v586);
                                                                                                                          v588 = v791;
                                                                                                                        }
                                                                                                                        v792 = v586;
                                                                                                                        operator delete(v588);
                                                                                                                      }

                                                                                                                      goto LABEL_712;
                                                                                                                    }
                                                                                                                    sub_23953AB38((uint64_t)&v750, (uint64_t)v817[0]);
                                                                                                                  }
                                                                                                                  sub_239540A98(v711);
                                                                                                                  sub_23953BF00(v711, v809);
                                                                                                                  if (v795)
                                                                                                                  {
                                                                                                                    sub_23953BFA8((char **)&v769, v809, v816, (uint64_t)v711, v837);
                                                                                                                  }
                                                                                                                  else
                                                                                                                  {
                                                                                                                    sub_23953BA2C(v668, v768, v767, v766, v799, v809, v816, v711);
                                                                                                                    v670 = v767;
                                                                                                                    v767 = 0;

                                                                                                                    v671 = v766;
                                                                                                                    v766 = 0;

                                                                                                                  }
                                                                                                                  sub_23953B978(v669, v765, v809, v711);
                                                                                                                  if (v816)
                                                                                                                    sub_239540AF8(v711);
                                                                                                                  if (sub_23953C170((uint64_t **)v711, v837, v818, v819))
                                                                                                                  {
                                                                                                                    sub_23953C30C(v711, v837);
                                                                                                                    sub_23941A4FC(v723, "");
                                                                                                                    sub_2396FCDAC((uint64_t)v824, (__int128 *)v723, 1);
                                                                                                                    if (v724 < 0)
                                                                                                                      operator delete(v723[0]);
                                                                                                                    kdebug_trace();
                                                                                                                    v42 = 1;
                                                                                                                    goto LABEL_834;
                                                                                                                  }
                                                                                                                  goto LABEL_833;
                                                                                                                }
                                                                                                                v658 = 5;
                                                                                                              }
                                                                                                              (*(void (**)(void))(*v657 + 8 * v658))();
                                                                                                              goto LABEL_814;
                                                                                                            }
                                                                                                            v644 = 5;
                                                                                                          }
                                                                                                          (*(void (**)(void))(*v643 + 8 * v644))();
                                                                                                          goto LABEL_792;
                                                                                                        }
                                                                                                        v629 = 5;
                                                                                                      }
                                                                                                      (*(void (**)(void))(*v628 + 8 * v629))();
                                                                                                      goto LABEL_768;
                                                                                                    }
                                                                                                    v612 = 5;
                                                                                                  }
                                                                                                  (*(void (**)(void))(*v611 + 8 * v612))();
                                                                                                  goto LABEL_744;
                                                                                                }
LABEL_661:
                                                                                                v562 = v561;
                                                                                                while (*v562)
                                                                                                {
                                                                                                  if (++v562 == v560)
                                                                                                    goto LABEL_664;
                                                                                                }
                                                                                                if ((_BYTE)v819)
                                                                                                  goto LABEL_688;
                                                                                                goto LABEL_689;
                                                                                              }
                                                                                              v554 = (void *)objc_msgSend(v794, "newBufferWithLength:options:", v705, 0);
                                                                                              v555 = v754;
                                                                                              v754 = v554;

                                                                                              v556 = (void *)objc_msgSend(v794, "newBufferWithLength:options:", v704, 0);
                                                                                              v557 = v753;
                                                                                              v753 = v556;

                                                                                              v558 = v792;
                                                                                              if ((unint64_t)v792 >= v793)
                                                                                              {
                                                                                                v559 = sub_239516238(&v791, &v754);
                                                                                                v792 = v559;
                                                                                                if ((unint64_t)v559 < v793)
                                                                                                {
LABEL_655:
                                                                                                  *v559 = v753;
                                                                                                  v560 = v559 + 1;
                                                                                                  v792 = v560;
                                                                                                  v561 = v791;
                                                                                                  if (v791 == v560)
                                                                                                    goto LABEL_664;
                                                                                                  goto LABEL_661;
                                                                                                }
                                                                                              }
                                                                                              else
                                                                                              {
                                                                                                *v558 = v754;
                                                                                                v559 = v558 + 1;
                                                                                                v792 = v559;
                                                                                                if ((unint64_t)v559 < v793)
                                                                                                  goto LABEL_655;
                                                                                              }
                                                                                              v560 = sub_239516238(&v791, &v753);
                                                                                              v792 = v560;
                                                                                              v561 = v791;
                                                                                              if (v791 == v560)
                                                                                                goto LABEL_664;
                                                                                              goto LABEL_661;
                                                                                            }
                                                                                            v537 = (void *)objc_msgSend(v794, "newBufferWithLength:options:", v710, 0);
                                                                                            v538 = obj;
                                                                                            obj = v537;

                                                                                            v539 = (void *)objc_msgSend(v794, "newBufferWithLength:options:", v369, 0);
                                                                                            v540 = v759;
                                                                                            v759 = v539;

                                                                                            v541 = (void *)objc_msgSend(v794, "newBufferWithLength:options:", v707, 0);
                                                                                            v542 = v756;
                                                                                            v756 = v541;

                                                                                            v543 = (void *)objc_msgSend(v794, "newBufferWithLength:options:", v408, 0);
                                                                                            v544 = v758;
                                                                                            v758 = v543;

                                                                                            objc_storeStrong(&location, obj);
                                                                                            v545 = v792;
                                                                                            if ((unint64_t)v792 >= v793)
                                                                                            {
                                                                                              v546 = sub_239516238(&v791, &obj);
                                                                                              v792 = v546;
                                                                                              if ((unint64_t)v546 < v793)
                                                                                              {
LABEL_639:
                                                                                                *v546 = v759;
                                                                                                v547 = v546 + 1;
                                                                                                v792 = v547;
                                                                                                if ((unint64_t)v547 < v793)
                                                                                                  goto LABEL_640;
                                                                                                goto LABEL_644;
                                                                                              }
                                                                                            }
                                                                                            else
                                                                                            {
                                                                                              *v545 = obj;
                                                                                              v546 = v545 + 1;
                                                                                              v792 = v546;
                                                                                              if ((unint64_t)v546 < v793)
                                                                                                goto LABEL_639;
                                                                                            }
                                                                                            v547 = sub_239516238(&v791, &v759);
                                                                                            v792 = v547;
                                                                                            if ((unint64_t)v547 < v793)
                                                                                            {
LABEL_640:
                                                                                              *v547 = v756;
                                                                                              v548 = v547 + 1;
                                                                                              v792 = v548;
                                                                                              if ((unint64_t)v548 < v793)
                                                                                              {
LABEL_641:
                                                                                                *v548 = v758;
                                                                                                v549 = v548 + 1;
LABEL_646:
                                                                                                v792 = v549;
                                                                                                goto LABEL_647;
                                                                                              }
LABEL_645:
                                                                                              v549 = sub_239516238(&v791, &v758);
                                                                                              goto LABEL_646;
                                                                                            }
LABEL_644:
                                                                                            v548 = sub_239516238(&v791, &v756);
                                                                                            v792 = v548;
                                                                                            if ((unint64_t)v548 < v793)
                                                                                              goto LABEL_641;
                                                                                            goto LABEL_645;
                                                                                          }
LABEL_629:
                                                                                          v531 = sub_239516238(&v791, &v763);
                                                                                          v792 = v531;
                                                                                          if ((unint64_t)v531 < v793)
                                                                                            goto LABEL_626;
                                                                                          goto LABEL_630;
                                                                                        }
LABEL_583:
                                                                                        v500 = sub_239516238(&v788, &v773);
                                                                                        v789 = v500;
                                                                                        if ((unint64_t)v500 < v790)
                                                                                          goto LABEL_579;
                                                                                        goto LABEL_584;
                                                                                      }
                                                                                    }
                                                                                    else
                                                                                    {
                                                                                      *v485 = v780;
                                                                                      v486 = v485 + 1;
                                                                                      v792 = v486;
                                                                                      if ((unint64_t)v486 < v793)
                                                                                        goto LABEL_569;
                                                                                    }
                                                                                    v487 = sub_239516238(&v791, &v779);
                                                                                    v792 = v487;
                                                                                    if ((unint64_t)v487 < v793)
                                                                                      goto LABEL_570;
                                                                                    goto LABEL_573;
                                                                                  }
LABEL_561:
                                                                                  v478 = (void *)objc_msgSend(v794, "newBufferWithLength:options:", v701, 0);
                                                                                  v479 = v782;
                                                                                  v782 = v478;

                                                                                  v480 = (void *)objc_msgSend(v794, "newBufferWithLength:options:", v700, 0);
                                                                                  v481 = v781;
                                                                                  v781 = v480;

                                                                                  v482 = v792;
                                                                                  if ((unint64_t)v792 >= v793)
                                                                                  {
                                                                                    v483 = sub_239516238(&v791, &v782);
                                                                                    v792 = v483;
                                                                                    if ((unint64_t)v483 < v793)
                                                                                      goto LABEL_563;
                                                                                  }
                                                                                  else
                                                                                  {
                                                                                    *v482 = v782;
                                                                                    v483 = v482 + 1;
                                                                                    v792 = v483;
                                                                                    if ((unint64_t)v483 < v793)
                                                                                    {
LABEL_563:
                                                                                      *v483 = v781;
                                                                                      v484 = v483 + 1;
LABEL_566:
                                                                                      v792 = v484;
                                                                                      goto LABEL_567;
                                                                                    }
                                                                                  }
                                                                                  v484 = sub_239516238(&v791, &v781);
                                                                                  goto LABEL_566;
                                                                                }
LABEL_544:
                                                                                *v468 = v784;
                                                                                v469 = v468 + 1;
                                                                                v792 = v469;
                                                                                if ((unint64_t)v469 >= v793)
                                                                                  goto LABEL_560;
                                                                                goto LABEL_545;
                                                                              }
                                                                            }
                                                                            *v467 = v785;
                                                                            v468 = v467 + 1;
                                                                            v792 = v468;
                                                                            if ((unint64_t)v468 >= v793)
                                                                              goto LABEL_559;
                                                                            goto LABEL_544;
                                                                          }
                                                                          v406 = v798;
                                                                          if (v387 < v798)
                                                                          {
                                                                            *v387 = v35;
                                                                            v407 = v387 + 1;
                                                                            goto LABEL_513;
                                                                          }
                                                                          v415 = (uint64_t *)v796;
                                                                          v416 = (char *)v387 - (_BYTE *)v796;
                                                                          v417 = ((char *)v387 - (_BYTE *)v796) >> 3;
                                                                          v418 = v417 + 1;
                                                                          if ((unint64_t)(v417 + 1) >> 61)
                                                                            goto LABEL_884;
                                                                          v419 = (char *)v798 - (_BYTE *)v796;
                                                                          if (((char *)v798 - (_BYTE *)v796) >> 2 > v418)
                                                                            v418 = v419 >> 2;
                                                                          if ((unint64_t)v419 >= 0x7FFFFFFFFFFFFFF8)
                                                                            v420 = 0x1FFFFFFFFFFFFFFFLL;
                                                                          else
                                                                            v420 = v418;
                                                                          if (v420)
                                                                          {
                                                                            if (v420 >> 61)
                                                                              goto LABEL_885;
                                                                            v421 = operator new(8 * v420);
                                                                            v422 = (uint64_t *)&v421[8 * v417];
                                                                            v406 = (uint64_t *)&v421[8 * v420];
                                                                            *v422 = v35;
                                                                            v407 = v422 + 1;
                                                                            v423 = (char *)v387 - (char *)v415;
                                                                            if (v387 == v415)
                                                                              goto LABEL_511;
                                                                          }
                                                                          else
                                                                          {
                                                                            v421 = 0;
                                                                            v422 = (uint64_t *)(8 * v417);
                                                                            v406 = 0;
                                                                            *(_QWORD *)(8 * v417) = v35;
                                                                            v407 = (uint64_t *)(8 * v417 + 8);
                                                                            v423 = (char *)v387 - (char *)v415;
                                                                            if (v387 == v415)
                                                                              goto LABEL_511;
                                                                          }
                                                                          v437 = v423 - 8;
                                                                          if (v437 >= 0x58)
                                                                          {
                                                                            if ((unint64_t)((char *)v387
                                                                                                  - v421
                                                                                                  - v416) >= 0x20)
                                                                            {
                                                                              v439 = (v437 >> 3) + 1;
                                                                              v440 = 8 * (v439 & 0x3FFFFFFFFFFFFFFCLL);
                                                                              v438 = &v387[v440 / 0xFFFFFFFFFFFFFFF8];
                                                                              v422 = (uint64_t *)((char *)v422 - v440);
                                                                              v441 = &v421[8 * v417 - 16];
                                                                              v442 = v387 - 2;
                                                                              v443 = v439 & 0x3FFFFFFFFFFFFFFCLL;
                                                                              do
                                                                              {
                                                                                v444 = *(_OWORD *)v442;
                                                                                *(v441 - 1) = *((_OWORD *)v442 - 1);
                                                                                *v441 = v444;
                                                                                v441 -= 2;
                                                                                v442 -= 4;
                                                                                v443 -= 4;
                                                                              }
                                                                              while (v443);
                                                                              if (v439 == (v439 & 0x3FFFFFFFFFFFFFFCLL))
                                                                              {
LABEL_511:
                                                                                v796 = v422;
                                                                                v797 = v407;
                                                                                v798 = v406;
                                                                                if (v415)
                                                                                {
                                                                                  operator delete(v415);
                                                                                  v406 = v798;
                                                                                }
LABEL_513:
                                                                                v797 = v407;
                                                                                if (v407 < v406)
                                                                                {
                                                                                  *v407 = v369;
                                                                                  v446 = v407 + 1;
                                                                                  goto LABEL_536;
                                                                                }
                                                                                v447 = (uint64_t *)v796;
                                                                                v448 = (char *)v407 - (_BYTE *)v796;
                                                                                v449 = ((char *)v407 - (_BYTE *)v796) >> 3;
                                                                                v450 = v449 + 1;
                                                                                if ((unint64_t)(v449 + 1) >> 61)
                                                                                  goto LABEL_884;
                                                                                v451 = (char *)v406 - (_BYTE *)v796;
                                                                                if (v451 >> 2 > v450)
                                                                                  v450 = v451 >> 2;
                                                                                if ((unint64_t)v451 >= 0x7FFFFFFFFFFFFFF8)
                                                                                  v452 = 0x1FFFFFFFFFFFFFFFLL;
                                                                                else
                                                                                  v452 = v450;
                                                                                if (v452)
                                                                                {
                                                                                  if (v452 >> 61)
                                                                                    goto LABEL_885;
                                                                                  v453 = operator new(8 * v452);
                                                                                  v454 = (uint64_t *)&v453[8 * v449];
                                                                                  v406 = (uint64_t *)&v453[8 * v452];
                                                                                  *v454 = v369;
                                                                                  v446 = v454 + 1;
                                                                                  v455 = (char *)v407 - (char *)v447;
                                                                                  if (v407 == v447)
                                                                                    goto LABEL_534;
                                                                                }
                                                                                else
                                                                                {
                                                                                  v453 = 0;
                                                                                  v454 = (uint64_t *)(8 * v449);
                                                                                  v406 = 0;
                                                                                  *(_QWORD *)(8 * v449) = v369;
                                                                                  v446 = (uint64_t *)(8 * v449 + 8);
                                                                                  v455 = (char *)v407 - (char *)v447;
                                                                                  if (v407 == v447)
                                                                                    goto LABEL_534;
                                                                                }
                                                                                v456 = v455 - 8;
                                                                                if (v456 >= 0x58)
                                                                                {
                                                                                  if ((unint64_t)((char *)v407 - &v453[v448]) >= 0x20)
                                                                                  {
                                                                                    v458 = (v456 >> 3) + 1;
                                                                                    v459 = 8
                                                                                         * (v458 & 0x3FFFFFFFFFFFFFFCLL);
                                                                                    v457 = &v407[v459
                                                                                               / 0xFFFFFFFFFFFFFFF8];
                                                                                    v454 = (uint64_t *)((char *)v454 - v459);
                                                                                    v460 = &v453[8 * v449 - 16];
                                                                                    v461 = v407 - 2;
                                                                                    v462 = v458 & 0x3FFFFFFFFFFFFFFCLL;
                                                                                    do
                                                                                    {
                                                                                      v463 = *(_OWORD *)v461;
                                                                                      *(v460 - 1) = *((_OWORD *)v461 - 1);
                                                                                      *v460 = v463;
                                                                                      v460 -= 2;
                                                                                      v461 -= 4;
                                                                                      v462 -= 4;
                                                                                    }
                                                                                    while (v462);
                                                                                    if (v458 == (v458 & 0x3FFFFFFFFFFFFFFCLL))
                                                                                    {
LABEL_534:
                                                                                      v796 = v454;
                                                                                      v797 = v446;
                                                                                      v798 = v406;
                                                                                      if (v447)
                                                                                      {
                                                                                        operator delete(v447);
                                                                                        v406 = v798;
                                                                                      }
LABEL_536:
                                                                                      v797 = v446;
                                                                                      if (v446 < v406)
                                                                                      {
                                                                                        v408 = v716;
                                                                                        *v446 = v716;
                                                                                        v465 = v446 + 1;
                                                                                        v368 = v709;
                                                                                        v797 = v465;
                                                                                        v710 = v35;
                                                                                        v409 = (int64x2_t *)v796;
                                                                                        v410 = (_BYTE *)v465
                                                                                             - (_BYTE *)v796;
                                                                                        if (v465 == v796)
                                                                                          goto LABEL_538;
                                                                                        goto LABEL_480;
                                                                                      }
                                                                                      v470 = (uint64_t *)v796;
                                                                                      v471 = (char *)v446
                                                                                           - (_BYTE *)v796;
                                                                                      v472 = ((char *)v446
                                                                                            - (_BYTE *)v796) >> 3;
                                                                                      v473 = v472 + 1;
                                                                                      if (!((unint64_t)(v472 + 1) >> 61))
                                                                                      {
                                                                                        v474 = (char *)v406
                                                                                             - (_BYTE *)v796;
                                                                                        if (v474 >> 2 > v473)
                                                                                          v473 = v474 >> 2;
                                                                                        if ((unint64_t)v474 >= 0x7FFFFFFFFFFFFFF8)
                                                                                          v475 = 0x1FFFFFFFFFFFFFFFLL;
                                                                                        else
                                                                                          v475 = v473;
                                                                                        if (!v475)
                                                                                        {
                                                                                          v476 = 0;
LABEL_600:
                                                                                          v515 = (uint64_t *)&v476[8 * v472];
                                                                                          v516 = &v476[8 * v475];
                                                                                          *v515 = v716;
                                                                                          v517 = v515 + 1;
                                                                                          if (v446 == v470)
                                                                                          {
                                                                                            v368 = v709;
                                                                                            v796 = &v476[8 * v472];
                                                                                            v797 = v515 + 1;
                                                                                            v798 = (uint64_t *)v516;
                                                                                            if (!v470)
                                                                                            {
LABEL_607:
                                                                                              v408 = v716;
                                                                                              v797 = v517;
                                                                                              v710 = v35;
                                                                                              v409 = (int64x2_t *)v796;
                                                                                              v410 = (_BYTE *)v517 - (_BYTE *)v796;
                                                                                              if (v517 == v796)
                                                                                                goto LABEL_538;
                                                                                              goto LABEL_480;
                                                                                            }
LABEL_606:
                                                                                            operator delete(v470);
                                                                                            goto LABEL_607;
                                                                                          }
                                                                                          v518 = (char *)v446
                                                                                               - (char *)v470
                                                                                               - 8;
                                                                                          if (v518 >= 0x58
                                                                                            && (unint64_t)((char *)v446 - &v476[v471]) >= 0x20)
                                                                                          {
                                                                                            v596 = (v518 >> 3) + 1;
                                                                                            v597 = 8
                                                                                                 * (v596 & 0x3FFFFFFFFFFFFFFCLL);
                                                                                            v519 = &v446[v597 / 0xFFFFFFFFFFFFFFF8];
                                                                                            v515 = (uint64_t *)((char *)v515 - v597);
                                                                                            v598 = &v476[8 * v472 - 16];
                                                                                            v599 = v446 - 2;
                                                                                            v600 = v596 & 0x3FFFFFFFFFFFFFFCLL;
                                                                                            do
                                                                                            {
                                                                                              v601 = *(_OWORD *)v599;
                                                                                              *(v598 - 1) = *((_OWORD *)v599 - 1);
                                                                                              *v598 = v601;
                                                                                              v598 -= 2;
                                                                                              v599 -= 4;
                                                                                              v600 -= 4;
                                                                                            }
                                                                                            while (v600);
                                                                                            v368 = v709;
                                                                                            if (v596 == (v596 & 0x3FFFFFFFFFFFFFFCLL))
                                                                                            {
LABEL_605:
                                                                                              v796 = v515;
                                                                                              v797 = v517;
                                                                                              v798 = (uint64_t *)v516;
                                                                                              if (!v470)
                                                                                                goto LABEL_607;
                                                                                              goto LABEL_606;
                                                                                            }
                                                                                          }
                                                                                          else
                                                                                          {
                                                                                            v519 = v446;
                                                                                            v368 = v709;
                                                                                          }
                                                                                          do
                                                                                          {
                                                                                            v520 = *--v519;
                                                                                            *--v515 = v520;
                                                                                          }
                                                                                          while (v519 != v470);
                                                                                          goto LABEL_605;
                                                                                        }
                                                                                        if (!(v475 >> 61))
                                                                                        {
                                                                                          v476 = operator new(8 * v475);
                                                                                          goto LABEL_600;
                                                                                        }
LABEL_885:
                                                                                        sub_239418A80();
                                                                                      }
LABEL_884:
                                                                                      sub_2394189F8();
                                                                                    }
                                                                                  }
                                                                                  else
                                                                                  {
                                                                                    v457 = v407;
                                                                                  }
                                                                                }
                                                                                else
                                                                                {
                                                                                  v457 = v407;
                                                                                }
                                                                                do
                                                                                {
                                                                                  v464 = *--v457;
                                                                                  *--v454 = v464;
                                                                                }
                                                                                while (v457 != v447);
                                                                                goto LABEL_534;
                                                                              }
                                                                            }
                                                                            else
                                                                            {
                                                                              v438 = v387;
                                                                            }
                                                                          }
                                                                          else
                                                                          {
                                                                            v438 = v387;
                                                                          }
                                                                          do
                                                                          {
                                                                            v445 = *--v438;
                                                                            *--v422 = v445;
                                                                          }
                                                                          while (v438 != v415);
                                                                          goto LABEL_511;
                                                                        }
                                                                      }
                                                                      else
                                                                      {
                                                                        v398 = v367;
                                                                      }
                                                                    }
                                                                    else
                                                                    {
                                                                      v398 = v367;
                                                                    }
                                                                    do
                                                                    {
                                                                      v405 = *--v398;
                                                                      *--v395 = v405;
                                                                    }
                                                                    while (v398 != v388);
                                                                    goto LABEL_474;
                                                                  }
                                                                  if (!(v393 >> 61))
                                                                  {
                                                                    v394 = operator new(8 * v393);
                                                                    goto LABEL_465;
                                                                  }
LABEL_883:
                                                                  sub_239418A80();
                                                                }
LABEL_882:
                                                                sub_2394189F8();
                                                              }
                                                            }
                                                            else
                                                            {
                                                              v379 = v349;
                                                            }
                                                          }
                                                          else
                                                          {
                                                            v379 = v349;
                                                          }
                                                          do
                                                          {
                                                            v386 = *--v379;
                                                            *--v377 = v386;
                                                          }
                                                          while (v379 != v370);
                                                          goto LABEL_451;
                                                        }
                                                      }
                                                      else
                                                      {
                                                        v341 = v311;
                                                      }
                                                    }
                                                    else
                                                    {
                                                      v341 = v311;
                                                    }
                                                    do
                                                    {
                                                      v348 = *--v341;
                                                      *--v338 = v348;
                                                    }
                                                    while (v341 != v331);
                                                    goto LABEL_404;
                                                  }
                                                }
                                                else
                                                {
                                                  v303 = v273;
                                                }
                                              }
                                              else
                                              {
                                                v303 = v273;
                                              }
                                              do
                                              {
                                                v310 = *--v303;
                                                *--v300 = v310;
                                              }
                                              while (v303 != v293);
                                              goto LABEL_358;
                                            }
                                          }
                                          else
                                          {
                                            v284 = v254;
                                          }
                                        }
                                        else
                                        {
                                          v284 = v254;
                                        }
                                        do
                                        {
                                          v291 = *--v284;
                                          *--v281 = v291;
                                        }
                                        while (v284 != v274);
                                        goto LABEL_335;
                                      }
                                    }
                                    else
                                    {
                                      v265 = v235;
                                    }
                                  }
                                  else
                                  {
                                    v265 = v235;
                                  }
                                  do
                                  {
                                    v272 = *--v265;
                                    *--v262 = v272;
                                  }
                                  while (v265 != v255);
                                  goto LABEL_312;
                                }
                              }
                              else
                              {
                                v246 = v216;
                              }
                            }
                            else
                            {
                              v246 = v216;
                            }
                            do
                            {
                              v253 = *--v246;
                              *--v243 = v253;
                            }
                            while (v246 != v236);
                            goto LABEL_289;
                          }
                        }
                        else
                        {
                          v227 = v197;
                        }
                      }
                      else
                      {
                        v227 = v197;
                      }
                      do
                      {
                        v234 = *--v227;
                        *--v224 = v234;
                      }
                      while (v227 != v217);
                      goto LABEL_266;
                    }
                  }
                  else
                  {
                    v208 = v178;
                  }
                }
                else
                {
                  v208 = v178;
                }
                do
                {
                  v215 = *--v208;
                  *--v205 = v215;
                }
                while (v208 != v198);
                goto LABEL_243;
              }
            }
            else
            {
              v152 = v123;
            }
          }
          else
          {
            v152 = v123;
          }
          do
          {
            v159 = *--v152;
            *--v149 = v159;
          }
          while (v152 != v142);
          goto LABEL_174;
        }
      }
      else
      {
        v61 = v49;
      }
      do
      {
        v68 = *--v61;
        *--v58 = v68;
      }
      while (v61 != v52);
      goto LABEL_59;
    }
  }
  sub_2394202DC((_QWORD *)(v818 + 176), 7006);
  v42 = 0;
LABEL_714:
  v590 = (_QWORD *)v802;
  if ((_QWORD)v802)
  {
    do
    {
      v591 = (_QWORD *)*v590;
      operator delete(v590);
      v590 = v591;
    }
    while (v591);
  }
  v592 = (void *)v801;
  *(_QWORD *)&v801 = 0;
  if (v592)
    operator delete(v592);
  v24 = v714;
  if (v806)
  {
    v807 = v806;
    operator delete(v806);
  }
LABEL_720:
  objc_autoreleasePoolPop(v24);
  return v42;
}

void sub_23954027C(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_239416A48(a1);
  _Unwind_Resume(a1);
}

uint64_t sub_239540798(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  void **v6;
  _QWORD *v7;
  void *v8;
  uint64_t v9;
  _QWORD *v10;
  int v11;
  void *v12;
  void *v13;
  uint64_t v14;
  _QWORD *v15;
  int v16;
  void *v17;
  void *v18;
  void *v20;

  v4 = *(void **)a1;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = v4;
    operator delete(v4);
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  v5 = *(void **)(a1 + 24);
  if (v5)
  {
    *(_QWORD *)(a1 + 32) = v5;
    operator delete(v5);
    *(_QWORD *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 40) = 0;
  }
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  v6 = (void **)(a1 + 48);
  v7 = (_QWORD *)(a2 + 48);
  if (*(unsigned __int8 *)(a1 + 72) == *(unsigned __int8 *)(a2 + 72))
  {
    if (*(_BYTE *)(a1 + 72))
    {
      v8 = *v6;
      if (*v6)
      {
        *(_QWORD *)(a1 + 56) = v8;
        operator delete(v8);
        *v6 = 0;
        *(_QWORD *)(a1 + 56) = 0;
        *(_QWORD *)(a1 + 64) = 0;
      }
      *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
      *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
      *v7 = 0;
      *(_QWORD *)(a2 + 56) = 0;
      *(_QWORD *)(a2 + 64) = 0;
      v9 = a1 + 80;
      v10 = (_QWORD *)(a2 + 80);
      v11 = *(unsigned __int8 *)(a1 + 104);
      if (v11 != *(unsigned __int8 *)(a2 + 104))
        goto LABEL_22;
LABEL_16:
      if (v11)
      {
        v13 = *(void **)v9;
        if (*(_QWORD *)v9)
        {
          *(_QWORD *)(a1 + 88) = v13;
          operator delete(v13);
          *(_QWORD *)v9 = 0;
          *(_QWORD *)(v9 + 8) = 0;
          *(_QWORD *)(v9 + 16) = 0;
        }
        *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
        *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
        *v10 = 0;
        v10[1] = 0;
        v10[2] = 0;
        v14 = a1 + 112;
        v15 = (_QWORD *)(a2 + 112);
        v16 = *(unsigned __int8 *)(a1 + 136);
        if (v16 == *(unsigned __int8 *)(a2 + 136))
          goto LABEL_27;
        goto LABEL_33;
      }
      goto LABEL_26;
    }
    goto LABEL_15;
  }
  if (*(_BYTE *)(a1 + 72))
  {
    v12 = *v6;
    if (*v6)
    {
      *(_QWORD *)(a1 + 56) = v12;
      operator delete(v12);
    }
    *(_BYTE *)(a1 + 72) = 0;
LABEL_15:
    v9 = a1 + 80;
    v10 = (_QWORD *)(a2 + 80);
    v11 = *(unsigned __int8 *)(a1 + 104);
    if (v11 == *(unsigned __int8 *)(a2 + 104))
      goto LABEL_16;
    goto LABEL_22;
  }
  *v6 = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *v7 = 0;
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  *(_BYTE *)(a1 + 72) = 1;
  v9 = a1 + 80;
  v10 = (_QWORD *)(a2 + 80);
  v11 = *(unsigned __int8 *)(a1 + 104);
  if (v11 == *(unsigned __int8 *)(a2 + 104))
    goto LABEL_16;
LABEL_22:
  if (!v11)
  {
    *(_QWORD *)v9 = 0;
    *(_QWORD *)(v9 + 8) = 0;
    *(_QWORD *)(v9 + 16) = 0;
    *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
    *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
    *v10 = 0;
    v10[1] = 0;
    v10[2] = 0;
    *(_BYTE *)(a1 + 104) = 1;
    v14 = a1 + 112;
    v15 = (_QWORD *)(a2 + 112);
    v16 = *(unsigned __int8 *)(a1 + 136);
    if (v16 == *(unsigned __int8 *)(a2 + 136))
      goto LABEL_27;
    goto LABEL_33;
  }
  v17 = *(void **)v9;
  if (*(_QWORD *)v9)
  {
    *(_QWORD *)(a1 + 88) = v17;
    operator delete(v17);
  }
  *(_BYTE *)(a1 + 104) = 0;
LABEL_26:
  v14 = a1 + 112;
  v15 = (_QWORD *)(a2 + 112);
  v16 = *(unsigned __int8 *)(a1 + 136);
  if (v16 == *(unsigned __int8 *)(a2 + 136))
  {
LABEL_27:
    if (v16)
    {
      v18 = *(void **)v14;
      if (*(_QWORD *)v14)
      {
        *(_QWORD *)(a1 + 120) = v18;
        operator delete(v18);
        *(_QWORD *)v14 = 0;
        *(_QWORD *)(v14 + 8) = 0;
        *(_QWORD *)(v14 + 16) = 0;
      }
      *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
      *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
      *v15 = 0;
      v15[1] = 0;
      v15[2] = 0;
    }
    return a1;
  }
LABEL_33:
  if (v16)
  {
    v20 = *(void **)v14;
    if (*(_QWORD *)v14)
    {
      *(_QWORD *)(a1 + 120) = v20;
      operator delete(v20);
    }
    *(_BYTE *)(a1 + 136) = 0;
    return a1;
  }
  else
  {
    *(_QWORD *)v14 = 0;
    *(_QWORD *)(v14 + 8) = 0;
    *(_QWORD *)(v14 + 16) = 0;
    *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
    *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
    *v15 = 0;
    v15[1] = 0;
    v15[2] = 0;
    *(_BYTE *)(a1 + 136) = 1;
    return a1;
  }
}

void sub_239540A60(_QWORD *a1, unint64_t a2)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;

  v2 = 0xAAAAAAAAAAAAAAABLL * (a1[1] - *a1);
  v3 = a2 >= v2;
  v4 = a2 - v2;
  if (v4 != 0 && v3)
  {
    sub_2395477D8(a1, v4);
  }
  else if (!v3)
  {
    a1[1] = *a1 + 3 * a2;
  }
}

void sub_239540A98(uint64_t *a1)
{
  uint64_t v2;
  uint64_t i;
  void *v4;
  void *v5;

  v2 = *a1;
  for (i = a1[1]; i != v2; i -= 56)
  {
    v4 = *(void **)(i - 32);
    if (v4)
    {
      *(_QWORD *)(i - 24) = v4;
      operator delete(v4);
    }
    v5 = *(void **)(i - 56);
    if (v5)
    {
      *(_QWORD *)(i - 48) = v5;
      operator delete(v5);
    }
  }
  a1[1] = v2;
}

uint64_t sub_239540AF8(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  char v16;
  void *__p;
  void *v18;
  char *v19;
  void *v20;
  void *v21;
  char *v22;
  void *v23;
  void *v24;
  char *v25;
  _QWORD v26[3];
  _QWORD *v27;
  unint64_t v28[45];

  v28[44] = *MEMORY[0x24BDAC8D0];
  v3 = *a1;
  v2 = a1[1];
  v24 = 0;
  v25 = 0;
  v23 = 0;
  v4 = v2 - v3;
  if (v4)
  {
    v5 = v4 / 56;
    if ((unint64_t)(v4 / 56) >> 62)
      sub_2394189F8();
    v6 = (char *)operator new(4 * v5);
    v7 = &v6[4 * v5];
    v23 = v6;
    v25 = v7;
    bzero(v6, 4 * v5);
    v24 = v7;
    v8 = (char *)operator new(4 * v5);
    v9 = &v8[4 * v5];
    v20 = v8;
    v22 = v9;
    bzero(v8, 4 * v5);
    v21 = v9;
    __p = operator new(4 * v5);
    v19 = (char *)__p + 4 * v5;
    bzero(__p, 4 * v5);
    v18 = v19;
  }
  else
  {
    v20 = 0;
    v21 = 0;
    v22 = 0;
    __p = 0;
    v18 = 0;
    v19 = 0;
  }
  sub_2397A2A50((uint64_t)v28, 0, 0);
  v11 = *a1;
  v10 = a1[1];
  v12 = operator new(0x38uLL);
  *v12 = &off_250ADDBA0;
  v12[1] = a1;
  v12[2] = &__p;
  v12[3] = &v23;
  v12[4] = &v20;
  v12[5] = &v16;
  *((_DWORD *)v12 + 12) = 7;
  v27 = v12;
  sub_2397A376C(v28, 0x6DB6DB6DB6DB6DB7 * ((v10 - v11) >> 3), v26, 0);
  v13 = v27;
  if (v27 == v26)
  {
    v14 = 4;
    v13 = v26;
  }
  else
  {
    if (!v27)
      goto LABEL_10;
    v14 = 5;
  }
  (*(void (**)(void))(*v13 + 8 * v14))();
LABEL_10:
  sub_2397A2E14(v28);
  if (__p)
  {
    v18 = __p;
    operator delete(__p);
  }
  if (v20)
  {
    v21 = v20;
    operator delete(v20);
  }
  if (v23)
  {
    v24 = v23;
    operator delete(v23);
  }
  return 1;
}

void sub_239540D04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  void *v25;

  if (a14)
  {
    operator delete(a14);
    v25 = __p;
    if (!__p)
LABEL_4:
      _Unwind_Resume(exception_object);
  }
  else
  {
    v25 = __p;
    if (!__p)
      goto LABEL_4;
  }
  operator delete(v25);
  goto LABEL_4;
}

uint64_t sub_239540DC0(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      sub_239416DA0((uint64_t)(v2 + 4));
      nullsub_4(v2 + 3);
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

uint64_t *sub_239540E28(uint64_t a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  uint64_t **v10;
  uint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t prime;
  unint64_t v22;
  uint8x8_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  unint64_t v27;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v8 <= v7)
        v4 = v7 % v8;
    }
    else
    {
      v4 = ((_DWORD)v8 - 1) & v7;
    }
    v10 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      v11 = *v10;
      if (*v10)
      {
        if (v9.u32[0] < 2uLL)
        {
          while (1)
          {
            v13 = v11[1];
            if (v13 == v7)
            {
              if (*((_DWORD *)v11 + 4) == (_DWORD)v7)
                return v11;
            }
            else if ((v13 & (v8 - 1)) != v4)
            {
              goto LABEL_23;
            }
            v11 = (uint64_t *)*v11;
            if (!v11)
              goto LABEL_23;
          }
        }
        do
        {
          v12 = v11[1];
          if (v12 == v7)
          {
            if (*((_DWORD *)v11 + 4) == (_DWORD)v7)
              return v11;
          }
          else
          {
            if (v12 >= v8)
              v12 %= v8;
            if (v12 != v4)
              break;
          }
          v11 = (uint64_t *)*v11;
        }
        while (v11);
      }
    }
  }
LABEL_23:
  v15 = operator new(0x20uLL);
  *v15 = 0;
  v15[1] = v7;
  *((_DWORD *)v15 + 4) = **a4;
  v15[3] = 0;
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (v8 && (float)(v17 * (float)v8) >= v16)
  {
    v7 = v4;
  }
  else
  {
    v18 = 1;
    if (v8 >= 3)
      v18 = (v8 & (v8 - 1)) != 0;
    v19 = v18 | (2 * v8);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      prime = v20;
    else
      prime = v19;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v8 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v8)
      goto LABEL_36;
    if (prime < v8)
    {
      v22 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v8 < 3 || (v23 = (uint8x8_t)vcnt_s8((int8x8_t)v8), v23.i16[0] = vaddlv_u8(v23), v23.u32[0] > 1uLL))
      {
        v22 = std::__next_prime(v22);
      }
      else
      {
        v24 = 1 << -(char)__clz(v22 - 1);
        if (v22 >= 2)
          v22 = v24;
      }
      if (prime <= v22)
        prime = v22;
      if (prime < v8)
LABEL_36:
        sub_239427FE0(a1, prime);
    }
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7)
        v7 %= v8;
    }
    else
    {
      v7 = ((_DWORD)v8 - 1) & v7;
    }
  }
  v25 = *(_QWORD *)a1;
  v26 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v7);
  if (v26)
  {
    *v15 = *v26;
LABEL_59:
    *v26 = v15;
    goto LABEL_60;
  }
  *v15 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v15;
  *(_QWORD *)(v25 + 8 * v7) = a1 + 16;
  if (*v15)
  {
    v27 = *(_QWORD *)(*v15 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v27 >= v8)
        v27 %= v8;
    }
    else
    {
      v27 &= v8 - 1;
    }
    v26 = (_QWORD *)(*(_QWORD *)a1 + 8 * v27);
    goto LABEL_59;
  }
LABEL_60:
  ++*(_QWORD *)(a1 + 24);
  return v15;
}

void sub_23954111C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

float *sub_239541130(float *result, float *a2, uint64_t a3, uint64_t a4, char a5)
{
  float *v9;
  float *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  float *v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float *v24;
  float *v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float *v33;
  float *v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  uint64_t v45;
  float v46;
  float *v47;
  float *v48;
  float v49;
  float v50;
  float v51;
  float *v52;
  float *v53;
  float v54;
  float v55;
  float *v56;
  BOOL v57;
  float v58;
  float *v59;
  float *v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float *v66;
  float v67;
  float v68;
  float v69;
  float v70;
  int v71;
  float v72;
  float v73;
  float v74;
  int v75;
  float v76;
  float v77;
  int v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float v86;
  float v87;
  int v88;
  float v89;
  int v90;
  float v91;
  float v92;
  int v93;
  float v94;
  float v95;
  float v96;
  float v97;
  int v98;
  float v99;
  float v100;
  float v101;
  int v102;
  float v103;
  float v104;
  float v105;
  float v106;
  float v107;
  float *v108;
  BOOL v110;
  uint64_t v111;
  float *v112;
  float *v113;
  float v114;
  float v115;
  uint64_t v116;
  float v117;
  float v118;
  float *v119;

  v9 = result;
LABEL_2:
  v10 = v9;
  while (2)
  {
    v9 = v10;
    v11 = (char *)a2 - (char *)v10;
    v12 = a2 - v10;
    switch(v12)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v67 = *(a2 - 1);
        v68 = *v10;
        if (v67 > *v10)
        {
          *v10 = v67;
          *(a2 - 1) = v68;
        }
        return result;
      case 3uLL:
        v69 = v10[1];
        v70 = *(a2 - 1);
        if (v69 <= v70)
          v71 = *((_DWORD *)a2 - 1);
        else
          v71 = *((_DWORD *)v10 + 1);
        if (v69 > v70)
          v69 = *(a2 - 1);
        *(a2 - 1) = v69;
        *((_DWORD *)v10 + 1) = v71;
        v72 = *(a2 - 1);
        if (v72 <= *v10)
          v73 = *v10;
        else
          v73 = *(a2 - 1);
        if (v72 > *v10)
          v72 = *v10;
        *(a2 - 1) = v72;
        v75 = *(_DWORD *)v10;
        v74 = v10[1];
        if (v73 <= v74)
        {
          v75 = *((_DWORD *)v10 + 1);
          v74 = v73;
        }
        *(_DWORD *)v10 = v75;
        v10[1] = v74;
        return result;
      case 4uLL:
        v77 = v10[1];
        v76 = v10[2];
        if (*v10 <= v76)
          v78 = *((_DWORD *)v10 + 2);
        else
          v78 = *(_DWORD *)v10;
        if (*v10 <= v76)
          v76 = *v10;
        v10[2] = v76;
        *(_DWORD *)v10 = v78;
        v79 = *(a2 - 1);
        if (v77 <= v79)
          v80 = *(a2 - 1);
        else
          v80 = v77;
        if (v77 <= v79)
          v79 = v77;
        *(a2 - 1) = v79;
        v81 = *v10;
        if (*v10 <= v80)
          v82 = v80;
        else
          v82 = *v10;
        if (*v10 > v80)
          v81 = v80;
        *v10 = v82;
        v10[1] = v81;
        v83 = v10[2];
        v84 = *(a2 - 1);
        if (v83 <= v84)
          v85 = *(a2 - 1);
        else
          v85 = v10[2];
        if (v83 > v84)
          v83 = *(a2 - 1);
        *(a2 - 1) = v83;
        v86 = v10[1];
        if (v86 <= v85)
          v87 = v85;
        else
          v87 = v10[1];
        if (v86 > v85)
          v86 = v85;
        v10[1] = v87;
        v10[2] = v86;
        return result;
      case 5uLL:
        v88 = *(_DWORD *)v10;
        v89 = v10[1];
        if (*v10 <= v89)
          v90 = *((_DWORD *)v10 + 1);
        else
          v90 = *(_DWORD *)v10;
        if (*v10 > v89)
          v88 = *((_DWORD *)v10 + 1);
        *(_DWORD *)v10 = v90;
        *((_DWORD *)v10 + 1) = v88;
        v91 = v10[3];
        v92 = *(a2 - 1);
        if (v91 <= v92)
          v93 = *((_DWORD *)a2 - 1);
        else
          v93 = *((_DWORD *)v10 + 3);
        if (v91 > v92)
          v91 = *(a2 - 1);
        *(a2 - 1) = v91;
        *((_DWORD *)v10 + 3) = v93;
        v94 = *(a2 - 1);
        v95 = v10[2];
        if (v94 <= v95)
          v96 = v10[2];
        else
          v96 = *(a2 - 1);
        if (v94 > v95)
          v94 = v10[2];
        *(a2 - 1) = v94;
        v98 = *((_DWORD *)v10 + 2);
        v97 = v10[3];
        v99 = v10[1];
        if (v96 <= v97)
        {
          v98 = *((_DWORD *)v10 + 3);
          v97 = v96;
        }
        *((_DWORD *)v10 + 2) = v98;
        v10[3] = v97;
        v100 = *(a2 - 1);
        if (v99 <= v100)
          v101 = *(a2 - 1);
        else
          v101 = v99;
        if (v99 <= v100)
          v100 = v99;
        *(a2 - 1) = v100;
        v102 = *(_DWORD *)v10;
        v104 = v10[2];
        v103 = v10[3];
        if (v103 <= *v10)
          v105 = *v10;
        else
          v105 = v10[3];
        if (v103 > *v10)
          v103 = *v10;
        if (v105 <= v104)
        {
          v102 = *((_DWORD *)v10 + 2);
          v104 = v105;
        }
        if (v103 <= v101)
          v106 = v101;
        else
          v106 = v103;
        if (v103 > v101)
          v103 = v101;
        if (v106 <= v104)
          v101 = v104;
        *(_DWORD *)v10 = v102;
        v10[1] = v101;
        if (v106 <= v104)
          v107 = v106;
        else
          v107 = v104;
        v10[2] = v107;
        v10[3] = v103;
        return result;
      default:
        if (v11 > 95)
        {
          if (!a4)
          {
            if (v10 != a2)
              return sub_239541B7C(v10, a2, a2);
            return result;
          }
          v13 = v12 >> 1;
          v14 = &v10[v12 >> 1];
          v15 = *(a2 - 1);
          if ((unint64_t)v11 < 0x201)
          {
            v18 = *v10;
            v19 = *v14;
            if (*v10 <= *v14)
            {
              if (v15 > v18)
              {
                *v10 = v15;
                *(a2 - 1) = v18;
                v21 = *v14;
                if (*v10 > *v14)
                {
                  *v14 = *v10;
                  *v10 = v21;
                  --a4;
                  v22 = *v10;
                  if ((a5 & 1) != 0)
                    goto LABEL_55;
                  goto LABEL_54;
                }
              }
              goto LABEL_32;
            }
            if (v15 <= v18)
            {
              *v14 = v18;
              *v10 = v19;
              v31 = *(a2 - 1);
              if (v31 <= v19)
                goto LABEL_32;
              *v10 = v31;
            }
            else
            {
              *v14 = v15;
            }
            *(a2 - 1) = v19;
LABEL_32:
            --a4;
            v22 = *v10;
            if ((a5 & 1) != 0)
              goto LABEL_55;
            goto LABEL_54;
          }
          v16 = *v14;
          v17 = *v10;
          if (*v14 <= *v10)
          {
            if (v15 > v16)
            {
              *v14 = v15;
              *(a2 - 1) = v16;
              v20 = *v10;
              if (*v14 > *v10)
              {
                *v10 = *v14;
                *v14 = v20;
              }
            }
          }
          else
          {
            if (v15 <= v16)
            {
              *v10 = v16;
              *v14 = v17;
              v23 = *(a2 - 1);
              if (v23 <= v17)
                goto LABEL_23;
              *v14 = v23;
            }
            else
            {
              *v10 = v15;
            }
            *(a2 - 1) = v17;
          }
LABEL_23:
          v24 = &v10[v13];
          v26 = *(v24 - 1);
          v25 = v24 - 1;
          v27 = v26;
          v28 = v10[1];
          v29 = *(a2 - 2);
          if (v26 <= v28)
          {
            if (v29 > v27)
            {
              *v25 = v29;
              *(a2 - 2) = v27;
              v30 = v10[1];
              if (*v25 > v30)
              {
                v10[1] = *v25;
                *v25 = v30;
              }
            }
          }
          else
          {
            if (v29 <= v27)
            {
              v10[1] = v27;
              *v25 = v28;
              v32 = *(a2 - 2);
              if (v32 <= v28)
                goto LABEL_37;
              *v25 = v32;
            }
            else
            {
              v10[1] = v29;
            }
            *(a2 - 2) = v28;
          }
LABEL_37:
          v33 = &v10[v13];
          v35 = v33[1];
          v34 = v33 + 1;
          v36 = v35;
          v37 = v10[2];
          v38 = *(a2 - 3);
          if (v35 <= v37)
          {
            if (v38 > v36)
            {
              *v34 = v38;
              *(a2 - 3) = v36;
              v39 = v10[2];
              if (*v34 > v39)
              {
                v10[2] = *v34;
                *v34 = v39;
              }
            }
          }
          else
          {
            if (v38 <= v36)
            {
              v10[2] = v36;
              *v34 = v37;
              v40 = *(a2 - 3);
              if (v40 <= v37)
                goto LABEL_46;
              *v34 = v40;
            }
            else
            {
              v10[2] = v38;
            }
            *(a2 - 3) = v37;
          }
LABEL_46:
          v41 = *v14;
          v42 = *v25;
          v43 = *v34;
          if (*v14 > *v25)
          {
            if (v43 <= v41)
            {
              *v25 = v41;
              *v14 = v42;
              v25 = v14;
              v41 = v43;
              if (v43 <= v42)
              {
                v41 = v42;
                goto LABEL_53;
              }
            }
LABEL_52:
            *v25 = v43;
            *v34 = v42;
            goto LABEL_53;
          }
          if (v43 <= v41)
            goto LABEL_53;
          *v14 = v43;
          *v34 = v41;
          v34 = v14;
          v41 = v42;
          if (v43 > v42)
            goto LABEL_52;
          v41 = v43;
LABEL_53:
          v44 = *v10;
          *v10 = v41;
          *v14 = v44;
          --a4;
          v22 = *v10;
          if ((a5 & 1) != 0)
            goto LABEL_55;
LABEL_54:
          if (*(v10 - 1) <= v22)
          {
            if (v22 <= *(a2 - 1))
            {
              v59 = v10 + 1;
              do
              {
                v10 = v59;
                if (v59 >= a2)
                  break;
                ++v59;
              }
              while (v22 <= *v10);
            }
            else
            {
              do
              {
                v58 = v10[1];
                ++v10;
              }
              while (v22 <= v58);
            }
            v60 = a2;
            if (v10 < a2)
            {
              v60 = a2;
              do
                v61 = *--v60;
              while (v22 > v61);
            }
            if (v10 < v60)
            {
              v62 = *v10;
              v63 = *v60;
              do
              {
                *v10 = v63;
                *v60 = v62;
                do
                {
                  v64 = v10[1];
                  ++v10;
                  v62 = v64;
                }
                while (v22 <= v64);
                do
                {
                  v65 = *--v60;
                  v63 = v65;
                }
                while (v22 > v65);
              }
              while (v10 < v60);
            }
            v66 = v10 - 1;
            if (v10 - 1 != v9)
              *v9 = *v66;
            a5 = 0;
            *v66 = v22;
            continue;
          }
LABEL_55:
          v45 = 0;
          do
            v46 = v10[++v45];
          while (v46 > v22);
          v47 = &v10[v45];
          v48 = a2;
          if (v45 == 1)
          {
            v48 = a2;
            do
            {
              if (v47 >= v48)
                break;
              v50 = *--v48;
            }
            while (v50 <= v22);
          }
          else
          {
            do
              v49 = *--v48;
            while (v49 <= v22);
          }
          if (v47 < v48)
          {
            v51 = *v48;
            v52 = &v10[v45];
            v53 = v48;
            do
            {
              *v52 = v51;
              *v53 = v46;
              do
              {
                v54 = v52[1];
                ++v52;
                v46 = v54;
              }
              while (v54 > v22);
              do
              {
                v55 = *--v53;
                v51 = v55;
              }
              while (v55 <= v22);
            }
            while (v52 < v53);
            v56 = v52 - 1;
            if (v52 - 1 == v10)
              goto LABEL_73;
LABEL_72:
            *v10 = *v56;
            goto LABEL_73;
          }
          v56 = v47 - 1;
          if (v47 - 1 != v10)
            goto LABEL_72;
LABEL_73:
          *v56 = v22;
          if (v47 < v48)
            goto LABEL_76;
          v57 = sub_2395418C0(v10, v56);
          v10 = v56 + 1;
          result = (float *)sub_2395418C0(v56 + 1, a2);
          if (!(_DWORD)result)
          {
            if (v57)
              continue;
LABEL_76:
            result = (float *)sub_239541130(v9, v56, a3, a4, a5 & 1);
            a5 = 0;
            v10 = v56 + 1;
            continue;
          }
          a2 = v56;
          if (v57)
            return result;
          goto LABEL_2;
        }
        v108 = v10 + 1;
        v110 = v10 == a2 || v108 == a2;
        if ((a5 & 1) != 0)
        {
          if (!v110)
          {
            v111 = 0;
            v112 = v10;
            do
            {
              v115 = *v112;
              v114 = v112[1];
              v112 = v108;
              if (v114 > v115)
              {
                v116 = v111;
                do
                {
                  *(float *)((char *)v10 + v116 + 4) = v115;
                  if (!v116)
                  {
                    v113 = v10;
                    goto LABEL_191;
                  }
                  v115 = *(float *)((char *)v10 + v116 - 4);
                  v116 -= 4;
                }
                while (v114 > v115);
                v113 = (float *)((char *)v10 + v116 + 4);
LABEL_191:
                *v113 = v114;
              }
              v108 = v112 + 1;
              v111 += 4;
            }
            while (v112 + 1 != a2);
          }
        }
        else if (!v110)
        {
          do
          {
            v118 = *v9;
            v117 = v9[1];
            v9 = v108;
            if (v117 > v118)
            {
              v119 = v108;
              do
              {
                *v119 = v118;
                v118 = *(v119 - 2);
                --v119;
              }
              while (v117 > v118);
              *v119 = v117;
            }
            ++v108;
          }
          while (v9 + 1 != a2);
        }
        return result;
    }
  }
}

BOOL sub_2395418C0(float *a1, float *a2)
{
  float *v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float *v10;
  int v11;
  uint64_t v12;
  float v13;
  float v14;
  uint64_t v15;
  uint64_t v16;
  float v17;
  float v18;
  float v19;
  float v20;
  int v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  int v31;
  float v32;
  float v33;
  float v34;
  float v35;
  int v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;

  switch(a2 - a1)
  {
    case 0:
    case 1:
      return 1;
    case 2:
      v17 = *(a2 - 1);
      v18 = *a1;
      if (v17 <= *a1)
        return 1;
      *a1 = v17;
      *(a2 - 1) = v18;
      return 1;
    case 3:
      v19 = a1[1];
      v20 = *(a2 - 1);
      if (v19 <= v20)
        v21 = *((_DWORD *)a2 - 1);
      else
        v21 = *((_DWORD *)a1 + 1);
      if (v19 > v20)
        v19 = *(a2 - 1);
      *(a2 - 1) = v19;
      *((_DWORD *)a1 + 1) = v21;
      v22 = *(a2 - 1);
      if (v22 <= *a1)
        v23 = *a1;
      else
        v23 = *(a2 - 1);
      if (v22 > *a1)
        v22 = *a1;
      *(a2 - 1) = v22;
      v25 = *a1;
      v24 = a1[1];
      if (v23 <= v24)
      {
        v25 = a1[1];
        v24 = v23;
      }
      *a1 = v25;
      a1[1] = v24;
      return 1;
    case 4:
      v47 = a1[1];
      v46 = a1[2];
      if (*a1 <= v46)
        v48 = a1[2];
      else
        v48 = *a1;
      if (*a1 <= v46)
        v46 = *a1;
      a1[2] = v46;
      *a1 = v48;
      v49 = *(a2 - 1);
      if (v47 <= v49)
        v50 = *(a2 - 1);
      else
        v50 = v47;
      if (v47 <= v49)
        v49 = v47;
      *(a2 - 1) = v49;
      v51 = *a1;
      if (*a1 <= v50)
        v52 = v50;
      else
        v52 = *a1;
      if (*a1 > v50)
        v51 = v50;
      *a1 = v52;
      a1[1] = v51;
      v53 = a1[2];
      v54 = *(a2 - 1);
      if (v53 <= v54)
        v55 = *(a2 - 1);
      else
        v55 = a1[2];
      if (v53 > v54)
        v53 = *(a2 - 1);
      *(a2 - 1) = v53;
      v56 = a1[1];
      if (v56 <= v55)
        v57 = v55;
      else
        v57 = a1[1];
      if (v56 > v55)
        v56 = v55;
      a1[1] = v57;
      a1[2] = v56;
      return 1;
    case 5:
      v26 = *a1;
      v27 = a1[1];
      if (*a1 <= v27)
        v28 = a1[1];
      else
        v28 = *a1;
      if (*a1 > v27)
        v26 = a1[1];
      *a1 = v28;
      a1[1] = v26;
      v29 = a1[3];
      v30 = *(a2 - 1);
      if (v29 <= v30)
        v31 = *((_DWORD *)a2 - 1);
      else
        v31 = *((_DWORD *)a1 + 3);
      if (v29 > v30)
        v29 = *(a2 - 1);
      *(a2 - 1) = v29;
      *((_DWORD *)a1 + 3) = v31;
      v32 = *(a2 - 1);
      v33 = a1[2];
      if (v32 <= v33)
        v34 = a1[2];
      else
        v34 = *(a2 - 1);
      if (v32 > v33)
        v32 = a1[2];
      *(a2 - 1) = v32;
      v36 = *((_DWORD *)a1 + 2);
      v35 = a1[3];
      v37 = a1[1];
      if (v34 <= v35)
      {
        v36 = *((_DWORD *)a1 + 3);
        v35 = v34;
      }
      *((_DWORD *)a1 + 2) = v36;
      a1[3] = v35;
      v38 = *(a2 - 1);
      if (v37 <= v38)
        v39 = *(a2 - 1);
      else
        v39 = v37;
      if (v37 <= v38)
        v38 = v37;
      *(a2 - 1) = v38;
      v40 = *a1;
      v42 = a1[2];
      v41 = a1[3];
      if (v41 <= *a1)
        v43 = *a1;
      else
        v43 = a1[3];
      if (v41 > *a1)
        v41 = *a1;
      if (v43 <= v42)
      {
        v40 = a1[2];
        v42 = v43;
      }
      if (v41 <= v39)
        v44 = v39;
      else
        v44 = v41;
      if (v41 > v39)
        v41 = v39;
      if (v44 <= v42)
        v39 = v42;
      *a1 = v40;
      a1[1] = v39;
      if (v44 <= v42)
        v45 = v44;
      else
        v45 = v42;
      a1[2] = v45;
      a1[3] = v41;
      return 1;
    default:
      v3 = a1 + 2;
      v4 = a1[2];
      v6 = *a1;
      v5 = a1[1];
      if (v5 <= v4)
        v7 = a1[2];
      else
        v7 = a1[1];
      if (v5 <= v4)
        v4 = a1[1];
      if (v4 <= v6)
        v8 = *a1;
      else
        v8 = v4;
      if (v4 > v6)
        v4 = *a1;
      *v3 = v4;
      if (v8 <= v7)
        v9 = v7;
      else
        v9 = v6;
      if (v8 > v7)
        v8 = v7;
      *a1 = v9;
      a1[1] = v8;
      v10 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v11 = 0;
      v12 = 12;
      break;
  }
  while (1)
  {
    v13 = *v10;
    v14 = *v3;
    if (*v10 > *v3)
      break;
LABEL_27:
    v3 = v10;
    v12 += 4;
    if (++v10 == a2)
      return 1;
  }
  v15 = v12;
  do
  {
    *(float *)((char *)a1 + v15) = v14;
    v16 = v15 - 4;
    if (v15 == 4)
    {
      *a1 = v13;
      if (++v11 != 8)
        goto LABEL_27;
      return v10 + 1 == a2;
    }
    v14 = *(float *)((char *)a1 + v15 - 8);
    v15 -= 4;
  }
  while (v13 > v14);
  *(float *)((char *)a1 + v16) = v13;
  if (++v11 != 8)
    goto LABEL_27;
  return v10 + 1 == a2;
}

float *sub_239541B7C(float *a1, float *a2, float *a3)
{
  uint64_t v3;
  uint64_t v4;
  float *v5;
  float v6;
  float *v7;
  float v8;
  float *v9;
  float *v10;
  float *v11;
  float v12;
  float *v13;
  uint64_t v14;
  float v15;
  float *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  float v22;
  float *v23;
  float *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  float *v29;
  float v30;
  int64_t v32;
  int64_t v33;
  uint64_t v34;
  float *v35;
  float *v36;
  float v37;
  float v38;
  uint64_t v39;
  uint64_t v40;

  if (a1 == a2)
    return a3;
  v3 = (char *)a2 - (char *)a1;
  v4 = a2 - a1;
  if ((char *)a2 - (char *)a1 >= 5 && (unint64_t)v3 >= 8)
  {
    v32 = (unint64_t)(v4 - 2) >> 1;
    v33 = v32;
    do
    {
      if (v32 >= v33)
      {
        v34 = (2 * v33) | 1;
        v35 = &a1[v34];
        if (2 * v33 + 2 < v4 && *v35 > v35[1])
        {
          ++v35;
          v34 = 2 * v33 + 2;
        }
        v36 = &a1[v33];
        v37 = *v35;
        v38 = *v36;
        if (*v35 <= *v36)
        {
          do
          {
            *v36 = v37;
            v36 = v35;
            if (v32 < v34)
              break;
            v39 = 2 * v34;
            v34 = (2 * v34) | 1;
            v35 = &a1[v34];
            v40 = v39 + 2;
            if (v40 < v4 && *v35 > v35[1])
            {
              ++v35;
              v34 = v40;
            }
            v37 = *v35;
          }
          while (*v35 <= v38);
          *v36 = v38;
        }
      }
      v20 = v33-- <= 0;
    }
    while (!v20);
  }
  v5 = a2;
  if (a2 != a3)
  {
    if (v3 < 8)
    {
      v6 = *a1;
      v7 = a2;
      do
      {
        v8 = *v7;
        if (*v7 > v6)
        {
          *v7 = v6;
          *a1 = v8;
          v6 = v8;
        }
        ++v7;
      }
      while (v7 != a3);
LABEL_25:
      v5 = a3;
      goto LABEL_26;
    }
    v9 = a1 + 1;
    v10 = a1 + 2;
    v11 = a2;
    while (1)
    {
      v12 = *v11;
      if (*v11 > *a1)
      {
        *v11 = *a1;
        *a1 = v12;
        if (v3 == 8 || *v9 <= *v10)
        {
          v13 = a1 + 1;
          v14 = 1;
          v15 = *v9;
          if (*v9 <= v12)
          {
LABEL_19:
            v16 = a1;
            do
            {
              *v16 = v15;
              v16 = v13;
              if ((uint64_t)((unint64_t)(v4 - 2) >> 1) < v14)
                break;
              v17 = 2 * v14;
              v14 = (2 * v14) | 1;
              v13 = &a1[v14];
              v18 = v17 + 2;
              if (v18 < v4 && *v13 > v13[1])
              {
                ++v13;
                v14 = v18;
              }
              v15 = *v13;
            }
            while (*v13 <= v12);
            *v16 = v12;
          }
        }
        else
        {
          v13 = a1 + 2;
          v14 = 2;
          v15 = *v10;
          if (*v10 <= v12)
            goto LABEL_19;
        }
      }
      if (++v11 == a3)
        goto LABEL_25;
    }
  }
LABEL_26:
  if (v3 >= 5)
  {
    v19 = (unint64_t)v3 >> 2;
    do
    {
      v21 = 0;
      v22 = *a1;
      v23 = a1;
      do
      {
        v24 = v23;
        v23 += v21 + 1;
        v25 = 2 * v21;
        v21 = (2 * v21) | 1;
        v26 = v25 + 2;
        if (v26 < v19 && *v23 > v23[1])
        {
          ++v23;
          v21 = v26;
        }
        *v24 = *v23;
      }
      while (v21 <= (uint64_t)((unint64_t)(v19 - 2) >> 1));
      if (v23 != --a2)
      {
        *v23 = *a2;
        *a2 = v22;
        v27 = (char *)v23 - (char *)a1 + 4;
        if (v27 < 5)
          goto LABEL_29;
        v28 = (((unint64_t)v27 >> 2) - 2) >> 1;
        v29 = &a1[v28];
        v30 = *v29;
        v22 = *v23;
        if (*v29 <= *v23)
          goto LABEL_29;
        do
        {
          *v23 = v30;
          v23 = v29;
          if (!v28)
            break;
          v28 = (v28 - 1) >> 1;
          v29 = &a1[v28];
          v30 = *v29;
        }
        while (*v29 > v22);
      }
      *v23 = v22;
LABEL_29:
      v20 = v19-- <= 2;
    }
    while (!v20);
  }
  return v5;
}

double sub_239541EB8(uint64_t a1)
{
  double result;

  sub_239416DA0(a1 + 8);
  *(_QWORD *)&result = nullsub_4(a1).n128_u64[0];
  return result;
}

void sub_239541EE0(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  __int16 v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  __int128 v13;
  __int128 v14;

  sub_2395420C4(a1, &v14);
  v13 = v14;
  v14 = 0uLL;
  v4 = *(_QWORD *)(a1 + 24);
  if ((v4 & 0xFF00000000) != 0)
    v5 = (v4 >> 2) | 0x100000000;
  else
    v5 = 0;
  v6 = *(_WORD *)(a1 + 60);
  sub_239826870(a2, &v13, v5);
  *(_WORD *)(a2 + 72) = v6;
  v7 = (std::__shared_weak_count *)*((_QWORD *)&v13 + 1);
  if (*((_QWORD *)&v13 + 1))
  {
    v8 = (unint64_t *)(*((_QWORD *)&v13 + 1) + 8);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v10 = (std::__shared_weak_count *)*((_QWORD *)&v14 + 1);
  if (*((_QWORD *)&v14 + 1))
  {
    v11 = (unint64_t *)(*((_QWORD *)&v14 + 1) + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
}

void sub_239541FC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  sub_239416DA0((uint64_t)&a9);
  sub_239416DA0((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_239541FE0(uint64_t a1)
{
  sub_239416DA0(a1 + 8);
  nullsub_4(a1);
  JUMPOUT(0x23B83E31CLL);
}

uint64_t sub_23954201C()
{
  return 4;
}

uint64_t sub_239542024(uint64_t a1)
{
  return a1 + 64;
}

uint64_t sub_23954202C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_2398EB464(a2, 2, a1 + 64, 2, a1 + 72, 4);
}

uint64_t sub_239542048(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return v1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldxr(p_shared_owners);
  while (__stxr(v4 + 1, p_shared_owners));
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return v1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

void sub_2395420C4(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::string::size_type v13;
  _QWORD *v14;
  std::string::size_type v15;
  std::logic_error *exception;
  std::string v17;

  if (*(_DWORD *)(a1 + 56) != 4)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_239542304(a1, &v17);
    std::logic_error::logic_error(exception, &v17);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)&unk_250ADB400, MEMORY[0x24BEDAB88]);
  }
  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v5)
  {
    if (v4)
    {
      *a2 = v4;
      a2[1] = 0;
      return;
    }
    *a2 = 0;
    a2[1] = 0;
    v10 = (std::__shared_weak_count *)a2[1];
    if (!v10)
      goto LABEL_25;
    goto LABEL_21;
  }
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldxr(p_shared_owners);
  while (__stxr(v7 + 1, p_shared_owners));
  if (v4)
  {
    *a2 = v4;
    a2[1] = v5;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
  {
    if (*a2)
      return;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    if (*a2)
      return;
  }
  v10 = (std::__shared_weak_count *)a2[1];
  if (v10)
  {
LABEL_21:
    v11 = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
LABEL_25:
  (*(void (**)(std::string *__return_ptr))(**(_QWORD **)(a1 + 8) + 32))(&v17);
  v13 = v17.__r_.__value_.__r.__words[0];
  *a2 = v17.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v14 = (_QWORD *)operator new();
    v15 = v17.__r_.__value_.__r.__words[0];
    *v14 = &off_250ADB740;
    v14[1] = 0;
    v14[2] = 0;
    v14[3] = v15;
    a2[1] = v14;
  }
  else
  {
    a2[1] = 0;
  }
}

void sub_2395422A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (__p)
  {
    (*(void (**)(void *))(*(_QWORD *)__p + 8))(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_239542304(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  std::string *v5;
  unsigned int v6;

  v4 = sub_23954237C();
  v5 = sub_2394244E4();
  v6 = *(_DWORD *)(a1 + 56);
  sub_239419DAC("Attempting to create an ", (uint64_t)v4, " from an ", (uint64_t)v5, " but the image is of incompatible format ", &v6, a2);
}

std::string *sub_23954237C()
{
  unsigned __int8 v0;
  __int128 *v2;
  __int128 *v3;
  int64x2_t v4;
  int8x16_t v5;
  void *v6[3];
  void *v7[2];
  char v8;
  std::string v9;
  std::string __p;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v0 = atomic_load((unsigned __int8 *)&qword_2569308E8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2569308E8))
  {
    sub_23941A4FC(v7, "Image");
    v2 = sub_239542650();
    sub_239542580((std::string::size_type)v2, &v9);
    v3 = sub_23941B478();
    sub_239542580((std::string::size_type)v3, &__p);
    sub_23941B674(v6, (uint64_t)&v9, 2uLL);
    sub_239A44200((uint64_t)v7, (uint64_t *)v6, &stru_2569308D0, v4, v5);
    sub_23941B08C(v6);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__p.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v9.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_6:
        if ((v8 & 0x80000000) == 0)
        {
LABEL_7:
          __cxa_atexit(MEMORY[0x24BEDACF0], &stru_2569308D0, &dword_23940C000);
          __cxa_guard_release(&qword_2569308E8);
          return &stru_2569308D0;
        }
LABEL_10:
        operator delete(v7[0]);
        goto LABEL_7;
      }
    }
    else if ((SHIBYTE(v9.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_6;
    }
    operator delete(v9.__r_.__value_.__l.__data_);
    if ((v8 & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_10;
  }
  return &stru_2569308D0;
}

void sub_2395424CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  sub_23941B08C((void **)&a9);
  if (a30 < 0)
  {
    operator delete(__p);
    if ((a24 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a17 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else if ((a24 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a19);
  if ((a17 & 0x80000000) == 0)
  {
LABEL_4:
    __cxa_guard_abort(&qword_2569308E8);
    _Unwind_Resume(a1);
  }
LABEL_7:
  operator delete(a12);
  __cxa_guard_abort(&qword_2569308E8);
  _Unwind_Resume(a1);
}

void sub_239542580(std::string::size_type a1@<X1>, std::string *a2@<X8>)
{
  void *__p;
  char v3;
  void *v4[4];

  HIBYTE(v4[2]) = 16;
  strcpy((char *)v4, "cv3d::kit::img::");
  v3 = 0;
  LOBYTE(__p) = 0;
  sub_239A438B4(a1, (char *)v4, (uint64_t)&__p, 1, 1, a2);
  if ((v3 & 0x80000000) == 0)
  {
    if ((SHIBYTE(v4[2]) & 0x80000000) == 0)
      return;
LABEL_5:
    operator delete(v4[0]);
    return;
  }
  operator delete(__p);
  if (SHIBYTE(v4[2]) < 0)
    goto LABEL_5;
}

void sub_239542614(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((a21 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a21 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a16);
  _Unwind_Resume(exception_object);
}

__int128 *sub_239542650()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_256930908);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_256930908))
    return &xmmword_2569308F0;
  sub_239A43EA4("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::Format::Gray32f]", &xmmword_2569308F0);
  __cxa_atexit(MEMORY[0x24BEDACF0], &xmmword_2569308F0, &dword_23940C000);
  __cxa_guard_release(&qword_256930908);
  return &xmmword_2569308F0;
}

void sub_2395426E0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_256930908);
  _Unwind_Resume(a1);
}

_QWORD *sub_2395426F8(uint64_t a1, unint64_t *a2, uint64_t a3, _QWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  _QWORD *v10;
  _QWORD *result;
  unint64_t v12;
  uint64_t v13;
  float v14;
  float v15;
  _QWORD *v16;
  _QWORD *v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t prime;
  int8x8_t v22;
  unint64_t v23;
  uint8x8_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  _QWORD *v28;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v7 >= v8)
        v4 = v7 % v8;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
    v10 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      result = (_QWORD *)*v10;
      if (*v10)
      {
        if (v9.u32[0] < 2uLL)
        {
          while (1)
          {
            v13 = result[1];
            if (v13 == v7)
            {
              if (result[2] == v7)
                return result;
            }
            else if ((v13 & (v8 - 1)) != v4)
            {
              goto LABEL_23;
            }
            result = (_QWORD *)*result;
            if (!result)
              goto LABEL_23;
          }
        }
        do
        {
          v12 = result[1];
          if (v12 == v7)
          {
            if (result[2] == v7)
              return result;
          }
          else
          {
            if (v12 >= v8)
              v12 %= v8;
            if (v12 != v4)
              break;
          }
          result = (_QWORD *)*result;
        }
        while (result);
      }
    }
  }
LABEL_23:
  v28 = operator new(0xB0uLL);
  *v28 = 0;
  v28[1] = v7;
  v28[2] = **a4;
  *((_OWORD *)v28 + 9) = 0u;
  *((_OWORD *)v28 + 10) = 0u;
  *((_OWORD *)v28 + 7) = 0u;
  *((_OWORD *)v28 + 8) = 0u;
  *((_OWORD *)v28 + 5) = 0u;
  *((_OWORD *)v28 + 6) = 0u;
  *((_OWORD *)v28 + 3) = 0u;
  *((_OWORD *)v28 + 4) = 0u;
  *((_OWORD *)v28 + 2) = 0u;
  v28[3] = &off_250ADBEA0;
  sub_239542AE8((_WORD *)v28 + 16);
  v14 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v15 = *(float *)(a1 + 32);
  if (!v8 || (float)(v15 * (float)v8) < v14)
  {
    v18 = 1;
    if (v8 >= 3)
      v18 = (v8 & (v8 - 1)) != 0;
    v19 = v18 | (2 * v8);
    v20 = vcvtps_u32_f32(v14 / v15);
    if (v19 <= v20)
      prime = v20;
    else
      prime = v19;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v22 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v22)
      goto LABEL_37;
    if (prime < *(_QWORD *)&v22)
    {
      v23 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v22 < 3uLL || (v24 = (uint8x8_t)vcnt_s8(v22), v24.i16[0] = vaddlv_u8(v24), v24.u32[0] > 1uLL))
      {
        v23 = std::__next_prime(v23);
      }
      else
      {
        v25 = 1 << -(char)__clz(v23 - 1);
        if (v23 >= 2)
          v23 = v25;
      }
      if (prime <= v23)
        prime = v23;
      if (prime < *(_QWORD *)&v22)
LABEL_37:
        sub_239427FE0(a1, prime);
    }
    v8 = *(_QWORD *)(a1 + 8);
    v26 = v8 - 1;
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
      {
        v4 = v7 % v8;
        v16 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v7 % v8));
        v17 = v28;
        if (v16)
          goto LABEL_26;
      }
      else
      {
        v4 = v7;
        v16 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v7);
        v17 = v28;
        if (v16)
          goto LABEL_26;
      }
    }
    else
    {
      v4 = v26 & v7;
      v16 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v26 & v7));
      v17 = v28;
      if (v16)
        goto LABEL_26;
    }
LABEL_50:
    *v17 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v28;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*v28)
    {
      v27 = *(_QWORD *)(*v28 + 8);
      if ((v8 & (v8 - 1)) != 0)
      {
        if (v27 >= v8)
          v27 %= v8;
      }
      else
      {
        v27 &= v8 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v27) = v28;
    }
    goto LABEL_61;
  }
  v16 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  v17 = v28;
  if (!v16)
    goto LABEL_50;
LABEL_26:
  *v17 = *v16;
  *v16 = v28;
LABEL_61:
  result = v28;
  ++*(_QWORD *)(a1 + 24);
  return result;
}

void sub_239542A60(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_239542A90((char **)va);
  _Unwind_Resume(a1);
}

void sub_239542A74(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  nullsub_4(v2);
  sub_239542A90((char **)va);
  _Unwind_Resume(a1);
}

char **sub_239542A90(char **a1)
{
  char *v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((_BYTE *)a1 + 16))
    {
      sub_239416DA0((uint64_t)(v2 + 32));
      nullsub_4(v2 + 24);
    }
    operator delete(v2);
  }
  return a1;
}

uint64_t sub_239542AE8@<X0>(_WORD *a1@<X8>)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 v5;
  __int16 v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;

  sub_239542C50(&v12);
  v13 = v12;
  if (v12)
  {
    v2 = (std::__shared_weak_count *)operator new();
    v3 = v12;
    v2->__vftable = (std::__shared_weak_count_vtbl *)&off_250ADCAC0;
    v2->__shared_owners_ = 0;
    v2->__shared_weak_owners_ = 0;
    v2[1].__vftable = (std::__shared_weak_count_vtbl *)v3;
  }
  else
  {
    v2 = 0;
  }
  v14 = v2;
  v12 = 0;
  sub_2398277C4((uint64_t)a1, &v13, 0);
  v4 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)a1 + 104))(*(_QWORD *)a1);
  v5 = v4;
  if ((v4 & 0xFFFFFF) <= 0x10000)
    v5 = 0;
  v6 = v4 & 0xFF00;
  if ((v4 & 0xFF0000) == 0)
    v6 = 0;
  a1[60] = v6 & 0xFF00 | v5;
  v7 = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  result = v12;
  v12 = 0;
  if (result)
  {
    v11 = sub_239817224(result);
    return MEMORY[0x23B83E31C](v11, 0x1091C40A44A61E0);
  }
  return result;
}

void sub_239542BFC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_23949CC1C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_239542C10(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v4;
  va_list va;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, _QWORD);
  sub_239416DA0(v2);
  sub_239416DA0((uint64_t)va1);
  sub_23949CC1C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_239542C34(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  sub_239416DA0((uint64_t)va1);
  sub_23949CC1C((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_239542C50@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  _BYTE v4[8];
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  _QWORD v9[7];

  v9[6] = &off_250ADCA20;
  sub_239822010((uint64_t)v4);
  v2 = operator new();
  *(_QWORD *)v2 = &off_250ADCA40;
  *(_OWORD *)(v2 + 8) = v5;
  *(_OWORD *)(v2 + 24) = v6;
  *(_OWORD *)(v2 + 40) = v7;
  *(_QWORD *)(v2 + 56) = v8;
  sub_239916924((__n128 *)(v2 + 64), (__n128 *)v9);
  *(_OWORD *)(v2 + 88) = *(_OWORD *)&v9[3];
  *(_QWORD *)(v2 + 104) = v9[5];
  *a1 = v2;
  return sub_239817224((uint64_t)v4);
}

void sub_239542D08(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v4;
  va_list va;

  va_start(va, a2);
  v4 = nullsub_4(v2);
  MEMORY[0x23B83E31C](v4, 0x1091C40A44A61E0);
  sub_239817224((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_239542D38(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_239817224((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_239542D50()
{
  JUMPOUT(0x23B83E31CLL);
}

__n128 sub_239542D64(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x40uLL);
  *(_QWORD *)v2 = &off_250ADD960;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  *((_QWORD *)v2 + 7) = *(_QWORD *)(a1 + 56);
  return result;
}

__n128 sub_239542DB4(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_QWORD *)a2 = &off_250ADD960;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  v4 = *(_OWORD *)(a1 + 40);
  *(_QWORD *)(a2 + 56) = *(_QWORD *)(a1 + 56);
  *(_OWORD *)(a2 + 40) = v4;
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_239542DEC(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  float v3;
  float v4;
  uint64_t v6;
  float *v7;
  float *v8;
  unint64_t v9;
  float v10;
  char *v11;
  int v12;
  int v13;
  unint64_t v14;
  char *v15;
  float *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  float *v23;
  uint64_t v24;
  unint64_t v25;
  float *v26;
  char *v27;
  unsigned int v28;
  float v29;
  float v30;
  int v31;
  uint64_t v33;
  char *v34;
  char v36;
  char v37;

  v2 = *a2;
  v3 = *(float *)(*(_QWORD *)(a1 + 16) + 4 * *a2);
  if (v3 != -1.0e10)
  {
    v4 = v3 + 1.0e10;
    if (v3 < -1.0e10)
      v4 = -1.0e10 - v3;
    if (v4 > 0.000001)
    {
      v6 = **(_QWORD **)(a1 + 8) + 32 * v2;
      v7 = *(float **)v6;
      v8 = *(float **)(v6 + 8);
      v9 = ((uint64_t)v8 - *(_QWORD *)v6) >> 4;
      if (v9 >= *(unsigned int *)(a1 + 40))
      {
        v10 = v7[1];
        if (LODWORD(v10) == LODWORD(v3))
        {
          if (*(_QWORD *)(a1 + 48) > (unint64_t)*(unsigned int *)v7)
            return;
          v11 = &v36;
        }
        else
        {
          if (v10 > v3)
            return;
          v11 = &v37;
        }
        sub_2395430CC(v7, *(_QWORD *)(v6 + 8), (uint64_t)v11, v9);
        v8 = (float *)(*(_QWORD *)(v6 + 8) - 16);
        *(_QWORD *)(v6 + 8) = v8;
      }
      if (*(_BYTE *)(a1 + 56))
      {
        v12 = *(_DWORD *)(*(_QWORD *)(a1 + 24) + 4 * v2);
        v13 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 4 * v2);
        v14 = *(_QWORD *)(v6 + 16);
        if ((unint64_t)v8 < v14)
        {
LABEL_14:
          *(_DWORD *)v8 = *(_QWORD *)(a1 + 48);
          v8[1] = v3;
          *((_DWORD *)v8 + 2) = v12;
          *((_DWORD *)v8 + 3) = v13;
          v15 = (char *)(v8 + 4);
LABEL_31:
          *(_QWORD *)(v6 + 8) = v15;
          v23 = *(float **)v6;
          v24 = (uint64_t)&v15[-*(_QWORD *)v6];
          if (v24 >= 17)
          {
            v25 = (((unint64_t)v24 >> 4) - 2) >> 1;
            v26 = &v23[4 * v25];
            v27 = v15 - 16;
            v28 = *((_DWORD *)v15 - 4);
            v29 = v26[1];
            v30 = *((float *)v15 - 3);
            v31 = *(_DWORD *)v26;
            if (LODWORD(v29) == LODWORD(v30) ? *(_DWORD *)v26 > v28 : v29 > v30)
            {
              v33 = *((_QWORD *)v15 - 1);
              do
              {
                v34 = v27;
                v27 = (char *)v26;
                *(_DWORD *)v34 = v31;
                *((float *)v34 + 1) = v29;
                *((float *)v34 + 2) = v26[2];
                *((float *)v34 + 3) = v26[3];
                if (!v25)
                  break;
                v25 = (v25 - 1) >> 1;
                v26 = &v23[4 * v25];
                v29 = v26[1];
                v31 = *(_DWORD *)v26;
              }
              while (LODWORD(v29) == LODWORD(v30) ? *(_DWORD *)v26 > v28 : v29 > v30);
              *(_DWORD *)v27 = v28;
              *((float *)v27 + 1) = v30;
              *((_QWORD *)v27 + 1) = v33;
            }
          }
          return;
        }
      }
      else
      {
        v12 = 0;
        v13 = 0;
        v14 = *(_QWORD *)(v6 + 16);
        if ((unint64_t)v8 < v14)
          goto LABEL_14;
      }
      v16 = *(float **)v6;
      v17 = ((uint64_t)v8 - *(_QWORD *)v6) >> 4;
      v18 = v17 + 1;
      if ((unint64_t)(v17 + 1) >> 60)
        sub_2394189F8();
      v19 = v14 - (_QWORD)v16;
      if (v19 >> 3 > v18)
        v18 = v19 >> 3;
      if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF0)
        v20 = 0xFFFFFFFFFFFFFFFLL;
      else
        v20 = v18;
      if (v20)
      {
        if (v20 >> 60)
          sub_239418A80();
        v21 = (char *)operator new(16 * v20);
      }
      else
      {
        v21 = 0;
      }
      v22 = &v21[16 * v17];
      *(_DWORD *)v22 = *(_QWORD *)(a1 + 48);
      *((float *)v22 + 1) = v3;
      *((_DWORD *)v22 + 2) = v12;
      *((_DWORD *)v22 + 3) = v13;
      v15 = v22 + 16;
      if (v8 != v16)
      {
        do
        {
          *((_OWORD *)v22 - 1) = *((_OWORD *)v8 - 1);
          v22 -= 16;
          v8 -= 4;
        }
        while (v8 != v16);
        v8 = *(float **)v6;
      }
      *(_QWORD *)v6 = v22;
      *(_QWORD *)(v6 + 8) = v15;
      *(_QWORD *)(v6 + 16) = &v21[16 * v20];
      if (v8)
        operator delete(v8);
      goto LABEL_31;
    }
  }
}

_DWORD *sub_2395430CC(_DWORD *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  _DWORD *v8;
  int v9;
  unsigned int v10;
  _BOOL4 v11;
  float v12;
  float v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  float *v18;
  float v19;
  float v20;
  float v21;
  unsigned int v22;
  uint64_t v24;
  uint64_t v25;

  if (a4 >= 2)
  {
    v4 = 0;
    v5 = *result;
    v7 = result[1];
    v6 = result[2];
    v8 = result;
    v9 = result[3];
    do
    {
      v14 = (uint64_t)&v8[4 * v4 + 4];
      v15 = (2 * v4) | 1;
      v4 = 2 * v4 + 2;
      if (v4 < a4)
      {
        v10 = *(_DWORD *)v14;
        v11 = *(_DWORD *)v14 > *(_DWORD *)(v14 + 16);
        v12 = *(float *)(v14 + 4);
        v13 = *(float *)(v14 + 20);
        if (LODWORD(v12) != LODWORD(v13))
          v11 = v12 > v13;
        if (v11)
        {
          v10 = *(_DWORD *)(v14 + 16);
          v14 += 16;
        }
        else
        {
          v4 = v15;
        }
      }
      else
      {
        v10 = *(_DWORD *)v14;
        v4 = v15;
      }
      *v8 = v10;
      v8[1] = *(_DWORD *)(v14 + 4);
      v8[2] = *(_DWORD *)(v14 + 8);
      v8[3] = *(_DWORD *)(v14 + 12);
      v8 = (_DWORD *)v14;
    }
    while (v4 <= (uint64_t)((unint64_t)(a4 - 2) >> 1));
    if (v14 == a2 - 16)
    {
      *(_DWORD *)v14 = v5;
      *(_DWORD *)(v14 + 4) = v7;
      *(_DWORD *)(v14 + 8) = v6;
      *(_DWORD *)(v14 + 12) = v9;
    }
    else
    {
      *(_DWORD *)v14 = *(_DWORD *)(a2 - 16);
      *(_DWORD *)(v14 + 4) = *(_DWORD *)(a2 - 12);
      *(_DWORD *)(v14 + 8) = *(_DWORD *)(a2 - 8);
      *(_DWORD *)(v14 + 12) = *(_DWORD *)(a2 - 4);
      *(_DWORD *)(a2 - 16) = v5;
      *(_DWORD *)(a2 - 12) = v7;
      *(_DWORD *)(a2 - 8) = v6;
      *(_DWORD *)(a2 - 4) = v9;
      v16 = v14 - (_QWORD)result + 16;
      if (v16 >= 17)
      {
        v17 = (((unint64_t)v16 >> 4) - 2) >> 1;
        v18 = (float *)&result[4 * v17];
        v19 = v18[1];
        v20 = *(float *)(v14 + 4);
        v21 = *v18;
        v22 = *(_DWORD *)v14;
        if (LODWORD(v19) == LODWORD(v20) ? *(_DWORD *)v18 > *(_DWORD *)v14 : v19 > v20)
        {
          v24 = *(_QWORD *)(v14 + 8);
          do
          {
            v25 = v14;
            v14 = (uint64_t)v18;
            *(float *)v25 = v21;
            *(float *)(v25 + 4) = v19;
            *(float *)(v25 + 8) = v18[2];
            *(float *)(v25 + 12) = v18[3];
            if (!v17)
              break;
            v17 = (v17 - 1) >> 1;
            v18 = (float *)&result[4 * v17];
            v19 = v18[1];
            v21 = *v18;
          }
          while (LODWORD(v19) == LODWORD(v20) ? *(_DWORD *)v18 > v22 : v19 > v20);
          *(_DWORD *)v14 = v22;
          *(float *)(v14 + 4) = v20;
          *(_QWORD *)(v14 + 8) = v24;
        }
      }
    }
  }
  return result;
}

void sub_239543294(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  size_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  void *v21;
  void *v22;

  v5 = *(char **)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  if (0x6DB6DB6DB6DB6DB7 * ((v4 - (uint64_t)v5) >> 3) >= a2)
  {
    if (a2)
    {
      v12 = 56 * ((56 * a2 - 56) / 0x38) + 56;
      bzero(*(void **)(a1 + 8), v12);
      v5 += v12;
    }
    *(_QWORD *)(a1 + 8) = v5;
  }
  else
  {
    v6 = *(char **)a1;
    v7 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)&v5[-*(_QWORD *)a1] >> 3);
    v8 = v7 + a2;
    if (v7 + a2 > 0x492492492492492)
      sub_2394189F8();
    v9 = 0x6DB6DB6DB6DB6DB7 * ((v4 - (uint64_t)v6) >> 3);
    if (2 * v9 > v8)
      v8 = 2 * v9;
    if (v9 >= 0x249249249249249)
      v10 = 0x492492492492492;
    else
      v10 = v8;
    if (v10)
    {
      if (v10 > 0x492492492492492)
        sub_239418A80();
      v11 = (char *)operator new(56 * v10);
    }
    else
    {
      v11 = 0;
    }
    v13 = &v11[56 * v7];
    v14 = &v11[56 * v10];
    v15 = 56 * ((56 * a2 - 56) / 0x38) + 56;
    bzero(v13, v15);
    v16 = &v13[v15];
    if (v5 == v6)
    {
      *(_QWORD *)a1 = v13;
      *(_QWORD *)(a1 + 8) = v16;
      *(_QWORD *)(a1 + 16) = v14;
      if (v5)
LABEL_27:
        operator delete(v5);
    }
    else
    {
      v17 = 0;
      do
      {
        v18 = &v13[v17];
        v19 = &v5[v17];
        *((_QWORD *)v18 - 6) = 0;
        *((_QWORD *)v18 - 5) = 0;
        *(_OWORD *)(v18 - 56) = *(_OWORD *)&v5[v17 - 56];
        *((_QWORD *)v18 - 5) = *(_QWORD *)&v5[v17 - 40];
        *((_QWORD *)v19 - 7) = 0;
        *((_QWORD *)v19 - 6) = 0;
        *((_QWORD *)v19 - 5) = 0;
        *((_QWORD *)v18 - 3) = 0;
        *((_QWORD *)v18 - 2) = 0;
        *((_OWORD *)v18 - 2) = *(_OWORD *)&v5[v17 - 32];
        *((_QWORD *)v18 - 2) = *(_QWORD *)&v5[v17 - 16];
        *((_QWORD *)v19 - 4) = 0;
        *((_QWORD *)v19 - 3) = 0;
        *((_QWORD *)v19 - 2) = 0;
        *((_DWORD *)v18 - 2) = *(_DWORD *)&v5[v17 - 8];
        v17 -= 56;
      }
      while (&v5[v17] != v6);
      v20 = *(char **)a1;
      v5 = *(char **)(a1 + 8);
      *(_QWORD *)a1 = &v13[v17];
      *(_QWORD *)(a1 + 8) = v16;
      *(_QWORD *)(a1 + 16) = v14;
      if (v5 != v20)
      {
        do
        {
          v21 = (void *)*((_QWORD *)v5 - 4);
          if (v21)
          {
            *((_QWORD *)v5 - 3) = v21;
            operator delete(v21);
          }
          v22 = (void *)*((_QWORD *)v5 - 7);
          if (v22)
          {
            *((_QWORD *)v5 - 6) = v22;
            operator delete(v22);
          }
          v5 -= 56;
        }
        while (v5 != v20);
        v5 = v20;
      }
      if (v5)
        goto LABEL_27;
    }
  }
}

void sub_239543500()
{
  JUMPOUT(0x23B83E31CLL);
}

__n128 sub_239543514(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_250ADD9A8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 sub_239543554(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_250ADD9A8;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_23954357C(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  float **v4;
  float *v5;
  uint64_t v6;
  uint64_t v7;
  char **v8;
  char **v9;
  char *v10;
  float v11;
  int v12;
  float v13;
  int v14;
  float v15;
  unint64_t v16;
  float *v17;
  char **v18;
  uint64_t v19;
  char **v20;
  float *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  BOOL v26;
  unint64_t v27;
  char *v28;
  float *v29;
  unint64_t v30;
  char *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  float *v36;
  char *v37;
  float *v38;
  uint64_t v39;
  __int128 v40;
  uint64_t v41;
  char *v42;
  char *v43;
  char *v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  char *i;
  uint64_t v52;
  int v53;
  char *v54;
  void **v55;
  uint64_t v56;
  char v57;

  v2 = a1;
  v3 = *a2;
  v4 = (float **)(**(_QWORD **)(a1 + 8) + 32 * *a2);
  v5 = *v4;
  v6 = (uint64_t)v4[1];
  if (*v4 != (float *)v6)
  {
    v7 = **(_QWORD **)(v2 + 16) + 56 * v3;
    v55 = (void **)(v7 + 24);
    v8 = (char **)(v7 + 32);
    v9 = (char **)(v7 + 40);
    while (1)
    {
      v11 = *v5;
      v13 = v5[1];
      v12 = *((_DWORD *)v5 + 2);
      v14 = *((_DWORD *)v5 + 3);
      sub_2395430CC(v5, v6, (uint64_t)&v57, (v6 - (uint64_t)v5) >> 4);
      v4[1] -= 4;
      if (v13 == 0.0)
        goto LABEL_5;
      v15 = 0.0 - v13;
      if (v13 >= 0.0)
        v15 = v13;
      if (v15 <= 0.000001)
        goto LABEL_5;
      v17 = *(float **)(v7 + 8);
      v16 = *(_QWORD *)(v7 + 16);
      if ((unint64_t)v17 < v16)
      {
        *v17 = v11;
        v17[1] = v13;
        *(_QWORD *)(v7 + 8) = v17 + 2;
        if (!*(_BYTE *)(v2 + 24))
          goto LABEL_5;
        goto LABEL_31;
      }
      v18 = v8;
      v19 = v2;
      v20 = v9;
      v21 = *(float **)v7;
      v22 = (uint64_t)v17 - *(_QWORD *)v7;
      v23 = v22 >> 3;
      v24 = (v22 >> 3) + 1;
      if (v24 >> 61)
        sub_2394189F8();
      v25 = v16 - (_QWORD)v21;
      if (v25 >> 2 > v24)
        v24 = v25 >> 2;
      v26 = (unint64_t)v25 >= 0x7FFFFFFFFFFFFFF8;
      v27 = 0x1FFFFFFFFFFFFFFFLL;
      if (!v26)
        v27 = v24;
      if (v27 >> 61)
LABEL_47:
        sub_239418A80();
      v56 = 8 * v27;
      v28 = (char *)operator new(8 * v27);
      v29 = (float *)&v28[8 * v23];
      *v29 = v11;
      v29[1] = v13;
      if (v17 == v21)
      {
        v31 = &v28[8 * v23];
        v9 = v20;
        v2 = v19;
        v8 = v18;
        v32 = v56;
        goto LABEL_28;
      }
      v30 = (char *)(v17 - 2) - (char *)v21;
      if (v30 < 0x58)
        break;
      v33 = (char *)v17 - v22 - v28;
      v31 = &v28[8 * v23];
      v9 = v20;
      v2 = v19;
      v8 = v18;
      v32 = v56;
      if (v33 < 0x20)
        goto LABEL_27;
      v34 = (v30 >> 3) + 1;
      v35 = 8 * (v34 & 0x3FFFFFFFFFFFFFFCLL);
      v36 = &v17[v35 / 0xFFFFFFFFFFFFFFFCLL];
      v31 = (char *)&v29[v35 / 0xFFFFFFFFFFFFFFFCLL];
      v37 = &v28[8 * v23 - 16];
      v38 = v17 - 4;
      v39 = v34 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v40 = *(_OWORD *)v38;
        *((_OWORD *)v37 - 1) = *((_OWORD *)v38 - 1);
        *(_OWORD *)v37 = v40;
        v37 -= 32;
        v38 -= 8;
        v39 -= 4;
      }
      while (v39);
      v17 = v36;
      if (v34 != (v34 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_27;
LABEL_28:
      v42 = (char *)(v29 + 2);
      *(_QWORD *)v7 = v31;
      *(_QWORD *)(v7 + 8) = v29 + 2;
      *(_QWORD *)(v7 + 16) = &v28[v32];
      if (v21)
        operator delete(v21);
      *(_QWORD *)(v7 + 8) = v42;
      if (!*(_BYTE *)(v2 + 24))
        goto LABEL_5;
LABEL_31:
      v43 = *v8;
      if (*v8 < *v9)
      {
        *(float *)v43 = v11;
        v10 = v43 + 12;
        *((_DWORD *)v43 + 1) = v12;
        *((_DWORD *)v43 + 2) = v14;
      }
      else
      {
        v44 = (char *)*v55;
        v45 = 0xAAAAAAAAAAAAAAABLL * ((v43 - (_BYTE *)*v55) >> 2);
        v46 = v45 + 1;
        if (v45 + 1 > 0x1555555555555555)
          sub_2394189F8();
        if (0x5555555555555556 * ((*v9 - v44) >> 2) > v46)
          v46 = 0x5555555555555556 * ((*v9 - v44) >> 2);
        if (0xAAAAAAAAAAAAAAABLL * ((*v9 - v44) >> 2) >= 0xAAAAAAAAAAAAAAALL)
          v47 = 0x1555555555555555;
        else
          v47 = v46;
        if (v47 > 0x1555555555555555)
          goto LABEL_47;
        v48 = 12 * v47;
        v49 = (char *)operator new(12 * v47);
        v50 = &v49[12 * v45];
        *(float *)v50 = v11;
        *((_DWORD *)v50 + 1) = v12;
        *((_DWORD *)v50 + 2) = v14;
        for (i = v50; v43 != v44; *((_DWORD *)i + 2) = v53)
        {
          v52 = *(_QWORD *)(v43 - 12);
          v43 -= 12;
          v53 = *((_DWORD *)v43 + 2);
          *(_QWORD *)(i - 12) = v52;
          i -= 12;
        }
        v54 = &v49[v48];
        *v55 = i;
        v10 = v50 + 12;
        *v8 = v50 + 12;
        *v9 = v54;
        if (v44)
          operator delete(v44);
      }
      *v8 = v10;
LABEL_5:
      v5 = *v4;
      v6 = (uint64_t)v4[1];
      if (*v4 == (float *)v6)
        goto LABEL_44;
    }
    v31 = &v28[8 * v23];
    v9 = v20;
    v2 = v19;
    v8 = v18;
    v32 = v56;
    do
    {
LABEL_27:
      v41 = *((_QWORD *)v17 - 1);
      v17 -= 2;
      *((_QWORD *)v31 - 1) = v41;
      v31 -= 8;
    }
    while (v17 != v21);
    goto LABEL_28;
  }
LABEL_44:
  if (v5)
  {
    v4[1] = v5;
    operator delete(v5);
  }
  *v4 = 0;
  v4[1] = 0;
  v4[2] = 0;
}

void sub_23954391C()
{
  JUMPOUT(0x23B83E31CLL);
}

_QWORD *sub_239543930(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_250ADD9F0;
  result[1] = v3;
  return result;
}

uint64_t sub_239543964(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_250ADD9F0;
  a2[1] = v2;
  return result;
}

void sub_239543980(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v6;
  size_t v7;
  float *v8;
  uint64_t v9;
  float *v10;
  float *v11;
  float *v12;
  float *v13;
  float *v14;
  float v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _BYTE *v19;
  float *v20;
  unint64_t v21;
  float *v22;
  int v23;
  float v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  _BYTE *v28;
  float *v29;
  unint64_t v30;
  float *v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  _OWORD *v35;
  float *v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  _OWORD *v41;
  float *v42;
  uint64_t v43;
  __int128 v44;
  float v45;
  float v46;
  BOOL v47;
  float v48;
  float v49;
  uint64_t v50;
  uint64_t v51;
  float v52;
  float v53;
  float v54;
  float v55;
  uint64_t v56;
  uint64_t v57;
  float *v58;
  float *v59;
  float v60;
  float v61;
  BOOL v62;
  float v63;
  float v64;
  uint64_t v65;
  uint64_t v66;
  float v67;
  float v68;
  float v69;
  float v70;
  uint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  float *v74;
  uint64_t v75;
  uint64_t v76;
  float *v77;
  float *v78;
  uint64_t v79;
  float *__p;

  v2 = (_QWORD *)(**(_QWORD **)(a1 + 8) + 56 * *a2);
  v78 = 0;
  v79 = 0;
  v4 = *v2;
  v3 = v2[1];
  v5 = objc_release_x28;
  v6 = v3 - *v2;
  if (v3 == *v2)
  {
    __p = 0;
    goto LABEL_83;
  }
  if (v6 < 0)
    sub_2394189F8();
  v7 = (unint64_t)v6 >> 1;
  v8 = (float *)operator new((unint64_t)v6 >> 1);
  v9 = v6 >> 3;
  v10 = &v8[v9];
  v73 = v2;
  v11 = v8;
  v12 = (float *)operator new(v7);
  v13 = v12;
  v14 = v8;
  v76 = (uint64_t)v12;
  v77 = &v12[v9];
  v75 = v3;
  do
  {
    v15 = *(float *)(v4 + 4);
    if (v15 > 0.0)
    {
      if (v11 < v10)
      {
        *v11++ = v15;
        v8 = v11;
        goto LABEL_5;
      }
      v16 = v11 - v14;
      v17 = v16 + 1;
      if ((unint64_t)(v16 + 1) >> 62)
        sub_2394189F8();
      if (((char *)v10 - (char *)v14) >> 1 > v17)
        v17 = ((char *)v10 - (char *)v14) >> 1;
      if ((unint64_t)((char *)v10 - (char *)v14) >= 0x7FFFFFFFFFFFFFFCLL)
        v18 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v18 = v17;
      if (v18)
      {
        if (v18 >> 62)
          sub_239418A80();
        v19 = operator new(4 * v18);
        v20 = (float *)&v19[4 * v16];
        *v20 = *(float *)(v4 + 4);
        v8 = v20 + 1;
        if (v11 != v14)
        {
LABEL_17:
          v21 = (char *)(v11 - 1) - (char *)v14;
          if (v21 < 0xBC
            || &v19[(char *)v11 - (char *)v14 - 4 - (v21 & 0xFFFFFFFFFFFFFFFCLL)] > &v19[(char *)v11 - (char *)v14 - 4]
            || (float *)((char *)v11 - (v21 & 0xFFFFFFFFFFFFFFFCLL) - 4) > v11 - 1
            || (unint64_t)((char *)v14 - v19) < 0x20)
          {
            v22 = v11;
            v3 = v75;
          }
          else
          {
            v33 = (v21 >> 2) + 1;
            v34 = 4 * (v33 & 0x7FFFFFFFFFFFFFF8);
            v22 = &v11[v34 / 0xFFFFFFFFFFFFFFFCLL];
            v20 = (float *)((char *)v20 - v34);
            v35 = &v19[4 * v16 - 16];
            v36 = v11 - 4;
            v37 = v33 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v38 = *(_OWORD *)v36;
              *(v35 - 1) = *((_OWORD *)v36 - 1);
              *v35 = v38;
              v35 -= 2;
              v36 -= 8;
              v37 -= 8;
            }
            while (v37);
            v3 = v75;
            if (v33 == (v33 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_20:
              v10 = (float *)&v19[4 * v18];
              if (!v14)
              {
LABEL_22:
                v11 = v8;
                v14 = v20;
                goto LABEL_5;
              }
LABEL_21:
              operator delete(v14);
              goto LABEL_22;
            }
          }
          do
          {
            v23 = *((_DWORD *)v22-- - 1);
            *((_DWORD *)v20-- - 1) = v23;
          }
          while (v22 != v14);
          goto LABEL_20;
        }
      }
      else
      {
        v19 = 0;
        v20 = (float *)(4 * v16);
        *(float *)(4 * v16) = v15;
        v8 = (float *)(4 * v16 + 4);
        if (v11 != v14)
          goto LABEL_17;
      }
      v3 = v75;
      v10 = (float *)&v19[4 * v18];
      if (!v14)
        goto LABEL_22;
      goto LABEL_21;
    }
    if (v15 < 0.0)
    {
      v24 = -1.0 / v15;
      if (v12 < v77)
      {
        *v12++ = v24;
        v76 = (uint64_t)v12;
        goto LABEL_5;
      }
      v74 = v10;
      v25 = v12 - v13;
      v26 = v25 + 1;
      if ((unint64_t)(v25 + 1) >> 62)
        sub_2394189F8();
      if (((char *)v77 - (char *)v13) >> 1 > v26)
        v26 = ((char *)v77 - (char *)v13) >> 1;
      if ((unint64_t)((char *)v77 - (char *)v13) >= 0x7FFFFFFFFFFFFFFCLL)
        v27 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v27 = v26;
      if (v27)
      {
        if (v27 >> 62)
          sub_239418A80();
        v28 = operator new(4 * v27);
        v29 = (float *)&v28[4 * v25];
        *v29 = v24;
        v76 = (uint64_t)(v29 + 1);
        if (v12 != v13)
        {
LABEL_35:
          v30 = (char *)(v12 - 1) - (char *)v13;
          if (v30 < 0xBC
            || &v28[(char *)v12 - (char *)v13 - 4 - (v30 & 0xFFFFFFFFFFFFFFFCLL)] > &v28[(char *)v12 - (char *)v13 - 4]
            || (float *)((char *)v12 - (v30 & 0xFFFFFFFFFFFFFFFCLL) - 4) > v12 - 1
            || (unint64_t)((char *)v13 - v28) < 0x20)
          {
            v31 = v12;
            v3 = v75;
          }
          else
          {
            v39 = (v30 >> 2) + 1;
            v40 = 4 * (v39 & 0x7FFFFFFFFFFFFFF8);
            v31 = &v12[v40 / 0xFFFFFFFFFFFFFFFCLL];
            v29 = (float *)((char *)v29 - v40);
            v41 = &v28[4 * v25 - 16];
            v42 = v12 - 4;
            v43 = v39 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v44 = *(_OWORD *)v42;
              *(v41 - 1) = *((_OWORD *)v42 - 1);
              *v41 = v44;
              v41 -= 2;
              v42 -= 8;
              v43 -= 8;
            }
            while (v43);
            v3 = v75;
            if (v39 == (v39 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_38:
              v77 = (float *)&v28[4 * v27];
              if (!v13)
              {
LABEL_40:
                v12 = (float *)v76;
                v13 = v29;
                v10 = v74;
                goto LABEL_5;
              }
LABEL_39:
              operator delete(v13);
              goto LABEL_40;
            }
          }
          do
          {
            v32 = *((_DWORD *)v31-- - 1);
            *((_DWORD *)v29-- - 1) = v32;
          }
          while (v31 != v13);
          goto LABEL_38;
        }
      }
      else
      {
        v28 = 0;
        v29 = (float *)(4 * v25);
        *(float *)(4 * v25) = v24;
        v76 = 4 * v25 + 4;
        if (v12 != v13)
          goto LABEL_35;
      }
      v3 = v75;
      v77 = (float *)&v28[4 * v27];
      if (!v13)
        goto LABEL_40;
      goto LABEL_39;
    }
LABEL_5:
    v4 += 8;
  }
  while (v4 != v3);
  v79 = v76;
  v78 = v13;
  __p = v14;
  v2 = v73;
  v5 = objc_release_x28;
  if (v11 != v14)
  {
    std::__sort<std::__less<float,float> &,float *>();
    v45 = v14[((double)(unint64_t)(v8 - v14) * 0.1)];
    v46 = *(v8 - 1);
    v47 = v45 < v46;
    if (v45 == v46)
      goto LABEL_78;
    v48 = v45 - v46;
    v49 = v46 - v45;
    if (v47)
      v48 = v49;
    if (v48 <= 0.000001)
    {
LABEL_78:
      v56 = *v73;
      v57 = v73[1];
      if (*v73 != v57)
      {
        do
        {
          if (*(float *)(v56 + 4) > 0.0)
            *(_DWORD *)(v56 + 4) = 1065353216;
          v56 += 8;
        }
        while (v56 != v57);
      }
    }
    else
    {
      v50 = *v73;
      v51 = v73[1];
      if (*v73 != v51)
      {
        do
        {
          v52 = *(float *)(v50 + 4);
          if (v52 > 0.0)
          {
            v53 = (float)((float)((float)(v52 - v45) / v49) * 0.9) + 0.1;
            if (v53 <= 1.0)
              v54 = v53;
            else
              v54 = 1.0;
            if (v53 >= 0.1)
              v55 = v54;
            else
              v55 = 0.1;
            *(float *)(v50 + 4) = v55;
          }
          v50 += 8;
        }
        while (v50 != v51);
      }
    }
  }
LABEL_83:
  v58 = v78;
  v59 = (float *)v79;
  if ((float *)v79 == v78)
    goto LABEL_104;
  std::__sort<std::__less<float,float> &,float *>();
  v60 = v78[((double)(unint64_t)((v79 - (uint64_t)v78) >> 2) * *((double *)v5 + 229))];
  v61 = *(float *)(v79 - 4);
  v62 = v60 < v61;
  if (v60 == v61)
    goto LABEL_98;
  v63 = v60 - v61;
  v64 = v61 - v60;
  if (v62)
    v63 = v64;
  if (v63 <= 0.000001)
  {
LABEL_98:
    v71 = *v2;
    v72 = v2[1];
    if (*v2 == v72)
      goto LABEL_105;
    do
    {
      if (*(float *)(v71 + 4) < 0.0)
        *(_DWORD *)(v71 + 4) = 1036831949;
      v71 += 8;
    }
    while (v71 != v72);
LABEL_103:
    v59 = v78;
LABEL_104:
    v58 = v59;
    if (v59)
      goto LABEL_105;
    goto LABEL_106;
  }
  v65 = *v2;
  v66 = v2[1];
  if (*v2 != v66)
  {
    do
    {
      v67 = *(float *)(v65 + 4);
      if (v67 < 0.0)
      {
        v68 = 0.1;
        v69 = (float)((float)((float)(-1.0 / v67) - v60) / v64) * 0.1;
        if (v69 <= 0.1)
          v68 = v69;
        if (v69 >= 0.0)
          v70 = v68;
        else
          v70 = 0.0;
        *(float *)(v65 + 4) = v70;
      }
      v65 += 8;
    }
    while (v65 != v66);
    goto LABEL_103;
  }
LABEL_105:
  operator delete(v58);
LABEL_106:
  if (__p)
    operator delete(__p);
}

void sub_239544030(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19)
{
  void *v19;
  void *v20;
  void *v22;

  if (v20)
  {
    operator delete(v20);
    v22 = v19;
    if (!v19)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else
  {
    v22 = v19;
    if (!v19)
      goto LABEL_3;
  }
  operator delete(v22);
  _Unwind_Resume(exception_object);
}

void sub_2395440B4()
{
  JUMPOUT(0x23B83E31CLL);
}

_QWORD *sub_2395440C8(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_250ADDA38;
  result[1] = v3;
  return result;
}

uint64_t sub_2395440FC(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_250ADDA38;
  a2[1] = v2;
  return result;
}

int8x16_t *sub_239544118(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  int8x16_t *v3;
  int8x16_t *v4;
  unint64_t v5;
  uint64_t v6;

  v2 = **(_QWORD **)(a1 + 8) + 56 * *a2;
  v3 = *(int8x16_t **)v2;
  v4 = *(int8x16_t **)(v2 + 8);
  v5 = 126 - 2 * __clz(((uint64_t)v4->i64 - *(_QWORD *)v2) >> 3);
  if (v4 == v3)
    v6 = 0;
  else
    v6 = v5;
  return sub_239544154(v3, v4, v6, 1);
}

int8x16_t *sub_239544154(int8x16_t *result, int8x16_t *a2, uint64_t a3, char a4)
{
  int8x16_t *v7;
  int8x16_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  unsigned __int32 v13;
  unsigned __int32 v14;
  uint64_t v15;
  unsigned __int32 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int8 *v22;
  uint64_t *v23;
  unsigned __int32 v24;
  unsigned __int32 v25;
  unsigned __int32 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int8 *v31;
  uint64_t *v32;
  unsigned __int32 v33;
  unsigned __int32 v34;
  unsigned __int32 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unsigned int v50;
  char *v51;
  int8x16_t *v52;
  unsigned int v53;
  unsigned int v54;
  char *v55;
  char *v56;
  uint64_t v57;
  unsigned int v58;
  unsigned int v59;
  char *v60;
  BOOL v61;
  uint64_t v62;
  unsigned int v63;
  int8x16_t *v64;
  int8x16_t *v65;
  unsigned int v66;
  uint64_t v67;
  unsigned int v68;
  unsigned int v69;
  uint64_t *v70;
  uint64_t v71;
  unsigned __int32 v72;
  unsigned __int32 v73;
  unsigned int v74;
  unsigned int v75;
  uint64_t v76;
  uint64_t v77;
  int8x16_t *v78;
  BOOL v80;
  uint64_t v81;
  int8x16_t *v82;
  uint64_t *v83;
  unsigned __int32 v84;
  unsigned __int32 v85;
  uint64_t v86;
  uint64_t v87;
  unsigned int v88;
  int64_t v89;
  int64_t v90;
  BOOL v91;
  uint64_t v92;
  __int32 *v93;
  unsigned __int32 v94;
  unsigned int v95;
  __int32 *v96;
  uint64_t v97;
  unsigned int v98;
  unsigned int v99;
  __int32 *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t *v105;
  int8x16_t *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t *v111;
  uint64_t v112;
  uint64_t *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unsigned __int32 v117;
  unsigned __int32 v118;
  uint64_t v119;
  uint64_t *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;

  v7 = result;
LABEL_2:
  v8 = v7;
  while (2)
  {
    v7 = v8;
    v9 = (char *)a2 - (char *)v8;
    v10 = ((char *)a2 - (char *)v8) >> 3;
    switch(v10)
    {
      case 0:
      case 1:
        return result;
      case 2:
        if (a2[-1].i32[2] < (unsigned __int32)v8->i32[0])
        {
          v71 = v8->i64[0];
          goto LABEL_106;
        }
        return result;
      case 3:
        v72 = v8->u32[2];
        v73 = a2[-1].u32[2];
        if (v72 < v8->i32[0])
        {
          v71 = v8->i64[0];
          if (v73 >= v72)
          {
            v8->i64[0] = v8->i64[1];
            v8->i64[1] = v71;
            if (a2[-1].i32[2] >= v71)
              return result;
            v8->i64[1] = a2[-1].i64[1];
          }
          else
          {
LABEL_106:
            v8->i64[0] = a2[-1].i64[1];
          }
          a2[-1].i64[1] = v71;
          return result;
        }
        if (v73 < v72)
        {
          v114 = v8->i64[1];
          v8->i64[1] = a2[-1].i64[1];
          a2[-1].i64[1] = v114;
          if (v8->i32[2] < (unsigned __int32)v8->i32[0])
            *v8 = vextq_s8(*v8, *v8, 8uLL);
        }
        return result;
      case 4:
        v74 = v8->u32[2];
        v75 = v8->i32[0];
        LODWORD(v76) = v8[1].i32[0];
        if (v74 >= v8->i32[0])
        {
          if (v76 < v74)
          {
            v76 = v8->i64[1];
            v115 = v8[1].i64[0];
            v8->i64[1] = v115;
            v8[1].i64[0] = v76;
            if (v75 > v115)
            {
              v116 = v8->i64[0];
              v8->i64[0] = v115;
              v8->i64[1] = v116;
            }
          }
        }
        else
        {
          v77 = v8->i64[0];
          if (v76 >= v74)
          {
            v8->i64[0] = v8->i64[1];
            v8->i64[1] = v77;
            if (v76 >= v77)
              goto LABEL_187;
            v8->i64[1] = v8[1].i64[0];
          }
          else
          {
            v8->i64[0] = v8[1].i64[0];
          }
          v8[1].i64[0] = v77;
          LODWORD(v76) = v77;
        }
LABEL_187:
        if (a2[-1].i32[2] < v76)
        {
          v122 = v8[1].i64[0];
          v8[1].i64[0] = a2[-1].i64[1];
          a2[-1].i64[1] = v122;
          if (v8[1].i32[0] < (unsigned __int32)v8->i32[2])
          {
            v124 = v8->i64[1];
            v123 = v8[1].i64[0];
            v8->i64[1] = v123;
            v8[1].i64[0] = v124;
            if (v8->i32[0] > v123)
            {
              v125 = v8->i64[0];
              v8->i64[0] = v123;
              v8->i64[1] = v125;
            }
          }
        }
        return result;
      case 5:
        return (int8x16_t *)sub_239544B8C(v8->i64, &v8->u32[2], (unsigned int *)&v8[1], &v8[1].i64[1], &a2[-1].i64[1]);
      default:
        if (v9 > 191)
        {
          if (!a3)
          {
            if (v8 == a2)
              return result;
            v89 = (unint64_t)(v10 - 2) >> 1;
            v90 = v89;
            while (1)
            {
              if (v89 >= v90)
              {
                v92 = (2 * v90) | 1;
                v93 = &v8->i32[2 * v92];
                if (2 * v90 + 2 >= v10)
                {
                  v96 = &v8->i32[2 * v90];
                  if (*v93 >= *v96)
                    goto LABEL_142;
                }
                else
                {
                  v94 = *v93;
                  v95 = v93[2];
                  if (*v93 <= v95)
                    v94 = v93[2];
                  if (*v93 < v95)
                  {
                    v93 += 2;
                    v92 = 2 * v90 + 2;
                  }
                  v96 = &v8->i32[2 * v90];
                  if (v94 >= *v96)
                  {
LABEL_142:
                    v97 = *(_QWORD *)v96;
                    while (1)
                    {
                      v100 = v96;
                      v96 = v93;
                      *(_QWORD *)v100 = *(_QWORD *)v93;
                      if (v89 < v92)
                        break;
                      v101 = (2 * v92) | 1;
                      v93 = &v8->i32[2 * v101];
                      v92 = 2 * v92 + 2;
                      if (v92 < v10)
                      {
                        v98 = *v93;
                        result = (int8x16_t *)(v93 + 2);
                        v99 = v93[2];
                        if (*v93 <= v99)
                          v98 = v93[2];
                        if (*v93 >= v99)
                          v92 = v101;
                        else
                          v93 += 2;
                        if (v98 < v97)
                          break;
                      }
                      else
                      {
                        v92 = v101;
                        if (*v93 < v97)
                          break;
                      }
                    }
                    *(_QWORD *)v96 = v97;
                  }
                }
              }
              v91 = v90-- <= 0;
              if (v91)
              {
                v102 = (unint64_t)v9 >> 3;
                do
                {
                  v103 = 0;
                  v104 = v8->i64[0];
                  v105 = (uint64_t *)v8;
                  do
                  {
                    v106 = (int8x16_t *)&v105[v103 + 1];
                    v107 = (2 * v103) | 1;
                    v108 = 2 * v103 + 2;
                    if (v108 < v102 && v106->i32[0] < (unsigned __int32)v106->i32[2])
                    {
                      v106 = (int8x16_t *)((char *)v106 + 8);
                      v107 = v108;
                    }
                    *v105 = v106->i64[0];
                    v105 = (uint64_t *)v106;
                    v103 = v107;
                  }
                  while (v107 <= (uint64_t)((unint64_t)(v102 - 2) >> 1));
                  a2 = (int8x16_t *)((char *)a2 - 8);
                  if (v106 == a2)
                  {
                    v106->i64[0] = v104;
                  }
                  else
                  {
                    v106->i64[0] = a2->i64[0];
                    a2->i64[0] = v104;
                    v109 = (char *)v106 - (char *)v8 + 8;
                    if (v109 >= 9)
                    {
                      v110 = (((unint64_t)v109 >> 3) - 2) >> 1;
                      v111 = &v8->i64[v110];
                      if (*(_DWORD *)v111 < v106->i32[0])
                      {
                        v112 = v106->i64[0];
                        do
                        {
                          v113 = (uint64_t *)v106;
                          v106 = (int8x16_t *)v111;
                          *v113 = *v111;
                          if (!v110)
                            break;
                          v110 = (v110 - 1) >> 1;
                          v111 = &v8->i64[v110];
                        }
                        while (*(_DWORD *)v111 < v112);
                        v106->i64[0] = v112;
                      }
                    }
                  }
                  v91 = v102-- <= 2;
                }
                while (!v91);
                return result;
              }
            }
          }
          v11 = (unint64_t)v10 >> 1;
          v12 = &v8->i64[(unint64_t)v10 >> 1];
          v13 = a2[-1].u32[2];
          if ((unint64_t)v9 < 0x401)
          {
            v16 = v8->i32[0];
            if (v8->i32[0] >= *(_DWORD *)v12)
            {
              if (v13 < v16)
              {
                v20 = v8->i64[0];
                v8->i64[0] = a2[-1].i64[1];
                a2[-1].i64[1] = v20;
                if (v8->i32[0] < *(_DWORD *)v12)
                {
                  v21 = *v12;
                  *v12 = v8->i64[0];
                  v8->i64[0] = v21;
                  --a3;
                  if ((a4 & 1) != 0)
                    goto LABEL_33;
                  goto LABEL_57;
                }
              }
              goto LABEL_32;
            }
            v17 = *v12;
            if (v13 >= v16)
            {
              *v12 = v8->i64[0];
              v8->i64[0] = v17;
              if (a2[-1].i32[2] >= v17)
                goto LABEL_32;
              v8->i64[0] = a2[-1].i64[1];
            }
            else
            {
              *v12 = a2[-1].i64[1];
            }
            a2[-1].i64[1] = v17;
LABEL_32:
            --a3;
            if ((a4 & 1) != 0)
              goto LABEL_33;
            goto LABEL_57;
          }
          v14 = *(_DWORD *)v12;
          if (*(_DWORD *)v12 >= v8->i32[0])
          {
            if (v13 < v14)
            {
              v18 = *v12;
              *v12 = a2[-1].i64[1];
              a2[-1].i64[1] = v18;
              if (*(_DWORD *)v12 < v8->i32[0])
              {
                v19 = v8->i64[0];
                v8->i64[0] = *v12;
                *v12 = v19;
              }
            }
          }
          else
          {
            v15 = v8->i64[0];
            if (v13 >= v14)
            {
              v8->i64[0] = *v12;
              *v12 = v15;
              if (a2[-1].i32[2] >= v15)
                goto LABEL_23;
              *v12 = a2[-1].i64[1];
            }
            else
            {
              v8->i64[0] = a2[-1].i64[1];
            }
            a2[-1].i64[1] = v15;
          }
LABEL_23:
          v22 = &v8->i8[8 * v11];
          v25 = *((_DWORD *)v22 - 2);
          v23 = (uint64_t *)(v22 - 8);
          v24 = v25;
          v26 = a2[-1].u32[0];
          if (v25 >= v8->i32[2])
          {
            if (v26 < v24)
            {
              v28 = *v23;
              *v23 = a2[-1].i64[0];
              a2[-1].i64[0] = v28;
              if (*(_DWORD *)v23 < v8->i32[2])
              {
                v29 = v8->i64[1];
                v8->i64[1] = *v23;
                *v23 = v29;
              }
            }
          }
          else
          {
            v27 = v8->i64[1];
            if (v26 >= v24)
            {
              v8->i64[1] = *v23;
              *v23 = v27;
              if (a2[-1].i32[0] >= v27)
                goto LABEL_37;
              *v23 = a2[-1].i64[0];
            }
            else
            {
              v8->i64[1] = a2[-1].i64[0];
            }
            a2[-1].i64[0] = v27;
          }
LABEL_37:
          v31 = &v8->i8[8 * v11];
          v34 = *((_DWORD *)v31 + 2);
          v32 = (uint64_t *)(v31 + 8);
          v33 = v34;
          v35 = a2[-2].u32[2];
          if (v34 >= v8[1].i32[0])
          {
            if (v35 < v33)
            {
              v37 = *v32;
              *v32 = a2[-2].i64[1];
              a2[-2].i64[1] = v37;
              if (*(_DWORD *)v32 < v8[1].i32[0])
              {
                v38 = v8[1].i64[0];
                v8[1].i64[0] = *v32;
                *v32 = v38;
              }
            }
          }
          else
          {
            v36 = v8[1].i64[0];
            if (v35 >= v33)
            {
              v8[1].i64[0] = *v32;
              *v32 = v36;
              if (a2[-2].i32[2] >= v36)
                goto LABEL_46;
              *v32 = a2[-2].i64[1];
            }
            else
            {
              v8[1].i64[0] = a2[-2].i64[1];
            }
            a2[-2].i64[1] = v36;
          }
LABEL_46:
          v39 = *(_DWORD *)v12;
          v40 = *(_DWORD *)v23;
          v41 = *(_DWORD *)v32;
          if (*(_DWORD *)v12 < *(_DWORD *)v23)
          {
            v42 = *v23;
            if (v41 < v39)
            {
              *v23 = *v32;
              *v32 = v42;
              v43 = v8->i64[0];
              v8->i64[0] = *v12;
              *v12 = v43;
              --a3;
              if ((a4 & 1) != 0)
                goto LABEL_33;
              goto LABEL_57;
            }
            *v23 = *v12;
            *v12 = v42;
            if (v41 < v42)
            {
              v47 = *v32;
              *v12 = *v32;
              *v32 = v42;
              v42 = v47;
            }
            goto LABEL_56;
          }
          v42 = *v12;
          if (v41 >= v39)
          {
LABEL_56:
            v48 = v8->i64[0];
            v8->i64[0] = v42;
            *v12 = v48;
            --a3;
            if ((a4 & 1) != 0)
              goto LABEL_33;
LABEL_57:
            v30 = v8->i64[0];
            if (v8[-1].i32[2] < (unsigned __int32)v8->i32[0])
              goto LABEL_58;
            if (a2[-1].i32[2] <= v30)
            {
              v64 = (int8x16_t *)&v8->u64[1];
              do
              {
                v8 = v64;
                if (v64 >= a2)
                  break;
                v64 = (int8x16_t *)((char *)v64 + 8);
              }
              while (v8->i32[0] <= v30);
            }
            else
            {
              do
              {
                v63 = v8->u32[2];
                v8 = (int8x16_t *)((char *)v8 + 8);
              }
              while (v63 <= v30);
            }
            v65 = a2;
            if (v8 < a2)
            {
              v65 = a2;
              do
              {
                v66 = v65[-1].u32[2];
                v65 = (int8x16_t *)((char *)v65 - 8);
              }
              while (v66 > v30);
            }
            while (v8 < v65)
            {
              v67 = v8->i64[0];
              v8->i64[0] = v65->i64[0];
              v65->i64[0] = v67;
              do
              {
                v68 = v8->u32[2];
                v8 = (int8x16_t *)((char *)v8 + 8);
              }
              while (v68 <= v30);
              do
              {
                v69 = v65[-1].u32[2];
                v65 = (int8x16_t *)((char *)v65 - 8);
              }
              while (v69 > v30);
            }
            v70 = &v8[-1].i64[1];
            if (&v8[-1].u64[1] != (unint64_t *)v7)
              v7->i64[0] = *v70;
            a4 = 0;
            *v70 = v30;
            continue;
          }
          v44 = *v32;
          *v12 = *v32;
          *v32 = v42;
          if (v40 > v44)
          {
            v45 = *v23;
            *v23 = v44;
            *v12 = v45;
            v46 = v8->i64[0];
            v8->i64[0] = v45;
            *v12 = v46;
            --a3;
            if ((a4 & 1) != 0)
              goto LABEL_33;
            goto LABEL_57;
          }
          v62 = v8->i64[0];
          v8->i64[0] = v44;
          *v12 = v62;
          --a3;
          if ((a4 & 1) == 0)
            goto LABEL_57;
LABEL_33:
          v30 = v8->i64[0];
LABEL_58:
          v49 = 0;
          do
          {
            v50 = v8->u32[v49 + 2];
            v49 += 2;
          }
          while (v50 < v30);
          v51 = &v8->i8[v49 * 4];
          v52 = a2;
          if (v49 == 2)
          {
            v52 = a2;
            do
            {
              if (v51 >= (char *)v52)
                break;
              v54 = v52[-1].u32[2];
              v52 = (int8x16_t *)((char *)v52 - 8);
            }
            while (v54 >= v30);
          }
          else
          {
            do
            {
              v53 = v52[-1].u32[2];
              v52 = (int8x16_t *)((char *)v52 - 8);
            }
            while (v53 >= v30);
          }
          if (v51 >= (char *)v52)
          {
            v60 = v51 - 8;
            if (v51 - 8 == (char *)v8)
              goto LABEL_76;
LABEL_75:
            v8->i64[0] = *(_QWORD *)v60;
            goto LABEL_76;
          }
          v55 = &v8->i8[v49 * 4];
          v56 = (char *)v52;
          do
          {
            v57 = *(_QWORD *)v55;
            *(_QWORD *)v55 = *(_QWORD *)v56;
            *(_QWORD *)v56 = v57;
            do
            {
              v58 = *((_DWORD *)v55 + 2);
              v55 += 8;
            }
            while (v58 < v30);
            do
            {
              v59 = *((_DWORD *)v56 - 2);
              v56 -= 8;
            }
            while (v59 >= v30);
          }
          while (v55 < v56);
          v60 = v55 - 8;
          if (v55 - 8 != (char *)v8)
            goto LABEL_75;
LABEL_76:
          *(_QWORD *)v60 = v30;
          if (v51 < (char *)v52)
            goto LABEL_79;
          v61 = sub_239544D00(v8, (int8x16_t *)v60);
          v8 = (int8x16_t *)(v60 + 8);
          result = (int8x16_t *)sub_239544D00((int8x16_t *)(v60 + 8), a2);
          if (!(_DWORD)result)
          {
            if (v61)
              continue;
LABEL_79:
            result = (int8x16_t *)sub_239544154(v7, v60, a3, a4 & 1);
            a4 = 0;
            v8 = (int8x16_t *)(v60 + 8);
            continue;
          }
          a2 = (int8x16_t *)v60;
          if (v61)
            return result;
          goto LABEL_2;
        }
        v78 = (int8x16_t *)&v8->u64[1];
        v80 = v8 == a2 || v78 == a2;
        if ((a4 & 1) != 0)
        {
          if (v80)
            return result;
          v81 = 0;
          v82 = v8;
          while (1)
          {
            v84 = v82->u32[2];
            v85 = v82->i32[0];
            v82 = v78;
            if (v84 < v85)
            {
              v86 = v78->i64[0];
              v87 = v81;
              do
              {
                *(uint64_t *)((char *)&v8->i64[1] + v87) = *(uint64_t *)((char *)v8->i64 + v87);
                if (!v87)
                {
                  v83 = (uint64_t *)v8;
                  goto LABEL_122;
                }
                v88 = *(unsigned __int32 *)((char *)&v8->u32[-2] + v87);
                v87 -= 8;
              }
              while (v88 > v86);
              v83 = (uint64_t *)((char *)&v8->i64[1] + v87);
LABEL_122:
              *v83 = v86;
            }
            v78 = (int8x16_t *)&v82->u64[1];
            v81 += 8;
            if (&v82->u64[1] == (unint64_t *)a2)
              return result;
          }
        }
        if (!v80)
        {
          do
          {
            v117 = v7->u32[2];
            v118 = v7->i32[0];
            v7 = v78;
            if (v117 < v118)
            {
              v119 = v78->i64[0];
              do
              {
                v120 = (uint64_t *)v78;
                v121 = v78[-1].i64[1];
                v78 = (int8x16_t *)((char *)v78 - 8);
                *v120 = v121;
              }
              while (*((_DWORD *)v120 - 4) > v119);
              v78->i64[0] = v119;
            }
            v78 = (int8x16_t *)&v7->u64[1];
          }
          while (&v7->u64[1] != (unint64_t *)a2);
        }
        return result;
    }
  }
}

uint64_t *sub_239544B8C(uint64_t *result, unsigned int *a2, unsigned int *a3, _QWORD *a4, _QWORD *a5)
{
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v5 = *a2;
  LODWORD(v6) = *a3;
  if (*a2 >= *(_DWORD *)result)
  {
    if (v6 < v5)
    {
      v6 = *(_QWORD *)a2;
      *(_QWORD *)a2 = *(_QWORD *)a3;
      *(_QWORD *)a3 = v6;
      if (*a2 < *(_DWORD *)result)
      {
        v6 = *result;
        *result = *(_QWORD *)a2;
        *(_QWORD *)a2 = v6;
        LODWORD(v6) = *a3;
      }
    }
  }
  else
  {
    v7 = *result;
    if (v6 < v5)
    {
      *result = *(_QWORD *)a3;
LABEL_9:
      *(_QWORD *)a3 = v7;
      LODWORD(v6) = v7;
      goto LABEL_10;
    }
    *result = *(_QWORD *)a2;
    *(_QWORD *)a2 = v7;
    LODWORD(v6) = *a3;
    if (*a3 < v7)
    {
      *(_QWORD *)a2 = *(_QWORD *)a3;
      goto LABEL_9;
    }
  }
LABEL_10:
  if (*(_DWORD *)a4 < v6)
  {
    v8 = *(_QWORD *)a3;
    *(_QWORD *)a3 = *a4;
    *a4 = v8;
    if (*a3 < *a2)
    {
      v9 = *(_QWORD *)a2;
      *(_QWORD *)a2 = *(_QWORD *)a3;
      *(_QWORD *)a3 = v9;
      if (*a2 < *(_DWORD *)result)
      {
        v10 = *result;
        *result = *(_QWORD *)a2;
        *(_QWORD *)a2 = v10;
      }
    }
  }
  if (*(_DWORD *)a5 < *(_DWORD *)a4)
  {
    v11 = *a4;
    *a4 = *a5;
    *a5 = v11;
    if (*(_DWORD *)a4 < *a3)
    {
      v12 = *(_QWORD *)a3;
      *(_QWORD *)a3 = *a4;
      *a4 = v12;
      if (*a3 < *a2)
      {
        v13 = *(_QWORD *)a2;
        *(_QWORD *)a2 = *(_QWORD *)a3;
        *(_QWORD *)a3 = v13;
        if (*a2 < *(_DWORD *)result)
        {
          v14 = *result;
          *result = *(_QWORD *)a2;
          *(_QWORD *)a2 = v14;
        }
      }
    }
  }
  return result;
}

BOOL sub_239544D00(int8x16_t *a1, int8x16_t *a2)
{
  int8x16_t *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int32 v9;
  unsigned __int32 v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int32 *v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  switch(((char *)a2 - (char *)a1) >> 3)
  {
    case 0:
    case 1:
      return 1;
    case 2:
      if (a2[-1].i32[2] >= (unsigned __int32)a1->i32[0])
        return 1;
      v8 = a1->i64[0];
      goto LABEL_10;
    case 3:
      v9 = a1->u32[2];
      v10 = a2[-1].u32[2];
      if (v9 >= a1->i32[0])
      {
        if (v10 < v9)
        {
          v18 = a1->i64[1];
          a1->i64[1] = a2[-1].i64[1];
          a2[-1].i64[1] = v18;
          if (a1->i32[2] < (unsigned __int32)a1->i32[0])
          {
            *a1 = vextq_s8(*a1, *a1, 8uLL);
            return 1;
          }
        }
      }
      else
      {
        v8 = a1->i64[0];
        if (v10 < v9)
        {
LABEL_10:
          a1->i64[0] = a2[-1].i64[1];
          a2[-1].i64[1] = v8;
          return 1;
        }
        a1->i64[0] = a1->i64[1];
        a1->i64[1] = v8;
        if (a2[-1].i32[2] < v8)
        {
          a1->i64[1] = a2[-1].i64[1];
          a2[-1].i64[1] = v8;
          return 1;
        }
      }
      return 1;
    case 4:
      v11 = a1->u32[2];
      v12 = a1->i32[0];
      LODWORD(v13) = a1[1].i32[0];
      if (v11 >= a1->i32[0])
      {
        if (v13 < v11)
        {
          v13 = a1->i64[1];
          v19 = a1[1].i64[0];
          a1->i64[1] = v19;
          a1[1].i64[0] = v13;
          if (v12 > v19)
          {
            v20 = a1->i64[0];
            a1->i64[0] = v19;
            a1->i64[1] = v20;
          }
        }
      }
      else
      {
        v14 = a1->i64[0];
        if (v13 >= v11)
        {
          a1->i64[0] = a1->i64[1];
          a1->i64[1] = v14;
          if (v13 >= v14)
            goto LABEL_44;
          a1->i64[1] = a1[1].i64[0];
        }
        else
        {
          a1->i64[0] = a1[1].i64[0];
        }
        a1[1].i64[0] = v14;
        LODWORD(v13) = v14;
      }
LABEL_44:
      if (a2[-1].i32[2] >= v13)
        return 1;
      v27 = a1[1].i64[0];
      a1[1].i64[0] = a2[-1].i64[1];
      a2[-1].i64[1] = v27;
      if (a1[1].i32[0] >= (unsigned __int32)a1->i32[2])
        return 1;
      v29 = a1->i64[1];
      v28 = a1[1].i64[0];
      a1->i64[1] = v28;
      a1[1].i64[0] = v29;
      if (a1->i32[0] <= v28)
        return 1;
      v30 = a1->i64[0];
      a1->i64[0] = v28;
      a1->i64[1] = v30;
      return 1;
    case 5:
      sub_239544B8C(a1->i64, &a1->u32[2], (unsigned int *)&a1[1], &a1[1].i64[1], &a2[-1].i64[1]);
      return 1;
    default:
      v3 = a1 + 1;
      v4 = a1[1].u32[0];
      v5 = a1->u32[2];
      v6 = a1->i32[0];
      if (v5 >= a1->i32[0])
      {
        if (v4 < v5)
        {
          v16 = a1->i64[1];
          v15 = a1[1].i64[0];
          a1->i64[1] = v15;
          a1[1].i64[0] = v16;
          if (v6 > v15)
          {
            v17 = a1->i64[0];
            a1->i64[0] = v15;
            a1->i64[1] = v17;
          }
        }
      }
      else
      {
        v7 = a1->i64[0];
        if (v4 >= v5)
        {
          a1->i64[0] = a1->i64[1];
          a1->i64[1] = v7;
          if (v4 >= v7)
            goto LABEL_28;
          a1->i64[1] = a1[1].i64[0];
        }
        else
        {
          a1->i64[0] = a1[1].i64[0];
        }
        a1[1].i64[0] = v7;
      }
LABEL_28:
      v21 = &a1[1].i32[2];
      if (&a1[1].u64[1] == (unint64_t *)a2)
        return 1;
      v22 = 0;
      v23 = 0;
      break;
  }
  while (*v21 >= v3->i32[0])
  {
LABEL_37:
    v3 = (int8x16_t *)v21;
    v22 += 8;
    v21 += 2;
    if (v21 == (__int32 *)a2)
      return 1;
  }
  v24 = *(_QWORD *)v21;
  v25 = v22;
  do
  {
    *(uint64_t *)((char *)&a1[1].i64[1] + v25) = *(uint64_t *)((char *)a1[1].i64 + v25);
    if (v25 == -16)
    {
      a1->i64[0] = v24;
      if (++v23 != 8)
        goto LABEL_37;
      return v21 + 2 == (__int32 *)a2;
    }
    v26 = *(unsigned __int32 *)((char *)&a1->u32[2] + v25);
    v25 -= 8;
  }
  while (v26 > v24);
  *(uint64_t *)((char *)&a1[1].i64[1] + v25) = v24;
  if (++v23 != 8)
    goto LABEL_37;
  return v21 + 2 == (__int32 *)a2;
}

void sub_23954501C(char **a1, unint64_t a2, uint64_t a3)
{
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  size_t v16;
  uint64_t v17;
  const void *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  size_t v25;
  uint64_t v26;
  const void *v27;
  uint64_t v28;
  char *v29;
  char *v30;
  __int128 v31;
  char *v32;
  char *v33;
  void *v34;
  void *v35;
  char *v36;

  v6 = a1[2];
  v7 = a1[1];
  if (a2 <= (v6 - v7) >> 5)
  {
    if (a2)
    {
      v13 = 32 * a2;
      v14 = &v7[32 * a2];
      do
      {
        *(_QWORD *)v7 = 0;
        *((_QWORD *)v7 + 1) = 0;
        *((_QWORD *)v7 + 2) = 0;
        v18 = *(const void **)a3;
        v17 = *(_QWORD *)(a3 + 8);
        v19 = v17 - *(_QWORD *)a3;
        if (v17 != *(_QWORD *)a3)
        {
          if (v19 < 0)
            sub_2394189F8();
          v15 = (char *)operator new(v17 - *(_QWORD *)a3);
          *(_QWORD *)v7 = v15;
          *((_QWORD *)v7 + 1) = v15;
          *((_QWORD *)v7 + 2) = &v15[16 * (v19 >> 4)];
          v16 = v19 & 0xFFFFFFFFFFFFFFF0;
          memcpy(v15, v18, v16);
          *((_QWORD *)v7 + 1) = &v15[v16];
        }
        v7 += 32;
        v13 -= 32;
      }
      while (v13);
      v7 = v14;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = (v7 - *a1) >> 5;
    if ((v8 + a2) >> 59)
      sub_2394189F8();
    v9 = v6 - *a1;
    v10 = v9 >> 4;
    if (v9 >> 4 <= v8 + a2)
      v10 = v8 + a2;
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFE0)
      v11 = 0x7FFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    if (v11)
    {
      if (v11 >> 59)
        sub_239418A80();
      v12 = (char *)operator new(32 * v11);
    }
    else
    {
      v12 = 0;
    }
    v20 = &v12[32 * v8];
    v36 = &v12[32 * v11];
    v21 = 32 * a2;
    v22 = &v20[32 * a2];
    v23 = v20;
    do
    {
      *(_QWORD *)v23 = 0;
      *((_QWORD *)v23 + 1) = 0;
      *((_QWORD *)v23 + 2) = 0;
      v27 = *(const void **)a3;
      v26 = *(_QWORD *)(a3 + 8);
      v28 = v26 - *(_QWORD *)a3;
      if (v26 != *(_QWORD *)a3)
      {
        if (v28 < 0)
          sub_2394189F8();
        v24 = (char *)operator new(v26 - *(_QWORD *)a3);
        *(_QWORD *)v23 = v24;
        *((_QWORD *)v23 + 1) = v24;
        *((_QWORD *)v23 + 2) = &v24[16 * (v28 >> 4)];
        v25 = v28 & 0xFFFFFFFFFFFFFFF0;
        memcpy(v24, v27, v25);
        *((_QWORD *)v23 + 1) = &v24[v25];
      }
      v23 += 32;
      v21 -= 32;
    }
    while (v21);
    v30 = *a1;
    v29 = a1[1];
    if (v29 == *a1)
    {
      *a1 = v20;
      a1[1] = v22;
      a1[2] = v36;
    }
    else
    {
      do
      {
        *((_QWORD *)v20 - 4) = 0;
        *((_QWORD *)v20 - 3) = 0;
        v20 -= 32;
        *((_QWORD *)v20 + 2) = 0;
        v31 = *((_OWORD *)v29 - 2);
        v29 -= 32;
        *(_OWORD *)v20 = v31;
        *((_QWORD *)v20 + 2) = *((_QWORD *)v29 + 2);
        *(_QWORD *)v29 = 0;
        *((_QWORD *)v29 + 1) = 0;
        *((_QWORD *)v29 + 2) = 0;
      }
      while (v29 != v30);
      v32 = *a1;
      v29 = a1[1];
      *a1 = v20;
      a1[1] = v22;
      a1[2] = v36;
      if (v29 != v32)
      {
        v33 = v29;
        do
        {
          v35 = (void *)*((_QWORD *)v33 - 4);
          v33 -= 32;
          v34 = v35;
          if (v35)
          {
            *((_QWORD *)v29 - 3) = v34;
            operator delete(v34);
          }
          v29 = v33;
        }
        while (v33 != v32);
        v29 = v32;
      }
    }
    if (v29)
      operator delete(v29);
  }
}

void sub_239545294(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_23954529C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  void *v4;

  v4 = *(void **)v2;
  if (*(_QWORD *)v2)
  {
    *(_QWORD *)(v2 + 8) = v4;
    operator delete(v4);
  }
  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(exception_object);
}

void sub_2395452BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_2395452FC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2395452D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;
  void *v14;

  v14 = *(void **)v12;
  if (*(_QWORD *)v12)
  {
    *(_QWORD *)(v12 + 8) = v14;
    operator delete(v14);
  }
  a12 = v12;
  sub_2395452FC((uint64_t)&a10);
  _Unwind_Resume(a1);
}

uint64_t sub_2395452FC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      while (1)
      {
        v5 = v2 - 32;
        v4 = *(void **)(v2 - 32);
        *(_QWORD *)(a1 + 16) = v2 - 32;
        if (!v4)
          break;
        *(_QWORD *)(v2 - 24) = v4;
        operator delete(v4);
        v2 = *(_QWORD *)(a1 + 16);
        if (v2 == v3)
          goto LABEL_6;
      }
      v2 -= 32;
    }
    while (v5 != v3);
  }
LABEL_6:
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_23954536C()
{
  JUMPOUT(0x23B83E31CLL);
}

_QWORD *sub_239545380(uint64_t a1)
{
  const void *v1;
  _QWORD *v2;

  v1 = (const void *)(a1 + 8);
  v2 = operator new(0x1E8uLL);
  *v2 = &off_250ADDA80;
  memcpy(v2 + 1, v1, 0x1E0uLL);
  return v2;
}

void *sub_2395453C4(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_250ADDA80;
  return memcpy(a2 + 1, (const void *)(a1 + 8), 0x1E0uLL);
}

uint64_t sub_2395453EC(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  int64x2_t v8;
  int64x2_t v9;
  float64x2_t v11;
  float64x2_t v12;
  float64x2_t v13;
  float64x2_t v15;
  os_unfair_lock_s *v20;
  uint64_t *v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  float64x2_t v27;
  float v28;
  float v29;
  float v30;
  double v31;
  double v32;
  float32x2_t v33;
  float64x2_t v34;
  float32x2_t v35;
  float32x2_t v36;
  unsigned int v37;
  float32x4_t v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  std::__shared_weak_count *v59;
  _QWORD *v60;
  uint64_t v61;
  void *v62;
  uint64_t v63;
  void **v64;
  void *v65;
  int v66;
  int v67;
  uint64_t v68;
  void **v69;
  void *v70;
  uint64_t v71;
  id v72;
  void *v73;
  int v74;
  uint64_t v75;
  void *v76;
  uint64_t v77;
  void **v78;
  void *v79;
  uint64_t v80;
  void *v81;
  _QWORD *v82;
  uint64_t v83;
  void *v84;
  int v85;
  _BYTE *v86;
  void *v87;
  int v88;
  _BYTE *v89;
  uint64_t v90;
  _QWORD *v91;
  uint64_t v92;
  float *v93;
  unint64_t *p_shared_owners;
  unint64_t v95;
  float64_t v96;
  unint64_t *v97;
  unint64_t v98;
  float64x2_t v100;
  unint64_t v101;
  unint64_t v102;
  _QWORD *v103[2];
  uint64_t v104;
  float32x4_t v105;
  float32x4_t v106;
  float32x4_t v107;
  float32x4_t v108;
  float64x2_t v109;
  uint64_t v110;
  unsigned int __val;
  _QWORD __val_4[4];
  float64x2_t __p;
  double v114;
  double v115;
  double v116;
  double v117;
  double v118;
  double v119;
  double v120;
  double v121;
  double v122;
  double v123;
  double v124;
  double v125;
  double v126;
  double v127;
  uint32x2_t v128;

  v3 = *a2;
  v4 = *(_QWORD *)(a1 + 8);
  HIBYTE(v114) = 0;
  LOBYTE(__p.f64[0]) = 0;
  sub_2396FD394(__val_4, v4, (__int128 *)&__p);
  if (SHIBYTE(v114) < 0)
    operator delete(*(void **)&__p.f64[0]);
  if ((sub_2396FD7B0(*(_QWORD *)(a1 + 16)) & 1) == 0)
  {
    v5 = *(_QWORD *)(a1 + 32);
    __val = *(_QWORD *)(**(_QWORD **)(a1 + 24) + 8 * v3);
    v110 = 0;
    *(_QWORD *)&__p.f64[0] = &__val;
    v110 = sub_2395462D4(v5, &__val, (uint64_t)&unk_239EC6E98, &__p)[3];
    v6 = sub_2394650AC(*(_QWORD *)(a1 + 40), __val);
    kdebug_trace();
    *(_QWORD *)&_Q0.f64[0] = v6[10];
    v8 = *((int64x2_t *)v6 + 4);
    v9 = *((int64x2_t *)v6 + 6);
    _Q4 = *((_OWORD *)v6 + 8);
    *(_QWORD *)&v11.f64[0] = v6[22];
    *(_QWORD *)&v11.f64[0] = *(_OWORD *)&vsubq_f64((float64x2_t)0, v11);
    v12 = vsubq_f64((float64x2_t)0, *((float64x2_t *)v6 + 10));
    v13 = vmulq_n_f64((float64x2_t)vzip1q_s64(v8, v9), v12.f64[0]);
    _Q1 = (float64x2_t)vzip2q_s64(v8, v9);
    *(_QWORD *)&_Q0.f64[1] = v6[14];
    v15 = vmlaq_n_f64(vmlaq_laneq_f64(v13, _Q1, v12, 1), _Q0, v11.f64[0]);
    _Q1.f64[0] = v12.f64[1];
    __asm { FMLA            D0, D1, V4.D[1] }
    *(float32x2_t *)&_Q1.f64[0] = vcvt_f32_f64(v15);
    *(float *)_Q0.f64 = vmlad_n_f64(_Q0.f64[0], *((double *)v6 + 18), v11.f64[0]);
    LODWORD(_Q1.f64[1]) = LODWORD(_Q0.f64[0]);
    v109 = _Q1;
    v20 = *(os_unfair_lock_s **)(a1 + 48);
    sub_2397A15E8(v20);
    ++**(_DWORD **)(a1 + 56);
    sub_2397A1600(v20);
    v107 = 0u;
    v108 = 0u;
    v105 = 0u;
    v106 = 0u;
    v21 = *(uint64_t **)(a1 + 64);
    *(_QWORD *)&__p.f64[0] = v110;
    v28 = sub_2396BD70C(v21, (float64x2_t *)v6, (unsigned int *)&__p, 0.05, v22, v23, v24, v25, v26, v27);
    v30 = v29;
    v100 = *(float64x2_t *)v6;
    v32 = *((double *)v6 + 2);
    v31 = *((double *)v6 + 3);
    sub_239512A78((uint64_t)v6, &__p);
    v33 = vcvt_f32_f64(vmulq_n_f64(vdivq_f64(vcvtq_f64_f32(vcvt_f32_u32((uint32x2_t)v110)), v100), v28));
    v34.f64[0] = v33.f32[0] + -v32 / v100.f64[0] * v28;
    v34.f64[1] = v31 / v100.f64[1] * v28;
    *(float32x2_t *)&v34.f64[0] = vcvt_f32_f64(v34);
    v35 = vsub_f32(*(float32x2_t *)&v34.f64[0], v33);
    v36 = vsub_f32(*(float32x2_t *)&v34.f64[0], v35);
    *(float *)&v37 = (float)(v28 + v28) / v36.f32[0];
    *(float32x2_t *)&v34.f64[0] = vdiv_f32(vadd_f32(v35, *(float32x2_t *)&v34.f64[0]), v36);
    __asm { FMOV            V1.2S, #-1.0 }
    HIDWORD(v34.f64[1]) = HIDWORD(_D1);
    *(float *)&v34.f64[1] = (float)-v30 / (float)(v30 - v28);
    v35.i32[0] = 0;
    v39.i64[0] = 0;
    v39.i32[3] = 0;
    v39.f32[2] = (float)-(float)(v30 * v28) / (float)(v30 - v28);
    v36.f32[0] = __p.f64[0];
    v40 = __p.f64[1];
    v41 = v114;
    v42 = v115;
    v43 = v116;
    v44 = v117;
    v45 = v118;
    v46 = v119;
    v47 = v120;
    v48 = v121;
    v49 = v122;
    v50 = v123;
    v51 = v124;
    v52 = v125;
    v53 = v126;
    v54 = v127;
    v35.f32[1] = (float)(v28 + v28) / v36.f32[1];
    v105 = vmlaq_n_f32(vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32((float32x4_t)v37, v36.f32[0]), (float32x4_t)(unint64_t)v35, v40), (float32x4_t)v34, v41), v39, v42);
    v106 = vmlaq_n_f32(vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32((float32x4_t)v37, v43), (float32x4_t)(unint64_t)v35, v44), (float32x4_t)v34, v45), v39, v46);
    v107 = vmlaq_n_f32(vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32((float32x4_t)v37, v47), (float32x4_t)(unint64_t)v35, v48), (float32x4_t)v34, v49), v39, v50);
    v108 = vmlaq_n_f32(vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32((float32x4_t)v37, v51), (float32x4_t)(unint64_t)v35, v52), (float32x4_t)v34, v53), v39, v54);
    v55 = *(_QWORD *)(a1 + 72);
    v103[0] = (_QWORD *)__val;
    v56 = *(_QWORD *)(v55 + 24);
    if (!v56)
      sub_2394172E0();
    (*(void (**)(float64x2_t *__return_ptr, uint64_t, _QWORD **))(*(_QWORD *)v56 + 48))(&__p, v56, v103);
    if (!*(_QWORD *)&__p.f64[0])
    {
      v86 = *(_BYTE **)(a1 + 80);
      if (v86[8])
        sub_2394202DC((_QWORD *)(*(_QWORD *)v86 + 176), 7008);
      **(_BYTE **)(a1 + 88) = 1;
      goto LABEL_47;
    }
    v104 = 0;
    if (**(_BYTE **)(a1 + 96))
    {
      v57 = *(_QWORD *)(a1 + 104);
      v128 = (uint32x2_t)__val;
      v58 = *(_QWORD *)(v57 + 24);
      if (!v58)
        sub_2394172E0();
      (*(void (**)(_QWORD **__return_ptr, uint64_t, uint32x2_t *))(*(_QWORD *)v58 + 48))(v103, v58, &v128);
      v60 = v103[0];
      v59 = (std::__shared_weak_count *)v103[1];
      if (v103[0])
        v104 = v103[0][8];
      v128 = 0;
      if (!**(_BYTE **)(a1 + 112))
      {
LABEL_12:
        kdebug_trace();
        sub_2397A1694(*(pthread_mutex_t **)(a1 + 128));
        kdebug_trace();
        v61 = sub_2397A9F50(*(_QWORD *)(a1 + 144));
        sub_2397A9494(v61);
        v62 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v62, "commandBuffer");
        v63 = objc_claimAutoreleasedReturnValue();
        v64 = *(void ***)(a1 + 136);
        v65 = *v64;
        *v64 = (void *)v63;

        sub_2395460BC(*(uint64_t *)&__p.f64[0], **(void ***)(a1 + 152));
        if (**(_BYTE **)(a1 + 96))
        {
          v66 = v104;
          if ((_DWORD)v104)
          {
            v67 = HIDWORD(v104);
            if (HIDWORD(v104))
            {
              if (objc_msgSend(**(id **)(a1 + 160), "length") < (unint64_t)(v66 * v67))
              {
                v68 = objc_msgSend(**(id **)(a1 + 168), "newBufferWithLength:options:");
                v69 = *(void ***)(a1 + 160);
                v70 = *v69;
                *v69 = (void *)v68;

              }
              sub_2395461D0((uint64_t)v60, **(void ***)(a1 + 160));
              v71 = *(_QWORD *)(a1 + 80);
              if (*(_BYTE *)(v71 + 8))
                **(_BYTE **)v71 = 1;
            }
          }
        }
        sub_239537A70(*(_QWORD *)(a1 + 144), **(void ***)(a1 + 136), **(void ***)(a1 + 176), **(void ***)(a1 + 184), **(void ***)(a1 + 192), **(void ***)(a1 + 200), **(void ***)(a1 + 208), **(void ***)(a1 + 216), **(_BYTE **)(a1 + 224), (uint64_t)&v105, **(unsigned int **)(a1 + 232), (uint64_t)&v110, **(void ***)(a1 + 240), **(void ***)(a1 + 248));
        sub_239538A94(*(_QWORD *)(a1 + 144), **(void ***)(a1 + 136), **(void ***)(a1 + 248), **(void ***)(a1 + 176), **(void ***)(a1 + 184), **(void ***)(a1 + 264), **(void ***)(a1 + 160), (uint64_t)&v105, (uint64_t)&v109, (uint64_t)&v110, (uint64_t)&v104, *(unsigned int **)(a1 + 232), **(void ***)(a1 + 272));
        if (**(_BYTE **)(a1 + 280))
          sub_23953850C(*(_QWORD *)(a1 + 144), **(void ***)(a1 + 136), **(void ***)(a1 + 240), **(void ***)(a1 + 160), **(void ***)(a1 + 152), *(unsigned int **)(a1 + 232), &v110, (uint64_t)&v104, **(void ***)(a1 + 288), **(void ***)(a1 + 296), **(void ***)(a1 + 304), **(void ***)(a1 + 312), **(void ***)(a1 + 320));
        v72 = **(id **)(a1 + 152);
        sub_2395390EC(*(_QWORD *)(a1 + 144), **(void ***)(a1 + 136), **(void ***)(a1 + 152), &v110, **(void ***)(a1 + 328));
        sub_239539298(*(_QWORD *)(a1 + 144), **(void ***)(a1 + 136), **(void ***)(a1 + 328), &v110, v72);
        sub_2395382AC(*(_QWORD *)(a1 + 144), **(void ***)(a1 + 136), **(void ***)(a1 + 240), **(void ***)(a1 + 160), v72, &v110, (uint64_t)&v104, **(void ***)(a1 + 336));
        sub_239538D4C(*(_QWORD *)(a1 + 144), **(void ***)(a1 + 136), **(void ***)(a1 + 272), **(void ***)(a1 + 336), *(unsigned int **)(a1 + 232), **(void ***)(a1 + 344));
        sub_239538EF0(*(_QWORD *)(a1 + 144), **(void ***)(a1 + 136), **(void ***)(a1 + 264), **(void ***)(a1 + 184), **(void ***)(a1 + 176), (uint64_t)&v109, (uint64_t)&v105, *(unsigned int **)(a1 + 232), **(void ***)(a1 + 344));
        if (**(_BYTE **)(a1 + 352))
          sub_239537ED8(*(_QWORD *)(a1 + 144), **(void ***)(a1 + 136), **(void ***)(a1 + 248), **(void ***)(a1 + 240), **(void ***)(a1 + 160), &v110, (uint64_t)&v104, **(_DWORD **)(a1 + 360), **(_DWORD **)(a1 + 368), **(void ***)(a1 + 256), **(void ***)(a1 + 344));
        sub_2395395FC(*(_QWORD *)(a1 + 144), **(void ***)(a1 + 136), **(void ***)(a1 + 376), **(void ***)(a1 + 304), *(_DWORD **)(a1 + 232), *(_QWORD *)(a1 + 280), **(void ***)(a1 + 344), **(void ***)(a1 + 296), **(void ***)(a1 + 320), **(void ***)(a1 + 384));
        sub_23953B218(*(_QWORD *)(a1 + 144), **(void ***)(a1 + 136), **(void ***)(a1 + 272), *(unsigned int **)(a1 + 232), **(void ***)(a1 + 392));
        if (**(_BYTE **)(a1 + 112))
        {
          sub_239539A74(*(_QWORD *)(a1 + 144), **(void ***)(a1 + 136), **(void ***)(a1 + 272), **(void ***)(a1 + 400), **(void ***)(a1 + 240), (uint64_t *)&v128, (uint64_t)&v110, **(void ***)(a1 + 408));
          sub_23971DB68();
          objc_msgSend(**(id **)(a1 + 136), "commit");
          objc_msgSend(**(id **)(a1 + 136), "waitUntilCompleted");
          objc_msgSend(**(id **)(a1 + 136), "error");
          v73 = (void *)objc_claimAutoreleasedReturnValue();
          v74 = sub_23955E668(v73);

          if (v74)
            goto LABEL_37;
          v75 = sub_2397A9F50(*(_QWORD *)(a1 + 144));
          sub_2397A9494(v75);
          v76 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v76, "commandBuffer");
          v77 = objc_claimAutoreleasedReturnValue();
          v78 = *(void ***)(a1 + 136);
          v79 = *v78;
          *v78 = (void *)v77;

          v80 = *(_QWORD *)(a1 + 416);
          v81 = **(void ***)(a1 + 408);
          v102 = __val;
          v103[0] = &v102;
          v82 = sub_2395465DC(v80, &v102, (uint64_t)&unk_239EC6E98, v103);
          sub_23953A454((uint64_t)v82, v81, (int32x2_t *)&v128, (uint64_t)(v82 + 3));
          v83 = **(_QWORD **)(a1 + 424) + 160;
          v102 = __val;
          v103[0] = &v102;
          sub_2395472A8(v83, &v102, (uint64_t)&unk_239EC6E98, v103);
        }
        if (**(_BYTE **)(a1 + 432))
        {
          nullsub_4(**(_QWORD **)(a1 + 136));
          if (**(_BYTE **)(a1 + 280))
          {
            nullsub_4(**(_QWORD **)(a1 + 136));
            nullsub_4(**(_QWORD **)(a1 + 136));
          }
          sub_23971DB68();
          objc_msgSend(**(id **)(a1 + 136), "commit");
          objc_msgSend(**(id **)(a1 + 136), "waitUntilCompleted");
          objc_msgSend(**(id **)(a1 + 136), "error");
          v84 = (void *)objc_claimAutoreleasedReturnValue();
          v85 = sub_23955E668(v84);

          if (!v85)
          {
            sub_23953B778(**(void ***)(a1 + 344), **(void ***)(a1 + 296), **(void ***)(a1 + 320), __val, **(unsigned int **)(a1 + 232), **(_DWORD **)(a1 + 440), **(_BYTE **)(a1 + 280), *(_DWORD *)(*(_QWORD *)(a1 + 472) + 72), *(_QWORD *)(a1 + 480));
            goto LABEL_40;
          }
        }
        else
        {
          sub_23953B4FC(*(_QWORD *)(a1 + 144), **(void ***)(a1 + 136), **(void ***)(a1 + 344), **(void ***)(a1 + 296), **(void ***)(a1 + 320), (uint64_t)&__val, *(unsigned int **)(a1 + 232), *(_QWORD *)(a1 + 440), *(_QWORD *)(a1 + 280), **(void ***)(a1 + 448), **(void ***)(a1 + 456), **(void ***)(a1 + 464));
          sub_23971DB68();
          objc_msgSend(**(id **)(a1 + 136), "commit");
          objc_msgSend(**(id **)(a1 + 136), "waitUntilCompleted");
          objc_msgSend(**(id **)(a1 + 136), "error");
          v87 = (void *)objc_claimAutoreleasedReturnValue();
          v88 = sub_23955E668(v87);

          if (!v88)
          {
LABEL_40:
            kdebug_trace();

            sub_2397A16B4(*(pthread_mutex_t **)(a1 + 128));
            if (**(_BYTE **)(a1 + 112))
            {
              v90 = *(_QWORD *)(a1 + 416);
              v102 = __val;
              v103[0] = &v102;
              v91 = sub_2395465DC(v90, &v102, (uint64_t)&unk_239EC6E98, v103);
              v92 = **(_QWORD **)(a1 + 424) + 160;
              v101 = __val;
              v103[0] = &v101;
              v93 = (float *)sub_2395472A8(v92, &v101, (uint64_t)&unk_239EC6E98, v103);
              sub_23953A690((uint64_t)(v91 + 3), v93 + 6);
            }
LABEL_42:
            if (v59)
            {
              p_shared_owners = (unint64_t *)&v59->__shared_owners_;
              do
                v95 = __ldaxr(p_shared_owners);
              while (__stlxr(v95 - 1, p_shared_owners));
              if (!v95)
              {
                ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
                std::__shared_weak_count::__release_weak(v59);
              }
            }
LABEL_47:
            v96 = __p.f64[1];
            if (*(_QWORD *)&__p.f64[1])
            {
              v97 = (unint64_t *)(*(_QWORD *)&__p.f64[1] + 8);
              do
                v98 = __ldaxr(v97);
              while (__stlxr(v98 - 1, v97));
              if (!v98)
              {
                (*(void (**)(float64_t))(**(_QWORD **)&v96 + 16))(COERCE_FLOAT64_T(*(_QWORD *)&v96));
                std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&v96);
              }
            }
            return sub_2396FD3E8((uint64_t)__val_4);
          }
        }
LABEL_37:
        v89 = *(_BYTE **)(a1 + 80);
        if (v89[8])
          sub_2394202DC((_QWORD *)(*(_QWORD *)v89 + 176), 7009);

        goto LABEL_42;
      }
    }
    else
    {
      v59 = 0;
      v60 = 0;
      v128 = 0;
      if (!**(_BYTE **)(a1 + 112))
        goto LABEL_12;
    }
    v128 = vcvt_u32_f32(vmul_n_f32(vcvt_f32_u32((uint32x2_t)v110), **(float **)(a1 + 120)));
    goto LABEL_12;
  }
  return sub_2396FD3E8((uint64_t)__val_4);
}

void sub_239545F88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,void *__p,std::__shared_weak_count *a42,int a43,__int16 a44,char a45,char a46)
{
  std::__shared_weak_count *v46;
  unint64_t *p_shared_owners;
  unint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;

  if (v46)
  {
    p_shared_owners = (unint64_t *)&v46->__shared_owners_;
    do
      v49 = __ldaxr(p_shared_owners);
    while (__stlxr(v49 - 1, p_shared_owners));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
      std::__shared_weak_count::__release_weak(v46);
    }
  }
  v50 = a42;
  if (a42)
  {
    v51 = (unint64_t *)&a42->__shared_owners_;
    do
      v52 = __ldaxr(v51);
    while (__stlxr(v52 - 1, v51));
    if (!v52)
    {
      ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
      std::__shared_weak_count::__release_weak(v50);
    }
  }
  sub_2396FD3E8((uint64_t)&a37);
  _Unwind_Resume(a1);
}

void sub_2395460BC(uint64_t a1, void *a2)
{
  unsigned int v3;
  unsigned int v4;
  id v5;
  void *v6;
  const void *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t v12;
  id v13;

  v13 = a2;
  v3 = *(_DWORD *)(a1 + 112);
  v4 = *(_DWORD *)(a1 + 116);
  if (v4 * (unint64_t)v3)
  {
    v5 = objc_retainAutorelease(v13);
    v6 = (void *)objc_msgSend(v5, "contents");
    v7 = *(const void **)(a1 + 80);
    if (*(_BYTE *)(a1 + 128) && v7)
    {
      v8 = *(_QWORD *)(a1 + 8);
      v9 = *(std::__shared_weak_count **)(a1 + 16);
      if (v9)
      {
        p_shared_owners = (unint64_t *)&v9->__shared_owners_;
        do
          v11 = __ldxr(p_shared_owners);
        while (__stxr(v11 + 1, p_shared_owners));
        do
          v12 = __ldaxr(p_shared_owners);
        while (__stlxr(v12 - 1, p_shared_owners));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
      (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v8 + 88))(v8, 0, "unknown location");
      v7 = *(const void **)(a1 + 80);
    }
    memcpy(v6, v7, 3 * v4 * (unint64_t)v3);
    nullsub_4(v5);
  }

}

void sub_2395461C0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_2395461D0(uint64_t a1, void *a2)
{
  size_t v3;
  id v4;
  void *v5;
  const void *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t v11;
  id v12;

  v12 = a2;
  v3 = *(unsigned int *)(a1 + 68) * (unint64_t)*(unsigned int *)(a1 + 64);
  if (v3)
  {
    v4 = objc_retainAutorelease(v12);
    v5 = (void *)objc_msgSend(v4, "contents");
    v6 = *(const void **)(a1 + 56);
    if (*(_BYTE *)(a1 + 80) && v6)
    {
      v7 = *(_QWORD *)(a1 + 8);
      v8 = *(std::__shared_weak_count **)(a1 + 16);
      if (v8)
      {
        p_shared_owners = (unint64_t *)&v8->__shared_owners_;
        do
          v10 = __ldxr(p_shared_owners);
        while (__stxr(v10 + 1, p_shared_owners));
        do
          v11 = __ldaxr(p_shared_owners);
        while (__stlxr(v11 - 1, p_shared_owners));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
      (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v7 + 88))(v7, 0, "unknown location");
      v6 = *(const void **)(a1 + 56);
    }
    memcpy(v5, v6, v3);
    nullsub_4(v4);
  }

}

void sub_2395462C4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t *sub_2395462D4(uint64_t a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  uint64_t **v10;
  uint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t prime;
  unint64_t v22;
  uint8x8_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  unint64_t v27;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v8 <= v7)
        v4 = v7 % v8;
    }
    else
    {
      v4 = ((_DWORD)v8 - 1) & v7;
    }
    v10 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      v11 = *v10;
      if (*v10)
      {
        if (v9.u32[0] < 2uLL)
        {
          while (1)
          {
            v13 = v11[1];
            if (v13 == v7)
            {
              if (*((_DWORD *)v11 + 4) == (_DWORD)v7)
                return v11;
            }
            else if ((v13 & (v8 - 1)) != v4)
            {
              goto LABEL_23;
            }
            v11 = (uint64_t *)*v11;
            if (!v11)
              goto LABEL_23;
          }
        }
        do
        {
          v12 = v11[1];
          if (v12 == v7)
          {
            if (*((_DWORD *)v11 + 4) == (_DWORD)v7)
              return v11;
          }
          else
          {
            if (v12 >= v8)
              v12 %= v8;
            if (v12 != v4)
              break;
          }
          v11 = (uint64_t *)*v11;
        }
        while (v11);
      }
    }
  }
LABEL_23:
  v15 = operator new(0x20uLL);
  *v15 = 0;
  v15[1] = v7;
  *((_DWORD *)v15 + 4) = **a4;
  v15[3] = 0;
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (v8 && (float)(v17 * (float)v8) >= v16)
  {
    v7 = v4;
  }
  else
  {
    v18 = 1;
    if (v8 >= 3)
      v18 = (v8 & (v8 - 1)) != 0;
    v19 = v18 | (2 * v8);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      prime = v20;
    else
      prime = v19;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v8 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v8)
      goto LABEL_36;
    if (prime < v8)
    {
      v22 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v8 < 3 || (v23 = (uint8x8_t)vcnt_s8((int8x8_t)v8), v23.i16[0] = vaddlv_u8(v23), v23.u32[0] > 1uLL))
      {
        v22 = std::__next_prime(v22);
      }
      else
      {
        v24 = 1 << -(char)__clz(v22 - 1);
        if (v22 >= 2)
          v22 = v24;
      }
      if (prime <= v22)
        prime = v22;
      if (prime < v8)
LABEL_36:
        sub_239427FE0(a1, prime);
    }
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7)
        v7 %= v8;
    }
    else
    {
      v7 = ((_DWORD)v8 - 1) & v7;
    }
  }
  v25 = *(_QWORD *)a1;
  v26 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v7);
  if (v26)
  {
    *v15 = *v26;
LABEL_59:
    *v26 = v15;
    goto LABEL_60;
  }
  *v15 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v15;
  *(_QWORD *)(v25 + 8 * v7) = a1 + 16;
  if (*v15)
  {
    v27 = *(_QWORD *)(*v15 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v27 >= v8)
        v27 %= v8;
    }
    else
    {
      v27 &= v8 - 1;
    }
    v26 = (_QWORD *)(*(_QWORD *)a1 + 8 * v27);
    goto LABEL_59;
  }
LABEL_60:
  ++*(_QWORD *)(a1 + 24);
  return v15;
}

void sub_2395465C8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_2395465DC(uint64_t a1, unint64_t *a2, uint64_t a3, _QWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  _QWORD *v10;
  _QWORD *result;
  unint64_t v12;
  uint64_t v13;
  float v14;
  float v15;
  _QWORD *v16;
  _QWORD *v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t prime;
  int8x8_t v22;
  unint64_t v23;
  uint8x8_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  _QWORD *v28;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v7 >= v8)
        v4 = v7 % v8;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
    v10 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      result = (_QWORD *)*v10;
      if (*v10)
      {
        if (v9.u32[0] < 2uLL)
        {
          while (1)
          {
            v13 = result[1];
            if (v13 == v7)
            {
              if (result[2] == v7)
                return result;
            }
            else if ((v13 & (v8 - 1)) != v4)
            {
              goto LABEL_23;
            }
            result = (_QWORD *)*result;
            if (!result)
              goto LABEL_23;
          }
        }
        do
        {
          v12 = result[1];
          if (v12 == v7)
          {
            if (result[2] == v7)
              return result;
          }
          else
          {
            if (v12 >= v8)
              v12 %= v8;
            if (v12 != v4)
              break;
          }
          result = (_QWORD *)*result;
        }
        while (result);
      }
    }
  }
LABEL_23:
  v28 = operator new(0x70uLL);
  *v28 = 0;
  v28[1] = v7;
  v28[2] = **a4;
  v28[3] = &off_250ADD920;
  sub_23954695C((_WORD *)v28 + 16);
  v14 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v15 = *(float *)(a1 + 32);
  if (!v8 || (float)(v15 * (float)v8) < v14)
  {
    v18 = 1;
    if (v8 >= 3)
      v18 = (v8 & (v8 - 1)) != 0;
    v19 = v18 | (2 * v8);
    v20 = vcvtps_u32_f32(v14 / v15);
    if (v19 <= v20)
      prime = v20;
    else
      prime = v19;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v22 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v22)
      goto LABEL_37;
    if (prime < *(_QWORD *)&v22)
    {
      v23 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v22 < 3uLL || (v24 = (uint8x8_t)vcnt_s8(v22), v24.i16[0] = vaddlv_u8(v24), v24.u32[0] > 1uLL))
      {
        v23 = std::__next_prime(v23);
      }
      else
      {
        v25 = 1 << -(char)__clz(v23 - 1);
        if (v23 >= 2)
          v23 = v25;
      }
      if (prime <= v23)
        prime = v23;
      if (prime < *(_QWORD *)&v22)
LABEL_37:
        sub_239427FE0(a1, prime);
    }
    v8 = *(_QWORD *)(a1 + 8);
    v26 = v8 - 1;
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
      {
        v4 = v7 % v8;
        v16 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v7 % v8));
        v17 = v28;
        if (v16)
          goto LABEL_26;
      }
      else
      {
        v4 = v7;
        v16 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v7);
        v17 = v28;
        if (v16)
          goto LABEL_26;
      }
    }
    else
    {
      v4 = v26 & v7;
      v16 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v26 & v7));
      v17 = v28;
      if (v16)
        goto LABEL_26;
    }
LABEL_50:
    *v17 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v28;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*v28)
    {
      v27 = *(_QWORD *)(*v28 + 8);
      if ((v8 & (v8 - 1)) != 0)
      {
        if (v27 >= v8)
          v27 %= v8;
      }
      else
      {
        v27 &= v8 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v27) = v28;
    }
    goto LABEL_61;
  }
  v16 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  v17 = v28;
  if (!v16)
    goto LABEL_50;
LABEL_26:
  *v17 = *v16;
  *v16 = v28;
LABEL_61:
  result = v28;
  ++*(_QWORD *)(a1 + 24);
  return result;
}

void sub_23954692C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_239542A90((char **)va);
  _Unwind_Resume(a1);
}

void sub_239546940(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  nullsub_4(v2);
  sub_239542A90((char **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_23954695C@<X0>(_WORD *a1@<X8>)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 v5;
  __int16 v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;

  sub_239546AC4(&v12);
  v13 = v12;
  if (v12)
  {
    v2 = (std::__shared_weak_count *)operator new();
    v3 = v12;
    v2->__vftable = (std::__shared_weak_count_vtbl *)&off_250ADDB68;
    v2->__shared_owners_ = 0;
    v2->__shared_weak_owners_ = 0;
    v2[1].__vftable = (std::__shared_weak_count_vtbl *)v3;
  }
  else
  {
    v2 = 0;
  }
  v14 = v2;
  v12 = 0;
  sub_239826870((uint64_t)a1, &v13, 0);
  v4 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)a1 + 104))(*(_QWORD *)a1);
  v5 = v4;
  if ((v4 & 0xFFFFFF) <= 0x10000)
    v5 = 0;
  v6 = v4 & 0xFF00;
  if ((v4 & 0xFF0000) == 0)
    v6 = 0;
  a1[36] = v6 & 0xFF00 | v5;
  v7 = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  result = v12;
  v12 = 0;
  if (result)
  {
    v11 = sub_239810708(result);
    return MEMORY[0x23B83E31C](v11, 0x1091C406A8758A4);
  }
  return result;
}

void sub_239546A70(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_239546BA8((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_239546A84(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v4;
  va_list va;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, _QWORD);
  sub_239416DA0(v2);
  sub_239416DA0((uint64_t)va1);
  sub_239546BA8((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_239546AA8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  sub_239416DA0((uint64_t)va1);
  sub_239546BA8((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_239546AC4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  _BYTE v4[8];
  _OWORD v5[2];
  _QWORD v6[6];

  v6[5] = &off_250ADDAC8;
  sub_23981EB84((uint64_t)v4);
  v2 = operator new();
  *(_QWORD *)v2 = &off_250ADDAE8;
  *(_OWORD *)(v2 + 8) = v5[0];
  *(_OWORD *)(v2 + 20) = *(_OWORD *)((char *)v5 + 12);
  sub_239916924((__n128 *)(v2 + 40), (__n128 *)v6);
  *(_OWORD *)(v2 + 64) = *(_OWORD *)&v6[3];
  *a1 = v2;
  return sub_239810708((uint64_t)v4);
}

void sub_239546B64(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v4;
  va_list va;

  va_start(va, a2);
  v4 = nullsub_4(v2);
  MEMORY[0x23B83E31C](v4, 0x1091C406A8758A4);
  sub_239810708((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_239546B94(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_239810708((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_239546BA8(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = sub_239810708(v2);
    MEMORY[0x23B83E31C](v3, 0x1091C406A8758A4);
  }
  return a1;
}

void sub_239546BF0()
{
  JUMPOUT(0x23B83E31CLL);
}

uint64_t sub_239546C04()
{
  return 4;
}

__int128 *sub_239546C10()
{
  unsigned __int8 v0;
  __int128 *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_256930928);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_256930928))
  {
    v2 = sub_239546CE8();
    if (*((char *)v2 + 23) < 0)
    {
      sub_23941A7F8(&xmmword_256930910, *(void **)v2, *((_QWORD *)v2 + 1));
    }
    else
    {
      v3 = *v2;
      unk_256930920 = *((_QWORD *)v2 + 2);
      xmmword_256930910 = v3;
    }
    __cxa_atexit(MEMORY[0x24BEDACF0], &xmmword_256930910, &dword_23940C000);
    __cxa_guard_release(&qword_256930928);
  }
  if (byte_256930927 >= 0)
    return &xmmword_256930910;
  else
    return (__int128 *)xmmword_256930910;
}

void sub_239546CD0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_256930928);
  _Unwind_Resume(a1);
}

__int128 *sub_239546CE8()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_256930948);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_256930948))
    return &xmmword_256930930;
  v2 = sub_239546DC4();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_23941A7F8(&xmmword_256930930, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    qword_256930940 = v2->__r_.__value_.__r.__words[2];
    xmmword_256930930 = v3;
  }
  __cxa_atexit(MEMORY[0x24BEDACF0], &xmmword_256930930, &dword_23940C000);
  __cxa_guard_release(&qword_256930948);
  return &xmmword_256930930;
}

void sub_239546DAC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_256930948);
  _Unwind_Resume(a1);
}

std::string *sub_239546DC4()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_256930968);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_256930968))
    return &stru_256930950;
  sub_239547064((uint64_t)__p);
  sub_239546EB4((uint64_t)__p, &stru_256930950);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit(MEMORY[0x24BEDACF0], &stru_256930950, &dword_23940C000);
  __cxa_guard_release(&qword_256930968);
  return &stru_256930950;
}

void sub_239546E74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_256930968);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_256930968);
  _Unwind_Resume(a1);
}

void sub_239546EB4(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  unsigned __int8 v4;
  int64x2_t v5;
  int8x16_t v6;
  void **v7;
  void **v8;
  void *v9;
  void *__p;
  void **v11;
  void *__dst[2];
  uint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v4 = atomic_load((unsigned __int8 *)&qword_256930908);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_256930908))
  {
    sub_239A43EA4("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::Format::Gray32f]", &xmmword_2569308F0);
    __cxa_atexit(MEMORY[0x24BEDACF0], &xmmword_2569308F0, &dword_23940C000);
    __cxa_guard_release(&qword_256930908);
  }
  if (byte_256930907 < 0)
  {
    sub_23941A7F8(__dst, (void *)xmmword_2569308F0, *((unint64_t *)&xmmword_2569308F0 + 1));
  }
  else
  {
    *(_OWORD *)__dst = xmmword_2569308F0;
    v13 = unk_256930900;
  }
  sub_23941B674(&__p, (uint64_t)__dst, 1uLL);
  sub_239A44200(a1, (uint64_t *)&__p, a2, v5, v6);
  v7 = (void **)__p;
  if (__p)
  {
    v8 = v11;
    v9 = __p;
    if (v11 != __p)
    {
      do
      {
        if (*((char *)v8 - 1) < 0)
          operator delete(*(v8 - 3));
        v8 -= 3;
      }
      while (v8 != v7);
      v9 = __p;
    }
    v11 = v7;
    operator delete(v9);
  }
  if (SHIBYTE(v13) < 0)
    operator delete(__dst[0]);
}

void sub_23954701C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_256930908);
  _Unwind_Resume(a1);
}

void sub_239547038(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  sub_23941B08C(&a10);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_239547064(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_256930988);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_256930988))
  {
    sub_239A43EA4("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::ArrayImageBuffer<cv3d::kit::img::Format::Gray32f>]", qword_256930970);
    __cxa_atexit(MEMORY[0x24BEDACF0], qword_256930970, &dword_23940C000);
    __cxa_guard_release(&qword_256930988);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_2569309A8);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_2569309A8))
  {
    v5 = sub_239423A18(qword_256930970, "<", 0);
    sub_239423914(qword_256930970, 0, v5, qword_256930990);
    __cxa_atexit(MEMORY[0x24BEDACF0], qword_256930990, &dword_23940C000);
    __cxa_guard_release(&qword_2569309A8);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_2569309C8);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_2569309C8))
  {
    sub_239A44118((std::string::size_type)qword_256930990, (std::string *)&xmmword_2569309B0);
    __cxa_atexit(MEMORY[0x24BEDACF0], &xmmword_2569309B0, &dword_23940C000);
    __cxa_guard_release(&qword_2569309C8);
  }
  if (byte_2569309C7 < 0)
  {
    sub_23941A7F8((_BYTE *)a1, (void *)xmmword_2569309B0, *((unint64_t *)&xmmword_2569309B0 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_2569309B0;
    *(_QWORD *)(a1 + 16) = unk_2569309C0;
  }
}

void sub_239547200(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2569309C8);
  _Unwind_Resume(a1);
}

void sub_239547218(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2569309A8);
  _Unwind_Resume(a1);
}

void sub_239547230(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_256930988);
  _Unwind_Resume(a1);
}

void sub_23954724C(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x23B83E31CLL);
}

uint64_t sub_239547270(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
  {
    sub_239810708(result);
    JUMPOUT(0x23B83E31CLL);
  }
  return result;
}

_QWORD *sub_2395472A8(uint64_t a1, unint64_t *a2, uint64_t a3, _QWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  _QWORD *v10;
  _QWORD *result;
  unint64_t v12;
  uint64_t v13;
  float v14;
  float v15;
  _QWORD *v16;
  _QWORD *v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t prime;
  int8x8_t v22;
  unint64_t v23;
  uint8x8_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  _QWORD *v28;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v7 >= v8)
        v4 = v7 % v8;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
    v10 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      result = (_QWORD *)*v10;
      if (*v10)
      {
        if (v9.u32[0] < 2uLL)
        {
          while (1)
          {
            v13 = result[1];
            if (v13 == v7)
            {
              if (result[2] == v7)
                return result;
            }
            else if ((v13 & (v8 - 1)) != v4)
            {
              goto LABEL_23;
            }
            result = (_QWORD *)*result;
            if (!result)
              goto LABEL_23;
          }
        }
        do
        {
          v12 = result[1];
          if (v12 == v7)
          {
            if (result[2] == v7)
              return result;
          }
          else
          {
            if (v12 >= v8)
              v12 %= v8;
            if (v12 != v4)
              break;
          }
          result = (_QWORD *)*result;
        }
        while (result);
      }
    }
  }
LABEL_23:
  v28 = operator new(0xB0uLL);
  *v28 = 0;
  v28[1] = v7;
  v28[2] = **a4;
  *((_OWORD *)v28 + 9) = 0u;
  *((_OWORD *)v28 + 10) = 0u;
  *((_OWORD *)v28 + 7) = 0u;
  *((_OWORD *)v28 + 8) = 0u;
  *((_OWORD *)v28 + 5) = 0u;
  *((_OWORD *)v28 + 6) = 0u;
  *((_OWORD *)v28 + 3) = 0u;
  *((_OWORD *)v28 + 4) = 0u;
  *((_OWORD *)v28 + 2) = 0u;
  v28[3] = &off_250ADBEA0;
  sub_239542AE8((_WORD *)v28 + 16);
  v14 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v15 = *(float *)(a1 + 32);
  if (!v8 || (float)(v15 * (float)v8) < v14)
  {
    v18 = 1;
    if (v8 >= 3)
      v18 = (v8 & (v8 - 1)) != 0;
    v19 = v18 | (2 * v8);
    v20 = vcvtps_u32_f32(v14 / v15);
    if (v19 <= v20)
      prime = v20;
    else
      prime = v19;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v22 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v22)
      goto LABEL_37;
    if (prime < *(_QWORD *)&v22)
    {
      v23 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v22 < 3uLL || (v24 = (uint8x8_t)vcnt_s8(v22), v24.i16[0] = vaddlv_u8(v24), v24.u32[0] > 1uLL))
      {
        v23 = std::__next_prime(v23);
      }
      else
      {
        v25 = 1 << -(char)__clz(v23 - 1);
        if (v23 >= 2)
          v23 = v25;
      }
      if (prime <= v23)
        prime = v23;
      if (prime < *(_QWORD *)&v22)
LABEL_37:
        sub_239427FE0(a1, prime);
    }
    v8 = *(_QWORD *)(a1 + 8);
    v26 = v8 - 1;
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
      {
        v4 = v7 % v8;
        v16 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v7 % v8));
        v17 = v28;
        if (v16)
          goto LABEL_26;
      }
      else
      {
        v4 = v7;
        v16 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v7);
        v17 = v28;
        if (v16)
          goto LABEL_26;
      }
    }
    else
    {
      v4 = v26 & v7;
      v16 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v26 & v7));
      v17 = v28;
      if (v16)
        goto LABEL_26;
    }
LABEL_50:
    *v17 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v28;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*v28)
    {
      v27 = *(_QWORD *)(*v28 + 8);
      if ((v8 & (v8 - 1)) != 0)
      {
        if (v27 >= v8)
          v27 %= v8;
      }
      else
      {
        v27 &= v8 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v27) = v28;
    }
    goto LABEL_61;
  }
  v16 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  v17 = v28;
  if (!v16)
    goto LABEL_50;
LABEL_26:
  *v17 = *v16;
  *v16 = v28;
LABEL_61:
  result = v28;
  ++*(_QWORD *)(a1 + 24);
  return result;
}

void sub_239547610(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_239542A90((char **)va);
  _Unwind_Resume(a1);
}

void sub_239547624(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  nullsub_4(v2);
  sub_239542A90((char **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_239547640(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  const void *v6;
  int64_t v7;
  char *v8;
  size_t v9;
  const void *v10;
  int64_t v11;
  char *v12;
  size_t v13;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v6 = *(const void **)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v7 = v5 - *(_QWORD *)a2;
  if (v5 != *(_QWORD *)a2)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v7 >> 2) > 0x1555555555555555)
      sub_2394189F8();
    v8 = (char *)operator new(v7);
    *(_QWORD *)a1 = v8;
    *(_QWORD *)(a1 + 8) = v8;
    *(_QWORD *)(a1 + 16) = &v8[4 * (v7 >> 2)];
    v9 = 12 * ((v7 - 12) / 0xCuLL) + 12;
    memcpy(v8, v6, v9);
    *(_QWORD *)(a1 + 8) = &v8[v9];
  }
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  v10 = *(const void **)a3;
  v11 = *(_QWORD *)(a3 + 8) - *(_QWORD *)a3;
  if (v11)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v11 >> 2) > 0x1555555555555555)
      sub_2394189F8();
    v12 = (char *)operator new(v11);
    *(_QWORD *)(a1 + 24) = v12;
    *(_QWORD *)(a1 + 32) = v12;
    *(_QWORD *)(a1 + 40) = &v12[4 * (v11 >> 2)];
    v13 = 12 * ((v11 - 12) / 0xCuLL) + 12;
    memcpy(v12, v10, v13);
    *(_QWORD *)(a1 + 32) = &v12[v13];
  }
  *(_BYTE *)(a1 + 48) = 0;
  *(_BYTE *)(a1 + 72) = 0;
  *(_BYTE *)(a1 + 80) = 0;
  *(_BYTE *)(a1 + 104) = 0;
  *(_BYTE *)(a1 + 112) = 0;
  *(_BYTE *)(a1 + 136) = 0;
  return a1;
}

void sub_2395477A4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;
  void *v5;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 32) = v4;
    operator delete(v4);
  }
  v5 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v5;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

void sub_2395477D8(_QWORD *a1, unint64_t a2)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  __int16 v14;
  char v15;

  v5 = (_BYTE *)a1[1];
  v4 = a1[2];
  if (0xAAAAAAAAAAAAAAABLL * (v4 - (_QWORD)v5) >= a2)
  {
    a1[1] = &v5[3 * (3 * a2 / 3)];
  }
  else
  {
    v6 = (_BYTE *)*a1;
    v7 = 0xAAAAAAAAAAAAAAABLL * (_QWORD)&v5[-*a1];
    v8 = v7 + a2;
    if (v7 + a2 >= 0x5555555555555556)
      sub_2394189F8();
    v9 = 0xAAAAAAAAAAAAAAABLL * (v4 - (_QWORD)v6);
    if (2 * v9 > v8)
      v8 = 2 * v9;
    if (v9 >= 0x2AAAAAAAAAAAAAAALL)
      v10 = 0x5555555555555555;
    else
      v10 = v8;
    if (v10)
    {
      if (v10 >= 0x5555555555555556)
        sub_239418A80();
      v11 = (char *)operator new(3 * v10);
    }
    else
    {
      v11 = 0;
    }
    v12 = &v11[3 * v7];
    v13 = &v12[3 * (3 * a2 / 3)];
    if (v5 != v6)
    {
      do
      {
        v14 = *(_WORD *)(v5 - 3);
        v5 -= 3;
        v15 = v5[2];
        *(_WORD *)(v12 - 3) = v14;
        v12 -= 3;
        v12[2] = v15;
      }
      while (v5 != v6);
      v5 = (_BYTE *)*a1;
    }
    *a1 = v12;
    a1[1] = v13;
    a1[2] = &v11[3 * v10];
    if (v5)
      operator delete(v5);
  }
}

void sub_23954793C()
{
  JUMPOUT(0x23B83E31CLL);
}

__n128 sub_239547950(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x38uLL);
  *(_QWORD *)v2 = &off_250ADDBA0;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  return result;
}

__n128 sub_239547998(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  *(_QWORD *)a2 = &off_250ADDBA0;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t (***sub_2395479C8(uint64_t a1, unsigned int *a2))()
{
  uint64_t v2;
  float **v3;
  uint64_t v4;
  uint64_t (**v5)();
  unint64_t v6;
  uint64_t v7;
  float v8;
  float *v9;
  float *v10;
  float *v11;
  float v12;
  float *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  _BYTE *v18;
  float *v19;
  uint64_t v20;
  unint64_t v21;
  float *v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  _OWORD *v26;
  float *v27;
  uint64_t v28;
  __int128 v29;
  float *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  float *v34;
  float v35;
  uint64_t v36;
  float *v37;
  uint64_t v38;
  float *v39;
  float *v40;
  float *v41;
  float v42;
  float *v43;
  float v44;
  float *v45;
  float v46;
  char v48;
  float v49;
  float v50;
  float v51;
  float *v52;
  float *v53;
  uint64_t v54;
  int64_t v55;
  float *v56;
  float *v57;
  float v58;
  float v59;
  uint64_t v60;
  char v61;
  uint64_t v62;
  uint64_t v63;
  float *v64;
  float v65;
  uint64_t v66;
  float *v67;
  uint64_t v68;
  unsigned int v69;
  float v70;
  float *v71;
  uint64_t v72;
  float *v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  _BYTE *v78;
  float *v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  float *v83;
  _OWORD *v84;
  float *v85;
  uint64_t v86;
  __int128 v87;
  int v88;
  float v89;
  char *v90;
  uint64_t v91;
  void *v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  unint64_t v96;
  char *v97;
  float *v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  char *v103;
  __int128 *v104;
  uint64_t v105;
  __int128 v106;
  int v107;
  float v108;
  float *v109;
  float *v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;
  unint64_t v114;
  _BYTE *v115;
  float *v116;
  unint64_t v117;
  uint64_t v118;
  uint64_t v119;
  float *v120;
  _OWORD *v121;
  float *v122;
  uint64_t v123;
  __int128 v124;
  int v125;
  uint64_t v126;
  float *v127;
  float *v128;
  float *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  float *v133;
  float v134;
  uint64_t v135;
  float *v136;
  uint64_t v137;
  float *v138;
  float *v139;
  float *v140;
  float v141;
  float v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  float *v146;
  float v147;
  uint64_t v148;
  float *v149;
  uint64_t v150;
  float *v151;
  float *v152;
  float *v153;
  float *v154;
  unsigned int v155;
  float v156;
  float v157;
  float v158;
  BOOL v159;
  float v160;
  float *v163;
  float *v164;
  unsigned int v165;
  float v166;
  BOOL v167;
  float v168;
  uint64_t v170;
  uint64_t v171;
  float v172;
  uint64_t (***result)();
  uint64_t v174;
  int v175;
  int v176;
  uint64_t v177;
  uint64_t v178;
  char v179;
  float **v180;
  uint64_t v182;
  float **v183;
  float *v184;
  float *v185;
  float *v186;
  float *v187;
  float *v188;
  void *v189[2];
  __int128 v190;
  float *__p;
  float *__p_8;
  float *v193;
  _QWORD v194[3];
  uint64_t (***v195)();
  uint64_t v196;

  v196 = *MEMORY[0x24BDAC8D0];
  v2 = *a2;
  v3 = (float **)(**(_QWORD **)(a1 + 8) + 56 * v2);
  v4 = (char *)v3[1] - (char *)*v3;
  v177 = v2;
  *(_DWORD *)(**(_QWORD **)(a1 + 24) + 4 * v2) = (unint64_t)v4 >> 3;
  v5 = &off_250ADDBE8;
  v194[0] = &off_250ADDBE8;
  v194[1] = v3 + 3;
  v180 = v3 + 3;
  v194[2] = 0;
  v195 = (uint64_t (***)())v194;
  v183 = v3 + 4;
  v6 = 0xAAAAAAAAAAAAAAABLL * (v3[4] - v3[3]);
  if (v6 != v4 >> 3)
    goto LABEL_237;
  v184 = 0;
  v186 = 0;
  if (!(_DWORD)v6)
  {
    v193 = 0;
    v190 = 0u;
    __p = 0;
    v187 = 0;
    *(_OWORD *)v189 = 0u;
    v175 = *(_DWORD *)(a1 + 48);
    if (!v175)
      goto LABEL_227;
    goto LABEL_7;
  }
  if ((v6 & 0x80000000) != 0)
    sub_2394189F8();
  v7 = (int)(v4 >> 3);
  v184 = (float *)operator new(4 * v7);
  v186 = &v184[v7];
  v187 = (float *)operator new(4 * v7);
  v189[0] = &v187[v7];
  v189[1] = operator new(4 * v7);
  *((_QWORD *)&v190 + 1) = (char *)v189[1] + 4 * v7;
  __p = (float *)operator new(4 * v7);
  v193 = &__p[v7];
  v175 = *(_DWORD *)(a1 + 48);
  if (v175)
  {
LABEL_7:
    v176 = 0;
    v182 = v6;
    v8 = (float)v6;
    while ((unint64_t)((char *)v3[1] - (char *)*v3) >= 0x28)
    {
      v9 = v184;
      v188 = v187;
      *(void **)&v190 = v189[1];
      __p_8 = __p;
      v10 = *v183;
      v11 = *v180;
      v12 = 0.0;
      v178 = (char *)*v183 - (char *)*v180;
      if (!v178)
        goto LABEL_51;
      do
      {
        while (v9 < v186)
        {
          *v9++ = v11[2];
          v185 = v9;
          v11 += 3;
          if (v11 == v10)
            goto LABEL_41;
        }
        v13 = v184;
        v14 = v9 - v184;
        v15 = v14 + 1;
        if ((unint64_t)(v14 + 1) >> 62)
          sub_2394189F8();
        v16 = (char *)v186 - (char *)v184;
        if (((char *)v186 - (char *)v184) >> 1 > v15)
          v15 = v16 >> 1;
        if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFFCLL)
          v17 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v17 = v15;
        if (v17)
        {
          if (v17 >> 62)
            sub_239418A80();
          v18 = operator new(4 * v17);
          v19 = (float *)&v18[4 * v14];
          *v19 = v11[2];
          v20 = (uint64_t)(v19 + 1);
          if (v9 == v184)
            goto LABEL_27;
        }
        else
        {
          v18 = 0;
          v19 = (float *)(4 * v14);
          *(float *)(4 * v14) = v11[2];
          v20 = 4 * v14 + 4;
          if (v9 == v184)
            goto LABEL_27;
        }
        v21 = (char *)(v9 - 1) - (char *)v184;
        if (v21 < 0xBC)
        {
          v22 = v9;
          goto LABEL_26;
        }
        if (&v18[(char *)v9 - (char *)v184 - 4 - (v21 & 0xFFFFFFFFFFFFFFFCLL)] > &v18[(char *)v9 - (char *)v184 - 4])
        {
          v22 = v9;
          do
          {
LABEL_26:
            v23 = *((_DWORD *)v22-- - 1);
            *((_DWORD *)v19-- - 1) = v23;
          }
          while (v22 != v184);
          goto LABEL_27;
        }
        if ((float *)((char *)v9 - (v21 & 0xFFFFFFFFFFFFFFFCLL) - 4) > v9 - 1)
        {
          v22 = v9;
          goto LABEL_26;
        }
        if ((unint64_t)((char *)v184 - v18) < 0x20)
        {
          v22 = v9;
          goto LABEL_26;
        }
        v24 = (v21 >> 2) + 1;
        v25 = 4 * (v24 & 0x7FFFFFFFFFFFFFF8);
        v22 = &v9[v25 / 0xFFFFFFFFFFFFFFFCLL];
        v19 = (float *)((char *)v19 - v25);
        v26 = &v18[4 * v14 - 16];
        v27 = v9 - 4;
        v28 = v24 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v29 = *(_OWORD *)v27;
          *(v26 - 1) = *((_OWORD *)v27 - 1);
          *v26 = v29;
          v26 -= 2;
          v27 -= 8;
          v28 -= 8;
        }
        while (v28);
        if (v24 != (v24 & 0x7FFFFFFFFFFFFFF8))
          goto LABEL_26;
LABEL_27:
        v184 = v19;
        v186 = (float *)&v18[4 * v17];
        if (v13)
          operator delete(v13);
        v9 = (float *)v20;
        v185 = (float *)v20;
        v11 += 3;
      }
      while (v11 != v10);
LABEL_41:
      v30 = v184;
      v31 = (char *)v9 - (char *)v184;
      if (v9 != v184)
      {
        v32 = v31 << 29;
        if ((v31 & 4) != 0)
        {
          v38 = (v32 - 0x80000000) >> 32;
          v39 = &v184[v38];
          if (v39 != v9)
          {
            sub_2394F1C6C(v184, v39, v9);
            v30 = v184;
          }
          v12 = v30[v38];
        }
        else
        {
          v33 = (int)(v31 >> 3);
          v34 = &v184[v33];
          if (v34 != v9)
          {
            sub_2394F1C6C(v184, v34, v9);
            v30 = v184;
            v9 = v185;
            v32 = ((char *)v185 - (char *)v184) << 29;
          }
          v35 = v30[v33];
          v36 = (v32 - 0x100000000) >> 32;
          v37 = &v30[v36];
          if (v37 != v9)
          {
            sub_2394F1C6C(v30, v37, v9);
            v30 = v184;
          }
          v12 = (float)(v35 + v30[v36]) * 0.5;
        }
      }
LABEL_51:
      v40 = *v180;
      v41 = *v183;
      if (*v180 == *v183)
      {
        v179 = 0;
        if ((float)(0.0 / (float)(0xAAAAAAAAAAAAAAABLL * (v41 - v40))) > 0.8)
          v179 = 0;
        goto LABEL_82;
      }
      v42 = 0.0;
      v43 = *v180;
      do
      {
        v42 = (float)(v43[2] - v12) * (float)(v43[2] - v12) + v42;
        v43 += 3;
      }
      while (v43 != v41);
      v44 = 0.0;
      v45 = *v180;
      do
      {
        v46 = v45[2];
        if (v46 < (float)(v12 + 15.0) && v46 > (float)(v12 + -15.0))
          v44 = v44 + 1.0;
        v45 += 3;
      }
      while (v45 != v41);
      if ((float)(v44 / (float)(0xAAAAAAAAAAAAAAABLL * (v41 - v40))) <= 0.8)
      {
        v179 = 0;
        if (v40 == v41)
          goto LABEL_82;
LABEL_91:
        while (2)
        {
          v69 = *((_DWORD *)v40 + 1);
          v70 = (float)((float)(v69 & 0x3FF) / 1023.0) * 255.0;
          v71 = v188;
          if (v188 < v189[0])
          {
            *v188 = v70;
            v72 = (uint64_t)(v188 + 1);
            goto LABEL_113;
          }
          v73 = v187;
          v74 = v188 - v187;
          v75 = v74 + 1;
          if ((unint64_t)(v74 + 1) >> 62)
            goto LABEL_245;
          v76 = (char *)v189[0] - (char *)v187;
          if (((char *)v189[0] - (char *)v187) >> 1 > v75)
            v75 = v76 >> 1;
          if ((unint64_t)v76 >= 0x7FFFFFFFFFFFFFFCLL)
            v77 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v77 = v75;
          if (v77)
          {
            if (v77 >> 62)
              goto LABEL_243;
            v78 = operator new(4 * v77);
            v79 = (float *)&v78[4 * v74];
            *v79 = v70;
            v72 = (uint64_t)(v79 + 1);
            if (v188 != v187)
            {
LABEL_102:
              v80 = (char *)(v188 - 1) - (char *)v187;
              if (v80 < 0x2C)
                goto LABEL_251;
              if ((unint64_t)((char *)v187 - v78) < 0x20)
                goto LABEL_251;
              v81 = (v80 >> 2) + 1;
              v82 = 4 * (v81 & 0x7FFFFFFFFFFFFFF8);
              v83 = &v188[v82 / 0xFFFFFFFFFFFFFFFCLL];
              v79 = (float *)((char *)v79 - v82);
              v84 = &v78[4 * v74 - 16];
              v85 = v188 - 4;
              v86 = v81 & 0x7FFFFFFFFFFFFFF8;
              do
              {
                v87 = *(_OWORD *)v85;
                *(v84 - 1) = *((_OWORD *)v85 - 1);
                *v84 = v87;
                v84 -= 2;
                v85 -= 8;
                v86 -= 8;
              }
              while (v86);
              v71 = v83;
              if (v81 != (v81 & 0x7FFFFFFFFFFFFFF8))
              {
LABEL_251:
                do
                {
                  v88 = *((_DWORD *)v71-- - 1);
                  *((_DWORD *)v79-- - 1) = v88;
                }
                while (v71 != v187);
              }
            }
          }
          else
          {
            v78 = 0;
            v79 = (float *)(4 * v74);
            *(float *)(4 * v74) = v70;
            v72 = 4 * v74 + 4;
            if (v188 != v187)
              goto LABEL_102;
          }
          v187 = v79;
          v189[0] = &v78[4 * v77];
          if (v73)
            operator delete(v73);
LABEL_113:
          v89 = (float)((float)((v69 >> 10) & 0x7FF) / 2047.0) * 255.0;
          v188 = (float *)v72;
          v90 = (char *)v190;
          if ((unint64_t)v190 < *((_QWORD *)&v190 + 1))
          {
            *(float *)v190 = v89;
            v91 = v190 + 4;
            goto LABEL_135;
          }
          v92 = v189[1];
          v93 = (uint64_t)(v190 - (unint64_t)v189[1]) >> 2;
          v94 = v93 + 1;
          if ((unint64_t)(v93 + 1) >> 62)
            goto LABEL_245;
          v95 = *((_QWORD *)&v190 + 1) - (unint64_t)v189[1];
          if ((uint64_t)(*((_QWORD *)&v190 + 1) - (unint64_t)v189[1]) >> 1 > v94)
            v94 = v95 >> 1;
          if ((unint64_t)v95 >= 0x7FFFFFFFFFFFFFFCLL)
            v96 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v96 = v94;
          if (v96)
          {
            if (v96 >> 62)
              goto LABEL_243;
            v97 = (char *)operator new(4 * v96);
            v98 = (float *)&v97[4 * v93];
            *v98 = v89;
            v91 = (uint64_t)(v98 + 1);
            if ((void *)v190 != v189[1])
            {
LABEL_124:
              v99 = v190 - 4 - (unint64_t)v189[1];
              if (v99 < 0x2C)
                goto LABEL_252;
              if ((void *)((char *)v189[1] - (char *)v97) < (void *)0x20)
                goto LABEL_252;
              v100 = (v99 >> 2) + 1;
              v101 = 4 * (v100 & 0x7FFFFFFFFFFFFFF8);
              v102 = (char *)(v190 - v101);
              v98 = (float *)((char *)v98 - v101);
              v103 = &v97[4 * v93 - 16];
              v104 = (__int128 *)(v190 - 16);
              v105 = v100 & 0x7FFFFFFFFFFFFFF8;
              do
              {
                v106 = *v104;
                *((_OWORD *)v103 - 1) = *(v104 - 1);
                *(_OWORD *)v103 = v106;
                v103 -= 32;
                v104 -= 2;
                v105 -= 8;
              }
              while (v105);
              v90 = v102;
              if (v100 != (v100 & 0x7FFFFFFFFFFFFFF8))
              {
LABEL_252:
                do
                {
                  v107 = *((_DWORD *)v90 - 1);
                  v90 -= 4;
                  *((_DWORD *)v98-- - 1) = v107;
                }
                while (v90 != v189[1]);
              }
            }
          }
          else
          {
            v97 = 0;
            v98 = (float *)(4 * v93);
            *(float *)(4 * v93) = v89;
            v91 = 4 * v93 + 4;
            if ((void *)v190 != v189[1])
              goto LABEL_124;
          }
          v189[1] = v98;
          *((_QWORD *)&v190 + 1) = &v97[4 * v96];
          if (v92)
            operator delete(v92);
LABEL_135:
          v108 = (float)((float)(v69 >> 21) / 2047.0) * 255.0;
          *(_QWORD *)&v190 = v91;
          v109 = __p_8;
          if (__p_8 < v193)
          {
            *__p_8 = v108;
            v68 = (uint64_t)(__p_8 + 1);
          }
          else
          {
            v110 = __p;
            v111 = __p_8 - __p;
            v112 = v111 + 1;
            if ((unint64_t)(v111 + 1) >> 62)
LABEL_245:
              sub_2394189F8();
            v113 = (char *)v193 - (char *)__p;
            if (((char *)v193 - (char *)__p) >> 1 > v112)
              v112 = v113 >> 1;
            if ((unint64_t)v113 >= 0x7FFFFFFFFFFFFFFCLL)
              v114 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v114 = v112;
            if (v114)
            {
              if (v114 >> 62)
LABEL_243:
                sub_239418A80();
              v115 = operator new(4 * v114);
              v116 = (float *)&v115[4 * v111];
              *v116 = v108;
              v68 = (uint64_t)(v116 + 1);
              if (__p_8 != __p)
              {
LABEL_145:
                v117 = (char *)(__p_8 - 1) - (char *)__p;
                if (v117 < 0x2C)
                  goto LABEL_253;
                if ((unint64_t)((char *)__p - v115) < 0x20)
                  goto LABEL_253;
                v118 = (v117 >> 2) + 1;
                v119 = 4 * (v118 & 0x7FFFFFFFFFFFFFF8);
                v120 = &__p_8[v119 / 0xFFFFFFFFFFFFFFFCLL];
                v116 = (float *)((char *)v116 - v119);
                v121 = &v115[4 * v111 - 16];
                v122 = __p_8 - 4;
                v123 = v118 & 0x7FFFFFFFFFFFFFF8;
                do
                {
                  v124 = *(_OWORD *)v122;
                  *(v121 - 1) = *((_OWORD *)v122 - 1);
                  *v121 = v124;
                  v121 -= 2;
                  v122 -= 8;
                  v123 -= 8;
                }
                while (v123);
                v109 = v120;
                if (v118 != (v118 & 0x7FFFFFFFFFFFFFF8))
                {
LABEL_253:
                  do
                  {
                    v125 = *((_DWORD *)v109-- - 1);
                    *((_DWORD *)v116-- - 1) = v125;
                  }
                  while (v109 != __p);
                }
              }
            }
            else
            {
              v115 = 0;
              v116 = (float *)(4 * v111);
              *(float *)(4 * v111) = v108;
              v68 = 4 * v111 + 4;
              if (__p_8 != __p)
                goto LABEL_145;
            }
            __p = v116;
            v193 = (float *)&v115[4 * v114];
            if (v110)
              operator delete(v110);
          }
          __p_8 = (float *)v68;
          v40 += 3;
          if (v40 == v41)
            goto LABEL_82;
          continue;
        }
      }
      v48 = 0;
      v49 = sqrtf(v42 / (float)(0xAAAAAAAAAAAAAAABLL * (v178 >> 2)));
      do
      {
        while (1)
        {
          v50 = v40[2];
          v51 = (float)(v50 - v12) / v49;
          if (v51 < -2.0 || v50 > 10.0 && v51 > 3.0)
            break;
          v40 += 3;
          if (v40 == v41)
            goto LABEL_77;
        }
        v52 = *v3;
        v53 = v3[1];
        if (*v3 != v53)
        {
          while (*(_DWORD *)v52 != *(_DWORD *)v40)
          {
            v52 += 2;
            if (v52 == v53)
              goto LABEL_74;
          }
        }
        if (v52 != v53)
        {
          *(_QWORD *)v52 = *((_QWORD *)v53 - 1);
          v54 = (uint64_t)(v3[1] - 2);
          v3[1] = (float *)v54;
          ++*(_DWORD *)(**(_QWORD **)(a1 + 32) + 4 * v177);
          if ((float)((float)(unint64_t)(v182 - ((v54 - (uint64_t)*v3) >> 3)) / v8) > 0.3)
            goto LABEL_227;
          v41 = *v183;
          v48 = 1;
        }
LABEL_74:
        v55 = (char *)v41 - (char *)(v40 + 3);
        if (v41 != v40 + 3)
          memmove(v40, v40 + 3, (char *)v41 - (char *)(v40 + 3));
        v41 -= 3;
        *v183 = (float *)((char *)v40 + v55);
      }
      while (v40 != (float *)((char *)v40 + v55));
LABEL_77:
      v40 = *v180;
      v179 = v48 & 1;
      if (*v180 != v41)
        goto LABEL_91;
LABEL_82:
      v56 = v187;
      v57 = v188;
      v58 = 0.0;
      v59 = 0.0;
      v60 = (char *)v188 - (char *)v187;
      v61 = v179;
      if (v188 != v187)
      {
        v62 = v60 << 29;
        if ((v60 & 4) != 0)
        {
          v126 = (v62 - 0x80000000) >> 32;
          v127 = &v187[v126];
          if (v127 != v188)
          {
            sub_2394F1C6C(v187, v127, v188);
            v56 = v187;
          }
          v59 = v56[v126];
        }
        else
        {
          v63 = (int)(v60 >> 3);
          v64 = &v187[v63];
          if (v64 != v188)
          {
            sub_2394F1C6C(v187, v64, v188);
            v56 = v187;
            v57 = v188;
            v62 = ((char *)v188 - (char *)v187) << 29;
          }
          v65 = v56[v63];
          v66 = (v62 - 0x100000000) >> 32;
          v67 = &v56[v66];
          if (v67 != v57)
          {
            sub_2394F1C6C(v56, v67, v57);
            v56 = v187;
          }
          v59 = (float)(v65 + v56[v66]) * 0.5;
        }
      }
      v128 = (float *)v189[1];
      v129 = (float *)v190;
      v130 = v190 - (unint64_t)v189[1];
      if ((void *)v190 != v189[1])
      {
        v131 = v130 << 29;
        if ((v130 & 4) != 0)
        {
          v137 = (v131 - 0x80000000) >> 32;
          v138 = (float *)((char *)v189[1] + 4 * v137);
          if (v138 != (float *)v190)
          {
            sub_2394F1C6C((float *)v189[1], v138, (float *)v190);
            v128 = (float *)v189[1];
          }
          v58 = v128[v137];
        }
        else
        {
          v132 = (int)(v130 >> 3);
          v133 = (float *)((char *)v189[1] + 4 * v132);
          if (v133 != (float *)v190)
          {
            sub_2394F1C6C((float *)v189[1], v133, (float *)v190);
            v128 = (float *)v189[1];
            v129 = (float *)v190;
            v131 = ((_QWORD)v190 - (unint64_t)v189[1]) << 29;
          }
          v134 = v128[v132];
          v135 = (v131 - 0x100000000) >> 32;
          v136 = &v128[v135];
          if (v136 != v129)
          {
            sub_2394F1C6C(v128, v136, v129);
            v128 = (float *)v189[1];
          }
          v58 = (float)(v134 + v128[v135]) * 0.5;
        }
      }
      v139 = __p;
      v140 = __p_8;
      v141 = 0.0;
      v142 = 0.0;
      v143 = (char *)__p_8 - (char *)__p;
      if (__p_8 != __p)
      {
        v144 = v143 << 29;
        if ((v143 & 4) != 0)
        {
          v150 = (v144 - 0x80000000) >> 32;
          v151 = &__p[v150];
          if (v151 != __p_8)
          {
            sub_2394F1C6C(__p, v151, __p_8);
            v139 = __p;
          }
          v142 = v139[v150];
        }
        else
        {
          v145 = (int)(v143 >> 3);
          v146 = &__p[v145];
          if (v146 != __p_8)
          {
            sub_2394F1C6C(__p, v146, __p_8);
            v139 = __p;
            v140 = __p_8;
            v144 = ((char *)__p_8 - (char *)__p) << 29;
          }
          v147 = v139[v145];
          v148 = (v144 - 0x100000000) >> 32;
          v149 = &v139[v148];
          if (v149 != v140)
          {
            sub_2394F1C6C(v139, v149, v140);
            v139 = __p;
          }
          v142 = (float)(v147 + v139[v148]) * 0.5;
        }
      }
      v152 = *v180;
      v153 = *v183;
      if (*v180 != *v183)
      {
        v154 = *v180;
        do
        {
          v155 = *((_DWORD *)v154 + 1);
          v156 = (float)((float)(v155 & 0x3FF) / 1023.0) * 255.0;
          v157 = (float)((float)((v155 >> 10) & 0x7FF) / 2047.0) * 255.0;
          v158 = (float)((float)(v155 >> 21) / 2047.0) * 255.0;
          v159 = v156 >= (float)(v59 + 30.0) || v156 <= (float)(v59 + -30.0);
          v160 = v141 + 1.0;
          if (v159)
            v160 = v141;
          if (v157 < (float)(v58 + 30.0) && v157 > (float)(v58 + -30.0))
            v160 = v160 + 1.0;
          if (v158 >= (float)(v142 + 30.0) || v158 <= (float)(v142 + -30.0))
            v141 = v160;
          else
            v141 = v160 + 1.0;
          v154 += 3;
        }
        while (v154 != v153);
      }
      if (v153 != v152 && (float)(v141 / (float)(unint64_t)(v153 - v152)) > 0.65)
      {
        do
        {
          v163 = *v3;
          v164 = v3[1];
          if (*v3 != v164)
          {
            while (*(_DWORD *)v163 != *(_DWORD *)v152)
            {
              v163 += 2;
              if (v163 == v164)
                goto LABEL_205;
            }
          }
          if (v163 == v164)
            continue;
          v165 = *((_DWORD *)v152 + 1);
          v166 = vabds_f32((float)((float)((v165 >> 10) & 0x7FF) / 2047.0) * 255.0, v58);
          v167 = vabds_f32((float)((float)(v165 & 0x3FF) / 1023.0) * 255.0, v59) <= 60.0 && v166 <= 60.0;
          v168 = vabds_f32((float)((float)(v165 >> 21) / 2047.0) * 255.0, v142);
          if (v167 && v168 <= 60.0)
          {
            v172 = v163[1];
            if (v172 != 0.0)
            {
              if (v172 < 0.0)
                v172 = 0.0 - v172;
              if (v172 > 0.000001)
              {
                v152 += 3;
                continue;
              }
            }
          }
          else
          {
            v163[1] = 0.0;
          }
          *(_QWORD *)v163 = *((_QWORD *)v164 - 1);
          v170 = (uint64_t)(v3[1] - 2);
          v3[1] = (float *)v170;
          ++*(_DWORD *)(**(_QWORD **)(a1 + 16) + 4 * v177);
          if ((float)((float)(unint64_t)(v182 - ((v170 - (uint64_t)*v3) >> 3)) / v8) > 0.3)
            goto LABEL_227;
          v171 = (char *)*v183 - (char *)(v152 + 3);
          if (*v183 != v152 + 3)
            memmove(v152, v152 + 3, (char *)*v183 - (char *)(v152 + 3));
          v153 = (float *)((char *)v152 + v171);
          *v183 = (float *)((char *)v152 + v171);
          v61 = 1;
LABEL_205:
          ;
        }
        while (v152 != v153);
      }
      if ((v61 & 1) != 0 && ++v176 != v175)
        continue;
      break;
    }
  }
LABEL_227:
  if (__p)
    operator delete(__p);
  if (v189[1])
    operator delete(v189[1]);
  if (v187)
    operator delete(v187);
  if (v184)
    operator delete(v184);
  if (!v195)
    sub_2394172E0();
  v5 = *v195;
LABEL_237:
  v5[6]();
  result = v195;
  if (v195 == v194)
  {
    v174 = 4;
    result = (uint64_t (***)())v194;
  }
  else
  {
    if (!v195)
      return result;
    v174 = 5;
  }
  return (uint64_t (***)())(*result)[v174]();
}

void sub_239548A0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34)
{
  void **v34;
  uint64_t v35;
  void **v37;
  void *v38;
  void *v39;
  uint64_t v40;

  v37 = v34;
  while (1)
  {
    v39 = *(v37 - 3);
    v37 -= 3;
    v38 = v39;
    if (v39)
    {
      *(v34 - 2) = v38;
      operator delete(v38);
    }
    v34 = v37;
    if (v37 == &a27)
    {
      if (__p)
        operator delete(__p);
      v40 = *(_QWORD *)(v35 - 168);
      if (!v40)
        sub_2394172E0();
      (*(void (**)(uint64_t))(*(_QWORD *)v40 + 48))(v40);
      sub_239EC0548((_QWORD *)(v35 - 168), (_QWORD *)(v35 - 192));
      _Unwind_Resume(a1);
    }
  }
}

void sub_239548B0C()
{
  JUMPOUT(0x23B83E31CLL);
}

__n128 sub_239548B20(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_250ADDBE8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_239548B58(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_250ADDBE8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_239548B78(uint64_t a1)
{
  uint64_t v1;
  void *v2;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(void **)v1;
  *(_QWORD *)(v1 + 8) = 0;
  *(_QWORD *)(v1 + 16) = 0;
  *(_QWORD *)v1 = 0;
  if (v2)
    operator delete(v2);
}

uint64_t sub_239548B94(unsigned int a1)
{
  void *v2;
  unint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  unsigned int v7;

  objc_msgSend(MEMORY[0x24BDD1760], "processInfo");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "physicalMemory");

  if (a1 >= 0xE4E1C1)
    v4 = 60;
  else
    v4 = 100;
  if (a1 >= 0xE4E1C1)
    v5 = 20;
  else
    v5 = 30;
  if (a1 < 0x7A1201)
    v5 = 50;
  if (a1 < 0xF4241)
    v5 = 100;
  if (v3 >> 35)
    v6 = v4;
  else
    v6 = v5;
  if (a1 >= 0x2DC6C1)
    v7 = 15;
  else
    v7 = 30;
  if (a1 < 0xF4241)
    v7 = 50;
  if (v3 >> 34)
    return v6;
  else
    return v7;
}

void sub_239548C58(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_239548C68(unsigned int a1)
{
  void *v2;
  unint64_t v3;
  float v4;
  float v5;

  objc_msgSend(MEMORY[0x24BDD1760], "processInfo");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "physicalMemory");

  v4 = 16000.0;
  if (!(v3 >> 35))
    v4 = 5000.0;
  if (!(v3 >> 34))
    v4 = 2000.0;
  v5 = (double)a1 * 2.5;
  return (float)(v4 / v5);
}

void sub_239548CF8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_239548D08(int a1, int a2, unint64_t a3, unsigned int a4, unint64_t a5, int a6)
{
  uint64_t v12;
  float v13;
  unsigned int v14;

  v12 = sub_2396F5F50();
  if (!a4)
    a4 = std::thread::hardware_concurrency();
  v13 = 3.0;
  if (a6)
    v13 = 4.0;
  v14 = (float)((float)((float)((float)a5
                                            - (float)((float)((float)((float)a3 * 0.00097656) * 0.00097656)
                                                    + (float)((float)((float)(unint64_t)v12 * 0.00097656)
                                                            * 0.00097656)))
                                    + -100.0)
                            / (float)((float)((float)((float)(a2 * a1) * 0.00000095367) * v13) + 100.0));
  if (v14 <= 1)
    v14 = 1;
  if (v14 >= a4)
    return a4;
  else
    return v14;
}

uint64_t sub_239548DE8(uint64_t a1, unint64_t a2, unsigned int a3, unint64_t a4)
{
  float *v7;
  float v8;
  float v9;
  uint64_t v10;
  unsigned int v11;

  v7 = *(float **)(a1 + 16);
  if (v7)
  {
    v8 = 1.1755e-38;
    do
    {
      if (v8 < (float)((float)((float)(v7[6] * v7[7]) * 3.0) * 0.00000095367))
        v8 = (float)((float)(v7[6] * v7[7]) * 3.0) * 0.00000095367;
      v7 = *(float **)v7;
    }
    while (v7);
    v9 = v8 + 200.0;
    v10 = sub_2396F5F50();
    if (!a3)
      goto LABEL_7;
  }
  else
  {
    v9 = 200.0;
    v10 = sub_2396F5F50();
    if (!a3)
LABEL_7:
      a3 = std::thread::hardware_concurrency();
  }
  v11 = (float)((float)((float)((float)a4
                                            - (float)((float)((float)((float)a2 * 0.00097656) * 0.00097656)
                                                    + (float)((float)((float)(unint64_t)v10 * 0.00097656)
                                                            * 0.00097656)))
                                    + -100.0)
                            / v9);
  if (v11 <= 1)
    v11 = 1;
  if (v11 >= a3)
    return a3;
  else
    return v11;
}

uint64_t sub_239548EE0(_QWORD *a1, uint64_t a2, uint64x2_t **a3, _QWORD *a4, _QWORD *a5, unsigned int a6, uint64_t *a7, char **a8, _QWORD *a9)
{
  uint64x2_t *v13;
  uint64x2_t *v14;
  unint64_t v15;
  int8x8_t v16;
  uint64x2_t *v17;
  unint64_t v18;
  uint64_t v19;
  uint64x2_t *v20;
  int8x16_t v21;
  uint64_t v22;
  int8x16_t v23;
  int8x16_t v24;
  unint64_t v25;
  int8x8_t v26;
  int8x8_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  size_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  char **v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  char *v58;
  void *v59;
  char *v60;
  _QWORD *v61;
  _QWORD *v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unsigned int *v67;
  unsigned int *v68;
  _QWORD *v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  char *v73;
  unint64_t v74;
  uint64_t v75;
  unint64_t v76;
  void **v77;
  void **v78;
  unint64_t v79;
  uint64_t v80;
  void *v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  unint64_t v85;
  int32x4_t *v86;
  unint64_t v87;
  int32x4_t *v88;
  unint64_t v89;
  int32x4_t v90;
  int32x4_t *v91;
  uint64_t v92;
  _QWORD *v93;
  _QWORD *v94;
  uint64_t v95;
  unint64_t v96;
  unint64_t v97;
  char *v98;
  char *v99;
  char *v100;
  uint64_t v101;
  unsigned int *v102;
  uint64_t **v104;
  uint64_t v105;
  unsigned int *v106;
  unsigned int *v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  char *v111;
  uint64_t **v112;
  char *v113;
  char *v114;
  int64_t v115;
  int64_t v116;
  unint64_t v117;
  int64_t v118;
  unint64_t v119;
  _BYTE *v120;
  _DWORD *v121;
  uint64_t v122;
  unint64_t v123;
  unint64_t v124;
  uint64_t v125;
  uint64_t v126;
  char *v127;
  _OWORD *v128;
  char *v129;
  uint64_t v130;
  __int128 v131;
  int v132;
  uint64_t v133;
  _DWORD *v134;
  uint64_t v135;
  char *i;
  uint64_t v137;
  uint64_t v138;
  unsigned int v139;
  char *v140;
  uint64_t v141;
  _QWORD *v142;
  _QWORD *v143;
  void *v144;
  char *v145;
  void *v146;
  unint64_t v148;
  void *v152[2];
  void *__p[2];
  int v154;
  void *v155[2];
  __int128 v156;
  __int128 v157;
  void *v158;
  uint64_t v159;
  unint64_t v160;
  void *v161;
  void *v162;
  char *v163;
  void *v164;
  void *v165;
  uint64_t v166;
  void *v167;
  unint64_t v168;
  uint64_t v169;
  _QWORD v170[3];
  _QWORD *v171;
  _QWORD v172[3];
  _QWORD *v173;
  unint64_t v174[46];

  v174[44] = *MEMORY[0x24BDAC8D0];
  v13 = *a3;
  v14 = a3[1];
  if (*a3 == v14)
  {
    v16 = 0;
    v168 = 0;
    v169 = 0;
    v18 = 1;
    goto LABEL_13;
  }
  v15 = (char *)v14 - (char *)v13 - 8;
  if (v15 < 0x18)
  {
    v16 = 0;
    v17 = *a3;
    goto LABEL_8;
  }
  v19 = (v15 >> 3) + 1;
  v17 = (uint64x2_t *)((char *)v13 + 8 * (v19 & 0x3FFFFFFFFFFFFFFCLL));
  v20 = v13 + 1;
  v21 = 0uLL;
  v22 = v19 & 0x3FFFFFFFFFFFFFFCLL;
  v23 = 0uLL;
  do
  {
    v21 = vbslq_s8((int8x16_t)vcgtq_u64(v20[-1], (uint64x2_t)v21), (int8x16_t)v20[-1], v21);
    v23 = vbslq_s8((int8x16_t)vcgtq_u64(*v20, (uint64x2_t)v23), *(int8x16_t *)v20, v23);
    v20 += 2;
    v22 -= 4;
  }
  while (v22);
  v24 = vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v21, (uint64x2_t)v23), v21, v23);
  v25 = vextq_s8(v24, v24, 8uLL).u64[0];
  v16 = vbsl_s8((int8x8_t)vcgtd_u64(v24.u64[0], v25), *(int8x8_t *)v24.i8, (int8x8_t)v25);
  if (v19 != (v19 & 0x3FFFFFFFFFFFFFFCLL))
  {
    do
    {
LABEL_8:
      v27 = *(int8x8_t *)v17->i8;
      v17 = (uint64x2_t *)((char *)v17 + 8);
      v26 = v27;
      if (*(_QWORD *)&v27 > *(_QWORD *)&v16)
        v16 = v26;
    }
    while (v17 != v14);
  }
  v28 = 0;
  v167 = 0;
  v168 = 0;
  v169 = 0;
  v18 = *(_QWORD *)&v16 + 1;
  if (*(_QWORD *)&v16 == -1)
    goto LABEL_20;
  if ((v18 & 0x8000000000000000) != 0)
    sub_2394189F8();
LABEL_13:
  v29 = *(_QWORD *)&v16 >> 6;
  v30 = (*(_QWORD *)&v16 >> 6) + 1;
  v31 = operator new(8 * v30);
  v28 = v31;
  v168 = v18;
  v169 = v30;
  v167 = v31;
  if (v18 >= 0x41)
    v32 = v29;
  else
    v32 = 0;
  v31[v32] = 0;
  if (v18 >= 0x40)
    bzero(v31, 8 * (v18 >> 6));
  if ((v18 & 0x3F) != 0)
    v28[v18 >> 6] &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v18 & 0x3F));
LABEL_20:
  while (v13 != v14)
  {
    v33 = v13->i64[0];
    v13 = (uint64x2_t *)((char *)v13 + 8);
    *(_QWORD *)((char *)v28 + ((v33 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v33;
  }
  v164 = 0;
  v165 = 0;
  v166 = 0;
  sub_2396C35F8(a1, (uint64_t)&v164);
  v35 = a1[3];
  v34 = a1[4];
  v162 = 0;
  v163 = 0;
  v161 = 0;
  v36 = v34 - v35;
  if (v36)
  {
    if (v36 < 0)
      sub_2394189F8();
    v37 = 0xAAAAAAAAAAAAAAABLL * (v36 >> 2);
    v38 = (char *)operator new(v37);
    v39 = &v38[v37];
    v161 = v38;
    v163 = &v38[v37];
    bzero(v38, v37);
    v162 = v39;
  }
  sub_2397A2A50((uint64_t)v174, a6, 0);
  v41 = a1[3];
  v40 = a1[4];
  v173 = 0;
  v42 = operator new(0x38uLL);
  *v42 = &off_250ADDC70;
  v42[1] = a7;
  v42[2] = &v167;
  v42[3] = a1;
  v42[4] = &v164;
  v42[5] = a2;
  v42[6] = &v161;
  v173 = v42;
  sub_2397A376C(v174, 0xAAAAAAAAAAAAAAABLL * ((v40 - v41) >> 2), v172, 0);
  v43 = v173;
  if (v173 == v172)
  {
    v44 = 4;
    v43 = v172;
  }
  else
  {
    if (!v173)
      goto LABEL_30;
    v44 = 5;
  }
  (*(void (**)(void))(*v43 + 8 * v44))();
LABEL_30:
  sub_239549C60((uint64_t)a8, 0x2710uLL);
  v46 = a1[3];
  v45 = a1[4];
  v159 = 0;
  v160 = 0;
  v158 = 0;
  v47 = v45 - v46;
  if (!v47)
    goto LABEL_79;
  if (v47 < 0)
    sub_2394189F8();
  v48 = 0xAAAAAAAAAAAAAAABLL * (v47 >> 2);
  v158 = operator new(8 * (((v48 - 1) >> 6) + 1));
  v159 = 0;
  v160 = ((v48 - 1) >> 6) + 1;
  sub_23942D8C8(&v158, v48, 0);
  v45 = a1[3];
  v49 = a1[4] - v45;
  if (!v49)
  {
LABEL_79:
    v82 = v45;
    v52 = a8;
    goto LABEL_81;
  }
  v50 = 0;
  v51 = 0xAAAAAAAAAAAAAAABLL * (v49 >> 2);
  v52 = a8;
  v148 = v51;
  do
  {
    v53 = 1 << v50;
    v54 = *((_QWORD *)v158 + (v50 >> 6));
    if ((v54 & (1 << v50)) != 0)
      goto LABEL_34;
    v55 = 8 * (v50 >> 6);
    *(_QWORD *)((char *)v158 + v55) = v54 | v53;
    if ((*(_QWORD *)(*a5 + v55) & v53) != 0)
      goto LABEL_34;
    v56 = *(_DWORD *)(*a7 + 4 * v50);
    v156 = 0u;
    v157 = 0u;
    *(_OWORD *)v155 = 0u;
    sub_2394F0374((uint64_t)v155);
    v57 = *((_QWORD *)&v157 + 1);
    *(_DWORD *)(*(_QWORD *)((char *)v155[1] + ((((_QWORD)v157 + *((_QWORD *)&v157 + 1)) >> 7) & 0x1FFFFFFFFFFFFF8))
              + 4 * ((v157 + *((_QWORD *)&v157 + 1)) & 0x3FF)) = v50;
    *((_QWORD *)&v157 + 1) = v57 + 1;
    *(_OWORD *)v152 = 0u;
    *(_OWORD *)__p = 0u;
    v154 = 1065353216;
    v58 = v52[1];
    if (v58 >= v52[2])
    {
      v60 = sub_239558738(v52, (uint64_t *)v152);
    }
    else
    {
      *(_QWORD *)v58 = 0;
      *((void **)v58 + 1) = v152[1];
      v152[1] = 0;
      *((void **)v58 + 2) = __p[0];
      v59 = __p[1];
      *((void **)v58 + 3) = __p[1];
      *((_DWORD *)v58 + 8) = v154;
      if (v59)
      {
        __p[0] = 0;
        __p[1] = 0;
      }
      v60 = v58 + 40;
    }
    v52[1] = v60;
    v61 = __p[0];
    if (__p[0])
    {
      do
      {
        v62 = (_QWORD *)*v61;
        operator delete(v61);
        v61 = v62;
      }
      while (v62);
    }
    v63 = v152[0];
    v152[0] = 0;
    if (v63)
      operator delete(v63);
    v64 = *((_QWORD *)&v157 + 1);
    if (*((_QWORD *)&v157 + 1))
    {
      v65 = (uint64_t)(a8[1] - 40);
      do
      {
        LODWORD(v152[0]) = 0;
        LODWORD(v152[0]) = *(_DWORD *)(*(_QWORD *)((char *)v155[1]
                                                 + (((unint64_t)v157 >> 7) & 0x1FFFFFFFFFFFFF8))
                                     + 4 * (v157 & 0x3FF));
        *(_QWORD *)&v157 = v157 + 1;
        *((_QWORD *)&v157 + 1) = v64 - 1;
        if ((unint64_t)v157 >= 0x800)
        {
          operator delete(*(void **)v155[1]);
          v155[1] = (char *)v155[1] + 8;
          *(_QWORD *)&v157 = v157 - 1024;
        }
        sub_239456168(v65, (unsigned int *)v152, v152);
        v66 = *a4 + 24 * LODWORD(v152[0]);
        v67 = *(unsigned int **)v66;
        v68 = *(unsigned int **)(v66 + 8);
        if (*(unsigned int **)v66 != v68)
        {
          v69 = v158;
          do
          {
            v70 = *v67;
            v71 = v70 >> 6;
            v72 = 1 << v70;
            if (((1 << v70) & v69[v70 >> 6]) == 0
              && (*(_QWORD *)(*a5 + 8 * v71) & v72) == 0
              && *(_DWORD *)(*a7 + 4 * v70) == v56
              && *((unsigned __int8 *)v161 + v70) == *((unsigned __int8 *)v161 + v50))
            {
              v73 = (char *)v155[1];
              if ((void *)v156 == v155[1])
                v74 = 0;
              else
                v74 = (((_QWORD)v156 - (unint64_t)v155[1]) << 7) - 1;
              v75 = *((_QWORD *)&v157 + 1);
              v76 = *((_QWORD *)&v157 + 1) + v157;
              if (v74 == *((_QWORD *)&v157 + 1) + (_QWORD)v157)
              {
                sub_2394F0374((uint64_t)v155);
                v75 = *((_QWORD *)&v157 + 1);
                v73 = (char *)v155[1];
                v76 = v157 + *((_QWORD *)&v157 + 1);
                v69 = v158;
              }
              *(_DWORD *)(*(_QWORD *)&v73[(v76 >> 7) & 0x1FFFFFFFFFFFFF8] + 4 * (v76 & 0x3FF)) = v70;
              *((_QWORD *)&v157 + 1) = v75 + 1;
              v69[v71] |= v72;
            }
            ++v67;
          }
          while (v67 != v68);
        }
        v64 = *((_QWORD *)&v157 + 1);
      }
      while (*((_QWORD *)&v157 + 1));
    }
    v77 = (void **)v155[1];
    v78 = (void **)v156;
    *((_QWORD *)&v157 + 1) = 0;
    if ((unint64_t)v156 - (unint64_t)v155[1] < 0x11)
    {
      v51 = v148;
      v52 = a8;
      v79 = ((unint64_t)v156 - (unint64_t)v155[1]) >> 3;
      if (v79 == 1)
        goto LABEL_71;
    }
    else
    {
      v51 = v148;
      v52 = a8;
      do
      {
        operator delete(*v77);
        v78 = (void **)v156;
        v77 = (void **)((char *)v155[1] + 8);
        v155[1] = v77;
      }
      while ((_QWORD)v156 - (_QWORD)v77 > 0x10uLL);
      v79 = ((_QWORD)v156 - (_QWORD)v77) >> 3;
      if (v79 == 1)
      {
LABEL_71:
        v80 = 512;
        goto LABEL_72;
      }
    }
    if (v79 != 2)
      goto LABEL_73;
    v80 = 1024;
LABEL_72:
    *(_QWORD *)&v157 = v80;
LABEL_73:
    if (v77 != v78)
    {
      do
      {
        v81 = *v77++;
        operator delete(v81);
      }
      while (v77 != v78);
      if ((void *)v156 != v155[1])
        *(_QWORD *)&v156 = v156 + (((unint64_t)v155[1] - v156 + 7) & 0xFFFFFFFFFFFFFFF8);
    }
    if (v155[0])
      operator delete(v155[0]);
LABEL_34:
    ++v50;
  }
  while (v50 != v51);
  v45 = a1[3];
  v82 = a1[4];
LABEL_81:
  v83 = 0xCCCCCCCCCCCCCCCDLL * ((v52[1] - *v52) >> 3);
  v155[1] = 0;
  *(_QWORD *)&v156 = 0;
  v155[0] = 0;
  if (v82 != v45)
  {
    v84 = (unsigned __int128)((v82 - v45) * (__int128)0x2AAAAAAAAAAAAAABLL) >> 64;
    v85 = (v84 >> 1) + ((unint64_t)v84 >> 63);
    if (v85 >> 62)
      sub_2394189F8();
    v86 = (int32x4_t *)operator new(4 * v85);
    v155[0] = v86;
    *(_QWORD *)&v156 = (char *)v86 + 4 * v85;
    v87 = (v85 - 1) & 0x3FFFFFFFFFFFFFFFLL;
    v88 = v86;
    if (v87 < 7)
      goto LABEL_170;
    v89 = v87 + 1;
    v88 = (int32x4_t *)((char *)v86 + 4 * (v89 & 0x7FFFFFFFFFFFFFF8));
    v90 = vdupq_n_s32(v83);
    v91 = v86 + 1;
    v92 = v89 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v91[-1] = v90;
      *v91 = v90;
      v91 += 2;
      v92 -= 8;
    }
    while (v92);
    if (v89 != (v89 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_170:
      do
      {
        v88->i32[0] = v83;
        v88 = (int32x4_t *)((char *)v88 + 4);
      }
      while (v88 != (int32x4_t *)((char *)v86 + 4 * v85));
    }
    v155[1] = (char *)v86 + 4 * v85;
  }
  v170[0] = &off_250ADDCB8;
  v170[1] = v52;
  v170[2] = v155;
  v171 = v170;
  sub_2397A376C(v174, v83, v170, 0);
  v93 = a9;
  v94 = v171;
  if (v171 == v170)
  {
    v95 = 4;
    v94 = v170;
LABEL_93:
    (*(void (**)(void))(*v94 + 8 * v95))();
  }
  else if (v171)
  {
    v95 = 5;
    goto LABEL_93;
  }
  v152[0] = 0;
  v152[1] = 0;
  __p[0] = 0;
  v96 = 0xCCCCCCCCCCCCCCCDLL * ((v52[1] - *v52) >> 3);
  v97 = (uint64_t)(a9[1] - *a9) >> 2;
  if (v96 <= v97)
  {
    if (v96 < v97)
      a9[1] = *a9 + 0x3333333333333334 * ((v52[1] - *v52) >> 3);
  }
  else
  {
    sub_23942CB44((uint64_t)a9, v96 - v97);
  }
  v99 = *v52;
  v98 = v52[1];
  if (*v52 != v98)
  {
    v100 = 0;
    v101 = 0;
    while (1)
    {
      v102 = (unsigned int *)*((_QWORD *)v99 + 2);
      *(_DWORD *)(*v93 + 4 * v101) = *(_DWORD *)(*a7 + 4 * v102[4]);
      if (*((_QWORD *)v99 + 3) > 3uLL || v102 == 0)
        goto LABEL_100;
      v104 = (uint64_t **)v102;
LABEL_107:
      v105 = *a4 + 24 * *((unsigned int *)v104 + 4);
      v106 = *(unsigned int **)v105;
      v107 = *(unsigned int **)(v105 + 8);
      while (1)
      {
        if (v106 == v107)
        {
          v104 = (uint64_t **)*v104;
          if (!v104)
            goto LABEL_100;
          goto LABEL_107;
        }
        v108 = *v106;
        v109 = *((unsigned int *)v155[0] + v108);
        if (0xCCCCCCCCCCCCCCCDLL * ((a8[1] - *a8) >> 3) > v109)
        {
          v110 = (uint64_t)&(*a8)[40 * v109];
          if (*(_QWORD *)(v110 + 24) >= 7uLL)
            break;
        }
        ++v106;
      }
      do
      {
        sub_239456168(v110, v102 + 4, v102 + 4);
        v102 = *(unsigned int **)v102;
      }
      while (v102);
      v111 = (char *)v152[1];
      if (v152[1] >= __p[0])
        break;
      *(_DWORD *)v152[1] = v101;
      v100 = v111 + 4;
      v152[1] = v111 + 4;
      v112 = (uint64_t **)*((_QWORD *)v99 + 2);
      if (v112)
        goto LABEL_137;
LABEL_100:
      v99 += 40;
      ++v101;
      if (v99 == v98)
      {
        for (i = (char *)v152[0]; v100 != i; v93[1] = v137 - 4)
        {
          v139 = *((_DWORD *)v100 - 1);
          v100 -= 4;
          v138 = v139;
          v140 = a8[1];
          v141 = (uint64_t)&(*a8)[40 * v139];
          if ((char *)v141 != v140 - 40)
          {
            *(_DWORD *)(v141 + 32) = *((_DWORD *)v140 - 2);
            sub_239558A08((_QWORD *)v141, *((uint64_t **)v140 - 3), 0);
            v140 = a8[1];
          }
          v142 = (_QWORD *)*((_QWORD *)v140 - 3);
          if (v142)
          {
            do
            {
              v143 = (_QWORD *)*v142;
              operator delete(v142);
              v142 = v143;
            }
            while (v143);
          }
          v146 = (void *)*((_QWORD *)v140 - 5);
          v145 = v140 - 40;
          v144 = v146;
          *(_QWORD *)v145 = 0;
          if (v146)
            operator delete(v144);
          a8[1] = v145;
          v137 = v93[1];
          *(_DWORD *)(*v93 + 4 * v138) = *(_DWORD *)(v137 - 4);
        }
        if (i)
          operator delete(i);
        goto LABEL_151;
      }
    }
    v113 = v98;
    v114 = (char *)v152[0];
    v115 = (char *)v152[1] - (char *)v152[0];
    v116 = ((char *)v152[1] - (char *)v152[0]) >> 2;
    v117 = v116 + 1;
    if ((unint64_t)(v116 + 1) >> 62)
      sub_2394189F8();
    v118 = (char *)__p[0] - (char *)v152[0];
    if (((char *)__p[0] - (char *)v152[0]) >> 1 > v117)
      v117 = v118 >> 1;
    if ((unint64_t)v118 >= 0x7FFFFFFFFFFFFFFCLL)
      v119 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v119 = v117;
    if (v119)
    {
      if (v119 >> 62)
        sub_239418A80();
      v120 = operator new(4 * v119);
      v121 = &v120[4 * v116];
      *v121 = v101;
      v122 = (uint64_t)(v121 + 1);
      if (v111 != v114)
      {
LABEL_125:
        v123 = v111 - 4 - v114;
        if (v123 < 0x2C)
        {
          v98 = v113;
          v100 = (char *)v122;
          goto LABEL_133;
        }
        v124 = v111 - &v120[v115];
        v98 = v113;
        v100 = (char *)v122;
        if (v124 < 0x20)
          goto LABEL_171;
        v125 = (v123 >> 2) + 1;
        v126 = 4 * (v125 & 0x7FFFFFFFFFFFFFF8);
        v127 = &v111[-v126];
        v121 = (_DWORD *)((char *)v121 - v126);
        v128 = &v120[4 * v116 - 16];
        v129 = v111 - 16;
        v130 = v125 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v131 = *(_OWORD *)v129;
          *(v128 - 1) = *((_OWORD *)v129 - 1);
          *v128 = v131;
          v128 -= 2;
          v129 -= 32;
          v130 -= 8;
        }
        while (v130);
        v111 = v127;
        if (v125 != (v125 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_171:
          do
          {
LABEL_133:
            v132 = *((_DWORD *)v111 - 1);
            v111 -= 4;
            *--v121 = v132;
          }
          while (v111 != v114);
        }
LABEL_134:
        v152[0] = v121;
        __p[0] = &v120[4 * v119];
        if (v114)
          operator delete(v114);
        v93 = a9;
        v152[1] = v100;
        v112 = (uint64_t **)*((_QWORD *)v99 + 2);
        if (!v112)
          goto LABEL_100;
LABEL_137:
        v133 = *a7;
        v134 = v155[0];
        do
        {
          v135 = *((unsigned int *)v112 + 4);
          *(_DWORD *)(v133 + v135 * 4) = *(_DWORD *)(v133 + 4 * v108);
          v134[v135] = v134[v108];
          v112 = (uint64_t **)*v112;
        }
        while (v112);
        goto LABEL_100;
      }
    }
    else
    {
      v120 = 0;
      v121 = (_DWORD *)(4 * v116);
      *(_DWORD *)(4 * v116) = v101;
      v122 = 4 * v116 + 4;
      if (v111 != v114)
        goto LABEL_125;
    }
    v98 = v113;
    v100 = (char *)v122;
    goto LABEL_134;
  }
LABEL_151:
  if (v155[0])
  {
    v155[1] = v155[0];
    operator delete(v155[0]);
  }
  if (v158)
    operator delete(v158);
  sub_2397A2E14(v174);
  if (v161)
  {
    v162 = v161;
    operator delete(v161);
  }
  if (v164)
  {
    v165 = v164;
    operator delete(v164);
  }
  if (v167)
    operator delete(v167);
  return 1;
}

void sub_239549B04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47)
{
  void *v48;
  void *v49;

  if (__p)
    operator delete(__p);
  if (a21)
    operator delete(a21);
  if (a27)
    operator delete(a27);
  sub_2397A2E14(&a47);
  if (a30)
  {
    operator delete(a30);
    v48 = a33;
    if (!a33)
    {
LABEL_9:
      v49 = a36;
      if (!a36)
        goto LABEL_10;
      goto LABEL_13;
    }
  }
  else
  {
    v48 = a33;
    if (!a33)
      goto LABEL_9;
  }
  operator delete(v48);
  v49 = a36;
  if (!a36)
LABEL_10:
    _Unwind_Resume(a1);
LABEL_13:
  operator delete(v49);
  _Unwind_Resume(a1);
}

void sub_239549C60(uint64_t a1, unint64_t a2)
{
  char *v2;
  char *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  _QWORD *v19;
  _QWORD *v20;
  void *v21;
  void *v22;

  v2 = *(char **)a1;
  if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3) < a2)
  {
    if (a2 >= 0x666666666666667)
      sub_2394189F8();
    v4 = *(char **)(a1 + 8);
    v5 = 40 * a2;
    v6 = (char *)operator new(40 * a2);
    v7 = &v6[v5];
    v8 = &v6[v4 - v2];
    if (v4 == v2)
    {
      *(_QWORD *)a1 = v8;
      *(_QWORD *)(a1 + 8) = v8;
      *(_QWORD *)(a1 + 16) = v7;
      if (v2)
LABEL_21:
        operator delete(v2);
    }
    else
    {
      v9 = 0;
      do
      {
        v11 = &v8[v9];
        v12 = &v4[v9];
        v13 = *(_QWORD *)&v4[v9 - 40];
        *((_QWORD *)v12 - 5) = 0;
        *((_QWORD *)v11 - 5) = v13;
        v14 = *(_QWORD *)&v4[v9 - 32];
        *((_QWORD *)v11 - 4) = v14;
        *((_QWORD *)v12 - 4) = 0;
        v15 = *(_QWORD *)&v4[v9 - 24];
        *((_QWORD *)v11 - 3) = v15;
        v16 = (uint64_t)&v8[v9 - 24];
        v17 = *(_QWORD *)&v4[v9 - 16];
        *(_QWORD *)(v16 + 8) = v17;
        *(_DWORD *)(v16 + 16) = *(_DWORD *)&v4[v9 - 8];
        if (v17)
        {
          v10 = *(_QWORD *)(v15 + 8);
          if ((v14 & (v14 - 1)) != 0)
          {
            if (v10 >= v14)
              v10 %= v14;
          }
          else
          {
            v10 &= v14 - 1;
          }
          *(_QWORD *)(v13 + 8 * v10) = v16;
          *(_QWORD *)&v4[v9 - 24] = 0;
          *(_QWORD *)&v4[v9 - 16] = 0;
        }
        v9 -= 40;
      }
      while (&v4[v9] != v2);
      v18 = *(char **)a1;
      v2 = *(char **)(a1 + 8);
      *(_QWORD *)a1 = &v8[v9];
      *(_QWORD *)(a1 + 8) = v8;
      *(_QWORD *)(a1 + 16) = v7;
      if (v2 != v18)
      {
        do
        {
          v19 = (_QWORD *)*((_QWORD *)v2 - 3);
          if (v19)
          {
            do
            {
              v20 = (_QWORD *)*v19;
              operator delete(v19);
              v19 = v20;
            }
            while (v20);
          }
          v22 = (void *)*((_QWORD *)v2 - 5);
          v2 -= 40;
          v21 = v22;
          *(_QWORD *)v2 = 0;
          if (v22)
            operator delete(v21);
        }
        while (v2 != v18);
        v2 = v18;
      }
      if (v2)
        goto LABEL_21;
    }
  }
}

void sub_239549DE4(_QWORD *a1, _QWORD *a2, _QWORD *a3, _QWORD *a4, uint64_t a5, _QWORD *a6, uint64_t a7, double a8, float64x2_t a9)
{
  float64x2_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  char *v24;
  char *v25;
  _QWORD *v26;
  _QWORD *v27;
  char *v28;
  char *v29;
  int8x8_t v30;
  unint64_t v31;
  uint8x8_t v32;
  unint64_t v33;
  uint64_t **v34;
  uint64_t *v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  int8x8_t v39;
  uint8x8_t v40;
  unint64_t v41;
  float **v42;
  float *v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  _DWORD *v47;
  _QWORD *i;
  uint64_t *v49;
  unint64_t v51;
  unsigned int v52;
  uint64_t v53;
  unint64_t v54;
  uint8x8_t v55;
  unint64_t v56;
  uint64_t **v57;
  uint64_t *v58;
  unint64_t v59;
  unint64_t v60;
  float *v61;
  double v62;
  float64x2_t v63;
  float64x2_t v64;
  uint64_t *v65;
  uint64_t *v66;
  int8x8_t v67;
  unint64_t v68;
  uint8x8_t v69;
  uint64_t v70;
  uint64_t v71;
  unsigned int *v72;
  unint64_t v73;
  uint8x8_t v74;
  unint64_t v75;
  uint64_t **v76;
  uint64_t *v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  char *v83;
  uint64_t v84;
  _QWORD *v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  unint64_t v91;
  _BYTE *v92;
  _QWORD *v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  _OWORD *v98;
  char *v99;
  uint64_t v100;
  __int128 v101;
  uint64_t v102;
  _QWORD *v103;
  _QWORD *v104;
  _QWORD *v105;
  unint64_t v106;
  uint64_t v107;
  unint64_t v108;
  unint64_t v109;
  _QWORD *v110;
  _QWORD *v111;
  void *v112;
  _QWORD *v113;
  _QWORD *v114;
  void *v115;
  _QWORD *v116;
  _QWORD *v117;
  void *v118;
  unint64_t v119;
  uint64_t v125;
  float *v127;
  _QWORD *v128;
  _DWORD *v129;
  uint64_t v130;
  char **v131;
  float64x2_t v132;
  uint64_t v133;
  uint64_t v134;
  unsigned int v135;
  void *v136[2];
  void *v137[2];
  int v138;
  void *v139[2];
  void *__p[2];
  int v141;
  __int128 v142;
  __int128 v143;
  int v144;
  _DWORD *v145[2];

  if (!*(_BYTE *)(a7 + 168))
    sub_2394875CC();
  v9.f64[1] = 0.0;
  v142 = 0u;
  v143 = 0u;
  v144 = 1065353216;
  *(_OWORD *)v139 = 0u;
  *(_OWORD *)__p = 0u;
  v141 = 1065353216;
  *(_OWORD *)v136 = 0u;
  *(_OWORD *)v137 = 0u;
  v138 = 1065353216;
  v10 = a4[1] - *a4;
  if (v10)
  {
    v11 = (_QWORD *)a7;
    v12 = a6;
    v125 = 0;
    v131 = (char **)(a7 + 144);
    v119 = 0xCCCCCCCCCCCCCCCDLL * (v10 >> 3);
    __asm { FMOV            V8.2S, #-1.0 }
    while (1)
    {
      if (*((_QWORD *)&v143 + 1))
      {
        v18 = (_QWORD *)v143;
        if ((_QWORD)v143)
        {
          do
          {
            v19 = (_QWORD *)*v18;
            operator delete(v18);
            v18 = v19;
          }
          while (v19);
        }
        *(_QWORD *)&v143 = 0;
        v20 = *((_QWORD *)&v142 + 1);
        if (*((_QWORD *)&v142 + 1))
        {
          v21 = 0;
          do
            *(_QWORD *)(v142 + 8 * v21++) = 0;
          while (v20 != v21);
        }
        *((_QWORD *)&v143 + 1) = 0;
      }
      if (__p[1])
      {
        v22 = __p[0];
        if (__p[0])
        {
          do
          {
            v23 = (_QWORD *)*v22;
            operator delete(v22);
            v22 = v23;
          }
          while (v23);
        }
        __p[0] = 0;
        v24 = (char *)v139[1];
        if (v139[1])
        {
          v25 = 0;
          do
            *((_QWORD *)v139[0] + (_QWORD)v25++) = 0;
          while (v24 != v25);
        }
        __p[1] = 0;
      }
      if (v137[1])
      {
        v26 = v137[0];
        if (v137[0])
        {
          do
          {
            v27 = (_QWORD *)*v26;
            operator delete(v26);
            v26 = v27;
          }
          while (v27);
        }
        v137[0] = 0;
        v28 = (char *)v136[1];
        if (v136[1])
        {
          v29 = 0;
          do
            *((_QWORD *)v136[0] + (_QWORD)v29++) = 0;
          while (v28 != v29);
        }
        v137[1] = 0;
      }
      v30 = (int8x8_t)a3[1];
      if (!*(_QWORD *)&v30)
        goto LABEL_205;
      v31 = *(unsigned int *)(*a1 + 4 * v125);
      v32 = (uint8x8_t)vcnt_s8(v30);
      v32.i16[0] = vaddlv_u8(v32);
      if (v32.u32[0] > 1uLL)
      {
        v33 = *(unsigned int *)(*a1 + 4 * v125);
        if (*(_QWORD *)&v30 <= v31)
          v33 = v31 % *(_QWORD *)&v30;
      }
      else
      {
        v33 = (v30.i32[0] - 1) & v31;
      }
      v34 = *(uint64_t ***)(*a3 + 8 * v33);
      if (!v34 || (v35 = *v34) == 0)
LABEL_205:
        sub_23941D898("unordered_map::at: key not found");
      if (v32.u32[0] < 2uLL)
      {
        v36 = *(_QWORD *)&v30 - 1;
        while (1)
        {
          v38 = v35[1];
          if (v38 == v31)
          {
            if (v35[2] == v31)
              goto LABEL_48;
          }
          else if ((v38 & v36) != v33)
          {
            goto LABEL_205;
          }
          v35 = (uint64_t *)*v35;
          if (!v35)
            goto LABEL_205;
        }
      }
      while (1)
      {
        v37 = v35[1];
        if (v37 == v31)
          break;
        if (v37 >= *(_QWORD *)&v30)
          v37 %= *(_QWORD *)&v30;
        if (v37 != v33)
          goto LABEL_205;
LABEL_38:
        v35 = (uint64_t *)*v35;
        if (!v35)
          goto LABEL_205;
      }
      if (v35[2] != v31)
        goto LABEL_38;
LABEL_48:
      v39 = (int8x8_t)a2[1];
      if (!*(_QWORD *)&v39)
        goto LABEL_206;
      v40 = (uint8x8_t)vcnt_s8(v39);
      v40.i16[0] = vaddlv_u8(v40);
      if (v40.u32[0] > 1uLL)
      {
        v41 = *(unsigned int *)(*a1 + 4 * v125);
        if (*(_QWORD *)&v39 <= v31)
          v41 = v31 % *(_QWORD *)&v39;
      }
      else
      {
        v41 = (v39.i32[0] - 1) & v31;
      }
      v42 = *(float ***)(*a2 + 8 * v41);
      if (!v42 || (v43 = *v42) == 0)
LABEL_206:
        sub_23941D898("unordered_map::at: key not found");
      if (v40.u32[0] < 2uLL)
      {
        v44 = *(_QWORD *)&v39 - 1;
        while (1)
        {
          v46 = *((_QWORD *)v43 + 1);
          if (v46 == v31)
          {
            if (*((_QWORD *)v43 + 2) == v31)
              goto LABEL_68;
          }
          else if ((v46 & v44) != v41)
          {
            goto LABEL_206;
          }
          v43 = *(float **)v43;
          if (!v43)
            goto LABEL_206;
        }
      }
      while (2)
      {
        v45 = *((_QWORD *)v43 + 1);
        if (v45 != v31)
        {
          if (v45 >= *(_QWORD *)&v39)
            v45 %= *(_QWORD *)&v39;
          if (v45 != v41)
            goto LABEL_206;
LABEL_58:
          v43 = *(float **)v43;
          if (!v43)
            goto LABEL_206;
          continue;
        }
        break;
      }
      if (*((_QWORD *)v43 + 2) != v31)
        goto LABEL_58;
LABEL_68:
      v127 = v43;
      v128 = (_QWORD *)(*a4 + 40 * v125);
      v47 = (_DWORD *)v128[2];
      if (!v47)
        goto LABEL_69;
      while (2)
      {
        while (2)
        {
          v52 = v47[4];
          LODWORD(v134) = v52;
          if (!*((_BYTE *)v11 + 200))
            sub_2394875CC();
          v53 = 0;
          v133 = v11[3] + 12 * v52;
          v130 = v11[22] + 12 * v52;
LABEL_81:
          v135 = 0;
          v54 = *(unsigned int *)(v133 + 4 * v53);
          v135 = *(_DWORD *)(v133 + 4 * v53);
          if (v139[1])
          {
            v55 = (uint8x8_t)vcnt_s8((int8x8_t)v139[1]);
            v55.i16[0] = vaddlv_u8(v55);
            if (v55.u32[0] > 1uLL)
            {
              v56 = v54;
              if (v139[1] <= (void *)v54)
                v56 = v54 % (unint64_t)v139[1];
            }
            else
            {
              v56 = (LODWORD(v139[1]) - 1) & v54;
            }
            v57 = (uint64_t **)*((_QWORD *)v139[0] + v56);
            if (v57)
            {
              v58 = *v57;
              if (v58)
              {
                if (v55.u32[0] < 2uLL)
                {
                  while (1)
                  {
                    v60 = v58[1];
                    if (v60 == v54)
                    {
                      if (*((_DWORD *)v58 + 4) == (_DWORD)v54)
                        goto LABEL_110;
                    }
                    else if ((v60 & ((unint64_t)v139[1] - 1)) != v56)
                    {
                      goto LABEL_101;
                    }
                    v58 = (uint64_t *)*v58;
                    if (!v58)
                      goto LABEL_101;
                  }
                }
                do
                {
                  v59 = v58[1];
                  if (v59 == v54)
                  {
                    if (*((_DWORD *)v58 + 4) == (_DWORD)v54)
                    {
LABEL_110:
                      if (!*((_BYTE *)v58 + 28))
                      {
                        *(_QWORD *)(*v12 + (((unint64_t)v134 >> 3) & 0x1FFFFFF8)) |= 1 << v134;
                        sub_239456168((uint64_t)v136, (unsigned int *)&v134, &v134);
                      }
LABEL_108:
                      if (++v53 == 3)
                        goto LABEL_115;
                      goto LABEL_81;
                    }
                  }
                  else
                  {
                    if ((void *)v59 >= v139[1])
                      v59 %= (unint64_t)v139[1];
                    if (v59 != v56)
                      break;
                  }
                  v58 = (uint64_t *)*v58;
                }
                while (v58);
              }
            }
          }
LABEL_101:
          v61 = (float *)(*v11 + 12 * v54);
          v9.f64[0] = *v61;
          a9.f64[0] = v61[1];
          v62 = v61[2];
          v63 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(*(float64x2_t *)(v35 + 11), v9.f64[0]), *(float64x2_t *)(v35 + 15), a9.f64[0]), *(float64x2_t *)(v35 + 19), v62);
          v9.f64[0] = *((double *)v35 + 13) * v9.f64[0]
                    + *((double *)v35 + 17) * a9.f64[0]
                    + *((double *)v35 + 21) * v62;
          *(_QWORD *)&a9.f64[0] = v35[25];
          v64 = vmlaq_f64(*(float64x2_t *)(v35 + 5), *(float64x2_t *)(v35 + 3), vdivq_f64(vaddq_f64(*(float64x2_t *)(v35 + 23), v63), (float64x2_t)vdupq_lane_s64(*(_OWORD *)&vaddq_f64(a9, v9), 0)));
          if (v64.f64[0] >= 0.0 && v64.f64[0] <= v127[6] && v64.f64[1] >= 0.0 && v64.f64[1] <= v127[7])
          {
            v132 = v64;
            v145[0] = &v135;
            v65 = sub_239558B2C((uint64_t)v139, &v135, (uint64_t)&unk_239EC6E98, v145);
            if (!*((_BYTE *)v65 + 28))
              *((_BYTE *)v65 + 28) = 1;
            v9.f64[1] = v132.f64[1];
            *(uint64_t *)((char *)v65 + 20) = (uint64_t)vcvt_f32_f64(v132);
            goto LABEL_108;
          }
          *(_QWORD *)(*v12 + (((unint64_t)v134 >> 3) & 0x1FFFFFF8)) |= 1 << v134;
          v145[0] = &v135;
          v66 = sub_239558B2C((uint64_t)v139, &v135, (uint64_t)&unk_239EC6E98, v145);
          if (*((_BYTE *)v66 + 28))
            *((_BYTE *)v66 + 28) = 0;
          sub_239456168((uint64_t)v136, (unsigned int *)&v134, &v134);
LABEL_115:
          if (((*(_QWORD *)(*v12 + (((unint64_t)v134 >> 3) & 0x1FFFFFF8)) >> v134) & 1) != 0)
          {
            sub_239456168((uint64_t)v136, (unsigned int *)&v134, &v134);
            v67 = (int8x8_t)v128[1];
            v68 = *((_QWORD *)v47 + 1);
            v69 = (uint8x8_t)vcnt_s8(v67);
            v69.i16[0] = vaddlv_u8(v69);
            if (v69.u32[0] > 1uLL)
            {
              if (v68 >= *(_QWORD *)&v67)
                v68 %= *(_QWORD *)&v67;
            }
            else
            {
              v68 &= *(_QWORD *)&v67 - 1;
            }
            v103 = *(_QWORD **)v47;
            v104 = *(_QWORD **)(*v128 + 8 * v68);
            do
            {
              v105 = v104;
              v104 = (_QWORD *)*v104;
            }
            while (v104 != (_QWORD *)v47);
            if (v105 == v128 + 2)
              goto LABEL_213;
            v106 = v105[1];
            if (v69.u32[0] > 1uLL)
            {
              if (v106 >= *(_QWORD *)&v67)
                v106 %= *(_QWORD *)&v67;
            }
            else
            {
              v106 &= *(_QWORD *)&v67 - 1;
            }
            v107 = *(_QWORD *)v47;
            if (v106 == v68)
            {
LABEL_184:
              if (v107)
                goto LABEL_185;
            }
            else
            {
LABEL_213:
              if (!v103)
                goto LABEL_183;
              v108 = v103[1];
              if (v69.u32[0] > 1uLL)
              {
                if (v108 >= *(_QWORD *)&v67)
                  v108 %= *(_QWORD *)&v67;
              }
              else
              {
                v108 &= *(_QWORD *)&v67 - 1;
              }
              v107 = *(_QWORD *)v47;
              if (v108 != v68)
              {
LABEL_183:
                *(_QWORD *)(*v128 + 8 * v68) = 0;
                v107 = *(_QWORD *)v47;
                goto LABEL_184;
              }
LABEL_185:
              v109 = *(_QWORD *)(v107 + 8);
              if (v69.u32[0] > 1uLL)
              {
                if (v109 >= *(_QWORD *)&v67)
                  v109 %= *(_QWORD *)&v67;
              }
              else
              {
                v109 &= *(_QWORD *)&v67 - 1;
              }
              if (v109 != v68)
              {
                *(_QWORD *)(*v128 + 8 * v109) = v105;
                v107 = *(_QWORD *)v47;
              }
            }
            *v105 = v107;
            *(_QWORD *)v47 = 0;
            --v128[3];
            operator delete(v47);
            v47 = v103;
            if (!v103)
              goto LABEL_69;
            continue;
          }
          break;
        }
        v70 = 0;
        v71 = v130;
        v129 = v47;
        while (2)
        {
          v72 = (unsigned int *)(v133 + 4 * v70);
          if (*((_QWORD *)&v142 + 1))
          {
            v73 = *v72;
            v74 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v142 + 8));
            v74.i16[0] = vaddlv_u8(v74);
            if (v74.u32[0] > 1uLL)
            {
              v75 = *v72;
              if (*((_QWORD *)&v142 + 1) <= v73)
                v75 = v73 % *((_QWORD *)&v142 + 1);
            }
            else
            {
              v75 = (DWORD2(v142) - 1) & v73;
            }
            v76 = *(uint64_t ***)(v142 + 8 * v75);
            if (v76)
            {
              v77 = *v76;
              if (v77)
              {
                if (v74.u32[0] < 2uLL)
                {
                  while (1)
                  {
                    v79 = v77[1];
                    if (v79 == v73)
                    {
                      if (*((_DWORD *)v77 + 4) == (_DWORD)v73)
                        goto LABEL_154;
                    }
                    else if ((v79 & (*((_QWORD *)&v142 + 1) - 1)) != v75)
                    {
                      goto LABEL_139;
                    }
                    v77 = (uint64_t *)*v77;
                    if (!v77)
                      goto LABEL_139;
                  }
                }
                do
                {
                  v78 = v77[1];
                  if (v78 == v73)
                  {
                    if (*((_DWORD *)v77 + 4) == (_DWORD)v73)
                      goto LABEL_154;
                  }
                  else
                  {
                    if (v78 >= *((_QWORD *)&v142 + 1))
                      v78 %= *((_QWORD *)&v142 + 1);
                    if (v78 != v75)
                      break;
                  }
                  v77 = (uint64_t *)*v77;
                }
                while (v77);
              }
            }
          }
LABEL_139:
          v81 = v11[18];
          v80 = v11[19];
          v145[0] = (_DWORD *)(v133 + 4 * v70);
          *((_DWORD *)sub_2394F126C((uint64_t)&v142, v145[0], (uint64_t)&unk_239EC6E98, v145) + 5) = (unint64_t)(v80 - v81) >> 3;
          v83 = (char *)v11[19];
          v82 = v11[20];
          if ((unint64_t)v83 >= v82)
          {
            v85 = v11;
            v86 = *v131;
            v87 = v83 - *v131;
            v88 = v87 >> 3;
            v89 = (v87 >> 3) + 1;
            if (v89 >> 61)
              sub_2394189F8();
            v90 = v82 - (_QWORD)v86;
            if (v90 >> 2 > v89)
              v89 = v90 >> 2;
            if ((unint64_t)v90 >= 0x7FFFFFFFFFFFFFF8)
              v91 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v91 = v89;
            if (v91)
            {
              if (v91 >> 61)
                sub_239418A80();
              v92 = operator new(8 * v91);
              v93 = &v92[8 * v88];
              *v93 = _D8;
              v84 = (uint64_t)(v93 + 1);
              if (v83 == v86)
              {
LABEL_150:
                v11 = v85;
                v85[18] = v93;
                v85[19] = v84;
                v85[20] = &v92[8 * v91];
                v71 = v130;
                if (v83)
                  goto LABEL_151;
                goto LABEL_152;
              }
            }
            else
            {
              v92 = 0;
              v93 = (_QWORD *)(8 * v88);
              *(_QWORD *)(8 * v88) = _D8;
              v84 = 8 * v88 + 8;
              if (v83 == v86)
                goto LABEL_150;
            }
            v94 = v83 - 8 - v86;
            if (v94 < 0x58)
              goto LABEL_214;
            if ((unint64_t)(v83 - &v92[v87]) < 0x20)
              goto LABEL_214;
            v95 = (v94 >> 3) + 1;
            v96 = 8 * (v95 & 0x3FFFFFFFFFFFFFFCLL);
            v97 = &v83[-v96];
            v93 = (_QWORD *)((char *)v93 - v96);
            v98 = &v92[8 * v88 - 16];
            v99 = v83 - 16;
            v100 = v95 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v101 = *(_OWORD *)v99;
              *(v98 - 1) = *((_OWORD *)v99 - 1);
              *v98 = v101;
              v98 -= 2;
              v99 -= 32;
              v100 -= 4;
            }
            while (v100);
            v83 = v97;
            if (v95 != (v95 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_214:
              do
              {
                v102 = *((_QWORD *)v83 - 1);
                v83 -= 8;
                *--v93 = v102;
              }
              while (v83 != v86);
            }
            v71 = v130;
            v83 = *v131;
            v11 = v85;
            v85[18] = v93;
            v85[19] = v84;
            v85[20] = &v92[8 * v91];
            if (v83)
LABEL_151:
              operator delete(v83);
LABEL_152:
            v47 = v129;
            goto LABEL_153;
          }
          *(_QWORD *)v83 = _D8;
          v84 = (uint64_t)(v83 + 8);
LABEL_153:
          v11[19] = v84;
LABEL_154:
          v145[0] = (_DWORD *)(v133 + 4 * v70);
          *(_DWORD *)(v71 + 4 * v70++) = *((_DWORD *)sub_2394F126C((uint64_t)&v142, v72, (uint64_t)&unk_239EC6E98, v145)
                                         + 5);
          if (v70 != 3)
            continue;
          break;
        }
        v47 = *(_DWORD **)v47;
        v12 = a6;
        if (v47)
          continue;
        break;
      }
LABEL_69:
      for (i = (_QWORD *)v143; i; i = (_QWORD *)*i)
      {
        v134 = i[2];
        v145[0] = &v134;
        v49 = sub_239558B2C((uint64_t)v139, (unsigned int *)&v134, (uint64_t)&unk_239EC6E98, v145);
        if (*((_BYTE *)v49 + 28))
          _ZF = *((_BYTE *)v11 + 168) == 0;
        else
          _ZF = 1;
        if (_ZF)
          sub_2394875CC();
        *(_QWORD *)&(*v131)[8 * HIDWORD(v134)] = *(uint64_t *)((char *)v49 + 20);
      }
      if (v137[1])
      {
        v51 = *(_QWORD *)(a5 + 8);
        if (v51 >= *(_QWORD *)(a5 + 16))
        {
          v17 = sub_239558E38((void **)a5, (uint64_t)v136);
        }
        else
        {
          sub_239559050(*(_QWORD *)(a5 + 8), (uint64_t)v136);
          v17 = v51 + 40;
          *(_QWORD *)(a5 + 8) = v51 + 40;
        }
        *(_QWORD *)(a5 + 8) = v17;
      }
      if (++v125 == v119)
      {
        v110 = v137[0];
        if (v137[0])
        {
          do
          {
            v111 = (_QWORD *)*v110;
            operator delete(v110);
            v110 = v111;
          }
          while (v111);
        }
        break;
      }
    }
  }
  v112 = v136[0];
  v136[0] = 0;
  if (v112)
    operator delete(v112);
  v113 = __p[0];
  if (__p[0])
  {
    do
    {
      v114 = (_QWORD *)*v113;
      operator delete(v113);
      v113 = v114;
    }
    while (v114);
  }
  v115 = v139[0];
  v139[0] = 0;
  if (v115)
    operator delete(v115);
  v116 = (_QWORD *)v143;
  if ((_QWORD)v143)
  {
    do
    {
      v117 = (_QWORD *)*v116;
      operator delete(v116);
      v116 = v117;
    }
    while (v117);
  }
  v118 = (void *)v142;
  *(_QWORD *)&v142 = 0;
  if (v118)
    operator delete(v118);
}

void sub_23954AA7C(_QWORD *a1, uint64_t a2, _QWORD *a3, char **a4)
{
  char *v7;
  char *v8;
  _QWORD *v9;
  _QWORD *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  unint64_t v18;
  char **v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  void *v23;
  char *v24;
  _QWORD *v25;
  _QWORD *v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int *v31;
  unsigned int *v32;
  unint64_t v33;
  char *v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  void **v38;
  void **v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  void *v46[2];
  void *__p[2];
  int v48;
  void *v49[2];
  __int128 v50;
  __int128 v51;
  char *v52;
  char *v53;
  char *v54;

  v7 = *a4;
  v8 = a4[1];
  while (v8 != v7)
  {
    v9 = (_QWORD *)*((_QWORD *)v8 - 3);
    if (v9)
    {
      do
      {
        v10 = (_QWORD *)*v9;
        operator delete(v9);
        v9 = v10;
      }
      while (v10);
    }
    v12 = (void *)*((_QWORD *)v8 - 5);
    v8 -= 40;
    v11 = v12;
    *(_QWORD *)v8 = 0;
    if (v12)
      operator delete(v11);
  }
  a4[1] = v7;
  v14 = *(_QWORD *)(a2 + 24);
  v13 = *(_QWORD *)(a2 + 32);
  v52 = 0;
  v53 = 0;
  v54 = 0;
  v15 = v13 - v14;
  if (v15)
  {
    v16 = v15 / 12;
    if ((unint64_t)(v15 / 12) >> 62)
      sub_2394189F8();
    v17 = (char *)operator new(4 * v16);
    v52 = v17;
    v53 = v17;
    v54 = &v17[4 * v16];
    bzero(v17, 4 * v16);
    v18 = 0;
    v44 = v16;
    v19 = a4;
    v20 = v16;
    while (((*(_QWORD *)(*a3 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v18) & 1) == 0 || *(_DWORD *)&v17[4 * v18])
    {
LABEL_11:
      if (++v18 == v20)
      {
        operator delete(v17);
        return;
      }
    }
    v50 = 0u;
    v51 = 0u;
    *(_OWORD *)v49 = 0u;
    sub_2394F0374((uint64_t)v49);
    v21 = *((_QWORD *)&v51 + 1);
    *(_DWORD *)(*(_QWORD *)((char *)v49[1] + ((((_QWORD)v51 + *((_QWORD *)&v51 + 1)) >> 7) & 0x1FFFFFFFFFFFFF8))
              + 4 * ((v51 + *((_QWORD *)&v51 + 1)) & 0x3FF)) = v18;
    *((_QWORD *)&v51 + 1) = v21 + 1;
    *(_DWORD *)&v17[4 * v18] = 1;
    *(_OWORD *)v46 = 0u;
    *(_OWORD *)__p = 0u;
    v48 = 1065353216;
    v22 = v19[1];
    if (v22 >= v19[2])
    {
      v24 = sub_239558738(v19, (uint64_t *)v46);
    }
    else
    {
      *(_QWORD *)v22 = 0;
      *((void **)v22 + 1) = v46[1];
      v46[1] = 0;
      *((void **)v22 + 2) = __p[0];
      v23 = __p[1];
      *((void **)v22 + 3) = __p[1];
      *((_DWORD *)v22 + 8) = v48;
      if (v23)
      {
        __p[0] = 0;
        __p[1] = 0;
      }
      v24 = v22 + 40;
    }
    v19[1] = v24;
    v25 = __p[0];
    if (__p[0])
    {
      do
      {
        v26 = (_QWORD *)*v25;
        operator delete(v25);
        v25 = v26;
      }
      while (v26);
    }
    v27 = v46[0];
    v46[0] = 0;
    if (v27)
      operator delete(v27);
    v28 = *((_QWORD *)&v51 + 1);
    if (*((_QWORD *)&v51 + 1))
    {
      v29 = (uint64_t)(a4[1] - 40);
      do
      {
        LODWORD(v46[0]) = 0;
        LODWORD(v46[0]) = *(_DWORD *)(*(_QWORD *)((char *)v49[1] + (((unint64_t)v51 >> 7) & 0x1FFFFFFFFFFFFF8))
                                    + 4 * (v51 & 0x3FF));
        *(_QWORD *)&v51 = v51 + 1;
        *((_QWORD *)&v51 + 1) = v28 - 1;
        if ((unint64_t)v51 >= 0x800)
        {
          operator delete(*(void **)v49[1]);
          v49[1] = (char *)v49[1] + 8;
          *(_QWORD *)&v51 = v51 - 1024;
        }
        sub_239456168(v29, (unsigned int *)v46, v46);
        v30 = *a1 + 24 * LODWORD(v46[0]);
        v32 = *(unsigned int **)v30;
        v31 = *(unsigned int **)(v30 + 8);
        while (v32 != v31)
        {
          v33 = *v32;
          if (!*(_DWORD *)&v17[4 * v33]
            && ((*(_QWORD *)(*a3 + ((v33 >> 3) & 0x1FFFFFF8)) >> v33) & 1) != 0)
          {
            v34 = (char *)v49[1];
            if ((void *)v50 == v49[1])
              v35 = 0;
            else
              v35 = (((_QWORD)v50 - (unint64_t)v49[1]) << 7) - 1;
            v36 = *((_QWORD *)&v51 + 1);
            v37 = *((_QWORD *)&v51 + 1) + v51;
            if (v35 == *((_QWORD *)&v51 + 1) + (_QWORD)v51)
            {
              sub_2394F0374((uint64_t)v49);
              v36 = *((_QWORD *)&v51 + 1);
              v34 = (char *)v49[1];
              v37 = v51 + *((_QWORD *)&v51 + 1);
            }
            *(_DWORD *)(*(_QWORD *)&v34[(v37 >> 7) & 0x1FFFFFFFFFFFFF8] + 4 * (v37 & 0x3FF)) = v33;
            *((_QWORD *)&v51 + 1) = v36 + 1;
            *(_DWORD *)&v17[4 * v33] = 1;
          }
          ++v32;
        }
        v28 = *((_QWORD *)&v51 + 1);
      }
      while (*((_QWORD *)&v51 + 1));
    }
    v38 = (void **)v49[1];
    v39 = (void **)v50;
    *((_QWORD *)&v51 + 1) = 0;
    v40 = v50 - (unint64_t)v49[1];
    if ((unint64_t)v50 - (unint64_t)v49[1] >= 0x11)
    {
      do
      {
        operator delete(*v38);
        v39 = (void **)v50;
        v38 = (void **)((char *)v49[1] + 8);
        v49[1] = v38;
        v40 = v50 - (_QWORD)v38;
      }
      while ((_QWORD)v50 - (_QWORD)v38 > 0x10uLL);
    }
    v41 = v40 >> 3;
    if (v41 == 1)
    {
      v42 = 512;
    }
    else
    {
      if (v41 != 2)
        goto LABEL_46;
      v42 = 1024;
    }
    *(_QWORD *)&v51 = v42;
LABEL_46:
    if (v38 != v39)
    {
      do
      {
        v43 = *v38++;
        operator delete(v43);
      }
      while (v38 != v39);
      if ((void *)v50 != v49[1])
        *(_QWORD *)&v50 = v50 + (((unint64_t)v49[1] - v50 + 7) & 0xFFFFFFFFFFFFFFF8);
    }
    if (v49[0])
      operator delete(v49[0]);
    v20 = v44;
    v19 = a4;
    goto LABEL_11;
  }
}

void sub_23954AE88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  uint64_t v19;
  void *v21;

  v21 = *(void **)(v19 - 112);
  if (v21)
  {
    *(_QWORD *)(v19 - 104) = v21;
    operator delete(v21);
  }
  _Unwind_Resume(exception_object);
}

void sub_23954AED4(uint64_t *a1, unint64_t *a2, uint64_t *a3, uint64_t *a4, _QWORD *a5, uint64_t *a6, uint64_t *a7)
{
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int32x4_t *v16;
  unint64_t v17;
  int32x4_t *v18;
  unint64_t v19;
  int32x4_t v20;
  int32x4_t *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  char *v37;
  char *v38;
  uint64_t **v39;
  uint64_t v40;
  unsigned int *v41;
  unsigned int *v42;
  uint64_t v43;
  unint64_t v44;
  _DWORD *v45;
  unsigned int v46;
  uint64_t v47;
  unint64_t v48;
  unsigned int v49;
  unsigned int *v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  uint64_t **v55;
  unint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  _QWORD *v59;
  uint64_t *v60;
  uint64_t v61;
  _QWORD *v62;
  _QWORD *v63;
  void *v64;
  _QWORD *v65;
  _QWORD *v66;
  void *v67;
  _QWORD *v68;
  _QWORD *v69;
  void *v70;
  _QWORD *v71;
  _QWORD *v72;
  void *v73;
  void *v74;
  _QWORD *v78;
  unsigned int v79;
  unsigned int v80;
  void *v81[2];
  void *__p[2];
  int v83;
  void *v84;
  char *v85;
  char *v86;
  void *v87;
  _QWORD *v88;
  _QWORD v89[3];
  _QWORD *v90;
  _QWORD v91[3];
  _QWORD *v92;
  uint64_t v93;

  v93 = *MEMORY[0x24BDAC8D0];
  v11 = a4 + 1;
  v13 = *a1;
  v12 = a1[1];
  sub_23954B528((char **)&v87, 0xCCCCCCCCCCCCCCCDLL * ((a4[1] - *a4) >> 3));
  v14 = 0xCCCCCCCCCCCCCCCDLL * ((*v11 - *a4) >> 3);
  v85 = 0;
  v86 = 0;
  v84 = 0;
  if (v12 != v13)
  {
    v15 = (v12 - v13) / 24;
    if (v15 >> 62)
      sub_2394189F8();
    v16 = (int32x4_t *)operator new(4 * v15);
    v84 = v16;
    v86 = &v16->i8[4 * v15];
    v17 = (v15 - 1) & 0x3FFFFFFFFFFFFFFFLL;
    v18 = v16;
    if (v17 < 7)
      goto LABEL_83;
    v19 = v17 + 1;
    v18 = (int32x4_t *)((char *)v16 + 4 * (v19 & 0x7FFFFFFFFFFFFFF8));
    v20 = vdupq_n_s32(v14);
    v21 = v16 + 1;
    v22 = v19 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v21[-1] = v20;
      *v21 = v20;
      v21 += 2;
      v22 -= 8;
    }
    while (v22);
    if (v19 != (v19 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_83:
      do
      {
        v18->i32[0] = v14;
        v18 = (int32x4_t *)((char *)v18 + 4);
      }
      while (v18 != (int32x4_t *)((char *)v16 + 4 * v15));
    }
    v85 = &v16->i8[4 * v15];
  }
  v91[0] = &off_250ADDD00;
  v91[1] = a4;
  v91[2] = &v84;
  v92 = v91;
  sub_2397A376C(a2, v14, v91, 0);
  v23 = v92;
  if (v92 == v91)
  {
    v24 = 4;
    v23 = v91;
  }
  else
  {
    if (!v92)
      goto LABEL_14;
    v24 = 5;
  }
  (*(void (**)(void))(*v23 + 8 * v24))();
LABEL_14:
  v26 = *a4;
  v25 = a4[1];
  v90 = 0;
  v27 = operator new(0x28uLL);
  *v27 = &off_250ADDD48;
  v27[1] = a4;
  v27[2] = &v87;
  v27[3] = a1;
  v27[4] = &v84;
  v90 = v27;
  sub_2397A376C(a2, 0xCCCCCCCCCCCCCCCDLL * ((v25 - v26) >> 3), v89, 0);
  v28 = v90;
  if (v90 == v89)
  {
    v29 = 4;
    v28 = v89;
  }
  else
  {
    if (!v90)
      goto LABEL_19;
    v29 = 5;
  }
  (*(void (**)(void))(*v28 + 8 * v29))();
LABEL_19:
  *(_OWORD *)v81 = 0u;
  *(_OWORD *)__p = 0u;
  v83 = 1065353216;
  sub_23941C5D8((uint64_t)a7, a6[1], 0);
  v30 = *a5;
  v31 = a5[1];
  if (v31 != *a5)
  {
    v32 = 0;
    v33 = 0;
    v78 = a5;
    while (1)
    {
      v34 = v30 + 40 * v32;
      if (*(_QWORD *)(v34 + 24) < 4uLL)
        break;
      ++v33;
LABEL_22:
      v32 = v33;
      v30 = *a5;
      if (0xCCCCCCCCCCCCCCCDLL * ((v31 - *a5) >> 3) <= v33)
        goto LABEL_63;
    }
    v79 = v33;
    if (__p[1])
    {
      v35 = __p[0];
      if (__p[0])
      {
        do
        {
          v36 = (_QWORD *)*v35;
          operator delete(v35);
          v35 = v36;
        }
        while (v36);
      }
      __p[0] = 0;
      v37 = (char *)v81[1];
      if (v81[1])
      {
        v38 = 0;
        do
          *((_QWORD *)v81[0] + (_QWORD)v38++) = 0;
        while (v37 != v38);
      }
      __p[1] = 0;
    }
    v39 = *(uint64_t ***)(v34 + 16);
    if (v39)
    {
      do
      {
        v40 = *a1 + 24 * *((unsigned int *)v39 + 4);
        v41 = *(unsigned int **)v40;
        v42 = *(unsigned int **)(v40 + 8);
        while (v41 != v42)
        {
          v43 = *v41;
          v80 = 0;
          v44 = *((unsigned int *)v84 + v43);
          v80 = v44;
          if (0xCCCCCCCCCCCCCCCDLL * ((a4[1] - *a4) >> 3) > v44)
            sub_239456168((uint64_t)v81, &v80, &v80);
          ++v41;
        }
        v39 = (uint64_t **)*v39;
      }
      while (v39);
      if (__p[1])
      {
        v45 = __p[0];
        v46 = *((_DWORD *)__p[0] + 4);
        v47 = *a4;
        v48 = *(_QWORD *)(*a4 + 40 * v46 + 24);
        do
        {
          v49 = v45[4];
          if (*(_QWORD *)(v47 + 40 * v49 + 24) > v48)
          {
            v48 = *(_QWORD *)(v47 + 40 * v49 + 24);
            v46 = v45[4];
          }
          v45 = *(_DWORD **)v45;
        }
        while (v45);
        v50 = *(unsigned int **)(v34 + 16);
        a5 = v78;
        if (v50)
        {
          v51 = v47 + 40 * v46;
          v52 = *a3;
          v53 = *(_DWORD *)(*a3 + 4 * *(unsigned int *)(*(_QWORD *)(v51 + 16) + 16));
          v54 = *a6;
          v55 = *(uint64_t ***)(v34 + 16);
          do
          {
            v56 = *((unsigned int *)v55 + 4);
            *(_QWORD *)(v54 + ((v56 >> 3) & 0x1FFFFFF8)) &= ~(1 << v56);
            *(_DWORD *)(v52 + 4 * v56) = v53;
            v55 = (uint64_t **)*v55;
          }
          while (v55);
          do
          {
            sub_239456168(v51, v50 + 4, v50 + 4);
            v50 = *(unsigned int **)v50;
          }
          while (v50);
        }
        v57 = v78[1];
        if (v34 != v57 - 40)
        {
          *(_DWORD *)(v34 + 32) = *(_DWORD *)(v57 - 8);
          sub_239558A08((_QWORD *)v34, *(uint64_t **)(v57 - 24), 0);
          v57 = v78[1];
        }
        v58 = *(_QWORD **)(v57 - 24);
        if (v58)
        {
          do
          {
            v59 = (_QWORD *)*v58;
            operator delete(v58);
            v58 = v59;
          }
          while (v59);
        }
        goto LABEL_60;
      }
      v60 = *(uint64_t **)(v34 + 16);
      if (v60)
      {
        v61 = *a7;
        do
        {
          *(_QWORD *)(v61 + (((unint64_t)*((unsigned int *)v60 + 4) >> 3) & 0x1FFFFFF8)) |= 1 << *((_DWORD *)v60 + 4);
          v60 = (uint64_t *)*v60;
        }
        while (v60);
      }
    }
    a5 = v78;
    v57 = v78[1];
    if (v34 != v57 - 40)
    {
      *(_DWORD *)(v34 + 32) = *(_DWORD *)(v57 - 8);
      sub_239558A08((_QWORD *)v34, *(uint64_t **)(v57 - 24), 0);
      v57 = v78[1];
    }
    v62 = *(_QWORD **)(v57 - 24);
    if (v62)
    {
      do
      {
        v63 = (_QWORD *)*v62;
        operator delete(v62);
        v62 = v63;
      }
      while (v63);
    }
LABEL_60:
    v31 = v57 - 40;
    v64 = *(void **)(v57 - 40);
    *(_QWORD *)(v57 - 40) = 0;
    if (v64)
      operator delete(v64);
    a5[1] = v31;
    v33 = v79;
    goto LABEL_22;
  }
LABEL_63:
  v65 = __p[0];
  if (__p[0])
  {
    do
    {
      v66 = (_QWORD *)*v65;
      operator delete(v65);
      v65 = v66;
    }
    while (v66);
  }
  v67 = v81[0];
  v81[0] = 0;
  if (v67)
    operator delete(v67);
  if (v84)
  {
    v85 = (char *)v84;
    operator delete(v84);
  }
  v68 = v87;
  if (v87)
  {
    v69 = v88;
    v70 = v87;
    if (v88 != v87)
    {
      do
      {
        v71 = (_QWORD *)*(v69 - 3);
        if (v71)
        {
          do
          {
            v72 = (_QWORD *)*v71;
            operator delete(v71);
            v71 = v72;
          }
          while (v72);
        }
        v74 = (void *)*(v69 - 5);
        v69 -= 5;
        v73 = v74;
        *v69 = 0;
        if (v74)
          operator delete(v73);
      }
      while (v69 != v68);
      v70 = v87;
    }
    v88 = v68;
    operator delete(v70);
  }
}

void sub_23954B488(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  sub_239420950((uint64_t)&a15);
  if (__p)
  {
    a21 = (uint64_t)__p;
    operator delete(__p);
  }
  sub_2395191D0(&a23);
  _Unwind_Resume(a1);
}

char **sub_23954B528(char **a1, unint64_t a2)
{
  char *v4;
  char *v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    if (a2 >= 0x666666666666667)
      sub_2394189F8();
    v4 = (char *)operator new(40 * a2);
    *a1 = v4;
    a1[1] = v4;
    v5 = &v4[40 * a2];
    a1[2] = v5;
    do
    {
      *(_OWORD *)v4 = 0uLL;
      *((_OWORD *)v4 + 1) = 0uLL;
      *((_DWORD *)v4 + 8) = 1065353216;
      v4 += 40;
    }
    while (v4 != v5);
    a1[1] = v5;
  }
  return a1;
}

void sub_23954B5B4(_Unwind_Exception *exception_object)
{
  void **v1;

  if (*v1)
    sub_239EC0588((_QWORD **)v1 + 1, *v1, v1);
  _Unwind_Resume(exception_object);
}

void sub_23954B5D4(uint64_t *a1, _QWORD *a2, uint64_t *a3, _QWORD *a4, double a5, double a6, double a7, double a8, double a9, double a10, double a11, float64x2_t a12)
{
  float64x2_t v12;
  _QWORD *v13;
  _QWORD *v15;
  _QWORD *v16;
  char *v17;
  char *v18;
  uint64_t *v19;
  uint64_t **v20;
  unsigned int *v21;
  int8x8_t v22;
  uint8x8_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void **v28;
  unint64_t v29;
  float v30;
  float v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t **v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t **v37;
  double v38;
  float64x2_t v39;
  double v40;
  float64x2_t v41;
  double v42;
  float64x2_t v43;
  int8x16_t v44;
  unint64_t v45;
  double v46;
  double v47;
  double v48;
  double v49;
  unsigned int *v50;
  float *v51;
  double v52;
  double v53;
  float64x2_t v54;
  float64x2_t v55;
  float64x2_t v56;
  float *v57;
  double v58;
  double v59;
  float64x2_t v60;
  float64x2_t v61;
  float64_t v62;
  float *v63;
  double v64;
  float64x2_t v65;
  float64x2_t v66;
  unint64_t v67;
  float v68;
  float v69;
  unint64_t v70;
  uint64_t **v71;
  uint64_t *v72;
  uint64_t v73;
  _QWORD *v74;
  _QWORD *v75;
  char *v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint8x8_t v82;
  unint64_t v83;
  uint64_t **v84;
  uint64_t *v85;
  unint64_t v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  float *v91;
  double v92;
  double v93;
  double v94;
  float64x2_t v95;
  float64x2_t v96;
  float64x2_t v97;
  float64x2_t v98;
  unint64_t v99;
  float32x2_t *v100;
  float32x2_t *v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  unint64_t v106;
  _BYTE *v107;
  float32x2_t *v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  uint64_t v112;
  float32x2_t *v113;
  _OWORD *v114;
  float32x2_t *v115;
  uint64_t v116;
  __int128 v117;
  float32x2_t v118;
  unint64_t v119;
  _QWORD *v120;
  _QWORD *v121;
  void *v122;
  _QWORD *v123;
  _QWORD *v124;
  void *v125;
  uint64_t v126;
  uint64_t v128;
  uint64_t *v130;
  int v131;
  float64x2_t v132;
  float32x2_t **v133;
  uint64_t v134;
  uint64_t v135;
  unsigned int v136;
  void *v137[2];
  void *__p[2];
  int v139;
  void *v140[2];
  void *v141[2];
  int v142;
  unsigned int *v143;

  *(_OWORD *)v140 = 0u;
  *(_OWORD *)v141 = 0u;
  v142 = 1065353216;
  *(_OWORD *)v137 = 0u;
  *(_OWORD *)__p = 0u;
  v139 = 1065353216;
  v128 = *a1;
  v126 = a1[1];
  if (*a1 == v126)
    goto LABEL_126;
  v13 = a4;
  v133 = (float32x2_t **)(a3 + 18);
  while (2)
  {
    if (__p[1])
    {
      v15 = __p[0];
      if (__p[0])
      {
        do
        {
          v16 = (_QWORD *)*v15;
          operator delete(v15);
          v15 = v16;
        }
        while (v16);
      }
      __p[0] = 0;
      v17 = (char *)v137[1];
      if (v137[1])
      {
        v18 = 0;
        do
          *((_QWORD *)v137[0] + (_QWORD)v18++) = 0;
        while (v17 != v18);
      }
      __p[1] = 0;
    }
    v19 = (uint64_t *)(v128 + 16);
    v20 = (uint64_t **)(v128 + 16);
    while (1)
    {
      v20 = (uint64_t **)*v20;
      if (!v20)
        break;
      v21 = (unsigned int *)(*v13 + 4 * *((unsigned int *)v20 + 4));
      sub_239456168((uint64_t)v137, v21, v21);
    }
    v22 = (int8x8_t)a2[1];
    if (!*(_QWORD *)&v22)
LABEL_135:
      sub_23941D898("unordered_map::at: key not found");
    v23 = (uint8x8_t)vcnt_s8(v22);
    v23.i16[0] = vaddlv_u8(v23);
    v24 = v23.u32[0];
    v25 = *(_QWORD *)&v22 + 0xFFFFFFFFLL;
    v26 = *(_QWORD *)&v22 - 1;
    v27 = *a3;
    v28 = (void **)__p[0];
    LODWORD(v29) = *((_DWORD *)__p[0] + 4);
    v30 = 0.0;
    while (2)
    {
      v32 = *((unsigned int *)v28 + 4);
      if (v24 > 1)
      {
        v33 = *((unsigned int *)v28 + 4);
        if (*(_QWORD *)&v22 <= v32)
          v33 = v32 % *(_QWORD *)&v22;
      }
      else
      {
        v33 = v25 & v32;
      }
      v34 = *(uint64_t ***)(*a2 + 8 * v33);
      if (!v34)
        goto LABEL_135;
      v35 = *v34;
      if (!v35)
        goto LABEL_135;
      if (v24 < 2)
      {
        while (1)
        {
          v36 = v35[1];
          if (v36 == v32)
          {
            if (v35[2] == v32)
              goto LABEL_35;
          }
          else if ((v36 & v26) != v33)
          {
            goto LABEL_135;
          }
          v35 = (uint64_t *)*v35;
          if (!v35)
            goto LABEL_135;
        }
      }
      while (1)
      {
        v67 = v35[1];
        if (v67 == v32)
          break;
        if (v67 >= *(_QWORD *)&v22)
          v67 %= *(_QWORD *)&v22;
        if (v67 != v33)
          goto LABEL_135;
LABEL_40:
        v35 = (uint64_t *)*v35;
        if (!v35)
          goto LABEL_135;
      }
      if (v35[2] != v32)
        goto LABEL_40;
LABEL_35:
      v37 = (uint64_t **)*v19;
      if (*v19)
      {
        v38 = *((double *)v35 + 13);
        v39 = *(float64x2_t *)(v35 + 11);
        v40 = *((double *)v35 + 17);
        v41 = *(float64x2_t *)(v35 + 15);
        v42 = *((double *)v35 + 21);
        v43 = *(float64x2_t *)(v35 + 19);
        *(_QWORD *)&a12.f64[0] = v35[25];
        v44 = *(int8x16_t *)(v35 + 23);
        v45 = vextq_s8(v44, v44, 8uLL).u64[0];
        v46 = *((double *)v35 + 3);
        v47 = *((double *)v35 + 4);
        v31 = 0.0;
        v48 = *((double *)v35 + 5);
        v49 = *((double *)v35 + 6);
        do
        {
          v50 = (unsigned int *)(a3[3] + 12 * *((unsigned int *)v37 + 4));
          v51 = (float *)(v27 + 12 * *v50);
          v12.f64[0] = *v51;
          v52 = v51[1];
          v53 = v51[2];
          v54 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v39, v12.f64[0]), v41, v52), v43, v53);
          v12.f64[0] = v38 * v12.f64[0] + v40 * v52;
          *(_QWORD *)&v55.f64[0] = v44.i64[0];
          *(_QWORD *)&v55.f64[1] = v45;
          v12.f64[0] = v12.f64[0] + v42 * v53;
          v12 = vaddq_f64(a12, v12);
          v56 = vaddq_f64(v55, v54);
          v57 = (float *)(v27 + 12 * v50[1]);
          v54.f64[0] = *v57;
          v58 = v57[1];
          v59 = v57[2];
          v60 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v39, v54.f64[0]), v41, v58), v43, v59);
          v54.f64[0] = v38 * v54.f64[0] + v40 * v58 + v42 * v59;
          v54.f64[0] = vaddq_f64(a12, v54).f64[0];
          v61 = vaddq_f64(v55, v60);
          v62 = v61.f64[0] / v54.f64[0];
          v63 = (float *)(v27 + 12 * v50[2]);
          v61.f64[0] = *v63;
          v64 = v63[1];
          v60.f64[0] = v63[2];
          v65 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v39, v61.f64[0]), v41, v64), v43, v60.f64[0]);
          v61.f64[0] = v38 * v61.f64[0] + v40 * v64 + v42 * v60.f64[0];
          v61.f64[0] = vaddq_f64(a12, v61).f64[0];
          v66 = vaddq_f64(v55, v65);
          v37 = (uint64_t **)*v37;
          v31 = fabs((v48 + v62 * v46 - (v48 + v56.f64[0] / v12.f64[0] * v46))* (v49 + v66.f64[1] / v61.f64[0] * v47 - (v49 + v56.f64[1] / v12.f64[0] * v47))- (v48 + v66.f64[0] / v61.f64[0] * v46 - (v48 + v56.f64[0] / v12.f64[0] * v46))* (v49 + v61.f64[1] / v54.f64[0] * v47 - (v49 + v56.f64[1] / v12.f64[0] * v47)))* 0.5+ v31;
        }
        while (v37);
      }
      else
      {
        v31 = 0.0;
      }
      if (v31 <= v30)
        v29 = v29;
      else
        v29 = v32;
      if (v31 > v30)
        v30 = v31;
      v28 = (void **)*v28;
      if (v28)
        continue;
      break;
    }
    v68 = sqrtf(v30);
    if (v68 <= 250.0)
      v69 = 1.0;
    else
      v69 = 250.0 / v68;
    if (v24 > 1)
    {
      v70 = v29;
      if (*(_QWORD *)&v22 <= v29)
        v70 = v29 % *(_QWORD *)&v22;
    }
    else
    {
      v70 = v25 & v29;
    }
    v131 = v29;
    v71 = *(uint64_t ***)(*a2 + 8 * v70);
    if (!v71 || (v72 = *v71) == 0)
LABEL_138:
      sub_23941D898("unordered_map::at: key not found");
    if (v24 < 2)
    {
      while (1)
      {
        v73 = v72[1];
        if (v73 == v29)
        {
          if (v72[2] == v29)
            goto LABEL_61;
        }
        else if ((v73 & v26) != v70)
        {
          goto LABEL_138;
        }
        v72 = (uint64_t *)*v72;
        if (!v72)
          goto LABEL_138;
      }
    }
    while (2)
    {
      v119 = v72[1];
      if (v119 != v29)
      {
        if (v119 >= *(_QWORD *)&v22)
          v119 %= *(_QWORD *)&v22;
        if (v119 != v70)
          goto LABEL_138;
        goto LABEL_120;
      }
      if (v72[2] != v29)
      {
LABEL_120:
        v72 = (uint64_t *)*v72;
        if (!v72)
          goto LABEL_138;
        continue;
      }
      break;
    }
LABEL_61:
    if (!*((_BYTE *)a3 + 168))
      sub_2394875CC();
    if (v141[1])
    {
      v74 = v141[0];
      if (v141[0])
      {
        do
        {
          v75 = (_QWORD *)*v74;
          operator delete(v74);
          v74 = v75;
        }
        while (v75);
      }
      v141[0] = 0;
      v76 = (char *)v140[1];
      if (v140[1])
      {
        v77 = 0;
        do
          *((_QWORD *)v140[0] + (_QWORD)v77++) = 0;
        while (v76 != v77);
      }
      v141[1] = 0;
      v13 = a4;
    }
    v78 = *v19;
    if (!*v19)
      goto LABEL_3;
    while (2)
    {
      v130 = (uint64_t *)v78;
      v79 = *(unsigned int *)(v78 + 16);
      *(_DWORD *)(*v13 + 4 * v79) = v131;
      if (!*((_BYTE *)a3 + 200))
        sub_2394875CC();
      v80 = 0;
      v134 = a3[22] + 12 * v79;
      v135 = a3[3] + 12 * v79;
      while (2)
      {
        v136 = 0;
        v81 = *(unsigned int *)(v135 + 4 * v80);
        v136 = *(_DWORD *)(v135 + 4 * v80);
        if (v140[1])
        {
          v82 = (uint8x8_t)vcnt_s8((int8x8_t)v140[1]);
          v82.i16[0] = vaddlv_u8(v82);
          if (v82.u32[0] > 1uLL)
          {
            v83 = v81;
            if (v140[1] <= (void *)v81)
              v83 = v81 % (unint64_t)v140[1];
          }
          else
          {
            v83 = (LODWORD(v140[1]) - 1) & v81;
          }
          v84 = (uint64_t **)*((_QWORD *)v140[0] + v83);
          if (v84)
          {
            v85 = *v84;
            if (v85)
            {
              if (v82.u32[0] < 2uLL)
              {
                while (1)
                {
                  v87 = v85[1];
                  if (v87 == v81)
                  {
                    if (*((_DWORD *)v85 + 4) == (_DWORD)v81)
                      goto LABEL_118;
                  }
                  else if ((v87 & ((unint64_t)v140[1] - 1)) != v83)
                  {
                    goto LABEL_96;
                  }
                  v85 = (uint64_t *)*v85;
                  if (!v85)
                    goto LABEL_96;
                }
              }
              do
              {
                v86 = v85[1];
                if (v86 == v81)
                {
                  if (*((_DWORD *)v85 + 4) == (_DWORD)v81)
                  {
LABEL_118:
                    LODWORD(v90) = *((_DWORD *)v85 + 5);
                    goto LABEL_75;
                  }
                }
                else
                {
                  if ((void *)v86 >= v140[1])
                    v86 %= (unint64_t)v140[1];
                  if (v86 != v83)
                    break;
                }
                v85 = (uint64_t *)*v85;
              }
              while (v85);
            }
          }
        }
LABEL_96:
        v89 = a3[18];
        v88 = a3[19];
        v143 = &v136;
        v90 = (unint64_t)(v88 - v89) >> 3;
        *((_DWORD *)sub_2394F126C((uint64_t)v140, &v136, (uint64_t)&unk_239EC6E98, &v143) + 5) = v90;
        v91 = (float *)(*a3 + 12 * v136);
        v92 = *v91;
        v93 = v91[1];
        v94 = v91[2];
        v95 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(*(float64x2_t *)(v72 + 11), v92), *(float64x2_t *)(v72 + 15), v93), *(float64x2_t *)(v72 + 19), v94);
        v96.f64[0] = *((double *)v72 + 13) * v92 + *((double *)v72 + 17) * v93 + *((double *)v72 + 21) * v94;
        *(_QWORD *)&v97.f64[0] = v72[25];
        v98 = vmulq_n_f64(vmlaq_f64(*(float64x2_t *)(v72 + 5), *(float64x2_t *)(v72 + 3), vdivq_f64(vaddq_f64(*(float64x2_t *)(v72 + 23), v95), (float64x2_t)vdupq_lane_s64(*(_OWORD *)&vaddq_f64(v97, v96), 0))), v69);
        v100 = (float32x2_t *)a3[19];
        v99 = a3[20];
        if ((unint64_t)v100 < v99)
        {
          *v100 = vcvt_f32_f64(v98);
          a3[19] = (uint64_t)&v100[1];
          goto LABEL_75;
        }
        v101 = *v133;
        v102 = (char *)v100 - (char *)*v133;
        v103 = v102 >> 3;
        v104 = (v102 >> 3) + 1;
        if (v104 >> 61)
          sub_2394189F8();
        v105 = v99 - (_QWORD)v101;
        if (v105 >> 2 > v104)
          v104 = v105 >> 2;
        if ((unint64_t)v105 >= 0x7FFFFFFFFFFFFFF8)
          v106 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v106 = v104;
        if (v106)
        {
          if (v106 >> 61)
            sub_239418A80();
          v132 = v98;
          v107 = operator new(8 * v106);
          v108 = (float32x2_t *)&v107[8 * v103];
          *v108 = vcvt_f32_f64(v132);
          v109 = (uint64_t)&v108[1];
          if (v100 == v101)
            goto LABEL_115;
LABEL_108:
          v110 = (char *)&v100[-1] - (char *)v101;
          if (v110 < 0x58)
            goto LABEL_143;
          if ((unint64_t)((char *)v100 - &v107[v102]) < 0x20)
            goto LABEL_143;
          v111 = (v110 >> 3) + 1;
          v112 = 8 * (v111 & 0x3FFFFFFFFFFFFFFCLL);
          v113 = &v100[v112 / 0xFFFFFFFFFFFFFFF8];
          v108 = (float32x2_t *)((char *)v108 - v112);
          v114 = &v107[8 * v103 - 16];
          v115 = v100 - 2;
          v116 = v111 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v117 = *(_OWORD *)v115->f32;
            *(v114 - 1) = *(_OWORD *)v115[-2].f32;
            *v114 = v117;
            v114 -= 2;
            v115 -= 4;
            v116 -= 4;
          }
          while (v116);
          v100 = v113;
          if (v111 != (v111 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_143:
            do
            {
              v118 = v100[-1];
              --v100;
              v108[-1] = v118;
              --v108;
            }
            while (v100 != v101);
          }
          v100 = *v133;
        }
        else
        {
          v107 = 0;
          v108 = (float32x2_t *)(8 * v103);
          *(float32x2_t *)(8 * v103) = vcvt_f32_f64(v98);
          v109 = 8 * v103 + 8;
          if (v100 != v101)
            goto LABEL_108;
        }
LABEL_115:
        a3[18] = (uint64_t)v108;
        a3[19] = v109;
        a3[20] = (uint64_t)&v107[8 * v106];
        if (v100)
          operator delete(v100);
        a3[19] = v109;
LABEL_75:
        *(_DWORD *)(v134 + 4 * v80++) = v90;
        if (v80 != 3)
          continue;
        break;
      }
      v13 = a4;
      v78 = *v130;
      if (*v130)
        continue;
      break;
    }
LABEL_3:
    v128 += 40;
    if (v128 != v126)
      continue;
    break;
  }
LABEL_126:
  v120 = __p[0];
  if (__p[0])
  {
    do
    {
      v121 = (_QWORD *)*v120;
      operator delete(v120);
      v120 = v121;
    }
    while (v121);
  }
  v122 = v137[0];
  v137[0] = 0;
  if (v122)
    operator delete(v122);
  v123 = v141[0];
  if (v141[0])
  {
    do
    {
      v124 = (_QWORD *)*v123;
      operator delete(v123);
      v123 = v124;
    }
    while (v124);
  }
  v125 = v140[0];
  v140[0] = 0;
  if (v125)
    operator delete(v125);
}

void sub_23954BE94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,_QWORD *__p,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,_QWORD *a33)
{
  _QWORD *v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;

  v34 = __p;
  if (__p)
  {
    do
    {
      v35 = (_QWORD *)*v34;
      operator delete(v34);
      v34 = v35;
    }
    while (v35);
  }
  if (a25)
    operator delete(a25);
  v36 = a33;
  if (a33)
  {
    do
    {
      v37 = (_QWORD *)*v36;
      operator delete(v36);
      v36 = v37;
    }
    while (v37);
  }
  if (a31)
    operator delete(a31);
  _Unwind_Resume(exception_object);
}

void sub_23954BF0C(uint64_t *a1, uint64_t a2)
{
  char *v4;
  char *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  int v9;
  uint64_t **v10;
  unsigned int *v11;
  uint64_t v12;
  int v13;
  char *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t **v17;
  uint64_t v18;
  _DWORD *v19;
  int v20;
  char *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t **v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  char *v37;
  char *v38;
  unint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  _DWORD *v44;
  uint64_t v45;
  _DWORD *v46;
  int v47;
  unint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  _DWORD *v53;
  char *v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t **v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  char *v62;
  char *v63;
  unint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  _DWORD *v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  __int128 v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  char *v79;
  uint64_t v80;
  __int128 v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  char *v85;
  uint64_t v86;
  __int128 v87;
  uint64_t v88;
  char **v89;
  int v90;
  uint64_t v91;
  void *__p;

  if (!*(_BYTE *)(a2 + 168))
    sub_2394875CC();
  v4 = *(char **)(a2 + 144);
  v89 = (char **)(a2 + 144);
  v5 = *(char **)(a2 + 152);
  __p = 0;
  v6 = v5 - v4;
  if (v5 == v4)
  {
    v7 = 0;
    v8 = *a1;
    v88 = a1[1];
    if (*a1 != v88)
      goto LABEL_5;
  }
  else
  {
    if (v6 < 0)
      sub_2394189F8();
    v7 = operator new((unint64_t)v6 >> 1);
    __p = v7;
    memset(v7, 255, 4 * (v6 >> 3));
    v8 = *a1;
    v88 = a1[1];
    if (*a1 != v88)
    {
LABEL_5:
      v9 = 0;
      while (1)
      {
        v10 = *(uint64_t ***)(v8 + 16);
        v91 = v8;
        v90 = v9;
        if (v10)
          break;
LABEL_6:
        ++v9;
        v8 += 40;
        if (v8 == v88)
        {
          v7 = __p;
          if (!__p)
            return;
LABEL_154:
          operator delete(v7);
          return;
        }
      }
      while (1)
      {
        if (!*(_BYTE *)(a2 + 200))
          sub_2394875CC();
        v11 = (unsigned int *)(*(_QWORD *)(a2 + 176) + 12 * *((unsigned int *)v10 + 4));
        v12 = *v11;
        v13 = *((_DWORD *)__p + v12);
        if (v13 == -1)
        {
          *((_DWORD *)__p + v12) = v9;
        }
        else if (v13 != v9)
        {
          if (!*(_BYTE *)(a2 + 168))
            goto LABEL_156;
          v14 = *(char **)(a2 + 144);
          v15 = *(_QWORD *)(a2 + 160);
          if ((unint64_t)v5 < v15)
          {
            *(_QWORD *)v5 = *(_QWORD *)&v14[8 * v12];
            v16 = (uint64_t)(v5 + 8);
            *(_QWORD *)(a2 + 152) = v5 + 8;
            v17 = *(uint64_t ***)(v8 + 16);
            if (v17)
              goto LABEL_53;
LABEL_63:
            v5 = (char *)v16;
            v18 = v11[1];
            v19 = __p;
            v20 = *((_DWORD *)__p + v18);
            if (v20 == -1)
              goto LABEL_64;
LABEL_20:
            if (v20 == v9)
              goto LABEL_65;
            if (!*(_BYTE *)(a2 + 168))
              goto LABEL_156;
            v21 = *(char **)(a2 + 144);
            v22 = *(_QWORD *)(a2 + 160);
            if ((unint64_t)v5 < v22)
            {
              *(_QWORD *)v5 = *(_QWORD *)&v21[8 * v18];
              v23 = (uint64_t)(v5 + 8);
              *(_QWORD *)(a2 + 152) = v5 + 8;
              v24 = *(uint64_t ***)(v8 + 16);
              if (v24)
                goto LABEL_75;
LABEL_85:
              v5 = (char *)v23;
              v45 = v11[2];
              v46 = __p;
              v47 = *((_DWORD *)__p + v45);
              if (v47 == -1)
                goto LABEL_9;
LABEL_86:
              if (v47 == v9)
                goto LABEL_10;
              if (!*(_BYTE *)(a2 + 168))
LABEL_156:
                sub_2394875CC();
              v54 = *(char **)(a2 + 144);
              v55 = *(_QWORD *)(a2 + 160);
              if ((unint64_t)v5 < v55)
              {
                *(_QWORD *)v5 = *(_QWORD *)&v54[8 * v45];
                v56 = (uint64_t)(v5 + 8);
                *(_QWORD *)(a2 + 152) = v5 + 8;
                v57 = *(uint64_t ***)(v8 + 16);
                if (v57)
                  goto LABEL_109;
                goto LABEL_119;
              }
              v58 = (v5 - v54) >> 3;
              v59 = v58 + 1;
              if ((unint64_t)(v58 + 1) >> 61)
LABEL_158:
                sub_2394189F8();
              v60 = v55 - (_QWORD)v54;
              if (v60 >> 2 > v59)
                v59 = v60 >> 2;
              if ((unint64_t)v60 >= 0x7FFFFFFFFFFFFFF8)
                v61 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v61 = v59;
              if (v61)
              {
                if (v61 >> 61)
LABEL_159:
                  sub_239418A80();
                v62 = (char *)operator new(8 * v61);
                v63 = &v62[8 * v58];
                *(_QWORD *)v63 = *(_QWORD *)&v54[8 * v45];
                v56 = (uint64_t)(v63 + 8);
                if (v5 != v54)
                {
LABEL_100:
                  v64 = v5 - 8 - v54;
                  if (v64 < 0x168)
                  {
                    v65 = v5;
                    goto LABEL_102;
                  }
                  if (&v62[v5 - v54 - 8 - (v64 & 0xFFFFFFFFFFFFFFF8)] > &v62[v5 - v54 - 8])
                  {
                    v65 = v5;
                    goto LABEL_102;
                  }
                  if (&v5[-(v64 & 0xFFFFFFFFFFFFFFF8) - 8] > v5 - 8)
                  {
                    v65 = v5;
                    goto LABEL_102;
                  }
                  if ((unint64_t)(v54 - v62) < 0x20)
                  {
                    v65 = v5;
                    goto LABEL_102;
                  }
                  v82 = (v64 >> 3) + 1;
                  v83 = 8 * (v82 & 0x3FFFFFFFFFFFFFFCLL);
                  v65 = &v5[-v83];
                  v63 -= v83;
                  v84 = &v62[8 * v58 - 16];
                  v85 = v5 - 16;
                  v86 = v82 & 0x3FFFFFFFFFFFFFFCLL;
                  do
                  {
                    v87 = *(_OWORD *)v85;
                    *((_OWORD *)v84 - 1) = *((_OWORD *)v85 - 1);
                    *(_OWORD *)v84 = v87;
                    v84 -= 32;
                    v85 -= 32;
                    v86 -= 4;
                  }
                  while (v86);
                  if (v82 != (v82 & 0x3FFFFFFFFFFFFFFCLL))
                  {
                    do
                    {
LABEL_102:
                      v66 = *((_QWORD *)v65 - 1);
                      v65 -= 8;
                      *((_QWORD *)v63 - 1) = v66;
                      v63 -= 8;
                    }
                    while (v65 != v54);
                  }
                  v5 = *v89;
                  *(_QWORD *)(a2 + 144) = v63;
                  *(_QWORD *)(a2 + 152) = v56;
                  *(_QWORD *)(a2 + 160) = &v62[8 * v61];
                  if (!v5)
                  {
LABEL_108:
                    v8 = v91;
                    v9 = v90;
                    *(_QWORD *)(a2 + 152) = v56;
                    v57 = *(uint64_t ***)(v91 + 16);
                    if (!v57)
                    {
LABEL_119:
                      v5 = (char *)v56;
                      goto LABEL_10;
                    }
LABEL_109:
                    if (*(_BYTE *)(a2 + 200))
                    {
                      v67 = *(_QWORD *)(a2 + 176);
                      v68 = ((unint64_t)(v56 - *(_QWORD *)(a2 + 144)) >> 3) - 1;
                      while (1)
                      {
                        v69 = (_DWORD *)(v67 + 12 * *((unsigned int *)v57 + 4));
                        if (*v69 == (_DWORD)v45)
                        {
                          *v69 = v68;
                          if (v69[1] != (_DWORD)v45)
                            goto LABEL_114;
                        }
                        else if (v69[1] != (_DWORD)v45)
                        {
LABEL_114:
                          if (v69[2] == (_DWORD)v45)
                            goto LABEL_118;
                          goto LABEL_111;
                        }
                        v69[1] = v68;
                        if (v69[2] == (_DWORD)v45)
LABEL_118:
                          v69[2] = v68;
LABEL_111:
                        v57 = (uint64_t **)*v57;
                        if (!v57)
                          goto LABEL_119;
                      }
                    }
LABEL_157:
                    sub_2394875CC();
                  }
LABEL_107:
                  operator delete(v5);
                  goto LABEL_108;
                }
              }
              else
              {
                v62 = 0;
                v63 = (char *)(8 * v58);
                *(_QWORD *)(8 * v58) = *(_QWORD *)&v54[8 * v45];
                v56 = 8 * v58 + 8;
                if (v5 != v54)
                  goto LABEL_100;
              }
              *(_QWORD *)(a2 + 144) = v63;
              *(_QWORD *)(a2 + 152) = v56;
              *(_QWORD *)(a2 + 160) = &v62[8 * v61];
              if (!v5)
                goto LABEL_108;
              goto LABEL_107;
            }
            v32 = (v5 - v21) >> 3;
            v33 = v32 + 1;
            if ((unint64_t)(v32 + 1) >> 61)
              goto LABEL_158;
            v34 = v22 - (_QWORD)v21;
            if (v34 >> 2 > v33)
              v33 = v34 >> 2;
            if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF8)
              v35 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v35 = v33;
            if (v35)
            {
              if (v35 >> 61)
                goto LABEL_159;
              v36 = v35;
              v37 = (char *)operator new(8 * v35);
              v35 = v36;
              v38 = &v37[8 * v32];
              *(_QWORD *)v38 = *(_QWORD *)&v21[8 * v18];
              v23 = (uint64_t)(v38 + 8);
              if (v5 == v21)
              {
LABEL_72:
                *(_QWORD *)(a2 + 144) = v38;
                *(_QWORD *)(a2 + 152) = v23;
                *(_QWORD *)(a2 + 160) = &v37[8 * v35];
                if (v5)
                  operator delete(v5);
                v8 = v91;
                v9 = v90;
                *(_QWORD *)(a2 + 152) = v23;
                v24 = *(uint64_t ***)(v91 + 16);
                if (!v24)
                  goto LABEL_85;
LABEL_75:
                if (!*(_BYTE *)(a2 + 200))
                  goto LABEL_157;
                v51 = *(_QWORD *)(a2 + 176);
                v52 = ((unint64_t)(v23 - *(_QWORD *)(a2 + 144)) >> 3) - 1;
                while (2)
                {
                  v53 = (_DWORD *)(v51 + 12 * *((unsigned int *)v24 + 4));
                  if (*v53 == (_DWORD)v18)
                  {
                    *v53 = v52;
                    if (v53[1] != (_DWORD)v18)
                      goto LABEL_80;
LABEL_83:
                    v53[1] = v52;
                    if (v53[2] == (_DWORD)v18)
                      goto LABEL_84;
                  }
                  else
                  {
                    if (v53[1] == (_DWORD)v18)
                      goto LABEL_83;
LABEL_80:
                    if (v53[2] == (_DWORD)v18)
LABEL_84:
                      v53[2] = v52;
                  }
                  v24 = (uint64_t **)*v24;
                  if (!v24)
                    goto LABEL_85;
                  continue;
                }
              }
            }
            else
            {
              v37 = 0;
              v38 = (char *)(8 * v32);
              *(_QWORD *)(8 * v32) = *(_QWORD *)&v21[8 * v18];
              v23 = 8 * v32 + 8;
              if (v5 == v21)
                goto LABEL_72;
            }
            v48 = v5 - 8 - v21;
            if (v48 < 0x168)
            {
              v49 = v5;
              goto LABEL_70;
            }
            if (&v37[v5 - v21 - 8 - (v48 & 0xFFFFFFFFFFFFFFF8)] > &v37[v5 - v21 - 8])
            {
              v49 = v5;
              goto LABEL_70;
            }
            if (&v5[-(v48 & 0xFFFFFFFFFFFFFFF8) - 8] > v5 - 8)
            {
              v49 = v5;
              goto LABEL_70;
            }
            if ((unint64_t)(v21 - v37) < 0x20)
            {
              v49 = v5;
              goto LABEL_70;
            }
            v76 = (v48 >> 3) + 1;
            v77 = 8 * (v76 & 0x3FFFFFFFFFFFFFFCLL);
            v49 = &v5[-v77];
            v38 -= v77;
            v78 = &v37[8 * v32 - 16];
            v79 = v5 - 16;
            v80 = v76 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v81 = *(_OWORD *)v79;
              *((_OWORD *)v78 - 1) = *((_OWORD *)v79 - 1);
              *(_OWORD *)v78 = v81;
              v78 -= 32;
              v79 -= 32;
              v80 -= 4;
            }
            while (v80);
            if (v76 != (v76 & 0x3FFFFFFFFFFFFFFCLL))
            {
              do
              {
LABEL_70:
                v50 = *((_QWORD *)v49 - 1);
                v49 -= 8;
                *((_QWORD *)v38 - 1) = v50;
                v38 -= 8;
              }
              while (v49 != v21);
            }
            v5 = *v89;
            goto LABEL_72;
          }
          v25 = (v5 - v14) >> 3;
          v26 = v25 + 1;
          if ((unint64_t)(v25 + 1) >> 61)
            goto LABEL_158;
          v27 = v15 - (_QWORD)v14;
          if (v27 >> 2 > v26)
            v26 = v27 >> 2;
          if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFF8)
            v28 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v28 = v26;
          if (v28)
          {
            if (v28 >> 61)
              goto LABEL_159;
            v29 = v28;
            v30 = (char *)operator new(8 * v28);
            v28 = v29;
            v31 = &v30[8 * v25];
            *(_QWORD *)v31 = *(_QWORD *)&v14[8 * v12];
            v16 = (uint64_t)(v31 + 8);
            if (v5 == v14)
            {
LABEL_50:
              *(_QWORD *)(a2 + 144) = v31;
              *(_QWORD *)(a2 + 152) = v16;
              *(_QWORD *)(a2 + 160) = &v30[8 * v28];
              if (v5)
                operator delete(v5);
              v8 = v91;
              v9 = v90;
              *(_QWORD *)(a2 + 152) = v16;
              v17 = *(uint64_t ***)(v91 + 16);
              if (!v17)
                goto LABEL_63;
LABEL_53:
              if (!*(_BYTE *)(a2 + 200))
                goto LABEL_157;
              v42 = *(_QWORD *)(a2 + 176);
              v43 = ((unint64_t)(v16 - *(_QWORD *)(a2 + 144)) >> 3) - 1;
              while (2)
              {
                v44 = (_DWORD *)(v42 + 12 * *((unsigned int *)v17 + 4));
                if (*v44 == (_DWORD)v12)
                {
                  *v44 = v43;
                  if (v44[1] != (_DWORD)v12)
                    goto LABEL_58;
LABEL_61:
                  v44[1] = v43;
                  if (v44[2] == (_DWORD)v12)
                    goto LABEL_62;
                }
                else
                {
                  if (v44[1] == (_DWORD)v12)
                    goto LABEL_61;
LABEL_58:
                  if (v44[2] == (_DWORD)v12)
LABEL_62:
                    v44[2] = v43;
                }
                v17 = (uint64_t **)*v17;
                if (!v17)
                  goto LABEL_63;
                continue;
              }
            }
          }
          else
          {
            v30 = 0;
            v31 = (char *)(8 * v25);
            *(_QWORD *)(8 * v25) = *(_QWORD *)&v14[8 * v12];
            v16 = 8 * v25 + 8;
            if (v5 == v14)
              goto LABEL_50;
          }
          v39 = v5 - 8 - v14;
          if (v39 < 0x168)
          {
            v40 = v5;
            goto LABEL_48;
          }
          if (&v30[v5 - v14 - 8 - (v39 & 0xFFFFFFFFFFFFFFF8)] > &v30[v5 - v14 - 8])
          {
            v40 = v5;
            goto LABEL_48;
          }
          if (&v5[-(v39 & 0xFFFFFFFFFFFFFFF8) - 8] > v5 - 8)
          {
            v40 = v5;
            goto LABEL_48;
          }
          if ((unint64_t)(v14 - v30) < 0x20)
          {
            v40 = v5;
            goto LABEL_48;
          }
          v70 = (v39 >> 3) + 1;
          v71 = 8 * (v70 & 0x3FFFFFFFFFFFFFFCLL);
          v40 = &v5[-v71];
          v31 -= v71;
          v72 = &v30[8 * v25 - 16];
          v73 = v5 - 16;
          v74 = v70 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v75 = *(_OWORD *)v73;
            *((_OWORD *)v72 - 1) = *((_OWORD *)v73 - 1);
            *(_OWORD *)v72 = v75;
            v72 -= 32;
            v73 -= 32;
            v74 -= 4;
          }
          while (v74);
          if (v70 != (v70 & 0x3FFFFFFFFFFFFFFCLL))
          {
            do
            {
LABEL_48:
              v41 = *((_QWORD *)v40 - 1);
              v40 -= 8;
              *((_QWORD *)v31 - 1) = v41;
              v31 -= 8;
            }
            while (v40 != v14);
          }
          v5 = *v89;
          goto LABEL_50;
        }
        v18 = v11[1];
        v19 = __p;
        v20 = *((_DWORD *)__p + v18);
        if (v20 != -1)
          goto LABEL_20;
LABEL_64:
        v19[v18] = v9;
LABEL_65:
        v45 = v11[2];
        v46 = __p;
        v47 = *((_DWORD *)__p + v45);
        if (v47 != -1)
          goto LABEL_86;
LABEL_9:
        v46[v45] = v9;
LABEL_10:
        v10 = (uint64_t **)*v10;
        if (!v10)
          goto LABEL_6;
      }
    }
  }
  if (v7)
    goto LABEL_154;
}

void sub_23954C7C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_23954C7F8(uint64_t *a1, _QWORD *a2)
{
  char *v3;
  char *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  void **v8;
  int v9;
  uint64_t v10;
  float v11;
  float32x2_t v12;
  float v13;
  float v14;
  __float2 v15;
  float32x4_t v16;
  float v17;
  void **v18;
  float32x4_t v19;
  int16x4_t v20;
  float32x2_t v21;
  void **v22;
  float32x2_t v23;
  float32x4_t v24;
  void **v25;
  float32x4_t v26;
  int16x4_t v27;
  float v28;
  float v29;
  __float2 v30;
  float32x2_t v31;
  void **v32;
  void *v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char *v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  char *v42;
  float *v43;
  float *v44;
  float *v45;
  uint64_t v46;
  unsigned int v47;
  float v48;
  uint64_t v49;
  uint64_t **v50;
  float v51;
  float v52;
  BOOL v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int32x4_t v60;
  uint64_t v61;
  int32x4_t v62;
  float32x4_t v63;
  unsigned int *v64;
  uint64_t v65;
  float v66;
  float *v67;
  float *v68;
  int64_t v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  float *v74;
  char *v75;
  uint64_t v76;
  unint64_t v77;
  _BYTE *v78;
  uint64_t v79;
  float *v80;
  uint64_t v81;
  unint64_t v82;
  float *v83;
  int v84;
  uint64_t v85;
  uint64_t v86;
  float32x4_t *v87;
  float32x4_t *v88;
  uint64_t v89;
  float *v90;
  uint64_t v91;
  uint64_t v92;
  float *v93;
  float v94;
  uint64_t v95;
  float *v96;
  float v97;
  float v98;
  uint64_t v99;
  float *v100;
  char v101;
  uint64_t v102;
  uint64_t v103;
  float v104;
  float32x2_t v105;
  uint64_t **v106;
  uint64_t v107;
  float32x2_t v108;
  float v109;
  float32x2_t v110;
  unsigned int *v111;
  float32x2_t v112;
  float32x2_t v113;
  float32x2_t v114;
  float32x2_t v115;
  float32x2_t v116;
  float32x2_t v117;
  float32x2_t v118;
  float32x2_t v119;
  float32x2_t v120;
  float32x2_t v121;
  float v122;
  float v123;
  unint64_t v124;
  double v125;
  float v126;
  BOOL v127;
  uint64_t *v128;
  float v129;
  unsigned int v130;
  unsigned int *v131;
  void **v132;
  uint64_t **j;
  unsigned int *v134;
  void **v135;
  _QWORD *v136;
  _QWORD *v137;
  void *v138;
  void **v139;
  unint64_t v140;
  uint64_t v141;
  int8x8_t v142;
  unsigned int *v143;
  unint64_t v144;
  uint8x8_t v145;
  unint64_t v146;
  uint64_t **v147;
  uint64_t *v148;
  unint64_t v149;
  unint64_t v150;
  unint64_t v151;
  uint8x8_t v152;
  unint64_t v153;
  uint64_t **v154;
  uint64_t *v155;
  unint64_t v156;
  uint64_t v157;
  unint64_t v158;
  _DWORD *v159;
  unsigned int v160;
  uint8x8_t v161;
  unint64_t v162;
  uint64_t **v163;
  uint64_t *v164;
  uint64_t v165;
  unint64_t v166;
  uint64_t v167;
  int8x8_t v168;
  uint64_t v169;
  uint64_t v170;
  unint64_t v171;
  uint8x8_t v172;
  unint64_t v173;
  uint64_t **v174;
  uint64_t *v175;
  uint64_t v176;
  unint64_t v177;
  unint64_t v178;
  uint8x8_t v179;
  unint64_t v180;
  uint64_t **v181;
  uint64_t *v182;
  unint64_t v183;
  unint64_t v184;
  uint64_t v185;
  char *v186;
  char *v187;
  unint64_t v188;
  _QWORD *v189;
  uint64_t v190;
  unint64_t v191;
  uint64_t v192;
  unint64_t v193;
  _BYTE *v194;
  _QWORD *v195;
  char *v196;
  unint64_t v197;
  uint64_t v198;
  uint64_t v199;
  char *v200;
  _OWORD *v201;
  char *v202;
  uint64_t v203;
  __int128 v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t *v207;
  float v208;
  unsigned int v209;
  unsigned int *v210;
  void **v211;
  uint64_t **i;
  unsigned int *v213;
  void **v214;
  _QWORD *v215;
  _QWORD *v216;
  void *v217;
  void **v218;
  unint64_t v219;
  uint64_t v220;
  int8x8_t v221;
  unsigned int *v222;
  unint64_t v223;
  uint8x8_t v224;
  unint64_t v225;
  uint64_t **v226;
  uint64_t *v227;
  unint64_t v228;
  unint64_t v229;
  unint64_t v230;
  uint8x8_t v231;
  unint64_t v232;
  uint64_t **v233;
  uint64_t *v234;
  unint64_t v235;
  uint64_t v236;
  unint64_t v237;
  _DWORD *v238;
  unsigned int v239;
  uint8x8_t v240;
  unint64_t v241;
  uint64_t **v242;
  uint64_t *v243;
  uint64_t v244;
  unint64_t v245;
  uint64_t v246;
  int8x8_t v247;
  uint64_t v248;
  uint64_t v249;
  unint64_t v250;
  uint8x8_t v251;
  unint64_t v252;
  uint64_t **v253;
  uint64_t *v254;
  uint64_t v255;
  unint64_t v256;
  unint64_t v257;
  uint8x8_t v258;
  unint64_t v259;
  uint64_t **v260;
  uint64_t *v261;
  unint64_t v262;
  unint64_t v263;
  uint64_t v264;
  char *v265;
  char *v266;
  unint64_t v267;
  _QWORD *v268;
  uint64_t v269;
  unint64_t v270;
  uint64_t v271;
  unint64_t v272;
  _BYTE *v273;
  _QWORD *v274;
  char *v275;
  unint64_t v276;
  uint64_t v277;
  uint64_t v278;
  char *v279;
  _OWORD *v280;
  char *v281;
  uint64_t v282;
  __int128 v283;
  uint64_t v284;
  uint64_t v285;
  _QWORD *v286;
  _QWORD *v287;
  void *v288;
  _QWORD *v289;
  _QWORD *v290;
  _QWORD *v291;
  _QWORD *v292;
  void *v293;
  _QWORD *v294;
  _QWORD *v295;
  _QWORD *v297;
  _QWORD *v298;
  void *v299;
  _QWORD *v300;
  _QWORD *v301;
  void *v302;
  _QWORD *v303;
  _QWORD *v304;
  _QWORD *v305;
  _QWORD *v306;
  void *v307;
  _QWORD *v308;
  _QWORD *v309;
  void *v310;
  _QWORD *v311;
  _QWORD *v312;
  void *v313;
  double v315;
  uint64_t v317;
  char *v318;
  int64_t v319;
  unint64_t v320;
  unsigned int v321;
  uint64_t v322;
  unsigned int v323;
  void *v324[2];
  void *__p[2];
  int v326;
  void *v327[2];
  void *v328[2];
  int v329;
  void *v330[2];
  void *v331[2];
  int v332;
  char *v333;
  char *v334;
  char *v335;
  __int128 v336;
  __int128 v337;
  int v338;
  _DWORD *v339[3];

  v3 = (char *)*a2;
  v318 = (char *)a2[1];
  if ((char *)*a2 == v318)
  {
    v34 = a2;
    v333 = 0;
    v334 = 0;
    v335 = 0;
    goto LABEL_89;
  }
  do
  {
    v337 = 0u;
    v336 = 0u;
    v4 = v3 + 16;
    v338 = 1065353216;
    while (1)
    {
      v4 = *(char **)v4;
      if (!v4)
        break;
      if (!*((_BYTE *)a1 + 200))
        sub_2394875CC();
      v5 = (unsigned int *)(a1[22] + 12 * *((unsigned int *)v4 + 4));
      sub_239456168((uint64_t)&v336, v5, v5);
      sub_239456168((uint64_t)&v336, v5 + 1, v5 + 1);
      sub_239456168((uint64_t)&v336, v5 + 2, v5 + 2);
    }
    v6 = 0;
    v7 = dword_2569309D0;
    v8 = (void **)v337;
    v9 = *((unsigned __int8 *)a1 + 168);
    v10 = a1[18];
    v11 = 3.4028e38;
    do
    {
      v14 = (float)v6 * 0.1309;
      v15 = __sincosf_stret(v14);
      v16 = (float32x4_t)xmmword_239EC7120;
      if (v8)
      {
        v17 = 0.0 - v14;
        if (v14 >= 0.0)
          v17 = (float)v6 * 0.1309;
        if (!v9)
          sub_2394875CC();
        if (v14 == 0.0)
        {
          v18 = v8;
          v16 = (float32x4_t)xmmword_239EC7120;
          do
          {
            v19.i64[0] = *(_QWORD *)(v10 + 8 * *((unsigned int *)v18 + 4));
            v19.i64[1] = v19.i64[0];
            v20.i32[0] = vmovn_s32(vcgtq_f32(v19, v16)).u32[0];
            v20.i32[1] = vmovn_s32(vcgtq_f32(v16, v19)).i32[1];
            v16 = (float32x4_t)vbslq_s8((int8x16_t)vmovl_s16(v20), (int8x16_t)v19, (int8x16_t)v16);
            v18 = (void **)*v18;
          }
          while (v18);
        }
        else if (v17 <= 0.000001)
        {
          v25 = v8;
          v16 = (float32x4_t)xmmword_239EC7120;
          do
          {
            v26.i64[0] = *(_QWORD *)(v10 + 8 * *((unsigned int *)v25 + 4));
            v26.i64[1] = v26.i64[0];
            v27.i32[0] = vmovn_s32(vcgtq_f32(v26, v16)).u32[0];
            v27.i32[1] = vmovn_s32(vcgtq_f32(v16, v26)).i32[1];
            v16 = (float32x4_t)vbslq_s8((int8x16_t)vmovl_s16(v27), (int8x16_t)v26, (int8x16_t)v16);
            v25 = (void **)*v25;
          }
          while (v25);
        }
        else
        {
          v21.f32[0] = -v15.__sinval;
          v21.i32[1] = LODWORD(v15.__cosval);
          v22 = v8;
          v16 = (float32x4_t)xmmword_239EC7120;
          do
          {
            v23 = *(float32x2_t *)(v10 + 8 * *((unsigned int *)v22 + 4));
            *(float32x2_t *)v24.f32 = vmla_lane_f32(vmul_n_f32((float32x2_t)__PAIR64__(LODWORD(v15.__sinval), LODWORD(v15.__cosval)), v23.f32[0]), v21, v23, 1);
            v24.i64[1] = v24.i64[0];
            v23.i32[0] = vmovn_s32(vcgtq_f32(v24, v16)).u32[0];
            v23.i32[1] = vmovn_s32(vcgtq_f32(v16, v24)).i32[1];
            v16 = (float32x4_t)vbslq_s8((int8x16_t)vmovl_s16((int16x4_t)v23), (int8x16_t)v24, (int8x16_t)v16);
            v22 = (void **)*v22;
          }
          while (v22);
        }
      }
      v12 = vsub_f32(*(float32x2_t *)v16.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v16, (int8x16_t)v16, 8uLL));
      v13 = vmul_f32((float32x2_t)vrev64_s32((int32x2_t)v12), v12).f32[0];
      if (v13 < v11)
      {
        v7 = v6;
        v11 = v13;
      }
      ++v6;
    }
    while (v6 != 12);
    v28 = (float)v7 * 0.1309;
    if (v28 != 0.0)
    {
      v29 = 0.0 - v28;
      if (v28 >= 0.0)
        v29 = (float)v7 * 0.1309;
      if (v29 > 0.000001)
      {
        v30 = __sincosf_stret(v28);
        if (!v8)
          goto LABEL_38;
        v31.f32[0] = -v30.__sinval;
        v31.i32[1] = LODWORD(v30.__cosval);
        do
        {
          if (!*((_BYTE *)a1 + 168))
            sub_2394875CC();
          *(float32x2_t *)(a1[18] + 8 * *((unsigned int *)v8 + 4)) = vmla_lane_f32(vmul_n_f32((float32x2_t)__PAIR64__(LODWORD(v30.__sinval), LODWORD(v30.__cosval)), COERCE_FLOAT(*(_QWORD *)(a1[18]+ 8 * *((unsigned int *)v8 + 4)))), v31, *(float32x2_t *)(a1[18]+ 8* *((unsigned int *)v8 + 4)), 1);
          v8 = (void **)*v8;
        }
        while (v8);
        v8 = (void **)v337;
      }
    }
    if (v8)
    {
      do
      {
        v32 = (void **)*v8;
        operator delete(v8);
        v8 = v32;
      }
      while (v32);
    }
LABEL_38:
    v33 = (void *)v336;
    *(_QWORD *)&v336 = 0;
    if (v33)
      operator delete(v33);
    v3 += 40;
  }
  while (v3 != v318);
  v34 = a2;
  v36 = *a2;
  v35 = a2[1];
  v333 = 0;
  v334 = 0;
  v335 = 0;
  if (v35 == v36)
  {
LABEL_89:
    v98 = 0.0;
    v48 = 0.0;
    goto LABEL_97;
  }
  v37 = (v35 - v36) / 40;
  if (v37 >> 62)
    sub_2394189F8();
  v333 = (char *)operator new(4 * v37);
  v38 = &v333[4 * v37];
  v335 = v38;
  bzero(v333, 4 * v37);
  v42 = v333;
  v43 = 0;
  v44 = 0;
  v45 = 0;
  v46 = 0;
  v47 = 0;
  v334 = v38;
  v336 = 0uLL;
  v48 = 0.0;
  *(_QWORD *)&v337 = 0;
  v34 = a2;
  v49 = v36;
  while (2)
  {
    v50 = *(uint64_t ***)(v49 + 40 * v46 + 16);
    v51 = 0.0;
    v52 = 0.0;
    if (v50)
    {
      if (*((_BYTE *)a1 + 200))
        v53 = *((_BYTE *)a1 + 168) == 0;
      else
        v53 = 1;
      if (v53)
        sub_2394875CC();
      v54 = *a1;
      v55 = a1[3];
      v56 = a1[18];
      do
      {
        v57 = 12 * *((unsigned int *)v50 + 4);
        v58 = v54 + 12 * *(unsigned int *)(v55 + v57 + 4);
        v39.i64[0] = *(_QWORD *)v58;
        v59 = v54 + 12 * *(unsigned int *)(v55 + v57);
        v39.i32[2] = *(_DWORD *)(v58 + 8);
        v40.i64[0] = *(_QWORD *)v59;
        v40.i32[2] = *(_DWORD *)(v59 + 8);
        v60 = (int32x4_t)vsubq_f32(v39, v40);
        v61 = v54 + 12 * *(unsigned int *)(v55 + v57 + 8);
        v41.i64[0] = *(_QWORD *)v61;
        v41.i32[2] = *(_DWORD *)(v61 + 8);
        v62 = (int32x4_t)vsubq_f32(v41, v40);
        v63 = vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v60, (int8x16_t)v60, 0xCuLL), (int8x16_t)v60, 8uLL), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v62, v62), (int8x16_t)v62, 0xCuLL));
        v40 = (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v62, (int8x16_t)v62, 0xCuLL), (int8x16_t)v62, 8uLL);
        v41 = vmlsq_f32(v63, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v60, v60), (int8x16_t)v60, 0xCuLL), v40);
        v64 = (unsigned int *)(a1[22] + v57);
        *(float32x2_t *)v40.f32 = vmla_lane_f32(vmul_f32(*(float32x2_t *)v41.f32, *(float32x2_t *)v41.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v41.f32, 1), *(float32x2_t *)v41.f32, 1);
        v39 = (float32x4_t)vextq_s8((int8x16_t)v41, (int8x16_t)v41, 8uLL);
        v65 = v56 + 8 * *v64;
        v41.i32[0] = *(_DWORD *)v65;
        v66 = *(float *)(v65 + 4);
        v67 = (float *)(v56 + 8 * v64[1]);
        v68 = (float *)(v56 + 8 * v64[2]);
        v51 = v51
            + (float)(fabsf((float)((float)(*v67 - v41.f32[0]) * (float)(v68[1] - v66))- (float)((float)(*v68 - v41.f32[0]) * (float)(v67[1] - v66)))* 0.5);
        v50 = (uint64_t **)*v50;
        v52 = v52
            + (float)(sqrtf(vmla_f32(*(float32x2_t *)v40.f32, *(float32x2_t *)v39.f32, *(float32x2_t *)v39.f32).f32[0])
                    * 0.5);
      }
      while (v50);
    }
    if (v45 < v44)
    {
      *v45++ = v51;
    }
    else
    {
      v69 = (char *)v45 - (char *)v43;
      v70 = v45 - v43;
      v71 = v70 + 1;
      if ((unint64_t)(v70 + 1) >> 62)
        sub_2394189F8();
      v321 = v47;
      if (((char *)v44 - (char *)v43) >> 1 > v71)
        v71 = ((char *)v44 - (char *)v43) >> 1;
      if ((unint64_t)((char *)v44 - (char *)v43) >= 0x7FFFFFFFFFFFFFFCLL)
        v72 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v72 = v71;
      if (v72)
      {
        v319 = (char *)v45 - (char *)v43;
        if (v72 >> 62)
          sub_239418A80();
        v73 = v46;
        v74 = v45;
        v75 = v42;
        v76 = v49;
        v77 = v72;
        v78 = operator new(4 * v72);
        v79 = v35;
        v49 = v76;
        v42 = v75;
        v72 = v77;
        v45 = v74;
        v46 = v73;
        v69 = v319;
        v80 = (float *)&v78[4 * v70];
        *v80 = v51;
        v81 = (uint64_t)(v80 + 1);
        if (v45 == v43)
          goto LABEL_67;
      }
      else
      {
        v79 = v35;
        v78 = 0;
        v80 = (float *)(4 * v70);
        *(float *)(4 * v70) = v51;
        v81 = 4 * v70 + 4;
        if (v45 == v43)
          goto LABEL_67;
      }
      v82 = (char *)(v45 - 1) - (char *)v43;
      if (v82 >= 0xBC)
      {
        if (&v78[v69 - 4 - (v82 & 0xFFFFFFFFFFFFFFFCLL)] > &v78[v69 - 4])
        {
          v83 = v45;
        }
        else if ((float *)((char *)v45 - (v82 & 0xFFFFFFFFFFFFFFFCLL) - 4) > v45 - 1)
        {
          v83 = v45;
        }
        else if ((unint64_t)((char *)v45 - &v78[v69]) >= 0x20)
        {
          v85 = (v82 >> 2) + 1;
          v86 = 4 * (v85 & 0x7FFFFFFFFFFFFFF8);
          v83 = &v45[v86 / 0xFFFFFFFFFFFFFFFCLL];
          v80 = (float *)((char *)v80 - v86);
          v87 = (float32x4_t *)&v78[4 * v70 - 16];
          v88 = (float32x4_t *)(v45 - 4);
          v89 = v85 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v40 = v88[-1];
            v39 = *v88;
            v87[-1] = v40;
            *v87 = v39;
            v87 -= 2;
            v88 -= 2;
            v89 -= 8;
          }
          while (v89);
          if (v85 == (v85 & 0x7FFFFFFFFFFFFFF8))
            goto LABEL_67;
        }
        else
        {
          v83 = v45;
        }
      }
      else
      {
        v83 = v45;
      }
      do
      {
        v84 = *((_DWORD *)v83-- - 1);
        *((_DWORD *)v80-- - 1) = v84;
      }
      while (v83 != v43);
LABEL_67:
      v44 = (float *)&v78[4 * v72];
      *(_QWORD *)&v336 = v80;
      *((_QWORD *)&v336 + 1) = v81;
      *(_QWORD *)&v337 = v44;
      if (v43)
      {
        operator delete(v43);
        v42 = v333;
        v43 = v80;
        v45 = (float *)v81;
        v34 = a2;
        v49 = *a2;
        v35 = a2[1];
      }
      else
      {
        v43 = v80;
        v45 = (float *)v81;
        v34 = a2;
        v35 = v79;
      }
      v47 = v321;
    }
    *((_QWORD *)&v336 + 1) = v45;
    v48 = v48 + v52;
    *(float *)&v42[4 * v46] = v52 + *(float *)&v42[4 * v46];
    v46 = ++v47;
    if (0xCCCCCCCCCCCCCCCDLL * ((v35 - v49) >> 3) > v47)
      continue;
    break;
  }
  v90 = (float *)v336;
  v91 = (uint64_t)v45 - v336;
  if (v45 == (float *)v336)
  {
    v98 = 0.0;
    if ((_QWORD)v336)
      goto LABEL_96;
  }
  else
  {
    v92 = v91 << 29;
    if ((v91 & 4) != 0)
    {
      v99 = (v92 - 0x80000000) >> 32;
      v100 = (float *)(v336 + 4 * v99);
      if (v100 != v45)
        sub_2394F1C6C((float *)v336, (float *)(v336 + 4 * v99), v45);
      v97 = *v100;
    }
    else
    {
      v93 = (float *)(v336 + 4 * (int)(v91 >> 3));
      if (v93 != v45)
        sub_2394F1C6C((float *)v336, (float *)(v336 + 4 * (int)(v91 >> 3)), v45);
      v94 = *v93;
      v95 = (v92 - 0x100000000) >> 32;
      v96 = &v90[v95];
      if (v96 != v45)
        sub_2394F1C6C(v90, &v90[v95], v45);
      v97 = (float)(v94 + *v96) * 0.5;
    }
    v98 = sqrtf(v97);
    v34 = a2;
LABEL_96:
    operator delete(v90);
  }
LABEL_97:
  v101 = 0;
  v102 = v34[1] - *v34;
  if (v102)
  {
    v103 = 0;
    v320 = 0xCCCCCCCCCCCCCCCDLL * (v102 >> 3);
    if (v48 >= 0.0)
      v104 = v48;
    else
      v104 = 0.0 - v48;
    v315 = v98 * 40.0;
    v105 = (float32x2_t)vdup_n_s32(0x7F7FFFFFu);
    do
    {
      v322 = *v34 + 40 * v103;
      v106 = *(uint64_t ***)(v322 + 16);
      if (v106)
      {
        if (!*((_BYTE *)a1 + 200))
          sub_2394875CC();
        if (!*((_BYTE *)a1 + 168))
          sub_2394875CC();
        v107 = a1[18];
        v108 = (float32x2_t)0x80000000800000;
        v109 = 0.0;
        v110 = v105;
        do
        {
          v111 = (unsigned int *)(a1[22] + 12 * *((unsigned int *)v106 + 4));
          v112 = *(float32x2_t *)(v107 + 8 * *v111);
          v113 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v110, v112), (int8x8_t)v112, (int8x8_t)v110);
          v114 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v112, v108), (int8x8_t)v112, (int8x8_t)v108);
          v115 = *(float32x2_t *)(v107 + 8 * v111[1]);
          v116 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v113, v115), (int8x8_t)v115, (int8x8_t)v113);
          v117 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v115, v114), (int8x8_t)v115, (int8x8_t)v114);
          v118 = *(float32x2_t *)(v107 + 8 * v111[2]);
          v110 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v116, v118), (int8x8_t)v118, (int8x8_t)v116);
          v108 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v118, v117), (int8x8_t)v118, (int8x8_t)v117);
          v119 = vsub_f32(v115, v112);
          v120 = vsub_f32(v118, v112);
          v109 = v109
               + (float)(fabsf(vmlas_n_f32(vmuls_lane_f32(-v120.f32[0], v119, 1), v120.f32[1], v119.f32[0])) * 0.5);
          v106 = (uint64_t **)*v106;
        }
        while (v106);
        v121 = vsub_f32(v108, v110);
        v122 = vmuls_lane_f32(v121.f32[0], v121, 1);
        if (v109 > v122)
          goto LABEL_103;
      }
      else
      {
        v109 = 0.0;
        v110 = v105;
        v121 = vsub_f32((float32x2_t)0x80000000800000, v105);
        v122 = vmuls_lane_f32(v121.f32[0], v121, 1);
        if (v122 < 0.0)
          goto LABEL_103;
      }
      if (v122 == 0.0)
        goto LABEL_103;
      v123 = 0.0 - v122;
      if (v122 >= 0.0)
        v123 = v122;
      if (v123 <= 0.000001 || v48 == 0.0 || v104 <= 0.000001)
        goto LABEL_103;
      v124 = *(_QWORD *)(v322 + 24);
      v125 = (float)(*(float *)&v333[4 * v103] / v48);
      if (v124 < 0x65 || v125 <= 0.35)
      {
        if (v124 < 0x65 || ((v126 = v109 / v122, v125 > 0.2) ? (v127 = v126 < 0.5) : (v127 = 0), !v127))
        {
          if (v124 < 0x65)
            goto LABEL_103;
          if (v121.f32[1] * 3.0 >= v121.f32[0])
          {
            if (v124 < 0x259)
              goto LABEL_103;
            if (v315 >= v121.f32[1] && v315 >= v121.f32[0])
              goto LABEL_103;
          }
        }
      }
      v317 = v103;
      if (v121.f32[0] <= v121.f32[1])
      {
        v337 = 0uLL;
        v336 = 0uLL;
        v338 = 1065353216;
        *(_OWORD *)v330 = 0uLL;
        *(_OWORD *)v331 = 0uLL;
        v332 = 1065353216;
        v207 = *(uint64_t **)(v322 + 16);
        if (!v207)
          goto LABEL_464;
        v208 = v121.f32[1] * 0.5 + v110.f32[1];
        do
        {
          v209 = *((_DWORD *)v207 + 4);
          LODWORD(v327[0]) = v209;
          if (!*((_BYTE *)a1 + 200))
            sub_2394875CC();
          if (!*((_BYTE *)a1 + 168))
            sub_2394875CC();
          v210 = (unsigned int *)(a1[22] + 12 * v209);
          if ((float)((float)((float)(COERCE_FLOAT(HIDWORD(*(_QWORD *)(a1[18] + 8 * *v210)))
                                     + COERCE_FLOAT(HIDWORD(*(_QWORD *)(a1[18] + 8 * v210[1]))))
                             + *(float *)(a1[18] + 8 * v210[2] + 4))
                     / 3.0) >= v208)
            v211 = v330;
          else
            v211 = (void **)&v336;
          sub_239456168((uint64_t)v211, (unsigned int *)v327, v327);
          v207 = (uint64_t *)*v207;
        }
        while (v207);
        if (!*((_QWORD *)&v337 + 1) || !v331[1])
        {
LABEL_464:
          v291 = v331[0];
          if (v331[0])
          {
            do
            {
              v292 = (_QWORD *)*v291;
              operator delete(v291);
              v291 = v292;
            }
            while (v292);
          }
          v293 = v330[0];
          v330[0] = 0;
          if (v293)
            operator delete(v293);
          v294 = (_QWORD *)v337;
          if ((_QWORD)v337)
          {
            do
            {
              v295 = (_QWORD *)*v294;
              operator delete(v294);
              v294 = v295;
            }
            while (v295);
          }
          goto LABEL_503;
        }
        *(_OWORD *)v327 = 0u;
        *(_OWORD *)v328 = 0u;
        v329 = 1065353216;
        *(_OWORD *)v324 = 0u;
        *(_OWORD *)__p = 0u;
        v326 = 1065353216;
        for (i = (uint64_t **)v337; i; i = (uint64_t **)*i)
        {
          if (!*((_BYTE *)a1 + 200))
            sub_2394875CC();
          v213 = (unsigned int *)(a1[22] + 12 * *((unsigned int *)i + 4));
          sub_239456168((uint64_t)v324, v213, v213);
          sub_239456168((uint64_t)v324, v213 + 1, v213 + 1);
          sub_239456168((uint64_t)v324, v213 + 2, v213 + 2);
        }
        if (!*((_BYTE *)a1 + 168))
          sub_2394875CC();
        v214 = (void **)v331[0];
        if (v331[0])
        {
          do
          {
            if (!*((_BYTE *)a1 + 200))
              sub_2394875CC();
            v247 = (int8x8_t)v324[1];
            if (v324[1])
            {
              v248 = 0;
              v249 = a1[22] + 12 * *((unsigned int *)v214 + 4);
LABEL_390:
              v250 = *(unsigned int *)(v249 + 4 * v248);
              v251 = (uint8x8_t)vcnt_s8(v247);
              v251.i16[0] = vaddlv_u8(v251);
              if (v251.u32[0] > 1uLL)
              {
                v252 = *(unsigned int *)(v249 + 4 * v248);
                if (*(_QWORD *)&v247 <= v250)
                  v252 = v250 % *(_QWORD *)&v247;
              }
              else
              {
                v252 = (v247.i32[0] - 1) & v250;
              }
              v253 = (uint64_t **)*((_QWORD *)v324[0] + v252);
              if (v253)
              {
                v254 = *v253;
                if (v254)
                {
                  if (v251.u32[0] < 2uLL)
                  {
                    v255 = *(_QWORD *)&v247 - 1;
                    while (1)
                    {
                      v257 = v254[1];
                      if (v257 == v250)
                      {
                        if (*((_DWORD *)v254 + 4) == (_DWORD)v250)
                          goto LABEL_410;
                      }
                      else if ((v257 & v255) != v252)
                      {
                        goto LABEL_455;
                      }
                      v254 = (uint64_t *)*v254;
                      if (!v254)
                        goto LABEL_455;
                    }
                  }
                  do
                  {
                    v256 = v254[1];
                    if (v256 == v250)
                    {
                      if (*((_DWORD *)v254 + 4) == (_DWORD)v250)
                      {
LABEL_410:
                        if (v327[1])
                        {
                          v258 = (uint8x8_t)vcnt_s8((int8x8_t)v327[1]);
                          v258.i16[0] = vaddlv_u8(v258);
                          if (v258.u32[0] > 1uLL)
                          {
                            v259 = *(unsigned int *)(v249 + 4 * v248);
                            if (v327[1] <= (void *)v250)
                              v259 = v250 % (unint64_t)v327[1];
                          }
                          else
                          {
                            v259 = (LODWORD(v327[1]) - 1) & v250;
                          }
                          v260 = (uint64_t **)*((_QWORD *)v327[0] + v259);
                          if (v260)
                          {
                            v261 = *v260;
                            if (v261)
                            {
                              if (v258.u32[0] < 2uLL)
                              {
                                while (1)
                                {
                                  v263 = v261[1];
                                  if (v263 == v250)
                                  {
                                    if (*((_DWORD *)v261 + 4) == (_DWORD)v250)
                                      goto LABEL_455;
                                  }
                                  else if ((v263 & ((unint64_t)v327[1] - 1)) != v259)
                                  {
                                    goto LABEL_430;
                                  }
                                  v261 = (uint64_t *)*v261;
                                  if (!v261)
                                    goto LABEL_430;
                                }
                              }
                              do
                              {
                                v262 = v261[1];
                                if (v262 == v250)
                                {
                                  if (*((_DWORD *)v261 + 4) == (_DWORD)v250)
                                    goto LABEL_455;
                                }
                                else
                                {
                                  if ((void *)v262 >= v327[1])
                                    v262 %= (unint64_t)v327[1];
                                  if (v262 != v259)
                                    break;
                                }
                                v261 = (uint64_t *)*v261;
                              }
                              while (v261);
                            }
                          }
                        }
LABEL_430:
                        v323 = 0;
                        v264 = *(unsigned int *)(v249 + 4 * v248);
                        v323 = *(_DWORD *)(v249 + 4 * v248);
                        if (!*((_BYTE *)a1 + 168))
                          sub_2394875CC();
                        v265 = (char *)a1[18];
                        v266 = (char *)a1[19];
                        v267 = a1[20];
                        if ((unint64_t)v266 < v267)
                        {
                          *(_QWORD *)v266 = *(_QWORD *)&v265[8 * v264];
                          v268 = v266 + 8;
LABEL_454:
                          a1[19] = (uint64_t)v268;
                          v285 = a1[18];
                          v339[0] = &v323;
                          *((_DWORD *)sub_2394F126C((uint64_t)v327, &v323, (uint64_t)&unk_239EC6E98, v339) + 5) = (((unint64_t)v268 - v285) >> 3) - 1;
                          break;
                        }
                        v269 = (v266 - v265) >> 3;
                        v270 = v269 + 1;
                        if ((unint64_t)(v269 + 1) >> 61)
                          sub_2394189F8();
                        v271 = v267 - (_QWORD)v265;
                        if (v271 >> 2 > v270)
                          v270 = v271 >> 2;
                        if ((unint64_t)v271 >= 0x7FFFFFFFFFFFFFF8)
                          v272 = 0x1FFFFFFFFFFFFFFFLL;
                        else
                          v272 = v270;
                        if (v272)
                        {
                          if (v272 >> 61)
                            sub_239418A80();
                          v273 = operator new(8 * v272);
                        }
                        else
                        {
                          v273 = 0;
                        }
                        v274 = &v273[8 * v269];
                        v275 = &v273[8 * v272];
                        *v274 = *(_QWORD *)&v265[8 * v264];
                        v268 = v274 + 1;
                        if (v266 == v265)
                        {
                          a1[18] = (uint64_t)v274;
                          a1[19] = (uint64_t)v268;
                          a1[20] = (uint64_t)v275;
                          v103 = v317;
                        }
                        else
                        {
                          v276 = v266 - 8 - v265;
                          if (v276 < 0x58)
                          {
                            v103 = v317;
                            goto LABEL_451;
                          }
                          v103 = v317;
                          if ((unint64_t)(v265 - v273) < 0x20)
                            goto LABEL_537;
                          v277 = (v276 >> 3) + 1;
                          v278 = 8 * (v277 & 0x3FFFFFFFFFFFFFFCLL);
                          v279 = &v266[-v278];
                          v274 = (_QWORD *)((char *)v274 - v278);
                          v280 = &v273[8 * v269 - 16];
                          v281 = v266 - 16;
                          v282 = v277 & 0x3FFFFFFFFFFFFFFCLL;
                          do
                          {
                            v283 = *(_OWORD *)v281;
                            *(v280 - 1) = *((_OWORD *)v281 - 1);
                            *v280 = v283;
                            v280 -= 2;
                            v281 -= 32;
                            v282 -= 4;
                          }
                          while (v282);
                          v266 = v279;
                          if (v277 != (v277 & 0x3FFFFFFFFFFFFFFCLL))
                          {
LABEL_537:
                            do
                            {
LABEL_451:
                              v284 = *((_QWORD *)v266 - 1);
                              v266 -= 8;
                              *--v274 = v284;
                            }
                            while (v266 != v265);
                          }
                          v265 = (char *)a1[18];
                          a1[18] = (uint64_t)v274;
                          a1[19] = (uint64_t)v268;
                          a1[20] = (uint64_t)v275;
                          if (!v265)
                            goto LABEL_454;
                        }
                        operator delete(v265);
                        goto LABEL_454;
                      }
                    }
                    else
                    {
                      if (v256 >= *(_QWORD *)&v247)
                        v256 %= *(_QWORD *)&v247;
                      if (v256 != v252)
                        break;
                    }
                    v254 = (uint64_t *)*v254;
                  }
                  while (v254);
                }
              }
LABEL_455:
              while (++v248 != 3)
              {
                v247 = (int8x8_t)v324[1];
                if (v324[1])
                  goto LABEL_390;
              }
            }
            v214 = (void **)*v214;
          }
          while (v214);
        }
        v215 = __p[0];
        if (__p[0])
        {
          do
          {
            v216 = (_QWORD *)*v215;
            operator delete(v215);
            v215 = v216;
          }
          while (v216);
        }
        v217 = v324[0];
        v324[0] = 0;
        v34 = a2;
        if (v217)
          operator delete(v217);
        v218 = (void **)v331[0];
        if (!v331[0])
          goto LABEL_312;
LABEL_317:
        if (!*((_BYTE *)a1 + 200))
          sub_2394875CC();
        v221 = (int8x8_t)v327[1];
        if (!v327[1])
          goto LABEL_316;
        v222 = (unsigned int *)(a1[22] + 12 * *((unsigned int *)v218 + 4));
        v223 = *v222;
        v224 = (uint8x8_t)vcnt_s8((int8x8_t)v327[1]);
        v224.i16[0] = vaddlv_u8(v224);
        if (v224.u32[0] > 1uLL)
        {
          v225 = *v222;
          if (v327[1] <= (void *)v223)
            v225 = v223 % (unint64_t)v327[1];
        }
        else
        {
          v225 = (LODWORD(v327[1]) - 1) & v223;
        }
        v226 = (uint64_t **)*((_QWORD *)v327[0] + v225);
        if (!v226)
          goto LABEL_341;
        v227 = *v226;
        if (!v227)
          goto LABEL_341;
        if (v224.u32[0] < 2uLL)
        {
          while (1)
          {
            v229 = v227[1];
            if (v229 == v223)
            {
              if (*((_DWORD *)v227 + 4) == (_DWORD)v223)
                goto LABEL_339;
            }
            else if ((v229 & ((unint64_t)v327[1] - 1)) != v225)
            {
              goto LABEL_340;
            }
            v227 = (uint64_t *)*v227;
            if (!v227)
              goto LABEL_340;
          }
        }
        while (1)
        {
          v228 = v227[1];
          if (v228 == v223)
          {
            if (*((_DWORD *)v227 + 4) == (_DWORD)v223)
            {
LABEL_339:
              v324[0] = (void *)(a1[22] + 12 * *((unsigned int *)v218 + 4));
              *v222 = *((_DWORD *)sub_2394F126C((uint64_t)v327, v222, (uint64_t)&unk_239EC6E98, (_DWORD **)v324) + 5);
              v221 = (int8x8_t)v327[1];
LABEL_340:
              if (!*(_QWORD *)&v221)
                goto LABEL_316;
LABEL_341:
              v230 = v222[1];
              v231 = (uint8x8_t)vcnt_s8(v221);
              v231.i16[0] = vaddlv_u8(v231);
              if (v231.u32[0] >= 2uLL)
              {
                v232 = v222[1];
                if (*(_QWORD *)&v221 <= v230)
                  v232 = v230 % *(_QWORD *)&v221;
              }
              else
              {
                v232 = (v221.i32[0] - 1) & v230;
              }
              v233 = (uint64_t **)*((_QWORD *)v327[0] + v232);
              if (!v233)
                goto LABEL_364;
              v234 = *v233;
              if (!v234)
                goto LABEL_364;
              if (v231.u32[0] < 2uLL)
              {
                while (1)
                {
                  v236 = v234[1];
                  if (v236 == v230)
                  {
                    if (*((_DWORD *)v234 + 4) == (_DWORD)v230)
                      goto LABEL_362;
                  }
                  else if ((v236 & (*(_QWORD *)&v221 - 1)) != v232)
                  {
                    goto LABEL_363;
                  }
                  v234 = (uint64_t *)*v234;
                  if (!v234)
                    goto LABEL_363;
                }
              }
              while (1)
              {
                v235 = v234[1];
                if (v235 == v230)
                {
                  if (*((_DWORD *)v234 + 4) == (_DWORD)v230)
                  {
LABEL_362:
                    v324[0] = v222 + 1;
                    v222[1] = *((_DWORD *)sub_2394F126C((uint64_t)v327, v222 + 1, (uint64_t)&unk_239EC6E98, (_DWORD **)v324)+ 5);
                    v221 = (int8x8_t)v327[1];
LABEL_363:
                    if (!*(_QWORD *)&v221)
                      goto LABEL_316;
LABEL_364:
                    v239 = v222[2];
                    v238 = v222 + 2;
                    v237 = v239;
                    v240 = (uint8x8_t)vcnt_s8(v221);
                    v240.i16[0] = vaddlv_u8(v240);
                    if (v240.u32[0] >= 2uLL)
                    {
                      v241 = v237;
                      if (*(_QWORD *)&v221 <= v237)
                        v241 = v237 % *(_QWORD *)&v221;
                    }
                    else
                    {
                      v241 = (v221.i32[0] - 1) & v237;
                    }
                    v242 = (uint64_t **)*((_QWORD *)v327[0] + v241);
                    if (v242)
                    {
                      v243 = *v242;
                      if (v243)
                      {
                        if (v240.u32[0] < 2uLL)
                        {
                          v244 = *(_QWORD *)&v221 - 1;
                          while (1)
                          {
                            v246 = v243[1];
                            if (v246 == v237)
                            {
                              if (*((_DWORD *)v243 + 4) == (_DWORD)v237)
                                goto LABEL_384;
                            }
                            else if ((v246 & v244) != v241)
                            {
                              goto LABEL_316;
                            }
                            v243 = (uint64_t *)*v243;
                            if (!v243)
                              goto LABEL_316;
                          }
                        }
                        do
                        {
                          v245 = v243[1];
                          if (v245 == v237)
                          {
                            if (*((_DWORD *)v243 + 4) == (_DWORD)v237)
                            {
LABEL_384:
                              v324[0] = v238;
                              *v238 = *((_DWORD *)sub_2394F126C((uint64_t)v327, v238, (uint64_t)&unk_239EC6E98, (_DWORD **)v324)+ 5);
                              break;
                            }
                          }
                          else
                          {
                            if (v245 >= *(_QWORD *)&v221)
                              v245 %= *(_QWORD *)&v221;
                            if (v245 != v241)
                              break;
                          }
                          v243 = (uint64_t *)*v243;
                        }
                        while (v243);
                      }
                    }
LABEL_316:
                    v218 = (void **)*v218;
                    if (v218)
                      goto LABEL_317;
LABEL_312:
                    if ((__int128 *)v322 != &v336)
                    {
                      *(_DWORD *)(v322 + 32) = v338;
                      sub_239558A08((_QWORD *)v322, (uint64_t *)v337, 0);
                    }
                    v219 = a2[1];
                    if (v219 >= a2[2])
                    {
                      v220 = sub_2395593AC((void **)a2, (uint64_t)v330);
                    }
                    else
                    {
                      sub_239559050(a2[1], (uint64_t)v330);
                      v220 = v219 + 40;
                      a2[1] = v219 + 40;
                    }
                    a2[1] = v220;
                    v305 = v328[0];
                    if (v328[0])
                    {
                      do
                      {
                        v306 = (_QWORD *)*v305;
                        operator delete(v305);
                        v305 = v306;
                      }
                      while (v306);
                    }
                    v307 = v327[0];
                    v327[0] = 0;
                    if (v307)
                      operator delete(v307);
                    v308 = v331[0];
                    if (v331[0])
                    {
                      do
                      {
                        v309 = (_QWORD *)*v308;
                        operator delete(v308);
                        v308 = v309;
                      }
                      while (v309);
                    }
                    v310 = v330[0];
                    v330[0] = 0;
                    if (v310)
                      operator delete(v310);
                    v311 = (_QWORD *)v337;
                    if ((_QWORD)v337)
                    {
                      do
                      {
                        v312 = (_QWORD *)*v311;
                        operator delete(v311);
                        v311 = v312;
                      }
                      while (v312);
                    }
                    goto LABEL_503;
                  }
                }
                else
                {
                  if (v235 >= *(_QWORD *)&v221)
                    v235 %= *(_QWORD *)&v221;
                  if (v235 != v232)
                    goto LABEL_363;
                }
                v234 = (uint64_t *)*v234;
                if (!v234)
                  goto LABEL_363;
              }
            }
          }
          else
          {
            if ((void *)v228 >= v327[1])
              v228 %= (unint64_t)v327[1];
            if (v228 != v225)
              goto LABEL_340;
          }
          v227 = (uint64_t *)*v227;
          if (!v227)
            goto LABEL_340;
        }
      }
      v337 = 0uLL;
      v336 = 0uLL;
      v338 = 1065353216;
      *(_OWORD *)v330 = 0uLL;
      *(_OWORD *)v331 = 0uLL;
      v332 = 1065353216;
      v128 = *(uint64_t **)(v322 + 16);
      if (!v128)
        goto LABEL_457;
      v129 = v121.f32[0] * 0.5 + v110.f32[0];
      do
      {
        v130 = *((_DWORD *)v128 + 4);
        LODWORD(v327[0]) = v130;
        if (!*((_BYTE *)a1 + 200))
          sub_2394875CC();
        if (!*((_BYTE *)a1 + 168))
          sub_2394875CC();
        v131 = (unsigned int *)(a1[22] + 12 * v130);
        if ((float)((float)((float)(COERCE_FLOAT(*(_QWORD *)(a1[18] + 8 * *v131))
                                   + COERCE_FLOAT(*(_QWORD *)(a1[18] + 8 * v131[1])))
                           + COERCE_FLOAT(*(_QWORD *)(a1[18] + 8 * v131[2])))
                   / 3.0) >= v129)
          v132 = v330;
        else
          v132 = (void **)&v336;
        sub_239456168((uint64_t)v132, (unsigned int *)v327, v327);
        v128 = (uint64_t *)*v128;
      }
      while (v128);
      if (!*((_QWORD *)&v337 + 1) || !v331[1])
      {
LABEL_457:
        v286 = v331[0];
        if (v331[0])
        {
          do
          {
            v287 = (_QWORD *)*v286;
            operator delete(v286);
            v286 = v287;
          }
          while (v287);
        }
        v288 = v330[0];
        v330[0] = 0;
        if (v288)
          operator delete(v288);
        v289 = (_QWORD *)v337;
        if ((_QWORD)v337)
        {
          do
          {
            v290 = (_QWORD *)*v289;
            operator delete(v289);
            v289 = v290;
          }
          while (v290);
        }
        goto LABEL_503;
      }
      *(_OWORD *)v327 = 0u;
      *(_OWORD *)v328 = 0u;
      v329 = 1065353216;
      *(_OWORD *)v324 = 0u;
      *(_OWORD *)__p = 0u;
      v326 = 1065353216;
      for (j = (uint64_t **)v337; j; j = (uint64_t **)*j)
      {
        if (!*((_BYTE *)a1 + 200))
          sub_2394875CC();
        v134 = (unsigned int *)(a1[22] + 12 * *((unsigned int *)j + 4));
        sub_239456168((uint64_t)v324, v134, v134);
        sub_239456168((uint64_t)v324, v134 + 1, v134 + 1);
        sub_239456168((uint64_t)v324, v134 + 2, v134 + 2);
      }
      if (!*((_BYTE *)a1 + 168))
        sub_2394875CC();
      v135 = (void **)v331[0];
      if (v331[0])
      {
        do
        {
          if (!*((_BYTE *)a1 + 200))
            sub_2394875CC();
          v168 = (int8x8_t)v324[1];
          if (v324[1])
          {
            v169 = 0;
            v170 = a1[22] + 12 * *((unsigned int *)v135 + 4);
LABEL_225:
            v171 = *(unsigned int *)(v170 + 4 * v169);
            v172 = (uint8x8_t)vcnt_s8(v168);
            v172.i16[0] = vaddlv_u8(v172);
            if (v172.u32[0] > 1uLL)
            {
              v173 = *(unsigned int *)(v170 + 4 * v169);
              if (*(_QWORD *)&v168 <= v171)
                v173 = v171 % *(_QWORD *)&v168;
            }
            else
            {
              v173 = (v168.i32[0] - 1) & v171;
            }
            v174 = (uint64_t **)*((_QWORD *)v324[0] + v173);
            if (v174)
            {
              v175 = *v174;
              if (v175)
              {
                if (v172.u32[0] < 2uLL)
                {
                  v176 = *(_QWORD *)&v168 - 1;
                  while (1)
                  {
                    v178 = v175[1];
                    if (v178 == v171)
                    {
                      if (*((_DWORD *)v175 + 4) == (_DWORD)v171)
                        goto LABEL_245;
                    }
                    else if ((v178 & v176) != v173)
                    {
                      goto LABEL_290;
                    }
                    v175 = (uint64_t *)*v175;
                    if (!v175)
                      goto LABEL_290;
                  }
                }
                do
                {
                  v177 = v175[1];
                  if (v177 == v171)
                  {
                    if (*((_DWORD *)v175 + 4) == (_DWORD)v171)
                    {
LABEL_245:
                      if (v327[1])
                      {
                        v179 = (uint8x8_t)vcnt_s8((int8x8_t)v327[1]);
                        v179.i16[0] = vaddlv_u8(v179);
                        if (v179.u32[0] > 1uLL)
                        {
                          v180 = *(unsigned int *)(v170 + 4 * v169);
                          if (v327[1] <= (void *)v171)
                            v180 = v171 % (unint64_t)v327[1];
                        }
                        else
                        {
                          v180 = (LODWORD(v327[1]) - 1) & v171;
                        }
                        v181 = (uint64_t **)*((_QWORD *)v327[0] + v180);
                        if (v181)
                        {
                          v182 = *v181;
                          if (v182)
                          {
                            if (v179.u32[0] < 2uLL)
                            {
                              while (1)
                              {
                                v184 = v182[1];
                                if (v184 == v171)
                                {
                                  if (*((_DWORD *)v182 + 4) == (_DWORD)v171)
                                    goto LABEL_290;
                                }
                                else if ((v184 & ((unint64_t)v327[1] - 1)) != v180)
                                {
                                  goto LABEL_265;
                                }
                                v182 = (uint64_t *)*v182;
                                if (!v182)
                                  goto LABEL_265;
                              }
                            }
                            do
                            {
                              v183 = v182[1];
                              if (v183 == v171)
                              {
                                if (*((_DWORD *)v182 + 4) == (_DWORD)v171)
                                  goto LABEL_290;
                              }
                              else
                              {
                                if ((void *)v183 >= v327[1])
                                  v183 %= (unint64_t)v327[1];
                                if (v183 != v180)
                                  break;
                              }
                              v182 = (uint64_t *)*v182;
                            }
                            while (v182);
                          }
                        }
                      }
LABEL_265:
                      v323 = 0;
                      v185 = *(unsigned int *)(v170 + 4 * v169);
                      v323 = *(_DWORD *)(v170 + 4 * v169);
                      if (!*((_BYTE *)a1 + 168))
                        sub_2394875CC();
                      v186 = (char *)a1[18];
                      v187 = (char *)a1[19];
                      v188 = a1[20];
                      if ((unint64_t)v187 < v188)
                      {
                        *(_QWORD *)v187 = *(_QWORD *)&v186[8 * v185];
                        v189 = v187 + 8;
LABEL_289:
                        a1[19] = (uint64_t)v189;
                        v206 = a1[18];
                        v339[0] = &v323;
                        *((_DWORD *)sub_2394F126C((uint64_t)v327, &v323, (uint64_t)&unk_239EC6E98, v339) + 5) = (((unint64_t)v189 - v206) >> 3) - 1;
                        break;
                      }
                      v190 = (v187 - v186) >> 3;
                      v191 = v190 + 1;
                      if ((unint64_t)(v190 + 1) >> 61)
                        sub_2394189F8();
                      v192 = v188 - (_QWORD)v186;
                      if (v192 >> 2 > v191)
                        v191 = v192 >> 2;
                      if ((unint64_t)v192 >= 0x7FFFFFFFFFFFFFF8)
                        v193 = 0x1FFFFFFFFFFFFFFFLL;
                      else
                        v193 = v191;
                      if (v193)
                      {
                        if (v193 >> 61)
                          sub_239418A80();
                        v194 = operator new(8 * v193);
                      }
                      else
                      {
                        v194 = 0;
                      }
                      v195 = &v194[8 * v190];
                      v196 = &v194[8 * v193];
                      *v195 = *(_QWORD *)&v186[8 * v185];
                      v189 = v195 + 1;
                      if (v187 == v186)
                      {
                        a1[18] = (uint64_t)v195;
                        a1[19] = (uint64_t)v189;
                        a1[20] = (uint64_t)v196;
                        v103 = v317;
                      }
                      else
                      {
                        v197 = v187 - 8 - v186;
                        if (v197 < 0x58)
                        {
                          v103 = v317;
                          goto LABEL_286;
                        }
                        v103 = v317;
                        if ((unint64_t)(v186 - v194) < 0x20)
                          goto LABEL_538;
                        v198 = (v197 >> 3) + 1;
                        v199 = 8 * (v198 & 0x3FFFFFFFFFFFFFFCLL);
                        v200 = &v187[-v199];
                        v195 = (_QWORD *)((char *)v195 - v199);
                        v201 = &v194[8 * v190 - 16];
                        v202 = v187 - 16;
                        v203 = v198 & 0x3FFFFFFFFFFFFFFCLL;
                        do
                        {
                          v204 = *(_OWORD *)v202;
                          *(v201 - 1) = *((_OWORD *)v202 - 1);
                          *v201 = v204;
                          v201 -= 2;
                          v202 -= 32;
                          v203 -= 4;
                        }
                        while (v203);
                        v187 = v200;
                        if (v198 != (v198 & 0x3FFFFFFFFFFFFFFCLL))
                        {
LABEL_538:
                          do
                          {
LABEL_286:
                            v205 = *((_QWORD *)v187 - 1);
                            v187 -= 8;
                            *--v195 = v205;
                          }
                          while (v187 != v186);
                        }
                        v186 = (char *)a1[18];
                        a1[18] = (uint64_t)v195;
                        a1[19] = (uint64_t)v189;
                        a1[20] = (uint64_t)v196;
                        if (!v186)
                          goto LABEL_289;
                      }
                      operator delete(v186);
                      goto LABEL_289;
                    }
                  }
                  else
                  {
                    if (v177 >= *(_QWORD *)&v168)
                      v177 %= *(_QWORD *)&v168;
                    if (v177 != v173)
                      break;
                  }
                  v175 = (uint64_t *)*v175;
                }
                while (v175);
              }
            }
LABEL_290:
            while (++v169 != 3)
            {
              v168 = (int8x8_t)v324[1];
              if (v324[1])
                goto LABEL_225;
            }
          }
          v135 = (void **)*v135;
        }
        while (v135);
      }
      v136 = __p[0];
      if (__p[0])
      {
        do
        {
          v137 = (_QWORD *)*v136;
          operator delete(v136);
          v136 = v137;
        }
        while (v137);
      }
      v138 = v324[0];
      v324[0] = 0;
      v34 = a2;
      if (v138)
        operator delete(v138);
      v139 = (void **)v331[0];
      if (!v331[0])
        goto LABEL_147;
      while (2)
      {
        if (!*((_BYTE *)a1 + 200))
          sub_2394875CC();
        v142 = (int8x8_t)v327[1];
        if (!v327[1])
          goto LABEL_151;
        v143 = (unsigned int *)(a1[22] + 12 * *((unsigned int *)v139 + 4));
        v144 = *v143;
        v145 = (uint8x8_t)vcnt_s8((int8x8_t)v327[1]);
        v145.i16[0] = vaddlv_u8(v145);
        if (v145.u32[0] > 1uLL)
        {
          v146 = *v143;
          if (v327[1] <= (void *)v144)
            v146 = v144 % (unint64_t)v327[1];
        }
        else
        {
          v146 = (LODWORD(v327[1]) - 1) & v144;
        }
        v147 = (uint64_t **)*((_QWORD *)v327[0] + v146);
        if (!v147)
          goto LABEL_176;
        v148 = *v147;
        if (!v148)
          goto LABEL_176;
        if (v145.u32[0] < 2uLL)
        {
          while (1)
          {
            v150 = v148[1];
            if (v150 == v144)
            {
              if (*((_DWORD *)v148 + 4) == (_DWORD)v144)
                goto LABEL_174;
            }
            else if ((v150 & ((unint64_t)v327[1] - 1)) != v146)
            {
              goto LABEL_175;
            }
            v148 = (uint64_t *)*v148;
            if (!v148)
              goto LABEL_175;
          }
        }
        while (1)
        {
          v149 = v148[1];
          if (v149 == v144)
            break;
          if ((void *)v149 >= v327[1])
            v149 %= (unint64_t)v327[1];
          if (v149 != v146)
            goto LABEL_175;
LABEL_163:
          v148 = (uint64_t *)*v148;
          if (!v148)
            goto LABEL_175;
        }
        if (*((_DWORD *)v148 + 4) != (_DWORD)v144)
          goto LABEL_163;
LABEL_174:
        v324[0] = (void *)(a1[22] + 12 * *((unsigned int *)v139 + 4));
        *v143 = *((_DWORD *)sub_2394F126C((uint64_t)v327, v143, (uint64_t)&unk_239EC6E98, (_DWORD **)v324) + 5);
        v142 = (int8x8_t)v327[1];
LABEL_175:
        if (!*(_QWORD *)&v142)
          goto LABEL_151;
LABEL_176:
        v151 = v143[1];
        v152 = (uint8x8_t)vcnt_s8(v142);
        v152.i16[0] = vaddlv_u8(v152);
        if (v152.u32[0] >= 2uLL)
        {
          v153 = v143[1];
          if (*(_QWORD *)&v142 <= v151)
            v153 = v151 % *(_QWORD *)&v142;
        }
        else
        {
          v153 = (v142.i32[0] - 1) & v151;
        }
        v154 = (uint64_t **)*((_QWORD *)v327[0] + v153);
        if (!v154)
          goto LABEL_199;
        v155 = *v154;
        if (!v155)
          goto LABEL_199;
        if (v152.u32[0] < 2uLL)
        {
          while (1)
          {
            v157 = v155[1];
            if (v157 == v151)
            {
              if (*((_DWORD *)v155 + 4) == (_DWORD)v151)
                goto LABEL_197;
            }
            else if ((v157 & (*(_QWORD *)&v142 - 1)) != v153)
            {
              goto LABEL_198;
            }
            v155 = (uint64_t *)*v155;
            if (!v155)
              goto LABEL_198;
          }
        }
        while (2)
        {
          v156 = v155[1];
          if (v156 != v151)
          {
            if (v156 >= *(_QWORD *)&v142)
              v156 %= *(_QWORD *)&v142;
            if (v156 != v153)
              goto LABEL_198;
            goto LABEL_185;
          }
          if (*((_DWORD *)v155 + 4) != (_DWORD)v151)
          {
LABEL_185:
            v155 = (uint64_t *)*v155;
            if (!v155)
              goto LABEL_198;
            continue;
          }
          break;
        }
LABEL_197:
        v324[0] = v143 + 1;
        v143[1] = *((_DWORD *)sub_2394F126C((uint64_t)v327, v143 + 1, (uint64_t)&unk_239EC6E98, (_DWORD **)v324) + 5);
        v142 = (int8x8_t)v327[1];
LABEL_198:
        if (!*(_QWORD *)&v142)
          goto LABEL_151;
LABEL_199:
        v160 = v143[2];
        v159 = v143 + 2;
        v158 = v160;
        v161 = (uint8x8_t)vcnt_s8(v142);
        v161.i16[0] = vaddlv_u8(v161);
        if (v161.u32[0] >= 2uLL)
        {
          v162 = v158;
          if (*(_QWORD *)&v142 <= v158)
            v162 = v158 % *(_QWORD *)&v142;
        }
        else
        {
          v162 = (v142.i32[0] - 1) & v158;
        }
        v163 = (uint64_t **)*((_QWORD *)v327[0] + v162);
        if (v163)
        {
          v164 = *v163;
          if (v164)
          {
            if (v161.u32[0] < 2uLL)
            {
              v165 = *(_QWORD *)&v142 - 1;
              while (1)
              {
                v167 = v164[1];
                if (v167 == v158)
                {
                  if (*((_DWORD *)v164 + 4) == (_DWORD)v158)
                    goto LABEL_219;
                }
                else if ((v167 & v165) != v162)
                {
                  goto LABEL_151;
                }
                v164 = (uint64_t *)*v164;
                if (!v164)
                  goto LABEL_151;
              }
            }
            do
            {
              v166 = v164[1];
              if (v166 == v158)
              {
                if (*((_DWORD *)v164 + 4) == (_DWORD)v158)
                {
LABEL_219:
                  v324[0] = v159;
                  *v159 = *((_DWORD *)sub_2394F126C((uint64_t)v327, v159, (uint64_t)&unk_239EC6E98, (_DWORD **)v324) + 5);
                  break;
                }
              }
              else
              {
                if (v166 >= *(_QWORD *)&v142)
                  v166 %= *(_QWORD *)&v142;
                if (v166 != v162)
                  break;
              }
              v164 = (uint64_t *)*v164;
            }
            while (v164);
          }
        }
LABEL_151:
        v139 = (void **)*v139;
        if (v139)
          continue;
        break;
      }
LABEL_147:
      if ((__int128 *)v322 != &v336)
      {
        *(_DWORD *)(v322 + 32) = v338;
        sub_239558A08((_QWORD *)v322, (uint64_t *)v337, 0);
      }
      v140 = a2[1];
      if (v140 >= a2[2])
      {
        v141 = sub_2395593AC((void **)a2, (uint64_t)v330);
      }
      else
      {
        sub_239559050(a2[1], (uint64_t)v330);
        v141 = v140 + 40;
        a2[1] = v140 + 40;
      }
      a2[1] = v141;
      v297 = v328[0];
      if (v328[0])
      {
        do
        {
          v298 = (_QWORD *)*v297;
          operator delete(v297);
          v297 = v298;
        }
        while (v298);
      }
      v299 = v327[0];
      v327[0] = 0;
      if (v299)
        operator delete(v299);
      v300 = v331[0];
      if (v331[0])
      {
        do
        {
          v301 = (_QWORD *)*v300;
          operator delete(v300);
          v300 = v301;
        }
        while (v301);
      }
      v302 = v330[0];
      v330[0] = 0;
      if (v302)
        operator delete(v302);
      v303 = (_QWORD *)v337;
      if ((_QWORD)v337)
      {
        do
        {
          v304 = (_QWORD *)*v303;
          operator delete(v303);
          v303 = v304;
        }
        while (v304);
      }
LABEL_503:
      v313 = (void *)v336;
      *(_QWORD *)&v336 = 0;
      if (v313)
        operator delete(v313);
      v101 = 1;
LABEL_103:
      ++v103;
    }
    while (v103 != v320);
  }
  if (v333)
  {
    v334 = v333;
    operator delete(v333);
  }
  return v101 & 1;
}

void sub_23954E574(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,uint64_t a38,void *a39)
{
  if (a39)
    operator delete(a39);
  if (a36)
    operator delete(a36);
  _Unwind_Resume(exception_object);
}

void sub_23954E668()
{
  JUMPOUT(0x23954E63CLL);
}

void sub_23954E670()
{
  JUMPOUT(0x23954E640);
}

void sub_23954E678()
{
  JUMPOUT(0x23954E63CLL);
}

void sub_23954E680()
{
  JUMPOUT(0x23954E640);
}

void sub_23954E688()
{
  JUMPOUT(0x23954E63CLL);
}

void sub_23954E690()
{
  JUMPOUT(0x23954E63CLL);
}

void sub_23954E698(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_239420950(v1 - 224);
  _Unwind_Resume(a1);
}

void sub_23954E6AC(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_239420950(v1 - 224);
  _Unwind_Resume(a1);
}

void sub_23954E6C0(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_239420950(v1 - 224);
  _Unwind_Resume(a1);
}

void sub_23954E6D4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_239420950(v1 - 224);
  _Unwind_Resume(a1);
}

void sub_23954E6E8(uint64_t *a1, uint64_t *a2, uint64_t a3, unsigned int *a4, unsigned int *a5, unsigned int *a6, float *a7)
{
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  float v14;
  uint64_t **v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int *v18;
  uint64_t v19;
  float *v20;
  float *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t **v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int *v27;
  uint64_t v28;
  float *v29;
  float *v30;
  float v31;
  unsigned int v32;
  float v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;

  v10 = *a4;
  v9 = a4[1];
  v11 = a4[2];
  *a7 = 0.0;
  v12 = *a1;
  v13 = a1[1];
  v14 = 0.0;
  if (*a1 != v13)
  {
    if (*(_BYTE *)(a3 + 200))
    {
      while (1)
      {
        v15 = *(uint64_t ***)(v12 + 16);
        if (v15)
        {
          if (!*(_BYTE *)(a3 + 168))
            goto LABEL_34;
          v16 = *(_QWORD *)(a3 + 176);
          v17 = *(_QWORD *)(a3 + 144);
          do
          {
            v18 = (unsigned int *)(v16 + 12 * *((unsigned int *)v15 + 4));
            v19 = v18[1];
            v20 = (float *)(v17 + 8 * *v18);
            v21 = (float *)(v17 + 8 * v18[2]);
            v14 = v14
                + (float)(fabsf((float)((float)(*(float *)(v17 + 8 * v19) - *v20) * (float)(v21[1] - v20[1]))- (float)((float)(*v21 - *v20) * (float)(*(float *)(v17 + 8 * v19 + 4) - v20[1])))* 0.5);
            v15 = (uint64_t **)*v15;
            *a7 = v14;
          }
          while (v15);
        }
        v12 += 40;
        if (v12 == v13)
          goto LABEL_12;
      }
    }
    while (!*(_QWORD *)(v12 + 16))
    {
      v12 += 40;
      if (v12 == v13)
        goto LABEL_12;
    }
LABEL_34:
    sub_2394875CC();
  }
LABEL_12:
  v22 = *a2;
  v23 = a2[1];
  if (*a2 != v23)
  {
    if (*(_BYTE *)(a3 + 200))
    {
      while (1)
      {
        v24 = *(uint64_t ***)(v22 + 16);
        if (v24)
        {
          if (!*(_BYTE *)(a3 + 168))
            goto LABEL_34;
          v25 = *(_QWORD *)(a3 + 176);
          v26 = *(_QWORD *)(a3 + 144);
          do
          {
            v27 = (unsigned int *)(v25 + 12 * *((unsigned int *)v24 + 4));
            v28 = v27[1];
            v29 = (float *)(v26 + 8 * *v27);
            v30 = (float *)(v26 + 8 * v27[2]);
            v14 = v14
                + (float)(fabsf((float)((float)(*(float *)(v26 + 8 * v28) - *v29) * (float)(v30[1] - v29[1]))- (float)((float)(*v30 - *v29) * (float)(*(float *)(v26 + 8 * v28 + 4) - v29[1])))* 0.5);
            v24 = (uint64_t **)*v24;
            *a7 = v14;
          }
          while (v24);
        }
        v22 += 40;
        if (v22 == v23)
          goto LABEL_23;
      }
    }
    while (!*(_QWORD *)(v22 + 16))
    {
      v22 += 40;
      if (v22 == v23)
        goto LABEL_23;
    }
    goto LABEL_34;
  }
LABEL_23:
  v31 = v14 / 0.75;
  v32 = vcvtps_u32_f32(v31 / (float)(v9 * v9));
  if (v32 == 1)
  {
    v33 = logf(sqrtf(v31));
    v34 = exp2(ceil(v33 / 0.693147181));
    if (v10 > v34)
      v34 = v10;
    *a5 = v34;
    *a6 = 1;
  }
  else
  {
    if (v11 >= v32)
      v35 = v32;
    else
      v35 = v11;
    if (v11)
      v36 = v35;
    else
      v36 = v32;
    *a5 = v9;
    *a6 = v36;
  }
}

uint64_t sub_23954E90C(uint64_t *a1, uint64_t *a2, _QWORD *a3, unsigned int *a4, uint64_t a5, unint64_t *a6)
{
  unint64_t v10;
  int v11;
  unsigned int v12;
  int v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  void *v20;
  unint64_t v21;
  _DWORD *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  size_t v26;
  _DWORD *v27;
  char *v28;
  uint64_t v29;
  _DWORD *v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  _DWORD *v36;
  unsigned int v37;
  unint64_t v38;
  char *v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unsigned int v45;
  unint64_t v46;
  void *v47;
  char *v48;
  unint64_t v49;
  char *v50;
  int v51;
  unsigned int v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unsigned int v56;
  _BYTE *v57;
  char *v58;
  unint64_t v59;
  char *v60;
  int v61;
  unsigned int v62;
  _DWORD *v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  _BYTE *v68;
  _DWORD *v69;
  unint64_t v70;
  char *v71;
  int v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  _BYTE *v76;
  char *v77;
  uint64_t v78;
  unint64_t v79;
  char *v80;
  int v81;
  uint64_t v82;
  unint64_t v83;
  unint64_t v84;
  _BYTE *v85;
  unint64_t v86;
  char *v87;
  int v88;
  uint64_t v89;
  uint64_t v90;
  _OWORD *v91;
  __int128 *v92;
  uint64_t v93;
  __int128 v94;
  uint64_t v95;
  uint64_t v96;
  _OWORD *v97;
  __int128 *v98;
  uint64_t v99;
  __int128 v100;
  uint64_t v101;
  uint64_t v102;
  _OWORD *v103;
  __int128 *v104;
  uint64_t v105;
  __int128 v106;
  uint64_t v107;
  uint64_t v108;
  _OWORD *v109;
  __int128 *v110;
  uint64_t v111;
  __int128 v112;
  uint64_t v113;
  uint64_t v114;
  _OWORD *v115;
  __int128 *v116;
  uint64_t v117;
  __int128 v118;
  uint64_t v119;
  uint64_t v120;
  _DWORD *v121;
  uint64_t v122;
  char *v123;
  char *v124;
  _DWORD *v125;
  unsigned int v126;
  int v127;
  uint64_t v128;
  int64_t v129;
  uint64_t v130;
  unint64_t v131;
  unint64_t v132;
  char *v133;
  unsigned int v134;
  char *v135;
  unint64_t v136;
  _BYTE *v137;
  unint64_t v138;
  char *v139;
  int v140;
  unsigned int v141;
  uint64_t v142;
  unint64_t v143;
  unint64_t v144;
  unsigned int v145;
  _BYTE *v146;
  unint64_t v147;
  char *v148;
  int v149;
  unsigned int v150;
  _DWORD *v151;
  uint64_t v152;
  unint64_t v153;
  unint64_t v154;
  _BYTE *v155;
  _DWORD *v156;
  _DWORD *v157;
  unint64_t v158;
  char *v159;
  int v160;
  _DWORD *v161;
  int64_t v162;
  uint64_t v163;
  unint64_t v164;
  unint64_t v165;
  _BYTE *v166;
  _DWORD *v167;
  _DWORD *v168;
  _DWORD *v169;
  unint64_t v170;
  char *v171;
  int v172;
  int64_t v173;
  uint64_t v174;
  unint64_t v175;
  unint64_t v176;
  _BYTE *v177;
  _DWORD *v178;
  unint64_t v179;
  char *v180;
  int v181;
  uint64_t v182;
  uint64_t v183;
  _OWORD *v184;
  __int128 *v185;
  uint64_t v186;
  __int128 v187;
  uint64_t v188;
  uint64_t v189;
  _OWORD *v190;
  __int128 *v191;
  uint64_t v192;
  __int128 v193;
  uint64_t v194;
  uint64_t v195;
  _OWORD *v196;
  __int128 *v197;
  uint64_t v198;
  __int128 v199;
  uint64_t v200;
  uint64_t v201;
  _OWORD *v202;
  __int128 *v203;
  uint64_t v204;
  __int128 v205;
  uint64_t v206;
  uint64_t v207;
  _OWORD *v208;
  __int128 *v209;
  uint64_t v210;
  __int128 v211;
  uint64_t v212;
  int v213;
  uint64_t v214;
  uint64_t v215;
  unint64_t v216;
  unint64_t v217;
  _BYTE *v218;
  _DWORD *v219;
  char *v220;
  int64_t v221;
  unint64_t v222;
  char *v223;
  uint64_t v224;
  uint64_t v225;
  _OWORD *v226;
  __int128 *v227;
  uint64_t v228;
  __int128 v229;
  int v230;
  unint64_t v231;
  char *v232;
  char *v233;
  char *v234;
  uint64_t v235;
  uint64_t v236;
  unint64_t v237;
  uint64_t v238;
  unint64_t v239;
  _BYTE *v240;
  _QWORD *v241;
  char *v242;
  unint64_t v243;
  uint64_t v244;
  uint64_t v245;
  char *v246;
  _OWORD *v247;
  char *v248;
  uint64_t v249;
  __int128 v250;
  uint64_t v251;
  int v252;
  char *v253;
  uint64_t v254;
  char *v255;
  int64_t v256;
  uint64_t v257;
  unint64_t v258;
  uint64_t v259;
  unint64_t v260;
  char *v261;
  char *v262;
  char *v263;
  int64_t v264;
  unint64_t v265;
  uint64_t v266;
  uint64_t v267;
  char *v268;
  char *v269;
  char *v270;
  uint64_t v271;
  __int128 v272;
  int v273;
  unint64_t v274;
  char *v275;
  char *v276;
  uint64_t v277;
  uint64_t v278;
  unint64_t v279;
  uint64_t v280;
  unint64_t v281;
  _BYTE *v282;
  _QWORD *v283;
  char *v284;
  unint64_t v285;
  char *v286;
  uint64_t v287;
  uint64_t v288;
  _OWORD *v289;
  char *v290;
  uint64_t v291;
  __int128 v292;
  uint64_t v293;
  int v294;
  char *v295;
  uint64_t v296;
  char *v297;
  int64_t v298;
  uint64_t v299;
  unint64_t v300;
  uint64_t v301;
  unint64_t v302;
  char *v303;
  char *v304;
  char *v305;
  int64_t v306;
  unint64_t v307;
  uint64_t v308;
  uint64_t v309;
  char *v310;
  char *v311;
  char *v312;
  uint64_t v313;
  __int128 v314;
  int v315;
  unint64_t v316;
  char *v320;
  char *v321;
  uint64_t v322;
  uint64_t v323;
  unint64_t v324;
  uint64_t v325;
  unint64_t v326;
  _BYTE *v327;
  _QWORD *v328;
  char *v329;
  unint64_t v331;
  char *v332;
  uint64_t v333;
  uint64_t v334;
  _OWORD *v335;
  char *v336;
  uint64_t v337;
  __int128 v338;
  uint64_t v339;
  int v340;
  char *v341;
  uint64_t v342;
  char *v343;
  int64_t v344;
  uint64_t v345;
  unint64_t v346;
  uint64_t v347;
  unint64_t v348;
  char *v349;
  char *v350;
  char *v351;
  int64_t v352;
  unint64_t v353;
  uint64_t v354;
  uint64_t v355;
  char *v356;
  char *v357;
  char *v358;
  uint64_t v359;
  __int128 v360;
  int v361;
  char *v362;
  char *v363;
  unint64_t v364;
  unint64_t v365;
  uint64_t v367;
  uint64_t v368;
  char *v369;
  _OWORD *v370;
  __int128 *v371;
  uint64_t v372;
  __int128 v373;
  __int128 v374;
  __int128 v375;
  __int128 v376;
  char *v377;
  uint64_t v378;
  unint64_t v379;
  uint64_t v380;
  uint64_t v381;
  unint64_t v382;
  uint64_t i;
  uint64_t v384;
  unint64_t v385;
  std::string *v386;
  std::string::size_type v387;
  char v388;
  int *v389;
  __n128 v390;
  std::__shared_weak_count *v391;
  unint64_t *v392;
  unint64_t v393;
  void **v394;
  __int128 v395;
  std::__shared_weak_count *v396;
  unint64_t *p_shared_owners;
  unint64_t v398;
  uint64_t v399;
  __int128 v400;
  __int128 v401;
  __int128 v402;
  __int128 v403;
  __int128 v404;
  __int128 v405;
  __int128 v406;
  __int128 v407;
  __int128 v408;
  __int128 v409;
  __int128 v410;
  uint64_t v411;
  uint64_t v412;
  _QWORD *v413;
  _QWORD *v414;
  unint64_t v415;
  unint64_t v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t v419;
  uint64_t v420;
  int v421;
  uint64_t v422;
  unint64_t v423;
  _QWORD *v424;
  unint64_t v425;
  char *v426;
  uint64_t *v427;
  char *v428;
  uint64_t v429;
  unint64_t v430;
  uint64_t v431;
  unint64_t v432;
  uint64_t v433;
  unint64_t v434;
  _BYTE *v435;
  _DWORD *v436;
  unint64_t v437;
  uint64_t v438;
  uint64_t v439;
  char *v440;
  _OWORD *v441;
  char *v442;
  uint64_t v443;
  __int128 v444;
  int v445;
  uint64_t v446;
  uint64_t v447;
  uint64_t v448;
  unint64_t v449;
  _QWORD *v450;
  char *v451;
  unint64_t v452;
  unint64_t v453;
  BOOL v454;
  uint64_t v455;
  uint64_t v456;
  uint64_t v457;
  _OWORD *v458;
  __int128 *v459;
  uint64_t v460;
  __int128 v461;
  __int128 v462;
  __int128 v463;
  __int128 v464;
  uint64_t v465;
  _DWORD *v466;
  char *v467;
  int v468;
  uint64_t v469;
  unsigned int v470;
  unint64_t v471;
  uint64_t v472;
  _QWORD *v473;
  uint64_t v474;
  unint64_t v475;
  _QWORD *v476;
  unint64_t v477;
  uint64_t *v478;
  char *v479;
  uint64_t v480;
  uint64_t v481;
  char *v482;
  uint64_t v483;
  unint64_t v484;
  uint64_t v485;
  unint64_t v486;
  _BYTE *v487;
  _DWORD *v488;
  unint64_t v489;
  uint64_t v490;
  uint64_t v491;
  char *v492;
  _OWORD *v493;
  char *v494;
  uint64_t v495;
  __int128 v496;
  int v497;
  int32x2_t *v498;
  char *v499;
  char *v500;
  uint64_t v501;
  unsigned int v502;
  unint64_t v503;
  char *v504;
  unint64_t v505;
  char *v506;
  unint64_t v507;
  uint64_t v508;
  unint64_t v509;
  _BYTE *v510;
  _QWORD *v511;
  unint64_t v512;
  uint64_t v513;
  uint64_t v514;
  char *v515;
  _OWORD *v516;
  char *v517;
  uint64_t v518;
  __int128 v519;
  uint64_t v520;
  char *v521;
  uint64_t v522;
  uint64_t v523;
  unint64_t v524;
  uint64_t v525;
  unint64_t v526;
  _BYTE *v527;
  _QWORD *v528;
  char *v529;
  unint64_t v530;
  char *v531;
  uint64_t v532;
  uint64_t v533;
  _OWORD *v534;
  char *v535;
  uint64_t v536;
  __int128 v537;
  uint64_t v538;
  unint64_t v539;
  char *v540;
  uint64_t v541;
  uint64_t v542;
  unint64_t v543;
  uint64_t v544;
  unint64_t v545;
  _BYTE *v546;
  _QWORD *v547;
  char *v548;
  unint64_t v549;
  char *v550;
  uint64_t v551;
  uint64_t v552;
  _OWORD *v553;
  char *v554;
  uint64_t v555;
  __int128 v556;
  uint64_t v557;
  uint64_t v558;
  uint64_t v559;
  BOOL v560;
  char v561;
  _QWORD *v562;
  uint64_t *v564;
  unsigned int v565;
  _QWORD *v566;
  char **v567;
  unint64_t *v568;
  unsigned __int16 *v569;
  uint64_t v570;
  uint64_t v571;
  uint64_t v572;
  uint64_t v574;
  int v575;
  int v576;
  uint64_t *v577;
  char *v578;
  void *v579;
  unsigned int v580;
  _DWORD *v581;
  _DWORD *v582;
  uint64_t v583;
  uint64_t *v584;
  uint64_t v585;
  uint64_t v586;
  uint64_t v587;
  char *v588;
  uint64_t v589;
  uint64_t v590;
  uint64_t v591;
  char *v592;
  char *v593;
  unsigned int v594;
  _DWORD *v595;
  _DWORD *v596;
  uint64_t v597;
  char *v598;
  uint64_t v599;
  unint64_t v600;
  char *v601;
  int v602;
  unsigned int v603;
  char *__p;
  char *__pa;
  char *__pb;
  char *__pc;
  uint64_t *__pd;
  std::string v609;
  uint64_t (**v610)();
  __int128 v611;
  __int128 v612;
  __int128 v613;
  __int128 v614;
  __int128 v615;
  __int128 v616;
  __int128 v617;
  uint64_t v618;
  __int16 v619;
  int v620;
  int v621;
  unsigned int v622;
  void *v623;
  char *v624;
  char *v625;
  void *v626;
  _DWORD *v627;
  unint64_t v628;
  void *v629;
  uint64_t v630;
  char *v631;
  void *v632;
  uint64_t v633;
  char *v634;
  uint64_t v635;
  unsigned int v636;
  unsigned int v637;
  unint64_t v638;
  uint64_t v639;
  unint64_t v640;
  _BYTE v641[120];
  __int16 v642;
  uint64_t v643;

  v643 = *MEMORY[0x24BDAC8D0];
  v10 = a3[1];
  v11 = v10 & 0x3F;
  v12 = 0;
  if (v10 > 0x3F || v11 != 0)
  {
    v14 = 0;
    v15 = (_QWORD *)*a3;
    v16 = *a3 + 8 * (v10 >> 6);
    do
    {
      v12 += (*v15 >> v14) & 1;
      v15 += v14 == 63;
      if (v14 == 63)
        v14 = 0;
      else
        ++v14;
    }
    while (v14 != v11 || v15 != (_QWORD *)v16);
  }
  v640 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a5 + 32) - *(_QWORD *)(a5 + 24)) >> 2) - v12 + 1;
  if (!*(_BYTE *)(a5 + 168))
    sub_2394875CC();
  v567 = (char **)(a5 + 144);
  v639 = ((uint64_t)(*(_QWORD *)(a5 + 152) - *(_QWORD *)(a5 + 144)) >> 3) + 3;
  v638 = 0xCCCCCCCCCCCCCCCDLL * ((a2[1] - *a2) >> 3) - 0x3333333333333333 * ((a1[1] - *a1) >> 3) + 1;
  v637 = a4[3];
  v636 = 0;
  v635 = 0;
  sub_23954E6E8(a1, a2, a5, a4, &v636, (unsigned int *)&v635 + 1, (float *)&v635);
  v632 = 0;
  v633 = 0;
  v634 = 0;
  v17 = v640;
  v568 = a6;
  v564 = a2;
  v591 = a5;
  if (v640)
  {
    if (v640 >> 62)
      sub_2394189F8();
    v18 = (char *)operator new(4 * v640);
    v632 = v18;
    v633 = (uint64_t)v18;
    v601 = &v18[4 * v17];
    v634 = v601;
    v19 = (char *)operator new(4 * v17);
    v629 = v19;
    v630 = (uint64_t)v19;
    v598 = &v19[4 * v17];
    v631 = v598;
    v626 = 0;
    v627 = 0;
    v628 = 0;
    if (v17 >= 0x1555555555555556)
      sub_2394189F8();
    v20 = operator new(12 * v17);
    v21 = (unint64_t)v20 + 12 * v17;
    v626 = v20;
    v627 = v20;
    v22 = v20;
    v628 = v21;
    v23 = v639;
    v24 = 2 * v639;
    v624 = 0;
    v625 = 0;
    v623 = 0;
    if (2 * v639)
    {
LABEL_16:
      if (v24 >> 62)
        sub_2394189F8();
      v25 = v21;
      v26 = 8 * v23;
      v623 = operator new(8 * v23);
      v625 = (char *)v623 + 4 * v24;
      bzero(v623, v26);
      v624 = (char *)v623 + v26;
      v21 = v25;
      if (!v17)
        goto LABEL_18;
LABEL_21:
      v569 = (unsigned __int16 *)operator new(2 * v17);
      bzero(v569, 2 * v17);
      goto LABEL_22;
    }
  }
  else
  {
    v19 = 0;
    v598 = 0;
    v601 = 0;
    v18 = 0;
    v21 = 0;
    v22 = 0;
    v629 = 0;
    v630 = 0;
    v631 = 0;
    v626 = 0;
    v627 = 0;
    v628 = 0;
    v23 = v639;
    v24 = 2 * v639;
    v624 = 0;
    v625 = 0;
    v623 = 0;
    if (2 * v639)
      goto LABEL_16;
  }
  if (v17)
    goto LABEL_21;
LABEL_18:
  v569 = 0;
LABEL_22:
  v565 = v12;
  v566 = a3;
  v571 = a1[1];
  v27 = v22;
  if (*a1 == v571)
  {
    v28 = v18;
    v31 = v19;
    v32 = (char *)v22;
    v119 = *v564;
    v570 = v564[1];
    if (*v564 == v570)
      goto LABEL_315;
LABEL_170:
    v575 = 0;
    v585 = v633;
    v120 = v630;
    v121 = v627;
    while (1)
    {
      v572 = v119;
      v122 = *(_QWORD *)(v119 + 16);
      v123 = v28;
      v124 = v31;
      if (v122)
        break;
LABEL_171:
      v119 = v572 + 40;
      ++v575;
      if (v572 + 40 == v570)
      {
        v633 = v585;
        v630 = v120;
        v627 = v121;
        goto LABEL_315;
      }
    }
    while (1)
    {
      v577 = (uint64_t *)v122;
      v579 = (void *)v21;
      __pb = v124;
      v126 = *(_DWORD *)(v122 + 16);
      v127 = v575 - 858993459 * ((unint64_t)(a1[1] - *a1) >> 3);
      v596 = v121;
      if (v18 < v601)
      {
        v128 = v120;
        *(_DWORD *)v18 = v127;
        v585 = (uint64_t)(v18 + 4);
        v21 = (unint64_t)v579;
        v593 = v123;
        if (v19 < v598)
          goto LABEL_178;
        goto LABEL_194;
      }
      v589 = v120;
      v582 = v27;
      v129 = v18 - v123;
      v130 = (v18 - v123) >> 2;
      v131 = v130 + 1;
      if ((unint64_t)(v130 + 1) >> 62)
      {
        v633 = v585;
        v630 = v120;
        v627 = v121;
        sub_2394189F8();
      }
      if ((v601 - v123) >> 1 > v131)
        v131 = (v601 - v123) >> 1;
      if ((unint64_t)(v601 - v123) >= 0x7FFFFFFFFFFFFFFCLL)
        v132 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v132 = v131;
      if (v132)
      {
        if (v132 >> 62)
        {
          v633 = v585;
          v630 = v120;
          v627 = v121;
          sub_239418A80();
        }
        v133 = v19;
        v134 = v126;
        v135 = v123;
        v136 = v132;
        v137 = operator new(4 * v132);
        v123 = v135;
        v121 = v596;
        v126 = v134;
        v19 = v133;
        v132 = v136;
        v28 = &v137[4 * v130];
        *(_DWORD *)v28 = v127;
        v585 = (uint64_t)(v28 + 4);
        if (v18 != v123)
        {
LABEL_188:
          v138 = v18 - 4 - v123;
          v21 = (unint64_t)v579;
          if (v138 < 0xBC
            || &v137[v129 - 4 - (v138 & 0xFFFFFFFFFFFFFFFCLL)] > &v137[v129 - 4]
            || &v18[-(v138 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v18 - 4
            || (unint64_t)(v18 - &v137[v129]) < 0x20)
          {
            v139 = v18;
            v27 = v582;
            v128 = v589;
          }
          else
          {
            v182 = (v138 >> 2) + 1;
            v183 = 4 * (v182 & 0x7FFFFFFFFFFFFFF8);
            v139 = &v18[-v183];
            v28 -= v183;
            v184 = &v137[4 * v130 - 16];
            v185 = (__int128 *)(v18 - 16);
            v186 = v182 & 0x7FFFFFFFFFFFFFF8;
            v27 = v582;
            do
            {
              v187 = *v185;
              *(v184 - 1) = *(v185 - 1);
              *v184 = v187;
              v184 -= 2;
              v185 -= 2;
              v186 -= 8;
            }
            while (v186);
            v128 = v589;
            if (v182 == (v182 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_191:
              v632 = v28;
              v601 = &v137[4 * v132];
              v634 = v601;
              if (!v123)
                goto LABEL_193;
LABEL_192:
              v141 = v126;
              operator delete(v123);
              v126 = v141;
              v121 = v596;
              goto LABEL_193;
            }
          }
          do
          {
            v140 = *((_DWORD *)v139 - 1);
            v139 -= 4;
            *((_DWORD *)v28 - 1) = v140;
            v28 -= 4;
          }
          while (v139 != v123);
          goto LABEL_191;
        }
      }
      else
      {
        v137 = 0;
        v28 = (char *)(4 * v130);
        *(_DWORD *)(4 * v130) = v127;
        v585 = 4 * v130 + 4;
        if (v18 != v123)
          goto LABEL_188;
      }
      v21 = (unint64_t)v579;
      v27 = v582;
      v128 = v589;
      v632 = v28;
      v601 = &v137[4 * v132];
      v634 = v601;
      if (v123)
        goto LABEL_192;
LABEL_193:
      v123 = v28;
      v593 = v28;
      if (v19 < v598)
      {
LABEL_178:
        *(_DWORD *)v19 = v126;
        v588 = v19 + 4;
        v124 = __pb;
        goto LABEL_214;
      }
LABEL_194:
      v142 = (v19 - __pb) >> 2;
      v143 = v142 + 1;
      if ((unint64_t)(v142 + 1) >> 62)
      {
        v633 = v585;
        v630 = v128;
        v627 = v121;
        sub_2394189F8();
      }
      if ((v598 - __pb) >> 1 > v143)
        v143 = (v598 - __pb) >> 1;
      if ((unint64_t)(v598 - __pb) >= 0x7FFFFFFFFFFFFFFCLL)
        v144 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v144 = v143;
      if (v144)
      {
        if (v144 >> 62)
        {
          v633 = v585;
          v630 = v128;
          v627 = v121;
          sub_239418A80();
        }
        v145 = v126;
        v146 = operator new(4 * v144);
        v123 = v593;
        v126 = v145;
      }
      else
      {
        v146 = 0;
      }
      v31 = &v146[4 * v142];
      *(_DWORD *)v31 = v126;
      v588 = v31 + 4;
      if (v19 == __pb)
      {
        v629 = &v146[4 * v142];
        v598 = &v146[4 * v144];
        v631 = v598;
        if (!__pb)
          goto LABEL_213;
LABEL_212:
        v150 = v126;
        operator delete(__pb);
        v126 = v150;
        v123 = v593;
        goto LABEL_213;
      }
      v147 = v19 - 4 - __pb;
      if (v147 < 0xBC
        || &v146[v19 - __pb - 4 - (v147 & 0xFFFFFFFFFFFFFFFCLL)] > &v146[v19 - __pb - 4]
        || &v19[-(v147 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v19 - 4
        || (unint64_t)(__pb - v146) < 0x20)
      {
        v148 = v19;
        do
        {
LABEL_210:
          v149 = *((_DWORD *)v148 - 1);
          v148 -= 4;
          *((_DWORD *)v31 - 1) = v149;
          v31 -= 4;
        }
        while (v148 != __pb);
        goto LABEL_211;
      }
      v188 = (v147 >> 2) + 1;
      v189 = 4 * (v188 & 0x7FFFFFFFFFFFFFF8);
      v148 = &v19[-v189];
      v31 -= v189;
      v190 = &v146[4 * v142 - 16];
      v191 = (__int128 *)(v19 - 16);
      v192 = v188 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v193 = *v191;
        *(v190 - 1) = *(v191 - 1);
        *v190 = v193;
        v190 -= 2;
        v191 -= 2;
        v192 -= 8;
      }
      while (v192);
      if (v188 != (v188 & 0x7FFFFFFFFFFFFFF8))
        goto LABEL_210;
LABEL_211:
      v629 = v31;
      v598 = &v146[4 * v144];
      v631 = v598;
      if (__pb)
        goto LABEL_212;
LABEL_213:
      v124 = v31;
      v121 = v596;
LABEL_214:
      if (!*(_BYTE *)(v591 + 200))
      {
        v633 = v585;
        v630 = (uint64_t)v588;
        v627 = v121;
        sub_2394875CC();
      }
      v151 = (_DWORD *)(*(_QWORD *)(v591 + 176) + 12 * v126);
      __pc = v124;
      if ((unint64_t)v27 < v21)
      {
        *v27 = *v151;
        v121 = v27 + 1;
        if ((unint64_t)(v27 + 1) < v21)
          goto LABEL_217;
        goto LABEL_238;
      }
      v152 = ((char *)v27 - v32) >> 2;
      v153 = v152 + 1;
      if ((unint64_t)(v152 + 1) >> 62)
        goto LABEL_697;
      if ((uint64_t)(v21 - (_QWORD)v32) >> 1 > v153)
        v153 = (uint64_t)(v21 - (_QWORD)v32) >> 1;
      if (v21 - (unint64_t)v32 >= 0x7FFFFFFFFFFFFFFCLL)
        v154 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v154 = v153;
      if (v154)
      {
        if (v154 >> 62)
          goto LABEL_701;
        v155 = operator new(4 * v154);
        v156 = v151;
        v123 = v593;
        v157 = &v155[4 * v152];
        *v157 = *v156;
        v121 = v157 + 1;
        if (v27 == (_DWORD *)v32)
          goto LABEL_235;
      }
      else
      {
        v156 = (_DWORD *)(*(_QWORD *)(v591 + 176) + 12 * v126);
        v155 = 0;
        v157 = (_DWORD *)(4 * v152);
        *(_DWORD *)(4 * v152) = *v156;
        v121 = (_DWORD *)(4 * v152 + 4);
        if (v27 == (_DWORD *)v32)
          goto LABEL_235;
      }
      v158 = (char *)(v27 - 1) - v32;
      if (v158 < 0xBC)
      {
        v159 = (char *)v27;
        goto LABEL_234;
      }
      if (&v155[(char *)v27 - v32 - 4 - (v158 & 0xFFFFFFFFFFFFFFFCLL)] > &v155[(char *)v27 - v32 - 4])
      {
        v159 = (char *)v27;
        do
        {
LABEL_234:
          v160 = *((_DWORD *)v159 - 1);
          v159 -= 4;
          *--v157 = v160;
        }
        while (v159 != v32);
        goto LABEL_235;
      }
      if ((_DWORD *)((char *)v27 - (v158 & 0xFFFFFFFFFFFFFFFCLL) - 4) > v27 - 1)
      {
        v159 = (char *)v27;
        goto LABEL_234;
      }
      if ((unint64_t)(v32 - v155) < 0x20)
      {
        v159 = (char *)v27;
        goto LABEL_234;
      }
      v200 = (v158 >> 2) + 1;
      v201 = 4 * (v200 & 0x7FFFFFFFFFFFFFF8);
      v159 = (char *)&v27[v201 / 0xFFFFFFFFFFFFFFFCLL];
      v157 = (_DWORD *)((char *)v157 - v201);
      v202 = &v155[4 * v152 - 16];
      v203 = (__int128 *)(v27 - 4);
      v204 = v200 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v205 = *v203;
        *(v202 - 1) = *(v203 - 1);
        *v202 = v205;
        v202 -= 2;
        v203 -= 2;
        v204 -= 8;
      }
      while (v204);
      if (v200 != (v200 & 0x7FFFFFFFFFFFFFF8))
        goto LABEL_234;
LABEL_235:
      v21 = (unint64_t)&v155[4 * v154];
      if (v32)
      {
        v161 = v121;
        operator delete(v32);
        v121 = v161;
        v123 = v593;
      }
      v32 = (char *)v157;
      v151 = v156;
      v124 = __pc;
      if ((unint64_t)v121 < v21)
      {
LABEL_217:
        *v121++ = v151[1];
        if ((unint64_t)v121 >= v21)
          goto LABEL_255;
        goto LABEL_174;
      }
LABEL_238:
      v162 = (char *)v121 - v32;
      v163 = ((char *)v121 - v32) >> 2;
      v164 = v163 + 1;
      if ((unint64_t)(v163 + 1) >> 62)
        goto LABEL_697;
      if ((uint64_t)(v21 - (_QWORD)v32) >> 1 > v164)
        v164 = (uint64_t)(v21 - (_QWORD)v32) >> 1;
      if (v21 - (unint64_t)v32 >= 0x7FFFFFFFFFFFFFFCLL)
        v165 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v165 = v164;
      if (v165)
      {
        v596 = v121;
        if (v165 >> 62)
          goto LABEL_701;
        v166 = operator new(4 * v165);
        v123 = v593;
        v121 = v596;
      }
      else
      {
        v166 = 0;
      }
      v167 = &v166[4 * v163];
      v168 = v151;
      *v167 = v151[1];
      v169 = v167 + 1;
      if (v121 != (_DWORD *)v32)
      {
        v170 = (char *)(v121 - 1) - v32;
        if (v170 < 0xBC)
        {
          v171 = (char *)v121;
          goto LABEL_251;
        }
        if (&v166[v162 - 4 - (v170 & 0xFFFFFFFFFFFFFFFCLL)] > &v166[v162 - 4])
        {
          v171 = (char *)v121;
          do
          {
LABEL_251:
            v172 = *((_DWORD *)v171 - 1);
            v171 -= 4;
            *--v167 = v172;
          }
          while (v171 != v32);
          goto LABEL_252;
        }
        if ((_DWORD *)((char *)v121 - (v170 & 0xFFFFFFFFFFFFFFFCLL) - 4) > v121 - 1)
        {
          v171 = (char *)v121;
          goto LABEL_251;
        }
        if ((unint64_t)((char *)v121 - v166 - v162) < 0x20)
        {
          v171 = (char *)v121;
          goto LABEL_251;
        }
        v206 = (v170 >> 2) + 1;
        v207 = 4 * (v206 & 0x7FFFFFFFFFFFFFF8);
        v171 = (char *)&v121[v207 / 0xFFFFFFFFFFFFFFFCLL];
        v167 = (_DWORD *)((char *)v167 - v207);
        v208 = &v166[4 * v163 - 16];
        v209 = (__int128 *)(v121 - 4);
        v210 = v206 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v211 = *v209;
          *(v208 - 1) = *(v209 - 1);
          *v208 = v211;
          v208 -= 2;
          v209 -= 2;
          v210 -= 8;
        }
        while (v210);
        if (v206 != (v206 & 0x7FFFFFFFFFFFFFF8))
          goto LABEL_251;
      }
LABEL_252:
      v21 = (unint64_t)&v166[4 * v165];
      if (v32)
      {
        operator delete(v32);
        v123 = v593;
      }
      v32 = (char *)v167;
      v121 = v169;
      v151 = v168;
      v124 = __pc;
      if ((unint64_t)v121 >= v21)
      {
LABEL_255:
        v173 = (char *)v121 - v32;
        v174 = ((char *)v121 - v32) >> 2;
        v175 = v174 + 1;
        if ((unint64_t)(v174 + 1) >> 62)
        {
LABEL_697:
          v633 = v585;
          v630 = (uint64_t)v588;
          v627 = v121;
          v628 = v21;
          v626 = v32;
          sub_2394189F8();
        }
        if ((uint64_t)(v21 - (_QWORD)v32) >> 1 > v175)
          v175 = (uint64_t)(v21 - (_QWORD)v32) >> 1;
        if (v21 - (unint64_t)v32 >= 0x7FFFFFFFFFFFFFFCLL)
          v176 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v176 = v175;
        if (v176)
        {
          v596 = v121;
          if (v176 >> 62)
          {
LABEL_701:
            v633 = v585;
            v630 = (uint64_t)v588;
            v627 = v596;
            v628 = v21;
            v626 = v32;
            sub_239418A80();
          }
          v177 = operator new(4 * v176);
          v121 = v596;
        }
        else
        {
          v177 = 0;
        }
        v125 = &v177[4 * v174];
        *v125 = v151[2];
        v178 = v125 + 1;
        if (v121 == (_DWORD *)v32)
        {
          v27 = v125 + 1;
          v21 = (unint64_t)&v177[4 * v176];
          if (!v32)
          {
LABEL_272:
            v123 = v593;
            goto LABEL_175;
          }
        }
        else
        {
          v179 = (char *)(v121 - 1) - v32;
          if (v179 < 0xBC
            || &v177[v173 - 4 - (v179 & 0xFFFFFFFFFFFFFFFCLL)] > &v177[v173 - 4]
            || (_DWORD *)((char *)v121 - (v179 & 0xFFFFFFFFFFFFFFFCLL) - 4) > v121 - 1
            || (unint64_t)((char *)v121 - v177 - v173) < 0x20)
          {
            v180 = (char *)v121;
            v27 = v125 + 1;
          }
          else
          {
            v194 = (v179 >> 2) + 1;
            v195 = 4 * (v194 & 0x7FFFFFFFFFFFFFF8);
            v180 = (char *)&v121[v195 / 0xFFFFFFFFFFFFFFFCLL];
            v125 = (_DWORD *)((char *)v125 - v195);
            v196 = &v177[4 * v174 - 16];
            v197 = (__int128 *)(v121 - 4);
            v198 = v194 & 0x7FFFFFFFFFFFFFF8;
            v27 = v178;
            do
            {
              v199 = *v197;
              *(v196 - 1) = *(v197 - 1);
              *v196 = v199;
              v196 -= 2;
              v197 -= 2;
              v198 -= 8;
            }
            while (v198);
            if (v194 == (v194 & 0x7FFFFFFFFFFFFFF8))
              goto LABEL_269;
          }
          do
          {
            v181 = *((_DWORD *)v180 - 1);
            v180 -= 4;
            *--v125 = v181;
          }
          while (v180 != v32);
LABEL_269:
          v21 = (unint64_t)&v177[4 * v176];
          if (!v32)
            goto LABEL_272;
        }
        operator delete(v32);
        v123 = v593;
        goto LABEL_175;
      }
LABEL_174:
      *v121 = v151[2];
      v125 = v32;
      v27 = v121 + 1;
LABEL_175:
      v628 = v21;
      v626 = v125;
      v122 = *v577;
      v121 = v27;
      v18 = (char *)v585;
      v120 = (uint64_t)v588;
      v19 = v588;
      v32 = (char *)v125;
      if (!*v577)
        goto LABEL_171;
    }
  }
  v576 = 0;
  v592 = (char *)v633;
  v587 = v630;
  v28 = v18;
  v29 = *a1;
  v30 = v627;
  v31 = v19;
  v32 = (char *)v22;
  v33 = v591;
  do
  {
    v574 = v29;
    v34 = *(_QWORD *)(v29 + 16);
    v35 = v28;
    v578 = v31;
    if (v34)
    {
      while (1)
      {
        v584 = (uint64_t *)v34;
        v37 = *(_DWORD *)(v34 + 16);
        if (v18 < v601)
        {
          *(_DWORD *)v18 = v576;
          v592 = v18 + 4;
          __p = v35;
          if (v19 < v598)
            goto LABEL_31;
          goto LABEL_54;
        }
        v581 = v27;
        v38 = v21;
        v39 = (char *)(v18 - v35);
        v40 = (v18 - v35) >> 2;
        v41 = v40 + 1;
        if ((unint64_t)(v40 + 1) >> 62)
        {
          v633 = (uint64_t)v592;
          v630 = v587;
          v627 = v30;
          sub_2394189F8();
        }
        __pa = v35;
        v42 = v601 - v35;
        v43 = (v601 - v35) >> 1;
        if (v43 > v41)
          v41 = v43;
        if (v42 >= 0x7FFFFFFFFFFFFFFCLL)
          v44 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v44 = v41;
        if (v44)
        {
          if (v44 >> 62)
          {
            v633 = (uint64_t)v592;
            v630 = v587;
            v627 = v30;
            sub_239418A80();
          }
          v45 = v37;
          v46 = v44;
          v47 = operator new(4 * v44);
          v48 = __pa;
          v37 = v45;
          v44 = v46;
        }
        else
        {
          v47 = 0;
          v48 = __pa;
        }
        v28 = (char *)v47 + 4 * v40;
        *(_DWORD *)v28 = v576;
        v592 = v28 + 4;
        if (v18 == v48)
        {
          v33 = v591;
          v21 = v38;
          v27 = v581;
          goto LABEL_51;
        }
        v49 = v18 - 4 - v48;
        if (v49 < 0xBC)
          break;
        if (&v39[(_QWORD)v47 - 4 - (v49 & 0xFFFFFFFFFFFFFFFCLL)] > &v39[(_QWORD)v47 - 4]
          || &v18[-(v49 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v18 - 4
          || (unint64_t)(v18 - &v39[(_QWORD)v47]) < 0x20)
        {
          v50 = v18;
          v33 = v591;
          v21 = v38;
          v27 = v581;
          v48 = __pa;
          do
          {
LABEL_50:
            v51 = *((_DWORD *)v50 - 1);
            v50 -= 4;
            *((_DWORD *)v28 - 1) = v51;
            v28 -= 4;
          }
          while (v50 != v48);
          goto LABEL_51;
        }
        v95 = (v49 >> 2) + 1;
        v96 = 4 * (v95 & 0x7FFFFFFFFFFFFFF8);
        v50 = &v18[-v96];
        v28 -= v96;
        v97 = (char *)v47 + 4 * v40 - 16;
        v98 = (__int128 *)(v18 - 16);
        v99 = v95 & 0x7FFFFFFFFFFFFFF8;
        v21 = v38;
        do
        {
          v100 = *v98;
          *(v97 - 1) = *(v98 - 1);
          *v97 = v100;
          v97 -= 2;
          v98 -= 2;
          v99 -= 8;
        }
        while (v99);
        v33 = v591;
        v27 = v581;
        v48 = __pa;
        if (v95 != (v95 & 0x7FFFFFFFFFFFFFF8))
          goto LABEL_50;
LABEL_51:
        v632 = v28;
        v601 = (char *)v47 + 4 * v44;
        v634 = v601;
        if (v48)
        {
          v52 = v37;
          operator delete(v48);
          v37 = v52;
        }
        v35 = v28;
        __p = v28;
        if (v19 < v598)
        {
LABEL_31:
          *(_DWORD *)v19 = v37;
          v587 = (uint64_t)(v19 + 4);
          goto LABEL_75;
        }
LABEL_54:
        v53 = (v19 - v578) >> 2;
        v54 = v53 + 1;
        if ((unint64_t)(v53 + 1) >> 62)
        {
          v633 = (uint64_t)v592;
          v630 = v587;
          v627 = v30;
          sub_2394189F8();
        }
        if ((v598 - v578) >> 1 > v54)
          v54 = (v598 - v578) >> 1;
        if ((unint64_t)(v598 - v578) >= 0x7FFFFFFFFFFFFFFCLL)
          v55 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v55 = v54;
        if (v55)
        {
          if (v55 >> 62)
          {
            v633 = (uint64_t)v592;
            v630 = v587;
            v627 = v30;
            sub_239418A80();
          }
          v56 = v37;
          v57 = operator new(4 * v55);
          v58 = v578;
          v37 = v56;
          v31 = &v57[4 * v53];
          *(_DWORD *)v31 = v37;
          v587 = (uint64_t)(v31 + 4);
          if (v19 == v578)
            goto LABEL_72;
        }
        else
        {
          v57 = 0;
          v58 = v578;
          v31 = (char *)(4 * v53);
          *(_DWORD *)(4 * v53) = v37;
          v587 = 4 * v53 + 4;
          if (v19 == v578)
            goto LABEL_72;
        }
        v59 = v19 - 4 - v58;
        if (v59 >= 0xBC)
        {
          if (&v57[v19 - v578 - 4 - (v59 & 0xFFFFFFFFFFFFFFFCLL)] <= &v57[v19 - v578 - 4]
            && &v19[-(v59 & 0xFFFFFFFFFFFFFFFCLL) - 4] <= v19 - 4
            && (unint64_t)(v578 - v57) >= 0x20)
          {
            v101 = (v59 >> 2) + 1;
            v102 = 4 * (v101 & 0x7FFFFFFFFFFFFFF8);
            v60 = &v19[-v102];
            v31 -= v102;
            v103 = &v57[4 * v53 - 16];
            v104 = (__int128 *)(v19 - 16);
            v105 = v101 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v106 = *v104;
              *(v103 - 1) = *(v104 - 1);
              *v103 = v106;
              v103 -= 2;
              v104 -= 2;
              v105 -= 8;
            }
            while (v105);
            v58 = v578;
            if (v101 == (v101 & 0x7FFFFFFFFFFFFFF8))
              goto LABEL_72;
          }
          else
          {
            v60 = v19;
            v58 = v578;
          }
        }
        else
        {
          v60 = v19;
        }
        do
        {
          v61 = *((_DWORD *)v60 - 1);
          v60 -= 4;
          *((_DWORD *)v31 - 1) = v61;
          v31 -= 4;
        }
        while (v60 != v58);
LABEL_72:
        v629 = v31;
        v598 = &v57[4 * v55];
        v631 = v598;
        v33 = v591;
        if (v58)
        {
          v62 = v37;
          operator delete(v58);
          v37 = v62;
        }
        v578 = v31;
        v35 = __p;
LABEL_75:
        if (!*(_BYTE *)(v33 + 200))
        {
          v633 = (uint64_t)v592;
          v630 = v587;
          v627 = v30;
          sub_2394875CC();
        }
        v63 = (_DWORD *)(*(_QWORD *)(v33 + 176) + 12 * v37);
        v595 = v63;
        if ((unint64_t)v27 < v21)
        {
          *v27 = *v63;
          v30 = v27 + 1;
          if ((unint64_t)(v27 + 1) < v21)
            goto LABEL_78;
          goto LABEL_95;
        }
        v64 = v21;
        v65 = ((char *)v27 - v32) >> 2;
        v66 = v65 + 1;
        if ((unint64_t)(v65 + 1) >> 62)
          goto LABEL_696;
        if ((uint64_t)(v21 - (_QWORD)v32) >> 1 > v66)
          v66 = (uint64_t)(v21 - (_QWORD)v32) >> 1;
        if (v21 - (unint64_t)v32 >= 0x7FFFFFFFFFFFFFFCLL)
          v67 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v67 = v66;
        if (v67)
        {
          if (v67 >> 62)
            goto LABEL_700;
          v68 = operator new(4 * v67);
          v63 = v595;
          v69 = &v68[4 * v65];
          *v69 = *v595;
          v30 = v69 + 1;
          if (v27 != (_DWORD *)v32)
          {
LABEL_89:
            v70 = (char *)(v27 - 1) - v32;
            if (v70 < 0xBC
              || &v68[(char *)v27 - v32 - 4 - (v70 & 0xFFFFFFFFFFFFFFFCLL)] > &v68[(char *)v27 - v32 - 4]
              || (_DWORD *)((char *)v27 - (v70 & 0xFFFFFFFFFFFFFFFCLL) - 4) > v27 - 1
              || (unint64_t)(v32 - v68) < 0x20)
            {
              v71 = (char *)v27;
              v33 = v591;
            }
            else
            {
              v89 = (v70 >> 2) + 1;
              v90 = 4 * (v89 & 0x7FFFFFFFFFFFFFF8);
              v71 = (char *)&v27[v90 / 0xFFFFFFFFFFFFFFFCLL];
              v69 = (_DWORD *)((char *)v69 - v90);
              v91 = &v68[4 * v65 - 16];
              v92 = (__int128 *)(v27 - 4);
              v93 = v89 & 0x7FFFFFFFFFFFFFF8;
              do
              {
                v94 = *v92;
                *(v91 - 1) = *(v92 - 1);
                *v91 = v94;
                v91 -= 2;
                v92 -= 2;
                v93 -= 8;
              }
              while (v93);
              v33 = v591;
              if (v89 == (v89 & 0x7FFFFFFFFFFFFFF8))
              {
LABEL_92:
                v21 = (unint64_t)&v68[4 * v67];
                if (!v32)
                  goto LABEL_94;
LABEL_93:
                operator delete(v32);
                v63 = v595;
                goto LABEL_94;
              }
            }
            do
            {
              v72 = *((_DWORD *)v71 - 1);
              v71 -= 4;
              *--v69 = v72;
            }
            while (v71 != v32);
            goto LABEL_92;
          }
        }
        else
        {
          v68 = 0;
          v69 = (_DWORD *)(4 * v65);
          *(_DWORD *)(4 * v65) = *v63;
          v30 = (_DWORD *)(4 * v65 + 4);
          if (v27 != (_DWORD *)v32)
            goto LABEL_89;
        }
        v33 = v591;
        v21 = (unint64_t)&v68[4 * v67];
        if (v32)
          goto LABEL_93;
LABEL_94:
        v32 = (char *)v69;
        v35 = __p;
        if ((unint64_t)v30 < v21)
        {
LABEL_78:
          *v30++ = v63[1];
          if ((unint64_t)v30 >= v21)
            goto LABEL_115;
          goto LABEL_27;
        }
LABEL_95:
        v64 = v21;
        v73 = ((char *)v30 - v32) >> 2;
        v74 = v73 + 1;
        if ((unint64_t)(v73 + 1) >> 62)
          goto LABEL_696;
        if ((uint64_t)(v21 - (_QWORD)v32) >> 1 > v74)
          v74 = (uint64_t)(v21 - (_QWORD)v32) >> 1;
        if (v21 - (unint64_t)v32 >= 0x7FFFFFFFFFFFFFFCLL)
          v75 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v75 = v74;
        if (v75)
        {
          if (v75 >> 62)
            goto LABEL_700;
          v76 = operator new(4 * v75);
          v63 = v595;
          v77 = &v76[4 * v73];
          *(_DWORD *)v77 = v595[1];
          v78 = (uint64_t)(v77 + 4);
          if (v30 == (_DWORD *)v32)
            goto LABEL_112;
        }
        else
        {
          v76 = 0;
          v77 = (char *)(4 * v73);
          *(_DWORD *)(4 * v73) = v63[1];
          v78 = 4 * v73 + 4;
          if (v30 == (_DWORD *)v32)
            goto LABEL_112;
        }
        v79 = (char *)(v30 - 1) - v32;
        if (v79 < 0xBC)
        {
          v80 = (char *)v30;
          goto LABEL_111;
        }
        if (&v76[(char *)v30 - v32 - 4 - (v79 & 0xFFFFFFFFFFFFFFFCLL)] > &v76[(char *)v30 - v32 - 4])
        {
          v80 = (char *)v30;
          do
          {
LABEL_111:
            v81 = *((_DWORD *)v80 - 1);
            v80 -= 4;
            *((_DWORD *)v77 - 1) = v81;
            v77 -= 4;
          }
          while (v80 != v32);
          goto LABEL_112;
        }
        if ((_DWORD *)((char *)v30 - (v79 & 0xFFFFFFFFFFFFFFFCLL) - 4) > v30 - 1)
        {
          v80 = (char *)v30;
          goto LABEL_111;
        }
        if ((unint64_t)(v32 - v76) < 0x20)
        {
          v80 = (char *)v30;
          goto LABEL_111;
        }
        v107 = (v79 >> 2) + 1;
        v108 = 4 * (v107 & 0x7FFFFFFFFFFFFFF8);
        v80 = (char *)&v30[v108 / 0xFFFFFFFFFFFFFFFCLL];
        v77 -= v108;
        v109 = &v76[4 * v73 - 16];
        v110 = (__int128 *)(v30 - 4);
        v111 = v107 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v112 = *v110;
          *(v109 - 1) = *(v110 - 1);
          *v109 = v112;
          v109 -= 2;
          v110 -= 2;
          v111 -= 8;
        }
        while (v111);
        if (v107 != (v107 & 0x7FFFFFFFFFFFFFF8))
          goto LABEL_111;
LABEL_112:
        v21 = (unint64_t)&v76[4 * v75];
        if (v32)
        {
          operator delete(v32);
          v63 = v595;
        }
        v32 = v77;
        v30 = (_DWORD *)v78;
        v33 = v591;
        v35 = __p;
        if ((unint64_t)v30 >= v21)
        {
LABEL_115:
          v64 = v21;
          v82 = ((char *)v30 - v32) >> 2;
          v83 = v82 + 1;
          if ((unint64_t)(v82 + 1) >> 62)
          {
LABEL_696:
            v633 = (uint64_t)v592;
            v630 = v587;
            v627 = v30;
            v628 = v64;
            v626 = v32;
            sub_2394189F8();
          }
          if ((uint64_t)(v21 - (_QWORD)v32) >> 1 > v83)
            v83 = (uint64_t)(v21 - (_QWORD)v32) >> 1;
          if (v21 - (unint64_t)v32 >= 0x7FFFFFFFFFFFFFFCLL)
            v84 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v84 = v83;
          if (v84)
          {
            if (v84 >> 62)
            {
LABEL_700:
              v633 = (uint64_t)v592;
              v630 = v587;
              v627 = v30;
              v628 = v64;
              v626 = v32;
              sub_239418A80();
            }
            v85 = operator new(4 * v84);
            v33 = v591;
            v36 = &v85[4 * v82];
            *v36 = v595[2];
            v27 = v36 + 1;
            if (v30 == (_DWORD *)v32)
              goto LABEL_129;
LABEL_126:
            v86 = (char *)(v30 - 1) - v32;
            if (v86 < 0xBC)
            {
              v87 = (char *)v30;
              goto LABEL_128;
            }
            if (&v85[(char *)v30 - v32 - 4 - (v86 & 0xFFFFFFFFFFFFFFFCLL)] > &v85[(char *)v30 - v32 - 4])
            {
              v87 = (char *)v30;
              goto LABEL_128;
            }
            if ((_DWORD *)((char *)v30 - (v86 & 0xFFFFFFFFFFFFFFFCLL) - 4) > v30 - 1)
            {
              v87 = (char *)v30;
              goto LABEL_128;
            }
            if ((unint64_t)(v32 - v85) < 0x20)
            {
              v87 = (char *)v30;
              goto LABEL_128;
            }
            v113 = (v86 >> 2) + 1;
            v114 = 4 * (v113 & 0x7FFFFFFFFFFFFFF8);
            v87 = (char *)&v30[v114 / 0xFFFFFFFFFFFFFFFCLL];
            v36 = (_DWORD *)((char *)v36 - v114);
            v115 = &v85[4 * v82 - 16];
            v116 = (__int128 *)(v30 - 4);
            v117 = v113 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v118 = *v116;
              *(v115 - 1) = *(v116 - 1);
              *v115 = v118;
              v115 -= 2;
              v116 -= 2;
              v117 -= 8;
            }
            while (v117);
            if (v113 != (v113 & 0x7FFFFFFFFFFFFFF8))
            {
              do
              {
LABEL_128:
                v88 = *((_DWORD *)v87 - 1);
                v87 -= 4;
                *--v36 = v88;
              }
              while (v87 != v32);
            }
          }
          else
          {
            v85 = 0;
            v36 = (_DWORD *)(4 * v82);
            *(_DWORD *)(4 * v82) = v63[2];
            v27 = (_DWORD *)(4 * v82 + 4);
            if (v30 != (_DWORD *)v32)
              goto LABEL_126;
          }
LABEL_129:
          v21 = (unint64_t)&v85[4 * v84];
          if (v32)
            operator delete(v32);
          v35 = __p;
          goto LABEL_28;
        }
LABEL_27:
        *v30 = v63[2];
        v36 = v32;
        v27 = v30 + 1;
LABEL_28:
        v628 = v21;
        v626 = v36;
        v19 = (char *)v587;
        v34 = *v584;
        v30 = v27;
        v18 = v592;
        v32 = (char *)v36;
        if (!*v584)
          goto LABEL_24;
      }
      v50 = v18;
      v33 = v591;
      v21 = v38;
      v27 = v581;
      goto LABEL_50;
    }
LABEL_24:
    v29 = v574 + 40;
    ++v576;
  }
  while (v574 + 40 != v571);
  v633 = (uint64_t)v592;
  v630 = v587;
  v627 = v30;
  v119 = *v564;
  v570 = v564[1];
  if (*v564 != v570)
    goto LABEL_170;
LABEL_315:
  v212 = v591;
  if (!*(_BYTE *)(v591 + 168))
    sub_2394875CC();
  v213 = -858993459 * ((unint64_t)(a1[1] - *a1) >> 3) - 858993459 * ((unint64_t)(v564[1] - *v564) >> 3);
  if (v18 < v601)
  {
    *(_DWORD *)v18 = v213;
    v214 = (uint64_t)(v18 + 4);
    goto LABEL_339;
  }
  v215 = (v18 - v28) >> 2;
  v216 = v215 + 1;
  if ((unint64_t)(v215 + 1) >> 62)
    sub_2394189F8();
  if ((v601 - v28) >> 1 > v216)
    v216 = (v601 - v28) >> 1;
  if ((unint64_t)(v601 - v28) >= 0x7FFFFFFFFFFFFFFCLL)
    v217 = 0x3FFFFFFFFFFFFFFFLL;
  else
    v217 = v216;
  if (v217)
  {
    if (v217 >> 62)
      sub_239418A80();
    v218 = operator new(4 * v217);
    v219 = &v218[4 * v215];
    v220 = &v218[4 * v217];
    *v219 = v213;
    v214 = (uint64_t)(v219 + 1);
    v221 = v18 - v28;
    if (v18 == v28)
      goto LABEL_337;
  }
  else
  {
    v218 = 0;
    v219 = (_DWORD *)(4 * v215);
    v220 = 0;
    *(_DWORD *)(4 * v215) = v213;
    v214 = 4 * v215 + 4;
    v221 = v18 - v28;
    if (v18 == v28)
      goto LABEL_337;
  }
  v222 = v221 - 4;
  if (v222 < 0x2C)
  {
    v223 = v18;
    goto LABEL_336;
  }
  if ((unint64_t)(v28 - v218) < 0x20)
  {
    v223 = v18;
    do
    {
LABEL_336:
      v230 = *((_DWORD *)v223 - 1);
      v223 -= 4;
      *--v219 = v230;
    }
    while (v223 != v28);
    goto LABEL_337;
  }
  v224 = (v222 >> 2) + 1;
  v225 = 4 * (v224 & 0x7FFFFFFFFFFFFFF8);
  v223 = &v18[-v225];
  v219 = (_DWORD *)((char *)v219 - v225);
  v226 = &v218[4 * v215 - 16];
  v227 = (__int128 *)(v18 - 16);
  v228 = v224 & 0x7FFFFFFFFFFFFFF8;
  do
  {
    v229 = *v227;
    *(v226 - 1) = *(v227 - 1);
    *v226 = v229;
    v226 -= 2;
    v227 -= 2;
    v228 -= 8;
  }
  while (v228);
  if (v224 != (v224 & 0x7FFFFFFFFFFFFFF8))
    goto LABEL_336;
LABEL_337:
  v632 = v219;
  v634 = v220;
  if (v28)
    operator delete(v28);
LABEL_339:
  v633 = v214;
  v232 = *(char **)(v591 + 152);
  v231 = *(_QWORD *)(v591 + 160);
  if ((unint64_t)v232 >= v231)
  {
    v234 = *v567;
    v235 = v232 - *v567;
    v236 = v235 >> 3;
    v237 = (v235 >> 3) + 1;
    if (v237 >> 61)
      sub_2394189F8();
    v238 = v231 - (_QWORD)v234;
    if (v238 >> 2 > v237)
      v237 = v238 >> 2;
    if ((unint64_t)v238 >= 0x7FFFFFFFFFFFFFF8)
      v239 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v239 = v237;
    if (v239)
    {
      if (v239 >> 61)
        sub_239418A80();
      v240 = operator new(8 * v239);
    }
    else
    {
      v240 = 0;
    }
    v241 = &v240[8 * v236];
    v242 = &v240[8 * v239];
    *v241 = 0x3F80000000000000;
    v233 = (char *)(v241 + 1);
    if (v232 != v234)
    {
      v243 = v232 - v234 - 8;
      if (v243 < 0x58)
        goto LABEL_739;
      if ((unint64_t)(v232 - v240 - v235) < 0x20)
        goto LABEL_739;
      v244 = (v243 >> 3) + 1;
      v245 = 8 * (v244 & 0x3FFFFFFFFFFFFFFCLL);
      v246 = &v232[-v245];
      v241 = (_QWORD *)((char *)v241 - v245);
      v247 = &v240[8 * v236 - 16];
      v248 = v232 - 16;
      v249 = v244 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v250 = *(_OWORD *)v248;
        *(v247 - 1) = *((_OWORD *)v248 - 1);
        *v247 = v250;
        v247 -= 2;
        v248 -= 32;
        v249 -= 4;
      }
      while (v249);
      v232 = v246;
      if (v244 != (v244 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_739:
        do
        {
          v251 = *((_QWORD *)v232 - 1);
          v232 -= 8;
          *--v241 = v251;
        }
        while (v232 != v234);
      }
      v232 = *v567;
    }
    *(_QWORD *)(v591 + 144) = v241;
    *(_QWORD *)(v591 + 152) = v233;
    *(_QWORD *)(v591 + 160) = v242;
    if (v232)
      operator delete(v232);
  }
  else
  {
    *(_QWORD *)v232 = 0x3F80000000000000;
    v233 = v232 + 8;
  }
  *(_QWORD *)(v591 + 152) = v233;
  v252 = ((unint64_t)&v233[-*(_QWORD *)(v591 + 144)] >> 3) - 1;
  v253 = (char *)v627;
  if ((unint64_t)v627 < v628)
  {
    *v627 = v252;
    v254 = (uint64_t)(v253 + 4);
    goto LABEL_382;
  }
  v255 = (char *)v626;
  v256 = (char *)v627 - (_BYTE *)v626;
  v257 = ((char *)v627 - (_BYTE *)v626) >> 2;
  v258 = v257 + 1;
  if ((unint64_t)(v257 + 1) >> 62)
    sub_2394189F8();
  v259 = v628 - (_QWORD)v626;
  if ((uint64_t)(v628 - (_QWORD)v626) >> 1 > v258)
    v258 = v259 >> 1;
  if ((unint64_t)v259 >= 0x7FFFFFFFFFFFFFFCLL)
    v260 = 0x3FFFFFFFFFFFFFFFLL;
  else
    v260 = v258;
  if (v260)
  {
    if (v260 >> 62)
      sub_239418A80();
    v261 = (char *)operator new(4 * v260);
    v262 = &v261[4 * v257];
    v263 = &v261[4 * v260];
    *(_DWORD *)v262 = v252;
    v254 = (uint64_t)(v262 + 4);
    v264 = v253 - v255;
    if (v253 == v255)
      goto LABEL_380;
    goto LABEL_374;
  }
  v261 = 0;
  v262 = (char *)(4 * v257);
  v263 = 0;
  *(_DWORD *)(4 * v257) = v252;
  v254 = 4 * v257 + 4;
  v264 = v253 - v255;
  if (v253 != v255)
  {
LABEL_374:
    v265 = v264 - 4;
    if (v265 < 0x2C)
      goto LABEL_740;
    if ((unint64_t)(v253 - v261 - v256) < 0x20)
      goto LABEL_740;
    v266 = (v265 >> 2) + 1;
    v267 = 4 * (v266 & 0x7FFFFFFFFFFFFFF8);
    v268 = &v253[-v267];
    v262 -= v267;
    v269 = &v261[4 * v257 - 16];
    v270 = v253 - 16;
    v271 = v266 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v272 = *(_OWORD *)v270;
      *((_OWORD *)v269 - 1) = *((_OWORD *)v270 - 1);
      *(_OWORD *)v269 = v272;
      v269 -= 32;
      v270 -= 32;
      v271 -= 8;
    }
    while (v271);
    v253 = v268;
    if (v266 != (v266 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_740:
      do
      {
        v273 = *((_DWORD *)v253 - 1);
        v253 -= 4;
        *((_DWORD *)v262 - 1) = v273;
        v262 -= 4;
      }
      while (v253 != v255);
    }
  }
LABEL_380:
  v626 = v262;
  v628 = (unint64_t)v263;
  if (v255)
  {
    operator delete(v255);
    v233 = *(char **)(v591 + 152);
  }
LABEL_382:
  v627 = (_DWORD *)v254;
  v274 = *(_QWORD *)(v591 + 160);
  if ((unint64_t)v233 < v274)
  {
    *(_QWORD *)v233 = 1065353216;
    v275 = v233 + 8;
    goto LABEL_406;
  }
  v276 = *v567;
  v277 = v233 - *v567;
  v278 = v277 >> 3;
  v279 = (v277 >> 3) + 1;
  if (v279 >> 61)
    sub_2394189F8();
  v280 = v274 - (_QWORD)v276;
  if (v280 >> 2 > v279)
    v279 = v280 >> 2;
  if ((unint64_t)v280 >= 0x7FFFFFFFFFFFFFF8)
    v281 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v281 = v279;
  if (v281)
  {
    if (v281 >> 61)
      sub_239418A80();
    v282 = operator new(8 * v281);
  }
  else
  {
    v282 = 0;
  }
  v283 = &v282[8 * v278];
  v284 = &v282[8 * v281];
  *v283 = 1065353216;
  v275 = (char *)(v283 + 1);
  if (v233 != v276)
  {
    v285 = v233 - v276 - 8;
    if (v285 >= 0x58)
    {
      if ((unint64_t)(v233 - v282 - v277) >= 0x20)
      {
        v287 = (v285 >> 3) + 1;
        v288 = 8 * (v287 & 0x3FFFFFFFFFFFFFFCLL);
        v286 = &v233[-v288];
        v283 = (_QWORD *)((char *)v283 - v288);
        v289 = &v282[8 * v278 - 16];
        v290 = v233 - 16;
        v291 = v287 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v292 = *(_OWORD *)v290;
          *(v289 - 1) = *((_OWORD *)v290 - 1);
          *v289 = v292;
          v289 -= 2;
          v290 -= 32;
          v291 -= 4;
        }
        while (v291);
        if (v287 == (v287 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_403;
      }
      else
      {
        v286 = v233;
      }
    }
    else
    {
      v286 = v233;
    }
    do
    {
      v293 = *((_QWORD *)v286 - 1);
      v286 -= 8;
      *--v283 = v293;
    }
    while (v286 != v276);
LABEL_403:
    v233 = *v567;
  }
  *(_QWORD *)(v591 + 144) = v283;
  *(_QWORD *)(v591 + 152) = v275;
  *(_QWORD *)(v591 + 160) = v284;
  if (v233)
    operator delete(v233);
LABEL_406:
  *(_QWORD *)(v591 + 152) = v275;
  v294 = ((unint64_t)&v275[-*(_QWORD *)(v591 + 144)] >> 3) - 1;
  v295 = (char *)v627;
  if ((unint64_t)v627 < v628)
  {
    *v627 = v294;
    v296 = (uint64_t)(v295 + 4);
    goto LABEL_427;
  }
  v297 = (char *)v626;
  v298 = (char *)v627 - (_BYTE *)v626;
  v299 = ((char *)v627 - (_BYTE *)v626) >> 2;
  v300 = v299 + 1;
  if ((unint64_t)(v299 + 1) >> 62)
    sub_2394189F8();
  v301 = v628 - (_QWORD)v626;
  if ((uint64_t)(v628 - (_QWORD)v626) >> 1 > v300)
    v300 = v301 >> 1;
  if ((unint64_t)v301 >= 0x7FFFFFFFFFFFFFFCLL)
    v302 = 0x3FFFFFFFFFFFFFFFLL;
  else
    v302 = v300;
  if (v302)
  {
    if (v302 >> 62)
      sub_239418A80();
    v303 = (char *)operator new(4 * v302);
    v304 = &v303[4 * v299];
    v305 = &v303[4 * v302];
    *(_DWORD *)v304 = v294;
    v296 = (uint64_t)(v304 + 4);
    v306 = v295 - v297;
    if (v295 == v297)
      goto LABEL_425;
    goto LABEL_419;
  }
  v303 = 0;
  v304 = (char *)(4 * v299);
  v305 = 0;
  *(_DWORD *)(4 * v299) = v294;
  v296 = 4 * v299 + 4;
  v306 = v295 - v297;
  if (v295 != v297)
  {
LABEL_419:
    v307 = v306 - 4;
    if (v307 < 0x2C)
      goto LABEL_741;
    if ((unint64_t)(v295 - v303 - v298) < 0x20)
      goto LABEL_741;
    v308 = (v307 >> 2) + 1;
    v309 = 4 * (v308 & 0x7FFFFFFFFFFFFFF8);
    v310 = &v295[-v309];
    v304 -= v309;
    v311 = &v303[4 * v299 - 16];
    v312 = v295 - 16;
    v313 = v308 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v314 = *(_OWORD *)v312;
      *((_OWORD *)v311 - 1) = *((_OWORD *)v312 - 1);
      *(_OWORD *)v311 = v314;
      v311 -= 32;
      v312 -= 32;
      v313 -= 8;
    }
    while (v313);
    v295 = v310;
    if (v308 != (v308 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_741:
      do
      {
        v315 = *((_DWORD *)v295 - 1);
        v295 -= 4;
        *((_DWORD *)v304 - 1) = v315;
        v304 -= 4;
      }
      while (v295 != v297);
    }
  }
LABEL_425:
  v626 = v304;
  v628 = (unint64_t)v305;
  if (v297)
  {
    operator delete(v297);
    v275 = *(char **)(v591 + 152);
  }
LABEL_427:
  v627 = (_DWORD *)v296;
  v316 = *(_QWORD *)(v591 + 160);
  if ((unint64_t)v275 < v316)
  {
    __asm { FMOV            V0.2S, #1.0 }
    *(_QWORD *)v275 = _D0;
    v320 = v275 + 8;
    goto LABEL_451;
  }
  v321 = *v567;
  v322 = v275 - *v567;
  v323 = v322 >> 3;
  v324 = (v322 >> 3) + 1;
  if (v324 >> 61)
    sub_2394189F8();
  v325 = v316 - (_QWORD)v321;
  if (v325 >> 2 > v324)
    v324 = v325 >> 2;
  if ((unint64_t)v325 >= 0x7FFFFFFFFFFFFFF8)
    v326 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v326 = v324;
  if (v326)
  {
    if (v326 >> 61)
      sub_239418A80();
    v327 = operator new(8 * v326);
  }
  else
  {
    v327 = 0;
  }
  v328 = &v327[8 * v323];
  v329 = &v327[8 * v326];
  __asm { FMOV            V0.2S, #1.0 }
  *v328 = _D0;
  v320 = (char *)(v328 + 1);
  if (v275 != v321)
  {
    v331 = v275 - v321 - 8;
    if (v331 >= 0x58)
    {
      if ((unint64_t)(v275 - &v327[v322]) >= 0x20)
      {
        v333 = (v331 >> 3) + 1;
        v334 = 8 * (v333 & 0x3FFFFFFFFFFFFFFCLL);
        v332 = &v275[-v334];
        v328 = (_QWORD *)((char *)v328 - v334);
        v335 = &v327[8 * v323 - 16];
        v336 = v275 - 16;
        v337 = v333 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v338 = *(_OWORD *)v336;
          *(v335 - 1) = *((_OWORD *)v336 - 1);
          *v335 = v338;
          v335 -= 2;
          v336 -= 32;
          v337 -= 4;
        }
        while (v337);
        if (v333 == (v333 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_448;
      }
      else
      {
        v332 = v275;
      }
    }
    else
    {
      v332 = v275;
    }
    do
    {
      v339 = *((_QWORD *)v332 - 1);
      v332 -= 8;
      *--v328 = v339;
    }
    while (v332 != v321);
LABEL_448:
    v275 = *v567;
  }
  *(_QWORD *)(v591 + 144) = v328;
  *(_QWORD *)(v591 + 152) = v320;
  *(_QWORD *)(v591 + 160) = v329;
  if (v275)
    operator delete(v275);
LABEL_451:
  *(_QWORD *)(v591 + 152) = v320;
  v340 = ((unint64_t)&v320[-*(_QWORD *)(v591 + 144)] >> 3) - 1;
  v341 = (char *)v627;
  if ((unint64_t)v627 < v628)
  {
    *v627 = v340;
    v342 = (uint64_t)(v341 + 4);
    goto LABEL_472;
  }
  v343 = (char *)v626;
  v344 = (char *)v627 - (_BYTE *)v626;
  v345 = ((char *)v627 - (_BYTE *)v626) >> 2;
  v346 = v345 + 1;
  if ((unint64_t)(v345 + 1) >> 62)
    sub_2394189F8();
  v347 = v628 - (_QWORD)v626;
  if ((uint64_t)(v628 - (_QWORD)v626) >> 1 > v346)
    v346 = v347 >> 1;
  if ((unint64_t)v347 >= 0x7FFFFFFFFFFFFFFCLL)
    v348 = 0x3FFFFFFFFFFFFFFFLL;
  else
    v348 = v346;
  if (v348)
  {
    if (v348 >> 62)
      sub_239418A80();
    v349 = (char *)operator new(4 * v348);
    v350 = &v349[4 * v345];
    v351 = &v349[4 * v348];
    *(_DWORD *)v350 = v340;
    v342 = (uint64_t)(v350 + 4);
    v352 = v341 - v343;
    if (v341 == v343)
      goto LABEL_470;
    goto LABEL_464;
  }
  v349 = 0;
  v350 = (char *)(4 * v345);
  v351 = 0;
  *(_DWORD *)(4 * v345) = v340;
  v342 = 4 * v345 + 4;
  v352 = v341 - v343;
  if (v341 != v343)
  {
LABEL_464:
    v353 = v352 - 4;
    if (v353 < 0x2C)
      goto LABEL_742;
    if ((unint64_t)(v341 - v349 - v344) < 0x20)
      goto LABEL_742;
    v354 = (v353 >> 2) + 1;
    v355 = 4 * (v354 & 0x7FFFFFFFFFFFFFF8);
    v356 = &v341[-v355];
    v350 -= v355;
    v357 = &v349[4 * v345 - 16];
    v358 = v341 - 16;
    v359 = v354 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v360 = *(_OWORD *)v358;
      *((_OWORD *)v357 - 1) = *((_OWORD *)v358 - 1);
      *(_OWORD *)v357 = v360;
      v357 -= 32;
      v358 -= 32;
      v359 -= 8;
    }
    while (v359);
    v341 = v356;
    if (v354 != (v354 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_742:
      do
      {
        v361 = *((_DWORD *)v341 - 1);
        v341 -= 4;
        *((_DWORD *)v350 - 1) = v361;
        v350 -= 4;
      }
      while (v341 != v343);
    }
  }
LABEL_470:
  v626 = v350;
  v628 = (unint64_t)v351;
  if (v343)
  {
    operator delete(v343);
    v320 = *(char **)(v591 + 152);
  }
LABEL_472:
  v627 = (_DWORD *)v342;
  v362 = *v567;
  v363 = (char *)v623;
  if (*v567 == v320)
    goto LABEL_486;
  v364 = v320 - v362 - 8;
  if (v364 < 0x38
    || ((v365 = (v364 & 0xFFFFFFFFFFFFFFF8) + 8, v623 < &v362[v365]) ? (_CF = v362 >= (char *)v623 + v365) : (_CF = 1),
        !_CF))
  {
    v368 = 0;
    v369 = *v567;
LABEL_484:
    v377 = &v363[8 * v368 + 4];
    do
    {
      *((_DWORD *)v377 - 1) = *(_DWORD *)v369;
      *(_DWORD *)v377 = *((_DWORD *)v369 + 1);
      v377 += 8;
      v369 += 8;
    }
    while (v369 != v320);
    goto LABEL_486;
  }
  v367 = (v364 >> 3) + 1;
  v368 = v367 & 0x3FFFFFFFFFFFFFF8;
  v369 = &v362[8 * (v367 & 0x3FFFFFFFFFFFFFF8)];
  v370 = (char *)v623 + 32;
  v371 = (__int128 *)(v362 + 32);
  v372 = v367 & 0x3FFFFFFFFFFFFFF8;
  do
  {
    v374 = *(v371 - 2);
    v373 = *(v371 - 1);
    v376 = *v371;
    v375 = v371[1];
    v371 += 4;
    *(v370 - 2) = v374;
    *(v370 - 1) = v373;
    *v370 = v376;
    v370[1] = v375;
    v370 += 4;
    v372 -= 8;
  }
  while (v372);
  if (v367 != v368)
    goto LABEL_484;
LABEL_486:
  v622 = 0;
  v378 = sub_239933AAC(&v640, (unint64_t *)&v639, &v638, &v636, (unsigned int *)&v635 + 1, (float *)&v637, v632, v626, (unint64_t)v363, (uint64_t)v569, &v622);
  if ((v378 & 1) == 0)
    goto LABEL_685;
  LODWORD(v609.__r_.__value_.__l.__data_) = v636;
  HIDWORD(v609.__r_.__value_.__r.__words[0]) = v636;
  v379 = (uint64_t)(v568[1] - *v568) >> 3;
  if (v622 <= v379)
  {
    if (v622 < v379)
      v568[1] = *v568 + 8 * v622;
  }
  else
  {
    sub_23951A0B4(v568, v622 - v379, (uint64_t *)&v609);
  }
  if (*(_BYTE *)(v591 + 232))
  {
    v381 = *(_QWORD *)(v591 + 208);
    v380 = *(_QWORD *)(v591 + 216);
  }
  else
  {
    v381 = 0;
    v380 = 0;
    *(_QWORD *)(v591 + 208) = 0;
    *(_QWORD *)(v591 + 216) = 0;
    *(_QWORD *)(v591 + 224) = 0;
    *(_BYTE *)(v591 + 232) = 1;
  }
  v382 = 0x823EE08FB823EE09 * ((v380 - v381) >> 4);
  __pd = (uint64_t *)(v591 + 208);
  v580 = v378;
  if (v622 > v382)
  {
    sub_2395595C4(v591 + 208, v622 - v382);
    i = *(_QWORD *)(v591 + 216);
    v384 = *__pd;
    if (*__pd == i)
      goto LABEL_526;
    goto LABEL_503;
  }
  if (v622 >= v382)
  {
    i = v380;
    v384 = *__pd;
    if (*__pd == v380)
      goto LABEL_526;
    goto LABEL_503;
  }
  for (i = v381 + 912 * v622; v380 != i; v380 = sub_2394EF0D0(v380 - 912))
    ;
  *(_QWORD *)(v591 + 216) = i;
  v384 = *__pd;
  if (*__pd != i)
  {
LABEL_503:
    v385 = 0;
    do
    {
      std::to_string(&v609, v385);
      v386 = std::string::insert(&v609, 0, "texture_");
      v387 = v386->__r_.__value_.__r.__words[0];
      *(_QWORD *)v641 = v386->__r_.__value_.__l.__size_;
      *(_QWORD *)&v641[7] = *(std::string::size_type *)((char *)&v386->__r_.__value_.__r.__words[1] + 7);
      v388 = HIBYTE(v386->__r_.__value_.__r.__words[2]);
      v386->__r_.__value_.__l.__size_ = 0;
      v386->__r_.__value_.__r.__words[2] = 0;
      v386->__r_.__value_.__r.__words[0] = 0;
      if (*(char *)(v384 + 23) < 0)
        operator delete(*(void **)v384);
      *(_QWORD *)v384 = v387;
      *(_QWORD *)(v384 + 8) = *(_QWORD *)v641;
      *(_QWORD *)(v384 + 15) = *(_QWORD *)&v641[7];
      *(_BYTE *)(v384 + 23) = v388;
      if (SHIBYTE(v609.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v609.__r_.__value_.__l.__data_);
      v389 = (int *)(*v568 + 8 * v385);
      v620 = *v389;
      v621 = v389[1];
      sub_2398D8228(21);
      *(_QWORD *)v641 = &off_250ADBEA0;
      sub_239469644((uint64_t)&v609, (uint64_t)&v641[8]);
      v390 = nullsub_4(&v611);
      v391 = (std::__shared_weak_count *)v609.__r_.__value_.__r.__words[2];
      if (v609.__r_.__value_.__r.__words[2])
      {
        v392 = (unint64_t *)(v609.__r_.__value_.__r.__words[2] + 8);
        do
          v393 = __ldaxr(v392);
        while (__stlxr(v393 - 1, v392));
        if (!v393)
        {
          ((void (*)(std::__shared_weak_count *, __n128))v391->__on_zero_shared)(v391, v390);
          std::__shared_weak_count::__release_weak(v391);
        }
      }
      j_nullsub_4_89(&v609);
      *((_BYTE *)&v609.__r_.__value_.__s + 23) = 0;
      v609.__r_.__value_.__s.__data_[0] = 0;
      v610 = &off_250ADBEA0;
      sub_239827500((uint64_t)&v611, (uint64_t)&v641[8]);
      v619 = v642;
      v394 = (void **)(v384 + 48);
      if (*(_BYTE *)(v384 + 208))
      {
        if (*(char *)(v384 + 71) < 0)
          operator delete(*v394);
        *(_OWORD *)v394 = *(_OWORD *)&v609.__r_.__value_.__l.__data_;
        *(_QWORD *)(v384 + 64) = *((_QWORD *)&v609.__r_.__value_.__l + 2);
        *((_BYTE *)&v609.__r_.__value_.__s + 23) = 0;
        v609.__r_.__value_.__s.__data_[0] = 0;
        v395 = v611;
        v611 = 0uLL;
        v396 = *(std::__shared_weak_count **)(v384 + 88);
        *(_OWORD *)(v384 + 80) = v395;
        if (v396)
        {
          p_shared_owners = (unint64_t *)&v396->__shared_owners_;
          do
            v398 = __ldaxr(p_shared_owners);
          while (__stlxr(v398 - 1, p_shared_owners));
          if (!v398)
          {
            ((void (*)(std::__shared_weak_count *))v396->__on_zero_shared)(v396);
            std::__shared_weak_count::__release_weak(v396);
          }
        }
        v399 = v618;
        v400 = v617;
        *(_OWORD *)(v384 + 160) = v616;
        *(_OWORD *)(v384 + 176) = v400;
        v401 = v613;
        v403 = v614;
        v402 = v615;
        *(_OWORD *)(v384 + 96) = v612;
        *(_OWORD *)(v384 + 112) = v401;
        *(_QWORD *)(v384 + 192) = v399;
        *(_OWORD *)(v384 + 128) = v403;
        *(_OWORD *)(v384 + 144) = v402;
        *(_WORD *)(v384 + 200) = v619;
      }
      else
      {
        *(_QWORD *)(v384 + 64) = *((_QWORD *)&v609.__r_.__value_.__l + 2);
        *(_OWORD *)v394 = *(_OWORD *)&v609.__r_.__value_.__l.__data_;
        memset(&v609, 0, sizeof(v609));
        *(_QWORD *)(v384 + 72) = &off_250ADBEA0;
        v404 = v611;
        v611 = 0uLL;
        v405 = v612;
        v406 = v613;
        *(_OWORD *)(v384 + 80) = v404;
        *(_OWORD *)(v384 + 96) = v405;
        v407 = v614;
        v408 = v615;
        *(_OWORD *)(v384 + 112) = v406;
        *(_OWORD *)(v384 + 128) = v407;
        v409 = v616;
        v410 = v617;
        *(_QWORD *)(v384 + 192) = v618;
        *(_OWORD *)(v384 + 160) = v409;
        *(_OWORD *)(v384 + 176) = v410;
        *(_OWORD *)(v384 + 144) = v408;
        *(_WORD *)(v384 + 200) = v619;
        *(_BYTE *)(v384 + 208) = 1;
      }
      sub_239416DA0((uint64_t)&v611);
      nullsub_4(&v610);
      v212 = v591;
      if (SHIBYTE(v609.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v609.__r_.__value_.__l.__data_);
      sub_239416DA0((uint64_t)&v641[8]);
      nullsub_4(v641);
      v384 += 912;
      ++v385;
    }
    while (v384 != i);
  }
LABEL_526:
  if (*(_BYTE *)(v212 + 264))
  {
    v411 = *(_QWORD *)(v212 + 240);
    v412 = *(_QWORD *)(v212 + 248);
  }
  else
  {
    v411 = 0;
    v412 = 0;
    *(_QWORD *)(v212 + 240) = 0;
    *(_QWORD *)(v212 + 248) = 0;
    *(_QWORD *)(v212 + 256) = 0;
    *(_BYTE *)(v212 + 264) = 1;
  }
  v413 = (_QWORD *)(v591 + 208);
  v414 = (_QWORD *)(v212 + 240);
  v415 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v212 + 32) - *(_QWORD *)(v212 + 24)) >> 2);
  v416 = (v412 - v411) >> 2;
  if (v415 <= v416)
  {
    if (v415 < v416)
      *(_QWORD *)(v212 + 248) = v411
                              - 0x5555555555555554 * ((uint64_t)(*(_QWORD *)(v212 + 32) - *(_QWORD *)(v212 + 24)) >> 2);
  }
  else
  {
    sub_23942CB44(v212 + 240, v415 - v416);
  }
  v417 = v640 - 1;
  if (v640 != 1)
  {
    v418 = 0;
    v599 = v640 - 1;
    while (1)
    {
      v420 = *((unsigned int *)v629 + v418);
      v421 = v569[v418];
      v422 = *v413 + 912 * v569[v418];
      v425 = *(_QWORD *)(v422 + 40);
      v424 = (_QWORD *)(v422 + 40);
      v423 = v425;
      v427 = v424 - 1;
      v426 = (char *)*(v424 - 1);
      if ((unint64_t)v426 >= v425)
        break;
      *(_DWORD *)v426 = v420;
      v419 = (uint64_t)(v426 + 4);
LABEL_536:
      *v427 = v419;
      *(_DWORD *)(*v414 + 4 * v420) = v421;
      ++v418;
      v413 = (_QWORD *)(v591 + 208);
      if (v418 == v417)
        goto LABEL_559;
    }
    v428 = (char *)*(v424 - 2);
    v429 = (v426 - v428) >> 2;
    v430 = v429 + 1;
    if ((unint64_t)(v429 + 1) >> 62)
      sub_2394189F8();
    v431 = v423 - (_QWORD)v428;
    if (v431 >> 1 > v430)
      v430 = v431 >> 1;
    if ((unint64_t)v431 >= 0x7FFFFFFFFFFFFFFCLL)
      v432 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v432 = v430;
    v602 = v569[v418];
    if (v432)
    {
      if (v432 >> 62)
        sub_239418A80();
      v433 = *((unsigned int *)v629 + v418);
      v434 = v432;
      v435 = operator new(4 * v432);
      v420 = v433;
      v432 = v434;
      v436 = &v435[4 * v429];
      *v436 = v433;
      v419 = (uint64_t)(v436 + 1);
      if (v426 != v428)
        goto LABEL_547;
    }
    else
    {
      v435 = 0;
      v436 = (_DWORD *)(4 * v429);
      *(_DWORD *)(4 * v429) = v420;
      v419 = 4 * v429 + 4;
      if (v426 != v428)
      {
LABEL_547:
        v437 = v426 - 4 - v428;
        if (v437 >= 0x2C)
        {
          v414 = (_QWORD *)(v212 + 240);
          if ((unint64_t)(v428 - v435) >= 0x20)
          {
            v438 = (v437 >> 2) + 1;
            v439 = 4 * (v438 & 0x7FFFFFFFFFFFFFF8);
            v440 = &v426[-v439];
            v436 = (_DWORD *)((char *)v436 - v439);
            v441 = &v435[4 * v429 - 16];
            v442 = v426 - 16;
            v443 = v438 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v444 = *(_OWORD *)v442;
              *(v441 - 1) = *((_OWORD *)v442 - 1);
              *v441 = v444;
              v441 -= 2;
              v442 -= 32;
              v443 -= 8;
            }
            while (v443);
            v426 = v440;
            if (v438 == (v438 & 0x7FFFFFFFFFFFFFF8))
              goto LABEL_556;
          }
        }
        else
        {
          v414 = (_QWORD *)(v212 + 240);
        }
        do
        {
          v445 = *((_DWORD *)v426 - 1);
          v426 -= 4;
          *--v436 = v445;
        }
        while (v426 != v428);
LABEL_556:
        *(v424 - 2) = v436;
        *v427 = v419;
        *v424 = &v435[4 * v432];
        if (v428)
        {
          v446 = v420;
          operator delete(v428);
          v420 = v446;
        }
        v417 = v599;
        v421 = v602;
        goto LABEL_536;
      }
    }
    v414 = (_QWORD *)(v212 + 240);
    goto LABEL_556;
  }
LABEL_559:
  v447 = v591;
  v449 = *(_QWORD *)(v591 + 144);
  v448 = *(_QWORD *)(v591 + 152);
  v450 = v566;
  if (v449 == v448)
    goto LABEL_573;
  v451 = (char *)v623;
  v452 = v448 - v449 - 8;
  if (v452 >= 0x38
    && ((v453 = (v452 & 0xFFFFFFFFFFFFFFF8) + 8, v449 < (unint64_t)v623 + v453)
      ? (v454 = (unint64_t)v623 >= v449 + v453)
      : (v454 = 1),
        v454))
  {
    v455 = (v452 >> 3) + 1;
    v456 = v455 & 0x3FFFFFFFFFFFFFF8;
    v457 = v449 + 8 * (v455 & 0x3FFFFFFFFFFFFFF8);
    v458 = (_OWORD *)(v449 + 32);
    v459 = (__int128 *)((char *)v623 + 32);
    v460 = v455 & 0x3FFFFFFFFFFFFFF8;
    do
    {
      v462 = *(v459 - 2);
      v461 = *(v459 - 1);
      v464 = *v459;
      v463 = v459[1];
      v459 += 4;
      *(v458 - 2) = v462;
      *(v458 - 1) = v461;
      *v458 = v464;
      v458[1] = v463;
      v458 += 4;
      v460 -= 8;
    }
    while (v460);
    if (v455 == v456)
      goto LABEL_573;
  }
  else
  {
    v456 = 0;
    v457 = *(_QWORD *)(v591 + 144);
  }
  v465 = (8 * v456) | 4;
  v466 = (_DWORD *)(v449 + v465);
  v467 = &v451[v465];
  do
  {
    *(v466 - 1) = *((_DWORD *)v467 - 1);
    v468 = *(_DWORD *)v467;
    v467 += 8;
    *v466 = v468;
    v466 += 2;
    v457 += 8;
  }
  while (v457 != v448);
LABEL_573:
  v469 = *(_QWORD *)(v591 + 32) - *(_QWORD *)(v591 + 24);
  if (v469)
  {
    v470 = 0;
    v471 = 0;
    v472 = (uint64_t)(v448 - v449) >> 3;
    v590 = v472 - 3;
    v583 = v472 - 1;
    v586 = v472 - 2;
    v600 = 0xAAAAAAAAAAAAAAABLL * (v469 >> 2);
    v603 = v569[v640 - 1];
    v597 = v449;
    do
    {
      if (((*(_QWORD *)(*v450 + ((v471 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v471) & 1) == 0)
        goto LABEL_577;
      v474 = *v413 + 912 * v603;
      v477 = *(_QWORD *)(v474 + 40);
      v476 = (_QWORD *)(v474 + 40);
      v475 = v477;
      v478 = v476 - 1;
      v479 = (char *)*(v476 - 1);
      if ((unint64_t)v479 < v477)
      {
        *(_DWORD *)v479 = v471;
        v480 = (uint64_t)(v479 + 4);
        v481 = v597;
        goto LABEL_602;
      }
      v482 = (char *)*(v476 - 2);
      v483 = (v479 - v482) >> 2;
      v484 = v483 + 1;
      if ((unint64_t)(v483 + 1) >> 62)
        sub_2394189F8();
      v485 = v475 - (_QWORD)v482;
      if (v485 >> 1 > v484)
        v484 = v485 >> 1;
      if ((unint64_t)v485 >= 0x7FFFFFFFFFFFFFFCLL)
        v486 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v486 = v484;
      v594 = v470;
      if (v486)
      {
        if (v486 >> 62)
          sub_239418A80();
        v487 = operator new(4 * v486);
        v488 = &v487[4 * v483];
        *v488 = v471;
        v480 = (uint64_t)(v488 + 1);
        if (v479 == v482)
        {
LABEL_593:
          v450 = v566;
          goto LABEL_599;
        }
      }
      else
      {
        v487 = 0;
        v488 = (_DWORD *)(4 * v483);
        *(_DWORD *)(4 * v483) = v471;
        v480 = 4 * v483 + 4;
        if (v479 == v482)
          goto LABEL_593;
      }
      v489 = v479 - 4 - v482;
      if (v489 >= 0x2C)
      {
        v450 = v566;
        if ((unint64_t)(v482 - v487) >= 0x20)
        {
          v490 = (v489 >> 2) + 1;
          v491 = 4 * (v490 & 0x7FFFFFFFFFFFFFF8);
          v492 = &v479[-v491];
          v488 = (_DWORD *)((char *)v488 - v491);
          v493 = &v487[4 * v483 - 16];
          v494 = v479 - 16;
          v495 = v490 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v496 = *(_OWORD *)v494;
            *(v493 - 1) = *((_OWORD *)v494 - 1);
            *v493 = v496;
            v493 -= 2;
            v494 -= 32;
            v495 -= 8;
          }
          while (v495);
          v479 = v492;
          if (v490 == (v490 & 0x7FFFFFFFFFFFFFF8))
            goto LABEL_599;
        }
      }
      else
      {
        v450 = v566;
      }
      do
      {
        v497 = *((_DWORD *)v479 - 1);
        v479 -= 4;
        *--v488 = v497;
      }
      while (v479 != v482);
LABEL_599:
      *(v476 - 2) = v488;
      *v478 = v480;
      *v476 = &v487[4 * v486];
      if (v482)
        operator delete(v482);
      v447 = v591;
      v481 = v597;
      v470 = v594;
LABEL_602:
      *v478 = v480;
      *(_DWORD *)(*(_QWORD *)(v447 + 240) + 4 * v471) = v603;
      if (!*(_BYTE *)(v447 + 200))
        sub_2394875CC();
      v498 = (int32x2_t *)(*(_QWORD *)(v447 + 176) + 12 * v471);
      v500 = *(char **)(v447 + 144);
      v499 = *(char **)(v447 + 152);
      v501 = (v499 - v500) >> 3;
      *v498 = vadd_s32(vdup_n_s32(v501), (int32x2_t)0xFFFFFFFEFFFFFFFDLL);
      v498[1].i32[0] = v501 - 1;
      v502 = v470 + 1;
      v470 = v565;
      if (v502 == v565)
        goto LABEL_577;
      v503 = *(_QWORD *)(v447 + 160);
      if ((unint64_t)v499 >= v503)
      {
        v507 = v501 + 1;
        if ((unint64_t)(v501 + 1) >> 61)
          goto LABEL_713;
        v508 = v503 - (_QWORD)v500;
        if (v508 >> 2 > v507)
          v507 = v508 >> 2;
        if ((unint64_t)v508 >= 0x7FFFFFFFFFFFFFF8)
          v509 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v509 = v507;
        if (v509)
        {
          if (v509 >> 61)
            goto LABEL_716;
          v510 = operator new(8 * v509);
        }
        else
        {
          v510 = 0;
        }
        v511 = &v510[8 * v501];
        *v511 = *(_QWORD *)(v481 + 8 * v590);
        v504 = (char *)(v511 + 1);
        if (v499 != v500)
        {
          v512 = v499 - 8 - v500;
          if (v512 < 0x58)
            goto LABEL_743;
          if (v499 - v510 - ((v499 - v500) & 0xFFFFFFFFFFFFFFF8) < 0x20)
            goto LABEL_743;
          v513 = (v512 >> 3) + 1;
          v514 = 8 * (v513 & 0x3FFFFFFFFFFFFFFCLL);
          v515 = &v499[-v514];
          v511 = (_QWORD *)((char *)v511 - v514);
          v516 = &v510[8 * v501 - 16];
          v517 = v499 - 16;
          v518 = v513 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v519 = *(_OWORD *)v517;
            *(v516 - 1) = *((_OWORD *)v517 - 1);
            *v516 = v519;
            v516 -= 2;
            v517 -= 32;
            v518 -= 4;
          }
          while (v518);
          v499 = v515;
          if (v513 != (v513 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_743:
            do
            {
              v520 = *((_QWORD *)v499 - 1);
              v499 -= 8;
              *--v511 = v520;
            }
            while (v499 != v500);
          }
          v499 = *v567;
        }
        *(_QWORD *)(v447 + 144) = v511;
        *(_QWORD *)(v447 + 152) = v504;
        *(_QWORD *)(v447 + 160) = &v510[8 * v509];
        if (v499)
          operator delete(v499);
        v450 = v566;
        *(_QWORD *)(v447 + 152) = v504;
        v505 = *(_QWORD *)(v447 + 160);
        if ((unint64_t)v504 < v505)
        {
LABEL_606:
          *(_QWORD *)v504 = *(_QWORD *)(v481 + 8 * v586);
          v506 = v504 + 8;
          goto LABEL_650;
        }
      }
      else
      {
        *(_QWORD *)v499 = *(_QWORD *)(v481 + 8 * v590);
        v504 = v499 + 8;
        *(_QWORD *)(v447 + 152) = v499 + 8;
        v505 = *(_QWORD *)(v447 + 160);
        if ((unint64_t)(v499 + 8) < v505)
          goto LABEL_606;
      }
      v521 = *v567;
      v522 = v504 - *v567;
      v523 = v522 >> 3;
      v524 = (v522 >> 3) + 1;
      if (v524 >> 61)
        goto LABEL_713;
      v525 = v505 - (_QWORD)v521;
      if (v525 >> 2 > v524)
        v524 = v525 >> 2;
      if ((unint64_t)v525 >= 0x7FFFFFFFFFFFFFF8)
        v526 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v526 = v524;
      if (v526)
      {
        if (v526 >> 61)
          goto LABEL_716;
        v527 = operator new(8 * v526);
        v450 = v566;
      }
      else
      {
        v527 = 0;
      }
      v528 = &v527[8 * v523];
      v529 = &v527[8 * v526];
      *v528 = *(_QWORD *)(v481 + 8 * v586);
      v506 = (char *)(v528 + 1);
      if (v504 != v521)
      {
        v530 = v504 - 8 - v521;
        if (v530 < 0x58)
        {
          v531 = v504;
          goto LABEL_647;
        }
        if ((unint64_t)(v504 - &v527[v522]) < 0x20)
        {
          v531 = v504;
          goto LABEL_647;
        }
        v532 = (v530 >> 3) + 1;
        v533 = 8 * (v532 & 0x3FFFFFFFFFFFFFFCLL);
        v531 = &v504[-v533];
        v528 = (_QWORD *)((char *)v528 - v533);
        v534 = &v527[8 * v523 - 16];
        v535 = v504 - 16;
        v536 = v532 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v537 = *(_OWORD *)v535;
          *(v534 - 1) = *((_OWORD *)v535 - 1);
          *v534 = v537;
          v534 -= 2;
          v535 -= 32;
          v536 -= 4;
        }
        while (v536);
        if (v532 != (v532 & 0x3FFFFFFFFFFFFFFCLL))
        {
          do
          {
LABEL_647:
            v538 = *((_QWORD *)v531 - 1);
            v531 -= 8;
            *--v528 = v538;
          }
          while (v531 != v521);
        }
        v504 = *(char **)(v447 + 144);
        *(_QWORD *)(v447 + 144) = v528;
        *(_QWORD *)(v447 + 152) = v506;
        *(_QWORD *)(v447 + 160) = v529;
        if (!v504)
          goto LABEL_650;
        goto LABEL_649;
      }
      *(_QWORD *)(v447 + 144) = v528;
      *(_QWORD *)(v447 + 152) = v506;
      *(_QWORD *)(v447 + 160) = v529;
LABEL_649:
      operator delete(v504);
LABEL_650:
      *(_QWORD *)(v447 + 152) = v506;
      v539 = *(_QWORD *)(v447 + 160);
      if ((unint64_t)v506 < v539)
      {
        *(_QWORD *)v506 = *(_QWORD *)(v481 + 8 * v583);
        v473 = v506 + 8;
        goto LABEL_576;
      }
      v540 = *v567;
      v541 = v506 - *v567;
      v542 = v541 >> 3;
      v543 = (v541 >> 3) + 1;
      if (v543 >> 61)
LABEL_713:
        sub_2394189F8();
      v544 = v539 - (_QWORD)v540;
      if (v544 >> 2 > v543)
        v543 = v544 >> 2;
      if ((unint64_t)v544 >= 0x7FFFFFFFFFFFFFF8)
        v545 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v545 = v543;
      if (v545)
      {
        if (v545 >> 61)
LABEL_716:
          sub_239418A80();
        v546 = operator new(8 * v545);
        v450 = v566;
      }
      else
      {
        v546 = 0;
      }
      v547 = &v546[8 * v542];
      v548 = &v546[8 * v545];
      *v547 = *(_QWORD *)(v481 + 8 * v583);
      v473 = v547 + 1;
      if (v506 == v540)
      {
        *(_QWORD *)(v447 + 144) = v547;
        *(_QWORD *)(v447 + 152) = v473;
        *(_QWORD *)(v447 + 160) = v548;
LABEL_672:
        operator delete(v506);
        goto LABEL_576;
      }
      v549 = v506 - 8 - v540;
      if (v549 < 0x58)
      {
        v550 = v506;
        goto LABEL_670;
      }
      if ((unint64_t)(v506 - &v546[v541]) < 0x20)
      {
        v550 = v506;
        do
        {
LABEL_670:
          v557 = *((_QWORD *)v550 - 1);
          v550 -= 8;
          *--v547 = v557;
        }
        while (v550 != v540);
        goto LABEL_671;
      }
      v551 = (v549 >> 3) + 1;
      v552 = 8 * (v551 & 0x3FFFFFFFFFFFFFFCLL);
      v550 = &v506[-v552];
      v547 = (_QWORD *)((char *)v547 - v552);
      v553 = &v546[8 * v542 - 16];
      v554 = v506 - 16;
      v555 = v551 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v556 = *(_OWORD *)v554;
        *(v553 - 1) = *((_OWORD *)v554 - 1);
        *v553 = v556;
        v553 -= 2;
        v554 -= 32;
        v555 -= 4;
      }
      while (v555);
      if (v551 != (v551 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_670;
LABEL_671:
      v506 = *(char **)(v447 + 144);
      *(_QWORD *)(v447 + 144) = v547;
      *(_QWORD *)(v447 + 152) = v473;
      *(_QWORD *)(v447 + 160) = v548;
      if (v506)
        goto LABEL_672;
LABEL_576:
      *(_QWORD *)(v447 + 152) = v473;
      v470 = v502;
LABEL_577:
      ++v471;
      v413 = (_QWORD *)(v591 + 208);
    }
    while (v471 != v600);
  }
  v558 = *a1;
  v559 = a1[1];
  v378 = v580;
  if (*a1 != v559)
  {
    if (*(_BYTE *)(v447 + 200))
      v560 = *(_BYTE *)(v447 + 168) == 0;
    else
      v560 = 1;
    v561 = v560;
    do
    {
      v562 = *(_QWORD **)(v558 + 16);
      if (v562)
      {
        if ((v561 & 1) != 0)
          sub_2394875CC();
        do
          v562 = (_QWORD *)*v562;
        while (v562);
      }
      v558 += 40;
    }
    while (v558 != v559);
  }
LABEL_685:
  if (v569)
    operator delete(v569);
  if (v623)
    operator delete(v623);
  if (v626)
  {
    v627 = v626;
    operator delete(v626);
  }
  if (v629)
  {
    v630 = (uint64_t)v629;
    operator delete(v629);
  }
  if (v632)
  {
    v633 = (uint64_t)v632;
    operator delete(v632);
  }
  return v378;
}

void sub_2395517A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,void *__p,uint64_t a56,uint64_t a57,void *a58,uint64_t a59,uint64_t a60,_Unwind_Exception *exception_object,uint64_t a62,uint64_t a63)
{
  void *a64;
  void *v64;
  _Unwind_Exception *v65;
  void *v66;

  if (a17)
  {
    operator delete(a17);
    v64 = __p;
    if (!__p)
    {
LABEL_4:
      if (a58)
      {
        operator delete(a58);
        v65 = exception_object;
        if (!exception_object)
        {
LABEL_6:
          v66 = a64;
          if (!a64)
            goto LABEL_7;
          goto LABEL_10;
        }
      }
      else
      {
        v65 = exception_object;
        if (!exception_object)
          goto LABEL_6;
      }
      operator delete(v65);
      v66 = a64;
      if (!a64)
LABEL_7:
        _Unwind_Resume(a1);
LABEL_10:
      operator delete(v66);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    v64 = __p;
    if (!__p)
      goto LABEL_4;
  }
  operator delete(v64);
  goto LABEL_4;
}

void sub_239551A14(uint64_t a1, uint64_t *a2, _QWORD *a3, _QWORD *a4, _QWORD *a5, void *a6, void *a7)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  float64x2_t v21;
  float64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  int64_t v26;
  float *v27;
  uint64_t v28;
  int8x8_t v29;
  uint64_t v30;
  unint64_t v31;
  uint8x8_t v32;
  unint64_t v33;
  uint64_t **v34;
  uint64_t *v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  int8x8_t v39;
  uint8x8_t v40;
  unint64_t v41;
  float **v42;
  float *v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  float v47;
  float v48;
  BOOL v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint32x2_t *v54;
  uint64_t v55;
  unint64_t v56;
  float32x2_t *v57;
  uint64_t v58;
  float32x2_t v59;
  float *v60;
  double v61;
  float64x2_t v62;
  _QWORD *v63;
  uint64_t v64;
  float v65;
  float v66;
  float v67;
  float v68;
  char *v69;
  char *v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  _BYTE *v75;
  char *v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  float64x2_t *v81;
  float64x2_t *v82;
  uint64_t v83;
  float64x2_t v84;
  int v85;
  float v86;
  float v87;
  float v88;
  uint64_t v89;
  float *v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  unint64_t v94;
  _BYTE *v95;
  float *v96;
  unint64_t v97;
  float *v98;
  int v99;
  float v100;
  unint64_t v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  int32x2_t *v105;
  int32x2_t v106;
  int32x2_t v107;
  int v108;
  uint64_t v109;
  uint64_t v110;
  float64x2_t *v111;
  float64x2_t *v112;
  uint64_t v113;
  float64x2_t v114;
  id v115;
  id v116;
  id v117;
  id v118;
  uint64_t v120;
  uint64_t v121;
  uint64_t *v124;
  uint64_t v125;
  uint64_t v126;
  float *v127;
  uint32x2_t *v128;
  uint64_t v129;
  uint64_t v130;
  float *__p;
  float *v132;
  float *v133;
  char *v134;
  char *v135;
  char *v136;
  void *v137;
  uint64_t v138;
  unint64_t v139;
  float v140;
  float v141;
  float v142;
  float v143;
  float v144;
  float v145;
  float v146;
  float v147;
  float v148;
  float v149;
  float v150;
  float v151;
  uint64_t v152;

  v152 = *MEMORY[0x24BDAC8D0];
  v115 = a6;
  v116 = a7;
  if (!*(_BYTE *)(a1 + 168))
    sub_2394875CC();
  v11 = *(_QWORD *)(a1 + 144);
  v10 = *(_QWORD *)(a1 + 152);
  v138 = 0;
  v139 = 0;
  v137 = 0;
  v12 = v10 - v11;
  if (!v12)
  {
    v134 = 0;
    v135 = 0;
    v136 = 0;
    v19 = *(_QWORD *)(a1 + 144);
    v18 = *(_QWORD *)(a1 + 152);
    v17 = v18 - v19;
    if (v18 == v19)
      goto LABEL_10;
    goto LABEL_8;
  }
  if (v12 < 0)
    sub_2394189F8();
  v13 = v12 >> 3;
  v14 = ((unint64_t)((v12 >> 3) - 1) >> 6) + 1;
  v137 = operator new(8 * v14);
  v138 = 0;
  v139 = v14;
  sub_23942D8C8(&v137, v13, 0);
  v134 = 0;
  v135 = 0;
  v136 = 0;
  if (!*(_BYTE *)(a1 + 168))
    sub_2394875CC();
  v16 = *(_QWORD *)(a1 + 144);
  v15 = *(_QWORD *)(a1 + 152);
  v17 = v15 - v16;
  if (v15 != v16)
  {
LABEL_8:
    if (v17 < 0)
      sub_2394189F8();
    v134 = (char *)operator new((unint64_t)v17 >> 1);
    v135 = v134;
    v136 = &v134[4 * (v17 >> 3)];
  }
LABEL_10:
  v118 = objc_retainAutorelease(v115);
  v130 = objc_msgSend(v118, "contents");
  v117 = objc_retainAutorelease(v116);
  v20 = objc_msgSend(v117, "contents");
  __p = 0;
  v132 = 0;
  v133 = 0;
  v120 = a2[1];
  v23 = *a2;
  v24 = (v120 - *a2) >> 3;
  v25 = -858993459 * v24;
  v26 = 0xCCCCCCCD00000000 * v24;
  if (!v26)
  {
    v27 = 0;
    if (v23 == v120)
      goto LABEL_134;
LABEL_15:
    v28 = v23;
    v125 = a1;
    v126 = v20;
LABEL_18:
    if (!*(_QWORD *)(v28 + 24))
      goto LABEL_17;
    v29 = (int8x8_t)a3[1];
    if (!*(_QWORD *)&v29)
      goto LABEL_143;
    v30 = *(_QWORD *)(v28 + 16);
    v31 = *(unsigned int *)(*a5 + 4 * *(unsigned int *)(v30 + 16));
    v32 = (uint8x8_t)vcnt_s8(v29);
    v32.i16[0] = vaddlv_u8(v32);
    if (v32.u32[0] > 1uLL)
    {
      v33 = *(unsigned int *)(*a5 + 4 * *(unsigned int *)(v30 + 16));
      if (*(_QWORD *)&v29 <= v31)
        v33 = v31 % *(_QWORD *)&v29;
    }
    else
    {
      v33 = (v29.i32[0] - 1) & v31;
    }
    v34 = *(uint64_t ***)(*a3 + 8 * v33);
    if (!v34 || (v35 = *v34) == 0)
LABEL_143:
      sub_23941D898("unordered_map::at: key not found");
    v121 = v28;
    if (v32.u32[0] < 2uLL)
    {
      v36 = *(_QWORD *)&v29 - 1;
      while (1)
      {
        v38 = v35[1];
        if (v38 == v31)
        {
          if (v35[2] == v31)
            goto LABEL_39;
        }
        else if ((v38 & v36) != v33)
        {
          goto LABEL_143;
        }
        v35 = (uint64_t *)*v35;
        if (!v35)
          goto LABEL_143;
      }
    }
    while (1)
    {
      v37 = v35[1];
      if (v37 == v31)
      {
        if (v35[2] == v31)
        {
LABEL_39:
          v39 = (int8x8_t)a4[1];
          if (!*(_QWORD *)&v39)
            goto LABEL_144;
          v40 = (uint8x8_t)vcnt_s8(v39);
          v40.i16[0] = vaddlv_u8(v40);
          if (v40.u32[0] > 1uLL)
          {
            v41 = *(unsigned int *)(*a5 + 4 * *(unsigned int *)(v30 + 16));
            if (*(_QWORD *)&v39 <= v31)
              v41 = v31 % *(_QWORD *)&v39;
          }
          else
          {
            v41 = (v39.i32[0] - 1) & v31;
          }
          v42 = *(float ***)(*a4 + 8 * v41);
          if (!v42 || (v43 = *v42) == 0)
LABEL_144:
            sub_23941D898("unordered_map::at: key not found");
          if (v40.u32[0] < 2uLL)
          {
            v44 = *(_QWORD *)&v39 - 1;
            while (1)
            {
              v46 = *((_QWORD *)v43 + 1);
              if (v46 == v31)
              {
                if (*((_QWORD *)v43 + 2) == v31)
                  goto LABEL_59;
              }
              else if ((v46 & v44) != v41)
              {
                goto LABEL_144;
              }
              v43 = *(float **)v43;
              if (!v43)
                goto LABEL_144;
            }
          }
          while (2)
          {
            v45 = *((_QWORD *)v43 + 1);
            if (v45 != v31)
            {
              if (v45 >= *(_QWORD *)&v39)
                v45 %= *(_QWORD *)&v39;
              if (v45 != v41)
                goto LABEL_144;
LABEL_49:
              v43 = *(float **)v43;
              if (!v43)
                goto LABEL_144;
              continue;
            }
            break;
          }
          if (*((_QWORD *)v43 + 2) != v31)
            goto LABEL_49;
LABEL_59:
          if (v30)
          {
            v47 = 0.0;
            v48 = 0.0;
            v127 = v43;
            while (1)
            {
              if (!*(_BYTE *)(a1 + 200))
                sub_2394875CC();
              if (*(_BYTE *)(a1 + 232))
                v49 = *(_BYTE *)(a1 + 264) == 0;
              else
                v49 = 1;
              if (v49)
                sub_2394875CC();
              v50 = 0;
              v124 = (uint64_t *)v30;
              v51 = *(unsigned int *)(v30 + 16);
              v52 = *(_QWORD *)(a1 + 24) + 12 * v51;
              v53 = *(_QWORD *)(a1 + 176) + 12 * v51;
              v54 = (uint32x2_t *)(*(_QWORD *)(a1 + 208)
                                 + 912 * *(unsigned int *)(*(_QWORD *)(a1 + 240) + 4 * v51)
                                 + 184);
              v128 = v54;
              v129 = v53;
              do
              {
                if (!*(_BYTE *)(a1 + 168))
                  sub_2394875CC();
                v56 = *(unsigned int *)(v53 + 4 * v50);
                v57 = (float32x2_t *)(*(_QWORD *)(a1 + 144) + 8 * v56);
                v58 = 8 * v50;
                v59 = *v57;
                *(float32x2_t *)((char *)&v140 + v58) = vmul_f32(*v57, vcvt_f32_u32(*v54));
                v60 = (float *)(*(_QWORD *)a1 + 12 * *(unsigned int *)(v52 + 4 * v50));
                v21.f64[0] = *v60;
                v22.f64[0] = v60[1];
                v61 = v60[2];
                v62 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(*(float64x2_t *)(v35 + 11), v21.f64[0]), *(float64x2_t *)(v35 + 15), v22.f64[0]), *(float64x2_t *)(v35 + 19), v61);
                v21.f64[0] = *((double *)v35 + 13) * v21.f64[0]
                           + *((double *)v35 + 17) * v22.f64[0]
                           + *((double *)v35 + 21) * v61;
                *(_QWORD *)&v22.f64[0] = v35[25];
                v22 = vdivq_f64(vaddq_f64(*(float64x2_t *)(v35 + 23), v62), (float64x2_t)vdupq_lane_s64(*(_OWORD *)&vaddq_f64(v22, v21), 0));
                v21 = vmlaq_f64(*(float64x2_t *)(v35 + 5), *(float64x2_t *)(v35 + 3), v22);
                *(float32x2_t *)((char *)&v146 + v58) = vcvt_f32_f64(v21);
                v63 = v137;
                v64 = *((_QWORD *)v137 + (v56 >> 6));
                if ((v64 & (1 << v56)) == 0)
                {
                  v65 = v59.f32[0] + -0.5 + v59.f32[0] + -0.5;
                  *(float *)(v130 + 4 * (2 * v56)) = v65;
                  v66 = v57->f32[1] + -0.5 + v57->f32[1] + -0.5;
                  *(float *)(v130 + 4 * ((2 * (_DWORD)v56) | 1u)) = v66;
                  v67 = (v21.f64[0] + 0.5) / v43[6];
                  *(float *)(v20 + 4 * (3 * v56)) = v67;
                  v68 = (v21.f64[1] + 0.5) / v43[7];
                  *(float *)(v20 + 4 * (3 * v56 + 1)) = v68;
                  v63[v56 >> 6] = v64 | (1 << v56);
                  v69 = v135;
                  if (v135 >= v136)
                  {
                    v70 = v134;
                    v71 = (v135 - v134) >> 2;
                    v72 = v71 + 1;
                    if ((unint64_t)(v71 + 1) >> 62)
                      sub_2394189F8();
                    v73 = v136 - v134;
                    if ((v136 - v134) >> 1 > v72)
                      v72 = v73 >> 1;
                    if ((unint64_t)v73 >= 0x7FFFFFFFFFFFFFFCLL)
                      v74 = 0x3FFFFFFFFFFFFFFFLL;
                    else
                      v74 = v72;
                    if (v74)
                    {
                      if (v74 >> 62)
                        sub_239418A80();
                      v75 = operator new(4 * v74);
                      v76 = &v75[4 * v71];
                      *(_DWORD *)v76 = v56;
                      v55 = (uint64_t)(v76 + 4);
                      if (v135 != v134)
                      {
LABEL_83:
                        v77 = v135 - 4 - v134;
                        if (v77 < 0x2C)
                        {
                          v20 = v126;
                          goto LABEL_91;
                        }
                        v20 = v126;
                        if ((unint64_t)(v134 - v75) < 0x20)
                          goto LABEL_157;
                        v78 = (v77 >> 2) + 1;
                        v79 = 4 * (v78 & 0x7FFFFFFFFFFFFFF8);
                        v80 = &v135[-v79];
                        v76 -= v79;
                        v81 = (float64x2_t *)&v75[4 * v71 - 16];
                        v82 = (float64x2_t *)(v135 - 16);
                        v83 = v78 & 0x7FFFFFFFFFFFFFF8;
                        do
                        {
                          v21 = v82[-1];
                          v84 = *v82;
                          v81[-1] = v21;
                          *v81 = v84;
                          v81 -= 2;
                          v82 -= 2;
                          v83 -= 8;
                        }
                        while (v83);
                        v69 = v80;
                        if (v78 != (v78 & 0x7FFFFFFFFFFFFFF8))
                        {
LABEL_157:
                          do
                          {
LABEL_91:
                            v85 = *((_DWORD *)v69 - 1);
                            v69 -= 4;
                            *((_DWORD *)v76 - 1) = v85;
                            v76 -= 4;
                          }
                          while (v69 != v134);
                        }
LABEL_92:
                        v134 = v76;
                        v136 = &v75[4 * v74];
                        if (v70)
                          operator delete(v70);
                        a1 = v125;
                        v43 = v127;
                        v54 = v128;
                        v53 = v129;
LABEL_69:
                        v135 = (char *)v55;
                        goto LABEL_70;
                      }
                    }
                    else
                    {
                      v75 = 0;
                      v76 = (char *)(4 * v71);
                      *(_DWORD *)(4 * v71) = v56;
                      v55 = 4 * v71 + 4;
                      if (v135 != v134)
                        goto LABEL_83;
                    }
                    v20 = v126;
                    goto LABEL_92;
                  }
                  *(_DWORD *)v135 = v56;
                  v55 = (uint64_t)(v135 + 4);
                  goto LABEL_69;
                }
LABEL_70:
                ++v50;
              }
              while (v50 != 3);
              v47 = v47
                  + (float)(fabsf((float)((float)(v148 - v146) * (float)(v151 - v147))- (float)((float)(v150 - v146) * (float)(v149 - v147)))* 0.5);
              v48 = v48
                  + (float)(fabsf((float)((float)(v142 - v140) * (float)(v145 - v141))- (float)((float)(v144 - v140) * (float)(v143 - v141)))* 0.5);
              v30 = *v124;
              if (!*v124)
              {
                v27 = v132;
                v86 = v47 / v48;
                goto LABEL_97;
              }
            }
          }
          v86 = NAN;
LABEL_97:
          v87 = log2f(sqrtf(v86));
          if (v87 < 0.0)
            v87 = 0.0;
          if (v87 == INFINITY)
            v87 = 0.0;
          v88 = v87;
          if (v27 < v133)
          {
            *v27 = v87;
            v89 = (uint64_t)(v27 + 1);
LABEL_117:
            v28 = v121;
            v132 = (float *)v89;
            if (v134 != v135)
            {
              v100 = floorf(v88);
              v101 = v135 - v134 - 4;
              v102 = v134;
              if (v101 < 4)
                goto LABEL_158;
              v103 = (v101 >> 2) + 1;
              v102 = &v134[4 * (v103 & 0x7FFFFFFFFFFFFFFELL)];
              v104 = v103 & 0x7FFFFFFFFFFFFFFELL;
              v105 = (int32x2_t *)v134;
              do
              {
                v106 = *v105++;
                v107 = vmla_s32((int32x2_t)0x200000002, v106, (int32x2_t)0x300000003);
                *(float *)(v20 + 4 * v107.u32[0]) = v100;
                *(float *)(v20 + 4 * v107.u32[1]) = v100;
                v104 -= 2;
              }
              while (v104);
              if (v103 != (v103 & 0x7FFFFFFFFFFFFFFELL))
              {
LABEL_158:
                do
                {
                  v108 = *(_DWORD *)v102;
                  v102 += 4;
                  *(float *)(v20 + 4 * (3 * v108 + 2)) = v100;
                }
                while (v102 != v135);
              }
            }
            v135 = v134;
            v27 = (float *)v89;
LABEL_17:
            v28 += 40;
            if (v28 == v120)
              goto LABEL_134;
            goto LABEL_18;
          }
          v90 = __p;
          v91 = v27 - __p;
          v92 = v91 + 1;
          if ((unint64_t)(v91 + 1) >> 62)
            sub_2394189F8();
          v93 = (char *)v133 - (char *)__p;
          if (((char *)v133 - (char *)__p) >> 1 > v92)
            v92 = v93 >> 1;
          if ((unint64_t)v93 >= 0x7FFFFFFFFFFFFFFCLL)
            v94 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v94 = v92;
          if (v94)
          {
            if (v94 >> 62)
              sub_239418A80();
            v95 = operator new(4 * v94);
            v96 = (float *)&v95[4 * v91];
            *v96 = v88;
            v89 = (uint64_t)(v96 + 1);
            if (v27 != __p)
            {
LABEL_112:
              v97 = (char *)(v27 - 1) - (char *)__p;
              if (v97 < 0xBC
                || &v95[(char *)v27 - (char *)__p - 4 - (v97 & 0xFFFFFFFFFFFFFFFCLL)] > &v95[(char *)v27
                                                                                           - (char *)__p
                                                                                           - 4]
                || (float *)((char *)v27 - (v97 & 0xFFFFFFFFFFFFFFFCLL) - 4) > v27 - 1
                || (unint64_t)((char *)__p - v95) < 0x20)
              {
                v98 = v27;
                v20 = v126;
              }
              else
              {
                v109 = (v97 >> 2) + 1;
                v110 = 4 * (v109 & 0x7FFFFFFFFFFFFFF8);
                v98 = &v27[v110 / 0xFFFFFFFFFFFFFFFCLL];
                v96 = (float *)((char *)v96 - v110);
                v111 = (float64x2_t *)&v95[4 * v91 - 16];
                v112 = (float64x2_t *)(v27 - 4);
                v113 = v109 & 0x7FFFFFFFFFFFFFF8;
                do
                {
                  v21 = v112[-1];
                  v114 = *v112;
                  v111[-1] = v21;
                  *v111 = v114;
                  v111 -= 2;
                  v112 -= 2;
                  v113 -= 8;
                }
                while (v113);
                v20 = v126;
                if (v109 == (v109 & 0x7FFFFFFFFFFFFFF8))
                  goto LABEL_115;
              }
              do
              {
                v99 = *((_DWORD *)v98-- - 1);
                *((_DWORD *)v96-- - 1) = v99;
              }
              while (v98 != __p);
LABEL_115:
              __p = v96;
              v133 = (float *)&v95[4 * v94];
              if (!v90)
                goto LABEL_117;
LABEL_116:
              operator delete(v90);
              goto LABEL_117;
            }
          }
          else
          {
            v95 = 0;
            v96 = (float *)(4 * v91);
            *(float *)(4 * v91) = v87;
            v89 = 4 * v91 + 4;
            if (v27 != __p)
              goto LABEL_112;
          }
          v20 = v126;
          __p = v96;
          v133 = (float *)&v95[4 * v94];
          if (!v90)
            goto LABEL_117;
          goto LABEL_116;
        }
      }
      else
      {
        if (v37 >= *(_QWORD *)&v29)
          v37 %= *(_QWORD *)&v29;
        if (v37 != v33)
          goto LABEL_143;
      }
      v35 = (uint64_t *)*v35;
      if (!v35)
        goto LABEL_143;
    }
  }
  if (v25 < 0)
    sub_2394189F8();
  v27 = (float *)operator new(v26 >> 30);
  __p = v27;
  v132 = v27;
  v133 = &v27[v25];
  if (v23 != v120)
    goto LABEL_15;
LABEL_134:
  objc_msgSend(v118, "length");
  objc_msgSend(v117, "length", nullsub_4(v118).n128_f64[0]);
  nullsub_4(v117);
  if (__p)
    operator delete(__p);
  if (v134)
    operator delete(v134);
  if (v137)
    operator delete(v137);

}

void sub_2395524D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,void *__p)
{
  void *v33;

  if (a29)
  {
    operator delete(a29);
    v33 = __p;
    if (!__p)
    {
LABEL_4:

      _Unwind_Resume(a1);
    }
  }
  else
  {
    v33 = __p;
    if (!__p)
      goto LABEL_4;
  }
  operator delete(v33);
  goto LABEL_4;
}

void sub_239552598(uint64_t a1, uint64_t a2, void *a3, void *a4, void *a5)
{
  id v9;
  id v10;
  id v11;
  id v12;
  void *v13;
  const void *v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  unint64_t v19;
  uint64_t *v20;
  void *v21;
  unint64_t v22;
  unint64_t v23;
  void *v24;
  void *v25;
  uint64_t v26;
  _QWORD v27[3];
  _QWORD v28[3];
  uint64_t v29;

  v9 = a3;
  v10 = a4;
  v11 = a5;
  v26 = *(_QWORD *)(a2 + 112);
  v12 = objc_retainAutorelease(v10);
  v13 = (void *)objc_msgSend(v12, "contents");
  v14 = *(const void **)(a2 + 80);
  if (*(_BYTE *)(a2 + 128) && v14)
  {
    v15 = *(_QWORD *)(a2 + 8);
    v16 = *(std::__shared_weak_count **)(a2 + 16);
    if (v16)
    {
      p_shared_owners = (unint64_t *)&v16->__shared_owners_;
      do
        v18 = __ldxr(p_shared_owners);
      while (__stxr(v18 + 1, p_shared_owners));
      do
        v19 = __ldaxr(p_shared_owners);
      while (__stlxr(v19 - 1, p_shared_owners));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v15 + 88))(v15, 0, "unknown location");
    v14 = *(const void **)(a2 + 80);
  }
  memcpy(v13, v14, (3 * v26 * HIDWORD(v26)));
  nullsub_4(v12);
  v29 = v26;
  v20 = sub_239536660(a1, 22);
  sub_2397A9494((uint64_t)v20);
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  v22 = objc_msgSend(v21, "threadExecutionWidth");
  v23 = objc_msgSend(v21, "maxTotalThreadsPerThreadgroup");
  objc_msgSend(v9, "computeCommandEncoder");
  v24 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v24, "setTexture:atIndex:", v11, 0);
  objc_msgSend(v24, "setBuffer:offset:atIndex:", v12, 0, 0);
  objc_msgSend(v24, "setBytes:length:atIndex:", &v29, 8, 1);
  objc_msgSend(v24, "setComputePipelineState:", v21);
  v28[0] = (v22 + v26 - 1) / v22;
  v28[1] = (v23 / v22 + HIDWORD(v26) - 1) / (v23 / v22);
  v28[2] = 1;
  v27[0] = v22;
  v27[1] = v23 / v22;
  v27[2] = 1;
  objc_msgSend(v24, "dispatchThreadgroups:threadsPerThreadgroup:", v28, v27);
  objc_msgSend(v24, "endEncoding");

  if ((unint64_t)objc_msgSend(v11, "mipmapLevelCount") >= 2)
  {
    objc_msgSend(v9, "blitCommandEncoder");
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v25, "generateMipmapsForTexture:", v11);
    objc_msgSend(v25, "endEncoding");

  }
}

void sub_2395527D8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_2395527F0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_239552830(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_239552848(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_239552860(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_239552880(uint64_t a1, _QWORD *a2, void *a3, void *a4, void *a5, void *a6, unint64_t a7, int a8, char a9, uint64_t a10, uint64_t *a11, void *a12, void *a13, void *a14)
{
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned __int32 v23;
  int8x8_t v24;
  uint8x8_t v25;
  unint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t **v32;
  uint64_t **v33;
  uint64_t *v34;
  uint64_t *v35;
  uint64_t v36;
  const void *v37;
  id v38;
  uint64_t v39;
  uint64_t v40;
  const void *v41;
  id v42;
  uint64_t v43;
  id v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t *v47;
  uint64_t v48;
  _DWORD *v49;
  uint64_t v50;
  _DWORD *v51;
  void *v52;
  uint64_t *v53;
  void *v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  uint64_t v59;
  id v60;
  id v61;
  id v62;
  id v63;
  int32x2_t v64;
  int32x2_t v65;
  int32x2_t v66;
  int32x2_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  id v74;
  id v75;
  void *v76;
  int32x2_t v77;
  _BYTE v78[9];

  v63 = a3;
  v62 = a4;
  v61 = a5;
  v60 = a6;
  v78[0] = a9;
  v19 = a12;
  v75 = a13;
  v74 = a14;
  v59 = a1;
  v20 = sub_2397A9F50(a1);
  sub_2397A9494(v20);
  v58 = (void *)objc_claimAutoreleasedReturnValue();
  if (!*(_BYTE *)(a10 + 232))
    sub_2394875CC();
  v21 = *(_QWORD *)(a10 + 208);
  v68 = *(_QWORD *)(a10 + 216);
  if (v21 == v68)
    goto LABEL_50;
  v69 = 0;
  v70 = 0;
  v71 = 0;
  v22 = 0;
  do
  {
LABEL_5:
    v24 = (int8x8_t)a2[1];
    if (!*(_QWORD *)&v24)
      goto LABEL_51;
    v25 = (uint8x8_t)vcnt_s8(v24);
    v25.i16[0] = vaddlv_u8(v25);
    if (v25.u32[0] > 1uLL)
    {
      v26 = a7;
      if (*(_QWORD *)&v24 <= a7)
        v26 = a7 % *(_QWORD *)&v24;
    }
    else
    {
      v26 = (*(_QWORD *)&v24 - 1) & a7;
    }
    v27 = *(_QWORD **)(*a2 + 8 * v26);
    if (!v27 || (v28 = (_QWORD *)*v27) == 0)
LABEL_51:
      sub_23941D898("unordered_map::at: key not found");
    if (v25.u32[0] < 2uLL)
    {
      v29 = *(_QWORD *)&v24 - 1;
      while (1)
      {
        v31 = v28[1];
        if (v31 == a7)
        {
          if (v28[2] == a7)
            goto LABEL_25;
        }
        else if ((v31 & v29) != v26)
        {
          goto LABEL_51;
        }
        v28 = (_QWORD *)*v28;
        if (!v28)
          goto LABEL_51;
      }
    }
    while (1)
    {
      v30 = v28[1];
      if (v30 == a7)
        break;
      if (v30 >= *(_QWORD *)&v24)
        v30 %= *(_QWORD *)&v24;
      if (v30 != v26)
        goto LABEL_51;
LABEL_15:
      v28 = (_QWORD *)*v28;
      if (!v28)
        goto LABEL_51;
    }
    if (v28[2] != a7)
      goto LABEL_15;
LABEL_25:
    v32 = (uint64_t **)(v28[3] + 24 * v22);
    v33 = v32 + 1;
    v34 = v32[1];
    v35 = *v32;
    v77 = *(int32x2_t *)(v21 + 184);
    if ((a8 & 1) != 0)
    {
      v76 = v19;
    }
    else
    {
      objc_msgSend(v58, "commandBuffer");
      v36 = objc_claimAutoreleasedReturnValue();

      if (!*(_BYTE *)(v21 + 208))
        sub_2394875CC();
      v76 = (void *)v36;
      v64 = v77;
      if (*(_BYTE *)(v21 + 200) && *(_QWORD *)(v21 + 104))
        (*(void (**)(_QWORD, uint64_t, const char *))(**(_QWORD **)(v21 + 80) + 88))(*(_QWORD *)(v21 + 80), 1, "unknown location");
      v37 = *(const void **)(v21 + 104);
      v38 = objc_retainAutorelease(v75);
      memcpy((void *)objc_msgSend(v38, "contents"), v37, 3 * vmul_lane_s32(v64, v64, 1).u32[0]);
      nullsub_4(v38);
      v65 = v77;
      v39 = *a11;
      v40 = *a11 + 88 * v22;
      if (*(_BYTE *)(v40 + 80) && *(_QWORD *)(v39 + 88 * v22 + 32))
        (*(void (**)(_QWORD, uint64_t, const char *))(**(_QWORD **)(v40 + 8) + 88))(*(_QWORD *)(v40 + 8), 1, "unknown location");
      v41 = *(const void **)(v39 + 88 * v22 + 32);
      v42 = objc_retainAutorelease(v74);
      memcpy((void *)objc_msgSend(v42, "contents"), v41, vmul_lane_s32(v65, v65, 1).u32[0]);
      nullsub_4(v42);
    }
    v43 = v34 - v35 + (((char *)v34 - (char *)v35) >> 2);
    if (*v33 != *v32)
    {
      v44 = objc_retainAutorelease(v63);
      v45 = objc_msgSend(v44, "contents");
      v46 = *v32;
      v47 = *v33;
      if (*v32 != *v33)
      {
        if (!*(_BYTE *)(a10 + 200))
          sub_2394875CC();
        v48 = *(_QWORD *)(a10 + 176);
        v49 = (_DWORD *)(v45 + 4 * v71 + 8);
        do
        {
          v50 = *v46++;
          v51 = (_DWORD *)(v48 + 12 * v50);
          *(v49 - 2) = *v51;
          *(v49 - 1) = v51[1];
          *v49 = v51[2];
          v49 += 3;
        }
        while (v46 != v47);
      }
      nullsub_4(v44);
      v52 = (void *)objc_opt_new();
      objc_msgSend(v52, "setRenderTargetWidth:", v77.u32[0]);
      objc_msgSend(v52, "setRenderTargetHeight:", v77.u32[1]);
      objc_msgSend(v52, "setRenderTargetArrayLength:", 1);
      objc_msgSend(v52, "setDefaultRasterSampleCount:", 1);
      v53 = sub_23953674C(v59, 2);
      sub_2397A9494((uint64_t)v53);
      v54 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v76, "renderCommandEncoderWithDescriptor:", v52);
      v55 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v55, "setRenderPipelineState:", v54);
      objc_msgSend(v55, "setCullMode:", 0);
      objc_msgSend(v55, "setFrontFacingWinding:", 1);
      objc_msgSend(v55, "setVertexBuffer:offset:atIndex:", v62, 0, 0);
      objc_msgSend(v55, "setVertexBuffer:offset:atIndex:", v61, 0, 1);
      objc_msgSend(v55, "setFragmentTexture:atIndex:", v60, 0);
      objc_msgSend(v55, "setFragmentBytes:length:atIndex:", &v77, 8, 0);
      objc_msgSend(v55, "setFragmentBytes:length:atIndex:", v78, 1, 1);
      objc_msgSend(v55, "setFragmentBuffer:offset:atIndex:", v75, v70, 2);
      objc_msgSend(v55, "setFragmentBuffer:offset:atIndex:", v74, v69, 3);
      objc_msgSend(v55, "drawIndexedPrimitives:indexCount:indexType:indexBuffer:indexBufferOffset:", 3, v43, 1, v44, 4 * v71);
      objc_msgSend(v55, "endEncoding");

    }
    if (a8)
    {
      v23 = vmul_lane_s32(v77, v77, 1).u32[0];
      v69 += v23;
      v70 += 3 * v23;
      v71 += v43;
      v19 = v76;
      v21 += 912;
      ++v22;
      if (v21 == v68)
        break;
      goto LABEL_5;
    }
    v19 = v76;
    nullsub_4(v76);
    nullsub_4(v76);
    sub_23971DB68();
    objc_msgSend(v76, "commit");
    objc_msgSend(v76, "waitUntilCompleted");
    if (!*(_BYTE *)(v21 + 208))
      sub_2394875CC();
    v66 = v77;
    if (*(_BYTE *)(v21 + 200) && *(_QWORD *)(v21 + 104))
      (*(void (**)(_QWORD, uint64_t, const char *))(**(_QWORD **)(v21 + 80) + 88))(*(_QWORD *)(v21 + 80), 1, "unknown location");
    memcpy(*(void **)(v21 + 104), (const void *)objc_msgSend(objc_retainAutorelease(v75), "contents"), 3 * vmul_lane_s32(v66, v66, 1).u32[0]);
    v67 = v77;
    v56 = *a11;
    v57 = *a11 + 88 * v22;
    if (*(_BYTE *)(v57 + 80) && *(_QWORD *)(v56 + 88 * v22 + 32))
      (*(void (**)(_QWORD, uint64_t, const char *))(**(_QWORD **)(v57 + 8) + 88))(*(_QWORD *)(v57 + 8), 1, "unknown location");
    memcpy(*(void **)(v56 + 88 * v22 + 32), (const void *)objc_msgSend(objc_retainAutorelease(v74), "contents"), vmul_lane_s32(v67, v67, 1).u32[0]);
    v21 += 912;
    ++v22;
  }
  while (v21 != v68);
LABEL_50:

}

void sub_239552F5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, void *a13, void *a14, void *a15, void *a16)
{
  void *v16;
  uint64_t v17;

  _Unwind_Resume(a1);
}

void sub_23955301C(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4, char a5, uint64_t *a6, void *a7, void *a8, void *a9, void *a10, void *a11)
{
  id v17;
  id v18;
  id v19;
  id v20;
  uint64_t v21;
  void *v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  int v30;
  int8x8_t v31;
  uint8x8_t v32;
  unint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int *v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  uint64_t v56;
  uint64_t *v57;
  void *v58;
  unint64_t v59;
  void *v60;
  id v61;
  id v63;
  unint64_t v64;
  int64x2_t v65;
  unint64_t v66;
  int64x2_t v67;
  unsigned int v68;

  v63 = a7;
  v17 = a8;
  v18 = a9;
  v19 = a10;
  v20 = a11;
  v21 = sub_2397A9F50(a1);
  sub_2397A9494(v21);
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  v23 = objc_retainAutorelease(v19);
  v24 = objc_msgSend(v23, "contents");
  v68 = 0;
  if (!*(_BYTE *)(a2 + 232))
    sub_2394875CC();
  v25 = *(_QWORD *)(a2 + 216) - *(_QWORD *)(a2 + 208);
  if (!v25)
  {
    v55 = v63;
    goto LABEL_45;
  }
  v61 = v17;
  v26 = 0;
  v27 = 0;
  v28 = 0x823EE08FB823EE09 * (v25 >> 4);
  v29 = *a3;
  v30 = *(unsigned __int8 *)(a2 + 200);
  while (2)
  {
    v31 = (int8x8_t)a3[1];
    if (!*(_QWORD *)&v31)
      goto LABEL_46;
    v32 = (uint8x8_t)vcnt_s8(v31);
    v32.i16[0] = vaddlv_u8(v32);
    if (v32.u32[0] > 1uLL)
    {
      v33 = a4;
      if (*(_QWORD *)&v31 <= a4)
        v33 = a4 % *(_QWORD *)&v31;
    }
    else
    {
      v33 = (*(_QWORD *)&v31 - 1) & a4;
    }
    v34 = *(_QWORD **)(v29 + 8 * v33);
    if (!v34 || (v35 = (_QWORD *)*v34) == 0)
LABEL_46:
      sub_23941D898("unordered_map::at: key not found");
    if (v32.u32[0] < 2uLL)
    {
      v36 = *(_QWORD *)&v31 - 1;
      while (1)
      {
        v38 = v35[1];
        if (v38 == a4)
        {
          if (v35[2] == a4)
            goto LABEL_25;
        }
        else if ((v38 & v36) != v33)
        {
          goto LABEL_46;
        }
        v35 = (_QWORD *)*v35;
        if (!v35)
          goto LABEL_46;
      }
    }
    while (1)
    {
      v37 = v35[1];
      if (v37 == a4)
        break;
      if (v37 >= *(_QWORD *)&v31)
        v37 %= *(_QWORD *)&v31;
      if (v37 != v33)
        goto LABEL_46;
LABEL_15:
      v35 = (_QWORD *)*v35;
      if (!v35)
        goto LABEL_46;
    }
    if (v35[2] != a4)
      goto LABEL_15;
LABEL_25:
    v39 = v35[3] + 24 * v27;
    v40 = *(_QWORD **)v39;
    v41 = *(_QWORD **)(v39 + 8);
    if (v40 != v41)
    {
      if (!v30)
        sub_2394875CC();
      v42 = *(_QWORD *)(a2 + 176);
      v43 = *a6;
      do
      {
        while (1)
        {
          v48 = (unsigned int *)(v42 + 12 * *v40);
          v49 = *v48;
          v50 = *(_QWORD *)(v43 + 8 * (v49 >> 6));
          if (((1 << v49) & v50) != 0)
            break;
          *(_DWORD *)(v24 + 4 * v26++) = v49;
          v68 = v26;
          *(_QWORD *)(v43 + 8 * (v49 >> 6)) = (1 << v49) | v50;
          v51 = v48[1];
          v52 = v51 >> 6;
          v53 = 1 << v51;
          v54 = *(_QWORD *)(v43 + 8 * (v51 >> 6));
          if (((1 << v51) & v54) == 0)
            goto LABEL_28;
LABEL_34:
          v44 = v48[2];
          v45 = v44 >> 6;
          v46 = 1 << v44;
          v47 = *(_QWORD *)(v43 + 8 * (v44 >> 6));
          if (((1 << v44) & v47) != 0)
            goto LABEL_29;
LABEL_35:
          *(_DWORD *)(v24 + 4 * v26++) = v44;
          v68 = v26;
          *(_QWORD *)(v43 + 8 * v45) = v46 | v47;
          if (++v40 == v41)
            goto LABEL_4;
        }
        v51 = v48[1];
        v52 = v51 >> 6;
        v53 = 1 << v51;
        v54 = *(_QWORD *)(v43 + 8 * (v51 >> 6));
        if (((1 << v51) & v54) != 0)
          goto LABEL_34;
LABEL_28:
        *(_DWORD *)(v24 + 4 * v26++) = v51;
        v68 = v26;
        *(_QWORD *)(v43 + 8 * v52) = v53 | v54;
        v44 = v48[2];
        v45 = v44 >> 6;
        v46 = 1 << v44;
        v47 = *(_QWORD *)(v43 + 8 * (v44 >> 6));
        if (((1 << v44) & v47) == 0)
          goto LABEL_35;
LABEL_29:
        ++v40;
      }
      while (v40 != v41);
    }
LABEL_4:
    if (++v27 != v28)
      continue;
    break;
  }
  v55 = v63;
  if (v26)
  {
    if ((a5 & 1) == 0)
    {
      objc_msgSend(v22, "commandBuffer");
      v56 = objc_claimAutoreleasedReturnValue();

      v18 = (id)v56;
    }
    nullsub_4(v23);
    v57 = sub_239536660(a1, 23);
    sub_2397A9494((uint64_t)v57);
    v58 = (void *)objc_claimAutoreleasedReturnValue();
    v59 = objc_msgSend(v58, "threadExecutionWidth");
    objc_msgSend(v18, "computeCommandEncoder");
    v60 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v60, "setTexture:atIndex:", v63, 0);
    objc_msgSend(v60, "setBuffer:offset:atIndex:", v61, 0, 0);
    objc_msgSend(v60, "setBuffer:offset:atIndex:", v23, 0, 1);
    objc_msgSend(v60, "setBytes:length:atIndex:", &v68, 4, 2);
    objc_msgSend(v60, "setBuffer:offset:atIndex:", v20, 0, 3);
    objc_msgSend(v60, "setComputePipelineState:", v58);
    v66 = (v59 + v26 - 1) / v59;
    v67 = vdupq_n_s64(1uLL);
    v64 = v59;
    v65 = v67;
    objc_msgSend(v60, "dispatchThreadgroups:threadsPerThreadgroup:", &v66, &v64);
    objc_msgSend(v60, "endEncoding");
    if ((a5 & 1) == 0)
    {
      sub_23971DB68();
      objc_msgSend(v18, "commit");
      objc_msgSend(v18, "waitUntilCompleted");
    }

  }
  v17 = v61;
LABEL_45:

}

void sub_239553474(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, uint64_t a12, void *a13)
{
  void *v13;
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

uint64_t sub_2395534F0(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, _QWORD *a5, _QWORD *a6, uint64_t a7, uint64_t *a8, unsigned int a9, char a10, char a11, unint64_t a12, uint64_t a13, char **a14)
{
  uint64_t v16;
  _QWORD *v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  _BYTE *v25;
  _QWORD *v26;
  unint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _OWORD *v32;
  char *v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t *v47;
  unint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  uint64_t v51;
  _QWORD *v52;
  _QWORD *v53;
  _QWORD *v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  void *v62;
  uint64_t v63;
  _QWORD *v64;
  unsigned int *v65;
  unsigned int *v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t *v71;
  unint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  unint64_t v78;
  unint64_t v79;
  _BYTE *v80;
  unint64_t *v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  _OWORD *v86;
  char *v87;
  uint64_t v88;
  __int128 v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  void *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  void *v99;
  id v100;
  void *v101;
  id v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  __n128 v107;
  std::__shared_weak_count *v108;
  unint64_t *p_shared_owners;
  unint64_t v110;
  int v111;
  char *v112;
  char *v113;
  unint64_t v114;
  _QWORD *v115;
  unint64_t v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  unint64_t v121;
  uint64_t v122;
  void *v123;
  id v124;
  void *v125;
  void *v126;
  id v127;
  id v128;
  unsigned int v129;
  unint64_t v130;
  _QWORD *v131;
  _QWORD *v132;
  uint64_t v133;
  uint64_t v134;
  void *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  char *v140;
  size_t v141;
  int v142;
  int v143;
  uint64_t v144;
  uint64_t v145;
  char *v146;
  uint64_t v147;
  uint64_t v148;
  char *v149;
  int v150;
  int v151;
  unint64_t v152;
  char *v153;
  unint64_t v154;
  const void *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  char *v163;
  uint64_t v164;
  char *v165;
  char *v166;
  void *v167;
  char *v168;
  _QWORD *v169;
  void *v170;
  void *v172;
  _QWORD *v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  void *v177;
  void *v178;
  void *context;
  void *contexta;
  _QWORD *v185;
  uint64_t v186;
  uint64_t v187;
  unsigned int *v190;
  uint64_t v191;
  void *v192;
  int v193;
  id v194;
  id v195;
  BOOL v196;
  void *__p;
  char *v198;
  id v199;
  id v200;
  void *v201[3];
  id v202;
  id v203;
  void *v204;
  void *v205;
  id v206;
  __int128 v207;
  __int128 v208;
  int i;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  void *v217;
  uint64_t v218;
  char *v219;
  char v220;
  char v221;
  _QWORD v222[3];
  _QWORD *v223;
  pthread_mutex_t v224;
  uint64_t *v225[2];
  std::__shared_weak_count *v226;
  uint64_t v227;
  _BYTE v228[24];
  _BYTE *v229;
  _BYTE v230[568];
  uint64_t v231;

  v231 = *MEMORY[0x24BDAC8D0];
  v221 = a10;
  v220 = a11;
  v16 = MEMORY[0x23B83EC40]();
  v217 = 0;
  v218 = 0;
  v219 = 0;
  v185 = a2;
  v17 = (_QWORD *)a2[2];
  context = (void *)v16;
  if (v17)
  {
    v18 = 0;
    v19 = 0;
    v20 = 0;
    while (1)
    {
      while (v18 < v19)
      {
        *(_QWORD *)v18 = v17[2];
        v18 += 8;
        v21 = (uint64_t)v18;
        v218 = (uint64_t)v18;
        v17 = (_QWORD *)*v17;
        if (!v17)
          goto LABEL_34;
      }
      v22 = (v18 - v20) >> 3;
      v23 = v22 + 1;
      if ((unint64_t)(v22 + 1) >> 61)
        sub_2394189F8();
      if ((v19 - v20) >> 2 > v23)
        v23 = (v19 - v20) >> 2;
      if ((unint64_t)(v19 - v20) >= 0x7FFFFFFFFFFFFFF8)
        v24 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v24 = v23;
      if (v24)
      {
        if (v24 >> 61)
          sub_239418A80();
        v25 = operator new(8 * v24);
        v26 = &v25[8 * v22];
        *v26 = v17[2];
        v21 = (uint64_t)(v26 + 1);
        if (v18 == v20)
          goto LABEL_19;
      }
      else
      {
        v25 = 0;
        v26 = (_QWORD *)(8 * v22);
        *(_QWORD *)(8 * v22) = v17[2];
        v21 = 8 * v22 + 8;
        if (v18 == v20)
          goto LABEL_19;
      }
      v27 = v18 - 8 - v20;
      if (v27 >= 0x168)
      {
        if (&v25[v18 - v20 - 8 - (v27 & 0xFFFFFFFFFFFFFFF8)] > &v25[v18 - v20 - 8])
        {
          v28 = v18;
        }
        else if (&v18[-(v27 & 0xFFFFFFFFFFFFFFF8) - 8] > v18 - 8)
        {
          v28 = v18;
        }
        else if ((unint64_t)(v20 - v25) >= 0x20)
        {
          v30 = (v27 >> 3) + 1;
          v31 = 8 * (v30 & 0x3FFFFFFFFFFFFFFCLL);
          v28 = &v18[-v31];
          v26 = (_QWORD *)((char *)v26 - v31);
          v32 = &v25[8 * v22 - 16];
          v33 = v18 - 16;
          v34 = v30 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v35 = *(_OWORD *)v33;
            *(v32 - 1) = *((_OWORD *)v33 - 1);
            *v32 = v35;
            v32 -= 2;
            v33 -= 32;
            v34 -= 4;
          }
          while (v34);
          if (v30 == (v30 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_19;
        }
        else
        {
          v28 = v18;
        }
      }
      else
      {
        v28 = v18;
      }
      do
      {
        v29 = *((_QWORD *)v28 - 1);
        v28 -= 8;
        *--v26 = v29;
      }
      while (v28 != v20);
LABEL_19:
      v19 = &v25[8 * v24];
      v217 = v26;
      v219 = v19;
      if (v20)
        operator delete(v20);
      v20 = (char *)v26;
      v218 = v21;
      v17 = (_QWORD *)*v17;
      v18 = (char *)v21;
      if (!v17)
        goto LABEL_34;
    }
  }
  v20 = 0;
  v21 = 0;
LABEL_34:
  v36 = *a8;
  v37 = a8[1];
  v210 = *a8;
  v211 = v37;
  v38 = a8[2];
  v212 = v38;
  if (v38)
  {
    v39 = (unint64_t *)(v38 + 8);
    do
      v40 = __ldxr(v39);
    while (__stxr(v40 + 1, v39));
  }
  v41 = a8[3];
  v42 = a8[4];
  v213 = v41;
  v214 = v42;
  if (v42)
  {
    v43 = (unint64_t *)(v42 + 8);
    do
      v44 = __ldxr(v43);
    while (__stxr(v44 + 1, v43));
  }
  v46 = a8[5];
  v45 = a8[6];
  v215 = v46;
  v216 = v45;
  if (v45)
  {
    v47 = (unint64_t *)(v45 + 8);
    do
      v48 = __ldxr(v47);
    while (__stxr(v48 + 1, v47));
  }
  v49 = operator new(0x40uLL);
  *v49 = &off_250ADB9D8;
  v49[1] = v36;
  v49[2] = v37;
  v49[3] = v38;
  v211 = 0;
  v212 = 0;
  v49[4] = v41;
  v49[5] = v42;
  v213 = 0;
  v214 = 0;
  v49[6] = v46;
  v49[7] = v45;
  v215 = 0;
  v216 = 0;
  v229 = v49;
  v225[0] = (uint64_t *)0x42C8000000000000;
  sub_2396FCC68(v230, (v21 - (uint64_t)v20) >> 3, v228, v225, 1.0);
  v50 = v229;
  if (v229 == v228)
  {
    v51 = 4;
    v50 = v228;
  }
  else
  {
    if (!v229)
      goto LABEL_48;
    v51 = 5;
  }
  (*(void (**)(_QWORD *))(*v50 + 8 * v51))(v50);
LABEL_48:
  v52 = (_QWORD *)v185[2];
  v207 = 0u;
  v208 = 0u;
  for (i = 1065353216; v52; v52 = (_QWORD *)*v52)
  {
    v225[0] = v52 + 2;
    v53 = sub_239559850((uint64_t)&v207, v52 + 2, (uint64_t)&unk_239EC6E98, v225);
    if (!*(_BYTE *)(a13 + 232))
      sub_2394875CC();
    v54 = v53;
    v55 = 0x823EE08FB823EE09 * ((uint64_t)(*(_QWORD *)(a13 + 216) - *(_QWORD *)(a13 + 208)) >> 4);
    v57 = v53[3];
    v56 = v53[4];
    v58 = 0xAAAAAAAAAAAAAAABLL * ((v56 - v57) >> 3);
    if (v55 > v58)
    {
      sub_2394D951C((uint64_t)(v53 + 3), v55 - v58);
    }
    else if (v55 < v58)
    {
      v59 = v57 + 0x35E50D79435E50D8 * ((uint64_t)(*(_QWORD *)(a13 + 216) - *(_QWORD *)(a13 + 208)) >> 4);
      if (v56 != v59)
      {
        v60 = v53[4];
        do
        {
          v62 = *(void **)(v60 - 24);
          v60 -= 24;
          v61 = v62;
          if (v62)
          {
            *(_QWORD *)(v56 - 16) = v61;
            operator delete(v61);
          }
          v56 = v60;
        }
        while (v60 != v59);
      }
      v54[4] = v59;
    }
  }
  if (!*(_BYTE *)(a13 + 232))
    sub_2394875CC();
  v63 = *(_QWORD *)(a13 + 208);
  v186 = *(_QWORD *)(a13 + 216);
  v64 = a6;
  if (v63 != v186)
  {
    v191 = 0;
    while (1)
    {
      v66 = *(unsigned int **)(v63 + 24);
      v65 = *(unsigned int **)(v63 + 32);
      v187 = v63;
      v190 = v65;
      if (v66 != v65)
        break;
LABEL_64:
      v63 = v187 + 912;
      ++v191;
      if (v187 + 912 == v186)
        goto LABEL_91;
    }
    while (1)
    {
      v68 = *v66;
      if (((*(_QWORD *)(*v64 + ((v68 >> 3) & 0x1FFFFFF8)) >> v68) & 1) != 0)
        goto LABEL_69;
      v224.__sig = *(unsigned int *)(*a5 + 4 * v68);
      v225[0] = (uint64_t *)&v224;
      v69 = sub_239559C10((uint64_t)&v207, (unint64_t *)&v224, (uint64_t)&unk_239EC6E98, v225)[3] + 24 * v191;
      v71 = (uint64_t *)(v69 + 8);
      v70 = *(char **)(v69 + 8);
      v72 = *(_QWORD *)(v69 + 16);
      if ((unint64_t)v70 >= v72)
        break;
      *(_QWORD *)v70 = v68;
      v67 = (uint64_t)(v70 + 8);
LABEL_68:
      v64 = a6;
      v65 = v190;
      *v71 = v67;
LABEL_69:
      if (++v66 == v65)
        goto LABEL_64;
    }
    v73 = *(char **)v69;
    v74 = (uint64_t)&v70[-*(_QWORD *)v69];
    v75 = v74 >> 3;
    v76 = (v74 >> 3) + 1;
    if (v76 >> 61)
      sub_2394189F8();
    v77 = v72 - (_QWORD)v73;
    if (v77 >> 2 > v76)
      v76 = v77 >> 2;
    if ((unint64_t)v77 >= 0x7FFFFFFFFFFFFFF8)
      v78 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v78 = v76;
    if (v78)
    {
      if (v78 >> 61)
        sub_239418A80();
      v79 = v78;
      v80 = operator new(8 * v78);
      v78 = v79;
      v81 = (unint64_t *)&v80[8 * v75];
      *v81 = v68;
      v67 = (uint64_t)(v81 + 1);
      if (v70 == v73)
        goto LABEL_89;
    }
    else
    {
      v80 = 0;
      v81 = (unint64_t *)(8 * v75);
      *(_QWORD *)(8 * v75) = v68;
      v67 = 8 * v75 + 8;
      if (v70 == v73)
      {
LABEL_89:
        *(_QWORD *)v69 = v81;
        *v71 = v67;
        *(_QWORD *)(v69 + 16) = &v80[8 * v78];
        if (v73)
          operator delete(v73);
        goto LABEL_68;
      }
    }
    v82 = v70 - 8 - v73;
    if (v82 < 0x58)
      goto LABEL_209;
    if ((unint64_t)(v70 - &v80[v74]) < 0x20)
      goto LABEL_209;
    v83 = (v82 >> 3) + 1;
    v84 = 8 * (v83 & 0x3FFFFFFFFFFFFFFCLL);
    v85 = &v70[-v84];
    v81 = (unint64_t *)((char *)v81 - v84);
    v86 = &v80[8 * v75 - 16];
    v87 = v70 - 16;
    v88 = v83 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v89 = *(_OWORD *)v87;
      *(v86 - 1) = *((_OWORD *)v87 - 1);
      *v86 = v89;
      v86 -= 2;
      v87 -= 32;
      v88 -= 4;
    }
    while (v88);
    v70 = v85;
    if (v83 != (v83 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_209:
      do
      {
        v90 = *((_QWORD *)v70 - 1);
        v70 -= 8;
        *--v81 = v90;
      }
      while (v70 != v73);
    }
    goto LABEL_89;
  }
LABEL_91:
  v91 = a1;
  nullsub_4(a1);
  sub_2397A9494(v92);
  v93 = (void *)objc_claimAutoreleasedReturnValue();
  v94 = sub_2397A9F50(a1);
  sub_2397A9494(v94);
  v192 = (void *)objc_claimAutoreleasedReturnValue();
  if (!*(_BYTE *)(a13 + 168))
    sub_2394875CC();
  v95 = *(_QWORD *)(a13 + 32) - *(_QWORD *)(a13 + 24);
  v96 = *(_QWORD *)(a13 + 152) - *(_QWORD *)(a13 + 144);
  v97 = 4 * (((unint64_t)v96 >> 2) + (v96 >> 3));
  if (v221)
    v98 = v97 + (v96 >> 1);
  else
    v98 = 0;
  v206 = (id)objc_msgSend(v93, "newBufferWithLength:options:", *(_QWORD *)(a13 + 32) - *(_QWORD *)(a13 + 24), 0, context);
  v205 = (void *)objc_msgSend(v93, "newBufferWithLength:options:", v96, 0);
  v203 = 0;
  v204 = (void *)objc_msgSend(v93, "newBufferWithLength:options:", 4 * (((unint64_t)v96 >> 2) + (v96 >> 3)), 0);
  v202 = 0;
  memset(v201, 0, sizeof(v201));
  if (v221)
  {
    v99 = (void *)objc_msgSend(v93, "newBufferWithLength:options:", 4 * (((unint64_t)v96 >> 2) + (v96 >> 3)), 0);
    v100 = v203;
    v203 = v99;

    v101 = (void *)objc_msgSend(v93, "newBufferWithLength:options:", v96 >> 1, 0);
    v102 = v202;
    v202 = v101;

    if (!*(_BYTE *)(a13 + 168))
      sub_2394875CC();
    sub_23941C5D8((uint64_t)v201, (uint64_t)(*(_QWORD *)(a13 + 152) - *(_QWORD *)(a13 + 144)) >> 3, 0);
  }
  v199 = 0;
  v200 = 0;
  if (!*(_BYTE *)(a13 + 232))
    sub_2394875CC();
  sub_2395547C4(&__p, 0x823EE08FB823EE09 * ((uint64_t)(*(_QWORD *)(a13 + 216) - *(_QWORD *)(a13 + 208)) >> 4));
  if (!*(_BYTE *)(a13 + 232))
    sub_2394875CC();
  v103 = *(_QWORD *)(a13 + 216) - *(_QWORD *)(a13 + 208);
  if (!v103)
  {
    v196 = 1;
    v113 = *(char **)(a13 + 208);
    v112 = *(char **)(a13 + 216);
    if (v113 != v112)
      goto LABEL_112;
LABEL_115:
    v116 = 0;
    v118 = 0;
    v115 = a3;
    goto LABEL_120;
  }
  v104 = v95;
  v105 = 0;
  v106 = 0x823EE08FB823EE09 * (v103 >> 4);
  do
  {
    if (!*(_BYTE *)(a13 + 232) || !*(_BYTE *)(*(_QWORD *)(a13 + 208) + 912 * v105 + 208))
      sub_2394875CC();
    sub_2398D8228(1);
    sub_239422CF0((uint64_t)__p + 88 * v105, (uint64_t)v225);
    v107 = nullsub_4(&v227);
    v108 = v226;
    if (v226)
    {
      p_shared_owners = (unint64_t *)&v226->__shared_owners_;
      do
        v110 = __ldaxr(p_shared_owners);
      while (__stlxr(v110 - 1, p_shared_owners));
      if (!v110)
      {
        ((void (*)(std::__shared_weak_count *, __n128))v108->__on_zero_shared)(v108, v107);
        std::__shared_weak_count::__release_weak(v108);
      }
    }
    j_nullsub_4_89(v225);
    ++v105;
  }
  while (v105 != v106);
  v111 = *(unsigned __int8 *)(a13 + 232);
  v196 = 1;
  v91 = a1;
  v95 = v104;
  v97 = 4 * (((unint64_t)v96 >> 2) + (v96 >> 3));
  if (!v111)
    sub_2394875CC();
  v113 = *(char **)(a13 + 208);
  v112 = *(char **)(a13 + 216);
  if (v113 == v112)
    goto LABEL_115;
LABEL_112:
  v114 = v112 - v113 - 912;
  v115 = a3;
  if (v114 < 0x390)
  {
    v116 = 0;
    v117 = v113;
    do
    {
LABEL_119:
      v118 = 3 * (*((_DWORD *)v117 + 47) * *((_DWORD *)v117 + 46));
      v116 += v118;
      v117 += 912;
    }
    while (v117 != v112);
    goto LABEL_120;
  }
  v119 = 0;
  v120 = 0;
  v121 = v114 / 0x390 + 1;
  v117 = &v113[912 * (v121 & 0xFFFFFFFFFFFFFELL)];
  v122 = v121 & 0xFFFFFFFFFFFFFELL;
  do
  {
    v118 = 3 * (*((_DWORD *)v113 + 275) * *((_DWORD *)v113 + 274));
    v119 += 3 * (*((_DWORD *)v113 + 47) * *((_DWORD *)v113 + 46));
    v120 += v118;
    v113 += 1824;
    v122 -= 2;
  }
  while (v122);
  v116 = v120 + v119;
  if (v121 != (v121 & 0xFFFFFFFFFFFFFELL))
    goto LABEL_119;
LABEL_120:
  nullsub_4(v91);
  if (v116 >= (unint64_t)((double)(unint64_t)sub_2397A969C() * 0.7))
  {
    v196 = 0;
  }
  else
  {
    v196 = v116 < 0xFFFFFFFF;
    if (v116 <= 0xFFFFFFFE)
    {
      v123 = (void *)objc_msgSend(v93, "newBufferWithLength:options:", v116, 0);
      v124 = v200;
      v200 = v123;

      v125 = (void *)objc_msgSend(v93, "newBufferWithLength:options:", v116 / 3uLL, 0);
      goto LABEL_125;
    }
  }
  v126 = (void *)objc_msgSend(v93, "newBufferWithLength:options:", v118, 0);
  v127 = v200;
  v200 = v126;

  v125 = (void *)objc_msgSend(v93, "newBufferWithLength:options:", (_QWORD)(((unint64_t)v118 * (unsigned __int128)0x5555555555555556uLL) >> 64), 0);
  v116 = v118;
LABEL_125:
  v128 = v199;
  v199 = v125;

  sub_239551A14(a13, a4, v185, v115, a5, v205, v204);
  v194 = 0;
  v195 = 0;
  v129 = sub_239548DE8((uint64_t)v115, v116 + v96 + v95 + v97 + v98, a9, a12);
  sub_2397A2A50((uint64_t)v225, v129, 0);
  sub_2397A1618(&v224);
  sub_2397A15E0(&v193);
  v130 = v185[3];
  v223 = 0;
  v131 = operator new(0xB0uLL);
  *v131 = &off_250ADDD90;
  v131[1] = v230;
  v131[2] = &v217;
  v131[3] = v91;
  v131[4] = &v207;
  v131[5] = a7;
  v131[6] = &v224;
  v131[7] = &v195;
  v131[8] = &v194;
  v131[9] = &v196;
  v131[10] = &v206;
  v131[11] = &v205;
  v131[12] = &v204;
  v131[13] = &v220;
  v131[14] = a13;
  v131[15] = &__p;
  v131[16] = &v200;
  v131[17] = &v199;
  v131[18] = &v221;
  v131[19] = v201;
  v131[20] = &v202;
  v131[21] = &v203;
  v223 = v131;
  sub_2397A376C((unint64_t *)v225, v130, v222, 0);
  v132 = v223;
  if (v223 == v222)
  {
    v133 = 4;
    v132 = v222;
  }
  else
  {
    if (!v223)
      goto LABEL_130;
    v133 = 5;
  }
  (*(void (**)(void))(*v132 + 8 * v133))();
LABEL_130:
  objc_msgSend(v192, "commandBuffer");
  v134 = objc_claimAutoreleasedReturnValue();
  v135 = (void *)v134;
  if (v196)
  {
    nullsub_4(v134);
    nullsub_4(v135);
  }
  if (v221)
    nullsub_4(v135);
  sub_23971DB68();
  objc_msgSend(v135, "commit");
  objc_msgSend(v135, "waitUntilCompleted");

  v136 = a13;
  if (v196)
  {
    v137 = objc_msgSend(objc_retainAutorelease(v200), "contents");
    if (!*(_BYTE *)(a13 + 232))
      sub_2394875CC();
    v138 = *(_QWORD *)(a13 + 208);
    v139 = *(_QWORD *)(a13 + 216);
    if (v138 != v139)
    {
      v140 = (char *)v137;
      do
      {
        v142 = *(_DWORD *)(v138 + 184);
        v143 = *(_DWORD *)(v138 + 188);
        if (*(_BYTE *)(v138 + 200) && *(_QWORD *)(v138 + 104))
          (*(void (**)(_QWORD, uint64_t, const char *))(**(_QWORD **)(v138 + 80) + 88))(*(_QWORD *)(v138 + 80), 1, "unknown location");
        v141 = (3 * v142 * v143);
        memcpy(*(void **)(v138 + 104), v140, v141);
        v140 += v141;
        v138 += 912;
      }
      while (v138 != v139);
    }
    v144 = objc_msgSend(objc_retainAutorelease(v199), "contents");
    v136 = a13;
    if (!*(_BYTE *)(a13 + 232))
      sub_2394875CC();
    v145 = *(_QWORD *)(a13 + 216) - *(_QWORD *)(a13 + 208);
    if (v145)
    {
      v146 = (char *)v144;
      v147 = 0;
      v148 = v145 / 912;
      do
      {
        v149 = (char *)__p + v147;
        v150 = *(_DWORD *)((char *)__p + v147 + 64);
        v151 = *(_DWORD *)((char *)__p + v147 + 68);
        if (*((_BYTE *)__p + v147 + 80) && *((_QWORD *)v149 + 4))
          (*(void (**)(_QWORD, uint64_t, const char *))(**((_QWORD **)v149 + 1) + 88))(*((_QWORD *)v149 + 1), 1, "unknown location");
        memcpy(*((void **)v149 + 4), v146, (v151 * v150));
        v146 += (v151 * v150);
        v147 += 88;
        --v148;
      }
      while (v148);
    }
  }
  if (v221)
  {
    if (!*(_BYTE *)(v136 + 168))
      goto LABEL_197;
    v152 = (uint64_t)(*(_QWORD *)(v136 + 152) - *(_QWORD *)(v136 + 144)) >> 3;
    v153 = *a14;
    v154 = 0xAAAAAAAAAAAAAAABLL * (a14[1] - *a14);
    if (v152 <= v154)
    {
      if (v152 < v154)
        a14[1] = &v153[3 * v152];
    }
    else
    {
      sub_2395477D8(a14, v152 - v154);
      v153 = *a14;
    }
    v155 = (const void *)objc_msgSend(objc_retainAutorelease(v203), "contents");
    v136 = a13;
    if (!*(_BYTE *)(a13 + 168))
LABEL_197:
      sub_2394875CC();
    v156 = *(_QWORD *)(a13 + 152) - *(_QWORD *)(a13 + 144);
    memcpy(v153, v155, (v156 >> 2) + (v156 >> 3));
  }
  if (!*(_BYTE *)(v136 + 232))
    sub_2394875CC();
  v157 = *(_QWORD *)(v136 + 216) - *(_QWORD *)(v136 + 208);
  if (v157)
  {
    v158 = 0;
    v159 = 0;
    v160 = v157 / 912;
    while (1)
    {
      if (!*(_BYTE *)(v136 + 232))
        sub_2394875CC();
      v161 = *(_QWORD *)(v136 + 208);
      v162 = v161 + v158;
      if (!*(_BYTE *)(v161 + v158 + 208))
      {
        sub_239A444D4((uint64_t)"unknown file", 1696, (uint64_t)"", (void (*)(void *))sub_239A4463C);
        sub_239A4475C();
        abort();
      }
      v163 = (char *)__p + v159;
      if (*(_DWORD *)(v162 + 184) != *(_DWORD *)((char *)__p + v159 + 64)
        || *(_DWORD *)(v161 + v158 + 188) != *((_DWORD *)v163 + 17))
      {
        break;
      }
      sub_2395548A4(v162 + 72, (uint64_t)v163, 3, 0);
      v159 += 88;
      v158 += 912;
      if (!--v160)
        goto LABEL_165;
    }
    v164 = 0;
  }
  else
  {
LABEL_165:
    v164 = 1;
  }
  nullsub_4(&v193);
  sub_2397A163C(&v224);
  sub_2397A2E14(v225);

  v165 = (char *)__p;
  if (__p)
  {
    v166 = v198;
    v167 = __p;
    if (v198 != __p)
    {
      do
      {
        v168 = v166 - 88;
        sub_239416DA0((uint64_t)(v166 - 80));
        nullsub_4(v168);
        v166 = v168;
      }
      while (v168 != v165);
      v167 = __p;
    }
    v198 = v165;
    operator delete(v167);
  }

  if (v201[0])
    operator delete(v201[0]);

  v169 = (_QWORD *)v208;
  if ((_QWORD)v208)
  {
    do
    {
      v173 = (_QWORD *)*v169;
      v174 = v169[3];
      if (v174)
      {
        v175 = v169[4];
        v172 = (void *)v169[3];
        if (v175 != v174)
        {
          v176 = v169[4];
          do
          {
            v178 = *(void **)(v176 - 24);
            v176 -= 24;
            v177 = v178;
            if (v178)
            {
              *(_QWORD *)(v175 - 16) = v177;
              operator delete(v177);
            }
            v175 = v176;
          }
          while (v176 != v174);
          v172 = (void *)v169[3];
        }
        v169[4] = v174;
        operator delete(v172);
      }
      operator delete(v169);
      v169 = v173;
    }
    while (v173);
  }
  v170 = (void *)v207;
  *(_QWORD *)&v207 = 0;
  if (v170)
    operator delete(v170);
  sub_2396FCD14((uint64_t)v230);
  if (v217)
  {
    v218 = (uint64_t)v217;
    operator delete(v217);
  }
  objc_autoreleasePoolPop(contexta);
  return v164;
}

void sub_2395545A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *a51,void *a52)
{
  sub_239554DA4(&a26);

  if (__p)
    operator delete(__p);

  sub_239554E10((uint64_t)&a39);
  sub_2396FCD14((uint64_t)&STACK[0x350]);
  if (!a51)
    _Unwind_Resume(a1);
  a52 = a51;
  operator delete(a51);
  _Unwind_Resume(a1);
}

_QWORD *sub_2395547C4(_QWORD *a1, unint64_t a2)
{
  _WORD *v4;
  uint64_t v5;
  char *v6;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    if (a2 >= 0x2E8BA2E8BA2E8BBLL)
      sub_2394189F8();
    v4 = operator new(88 * a2);
    *a1 = v4;
    a1[1] = v4;
    v5 = 88 * a2;
    v6 = (char *)&v4[44 * a2];
    a1[2] = v6;
    do
    {
      *(_QWORD *)v4 = &off_250ADB628;
      sub_239422F30(v4 + 4);
      v4 += 44;
      v5 -= 88;
    }
    while (v5);
    a1[1] = v6;
  }
  return a1;
}

void sub_239554870(_Unwind_Exception *exception_object)
{
  uint64_t *v1;

  if (*v1)
    sub_239EC0604((uint64_t)(v1 + 1), *v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_2395548A4(uint64_t a1, uint64_t a2, int a3, int a4)
{
  signed int v4;
  unint64_t v7;
  unint64_t i;
  uint64_t v9;
  BOOL v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  void *v24;
  char *v25;
  void *v26;
  void *v27;
  int v29;
  int v30;
  void *__p;
  char *v33;
  void *v34;
  void *v35;
  char *v36;
  void *v37;
  uint64_t v38;
  unint64_t v39;
  int v40;
  _QWORD v41[3];
  _QWORD *v42;
  _QWORD v43[3];
  _QWORD *v44;
  _OWORD v45[2];
  _OWORD v46[2];
  unint64_t v47[46];

  v4 = a4;
  v47[44] = *MEMORY[0x24BDAC8D0];
  if (a4 <= 0)
    v4 = std::thread::hardware_concurrency();
  sub_2397A2A50((uint64_t)v47, v4, 0);
  sub_2397A15E0(&v40);
  v29 = *(_DWORD *)(a1 + 116);
  v30 = *(_DWORD *)(a1 + 112);
  v7 = (v29 * v30);
  v37 = 0;
  v38 = 0;
  v39 = 0;
  if ((_DWORD)v7)
  {
    v37 = operator new(8 * (((v7 - 1) >> 6) + 1));
    v38 = 0;
    v39 = ((v7 - 1) >> 6) + 1;
    sub_23942D8C8(&v37, v7, 0);
    for (i = 0; i != v7; ++i)
    {
      while (1)
      {
        v9 = *(_QWORD *)(a2 + 32);
        if (*(_BYTE *)(a2 + 80))
          v10 = v9 == 0;
        else
          v10 = 1;
        if (!v10)
        {
          (*(void (**)(_QWORD, uint64_t, const char *))(**(_QWORD **)(a2 + 8) + 88))(*(_QWORD *)(a2 + 8), 1, "unknown location");
          v9 = *(_QWORD *)(a2 + 32);
        }
        v11 = i >> 6;
        v12 = 1 << i;
        if (*(_BYTE *)(v9 + i))
          break;
        *((_QWORD *)v37 + v11) &= ~v12;
        if (v7 == ++i)
          goto LABEL_13;
      }
      *((_QWORD *)v37 + v11) |= v12;
    }
LABEL_13:
    v34 = operator new(8 * v7);
    v35 = v34;
    v36 = (char *)v34 + 8 * v7;
  }
  else
  {
    v34 = 0;
    v35 = 0;
    v36 = 0;
  }
  v46[0] = xmmword_239EC7178;
  v46[1] = unk_239EC7188;
  v45[0] = xmmword_239EC7198;
  v45[1] = unk_239EC71A8;
  sub_23955A50C(&__p, v4);
  v44 = 0;
  v13 = operator new(0x38uLL);
  *v13 = &off_250ADDDD8;
  v13[1] = &__p;
  v13[2] = &v37;
  v13[3] = v46;
  v13[4] = v45;
  *((_DWORD *)v13 + 10) = v4;
  *((_DWORD *)v13 + 11) = v30;
  *((_DWORD *)v13 + 12) = v29;
  v44 = v13;
  sub_2397A376C(v47, v4, v43, 0);
  v14 = v44;
  if (v44 == v43)
  {
    v15 = 4;
    v14 = v43;
  }
  else
  {
    if (!v44)
      goto LABEL_20;
    v15 = 5;
  }
  (*(void (**)(void))(*v14 + 8 * v15))();
LABEL_20:
  if (v4)
  {
    v16 = 0;
    do
    {
      sub_23955AC20((unint64_t *)&v34, (uint64_t)v35, *(char **)((char *)__p + v16), *(char **)((char *)__p + v16 + 8), (uint64_t)(*(_QWORD *)((char *)__p + v16 + 8) - *(_QWORD *)((char *)__p + v16)) >> 3);
      v16 += 24;
    }
    while (24 * v4 != v16);
  }
  v17 = v34;
  if (v34 != v35)
  {
    while (1)
    {
      if (a3 != -1)
      {
        if (!a3)
          goto LABEL_37;
        --a3;
      }
      v42 = 0;
      v18 = operator new(0x50uLL);
      *v18 = &off_250ADDE20;
      v18[1] = &__p;
      v18[2] = &v34;
      v18[3] = v46;
      v18[4] = v45;
      v18[5] = a1;
      v18[6] = &v37;
      v18[7] = a2;
      *((_DWORD *)v18 + 16) = v4;
      *((_BYTE *)v18 + 68) = 1;
      *((_DWORD *)v18 + 18) = v30;
      *((_DWORD *)v18 + 19) = v29;
      v42 = v18;
      sub_2397A376C(v47, v4, v41, 0);
      v19 = v42;
      if (v42 == v41)
        break;
      if (v42)
      {
        v20 = 5;
LABEL_31:
        (*(void (**)(void))(*v19 + 8 * v20))();
      }
      v17 = v34;
      v35 = v34;
      if (!v4)
        goto LABEL_37;
      v21 = 0;
      do
      {
        sub_23955AC20((unint64_t *)&v34, (uint64_t)v35, *(char **)((char *)__p + v21), *(char **)((char *)__p + v21 + 8), (uint64_t)(*(_QWORD *)((char *)__p + v21 + 8) - *(_QWORD *)((char *)__p + v21)) >> 3);
        v21 += 24;
      }
      while (24 * v4 != v21);
      v17 = v34;
      if (v34 == v35)
      {
        v17 = v35;
        goto LABEL_37;
      }
    }
    v19 = v41;
    v20 = 4;
    goto LABEL_31;
  }
LABEL_37:
  v22 = (char *)__p;
  if (__p)
  {
    v23 = v33;
    v24 = __p;
    if (v33 != __p)
    {
      v25 = v33;
      do
      {
        v27 = (void *)*((_QWORD *)v25 - 3);
        v25 -= 24;
        v26 = v27;
        if (v27)
        {
          *((_QWORD *)v23 - 2) = v26;
          operator delete(v26);
        }
        v23 = v25;
      }
      while (v25 != v22);
      v24 = __p;
    }
    v33 = v22;
    operator delete(v24);
    v17 = v34;
  }
  if (v17)
  {
    v35 = v17;
    operator delete(v17);
  }
  if (v37)
    operator delete(v37);
  nullsub_4(&v40);
  return sub_2397A2E14(v47);
}

void sub_239554CB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, int a20,char a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40)
{
  if (__p)
    operator delete(__p);
  nullsub_4(&a21);
  sub_2397A2E14(&a40);
  _Unwind_Resume(a1);
}

void **sub_239554DA4(void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  char *v5;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        v5 = v3 - 88;
        sub_239416DA0((uint64_t)(v3 - 80));
        nullsub_4(v5);
        v3 = v5;
      }
      while (v5 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_239554E10(uint64_t a1)
{
  _QWORD *v2;
  void *v3;
  void *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v6 = (_QWORD *)*v2;
      v7 = v2[3];
      if (v7)
      {
        v8 = v2[4];
        v5 = (void *)v2[3];
        if (v8 != v7)
        {
          v9 = v2[4];
          do
          {
            v11 = *(void **)(v9 - 24);
            v9 -= 24;
            v10 = v11;
            if (v11)
            {
              *(_QWORD *)(v8 - 16) = v10;
              operator delete(v10);
            }
            v8 = v9;
          }
          while (v9 != v7);
          v5 = (void *)v2[3];
        }
        v2[4] = v7;
        operator delete(v5);
      }
      operator delete(v2);
      v2 = v6;
    }
    while (v6);
  }
  v3 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v3)
    operator delete(v3);
  return a1;
}

void sub_239554EB8(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, char a5, unint64_t *a6, void *a7)
{
  id v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  _QWORD *v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  void *__p;
  void *v28;
  char *v29;
  char v30;
  uint64_t v31;
  int v32;
  char v33;
  uint64_t v34;
  _QWORD v35[3];
  _QWORD *v36;
  _QWORD v37[3];
  _QWORD *v38;
  _QWORD v39[3];
  _QWORD *v40;
  uint64_t v41;

  v41 = *MEMORY[0x24BDAC8D0];
  v13 = a7;
  v15 = *a2;
  v14 = a2[1];
  v16 = objc_retainAutorelease(v13);
  v34 = objc_msgSend(v16, "contents");
  v33 = a5 ^ 1;
  v31 = 0;
  v32 = 0;
  v30 = 1;
  v17 = operator new(0x40uLL);
  *v17 = &off_250ADDE68;
  v17[1] = a2;
  v18 = 0xCCCCCCCCCCCCCCCDLL * ((v14 - v15) >> 3);
  v17[2] = a4;
  v17[3] = a3;
  v17[4] = a1;
  v17[5] = &v33;
  v17[6] = &v34;
  v17[7] = &v31;
  v40 = v17;
  sub_2397A376C(a6, v18, v39, 0);
  v19 = v40;
  if (v40 == v39)
  {
    v20 = 4;
    v19 = v39;
  }
  else
  {
    if (!v40)
      goto LABEL_6;
    v20 = 5;
  }
  (*(void (**)(void))(*v19 + 8 * v20))();
LABEL_6:
  __p = 0;
  v28 = 0;
  v29 = 0;
  if (v14 != v15)
  {
    if (v14 - v15 < 0)
      sub_2394189F8();
    __p = operator new(0x6666666666666667 * ((v14 - v15) >> 3));
    v29 = (char *)__p + 0x6666666666666667 * ((v14 - v15) >> 3);
    bzero(__p, 0x6666666666666667 * ((v14 - v15) >> 3));
    v28 = v29;
  }
  v38 = 0;
  v21 = operator new(0x30uLL);
  *v21 = &off_250ADDEB0;
  v21[1] = a2;
  v21[2] = a4;
  v21[3] = a3;
  v21[4] = &v34;
  v21[5] = &__p;
  v38 = v21;
  sub_2397A376C(a6, v18, v37, 0);
  v22 = v38;
  if (v38 == v37)
  {
    v23 = 4;
    v22 = v37;
  }
  else
  {
    if (!v38)
      goto LABEL_14;
    v23 = 5;
  }
  (*(void (**)(void))(*v22 + 8 * v23))();
LABEL_14:
  v36 = 0;
  v24 = operator new(0x48uLL);
  *v24 = &off_250ADDEF8;
  v24[1] = a2;
  v24[2] = &v30;
  v24[3] = &v34;
  v24[4] = &__p;
  v24[5] = a4;
  v24[6] = a3;
  v24[7] = &v33;
  v24[8] = &v31;
  v36 = v24;
  sub_2397A376C(a6, v18, v35, 0);
  v25 = v36;
  if (v36 == v35)
  {
    v26 = 4;
    v25 = v35;
  }
  else
  {
    if (!v36)
      goto LABEL_19;
    v26 = 5;
  }
  (*(void (**)(void))(*v25 + 8 * v26))();
LABEL_19:
  objc_msgSend(v16, "length");
  nullsub_4(v16);
  if (__p)
  {
    v28 = __p;
    operator delete(__p);
  }

}

void sub_23955515C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, char *a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  void *v28;
  char *v29;
  char *v31;
  uint64_t v32;

  v31 = a20;
  if (a20 == v29)
  {
    v32 = 4;
    v31 = &a17;
  }
  else
  {
    if (!a20)
      goto LABEL_6;
    v32 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v31 + 8 * v32))();
LABEL_6:
  if (__p)
    operator delete(__p);

  _Unwind_Resume(a1);
}

BOOL sub_23955521C(uint64_t a1, void *a2, uint64_t a3, uint64_t *a4, uint64_t *a5, uint64_t a6, _DWORD *a7, void *a8, void *a9, void *a10, void *a11, void *a12)
{
  id v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int *v28;
  unsigned int *v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  unint64_t v34;
  _DWORD *v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  id v45;
  id v46;
  void *v47;
  id v48;
  id v49;
  id v50;

  v45 = a2;
  v49 = a8;
  v18 = a9;
  v46 = a10;
  v48 = a11;
  v50 = a12;
  v19 = sub_23953674C(a1, 3);
  sub_2397A9494((uint64_t)v19);
  v47 = (void *)objc_claimAutoreleasedReturnValue();
  if (!*(_BYTE *)(a3 + 232))
    sub_2394875CC();
  v20 = *(_QWORD *)(a3 + 208) + 912 * a6;
  v21 = *(unsigned int *)(v20 + 184);
  v22 = *(unsigned int *)(v20 + 188);
  v23 = objc_retainAutorelease(v18);
  v24 = objc_msgSend(v23, "contents");
  v25 = objc_retainAutorelease(v46);
  v26 = objc_msgSend(v25, "contents");
  if (!*(_BYTE *)(a3 + 232))
    sub_2394875CC();
  v27 = *(_QWORD *)(a3 + 208) + 912 * a6;
  v28 = *(unsigned int **)(v27 + 24);
  v29 = *(unsigned int **)(v27 + 32);
  if (v28 == v29)
    goto LABEL_15;
  v30 = *a4;
  v31 = *a5;
  if (!*(_BYTE *)(a3 + 200))
  {
    do
    {
      v36 = *v28;
      v37 = v36 >> 6;
      v38 = 1 << v36;
      if ((v38 & *(_QWORD *)(v30 + 8 * v37)) != 0 && (*(_QWORD *)(v31 + 8 * v37) & v38) == 0)
        sub_2394875CC();
      ++v28;
    }
    while (v28 != v29);
LABEL_15:
    v32 = 0;
    goto LABEL_16;
  }
  v32 = 0;
  v33 = *(_QWORD *)(a3 + 176);
  do
  {
    v34 = *v28;
    if (((1 << v34) & *(_QWORD *)(v30 + 8 * (v34 >> 6))) != 0
      && (*(_QWORD *)(v31 + 8 * (v34 >> 6)) & (1 << v34)) == 0)
    {
      v35 = (_DWORD *)(v33 + 12 * v34);
      *(_DWORD *)(v24 + 12 * v32) = *v35;
      *(_DWORD *)(v24 + 4 * (3 * v32 + 1)) = v35[1];
      *(_DWORD *)(v24 + 4 * (3 * v32 + 2)) = v35[2];
      *(_DWORD *)(v26 + 4 * v32++) = v34;
    }
    ++v28;
  }
  while (v28 != v29);
LABEL_16:
  nullsub_4(v23);
  nullsub_4(v25);
  *a7 = 3 * v32;
  if (v32)
  {
    v39 = (void *)objc_opt_new();
    objc_msgSend(v39, "colorAttachments");
    v40 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v40, "objectAtIndexedSubscript:", 0);
    v41 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v41, "setTexture:", v50);
    objc_msgSend(v41, "setLoadAction:", 2);
    objc_msgSend(v41, "setStoreAction:", 1);
    objc_msgSend(v41, "setClearColor:", 0.0, 0.0, 0.0, 0.0);

    objc_msgSend(v39, "setRenderTargetWidth:", v21);
    objc_msgSend(v39, "setRenderTargetHeight:", v22);
    objc_msgSend(v39, "setRenderTargetArrayLength:", 1);
    objc_msgSend(v39, "setDefaultRasterSampleCount:", 1);
    objc_msgSend(v45, "renderCommandEncoderWithDescriptor:", v39);
    v42 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v42, "setRenderPipelineState:", v47);
    objc_msgSend(v42, "setVertexBuffer:offset:atIndex:", v49, 0, 0);
    objc_msgSend(v42, "setFragmentBuffer:offset:atIndex:", v25, 0, 0);
    objc_msgSend(v42, "setFragmentBuffer:offset:atIndex:", v48, 0, 1);
    objc_msgSend(v42, "drawIndexedPrimitives:indexCount:indexType:indexBuffer:indexBufferOffset:", 3, 3 * v32, 1, v23, 0);
    objc_msgSend(v42, "endEncoding");

  }
  return v32 != 0;
}

void sub_2395555A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16)
{
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

void sub_23955564C(uint64_t a1, void *a2, uint64_t *a3, void *a4, void *a5, void *a6)
{
  id v11;
  id v12;
  id v13;
  id v14;
  uint64_t *v15;
  void *v16;
  unint64_t v17;
  unint64_t v18;
  void *v19;
  uint64_t v20;
  _QWORD v21[3];
  _QWORD v22[3];

  v11 = a2;
  v12 = a4;
  v13 = a5;
  v14 = a6;
  v15 = sub_239536660(a1, 24);
  sub_2397A9494((uint64_t)v15);
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  v17 = objc_msgSend(v16, "threadExecutionWidth");
  v18 = objc_msgSend(v16, "maxTotalThreadsPerThreadgroup");
  v20 = *a3;
  objc_msgSend(v11, "computeCommandEncoder");
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v19, "setTexture:atIndex:", v13, 0);
  objc_msgSend(v19, "setTexture:atIndex:", v14, 1);
  objc_msgSend(v19, "setBytes:length:atIndex:", a3, 8, 0);
  objc_msgSend(v19, "setBuffer:offset:atIndex:", v12, 0, 1);
  objc_msgSend(v19, "setComputePipelineState:", v16);
  v22[0] = ((int)v17 + (int)v20 - 1) / v17;
  v22[1] = ((v18 / v17) + HIDWORD(v20) - 1) / (v18 / v17);
  v22[2] = 1;
  v21[0] = v17;
  v21[1] = v18 / v17;
  v21[2] = 1;
  objc_msgSend(v19, "dispatchThreadgroups:threadsPerThreadgroup:", v22, v21);
  objc_msgSend(v19, "endEncoding");

}

void sub_2395557C0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_23955581C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, void *a7, void *a8, void *a9)
{
  id v16;
  id v17;
  id v18;
  id v19;
  uint64_t *v20;
  void *v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  _DWORD *v25;
  _DWORD *v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  _DWORD *v32;
  uint64_t v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;

  v16 = a2;
  v17 = a7;
  v18 = a8;
  v19 = a9;
  if (!*(_BYTE *)(a3 + 232))
    sub_2394875CC();
  v38 = *(_QWORD *)(*(_QWORD *)(a3 + 208) + 912 * a4 + 184);
  v39 = v38;
  v20 = sub_23953674C(a1, 4);
  sub_2397A9494((uint64_t)v20);
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  v22 = objc_retainAutorelease(v17);
  v23 = objc_msgSend(v22, "contents");
  if (!*(_BYTE *)(a3 + 232))
    sub_2394875CC();
  v24 = *(_QWORD *)(a3 + 208) + 912 * a4;
  v25 = *(_DWORD **)(v24 + 24);
  v26 = *(_DWORD **)(v24 + 32);
  if (v25 == v26)
    goto LABEL_11;
  v27 = *a6;
  if (!*(_BYTE *)(a3 + 200))
  {
    do
    {
      if (((*(_QWORD *)(v27 + (((unint64_t)*v25 >> 3) & 0x1FFFFFF8)) >> *v25) & 1) == 0)
        sub_2394875CC();
      ++v25;
    }
    while (v25 != v26);
LABEL_11:
    v28 = 0;
    goto LABEL_12;
  }
  v28 = 0;
  v29 = v23 + 4 * a5;
  v30 = *(_QWORD *)(a3 + 176);
  do
  {
    v31 = *v25;
    if (((*(_QWORD *)(v27 + ((v31 >> 3) & 0x1FFFFFF8)) >> v31) & 1) == 0)
    {
      v32 = (_DWORD *)(v30 + 12 * v31);
      *(_DWORD *)(v29 + 4 * (3 * v28)) = *v32;
      *(_DWORD *)(v29 + 4 * (3 * v28 + 1)) = v32[1];
      *(_DWORD *)(v29 + 4 * (3 * v28++ + 2)) = v32[2];
    }
    ++v25;
  }
  while (v25 != v26);
LABEL_12:
  v33 = (3 * v28);
  nullsub_4(v22);
  v34 = (void *)objc_opt_new();
  objc_msgSend(v34, "colorAttachments");
  v35 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v35, "objectAtIndexedSubscript:", 0);
  v36 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v36, "setTexture:", v19);
  objc_msgSend(v36, "setLoadAction:", 1);
  objc_msgSend(v36, "setStoreAction:", 1);

  objc_msgSend(v34, "setRenderTargetWidth:", v38);
  objc_msgSend(v34, "setRenderTargetHeight:", HIDWORD(v38));
  objc_msgSend(v34, "setRenderTargetArrayLength:", 1);
  objc_msgSend(v34, "setDefaultRasterSampleCount:", 1);
  objc_msgSend(v16, "renderCommandEncoderWithDescriptor:", v34);
  v37 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v37, "setRenderPipelineState:", v21);
  objc_msgSend(v37, "setVertexBuffer:offset:atIndex:", v18, 0, 0);
  objc_msgSend(v37, "setFragmentBytes:length:atIndex:", &v39, 8, 0);
  objc_msgSend(v37, "drawIndexedPrimitives:indexCount:indexType:indexBuffer:indexBufferOffset:", 3, v33, 1, v22, 4 * a5);
  objc_msgSend(v37, "endEncoding");

}

void sub_239555AE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

uint64_t sub_239555B68(uint64_t result, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  uint64_t v9;
  unint64_t v10;
  unsigned int *v11;
  uint64_t v12;
  float *v13;
  float v14;
  float v15;
  uint64_t v16;
  float *v17;
  float v18;
  float v19;
  uint64_t v20;
  float *v21;
  float v22;
  float v23;

  if (!*(_BYTE *)(result + 232) || (v4 = *(_QWORD *)(result + 208), v5 = v4 + 912 * a2, !*(_BYTE *)(v5 + 208)))
LABEL_13:
    sub_2394875CC();
  v6 = v4 + 912 * a2;
  v7 = *(unsigned int **)(v6 + 24);
  v8 = *(unsigned int **)(v6 + 32);
  if (v7 != v8)
  {
    v9 = v5 + 48;
    do
    {
      v10 = *v7;
      if (((*(_QWORD *)(*a3 + ((v10 >> 3) & 0x1FFFFFF8)) >> v10) & 1) != 0)
      {
        if (!*(_BYTE *)(result + 200))
          goto LABEL_13;
        if (!*(_BYTE *)(result + 168))
          goto LABEL_13;
        v11 = (unsigned int *)(*(_QWORD *)(result + 176) + 12 * v10);
        v12 = *v11;
        v13 = (float *)(*(_QWORD *)(result + 144) + 8 * v12);
        v14 = v13[1];
        LODWORD(v13) = (float)(*v13 * (float)*(unsigned int *)(v9 + 136));
        v15 = (float)(1.0 - v14) * (float)*(unsigned int *)(v9 + 140);
        v12 *= 3;
        *(_BYTE *)(*a4 + v12) = *(_BYTE *)(*(_QWORD *)(v9 + 104)
                                         + *(_DWORD *)(v9 + 144) * (_DWORD)v13
                                         + *(_DWORD *)(v9 + 148) * v15);
        *(_BYTE *)(*a4 + v12 + 1) = *(_BYTE *)(*(_QWORD *)(v9 + 104)
                                             + *(_DWORD *)(v9 + 144) * (_DWORD)v13
                                             + *(_DWORD *)(v9 + 148) * v15
                                             + 1);
        *(_BYTE *)(*a4 + v12 + 2) = *(_BYTE *)(*(_QWORD *)(v9 + 104)
                                             + *(_DWORD *)(v9 + 144) * (_DWORD)v13
                                             + *(_DWORD *)(v9 + 148) * v15
                                             + 2);
        if (!*(_BYTE *)(result + 168))
          goto LABEL_13;
        v16 = v11[1];
        v17 = (float *)(*(_QWORD *)(result + 144) + 8 * v16);
        v18 = v17[1];
        LODWORD(v17) = (float)(*v17 * (float)*(unsigned int *)(v9 + 136));
        v19 = (float)(1.0 - v18) * (float)*(unsigned int *)(v9 + 140);
        v16 *= 3;
        *(_BYTE *)(*a4 + v16) = *(_BYTE *)(*(_QWORD *)(v9 + 104)
                                         + *(_DWORD *)(v9 + 144) * (_DWORD)v17
                                         + *(_DWORD *)(v9 + 148) * v19);
        *(_BYTE *)(*a4 + v16 + 1) = *(_BYTE *)(*(_QWORD *)(v9 + 104)
                                             + *(_DWORD *)(v9 + 144) * (_DWORD)v17
                                             + *(_DWORD *)(v9 + 148) * v19
                                             + 1);
        *(_BYTE *)(*a4 + v16 + 2) = *(_BYTE *)(*(_QWORD *)(v9 + 104)
                                             + *(_DWORD *)(v9 + 144) * (_DWORD)v17
                                             + *(_DWORD *)(v9 + 148) * v19
                                             + 2);
        if (!*(_BYTE *)(result + 168))
          goto LABEL_13;
        v20 = v11[2];
        v21 = (float *)(*(_QWORD *)(result + 144) + 8 * v20);
        v22 = v21[1];
        LODWORD(v21) = (float)(*v21 * (float)*(unsigned int *)(v9 + 136));
        v23 = (float)(1.0 - v22) * (float)*(unsigned int *)(v9 + 140);
        v20 *= 3;
        *(_BYTE *)(*a4 + v20) = *(_BYTE *)(*(_QWORD *)(v9 + 104)
                                         + *(_DWORD *)(v9 + 144) * (_DWORD)v21
                                         + *(_DWORD *)(v9 + 148) * v23);
        *(_BYTE *)(*a4 + v20 + 1) = *(_BYTE *)(*(_QWORD *)(v9 + 104)
                                             + *(_DWORD *)(v9 + 144) * (_DWORD)v21
                                             + *(_DWORD *)(v9 + 148) * v23
                                             + 1);
        *(_BYTE *)(*a4 + v20 + 2) = *(_BYTE *)(*(_QWORD *)(v9 + 104)
                                             + *(_DWORD *)(v9 + 144) * (_DWORD)v21
                                             + *(_DWORD *)(v9 + 148) * v23
                                             + 2);
      }
      ++v7;
    }
    while (v7 != v8);
  }
  return result;
}

void sub_239555DD8(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t a5, unsigned int a6, char a7, uint64_t a8, _QWORD *a9)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  long double v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  void *v23;
  id v24;
  id v25;
  void *v26;
  id v27;
  id v28;
  id v29;
  id v30;
  int v31;
  int v32;
  unsigned int v33;
  double v34;
  unsigned int v35;
  void *v36;
  id v37;
  const void *v38;
  char *v39;
  char *v40;
  void *v41;
  void *v42;
  char *v43;
  char *v44;
  void *v45;
  void *v46;
  void *context;
  void *v48;
  int v49;
  uint64_t v50;
  void *v52;
  void *v53;
  void *v54;
  id v55;
  id v56;
  void *v57;
  void *v58;
  int v59;
  void *v60;
  uint64_t v61;
  void *v63;
  void *v64;
  void *v65;
  void *v66;
  void *v67;
  uint64_t v70;
  void *v71;
  unint64_t v72;
  uint64_t v73;
  int v74;
  unsigned int v75;
  uint64_t v76;
  void *__p;
  char *v78;
  uint64_t v79;
  void *v80;
  char *v81;
  uint64_t v82;
  unint64_t v83[46];

  v83[44] = *MEMORY[0x24BDAC8D0];
  context = (void *)MEMORY[0x23B83EC40]();
  v70 = a1;
  nullsub_4(a1);
  sub_2397A9494(v13);
  v48 = (void *)objc_claimAutoreleasedReturnValue();
  v14 = sub_2397A9F50(a1);
  sub_2397A9494(v14);
  v57 = (void *)objc_claimAutoreleasedReturnValue();
  if (!*(_BYTE *)(a8 + 232))
    sub_2394875CC();
  v72 = *(_QWORD *)(*(_QWORD *)(a8 + 208) + 184);
  v59 = v72;
  v49 = HIDWORD(v72);
  v15 = (HIDWORD(v72) * v72);
  v55 = (id)objc_msgSend(v48, "newBufferWithLength:options:", (4 * v15), 0);
  v56 = (id)objc_msgSend(v48, "newBufferWithLength:options:", v15, 0);
  v52 = (void *)objc_msgSend(v48, "newBufferWithLength:options:", (4 * v15), 0);
  if (HIDWORD(v72) >= v72)
    v16 = v72;
  else
    v16 = HIDWORD(v72);
  v17 = log2((double)v16);
  v80 = 0;
  v81 = 0;
  v82 = 0;
  __p = 0;
  v78 = 0;
  v79 = 0;
  v83[0] = v72;
  sub_23955D808(v48, &__p, &v80, (v17 + -1.0), v83, 1);
  if (!*(_BYTE *)(a8 + 168))
    sub_2394875CC();
  v65 = (void *)objc_msgSend(v48, "newBufferWithBytes:length:options:", *(_QWORD *)(a8 + 144), *(_QWORD *)(a8 + 152) - *(_QWORD *)(a8 + 144), 0);
  v64 = (void *)objc_msgSend(v48, "newBufferWithLength:options:", *(_QWORD *)(a8 + 32) - *(_QWORD *)(a8 + 24), 0);
  v54 = (void *)objc_msgSend(v48, "newBufferWithLength:options:", *(_QWORD *)(a8 + 32) - *(_QWORD *)(a8 + 24), 0);
  v58 = (void *)objc_msgSend(v48, "newBufferWithLength:options:", (uint64_t)(*(_QWORD *)(a8 + 32) - *(_QWORD *)(a8 + 24)) >> 2, 0);
  objc_msgSend(MEMORY[0x24BDDD740], "texture2DDescriptorWithPixelFormat:width:height:mipmapped:", 13, v72, HIDWORD(v72), 0);
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v18, "setUsage:", 7);
  v19 = objc_msgSend(v48, "newTextureWithDescriptor:", v18);
  v20 = objc_msgSend(v48, "newTextureWithDescriptor:", v18);
  v53 = (void *)objc_msgSend(v48, "newTextureWithDescriptor:", v18);
  v66 = (void *)v20;
  v71 = (void *)v19;

  objc_msgSend(MEMORY[0x24BDDD740], "texture2DDescriptorWithPixelFormat:width:height:mipmapped:", 73, v72, HIDWORD(v72), 0);
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v21, "setUsage:", 7);
  v67 = (void *)objc_msgSend(v48, "newTextureWithDescriptor:", v21);

  sub_2397A2A50((uint64_t)v83, a6, 0);
  sub_239554EB8(a8, a2, (uint64_t)a3, a5, a7, v83, v58);
  if (!*(_BYTE *)(a8 + 232))
    sub_2394875CC();
  v22 = *(_QWORD *)(a8 + 208);
  v50 = *(_QWORD *)(a8 + 216);
  if (v22 != v50)
  {
    v73 = 0;
    do
    {
      objc_msgSend(v57, "commandBuffer");
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      v76 = *(_QWORD *)(v22 + 184);
      v24 = objc_retainAutorelease(v56);
      bzero((void *)objc_msgSend(v24, "contents"), objc_msgSend(v24, "length"));
      objc_msgSend(v24, "length");
      nullsub_4(v24);
      v25 = objc_retainAutorelease(v55);
      v26 = (void *)objc_msgSend(v25, "contents");
      if (*(_BYTE *)(v22 + 200) && *(_QWORD *)(v22 + 104))
        (*(void (**)(_QWORD, uint64_t, const char *))(**(_QWORD **)(v22 + 80) + 88))(*(_QWORD *)(v22 + 80), 1, "unknown location");
      memcpy(v26, *(const void **)(v22 + 104), (3 * HIDWORD(v76) * v76));
      objc_msgSend(v25, "length");
      nullsub_4(v25);
      v75 = 0;
      if (!sub_23955521C(v70, v23, a8, a3, a4, v73, &v75, v65, v64, v54, v58, v67))
        sub_23955D620(v70, v23, v67);
      sub_23955564C(v70, v23, &v76, v25, v67, v71);
      objc_msgSend(v23, "blitCommandEncoder");
      v61 = v22;
      v63 = v23;
      v60 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v60, "copyFromTexture:toTexture:", v71, v66);
      objc_msgSend(v60, "endEncoding");
      v27 = v25;
      v28 = v52;
      v29 = v66;
      v30 = v53;
      sub_23955E308(v70, v63, v29, v30, v27, v28, &v76);
      sub_23955E308(v70, v63, v30, v29, v28, v27, &v76);
      sub_23955E308(v70, v63, v29, v30, v27, v28, &v76);
      sub_23955581C(v70, v63, a8, v73, v75, a3, v64, v65, v71);
      v31 = HIDWORD(v76);
      v32 = v76;
      if (HIDWORD(v76) >= v76)
        v33 = v76;
      else
        v33 = HIDWORD(v76);
      v34 = log2((double)v33) + -1.0;
      v35 = v34;
      if (v32 != v59 || v31 != v49)
        sub_23955D808(v48, &__p, &v80, v34, &v76, 1);
      v74 = 0;
      sub_23955DA4C(v70, v63, v71, v28, v27, (_QWORD **)&v80, &__p, &v76, (uint64_t)&v74, v35, 0);
      nullsub_4(v63);
      sub_23971DB68();
      objc_msgSend(v63, "commit");
      objc_msgSend(v63, "waitUntilCompleted");
      v36 = *(void **)(v22 + 104);
      if (*(_BYTE *)(v22 + 200) && v36)
      {
        (*(void (**)(_QWORD, uint64_t, const char *))(**(_QWORD **)(v22 + 80) + 88))(*(_QWORD *)(v22 + 80), 1, "unknown location");
        v36 = *(void **)(v22 + 104);
      }
      v37 = objc_retainAutorelease(v28);
      v38 = (const void *)objc_msgSend(v37, "contents");
      memcpy(v36, v38, (3 * HIDWORD(v76) * v76));
      if (a9[1] != *a9)
        sub_239555B68(a8, v73, a3, a9);

      v22 += 912;
      ++v73;
    }
    while (v61 + 912 != v50);
  }
  sub_2397A2E14(v83);

  v39 = (char *)__p;
  if (__p)
  {
    v40 = v78;
    v41 = __p;
    if (v78 != __p)
    {
      do
      {
        v42 = (void *)*((_QWORD *)v40 - 2);
        v40 -= 16;

      }
      while (v40 != v39);
      v41 = __p;
    }
    v78 = v39;
    operator delete(v41);
  }
  v43 = (char *)v80;
  if (v80)
  {
    v44 = v81;
    v45 = v80;
    if (v81 != v80)
    {
      do
      {
        v46 = (void *)*((_QWORD *)v44 - 2);
        v44 -= 16;

      }
      while (v44 != v43);
      v45 = v80;
    }
    v81 = v43;
    operator delete(v45);
  }

  objc_autoreleasePoolPop(context);
}

void sub_23955659C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, void *a20,void *a21,void *a22,void *a23,void *a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,void *a32,void *a33,void *a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47,uint64_t a48,char a49)
{
  sub_2397A2E14(&a49);

  sub_23952CAE4(&a43);
  sub_23952CAE4(&a46);

  _Unwind_Resume(a1);
}

uint64_t sub_239556728(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, _QWORD *a8, uint64_t a9, char **a10, uint64_t a11, char a12)
{
  _QWORD *v20;
  uint64_t v21;
  char *v22;
  __int128 v23;
  __int128 v24;
  _QWORD *v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *p_shared_owners;
  unint64_t v35;
  void *v36;
  unint64_t v37;
  char *v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  const void *v53;
  int64_t v54;
  void **v55;
  void **v56;
  uint64_t *v57;
  _QWORD *v58;
  _QWORD *v59;
  __int128 v60;
  unint64_t v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  uint32x2_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  _QWORD *v74;
  _QWORD *v75;
  unint64_t v76;
  double v77;
  float64x2_t v78;
  double v79;
  double v80;
  double v81;
  double v82;
  double v83;
  double v84;
  double v85;
  float64x2_t v86;
  _QWORD *v87;
  unsigned int v88;
  int v89;
  _BYTE *v90;
  char *v91;
  unint64_t v92;
  unsigned int v93;
  char *v94;
  _QWORD *v95;
  _QWORD *v96;
  void *v97;
  void *v98;
  _BYTE *v99;
  char *v100;
  unint64_t v101;
  unsigned int v102;
  char *v103;
  _QWORD *v104;
  _QWORD *v105;
  void *v106;
  void *v107;
  char v108;
  _QWORD *v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  char *v113;
  void *v114;
  _QWORD *v115;
  _QWORD *v116;
  void *v117;
  void *v118;
  char *v119;
  char *v120;
  void *v121;
  _QWORD *v122;
  _QWORD *v123;
  void *v124;
  void *v125;
  char *v126;
  char *v127;
  void *v128;
  char *v129;
  void *v130;
  void *v131;
  _QWORD *v132;
  _QWORD *v133;
  void *v134;
  void **v135;
  void **v136;
  void *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  void *__p[2];
  char v142;
  uint64_t v143;
  int v144;
  int v145;
  char v146;
  int v147;
  void *v148;
  void *v149;
  uint64_t v150;
  void *v151;
  unint64_t v152;
  unint64_t v153;
  void *v154;
  void *v155;
  uint64_t v156;
  void *v157;
  char *v158;
  uint64_t v159;
  void *v160;
  char *v161;
  uint64_t v162;
  void *v163;
  char *v164;
  uint64_t v165;
  void *v166;
  unint64_t v167;
  void *v168;
  void *v169;
  char *v170;
  void *v171[2];
  void *v172[2];
  int v173;
  void *v174[2];
  __int128 v175;
  int v176;
  void *v177;
  void **v178;
  uint64_t v179;
  uint64_t v180[2];
  std::__shared_weak_count *v181;
  std::__shared_weak_count *v182;
  std::__shared_weak_count *v183;
  __int128 v184;
  std::__shared_weak_count *v185;
  __int128 v186;
  __int128 v187;
  _BYTE v188[24];
  _BYTE *v189;
  unint64_t v190[18];
  char v191;
  char v192;
  char v193;
  char v194;
  char v195;
  char v196;
  char v197;
  char v198;
  _BYTE v199[24];
  _BYTE *v200;
  _QWORD v201[71];
  _BYTE v202[24];
  _BYTE *v203;
  _BYTE v204[568];
  uint64_t v205;

  v205 = *MEMORY[0x24BDAC8D0];
  kdebug_trace();
  v140 = (uint64_t)a8;
  sub_2396FD800(a8, (uint64_t)v202);
  v201[0] = 0x42C8000000000000;
  sub_2396FCC68(v204, 100, v202, v201, 1.0);
  v20 = v203;
  if (v203 == v202)
  {
    v21 = 4;
    v20 = v202;
  }
  else
  {
    if (!v203)
      goto LABEL_6;
    v21 = 5;
  }
  (*(void (**)(void))(*v20 + 8 * v21))();
LABEL_6:
  sub_2396FD534(&v184, v204, 50);
  v200 = 0;
  v22 = (char *)operator new(0x40uLL);
  *(_QWORD *)v22 = &off_250ADB9D8;
  *(_OWORD *)(v22 + 8) = v184;
  *((_QWORD *)v22 + 3) = v185;
  *((_QWORD *)&v184 + 1) = 0;
  v185 = 0;
  v23 = v186;
  v186 = 0uLL;
  v24 = v187;
  *((_OWORD *)v22 + 2) = v23;
  *((_OWORD *)v22 + 3) = v24;
  v187 = 0uLL;
  v200 = v22;
  v190[0] = 0x42C8000000000000;
  sub_2396FCC68(v201, 1, v199, v190, 1.0);
  v25 = v200;
  if (v200 == v199)
  {
    v26 = 4;
    v25 = v199;
    goto LABEL_10;
  }
  if (v200)
  {
    v26 = 5;
LABEL_10:
    (*(void (**)(void))(*v25 + 8 * v26))();
  }
  v27 = (std::__shared_weak_count *)*((_QWORD *)&v187 + 1);
  if (*((_QWORD *)&v187 + 1))
  {
    v28 = (unint64_t *)(*((_QWORD *)&v187 + 1) + 8);
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  v30 = (std::__shared_weak_count *)*((_QWORD *)&v186 + 1);
  if (*((_QWORD *)&v186 + 1))
  {
    v31 = (unint64_t *)(*((_QWORD *)&v186 + 1) + 8);
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  v33 = v185;
  if (v185)
  {
    p_shared_owners = (unint64_t *)&v185->__shared_owners_;
    do
      v35 = __ldaxr(p_shared_owners);
    while (__stlxr(v35 - 1, p_shared_owners));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  sub_2396FD534(v180, v204, 50);
  if ((sub_2396FD7B0((uint64_t)a8) & 1) != 0 || *(float *)(a6 + 100) <= 0.0 || !*(_QWORD *)(a5 + 24))
  {
    v42 = 0;
    v43 = v183;
    if (!v183)
      goto LABEL_44;
    goto LABEL_40;
  }
  sub_2394ED554(v190, (uint64_t)a1);
  v191 = 0;
  v192 = 0;
  v193 = 0;
  v194 = 0;
  v195 = 0;
  v196 = 0;
  v197 = 0;
  v198 = 0;
  sub_239557804(a9, (uint64_t)v190);
  sub_2394EEFC0((uint64_t)v190);
  if (!*(_BYTE *)(a9 + 168))
  {
    *(_QWORD *)(a9 + 144) = 0;
    *(_QWORD *)(a9 + 152) = 0;
    *(_QWORD *)(a9 + 160) = 0;
    *(_BYTE *)(a9 + 168) = 1;
  }
  v138 = a4;
  if (!*(_BYTE *)(a9 + 200))
  {
    *(_QWORD *)(a9 + 176) = 0;
    *(_QWORD *)(a9 + 184) = 0;
    *(_QWORD *)(a9 + 192) = 0;
    *(_BYTE *)(a9 + 200) = 1;
  }
  v36 = *(void **)(a9 + 144);
  *(_QWORD *)(a9 + 152) = v36;
  v37 = (uint64_t)(a1[4] - a1[3]) >> 2;
  if (v37 > (uint64_t)(*(_QWORD *)(a9 + 160) - (_QWORD)v36) >> 3)
  {
    if (v37 >> 61)
      sub_2394189F8();
    v38 = (char *)operator new(8 * v37);
    *(_QWORD *)(a9 + 144) = v38;
    *(_QWORD *)(a9 + 152) = v38;
    *(_QWORD *)(a9 + 160) = &v38[8 * v37];
    if (v36)
    {
      operator delete(v36);
      if (!*(_BYTE *)(a9 + 200))
        sub_2394875CC();
    }
  }
  v39 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[4] - a1[3]) >> 2);
  v40 = *(_QWORD *)(a9 + 176);
  v41 = 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a9 + 184) - v40) >> 2);
  if (v39 <= v41)
  {
    if (v39 < v41)
      *(_QWORD *)(a9 + 184) = v40 + 4 * ((uint64_t)(a1[4] - a1[3]) >> 2);
  }
  else
  {
    sub_2394E6878((char **)(a9 + 176), v39 - v41);
  }
  sub_2397A2A50((uint64_t)v190, *(_DWORD *)(a6 + 72), 0);
  v177 = 0;
  v178 = 0;
  v179 = 0;
  *(_OWORD *)v174 = 0u;
  v175 = 0u;
  v176 = 1065353216;
  *(_OWORD *)v171 = 0u;
  *(_OWORD *)v172 = 0u;
  v173 = 1065353216;
  v168 = 0;
  v169 = 0;
  v170 = 0;
  v53 = *(const void **)a3;
  v54 = *(_QWORD *)(a3 + 8) - *(_QWORD *)a3;
  if (v54)
  {
    if (v54 < 0)
      sub_2394189F8();
    v168 = operator new(v54);
    v170 = (char *)v168 + 4 * (v54 >> 2);
    memcpy(v168, v53, v54);
    v169 = v170;
  }
  sub_23948C0E0(&v166, a7);
  v139 = a6;
  sub_2394B5624(a2, (uint64_t)&v177, 1);
  v55 = (void **)v177;
  v56 = v178;
  if (v177 != v178)
  {
    do
    {
      v160 = 0;
      v160 = *v55;
      v57 = sub_2394650AC(a2, (unint64_t)v160);
      v163 = &v160;
      v58 = sub_23955BDE0((uint64_t)v174, (uint64_t *)&v160, (uint64_t)&unk_239EC6E98, (_QWORD **)&v163);
      v59 = v58;
      v60 = *(_OWORD *)v57;
      *(_OWORD *)(v58 + 5) = *((_OWORD *)v57 + 1);
      *(_OWORD *)(v58 + 3) = v60;
      *((_BYTE *)v58 + 56) = *((_BYTE *)v57 + 32);
      if (v58 + 3 != v57)
      {
        v61 = *((unsigned int *)v57 + 14);
        sub_23945215C((uint64_t)(v58 + 8), v61);
        if ((_DWORD)v61)
          memcpy((void *)v59[8], (const void *)v57[5], 8 * v61);
        *((_DWORD *)v59 + 20) = *((_DWORD *)v57 + 14);
      }
      v62 = *((_OWORD *)v57 + 4);
      v63 = *((_OWORD *)v57 + 5);
      v64 = *((_OWORD *)v57 + 6);
      *(_OWORD *)(v59 + 17) = *((_OWORD *)v57 + 7);
      *(_OWORD *)(v59 + 15) = v64;
      *(_OWORD *)(v59 + 13) = v63;
      *(_OWORD *)(v59 + 11) = v62;
      v65 = *((_OWORD *)v57 + 8);
      v66 = *((_OWORD *)v57 + 9);
      v67 = *((_OWORD *)v57 + 10);
      *(_OWORD *)(v59 + 25) = *((_OWORD *)v57 + 11);
      *(_OWORD *)(v59 + 23) = v67;
      *(_OWORD *)(v59 + 21) = v66;
      *(_OWORD *)(v59 + 19) = v65;
      v68 = (uint32x2_t)sub_239470FCC(a2, v160)[25];
      v163 = &v160;
      sub_23955C280((uint64_t)v171, (unint64_t *)&v160, (uint64_t)&unk_239EC6E98, (_QWORD **)&v163)[3] = vcvt_f32_u32(v68);
      ++v55;
    }
    while (v55 != v56);
  }
  v163 = 0;
  v164 = 0;
  v165 = 0;
  if ((sub_2396C1F84(a1, &v163, 0, 0) & 1) == 0)
  {
    v42 = 0;
    goto LABEL_159;
  }
  v160 = 0;
  v161 = 0;
  v162 = 0;
  v157 = 0;
  v158 = 0;
  v159 = 0;
  v154 = 0;
  v155 = 0;
  v156 = 0;
  sub_239548EE0((_QWORD *)a9, a2, (uint64x2_t **)&v177, &v163, &v166, *(_DWORD *)(a6 + 72), (uint64_t *)&v168, (char **)&v160, &v154);
  sub_23954AA7C(&v163, a9, &v166, (char **)&v157);
  v70 = a1[3];
  v69 = a1[4];
  v152 = 0;
  v153 = 0;
  v151 = 0;
  v71 = v69 - v70;
  if (v71)
  {
    if (v71 < 0)
      sub_2394189F8();
    v72 = 0xAAAAAAAAAAAAAAABLL * (v71 >> 2);
    v73 = (v72 - 1) >> 6;
    v74 = operator new(8 * (v73 + 1));
    v75 = v74;
    v152 = v72;
    v153 = v73 + 1;
    v151 = v74;
    if (v72 >= 0x41)
      v76 = (v72 - 1) >> 6;
    else
      v76 = 0;
    v74[v76] = 0;
    if (v72 >= 0x40)
      bzero(v74, 8 * (v72 >> 6));
    if ((v72 & 0x3F) != 0)
      v75[v72 >> 6] &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v72 & 0x3F));
  }
  sub_23954AED4((uint64_t *)&v163, v190, (uint64_t *)&v168, (uint64_t *)&v160, &v157, (uint64_t *)&v166, (uint64_t *)&v151);
  sub_239549DE4(&v154, v171, v174, &v160, (uint64_t)&v157, &v166, a9, v77, v78);
  v87 = v166;
  if (v167 > 0x3F || (v167 & 0x3F) != 0)
  {
    v89 = 0;
    v88 = 0;
    do
    {
      v88 += (*v87 >> v89) & 1;
      v87 += v89 == 63;
      if (v89 == 63)
        v89 = 0;
      else
        ++v89;
    }
    while (v89 != (v167 & 0x3F) || v87 != (_QWORD *)((char *)v166 + 8 * (v167 >> 6)));
  }
  else
  {
    v88 = 0;
  }
  sub_23954B5D4((uint64_t *)&v157, v174, (uint64_t *)a9, &v168, v79, v80, v81, v82, v83, v84, v85, v86);
  if (a12)
    *(_QWORD *)(a11 + 24) = v88;
  sub_23954BF0C((uint64_t *)&v160, a9);
  if ((sub_23954C7F8((uint64_t *)a9, &v160) & 1) != 0
    && sub_23954C7F8((uint64_t *)a9, &v160)
    && sub_23954C7F8((uint64_t *)a9, &v160)
    && sub_23954C7F8((uint64_t *)a9, &v160))
  {
    sub_23954C7F8((uint64_t *)a9, &v160);
  }
  if ((sub_23954C7F8((uint64_t *)a9, &v157) & 1) != 0
    && sub_23954C7F8((uint64_t *)a9, &v157)
    && sub_23954C7F8((uint64_t *)a9, &v157)
    && sub_23954C7F8((uint64_t *)a9, &v157))
  {
    sub_23954C7F8((uint64_t *)a9, &v157);
  }
  v90 = v160;
  v91 = v161;
  if (v161 != v160)
  {
    v92 = 0;
    v93 = 0;
    do
    {
      while (1)
      {
        v94 = &v90[40 * v92];
        if (!*((_QWORD *)v94 + 3))
          break;
        v92 = ++v93;
        if (0xCCCCCCCCCCCCCCCDLL * ((v91 - v90) >> 3) <= v93)
          goto LABEL_109;
      }
      if (v94 != v91 - 40)
      {
        *((_DWORD *)v94 + 8) = *((_DWORD *)v91 - 2);
        sub_239558A08(v94, *((uint64_t **)v91 - 3), 0);
        v91 = v161;
      }
      v95 = (_QWORD *)*((_QWORD *)v91 - 3);
      if (v95)
      {
        do
        {
          v96 = (_QWORD *)*v95;
          operator delete(v95);
          v95 = v96;
        }
        while (v96);
      }
      v98 = (void *)*((_QWORD *)v91 - 5);
      v91 -= 40;
      v97 = v98;
      *(_QWORD *)v91 = 0;
      if (v98)
        operator delete(v97);
      v161 = v91;
      v90 = v160;
    }
    while (0xCCCCCCCCCCCCCCCDLL * ((v91 - (_BYTE *)v160) >> 3) > v92);
  }
LABEL_109:
  v99 = v157;
  v100 = v158;
  if (v158 != v157)
  {
    v101 = 0;
    v102 = 0;
    do
    {
      while (1)
      {
        v103 = &v99[40 * v101];
        if (!*((_QWORD *)v103 + 3))
          break;
        v101 = ++v102;
        if (0xCCCCCCCCCCCCCCCDLL * ((v100 - v99) >> 3) <= v102)
          goto LABEL_120;
      }
      if (v103 != v100 - 40)
      {
        *((_DWORD *)v103 + 8) = *((_DWORD *)v100 - 2);
        sub_239558A08(v103, *((uint64_t **)v100 - 3), 0);
        v100 = v158;
      }
      v104 = (_QWORD *)*((_QWORD *)v100 - 3);
      if (v104)
      {
        do
        {
          v105 = (_QWORD *)*v104;
          operator delete(v104);
          v104 = v105;
        }
        while (v105);
      }
      v107 = (void *)*((_QWORD *)v100 - 5);
      v100 -= 40;
      v106 = v107;
      *(_QWORD *)v100 = 0;
      if (v107)
        operator delete(v106);
      v158 = v100;
      v99 = v157;
    }
    while (0xCCCCCCCCCCCCCCCDLL * ((v100 - (_BYTE *)v157) >> 3) > v101);
  }
LABEL_120:
  v148 = 0;
  v149 = 0;
  v150 = 0;
  v146 = 1;
  v147 = 200;
  v143 = *(_QWORD *)(a6 + 88);
  v144 = *(_DWORD *)(a6 + 96);
  v145 = *(_DWORD *)(a6 + 100);
  if ((sub_23954E90C((uint64_t *)&v160, (uint64_t *)&v157, &v151, (unsigned int *)&v143, a9, (unint64_t *)&v148) & 1) == 0
    || (sub_2396FD7B0(v140) & 1) != 0)
  {
    goto LABEL_132;
  }
  sub_23941A4FC(__p, "");
  sub_2396FCDAC((uint64_t)v201, (__int128 *)__p, 1);
  if (v142 < 0)
    operator delete(__p[0]);
  sub_2394A4DCC((uint64_t)v188, a5);
  v108 = sub_2395534F0(v138, v174, v171, (uint64_t *)&v160, &v168, &v166, (uint64_t)v188, v180, *(_DWORD *)(a6 + 72), *(_BYTE *)(a6 + 20), *(_BYTE *)(a6 + 104), *(_QWORD *)(a6 + 80), a9, a10);
  v109 = v189;
  if (v189 == v188)
  {
    v111 = 4;
    v109 = v188;
    v110 = v139;
  }
  else
  {
    v110 = v139;
    if (!v189)
      goto LABEL_129;
    v111 = 5;
  }
  (*(void (**)(void))(*v109 + 8 * v111))();
LABEL_129:
  if ((v108 & 1) != 0)
  {
    sub_239555DD8(v138, (uint64_t *)&v157, (uint64_t *)&v166, (uint64_t *)&v151, (uint64_t)&v163, *(_DWORD *)(v110 + 72), *(_BYTE *)(v110 + 12), a9, a10);
    if (!*(_BYTE *)(a9 + 232))
      sub_2394875CC();
    kdebug_trace();
    v42 = 1;
    goto LABEL_133;
  }
LABEL_132:
  v42 = 0;
LABEL_133:
  if (v148)
  {
    v149 = v148;
    operator delete(v148);
  }
  if (v151)
    operator delete(v151);
  if (v154)
  {
    v155 = v154;
    operator delete(v154);
  }
  v112 = (char *)v157;
  if (v157)
  {
    v113 = v158;
    v114 = v157;
    if (v158 != v157)
    {
      do
      {
        v115 = (_QWORD *)*((_QWORD *)v113 - 3);
        if (v115)
        {
          do
          {
            v116 = (_QWORD *)*v115;
            operator delete(v115);
            v115 = v116;
          }
          while (v116);
        }
        v118 = (void *)*((_QWORD *)v113 - 5);
        v113 -= 40;
        v117 = v118;
        *(_QWORD *)v113 = 0;
        if (v118)
          operator delete(v117);
      }
      while (v113 != v112);
      v114 = v157;
    }
    v158 = v112;
    operator delete(v114);
  }
  v119 = (char *)v160;
  if (v160)
  {
    v120 = v161;
    v121 = v160;
    if (v161 != v160)
    {
      do
      {
        v122 = (_QWORD *)*((_QWORD *)v120 - 3);
        if (v122)
        {
          do
          {
            v123 = (_QWORD *)*v122;
            operator delete(v122);
            v122 = v123;
          }
          while (v123);
        }
        v125 = (void *)*((_QWORD *)v120 - 5);
        v120 -= 40;
        v124 = v125;
        *(_QWORD *)v120 = 0;
        if (v125)
          operator delete(v124);
      }
      while (v120 != v119);
      v121 = v160;
    }
    v161 = v119;
    operator delete(v121);
  }
LABEL_159:
  v126 = (char *)v163;
  if (v163)
  {
    v127 = v164;
    v128 = v163;
    if (v164 != v163)
    {
      v129 = v164;
      do
      {
        v131 = (void *)*((_QWORD *)v129 - 3);
        v129 -= 24;
        v130 = v131;
        if (v131)
        {
          *((_QWORD *)v127 - 2) = v130;
          operator delete(v130);
        }
        v127 = v129;
      }
      while (v129 != v126);
      v128 = v163;
    }
    v164 = v126;
    operator delete(v128);
  }
  if (v166)
    operator delete(v166);
  if (v168)
  {
    v169 = v168;
    operator delete(v168);
  }
  v132 = v172[0];
  if (v172[0])
  {
    do
    {
      v133 = (_QWORD *)*v132;
      operator delete(v132);
      v132 = v133;
    }
    while (v133);
  }
  v134 = v171[0];
  v171[0] = 0;
  if (v134)
    operator delete(v134);
  v135 = (void **)v175;
  if ((_QWORD)v175)
  {
    do
    {
      v136 = (void **)*v135;
      free(v135[8]);
      operator delete(v135);
      v135 = v136;
    }
    while (v136);
  }
  v137 = v174[0];
  v174[0] = 0;
  if (v137)
    operator delete(v137);
  if (v177)
  {
    v178 = (void **)v177;
    operator delete(v177);
  }
  sub_2397A2E14(v190);
  v43 = v183;
  if (v183)
  {
LABEL_40:
    v44 = (unint64_t *)&v43->__shared_owners_;
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 - 1, v44));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
    }
  }
LABEL_44:
  v46 = v182;
  if (v182)
  {
    v47 = (unint64_t *)&v182->__shared_owners_;
    do
      v48 = __ldaxr(v47);
    while (__stlxr(v48 - 1, v47));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
      std::__shared_weak_count::__release_weak(v46);
    }
  }
  v49 = v181;
  if (v181)
  {
    v50 = (unint64_t *)&v181->__shared_owners_;
    do
      v51 = __ldaxr(v50);
    while (__stlxr(v51 - 1, v50));
    if (!v51)
    {
      ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
      std::__shared_weak_count::__release_weak(v49);
    }
  }
  sub_2396FCD14((uint64_t)v201);
  sub_2396FCD14((uint64_t)v204);
  return v42;
}

void sub_2395574FC(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_239416A48(a1);
}

void sub_239557778(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47,uint64_t a48,char a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,void *__p,uint64_t a62,uint64_t a63)
{
  uint64_t a64;
  void *v65;
  void *v66;

  if (a43)
  {
    operator delete(a43);
    v65 = a46;
    if (!a46)
    {
LABEL_3:
      sub_239420950((uint64_t)&a49);
      sub_239557A4C((uint64_t)&a55);
      v66 = __p;
      if (!__p)
        goto LABEL_5;
      goto LABEL_4;
    }
  }
  else
  {
    v65 = a46;
    if (!a46)
      goto LABEL_3;
  }
  operator delete(v65);
  sub_239420950((uint64_t)&a49);
  sub_239557A4C((uint64_t)&a55);
  v66 = __p;
  if (!__p)
  {
LABEL_5:
    sub_2397A2E14(&STACK[0x248]);
    sub_23942FEFC(&a64);
    sub_2396FCD14((uint64_t)&STACK[0x3C8]);
    sub_2396FCD14((uint64_t)&STACK[0x620]);
    _Unwind_Resume(a1);
  }
LABEL_4:
  a62 = (uint64_t)v66;
  operator delete(v66);
  goto LABEL_5;
}

uint64_t sub_239557804(uint64_t a1, uint64_t a2)
{
  void **v4;
  _QWORD *v5;
  void *v6;
  uint64_t v7;
  _QWORD *v8;
  int v9;
  void *v10;
  void *v11;
  void *v12;
  void **v13;
  _QWORD *v14;
  void *v15;
  void *v17;

  sub_239540798(a1, a2);
  v4 = (void **)(a1 + 144);
  v5 = (_QWORD *)(a2 + 144);
  if (*(unsigned __int8 *)(a1 + 168) != *(unsigned __int8 *)(a2 + 168))
  {
    if (!*(_BYTE *)(a1 + 168))
    {
      *v4 = 0;
      *(_QWORD *)(a1 + 152) = 0;
      *(_QWORD *)(a1 + 160) = 0;
      *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
      *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
      *v5 = 0;
      *(_QWORD *)(a2 + 152) = 0;
      *(_QWORD *)(a2 + 160) = 0;
      *(_BYTE *)(a1 + 168) = 1;
      v7 = a1 + 176;
      v8 = (_QWORD *)(a2 + 176);
      v9 = *(unsigned __int8 *)(a1 + 200);
      if (v9 == *(unsigned __int8 *)(a2 + 200))
        goto LABEL_12;
LABEL_17:
      if (v9)
      {
        v12 = *(void **)v7;
        if (*(_QWORD *)v7)
        {
          *(_QWORD *)(a1 + 184) = v12;
          operator delete(v12);
        }
        *(_BYTE *)(a1 + 200) = 0;
      }
      else
      {
        *(_QWORD *)v7 = 0;
        *(_QWORD *)(v7 + 8) = 0;
        *(_QWORD *)(v7 + 16) = 0;
        *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
        *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
        *v8 = 0;
        v8[1] = 0;
        v8[2] = 0;
        *(_BYTE *)(a1 + 200) = 1;
      }
      goto LABEL_22;
    }
    v10 = *v4;
    if (*v4)
    {
      *(_QWORD *)(a1 + 152) = v10;
      operator delete(v10);
    }
    *(_BYTE *)(a1 + 168) = 0;
LABEL_11:
    v7 = a1 + 176;
    v8 = (_QWORD *)(a2 + 176);
    v9 = *(unsigned __int8 *)(a1 + 200);
    if (v9 == *(unsigned __int8 *)(a2 + 200))
      goto LABEL_12;
    goto LABEL_17;
  }
  if (!*(_BYTE *)(a1 + 168))
    goto LABEL_11;
  v6 = *v4;
  if (*v4)
  {
    *(_QWORD *)(a1 + 152) = v6;
    operator delete(v6);
    *v4 = 0;
    *(_QWORD *)(a1 + 152) = 0;
    *(_QWORD *)(a1 + 160) = 0;
  }
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  *v5 = 0;
  *(_QWORD *)(a2 + 152) = 0;
  *(_QWORD *)(a2 + 160) = 0;
  v7 = a1 + 176;
  v8 = (_QWORD *)(a2 + 176);
  v9 = *(unsigned __int8 *)(a1 + 200);
  if (v9 != *(unsigned __int8 *)(a2 + 200))
    goto LABEL_17;
LABEL_12:
  if (v9)
  {
    v11 = *(void **)v7;
    if (*(_QWORD *)v7)
    {
      *(_QWORD *)(a1 + 184) = v11;
      operator delete(v11);
      *(_QWORD *)v7 = 0;
      *(_QWORD *)(v7 + 8) = 0;
      *(_QWORD *)(v7 + 16) = 0;
    }
    *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
    *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
    *v8 = 0;
    v8[1] = 0;
    v8[2] = 0;
  }
LABEL_22:
  sub_239557B14(a1 + 208, (__n128 *)(a2 + 208));
  v13 = (void **)(a1 + 240);
  v14 = (_QWORD *)(a2 + 240);
  if (*(unsigned __int8 *)(a1 + 264) == *(unsigned __int8 *)(a2 + 264))
  {
    if (*(_BYTE *)(a1 + 264))
    {
      v15 = *v13;
      if (*v13)
      {
        *(_QWORD *)(a1 + 248) = v15;
        operator delete(v15);
        *v13 = 0;
        *(_QWORD *)(a1 + 248) = 0;
        *(_QWORD *)(a1 + 256) = 0;
      }
      *(_OWORD *)(a1 + 240) = *(_OWORD *)(a2 + 240);
      *(_QWORD *)(a1 + 256) = *(_QWORD *)(a2 + 256);
      *v14 = 0;
      *(_QWORD *)(a2 + 248) = 0;
      *(_QWORD *)(a2 + 256) = 0;
    }
    return a1;
  }
  else if (*(_BYTE *)(a1 + 264))
  {
    v17 = *v13;
    if (*v13)
    {
      *(_QWORD *)(a1 + 248) = v17;
      operator delete(v17);
    }
    *(_BYTE *)(a1 + 264) = 0;
    return a1;
  }
  else
  {
    *v13 = 0;
    *(_QWORD *)(a1 + 248) = 0;
    *(_QWORD *)(a1 + 256) = 0;
    *(_OWORD *)(a1 + 240) = *(_OWORD *)(a2 + 240);
    *(_QWORD *)(a1 + 256) = *(_QWORD *)(a2 + 256);
    *v14 = 0;
    *(_QWORD *)(a2 + 248) = 0;
    *(_QWORD *)(a2 + 256) = 0;
    *(_BYTE *)(a1 + 264) = 1;
    return a1;
  }
}

uint64_t sub_239557A4C(uint64_t a1)
{
  void **v2;
  void **v3;
  void *v4;

  v2 = *(void ***)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (void **)*v2;
      free(v2[8]);
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

void **sub_239557AA8(void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  char *v5;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        v5 = v3 - 136;
        sub_239416DA0((uint64_t)(v3 - 128));
        nullsub_4(v5);
        v3 = v5;
      }
      while (v5 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

__n128 sub_239557B14(uint64_t a1, __n128 *a2)
{
  void *v4;
  uint64_t v5;
  void *v6;
  __n128 result;
  void *v8;
  uint64_t v9;
  void *v10;

  if (*(unsigned __int8 *)(a1 + 24) == a2[1].n128_u8[8])
  {
    if (*(_BYTE *)(a1 + 24))
    {
      v4 = *(void **)a1;
      if (*(_QWORD *)a1)
      {
        v5 = *(_QWORD *)(a1 + 8);
        v6 = *(void **)a1;
        if ((void *)v5 != v4)
        {
          do
            v5 = sub_2394EF0D0(v5 - 912);
          while ((void *)v5 != v4);
          v6 = *(void **)a1;
        }
        *(_QWORD *)(a1 + 8) = v4;
        operator delete(v6);
        *(_QWORD *)a1 = 0;
        *(_QWORD *)(a1 + 8) = 0;
        *(_QWORD *)(a1 + 16) = 0;
      }
      result = *a2;
      *(__n128 *)a1 = *a2;
      *(_QWORD *)(a1 + 16) = a2[1].n128_u64[0];
      a2->n128_u64[0] = 0;
      a2->n128_u64[1] = 0;
      a2[1].n128_u64[0] = 0;
    }
  }
  else if (*(_BYTE *)(a1 + 24))
  {
    v8 = *(void **)a1;
    if (*(_QWORD *)a1)
    {
      v9 = *(_QWORD *)(a1 + 8);
      v10 = *(void **)a1;
      if ((void *)v9 != v8)
      {
        do
          v9 = sub_2394EF0D0(v9 - 912);
        while ((void *)v9 != v8);
        v10 = *(void **)a1;
      }
      *(_QWORD *)(a1 + 8) = v8;
      operator delete(v10);
    }
    *(_BYTE *)(a1 + 24) = 0;
  }
  else
  {
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    result = *a2;
    *(__n128 *)a1 = *a2;
    *(_QWORD *)(a1 + 16) = a2[1].n128_u64[0];
    a2->n128_u64[0] = 0;
    a2->n128_u64[1] = 0;
    a2[1].n128_u64[0] = 0;
    *(_BYTE *)(a1 + 24) = 1;
  }
  return result;
}

_QWORD *sub_239557C30(_QWORD *__dst, __int128 *a2)
{
  __int128 v4;
  _BYTE *v5;
  _BYTE *v6;
  int64_t v7;
  _BYTE *v8;
  char *v9;
  char *v10;

  if (*((char *)a2 + 23) < 0)
  {
    sub_23941A7F8(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
    __dst[3] = 0;
    __dst[4] = 0;
    __dst[5] = 0;
    v6 = (_BYTE *)*((_QWORD *)a2 + 3);
    v8 = (_BYTE *)*((_QWORD *)a2 + 4);
    v7 = v8 - v6;
    if (v8 == v6)
      goto LABEL_7;
  }
  else
  {
    v4 = *a2;
    __dst[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v4;
    __dst[3] = 0;
    __dst[4] = 0;
    __dst[5] = 0;
    v6 = (_BYTE *)*((_QWORD *)a2 + 3);
    v5 = (_BYTE *)*((_QWORD *)a2 + 4);
    v7 = v5 - v6;
    if (v5 == v6)
      goto LABEL_7;
  }
  if (v7 < 0)
    sub_2394189F8();
  v9 = (char *)operator new(v7);
  __dst[3] = v9;
  __dst[4] = v9;
  v10 = &v9[4 * (v7 >> 2)];
  __dst[5] = v10;
  memcpy(v9, v6, v7);
  __dst[4] = v10;
LABEL_7:
  sub_239557EA0((_BYTE *)__dst + 48, a2 + 3);
  sub_239557F70((_BYTE *)__dst + 216, (__int128 *)((char *)a2 + 216));
  sub_23955814C((_BYTE *)__dst + 384, a2 + 24);
  sub_23955821C((_BYTE *)__dst + 504, (__int128 *)((char *)a2 + 504));
  sub_2395582EC((_BYTE *)__dst + 624, a2 + 39);
  sub_2395583BC((_BYTE *)__dst + 744, (__int128 *)((char *)a2 + 744));
  return __dst;
}

void sub_239557D58(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v9;

  sub_239557DE8(v7);
  sub_239557DE8(v6);
  sub_239557DE8(v5);
  sub_239557E44(v4);
  sub_239557E44(v3);
  v9 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 32) = v9;
    operator delete(v9);
    if (*(char *)(v1 + 23) < 0)
    {
LABEL_3:
      operator delete(*(void **)v1);
      _Unwind_Resume(a1);
    }
  }
  else if (*(char *)(v1 + 23) < 0)
  {
    goto LABEL_3;
  }
  _Unwind_Resume(a1);
}

uint64_t sub_239557DE8(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 112))
    return a1;
  sub_239416DA0(a1 + 32);
  nullsub_4(a1 + 24);
  if ((*(char *)(a1 + 23) & 0x80000000) == 0)
    return a1;
  operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_239557E44(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 160))
    return a1;
  sub_239416DA0(a1 + 32);
  nullsub_4(a1 + 24);
  if ((*(char *)(a1 + 23) & 0x80000000) == 0)
    return a1;
  operator delete(*(void **)a1);
  return a1;
}

_BYTE *sub_239557EA0(_BYTE *__dst, __int128 *a2)
{
  __int128 v4;

  *__dst = 0;
  __dst[160] = 0;
  if (*((_BYTE *)a2 + 160))
  {
    if (*((char *)a2 + 23) < 0)
    {
      sub_23941A7F8(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
    }
    else
    {
      v4 = *a2;
      *((_QWORD *)__dst + 2) = *((_QWORD *)a2 + 2);
      *(_OWORD *)__dst = v4;
    }
    *((_QWORD *)__dst + 3) = &off_250ADBEA0;
    sub_239827500((uint64_t)(__dst + 32), (uint64_t)(a2 + 2));
    *((_WORD *)__dst + 76) = *((_WORD *)a2 + 76);
    __dst[160] = 1;
  }
  return __dst;
}

void sub_239557F30(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_239557E44(v1);
  _Unwind_Resume(a1);
}

void sub_239557F44(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  nullsub_4(v2);
  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  sub_239557E44(v1);
  _Unwind_Resume(a1);
}

_BYTE *sub_239557F70(_BYTE *__dst, __int128 *a2)
{
  __int128 v4;

  *__dst = 0;
  __dst[160] = 0;
  if (*((_BYTE *)a2 + 160))
  {
    if (*((char *)a2 + 23) < 0)
    {
      sub_23941A7F8(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
    }
    else
    {
      v4 = *a2;
      *((_QWORD *)__dst + 2) = *((_QWORD *)a2 + 2);
      *(_OWORD *)__dst = v4;
    }
    *((_QWORD *)__dst + 3) = &off_250ADDC30;
    sub_2398279F8((uint64_t)(__dst + 32), (uint64_t)(a2 + 2));
    *((_WORD *)__dst + 76) = *((_WORD *)a2 + 76);
    __dst[160] = 1;
  }
  return __dst;
}

void sub_239558000(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_239557E44(v1);
  _Unwind_Resume(a1);
}

void sub_239558014(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  nullsub_4(v2);
  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  sub_239557E44(v1);
  _Unwind_Resume(a1);
}

double sub_239558040(uint64_t a1)
{
  double result;

  sub_239416DA0(a1 + 8);
  *(_QWORD *)&result = nullsub_4(a1).n128_u64[0];
  return result;
}

void sub_239558068(uint64_t a1)
{
  sub_239416DA0(a1 + 8);
  nullsub_4(a1);
  JUMPOUT(0x23B83E31CLL);
}

uint64_t sub_2395580A4()
{
  return 24;
}

uint64_t sub_2395580AC(uint64_t a1)
{
  return a1 + 112;
}

uint64_t sub_2395580B4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_2398EB464(a2, 3, a1 + 88, 3, a1 + 100, 4);
}

uint64_t sub_2395580D0(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return v1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldxr(p_shared_owners);
  while (__stxr(v4 + 1, p_shared_owners));
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return v1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

_BYTE *sub_23955814C(_BYTE *__dst, __int128 *a2)
{
  __int128 v4;

  *__dst = 0;
  __dst[112] = 0;
  if (*((_BYTE *)a2 + 112))
  {
    if (*((char *)a2 + 23) < 0)
    {
      sub_23941A7F8(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
    }
    else
    {
      v4 = *a2;
      *((_QWORD *)__dst + 2) = *((_QWORD *)a2 + 2);
      *(_OWORD *)__dst = v4;
    }
    *((_QWORD *)__dst + 3) = &off_250ADD920;
    sub_23982662C((uint64_t)(__dst + 32), (uint64_t)(a2 + 2));
    *((_WORD *)__dst + 52) = *((_WORD *)a2 + 52);
    __dst[112] = 1;
  }
  return __dst;
}

void sub_2395581DC(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_239557DE8(v1);
  _Unwind_Resume(a1);
}

void sub_2395581F0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  nullsub_4(v2);
  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  sub_239557DE8(v1);
  _Unwind_Resume(a1);
}

_BYTE *sub_23955821C(_BYTE *__dst, __int128 *a2)
{
  __int128 v4;

  *__dst = 0;
  __dst[112] = 0;
  if (*((_BYTE *)a2 + 112))
  {
    if (*((char *)a2 + 23) < 0)
    {
      sub_23941A7F8(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
    }
    else
    {
      v4 = *a2;
      *((_QWORD *)__dst + 2) = *((_QWORD *)a2 + 2);
      *(_OWORD *)__dst = v4;
    }
    *((_QWORD *)__dst + 3) = &off_250ADD920;
    sub_23982662C((uint64_t)(__dst + 32), (uint64_t)(a2 + 2));
    *((_WORD *)__dst + 52) = *((_WORD *)a2 + 52);
    __dst[112] = 1;
  }
  return __dst;
}

void sub_2395582AC(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_239557DE8(v1);
  _Unwind_Resume(a1);
}

void sub_2395582C0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  nullsub_4(v2);
  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  sub_239557DE8(v1);
  _Unwind_Resume(a1);
}

_BYTE *sub_2395582EC(_BYTE *__dst, __int128 *a2)
{
  __int128 v4;

  *__dst = 0;
  __dst[112] = 0;
  if (*((_BYTE *)a2 + 112))
  {
    if (*((char *)a2 + 23) < 0)
    {
      sub_23941A7F8(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
    }
    else
    {
      v4 = *a2;
      *((_QWORD *)__dst + 2) = *((_QWORD *)a2 + 2);
      *(_OWORD *)__dst = v4;
    }
    *((_QWORD *)__dst + 3) = &off_250ADD920;
    sub_23982662C((uint64_t)(__dst + 32), (uint64_t)(a2 + 2));
    *((_WORD *)__dst + 52) = *((_WORD *)a2 + 52);
    __dst[112] = 1;
  }
  return __dst;
}

void sub_23955837C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_239557DE8(v1);
  _Unwind_Resume(a1);
}

void sub_239558390(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  nullsub_4(v2);
  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  sub_239557DE8(v1);
  _Unwind_Resume(a1);
}

_BYTE *sub_2395583BC(_BYTE *__dst, __int128 *a2)
{
  __int128 v4;

  *__dst = 0;
  __dst[160] = 0;
  if (*((_BYTE *)a2 + 160))
  {
    if (*((char *)a2 + 23) < 0)
    {
      sub_23941A7F8(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
    }
    else
    {
      v4 = *a2;
      *((_QWORD *)__dst + 2) = *((_QWORD *)a2 + 2);
      *(_OWORD *)__dst = v4;
    }
    *((_QWORD *)__dst + 3) = &off_250ADDC30;
    sub_2398279F8((uint64_t)(__dst + 32), (uint64_t)(a2 + 2));
    *((_WORD *)__dst + 76) = *((_WORD *)a2 + 76);
    __dst[160] = 1;
  }
  return __dst;
}

void sub_23955844C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_239557E44(v1);
  _Unwind_Resume(a1);
}

void sub_239558460(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  nullsub_4(v2);
  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  sub_239557E44(v1);
  _Unwind_Resume(a1);
}

void sub_239558490()
{
  JUMPOUT(0x23B83E31CLL);
}

__n128 sub_2395584A4(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x38uLL);
  *(_QWORD *)v2 = &off_250ADDC70;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  return result;
}

__n128 sub_2395584EC(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  *(_QWORD *)a2 = &off_250ADDC70;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t *sub_23955851C(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  _QWORD *v3;
  unint64_t v4;
  uint64_t *v5;
  float32x2_t *v6;
  float64x2_t v7;
  int64x2_t v8;
  float32x4_t v9;
  float64x2_t v11;
  float64x2_t v12;
  float64x2_t v13;
  float64x2_t v15;
  uint64_t *v21;
  unsigned int *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  float32x4_t v27;
  float32x4_t v28;
  int8x16_t v30;

  v2 = *a2;
  v3 = (_QWORD *)result[2];
  v4 = *(unsigned int *)(*(_QWORD *)result[1] + 4 * *a2);
  if (v3[1] > v4 && ((*(_QWORD *)(*v3 + ((v4 >> 3) & 0x1FFFFFF8)) >> v4) & 1) != 0)
  {
    v5 = result;
    result = sub_2394650AC(result[5], v4);
    v6 = (float32x2_t *)(*(_QWORD *)v5[4] + 12 * v2);
    *(_QWORD *)&v7.f64[0] = result[10];
    v8 = *((int64x2_t *)result + 4);
    v9 = *((float32x4_t *)result + 6);
    _Q4 = *((float64x2_t *)result + 8);
    *(_QWORD *)&v11.f64[0] = result[22];
    *(_QWORD *)&v11.f64[0] = *(_OWORD *)&vsubq_f64((float64x2_t)0, v11);
    v12 = vsubq_f64((float64x2_t)0, *((float64x2_t *)result + 10));
    v13 = vmulq_n_f64((float64x2_t)vzip1q_s64(v8, (int64x2_t)v9), v12.f64[0]);
    _Q1 = (float64x2_t)vzip2q_s64(v8, (int64x2_t)v9);
    *(_QWORD *)&v7.f64[1] = result[14];
    v15 = vmlaq_n_f64(vmlaq_laneq_f64(v13, _Q1, v12, 1), v7, v11.f64[0]);
    _Q0 = (float32x4_t)vmulq_f64(_Q4, v12);
    _Q1.f64[0] = v12.f64[1];
    __asm { FMLA            D0, D1, V4.D[1] }
    *(float32x2_t *)&_Q1.f64[0] = vcvt_f32_f64(v15);
    _Q0.f32[0] = vmlad_n_f64(*(double *)_Q0.i64, *((double *)result + 18), v11.f64[0]);
    LODWORD(_Q1.f64[1]) = _Q0.i32[0];
    v21 = (uint64_t *)v5[3];
    v22 = (unsigned int *)(v21[3] + 12 * v2);
    v23 = *v21;
    v24 = v23 + 12 * *v22;
    v25 = v23 + 12 * v22[1];
    _Q0.i64[0] = *(_QWORD *)v24;
    _Q0.i32[2] = *(_DWORD *)(v24 + 8);
    v9.i64[0] = *(_QWORD *)v25;
    v9.i32[2] = *(_DWORD *)(v25 + 8);
    v26 = v23 + 12 * v22[2];
    v27 = vaddq_f32(_Q0, v9);
    v9.i64[0] = *(_QWORD *)v26;
    v9.i32[2] = *(_DWORD *)(v26 + 8);
    v28 = vaddq_f32(v27, v9);
    __asm { FMOV            V2.4S, #-3.0 }
    v30 = (int8x16_t)vaddq_f32((float32x4_t)_Q1, vdivq_f32(v28, _Q2));
    *(int32x2_t *)&_Q1.f64[0] = vdup_lane_s32(*(int32x2_t *)v30.i8, 1);
    _Q2.i64[0] = vextq_s8(v30, v30, 8uLL).u64[0];
    *(float *)_Q1.f64 = 1.0
                      / sqrtf(vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v30.i8, *(float32x2_t *)v30.i8), *(float32x2_t *)&_Q1.f64[0], *(float32x2_t *)v30.i8, 1), *(float32x2_t *)_Q2.f32, *(float32x2_t *)_Q2.f32).f32[0]);
    LODWORD(v12.f64[0]) = v6[1].i32[0];
    *(_BYTE *)(*(_QWORD *)v5[6] + v2) = vmla_f32(vmla_lane_f32(vmul_f32(vmul_f32(*(float32x2_t *)v30.i8, *(float32x2_t *)&_Q1.f64[0]), *v6), vmul_lane_f32(*(float32x2_t *)&_Q1.f64[0], *(float32x2_t *)v30.i8, 1), *v6, 1), *(float32x2_t *)&v12.f64[0], vmul_f32(*(float32x2_t *)_Q2.f32, *(float32x2_t *)&_Q1.f64[0])).f32[0] > 0.0;
  }
  return result;
}

uint64_t sub_2395586BC(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  void **v4;
  _QWORD *v5;
  _QWORD *v6;
  void *v7;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    v4 = (void **)(i - 40);
    *(_QWORD *)(a1 + 16) = i - 40;
    v5 = *(_QWORD **)(i - 24);
    if (v5)
    {
      do
      {
        v6 = (_QWORD *)*v5;
        operator delete(v5);
        v5 = v6;
      }
      while (v6);
    }
    v7 = *v4;
    *v4 = 0;
    if (v7)
      operator delete(v7);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

char *sub_239558738(char **a1, uint64_t *a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  BOOL v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  _QWORD *v29;
  _QWORD *v30;
  void *v31;
  void *v32;

  v3 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0x666666666666666)
    sub_2394189F8();
  if (0x999999999999999ALL * ((a1[2] - *a1) >> 3) > v4)
    v4 = 0x999999999999999ALL * ((a1[2] - *a1) >> 3);
  if (0xCCCCCCCCCCCCCCCDLL * ((a1[2] - *a1) >> 3) >= 0x333333333333333)
    v6 = 0x666666666666666;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0x666666666666666)
      sub_239418A80();
    v7 = (char *)operator new(40 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[40 * v3];
  v9 = *a2;
  v10 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  *(_QWORD *)v8 = v9;
  *((_QWORD *)v8 + 1) = v10;
  v11 = a2[2];
  *((_QWORD *)v8 + 2) = v11;
  v12 = a2[3];
  *((_QWORD *)v8 + 3) = v12;
  *((_DWORD *)v8 + 8) = *((_DWORD *)a2 + 8);
  if (v12)
  {
    v13 = *(_QWORD *)(v11 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      v15 = v13 >= v10;
      v14 = v13 % v10;
      if (!v15)
        v14 = v13;
    }
    else
    {
      v14 = v13 & (v10 - 1);
    }
    *(_QWORD *)(v9 + 8 * v14) = v8 + 16;
    a2[2] = 0;
    a2[3] = 0;
  }
  v16 = &v7[40 * v6];
  v17 = v8 + 40;
  v18 = *a1;
  v19 = a1[1];
  if (v19 == *a1)
  {
    *a1 = v8;
    a1[1] = v17;
    a1[2] = v16;
    if (!v19)
      return v17;
    goto LABEL_35;
  }
  v20 = 0;
  do
  {
    v22 = &v8[v20];
    v23 = &v19[v20];
    v24 = *(_QWORD *)&v19[v20 - 40];
    *((_QWORD *)v23 - 5) = 0;
    *((_QWORD *)v22 - 5) = v24;
    *((_QWORD *)v22 - 4) = *(_QWORD *)&v19[v20 - 32];
    *((_QWORD *)v23 - 4) = 0;
    v25 = *(_QWORD *)&v19[v20 - 24];
    *(_QWORD *)&v8[v20 - 24] = v25;
    v26 = *(_QWORD *)&v19[v20 - 16];
    *((_QWORD *)v22 - 2) = v26;
    *((_DWORD *)v22 - 2) = *(_DWORD *)&v19[v20 - 8];
    if (v26)
    {
      v21 = *(_QWORD *)(v25 + 8);
      v27 = *((_QWORD *)v22 - 4);
      if ((v27 & (v27 - 1)) != 0)
      {
        if (v21 >= v27)
          v21 %= v27;
      }
      else
      {
        v21 &= v27 - 1;
      }
      *(_QWORD *)(v24 + 8 * v21) = &v8[v20 - 24];
      *(_QWORD *)&v19[v20 - 24] = 0;
      *(_QWORD *)&v19[v20 - 16] = 0;
    }
    v20 -= 40;
  }
  while (&v19[v20] != v18);
  v28 = *a1;
  v19 = a1[1];
  *a1 = &v8[v20];
  a1[1] = v17;
  a1[2] = v16;
  if (v19 != v28)
  {
    do
    {
      v29 = (_QWORD *)*((_QWORD *)v19 - 3);
      if (v29)
      {
        do
        {
          v30 = (_QWORD *)*v29;
          operator delete(v29);
          v29 = v30;
        }
        while (v30);
      }
      v32 = (void *)*((_QWORD *)v19 - 5);
      v19 -= 40;
      v31 = v32;
      *(_QWORD *)v19 = 0;
      if (v32)
        operator delete(v31);
    }
    while (v19 != v28);
    v19 = v28;
  }
  if (v19)
LABEL_35:
    operator delete(v19);
  return v17;
}

void sub_239558964()
{
  JUMPOUT(0x23B83E31CLL);
}

__n128 sub_239558978(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_250ADDCB8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_2395589B0(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_250ADDCB8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_2395589D0(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t **v3;
  uint64_t v4;

  v2 = *a2;
  v3 = *(uint64_t ***)(**(_QWORD **)(result + 8) + 40 * *a2 + 16);
  if (v3)
  {
    v4 = **(_QWORD **)(result + 16);
    do
    {
      *(_DWORD *)(v4 + 4 * *((unsigned int *)v3 + 4)) = v2;
      v3 = (uint64_t **)*v3;
    }
    while (v3);
  }
  return result;
}

void sub_239558A08(_QWORD *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t i;
  unsigned int *v8;
  unsigned int *v9;
  _DWORD *v10;
  uint64_t v11;
  unsigned int *v12;

  v6 = a1[1];
  if (!v6)
    goto LABEL_7;
  for (i = 0; i != v6; *(_QWORD *)(*a1 + 8 * i++) = 0)
    ;
  v8 = (unsigned int *)a1[2];
  a1[2] = 0;
  a1[3] = 0;
  if (v8)
  {
    while (a2 != a3)
    {
      v8[4] = *((_DWORD *)a2 + 4);
      v9 = *(unsigned int **)v8;
      sub_23943604C(a1, v8);
      a2 = (uint64_t *)*a2;
      v8 = v9;
      if (!v9)
        goto LABEL_7;
    }
    do
    {
      v12 = *(unsigned int **)v8;
      operator delete(v8);
      v8 = v12;
    }
    while (v12);
  }
  else
  {
LABEL_7:
    while (a2 != a3)
    {
      v10 = operator new(0x18uLL);
      *(_QWORD *)v10 = 0;
      v11 = *((unsigned int *)a2 + 4);
      v10[4] = v11;
      *((_QWORD *)v10 + 1) = v11;
      sub_23943604C(a1, v10);
      a2 = (uint64_t *)*a2;
    }
  }
}

void sub_239558AE4(void *a1)
{
  _QWORD *v1;
  _QWORD *v2;

  __cxa_begin_catch(a1);
  do
  {
    v2 = (_QWORD *)*v1;
    operator delete(v1);
    v1 = v2;
  }
  while (v2);
  __cxa_rethrow();
}

void sub_239558B04(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_239558B18(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_239558B2C(uint64_t a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  uint64_t **v10;
  uint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t prime;
  unint64_t v22;
  uint8x8_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  unint64_t v27;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v8 <= v7)
        v4 = v7 % v8;
    }
    else
    {
      v4 = ((_DWORD)v8 - 1) & v7;
    }
    v10 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      v11 = *v10;
      if (*v10)
      {
        if (v9.u32[0] < 2uLL)
        {
          while (1)
          {
            v13 = v11[1];
            if (v13 == v7)
            {
              if (*((_DWORD *)v11 + 4) == (_DWORD)v7)
                return v11;
            }
            else if ((v13 & (v8 - 1)) != v4)
            {
              goto LABEL_23;
            }
            v11 = (uint64_t *)*v11;
            if (!v11)
              goto LABEL_23;
          }
        }
        do
        {
          v12 = v11[1];
          if (v12 == v7)
          {
            if (*((_DWORD *)v11 + 4) == (_DWORD)v7)
              return v11;
          }
          else
          {
            if (v12 >= v8)
              v12 %= v8;
            if (v12 != v4)
              break;
          }
          v11 = (uint64_t *)*v11;
        }
        while (v11);
      }
    }
  }
LABEL_23:
  v15 = operator new(0x20uLL);
  *v15 = 0;
  v15[1] = v7;
  *((_DWORD *)v15 + 4) = **a4;
  *((_BYTE *)v15 + 20) = 0;
  *((_BYTE *)v15 + 28) = 0;
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (v8 && (float)(v17 * (float)v8) >= v16)
  {
    v7 = v4;
  }
  else
  {
    v18 = 1;
    if (v8 >= 3)
      v18 = (v8 & (v8 - 1)) != 0;
    v19 = v18 | (2 * v8);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      prime = v20;
    else
      prime = v19;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v8 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v8)
      goto LABEL_36;
    if (prime < v8)
    {
      v22 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v8 < 3 || (v23 = (uint8x8_t)vcnt_s8((int8x8_t)v8), v23.i16[0] = vaddlv_u8(v23), v23.u32[0] > 1uLL))
      {
        v22 = std::__next_prime(v22);
      }
      else
      {
        v24 = 1 << -(char)__clz(v22 - 1);
        if (v22 >= 2)
          v22 = v24;
      }
      if (prime <= v22)
        prime = v22;
      if (prime < v8)
LABEL_36:
        sub_239427FE0(a1, prime);
    }
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7)
        v7 %= v8;
    }
    else
    {
      v7 = ((_DWORD)v8 - 1) & v7;
    }
  }
  v25 = *(_QWORD *)a1;
  v26 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v7);
  if (v26)
  {
    *v15 = *v26;
LABEL_59:
    *v26 = v15;
    goto LABEL_60;
  }
  *v15 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v15;
  *(_QWORD *)(v25 + 8 * v7) = a1 + 16;
  if (*v15)
  {
    v27 = *(_QWORD *)(*v15 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v27 >= v8)
        v27 %= v8;
    }
    else
    {
      v27 &= v8 - 1;
    }
    v26 = (_QWORD *)(*(_QWORD *)a1 + 8 * v27);
    goto LABEL_59;
  }
LABEL_60:
  ++*(_QWORD *)(a1 + 24);
  return v15;
}

void sub_239558E24(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_239558E38(void **a1, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  void **v21;
  _QWORD *v22;
  _QWORD *v23;
  void *v24;
  uint64_t v25;
  char *v26;
  char *v27;

  v3 = 0xCCCCCCCCCCCCCCCDLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0x666666666666666)
    sub_2394189F8();
  if (0x999999999999999ALL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) > v4)
    v4 = 0x999999999999999ALL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3);
  if (0xCCCCCCCCCCCCCCCDLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) >= 0x333333333333333)
    v6 = 0x666666666666666;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0x666666666666666)
      sub_239418A80();
    v7 = (char *)operator new(40 * v6);
  }
  else
  {
    v7 = 0;
  }
  v25 = (uint64_t)&v7[40 * v3];
  v27 = &v7[40 * v6];
  sub_239559050(v25, a2);
  v8 = v25;
  v10 = (char *)*a1;
  v9 = (char *)a1[1];
  if (v9 == *a1)
  {
    v19 = (char *)a1[1];
  }
  else
  {
    v11 = 0;
    do
    {
      v13 = v25 + v11;
      v14 = &v9[v11];
      v15 = *(_QWORD *)&v9[v11 - 40];
      *((_QWORD *)v14 - 5) = 0;
      *(_QWORD *)(v13 - 40) = v15;
      *(_QWORD *)(v13 - 32) = *(_QWORD *)&v9[v11 - 32];
      *((_QWORD *)v14 - 4) = 0;
      v16 = *(_QWORD *)&v9[v11 - 24];
      *(_QWORD *)(v25 + v11 - 24) = v16;
      v17 = *(_QWORD *)&v9[v11 - 16];
      *(_QWORD *)(v13 - 16) = v17;
      *(_DWORD *)(v13 - 8) = *(_DWORD *)&v9[v11 - 8];
      if (v17)
      {
        v12 = *(_QWORD *)(v16 + 8);
        v18 = *(_QWORD *)(v13 - 32);
        if ((v18 & (v18 - 1)) != 0)
        {
          if (v12 >= v18)
            v12 %= v18;
        }
        else
        {
          v12 &= v18 - 1;
        }
        *(_QWORD *)(v15 + 8 * v12) = v25 + v11 - 24;
        *(_QWORD *)&v9[v11 - 24] = 0;
        *(_QWORD *)&v9[v11 - 16] = 0;
      }
      v11 -= 40;
    }
    while (&v9[v11] != v10);
    v19 = (char *)*a1;
    v9 = (char *)a1[1];
    v8 = v25 + v11;
  }
  *a1 = (void *)v8;
  a1[1] = (void *)(v25 + 40);
  a1[2] = v27;
  if (v9 == v19)
  {
    if (v9)
LABEL_24:
      operator delete(v9);
  }
  else
  {
    do
    {
      v21 = (void **)(v9 - 40);
      v26 = v9 - 40;
      v22 = (_QWORD *)*((_QWORD *)v9 - 3);
      if (v22)
      {
        do
        {
          v23 = (_QWORD *)*v22;
          operator delete(v22);
          v22 = v23;
        }
        while (v23);
      }
      v24 = *v21;
      *v21 = 0;
      if (v24)
        operator delete(v24);
      v9 = v26;
    }
    while (v26 != v19);
    v9 = v19;
    if (v19)
      goto LABEL_24;
  }
  return v25 + 40;
}

void sub_23955903C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_2395586BC((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_239559050(uint64_t a1, uint64_t a2)
{
  size_t prime;
  int8x8_t v5;
  BOOL v6;
  unint64_t v7;
  uint8x8_t v8;
  uint64_t v9;
  unsigned int *i;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  prime = *(_QWORD *)(a2 + 8);
  if (prime == 1)
  {
    prime = 2;
LABEL_17:
    sub_239427FE0(a1, prime);
    goto LABEL_18;
  }
  if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(*(_QWORD *)(a2 + 8));
    v5 = *(int8x8_t *)(a1 + 8);
    v6 = prime >= *(_QWORD *)&v5;
    if (prime > *(_QWORD *)&v5)
      goto LABEL_17;
  }
  else
  {
    v5 = 0;
    v6 = 1;
    if (prime)
      goto LABEL_17;
  }
  if (!v6)
  {
    v7 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v5 < 3uLL || (v8 = (uint8x8_t)vcnt_s8(v5), v8.i16[0] = vaddlv_u8(v8), v8.u32[0] > 1uLL))
    {
      v7 = std::__next_prime(v7);
    }
    else
    {
      v9 = 1 << -(char)__clz(v7 - 1);
      if (v7 >= 2)
        v7 = v9;
    }
    if (prime <= v7)
      prime = v7;
    if (prime < *(_QWORD *)&v5)
      goto LABEL_17;
  }
LABEL_18:
  for (i = *(unsigned int **)(a2 + 16); i; i = *(unsigned int **)i)
    sub_239456168(a1, i + 4, i + 4);
  return a1;
}

void sub_239559168(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_239420950(v1);
  _Unwind_Resume(a1);
}

void sub_23955917C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_239420950(v1);
  _Unwind_Resume(a1);
}

void sub_239559194()
{
  JUMPOUT(0x23B83E31CLL);
}

__n128 sub_2395591A8(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_250ADDD00;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_2395591E0(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_250ADDD00;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_239559200(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t **v3;
  uint64_t v4;

  v2 = *a2;
  v3 = *(uint64_t ***)(**(_QWORD **)(result + 8) + 40 * *a2 + 16);
  if (v3)
  {
    v4 = **(_QWORD **)(result + 16);
    do
    {
      *(_DWORD *)(v4 + 4 * *((unsigned int *)v3 + 4)) = v2;
      v3 = (uint64_t **)*v3;
    }
    while (v3);
  }
  return result;
}

void sub_23955923C()
{
  JUMPOUT(0x23B83E31CLL);
}

__n128 sub_239559250(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = &off_250ADDD48;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_239559290(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_250ADDD48;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t *sub_2395592B8(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t **v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int *v9;
  uint64_t v10;
  unint64_t v11;
  unsigned int v12;

  v2 = *a2;
  v3 = 40 * *a2;
  v4 = *(uint64_t ***)(*(_QWORD *)result[1] + v3 + 16);
  if (v4)
  {
    v5 = result;
    v6 = *(_QWORD *)result[2] + v3;
    do
    {
      v7 = *(_QWORD *)v5[3] + 24 * *((unsigned int *)v4 + 4);
      v8 = *(unsigned int **)v7;
      v9 = *(unsigned int **)(v7 + 8);
      while (v8 != v9)
      {
        v10 = *v8;
        v12 = 0;
        v11 = *(unsigned int *)(*(_QWORD *)v5[4] + 4 * v10);
        v12 = v11;
        if (v2 != v11 && 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(v5[1] + 8) - *(_QWORD *)v5[1]) >> 3) > v11)
          result = sub_239456168(v6, &v12, &v12);
        ++v8;
      }
      v4 = (uint64_t **)*v4;
    }
    while (v4);
  }
  return result;
}

uint64_t sub_2395593AC(void **a1, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  void **v21;
  _QWORD *v22;
  _QWORD *v23;
  void *v24;
  uint64_t v25;
  char *v26;
  char *v27;

  v3 = 0xCCCCCCCCCCCCCCCDLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0x666666666666666)
    sub_2394189F8();
  if (0x999999999999999ALL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) > v4)
    v4 = 0x999999999999999ALL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3);
  if (0xCCCCCCCCCCCCCCCDLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) >= 0x333333333333333)
    v6 = 0x666666666666666;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0x666666666666666)
      sub_239418A80();
    v7 = (char *)operator new(40 * v6);
  }
  else
  {
    v7 = 0;
  }
  v25 = (uint64_t)&v7[40 * v3];
  v27 = &v7[40 * v6];
  sub_239559050(v25, a2);
  v8 = v25;
  v10 = (char *)*a1;
  v9 = (char *)a1[1];
  if (v9 == *a1)
  {
    v19 = (char *)a1[1];
  }
  else
  {
    v11 = 0;
    do
    {
      v13 = v25 + v11;
      v14 = &v9[v11];
      v15 = *(_QWORD *)&v9[v11 - 40];
      *((_QWORD *)v14 - 5) = 0;
      *(_QWORD *)(v13 - 40) = v15;
      *(_QWORD *)(v13 - 32) = *(_QWORD *)&v9[v11 - 32];
      *((_QWORD *)v14 - 4) = 0;
      v16 = *(_QWORD *)&v9[v11 - 24];
      *(_QWORD *)(v25 + v11 - 24) = v16;
      v17 = *(_QWORD *)&v9[v11 - 16];
      *(_QWORD *)(v13 - 16) = v17;
      *(_DWORD *)(v13 - 8) = *(_DWORD *)&v9[v11 - 8];
      if (v17)
      {
        v12 = *(_QWORD *)(v16 + 8);
        v18 = *(_QWORD *)(v13 - 32);
        if ((v18 & (v18 - 1)) != 0)
        {
          if (v12 >= v18)
            v12 %= v18;
        }
        else
        {
          v12 &= v18 - 1;
        }
        *(_QWORD *)(v15 + 8 * v12) = v25 + v11 - 24;
        *(_QWORD *)&v9[v11 - 24] = 0;
        *(_QWORD *)&v9[v11 - 16] = 0;
      }
      v11 -= 40;
    }
    while (&v9[v11] != v10);
    v19 = (char *)*a1;
    v9 = (char *)a1[1];
    v8 = v25 + v11;
  }
  *a1 = (void *)v8;
  a1[1] = (void *)(v25 + 40);
  a1[2] = v27;
  if (v9 == v19)
  {
    if (v9)
LABEL_24:
      operator delete(v9);
  }
  else
  {
    do
    {
      v21 = (void **)(v9 - 40);
      v26 = v9 - 40;
      v22 = (_QWORD *)*((_QWORD *)v9 - 3);
      if (v22)
      {
        do
        {
          v23 = (_QWORD *)*v22;
          operator delete(v22);
          v22 = v23;
        }
        while (v23);
      }
      v24 = *v21;
      *v21 = 0;
      if (v24)
        operator delete(v24);
      v9 = v26;
    }
    while (v26 != v19);
    v9 = v19;
    if (v19)
      goto LABEL_24;
  }
  return v25 + 40;
}

void sub_2395595B0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_2395586BC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2395595C4(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  size_t v14;
  uint64_t i;
  uint64_t v16;
  void *v17;
  __int128 v18;

  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(_QWORD *)(a1 + 8);
  if (0x823EE08FB823EE09 * ((v4 - v5) >> 4) >= a2)
  {
    if (a2)
    {
      v12 = 912 * ((912 * a2 - 912) / 0x390) + 912;
      bzero(*(void **)(a1 + 8), v12);
      v5 += v12;
    }
    *(_QWORD *)(a1 + 8) = v5;
  }
  else
  {
    v6 = *(void **)a1;
    v7 = 0x823EE08FB823EE09 * ((v5 - *(_QWORD *)a1) >> 4);
    v8 = v7 + a2;
    if (v7 + a2 > 0x47DC11F7047DC1)
      sub_2394189F8();
    v9 = 0x823EE08FB823EE09 * ((v4 - (uint64_t)v6) >> 4);
    if (2 * v9 > v8)
      v8 = 2 * v9;
    if (v9 >= 0x23EE08FB823EE0)
      v10 = 0x47DC11F7047DC1;
    else
      v10 = v8;
    if (v10)
    {
      if (v10 > 0x47DC11F7047DC1)
        sub_239418A80();
      v11 = (char *)operator new(912 * v10);
    }
    else
    {
      v11 = 0;
    }
    v13 = &v11[912 * v7];
    *((_QWORD *)&v18 + 1) = &v11[912 * v10];
    v14 = 912 * ((912 * a2 - 912) / 0x390) + 912;
    bzero(v13, v14);
    for (i = 0; (void *)(v5 + i) != v6; sub_239557C30(&v13[i], (__int128 *)(i + v5)))
      i -= 912;
    v17 = *(void **)a1;
    v16 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)a1 = &v13[i];
    *(_QWORD *)&v18 = &v13[v14];
    for (*(_OWORD *)(a1 + 8) = v18; (void *)v16 != v17; v16 = sub_2394EF0D0(v16 - 912))
      ;
    if (v17)
      operator delete(v17);
  }
}

uint64_t sub_239559800(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 912;
    sub_2394EF0D0(i - 912);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

_QWORD *sub_239559850(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  _QWORD **v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  float v16;
  float v17;
  uint64_t v18;
  _QWORD *v19;
  _BOOL8 v20;
  unint64_t v21;
  unint64_t v22;
  size_t prime;
  unint64_t v24;
  uint8x8_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v7 >= v8)
        v4 = v7 % v8;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
    v10 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      v11 = *v10;
      if (*v10)
      {
        if (v9.u32[0] < 2uLL)
        {
          while (1)
          {
            v13 = v11[1];
            if (v13 == v7)
            {
              if (v11[2] == v7)
                return v11;
            }
            else if ((v13 & (v8 - 1)) != v4)
            {
              goto LABEL_23;
            }
            v11 = (_QWORD *)*v11;
            if (!v11)
              goto LABEL_23;
          }
        }
        do
        {
          v12 = v11[1];
          if (v12 == v7)
          {
            if (v11[2] == v7)
              return v11;
          }
          else
          {
            if (v12 >= v8)
              v12 %= v8;
            if (v12 != v4)
              break;
          }
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
    }
  }
LABEL_23:
  v14 = (_QWORD *)(a1 + 16);
  v11 = operator new(0x30uLL);
  *v11 = 0;
  v11[1] = v7;
  v15 = **a4;
  v11[4] = 0;
  v11[5] = 0;
  v11[2] = v15;
  v11[3] = 0;
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (v8 && (float)(v17 * (float)v8) >= v16)
  {
    v18 = *(_QWORD *)a1;
    v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v19)
    {
LABEL_26:
      *v11 = *v19;
LABEL_61:
      *v19 = v11;
      goto LABEL_62;
    }
  }
  else
  {
    v20 = 1;
    if (v8 >= 3)
      v20 = (v8 & (v8 - 1)) != 0;
    v21 = v20 | (2 * v8);
    v22 = vcvtps_u32_f32(v16 / v17);
    if (v21 <= v22)
      prime = v22;
    else
      prime = v21;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v8 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v8)
      goto LABEL_37;
    if (prime < v8)
    {
      v24 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v8 < 3 || (v25 = (uint8x8_t)vcnt_s8((int8x8_t)v8), v25.i16[0] = vaddlv_u8(v25), v25.u32[0] > 1uLL))
      {
        v24 = std::__next_prime(v24);
      }
      else
      {
        v26 = 1 << -(char)__clz(v24 - 1);
        if (v24 >= 2)
          v24 = v26;
      }
      if (prime <= v24)
        prime = v24;
      if (prime < v8)
LABEL_37:
        sub_239427FE0(a1, prime);
    }
    v8 = *(_QWORD *)(a1 + 8);
    v27 = v8 - 1;
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
      {
        v4 = v7 % v8;
        v18 = *(_QWORD *)a1;
        v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v7 % v8));
        if (v19)
          goto LABEL_26;
      }
      else
      {
        v4 = v7;
        v18 = *(_QWORD *)a1;
        v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v7);
        if (v19)
          goto LABEL_26;
      }
    }
    else
    {
      v4 = v27 & v7;
      v18 = *(_QWORD *)a1;
      v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v27 & v7));
      if (v19)
        goto LABEL_26;
    }
  }
  *v11 = *v14;
  *v14 = v11;
  *(_QWORD *)(v18 + 8 * v4) = v14;
  if (*v11)
  {
    v28 = *(_QWORD *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v28 >= v8)
        v28 %= v8;
    }
    else
    {
      v28 &= v8 - 1;
    }
    v19 = (_QWORD *)(*(_QWORD *)a1 + 8 * v28);
    goto LABEL_61;
  }
LABEL_62:
  ++*(_QWORD *)(a1 + 24);
  return v11;
}

void sub_239559B6C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_239559B80((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_239559B80(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;

  v2 = *(_QWORD **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
    {
      v3 = v2[3];
      if (v3)
      {
        v4 = v2[4];
        v5 = (void *)v2[3];
        if (v4 != v3)
        {
          v6 = v2[4];
          do
          {
            v8 = *(void **)(v6 - 24);
            v6 -= 24;
            v7 = v8;
            if (v8)
            {
              *(_QWORD *)(v4 - 16) = v7;
              operator delete(v7);
            }
            v4 = v6;
          }
          while (v6 != v3);
          v5 = (void *)v2[3];
        }
        v2[4] = v3;
        operator delete(v5);
      }
    }
    operator delete(v2);
  }
  return a1;
}

_QWORD *sub_239559C10(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  _QWORD **v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  float v16;
  float v17;
  uint64_t v18;
  _QWORD *v19;
  _BOOL8 v20;
  unint64_t v21;
  unint64_t v22;
  size_t prime;
  unint64_t v24;
  uint8x8_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v7 >= v8)
        v4 = v7 % v8;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
    v10 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      v11 = *v10;
      if (*v10)
      {
        if (v9.u32[0] < 2uLL)
        {
          while (1)
          {
            v13 = v11[1];
            if (v13 == v7)
            {
              if (v11[2] == v7)
                return v11;
            }
            else if ((v13 & (v8 - 1)) != v4)
            {
              goto LABEL_23;
            }
            v11 = (_QWORD *)*v11;
            if (!v11)
              goto LABEL_23;
          }
        }
        do
        {
          v12 = v11[1];
          if (v12 == v7)
          {
            if (v11[2] == v7)
              return v11;
          }
          else
          {
            if (v12 >= v8)
              v12 %= v8;
            if (v12 != v4)
              break;
          }
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
    }
  }
LABEL_23:
  v14 = (_QWORD *)(a1 + 16);
  v11 = operator new(0x30uLL);
  *v11 = 0;
  v11[1] = v7;
  v15 = **a4;
  v11[4] = 0;
  v11[5] = 0;
  v11[2] = v15;
  v11[3] = 0;
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (v8 && (float)(v17 * (float)v8) >= v16)
  {
    v18 = *(_QWORD *)a1;
    v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v19)
    {
LABEL_26:
      *v11 = *v19;
LABEL_61:
      *v19 = v11;
      goto LABEL_62;
    }
  }
  else
  {
    v20 = 1;
    if (v8 >= 3)
      v20 = (v8 & (v8 - 1)) != 0;
    v21 = v20 | (2 * v8);
    v22 = vcvtps_u32_f32(v16 / v17);
    if (v21 <= v22)
      prime = v22;
    else
      prime = v21;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v8 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v8)
      goto LABEL_37;
    if (prime < v8)
    {
      v24 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v8 < 3 || (v25 = (uint8x8_t)vcnt_s8((int8x8_t)v8), v25.i16[0] = vaddlv_u8(v25), v25.u32[0] > 1uLL))
      {
        v24 = std::__next_prime(v24);
      }
      else
      {
        v26 = 1 << -(char)__clz(v24 - 1);
        if (v24 >= 2)
          v24 = v26;
      }
      if (prime <= v24)
        prime = v24;
      if (prime < v8)
LABEL_37:
        sub_239427FE0(a1, prime);
    }
    v8 = *(_QWORD *)(a1 + 8);
    v27 = v8 - 1;
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
      {
        v4 = v7 % v8;
        v18 = *(_QWORD *)a1;
        v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v7 % v8));
        if (v19)
          goto LABEL_26;
      }
      else
      {
        v4 = v7;
        v18 = *(_QWORD *)a1;
        v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v7);
        if (v19)
          goto LABEL_26;
      }
    }
    else
    {
      v4 = v27 & v7;
      v18 = *(_QWORD *)a1;
      v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v27 & v7));
      if (v19)
        goto LABEL_26;
    }
  }
  *v11 = *v14;
  *v14 = v11;
  *(_QWORD *)(v18 + 8 * v4) = v14;
  if (*v11)
  {
    v28 = *(_QWORD *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v28 >= v8)
        v28 %= v8;
    }
    else
    {
      v28 &= v8 - 1;
    }
    v19 = (_QWORD *)(*(_QWORD *)a1 + 8 * v28);
    goto LABEL_61;
  }
LABEL_62:
  ++*(_QWORD *)(a1 + 24);
  return v11;
}

void sub_239559F2C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_239559B80((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_239559F44()
{
  JUMPOUT(0x23B83E31CLL);
}

__n128 sub_239559F58(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0xB0uLL);
  *(_QWORD *)v2 = &off_250ADDD90;
  *(_OWORD *)(v2 + 120) = *(_OWORD *)(a1 + 120);
  *(_OWORD *)(v2 + 136) = *(_OWORD *)(a1 + 136);
  *(_OWORD *)(v2 + 152) = *(_OWORD *)(a1 + 152);
  *((_QWORD *)v2 + 21) = *(_QWORD *)(a1 + 168);
  *(_OWORD *)(v2 + 56) = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(v2 + 72) = *(_OWORD *)(a1 + 72);
  *(_OWORD *)(v2 + 88) = *(_OWORD *)(a1 + 88);
  *(_OWORD *)(v2 + 104) = *(_OWORD *)(a1 + 104);
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  return result;
}

__n128 sub_239559FE0(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __n128 result;
  __int128 v8;
  __int128 v9;

  *(_QWORD *)a2 = &off_250ADDD90;
  v2 = *(_OWORD *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(_OWORD *)(a2 + 8) = v2;
  v4 = *(_OWORD *)(a1 + 56);
  v5 = *(_OWORD *)(a1 + 72);
  v6 = *(_OWORD *)(a1 + 88);
  *(_OWORD *)(a2 + 104) = *(_OWORD *)(a1 + 104);
  *(_OWORD *)(a2 + 88) = v6;
  *(_OWORD *)(a2 + 72) = v5;
  *(_OWORD *)(a2 + 56) = v4;
  result = *(__n128 *)(a1 + 120);
  v8 = *(_OWORD *)(a1 + 136);
  v9 = *(_OWORD *)(a1 + 152);
  *(_QWORD *)(a2 + 168) = *(_QWORD *)(a1 + 168);
  *(_OWORD *)(a2 + 152) = v9;
  *(_OWORD *)(a2 + 136) = v8;
  *(__n128 *)(a2 + 120) = result;
  return result;
}

uint64_t sub_23955A050(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  int64x2_t v21;
  uint64_t v22;
  const double *v23;
  uint64_t v24;
  double v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  void **v40;
  void *v41;
  void *v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  void **v46;
  void *v47;
  _BOOL4 v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  unint64_t v53;
  void *__p[2];
  char v55;
  _QWORD v56[4];
  unint64_t v57;
  float64x2x3_t v58;
  float64x2x3_t v59;

  v3 = *a2;
  v4 = *(_QWORD *)(a1 + 8);
  v55 = 0;
  LOBYTE(__p[0]) = 0;
  sub_2396FD394(v56, v4, (__int128 *)__p);
  if (v55 < 0)
    operator delete(__p[0]);
  v53 = 0;
  v5 = *(_QWORD *)(a1 + 24);
  v53 = *(_QWORD *)(**(_QWORD **)(a1 + 16) + 8 * v3);
  nullsub_4(v5);
  sub_2397A9494(v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = sub_2397A9F50(*(_QWORD *)(a1 + 24));
  sub_2397A9494(v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = *(_QWORD *)(a1 + 32);
  __p[0] = &v53;
  v11 = sub_239559850(v10, &v53, (uint64_t)&unk_239EC6E98, (uint64_t **)__p);
  v13 = v11[3];
  v12 = v11[4];
  if (v13 != v12)
  {
    v14 = v12 - v13 - 24;
    if (v14 >= 0x60)
    {
      v16 = v14 / 0x18 + 1;
      v17 = v16 & 3;
      if ((v16 & 3) == 0)
        v17 = 4;
      v18 = v16 - v17;
      v19 = v13 + 24 * v18;
      v20 = 0uLL;
      v21 = 0uLL;
      do
      {
        v22 = v13 + 96;
        v58 = vld3q_f64((const double *)v13);
        v23 = (const double *)(v13 + 48);
        v20 = vsraq_n_s64(v20, vsubq_s64((int64x2_t)v58.val[1], (int64x2_t)v58.val[0]), 3uLL);
        v59 = vld3q_f64(v23);
        v21 = vsraq_n_s64(v21, vsubq_s64((int64x2_t)v59.val[1], (int64x2_t)v59.val[0]), 3uLL);
        v13 = v22;
        v18 -= 4;
      }
      while (v18);
      v15 = vaddvq_s64(vaddq_s64(v21, v20));
      v13 = v19;
    }
    else
    {
      v15 = 0;
    }
    do
    {
      v25 = *(double *)v13;
      v24 = *(_QWORD *)(v13 + 8);
      v13 += 24;
      v15 += (v24 - *(_QWORD *)&v25) >> 3;
    }
    while (v13 != v12);
    if (v15)
    {
      v26 = *(_QWORD *)(a1 + 40);
      v57 = v53;
      v27 = *(_QWORD *)(v26 + 24);
      if (!v27)
        sub_2394172E0();
      (*(void (**)(void **__return_ptr, uint64_t, unint64_t *))(*(_QWORD *)v27 + 48))(__p, v27, &v57);
      v28 = __p[0];
      v30 = *((unsigned int *)__p[0] + 28);
      v29 = *((unsigned int *)__p[0] + 29);
      sub_2397A1694(*(pthread_mutex_t **)(a1 + 48));
      objc_msgSend(v9, "commandBuffer");
      v31 = (void *)objc_claimAutoreleasedReturnValue();
      v32 = **(void ***)(a1 + 56);
      v33 = v30;
      if (!v32
        || (v34 = objc_msgSend(v32, "width"), v33 = v30, v34 != v30)
        || (v35 = objc_msgSend(**(id **)(a1 + 56), "height"), v33 = v34, v35 != v29))
      {
        objc_msgSend(MEMORY[0x24BDDD740], "texture2DDescriptorWithPixelFormat:width:height:mipmapped:", 70, v33, v29, 1);
        v36 = (void *)objc_claimAutoreleasedReturnValue();
        if (v30 <= v29)
          v37 = v29;
        else
          v37 = v30;
        LODWORD(v38) = vcvtps_u32_f32(log2f((float)v37));
        objc_msgSend(v36, "setMipmapLevelCount:", v38);
        objc_msgSend(v36, "setUsage:", 3);
        v39 = objc_msgSend(v7, "newTextureWithDescriptor:", v36);
        v40 = *(void ***)(a1 + 56);
        v41 = *v40;
        *v40 = (void *)v39;

      }
      v42 = **(void ***)(a1 + 64);
      if (v42)
      {
        v43 = objc_msgSend(v42, "length");
        v44 = (3 * v30 * v29);
        if (v43 >= v44)
          goto LABEL_26;
      }
      else
      {
        v44 = (3 * v30 * v29);
      }
      v45 = objc_msgSend(v7, "newBufferWithLength:options:", v44, 0);
      v46 = *(void ***)(a1 + 64);
      v47 = *v46;
      *v46 = (void *)v45;

LABEL_26:
      sub_239552598(*(_QWORD *)(a1 + 24), (uint64_t)v28, v31, **(void ***)(a1 + 64), **(void ***)(a1 + 56));
      if (**(_BYTE **)(a1 + 72))
      {
        v48 = 1;
      }
      else
      {
        sub_23971DB68();
        objc_msgSend(v31, "commit");
        objc_msgSend(v31, "waitUntilCompleted");
        v48 = **(_BYTE **)(a1 + 72) != 0;
      }
      sub_239552880(*(_QWORD *)(a1 + 24), *(_QWORD **)(a1 + 32), **(void ***)(a1 + 80), **(void ***)(a1 + 88), **(void ***)(a1 + 96), **(void ***)(a1 + 56), v53, v48, **(_BYTE **)(a1 + 104), *(_QWORD *)(a1 + 112), *(uint64_t **)(a1 + 120), v31, **(void ***)(a1 + 128), **(void ***)(a1 + 136));
      if (**(_BYTE **)(a1 + 144))
        sub_23955301C(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 112), *(uint64_t **)(a1 + 32), v53, **(_BYTE **)(a1 + 72), *(uint64_t **)(a1 + 152), **(void ***)(a1 + 56), **(void ***)(a1 + 96), v31, **(void ***)(a1 + 160), **(void ***)(a1 + 168));
      if (**(_BYTE **)(a1 + 72))
      {
        sub_23971DB68();
        objc_msgSend(v31, "commit");
        objc_msgSend(v31, "waitUntilCompleted");
      }
      sub_2397A16B4(*(pthread_mutex_t **)(a1 + 48));

      v49 = (std::__shared_weak_count *)__p[1];
      if (__p[1])
      {
        v50 = (unint64_t *)((char *)__p[1] + 8);
        do
          v51 = __ldaxr(v50);
        while (__stlxr(v51 - 1, v50));
        if (!v51)
        {
          ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
          std::__shared_weak_count::__release_weak(v49);
        }
      }
    }
  }

  return sub_2396FD3E8((uint64_t)v56);
}

void sub_23955A458(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, std::__shared_weak_count *a18, int a19, __int16 a20,char a21,char a22,char a23)
{
  void *v23;
  void *v24;
  void *v25;
  unint64_t *p_shared_owners;
  unint64_t v28;

  if (a18)
  {
    p_shared_owners = (unint64_t *)&a18->__shared_owners_;
    do
      v28 = __ldaxr(p_shared_owners);
    while (__stlxr(v28 - 1, p_shared_owners));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))a18->__on_zero_shared)(a18);
      std::__shared_weak_count::__release_weak(a18);
    }
  }

  sub_2396FD3E8((uint64_t)&a23);
  _Unwind_Resume(a1);
}

_QWORD *sub_23955A50C(_QWORD *a1, unint64_t a2)
{
  char *v4;
  size_t v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL)
      sub_2394189F8();
    v4 = (char *)operator new(24 * a2);
    *a1 = v4;
    a1[2] = &v4[24 * a2];
    v5 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_23955A5B4(_Unwind_Exception *exception_object)
{
  uint64_t *v1;

  if (*v1)
    sub_239EC064C((uint64_t)(v1 + 1), *v1);
  _Unwind_Resume(exception_object);
}

void sub_23955A5D8()
{
  JUMPOUT(0x23B83E31CLL);
}

__n128 sub_23955A5EC(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x38uLL);
  *(_QWORD *)v2 = &off_250ADDDD8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  return result;
}

__n128 sub_23955A634(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  *(_QWORD *)a2 = &off_250ADDDD8;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_23955A664(uint64_t a1, unsigned int *a2)
{
  sub_23955A670((uint64_t **)(a1 + 8), *a2);
}

void sub_23955A670(uint64_t **a1, unsigned int a2)
{
  uint64_t v2;
  char **v3;
  char *v4;
  char **v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  int v10;
  _QWORD *v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  int v17;
  int v18;
  BOOL v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  BOOL v39;
  unint64_t v40;
  uint64_t v41;
  _BYTE *v42;
  char *v43;
  unint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _OWORD *v51;
  char *v52;
  uint64_t v53;
  __int128 v54;
  unsigned int v55;
  int v56;
  uint64_t v57;

  v2 = **a1;
  v3 = (char **)(v2 + 24 * a2);
  v4 = *v3;
  v3[1] = *v3;
  v5 = v3 + 1;
  v6 = *((_DWORD *)a1 + 10);
  v7 = *((_DWORD *)a1 + 8);
  v8 = v6 / v7 * a2;
  if (v7 - 1 != a2)
    v6 = v6 / v7 + v8;
  v55 = v6;
  if ((_DWORD)v8 == v6)
    return;
  v10 = *((_DWORD *)a1 + 9);
  if (!v10)
    return;
  v11 = (_QWORD *)(v2 + 24 * a2 + 16);
LABEL_6:
  v12 = 0;
  v56 = v10;
  do
  {
    v13 = *((_DWORD *)a1 + 9);
    v14 = *a1[1];
    if (((*(_QWORD *)(v14 + (((unint64_t)(v12 + v13 * v8) >> 3) & 0x1FFFFFF8)) >> (v12 + v13 * v8)) & 1) == 0)
      goto LABEL_9;
    v16 = a1[2];
    v15 = a1[3];
    v17 = *(_DWORD *)v16 + v12;
    if (v17 < 0
      || v17 >= v13
      || (v18 = *(_DWORD *)v15 + v8, v18 < 0)
      || v18 >= *((_DWORD *)a1 + 10)
      || (v19 = ((*(_QWORD *)(v14 + (((unint64_t)(v17 + v18 * v13) >> 3) & 0x1FFFFFF8)) >> (v17 + v18 * v13)) & 1) == 0,
          ((*(_QWORD *)(v14 + (((unint64_t)(v17 + v18 * v13) >> 3) & 0x1FFFFFF8)) >> (v17 + v18 * v13)) & 1) != 0))
    {
      v20 = *((_DWORD *)v16 + 1) + v12;
      if (v20 < 0
        || v20 >= v13
        || (v21 = *((_DWORD *)v15 + 1) + v8, v21 < 0)
        || v21 >= *((_DWORD *)a1 + 10)
        || (v19 = ((*(_QWORD *)(v14 + (((unint64_t)(v20 + v21 * v13) >> 3) & 0x1FFFFFF8)) >> (v20 + v21 * v13)) & 1) == 0,
            ((*(_QWORD *)(v14 + (((unint64_t)(v20 + v21 * v13) >> 3) & 0x1FFFFFF8)) >> (v20 + v21 * v13)) & 1) != 0))
      {
        v22 = *((_DWORD *)v16 + 2) + v12;
        if (v22 < 0
          || v22 >= v13
          || (v23 = *((_DWORD *)v15 + 2) + v8, v23 < 0)
          || v23 >= *((_DWORD *)a1 + 10)
          || (v19 = ((*(_QWORD *)(v14 + (((unint64_t)(v22 + v23 * v13) >> 3) & 0x1FFFFFF8)) >> (v22 + v23 * v13)) & 1) == 0,
              ((*(_QWORD *)(v14 + (((unint64_t)(v22 + v23 * v13) >> 3) & 0x1FFFFFF8)) >> (v22 + v23 * v13)) & 1) != 0))
        {
          v24 = *((_DWORD *)v16 + 3) + v12;
          if (v24 < 0
            || v24 >= v13
            || (v25 = *((_DWORD *)v15 + 3) + v8, v25 < 0)
            || v25 >= *((_DWORD *)a1 + 10)
            || (v19 = ((*(_QWORD *)(v14 + (((unint64_t)(v24 + v25 * v13) >> 3) & 0x1FFFFFF8)) >> (v24 + v25 * v13)) & 1) == 0,
                ((*(_QWORD *)(v14 + (((unint64_t)(v24 + v25 * v13) >> 3) & 0x1FFFFFF8)) >> (v24 + v25 * v13)) & 1) != 0))
          {
            v26 = *((_DWORD *)v16 + 4) + v12;
            if (v26 < 0
              || v26 >= v13
              || (v27 = *((_DWORD *)v15 + 4) + v8, v27 < 0)
              || v27 >= *((_DWORD *)a1 + 10)
              || (v19 = ((*(_QWORD *)(v14 + (((unint64_t)(v26 + v27 * v13) >> 3) & 0x1FFFFFF8)) >> (v26 + v27 * v13)) & 1) == 0,
                  ((*(_QWORD *)(v14 + (((unint64_t)(v26 + v27 * v13) >> 3) & 0x1FFFFFF8)) >> (v26 + v27 * v13)) & 1) != 0))
            {
              v28 = *((_DWORD *)v16 + 5) + v12;
              if (v28 < 0
                || v28 >= v13
                || (v29 = *((_DWORD *)v15 + 5) + v8, v29 < 0)
                || v29 >= *((_DWORD *)a1 + 10)
                || (v19 = ((*(_QWORD *)(v14 + (((unint64_t)(v28 + v29 * v13) >> 3) & 0x1FFFFFF8)) >> (v28 + v29 * v13)) & 1) == 0,
                    ((*(_QWORD *)(v14 + (((unint64_t)(v28 + v29 * v13) >> 3) & 0x1FFFFFF8)) >> (v28 + v29 * v13)) & 1) != 0))
              {
                v30 = *((_DWORD *)v16 + 6) + v12;
                if (v30 < 0
                  || v30 >= v13
                  || (v31 = *((_DWORD *)v15 + 6) + v8, v31 < 0)
                  || v31 >= *((_DWORD *)a1 + 10)
                  || (v19 = ((*(_QWORD *)(v14 + (((unint64_t)(v30 + v31 * v13) >> 3) & 0x1FFFFFF8)) >> (v30 + v31 * v13)) & 1) == 0,
                      ((*(_QWORD *)(v14 + (((unint64_t)(v30 + v31 * v13) >> 3) & 0x1FFFFFF8)) >> (v30 + v31 * v13)) & 1) != 0))
                {
                  v32 = *((_DWORD *)v16 + 7) + v12;
                  if (v32 < 0)
                    goto LABEL_9;
                  if (v32 >= v13)
                    goto LABEL_9;
                  v33 = *((_DWORD *)v15 + 7) + v8;
                  if (v33 < 0 || v33 >= *((_DWORD *)a1 + 10))
                    goto LABEL_9;
                  v19 = ((*(_QWORD *)(v14 + (((unint64_t)(v32 + v33 * v13) >> 3) & 0x1FFFFFF8)) >> (v32 + v33 * v13)) & 1) == 0;
                }
              }
            }
          }
        }
      }
    }
    if (v19)
    {
      if ((unint64_t)v4 < *v11)
      {
        *(_DWORD *)v4 = v12;
        *((_DWORD *)v4 + 1) = v8;
        v4 += 8;
      }
      else
      {
        v34 = *v3;
        v35 = v4 - *v3;
        v36 = v35 >> 3;
        v37 = (v35 >> 3) + 1;
        if (v37 >> 61)
          sub_2394189F8();
        v38 = *v11 - (_QWORD)v34;
        if (v38 >> 2 > v37)
          v37 = v38 >> 2;
        v39 = (unint64_t)v38 >= 0x7FFFFFFFFFFFFFF8;
        v40 = 0x1FFFFFFFFFFFFFFFLL;
        if (!v39)
          v40 = v37;
        if (v40 >> 61)
          sub_239418A80();
        v41 = v8;
        v57 = 8 * v40;
        v42 = operator new(8 * v40);
        v43 = &v42[8 * v36];
        *(_DWORD *)v43 = v12;
        *((_DWORD *)v43 + 1) = v41;
        v8 = v41;
        if (v4 == v34)
        {
          *v3 = v43;
          v4 = v43 + 8;
          *v5 = v43 + 8;
          *v11 = &v42[v57];
          if (v34)
            goto LABEL_79;
        }
        else
        {
          v44 = v4 - 8 - v34;
          if (v44 < 0x168
            || &v42[v35 - 8 - (v44 & 0xFFFFFFFFFFFFFFF8)] > &v42[v35 - 8]
            || &v4[-(v44 & 0xFFFFFFFFFFFFFFF8) - 8] > v4 - 8
            || (unint64_t)(&v4[-v35] - v42) < 0x20)
          {
            v45 = v4;
            v46 = &v42[8 * v36];
            v47 = v57;
            goto LABEL_77;
          }
          v49 = (v44 >> 3) + 1;
          v50 = 8 * (v49 & 0x3FFFFFFFFFFFFFFCLL);
          v45 = &v4[-v50];
          v46 = &v43[-v50];
          v51 = &v42[8 * v36 - 16];
          v52 = v4 - 16;
          v53 = v49 & 0x3FFFFFFFFFFFFFFCLL;
          v47 = v57;
          do
          {
            v54 = *(_OWORD *)v52;
            *(v51 - 1) = *((_OWORD *)v52 - 1);
            *v51 = v54;
            v51 -= 2;
            v52 -= 32;
            v53 -= 4;
          }
          while (v53);
          if (v49 != (v49 & 0x3FFFFFFFFFFFFFFCLL))
          {
            do
            {
LABEL_77:
              v48 = *((_QWORD *)v45 - 1);
              v45 -= 8;
              *((_QWORD *)v46 - 1) = v48;
              v46 -= 8;
            }
            while (v45 != v34);
          }
          *v3 = v46;
          v4 = v43 + 8;
          *v5 = v43 + 8;
          *v11 = &v42[v47];
          if (v34)
          {
LABEL_79:
            operator delete(v34);
            v8 = v41;
          }
        }
        v10 = v56;
      }
      *v5 = v4;
    }
LABEL_9:
    ++v12;
  }
  while (v12 != v10);
  while (1)
  {
    v8 = (v8 + 1);
    if ((_DWORD)v8 == v55)
      break;
    v10 = *((_DWORD *)a1 + 9);
    if (v10)
      goto LABEL_6;
  }
}

uint64_t *sub_23955AC20(unint64_t *a1, uint64_t a2, char *a3, char *a4, uint64_t a5)
{
  unint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  unint64_t v22;
  char *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  _OWORD *v27;
  __int128 *v28;
  uint64_t v29;
  __int128 v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  __int128 *v37;
  _OWORD *v38;
  uint64_t v39;
  __int128 v40;
  uint64_t v41;
  char *v42;
  char *v43;
  char *v44;
  unint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _OWORD *v50;
  __int128 *v51;
  uint64_t v52;
  __int128 v53;
  uint64_t v54;
  char *v55;
  char *v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _OWORD *v60;
  __int128 *v61;
  uint64_t v62;
  __int128 v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  _QWORD *v69;
  _QWORD *v70;
  unint64_t v71;
  char *v72;
  unint64_t v73;
  unint64_t v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  _OWORD *v78;
  __int128 *v79;
  uint64_t v80;
  __int128 v81;
  uint64_t v82;
  _QWORD *v83;
  uint64_t *v84;
  _DWORD *v85;
  int v86;
  unint64_t v87;
  uint64_t *v88;
  uint64_t v89;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  BOOL v94;
  BOOL v95;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  __int128 *v100;
  _OWORD *v101;
  uint64_t v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  unint64_t v107;
  uint64_t v108;
  const float *v109;
  float *v110;
  uint64_t v111;
  float32x4x2_t v112;

  v5 = *a1;
  v6 = a2 - *a1;
  v7 = (uint64_t *)(*a1 + (v6 & 0xFFFFFFFFFFFFFFF8));
  v8 = a5 - 1;
  if (a5 < 1)
    return v7;
  v12 = v6 >> 3;
  v14 = a1[1];
  v13 = a1[2];
  if (a5 <= (uint64_t)(v13 - v14) >> 3)
  {
    v19 = v14 - (_QWORD)v7;
    v20 = (uint64_t)(v14 - (_QWORD)v7) >> 3;
    if (v20 >= a5)
    {
      v21 = &a3[8 * a5];
      v24 = (_QWORD *)a1[1];
      goto LABEL_49;
    }
    v21 = &a3[8 * v20];
    if (v21 == a4)
    {
      v24 = (_QWORD *)a1[1];
      goto LABEL_48;
    }
    v22 = a4 - &a3[v19] - 8;
    if (v22 < 0x38)
    {
      v23 = &a3[8 * v20];
      v24 = (_QWORD *)a1[1];
    }
    else
    {
      v23 = &a3[8 * v20];
      v24 = (_QWORD *)a1[1];
      if ((unint64_t)((char *)v7 - a3) >= 0x20)
      {
        v25 = (v22 >> 3) + 1;
        v26 = 8 * (v25 & 0x3FFFFFFFFFFFFFFCLL);
        v23 = &v21[v26];
        v24 = (_QWORD *)(v14 + v26);
        v27 = (_OWORD *)(v14 + 16);
        v28 = (__int128 *)&a3[8 * v20 + 16];
        v29 = v25 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v30 = *v28;
          *(v27 - 1) = *(v28 - 1);
          *v27 = v30;
          v27 += 2;
          v28 += 2;
          v29 -= 4;
        }
        while (v29);
        if (v25 == (v25 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_48:
          a1[1] = (unint64_t)v24;
          if (v19 >= 1)
          {
LABEL_49:
            v67 = (char *)&v7[a5];
            v68 = (char *)v24 - v67;
            v69 = &v24[-a5];
            v70 = v24;
            if ((unint64_t)v69 < v14)
            {
              v71 = (v6 & 0xFFFFFFFFFFFFFFF8) + v68;
              v72 = (char *)(v71 + v5);
              v73 = v71 + v5 + 8;
              if (v14 > v73)
                v73 = v14;
              v74 = v73 + ~v5 - v71;
              v75 = &v24[-a5];
              v70 = v24;
              if (v74 < 0x58)
                goto LABEL_94;
              v75 = &v24[-a5];
              v70 = v24;
              if ((unint64_t)((char *)v24 - v72) < 0x20)
                goto LABEL_94;
              v76 = (v74 >> 3) + 1;
              v77 = v76 & 0x3FFFFFFFFFFFFFFCLL;
              v75 = &v69[v77];
              v70 = &v24[v77];
              v78 = v24 + 2;
              v79 = (__int128 *)(8 * (v68 >> 3) + 8 * v12 + v5 + 16);
              v80 = v76 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v81 = *v79;
                *(v78 - 1) = *(v79 - 1);
                *v78 = v81;
                v78 += 2;
                v79 += 2;
                v80 -= 4;
              }
              while (v80);
              if (v76 != (v76 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_94:
                do
                {
                  v82 = *v75++;
                  *v70++ = v82;
                }
                while ((unint64_t)v75 < v14);
              }
            }
            a1[1] = (unint64_t)v70;
            if (v24 == (_QWORD *)v67)
              goto LABEL_65;
            if ((unint64_t)(v68 - 8) >= 0x78
              && ((_QWORD *)((char *)v24 - (v68 & 0xFFFFFFFFFFFFFFF8)) >= v69
               || v5 + v68 + (v6 & 0xFFFFFFFFFFFFFFF8) - (v68 & 0xFFFFFFFFFFFFFFF8) >= (unint64_t)v24))
            {
              v107 = ((unint64_t)(v68 - 8) >> 3) + 1;
              v108 = 8 * (v107 & 0x3FFFFFFFFFFFFFFCLL);
              v83 = &v24[v108 / 0xFFFFFFFFFFFFFFF8];
              v84 = &v69[v108 / 0xFFFFFFFFFFFFFFF8];
              v109 = (const float *)(v69 - 4);
              v110 = (float *)(v24 - 4);
              v111 = v107 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v112 = vld2q_f32(v109);
                v109 -= 8;
                vst2q_f32(v110, v112);
                v110 -= 8;
                v111 -= 4;
              }
              while (v111);
              if (v107 == (v107 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_65;
            }
            else
            {
              v83 = v24;
              v84 = &v24[-a5];
            }
            v85 = (_DWORD *)v83 - 1;
            do
            {
              v86 = *((_DWORD *)v84-- - 2);
              *(v85 - 1) = v86;
              *v85 = *((_DWORD *)v84 + 1);
              v85 -= 2;
            }
            while (v84 != v7);
LABEL_65:
            if (v21 != a3)
            {
              v87 = v21 - a3 - 8;
              v88 = v7;
              if (v87 < 0xB8)
                goto LABEL_95;
              v91 = (v6 & 0xFFFFFFFFFFFFFFF8) + v5 + (v87 & 0xFFFFFFFFFFFFFFF8);
              v92 = v91 + 4;
              v93 = v91 + 8;
              v94 = v5 + (v6 & 0xFFFFFFFFFFFFFFF8) + 4 >= (unint64_t)&a3[(v87 & 0xFFFFFFFFFFFFFFF8) + 8]
                 || (unint64_t)(a3 + 4) >= v93;
              v95 = !v94;
              v88 = v7;
              if (v92 > (unint64_t)a3 && v7 < (uint64_t *)&a3[(v87 & 0xFFFFFFFFFFFFFFF8) + 4])
                goto LABEL_95;
              if (v95)
                goto LABEL_95;
              v97 = (v87 >> 3) + 1;
              v98 = v97 & 0x3FFFFFFFFFFFFFF8;
              v88 = &v7[v98];
              v99 = &a3[v98 * 8];
              v100 = (__int128 *)(a3 + 32);
              v101 = (_OWORD *)(v5 + 8 * v12 + 32);
              v102 = v97 & 0x3FFFFFFFFFFFFFF8;
              do
              {
                v104 = *(v100 - 2);
                v103 = *(v100 - 1);
                v106 = *v100;
                v105 = v100[1];
                v100 += 4;
                *(v101 - 2) = v104;
                *(v101 - 1) = v103;
                *v101 = v106;
                v101[1] = v105;
                v101 += 4;
                v102 -= 8;
              }
              while (v102);
              a3 = v99;
              if (v97 != (v97 & 0x3FFFFFFFFFFFFFF8))
              {
LABEL_95:
                do
                {
                  v89 = *(_QWORD *)a3;
                  a3 += 8;
                  *v88++ = v89;
                }
                while (a3 != v21);
              }
            }
          }
          return v7;
        }
      }
    }
    do
    {
      v66 = *(_QWORD *)v23;
      v23 += 8;
      *v24++ = v66;
    }
    while (v23 != a4);
    goto LABEL_48;
  }
  v15 = a5 + ((uint64_t)(v14 - v5) >> 3);
  if (v15 >> 61)
    sub_2394189F8();
  v16 = v13 - v5;
  if (v16 >> 2 > v15)
    v15 = v16 >> 2;
  if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8)
    v17 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v17 = v15;
  if (v17)
  {
    if (v17 >> 61)
      sub_239418A80();
    v18 = operator new(8 * v17);
    v12 = v6 >> 3;
  }
  else
  {
    v18 = 0;
  }
  v31 = &v18[8 * v12];
  v32 = &v31[a5];
  v33 = v31;
  v34 = a3;
  if ((v8 & 0x1FFFFFFFFFFFFFFFuLL) < 7)
    goto LABEL_96;
  v33 = &v18[8 * v12];
  v34 = a3;
  if ((unint64_t)(&v18[v6 & 0xFFFFFFFFFFFFFFF8] - a3) < 0x20)
    goto LABEL_96;
  v35 = (v8 & 0x1FFFFFFFFFFFFFFFLL) + 1;
  v36 = v35 & 0x3FFFFFFFFFFFFFFCLL;
  v33 = &v31[v36];
  v34 = &a3[v36 * 8];
  v37 = (__int128 *)(a3 + 16);
  v38 = &v18[8 * v12 + 16];
  v39 = v35 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    v40 = *v37;
    *(v38 - 1) = *(v37 - 1);
    *v38 = v40;
    v37 += 2;
    v38 += 2;
    v39 -= 4;
  }
  while (v39);
  if (v35 != (v35 & 0x3FFFFFFFFFFFFFFCLL))
  {
LABEL_96:
    do
    {
      v41 = *(_QWORD *)v34;
      v34 += 8;
      *v33++ = v41;
    }
    while (v33 != v32);
  }
  v42 = (char *)*a1;
  v43 = &v18[8 * v12];
  if ((uint64_t *)*a1 != v7)
  {
    v44 = (char *)((v6 & 0xFFFFFFFFFFFFFFF8) + v5);
    v45 = v44 - v42 - 8;
    v46 = (char *)v7;
    v43 = &v18[8 * v12];
    if (v45 < 0x68)
      goto LABEL_97;
    v46 = (char *)v7;
    v43 = &v18[8 * v12];
    if ((unint64_t)(v44 - &v18[v6 & 0xFFFFFFFFFFFFFFF8]) < 0x20)
      goto LABEL_97;
    v47 = (v45 >> 3) + 1;
    v48 = 8 * (v47 & 0x3FFFFFFFFFFFFFFCLL);
    v46 = (char *)&v7[v48 / 0xFFFFFFFFFFFFFFF8];
    v43 = (char *)&v31[v48 / 0xFFFFFFFFFFFFFFF8];
    v49 = 8 * v12 - 16;
    v50 = &v18[v49];
    v51 = (__int128 *)(v5 + v49);
    v52 = v47 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v53 = *v51;
      *(v50 - 1) = *(v51 - 1);
      *v50 = v53;
      v50 -= 2;
      v51 -= 2;
      v52 -= 4;
    }
    while (v52);
    if (v47 != (v47 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_97:
      do
      {
        v54 = *((_QWORD *)v46 - 1);
        v46 -= 8;
        *((_QWORD *)v43 - 1) = v54;
        v43 -= 8;
      }
      while (v46 != v42);
    }
    v14 = a1[1];
  }
  v55 = &v18[8 * v17];
  if ((uint64_t *)v14 != v7)
  {
    v56 = (char *)((v6 & 0xFFFFFFFFFFFFFFF8) + v5);
    v57 = v14 - (_QWORD)v56 - 8;
    if (v57 < 0x68)
      goto LABEL_98;
    if ((unint64_t)(&v18[8 * a5 + (v6 & 0xFFFFFFFFFFFFFFF8)] - v56) < 0x20)
      goto LABEL_98;
    v58 = (v57 >> 3) + 1;
    v59 = 8 * (v58 & 0x3FFFFFFFFFFFFFFCLL);
    v7 = (uint64_t *)((char *)v7 + v59);
    v32 = (_QWORD *)((char *)v32 + v59);
    v60 = &v18[8 * v12 + 16 + 8 * a5];
    v61 = (__int128 *)(8 * v12 + v5 + 16);
    v62 = v58 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v63 = *v61;
      *(v60 - 1) = *(v61 - 1);
      *v60 = v63;
      v60 += 2;
      v61 += 2;
      v62 -= 4;
    }
    while (v62);
    if (v58 != (v58 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_98:
      do
      {
        v64 = *v7++;
        *v32++ = v64;
      }
      while (v7 != (uint64_t *)v14);
    }
  }
  v65 = (_QWORD *)*a1;
  *a1 = (unint64_t)v43;
  a1[1] = (unint64_t)v32;
  a1[2] = (unint64_t)v55;
  if (v65)
    operator delete(v65);
  return v31;
}

void sub_23955B1EC()
{
  JUMPOUT(0x23B83E31CLL);
}

__n128 sub_23955B200(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x50uLL);
  *(_QWORD *)v2 = &off_250ADDE20;
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(v2 + 56) = *(_OWORD *)(a1 + 56);
  *((_QWORD *)v2 + 9) = *(_QWORD *)(a1 + 72);
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_23955B258(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_QWORD *)a2 = &off_250ADDE20;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  v3 = *(_OWORD *)(a1 + 40);
  v4 = *(_OWORD *)(a1 + 56);
  *(_QWORD *)(a2 + 72) = *(_QWORD *)(a1 + 72);
  *(_OWORD *)(a2 + 56) = v4;
  *(_OWORD *)(a2 + 40) = v3;
  *(__n128 *)(a2 + 24) = result;
  return result;
}

void sub_23955B298(uint64_t a1, unsigned int *a2)
{
  sub_23955B2A4((uint64_t **)(a1 + 8), *a2);
}

void sub_23955B2A4(uint64_t **a1, unsigned int a2)
{
  uint64_t *v2;
  uint64_t v3;
  int **v4;
  int **v5;
  unint64_t v6;
  unint64_t v7;
  unsigned int v8;
  uint64_t v10;
  int *v11;
  int v12;
  int v13;
  int *v14;
  int v15;
  int v16;
  int v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t *v25;
  int *v26;
  int *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  BOOL v32;
  unint64_t v33;
  _BYTE *v34;
  int *v35;
  unint64_t v36;
  int *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int *v42;
  _OWORD *v43;
  int *v44;
  uint64_t v45;
  __int128 v46;
  uint64_t v47;
  int **v48;
  int v49;
  int **v50;
  uint64_t v51;
  unsigned int v52;
  _QWORD *v53;

  v2 = a1[1];
  v3 = **a1;
  v4 = (int **)(v3 + 24 * a2);
  v4[1] = *v4;
  v5 = v4 + 1;
  v6 = (v2[1] - *v2) >> 3;
  v7 = *((int *)a1 + 14);
  v8 = v6 / v7 * a2;
  if ((_DWORD)v7 - 1 != a2)
    LODWORD(v6) = v6 / v7 + v8;
  v49 = v6;
  if (v8 != (_DWORD)v6)
  {
    v53 = (_QWORD *)(v3 + 24 * a2 + 16);
    v48 = (int **)(v3 + 24 * a2);
    v50 = v4 + 1;
    do
    {
      v10 = 0;
      v11 = (int *)(*a1[1] + 8 * v8);
      v13 = *v11;
      v12 = v11[1];
      do
      {
        v15 = *((_DWORD *)a1[2] + v10) + v13;
        if (v15 >= 0)
        {
          v16 = *((_DWORD *)a1 + 16);
          if (v15 < v16)
          {
            v17 = *((_DWORD *)a1[3] + v10) + v12;
            if ((v17 & 0x80000000) == 0 && v17 < *((_DWORD *)a1 + 17))
            {
              v18 = (v15 + v16 * v17);
              v19 = *a1[5];
              v20 = v18 >> 6;
              v21 = 1 << v18;
              v22 = *(_QWORD *)(v19 + 8 * v20);
              if ((v22 & v21) == 0)
              {
                *(_QWORD *)(v19 + 8 * v20) = v22 | v21;
                *(_BYTE *)(a1[6][4] + (*((_DWORD *)a1[6] + 18) * v15 + *((_DWORD *)a1[6] + 19) * v17)) = -1;
                if (*((_BYTE *)a1 + 60))
                {
                  v23 = a1[4];
                  *(_BYTE *)(v23[4] + (*((_DWORD *)v23 + 30) * v15 + *((_DWORD *)v23 + 31) * v17)) = *(_BYTE *)(v23[4] + (*((_DWORD *)v23 + 30) * v13 + *((_DWORD *)v23 + 31) * v12));
                  v24 = a1[4];
                  *(_BYTE *)(v24[4] + (*((_DWORD *)v24 + 30) * v15 + *((_DWORD *)v24 + 31) * v17) + 1) = *(_BYTE *)(v24[4] + (*((_DWORD *)v24 + 30) * v13 + *((_DWORD *)v24 + 31) * v12) + 1);
                  v25 = a1[4];
                  *(_BYTE *)(v25[4] + (*((_DWORD *)v25 + 30) * v15 + *((_DWORD *)v25 + 31) * v17) + 2) = *(_BYTE *)(v25[4] + (*((_DWORD *)v25 + 30) * v13 + *((_DWORD *)v25 + 31) * v12) + 2);
                }
                v26 = *v5;
                if ((unint64_t)*v5 < *v53)
                {
                  *v26 = v15;
                  v26[1] = v17;
                  v14 = v26 + 2;
                }
                else
                {
                  v27 = *v4;
                  v28 = (char *)v26 - (char *)*v4;
                  v29 = v28 >> 3;
                  v30 = (v28 >> 3) + 1;
                  if (v30 >> 61)
                    sub_2394189F8();
                  v52 = v8;
                  v31 = *v53 - (_QWORD)v27;
                  if (v31 >> 2 > v30)
                    v30 = v31 >> 2;
                  v32 = (unint64_t)v31 >= 0x7FFFFFFFFFFFFFF8;
                  v33 = 0x1FFFFFFFFFFFFFFFLL;
                  if (!v32)
                    v33 = v30;
                  if (v33 >> 61)
                    sub_239418A80();
                  v51 = 8 * v33;
                  v34 = operator new(8 * v33);
                  v35 = (int *)&v34[8 * v29];
                  *v35 = v15;
                  v35[1] = v17;
                  if (v26 == v27)
                  {
                    v37 = (int *)&v34[8 * v29];
                    v4 = v48;
                    v5 = v50;
                    v38 = v51;
                  }
                  else
                  {
                    v36 = (char *)(v26 - 2) - (char *)v27;
                    v5 = v50;
                    if (v36 < 0x58)
                    {
                      v37 = (int *)&v34[8 * v29];
                      v4 = v48;
                      v38 = v51;
                      goto LABEL_33;
                    }
                    v39 = (char *)v26 - &v34[v28];
                    v37 = (int *)&v34[8 * v29];
                    v4 = v48;
                    v38 = v51;
                    if (v39 < 0x20)
                      goto LABEL_41;
                    v40 = (v36 >> 3) + 1;
                    v41 = 8 * (v40 & 0x3FFFFFFFFFFFFFFCLL);
                    v42 = &v26[v41 / 0xFFFFFFFFFFFFFFFCLL];
                    v37 = &v35[v41 / 0xFFFFFFFFFFFFFFFCLL];
                    v43 = &v34[8 * v29 - 16];
                    v44 = v26 - 4;
                    v45 = v40 & 0x3FFFFFFFFFFFFFFCLL;
                    do
                    {
                      v46 = *(_OWORD *)v44;
                      *(v43 - 1) = *((_OWORD *)v44 - 1);
                      *v43 = v46;
                      v43 -= 2;
                      v44 -= 8;
                      v45 -= 4;
                    }
                    while (v45);
                    v26 = v42;
                    if (v40 != (v40 & 0x3FFFFFFFFFFFFFFCLL))
                    {
LABEL_41:
                      do
                      {
LABEL_33:
                        v47 = *((_QWORD *)v26 - 1);
                        v26 -= 2;
                        *((_QWORD *)v37 - 1) = v47;
                        v37 -= 2;
                      }
                      while (v26 != v27);
                    }
                  }
                  *v4 = v37;
                  v14 = v35 + 2;
                  *v5 = v35 + 2;
                  *v53 = &v34[v38];
                  if (v27)
                  {
                    operator delete(v27);
                    v5 = v50;
                  }
                  v8 = v52;
                }
                *v5 = v14;
              }
            }
          }
        }
        ++v10;
      }
      while (v10 != 8);
      ++v8;
    }
    while (v8 != v49);
  }
}

void sub_23955B60C()
{
  JUMPOUT(0x23B83E31CLL);
}

__n128 sub_23955B620(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x40uLL);
  *(_QWORD *)v2 = &off_250ADDE68;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  *((_QWORD *)v2 + 7) = *(_QWORD *)(a1 + 56);
  return result;
}

__n128 sub_23955B670(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_QWORD *)a2 = &off_250ADDE68;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  v4 = *(_OWORD *)(a1 + 40);
  *(_QWORD *)(a2 + 56) = *(_QWORD *)(a1 + 56);
  *(_OWORD *)(a2 + 40) = v4;
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_23955B6A8(uint64_t result, _QWORD *a2)
{
  uint64_t *v2;
  uint64_t v3;
  float v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int *v13;
  unint64_t v14;
  uint64_t v15;
  unsigned int *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int *v19;
  unsigned int *v20;
  float *v21;
  uint64_t v22;
  float *v23;
  uint64_t v24;
  float *v25;
  float32x4_t v26;
  float v27;
  int v28;
  float v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;

  v2 = *(uint64_t **)(**(_QWORD **)(result + 8) + 40 * *a2 + 16);
  if (v2)
  {
    v3 = result;
    __asm { FMOV            V0.4S, #3.0 }
    v30 = _Q0;
    do
    {
      v10 = *((_DWORD *)v2 + 4);
      v11 = **(_QWORD **)(v3 + 16) + 24 * v10;
      v12 = *(unsigned int **)v11;
      v13 = *(unsigned int **)(v11 + 8);
      if (*(unsigned int **)v11 != v13)
      {
        while (1)
        {
          v14 = *v12;
          if (((*(_QWORD *)(**(_QWORD **)(v3 + 24) + ((v14 >> 3) & 0x1FFFFFF8)) >> v14) & 1) == 0)
            break;
          if (++v12 == v13)
            goto LABEL_5;
        }
        v15 = *(_QWORD *)(v3 + 32);
        if (!*(_BYTE *)(v15 + 200))
          goto LABEL_25;
        if (!*(_BYTE *)(v15 + 232))
          goto LABEL_25;
        if (!*(_BYTE *)(v15 + 264))
          goto LABEL_25;
        if (!*(_BYTE *)(v15 + 168))
          goto LABEL_25;
        v16 = (unsigned int *)(*(_QWORD *)(v15 + 176) + 12 * v14);
        v17 = *(_QWORD *)(v15 + 208) + 912 * *(unsigned int *)(*(_QWORD *)(v15 + 240) + 4 * v14);
        v18 = v17 + 72;
        v19 = (unsigned int *)(v17 + 184);
        v20 = (unsigned int *)(v17 + 188);
        v21 = (float *)(*(_QWORD *)(v15 + 144) + 8 * *v16);
        sub_23952B290(v17 + 72, v33.f32, *v21 * (float)*(unsigned int *)(v17 + 184), (float)(1.0 - v21[1]) * (float)*(unsigned int *)(v17 + 188));
        v22 = *(_QWORD *)(v3 + 32);
        if (!*(_BYTE *)(v22 + 168)
          || (v31 = v33,
              v23 = (float *)(*(_QWORD *)(v22 + 144) + 8 * v16[1]),
              sub_23952B290(v18, v33.f32, *v23 * (float)*v19, (float)(1.0 - v23[1]) * (float)*v20),
              v24 = *(_QWORD *)(v3 + 32),
              !*(_BYTE *)(v24 + 168)))
        {
LABEL_25:
          sub_2394875CC();
        }
        v32 = vaddq_f32(vaddq_f32(v31, (float32x4_t)0), v33);
        v25 = (float *)(*(_QWORD *)(v24 + 144) + 8 * v16[2]);
        result = sub_23952B290(v18, v33.f32, *v25 * (float)*v19, (float)(1.0 - v25[1]) * (float)*v20);
        v26 = vdivq_f32(vaddq_f32(v32, v33), v30);
        if (**(_BYTE **)(v3 + 40))
          v27 = **(float **)(v3 + 56);
        else
          v27 = v26.f32[0];
        v28 = 3 * v10;
        *(_BYTE *)(**(_QWORD **)(v3 + 48) + 3 * v10) = (int)v27;
        if (**(_BYTE **)(v3 + 40))
          v29 = *(float *)(*(_QWORD *)(v3 + 56) + 4);
        else
          v29 = v26.f32[1];
        *(_BYTE *)(**(_QWORD **)(v3 + 48) + (v28 + 1)) = (int)v29;
        if (**(_BYTE **)(v3 + 40))
          v9 = *(float *)(*(_QWORD *)(v3 + 56) + 8);
        else
          v9 = v26.f32[2];
        *(_BYTE *)(**(_QWORD **)(v3 + 48) + (v28 + 2)) = (int)v9;
      }
LABEL_5:
      v2 = (uint64_t *)*v2;
    }
    while (v2);
  }
  return result;
}

void sub_23955B94C()
{
  JUMPOUT(0x23B83E31CLL);
}

__n128 sub_23955B960(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x30uLL);
  *(_QWORD *)v2 = &off_250ADDEB0;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((_QWORD *)v2 + 5) = *(_QWORD *)(a1 + 40);
  return result;
}

__n128 sub_23955B9A8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  *(_QWORD *)a2 = &off_250ADDEB0;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_23955B9D8(uint64_t result, _QWORD *a2, double a3, double a4, double a5)
{
  uint64_t *v5;
  unsigned int v6;
  _QWORD *v7;
  float32x4_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  _DWORD *v12;
  _DWORD *v13;
  float32x4_t v14;
  uint64_t v15;
  float v16;
  float v17;
  int v18;
  float v19;
  int v20;
  int v21;

  v5 = *(uint64_t **)(**(_QWORD **)(result + 8) + 40 * *a2 + 16);
  if (v5)
  {
    v6 = 0;
    v7 = *(_QWORD **)(result + 32);
    v8 = 0uLL;
    HIDWORD(a4) = 255;
    do
    {
      v10 = *((_DWORD *)v5 + 4);
      v11 = **(_QWORD **)(result + 16) + 24 * v10;
      v12 = *(_DWORD **)v11;
      v13 = *(_DWORD **)(v11 + 8);
      if (v12 != v13)
      {
        while (((*(_QWORD *)(**(_QWORD **)(result + 24) + (((unint64_t)*v12 >> 3) & 0x1FFFFFF8)) >> *v12) & 1) != 0)
        {
          if (++v12 == v13)
            goto LABEL_4;
        }
        v9 = 3 * v10;
        LOBYTE(a5) = *(_BYTE *)(*v7 + v9);
        BYTE4(a5) = *(_BYTE *)(*v7 + (v9 + 1));
        a5 = COERCE_DOUBLE(vcvt_f32_u32((uint32x2_t)vand_s8(*(int8x8_t *)&a5, (int8x8_t)0xFF000000FFLL)));
        *(float32x2_t *)v8.f32 = vadd_f32(*(float32x2_t *)v8.f32, *(float32x2_t *)&a5);
        LOBYTE(a5) = *(_BYTE *)(*v7 + (v9 + 2));
        *(float *)&a5 = v8.f32[2] + (float)LODWORD(a5);
        v8.i32[2] = LODWORD(a5);
        ++v6;
      }
LABEL_4:
      v5 = (uint64_t *)*v5;
    }
    while (v5);
  }
  else
  {
    v6 = 0;
    v8 = 0uLL;
  }
  *(float *)&a4 = (float)v6;
  v14 = vdivq_f32(v8, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a4, 0));
  v15 = 3 * *a2;
  v16 = 255.0;
  if (v14.f32[0] <= 255.0)
    v17 = v14.f32[0];
  else
    v17 = 255.0;
  v18 = (int)v17;
  if (v14.f32[0] < 0.0)
    LOBYTE(v18) = 0;
  *(_BYTE *)(**(_QWORD **)(result + 40) + v15) = v18;
  if (v14.f32[1] <= 255.0)
    v19 = v14.f32[1];
  else
    v19 = 255.0;
  v20 = (int)v19;
  if (v14.f32[1] < 0.0)
    LOBYTE(v20) = 0;
  *(_BYTE *)(v15 + **(_QWORD **)(result + 40) + 1) = v20;
  if (v14.f32[2] <= 255.0)
    v16 = v14.f32[2];
  v21 = (int)v16;
  if (v14.f32[2] < 0.0)
    LOBYTE(v21) = 0;
  *(_BYTE *)(v15 + **(_QWORD **)(result + 40) + 2) = v21;
  return result;
}

void sub_23955BB38()
{
  JUMPOUT(0x23B83E31CLL);
}

__n128 sub_23955BB4C(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x48uLL);
  *(_QWORD *)v2 = &off_250ADDEF8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  result = *(__n128 *)(a1 + 56);
  *(__n128 *)(v2 + 56) = result;
  return result;
}

__n128 sub_23955BB9C(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_QWORD *)a2 = &off_250ADDEF8;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  v4 = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 56) = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(a2 + 40) = v4;
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_23955BBD4(uint64_t result, _QWORD *a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  unsigned int v6;
  unsigned int v7;
  char **v8;
  char *v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  char *v14;
  char v15;
  char v16;
  uint64_t v17;
  _DWORD *v18;
  uint64_t v19;
  unsigned int v20;
  int v21;
  int v22;

  v2 = *(uint64_t **)(**(_QWORD **)(result + 8) + 40 * *a2 + 16);
  if (v2)
  {
    v3 = 3 * *a2;
    v4 = v3 + 1;
    while (1)
    {
      v6 = *((_DWORD *)v2 + 4);
      if (**(_BYTE **)(result + 16))
      {
        v7 = 3 * v6;
        *(_BYTE *)(**(_QWORD **)(result + 24) + v7) = *(_BYTE *)(**(_QWORD **)(result + 32) + v3);
        *(_BYTE *)(**(_QWORD **)(result + 24) + v7 + 1) = *(_BYTE *)(**(_QWORD **)(result + 32) + v4);
LABEL_8:
        LOBYTE(v5) = *(_BYTE *)(**(_QWORD **)(result + 32) + v3 + 2);
        goto LABEL_4;
      }
      v8 = (char **)(**(_QWORD **)(result + 40) + 24 * v6);
      v9 = *v8;
      v10 = v8[1];
      if (v9 != v10)
        break;
LABEL_17:
      if (**(_BYTE **)(result + 56))
        v21 = (int)**(float **)(result + 64);
      else
        LOBYTE(v21) = *(_BYTE *)(**(_QWORD **)(result + 32) + v3);
      v7 = 3 * v6;
      *(_BYTE *)(**(_QWORD **)(result + 24) + v7) = v21;
      if (**(_BYTE **)(result + 56))
        v22 = (int)*(float *)(*(_QWORD *)(result + 64) + 4);
      else
        LOBYTE(v22) = *(_BYTE *)(**(_QWORD **)(result + 32) + v4);
      *(_BYTE *)(**(_QWORD **)(result + 24) + v7 + 1) = v22;
      if (!**(_BYTE **)(result + 56))
        goto LABEL_8;
      v5 = (int)*(float *)(*(_QWORD *)(result + 64) + 8);
LABEL_4:
      *(_BYTE *)(**(_QWORD **)(result + 24) + v7 + 2) = v5;
LABEL_5:
      v2 = (uint64_t *)*v2;
      if (!v2)
        return result;
    }
    v11 = **(_QWORD **)(result + 48);
    v12 = v10 - v9 - 4;
    if (v12 >= 4)
    {
      v15 = 0;
      v16 = 0;
      v17 = (v12 >> 2) + 1;
      v14 = &v9[4 * (v17 & 0x7FFFFFFFFFFFFFFELL)];
      v18 = v9 + 4;
      v19 = v17 & 0x7FFFFFFFFFFFFFFELL;
      do
      {
        v15 |= ((*(_QWORD *)(v11 + (((unint64_t)*(v18 - 1) >> 3) & 0x1FFFFFF8)) >> *(v18 - 1)) & 1) == 0;
        v16 |= ((*(_QWORD *)(v11 + (((unint64_t)*v18 >> 3) & 0x1FFFFFF8)) >> *v18) & 1) == 0;
        v18 += 2;
        v19 -= 2;
      }
      while (v19);
      v13 = v16 | v15;
      if (v17 == (v17 & 0x7FFFFFFFFFFFFFFELL))
      {
LABEL_16:
        if ((v13 & 1) != 0)
          goto LABEL_5;
        goto LABEL_17;
      }
    }
    else
    {
      v13 = 0;
      v14 = v9;
    }
    do
    {
      v20 = *(_DWORD *)v14;
      v14 += 4;
      v13 |= ((*(_QWORD *)(v11 + (((unint64_t)v20 >> 3) & 0x1FFFFFF8)) >> v20) & 1) == 0;
    }
    while (v14 != v10);
    goto LABEL_16;
  }
  return result;
}

_QWORD *sub_23955BDE0(uint64_t a1, uint64_t *a2, uint64_t a3, _QWORD **a4)
{
  unint64_t v4;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  _QWORD *v9;
  _QWORD *result;
  unint64_t v11;
  uint64_t v12;
  float v13;
  float v14;
  _QWORD *v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  size_t prime;
  int8x8_t v20;
  unint64_t v21;
  uint8x8_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  _QWORD *v26;

  v6 = *a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v6 >= v7)
        v4 = v6 % v7;
    }
    else
    {
      v4 = (v7 - 1) & v6;
    }
    v9 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v9)
    {
      result = (_QWORD *)*v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            v12 = result[1];
            if (v12 == v6)
            {
              if (result[2] == v6)
                return result;
            }
            else if ((v12 & (v7 - 1)) != v4)
            {
              goto LABEL_23;
            }
            result = (_QWORD *)*result;
            if (!result)
              goto LABEL_23;
          }
        }
        do
        {
          v11 = result[1];
          if (v11 == v6)
          {
            if (result[2] == v6)
              return result;
          }
          else
          {
            if (v11 >= v7)
              v11 %= v7;
            if (v11 != v4)
              break;
          }
          result = (_QWORD *)*result;
        }
        while (result);
      }
    }
  }
LABEL_23:
  sub_23955C108(a1, *a2, a4, (uint64_t)&v26);
  v13 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v14 = *(float *)(a1 + 32);
  if (!v7 || (float)(v14 * (float)v7) < v13)
  {
    v16 = 1;
    if (v7 >= 3)
      v16 = (v7 & (v7 - 1)) != 0;
    v17 = v16 | (2 * v7);
    v18 = vcvtps_u32_f32(v13 / v14);
    if (v17 <= v18)
      prime = v18;
    else
      prime = v17;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v20 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v20)
      goto LABEL_37;
    if (prime < *(_QWORD *)&v20)
    {
      v21 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v20 < 3uLL || (v22 = (uint8x8_t)vcnt_s8(v20), v22.i16[0] = vaddlv_u8(v22), v22.u32[0] > 1uLL))
      {
        v21 = std::__next_prime(v21);
      }
      else
      {
        v23 = 1 << -(char)__clz(v21 - 1);
        if (v21 >= 2)
          v21 = v23;
      }
      if (prime <= v21)
        prime = v21;
      if (prime < *(_QWORD *)&v20)
LABEL_37:
        sub_239427FE0(a1, prime);
    }
    v7 = *(_QWORD *)(a1 + 8);
    v24 = v7 - 1;
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7)
      {
        v4 = v6 % v7;
        v15 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v6 % v7));
        if (v15)
          goto LABEL_26;
      }
      else
      {
        v4 = v6;
        v15 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v6);
        if (v15)
          goto LABEL_26;
      }
    }
    else
    {
      v4 = v24 & v6;
      v15 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v24 & v6));
      if (v15)
        goto LABEL_26;
    }
LABEL_50:
    *v26 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v26;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*v26)
    {
      v25 = *(_QWORD *)(*v26 + 8);
      if ((v7 & (v7 - 1)) != 0)
      {
        if (v25 >= v7)
          v25 %= v7;
      }
      else
      {
        v25 &= v7 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v25) = v26;
    }
    goto LABEL_61;
  }
  v15 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (!v15)
    goto LABEL_50;
LABEL_26:
  *v26 = *v15;
  *v15 = v26;
LABEL_61:
  result = v26;
  ++*(_QWORD *)(a1 + 24);
  return result;
}

void sub_23955C0F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_23955C23C((uint64_t)va);
  _Unwind_Resume(a1);
}

double sub_23955C108@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7;
  char *v8;
  _QWORD *v14;
  double result;
  std::bad_alloc *exception;
  std::bad_alloc *v17;
  void *memptr;

  v7 = a1 + 16;
  v8 = (char *)operator new(0xD8uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *(_QWORD *)v8 = 0;
  *((_QWORD *)v8 + 1) = a2;
  *((_QWORD *)v8 + 2) = **a3;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(v8 + 24) = _Q0;
  *(_OWORD *)(v8 + 40) = _Q0;
  v8[56] = 1;
  *((_QWORD *)v8 + 8) = 0;
  *((_QWORD *)v8 + 9) = 8;
  memptr = 0;
  malloc_type_posix_memalign(&memptr, 0x20uLL, 0x40uLL, 0x100BBD03uLL);
  v14 = memptr;
  *((_QWORD *)v8 + 8) = memptr;
  if (!v14)
  {
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v17 = std::bad_alloc::bad_alloc(exception);
    __cxa_throw(v17, (struct type_info *)&unk_250ADB310, (void (*)(void *))MEMORY[0x24BEDB670]);
  }
  *((_DWORD *)v8 + 20) = 5;
  v14[4] = 0;
  *(_OWORD *)v14 = 0u;
  *((_OWORD *)v14 + 1) = 0u;
  *(_OWORD *)(v8 + 152) = xmmword_239EC71F8;
  *(_OWORD *)(v8 + 168) = unk_239EC7208;
  *(_OWORD *)(v8 + 184) = xmmword_239EC7218;
  *(_OWORD *)(v8 + 200) = unk_239EC7228;
  *(_OWORD *)(v8 + 88) = xmmword_239EC71B8;
  *(_OWORD *)(v8 + 104) = unk_239EC71C8;
  result = 0.0;
  *(_OWORD *)(v8 + 120) = xmmword_239EC71D8;
  *(_OWORD *)(v8 + 136) = unk_239EC71E8;
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_23955C228(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_23955C23C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_23955C23C(uint64_t a1)
{
  void **v2;

  v2 = *(void ***)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      free(v2[8]);
    operator delete(v2);
  }
  return a1;
}

_QWORD *sub_23955C280(uint64_t a1, unint64_t *a2, uint64_t a3, _QWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  _QWORD *v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v15;
  float v16;
  float v17;
  uint64_t v18;
  _QWORD *v19;
  _BOOL8 v20;
  unint64_t v21;
  unint64_t v22;
  size_t prime;
  unint64_t v24;
  uint8x8_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v7 >= v8)
        v4 = v7 % v8;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
    v10 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      v11 = (_QWORD *)*v10;
      if (*v10)
      {
        if (v9.u32[0] < 2uLL)
        {
          while (1)
          {
            v13 = v11[1];
            if (v13 == v7)
            {
              if (v11[2] == v7)
                return v11;
            }
            else if ((v13 & (v8 - 1)) != v4)
            {
              goto LABEL_23;
            }
            v11 = (_QWORD *)*v11;
            if (!v11)
              goto LABEL_23;
          }
        }
        do
        {
          v12 = v11[1];
          if (v12 == v7)
          {
            if (v11[2] == v7)
              return v11;
          }
          else
          {
            if (v12 >= v8)
              v12 %= v8;
            if (v12 != v4)
              break;
          }
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
    }
  }
LABEL_23:
  v15 = operator new(0x20uLL);
  *v15 = 0;
  v15[1] = v7;
  v15[2] = **a4;
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (v8 && (float)(v17 * (float)v8) >= v16)
  {
    v18 = *(_QWORD *)a1;
    v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v19)
    {
LABEL_26:
      *v15 = *v19;
LABEL_61:
      *v19 = v15;
      goto LABEL_62;
    }
  }
  else
  {
    v20 = 1;
    if (v8 >= 3)
      v20 = (v8 & (v8 - 1)) != 0;
    v21 = v20 | (2 * v8);
    v22 = vcvtps_u32_f32(v16 / v17);
    if (v21 <= v22)
      prime = v22;
    else
      prime = v21;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v8 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v8)
      goto LABEL_37;
    if (prime < v8)
    {
      v24 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v8 < 3 || (v25 = (uint8x8_t)vcnt_s8((int8x8_t)v8), v25.i16[0] = vaddlv_u8(v25), v25.u32[0] > 1uLL))
      {
        v24 = std::__next_prime(v24);
      }
      else
      {
        v26 = 1 << -(char)__clz(v24 - 1);
        if (v24 >= 2)
          v24 = v26;
      }
      if (prime <= v24)
        prime = v24;
      if (prime < v8)
LABEL_37:
        sub_239427FE0(a1, prime);
    }
    v8 = *(_QWORD *)(a1 + 8);
    v27 = v8 - 1;
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
      {
        v4 = v7 % v8;
        v18 = *(_QWORD *)a1;
        v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v7 % v8));
        if (v19)
          goto LABEL_26;
      }
      else
      {
        v4 = v7;
        v18 = *(_QWORD *)a1;
        v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v7);
        if (v19)
          goto LABEL_26;
      }
    }
    else
    {
      v4 = v27 & v7;
      v18 = *(_QWORD *)a1;
      v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v27 & v7));
      if (v19)
        goto LABEL_26;
    }
  }
  *v15 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v15;
  *(_QWORD *)(v18 + 8 * v4) = a1 + 16;
  if (*v15)
  {
    v28 = *(_QWORD *)(*v15 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v28 >= v8)
        v28 %= v8;
    }
    else
    {
      v28 &= v8 - 1;
    }
    v19 = (_QWORD *)(*(_QWORD *)a1 + 8 * v28);
    goto LABEL_61;
  }
LABEL_62:
  ++*(_QWORD *)(a1 + 24);
  return v15;
}

void sub_23955C590(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_23955C5A4(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  __n128 v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  _BYTE v16[12];
  uint64_t v17;
  std::__shared_weak_count *v18;
  uint64_t v19;
  std::__shared_weak_count *v20;

  v3 = a1[1];
  v4 = (std::__shared_weak_count *)a1[2];
  v19 = v3;
  v20 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    v17 = v3;
    v18 = v4;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  else
  {
    v17 = v3;
    v18 = 0;
  }
  v8 = a1[4];
  sub_2398EB464((uint64_t)v16, 3, (uint64_t)(a1 + 11), 3, (uint64_t)a1 + 100, 1);
  sub_239423D38(a2, &v17, (uint64_t)v16, v8, 21);
  v9 = nullsub_4(v16);
  v10 = v18;
  if (v18)
  {
    v11 = (unint64_t *)&v18->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v10->__on_zero_shared)(v10, v9);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v13 = v20;
  if (v20)
  {
    v14 = (unint64_t *)&v20->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v13->__on_zero_shared)(v13, v9);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
}

void sub_23955C6C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, char a10, uint64_t a11, char a12, uint64_t a13, char a14)
{
  nullsub_4(&a10);
  sub_239416DA0((uint64_t)&a12);
  sub_239416DA0((uint64_t)&a14);
  _Unwind_Resume(a1);
}

void sub_23955C6E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  sub_239416DA0((uint64_t)va);
  sub_239416DA0((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_23955C704(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  __n128 v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  uint64_t v21;
  std::__shared_weak_count *v22;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  v21 = v4;
  v22 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    v19 = v4;
    v20 = v5;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  else
  {
    v19 = v4;
    v20 = 0;
  }
  v9 = *(_QWORD *)(a1 + 48);
  v17 = *(_QWORD *)(a1 + 32);
  v18 = *(_DWORD *)(a1 + 40);
  sub_239423D38(a2, &v19, (uint64_t)&v17, v9, *(_DWORD *)(a1 + 56));
  v10 = nullsub_4(&v17);
  v11 = v20;
  if (v20)
  {
    v12 = (unint64_t *)&v20->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v11->__on_zero_shared)(v11, v10);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v14 = v22;
  if (v22)
  {
    v15 = (unint64_t *)&v22->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v14->__on_zero_shared)(v14, v10);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
}

void sub_23955C814(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13)
{
  nullsub_4(&a9);
  sub_239416DA0((uint64_t)&a11);
  sub_239416DA0((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void sub_23955C844(char **a1, unint64_t a2)
{
  char *v2;
  char *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  char *v8;
  char *v9;
  __int128 v10;
  char *v11;

  v2 = *a1;
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 3) < a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL)
      sub_2394189F8();
    v4 = a1[1];
    v5 = 24 * a2;
    v6 = (char *)operator new(24 * a2);
    v7 = &v6[v5];
    v8 = &v6[24 * ((v4 - v2) / 24)];
    if (v4 == v2)
    {
      *a1 = v8;
      a1[1] = v8;
      a1[2] = v7;
      if (v2)
LABEL_13:
        operator delete(v2);
    }
    else
    {
      v9 = &v6[24 * ((v4 - v2) / 24)];
      do
      {
        v10 = *(_OWORD *)(v4 - 24);
        *((_QWORD *)v9 - 1) = *((_QWORD *)v4 - 1);
        *(_OWORD *)(v9 - 24) = v10;
        v9 -= 24;
        *((_QWORD *)v4 - 2) = 0;
        *((_QWORD *)v4 - 1) = 0;
        *((_QWORD *)v4 - 3) = 0;
        v4 -= 24;
      }
      while (v4 != v2);
      v11 = *a1;
      v2 = a1[1];
      *a1 = v9;
      a1[1] = v8;
      a1[2] = v7;
      if (v2 != v11)
      {
        do
        {
          if (*(v2 - 1) < 0)
            operator delete(*((void **)v2 - 3));
          v2 -= 24;
        }
        while (v2 != v11);
        v2 = v11;
      }
      if (v2)
        goto LABEL_13;
    }
  }
}

_QWORD *sub_23955C978(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = MEMORY[0x24BEDB7E8];
  v3 = *MEMORY[0x24BEDB7E8];
  *a1 = *MEMORY[0x24BEDB7E8];
  *(_QWORD *)((char *)a1 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  MEMORY[0x23B83DC8C](a1 + 1);
  std::ostream::~ostream();
  MEMORY[0x23B83E250](a1 + 52);
  return a1;
}

uint64_t sub_23955C9D0(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  std::ios_base *v9;
  uint64_t v10;

  v5 = MEMORY[0x24BEDB868];
  v6 = MEMORY[0x24BEDB868] + 64;
  *(_QWORD *)(a1 + 120) = MEMORY[0x24BEDB868] + 64;
  v7 = *(_QWORD *)(MEMORY[0x24BEDB7F8] + 8);
  v8 = *(_QWORD *)(MEMORY[0x24BEDB7F8] + 16);
  *(_QWORD *)a1 = v7;
  *(_QWORD *)(a1 + *(_QWORD *)(v7 - 24)) = v8;
  *(_QWORD *)(a1 + 8) = 0;
  v9 = (std::ios_base *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24));
  std::ios_base::init(v9, (void *)(a1 + 16));
  v9[1].__vftable = 0;
  v9[1].__fmtflags_ = -1;
  *(_QWORD *)a1 = v5 + 24;
  *(_QWORD *)(a1 + 120) = v6;
  std::streambuf::basic_streambuf();
  v10 = MEMORY[0x24BEDB848] + 16;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_QWORD *)(a1 + 16) = v10;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_DWORD *)(a1 + 112) = a3 | 8;
  std::stringbuf::str();
  return a1;
}

void sub_23955CAB8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  void **v3;

  if (*(char *)(v2 + 103) < 0)
    operator delete(*v3);
  std::streambuf::~streambuf();
  std::istream::~istream();
  MEMORY[0x23B83E250](v1);
  _Unwind_Resume(a1);
}

uint64_t sub_23955CB0C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = MEMORY[0x24BEDB7F8];
  v3 = *MEMORY[0x24BEDB7F8];
  *(_QWORD *)a1 = *MEMORY[0x24BEDB7F8];
  *(_QWORD *)(a1 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 16) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 103) < 0)
    operator delete(*(void **)(a1 + 80));
  std::streambuf::~streambuf();
  std::istream::~istream();
  MEMORY[0x23B83E250](a1 + 120);
  return a1;
}

_QWORD *sub_23955CB90(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = MEMORY[0x24BEDB7E0];
  v3 = *MEMORY[0x24BEDB7E0];
  *a1 = *MEMORY[0x24BEDB7E0];
  *(_QWORD *)((char *)a1 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  MEMORY[0x23B83DC8C](a1 + 2);
  std::istream::~istream();
  MEMORY[0x23B83E250](a1 + 53);
  return a1;
}

uint64_t sub_23955CBE8()
{
  mach_msg_type_number_t task_info_outCnt;
  integer_t task_info_out[10];

  task_info_outCnt = 10;
  return task_info(*MEMORY[0x24BDAEC58], 0x12u, task_info_out, &task_info_outCnt);
}

uint64_t *sub_23955CC24(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  const std::locale::facet *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  _BYTE *v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  std::locale v19;
  char v20;

  MEMORY[0x23B83DCD4](&v20, a1, 0);
  if (!v20)
    return a1;
  if (*(char *)(a2 + 23) < 0)
  {
    **(_BYTE **)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 23) = 0;
  }
  v4 = *(_QWORD *)(*a1 - 24);
  v5 = *(uint64_t *)((char *)a1 + v4 + 24);
  if (v5 <= 1)
    v6 = 1;
  else
    v6 = *(uint64_t *)((char *)a1 + v4 + 24);
  std::ios_base::getloc((const std::ios_base *)((char *)a1 + v4));
  v7 = std::locale::use_facet(&v19, MEMORY[0x24BEDB350]);
  std::locale::~locale(&v19);
  v8 = 0;
  v9 = a1 + 5;
  if (v5 >= 1)
    v10 = v6;
  else
    v10 = 0x7FFFFFFFFFFFFFF7;
  while (1)
  {
    v11 = *(_QWORD **)((char *)v9 + *(_QWORD *)(*a1 - 24));
    v12 = (_BYTE *)v11[3];
    if (v12 == (_BYTE *)v11[4])
      break;
    LOBYTE(v13) = *v12;
LABEL_16:
    if ((v13 & 0x80) == 0 && (*((_DWORD *)&v7[1].~facet + v13) & 0x4000) != 0)
    {
      v16 = 0;
      goto LABEL_23;
    }
    std::string::push_back((std::string *)a2, v13);
    v14 = *(_QWORD **)((char *)v9 + *(_QWORD *)(*a1 - 24));
    v15 = v14[3];
    if (v15 == v14[4])
      (*(void (**)(_QWORD *))(*v14 + 80))(v14);
    else
      v14[3] = v15 + 1;
    if (v10 == ++v8)
    {
      v16 = 0;
      v17 = *a1;
      *(uint64_t *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 24) = 0;
      goto LABEL_25;
    }
  }
  v13 = (*(uint64_t (**)(_QWORD *))(*v11 + 72))(v11);
  if (v13 != -1)
    goto LABEL_16;
  v16 = 2;
LABEL_23:
  v17 = *a1;
  *(uint64_t *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 24) = 0;
  if (!v8)
    v16 |= 4u;
LABEL_25:
  std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(v17 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(v17 - 24) + 32) | v16);
  return a1;
}

void sub_23955CDDC(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
  _QWORD *v9;
  uint64_t v11;

  std::locale::~locale(&a9);
  __cxa_begin_catch(a1);
  v11 = *v9;
  *(_DWORD *)((char *)v9 + *(_QWORD *)(*v9 - 24) + 32) |= 1u;
  if ((*((_BYTE *)v9 + *(_QWORD *)(v11 - 24) + 36) & 1) == 0)
  {
    __cxa_end_catch();
    JUMPOUT(0x23955CDA8);
  }
  __cxa_rethrow();
}

void sub_23955CE40(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_23955CE54(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  unsigned int *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  if (*(_BYTE *)(a2 + 104))
  {
    v4 = *(_QWORD *)(a2 + 80);
    v5 = *(_QWORD *)(a2 + 88);
  }
  else
  {
    v4 = 0;
    v5 = 0;
    *(_QWORD *)(a2 + 80) = 0;
    *(_QWORD *)(a2 + 88) = 0;
    *(_QWORD *)(a2 + 96) = 0;
    *(_BYTE *)(a2 + 104) = 1;
  }
  v6 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
  v7 = 0xAAAAAAAAAAAAAAABLL * (v5 - v4);
  if (v6 <= v7)
  {
    if (v6 < v7)
      *(_QWORD *)(a2 + 88) = v4 + ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
  }
  else
  {
    sub_2395477D8((_QWORD *)(a2 + 80), v6 - v7);
  }
  v8 = *(_QWORD *)(a2 + 32) - *(_QWORD *)(a2 + 24);
  if (v8)
  {
    v9 = 0;
    v10 = v8 / 12;
    do
    {
      v11 = *(_DWORD *)(*a1 + 4 * v9);
      v12 = (unsigned int *)(*(_QWORD *)(a2 + 24) + 12 * v9);
      v13 = *(_QWORD *)(a2 + 80) + 3 * *v12;
      *(_WORD *)v13 = v11;
      *(_BYTE *)(v13 + 2) = BYTE2(v11);
      v14 = *(_QWORD *)(a2 + 80) + 3 * v12[1];
      *(_WORD *)v14 = v11;
      *(_BYTE *)(v14 + 2) = BYTE2(v11);
      v15 = *(_QWORD *)(a2 + 80) + 3 * v12[2];
      *(_WORD *)v15 = v11;
      *(_BYTE *)(v15 + 2) = BYTE2(v11);
      ++v9;
    }
    while (v10 != v9);
  }
}

_QWORD *sub_23955CF88(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  std::ios_base *v7;

  v2 = MEMORY[0x24BEDB840];
  v3 = MEMORY[0x24BEDB840] + 64;
  a1[52] = MEMORY[0x24BEDB840] + 64;
  v4 = a1 + 1;
  v5 = *(_QWORD *)(MEMORY[0x24BEDB7E8] + 8);
  v6 = *(_QWORD *)(MEMORY[0x24BEDB7E8] + 16);
  *a1 = v5;
  *(_QWORD *)((char *)a1 + *(_QWORD *)(v5 - 24)) = v6;
  v7 = (std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24));
  std::ios_base::init(v7, a1 + 1);
  v7[1].__vftable = 0;
  v7[1].__fmtflags_ = -1;
  *a1 = v2 + 24;
  a1[52] = v3;
  MEMORY[0x23B83DC80](v4);
  if (!std::filebuf::open())
    std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 4);
  return a1;
}

void sub_23955D058(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x23B83E250](v1 + 416);
  _Unwind_Resume(a1);
}

_QWORD *sub_23955D09C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  std::ios_base *v7;

  v2 = MEMORY[0x24BEDB838];
  v3 = MEMORY[0x24BEDB838] + 64;
  a1[53] = MEMORY[0x24BEDB838] + 64;
  v4 = a1 + 2;
  v5 = *(_QWORD *)(MEMORY[0x24BEDB7E0] + 8);
  v6 = *(_QWORD *)(MEMORY[0x24BEDB7E0] + 16);
  *a1 = v5;
  *(_QWORD *)((char *)a1 + *(_QWORD *)(v5 - 24)) = v6;
  a1[1] = 0;
  v7 = (std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24));
  std::ios_base::init(v7, a1 + 2);
  v7[1].__vftable = 0;
  v7[1].__fmtflags_ = -1;
  *a1 = v2 + 24;
  a1[53] = v3;
  MEMORY[0x23B83DC80](v4);
  if (!std::filebuf::open())
    std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 4);
  return a1;
}

void sub_23955D170(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::istream::~istream();
  MEMORY[0x23B83E250](v1 + 424);
  _Unwind_Resume(a1);
}

_QWORD *sub_23955D1B4(_QWORD *a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t v6;
  _QWORD *v7;
  _BYTE *v8;
  int v9;
  char v11;

  MEMORY[0x23B83DCD4](&v11, a1, 1);
  if (!v11)
    return a1;
  if (*(char *)(a2 + 23) < 0)
  {
    **(_BYTE **)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 23) = 0;
  }
  v6 = 0;
  while (1)
  {
    v7 = *(_QWORD **)((char *)a1 + *(_QWORD *)(*a1 - 24) + 40);
    v8 = (_BYTE *)v7[3];
    if (v8 != (_BYTE *)v7[4])
    {
      v7[3] = v8 + 1;
      LOBYTE(v7) = *v8;
      goto LABEL_9;
    }
    LODWORD(v7) = (*(uint64_t (**)(_QWORD *))(*v7 + 80))(v7);
    if ((_DWORD)v7 == -1)
      break;
LABEL_9:
    if (v7 == a3)
    {
      v9 = 0;
      goto LABEL_17;
    }
    std::string::push_back((std::string *)a2, (std::string::value_type)v7);
    --v6;
    if (*(char *)(a2 + 23) < 0 && *(_QWORD *)(a2 + 8) == 0x7FFFFFFFFFFFFFF7)
    {
      v9 = 4;
      goto LABEL_17;
    }
  }
  if (v6)
    v9 = 2;
  else
    v9 = 6;
LABEL_17:
  std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | v9);
  return a1;
}

void sub_23955D2E0(void *a1)
{
  _QWORD *v1;
  uint64_t v2;

  __cxa_begin_catch(a1);
  v2 = *v1;
  *(_DWORD *)((char *)v1 + *(_QWORD *)(*v1 - 24) + 32) |= 1u;
  if ((*((_BYTE *)v1 + *(_QWORD *)(v2 - 24) + 36) & 1) == 0)
  {
    __cxa_end_catch();
    JUMPOUT(0x23955D2ACLL);
  }
  __cxa_rethrow();
}

void sub_23955D324(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

_QWORD *sub_23955D338(_QWORD *a1, _BYTE *a2)
{
  _QWORD *v4;
  _BYTE *v5;
  int v6;
  char v8;

  MEMORY[0x23B83DCD4](&v8, a1, 0);
  if (v8)
  {
    v4 = *(_QWORD **)((char *)a1 + *(_QWORD *)(*a1 - 24) + 40);
    v5 = (_BYTE *)v4[3];
    if (v5 == (_BYTE *)v4[4])
    {
      LODWORD(v4) = (*(uint64_t (**)(_QWORD *))(*v4 + 80))(v4);
      if ((_DWORD)v4 == -1)
      {
        v6 = 6;
        goto LABEL_6;
      }
    }
    else
    {
      v4[3] = v5 + 1;
      LOBYTE(v4) = *v5;
    }
    v6 = 0;
    *a2 = (_BYTE)v4;
LABEL_6:
    std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | v6);
  }
  return a1;
}

void sub_23955D3E4(void *a1)
{
  _QWORD *v1;
  uint64_t v2;

  __cxa_begin_catch(a1);
  v2 = *v1;
  *(_DWORD *)((char *)v1 + *(_QWORD *)(*v1 - 24) + 32) |= 1u;
  if ((*((_BYTE *)v1 + *(_QWORD *)(v2 - 24) + 36) & 1) == 0)
  {
    __cxa_end_catch();
    JUMPOUT(0x23955D3B0);
  }
  __cxa_rethrow();
}

void sub_23955D424(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_23955D438(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  uint64_t *v7;
  void *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unint64_t v12;
  unint64_t v13;
  void *v14;
  _QWORD v15[3];
  _QWORD v16[3];
  _QWORD v17[3];
  unint64_t v18;

  v5 = a2;
  v6 = a3;
  v7 = sub_239536660(a1, 42);
  sub_2397A9494((uint64_t)v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = objc_msgSend(v6, "width");
  v10 = objc_msgSend(v6, "height");
  v11 = v10;
  v18 = __PAIR64__(v10, v9);
  v12 = objc_msgSend(v8, "threadExecutionWidth");
  v13 = objc_msgSend(v8, "maxTotalThreadsPerThreadgroup");
  objc_msgSend(v5, "computeCommandEncoder");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v14, "setTexture:atIndex:", v6, 0);
  v17[0] = 0;
  v17[1] = 0;
  objc_msgSend(v14, "setBytes:length:atIndex:", v17, 16, 0);
  objc_msgSend(v14, "setBytes:length:atIndex:", &v18, 8, 1);
  objc_msgSend(v14, "setComputePipelineState:", v8);
  v16[0] = (v12 + v9 - 1) / v12;
  v16[1] = ((v13 / v12) + v11 - 1) / (v13 / v12);
  v16[2] = 1;
  v15[0] = v12;
  v15[1] = v13 / v12;
  v15[2] = 1;
  objc_msgSend(v14, "dispatchThreadgroups:threadsPerThreadgroup:", v16, v15);
  objc_msgSend(v14, "endEncoding");

}

void sub_23955D588(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_23955D620(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  uint64_t *v7;
  void *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unint64_t v12;
  unint64_t v13;
  void *v14;
  _QWORD v15[3];
  _QWORD v16[3];
  _QWORD v17[3];
  unint64_t v18;

  v5 = a2;
  v6 = a3;
  v7 = sub_239536660(a1, 41);
  sub_2397A9494((uint64_t)v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = objc_msgSend(v6, "width");
  v10 = objc_msgSend(v6, "height");
  v11 = v10;
  v18 = __PAIR64__(v10, v9);
  v12 = objc_msgSend(v8, "threadExecutionWidth");
  v13 = objc_msgSend(v8, "maxTotalThreadsPerThreadgroup");
  objc_msgSend(v5, "computeCommandEncoder");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v14, "setTexture:atIndex:", v6, 0);
  v17[0] = 0;
  v17[1] = 0;
  objc_msgSend(v14, "setBytes:length:atIndex:", v17, 16, 0);
  objc_msgSend(v14, "setBytes:length:atIndex:", &v18, 8, 1);
  objc_msgSend(v14, "setComputePipelineState:", v8);
  v16[0] = (v12 + v9 - 1) / v12;
  v16[1] = ((v13 / v12) + v11 - 1) / (v13 / v12);
  v16[2] = 1;
  v15[0] = v12;
  v15[1] = v13 / v12;
  v15[2] = 1;
  objc_msgSend(v14, "dispatchThreadgroups:threadsPerThreadgroup:", v16, v15);
  objc_msgSend(v14, "endEncoding");

}

void sub_23955D770(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_23955D808(void *a1, _QWORD *a2, _QWORD *a3, unsigned int a4, _QWORD *a5, int a6)
{
  __int128 v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  __int128 v17;
  unint64_t v18;
  void *v19;
  void *v20;
  uint64_t v21;
  void *v22;
  id v23;
  uint64_t v24;
  __int128 v25;
  unint64_t v26;
  void *v27;
  void *v28;
  uint64_t v29;
  void *v30;
  id v31;
  id v32;
  __int128 v33;

  v32 = a1;
  v12 = (uint64_t)(a3[1] - *a3) >> 4;
  if (a4 > v12)
    sub_23955E508((uint64_t)a3, a4 - v12);
  v13 = (uint64_t)(a2[1] - *a2) >> 4;
  if (a4 > v13)
    sub_23955E508((uint64_t)a2, a4 - v13);
  if (a4)
  {
    v14 = 0;
    *(_QWORD *)&v11 = *a5;
    v33 = v11;
    v15 = 4 * a6;
    v16 = 16 * a4;
    do
    {
      while (1)
      {
        *((_QWORD *)&v17 + 1) = *((_QWORD *)&v33 + 1);
        *(uint32x2_t *)&v17 = vshr_n_u32(*(uint32x2_t *)&v33, 1uLL);
        v33 = v17;
        v18 = (v15 * v17 * DWORD1(v17));
        v19 = *(void **)(*a3 + v14);
        if (!v19 || objc_msgSend(v19, "length") < v18)
          break;
        *(_QWORD *)(*a3 + v14 + 8) = v33;
        v14 += 16;
        if (v16 == v14)
          goto LABEL_11;
      }
      v20 = (void *)objc_msgSend(v32, "newBufferWithLength:options:", v18, 0);
      v21 = *a3 + v14;
      v22 = *(void **)v21;
      *(_QWORD *)v21 = v20;
      v23 = v20;

      *(_QWORD *)(v21 + 8) = v33;
      v14 += 16;
    }
    while (v16 != v14);
LABEL_11:
    v24 = 0;
    do
    {
      while (1)
      {
        v25 = v33;
        *(int32x2_t *)&v25 = vadd_s32(*(int32x2_t *)&v25, *(int32x2_t *)&v25);
        v33 = v25;
        v26 = (v15 * v25 * DWORD1(v25));
        v27 = *(void **)(*a2 + v24);
        if (!v27 || objc_msgSend(v27, "length") < v26)
          break;
        *(_QWORD *)(*a2 + v24 + 8) = v33;
        v24 += 16;
        if (v16 == v24)
          goto LABEL_16;
      }
      v28 = (void *)objc_msgSend(v32, "newBufferWithLength:options:", v26, 0);
      v29 = *a2 + v24;
      v30 = *(void **)v29;
      *(_QWORD *)v29 = v28;
      v31 = v28;

      *(_QWORD *)(v29 + 8) = v33;
      v24 += 16;
    }
    while (v16 != v24);
  }
LABEL_16:

}

void sub_23955D9E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_23955D9FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_23955DA10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_23955DA24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_23955DA38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_23955DA4C(uint64_t a1, void *a2, void *a3, void *a4, void *a5, _QWORD **a6, _QWORD *a7, uint64_t *a8, uint64_t a9, unsigned int a10, char a11)
{
  uint64_t *v17;
  void *v18;
  unint64_t v19;
  unint64_t v20;
  void *v21;
  uint64_t *v22;
  void *v23;
  void *v24;
  _QWORD *v25;
  unint64_t v26;
  unint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  _QWORD *v32;
  unint64_t v33;
  unint64_t v34;
  void *v35;
  uint64_t *v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  void *v45;
  void *v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t *v49;
  void *v50;
  unint64_t v51;
  unint64_t v52;
  void *v53;
  uint64_t v54;
  id v55;
  id v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  id v61;
  id v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD v69[3];
  _QWORD v70[3];
  _QWORD v71[3];
  _QWORD v72[3];
  unint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  _QWORD v79[3];
  _QWORD v80[3];
  char v81[9];

  v63 = a2;
  v55 = a3;
  v56 = a4;
  v61 = a5;
  v81[0] = a11;
  v17 = sub_239536660(a1, 37);
  sub_2397A9494((uint64_t)v17);
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  v19 = objc_msgSend(v18, "threadExecutionWidth");
  v20 = objc_msgSend(v18, "maxTotalThreadsPerThreadgroup");
  v64 = *a8;
  objc_msgSend(v63, "computeCommandEncoder");
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v21, "setTexture:atIndex:", v55, 0);
  objc_msgSend(v21, "setBuffer:offset:atIndex:", v56, 0, 0);
  objc_msgSend(v21, "setBytes:length:atIndex:", a8, 8, 1);
  objc_msgSend(v21, "setBytes:length:atIndex:");
  objc_msgSend(v21, "setBytes:length:atIndex:", v81, 1, 3);
  objc_msgSend(v21, "setBuffer:offset:atIndex:", v61, 0, 4);
  objc_msgSend(v21, "setComputePipelineState:", v18);
  v80[0] = ((int)v19 + (int)v64 - 1) / v19;
  v80[1] = ((v20 / v19) + HIDWORD(v64) - 1) / (v20 / v19);
  v80[2] = 1;
  v79[0] = v19;
  v79[1] = v20 / v19;
  v79[2] = 1;
  objc_msgSend(v21, "dispatchThreadgroups:threadsPerThreadgroup:", v80, v79);
  objc_msgSend(v21, "endEncoding");

  v54 = a1;
  v22 = sub_239536660(a1, 39);
  sub_2397A9494((uint64_t)v22);
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  v24 = v23;
  if (a10)
  {
    v25 = *a6;
    v26 = objc_msgSend(v23, "threadExecutionWidth", a1);
    v27 = objc_msgSend(v24, "maxTotalThreadsPerThreadgroup");
    v65 = v25[1];
    objc_msgSend(v63, "computeCommandEncoder");
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v28, "setBuffer:offset:atIndex:", v61, 0, 0);
    objc_msgSend(v28, "setBytes:length:atIndex:", a8, 8, 1);
    objc_msgSend(v28, "setBytes:length:atIndex:", *a6 + 1, 8, 2);
    objc_msgSend(v28, "setBytes:length:atIndex:", a9, 4, 3);
    objc_msgSend(v28, "setBuffer:offset:atIndex:", **a6, 0, 4);
    objc_msgSend(v28, "setComputePipelineState:", v24);
    v76 = ((int)v26 + (int)v65 - 1) / v26;
    v77 = ((v27 / v26) + HIDWORD(v65) - 1) / (v27 / v26);
    v78 = 1;
    v73 = v26;
    v74 = v27 / v26;
    v75 = 1;
    objc_msgSend(v28, "dispatchThreadgroups:threadsPerThreadgroup:", &v76, &v73);
    objc_msgSend(v28, "endEncoding");

    if (a10 != 1)
    {
      v29 = 0;
      v30 = a10 - 1;
      v31 = 0;
      do
      {
        v32 = *a6;
        v33 = objc_msgSend(v24, "threadExecutionWidth");
        v34 = objc_msgSend(v24, "maxTotalThreadsPerThreadgroup");
        v66 = v32[v29 + 3];
        objc_msgSend(v63, "computeCommandEncoder");
        v35 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v35, "setBuffer:offset:atIndex:", (*a6)[v29], 0, 0);
        objc_msgSend(v35, "setBytes:length:atIndex:", &(*a6)[2 * v31 + 1], 8, 1);
        objc_msgSend(v35, "setBytes:length:atIndex:", &(*a6)[v29 + 3], 8, 2);
        objc_msgSend(v35, "setBytes:length:atIndex:", a9, 4, 3);
        objc_msgSend(v35, "setBuffer:offset:atIndex:", (*a6)[v29 + 2], 0, 4);
        objc_msgSend(v35, "setComputePipelineState:", v24);
        v76 = ((int)v33 + (int)v66 - 1) / v33;
        v77 = ((v34 / v33) + HIDWORD(v66) - 1) / (v34 / v33);
        v78 = 1;
        v73 = v33;
        v74 = v34 / v33;
        v75 = 1;
        objc_msgSend(v35, "dispatchThreadgroups:threadsPerThreadgroup:", &v76, &v73);
        objc_msgSend(v35, "endEncoding");

        ++v31;
        v29 += 2;
        --v30;
      }
      while (v30);
    }
  }

  v36 = sub_239536660(v54, 40);
  sub_2397A9494((uint64_t)v36);
  v37 = (void *)objc_claimAutoreleasedReturnValue();
  if (a10)
  {
    v38 = 0;
    v39 = a10 - 1;
    v40 = a10 - 2;
    v41 = -1;
    v59 = 2 * v39;
    v60 = 2 * v40;
    v57 = v39 - 1;
    v58 = 16 * (v39 - 1);
    do
    {
      v42 = *a7;
      v43 = objc_msgSend(v37, "threadExecutionWidth", v54);
      v44 = objc_msgSend(v37, "maxTotalThreadsPerThreadgroup");
      v67 = *(_QWORD *)(v42 + v38 + 8);
      objc_msgSend(v63, "computeCommandEncoder");
      v45 = (void *)objc_claimAutoreleasedReturnValue();
      v46 = v45;
      if (v38)
      {
        if (16 * (a10 - 1) == v38)
        {
          objc_msgSend(v45, "setBuffer:offset:atIndex:", v61, 0, 0);
          objc_msgSend(v46, "setBuffer:offset:atIndex:", *(_QWORD *)(*a7 + v58), 0, 1);
          objc_msgSend(v46, "setBytes:length:atIndex:", a8, 8, 2);
          v47 = a7;
          v48 = v57;
        }
        else
        {
          objc_msgSend(v45, "setBuffer:offset:atIndex:", (*a6)[2 * v40], 0, 0);
          objc_msgSend(v46, "setBuffer:offset:atIndex:", *(_QWORD *)(*a7 + v38 - 16), 0, 1);
          objc_msgSend(v46, "setBytes:length:atIndex:", &(*a6)[2 * v40 + 1], 8, 2);
          v47 = a7;
          v48 = v41;
        }
      }
      else
      {
        objc_msgSend(v45, "setBuffer:offset:atIndex:", (*a6)[v60], 0, 0);
        objc_msgSend(v46, "setBuffer:offset:atIndex:", (*a6)[v59], 0, 1);
        objc_msgSend(v46, "setBytes:length:atIndex:", &(*a6)[2 * a10 - 3], 8, 2);
        v47 = a6;
        v48 = a10 - 1;
      }
      objc_msgSend(v46, "setBytes:length:atIndex:", *v47 + 16 * v48 + 8, 8, 3);
      objc_msgSend(v46, "setBytes:length:atIndex:", a9, 4, 4);
      objc_msgSend(v46, "setBuffer:offset:atIndex:", *(_QWORD *)(*a7 + v38), 0, 5);
      objc_msgSend(v46, "setComputePipelineState:", v37);
      v72[0] = ((int)v43 + (int)v67 - 1) / v43;
      v72[1] = ((v44 / v43) + HIDWORD(v67) - 1) / (v44 / v43);
      v72[2] = 1;
      v71[0] = v43;
      v71[1] = v44 / v43;
      v71[2] = 1;
      objc_msgSend(v46, "dispatchThreadgroups:threadsPerThreadgroup:", v72, v71);
      objc_msgSend(v46, "endEncoding");

      LODWORD(v40) = v40 - 1;
      ++v41;
      v38 += 16;
    }
    while (16 * a10 != v38);
  }

  v49 = sub_239536660(v54, 38);
  sub_2397A9494((uint64_t)v49);
  v50 = (void *)objc_claimAutoreleasedReturnValue();
  v51 = objc_msgSend(v50, "threadExecutionWidth");
  v52 = objc_msgSend(v50, "maxTotalThreadsPerThreadgroup");
  v68 = *a8;
  objc_msgSend(v63, "computeCommandEncoder");
  v53 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v53, "setBuffer:offset:atIndex:", *(_QWORD *)(*a7 + 16 * (a10 - 1)), 0, 0);
  objc_msgSend(v53, "setBuffer:offset:atIndex:", v61, 0, 1);
  objc_msgSend(v53, "setBytes:length:atIndex:", a8, 8, 2);
  objc_msgSend(v53, "setBytes:length:atIndex:", a9, 4, 3);
  objc_msgSend(v53, "setBuffer:offset:atIndex:", v56, 0, 4);
  objc_msgSend(v53, "setComputePipelineState:", v50);
  v70[0] = ((int)v51 + (int)v68 - 1) / v51;
  v70[1] = ((v52 / v51) + HIDWORD(v68) - 1) / (v52 / v51);
  v70[2] = 1;
  v69[0] = v51;
  v69[1] = v52 / v51;
  v69[2] = 1;
  objc_msgSend(v53, "dispatchThreadgroups:threadsPerThreadgroup:", v70, v69);
  objc_msgSend(v53, "endEncoding");

}

void sub_23955E224(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24)
{
  void *v24;

  _Unwind_Resume(a1);
}

void sub_23955E308(uint64_t a1, void *a2, void *a3, void *a4, void *a5, void *a6, uint64_t *a7)
{
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  uint64_t *v18;
  void *v19;
  unint64_t v20;
  unint64_t v21;
  void *v22;
  uint64_t v23;
  _QWORD v24[3];
  _QWORD v25[3];
  int v26;

  v13 = a2;
  v14 = a3;
  v15 = a4;
  v16 = a5;
  v17 = a6;
  v18 = sub_239536660(a1, 36);
  sub_2397A9494((uint64_t)v18);
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  v26 = 1;
  v20 = objc_msgSend(v19, "threadExecutionWidth");
  v21 = objc_msgSend(v19, "maxTotalThreadsPerThreadgroup");
  v23 = *a7;
  objc_msgSend(v13, "computeCommandEncoder");
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v22, "setTexture:atIndex:", v14, 0);
  objc_msgSend(v22, "setTexture:atIndex:", v15, 1);
  objc_msgSend(v22, "setBuffer:offset:atIndex:", v16, 0, 0);
  objc_msgSend(v22, "setBytes:length:atIndex:", &v26, 4, 1);
  objc_msgSend(v22, "setBytes:length:atIndex:", a7, 8, 2);
  objc_msgSend(v22, "setBuffer:offset:atIndex:", v17, 0, 3);
  objc_msgSend(v22, "setComputePipelineState:", v19);
  v25[0] = ((int)v20 + (int)v23 - 1) / v20;
  v25[1] = ((v21 / v20) + HIDWORD(v23) - 1) / (v21 / v20);
  v25[2] = 1;
  v24[0] = v20;
  v24[1] = v21 / v20;
  v24[2] = 1;
  objc_msgSend(v22, "dispatchThreadgroups:threadsPerThreadgroup:", v25, v24);
  objc_msgSend(v22, "endEncoding");

}

void sub_23955E4BC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

void sub_23955E508(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  size_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  _QWORD *v18;
  void *v19;

  v5 = *(_QWORD **)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  if (a2 <= (v4 - (uint64_t)v5) >> 4)
  {
    if (a2)
    {
      v12 = 16 * a2;
      bzero(*(void **)(a1 + 8), 16 * a2);
      v5 = (_QWORD *)((char *)v5 + v12);
    }
    *(_QWORD *)(a1 + 8) = v5;
  }
  else
  {
    v6 = *(_QWORD **)a1;
    v7 = ((uint64_t)v5 - *(_QWORD *)a1) >> 4;
    v8 = v7 + a2;
    if ((v7 + a2) >> 60)
      sub_2394189F8();
    v9 = v4 - (_QWORD)v6;
    if (v9 >> 3 > v8)
      v8 = v9 >> 3;
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0)
      v10 = 0xFFFFFFFFFFFFFFFLL;
    else
      v10 = v8;
    if (v10)
    {
      if (v10 >> 60)
        sub_239418A80();
      v11 = (char *)operator new(16 * v10);
    }
    else
    {
      v11 = 0;
    }
    v13 = &v11[16 * v7];
    v14 = 16 * a2;
    v15 = &v11[16 * v10];
    bzero(v13, v14);
    v16 = &v13[v14];
    if (v5 == v6)
    {
      *(_QWORD *)a1 = v13;
      *(_QWORD *)(a1 + 8) = v16;
      *(_QWORD *)(a1 + 16) = v15;
      if (v5)
LABEL_21:
        operator delete(v5);
    }
    else
    {
      do
      {
        v17 = *(v5 - 2);
        v5 -= 2;
        *v5 = 0;
        *((_QWORD *)v13 - 2) = v17;
        v13 -= 16;
        *((_QWORD *)v13 + 1) = v5[1];
      }
      while (v5 != v6);
      v18 = *(_QWORD **)a1;
      v5 = *(_QWORD **)(a1 + 8);
      *(_QWORD *)a1 = v13;
      *(_QWORD *)(a1 + 8) = v16;
      *(_QWORD *)(a1 + 16) = v15;
      if (v5 != v18)
      {
        do
        {
          v19 = (void *)*(v5 - 2);
          v5 -= 2;

        }
        while (v5 != v18);
        v5 = v18;
      }
      if (v5)
        goto LABEL_21;
    }
  }
}

uint64_t sub_23955E668(void *a1)
{
  id v1;
  void *v2;

  v1 = a1;
  v2 = v1;
  if (v1 && objc_msgSend(v1, "code"))
  {

    return 1;
  }
  else
  {

    return 0;
  }
}

void sub_23955E6BC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

_QWORD *sub_23955E6CC@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *result;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v2 = operator new(8uLL);
  *a1 = v2;
  *v2++ = 0x3DBA054E3F113E2BLL;
  a1[1] = v2;
  a1[2] = v2;
  a1[3] = 0;
  a1[4] = 0;
  a1[5] = 0;
  v3 = operator new(8uLL);
  a1[6] = 0;
  a1[3] = v3;
  *v3++ = 0x3C8E27F83C1E87B5;
  a1[4] = v3;
  a1[5] = v3;
  a1[7] = 0;
  a1[8] = 0;
  v4 = operator new(8uLL);
  a1[9] = 0;
  a1[6] = v4;
  *v4++ = 0x3DAE27D33E53B4C2;
  a1[7] = v4;
  a1[8] = v4;
  a1[10] = 0;
  a1[11] = 0;
  v5 = operator new(8uLL);
  a1[12] = 0;
  a1[9] = v5;
  *v5++ = 0x3DAE50B83E545C04;
  a1[10] = v5;
  a1[11] = v5;
  a1[13] = 0;
  a1[14] = 0;
  v6 = operator new(8uLL);
  a1[15] = 0;
  a1[12] = v6;
  *v6++ = 0x3E6681A33F34DADELL;
  a1[13] = v6;
  a1[14] = v6;
  a1[16] = 0;
  a1[17] = 0;
  v7 = operator new(8uLL);
  a1[18] = 0;
  a1[15] = v7;
  *v7++ = 0x3E6972A23F374DF0;
  a1[16] = v7;
  a1[17] = v7;
  a1[19] = 0;
  a1[20] = 0;
  v8 = operator new(8uLL);
  a1[21] = 0;
  a1[18] = v8;
  *v8++ = 0x3D536EC63E20571ELL;
  a1[19] = v8;
  a1[20] = v8;
  a1[22] = 0;
  a1[23] = 0;
  v9 = operator new(8uLL);
  a1[24] = 0;
  a1[21] = v9;
  *v9++ = 0x3D3CB1173D03056DLL;
  a1[22] = v9;
  a1[23] = v9;
  a1[25] = 0;
  a1[26] = 0;
  v10 = operator new(8uLL);
  a1[24] = v10;
  *v10++ = 0x3D2432C13D41B5F5;
  a1[25] = v10;
  a1[26] = v10;
  a1[28] = 0;
  a1[29] = 0;
  a1[27] = 0;
  v11 = operator new(8uLL);
  *v11 = 0x3D1E67A53D3D3B35;
  a1[27] = v11;
  a1[28] = v11 + 1;
  a1[29] = v11 + 1;
  a1[30] = 0;
  a1[31] = 0;
  a1[32] = 0;
  v12 = operator new(8uLL);
  *v12 = 0x3DC749473E047B9ELL;
  a1[30] = v12;
  a1[31] = v12 + 1;
  a1[32] = v12 + 1;
  a1[33] = 0;
  a1[34] = 0;
  a1[35] = 0;
  v13 = operator new(8uLL);
  a1[33] = v13;
  *v13 = 0x3DD5FC173E0AAF47;
  result = v13 + 1;
  a1[34] = result;
  a1[35] = result;
  return result;
}

void sub_23955E8EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10)
{
  uint64_t v10;
  void *v11;
  void **v12;
  void **v13;
  void **v14;
  void **v15;
  void **v16;
  void **v17;
  void **v18;
  void *v19;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;

  v19 = v11;
  *(_QWORD *)(v10 + 248) = v19;
  operator delete(v19);
  v21 = *(void **)(v10 + 216);
  if (v21)
  {
    *(_QWORD *)(v10 + 224) = v21;
    operator delete(v21);
    v22 = *v12;
    if (!*v12)
    {
LABEL_3:
      v23 = *v18;
      if (!*v18)
        goto LABEL_4;
      goto LABEL_14;
    }
  }
  else
  {
    v22 = *v12;
    if (!*v12)
      goto LABEL_3;
  }
  *(_QWORD *)(v10 + 200) = v22;
  operator delete(v22);
  v23 = *v18;
  if (!*v18)
  {
LABEL_4:
    v24 = *v17;
    if (!*v17)
      goto LABEL_5;
    goto LABEL_15;
  }
LABEL_14:
  *(_QWORD *)(v10 + 176) = v23;
  operator delete(v23);
  v24 = *v17;
  if (!*v17)
  {
LABEL_5:
    v25 = *v16;
    if (!*v16)
      goto LABEL_6;
    goto LABEL_16;
  }
LABEL_15:
  *(_QWORD *)(v10 + 152) = v24;
  operator delete(v24);
  v25 = *v16;
  if (!*v16)
  {
LABEL_6:
    v26 = *v15;
    if (!*v15)
      goto LABEL_7;
    goto LABEL_17;
  }
LABEL_16:
  *(_QWORD *)(v10 + 128) = v25;
  operator delete(v25);
  v26 = *v15;
  if (!*v15)
  {
LABEL_7:
    v27 = *v14;
    if (!*v14)
      goto LABEL_8;
    goto LABEL_18;
  }
LABEL_17:
  *(_QWORD *)(v10 + 104) = v26;
  operator delete(v26);
  v27 = *v14;
  if (!*v14)
  {
LABEL_8:
    v28 = *v13;
    if (!*v13)
      goto LABEL_9;
    goto LABEL_19;
  }
LABEL_18:
  *(_QWORD *)(v10 + 80) = v27;
  operator delete(v27);
  v28 = *v13;
  if (!*v13)
  {
LABEL_9:
    v29 = *a10;
    if (!*a10)
      goto LABEL_10;
    goto LABEL_20;
  }
LABEL_19:
  *(_QWORD *)(v10 + 56) = v28;
  operator delete(v28);
  v29 = *a10;
  if (!*a10)
  {
LABEL_10:
    v30 = *(void **)v10;
    if (!*(_QWORD *)v10)
      goto LABEL_11;
    goto LABEL_21;
  }
LABEL_20:
  *(_QWORD *)(v10 + 32) = v29;
  operator delete(v29);
  v30 = *(void **)v10;
  if (!*(_QWORD *)v10)
LABEL_11:
    _Unwind_Resume(a1);
LABEL_21:
  *(_QWORD *)(v10 + 8) = v30;
  operator delete(v30);
  _Unwind_Resume(a1);
}

void sub_23955EA8C()
{
  _QWORD *v0;

  if (*v0)
    JUMPOUT(0x23955EA7CLL);
  JUMPOUT(0x23955E954);
}

_QWORD *sub_23955EA9C@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *result;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v2 = operator new(8uLL);
  *a1 = v2;
  *v2++ = 0x3DC5F9A13F1DC673;
  a1[1] = v2;
  a1[2] = v2;
  a1[3] = 0;
  a1[4] = 0;
  a1[5] = 0;
  v3 = operator new(8uLL);
  a1[6] = 0;
  a1[3] = v3;
  *v3++ = 0x3E2DF9F63E54E920;
  a1[4] = v3;
  a1[5] = v3;
  a1[7] = 0;
  a1[8] = 0;
  v4 = operator new(8uLL);
  a1[9] = 0;
  a1[6] = v4;
  *v4++ = 0x3E1B02F63E97CEDBLL;
  a1[7] = v4;
  a1[8] = v4;
  a1[10] = 0;
  a1[11] = 0;
  v5 = operator new(8uLL);
  a1[12] = 0;
  a1[9] = v5;
  *v5++ = 0x3E16D1283E9ACFC9;
  a1[10] = v5;
  a1[11] = v5;
  a1[13] = 0;
  a1[14] = 0;
  v6 = operator new(8uLL);
  a1[15] = 0;
  a1[12] = v6;
  *v6++ = 0x3E3ADA213F334A8ALL;
  a1[13] = v6;
  a1[14] = v6;
  a1[16] = 0;
  a1[17] = 0;
  v7 = operator new(8uLL);
  a1[18] = 0;
  a1[15] = v7;
  *v7++ = 0x3E4036B33F48D345;
  a1[16] = v7;
  a1[17] = v7;
  a1[19] = 0;
  a1[20] = 0;
  v8 = operator new(8uLL);
  a1[21] = 0;
  a1[18] = v8;
  *v8++ = 0x3D5A6D303E5B48E5;
  a1[19] = v8;
  a1[20] = v8;
  a1[22] = 0;
  a1[23] = 0;
  v9 = operator new(8uLL);
  a1[24] = 0;
  a1[21] = v9;
  *v9++ = 0x3E08B6D53E94DAA8;
  a1[22] = v9;
  a1[23] = v9;
  a1[25] = 0;
  a1[26] = 0;
  v10 = operator new(8uLL);
  a1[24] = v10;
  *v10++ = 0x3DF5DF2B3E9036CCLL;
  a1[25] = v10;
  a1[26] = v10;
  a1[28] = 0;
  a1[29] = 0;
  a1[27] = 0;
  v11 = operator new(8uLL);
  *v11 = 0x3DF1BEAF3E8B7188;
  a1[27] = v11;
  a1[28] = v11 + 1;
  a1[29] = v11 + 1;
  a1[30] = 0;
  a1[31] = 0;
  a1[32] = 0;
  v12 = operator new(8uLL);
  *v12 = 0x3DE79A0C3EBDE391;
  a1[30] = v12;
  a1[31] = v12 + 1;
  a1[32] = v12 + 1;
  a1[33] = 0;
  a1[34] = 0;
  a1[35] = 0;
  v13 = operator new(8uLL);
  a1[33] = v13;
  *v13 = 0x3E05951E3ED30C30;
  result = v13 + 1;
  a1[34] = result;
  a1[35] = result;
  return result;
}

void sub_23955ECBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10)
{
  uint64_t v10;
  void *v11;
  void **v12;
  void **v13;
  void **v14;
  void **v15;
  void **v16;
  void **v17;
  void **v18;
  void *v19;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;

  v19 = v11;
  *(_QWORD *)(v10 + 248) = v19;
  operator delete(v19);
  v21 = *(void **)(v10 + 216);
  if (v21)
  {
    *(_QWORD *)(v10 + 224) = v21;
    operator delete(v21);
    v22 = *v12;
    if (!*v12)
    {
LABEL_3:
      v23 = *v18;
      if (!*v18)
        goto LABEL_4;
      goto LABEL_14;
    }
  }
  else
  {
    v22 = *v12;
    if (!*v12)
      goto LABEL_3;
  }
  *(_QWORD *)(v10 + 200) = v22;
  operator delete(v22);
  v23 = *v18;
  if (!*v18)
  {
LABEL_4:
    v24 = *v17;
    if (!*v17)
      goto LABEL_5;
    goto LABEL_15;
  }
LABEL_14:
  *(_QWORD *)(v10 + 176) = v23;
  operator delete(v23);
  v24 = *v17;
  if (!*v17)
  {
LABEL_5:
    v25 = *v16;
    if (!*v16)
      goto LABEL_6;
    goto LABEL_16;
  }
LABEL_15:
  *(_QWORD *)(v10 + 152) = v24;
  operator delete(v24);
  v25 = *v16;
  if (!*v16)
  {
LABEL_6:
    v26 = *v15;
    if (!*v15)
      goto LABEL_7;
    goto LABEL_17;
  }
LABEL_16:
  *(_QWORD *)(v10 + 128) = v25;
  operator delete(v25);
  v26 = *v15;
  if (!*v15)
  {
LABEL_7:
    v27 = *v14;
    if (!*v14)
      goto LABEL_8;
    goto LABEL_18;
  }
LABEL_17:
  *(_QWORD *)(v10 + 104) = v26;
  operator delete(v26);
  v27 = *v14;
  if (!*v14)
  {
LABEL_8:
    v28 = *v13;
    if (!*v13)
      goto LABEL_9;
    goto LABEL_19;
  }
LABEL_18:
  *(_QWORD *)(v10 + 80) = v27;
  operator delete(v27);
  v28 = *v13;
  if (!*v13)
  {
LABEL_9:
    v29 = *a10;
    if (!*a10)
      goto LABEL_10;
    goto LABEL_20;
  }
LABEL_19:
  *(_QWORD *)(v10 + 56) = v28;
  operator delete(v28);
  v29 = *a10;
  if (!*a10)
  {
LABEL_10:
    v30 = *(void **)v10;
    if (!*(_QWORD *)v10)
      goto LABEL_11;
    goto LABEL_21;
  }
LABEL_20:
  *(_QWORD *)(v10 + 32) = v29;
  operator delete(v29);
  v30 = *(void **)v10;
  if (!*(_QWORD *)v10)
LABEL_11:
    _Unwind_Resume(a1);
LABEL_21:
  *(_QWORD *)(v10 + 8) = v30;
  operator delete(v30);
  _Unwind_Resume(a1);
}

void sub_23955EE5C()
{
  _QWORD *v0;

  if (*v0)
    JUMPOUT(0x23955EE4CLL);
  JUMPOUT(0x23955ED24);
}

void sub_23955EE6C(uint64_t a1, int a2, void **a3, std::string::size_type a4)
{
  void *v8;
  unint64_t *v9;
  void *v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _BYTE *v15;
  _BYTE *v16;
  void **v17;
  int v18;
  void **v19;
  void **v20;
  void *v21;
  char *v22;
  void *v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  __int128 *v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  void *v37[2];
  void *v38[4];
  void *__p[2];
  uint64_t v40;
  void *v41;
  void **v42;
  _BYTE *v43;
  void *v44;
  char *v45;
  void *v46[2];
  void *v47;
  unsigned __int8 v48;
  _BYTE v49[24];
  _BYTE *v50;
  char v51;
  _BYTE v52[24];
  _BYTE *v53;
  char v54;
  __int128 __dst;
  __int128 v56;
  uint64_t v57;
  __int128 v58;
  void *v59;
  __int128 v60;
  void *v61;
  __int128 v62;
  uint64_t v63;
  __int128 *v64;
  char v65;
  _BYTE v66[24];
  _BYTE *v67;
  char v68;
  uint64_t v69;

  v69 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)&v34 = 0;
  DWORD2(v34) = 0;
  *(_OWORD *)v37 = 0u;
  memset(v38, 0, sizeof(v38));
  *(_OWORD *)__p = 0u;
  v40 = 0;
  if (a2 == 2)
  {
    sub_23955F718((uint64_t)&__dst, 4uLL, a4);
  }
  else
  {
    if (a2)
    {
      sub_239A444D4((uint64_t)"unknown file", 81, (uint64_t)"", (void (*)(void *))sub_239A4463C);
      sub_239A4475C();
      abort();
    }
    sub_23955F718((uint64_t)&__dst, 3uLL, a4);
  }
  v36 = v57;
  v38[0] = v59;
  v38[3] = v61;
  v34 = __dst;
  v35 = v56;
  *(_OWORD *)v37 = v58;
  *(_OWORD *)&v38[1] = v60;
  v40 = v63;
  *(_OWORD *)__p = v62;
  if (!*((_BYTE *)a3 + 24))
  {
    a3 = __p;
    if (SHIBYTE(v40) < 0)
    {
      v8 = __p[0];
      v9 = (unint64_t *)&__p[1];
      goto LABEL_11;
    }
LABEL_9:
    __dst = *(_OWORD *)a3;
    *(_QWORD *)&v56 = a3[2];
    goto LABEL_12;
  }
  if ((*((char *)a3 + 23) & 0x80000000) == 0)
    goto LABEL_9;
  v10 = *a3;
  v9 = (unint64_t *)(a3 + 1);
  v8 = v10;
LABEL_11:
  sub_23941A7F8(&__dst, v8, *v9);
LABEL_12:
  if (SHIBYTE(v40) < 0)
    operator delete(__p[0]);
  *(_OWORD *)__p = __dst;
  v40 = v56;
  *((_QWORD *)&v35 + 1) = a4;
  if ((a2 | 2) == 2)
  {
    sub_23955F8E8(a1, (uint64_t)&v34);
    goto LABEL_16;
  }
  if (SHIBYTE(v38[0]) < 0)
  {
    sub_23941A7F8(&__dst, v37[0], (unint64_t)v37[1]);
  }
  else
  {
    __dst = *(_OWORD *)v37;
    *(void **)&v56 = v38[0];
  }
  BYTE8(v56) = 1;
  LODWORD(v57) = 65;
  BYTE4(v57) = 1;
  LODWORD(v58) = 1;
  BYTE4(v58) = 1;
  DWORD2(v58) = v35;
  BYTE12(v58) = 1;
  LODWORD(v59) = v36 * v35;
  BYTE4(v59) = 1;
  LODWORD(v60) = 1;
  BYTE4(v60) = 1;
  DWORD2(v60) = a4;
  BYTE12(v60) = 1;
  LOBYTE(v61) = 1;
  LOBYTE(v62) = 0;
  v65 = 0;
  v66[0] = 0;
  v68 = 0;
  sub_2394905EC((char *)v46, &__dst);
  sub_239496B18((uint64_t)&v44, (uint64_t)v46, 1uLL);
  if (v54)
  {
    v11 = v53;
    if (v53 == v52)
    {
      v12 = 4;
      v11 = v52;
    }
    else
    {
      if (!v53)
        goto LABEL_32;
      v12 = 5;
    }
    (*(void (**)(void))(*v11 + 8 * v12))();
  }
LABEL_32:
  if (!v51)
    goto LABEL_38;
  v13 = v50;
  if (v50 == v49)
  {
    v14 = 4;
    v13 = v49;
  }
  else
  {
    if (!v50)
      goto LABEL_38;
    v14 = 5;
  }
  (*(void (**)(void))(*v13 + 8 * v14))();
LABEL_38:
  if (v48 && SHIBYTE(v47) < 0)
    operator delete(v46[0]);
  if (SHIBYTE(v38[3]) < 0)
  {
    sub_23941A7F8(v46, v38[1], (unint64_t)v38[2]);
  }
  else
  {
    *(_OWORD *)v46 = *(_OWORD *)&v38[1];
    v47 = v38[3];
  }
  v48 = 1;
  v42 = 0;
  v43 = 0;
  v41 = 0;
  v15 = operator new(0x20uLL);
  v16 = v15;
  v41 = v15;
  v42 = (void **)v15;
  v17 = (void **)(v15 + 32);
  v43 = v15 + 32;
  *v15 = 0;
  v15[24] = 0;
  if (SHIBYTE(v47) < 0)
  {
    sub_23941A7F8(v15, v46[0], (unint64_t)v46[1]);
    v18 = v48;
    v16[24] = 1;
    v42 = v17;
    if (v18 && SHIBYTE(v47) < 0)
      operator delete(v46[0]);
  }
  else
  {
    *(_OWORD *)v15 = *(_OWORD *)v46;
    *((_QWORD *)v15 + 2) = v47;
    v15[24] = 1;
    v42 = (void **)(v15 + 32);
  }
  *(_QWORD *)a1 = v34;
  *(_DWORD *)(a1 + 8) = DWORD2(v34);
  if (SHIBYTE(v40) < 0)
  {
    sub_23941A7F8((_BYTE *)(a1 + 16), __p[0], (unint64_t)__p[1]);
  }
  else
  {
    *(_OWORD *)(a1 + 16) = *(_OWORD *)__p;
    *(_QWORD *)(a1 + 32) = v40;
  }
  sub_2394904A4(a1 + 40, (uint64_t *)&v44);
  sub_2394907B8((_QWORD *)(a1 + 64), (uint64_t *)&v41);
  *(_BYTE *)(a1 + 88) = 0;
  *(_BYTE *)(a1 + 112) = 0;
  v19 = (void **)v41;
  if (v41)
  {
    v20 = v42;
    v21 = v41;
    if (v42 != v41)
    {
      do
      {
        if (*((_BYTE *)v20 - 8) && *((char *)v20 - 9) < 0)
          operator delete(*(v20 - 4));
        v20 -= 4;
      }
      while (v20 != v19);
      v21 = v41;
    }
    v42 = v19;
    operator delete(v21);
  }
  v22 = (char *)v44;
  if (!v44)
    goto LABEL_82;
  v23 = v44;
  if (v45 == v44)
    goto LABEL_81;
  v24 = v45 - 80;
  do
  {
    if (!v24[72])
      goto LABEL_71;
    v26 = (char *)*((_QWORD *)v24 + 8);
    if (v24 + 40 == v26)
    {
      v26 = v24 + 40;
      v27 = 4;
    }
    else
    {
      if (!v26)
        goto LABEL_71;
      v27 = 5;
    }
    (*(void (**)(void))(*(_QWORD *)v26 + 8 * v27))();
LABEL_71:
    if (v24[32])
    {
      v28 = (char *)*((_QWORD *)v24 + 3);
      if (v24 == v28)
      {
        v28 = v24;
        v29 = 4;
        goto LABEL_76;
      }
      if (v28)
      {
        v29 = 5;
LABEL_76:
        (*(void (**)(void))(*(_QWORD *)v28 + 8 * v29))();
      }
    }
    if (*(v24 - 64) && *(v24 - 65) < 0)
      operator delete(*((void **)v24 - 11));
    v25 = v24 - 88;
    v24 -= 168;
  }
  while (v25 != v22);
  v23 = v44;
LABEL_81:
  v45 = v22;
  operator delete(v23);
LABEL_82:
  if (v68)
  {
    v30 = v67;
    if (v67 == v66)
    {
      v31 = 4;
      v30 = v66;
LABEL_87:
      (*(void (**)(void))(*v30 + 8 * v31))();
    }
    else if (v67)
    {
      v31 = 5;
      goto LABEL_87;
    }
  }
  if (v65)
  {
    v32 = v64;
    if (v64 == &v62)
    {
      v33 = 4;
      v32 = &v62;
LABEL_93:
      (*(void (**)(void))(*(_QWORD *)v32 + 8 * v33))();
    }
    else if (v64)
    {
      v33 = 5;
      goto LABEL_93;
    }
  }
  if (BYTE8(v56))
  {
    if (SBYTE7(v56) < 0)
      operator delete((void *)__dst);
  }
LABEL_16:
  if (SHIBYTE(v40) < 0)
  {
    operator delete(__p[0]);
    if (SHIBYTE(v38[3]) < 0)
      goto LABEL_21;
LABEL_18:
    if (SHIBYTE(v38[0]) < 0)
LABEL_22:
      operator delete(v37[0]);
  }
  else
  {
    if ((SHIBYTE(v38[3]) & 0x80000000) == 0)
      goto LABEL_18;
LABEL_21:
    operator delete(v38[1]);
    if (SHIBYTE(v38[0]) < 0)
      goto LABEL_22;
  }
}

void sub_23955F47C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36,char a37)
{
  uint64_t v37;

  sub_239490340(&a23);
  sub_2394903B8(&a26);
  sub_239496A60(v37 - 240);
  sub_23955F878((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_23955F55C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_23955F878((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_23955F570(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_23955F878((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_23955F584(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_23955F878((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_23955F598(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_23955F878((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_23955F5AC(_QWORD *a1, int a2, std::string::size_type a3, uint64_t a4)
{
  __int128 __p;
  char v9;
  char v10;
  char v11;
  uint64_t v12;
  void *__dst[2];
  uint64_t v14;
  char v15;
  uint64_t v16[15];

  LOBYTE(__dst[0]) = 0;
  v15 = 0;
  if (*(_BYTE *)(a4 + 24))
  {
    if (*(char *)(a4 + 23) < 0)
    {
      sub_23941A7F8(__dst, *(void **)a4, *(_QWORD *)(a4 + 8));
    }
    else
    {
      *(_OWORD *)__dst = *(_OWORD *)a4;
      v14 = *(_QWORD *)(a4 + 16);
    }
    v15 = 1;
  }
  sub_23955EE6C((uint64_t)v16, a2, __dst, a3);
  LOBYTE(__p) = 0;
  v10 = 0;
  v11 = 0;
  v12 = 0;
  sub_2396500C0((uint64_t)a1, v16, &__p);
  if (v10 && v9 < 0)
    operator delete((void *)__p);
  sub_239496C54((uint64_t)v16);
  if (v15 && SHIBYTE(v14) < 0)
    operator delete(__dst[0]);
  *a1 = &off_250ADDF40;
  return a1;
}

void sub_23955F69C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24,uint64_t a25,char a26)
{
  if (a24)
  {
    if (a23 < 0)
      operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_23955F6F4(uint64_t a1)
{
  sub_239650228(a1);
  JUMPOUT(0x23B83E31CLL);
}

void sub_23955F718(uint64_t a1, std::string::size_type a2, std::string::size_type a3)
{
  uint64_t v6;
  int v7;
  int v8;
  _BYTE *v9;
  std::string __p;

  v6 = sub_239583400();
  v8 = v7;
  sub_23958284C(a2, a3, &__p);
  *(_QWORD *)a1 = v6;
  *(_DWORD *)(a1 + 8) = v8;
  *(_QWORD *)(a1 + 16) = 320;
  *(_QWORD *)(a1 + 24) = a3;
  *(_QWORD *)(a1 + 32) = a2;
  *(_QWORD *)(a1 + 40) = 0x6D695F7475706E69;
  *(_QWORD *)(a1 + 48) = 6645601;
  *(_BYTE *)(a1 + 63) = 11;
  *(_QWORD *)(a1 + 64) = 0x73616D5F64657270;
  *(_QWORD *)(a1 + 72) = 107;
  *(_BYTE *)(a1 + 87) = 9;
  v9 = (_BYTE *)(a1 + 88);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    sub_23941A7F8(v9, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    *(_OWORD *)v9 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    *(_QWORD *)(a1 + 104) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
  }
}

void sub_23955F824(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  if (*(char *)(v15 + 87) < 0)
  {
    operator delete(*(void **)(v15 + 64));
    if ((*(char *)(v15 + 63) & 0x80000000) == 0)
    {
LABEL_3:
      if ((a15 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else if ((*(char *)(v15 + 63) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(v15 + 40));
  if ((a15 & 0x80000000) == 0)
LABEL_4:
    _Unwind_Resume(exception_object);
LABEL_7:
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_23955F878(uint64_t a1)
{
  if ((*(char *)(a1 + 111) & 0x80000000) == 0)
  {
    if ((*(char *)(a1 + 87) & 0x80000000) == 0)
      goto LABEL_3;
LABEL_6:
    operator delete(*(void **)(a1 + 64));
    if ((*(char *)(a1 + 63) & 0x80000000) == 0)
      return a1;
    goto LABEL_7;
  }
  operator delete(*(void **)(a1 + 88));
  if (*(char *)(a1 + 87) < 0)
    goto LABEL_6;
LABEL_3:
  if ((*(char *)(a1 + 63) & 0x80000000) == 0)
    return a1;
LABEL_7:
  operator delete(*(void **)(a1 + 40));
  return a1;
}

void sub_23955F8E8(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;
  int v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _BYTE *v11;
  _BYTE *v12;
  void **v13;
  int v14;
  void **v15;
  void **v16;
  void *v17;
  char *v18;
  void *v19;
  char *v20;
  char *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  void *v30;
  void **v31;
  _BYTE *v32;
  void *v33;
  char *v34;
  void *__p[2];
  uint64_t v36;
  unsigned __int8 v37;
  _BYTE v38[24];
  _BYTE *v39;
  char v40;
  _BYTE v41[24];
  _BYTE *v42;
  char v43;
  __int128 __dst;
  uint64_t v45;
  char v46;
  int v47;
  char v48;
  int v49;
  char v50;
  int v51;
  char v52;
  int v53;
  char v54;
  int v55;
  char v56;
  int v57;
  char v58;
  char v59;
  _BYTE v60[24];
  _BYTE *v61;
  char v62;
  _BYTE v63[24];
  _BYTE *v64;
  char v65;
  uint64_t v66;

  v66 = *MEMORY[0x24BDAC8D0];
  v4 = *(_DWORD *)(a2 + 24);
  v5 = *(_DWORD *)(a2 + 16);
  v6 = *(_DWORD *)(a2 + 32);
  if (*(char *)(a2 + 63) < 0)
  {
    sub_23941A7F8(&__dst, *(void **)(a2 + 40), *(_QWORD *)(a2 + 48));
  }
  else
  {
    __dst = *(_OWORD *)(a2 + 40);
    v45 = *(_QWORD *)(a2 + 56);
  }
  v47 = 17;
  v46 = 1;
  v48 = 1;
  v49 = 1;
  v50 = 1;
  v51 = v5;
  v52 = 1;
  v53 = v5 * v4 * v6;
  v54 = 1;
  v55 = 1;
  v56 = 1;
  v57 = 1;
  v58 = 1;
  v59 = 1;
  v60[0] = 0;
  v62 = 0;
  v63[0] = 0;
  v65 = 0;
  sub_2394905EC((char *)__p, &__dst);
  sub_239496B18((uint64_t)&v33, (uint64_t)__p, 1uLL);
  if (v43)
  {
    v7 = v42;
    if (v42 == v41)
    {
      v8 = 4;
      v7 = v41;
    }
    else
    {
      if (!v42)
        goto LABEL_10;
      v8 = 5;
    }
    (*(void (**)(void))(*v7 + 8 * v8))();
  }
LABEL_10:
  if (v40)
  {
    v9 = v39;
    if (v39 == v38)
    {
      v10 = 4;
      v9 = v38;
      goto LABEL_15;
    }
    if (v39)
    {
      v10 = 5;
LABEL_15:
      (*(void (**)(void))(*v9 + 8 * v10))();
    }
  }
  if (v37 && SHIBYTE(v36) < 0)
    operator delete(__p[0]);
  if (*(char *)(a2 + 87) < 0)
  {
    sub_23941A7F8(__p, *(void **)(a2 + 64), *(_QWORD *)(a2 + 72));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)(a2 + 64);
    v36 = *(_QWORD *)(a2 + 80);
  }
  v37 = 1;
  v11 = operator new(0x20uLL);
  v12 = v11;
  v30 = v11;
  v31 = (void **)v11;
  v13 = (void **)(v11 + 32);
  v32 = v11 + 32;
  *v11 = 0;
  v11[24] = 0;
  if ((SHIBYTE(v36) & 0x80000000) == 0)
  {
    *(_OWORD *)v11 = *(_OWORD *)__p;
    *((_QWORD *)v11 + 2) = v36;
    v11[24] = 1;
    v31 = (void **)(v11 + 32);
    goto LABEL_25;
  }
  sub_23941A7F8(v11, __p[0], (unint64_t)__p[1]);
  v14 = v37;
  v12[24] = 1;
  v31 = v13;
  if (v14)
  {
LABEL_25:
    if (SHIBYTE(v36) < 0)
      operator delete(__p[0]);
  }
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  if (*(char *)(a2 + 111) < 0)
  {
    sub_23941A7F8((_BYTE *)(a1 + 16), *(void **)(a2 + 88), *(_QWORD *)(a2 + 96));
  }
  else
  {
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 88);
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 104);
  }
  sub_2394904A4(a1 + 40, (uint64_t *)&v33);
  sub_2394907B8((_QWORD *)(a1 + 64), (uint64_t *)&v30);
  *(_BYTE *)(a1 + 88) = 0;
  *(_BYTE *)(a1 + 112) = 0;
  v15 = (void **)v30;
  if (v30)
  {
    v16 = v31;
    v17 = v30;
    if (v31 != v30)
    {
      do
      {
        if (*((_BYTE *)v16 - 8) && *((char *)v16 - 9) < 0)
          operator delete(*(v16 - 4));
        v16 -= 4;
      }
      while (v16 != v15);
      v17 = v30;
    }
    v31 = v15;
    operator delete(v17);
  }
  v18 = (char *)v33;
  if (!v33)
    goto LABEL_60;
  v19 = v33;
  if (v34 == v33)
    goto LABEL_59;
  v20 = v34 - 80;
  do
  {
    if (!v20[72])
      goto LABEL_49;
    v22 = (char *)*((_QWORD *)v20 + 8);
    if (v20 + 40 == v22)
    {
      v22 = v20 + 40;
      v23 = 4;
    }
    else
    {
      if (!v22)
        goto LABEL_49;
      v23 = 5;
    }
    (*(void (**)(void))(*(_QWORD *)v22 + 8 * v23))();
LABEL_49:
    if (v20[32])
    {
      v24 = (char *)*((_QWORD *)v20 + 3);
      if (v20 == v24)
      {
        v24 = v20;
        v25 = 4;
        goto LABEL_54;
      }
      if (v24)
      {
        v25 = 5;
LABEL_54:
        (*(void (**)(void))(*(_QWORD *)v24 + 8 * v25))();
      }
    }
    if (*(v20 - 64) && *(v20 - 65) < 0)
      operator delete(*((void **)v20 - 11));
    v21 = v20 - 88;
    v20 -= 168;
  }
  while (v21 != v18);
  v19 = v33;
LABEL_59:
  v34 = v18;
  operator delete(v19);
LABEL_60:
  if (v65)
  {
    v26 = v64;
    if (v64 == v63)
    {
      v27 = 4;
      v26 = v63;
LABEL_65:
      (*(void (**)(void))(*v26 + 8 * v27))();
    }
    else if (v64)
    {
      v27 = 5;
      goto LABEL_65;
    }
  }
  if (v62)
  {
    v28 = v61;
    if (v61 == v60)
    {
      v29 = 4;
      v28 = v60;
LABEL_71:
      (*(void (**)(void))(*v28 + 8 * v29))();
    }
    else if (v61)
    {
      v29 = 5;
      goto LABEL_71;
    }
  }
  if (v46)
  {
    if (SHIBYTE(v45) < 0)
      operator delete((void *)__dst);
  }
}

void sub_23955FD40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23)
{
  uint64_t v23;

  sub_239490340((void **)&a9);
  sub_2394903B8(&a12);
  sub_239496A60(v23 - 224);
  _Unwind_Resume(a1);
}

void sub_23955FE04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  sub_239496A60((uint64_t)va);
  sub_239496A60(v9 - 224);
  _Unwind_Resume(a1);
}

void sub_23955FE20(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_239496A60(v1 - 224);
  _Unwind_Resume(a1);
}

uint64_t sub_23955FE48(uint64_t result, _QWORD *a2)
{
  *a2 = result;
  return result;
}

void sub_23955FE60()
{
  _QWORD *v0;
  void *v1;
  uint64_t v2;

  *v0 = v2;
  operator delete(v1);
}

BOOL sub_23955FE6C(uint64_t *a1, float *a2, uint64_t a3, _QWORD *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  _QWORD *v28;
  signed int v29;
  unsigned int v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  float v34;
  int32x2_t v35;
  float32x4_t v36;
  float32x4_t v37;
  int32x2_t v38;
  float32x4_t v39;
  float32x4_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float *v48;
  unint64_t v49;
  unint64_t v50;
  float *v51;
  float v52;
  unint64_t v53;
  float *v54;
  unint64_t v55;
  unint64_t v56;
  float *v57;
  float v58;
  float v59;
  unint64_t v60;
  float32x4_t *v61;
  unint64_t v62;
  float32x4_t v63;
  float32x4_t v64;
  float32x4_t v65;
  unint64_t v66;
  float *v67;
  float v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float *v76;
  unint64_t v77;
  unint64_t v78;
  float *v79;
  float v80;
  unint64_t v81;
  float *v82;
  unint64_t v83;
  unint64_t v84;
  float *v85;
  float v86;
  float v87;
  unint64_t v88;
  float32x4_t *v89;
  unint64_t v90;
  float32x4_t v91;
  float32x4_t v92;
  float32x4_t v93;
  unint64_t v94;
  float *v95;
  float v96;
  unint64_t v97;
  unint64_t v98;
  unint64_t v99;
  float v100;
  float v101;
  float v102;
  float v103;
  float *v104;
  unint64_t v105;
  unint64_t v106;
  float *v107;
  float v108;
  unint64_t v109;
  float *v110;
  unint64_t v111;
  unint64_t v112;
  float *v113;
  float v114;
  float v115;
  unint64_t v116;
  float32x4_t *v117;
  unint64_t v118;
  float32x4_t v119;
  float32x4_t v120;
  float32x4_t v121;
  float32x4_t v122;
  unint64_t v123;
  float *v124;
  float v125;
  unint64_t v126;
  unint64_t v127;
  unint64_t v128;
  float v129;
  float v130;
  float v131;
  float v132;
  float *v133;
  unint64_t v134;
  unint64_t v135;
  float *v136;
  float v137;
  unint64_t v138;
  float *v139;
  unint64_t v140;
  unint64_t v141;
  float *v142;
  float v143;
  float v144;
  unint64_t v145;
  float32x4_t v146;
  float32x4_t *v147;
  unint64_t v148;
  float32x4_t v149;
  float32x4_t v150;
  float32x4_t v151;
  unint64_t v152;
  float *v153;
  float v154;
  unint64_t v155;
  unint64_t v156;
  unint64_t v157;
  float v158;
  float v159;
  float v160;
  float v161;
  float *v162;
  unint64_t v163;
  unint64_t v164;
  float *v165;
  float v166;
  unint64_t v167;
  float *v168;
  unint64_t v169;
  unint64_t v170;
  float *v171;
  float v172;
  float v173;
  unint64_t v174;
  float32x4_t v175;
  float32x4_t *v176;
  unint64_t v177;
  float32x4_t v178;
  float32x4_t v179;
  float32x4_t v180;
  float32x4_t v181;
  unint64_t v182;
  float *v183;
  float v184;
  float v185;
  float v186;
  float v187;
  float v188;
  float v189;
  unint64_t v190;
  unint64_t v191;
  unint64_t v192;
  float v193;
  float v194;
  float v195;
  float *v196;
  unint64_t v197;
  unint64_t v198;
  float *v199;
  float v200;
  unint64_t v201;
  float *v202;
  unint64_t v203;
  unint64_t v204;
  float *v205;
  float v206;
  float v207;
  float v208;
  float v209;
  float v210;
  float v211;
  float v212;
  unint64_t v213;
  float32x4_t v214;
  float32x4_t *v215;
  unint64_t v216;
  float32x4_t v217;
  float32x4_t v218;
  float32x4_t v219;
  float32x4_t v220;
  unint64_t v221;
  float *v222;
  float v223;
  float v224;
  float v225;
  float v226;
  float v227;
  float v228;
  float v229;
  float v230;
  float v231;
  float v232;
  float v233;
  float v234;
  float v235;
  float v236;
  float v237;
  float v238;
  float v239;
  float v240;
  float v241;
  float v242;
  float v243;
  float v244;
  float v245;
  float v246;
  float v247;
  float v248;
  float v249;
  float v250;
  float v251;
  float v252;
  float v253;
  float v254;
  float v255;
  float v256;
  float v257;
  float v258;
  float v259;
  float v260;
  float v261;
  float v262;
  float v263;
  float v264;
  float v265;
  float v266;
  float v267;
  float v268;
  float v269;
  float v270;
  float v271;
  float v272;
  float v273;
  float v274;
  float v275;
  float v276;
  float v277;
  float v278;
  float v279;
  float v280;
  float v281;
  float v282;
  float v283;
  float v284;
  float v285;
  float v286;
  float v287;
  float v288;
  float v289;
  float v290;
  float v291;
  float v292;
  float v293;
  float v294;
  float v295;
  float v296;
  uint64_t v297;
  BOOL v298;
  _QWORD *v299;
  uint64_t v300;
  float v301;
  float v302;
  float v303;
  float v304;
  float v305;
  float v306;
  float v307;
  float v308;
  float v309;
  float v310;
  float v311;
  float v312;
  float v313;
  float v314;
  float v315;
  float v316;
  float v317;
  float v318;
  float v319;
  float v320;
  float v321;
  float v322;
  float v323;
  float v324;
  float v325;
  float v326;
  float v327;
  float v328;
  float v329;
  float v330;
  float v331;
  float v332;
  float v333;
  float v334;
  float v335;
  _QWORD v336[3];
  float *v337;
  float *v338;
  float *v339;
  float *v340;
  float *v341;
  float *v342;
  float *v343;
  float *v344;
  float *v345;
  float *v346;
  float *v347;
  mach_msg_type_number_t task_info_outCnt[2];
  float *v349;
  float *v350;
  float *v351;
  float *v352;
  float *v353;
  float *v354;
  float *v355;
  float *v356;
  float *v357;
  float *v358;
  float *v359;
  unint64_t v360;
  void *v361;
  char *v362;
  char *v363;
  void *v364;
  char *v365;
  char *v366;
  void *v367;
  char *v368;
  char *v369;
  void *v370;
  char *v371;
  char *v372;
  void *v373;
  char *v374;
  char *v375;
  void *v376;
  char *v377;
  char *v378;
  void *v379[2];
  char v380;
  uint64_t v381;
  uint64_t v382;
  _QWORD v383[3];
  _QWORD *v384;
  _BYTE v385[24];
  _BYTE *v386;
  _BYTE v387[24];
  _BYTE *v388;
  _BYTE v389[568];
  void *__p[2];
  char v391;
  unint64_t v392;
  uint64_t v393;

  v393 = *MEMORY[0x24BDAC8D0];
  v381 = a5;
  v382 = a6;
  v380 = 15;
  strcpy((char *)v379, "MasksEvaluation");
  v6 = *(_QWORD *)(a3 + 24);
  if (!v6)
  {
    if ((_BYTE)a6)
      sub_2394202DC((_QWORD *)(a5 + 16), 1001);
    if (v380 < 0)
      goto LABEL_232;
    return v6 != 0;
  }
  v12 = *a1;
  v11 = a1[1];
  sub_2396FD800(a4, (uint64_t)v387);
  __p[0] = (void *)0x42C8000000000000;
  sub_2396FCC68(v389, (v11 - v12) >> 3, v387, __p, 1.0);
  v13 = v388;
  if (v388 == v387)
  {
    v14 = 4;
    v13 = v387;
  }
  else
  {
    if (!v388)
      goto LABEL_11;
    v14 = 5;
  }
  (*(void (**)(void))(*v13 + 8 * v14))();
LABEL_11:
  v391 = 0;
  LOBYTE(__p[0]) = 0;
  sub_2396FCDAC((uint64_t)v389, (__int128 *)__p, 1);
  if (v391 < 0)
  {
    operator delete(__p[0]);
    if (!(_BYTE)v382)
    {
LABEL_13:
      if (a1[1] != *a1)
        goto LABEL_14;
LABEL_20:
      if ((_BYTE)v382)
      {
        v28 = (_QWORD *)v381;
        *(_BYTE *)(v381 + 8) = 0;
        *v28 = 0;
      }
      goto LABEL_231;
    }
  }
  else if (!(_BYTE)v382)
  {
    goto LABEL_13;
  }
  v27 = v381;
  *(std::chrono::system_clock::time_point *)(v381 + 16) = std::chrono::system_clock::now();
  task_info_outCnt[0] = 93;
  if (task_info(*MEMORY[0x24BDAEC58], 0x16u, (task_info_t)__p, task_info_outCnt))
  {
    *(_BYTE *)(v27 + 80) = 1;
    if (a1[1] == *a1)
      goto LABEL_20;
  }
  else
  {
    *(float *)(v27 + 44) = (float)((float)v392 * 0.00097656) * 0.00097656;
    *(_BYTE *)(v27 + 80) = 1;
    if (a1[1] == *a1)
      goto LABEL_20;
  }
LABEL_14:
  v16 = operator new(0x28uLL);
  *v16 = &off_250ADDF68;
  v16[1] = &v381;
  v16[2] = a2;
  v16[3] = a4;
  v386 = v16;
  std::chrono::system_clock::now();
  v18 = *a1;
  v17 = a1[1];
  v377 = 0;
  v376 = 0;
  v378 = 0;
  v19 = v17 - v18;
  v20 = (v17 - v18) >> 3;
  if (v17 == v18)
  {
    v374 = 0;
    v373 = 0;
    v375 = 0;
    v371 = 0;
    v370 = 0;
    v372 = 0;
    v368 = 0;
    v367 = 0;
    v369 = 0;
    v365 = 0;
    v364 = 0;
    v366 = 0;
    v362 = 0;
    v361 = 0;
    v363 = 0;
  }
  else
  {
    if ((v19 & 0x8000000000000000) != 0)
      sub_2394189F8();
    v21 = (char *)operator new(v19 >> 1);
    v376 = v21;
    v378 = &v21[4 * v20];
    bzero(v21, v19 >> 1);
    v377 = &v21[v19 >> 1];
    v22 = (char *)operator new(v19 >> 1);
    v373 = v22;
    v375 = &v22[4 * v20];
    bzero(v22, v19 >> 1);
    v374 = &v22[v19 >> 1];
    v23 = (char *)operator new(v19 >> 1);
    v370 = v23;
    v372 = &v23[4 * v20];
    bzero(v23, v19 >> 1);
    v371 = &v23[v19 >> 1];
    v24 = (char *)operator new(v19 >> 1);
    v367 = v24;
    v369 = &v24[4 * v20];
    bzero(v24, v19 >> 1);
    v368 = &v24[v19 >> 1];
    v25 = (char *)operator new(v19 >> 1);
    v364 = v25;
    v366 = &v25[4 * v20];
    bzero(v25, v19 >> 1);
    v365 = &v25[v19 >> 1];
    v26 = (char *)operator new(v19 >> 1);
    v361 = v26;
    v363 = &v26[4 * v20];
    bzero(v26, v19 >> 1);
    v362 = &v26[v19 >> 1];
  }
  v360 = 0;
  v29 = std::thread::hardware_concurrency();
  if (v20 >= v29)
    v30 = v29;
  else
    v30 = v20;
  sub_2397A2A50((uint64_t)__p, v30, 0);
  v384 = 0;
  v31 = operator new(0x70uLL);
  *v31 = &off_250ADDFB0;
  v31[1] = v379;
  v31[2] = v389;
  v31[3] = a1;
  v31[4] = a3;
  v31[5] = a4;
  v31[6] = &v381;
  v31[7] = &v360;
  v31[8] = &v376;
  v31[9] = &v373;
  v31[10] = &v370;
  v31[11] = &v367;
  v31[12] = &v364;
  v31[13] = &v361;
  v384 = v31;
  sub_2397A376C((unint64_t *)__p, v20, v383, 0);
  v32 = v384;
  if (v384 == v383)
  {
    v33 = 4;
    v32 = v383;
  }
  else
  {
    if (!v384)
      goto LABEL_33;
    v33 = 5;
  }
  (*(void (**)(void))(*v32 + 8 * v33))();
LABEL_33:
  v34 = -1.0;
  if ((float)((float)v360 / (float)v20) > 0.05)
    goto LABEL_209;
  sub_23955EA9C(task_info_outCnt);
  sub_23955E6CC(v336);
  v41 = (v377 - (_BYTE *)v376) >> 2;
  if (v377 == v376)
  {
    v45 = (float)v41;
    v46 = 0.0;
    v47 = 0.0 / (float)v41;
    goto LABEL_53;
  }
  if (v41 <= 1)
    v42 = 1;
  else
    v42 = (v377 - (_BYTE *)v376) >> 2;
  if (v42 < 2)
  {
    v43 = 0;
    v44 = 0.0;
LABEL_44:
    v50 = v42 - v43;
    v51 = (float *)((char *)v376 + 4 * v43);
    do
    {
      v52 = *v51++;
      v44 = v44 + v52;
      --v50;
    }
    while (v50);
    goto LABEL_46;
  }
  v43 = v42 & 0xFFFFFFFFFFFFFFFELL;
  v48 = (float *)((char *)v376 + 4);
  v44 = 0.0;
  v49 = v42 & 0xFFFFFFFFFFFFFFFELL;
  do
  {
    v44 = (float)(v44 + *(v48 - 1)) + *v48;
    v48 += 2;
    v49 -= 2;
  }
  while (v49);
  if (v42 != v43)
    goto LABEL_44;
LABEL_46:
  v45 = (float)v41;
  v47 = v44 / (float)v41;
  if (v42 < 2)
  {
    v53 = 0;
    v46 = 0.0;
LABEL_51:
    v56 = v42 - v53;
    v57 = (float *)((char *)v376 + 4 * v53);
    do
    {
      v58 = *v57++;
      v46 = v46 + v58;
      --v56;
    }
    while (v56);
    goto LABEL_53;
  }
  v53 = v42 & 0xFFFFFFFFFFFFFFFELL;
  v54 = (float *)((char *)v376 + 4);
  v46 = 0.0;
  v55 = v42 & 0xFFFFFFFFFFFFFFFELL;
  do
  {
    v46 = (float)(v46 + *(v54 - 1)) + *v54;
    v54 += 2;
    v55 -= 2;
  }
  while (v55);
  if (v42 != v53)
    goto LABEL_51;
LABEL_53:
  v59 = 0.0;
  if ((unint64_t)(v377 - (_BYTE *)v376) < 4)
    goto LABEL_63;
  if (v41 <= 1)
    v41 = 1;
  *(float *)v35.i32 = v46 / v45;
  if (v41 < 8)
  {
    v60 = 0;
LABEL_61:
    v66 = v41 - v60;
    v67 = (float *)((char *)v376 + 4 * v60);
    do
    {
      v68 = *v67++;
      v59 = v59 + (float)((float)(v68 - *(float *)v35.i32) * (float)(v68 - *(float *)v35.i32));
      --v66;
    }
    while (v66);
    goto LABEL_63;
  }
  v60 = v41 & 0xFFFFFFFFFFFFFFF8;
  v36 = (float32x4_t)vdupq_lane_s32(v35, 0);
  v61 = (float32x4_t *)((char *)v376 + 16);
  v62 = v41 & 0xFFFFFFFFFFFFFFF8;
  do
  {
    v63 = vsubq_f32(v61[-1], v36);
    v64 = vsubq_f32(*v61, v36);
    v65 = vmulq_f32(v63, v63);
    v37 = vmulq_f32(v64, v64);
    v59 = (float)((float)((float)((float)((float)((float)((float)(v59 + v65.f32[0]) + v65.f32[1]) + v65.f32[2])
                                        + v65.f32[3])
                                + v37.f32[0])
                        + v37.f32[1])
                + v37.f32[2])
        + v37.f32[3];
    v61 += 2;
    v62 -= 8;
  }
  while (v62);
  if (v41 != v60)
    goto LABEL_61;
LABEL_63:
  v69 = (v374 - (_BYTE *)v373) >> 2;
  if (v374 == v373)
  {
    v73 = (float)v69;
    v74 = 0.0;
    v75 = 0.0 / (float)v69;
    goto LABEL_82;
  }
  if (v69 <= 1)
    v70 = 1;
  else
    v70 = (v374 - (_BYTE *)v373) >> 2;
  if (v70 < 2)
  {
    v71 = 0;
    v72 = 0.0;
LABEL_73:
    v78 = v70 - v71;
    v79 = (float *)((char *)v373 + 4 * v71);
    do
    {
      v80 = *v79++;
      v72 = v72 + v80;
      --v78;
    }
    while (v78);
    goto LABEL_75;
  }
  v71 = v70 & 0xFFFFFFFFFFFFFFFELL;
  v76 = (float *)((char *)v373 + 4);
  v72 = 0.0;
  v77 = v70 & 0xFFFFFFFFFFFFFFFELL;
  do
  {
    v72 = (float)(v72 + *(v76 - 1)) + *v76;
    v76 += 2;
    v77 -= 2;
  }
  while (v77);
  if (v70 != v71)
    goto LABEL_73;
LABEL_75:
  v73 = (float)v69;
  v75 = v72 / (float)v69;
  if (v70 < 2)
  {
    v81 = 0;
    v74 = 0.0;
LABEL_80:
    v84 = v70 - v81;
    v85 = (float *)((char *)v373 + 4 * v81);
    do
    {
      v86 = *v85++;
      v74 = v74 + v86;
      --v84;
    }
    while (v84);
    goto LABEL_82;
  }
  v81 = v70 & 0xFFFFFFFFFFFFFFFELL;
  v82 = (float *)((char *)v373 + 4);
  v74 = 0.0;
  v83 = v70 & 0xFFFFFFFFFFFFFFFELL;
  do
  {
    v74 = (float)(v74 + *(v82 - 1)) + *v82;
    v82 += 2;
    v83 -= 2;
  }
  while (v83);
  if (v70 != v81)
    goto LABEL_80;
LABEL_82:
  v87 = 0.0;
  if ((unint64_t)(v374 - (_BYTE *)v373) < 4)
    goto LABEL_92;
  if (v69 <= 1)
    v69 = 1;
  v36.f32[0] = v74 / v73;
  if (v69 < 8)
  {
    v88 = 0;
LABEL_90:
    v94 = v69 - v88;
    v95 = (float *)((char *)v373 + 4 * v88);
    do
    {
      v96 = *v95++;
      v87 = v87 + (float)((float)(v96 - v36.f32[0]) * (float)(v96 - v36.f32[0]));
      --v94;
    }
    while (v94);
    goto LABEL_92;
  }
  v88 = v69 & 0xFFFFFFFFFFFFFFF8;
  v37 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v36.f32, 0);
  v89 = (float32x4_t *)((char *)v373 + 16);
  v90 = v69 & 0xFFFFFFFFFFFFFFF8;
  do
  {
    v91 = vsubq_f32(v89[-1], v37);
    v92 = vsubq_f32(*v89, v37);
    v93 = vmulq_f32(v91, v91);
    v39 = vmulq_f32(v92, v92);
    v87 = (float)((float)((float)((float)((float)((float)((float)(v87 + v93.f32[0]) + v93.f32[1]) + v93.f32[2])
                                        + v93.f32[3])
                                + v39.f32[0])
                        + v39.f32[1])
                + v39.f32[2])
        + v39.f32[3];
    v89 += 2;
    v90 -= 8;
  }
  while (v90);
  if (v69 != v88)
    goto LABEL_90;
LABEL_92:
  v97 = (v371 - (_BYTE *)v370) >> 2;
  if (v371 == v370)
  {
    v101 = (float)v97;
    v102 = 0.0;
    v103 = 0.0 / (float)v97;
    goto LABEL_111;
  }
  if (v97 <= 1)
    v98 = 1;
  else
    v98 = (v371 - (_BYTE *)v370) >> 2;
  if (v98 < 2)
  {
    v99 = 0;
    v100 = 0.0;
LABEL_102:
    v106 = v98 - v99;
    v107 = (float *)((char *)v370 + 4 * v99);
    do
    {
      v108 = *v107++;
      v100 = v100 + v108;
      --v106;
    }
    while (v106);
    goto LABEL_104;
  }
  v99 = v98 & 0xFFFFFFFFFFFFFFFELL;
  v104 = (float *)((char *)v370 + 4);
  v100 = 0.0;
  v105 = v98 & 0xFFFFFFFFFFFFFFFELL;
  do
  {
    v100 = (float)(v100 + *(v104 - 1)) + *v104;
    v104 += 2;
    v105 -= 2;
  }
  while (v105);
  if (v98 != v99)
    goto LABEL_102;
LABEL_104:
  v101 = (float)v97;
  v103 = v100 / (float)v97;
  if (v98 < 2)
  {
    v109 = 0;
    v102 = 0.0;
LABEL_109:
    v112 = v98 - v109;
    v113 = (float *)((char *)v370 + 4 * v109);
    do
    {
      v114 = *v113++;
      v102 = v102 + v114;
      --v112;
    }
    while (v112);
    goto LABEL_111;
  }
  v109 = v98 & 0xFFFFFFFFFFFFFFFELL;
  v110 = (float *)((char *)v370 + 4);
  v102 = 0.0;
  v111 = v98 & 0xFFFFFFFFFFFFFFFELL;
  do
  {
    v102 = (float)(v102 + *(v110 - 1)) + *v110;
    v110 += 2;
    v111 -= 2;
  }
  while (v111);
  if (v98 != v109)
    goto LABEL_109;
LABEL_111:
  v115 = 0.0;
  if ((unint64_t)(v371 - (_BYTE *)v370) < 4)
    goto LABEL_121;
  if (v97 <= 1)
    v97 = 1;
  v37.f32[0] = v102 / v101;
  if (v97 < 8)
  {
    v116 = 0;
LABEL_119:
    v123 = v97 - v116;
    v124 = (float *)((char *)v370 + 4 * v116);
    do
    {
      v125 = *v124++;
      v115 = v115 + (float)((float)(v125 - v37.f32[0]) * (float)(v125 - v37.f32[0]));
      --v123;
    }
    while (v123);
    goto LABEL_121;
  }
  v116 = v97 & 0xFFFFFFFFFFFFFFF8;
  v39 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v37.f32, 0);
  v117 = (float32x4_t *)((char *)v370 + 16);
  v118 = v97 & 0xFFFFFFFFFFFFFFF8;
  do
  {
    v119 = vsubq_f32(v117[-1], v39);
    v120 = vsubq_f32(*v117, v39);
    v121 = vmulq_f32(v119, v119);
    v122 = vmulq_f32(v120, v120);
    v115 = (float)((float)((float)((float)((float)((float)((float)(v115 + v121.f32[0]) + v121.f32[1]) + v121.f32[2])
                                         + v121.f32[3])
                                 + v122.f32[0])
                         + v122.f32[1])
                 + v122.f32[2])
         + v122.f32[3];
    v117 += 2;
    v118 -= 8;
  }
  while (v118);
  if (v97 != v116)
    goto LABEL_119;
LABEL_121:
  v126 = (v368 - (_BYTE *)v367) >> 2;
  if (v368 == v367)
  {
    v130 = (float)v126;
    v131 = 0.0;
    v132 = 0.0 / (float)v126;
    goto LABEL_140;
  }
  if (v126 <= 1)
    v127 = 1;
  else
    v127 = (v368 - (_BYTE *)v367) >> 2;
  if (v127 < 2)
  {
    v128 = 0;
    v129 = 0.0;
LABEL_131:
    v135 = v127 - v128;
    v136 = (float *)((char *)v367 + 4 * v128);
    do
    {
      v137 = *v136++;
      v129 = v129 + v137;
      --v135;
    }
    while (v135);
    goto LABEL_133;
  }
  v128 = v127 & 0xFFFFFFFFFFFFFFFELL;
  v133 = (float *)((char *)v367 + 4);
  v129 = 0.0;
  v134 = v127 & 0xFFFFFFFFFFFFFFFELL;
  do
  {
    v129 = (float)(v129 + *(v133 - 1)) + *v133;
    v133 += 2;
    v134 -= 2;
  }
  while (v134);
  if (v127 != v128)
    goto LABEL_131;
LABEL_133:
  v130 = (float)v126;
  v132 = v129 / (float)v126;
  if (v127 < 2)
  {
    v138 = 0;
    v131 = 0.0;
LABEL_138:
    v141 = v127 - v138;
    v142 = (float *)((char *)v367 + 4 * v138);
    do
    {
      v143 = *v142++;
      v131 = v131 + v143;
      --v141;
    }
    while (v141);
    goto LABEL_140;
  }
  v138 = v127 & 0xFFFFFFFFFFFFFFFELL;
  v139 = (float *)((char *)v367 + 4);
  v131 = 0.0;
  v140 = v127 & 0xFFFFFFFFFFFFFFFELL;
  do
  {
    v131 = (float)(v131 + *(v139 - 1)) + *v139;
    v139 += 2;
    v140 -= 2;
  }
  while (v140);
  if (v127 != v138)
    goto LABEL_138;
LABEL_140:
  v144 = 0.0;
  if ((unint64_t)(v368 - (_BYTE *)v367) < 4)
    goto LABEL_150;
  if (v126 <= 1)
    v126 = 1;
  v39.f32[0] = v131 / v130;
  if (v126 < 8)
  {
    v145 = 0;
LABEL_148:
    v152 = v126 - v145;
    v153 = (float *)((char *)v367 + 4 * v145);
    do
    {
      v154 = *v153++;
      v144 = v144 + (float)((float)(v154 - v39.f32[0]) * (float)(v154 - v39.f32[0]));
      --v152;
    }
    while (v152);
    goto LABEL_150;
  }
  v145 = v126 & 0xFFFFFFFFFFFFFFF8;
  v146 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v39.f32, 0);
  v147 = (float32x4_t *)((char *)v367 + 16);
  v148 = v126 & 0xFFFFFFFFFFFFFFF8;
  do
  {
    v149 = vsubq_f32(v147[-1], v146);
    v150 = vsubq_f32(*v147, v146);
    v40 = vmulq_f32(v149, v149);
    v151 = vmulq_f32(v150, v150);
    v144 = (float)((float)((float)((float)((float)((float)((float)(v144 + v40.f32[0]) + v40.f32[1]) + v40.f32[2])
                                         + v40.f32[3])
                                 + v151.f32[0])
                         + v151.f32[1])
                 + v151.f32[2])
         + v151.f32[3];
    v147 += 2;
    v148 -= 8;
  }
  while (v148);
  if (v126 != v145)
    goto LABEL_148;
LABEL_150:
  v155 = (v365 - (_BYTE *)v364) >> 2;
  if (v365 == v364)
  {
    v159 = (float)v155;
    v160 = 0.0;
    v161 = 0.0 / (float)v155;
    goto LABEL_169;
  }
  if (v155 <= 1)
    v156 = 1;
  else
    v156 = (v365 - (_BYTE *)v364) >> 2;
  if (v156 < 2)
  {
    v157 = 0;
    v158 = 0.0;
LABEL_160:
    v164 = v156 - v157;
    v165 = (float *)((char *)v364 + 4 * v157);
    do
    {
      v166 = *v165++;
      v158 = v158 + v166;
      --v164;
    }
    while (v164);
    goto LABEL_162;
  }
  v157 = v156 & 0xFFFFFFFFFFFFFFFELL;
  v162 = (float *)((char *)v364 + 4);
  v158 = 0.0;
  v163 = v156 & 0xFFFFFFFFFFFFFFFELL;
  do
  {
    v158 = (float)(v158 + *(v162 - 1)) + *v162;
    v162 += 2;
    v163 -= 2;
  }
  while (v163);
  if (v156 != v157)
    goto LABEL_160;
LABEL_162:
  v159 = (float)v155;
  v161 = v158 / (float)v155;
  if (v156 < 2)
  {
    v167 = 0;
    v160 = 0.0;
LABEL_167:
    v170 = v156 - v167;
    v171 = (float *)((char *)v364 + 4 * v167);
    do
    {
      v172 = *v171++;
      v160 = v160 + v172;
      --v170;
    }
    while (v170);
    goto LABEL_169;
  }
  v167 = v156 & 0xFFFFFFFFFFFFFFFELL;
  v168 = (float *)((char *)v364 + 4);
  v160 = 0.0;
  v169 = v156 & 0xFFFFFFFFFFFFFFFELL;
  do
  {
    v160 = (float)(v160 + *(v168 - 1)) + *v168;
    v168 += 2;
    v169 -= 2;
  }
  while (v169);
  if (v156 != v167)
    goto LABEL_167;
LABEL_169:
  v173 = 0.0;
  if ((unint64_t)(v365 - (_BYTE *)v364) < 4)
    goto LABEL_179;
  if (v155 <= 1)
    v155 = 1;
  v40.f32[0] = v160 / v159;
  if (v155 < 8)
  {
    v174 = 0;
LABEL_177:
    v182 = v155 - v174;
    v183 = (float *)((char *)v364 + 4 * v174);
    do
    {
      v184 = *v183++;
      v173 = v173 + (float)((float)(v184 - v40.f32[0]) * (float)(v184 - v40.f32[0]));
      --v182;
    }
    while (v182);
    goto LABEL_179;
  }
  v174 = v155 & 0xFFFFFFFFFFFFFFF8;
  v175 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v40.f32, 0);
  v176 = (float32x4_t *)((char *)v364 + 16);
  v177 = v155 & 0xFFFFFFFFFFFFFFF8;
  do
  {
    v178 = vsubq_f32(v176[-1], v175);
    v179 = vsubq_f32(*v176, v175);
    v180 = vmulq_f32(v178, v178);
    v181 = vmulq_f32(v179, v179);
    v173 = (float)((float)((float)((float)((float)((float)((float)(v173 + v180.f32[0]) + v180.f32[1]) + v180.f32[2])
                                         + v180.f32[3])
                                 + v181.f32[0])
                         + v181.f32[1])
                 + v181.f32[2])
         + v181.f32[3];
    v176 += 2;
    v177 -= 8;
  }
  while (v177);
  if (v155 != v174)
    goto LABEL_177;
LABEL_179:
  v185 = v59 / v45;
  v186 = v87 / v73;
  v187 = v115 / v101;
  v188 = v144 / v130;
  v189 = v173 / v159;
  v190 = (v362 - (_BYTE *)v361) >> 2;
  if (v362 == v361)
  {
    v194 = (float)v190;
    v195 = 0.0;
    v334 = 0.0 / (float)v190;
    goto LABEL_198;
  }
  if (v190 <= 1)
    v191 = 1;
  else
    v191 = (v362 - (_BYTE *)v361) >> 2;
  if (v191 < 2)
  {
    v192 = 0;
    v193 = 0.0;
LABEL_189:
    v198 = v191 - v192;
    v199 = (float *)((char *)v361 + 4 * v192);
    do
    {
      v200 = *v199++;
      v193 = v193 + v200;
      --v198;
    }
    while (v198);
    goto LABEL_191;
  }
  v192 = v191 & 0xFFFFFFFFFFFFFFFELL;
  v196 = (float *)((char *)v361 + 4);
  v193 = 0.0;
  v197 = v191 & 0xFFFFFFFFFFFFFFFELL;
  do
  {
    v193 = (float)(v193 + *(v196 - 1)) + *v196;
    v196 += 2;
    v197 -= 2;
  }
  while (v197);
  if (v191 != v192)
    goto LABEL_189;
LABEL_191:
  v194 = (float)v190;
  v334 = v193 / (float)v190;
  if (v191 < 2)
  {
    v201 = 0;
    v195 = 0.0;
LABEL_196:
    v204 = v191 - v201;
    v205 = (float *)((char *)v361 + 4 * v201);
    do
    {
      v206 = *v205++;
      v195 = v195 + v206;
      --v204;
    }
    while (v204);
    goto LABEL_198;
  }
  v201 = v191 & 0xFFFFFFFFFFFFFFFELL;
  v202 = (float *)((char *)v361 + 4);
  v195 = 0.0;
  v203 = v191 & 0xFFFFFFFFFFFFFFFELL;
  do
  {
    v195 = (float)(v195 + *(v202 - 1)) + *v202;
    v202 += 2;
    v203 -= 2;
  }
  while (v203);
  if (v191 != v201)
    goto LABEL_196;
LABEL_198:
  v207 = sqrtf(v185);
  v208 = sqrtf(v186);
  v209 = sqrtf(v187);
  v210 = sqrtf(v188);
  v211 = 0.0;
  v212 = sqrtf(v189);
  if ((unint64_t)(v362 - (_BYTE *)v361) >= 4)
  {
    if (v190 <= 1)
      v190 = 1;
    *(float *)v38.i32 = v195 / v194;
    if (v190 >= 8)
    {
      v213 = v190 & 0xFFFFFFFFFFFFFFF8;
      v214 = (float32x4_t)vdupq_lane_s32(v38, 0);
      v215 = (float32x4_t *)((char *)v361 + 16);
      v216 = v190 & 0xFFFFFFFFFFFFFFF8;
      do
      {
        v217 = vsubq_f32(v215[-1], v214);
        v218 = vsubq_f32(*v215, v214);
        v219 = vmulq_f32(v217, v217);
        v220 = vmulq_f32(v218, v218);
        v211 = (float)((float)((float)((float)((float)((float)((float)(v211 + v219.f32[0]) + v219.f32[1]) + v219.f32[2])
                                             + v219.f32[3])
                                     + v220.f32[0])
                             + v220.f32[1])
                     + v220.f32[2])
             + v220.f32[3];
        v215 += 2;
        v216 -= 8;
      }
      while (v216);
      if (v190 == v213)
        goto LABEL_208;
    }
    else
    {
      v213 = 0;
    }
    v221 = v190 - v213;
    v222 = (float *)((char *)v361 + 4 * v213);
    do
    {
      v223 = *v222++;
      v211 = v211 + (float)((float)(v223 - *(float *)v38.i32) * (float)(v223 - *(float *)v38.i32));
      --v221;
    }
    while (v221);
  }
LABEL_208:
  v224 = sqrtf(v211 / v194);
  v225 = (float)(v207 - *v342) / (v342[1] + 0.000001);
  v226 = (float)(v207 - *v354) / (v354[1] + 0.000001);
  v227 = (float)(v208 - *v343) / (v343[1] + 0.000001);
  v228 = (float)(v208 - *v355) / (v355[1] + 0.000001);
  v229 = (float)(v209 - *v344) / (v344[1] + 0.000001);
  v230 = (float)(v209 - *v356) / (v356[1] + 0.000001);
  v231 = (float)(v210 - *v345) / (v345[1] + 0.000001);
  v232 = (float)(v210 - *v357) / (v357[1] + 0.000001);
  v320 = v232;
  v233 = (float)(v212 - *v346) / (v346[1] + 0.000001);
  v323 = v233;
  v234 = (float)(v212 - *v358) / (v358[1] + 0.000001);
  v235 = (float)(v224 - *v347) / (v347[1] + 0.000001);
  v318 = v235;
  v236 = (float)(v224 - *v359) / (v359[1] + 0.000001);
  v301 = v236;
  v237 = (float)(v47 - *(float *)v336[0]) / (*(float *)(v336[0] + 4) + 0.000001);
  v312 = v237;
  v314 = v234;
  v238 = (float)(v47 - **(float **)task_info_outCnt) / (*(float *)(*(_QWORD *)task_info_outCnt + 4) + 0.000001);
  v239 = (float)(v75 - *v337) / (v337[1] + 0.000001);
  v240 = (float)(v75 - *v349) / (v349[1] + 0.000001);
  v302 = v238;
  v303 = v240;
  v241 = (float)(v103 - *v338) / (v338[1] + 0.000001);
  v307 = v241;
  v309 = v239;
  v242 = (float)(v103 - *v350) / (v350[1] + 0.000001);
  v243 = (float)(v132 - *v339) / (v339[1] + 0.000001);
  v304 = v242;
  v305 = v243;
  v244 = (float)(v132 - *v351) / (v351[1] + 0.000001);
  v311 = v244;
  v245 = (float)(v161 - *v340) / (v340[1] + 0.000001);
  v316 = v245;
  v246 = (float)(v161 - *v352) / (v352[1] + 0.000001);
  v322 = v246;
  v247 = (float)(v334 - *v341) / (v341[1] + 0.000001);
  v326 = v247;
  v248 = (float)(v334 - *v353) / (v353[1] + 0.000001);
  v330 = v248;
  v249 = exp(v225 * -0.5 * v225);
  v332 = v249;
  v250 = exp(v226 * -0.5 * v226);
  v329 = v250;
  v251 = exp(v227 * -0.5 * v227);
  v335 = v251;
  v252 = exp(v228 * -0.5 * v228);
  v331 = v252;
  v253 = exp(v229 * -0.5 * v229);
  v333 = v253;
  v254 = exp(v230 * -0.5 * v230);
  v325 = v254;
  v255 = exp(v231 * -0.5 * v231);
  v328 = v255;
  v256 = exp(v320 * -0.5 * v320);
  v321 = v256;
  v257 = exp(v323 * -0.5 * v323);
  v324 = v257;
  v258 = exp(v314 * -0.5 * v314);
  v315 = v258;
  v259 = exp(v318 * -0.5 * v318);
  v319 = v259;
  v260 = exp(v301 * -0.5 * v301);
  v261 = exp(v312 * -0.5 * v312);
  v313 = v261;
  v262 = exp(v302 * -0.5 * v302);
  v263 = exp(v309 * -0.5 * v309);
  v310 = v263;
  v264 = exp(v303 * -0.5 * v303);
  v265 = exp(v307 * -0.5 * v307);
  v308 = v265;
  v266 = exp(v304 * -0.5 * v304);
  v267 = exp(v305 * -0.5 * v305);
  v306 = v267;
  v268 = exp(v311 * -0.5 * v311);
  v269 = exp(v316 * -0.5 * v316);
  v317 = v269;
  v270 = exp(v322 * -0.5 * v322);
  v271 = exp(v326 * -0.5 * v326);
  v327 = v271;
  v272 = exp(v330 * -0.5 * v330);
  v273 = v332 / ((float)(v332 + v329) + 0.000001);
  v274 = v329 / ((float)(v329 + v273) + 0.000001);
  v275 = v335 / ((float)(v335 + v331) + 0.000001);
  v276 = v331 / ((float)(v331 + v275) + 0.000001);
  v277 = v333 / ((float)(v333 + v325) + 0.000001);
  v278 = v325 / ((float)(v325 + v277) + 0.000001);
  v279 = v328 / ((float)(v328 + v321) + 0.000001);
  v280 = v321 / ((float)(v321 + v279) + 0.000001);
  v281 = v324 / ((float)(v324 + v315) + 0.000001);
  v282 = v315 / ((float)(v315 + v281) + 0.000001);
  v283 = v319 / ((float)(v319 + v260) + 0.000001);
  v284 = v260 / ((float)(v260 + v283) + 0.000001);
  v285 = v313 / ((float)(v313 + v262) + 0.000001);
  v286 = v262 / ((float)(v262 + v285) + 0.000001);
  v287 = v310 / ((float)(v310 + v264) + 0.000001);
  v288 = v264 / ((float)(v264 + v287) + 0.000001);
  v289 = v308 / ((float)(v308 + v266) + 0.000001);
  v290 = v266 / ((float)(v266 + v289) + 0.000001);
  v291 = v306 / ((float)(v306 + v268) + 0.000001);
  v292 = v268 / ((float)(v268 + v291) + 0.000001);
  v293 = v317 / ((float)(v317 + v270) + 0.000001);
  v294 = v270 / ((float)(v270 + v293) + 0.000001);
  v295 = v327 / ((float)(v327 + v272) + 0.000001);
  v296 = v272 / ((float)(v272 + v295) + 0.000001);
  v34 = (float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)(v273 - v274) + v275) - v276) + v277) - v278) + v279) - v280) + v281) - v282) + v283) - v284) + v285)
                                                                                              - v286)
                                                                                      + v287)
                                                                              - v288)
                                                                      + v289)
                                                              - v290)
                                                      + v291)
                                              - v292)
                                      + v293)
                              - v294)
                      + v295)
              - v296)
      / 12.0;
  sub_2395618A0((uint64_t)v336);
  sub_2395618A0((uint64_t)task_info_outCnt);
LABEL_209:
  if ((_BYTE)v382)
  {
    v297 = v381;
    *(_DWORD *)v381 = v19 >> 3;
    *(float *)(v297 + 4) = v34;
    v298 = v34 <= *a2;
    *(_BYTE *)(v297 + 8) = v34 > *a2;
    if (v298)
      sub_2394202DC((_QWORD *)(v297 + 16), 1503);
  }
  sub_2397A2E14(__p);
  if (v361)
  {
    v362 = (char *)v361;
    operator delete(v361);
  }
  if (v364)
  {
    v365 = (char *)v364;
    operator delete(v364);
  }
  if (v367)
  {
    v368 = (char *)v367;
    operator delete(v367);
  }
  if (v370)
  {
    v371 = (char *)v370;
    operator delete(v370);
  }
  if (v373)
  {
    v374 = (char *)v373;
    operator delete(v373);
  }
  if (v376)
  {
    v377 = (char *)v376;
    operator delete(v376);
  }
  if (!v386)
    sub_2394172E0();
  (*(void (**)(_BYTE *))(*(_QWORD *)v386 + 48))(v386);
  v299 = v386;
  if (v386 == v385)
  {
    v300 = 4;
    v299 = v385;
  }
  else
  {
    if (!v386)
      goto LABEL_231;
    v300 = 5;
  }
  (*(void (**)(void))(*v299 + 8 * v300))();
LABEL_231:
  sub_2396FCD14((uint64_t)v389);
  if (v380 < 0)
LABEL_232:
    operator delete(v379[0]);
  return v6 != 0;
}

void sub_2395616B8(_Unwind_Exception *a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  sub_2397A2E14(&STACK[0x600]);
  v2 = (void *)STACK[0x2B0];
  if (STACK[0x2B0])
  {
    STACK[0x2B8] = (unint64_t)v2;
    operator delete(v2);
    v3 = (void *)STACK[0x2C8];
    if (!STACK[0x2C8])
    {
LABEL_3:
      v4 = (void *)STACK[0x2E0];
      if (!STACK[0x2E0])
        goto LABEL_4;
      goto LABEL_13;
    }
  }
  else
  {
    v3 = (void *)STACK[0x2C8];
    if (!STACK[0x2C8])
      goto LABEL_3;
  }
  STACK[0x2D0] = (unint64_t)v3;
  operator delete(v3);
  v4 = (void *)STACK[0x2E0];
  if (!STACK[0x2E0])
  {
LABEL_4:
    v5 = (void *)STACK[0x2F8];
    if (!STACK[0x2F8])
      goto LABEL_5;
    goto LABEL_14;
  }
LABEL_13:
  STACK[0x2E8] = (unint64_t)v4;
  operator delete(v4);
  v5 = (void *)STACK[0x2F8];
  if (!STACK[0x2F8])
  {
LABEL_5:
    v6 = (void *)STACK[0x310];
    if (!STACK[0x310])
      goto LABEL_6;
    goto LABEL_15;
  }
LABEL_14:
  STACK[0x300] = (unint64_t)v5;
  operator delete(v5);
  v6 = (void *)STACK[0x310];
  if (!STACK[0x310])
  {
LABEL_6:
    v7 = (void *)STACK[0x328];
    if (!STACK[0x328])
      goto LABEL_8;
    goto LABEL_7;
  }
LABEL_15:
  STACK[0x318] = (unint64_t)v6;
  operator delete(v6);
  v7 = (void *)STACK[0x328];
  if (!STACK[0x328])
  {
LABEL_8:
    sub_239416834(&STACK[0x388]);
    sub_2396FCD14((uint64_t)&STACK[0x3C8]);
    if (SLOBYTE(STACK[0x357]) < 0)
      operator delete((void *)STACK[0x340]);
    _Unwind_Resume(a1);
  }
LABEL_7:
  STACK[0x330] = (unint64_t)v7;
  operator delete(v7);
  goto LABEL_8;
}

uint64_t sub_2395618A0(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  v2 = *(void **)(a1 + 264);
  if (v2)
  {
    *(_QWORD *)(a1 + 272) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 240);
  if (v3)
  {
    *(_QWORD *)(a1 + 248) = v3;
    operator delete(v3);
  }
  v4 = *(void **)(a1 + 216);
  if (v4)
  {
    *(_QWORD *)(a1 + 224) = v4;
    operator delete(v4);
  }
  v5 = *(void **)(a1 + 192);
  if (v5)
  {
    *(_QWORD *)(a1 + 200) = v5;
    operator delete(v5);
  }
  v6 = *(void **)(a1 + 168);
  if (v6)
  {
    *(_QWORD *)(a1 + 176) = v6;
    operator delete(v6);
  }
  v7 = *(void **)(a1 + 144);
  if (v7)
  {
    *(_QWORD *)(a1 + 152) = v7;
    operator delete(v7);
  }
  v8 = *(void **)(a1 + 120);
  if (v8)
  {
    *(_QWORD *)(a1 + 128) = v8;
    operator delete(v8);
  }
  v9 = *(void **)(a1 + 96);
  if (v9)
  {
    *(_QWORD *)(a1 + 104) = v9;
    operator delete(v9);
  }
  v10 = *(void **)(a1 + 72);
  if (v10)
  {
    *(_QWORD *)(a1 + 80) = v10;
    operator delete(v10);
  }
  v11 = *(void **)(a1 + 48);
  if (v11)
  {
    *(_QWORD *)(a1 + 56) = v11;
    operator delete(v11);
  }
  v12 = *(void **)(a1 + 24);
  if (v12)
  {
    *(_QWORD *)(a1 + 32) = v12;
    operator delete(v12);
  }
  v13 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v13;
    operator delete(v13);
  }
  return a1;
}

void sub_239561984()
{
  JUMPOUT(0x23B83E31CLL);
}

__n128 sub_239561998(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = &off_250ADDF68;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_2395619D8(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_250ADDF68;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_239561A00(uint64_t a1)
{
  _BYTE *v1;
  uint64_t v3;
  std::chrono::system_clock::time_point v4;
  rusage v5;
  mach_msg_type_number_t task_info_outCnt;
  integer_t task_info_out[36];
  unint64_t v8;

  v1 = *(_BYTE **)(a1 + 8);
  if (v1[8])
  {
    v3 = *(_QWORD *)v1;
    *(_DWORD *)(*(_QWORD *)v1 + 88) = **(_DWORD **)(a1 + 16);
    v4.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
    *(std::chrono::system_clock::time_point *)(v3 + 24) = v4;
    *(double *)(v3 + 32) = (double)(v4.__d_.__rep_ - *(_QWORD *)(v3 + 16)) / 1000000.0;
    task_info_outCnt = 93;
    if (!task_info(*MEMORY[0x24BDAEC58], 0x16u, task_info_out, &task_info_outCnt))
      *(float *)(v3 + 48) = (float)((float)v8 * 0.00097656) * 0.00097656;
    *(_BYTE *)(v3 + 80) = 0;
    getrusage(0, &v5);
    *(float *)(v3 + 40) = (float)((float)v5.ru_maxrss * 0.00097656) * 0.00097656;
    if (sub_2396FD7B0(*(_QWORD *)(a1 + 24)))
      sub_2394202DC((_QWORD *)(**(_QWORD **)(a1 + 8) + 16), 2);
  }
}

void sub_239561B08()
{
  JUMPOUT(0x23B83E31CLL);
}

__n128 sub_239561B1C(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x70uLL);
  *(_QWORD *)v2 = &off_250ADDFB0;
  *(_OWORD *)(v2 + 56) = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(v2 + 72) = *(_OWORD *)(a1 + 72);
  *(_OWORD *)(v2 + 88) = *(_OWORD *)(a1 + 88);
  *((_QWORD *)v2 + 13) = *(_QWORD *)(a1 + 104);
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  return result;
}

__n128 sub_239561B84(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __n128 result;
  __int128 v5;
  __int128 v6;

  *(_QWORD *)a2 = &off_250ADDFB0;
  v2 = *(_OWORD *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(_OWORD *)(a2 + 8) = v2;
  result = *(__n128 *)(a1 + 56);
  v5 = *(_OWORD *)(a1 + 72);
  v6 = *(_OWORD *)(a1 + 88);
  *(_QWORD *)(a2 + 104) = *(_QWORD *)(a1 + 104);
  *(_OWORD *)(a2 + 88) = v6;
  *(_OWORD *)(a2 + 72) = v5;
  *(__n128 *)(a2 + 56) = result;
  return result;
}

void sub_239561BD4(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  __int128 *v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  float v12;
  __int128 v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  __n128 v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  __n128 v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  BOOL v29;
  unint64_t v30;
  unint64_t v31;
  _BOOL8 v32;
  BOOL v33;
  uint64_t v34;
  float v35;
  int v36;
  float v37;
  uint64_t v38;
  BOOL v39;
  float v40;
  uint64_t v41;
  float v42;
  float *v43;
  uint64_t v44;
  uint64_t v45;
  float *v46;
  int64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  char *v52;
  float *v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  float *v57;
  char *v58;
  float *v59;
  uint64_t v60;
  __int128 v61;
  int v62;
  float *v63;
  float v64;
  uint64_t v65;
  float *v66;
  int64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t v71;
  char *v72;
  float *v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  float *v77;
  char *v78;
  float *v79;
  uint64_t v80;
  __int128 v81;
  int v82;
  BOOL v83;
  uint64_t v84;
  uint64_t v85;
  int *v86;
  unint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  char *v93;
  int64_t v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  unint64_t v98;
  _BYTE *v99;
  unint64_t *v100;
  float v101;
  float *v102;
  uint64_t v103;
  float *v104;
  int64_t v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t v108;
  unint64_t v109;
  char *v110;
  float *v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  _OWORD *v116;
  char *v117;
  uint64_t v118;
  __int128 v119;
  unint64_t v120;
  unint64_t v121;
  uint64_t v122;
  uint64_t v123;
  float *v124;
  char *v125;
  float *v126;
  uint64_t v127;
  __int128 v128;
  int v129;
  float v130;
  float *v131;
  uint64_t v132;
  float *v133;
  int64_t v134;
  uint64_t v135;
  unint64_t v136;
  uint64_t v137;
  unint64_t v138;
  char *v139;
  float *v140;
  unint64_t v141;
  uint64_t v142;
  uint64_t v143;
  float *v144;
  char *v145;
  float *v146;
  uint64_t v147;
  __int128 v148;
  int v149;
  uint64_t v150;
  uint64_t v151;
  int v152;
  int v153;
  int v154;
  uint64_t v155;
  uint64_t v156;
  int v157;
  uint64_t v158;
  int v159;
  uint64_t v160;
  uint64_t v161;
  unint64_t v162;
  uint64_t v163;
  uint64_t v164;
  unint64_t v165;
  uint64_t v166;
  uint64_t v167;
  unint64_t v168;
  uint64_t v169;
  uint64_t v170;
  unint64_t v171;
  uint64_t v172;
  uint64_t v173;
  unint64_t v174;
  uint64_t v175;
  uint64_t v176;
  unint64_t v177;
  uint64_t v178;
  uint64_t v179;
  unint64_t v180;
  uint64_t v181;
  uint64_t v182;
  unint64_t v183;
  float *v184;
  float *v185;
  void **v186;
  void **v187;
  unint64_t v188;
  unint64_t v189;
  uint64_t v190;
  void *v191;
  unint64_t v192;
  float v193;
  float v194;
  uint64_t v195;
  float v196;
  float *v197;
  unint64_t v198;
  uint64_t v199;
  float v200;
  float v201;
  float v202;
  float *v203;
  uint64_t v204;
  float *v205;
  int64_t v206;
  uint64_t v207;
  unint64_t v208;
  uint64_t v209;
  unint64_t v210;
  char *v211;
  float *v212;
  unint64_t v213;
  uint64_t v214;
  uint64_t v215;
  float *v216;
  char *v217;
  float *v218;
  uint64_t v219;
  __int128 v220;
  int v221;
  float v222;
  float v223;
  float *v224;
  uint64_t v225;
  float *v226;
  int64_t v227;
  uint64_t v228;
  unint64_t v229;
  uint64_t v230;
  unint64_t v231;
  char *v232;
  float *v233;
  unint64_t v234;
  uint64_t v235;
  uint64_t v236;
  float *v237;
  char *v238;
  float *v239;
  uint64_t v240;
  __int128 v241;
  int v242;
  char *v243;
  _BYTE *v244;
  unint64_t v245;
  char *v246;
  uint64_t v247;
  unint64_t v248;
  char *v249;
  uint64_t v250;
  uint64_t v251;
  int v252;
  int v253;
  int v254;
  int v255;
  int v256;
  int v257;
  uint64_t v258;
  _BYTE *v259;
  _BYTE *v260;
  int64_t v261;
  uint64_t v262;
  unint64_t v263;
  uint64_t v264;
  unint64_t v265;
  _BYTE *v266;
  uint64_t *v267;
  unint64_t v268;
  uint64_t v269;
  uint64_t v270;
  char *v271;
  _OWORD *v272;
  __int128 *v273;
  uint64_t v274;
  __int128 v275;
  uint64_t v276;
  char *v277;
  _BYTE *v278;
  unint64_t v279;
  char *v280;
  uint64_t v281;
  unint64_t v282;
  uint64_t v283;
  uint64_t v284;
  _QWORD *v285;
  char *v286;
  int64_t v287;
  uint64_t v288;
  unint64_t v289;
  uint64_t v290;
  unint64_t v291;
  _BYTE *v292;
  _QWORD *v293;
  uint64_t v294;
  unint64_t v295;
  char *v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  _OWORD *v300;
  __int128 *v301;
  uint64_t v302;
  __int128 v303;
  float *v304;
  float *v305;
  float *v306;
  unint64_t v307;
  float v308;
  uint64_t v309;
  unint64_t v310;
  unint64_t v311;
  _BYTE *v312;
  float *v313;
  uint64_t v314;
  unint64_t v315;
  float *v316;
  int v317;
  uint64_t v318;
  uint64_t v319;
  _OWORD *v320;
  float *v321;
  uint64_t v322;
  __int128 v323;
  float v324;
  float v325;
  unint64_t v326;
  _QWORD **v327;
  unint64_t v328;
  unint64_t v329;
  std::__shared_weak_count *v330;
  float *v331;
  unint64_t v332;
  unint64_t v333;
  float *v334;
  float v335;
  unint64_t v336;
  unint64_t v337;
  unint64_t v338;
  float *v339;
  unint64_t v340;
  unint64_t v341;
  float *v342;
  float v343;
  float v344;
  float v345;
  unint64_t v346;
  unint64_t v347;
  unint64_t v348;
  float *v349;
  unint64_t v350;
  unint64_t v351;
  float *v352;
  float v353;
  float v354;
  unint64_t v355;
  unint64_t v356;
  unint64_t v357;
  float *v358;
  unint64_t v359;
  unint64_t v360;
  float *v361;
  float v362;
  float v364;
  float v365;
  unint64_t v366;
  float v367;
  float v368;
  float v369;
  float v370;
  __float2 v371;
  char *v372;
  float *v373;
  float *v374;
  float *v375;
  float *v376;
  float *v377;
  unint64_t v378;
  int *v379;
  float v380;
  float v381;
  float v382;
  float v383;
  uint64_t v384;
  unint64_t v385;
  unint64_t v386;
  _BYTE *v387;
  float *v388;
  uint64_t v389;
  unint64_t v390;
  float *v391;
  int v392;
  float *v393;
  int64_t v394;
  uint64_t v395;
  unint64_t v396;
  unint64_t v397;
  _BYTE *v398;
  float *v399;
  uint64_t v400;
  unint64_t v401;
  float *v402;
  int v403;
  uint64_t v404;
  uint64_t v405;
  _OWORD *v406;
  float *v407;
  uint64_t v408;
  __int128 v409;
  uint64_t v410;
  uint64_t v411;
  _OWORD *v412;
  float *v413;
  uint64_t v414;
  __int128 v415;
  uint64_t v416;
  unint64_t v417;
  float v418;
  float v419;
  float v420;
  float *v421;
  uint64_t v422;
  float v423;
  unint64_t v424;
  float v425;
  float v426;
  float *v427;
  float v428;
  float v429;
  float v430;
  float v431;
  double v432;
  float v433;
  float v434;
  double v435;
  float v436;
  float v437;
  unint64_t *v438;
  unint64_t v439;
  float v440;
  unsigned int v441;
  uint64_t v442;
  unsigned int v443;
  unsigned int v444;
  unint64_t v445;
  _QWORD **v446;
  unsigned int v447;
  unint64_t v448;
  unint64_t v449;
  unint64_t v450;
  uint64_t v451;
  uint64_t v452;
  unint64_t v453;
  uint64_t v454;
  uint64_t (**v455)();
  _OWORD v456[3];
  __int128 v457;
  uint64_t v458;
  __int16 v459;
  _QWORD v460[4];
  uint64_t v461;
  std::__shared_weak_count *v462;
  __int128 __dst;
  uint64_t v464;
  void *__p;
  float *v466;
  float *v467;
  void *v468;
  float *v469;
  float *v470;
  __int128 v471;
  __int128 v472;
  __int128 v473;
  void *v474;
  float *v475;
  float *v476;
  void *v477;
  char *v478;
  float *v479;
  void *v480;
  _BYTE *v481;
  char *v482;
  void *v483;
  float *v484;
  float *v485;
  void *v486;
  float *v487;
  float *v488;
  void *v489;
  float *v490;
  float *v491;
  void *v492;
  float *v493;
  float *v494;
  uint64_t (**v495)();
  unint64_t v496;
  std::__shared_weak_count *v497;
  char v498;
  uint64_t v499;
  uint64_t v500;
  uint64_t (**v501)();
  __int16 v502;
  std::__shared_weak_count *v503;
  uint64_t v504[5];
  int v505;
  int v506;
  uint64_t (**v507)();
  _OWORD v508[4];
  uint64_t v509;
  __int16 v510;
  int32x2_t v511;

  v3 = *a2;
  v4 = *(__int128 **)(a1 + 8);
  if (*((char *)v4 + 23) < 0)
  {
    sub_23941A7F8(&__dst, *(void **)v4, *((_QWORD *)v4 + 1));
  }
  else
  {
    v5 = *v4;
    v464 = *((_QWORD *)v4 + 2);
    __dst = v5;
  }
  if ((sub_2396FD7B0(*(_QWORD *)(a1 + 40)) & 1) != 0)
    goto LABEL_578;
  v6 = *(_QWORD *)(a1 + 32);
  v507 = *(uint64_t (***)())(**(_QWORD **)(a1 + 24) + 8 * v3);
  v7 = *(_QWORD *)(v6 + 24);
  if (!v7)
    sub_2394172E0();
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t (***)()))(*(_QWORD *)v7 + 48))(&v461, v7, &v507);
  v8 = *(_QWORD *)(a1 + 16);
  HIBYTE(v508[0]) = 0;
  LOBYTE(v507) = 0;
  sub_2396FD394(v460, v8, (__int128 *)&v507);
  if (SHIBYTE(v508[0]) < 0)
  {
    operator delete(v507);
    v9 = v461;
    if (v461)
      goto LABEL_8;
LABEL_413:
    sub_2394202DC((_QWORD *)(**(_QWORD **)(a1 + 48) + 16), 1501);
    sub_2396FD3E8((uint64_t)v460);
    v330 = v462;
    if (v462)
      goto LABEL_575;
LABEL_578:
    if (SHIBYTE(v464) < 0)
      goto LABEL_579;
    return;
  }
  v9 = v461;
  if (!v461)
    goto LABEL_413;
LABEL_8:
  v442 = v3;
  v455 = &off_250ADB628;
  sub_23982619C((uint64_t)v456, v9 + 8);
  v459 = *(_WORD *)(v9 + 80);
  v10 = DWORD2(v457);
  v447 = HIDWORD(v457);
  if (DWORD2(v457) <= HIDWORD(v457))
    v11 = HIDWORD(v457);
  else
    v11 = DWORD2(v457);
  v495 = &off_250ADB778;
  sub_2394247FC((uint64_t)&v455, (uint64_t)&v496);
  v446 = (_QWORD **)a1;
  v12 = 800.0 / (double)v11;
  sub_239713FB0(&v495, 1, &v501, COERCE_UNSIGNED_INT64(v12), COERCE_UNSIGNED_INT64(v12));
  v443 = v10;
  v507 = &off_250ADB628;
  sub_239423E50((uint64_t)&v501, (uint64_t)v508);
  v13 = v508[0];
  v508[0] = 0uLL;
  v14 = (std::__shared_weak_count *)*((_QWORD *)&v456[0] + 1);
  v456[0] = v13;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v456[1] = v508[1];
  v456[2] = v508[2];
  v457 = v508[3];
  v458 = v509;
  v459 = v510;
  sub_239416DA0((uint64_t)v508);
  nullsub_4(&v507);
  v17 = nullsub_4(v504);
  v18 = v503;
  if (v503)
  {
    v19 = (unint64_t *)&v503->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v18->__on_zero_shared)(v18, v17);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  j_nullsub_4_89(&v501);
  v21 = nullsub_4(&v499);
  v22 = v497;
  if (v497)
  {
    v23 = (unint64_t *)&v497->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v22->__on_zero_shared)(v22, v21);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  j_nullsub_4_89(&v495);
  v511 = *(int32x2_t *)((char *)&v457 + 8);
  LOBYTE(v501) = 0;
  v507 = &off_250ADB628;
  sub_23949E6D4(&v511, (void **)&v501, v508);
  v495 = (uint64_t (**)())vadd_s32(v511, (int32x2_t)0x200000002);
  LOBYTE(v471) = 0;
  v501 = &off_250ADB628;
  sub_23949E6D4(&v495, (void **)&v471, &v502);
  *(_QWORD *)&v471 = 0x100000001;
  *((int32x2_t *)&v471 + 1) = v511;
  sub_23949EC84((uint64_t)&v501, &v471, &v495);
  sub_239564634((uint64_t)&v455, (uint64_t)&v495);
  v25 = v497;
  if (v497)
  {
    v26 = (unint64_t *)&v497->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  nullsub_4(&v495);
  v28 = (v511.i32[0] + 2);
  LOBYTE(v489) = 0;
  v29 = v511.i32[1] == -2 || (_DWORD)v28 == 0;
  v30 = v28 | ((unint64_t)(v511.i32[1] + 2) << 32);
  if (v29)
    v30 = 0;
  v31 = v30 << 32;
  if (!HIDWORD(v30))
    v31 = 0;
  v32 = v30 != 0;
  if ((_DWORD)v30)
    v33 = HIDWORD(v30) == 0;
  else
    v33 = 1;
  v495 = (uint64_t (**)())v30;
  v496 = v31 | v32;
  LOBYTE(v497) = 0;
  v498 = 0;
  *(_QWORD *)&v471 = v31 | v32;
  if (v33)
    v30 = 0;
  v492 = (void *)v30;
  if ((HIDWORD(v31) & (HIDWORD(v31) - 1)) != 0)
    v34 = 1;
  else
    v34 = HIDWORD(v31);
  sub_2394604BC(&v499, &v492, (unint64_t *)&v471, 1, &v489, 1, v34);
  v493 = 0;
  v492 = 0;
  v494 = 0;
  v490 = 0;
  v489 = 0;
  v491 = 0;
  v486 = 0;
  v487 = 0;
  v488 = 0;
  v483 = 0;
  v484 = 0;
  v485 = 0;
  v480 = 0;
  v481 = 0;
  v482 = 0;
  v35 = 0.0;
  if (v511.i32[0] >= 1)
  {
    v36 = v511.i32[1];
    if (v511.i32[1] >= 1)
    {
      v450 = 0;
      v451 = 0;
      v448 = 0;
      v449 = 0;
      v445 = 0;
      v37 = 0.0;
      v38 = 1;
      while (v36 < 1)
      {
LABEL_49:
        v39 = v38++ < v511.i32[0];
        if (!v39)
          goto LABEL_375;
      }
      v40 = (float)(v38 - 1);
      v41 = 1;
      v454 = v38;
      while (1)
      {
        if ((*(char *)(v504[0] + (v505 * v38 + v506 * v41)) & 0x80000000) == 0)
          goto LABEL_99;
        v42 = (float)(v41 - 1) / (float)v36;
        v43 = v484;
        if (v484 < v485)
        {
          v44 = v41;
          *v484 = v42;
          v45 = (uint64_t)(v43 + 1);
          goto LABEL_77;
        }
        v46 = (float *)v483;
        v47 = (char *)v484 - (_BYTE *)v483;
        v48 = ((char *)v484 - (_BYTE *)v483) >> 2;
        v49 = v48 + 1;
        if ((unint64_t)(v48 + 1) >> 62)
          sub_2394189F8();
        v50 = (char *)v485 - (_BYTE *)v483;
        if (((char *)v485 - (_BYTE *)v483) >> 1 > v49)
          v49 = v50 >> 1;
        v51 = (unint64_t)v50 >= 0x7FFFFFFFFFFFFFFCLL ? 0x3FFFFFFFFFFFFFFFLL : v49;
        if (v51)
          break;
        v44 = v41;
        v52 = 0;
        v53 = (float *)(4 * v48);
        *(float *)(4 * v48) = v42;
        v45 = 4 * v48 + 4;
        if (v43 != v46)
          goto LABEL_69;
LABEL_75:
        v483 = v53;
        v485 = (float *)&v52[4 * v51];
        if (v46)
          operator delete(v46);
LABEL_77:
        v484 = (float *)v45;
        v63 = v487;
        v64 = v40 / (float)v511.u32[0];
        if (v487 >= v488)
        {
          v66 = (float *)v486;
          v67 = (char *)v487 - (_BYTE *)v486;
          v68 = ((char *)v487 - (_BYTE *)v486) >> 2;
          v69 = v68 + 1;
          if ((unint64_t)(v68 + 1) >> 62)
            sub_2394189F8();
          v70 = (char *)v488 - (_BYTE *)v486;
          if (((char *)v488 - (_BYTE *)v486) >> 1 > v69)
            v69 = v70 >> 1;
          if ((unint64_t)v70 >= 0x7FFFFFFFFFFFFFFCLL)
            v71 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v71 = v69;
          if (v71)
          {
            if (v71 >> 62)
              sub_239418A80();
            v72 = (char *)operator new(4 * v71);
            v73 = (float *)&v72[4 * v68];
            *v73 = v64;
            v65 = (uint64_t)(v73 + 1);
            if (v63 == v66)
              goto LABEL_96;
LABEL_90:
            v74 = (char *)(v63 - 1) - (char *)v66;
            if (v74 < 0x2C)
              goto LABEL_610;
            if ((unint64_t)((char *)v63 - &v72[v67]) < 0x20)
              goto LABEL_610;
            v75 = (v74 >> 2) + 1;
            v76 = 4 * (v75 & 0x7FFFFFFFFFFFFFF8);
            v77 = &v63[v76 / 0xFFFFFFFFFFFFFFFCLL];
            v73 = (float *)((char *)v73 - v76);
            v78 = &v72[4 * v68 - 16];
            v79 = v63 - 4;
            v80 = v75 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v81 = *(_OWORD *)v79;
              *((_OWORD *)v78 - 1) = *((_OWORD *)v79 - 1);
              *(_OWORD *)v78 = v81;
              v78 -= 32;
              v79 -= 8;
              v80 -= 8;
            }
            while (v80);
            v63 = v77;
            if (v75 != (v75 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_610:
              do
              {
                v82 = *((_DWORD *)v63-- - 1);
                *((_DWORD *)v73-- - 1) = v82;
              }
              while (v63 != v66);
            }
          }
          else
          {
            v72 = 0;
            v73 = (float *)(4 * v68);
            *(float *)(4 * v68) = v64;
            v65 = 4 * v68 + 4;
            if (v63 != v66)
              goto LABEL_90;
          }
LABEL_96:
          v486 = v73;
          v488 = (float *)&v72[4 * v71];
          if (v66)
            operator delete(v66);
          goto LABEL_98;
        }
        *v487 = v64;
        v65 = (uint64_t)(v63 + 1);
LABEL_98:
        v487 = (float *)v65;
        v41 = v44;
LABEL_99:
        if (*(_BYTE *)(v500 + (v496 * v38 + HIDWORD(v496) * v41))
          || (*(char *)(v504[0] + (v505 * v38 + v506 * v41)) & 0x80000000) == 0)
        {
          goto LABEL_53;
        }
        v477 = 0;
        v478 = 0;
        v479 = 0;
        v474 = 0;
        v475 = 0;
        v476 = 0;
        v472 = 0u;
        v473 = 0u;
        v471 = 0u;
        sub_239564E50((uint64_t)&v471);
        *(_QWORD *)(*(_QWORD *)(*((_QWORD *)&v471 + 1)
                              + ((((_QWORD)v473 + *((_QWORD *)&v473 + 1)) >> 6) & 0x3FFFFFFFFFFFFF8))
                  + 8 * ((v473 + *((_QWORD *)&v473 + 1)) & 0x1FF)) = v38 | (v41 << 32);
        v468 = 0;
        v469 = 0;
        v470 = 0;
        __p = 0;
        v466 = 0;
        v467 = 0;
        v83 = __CFADD__(*((_QWORD *)&v473 + 1), 1);
        v84 = ++*((_QWORD *)&v473 + 1);
        if (v83)
          goto LABEL_226;
        v452 = v41;
        do
        {
          while (1)
          {
            v85 = (((_QWORD)v472 - *((_QWORD *)&v471 + 1)) << 6) - 1;
            if ((_QWORD)v472 == *((_QWORD *)&v471 + 1))
              v85 = 0;
            v86 = (int *)(*(_QWORD *)(*((_QWORD *)&v471 + 1)
                                    + (((unint64_t)(v473 + v84 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                        + 8 * ((v473 + v84 - 1) & 0x1FF));
            v88 = *v86;
            v87 = v86[1];
            *((_QWORD *)&v473 + 1) = v84 - 1;
            if ((unint64_t)(v85 - (v84 + v473) + 1) >= 0x400)
            {
              operator delete(*(void **)(v472 - 8));
              *(_QWORD *)&v472 = v472 - 8;
            }
            if (*(_BYTE *)(v500 + (v496 * v88 + HIDWORD(v496) * v87)))
              goto LABEL_181;
            v89 = v88;
            v90 = v87;
            if ((*(char *)(v504[0] + (v505 * v88 + v506 * v87)) & 0x80000000) == 0)
              goto LABEL_181;
            v91 = v478;
            if (v478 < (char *)v479)
            {
              *(_QWORD *)v478 = v88 | ((unint64_t)v87 << 32);
              v92 = (uint64_t)(v91 + 8);
              goto LABEL_122;
            }
            v93 = (char *)v477;
            v94 = v478 - (_BYTE *)v477;
            v95 = (v478 - (_BYTE *)v477) >> 3;
            v96 = v95 + 1;
            if ((unint64_t)(v95 + 1) >> 61)
              sub_2394189F8();
            v97 = (char *)v479 - (_BYTE *)v477;
            if (((char *)v479 - (_BYTE *)v477) >> 2 > v96)
              v96 = v97 >> 2;
            v98 = (unint64_t)v97 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v96;
            if (v98)
            {
              if (v98 >> 61)
                sub_239418A80();
              v99 = operator new(8 * v98);
              v100 = (unint64_t *)&v99[8 * v95];
              *v100 = v88 | ((unint64_t)v87 << 32);
              v92 = (uint64_t)(v100 + 1);
              if (v91 == v93)
              {
LABEL_120:
                v477 = v100;
                v478 = (char *)v92;
                v479 = (float *)&v99[8 * v98];
                if (!v91)
                  goto LABEL_122;
LABEL_121:
                operator delete(v91);
                goto LABEL_122;
              }
            }
            else
            {
              v99 = 0;
              v100 = (unint64_t *)(8 * v95);
              *(_QWORD *)(8 * v95) = v88 | ((unint64_t)v87 << 32);
              v92 = 8 * v95 + 8;
              if (v91 == v93)
                goto LABEL_120;
            }
            v112 = v91 - 8 - v93;
            if (v112 < 0x58)
              goto LABEL_611;
            if ((unint64_t)(v91 - &v99[v94]) < 0x20)
              goto LABEL_611;
            v113 = (v112 >> 3) + 1;
            v114 = 8 * (v113 & 0x3FFFFFFFFFFFFFFCLL);
            v115 = &v91[-v114];
            v100 = (unint64_t *)((char *)v100 - v114);
            v116 = &v99[8 * v95 - 16];
            v117 = v91 - 16;
            v118 = v113 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v119 = *(_OWORD *)v117;
              *(v116 - 1) = *((_OWORD *)v117 - 1);
              *v116 = v119;
              v116 -= 2;
              v117 -= 32;
              v118 -= 4;
            }
            while (v118);
            v91 = v115;
            if (v113 != (v113 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_611:
              do
              {
                v120 = *((_QWORD *)v91 - 1);
                v91 -= 8;
                *--v100 = v120;
              }
              while (v91 != v93);
            }
            v91 = (char *)v477;
            v477 = v100;
            v478 = (char *)v92;
            v479 = (float *)&v99[8 * v98];
            if (v91)
              goto LABEL_121;
LABEL_122:
            v478 = (char *)v92;
            *(_BYTE *)(v500 + (v496 * v88 + HIDWORD(v496) * v87)) = 1;
            v101 = (float)v88 / (float)v511.u32[0];
            v102 = v469;
            if (v469 < v470)
            {
              *v469 = v101;
              v103 = (uint64_t)(v102 + 1);
              goto LABEL_152;
            }
            v104 = (float *)v468;
            v105 = (char *)v469 - (_BYTE *)v468;
            v106 = ((char *)v469 - (_BYTE *)v468) >> 2;
            v107 = v106 + 1;
            if ((unint64_t)(v106 + 1) >> 62)
              sub_2394189F8();
            v108 = (char *)v470 - (_BYTE *)v468;
            if (((char *)v470 - (_BYTE *)v468) >> 1 > v107)
              v107 = v108 >> 1;
            if ((unint64_t)v108 >= 0x7FFFFFFFFFFFFFFCLL)
              v109 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v109 = v107;
            if (v109)
            {
              if (v109 >> 62)
                sub_239418A80();
              v110 = (char *)operator new(4 * v109);
              v111 = (float *)&v110[4 * v106];
              *v111 = v101;
              v103 = (uint64_t)(v111 + 1);
              if (v102 == v104)
                goto LABEL_150;
LABEL_144:
              v121 = (char *)(v102 - 1) - (char *)v104;
              if (v121 < 0x2C)
                goto LABEL_612;
              if ((unint64_t)((char *)v102 - &v110[v105]) < 0x20)
                goto LABEL_612;
              v122 = (v121 >> 2) + 1;
              v123 = 4 * (v122 & 0x7FFFFFFFFFFFFFF8);
              v124 = &v102[v123 / 0xFFFFFFFFFFFFFFFCLL];
              v111 = (float *)((char *)v111 - v123);
              v125 = &v110[4 * v106 - 16];
              v126 = v102 - 4;
              v127 = v122 & 0x7FFFFFFFFFFFFFF8;
              do
              {
                v128 = *(_OWORD *)v126;
                *((_OWORD *)v125 - 1) = *((_OWORD *)v126 - 1);
                *(_OWORD *)v125 = v128;
                v125 -= 32;
                v126 -= 8;
                v127 -= 8;
              }
              while (v127);
              v102 = v124;
              if (v122 != (v122 & 0x7FFFFFFFFFFFFFF8))
              {
LABEL_612:
                do
                {
                  v129 = *((_DWORD *)v102-- - 1);
                  *((_DWORD *)v111-- - 1) = v129;
                }
                while (v102 != v104);
              }
              goto LABEL_150;
            }
            v110 = 0;
            v111 = (float *)(4 * v106);
            *(float *)(4 * v106) = v101;
            v103 = 4 * v106 + 4;
            if (v102 != v104)
              goto LABEL_144;
LABEL_150:
            v468 = v111;
            v469 = (float *)v103;
            v470 = (float *)&v110[4 * v109];
            if (v104)
              operator delete(v104);
LABEL_152:
            v469 = (float *)v103;
            v130 = (float)v87 / (float)v511.u32[1];
            v131 = v466;
            if (v466 < v467)
            {
              *v466 = v130;
              v132 = (uint64_t)(v131 + 1);
              goto LABEL_173;
            }
            v133 = (float *)__p;
            v134 = (char *)v466 - (_BYTE *)__p;
            v135 = ((char *)v466 - (_BYTE *)__p) >> 2;
            v136 = v135 + 1;
            if ((unint64_t)(v135 + 1) >> 62)
              sub_2394189F8();
            v137 = (char *)v467 - (_BYTE *)__p;
            if (((char *)v467 - (_BYTE *)__p) >> 1 > v136)
              v136 = v137 >> 1;
            if ((unint64_t)v137 >= 0x7FFFFFFFFFFFFFFCLL)
              v138 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v138 = v136;
            if (v138)
            {
              if (v138 >> 62)
                sub_239418A80();
              v139 = (char *)operator new(4 * v138);
              v140 = (float *)&v139[4 * v135];
              *v140 = v130;
              v132 = (uint64_t)(v140 + 1);
              if (v131 == v133)
                goto LABEL_171;
LABEL_165:
              v141 = (char *)(v131 - 1) - (char *)v133;
              if (v141 < 0x2C)
                goto LABEL_613;
              if ((unint64_t)((char *)v131 - &v139[v134]) < 0x20)
                goto LABEL_613;
              v142 = (v141 >> 2) + 1;
              v143 = 4 * (v142 & 0x7FFFFFFFFFFFFFF8);
              v144 = &v131[v143 / 0xFFFFFFFFFFFFFFFCLL];
              v140 = (float *)((char *)v140 - v143);
              v145 = &v139[4 * v135 - 16];
              v146 = v131 - 4;
              v147 = v142 & 0x7FFFFFFFFFFFFFF8;
              do
              {
                v148 = *(_OWORD *)v146;
                *((_OWORD *)v145 - 1) = *((_OWORD *)v146 - 1);
                *(_OWORD *)v145 = v148;
                v145 -= 32;
                v146 -= 8;
                v147 -= 8;
              }
              while (v147);
              v131 = v144;
              if (v142 != (v142 & 0x7FFFFFFFFFFFFFF8))
              {
LABEL_613:
                do
                {
                  v149 = *((_DWORD *)v131-- - 1);
                  *((_DWORD *)v140-- - 1) = v149;
                }
                while (v131 != v133);
              }
              goto LABEL_171;
            }
            v139 = 0;
            v140 = (float *)(4 * v135);
            *(float *)(4 * v135) = v130;
            v132 = 4 * v135 + 4;
            if (v131 != v133)
              goto LABEL_165;
LABEL_171:
            __p = v140;
            v466 = (float *)v132;
            v467 = (float *)&v139[4 * v138];
            if (v133)
              operator delete(v133);
LABEL_173:
            v466 = (float *)v132;
            v150 = (v88 - 1);
            v151 = (v87 - 1);
            v152 = v496;
            v153 = HIDWORD(v496);
            v154 = v496 * v150;
            v155 = v500;
            if (!*(_BYTE *)(v500 + (v496 * v150 + HIDWORD(v496) * v151)))
              break;
            if (*(_BYTE *)(v500 + (v154 + HIDWORD(v496) * v90)))
              goto LABEL_175;
LABEL_188:
            v163 = *((_QWORD *)&v471 + 1);
            v164 = (((_QWORD)v472 - *((_QWORD *)&v471 + 1)) << 6) - 1;
            if ((_QWORD)v472 == *((_QWORD *)&v471 + 1))
              v164 = 0;
            v165 = *((_QWORD *)&v473 + 1) + v473;
            if (v164 == *((_QWORD *)&v473 + 1) + (_QWORD)v473)
            {
              sub_239564E50((uint64_t)&v471);
              v163 = *((_QWORD *)&v471 + 1);
              v165 = *((_QWORD *)&v473 + 1) + v473;
            }
            *(_QWORD *)(*(_QWORD *)(v163 + ((v165 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v165 & 0x1FF)) = v150 | (v90 << 32);
            ++*((_QWORD *)&v473 + 1);
            v152 = v496;
            v153 = HIDWORD(v496);
            v155 = v500;
            v156 = (v90 + 1);
            if (!*(_BYTE *)(v500 + (v496 * v150 + HIDWORD(v496) * v156)))
              goto LABEL_193;
LABEL_176:
            v157 = v152 * v89;
            if (*(_BYTE *)(v155 + (v152 * v89 + v153 * v151)))
              goto LABEL_177;
LABEL_198:
            v169 = *((_QWORD *)&v471 + 1);
            v170 = (((_QWORD)v472 - *((_QWORD *)&v471 + 1)) << 6) - 1;
            if ((_QWORD)v472 == *((_QWORD *)&v471 + 1))
              v170 = 0;
            v171 = *((_QWORD *)&v473 + 1) + v473;
            if (v170 == *((_QWORD *)&v473 + 1) + (_QWORD)v473)
            {
              sub_239564E50((uint64_t)&v471);
              v169 = *((_QWORD *)&v471 + 1);
              v171 = *((_QWORD *)&v473 + 1) + v473;
            }
            *(_QWORD *)(*(_QWORD *)(v169 + ((v171 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v171 & 0x1FF)) = v89 | (v151 << 32);
            ++*((_QWORD *)&v473 + 1);
            v152 = v496;
            v153 = HIDWORD(v496);
            v155 = v500;
            if (!*(_BYTE *)(v500 + (v496 * v89 + HIDWORD(v496) * v156)))
              goto LABEL_203;
LABEL_178:
            v158 = (v89 + 1);
            v159 = v152 * v158;
            if (*(_BYTE *)(v155 + (v159 + v153 * v151)))
              goto LABEL_179;
LABEL_208:
            v175 = *((_QWORD *)&v471 + 1);
            v176 = (((_QWORD)v472 - *((_QWORD *)&v471 + 1)) << 6) - 1;
            if ((_QWORD)v472 == *((_QWORD *)&v471 + 1))
              v176 = 0;
            v177 = *((_QWORD *)&v473 + 1) + v473;
            if (v176 == *((_QWORD *)&v473 + 1) + (_QWORD)v473)
            {
              sub_239564E50((uint64_t)&v471);
              v175 = *((_QWORD *)&v471 + 1);
              v177 = *((_QWORD *)&v473 + 1) + v473;
            }
            *(_QWORD *)(*(_QWORD *)(v175 + ((v177 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v177 & 0x1FF)) = v158 | (v151 << 32);
            ++*((_QWORD *)&v473 + 1);
            v153 = HIDWORD(v496);
            v155 = v500;
            v159 = v496 * v158;
            if (!*(_BYTE *)(v500 + (v496 * v158 + HIDWORD(v496) * v90)))
              goto LABEL_213;
LABEL_180:
            if (!*(_BYTE *)(v155 + (v159 + v153 * v156)))
              goto LABEL_218;
LABEL_181:
            v84 = *((_QWORD *)&v473 + 1);
            if (!*((_QWORD *)&v473 + 1))
              goto LABEL_223;
          }
          v160 = *((_QWORD *)&v471 + 1);
          v161 = (((_QWORD)v472 - *((_QWORD *)&v471 + 1)) << 6) - 1;
          if ((_QWORD)v472 == *((_QWORD *)&v471 + 1))
            v161 = 0;
          v162 = *((_QWORD *)&v473 + 1) + v473;
          if (v161 == *((_QWORD *)&v473 + 1) + (_QWORD)v473)
          {
            sub_239564E50((uint64_t)&v471);
            v160 = *((_QWORD *)&v471 + 1);
            v162 = *((_QWORD *)&v473 + 1) + v473;
          }
          *(_QWORD *)(*(_QWORD *)(v160 + ((v162 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v162 & 0x1FF)) = v150 | (v151 << 32);
          ++*((_QWORD *)&v473 + 1);
          v152 = v496;
          v153 = HIDWORD(v496);
          v155 = v500;
          v154 = v496 * v150;
          if (!*(_BYTE *)(v500 + (v496 * v150 + HIDWORD(v496) * v90)))
            goto LABEL_188;
LABEL_175:
          v156 = (v90 + 1);
          if (*(_BYTE *)(v155 + (v154 + v153 * v156)))
            goto LABEL_176;
LABEL_193:
          v166 = *((_QWORD *)&v471 + 1);
          v167 = (((_QWORD)v472 - *((_QWORD *)&v471 + 1)) << 6) - 1;
          if ((_QWORD)v472 == *((_QWORD *)&v471 + 1))
            v167 = 0;
          v168 = *((_QWORD *)&v473 + 1) + v473;
          if (v167 == *((_QWORD *)&v473 + 1) + (_QWORD)v473)
          {
            sub_239564E50((uint64_t)&v471);
            v166 = *((_QWORD *)&v471 + 1);
            v168 = *((_QWORD *)&v473 + 1) + v473;
          }
          *(_QWORD *)(*(_QWORD *)(v166 + ((v168 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v168 & 0x1FF)) = v150 | (v156 << 32);
          ++*((_QWORD *)&v473 + 1);
          v152 = v496;
          v153 = HIDWORD(v496);
          v155 = v500;
          v157 = v496 * v89;
          if (!*(_BYTE *)(v500 + (v496 * v89 + HIDWORD(v496) * v151)))
            goto LABEL_198;
LABEL_177:
          if (*(_BYTE *)(v155 + (v157 + v153 * v156)))
            goto LABEL_178;
LABEL_203:
          v172 = *((_QWORD *)&v471 + 1);
          v173 = (((_QWORD)v472 - *((_QWORD *)&v471 + 1)) << 6) - 1;
          if ((_QWORD)v472 == *((_QWORD *)&v471 + 1))
            v173 = 0;
          v174 = *((_QWORD *)&v473 + 1) + v473;
          if (v173 == *((_QWORD *)&v473 + 1) + (_QWORD)v473)
          {
            sub_239564E50((uint64_t)&v471);
            v172 = *((_QWORD *)&v471 + 1);
            v174 = *((_QWORD *)&v473 + 1) + v473;
          }
          *(_QWORD *)(*(_QWORD *)(v172 + ((v174 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v174 & 0x1FF)) = v89 | (v156 << 32);
          ++*((_QWORD *)&v473 + 1);
          v153 = HIDWORD(v496);
          v155 = v500;
          v158 = (v89 + 1);
          v159 = v496 * v158;
          if (!*(_BYTE *)(v500 + (v496 * v158 + HIDWORD(v496) * v151)))
            goto LABEL_208;
LABEL_179:
          if (*(_BYTE *)(v155 + (v159 + v153 * v90)))
            goto LABEL_180;
LABEL_213:
          v178 = *((_QWORD *)&v471 + 1);
          v179 = (((_QWORD)v472 - *((_QWORD *)&v471 + 1)) << 6) - 1;
          if ((_QWORD)v472 == *((_QWORD *)&v471 + 1))
            v179 = 0;
          v180 = *((_QWORD *)&v473 + 1) + v473;
          if (v179 == *((_QWORD *)&v473 + 1) + (_QWORD)v473)
          {
            sub_239564E50((uint64_t)&v471);
            v178 = *((_QWORD *)&v471 + 1);
            v180 = *((_QWORD *)&v473 + 1) + v473;
          }
          *(_QWORD *)(*(_QWORD *)(v178 + ((v180 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v180 & 0x1FF)) = v158 | (v90 << 32);
          ++*((_QWORD *)&v473 + 1);
          if (*(_BYTE *)(v500 + (v496 * v158 + HIDWORD(v496) * v156)))
            goto LABEL_181;
LABEL_218:
          v181 = *((_QWORD *)&v471 + 1);
          v182 = (((_QWORD)v472 - *((_QWORD *)&v471 + 1)) << 6) - 1;
          if ((_QWORD)v472 == *((_QWORD *)&v471 + 1))
            v182 = 0;
          v183 = *((_QWORD *)&v473 + 1) + v473;
          if (v182 == *((_QWORD *)&v473 + 1) + (_QWORD)v473)
          {
            sub_239564E50((uint64_t)&v471);
            v181 = *((_QWORD *)&v471 + 1);
            v183 = *((_QWORD *)&v473 + 1) + v473;
          }
          *(_QWORD *)(*(_QWORD *)(v181 + ((v183 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v183 & 0x1FF)) = v158 | (v156 << 32);
          v84 = *((_QWORD *)&v473 + 1) + 1;
          *((_QWORD *)&v473 + 1) = v84;
        }
        while (v84);
LABEL_223:
        v184 = (float *)v468;
        if ((unint64_t)((char *)v469 - (_BYTE *)v468) < 0x400)
        {
          v41 = v452;
          v38 = v454;
          v185 = (float *)__p;
          if (__p)
            goto LABEL_225;
          goto LABEL_226;
        }
        v192 = ((char *)v469 - (_BYTE *)v468) >> 2;
        v193 = 0.0;
        v194 = 0.0;
        if (v469 != v468)
        {
          if (v192 <= 1)
            v195 = 1;
          else
            v195 = ((char *)v469 - (_BYTE *)v468) >> 2;
          do
          {
            v196 = *v184++;
            v194 = v194 + v196;
            --v195;
          }
          while (v195);
        }
        v197 = (float *)__p;
        v198 = ((char *)v466 - (_BYTE *)__p) >> 2;
        if (v466 != __p)
        {
          if (v198 <= 1)
            v199 = 1;
          else
            v199 = ((char *)v466 - (_BYTE *)__p) >> 2;
          v193 = 0.0;
          do
          {
            v200 = *v197++;
            v193 = v193 + v200;
            --v199;
          }
          while (v199);
        }
        v201 = v194 / (float)v192;
        v202 = v201 + (float)(-1.0 / (float)v511.u32[0]);
        v203 = v493;
        v38 = v454;
        if (v493 < v494)
        {
          *v493 = v202;
          v204 = (uint64_t)(v203 + 1);
          goto LABEL_277;
        }
        v205 = (float *)v492;
        v206 = (char *)v493 - (_BYTE *)v492;
        v207 = ((char *)v493 - (_BYTE *)v492) >> 2;
        v208 = v207 + 1;
        if ((unint64_t)(v207 + 1) >> 62)
          sub_2394189F8();
        v209 = (char *)v494 - (_BYTE *)v492;
        if (((char *)v494 - (_BYTE *)v492) >> 1 > v208)
          v208 = v209 >> 1;
        if ((unint64_t)v209 >= 0x7FFFFFFFFFFFFFFCLL)
          v210 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v210 = v208;
        if (v210)
        {
          if (v210 >> 62)
            sub_239418A80();
          v211 = (char *)operator new(4 * v210);
          v212 = (float *)&v211[4 * v207];
          *v212 = v202;
          v204 = (uint64_t)(v212 + 1);
          if (v203 == v205)
            goto LABEL_275;
LABEL_269:
          v213 = (char *)(v203 - 1) - (char *)v205;
          if (v213 < 0x2C)
            goto LABEL_614;
          if ((unint64_t)((char *)v203 - &v211[v206]) < 0x20)
            goto LABEL_614;
          v214 = (v213 >> 2) + 1;
          v215 = 4 * (v214 & 0x7FFFFFFFFFFFFFF8);
          v216 = &v203[v215 / 0xFFFFFFFFFFFFFFFCLL];
          v212 = (float *)((char *)v212 - v215);
          v217 = &v211[4 * v207 - 16];
          v218 = v203 - 4;
          v219 = v214 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v220 = *(_OWORD *)v218;
            *((_OWORD *)v217 - 1) = *((_OWORD *)v218 - 1);
            *(_OWORD *)v217 = v220;
            v217 -= 32;
            v218 -= 8;
            v219 -= 8;
          }
          while (v219);
          v203 = v216;
          if (v214 != (v214 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_614:
            do
            {
              v221 = *((_DWORD *)v203-- - 1);
              *((_DWORD *)v212-- - 1) = v221;
            }
            while (v203 != v205);
          }
        }
        else
        {
          v211 = 0;
          v212 = (float *)(4 * v207);
          *(float *)(4 * v207) = v202;
          v204 = 4 * v207 + 4;
          if (v203 != v205)
            goto LABEL_269;
        }
LABEL_275:
        v492 = v212;
        v493 = (float *)v204;
        v494 = (float *)&v211[4 * v210];
        if (v205)
          operator delete(v205);
LABEL_277:
        v222 = v193 / (float)v198;
        v493 = (float *)v204;
        v223 = v222 + (float)(-1.0 / (float)v511.u32[1]);
        v224 = v490;
        if (v490 < v491)
        {
          *v490 = v223;
          v225 = (uint64_t)(v224 + 1);
          goto LABEL_298;
        }
        v226 = (float *)v489;
        v227 = (char *)v490 - (_BYTE *)v489;
        v228 = ((char *)v490 - (_BYTE *)v489) >> 2;
        v229 = v228 + 1;
        if ((unint64_t)(v228 + 1) >> 62)
          sub_2394189F8();
        v230 = (char *)v491 - (_BYTE *)v489;
        if (((char *)v491 - (_BYTE *)v489) >> 1 > v229)
          v229 = v230 >> 1;
        if ((unint64_t)v230 >= 0x7FFFFFFFFFFFFFFCLL)
          v231 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v231 = v229;
        if (v231)
        {
          if (v231 >> 62)
            sub_239418A80();
          v232 = (char *)operator new(4 * v231);
          v233 = (float *)&v232[4 * v228];
          *v233 = v223;
          v225 = (uint64_t)(v233 + 1);
          if (v224 == v226)
            goto LABEL_296;
LABEL_290:
          v234 = (char *)(v224 - 1) - (char *)v226;
          if (v234 < 0x2C)
            goto LABEL_615;
          if ((unint64_t)((char *)v224 - &v232[v227]) < 0x20)
            goto LABEL_615;
          v235 = (v234 >> 2) + 1;
          v236 = 4 * (v235 & 0x7FFFFFFFFFFFFFF8);
          v237 = &v224[v236 / 0xFFFFFFFFFFFFFFFCLL];
          v233 = (float *)((char *)v233 - v236);
          v238 = &v232[4 * v228 - 16];
          v239 = v224 - 4;
          v240 = v235 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v241 = *(_OWORD *)v239;
            *((_OWORD *)v238 - 1) = *((_OWORD *)v239 - 1);
            *(_OWORD *)v238 = v241;
            v238 -= 32;
            v239 -= 8;
            v240 -= 8;
          }
          while (v240);
          v224 = v237;
          if (v235 != (v235 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_615:
            do
            {
              v242 = *((_DWORD *)v224-- - 1);
              *((_DWORD *)v233-- - 1) = v242;
            }
            while (v224 != v226);
          }
        }
        else
        {
          v232 = 0;
          v233 = (float *)(4 * v228);
          *(float *)(4 * v228) = v223;
          v225 = 4 * v228 + 4;
          if (v224 != v226)
            goto LABEL_290;
        }
LABEL_296:
        v489 = v233;
        v490 = (float *)v225;
        v491 = (float *)&v232[4 * v231];
        if (v226)
          operator delete(v226);
LABEL_298:
        v490 = (float *)v225;
        v243 = (char *)v477;
        v244 = v478;
        if (v478 != v477)
        {
          v245 = 0;
          v246 = v478;
          while (2)
          {
            v249 = &v243[8 * v245];
            v250 = *(unsigned int *)v249;
            v251 = *((unsigned int *)v249 + 1);
            v252 = v506 * v251;
            v253 = v506 + v506 * v251;
            v254 = v505 * v250;
            if (*(char *)(v504[0] + (v253 + v505 * v250)) < 0)
            {
              v255 = v506 * (v251 - 1);
              if (*(char *)(v504[0] + (v255 + v254)) < 0)
              {
                v256 = v505 + v254;
                if (*(char *)(v504[0] + (v252 + v256)) < 0
                  && *(char *)(v504[0] + (v253 + v256)) < 0
                  && *(char *)(v504[0] + (v255 + v256)) < 0)
                {
                  v257 = v505 * (v250 - 1);
                  if (*(char *)(v504[0] + (v252 + v257)) < 0
                    && *(char *)(v504[0] + (v253 + v257)) < 0
                    && *(char *)(v504[0] + (v255 + v257)) < 0)
                  {
                    goto LABEL_302;
                  }
                }
              }
            }
            v258 = v250 | (v251 << 32);
            v259 = v475;
            if (v475 < v476)
            {
              *(_QWORD *)v475 = v258;
              v247 = (uint64_t)(v259 + 8);
              goto LABEL_301;
            }
            v260 = v474;
            v261 = (char *)v475 - (_BYTE *)v474;
            v262 = ((char *)v475 - (_BYTE *)v474) >> 3;
            v263 = v262 + 1;
            if ((unint64_t)(v262 + 1) >> 61)
              sub_2394189F8();
            v264 = (char *)v476 - (_BYTE *)v474;
            if (((char *)v476 - (_BYTE *)v474) >> 2 > v263)
              v263 = v264 >> 2;
            if ((unint64_t)v264 >= 0x7FFFFFFFFFFFFFF8)
              v265 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v265 = v263;
            if (v265)
            {
              if (v265 >> 61)
                sub_239418A80();
              v266 = operator new(8 * v265);
              v267 = (uint64_t *)&v266[8 * v262];
              *v267 = v258;
              v247 = (uint64_t)(v267 + 1);
              if (v259 == v260)
              {
LABEL_321:
                v474 = v267;
                v475 = (float *)v247;
                v476 = (float *)&v266[8 * v265];
                if (!v259)
                  goto LABEL_301;
                break;
              }
            }
            else
            {
              v266 = 0;
              v267 = (uint64_t *)(8 * v262);
              *(_QWORD *)(8 * v262) = v258;
              v247 = 8 * v262 + 8;
              if (v259 == v260)
                goto LABEL_321;
            }
            v268 = v259 - 8 - v260;
            if (v268 < 0x58)
              goto LABEL_616;
            if ((unint64_t)(v259 - &v266[v261]) < 0x20)
              goto LABEL_616;
            v269 = (v268 >> 3) + 1;
            v270 = 8 * (v269 & 0x3FFFFFFFFFFFFFFCLL);
            v271 = &v259[-v270];
            v267 = (uint64_t *)((char *)v267 - v270);
            v272 = &v266[8 * v262 - 16];
            v273 = (__int128 *)(v259 - 16);
            v274 = v269 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v275 = *v273;
              *(v272 - 1) = *(v273 - 1);
              *v272 = v275;
              v272 -= 2;
              v273 -= 2;
              v274 -= 4;
            }
            while (v274);
            v259 = v271;
            if (v269 != (v269 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_616:
              do
              {
                v276 = *((_QWORD *)v259 - 1);
                v259 -= 8;
                *--v267 = v276;
              }
              while (v259 != v260);
            }
            v259 = v474;
            v474 = v267;
            v475 = (float *)v247;
            v476 = (float *)&v266[8 * v265];
            if (!v259)
            {
LABEL_301:
              v475 = (float *)v247;
              v243 = (char *)v477;
              v246 = v478;
LABEL_302:
              ++v245;
              v248 = (v246 - v243) >> 3;
              if (v245 >= v248)
              {
                v244 = v243;
                v278 = v474;
                v277 = (char *)v475;
                v279 = v450;
                v41 = v452;
                if (v450 < v248)
                  goto LABEL_333;
LABEL_369:
                v248 = v279;
                v222 = v35;
                v201 = v37;
                goto LABEL_372;
              }
              continue;
            }
            break;
          }
          operator delete(v259);
          goto LABEL_301;
        }
        v248 = (v478 - (_BYTE *)v477) >> 3;
        v246 = v478;
        v278 = v474;
        v277 = (char *)v475;
        v279 = v450;
        v41 = v452;
        if (v450 >= v248)
          goto LABEL_369;
LABEL_333:
        v280 = (char *)v480;
        v481 = v480;
        v281 = v277 - v278;
        v29 = v281 == 0;
        v282 = v281 >> 3;
        v445 = v282;
        if (!v29)
        {
          v283 = 0;
          if (v282 <= 1)
            v284 = 1;
          else
            v284 = v282;
          while (1)
          {
            while (1)
            {
              v285 = v474;
              if (v280 >= v482)
                break;
              *(_QWORD *)v280 = *((_QWORD *)v474 + v283);
              v280 += 8;
              v481 = v280;
              if (++v283 == v284)
                goto LABEL_370;
            }
            v286 = (char *)v480;
            v287 = v280 - (_BYTE *)v480;
            v288 = (v280 - (_BYTE *)v480) >> 3;
            v289 = v288 + 1;
            if ((unint64_t)(v288 + 1) >> 61)
              sub_2394189F8();
            v290 = v482 - (_BYTE *)v480;
            if ((v482 - (_BYTE *)v480) >> 2 > v289)
              v289 = v290 >> 2;
            if ((unint64_t)v290 >= 0x7FFFFFFFFFFFFFF8)
              v291 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v291 = v289;
            if (v291)
            {
              if (v291 >> 61)
                sub_239418A80();
              v292 = operator new(8 * v291);
              v293 = &v292[8 * v288];
              *v293 = v285[v283];
              v294 = (uint64_t)(v293 + 1);
              if (v280 != v286)
              {
LABEL_353:
                v295 = v280 - 8 - v286;
                if (v295 < 0x168)
                {
                  v296 = v280;
                  goto LABEL_355;
                }
                if (&v292[v287 - 8 - (v295 & 0xFFFFFFFFFFFFFFF8)] > &v292[v287 - 8])
                {
                  v296 = v280;
                  goto LABEL_355;
                }
                if (&v280[-(v295 & 0xFFFFFFFFFFFFFFF8) - 8] > v280 - 8)
                {
                  v296 = v280;
                  goto LABEL_355;
                }
                if ((unint64_t)(v280 - &v292[v287]) < 0x20)
                {
                  v296 = v280;
                  goto LABEL_355;
                }
                v298 = (v295 >> 3) + 1;
                v299 = 8 * (v298 & 0x3FFFFFFFFFFFFFFCLL);
                v296 = &v280[-v299];
                v293 = (_QWORD *)((char *)v293 - v299);
                v300 = &v292[8 * v288 - 16];
                v301 = (__int128 *)(v280 - 16);
                v302 = v298 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  v303 = *v301;
                  *(v300 - 1) = *(v301 - 1);
                  *v300 = v303;
                  v300 -= 2;
                  v301 -= 2;
                  v302 -= 4;
                }
                while (v302);
                if (v298 != (v298 & 0x3FFFFFFFFFFFFFFCLL))
                {
                  do
                  {
LABEL_355:
                    v297 = *((_QWORD *)v296 - 1);
                    v296 -= 8;
                    *--v293 = v297;
                  }
                  while (v296 != v286);
                }
                v280 = (char *)v480;
                v480 = v293;
                v481 = (_BYTE *)v294;
                v482 = &v292[8 * v291];
                if (!v280)
                  goto LABEL_350;
LABEL_349:
                operator delete(v280);
                goto LABEL_350;
              }
            }
            else
            {
              v292 = 0;
              v293 = (_QWORD *)(8 * v288);
              *(_QWORD *)(8 * v288) = *((_QWORD *)v474 + v283);
              v294 = 8 * v288 + 8;
              if (v280 != v286)
                goto LABEL_353;
            }
            v480 = v293;
            v481 = (_BYTE *)v294;
            v482 = &v292[8 * v291];
            if (v280)
              goto LABEL_349;
LABEL_350:
            v38 = v454;
            v481 = (_BYTE *)v294;
            ++v283;
            v280 = (char *)v294;
            if (v283 == v284)
            {
LABEL_370:
              v244 = v477;
              v246 = v478;
              v278 = v474;
              v277 = (char *)v475;
              v41 = v452;
              goto LABEL_372;
            }
          }
        }
        v278 = v277;
LABEL_372:
        v450 = v248;
        ++v451;
        v35 = v222;
        v37 = v201;
        v448 += (v246 - v244) >> 3;
        v449 += (v277 - v278) >> 3;
        v185 = (float *)__p;
        if (__p)
        {
LABEL_225:
          v466 = v185;
          operator delete(v185);
        }
LABEL_226:
        if (v468)
        {
          v469 = (float *)v468;
          operator delete(v468);
        }
        v187 = (void **)*((_QWORD *)&v471 + 1);
        v186 = (void **)v472;
        *((_QWORD *)&v473 + 1) = 0;
        v188 = v472 - *((_QWORD *)&v471 + 1);
        if ((_QWORD)v472 - *((_QWORD *)&v471 + 1) >= 0x11uLL)
        {
          do
          {
            operator delete(*v187);
            v186 = (void **)v472;
            v187 = (void **)(*((_QWORD *)&v471 + 1) + 8);
            *((_QWORD *)&v471 + 1) = v187;
            v188 = v472 - (_QWORD)v187;
          }
          while ((_QWORD)v472 - (_QWORD)v187 > 0x10uLL);
        }
        v189 = v188 >> 3;
        if (v189 == 1)
        {
          v190 = 256;
LABEL_234:
          *(_QWORD *)&v473 = v190;
        }
        else if (v189 == 2)
        {
          v190 = 512;
          goto LABEL_234;
        }
        if (v187 != v186)
        {
          do
          {
            v191 = *v187++;
            operator delete(v191);
          }
          while (v187 != v186);
          if ((_QWORD)v472 != *((_QWORD *)&v471 + 1))
            *(_QWORD *)&v472 = v472 + ((*((_QWORD *)&v471 + 1) - v472 + 7) & 0xFFFFFFFFFFFFFFF8);
        }
        if ((_QWORD)v471)
          operator delete((void *)v471);
        if (v474)
        {
          v475 = (float *)v474;
          operator delete(v474);
        }
        if (v477)
        {
          v478 = (char *)v477;
          operator delete(v477);
        }
LABEL_53:
        v36 = v511.i32[1];
        v39 = v41++ < v511.i32[1];
        if (!v39)
          goto LABEL_49;
      }
      if (v51 >> 62)
        sub_239418A80();
      v52 = (char *)operator new(4 * v51);
      v44 = v41;
      v53 = (float *)&v52[4 * v48];
      *v53 = v42;
      v45 = (uint64_t)(v53 + 1);
      if (v43 == v46)
        goto LABEL_75;
LABEL_69:
      v54 = (char *)(v43 - 1) - (char *)v46;
      if (v54 < 0x2C)
        goto LABEL_617;
      if ((unint64_t)((char *)v43 - &v52[v47]) < 0x20)
        goto LABEL_617;
      v55 = (v54 >> 2) + 1;
      v56 = 4 * (v55 & 0x7FFFFFFFFFFFFFF8);
      v57 = &v43[v56 / 0xFFFFFFFFFFFFFFFCLL];
      v53 = (float *)((char *)v53 - v56);
      v58 = &v52[4 * v48 - 16];
      v59 = v43 - 4;
      v60 = v55 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v61 = *(_OWORD *)v59;
        *((_OWORD *)v58 - 1) = *((_OWORD *)v59 - 1);
        *(_OWORD *)v58 = v61;
        v58 -= 32;
        v59 -= 8;
        v60 -= 8;
      }
      while (v60);
      v43 = v57;
      if (v55 != (v55 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_617:
        do
        {
          v62 = *((_DWORD *)v43-- - 1);
          *((_DWORD *)v53-- - 1) = v62;
        }
        while (v43 != v46);
      }
      goto LABEL_75;
    }
  }
  v450 = 0;
  v451 = 0;
  v448 = 0;
  v449 = 0;
  v445 = 0;
  v37 = 0.0;
LABEL_375:
  v304 = 0;
  v305 = 0;
  v306 = 0;
  v307 = 0;
  v444 = (float)((float)v443 * v12);
  v441 = (float)((float)v447 * v12);
  v471 = 0uLL;
  *(_QWORD *)&v472 = 0;
  do
  {
    while (1)
    {
      v308 = (double)v307 * 0.0174532925;
      if (v306 >= v305)
        break;
      *v306++ = v308;
      *((_QWORD *)&v471 + 1) = v306;
      if (++v307 == 180)
        goto LABEL_406;
    }
    v309 = v306 - v304;
    v310 = v309 + 1;
    if ((unint64_t)(v309 + 1) >> 62)
      sub_2394189F8();
    if (((char *)v305 - (char *)v304) >> 1 > v310)
      v310 = ((char *)v305 - (char *)v304) >> 1;
    if ((unint64_t)((char *)v305 - (char *)v304) >= 0x7FFFFFFFFFFFFFFCLL)
      v311 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v311 = v310;
    if (v311)
    {
      if (v311 >> 62)
        sub_239418A80();
      v312 = operator new(4 * v311);
      v313 = (float *)&v312[4 * v309];
      *v313 = v308;
      v314 = (uint64_t)(v313 + 1);
      if (v306 == v304)
        goto LABEL_392;
    }
    else
    {
      v312 = 0;
      v313 = (float *)(4 * v309);
      *(float *)(4 * v309) = v308;
      v314 = 4 * v309 + 4;
      if (v306 == v304)
        goto LABEL_392;
    }
    v315 = (char *)(v306 - 1) - (char *)v304;
    if (v315 < 0xBC)
    {
      v316 = v306;
      goto LABEL_391;
    }
    if (&v312[(char *)v306 - (char *)v304 - 4 - (v315 & 0xFFFFFFFFFFFFFFFCLL)] > &v312[(char *)v306 - (char *)v304 - 4])
    {
      v316 = v306;
      do
      {
LABEL_391:
        v317 = *((_DWORD *)v316-- - 1);
        *((_DWORD *)v313-- - 1) = v317;
      }
      while (v316 != v304);
      goto LABEL_392;
    }
    if ((float *)((char *)v306 - (v315 & 0xFFFFFFFFFFFFFFFCLL) - 4) > v306 - 1)
    {
      v316 = v306;
      goto LABEL_391;
    }
    if ((unint64_t)((char *)v304 - v312) < 0x20)
    {
      v316 = v306;
      goto LABEL_391;
    }
    v318 = (v315 >> 2) + 1;
    v319 = 4 * (v318 & 0x7FFFFFFFFFFFFFF8);
    v316 = &v306[v319 / 0xFFFFFFFFFFFFFFFCLL];
    v313 = (float *)((char *)v313 - v319);
    v320 = &v312[4 * v309 - 16];
    v321 = v306 - 4;
    v322 = v318 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v323 = *(_OWORD *)v321;
      *(v320 - 1) = *((_OWORD *)v321 - 1);
      *v320 = v323;
      v320 -= 2;
      v321 -= 8;
      v322 -= 8;
    }
    while (v322);
    if (v318 != (v318 & 0x7FFFFFFFFFFFFFF8))
      goto LABEL_391;
LABEL_392:
    v305 = (float *)&v312[4 * v311];
    *(_QWORD *)&v471 = v313;
    *((_QWORD *)&v471 + 1) = v314;
    *(_QWORD *)&v472 = v305;
    if (v304)
      operator delete(v304);
    v304 = v313;
    v306 = (float *)v314;
    *((_QWORD *)&v471 + 1) = v314;
    ++v307;
  }
  while (v307 != 180);
LABEL_406:
  v324 = 0.0;
  v325 = 0.0;
  v326 = ((char *)v487 - (_BYTE *)v486) >> 2;
  v327 = v446;
  if (v487 != v486)
  {
    if (v326 <= 1)
      v328 = 1;
    else
      v328 = ((char *)v487 - (_BYTE *)v486) >> 2;
    if (v328 < 2)
    {
      v329 = 0;
      goto LABEL_418;
    }
    v329 = v328 & 0xFFFFFFFFFFFFFFFELL;
    v331 = (float *)((char *)v486 + 4);
    v332 = v328 & 0xFFFFFFFFFFFFFFFELL;
    do
    {
      v325 = (float)(v325 + *(v331 - 1)) + *v331;
      v331 += 2;
      v332 -= 2;
    }
    while (v332);
    if (v328 != v329)
    {
LABEL_418:
      v333 = v328 - v329;
      v334 = (float *)((char *)v486 + 4 * v329);
      do
      {
        v335 = *v334++;
        v325 = v325 + v335;
        --v333;
      }
      while (v333);
    }
  }
  v336 = ((char *)v484 - (_BYTE *)v483) >> 2;
  if (v484 != v483)
  {
    if (v336 <= 1)
      v337 = 1;
    else
      v337 = ((char *)v484 - (_BYTE *)v483) >> 2;
    if (v337 < 2)
    {
      v338 = 0;
      v324 = 0.0;
      goto LABEL_429;
    }
    v338 = v337 & 0xFFFFFFFFFFFFFFFELL;
    v339 = (float *)((char *)v483 + 4);
    v324 = 0.0;
    v340 = v337 & 0xFFFFFFFFFFFFFFFELL;
    do
    {
      v324 = (float)(v324 + *(v339 - 1)) + *v339;
      v339 += 2;
      v340 -= 2;
    }
    while (v340);
    if (v337 != v338)
    {
LABEL_429:
      v341 = v337 - v338;
      v342 = (float *)((char *)v483 + 4 * v338);
      do
      {
        v343 = *v342++;
        v324 = v324 + v343;
        --v341;
      }
      while (v341);
    }
  }
  v344 = 0.0;
  v345 = 0.0;
  v346 = ((char *)v493 - (_BYTE *)v492) >> 2;
  if (v493 != v492)
  {
    if (v346 <= 1)
      v347 = 1;
    else
      v347 = ((char *)v493 - (_BYTE *)v492) >> 2;
    if (v347 < 2)
    {
      v348 = 0;
      goto LABEL_440;
    }
    v348 = v347 & 0xFFFFFFFFFFFFFFFELL;
    v349 = (float *)((char *)v492 + 4);
    v350 = v347 & 0xFFFFFFFFFFFFFFFELL;
    do
    {
      v345 = (float)(v345 + *(v349 - 1)) + *v349;
      v349 += 2;
      v350 -= 2;
    }
    while (v350);
    if (v347 != v348)
    {
LABEL_440:
      v351 = v347 - v348;
      v352 = (float *)((char *)v492 + 4 * v348);
      do
      {
        v353 = *v352++;
        v345 = v345 + v353;
        --v351;
      }
      while (v351);
    }
  }
  v354 = v324 / (float)v336;
  v355 = ((char *)v490 - (_BYTE *)v489) >> 2;
  if (v490 != v489)
  {
    if (v355 <= 1)
      v356 = 1;
    else
      v356 = ((char *)v490 - (_BYTE *)v489) >> 2;
    if (v356 < 2)
    {
      v357 = 0;
      v344 = 0.0;
      goto LABEL_451;
    }
    v357 = v356 & 0xFFFFFFFFFFFFFFFELL;
    v358 = (float *)((char *)v489 + 4);
    v344 = 0.0;
    v359 = v356 & 0xFFFFFFFFFFFFFFFELL;
    do
    {
      v344 = (float)(v344 + *(v358 - 1)) + *v358;
      v358 += 2;
      v359 -= 2;
    }
    while (v359);
    if (v356 != v357)
    {
LABEL_451:
      v360 = v356 - v357;
      v361 = (float *)((char *)v489 + 4 * v357);
      do
      {
        v362 = *v361++;
        v344 = v344 + v362;
        --v360;
      }
      while (v360);
    }
  }
  if (v354 < 0.000001 || v493 == v492)
  {
    v364 = 0.0;
    v365 = 1.0;
    v306 = (float *)v471;
    if (!(_QWORD)v471)
      goto LABEL_561;
    goto LABEL_560;
  }
  v365 = sqrtf((float)((float)((float)(v344 / (float)v355) - v354) * (float)((float)(v344 / (float)v355) - v354))+ (float)((float)((float)(v345 / (float)v346) - (float)(v325 / (float)v326))* (float)((float)(v345 / (float)v346) - (float)(v325 / (float)v326))));
  if (v306 == (float *)v471)
  {
    v364 = 0.0;
    goto LABEL_560;
  }
  v440 = v365;
  v366 = 0;
  v367 = (float)(int)(float)(v37 * (float)v511.u32[0]);
  v368 = (float)(int)(float)(v35 * (float)v511.u32[0]);
  v369 = 0.0;
  v306 = (float *)v471;
  v370 = 0.0;
  while (2)
  {
    v371 = __sincosf_stret(v306[v366]);
    v477 = 0;
    v478 = 0;
    v479 = 0;
    v474 = 0;
    v475 = 0;
    v476 = 0;
    v372 = (char *)v480;
    if (v481 == v480)
    {
      v374 = 0;
      v418 = 3.4028e38;
      v419 = -3.4028e38;
      v421 = (float *)v477;
      goto LABEL_534;
    }
    v453 = v366;
    v373 = 0;
    v374 = 0;
    v375 = 0;
    v376 = 0;
    v377 = 0;
    v378 = 0;
    while (2)
    {
      v379 = (int *)&v372[8 * v378];
      v380 = (float)*v379 - v367;
      v381 = (float)v379[1] - v368;
      v382 = (float)(v381 * (float)-v371.__sinval) + (float)(v371.__cosval * v380);
      if (v377 >= v376)
      {
        v384 = v377 - v375;
        v385 = v384 + 1;
        if ((unint64_t)(v384 + 1) >> 62)
          sub_2394189F8();
        if (((char *)v376 - (char *)v375) >> 1 > v385)
          v385 = ((char *)v376 - (char *)v375) >> 1;
        if ((unint64_t)((char *)v376 - (char *)v375) >= 0x7FFFFFFFFFFFFFFCLL)
          v386 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v386 = v385;
        if (v386)
        {
          if (v386 >> 62)
            sub_239418A80();
          v387 = operator new(4 * v386);
          v388 = (float *)&v387[4 * v384];
          *v388 = v382;
          v389 = (uint64_t)(v388 + 1);
          if (v377 == v375)
          {
LABEL_484:
            v376 = (float *)&v387[4 * v386];
            v477 = v388;
            v478 = (char *)v389;
            v479 = v376;
            if (v375)
            {
              operator delete(v375);
              v374 = v475;
              v373 = v476;
            }
            v375 = v388;
            v377 = (float *)v389;
            v478 = (char *)v389;
            v383 = (float)(v371.__cosval * v381) + (float)(v371.__sinval * v380);
            if (v374 < v373)
              goto LABEL_465;
LABEL_487:
            v393 = (float *)v474;
            v394 = (char *)v374 - (_BYTE *)v474;
            v395 = ((char *)v374 - (_BYTE *)v474) >> 2;
            v396 = v395 + 1;
            if ((unint64_t)(v395 + 1) >> 62)
              sub_2394189F8();
            if (((char *)v373 - (_BYTE *)v474) >> 1 > v396)
              v396 = ((char *)v373 - (_BYTE *)v474) >> 1;
            if ((unint64_t)((char *)v373 - (_BYTE *)v474) >= 0x7FFFFFFFFFFFFFFCLL)
              v397 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v397 = v396;
            if (v397)
            {
              if (v397 >> 62)
                sub_239418A80();
              v398 = operator new(4 * v397);
              v399 = (float *)&v398[4 * v395];
              *v399 = v383;
              v400 = (uint64_t)(v399 + 1);
              if (v374 == v393)
                goto LABEL_501;
            }
            else
            {
              v398 = 0;
              v399 = (float *)(4 * v395);
              *(float *)(4 * v395) = v383;
              v400 = 4 * v395 + 4;
              if (v374 == v393)
                goto LABEL_501;
            }
            v401 = (char *)(v374 - 1) - (char *)v393;
            if (v401 >= 0xBC)
            {
              if (&v398[v394 - 4 - (v401 & 0xFFFFFFFFFFFFFFFCLL)] > &v398[v394 - 4])
              {
                v402 = v374;
              }
              else if ((float *)((char *)v374 - (v401 & 0xFFFFFFFFFFFFFFFCLL) - 4) > v374 - 1)
              {
                v402 = v374;
              }
              else if ((unint64_t)((char *)v374 - v398 - v394) >= 0x20)
              {
                v410 = (v401 >> 2) + 1;
                v411 = 4 * (v410 & 0x7FFFFFFFFFFFFFF8);
                v402 = &v374[v411 / 0xFFFFFFFFFFFFFFFCLL];
                v399 = (float *)((char *)v399 - v411);
                v412 = &v398[4 * v395 - 16];
                v413 = v374 - 4;
                v414 = v410 & 0x7FFFFFFFFFFFFFF8;
                do
                {
                  v415 = *(_OWORD *)v413;
                  *(v412 - 1) = *((_OWORD *)v413 - 1);
                  *v412 = v415;
                  v412 -= 2;
                  v413 -= 8;
                  v414 -= 8;
                }
                while (v414);
                if (v410 == (v410 & 0x7FFFFFFFFFFFFFF8))
                  goto LABEL_501;
              }
              else
              {
                v402 = v374;
              }
            }
            else
            {
              v402 = v374;
            }
            do
            {
              v403 = *((_DWORD *)v402-- - 1);
              *((_DWORD *)v399-- - 1) = v403;
            }
            while (v402 != v393);
LABEL_501:
            v373 = (float *)&v398[4 * v397];
            v474 = v399;
            v476 = v373;
            if (v393)
              operator delete(v393);
            v374 = (float *)v400;
            goto LABEL_466;
          }
        }
        else
        {
          v387 = 0;
          v388 = (float *)(4 * v384);
          *(float *)(4 * v384) = v382;
          v389 = 4 * v384 + 4;
          if (v377 == v375)
            goto LABEL_484;
        }
        v390 = (char *)(v377 - 1) - (char *)v375;
        if (v390 >= 0xBC)
        {
          if (&v387[(char *)v377 - (char *)v375 - 4 - (v390 & 0xFFFFFFFFFFFFFFFCLL)] > &v387[(char *)v377
                                                                                            - (char *)v375
                                                                                            - 4])
          {
            v391 = v377;
          }
          else if ((float *)((char *)v377 - (v390 & 0xFFFFFFFFFFFFFFFCLL) - 4) > v377 - 1)
          {
            v391 = v377;
          }
          else if ((unint64_t)((char *)v375 - v387) >= 0x20)
          {
            v404 = (v390 >> 2) + 1;
            v405 = 4 * (v404 & 0x7FFFFFFFFFFFFFF8);
            v391 = &v377[v405 / 0xFFFFFFFFFFFFFFFCLL];
            v388 = (float *)((char *)v388 - v405);
            v406 = &v387[4 * v384 - 16];
            v407 = v377 - 4;
            v408 = v404 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v409 = *(_OWORD *)v407;
              *(v406 - 1) = *((_OWORD *)v407 - 1);
              *v406 = v409;
              v406 -= 2;
              v407 -= 8;
              v408 -= 8;
            }
            while (v408);
            if (v404 == (v404 & 0x7FFFFFFFFFFFFFF8))
              goto LABEL_484;
          }
          else
          {
            v391 = v377;
          }
        }
        else
        {
          v391 = v377;
        }
        do
        {
          v392 = *((_DWORD *)v391-- - 1);
          *((_DWORD *)v388-- - 1) = v392;
        }
        while (v391 != v375);
        goto LABEL_484;
      }
      *v377++ = v382;
      v478 = (char *)v377;
      v383 = (float)(v371.__cosval * v381) + (float)(v371.__sinval * v380);
      if (v374 >= v373)
        goto LABEL_487;
LABEL_465:
      *v374++ = v383;
LABEL_466:
      v475 = v374;
      ++v378;
      v372 = (char *)v480;
      if (v378 < (v481 - (_BYTE *)v480) >> 3)
        continue;
      break;
    }
    if (v374 == v474)
    {
      v418 = 3.4028e38;
      v419 = -3.4028e38;
      v327 = v446;
      v366 = v453;
      v421 = (float *)v477;
      v422 = v478 - (_BYTE *)v477;
      if (v478 == v477)
        goto LABEL_534;
    }
    else
    {
      v416 = 0;
      v417 = ((char *)v374 - (_BYTE *)v474) >> 2;
      if (v417 <= 1)
        v417 = 1;
      v418 = 3.4028e38;
      v419 = -3.4028e38;
      v327 = v446;
      v366 = v453;
      do
      {
        v420 = *((float *)v474 + v416);
        if (v419 < v420)
          v419 = *((float *)v474 + v416);
        if (v420 < v418)
          v418 = *((float *)v474 + v416);
        ++v416;
      }
      while (v417 != v416);
      v374 = (float *)v474;
      v421 = (float *)v477;
      v422 = v478 - (_BYTE *)v477;
      if (v478 == v477)
      {
LABEL_534:
        v423 = -INFINITY;
        goto LABEL_546;
      }
    }
    v424 = v422 >> 2;
    if (v424 <= 1)
      v424 = 1;
    v425 = 3.4028e38;
    v426 = -3.4028e38;
    v427 = v421;
    do
    {
      v428 = *v427++;
      v429 = v428;
      if (v426 < v428)
        v426 = v429;
      if (v429 < v425)
        v425 = v429;
      --v424;
    }
    while (v424);
    v423 = v426 - v425;
LABEL_546:
    v430 = v419 - v418;
    if (v423 >= v430)
      v431 = v423;
    else
      v431 = v430;
    if (v430 >= v423)
      v430 = v423;
    if (v431 > v370)
    {
      v370 = v431;
      v369 = v430;
    }
    if (v374)
      operator delete(v374);
    if (v421)
      operator delete(v421);
    ++v366;
    v306 = (float *)v471;
    if (v366 < (uint64_t)(*((_QWORD *)&v471 + 1) - v471) >> 2)
      continue;
    break;
  }
  v364 = v369 / (v370 + 0.000001);
  v365 = v440;
  if ((_QWORD)v471)
  {
LABEL_560:
    *((_QWORD *)&v471 + 1) = v306;
    operator delete(v306);
  }
LABEL_561:
  if (v480)
  {
    v481 = v480;
    operator delete(v480);
  }
  if (v483)
    operator delete(v483);
  if (v486)
    operator delete(v486);
  if (v489)
  {
    v490 = (float *)v489;
    operator delete(v489);
  }
  if (v492)
  {
    v493 = (float *)v492;
    operator delete(v492);
  }
  sub_239916980((uint64_t)&v499);
  sub_239416DA0((uint64_t)&v502);
  nullsub_4(&v501);
  sub_239416DA0((uint64_t)v508);
  nullsub_4(&v507);
  if (v451)
  {
    v432 = (double)(v444 * v441) + 0.000001;
    v433 = (float)v450 / v432;
    *(float *)(*v327[10] + 4 * v442) = v433;
    v434 = (double)v448 / v432;
    *(float *)(*v327[11] + 4 * v442) = v434;
    v435 = (double)(2 * (v444 + v441)) + 0.000001;
    v436 = (double)v445 / v435;
    *(float *)(*v327[12] + 4 * v442) = v436;
    v437 = (double)v449 / v435;
  }
  else
  {
    ++*v327[7];
    *(_DWORD *)(*v327[10] + 4 * v442) = 1065353216;
    *(_DWORD *)(*v327[11] + 4 * v442) = 1065353216;
    *(_DWORD *)(*v327[12] + 4 * v442) = 1065353216;
    v437 = 1.0;
    v364 = 1.0;
    v365 = 1.0;
  }
  *(float *)(*v327[13] + 4 * v442) = v437;
  *(float *)(*v327[8] + 4 * v442) = v364;
  *(float *)(*v327[9] + 4 * v442) = v365;
  sub_239416DA0((uint64_t)v456);
  nullsub_4(&v455);
  sub_2396FD3E8((uint64_t)v460);
  v330 = v462;
  if (!v462)
    goto LABEL_578;
LABEL_575:
  v438 = (unint64_t *)&v330->__shared_owners_;
  do
    v439 = __ldaxr(v438);
  while (__stlxr(v439 - 1, v438));
  if (v439)
    goto LABEL_578;
  ((void (*)(std::__shared_weak_count *))v330->__on_zero_shared)(v330);
  std::__shared_weak_count::__release_weak(v330);
  if (SHIBYTE(v464) < 0)
LABEL_579:
    operator delete((void *)__dst);
}

void sub_239564228(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *__p,uint64_t a44,int a45,__int16 a46,char a47,char a48)
{
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;

  sub_2396FD3E8((uint64_t)&a37);
  v49 = (std::__shared_weak_count *)a42;
  if (a42)
  {
    v50 = (unint64_t *)(a42 + 8);
    do
      v51 = __ldaxr(v50);
    while (__stlxr(v51 - 1, v50));
    if (!v51)
    {
      ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
      std::__shared_weak_count::__release_weak(v49);
    }
  }
  if (a48 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_239564634(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;

  sub_2395647D4(a1, &v16);
  v4 = *(_QWORD *)(a2 + 8);
  if (v4)
  {
    v5 = *(std::__shared_weak_count **)(a2 + 16);
    if (!v5)
      goto LABEL_23;
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
    v4 = *(_QWORD *)(a2 + 8);
    v9 = *(std::__shared_weak_count **)(a2 + 16);
    if (!v9)
      goto LABEL_23;
    v10 = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
    do
      v12 = __ldaxr(v10);
    while (__stlxr(v12 - 1, v10));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
      if (*(_BYTE *)(a2 + 49))
        goto LABEL_14;
    }
    else
    {
LABEL_23:
      if (*(_BYTE *)(a2 + 49))
      {
LABEL_14:
        (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v4 + 96))(&v15, v4, 1);
        goto LABEL_17;
      }
    }
  }
  v15 = 0;
LABEL_17:
  sub_23956495C(a1, a2);
  v13 = v15;
  v15 = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  result = v16;
  v16 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_239564770(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (!a10)
    _Unwind_Resume(exception_object);
  (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

void sub_2395647D4(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (v12)
    {
      if (!v4)
        goto LABEL_27;
    }
    else
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (!v4)
        goto LABEL_27;
    }
    v4 = *(_QWORD *)(a1 + 8);
    v13 = *(std::__shared_weak_count **)(a1 + 16);
    if (v13)
    {
      v14 = (unint64_t *)&v13->__shared_owners_;
      do
        v15 = __ldxr(v14);
      while (__stxr(v15 + 1, v14));
      do
        v16 = __ldaxr(v14);
      while (__stlxr(v16 - 1, v14));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
        if (*(_BYTE *)(a1 + 81))
          goto LABEL_25;
        goto LABEL_27;
      }
    }
  }
  else if (!v4)
  {
    goto LABEL_27;
  }
  if (*(_BYTE *)(a1 + 81))
  {
LABEL_25:
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 96))(v4, 0);
    return;
  }
LABEL_27:
  *a2 = 0;
}

void *sub_23956495C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unsigned int v4;
  int v5;
  void *result;
  size_t v8;
  const void *v9;
  BOOL v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;

  v3 = a1;
  v4 = *(_DWORD *)(a1 + 64);
  v5 = *(_DWORD *)(a1 + 76);
  if (v5 == *(_DWORD *)(a2 + 44) && v5 == v4)
  {
    v8 = *(unsigned int *)(a1 + 68) * (unint64_t)v4;
    v9 = *(const void **)(a1 + 56);
    if (*(_BYTE *)(a1 + 80))
      v10 = v9 == 0;
    else
      v10 = 1;
    if (!v10)
    {
      v11 = *(_QWORD *)(a1 + 8);
      v12 = *(std::__shared_weak_count **)(a1 + 16);
      if (v12)
      {
        p_shared_owners = (unint64_t *)&v12->__shared_owners_;
        do
          v14 = __ldxr(p_shared_owners);
        while (__stxr(v14 + 1, p_shared_owners));
        do
          v15 = __ldaxr(p_shared_owners);
        while (__stlxr(v15 - 1, p_shared_owners));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
      }
      a1 = (*(uint64_t (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v11 + 88))(v11, 0, "unknown location");
      v9 = *(const void **)(v3 + 56);
    }
    if (v8 && !v9)
      sub_239EBF50C(a1, a2);
    result = *(void **)(a2 + 24);
    if (*(_BYTE *)(a2 + 48) && result)
    {
      v16 = *(_QWORD *)(a2 + 8);
      v17 = *(std::__shared_weak_count **)(a2 + 16);
      if (v17)
      {
        v18 = (unint64_t *)&v17->__shared_owners_;
        do
          v19 = __ldxr(v18);
        while (__stxr(v19 + 1, v18));
        do
          v20 = __ldaxr(v18);
        while (__stlxr(v20 - 1, v18));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v17);
        }
      }
      (*(void (**)(uint64_t, uint64_t, const char *))(*(_QWORD *)v16 + 88))(v16, 1, "unknown location");
      result = *(void **)(a2 + 24);
    }
    if (v8 && !result)
      sub_239EBF50C(0, a2);
    if (v8)
      return memmove(result, v9, v8);
  }
  else
  {
    v21 = *(unsigned int *)(a1 + 64);
    return (void *)sub_239564AFC(a1, a2, &v21);
  }
  return result;
}

uint64_t sub_239564AFC(uint64_t a1, uint64_t a2, size_t *a3)
{
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  BOOL v15;
  BOOL v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;

  sub_2395647D4(a1, &v20);
  v6 = *(_QWORD *)(a2 + 8);
  if (!v6)
    goto LABEL_21;
  v7 = *(std::__shared_weak_count **)(a2 + 16);
  if (!v7)
    goto LABEL_32;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  do
    v9 = __ldxr(p_shared_owners);
  while (__stxr(v9 + 1, p_shared_owners));
  do
    v10 = __ldaxr(p_shared_owners);
  while (__stlxr(v10 - 1, p_shared_owners));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  v6 = *(_QWORD *)(a2 + 8);
  v11 = *(std::__shared_weak_count **)(a2 + 16);
  if (!v11)
    goto LABEL_32;
  v12 = (unint64_t *)&v11->__shared_owners_;
  do
    v13 = __ldxr(v12);
  while (__stxr(v13 + 1, v12));
  do
    v14 = __ldaxr(v12);
  while (__stlxr(v14 - 1, v12));
  if (v14)
  {
LABEL_32:
    if (*(_BYTE *)(a2 + 49))
      goto LABEL_14;
LABEL_21:
    v19 = 0;
    if (*(_DWORD *)(a1 + 64))
      v16 = *(_DWORD *)(a1 + 68) == 0;
    else
      v16 = 1;
    if (!v16)
      goto LABEL_25;
    goto LABEL_26;
  }
  ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
  std::__shared_weak_count::__release_weak(v11);
  if (!*(_BYTE *)(a2 + 49))
    goto LABEL_21;
LABEL_14:
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v6 + 96))(&v19, v6, 1);
  if (*(_DWORD *)(a1 + 64))
    v15 = *(_DWORD *)(a1 + 68) == 0;
  else
    v15 = 1;
  if (!v15)
LABEL_25:
    sub_239564CCC(a3, a1, a2);
LABEL_26:
  v17 = v19;
  v19 = 0;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  result = v20;
  v20 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_239564C68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (!a10)
    _Unwind_Resume(exception_object);
  (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

size_t *sub_239564CCC(size_t *result, uint64_t a2, uint64_t a3)
{
  int v3;
  int v4;
  BOOL v5;
  size_t *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  int v24;
  unint64_t v25;
  int v26;
  uint64_t v27;
  _OWORD v28[2];

  v4 = *(_DWORD *)(a2 + 64);
  v3 = *(_DWORD *)(a2 + 68);
  if (v4)
    v5 = v3 == 0;
  else
    v5 = 1;
  if (!v5)
  {
    v8 = result;
    v24 = v4 - 1;
    v9 = *(unsigned int *)(a2 + 76);
    v10 = *(unsigned int *)(a3 + 44);
    v25 = *(unsigned int *)(a2 + 72) | ((unint64_t)*(unsigned int *)(a3 + 40) << 32);
    v23 = 0;
    v26 = v3 - 1;
    v27 = v9 | (v10 << 32);
    v11 = *(char **)(a2 + 56);
    if (*(_BYTE *)(a2 + 80) && v11)
    {
      v12 = *(_QWORD *)(a2 + 8);
      v13 = *(std::__shared_weak_count **)(a2 + 16);
      if (v13)
      {
        p_shared_owners = (unint64_t *)&v13->__shared_owners_;
        do
          v15 = __ldxr(p_shared_owners);
        while (__stxr(v15 + 1, p_shared_owners));
        do
          v16 = __ldaxr(p_shared_owners);
        while (__stlxr(v16 - 1, p_shared_owners));
        if (!v16)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
      (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v12 + 88))(v12, 0, "unknown location");
      v11 = *(char **)(a2 + 56);
    }
    v17 = *(char **)(a3 + 24);
    if (*(_BYTE *)(a3 + 48) && v17)
    {
      v18 = *(_QWORD *)(a3 + 8);
      v19 = *(std::__shared_weak_count **)(a3 + 16);
      if (v19)
      {
        v20 = (unint64_t *)&v19->__shared_owners_;
        do
          v21 = __ldxr(v20);
        while (__stxr(v21 + 1, v20));
        do
          v22 = __ldaxr(v20);
        while (__stlxr(v22 - 1, v20));
        if (!v22)
        {
          ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
          std::__shared_weak_count::__release_weak(v19);
        }
      }
      (*(void (**)(uint64_t, uint64_t, const char *))(*(_QWORD *)v18 + 88))(v18, 1, "unknown location");
      v17 = *(char **)(a3 + 24);
    }
    memset(v28, 0, sizeof(v28));
    return (size_t *)sub_23949FA00(&v23, (uint64_t)v28, v8, v11, v17);
  }
  return result;
}

void sub_239564E50(uint64_t a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  char *v5;
  _QWORD *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  void *v26;
  char *v27;
  char *v28;
  char *v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  char *v36;
  BOOL v37;
  int64_t v38;
  unint64_t v39;
  char *v40;
  _QWORD *v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  int64_t v45;
  unint64_t v46;
  char *v47;
  unint64_t v48;
  char *v49;
  uint64_t v50;
  char *v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  char *v57;
  size_t v58;
  unint64_t v59;
  char *v60;
  unint64_t v61;
  int64_t v62;
  unint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  __int128 *v69;
  char *v70;
  uint64_t v71;
  __int128 v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  __int128 *v77;
  _OWORD *v78;
  uint64_t v79;
  __int128 v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  __int128 *v85;
  _OWORD *v86;
  uint64_t v87;
  __int128 v88;
  uint64_t v89;
  void *v90;
  void *v91;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = v2 >= 0x200;
  v4 = v2 - 512;
  if (v3)
  {
    *(_QWORD *)(a1 + 32) = v4;
    v6 = *(_QWORD **)(a1 + 8);
    v5 = *(char **)(a1 + 16);
    v7 = (char *)(v6 + 1);
    v8 = *v6;
    *(_QWORD *)(a1 + 8) = v6 + 1;
    if (v5 != *(char **)(a1 + 24))
    {
LABEL_78:
      *(_QWORD *)v5 = v8;
      *(_QWORD *)(a1 + 16) += 8;
      return;
    }
    v9 = *(char **)a1;
    v10 = (uint64_t)&v7[-*(_QWORD *)a1];
    if ((unint64_t)v7 <= *(_QWORD *)a1)
    {
      v31 = (v5 - v9) >> 2;
      if (v5 == v9)
        v31 = 1;
      if (!(v31 >> 61))
      {
        v32 = v31 >> 2;
        v33 = 8 * v31;
        v34 = (char *)operator new(8 * v31);
        v35 = &v34[8 * v32];
        v36 = &v34[v33];
        v38 = v5 - v7;
        v37 = v5 == v7;
        v5 = v35;
        if (!v37)
        {
          v5 = &v35[v38 & 0xFFFFFFFFFFFFFFF8];
          v39 = v38 - 8;
          if ((unint64_t)(v38 - 8) >= 0x38)
          {
            v74 = &v34[8 * v32];
            v40 = v74;
            if ((unint64_t)(v74 - v7) >= 0x20)
            {
              v75 = (v39 >> 3) + 1;
              v76 = 8 * (v75 & 0x3FFFFFFFFFFFFFFCLL);
              v40 = &v35[v76];
              v7 += v76;
              v77 = (__int128 *)(v6 + 3);
              v78 = v74 + 16;
              v79 = v75 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v80 = *v77;
                *(v78 - 1) = *(v77 - 1);
                *v78 = v80;
                v77 += 2;
                v78 += 2;
                v79 -= 4;
              }
              while (v79);
              if (v75 == (v75 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_76;
            }
          }
          else
          {
            v40 = &v34[8 * v32];
          }
          do
          {
            v81 = *(_QWORD *)v7;
            v7 += 8;
            *(_QWORD *)v40 = v81;
            v40 += 8;
          }
          while (v40 != v5);
        }
        goto LABEL_76;
      }
LABEL_87:
      sub_239418A80();
    }
LABEL_5:
    v11 = v10 >> 3;
    if (v11 >= -1)
      v12 = v11 + 1;
    else
      v12 = v11 + 2;
    v13 = v12 >> 1;
    v14 = -v13;
    v15 = &v7[-8 * v13];
    v16 = v5 - v7;
    if (v5 != v7)
    {
      memmove(&v7[-8 * v13], v7, v5 - v7);
      v7 = *(char **)(a1 + 8);
    }
    v5 = &v15[v16];
    *(_QWORD *)(a1 + 8) = &v7[8 * v14];
    *(_QWORD *)(a1 + 16) = &v15[v16];
    goto LABEL_78;
  }
  v18 = *(_QWORD *)(a1 + 16);
  v17 = *(_QWORD *)(a1 + 24);
  v19 = *(_QWORD *)(a1 + 8);
  v20 = v18 - v19;
  v21 = (v18 - v19) >> 3;
  v22 = v17 - *(_QWORD *)a1;
  if (v21 < (unint64_t)(v22 >> 3))
  {
    if (v17 != v18)
    {
      v91 = operator new(0x1000uLL);
      sub_23946CE0C((char **)a1, &v91);
      return;
    }
    v91 = operator new(0x1000uLL);
    sub_23946CF98((void **)a1, &v91);
    v41 = *(_QWORD **)(a1 + 8);
    v5 = *(char **)(a1 + 16);
    v7 = (char *)(v41 + 1);
    v8 = *v41;
    *(_QWORD *)(a1 + 8) = v41 + 1;
    if (v5 != *(char **)(a1 + 24))
      goto LABEL_78;
    v9 = *(char **)a1;
    v10 = (uint64_t)&v7[-*(_QWORD *)a1];
    if ((unint64_t)v7 <= *(_QWORD *)a1)
    {
      v42 = (v5 - v9) >> 2;
      if (v5 == v9)
        v42 = 1;
      if (!(v42 >> 61))
      {
        v43 = v42 >> 2;
        v44 = 8 * v42;
        v34 = (char *)operator new(8 * v42);
        v35 = &v34[8 * v43];
        v36 = &v34[v44];
        v45 = v5 - v7;
        v37 = v5 == v7;
        v5 = v35;
        if (!v37)
        {
          v5 = &v35[v45 & 0xFFFFFFFFFFFFFFF8];
          v46 = v45 - 8;
          if ((unint64_t)(v45 - 8) >= 0x38)
          {
            v82 = &v34[8 * v43];
            v47 = v82;
            if ((unint64_t)(v82 - v7) >= 0x20)
            {
              v83 = (v46 >> 3) + 1;
              v84 = 8 * (v83 & 0x3FFFFFFFFFFFFFFCLL);
              v47 = &v35[v84];
              v7 += v84;
              v85 = (__int128 *)(v41 + 3);
              v86 = v82 + 16;
              v87 = v83 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v88 = *v85;
                *(v86 - 1) = *(v85 - 1);
                *v86 = v88;
                v85 += 2;
                v86 += 2;
                v87 -= 4;
              }
              while (v87);
              if (v83 == (v83 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_76;
            }
          }
          else
          {
            v47 = &v34[8 * v43];
          }
          do
          {
            v89 = *(_QWORD *)v7;
            v7 += 8;
            *(_QWORD *)v47 = v89;
            v47 += 8;
          }
          while (v47 != v5);
        }
LABEL_76:
        *(_QWORD *)a1 = v34;
        *(_QWORD *)(a1 + 8) = v35;
        *(_QWORD *)(a1 + 16) = v5;
        *(_QWORD *)(a1 + 24) = v36;
        if (v9)
        {
          operator delete(v9);
          v5 = *(char **)(a1 + 16);
        }
        goto LABEL_78;
      }
      goto LABEL_87;
    }
    goto LABEL_5;
  }
  v23 = v22 >> 2;
  if (v17 == *(_QWORD *)a1)
    v24 = 1;
  else
    v24 = v23;
  if (v24 >> 61)
    goto LABEL_87;
  v25 = (char *)operator new(8 * v24);
  v26 = operator new(0x1000uLL);
  v27 = &v25[8 * v21];
  v28 = &v25[8 * v24];
  if (v21 == v24)
  {
    v90 = v26;
    if (v20 < 1)
    {
      if (v18 == v19)
        v48 = 1;
      else
        v48 = v20 >> 2;
      if (v48 >> 61)
        sub_239418A80();
      v49 = (char *)operator new(8 * v48);
      v27 = &v49[8 * (v48 >> 2)];
      v28 = &v49[8 * v48];
      operator delete(v25);
      v50 = *(_QWORD *)(a1 + 8);
      v18 = *(_QWORD *)(a1 + 16);
      v25 = v49;
      *(_QWORD *)v27 = v90;
      v29 = v27 + 8;
      if (v18 == v50)
        goto LABEL_45;
    }
    else
    {
      v30 = v21 + 2;
      if (v21 >= -1)
        v30 = v21 + 1;
      v27 -= 8 * (v30 >> 1);
      *(_QWORD *)v27 = v26;
      v29 = v27 + 8;
      if (v18 == v19)
        goto LABEL_45;
    }
    do
    {
LABEL_50:
      if (v27 == v25)
      {
        if (v29 >= v28)
        {
          if (v28 == v27)
            v59 = 1;
          else
            v59 = (v28 - v27) >> 2;
          if (v59 >> 61)
            sub_239418A80();
          v60 = (char *)operator new(8 * v59);
          v25 = v60;
          v61 = (v59 + 3) >> 2;
          v53 = &v60[8 * v61];
          v62 = v29 - v27;
          v37 = v29 == v27;
          v29 = v53;
          if (!v37)
          {
            v29 = &v53[v62 & 0xFFFFFFFFFFFFFFF8];
            v63 = v62 - 8;
            v64 = &v60[8 * v61];
            v65 = v27;
            if (v63 < 0x38)
              goto LABEL_91;
            v66 = 8 * v61;
            v64 = &v60[8 * v61];
            v65 = v27;
            if ((unint64_t)(v64 - v27) < 0x20)
              goto LABEL_91;
            v67 = (v63 >> 3) + 1;
            v68 = 8 * (v67 & 0x3FFFFFFFFFFFFFFCLL);
            v64 = &v53[v68];
            v65 = &v27[v68];
            v69 = (__int128 *)(v27 + 16);
            v70 = &v60[v66 + 16];
            v71 = v67 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v72 = *v69;
              *((_OWORD *)v70 - 1) = *(v69 - 1);
              *(_OWORD *)v70 = v72;
              v69 += 2;
              v70 += 32;
              v71 -= 4;
            }
            while (v71);
            if (v67 != (v67 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_91:
              do
              {
                v73 = *(_QWORD *)v65;
                v65 += 8;
                *(_QWORD *)v64 = v73;
                v64 += 8;
              }
              while (v64 != v29);
            }
          }
          v28 = &v60[8 * v59];
          operator delete(v27);
        }
        else
        {
          v55 = (v28 - v29) >> 3;
          if (v55 >= -1)
            v56 = v55 + 1;
          else
            v56 = v55 + 2;
          v57 = &v29[8 * (v56 >> 1)];
          v53 = &v57[-(v29 - v27)];
          v58 = v29 - v27;
          v37 = v29 == v27;
          v29 = v57;
          if (!v37)
            memmove(v53, v27, v58);
          v25 = v27;
        }
      }
      else
      {
        v53 = v27;
      }
      v54 = *(_QWORD *)(v18 - 8);
      v18 -= 8;
      *((_QWORD *)v53 - 1) = v54;
      v51 = v53 - 8;
      v27 = v51;
    }
    while (v18 != *(_QWORD *)(a1 + 8));
    goto LABEL_46;
  }
  *(_QWORD *)v27 = v26;
  v29 = v27 + 8;
  if (v18 != v19)
    goto LABEL_50;
LABEL_45:
  v51 = v27;
LABEL_46:
  v52 = *(char **)a1;
  *(_QWORD *)a1 = v25;
  *(_QWORD *)(a1 + 8) = v51;
  *(_QWORD *)(a1 + 16) = v29;
  *(_QWORD *)(a1 + 24) = v28;
  if (v52)
    operator delete(v52);
}

void sub_2395653AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p)
{
  void *v9;

  operator delete(__p);
  operator delete(v9);
  _Unwind_Resume(a1);
}

void sub_2395653C8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_2395653DC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_2395653F4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_23956540C(const void **a1, std::string *a2, _QWORD *a3, uint64_t a4, _QWORD *a5, std::string *a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  _BYTE *v15;
  _BYTE *v16;
  _QWORD *v17;
  uint64_t v18;
  char *data;
  char *size;
  char *v22;
  unint64_t v23;
  _DWORD *v24;
  std::string::__raw *v25;
  int *v26;
  int *v27;
  int *v28;
  unint64_t v29;
  int v30;
  int *v31;
  uint64_t v32;
  signed int v33;
  std::string::pointer v34;
  _BYTE *v35;
  int64_t v36;
  char *v37;
  std::string::pointer v38;
  char *v39;
  void *v40;
  int v41;
  signed int v42;
  _QWORD *v43;
  uint64_t v44;
  const void *v45;
  int64_t v46;
  char *v47;
  std::string::__raw *v48;
  char *v49;
  char *v50;
  char *v51;
  unint64_t v52;
  _DWORD *v53;
  int64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  _BYTE *v59;
  unint64_t v60;
  _DWORD *v61;
  int64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  _BYTE *v67;
  std::__shared_weak_count *v68;
  uint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *p_shared_owners;
  unint64_t v72;
  _BYTE *v73;
  _BYTE *v74;
  int64_t v75;
  unint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  integer_t *v80;
  void *v81;
  int64_t v82;
  char *v83;
  char *v84;
  _QWORD *v85;
  _QWORD *v86;
  _QWORD *v87;
  uint64_t v88;
  integer_t *v89;
  uint64_t v90;
  _QWORD *v91;
  uint64_t v92;
  int v93;
  int v94;
  std::string *v95;
  std::chrono::system_clock::time_point v96;
  std::string *v97;
  std::string *v98;
  std::string *v99;
  char *v100;
  std::string::pointer v101;
  char *v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  char *v108;
  void **p_size;
  _BYTE *v110;
  unint64_t v111;
  char *v112;
  int64_t v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t v116;
  unint64_t v117;
  _BYTE *v118;
  int64_t v119;
  uint64_t v120;
  unint64_t v121;
  uint64_t v122;
  unint64_t v123;
  _BYTE *v124;
  _DWORD *v125;
  char *v126;
  unint64_t v127;
  uint64_t v128;
  char *v129;
  _OWORD *v130;
  char *v131;
  uint64_t v132;
  __int128 v133;
  int v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  int v141;
  std::string *v142;
  char *v143;
  char *v144;
  char *v145;
  unint64_t v146;
  std::string *v147;
  _DWORD *v148;
  _DWORD *v149;
  char *v150;
  unint64_t v151;
  uint64_t v152;
  int *v153;
  _OWORD *v154;
  int *v155;
  uint64_t v156;
  __int128 v157;
  int v158;
  int64_t v159;
  uint64_t v160;
  unint64_t v161;
  uint64_t v162;
  unint64_t v163;
  _BYTE *v164;
  unint64_t v165;
  uint64_t v166;
  int *v167;
  _OWORD *v168;
  int *v169;
  uint64_t v170;
  __int128 v171;
  int v172;
  _DWORD *v173;
  char *v174;
  unint64_t v175;
  uint64_t v176;
  char *v177;
  _OWORD *v178;
  char *v179;
  uint64_t v180;
  __int128 v181;
  int v182;
  _DWORD *v183;
  char *v184;
  unint64_t v185;
  uint64_t v186;
  char *v187;
  _OWORD *v188;
  char *v189;
  uint64_t v190;
  __int128 v191;
  int v192;
  int v193;
  int v194;
  int v195;
  void **v196;
  void **v197;
  void **v198;
  _QWORD *v199;
  uint64_t v200;
  _QWORD *v201;
  uint64_t v202;
  _QWORD *v203;
  uint64_t v204;
  _QWORD *v205;
  unint64_t v206;
  unint64_t v207;
  uint64_t v208;
  void *v209;
  std::__shared_weak_count *v210;
  unint64_t *v211;
  unint64_t v212;
  _QWORD *v213;
  uint64_t v214;
  int v215;
  int v216;
  void **v217;
  void **v218;
  void **v219;
  _QWORD *v220;
  uint64_t v221;
  _QWORD *v222;
  uint64_t v223;
  _QWORD *v224;
  uint64_t v225;
  _QWORD *v226;
  unint64_t v227;
  unint64_t v228;
  uint64_t v229;
  void *v230;
  std::__shared_weak_count *v231;
  unint64_t *v232;
  unint64_t v233;
  __int128 *v234;
  uint64_t v235;
  std::__shared_weak_count *v236;
  unint64_t *v237;
  unint64_t v238;
  char *v239;
  char *v240;
  void *v241;
  std::__shared_weak_count *v242;
  unint64_t *v243;
  unint64_t v244;
  std::__shared_weak_count *v245;
  unint64_t *v246;
  unint64_t v247;
  _QWORD *v248;
  uint64_t v249;
  signed int v251;
  std::string *v252;
  uint64_t v253;
  void *v254;
  _QWORD v255[5];
  _QWORD v256[4];
  _QWORD *v257;
  std::__shared_weak_count *v258;
  void *v259;
  char *v260;
  char *v261;
  uint64_t v262;
  void *v263;
  char *v264;
  uint64_t v265;
  void *v266;
  void *v267;
  _QWORD *v268;
  os_log_t v269;
  void *v270;
  char v271;
  std::string *v272;
  uint64_t v273;
  rusage v274;
  mach_msg_type_number_t task_info_outCnt;
  _QWORD v276[3];
  _QWORD *v277;
  void *v278;
  _BYTE *v279;
  char *v280;
  unint64_t v281;
  _QWORD v282[3];
  _QWORD *v283;
  pthread_mutex_t v284;
  pthread_mutex_t v285;
  uint64_t (**v286)();
  _BYTE v287[24];
  _BYTE *v288;
  uint64_t v289;
  std::__shared_weak_count *v290;
  uint64_t v291;
  void *v292;
  void **v293;
  void **v294;
  unint64_t v295;
  uint64_t v296;
  unsigned __int8 v297;
  pthread_cond_t v298;
  pthread_cond_t v299;
  pthread_mutex_t v300;
  void *v301;
  char v302;
  pthread_mutex_t v303;
  void *object;
  void *v305;
  void *v306;
  __int128 __p;
  _BOOL4 v308;
  char v309;
  uint64_t v310;
  __int128 *v311;
  uint64_t v312;
  std::__shared_weak_count *v313;
  uint64_t v314;
  void *v315;
  void **v316;
  void **v317;
  unint64_t v318;
  uint64_t v319;
  unsigned __int8 v320;
  pthread_cond_t v321;
  pthread_cond_t v322;
  pthread_mutex_t v323;
  void *v324;
  char v325;
  pthread_mutex_t v326;
  void *v327;
  void *v328;
  void *v329;
  _BYTE v330[24];
  _BYTE *v331;
  _BYTE v332[568];
  _QWORD v333[3];
  _QWORD *v334;
  integer_t task_info_out[6];
  integer_t *v336;
  unint64_t v337;
  uint64_t v338;

  v338 = *MEMORY[0x24BDAC8D0];
  v272 = a6;
  v273 = a7;
  v271 = 0;
  LOBYTE(v270) = 0;
  if (a10)
  {
    if ((uint64_t)(*(_QWORD *)(a9 + 8) - *(_QWORD *)a9) >> 4 != ((_BYTE *)a1[1] - (_BYTE *)*a1) >> 3)
    {
      if ((_BYTE)a7)
      {
        data = a6[18].__r_.__value_.__l.__data_;
        size = (char *)a6[18].__r_.__value_.__l.__size_;
        v22 = data;
        if (data != size)
        {
          do
          {
            if (*(_DWORD *)v22 == 1004)
              goto LABEL_14;
            v22 += 4;
          }
          while (v22 != size);
          v22 = (char *)a6[18].__r_.__value_.__l.__size_;
        }
LABEL_14:
        if (v22 == size)
        {
          v23 = a6[18].__r_.__value_.__r.__words[2];
          if ((unint64_t)size >= v23)
          {
            v54 = size - data;
            v55 = (size - data) >> 2;
            v56 = v55 + 1;
            if ((unint64_t)(v55 + 1) >> 62)
              goto LABEL_390;
            v57 = v23 - (_QWORD)data;
            if (v57 >> 1 > v56)
              v56 = v57 >> 1;
            if ((unint64_t)v57 >= 0x7FFFFFFFFFFFFFFCLL)
              v58 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v58 = v56;
            if (v58)
            {
              if (v58 >> 62)
                goto LABEL_386;
              v59 = operator new(4 * v58);
            }
            else
            {
              v59 = 0;
            }
            v125 = &v59[4 * v55];
            v126 = &v59[4 * v58];
            *v125 = 1004;
            v24 = v125 + 1;
            if (data != size)
            {
              if ((unint64_t)(v54 - 4) < 0x2C)
                goto LABEL_397;
              if ((unint64_t)(data - v59) < 0x20)
                goto LABEL_397;
              v127 = ((unint64_t)(v54 - 4) >> 2) + 1;
              v128 = 4 * (v127 & 0x7FFFFFFFFFFFFFF8);
              v129 = &size[-v128];
              v125 = (_DWORD *)((char *)v125 - v128);
              v130 = &v59[4 * v55 - 16];
              v131 = size - 16;
              v132 = v127 & 0x7FFFFFFFFFFFFFF8;
              do
              {
                v133 = *(_OWORD *)v131;
                *(v130 - 1) = *((_OWORD *)v131 - 1);
                *v130 = v133;
                v130 -= 2;
                v131 -= 32;
                v132 -= 8;
              }
              while (v132);
              size = v129;
              if (v127 != (v127 & 0x7FFFFFFFFFFFFFF8))
              {
LABEL_397:
                do
                {
                  v134 = *((_DWORD *)size - 1);
                  size -= 4;
                  *--v125 = v134;
                }
                while (size != data);
              }
            }
            a6[18].__r_.__value_.__r.__words[0] = (std::string::size_type)v125;
            a6[18].__r_.__value_.__l.__size_ = (std::string::size_type)v24;
            a6[18].__r_.__value_.__r.__words[2] = (std::string::size_type)v126;
            if (data)
              operator delete(data);
          }
          else
          {
            *(_DWORD *)size = 1004;
            v24 = size + 4;
          }
          v32 = 0;
          a6[18].__r_.__value_.__l.__size_ = (std::string::size_type)v24;
          goto LABEL_379;
        }
      }
      goto LABEL_31;
    }
    MEMORY[0x23B83DBFC](&v270, "");
  }
  if (!a3[3])
  {
    if ((_BYTE)v273)
    {
      v25 = (std::string::__raw *)v272;
      v26 = (int *)v272[18].__r_.__value_.__l.__data_;
      v27 = (int *)v272[18].__r_.__value_.__l.__size_;
      v28 = v26;
      if (v26 != v27)
      {
        do
        {
          if (*v28 == 1001)
            goto LABEL_22;
          ++v28;
        }
        while (v28 != v27);
        v28 = (int *)v272[18].__r_.__value_.__l.__size_;
      }
LABEL_22:
      if (v28 == v27)
      {
        v29 = v272[18].__r_.__value_.__r.__words[2];
        if ((unint64_t)v27 < v29)
        {
          v30 = 1001;
LABEL_62:
          *v27 = v30;
          v53 = v27 + 1;
LABEL_222:
          v32 = 0;
          v25[18].__words[1] = (std::string::size_type)v53;
          goto LABEL_379;
        }
        v62 = (char *)v27 - (char *)v26;
        v63 = v27 - v26;
        v64 = v63 + 1;
        if (!((unint64_t)(v63 + 1) >> 62))
        {
          v65 = v29 - (_QWORD)v26;
          if (v65 >> 1 > v64)
            v64 = v65 >> 1;
          if ((unint64_t)v65 >= 0x7FFFFFFFFFFFFFFCLL)
            v66 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v66 = v64;
          if (v66)
          {
            if (v66 >> 62)
              goto LABEL_386;
            v67 = operator new(4 * v66);
          }
          else
          {
            v67 = 0;
          }
          v149 = &v67[4 * v63];
          v150 = &v67[4 * v66];
          *v149 = 1001;
          v53 = v149 + 1;
          if (v26 != v27)
          {
            if ((unint64_t)(v62 - 4) < 0x2C)
              goto LABEL_398;
            if ((unint64_t)((char *)v26 - v67) < 0x20)
              goto LABEL_398;
            v151 = ((unint64_t)(v62 - 4) >> 2) + 1;
            v152 = 4 * (v151 & 0x7FFFFFFFFFFFFFF8);
            v153 = &v27[v152 / 0xFFFFFFFFFFFFFFFCLL];
            v149 = (_DWORD *)((char *)v149 - v152);
            v154 = &v67[4 * v63 - 16];
            v155 = v27 - 4;
            v156 = v151 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v157 = *(_OWORD *)v155;
              *(v154 - 1) = *((_OWORD *)v155 - 1);
              *v154 = v157;
              v154 -= 2;
              v155 -= 8;
              v156 -= 8;
            }
            while (v156);
            v27 = v153;
            if (v151 != (v151 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_398:
              do
              {
                v158 = *--v27;
                *--v149 = v158;
              }
              while (v27 != v26);
            }
          }
          goto LABEL_220;
        }
LABEL_390:
        sub_2394189F8();
      }
    }
LABEL_31:
    v32 = 0;
    goto LABEL_379;
  }
  if (!*(_QWORD *)(a4 + 24))
  {
    if (!(_BYTE)v273)
      goto LABEL_31;
    v25 = (std::string::__raw *)v272;
    v26 = (int *)v272[18].__r_.__value_.__l.__data_;
    v27 = (int *)v272[18].__r_.__value_.__l.__size_;
    v31 = v26;
    if (v26 != v27)
    {
      do
      {
        if (*v31 == 1002)
          goto LABEL_30;
        ++v31;
      }
      while (v31 != v27);
      v31 = (int *)v272[18].__r_.__value_.__l.__size_;
    }
LABEL_30:
    if (v31 != v27)
      goto LABEL_31;
    v52 = v272[18].__r_.__value_.__r.__words[2];
    if ((unint64_t)v27 < v52)
    {
      v30 = 1002;
      goto LABEL_62;
    }
    v113 = (char *)v27 - (char *)v26;
    v114 = v27 - v26;
    v115 = v114 + 1;
    if (!((unint64_t)(v114 + 1) >> 62))
    {
      v116 = v52 - (_QWORD)v26;
      if (v116 >> 1 > v115)
        v115 = v116 >> 1;
      if ((unint64_t)v116 >= 0x7FFFFFFFFFFFFFFCLL)
        v117 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v117 = v115;
      if (!v117)
      {
        v118 = 0;
        goto LABEL_213;
      }
      if (!(v117 >> 62))
      {
        v118 = operator new(4 * v117);
LABEL_213:
        v149 = &v118[4 * v114];
        v150 = &v118[4 * v117];
        *v149 = 1002;
        v53 = v149 + 1;
        if (v26 != v27)
        {
          if ((unint64_t)(v113 - 4) < 0x2C)
            goto LABEL_399;
          if ((unint64_t)((char *)v26 - v118) < 0x20)
            goto LABEL_399;
          v165 = ((unint64_t)(v113 - 4) >> 2) + 1;
          v166 = 4 * (v165 & 0x7FFFFFFFFFFFFFF8);
          v167 = &v27[v166 / 0xFFFFFFFFFFFFFFFCLL];
          v149 = (_DWORD *)((char *)v149 - v166);
          v168 = &v118[4 * v114 - 16];
          v169 = v27 - 4;
          v170 = v165 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v171 = *(_OWORD *)v169;
            *(v168 - 1) = *((_OWORD *)v169 - 1);
            *v168 = v171;
            v168 -= 2;
            v169 -= 8;
            v170 -= 8;
          }
          while (v170);
          v27 = v167;
          if (v165 != (v165 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_399:
            do
            {
              v172 = *--v27;
              *--v149 = v172;
            }
            while (v27 != v26);
          }
        }
LABEL_220:
        v25[18].__words[0] = (std::string::size_type)v149;
        v25[18].__words[1] = (std::string::size_type)v53;
        v25[18].__words[2] = (std::string::size_type)v150;
        if (v26)
          operator delete(v26);
        goto LABEL_222;
      }
LABEL_386:
      sub_239418A80();
    }
    goto LABEL_390;
  }
  v269 = os_log_create("com.apple.corepg.objseg", "PointsOfInterest");
  v333[0] = &off_250ADDFF8;
  v333[1] = &v269;
  v333[2] = 0;
  v334 = v333;
  v16 = *a1;
  v15 = a1[1];
  sub_2396FD800(a5, (uint64_t)v330);
  *(_QWORD *)&__p = 0x42C8000000000000;
  sub_2396FCC68(v332, ((v15 - v16) >> 2) + ((v15 - v16) >> 3) + 2, v330, &__p, 1.0);
  v17 = v331;
  if (v331 == v330)
  {
    v18 = 4;
    v17 = v330;
  }
  else
  {
    if (!v331)
      goto LABEL_34;
    v18 = 5;
  }
  (*(void (**)(void))(*v17 + 8 * v18))();
LABEL_34:
  v309 = 0;
  LOBYTE(__p) = 0;
  sub_2396FCDAC((uint64_t)v332, &__p, 1);
  if ((v309 & 0x80000000) == 0)
  {
    std::chrono::system_clock::now();
    v33 = HIDWORD(a2->__r_.__value_.__r.__words[1]);
    if (v33 > 0)
      goto LABEL_36;
LABEL_40:
    v33 = std::thread::hardware_concurrency();
    v266 = 0;
    v267 = 0;
    v268 = 0;
    v35 = (_BYTE *)a2->__r_.__value_.__r.__words[2];
    v38 = a2[1].__r_.__value_.__l.__data_;
    v36 = v38 - v35;
    if (v38 != v35)
      goto LABEL_37;
LABEL_41:
    v39 = (char *)operator new(8uLL);
    *(_QWORD *)v39 = 0;
    v37 = v39 + 8;
    v266 = v39;
    v267 = v39 + 8;
    v268 = v39 + 8;
    goto LABEL_42;
  }
  operator delete((void *)__p);
  std::chrono::system_clock::now();
  v33 = HIDWORD(a2->__r_.__value_.__r.__words[1]);
  if (v33 <= 0)
    goto LABEL_40;
LABEL_36:
  v266 = 0;
  v267 = 0;
  v268 = 0;
  v35 = (_BYTE *)a2->__r_.__value_.__r.__words[2];
  v34 = a2[1].__r_.__value_.__l.__data_;
  v36 = v34 - v35;
  if (v34 == v35)
    goto LABEL_41;
LABEL_37:
  if (v36 < 0)
    sub_2394189F8();
  v266 = operator new(v36);
  v267 = v266;
  v37 = (char *)v266 + 8 * (v36 >> 3);
  v268 = v37;
  memcpy(v266, v35, v36);
LABEL_42:
  v267 = v37;
  v263 = 0;
  v264 = 0;
  v265 = 0;
  if (!sub_2397A5580(&v266, (uint64_t)&v263))
  {
    if ((_BYTE)v273)
    {
      v48 = (std::string::__raw *)v272;
      v49 = v272[18].__r_.__value_.__l.__data_;
      v50 = (char *)v272[18].__r_.__value_.__l.__size_;
      v51 = v49;
      if (v49 != v50)
      {
        do
        {
          if (*(_DWORD *)v51 == 7)
            goto LABEL_58;
          v51 += 4;
        }
        while (v51 != v50);
        v51 = (char *)v272[18].__r_.__value_.__l.__size_;
      }
LABEL_58:
      if (v51 == v50)
      {
        v60 = v272[18].__r_.__value_.__r.__words[2];
        if ((unint64_t)v50 >= v60)
        {
          v119 = v50 - v49;
          v120 = (v50 - v49) >> 2;
          v121 = v120 + 1;
          if ((unint64_t)(v120 + 1) >> 62)
            sub_2394189F8();
          v122 = v60 - (_QWORD)v49;
          if (v122 >> 1 > v121)
            v121 = v122 >> 1;
          if ((unint64_t)v122 >= 0x7FFFFFFFFFFFFFFCLL)
            v123 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v123 = v121;
          if (v123)
          {
            if (v123 >> 62)
              sub_239418A80();
            v124 = operator new(4 * v123);
          }
          else
          {
            v124 = 0;
          }
          v173 = &v124[4 * v120];
          v174 = &v124[4 * v123];
          *v173 = 7;
          v61 = v173 + 1;
          if (v49 != v50)
          {
            if ((unint64_t)(v119 - 4) < 0x2C)
              goto LABEL_400;
            if ((unint64_t)(v49 - v124) < 0x20)
              goto LABEL_400;
            v175 = ((unint64_t)(v119 - 4) >> 2) + 1;
            v176 = 4 * (v175 & 0x7FFFFFFFFFFFFFF8);
            v177 = &v50[-v176];
            v173 = (_DWORD *)((char *)v173 - v176);
            v178 = &v124[4 * v120 - 16];
            v179 = v50 - 16;
            v180 = v175 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v181 = *(_OWORD *)v179;
              *(v178 - 1) = *((_OWORD *)v179 - 1);
              *v178 = v181;
              v178 -= 2;
              v179 -= 32;
              v180 -= 8;
            }
            while (v180);
            v50 = v177;
            if (v175 != (v175 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_400:
              do
              {
                v182 = *((_DWORD *)v50 - 1);
                v50 -= 4;
                *--v173 = v182;
              }
              while (v50 != v49);
            }
          }
          v48[18].__words[0] = (std::string::size_type)v173;
          v48[18].__words[1] = (std::string::size_type)v61;
          v48[18].__words[2] = (std::string::size_type)v174;
          if (v49)
            operator delete(v49);
        }
        else
        {
          *(_DWORD *)v50 = 7;
          v61 = v50 + 4;
        }
        v32 = 0;
        v48[18].__words[1] = (std::string::size_type)v61;
        goto LABEL_354;
      }
    }
    v32 = 0;
    goto LABEL_354;
  }
  v40 = v263;
  v309 = 0;
  LOBYTE(__p) = 0;
  sub_2396FCDAC((uint64_t)v332, &__p, 1);
  if (v309 < 0)
    operator delete((void *)__p);
  if (v33 >= 4)
    v41 = 4;
  else
    v41 = v33;
  v261 = 0;
  v262 = 0;
  v259 = 0;
  v260 = 0;
  v252 = a2;
  if (a10 && &v259 != (void **)a9)
  {
    v254 = v40;
    v42 = v33;
    v43 = a5;
    v45 = *(const void **)a9;
    v44 = *(_QWORD *)(a9 + 8);
    v46 = v44 - *(_QWORD *)a9;
    if (v44 == *(_QWORD *)a9)
    {
      v47 = 0;
    }
    else
    {
      if (v46 < 0)
        sub_2394189F8();
      v47 = (char *)operator new(v44 - *(_QWORD *)a9);
      v259 = v47;
      v260 = v47;
      v261 = &v47[16 * (v46 >> 4)];
      v46 &= 0xFFFFFFFFFFFFFFF0;
      memcpy(v47, v45, v46);
    }
    v260 = &v47[v46];
    a5 = v43;
    a2 = v252;
    v33 = v42;
    v40 = v254;
  }
  v257 = 0;
  v258 = 0;
  LODWORD(__p) = HIDWORD(a2->__r_.__value_.__r.__words[0]);
  DWORD1(__p) = 255;
  *((_QWORD *)&__p + 1) = a2[4].__r_.__value_.__l.__data_;
  v308 = a10 != 0;
  v310 = 4;
  LOBYTE(v311) = 1;
  v68 = (std::__shared_weak_count *)operator new(0x98uLL);
  v68->__shared_owners_ = 0;
  v68->__shared_weak_owners_ = 0;
  v68->__vftable = (std::__shared_weak_count_vtbl *)&off_250ADE040;
  v69 = sub_23956D074((uint64_t)&v68[1], &__p, v41, (uint64_t)v40, 1);
  v70 = v258;
  v257 = (_QWORD *)v69;
  v258 = v68;
  if (v70)
  {
    p_shared_owners = (unint64_t *)&v70->__shared_owners_;
    do
      v72 = __ldaxr(p_shared_owners);
    while (__stlxr(v72 - 1, p_shared_owners));
    if (!v72)
    {
      ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
      std::__shared_weak_count::__release_weak(v70);
    }
  }
  sub_239567410((uint64_t)&__p, v33);
  sub_239568918((uint64_t)&v286, v33);
  sub_2397A1618(&v285);
  v251 = v33;
  v253 = (uint64_t)a5;
  sub_2397A1618(&v284);
  v256[0] = v332;
  v256[1] = &v272;
  v256[2] = &v285;
  v256[3] = &v262;
  v255[0] = &v286;
  v255[1] = a4;
  v255[2] = a1;
  v255[3] = v256;
  v255[4] = v332;
  v74 = *a1;
  v73 = a1[1];
  v75 = v73 - (_BYTE *)*a1;
  if (v73 != *a1)
  {
    v76 = 0;
    v77 = v75 >> 3;
    while (1)
    {
      v279 = 0;
      v280 = 0;
      v278 = 0;
      if (v73 != v74)
      {
        if (v75 < 0)
          sub_2394189F8();
        v278 = operator new(v75);
        v279 = v278;
        v78 = (char *)v278 + 8 * v77;
        v280 = v78;
        memcpy(v278, v74, v75);
        v279 = v78;
      }
      v281 = v76;
      v79 = a3[3];
      if (!v79)
        goto LABEL_99;
      if ((_QWORD *)v79 != a3)
        break;
      v283 = v282;
      (*(void (**)(_QWORD *, _QWORD *))(*a3 + 24))(a3, v282);
LABEL_101:
      v336 = 0;
      v80 = (integer_t *)operator new(0x48uLL);
      *((_QWORD *)v80 + 1) = 0;
      *(_QWORD *)v80 = &off_250ADE258;
      *((_QWORD *)v80 + 2) = 0;
      *((_QWORD *)v80 + 3) = 0;
      v81 = v278;
      v82 = v279 - (_BYTE *)v278;
      if (v279 != v278)
      {
        if (v82 < 0)
          sub_2394189F8();
        v83 = (char *)operator new(v279 - (_BYTE *)v278);
        *((_QWORD *)v80 + 1) = v83;
        v84 = &v83[8 * (v82 >> 3)];
        *((_QWORD *)v80 + 3) = v84;
        memcpy(v83, v81, v82);
        *((_QWORD *)v80 + 2) = v84;
      }
      v85 = v283;
      *((_QWORD *)v80 + 4) = v281;
      if (v85)
      {
        if (v85 == v282)
        {
          *((_QWORD *)v80 + 8) = v80 + 10;
          (*(void (**)(_QWORD *))(v282[0] + 24))(v282);
        }
        else
        {
          *((_QWORD *)v80 + 8) = v85;
          v283 = 0;
        }
      }
      else
      {
        *((_QWORD *)v80 + 8) = 0;
      }
      v336 = v80;
      v277 = 0;
      v86 = operator new(0x48uLL);
      *v86 = &off_250ADE2A0;
      v86[1] = &v257;
      v86[2] = v255;
      v86[3] = &v259;
      v86[4] = &v284;
      v86[5] = v332;
      v86[6] = &v272;
      v86[7] = a1;
      v86[8] = v76;
      v277 = v86;
      sub_239566E98((uint64_t)&__p, task_info_out, v276);
      v87 = v277;
      if (v277 == v276)
      {
        v87 = v276;
        v88 = 4;
      }
      else
      {
        if (!v277)
          goto LABEL_114;
        v88 = 5;
      }
      (*(void (**)(void))(*v87 + 8 * v88))();
LABEL_114:
      v89 = v336;
      if (v336 == task_info_out)
      {
        v89 = task_info_out;
        v90 = 4;
      }
      else
      {
        if (!v336)
          goto LABEL_119;
        v90 = 5;
      }
      (*(void (**)(void))(*(_QWORD *)v89 + 8 * v90))();
LABEL_119:
      v91 = v283;
      if (v283 == v282)
      {
        v91 = v282;
        v92 = 4;
        goto LABEL_123;
      }
      if (v283)
      {
        v92 = 5;
LABEL_123:
        (*(void (**)(void))(*v91 + 8 * v92))();
      }
      if (v278)
      {
        v279 = v278;
        operator delete(v278);
      }
      ++v76;
      v74 = *a1;
      v73 = a1[1];
      v75 = v73 - (_BYTE *)*a1;
      v77 = v75 >> 3;
      if (v76 >= v75 >> 3)
        goto LABEL_126;
    }
    v79 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v79 + 16))(v79);
LABEL_99:
    v283 = (_QWORD *)v79;
    goto LABEL_101;
  }
LABEL_126:
  sub_2397A1694(&v323);
  v93 = v320;
  sub_2397A16B4(&v323);
  if (!v93)
  {
    sub_2395687B4((uint64_t)&v314);
    if (v312)
      sub_2397A2D24(v312);
  }
  (*(void (**)(_QWORD *))(*v257 + 24))(v257);
  sub_2397A1694(&v300);
  v94 = v297;
  sub_2397A16B4(&v300);
  if (!v94)
  {
    sub_239569D58((uint64_t)&v291);
    if (v289)
      sub_2397A2D24(v289);
  }
  if (!(_BYTE)v273)
    goto LABEL_247;
  v95 = v272;
  v96.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
  v95[16].__r_.__value_.__r.__words[2] = v96.__d_.__rep_;
  *(double *)&v95[17].__r_.__value_.__l.__data_ = (double)(uint64_t)(v96.__d_.__rep_ - v95[16].__r_.__value_.__l.__size_)
                                                / 1000000.0;
  task_info_outCnt = 93;
  if (!task_info(*MEMORY[0x24BDAEC58], 0x16u, task_info_out, &task_info_outCnt))
    *(float *)&v95[17].__r_.__value_.__r.__words[2] = (float)((float)v337 * 0.00097656) * 0.00097656;
  v95[19].__r_.__value_.__s.__data_[0] = 0;
  getrusage(0, &v274);
  *(float *)&v95[17].__r_.__value_.__r.__words[1] = (float)((float)v274.ru_maxrss * 0.00097656) * 0.00097656;
  v97 = v272;
  LODWORD(v272->__r_.__value_.__l.__data_) = v262;
  v97[11].__r_.__value_.__s.__data_[0] = a10 != 0;
  v98 = v252;
  *(_OWORD *)&v97->__r_.__value_.__r.__words[1] = *(_OWORD *)&v252->__r_.__value_.__l.__data_;
  v99 = v97;
  if (&v97->__r_.__value_.__r.__words[1] != (std::string::size_type *)v252)
  {
    v100 = v97[1].__r_.__value_.__l.__data_;
    v102 = (char *)v252->__r_.__value_.__r.__words[2];
    v101 = v252[1].__r_.__value_.__l.__data_;
    v103 = v101 - v102;
    v104 = (v101 - v102) >> 3;
    v105 = v97[1].__r_.__value_.__r.__words[2];
    if (v104 <= (v105 - (uint64_t)v100) >> 3)
    {
      p_size = (void **)&v97[1].__r_.__value_.__l.__size_;
      v110 = (_BYTE *)v97[1].__r_.__value_.__l.__size_;
      v111 = (v110 - v100) >> 3;
      if (v111 < v104)
      {
        v112 = &v102[8 * v111];
        if (v110 != v100)
        {
          memmove(v97[1].__r_.__value_.__l.__data_, v102, v110 - v100);
          v100 = (char *)*p_size;
        }
        v98 = v252;
        v103 = v101 - v112;
        if (v101 != v112)
          memmove(v100, v112, v101 - v112);
        goto LABEL_185;
      }
      if (v101 != v102)
        memmove(v97[1].__r_.__value_.__l.__data_, v102, v101 - v102);
    }
    else
    {
      if (v100)
      {
        v97[1].__r_.__value_.__l.__size_ = (std::string::size_type)v100;
        operator delete(v100);
        v105 = 0;
        v97[1].__r_.__value_.__r.__words[0] = 0;
        v97[1].__r_.__value_.__l.__size_ = 0;
        v97[1].__r_.__value_.__r.__words[2] = 0;
      }
      if (v103 < 0)
        goto LABEL_387;
      v106 = v105 >> 2;
      if (v105 >> 2 <= v104)
        v106 = (v101 - v102) >> 3;
      v107 = (unint64_t)v105 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v106;
      if (v107 >> 61)
LABEL_387:
        sub_2394189F8();
      v108 = (char *)operator new(8 * v107);
      v100 = v108;
      v97[1].__r_.__value_.__l.__size_ = (std::string::size_type)v108;
      p_size = (void **)&v97[1].__r_.__value_.__l.__size_;
      v97[1].__r_.__value_.__r.__words[0] = (std::string::size_type)v108;
      v97[1].__r_.__value_.__r.__words[2] = (std::string::size_type)&v108[8 * v107];
      if (v101 != v102)
        memcpy(v108, v102, v101 - v102);
    }
    v98 = v252;
LABEL_185:
    *p_size = &v100[v103];
    v99 = v272;
  }
  v135 = *(_OWORD *)&v98[1].__r_.__value_.__r.__words[2];
  v136 = *(_OWORD *)&v98[2].__r_.__value_.__r.__words[1];
  v137 = *(_OWORD *)&v98[3].__r_.__value_.__r.__words[2];
  *(_OWORD *)&v97[3].__r_.__value_.__r.__words[1] = *(_OWORD *)&v98[3].__r_.__value_.__l.__data_;
  *(_OWORD *)&v97[4].__r_.__value_.__l.__data_ = v137;
  *(_OWORD *)&v97[2].__r_.__value_.__l.__data_ = v135;
  *(_OWORD *)&v97[2].__r_.__value_.__r.__words[2] = v136;
  v138 = *(_OWORD *)&v98[4].__r_.__value_.__r.__words[1];
  v139 = *(_OWORD *)&v98[5].__r_.__value_.__l.__data_;
  v140 = *(_OWORD *)&v98[5].__r_.__value_.__r.__words[2];
  LODWORD(v97[6].__r_.__value_.__r.__words[2]) = v98[6].__r_.__value_.__r.__words[1];
  *(_OWORD *)&v97[5].__r_.__value_.__r.__words[1] = v139;
  *(_OWORD *)&v97[6].__r_.__value_.__l.__data_ = v140;
  *(_OWORD *)&v97[4].__r_.__value_.__r.__words[2] = v138;
  HIDWORD(v99->__r_.__value_.__r.__words[2]) = v251;
  v141 = sub_2396FD7B0(v253);
  v142 = v272;
  if (v141)
  {
    v143 = v272[18].__r_.__value_.__l.__data_;
    v144 = (char *)v272[18].__r_.__value_.__l.__size_;
    v145 = v143;
    if (v143 != v144)
    {
      while (*(_DWORD *)v145 != 2)
      {
        v145 += 4;
        if (v145 == v144)
        {
          v145 = (char *)v272[18].__r_.__value_.__l.__size_;
          break;
        }
      }
    }
    if (v145 == v144)
    {
      v146 = v272[18].__r_.__value_.__r.__words[2];
      if ((unint64_t)v144 >= v146)
      {
        v159 = v144 - v143;
        v160 = (v144 - v143) >> 2;
        v161 = v160 + 1;
        if ((unint64_t)(v160 + 1) >> 62)
          sub_2394189F8();
        v162 = v146 - (_QWORD)v143;
        if (v162 >> 1 > v161)
          v161 = v162 >> 1;
        if ((unint64_t)v162 >= 0x7FFFFFFFFFFFFFFCLL)
          v163 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v163 = v161;
        if (v163)
        {
          if (v163 >> 62)
            sub_239418A80();
          v164 = operator new(4 * v163);
        }
        else
        {
          v164 = 0;
        }
        v183 = &v164[4 * v160];
        v184 = &v164[4 * v163];
        *v183 = 2;
        v148 = v183 + 1;
        if (v143 != v144)
        {
          if ((unint64_t)(v159 - 4) < 0x2C)
            goto LABEL_401;
          if ((unint64_t)(v143 - v164) < 0x20)
            goto LABEL_401;
          v185 = ((unint64_t)(v159 - 4) >> 2) + 1;
          v186 = 4 * (v185 & 0x7FFFFFFFFFFFFFF8);
          v187 = &v144[-v186];
          v183 = (_DWORD *)((char *)v183 - v186);
          v188 = &v164[4 * v160 - 16];
          v189 = v144 - 16;
          v190 = v185 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v191 = *(_OWORD *)v189;
            *(v188 - 1) = *((_OWORD *)v189 - 1);
            *v188 = v191;
            v188 -= 2;
            v189 -= 32;
            v190 -= 8;
          }
          while (v190);
          v144 = v187;
          if (v185 != (v185 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_401:
            do
            {
              v192 = *((_DWORD *)v144 - 1);
              v144 -= 4;
              *--v183 = v192;
            }
            while (v144 != v143);
          }
        }
        v142[18].__r_.__value_.__r.__words[0] = (std::string::size_type)v183;
        v142[18].__r_.__value_.__l.__size_ = (std::string::size_type)v148;
        v142[18].__r_.__value_.__r.__words[2] = (std::string::size_type)v184;
        if (v143)
        {
          operator delete(v143);
          v147 = v272;
        }
        else
        {
          v147 = v142;
        }
      }
      else
      {
        *(_DWORD *)v144 = 2;
        v147 = v142;
        v148 = v144 + 4;
      }
      v142[18].__r_.__value_.__l.__size_ = (std::string::size_type)v148;
      v142 = v147;
    }
  }
  sub_23957A474(**(const std::string ***)(v257[3] + 424), v142 + 7, v142 + 8);
LABEL_247:
  v193 = sub_2396FD7B0(v253);
  sub_2397A163C(&v284);
  sub_2397A163C(&v285);
  v286 = &off_250ADE168;
  os_release(object);
  if (v305)
  {
    v306 = v305;
    operator delete(v305);
  }
  v286 = &off_250ADE1E0;
  sub_2397A1694(&v300);
  v194 = v297;
  sub_2397A16B4(&v300);
  if (!v194)
  {
    sub_239569D58((uint64_t)&v291);
    if (v289)
      sub_2397A2D24(v289);
  }
  sub_2397A163C(&v303);
  if (v302 < 0)
    operator delete(v301);
  sub_2397A1694(&v300);
  v195 = v297;
  sub_2397A16B4(&v300);
  if (!v195)
    sub_239569D58((uint64_t)&v291);
  sub_2397A1694(&v300);
  sub_2397A16B4(&v300);
  pthread_cond_destroy(&v298);
  pthread_cond_destroy(&v299);
  sub_2397A163C(&v300);
  v196 = v293;
  v197 = v294;
  if (v294 == v293)
  {
    v197 = v293;
    v296 = 0;
    v206 = 0;
    goto LABEL_275;
  }
  v198 = &v293[v295 >> 6];
  v199 = (char *)*v198 + 64 * (v295 & 0x3F);
  v200 = *(uint64_t *)((char *)v293 + (((v296 + v295) >> 3) & 0x1FFFFFFFFFFFFFF8)) + 64 * ((v296 + v295) & 0x3F);
  if (v199 == (_QWORD *)v200)
    goto LABEL_273;
  do
  {
    v201 = (_QWORD *)v199[7];
    if (v201 == v199 + 4)
    {
      v201 = v199 + 4;
      v202 = 4;
    }
    else
    {
      if (!v201)
        goto LABEL_265;
      v202 = 5;
    }
    (*(void (**)(void))(*v201 + 8 * v202))();
LABEL_265:
    v203 = (_QWORD *)v199[3];
    if (v203 == v199)
    {
      v203 = v199;
      v204 = 4;
    }
    else
    {
      if (!v203)
        goto LABEL_270;
      v204 = 5;
    }
    (*(void (**)(void))(*v203 + 8 * v204))();
LABEL_270:
    v199 += 8;
    if ((char *)v199 - (_BYTE *)*v198 == 4096)
    {
      v205 = v198[1];
      ++v198;
      v199 = v205;
    }
  }
  while (v199 != (_QWORD *)v200);
  v197 = v294;
  v196 = v293;
LABEL_273:
  v296 = 0;
  v206 = (char *)v197 - (char *)v196;
  if ((unint64_t)((char *)v197 - (char *)v196) >= 0x11)
  {
    do
    {
      operator delete(*v196);
      v197 = v294;
      v196 = v293 + 1;
      v293 = v196;
      v206 = (char *)v294 - (char *)v196;
    }
    while ((unint64_t)((char *)v294 - (char *)v196) > 0x10);
  }
LABEL_275:
  v207 = v206 >> 3;
  if (v207 == 1)
  {
    v208 = 32;
LABEL_280:
    v295 = v208;
  }
  else if (v207 == 2)
  {
    v208 = 64;
    goto LABEL_280;
  }
  if (v196 != v197)
  {
    do
    {
      v209 = *v196++;
      operator delete(v209);
    }
    while (v196 != v197);
    if (v294 != v293)
      v294 = (void **)((char *)v294 + (((char *)v293 - (char *)v294 + 7) & 0xFFFFFFFFFFFFFFF8));
  }
  if (v292)
    operator delete(v292);
  v210 = v290;
  if (v290)
  {
    v211 = (unint64_t *)&v290->__shared_owners_;
    do
      v212 = __ldaxr(v211);
    while (__stlxr(v212 - 1, v211));
    if (!v212)
    {
      ((void (*)(std::__shared_weak_count *))v210->__on_zero_shared)(v210);
      std::__shared_weak_count::__release_weak(v210);
    }
  }
  v213 = v288;
  if (v288 == v287)
  {
    v214 = 4;
    v213 = v287;
LABEL_296:
    (*(void (**)(void))(*v213 + 8 * v214))();
  }
  else if (v288)
  {
    v214 = 5;
    goto LABEL_296;
  }
  *(_QWORD *)&__p = &off_250ADE078;
  os_release(v327);
  if (v328)
  {
    v329 = v328;
    operator delete(v328);
  }
  *(_QWORD *)&__p = &off_250ADE0F0;
  sub_2397A1694(&v323);
  v215 = v320;
  sub_2397A16B4(&v323);
  if (!v215)
  {
    sub_2395687B4((uint64_t)&v314);
    if (v312)
      sub_2397A2D24(v312);
  }
  sub_2397A163C(&v326);
  if (v325 < 0)
    operator delete(v324);
  sub_2397A1694(&v323);
  v216 = v320;
  sub_2397A16B4(&v323);
  if (!v216)
    sub_2395687B4((uint64_t)&v314);
  sub_2397A1694(&v323);
  sub_2397A16B4(&v323);
  pthread_cond_destroy(&v321);
  pthread_cond_destroy(&v322);
  sub_2397A163C(&v323);
  v217 = v316;
  v218 = v317;
  if (v317 == v316)
  {
    v218 = v316;
    v319 = 0;
    v227 = 0;
    goto LABEL_325;
  }
  v219 = &v316[v318 >> 6];
  v220 = (char *)*v219 + 64 * (v318 & 0x3F);
  v221 = *(uint64_t *)((char *)v316 + (((v319 + v318) >> 3) & 0x1FFFFFFFFFFFFFF8)) + 64 * ((v319 + v318) & 0x3F);
  if (v220 == (_QWORD *)v221)
    goto LABEL_323;
  while (2)
  {
    v222 = (_QWORD *)v220[7];
    if (v222 == v220 + 4)
    {
      v222 = v220 + 4;
      v223 = 4;
LABEL_314:
      (*(void (**)(void))(*v222 + 8 * v223))();
    }
    else if (v222)
    {
      v223 = 5;
      goto LABEL_314;
    }
    v224 = (_QWORD *)v220[3];
    if (v224 == v220)
    {
      v224 = v220;
      v225 = 4;
LABEL_319:
      (*(void (**)(void))(*v224 + 8 * v225))();
    }
    else if (v224)
    {
      v225 = 5;
      goto LABEL_319;
    }
    v220 += 8;
    if ((char *)v220 - (_BYTE *)*v219 == 4096)
    {
      v226 = v219[1];
      ++v219;
      v220 = v226;
    }
    if (v220 != (_QWORD *)v221)
      continue;
    break;
  }
  v218 = v317;
  v217 = v316;
LABEL_323:
  v319 = 0;
  v227 = (char *)v218 - (char *)v217;
  if ((unint64_t)((char *)v218 - (char *)v217) >= 0x11)
  {
    do
    {
      operator delete(*v217);
      v218 = v317;
      v217 = v316 + 1;
      v316 = v217;
      v227 = (char *)v317 - (char *)v217;
    }
    while ((unint64_t)((char *)v317 - (char *)v217) > 0x10);
  }
LABEL_325:
  v228 = v227 >> 3;
  if (v228 == 1)
  {
    v229 = 32;
LABEL_330:
    v318 = v229;
  }
  else if (v228 == 2)
  {
    v229 = 64;
    goto LABEL_330;
  }
  if (v217 != v218)
  {
    do
    {
      v230 = *v217++;
      operator delete(v230);
    }
    while (v217 != v218);
    if (v317 != v316)
      v317 = (void **)((char *)v317 + (((char *)v316 - (char *)v317 + 7) & 0xFFFFFFFFFFFFFFF8));
  }
  if (v315)
    operator delete(v315);
  v231 = v313;
  if (v313)
  {
    v232 = (unint64_t *)&v313->__shared_owners_;
    do
      v233 = __ldaxr(v232);
    while (__stlxr(v233 - 1, v232));
    if (!v233)
    {
      ((void (*)(std::__shared_weak_count *))v231->__on_zero_shared)(v231);
      std::__shared_weak_count::__release_weak(v231);
    }
  }
  v32 = v193 ^ 1u;
  v234 = v311;
  if (v311 == (__int128 *)((char *)&__p + 8))
  {
    v235 = 4;
    v234 = (__int128 *)((char *)&__p + 8);
LABEL_346:
    (*(void (**)(void))(*(_QWORD *)v234 + 8 * v235))();
  }
  else if (v311)
  {
    v235 = 5;
    goto LABEL_346;
  }
  v236 = v258;
  if (v258)
  {
    v237 = (unint64_t *)&v258->__shared_owners_;
    do
      v238 = __ldaxr(v237);
    while (__stlxr(v238 - 1, v237));
    if (!v238)
    {
      ((void (*)(std::__shared_weak_count *))v236->__on_zero_shared)(v236);
      std::__shared_weak_count::__release_weak(v236);
    }
  }
  if (v259)
  {
    v260 = (char *)v259;
    operator delete(v259);
  }
LABEL_354:
  v239 = (char *)v263;
  if (v263)
  {
    v240 = v264;
    v241 = v263;
    if (v264 == v263)
    {
LABEL_370:
      v264 = v239;
      operator delete(v241);
      goto LABEL_371;
    }
    while (2)
    {
      v242 = (std::__shared_weak_count *)*((_QWORD *)v240 - 1);
      if (!v242)
        goto LABEL_362;
      v243 = (unint64_t *)&v242->__shared_owners_;
      do
        v244 = __ldaxr(v243);
      while (__stlxr(v244 - 1, v243));
      if (!v244)
      {
        ((void (*)(std::__shared_weak_count *))v242->__on_zero_shared)(v242);
        std::__shared_weak_count::__release_weak(v242);
        v245 = (std::__shared_weak_count *)*((_QWORD *)v240 - 3);
        if (v245)
        {
LABEL_363:
          v246 = (unint64_t *)&v245->__shared_owners_;
          do
            v247 = __ldaxr(v246);
          while (__stlxr(v247 - 1, v246));
          if (!v247)
          {
            ((void (*)(std::__shared_weak_count *))v245->__on_zero_shared)(v245);
            std::__shared_weak_count::__release_weak(v245);
          }
        }
      }
      else
      {
LABEL_362:
        v245 = (std::__shared_weak_count *)*((_QWORD *)v240 - 3);
        if (v245)
          goto LABEL_363;
      }
      v240 -= 32;
      if (v240 == v239)
      {
        v241 = v263;
        goto LABEL_370;
      }
      continue;
    }
  }
LABEL_371:
  if (v266)
  {
    v267 = v266;
    operator delete(v266);
  }
  sub_2396FCD14((uint64_t)v332);
  if (!v334)
    sub_2394172E0();
  (*(void (**)(_QWORD *))(*v334 + 48))(v334);
  v248 = v334;
  if (v334 == v333)
  {
    v249 = 4;
    v248 = v333;
LABEL_378:
    (*(void (**)(void))(*v248 + 8 * v249))();
  }
  else if (v334)
  {
    v249 = 5;
    goto LABEL_378;
  }
LABEL_379:
  if (v271 < 0)
    operator delete(v270);
  return v32;
}

void sub_239566BDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,void *a33,void *a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  if (__p)
    operator delete(__p);
  sub_2394EC1C8(&a30);
  if (a33)
  {
    a34 = a33;
    operator delete(a33);
  }
  sub_2396FCD14((uint64_t)&STACK[0x610]);
  sub_239416834(&STACK[0x848]);
  if (a42 < 0)
    operator delete(a37);
  _Unwind_Resume(a1);
}

uint64_t *sub_239566E98(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v6;
  pthread_mutex_t *v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *result;
  uint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  uint64_t v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  uint64_t *v25;
  _BYTE v26[24];
  _BYTE *v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  if (!*(_QWORD *)(a1 + 296))
  {
    v7 = (pthread_mutex_t *)(a1 + 344);
    sub_2397A1694((pthread_mutex_t *)(a1 + 344));
    if (a3[3])
    {
      v22 = 0;
      v8 = *(_QWORD *)(a1 + 32);
      if (!v8)
        sub_2394172E0();
      (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD *, uint64_t *))(*(_QWORD *)v8 + 48))(&v23, v8, a2, &v22);
      v9 = a3[3];
      if (!v9)
        sub_2394172E0();
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v9 + 48))(v9, &v23);
      v10 = v24;
      if (!v24)
        return (uint64_t *)sub_2397A16B4(v7);
      p_shared_owners = (unint64_t *)&v24->__shared_owners_;
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
    }
    else
    {
      v23 = 0;
      v18 = *(_QWORD *)(a1 + 32);
      if (!v18)
        sub_2394172E0();
      (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD *, uint64_t *))(*(_QWORD *)v18 + 48))(&v20, v18, a2, &v23);
      v10 = v21;
      if (!v21)
        return (uint64_t *)sub_2397A16B4(v7);
      v19 = (unint64_t *)&v21->__shared_owners_;
      do
        v12 = __ldaxr(v19);
      while (__stlxr(v12 - 1, v19));
    }
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
    return (uint64_t *)sub_2397A16B4(v7);
  }
  v6 = (_QWORD *)a2[3];
  if (v6)
  {
    if (v6 == a2)
    {
      v25 = &v23;
      (*(void (**)(_QWORD *, uint64_t *))(*a2 + 24))(a2, &v23);
    }
    else
    {
      v25 = (uint64_t *)(*(uint64_t (**)(_QWORD *))(*v6 + 16))(v6);
    }
  }
  else
  {
    v25 = 0;
  }
  v13 = v26;
  v14 = a3[3];
  if (!v14)
    goto LABEL_17;
  if ((_QWORD *)v14 != a3)
  {
    v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 16))(v14);
LABEL_17:
    v27 = (_BYTE *)v14;
    goto LABEL_19;
  }
  v27 = v26;
  (*(void (**)(_QWORD *, _BYTE *))(*a3 + 24))(a3, v26);
LABEL_19:
  sub_23956A6B8((unsigned int *)(a1 + 56), (uint64_t)&v23);
  if (v27 == v26)
  {
    v15 = 4;
    goto LABEL_23;
  }
  if (v27)
  {
    v15 = 5;
    v13 = v27;
LABEL_23:
    (*(void (**)(_QWORD *))(*v13 + 8 * v15))(v13);
  }
  result = v25;
  if (v25 == &v23)
  {
    v17 = 4;
    result = &v23;
    return (uint64_t *)(*(uint64_t (**)(void))(*result + 8 * v17))();
  }
  if (v25)
  {
    v17 = 5;
    return (uint64_t *)(*(uint64_t (**)(void))(*result + 8 * v17))();
  }
  return result;
}

void sub_2395670EC(_Unwind_Exception *a1)
{
  pthread_mutex_t *v1;

  sub_2397A16B4(v1);
  _Unwind_Resume(a1);
}

void sub_239567178(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_23942FE80((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_23956718C(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  void *v5;

  v2 = (_QWORD *)(a1 + 32);
  v3 = *(_QWORD **)(a1 + 56);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  v5 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v5;
    operator delete(v5);
  }
  return a1;
}

uint64_t sub_2395671EC(uint64_t a1)
{
  pthread_mutex_t *v2;
  int v3;
  uint64_t result;

  v2 = (pthread_mutex_t *)(a1 + 232);
  sub_2397A1694((pthread_mutex_t *)(a1 + 232));
  v3 = *(unsigned __int8 *)(a1 + 112);
  result = sub_2397A16B4(v2);
  if (!v3)
  {
    sub_2395687B4(a1 + 56);
    result = *(_QWORD *)(a1 + 40);
    if (result)
      return sub_2397A2D24(result);
  }
  return result;
}

uint64_t sub_239567250(uint64_t a1)
{
  pthread_mutex_t *v2;
  int v3;
  uint64_t result;

  v2 = (pthread_mutex_t *)(a1 + 232);
  sub_2397A1694((pthread_mutex_t *)(a1 + 232));
  v3 = *(unsigned __int8 *)(a1 + 112);
  result = sub_2397A16B4(v2);
  if (!v3)
  {
    sub_239569D58(a1 + 56);
    result = *(_QWORD *)(a1 + 40);
    if (result)
      return sub_2397A2D24(result);
  }
  return result;
}

uint64_t sub_2395672B4(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = &off_250ADE168;
  os_release(*(void **)(a1 + 408));
  v2 = *(void **)(a1 + 416);
  if (v2)
  {
    *(_QWORD *)(a1 + 424) = v2;
    operator delete(v2);
  }
  return sub_239568E60(a1);
}

uint64_t sub_2395672FC(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = &off_250ADE078;
  os_release(*(void **)(a1 + 408));
  v2 = *(void **)(a1 + 416);
  if (v2)
  {
    *(_QWORD *)(a1 + 424) = v2;
    operator delete(v2);
  }
  return sub_239567958(a1);
}

void sub_239567348()
{
  JUMPOUT(0x23B83E31CLL);
}

__n128 sub_23956735C(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_250ADDFF8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_239567394(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_250ADDFF8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_2395673B4(uint64_t a1)
{
  os_release(**(void ***)(a1 + 8));
}

void sub_2395673C0(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_250ADE040;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_2395673D0(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_250ADE040;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x23B83E31CLL);
}

uint64_t sub_239567400(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t sub_239567410(uint64_t a1, unint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  os_signpost_id_t v10;
  uint64_t v11;
  unsigned int v13[4];
  void *__p;
  char v15;
  _QWORD v16[3];
  _QWORD *v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a1 = &off_250ADE078;
  v16[0] = &off_250ADE0A8;
  v16[1] = a1;
  v17 = v16;
  sub_2397A1C7C((uint64_t)v13, a2);
  sub_239567618(a1, (uint64_t)v16, v13, 0x7FFFFFFFu);
  if (v15 < 0)
  {
    operator delete(__p);
    v4 = v17;
    if (v17 != v16)
      goto LABEL_3;
LABEL_6:
    v5 = 4;
    v4 = v16;
    goto LABEL_7;
  }
  v4 = v17;
  if (v17 == v16)
    goto LABEL_6;
LABEL_3:
  if (!v4)
    goto LABEL_8;
  v5 = 5;
LABEL_7:
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_8:
  *(_QWORD *)a1 = &off_250ADE078;
  *(_QWORD *)(a1 + 424) = 0;
  *(_QWORD *)(a1 + 432) = 0;
  *(_QWORD *)(a1 + 416) = 0;
  *(_QWORD *)(a1 + 408) = os_log_create("com.apple.corepg", "image.imageengine");
  v7 = *(_QWORD *)(a1 + 416);
  v6 = *(_QWORD *)(a1 + 424);
  v8 = (v6 - v7) >> 3;
  if (a2 <= v8)
  {
    if (a2 < v8)
    {
      v6 = v7 + 8 * a2;
      *(_QWORD *)(a1 + 424) = v6;
    }
  }
  else
  {
    sub_23946DAD4(a1 + 416, a2 - v8);
    v7 = *(_QWORD *)(a1 + 416);
    v6 = *(_QWORD *)(a1 + 424);
  }
  if (v6 != v7)
  {
    v9 = 0;
    do
    {
      v10 = os_signpost_id_generate(*(os_log_t *)(a1 + 408));
      v11 = *(_QWORD *)(a1 + 416);
      *(_QWORD *)(v11 + 8 * v9++) = v10;
    }
    while (v9 < (*(_QWORD *)(a1 + 424) - v11) >> 3);
  }
  return a1;
}

void sub_239567584(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void *v5;

  v3 = v2;
  v5 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v1 + 424) = v5;
    operator delete(v5);
  }
  sub_239567958(v1);
  _Unwind_Resume(a1);
}

void sub_2395675AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t *a22)
{
  if (a17 < 0)
    operator delete(__p);
  if (a22 == &a19)
  {
    (*(void (**)(void))(a19 + 32))();
    _Unwind_Resume(exception_object);
  }
  if (!a22)
    _Unwind_Resume(exception_object);
  (*(void (**)(void))(*a22 + 40))();
  _Unwind_Resume(exception_object);
}

uint64_t sub_239567618(uint64_t a1, uint64_t a2, unsigned int *a3, unsigned int a4)
{
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  __int128 v11;
  _QWORD *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD v22[3];
  _QWORD *v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a1 = &off_250ADE0F0;
  v7 = a1 + 8;
  v8 = *(_QWORD *)(a2 + 24);
  if (v8)
  {
    if (v8 == a2)
    {
      *(_QWORD *)(a1 + 32) = v7;
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 24) + 24))(*(_QWORD *)(a2 + 24), v7);
    }
    else
    {
      *(_QWORD *)(a1 + 32) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
    }
  }
  else
  {
    *(_QWORD *)(a1 + 32) = 0;
  }
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  v9 = *a3;
  if (*a3 <= a4)
    v9 = a4;
  *(_DWORD *)(a1 + 56) = v9;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_BYTE *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  sub_2397A1618((pthread_mutex_t *)(a1 + 232));
  v10 = *(_DWORD *)(a1 + 56);
  if (v10 >= 0x7FFFFFFF)
  {
    *(_DWORD *)(a1 + 56) = 0x7FFFFFFF;
    v10 = 0x7FFFFFFF;
  }
  else if (v10 < 2)
  {
    v10 = 1;
  }
  *(_DWORD *)(a1 + 56) = v10;
  pthread_cond_init((pthread_cond_t *)(a1 + 136), 0);
  pthread_cond_init((pthread_cond_t *)(a1 + 184), 0);
  *(_OWORD *)(a1 + 296) = *(_OWORD *)a3;
  if (*((char *)a3 + 39) < 0)
  {
    sub_23941A7F8((_BYTE *)(a1 + 312), *((void **)a3 + 2), *((_QWORD *)a3 + 3));
  }
  else
  {
    v11 = *((_OWORD *)a3 + 1);
    *(_QWORD *)(a1 + 328) = *((_QWORD *)a3 + 4);
    *(_OWORD *)(a1 + 312) = v11;
  }
  *(_DWORD *)(a1 + 336) = a3[10];
  sub_2397A1618((pthread_mutex_t *)(a1 + 344));
  if (*(_QWORD *)(a1 + 296))
  {
    v12 = operator new(0x178uLL);
    v12[1] = 0;
    v12[2] = 0;
    *v12 = &off_250ADB8B0;
    v13 = sub_2397A2A4C((uint64_t)(v12 + 3), a1 + 296);
    v14 = *(std::__shared_weak_count **)(a1 + 48);
    *(_QWORD *)(a1 + 40) = v13;
    *(_QWORD *)(a1 + 48) = v12;
    if (v14)
    {
      p_shared_owners = (unint64_t *)&v14->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    v17 = *(unint64_t **)(a1 + 40);
    v18 = *(_QWORD *)(a1 + 296);
    v22[0] = &off_250ADE120;
    v22[1] = a1;
    v23 = v22;
    sub_2397A3340(v17, v18, v22, 0);
    v19 = v23;
    if (v23 == v22)
    {
      v20 = 4;
      v19 = v22;
      goto LABEL_25;
    }
    if (v23)
    {
      v20 = 5;
LABEL_25:
      (*(void (**)(void))(*v19 + 8 * v20))();
    }
  }
  return a1;
}

void sub_239567878(_Unwind_Exception *a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v6;
  uint64_t v7;

  sub_23956872C(v4);
  sub_239416DA0(v3);
  v6 = *(_QWORD **)(v1 + 32);
  if (v6 == v2)
  {
    v7 = 4;
  }
  else
  {
    if (!v6)
      goto LABEL_6;
    v7 = 5;
    v2 = *(_QWORD **)(v1 + 32);
  }
  (*(void (**)(_QWORD *))(*v2 + 8 * v7))(v2);
LABEL_6:
  _Unwind_Resume(a1);
}

uint64_t sub_239567958(uint64_t a1)
{
  pthread_mutex_t *v2;
  int v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;

  *(_QWORD *)a1 = &off_250ADE0F0;
  v2 = (pthread_mutex_t *)(a1 + 232);
  sub_2397A1694((pthread_mutex_t *)(a1 + 232));
  v3 = *(unsigned __int8 *)(a1 + 112);
  sub_2397A16B4(v2);
  if (!v3)
  {
    sub_2395687B4(a1 + 56);
    v4 = *(_QWORD *)(a1 + 40);
    if (v4)
      sub_2397A2D24(v4);
  }
  sub_2397A163C((pthread_mutex_t *)(a1 + 344));
  if (*(char *)(a1 + 335) < 0)
    operator delete(*(void **)(a1 + 312));
  sub_23956872C(a1 + 56);
  v5 = *(std::__shared_weak_count **)(a1 + 48);
  if (!v5)
    goto LABEL_10;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(p_shared_owners);
  while (__stlxr(v7 - 1, p_shared_owners));
  if (v7)
  {
LABEL_10:
    v8 = (_QWORD *)(a1 + 8);
    v9 = *(_QWORD **)(a1 + 32);
    if (v9 != (_QWORD *)(a1 + 8))
      goto LABEL_11;
LABEL_14:
    v10 = 4;
    v9 = v8;
    goto LABEL_15;
  }
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  v8 = (_QWORD *)(a1 + 8);
  v9 = *(_QWORD **)(a1 + 32);
  if (v9 == (_QWORD *)(a1 + 8))
    goto LABEL_14;
LABEL_11:
  if (v9)
  {
    v10 = 5;
LABEL_15:
    (*(void (**)(void))(*v9 + 8 * v10))();
  }
  return a1;
}

void sub_239567A60(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = &off_250ADE078;
  os_release(*(void **)(a1 + 408));
  v2 = *(void **)(a1 + 416);
  if (v2)
  {
    *(_QWORD *)(a1 + 424) = v2;
    operator delete(v2);
  }
  sub_239567958(a1);
  JUMPOUT(0x23B83E31CLL);
}

void sub_239567AC0()
{
  JUMPOUT(0x23B83E31CLL);
}

_QWORD *sub_239567AD4(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_250ADE0A8;
  result[1] = v3;
  return result;
}

uint64_t sub_239567B08(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_250ADE0A8;
  a2[1] = v2;
  return result;
}

void sub_239567B24(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  sub_239567B30((uint64_t *)(a1 + 8), a2, *a3, a4);
}

void sub_239567B30(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  os_signpost_id_t v8;
  NSObject *v9;
  uint64_t v10;
  NSObject *v11;
  char v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  int v19;
  uint64_t v20;
  __int128 buf;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  v7 = *a1;
  v8 = *(_QWORD *)(*(_QWORD *)(*a1 + 416) + 8 * a3);
  if (v8 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v9 = *(NSObject **)(v7 + 408);
    if (os_signpost_enabled(v9))
    {
      LODWORD(buf) = 134217984;
      *(_QWORD *)((char *)&buf + 4) = a3;
      _os_signpost_emit_with_name_impl(&dword_23940C000, v9, OS_SIGNPOST_INTERVAL_BEGIN, v8, "LoadImage", "At thread %zu", (uint8_t *)&buf, 0xCu);
    }
  }
  v10 = *(_QWORD *)(a2 + 24);
  if (!v10)
    sub_2394172E0();
  (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)v10 + 48))(&buf);
  if (v8 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v11 = *(NSObject **)(v7 + 408);
    if (os_signpost_enabled(v11))
    {
      v19 = 134217984;
      v20 = a3;
      _os_signpost_emit_with_name_impl(&dword_23940C000, v11, OS_SIGNPOST_INTERVAL_END, v8, "LoadImage", "At thread %zu", (uint8_t *)&v19, 0xCu);
    }
  }
  v12 = buf;
  if ((_QWORD)buf)
  {
    v13 = *((_QWORD *)&buf + 1);
    *(_QWORD *)a4 = buf;
    *(_QWORD *)(a4 + 8) = v13;
    v12 = 1;
    if (!v13)
      goto LABEL_14;
  }
  else
  {
    v13 = *((_QWORD *)&buf + 1);
    *(_QWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = v13;
    if (!v13)
      goto LABEL_14;
  }
  v14 = (unint64_t *)(v13 + 8);
  do
    v15 = __ldxr(v14);
  while (__stxr(v15 + 1, v14));
LABEL_14:
  *(_BYTE *)(a4 + 16) = v12;
  v16 = (std::__shared_weak_count *)*((_QWORD *)&buf + 1);
  if (*((_QWORD *)&buf + 1))
  {
    v17 = (unint64_t *)(*((_QWORD *)&buf + 1) + 8);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
}

void sub_239567CF8(uint64_t a1)
{
  sub_239567958(a1);
  JUMPOUT(0x23B83E31CLL);
}

uint64_t sub_239567D1C(uint64_t a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  void **v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;

  v2 = *(void ***)(a1 + 8);
  v3 = *(void ***)(a1 + 16);
  if (v3 == v2)
  {
    v3 = *(void ***)(a1 + 8);
    *(_QWORD *)(a1 + 40) = 0;
    v13 = 0;
    goto LABEL_20;
  }
  v4 = *(_QWORD *)(a1 + 32);
  v5 = &v2[v4 >> 6];
  v6 = (char *)*v5 + 64 * (v4 & 0x3F);
  v7 = *(uint64_t *)((char *)v2 + (((*(_QWORD *)(a1 + 40) + v4) >> 3) & 0x1FFFFFFFFFFFFFF8))
     + 64 * ((*(_QWORD *)(a1 + 40) + v4) & 0x3F);
  if (v6 == (_QWORD *)v7)
    goto LABEL_18;
  do
  {
    v8 = (_QWORD *)v6[7];
    if (v8 == v6 + 4)
    {
      v8 = v6 + 4;
      v9 = 4;
    }
    else
    {
      if (!v8)
        goto LABEL_10;
      v9 = 5;
    }
    (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_10:
    v10 = (_QWORD *)v6[3];
    if (v10 == v6)
    {
      v10 = v6;
      v11 = 4;
    }
    else
    {
      if (!v10)
        goto LABEL_15;
      v11 = 5;
    }
    (*(void (**)(void))(*v10 + 8 * v11))();
LABEL_15:
    v6 += 8;
    if ((char *)v6 - (_BYTE *)*v5 == 4096)
    {
      v12 = v5[1];
      ++v5;
      v6 = v12;
    }
  }
  while (v6 != (_QWORD *)v7);
  v2 = *(void ***)(a1 + 8);
  v3 = *(void ***)(a1 + 16);
LABEL_18:
  *(_QWORD *)(a1 + 40) = 0;
  v13 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = *(void ***)(a1 + 16);
      v2 = (void **)(*(_QWORD *)(a1 + 8) + 8);
      *(_QWORD *)(a1 + 8) = v2;
      v13 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
LABEL_20:
  v14 = v13 >> 3;
  if (v14 == 1)
  {
    v15 = 32;
LABEL_25:
    *(_QWORD *)(a1 + 32) = v15;
  }
  else if (v14 == 2)
  {
    v15 = 64;
    goto LABEL_25;
  }
  if (v2 != v3)
  {
    do
    {
      v16 = *v2++;
      operator delete(v16);
    }
    while (v2 != v3);
    v18 = *(_QWORD *)(a1 + 8);
    v17 = *(_QWORD *)(a1 + 16);
    if (v17 != v18)
      *(_QWORD *)(a1 + 16) = v17 + ((v18 - v17 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_239567EE0()
{
  JUMPOUT(0x23B83E31CLL);
}

_QWORD *sub_239567EF4(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_250ADE120;
  result[1] = v3;
  return result;
}

uint64_t sub_239567F28(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_250ADE120;
  a2[1] = v2;
  return result;
}

_QWORD *sub_239567F44(uint64_t a1, uint64_t *a2)
{
  return sub_239567F50((_QWORD *)(a1 + 8), *a2);
}

_QWORD *sub_239567F50(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  unsigned int *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *result;
  uint64_t v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  uint64_t v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  uint64_t *v24;
  _BYTE v25[24];
  _BYTE *v26;
  char v27;
  _QWORD v28[3];
  _QWORD *v29;
  _BYTE v30[24];
  _BYTE *v31;
  char v32;
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  v3 = *a1;
  v4 = (unsigned int *)(*a1 + 56);
  sub_239568220(v4, (uint64_t)v28);
  while (v32)
  {
    if (v31)
    {
      v21 = a2;
      v7 = *(_QWORD *)(v3 + 32);
      if (!v7)
        sub_2394172E0();
      (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD *, uint64_t *))(*(_QWORD *)v7 + 48))(&v22, v7, v28, &v21);
      if (!v31)
        sub_2394172E0();
      (*(void (**)(_BYTE *, uint64_t *))(*(_QWORD *)v31 + 48))(v31, &v22);
      v8 = v23;
      if (v23)
      {
        p_shared_owners = (unint64_t *)&v23->__shared_owners_;
        do
          v10 = __ldaxr(p_shared_owners);
        while (__stlxr(v10 - 1, p_shared_owners));
LABEL_17:
        if (!v10)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
    }
    else
    {
      v22 = a2;
      v11 = *(_QWORD *)(v3 + 32);
      if (!v11)
        sub_2394172E0();
      (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD *, uint64_t *))(*(_QWORD *)v11 + 48))(&v19, v11, v28, &v22);
      v8 = v20;
      if (v20)
      {
        v12 = (unint64_t *)&v20->__shared_owners_;
        do
          v10 = __ldaxr(v12);
        while (__stlxr(v10 - 1, v12));
        goto LABEL_17;
      }
    }
    sub_239568220(v4, (uint64_t)&v22);
    sub_2395685F8(v28, (uint64_t)&v22);
    v32 = v27;
    v13 = v26;
    if (v26 == v25)
    {
      v13 = v25;
      v14 = 4;
    }
    else
    {
      if (!v26)
        goto LABEL_24;
      v14 = 5;
    }
    (*(void (**)(void))(*v13 + 8 * v14))();
LABEL_24:
    v5 = v24;
    if (v24 == &v22)
    {
      v5 = &v22;
      v6 = 4;
    }
    else
    {
      if (!v24)
        continue;
      v6 = 5;
    }
    (*(void (**)(void))(*v5 + 8 * v6))();
  }
  v15 = v31;
  if (v31 == v30)
  {
    v16 = 4;
    v15 = v30;
  }
  else
  {
    if (!v31)
      goto LABEL_32;
    v16 = 5;
  }
  (*(void (**)(void))(*v15 + 8 * v16))();
LABEL_32:
  result = v29;
  if (v29 == v28)
  {
    v18 = 4;
    result = v28;
  }
  else
  {
    if (!v29)
      return result;
    v18 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v18))();
}

void sub_23956819C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  sub_23942FE80((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_2395681B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  sub_23942FE80((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_2395681C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v7;
  va_list va;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  va_list va1;

  va_start(va1, a6);
  va_start(va, a6);
  v7 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  sub_239416DA0((uint64_t)va);
  sub_23942FE80((uint64_t *)va1);
  _Unwind_Resume(a1);
}

void sub_23956820C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  sub_23942FE80((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_239568220@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X8>)
{
  pthread_mutex_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD v27[3];
  _QWORD *v28;
  _QWORD v29[3];
  _QWORD *v30;
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  v4 = (pthread_mutex_t *)(a1 + 44);
  sub_2397A1694((pthread_mutex_t *)(a1 + 44));
  if (*((_QWORD *)a1 + 6))
  {
LABEL_4:
    v5 = *(_QWORD *)(*((_QWORD *)a1 + 2) + ((*((_QWORD *)a1 + 5) >> 3) & 0x1FFFFFFFFFFFFFF8));
    v6 = *((_QWORD *)a1 + 5) & 0x3FLL;
    v7 = v5 + (v6 << 6);
    v8 = *(_QWORD *)(v7 + 24);
    if (v8)
    {
      if (v8 == v7)
      {
        v28 = v27;
        (*(void (**)(_QWORD, _QWORD *))(**(_QWORD **)(v7 + 24) + 24))(*(_QWORD *)(v7 + 24), v27);
LABEL_10:
        v9 = v29;
        v10 = v5 + (v6 << 6);
        v13 = *(_QWORD *)(v10 + 56);
        v12 = (_QWORD *)(v10 + 56);
        v11 = v13;
        if (v13)
        {
          if (v11 == v5 + (v6 << 6) + 32)
          {
            v30 = v29;
            (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)*v12 + 24))(*v12, v29);
LABEL_15:
            v14 = (_QWORD *)(*(_QWORD *)(*((_QWORD *)a1 + 2) + ((*((_QWORD *)a1 + 5) >> 3) & 0x1FFFFFFFFFFFFFF8))
                           + ((*((_QWORD *)a1 + 5) & 0x3FLL) << 6));
            v15 = (_QWORD *)v14[7];
            if (v15 == v14 + 4)
            {
              v16 = 4;
              v15 = v14 + 4;
            }
            else
            {
              if (!v15)
                goto LABEL_20;
              v16 = 5;
            }
            (*(void (**)(void))(*v15 + 8 * v16))();
LABEL_20:
            v17 = (_QWORD *)v14[3];
            if (v17 == v14)
            {
              v18 = 4;
            }
            else
            {
              if (!v17)
                goto LABEL_25;
              v18 = 5;
              v14 = (_QWORD *)v14[3];
            }
            (*(void (**)(_QWORD *))(*v14 + 8 * v18))(v14);
LABEL_25:
            v19 = *((_QWORD *)a1 + 6) - 1;
            v20 = *((_QWORD *)a1 + 5) + 1;
            *((_QWORD *)a1 + 5) = v20;
            *((_QWORD *)a1 + 6) = v19;
            if (v20 >= 0x80)
            {
              operator delete(**((void ***)a1 + 2));
              *((_QWORD *)a1 + 2) += 8;
              v19 = *((_QWORD *)a1 + 6);
              *((_QWORD *)a1 + 5) -= 64;
            }
            if (v19 < *a1)
              pthread_cond_signal((pthread_cond_t *)(a1 + 20));
            v21 = (uint64_t)v28;
            if (v28)
            {
              if (v28 == v27)
              {
                *(_QWORD *)(a2 + 24) = a2;
                (*(void (**)(_QWORD *, uint64_t))(v27[0] + 24))(v27, a2);
LABEL_34:
                v22 = (uint64_t)v30;
                if (v30)
                {
                  if (v30 == v29)
                  {
                    *(_QWORD *)(a2 + 56) = a2 + 32;
                    (*(void (**)(_QWORD *))(v29[0] + 24))(v29);
LABEL_39:
                    *(_BYTE *)(a2 + 64) = 1;
                    if (v30 == v29)
                    {
                      v23 = 4;
                    }
                    else
                    {
                      if (!v30)
                        goto LABEL_44;
                      v23 = 5;
                      v9 = v30;
                    }
                    (*(void (**)(_QWORD *))(*v9 + 8 * v23))(v9);
LABEL_44:
                    v24 = v28;
                    if (v28 == v27)
                    {
                      v25 = 4;
                      v24 = v27;
                    }
                    else
                    {
                      if (!v28)
                        return sub_2397A16B4(v4);
                      v25 = 5;
                    }
                    (*(void (**)(void))(*v24 + 8 * v25))();
                    return sub_2397A16B4(v4);
                  }
                  v22 = (*(uint64_t (**)(void))(*v30 + 16))();
                }
                *(_QWORD *)(a2 + 56) = v22;
                goto LABEL_39;
              }
              v21 = (*(uint64_t (**)(void))(*v28 + 16))();
            }
            *(_QWORD *)(a2 + 24) = v21;
            goto LABEL_34;
          }
          v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11);
        }
        v30 = (_QWORD *)v11;
        goto LABEL_15;
      }
      v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
    }
    v28 = (_QWORD *)v8;
    goto LABEL_10;
  }
  while (!*((_BYTE *)a1 + 56))
  {
    ++*((_QWORD *)a1 + 9);
    pthread_cond_wait((pthread_cond_t *)(a1 + 32), v4);
    --*((_QWORD *)a1 + 9);
    if (*((_QWORD *)a1 + 6))
      goto LABEL_4;
  }
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  *(_BYTE *)(a2 + 64) = 0;
  return sub_2397A16B4(v4);
}

void sub_239568544(_Unwind_Exception *a1, uint64_t a2, ...)
{
  pthread_mutex_t *v2;
  va_list va;

  va_start(va, a2);
  sub_23942FE80(va);
  sub_2397A16B4(v2);
  _Unwind_Resume(a1);
}

_QWORD *sub_2395685F8(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;

  v5 = a1 + 3;
  v4 = (_QWORD *)a1[3];
  *v5 = 0;
  if (v4 == a1)
  {
    v6 = 4;
    v4 = a1;
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v6 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v6))();
LABEL_6:
  v7 = (_QWORD *)(a2 + 24);
  v8 = *(_QWORD *)(a2 + 24);
  if (!v8)
  {
    v7 = v5;
    goto LABEL_10;
  }
  if (v8 != a2)
  {
    *v5 = v8;
LABEL_10:
    *v7 = 0;
    goto LABEL_12;
  }
  a1[3] = a1;
  (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)*v7 + 24))(*v7, a1);
LABEL_12:
  v10 = a1 + 7;
  v9 = (_QWORD *)a1[7];
  a1[7] = 0;
  if (v9 == a1 + 4)
  {
    v11 = 4;
    v9 = a1 + 4;
  }
  else
  {
    if (!v9)
      goto LABEL_17;
    v11 = 5;
  }
  (*(void (**)(void))(*v9 + 8 * v11))();
LABEL_17:
  v12 = (_QWORD *)(a2 + 56);
  v13 = *(_QWORD *)(a2 + 56);
  if (!v13)
  {
    v12 = a1 + 7;
    goto LABEL_21;
  }
  if (v13 != a2 + 32)
  {
    *v10 = v13;
LABEL_21:
    *v12 = 0;
    return a1;
  }
  *v10 = a1 + 4;
  (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)*v12 + 24))(*v12, a1 + 4);
  return a1;
}

uint64_t sub_23956872C(uint64_t a1)
{
  pthread_mutex_t *v2;
  int v3;

  v2 = (pthread_mutex_t *)(a1 + 176);
  sub_2397A1694((pthread_mutex_t *)(a1 + 176));
  v3 = *(unsigned __int8 *)(a1 + 56);
  sub_2397A16B4(v2);
  if (!v3)
    sub_2395687B4(a1);
  sub_2397A1694(v2);
  sub_2397A16B4(v2);
  pthread_cond_destroy((pthread_cond_t *)(a1 + 80));
  pthread_cond_destroy((pthread_cond_t *)(a1 + 128));
  sub_2397A163C(v2);
  sub_239567D1C(a1 + 8);
  return a1;
}

uint64_t sub_2395687B4(uint64_t a1)
{
  pthread_mutex_t *v2;

  v2 = (pthread_mutex_t *)(a1 + 176);
  sub_2397A1694((pthread_mutex_t *)(a1 + 176));
  *(_BYTE *)(a1 + 56) = 1;
  sub_2397A16B4(v2);
  sub_2397A1694(v2);
  if (*(uint64_t *)(a1 + 64) >= 1)
  {
    do
    {
      sub_2397A16B4(v2);
      if (pthread_cond_signal((pthread_cond_t *)(a1 + 80)))
        sub_239EC0734();
      sub_2397A1694(v2);
    }
    while (*(uint64_t *)(a1 + 64) > 0);
  }
  sub_2397A16B4(v2);
  sub_2397A1694(v2);
  while (*(_QWORD *)(a1 + 48) && *(uint64_t *)(a1 + 72) >= 1)
  {
    if (pthread_cond_wait((pthread_cond_t *)(a1 + 80), v2))
    {
      sub_239A444D4((uint64_t)"unknown file", 277, (uint64_t)"", (void (*)(void *))sub_239A4463C);
      sub_239A4475C();
      abort();
    }
  }
  sub_2397A16B4(v2);
  sub_2397A1694(v2);
  if (*(uint64_t *)(a1 + 72) >= 1)
  {
    do
    {
      sub_2397A16B4(v2);
      if (pthread_cond_signal((pthread_cond_t *)(a1 + 128)))
        sub_239EC0704();
      sub_2397A1694(v2);
    }
    while (*(uint64_t *)(a1 + 72) > 0);
  }
  sub_2397A16B4(v2);
  return 1;
}

void sub_2395688FC(_Unwind_Exception *a1)
{
  pthread_mutex_t *v1;

  sub_2397A16B4(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_239568918(uint64_t a1, unint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  os_signpost_id_t v10;
  uint64_t v11;
  unsigned int v13[4];
  void *__p;
  char v15;
  _QWORD v16[3];
  _QWORD *v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a1 = &off_250ADE168;
  v16[0] = &off_250ADE198;
  v16[1] = a1;
  v17 = v16;
  sub_2397A1C7C((uint64_t)v13, a2);
  sub_239568B20(a1, (uint64_t)v16, v13, 0x7FFFFFFFu);
  if (v15 < 0)
  {
    operator delete(__p);
    v4 = v17;
    if (v17 != v16)
      goto LABEL_3;
LABEL_6:
    v5 = 4;
    v4 = v16;
    goto LABEL_7;
  }
  v4 = v17;
  if (v17 == v16)
    goto LABEL_6;
LABEL_3:
  if (!v4)
    goto LABEL_8;
  v5 = 5;
LABEL_7:
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_8:
  *(_QWORD *)a1 = &off_250ADE168;
  *(_QWORD *)(a1 + 424) = 0;
  *(_QWORD *)(a1 + 432) = 0;
  *(_QWORD *)(a1 + 416) = 0;
  *(_QWORD *)(a1 + 408) = os_log_create("com.apple.corepg", "image.imageengine");
  v7 = *(_QWORD *)(a1 + 416);
  v6 = *(_QWORD *)(a1 + 424);
  v8 = (v6 - v7) >> 3;
  if (a2 <= v8)
  {
    if (a2 < v8)
    {
      v6 = v7 + 8 * a2;
      *(_QWORD *)(a1 + 424) = v6;
    }
  }
  else
  {
    sub_23946DAD4(a1 + 416, a2 - v8);
    v7 = *(_QWORD *)(a1 + 416);
    v6 = *(_QWORD *)(a1 + 424);
  }
  if (v6 != v7)
  {
    v9 = 0;
    do
    {
      v10 = os_signpost_id_generate(*(os_log_t *)(a1 + 408));
      v11 = *(_QWORD *)(a1 + 416);
      *(_QWORD *)(v11 + 8 * v9++) = v10;
    }
    while (v9 < (*(_QWORD *)(a1 + 424) - v11) >> 3);
  }
  return a1;
}

void sub_239568A8C(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void *v5;

  v3 = v2;
  v5 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v1 + 424) = v5;
    operator delete(v5);
  }
  sub_239568E60(v1);
  _Unwind_Resume(a1);
}

void sub_239568AB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t *a22)
{
  if (a17 < 0)
    operator delete(__p);
  if (a22 == &a19)
  {
    (*(void (**)(void))(a19 + 32))();
    _Unwind_Resume(exception_object);
  }
  if (!a22)
    _Unwind_Resume(exception_object);
  (*(void (**)(void))(*a22 + 40))();
  _Unwind_Resume(exception_object);
}

uint64_t sub_239568B20(uint64_t a1, uint64_t a2, unsigned int *a3, unsigned int a4)
{
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  __int128 v11;
  _QWORD *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD v22[3];
  _QWORD *v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a1 = &off_250ADE1E0;
  v7 = a1 + 8;
  v8 = *(_QWORD *)(a2 + 24);
  if (v8)
  {
    if (v8 == a2)
    {
      *(_QWORD *)(a1 + 32) = v7;
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 24) + 24))(*(_QWORD *)(a2 + 24), v7);
    }
    else
    {
      *(_QWORD *)(a1 + 32) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
    }
  }
  else
  {
    *(_QWORD *)(a1 + 32) = 0;
  }
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  v9 = *a3;
  if (*a3 <= a4)
    v9 = a4;
  *(_DWORD *)(a1 + 56) = v9;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_BYTE *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  sub_2397A1618((pthread_mutex_t *)(a1 + 232));
  v10 = *(_DWORD *)(a1 + 56);
  if (v10 >= 0x7FFFFFFF)
  {
    *(_DWORD *)(a1 + 56) = 0x7FFFFFFF;
    v10 = 0x7FFFFFFF;
  }
  else if (v10 < 2)
  {
    v10 = 1;
  }
  *(_DWORD *)(a1 + 56) = v10;
  pthread_cond_init((pthread_cond_t *)(a1 + 136), 0);
  pthread_cond_init((pthread_cond_t *)(a1 + 184), 0);
  *(_OWORD *)(a1 + 296) = *(_OWORD *)a3;
  if (*((char *)a3 + 39) < 0)
  {
    sub_23941A7F8((_BYTE *)(a1 + 312), *((void **)a3 + 2), *((_QWORD *)a3 + 3));
  }
  else
  {
    v11 = *((_OWORD *)a3 + 1);
    *(_QWORD *)(a1 + 328) = *((_QWORD *)a3 + 4);
    *(_OWORD *)(a1 + 312) = v11;
  }
  *(_DWORD *)(a1 + 336) = a3[10];
  sub_2397A1618((pthread_mutex_t *)(a1 + 344));
  if (*(_QWORD *)(a1 + 296))
  {
    v12 = operator new(0x178uLL);
    v12[1] = 0;
    v12[2] = 0;
    *v12 = &off_250ADB8B0;
    v13 = sub_2397A2A4C((uint64_t)(v12 + 3), a1 + 296);
    v14 = *(std::__shared_weak_count **)(a1 + 48);
    *(_QWORD *)(a1 + 40) = v13;
    *(_QWORD *)(a1 + 48) = v12;
    if (v14)
    {
      p_shared_owners = (unint64_t *)&v14->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    v17 = *(unint64_t **)(a1 + 40);
    v18 = *(_QWORD *)(a1 + 296);
    v22[0] = &off_250ADE210;
    v22[1] = a1;
    v23 = v22;
    sub_2397A3340(v17, v18, v22, 0);
    v19 = v23;
    if (v23 == v22)
    {
      v20 = 4;
      v19 = v22;
      goto LABEL_25;
    }
    if (v23)
    {
      v20 = 5;
LABEL_25:
      (*(void (**)(void))(*v19 + 8 * v20))();
    }
  }
  return a1;
}

void sub_239568D80(_Unwind_Exception *a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v6;
  uint64_t v7;

  sub_239569CD0(v4);
  sub_239416DA0(v3);
  v6 = *(_QWORD **)(v1 + 32);
  if (v6 == v2)
  {
    v7 = 4;
  }
  else
  {
    if (!v6)
      goto LABEL_6;
    v7 = 5;
    v2 = *(_QWORD **)(v1 + 32);
  }
  (*(void (**)(_QWORD *))(*v2 + 8 * v7))(v2);
LABEL_6:
  _Unwind_Resume(a1);
}

uint64_t sub_239568E60(uint64_t a1)
{
  pthread_mutex_t *v2;
  int v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;

  *(_QWORD *)a1 = &off_250ADE1E0;
  v2 = (pthread_mutex_t *)(a1 + 232);
  sub_2397A1694((pthread_mutex_t *)(a1 + 232));
  v3 = *(unsigned __int8 *)(a1 + 112);
  sub_2397A16B4(v2);
  if (!v3)
  {
    sub_239569D58(a1 + 56);
    v4 = *(_QWORD *)(a1 + 40);
    if (v4)
      sub_2397A2D24(v4);
  }
  sub_2397A163C((pthread_mutex_t *)(a1 + 344));
  if (*(char *)(a1 + 335) < 0)
    operator delete(*(void **)(a1 + 312));
  sub_239569CD0(a1 + 56);
  v5 = *(std::__shared_weak_count **)(a1 + 48);
  if (!v5)
    goto LABEL_10;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(p_shared_owners);
  while (__stlxr(v7 - 1, p_shared_owners));
  if (v7)
  {
LABEL_10:
    v8 = (_QWORD *)(a1 + 8);
    v9 = *(_QWORD **)(a1 + 32);
    if (v9 != (_QWORD *)(a1 + 8))
      goto LABEL_11;
LABEL_14:
    v10 = 4;
    v9 = v8;
    goto LABEL_15;
  }
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  v8 = (_QWORD *)(a1 + 8);
  v9 = *(_QWORD **)(a1 + 32);
  if (v9 == (_QWORD *)(a1 + 8))
    goto LABEL_14;
LABEL_11:
  if (v9)
  {
    v10 = 5;
LABEL_15:
    (*(void (**)(void))(*v9 + 8 * v10))();
  }
  return a1;
}

void sub_239568F68(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = &off_250ADE168;
  os_release(*(void **)(a1 + 408));
  v2 = *(void **)(a1 + 416);
  if (v2)
  {
    *(_QWORD *)(a1 + 424) = v2;
    operator delete(v2);
  }
  sub_239568E60(a1);
  JUMPOUT(0x23B83E31CLL);
}

_QWORD *sub_239568FC4(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *result;
  uint64_t v13;
  uint64_t v14;
  char v15;
  _QWORD v16[3];
  _QWORD *v17;
  _BYTE v18[24];
  _BYTE *v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  if (!*(_QWORD *)(a1 + 296))
  {
    sub_2397A1694((pthread_mutex_t *)(a1 + 344));
    if (a3[3])
    {
      v16[0] = 0;
      v7 = *(_QWORD *)(a1 + 32);
      if (!v7
        || (v15 = (*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *))(*(_QWORD *)v7 + 48))(v7, a2, v16),
            (v8 = a3[3]) == 0))
      {
        sub_2394172E0();
      }
      (*(void (**)(uint64_t, char *))(*(_QWORD *)v8 + 48))(v8, &v15);
    }
    else
    {
      v16[0] = 0;
      v14 = *(_QWORD *)(a1 + 32);
      if (!v14)
        sub_2394172E0();
      (*(void (**)(uint64_t, _QWORD *, _QWORD *))(*(_QWORD *)v14 + 48))(v14, a2, v16);
    }
    return (_QWORD *)sub_2397A16B4((pthread_mutex_t *)(a1 + 344));
  }
  v6 = (_QWORD *)a2[3];
  if (v6)
  {
    if (v6 == a2)
    {
      v17 = v16;
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, v16);
    }
    else
    {
      v17 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v6 + 16))(v6);
    }
  }
  else
  {
    v17 = 0;
  }
  v9 = v18;
  v10 = a3[3];
  if (!v10)
    goto LABEL_14;
  if ((_QWORD *)v10 != a3)
  {
    v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 16))(v10);
LABEL_14:
    v19 = (_BYTE *)v10;
    goto LABEL_16;
  }
  v19 = v18;
  (*(void (**)(_QWORD *, _BYTE *))(*a3 + 24))(a3, v18);
LABEL_16:
  sub_239569EBC((unsigned int *)(a1 + 56), (uint64_t)v16);
  if (v19 == v18)
  {
    v11 = 4;
    goto LABEL_20;
  }
  if (v19)
  {
    v11 = 5;
    v9 = v19;
LABEL_20:
    (*(void (**)(_QWORD *))(*v9 + 8 * v11))(v9);
  }
  result = v17;
  if (v17 == v16)
  {
    v13 = 4;
    result = v16;
    return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v13))();
  }
  if (v17)
  {
    v13 = 5;
    return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v13))();
  }
  return result;
}

void sub_2395691B8(_Unwind_Exception *a1)
{
  pthread_mutex_t *v1;

  sub_2397A16B4(v1);
  _Unwind_Resume(a1);
}

void sub_23956924C()
{
  JUMPOUT(0x23B83E31CLL);
}

_QWORD *sub_239569260(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_250ADE198;
  result[1] = v3;
  return result;
}

uint64_t sub_239569294(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_250ADE198;
  a2[1] = v2;
  return result;
}

uint64_t sub_2395692B0(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  return sub_2395692BC((uint64_t *)(a1 + 8), a2, *a3);
}

uint64_t sub_2395692BC(uint64_t *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  _QWORD *v5;
  os_signpost_id_t v6;
  NSObject *v7;
  uint64_t v8;
  NSObject *v9;
  _QWORD *v10;
  uint64_t v11;
  int v13;
  uint64_t v14;
  _BYTE v15[24];
  _BYTE *v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v4 = *a1;
  v5 = (_QWORD *)a2[3];
  if (v5)
  {
    if (v5 == a2)
    {
      v16 = v15;
      (*(void (**)(_QWORD *, _BYTE *))(*a2 + 24))(a2, v15);
    }
    else
    {
      v16 = (_BYTE *)(*(uint64_t (**)(_QWORD *))(*v5 + 16))(v5);
    }
  }
  else
  {
    v16 = 0;
  }
  v6 = *(_QWORD *)(*(_QWORD *)(v4 + 416) + 8 * a3);
  if (v6 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v7 = *(NSObject **)(v4 + 408);
    if (os_signpost_enabled(v7))
    {
      v13 = 134217984;
      v14 = a3;
      _os_signpost_emit_with_name_impl(&dword_23940C000, v7, OS_SIGNPOST_INTERVAL_BEGIN, v6, "SaveImage", "At thread %zu", (uint8_t *)&v13, 0xCu);
    }
  }
  if (!v16)
    sub_2394172E0();
  v8 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v16 + 48))(v16);
  if (v6 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v9 = *(NSObject **)(v4 + 408);
    if (os_signpost_enabled(v9))
    {
      v13 = 134217984;
      v14 = a3;
      _os_signpost_emit_with_name_impl(&dword_23940C000, v9, OS_SIGNPOST_INTERVAL_END, v6, "SaveImage", "At thread %zu", (uint8_t *)&v13, 0xCu);
    }
  }
  v10 = v16;
  if (v16 == v15)
  {
    v11 = 4;
    v10 = v15;
    goto LABEL_17;
  }
  if (v16)
  {
    v11 = 5;
LABEL_17:
    (*(void (**)(void))(*v10 + 8 * v11))();
  }
  return v8;
}

void sub_239569480(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t *a15)
{
  if (a15 == &a12)
  {
    (*(void (**)(void))(a12 + 32))();
    _Unwind_Resume(exception_object);
  }
  if (!a15)
    _Unwind_Resume(exception_object);
  (*(void (**)(void))(*a15 + 40))();
  _Unwind_Resume(exception_object);
}

void sub_2395694D8(uint64_t a1)
{
  sub_239568E60(a1);
  JUMPOUT(0x23B83E31CLL);
}

void sub_239569500()
{
  JUMPOUT(0x23B83E31CLL);
}

_QWORD *sub_239569514(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_250ADE210;
  result[1] = v3;
  return result;
}

uint64_t sub_239569548(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_250ADE210;
  a2[1] = v2;
  return result;
}

_QWORD *sub_239569564(uint64_t a1, uint64_t *a2)
{
  return sub_239569570((_QWORD *)(a1 + 8), *a2);
}

_QWORD *sub_239569570(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  unsigned int *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *result;
  uint64_t v14;
  char v15;
  _QWORD v16[3];
  _QWORD *v17;
  _BYTE v18[24];
  _BYTE *v19;
  char v20;
  _QWORD v21[3];
  _QWORD *v22;
  _BYTE v23[24];
  _BYTE *v24;
  char v25;
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  v3 = *a1;
  v4 = (unsigned int *)(*a1 + 56);
  sub_2395697C4(v4, (uint64_t)v21);
  while (v25)
  {
    if (v24)
    {
      v16[0] = a2;
      v7 = *(_QWORD *)(v3 + 32);
      if (!v7
        || (v15 = (*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *))(*(_QWORD *)v7 + 48))(v7, v21, v16), !v24))
      {
        sub_2394172E0();
      }
      (*(void (**)(_BYTE *, char *))(*(_QWORD *)v24 + 48))(v24, &v15);
    }
    else
    {
      v16[0] = a2;
      v8 = *(_QWORD *)(v3 + 32);
      if (!v8)
        sub_2394172E0();
      (*(void (**)(uint64_t, _QWORD *, _QWORD *))(*(_QWORD *)v8 + 48))(v8, v21, v16);
    }
    sub_2395697C4(v4, (uint64_t)v16);
    sub_239569B9C(v21, (uint64_t)v16);
    v25 = v20;
    v9 = v19;
    if (v19 == v18)
    {
      v9 = v18;
      v10 = 4;
    }
    else
    {
      if (!v19)
        goto LABEL_17;
      v10 = 5;
    }
    (*(void (**)(void))(*v9 + 8 * v10))();
LABEL_17:
    v5 = v17;
    if (v17 == v16)
    {
      v5 = v16;
      v6 = 4;
    }
    else
    {
      if (!v17)
        continue;
      v6 = 5;
    }
    (*(void (**)(void))(*v5 + 8 * v6))();
  }
  v11 = v24;
  if (v24 == v23)
  {
    v12 = 4;
    v11 = v23;
  }
  else
  {
    if (!v24)
      goto LABEL_25;
    v12 = 5;
  }
  (*(void (**)(void))(*v11 + 8 * v12))();
LABEL_25:
  result = v22;
  if (v22 == v21)
  {
    v14 = 4;
    result = v21;
  }
  else
  {
    if (!v22)
      return result;
    v14 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v14))();
}

void sub_239569760(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_23942FE80((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_239569774(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_23942FE80((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_239569788(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_23942FE80((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_23956979C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_23942FE80((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_2395697B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_23942FE80((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2395697C4@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X8>)
{
  pthread_mutex_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD v27[3];
  _QWORD *v28;
  _QWORD v29[3];
  _QWORD *v30;
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  v4 = (pthread_mutex_t *)(a1 + 44);
  sub_2397A1694((pthread_mutex_t *)(a1 + 44));
  if (*((_QWORD *)a1 + 6))
  {
LABEL_4:
    v5 = *(_QWORD *)(*((_QWORD *)a1 + 2) + ((*((_QWORD *)a1 + 5) >> 3) & 0x1FFFFFFFFFFFFFF8));
    v6 = *((_QWORD *)a1 + 5) & 0x3FLL;
    v7 = v5 + (v6 << 6);
    v8 = *(_QWORD *)(v7 + 24);
    if (v8)
    {
      if (v8 == v7)
      {
        v28 = v27;
        (*(void (**)(_QWORD, _QWORD *))(**(_QWORD **)(v7 + 24) + 24))(*(_QWORD *)(v7 + 24), v27);
LABEL_10:
        v9 = v29;
        v10 = v5 + (v6 << 6);
        v13 = *(_QWORD *)(v10 + 56);
        v12 = (_QWORD *)(v10 + 56);
        v11 = v13;
        if (v13)
        {
          if (v11 == v5 + (v6 << 6) + 32)
          {
            v30 = v29;
            (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)*v12 + 24))(*v12, v29);
LABEL_15:
            v14 = (_QWORD *)(*(_QWORD *)(*((_QWORD *)a1 + 2) + ((*((_QWORD *)a1 + 5) >> 3) & 0x1FFFFFFFFFFFFFF8))
                           + ((*((_QWORD *)a1 + 5) & 0x3FLL) << 6));
            v15 = (_QWORD *)v14[7];
            if (v15 == v14 + 4)
            {
              v16 = 4;
              v15 = v14 + 4;
            }
            else
            {
              if (!v15)
                goto LABEL_20;
              v16 = 5;
            }
            (*(void (**)(void))(*v15 + 8 * v16))();
LABEL_20:
            v17 = (_QWORD *)v14[3];
            if (v17 == v14)
            {
              v18 = 4;
            }
            else
            {
              if (!v17)
                goto LABEL_25;
              v18 = 5;
              v14 = (_QWORD *)v14[3];
            }
            (*(void (**)(_QWORD *))(*v14 + 8 * v18))(v14);
LABEL_25:
            v19 = *((_QWORD *)a1 + 6) - 1;
            v20 = *((_QWORD *)a1 + 5) + 1;
            *((_QWORD *)a1 + 5) = v20;
            *((_QWORD *)a1 + 6) = v19;
            if (v20 >= 0x80)
            {
              operator delete(**((void ***)a1 + 2));
              *((_QWORD *)a1 + 2) += 8;
              v19 = *((_QWORD *)a1 + 6);
              *((_QWORD *)a1 + 5) -= 64;
            }
            if (v19 < *a1)
              pthread_cond_signal((pthread_cond_t *)(a1 + 20));
            v21 = (uint64_t)v28;
            if (v28)
            {
              if (v28 == v27)
              {
                *(_QWORD *)(a2 + 24) = a2;
                (*(void (**)(_QWORD *, uint64_t))(v27[0] + 24))(v27, a2);
LABEL_34:
                v22 = (uint64_t)v30;
                if (v30)
                {
                  if (v30 == v29)
                  {
                    *(_QWORD *)(a2 + 56) = a2 + 32;
                    (*(void (**)(_QWORD *))(v29[0] + 24))(v29);
LABEL_39:
                    *(_BYTE *)(a2 + 64) = 1;
                    if (v30 == v29)
                    {
                      v23 = 4;
                    }
                    else
                    {
                      if (!v30)
                        goto LABEL_44;
                      v23 = 5;
                      v9 = v30;
                    }
                    (*(void (**)(_QWORD *))(*v9 + 8 * v23))(v9);
LABEL_44:
                    v24 = v28;
                    if (v28 == v27)
                    {
                      v25 = 4;
                      v24 = v27;
                    }
                    else
                    {
                      if (!v28)
                        return sub_2397A16B4(v4);
                      v25 = 5;
                    }
                    (*(void (**)(void))(*v24 + 8 * v25))();
                    return sub_2397A16B4(v4);
                  }
                  v22 = (*(uint64_t (**)(void))(*v30 + 16))();
                }
                *(_QWORD *)(a2 + 56) = v22;
                goto LABEL_39;
              }
              v21 = (*(uint64_t (**)(void))(*v28 + 16))();
            }
            *(_QWORD *)(a2 + 24) = v21;
            goto LABEL_34;
          }
          v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11);
        }
        v30 = (_QWORD *)v11;
        goto LABEL_15;
      }
      v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
    }
    v28 = (_QWORD *)v8;
    goto LABEL_10;
  }
  while (!*((_BYTE *)a1 + 56))
  {
    ++*((_QWORD *)a1 + 9);
    pthread_cond_wait((pthread_cond_t *)(a1 + 32), v4);
    --*((_QWORD *)a1 + 9);
    if (*((_QWORD *)a1 + 6))
      goto LABEL_4;
  }
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  *(_BYTE *)(a2 + 64) = 0;
  return sub_2397A16B4(v4);
}

void sub_239569AE8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  pthread_mutex_t *v2;
  va_list va;

  va_start(va, a2);
  sub_23942FE80(va);
  sub_2397A16B4(v2);
  _Unwind_Resume(a1);
}

_QWORD *sub_239569B9C(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;

  v5 = a1 + 3;
  v4 = (_QWORD *)a1[3];
  *v5 = 0;
  if (v4 == a1)
  {
    v6 = 4;
    v4 = a1;
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v6 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v6))();
LABEL_6:
  v7 = (_QWORD *)(a2 + 24);
  v8 = *(_QWORD *)(a2 + 24);
  if (!v8)
  {
    v7 = v5;
    goto LABEL_10;
  }
  if (v8 != a2)
  {
    *v5 = v8;
LABEL_10:
    *v7 = 0;
    goto LABEL_12;
  }
  a1[3] = a1;
  (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)*v7 + 24))(*v7, a1);
LABEL_12:
  v10 = a1 + 7;
  v9 = (_QWORD *)a1[7];
  a1[7] = 0;
  if (v9 == a1 + 4)
  {
    v11 = 4;
    v9 = a1 + 4;
  }
  else
  {
    if (!v9)
      goto LABEL_17;
    v11 = 5;
  }
  (*(void (**)(void))(*v9 + 8 * v11))();
LABEL_17:
  v12 = (_QWORD *)(a2 + 56);
  v13 = *(_QWORD *)(a2 + 56);
  if (!v13)
  {
    v12 = a1 + 7;
    goto LABEL_21;
  }
  if (v13 != a2 + 32)
  {
    *v10 = v13;
LABEL_21:
    *v12 = 0;
    return a1;
  }
  *v10 = a1 + 4;
  (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)*v12 + 24))(*v12, a1 + 4);
  return a1;
}

uint64_t sub_239569CD0(uint64_t a1)
{
  pthread_mutex_t *v2;
  int v3;

  v2 = (pthread_mutex_t *)(a1 + 176);
  sub_2397A1694((pthread_mutex_t *)(a1 + 176));
  v3 = *(unsigned __int8 *)(a1 + 56);
  sub_2397A16B4(v2);
  if (!v3)
    sub_239569D58(a1);
  sub_2397A1694(v2);
  sub_2397A16B4(v2);
  pthread_cond_destroy((pthread_cond_t *)(a1 + 80));
  pthread_cond_destroy((pthread_cond_t *)(a1 + 128));
  sub_2397A163C(v2);
  sub_239567D1C(a1 + 8);
  return a1;
}

uint64_t sub_239569D58(uint64_t a1)
{
  pthread_mutex_t *v2;

  v2 = (pthread_mutex_t *)(a1 + 176);
  sub_2397A1694((pthread_mutex_t *)(a1 + 176));
  *(_BYTE *)(a1 + 56) = 1;
  sub_2397A16B4(v2);
  sub_2397A1694(v2);
  if (*(uint64_t *)(a1 + 64) >= 1)
  {
    do
    {
      sub_2397A16B4(v2);
      if (pthread_cond_signal((pthread_cond_t *)(a1 + 80)))
        sub_239EC0734();
      sub_2397A1694(v2);
    }
    while (*(uint64_t *)(a1 + 64) > 0);
  }
  sub_2397A16B4(v2);
  sub_2397A1694(v2);
  while (*(_QWORD *)(a1 + 48) && *(uint64_t *)(a1 + 72) >= 1)
  {
    if (pthread_cond_wait((pthread_cond_t *)(a1 + 80), v2))
    {
      sub_239A444D4((uint64_t)"unknown file", 277, (uint64_t)"", (void (*)(void *))sub_239A4463C);
      sub_239A4475C();
      abort();
    }
  }
  sub_2397A16B4(v2);
  sub_2397A1694(v2);
  if (*(uint64_t *)(a1 + 72) >= 1)
  {
    do
    {
      sub_2397A16B4(v2);
      if (pthread_cond_signal((pthread_cond_t *)(a1 + 128)))
        sub_239EC0704();
      sub_2397A1694(v2);
    }
    while (*(uint64_t *)(a1 + 72) > 0);
  }
  sub_2397A16B4(v2);
  return 1;
}

void sub_239569EA0(_Unwind_Exception *a1)
{
  pthread_mutex_t *v1;

  sub_2397A16B4(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_239569EBC(unsigned int *a1, uint64_t a2)
{
  pthread_mutex_t *v4;
  uint64_t v5;

  v4 = (pthread_mutex_t *)(a1 + 44);
  sub_2397A1694((pthread_mutex_t *)(a1 + 44));
  if (*((_QWORD *)a1 + 6) < (unint64_t)*a1)
  {
LABEL_4:
    if (!*((_BYTE *)a1 + 56))
    {
      sub_239569F94((_QWORD *)a1 + 1, a2);
      pthread_cond_signal((pthread_cond_t *)(a1 + 32));
      v5 = 1;
      goto LABEL_7;
    }
  }
  else
  {
    while (!*((_BYTE *)a1 + 56))
    {
      ++*((_QWORD *)a1 + 8);
      pthread_cond_wait((pthread_cond_t *)(a1 + 20), v4);
      --*((_QWORD *)a1 + 8);
      if (*((_QWORD *)a1 + 6) < (unint64_t)*a1)
        goto LABEL_4;
    }
  }
  v5 = 0;
LABEL_7:
  sub_2397A16B4(v4);
  return v5;
}

void sub_239569F74(_Unwind_Exception *a1)
{
  pthread_mutex_t *v1;

  sub_2397A16B4(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_239569F94(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t result;

  v4 = a1[1];
  v5 = a1[2];
  v6 = 8 * (v5 - v4) - 1;
  if (v5 == v4)
    v6 = 0;
  if (v6 == a1[5] + a1[4])
  {
    sub_23956A0FC((uint64_t)a1);
    v4 = a1[1];
    v5 = a1[2];
  }
  if (v5 != v4)
  {
    v7 = a1[5] + a1[4];
    v8 = *(_QWORD *)(v4 + ((v7 >> 3) & 0x1FFFFFFFFFFFFFF8)) + ((v7 & 0x3F) << 6);
    v9 = *(_QWORD *)(a2 + 24);
    if (v9)
      goto LABEL_7;
LABEL_11:
    *(_QWORD *)(v8 + 24) = 0;
    result = *(_QWORD *)(a2 + 56);
    if (!result)
      goto LABEL_16;
    goto LABEL_14;
  }
  v8 = 0;
  v9 = *(_QWORD *)(a2 + 24);
  if (!v9)
    goto LABEL_11;
LABEL_7:
  if (v9 == a2)
  {
    *(_QWORD *)(v8 + 24) = v8;
    (*(void (**)(_QWORD, unint64_t))(**(_QWORD **)(a2 + 24) + 24))(*(_QWORD *)(a2 + 24), v8);
    result = *(_QWORD *)(a2 + 56);
    if (!result)
      goto LABEL_16;
  }
  else
  {
    *(_QWORD *)(v8 + 24) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
    result = *(_QWORD *)(a2 + 56);
    if (!result)
      goto LABEL_16;
  }
LABEL_14:
  if (result == a2 + 32)
  {
    *(_QWORD *)(v8 + 56) = v8 + 32;
    result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 56) + 24))(*(_QWORD *)(a2 + 56));
    goto LABEL_18;
  }
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
LABEL_16:
  *(_QWORD *)(v8 + 56) = result;
LABEL_18:
  ++a1[5];
  return result;
}

void sub_23956A0C0(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)v1[3];
  if (v3 == v1)
  {
    v4 = 4;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
    v1 = (_QWORD *)v1[3];
  }
  (*(void (**)(_QWORD *))(*v1 + 8 * v4))(v1);
LABEL_6:
  _Unwind_Resume(exception_object);
}

void sub_23956A0FC(uint64_t a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  char *v5;
  _QWORD *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  void *v26;
  char *v27;
  char *v28;
  char *v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  char *v36;
  BOOL v37;
  int64_t v38;
  unint64_t v39;
  char *v40;
  _QWORD *v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  int64_t v45;
  unint64_t v46;
  char *v47;
  unint64_t v48;
  char *v49;
  uint64_t v50;
  char *v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  char *v57;
  size_t v58;
  unint64_t v59;
  char *v60;
  unint64_t v61;
  int64_t v62;
  unint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  __int128 *v69;
  char *v70;
  uint64_t v71;
  __int128 v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  __int128 *v77;
  _OWORD *v78;
  uint64_t v79;
  __int128 v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  __int128 *v85;
  _OWORD *v86;
  uint64_t v87;
  __int128 v88;
  uint64_t v89;
  void *v90;
  void *v91;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = v2 >= 0x40;
  v4 = v2 - 64;
  if (v3)
  {
    *(_QWORD *)(a1 + 32) = v4;
    v6 = *(_QWORD **)(a1 + 8);
    v5 = *(char **)(a1 + 16);
    v7 = (char *)(v6 + 1);
    v8 = *v6;
    *(_QWORD *)(a1 + 8) = v6 + 1;
    if (v5 != *(char **)(a1 + 24))
    {
LABEL_78:
      *(_QWORD *)v5 = v8;
      *(_QWORD *)(a1 + 16) += 8;
      return;
    }
    v9 = *(char **)a1;
    v10 = (uint64_t)&v7[-*(_QWORD *)a1];
    if ((unint64_t)v7 <= *(_QWORD *)a1)
    {
      v31 = (v5 - v9) >> 2;
      if (v5 == v9)
        v31 = 1;
      if (!(v31 >> 61))
      {
        v32 = v31 >> 2;
        v33 = 8 * v31;
        v34 = (char *)operator new(8 * v31);
        v35 = &v34[8 * v32];
        v36 = &v34[v33];
        v38 = v5 - v7;
        v37 = v5 == v7;
        v5 = v35;
        if (!v37)
        {
          v5 = &v35[v38 & 0xFFFFFFFFFFFFFFF8];
          v39 = v38 - 8;
          if ((unint64_t)(v38 - 8) >= 0x38)
          {
            v74 = &v34[8 * v32];
            v40 = v74;
            if ((unint64_t)(v74 - v7) >= 0x20)
            {
              v75 = (v39 >> 3) + 1;
              v76 = 8 * (v75 & 0x3FFFFFFFFFFFFFFCLL);
              v40 = &v35[v76];
              v7 += v76;
              v77 = (__int128 *)(v6 + 3);
              v78 = v74 + 16;
              v79 = v75 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v80 = *v77;
                *(v78 - 1) = *(v77 - 1);
                *v78 = v80;
                v77 += 2;
                v78 += 2;
                v79 -= 4;
              }
              while (v79);
              if (v75 == (v75 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_76;
            }
          }
          else
          {
            v40 = &v34[8 * v32];
          }
          do
          {
            v81 = *(_QWORD *)v7;
            v7 += 8;
            *(_QWORD *)v40 = v81;
            v40 += 8;
          }
          while (v40 != v5);
        }
        goto LABEL_76;
      }
LABEL_87:
      sub_239418A80();
    }
LABEL_5:
    v11 = v10 >> 3;
    if (v11 >= -1)
      v12 = v11 + 1;
    else
      v12 = v11 + 2;
    v13 = v12 >> 1;
    v14 = -v13;
    v15 = &v7[-8 * v13];
    v16 = v5 - v7;
    if (v5 != v7)
    {
      memmove(&v7[-8 * v13], v7, v5 - v7);
      v7 = *(char **)(a1 + 8);
    }
    v5 = &v15[v16];
    *(_QWORD *)(a1 + 8) = &v7[8 * v14];
    *(_QWORD *)(a1 + 16) = &v15[v16];
    goto LABEL_78;
  }
  v18 = *(_QWORD *)(a1 + 16);
  v17 = *(_QWORD *)(a1 + 24);
  v19 = *(_QWORD *)(a1 + 8);
  v20 = v18 - v19;
  v21 = (v18 - v19) >> 3;
  v22 = v17 - *(_QWORD *)a1;
  if (v21 < (unint64_t)(v22 >> 3))
  {
    if (v17 != v18)
    {
      v91 = operator new(0x1000uLL);
      sub_23946CE0C((char **)a1, &v91);
      return;
    }
    v91 = operator new(0x1000uLL);
    sub_23946CF98((void **)a1, &v91);
    v41 = *(_QWORD **)(a1 + 8);
    v5 = *(char **)(a1 + 16);
    v7 = (char *)(v41 + 1);
    v8 = *v41;
    *(_QWORD *)(a1 + 8) = v41 + 1;
    if (v5 != *(char **)(a1 + 24))
      goto LABEL_78;
    v9 = *(char **)a1;
    v10 = (uint64_t)&v7[-*(_QWORD *)a1];
    if ((unint64_t)v7 <= *(_QWORD *)a1)
    {
      v42 = (v5 - v9) >> 2;
      if (v5 == v9)
        v42 = 1;
      if (!(v42 >> 61))
      {
        v43 = v42 >> 2;
        v44 = 8 * v42;
        v34 = (char *)operator new(8 * v42);
        v35 = &v34[8 * v43];
        v36 = &v34[v44];
        v45 = v5 - v7;
        v37 = v5 == v7;
        v5 = v35;
        if (!v37)
        {
          v5 = &v35[v45 & 0xFFFFFFFFFFFFFFF8];
          v46 = v45 - 8;
          if ((unint64_t)(v45 - 8) >= 0x38)
          {
            v82 = &v34[8 * v43];
            v47 = v82;
            if ((unint64_t)(v82 - v7) >= 0x20)
            {
              v83 = (v46 >> 3) + 1;
              v84 = 8 * (v83 & 0x3FFFFFFFFFFFFFFCLL);
              v47 = &v35[v84];
              v7 += v84;
              v85 = (__int128 *)(v41 + 3);
              v86 = v82 + 16;
              v87 = v83 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v88 = *v85;
                *(v86 - 1) = *(v85 - 1);
                *v86 = v88;
                v85 += 2;
                v86 += 2;
                v87 -= 4;
              }
              while (v87);
              if (v83 == (v83 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_76;
            }
          }
          else
          {
            v47 = &v34[8 * v43];
          }
          do
          {
            v89 = *(_QWORD *)v7;
            v7 += 8;
            *(_QWORD *)v47 = v89;
            v47 += 8;
          }
          while (v47 != v5);
        }
LABEL_76:
        *(_QWORD *)a1 = v34;
        *(_QWORD *)(a1 + 8) = v35;
        *(_QWORD *)(a1 + 16) = v5;
        *(_QWORD *)(a1 + 24) = v36;
        if (v9)
        {
          operator delete(v9);
          v5 = *(char **)(a1 + 16);
        }
        goto LABEL_78;
      }
      goto LABEL_87;
    }
    goto LABEL_5;
  }
  v23 = v22 >> 2;
  if (v17 == *(_QWORD *)a1)
    v24 = 1;
  else
    v24 = v23;
  if (v24 >> 61)
    goto LABEL_87;
  v25 = (char *)operator new(8 * v24);
  v26 = operator new(0x1000uLL);
  v27 = &v25[8 * v21];
  v28 = &v25[8 * v24];
  if (v21 == v24)
  {
    v90 = v26;
    if (v20 < 1)
    {
      if (v18 == v19)
        v48 = 1;
      else
        v48 = v20 >> 2;
      if (v48 >> 61)
        sub_239418A80();
      v49 = (char *)operator new(8 * v48);
      v27 = &v49[8 * (v48 >> 2)];
      v28 = &v49[8 * v48];
      operator delete(v25);
      v50 = *(_QWORD *)(a1 + 8);
      v18 = *(_QWORD *)(a1 + 16);
      v25 = v49;
      *(_QWORD *)v27 = v90;
      v29 = v27 + 8;
      if (v18 == v50)
        goto LABEL_45;
    }
    else
    {
      v30 = v21 + 2;
      if (v21 >= -1)
        v30 = v21 + 1;
      v27 -= 8 * (v30 >> 1);
      *(_QWORD *)v27 = v26;
      v29 = v27 + 8;
      if (v18 == v19)
        goto LABEL_45;
    }
    do
    {
LABEL_50:
      if (v27 == v25)
      {
        if (v29 >= v28)
        {
          if (v28 == v27)
            v59 = 1;
          else
            v59 = (v28 - v27) >> 2;
          if (v59 >> 61)
            sub_239418A80();
          v60 = (char *)operator new(8 * v59);
          v25 = v60;
          v61 = (v59 + 3) >> 2;
          v53 = &v60[8 * v61];
          v62 = v29 - v27;
          v37 = v29 == v27;
          v29 = v53;
          if (!v37)
          {
            v29 = &v53[v62 & 0xFFFFFFFFFFFFFFF8];
            v63 = v62 - 8;
            v64 = &v60[8 * v61];
            v65 = v27;
            if (v63 < 0x38)
              goto LABEL_91;
            v66 = 8 * v61;
            v64 = &v60[8 * v61];
            v65 = v27;
            if ((unint64_t)(v64 - v27) < 0x20)
              goto LABEL_91;
            v67 = (v63 >> 3) + 1;
            v68 = 8 * (v67 & 0x3FFFFFFFFFFFFFFCLL);
            v64 = &v53[v68];
            v65 = &v27[v68];
            v69 = (__int128 *)(v27 + 16);
            v70 = &v60[v66 + 16];
            v71 = v67 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v72 = *v69;
              *((_OWORD *)v70 - 1) = *(v69 - 1);
              *(_OWORD *)v70 = v72;
              v69 += 2;
              v70 += 32;
              v71 -= 4;
            }
            while (v71);
            if (v67 != (v67 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_91:
              do
              {
                v73 = *(_QWORD *)v65;
                v65 += 8;
                *(_QWORD *)v64 = v73;
                v64 += 8;
              }
              while (v64 != v29);
            }
          }
          v28 = &v60[8 * v59];
          operator delete(v27);
        }
        else
        {
          v55 = (v28 - v29) >> 3;
          if (v55 >= -1)
            v56 = v55 + 1;
          else
            v56 = v55 + 2;
          v57 = &v29[8 * (v56 >> 1)];
          v53 = &v57[-(v29 - v27)];
          v58 = v29 - v27;
          v37 = v29 == v27;
          v29 = v57;
          if (!v37)
            memmove(v53, v27, v58);
          v25 = v27;
        }
      }
      else
      {
        v53 = v27;
      }
      v54 = *(_QWORD *)(v18 - 8);
      v18 -= 8;
      *((_QWORD *)v53 - 1) = v54;
      v51 = v53 - 8;
      v27 = v51;
    }
    while (v18 != *(_QWORD *)(a1 + 8));
    goto LABEL_46;
  }
  *(_QWORD *)v27 = v26;
  v29 = v27 + 8;
  if (v18 != v19)
    goto LABEL_50;
LABEL_45:
  v51 = v27;
LABEL_46:
  v52 = *(char **)a1;
  *(_QWORD *)a1 = v25;
  *(_QWORD *)(a1 + 8) = v51;
  *(_QWORD *)(a1 + 16) = v29;
  *(_QWORD *)(a1 + 24) = v28;
  if (v52)
    operator delete(v52);
}

void sub_23956A658(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p)
{
  void *v9;

  operator delete(__p);
  operator delete(v9);
  _Unwind_Resume(a1);
}

void sub_23956A674(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_23956A688(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_23956A6A0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_23956A6B8(unsigned int *a1, uint64_t a2)
{
  pthread_mutex_t *v4;
  uint64_t v5;

  v4 = (pthread_mutex_t *)(a1 + 44);
  sub_2397A1694((pthread_mutex_t *)(a1 + 44));
  if (*((_QWORD *)a1 + 6) < (unint64_t)*a1)
  {
LABEL_4:
    if (!*((_BYTE *)a1 + 56))
    {
      sub_23956A790((_QWORD *)a1 + 1, a2);
      pthread_cond_signal((pthread_cond_t *)(a1 + 32));
      v5 = 1;
      goto LABEL_7;
    }
  }
  else
  {
    while (!*((_BYTE *)a1 + 56))
    {
      ++*((_QWORD *)a1 + 8);
      pthread_cond_wait((pthread_cond_t *)(a1 + 20), v4);
      --*((_QWORD *)a1 + 8);
      if (*((_QWORD *)a1 + 6) < (unint64_t)*a1)
        goto LABEL_4;
    }
  }
  v5 = 0;
LABEL_7:
  sub_2397A16B4(v4);
  return v5;
}

void sub_23956A770(_Unwind_Exception *a1)
{
  pthread_mutex_t *v1;

  sub_2397A16B4(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_23956A790(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t result;

  v4 = a1[1];
  v5 = a1[2];
  v6 = 8 * (v5 - v4) - 1;
  if (v5 == v4)
    v6 = 0;
  if (v6 == a1[5] + a1[4])
  {
    sub_23956A8F8((uint64_t)a1);
    v4 = a1[1];
    v5 = a1[2];
  }
  if (v5 != v4)
  {
    v7 = a1[5] + a1[4];
    v8 = *(_QWORD *)(v4 + ((v7 >> 3) & 0x1FFFFFFFFFFFFFF8)) + ((v7 & 0x3F) << 6);
    v9 = *(_QWORD *)(a2 + 24);
    if (v9)
      goto LABEL_7;
LABEL_11:
    *(_QWORD *)(v8 + 24) = 0;
    result = *(_QWORD *)(a2 + 56);
    if (!result)
      goto LABEL_16;
    goto LABEL_14;
  }
  v8 = 0;
  v9 = *(_QWORD *)(a2 + 24);
  if (!v9)
    goto LABEL_11;
LABEL_7:
  if (v9 == a2)
  {
    *(_QWORD *)(v8 + 24) = v8;
    (*(void (**)(_QWORD, unint64_t))(**(_QWORD **)(a2 + 24) + 24))(*(_QWORD *)(a2 + 24), v8);
    result = *(_QWORD *)(a2 + 56);
    if (!result)
      goto LABEL_16;
  }
  else
  {
    *(_QWORD *)(v8 + 24) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
    result = *(_QWORD *)(a2 + 56);
    if (!result)
      goto LABEL_16;
  }
LABEL_14:
  if (result == a2 + 32)
  {
    *(_QWORD *)(v8 + 56) = v8 + 32;
    result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 56) + 24))(*(_QWORD *)(a2 + 56));
    goto LABEL_18;
  }
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
LABEL_16:
  *(_QWORD *)(v8 + 56) = result;
LABEL_18:
  ++a1[5];
  return result;
}

void sub_23956A8BC(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)v1[3];
  if (v3 == v1)
  {
    v4 = 4;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
    v1 = (_QWORD *)v1[3];
  }
  (*(void (**)(_QWORD *))(*v1 + 8 * v4))(v1);
LABEL_6:
  _Unwind_Resume(exception_object);
}

void sub_23956A8F8(uint64_t a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  char *v5;
  _QWORD *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  void *v26;
  char *v27;
  char *v28;
  char *v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  char *v36;
  BOOL v37;
  int64_t v38;
  unint64_t v39;
  char *v40;
  _QWORD *v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  int64_t v45;
  unint64_t v46;
  char *v47;
  unint64_t v48;
  char *v49;
  uint64_t v50;
  char *v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  char *v57;
  size_t v58;
  unint64_t v59;
  char *v60;
  unint64_t v61;
  int64_t v62;
  unint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  __int128 *v69;
  char *v70;
  uint64_t v71;
  __int128 v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  __int128 *v77;
  _OWORD *v78;
  uint64_t v79;
  __int128 v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  __int128 *v85;
  _OWORD *v86;
  uint64_t v87;
  __int128 v88;
  uint64_t v89;
  void *v90;
  void *v91;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = v2 >= 0x40;
  v4 = v2 - 64;
  if (v3)
  {
    *(_QWORD *)(a1 + 32) = v4;
    v6 = *(_QWORD **)(a1 + 8);
    v5 = *(char **)(a1 + 16);
    v7 = (char *)(v6 + 1);
    v8 = *v6;
    *(_QWORD *)(a1 + 8) = v6 + 1;
    if (v5 != *(char **)(a1 + 24))
    {
LABEL_78:
      *(_QWORD *)v5 = v8;
      *(_QWORD *)(a1 + 16) += 8;
      return;
    }
    v9 = *(char **)a1;
    v10 = (uint64_t)&v7[-*(_QWORD *)a1];
    if ((unint64_t)v7 <= *(_QWORD *)a1)
    {
      v31 = (v5 - v9) >> 2;
      if (v5 == v9)
        v31 = 1;
      if (!(v31 >> 61))
      {
        v32 = v31 >> 2;
        v33 = 8 * v31;
        v34 = (char *)operator new(8 * v31);
        v35 = &v34[8 * v32];
        v36 = &v34[v33];
        v38 = v5 - v7;
        v37 = v5 == v7;
        v5 = v35;
        if (!v37)
        {
          v5 = &v35[v38 & 0xFFFFFFFFFFFFFFF8];
          v39 = v38 - 8;
          if ((unint64_t)(v38 - 8) >= 0x38)
          {
            v74 = &v34[8 * v32];
            v40 = v74;
            if ((unint64_t)(v74 - v7) >= 0x20)
            {
              v75 = (v39 >> 3) + 1;
              v76 = 8 * (v75 & 0x3FFFFFFFFFFFFFFCLL);
              v40 = &v35[v76];
              v7 += v76;
              v77 = (__int128 *)(v6 + 3);
              v78 = v74 + 16;
              v79 = v75 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v80 = *v77;
                *(v78 - 1) = *(v77 - 1);
                *v78 = v80;
                v77 += 2;
                v78 += 2;
                v79 -= 4;
              }
              while (v79);
              if (v75 == (v75 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_76;
            }
          }
          else
          {
            v40 = &v34[8 * v32];
          }
          do
          {
            v81 = *(_QWORD *)v7;
            v7 += 8;
            *(_QWORD *)v40 = v81;
            v40 += 8;
          }
          while (v40 != v5);
        }
        goto LABEL_76;
      }
LABEL_87:
      sub_239418A80();
    }
LABEL_5:
    v11 = v10 >> 3;
    if (v11 >= -1)
      v12 = v11 + 1;
    else
      v12 = v11 + 2;
    v13 = v12 >> 1;
    v14 = -v13;
    v15 = &v7[-8 * v13];
    v16 = v5 - v7;
    if (v5 != v7)
    {
      memmove(&v7[-8 * v13], v7, v5 - v7);
      v7 = *(char **)(a1 + 8);
    }
    v5 = &v15[v16];
    *(_QWORD *)(a1 + 8) = &v7[8 * v14];
    *(_QWORD *)(a1 + 16) = &v15[v16];
    goto LABEL_78;
  }
  v18 = *(_QWORD *)(a1 + 16);
  v17 = *(_QWORD *)(a1 + 24);
  v19 = *(_QWORD *)(a1 + 8);
  v20 = v18 - v19;
  v21 = (v18 - v19) >> 3;
  v22 = v17 - *(_QWORD *)a1;
  if (v21 < (unint64_t)(v22 >> 3))
  {
    if (v17 != v18)
    {
      v91 = operator new(0x1000uLL);
      sub_23946CE0C((char **)a1, &v91);
      return;
    }
    v91 = operator new(0x1000uLL);
    sub_23946CF98((void **)a1, &v91);
    v41 = *(_QWORD **)(a1 + 8);
    v5 = *(char **)(a1 + 16);
    v7 = (char *)(v41 + 1);
    v8 = *v41;
    *(_QWORD *)(a1 + 8) = v41 + 1;
    if (v5 != *(char **)(a1 + 24))
      goto LABEL_78;
    v9 = *(char **)a1;
    v10 = (uint64_t)&v7[-*(_QWORD *)a1];
    if ((unint64_t)v7 <= *(_QWORD *)a1)
    {
      v42 = (v5 - v9) >> 2;
      if (v5 == v9)
        v42 = 1;
      if (!(v42 >> 61))
      {
        v43 = v42 >> 2;
        v44 = 8 * v42;
        v34 = (char *)operator new(8 * v42);
        v35 = &v34[8 * v43];
        v36 = &v34[v44];
        v45 = v5 - v7;
        v37 = v5 == v7;
        v5 = v35;
        if (!v37)
        {
          v5 = &v35[v45 & 0xFFFFFFFFFFFFFFF8];
          v46 = v45 - 8;
          if ((unint64_t)(v45 - 8) >= 0x38)
          {
            v82 = &v34[8 * v43];
            v47 = v82;
            if ((unint64_t)(v82 - v7) >= 0x20)
            {
              v83 = (v46 >> 3) + 1;
              v84 = 8 * (v83 & 0x3FFFFFFFFFFFFFFCLL);
              v47 = &v35[v84];
              v7 += v84;
              v85 = (__int128 *)(v41 + 3);
              v86 = v82 + 16;
              v87 = v83 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v88 = *v85;
                *(v86 - 1) = *(v85 - 1);
                *v86 = v88;
                v85 += 2;
                v86 += 2;
                v87 -= 4;
              }
              while (v87);
              if (v83 == (v83 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_76;
            }
          }
          else
          {
            v47 = &v34[8 * v43];
          }
          do
          {
            v89 = *(_QWORD *)v7;
            v7 += 8;
            *(_QWORD *)v47 = v89;
            v47 += 8;
          }
          while (v47 != v5);
        }
LABEL_76:
        *(_QWORD *)a1 = v34;
        *(_QWORD *)(a1 + 8) = v35;
        *(_QWORD *)(a1 + 16) = v5;
        *(_QWORD *)(a1 + 24) = v36;
        if (v9)
        {
          operator delete(v9);
          v5 = *(char **)(a1 + 16);
        }
        goto LABEL_78;
      }
      goto LABEL_87;
    }
    goto LABEL_5;
  }
  v23 = v22 >> 2;
  if (v17 == *(_QWORD *)a1)
    v24 = 1;
  else
    v24 = v23;
  if (v24 >> 61)
    goto LABEL_87;
  v25 = (char *)operator new(8 * v24);
  v26 = operator new(0x1000uLL);
  v27 = &v25[8 * v21];
  v28 = &v25[8 * v24];
  if (v21 == v24)
  {
    v90 = v26;
    if (v20 < 1)
    {
      if (v18 == v19)
        v48 = 1;
      else
        v48 = v20 >> 2;
      if (v48 >> 61)
        sub_239418A80();
      v49 = (char *)operator new(8 * v48);
      v27 = &v49[8 * (v48 >> 2)];
      v28 = &v49[8 * v48];
      operator delete(v25);
      v50 = *(_QWORD *)(a1 + 8);
      v18 = *(_QWORD *)(a1 + 16);
      v25 = v49;
      *(_QWORD *)v27 = v90;
      v29 = v27 + 8;
      if (v18 == v50)
        goto LABEL_45;
    }
    else
    {
      v30 = v21 + 2;
      if (v21 >= -1)
        v30 = v21 + 1;
      v27 -= 8 * (v30 >> 1);
      *(_QWORD *)v27 = v26;
      v29 = v27 + 8;
      if (v18 == v19)
        goto LABEL_45;
    }
    do
    {
LABEL_50:
      if (v27 == v25)
      {
        if (v29 >= v28)
        {
          if (v28 == v27)
            v59 = 1;
          else
            v59 = (v28 - v27) >> 2;
          if (v59 >> 61)
            sub_239418A80();
          v60 = (char *)operator new(8 * v59);
          v25 = v60;
          v61 = (v59 + 3) >> 2;
          v53 = &v60[8 * v61];
          v62 = v29 - v27;
          v37 = v29 == v27;
          v29 = v53;
          if (!v37)
          {
            v29 = &v53[v62 & 0xFFFFFFFFFFFFFFF8];
            v63 = v62 - 8;
            v64 = &v60[8 * v61];
            v65 = v27;
            if (v63 < 0x38)
              goto LABEL_91;
            v66 = 8 * v61;
            v64 = &v60[8 * v61];
            v65 = v27;
            if ((unint64_t)(v64 - v27) < 0x20)
              goto LABEL_91;
            v67 = (v63 >> 3) + 1;
            v68 = 8 * (v67 & 0x3FFFFFFFFFFFFFFCLL);
            v64 = &v53[v68];
            v65 = &v27[v68];
            v69 = (__int128 *)(v27 + 16);
            v70 = &v60[v66 + 16];
            v71 = v67 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v72 = *v69;
              *((_OWORD *)v70 - 1) = *(v69 - 1);
              *(_OWORD *)v70 = v72;
              v69 += 2;
              v70 += 32;
              v71 -= 4;
            }
            while (v71);
            if (v67 != (v67 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_91:
              do
              {
                v73 = *(_QWORD *)v65;
                v65 += 8;
                *(_QWORD *)v64 = v73;
                v64 += 8;
              }
              while (v64 != v29);
            }
          }
          v28 = &v60[8 * v59];
          operator delete(v27);
        }
        else
        {
          v55 = (v28 - v29) >> 3;
          if (v55 >= -1)
            v56 = v55 + 1;
          else
            v56 = v55 + 2;
          v57 = &v29[8 * (v56 >> 1)];
          v53 = &v57[-(v29 - v27)];
          v58 = v29 - v27;
          v37 = v29 == v27;
          v29 = v57;
          if (!v37)
            memmove(v53, v27, v58);
          v25 = v27;
        }
      }
      else
      {
        v53 = v27;
      }
      v54 = *(_QWORD *)(v18 - 8);
      v18 -= 8;
      *((_QWORD *)v53 - 1) = v54;
      v51 = v53 - 8;
      v27 = v51;
    }
    while (v18 != *(_QWORD *)(a1 + 8));
    goto LABEL_46;
  }
  *(_QWORD *)v27 = v26;
  v29 = v27 + 8;
  if (v18 != v19)
    goto LABEL_50;
LABEL_45:
  v51 = v27;
LABEL_46:
  v52 = *(char **)a1;
  *(_QWORD *)a1 = v25;
  *(_QWORD *)(a1 + 8) = v51;
  *(_QWORD *)(a1 + 16) = v29;
  *(_QWORD *)(a1 + 24) = v28;
  if (v52)
    operator delete(v52);
}

void sub_23956AE54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p)
{
  void *v9;

  operator delete(__p);
  operator delete(v9);
  _Unwind_Resume(a1);
}

void sub_23956AE70(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_23956AE84(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_23956AE9C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_23956AEB4(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  void *v5;

  *a1 = &off_250ADE258;
  v2 = a1 + 5;
  v3 = (_QWORD *)a1[8];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  v5 = (void *)a1[1];
  if (v5)
  {
    a1[2] = v5;
    operator delete(v5);
  }
  return a1;
}

void sub_23956AF20(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  void *v5;

  *a1 = &off_250ADE258;
  v2 = a1 + 5;
  v3 = (_QWORD *)a1[8];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  v5 = (void *)a1[1];
  if (v5)
  {
    a1[2] = v5;
    operator delete(v5);
  }
  JUMPOUT(0x23B83E31CLL);
}

_QWORD *sub_23956AF9C(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x48uLL);
  *v2 = &off_250ADE258;
  sub_23956B114(v2 + 1, v1);
  return v2;
}

void sub_23956AFDC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_23956AFF0(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_250ADE258;
  return sub_23956B114(a2 + 1, a1 + 8);
}

void sub_23956B00C(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  void *v5;

  v2 = a1 + 5;
  v3 = (_QWORD *)a1[8];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  v5 = (void *)a1[1];
  if (v5)
  {
    a1[2] = v5;
    operator delete(v5);
  }
}

void sub_23956B070(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;
  void *v5;

  v2 = __p + 40;
  v3 = (char *)*((_QWORD *)__p + 8);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
LABEL_6:
  v5 = (void *)*((_QWORD *)__p + 1);
  if (v5)
  {
    *((_QWORD *)__p + 2) = v5;
    operator delete(v5);
  }
  operator delete(__p);
}

uint64_t sub_23956B0D0(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(a1[1] + 8 * a1[4]);
  v1 = a1[8];
  if (!v1)
    sub_2394172E0();
  return (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v1 + 48))(v1, &v3);
}

_QWORD *sub_23956B114(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  const void *v5;
  int64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v5 = *(const void **)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v6 = v4 - *(_QWORD *)a2;
  if (v4 != *(_QWORD *)a2)
  {
    if (v6 < 0)
      sub_2394189F8();
    v7 = (char *)operator new(v4 - *(_QWORD *)a2);
    *a1 = v7;
    a1[1] = v7;
    v8 = &v7[8 * (v6 >> 3)];
    a1[2] = v8;
    memcpy(v7, v5, v6);
    a1[1] = v8;
  }
  a1[3] = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a2 + 56);
  if (!v9)
    goto LABEL_7;
  if (v9 != a2 + 32)
  {
    v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
LABEL_7:
    a1[7] = v9;
    return a1;
  }
  a1[7] = a1 + 4;
  (*(void (**)(_QWORD))(**(_QWORD **)(a2 + 56) + 24))(*(_QWORD *)(a2 + 56));
  return a1;
}

void sub_23956B1F0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_23956B214()
{
  JUMPOUT(0x23B83E31CLL);
}

__n128 sub_23956B228(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x48uLL);
  *(_QWORD *)v2 = &off_250ADE2A0;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  result = *(__n128 *)(a1 + 56);
  *(__n128 *)(v2 + 56) = result;
  return result;
}

__n128 sub_23956B278(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_QWORD *)a2 = &off_250ADE2A0;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  v4 = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 56) = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(a2 + 40) = v4;
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_23956B2B0(uint64_t a1, uint64_t *a2)
{
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char v13;
  _DWORD *v14;
  _DWORD *v15;
  pthread_mutex_t *v16;
  uint64_t v17;
  uint64_t *v18;
  unint64_t v19;
  uint64_t **v20;
  uint64_t **v21;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t *v25;
  pthread_mutex_t *v26;
  void *v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  __int128 *v31;
  char *v32;
  _QWORD *v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  pthread_mutex_t *v41;
  char v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;
  void *__p[2];
  __int128 v47;
  char v48;
  _QWORD v49[4];
  _BYTE v50[24];
  _BYTE *v51;
  _QWORD v52[5];

  v52[2] = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(a1 + 64);
  v5 = *(_QWORD *)(a1 + 40);
  BYTE7(v47) = 0;
  LOBYTE(__p[0]) = 0;
  sub_2396FD394(v49, v5, (__int128 *)__p);
  if (SBYTE7(v47) < 0)
    operator delete(__p[0]);
  v7 = *a2;
  v6 = (std::__shared_weak_count *)a2[1];
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  if (!*((_BYTE *)a2 + 16))
  {
    sub_2394202DC((_QWORD *)(**(_QWORD **)(a1 + 48) + 392), 1501);
    goto LABEL_36;
  }
  v10 = **(_QWORD **)(a1 + 24);
  v11 = (*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8) - v10) >> 4;
  if (v11 <= v4)
  {
    v42 = 0;
    goto LABEL_24;
  }
  v12 = (char *)(v10 + 16 * v4);
  v13 = *v12;
  v52[0] = *(_QWORD *)(v12 + 1);
  *(_QWORD *)((char *)v52 + 7) = *((_QWORD *)v12 + 1);
  v42 = v13;
  if (!*(_BYTE *)(*(_QWORD *)(a1 + 48) + 8))
    goto LABEL_24;
  __p[0] = 0;
  __p[1] = 0;
  DWORD2(v47) = 0;
  *(_QWORD *)&v47 = 0;
  sub_23942CB44((uint64_t)__p, 4uLL);
  v14 = __p[0];
  v15 = (_DWORD *)(**(_QWORD **)(a1 + 24) + 16 * v4);
  *(_DWORD *)__p[0] = *v15;
  v14[1] = v15[1];
  v14[2] = v15[2];
  v14[3] = v15[3];
  v16 = *(pthread_mutex_t **)(a1 + 32);
  sub_2397A1694(v16);
  v41 = v16;
  v17 = **(_QWORD **)(a1 + 48);
  v18 = *(uint64_t **)(v17 + 280);
  v19 = *(_QWORD *)(**(_QWORD **)(a1 + 56) + 8 * v4);
  if (v18)
  {
    while (1)
    {
      while (1)
      {
        v21 = (uint64_t **)v18;
        v22 = v18[4];
        if (v19 >= v22)
          break;
        v18 = *v21;
        v20 = v21;
        if (!*v21)
          goto LABEL_16;
      }
      if (v22 >= v19)
        break;
      v18 = v21[1];
      if (!v18)
      {
        v20 = v21 + 1;
        goto LABEL_16;
      }
    }
    v23 = (char *)v21;
    v26 = v41;
    v28 = v23 + 40;
    v27 = (void *)*((_QWORD *)v23 + 5);
    if (!v27)
      goto LABEL_20;
  }
  else
  {
    v20 = (uint64_t **)(v17 + 280);
    v21 = (uint64_t **)(v17 + 280);
LABEL_16:
    v23 = (char *)operator new(0x48uLL);
    *((_QWORD *)v23 + 4) = v19;
    *(_OWORD *)(v23 + 40) = 0u;
    *(_OWORD *)(v23 + 56) = 0u;
    *(_QWORD *)v23 = 0;
    *((_QWORD *)v23 + 1) = 0;
    *((_QWORD *)v23 + 2) = v21;
    *v20 = (uint64_t *)v23;
    v24 = **(_QWORD **)(v17 + 272);
    v25 = (uint64_t *)v23;
    if (v24)
    {
      *(_QWORD *)(v17 + 272) = v24;
      v25 = *v20;
    }
    sub_2394213B8(*(uint64_t **)(v17 + 280), v25);
    ++*(_QWORD *)(v17 + 288);
    v26 = v41;
    v28 = v23 + 40;
    v27 = (void *)*((_QWORD *)v23 + 5);
    if (!v27)
      goto LABEL_20;
  }
  *((_QWORD *)v23 + 6) = v27;
  operator delete(v27);
  *v28 = 0;
  v28[1] = 0;
  v28[2] = 0;
LABEL_20:
  *(_OWORD *)(v23 + 40) = *(_OWORD *)__p;
  *((_QWORD *)v23 + 7) = v47;
  __p[1] = 0;
  *(_QWORD *)&v47 = 0;
  __p[0] = 0;
  *((_DWORD *)v23 + 16) = DWORD2(v47);
  sub_2397A16B4(v26);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
LABEL_24:
  v29 = **(_QWORD **)(a1 + 8);
  v30 = operator new(0xA0uLL);
  v30[1] = 0;
  v30[2] = 0;
  *v30 = &off_250ADD758;
  v30[3] = &off_250ADBEA0;
  sub_239827500((uint64_t)(v30 + 4), v7 + 8);
  *((_WORD *)v30 + 76) = *(_WORD *)(v7 + 128);
  __p[0] = v30 + 3;
  __p[1] = v30;
  LOBYTE(v47) = 0;
  v48 = 0;
  if (v11 > v4)
  {
    LOBYTE(v47) = v42;
    *(_QWORD *)((char *)&v47 + 1) = v52[0];
    *((_QWORD *)&v47 + 1) = *(_QWORD *)((char *)v52 + 7);
    v48 = 1;
  }
  v31 = *(__int128 **)(a1 + 16);
  v43 = *v31;
  v44 = v31[1];
  v45 = *((_QWORD *)v31 + 4);
  v51 = 0;
  v32 = (char *)operator new(0x38uLL);
  *(_QWORD *)v32 = &off_250ADE2E8;
  *(_OWORD *)(v32 + 8) = v43;
  *(_OWORD *)(v32 + 24) = v44;
  *((_QWORD *)v32 + 5) = v45;
  *((_QWORD *)v32 + 6) = v4;
  v51 = v32;
  (*(void (**)(uint64_t, void **, _BYTE *))(*(_QWORD *)v29 + 16))(v29, __p, v50);
  v33 = v51;
  if (v51 == v50)
  {
    v34 = 4;
    v33 = v50;
    goto LABEL_30;
  }
  if (v51)
  {
    v34 = 5;
LABEL_30:
    (*(void (**)(void))(*v33 + 8 * v34))();
  }
  v35 = (std::__shared_weak_count *)__p[1];
  if (__p[1])
  {
    v36 = (unint64_t *)((char *)__p[1] + 8);
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
LABEL_36:
  if (v6)
  {
    v38 = (unint64_t *)&v6->__shared_owners_;
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return sub_2396FD3E8((uint64_t)v49);
}

void sub_23956B6CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, pthread_mutex_t *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  std::__shared_weak_count *v29;
  unint64_t *p_shared_owners;
  unint64_t v32;

  sub_2397A16B4(a9);
  if (__p)
    operator delete(__p);
  if (v29)
  {
    p_shared_owners = (unint64_t *)&v29->__shared_owners_;
    do
      v32 = __ldaxr(p_shared_owners);
    while (__stlxr(v32 - 1, p_shared_owners));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  sub_2396FD3E8((uint64_t)&a22);
  _Unwind_Resume(a1);
}

void sub_23956B7E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x23956B7E0);
}

void sub_23956B808()
{
  JUMPOUT(0x23B83E31CLL);
}

__n128 sub_23956B81C(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x38uLL);
  *(_QWORD *)v2 = &off_250ADE2E8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  return result;
}

__n128 sub_23956B864(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  *(_QWORD *)a2 = &off_250ADE2E8;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_23956B894(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  _BYTE *v13;
  int64_t v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  const void *v22;
  int64_t v23;
  char *v24;
  char *v25;
  __int128 *v26;
  char *v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  __int128 v39;
  __int128 v40;
  _QWORD v41[4];
  _QWORD v42[3];
  _QWORD *v43;
  __int128 __p;
  uint64_t v45;
  uint64_t v46;
  __int128 v47;
  _QWORD v48[3];
  _QWORD *v49;
  _QWORD v50[3];
  _QWORD *v51;
  uint64_t v52;

  v52 = *MEMORY[0x24BDAC8D0];
  v4 = a1[5];
  v5 = a1[6];
  HIBYTE(v45) = 0;
  LOBYTE(__p) = 0;
  sub_2396FD394(v41, v4, &__p);
  if (SHIBYTE(v45) < 0)
    operator delete((void *)__p);
  v7 = *a2;
  v6 = (std::__shared_weak_count *)a2[1];
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  v10 = a1[1];
  v11 = a1[3];
  v45 = 0;
  __p = 0uLL;
  v13 = *(_BYTE **)v11;
  v12 = *(_BYTE **)(v11 + 8);
  v14 = v12 - v13;
  if (v12 != v13)
  {
    if (v14 < 0)
      sub_2394189F8();
    *(_QWORD *)&__p = operator new(v12 - v13);
    *((_QWORD *)&__p + 1) = __p;
    v15 = __p + 8 * (v14 >> 3);
    v45 = v15;
    memcpy((void *)__p, v13, v14);
    *((_QWORD *)&__p + 1) = v15;
  }
  v46 = v5;
  *(_QWORD *)&v47 = v7;
  *((_QWORD *)&v47 + 1) = v6;
  if (v6)
  {
    v16 = (unint64_t *)&v6->__shared_owners_;
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  v18 = v48;
  v19 = a1[2];
  v20 = *(_QWORD *)(v19 + 24);
  if (!v20)
    goto LABEL_15;
  if (v20 != v19)
  {
    v20 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v20 + 16))(v20);
LABEL_15:
    v49 = (_QWORD *)v20;
    goto LABEL_17;
  }
  v49 = v48;
  (*(void (**)(_QWORD, _QWORD *))(**(_QWORD **)(v19 + 24) + 24))(*(_QWORD *)(v19 + 24), v48);
LABEL_17:
  v51 = 0;
  v21 = (char *)operator new(0x58uLL);
  *((_QWORD *)v21 + 1) = 0;
  *(_QWORD *)v21 = &off_250ADE330;
  *((_QWORD *)v21 + 2) = 0;
  *((_QWORD *)v21 + 3) = 0;
  v22 = (const void *)__p;
  v23 = *((_QWORD *)&__p + 1) - __p;
  if (*((_QWORD *)&__p + 1) != (_QWORD)__p)
  {
    if (v23 < 0)
      sub_2394189F8();
    v24 = (char *)operator new(*((_QWORD *)&__p + 1) - __p);
    *((_QWORD *)v21 + 1) = v24;
    v25 = &v24[8 * (v23 >> 3)];
    *((_QWORD *)v21 + 3) = v25;
    memcpy(v24, v22, v23);
    *((_QWORD *)v21 + 2) = v25;
  }
  *((_QWORD *)v21 + 4) = v46;
  *(_OWORD *)(v21 + 40) = v47;
  v47 = 0uLL;
  if (v49)
  {
    if (v49 == v48)
    {
      *((_QWORD *)v21 + 10) = v21 + 56;
      (*(void (**)(_QWORD *))(v48[0] + 24))(v48);
    }
    else
    {
      *((_QWORD *)v21 + 10) = v49;
      v49 = 0;
    }
  }
  else
  {
    *((_QWORD *)v21 + 10) = 0;
  }
  v51 = v21;
  v26 = (__int128 *)a1[4];
  v39 = *v26;
  v40 = v26[1];
  v43 = 0;
  v27 = (char *)operator new(0x30uLL);
  *(_QWORD *)v27 = &off_250ADE378;
  *(_OWORD *)(v27 + 8) = v39;
  *(_OWORD *)(v27 + 24) = v40;
  *((_QWORD *)v27 + 5) = v5;
  v43 = v27;
  sub_239568FC4(v10, v50, v42);
  v28 = v43;
  if (v43 == v42)
  {
    v29 = 4;
    v28 = v42;
  }
  else
  {
    if (!v43)
      goto LABEL_30;
    v29 = 5;
  }
  (*(void (**)(void))(*v28 + 8 * v29))();
LABEL_30:
  v30 = v51;
  if (v51 == v50)
  {
    v31 = 4;
    v30 = v50;
  }
  else
  {
    if (!v51)
      goto LABEL_35;
    v31 = 5;
  }
  (*(void (**)(void))(*v30 + 8 * v31))();
LABEL_35:
  if (v49 == v48)
  {
    v32 = 4;
    goto LABEL_39;
  }
  if (v49)
  {
    v32 = 5;
    v18 = v49;
LABEL_39:
    (*(void (**)(_QWORD *))(*v18 + 8 * v32))(v18);
  }
  v33 = (std::__shared_weak_count *)*((_QWORD *)&v47 + 1);
  if (*((_QWORD *)&v47 + 1))
  {
    v34 = (unint64_t *)(*((_QWORD *)&v47 + 1) + 8);
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  if ((_QWORD)__p)
  {
    *((_QWORD *)&__p + 1) = __p;
    operator delete((void *)__p);
  }
  if (v6)
  {
    v36 = (unint64_t *)&v6->__shared_owners_;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return sub_2396FD3E8((uint64_t)v41);
}

void sub_23956BC30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  if (a2)
    sub_239416A48(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_23956BCE8()
{
  _QWORD *v0;
  void **v1;
  void *v2;

  v2 = *v1;
  if (*v1)
  {
    v0[2] = v2;
    operator delete(v2);
  }
  operator delete(v0);
  JUMPOUT(0x23956BD04);
}

_QWORD *sub_23956BDC8(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  void *v8;

  *a1 = &off_250ADE330;
  v2 = a1 + 7;
  v3 = (_QWORD *)a1[10];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  v5 = (std::__shared_weak_count *)a1[6];
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      v8 = (void *)a1[1];
      if (!v8)
        return a1;
      goto LABEL_11;
    }
  }
  v8 = (void *)a1[1];
  if (v8)
  {
LABEL_11:
    a1[2] = v8;
    operator delete(v8);
  }
  return a1;
}

void sub_23956BE78(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  void *v8;

  *a1 = &off_250ADE330;
  v2 = a1 + 7;
  v3 = (_QWORD *)a1[10];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
    {
LABEL_6:
      v5 = (std::__shared_weak_count *)a1[6];
      if (!v5)
        goto LABEL_10;
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
        v8 = (void *)a1[1];
        if (!v8)
          goto LABEL_14;
      }
      else
      {
LABEL_10:
        v8 = (void *)a1[1];
        if (!v8)
          goto LABEL_14;
      }
      a1[2] = v8;
      operator delete(v8);
LABEL_14:
      JUMPOUT(0x23B83E31CLL);
    }
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
  goto LABEL_6;
}

_QWORD *sub_23956BF38(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x58uLL);
  *v2 = &off_250ADE330;
  sub_23956C1D0(v2 + 1, v1);
  return v2;
}

void sub_23956BF78(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_23956BF8C(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_250ADE330;
  return sub_23956C1D0(a2 + 1, a1 + 8);
}

void sub_23956BFA8(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  void *v8;

  v2 = a1 + 7;
  v3 = (_QWORD *)a1[10];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  v5 = (std::__shared_weak_count *)a1[6];
  if (!v5)
    goto LABEL_10;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(p_shared_owners);
  while (__stlxr(v7 - 1, p_shared_owners));
  if (v7)
  {
LABEL_10:
    v8 = (void *)a1[1];
    if (!v8)
      return;
    goto LABEL_11;
  }
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  v8 = (void *)a1[1];
  if (v8)
  {
LABEL_11:
    a1[2] = v8;
    operator delete(v8);
  }
}

void sub_23956C04C(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  void *v8;

  v2 = __p + 56;
  v3 = (char *)*((_QWORD *)__p + 10);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  v5 = (std::__shared_weak_count *)*((_QWORD *)__p + 6);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      v8 = (void *)*((_QWORD *)__p + 1);
      if (!v8)
        goto LABEL_12;
      goto LABEL_11;
    }
  }
  v8 = (void *)*((_QWORD *)__p + 1);
  if (v8)
  {
LABEL_11:
    *((_QWORD *)__p + 2) = v8;
    operator delete(v8);
  }
LABEL_12:
  operator delete(__p);
}

uint64_t sub_23956C0F0(_QWORD *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  uint64_t v12;

  v1 = (std::__shared_weak_count *)a1[6];
  v10 = a1[5];
  v11 = v1;
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldxr(p_shared_owners);
    while (__stxr(v3 + 1, p_shared_owners));
  }
  v12 = *(_QWORD *)(a1[1] + 8 * a1[4]);
  v4 = a1[10];
  if (!v4)
    sub_2394172E0();
  result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v4 + 48))(v4, &v10, &v12);
  v6 = result;
  v7 = v11;
  if (v11)
  {
    v8 = (unint64_t *)&v11->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
      return v6;
    }
  }
  return result;
}

void sub_23956C1B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11)
    sub_239EC0764(a11);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_23956C1D0(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  const void *v5;
  int64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v5 = *(const void **)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v6 = v4 - *(_QWORD *)a2;
  if (v4 != *(_QWORD *)a2)
  {
    if (v6 < 0)
      sub_2394189F8();
    v7 = (char *)operator new(v4 - *(_QWORD *)a2);
    *a1 = v7;
    a1[1] = v7;
    v8 = &v7[8 * (v6 >> 3)];
    a1[2] = v8;
    memcpy(v7, v5, v6);
    a1[1] = v8;
  }
  v9 = *(_QWORD *)(a2 + 32);
  a1[3] = *(_QWORD *)(a2 + 24);
  a1[4] = v9;
  v10 = *(_QWORD *)(a2 + 40);
  a1[5] = v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  v13 = *(_QWORD *)(a2 + 72);
  if (!v13)
    goto LABEL_10;
  if (v13 != a2 + 48)
  {
    v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 16))(v13);
LABEL_10:
    a1[9] = v13;
    return a1;
  }
  a1[9] = a1 + 6;
  (*(void (**)(_QWORD))(**(_QWORD **)(a2 + 72) + 24))(*(_QWORD *)(a2 + 72));
  return a1;
}

void sub_23956C2CC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  std::__shared_weak_count *v3;
  void *v4;

  v3 = *(std::__shared_weak_count **)(v1 + 40);
  if (v3)
    sub_239EC0358(v3);
  v4 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void sub_23956C300()
{
  JUMPOUT(0x23B83E31CLL);
}

__n128 sub_23956C314(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x30uLL);
  *(_QWORD *)v2 = &off_250ADE378;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((_QWORD *)v2 + 5) = *(_QWORD *)(a1 + 40);
  return result;
}

__n128 sub_23956C35C(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  *(_QWORD *)a2 = &off_250ADE378;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_23956C38C(uint64_t a1, _BYTE *a2)
{
  uint64_t v4;
  pthread_mutex_t *v5;
  __int128 __p;
  char v8;
  _QWORD v9[4];

  v4 = *(_QWORD *)(a1 + 8);
  v8 = 0;
  LOBYTE(__p) = 0;
  sub_2396FD394(v9, v4, &__p);
  if (v8 < 0)
  {
    operator delete((void *)__p);
    if (*a2)
      goto LABEL_3;
LABEL_5:
    sub_2394202DC((_QWORD *)(**(_QWORD **)(a1 + 16) + 392), 1502);
    return sub_2396FD3E8((uint64_t)v9);
  }
  if (!*a2)
    goto LABEL_5;
LABEL_3:
  v5 = *(pthread_mutex_t **)(a1 + 24);
  sub_2397A1694(v5);
  ++**(_QWORD **)(a1 + 32);
  sub_2397A16B4(v5);
  return sub_2396FD3E8((uint64_t)v9);
}

void sub_23956C430(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_2396FD3E8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_23956C44C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_23956C468(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t *v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  os_signpost_id_t v25;
  uint64_t v26;
  _BYTE v28[16];
  void *__p;
  char v30;
  _BYTE v31[24];
  _BYTE *v32;
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a1 = &off_250ADE3C0;
  v10 = operator new(0x20uLL);
  *v10 = &off_250ADE420;
  v10[1] = a1;
  v10[2] = a4;
  v10[3] = a5;
  v32 = v10;
  sub_2397A1C7C((uint64_t)v28, a3);
  sub_23956C760(a1, (uint64_t)v31, (uint64_t)v28, 0x7FFFFFFFu);
  if (v30 < 0)
  {
    operator delete(__p);
    v11 = v32;
    if (v32 != v31)
      goto LABEL_3;
LABEL_6:
    v12 = 4;
    v11 = v31;
    goto LABEL_7;
  }
  v11 = v32;
  if (v32 == v31)
    goto LABEL_6;
LABEL_3:
  if (!v11)
    goto LABEL_8;
  v12 = 5;
LABEL_7:
  (*(void (**)(void))(*v11 + 8 * v12))();
LABEL_8:
  *(_QWORD *)a1 = &off_250ADE3C0;
  *(_QWORD *)(a1 + 408) = a4;
  *(_QWORD *)(a1 + 416) = a5;
  sub_23956CA18((_QWORD *)(a1 + 424), a3);
  *(_QWORD *)(a1 + 456) = 0;
  *(_QWORD *)(a1 + 464) = 0;
  *(_QWORD *)(a1 + 472) = 0;
  if (a3)
  {
    v13 = 0;
    v14 = 0;
    do
    {
      v15 = operator new(0x120uLL);
      v15[2] = 0;
      *v15 = &off_250ADE518;
      v15[1] = 0;
      v16 = sub_23957A470(v15 + 3, a2);
      v17 = (uint64_t *)(*(_QWORD *)(a1 + 424) + 16 * v13);
      v18 = (std::__shared_weak_count *)v17[1];
      *v17 = v16;
      v17[1] = (uint64_t)v15;
      if (v18)
      {
        p_shared_owners = (unint64_t *)&v18->__shared_owners_;
        do
          v20 = __ldaxr(p_shared_owners);
        while (__stlxr(v20 - 1, p_shared_owners));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      v13 = ++v14;
    }
    while (v14 < a3);
  }
  *(_QWORD *)(a1 + 448) = os_log_create("com.apple.corepg.objseg", "PointsOfInterest");
  v22 = *(_QWORD *)(a1 + 456);
  v21 = *(_QWORD *)(a1 + 464);
  v23 = (v21 - v22) >> 3;
  if (a3 <= v23)
  {
    if (a3 < v23)
    {
      v21 = v22 + 8 * a3;
      *(_QWORD *)(a1 + 464) = v21;
    }
  }
  else
  {
    sub_23946DAD4(a1 + 456, a3 - v23);
    v22 = *(_QWORD *)(a1 + 456);
    v21 = *(_QWORD *)(a1 + 464);
  }
  if (v21 != v22)
  {
    v24 = 0;
    do
    {
      v25 = os_signpost_id_generate(*(os_log_t *)(a1 + 448));
      v26 = *(_QWORD *)(a1 + 456);
      *(_QWORD *)(v26 + 8 * v24++) = v25;
    }
    while (v24 < (*(_QWORD *)(a1 + 464) - v26) >> 3);
  }
  return a1;
}

void sub_23956C6B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  uint64_t v22;
  void **v23;
  void **v24;
  void *v26;

  v26 = *v24;
  if (*v24)
  {
    *(_QWORD *)(v22 + 464) = v26;
    operator delete(v26);
  }
  sub_2394631DC(v23);
  sub_23956CAB0(v22);
  _Unwind_Resume(a1);
}

uint64_t sub_23956C760(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  uint64_t v7;
  uint64_t v8;
  int v9;
  __int128 v10;
  _QWORD *v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD v21[3];
  _QWORD *v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a1 = &off_250ADE4A0;
  v7 = a1 + 8;
  v8 = *(_QWORD *)(a2 + 24);
  if (v8)
  {
    if (v8 == a2)
    {
      *(_QWORD *)(a1 + 32) = v7;
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 24) + 24))(*(_QWORD *)(a2 + 24), v7);
    }
    else
    {
      *(_QWORD *)(a1 + 32) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
    }
  }
  else
  {
    *(_QWORD *)(a1 + 32) = 0;
  }
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  if (*(_DWORD *)a3 <= a4)
    v9 = a4;
  else
    v9 = *(_DWORD *)a3;
  sub_23956DE94(a1 + 56, v9);
  *(_OWORD *)(a1 + 296) = *(_OWORD *)a3;
  if (*(char *)(a3 + 39) < 0)
  {
    sub_23941A7F8((_BYTE *)(a1 + 312), *(void **)(a3 + 16), *(_QWORD *)(a3 + 24));
  }
  else
  {
    v10 = *(_OWORD *)(a3 + 16);
    *(_QWORD *)(a1 + 328) = *(_QWORD *)(a3 + 32);
    *(_OWORD *)(a1 + 312) = v10;
  }
  *(_DWORD *)(a1 + 336) = *(_DWORD *)(a3 + 40);
  sub_2397A1618((pthread_mutex_t *)(a1 + 344));
  if (*(_QWORD *)(a1 + 296))
  {
    v11 = operator new(0x178uLL);
    v11[1] = 0;
    v11[2] = 0;
    *v11 = &off_250ADB8B0;
    v12 = sub_2397A2A4C((uint64_t)(v11 + 3), a1 + 296);
    v13 = *(std::__shared_weak_count **)(a1 + 48);
    *(_QWORD *)(a1 + 40) = v12;
    *(_QWORD *)(a1 + 48) = v11;
    if (v13)
    {
      p_shared_owners = (unint64_t *)&v13->__shared_owners_;
      do
        v15 = __ldaxr(p_shared_owners);
      while (__stlxr(v15 - 1, p_shared_owners));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
    v16 = *(unint64_t **)(a1 + 40);
    v17 = *(_QWORD *)(a1 + 296);
    v21[0] = &off_250ADE4D0;
    v21[1] = a1;
    v22 = v21;
    sub_2397A3340(v16, v17, v21, 0);
    v18 = v22;
    if (v22 == v21)
    {
      v19 = 4;
      v18 = v21;
      goto LABEL_22;
    }
    if (v22)
    {
      v19 = 5;
LABEL_22:
      (*(void (**)(void))(*v18 + 8 * v19))();
    }
  }
  return a1;
}

void sub_23956C954(_Unwind_Exception *a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v6;
  uint64_t v7;

  sub_23956EC30(v4);
  sub_239416DA0(v3);
  v6 = *(_QWORD **)(v1 + 32);
  if (v6 == v2)
  {
    v7 = 4;
  }
  else
  {
    if (!v6)
      goto LABEL_6;
    v7 = 5;
    v2 = *(_QWORD **)(v1 + 32);
  }
  (*(void (**)(_QWORD *))(*v2 + 8 * v7))(v2);
LABEL_6:
  _Unwind_Resume(a1);
}

_QWORD *sub_23956CA18(_QWORD *a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    if (a2 >> 60)
      sub_2394189F8();
    v4 = 16 * a2;
    v5 = (char *)operator new(16 * a2);
    *a1 = v5;
    a1[2] = &v5[16 * a2];
    bzero(v5, 16 * a2);
    a1[1] = &v5[v4];
  }
  return a1;
}

void sub_23956CA90(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(_QWORD *)v1)
    sub_239EC0798((void **)(v1 + 8), *(char **)v1, (void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_23956CAB0(uint64_t a1)
{
  pthread_mutex_t *v2;
  int v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;

  *(_QWORD *)a1 = &off_250ADE4A0;
  v2 = (pthread_mutex_t *)(a1 + 232);
  sub_2397A1694((pthread_mutex_t *)(a1 + 232));
  v3 = *(unsigned __int8 *)(a1 + 112);
  sub_2397A16B4(v2);
  if (!v3)
  {
    sub_23956ED04(a1 + 56);
    v4 = *(_QWORD *)(a1 + 40);
    if (v4)
      sub_2397A2D24(v4);
  }
  sub_2397A163C((pthread_mutex_t *)(a1 + 344));
  if (*(char *)(a1 + 335) < 0)
    operator delete(*(void **)(a1 + 312));
  sub_23956EC30(a1 + 56);
  v5 = *(std::__shared_weak_count **)(a1 + 48);
  if (!v5)
    goto LABEL_10;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(p_shared_owners);
  while (__stlxr(v7 - 1, p_shared_owners));
  if (v7)
  {
LABEL_10:
    v8 = (_QWORD *)(a1 + 8);
    v9 = *(_QWORD **)(a1 + 32);
    if (v9 != (_QWORD *)(a1 + 8))
      goto LABEL_11;
LABEL_14:
    v10 = 4;
    v9 = v8;
    goto LABEL_15;
  }
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  v8 = (_QWORD *)(a1 + 8);
  v9 = *(_QWORD **)(a1 + 32);
  if (v9 == (_QWORD *)(a1 + 8))
    goto LABEL_14;
LABEL_11:
  if (v9)
  {
    v10 = 5;
LABEL_15:
    (*(void (**)(void))(*v9 + 8 * v10))();
  }
  return a1;
}

uint64_t sub_23956CBB8(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  *(_QWORD *)a1 = &off_250ADE3C0;
  os_release(*(void **)(a1 + 448));
  v2 = *(void **)(a1 + 456);
  if (v2)
  {
    *(_QWORD *)(a1 + 464) = v2;
    operator delete(v2);
  }
  v3 = *(_QWORD *)(a1 + 424);
  if (v3)
  {
    v4 = *(_QWORD *)(a1 + 432);
    v5 = *(void **)(a1 + 424);
    if (v4 != v3)
    {
      do
      {
        v6 = *(std::__shared_weak_count **)(v4 - 8);
        if (v6)
        {
          p_shared_owners = (unint64_t *)&v6->__shared_owners_;
          do
            v8 = __ldaxr(p_shared_owners);
          while (__stlxr(v8 - 1, p_shared_owners));
          if (!v8)
          {
            ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
            std::__shared_weak_count::__release_weak(v6);
          }
        }
        v4 -= 16;
      }
      while (v4 != v3);
      v5 = *(void **)(a1 + 424);
    }
    *(_QWORD *)(a1 + 432) = v3;
    operator delete(v5);
  }
  return sub_23956CAB0(a1);
}

void sub_23956CC7C(uint64_t a1)
{
  sub_23956CBB8(a1);
  JUMPOUT(0x23B83E31CLL);
}

uint64_t sub_23956CCA0(uint64_t a1, __int128 *a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  __int128 v9;
  uint64_t v10;
  __int128 v11;
  _QWORD *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  _OWORD v37[2];
  uint64_t v38;
  _BYTE v39[24];
  _BYTE *v40;
  _QWORD v41[3];
  _QWORD *v42;
  uint64_t v43;

  v43 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a1 = &off_250ADE3F0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  v9 = *a2;
  v10 = *((_QWORD *)a2 + 4);
  *(_OWORD *)(a1 + 88) = a2[1];
  *(_OWORD *)(a1 + 72) = v9;
  *(_QWORD *)(a1 + 104) = v10;
  *(_QWORD *)(a1 + 112) = a4;
  *(_QWORD *)(a1 + 120) = a5;
  v11 = *(_OWORD *)(a1 + 88);
  v37[0] = *(_OWORD *)(a1 + 72);
  v37[1] = v11;
  v38 = v10;
  LODWORD(v37[0]) = -1;
  v12 = operator new(0x1E0uLL);
  v12[1] = 0;
  v12[2] = 0;
  *v12 = &off_250ADE550;
  v13 = sub_23956F784((uint64_t)(v12 + 3), a3, a4, a5);
  v14 = *(std::__shared_weak_count **)(a1 + 16);
  *(_QWORD *)(a1 + 8) = v13;
  *(_QWORD *)(a1 + 16) = v12;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = operator new(0x1F8uLL);
  v17[1] = 0;
  v17[2] = 0;
  *v17 = &off_250ADE678;
  v18 = sub_23956C468((uint64_t)(v17 + 3), (uint64_t)v37, a3, a4, a5);
  v19 = *(std::__shared_weak_count **)(a1 + 32);
  *(_QWORD *)(a1 + 24) = v18;
  *(_QWORD *)(a1 + 32) = v17;
  if (v19)
  {
    v20 = (unint64_t *)&v19->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  v22 = operator new(0x2D0uLL);
  v22[1] = 0;
  v22[2] = 0;
  *v22 = &off_250ADE6B0;
  v23 = operator new(0x20uLL);
  *v23 = &off_250ADE6E8;
  v23[1] = a1;
  v23[2] = a1;
  v23[3] = a1;
  v42 = v23;
  v40 = 0;
  sub_239573F28(v22 + 3, 4, v41, 1uLL, (uint64_t)v39, 0x7FFFFFFFu);
  v24 = v40;
  if (v40 == v39)
  {
    v25 = 4;
    v24 = v39;
  }
  else
  {
    if (!v40)
      goto LABEL_16;
    v25 = 5;
  }
  (*(void (**)(void))(*v24 + 8 * v25))();
LABEL_16:
  v26 = v42;
  if (v42 == v41)
  {
    v27 = 4;
    v26 = v41;
    goto LABEL_20;
  }
  if (v42)
  {
    v27 = 5;
LABEL_20:
    (*(void (**)(void))(*v26 + 8 * v27))();
  }
  v28 = *(std::__shared_weak_count **)(a1 + 48);
  *(_QWORD *)(a1 + 40) = v22 + 3;
  *(_QWORD *)(a1 + 48) = v22;
  if (v28)
  {
    v29 = (unint64_t *)&v28->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  v31 = operator new(0x1E0uLL);
  v31[1] = 0;
  v31[2] = 0;
  *v31 = &off_250ADE908;
  v32 = sub_2395760B8((uint64_t)(v31 + 3), a3, a4, a5);
  v33 = *(std::__shared_weak_count **)(a1 + 64);
  *(_QWORD *)(a1 + 56) = v32;
  *(_QWORD *)(a1 + 64) = v31;
  if (v33)
  {
    v34 = (unint64_t *)&v33->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  return a1;
}

void sub_23956CFB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  void *v28;

  std::__shared_weak_count::~__shared_weak_count(v26);
  operator delete(v28);
  sub_239416DA0(v25);
  sub_239416DA0(v24);
  sub_239416DA0(v23);
  sub_239416DA0(a10);
  _Unwind_Resume(a1);
}

_QWORD *sub_23956D078(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;

  *a1 = &off_250ADE3F0;
  v2 = (std::__shared_weak_count *)a1[8];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[6];
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[6];
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  v8 = (std::__shared_weak_count *)a1[4];
  if (v8)
  {
    v9 = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
      v11 = (std::__shared_weak_count *)a1[2];
      if (v11)
        goto LABEL_16;
      return a1;
    }
  }
  v11 = (std::__shared_weak_count *)a1[2];
  if (!v11)
    return a1;
LABEL_16:
  v12 = (unint64_t *)&v11->__shared_owners_;
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 - 1, v12));
  if (v13)
    return a1;
  ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
  std::__shared_weak_count::__release_weak(v11);
  return a1;
}

void sub_23956D1B0(_QWORD *a1)
{
  sub_23956D078(a1);
  JUMPOUT(0x23B83E31CLL);
}

void sub_23956D1D4(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  int v20;
  char *v21;
  char *v22;
  uint64_t v23;
  _QWORD *v24;
  _OWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  int v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  uint64_t v40;
  uint64_t v41;
  std::__shared_weak_count *v42;
  uint64_t v43;
  _QWORD v44[3];
  _QWORD *v45;
  __int128 v46;
  unsigned __int8 v47;
  _BYTE v48[24];
  _BYTE *v49;
  uint64_t v50;
  _QWORD v51[3];
  _QWORD *v52;
  uint64_t v53;

  v53 = *MEMORY[0x24BDAC8D0];
  v6 = *a2;
  v5 = (std::__shared_weak_count *)a2[1];
  v41 = *a2;
  v42 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  if (v6)
  {
    v50 = a1;
    v9 = v51;
    v10 = a3[3];
    if (v10)
    {
      if ((_QWORD *)v10 == a3)
      {
        v52 = v51;
        (*(void (**)(_QWORD *, _QWORD *))(*a3 + 24))(a3, v51);
LABEL_16:
        v15 = *(_QWORD *)(a1 + 8);
        v38 = v6;
        v39 = v5;
        if (v5)
        {
          v16 = (unint64_t *)&v5->__shared_owners_;
          do
            v17 = __ldxr(v16);
          while (__stxr(v17 + 1, v16));
        }
        v40 = 0x14000000140;
        v18 = (uint64_t)v52;
        v43 = v50;
        v19 = v44;
        if (v52)
        {
          if (v52 == v51)
          {
            v45 = v44;
            (*(void (**)(_QWORD *, _QWORD *))(v51[0] + 24))(v51, v44);
LABEL_24:
            LOBYTE(v46) = 0;
            v47 = 0;
            if (*((_BYTE *)a2 + 32))
            {
              v46 = *((_OWORD *)a2 + 1);
              v20 = 1;
              v47 = 1;
            }
            else
            {
              v20 = 0;
            }
            v49 = 0;
            v21 = (char *)operator new(0x48uLL);
            v22 = v21;
            v23 = v43;
            v24 = v45;
            *(_QWORD *)v21 = &off_250ADEA30;
            *((_QWORD *)v21 + 1) = v23;
            if (v24)
            {
              if (v24 == v44)
              {
                *((_QWORD *)v21 + 5) = v21 + 16;
                (*(void (**)(_QWORD *))(v44[0] + 24))(v44);
                v34 = v47;
                v22[48] = 0;
                v25 = v22 + 48;
                v22[64] = 0;
                if (!v34)
                {
LABEL_33:
                  v49 = v22;
                  (*(void (**)(uint64_t, uint64_t *, _BYTE *))(*(_QWORD *)v15 + 16))(v15, &v38, v48);
                  v26 = v49;
                  if (v49 == v48)
                  {
                    v27 = 4;
                    v26 = v48;
                  }
                  else
                  {
                    if (!v49)
                      goto LABEL_38;
                    v27 = 5;
                  }
                  (*(void (**)(void))(*v26 + 8 * v27))();
LABEL_38:
                  if (v45 == v44)
                  {
                    v28 = 4;
                  }
                  else
                  {
                    if (!v45)
                    {
LABEL_43:
                      v29 = v39;
                      if (!v39)
                        goto LABEL_47;
                      v30 = (unint64_t *)&v39->__shared_owners_;
                      do
                        v31 = __ldaxr(v30);
                      while (__stlxr(v31 - 1, v30));
                      if (!v31)
                      {
                        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
                        std::__shared_weak_count::__release_weak(v29);
                        v32 = v52;
                        if (v52 != v51)
                          goto LABEL_48;
                      }
                      else
                      {
LABEL_47:
                        v32 = v52;
                        if (v52 != v51)
                        {
LABEL_48:
                          if (!v32)
                            goto LABEL_55;
                          v33 = 5;
                          v9 = v32;
                          goto LABEL_54;
                        }
                      }
                      v33 = 4;
LABEL_54:
                      (*(void (**)(_QWORD *))(*v9 + 8 * v33))(v9);
                      goto LABEL_55;
                    }
                    v28 = 5;
                    v19 = v45;
                  }
                  (*(void (**)(_QWORD *))(*v19 + 8 * v28))(v19);
                  goto LABEL_43;
                }
              }
              else
              {
                *((_QWORD *)v21 + 5) = v24;
                v45 = 0;
                v21[48] = 0;
                v25 = v21 + 48;
                v21[64] = 0;
                if (!v20)
                  goto LABEL_33;
              }
            }
            else
            {
              *((_QWORD *)v21 + 5) = 0;
              v21[48] = 0;
              v25 = v21 + 48;
              v21[64] = 0;
              if (!v20)
                goto LABEL_33;
            }
            *v25 = v46;
            v22[64] = 1;
            goto LABEL_33;
          }
          v18 = (*(uint64_t (**)(_QWORD *))(*v52 + 16))(v52);
        }
        v45 = (_QWORD *)v18;
        goto LABEL_24;
      }
      v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 16))(v10);
    }
    v52 = (_QWORD *)v10;
    goto LABEL_16;
  }
  v50 = 0;
  v51[0] = 0;
  v11 = a3[3];
  if (!v11)
    sub_2394172E0();
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v11 + 48))(v11, &v50);
  v12 = (std::__shared_weak_count *)v51[0];
  if (v51[0])
  {
    v13 = (unint64_t *)(v51[0] + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
LABEL_55:
  v35 = v42;
  if (v42)
  {
    v36 = (unint64_t *)&v42->__shared_owners_;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
}

