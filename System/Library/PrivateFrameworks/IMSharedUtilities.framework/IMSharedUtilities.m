uint64_t sub_19E23C76C(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;

  v2 = objc_msgSend(a1, "rangeOfString:", CFSTR("("));
  if (v2 == 0x7FFFFFFFFFFFFFFFLL)
    return (uint64_t)a1;
  v3 = v2;
  v4 = v2 + 1;
  if (v2 + 1 >= (unint64_t)objc_msgSend(a1, "length"))
    return (uint64_t)a1;
  v5 = (void *)objc_msgSend(a1, "substringFromIndex:", v4);
  v6 = objc_msgSend(v5, "rangeOfString:", CFSTR(")"));
  if (v6 == 0x7FFFFFFFFFFFFFFFLL)
    return (uint64_t)a1;
  objc_msgSend(v5, "substringToIndex:", v6);
  if (qword_1EE503E08 != -1)
    dispatch_once(&qword_1EE503E08, &unk_1E3FB33E8);
  if (!objc_msgSend((id)qword_1EE503E10, "containsObject:"))
    return (uint64_t)a1;
  else
    return objc_msgSend(a1, "substringToIndex:", v3);
}

uint64_t IMIsStringStewieRoadside(void *a1, const char *a2)
{
  return objc_msgSend(a1, "hasPrefix:", CFSTR("stewie:roadside"));
}

BOOL IMShouldDisplayKeepMessagesSetting()
{
  int v0;
  __CFNotificationCenter *DarwinNotifyCenter;

  v0 = dword_1ECFC6650;
  if (dword_1ECFC6650 < 0)
  {
    if (dword_1ECFC6650 == -2)
    {
      DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
      CFNotificationCenterAddObserver(DarwinNotifyCenter, 0, (CFNotificationCallback)sub_19E2E2A2C, CFSTR("com.apple.MobileSMS.KeepMessages.reset"), 0, CFNotificationSuspensionBehaviorDeliverImmediately);
    }
    v0 = objc_msgSend((id)IMGetCachedDomainValueForKey(), "BOOLValue");
    dword_1ECFC6650 = v0;
  }
  return v0 == 1;
}

void *IMGetUserIgnoreLogoutIntent()
{
  CFPropertyListRef v0;
  void *result;

  v0 = CFPreferencesCopyValue(CFSTR("UserIgnoreLogoutIntent"), CFSTR("com.apple.MobileSMS"), (CFStringRef)*MEMORY[0x1E0C9B260], (CFStringRef)*MEMORY[0x1E0C9B250]);
  result = (id)CFMakeCollectable(v0);
  if (result)
    return (void *)(objc_msgSend(result, "integerValue") != 0);
  return result;
}

uint64_t IMIsRunningInIMDPersistenceAgent()
{
  if (qword_1ECFC7488 != -1)
    dispatch_once(&qword_1ECFC7488, &unk_1E3FB4048);
  return byte_1EE503D70;
}

BOOL IMIsSupportedUTIType(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  void *v4;

  v2 = (void *)qword_1ECFC7218;
  if (!qword_1ECFC7218)
  {
    sub_19E24B524();
    v2 = (void *)qword_1ECFC7218;
  }
  v3 = objc_msgSend(v2, "objectForKey:", a1);
  v4 = (void *)qword_1ECFC7220;
  if (!qword_1ECFC7220)
  {
    sub_19E24B524();
    v4 = (void *)qword_1ECFC7220;
  }
  return (objc_msgSend(v4, "objectForKey:", a1) | v3) != 0;
}

uint64_t IMFileURLIsActuallyAnimated(const __CFURL *a1)
{
  CGImageSource *v2;
  CGImageSource *v3;
  const __CFString *Type;
  const __CFString *v5;
  _BOOL4 IsSupportedAnimatedImage;
  int v7;
  NSObject *v8;
  uint64_t v9;
  NSObject *v10;
  NSObject *v11;
  const char *v12;
  NSObject *v13;
  uint32_t v14;
  NSObject *v15;
  int v17;
  const __CFURL *v18;
  __int16 v19;
  const __CFURL *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v2 = CGImageSourceCreateWithURL(a1, 0);
  if (v2)
  {
    v3 = v2;
    Type = CGImageSourceGetType(v2);
    if (Type)
    {
      v5 = Type;
      IsSupportedAnimatedImage = IMUTTypeIsSupportedAnimatedImage(Type);
      v7 = IMOSLoggingEnabled();
      if (IsSupportedAnimatedImage)
      {
        if (v7)
        {
          v8 = OSLogHandleForIMFoundationCategory();
          if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
          {
            v17 = 138412290;
            v18 = (const __CFURL *)v5;
            _os_log_impl(&dword_19E239000, v8, OS_LOG_TYPE_INFO, "Sniffed type is animated: %@", (uint8_t *)&v17, 0xCu);
          }
        }
        if (CGImageSourceGetCount(v3) >= 2)
        {
          v9 = IMImageSourceHasStereoPair(v3) ^ 1;
LABEL_21:
          CFRelease(v3);
          return v9;
        }
LABEL_20:
        v9 = 0;
        goto LABEL_21;
      }
      if (!v7)
        goto LABEL_20;
      v15 = OSLogHandleForIMFoundationCategory();
      if (!os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
        goto LABEL_20;
      v17 = 138412546;
      v18 = (const __CFURL *)v5;
      v19 = 2112;
      v20 = a1;
      v12 = "Sniffed path actually wasn't animated even though file UTI (%@) was possible: %@";
      v13 = v15;
      v14 = 22;
    }
    else
    {
      if (!IMOSLoggingEnabled())
        goto LABEL_20;
      v11 = OSLogHandleForIMFoundationCategory();
      if (!os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
        goto LABEL_20;
      v17 = 138412290;
      v18 = a1;
      v12 = "Could not sniff type at path %@";
      v13 = v11;
      v14 = 12;
    }
    _os_log_impl(&dword_19E239000, v13, OS_LOG_TYPE_INFO, v12, (uint8_t *)&v17, v14);
    goto LABEL_20;
  }
  if (IMOSLoggingEnabled())
  {
    v10 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      v17 = 138412290;
      v18 = a1;
      _os_log_impl(&dword_19E239000, v10, OS_LOG_TYPE_INFO, "Could not create imageSource to determine APNG / animated HEIC / animated WebP at path %@", (uint8_t *)&v17, 0xCu);
    }
  }
  return 0;
}

BOOL IMUTTypeIsSupportedAnimatedImage(const __CFString *a1)
{
  return UTTypeConformsTo(a1, (CFStringRef)*MEMORY[0x1E0CA5B68])
      || UTTypeConformsTo(a1, (CFStringRef)*MEMORY[0x1E0CA5C10])
      || UTTypeConformsTo(a1, CFSTR("org.webmproject.webp"))
      || UTTypeConformsTo(a1, CFSTR("public.heics")) != 0;
}

uint64_t IMImageSourceHasStereoPair(CGImageSource *a1)
{
  CFDictionaryRef v1;
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  uint64_t v10;
  NSObject *v12;
  uint8_t v13[16];
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _BYTE v18[128];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = CGImageSourceCopyProperties(a1, 0);
  v2 = (id)CFMakeCollectable(v1);
  if (!v2)
    return 0;
  v3 = (void *)objc_msgSend(v2, "objectForKeyedSubscript:", *MEMORY[0x1E0CBCE58]);
  if (!v3)
    return 0;
  v4 = v3;
  v16 = 0u;
  v17 = 0u;
  v14 = 0u;
  v15 = 0u;
  v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
  if (!v5)
    return 0;
  v6 = *(_QWORD *)v15;
  v7 = *MEMORY[0x1E0CBCE40];
  v8 = *MEMORY[0x1E0CBCE50];
  while (2)
  {
    for (i = 0; i != v5; ++i)
    {
      if (*(_QWORD *)v15 != v6)
        objc_enumerationMutation(v4);
      if (objc_msgSend((id)objc_msgSend(*(id *)(*((_QWORD *)&v14 + 1) + 8 * i), "objectForKeyedSubscript:", v7), "isEqualToString:", v8))
      {
        if (!IMOSLoggingEnabled())
          return 1;
        v12 = OSLogHandleForIMFoundationCategory();
        v10 = 1;
        if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)v13 = 0;
          _os_log_impl(&dword_19E239000, v12, OS_LOG_TYPE_INFO, "StereoPair detected", v13, 2u);
        }
        return v10;
      }
    }
    v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
    v10 = 0;
    if (v5)
      continue;
    break;
  }
  return v10;
}

uint64_t IMSMSReportSpamActivateExtensions()
{
  void *v0;
  uint64_t result;
  NSObject *v2;
  void *v3;
  int v4;
  void *v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v0 = (void *)objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB34D0], "mainBundle"), "bundleIdentifier");
  result = objc_msgSend(v0, "isEqualToString:", CFSTR("com.apple.MobileSMS"));
  if ((_DWORD)result)
  {
    if (IMOSLoggingEnabled())
    {
      v2 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
      {
        v4 = 138412290;
        v5 = v0;
        _os_log_impl(&dword_19E239000, v2, OS_LOG_TYPE_INFO, "We are warming up the classication shared instance for bundleIdentifier %@", (uint8_t *)&v4, 0xCu);
      }
    }
    v3 = (void *)sub_19E24B3E8();
    result = objc_opt_respondsToSelector();
    if ((result & 1) != 0)
      return objc_msgSend(v3, "activateWithCompletion:", 0);
  }
  return result;
}

id IMBalloonProviderBundlePaths(int a1)
{
  const __CFString *v2;
  void *v3;
  uint64_t v4;
  void *v5;
  _QWORD *v6;
  uint64_t v7;
  void *v8;
  id v9;
  _QWORD v11[6];
  _QWORD v12[5];

  v12[4] = *MEMORY[0x1E0C80C00];
  if (a1)
    v2 = (const __CFString *)objc_msgSend(CFSTR("/System/iOSSupport"), "stringByAppendingPathComponent:", CFSTR("/System/Library/Messages/iMessageBalloons"));
  else
    v2 = CFSTR("/System/Library/Messages/iMessageBalloons");
  v3 = (void *)objc_msgSend((id)IMSystemRootDirectory(), "stringByAppendingPathComponent:", v2);
  v4 = objc_msgSend(v3, "stringByAppendingPathComponent:", CFSTR("MSMessageExtensionBalloonPlugin.bundle"));
  if (a1)
  {
    v12[0] = v4;
    v12[1] = objc_msgSend(v3, "stringByAppendingPathComponent:", CFSTR("HandwritingProvider-iOSMac.bundle"));
    v12[2] = objc_msgSend(v3, "stringByAppendingPathComponent:", CFSTR("DigitalTouchBalloonProvider-iOSMac.bundle"));
    v12[3] = objc_msgSend(v3, "stringByAppendingPathComponent:", CFSTR("RichLinkProvider.bundle"));
    v5 = (void *)MEMORY[0x1E0C99D20];
    v6 = v12;
    v7 = 4;
  }
  else
  {
    v11[0] = v4;
    v11[1] = objc_msgSend(v3, "stringByAppendingPathComponent:", CFSTR("AssetExplorer.bundle"));
    v11[2] = objc_msgSend(v3, "stringByAppendingPathComponent:", CFSTR("HandwritingProvider.bundle"));
    v11[3] = objc_msgSend(v3, "stringByAppendingPathComponent:", CFSTR("DigitalTouchBalloonProvider.bundle"));
    v11[4] = objc_msgSend(v3, "stringByAppendingPathComponent:", CFSTR("RichLinkProvider.bundle"));
    v11[5] = objc_msgSend(v3, "stringByAppendingPathComponent:", CFSTR("ASMessagesProvider.bundle"));
    v5 = (void *)MEMORY[0x1E0C99D20];
    v6 = v11;
    v7 = 6;
  }
  v8 = (void *)objc_msgSend(v5, "arrayWithObjects:count:", v6, v7);
  if (-[IMFeatureFlags isScheduledMessagesEnabled](+[IMFeatureFlags sharedFeatureFlags](IMFeatureFlags, "sharedFeatureFlags"), "isScheduledMessagesEnabled"))
  {
    v9 = (id)objc_msgSend(v8, "mutableCopy");
    objc_msgSend(v9, "addObject:", objc_msgSend(v3, "stringByAppendingPathComponent:", CFSTR("SendLaterProvider.bundle")));
    return (id)objc_msgSend(v9, "copy");
  }
  return v8;
}

const __CFString *IMPreviewExtension()
{
  if (IMSupportsASTC())
    return CFSTR("ktx");
  else
    return CFSTR("cpbitmap");
}

uint64_t IMSupportsASTC()
{
  return MEMORY[0x1E0DE7D20](IMDeviceUtilities, sel_IMSupportsASTC);
}

void sub_19E23D26C(uint64_t a1, int token)
{
  uint32_t state;
  int v4;
  NSObject *v5;
  NSObject *v6;
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  void *v18;
  uint64_t state64;
  uint8_t buf[4];
  uint64_t v21;
  __int16 v22;
  int v23;
  __int16 v24;
  int v25;
  __int16 v26;
  int v27;
  __int16 v28;
  int v29;
  __int16 v30;
  int v31;
  __int16 v32;
  int v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  state64 = 0;
  state = notify_get_state(token, &state64);
  v4 = IMOSLoggingEnabled();
  if (state)
  {
    if (!v4)
      return;
    OSLogHandleForIMFoundationCategory();
    v5 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 67109120;
      LODWORD(v21) = state;
      _os_log_impl(&dword_19E239000, v5, OS_LOG_TYPE_INFO, "LQM-WRM Failed to get the state for com.apple.WRM.iRAT_event.linkRecommendation (%u)", buf, 8u);
    }
    goto LABEL_13;
  }
  if (v4)
  {
    OSLogHandleForIMFoundationCategory();
    v6 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 134217984;
      v21 = state64;
      _os_log_impl(&dword_19E239000, v6, OS_LOG_TYPE_INFO, "LQM-WRM WRM notification 0x%llx", buf, 0xCu);
    }

  }
  v7 = state64;
  v8 = BYTE1(state64);
  v9 = BYTE2(state64);
  v10 = BYTE3(state64);
  v11 = BYTE4(state64);
  v12 = BYTE5(state64);
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", state64);
  v13 = objc_claimAutoreleasedReturnValue();
  v15 = *(_QWORD *)(a1 + 32);
  v14 = a1 + 32;
  v16 = *(void **)(v15 + 24);
  *(_QWORD *)(v15 + 24) = v13;

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v10);
  v17 = objc_claimAutoreleasedReturnValue();
  v18 = *(void **)(*(_QWORD *)v14 + 16);
  *(_QWORD *)(*(_QWORD *)v14 + 16) = v17;

  if (IMOSLoggingEnabled())
  {
    OSLogHandleForIMFoundationCategory();
    v5 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 134219520;
      v21 = state64;
      v22 = 1024;
      v23 = v7;
      v24 = 1024;
      v25 = v8;
      v26 = 1024;
      v27 = v9;
      v28 = 1024;
      v29 = v10;
      v30 = 1024;
      v31 = v11;
      v32 = 1024;
      v33 = v12;
      _os_log_impl(&dword_19E239000, v5, OS_LOG_TYPE_INFO, "LQM-WRM Link incoming 0x%llx  xpref %d wifi score %d confidence %d cell score %d confidence %d is5GAvailable %d", buf, 0x30u);
    }
LABEL_13:

  }
}

uint64_t sub_19E23D4E0(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[5];
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;

  if (!objc_msgSend(a1, "length"))
    return 0;
  v7 = 0;
  v8 = &v7;
  v9 = 0x2020000000;
  v10 = 0;
  v2 = objc_msgSend(a1, "length");
  v3 = *MEMORY[0x1E0D366B8];
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v6[2] = sub_19E24A4DC;
  v6[3] = &unk_1E3FB53A8;
  v6[4] = &v7;
  objc_msgSend(a1, "enumerateAttribute:inRange:options:usingBlock:", v3, 0, v2, 0, v6);
  v4 = v8[3];
  _Block_object_dispose(&v7, 8);
  return v4;
}

void sub_19E23D5A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19E23D5B8(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  void *v4;
  void *v5;
  id v9;
  void *v10;
  id v11;
  id v12;

  v5 = v4;
  sub_19E24B710(a1);
  v9 = objc_allocWithZone(MEMORY[0x1E0C99E60]);
  v10 = (void *)sub_19E36F954();
  swift_bridgeObjectRelease();
  v11 = objc_msgSend(v9, sel_initWithArray_, v10);

  sub_19E36FA50();
  v12 = (id)sub_19E36FA44();
  swift_bridgeObjectRelease();
  objc_msgSend(v5, sel_setClasses_forSelector_argumentIndex_ofReply_, v12, a2, a3, a4 & 1);

}

void sub_19E23D744(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19E23DBFC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19E23DDD0(uint64_t a1, __CFString *a2)
{
  NSObject *v4;
  __CFString *v5;
  uint64_t v6;
  __CFString *v7;
  uint64_t v8;
  NSObject *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  __int16 v13;
  __CFString *v14;
  __int16 v15;
  uint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  if (objc_msgSend(*(id *)(a1 + 32), "objectForKey:", a2))
  {
    if (IMOSLoggingEnabled())
    {
      v4 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
      {
        v5 = *(__CFString **)(a1 + 40);
        v6 = objc_msgSend(*(id *)(a1 + 32), "objectForKey:", a2);
        v11 = 138412802;
        v12 = (uint64_t)a2;
        v13 = 2112;
        v14 = v5;
        v15 = 2112;
        v16 = v6;
        _os_log_impl(&dword_19E239000, v4, OS_LOG_TYPE_INFO, "Can't register UTIType %@ for class %@. It is already registered for %@. Please file a bug.", (uint8_t *)&v11, 0x20u);
      }
    }
  }
  objc_msgSend(*(id *)(a1 + 32), "setObject:forKey:", *(_QWORD *)(a1 + 40), a2);
  if (-[__CFString hasPrefix:](a2, "hasPrefix:", CFSTR("dyn.")))
  {
    v7 = (__CFString *)UTTypeCopyPreferredTagWithClass(a2, (CFStringRef)*MEMORY[0x1E0CA5A88]);
    v8 = -[__CFString lowercaseString](v7, "lowercaseString");
    if (objc_msgSend(*(id *)(a1 + 48), "objectForKey:", v8) && IMOSLoggingEnabled())
    {
      v9 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
      {
        v10 = objc_msgSend(*(id *)(a1 + 48), "objectForKey:", v8);
        v11 = 138412802;
        v12 = v8;
        v13 = 2112;
        v14 = a2;
        v15 = 2112;
        v16 = v10;
        _os_log_impl(&dword_19E239000, v9, OS_LOG_TYPE_INFO, "Can't register extension %@ for UTIType %@. It is already registered for %@. Please file a bug.", (uint8_t *)&v11, 0x20u);
      }
    }
    objc_msgSend(*(id *)(a1 + 48), "setObject:forKey:", a2, v8);

  }
}

void sub_19E23E018(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  -[objc_class stringFromContact:style:](+[IMContactStore IMCNContactFormatterClass](IMContactStore, "IMCNContactFormatterClass"), "stringFromContact:style:", a1[4], a1[6]);
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = *(_QWORD *)(a1[5] + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

uint64_t IMSharedHelperAppBlocklisted(uint64_t a1, void *a2)
{
  uint64_t v4;
  void *v5;
  NSObject *v6;
  uint64_t v7;
  NSObject *v8;
  int v10;
  uint64_t v11;
  __int16 v12;
  void *v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  if (!a1 || !a2)
  {
    if (IMOSLoggingEnabled())
    {
      v8 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        v10 = 138412546;
        v11 = a1;
        v12 = 2112;
        v13 = a2;
        _os_log_impl(&dword_19E239000, v8, OS_LOG_TYPE_INFO, "Invalid parameters bundleIdentifier: %@ serverBag: %@", (uint8_t *)&v10, 0x16u);
      }
    }
    return 0;
  }
  v4 = objc_msgSend(a2, "objectForKey:", CFSTR("banned-messages-app-bid"));
  if (!v4)
    return 0;
  v5 = (void *)v4;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0
    || !objc_msgSend((id)objc_msgSend(v5, "objectForKey:", a1), "BOOLValue"))
  {
    return 0;
  }
  if (!IMOSLoggingEnabled())
    return 1;
  v6 = OSLogHandleForIMFoundationCategory();
  v7 = 1;
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    v10 = 138412546;
    v11 = a1;
    v12 = 2112;
    v13 = v5;
    _os_log_impl(&dword_19E239000, v6, OS_LOG_TYPE_INFO, "IMSharedHelperAppBlocklisted: Not showing app as it is blocklisted, bundleID: %@ bannedBundleIDsToBannedState: %@", (uint8_t *)&v10, 0x16u);
  }
  return v7;
}

uint64_t IMSharedUtilitiesFrameworkBundle()
{
  if (qword_1EE503B40 != -1)
    dispatch_once(&qword_1EE503B40, &unk_1E3FB2558);
  return qword_1EE503B48;
}

uint64_t IMSharedHelperNSNewStringByAppendingStrings()
{
  return _NSNewStringByAppendingStrings();
}

uint64_t IMBalloonExtensionIDWithSuffix(uint64_t a1)
{
  return objc_msgSend((id)objc_msgSend(CFSTR("com.apple.messages.MSMessageExtensionBalloonPlugin"), "stringByAppendingString:", CFSTR(":0000000000:")), "stringByAppendingString:", a1);
}

void *IMAttachmentPreviewFileURL(void *a1, uint64_t a2, int a3)
{
  return IMAttachmentPreviewCacheFileURL(a1, (uint64_t)CFSTR("-preview"), a2, a3);
}

CFStringRef IMUTITypeForFilename(void *a1)
{
  CFStringRef result;
  __CFString *v3;

  result = (CFStringRef)objc_msgSend(a1, "length");
  if (result)
  {
    v3 = 0;
    IMAttachmentFileNameAndExtension(a1, 0, (const __CFString **)&v3);
    return IMUTITypeForExtension(v3);
  }
  return result;
}

const __CFString *IMAttachmentFileNameAndExtension(void *a1, uint64_t *a2, const __CFString **a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const __CFString *result;

  v6 = objc_msgSend(a1, "rangeOfString:options:range:", CFSTR(".emoji.png"), 13, 0, objc_msgSend(a1, "length"));
  v7 = objc_msgSend(a1, "rangeOfString:options:range:", CFSTR(".loc.vcf"), 13, 0, objc_msgSend(a1, "length"));
  if (v6 != 0x7FFFFFFFFFFFFFFFLL)
  {
    v9 = objc_msgSend(a1, "substringToIndex:", v6);
    result = CFSTR("png");
    if (!a2)
      goto LABEL_7;
    goto LABEL_6;
  }
  v8 = v7;
  if (v7 == 0x7FFFFFFFFFFFFFFFLL)
  {
    v9 = objc_msgSend(a1, "stringByDeletingPathExtension");
    result = (const __CFString *)objc_msgSend(a1, "pathExtension");
    if (!a2)
      goto LABEL_7;
LABEL_6:
    *a2 = v9;
    goto LABEL_7;
  }
  v9 = objc_msgSend(a1, "substringToIndex:", v7);
  result = (const __CFString *)objc_msgSend(a1, "substringFromIndex:", v8 + 1);
  if (a2)
    goto LABEL_6;
LABEL_7:
  if (a3)
    *a3 = result;
  return result;
}

CFStringRef IMUTITypeForExtension(void *a1)
{
  const __CFString *v2;
  void *v3;
  CFStringRef result;
  void *v5;

  if (!objc_msgSend(a1, "length"))
    return (CFStringRef)*MEMORY[0x1E0CA5B18];
  v2 = (const __CFString *)objc_msgSend(a1, "lowercaseString");
  v3 = (void *)qword_1ECFC7218;
  if (!qword_1ECFC7218)
  {
    sub_19E24B524();
    v3 = (void *)qword_1ECFC7218;
  }
  result = (CFStringRef)objc_msgSend(v3, "objectForKey:", v2);
  if (!result)
  {
    v5 = (void *)qword_1ECFC7220;
    if (!qword_1ECFC7220)
    {
      sub_19E24B524();
      v5 = (void *)qword_1ECFC7220;
    }
    result = (CFStringRef)objc_msgSend(v5, "objectForKey:", v2);
    if (!result)
    {
      result = (CFStringRef)IMLookUpExtensionInCache((uint64_t)v2);
      if (!result)
        return (id)UTTypeCreatePreferredIdentifierForTag((CFStringRef)*MEMORY[0x1E0CA5A88], v2, 0);
    }
  }
  return result;
}

uint64_t IMLookUpExtensionInCache(uint64_t a1)
{
  if (qword_1ECFC71F8 == -1)
  {
    if (a1)
      return objc_msgSend((id)qword_1ECFC71F0, "objectForKey:", a1);
  }
  else
  {
    dispatch_once(&qword_1ECFC71F8, &unk_1E3FB58E8);
    if (a1)
      return objc_msgSend((id)qword_1ECFC71F0, "objectForKey:", a1);
  }
  return 0;
}

uint64_t IMPreviewCachesDirectoryWithAttachmentURL(void *a1)
{
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint8_t buf[4];
  id v11;
  __int16 v12;
  void *v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v2 = (void *)objc_msgSend(a1, "path");
    v3 = IMSMSDirectoryURL();
    v4 = objc_msgSend(v2, "rangeOfString:", objc_msgSend(v3, "path"));
    if (v4 == 0x7FFFFFFFFFFFFFFFLL)
    {
      if (IMOSLoggingEnabled())
      {
        v6 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 138412546;
          v11 = v3;
          v12 = 2112;
          v13 = a1;
          _os_log_impl(&dword_19E239000, v6, OS_LOG_TYPE_INFO, "Prefix (%@) not found in path (%@), skipping cache path generation", buf, 0x16u);
        }
      }
    }
    else
    {
      v7 = objc_msgSend((id)objc_msgSend(v2, "substringFromIndex:", v4 + v5), "stringByDeletingLastPathComponent");
      v8 = objc_msgSend(MEMORY[0x1E0CB3940], "pathWithComponents:", objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:", objc_msgSend(IMCachesDirectoryURL(), "path"), CFSTR("Previews"), v7, 0));
      if (v8)
        return objc_msgSend(MEMORY[0x1E0C99E98], "fileURLWithPath:isDirectory:", v8, 1);
    }
  }
  return 0;
}

id IMSMSDirectoryURL()
{
  if (qword_1ECFC71C8 != -1)
    dispatch_once(&qword_1ECFC71C8, &unk_1E3FB80B0);
  return (id)qword_1ECFC71C0;
}

id IMCachesDirectoryURL()
{
  if (qword_1ECFC71D8 != -1)
    dispatch_once(&qword_1ECFC71D8, &unk_1E3FB47A8);
  return (id)qword_1ECFC71D0;
}

BOOL IMSharedHelperNickNameEnabled()
{
  return !+[IMAppleStoreHelper isInAppleStoreDemoMode](IMAppleStoreHelper, "isInAppleStoreDemoMode")
      && _IMServerSaysToKeepNicknamesEnabled();
}

void sub_19E240AE4(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x19E2403C4);
  }
  _Unwind_Resume(a1);
}

BOOL _IMServerSaysToKeepNicknamesEnabled()
{
  void *v0;
  void *v1;
  _BOOL8 v2;
  _QWORD v4[5];
  BOOL v5;

  v0 = (void *)objc_msgSend((id)objc_msgSend(MEMORY[0x1E0D34E78], "sharedInstanceForBagType:", 1), "objectForKey:", CFSTR("nicknames-enabled-version"));
  v1 = v0;
  v2 = !v0 || (unint64_t)objc_msgSend(v0, "unsignedIntegerValue") <= 1;
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 3221225472;
  v4[2] = sub_19E301C80;
  v4[3] = &unk_1E3FB9028;
  v5 = v2;
  v4[4] = v1;
  if (qword_1ECFC7378 != -1)
    dispatch_once(&qword_1ECFC7378, v4);
  return v2;
}

void sub_19E240F3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t IMSharedHelperGroupHashForHandleIDs(void *a1)
{
  return objc_msgSend((id)objc_msgSend((id)objc_msgSend((id)objc_msgSend(a1, "sortedArrayUsingSelector:", sel_caseInsensitiveCompare_), "componentsJoinedByString:", CFSTR(",")), "dataUsingEncoding:", 4), "SHA1HexString");
}

uint64_t IMSharedHelperDeviceHasMultipleActiveSubscriptions()
{
  IMCTXPCServiceSubscriptionInfo *v0;

  if (-[IMCTSubscriptionUtilities deviceSupportsMultipleSubscriptions](+[IMCTSubscriptionUtilities sharedInstance](IMCTSubscriptionUtilities, "sharedInstance"), "deviceSupportsMultipleSubscriptions")&& (v0 = -[IMCTSubscriptionUtilities ctSubscriptionInfo](+[IMCTSubscriptionUtilities sharedInstance](IMCTSubscriptionUtilities, "sharedInstance"), "ctSubscriptionInfo")) != 0)
  {
    return MEMORY[0x1E0DE7D20](v0, sel___im_onlyHasActiveSlots);
  }
  else
  {
    return 0;
  }
}

void sub_19E241C40(_Unwind_Exception *exc_buf, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  if (a2 == 1)
  {
    objc_begin_catch(exc_buf);
    objc_end_catch();
    JUMPOUT(0x19E241BD8);
  }
  _Block_object_dispose(&a17, 8);
  _Unwind_Resume(exc_buf);
}

id IMCloudKitGetSyncStateDictionaryWithTestBlock(void *a1)
{
  void (**v1)(void *, const __CFString *, _QWORD);
  void (**v2)(void *, const __CFString *, _QWORD);
  void *v3;
  void *v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  uint64_t v10;
  void *v11;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _BYTE v17[128];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (qword_1ECFC6BD8 == -1)
  {
    if (v1)
      goto LABEL_4;
    goto LABEL_3;
  }
  dispatch_once(&qword_1ECFC6BD8, &unk_1E3FB4508);
  if (!v2)
LABEL_3:
    v2 = (void (**)(void *, const __CFString *, _QWORD))_Block_copy((const void *)qword_1ECFC6BD0);
LABEL_4:
  IMCloudKitGetAllSyncStateKeys();
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0C99E08], "dictionaryWithCapacity:", objc_msgSend(v3, "count"));
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  v16 = 0u;
  v5 = v3;
  v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
  if (v6)
  {
    v7 = v6;
    v8 = *(_QWORD *)v14;
    do
    {
      for (i = 0; i != v7; ++i)
      {
        if (*(_QWORD *)v14 != v8)
          objc_enumerationMutation(v5);
        v10 = *(_QWORD *)(*((_QWORD *)&v13 + 1) + 8 * i);
        v2[2](v2, CFSTR("com.apple.madrid"), v10);
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        if (v11)
          objc_msgSend(v4, "setObject:forKey:", v11, v10, (_QWORD)v13);

      }
      v7 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
    }
    while (v7);
  }

  return v4;
}

uint64_t sub_19E241F04()
{
  return IMGetCachedDomainValueForKey();
}

id IMCloudKitGetAllSyncStateKeys()
{
  if (qword_1ECFC6BC8 != -1)
    dispatch_once(&qword_1ECFC6BC8, &unk_1E3FB3328);
  return (id)qword_1ECFC6BC0;
}

id IMStringFromClientCapabilities(uint64_t a1)
{
  void *v2;

  v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB37A0]), "initWithString:", CFSTR("("));
  sub_19E24226C(1, a1, CFSTR("Status"), v2);
  sub_19E24226C(2, a1, CFSTR("Notifications"), v2);
  sub_19E24226C(4, a1, CFSTR("Chats"), v2);
  sub_19E24226C(8, a1, CFSTR("VC"), v2);
  sub_19E24226C(0x80000, a1, CFSTR("FTA"), v2);
  sub_19E24226C(16, a1, CFSTR("AV Chat Info"), v2);
  sub_19E24226C(32, a1, CFSTR("Aux Input"), v2);
  sub_19E24226C(64, a1, CFSTR("VC Invitations"), v2);
  sub_19E24226C(128, a1, CFSTR("Legacy VC"), v2);
  sub_19E24226C(256, a1, CFSTR("Transfers"), v2);
  sub_19E24226C(512, a1, CFSTR("Accounts"), v2);
  sub_19E24226C(1024, a1, CFSTR("Buddy List"), v2);
  sub_19E24226C(4096, a1, CFSTR("Send Messages"), v2);
  sub_19E24226C(0x4000, a1, CFSTR("ID Queries"), v2);
  sub_19E24226C(0x2000, a1, CFSTR("Message History"), v2);
  sub_19E24226C(0x40000, a1, CFSTR("Modify Read State"), v2);
  sub_19E24226C(0x8000, a1, CFSTR("Chat Counts"), v2);
  sub_19E24226C(0x10000, a1, CFSTR("Sent Messages"), v2);
  sub_19E24226C(0x20000, a1, CFSTR("Database Update"), v2);
  sub_19E24226C(0x100000, a1, CFSTR("AV"), v2);
  sub_19E24226C(0x200000, a1, CFSTR("On Demand Chats"), v2);
  sub_19E24226C(0x400000, a1, CFSTR("Precache Recent Chats"), v2);
  sub_19E24226C(0x2000000, a1, CFSTR("Precache Very Recent Chats"), v2);
  sub_19E24226C(0x800000, a1, CFSTR("OneTimeCode"), v2);
  sub_19E24226C(0x1000000, a1, CFSTR("Skip Last Message"), v2);
  sub_19E24226C(0x4000000, a1, CFSTR("Blackhole Chats"), v2);
  sub_19E24226C(0x8000000, a1, CFSTR("Send Emergency Messages"), v2);
  sub_19E24226C(0x10000000, a1, CFSTR("File Provider"), v2);
  sub_19E24226C(0x20000000, a1, CFSTR("Synced Settings"), v2);
  sub_19E24226C(0x40000000, a1, CFSTR("Cloud Sync"), v2);
  objc_msgSend(v2, "appendString:", CFSTR(")"));
  return v2;
}

void sub_19E24226C(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v7;
  void *v8;
  id v9;

  v9 = a3;
  v7 = a4;
  v8 = v7;
  if ((a2 & a1) != 0)
  {
    if ((unint64_t)objc_msgSend(v7, "length") >= 2)
      objc_msgSend(v8, "appendString:", CFSTR(", "));
    objc_msgSend(v8, "appendString:", v9);
  }

}

id IMSHA1HashFromStrings(void *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  objc_msgSend(a1, "sortedArrayUsingSelector:", sel_compare_);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "componentsJoinedByString:", CFSTR(","));
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "dataUsingEncoding:", 4);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "SHA1HexString");
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  return v4;
}

void sub_19E2424A4(void *a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t (**v12)(_QWORD, _QWORD, _QWORD);
  int v13;
  void *v14;
  void *v15;
  uint64_t v16;
  id v17;
  char v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  _BYTE v23[128];
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  if (!a1)
    goto LABEL_14;
  v21 = 0u;
  v22 = 0u;
  v19 = 0u;
  v20 = 0u;
  objc_msgSend(a1, "targets");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v19, v23, 16);
  if (!v5)
  {

    goto LABEL_16;
  }
  v6 = v5;
  v18 = 0;
  v7 = *(_QWORD *)v20;
  do
  {
    for (i = 0; i != v6; ++i)
    {
      if (*(_QWORD *)v20 != v7)
        objc_enumerationMutation(v4);
      v9 = *(_QWORD *)(*((_QWORD *)&v19 + 1) + 8 * i);
      objc_msgSend(v3, "selector");
      if ((objc_opt_respondsToSelector() & 1) != 0)
      {
        objc_msgSend(a1, "filterBlock");
        v10 = objc_claimAutoreleasedReturnValue();
        if (!v10
          || (v11 = (void *)v10,
              objc_msgSend(a1, "filterBlock"),
              v12 = (uint64_t (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue(),
              v13 = v12[2](v12, v9, objc_msgSend(v3, "selector")),
              v12,
              v11,
              v13))
        {
          objc_msgSend(v3, "invokeWithTarget:", v9);
          v18 = 1;
        }
      }
    }
    v6 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v19, v23, 16);
  }
  while (v6);

  if ((v18 & 1) == 0)
  {
LABEL_16:
    v14 = (void *)MEMORY[0x1E0CB3940];
    NSStringFromSelector((SEL)objc_msgSend(v3, "selector"));
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "stringWithFormat:", CFSTR("No responder for %@"), v15);
    v16 = objc_claimAutoreleasedReturnValue();

    objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", CFSTR("IMDistributingProxyException"), v16, 0);
    v17 = (id)objc_claimAutoreleasedReturnValue();
    objc_exception_throw(v17);
  }
LABEL_14:

}

void sub_19E242DBC(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;

  v7 = a2;
  v5 = a3;
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 40), "objectForKey:", v5);
  v6 = (id)objc_claimAutoreleasedReturnValue();
  if (!v6)
    v6 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  if ((objc_msgSend(v6, "containsObject:", v7) & 1) == 0)
    objc_msgSend(v6, "addObject:", v7);
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 40), "setObject:forKey:", v6, v5);

}

void sub_19E242EF0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL sub_19E242F04(void *a1, uint64_t a2, void *a3)
{
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BOOL8 v11;
  _QWORD v13[5];
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  char v21;
  _BYTE v22[128];
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v18 = 0;
  v19 = &v18;
  v20 = 0x2020000000;
  v21 = 0;
  v14 = 0u;
  v15 = 0u;
  v16 = 0u;
  v17 = 0u;
  v4 = a3;
  v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v14, v22, 16);
  if (v5)
  {
    v6 = *(_QWORD *)v15;
    v7 = MEMORY[0x1E0C809B0];
LABEL_3:
    v8 = 0;
    while (1)
    {
      if (*(_QWORD *)v15 != v6)
        objc_enumerationMutation(v4);
      v9 = *(_QWORD *)(*((_QWORD *)&v14 + 1) + 8 * v8);
      v10 = objc_msgSend(a1, "length");
      v13[0] = v7;
      v13[1] = 3221225472;
      v13[2] = sub_19E2473EC;
      v13[3] = &unk_1E3FB5448;
      v13[4] = &v18;
      objc_msgSend(a1, "enumerateAttribute:inRange:options:usingBlock:", v9, 0, v10, 0, v13);
      if (*((_BYTE *)v19 + 24))
        break;
      if (v5 == ++v8)
      {
        v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v14, v22, 16);
        if (v5)
          goto LABEL_3;
        break;
      }
    }
  }

  v11 = *((_BYTE *)v19 + 24) != 0;
  _Block_object_dispose(&v18, 8);

  return v11;
}

void sub_19E2430A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t IMAdditionalChatRegistryLoggingEnabled()
{
  if (objc_msgSend((id)objc_msgSend(MEMORY[0x1E0D36A50], "sharedInstance"), "isInternalInstall")
    && qword_1ECFC70E0 != -1)
  {
    dispatch_once(&qword_1ECFC70E0, &unk_1E3FB1608);
  }
  return byte_1EE503B70;
}

uint64_t IMAdditionalContactsLoggingEnabled()
{
  if (objc_msgSend((id)objc_msgSend(MEMORY[0x1E0D36A50], "sharedInstance"), "isInternalInstall")
    && qword_1ECFC74F8 != -1)
  {
    dispatch_once(&qword_1ECFC74F8, &unk_1E3FB8FE0);
  }
  return byte_1ECFC7258;
}

uint64_t IMIsRunningInUnitTesting()
{
  if (qword_1ECFC7600 != -1)
    dispatch_once(&qword_1ECFC7600, &unk_1E3FB8F60);
  return byte_1ECFC7390;
}

uint64_t IMIsRunningInSafariSandboxBroker()
{
  if (qword_1ECFC7370 != -1)
    dispatch_once(&qword_1ECFC7370, &unk_1E3FB8F40);
  return byte_1EE503DC8;
}

uint64_t IMIsRunningInSafari()
{
  if (qword_1ECFC7368 != -1)
    dispatch_once(&qword_1ECFC7368, &unk_1E3FB8F20);
  return byte_1EE503D68;
}

uint64_t IMIsRunningInSOSBuddy()
{
  if (qword_1ECFC7360 != -1)
    dispatch_once(&qword_1ECFC7360, &unk_1E3FB28B8);
  return byte_1EE503DD8;
}

uint64_t IMIsRunningInFaceTime()
{
  if (qword_1ECFC7380 != -1)
    dispatch_once(&qword_1ECFC7380, &unk_1E3FB2878);
  return byte_1EE503DA8;
}

uint64_t IMIsRunningInMessages()
{
  if (qword_1ECFC7388 != -1)
    dispatch_once(&qword_1ECFC7388, &unk_1E3FB8F00);
  return byte_1ECFC7040;
}

uint64_t sub_19E245058(uint64_t a1, void *a2)
{
  id v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;

  v2 = a2;
  objc_msgSend(v2, "entitlements");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "objectForKey:ofClass:", CFSTR("com.apple.developer.shared-with-you"), objc_opt_class());
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v2, "entitlements");
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v5, "objectForKey:ofClass:", CFSTR("com.apple.developer.shared-with-you.collaboration"), objc_opt_class());
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  if ((objc_msgSend(v4, "BOOLValue") & 1) != 0)
    v7 = 1;
  else
    v7 = objc_msgSend(v6, "BOOLValue");

  return v7;
}

uint64_t IMIsRunningInMobileSMS()
{
  if (qword_1ECFC7500 != -1)
    dispatch_once(&qword_1ECFC7500, &unk_1E3FB1628);
  return byte_1ECFC7250;
}

BOOL IMIsRunningInCarousel()
{
  if (qword_1ECFC6F28 != -1)
    dispatch_once(&qword_1ECFC6F28, &unk_1E3FB46E8);
  return byte_1EE503838 != 0;
}

const void *IMLogHandleForCategory(const void *a1)
{
  const void *Value;

  if (qword_1ECFC73E8 != -1)
    dispatch_once(&qword_1ECFC73E8, &unk_1E3FB3DE8);
  pthread_mutex_lock(&stru_1ECFC73A8);
  Value = CFDictionaryGetValue((CFDictionaryRef)qword_1ECFC73F0, a1);
  if (!Value)
  {
    Value = os_log_create((const char *)IMMessagesLoggingSubSystem, (const char *)a1);
    CFDictionarySetValue((CFMutableDictionaryRef)qword_1ECFC73F0, a1, Value);
  }
  pthread_mutex_unlock(&stru_1ECFC73A8);
  return Value;
}

BOOL IMSharedHelperRetrieveSimDetailsFromTelephony()
{
  return objc_msgSend((id)objc_msgSend(MEMORY[0x1E0D20BF8], "sharedInstance"), "deviceType") == 2;
}

uint64_t IMWorkoutUTITypes()
{
  _QWORD v1[2];

  v1[1] = *MEMORY[0x1E0C80C00];
  v1[0] = (id)UTTypeCreatePreferredIdentifierForTag((CFStringRef)*MEMORY[0x1E0CA5A88], CFSTR("workout"), 0);
  return objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v1, 1);
}

BOOL IMSharedHelperDeviceIsiPad()
{
  return MGGetSInt32Answer() == 3;
}

uint64_t IMPreviewGeneratorClasses()
{
  int v0;
  void *v1;
  _QWORD v3[2];
  _QWORD v4[11];

  v4[10] = *MEMORY[0x1E0C80C00];
  v0 = MGGetBoolAnswer();
  v4[0] = objc_opt_class();
  v4[1] = objc_opt_class();
  v4[2] = objc_opt_class();
  v4[3] = objc_opt_class();
  v4[4] = objc_opt_class();
  v4[5] = objc_opt_class();
  v4[6] = objc_opt_class();
  v4[7] = objc_opt_class();
  v4[8] = objc_opt_class();
  v4[9] = objc_opt_class();
  v1 = (void *)objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v4, 10);
  if (v0)
  {
    v3[0] = objc_opt_class();
    v3[1] = objc_opt_class();
    return objc_msgSend(v1, "arrayByAddingObjectsFromArray:", objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v3, 2));
  }
  return (uint64_t)v1;
}

id IMHomeLibraryDirectoryURL()
{
  if (qword_1ECFC7058 != -1)
    dispatch_once(&qword_1ECFC7058, &unk_1E3FB39E8);
  return (id)qword_1ECFC7060;
}

uint64_t sub_19E2473EC(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, _BYTE *a5)
{
  if (a2)
  {
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = 1;
    *a5 = 1;
  }
  return result;
}

uint64_t IMIsStringStewieEmergency(void *a1, const char *a2)
{
  return objc_msgSend(a1, "hasPrefix:", CFSTR("stewie:emergency:112911"));
}

void sub_19E2474A0(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

void sub_19E2474AC(uint64_t a1)
{

}

void sub_19E2474B4(uint64_t a1)
{

}

void sub_19E2474BC(uint64_t a1)
{

}

void sub_19E2474C4(uint64_t a1)
{

}

void sub_19E2474CC(uint64_t a1)
{

}

void sub_19E2474D4(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

void sub_19E2474E0(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

void sub_19E2474EC(uint64_t a1)
{

}

void sub_19E2474F4(uint64_t a1)
{

}

void sub_19E2474FC(uint64_t a1)
{

}

void sub_19E247504(uint64_t a1)
{

}

void sub_19E24750C(uint64_t a1)
{

}

void sub_19E247514(uint64_t a1)
{

}

void sub_19E24751C(uint64_t a1)
{

}

void sub_19E247524(uint64_t a1)
{

}

void sub_19E24752C(uint64_t a1)
{

}

void sub_19E247534(uint64_t a1)
{

}

void sub_19E24753C(uint64_t a1)
{

}

void sub_19E247544(uint64_t a1)
{

}

void sub_19E24754C(uint64_t a1)
{

}

void sub_19E247554(uint64_t a1)
{

}

void sub_19E24755C(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

void sub_19E247568(uint64_t a1)
{

}

void sub_19E247570(uint64_t a1)
{

}

void sub_19E247578(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

void sub_19E247584(uint64_t a1)
{

}

void sub_19E24758C(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

uint64_t sub_19E24759C(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_19E2475AC(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_19E2475BC(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_19E2475CC(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_19E2475DC(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_19E2475EC(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void sub_19E2475FC(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

uint64_t sub_19E24760C(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_19E24761C(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_19E24762C(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_19E24763C(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_19E24764C(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_19E24765C(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_19E24766C(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_19E24767C(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_19E24768C(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_19E24769C(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_19E2476AC(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_19E2476BC(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_19E2476CC(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_19E2476DC(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_19E2476EC(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

uint64_t sub_19E2476FC(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_19E24770C(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_19E24771C(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

uint64_t sub_19E24772C(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t IMSharedHelperPersistMergeID()
{
  if (qword_1ECFC6C30 != -1)
    dispatch_once(&qword_1ECFC6C30, &unk_1E3FB1668);
  return byte_1EE4FF8F8;
}

uint64_t IMSharedHelperAreObjectsLogicallySame(void *a1, void *a2)
{
  if (a1 == a2)
    return 1;
  if ((a1 || !a2) && (!a1 || a2))
    return objc_msgSend(a1, "isEqual:", a2);
  return 0;
}

uint64_t IMSharedHelperContactsBasedMergingEnabled()
{
  if (qword_1ECFC70B0 != -1)
    dispatch_once(&qword_1ECFC70B0, &unk_1E3FB9048);
  return byte_1EE5005A1;
}

uint64_t IMEnableTranscriptClickyOrb()
{
  return 1;
}

id IMCloudKitGetSyncStateDictionary()
{
  return IMCloudKitGetSyncStateDictionaryWithTestBlock(0);
}

uint64_t IMAllowMessagesIniCloud()
{
  return 1;
}

const __CFString *IMSharedHelperMessagesRootFolderPath()
{
  return CFSTR("/var/mobile/Library/SMS/");
}

const __CFString *IMStringFromIMCloudKitSyncJobState(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 4)
    return CFSTR("IMCloudKitSyncJobStateIdle");
  else
    return off_1E3FB51E8[a1 - 1];
}

uint64_t IMSharedHelperTurnOnUNUserNotificationsInIMDPersistence()
{
  return 1;
}

uint64_t IMSharedHelperPersonCentricMergingEnabled()
{
  return 1;
}

uint64_t IMEnableTranscriptChromelessNavBar()
{
  return 0;
}

uint64_t IMIsRunningIniMessageAppsViewService()
{
  if (qword_1EE503B68 != -1)
    dispatch_once(&qword_1EE503B68, &unk_1E3FB9100);
  return (byte_1EE5044D9 | byte_1EE5044DA) & 1;
}

uint64_t IMBalloonProviderBundleRootDirectory(int a1)
{
  const __CFString *v1;

  if (a1)
    v1 = (const __CFString *)objc_msgSend(CFSTR("/System/iOSSupport"), "stringByAppendingPathComponent:", CFSTR("/System/Library/Messages/iMessageBalloons"));
  else
    v1 = CFSTR("/System/Library/Messages/iMessageBalloons");
  return objc_msgSend((id)IMSystemRootDirectory(), "stringByAppendingPathComponent:", v1);
}

uint64_t IMBundleIdentifiersShowingMessagesTranscript()
{
  return objc_msgSend(MEMORY[0x1E0C99E60], "setWithArray:", &unk_1E3FFF200);
}

uint64_t IMCloudKitSetEligibleToToggleMiCSwitch(int a1)
{
  NSObject *v2;
  const __CFString *v3;
  int v5;
  const __CFString *v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  if (IMOSLoggingEnabled())
  {
    OSLogHandleForIMFoundationCategory();
    v2 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      v3 = CFSTR("NO");
      if (a1)
        v3 = CFSTR("YES");
      v5 = 138412290;
      v6 = v3;
      _os_log_impl(&dword_19E239000, v2, OS_LOG_TYPE_INFO, "Setting isEligibleToToggleMiCSwitch to toggle MiC switch to %@", (uint8_t *)&v5, 0xCu);
    }

  }
  IMSetDomainBoolForKey();
  return IMSetDomainBoolForKey();
}

uint64_t IMAppBundleRootDirectory()
{
  return objc_msgSend((id)IMSystemRootDirectory(), "stringByAppendingPathComponent:", CFSTR("/System/Library/Messages/iMessageApps/"));
}

void *IMGetUserLoginIntent()
{
  CFPropertyListRef v0;
  void *result;

  if (qword_1EE503CD0 != -1)
    dispatch_once(&qword_1EE503CD0, &unk_1E3FB3868);
  v0 = CFPreferencesCopyValue(CFSTR("UserLoginIntent"), CFSTR("com.apple.MobileSMS"), (CFStringRef)*MEMORY[0x1E0C9B260], (CFStringRef)*MEMORY[0x1E0C9B250]);
  result = (id)CFMakeCollectable(v0);
  if (result)
  {
    result = (void *)objc_msgSend(result, "integerValue");
    if ((unint64_t)result >= 3)
      return 0;
  }
  return result;
}

void IMSetEmbeddedTempDirectory()
{
  NSString *v0;
  NSObject *v1;
  NSObject *v2;
  NSString *v3;
  NSString *v4;
  NSObject *v5;
  const char *v6;
  int *v7;
  NSObject *v8;
  NSObject *v9;
  NSString *v10;
  int v11;
  NSString *v12;
  int v13;
  NSString *v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  setenv("TMPDIR", "/var/mobile/tmp/", 1);
  if ((_set_user_dir_suffix() & 1) != 0)
  {
    v0 = NSTemporaryDirectory();
    if (IMOSLoggingEnabled())
    {
      v1 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v1, OS_LOG_TYPE_INFO))
      {
        v13 = 138412290;
        v14 = v0;
        _os_log_impl(&dword_19E239000, v1, OS_LOG_TYPE_INFO, "NSTemporaryDirectory() set to %@", (uint8_t *)&v13, 0xCu);
      }
    }
    bzero(&v13, 0x400uLL);
    if (!_dirhelper())
    {
      if (IMOSLoggingEnabled())
      {
        v2 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
        {
          v3 = (NSString *)*__error();
          v11 = 134217984;
          v12 = v3;
          _os_log_impl(&dword_19E239000, v2, OS_LOG_TYPE_INFO, "Error getting temp directory path: (%lu)\n", (uint8_t *)&v11, 0xCu);
        }
      }
    }
    v4 = NSHomeDirectory();
    if (IMOSLoggingEnabled())
    {
      v5 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
      {
        v11 = 138412290;
        v12 = v4;
        v6 = "NSHomeDirectory() set to %@";
        v7 = &v11;
        v8 = v5;
LABEL_15:
        _os_log_impl(&dword_19E239000, v8, OS_LOG_TYPE_INFO, v6, (uint8_t *)v7, 0xCu);
      }
    }
  }
  else if (IMOSLoggingEnabled())
  {
    v9 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      v10 = (NSString *)*__error();
      v13 = 134217984;
      v14 = v10;
      v6 = "Could not setup dirhelper suffix: (%lu)\n";
      v7 = &v13;
      v8 = v9;
      goto LABEL_15;
    }
  }
}

uint64_t IMClientTelemetryLogHandle()
{
  if (qword_1ECFC6F10 != -1)
    dispatch_once(&qword_1ECFC6F10, &unk_1E3FB9C50);
  return qword_1ECFC6F18;
}

uint64_t IMPrewarmXPCInterfaces()
{
  return MEMORY[0x1E0DE7D20](MEMORY[0x1E0CB3B50], sel___im_prewarmMessagesInterfaces);
}

uint64_t sub_19E247DA8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_19E247DB8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_19E247DC8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_19E247DD8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_19E247DE8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_19E247DF8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_19E247E08(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_19E247E18(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_19E247E30(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = MEMORY[0x1A1AE8A0C](255, (char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

uint64_t sub_19E247E74(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = MEMORY[0x1A1AE8A00]((char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

Class sub_19E247EB4(uint64_t a1)
{
  Class result;
  uint64_t v3;

  sub_19E24B458();
  result = objc_getClass("STCommunicationClient");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    qword_1ECFC7088 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    v3 = sub_19E36ED34();
    return (Class)sub_19E247F08(v3);
  }
  return result;
}

Class sub_19E247F08(uint64_t a1)
{
  Class result;
  void *v3;

  if (!qword_1ECFC7068)
  {
    qword_1ECFC7068 = _sl_dlopen();
    if (!qword_1ECFC7068)
    {
      abort_report_np();
      goto LABEL_6;
    }
  }
  while (1)
  {
    result = objc_getClass("FAFetchFamilyCircleRequest");
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
    if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
      break;
LABEL_6:
    v3 = (void *)sub_19E36ED58();
    free(v3);
  }
  qword_1ECFC7080 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

void *sub_19E247FFC()
{
  void *result;

  result = (void *)MEMORY[0x1A1AE7D58]("ADClientSetValueForScalarKey", CFSTR("AggregateDictionary"));
  off_1ECFC70B8 = result;
  return result;
}

void sub_19E248028()
{
  id v0;
  void *v1;
  uint64_t v2;
  void *v3;
  id v4;

  v0 = objc_alloc(MEMORY[0x1E0CB3778]);
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObject:forKey:", &unk_1E3FFE4C8, *MEMORY[0x1E0D366B8]);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = (id)objc_msgSend(v0, "initWithString:attributes:", CFSTR(" "), v1);

  objc_msgSend(v4, "attributesAtIndex:effectiveRange:", 0, 0);
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = (void *)qword_1ECFC71A8;
  qword_1ECFC71A8 = v2;

}

uint64_t sub_19E2480C4()
{
  uint64_t result;

  qword_1ECFC7540 = MEMORY[0x1A1AE7D4C](CFSTR("CTXPCServiceSubscriptionInfo"), CFSTR("CoreTelephony"));
  qword_1ECFC7548 = MEMORY[0x1A1AE7D4C](CFSTR("CTXPCServiceSubscriptionContext"), CFSTR("CoreTelephony"));
  result = MEMORY[0x1A1AE7D4C](CFSTR("CTBundle"), CFSTR("CoreTelephony"));
  qword_1ECFC7538 = result;
  return result;
}

uint64_t sub_19E24812C()
{
  uint64_t result;

  result = MEMORY[0x1A1AE7D4C](CFSTR("CTMessageCenter"), CFSTR("CoreTelephony"));
  qword_1EE503DC0 = result;
  return result;
}

uint64_t sub_19E248158()
{
  uint64_t result;

  result = MEMORY[0x1A1AE7D4C](CFSTR("ILClassificationController"), CFSTR("IdentityLookup"));
  qword_1ECFC7030 = result;
  return result;
}

void sub_19E248184()
{
  _QWORD *v0;
  void *v1;
  void *v2;
  uint64_t v3;
  void *v4;
  void *v5;
  void (*v6)(void *);
  NSObject *v7;
  _QWORD *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  void *v12;
  void *v13;
  void (*v14)(void *);
  NSObject *v15;
  _QWORD *v16;
  void *v17;
  void *v18;
  uint64_t v19;
  void *v20;
  void *v21;
  void (*v22)(void *);
  NSObject *v23;
  _QWORD *v24;
  void *v25;
  void *v26;
  uint64_t v27;
  void *v28;
  void *v29;
  void (*v30)(void *);
  NSObject *v31;
  _QWORD *v32;
  void *v33;
  void *v34;
  uint64_t v35;
  void *v36;
  void *v37;
  void (*v38)(void *);
  NSObject *v39;
  _QWORD *v40;
  void *v41;
  void *v42;
  uint64_t v43;
  void *v44;
  void *v45;
  void (*v46)(void *);
  NSObject *v47;
  _QWORD *v48;
  void *v49;
  void *v50;
  uint64_t v51;
  void *v52;
  void *v53;
  void (*v54)(void *);
  NSObject *v55;
  _QWORD *v56;
  void *v57;
  void *v58;
  uint64_t v59;
  void *v60;
  void *v61;
  void (*v62)(void *);
  NSObject *v63;
  _QWORD *v64;
  void *v65;
  void *v66;
  uint64_t v67;
  void *v68;
  void *v69;
  void (*v70)(void *);
  NSObject *v71;
  _QWORD *v72;
  void *v73;
  void *v74;
  uint64_t v75;
  void *v76;
  void *v77;
  void (*v78)(void *);
  NSObject *v79;
  _QWORD *v80;
  void *v81;
  void *v82;
  uint64_t v83;
  void *v84;
  void *v85;
  void (*v86)(void *);
  NSObject *v87;
  _QWORD *v88;
  void *v89;
  void *v90;
  uint64_t v91;
  void *v92;
  void *v93;
  void (*v94)(void *);
  NSObject *v95;
  uint8_t buf[4];
  void *v97;
  uint64_t v98;

  v98 = *MEMORY[0x1E0C80C00];
  if (!qword_1ECFC7410)
  {
    v0 = (_QWORD *)MEMORY[0x1A1AE7D58]("CNContactIdentifierKey", CFSTR("Contacts"));
    v1 = v0 ? (void *)*v0 : 0;
    objc_storeStrong((id *)&qword_1ECFC7410, v1);
    if (!qword_1ECFC7410)
    {
      v2 = (void *)MEMORY[0x1E0CB3940];
      v3 = IMFileLocationTrimFileName();
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", &stru_1E3FBBA48);
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v2, "stringWithFormat:", CFSTR("Unexpected nil '%@' in %s at %s:%d. %@"), CFSTR("kIMCNContactIdentifierKey"), "void SetupContactKeysIfNeeded(void)_block_invoke", v3, 226, v4);
      v5 = (void *)objc_claimAutoreleasedReturnValue();

      v6 = (void (*)(void *))IMGetAssertionFailureHandler();
      if (v6)
      {
        v6(v5);
      }
      else if (IMOSLoggingEnabled())
      {
        OSLogHandleForIMFoundationCategory();
        v7 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 138412290;
          v97 = v5;
          _os_log_impl(&dword_19E239000, v7, OS_LOG_TYPE_INFO, "ASSERTION FAILED: %@", buf, 0xCu);
        }

      }
    }
  }
  if (!qword_1ECFC7428)
  {
    v8 = (_QWORD *)MEMORY[0x1A1AE7D58]("CNContactLinkIdentifierKey", CFSTR("Contacts"));
    v9 = v8 ? (void *)*v8 : 0;
    objc_storeStrong((id *)&qword_1ECFC7428, v9);
    if (!qword_1ECFC7428)
    {
      v10 = (void *)MEMORY[0x1E0CB3940];
      v11 = IMFileLocationTrimFileName();
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", &stru_1E3FBBA48);
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v10, "stringWithFormat:", CFSTR("Unexpected nil '%@' in %s at %s:%d. %@"), CFSTR("kIMCNContactLinkIdentifierKey"), "void SetupContactKeysIfNeeded(void)_block_invoke", v11, 229, v12);
      v13 = (void *)objc_claimAutoreleasedReturnValue();

      v14 = (void (*)(void *))IMGetAssertionFailureHandler();
      if (v14)
      {
        v14(v13);
      }
      else if (IMOSLoggingEnabled())
      {
        OSLogHandleForIMFoundationCategory();
        v15 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 138412290;
          v97 = v13;
          _os_log_impl(&dword_19E239000, v15, OS_LOG_TYPE_INFO, "ASSERTION FAILED: %@", buf, 0xCu);
        }

      }
    }
  }
  if (!qword_1ECFC7430)
  {
    v16 = (_QWORD *)MEMORY[0x1A1AE7D58]("CNContactPhoneNumbersKey", CFSTR("Contacts"));
    v17 = v16 ? (void *)*v16 : 0;
    objc_storeStrong((id *)&qword_1ECFC7430, v17);
    if (!qword_1ECFC7430)
    {
      v18 = (void *)MEMORY[0x1E0CB3940];
      v19 = IMFileLocationTrimFileName();
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", &stru_1E3FBBA48);
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v18, "stringWithFormat:", CFSTR("Unexpected nil '%@' in %s at %s:%d. %@"), CFSTR("kIMCNContactPhoneNumbersKey"), "void SetupContactKeysIfNeeded(void)_block_invoke", v19, 232, v20);
      v21 = (void *)objc_claimAutoreleasedReturnValue();

      v22 = (void (*)(void *))IMGetAssertionFailureHandler();
      if (v22)
      {
        v22(v21);
      }
      else if (IMOSLoggingEnabled())
      {
        OSLogHandleForIMFoundationCategory();
        v23 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 138412290;
          v97 = v21;
          _os_log_impl(&dword_19E239000, v23, OS_LOG_TYPE_INFO, "ASSERTION FAILED: %@", buf, 0xCu);
        }

      }
    }
  }
  if (!qword_1ECFC7408)
  {
    v24 = (_QWORD *)MEMORY[0x1A1AE7D58]("CNContactEmailAddressesKey", CFSTR("Contacts"));
    v25 = v24 ? (void *)*v24 : 0;
    objc_storeStrong((id *)&qword_1ECFC7408, v25);
    if (!qword_1ECFC7408)
    {
      v26 = (void *)MEMORY[0x1E0CB3940];
      v27 = IMFileLocationTrimFileName();
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", &stru_1E3FBBA48);
      v28 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v26, "stringWithFormat:", CFSTR("Unexpected nil '%@' in %s at %s:%d. %@"), CFSTR("kIMCNContactEmailAddressesKey"), "void SetupContactKeysIfNeeded(void)_block_invoke", v27, 235, v28);
      v29 = (void *)objc_claimAutoreleasedReturnValue();

      v30 = (void (*)(void *))IMGetAssertionFailureHandler();
      if (v30)
      {
        v30(v29);
      }
      else if (IMOSLoggingEnabled())
      {
        OSLogHandleForIMFoundationCategory();
        v31 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v31, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 138412290;
          v97 = v29;
          _os_log_impl(&dword_19E239000, v31, OS_LOG_TYPE_INFO, "ASSERTION FAILED: %@", buf, 0xCu);
        }

      }
    }
  }
  if (!qword_1ECFC7418)
  {
    v32 = (_QWORD *)MEMORY[0x1A1AE7D58]("CNContactImageDataAvailableKey", CFSTR("Contacts"));
    v33 = v32 ? (void *)*v32 : 0;
    objc_storeStrong((id *)&qword_1ECFC7418, v33);
    if (!qword_1ECFC7418)
    {
      v34 = (void *)MEMORY[0x1E0CB3940];
      v35 = IMFileLocationTrimFileName();
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", &stru_1E3FBBA48);
      v36 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v34, "stringWithFormat:", CFSTR("Unexpected nil '%@' in %s at %s:%d. %@"), CFSTR("kIMCNContactImageDataAvailableKey"), "void SetupContactKeysIfNeeded(void)_block_invoke", v35, 238, v36);
      v37 = (void *)objc_claimAutoreleasedReturnValue();

      v38 = (void (*)(void *))IMGetAssertionFailureHandler();
      if (v38)
      {
        v38(v37);
      }
      else if (IMOSLoggingEnabled())
      {
        OSLogHandleForIMFoundationCategory();
        v39 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v39, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 138412290;
          v97 = v37;
          _os_log_impl(&dword_19E239000, v39, OS_LOG_TYPE_INFO, "ASSERTION FAILED: %@", buf, 0xCu);
        }

      }
    }
  }
  if (!qword_1ECFC7420)
  {
    v40 = (_QWORD *)MEMORY[0x1A1AE7D58]("CNContactImageDataKey", CFSTR("Contacts"));
    v41 = v40 ? (void *)*v40 : 0;
    objc_storeStrong((id *)&qword_1ECFC7420, v41);
    if (!qword_1ECFC7420)
    {
      v42 = (void *)MEMORY[0x1E0CB3940];
      v43 = IMFileLocationTrimFileName();
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", &stru_1E3FBBA48);
      v44 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v42, "stringWithFormat:", CFSTR("Unexpected nil '%@' in %s at %s:%d. %@"), CFSTR("kIMCNContactImageDataKey"), "void SetupContactKeysIfNeeded(void)_block_invoke", v43, 241, v44);
      v45 = (void *)objc_claimAutoreleasedReturnValue();

      v46 = (void (*)(void *))IMGetAssertionFailureHandler();
      if (v46)
      {
        v46(v45);
      }
      else if (IMOSLoggingEnabled())
      {
        OSLogHandleForIMFoundationCategory();
        v47 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v47, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 138412290;
          v97 = v45;
          _os_log_impl(&dword_19E239000, v47, OS_LOG_TYPE_INFO, "ASSERTION FAILED: %@", buf, 0xCu);
        }

      }
    }
  }
  if (!qword_1ECFC7438)
  {
    v48 = (_QWORD *)MEMORY[0x1A1AE7D58]("CNContactThumbnailImageDataKey", CFSTR("Contacts"));
    v49 = v48 ? (void *)*v48 : 0;
    objc_storeStrong((id *)&qword_1ECFC7438, v49);
    if (!qword_1ECFC7438)
    {
      v50 = (void *)MEMORY[0x1E0CB3940];
      v51 = IMFileLocationTrimFileName();
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", &stru_1E3FBBA48);
      v52 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v50, "stringWithFormat:", CFSTR("Unexpected nil '%@' in %s at %s:%d. %@"), CFSTR("kIMCNContactThumbnailImageDataKey"), "void SetupContactKeysIfNeeded(void)_block_invoke", v51, 244, v52);
      v53 = (void *)objc_claimAutoreleasedReturnValue();

      v54 = (void (*)(void *))IMGetAssertionFailureHandler();
      if (v54)
      {
        v54(v53);
      }
      else if (IMOSLoggingEnabled())
      {
        OSLogHandleForIMFoundationCategory();
        v55 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v55, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 138412290;
          v97 = v53;
          _os_log_impl(&dword_19E239000, v55, OS_LOG_TYPE_INFO, "ASSERTION FAILED: %@", buf, 0xCu);
        }

      }
    }
  }
  if (!qword_1ECFC7400)
  {
    v56 = (_QWORD *)MEMORY[0x1A1AE7D58]("CNContactCropRectKey", CFSTR("Contacts"));
    v57 = v56 ? (void *)*v56 : 0;
    objc_storeStrong((id *)&qword_1ECFC7400, v57);
    if (!qword_1ECFC7400)
    {
      v58 = (void *)MEMORY[0x1E0CB3940];
      v59 = IMFileLocationTrimFileName();
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", &stru_1E3FBBA48);
      v60 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v58, "stringWithFormat:", CFSTR("Unexpected nil '%@' in %s at %s:%d. %@"), CFSTR("kIMCNContactCropRectKey"), "void SetupContactKeysIfNeeded(void)_block_invoke", v59, 247, v60);
      v61 = (void *)objc_claimAutoreleasedReturnValue();

      v62 = (void (*)(void *))IMGetAssertionFailureHandler();
      if (v62)
      {
        v62(v61);
      }
      else if (IMOSLoggingEnabled())
      {
        OSLogHandleForIMFoundationCategory();
        v63 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v63, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 138412290;
          v97 = v61;
          _os_log_impl(&dword_19E239000, v63, OS_LOG_TYPE_INFO, "ASSERTION FAILED: %@", buf, 0xCu);
        }

      }
    }
  }
  if (!qword_1ECFC7288)
  {
    v64 = (_QWORD *)MEMORY[0x1A1AE7D58]("CNContactWallpaperKey", CFSTR("Contacts"));
    v65 = v64 ? (void *)*v64 : 0;
    objc_storeStrong((id *)&qword_1ECFC7288, v65);
    if (!qword_1ECFC7288)
    {
      v66 = (void *)MEMORY[0x1E0CB3940];
      v67 = IMFileLocationTrimFileName();
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", &stru_1E3FBBA48);
      v68 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v66, "stringWithFormat:", CFSTR("Unexpected nil '%@' in %s at %s:%d. %@"), CFSTR("kIMCNContactWallpaperKey"), "void SetupContactKeysIfNeeded(void)_block_invoke", v67, 250, v68);
      v69 = (void *)objc_claimAutoreleasedReturnValue();

      v70 = (void (*)(void *))IMGetAssertionFailureHandler();
      if (v70)
      {
        v70(v69);
      }
      else if (IMOSLoggingEnabled())
      {
        OSLogHandleForIMFoundationCategory();
        v71 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v71, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 138412290;
          v97 = v69;
          _os_log_impl(&dword_19E239000, v71, OS_LOG_TYPE_INFO, "ASSERTION FAILED: %@", buf, 0xCu);
        }

      }
    }
  }
  if (!qword_1ECFC7290)
  {
    v72 = (_QWORD *)MEMORY[0x1A1AE7D58]("CNContactWatchWallpaperImageDataKey", CFSTR("Contacts"));
    v73 = v72 ? (void *)*v72 : 0;
    objc_storeStrong((id *)&qword_1ECFC7290, v73);
    if (!qword_1ECFC7290)
    {
      v74 = (void *)MEMORY[0x1E0CB3940];
      v75 = IMFileLocationTrimFileName();
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", &stru_1E3FBBA48);
      v76 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v74, "stringWithFormat:", CFSTR("Unexpected nil '%@' in %s at %s:%d. %@"), CFSTR("kIMCNContactWatchWallpaperImageDataKey"), "void SetupContactKeysIfNeeded(void)_block_invoke", v75, 253, v76);
      v77 = (void *)objc_claimAutoreleasedReturnValue();

      v78 = (void (*)(void *))IMGetAssertionFailureHandler();
      if (v78)
      {
        v78(v77);
      }
      else if (IMOSLoggingEnabled())
      {
        OSLogHandleForIMFoundationCategory();
        v79 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v79, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 138412290;
          v97 = v77;
          _os_log_impl(&dword_19E239000, v79, OS_LOG_TYPE_INFO, "ASSERTION FAILED: %@", buf, 0xCu);
        }

      }
    }
  }
  if (!qword_1ECFC7280)
  {
    v80 = (_QWORD *)MEMORY[0x1A1AE7D58]("CNContactImageBackgroundColorsDataKey", CFSTR("Contacts"));
    v81 = v80 ? (void *)*v80 : 0;
    objc_storeStrong((id *)&qword_1ECFC7280, v81);
    if (!qword_1ECFC7280)
    {
      v82 = (void *)MEMORY[0x1E0CB3940];
      v83 = IMFileLocationTrimFileName();
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", &stru_1E3FBBA48);
      v84 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v82, "stringWithFormat:", CFSTR("Unexpected nil '%@' in %s at %s:%d. %@"), CFSTR("kIMCNContactImageBackgroundColorsDataKey"), "void SetupContactKeysIfNeeded(void)_block_invoke", v83, 256, v84);
      v85 = (void *)objc_claimAutoreleasedReturnValue();

      v86 = (void (*)(void *))IMGetAssertionFailureHandler();
      if (v86)
      {
        v86(v85);
      }
      else if (IMOSLoggingEnabled())
      {
        OSLogHandleForIMFoundationCategory();
        v87 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v87, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 138412290;
          v97 = v85;
          _os_log_impl(&dword_19E239000, v87, OS_LOG_TYPE_INFO, "ASSERTION FAILED: %@", buf, 0xCu);
        }

      }
    }
  }
  if (!qword_1ECFC7278)
  {
    v88 = (_QWORD *)MEMORY[0x1A1AE7D58]("CNContactSensitiveContentConfigurationKey", CFSTR("Contacts"));
    v89 = v88 ? (void *)*v88 : 0;
    objc_storeStrong((id *)&qword_1ECFC7278, v89);
    if (!qword_1ECFC7278)
    {
      v90 = (void *)MEMORY[0x1E0CB3940];
      v91 = IMFileLocationTrimFileName();
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", &stru_1E3FBBA48);
      v92 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v90, "stringWithFormat:", CFSTR("Unexpected nil '%@' in %s at %s:%d. %@"), CFSTR("kIMCNContactSensitiveContentConfigurationKey"), "void SetupContactKeysIfNeeded(void)_block_invoke", v91, 259, v92);
      v93 = (void *)objc_claimAutoreleasedReturnValue();

      v94 = (void (*)(void *))IMGetAssertionFailureHandler();
      if (v94)
      {
        v94(v93);
      }
      else if (IMOSLoggingEnabled())
      {
        OSLogHandleForIMFoundationCategory();
        v95 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v95, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 138412290;
          v97 = v93;
          _os_log_impl(&dword_19E239000, v95, OS_LOG_TYPE_INFO, "ASSERTION FAILED: %@", buf, 0xCu);
        }

      }
    }
  }
}

void sub_19E24919C()
{
  void *v0;
  uint64_t v1;
  void *v2;
  void *v3;
  void (*v4)(void *);
  NSObject *v5;
  void *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void (*v10)(void *);
  NSObject *v11;
  void *v12;
  uint64_t v13;
  void *v14;
  void *v15;
  void (*v16)(void *);
  NSObject *v17;
  void *v18;
  uint64_t v19;
  void *v20;
  void *v21;
  void (*v22)(void *);
  NSObject *v23;
  void *v24;
  uint64_t v25;
  void *v26;
  void *v27;
  void (*v28)(void *);
  NSObject *v29;
  void *v30;
  uint64_t v31;
  void *v32;
  void *v33;
  void (*v34)(void *);
  NSObject *v35;
  void *v36;
  uint64_t v37;
  void *v38;
  void *v39;
  void (*v40)(void *);
  NSObject *v41;
  void *v42;
  uint64_t v43;
  void *v44;
  void *v45;
  void (*v46)(void *);
  NSObject *v47;
  uint8_t buf[4];
  void *v49;
  uint64_t v50;

  v50 = *MEMORY[0x1E0C80C00];
  qword_1ECFC7458 = MEMORY[0x1A1AE7D4C](CFSTR("CNContactFormatter"), CFSTR("Contacts"));
  if (!qword_1ECFC7458)
  {
    v0 = (void *)MEMORY[0x1E0CB3940];
    v1 = IMFileLocationTrimFileName();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", &stru_1E3FBBA48);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v0, "stringWithFormat:", CFSTR("Unexpected nil '%@' in %s at %s:%d. %@"), CFSTR("IMCNContactFormatterClass"), "void SetupContactClassesIfNeeded(void)_block_invoke", v1, 195, v2);
    v3 = (void *)objc_claimAutoreleasedReturnValue();

    v4 = (void (*)(void *))IMGetAssertionFailureHandler();
    if (v4)
    {
      v4(v3);
    }
    else if (IMOSLoggingEnabled())
    {
      OSLogHandleForIMFoundationCategory();
      v5 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412290;
        v49 = v3;
        _os_log_impl(&dword_19E239000, v5, OS_LOG_TYPE_INFO, "ASSERTION FAILED: %@", buf, 0xCu);
      }

    }
  }
  qword_1ECFC7450 = MEMORY[0x1A1AE7D4C](CFSTR("CNContactFetchRequest"), CFSTR("Contacts"));
  if (!qword_1ECFC7450)
  {
    v6 = (void *)MEMORY[0x1E0CB3940];
    v7 = IMFileLocationTrimFileName();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", &stru_1E3FBBA48);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "stringWithFormat:", CFSTR("Unexpected nil '%@' in %s at %s:%d. %@"), CFSTR("IMCNContactFetchRequestClass"), "void SetupContactClassesIfNeeded(void)_block_invoke", v7, 198, v8);
    v9 = (void *)objc_claimAutoreleasedReturnValue();

    v10 = (void (*)(void *))IMGetAssertionFailureHandler();
    if (v10)
    {
      v10(v9);
    }
    else if (IMOSLoggingEnabled())
    {
      OSLogHandleForIMFoundationCategory();
      v11 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412290;
        v49 = v9;
        _os_log_impl(&dword_19E239000, v11, OS_LOG_TYPE_INFO, "ASSERTION FAILED: %@", buf, 0xCu);
      }

    }
  }
  qword_1ECFC7478 = MEMORY[0x1A1AE7D4C](CFSTR("CNMutableContact"), CFSTR("Contacts"));
  if (!qword_1ECFC7478)
  {
    v12 = (void *)MEMORY[0x1E0CB3940];
    v13 = IMFileLocationTrimFileName();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", &stru_1E3FBBA48);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "stringWithFormat:", CFSTR("Unexpected nil '%@' in %s at %s:%d. %@"), CFSTR("IMCNMutableContactClass"), "void SetupContactClassesIfNeeded(void)_block_invoke", v13, 201, v14);
    v15 = (void *)objc_claimAutoreleasedReturnValue();

    v16 = (void (*)(void *))IMGetAssertionFailureHandler();
    if (v16)
    {
      v16(v15);
    }
    else if (IMOSLoggingEnabled())
    {
      OSLogHandleForIMFoundationCategory();
      v17 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412290;
        v49 = v15;
        _os_log_impl(&dword_19E239000, v17, OS_LOG_TYPE_INFO, "ASSERTION FAILED: %@", buf, 0xCu);
      }

    }
  }
  qword_1ECFC7468 = MEMORY[0x1A1AE7D4C](CFSTR("CNLabeledValue"), CFSTR("Contacts"));
  if (!qword_1ECFC7468)
  {
    v18 = (void *)MEMORY[0x1E0CB3940];
    v19 = IMFileLocationTrimFileName();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", &stru_1E3FBBA48);
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v18, "stringWithFormat:", CFSTR("Unexpected nil '%@' in %s at %s:%d. %@"), CFSTR("IMCNLabeledValueClass"), "void SetupContactClassesIfNeeded(void)_block_invoke", v19, 204, v20);
    v21 = (void *)objc_claimAutoreleasedReturnValue();

    v22 = (void (*)(void *))IMGetAssertionFailureHandler();
    if (v22)
    {
      v22(v21);
    }
    else if (IMOSLoggingEnabled())
    {
      OSLogHandleForIMFoundationCategory();
      v23 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412290;
        v49 = v21;
        _os_log_impl(&dword_19E239000, v23, OS_LOG_TYPE_INFO, "ASSERTION FAILED: %@", buf, 0xCu);
      }

    }
  }
  qword_1ECFC7480 = MEMORY[0x1A1AE7D4C](CFSTR("CNPhoneNumber"), CFSTR("Contacts"));
  if (!qword_1ECFC7480)
  {
    v24 = (void *)MEMORY[0x1E0CB3940];
    v25 = IMFileLocationTrimFileName();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", &stru_1E3FBBA48);
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v24, "stringWithFormat:", CFSTR("Unexpected nil '%@' in %s at %s:%d. %@"), CFSTR("IMCNPhoneNumberClass"), "void SetupContactClassesIfNeeded(void)_block_invoke", v25, 207, v26);
    v27 = (void *)objc_claimAutoreleasedReturnValue();

    v28 = (void (*)(void *))IMGetAssertionFailureHandler();
    if (v28)
    {
      v28(v27);
    }
    else if (IMOSLoggingEnabled())
    {
      OSLogHandleForIMFoundationCategory();
      v29 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v29, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412290;
        v49 = v27;
        _os_log_impl(&dword_19E239000, v29, OS_LOG_TYPE_INFO, "ASSERTION FAILED: %@", buf, 0xCu);
      }

    }
  }
  qword_1ECFC7448 = MEMORY[0x1A1AE7D4C](CFSTR("CNChangeHistoryFetchRequest"), CFSTR("Contacts"));
  if (!qword_1ECFC7448)
  {
    v30 = (void *)MEMORY[0x1E0CB3940];
    v31 = IMFileLocationTrimFileName();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", &stru_1E3FBBA48);
    v32 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v30, "stringWithFormat:", CFSTR("Unexpected nil '%@' in %s at %s:%d. %@"), CFSTR("IMCNChangeHistoryFetchRequestClass"), "void SetupContactClassesIfNeeded(void)_block_invoke", v31, 210, v32);
    v33 = (void *)objc_claimAutoreleasedReturnValue();

    v34 = (void (*)(void *))IMGetAssertionFailureHandler();
    if (v34)
    {
      v34(v33);
    }
    else if (IMOSLoggingEnabled())
    {
      OSLogHandleForIMFoundationCategory();
      v35 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v35, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412290;
        v49 = v33;
        _os_log_impl(&dword_19E239000, v35, OS_LOG_TYPE_INFO, "ASSERTION FAILED: %@", buf, 0xCu);
      }

    }
  }
  qword_1ECFC7470 = MEMORY[0x1A1AE7D4C](CFSTR("CNMeCardSharingPickerViewController"), CFSTR("ContactsUI"));
  if (!qword_1ECFC7470)
  {
    v36 = (void *)MEMORY[0x1E0CB3940];
    v37 = IMFileLocationTrimFileName();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", &stru_1E3FBBA48);
    v38 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v36, "stringWithFormat:", CFSTR("Unexpected nil '%@' in %s at %s:%d. %@"), CFSTR("IMCNMeCardSharingPickerViewControllerClass"), "void SetupContactClassesIfNeeded(void)_block_invoke", v37, 213, v38);
    v39 = (void *)objc_claimAutoreleasedReturnValue();

    v40 = (void (*)(void *))IMGetAssertionFailureHandler();
    if (v40)
    {
      v40(v39);
    }
    else if (IMOSLoggingEnabled())
    {
      OSLogHandleForIMFoundationCategory();
      v41 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v41, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412290;
        v49 = v39;
        _os_log_impl(&dword_19E239000, v41, OS_LOG_TYPE_INFO, "ASSERTION FAILED: %@", buf, 0xCu);
      }

    }
  }
  qword_1ECFC7460 = MEMORY[0x1A1AE7D4C](CFSTR("CNGeminiManager"), CFSTR("Contacts"));
  if (!qword_1ECFC7460)
  {
    v42 = (void *)MEMORY[0x1E0CB3940];
    v43 = IMFileLocationTrimFileName();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", &stru_1E3FBBA48);
    v44 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v42, "stringWithFormat:", CFSTR("Unexpected nil '%@' in %s at %s:%d. %@"), CFSTR("IMCNGeminiManagerClass"), "void SetupContactClassesIfNeeded(void)_block_invoke", v43, 217, v44);
    v45 = (void *)objc_claimAutoreleasedReturnValue();

    v46 = (void (*)(void *))IMGetAssertionFailureHandler();
    if (v46)
    {
      v46(v45);
    }
    else if (IMOSLoggingEnabled())
    {
      OSLogHandleForIMFoundationCategory();
      v47 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v47, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412290;
        v49 = v45;
        _os_log_impl(&dword_19E239000, v47, OS_LOG_TYPE_INFO, "ASSERTION FAILED: %@", buf, 0xCu);
      }

    }
  }
}

uint64_t sub_19E249B74()
{
  void *v0;
  uint64_t result;
  void *v2;
  void *v3;

  v0 = (void *)objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB34D0], "mainBundle"), "bundleIdentifier");
  result = objc_msgSend(v0, "isEqualToString:", CFSTR("com.apple.iMessageAppsViewService"));
  if ((_DWORD)result)
  {
    byte_1EE5044D9 = 1;
  }
  else
  {
    v2 = (void *)objc_msgSend(MEMORY[0x1E0CA58F0], "pluginKitProxyForIdentifier:", v0);
    result = objc_msgSend((id)objc_msgSend(v2, "protocol"), "isEqualToString:", CFSTR("com.apple.imessage-apps-host"));
    if ((_DWORD)result)
    {
      byte_1EE5044DA = 1;
    }
    else
    {
      v3 = (void *)objc_msgSend(v2, "protocol");
      if ((objc_msgSend(v3, "isEqualToString:", CFSTR("com.apple.message-payload-provider")) & 1) != 0)
        result = 1;
      else
        result = objc_msgSend(v3, "isEqualToString:", CFSTR("com.apple.message-payload-provider.highmemory"));
      byte_1EE5044D8 = result;
    }
  }
  return result;
}

uint64_t sub_19E249C44()
{
  uint64_t result;

  result = objc_msgSend(MEMORY[0x1E0CB34D0], "bundleWithIdentifier:", CFSTR("com.apple.imsharedutilities"));
  qword_1EE503B48 = result;
  return result;
}

CFMutableDictionaryRef sub_19E249C70()
{
  CFMutableDictionaryRef result;

  pthread_mutex_init(&stru_1ECFC73A8, 0);
  result = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, 0, 0);
  qword_1ECFC73F0 = (uint64_t)result;
  return result;
}

void sub_19E249CB4()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  char v4;
  NSObject *v5;
  const __CFString *v6;
  void *v7;
  int v8;
  const __CFString *v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v0 = (void *)objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB3898], "processInfo"), "environment");
  v1 = objc_msgSend((id)objc_msgSend(v0, "objectForKeyedSubscript:", CFSTR("XCTestBundlePath")), "length");
  byte_1ECFC7390 = v1 != 0;
  if (!v1)
  {
    v2 = objc_msgSend((id)objc_msgSend(v0, "objectForKeyedSubscript:", CFSTR("XCTestConfigurationFilePath")), "length");
    byte_1ECFC7390 = v2 != 0;
    if (!v2)
    {
      v3 = (void *)objc_msgSend(v0, "objectForKeyedSubscript:", CFSTR("IDEiPhoneInternalTestBundleName"));
      if ((objc_msgSend(v3, "containsString:", CFSTR("xctest")) & 1) != 0)
        goto LABEL_4;
      byte_1ECFC7390 = objc_msgSend(v3, "containsString:", CFSTR("xcrun"));
      if ((byte_1ECFC7390 & 1) != 0)
        goto LABEL_7;
      v7 = (void *)objc_msgSend(v0, "objectForKeyedSubscript:", CFSTR("_"));
      if ((objc_msgSend(v7, "containsString:", CFSTR("xctest")) & 1) != 0)
      {
LABEL_4:
        v4 = 1;
      }
      else
      {
        byte_1ECFC7390 = objc_msgSend(v7, "containsString:", CFSTR("xcrun"));
        if ((byte_1ECFC7390 & 1) != 0)
          goto LABEL_7;
        v4 = objc_msgSend((id)objc_msgSend(v0, "objectForKeyedSubscript:", CFSTR("IMIsRunningInUnitTesting")), "isEqualToString:", CFSTR("YES"));
      }
      byte_1ECFC7390 = v4;
    }
  }
LABEL_7:
  if (IMOSLoggingEnabled())
  {
    v5 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      if (byte_1ECFC7390)
        v6 = CFSTR("YES");
      else
        v6 = CFSTR("NO");
      v8 = 138412290;
      v9 = v6;
      _os_log_impl(&dword_19E239000, v5, OS_LOG_TYPE_INFO, "IMIsRunningInUnitTesting %@", (uint8_t *)&v8, 0xCu);
    }
  }
}

CFStringRef sub_19E249EB8()
{
  __CFBundle *MainBundle;
  CFStringRef result;
  BOOL v2;

  MainBundle = CFBundleGetMainBundle();
  result = CFBundleGetIdentifier(MainBundle);
  if (result)
  {
    result = (CFStringRef)CFEqual(result, CFSTR("com.apple.mobilesafari"));
    v2 = (_DWORD)result != 0;
  }
  else
  {
    v2 = 0;
  }
  byte_1EE503D68 = v2;
  return result;
}

CFStringRef sub_19E249EF8()
{
  __CFBundle *MainBundle;
  CFStringRef result;
  BOOL v2;

  MainBundle = CFBundleGetMainBundle();
  result = CFBundleGetIdentifier(MainBundle);
  if (result)
  {
    result = (CFStringRef)CFEqual(result, CFSTR("com.apple.Safari.SandboxBroker"));
    v2 = (_DWORD)result != 0;
  }
  else
  {
    v2 = 0;
  }
  byte_1EE503DC8 = v2;
  return result;
}

CFStringRef sub_19E249F38()
{
  __CFBundle *MainBundle;
  CFStringRef result;
  BOOL v2;

  MainBundle = CFBundleGetMainBundle();
  result = CFBundleGetIdentifier(MainBundle);
  if (result)
  {
    result = (CFStringRef)CFEqual(result, CFSTR("com.apple.SOSBuddy"));
    v2 = (_DWORD)result != 0;
  }
  else
  {
    v2 = 0;
  }
  byte_1EE503DD8 = v2;
  return result;
}

uint64_t sub_19E249F78()
{
  uint64_t result;

  result = objc_msgSend((id)objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB34D0], "mainBundle"), "bundleIdentifier"), "isEqualToString:", CFSTR("com.apple.MobileSMS"));
  byte_1ECFC7250 = result;
  return result;
}

CFStringRef sub_19E249FAC()
{
  __CFBundle *MainBundle;
  CFStringRef result;
  BOOL v2;

  MainBundle = CFBundleGetMainBundle();
  result = CFBundleGetIdentifier(MainBundle);
  if (result)
  {
    result = (CFStringRef)CFEqual(result, CFSTR("com.apple.MobileSMS"));
    v2 = (_DWORD)result != 0;
  }
  else
  {
    v2 = 0;
  }
  byte_1ECFC7040 = v2;
  return result;
}

uint64_t sub_19E249FEC()
{
  uint64_t result;

  result = objc_msgSend((id)objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB34D0], "mainBundle"), "bundleIdentifier"), "isEqualToString:", CFSTR("com.apple.imdpersistence.IMDPersistenceAgent"));
  byte_1EE503D70 = result;
  return result;
}

CFStringRef sub_19E24A020()
{
  __CFBundle *MainBundle;
  CFStringRef result;
  BOOL v2;

  MainBundle = CFBundleGetMainBundle();
  result = CFBundleGetIdentifier(MainBundle);
  if (result)
  {
    result = (CFStringRef)CFEqual(result, CFSTR("com.apple.facetime"));
    v2 = (_DWORD)result != 0;
  }
  else
  {
    v2 = 0;
  }
  byte_1EE503DA8 = v2;
  return result;
}

uint64_t sub_19E24A060(uint64_t a1, void *a2)
{
  void *v4;
  uint64_t v5;
  _QWORD v7[7];

  v4 = (void *)objc_msgSend(a2, "UTITypes");
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = sub_19E23DDD0;
  v7[3] = &unk_1E3FB5878;
  v5 = *(_QWORD *)(a1 + 40);
  v7[4] = *(_QWORD *)(a1 + 32);
  v7[5] = a2;
  v7[6] = v5;
  return objc_msgSend(v4, "enumerateObjectsUsingBlock:", v7);
}

void sub_19E24A0D0(uint64_t a1)
{
  id v2;
  void *v3;
  id v4;
  _QWORD v5[6];

  v2 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  v4 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  v3 = *(void **)(a1 + 32);
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 3221225472;
  v5[2] = sub_19E24A060;
  v5[3] = &unk_1E3FB58A0;
  v5[4] = v2;
  v5[5] = v4;
  objc_msgSend(v3, "enumerateObjectsUsingBlock:", v5);
  qword_1ECFC7218 = objc_msgSend(v2, "copy");
  qword_1ECFC7220 = objc_msgSend(v4, "copy");

}

os_log_t sub_19E24A180()
{
  os_log_t result;

  result = os_log_create("com.apple.Messages.telemetry", "MobileSMS");
  qword_1ECFC6F18 = (uint64_t)result;
  return result;
}

void sub_19E24A1AC()
{
  NSObject *v0;
  const __CFString *v1;
  int v2;
  const __CFString *v3;
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  byte_1ECFC7258 = IMGetDomainBoolForKeyWithDefaultValue();
  if (IMOSLoggingEnabled())
  {
    v0 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v0, OS_LOG_TYPE_INFO))
    {
      if (byte_1ECFC7258)
        v1 = CFSTR("YES");
      else
        v1 = CFSTR("NO");
      v2 = 138412290;
      v3 = v1;
      _os_log_impl(&dword_19E239000, v0, OS_LOG_TYPE_INFO, "Additional Contacts logging is enabled %@", (uint8_t *)&v2, 0xCu);
    }
  }
}

void sub_19E24A2C4()
{
  NSObject *v0;
  const __CFString *v1;
  int v2;
  const __CFString *v3;
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  byte_1EE503B70 = IMGetDomainBoolForKeyWithDefaultValue();
  if (IMOSLoggingEnabled())
  {
    v0 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v0, OS_LOG_TYPE_INFO))
    {
      if (byte_1EE503B70)
        v1 = CFSTR("YES");
      else
        v1 = CFSTR("NO");
      v2 = 138412290;
      v3 = v1;
      _os_log_impl(&dword_19E239000, v0, OS_LOG_TYPE_INFO, "Additional Chat Registry logging is enabled %@", (uint8_t *)&v2, 0xCu);
    }
  }
}

uint64_t sub_19E24A3DC(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  NSObject *v4;
  int v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  objc_msgSend(MEMORY[0x1E0C99EA0], "messagesAppDomain");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "conversationListFocusFilterActionEnabled");

  if (IMOSLoggingEnabled())
  {
    OSLogHandleForIMFoundationCategory();
    v4 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      v6 = 134217984;
      v7 = v3;
      _os_log_impl(&dword_19E239000, v4, OS_LOG_TYPE_INFO, "Received updated value for conversationListFocusFilterActionEnabled: %ld", (uint8_t *)&v6, 0xCu);
    }

  }
  return objc_msgSend(*(id *)(a1 + 32), "setFocusFilterActionIsEnabled:", v3);
}

uint64_t sub_19E24A4DC(uint64_t result)
{
  ++*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24);
  return result;
}

uint64_t sub_19E24A4F4(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "isSimHidden") ^ 1;
}

void sub_19E24A510(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id WeakRetained;
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  id v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (v6)
  {
    IMLogHandleForCategory("IMFocusStateManager");
    v8 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      sub_19E36CB20((uint64_t)v6, v8, v9, v10, v11, v12, v13, v14);
LABEL_4:

    goto LABEL_5;
  }
  if (!v5)
  {
    IMLogHandleForCategory("IMFocusStateManager");
    v8 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      sub_19E36CAEC(v8, v16, v17, v18, v19, v20, v21, v22);
    goto LABEL_4;
  }
  if (IMOSLoggingEnabled())
  {
    OSLogHandleForIMFoundationCategory();
    v15 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
    {
      v23 = 138412290;
      v24 = v5;
      _os_log_impl(&dword_19E239000, v15, OS_LOG_TYPE_INFO, "DND state is: %@", (uint8_t *)&v23, 0xCu);
    }

  }
LABEL_5:
  objc_msgSend(WeakRetained, "setDndState:", v5);
  objc_msgSend(WeakRetained, "_notifyDelegatesOfDNDStateChange");

}

void sub_19E24A68C(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  void *v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t i;
  void *v13;
  void *v14;
  _BOOL8 v15;
  NSObject *v16;
  void *v17;
  uint64_t v18;
  NSObject *v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint8_t buf[4];
  uint64_t v26;
  _BYTE v27[128];
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  if (v5)
  {
    objc_msgSend(*(id *)(a1 + 32), "parents");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "removeAllObjects");

    v23 = 0u;
    v24 = 0u;
    v21 = 0u;
    v22 = 0u;
    objc_msgSend(v5, "members", 0);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = 0;
    v10 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v21, v27, 16);
    if (v10)
    {
      v11 = *(_QWORD *)v22;
      do
      {
        for (i = 0; i != v10; ++i)
        {
          if (*(_QWORD *)v22 != v11)
            objc_enumerationMutation(v8);
          v13 = *(void **)(*((_QWORD *)&v21 + 1) + 8 * i);
          if (objc_msgSend(v13, "isMe"))
          {
            v9 = objc_msgSend(v13, "memberType") != -1;
            objc_msgSend(*(id *)(a1 + 32), "setProtectedChildAge:", objc_msgSend(v13, "age"));
          }
          else if (objc_msgSend(v13, "isParent"))
          {
            objc_msgSend(*(id *)(a1 + 32), "parents");
            v14 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v14, "addObject:", v13);

          }
        }
        v10 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v21, v27, 16);
      }
      while (v10);
    }

    v15 = v9;
    if (IMOSLoggingEnabled())
    {
      OSLogHandleForIMFoundationCategory();
      v16 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
      {
        objc_msgSend(*(id *)(a1 + 32), "parents");
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        v18 = objc_msgSend(v17, "count");
        *(_DWORD *)buf = 134217984;
        v26 = v18;
        _os_log_impl(&dword_19E239000, v16, OS_LOG_TYPE_INFO, "Finished updating, found total parents: %lu", buf, 0xCu);

      }
    }
  }
  else
  {
    if (IMOSLoggingEnabled())
    {
      OSLogHandleForIMFoundationCategory();
      v19 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412290;
        v26 = (uint64_t)v6;
        _os_log_impl(&dword_19E239000, v19, OS_LOG_TYPE_INFO, "IMCommSafetySettingsManager: Error fetching FamilyCircle: %@", buf, 0xCu);
      }

    }
    v15 = 0;
  }
  v20 = *(_QWORD *)(a1 + 40);
  if (v20)
    (*(void (**)(uint64_t, _BOOL8, id))(v20 + 16))(v20, v15, v6);

}

void sub_19E24A94C()
{
  void *v0;
  void *v1;
  int v2;
  uint64_t v3;
  void *v4;

  objc_msgSend(MEMORY[0x1E0CB34D0], "mainBundle");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "bundleIdentifier");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = objc_msgSend(v1, "isEqualToString:", CFSTR("com.apple.MobileSMS"));

  if (v2)
  {
    objc_msgSend(MEMORY[0x1E0C99EA0], "standardUserDefaults");
    v3 = objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v3 = objc_msgSend(objc_alloc(MEMORY[0x1E0C99EA0]), "initWithSuiteName:", CFSTR("com.apple.MobileSMS"));
  }
  v4 = (void *)qword_1ECFC7110;
  qword_1ECFC7110 = v3;

}

uint64_t sub_19E24A9D8()
{
  uint64_t result;

  if ((_os_feature_enabled_impl() & 1) != 0)
    result = 1;
  else
    result = IMGetCachedDomainBoolForKeyWithDefaultValue();
  byte_1EE5038A0 = result;
  return result;
}

uint64_t sub_19E24AA28(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 32), "invokeWithTarget:", a2);
}

uint64_t sub_19E24AA34()
{
  uint64_t result;

  if ((_os_feature_enabled_impl() & 1) != 0)
    result = 1;
  else
    result = IMGetCachedDomainBoolForKeyWithDefaultValue();
  byte_1ECFC6CC0 = result;
  return result;
}

void sub_19E24AA84(uint64_t a1)
{
  void *v2;
  void *v3;
  NSObject *v4;
  int v5;
  _DWORD v6[2];
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 12) = objc_msgSend(*(id *)(a1 + 40), "isCommunicationSafetyAnalyticsEnabled");
  +[IMDefaults sharedInstance](IMDefaults, "sharedInstance");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", *(unsigned __int8 *)(*(_QWORD *)(a1 + 32) + 12));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "setValue:forDomain:forKey:", v3, CFSTR("com.apple.messages.commsafety"), CFSTR("CheckSensitivePhotosAnalytics"));

  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 16) = objc_msgSend(*(id *)(a1 + 32), "_fetchEnablementGroup");
  if (IMOSLoggingEnabled())
  {
    OSLogHandleForIMFoundationCategory();
    v4 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      v5 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 32) + 12);
      v6[0] = 67109120;
      v6[1] = v5;
      _os_log_impl(&dword_19E239000, v4, OS_LOG_TYPE_INFO, "Check sensitive photo analytics: %d", (uint8_t *)v6, 8u);
    }

  }
  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 13) = *(_BYTE *)(a1 + 48);
  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 15) = 1;
}

uint64_t sub_19E24ABF4()
{
  uint64_t result;

  result = MEMORY[0x1A1AE7D4C](CFSTR("WLKURLBagUtilities"), CFSTR("WatchListKit"));
  qword_1ECFC6CA0 = result;
  return result;
}

uint64_t sub_19E24AC20()
{
  uint64_t result;

  if ((_os_feature_enabled_impl() & 1) != 0)
    result = 1;
  else
    result = IMGetCachedDomainBoolForKeyWithDefaultValue();
  byte_1ECFC7350 = result;
  return result;
}

uint64_t sub_19E24AC70()
{
  uint64_t result;

  result = IMGetCachedDomainBoolForKey();
  byte_1EE503820 = result;
  return result;
}

void sub_19E24AC9C()
{
  IMCommSafetySettingsManager *v0;
  void *v1;

  v0 = objc_alloc_init(IMCommSafetySettingsManager);
  v1 = (void *)qword_1ECFC7168;
  qword_1ECFC7168 = (uint64_t)v0;

}

uint64_t sub_19E24ACC4()
{
  CFPropertyListRef v0;
  uint64_t result;

  v0 = CFPreferencesCopyAppValue(CFSTR("StoreDemoMode"), CFSTR("com.apple.demo-settings"));
  result = objc_msgSend((id)(id)CFMakeCollectable(v0), "BOOLValue");
  byte_1EE503DD0 = result;
  return result;
}

uint64_t sub_19E24ACFC(uint64_t a1)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(a1 + 32), sel__trackEvent_withCount_);
}

uint64_t sub_19E24AD0C()
{
  uint64_t result;

  if ((_os_feature_enabled_impl() & 1) != 0)
    result = 1;
  else
    result = IMGetCachedDomainBoolForKeyWithDefaultValue();
  byte_1ECFC6CE8 = result;
  return result;
}

uint64_t sub_19E24AD5C()
{
  uint64_t result;

  if ((_os_feature_enabled_impl() & 1) != 0)
    result = 1;
  else
    result = IMGetCachedDomainBoolForKeyWithDefaultValue();
  byte_1ECFC74A0 = result;
  return result;
}

void sub_19E24ADAC()
{
  IMCTSubscriptionUtilities *v0;
  void *v1;

  v0 = objc_alloc_init(IMCTSubscriptionUtilities);
  v1 = (void *)qword_1ECFC7588;
  qword_1ECFC7588 = (uint64_t)v0;

}

uint64_t sub_19E24ADD4()
{
  uint64_t result;

  if ((_os_feature_enabled_impl() & 1) != 0)
    result = 1;
  else
    result = IMGetCachedDomainBoolForKeyWithDefaultValue();
  byte_1ECFC6E40 = result;
  return result;
}

void sub_19E24AE24()
{
  IMDualSIMUtilitiesManager *v0;
  void *v1;

  v0 = objc_alloc_init(IMDualSIMUtilitiesManager);
  v1 = (void *)qword_1ECFC6D10;
  qword_1ECFC6D10 = (uint64_t)v0;

}

uint64_t sub_19E24AE4C()
{
  uint64_t result;

  if ((_os_feature_enabled_impl() & 1) != 0)
    result = 1;
  else
    result = IMGetCachedDomainBoolForKeyWithDefaultValue();
  byte_1ECFC6E98 = result;
  return result;
}

uint64_t sub_19E24AE9C()
{
  uint64_t result;

  if ((_os_feature_enabled_impl() & 1) != 0)
    result = 1;
  else
    result = IMGetCachedDomainBoolForKeyWithDefaultValue();
  byte_1ECFC7170 = result;
  return result;
}

void sub_19E24AEEC()
{
  IMSharedWithYouManager *v0;
  void *v1;

  v0 = objc_alloc_init(IMSharedWithYouManager);
  v1 = (void *)qword_1ECFC7160;
  qword_1ECFC7160 = (uint64_t)v0;

}

uint64_t sub_19E24AF14()
{
  uint64_t result;

  result = IMGetCachedDomainBoolForKey();
  byte_1EE5040C8 = result;
  return result;
}

void sub_19E24AF40()
{
  dispatch_queue_t v0;
  void *v1;
  NSObject *v2;

  dispatch_queue_attr_make_with_qos_class(0, QOS_CLASS_USER_INITIATED, 0);
  v2 = objc_claimAutoreleasedReturnValue();
  v0 = dispatch_queue_create("IMContactStoreQueue", v2);
  v1 = (void *)qword_1ECFC6E70;
  qword_1ECFC6E70 = (uint64_t)v0;

}

uint64_t sub_19E24AF94()
{
  uint64_t result;

  if ((_os_feature_enabled_impl() & 1) != 0)
    result = 1;
  else
    result = IMGetCachedDomainBoolForKeyWithDefaultValue();
  byte_1EE503BA0 = result;
  return result;
}

IMMetricsCollector *sub_19E24AFE4()
{
  IMMetricsCollector *result;

  result = objc_alloc_init(IMMetricsCollector);
  qword_1ECFC75F0 = (uint64_t)result;
  return result;
}

void sub_19E24B008()
{
  IMFocusStateManager *v0;
  void *v1;

  v0 = objc_alloc_init(IMFocusStateManager);
  v1 = (void *)qword_1ECFC6F68;
  qword_1ECFC6F68 = (uint64_t)v0;

}

void sub_19E24B030()
{
  IMFeatureFlags *v0;
  void *v1;

  v0 = objc_alloc_init(IMFeatureFlags);
  v1 = (void *)qword_1ECFC7520;
  qword_1ECFC7520 = (uint64_t)v0;

}

void sub_19E24B058(uint64_t a1, uint64_t a2, void *a3)
{
  id v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id WeakRetained;
  uint8_t v21[16];

  v5 = a3;
  if (v5)
  {
    IMLogHandleForCategory("IMFocusStateManager");
    v6 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      sub_19E36CA84((uint64_t)v5, v6, v7, v8, v9, v10, v11, v12);
LABEL_10:

    goto LABEL_11;
  }
  if ((a2 & 1) == 0)
  {
    IMLogHandleForCategory("IMFocusStateManager");
    v6 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      sub_19E36CA50(v6, v13, v14, v15, v16, v17, v18, v19);
    goto LABEL_10;
  }
  if (IMOSLoggingEnabled())
  {
    OSLogHandleForIMFoundationCategory();
    v6 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)v21 = 0;
      _os_log_impl(&dword_19E239000, v6, OS_LOG_TYPE_INFO, "Successfully registered for dnd state updates.", v21, 2u);
    }
    goto LABEL_10;
  }
LABEL_11:
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "setRegisteredAsStateUpdateListener:", a2);

}

uint64_t sub_19E24B180()
{
  uint64_t result;

  if ((_os_feature_enabled_impl() & 1) != 0)
    result = 1;
  else
    result = IMGetCachedDomainBoolForKeyWithDefaultValue();
  byte_1ECFC6E50 = result;
  return result;
}

uint64_t sub_19E24B1D0(uint64_t a1)
{
  _BOOL4 v2;
  void *v3;
  uint64_t result;

  v2 = IMSharedHelperDeviceIsiPad();
  v3 = *(void **)(a1 + 32);
  if (v2)
    result = objc_msgSend(v3, "_isSendMenuEnabledForiPad");
  else
    result = objc_msgSend(v3, "_isSendMenuEnabled");
  byte_1ECFC6E30 = result;
  return result;
}

void sub_19E24B210(uint64_t a1)
{
  id *v1;
  id WeakRetained;
  id v3;

  v1 = (id *)(a1 + 32);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "_updateSettings");

  v3 = objc_loadWeakRetained(v1);
  objc_msgSend(v3, "_connectToFamilyCircle:", 0);

}

uint64_t sub_19E24B260()
{
  uint64_t result;

  if ((_os_feature_enabled_impl() & 1) != 0)
    result = 1;
  else
    result = IMGetCachedDomainBoolForKeyWithDefaultValue();
  byte_1ECFC6E60 = result;
  return result;
}

uint64_t sub_19E24B2AC()
{
  uint64_t result;

  if ((_os_feature_enabled_impl() & 1) != 0)
    result = 1;
  else
    result = IMGetCachedDomainBoolForKeyWithDefaultValue();
  byte_1ECFC6FB8 = result;
  return result;
}

uint64_t sub_19E24B2FC()
{
  uint64_t result;

  if ((_os_feature_enabled_impl() & 1) != 0)
    result = 1;
  else
    result = IMGetCachedDomainBoolForKeyWithDefaultValue();
  byte_1ECFC7098 = result;
  return result;
}

uint64_t sub_19E24B34C()
{
  uint64_t result;

  if ((_os_feature_enabled_impl() & 1) != 0)
    result = 1;
  else
    result = IMGetCachedDomainBoolForKeyWithDefaultValue();
  byte_1ECFC6FA0 = result;
  return result;
}

void sub_19E24B39C()
{
  IMContactStore *v0;
  void *v1;

  v0 = objc_alloc_init(IMContactStore);
  v1 = (void *)qword_1ECFC75A0;
  qword_1ECFC75A0 = (uint64_t)v0;

}

IMDefaults *sub_19E24B3C4()
{
  IMDefaults *result;

  result = objc_alloc_init(IMDefaults);
  qword_1ECFC7440 = (uint64_t)result;
  return result;
}

uint64_t sub_19E24B3E8()
{
  if (qword_1ECFC7038 != -1)
    dispatch_once(&qword_1ECFC7038, &unk_1E3FB4008);
  if (qword_1ECFC7030 && (objc_opt_respondsToSelector() & 1) != 0)
    return objc_msgSend((id)qword_1ECFC7030, "sharedInstance");
  else
    return 0;
}

uint64_t sub_19E24B458()
{
  uint64_t v0;
  void *v2;

  if (!qword_1ECFC7078)
    qword_1ECFC7078 = _sl_dlopen();
  v0 = qword_1ECFC7078;
  if (!qword_1ECFC7078)
  {
    v2 = (void *)abort_report_np();
    free(v2);
  }
  return v0;
}

BOOL IMSharedHelperDeviceHasMultipleSubscriptions()
{
  return -[IMCTSubscriptionUtilities deviceSupportsMultipleSubscriptions](+[IMCTSubscriptionUtilities sharedInstance](IMCTSubscriptionUtilities, "sharedInstance"), "deviceSupportsMultipleSubscriptions");
}

void sub_19E24B524()
{
  uint64_t v0;
  _QWORD block[5];

  v0 = IMPreviewGeneratorClasses();
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = sub_19E24A0D0;
  block[3] = &unk_1E3FB58C8;
  block[4] = v0;
  if (qword_1ECFC7210 != -1)
    dispatch_once(&qword_1ECFC7210, block);
}

_OWORD *sub_19E24B594(_OWORD *a1, _OWORD *a2)
{
  __int128 v2;

  v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

uint64_t sub_19E24B5A4(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    sub_19E247E74((uint64_t *)&unk_1ECFC6AB8);
    v10 = (char *)swift_allocObject();
    v11 = j__malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 1;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 5);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[32 * v8])
      memmove(v13, v14, 32 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[32 * v8] || v13 >= &v14[32 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = sub_19E36FD2C();
  __break(1u);
  return result;
}

uint64_t sub_19E24B710(uint64_t a1)
{
  int64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  __int128 v8;
  uint64_t v9;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x1E0DEE9D8];
  if (v1)
  {
    v9 = MEMORY[0x1E0DEE9D8];
    sub_19E24B838(0, v1, 0);
    v4 = a1 + 32;
    v2 = v9;
    do
    {
      sub_19E247E74(qword_1ECFC6AF0);
      swift_dynamicCast();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_19E24B838(0, *(_QWORD *)(v2 + 16) + 1, 1);
        v2 = v9;
      }
      v6 = *(_QWORD *)(v2 + 16);
      v5 = *(_QWORD *)(v2 + 24);
      if (v6 >= v5 >> 1)
      {
        sub_19E24B838(v5 > 1, v6 + 1, 1);
        v2 = v9;
      }
      *(_QWORD *)(v2 + 16) = v6 + 1;
      sub_19E24B594(&v8, (_OWORD *)(v2 + 32 * v6 + 32));
      v4 += 8;
      --v1;
    }
    while (v1);
  }
  return v2;
}

uint64_t sub_19E24B838(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_19E24B5A4(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_19E24B854(uint64_t a1, unint64_t *a2)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, a2);
  }
  return result;
}

void type metadata accessor for os_unfair_lock_s(uint64_t a1)
{
  sub_19E31CBB0(a1, qword_1ECFC6990);
}

char *sub_19E24B8C0()
{
  char *v0;
  char *v1;
  int v2;
  BOOL v3;
  int v4;
  BOOL v5;
  char v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  char *v16;
  int v17;
  uint64_t v18;
  void *v19;
  char *v20;
  int v21;
  uint64_t v22;
  void *v23;
  char *v24;
  int v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t (*v29)(uint64_t, uint64_t, uint64_t);
  void *v30;
  uint64_t (*v31)(uint64_t, uint64_t);
  uint64_t v32;
  objc_super v33;

  *(_QWORD *)&v0[OBJC_IVAR___IMUnlockMonitor_keybagChangeIOKitToken] = 0;
  *(_DWORD *)&v0[OBJC_IVAR___IMUnlockMonitor_firstKeybagUnlockToken] = -1;
  *(_DWORD *)&v0[OBJC_IVAR___IMUnlockMonitor_keybagChangeToken] = -1;
  *(_DWORD *)&v0[OBJC_IVAR___IMUnlockMonitor_sbLockChangeToken] = -1;
  v1 = v0;
  v2 = MKBDeviceUnlockedSinceBoot();
  v3 = v2 > 0;
  v1[OBJC_IVAR___IMUnlockMonitor_initializedBeforeFirstUnlock] = v2 < 1;
  v4 = MKBGetDeviceLockState();
  if (v4)
    v5 = v4 == 3;
  else
    v5 = 1;
  v6 = !v5;
  sub_19E247E74(&qword_1ECFC69B0);
  v7 = swift_allocObject();
  *(_DWORD *)(v7 + 20) = 0;
  *(_BYTE *)(v7 + 16) = v3;
  *(_BYTE *)(v7 + 17) = 0;
  *(_BYTE *)(v7 + 18) = v6;
  *(_QWORD *)&v1[OBJC_IVAR___IMUnlockMonitor_state] = v7;
  v8 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0C99E20]), sel_init);
  sub_19E247E74(&qword_1ECFC69A8);
  v9 = swift_allocObject();
  *(_DWORD *)(v9 + 24) = 0;
  *(_QWORD *)(v9 + 16) = v8;
  *(_QWORD *)&v1[OBJC_IVAR___IMUnlockMonitor_listeners] = v9;

  v33.receiver = v1;
  v33.super_class = (Class)IMUnlockMonitor;
  v10 = objc_msgSendSuper2(&v33, sel_init);
  v11 = qword_1ECFC6978;
  v12 = v10;
  if (v11 != -1)
    swift_once();
  v13 = swift_allocObject();
  *(_QWORD *)(v13 + 16) = v12;
  v31 = sub_19E34D844;
  v32 = v13;
  v14 = MEMORY[0x1E0C809B0];
  v27 = MEMORY[0x1E0C809B0];
  v28 = 1107296256;
  v29 = sub_19E34D2E0;
  v30 = &unk_1E3FB4A70;
  v15 = _Block_copy(&v27);
  v16 = (char *)v12;
  swift_release();
  v17 = IMDispatchForNotify();
  _Block_release(v15);
  *(_DWORD *)&v16[OBJC_IVAR___IMUnlockMonitor_firstKeybagUnlockToken] = v17;
  v18 = swift_allocObject();
  *(_QWORD *)(v18 + 16) = v16;
  v31 = sub_19E34D854;
  v32 = v18;
  v27 = v14;
  v28 = 1107296256;
  v29 = sub_19E34D2E0;
  v30 = &unk_1E3FB4B10;
  v19 = _Block_copy(&v27);
  v20 = v16;
  swift_release();
  v21 = IMDispatchForNotify();
  _Block_release(v19);
  *(_DWORD *)&v20[OBJC_IVAR___IMUnlockMonitor_keybagChangeToken] = v21;
  v22 = swift_allocObject();
  *(_QWORD *)(v22 + 16) = v20;
  v31 = sub_19E34D898;
  v32 = v22;
  v27 = v14;
  v28 = 1107296256;
  v29 = sub_19E34D2E0;
  v30 = &unk_1E3FB4B60;
  v23 = _Block_copy(&v27);
  v24 = v20;
  swift_release();
  v25 = IMDispatchForNotify();

  _Block_release(v23);
  *(_DWORD *)&v24[OBJC_IVAR___IMUnlockMonitor_sbLockChangeToken] = v25;
  return v24;
}

id sub_19E24BC04()
{
  id result;

  result = objc_msgSend(objc_allocWithZone((Class)IMUnlockMonitor), sel_init);
  qword_1ECFC6988 = (uint64_t)result;
  return result;
}

uint64_t sub_19E24BC34()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t (*v4)(uint64_t);
  uint64_t result;
  _QWORD v6[2];

  v0 = sub_19E36FAD4();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x1E0C80A78]();
  v3 = (char *)v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_19E36FAC8();
  v4 = (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF810];
  MEMORY[0x1E0C80A78]();
  sub_19E36F7D4();
  MEMORY[0x1E0C80A78]();
  sub_19E24B854(0, (unint64_t *)&qword_1ECFC6BA0);
  sub_19E36F7C8();
  v6[1] = MEMORY[0x1E0DEE9D8];
  sub_19E24C518(&qword_1ECFC6B98, v4, MEMORY[0x1E0DEF828]);
  sub_19E247E74(&qword_1ECFC6B80);
  sub_19E24C410((unint64_t *)&unk_1ECFC6B88, &qword_1ECFC6B80);
  sub_19E36FC30();
  (*(void (**)(char *, _QWORD, uint64_t))(v1 + 104))(v3, *MEMORY[0x1E0DEF8D0], v0);
  result = sub_19E36FB10();
  qword_1ECFC6970 = result;
  return result;
}

ValueMetadata *_s5StateVMa()
{
  return &_s5StateVN;
}

uint64_t sub_19E24BE8C()
{
  uint64_t result;

  if (qword_1ECFC6A60 != -1)
    result = swift_once();
  if (qword_1ECFC6AC8 != -1)
    return swift_once();
  return result;
}

uint64_t sub_19E24BEEC()
{
  id v0;
  uint64_t inited;
  uint64_t result;

  v0 = objc_msgSend((id)objc_opt_self(), sel_interfaceWithProtocol_, &unk_1EE542FA8);
  sub_19E247E74((uint64_t *)&unk_1ECFC6AA0);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_19E381B30;
  *(_QWORD *)(inited + 32) = sub_19E24B854(0, &qword_1ECFC6AE8);
  *(_QWORD *)(inited + 40) = sub_19E24B854(0, (unint64_t *)&unk_1ECFC6AD8);
  sub_19E23D5B8(inited, (uint64_t)sel_account_chat_style_chatProperties_groupID_chatPersonCentricID_messagesReceived_removed_messagesComingFromStorage_, 6, 0);
  result = swift_setDeallocating();
  qword_1ECFC6A80 = (uint64_t)v0;
  return result;
}

id sub_19E24BFC0(_QWORD *a1, id *a2)
{
  if (*a1 != -1)
    swift_once();
  return *a2;
}

id static NSXPCInterface.messagesDaemonListener.getter()
{
  return sub_19E24BFC0(&qword_1ECFC6A60, (id *)&qword_1ECFC6A80);
}

id sub_19E24C014()
{
  id result;

  result = sub_19E24C030();
  qword_1ECFC6A78 = (uint64_t)result;
  return result;
}

id sub_19E24C030()
{
  void *v0;
  id v1;
  uint64_t inited;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;

  v0 = (void *)objc_opt_self();
  v1 = objc_msgSend(v0, sel_interfaceWithProtocol_, &unk_1EE542F48);
  sub_19E247E74((uint64_t *)&unk_1ECFC6AA0);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_19E381B30;
  v3 = sub_19E24B854(0, &qword_1ECFC6AE8);
  *(_QWORD *)(inited + 32) = v3;
  *(_QWORD *)(inited + 40) = sub_19E24B854(0, &qword_1ECFC6AB0);
  sub_19E23D5B8(inited, (uint64_t)sel_fetchCollaborationNoticesForChatGUID_reply_, 0, 1);
  swift_setDeallocating();
  v4 = swift_initStackObject();
  *(_OWORD *)(v4 + 16) = xmmword_19E381BB0;
  v5 = sub_19E24B854(0, &qword_1ECFC6A70);
  *(_QWORD *)(v4 + 32) = v5;
  *(_QWORD *)(v4 + 40) = v3;
  *(_QWORD *)(v4 + 48) = sub_19E24B854(0, (unint64_t *)&unk_1ECFC6A90);
  sub_19E23D5B8(v4, (uint64_t)sel_updateMessage_withIndexesOfDeletedItems_withIndexToRangeMapOfDeletedItems_deleteDate_, 2, 0);
  swift_setDeallocating();
  v6 = swift_initStackObject();
  *(_OWORD *)(v6 + 16) = xmmword_19E381BB0;
  *(_QWORD *)(v6 + 32) = v5;
  v7 = sub_19E24B854(0, (unint64_t *)&unk_1ECFC6A50);
  *(_QWORD *)(v6 + 40) = v7;
  *(_QWORD *)(v6 + 48) = sub_19E24B854(0, (unint64_t *)&unk_1ECFC6A40);
  sub_19E23D5B8(v6, (uint64_t)sel_fetchGroupPhotoPathsForChatsWithGroupIDs_completionHandler_, 0, 1);
  swift_setDeallocating();
  v8 = swift_initStackObject();
  *(_OWORD *)(v8 + 16) = xmmword_19E381B30;
  *(_QWORD *)(v8 + 32) = v3;
  *(_QWORD *)(v8 + 40) = sub_19E24B854(0, (unint64_t *)&unk_1ECFC69C8);
  sub_19E23D5B8(v8, (uint64_t)sel_simulateMessages_completion_, 0, 0);
  swift_setDeallocating();
  v9 = swift_initStackObject();
  *(_OWORD *)(v9 + 16) = xmmword_19E381BB0;
  *(_QWORD *)(v9 + 32) = sub_19E24B854(0, &qword_1ECFC69C0);
  *(_QWORD *)(v9 + 40) = v5;
  *(_QWORD *)(v9 + 48) = v7;
  sub_19E23D5B8(v9, (uint64_t)sel_updateChatsUsingMessageGUIDsAndSummaries_, 0, 0);
  swift_setDeallocating();
  v10 = objc_msgSend(v0, sel_interfaceWithProtocol_, &unk_1EE52C3F8);
  objc_msgSend(v1, sel_setInterface_forSelector_argumentIndex_ofReply_, v10, sel_calculateReachabilityWithRequest_responseHandler_, 1, 0);

  return v1;
}

id static NSXPCInterface.messagesDaemon.getter()
{
  return sub_19E24BFC0(&qword_1ECFC6AC8, (id *)&qword_1ECFC6A78);
}

void sub_19E24C338(void *a1, uint64_t a2, uint64_t a3)
{
  id v4;
  id v5;

  v4 = a1;
  v5 = (id)sub_19E36F864();
  objc_msgSend(v4, sel_setBool_forKey_, a3, v5);

}

id sub_19E24C3A4(void *a1)
{
  id v1;
  void *v2;
  id v3;

  v1 = a1;
  v2 = (void *)sub_19E36F864();
  v3 = objc_msgSend(v1, sel_BOOLForKey_, v2);

  return v3;
}

uint64_t sub_19E24C410(unint64_t *a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (!result)
  {
    v4 = sub_19E247E30(a2);
    result = MEMORY[0x1A1AE8A18](MEMORY[0x1E0DEAF38], v4);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_19E24C454(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_19E24C450;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_1EE501AA8 + dword_1EE501AA8))(a1, v4);
}

uint64_t sub_19E24C4C4(uint64_t a1, int *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t (*v5)(void);

  v5 = (uint64_t (*)(void))((char *)a2 + *a2);
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v3;
  *v3 = v2;
  v3[1] = sub_19E24C450;
  return v5();
}

uint64_t sub_19E24C518(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = a2(255);
    result = MEMORY[0x1A1AE8A18](a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t static Logger.messagesSubsystem.getter()
{
  return 0xD000000000000012;
}

uint64_t destroy for AsyncSerialQueue(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_19E247E74(&qword_1EE4FFA38);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
}

uint64_t initializeWithCopy for AsyncSerialQueue(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_19E247E74(&qword_1EE4FFA38);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, a2, v4);
  return a1;
}

uint64_t type metadata accessor for AsyncSerialQueue()
{
  uint64_t result;

  result = qword_1EE4FF900;
  if (!qword_1EE4FF900)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t AsyncSerialQueue.perform(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD v16[2];

  v3 = v2;
  v6 = sub_19E247E74(&qword_1EE4FFA38);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78]();
  v9 = (char *)v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_19E247E74(&qword_1EE4FFA28);
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78]();
  v13 = (char *)v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, v3, v6);
  v14 = swift_allocObject();
  *(_QWORD *)(v14 + 16) = a1;
  *(_QWORD *)(v14 + 24) = a2;
  v16[0] = &unk_1EE501AB0;
  v16[1] = v14;
  swift_retain();
  sub_19E36F9F0();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v10);
}

uint64_t sub_19E24C768()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

_BYTE *sub_19E24C7B0(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

ValueMetadata *type metadata accessor for MessagesTip()
{
  return &type metadata for MessagesTip;
}

uint64_t MessagesTip.identifier.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_19E24C800 + 4 * byte_19E3828CE[*v0]))(0xD000000000000025, 0x800000019E39D8C0);
}

unint64_t sub_19E24C800()
{
  return 0xD00000000000001DLL;
}

const __CFString *sub_19E24C86C(void *a1)
{
  void *v1;

  v1 = (void *)objc_msgSend(a1, "lastPathComponent");
  if (objc_msgSend(v1, "isEqualToString:", CFSTR("..")))
    return &stru_1E3FBBA48;
  else
    return (const __CFString *)v1;
}

uint64_t sub_19E24C8A8(void *a1, uint64_t a2, void *a3, _BYTE *a4, _QWORD *a5)
{
  id v8;
  void *v9;
  void *v10;
  uint64_t v11;
  char v12;
  id v13;
  id v14;
  uint64_t v15;
  NSObject *v16;
  id v17;
  void *v18;
  id v20;
  id v21;
  uint8_t buf[4];
  id v23;
  __int16 v24;
  void *v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v8 = a3;
  *a4 = 0;
  objc_msgSend(MEMORY[0x1E0C99E98], "fileURLWithPath:", v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "path");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  LOBYTE(a1) = objc_msgSend(a1, "fileExistsAtPath:", v10);

  if ((a1 & 1) != 0)
  {
    v21 = 0;
    v11 = *MEMORY[0x1E0C999D8];
    v20 = 0;
    v12 = objc_msgSend(v9, "getResourceValue:forKey:error:", &v21, v11, &v20);
    v13 = v21;
    v14 = v20;
    if ((v12 & 1) != 0)
    {
      if (v13)
        *a4 = objc_msgSend(v13, "BOOLValue");
      v15 = 1;
      goto LABEL_14;
    }
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", *MEMORY[0x1E0CB28A8], 4, 0);
    v14 = (id)objc_claimAutoreleasedReturnValue();
    v13 = 0;
  }
  if (a5)
    *a5 = objc_retainAutorelease(v14);
  if (IMOSLoggingEnabled())
  {
    OSLogHandleForIMFoundationCategory();
    v16 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
    {
      objc_msgSend(v9, "path");
      v17 = (id)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v14, "localizedDescription");
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138412546;
      v23 = v17;
      v24 = 2112;
      v25 = v18;
      _os_log_impl(&dword_19E239000, v16, OS_LOG_TYPE_INFO, "Failed to get iCloudBackupAttribute '%@'. Error = '%@'", buf, 0x16u);

    }
  }
  v15 = 0;
LABEL_14:

  return v15;
}

uint64_t sub_19E24CAC8(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *v5;
  void *v6;

  objc_msgSend(a1, "objectForKey:");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = v5;
  if (v5)
    a4 = objc_msgSend(v5, "unsignedIntegerValue");

  return a4;
}

double sub_19E24CB08(void *a1, double a2)
{
  void *v3;
  void *v4;
  double v5;

  objc_msgSend(a1, "objectForKey:");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = v3;
  if (v3)
  {
    objc_msgSend(v3, "doubleValue");
    a2 = v5;
  }

  return a2;
}

uint64_t sub_19E24CB50(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *v5;
  void *v6;

  objc_msgSend(a1, "objectForKey:");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = v5;
  if (v5)
    a4 = objc_msgSend(v5, "BOOLValue");

  return a4;
}

uint64_t sub_19E24CB90(void *a1, const char *a2)
{
  return objc_msgSend(a1, "objectForKey:", CFSTR("ams"));
}

uint64_t sub_19E24CBA0(void *a1, const char *a2)
{
  return objc_msgSend(a1, "objectForKey:", CFSTR("amc"));
}

void sub_19E24D560(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_19E24EB08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_19E24EB8C(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;

  objc_begin_catch(a1);
  v3 = *(void **)(v1 + 32);
  *(_QWORD *)(v1 + 32) = 0;

  *(_BYTE *)(v2 + 2088) = 0;
  objc_exception_rethrow();
}

void sub_19E24EBA8(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_19E250C00(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19E2513B4(_Unwind_Exception *exc_buf, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(exc_buf);
    objc_end_catch();
    JUMPOUT(0x19E2513A8);
  }
  objc_end_catch();
  _Unwind_Resume(exc_buf);
}

void sub_19E251698(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
  uint64_t v20;

  _Block_object_dispose((const void *)(v20 - 96), 8);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_19E251D18(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_19E251E18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

id sub_19E252C88()
{
  if (qword_1ECFC7118 != -1)
    dispatch_once(&qword_1ECFC7118, &unk_1E3FB3388);
  return (id)qword_1ECFC7110;
}

IMSingletonProxy *sub_19E252CC8()
{
  id v0;
  int v1;
  NSObject *v2;
  _BOOL4 v3;
  IMSingletonProxy *v4;
  IMSingletonProxy *v5;

  v0 = objc_alloc_init((Class)objc_opt_class());
  v1 = byte_1EE5041D0;
  IMLogHandleForCategory("IMSingletonLog");
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG);
  if (v1)
  {
    if (v3)
      sub_19E36E4D4();

    v4 = -[IMSingletonProxy initWithSingleton:singletonOverride:]([IMSingletonProxy alloc], "initWithSingleton:singletonOverride:", v0, 0);
  }
  else
  {
    if (v3)
      sub_19E36E458();

    v4 = (IMSingletonProxy *)v0;
  }
  v5 = v4;

  return v5;
}

uint64_t sub_19E252D78(void *a1, const char *a2, double a3)
{
  if (a3 > 1000000000.0)
    a3 = a3 / 1000000000.0;
  return objc_msgSend(a1, "dateWithTimeIntervalSinceReferenceDate:", a3);
}

void sub_19E252F18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

uint64_t IMSharedUtilitiesProtoCloudKitEncryptedMessageP4ReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t result;
  void *String;
  id v25;
  uint64_t v26;
  void *Data;
  void *v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  unint64_t v32;
  char v33;
  char v34;
  unsigned int v35;
  uint64_t v36;
  unint64_t v37;
  char v38;
  void *v39;
  uint64_t v40;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      switch((v10 >> 3))
      {
        case 1u:
          v17 = 0;
          v18 = 0;
          v19 = 0;
          *(_BYTE *)(a1 + 52) |= 4u;
          while (1)
          {
            v20 = *v3;
            v21 = *(_QWORD *)(a2 + v20);
            if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
              break;
            v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
            *(_QWORD *)(a2 + v20) = v21 + 1;
            v19 |= (unint64_t)(v22 & 0x7F) << v17;
            if ((v22 & 0x80) == 0)
              goto LABEL_48;
            v17 += 7;
            v14 = v18++ >= 9;
            if (v14)
            {
              LODWORD(v19) = 0;
              goto LABEL_50;
            }
          }
          *(_BYTE *)(a2 + *v5) = 1;
LABEL_48:
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v19) = 0;
LABEL_50:
          v40 = 48;
          goto LABEL_59;
        case 2u:
          String = (void *)PBReaderReadString();

          v25 = String;
          v26 = 24;
          goto LABEL_46;
        case 3u:
          Data = (void *)PBReaderReadData();

          v25 = Data;
          v26 = 32;
          goto LABEL_46;
        case 4u:
          v28 = (void *)PBReaderReadString();

          v25 = v28;
          v26 = 16;
          goto LABEL_46;
        case 5u:
          v29 = 0;
          v30 = 0;
          v19 = 0;
          *(_BYTE *)(a1 + 52) |= 2u;
          while (2)
          {
            v31 = *v3;
            v32 = *(_QWORD *)(a2 + v31);
            if (v32 == -1 || v32 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v33 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v32);
              *(_QWORD *)(a2 + v31) = v32 + 1;
              v19 |= (unint64_t)(v33 & 0x7F) << v29;
              if (v33 < 0)
              {
                v29 += 7;
                v14 = v30++ >= 9;
                if (v14)
                {
                  LODWORD(v19) = 0;
                  goto LABEL_54;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v19) = 0;
LABEL_54:
          v40 = 44;
          goto LABEL_59;
        case 6u:
          v34 = 0;
          v35 = 0;
          v19 = 0;
          *(_BYTE *)(a1 + 52) |= 1u;
          break;
        case 7u:
          v39 = (void *)PBReaderReadString();

          v25 = v39;
          v26 = 8;
LABEL_46:
          *(_QWORD *)(a1 + v26) = v25;
          continue;
        default:
          result = PBReaderSkipValueWithTag();
          if (!(_DWORD)result)
            return result;
          continue;
      }
      while (1)
      {
        v36 = *v3;
        v37 = *(_QWORD *)(a2 + v36);
        if (v37 == -1 || v37 >= *(_QWORD *)(a2 + *v4))
          break;
        v38 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v37);
        *(_QWORD *)(a2 + v36) = v37 + 1;
        v19 |= (unint64_t)(v38 & 0x7F) << v34;
        if ((v38 & 0x80) == 0)
          goto LABEL_56;
        v34 += 7;
        v14 = v35++ >= 9;
        if (v14)
        {
          LODWORD(v19) = 0;
          goto LABEL_58;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_56:
      if (*(_BYTE *)(a2 + *v5))
        LODWORD(v19) = 0;
LABEL_58:
      v40 = 40;
LABEL_59:
      *(_DWORD *)(a1 + v40) = v19;
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void *sub_19E255A58(void *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v1 = (void *)objc_msgSend(a1, "mutableCopy");
  objc_msgSend(v1, "objectForKeyedSubscript:", CFSTR("lastMessage"));
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  if (v2)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      objc_msgSend(v2, "objectForKeyedSubscript:", CFSTR("guid"));
      v3 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v1, "setObject:forKeyedSubscript:", v3, CFSTR("lastMessageGUID"));

    }
  }
  objc_msgSend(v1, "setObject:forKeyedSubscript:", 0, CFSTR("lastMessage"));

  return v1;
}

void sub_19E255B74()
{
  IMAvailabilityInvitationManager *v0;
  void *v1;

  v0 = objc_alloc_init(IMAvailabilityInvitationManager);
  v1 = (void *)qword_1ECFC6F40;
  qword_1ECFC6F40 = (uint64_t)v0;

}

void sub_19E255CE0(uint64_t a1, char a2)
{
  void *v3;
  void *v4;
  void *v5;
  double v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  NSObject *v11;
  void *v12;
  void *v13;
  void *v14;
  id v15;
  id v16;
  NSObject *v17;
  uint64_t v18;
  NSObject *v19;
  NSObject *v20;
  uint64_t v21;
  _QWORD v22[4];
  id v23;
  id v24;
  id v25;
  id v26;
  _BYTE buf[12];
  __int16 v28;
  void *v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  if ((a2 & 1) != 0)
  {
    if ((objc_msgSend(*(id *)(a1 + 32), "_isHandleIDEligibleToReceiveAutomaticInvitation:", *(_QWORD *)(a1 + 40)) & 1) != 0)
    {
      objc_msgSend(*(id *)(a1 + 32), "_invitationCacheKeyForHandleID:fromHandleID:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
      v3 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 16), "objectForKey:", v3);
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      v5 = v4;
      if (v4 && (objc_msgSend(v4, "timeIntervalSinceNow"), fabs(v6) < 300.0))
      {
        if (IMOSLoggingEnabled())
        {
          OSLogHandleForIMFoundationCategory();
          v20 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 138412290;
            *(_QWORD *)&buf[4] = v3;
            _os_log_impl(&dword_19E239000, v20, OS_LOG_TYPE_INFO, "Not attempting to check or share invitation for personal availability, have attempted recently for cache key: %@", buf, 0xCu);
          }

        }
        v21 = *(_QWORD *)(a1 + 56);
        if (v21)
          (*(void (**)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(v21 + 16))(v21, 0, 0, 0, 0, 0);
      }
      else
      {
        v7 = *(void **)(*(_QWORD *)(a1 + 32) + 16);
        objc_msgSend(MEMORY[0x1E0C99D68], "date");
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v7, "setObject:forKey:", v8, v3);

        objc_msgSend(*(id *)(a1 + 32), "_skHandleForString:", *(_QWORD *)(a1 + 40));
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(*(id *)(a1 + 32), "_skHandleForString:", *(_QWORD *)(a1 + 48));
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        if (IMOSLoggingEnabled())
        {
          OSLogHandleForIMFoundationCategory();
          v11 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
          {
            objc_msgSend(v9, "handleString");
            v12 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v10, "handleString");
            v13 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138412546;
            *(_QWORD *)&buf[4] = v12;
            v28 = 2112;
            v29 = v13;
            _os_log_impl(&dword_19E239000, v11, OS_LOG_TYPE_INFO, "Checking if handle is already invited: %@ fromHandle: %@", buf, 0x16u);

          }
        }
        objc_msgSend(*(id *)(a1 + 32), "publishingService");
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        *(_QWORD *)buf = 0;
        objc_initWeak((id *)buf, *(id *)(a1 + 32));
        v22[0] = MEMORY[0x1E0C809B0];
        v22[1] = 3221225472;
        v22[2] = sub_19E256188;
        v22[3] = &unk_1E3FB4C80;
        v25 = *(id *)(a1 + 56);
        v15 = v9;
        v23 = v15;
        objc_copyWeak(&v26, (id *)buf);
        v16 = v10;
        v24 = v16;
        objc_msgSend(v14, "isHandleInvited:fromSenderHandle:completion:", v15, v16, v22);

        objc_destroyWeak(&v26);
        objc_destroyWeak((id *)buf);

      }
      return;
    }
    if (IMOSLoggingEnabled())
    {
      OSLogHandleForIMFoundationCategory();
      v19 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_19E239000, v19, OS_LOG_TYPE_INFO, "Not attempting to share availability, recipient is not eligible (e.g. not a contact)", buf, 2u);
      }

    }
    v18 = *(_QWORD *)(a1 + 56);
    if (v18)
LABEL_15:
      (*(void (**)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(v18 + 16))(v18, 0, 0, 0, 0, 0);
  }
  else
  {
    if (IMOSLoggingEnabled())
    {
      OSLogHandleForIMFoundationCategory();
      v17 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_19E239000, v17, OS_LOG_TYPE_INFO, "Not attempting to share availability, Share Across Devices is disabled.", buf, 2u);
      }

    }
    v18 = *(_QWORD *)(a1 + 56);
    if (v18)
      goto LABEL_15;
  }
}

void sub_19E256188(uint64_t a1, int a2, void *a3)
{
  id v5;
  NSObject *v6;
  uint64_t v7;
  int v8;
  NSObject *v9;
  void *v10;
  uint64_t v11;
  NSObject *v12;
  void *v13;
  id WeakRetained;
  uint64_t v15;
  uint64_t v16;
  _QWORD v17[4];
  id v18;
  uint8_t buf[4];
  void *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v5 = a3;
  if (v5)
  {
    IMLogHandleForCategory("IMAvailabilityInvitationManager");
    v6 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      sub_19E36B084();

    v7 = *(_QWORD *)(a1 + 48);
    if (v7)
      (*(void (**)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, id))(v7 + 16))(v7, 1, 0, 0, 0, v5);
  }
  else
  {
    v8 = IMOSLoggingEnabled();
    if (a2)
    {
      if (v8)
      {
        OSLogHandleForIMFoundationCategory();
        v9 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
        {
          objc_msgSend(*(id *)(a1 + 32), "handleString");
          v10 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138412290;
          v20 = v10;
          _os_log_impl(&dword_19E239000, v9, OS_LOG_TYPE_INFO, "Handle is already invited: %@", buf, 0xCu);

        }
      }
      v11 = *(_QWORD *)(a1 + 48);
      if (v11)
        (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD))(v11 + 16))(v11, 1, 1, 0, 0, 0);
    }
    else
    {
      if (v8)
      {
        OSLogHandleForIMFoundationCategory();
        v12 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
        {
          objc_msgSend(*(id *)(a1 + 32), "handleString");
          v13 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138412290;
          v20 = v13;
          _os_log_impl(&dword_19E239000, v12, OS_LOG_TYPE_INFO, "Handle is not already invited. Initating invitation flow for handle: %@", buf, 0xCu);

        }
      }
      WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
      v15 = *(_QWORD *)(a1 + 32);
      v16 = *(_QWORD *)(a1 + 40);
      v17[0] = MEMORY[0x1E0C809B0];
      v17[1] = 3221225472;
      v17[2] = sub_19E25640C;
      v17[3] = &unk_1E3FB4C58;
      v18 = *(id *)(a1 + 48);
      objc_msgSend(WeakRetained, "_sharePersonalAvailabilityWithSKHandle:fromSKHandle:allowingInvitationOfRemovedUsers:completion:", v15, v16, 0, v17);

    }
  }

}

void sub_19E2563D8(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x19E25632CLL);
  }
  _Unwind_Resume(a1);
}

void sub_19E25640C(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v7;
  NSObject *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  __int16 v12;
  uint64_t v13;
  __int16 v14;
  id v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v7 = a4;
  if (IMOSLoggingEnabled())
  {
    OSLogHandleForIMFoundationCategory();
    v8 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      v10 = 134218498;
      v11 = a2;
      v12 = 2048;
      v13 = a3;
      v14 = 2112;
      v15 = v7;
      _os_log_impl(&dword_19E239000, v8, OS_LOG_TYPE_INFO, "Completed _sharePersonalAvailabilityWithSKHandle. canShare: %ld, didShare: %ld, error: %@", (uint8_t *)&v10, 0x20u);
    }

  }
  v9 = *(_QWORD *)(a1 + 32);
  if (v9)
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, id))(v9 + 16))(v9, 1, 1, a2, a3, v7);

}

void sub_19E256604(uint64_t a1, char a2)
{
  NSObject *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;
  id v9;
  _QWORD v10[4];
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  uint8_t buf[8];

  if ((a2 & 1) == 0)
  {
    if (IMOSLoggingEnabled())
    {
      OSLogHandleForIMFoundationCategory();
      v3 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_19E239000, v3, OS_LOG_TYPE_INFO, "Not attempting to repair focus status from this device, Share Across Devices is disabled on this device.", buf, 2u);
      }

    }
    v4 = *(_QWORD *)(a1 + 56);
    if (v4)
      (*(void (**)(uint64_t, _QWORD, _QWORD, _QWORD))(v4 + 16))(v4, 0, 0, 0);
  }
  objc_msgSend(*(id *)(a1 + 32), "_skHandleForString:", *(_QWORD *)(a1 + 40));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 32), "_skHandleForString:", *(_QWORD *)(a1 + 48));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  *(_QWORD *)buf = 0;
  objc_initWeak((id *)buf, *(id *)(a1 + 32));
  v7 = *(void **)(a1 + 32);
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = sub_19E2567D8;
  v10[3] = &unk_1E3FB4CF8;
  objc_copyWeak(&v15, (id *)buf);
  v14 = *(id *)(a1 + 56);
  v8 = v5;
  v11 = v8;
  v9 = v6;
  v12 = v9;
  v13 = *(id *)(a1 + 40);
  objc_msgSend(v7, "_invitablityForHandle:fromHandle:completion:", v8, v9, v10);

  objc_destroyWeak(&v15);
  objc_destroyWeak((id *)buf);

}

void sub_19E2567D8(id *a1, char a2, int a3, void *a4)
{
  id v7;
  id WeakRetained;
  NSObject *v9;
  id v10;
  void (*v11)(void);
  NSObject *v12;
  const char *v13;
  id v14;
  id v15;
  id v16;
  _QWORD v17[4];
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  uint8_t buf[16];

  v7 = a4;
  WeakRetained = objc_loadWeakRetained(a1 + 8);
  if (v7)
  {
    IMLogHandleForCategory("IMAvailabilityInvitationManager");
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      sub_19E36B0E4();

    v10 = a1[7];
    if (v10)
    {
      v11 = (void (*)(void))*((_QWORD *)v10 + 2);
LABEL_19:
      v11();
      goto LABEL_20;
    }
    goto LABEL_20;
  }
  if (!a3)
  {
    if ((a2 & 1) != 0)
    {
      v14 = a1[4];
      v15 = a1[5];
      v17[0] = MEMORY[0x1E0C809B0];
      v17[1] = 3221225472;
      v17[2] = sub_19E2569FC;
      v17[3] = &unk_1E3FB4CD0;
      v23 = a1[7];
      v18 = 0;
      v19 = WeakRetained;
      v20 = a1[6];
      v21 = a1[4];
      v22 = a1[5];
      objc_msgSend(WeakRetained, "_isFocusStatusSharedWithHandle:fromHandle:completion:", v14, v15, v17);

      goto LABEL_20;
    }
    if (!IMOSLoggingEnabled())
      goto LABEL_17;
    OSLogHandleForIMFoundationCategory();
    v12 = objc_claimAutoreleasedReturnValue();
    if (!os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
      goto LABEL_16;
    *(_WORD *)buf = 0;
    v13 = "Handle is not invitable. Not repairing invalid validation token.";
    goto LABEL_15;
  }
  if (!IMOSLoggingEnabled())
    goto LABEL_17;
  OSLogHandleForIMFoundationCategory();
  v12 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    v13 = "Handle was manually removed by this user from receiving focus status. Not repairing invalid validation token.";
LABEL_15:
    _os_log_impl(&dword_19E239000, v12, OS_LOG_TYPE_INFO, v13, buf, 2u);
  }
LABEL_16:

LABEL_17:
  v16 = a1[7];
  if (v16)
  {
    v11 = (void (*)(void))*((_QWORD *)v16 + 2);
    goto LABEL_19;
  }
LABEL_20:

}

void sub_19E2569FC(uint64_t a1, int a2, void *a3)
{
  id v5;
  NSObject *v6;
  uint64_t v7;
  void (*v8)(void);
  NSObject *v9;
  const char *v10;
  int v11;
  int v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  NSObject *v17;
  uint64_t v18;
  _QWORD v19[4];
  id v20;
  uint8_t buf[16];

  v5 = a3;
  if (v5)
  {
    IMLogHandleForCategory("IMAvailabilityInvitationManager");
    v6 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      sub_19E36B144();

    v7 = *(_QWORD *)(a1 + 72);
    if (v7)
    {
      v8 = *(void (**)(void))(v7 + 16);
LABEL_6:
      v8();
      goto LABEL_18;
    }
    goto LABEL_18;
  }
  if (a2)
  {
    if (IMOSLoggingEnabled())
    {
      OSLogHandleForIMFoundationCategory();
      v9 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        v10 = "Handle is already invited, we're ok to repair the failed validation token.";
LABEL_15:
        _os_log_impl(&dword_19E239000, v9, OS_LOG_TYPE_INFO, v10, buf, 2u);
        goto LABEL_16;
      }
      goto LABEL_16;
    }
    goto LABEL_17;
  }
  v11 = objc_msgSend(*(id *)(a1 + 40), "_isHandleIDEligibleToReceiveAutomaticInvitation:", *(_QWORD *)(a1 + 48));
  v12 = IMOSLoggingEnabled();
  if (v11)
  {
    if (v12)
    {
      OSLogHandleForIMFoundationCategory();
      v9 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        v10 = "Handle is eligible to receive an automatic invitation, we're ok to repair the failed validation token.";
        goto LABEL_15;
      }
LABEL_16:

    }
LABEL_17:
    v13 = *(void **)(a1 + 40);
    v14 = *(_QWORD *)(a1 + 56);
    v15 = *(_QWORD *)(a1 + 64);
    v19[0] = MEMORY[0x1E0C809B0];
    v19[1] = 3221225472;
    v19[2] = sub_19E256CA4;
    v19[3] = &unk_1E3FB4C58;
    v20 = *(id *)(a1 + 72);
    objc_msgSend(v13, "_sharePersonalAvailabilityWithSKHandle:fromSKHandle:allowingInvitationOfRemovedUsers:completion:", v14, v15, 0, v19);

    goto LABEL_18;
  }
  if (v12)
  {
    OSLogHandleForIMFoundationCategory();
    v16 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_19E239000, v16, OS_LOG_TYPE_INFO, "Handle is neither invited nor eligible to receive an automatic invitation, will not repair the failed validation token.", buf, 2u);
    }

  }
  if (IMOSLoggingEnabled())
  {
    OSLogHandleForIMFoundationCategory();
    v17 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_19E239000, v17, OS_LOG_TYPE_INFO, "Not repairing invalid validation token.", buf, 2u);
    }

  }
  v18 = *(_QWORD *)(a1 + 72);
  if (v18)
  {
    v8 = *(void (**)(void))(v18 + 16);
    goto LABEL_6;
  }
LABEL_18:

}

void sub_19E256CA4(uint64_t a1, uint64_t a2, char a3, void *a4)
{
  id v6;
  NSObject *v7;
  uint64_t v8;
  void (*v9)(void);
  NSObject *v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t v13;
  uint8_t v14[16];

  v6 = a4;
  if (v6)
  {
    IMLogHandleForCategory("IMAvailabilityInvitationManager");
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      sub_19E36B1D0();

    v8 = *(_QWORD *)(a1 + 32);
    if (v8)
    {
      v9 = *(void (**)(void))(v8 + 16);
LABEL_17:
      v9();
    }
  }
  else if ((a3 & 1) != 0)
  {
    if (IMOSLoggingEnabled())
    {
      OSLogHandleForIMFoundationCategory();
      v10 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)v14 = 0;
        _os_log_impl(&dword_19E239000, v10, OS_LOG_TYPE_INFO, "Completed sharing focus status following failed validation of token.", v14, 2u);
      }

    }
    v11 = *(_QWORD *)(a1 + 32);
    if (v11)
    {
      v9 = *(void (**)(void))(v11 + 16);
      goto LABEL_17;
    }
  }
  else
  {
    IMLogHandleForCategory("IMAvailabilityInvitationManager");
    v12 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      sub_19E36B1A4();

    v13 = *(_QWORD *)(a1 + 32);
    if (v13)
    {
      v9 = *(void (**)(void))(v13 + 16);
      goto LABEL_17;
    }
  }

}

void sub_19E257034(uint64_t a1, char a2)
{
  void *v3;
  void *v4;
  void *v5;
  NSObject *v6;
  uint64_t v7;
  _QWORD v8[4];
  id v9;
  uint8_t buf[16];

  if ((a2 & 1) != 0)
  {
    objc_msgSend(*(id *)(a1 + 32), "_skHandleForString:", *(_QWORD *)(a1 + 40));
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 32), "_skHandleForString:", *(_QWORD *)(a1 + 48));
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v5 = *(void **)(a1 + 32);
    v8[0] = MEMORY[0x1E0C809B0];
    v8[1] = 3221225472;
    v8[2] = sub_19E257178;
    v8[3] = &unk_1E3FB4C58;
    v9 = *(id *)(a1 + 56);
    objc_msgSend(v5, "_sharePersonalAvailabilityWithSKHandle:fromSKHandle:allowingInvitationOfRemovedUsers:completion:", v3, v4, 1, v8);

  }
  else
  {
    if (IMOSLoggingEnabled())
    {
      OSLogHandleForIMFoundationCategory();
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_19E239000, v6, OS_LOG_TYPE_INFO, "Not manually sharing focus status while Share Across Devices is disabled.", buf, 2u);
      }

    }
    v7 = *(_QWORD *)(a1 + 56);
    if (v7)
      (*(void (**)(uint64_t, _QWORD, _QWORD, _QWORD))(v7 + 16))(v7, 0, 0, 0);
  }
}

void sub_19E257178(uint64_t a1, uint64_t a2, char a3, void *a4)
{
  id v6;
  NSObject *v7;
  uint64_t v8;
  void (*v9)(void);
  NSObject *v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t v13;
  uint8_t v14[16];

  v6 = a4;
  if (v6)
  {
    IMLogHandleForCategory("IMAvailabilityInvitationManager");
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      sub_19E36B25C();

    v8 = *(_QWORD *)(a1 + 32);
    if (v8)
    {
      v9 = *(void (**)(void))(v8 + 16);
LABEL_17:
      v9();
    }
  }
  else if ((a3 & 1) != 0)
  {
    if (IMOSLoggingEnabled())
    {
      OSLogHandleForIMFoundationCategory();
      v10 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)v14 = 0;
        _os_log_impl(&dword_19E239000, v10, OS_LOG_TYPE_INFO, "Completed manually sharing focus status.", v14, 2u);
      }

    }
    v11 = *(_QWORD *)(a1 + 32);
    if (v11)
    {
      v9 = *(void (**)(void))(v11 + 16);
      goto LABEL_17;
    }
  }
  else
  {
    IMLogHandleForCategory("IMAvailabilityInvitationManager");
    v12 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      sub_19E36B230();

    v13 = *(_QWORD *)(a1 + 32);
    if (v13)
    {
      v9 = *(void (**)(void))(v13 + 16);
      goto LABEL_17;
    }
  }

}

void sub_19E257628(uint64_t a1, char a2)
{
  void *v3;
  void *v4;
  NSObject *v5;
  uint64_t v6;
  _QWORD v7[4];
  id v8;
  uint8_t buf[16];

  if ((a2 & 1) != 0)
  {
    objc_msgSend(*(id *)(a1 + 32), "_skHandleForString:", *(_QWORD *)(a1 + 40));
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 32), "publishingService");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v7[0] = MEMORY[0x1E0C809B0];
    v7[1] = 3221225472;
    v7[2] = sub_19E257754;
    v7[3] = &unk_1E3FB4D20;
    v8 = *(id *)(a1 + 48);
    objc_msgSend(v4, "removeInvitedHandle:completion:", v3, v7);

  }
  else
  {
    if (IMOSLoggingEnabled())
    {
      OSLogHandleForIMFoundationCategory();
      v5 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_19E239000, v5, OS_LOG_TYPE_INFO, "Not manually removing sharing focus status while Share Across Devices is disabled.", buf, 2u);
      }

    }
    v6 = *(_QWORD *)(a1 + 48);
    if (v6)
      (*(void (**)(uint64_t, _QWORD))(v6 + 16))(v6, 0);
  }
}

void sub_19E257754(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  uint64_t v5;
  void (*v6)(void);
  NSObject *v7;
  uint64_t v8;
  uint8_t v9[16];

  v3 = a2;
  if (v3)
  {
    IMLogHandleForCategory("IMAvailabilityInvitationManager");
    v4 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      sub_19E36B314();

    v5 = *(_QWORD *)(a1 + 32);
    if (v5)
    {
      v6 = *(void (**)(void))(v5 + 16);
LABEL_12:
      v6();
    }
  }
  else
  {
    if (IMOSLoggingEnabled())
    {
      OSLogHandleForIMFoundationCategory();
      v7 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)v9 = 0;
        _os_log_impl(&dword_19E239000, v7, OS_LOG_TYPE_INFO, "Completed manually unsharing focus status.", v9, 2u);
      }

    }
    v8 = *(_QWORD *)(a1 + 32);
    if (v8)
    {
      v6 = *(void (**)(void))(v8 + 16);
      goto LABEL_12;
    }
  }

}

void sub_19E2579A4(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 72));
  _Unwind_Resume(a1);
}

void sub_19E2579C0(uint64_t a1, char a2, int a3, void *a4)
{
  id v7;
  BOOL v8;
  void *v9;
  void *v10;
  NSObject *v11;
  void *v12;
  uint64_t v13;
  NSObject *v15;
  void *v16;
  _QWORD v17[4];
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  uint8_t buf[4];
  void *v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v7 = a4;
  if ((a2 & 1) != 0)
  {
    if (*(_BYTE *)(a1 + 80))
      v8 = 1;
    else
      v8 = a3 == 0;
    if (v8)
    {
      v9 = *(void **)(a1 + 40);
      objc_msgSend(*(id *)(a1 + 32), "handleString");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      v17[0] = MEMORY[0x1E0C809B0];
      v17[1] = 3221225472;
      v17[2] = sub_19E257C8C;
      v17[3] = &unk_1E3FB4D98;
      v18 = *(id *)(a1 + 32);
      v19 = *(id *)(a1 + 48);
      v20 = *(id *)(a1 + 56);
      v21 = *(id *)(a1 + 64);
      objc_copyWeak(&v22, (id *)(a1 + 72));
      objc_msgSend(v9, "_invitationPayloadForHandleID:completion:", v10, v17);

      objc_destroyWeak(&v22);
    }
    else
    {
      if (IMOSLoggingEnabled())
      {
        OSLogHandleForIMFoundationCategory();
        v15 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
        {
          objc_msgSend(*(id *)(a1 + 32), "handleString");
          v16 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138412290;
          v24 = v16;
          _os_log_impl(&dword_19E239000, v15, OS_LOG_TYPE_INFO, "Handle was previously manually uninvited and is not invitable: %@", buf, 0xCu);

        }
      }
      v13 = *(_QWORD *)(a1 + 64);
      if (v13)
LABEL_19:
        (*(void (**)(uint64_t, _QWORD, _QWORD, id))(v13 + 16))(v13, 0, 0, v7);
    }
  }
  else
  {
    if (IMOSLoggingEnabled())
    {
      OSLogHandleForIMFoundationCategory();
      v11 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
      {
        objc_msgSend(*(id *)(a1 + 32), "handleString");
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138412290;
        v24 = v12;
        _os_log_impl(&dword_19E239000, v11, OS_LOG_TYPE_INFO, "Handle is not invitable: %@", buf, 0xCu);

      }
    }
    v13 = *(_QWORD *)(a1 + 64);
    if (v13)
      goto LABEL_19;
  }

}

void sub_19E257C30(_Unwind_Exception *exception_object, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(exception_object);
    objc_end_catch();
    JUMPOUT(0x19E257BDCLL);
  }
  _Unwind_Resume(exception_object);
}

void sub_19E257C8C(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  _QWORD v10[4];
  id v11;
  id v12;
  id v13;
  id v14;
  uint8_t buf[4];
  void *v16;
  __int16 v17;
  void *v18;
  __int16 v19;
  id v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  if (IMOSLoggingEnabled())
  {
    OSLogHandleForIMFoundationCategory();
    v4 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      objc_msgSend(*(id *)(a1 + 32), "handleString");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(*(id *)(a1 + 40), "handleString");
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138412802;
      v16 = v5;
      v17 = 2112;
      v18 = v6;
      v19 = 2112;
      v20 = v3;
      _os_log_impl(&dword_19E239000, v4, OS_LOG_TYPE_INFO, "Handle is invitable. Attempting invitation to handle %@ from handle %@ with payload %@", buf, 0x20u);

    }
  }
  v8 = *(_QWORD *)(a1 + 40);
  v7 = *(void **)(a1 + 48);
  v9 = *(void **)(a1 + 32);
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = sub_19E257E74;
  v10[3] = &unk_1E3FB4D70;
  v11 = v9;
  v12 = *(id *)(a1 + 40);
  v13 = *(id *)(a1 + 56);
  objc_copyWeak(&v14, (id *)(a1 + 64));
  objc_msgSend(v7, "inviteHandle:fromSenderHandle:withInvitationPayload:completion:", v11, v8, v3, v10);
  objc_destroyWeak(&v14);

}

void sub_19E257E38(_Unwind_Exception *exception_object, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(exception_object);
    objc_end_catch();
    JUMPOUT(0x19E257D5CLL);
  }
  _Unwind_Resume(exception_object);
}

void sub_19E257E74(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  uint64_t v5;
  NSObject *v6;
  void *v7;
  void *v8;
  id WeakRetained;
  uint64_t v10;
  int v11;
  void *v12;
  __int16 v13;
  void *v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  if (v3)
  {
    IMLogHandleForCategory("IMAvailabilityInvitationManager");
    v4 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      sub_19E36B374(a1, (uint64_t)v3, v4);

    v5 = *(_QWORD *)(a1 + 48);
    if (v5)
      (*(void (**)(uint64_t, uint64_t, _QWORD, id))(v5 + 16))(v5, 1, 0, v3);
  }
  else
  {
    if (IMOSLoggingEnabled())
    {
      OSLogHandleForIMFoundationCategory();
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
      {
        objc_msgSend(*(id *)(a1 + 32), "handleString");
        v7 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(*(id *)(a1 + 40), "handleString");
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        v11 = 138412546;
        v12 = v7;
        v13 = 2112;
        v14 = v8;
        _os_log_impl(&dword_19E239000, v6, OS_LOG_TYPE_INFO, "Handle was succesffully invited: %@ from handle %@", (uint8_t *)&v11, 0x16u);

      }
    }
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
    objc_msgSend(WeakRetained, "_republishCurrentAvailabilityStatus");

    v10 = *(_QWORD *)(a1 + 48);
    if (v10)
      (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD))(v10 + 16))(v10, 1, 1, 0);
  }

}

void sub_19E2581CC(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  NSObject *v7;
  unsigned int v8;
  unsigned int v9;
  NSObject *v10;
  int v11;
  uint64_t v12;
  __int16 v13;
  uint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  if (v6)
  {
    IMLogHandleForCategory("IMAvailabilityInvitationManager");
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      sub_19E36B448();

    (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  }
  else
  {
    v8 = objc_msgSend(v5, "isInvitable");
    v9 = objc_msgSend(v5, "wasRemoved");
    if (IMOSLoggingEnabled())
    {
      OSLogHandleForIMFoundationCategory();
      v10 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
      {
        v11 = 134218240;
        v12 = v8;
        v13 = 2048;
        v14 = v9;
        _os_log_impl(&dword_19E239000, v10, OS_LOG_TYPE_INFO, "Determined invitability. isInvitable: %ld, wasRemoved %ld", (uint8_t *)&v11, 0x16u);
      }

    }
    (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  }

}

void sub_19E2585C4(uint64_t a1, int a2, void *a3)
{
  id v5;
  int v6;
  NSObject *v7;
  void *v8;
  void *v9;
  NSObject *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  int v15;
  void *v16;
  __int16 v17;
  void *v18;
  __int16 v19;
  id v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v5 = a3;
  v6 = IMOSLoggingEnabled();
  if (!v5)
  {
    if (a2)
    {
      if (!v6)
        goto LABEL_16;
      OSLogHandleForIMFoundationCategory();
      v10 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
      {
        objc_msgSend(*(id *)(a1 + 32), "handleString");
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(*(id *)(a1 + 40), "handleString");
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        v15 = 138412546;
        v16 = v11;
        v17 = 2112;
        v18 = v12;
        _os_log_impl(&dword_19E239000, v10, OS_LOG_TYPE_INFO, "Determined focus status is shared with handle: %@ fromHandle: %@", (uint8_t *)&v15, 0x16u);

      }
    }
    else
    {
      if (!v6)
        goto LABEL_16;
      OSLogHandleForIMFoundationCategory();
      v10 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
      {
        objc_msgSend(*(id *)(a1 + 32), "handleString");
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(*(id *)(a1 + 40), "handleString");
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        v15 = 138412546;
        v16 = v13;
        v17 = 2112;
        v18 = v14;
        _os_log_impl(&dword_19E239000, v10, OS_LOG_TYPE_INFO, "Determined focus status is NOT shared with handle: %@ fromHandle: %@", (uint8_t *)&v15, 0x16u);

      }
    }

    goto LABEL_16;
  }
  if (v6)
  {
    OSLogHandleForIMFoundationCategory();
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      objc_msgSend(*(id *)(a1 + 32), "handleString");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(*(id *)(a1 + 40), "handleString");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      v15 = 138412802;
      v16 = v8;
      v17 = 2112;
      v18 = v9;
      v19 = 2112;
      v20 = v5;
      _os_log_impl(&dword_19E239000, v7, OS_LOG_TYPE_INFO, "Error checking if handle is already invited: %@ fromHandle: %@. Error: %@", (uint8_t *)&v15, 0x20u);

    }
  }
LABEL_16:
  (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();

}

void sub_19E258828(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x19E2587DCLL);
  }
  _Unwind_Resume(a1);
}

void sub_19E2589C4(uint64_t a1)
{
  id WeakRetained;
  void *v3;
  void *v4;
  void *v5;
  id v6;
  void *v7;
  NSObject *v8;
  void *v9;
  id v10;
  NSObject *v11;
  int v12;
  id v13;
  uint64_t v14;
  void *v15;
  void *v16;
  void *v17;
  id v18;
  id v19;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  objc_msgSend(WeakRetained, "_dndHandleForHandleID:", *(_QWORD *)(a1 + 32));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = (void *)objc_msgSend(WeakRetained, "_newDNDModeConfigurationService");
  v19 = 0;
  objc_msgSend(v4, "allowedModesForContactHandle:error:", v3, &v19);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = v19;
  if (!v6)
  {
    if ((objc_opt_respondsToSelector() & 1) != 0)
    {
      v18 = 0;
      objc_msgSend(v4, "silencedModesForContactHandle:error:", v3, &v18);
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      v10 = v18;
      if (v10)
      {
        v7 = v10;
        IMLogHandleForCategory("IMDAvailabilityAutoReplier");
        v11 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
          sub_19E36B4D4();

        (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
        goto LABEL_15;
      }
    }
    else
    {
      v9 = 0;
    }
    v12 = objc_msgSend(*(id *)(a1 + 56), "instancesRespondToSelector:", sel_initWithAvailableDuringActivityIdentifiers_unavailableDuringActivityIdentifiers_);
    v13 = objc_alloc(*(Class *)(a1 + 56));
    if (v12)
      v14 = objc_msgSend(v13, "initWithAvailableDuringActivityIdentifiers:unavailableDuringActivityIdentifiers:", v5, v9);
    else
      v14 = objc_msgSend(v13, "initWithAvailableDuringActivityIdentifiers:", v5);
    v15 = (void *)v14;
    objc_msgSend(MEMORY[0x1E0C99D68], "__im_dateWithCurrentServerTime");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v15, "statusKitInvitationPayloadWithDateCreated:", v16);
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();

    v7 = 0;
LABEL_15:

    goto LABEL_16;
  }
  v7 = v6;
  IMLogHandleForCategory("IMDAvailabilityAutoReplier");
  v8 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    sub_19E36B534();

  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
LABEL_16:

}

void sub_19E258D28(uint64_t a1)
{
  NSObject *v2;
  id WeakRetained;
  void *v4;
  void *v5;
  id v6;
  NSObject *v7;
  id v8;
  uint8_t buf[4];
  void *v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  if (IMOSLoggingEnabled())
  {
    OSLogHandleForIMFoundationCategory();
    v2 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_19E239000, v2, OS_LOG_TYPE_INFO, "Republishing current availability status, so the newly invited handle is able to decrypt the published value", buf, 2u);
    }

  }
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v4 = (void *)objc_msgSend(WeakRetained, "_newDNDModeConfigurationService");

  v8 = 0;
  objc_msgSend(v4, "publishCurrentStatusKitAvailabilityReturningError:", &v8);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = v8;
  if (v6)
  {
    IMLogHandleForCategory("IMAvailabilityInvitationManager");
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      sub_19E36B5EC();
LABEL_12:

    goto LABEL_13;
  }
  if (IMOSLoggingEnabled())
  {
    OSLogHandleForIMFoundationCategory();
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138412290;
      v10 = v5;
      _os_log_impl(&dword_19E239000, v7, OS_LOG_TYPE_INFO, "Republished status following an invitation. StatusIdentifier: %@", buf, 0xCu);
    }
    goto LABEL_12;
  }
LABEL_13:

}

void sub_19E2593B0(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 0xCu);
}

void sub_19E2593C0(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 2u);
}

void sub_19E2593F8(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
  va_list va;

  va_start(va, a4);
  _os_log_error_impl(a1, log, OS_LOG_TYPE_ERROR, a4, (uint8_t *)va, 0x16u);
}

void sub_19E25960C()
{
  id v0;
  void *v1;

  v0 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  v1 = (void *)qword_1EE503888;
  qword_1EE503888 = (uint64_t)v0;

}

void sub_19E259A10(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19E259C4C(_Unwind_Exception *a1)
{
  uint64_t v1;

  objc_destroyWeak((id *)(v1 - 40));
  _Unwind_Resume(a1);
}

void sub_19E259C60(uint64_t a1)
{
  id WeakRetained;
  double v3;
  id v4;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v4 = WeakRetained;
    objc_msgSend(WeakRetained, "timerStart");
    WeakRetained = v4;
    if (v3 == *(double *)(a1 + 40))
    {
      objc_msgSend(v4, "_handleTimeout:", 0);
      WeakRetained = v4;
    }
  }

}

void sub_19E259E4C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19E259EBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_19E259F10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_19E25A050(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19E25A0C8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19E25A15C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_19E25A1C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_19E25A2FC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_19E25A310(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_invokeCompletion:userInfo:error:", 1, *(_QWORD *)(a1 + 40), 0);
}

void sub_19E25A528(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19E25AA04(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19E25AAA4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19E25AB6C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19E25AC54(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19E25ADD4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

IMINInteractionUtilities *sub_19E25AE48()
{
  IMINInteractionUtilities *result;

  result = objc_alloc_init(IMINInteractionUtilities);
  qword_1ECFC7560 = (uint64_t)result;
  return result;
}

void sub_19E25B034(uint64_t a1, uint64_t a2)
{
  int v4;
  NSObject *v5;
  uint64_t v6;
  const char *v7;
  NSObject *v8;
  uint32_t v9;
  NSObject *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  __int16 v14;
  uint64_t v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v4 = IMOSLoggingEnabled();
  if (a2)
  {
    if (v4)
    {
      v5 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
      {
        v6 = *(_QWORD *)(a1 + 32);
        v12 = 138412546;
        v13 = v6;
        v14 = 2112;
        v15 = a2;
        v7 = "Failed deleting INInteractions with chat guids %@ with error %@";
        v8 = v5;
        v9 = 22;
LABEL_8:
        _os_log_impl(&dword_19E239000, v8, OS_LOG_TYPE_INFO, v7, (uint8_t *)&v12, v9);
      }
    }
  }
  else if (v4)
  {
    v10 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      v11 = *(_QWORD *)(a1 + 32);
      v12 = 138412290;
      v13 = v11;
      v7 = "Successfully deleted INInteractions with chat guids %@";
      v8 = v10;
      v9 = 12;
      goto LABEL_8;
    }
  }
}

void sub_19E25B2B0(uint64_t a1, uint64_t a2)
{
  int v4;
  NSObject *v5;
  uint64_t v6;
  const char *v7;
  NSObject *v8;
  uint32_t v9;
  NSObject *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  __int16 v14;
  uint64_t v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v4 = IMOSLoggingEnabled();
  if (a2)
  {
    if (v4)
    {
      v5 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
      {
        v6 = *(_QWORD *)(a1 + 32);
        v12 = 138412546;
        v13 = v6;
        v14 = 2112;
        v15 = a2;
        v7 = "Failed deleting INInteractions with message guids %@ with error %@";
        v8 = v5;
        v9 = 22;
LABEL_8:
        _os_log_impl(&dword_19E239000, v8, OS_LOG_TYPE_INFO, v7, (uint8_t *)&v12, v9);
      }
    }
  }
  else if (v4)
  {
    v10 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      v11 = *(_QWORD *)(a1 + 32);
      v12 = 138412290;
      v13 = v11;
      v7 = "Successfully deleted INInteractions with message guids %@";
      v8 = v10;
      v9 = 12;
      goto LABEL_8;
    }
  }
}

uint64_t sub_19E25B420()
{
  return MEMORY[0x1E0DE7D20](MEMORY[0x1E0C99D50], sel___imDataWithHexString_);
}

uint64_t sub_19E25B434()
{
  return IMGetCachedDomainBoolForKey();
}

void sub_19E25B488()
{
  IMPowerLog *v0;
  void *v1;

  v0 = objc_alloc_init(IMPowerLog);
  v1 = (void *)qword_1ECFC7568;
  qword_1ECFC7568 = (uint64_t)v0;

}

void *sub_19E25B534()
{
  void *result;

  result = (void *)MEMORY[0x1A1AE7D58]("PLLogRegisteredEvent", CFSTR("PowerLog"));
  off_1ECFC6BB0 = result;
  return result;
}

BOOL IMFileSizeForItemAtPath(void *a1, off_t *a2, int a3, _QWORD *a4)
{
  id v7;
  void *v8;
  id v9;
  const char *v10;
  int v11;
  _BOOL8 v12;
  uint64_t v13;
  void *v14;
  void *v15;
  void *v16;
  NSObject *v17;
  NSObject *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  void *v27;
  const __CFString **v28;
  uint64_t *v29;
  NSObject *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  NSObject *v40;
  void *v41;
  void *v42;
  void *v43;
  blkcnt_t v44;
  stat v45;
  uint64_t v46;
  void *v47;
  uint64_t v48;
  void *v49;
  uint64_t v50;
  const __CFString *v51;
  uint64_t v52;
  _QWORD v53[2];

  v53[1] = *MEMORY[0x1E0C80C00];
  v7 = a1;
  v8 = v7;
  if (!a2)
  {
    IMLogHandleForCategory("IMFileSize");
    v18 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
      sub_19E36B64C(v18, v19, v20, v21, v22, v23, v24, v25);

    if (!a4)
      goto LABEL_19;
    v26 = (void *)MEMORY[0x1E0CB35C8];
    v52 = *MEMORY[0x1E0CB2D50];
    v53[0] = CFSTR("nil fileSize passed to IMFileSizeForItemAtPath");
    v27 = (void *)MEMORY[0x1E0C99D80];
    v28 = (const __CFString **)v53;
    v29 = &v52;
LABEL_18:
    objc_msgSend(v27, "dictionaryWithObjects:forKeys:count:", v28, v29, 1);
    v38 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v26, "errorWithDomain:code:userInfo:", CFSTR("IMSharedUtilitiesFileSizeErrorDomain"), -50, v38);
    *a4 = (id)objc_claimAutoreleasedReturnValue();

LABEL_19:
    v12 = 0;
    goto LABEL_20;
  }
  *a2 = 0;
  a2[1] = 0;
  if (!v7)
  {
    IMLogHandleForCategory("IMFileSize");
    v30 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
      sub_19E36B680(v30, v31, v32, v33, v34, v35, v36, v37);

    if (!a4)
      goto LABEL_19;
    v26 = (void *)MEMORY[0x1E0CB35C8];
    v50 = *MEMORY[0x1E0CB2D50];
    v51 = CFSTR("nil path passed to IMFileSizeForItemAtPath");
    v27 = (void *)MEMORY[0x1E0C99D80];
    v28 = &v51;
    v29 = &v50;
    goto LABEL_18;
  }
  v9 = objc_retainAutorelease(v7);
  v10 = (const char *)objc_msgSend(v9, "fileSystemRepresentation");
  if (!v10)
  {
    IMLogHandleForCategory("IMFileSize");
    v40 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v40, OS_LOG_TYPE_ERROR))
      sub_19E36B6B4((uint64_t)v9, v40);

    if (a4)
    {
      v41 = (void *)MEMORY[0x1E0CB35C8];
      v48 = *MEMORY[0x1E0CB2D50];
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Failed to get fileSystemRepresentation for path: %@"), v9);
      v42 = (void *)objc_claimAutoreleasedReturnValue();
      v49 = v42;
      objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v49, &v48, 1);
      v43 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v41, "errorWithDomain:code:userInfo:", CFSTR("IMSharedUtilitiesFileSizeErrorDomain"), -50, v43);
      *a4 = (id)objc_claimAutoreleasedReturnValue();

    }
    goto LABEL_19;
  }
  memset(&v45, 0, sizeof(v45));
  v11 = stat(v10, &v45);
  v12 = v11 == 0;
  if (v11)
  {
    v13 = *__error();
    if (a4)
    {
      v14 = (void *)MEMORY[0x1E0CB35C8];
      v46 = *MEMORY[0x1E0CB2D50];
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("sys/stat returned error %d (%s) while getting info for file at path: %@"), v13, strerror(v13), v9);
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      v47 = v15;
      objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v47, &v46, 1);
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v14, "errorWithDomain:code:userInfo:", CFSTR("IMSharedUtilitiesFileSizeErrorDomain"), v13, v16);
      *a4 = (id)objc_claimAutoreleasedReturnValue();

    }
    IMLogHandleForCategory("IMFileSize");
    v17 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
      sub_19E36B728(v13, (uint64_t)v9, v17);

  }
  else if ((v45.st_mode & 0xF000) == 0xA000 && a3)
  {
    *a2 = 0;
    a2[1] = 0;
  }
  else
  {
    v44 = v45.st_blocks << 9;
    *a2 = v45.st_size;
    a2[1] = v44;
  }
LABEL_20:

  return v12;
}

uint64_t sub_19E25C2D4(void *a1, uint64_t a2, void *a3)
{
  void *v4;
  id v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;

  v4 = (void *)MEMORY[0x1E0CB3500];
  v5 = a3;
  objc_msgSend(v4, "controlCharacterSet");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(a1, "stringByTrimmingCharactersInSet:", v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(MEMORY[0x1E0CB3500], "controlCharacterSet");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "stringByTrimmingCharactersInSet:", v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  if (IMStringIsEmail())
  {
    v10 = objc_msgSend(v7, "isEqualToString:", v9);
  }
  else
  {
    if (!MEMORY[0x1A1AE7D10](v9))
    {
      v11 = 0;
      goto LABEL_7;
    }
    v10 = objc_msgSend(v7, "isEqualToPhoneNumber:", v9);
  }
  v11 = v10;
LABEL_7:

  return v11;
}

IMBlockListPerson *sub_19E25C3A8(uint64_t a1)
{
  void *v2;
  void *v3;
  IMBlockListPerson *v4;

  +[IMContactStore sharedInstance](IMContactStore, "sharedInstance");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "fetchCNContactForHandleWithID:", a1);
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  v4 = -[IMBlockListPerson initWithCNContact:]([IMBlockListPerson alloc], "initWithCNContact:", v3);
  return v4;
}

id sub_19E25C40C(void *a1, uint64_t a2, void *a3)
{
  id v4;
  char v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t i;
  void *v15;
  void *v16;
  void *v17;
  char isKindOfClass;
  void *v19;
  void *v20;
  void *v21;
  int v22;
  char v23;
  void *v24;
  int v25;
  void *v26;
  void *v27;
  id v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  _BYTE v34[128];
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  if (v4)
  {
    v5 = MEMORY[0x1A1AE7D10](a1);
    objc_msgSend(v4, "cnPerson");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = v6;
    if ((v5 & 1) != 0)
      objc_msgSend(v6, "phoneNumbers");
    else
      objc_msgSend(v6, "emailAddresses");
    v9 = (void *)objc_claimAutoreleasedReturnValue();

    v32 = 0u;
    v33 = 0u;
    v30 = 0u;
    v31 = 0u;
    v10 = v9;
    v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v30, v34, 16);
    if (v11)
    {
      v12 = v11;
      v29 = v4;
      v13 = *(_QWORD *)v31;
      while (2)
      {
        for (i = 0; i != v12; ++i)
        {
          if (*(_QWORD *)v31 != v13)
            objc_enumerationMutation(v10);
          v15 = *(void **)(*((_QWORD *)&v30 + 1) + 8 * i);
          objc_msgSend(v15, "label");
          v16 = (void *)objc_claimAutoreleasedReturnValue();

          if (v16)
          {
            objc_msgSend(v15, "value");
            v17 = (void *)objc_claimAutoreleasedReturnValue();
            objc_opt_class();
            isKindOfClass = objc_opt_isKindOfClass();

            objc_msgSend(v15, "value");
            v19 = (void *)objc_claimAutoreleasedReturnValue();
            v20 = v19;
            if ((isKindOfClass & 1) != 0)
            {
              objc_msgSend(v19, "stringValue");
              v21 = (void *)objc_claimAutoreleasedReturnValue();
              v22 = objc_msgSend(a1, "isEqualToBlockListAddress:", v21);

              if (v22)
                goto LABEL_20;
            }
            else
            {
              objc_opt_class();
              v23 = objc_opt_isKindOfClass();

              if ((v23 & 1) != 0)
              {
                objc_msgSend(v15, "value");
                v24 = (void *)objc_claimAutoreleasedReturnValue();
                v25 = objc_msgSend(a1, "isEqualToBlockListAddress:", v24);

                if (v25)
                {
LABEL_20:
                  v26 = (void *)MEMORY[0x1E0C97338];
                  objc_msgSend(v15, "label");
                  v27 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(v26, "localizedStringForLabel:", v27);
                  v8 = (void *)objc_claimAutoreleasedReturnValue();

                  goto LABEL_21;
                }
              }
            }
          }
        }
        v12 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v30, v34, 16);
        if (v12)
          continue;
        break;
      }
      v8 = 0;
LABEL_21:
      v4 = v29;
    }
    else
    {
      v8 = 0;
    }

  }
  else
  {
    v8 = 0;
  }

  return v8;
}

id sub_19E25C67C(void *a1, uint64_t a2, void *a3)
{
  id v4;
  id v5;
  id v6;
  uint64_t v7;
  void *i;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v5 = a1;
  v6 = (id)objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
  if (v6)
  {
    v7 = *(_QWORD *)v12;
    while (2)
    {
      for (i = 0; i != v6; i = (char *)i + 1)
      {
        if (*(_QWORD *)v12 != v7)
          objc_enumerationMutation(v5);
        v9 = *(void **)(*((_QWORD *)&v11 + 1) + 8 * (_QWORD)i);
        if (MEMORY[0x1A1AE7D10](v9)
          && (objc_msgSend(v4, "isEqualToPhoneNumber:", v9, (_QWORD)v11) & 1) != 0)
        {
          v6 = v9;
          goto LABEL_12;
        }
      }
      v6 = (id)objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      if (v6)
        continue;
      break;
    }
  }
LABEL_12:

  return v6;
}

void sub_19E25CDF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_19E25CE14(uint64_t a1)
{
  id *v1;
  id WeakRetained;
  id v3;
  id v4;

  v1 = (id *)(a1 + 32);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "setImBlockItemList:", 0);

  objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter");
  v4 = (id)objc_claimAutoreleasedReturnValue();
  v3 = objc_loadWeakRetained(v1);
  objc_msgSend(v4, "postNotificationName:object:", CFSTR("IMBlockListControllerListDidChangeNotification"), v3);

}

void sub_19E25D08C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_19E25D0B0(uint64_t a1)
{
  id *v1;
  id WeakRetained;
  id v3;
  id v4;

  v1 = (id *)(a1 + 32);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "setImBlockItemList:", 0);

  objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter");
  v4 = (id)objc_claimAutoreleasedReturnValue();
  v3 = objc_loadWeakRetained(v1);
  objc_msgSend(v4, "postNotificationName:object:", CFSTR("IMBlockListControllerListDidChangeNotification"), v3);

}

uint64_t sub_19E25DFA4(void *a1, uint64_t a2, void *a3)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v4 = (void *)objc_msgSend(a1, "stringByDeletingPathExtension");
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v5 = objc_msgSend(a3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
  if (!v5)
    return 0;
  v6 = v5;
  v7 = *(_QWORD *)v12;
LABEL_3:
  v8 = 0;
  while (1)
  {
    if (*(_QWORD *)v12 != v7)
      objc_enumerationMutation(a3);
    v9 = objc_msgSend(v4, "stringByAppendingPathExtension:", *(_QWORD *)(*((_QWORD *)&v11 + 1) + 8 * v8));
    if ((objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager"), "fileExistsAtPath:", v9) & 1) != 0)
      return v9;
    if (v6 == ++v8)
    {
      v6 = objc_msgSend(a3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      if (v6)
        goto LABEL_3;
      return 0;
    }
  }
}

BOOL sub_19E25E0BC(void *a1)
{
  void *v2;

  if ((objc_msgSend((id)objc_msgSend(a1, "pathExtension"), "isEqualToString:", CFSTR("MOV")) & 1) != 0
    || objc_msgSend((id)objc_msgSend(a1, "pathExtension"), "isEqualToString:", CFSTR("mov")))
  {
    v2 = &unk_1E3FFEDB0;
  }
  else
  {
    v2 = &unk_1E3FFEDC8;
  }
  return objc_msgSend(a1, "_im_filePathWithPossibleAlternateExtensions:", v2) != 0;
}

uint64_t sub_19E25E130(void *a1)
{
  if ((objc_msgSend((id)objc_msgSend(a1, "pathExtension"), "isEqualToString:", CFSTR("MOV")) & 1) != 0
    || objc_msgSend((id)objc_msgSend(a1, "pathExtension"), "isEqualToString:", CFSTR("mov")))
  {
    return objc_msgSend(a1, "_im_filePathWithPossibleAlternateExtensions:", &unk_1E3FFEDE0);
  }
  else
  {
    return 0;
  }
}

uint64_t sub_19E25E194(void *a1)
{
  if ((objc_msgSend((id)objc_msgSend(a1, "pathExtension"), "isEqualToString:", CFSTR("MOV")) & 1) != 0
    || (objc_msgSend((id)objc_msgSend(a1, "pathExtension"), "isEqualToString:", CFSTR("mov")) & 1) != 0)
  {
    return 0;
  }
  else
  {
    return objc_msgSend(a1, "_im_filePathWithPossibleAlternateExtensions:", &unk_1E3FFEDF8);
  }
}

BOOL sub_19E25E1F8(void *a1, uint64_t a2, int a3)
{
  uint64_t v3;
  const char *v4;
  int v5;
  NSObject *v6;
  int *v7;
  char *v8;
  int v9;
  int v10;
  NSObject *v11;
  int *v12;
  char *v13;
  const char *v14;
  uint64_t v15;
  int *v16;
  char *v17;
  uint64_t v19;
  uint8_t buf[4];
  const char *v21;
  __int16 v22;
  _BYTE v23[14];
  __int16 v24;
  char *v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v3 = 67593;
  if (!a3)
    v3 = 0;
  v19 = v3;
  v4 = (const char *)objc_msgSend(a1, "fileSystemRepresentation");
  v5 = open(v4, 0);
  if (v5 < 0)
  {
    if (IMOSLoggingEnabled())
    {
      v6 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
      {
        v7 = __error();
        v8 = strerror(*v7);
        *(_DWORD *)buf = 136315394;
        v21 = v4;
        v22 = 2080;
        *(_QWORD *)v23 = v8;
        _os_log_impl(&dword_19E239000, v6, OS_LOG_TYPE_INFO, " Can't open %s : %s\n", buf, 0x16u);
      }
    }
  }
  v9 = ffsctl(v5, 0xC0084A44uLL, &v19, 0);
  v10 = IMOSLoggingEnabled();
  if (v9)
  {
    if (v10)
    {
      v11 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
      {
        v12 = __error();
        v13 = strerror(*v12);
        *(_DWORD *)buf = 136315906;
        v21 = v4;
        v22 = 1024;
        *(_DWORD *)v23 = v9;
        *(_WORD *)&v23[4] = 2080;
        *(_QWORD *)&v23[6] = v13;
        v24 = 2048;
        v25 = (char *)v19;
        v14 = "Failed to mark %s as purgeable %d (%s) (flags 0x%llx)\n";
LABEL_14:
        _os_log_impl(&dword_19E239000, v11, OS_LOG_TYPE_INFO, v14, buf, 0x26u);
      }
    }
  }
  else if (v10)
  {
    v11 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      v15 = v19;
      v16 = __error();
      v17 = strerror(*v16);
      *(_DWORD *)buf = 136315906;
      v21 = v4;
      v22 = 2048;
      *(_QWORD *)v23 = v15;
      *(_WORD *)&v23[8] = 1024;
      *(_DWORD *)&v23[10] = 0;
      v24 = 2080;
      v25 = v17;
      v14 = "Marked %s purgeable with flags 0x%llx returned %d (%s)\n";
      goto LABEL_14;
    }
  }
  close(v5);
  return v9 == 0;
}

void sub_19E25E430(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x19E25E3E8);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_19E25E46C(void *a1)
{
  __CFString **v2;
  __CFString *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  NSObject *v7;
  NSObject *v8;
  NSObject *v9;
  NSObject *v10;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE buf[24];
  void *v17;
  uint64_t *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v12 = 0;
  v13 = &v12;
  v14 = 0x2020000000;
  v2 = (__CFString **)qword_1ECFC6D70;
  v15 = qword_1ECFC6D70;
  if (!qword_1ECFC6D70)
  {
    *(_QWORD *)buf = MEMORY[0x1E0C809B0];
    *(_QWORD *)&buf[8] = 3221225472;
    *(_QWORD *)&buf[16] = sub_19E25E850;
    v17 = &unk_1E3FB4F80;
    v18 = &v12;
    sub_19E25E850((uint64_t)buf);
    v2 = (__CFString **)v13[3];
  }
  _Block_object_dispose(&v12, 8);
  if (!v2)
  {
    sub_19E36B7D8();
    __break(1u);
  }
  if (*v2)
    v3 = *v2;
  else
    v3 = CFSTR("pvt");
  v4 = (void *)objc_msgSend(a1, "stringByDeletingLastPathComponent");
  v5 = (void *)objc_msgSend(v4, "stringByAppendingPathComponent:", objc_msgSend(v4, "im_lastPathComponent"));
  v6 = objc_msgSend(v5, "stringByAppendingPathExtension:", v3);
  if (IMOSLoggingEnabled())
  {
    v7 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138412546;
      *(_QWORD *)&buf[4] = v6;
      *(_WORD *)&buf[12] = 2112;
      *(_QWORD *)&buf[14] = a1;
      _os_log_impl(&dword_19E239000, v7, OS_LOG_TYPE_INFO, "First try: Trying to check existence of live photo bundle at path %@, transfer %@", buf, 0x16u);
    }
  }
  if ((objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager"), "fileExistsAtPath:", v6) & 1) != 0)
    goto LABEL_27;
  v6 = objc_msgSend(v5, "stringByAppendingPathExtension:", -[__CFString uppercaseString](v3, "uppercaseString"));
  if (IMOSLoggingEnabled())
  {
    v8 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138412546;
      *(_QWORD *)&buf[4] = v6;
      *(_WORD *)&buf[12] = 2112;
      *(_QWORD *)&buf[14] = a1;
      _os_log_impl(&dword_19E239000, v8, OS_LOG_TYPE_INFO, "Second try: Trying to check existence of live photo bundle at path %@, transfer %@", buf, 0x16u);
    }
  }
  if ((objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager"), "fileExistsAtPath:", v6) & 1) != 0)
  {
LABEL_27:
    if (v6)
    {
      if (IMOSLoggingEnabled())
      {
        v9 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 138412546;
          *(_QWORD *)&buf[4] = v6;
          *(_WORD *)&buf[12] = 2112;
          *(_QWORD *)&buf[14] = a1;
          _os_log_impl(&dword_19E239000, v9, OS_LOG_TYPE_INFO, "Found live photo bundle at path %@, transfer %@", buf, 0x16u);
        }
      }
    }
  }
  else
  {
    if (IMOSLoggingEnabled())
    {
      v10 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412290;
        *(_QWORD *)&buf[4] = a1;
        _os_log_impl(&dword_19E239000, v10, OS_LOG_TYPE_INFO, "Failed to find live photo bundle for transfer %@", buf, 0xCu);
      }
    }
    return 0;
  }
  return v6;
}

BOOL sub_19E25E7F0(void *a1)
{
  return !objc_msgSend(a1, "caseInsensitiveCompare:", CFSTR("CAF"))
      || !objc_msgSend(a1, "caseInsensitiveCompare:", CFSTR("AMR"))
      || objc_msgSend(a1, "caseInsensitiveCompare:", CFSTR("M4A")) == 0;
}

void *sub_19E25E850(uint64_t a1)
{
  void *v2;
  void *result;
  void *v4;

  if (qword_1ECFC6D80)
  {
    v2 = (void *)qword_1ECFC6D80;
  }
  else
  {
    qword_1ECFC6D80 = _sl_dlopen();
    v2 = (void *)qword_1ECFC6D80;
    if (!qword_1ECFC6D80)
    {
      v4 = (void *)abort_report_np();
      free(v4);
    }
  }
  result = dlsym(v2, "PFLivePhotoBundleExtension");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  qword_1ECFC6D70 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

void sub_19E25FD44(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x19E25FC6CLL);
  }
  _Unwind_Resume(a1);
}

void sub_19E260058(uint64_t a1)
{
  void *v1;
  id v2;

  v1 = *(void **)(a1 + 32);
  objc_msgSend(*(id *)(a1 + 40), "connection");
  v2 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "authorizeForPID:", objc_msgSend(v2, "processIdentifier"));

}

void sub_19E2602E0()
{
  id v0;
  uint64_t v1;
  void *v2;

  v0 = objc_alloc(MEMORY[0x1E0D34358]);
  v1 = objc_msgSend(v0, "initWithService:", *MEMORY[0x1E0D34240]);
  v2 = (void *)qword_1EE503CE0;
  qword_1EE503CE0 = v1;

}

void sub_19E260948(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x19E2608C0);
  }
  _Unwind_Resume(a1);
}

void sub_19E261858(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  IMNicknameEncryptionPlainRecordField *v7;

  v5 = a3;
  v6 = a2;
  v7 = -[IMNicknameEncryptionPlainRecordField initWithFieldName:plainData:]([IMNicknameEncryptionPlainRecordField alloc], "initWithFieldName:plainData:", v6, v5);

  objc_msgSend(*(id *)(a1 + 32), "addObject:", v7);
}

uint64_t sub_19E26259C(uint64_t a1, void *a2, void *a3)
{
  id v4;
  void *v5;
  void *v6;
  uint64_t v7;

  v4 = a3;
  objc_msgSend(a2, "fieldName");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "fieldName");
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  v7 = objc_msgSend(v5, "compare:", v6);
  return v7;
}

uint64_t sub_19E264914()
{
  return 1;
}

uint64_t sub_19E26491C()
{
  return 0;
}

uint64_t IMCloudKitIsEligibleToToggleMiCSwitch()
{
  uint64_t v0;
  NSObject *v1;
  const __CFString *v2;
  int v4;
  const __CFString *v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v0 = IMGetCachedDomainBoolForKeyWithDefaultValue();
  if (IMOSLoggingEnabled())
  {
    OSLogHandleForIMFoundationCategory();
    v1 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v1, OS_LOG_TYPE_INFO))
    {
      v2 = CFSTR("NO");
      if ((_DWORD)v0)
        v2 = CFSTR("YES");
      v4 = 138412290;
      v5 = v2;
      _os_log_impl(&dword_19E239000, v1, OS_LOG_TYPE_INFO, "isEligible to toggle MiC switch returning = %@", (uint8_t *)&v4, 0xCu);
    }

  }
  return v0;
}

void sub_19E265068()
{
  uint64_t v0;
  void *v1;
  _QWORD v2[24];

  v2[23] = *MEMORY[0x1E0C80C00];
  v2[0] = CFSTR("CloudKitSyncingEnabled");
  v2[1] = CFSTR("CloudKitIsSyncing");
  v2[2] = CFSTR("CloudKitIsEligibleForTruthZone");
  v2[3] = CFSTR("CloudKitIsInExitState");
  v2[4] = CFSTR("CloudKitExitDate");
  v2[5] = CFSTR("CloudKitIsRemovedFromBackup");
  v2[6] = CFSTR("CloudKitSyncDate");
  v2[7] = CFSTR("IMCloudKitStartingPeriodicSync");
  v2[8] = CFSTR("IMCloudKitStartingInitialSync");
  v2[9] = CFSTR("IMCloudKitStartingEnabledSettingChange");
  v2[10] = CFSTR("IMCloudKitStartingDisableDevices");
  v2[11] = CFSTR("IMCloudKitSyncControllerSyncStateKey");
  v2[12] = CFSTR("IMCloudKitSyncControllerSyncTypeKey");
  v2[13] = CFSTR("IMCloudKitSyncControllerSyncRecordTypeKey");
  v2[14] = CFSTR("IMCloudKitSyncErrors");
  v2[15] = CFSTR("IMCloudKitSyncPaused");
  v2[16] = CFSTR("IMCloudKitAccountStatusKey");
  v2[17] = CFSTR("IMCloudKitSyncTypeKey");
  v2[18] = CFSTR("IMCloudKitSyncStatusKey");
  v2[19] = CFSTR("IMCloudKitSyncJobStateKey");
  v2[20] = CFSTR("IMCloudKitAnalyticSyncDatesDictionary");
  v2[21] = CFSTR("CloudKitHasAvailableRecordsToDownload");
  v2[22] = CFSTR("CloudKitLastDownloadProgress");
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v2, 23);
  v0 = objc_claimAutoreleasedReturnValue();
  v1 = (void *)qword_1ECFC6BC0;
  qword_1ECFC6BC0 = v0;

}

void sub_19E265218()
{
  void *v0;

  v0 = (void *)qword_1ECFC6BD0;
  qword_1ECFC6BD0 = (uint64_t)&unk_1E3FB46A8;

}

const __CFString *IMStringFromCloudKitSyncStep(unint64_t a1)
{
  if (a1 > 6)
    return &stru_1E3FBBA48;
  else
    return off_1E3FB5090[a1];
}

const __CFString *IMStringFromCloudKitChangingSettingState(unint64_t a1)
{
  if (a1 > 2)
    return &stru_1E3FBBA48;
  else
    return off_1E3FB50C8[a1];
}

const __CFString *IMStringFromIMCloudKitSyncErrorCode(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 9)
    return CFSTR("IMCloudKitSyncErrorCodeNone");
  else
    return off_1E3FB50E0[a1 - 1];
}

const __CFString *IMStringFromIMCloudKitSyncControllerSyncRecordType(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 3)
    return CFSTR("IMCloudKitSyncControllerSyncRecordTypeNone");
  else
    return off_1E3FB5130[a1 - 1];
}

const __CFString *IMStringFromIMCloudKitSyncControllerSyncState(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 3)
    return CFSTR("IMCloudKitSyncControllerSyncStateIdle");
  else
    return off_1E3FB5150[a1 - 1];
}

const __CFString *IMStringFromIMCloudKitSyncControllerSyncType(unint64_t a1)
{
  if (a1 > 2)
    return &stru_1E3FBBA48;
  else
    return off_1E3FB5170[a1];
}

const __CFString *IMStringFromIMCloudKitAccountStatus(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 3)
    return CFSTR("IMCloudKitAccountStatusUnknown");
  else
    return off_1E3FB5188[a1 - 1];
}

const __CFString *IMStringFromIMCloudKitSyncType(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 7)
    return CFSTR("IMCloudKitSyncTypeInitial");
  else
    return off_1E3FB51A8[a1 - 1];
}

const __CFString *IMStringFromIMCloudKitSyncStatus(uint64_t a1)
{
  if (a1 == 1)
    return CFSTR("IMCloudKitSyncStatusStarted");
  else
    return CFSTR("IMCloudKitSyncStatusStopped");
}

id IMCreateSerializedItemsFromArray(void *a1)
{
  id v1;
  id v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _BYTE v16[128];
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (objc_msgSend(v1, "count"))
  {
    v2 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
    v12 = 0u;
    v13 = 0u;
    v14 = 0u;
    v15 = 0u;
    v3 = v1;
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v13;
      do
      {
        v7 = 0;
        do
        {
          if (*(_QWORD *)v13 != v6)
            objc_enumerationMutation(v3);
          v8 = *(void **)(*((_QWORD *)&v12 + 1) + 8 * v7);
          v9 = (void *)MEMORY[0x1A1AE8394](v4);
          objc_msgSend(v8, "dictionaryRepresentation", (_QWORD)v12);
          v10 = (void *)objc_claimAutoreleasedReturnValue();
          if (objc_msgSend(v10, "count"))
            objc_msgSend(v2, "addObject:", v10);

          objc_autoreleasePoolPop(v9);
          ++v7;
        }
        while (v5 != v7);
        v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
        v5 = v4;
      }
      while (v4);
    }

  }
  else
  {
    v2 = 0;
  }

  return v2;
}

id IMCreateItemsFromSerializedArray(void *a1)
{
  id v1;
  id v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  void *v10;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _BYTE v16[128];
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (objc_msgSend(v1, "count"))
  {
    v2 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
    v12 = 0u;
    v13 = 0u;
    v14 = 0u;
    v15 = 0u;
    v3 = v1;
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v13;
      do
      {
        for (i = 0; i != v5; ++i)
        {
          if (*(_QWORD *)v13 != v6)
            objc_enumerationMutation(v3);
          v8 = *(void **)(*((_QWORD *)&v12 + 1) + 8 * i);
          if (objc_msgSend(v8, "count", (_QWORD)v12))
          {
            v9 = (void *)MEMORY[0x1A1AE8394]();
            v10 = (void *)objc_msgSend(objc_alloc(+[IMItem classForMessageItemDictionary:](IMItem, "classForMessageItemDictionary:", v8)), "initWithDictionary:", v8);
            if (v10)
              objc_msgSend(v2, "addObject:", v10);

            objc_autoreleasePoolPop(v9);
          }
        }
        v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
      }
      while (v5);
    }

  }
  else
  {
    v2 = 0;
  }

  return v2;
}

uint64_t IMCanonicalFormOfIDWithSensitivity(void *a1, char a2, char a3)
{
  uint64_t v6;
  int v7;
  int IsEmail;
  char v10;

  v6 = (uint64_t)a1;
  if ((a2 & 2) != 0)
  {
    v6 = objc_msgSend(a1, "stringByReplacingOccurrencesOfString:withString:", CFSTR(" "), &stru_1E3FBBA48);
    if ((a2 & 1) != 0)
      return objc_msgSend(a1, "lowercaseString");
  }
  else if ((a2 & 1) != 0)
  {
    return objc_msgSend(a1, "lowercaseString");
  }
  v7 = MEMORY[0x1A1AE7D10](a1);
  if ((a3 & 2) != 0 && v7)
    v6 = objc_msgSend(a1, "lowercaseString");
  IsEmail = IMStringIsEmail();
  if ((a3 & 1) != 0 && IsEmail)
    v6 = objc_msgSend(a1, "lowercaseString");
  if ((MEMORY[0x1A1AE7D10](a1) & 1) != 0)
    return v6;
  v10 = IMStringIsEmail();
  if ((a3 & 4) == 0 || (v10 & 1) != 0)
    return v6;
  return objc_msgSend(a1, "lowercaseString");
}

void sub_19E266F04(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_19E266F24(void *a1)
{
  objc_begin_catch(a1);
  JUMPOUT(0x19E266ED8);
}

const __CFString *sub_19E268164()
{
  return CFSTR("\uFFFD");
}

void sub_19E268400(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  NSObject *v9;

  _os_log_error_impl(a1, v9, OS_LOG_TYPE_ERROR, a4, &a9, 0xCu);
}

BOOL sub_19E26845C(int a1, CFStringRef inUTI)
{
  return UTTypeConformsTo(inUTI, (CFStringRef)*MEMORY[0x1E0CA5BF8]) != 0;
}

void sub_19E269064(uint64_t a1, void *a2, void *a3)
{
  NSObject *v6;
  uint64_t v7;
  char isKindOfClass;
  void *v9;
  id v10;
  void *v11;
  void *v12;
  CFTypeRef v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  __int128 v19;
  CGImage *v20;
  CGImage *v21;
  NSObject *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  const char *v26;
  NSObject *v27;
  uint32_t v28;
  uint64_t v29;
  void *v30;
  NSObject *v31;
  void *v32;
  NSObject *v33;
  const char *v34;
  NSObject *v35;
  uint64_t v36;
  NSObject *v37;
  uint64_t v38;
  uint64_t v39;
  NSObject *v40;
  uint32_t v41;
  uint64_t v42;
  NSObject *v43;
  uint64_t v44;
  uint64_t v45;
  id v46;
  uint8_t v47[8];
  _BYTE buf[32];
  uint64_t v49;
  uint64_t v50;

  v50 = *MEMORY[0x1E0C80C00];
  if (IMOSLoggingEnabled())
  {
    v6 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      v7 = *(_QWORD *)(a1 + 32);
      *(_DWORD *)buf = 138412290;
      *(_QWORD *)&buf[4] = v7;
      _os_log_impl(&dword_19E239000, v6, OS_LOG_TYPE_INFO, "Received movie preview from BlastDoor for GUID: %@", buf, 0xCu);
    }
  }
  if (!a2 || a3)
  {
    if (a3)
      v42 = objc_msgSend(a3, "copy");
    else
      v42 = objc_msgSend(objc_alloc(MEMORY[0x1E0CB35C8]), "initWithDomain:code:userInfo:", CFSTR("__kIMPreviewGenerationErrorDomain"), 1, 0);
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8) + 40) = v42;
    if (IMOSLoggingEnabled())
    {
      v43 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v43, OS_LOG_TYPE_INFO))
      {
        v44 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8) + 40);
        v45 = *(_QWORD *)(a1 + 32);
        *(_DWORD *)buf = 138412546;
        *(_QWORD *)&buf[4] = v44;
        *(_WORD *)&buf[12] = 2112;
        *(_QWORD *)&buf[14] = v45;
        v26 = "Result is nil or there's an error: %@ for GUID: %@";
        v27 = v43;
        v28 = 22;
        goto LABEL_62;
      }
    }
  }
  else
  {
    MEMORY[0x1A1AE7D4C](CFSTR("BlastDoorVideoPreview"), CFSTR("BlastDoor"));
    isKindOfClass = objc_opt_isKindOfClass();
    if ((isKindOfClass & 1) != 0)
      v9 = a2;
    else
      v9 = 0;
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 24) = 1;
    v46 = 0;
    if ((isKindOfClass & 1) != 0)
    {
      v10 = objc_alloc_init(MEMORY[0x1E0C99E08]);
      v11 = (void *)objc_msgSend(a2, "videoFormat");
      v12 = (void *)objc_msgSend(a2, "audioFormat");
      objc_msgSend(v10, "setValue:forKey:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", objc_msgSend(*(id *)(a1 + 40), "isFromMe")), CFSTR("is_from_me"));
      objc_msgSend(v10, "setValue:forKey:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", objc_msgSend(*(id *)(a1 + 40), "isTrustedSender")), CFSTR("is_trusted_sender"));
      objc_msgSend(v10, "setValue:forKey:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", objc_msgSend(a2, "trackCount")), CFSTR("track_count"));
      if (objc_msgSend(v11, "formatName")
        && objc_msgSend((id)objc_msgSend(v11, "formatName"), "length")
        && objc_msgSend(v11, "codec")
        && objc_msgSend((id)objc_msgSend(v11, "codec"), "length"))
      {
        objc_msgSend(v10, "setValue:forKey:", objc_msgSend(v11, "formatName"), CFSTR("video_format"));
        objc_msgSend(v10, "setValue:forKey:", objc_msgSend(v11, "codec"), CFSTR("video_codec"));
      }
      if (objc_msgSend(v12, "formatName")
        && objc_msgSend((id)objc_msgSend(v12, "formatName"), "length")
        && objc_msgSend(v12, "codec")
        && objc_msgSend((id)objc_msgSend(v12, "codec"), "length"))
      {
        objc_msgSend(v10, "setValue:forKey:", objc_msgSend(v12, "formatName"), CFSTR("audio_format"));
        objc_msgSend(v10, "setValue:forKey:", objc_msgSend(v12, "codec"), CFSTR("audio_codec"));
      }
      -[IMMetricsCollector trackEvent:withDictionary:](+[IMMetricsCollector sharedInstance](IMMetricsCollector, "sharedInstance"), "trackEvent:withDictionary:", CFSTR("com.apple.Messages.IMMetricsCollectorEventMoviePreviewGenerationSuccess"), v10);

    }
    if (objc_msgSend((id)objc_msgSend(v9, "image"), "cgImage")
      && (v13 = CFRetain((CFTypeRef)objc_msgSend((id)objc_msgSend(v9, "image"), "cgImage"))) != 0)
    {
      +[IMImageUtilities imageRefPxSize:](IMImageUtilities, "imageRefPxSize:", v13);
      v14 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8);
      *(_QWORD *)(v14 + 32) = v15;
      *(_QWORD *)(v14 + 40) = v16;
      v17 = *(void **)(a1 + 48);
      v18 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8);
      v49 = *(_QWORD *)(a1 + 128);
      v19 = *(_OWORD *)(a1 + 112);
      *(_OWORD *)buf = *(_OWORD *)(a1 + 96);
      *(_OWORD *)&buf[16] = v19;
      v20 = (CGImage *)objc_msgSend(v17, "newCroppedAndRescaledImageFromImage:constraints:targetPxSize:", v13, buf, *(double *)(v18 + 32), *(double *)(v18 + 40));
      if ((objc_msgSend(v9, "isAutoloop") & 1) != 0)
      {
        v21 = v20;
      }
      else
      {
        v21 = (CGImage *)objc_msgSend(*(id *)(a1 + 48), "newImageWithPlayButtonOverlay:scale:transferGUID:error:", v13, *(_QWORD *)(a1 + 32), *(_QWORD *)(*(_QWORD *)(a1 + 88) + 8) + 40, *(double *)(a1 + 120));
        if (v20)
          CFRelease(v20);
      }
      CFRelease(v13);
      if (v21)
      {
        if (+[IMImageUtilities persistPreviewToDiskCache:previewURL:error:](IMImageUtilities, "persistPreviewToDiskCache:previewURL:error:", v21, *(_QWORD *)(a1 + 56), &v46))
        {
          *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 24) = 1;
          v29 = objc_msgSend((id)objc_msgSend(*(id *)(a1 + 56), "URLByDeletingPathExtension"), "URLByAppendingPathExtension:", CFSTR("plist"));
          v30 = (void *)objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
          objc_msgSend(v30, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", objc_msgSend(v9, "videoIsMonoskiAsset")), CFSTR("IMIsMonoskiAssetKey"));
          if (!objc_msgSend(v30, "count"))
          {
LABEL_55:
            CGImageRelease(v21);
            goto LABEL_63;
          }
          if (IMOSLoggingEnabled())
          {
            v31 = OSLogHandleForIMFoundationCategory();
            if (os_log_type_enabled(v31, OS_LOG_TYPE_INFO))
            {
              *(_WORD *)buf = 0;
              _os_log_impl(&dword_19E239000, v31, OS_LOG_TYPE_INFO, "Writing preview metadata", buf, 2u);
            }
          }
          *(_QWORD *)v47 = 0;
          v32 = (void *)objc_msgSend(MEMORY[0x1E0CB38B0], "dataWithPropertyList:format:options:error:", v30, 200, 0, v47);
          if (v32)
          {
            if (objc_msgSend(v32, "writeToURL:atomically:", v29, 1))
            {
              if (!IMOSLoggingEnabled())
                goto LABEL_55;
              v33 = OSLogHandleForIMFoundationCategory();
              if (!os_log_type_enabled(v33, OS_LOG_TYPE_INFO))
                goto LABEL_55;
              *(_DWORD *)buf = 138412290;
              *(_QWORD *)&buf[4] = v29;
              v34 = "Wrote down preview metadata plist to %@";
            }
            else
            {
              if (!IMOSLoggingEnabled())
                goto LABEL_55;
              v33 = OSLogHandleForIMFoundationCategory();
              if (!os_log_type_enabled(v33, OS_LOG_TYPE_INFO))
                goto LABEL_55;
              *(_DWORD *)buf = 138412290;
              *(_QWORD *)&buf[4] = v29;
              v34 = "Couldn't write down preview metadata plist to %@";
            }
          }
          else
          {
            if (!IMOSLoggingEnabled())
              goto LABEL_55;
            v33 = OSLogHandleForIMFoundationCategory();
            if (!os_log_type_enabled(v33, OS_LOG_TYPE_INFO))
              goto LABEL_55;
            *(_DWORD *)buf = 138412290;
            *(_QWORD *)&buf[4] = *(_QWORD *)v47;
            v34 = "Failed making preview metadata plist %@";
          }
          v40 = v33;
          v41 = 12;
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8) + 40) = objc_msgSend(v46, "copy");
          if (!IMOSLoggingEnabled())
            goto LABEL_55;
          v37 = OSLogHandleForIMFoundationCategory();
          if (!os_log_type_enabled(v37, OS_LOG_TYPE_INFO))
            goto LABEL_55;
          v38 = *(_QWORD *)(a1 + 32);
          v39 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8) + 40);
          *(_DWORD *)buf = 138412546;
          *(_QWORD *)&buf[4] = v38;
          *(_WORD *)&buf[12] = 2112;
          *(_QWORD *)&buf[14] = v39;
          v34 = "IMMoviePreviewGenerator: Error persisting movie preview for GUID: %@ to disk: %@";
          v40 = v37;
          v41 = 22;
        }
        _os_log_impl(&dword_19E239000, v40, OS_LOG_TYPE_INFO, v34, buf, v41);
        goto LABEL_55;
      }
      *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8) + 40) = objc_msgSend(objc_alloc(MEMORY[0x1E0CB35C8]), "initWithDomain:code:userInfo:", CFSTR("__kIMPreviewGenerationErrorDomain"), 3, 0);
      if (IMOSLoggingEnabled())
      {
        v35 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v35, OS_LOG_TYPE_INFO))
        {
          v36 = *(_QWORD *)(a1 + 32);
          *(_DWORD *)buf = 138412290;
          *(_QWORD *)&buf[4] = v36;
          v26 = "IMMoviePreviewGenerator: final image ref is nil for GUID: %@";
          v27 = v35;
          v28 = 12;
          goto LABEL_62;
        }
      }
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8) + 40) = objc_msgSend(objc_alloc(MEMORY[0x1E0CB35C8]), "initWithDomain:code:userInfo:", CFSTR("__kIMPreviewGenerationErrorDomain"), 3, 0);
      -[IMMetricsCollector trackEvent:](+[IMMetricsCollector sharedInstance](IMMetricsCollector, "sharedInstance"), "trackEvent:", CFSTR("com.apple.Messages.IMMetricsCollectorEventMoviePreviewGenerationFailure"));
      if (IMOSLoggingEnabled())
      {
        v22 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
        {
          v23 = *(_QWORD *)(a1 + 56);
          v24 = *(_QWORD *)(a1 + 32);
          v25 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8) + 40);
          *(_DWORD *)buf = 138412802;
          *(_QWORD *)&buf[4] = v23;
          *(_WORD *)&buf[12] = 2112;
          *(_QWORD *)&buf[14] = v24;
          *(_WORD *)&buf[22] = 2112;
          *(_QWORD *)&buf[24] = v25;
          v26 = "IMMoviePreviewGenerator: unable to generate image ref for URL: %@ transferGUID: %@ with error: %@";
          v27 = v22;
          v28 = 32;
LABEL_62:
          _os_log_impl(&dword_19E239000, v27, OS_LOG_TYPE_INFO, v26, buf, v28);
        }
      }
    }
  }
LABEL_63:
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 64));
}

void sub_19E269964(void *a1, int a2)
{
  _QWORD *v2;
  id v3;
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  __int16 v11;
  uint64_t v12;
  __int16 v13;
  uint64_t v14;

  if (a2 == 1)
  {
    v3 = objc_begin_catch(a1);
    *(_QWORD *)(*(_QWORD *)(v2[11] + 8) + 40) = v8;
    if (IMOSLoggingEnabled(v3))
    {
      v4 = OSLogHandleForIMFoundationCategory("Warning");
      if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
      {
        v5 = v2[7];
        v6 = v2[4];
        v7 = *(_QWORD *)(*(_QWORD *)(v2[11] + 8) + 40);
        v9 = 138412802;
        v10 = v5;
        v11 = 2112;
        v12 = v6;
        v13 = 2112;
        v14 = v7;
        _os_log_impl(&dword_19E239000, v4, OS_LOG_TYPE_INFO, "IMMoviePreviewGenerator: failed to write image preview for URL %@ GUID: %@ error %@", (uint8_t *)&v9, 0x20u);
      }
    }
    objc_end_catch();
    JUMPOUT(0x19E269908);
  }
  JUMPOUT(0x19E269A44);
}

id sub_19E26AFC8(void *a1)
{
  void *v1;
  void *v2;
  id v3;
  NSObject *v4;

  objc_msgSend(a1, "_dataForKey:");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  if (v1)
  {
    JWDecodeCodableObjectWithStandardAllowlist();
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      v3 = v2;
    }
    else
    {
      IMLogHandleForCategory("IMMessagePartHistoryHistoricalContent");
      v4 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
        sub_19E36BCD4(v4);

      v3 = 0;
    }

  }
  else
  {
    v3 = 0;
  }

  return v3;
}

id sub_19E26B078(void *a1)
{
  void *v1;
  double v2;
  double v3;
  void *v4;

  objc_msgSend(a1, "_numberForKey:");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "doubleValue");
  v3 = v2;

  if (v3 == 0.0)
  {
    v4 = 0;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0C99D68], "dateWithTimeIntervalSinceReferenceDate:", v3);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
  }
  return v4;
}

void sub_19E26B0D4(void *a1, uint64_t a2, void *a3, void *a4)
{
  id v6;
  id v7;
  void *v8;

  v6 = a3;
  v7 = a4;
  JWEncodeCodableObject();
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  if (v8)
  {
    objc_msgSend(a1, "setObject:forKey:", v8, v7);

  }
}

void sub_19E26B1A8(void *a1, uint64_t a2, void *a3, void *a4)
{
  double v6;
  void *v7;
  id v8;

  v8 = a4;
  objc_msgSend(a3, "timeIntervalSinceReferenceDate");
  if (v6 != 0.0)
  {
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(a1, "setObject:forKey:", v7, v8);

  }
}

id sub_19E26B268(id a1, uint64_t a2, void *a3)
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;

  v4 = a3;
  objc_msgSend(v4, "objectForKeyedSubscript:", CFSTR("IMSerializedErrorDomainKey"));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "objectForKeyedSubscript:", CFSTR("IMSerializedErrorCodeKey"));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "objectForKeyedSubscript:", CFSTR("IMSerializedErrorUserInfoKey"));
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  v8 = 0;
  if (v5 && v6)
  {
    a1 = (id)objc_msgSend(a1, "initWithDomain:code:userInfo:", v5, objc_msgSend(v6, "integerValue"), v7);
    v8 = a1;
  }

  return v8;
}

id sub_19E26B32C(void *a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  _QWORD v12[2];
  _QWORD v13[2];
  _QWORD v14[3];
  _QWORD v15[4];

  v15[3] = *MEMORY[0x1E0C80C00];
  objc_msgSend(a1, "userInfo");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = (void *)objc_msgSend(v2, "mutableCopy");

  if (v3)
  {
    v4 = *MEMORY[0x1E0CB3388];
    objc_msgSend(v3, "objectForKeyedSubscript:", *MEMORY[0x1E0CB3388]);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = v5;
    if (v5)
    {
      objc_msgSend(v5, "serializedError_im");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v3, "setObject:forKeyedSubscript:", v7, v4);

    }
    v14[0] = CFSTR("IMSerializedErrorDomainKey");
    objc_msgSend(a1, "domain");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v15[0] = v8;
    v14[1] = CFSTR("IMSerializedErrorCodeKey");
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", objc_msgSend(a1, "code"));
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v14[2] = CFSTR("IMSerializedErrorUserInfoKey");
    v15[1] = v9;
    v15[2] = v3;
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v15, v14, 3);
    v10 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v12[0] = CFSTR("IMSerializedErrorDomainKey");
    objc_msgSend(a1, "domain");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v12[1] = CFSTR("IMSerializedErrorCodeKey");
    v13[0] = v6;
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", objc_msgSend(a1, "code"));
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v13[1] = v8;
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v13, v12, 2);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
  }

  return v10;
}

id sub_19E26B4F8(void *a1)
{
  void *v2;
  uint64_t v3;
  void *v4;
  void *v5;

  v2 = (void *)MEMORY[0x1E0CB3940];
  v3 = objc_msgSend(a1, "code");
  objc_msgSend(a1, "domain");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "stringWithFormat:", CFSTR("%ld: %@"), v3, v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  return v5;
}

id sub_19E26B568(uint64_t a1, uint64_t a2, void *a3)
{
  id v3;
  void *v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  void *v12;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _BYTE v18[128];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v3 = a3;
  v4 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v3, "count"));
  v14 = 0u;
  v15 = 0u;
  v16 = 0u;
  v17 = 0u;
  v5 = v3;
  v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
  if (v6)
  {
    v7 = v6;
    v8 = *(_QWORD *)v15;
    do
    {
      v9 = 0;
      do
      {
        if (*(_QWORD *)v15 != v8)
          objc_enumerationMutation(v5);
        v10 = *(_QWORD *)(*((_QWORD *)&v14 + 1) + 8 * v9);
        v11 = objc_alloc(MEMORY[0x1E0CB35C8]);
        v12 = (void *)objc_msgSend(v11, "initWithSerializedError_im:", v10, (_QWORD)v14);
        objc_msgSend(v4, "addObject:", v12);

        ++v9;
      }
      while (v7 != v9);
      v7 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
    }
    while (v7);
  }

  return v4;
}

id sub_19E26B6B0(uint64_t a1, uint64_t a2, void *a3)
{
  id v3;
  void *v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _BYTE v16[128];
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v3 = a3;
  v4 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v3, "count"));
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  v5 = v3;
  v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
  if (v6)
  {
    v7 = v6;
    v8 = *(_QWORD *)v13;
    do
    {
      v9 = 0;
      do
      {
        if (*(_QWORD *)v13 != v8)
          objc_enumerationMutation(v5);
        objc_msgSend(*(id *)(*((_QWORD *)&v12 + 1) + 8 * v9), "serializedError_im", (_QWORD)v12);
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v4, "addObject:", v10);

        ++v9;
      }
      while (v7 != v9);
      v7 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
    }
    while (v7);
  }

  return v4;
}

void sub_19E26BC3C(uint64_t a1)
{
  sub_19E2424A4(*(void **)(a1 + 32), *(void **)(a1 + 40));
}

void sub_19E26BC48(uint64_t a1)
{
  sub_19E2424A4(*(void **)(a1 + 32), *(void **)(a1 + 40));
}

id sub_19E26BCB8()
{
  if (qword_1EE503AE8 != -1)
    dispatch_once(&qword_1EE503AE8, &unk_1E3FB4248);
  return (id)qword_1EE503AE0;
}

void sub_19E26BCF8()
{
  void *v0;
  void *v1;
  int v2;
  uint64_t v3;
  void *v4;

  objc_msgSend(MEMORY[0x1E0CB34D0], "mainBundle");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "bundleIdentifier");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = objc_msgSend(v1, "isEqualToString:", CFSTR("com.apple.Messages"));

  if (v2)
  {
    objc_msgSend(MEMORY[0x1E0C99EA0], "standardUserDefaults");
    v3 = objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v3 = objc_msgSend(objc_alloc(MEMORY[0x1E0C99EA0]), "initWithSuiteName:", CFSTR("com.apple.Messages"));
  }
  v4 = (void *)qword_1EE503AE0;
  qword_1EE503AE0 = v3;

}

uint64_t IMSharedUtilitiesProtoCloudKitEncryptedMessageReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t result;
  void *String;
  id v25;
  uint64_t v26;
  void *v27;
  void *Data;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  char v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char v38;
  char v39;
  unsigned int v40;
  uint64_t v41;
  unint64_t v42;
  char v43;
  char v44;
  unsigned int v45;
  uint64_t v46;
  unint64_t v47;
  char v48;
  void *v49;
  char v50;
  unsigned int v51;
  uint64_t v52;
  unint64_t v53;
  char v54;
  char v55;
  unsigned int v56;
  uint64_t v57;
  unint64_t v58;
  char v59;
  char v60;
  unsigned int v61;
  uint64_t v62;
  unint64_t v63;
  char v64;
  void *v65;
  char v66;
  unsigned int v67;
  uint64_t v68;
  unint64_t v69;
  char v70;
  char v71;
  unsigned int v72;
  uint64_t v73;
  unint64_t v74;
  char v75;
  uint64_t v76;
  uint64_t v77;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      switch((v10 >> 3))
      {
        case 1u:
          v17 = 0;
          v18 = 0;
          v19 = 0;
          *(_WORD *)(a1 + 140) |= 0x100u;
          while (1)
          {
            v20 = *v3;
            v21 = *(_QWORD *)(a2 + v20);
            if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
              break;
            v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
            *(_QWORD *)(a2 + v20) = v21 + 1;
            v19 |= (unint64_t)(v22 & 0x7F) << v17;
            if ((v22 & 0x80) == 0)
              goto LABEL_95;
            v17 += 7;
            v14 = v18++ >= 9;
            if (v14)
            {
              LODWORD(v19) = 0;
              goto LABEL_97;
            }
          }
          *(_BYTE *)(a2 + *v5) = 1;
LABEL_95:
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v19) = 0;
LABEL_97:
          v76 = 136;
          goto LABEL_131;
        case 2u:
          String = (void *)PBReaderReadString();

          v25 = String;
          v26 = 104;
          goto LABEL_79;
        case 3u:
          v27 = (void *)PBReaderReadString();

          v25 = v27;
          v26 = 88;
          goto LABEL_79;
        case 4u:
          Data = (void *)PBReaderReadData();

          v25 = Data;
          v26 = 96;
          goto LABEL_79;
        case 5u:
          v29 = (void *)PBReaderReadString();

          v25 = v29;
          v26 = 72;
          goto LABEL_79;
        case 6u:
          v30 = (void *)PBReaderReadData();

          v25 = v30;
          v26 = 128;
          goto LABEL_79;
        case 7u:
          v31 = (void *)PBReaderReadData();

          v25 = v31;
          v26 = 112;
          goto LABEL_79;
        case 8u:
          v32 = (void *)PBReaderReadString();

          v25 = v32;
          v26 = 80;
          goto LABEL_79;
        case 9u:
          v33 = 0;
          v34 = 0;
          v35 = 0;
          *(_WORD *)(a1 + 140) |= 0x20u;
          while (2)
          {
            v36 = *v3;
            v37 = *(_QWORD *)(a2 + v36);
            if (v37 == -1 || v37 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v38 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v37);
              *(_QWORD *)(a2 + v36) = v37 + 1;
              v35 |= (unint64_t)(v38 & 0x7F) << v33;
              if (v38 < 0)
              {
                v33 += 7;
                v14 = v34++ >= 9;
                if (v14)
                {
                  v35 = 0;
                  goto LABEL_101;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v35 = 0;
LABEL_101:
          v77 = 48;
          goto LABEL_122;
        case 0xAu:
          v39 = 0;
          v40 = 0;
          v35 = 0;
          *(_WORD *)(a1 + 140) |= 0x10u;
          while (2)
          {
            v41 = *v3;
            v42 = *(_QWORD *)(a2 + v41);
            if (v42 == -1 || v42 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v43 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v42);
              *(_QWORD *)(a2 + v41) = v42 + 1;
              v35 |= (unint64_t)(v43 & 0x7F) << v39;
              if (v43 < 0)
              {
                v39 += 7;
                v14 = v40++ >= 9;
                if (v14)
                {
                  v35 = 0;
                  goto LABEL_105;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v35 = 0;
LABEL_105:
          v77 = 40;
          goto LABEL_122;
        case 0xBu:
          v44 = 0;
          v45 = 0;
          v35 = 0;
          *(_WORD *)(a1 + 140) |= 8u;
          while (2)
          {
            v46 = *v3;
            v47 = *(_QWORD *)(a2 + v46);
            if (v47 == -1 || v47 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v48 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v47);
              *(_QWORD *)(a2 + v46) = v47 + 1;
              v35 |= (unint64_t)(v48 & 0x7F) << v44;
              if (v48 < 0)
              {
                v44 += 7;
                v14 = v45++ >= 9;
                if (v14)
                {
                  v35 = 0;
                  goto LABEL_109;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v35 = 0;
LABEL_109:
          v77 = 32;
          goto LABEL_122;
        case 0xCu:
          v49 = (void *)PBReaderReadData();

          v25 = v49;
          v26 = 120;
          goto LABEL_79;
        case 0xDu:
          v50 = 0;
          v51 = 0;
          v35 = 0;
          *(_WORD *)(a1 + 140) |= 4u;
          while (2)
          {
            v52 = *v3;
            v53 = *(_QWORD *)(a2 + v52);
            if (v53 == -1 || v53 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v54 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v53);
              *(_QWORD *)(a2 + v52) = v53 + 1;
              v35 |= (unint64_t)(v54 & 0x7F) << v50;
              if (v54 < 0)
              {
                v50 += 7;
                v14 = v51++ >= 9;
                if (v14)
                {
                  v35 = 0;
                  goto LABEL_113;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v35 = 0;
LABEL_113:
          v77 = 24;
          goto LABEL_122;
        case 0xEu:
          v55 = 0;
          v56 = 0;
          v35 = 0;
          *(_WORD *)(a1 + 140) |= 2u;
          while (2)
          {
            v57 = *v3;
            v58 = *(_QWORD *)(a2 + v57);
            if (v58 == -1 || v58 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v59 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v58);
              *(_QWORD *)(a2 + v57) = v58 + 1;
              v35 |= (unint64_t)(v59 & 0x7F) << v55;
              if (v59 < 0)
              {
                v55 += 7;
                v14 = v56++ >= 9;
                if (v14)
                {
                  v35 = 0;
                  goto LABEL_117;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v35 = 0;
LABEL_117:
          v77 = 16;
          goto LABEL_122;
        case 0xFu:
          v60 = 0;
          v61 = 0;
          v35 = 0;
          *(_WORD *)(a1 + 140) |= 1u;
          while (2)
          {
            v62 = *v3;
            v63 = *(_QWORD *)(a2 + v62);
            if (v63 == -1 || v63 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v64 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v63);
              *(_QWORD *)(a2 + v62) = v63 + 1;
              v35 |= (unint64_t)(v64 & 0x7F) << v60;
              if (v64 < 0)
              {
                v60 += 7;
                v14 = v61++ >= 9;
                if (v14)
                {
                  v35 = 0;
                  goto LABEL_121;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v35 = 0;
LABEL_121:
          v77 = 8;
LABEL_122:
          *(_QWORD *)(a1 + v77) = v35;
          continue;
        case 0x10u:
          v65 = (void *)PBReaderReadString();

          v25 = v65;
          v26 = 56;
LABEL_79:
          *(_QWORD *)(a1 + v26) = v25;
          continue;
        case 0x11u:
          v66 = 0;
          v67 = 0;
          v19 = 0;
          *(_WORD *)(a1 + 140) |= 0x80u;
          while (2)
          {
            v68 = *v3;
            v69 = *(_QWORD *)(a2 + v68);
            if (v69 == -1 || v69 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v70 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v69);
              *(_QWORD *)(a2 + v68) = v69 + 1;
              v19 |= (unint64_t)(v70 & 0x7F) << v66;
              if (v70 < 0)
              {
                v66 += 7;
                v14 = v67++ >= 9;
                if (v14)
                {
                  LODWORD(v19) = 0;
                  goto LABEL_126;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v19) = 0;
LABEL_126:
          v76 = 68;
          goto LABEL_131;
        case 0x12u:
          v71 = 0;
          v72 = 0;
          v19 = 0;
          *(_WORD *)(a1 + 140) |= 0x40u;
          break;
        default:
          result = PBReaderSkipValueWithTag();
          if (!(_DWORD)result)
            return result;
          continue;
      }
      while (1)
      {
        v73 = *v3;
        v74 = *(_QWORD *)(a2 + v73);
        if (v74 == -1 || v74 >= *(_QWORD *)(a2 + *v4))
          break;
        v75 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v74);
        *(_QWORD *)(a2 + v73) = v74 + 1;
        v19 |= (unint64_t)(v75 & 0x7F) << v71;
        if ((v75 & 0x80) == 0)
          goto LABEL_128;
        v71 += 7;
        v14 = v72++ >= 9;
        if (v14)
        {
          LODWORD(v19) = 0;
          goto LABEL_130;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_128:
      if (*(_BYTE *)(a2 + *v5))
        LODWORD(v19) = 0;
LABEL_130:
      v76 = 64;
LABEL_131:
      *(_DWORD *)(a1 + v76) = v19;
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

id sub_19E26DFB4()
{
  void *v0;
  void **v1;
  void *v2;

  v0 = (void *)qword_1ECFC6D90;
  if (!qword_1ECFC6D90)
  {
    v1 = (void **)MEMORY[0x1A1AE7D58]("DDResultAttributeName", CFSTR("DataDetectorsCore"));
    if (v1)
      v2 = *v1;
    else
      v2 = 0;
    objc_storeStrong((id *)&qword_1ECFC6D90, v2);
    v0 = (void *)qword_1ECFC6D90;
  }
  return v0;
}

id sub_19E26E010(void *a1)
{
  id v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  void *v6;
  _QWORD v8[4];
  id v9;

  v2 = objc_alloc_init(MEMORY[0x1E0CB3788]);
  v3 = *MEMORY[0x1E0D366B8];
  v4 = objc_msgSend(a1, "length");
  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 3221225472;
  v8[2] = sub_19E26E0D4;
  v8[3] = &unk_1E3FB53D0;
  v9 = v2;
  v5 = v2;
  objc_msgSend(a1, "enumerateAttribute:inRange:options:usingBlock:", v3, 0, v4, 0, v8);
  v6 = (void *)objc_msgSend(v5, "copy");

  return v6;
}

void sub_19E26E0D4(uint64_t a1, void *a2)
{
  id v3;

  v3 = a2;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    objc_msgSend(*(id *)(a1 + 32), "addIndex:", objc_msgSend(v3, "unsignedIntegerValue"));

}

id sub_19E26E134(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *v7;
  int v8;

  sub_19E26DFB4();
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = objc_msgSend(a1, "attribute:existsInRange:", v7, a3, a4);

  if (v8)
    objc_msgSend(a1, "dd_attributedSubstringFromRange:", a3, a4);
  else
    objc_msgSend(a1, "attributedSubstringFromRange:", a3, a4);
  return (id)objc_claimAutoreleasedReturnValue();
}

id sub_19E26E1B4(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  _QWORD v6[6];
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, uint64_t);
  void (*v11)(uint64_t);
  id v12;

  if (!a1 || !objc_msgSend(a1, "length"))
    return MEMORY[0x1E0C9AA60];
  v7 = 0;
  v8 = &v7;
  v9 = 0x3032000000;
  v10 = sub_19E24759C;
  v11 = sub_19E2474AC;
  v12 = 0;
  v12 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  v2 = objc_msgSend(a1, "length");
  v3 = *MEMORY[0x1E0D365F0];
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v6[2] = sub_19E26E2C8;
  v6[3] = &unk_1E3FB53F8;
  v6[4] = a1;
  v6[5] = &v7;
  objc_msgSend(a1, "enumerateAttribute:inRange:options:usingBlock:", v3, 0, v2, 0, v6);
  v4 = (void *)objc_msgSend((id)v8[5], "copy");
  _Block_object_dispose(&v7, 8);

  return v4;
}

void sub_19E26E2B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19E26E2C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  id v16;
  id v17;

  if (a2)
  {
    objc_msgSend(*(id *)(a1 + 32), "__im_attributedSubstringFromRange:");
    v16 = (id)objc_claimAutoreleasedReturnValue();
    v7 = *(void **)(a1 + 32);
    sub_19E26DFB4();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    LOBYTE(v7) = objc_msgSend(v7, "attribute:existsInRange:", v8, a3, a4);

    if ((v7 & 1) != 0)
    {
      v9 = v16;
    }
    else
    {
      objc_msgSend(*(id *)(a1 + 32), "attributedSubstringFromRange:", a3, a4);
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v10, "trimmedString");
      v11 = (void *)objc_claimAutoreleasedReturnValue();

      objc_msgSend(v11, "string");
      v9 = v11;
    }
    v17 = v9;
    objc_msgSend(v9, "string");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3500], "whitespaceAndNewlineCharacterSet");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "stringByTrimmingCharactersInSet:", v13);
    v14 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(MEMORY[0x1E0C99E98], "URLWithString:", v14);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    if (v15)
      objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), "addObject:", v15);

  }
}

void sub_19E26E414(void *a1, uint64_t a2, void *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  _QWORD v10[5];
  id v11;
  uint64_t v12;

  v9 = a3;
  v4 = objc_msgSend(a1, "length");
  if (v9)
  {
    if (v4)
    {
      v5 = objc_msgSend(a1, "__im_countMessageParts");
      if (v5)
      {
        v6 = v5;
        v7 = *MEMORY[0x1E0D366B8];
        v8 = objc_msgSend(a1, "length");
        v10[0] = MEMORY[0x1E0C809B0];
        v10[1] = 3221225472;
        v10[2] = sub_19E26E4EC;
        v10[3] = &unk_1E3FB5420;
        v10[4] = a1;
        v12 = v6;
        v11 = v9;
        objc_msgSend(a1, "enumerateAttribute:inRange:options:usingBlock:", v7, 0, v8, 0, v10);

      }
    }
  }

}

void sub_19E26E4EC(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  void *v8;
  id v9;

  v9 = a2;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v7 = objc_msgSend(v9, "unsignedIntegerValue");
  else
    v7 = 0;
  objc_msgSend(*(id *)(a1 + 32), "__im_partDescriptorWithIndex:range:totalPartCount:", v7, a3, a4, *(_QWORD *)(a1 + 48));
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();

}

IMMessagePartDescriptor *sub_19E26E594(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  id v9;
  void *v10;
  IMMessagePartDescriptor *v11;

  if (a6 == 1)
  {
    v9 = a1;
  }
  else
  {
    objc_msgSend(a1, "__im_attributedSubstringFromRange:", a4, a5);
    v9 = (id)objc_claimAutoreleasedReturnValue();
  }
  v10 = v9;
  v11 = -[IMMessagePartDescriptor initWithMessagePartBody:messagePartIndex:messagePartRange:]([IMMessagePartDescriptor alloc], "initWithMessagePartBody:messagePartIndex:messagePartRange:", v9, a3, a4, a5);

  return v11;
}

uint64_t sub_19E26E610(void *a1, uint64_t a2, void *a3)
{
  id v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  NSObject *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v13[6];
  __int128 buf;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  v5 = *MEMORY[0x1E0D366B8];
  objc_msgSend(v4, "attribute:atIndex:effectiveRange:", *MEMORY[0x1E0D366B8], 0, 0);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = objc_msgSend(v6, "integerValue");

  if (IMOSLoggingEnabled())
  {
    OSLogHandleForIMFoundationCategory();
    v8 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", v7);
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      LODWORD(buf) = 138412290;
      *(_QWORD *)((char *)&buf + 4) = v9;
      _os_log_impl(&dword_19E239000, v8, OS_LOG_TYPE_INFO, "Recently Deleted | Found stored part number %@", (uint8_t *)&buf, 0xCu);

    }
  }
  *(_QWORD *)&buf = 0;
  *((_QWORD *)&buf + 1) = &buf;
  v15 = 0x2020000000;
  v16 = 0;
  v10 = objc_msgSend(a1, "length");
  v13[0] = MEMORY[0x1E0C809B0];
  v13[1] = 3221225472;
  v13[2] = sub_19E26E7EC;
  v13[3] = &unk_1E3FB5470;
  v13[4] = &buf;
  v13[5] = v7;
  objc_msgSend(a1, "enumerateAttribute:inRange:options:usingBlock:", v5, 0, v10, 2, v13);
  v11 = *(_QWORD *)(*((_QWORD *)&buf + 1) + 24);
  _Block_object_dispose(&buf, 8);

  return v11;
}

void sub_19E26E7AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  if (a2 == 1)
  {
    objc_begin_catch(exception_object);
    objc_end_catch();
    JUMPOUT(0x19E26E6F0);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_19E26E7EC(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, _BYTE *a5)
{
  uint64_t result;
  uint64_t v10;
  uint64_t v11;

  result = objc_msgSend(a2, "integerValue");
  v10 = *(_QWORD *)(a1 + 40);
  if (result >= v10)
  {
    if (result != v10)
      return result;
    v11 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else
  {
    v11 = a3 + a4;
  }
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = v11;
  *a5 = 1;
  return result;
}

id sub_19E26E854(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  NSObject *v9;
  id v10;
  _QWORD v12[8];
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t (*v16)(uint64_t, uint64_t);
  void (*v17)(uint64_t);
  id v18;

  v13 = 0;
  v14 = &v13;
  v15 = 0x3032000000;
  v16 = sub_19E24759C;
  v17 = sub_19E2474AC;
  v18 = 0;
  v5 = objc_msgSend(a1, "__im_countMessageParts");
  if (v5)
  {
    v6 = objc_msgSend(a1, "length");
    v7 = *MEMORY[0x1E0D366B8];
    v12[0] = MEMORY[0x1E0C809B0];
    v12[1] = 3221225472;
    v12[2] = sub_19E26E9A4;
    v12[3] = &unk_1E3FB5498;
    v12[6] = a3;
    v12[7] = v5;
    v12[4] = a1;
    v12[5] = &v13;
    objc_msgSend(a1, "enumerateAttribute:inRange:options:usingBlock:", v7, 0, v6, 0, v12);
  }
  v8 = (void *)v14[5];
  if (!v8)
  {
    IMLogHandleForCategory("MessagePartUtilities");
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      sub_19E36BD88();

    v8 = (void *)v14[5];
  }
  v10 = v8;
  _Block_object_dispose(&v13, 8);

  return v10;
}

void sub_19E26E988(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19E26E9A4(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, _BYTE *a5)
{
  id v9;
  uint64_t v10;
  NSObject *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  int v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  uint64_t v23;
  __int16 v24;
  uint64_t v25;
  __int16 v26;
  uint64_t v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v9 = a2;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v10 = objc_msgSend(v9, "unsignedIntegerValue");
  else
    v10 = 0;
  if (v10 == *(_QWORD *)(a1 + 48))
  {
    if (IMOSLoggingEnabled())
    {
      OSLogHandleForIMFoundationCategory();
      v11 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
      {
        v12 = *(_QWORD *)(a1 + 48);
        v13 = objc_msgSend(*(id *)(a1 + 32), "length");
        v14 = *(_QWORD *)(a1 + 56);
        v18 = 134219008;
        v19 = a3;
        v20 = 2048;
        v21 = a4;
        v22 = 2048;
        v23 = v12;
        v24 = 2048;
        v25 = v13;
        v26 = 2048;
        v27 = v14;
        _os_log_impl(&dword_19E239000, v11, OS_LOG_TYPE_INFO, "Found message part with range (%ld, %ld) matching message part index: %ld in message with length %ld and totalPartCount %ld", (uint8_t *)&v18, 0x34u);
      }

    }
    objc_msgSend(*(id *)(a1 + 32), "__im_partDescriptorWithIndex:range:totalPartCount:", v10, a3, a4, *(_QWORD *)(a1 + 56));
    v15 = objc_claimAutoreleasedReturnValue();
    v16 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
    v17 = *(void **)(v16 + 40);
    *(_QWORD *)(v16 + 40) = v15;

    *a5 = 1;
  }

}

id sub_19E26EB48(void *a1, uint64_t a2, NSUInteger a3, NSUInteger a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  NSObject *v11;
  void *v12;
  id v13;
  _QWORD v15[9];
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t (*v19)(uint64_t, uint64_t);
  void (*v20)(uint64_t);
  id v21;
  uint8_t buf[24];
  uint64_t v23;
  NSRange v24;

  v23 = *MEMORY[0x1E0C80C00];
  v16 = 0;
  v17 = &v16;
  v18 = 0x3032000000;
  v19 = sub_19E24759C;
  v20 = sub_19E2474AC;
  v21 = 0;
  v7 = objc_msgSend(a1, "__im_countMessageParts");
  if (v7)
  {
    v8 = objc_msgSend(a1, "length");
    v9 = *MEMORY[0x1E0D366B8];
    v15[0] = MEMORY[0x1E0C809B0];
    v15[1] = 3221225472;
    v15[2] = sub_19E26ECE4;
    v15[3] = &unk_1E3FB54C0;
    v15[6] = a3;
    v15[7] = a4;
    v15[8] = v7;
    v15[4] = a1;
    v15[5] = &v16;
    objc_msgSend(a1, "enumerateAttribute:inRange:options:usingBlock:", v9, 0, v8, 0, v15);
  }
  v10 = (void *)v17[5];
  if (!v10)
  {
    IMLogHandleForCategory("MessagePartUtilities");
    v11 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      v24.location = a3;
      v24.length = a4;
      NSStringFromRange(v24);
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      sub_19E36BDE8(v12, buf, v11);
    }

    v10 = (void *)v17[5];
  }
  v13 = v10;
  _Block_object_dispose(&v16, 8);

  return v13;
}

void sub_19E26ECBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19E26ECE4(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, _BYTE *a5)
{
  id v9;
  uint64_t v10;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  int v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  uint64_t v23;
  __int16 v24;
  uint64_t v25;
  __int16 v26;
  uint64_t v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v9 = a2;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v10 = objc_msgSend(v9, "unsignedIntegerValue");
  else
    v10 = 0;
  if (*(_QWORD *)(a1 + 48) == a3 && *(_QWORD *)(a1 + 56) == a4)
  {
    if (IMOSLoggingEnabled())
    {
      OSLogHandleForIMFoundationCategory();
      v12 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
      {
        v13 = objc_msgSend(*(id *)(a1 + 32), "length");
        v14 = *(_QWORD *)(a1 + 64);
        v18 = 134219008;
        v19 = a3;
        v20 = 2048;
        v21 = a4;
        v22 = 2048;
        v23 = v10;
        v24 = 2048;
        v25 = v13;
        v26 = 2048;
        v27 = v14;
        _os_log_impl(&dword_19E239000, v12, OS_LOG_TYPE_INFO, "Found message part with range (%ld, %ld) matching message part index: %ld in message with length %ld and totalPartCount %ld", (uint8_t *)&v18, 0x34u);
      }

    }
    objc_msgSend(*(id *)(a1 + 32), "__im_partDescriptorWithIndex:range:totalPartCount:", v10, *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64));
    v15 = objc_claimAutoreleasedReturnValue();
    v16 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
    v17 = *(void **)(v16 + 40);
    *(_QWORD *)(v16 + 40) = v15;

    *a5 = 1;
  }

}

id sub_19E26EE84(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  id v12;
  NSObject *v13;

  v6 = a3;
  if (!a4)
    goto LABEL_4;
  objc_msgSend(a1, "__im_messagePartMatchingPartIndex:", a4 - 1);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  if (v7)
  {
    v8 = v7;
    v9 = objc_msgSend(v7, "messagePartRange");
    a4 = v9 + v10;

LABEL_4:
    v11 = (void *)objc_msgSend(a1, "mutableCopy");
    objc_msgSend(v11, "insertAttributedString:atIndex:", v6, a4);
    v12 = (id)objc_msgSend(v11, "copy");

    goto LABEL_8;
  }
  IMLogHandleForCategory("MessagePartUtilities");
  v13 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    sub_19E36BE3C();

  v12 = a1;
LABEL_8:

  return v12;
}

id sub_19E26EF50(void *a1, uint64_t a2, uint64_t a3, void *a4)
{
  void *v6;
  void *v7;
  id v8;
  void *v9;
  uint64_t v10;
  void *v11;
  id v12;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  id v19;
  NSObject *v20;

  v6 = (void *)objc_msgSend(a4, "mutableCopy");
  v7 = v6;
  if (v6)
    v8 = v6;
  else
    v8 = objc_alloc_init(MEMORY[0x1E0CB3778]);
  v9 = v8;

  v10 = *MEMORY[0x1E0D366B8];
  objc_msgSend(v9, "removeAttribute:range:", *MEMORY[0x1E0D366B8], 0, objc_msgSend(v9, "length"));
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", a3);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "addAttribute:value:range:", v10, v11, 0, objc_msgSend(v9, "length"));

  v12 = v9;
  objc_msgSend(a1, "__im_messagePartMatchingPartIndex:", a3);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v14 = v13;
  if (v13)
  {
    v15 = objc_msgSend(v13, "messagePartRange");
    v17 = v16;
    v18 = (void *)objc_msgSend(a1, "mutableCopy");
    objc_msgSend(v18, "replaceCharactersInRange:withAttributedString:", v15, v17, v12);
    v19 = (id)objc_msgSend(v18, "copy");

  }
  else
  {
    IMLogHandleForCategory("MessagePartUtilities");
    v20 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
      sub_19E36BE9C();

    v19 = a1;
  }

  return v19;
}

id sub_19E26F0BC(void *a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  id v8;
  NSObject *v9;

  objc_msgSend(a1, "__im_messagePartMatchingPartIndex:");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = v2;
  if (v2)
  {
    v4 = objc_msgSend(v2, "messagePartRange");
    v6 = v5;
    v7 = (void *)objc_msgSend(a1, "mutableCopy");
    objc_msgSend(v7, "deleteCharactersInRange:", v4, v6);
    v8 = (id)objc_msgSend(v7, "copy");

  }
  else
  {
    IMLogHandleForCategory("MessagePartUtilities");
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      sub_19E36BEFC();

    v8 = a1;
  }

  return v8;
}

void sub_19E26F17C(uint64_t a1, uint64_t a2, void *a3, void *a4, _QWORD *a5, _QWORD *a6)
{
  id v9;
  id v10;
  id v11;
  id v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  id v17;
  id v18;
  id v19;
  id v20;
  _QWORD v21[4];
  id v22;
  id v23;
  id v24;
  id v25;

  v9 = a3;
  v10 = a4;
  v11 = objc_alloc_init(MEMORY[0x1E0CB3788]);
  v12 = objc_alloc_init(MEMORY[0x1E0CB3788]);
  objc_msgSend(v9, "__im_messagePartIndexes");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "__im_messagePartIndexes");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v15 = (void *)objc_msgSend(v13, "mutableCopy");
  objc_msgSend(v15, "addIndexes:", v14);
  v16 = (void *)objc_msgSend(v15, "copy");
  v21[0] = MEMORY[0x1E0C809B0];
  v21[1] = 3221225472;
  v21[2] = sub_19E26F300;
  v21[3] = &unk_1E3FB54E8;
  v22 = v10;
  v23 = v9;
  v20 = v11;
  v24 = v20;
  v17 = v12;
  v25 = v17;
  v18 = v9;
  v19 = v10;
  objc_msgSend(v16, "enumerateIndexesUsingBlock:", v21);
  if (a5)
    *a5 = (id)objc_msgSend(v20, "copy");
  if (a6)
    *a6 = (id)objc_msgSend(v17, "copy");

}

void sub_19E26F300(id *a1, uint64_t a2)
{
  void *v4;
  void *v5;
  void *v6;
  BOOL v7;
  NSObject *v8;
  int v9;
  int v10;
  NSObject *v11;
  NSObject *v12;
  _BOOL4 v13;
  NSObject *v14;
  NSObject *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  objc_msgSend(a1[4], "__im_messagePartMatchingPartIndex:", a2);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(a1[5], "__im_messagePartMatchingPartIndex:", a2);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = v5;
  if (v4)
    v7 = v5 == 0;
  else
    v7 = 1;
  if (v7)
  {
    if (v4)
    {
      if (IMOSLoggingEnabled())
      {
        OSLogHandleForIMFoundationCategory();
        v8 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
        {
          v16 = 134217984;
          v17 = a2;
          _os_log_impl(&dword_19E239000, v8, OS_LOG_TYPE_INFO, "Message part index %ld was in the previous message, but is not in the edited message", (uint8_t *)&v16, 0xCu);
        }

      }
      objc_msgSend(a1[7], "addIndex:", a2);
    }
    else
    {
      v13 = v5 != 0;
      IMLogHandleForCategory("MessagePartUtilities");
      v14 = objc_claimAutoreleasedReturnValue();
      v15 = v14;
      if (v13)
      {
        if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
          sub_19E36BF5C();

        objc_msgSend(a1[6], "addIndex:", a2);
      }
      else
      {
        if (os_log_type_enabled(v14, OS_LOG_TYPE_FAULT))
          sub_19E36BFBC();

      }
    }
  }
  else
  {
    v9 = objc_msgSend(v5, "isEqualToMessagePart:ignoringRange:", v4, 1);
    v10 = IMOSLoggingEnabled();
    if (v9)
    {
      if (v10)
      {
        OSLogHandleForIMFoundationCategory();
        v11 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
        {
          v16 = 134217984;
          v17 = a2;
          _os_log_impl(&dword_19E239000, v11, OS_LOG_TYPE_INFO, "Message part index %ld has the same contents, is not edited", (uint8_t *)&v16, 0xCu);
        }

      }
    }
    else
    {
      if (v10)
      {
        OSLogHandleForIMFoundationCategory();
        v12 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
        {
          v16 = 134217984;
          v17 = a2;
          _os_log_impl(&dword_19E239000, v12, OS_LOG_TYPE_INFO, "Message part index %ld has different contents, was edited", (uint8_t *)&v16, 0xCu);
        }

      }
      objc_msgSend(a1[6], "addIndex:", a2);
    }
  }

}

id sub_19E26F5A4(void *a1)
{
  id v2;
  id v3;
  void *v4;
  _QWORD v6[4];
  id v7;

  v2 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v6[2] = sub_19E26F634;
  v6[3] = &unk_1E3FB5510;
  v7 = v2;
  v3 = v2;
  objc_msgSend(a1, "__im_visitMessageParts:", v6);
  v4 = (void *)objc_msgSend(v3, "copy");

  return v4;
}

void sub_19E26F634(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  id v9;

  v3 = a2;
  v4 = objc_msgSend(v3, "messagePartRange");
  v6 = v5;
  v7 = objc_msgSend(v3, "messagePartIndex");

  objc_msgSend(MEMORY[0x1E0CB3B18], "valueWithRange:", v4, v6);
  v9 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 32), "setObject:forKeyedSubscript:", v8, v9);

}

id sub_19E26F6D8(void *a1)
{
  id v2;
  id v3;
  void *v4;
  _QWORD v6[4];
  id v7;

  v2 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v6[2] = sub_19E26F768;
  v6[3] = &unk_1E3FB5510;
  v7 = v2;
  v3 = v2;
  objc_msgSend(a1, "__im_visitMessageParts:", v6);
  v4 = (void *)objc_msgSend(v3, "copy");

  return v4;
}

void sub_19E26F768(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  id v9;

  v3 = a2;
  v4 = objc_msgSend(v3, "messagePartRange");
  v6 = v5;
  v7 = objc_msgSend(v3, "messagePartIndex");

  objc_msgSend(MEMORY[0x1E0CB3B18], "valueWithRange:", v4, v6);
  v9 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 32), "setObject:forKeyedSubscript:", v9, v8);

}

id sub_19E26F80C(void *a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v6;
  void *v7;
  uint64_t v8;
  BOOL v9;
  unint64_t v10;
  char v11;
  void *v12;
  int v13;
  void *v14;
  int v15;
  void *v16;
  void *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v2 = objc_msgSend(a1, "length");
  if (!v2)
    return (id)objc_msgSend(a1, "copy");
  v3 = v2;
  v4 = *MEMORY[0x1E0D366B8];
  if (objc_msgSend(a1, "attribute:existsInRange:", *MEMORY[0x1E0D366B8], 0, v2))
    return (id)objc_msgSend(a1, "copy");
  v6 = (void *)objc_msgSend(a1, "mutableCopy");
  objc_msgSend(v6, "removeAttribute:range:", v4, 0, v3);
  objc_msgSend(v6, "string");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v19 = *MEMORY[0x1E0D36408];
  v11 = 1;
  do
  {
    v20 = 0;
    v21 = 0;
    objc_msgSend(v6, "attributesAtIndex:longestEffectiveRange:inRange:", v10, &v20, v10, v3 - v10);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v13 = objc_msgSend(v7, "characterAtIndex:", v20);
    if (v13 == 65532)
    {
      objc_msgSend(v12, "objectForKey:", CFSTR("CTAdaptiveImageProvider"));
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      if (v14
        || (objc_msgSend(v12, "objectForKey:", CFSTR("CTEmojiImageProvider")),
            (v14 = (void *)objc_claimAutoreleasedReturnValue()) != 0))
      {

      }
      else
      {
        objc_msgSend(v12, "objectForKey:", v19);
        v17 = (void *)objc_claimAutoreleasedReturnValue();

        if (!v17)
        {
          if ((v11 & 1) == 0)
LABEL_14:
            v8 = (v8 + 1);
          v9 = 1;
          goto LABEL_17;
        }
      }
      if ((v11 & 1) != 0)
      {
        v9 = 0;
        goto LABEL_17;
      }
    }
    else
    {
      if ((v11 & 1) != 0)
      {
        v9 = v13 == 65533;
        goto LABEL_17;
      }
      if (v13 == 65533)
        goto LABEL_14;
    }
    v15 = v9;
    v9 = 0;
    v8 = (v8 + v15);
LABEL_17:
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v8);
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "addAttribute:value:range:", v4, v16, v20, v21);

    v10 = v21 + v20;
    v11 = 0;
  }
  while (v10 < v3);
  v18 = (void *)objc_msgSend(v6, "copy");

  return v18;
}

id sub_19E26FA28(void *a1, uint64_t a2, void *a3)
{
  id v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  id obj;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE v24[128];
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  v5 = (void *)objc_msgSend(a1, "mutableCopy");
  v18 = 0u;
  v19 = 0u;
  v20 = 0u;
  v21 = 0u;
  obj = v4;
  v6 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v18, v24, 16);
  if (v6)
  {
    v7 = v6;
    v8 = *(_QWORD *)v19;
    v9 = *MEMORY[0x1E0D36430];
    v10 = *MEMORY[0x1E0D362F8];
    do
    {
      v11 = 0;
      do
      {
        if (*(_QWORD *)v19 != v8)
          objc_enumerationMutation(obj);
        v12 = *(_QWORD *)(*((_QWORD *)&v18 + 1) + 8 * v11);
        v22 = v9;
        v23 = v12;
        objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v23, &v22, 1);
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        v14 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3498]), "initWithString:attributes:", v10, v13);
        objc_msgSend(v5, "appendAttributedString:", v14);

        ++v11;
      }
      while (v7 != v11);
      v7 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v18, v24, 16);
    }
    while (v7);
  }

  v15 = (void *)objc_msgSend(v5, "copy");
  return v15;
}

id sub_19E26FBB8(uint64_t a1, uint64_t a2, void *a3)
{
  objc_class *v3;
  id v4;
  void *v5;
  void *v6;

  v3 = (objc_class *)MEMORY[0x1E0CB3498];
  v4 = a3;
  v5 = (void *)objc_msgSend([v3 alloc], "initWithString:", &stru_1E3FBBA48);
  objc_msgSend(v5, "__im_attributedStringByAppendingFileTransfers:", v4);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  return v6;
}

uint64_t sub_19E26FC1C(void *a1, uint64_t a2, void *a3)
{
  id v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  _QWORD v10[4];
  id v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  char v16;

  v4 = a3;
  v13 = 0;
  v14 = &v13;
  v15 = 0x2020000000;
  v16 = 0;
  v5 = objc_msgSend(a1, "length");
  v6 = *MEMORY[0x1E0D36430];
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = sub_19E26FD18;
  v10[3] = &unk_1E3FB5538;
  v7 = v4;
  v11 = v7;
  v12 = &v13;
  objc_msgSend(a1, "enumerateAttribute:inRange:options:usingBlock:", v6, 0, v5, 0, v10);
  v8 = *((unsigned __int8 *)v14 + 24);

  _Block_object_dispose(&v13, 8);
  return v8;
}

void sub_19E26FD00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19E26FD18(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, _BYTE *a5)
{
  id v7;

  v7 = a2;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0 && objc_msgSend(v7, "isEqualToString:", *(_QWORD *)(a1 + 32)))
  {
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 1;
    *a5 = 0;
  }

}

id sub_19E26FD8C(void *a1, uint64_t a2, void *a3, void *a4)
{
  id v6;
  id v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  id v11;
  id v12;
  id v13;
  void *v14;
  _QWORD v16[4];
  id v17;
  id v18;
  id v19;

  v6 = a3;
  v7 = a4;
  v8 = objc_msgSend(a1, "length");
  v9 = (void *)objc_msgSend(a1, "mutableCopy");
  v10 = *MEMORY[0x1E0D36430];
  v16[0] = MEMORY[0x1E0C809B0];
  v16[1] = 3221225472;
  v16[2] = sub_19E26FE94;
  v16[3] = &unk_1E3FB5560;
  v17 = v6;
  v18 = v9;
  v19 = v7;
  v11 = v7;
  v12 = v9;
  v13 = v6;
  objc_msgSend(a1, "enumerateAttribute:inRange:options:usingBlock:", v10, 0, v8, 0, v16);
  v14 = (void *)objc_msgSend(v12, "copy");

  return v14;
}

void sub_19E26FE94(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v7;

  v7 = a2;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0 && objc_msgSend(v7, "isEqualToString:", *(_QWORD *)(a1 + 32)))
    objc_msgSend(*(id *)(a1 + 40), "addAttribute:value:range:", *MEMORY[0x1E0D36430], *(_QWORD *)(a1 + 48), a3, a4);

}

void sub_19E26FF5C()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.Messages", "BlastDoorAttachment");
  v1 = (void *)qword_1ECFC7228;
  qword_1ECFC7228 = (uint64_t)v0;

}

void sub_19E270424(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  _Block_object_dispose(&a27, 8);
  _Unwind_Resume(a1);
}

void sub_19E270474(uint64_t a1, void *a2, uint64_t a3)
{
  void *v5;
  id v6;

  v6 = a2;
  if (v6 && !a3)
  {
    MEMORY[0x1A1AE7D4C](CFSTR("BlastDoorEmojiImageMetadata"), CFSTR("BlastDoor"));
    if ((objc_opt_isKindOfClass() & 1) != 0)
      v5 = v6;
    else
      v5 = 0;
    objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), v5);
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));

}

void sub_19E2704F4(uint64_t a1, void *a2, uint64_t a3)
{
  void *v5;
  id v6;
  void *v7;
  uint64_t v8;
  double v9;
  double v10;
  double v11;
  double v12;
  void *v13;
  id v14;

  v14 = a2;
  if (v14 && !a3)
  {
    MEMORY[0x1A1AE7D4C](CFSTR("BlastDoorPreviewImage"), CFSTR("BlastDoor"));
    if ((objc_opt_isKindOfClass() & 1) != 0)
      v5 = v14;
    else
      v5 = 0;
    v6 = v5;
    objc_msgSend(v6, "image");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = objc_msgSend(v7, "cgImage");
    objc_msgSend(v6, "alignmentInset");
    v10 = v9;
    v12 = v11;

    v13 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CEA220]), "initWithImage:alignmentInset:", v8, v10, v12);
    if (v13)
      objc_msgSend(*(id *)(a1 + 32), "addObject:", v13);

  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));

}

uint64_t sub_19E270704()
{
  uint64_t result;

  result = MEMORY[0x1A1AE7D4C](CFSTR("NTKGreenfieldUtilities"), CFSTR("NanoTimeKitCompanion"));
  qword_1EE503DF0 = result;
  return result;
}

void sub_19E270FB8(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  NSObject *v11;
  int v12;
  void *v13;
  uint64_t v14;
  _DWORD v15[2];
  __int16 v16;
  void *v17;
  __int16 v18;
  uint64_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  v7 = v6;
  if (v5 && !v6)
  {
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = objc_msgSend((id)objc_opt_class(), "decorateWatchfacePreview:andWriteToURL:imagePxSize:", v5, *(_QWORD *)(a1 + 32), *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 32);
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24))
      goto LABEL_9;
    v8 = objc_msgSend(objc_alloc(MEMORY[0x1E0CB35C8]), "initWithDomain:code:userInfo:", CFSTR("__kIMPreviewGenerationErrorDomain"), 3, 0);
    v9 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8);
    v10 = *(void **)(v9 + 40);
    *(_QWORD *)(v9 + 40) = v8;
    goto LABEL_8;
  }
  v10 = v6;
  if (!v6)
    v10 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB35C8]), "initWithDomain:code:userInfo:", CFSTR("__kIMPreviewGenerationErrorDomain"), 1, 0);
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 40), v10);
  if (!v7)
LABEL_8:

LABEL_9:
  if (IMOSLoggingEnabled())
  {
    OSLogHandleForIMFoundationCategory();
    v11 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      v12 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24);
      IMStringFromCGSize(*(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 32), *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40));
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      v14 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 40);
      v15[0] = 67109634;
      v15[1] = v12;
      v16 = 2112;
      v17 = v13;
      v18 = 2112;
      v19 = v14;
      _os_log_impl(&dword_19E239000, v11, OS_LOG_TYPE_INFO, "Blastdoor validation completed, result: %d, imagePxSize: %@, err: %@", (uint8_t *)v15, 0x1Cu);

    }
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));

}

uint64_t ckDefaultTextSizeForFontPointSize(double a1)
{
  uint64_t v1;
  uint64_t v2;

  if (a1 <= 10.0)
    return 1;
  if (a1 <= 11.0)
    return 2;
  if (a1 <= 12.0)
    return 3;
  v1 = 5;
  v2 = 6;
  if (a1 > 15.0)
    v2 = 7;
  if (a1 > 14.0)
    v1 = v2;
  if (a1 > 13.0)
    return v1;
  else
    return 4;
}

void IMPreviewConstraintsFromDictionary(void *a1@<X0>, uint64_t a2@<X8>)
{
  id v3;
  void *v4;
  float v5;
  void *v6;
  float v7;
  double v8;
  void *v9;
  float v10;
  double v11;
  void *v12;
  float v13;
  void *v14;
  void *v15;
  id v16;

  *(_QWORD *)(a2 + 32) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  v3 = a1;
  objc_msgSend(v3, "objectForKey:", CFSTR("mpw"));
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "floatValue");
  *(double *)a2 = v5;

  objc_msgSend(v3, "objectForKey:", CFSTR("mtw"));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "floatValue");
  v8 = v7;

  objc_msgSend(v3, "objectForKey:", CFSTR("mth"));
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "floatValue");
  v11 = v10;

  *(double *)(a2 + 8) = v8;
  *(double *)(a2 + 16) = v11;
  objc_msgSend(v3, "objectForKey:", CFSTR("s"));
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "floatValue");
  *(double *)(a2 + 24) = v13;

  objc_msgSend(v3, "objectForKey:", CFSTR("st"));
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  *(_BYTE *)(a2 + 32) = objc_msgSend(v14, "BOOLValue");

  objc_msgSend(v3, "objectForKey:", CFSTR("iaig"));
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  *(_BYTE *)(a2 + 34) = objc_msgSend(v15, "BOOLValue");

  objc_msgSend(v3, "objectForKey:", CFSTR("gm"));
  v16 = (id)objc_claimAutoreleasedReturnValue();

  *(_BYTE *)(a2 + 33) = objc_msgSend(v16, "BOOLValue");
}

id IMPreviewConstraintsDictionaryFromConstraint(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;

  v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99E08]), "initWithCapacity:", 5);
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%f"), *(_QWORD *)a1);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "setObject:forKey:", v3, CFSTR("mpw"));

  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%f"), *(_QWORD *)(a1 + 8));
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "setObject:forKey:", v4, CFSTR("mtw"));

  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%f"), *(_QWORD *)(a1 + 16));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "setObject:forKey:", v5, CFSTR("mth"));

  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%f"), *(_QWORD *)(a1 + 24));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "setObject:forKey:", v6, CFSTR("s"));

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", *(unsigned __int8 *)(a1 + 32));
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "setObject:forKey:", v7, CFSTR("st"));

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", *(unsigned __int8 *)(a1 + 34));
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "setObject:forKey:", v8, CFSTR("iaig"));

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", *(unsigned __int8 *)(a1 + 33));
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "setObject:forKey:", v9, CFSTR("gm"));

  return v2;
}

BOOL IMPreviewConstraintsEqualToConstraints(uint64_t a1, uint64_t a2)
{
  int32x2_t v2;

  if (*(unsigned __int8 *)(a1 + 32) == *(unsigned __int8 *)(a2 + 32)
    && *(unsigned __int8 *)(a1 + 34) == *(unsigned __int8 *)(a2 + 34)
    && *(unsigned __int8 *)(a1 + 33) == *(unsigned __int8 *)(a2 + 33)
    && vabdd_f64(*(double *)a1, *(double *)a2) < 0.00000999999975
    && (v2 = vmovn_s64(vcgtq_f64((float64x2_t)vdupq_n_s64(0x3EE4F8B580000000uLL), vabdq_f64(*(float64x2_t *)(a1 + 8), *(float64x2_t *)(a2 + 8)))), (v2.i32[0] & v2.i32[1] & 1) != 0))
  {
    return vabdd_f64(*(double *)(a1 + 24), *(double *)(a2 + 24)) < 0.00000999999975;
  }
  else
  {
    return 0;
  }
}

double IMPreviewConstraintsZero@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)(a1 + 32) = 0;
  result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

uint64_t sub_19E27176C(uint64_t result, _WORD *a2, _QWORD *a3, __CFString *a4, __CFString *a5, __CFString *a6, __CFString *a7)
{
  __CFString *v8;
  unsigned __int16 *v12;
  unsigned __int16 *v13;
  _WORD *v14;
  unsigned int v15;
  uint64_t v16;
  __CFString *v17;
  int v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  *a3 = 0;
  if ((_WORD *)result != a2)
  {
    v8 = a6;
    v12 = (unsigned __int16 *)result;
    while (1)
    {
      while (1)
      {
        v13 = v12;
        v14 = a2;
        v15 = *v12;
        if (v15 > 0x25)
          break;
        if (v15 > 0xC)
        {
          if (v15 > 0x20)
          {
            if (v15 != 34)
              goto LABEL_60;
            ++v12;
            if (a7)
            {
              result = -[__CFString length](a7, "length");
              a2 = 0;
              *a3 += result;
              if (v14)
              {
                v16 = result;
                v17 = a7;
                goto LABEL_69;
              }
            }
            else
            {
              result = objc_msgSend(CFSTR("\""), "length");
              a2 = 0;
              *a3 += result;
              if (v14)
              {
                v16 = result;
                v17 = CFSTR("\"");
                goto LABEL_69;
              }
            }
          }
          else
          {
            if (v15 < 0xE)
              goto LABEL_53;
            if (v15 < 0x20)
              goto LABEL_56;
            ++v12;
            if (v13[1] == 32)
            {
              do
              {
                v18 = v12[1];
                ++v12;
              }
              while (v18 == 32);
              if (!a4)
                goto LABEL_57;
              if (v13 < v12)
              {
                v19 = (unint64_t)(v13 - 1);
                do
                {
                  result = -[__CFString length](a4, "length");
                  *a3 += result;
                  if (v14)
                  {
                    v20 = result;
                    result = -[__CFString getCharacters:](a4, "getCharacters:", v14);
                    v14 += v20;
                  }
                  v19 += 2;
                }
                while (v19 < (unint64_t)(v12 - 1));
                a2 = v14;
                v8 = a6;
              }
            }
            else
            {
LABEL_61:
              a2 = 0;
              ++*a3;
              if (v14)
              {
                *v14 = v15;
                a2 = v14 + 1;
              }
            }
          }
        }
        else if (v15 > 8)
        {
          if (v15 == 9)
          {
            ++v12;
            if (a4)
            {
              v21 = -[__CFString length](a4, "length");
              *a3 += v21;
              if (v14)
              {
                v22 = v21;
                -[__CFString getCharacters:](a4, "getCharacters:", v14);
                v14 += v22;
              }
              v23 = -[__CFString length](a4, "length");
              *a3 += v23;
              if (v14)
              {
                v24 = v23;
                -[__CFString getCharacters:](a4, "getCharacters:", v14);
                v14 += v24;
              }
              v25 = -[__CFString length](a4, "length");
              *a3 += v25;
              if (v14)
              {
                v26 = v25;
                -[__CFString getCharacters:](a4, "getCharacters:", v14);
                v14 += v26;
              }
              result = -[__CFString length](a4, "length");
              a2 = 0;
              *a3 += result;
              if (v14)
              {
                v16 = result;
                v17 = a4;
                goto LABEL_69;
              }
            }
            else
            {
LABEL_57:
              result = objc_msgSend(CFSTR(" "), "length");
              a2 = 0;
              *a3 += result;
              if (v14)
              {
                v16 = result;
                v17 = CFSTR(" ");
                goto LABEL_69;
              }
            }
          }
          else
          {
            if (v15 >= 0xB)
              goto LABEL_56;
LABEL_53:
            ++v12;
            if (!a5)
              goto LABEL_57;
            result = -[__CFString length](a5, "length");
            a2 = 0;
            *a3 += result;
            if (v14)
            {
              v16 = result;
              v17 = a5;
              goto LABEL_69;
            }
          }
        }
        else
        {
          if (!*v12)
            return result;
LABEL_56:
          ++v12;
        }
      }
      if (v15 > 0x3E)
      {
        if (v15 >> 3 > 0x404)
        {
          if (v15 < 0x202A)
            goto LABEL_53;
          if (v15 >= 0xFFFE)
            goto LABEL_56;
        }
        else if (v15 == 133)
        {
          goto LABEL_53;
        }
LABEL_60:
        ++v12;
        goto LABEL_61;
      }
      if (v15 > 0x3B)
      {
        if (v15 == 60)
        {
          ++v12;
          result = objc_msgSend(CFSTR("&lt;"), "length");
          a2 = 0;
          *a3 += result;
          if (v14)
          {
            v16 = result;
            v17 = CFSTR("&lt;");
            goto LABEL_69;
          }
        }
        else
        {
          if (v15 < 0x3E)
            goto LABEL_60;
          ++v12;
          result = objc_msgSend(CFSTR("&gt;"), "length");
          a2 = 0;
          *a3 += result;
          if (v14)
          {
            v16 = result;
            v17 = CFSTR("&gt;");
            goto LABEL_69;
          }
        }
      }
      else if (v15 >= 0x27)
      {
        if (v15 != 39)
          goto LABEL_60;
        ++v12;
        if (v8)
        {
          result = -[__CFString length](v8, "length");
          a2 = 0;
          *a3 += result;
          if (v14)
          {
            v16 = result;
            v17 = v8;
            goto LABEL_69;
          }
        }
        else
        {
          result = objc_msgSend(CFSTR("'"), "length");
          a2 = 0;
          *a3 += result;
          if (v14)
          {
            v16 = result;
            v17 = CFSTR("'");
LABEL_69:
            result = -[__CFString getCharacters:](v17, "getCharacters:", v14);
            a2 = &v14[v16];
          }
        }
      }
      else
      {
        ++v12;
        result = objc_msgSend(CFSTR("&amp;"), "length");
        a2 = 0;
        *a3 += result;
        if (v14)
        {
          v16 = result;
          v17 = CFSTR("&amp;");
          goto LABEL_69;
        }
      }
    }
  }
  return result;
}

__CFString *sub_19E271BBC(void *a1)
{
  void *v1;
  __CFString *v2;

  objc_msgSend(a1, "lastPathComponent");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_msgSend(v1, "isEqualToString:", CFSTR("..")) & 1) != 0)
    v2 = &stru_1E3FBBA48;
  else
    v2 = v1;

  return v2;
}

id sub_19E271C0C(void *a1, uint64_t a2, void *a3)
{
  id v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _BYTE v17[128];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  v5 = a1;
  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  v16 = 0u;
  v6 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
  if (v6)
  {
    v7 = v6;
    v8 = *(_QWORD *)v14;
    do
    {
      v9 = 0;
      v10 = v5;
      do
      {
        if (*(_QWORD *)v14 != v8)
          objc_enumerationMutation(v4);
        objc_msgSend(*(id *)(*((_QWORD *)&v13 + 1) + 8 * v9), "im_lastPathComponent");
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v10, "URLByAppendingPathComponent:", v11);
        v5 = (id)objc_claimAutoreleasedReturnValue();

        ++v9;
        v10 = v5;
      }
      while (v7 != v9);
      v7 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
    }
    while (v7);
  }

  return v5;
}

id IMNicknameUnarchivingClasses()
{
  void *v0;
  void *v1;
  void *v2;
  _QWORD v4[7];

  v4[6] = *MEMORY[0x1E0C80C00];
  v0 = (void *)MEMORY[0x1E0C99E60];
  v4[0] = objc_opt_class();
  v4[1] = objc_opt_class();
  v4[2] = objc_opt_class();
  v4[3] = objc_opt_class();
  v4[4] = objc_opt_class();
  v4[5] = objc_opt_class();
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v4, 6);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "setWithArray:", v1);
  v2 = (void *)objc_claimAutoreleasedReturnValue();

  return v2;
}

id sub_19E274BE0(void *a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  const void *v7;
  void *String;
  void *v9;
  id v10;

  if (!qword_1EE503E00)
  {
    objc_msgSend(MEMORY[0x1E0C99DC8], "currentLocale");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "objectForKey:", *MEMORY[0x1E0C997B0]);
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "lowercaseString");
    v4 = objc_claimAutoreleasedReturnValue();
    v5 = (void *)qword_1EE503E00;
    qword_1EE503E00 = v4;

  }
  v6 = CFPhoneNumberCreate();
  if (v6)
  {
    v7 = (const void *)v6;
    String = (void *)CFPhoneNumberCreateString();
    if (!String)
      String = (void *)CFPhoneNumberCreateString();
    CFRelease(v7);
    if (String)
      v9 = String;
    else
      v9 = a1;
    v10 = v9;

  }
  else
  {
    v10 = a1;
  }
  return v10;
}

id sub_19E274CD4(void *a1)
{
  id v2;

  if (objc_msgSend(a1, "length") && objc_msgSend(a1, "_appearsToBePhoneNumber"))
  {
    objc_msgSend(a1, "formattedPhoneNumber");
    v2 = (id)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v2 = a1;
  }
  return v2;
}

uint64_t sub_19E274D18(void *a1, uint64_t a2, void *a3)
{
  void *v4;
  id v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;

  v4 = (void *)MEMORY[0x1E0CB3500];
  v5 = a3;
  objc_msgSend(v4, "controlCharacterSet");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(a1, "stringByTrimmingCharactersInSet:", v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(MEMORY[0x1E0CB3500], "controlCharacterSet");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "stringByTrimmingCharactersInSet:", v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  if (!qword_1EE503E00)
  {
    objc_msgSend(MEMORY[0x1E0C99DC8], "currentLocale");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "objectForKey:", *MEMORY[0x1E0C997B0]);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "lowercaseString");
    v12 = objc_claimAutoreleasedReturnValue();
    v13 = (void *)qword_1EE503E00;
    qword_1EE503E00 = v12;

  }
  v14 = PNPhoneNumbersEqual();

  return v14;
}

uint64_t sub_19E274E28()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _BYTE v17[128];
  _BYTE v18[128];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v0 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99E20]), "initWithArray:", &unk_1E3FFEE40);
  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  v16 = 0u;
  v1 = objc_msgSend(&unk_1E3FFEE58, "countByEnumeratingWithState:objects:count:", &v13, v18, 16);
  if (v1)
  {
    v2 = v1;
    v3 = *(_QWORD *)v14;
    do
    {
      v4 = 0;
      do
      {
        if (*(_QWORD *)v14 != v3)
          objc_enumerationMutation(&unk_1E3FFEE58);
        objc_msgSend(v0, "addObject:", objc_msgSend(CFSTR("smsfp"), "stringByAppendingString:", *(_QWORD *)(*((_QWORD *)&v13 + 1) + 8 * v4++)));
      }
      while (v2 != v4);
      v2 = objc_msgSend(&unk_1E3FFEE58, "countByEnumeratingWithState:objects:count:", &v13, v18, 16);
    }
    while (v2);
  }
  v11 = 0u;
  v12 = 0u;
  v9 = 0u;
  v10 = 0u;
  result = objc_msgSend(&unk_1E3FFEE70, "countByEnumeratingWithState:objects:count:", &v9, v17, 16);
  if (result)
  {
    v6 = result;
    v7 = *(_QWORD *)v10;
    do
    {
      v8 = 0;
      do
      {
        if (*(_QWORD *)v10 != v7)
          objc_enumerationMutation(&unk_1E3FFEE70);
        objc_msgSend(v0, "addObject:", objc_msgSend(CFSTR("smsft"), "stringByAppendingString:", *(_QWORD *)(*((_QWORD *)&v9 + 1) + 8 * v8++)));
      }
      while (v6 != v8);
      result = objc_msgSend(&unk_1E3FFEE70, "countByEnumeratingWithState:objects:count:", &v9, v17, 16);
      v6 = result;
    }
    while (result);
  }
  qword_1EE503E10 = (uint64_t)v0;
  return result;
}

uint64_t sub_19E2753A8(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *v5;
  void *v6;

  objc_msgSend(a1, "objectForKey:");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = v5;
  if (v5)
    a4 = objc_msgSend(v5, "integerValue");

  return a4;
}

float sub_19E2753E8(void *a1, float a2)
{
  void *v3;
  void *v4;
  float v5;

  objc_msgSend(a1, "objectForKey:");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = v3;
  if (v3)
  {
    objc_msgSend(v3, "floatValue");
    a2 = v5;
  }

  return a2;
}

uint64_t sub_19E275430(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *v5;
  void *v6;

  objc_msgSend(a1, "objectForKey:");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = v5;
  if (v5)
    a4 = objc_msgSend(v5, "longValue");

  return a4;
}

uint64_t sub_19E275470(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *v5;
  void *v6;

  objc_msgSend(a1, "objectForKey:");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = v5;
  if (v5)
    a4 = objc_msgSend(v5, "unsignedLongValue");

  return a4;
}

uint64_t sub_19E2754B0(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *v5;
  void *v6;

  objc_msgSend(a1, "objectForKey:");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = v5;
  if (v5)
    a4 = objc_msgSend(v5, "longLongValue");

  return a4;
}

uint64_t sub_19E2754F0(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *v5;
  void *v6;

  objc_msgSend(a1, "objectForKey:");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = v5;
  if (v5)
    a4 = objc_msgSend(v5, "unsignedLongLongValue");

  return a4;
}

void sub_19E2756E0(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;

  v7 = a2;
  v5 = a3;
  if ((objc_msgSend(v5, "containsString:", CFSTR("IMDCNPersonNotFound")) & 1) == 0)
  {
    objc_msgSend(*(id *)(a1 + 32), "objectForKey:", v5);
    v6 = (id)objc_claimAutoreleasedReturnValue();
    if (!v6)
      v6 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
    if ((objc_msgSend(v6, "containsObject:", v7) & 1) == 0)
      objc_msgSend(v6, "addObject:", v7);
    objc_msgSend(*(id *)(a1 + 32), "setObject:forKey:", v6, v5);

  }
}

uint64_t IMUTITypeIsSupportedForTranscodeOnSend(const __CFString *a1)
{
  void *v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  _BYTE v11[128];
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  if (qword_1EE503A40 != -1)
    dispatch_once(&qword_1EE503A40, &unk_1E3FB3408);
  v2 = (void *)objc_msgSend((id)qword_1EE503A68, "arrayByAddingObjectsFromArray:", IMSupportedAVUTITypesForOutgoingTranscode());
  v7 = 0u;
  v8 = 0u;
  v9 = 0u;
  v10 = 0u;
  result = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v7, v11, 16);
  if (result)
  {
    v4 = result;
    v5 = *(_QWORD *)v8;
    while (2)
    {
      v6 = 0;
      do
      {
        if (*(_QWORD *)v8 != v5)
          objc_enumerationMutation(v2);
        if (UTTypeConformsTo(a1, *(CFStringRef *)(*((_QWORD *)&v7 + 1) + 8 * v6)))
          return 1;
        ++v6;
      }
      while (v4 != v6);
      result = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v7, v11, 16);
      v4 = result;
      if (result)
        continue;
      break;
    }
  }
  return result;
}

uint64_t IMSupportedImageUTITypesForOutgoingTranscode()
{
  if (qword_1EE503A40 != -1)
    dispatch_once(&qword_1EE503A40, &unk_1E3FB3408);
  return qword_1EE503A68;
}

void *IMSupportedAVUTITypesForOutgoingTranscode()
{
  void *v0;
  NSObject *v1;
  int v3;
  void *v4;
  _QWORD v5[2];

  v5[1] = *MEMORY[0x1E0C80C00];
  v0 = (void *)objc_msgSend(MEMORY[0x1E0C8B3C0], "audiovisualTypes");
  if (-[IMFeatureFlags isLazuliEnabled](+[IMFeatureFlags sharedFeatureFlags](IMFeatureFlags, "sharedFeatureFlags"), "isLazuliEnabled"))
  {
    v5[0] = *MEMORY[0x1E0C8A2E0];
    v0 = (void *)objc_msgSend(v0, "arrayByAddingObjectsFromArray:", objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v5, 1));
  }
  if (IMOSLoggingEnabled())
  {
    v1 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v1, OS_LOG_TYPE_INFO))
    {
      v3 = 138412290;
      v4 = v0;
      _os_log_impl(&dword_19E239000, v1, OS_LOG_TYPE_INFO, "Supported video utis: %@", (uint8_t *)&v3, 0xCu);
    }
  }
  return v0;
}

void sub_19E27689C()
{
  CFArrayRef v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  int v5;
  uint64_t v6;
  _QWORD v7[3];

  v7[2] = *MEMORY[0x1E0C80C00];
  v0 = CGImageSourceCopyTypeIdentifiers();
  v1 = (void *)objc_msgSend((id)(id)CFMakeCollectable(v0), "mutableCopy");
  v2 = *MEMORY[0x1E0CA5C00];
  v7[0] = *MEMORY[0x1E0CA5C80];
  v7[1] = v2;
  v3 = objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v7, 2);
  objc_msgSend(v1, "addObject:", CFSTR("________WBMP_________"));
  objc_msgSend(v1, "removeObjectsInArray:", v3);
  qword_1EE503A68 = objc_msgSend(v1, "copy");

  if (IMOSLoggingEnabled())
  {
    v4 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      v5 = 138412290;
      v6 = qword_1EE503A68;
      _os_log_impl(&dword_19E239000, v4, OS_LOG_TYPE_INFO, "Supported UTI types: %@", (uint8_t *)&v5, 0xCu);
    }
  }
}

BOOL IMUTTypeIsImage(const __CFString *a1)
{
  return UTTypeConformsTo(a1, (CFStringRef)*MEMORY[0x1E0CA5B90]) != 0;
}

BOOL IMUTTypeIsMovie(const __CFString *a1)
{
  return UTTypeConformsTo(a1, (CFStringRef)*MEMORY[0x1E0CA5BF8]) != 0;
}

BOOL IMUTTypeIsVCard(const __CFString *a1)
{
  return UTTypeConformsTo(a1, (CFStringRef)*MEMORY[0x1E0CA5CB0]) != 0;
}

BOOL IMUTTypeIsCalendar(const __CFString *a1)
{
  return UTTypeConformsTo(a1, (CFStringRef)*MEMORY[0x1E0CA5AF8])
      || UTTypeConformsTo(a1, CFSTR("com.apple.ical.vcs"))
      || UTTypeConformsTo(a1, CFSTR("com.apple.ical.ics")) != 0;
}

BOOL IMUTTypeIsPass(const __CFString *a1)
{
  return UTTypeConformsTo(a1, (CFStringRef)*MEMORY[0x1E0CA5A60])
      || UTTypeConformsTo(a1, (CFStringRef)*MEMORY[0x1E0CA5A58])
      || UTTypeConformsTo(a1, CFSTR("com.apple.shoebox.pkpass")) != 0;
}

BOOL IMUTTypeIsWalletOrder(const __CFString *a1)
{
  return UTTypeConformsTo(a1, CFSTR("com.apple.finance.order")) != 0;
}

BOOL IMUTTypeIsAudio(const __CFString *a1)
{
  return UTTypeConformsTo(a1, (CFStringRef)*MEMORY[0x1E0CA5AC8]) != 0;
}

uint64_t IMUTTypeIsMap(void *a1, const char *a2)
{
  return objc_msgSend(a1, "isEqualToString:", CFSTR("public.vlocation"));
}

uint64_t IMUTTypeIsWatchface(void *a1, const char *a2)
{
  return objc_msgSend(a1, "isEqualToString:", CFSTR("com.apple.watchface"));
}

uint64_t IMUTTypeIsWorkout(uint64_t a1)
{
  return objc_msgSend((id)IMWorkoutUTITypes(), "containsObject:", a1);
}

uint64_t IMSupportedAnimatedImageUTTypesSortedByPreference()
{
  uint64_t v0;
  _QWORD v2[8];

  v2[7] = *MEMORY[0x1E0C80C00];
  v2[0] = CFSTR("public.heic");
  v2[1] = CFSTR("public.heics");
  v2[2] = CFSTR("public.heif");
  v2[3] = CFSTR("public.heif-standard");
  v0 = *MEMORY[0x1E0CA5C10];
  v2[4] = *MEMORY[0x1E0CA5B68];
  v2[5] = v0;
  v2[6] = CFSTR("org.webmproject.webp");
  return objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v2, 7);
}

uint64_t IMUTTypeIsSupportedScreenshot(__CFString *a1)
{
  uint64_t result;

  result = -[__CFString length](a1, "length");
  if (result)
    return UTTypeConformsTo(a1, (CFStringRef)*MEMORY[0x1E0CA5BA8])
        || UTTypeConformsTo(a1, (CFStringRef)*MEMORY[0x1E0CA5C10])
        || UTTypeConformsTo(a1, CFSTR("public.heif"))
        || UTTypeConformsTo(a1, CFSTR("public.heic"))
        || UTTypeConformsTo(a1, CFSTR("public.heics"))
        || UTTypeConformsTo(a1, CFSTR("public.heif-standard")) != 0;
  return result;
}

uint64_t IMUTTypeWantsQuicklook(void *a1)
{
  if ((objc_msgSend(a1, "isEqualToString:", CFSTR("com.apple.watchface")) & 1) != 0)
    return 0;
  else
    return objc_msgSend((id)IMWorkoutUTITypes(), "containsObject:", a1) ^ 1;
}

uint64_t sub_19E278010(uint64_t a1, void *a2, void *a3)
{
  id v4;
  id v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;

  v4 = a2;
  v5 = a3;
  v6 = objc_msgSend(v4, "action");
  if (v6 != objc_msgSend(v5, "action"))
    goto LABEL_6;
  v7 = objc_msgSend(v4, "orderOfPlacementInUI");
  if (v7 <= objc_msgSend(v5, "orderOfPlacementInUI"))
  {
    v9 = objc_msgSend(v4, "orderOfPlacementInUI");
    if (v9 < objc_msgSend(v5, "orderOfPlacementInUI"))
    {
      v8 = -1;
      goto LABEL_7;
    }
LABEL_6:
    v8 = 0;
    goto LABEL_7;
  }
  v8 = 1;
LABEL_7:

  return v8;
}

uint64_t CKUpdateFilterParamsForSMSFiltering()
{
  __CFNotificationCenter *DarwinNotifyCenter;

  if (_IMWillLog())
    _IMAlwaysLog();
  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterPostNotification(DarwinNotifyCenter, CFSTR("_SMSFilterExtensionParamsChangeDistributedNotification"), 0, 0, 1u);
  return 0;
}

BOOL IMSharedUtilitiesProtoCloudKitEncryptedMessageSummaryInfoReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  int *v17;
  void *Data;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v10 >> 3) == 1)
        break;
      if ((v10 >> 3) == 2)
      {
        v17 = &OBJC_IVAR___IMSharedUtilitiesProtoCloudKitEncryptedMessageSummaryInfo__padding;
LABEL_22:
        Data = (void *)PBReaderReadData();

        *(_QWORD *)(a1 + *v17) = Data;
        goto LABEL_24;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_24:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v17 = &OBJC_IVAR___IMSharedUtilitiesProtoCloudKitEncryptedMessageSummaryInfo__messageSummaryInfo;
    goto LABEL_22;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

IMMeCardSharingStateController *sub_19E278ED0()
{
  IMMeCardSharingStateController *result;

  result = objc_alloc_init(IMMeCardSharingStateController);
  qword_1ECFC7570 = (uint64_t)result;
  return result;
}

uint64_t IMTemporaryFileTransferGUIDForNewOutgoingTransfer()
{
  return objc_msgSend(MEMORY[0x1E0CB3940], "stringGUID");
}

uint64_t IMFileTransferGUIDIsTemporary(void *a1)
{
  return objc_msgSend(a1, "containsString:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@%@"), CFSTR("at"), CFSTR("_"))) ^ 1;
}

uint64_t IMFileTransferGUIDForAttachmentMessagePartAtMessageGUIDAndMessagePartIndex(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@%@%lu%@%@"), CFSTR("at"), CFSTR("_"), a2, CFSTR("_"), a1);
}

uint64_t IMFileTransferGUIDForPluginPayloadOrGroupPhotoInMessageGUID(uint64_t a1)
{
  return objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@%@%lu%@%@"), CFSTR("at"), CFSTR("_"), 0, CFSTR("_"), a1);
}

uint64_t IMFileTransferGUIDForGenmojiWithContentIdentifierInMessageGUID(void *a1, uint64_t a2)
{
  uint64_t v3;

  v3 = objc_msgSend(a1, "stringByReplacingOccurrencesOfString:withString:", CFSTR("_"), CFSTR("-"));
  return objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@%@%@%@%@"), CFSTR("at"), CFSTR("_"), v3, CFSTR("_"), a2);
}

uint64_t IMFauxMessageGUIDForTapbackOfCMMAssetAtIndexInParentMessageGUID(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@%@%lu%@%@"), CFSTR("at"), CFSTR("_"), a1, CFSTR("_"), a2);
}

uint64_t IMFileTransferGUIDForLocalOnlyFileTransferRepresentingCMMAssetAtIndexInMessageGUID(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@%@%lu%@%@"), CFSTR("at"), CFSTR("_"), a1, CFSTR("_"), a2);
}

uint64_t IMMessageGuidFromIMFileTransferGuid(void *a1)
{
  void *v2;
  NSObject *v4;
  const char *v5;
  uint8_t buf[4];
  void *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  if ((objc_msgSend(a1, "containsString:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@%@"), CFSTR("at"), CFSTR("_"))) & 1) == 0)
  {
    if (!IMOSLoggingEnabled())
      return 0;
    v4 = OSLogHandleForIMFoundationCategory();
    if (!os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
      return 0;
    *(_DWORD *)buf = 138412290;
    v7 = a1;
    v5 = "Cannot find message guid from file transfer guid as it is in temporary format: %@";
    goto LABEL_10;
  }
  v2 = (void *)objc_msgSend(a1, "componentsSeparatedByString:", CFSTR("_"));
  if (objc_msgSend(v2, "count"))
    return objc_msgSend(v2, "lastObject");
  if (IMOSLoggingEnabled())
  {
    v4 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138412290;
      v7 = a1;
      v5 = "Cannot find message guid from file transfer guid as we cannot find string components separated by _: %@";
LABEL_10:
      _os_log_impl(&dword_19E239000, v4, OS_LOG_TYPE_INFO, v5, buf, 0xCu);
    }
  }
  return 0;
}

uint64_t IMCMMAssetIndexFromIMFileTransferGUID(void *a1)
{
  void *v2;
  NSObject *v3;
  const char *v4;
  uint8_t buf[4];
  void *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  if ((objc_msgSend(a1, "containsString:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@%@"), CFSTR("at"), CFSTR("_"))) & 1) == 0)
  {
    if (!IMOSLoggingEnabled())
      return 0x7FFFFFFFFFFFFFFFLL;
    v3 = OSLogHandleForIMFoundationCategory();
    if (!os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
      return 0x7FFFFFFFFFFFFFFFLL;
    *(_DWORD *)buf = 138412290;
    v7 = a1;
    v4 = "Cannot find attachment index from file transfer guid as it is in temporary format: %@";
    goto LABEL_9;
  }
  v2 = (void *)objc_msgSend(a1, "componentsSeparatedByString:", CFSTR("_"));
  if ((unint64_t)objc_msgSend(v2, "count") <= 1)
  {
    if (!IMOSLoggingEnabled())
      return 0x7FFFFFFFFFFFFFFFLL;
    v3 = OSLogHandleForIMFoundationCategory();
    if (!os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
      return 0x7FFFFFFFFFFFFFFFLL;
    *(_DWORD *)buf = 138412290;
    v7 = a1;
    v4 = "Cannot find attachment index from file transfer guid as we cannot find string components separated by _: %@";
LABEL_9:
    _os_log_impl(&dword_19E239000, v3, OS_LOG_TYPE_INFO, v4, buf, 0xCu);
    return 0x7FFFFFFFFFFFFFFFLL;
  }
  return objc_msgSend((id)objc_msgSend(v2, "objectAtIndex:", 1), "integerValue");
}

void *IMAttachmentPreviewCacheFileURL(void *a1, uint64_t a2, uint64_t a3, int a4)
{
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  NSObject *v13;
  const char *v14;
  id v16;
  uint8_t buf[4];
  void *v18;
  __int16 v19;
  uint64_t v20;
  _QWORD v21[3];

  v21[2] = *MEMORY[0x1E0C80C00];
  v8 = (void *)objc_msgSend((id)IMPreviewCachesDirectoryWithAttachmentURL(a1), "path");
  if (!objc_msgSend(v8, "length"))
  {
    if (!IMOSLoggingEnabled())
      return 0;
    v13 = OSLogHandleForIMFoundationCategory();
    if (!os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
      return 0;
    *(_DWORD *)buf = 138412546;
    v18 = a1;
    v19 = 2112;
    v20 = a3;
    v14 = "Cache url could not be generated for url %@ and extension %@";
    goto LABEL_11;
  }
  v16 = 0;
  IMAttachmentFileNameAndExtension((void *)objc_msgSend(a1, "lastPathComponent"), (uint64_t *)&v16, 0);
  if (!v16)
  {
    if (!IMOSLoggingEnabled())
      return 0;
    v13 = OSLogHandleForIMFoundationCategory();
    if (!os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
      return 0;
    *(_DWORD *)buf = 138412546;
    v18 = a1;
    v19 = 2112;
    v20 = a3;
    v14 = "Filename could not be found for url %@ and extension %@";
LABEL_11:
    _os_log_impl(&dword_19E239000, v13, OS_LOG_TYPE_INFO, v14, buf, 0x16u);
    return 0;
  }
  v9 = objc_msgSend(v16, "stringByAppendingFormat:", CFSTR("%@.%@"), a2, a3);
  v21[0] = v8;
  v21[1] = v9;
  v10 = objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v21, 2);
  v11 = objc_msgSend(MEMORY[0x1E0CB3940], "pathWithComponents:", v10);
  v12 = (void *)objc_msgSend(MEMORY[0x1E0C99E98], "fileURLWithPath:isDirectory:", v11, 0);
  if (a4)
    objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager"), "createDirectoryAtURL:withIntermediateDirectories:attributes:error:", objc_msgSend(v12, "URLByDeletingLastPathComponent"), 1, 0, 0);
  return v12;
}

void *IMAttachmentPreviewMetadataFileURL(void *a1, uint64_t a2, int a3)
{
  return IMAttachmentPreviewCacheFileURL(a1, (uint64_t)CFSTR("-preview-metadata"), a2, a3);
}

void *IMAttachmentEmojiImagePreviewFileURL(void *a1, int a2)
{
  return IMAttachmentPreviewCacheFileURL(a1, (uint64_t)CFSTR("-genmoji"), (uint64_t)CFSTR("heic"), a2);
}

void *IMAttachmentPreviewFileURLFromURLWithSuffix(void *result, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    v3 = result;
    v4 = objc_msgSend(result, "pathExtension");
    v5 = objc_msgSend((id)objc_msgSend(v3, "path"), "stringByDeletingPathExtension");
    v6 = objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@-%@"), v5, a2), "stringByAppendingPathExtension:", v4);
    return (void *)objc_msgSend(MEMORY[0x1E0C99E98], "fileURLWithPath:", v6);
  }
  return result;
}

uint64_t IMAttachmentPersistentPath(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  void *v6;
  void *v8;
  unsigned __int8 v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  uint8_t buf[4];
  uint64_t v17;
  __int16 v18;
  void *v19;
  uint64_t v20;

  v6 = a2;
  v20 = *MEMORY[0x1E0C80C00];
  v8 = (void *)objc_msgSend(a2, "pathExtension");
  v9 = objc_msgSend(a1, "hash");
  if (!objc_msgSend(v8, "length"))
  {
    v10 = (void *)objc_msgSend((id)objc_msgSend(MEMORY[0x1E0D36A38], "defaultHFSFileManager"), "pathExtensionForUTIType:", a4);
    if (!objc_msgSend(v10, "length"))
      v10 = (void *)objc_msgSend((id)objc_msgSend(MEMORY[0x1E0D36A38], "defaultHFSFileManager"), "pathExtensionForMIMEType:", a3);
    if (objc_msgSend(v10, "length"))
      v6 = (void *)objc_msgSend(v6, "stringByAppendingPathExtension:", v10);
  }
  v11 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%02x"), v9);
  v12 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%02d"), v9 & 0xF);
  if (objc_msgSend(v6, "length") && objc_msgSend(a1, "length"))
    v13 = objc_msgSend((id)objc_msgSend((id)objc_msgSend((id)objc_msgSend((id)objc_msgSend(CFSTR("/var/mobile/Library/SMS/Attachments"), "stringByResolvingAndStandardizingPath"), "stringByAppendingPathComponent:", v11), "stringByAppendingPathComponent:", v12), "stringByAppendingPathComponent:", a1), "stringByAppendingPathComponent:", v6);
  else
    v13 = 0;
  if (IMOSLoggingEnabled())
  {
    v14 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138412546;
      v17 = v13;
      v18 = 2112;
      v19 = a1;
      _os_log_impl(&dword_19E239000, v14, OS_LOG_TYPE_INFO, "Resulting path %@   for transfer: %@", buf, 0x16u);
    }
  }
  return v13;
}

uint64_t sub_19E27A5BC(void *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  id v6;
  _QWORD v7[5];

  v7[4] = *MEMORY[0x1E0C80C00];
  v6 = 0;
  IMAttachmentFileNameAndExtension(a1, (uint64_t *)&v6, 0);
  v3 = objc_msgSend(v6, "stringByAppendingFormat:", CFSTR("-snapshot.%@"), a2);
  v7[0] = objc_msgSend(IMCachesDirectoryURL(), "path");
  v7[1] = CFSTR("Plugins");
  v7[2] = CFSTR("Snapshots");
  v7[3] = v3;
  v4 = objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v7, 4);
  return objc_msgSend(MEMORY[0x1E0CB3940], "pathWithComponents:", v4);
}

uint64_t IMPluginSnapshotCachesFileURL(void *a1, uint64_t a2)
{
  return objc_msgSend(MEMORY[0x1E0C99E98], "fileURLWithPath:isDirectory:", sub_19E27A5BC(a1, a2), 0);
}

uint64_t IMPluginSnapshotExistsInCache(void *a1, uint64_t a2)
{
  return objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager"), "fileExistsAtPath:", sub_19E27A5BC(a1, a2));
}

uint64_t IMUTTypeIsDynamic(void *a1, const char *a2)
{
  return objc_msgSend(a1, "hasPrefix:", CFSTR("dyn."));
}

uint64_t IMUTITypeIsNotPNG(uint64_t a1)
{
  if (qword_1EE503E20 != -1)
    dispatch_once(&qword_1EE503E20, &unk_1E3FB3468);
  return objc_msgSend((id)qword_1EE503E18, "containsObject:", a1);
}

id sub_19E27A728()
{
  id result;

  result = (id)objc_msgSend(MEMORY[0x1E0C99E60], "setWithObjects:", CFSTR("public.jpeg"), CFSTR("com.apple.quicktime"), CFSTR("com.compuserve.gif"), 0);
  qword_1EE503E18 = (uint64_t)result;
  return result;
}

uint64_t IMUTITypeIsSupportedByPhotos(uint64_t result)
{
  uint64_t v1;
  id v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _BYTE v13[128];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  if (result)
  {
    v1 = result;
    v2 = +[IMAttachmentUtilities photosSupportedPreviewGeneratorClasses](IMAttachmentUtilities, "photosSupportedPreviewGeneratorClasses");
    v3 = (void *)objc_msgSend(MEMORY[0x1E0C99E20], "set");
    v9 = 0u;
    v10 = 0u;
    v11 = 0u;
    v12 = 0u;
    v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v10;
      do
      {
        v7 = 0;
        do
        {
          if (*(_QWORD *)v10 != v6)
            objc_enumerationMutation(v2);
          v8 = objc_msgSend(*(id *)(*((_QWORD *)&v9 + 1) + 8 * v7), "UTITypes");
          if (v8)
            objc_msgSend(v3, "addObjectsFromArray:", v8);
          ++v7;
        }
        while (v5 != v7);
        v5 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
      }
      while (v5);
    }
    return objc_msgSend(v3, "containsObject:", v1);
  }
  return result;
}

BOOL IMUTITypeIsPhoto(_BOOL8 result)
{
  _BOOL8 v1;
  id v2;

  if (result)
  {
    v1 = result;
    v2 = +[IMImagePreviewGenerator UTITypes](IMImagePreviewGenerator, "UTITypes");
    return v2 && (objc_msgSend(v2, "containsObject:", v1) & 1) != 0;
  }
  return result;
}

BOOL IMUTITypeIsAnimatedImage(_BOOL8 result)
{
  _BOOL8 v1;
  id v2;

  if (result)
  {
    v1 = result;
    v2 = +[IMAnimatedImagePreviewGenerator UTITypes](IMAnimatedImagePreviewGenerator, "UTITypes");
    return v2 && (objc_msgSend(v2, "containsObject:", v1) & 1) != 0;
  }
  return result;
}

BOOL IMUTITypeIsVideo(_BOOL8 result)
{
  _BOOL8 v1;
  id v2;

  if (result)
  {
    v1 = result;
    v2 = +[IMMoviePreviewGenerator UTITypes](IMMoviePreviewGenerator, "UTITypes");
    return v2 && (objc_msgSend(v2, "containsObject:", v1) & 1) != 0;
  }
  return result;
}

BOOL IMUTITypeIsFileAttachment(_BOOL8 result)
{
  if (result)
    return !qword_1ECFC7218 || !objc_msgSend((id)qword_1ECFC7218, "objectForKey:", result);
  return result;
}

id sub_19E27A9B0()
{
  id result;

  result = (id)objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjectsAndKeys:", CFSTR("jpg"), CFSTR("public.jpeg"), CFSTR("jpeg"), CFSTR("com.apple.quicktime-movie"), CFSTR("mov"), CFSTR("public.png"), CFSTR("png"), CFSTR("com.compuserve.gif"), CFSTR("gif"), 0);
  qword_1ECFC71F0 = (uint64_t)result;
  return result;
}

double IMClientPreviewConstraints@<D0>(uint64_t a1@<X8>)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  float v6;
  double v7;
  float v8;
  double v9;
  float v10;
  float v11;
  double result;

  v2 = (void *)IMGetCachedDomainValueForKey();
  v3 = (void *)IMGetCachedDomainValueForKey();
  v4 = (void *)IMGetCachedDomainValueForKey();
  v5 = (void *)IMGetCachedDomainValueForKey();
  objc_msgSend(v4, "floatValue");
  v7 = v6;
  objc_msgSend(v5, "floatValue");
  v9 = v8;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_QWORD *)(a1 + 32) = 0;
  objc_msgSend(v2, "floatValue");
  *(double *)a1 = v10;
  objc_msgSend(v3, "floatValue");
  result = v11;
  *(double *)(a1 + 16) = v9;
  *(double *)(a1 + 24) = result;
  *(double *)(a1 + 8) = v7;
  *(_WORD *)(a1 + 32) = 0;
  *(_BYTE *)(a1 + 34) = 0;
  return result;
}

void IMClientPreviewStickerConstraints(uint64_t a1@<X8>)
{
  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  IMClientPreviewConstraints(a1);
  *(_BYTE *)(a1 + 32) = 1;
}

uint64_t IMUpdateTransferConstraintAndSizeKeys(id a1, void *a2, uint64_t a3)
{
  NSObject *v6;
  double v7;
  double v8;
  __int128 v9;
  id v10;
  double v11;
  id v12;
  void *v13;
  double v14;
  double v15;
  double v16;
  _QWORD v18[3];
  _QWORD v19[3];
  uint8_t buf[16];
  __int128 v21;
  uint64_t v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  if (IMOSLoggingEnabled())
  {
    v6 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138412290;
      *(_QWORD *)&buf[4] = a2;
      _os_log_impl(&dword_19E239000, v6, OS_LOG_TYPE_INFO, "Saving IMFileTransfer preview size %@", buf, 0xCu);
    }
  }
  memset(buf, 0, sizeof(buf));
  if (a2)
  {
    objc_msgSend(a2, "getValue:size:", buf, 16);
    v7 = *(double *)buf;
    if (*(double *)buf != 0.0)
    {
      v8 = *(double *)&buf[8];
      if (*(double *)&buf[8] != 0.0)
      {
        v9 = *(_OWORD *)(a3 + 16);
        *(_OWORD *)buf = *(_OWORD *)a3;
        v21 = v9;
        v22 = *(_QWORD *)(a3 + 32);
        v10 = IMPreviewConstraintsDictionaryFromConstraint((uint64_t)buf);
        v12 = v10;
        if (a1)
        {
          v13 = (void *)objc_msgSend(a1, "mutableCopy");
          objc_msgSend(v13, "setObject:forKey:", v12, CFSTR("pgenszc"));
          *(float *)&v14 = v7;
          objc_msgSend(v13, "setObject:forKey:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v14), CFSTR("pgensw"));
          *(float *)&v15 = v8;
          objc_msgSend(v13, "setObject:forKey:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v15), CFSTR("pgensh"));
          a1 = (id)objc_msgSend(v13, "copy");

        }
        else
        {
          v19[0] = v10;
          *(float *)&v11 = v7;
          v19[1] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v11, CFSTR("pgenszc"), CFSTR("pgensw"));
          v18[2] = CFSTR("pgensh");
          *(float *)&v16 = v8;
          v19[2] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v16);
          return objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v19, v18, 3);
        }
      }
    }
  }
  return (uint64_t)a1;
}

id IMStripTransferConstraintAndSizeKeys(id result)
{
  CFMutableDictionaryRef Mutable;
  void *v2;

  if (result)
  {
    Mutable = (CFMutableDictionaryRef)objc_msgSend(result, "mutableCopy");
    if (!Mutable)
      Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    -[__CFDictionary removeObjectForKey:](Mutable, "removeObjectForKey:", CFSTR("pgensw"));
    -[__CFDictionary removeObjectForKey:](Mutable, "removeObjectForKey:", CFSTR("pgensh"));
    -[__CFDictionary removeObjectForKey:](Mutable, "removeObjectForKey:", CFSTR("pgenszc"));
    v2 = (void *)-[__CFDictionary copy](Mutable, "copy");

    return v2;
  }
  return result;
}

uint64_t sub_19E27AE18()
{
  if (qword_1ECFC6F80 != -1)
    dispatch_once(&qword_1ECFC6F80, &unk_1E3FB2518);
  if (qword_1ECFC6F60)
    return *(_QWORD *)qword_1ECFC6F60;
  else
    return 0;
}

uint64_t sub_19E27AE68()
{
  uint64_t result;

  result = MEMORY[0x1A1AE7D58]("AVAssetPrefersSandboxedParsingOptionKey", CFSTR("AVFoundation"));
  qword_1ECFC6F60 = result;
  return result;
}

id sub_19E27AE94(char a1)
{
  void *v2;
  uint64_t v4;
  _QWORD v5[2];

  v5[1] = *MEMORY[0x1E0C80C00];
  v4 = *MEMORY[0x1E0C8ADA0];
  v5[0] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", 0xFFFFLL);
  v2 = (void *)objc_msgSend((id)objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v5, &v4, 1), "mutableCopy");
  if ((a1 & 1) == 0 && sub_19E27AE18())
    objc_msgSend(v2, "setObject:forKey:", MEMORY[0x1E0C9AAB0], sub_19E27AE18());
  return v2;
}

id IMAVURLAssetOptionsDefault()
{
  return sub_19E27AE94(0);
}

void *IMAVURLAssetOptionsWithExtraOptions(uint64_t a1)
{
  void *v2;

  v2 = (void *)objc_msgSend(sub_19E27AE94(0), "mutableCopy");
  objc_msgSend(v2, "addEntriesFromDictionary:", a1);
  return v2;
}

void *IMAVURLAssetOptionsWithExtraOptionsForWrite(uint64_t a1)
{
  void *v2;

  v2 = (void *)objc_msgSend(sub_19E27AE94(1), "mutableCopy");
  objc_msgSend(v2, "addEntriesFromDictionary:", a1);
  return v2;
}

id _avAssetForURL(void *a1)
{
  if (a1 && objc_msgSend(a1, "isFileURL"))
    return (id)objc_msgSend(objc_alloc(MEMORY[0x1E0C8B3C0]), "initWithURL:options:", a1, sub_19E27AE94(0));
  else
    return 0;
}

uint64_t sub_19E27B028(void *a1)
{
  void *v1;
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _BYTE v13[128];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v1 = (void *)objc_msgSend(a1, "tracks", 0);
  result = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
  if (result)
  {
    v3 = result;
    v4 = *(_QWORD *)v10;
    v5 = *MEMORY[0x1E0C8A808];
    v6 = *MEMORY[0x1E0C8A700];
    while (2)
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v10 != v4)
          objc_enumerationMutation(v1);
        v8 = *(void **)(*((_QWORD *)&v9 + 1) + 8 * v7);
        if (objc_msgSend((id)objc_msgSend(v8, "mediaType"), "isEqual:", v5)
          && (objc_msgSend(v8, "hasMediaCharacteristic:", v6) & 1) != 0)
        {
          return 1;
        }
        ++v7;
      }
      while (v3 != v7);
      result = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
      v3 = result;
      if (result)
        continue;
      break;
    }
  }
  return result;
}

void *IMIsHEVCWithAlphaVideo(void *a1)
{
  if (a1)
    return (void *)sub_19E27B028(a1);
  return a1;
}

uint64_t IMIsHEVCWithAlphaVideoURL(void *a1)
{
  id v1;

  if (a1 && (v1 = _avAssetForURL(a1)) != 0)
    return sub_19E27B028(v1);
  else
    return 0;
}

uint64_t IMEstimateDurationForSize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v6;
  void *v7;
  _QWORD v9[5];

  v6 = objc_alloc(MEMORY[0x1E0C8AFC0]);
  v7 = (void *)objc_msgSend(v6, "initWithAsset:presetName:", a1, *MEMORY[0x1E0C89E98]);
  objc_msgSend(v7, "setFileLengthLimit:", a2);
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 3221225472;
  v9[2] = sub_19E27B21C;
  v9[3] = &unk_1E3FB5910;
  v9[4] = a3;
  return objc_msgSend(v7, "estimateMaximumDurationWithCompletionHandler:", v9);
}

uint64_t sub_19E27B21C(uint64_t a1, CMTime *a2, uint64_t a3)
{
  uint64_t result;
  double Seconds;
  CMTime v6;

  if (a3)
    return (*(uint64_t (**)(double))(*(_QWORD *)(a1 + 32) + 16))(30.0);
  v6 = *a2;
  Seconds = CMTimeGetSeconds(&v6);
  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(double))(result + 16))(Seconds);
  return result;
}

uint64_t IMMaxBitDepthForVideo(void *a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  const __CFString *v6;
  uint64_t i;
  const opaqueCMFormatDescription *v8;
  const __CFNumber *Extension;
  int valuePtr;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _BYTE v17[128];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v1 = (void *)objc_msgSend(a1, "tracksWithMediaType:", *MEMORY[0x1E0C8A808]);
  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  v16 = 0u;
  v2 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
  if (!v2)
    return 0;
  v3 = v2;
  v4 = 0;
  v5 = *(_QWORD *)v14;
  v6 = (const __CFString *)*MEMORY[0x1E0CA2160];
  do
  {
    for (i = 0; i != v3; ++i)
    {
      if (*(_QWORD *)v14 != v5)
        objc_enumerationMutation(v1);
      v8 = (const opaqueCMFormatDescription *)objc_msgSend((id)objc_msgSend(*(id *)(*((_QWORD *)&v13 + 1) + 8 * i), "formatDescriptions"), "objectAtIndexedSubscript:", 0);
      if (v8)
      {
        Extension = (const __CFNumber *)CMFormatDescriptionGetExtension(v8, v6);
        if (Extension)
        {
          valuePtr = 0;
          CFNumberGetValue(Extension, kCFNumberIntType, &valuePtr);
          if (valuePtr > (int)v4 || (_DWORD)v4 == 0)
            v4 = valuePtr;
          else
            v4 = v4;
        }
      }
    }
    v3 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
  }
  while (v3);
  return v4;
}

void *IMIsAAVideo(void *a1)
{
  void *result;

  result = (void *)objc_msgSend(a1, "tracksWithMediaCharacteristic:", *MEMORY[0x1E0C8A718]);
  if (result)
    return (void *)(objc_msgSend(result, "count") != 0);
  return result;
}

void *IMIsAAVideoURL(void *result)
{
  if (result)
  {
    result = (void *)objc_msgSend(_avAssetForURL(result), "tracksWithMediaCharacteristic:", *MEMORY[0x1E0C8A718]);
    if (result)
      return (void *)(objc_msgSend(result, "count") != 0);
  }
  return result;
}

uint64_t IMIsSpatialMedia(uint64_t result)
{
  id v1;

  if (result)
  {
    v1 = (id)objc_msgSend(objc_alloc(MEMORY[0x1E0D75140]), "initWithMediaURL:detail:timeZoneLookup:shouldCache:", result, 1, 0, 0);
    return MEMORY[0x1E0DE7D20](v1, sel_isSpatialMedia);
  }
  return result;
}

void *IMCheckVideoURLProperties(void *result, _BYTE *a2, _BYTE *a3, _BYTE *a4)
{
  id v7;

  if (result)
  {
    v7 = _avAssetForURL(result);
    return (void *)IMCheckVideoProperties((uint64_t)v7, a2, a3, a4);
  }
  return result;
}

uint64_t IMCheckVideoProperties(uint64_t result, _BYTE *a2, _BYTE *a3, _BYTE *a4)
{
  const __CFString *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  uint64_t v12;
  const opaqueCMFormatDescription *v13;
  void *Extension;
  id obj;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  _BYTE v24[128];
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  if (result)
  {
    if (a2)
      *a2 = 0;
    if (a3)
      *a3 = 0;
    if (a4)
      *a4 = 0;
    v22 = 0u;
    v23 = 0u;
    v20 = 0u;
    v21 = 0u;
    obj = (id)objc_msgSend((id)result, "tracksWithMediaType:", *MEMORY[0x1E0C8A808]);
    result = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v20, v24, 16);
    v16 = result;
    if (result)
    {
      v17 = *(_QWORD *)v21;
      v19 = *MEMORY[0x1E0C8A700];
      v7 = (const __CFString *)*MEMORY[0x1E0CA8E98];
      v8 = *MEMORY[0x1E0CA2318];
      v18 = *MEMORY[0x1E0CA2338];
      while (2)
      {
        v9 = 0;
        do
        {
          if (*(_QWORD *)v21 != v17)
            objc_enumerationMutation(obj);
          v10 = *(void **)(*((_QWORD *)&v20 + 1) + 8 * v9);
          v11 = (void *)objc_msgSend(v10, "formatDescriptions");
          if (objc_msgSend(v11, "count"))
          {
            v12 = 0;
            do
            {
              result = objc_msgSend(v11, "objectAtIndex:", v12);
              v13 = (const opaqueCMFormatDescription *)result;
              if (a2)
              {
                result = CMFormatDescriptionGetMediaSubType((CMFormatDescriptionRef)result);
                if ((_DWORD)result == 1752589105)
                  *a2 = 1;
              }
              if (a3)
              {
                result = objc_msgSend(v10, "hasMediaCharacteristic:", v19);
                if ((_DWORD)result)
                  *a3 = 1;
              }
              if (a4)
              {
                Extension = (void *)CMFormatDescriptionGetExtension(v13, v7);
                result = objc_msgSend(Extension, "isEqualToString:", v8);
                if ((result & 1) != 0 || (result = objc_msgSend(Extension, "isEqualToString:", v18), (_DWORD)result))
                  *a4 = 1;
              }
              if ((!a2 || *a2) && (!a3 || *a3) && (!a4 || *a4))
                return result;
            }
            while (objc_msgSend(v11, "count") > (unint64_t)++v12);
          }
          ++v9;
        }
        while (v9 != v16);
        result = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v20, v24, 16);
        v16 = result;
        if (result)
          continue;
        break;
      }
    }
  }
  return result;
}

uint64_t sub_19E27B700()
{
  uint64_t v0;
  void *v1;

  v0 = objc_msgSend((id)objc_msgSend(MEMORY[0x1E0D34E78], "sharedInstanceForBagType:", 1), "objectForKey:", CFSTR("md-max-size-for-pasted-movie-write"));
  if (v0 && (v1 = (void *)v0, (objc_opt_respondsToSelector() & 1) != 0))
    return objc_msgSend(v1, "unsignedLongValue");
  else
    return 262144000;
}

uint64_t IMIsHEVCWithAlphaVideoFromData(void *a1, void *a2)
{
  unint64_t v4;
  unint64_t v5;
  NSObject *v6;
  uint64_t v7;
  unint64_t v8;
  NSObject *v9;
  const char *v10;
  NSObject *v11;
  uint32_t v12;
  void *v13;
  void *v14;
  uint64_t v15;
  void *v16;
  id v17;
  NSObject *v18;
  NSObject *v20;
  const __CFString *v21;
  unint64_t v22;
  uint8_t buf[4];
  unint64_t v24;
  __int16 v25;
  unint64_t v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v4 = objc_msgSend(a1, "length");
  v5 = -[objc_class _dataLengthLimit](+[IMAttachmentUtilities __AVDataAssetClass](IMAttachmentUtilities, "__AVDataAssetClass"), "_dataLengthLimit");
  if (IMOSLoggingEnabled())
  {
    v6 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 134218240;
      v24 = v4;
      v25 = 2048;
      v26 = v5;
      _os_log_impl(&dword_19E239000, v6, OS_LOG_TYPE_INFO, "Check for using AVDataAsset for pasted item size: %lu limit: %lu", buf, 0x16u);
    }
  }
  if (a1 && v4 && v4 <= v5)
    return sub_19E27B028((void *)objc_msgSend(MEMORY[0x1E0C8AF90], "assetWithData:contentType:options:", a1, *MEMORY[0x1E0C8A2E8], 0));
  v8 = sub_19E27B700();
  if (v4 > v8)
  {
    if (!IMOSLoggingEnabled())
      return 0;
    v9 = OSLogHandleForIMFoundationCategory();
    if (!os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
      return 0;
    *(_DWORD *)buf = 134218240;
    v24 = v4;
    v25 = 2048;
    v26 = v8;
    v10 = "Skipping write of file (too large) size: %lu limit: %lu";
    goto LABEL_12;
  }
  v13 = (void *)objc_msgSend(a2, "im_lastPathComponent");
  v14 = v13;
  if (!v13 || !objc_msgSend(v13, "length"))
  {
    if (!IMOSLoggingEnabled())
      return 0;
    v18 = OSLogHandleForIMFoundationCategory();
    if (!os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
      return 0;
    *(_DWORD *)buf = 138412290;
    v24 = (unint64_t)a2;
    v10 = "File name %@ is invalid";
    v11 = v18;
    v12 = 12;
    goto LABEL_21;
  }
  v15 = objc_msgSend((id)objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager"), "im_randomTemporaryFileURLWithFileName:", v14), "path");
  v22 = 0;
  if (!objc_msgSend(a1, "writeToFile:options:error:", v15, 2, &v22))
  {
    if (!IMOSLoggingEnabled())
      return 0;
    v9 = OSLogHandleForIMFoundationCategory();
    if (!os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
      return 0;
    *(_DWORD *)buf = 138412546;
    v24 = v15;
    v25 = 2112;
    v26 = v22;
    v10 = "Failed to write file %@, error %@";
LABEL_12:
    v11 = v9;
    v12 = 22;
LABEL_21:
    _os_log_impl(&dword_19E239000, v11, OS_LOG_TYPE_INFO, v10, buf, v12);
    return 0;
  }
  v16 = (void *)objc_msgSend(MEMORY[0x1E0C99E98], "fileURLWithPath:", v15);
  v17 = _avAssetForURL(v16);
  if (v17)
    v7 = sub_19E27B028(v17);
  else
    v7 = 0;
  if (IMOSLoggingEnabled())
  {
    v20 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
    {
      v21 = CFSTR("NO");
      if ((_DWORD)v7)
        v21 = CFSTR("YES");
      *(_DWORD *)buf = 138412546;
      v24 = (unint64_t)v16;
      v25 = 2112;
      v26 = (unint64_t)v21;
      _os_log_impl(&dword_19E239000, v20, OS_LOG_TYPE_INFO, "File for pasted item: %@, isHEVCWithAlpha: %@", buf, 0x16u);
    }
  }
  objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager"), "removeItemAtURL:error:", v16, 0);
  return v7;
}

const __CFURL *sub_19E27BB08(const __CFURL *a1)
{
  CGImageSource *v2;
  CGImageSource *v3;
  const __CFDictionary *v4;
  CFDictionaryRef v5;
  CGImageRef ThumbnailAtIndex;
  CGImage *v7;
  const __CFURL *v8;
  const __CFURL *v9;
  uint64_t v10;
  const __CFURL *v11;
  CGImageDestination *v12;
  NSObject *v13;
  NSObject *v14;
  NSObject *v15;
  int v17;
  const __CFURL *v18;
  __int16 v19;
  uint64_t v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v2 = CGImageSourceCreateWithURL(a1, 0);
    if (v2)
    {
      v3 = v2;
      v4 = (const __CFDictionary *)MEMORY[0x1E0C9AA70];
      v5 = CGImageSourceCopyPropertiesAtIndex(v2, 0, MEMORY[0x1E0C9AA70]);
      ThumbnailAtIndex = CGImageSourceCreateThumbnailAtIndex(v3, 0, v4);
      if (!ThumbnailAtIndex)
      {
        v11 = 0;
LABEL_21:
        CFRelease(v3);
        CFRelease(v5);
        return v11;
      }
      v7 = ThumbnailAtIndex;
      v8 = (const __CFURL *)objc_msgSend((id)objc_msgSend((id)-[__CFURL im_lastPathComponent](a1, "im_lastPathComponent"), "stringByDeletingPathExtension"), "stringByAppendingString:", CFSTR(".JPG"));
      v9 = v8;
      if (v8 && -[__CFURL length](v8, "length"))
      {
        v10 = objc_msgSend((id)objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager"), "im_randomTemporaryFileURLWithFileName:", v9), "path");
        v11 = (const __CFURL *)objc_msgSend(MEMORY[0x1E0C99E98], "fileURLWithPath:", v10);
        v12 = CGImageDestinationCreateWithURL(v11, (CFStringRef)objc_msgSend((id)*MEMORY[0x1E0CEC530], "identifier"), 1uLL, 0);
        CGImageDestinationAddImage(v12, v7, v5);
        if (!CGImageDestinationFinalize(v12))
        {
          if (IMOSLoggingEnabled())
          {
            v13 = OSLogHandleForIMFoundationCategory();
            if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
            {
              v17 = 138412546;
              v18 = a1;
              v19 = 2112;
              v20 = v10;
              _os_log_impl(&dword_19E239000, v13, OS_LOG_TYPE_INFO, "Failed to save embedded JPEG from PRO %@ to %@", (uint8_t *)&v17, 0x16u);
            }
          }
          v11 = 0;
        }
        CGImageRelease(v7);
        CFRelease(v12);
        goto LABEL_21;
      }
      if (IMOSLoggingEnabled())
      {
        v15 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
        {
          v17 = 138412546;
          v18 = v9;
          v19 = 2112;
          v20 = (uint64_t)a1;
          _os_log_impl(&dword_19E239000, v15, OS_LOG_TYPE_INFO, "Pro file name %@ is invalid from asset %@", (uint8_t *)&v17, 0x16u);
        }
      }
      CFRelease(v3);
      CGImageRelease(v7);
      CFRelease(v5);
    }
    else if (IMOSLoggingEnabled())
    {
      v14 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
      {
        v17 = 138412290;
        v18 = a1;
        _os_log_impl(&dword_19E239000, v14, OS_LOG_TYPE_INFO, "Unable to create image source from %@ to extract embedded JPEG", (uint8_t *)&v17, 0xCu);
      }
    }
  }
  return 0;
}

const __CFURL *IMGetEmbeddedFromProIfPossible(void *a1)
{
  const __CFURL *v2;
  NSObject *v3;
  NSObject *v4;
  _QWORD v6[7];
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  char v10;
  void *v11;
  uint8_t buf[4];
  const __CFURL *v13;
  __int16 v14;
  void *v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  if (!objc_msgSend((id)objc_msgSend(a1, "absoluteString"), "length"))
    return 0;
  v11 = 0;
  v7 = 0;
  v8 = &v7;
  v9 = 0x2020000000;
  v10 = 0;
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v6[2] = sub_19E27C024;
  v6[3] = &unk_1E3FB5938;
  v6[5] = 0;
  v6[6] = &v7;
  v6[4] = a1;
  objc_msgSend(MEMORY[0x1E0D75100], "queryImagePropertiesOfFileAtURL:error:block:", a1, &v11, v6);
  if (*((_BYTE *)v8 + 24))
  {
    v2 = sub_19E27BB08((const __CFURL *)a1);
    if (IMOSLoggingEnabled())
    {
      v3 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412546;
        v13 = v2;
        v14 = 2112;
        v15 = a1;
        _os_log_impl(&dword_19E239000, v3, OS_LOG_TYPE_INFO, "Extracted embedded JPEG %@ from pro image at %@", buf, 0x16u);
      }
    }
  }
  else
  {
    if (IMOSLoggingEnabled())
    {
      v4 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412546;
        v13 = (const __CFURL *)a1;
        v14 = 2112;
        v15 = v11;
        _os_log_impl(&dword_19E239000, v4, OS_LOG_TYPE_INFO, "Extracted URL %@ with error %@", buf, 0x16u);
      }
    }
    v2 = 0;
  }
  _Block_object_dispose(&v7, 8);
  return v2;
}

void sub_19E27C024(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void *v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint8_t buf[4];
  uint64_t v11;
  __int16 v12;
  uint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v9 = 0;
  v4 = objc_msgSend(MEMORY[0x1E0CEC3F8], "typeWithFilenameExtension:", objc_msgSend(*(id *)(a1 + 32), "pathExtension"));
  v5 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0D75140]), "initWithImageProperties:contentType:timeZoneLookup:", a2, v4, 0);
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = objc_msgSend((id)objc_msgSend(MEMORY[0x1E0D75130], "hasEmbeddedJPEGSuitableForDerivativesInImageAtURL:metadata:error:", *(_QWORD *)(a1 + 32), v5, &v9), "BOOLValue");
  if (v9)
  {
    if (IMOSLoggingEnabled())
    {
      v6 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
      {
        v7 = *(_QWORD *)(a1 + 32);
        v8 = *(_QWORD *)(a1 + 40);
        *(_DWORD *)buf = 138412546;
        v11 = v7;
        v12 = 2112;
        v13 = v8;
        _os_log_impl(&dword_19E239000, v6, OS_LOG_TYPE_INFO, "Extracted URL %@ with image error %@", buf, 0x16u);
      }
    }
  }
  if (v5)

}

BOOL IMIsImageURLAScreenshot(void *a1)
{
  NSObject *v2;
  _BOOL8 v3;
  _QWORD v5[5];
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint8_t buf[24];
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  if (!+[IMImageUtilities isCroppingAvoidanceEnabled](IMImageUtilities, "isCroppingAvoidanceEnabled")
    || !objc_msgSend((id)objc_msgSend(a1, "absoluteString"), "length"))
  {
    return 0;
  }
  v10 = 0;
  v6 = 0;
  v7 = &v6;
  v8 = 0x2020000000;
  v9 = 0;
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 3221225472;
  v5[2] = sub_19E27C2E0;
  v5[3] = &unk_1E3FB5960;
  v5[4] = &v6;
  if ((objc_msgSend(MEMORY[0x1E0D75100], "queryImagePropertiesOfFileAtURL:error:block:", a1, &v10, v5) & 1) == 0)
  {
    v2 = IMLogHandleForCategory("IMAttachmentUtilities");
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
      sub_19E36C174(objc_msgSend((id)objc_msgSend(a1, "standardizedURL"), "path"), &v10, buf, v2);
  }
  v3 = *((_BYTE *)v7 + 24) != 0;
  _Block_object_dispose(&v6, 8);
  return v3;
}

void sub_19E27C2B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  _Unwind_Resume(exception_object);
}

uint64_t sub_19E27C2E0(uint64_t a1, void *a2)
{
  uint64_t result;
  void *v4;

  result = objc_msgSend(a2, "objectForKeyedSubscript:", *MEMORY[0x1E0CBCB48]);
  if (result)
  {
    v4 = (void *)result;
    objc_opt_class();
    result = objc_opt_isKindOfClass();
    if ((result & 1) != 0)
    {
      result = objc_msgSend((id)objc_msgSend(v4, "objectForKeyedSubscript:", *MEMORY[0x1E0CBCCA8]), "isEqualToString:", CFSTR("Screenshot"));
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
    }
  }
  return result;
}

uint64_t sub_19E27C3A0()
{
  uint64_t result;

  result = MEMORY[0x1A1AE7D4C](CFSTR("AVDataAsset"), CFSTR("AVFoundation"));
  qword_1EE503E28 = result;
  return result;
}

intptr_t sub_19E27C6B0(uint64_t a1)
{
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void sub_19E27CA08(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_19E27CA34(uint64_t a1, int a2)
{
  if (a2)
    JUMPOUT(0x19E27CA40);
  JUMPOUT(0x19E27CA2CLL);
}

uint64_t sub_19E27CD5C(uint64_t a1, void *a2)
{
  void *v3;
  uint64_t v4;

  objc_msgSend(a2, "service");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "isEqualToString:", *(_QWORD *)(a1 + 32));

  return v4;
}

const __CFString *IMStringFromAssociatedMessageType(uint64_t a1)
{
  const __CFString *v1;
  const __CFString *v2;
  const __CFString *v3;
  const __CFString *v4;
  const __CFString *result;

  if (a1 > 1000)
  {
    switch(a1)
    {
      case 2000:
        result = CFSTR("IMAssociatedMessageTypeAcknowledgmentHeart");
        break;
      case 2001:
        result = CFSTR("IMAssociatedMessageTypeAcknowledgmentThumbsUp");
        break;
      case 2002:
        result = CFSTR("IMAssociatedMessageTypeAcknowledgmentThumbsDown");
        break;
      case 2003:
        result = CFSTR("IMAssociatedMessageTypeAcknowledgmentHa");
        break;
      case 2004:
        result = CFSTR("IMAssociatedMessageTypeAcknowledgmentExclamation");
        break;
      case 2005:
        result = CFSTR("IMAssociatedMessageTypeAcknowledgmentQuestionMark");
        break;
      case 2006:
        result = CFSTR("IMAssociatedMessageTypeAcknowledgmentEmoji");
        break;
      case 2007:
        result = CFSTR("IMAssociatedMessageTypeAcknowledgmentSticker");
        break;
      default:
        switch(a1)
        {
          case 3000:
            result = CFSTR("IMAssociatedMessageTypeAcknowledgmentHeartRemoved");
            break;
          case 3001:
            result = CFSTR("IMAssociatedMessageTypeAcknowledgmentThumbsUpRemoved");
            break;
          case 3002:
            result = CFSTR("IMAssociatedMessageTypeAcknowledgmentThumbsDownRemoved");
            break;
          case 3003:
            result = CFSTR("IMAssociatedMessageTypeAcknowledgmentHaRemoved");
            break;
          case 3004:
            result = CFSTR("IMAssociatedMessageTypeAcknowledgmentExclamationRemoved");
            break;
          case 3005:
            result = CFSTR("IMAssociatedMessageTypeAcknowledgmentQuestionMarkRemoved");
            break;
          case 3006:
            result = CFSTR("IMAssociatedMessageTypeAcknowledgmentEmojiRemoved");
            break;
          case 3007:
            result = CFSTR("IMAssociatedMessageTypeAcknowledgmentStickerRemoved");
            break;
          default:
            if (a1 == 1001)
              result = CFSTR("IMAssociatedMessageTypeEmojiSticker");
            else
              result = 0;
            break;
        }
        break;
    }
  }
  else
  {
    v1 = CFSTR("IMAssociatedMessageTypeBreadcrumbConsumed");
    v2 = CFSTR("IMAssociatedMessageTypeSticker");
    if (a1 != 1000)
      v2 = 0;
    if (a1 != 3)
      v1 = v2;
    v3 = CFSTR("IMAssociatedMessageTypeUnspecified");
    v4 = CFSTR("IMAssociatedMessageTypeBreadcrumbUnconsumed");
    if (a1 != 2)
      v4 = 0;
    if (a1)
      v3 = v4;
    if (a1 <= 2)
      return v3;
    else
      return v1;
  }
  return result;
}

uint64_t IMCounterpartAcknowledgmentTypeForAcknowledgmentType(uint64_t a1)
{
  uint64_t result;

  switch(a1)
  {
    case 2000:
      result = 3000;
      break;
    case 2001:
      result = 3001;
      break;
    case 2002:
      result = 3002;
      break;
    case 2003:
      result = 3003;
      break;
    case 2004:
      result = 3004;
      break;
    case 2005:
      result = 3005;
      break;
    case 2006:
      result = 3006;
      break;
    case 2007:
      result = 3007;
      break;
    default:
      switch(a1)
      {
        case 3000:
          result = 2000;
          break;
        case 3001:
          result = 2001;
          break;
        case 3002:
          result = 2002;
          break;
        case 3003:
          result = 2003;
          break;
        case 3004:
          result = 2004;
          break;
        case 3005:
          result = 2005;
          break;
        case 3006:
          result = 2006;
          break;
        case 3007:
          result = 2007;
          break;
        default:
          result = 0;
          break;
      }
      break;
  }
  return result;
}

uint64_t sub_19E27D16C(void *a1)
{
  uint64_t result;

  result = objc_msgSend(a1, "longLongValue");
  if (result > 2999)
  {
    if ((unint64_t)(result - 3000) >= 8)
      return 0;
  }
  else if ((unint64_t)(result - 2000) >= 8
         && ((unint64_t)result > 3 || result == 1)
         && (unint64_t)(result - 1000) >= 2)
  {
    return 0;
  }
  return result;
}

uint64_t sub_19E27F808(void *a1, uint64_t a2, uint64_t a3)
{
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v8;

  v8 = 0;
  objc_msgSend(a1, "attributesOfItemAtPath:error:", a3, &v8);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "objectForKeyedSubscript:", *MEMORY[0x1E0CB2AF0]);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = v4;
  v6 = -1;
  if (v3 && v4)
    v6 = objc_msgSend(v4, "longLongValue");

  return v6;
}

void *IMCopySafeNameOfFontFamilyName(void *result)
{
  void *v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;

  if (result)
  {
    v1 = result;
    v2 = (void *)MEMORY[0x1A1AE8394]();
    v3 = objc_alloc_init(MEMORY[0x1E0CB3780]);
    v4 = objc_msgSend(MEMORY[0x1E0CB3500], "whitespaceCharacterSet");
    objc_msgSend(v3, "formUnionWithCharacterSet:", objc_msgSend(MEMORY[0x1E0CB3500], "controlCharacterSet"));
    objc_msgSend(v3, "formUnionWithCharacterSet:", objc_msgSend(MEMORY[0x1E0CB3500], "newlineCharacterSet"));
    objc_msgSend(v3, "addCharactersInString:", CFSTR("&%;:,()'\\\"<>@"));
    if (objc_msgSend(v1, "rangeOfCharacterFromSet:", v3) != 0x7FFFFFFFFFFFFFFFLL)
      v1 = (void *)objc_msgSend((id)objc_msgSend(v1, "componentsSeparatedByCharactersInSet:", v3), "__imFirstObject");
    v5 = objc_msgSend((id)objc_msgSend(v1, "stringByTrimmingCharactersInSet:", v4), "copy");

    objc_autoreleasePoolPop(v2);
    return (void *)v5;
  }
  return result;
}

uint64_t IMCopyNormalizedAttributes(void *a1, int a2, int a3)
{
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t i;
  void *v13;
  void *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _BYTE v19[128];
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  if ((a2 & 1) == 0 && (a3 & 1) == 0)
    return objc_msgSend(a1, "copy");
  v7 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99E08]), "initWithCapacity:", objc_msgSend(a1, "count"));
  v15 = 0u;
  v16 = 0u;
  v17 = 0u;
  v18 = 0u;
  v8 = (void *)objc_msgSend(a1, "keyEnumerator", 0);
  v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
  if (v9)
  {
    v10 = v9;
    v11 = *(_QWORD *)v16;
    do
    {
      for (i = 0; i != v10; ++i)
      {
        if (*(_QWORD *)v16 != v11)
          objc_enumerationMutation(v8);
        v13 = *(void **)(*((_QWORD *)&v15 + 1) + 8 * i);
        v14 = (void *)objc_msgSend(a1, "objectForKey:", v13);
        if (a2)
          v13 = (void *)objc_msgSend(v13, "lowercaseString");
        if (a3)
          v14 = (void *)objc_msgSend(v14, "lowercaseString");
        objc_msgSend(v7, "setObject:forKey:", v14, v13);
      }
      v10 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
    }
    while (v10);
  }
  return (uint64_t)v7;
}

uint64_t IMCreateEscapedAttributeValueFromString(void *a1)
{
  return IMCreateEscapedStringFromString(a1, CFSTR(" "), CFSTR(" "), CFSTR("&apos;"), CFSTR("&quot;"));
}

uint64_t IMCreateEscapedStringFromString(void *a1, __CFString *a2, __CFString *a3, __CFString *a4, __CFString *a5)
{
  uint64_t v10;
  _WORD *v11;
  _WORD *v12;
  id v13;
  uint64_t v14;
  uint64_t v16;

  if (!a1)
    return 0;
  v10 = objc_msgSend(a1, "length");
  v11 = malloc_type_malloc(2 * v10 + 2, 0x1000040BDFB0063uLL);
  objc_msgSend(a1, "getCharacters:", v11);
  v11[v10] = 0;
  v16 = 0;
  sub_19E27176C((uint64_t)v11, 0, &v16, a2, a3, a4, a5);
  if (v16)
  {
    v12 = malloc_type_malloc(2 * v16, 0x1000040BDFB0063uLL);
    sub_19E27176C((uint64_t)v11, v12, &v16, a2, a3, a4, a5);
    v13 = objc_alloc(MEMORY[0x1E0CB3940]);
    v14 = objc_msgSend(v13, "initWithCharactersNoCopy:length:freeWhenDone:", v12, v16, 1);
  }
  else
  {
    v14 = 0;
  }
  free(v11);
  return v14;
}

id IMCreateSuperFormatStringFromPlainTextString(void *a1)
{
  uint64_t v1;
  void *v2;
  id v4;

  v1 = objc_msgSend(a1, "__stringByStrippingControlCharacters");
  v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3498]), "initWithString:", v1);
  v4 = (id)objc_msgSend(v2, "__im_attributedStringByAssigningMessagePartNumbers");

  return v4;
}

id IMCreateSuperFormatStringWithoutFileTransfers(void *a1, void *a2)
{
  void *v3;
  unint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t i;
  void *v11;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _BYTE v17[128];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v3 = (void *)objc_msgSend(a1, "mutableCopy");
  if (objc_msgSend(v3, "length"))
  {
    v4 = 0;
    v5 = *MEMORY[0x1E0D36430];
    do
    {
      if (objc_msgSend((id)objc_msgSend(v3, "string"), "characterAtIndex:", v4) == 65532)
      {
        v6 = (void *)objc_msgSend(v3, "attributesAtIndex:effectiveRange:", v4, 0);
        v13 = 0u;
        v14 = 0u;
        v15 = 0u;
        v16 = 0u;
        v7 = objc_msgSend(a2, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
        if (v7)
        {
          v8 = v7;
          v9 = *(_QWORD *)v14;
          while (2)
          {
            for (i = 0; i != v8; ++i)
            {
              if (*(_QWORD *)v14 != v9)
                objc_enumerationMutation(a2);
              if (objc_msgSend((id)objc_msgSend(v6, "objectForKey:", v5), "isEqualToString:", *(_QWORD *)(*((_QWORD *)&v13 + 1) + 8 * i)))
              {
                objc_msgSend(v3, "deleteCharactersInRange:", v4--, 1);
                goto LABEL_14;
              }
            }
            v8 = objc_msgSend(a2, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
            if (v8)
              continue;
            break;
          }
        }
      }
LABEL_14:
      ++v4;
    }
    while (v4 < objc_msgSend(v3, "length"));
  }
  v11 = (void *)objc_msgSend(v3, "__im_attributedStringByAssigningMessagePartNumbers");

  return v11;
}

CFStringTokenizerRef IMStringTokenizerFindTokensInString(void *a1, __CFString *a2)
{
  CFStringTokenizerRef result;
  __CFStringTokenizer *v5;
  int v6;
  CFRange CurrentTokenRange;
  CFIndex length;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t i;
  uint64_t v14;
  int v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  _BYTE v21[128];
  uint64_t v22;
  CFRange v23;

  v22 = *MEMORY[0x1E0C80C00];
  v23.length = -[__CFString length](a2, "length");
  v23.location = 0;
  result = CFStringTokenizerCreate(0, a2, v23, 4uLL, 0);
  if (result)
  {
    v5 = result;
    v6 = 0;
    while (CFStringTokenizerAdvanceToNextToken(v5))
    {
      CurrentTokenRange = CFStringTokenizerGetCurrentTokenRange(v5);
      length = CurrentTokenRange.length;
      if (!qword_1EE503E40)
      {
        qword_1EE503E40 = (uint64_t)objc_alloc_init(MEMORY[0x1E0CB3780]);
        objc_msgSend((id)qword_1EE503E40, "addCharactersInRange:", 39, 1);
        objc_msgSend((id)qword_1EE503E40, "addCharactersInRange:", 8217, 1);
      }
      v9 = -[__CFString rangeOfCharacterFromSet:options:range:](a2, "rangeOfCharacterFromSet:options:range:");
      v17 = 0u;
      v18 = 0u;
      if (v9 != 0x7FFFFFFFFFFFFFFFLL)
        length = v9 - CurrentTokenRange.location;
      v19 = 0uLL;
      v20 = 0uLL;
      v10 = objc_msgSend(a1, "countByEnumeratingWithState:objects:count:", &v17, v21, 16);
      if (v10)
      {
        v11 = v10;
        v16 = v6;
        v12 = *(_QWORD *)v18;
        while (2)
        {
          for (i = 0; i != v11; ++i)
          {
            if (*(_QWORD *)v18 != v12)
              objc_enumerationMutation(a1);
            if (-[__CFString rangeOfString:options:range:](a2, "rangeOfString:options:range:", *(_QWORD *)(*((_QWORD *)&v17 + 1) + 8 * i), 393, CurrentTokenRange.location, length) != 0x7FFFFFFFFFFFFFFFLL&& v14 == length)
            {
              v6 = 1;
              goto LABEL_20;
            }
          }
          v11 = objc_msgSend(a1, "countByEnumeratingWithState:objects:count:", &v17, v21, 16);
          if (v11)
            continue;
          break;
        }
        v6 = v16;
      }
LABEL_20:
      ;
    }
    CFRelease(v5);
    return (CFStringTokenizerRef)(v6 & 1);
  }
  return result;
}

uint64_t _iMessageTelemetryLogHandle()
{
  if (qword_1ECFC6EF8 != -1)
    dispatch_once(&qword_1ECFC6EF8, &unk_1E3FB3488);
  return qword_1ECFC6EF0;
}

os_log_t sub_19E28005C()
{
  os_log_t result;

  result = os_log_create("com.apple.Messages.telemetry", "iMessage");
  qword_1ECFC6EF0 = (uint64_t)result;
  return result;
}

os_log_t sub_19E280088()
{
  os_log_t result;

  result = os_log_create("com.apple.Messages.telemetry", "Chat");
  qword_1ECFC6FE8 = (uint64_t)result;
  return result;
}

id _MessageGUIDToSignpostId(void *a1)
{
  id result;
  void *v3;
  uint64_t v4;
  uint64_t v5;

  result = (id)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3A28]), "initWithUUIDString:", a1);
  if (result)
  {
    v3 = result;
    result = (id)objc_msgSend(a1, "length");
    if (result)
    {
      v4 = 0;
      v5 = 0;
      objc_msgSend(v3, "getUUIDBytes:", &v4);
      return (id)(v5 & 0xFFFFFFFFFFFFFFFCLL | 1);
    }
  }
  return result;
}

void _signpostSendMessage(void *a1, int a2, unsigned int a3)
{
  id v5;
  os_signpost_id_t v6;
  uint64_t v7;
  _BOOL4 v8;
  int v9;
  const char *v10;
  NSObject *v11;
  os_signpost_type_t v12;
  os_signpost_id_t v13;
  uint32_t v14;
  _DWORD v15[2];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v5 = _MessageGUIDToSignpostId(a1);
  if (v5)
  {
    v6 = (os_signpost_id_t)v5;
    if (qword_1ECFC6FF0 != -1)
      dispatch_once(&qword_1ECFC6FF0, &unk_1E3FB4268);
    v7 = qword_1ECFC6FE8;
    if (qword_1ECFC6FE8)
    {
      v8 = os_signpost_enabled((os_log_t)qword_1ECFC6FE8);
      if (a2)
      {
        if (!v8)
          return;
        if (a3 >= 0xA)
          v9 = 10;
        else
          v9 = a3;
        v15[0] = 67240192;
        v15[1] = v9;
        v10 = "numberOfFiles=%{public, signpost.telemetry:number1}u enableTelemetry=YES ";
        v11 = v7;
        v12 = OS_SIGNPOST_INTERVAL_BEGIN;
        v13 = v6;
        v14 = 8;
      }
      else
      {
        if (!v8)
          return;
        LOWORD(v15[0]) = 0;
        v10 = " enableTelemetry=YES ";
        v11 = v7;
        v12 = OS_SIGNPOST_INTERVAL_END;
        v13 = v6;
        v14 = 2;
      }
      _os_signpost_emit_with_name_impl(&dword_19E239000, v11, v12, v13, "SendMessage", v10, (uint8_t *)v15, v14);
    }
  }
}

void _signpostSendFileMessage(void *a1, int a2)
{
  id v3;
  os_signpost_id_t v4;
  uint64_t v5;
  _BOOL4 v6;
  uint8_t *v7;
  NSObject *v8;
  os_signpost_type_t v9;
  __int16 v10;
  __int16 v11;

  v3 = _MessageGUIDToSignpostId(a1);
  if (v3)
  {
    v4 = (os_signpost_id_t)v3;
    if (objc_msgSend((id)objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB34D0], "mainBundle"), "bundleIdentifier"), "isEqualToString:", CFSTR("com.apple.MobileSMS")))
    {
      if (qword_1ECFC6FF0 != -1)
        dispatch_once(&qword_1ECFC6FF0, &unk_1E3FB4268);
      v5 = qword_1ECFC6FE8;
      if (qword_1ECFC6FE8)
      {
        v6 = os_signpost_enabled((os_log_t)qword_1ECFC6FE8);
        if (a2)
        {
          if (!v6)
            return;
          v11 = 0;
          v7 = (uint8_t *)&v11;
          v8 = v5;
          v9 = OS_SIGNPOST_INTERVAL_BEGIN;
        }
        else
        {
          if (!v6)
            return;
          v10 = 0;
          v7 = (uint8_t *)&v10;
          v8 = v5;
          v9 = OS_SIGNPOST_INTERVAL_END;
        }
        _os_signpost_emit_with_name_impl(&dword_19E239000, v8, v9, v4, "SendFileMessage", " enableTelemetry=YES ", v7, 2u);
      }
    }
  }
}

os_log_t sub_19E280AAC()
{
  os_log_t result;

  result = os_log_create("com.apple.Messages", "BlastDoorAttachment");
  qword_1ECFC7230 = (uint64_t)result;
  return result;
}

uint64_t sub_19E280C54()
{
  uint64_t result;

  result = MEMORY[0x1A1AE7D4C](CFSTR("IMMessagesBlastDoorInterface"), CFSTR("MessagesBlastDoorSupport"));
  qword_1EE503DE8 = result;
  return result;
}

uint64_t sub_19E280D58()
{
  uint64_t result;

  result = objc_msgSend(objc_alloc((Class)MEMORY[0x1A1AE7D4C](CFSTR("IMMessagesBlastDoorInterface"), CFSTR("MessagesBlastDoorSupport"))), "initWithBlastDoorInstanceType:", CFSTR("KnownSender"));
  qword_1ECFC6D58 = result;
  return result;
}

uint64_t sub_19E280D94()
{
  uint64_t result;

  result = objc_msgSend(objc_alloc((Class)MEMORY[0x1A1AE7D4C](CFSTR("IMMessagesBlastDoorInterface"), CFSTR("MessagesBlastDoorSupport"))), "initWithBlastDoorInstanceType:", CFSTR("UnknownSender"));
  qword_1ECFC6D60 = result;
  return result;
}

uint64_t sub_19E280DD0()
{
  uint64_t result;

  result = objc_msgSend(objc_alloc((Class)MEMORY[0x1A1AE7D4C](CFSTR("IMMessagesBlastDoorInterface"), CFSTR("MessagesBlastDoorSupport"))), "initWithBlastDoorInstanceType:", CFSTR("Default"));
  qword_1EE503E50 = result;
  return result;
}

void sub_19E28100C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, __int16 buf)
{
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;

  if (a2 == 1)
  {
    objc_begin_catch(exception_object);
    v19 = objc_msgSend(*(id *)(v18 + 304), "logger");
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
    {
      buf = 0;
      _os_log_impl(&dword_19E239000, v19, OS_LOG_TYPE_DEFAULT, "Failed generating preview through BlastDoor", (uint8_t *)&buf, 2u);
    }
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v17 + 16))(v17, 0, objc_msgSend(objc_alloc(MEMORY[0x1E0CB35C8]), "initWithDomain:code:userInfo:", CFSTR("__kIMCoreAttachmentBlastdoorErrorDomain"), 13302, 0));
    objc_end_catch();
    JUMPOUT(0x19E280FD4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_19E2810C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *v6;
  int v8;
  uint64_t v9;
  __int16 v10;
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v6 = +[IMAttachmentBlastdoor logger](IMAttachmentBlastdoor, "logger");
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    v8 = 138412546;
    v9 = a2;
    v10 = 2112;
    v11 = a3;
    _os_log_impl(&dword_19E239000, v6, OS_LOG_TYPE_DEFAULT, "Blastdoor response %@ received %@", (uint8_t *)&v8, 0x16u);
  }
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_19E2813A8(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, __int128 buf)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;

  if (a2 == 1)
  {
    objc_begin_catch(a1);
    v21 = objc_msgSend(*(id *)(v18 + 304), "logger");
    if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf) = 134218240;
      *(_QWORD *)((char *)&buf + 4) = v20;
      WORD6(buf) = 2048;
      *(_QWORD *)((char *)&buf + 14) = v19;
      _os_log_impl(&dword_19E239000, v21, OS_LOG_TYPE_DEFAULT, "Failed generating workout preview through BlastDoor for maxPxWidth: %f and scale: %f", (uint8_t *)&buf, 0x16u);
    }
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v17 + 16))(v17, 0, objc_msgSend(objc_alloc(MEMORY[0x1E0CB35C8]), "initWithDomain:code:userInfo:", CFSTR("__kIMCoreAttachmentBlastdoorErrorDomain"), 13302, 0));
    objc_end_catch();
    JUMPOUT(0x19E281370);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_19E281478(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_19E2816F0()
{
  objc_end_catch();
  JUMPOUT(0x19E2816FCLL);
}

uint64_t sub_19E281704(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  int v5;
  int v7;
  uint64_t v8;
  __int16 v9;
  int v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v4 = +[IMAttachmentBlastdoor logger](IMAttachmentBlastdoor, "logger");
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *(unsigned __int8 *)(a1 + 40);
    v7 = 134218240;
    v8 = a2;
    v9 = 1024;
    v10 = v5;
    _os_log_impl(&dword_19E239000, v4, OS_LOG_TYPE_DEFAULT, "Blastdoor response %p received for preview type: %u", (uint8_t *)&v7, 0x12u);
  }
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_19E281A04(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, __int128 buf)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;

  if (a2 == 1)
  {
    objc_begin_catch(a1);
    v21 = objc_msgSend(*(id *)(v18 + 304), "logger");
    if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf) = 134218240;
      *(_QWORD *)((char *)&buf + 4) = v20;
      WORD6(buf) = 2048;
      *(_QWORD *)((char *)&buf + 14) = v19;
      _os_log_impl(&dword_19E239000, v21, OS_LOG_TYPE_DEFAULT, "Failed generating movie preview through BlastDoor for maxPxWidth: %f and scale: %f", (uint8_t *)&buf, 0x16u);
    }
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v17 + 16))(v17, 0, objc_msgSend(objc_alloc(MEMORY[0x1E0CB35C8]), "initWithDomain:code:userInfo:", CFSTR("__kIMCoreAttachmentBlastdoorErrorDomain"), 13302, 0));
    objc_end_catch();
    JUMPOUT(0x19E2819C8);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_19E281AD4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t sub_19E281E70(uint64_t a1, void *a2, uint64_t a3)
{
  NSObject *v6;
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  uint64_t v16;
  const char *v17;
  NSObject *v18;
  uint32_t v19;
  NSObject *v20;
  _BYTE v22[22];
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v6 = +[IMAttachmentBlastdoor logger](IMAttachmentBlastdoor, "logger");
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    v7 = *(_QWORD *)(a1 + 32);
    *(_DWORD *)v22 = 134218242;
    *(_QWORD *)&v22[4] = a2;
    *(_WORD *)&v22[12] = 2112;
    *(_QWORD *)&v22[14] = v7;
    _os_log_impl(&dword_19E239000, v6, OS_LOG_TYPE_DEFAULT, "Blastdoor response %p received (identifier: %@)", v22, 0x16u);
  }
  if (!a2 || a3)
  {
    v8 = +[IMAttachmentBlastdoor logger](IMAttachmentBlastdoor, "logger");
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      sub_19E36C238(a3, v8, v9, v10, v11, v12, v13, v14);
  }
  else
  {
    switch(objc_msgSend((id)objc_msgSend(a2, "payload"), "type"))
    {
      case 0:
        objc_msgSend((id)objc_msgSend(a2, "payload"), "messagesAppBalloon");
        break;
      case 1:
        objc_msgSend((id)objc_msgSend(a2, "payload"), "handwriting");
        break;
      case 2:
        objc_msgSend((id)objc_msgSend(a2, "payload"), "linkPresentation");
        break;
      case 3:
        v20 = +[IMAttachmentBlastdoor logger](IMAttachmentBlastdoor, "logger");
        if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)v22 = 0;
          v17 = "[WARN] Should not have received BlastDoorBalloonPluginPayloadCombinedPluginAttachmentInfo back as payload type.";
          v18 = v20;
          v19 = 2;
          goto LABEL_16;
        }
        break;
      case 4:
        objc_msgSend((id)objc_msgSend(a2, "payload"), "digitalTouchBalloon");
        break;
      default:
        v15 = +[IMAttachmentBlastdoor logger](IMAttachmentBlastdoor, "logger");
        if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
        {
          v16 = objc_msgSend((id)objc_msgSend(a2, "payload"), "type");
          *(_DWORD *)v22 = 134217984;
          *(_QWORD *)&v22[4] = v16;
          v17 = "[WARN] Unable to handle unknown payload type (type: %tu).";
          v18 = v15;
          v19 = 12;
LABEL_16:
          _os_log_impl(&dword_19E239000, v18, OS_LOG_TYPE_DEFAULT, v17, v22, v19);
        }
        break;
    }
    objc_msgSend(a2, "attachments", *(_OWORD *)v22);
  }
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

void sub_19E28222C(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int buf)
{
  uint64_t v17;
  NSObject *v18;

  if (a2 == 1)
  {
    objc_begin_catch(a1);
    v18 = +[IMAttachmentBlastdoor logger](IMAttachmentBlastdoor, "logger");
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
    {
      buf = 138412290;
      _os_log_impl(&dword_19E239000, v18, OS_LOG_TYPE_DEFAULT, "Failed generating audio preview through BlastDoor for sourceURL: %@", (uint8_t *)&buf, 0xCu);
    }
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v17 + 16))(v17, 0, objc_msgSend(objc_alloc(MEMORY[0x1E0CB35C8]), "initWithDomain:code:userInfo:", CFSTR("__kIMCoreAttachmentBlastdoorErrorDomain"), 13302, 0));
    objc_end_catch();
    JUMPOUT(0x19E2821FCLL);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_19E2822EC(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  uint64_t v5;
  int v7;
  uint64_t v8;
  __int16 v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v4 = +[IMAttachmentBlastdoor logger](IMAttachmentBlastdoor, "logger");
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *(_QWORD *)(a1 + 32);
    v7 = 138412546;
    v8 = a2;
    v9 = 2112;
    v10 = v5;
    _os_log_impl(&dword_19E239000, v4, OS_LOG_TYPE_DEFAULT, "Blastdoor audio preview response received: %@ for sourceURL: %@", (uint8_t *)&v7, 0x16u);
  }
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

uint64_t sub_19E282690(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t sub_19E28269C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t sub_19E2826A8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t sub_19E282848(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  int v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v4 = +[IMAttachmentBlastdoor logger](IMAttachmentBlastdoor, "logger");
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    v6 = 138412290;
    v7 = a2;
    _os_log_impl(&dword_19E239000, v4, OS_LOG_TYPE_DEFAULT, "Blastdoor response %@ received", (uint8_t *)&v6, 0xCu);
  }
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_19E282C30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, __int16 buf)
{
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  uint64_t v20;

  if (a2 == 1)
  {
    objc_begin_catch(exception_object);
    v19 = objc_msgSend(*(id *)(v18 + 304), "logger");
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
    {
      buf = 0;
      _os_log_impl(&dword_19E239000, v19, OS_LOG_TYPE_DEFAULT, "Failed generating animated image preview through BlastDoor", (uint8_t *)&buf, 2u);
    }
    v20 = objc_msgSend(objc_alloc(MEMORY[0x1E0CB35C8]), "initWithDomain:code:userInfo:", CFSTR("__kIMCoreAttachmentBlastdoorErrorDomain"), 13302, 0);
    (*(void (**)(uint64_t, _QWORD, uint64_t, double, double))(v17 + 16))(v17, 0, v20, *MEMORY[0x1E0C9D820], *(double *)(MEMORY[0x1E0C9D820] + 8));
    objc_end_catch();
    JUMPOUT(0x19E282BF0);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_19E282CF4(uint64_t a1, int a2, void *a3, uint64_t a4, double a5, double a6)
{
  NSObject *v12;
  const __CFString *v13;
  id v14;
  _BYTE v16[12];
  __int16 v17;
  void *v18;
  __int16 v19;
  uint64_t v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v12 = +[IMAttachmentBlastdoor logger](IMAttachmentBlastdoor, "logger");
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    v13 = CFSTR("NO");
    *(_DWORD *)v16 = 138412802;
    if (a2)
      v13 = CFSTR("YES");
    *(_QWORD *)&v16[4] = v13;
    v17 = 2112;
    v18 = a3;
    v19 = 2112;
    v20 = a4;
    _os_log_impl(&dword_19E239000, v12, OS_LOG_TYPE_DEFAULT, "BlastDoor animated image response %@ with UTType %@ received %@", v16, 0x20u);
  }
  if (a2 && objc_msgSend(a3, "length"))
  {
    v14 = objc_alloc_init(MEMORY[0x1E0C99E08]);
    objc_msgSend(v14, "setValue:forKey:", a3, CFSTR("uti_type"));
    objc_msgSend(v14, "setValue:forKey:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", objc_msgSend(*(id *)(a1 + 32), "isFromMe")), CFSTR("is_from_me"));
    objc_msgSend(v14, "setValue:forKey:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", objc_msgSend(*(id *)(a1 + 32), "isTrustedSender")), CFSTR("is_trusted_sender"));
    objc_msgSend(v14, "setValue:forKey:", objc_msgSend(*(id *)(a1 + 32), "serviceName"), CFSTR("service"));
    -[IMMetricsCollector trackEvent:withDictionary:](+[IMMetricsCollector sharedInstance](IMMetricsCollector, "sharedInstance"), "trackEvent:withDictionary:", CFSTR("com.apple.Messages.IMMetricsCollectorEventImagePreviewGenerationSuccess"), v14);

  }
  else
  {
    -[IMMetricsCollector trackEvent:](+[IMMetricsCollector sharedInstance](IMMetricsCollector, "sharedInstance", *(_QWORD *)v16), "trackEvent:", CFSTR("com.apple.Messages.IMMetricsCollectorEventImagePreviewGenerationFailure"));
  }
  return (*(uint64_t (**)(double, double))(*(_QWORD *)(a1 + 40) + 16))(a5, a6);
}

void sub_19E2831E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, __int16 buf)
{
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;

  if (a2 == 1)
  {
    objc_begin_catch(exception_object);
    v19 = objc_msgSend(*(id *)(v18 + 304), "logger");
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
    {
      buf = 0;
      _os_log_impl(&dword_19E239000, v19, OS_LOG_TYPE_DEFAULT, "Failed getting animated image metadata through BlastDoor", (uint8_t *)&buf, 2u);
    }
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v17 + 16))(v17, 0, objc_msgSend(objc_alloc(MEMORY[0x1E0CB35C8]), "initWithDomain:code:userInfo:", CFSTR("__kIMCoreAttachmentBlastdoorErrorDomain"), 13302, 0));
    objc_end_catch();
    JUMPOUT(0x19E2831A8);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_19E283298(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *v6;
  int v8;
  uint64_t v9;
  __int16 v10;
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v6 = +[IMAttachmentBlastdoor logger](IMAttachmentBlastdoor, "logger");
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    v8 = 138412546;
    v9 = a2;
    v10 = 2112;
    v11 = a3;
    _os_log_impl(&dword_19E239000, v6, OS_LOG_TYPE_DEFAULT, "BlastDoor animated image metadata response %@ received %@", (uint8_t *)&v8, 0x16u);
  }
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_19E283660(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, __int16 buf)
{
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;

  if (a2 == 1)
  {
    objc_begin_catch(exception_object);
    v19 = objc_msgSend(*(id *)(v18 + 304), "logger");
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
    {
      buf = 0;
      _os_log_impl(&dword_19E239000, v19, OS_LOG_TYPE_DEFAULT, "Failed generating animated image preview through BlastDoor", (uint8_t *)&buf, 2u);
    }
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v17 + 16))(v17, 0, objc_msgSend(objc_alloc(MEMORY[0x1E0CB35C8]), "initWithDomain:code:userInfo:", CFSTR("__kIMCoreAttachmentBlastdoorErrorDomain"), 13302, 0));
    objc_end_catch();
    JUMPOUT(0x19E283624);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_19E283718(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *v6;
  int v8;
  uint64_t v9;
  __int16 v10;
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v6 = +[IMAttachmentBlastdoor logger](IMAttachmentBlastdoor, "logger");
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    v8 = 138412546;
    v9 = a2;
    v10 = 2112;
    v11 = a3;
    _os_log_impl(&dword_19E239000, v6, OS_LOG_TYPE_DEFAULT, "BlastDoor animated image response %@ received %@", (uint8_t *)&v8, 0x16u);
  }
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_19E283ACC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, __int16 buf)
{
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;

  if (a2 == 1)
  {
    objc_begin_catch(exception_object);
    v19 = objc_msgSend(*(id *)(v18 + 304), "logger");
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
    {
      buf = 0;
      _os_log_impl(&dword_19E239000, v19, OS_LOG_TYPE_DEFAULT, "Failed getting emoji image metadata through BlastDoor", (uint8_t *)&buf, 2u);
    }
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v17 + 16))(v17, 0, objc_msgSend(objc_alloc(MEMORY[0x1E0CB35C8]), "initWithDomain:code:userInfo:", CFSTR("__kIMCoreAttachmentBlastdoorErrorDomain"), 13302, 0));
    objc_end_catch();
    JUMPOUT(0x19E283A94);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_19E283B7C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *v6;
  int v8;
  uint64_t v9;
  __int16 v10;
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v6 = +[IMAttachmentBlastdoor logger](IMAttachmentBlastdoor, "logger");
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    v8 = 138412546;
    v9 = a2;
    v10 = 2112;
    v11 = a3;
    _os_log_impl(&dword_19E239000, v6, OS_LOG_TYPE_DEFAULT, "BlastDoor emoji image metadata response %@ received %@", (uint8_t *)&v8, 0x16u);
  }
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_19E283E54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, __int16 buf)
{
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;

  if (a2 == 1)
  {
    objc_begin_catch(exception_object);
    v19 = objc_msgSend(*(id *)(v18 + 304), "logger");
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
    {
      buf = 0;
      _os_log_impl(&dword_19E239000, v19, OS_LOG_TYPE_DEFAULT, "Failed generating emoji image through BlastDoor", (uint8_t *)&buf, 2u);
    }
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v17 + 16))(v17, 0, objc_msgSend(objc_alloc(MEMORY[0x1E0CB35C8]), "initWithDomain:code:userInfo:", CFSTR("__kIMCoreAttachmentBlastdoorErrorDomain"), 13302, 0));
    objc_end_catch();
    JUMPOUT(0x19E283E18);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_19E283F04(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *v6;
  int v8;
  uint64_t v9;
  __int16 v10;
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v6 = +[IMAttachmentBlastdoor logger](IMAttachmentBlastdoor, "logger");
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    v8 = 138412546;
    v9 = a2;
    v10 = 2112;
    v11 = a3;
    _os_log_impl(&dword_19E239000, v6, OS_LOG_TYPE_DEFAULT, "BlastDoor emoji image response %@ received %@", (uint8_t *)&v8, 0x16u);
  }
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_19E284014()
{
  IMLogDump *v0;
  void *v1;

  v0 = objc_alloc_init(IMLogDump);
  v1 = (void *)qword_1ECFC7578;
  qword_1ECFC7578 = (uint64_t)v0;

}

void sub_19E28472C(_QWORD *a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  char v8;
  id v9;
  NSObject *v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  uint8_t buf[4];
  uint64_t v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v4, "fileExistsAtPath:", a1[4]);

  if ((_DWORD)v5)
  {
    objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = a1[5];
    v15 = 0;
    v8 = objc_msgSend(v6, "removeItemAtPath:error:", v7, &v15);
    v9 = v15;
    if ((v8 & 1) == 0 && IMOSLoggingEnabled())
    {
      OSLogHandleForIMFoundationCategory();
      v10 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
      {
        v11 = a1[5];
        *(_DWORD *)buf = 138412290;
        v17 = v11;
        _os_log_impl(&dword_19E239000, v10, OS_LOG_TYPE_INFO, "Deleting file at path %@ failed", buf, 0xCu);
      }

    }
  }
  else if (IMOSLoggingEnabled())
  {
    OSLogHandleForIMFoundationCategory();
    v12 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
    {
      v13 = a1[5];
      *(_DWORD *)buf = 138412290;
      v17 = v13;
      _os_log_impl(&dword_19E239000, v12, OS_LOG_TYPE_INFO, "Compressing file at path %@ failed", buf, 0xCu);
    }

  }
  v14 = a1[6];
  if (v14)
    (*(void (**)(uint64_t, uint64_t))(v14 + 16))(v14, v5);

}

void sub_19E284F88(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  id v8;
  _QWORD block[4];
  id v10;
  id v11;
  id v12;

  v5 = a2;
  v6 = a3;
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = sub_19E285044;
  block[3] = &unk_1E3FB5BC8;
  v10 = v5;
  v11 = v6;
  v12 = *(id *)(a1 + 32);
  v7 = v6;
  v8 = v5;
  dispatch_async(MEMORY[0x1E0C80D38], block);

}

uint64_t sub_19E285044(_QWORD *a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  int v6;
  uint64_t v7;
  __int16 v8;
  uint64_t v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  if (IMOSLoggingEnabled())
  {
    OSLogHandleForIMFoundationCategory();
    v2 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      v3 = a1[4];
      v4 = a1[5];
      v6 = 138412546;
      v7 = v3;
      v8 = 2112;
      v9 = v4;
      _os_log_impl(&dword_19E239000, v2, OS_LOG_TYPE_INFO, "Dispatching sync completion back onto main queue: outPath %@, error %@", (uint8_t *)&v6, 0x16u);
    }

  }
  result = a1[6];
  if (result)
    return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(result + 16))(result, a1[4], a1[5]);
  return result;
}

void sub_19E285200(uint64_t a1)
{
  NSObject *v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  id v12;
  void *v13;
  void *v14;
  void *v15;
  id v16;
  NSObject *v17;
  void *v18;
  char v19;
  NSObject *v20;
  uint64_t v21;
  void *v22;
  id v23;
  id v24;
  _QWORD v25[4];
  _QWORD v26[4];
  uint8_t buf[4];
  void *v28;
  __int16 v29;
  id v30;
  __int16 v31;
  void *v32;
  __int16 v33;
  uint64_t v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  objc_msgSend(*(id *)(a1 + 32), "dumpMOCLoggingMetaData");
  objc_msgSend(*(id *)(a1 + 32), "printIfWeAreInTheMiddleOfASync");
  objc_msgSend(*(id *)(a1 + 32), "clearSyncStats");
  if (IMOSLoggingEnabled())
  {
    OSLogHandleForIMFoundationCategory();
    v2 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      v4 = *(void **)(a1 + 40);
      v3 = *(void **)(a1 + 48);
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", *(unsigned int *)(a1 + 72));
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      v6 = *(_QWORD *)(a1 + 56);
      *(_DWORD *)buf = 138413058;
      v28 = v4;
      v29 = 2112;
      v30 = v3;
      v31 = 2112;
      v32 = v5;
      v33 = 2112;
      v34 = v6;
      _os_log_impl(&dword_19E239000, v2, OS_LOG_TYPE_INFO, "Dispatching on logDumpQueue: made it to log dump folderPath %@, fileName %@, hours %@, predicate %@", buf, 0x2Au);

    }
  }
  objc_msgSend(*(id *)(a1 + 48), "lastPathComponent");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = *(void **)(a1 + 32);
  v9 = *(_QWORD *)(a1 + 40);
  v10 = *(_QWORD *)(a1 + 56);
  v24 = 0;
  v11 = objc_msgSend(v8, "_checkArgumentValidity:withFileName:withPredicate:withError:", v9, v7, v10, &v24);
  v12 = v24;
  if ((v11 & 1) != 0)
  {
    v13 = (void *)MEMORY[0x1E0DE8AA8];
    v25[0] = CFSTR("compress");
    v25[1] = CFSTR("disableUIfeedback");
    v26[0] = MEMORY[0x1E0C9AAB0];
    v26[1] = MEMORY[0x1E0C9AAA0];
    v25[2] = CFSTR("baseDirectory");
    v25[3] = CFSTR("archiveName");
    v26[2] = *(_QWORD *)(a1 + 40);
    v26[3] = v7;
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v26, v25, 4);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    v23 = 0;
    objc_msgSend(v13, "sysdiagnoseWithMetadata:withError:", v14, &v23);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    v16 = v23;

    if (IMOSLoggingEnabled())
    {
      OSLogHandleForIMFoundationCategory();
      v17 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412546;
        v28 = v15;
        v29 = 2112;
        v30 = v16;
        _os_log_impl(&dword_19E239000, v17, OS_LOG_TYPE_INFO, "Finished dumping sysdianose to %@ with Error %@", buf, 0x16u);
      }

    }
    objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    v19 = objc_msgSend(v18, "fileExistsAtPath:", v15);

    if ((v19 & 1) != 0)
    {
      (*(void (**)(void))(*(_QWORD *)(a1 + 64) + 16))();
    }
    else
    {
      if (IMOSLoggingEnabled())
      {
        OSLogHandleForIMFoundationCategory();
        v20 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 138412290;
          v28 = v15;
          _os_log_impl(&dword_19E239000, v20, OS_LOG_TYPE_INFO, "Log dump failed, file was not saved at path %@", buf, 0xCu);
        }

      }
      v21 = *(_QWORD *)(a1 + 64);
      objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", CFSTR("IMLogDumpErrorDomain"), 1, 0);
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      (*(void (**)(uint64_t, _QWORD, void *))(v21 + 16))(v21, 0, v22);

    }
  }
  else
  {
    (*(void (**)(void))(*(_QWORD *)(a1 + 64) + 16))();
  }

}

void sub_19E285C9C(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x19E285C68);
  }
  _Unwind_Resume(a1);
}

void sub_19E286164(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  NSObject *v8;
  uint64_t v9;
  void *v10;
  NSObject *v11;
  int v12;
  id v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  objc_msgSend(*(id *)(a1 + 32), "_dictionaryForDayKey:", v5);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  if (IMOSLoggingEnabled())
  {
    OSLogHandleForIMFoundationCategory();
    v8 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      v12 = 138412290;
      v13 = v7;
      _os_log_impl(&dword_19E239000, v8, OS_LOG_TYPE_INFO, "Day Dictionary %@", (uint8_t *)&v12, 0xCu);
    }

  }
  if (objc_msgSend(v7, "count"))
  {
    v10 = *(void **)(a1 + 32);
    v9 = a1 + 32;
    objc_msgSend(v10, "_calculateConnectedMinutesForDateKey:durationKey:daysDictionary:totalDurationDictionary:totalDurationKey:", CFSTR("LastConnectedToPowerWifiDate"), CFSTR("PowerWifiTotalDuration"), v7, *(_QWORD *)(v9 + 8), CFSTR("totalPowerWifi"));
    objc_msgSend(*(id *)v9, "_calculateConnectedMinutesForDateKey:durationKey:daysDictionary:totalDurationDictionary:totalDurationKey:", CFSTR("PowerLastConnectedDate"), CFSTR("PowerTotalDuration"), v7, *(_QWORD *)(v9 + 8), CFSTR("totalPower"));
    objc_msgSend(*(id *)v9, "_calculateConnectedMinutesForDateKey:durationKey:daysDictionary:totalDurationDictionary:totalDurationKey:", CFSTR("WifiLastConnectedDate"), CFSTR("WifiTotalDuration"), v7, *(_QWORD *)(v9 + 8), CFSTR("totalWifi"));
  }
  else if (IMOSLoggingEnabled())
  {
    OSLogHandleForIMFoundationCategory();
    v11 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      v12 = 138412290;
      v13 = v5;
      _os_log_impl(&dword_19E239000, v11, OS_LOG_TYPE_INFO, "We don't have a dictionary for key %@", (uint8_t *)&v12, 0xCu);
    }

  }
}

void sub_19E28775C()
{
  const __CFString *v0;
  const __CFString *v1;

  v0 = (const __CFString *)MGGetStringAnswer();
  if (v0)
  {
    v1 = v0;
    byte_1EE503AF0 = CFStringCompare(v0, CFSTR("CH"), 0) == kCFCompareEqualTo;
    CFRelease(v1);
  }
  else
  {
    byte_1EE503AF0 = 0;
  }
}

uint64_t sub_19E287800()
{
  uint64_t result;

  if ((IMGetDomainBoolForKey() & 1) != 0)
    result = 1;
  else
    result = MGGetBoolAnswer();
  byte_1EE503B58 = result;
  return result;
}

void sub_19E287884()
{
  const __CFString *v0;
  const __CFString *v1;

  v0 = (const __CFString *)MGGetStringAnswer();
  if (v0)
  {
    v1 = v0;
    byte_1EE503E58 = CFStringCompare(v0, CFSTR("HN"), 0) == kCFCompareEqualTo;
    CFRelease(v1);
  }
  else
  {
    byte_1EE503E58 = 0;
  }
}

uint64_t IMDeviceIsGreenTea()
{
  return MEMORY[0x1E0DE7D20](IMDeviceUtilities, sel_IMDeviceIsGreenTea);
}

void sub_19E2882AC()
{
  id v0;
  void *v1;

  v0 = objc_alloc_init((Class)objc_opt_class());
  v1 = (void *)qword_1ECFC7580;
  qword_1ECFC7580 = (uint64_t)v0;

}

void sub_19E289A48(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x19E2898F4);
  }
  _Unwind_Resume(a1);
}

void *sub_19E28ABB0()
{
  void *result;

  result = (void *)MEMORY[0x1A1AE7D58]("IOServiceMatching", CFSTR("IOKit"));
  off_1ECFC6BE0 = result;
  return result;
}

void *sub_19E28ABDC()
{
  void *result;

  result = (void *)MEMORY[0x1A1AE7D58]("IOServiceGetMatchingService", CFSTR("IOKit"));
  off_1ECFC6BF0 = result;
  return result;
}

void *sub_19E28AC08()
{
  void *result;

  result = (void *)MEMORY[0x1A1AE7D58]("IORegistryEntryCreateCFProperty", CFSTR("IOKit"));
  off_1ECFC6C00 = result;
  return result;
}

void *sub_19E28AC34()
{
  void *result;

  result = (void *)MEMORY[0x1A1AE7D58]("IOObjectRelease", CFSTR("IOKit"));
  off_1ECFC6C10 = result;
  return result;
}

void sub_19E28AC60()
{
  int *v0;
  NSObject *v1;
  uint8_t v2[16];

  v0 = (int *)MEMORY[0x1A1AE7D58]("kIOMasterPortDefault", CFSTR("IOKit"));
  if (v0)
  {
    byte_1ECFC6C20 = 1;
    dword_1EE503B2C = *v0;
  }
  else if (IMOSLoggingEnabled())
  {
    OSLogHandleForIMFoundationCategory();
    v1 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v1, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)v2 = 0;
      _os_log_impl(&dword_19E239000, v1, OS_LOG_TYPE_INFO, "Failed to load symbol for weaklinked kIOMasterPortDefault", v2, 2u);
    }

  }
}

id IMStringFromChatRepairHistory(uint64_t a1)
{
  void *v2;

  v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB37A0]), "initWithString:", CFSTR("("));
  sub_19E24226C(1, a1, CFSTR("Repaired GUID"), v2);
  sub_19E24226C(2, a1, CFSTR("Repaired Participant For Chat ID Handle ID Mismatch"), v2);
  sub_19E24226C(4, a1, CFSTR("Repaired Blank Service Name"), v2);
  objc_msgSend(v2, "appendString:", CFSTR(")"));
  return v2;
}

void sub_19E28B210(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  uint64_t v31;

  _Block_object_dispose(&a19, 8);
  _Block_object_dispose(&a25, 8);
  _Block_object_dispose(&a31, 8);
  _Block_object_dispose((const void *)(v31 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_19E28B250(_QWORD *a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  id v22;

  CEMEmojiTokenGetString();
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = *(void **)(*(_QWORD *)(a1[4] + 8) + 40);
  v22 = v2;
  if (v3)
  {
    objc_msgSend(v3, "appendString:", v2);
  }
  else
  {
    v4 = objc_msgSend(v2, "mutableCopy");
    v5 = *(_QWORD *)(a1[4] + 8);
    v6 = *(void **)(v5 + 40);
    *(_QWORD *)(v5 + 40) = v4;

  }
  v7 = (void *)CEMEmojiTokenCopyName();
  if (v7)
  {
    v8 = *(void **)(*(_QWORD *)(a1[5] + 8) + 40);
    if (v8)
    {
      objc_msgSend(v8, "appendFormat:", CFSTR(" %@"), v7, v22);
    }
    else
    {
      v9 = objc_msgSend(v7, "mutableCopy");
      v10 = *(_QWORD *)(a1[5] + 8);
      v11 = *(void **)(v10 + 40);
      *(_QWORD *)(v10 + 40) = v9;

    }
  }
  v12 = (void *)CEMEmojiTokenCopyName();
  if (v12)
  {
    v13 = *(void **)(*(_QWORD *)(a1[6] + 8) + 40);
    if (v13)
    {
      objc_msgSend(v13, "appendFormat:", CFSTR(" %@"), v12);
    }
    else
    {
      v14 = objc_msgSend(v12, "mutableCopy");
      v15 = *(_QWORD *)(a1[6] + 8);
      v16 = *(void **)(v15 + 40);
      *(_QWORD *)(v15 + 40) = v14;

    }
  }
  v17 = (void *)CEMEmojiTokenCopyName();
  if (v17)
  {
    v18 = *(void **)(*(_QWORD *)(a1[7] + 8) + 40);
    if (v18)
    {
      objc_msgSend(v18, "appendFormat:", CFSTR(" %@"), v17);
    }
    else
    {
      v19 = objc_msgSend(v17, "mutableCopy");
      v20 = *(_QWORD *)(a1[7] + 8);
      v21 = *(void **)(v20 + 40);
      *(_QWORD *)(v20 + 40) = v19;

    }
  }

}

BOOL sub_19E28B870()
{
  return CEMStringContainsEmoji() != 0;
}

uint64_t sub_19E28B88C(void *a1, const char *a2)
{
  return objc_msgSend(a1, "hasPrefix:", CFSTR("ESID"));
}

id sub_19E28B898(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  id v8;

  v1 = a1;
  if (objc_msgSend(v1, "__im_isEmojiStickerID"))
  {
    objc_msgSend(v1, "stringByReplacingOccurrencesOfString:withString:", CFSTR("ESID"), &stru_1E3FBBA48);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "stringByReplacingOccurrencesOfString:withString:", CFSTR("-sticker.png"), &stru_1E3FBBA48);
    v3 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v3, "stringByReplacingOccurrencesOfString:withString:", CFSTR("-"), CFSTR("%"));
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "stringByRemovingPercentEncoding");
    v5 = objc_claimAutoreleasedReturnValue();

    v1 = (id)v5;
  }
  if (objc_msgSend(v1, "__im_hasEmoji"))
  {
    objc_msgSend(MEMORY[0x1E0C99DC8], "currentLocale");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "localeIdentifier");
    CEMCreateEmojiLocaleData();

    objc_msgSend(MEMORY[0x1E0CB37A0], "string");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "length");
    v8 = v7;
    CEMEnumerateEmojiTokensInStringWithLocaleAndBlock();

  }
  else
  {
    v8 = 0;
  }

  return v8;
}

uint64_t sub_19E28BA04(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "appendString:", CEMEmojiTokenGetString());
}

id sub_19E28BA30(void *a1)
{
  id v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  if (objc_msgSend(a1, "__im_isEmojiStickerID"))
  {
    v2 = a1;
  }
  else if (objc_msgSend(a1, "__im_hasEmoji"))
  {
    objc_msgSend(a1, "__im_emojiString");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3500], "URLPathAllowedCharacterSet");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "stringByAddingPercentEncodingWithAllowedCharacters:", v4);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "stringByReplacingOccurrencesOfString:withString:", CFSTR("%"), CFSTR("-"));
    v6 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@%@%@"), CFSTR("ESID"), v6, CFSTR("-sticker.png"));
    v2 = (id)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v2 = 0;
  }
  return v2;
}

id sub_19E28BB20(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  uint64_t v4;
  void *v5;
  const __CFString *v6;
  const __CFString *v8;
  _QWORD v9[2];

  v9[1] = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = (void *)MEMORY[0x1A1AE8394]();
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    objc_msgSend(v1, "stateDictionaryForDiagnosticsRequest");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v8 = CFSTR("debugDescription");
    objc_msgSend(v1, "debugDescription");
    v4 = objc_claimAutoreleasedReturnValue();
    v5 = (void *)v4;
    v6 = CFSTR("nil");
    if (v4)
      v6 = (const __CFString *)v4;
    v9[0] = v6;
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v9, &v8, 1);
    v3 = (void *)objc_claimAutoreleasedReturnValue();

  }
  objc_autoreleasePoolPop(v2);

  return v3;
}

_DWORD *sub_19E28BC10(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  id v6;
  size_t v7;
  size_t v8;
  NSObject *v9;
  NSObject *v10;
  _DWORD *v11;
  _DWORD *v13;
  void *v14;
  void *v15;
  id v16;
  const void *v17;
  unint64_t v18;
  size_t v19;
  id v20;
  uint8_t buf[4];
  id v22;
  __int16 v23;
  size_t v24;
  __int16 v25;
  uint64_t v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  v20 = 0;
  objc_msgSend(MEMORY[0x1E0CB38B0], "dataWithPropertyList:format:options:error:", v4, 200, 0, &v20);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = v20;
  if (!v5)
  {
    if (IMOSLoggingEnabled())
    {
      OSLogHandleForIMFoundationCategory();
      v10 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412546;
        v22 = v3;
        v23 = 2112;
        v24 = (size_t)v6;
        _os_log_impl(&dword_19E239000, v10, OS_LOG_TYPE_INFO, "STATE CAPTURE FAILURE! Unable to serialize state dictionary for %@ due to error: %@", buf, 0x16u);
      }

    }
    goto LABEL_11;
  }
  v7 = objc_msgSend(v5, "length");
  v8 = v7 + 200;
  if (v7 + 200 > 0x8000)
  {
    if (IMOSLoggingEnabled())
    {
      OSLogHandleForIMFoundationCategory();
      v9 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412802;
        v22 = v3;
        v23 = 2048;
        v24 = v8;
        v25 = 2048;
        v26 = 0x8000;
        _os_log_impl(&dword_19E239000, v9, OS_LOG_TYPE_INFO, "STATE CAPTURE FAILURE! Serialized dictionary is too large for %@, is %zu, limit %zu", buf, 0x20u);
      }

    }
LABEL_11:
    v11 = 0;
    goto LABEL_12;
  }
  v13 = malloc_type_calloc(1uLL, v8, 0xC73C64D6uLL);
  v11 = v13;
  if (v13)
  {
    *v13 = 1;
    v13[1] = v7;
    memcpy(v13 + 50, (const void *)objc_msgSend(objc_retainAutorelease(v5), "bytes"), v7);
    if (v3)
    {
      objc_msgSend(v3, "dataUsingEncoding:", 4);
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      v15 = v14;
      if (v14)
      {
        v16 = objc_retainAutorelease(v14);
        v17 = (const void *)objc_msgSend(v16, "bytes");
        v18 = objc_msgSend(v16, "length");
        if (v18 >= 0x3F)
          v19 = 63;
        else
          v19 = v18;
        memcpy(v11 + 34, v17, v19);
      }

    }
  }
LABEL_12:

  return v11;
}

void sub_19E28BF4C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19E28BFE8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19E28C0E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  void *v14;
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  objc_sync_exit(v14);
  _Unwind_Resume(a1);
}

void sub_19E28C10C(uint64_t a1, uint64_t a2, void *a3)
{
  id *v3;
  id v4;
  id WeakRetained;

  v3 = (id *)(a1 + 32);
  v4 = a3;
  WeakRetained = objc_loadWeakRetained(v3);
  objc_msgSend(WeakRetained, "eventListenerDidFinish:", v4);

}

void sub_19E28C2B4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19E28C3D8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19E28C50C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19E28C598(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19E28C614(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19E28C6AC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19E28C744(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t IMExtensionPayloadUnarchivingClasses()
{
  void *v0;
  _QWORD v2[13];

  v2[12] = *MEMORY[0x1E0C80C00];
  v0 = (void *)MEMORY[0x1E0C99E60];
  v2[0] = objc_opt_class();
  v2[1] = objc_opt_class();
  v2[2] = objc_opt_class();
  v2[3] = objc_opt_class();
  v2[4] = objc_opt_class();
  v2[5] = objc_opt_class();
  v2[6] = objc_opt_class();
  v2[7] = objc_opt_class();
  v2[8] = objc_opt_class();
  v2[9] = objc_opt_class();
  v2[10] = objc_opt_class();
  v2[11] = objc_opt_class();
  return objc_msgSend(v0, "setWithArray:", objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v2, 12));
}

uint64_t IMBalloonExtensionIDWithTeamAndSuffix(uint64_t a1, uint64_t a2)
{
  if (a1 && a2)
    return objc_msgSend((id)objc_msgSend(CFSTR("com.apple.messages.MSMessageExtensionBalloonPlugin"), "stringByAppendingFormat:", CFSTR(":%@:"), a1), "stringByAppendingString:", a2);
  else
    return 0;
}

uint64_t IMBalloonBundleIDFromExtensionID(void *a1)
{
  void *v1;
  uint64_t v2;

  v1 = (void *)objc_msgSend(a1, "componentsSeparatedByString:", CFSTR(":"));
  if (objc_msgSend(v1, "count") == 3)
  {
    v2 = 2;
    return objc_msgSend(v1, "objectAtIndexedSubscript:", v2);
  }
  if (objc_msgSend(v1, "count") == 1)
  {
    v2 = 0;
    return objc_msgSend(v1, "objectAtIndexedSubscript:", v2);
  }
  return 0;
}

uint64_t IMMacCatalystiMessageAppPrototype()
{
  return IMGetCachedDomainValueForKey();
}

uint64_t IMBalloonPluginRequiredCapabilitiesWithPayloadDictionary(void *a1)
{
  uint64_t v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  _QWORD v8[3];

  v8[2] = *MEMORY[0x1E0C80C00];
  v7 = 0;
  v1 = objc_msgSend(a1, "objectForKeyedSubscript:", CFSTR("requiredCapabilities"));
  v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3710]), "initForReadingFromData:error:", v1, &v7);
  objc_msgSend(v2, "_enableStrictSecureDecodingMode");
  v3 = (void *)MEMORY[0x1E0C99E60];
  v8[0] = objc_opt_class();
  v8[1] = objc_opt_class();
  v4 = objc_msgSend(v3, "setWithArray:", objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v8, 2));
  v5 = objc_msgSend(v2, "decodeObjectOfClasses:forKey:", v4, *MEMORY[0x1E0CB2CD0]);

  if (v7 || (objc_opt_class(), (objc_opt_isKindOfClass() & 1) == 0))
    _IMWarn();
  return v5;
}

uint64_t IMBalloonPluginRequiredCapabilitiesWithMessageData(uint64_t a1)
{
  void *v1;

  v1 = (void *)sub_19E28CB08(a1);
  return IMBalloonPluginRequiredCapabilitiesWithPayloadDictionary(v1);
}

uint64_t sub_19E28CB08(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v6;

  v2 = IMExtensionPayloadUnarchivingClasses();
  v6 = 0;
  v3 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3710]), "initForReadingFromData:error:", a1, &v6);
  objc_msgSend(v3, "_enableStrictSecureDecodingMode");
  v4 = objc_msgSend(v3, "decodeObjectOfClasses:forKey:", v2, *MEMORY[0x1E0CB2CD0]);

  if (v6)
    _IMWarn();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    return v4;
  else
    return 0;
}

uint64_t IMBalloonPluginFallbackLinkMetadata(uint64_t a1)
{
  void *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v6;

  v1 = (void *)sub_19E28CB08(a1);
  if (!v1
    || (v6 = 0,
        v2 = objc_msgSend(v1, "objectForKeyedSubscript:", CFSTR("fallbackLinkMetadata")),
        v3 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3710]), "initForReadingFromData:error:", v2, &v6),
        objc_msgSend(v3, "_enableStrictSecureDecodingMode"),
        v4 = objc_msgSend(v3, "decodeObjectOfClass:forKey:", MEMORY[0x1A1AE7D4C](CFSTR("LPLinkMetadata"), CFSTR("LinkPresentation")), *MEMORY[0x1E0CB2CD0]), v3, v6)|| !v4)
  {
    _IMWarn();
    return 0;
  }
  return v4;
}

uint64_t IMIsStickersStripInCling()
{
  if (qword_1EE503B18 != -1)
    dispatch_once(&qword_1EE503B18, &unk_1E3FB3528);
  return byte_1EE503B30;
}

void sub_19E28CCB8()
{
  uint64_t (*v0)(_QWORD, uint64_t, uint64_t, uint64_t);
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  if (!qword_1EE503B10)
    qword_1EE503B10 = _sl_dlopen();
  if (qword_1EE503B10 && sub_19E28CD6C())
  {
    v0 = (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))sub_19E28CD6C();
    if (!v0)
      sub_19E36B7D8();
    byte_1EE503B30 = v0(v0, v1, v2, v3);
  }
}

const __CFString *IMStickersExtensionIdentifier()
{
  return CFSTR("com.apple.Stickers.UserGenerated.MessagesExtension");
}

uint64_t sub_19E28CD6C()
{
  uint64_t v0;
  _QWORD v2[5];
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  v3 = 0;
  v4 = &v3;
  v5 = 0x2020000000;
  v0 = qword_1EE503B38;
  v6 = qword_1EE503B38;
  if (!qword_1EE503B38)
  {
    v2[0] = MEMORY[0x1E0C809B0];
    v2[1] = 3221225472;
    v2[2] = sub_19E28CE1C;
    v2[3] = &unk_1E3FB4F80;
    v2[4] = &v3;
    sub_19E28CE1C((uint64_t)v2);
    v0 = v4[3];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_19E28CE04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *sub_19E28CE1C(uint64_t a1)
{
  void *v2;
  void *result;
  void *v4;

  if (qword_1EE503B10)
  {
    v2 = (void *)qword_1EE503B10;
  }
  else
  {
    qword_1EE503B10 = _sl_dlopen();
    v2 = (void *)qword_1EE503B10;
    if (!qword_1EE503B10)
    {
      v4 = (void *)abort_report_np();
      free(v4);
    }
  }
  result = dlsym(v2, "AVTIsStickersStripEnabled");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  qword_1EE503B38 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t sub_19E28E7E4()
{
  return 0;
}

uint64_t sub_19E28E7EC()
{
  return 1;
}

uint64_t sub_19E28E7F4()
{
  return 1;
}

uint64_t sub_19E28E7FC()
{
  return 1;
}

uint64_t sub_19E28E804()
{
  return 1;
}

uint64_t sub_19E28E80C()
{
  return 1;
}

uint64_t sub_19E28E814()
{
  return 1;
}

void sub_19E28EC68(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x19E28EBE4);
  }
  _Unwind_Resume(a1);
}

void *_IMStringStrippingControlCharacters(void *a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _BYTE v12[128];
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  if (qword_1EE503E70 != -1)
    dispatch_once(&qword_1EE503E70, &unk_1E3FB3548);
  v10 = 0u;
  v11 = 0u;
  v8 = 0u;
  v9 = 0u;
  v2 = (void *)qword_1EE503E68;
  v3 = objc_msgSend((id)qword_1EE503E68, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v9;
    do
    {
      for (i = 0; i != v4; ++i)
      {
        if (*(_QWORD *)v9 != v5)
          objc_enumerationMutation(v2);
        a1 = (void *)objc_msgSend(a1, "stringByReplacingOccurrencesOfString:withString:", *(_QWORD *)(*((_QWORD *)&v8 + 1) + 8 * i), &stru_1E3FBBA48);
      }
      v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
    }
    while (v4);
  }
  return a1;
}

id sub_19E28F26C()
{
  uint64_t v0;
  id result;
  _QWORD v2[5];

  v2[4] = *MEMORY[0x1E0C80C00];
  v0 = *MEMORY[0x1E0D36318];
  v2[0] = *MEMORY[0x1E0D362F8];
  v2[1] = v0;
  v2[2] = CFSTR("\uFFFF");
  v2[3] = CFSTR("\uFFFE");
  result = (id)objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v2, 4);
  qword_1EE503E68 = (uint64_t)result;
  return result;
}

void *IMSharedMessageSummaryInlineAttachmentAttributesArray(void *a1)
{
  void *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v9;
  uint64_t v10;

  v2 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v3 = objc_msgSend(a1, "length");
  if (v3)
  {
    v4 = v3;
    v5 = 0;
    v6 = *MEMORY[0x1E0D36430];
    do
    {
      v9 = 0;
      v10 = 0;
      v7 = (void *)objc_msgSend(a1, "attributesAtIndex:longestEffectiveRange:inRange:", v5, &v9, v5, v4 - v5);
      if (objc_msgSend(v7, "objectForKey:", v6))
        objc_msgSend(v2, "addObject:", v7);
      v5 = v10 + v9;
    }
    while (v10 + v9 < v4);
  }
  return v2;
}

uint64_t IMSharedBalloonPreviewSummaryForMessage(void *a1)
{
  uint64_t v2;
  __objc2_class *v3;
  IMDSharedUtilitiesPluginPayload *v4;
  __objc2_class *v5;
  uint64_t v6;

  if (objc_msgSend((id)objc_msgSend(a1, "balloonBundleID"), "length"))
  {
    v2 = objc_msgSend(a1, "getCMMState");
    if (objc_msgSend((id)objc_msgSend(a1, "balloonBundleID"), "isEqualToString:", CFSTR("com.apple.Handwriting.HandwritingProvider")))
    {
      v3 = IMSharedMessageHandwritingSummary;
      return MEMORY[0x1E0DE7D20](v3, sel_previewSummary);
    }
    if (objc_msgSend((id)objc_msgSend(a1, "balloonBundleID"), "isEqualToString:", CFSTR("com.apple.DigitalTouchBalloonProvider")))
    {
      v3 = IMSharedMessageDTSummary;
      return MEMORY[0x1E0DE7D20](v3, sel_previewSummary);
    }
    if (objc_msgSend((id)objc_msgSend(a1, "balloonBundleID"), "hasPrefix:", CFSTR("com.apple.messages.MSMessageExtensionBalloonPlugin")))
    {
      v4 = objc_alloc_init(IMDSharedUtilitiesPluginPayload);
      -[IMDSharedUtilitiesPluginPayload setData:](v4, "setData:", objc_msgSend(a1, "payloadData"));
      v5 = IMSharedMessage3rdPartySummary;
LABEL_8:
      v6 = -[__objc2_class previewSummaryWithPluginPayload:](v5, "previewSummaryWithPluginPayload:", v4);

      return v6;
    }
    if (v2)
    {
      v3 = IMSharedMessagePhotosSummary;
      return MEMORY[0x1E0DE7D20](v3, sel_previewSummary);
    }
    if (objc_msgSend((id)objc_msgSend(a1, "balloonBundleID"), "hasPrefix:", CFSTR("com.apple.messages.URLBalloonProvider")))
    {
      v4 = objc_alloc_init(IMDSharedUtilitiesPluginPayload);
      -[IMDSharedUtilitiesPluginPayload setData:](v4, "setData:", objc_msgSend(a1, "payloadData"));
      -[IMDSharedUtilitiesPluginPayload setMessageGUID:](v4, "setMessageGUID:", objc_msgSend(a1, "guid"));
      -[IMDSharedUtilitiesPluginPayload setIsFromMe:](v4, "setIsFromMe:", objc_msgSend(a1, "isFromMe"));
      v5 = IMSharedMessageRichLinkSummary;
      goto LABEL_8;
    }
  }
  return 0;
}

id IMSharedMessageSummaryCreate(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  return IMSharedMessageSummaryCreateWithShortName(a1, a2, (uint64_t)a3, a3, a4);
}

id IMSharedMessageSummaryCreateWithShortName(uint64_t a1, void *a2, uint64_t a3, void *a4, uint64_t a5)
{
  int v11;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  void *v19;
  void *v21;
  void *v22;
  const __CFString *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t i;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  void *v38;
  void *v39;
  const __CFString *v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  __int16 v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD v50[6];
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  _BYTE v55[128];
  uint64_t v56;

  v56 = *MEMORY[0x1E0C80C00];
  if (objc_msgSend(a2, "wasDetonated"))
    return (id)objc_msgSend((id)IMSharedUtilitiesFrameworkBundle(), "localizedStringForKey:value:table:", CFSTR("LOCKDOWN_ATTACHMENT_BALLOON_ONE_ATTACHMENT"), &stru_1E3FBBA48, CFSTR("IMSharedUtilities-Offramp"));
  v42 = a5;
  v11 = objc_msgSend(a2, "flags");
  v12 = (void *)objc_msgSend(a2, "expressiveSendStyleID");
  v13 = (void *)objc_msgSend(a2, "body");
  v14 = objc_msgSend(a2, "associatedMessageType");
  v15 = objc_msgSend(a2, "isFromMe");
  v16 = objc_msgSend(a2, "messageSummaryInfo");
  v43 = (void *)objc_msgSend(a2, "fileTransferGUIDs");
  if ((a1 & 0xFFFFFFFFFFFFFFFELL) == 2)
  {
    if (objc_msgSend(v12, "isEqualToString:", CFSTR("com.apple.MobileSMS.expressivesend.invisibleink")))
    {
      v17 = (void *)objc_msgSend(MEMORY[0x1E0CB3940], "localizedStringWithFormat:", objc_msgSend((id)IMSharedUtilitiesFrameworkBundle(), "localizedStringForKey:value:table:", CFSTR("Message sent with Invisible Ink"), &stru_1E3FBBA48, CFSTR("IMSharedUtilities")));
      if (v17)
        return v17;
    }
  }
  v17 = (void *)IMSharedBalloonPreviewSummaryForMessage(a2);
  if (objc_msgSend(v17, "length"))
    return v17;
  if ((v11 & 0x1000000) == 0)
  {
    if (!objc_msgSend(v13, "length")
      || (v18 = (void *)objc_msgSend(v13, "string"),
          objc_msgSend(v18, "rangeOfString:", *MEMORY[0x1E0D362F8]) == 0x7FFFFFFFFFFFFFFFLL)
      || objc_msgSend((id)objc_msgSend(_IMStringStrippingControlCharacters(v18), "stringByTrimmingCharactersInSet:", objc_msgSend(MEMORY[0x1E0CB3500], "whitespaceAndNewlineCharacterSet")), "length"))
    {
      if ((v14 & 0xFFFFFFFFFFFFFFF8) == 0xBB8 || (v14 & 0xFFFFFFFFFFFFFFF8) == 0x7D0)
      {
        v48 = 0;
        v49 = 0;
        v47 = 0;
        v45 = 0;
        v46 = 0;
        v44 = 0;
        v19 = (void *)objc_msgSend(v43, "firstObject");
        if (objc_msgSend(v19, "length"))
          (*(void (**)(uint64_t, void *, uint64_t *, uint64_t *, char *, __int16 *, uint64_t *, uint64_t *, uint64_t *))(v42 + 16))(v42, v19, &v49, &v48, (char *)&v47 + 1, &v47, &v46, &v45, &v44);
        return (id)objc_msgSend((id)objc_msgSend((id)objc_msgSend(a2, "tapback"), "previewAttributedStringWithMessageSummaryInfo:isAdaptiveImageGlyphProvider:adaptiveImageGlyphProvider:senderDisplayName:isFromMe:effectString:", v16, &unk_1E3FB4448, &unk_1E3FB44C8, a3, v15, 0), "string");
      }
      else
      {
        v24 = (void *)objc_msgSend(_IMStringStrippingControlCharacters((void *)objc_msgSend(v13, "string")), "stringByTrimmingCharactersInSet:", objc_msgSend(MEMORY[0x1E0CB3500], "whitespaceAndNewlineCharacterSet"));
        v17 = v24;
        if (a1 == 2 && (unint64_t)objc_msgSend(v24, "length") >= 0x1F5)
          v17 = (void *)objc_msgSend(v17, "substringToIndex:", 500);
        if (!objc_msgSend(v17, "length")
          && objc_msgSend(v43, "count")
          && (v36 = objc_msgSend(v43, "objectAtIndex:", 0)) != 0
          && (v48 = 0,
              v49 = 0,
              v46 = 0,
              LOBYTE(v45) = 0,
              LOBYTE(v44) = 0,
              (*(unsigned int (**)(uint64_t, uint64_t, uint64_t *, uint64_t *, uint64_t *, uint64_t *, uint64_t *, _QWORD, _QWORD))(v42 + 16))(v42, v36, &v49, &v48, &v45, &v44, &v46, 0, 0)))
        {
          v37 = v44;
          v38 = (void *)MEMORY[0x1E0CB3940];
          v39 = (void *)IMSharedUtilitiesFrameworkBundle();
          if (v37)
            v40 = CFSTR("%lu Incoming Files");
          else
            v40 = CFSTR("%lu Outgoing Files");
          return (id)objc_msgSend(v38, "localizedStringWithFormat:", objc_msgSend(v39, "localizedStringForKey:value:table:", v40, &stru_1E3FBBA48, CFSTR("IMSharedUtilities")), objc_msgSend(v43, "count"));
        }
        else
        {
          if (objc_msgSend(v17, "length"))
            return v17;
          return (id)objc_msgSend(MEMORY[0x1E0CB3940], "localizedStringWithFormat:", objc_msgSend((id)IMSharedUtilitiesFrameworkBundle(), "localizedStringForKey:value:table:", CFSTR("Empty message"), &stru_1E3FBBA48, CFSTR("IMSharedUtilities")), v41);
        }
      }
    }
    else
    {
      v25 = IMSharedMessageSummaryInlineAttachmentAttributesArray(v13);
      v26 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "array");
      v27 = (void *)objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
      v51 = 0u;
      v52 = 0u;
      v53 = 0u;
      v54 = 0u;
      v28 = objc_msgSend(v25, "countByEnumeratingWithState:objects:count:", &v51, v55, 16);
      if (v28)
      {
        v29 = v28;
        v30 = *(_QWORD *)v52;
        v31 = *MEMORY[0x1E0D36430];
        do
        {
          for (i = 0; i != v29; ++i)
          {
            if (*(_QWORD *)v52 != v30)
              objc_enumerationMutation(v25);
            v33 = *(void **)(*((_QWORD *)&v51 + 1) + 8 * i);
            v34 = objc_msgSend(v33, "objectForKey:", v31);
            if (v34)
            {
              v35 = v34;
              objc_msgSend(v26, "addObject:", v34);
              objc_msgSend(v27, "setObject:forKey:", v33, v35);
            }
          }
          v29 = objc_msgSend(v25, "countByEnumeratingWithState:objects:count:", &v51, v55, 16);
        }
        while (v29);
      }
      v50[0] = MEMORY[0x1E0C809B0];
      v50[1] = 3221225472;
      v50[2] = sub_19E28FAE4;
      v50[3] = &unk_1E3FB6670;
      v50[4] = v27;
      v50[5] = v42;
      return IMAttachmentsCreateLocalizedDescription(v26, a4, v50);
    }
  }
  v21 = (void *)MEMORY[0x1E0CB3940];
  v22 = (void *)IMSharedUtilitiesFrameworkBundle();
  if ((v11 & 0x200000) != 0)
    v23 = CFSTR("Audio Message");
  else
    v23 = CFSTR("Video Message");
  return (id)objc_msgSend(v21, "localizedStringWithFormat:", objc_msgSend(v22, "localizedStringForKey:value:table:", v23, &stru_1E3FBBA48, CFSTR("IMSharedUtilities")));
}

uint64_t sub_19E28FAE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7)
{
  uint64_t v10;
  uint64_t v11;

  v10 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40));
  if ((_DWORD)v10)
  {
    v11 = objc_msgSend(*(id *)(a1 + 32), "objectForKey:", a2);
    if (a7)
    {
      if (*a7)
        *a7 = v11;
    }
  }
  return v10;
}

uint64_t sub_19E28FB54()
{
  return 0;
}

uint64_t sub_19E28FB5C()
{
  return 0;
}

double IMMessageItemExpireStateExpiringDuration()
{
  uint64_t v0;
  double result;

  v0 = IMGetCachedDomainIntForKey();
  result = (double)v0;
  if (!v0)
    return 120.0;
  return result;
}

double IMMessageItemExpireStateExpiredDuration()
{
  uint64_t v0;
  double result;

  v0 = IMGetCachedDomainIntForKey();
  result = (double)v0;
  if (!v0)
    return 600.0;
  return result;
}

double IMMessageItemTimeIntervalSinceStartedExpiring(void *a1)
{
  id v1;
  int v2;
  void *v3;
  void *v4;
  double v5;

  v1 = a1;
  v2 = objc_msgSend(v1, "isFromMe");
  objc_msgSend(v1, "time");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "timePlayed");
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  v5 = IMMessageItemTimeIntervalSinceStartedExpiringForTimes(v2, v3, v4);
  return v5;
}

double IMMessageItemTimeIntervalSinceStartedExpiringForTimes(int a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  void *v8;
  double v9;
  void *v10;
  double v11;
  double v12;
  double v13;

  v5 = a2;
  v6 = a3;
  v7 = v6;
  if (!a1)
  {
    v8 = v6;
    if (!v6)
      goto LABEL_3;
LABEL_5:
    objc_msgSend(MEMORY[0x1E0C99D68], "date");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "timeIntervalSinceReferenceDate");
    v12 = v11;
    objc_msgSend(v8, "timeIntervalSinceReferenceDate");
    v9 = v12 - v13;

    goto LABEL_6;
  }
  v8 = v5;
  if (v5)
    goto LABEL_5;
LABEL_3:
  v9 = 0.0;
LABEL_6:

  return v9;
}

uint64_t IMMessageItemShouldAutomaticallySave(void *a1)
{
  uint64_t result;

  result = objc_msgSend(a1, "isExpirable");
  if ((_DWORD)result)
    return IMGetDomainBoolForKey();
  return result;
}

uint64_t IMMessageCreateThreadIdentifierWithOriginatorGUID(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  objc_class *v7;
  id v8;
  uint64_t v9;

  v7 = (objc_class *)MEMORY[0x1E0CB3940];
  v8 = a1;
  v9 = objc_msgSend([v7 alloc], "initWithFormat:", CFSTR("r:%lu:%lu:%lu:%@"), a2, a3, a4, v8);

  return v9;
}

uint64_t IMMessageCreateThreadIdentifierOriginatorPart(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("%lu:%lu:%lu"), a1, a2, a3);
}

uint64_t IMMessageCreateThreadIdentifierWithComponents(void *a1, void *a2)
{
  objc_class *v3;
  id v4;
  id v5;
  uint64_t v6;

  if (!a1 || !a2)
    return 0;
  v3 = (objc_class *)MEMORY[0x1E0CB3940];
  v4 = a2;
  v5 = a1;
  v6 = objc_msgSend([v3 alloc], "initWithFormat:", CFSTR("r:%@:%@"), v4, v5);

  return v6;
}

uint64_t IMMessageCreateAssociatedMessageGUIDFromThreadIdentifier(void *a1)
{
  id v1;
  void *v2;
  uint64_t OriginatorMessagePart;
  uint64_t v4;

  v1 = a1;
  IMMessageThreadIdentifierGetOriginatorGUID(v1);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  OriginatorMessagePart = IMMessageThreadIdentifierGetOriginatorMessagePart(v1);

  v4 = objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("p:%ld/%@"), OriginatorMessagePart, v2);
  return v4;
}

id IMMessageThreadIdentifierGetOriginatorGUID(void *a1)
{
  id v1;
  void *v2;
  id v3;
  void *v4;

  v1 = a1;
  objc_msgSend(v1, "componentsSeparatedByString:", CFSTR(":"));
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v2, "count") == 5)
  {
    objc_msgSend(v2, "objectAtIndexedSubscript:", 4);
    v3 = (id)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v3 = v1;
  }
  v4 = v3;

  return v4;
}

uint64_t IMMessageThreadIdentifierGetOriginatorMessagePart(void *a1)
{
  void *v1;
  void *v2;
  uint64_t v3;

  objc_msgSend(a1, "componentsSeparatedByString:", CFSTR(":"));
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v1, "count") == 5)
  {
    objc_msgSend(v1, "objectAtIndexedSubscript:", 1);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    v3 = objc_msgSend(v2, "unsignedIntValue");

  }
  else
  {
    v3 = 0;
  }

  return v3;
}

uint64_t IMMessageThreadIdentifierGetOriginatorRange(void *a1)
{
  void *v1;
  void *v2;
  int v3;
  void *v4;
  uint64_t v5;

  objc_msgSend(a1, "componentsSeparatedByString:", CFSTR(":"));
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v1, "count") == 5)
  {
    objc_msgSend(v1, "objectAtIndexedSubscript:", 2);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    v3 = objc_msgSend(v2, "intValue");

    objc_msgSend(v1, "objectAtIndexedSubscript:", 3);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "intValue");

    v5 = v3;
  }
  else
  {
    v5 = 0;
  }

  return v5;
}

uint64_t IMMessagePartDescriptionGetMessagePartIndex(void *a1)
{
  void *v1;
  void *v2;
  uint64_t v3;

  objc_msgSend(a1, "componentsSeparatedByString:", CFSTR(":"));
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v1, "count") == 3)
  {
    objc_msgSend(v1, "objectAtIndexedSubscript:", 0);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    v3 = objc_msgSend(v2, "unsignedIntValue");

  }
  else
  {
    v3 = 0;
  }

  return v3;
}

void IMMessageThreadIdentifierGetComponents(void *a1, _QWORD *a2, _QWORD *a3)
{
  BOOL v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;

  objc_msgSend(a1, "componentsSeparatedByString:", CFSTR(":"));
  v10 = (id)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v10, "count") == 5;
  v6 = v10;
  if (v5)
  {
    objc_msgSend(v10, "objectAtIndexedSubscript:", 1);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "objectAtIndexedSubscript:", 2);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "objectAtIndexedSubscript:", 3);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    if (a3)
    {
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@:%@:%@"), v7, v8, v9);
      *a3 = (id)objc_claimAutoreleasedReturnValue();
    }
    if (a2)
    {
      objc_msgSend(v10, "objectAtIndexedSubscript:", 4);
      *a2 = (id)objc_claimAutoreleasedReturnValue();
    }

    v6 = v10;
  }

}

void sub_19E2901A8(void *a1, _QWORD *a2, _QWORD *a3)
{
  BOOL v5;
  void *v6;
  void *v7;
  void *v8;
  unsigned int v9;
  id v10;

  objc_msgSend(a1, "componentsSeparatedByString:", CFSTR(":"));
  v10 = (id)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v10, "count") == 5;
  v6 = v10;
  if (v5)
  {
    objc_msgSend(v10, "objectAtIndexedSubscript:", 4);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "objectAtIndexedSubscript:", 1);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = objc_msgSend(v8, "unsignedIntValue");

    if (a3)
      *a3 = v9;
    if (a2)
      *a2 = objc_retainAutorelease(v7);

    v6 = v10;
  }

}

BOOL IMMessageThreadIdentifierOriginatorGUIDAndPartMatch(void *a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  id v6;
  void *v7;
  _BOOL8 v8;
  id v10;
  uint64_t v11;
  id v12;
  uint64_t v13;

  v3 = a1;
  v4 = a2;
  if (objc_msgSend(v3, "length") && objc_msgSend(v4, "length"))
  {
    v12 = 0;
    v13 = 0x7FFFFFFFFFFFFFFFLL;
    sub_19E2901A8(v3, &v12, &v13);
    v5 = v12;
    v10 = 0;
    v11 = 0x7FFFFFFFFFFFFFFFLL;
    sub_19E2901A8(v4, &v10, &v11);
    v6 = v10;
    v7 = v6;
    v8 = v5 && v6 && objc_msgSend(v5, "isEqualToString:", v6) && v13 == v11;

  }
  else
  {
    v8 = 0;
  }

  return v8;
}

void sub_19E290F50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19E290F68(uint64_t a1, void *a2, uint64_t a3, _BYTE *a4)
{
  void *v6;
  id v7;

  v7 = a2;
  objc_msgSend(v7, "transferGUID");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v6, "isEqualToString:", *(_QWORD *)(a1 + 32)))
  {
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = objc_msgSend(v7, "messagePartIndex");
    *a4 = 1;
  }

}

void sub_19E2910DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19E2910F8(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5;
  id v6;

  v6 = a3;
  v5 = objc_msgSend(*(id *)(a1 + 32), "indexOfObject:", a2);
  if (v5 != 0x7FFFFFFFFFFFFFFFLL)
  {
    objc_msgSend(*(id *)(a1 + 32), "replaceObjectAtIndex:withObject:", v5, v6);
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 1;
  }

}

void sub_19E291290(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v8;
  va_list va;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  va_list va1;

  va_start(va1, a7);
  va_start(va, a7);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_19E2912B4(uint64_t a1, void *a2, void *a3)
{
  id v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  id v9;

  v9 = a2;
  v5 = a3;
  if (objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), "__im_containsFileTransferGUID:", v9))
  {
    objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), "__im_attributedStringByReplacingFileTransferGUID:withUpdatedTransferGUID:", v9, v5);
    v6 = objc_claimAutoreleasedReturnValue();
    v7 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
    v8 = *(void **)(v7 + 40);
    *(_QWORD *)(v7 + 40) = v6;

    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 1;
  }

}

void sub_19E29182C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  _Block_object_dispose(&a29, 8);
  _Block_object_dispose(&a33, 8);
  _Unwind_Resume(a1);
}

void sub_19E291860(uint64_t a1, void *a2, void *a3)
{
  id v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  id v9;

  v9 = a2;
  v5 = a3;
  if (objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), "__im_containsFileTransferGUID:", v9))
  {
    objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), "__im_attributedStringByReplacingFileTransferGUID:withUpdatedTransferGUID:", v9, v5);
    v6 = objc_claimAutoreleasedReturnValue();
    v7 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
    v8 = *(void **)(v7 + 40);
    *(_QWORD *)(v7 + 40) = v6;

    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 1;
  }

}

void sub_19E291A28(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  id v9;
  void *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  _QWORD v14[2];

  v9 = a2;
  objc_msgSend(*(id *)(a1 + 32), "string");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "substringWithRange:", a3, a4);
  v11 = (void *)objc_claimAutoreleasedReturnValue();

  if (objc_msgSend(v11, "isEqualToString:", *MEMORY[0x1E0D362F8]))
  {
    v14[0] = 0;
    v14[1] = 0;
    objc_msgSend(*(id *)(a1 + 32), "attribute:atIndex:effectiveRange:", *MEMORY[0x1E0D36430], a3, v14);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v12, "length"))
    {
      v13 = *(_QWORD *)(a1 + 40);
      if (v13)
        (*(void (**)(uint64_t, void *, uint64_t, uint64_t))(v13 + 16))(v13, v12, objc_msgSend(v9, "unsignedIntegerValue"), a5);
    }

  }
}

void sub_19E291CE8(_QWORD *a1, void *a2, uint64_t a3, _BYTE *a4)
{
  id v8;
  id v9;

  v8 = a2;
  if (a3 != 0x7FFFFFFFFFFFFFFFLL && a1[6] == a3)
  {
    *(_BYTE *)(*(_QWORD *)(a1[4] + 8) + 24) = 1;
    v9 = v8;
    objc_storeStrong((id *)(*(_QWORD *)(a1[5] + 8) + 40), a2);
    v8 = v9;
    if (a4)
      *a4 = 1;
  }

}

void sub_19E292600(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_19E292618(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD v6[6];

  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v6[2] = sub_19E292670;
  v6[3] = &unk_1E3FB68E8;
  v6[4] = *(_QWORD *)(a1 + 32);
  v6[5] = a5;
  return objc_msgSend(a2, "enumerateKeysAndObjectsUsingBlock:", v6);
}

uint64_t sub_19E292670(uint64_t a1, void *a2)
{
  uint64_t result;
  _BYTE *v4;

  result = objc_msgSend(a2, "isEqualToString:", *MEMORY[0x1E0D366C0]);
  if ((_DWORD)result)
  {
    v4 = *(_BYTE **)(a1 + 40);
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 1;
    *v4 = 1;
  }
  return result;
}

void sub_19E2946B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19E2946C8(uint64_t a1, void *a2, void *a3, _BYTE *a4)
{
  id v7;

  v7 = a3;
  if (IMMessagePartDescriptionGetMessagePartIndex(a2) == *(_QWORD *)(a1 + 40))
  {
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_msgSend(v7, "unsignedIntegerValue");
    *a4 = 1;
  }

}

void sub_19E294E20(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;

  v6 = a2;
  v5 = a3;
  if (objc_msgSend(*(id *)(a1 + 32), "containsObject:", v6))
    objc_msgSend(*(id *)(a1 + 40), "setObject:forKeyedSubscript:", v5, v6);

}

void sub_19E2950F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_19E295110(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;

  if (a2 != -1)
  {
    objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), "__im_messageTextByRemovingMessagePartIndex:", a2);
    v3 = objc_claimAutoreleasedReturnValue();
    v4 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
    v5 = *(void **)(v4 + 40);
    *(_QWORD *)(v4 + 40) = v3;

  }
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(a1 + 32), sel_addRetractedPartIndex_);
}

void sub_19E29616C(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  _QWORD v13[2];
  _QWORD v14[3];

  v14[2] = *MEMORY[0x1E0C80C00];
  v5 = a3;
  objc_msgSend(a2, "stringValue");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v6, "length"))
  {
    v7 = objc_msgSend(v5, "rangeValue");
    v9 = v8;
    v13[0] = CFSTR("lo");
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", v7);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v13[1] = CFSTR("le");
    v14[0] = v10;
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", v9);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v14[1] = v11;
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v14, v13, 2);
    v12 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(*(id *)(a1 + 32), "setObject:forKeyedSubscript:", v12, v6);
  }

}

void sub_19E296324(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  void *v12;
  void *v13;
  id v14;

  v14 = a2;
  v5 = a3;
  objc_msgSend(v5, "objectForKeyedSubscript:", CFSTR("lo"));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "objectForKeyedSubscript:", CFSTR("le"));
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      v8 = objc_msgSend(v6, "unsignedIntegerValue");
      v9 = objc_msgSend(v7, "unsignedIntegerValue");
      objc_msgSend(MEMORY[0x1E0CB3B18], "valueWithRange:", v8, v9);
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      v11 = objc_msgSend(v14, "unsignedIntValue");
      v12 = *(void **)(a1 + 32);
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", v11);
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v12, "setObject:forKeyedSubscript:", v10, v13);

    }
  }

}

void sub_19E29759C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_19E2975B8(uint64_t result, uint64_t a2)
{
  if (a2)
    return objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 40), "addObject:", a2);
  return result;
}

void sub_19E297CCC(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, __int128 buf)
{
  uint64_t v11;
  uint64_t v12;
  id v13;
  NSObject *v14;
  uint64_t v15;

  if (a2 == 1)
  {
    v13 = objc_begin_catch(a1);
    if (IMOSLoggingEnabled())
    {
      OSLogHandleForIMFoundationCategory();
      v14 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
      {
        v15 = *(_QWORD *)(v11 + v12);
        LODWORD(buf) = 138412546;
        *(_QWORD *)((char *)&buf + 4) = v15;
        WORD6(buf) = 2112;
        *(_QWORD *)((char *)&buf + 14) = v13;
        _os_log_impl(&dword_19E239000, v14, OS_LOG_TYPE_INFO, "Exception encoding body: %@   Exception: %@", (uint8_t *)&buf, 0x16u);
      }

    }
    IMLogBacktrace();

    objc_end_catch();
    JUMPOUT(0x19E297C84);
  }
  _Unwind_Resume(a1);
}

void sub_19E298120(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_list va;

  va_start(va, a16);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19E298154(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, _BYTE *a5)
{
  id v8;

  v8 = a2;
  if (objc_msgSend(v8, "length"))
  {
    objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), a2);
    *a5 = 1;
  }

}

void sub_19E2981B8(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, _BYTE *a5)
{
  id v7;

  v7 = a2;
  if (v7)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_msgSend(v7, "intValue");
      *a5 = 1;
    }
  }

}

void *sub_19E298980()
{
  void *result;

  result = (void *)MEMORY[0x1A1AE7D58]("MarcoLoggingStringForMessageData", CFSTR("Marco"));
  off_1ECFC7178 = result;
  return result;
}

void sub_19E299254(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  void *v12;
  void *v13;
  id v14;
  _QWORD v15[4];
  id v16;
  id v17;
  id v18;
  id v19;

  v7 = objc_msgSend(a2, "integerValue");
  if (v7 == -1)
  {
    if (!*(_BYTE *)(a1 + 80))
      return;
  }
  else if (!objc_msgSend(*(id *)(a1 + 32), "containsIndex:", v7))
  {
    return;
  }
  v8 = *(void **)(a1 + 40);
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", v7);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "objectForKey:", v9);
  v14 = (id)objc_claimAutoreleasedReturnValue();

  if (objc_msgSend(v14, "count"))
  {
    v15[0] = MEMORY[0x1E0C809B0];
    v15[1] = 3221225472;
    v15[2] = sub_19E299420;
    v15[3] = &unk_1E3FB6A28;
    v16 = *(id *)(a1 + 64);
    v17 = *(id *)(a1 + 48);
    v19 = *(id *)(a1 + 72);
    v18 = *(id *)(a1 + 56);
    objc_msgSend(v14, "enumerateObjectsWithOptions:usingBlock:", 2, v15);

    v10 = v16;
  }
  else
  {
    objc_msgSend(*(id *)(a1 + 48), "attribute:atIndex:effectiveRange:", *MEMORY[0x1E0D36430], a3, 0);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    if (v10)
    {
      v11 = *(_QWORD *)(a1 + 72);
      if (v11)
        (*(void (**)(uint64_t, void *))(v11 + 16))(v11, v10);
      objc_msgSend(*(id *)(a1 + 56), "addObject:", v10);
    }
    v12 = *(void **)(a1 + 64);
    objc_msgSend(MEMORY[0x1E0CB3B18], "valueWithRange:", a3, a4);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "addObject:", v13);

  }
}

void sub_19E299420(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  __int16 v15;
  uint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  objc_msgSend(*(id *)(a1 + 32), "addObject:", v3);
  v4 = objc_msgSend(v3, "rangeValue");
  v6 = v4;
  v7 = v5;
  if (v4 == 0x7FFFFFFFFFFFFFFFLL || v4 + v5 > (unint64_t)objc_msgSend(*(id *)(a1 + 40), "length"))
  {
    if (IMOSLoggingEnabled())
    {
      OSLogHandleForIMFoundationCategory();
      v8 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        v13 = 134218240;
        v14 = v6;
        v15 = 2048;
        v16 = v7;
        _os_log_impl(&dword_19E239000, v8, OS_LOG_TYPE_INFO, "Range (loc: %lu, length: %lu) is outside text range", (uint8_t *)&v13, 0x16u);
      }

    }
    if (IMOSLoggingEnabled())
    {
      OSLogHandleForIMFoundationCategory();
      v9 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
      {
        v10 = objc_msgSend(*(id *)(a1 + 40), "length");
        v13 = 134217984;
        v14 = v10;
        _os_log_impl(&dword_19E239000, v9, OS_LOG_TYPE_INFO, "Max text length: %lu", (uint8_t *)&v13, 0xCu);
      }

    }
  }
  else
  {
    objc_msgSend(*(id *)(a1 + 40), "attribute:atIndex:effectiveRange:", *MEMORY[0x1E0D36430], v6, 0);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    if (v11)
    {
      v12 = *(_QWORD *)(a1 + 56);
      if (v12)
        (*(void (**)(uint64_t, void *))(v12 + 16))(v12, v11);
      objc_msgSend(*(id *)(a1 + 48), "addObject:", v11);

    }
  }

}

uint64_t sub_19E29961C(uint64_t a1, void *a2, void *a3)
{
  id v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = a3;
  v5 = objc_msgSend(a2, "rangeValue");
  v7 = v5 + v6;
  v8 = objc_msgSend(v4, "rangeValue");
  v10 = v9;

  v11 = 1;
  if (v7 >= v8 + v10)
    v11 = -1;
  if (v7 == v8 + v10)
    return 0;
  else
    return v11;
}

void sub_19E29967C(uint64_t a1, void *a2)
{
  id v3;
  char v4;
  id v5;

  v3 = a2;
  if (v3)
  {
    v5 = v3;
    v4 = objc_msgSend(*(id *)(a1 + 32), "containsObject:", v3);
    v3 = v5;
    if ((v4 & 1) == 0)
    {
      objc_msgSend(*(id *)(a1 + 32), "addObject:", v5);
      v3 = v5;
    }
  }

}

void sub_19E299E40()
{
  void *v0;
  void *v1;
  uint64_t v2;
  void *v3;
  _QWORD v4[9];

  v4[8] = *MEMORY[0x1E0C80C00];
  v0 = (void *)MEMORY[0x1E0C99E60];
  v4[0] = CFSTR("amc");
  v4[1] = CFSTR("ams");
  v4[2] = CFSTR("amb");
  v4[3] = CFSTR("amd");
  v4[4] = CFSTR("amab");
  v4[5] = CFSTR("amsa");
  v4[6] = CFSTR("ust");
  v4[7] = CFSTR("hbr");
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v4, 8);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "setWithArray:", v1);
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = (void *)qword_1EE503E78;
  qword_1EE503E78 = v2;

}

void sub_19E299F24(void *a1, int a2, os_log_t log, const char *a4, uint8_t *a5)
{
  _os_log_error_impl(a1, log, OS_LOG_TYPE_ERROR, a4, a5, 2u);
}

void sub_19E29A9F8()
{
  void *v0;
  void *v1;
  uint64_t v2;
  void *v3;
  _QWORD v4[9];

  v4[8] = *MEMORY[0x1E0C80C00];
  v0 = (void *)MEMORY[0x1E0C99E60];
  v4[0] = objc_opt_class();
  v4[1] = objc_opt_class();
  v4[2] = objc_opt_class();
  v4[3] = objc_opt_class();
  v4[4] = objc_opt_class();
  v4[5] = objc_opt_class();
  v4[6] = objc_opt_class();
  v4[7] = objc_opt_class();
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v4, 8);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "setWithArray:", v1);
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = (void *)qword_1EE503E88;
  qword_1EE503E88 = v2;

}

void sub_19E29B438(uint64_t a1)
{
  void *v2;
  void *v3;
  id obj;

  obj = *(id *)(a1 + 32);
  objc_sync_enter(obj);
  if (!qword_1EE503E98)
  {
    v2 = *(void **)(a1 + 32);
    objc_msgSend(v2, "_createSingleton__im");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "__setSingleton__im:", v3);

  }
  objc_sync_exit(obj);

}

void sub_19E29B4A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_19E29B720(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_19E29B80C(uint64_t a1, void *a2)
{
  id v2;
  id v3;

  v3 = a2;
  v2 = v3;
  im_dispatch_after();

}

uint64_t sub_19E29BA34(uint64_t a1)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(a1 + 32), sel__handleSIMSubscriptionsUpdate);
}

uint64_t IMSharedUtilitiesProtoCloudKitEncryptedLocationShareStatusChangeReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t result;
  char v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  char v30;
  unsigned int v31;
  uint64_t v32;
  unint64_t v33;
  char v34;
  void *String;
  id v36;
  uint64_t v37;
  void *Data;
  uint64_t v39;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      switch((v10 >> 3))
      {
        case 1u:
          v17 = 0;
          v18 = 0;
          v19 = 0;
          *(_BYTE *)(a1 + 44) |= 4u;
          while (1)
          {
            v20 = *v3;
            v21 = *(_QWORD *)(a2 + v20);
            if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
              break;
            v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
            *(_QWORD *)(a2 + v20) = v21 + 1;
            v19 |= (unint64_t)(v22 & 0x7F) << v17;
            if ((v22 & 0x80) == 0)
              goto LABEL_46;
            v17 += 7;
            v14 = v18++ >= 9;
            if (v14)
            {
              LODWORD(v19) = 0;
              goto LABEL_48;
            }
          }
          *(_BYTE *)(a2 + *v5) = 1;
LABEL_46:
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v19) = 0;
LABEL_48:
          *(_DWORD *)(a1 + 40) = v19;
          continue;
        case 2u:
          v24 = 0;
          v25 = 0;
          v26 = 0;
          *(_BYTE *)(a1 + 44) |= 2u;
          while (2)
          {
            v27 = *v3;
            v28 = *(_QWORD *)(a2 + v27);
            if (v28 == -1 || v28 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v29 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v28);
              *(_QWORD *)(a2 + v27) = v28 + 1;
              v26 |= (unint64_t)(v29 & 0x7F) << v24;
              if (v29 < 0)
              {
                v24 += 7;
                v14 = v25++ >= 9;
                if (v14)
                {
                  v26 = 0;
                  goto LABEL_52;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v26 = 0;
LABEL_52:
          v39 = 16;
          goto LABEL_57;
        case 3u:
          v30 = 0;
          v31 = 0;
          v26 = 0;
          *(_BYTE *)(a1 + 44) |= 1u;
          break;
        case 4u:
          String = (void *)PBReaderReadString();

          v36 = String;
          v37 = 24;
          goto LABEL_44;
        case 5u:
          Data = (void *)PBReaderReadData();

          v36 = Data;
          v37 = 32;
LABEL_44:
          *(_QWORD *)(a1 + v37) = v36;
          continue;
        default:
          result = PBReaderSkipValueWithTag();
          if (!(_DWORD)result)
            return result;
          continue;
      }
      while (1)
      {
        v32 = *v3;
        v33 = *(_QWORD *)(a2 + v32);
        if (v33 == -1 || v33 >= *(_QWORD *)(a2 + *v4))
          break;
        v34 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v33);
        *(_QWORD *)(a2 + v32) = v33 + 1;
        v26 |= (unint64_t)(v34 & 0x7F) << v30;
        if ((v34 & 0x80) == 0)
          goto LABEL_54;
        v30 += 7;
        v14 = v31++ >= 9;
        if (v14)
        {
          v26 = 0;
          goto LABEL_56;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_54:
      if (*(_BYTE *)(a2 + *v5))
        v26 = 0;
LABEL_56:
      v39 = 8;
LABEL_57:
      *(_QWORD *)(a1 + v39) = v26;
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t sub_19E29C748(uint64_t a1)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(a1 + 32), sel__processQueue);
}

uint64_t sub_19E29C96C(uint64_t a1)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(a1 + 32), sel__invokeEvent_);
}

void sub_19E29CA64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_19E29CADC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19E29CB50(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19E29CC04(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19E29CC18(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  id v5;

  v5 = a2;
  objc_msgSend(v5, "target");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = *(void **)(a1 + 32);

  if (v3 == v4)
  {
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 24), "removeLinkedListNode:", v5);
    objc_msgSend(v5, "cancel");
    objc_msgSend(v5, "cache");
  }

}

void sub_19E29CD08(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19E29CD1C(uint64_t a1, void *a2)
{
  void *v2;
  id v3;

  v2 = *(void **)(*(_QWORD *)(a1 + 32) + 24);
  v3 = a2;
  objc_msgSend(v2, "removeLinkedListNode:", v3);
  objc_msgSend(v3, "cancel");
  objc_msgSend(v3, "cache");

}

void sub_19E29CF40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_19E29D004(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19E29D0F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  void *v7;
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  objc_sync_exit(v7);
  _Unwind_Resume(a1);
}

void sub_19E29D114(uint64_t a1, void *a2, _BYTE *a3)
{
  void *v5;
  void *v6;

  objc_msgSend(a2, "target");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = *(void **)(a1 + 32);

  if (v5 == v6)
  {
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 1;
    *a3 = 1;
  }
}

void sub_19E29D394(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_19E29D3A8(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "setEventNotificationWithSenderBlock:", *(_QWORD *)(a1 + 32));
}

void sub_19E29D5C8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id IMChatCanonicalIDSIDsForAddress(id result)
{
  void *v1;
  uint64_t v2;
  void *v3;

  if (result)
  {
    v1 = result;
    if (!objc_msgSend(result, "rangeOfString:", CFSTR("tel:")) && objc_msgSend(v1, "length") != 4)
      objc_msgSend(v1, "substringFromIndex:", 4);
    v2 = IMStripFormattingFromAddress();
    if (MEMORY[0x1A1AE7D10]())
    {
      v3 = (void *)IDSCopyIDForPhoneNumber();
    }
    else if (MEMORY[0x1A1AE7CF8](v2))
    {
      v3 = (void *)MEMORY[0x1A1AE7AD0](v2);
    }
    else
    {
      v3 = (void *)MEMORY[0x1A1AE7AE8](v2);
    }
    return v3;
  }
  return result;
}

uint64_t IMServiceNameForCanonicalIDSAddresses(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  void *v7;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _BYTE v13[128];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v2 = *MEMORY[0x1E0D34240];
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v3 = objc_msgSend(a1, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v10;
    while (2)
    {
      for (i = 0; i != v4; ++i)
      {
        if (*(_QWORD *)v10 != v5)
          objc_enumerationMutation(a1);
        v7 = *(void **)(*((_QWORD *)&v9 + 1) + 8 * i);
        if ((objc_msgSend(v7, "hasPrefix:", CFSTR("urn:biz:")) & 1) != 0
          || objc_msgSend(v7, "hasPrefix:", CFSTR("mailto:urn:biz:")))
        {
          return *MEMORY[0x1E0D34248];
        }
      }
      v4 = objc_msgSend(a1, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
      if (v4)
        continue;
      break;
    }
  }
  return v2;
}

uint64_t sub_19E29D9EC(void *a1, const char *a2)
{
  return objc_msgSend(a1, "__imArrayByApplyingBlock:", &unk_1E3FB35C8);
}

id sub_19E29D9F8(uint64_t a1, void *a2)
{
  return IMChatCanonicalIDSIDsForAddress(a2);
}

void sub_19E29DCE0(uint64_t a1, void *a2)
{
  NSObject *v4;
  uint64_t v5;
  _QWORD v6[9];
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);
  void (*v11)(uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t);
  void (*v17)(uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  void (*v22)(uint64_t, uint64_t);
  void (*v23)(uint64_t);
  uint64_t v24;
  uint8_t buf[4];
  uint64_t v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v19 = 0;
  v20 = &v19;
  v21 = 0x3052000000;
  v22 = sub_19E2475EC;
  v23 = sub_19E2474D4;
  v24 = 0;
  v24 = objc_msgSend(objc_alloc(MEMORY[0x1E0C99E20]), "initWithCapacity:", objc_msgSend(*(id *)(a1 + 32), "count"));
  v13 = 0;
  v14 = &v13;
  v15 = 0x3052000000;
  v16 = sub_19E2475EC;
  v17 = sub_19E2474D4;
  v18 = 0;
  v18 = objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(*(id *)(a1 + 32), "count"));
  v7 = 0;
  v8 = &v7;
  v9 = 0x3052000000;
  v10 = sub_19E2475EC;
  v11 = sub_19E2474D4;
  v12 = 0;
  v12 = objc_msgSend(objc_alloc(MEMORY[0x1E0C99E08]), "initWithCapacity:", objc_msgSend(*(id *)(a1 + 32), "count"));
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v6[2] = sub_19E29DF9C;
  v6[3] = &unk_1E3FB6CB8;
  v6[4] = *(_QWORD *)(a1 + 32);
  v6[5] = &v19;
  v6[6] = &v7;
  v6[7] = &v13;
  v6[8] = *(_QWORD *)(a1 + 48);
  objc_msgSend(a2, "enumerateKeysAndObjectsUsingBlock:", v6);

  if (IMOSLoggingEnabled())
  {
    v4 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      v5 = v8[5];
      *(_DWORD *)buf = 138412290;
      v26 = v5;
      _os_log_impl(&dword_19E239000, v4, OS_LOG_TYPE_INFO, "FindCommonCaps: Common caps found: %@", buf, 0xCu);
    }
  }
  (*(void (**)(_QWORD, id))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), (id)v8[5]);
  _Block_object_dispose(&v7, 8);
  _Block_object_dispose(&v13, 8);
  _Block_object_dispose(&v19, 8);
}

uint64_t sub_19E29DF9C(uint64_t a1, uint64_t a2, void *a3, _BYTE *a4)
{
  NSObject *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  _QWORD v15[6];
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint8_t buf[4];
  uint64_t v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  if (IMOSLoggingEnabled())
  {
    v8 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138412290;
      v20 = a2;
      _os_log_impl(&dword_19E239000, v8, OS_LOG_TYPE_INFO, "FindCommonCaps: Looking %@", buf, 0xCu);
    }
  }
  v15[0] = MEMORY[0x1E0C809B0];
  v15[1] = 3221225472;
  v15[2] = sub_19E29E0F4;
  v15[3] = &unk_1E3FB6C90;
  v10 = *(_QWORD *)(a1 + 56);
  v9 = (_QWORD *)(a1 + 56);
  v11 = *(v9 - 3);
  v16 = *((_OWORD *)v9 - 1);
  v15[4] = v11;
  v15[5] = a2;
  v12 = v9[1];
  v17 = v10;
  v18 = v12;
  objc_msgSend(a3, "enumerateObjectsUsingBlock:", v15);
  v13 = v9[1];
  result = objc_msgSend(*(id *)(*(_QWORD *)(*v9 + 8) + 40), "count");
  if (v13 == result)
    *a4 = 1;
  return result;
}

void sub_19E29E0F4(_QWORD *a1, void *a2, uint64_t a3, _BYTE *a4)
{
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  NSObject *v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint8_t buf[4];
  uint64_t v27;
  __int16 v28;
  uint64_t v29;
  __int16 v30;
  void *v31;
  _BYTE v32[128];
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v5 = (void *)objc_msgSend(a2, "capabilities");
  v22 = 0u;
  v23 = 0u;
  v24 = 0u;
  v25 = 0u;
  v6 = (void *)a1[4];
  v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v22, v32, 16);
  if (v7)
  {
    v8 = *(_QWORD *)v23;
    while (2)
    {
      for (i = 0; i != v7; ++i)
      {
        if (*(_QWORD *)v23 != v8)
          objc_enumerationMutation(v6);
        v10 = *(void **)(*((_QWORD *)&v22 + 1) + 8 * i);
        v11 = objc_msgSend(v10, "objectAtIndexedSubscript:", 0);
        if ((unint64_t)objc_msgSend(v10, "count") <= 1)
        {
          v13 = objc_msgSend(v5, "valueForCapability:", v11);
        }
        else
        {
          v12 = objc_msgSend(v10, "objectAtIndexedSubscript:", 1);
          v13 = objc_msgSend(v5, "valueForCapability:", v11);
          if (v12)
          {
            v14 = objc_msgSend(v5, "valueForCapability:", v12);
            if (IMOSLoggingEnabled())
            {
              v15 = OSLogHandleForIMFoundationCategory();
              if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
              {
                *(_DWORD *)buf = 134218240;
                v27 = v13;
                v28 = 2048;
                v29 = v14;
                _os_log_impl(&dword_19E239000, v15, OS_LOG_TYPE_INFO, "FindCommonCaps: Using capability %ld || orCapbility %ld to try to match", buf, 0x16u);
              }
            }
            v13 |= v14;
          }
        }
        if ((objc_msgSend(*(id *)(*(_QWORD *)(a1[6] + 8) + 40), "containsObject:", v11) & 1) != 0)
        {
          if (objc_msgSend(*(id *)(*(_QWORD *)(a1[7] + 8) + 40), "objectForKeyedSubscript:", v11)
            && objc_msgSend((id)objc_msgSend(*(id *)(*(_QWORD *)(a1[7] + 8) + 40), "objectForKey:", v11), "integerValue") != v13)
          {
            objc_msgSend(*(id *)(*(_QWORD *)(a1[7] + 8) + 40), "removeObjectForKey:", v11);
            objc_msgSend(*(id *)(*(_QWORD *)(a1[8] + 8) + 40), "addObject:", v11);
            if (IMOSLoggingEnabled())
            {
              v16 = OSLogHandleForIMFoundationCategory();
              if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
              {
                v17 = a1[5];
                *(_DWORD *)buf = 134218498;
                v27 = v13;
                v28 = 2112;
                v29 = v17;
                v30 = 2112;
                v31 = a2;
                _os_log_impl(&dword_19E239000, v16, OS_LOG_TYPE_INFO, "FindCommonCaps: Found differing value %lu for caps from address: %@ on endpoint: %@", buf, 0x20u);
              }
            }
            v18 = a1[9];
            if (v18 == objc_msgSend(*(id *)(*(_QWORD *)(a1[8] + 8) + 40), "count"))
            {
              if (IMOSLoggingEnabled())
              {
                v19 = OSLogHandleForIMFoundationCategory();
                if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
                {
                  *(_WORD *)buf = 0;
                  _os_log_impl(&dword_19E239000, v19, OS_LOG_TYPE_INFO, "FindCommonCaps: Breaking early, all caps are different", buf, 2u);
                }
              }
              *a4 = 1;
              return;
            }
          }
        }
        else
        {
          objc_msgSend(*(id *)(*(_QWORD *)(a1[6] + 8) + 40), "addObject:", v11);
          objc_msgSend(*(id *)(*(_QWORD *)(a1[7] + 8) + 40), "setValue:forKey:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", v13), v11);
        }
      }
      v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v22, v32, 16);
      if (v7)
        continue;
      break;
    }
  }
}

uint64_t sub_19E29E4C0(void *a1, uint64_t a2, void *a3)
{
  return objc_msgSend((id)objc_msgSend(a1, "identifier"), "isEqualToString:", objc_msgSend(a3, "identifier"));
}

void sub_19E29EA10(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
  va_list va;

  va_start(va, a4);
  _os_log_error_impl(a1, log, OS_LOG_TYPE_ERROR, a4, (uint8_t *)va, 0xEu);
}

void sub_19E29EA64()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.Messages", "sandboxing");
  v1 = (void *)qword_1EE503EA0;
  qword_1EE503EA0 = (uint64_t)v0;

}

uint64_t sub_19E29FEB0()
{
  uint64_t result;

  result = IMGetCachedDomainBoolForKeyWithDefaultValue();
  byte_1EE503AD0 = result;
  return result;
}

uint64_t sub_19E29FF20()
{
  uint64_t result;

  result = IMGetCachedDomainBoolForKeyWithDefaultValue();
  byte_1EE503EA8 = result;
  return result;
}

uint64_t sub_19E29FF90()
{
  uint64_t result;

  result = IMGetCachedDomainBoolForKeyWithDefaultValue();
  byte_1EE503EB0 = result;
  return result;
}

uint64_t sub_19E2A0040()
{
  uint64_t result;

  if ((_os_feature_enabled_impl() & 1) != 0)
    result = 1;
  else
    result = IMGetCachedDomainBoolForKeyWithDefaultValue();
  byte_1EE503EC0 = result;
  return result;
}

uint64_t IMShowNewDetailsView()
{
  return _os_feature_enabled_impl();
}

uint64_t IMShouldShowEmotes()
{
  return IMGetAppBoolForKey();
}

uint64_t IMEnableModernTranscript()
{
  if (qword_1ECFC7028 != -1)
    dispatch_once(&qword_1ECFC7028, &unk_1E3FB18A8);
  return byte_1EE503B00;
}

CFStringRef sub_19E2A018C()
{
  __CFBundle *MainBundle;
  CFStringRef result;
  BOOL v2;

  MainBundle = CFBundleGetMainBundle();
  result = CFBundleGetIdentifier(MainBundle);
  if (result)
  {
    result = (CFStringRef)CFEqual(result, CFSTR("com.apple.messages.ChatKitTester"));
    v2 = (_DWORD)result != 0;
  }
  else
  {
    v2 = 0;
  }
  byte_1EE503B00 = v2;
  return result;
}

uint64_t IMEnableInlineReplyGlyph()
{
  return IMGetCachedDomainBoolForKeyWithDefaultValue();
}

uint64_t IMEnableNicknamesDebug()
{
  return 0;
}

uint64_t IMEnableMAIDGroups()
{
  return IMGetCachedDomainBoolForKeyWithDefaultValue();
}

void sub_19E2A0428()
{
  uint64_t v0;
  void *v1;

  v0 = objc_msgSend(objc_alloc(MEMORY[0x1E0D34358]), "initWithService:", CFSTR("com.apple.madrid"));
  v1 = (void *)qword_1EE503D30;
  qword_1EE503D30 = v0;

}

uint64_t sub_19E2A0618(uint64_t a1, void *a2)
{
  void *v2;

  v2 = (void *)MEMORY[0x1E0CB37E8];
  objc_msgSend(a2, "slot");
  return objc_msgSend(v2, "numberWithInteger:", IDSSubscriptionSlotFromCTSIMSlot());
}

void sub_19E2A1588(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *exc_buf)
{
  _Unwind_Exception *v10;

  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x19E2A14F0);
  }
  objc_end_catch();
  _Unwind_Resume(v10);
}

void sub_19E2A2D8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,const __CFString *a23,uint64_t a24)
{
  uint64_t v24;
  uint64_t v25;
  void *v26;
  id v27;
  void *v28;
  char v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;

  if (a2)
  {
    if (a2 == 2)
    {
      v27 = objc_begin_catch(exception_object);
      objc_msgSend(v27, "description");
      v34 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v26, "testLogWithFormat:", CFSTR("Finished tests for bundle at path: %@, with error: %@"));

      objc_msgSend(v26, "delegate");
      v28 = (void *)objc_claimAutoreleasedReturnValue();
      v29 = objc_opt_respondsToSelector();

      if ((v29 & 1) != 0)
      {
        objc_msgSend(v26, "delegate");
        v30 = (void *)objc_claimAutoreleasedReturnValue();
        v31 = (void *)MEMORY[0x1E0CB35C8];
        a23 = CFSTR("IMUnitTestRunnerErrorUnhandledExceptionKey");
        a24 = (uint64_t)v27;
        objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &a24, &a23, 1);
        v32 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v31, "errorWithDomain:code:userInfo:", CFSTR("IMUnitTestRunnerErrorDomain"), 1, v32);
        v33 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v30, "unitTestRunner:runningTestsInBundleAtPath:failedWithError:", v26, v24, v33);

      }
      objc_end_catch();
    }
    else
    {
      objc_begin_catch(exception_object);
    }
    if (!v25)
      JUMPOUT(0x19E2A2D2CLL);
    JUMPOUT(0x19E2A2D20);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_19E2A324C()
{
  uint64_t v0;
  void *v1;

  v0 = objc_opt_new();
  v1 = (void *)qword_1EE503EC8;
  qword_1EE503EC8 = v0;

  return MEMORY[0x1E0DE7D20](qword_1EE503EC8, sel_setDateFormat_);
}

void sub_19E2A4120(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  NSObject *v7;
  id v8;
  id v9;
  id v10;
  _QWORD block[4];
  id v12;
  id v13;
  id v14;
  uint8_t buf[16];

  v5 = a2;
  v6 = a3;
  if (IMOSLoggingEnabled())
  {
    OSLogHandleForIMFoundationCategory();
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_19E239000, v7, OS_LOG_TYPE_INFO, "DND state asynchronously received", buf, 2u);
    }

  }
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = sub_19E2A4248;
  block[3] = &unk_1E3FB6DC0;
  v8 = *(id *)(a1 + 32);
  v13 = v6;
  v14 = v8;
  v12 = v5;
  v9 = v6;
  v10 = v5;
  dispatch_async(MEMORY[0x1E0C80D38], block);

}

uint64_t sub_19E2A4248(_QWORD *a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(a1[6] + 16))(a1[6], a1[4], a1[5]);
}

uint64_t sub_19E2A44C0(uint64_t a1)
{
  void *v2;

  objc_msgSend(*(id *)(a1 + 40), "state");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 32), "setDndState:", v2);

  return objc_msgSend(*(id *)(a1 + 32), "_notifyDelegatesOfDNDStateChange");
}

id sub_19E2A4A5C(void *a1, uint64_t a2, void *a3)
{
  id v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  id v10;
  void *v11;
  void *v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t j;
  uint64_t v18;
  void *v19;
  void *v20;
  void *v21;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  _BYTE v33[128];
  _BYTE v34[128];
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  objc_msgSend(a1, "allKeys");
  v29 = 0u;
  v30 = 0u;
  v31 = 0u;
  v32 = 0u;
  v5 = (id)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v29, v34, 16);
  if (v6)
  {
    v7 = v6;
    v8 = *(_QWORD *)v30;
    while (2)
    {
      for (i = 0; i != v7; ++i)
      {
        if (*(_QWORD *)v30 != v8)
          objc_enumerationMutation(v5);
        if (IMFileTransferGUIDIsTemporary(*(void **)(*((_QWORD *)&v29 + 1) + 8 * i)))
        {

          v10 = v4;
          goto LABEL_11;
        }
      }
      v7 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v29, v34, 16);
      if (v7)
        continue;
      break;
    }
  }

  objc_msgSend(v5, "sortedArrayUsingSelector:", sel_localizedStandardCompare_);
  v10 = (id)objc_claimAutoreleasedReturnValue();
LABEL_11:
  v11 = v10;

  v12 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(a1, "count"));
  v25 = 0u;
  v26 = 0u;
  v27 = 0u;
  v28 = 0u;
  v13 = v11;
  v14 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v25, v33, 16);
  if (v14)
  {
    v15 = v14;
    v16 = *(_QWORD *)v26;
    do
    {
      for (j = 0; j != v15; ++j)
      {
        if (*(_QWORD *)v26 != v16)
          objc_enumerationMutation(v13);
        v18 = *(_QWORD *)(*((_QWORD *)&v25 + 1) + 8 * j);
        objc_msgSend(a1, "objectForKey:", v18, v23);
        v19 = (void *)objc_claimAutoreleasedReturnValue();
        if (v19)
        {
          objc_msgSend(v12, "addObject:", v19);
        }
        else
        {
          v23 = v18;
          _IMWarn();
        }

      }
      v15 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v25, v33, 16);
    }
    while (v15);
  }

  objc_msgSend(a1, "allValues");
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v20, "arrayByExcludingObjectsInArray:", v12);
  v21 = (void *)objc_claimAutoreleasedReturnValue();

  if (v21 && objc_msgSend(v21, "count"))
  {
    v24 = objc_msgSend(v21, "count");
    _IMWarn();
    objc_msgSend(v12, "addObjectsFromArray:", v21, v24);
  }

  return v12;
}

uint64_t IMSharedUtilitiesProtoCloudKitEncryptedMessageActionReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t result;
  char v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  void *String;
  id v31;
  uint64_t v32;
  void *v33;
  void *Data;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      switch((v10 >> 3))
      {
        case 1u:
          v17 = 0;
          v18 = 0;
          v19 = 0;
          *(_BYTE *)(a1 + 44) |= 2u;
          while (1)
          {
            v20 = *v3;
            v21 = *(_QWORD *)(a2 + v20);
            if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
              break;
            v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
            *(_QWORD *)(a2 + v20) = v21 + 1;
            v19 |= (unint64_t)(v22 & 0x7F) << v17;
            if ((v22 & 0x80) == 0)
              goto LABEL_40;
            v17 += 7;
            v14 = v18++ >= 9;
            if (v14)
            {
              LODWORD(v19) = 0;
              goto LABEL_42;
            }
          }
          *(_BYTE *)(a2 + *v5) = 1;
LABEL_40:
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v19) = 0;
LABEL_42:
          *(_DWORD *)(a1 + 40) = v19;
          continue;
        case 2u:
          v24 = 0;
          v25 = 0;
          v26 = 0;
          *(_BYTE *)(a1 + 44) |= 1u;
          break;
        case 3u:
          String = (void *)PBReaderReadString();

          v31 = String;
          v32 = 24;
          goto LABEL_38;
        case 4u:
          v33 = (void *)PBReaderReadString();

          v31 = v33;
          v32 = 16;
          goto LABEL_38;
        case 5u:
          Data = (void *)PBReaderReadData();

          v31 = Data;
          v32 = 32;
LABEL_38:
          *(_QWORD *)(a1 + v32) = v31;
          continue;
        default:
          result = PBReaderSkipValueWithTag();
          if (!(_DWORD)result)
            return result;
          continue;
      }
      while (1)
      {
        v27 = *v3;
        v28 = *(_QWORD *)(a2 + v27);
        if (v28 == -1 || v28 >= *(_QWORD *)(a2 + *v4))
          break;
        v29 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v28);
        *(_QWORD *)(a2 + v27) = v28 + 1;
        v26 |= (unint64_t)(v29 & 0x7F) << v24;
        if ((v29 & 0x80) == 0)
          goto LABEL_44;
        v24 += 7;
        v14 = v25++ >= 9;
        if (v14)
        {
          v26 = 0;
          goto LABEL_46;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_44:
      if (*(_BYTE *)(a2 + *v5))
        v26 = 0;
LABEL_46:
      *(_QWORD *)(a1 + 8) = v26;
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t FormattedRecentDomainDirectory()
{
  return objc_msgSend((id)IMSystemRootDirectory(), "stringByAppendingString:", CFSTR("/var/mobile/Library/SMS/Recents/"));
}

uint64_t FormattedDataFilePath(void *a1, void *a2)
{
  return objc_msgSend((id)objc_msgSend((id)objc_msgSend((id)objc_msgSend((id)IMSystemRootDirectory(), "stringByAppendingString:", CFSTR("/var/mobile/Library/SMS/Recents/")), "stringByAppendingPathComponent:", objc_msgSend(a1, "lastPathComponent")), "stringByAppendingPathComponent:", objc_msgSend(a2, "lastPathComponent")), "stringByResolvingAndStandardizingPath");
}

uint64_t FormattedRecentsInfoDictionaryFilePath(void *a1, void *a2)
{
  return objc_msgSend((id)objc_msgSend((id)objc_msgSend((id)objc_msgSend((id)objc_msgSend((id)IMSystemRootDirectory(), "stringByAppendingString:", CFSTR("/var/mobile/Library/SMS/Recents/")), "stringByAppendingPathComponent:", objc_msgSend(a1, "lastPathComponent")), "stringByAppendingPathComponent:", objc_msgSend(a2, "lastPathComponent")), "stringByAppendingPathExtension:", CFSTR("json")), "stringByResolvingAndStandardizingPath");
}

uint64_t FormattedRecentsCacheFilePath(void *a1)
{
  return objc_msgSend((id)objc_msgSend((id)objc_msgSend((id)objc_msgSend((id)objc_msgSend((id)IMSystemRootDirectory(), "stringByAppendingString:", CFSTR("/var/mobile/Library/SMS/Recents/")), "stringByAppendingPathComponent:", objc_msgSend(a1, "lastPathComponent")), "stringByAppendingPathComponent:", CFSTR("Recents")), "stringByAppendingPathExtension:", CFSTR("json")), "stringByResolvingAndStandardizingPath");
}

IMRecentItemsList *sub_19E2A60C8()
{
  IMRecentItemsList *result;

  result = objc_alloc_init(IMRecentItemsList);
  qword_1ECFC7590 = (uint64_t)result;
  return result;
}

id sub_19E2A61F4()
{
  _QWORD v1[2];
  _QWORD v2[3];

  v2[2] = *MEMORY[0x1E0C80C00];
  v1[0] = CFSTR("com.apple.Handwriting.HandwritingProvider");
  v1[1] = CFSTR("Stickers");
  v2[0] = &unk_1E3FFE528;
  v2[1] = &unk_1E3FFE540;
  qword_1EE503ED8 = objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v2, v1, 2);
  return (id)qword_1EE503ED8;
}

uint64_t sub_19E2A62DC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_19E2A633C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9)
{
  id v9;
  NSObject *v10;

  if (a2 == 1)
  {
    v9 = objc_begin_catch(exception_object);
    if (IMOSLoggingEnabled())
    {
      v10 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
      {
        LODWORD(a9) = 138412290;
        *(_QWORD *)((char *)&a9 + 4) = v9;
        _os_log_impl(&dword_19E239000, v10, OS_LOG_TYPE_INFO, "Caught an exception during Recents operation: %@", (uint8_t *)&a9, 0xCu);
      }
    }
    objc_end_catch();
    JUMPOUT(0x19E2A630CLL);
  }
  _Unwind_Resume(exception_object);
}

void sub_19E2A643C(uint64_t a1)
{
  uint64_t v2;
  IMRecentItem *v3;

  v2 = *(_QWORD *)(a1 + 32);
  if (!v2)
    v2 = objc_msgSend(*(id *)(a1 + 40), "_guidForFileURL:", *(_QWORD *)(a1 + 48));
  v3 = -[IMRecentItem initWithGUID:data:messageItemInfo:]([IMRecentItem alloc], "initWithGUID:data:messageItemInfo:", v2, 0, 0);
  objc_msgSend(*(id *)(a1 + 40), "_removeRecentDataPayloadEntry:forDomain:", v3, *(_QWORD *)(a1 + 56));

}

void sub_19E2A64FC(uint64_t a1)
{
  IMRecentItem *v2;

  v2 = -[IMRecentItem initWithGUID:data:messageItemInfo:]([IMRecentItem alloc], "initWithGUID:data:messageItemInfo:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), 0);
  objc_msgSend(*(id *)(a1 + 48), "_removeRecentDataPayloadEntry:forDomain:", v2, *(_QWORD *)(a1 + 56));

}

void sub_19E2A659C(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  NSObject *v3;
  uint64_t v4;
  uint8_t buf[4];
  uint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v1 = objc_msgSend((id)objc_msgSend((id)IMSystemRootDirectory(), "stringByAppendingString:", CFSTR("/var/mobile/Library/SMS/Recents/")), "stringByAppendingPathComponent:", *(_QWORD *)(a1 + 32));
  v4 = 0;
  if (objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager"), "removeItemAtPath:error:", v1, &v4))
  {
    if (v4)
    {
      if (IMOSLoggingEnabled())
      {
        v2 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 138412290;
          v6 = v4;
          _os_log_impl(&dword_19E239000, v2, OS_LOG_TYPE_INFO, "Encountered error while deleting all items for domain: %@", buf, 0xCu);
        }
      }
    }
    if (IMOSLoggingEnabled())
    {
      v3 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412290;
        v6 = v1;
        _os_log_impl(&dword_19E239000, v3, OS_LOG_TYPE_INFO, "Deleting recents plist: %@", buf, 0xCu);
      }
    }
  }
}

void sub_19E2A67E8(uint64_t a1)
{
  IMRecentItem *v2;

  v2 = -[IMRecentItem initWithGUID:data:messageItemInfo:]([IMRecentItem alloc], "initWithGUID:data:messageItemInfo:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
  objc_msgSend(*(id *)(a1 + 56), "_addRecentDataPayloadEntry:toDomain:", v2, *(_QWORD *)(a1 + 64));

}

void sub_19E2A6988(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  uint64_t v13;
  va_list va;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  va_list va1;

  va_start(va1, a11);
  va_start(va, a11);
  v13 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  v19 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Block_object_dispose((const void *)(v11 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_19E2A69C8(uint64_t a1)
{
  NSObject *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  void *v7;
  NSObject *v8;
  uint64_t v9;
  NSObject *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  IMRecentItem *v15;
  uint64_t v16;
  _QWORD block[6];
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint8_t v23[128];
  uint8_t buf[4];
  uint64_t v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40) = (*(uint64_t (**)(_QWORD))(a1 + 64))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40));
  if (IMOSLoggingEnabled())
  {
    v1 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v1, OS_LOG_TYPE_INFO))
    {
      v2 = objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), "count");
      *(_DWORD *)buf = 134217984;
      v25 = v2;
      _os_log_impl(&dword_19E239000, v1, OS_LOG_TYPE_INFO, "Retrieved %tu stickers from attachment query", buf, 0xCu);
    }
  }
  v21 = 0u;
  v22 = 0u;
  v19 = 0u;
  v20 = 0u;
  v3 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40);
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v19, v23, 16);
  if (v4)
  {
    v5 = *(_QWORD *)v20;
    do
    {
      for (i = 0; i != v4; ++i)
      {
        if (*(_QWORD *)v20 != v5)
          objc_enumerationMutation(v3);
        v7 = *(void **)(*((_QWORD *)&v19 + 1) + 8 * i);
        if (!objc_msgSend(v7, "valueForKey:", CFSTR("sticker_user_info")))
        {
          if (IMOSLoggingEnabled())
          {
            v8 = OSLogHandleForIMFoundationCategory();
            if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
            {
              *(_WORD *)buf = 0;
              _os_log_impl(&dword_19E239000, v8, OS_LOG_TYPE_INFO, "No sticker user info dictionary found for sticker attachment!", buf, 2u);
            }
          }
        }
        objc_msgSend(v7, "valueForKey:", CFSTR("sticker_user_info"));
        v9 = JWDecodeDictionary();
        if (!v9)
        {
          if (IMOSLoggingEnabled())
          {
            v10 = OSLogHandleForIMFoundationCategory();
            if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
            {
              *(_WORD *)buf = 0;
              _os_log_impl(&dword_19E239000, v10, OS_LOG_TYPE_INFO, "Failed to decode user info dictionary from sticker_user_info blob", buf, 2u);
            }
          }
        }
        v11 = (void *)objc_msgSend(v7, "valueForKey:", CFSTR("filename"));
        if (objc_msgSend(v11, "hasPrefix:", CFSTR("~")))
          v12 = (void *)objc_msgSend(v11, "stringByReplacingCharactersInRange:withString:", 0, 1, CFSTR("/var/mobile/"));
        else
          v12 = (void *)objc_msgSend(v11, "stringByExpandingTildeInPath");
        v13 = objc_msgSend(v12, "stringByResolvingSymlinksInPath");
        if (objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager"), "fileExistsAtPath:", v13))
        {
          v14 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", objc_msgSend((id)objc_msgSend(v7, "valueForKey:", CFSTR("created_date")), "integerValue"));
          v15 = -[IMRecentItem initWithGUID:data:messageItemInfo:]([IMRecentItem alloc], "initWithGUID:data:messageItemInfo:", 0, 0, v9);
          -[IMRecentItem setFileURL:](v15, "setFileURL:", objc_msgSend(MEMORY[0x1E0C99E98], "fileURLWithPath:", v13));
          -[IMRecentItem setTimestamp:](v15, "setTimestamp:", v14);
          -[IMRecentItem setAccessibilityString:](v15, "setAccessibilityString:", objc_msgSend(v7, "valueForKey:", CFSTR("accessibility_string")));
          objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40), "addObject:", v15);

        }
      }
      v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v19, v23, 16);
    }
    while (v4);
  }

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = sub_19E2A6DDC;
  block[3] = &unk_1E3FB6E98;
  v16 = *(_QWORD *)(a1 + 56);
  block[4] = *(_QWORD *)(a1 + 32);
  block[5] = v16;
  dispatch_async(MEMORY[0x1E0C80D38], block);
}

void sub_19E2A6DDC(uint64_t a1)
{
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();

}

void sub_19E2A6F78(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_19E2A6F90(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  __int128 v4;
  uint64_t v5;
  uint64_t i;
  void *v7;
  void *v8;
  uint64_t v9;
  int v10;
  int v11;
  void *v12;
  NSObject *v13;
  uint64_t v14;
  NSObject *v15;
  const char *v16;
  NSObject *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  NSObject *v23;
  uint64_t v24;
  IMRecentItem *v25;
  uint64_t v26;
  __int128 v27;
  _QWORD block[6];
  char v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint8_t buf[4];
  uint64_t v35;
  _BYTE v36[128];
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v2 = (void *)objc_msgSend(*(id *)(a1 + 32), "_recentsCacheForDomain:", *(_QWORD *)(a1 + 40));
  v30 = 0u;
  v31 = 0u;
  v32 = 0u;
  v33 = 0u;
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v30, v36, 16);
  if (v3)
  {
    v5 = *(_QWORD *)v31;
    *(_QWORD *)&v4 = 138412290;
    v27 = v4;
    do
    {
      for (i = 0; i != v3; ++i)
      {
        if (*(_QWORD *)v31 != v5)
          objc_enumerationMutation(v2);
        v7 = *(void **)(*((_QWORD *)&v30 + 1) + 8 * i);
        v8 = (void *)objc_msgSend(v7, "valueForKey:", CFSTR("guid"), v27);
        v9 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", objc_msgSend((id)objc_msgSend(v7, "valueForKey:", CFSTR("timestamp")), "integerValue"));
        *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40) = FormattedDataFilePath(*(void **)(a1 + 40), v8);
        v29 = 0;
        v10 = objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager"), "fileExistsAtPath:isDirectory:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40), &v29);
        if (v29)
          v11 = v10;
        else
          v11 = 0;
        if (v11 == 1)
        {
          v12 = (void *)objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager"), "contentsOfDirectoryAtPath:error:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40), *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 40);
          if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 40))
          {
            if (IMOSLoggingEnabled())
            {
              v13 = OSLogHandleForIMFoundationCategory();
              if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
              {
                v14 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40);
                *(_DWORD *)buf = v27;
                v35 = v14;
                v15 = v13;
                v16 = "Failed to read contents of directory %@";
LABEL_18:
                _os_log_impl(&dword_19E239000, v15, OS_LOG_TYPE_INFO, v16, buf, 0xCu);
              }
            }
          }
          else
          {
            *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 40) = objc_msgSend(MEMORY[0x1E0C99E98], "URLWithString:", objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 56)+ 8)+ 40), "stringByAppendingPathComponent:", objc_msgSend(v12, "lastObject")));
          }
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8) + 40) = objc_msgSend(MEMORY[0x1E0C99D50], "dataWithContentsOfFile:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56)+ 8)+ 40));
          if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8) + 40))
          {
            if (IMOSLoggingEnabled())
            {
              v17 = OSLogHandleForIMFoundationCategory();
              if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
              {
                v18 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40);
                *(_DWORD *)buf = v27;
                v35 = v18;
                v15 = v17;
                v16 = "Failed to retrieve payload data from file %@";
                goto LABEL_18;
              }
            }
          }
        }
        v19 = FormattedRecentsInfoDictionaryFilePath(*(void **)(a1 + 40), v8);
        if (objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager"), "fileExistsAtPath:", v19))
        {
          v20 = objc_msgSend(MEMORY[0x1E0C99D50], "dataWithContentsOfFile:", v19);
          if (v20)
          {
            v21 = objc_msgSend(MEMORY[0x1E0CB36D8], "JSONObjectWithData:options:error:", v20, 0, *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 40);
            if (v21)
              goto LABEL_31;
          }
          else if (IMOSLoggingEnabled())
          {
            v22 = OSLogHandleForIMFoundationCategory();
            if (os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)buf = v27;
              v35 = v19;
              _os_log_impl(&dword_19E239000, v22, OS_LOG_TYPE_INFO, "Failed to read data from %@", buf, 0xCu);
            }
          }
          if (IMOSLoggingEnabled())
          {
            v23 = OSLogHandleForIMFoundationCategory();
            if (os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
            {
              v24 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 40);
              *(_DWORD *)buf = v27;
              v35 = v24;
              _os_log_impl(&dword_19E239000, v23, OS_LOG_TYPE_INFO, "Failed to serialize recent item info dictionary from JSON. Error: %@", buf, 0xCu);
            }
          }
        }
        v21 = 0;
LABEL_31:
        v25 = -[IMRecentItem initWithGUID:data:messageItemInfo:]([IMRecentItem alloc], "initWithGUID:data:messageItemInfo:", 0, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8) + 40), v21);
        -[IMRecentItem setTimestamp:](v25, "setTimestamp:", v9);
        if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 40))
          -[IMRecentItem setFileURL:](v25, "setFileURL:");
        objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8) + 40), "addObject:", v25);

      }
      v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v30, v36, 16);
    }
    while (v3);
  }
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = sub_19E2A749C;
  block[3] = &unk_1E3FB6E98;
  v26 = *(_QWORD *)(a1 + 88);
  block[4] = *(_QWORD *)(a1 + 48);
  block[5] = v26;
  dispatch_async(MEMORY[0x1E0C80D38], block);
}

void sub_19E2A749C(uint64_t a1)
{
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();

}

void sub_19E2A7C58(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  NSObject *v5;
  NSObject *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  NSObject *v10;
  uint64_t v11;
  char v12;
  int v13;
  NSObject *v14;
  IMRecentItem *v15;
  NSObject *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 32);
  v3 = (void *)objc_msgSend((id)objc_msgSend((id)IMSystemRootDirectory(), "stringByAppendingString:", CFSTR("/var/mobile/Library/SMS/Recents/")), "stringByAppendingPathComponent:", *(_QWORD *)(a1 + 40));
  v4 = objc_msgSend(*(id *)(a1 + 48), "lastPathComponent");
  if (!v2)
  {
    if (IMOSLoggingEnabled())
    {
      v5 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
      {
        v19 = 138412290;
        v20 = 0;
        _os_log_impl(&dword_19E239000, v5, OS_LOG_TYPE_INFO, "No GUID provided. Using %@ as item GUID", (uint8_t *)&v19, 0xCu);
      }
    }
    v2 = objc_msgSend(*(id *)(a1 + 56), "_guidForFileURL:", *(_QWORD *)(a1 + 48));
  }
  if (IMOSLoggingEnabled())
  {
    v6 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      v7 = *(_QWORD *)(a1 + 48);
      v19 = 138412290;
      v20 = v7;
      _os_log_impl(&dword_19E239000, v6, OS_LOG_TYPE_INFO, "Generating GUID from file %@", (uint8_t *)&v19, 0xCu);
    }
  }
  v8 = (void *)objc_msgSend((id)objc_msgSend(v3, "stringByAppendingPathComponent:", v2), "stringByAppendingPathComponent:", v4);
  IMSharedHelperEnsureDirectoryExistsAtPath(objc_msgSend(v8, "stringByDeletingLastPathComponent"));
  v9 = objc_msgSend(MEMORY[0x1E0C99E98], "fileURLWithPath:", v8);
  if (IMOSLoggingEnabled())
  {
    v10 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      v11 = *(_QWORD *)(a1 + 48);
      v19 = 138412546;
      v20 = v11;
      v21 = 2112;
      v22 = v9;
      _os_log_impl(&dword_19E239000, v10, OS_LOG_TYPE_INFO, "Copying file URL %@ to URL %@", (uint8_t *)&v19, 0x16u);
    }
  }
  v12 = objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager"), "copyItemAtURL:toURL:error:", *(_QWORD *)(a1 + 48), v9, *(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 40);
  v13 = IMOSLoggingEnabled();
  if ((v12 & 1) != 0)
  {
    if (v13)
    {
      v14 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
      {
        LOWORD(v19) = 0;
        _os_log_impl(&dword_19E239000, v14, OS_LOG_TYPE_INFO, "Copied file URL successfully!", (uint8_t *)&v19, 2u);
      }
    }
    v15 = -[IMRecentItem initWithGUID:data:messageItemInfo:]([IMRecentItem alloc], "initWithGUID:data:messageItemInfo:", v2, 0, *(_QWORD *)(a1 + 64));
    objc_msgSend(*(id *)(a1 + 56), "_addRecentDataPayloadEntry:toDomain:", v15, *(_QWORD *)(a1 + 40));

  }
  else if (v13)
  {
    v16 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
    {
      v17 = *(_QWORD *)(a1 + 48);
      v18 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 40);
      v19 = 138412802;
      v20 = v17;
      v21 = 2112;
      v22 = v9;
      v23 = 2112;
      v24 = v18;
      _os_log_impl(&dword_19E239000, v16, OS_LOG_TYPE_INFO, "Failed to copy URL %@ to URL %@. Error: %@", (uint8_t *)&v19, 0x20u);
    }
  }
}

uint64_t sub_19E2A89B8(uint64_t a1, void *a2, void *a3)
{
  return objc_msgSend((id)objc_msgSend(a3, "valueForKey:", CFSTR("timestamp")), "compare:", objc_msgSend(a2, "valueForKey:", CFSTR("timestamp")));
}

void sub_19E2A8DD8(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x19E2A8DA8);
  }
  _Unwind_Resume(a1);
}

void sub_19E2A8EC4()
{
  IMCommSafetyRequestsManager *v0;
  void *v1;

  v0 = objc_alloc_init(IMCommSafetyRequestsManager);
  v1 = (void *)qword_1ECFC7158;
  qword_1ECFC7158 = (uint64_t)v0;

}

void sub_19E2A9190(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19E2A940C(uint64_t a1)
{
  void *v2;
  void *v3;
  char v4;
  void *v5;
  void *v6;
  void *v7;
  NSObject *v8;
  int v9;
  void *v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t v13;
  void *v14;
  void *v15;
  void *v16;
  NSObject *v17;
  uint64_t v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  NSObject *v23;
  uint64_t v24;
  const __CFString *v25;
  NSObject *v26;
  void *v27;
  NSObject *v28;
  _QWORD aBlock[4];
  id v30;
  _BYTE *v31;
  id v32[2];
  id location;
  uint8_t v34[4];
  uint64_t v35;
  __int16 v36;
  const __CFString *v37;
  _BYTE buf[32];
  void (*v39)(uint64_t);
  id v40;
  uint64_t v41;
  const __CFString *v42;
  uint64_t v43;
  _QWORD v44[2];

  v44[1] = *MEMORY[0x1E0C80C00];
  if (*(_QWORD *)(a1 + 32)
    && (objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager"),
        v2 = (void *)objc_claimAutoreleasedReturnValue(),
        objc_msgSend(*(id *)(a1 + 32), "path"),
        v3 = (void *)objc_claimAutoreleasedReturnValue(),
        v4 = objc_msgSend(v2, "fileExistsAtPath:", v3),
        v3,
        v2,
        (v4 & 1) != 0))
  {
    objc_msgSend(*(id *)(a1 + 40), "cachedResultForContentAttachment:withChatID:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 48));
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = v5;
    if (v5)
    {
      if (*(_QWORD *)(a1 + 56))
      {
        if (objc_msgSend(v5, "BOOLValue"))
        {
          +[IMMetricsCollector sharedInstance](IMMetricsCollector, "sharedInstance");
          v7 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v7, "trackEvent:", CFSTR("com.apple.Messages.IMMetricsCollectorMarkedImageSensitive"));

        }
        (*(void (**)(void))(*(_QWORD *)(a1 + 56) + 16))();
        if (IMOSLoggingEnabled())
        {
          OSLogHandleForIMFoundationCategory();
          v8 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
          {
            v9 = objc_msgSend(v6, "BOOLValue");
            objc_msgSend(*(id *)(a1 + 32), "absoluteString");
            v10 = (void *)objc_claimAutoreleasedReturnValue();
            v11 = *(_QWORD *)(a1 + 48);
            *(_DWORD *)buf = 67109634;
            *(_DWORD *)&buf[4] = v9;
            *(_WORD *)&buf[8] = 2112;
            *(_QWORD *)&buf[10] = v10;
            *(_WORD *)&buf[18] = 2112;
            *(_QWORD *)&buf[20] = v11;
            _os_log_impl(&dword_19E239000, v8, OS_LOG_TYPE_INFO, "Retrieved cached result '%d' for fileURL '%@' and chatID '%@'", buf, 0x1Cu);

          }
        }
      }
    }
    else
    {
      v16 = *(void **)(a1 + 64);
      if (v16 == (void *)2
        && (v16 = (void *)IMCommSafetyContentAttachmentTypeForURL(*(void **)(a1 + 32)), v16 == (void *)2))
      {
        if (*(_QWORD *)(a1 + 56))
        {
          if (IMOSLoggingEnabled())
          {
            OSLogHandleForIMFoundationCategory();
            v17 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
            {
              *(_WORD *)buf = 0;
              _os_log_impl(&dword_19E239000, v17, OS_LOG_TYPE_INFO, "Could not get IMCommSafetyContentAttachmentType for the provided fileURL.", buf, 2u);
            }

          }
          v18 = *(_QWORD *)(a1 + 56);
          v19 = (void *)MEMORY[0x1E0CB35C8];
          v41 = *MEMORY[0x1E0CB2D50];
          v42 = CFSTR("Content attachment type is not supported");
          objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v42, &v41, 1);
          v20 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v19, "errorWithDomain:code:userInfo:", CFSTR("com.apple.IMSharedUtilities.IMCommSafetyRequestsManager"), 3, v20);
          v21 = (void *)objc_claimAutoreleasedReturnValue();
          (*(void (**)(uint64_t, _QWORD, void *))(v18 + 16))(v18, 0, v21);

        }
      }
      else
      {
        *(_QWORD *)buf = 0;
        *(_QWORD *)&buf[8] = buf;
        *(_QWORD *)&buf[16] = 0x3032000000;
        *(_QWORD *)&buf[24] = sub_19E24760C;
        v39 = sub_19E2474EC;
        v40 = 0;
        objc_msgSend(*(id *)(a1 + 40), "_identifierForURL:withChatID:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 48));
        v40 = (id)objc_claimAutoreleasedReturnValue();
        location = 0;
        objc_initWeak(&location, *(id *)(a1 + 40));
        aBlock[0] = MEMORY[0x1E0C809B0];
        aBlock[1] = 3221225472;
        aBlock[2] = sub_19E2A9B74;
        aBlock[3] = &unk_1E3FB6F60;
        objc_copyWeak(v32, &location);
        v31 = buf;
        v30 = *(id *)(a1 + 56);
        v32[1] = v16;
        v22 = _Block_copy(aBlock);
        if (v16)
        {
          if (IMOSLoggingEnabled())
          {
            OSLogHandleForIMFoundationCategory();
            v23 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
            {
              v24 = *(_QWORD *)(a1 + 32);
              v25 = CFSTR("YES");
              if (!*(_BYTE *)(a1 + 72))
                v25 = CFSTR("NO");
              *(_DWORD *)v34 = 138412546;
              v35 = v24;
              v36 = 2112;
              v37 = v25;
              _os_log_impl(&dword_19E239000, v23, OS_LOG_TYPE_INFO, "Start analyzeVideoFile: %@ with BlastDoorEnabled: %@", v34, 0x16u);
            }

          }
          if (IMOSLoggingEnabled())
          {
            OSLogHandleForIMFoundationCategory();
            v26 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v26, OS_LOG_TYPE_INFO))
            {
              *(_WORD *)v34 = 0;
              _os_log_impl(&dword_19E239000, v26, OS_LOG_TYPE_INFO, "Calling UserSafety -analyzeVideoFile:useBlastdoor:progressHandler:completionHandler:", v34, 2u);
            }

          }
          objc_msgSend(*(id *)(a1 + 40), "userSafetyClient");
          v27 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v27, "analyzeVideoFile:useBlastdoor:progressHandler:completionHandler:", *(_QWORD *)(a1 + 32), *(unsigned __int8 *)(a1 + 72), &unk_1E3FB4348, v22);
        }
        else
        {
          if (IMOSLoggingEnabled())
          {
            OSLogHandleForIMFoundationCategory();
            v28 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v28, OS_LOG_TYPE_INFO))
            {
              *(_WORD *)v34 = 0;
              _os_log_impl(&dword_19E239000, v28, OS_LOG_TYPE_INFO, "Calling UserSafety -analyzeImageFile:completionHandler:", v34, 2u);
            }

          }
          objc_msgSend(*(id *)(a1 + 40), "userSafetyClient");
          v27 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v27, "analyzeImageFile:completionHandler:", *(_QWORD *)(a1 + 32), v22);
        }

        objc_destroyWeak(v32);
        objc_destroyWeak(&location);
        _Block_object_dispose(buf, 8);

      }
    }
  }
  else
  {
    if (!*(_QWORD *)(a1 + 56))
      return;
    if (IMOSLoggingEnabled())
    {
      OSLogHandleForIMFoundationCategory();
      v12 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 134217984;
        *(_QWORD *)&buf[4] = 2;
        _os_log_impl(&dword_19E239000, v12, OS_LOG_TYPE_INFO, "Given fileURL is not valid. Calling completionHandler with error code %ld", buf, 0xCu);
      }

    }
    v13 = *(_QWORD *)(a1 + 56);
    v14 = (void *)MEMORY[0x1E0CB35C8];
    v43 = *MEMORY[0x1E0CB2D50];
    v44[0] = CFSTR("Invalid content attachment URL");
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v44, &v43, 1);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "errorWithDomain:code:userInfo:", CFSTR("com.apple.IMSharedUtilities.IMCommSafetyRequestsManager"), 2, v6);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    (*(void (**)(uint64_t, _QWORD, void *))(v13 + 16))(v13, 0, v15);

  }
}

uint64_t IMCommSafetyContentAttachmentTypeForURL(void *a1)
{
  void *v1;
  void *v2;
  uint64_t v3;

  objc_msgSend(a1, "lastPathComponent");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  IMUTITypeForFilename(v1);
  v2 = (void *)objc_claimAutoreleasedReturnValue();

  if (IMUTITypeIsPhoto((_BOOL8)v2) || IMUTITypeIsAnimatedImage((_BOOL8)v2))
  {
    v3 = 0;
  }
  else if (IMUTITypeIsVideo((_BOOL8)v2))
  {
    v3 = 1;
  }
  else
  {
    v3 = 2;
  }

  return v3;
}

void sub_19E2A9B74(uint64_t a1, unsigned int a2, void *a3)
{
  id v5;
  id WeakRetained;
  int v7;
  uint64_t v8;
  uint64_t v9;
  __CFString *v10;
  __CFString *v11;
  NSObject *v12;
  uint64_t v13;
  void *v14;
  const __CFString *v15;
  _QWORD block[5];
  id v17;
  char v18;
  uint8_t buf[4];
  const __CFString *v20;
  __int16 v21;
  __CFString *v22;
  __int16 v23;
  uint64_t v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v5 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  v7 = objc_msgSend(WeakRetained, "_shouldForceSensitivityResult");

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = sub_19E2A9D88;
  block[3] = &unk_1E3FB6F38;
  objc_copyWeak(&v17, (id *)(a1 + 48));
  v8 = v7 | a2;
  v18 = v8;
  block[4] = *(_QWORD *)(a1 + 40);
  dispatch_async(MEMORY[0x1E0C80D38], block);
  v9 = *(_QWORD *)(a1 + 32);
  if (v9)
  {
    (*(void (**)(uint64_t, uint64_t, id))(v9 + 16))(v9, v8, v5);
    if (*(_QWORD *)(a1 + 56))
      v10 = CFSTR("video");
    else
      v10 = CFSTR("image");
    v11 = v10;
    if (IMOSLoggingEnabled())
    {
      OSLogHandleForIMFoundationCategory();
      v12 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
      {
        objc_msgSend(v5, "localizedDescription");
        v13 = objc_claimAutoreleasedReturnValue();
        v14 = (void *)v13;
        v15 = CFSTR("NO");
        *(_DWORD *)buf = 138412802;
        if ((_DWORD)v8)
          v15 = CFSTR("YES");
        v20 = v15;
        v21 = 2112;
        v22 = v11;
        v23 = 2112;
        v24 = v13;
        _os_log_impl(&dword_19E239000, v12, OS_LOG_TYPE_INFO, "Completed UserSafety analysis with {result=%@}. {attachmentType=%@}. error={%@}.", buf, 0x20u);

      }
    }

  }
  objc_destroyWeak(&v17);

}

void sub_19E2A9D48(_Unwind_Exception *exc_buf, int a2)
{
  id *v2;

  if (a2 == 1)
  {
    objc_begin_catch(exc_buf);
    objc_end_catch();
    JUMPOUT(0x19E2A9D04);
  }
  objc_destroyWeak(v2);
  _Unwind_Resume(exc_buf);
}

void sub_19E2A9D88(uint64_t a1)
{
  NSObject *v2;
  id WeakRetained;
  uint8_t v4[16];

  if (IMOSLoggingEnabled())
  {
    OSLogHandleForIMFoundationCategory();
    v2 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)v4 = 0;
      _os_log_impl(&dword_19E239000, v2, OS_LOG_TYPE_INFO, "Dispatched to main queue to cache the sensitivity result.", v4, 2u);
    }

  }
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(WeakRetained, "_setSensitiveValue:forIdentifier:", *(unsigned __int8 *)(a1 + 48), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40));

}

void sub_19E2A9E3C(double a1, uint64_t a2, void *a3)
{
  id v4;
  NSObject *v5;
  int v6;
  double v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  if (IMOSLoggingEnabled())
  {
    OSLogHandleForIMFoundationCategory();
    v5 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      v6 = 134217984;
      v7 = a1;
      _os_log_impl(&dword_19E239000, v5, OS_LOG_TYPE_INFO, "Video analysis ongoing with progress={%f}", (uint8_t *)&v6, 0xCu);
    }

  }
}

uint64_t sub_19E2AA174(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

Class sub_19E2AA2AC(uint64_t a1)
{
  Class result;
  void *v3;

  if (!qword_1EE503EF0)
  {
    qword_1EE503EF0 = _sl_dlopen();
    if (!qword_1EE503EF0)
    {
      abort_report_np();
      goto LABEL_6;
    }
  }
  while (1)
  {
    result = objc_getClass("MADService");
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
    if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
      break;
LABEL_6:
    v3 = (void *)sub_19E36CB88();
    free(v3);
  }
  qword_1EE503EE8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

void sub_19E2AA3EC()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.Messages", "IMRuntimeTest");
  v1 = (void *)qword_1EE503EF8;
  qword_1EE503EF8 = (uint64_t)v0;

}

uint64_t sub_19E2AA688(uint64_t a1)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(a1 + 32), sel_finishTest);
}

void sub_19E2AB0E4(_Unwind_Exception *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  _Block_object_dispose(&v2, 8);
  _Block_object_dispose(&v3, 8);
  _Block_object_dispose(&v4, 8);
  _Unwind_Resume(a1);
}

void sub_19E2AB198(_QWORD *a1, void *a2, void *a3, void *a4)
{
  id v8;
  id v9;
  id v10;
  NSObject *v11;
  const __CFString *v12;
  uint64_t v13;
  void **v14;
  void *v15;
  id v16;
  void *v17;
  int v18;
  const __CFString *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v8 = a2;
  v9 = a3;
  v10 = a4;
  if (IMOSLoggingEnabled())
  {
    OSLogHandleForIMFoundationCategory();
    v11 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      v12 = CFSTR("YES");
      if (!v8)
        v12 = CFSTR("NO");
      v18 = 138412290;
      v19 = v12;
      _os_log_impl(&dword_19E239000, v11, OS_LOG_TYPE_INFO, "BlastDoor defused payload data successfully: %@", (uint8_t *)&v18, 0xCu);
    }

  }
  v13 = *(_QWORD *)(a1[4] + 8);
  if (v8 && !*(_QWORD *)(v13 + 40))
  {
    objc_storeStrong((id *)(*(_QWORD *)(a1[5] + 8) + 40), a2);
    v14 = (void **)(*(_QWORD *)(a1[6] + 8) + 40);
    v15 = v9;
  }
  else
  {
    v14 = (void **)(v13 + 40);
    v15 = v10;
  }
  v16 = v15;
  v17 = *v14;
  *v14 = v16;

}

void sub_19E2AC638(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 0x16u);
}

void sub_19E2ACB48()
{
  IMPreviewGeneratorManager *v0;
  void *v1;

  v0 = objc_alloc_init(IMPreviewGeneratorManager);
  v1 = (void *)qword_1ECFC7020;
  qword_1ECFC7020 = (uint64_t)v0;

}

BOOL sub_19E2AE5F4(void *a1)
{
  id v1;
  _BYTE *v2;
  int v3;
  unint64_t v4;
  unsigned __int8 *v5;
  int v6;
  BOOL v7;
  id v8;
  id v9;
  _BOOL8 v10;

  v1 = objc_retainAutorelease(a1);
  v2 = (_BYTE *)objc_msgSend(v1, "UTF8String");
  if (!v2 || (v3 = *v2, !*v2))
  {

LABEL_15:
    v10 = 0;
    v8 = 0;
    v9 = 0;
    goto LABEL_16;
  }
  v4 = 0;
  v5 = v2 + 1;
  do
  {
    if (v3 == 59)
      ++v4;
    v6 = *v5++;
    v3 = v6;
    if (v6)
      v7 = v4 >= 2;
    else
      v7 = 1;
  }
  while (!v7);

  if (v4 < 2)
    goto LABEL_15;
  IMComponentsFromChatGUID();
  v8 = 0;
  v9 = 0;
  if (objc_msgSend(v8, "length"))
    v10 = objc_msgSend(v9, "length") != 0;
  else
    v10 = 0;
LABEL_16:

  return v10;
}

BOOL sub_19E2AE6DC(uint64_t a1)
{
  void *v1;
  _BOOL8 v2;

  v1 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3A28]), "initWithUUIDString:", a1);
  v2 = v1 != 0;

  return v2;
}

uint64_t sub_19E2AF0E4(uint64_t a1, void *a2, void *a3)
{
  id v4;
  id v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;

  v4 = a2;
  v5 = a3;
  objc_opt_class();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0 || (objc_opt_class(), objc_opt_class(), (objc_opt_isKindOfClass() & 1) == 0))
  {
    objc_opt_class();
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0
      && (objc_opt_class(), objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
    {
      objc_msgSend(v4, "identifier");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v5, "identifier");
      v8 = objc_claimAutoreleasedReturnValue();
    }
    else
    {
      objc_opt_class();
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0
        || (objc_opt_class(), objc_opt_class(), (objc_opt_isKindOfClass() & 1) == 0))
      {
        objc_msgSend(v4, "firstObject");
        v7 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v5, "firstObject");
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v9, "identifier");
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v7, "identifier");
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        v6 = objc_msgSend(v10, "compare:", v11);

        goto LABEL_12;
      }
      objc_msgSend(v4, "firstObject");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v5, "firstObject");
      v8 = objc_claimAutoreleasedReturnValue();
    }
    v9 = (void *)v8;
    v6 = objc_msgSend(v7, "compare:", v8);
LABEL_12:

    goto LABEL_13;
  }
  v6 = objc_msgSend(v5, "compare:", v4);
LABEL_13:

  return v6;
}

id sub_19E2AF710()
{
  id result;

  qword_1EE503F08 = (uint64_t)objc_alloc_init(MEMORY[0x1E0CB3740]);
  qword_1EE503F10 = (uint64_t)objc_alloc_init(MEMORY[0x1E0C99E08]);
  result = objc_alloc_init(MEMORY[0x1E0C99E20]);
  qword_1EE503F18 = (uint64_t)result;
  return result;
}

void sub_19E2AFC04(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x19E2AFBC4);
  }
  _Unwind_Resume(a1);
}

void sub_19E2B0510(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x19E2B04ACLL);
  }
  _Unwind_Resume(a1);
}

void sub_19E2B06E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9)
{
  id v9;
  NSObject *v10;

  if (a2 == 1)
  {
    v9 = objc_begin_catch(exception_object);
    if (IMOSLoggingEnabled())
    {
      OSLogHandleForIMFoundationCategory();
      v10 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
      {
        LODWORD(a9) = 138412290;
        *(_QWORD *)((char *)&a9 + 4) = v9;
        _os_log_impl(&dword_19E239000, v10, OS_LOG_TYPE_INFO, "UnarchiverDecoder, caught an exception trying to decode attribution info array %@", (uint8_t *)&a9, 0xCu);
      }

    }
    objc_end_catch();
    JUMPOUT(0x19E2B06A8);
  }
  _Unwind_Resume(exception_object);
}

id IMGetAttributedInfoArrayAllowlistedClasses()
{
  void *v0;
  void *v1;
  void *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v0 = (void *)MEMORY[0x1E0C99E60];
  v4 = objc_opt_class();
  v5 = objc_opt_class();
  v6 = objc_opt_class();
  v7 = objc_opt_class();
  v8 = objc_opt_class();
  v9 = objc_opt_class();
  v10 = objc_opt_class();
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v4, 7);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "setWithArray:", v1, v4, v5, v6, v7, v8, v9);
  v2 = (void *)objc_claimAutoreleasedReturnValue();

  return v2;
}

void IMRemovePrefixFromMentions(void *a1)
{
  id v1;
  uint64_t v2;
  id v3;
  _QWORD v4[4];
  id v5;

  v1 = a1;
  v2 = objc_msgSend(v1, "length");
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 3221225472;
  v4[2] = sub_19E2B0934;
  v4[3] = &unk_1E3FB6A98;
  v5 = v1;
  v3 = v1;
  objc_msgSend(v3, "enumerateAttribute:inRange:options:usingBlock:", CFSTR("__kIMMentionConfirmedMention"), 0, v2, 0, v4);

}

void sub_19E2B0934(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  void *v6;
  void *v7;
  int v8;

  if (a4 >= 2)
  {
    objc_msgSend(*(id *)(a1 + 32), "string");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "substringFromIndex:", a3);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = objc_msgSend(v7, "hasPrefix:", CFSTR("@"));

    if (v8)
      objc_msgSend(*(id *)(a1 + 32), "deleteCharactersInRange:", a3, 1);
  }
}

uint64_t IMMentionHandleAllowedCharacterSet()
{
  return objc_msgSend(MEMORY[0x1E0CB3500], "URLPathAllowedCharacterSet");
}

id sub_19E2B09D4()
{
  if (qword_1EE503F30 != -1)
    dispatch_once(&qword_1EE503F30, &unk_1E3FB3748);
  return (id)qword_1EE503F28;
}

void sub_19E2B0A14()
{
  void *v0;
  uint64_t v1;
  void *v2;
  id v3;

  objc_msgSend(MEMORY[0x1E0CB3500], "whitespaceAndNewlineCharacterSet");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = (id)objc_msgSend(v0, "mutableCopy");

  objc_msgSend(v3, "addCharactersInString:", CFSTR("*({[/_'\""));
  v1 = objc_msgSend(v3, "copy");
  v2 = (void *)qword_1EE503F28;
  qword_1EE503F28 = v1;

}

void IMEnumerateMentionsInString(void *a1, uint64_t a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  id v8;
  void *v9;
  _QWORD aBlock[4];
  id v11;
  id v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  char v17;

  v5 = a1;
  v6 = a3;
  v14 = 0;
  v15 = &v14;
  v16 = 0x2020000000;
  v17 = 0;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 3221225472;
  aBlock[2] = sub_19E2B0BC0;
  aBlock[3] = &unk_1E3FB7090;
  v7 = v5;
  v11 = v7;
  v8 = v6;
  v12 = v8;
  v13 = &v14;
  v9 = _Block_copy(aBlock);
  objc_msgSend(v7, "enumerateSubstringsInRange:options:usingBlock:", 0, objc_msgSend(v7, "length"), 3, v9);
  if (!*((_BYTE *)v15 + 24))
    (*((void (**)(void *, const __CFString *, uint64_t, _QWORD, uint64_t, _QWORD, uint64_t *))v9 + 2))(v9, &stru_1E3FBBA48, a2, 0, a2, 0, v15 + 3);

  _Block_object_dispose(&v14, 8);
}

void sub_19E2B0BA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19E2B0BC0(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, _BYTE *a7)
{
  unint64_t v11;
  uint64_t v12;
  void *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;

  if (a2)
  {
    if (a3)
    {
      v11 = a3 - 1;
      if (objc_msgSend(*(id *)(a1 + 32), "characterAtIndex:", a3 - 1) == 64)
      {
        if (a3 < 2
          || (v12 = objc_msgSend(*(id *)(a1 + 32), "characterAtIndex:", a3 - 2),
              sub_19E2B09D4(),
              v13 = (void *)objc_claimAutoreleasedReturnValue(),
              v14 = objc_msgSend(v13, "characterIsMember:", v12),
              v13,
              v11 != 0x7FFFFFFFFFFFFFFFLL)
          && v14)
        {
          v15 = a4 + 1;
          v16 = *(_QWORD *)(a1 + 40);
          objc_msgSend(*(id *)(a1 + 32), "substringWithRange:", v11, v15);
          v17 = (void *)objc_claimAutoreleasedReturnValue();
          (*(void (**)(uint64_t, void *, unint64_t, uint64_t, uint64_t))(v16 + 16))(v16, v17, v11, v15, *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24);

          if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24))
            *a7 = 1;
        }
      }
    }
  }
}

uint64_t IMRangeOfCurrentTypedMention(void *a1, uint64_t a2)
{
  id v3;
  uint64_t v4;
  _QWORD v6[6];
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  void *v10;
  __int128 v11;

  v3 = a1;
  v7 = 0;
  v8 = &v7;
  v9 = 0x3010000000;
  v10 = &unk_19E3C9D87;
  v11 = xmmword_19E381540;
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v6[2] = sub_19E2B0D88;
  v6[3] = &unk_1E3FB70B8;
  v6[4] = &v7;
  v6[5] = a2;
  IMEnumerateMentionsInString(v3, a2, v6);
  v4 = v8[4];
  _Block_object_dispose(&v7, 8);

  return v4;
}

void sub_19E2B0D70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_19E2B0D88(uint64_t result, uint64_t a2, unint64_t a3, unint64_t a4, char *a5)
{
  unint64_t v5;
  BOOL v7;
  char v8;
  uint64_t v9;

  v5 = *(_QWORD *)(result + 40);
  v7 = v5 >= a3 && v5 - a3 < a4 || v5 == a3 + a4;
  v8 = v7;
  if (v7)
  {
    v9 = *(_QWORD *)(*(_QWORD *)(result + 32) + 8);
    *(_QWORD *)(v9 + 32) = a3;
    *(_QWORD *)(v9 + 40) = a4;
  }
  *a5 = v8;
  return result;
}

id IMMentionMeTokensForContact(void *a1, char a2)
{
  id v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t j;
  void *v19;
  void *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t k;
  void *v26;
  void *v27;
  uint64_t v28;
  void *v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t m;
  void *v35;
  void *v36;
  uint64_t v37;
  void *v38;
  void *v39;
  uint64_t v40;
  void *v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t n;
  void *v47;
  void *v48;
  uint64_t v49;
  void *v50;
  void *v51;
  uint64_t v52;
  void *v53;
  void *v54;
  uint64_t v55;
  void *v56;
  void *v57;
  uint64_t v58;
  void *v59;
  void *v60;
  uint64_t v61;
  void *v62;
  void *v63;
  uint64_t v64;
  void *v65;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  _BYTE v87[128];
  _BYTE v88[128];
  _BYTE v89[128];
  _BYTE v90[128];
  _BYTE v91[128];
  uint64_t v92;

  v92 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  objc_msgSend(MEMORY[0x1E0C99E20], "set");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if (v3)
  {
    v85 = 0u;
    v86 = 0u;
    v83 = 0u;
    v84 = 0u;
    objc_msgSend(v3, "phoneNumbers");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v83, v91, 16);
    if (v6)
    {
      v7 = v6;
      v8 = *(_QWORD *)v84;
      do
      {
        for (i = 0; i != v7; ++i)
        {
          if (*(_QWORD *)v84 != v8)
            objc_enumerationMutation(v5);
          objc_msgSend(*(id *)(*((_QWORD *)&v83 + 1) + 8 * i), "value");
          v10 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v10, "stringValue");
          v11 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v11, "_stripFZIDPrefix");
          v12 = (void *)objc_claimAutoreleasedReturnValue();

          if (objc_msgSend(v12, "length"))
          {
            IMNormalizePhoneNumber((uint64_t)v12);
            v13 = (void *)objc_claimAutoreleasedReturnValue();

            if (objc_msgSend(v13, "length"))
              objc_msgSend(v4, "addObject:", v13);
          }
          else
          {
            v13 = v12;
          }

        }
        v7 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v83, v91, 16);
      }
      while (v7);
    }

    v81 = 0u;
    v82 = 0u;
    v79 = 0u;
    v80 = 0u;
    objc_msgSend(v3, "emailAddresses");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    v15 = objc_msgSend(v14, "countByEnumeratingWithState:objects:count:", &v79, v90, 16);
    if (v15)
    {
      v16 = v15;
      v17 = *(_QWORD *)v80;
      do
      {
        for (j = 0; j != v16; ++j)
        {
          if (*(_QWORD *)v80 != v17)
            objc_enumerationMutation(v14);
          objc_msgSend(*(id *)(*((_QWORD *)&v79 + 1) + 8 * j), "value");
          v19 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v19, "_stripFZIDPrefix");
          v20 = (void *)objc_claimAutoreleasedReturnValue();

          if (objc_msgSend(v20, "length"))
            objc_msgSend(v4, "addObject:", v20);

        }
        v16 = objc_msgSend(v14, "countByEnumeratingWithState:objects:count:", &v79, v90, 16);
      }
      while (v16);
    }

    if ((a2 & 1) == 0)
    {
      v77 = 0u;
      v78 = 0u;
      v75 = 0u;
      v76 = 0u;
      objc_msgSend(v3, "urlAddresses");
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      v22 = objc_msgSend(v21, "countByEnumeratingWithState:objects:count:", &v75, v89, 16);
      if (v22)
      {
        v23 = v22;
        v24 = *(_QWORD *)v76;
        do
        {
          for (k = 0; k != v23; ++k)
          {
            if (*(_QWORD *)v76 != v24)
              objc_enumerationMutation(v21);
            v26 = *(void **)(*((_QWORD *)&v75 + 1) + 8 * k);
            objc_msgSend(v26, "value");
            v27 = (void *)objc_claimAutoreleasedReturnValue();
            v28 = objc_msgSend(v27, "length");

            if (v28)
            {
              objc_msgSend(v26, "value");
              v29 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v4, "addObject:", v29);

            }
          }
          v23 = objc_msgSend(v21, "countByEnumeratingWithState:objects:count:", &v75, v89, 16);
        }
        while (v23);
      }

      v73 = 0u;
      v74 = 0u;
      v71 = 0u;
      v72 = 0u;
      objc_msgSend(v3, "socialProfiles");
      v30 = (void *)objc_claimAutoreleasedReturnValue();
      v31 = objc_msgSend(v30, "countByEnumeratingWithState:objects:count:", &v71, v88, 16);
      if (v31)
      {
        v32 = v31;
        v33 = *(_QWORD *)v72;
        do
        {
          for (m = 0; m != v32; ++m)
          {
            if (*(_QWORD *)v72 != v33)
              objc_enumerationMutation(v30);
            objc_msgSend(*(id *)(*((_QWORD *)&v71 + 1) + 8 * m), "value");
            v35 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v35, "username");
            v36 = (void *)objc_claimAutoreleasedReturnValue();
            v37 = objc_msgSend(v36, "length");

            if (v37)
            {
              objc_msgSend(v35, "username");
              v38 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v4, "addObject:", v38);

            }
            objc_msgSend(v35, "userIdentifier");
            v39 = (void *)objc_claimAutoreleasedReturnValue();
            v40 = objc_msgSend(v39, "length");

            if (v40)
            {
              objc_msgSend(v35, "userIdentifier");
              v41 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v4, "addObject:", v41);

            }
          }
          v32 = objc_msgSend(v30, "countByEnumeratingWithState:objects:count:", &v71, v88, 16);
        }
        while (v32);
      }

      v69 = 0u;
      v70 = 0u;
      v67 = 0u;
      v68 = 0u;
      objc_msgSend(v3, "instantMessageAddresses", 0);
      v42 = (void *)objc_claimAutoreleasedReturnValue();
      v43 = objc_msgSend(v42, "countByEnumeratingWithState:objects:count:", &v67, v87, 16);
      if (v43)
      {
        v44 = v43;
        v45 = *(_QWORD *)v68;
        do
        {
          for (n = 0; n != v44; ++n)
          {
            if (*(_QWORD *)v68 != v45)
              objc_enumerationMutation(v42);
            objc_msgSend(*(id *)(*((_QWORD *)&v67 + 1) + 8 * n), "value");
            v47 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v47, "username");
            v48 = (void *)objc_claimAutoreleasedReturnValue();
            v49 = objc_msgSend(v48, "length");

            if (v49)
            {
              objc_msgSend(v47, "username");
              v50 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v4, "addObject:", v50);

            }
          }
          v44 = objc_msgSend(v42, "countByEnumeratingWithState:objects:count:", &v67, v87, 16);
        }
        while (v44);
      }

      objc_msgSend(v3, "givenName");
      v51 = (void *)objc_claimAutoreleasedReturnValue();
      v52 = objc_msgSend(v51, "length");

      if (v52)
      {
        objc_msgSend(v3, "givenName");
        v53 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v4, "addObject:", v53);

      }
      objc_msgSend(v3, "middleName");
      v54 = (void *)objc_claimAutoreleasedReturnValue();
      v55 = objc_msgSend(v54, "length");

      if (v55)
      {
        objc_msgSend(v3, "middleName");
        v56 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v4, "addObject:", v56);

      }
      objc_msgSend(v3, "familyName");
      v57 = (void *)objc_claimAutoreleasedReturnValue();
      v58 = objc_msgSend(v57, "length");

      if (v58)
      {
        objc_msgSend(v3, "familyName");
        v59 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v4, "addObject:", v59);

      }
      objc_msgSend(v3, "previousFamilyName");
      v60 = (void *)objc_claimAutoreleasedReturnValue();
      v61 = objc_msgSend(v60, "length");

      if (v61)
      {
        objc_msgSend(v3, "previousFamilyName");
        v62 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v4, "addObject:", v62);

      }
      objc_msgSend(v3, "nickname");
      v63 = (void *)objc_claimAutoreleasedReturnValue();
      v64 = objc_msgSend(v63, "length");

      if (v64)
      {
        objc_msgSend(v3, "nickname");
        v65 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v4, "addObject:", v65);

      }
    }
  }

  return v4;
}

id IMMentionContactKeysForMe()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[13];

  v7[12] = *MEMORY[0x1E0C80C00];
  v0 = *MEMORY[0x1E0C966D0];
  v7[0] = *MEMORY[0x1E0C96790];
  v7[1] = v0;
  v1 = *MEMORY[0x1E0C966C0];
  v7[2] = *MEMORY[0x1E0C96780];
  v7[3] = v1;
  v2 = *MEMORY[0x1E0C96798];
  v7[4] = *MEMORY[0x1E0C96820];
  v7[5] = v2;
  v3 = *MEMORY[0x1E0C967C0];
  v7[6] = *MEMORY[0x1E0C967A0];
  v7[7] = v3;
  v4 = *MEMORY[0x1E0C968A0];
  v7[8] = *MEMORY[0x1E0C966A8];
  v7[9] = v4;
  v5 = *MEMORY[0x1E0C96740];
  v7[10] = *MEMORY[0x1E0C96868];
  v7[11] = v5;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v7, 12);
  return (id)objc_claimAutoreleasedReturnValue();
}

uint64_t sub_19E2B29E0(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "compare:");
}

uint64_t sub_19E2B2B2C()
{
  void *v0;
  uint64_t v1;
  void *v2;
  void *v3;
  id v4;
  uint64_t v5;

  objc_msgSend(MEMORY[0x1E0C99EA0], "standardUserDefaults");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "objectForKey:", CFSTR("IncludeSmartRepliesKey"));
  v1 = objc_claimAutoreleasedReturnValue();
  v2 = (void *)v1;
  v3 = (void *)MEMORY[0x1E0C9AAB0];
  if (v1)
    v3 = (void *)v1;
  v4 = v3;

  v5 = objc_msgSend(v4, "BOOLValue");
  return v5;
}

void sub_19E2B2D58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19E2B2D70(uint64_t a1, void *a2)
{
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), a2);
}

__CFArray *sub_19E2B301C(void *a1, void *a2, int a3)
{
  id v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  const __CFString *v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  void *v14;
  void *v15;
  const __CFString *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  void *v21;
  void *v22;
  void *v24;
  uint64_t v25;
  void *v26;
  void *v27;
  void *v28;
  id v29;
  __CFArray *theArray;
  void *value;
  void *v32;
  void *v33;
  uint64_t v34;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  _BYTE v40[128];
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  v4 = a1;
  v29 = a2;
  objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  theArray = (__CFArray *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0C99D68], "date");
  v5 = objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0C99D48], "currentCalendar");
  v32 = (void *)objc_claimAutoreleasedReturnValue();
  v24 = (void *)v5;
  objc_msgSend(v32, "components:fromDate:", 24, v5);
  v33 = (void *)objc_claimAutoreleasedReturnValue();
  v36 = 0u;
  v37 = 0u;
  v38 = 0u;
  v39 = 0u;
  v6 = v4;
  v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v36, v40, 16);
  if (v7)
  {
    v8 = v7;
    v9 = CFSTR("Handle \"%@\" is a business ID, for SpecialEventReply.");
    v10 = *(_QWORD *)v37;
    v34 = *MEMORY[0x1E0C96670];
    v25 = *MEMORY[0x1E0C966D0];
    do
    {
      v11 = 0;
      do
      {
        if (*(_QWORD *)v37 != v10)
          objc_enumerationMutation(v6);
        v12 = *(id *)(*((_QWORD *)&v36 + 1) + 8 * v11);
        if (MEMORY[0x1A1AE7CF8]())
        {
          if ((_IMWillLog() & 1) == 0)
            goto LABEL_34;
LABEL_11:
          _IMAlwaysLog();
          goto LABEL_34;
        }
        if (!MEMORY[0x1A1AE7D1C](v12))
        {
          if (a3)
          {
            +[IMContactUtilities getContactGivenNameAndBirthdayForHandleID:](IMContactUtilities, "getContactGivenNameAndBirthdayForHandleID:", v12);
            v13 = objc_claimAutoreleasedReturnValue();
          }
          else
          {
            if (qword_1EE503F80 != -1)
              dispatch_once(&qword_1EE503F80, &unk_1E3FB4548);
            if (!off_1EE503F78)
              goto LABEL_34;
            off_1EE503F78(v12);
            v13 = objc_claimAutoreleasedReturnValue();
          }
          v14 = (void *)v13;

          if (!v14)
            goto LABEL_35;
          objc_msgSend(v14, "objectForKey:", v34);
          v15 = (void *)objc_claimAutoreleasedReturnValue();
          if (v15)
          {
            v16 = v9;
            objc_msgSend(v32, "components:fromDate:", 24, v15);
            v17 = (void *)objc_claimAutoreleasedReturnValue();
            v18 = objc_msgSend(v17, "month");
            if (v18 == objc_msgSend(v33, "month"))
            {
              v19 = objc_msgSend(v17, "day");
              if (v19 == objc_msgSend(v33, "day"))
              {
                if ((unint64_t)objc_msgSend(v6, "count") < 2)
                {
                  IMSharedUtilitiesFrameworkBundle();
                  v22 = (void *)objc_claimAutoreleasedReturnValue();
                  sub_19E2B4A04(v29, CFSTR("HAPPY_BIRTHDAY"), v22);
                  value = (void *)objc_claimAutoreleasedReturnValue();

                  if (!theArray)
                    goto LABEL_27;
                  v21 = value;
                  if (value)
                    CFArrayAppendValue(theArray, value);
                }
                else
                {
                  objc_msgSend(v14, "objectForKey:", v25);
                  value = (void *)objc_claimAutoreleasedReturnValue();
                  v26 = (void *)MEMORY[0x1E0CB3940];
                  IMSharedUtilitiesFrameworkBundle();
                  v28 = (void *)objc_claimAutoreleasedReturnValue();
                  sub_19E2B4A04(v29, CFSTR("HAPPY_BIRTHDAY_TARGETED"), v28);
                  v20 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(v26, "stringWithValidatedFormat:validFormatSpecifiers:error:", v20, CFSTR("Happy Birthday, %@!"), 0, value);
                  v27 = (void *)objc_claimAutoreleasedReturnValue();

                  if (theArray && v27)
                    CFArrayAppendValue(theArray, v27);

LABEL_27:
                  v21 = value;
                }

              }
            }

            v9 = v16;
          }

          v12 = v14;
          goto LABEL_34;
        }
        if ((_IMWillLog() & 1) != 0)
          goto LABEL_11;
LABEL_34:

LABEL_35:
        ++v11;
      }
      while (v8 != v11);
      v8 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v36, v40, 16);
    }
    while (v8);
  }

  return theArray;
}

void sub_19E2B341C(uint64_t a1, void *a2)
{
  uint64_t i;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  id v10;
  id v11;
  id v12;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  IMReplySuggestion *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  _BYTE *v27;
  id obj;
  uint64_t v29;
  uint64_t v30;
  uint8_t v31;
  _BYTE v32[7];
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  uint8_t buf[8];
  uint64_t v38;
  void (*v39)(uint64_t);
  void *v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  _BYTE v46[128];
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  v33 = 0u;
  v34 = 0u;
  v35 = 0u;
  v36 = 0u;
  obj = a2;
  v30 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v33, v46, 16);
  if (v30)
  {
    v29 = *(_QWORD *)v34;
    v27 = v32;
    do
    {
      for (i = 0; i != v30; ++i)
      {
        if (*(_QWORD *)v34 != v29)
          objc_enumerationMutation(obj);
        v4 = *(void **)(*((_QWORD *)&v33 + 1) + 8 * i);
        objc_msgSend(v4, "title", v27);
        v5 = (void *)objc_claimAutoreleasedReturnValue();
        if (objc_msgSend(v5, "length"))
        {
          v6 = *(void **)(a1 + 32);
          objc_msgSend(v5, "localizedLowercaseString");
          v7 = (void *)objc_claimAutoreleasedReturnValue();
          LODWORD(v6) = objc_msgSend(v6, "containsObject:", v7);

          if ((_DWORD)v6)
          {
            if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_INFO))
            {
              *(_WORD *)buf = 0;
              _os_log_impl(&dword_19E239000, MEMORY[0x1E0C81028], OS_LOG_TYPE_INFO, "IMReplySuggestionGenerator - SROSmartRepliesSuggestion collides with an existing special event suggestion.", buf, 2u);
            }
          }
          else
          {
            v42 = 0;
            v43 = &v42;
            v44 = 0x2050000000;
            v9 = (void *)qword_1EE503F98;
            v45 = qword_1EE503F98;
            if (!qword_1EE503F98)
            {
              *(_QWORD *)buf = MEMORY[0x1E0C809B0];
              v38 = 3221225472;
              v39 = sub_19E2B4C2C;
              v40 = &unk_1E3FB4F80;
              v41 = &v42;
              sub_19E2B4C2C((uint64_t)buf);
              v9 = (void *)v43[3];
            }
            v10 = objc_retainAutorelease(v9);
            _Block_object_dispose(&v42, 8);
            if ((objc_opt_isKindOfClass() & 1) != 0)
            {
              v11 = v4;
              v12 = v5;
              objc_msgSend(v11, "attribution");
              v13 = (void *)objc_claimAutoreleasedReturnValue();
              v14 = (void *)objc_msgSend(v13, "copy");

              v15 = objc_msgSend(v11, "type");
              if (v15 == 15)
              {
                objc_msgSend(v11, "metadata");
                v19 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v19, "url");
                v20 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v20, "absoluteString");
                v21 = (void *)objc_claimAutoreleasedReturnValue();

                if (objc_msgSend(v21, "length"))
                  v22 = v21;
                else
                  v22 = v12;
                v17 = v22;

                v16 = 4;
              }
              else
              {
                if (v15 == 3)
                  v16 = 3;
                else
                  v16 = 2;
                v17 = v12;
              }
              v18 = -[IMReplySuggestion initWithType:text:]([IMReplySuggestion alloc], "initWithType:text:", v16, v12);
              -[IMReplySuggestion setStringRepresentation:](v18, "setStringRepresentation:", v17);
              -[IMReplySuggestion setAttribution:](v18, "setAttribution:", v14);
              v23 = (void *)objc_opt_class();
              objc_msgSend(v11, "metadata");
              v24 = (void *)objc_claimAutoreleasedReturnValue();
              -[IMReplySuggestion setTintColor:](v18, "setTintColor:", objc_msgSend(v23, "_tintColorForMetadata:", v24));

            }
            else
            {
              v18 = -[IMReplySuggestion initWithType:text:]([IMReplySuggestion alloc], "initWithType:text:", 0, v5);
              v11 = (id)objc_msgSend(v5, "copy");
              -[IMReplySuggestion setStringRepresentation:](v18, "setStringRepresentation:", v11);
            }

            v25 = *(void **)(a1 + 32);
            objc_msgSend(v5, "localizedLowercaseString");
            v26 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v25, "addObject:", v26);

            objc_msgSend(*(id *)(a1 + 40), "addObject:", v18);
          }
        }
        else if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        {
          sub_19E36CFF4(&v31, v27, v8);
        }

      }
      v30 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v33, v46, 16);
    }
    while (v30);
  }

  (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
}

void sub_19E2B3824(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  _Block_object_dispose(&a29, 8);
  _Unwind_Resume(a1);
}

void sub_19E2B39F0(void *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t i;
  void *v12;
  void *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _BYTE v18[128];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = a2;
  v7 = a3;
  v14 = 0u;
  v15 = 0u;
  v16 = 0u;
  v17 = 0u;
  v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
  if (v8)
  {
    v9 = v8;
    v10 = *(_QWORD *)v15;
    do
    {
      for (i = 0; i != v9; ++i)
      {
        if (*(_QWORD *)v15 != v10)
          objc_enumerationMutation(v7);
        v12 = *(void **)(*((_QWORD *)&v14 + 1) + 8 * i);
        objc_msgSend(v12, "lowercaseString");
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        if ((objc_msgSend(v6, "containsObject:", v13) & 1) == 0)
        {
          objc_msgSend(v5, "addObject:", v12);
          objc_msgSend(v6, "addObject:", v13);
        }

      }
      v9 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
    }
    while (v9);
  }

}

void sub_19E2B3B40(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  NSObject *v8;
  void *v9;
  void *v10;
  unsigned int v11;
  uint64_t v12;
  uint8_t v13;
  _BYTE v14[15];

  v3 = a2;
  objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v3, "count"))
  {
    v5 = 0;
    v6 = 0;
    v7 = 0;
    v8 = MEMORY[0x1E0C81028];
    do
    {
      objc_msgSend(v3, "objectAtIndexedSubscript:", v7);
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v9, "title");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      if (objc_msgSend(v10, "length"))
      {
        v11 = objc_msgSend(v9, "isDynamicSuggestion");
        v6 += v11;
        if ((v11 & (v5 == 0)) != 0)
          v5 = v7;
        objc_msgSend(v4, "addObject:", v10);
      }
      else if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      {
        sub_19E36CFF4(&v13, v14, v12);
      }

      ++v7;
    }
    while (v7 < objc_msgSend(v3, "count"));
  }
  sub_19E2B39F0(*(void **)(a1 + 32), *(void **)(a1 + 40), v4);
  (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();

}

void sub_19E2B42C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,char a46)
{
  _Block_object_dispose(&a46, 8);
  _Unwind_Resume(a1);
}

id sub_19E2B42E8()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)qword_1EE503FA8;
  v7 = qword_1EE503FA8;
  if (!qword_1EE503FA8)
  {
    v3[0] = MEMORY[0x1E0C809B0];
    v3[1] = 3221225472;
    v3[2] = sub_19E2B4D2C;
    v3[3] = &unk_1E3FB4F80;
    v3[4] = &v4;
    sub_19E2B4D2C((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_19E2B4388(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_19E2B43A0()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)qword_1EE503FB8;
  v7 = qword_1EE503FB8;
  if (!qword_1EE503FB8)
  {
    v3[0] = MEMORY[0x1E0C809B0];
    v3[1] = 3221225472;
    v3[2] = sub_19E2B4DD4;
    v3[3] = &unk_1E3FB4F80;
    v3[4] = &v4;
    sub_19E2B4DD4((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_19E2B4440(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19E2B4458(uint64_t a1, void *a2)
{
  id v3;

  objc_msgSend(a2, "suggestions");
  v3 = (id)objc_claimAutoreleasedReturnValue();
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();

}

void sub_19E2B4550()
{
  NSObject *v0;

  dispatch_get_global_queue(17, 0);
  v0 = objc_claimAutoreleasedReturnValue();
  dispatch_async(v0, &unk_1E3FB2578);

}

void sub_19E2B458C()
{
  id v0;

  objc_msgSend(sub_19E2B43A0(), "sharedManager");
  v0 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "primeResponsesExperimentsIfNeeded");

}

void sub_19E2B46B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19E2B46D0(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  id v14;

  v14 = a2;
  objc_msgSend(v14, "transferGUID");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v3)
  {
    objc_msgSend(v14, "messagePartBody");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "string");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
    objc_msgSend(v5, "trimmedString");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "stringByAppendingString:", v7);
    v8 = objc_claimAutoreleasedReturnValue();
    v9 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
    v10 = *(void **)(v9 + 40);
    *(_QWORD *)(v9 + 40) = v8;

    objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), "stringByAppendingString:", CFSTR(" "));
    v11 = objc_claimAutoreleasedReturnValue();
    v12 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
    v13 = *(void **)(v12 + 40);
    *(_QWORD *)(v12 + 40) = v11;

  }
}

id sub_19E2B4A04(void *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  void (*v8)(id, id, const __CFString *, id);
  void *v9;
  _Unwind_Exception *v11;
  _QWORD v12[5];
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  void *v16;

  v5 = a1;
  v6 = a2;
  v7 = a3;
  v13 = 0;
  v14 = &v13;
  v15 = 0x2020000000;
  v8 = (void (*)(id, id, const __CFString *, id))off_1EE503F88;
  v16 = off_1EE503F88;
  if (!off_1EE503F88)
  {
    v12[0] = MEMORY[0x1E0C809B0];
    v12[1] = 3221225472;
    v12[2] = sub_19E2B4B3C;
    v12[3] = &unk_1E3FB4F80;
    v12[4] = &v13;
    sub_19E2B4B3C((uint64_t)v12);
    v8 = (void (*)(id, id, const __CFString *, id))v14[3];
  }
  _Block_object_dispose(&v13, 8);
  if (!v8)
  {
    v11 = (_Unwind_Exception *)sub_19E36B7D8();
    _Block_object_dispose(&v13, 8);
    _Unwind_Resume(v11);
  }
  v8(v5, v6, CFSTR("IMSharedUtilities"), v7);
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  return v9;
}

void *sub_19E2B4B10()
{
  void *result;

  result = (void *)MEMORY[0x1A1AE7D58]("IMDCNGivenNameAndBirthdayForHandleID", CFSTR("IMDPersistence"));
  off_1EE503F78 = result;
  return result;
}

void *sub_19E2B4B3C(uint64_t a1)
{
  void *v2;
  void *result;
  void *v4;

  if (qword_1EE503F90)
  {
    v2 = (void *)qword_1EE503F90;
  }
  else
  {
    qword_1EE503F90 = _sl_dlopen();
    v2 = (void *)qword_1EE503F90;
    if (!qword_1EE503F90)
    {
      v4 = (void *)abort_report_np();
      free(v4);
    }
  }
  result = dlsym(v2, "WRLocalizedStringForLanguage");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  off_1EE503F88 = *(_UNKNOWN **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

void sub_19E2B4C2C(uint64_t a1)
{
  sub_19E2B4C80();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("SROSmartRepliesActionSuggestion");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    qword_1EE503F98 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    sub_19E36D02C();
    sub_19E2B4C80();
  }
}

void sub_19E2B4C80()
{
  void *v0;

  if (!qword_1EE503FA0)
    qword_1EE503FA0 = _sl_dlopen();
  if (!qword_1EE503FA0)
  {
    v0 = (void *)abort_report_np();
    free(v0);
  }
}

Class sub_19E2B4D2C(uint64_t a1)
{
  Class result;
  uint64_t v3;

  sub_19E2B4C80();
  result = objc_getClass("SROSmartRepliesMessage");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    qword_1EE503FA8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    v3 = sub_19E36D050();
    return (Class)sub_19E2B4D80(v3);
  }
  return result;
}

void sub_19E2B4D80(uint64_t a1)
{
  uint64_t v2;

  sub_19E2B4C80();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("SROSmartRepliesSuggestionRequest");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    qword_1EE503FB0 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    v2 = sub_19E36D074();
    sub_19E2B4DD4(v2);
  }
}

void sub_19E2B4DD4(uint64_t a1)
{
  void *v2;
  NSObject *v3;
  uint64_t v4;
  const char *v5;
  uint8_t *v6;

  sub_19E2B4C80();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("SROSmartRepliesManager");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    qword_1EE503FB8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    v2 = (void *)sub_19E36D098();
    sub_19E2B4E28(v2, v3, v4, v5, v6);
  }
}

void sub_19E2B4E28(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, a5, 2u);
}

id sub_19E2B55C8(void *a1, uint64_t a2, void *a3, void *a4, uint64_t a5)
{
  id v8;
  id v9;
  uint64_t v10;
  id v11;
  void *v12;
  id v13;
  id v14;
  void *v15;
  void *v16;
  _QWORD v18[4];
  id v19;
  id v20;
  _QWORD aBlock[4];
  id v22;

  v8 = a3;
  v9 = a4;
  v10 = MEMORY[0x1E0C809B0];
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 3221225472;
  aBlock[2] = sub_19E2B56E4;
  aBlock[3] = &unk_1E3FB71F0;
  v11 = v8;
  v22 = v11;
  v12 = _Block_copy(aBlock);
  v18[0] = v10;
  v18[1] = 3221225472;
  v18[2] = sub_19E2B5720;
  v18[3] = &unk_1E3FB7218;
  v19 = v11;
  v20 = v9;
  v13 = v9;
  v14 = v11;
  v15 = _Block_copy(v18);
  objc_msgSend(a1, "__im_attributedStringByReplacingAdaptiveImageGlyphFileTransfersUsingIsAdaptiveImageGlyphProvider:replacementTextProvider:removedTransferGUIDsOut:", v12, v15, a5);
  v16 = (void *)objc_claimAutoreleasedReturnValue();

  return v16;
}

uint64_t sub_19E2B56E4(uint64_t a1)
{
  void *v1;
  uint64_t v2;

  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = objc_msgSend(v1, "isAdaptiveImageGlyph");

  return v2;
}

id sub_19E2B5720(uint64_t a1)
{
  void *v2;
  void *v3;

  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return v3;
}

id sub_19E2B5770(void *a1, uint64_t a2, void *a3, void *a4, _QWORD *a5)
{
  id v7;
  id v8;
  uint64_t v9;
  id v10;
  id v11;
  id v12;
  uint64_t v13;
  id v14;
  id v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  void *v19;
  void *v20;
  id v21;
  void *v22;
  void *v23;
  uint64_t v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  id v30;
  void *v31;
  id v32;
  id v33;
  void *v35;
  _QWORD v36[4];
  id v37;
  id v38;
  id v39;
  id v40;
  id v41;

  v7 = a3;
  v8 = a4;
  v9 = objc_msgSend(a1, "length");
  v10 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  v11 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  v12 = objc_alloc_init(MEMORY[0x1E0C99E10]);
  v13 = *MEMORY[0x1E0D36430];
  v36[0] = MEMORY[0x1E0C809B0];
  v36[1] = 3221225472;
  v36[2] = sub_19E2B59F8;
  v36[3] = &unk_1E3FB7240;
  v33 = v7;
  v40 = v33;
  v30 = v12;
  v37 = v30;
  v32 = v8;
  v41 = v32;
  v14 = v10;
  v38 = v14;
  v15 = v11;
  v39 = v15;
  objc_msgSend(a1, "enumerateAttribute:inRange:options:usingBlock:", v13, 0, v9, 0, v36);
  v35 = (void *)objc_msgSend(a1, "mutableCopy");
  v16 = objc_msgSend(v14, "count") - 1;
  if (v16 >= 0)
  {
    do
    {
      objc_msgSend(v14, "objectAtIndexedSubscript:", v16, v30, v32, v33);
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      v18 = objc_msgSend(v17, "integerValue");

      objc_msgSend(v15, "objectAtIndexedSubscript:", v16);
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(a1, "attributesAtIndex:effectiveRange:", v18, 0);
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      v21 = v14;
      v22 = a1;
      v23 = (void *)objc_msgSend(v20, "mutableCopy");
      objc_msgSend(v23, "removeObjectForKey:", v13);
      v24 = v13;
      v25 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3498]), "initWithString:attributes:", v19, v23);
      objc_msgSend(v35, "replaceCharactersInRange:withAttributedString:", v18, 1, v25);

      v13 = v24;
      a1 = v22;
      v14 = v21;

      --v16;
    }
    while (v16 != -1);
  }
  v26 = (void *)objc_msgSend(v35, "copy", v30);
  objc_msgSend(v31, "array");
  v27 = (void *)objc_claimAutoreleasedReturnValue();
  v28 = v27;
  if (a5)
    *a5 = objc_retainAutorelease(v27);

  return v26;
}

void sub_19E2B59F8(uint64_t a1, void *a2, unint64_t a3, uint64_t a4)
{
  char isKindOfClass;
  void *v8;
  id v9;
  void *v10;
  void *v11;
  void *v12;
  id v13;

  v13 = a2;
  objc_opt_class();
  isKindOfClass = objc_opt_isKindOfClass();
  v8 = v13;
  if ((isKindOfClass & 1) != 0)
  {
    v9 = v13;
    if ((*(unsigned int (**)(void))(*(_QWORD *)(a1 + 56) + 16))())
    {
      objc_msgSend(*(id *)(a1 + 32), "addObject:", v9);
      (*(void (**)(void))(*(_QWORD *)(a1 + 64) + 16))();
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      if (a3 < a3 + a4)
      {
        do
        {
          v11 = *(void **)(a1 + 40);
          objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", a3);
          v12 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v11, "addObject:", v12);

          objc_msgSend(*(id *)(a1 + 48), "addObject:", v10);
          ++a3;
          --a4;
        }
        while (a4);
      }

    }
    v8 = v13;
  }

}

void sub_19E2B5B00(void *a1, uint64_t a2, void *a3, void *a4)
{
  id v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  id v11;
  _QWORD v12[4];
  id v13;
  id v14;

  v6 = a3;
  v7 = a4;
  v8 = objc_msgSend(a1, "length");
  v9 = *MEMORY[0x1E0D36430];
  v12[0] = MEMORY[0x1E0C809B0];
  v12[1] = 3221225472;
  v12[2] = sub_19E2B5BD4;
  v12[3] = &unk_1E3FB7268;
  v13 = v6;
  v14 = v7;
  v10 = v7;
  v11 = v6;
  objc_msgSend(a1, "enumerateAttribute:inRange:options:usingBlock:", v9, 0, v8, 0, v12);

}

void sub_19E2B5BD4(uint64_t a1, void *a2, unint64_t a3, uint64_t a4)
{
  id v7;
  id v8;
  BOOL v9;

  v7 = a2;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    v8 = v7;
    if ((*(unsigned int (**)(void))(*(_QWORD *)(a1 + 32) + 16))())
      v9 = a3 >= a3 + a4;
    else
      v9 = 1;
    if (!v9)
    {
      do
      {
        (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
        ++a3;
        --a4;
      }
      while (a4);
    }

  }
}

void sub_19E2B5CA8(void *a1, uint64_t a2, void *a3, void *a4)
{
  id v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  id v11;
  _QWORD v12[4];
  id v13;
  id v14;

  v6 = a3;
  v7 = a4;
  v8 = objc_msgSend(a1, "length");
  v9 = *MEMORY[0x1E0D36430];
  v12[0] = MEMORY[0x1E0C809B0];
  v12[1] = 3221225472;
  v12[2] = sub_19E2B5D7C;
  v12[3] = &unk_1E3FB7268;
  v13 = v6;
  v14 = v7;
  v10 = v7;
  v11 = v6;
  objc_msgSend(a1, "enumerateAttribute:inRange:options:usingBlock:", v9, 0, v8, 0, v12);

}

void sub_19E2B5D7C(uint64_t a1, void *a2, unint64_t a3, uint64_t a4)
{
  id v7;
  void *v8;
  BOOL v9;

  v7 = a2;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v8, "isAdaptiveImageGlyph"))
      v9 = a3 >= a3 + a4;
    else
      v9 = 1;
    if (!v9)
    {
      do
      {
        (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
        ++a3;
        --a4;
      }
      while (a4);
    }

  }
}

id sub_19E2B5E54(void *a1)
{
  uint64_t v2;
  id v3;
  uint64_t v4;
  id v5;
  void *v6;
  _QWORD v8[4];
  id v9;

  v2 = objc_msgSend(a1, "length");
  v3 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  v4 = *MEMORY[0x1E0D36430];
  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 3221225472;
  v8[2] = sub_19E2B5F1C;
  v8[3] = &unk_1E3FB53D0;
  v9 = v3;
  v5 = v3;
  objc_msgSend(a1, "enumerateAttribute:inRange:options:usingBlock:", v4, 0, v2, 0, v8);
  objc_msgSend(MEMORY[0x1E0C99E40], "orderedSetWithArray:", v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  return v6;
}

void sub_19E2B5F1C(uint64_t a1, void *a2)
{
  char isKindOfClass;
  void *v4;
  id v5;
  id v6;

  v6 = a2;
  objc_opt_class();
  isKindOfClass = objc_opt_isKindOfClass();
  v4 = v6;
  if ((isKindOfClass & 1) != 0)
  {
    v5 = v6;
    if (objc_msgSend(v5, "length"))
      objc_msgSend(*(id *)(a1 + 32), "addObject:", v5);

    v4 = v6;
  }

}

uint64_t sub_19E2B5F8C(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[5];
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  char v9;

  v6 = 0;
  v7 = &v6;
  v8 = 0x2020000000;
  v9 = 0;
  v2 = objc_msgSend(a1, "length");
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 3221225472;
  v5[2] = sub_19E2B604C;
  v5[3] = &unk_1E3FB5448;
  v5[4] = &v6;
  objc_msgSend(a1, "enumerateAttribute:inRange:options:usingBlock:", CFSTR("CTAdaptiveImageProvider"), 0, v2, 0, v5);
  v3 = *((unsigned __int8 *)v7 + 24);
  _Block_object_dispose(&v6, 8);
  return v3;
}

void sub_19E2B6034(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_19E2B604C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, _BYTE *a5)
{
  if (a2)
  {
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = 1;
    *a5 = 1;
  }
  return result;
}

uint64_t sub_19E2B6068(void *a1, uint64_t a2, void *a3)
{
  id v4;
  uint64_t v5;
  _QWORD v7[5];
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  char v11;

  v4 = a3;
  v8 = 0;
  v9 = &v8;
  v10 = 0x2020000000;
  v11 = 0;
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = sub_19E2B6120;
  v7[3] = &unk_1E3FB7290;
  v7[4] = &v8;
  objc_msgSend(a1, "__im_enumerateAdaptiveImageGlyphFileTransfersUsingFileTransferProvider:block:", v4, v7);
  v5 = *((unsigned __int8 *)v9 + 24);
  _Block_object_dispose(&v8, 8);

  return v5;
}

void sub_19E2B6108(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_19E2B6120(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, _BYTE *a5)
{
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = 1;
  *a5 = 1;
  return result;
}

BOOL sub_19E2B6138(void *a1, uint64_t a2, void *a3)
{
  id v4;
  uint64_t v5;
  void *v6;
  void *v7;
  uint64_t v8;
  id v9;
  id v10;
  id v11;
  _BOOL8 v12;
  _QWORD v14[4];
  id v15;
  id v16;
  id v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  char v27;

  v4 = a3;
  v5 = objc_msgSend(a1, "length");
  objc_msgSend(MEMORY[0x1E0CB3500], "whitespaceAndNewlineCharacterSet");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(a1, "string");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v24 = 0;
  v25 = &v24;
  v26 = 0x2020000000;
  v27 = 1;
  v20 = 0;
  v21 = &v20;
  v22 = 0x2020000000;
  v23 = 0;
  v8 = *MEMORY[0x1E0D36430];
  v14[0] = MEMORY[0x1E0C809B0];
  v14[1] = 3221225472;
  v14[2] = sub_19E2B62DC;
  v14[3] = &unk_1E3FB72B8;
  v9 = v7;
  v15 = v9;
  v10 = v6;
  v16 = v10;
  v18 = &v24;
  v11 = v4;
  v17 = v11;
  v19 = &v20;
  objc_msgSend(a1, "enumerateAttribute:inRange:options:usingBlock:", v8, 0, v5, 0, v14);
  if (*((_BYTE *)v21 + 24))
    v12 = *((_BYTE *)v25 + 24) != 0;
  else
    v12 = 0;

  _Block_object_dispose(&v20, 8);
  _Block_object_dispose(&v24, 8);

  return v12;
}

void sub_19E2B62B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v11 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_19E2B62DC(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, _BYTE *a5)
{
  void *v9;
  void *v10;
  void *v11;
  id v12;

  v12 = a2;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = v9;
    if (v9 && objc_msgSend(v9, "isAdaptiveImageGlyph"))
    {
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24) = 1;
    }
    else
    {
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) = 0;
      *a5 = 1;
    }
  }
  else
  {
    objc_msgSend(*(id *)(a1 + 32), "substringWithRange:", a3, a4);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "stringByTrimmingCharactersInSet:", *(_QWORD *)(a1 + 40));
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v11, "length"))
    {
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) = 0;
      *a5 = 1;
    }

  }
}

BOOL sub_19E2B63DC(void *a1, uint64_t a2, void *a3)
{
  id v4;
  uint64_t v5;
  void *v6;
  void *v7;
  uint64_t v8;
  id v9;
  id v10;
  id v11;
  _BOOL8 v12;
  _QWORD v14[4];
  id v15;
  id v16;
  id v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  char v27;

  v4 = a3;
  v5 = objc_msgSend(a1, "length");
  objc_msgSend(MEMORY[0x1E0CB3500], "whitespaceAndNewlineCharacterSet");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(a1, "string");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v24 = 0;
  v25 = &v24;
  v26 = 0x2020000000;
  v27 = 1;
  v20 = 0;
  v21 = &v20;
  v22 = 0x2020000000;
  v23 = 0;
  v8 = *MEMORY[0x1E0D36430];
  v14[0] = MEMORY[0x1E0C809B0];
  v14[1] = 3221225472;
  v14[2] = sub_19E2B6580;
  v14[3] = &unk_1E3FB72B8;
  v9 = v7;
  v15 = v9;
  v10 = v6;
  v16 = v10;
  v18 = &v24;
  v11 = v4;
  v17 = v11;
  v19 = &v20;
  objc_msgSend(a1, "enumerateAttribute:inRange:options:usingBlock:", v8, 0, v5, 0, v14);
  if (*((_BYTE *)v21 + 24))
    v12 = *((_BYTE *)v25 + 24) != 0;
  else
    v12 = 0;

  _Block_object_dispose(&v20, 8);
  _Block_object_dispose(&v24, 8);

  return v12;
}

void sub_19E2B655C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v11 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_19E2B6580(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, _BYTE *a5)
{
  void *v9;
  void *v10;
  id v11;

  v11 = a2;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    if ((*(unsigned int (**)(void))(*(_QWORD *)(a1 + 48) + 16))())
    {
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24) = 1;
    }
    else
    {
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) = 0;
      *a5 = 1;
    }
  }
  else
  {
    objc_msgSend(*(id *)(a1 + 32), "substringWithRange:", a3, a4);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "stringByTrimmingCharactersInSet:", *(_QWORD *)(a1 + 40));
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v10, "length"))
    {
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) = 0;
      *a5 = 1;
    }

  }
}

id sub_19E2B666C(void *a1)
{
  void *v2;
  uint64_t v3;
  id v4;
  void *v5;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, void *, unint64_t, uint64_t);
  void *v10;
  id v11;
  __CFString *v12;

  v2 = (void *)objc_msgSend(a1, "mutableCopy");
  v3 = objc_msgSend(a1, "length");
  v7 = MEMORY[0x1E0C809B0];
  v8 = 3221225472;
  v9 = sub_19E2B6724;
  v10 = &unk_1E3FB72E0;
  v11 = v2;
  v12 = CFSTR("\uFFFD");
  v4 = v2;
  objc_msgSend(v4, "enumerateAttribute:inRange:options:usingBlock:", CFSTR("CTAdaptiveImageProvider"), 0, v3, 0, &v7);
  v5 = (void *)objc_msgSend(v4, "copy", v7, v8, v9, v10);

  return v5;
}

void sub_19E2B6724(uint64_t a1, void *a2, unint64_t a3, uint64_t a4)
{
  id v7;

  v7 = a2;
  if (v7 && a3 < a3 + a4)
  {
    do
    {
      objc_msgSend(*(id *)(a1 + 32), "replaceCharactersInRange:withString:", a3++, 1, *(_QWORD *)(a1 + 40));
      --a4;
    }
    while (a4);
  }

}

void sub_19E2B6790(void *a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v6;
  id v7;
  _QWORD v8[5];
  id v9;

  v6 = a4;
  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 3221225472;
  v8[2] = sub_19E2B6810;
  v8[3] = &unk_1E3FB7308;
  v8[4] = a1;
  v9 = v6;
  v7 = v6;
  objc_msgSend(a1, "__im_enumerateAdaptiveImageGlyphFileTransfersUsingFileTransferProvider:block:", a3, v8);

}

void sub_19E2B6810(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *v7;
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  if (v7)
  {
    objc_msgSend(*(id *)(a1 + 32), "addAttribute:value:range:", CFSTR("CTAdaptiveImageProvider"), v7, a3, a4);
    objc_msgSend(*(id *)(a1 + 32), "addAttribute:value:range:", CFSTR("CTEmojiImageProvider"), v7, a3, a4);
  }
  else
  {
    IMLogHandleForCategory("NSAttributedString+EmojiImages");
    v8 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
      sub_19E36D0BC(v8, v9, v10, v11, v12, v13, v14, v15);

  }
}

void sub_19E2B68C4(void *a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v6;
  id v7;
  _QWORD v8[5];
  id v9;

  v6 = a4;
  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 3221225472;
  v8[2] = sub_19E2B6944;
  v8[3] = &unk_1E3FB7330;
  v8[4] = a1;
  v9 = v6;
  v7 = v6;
  objc_msgSend(a1, "__im_enumerateAdaptiveImageGlyphFileTransfersUsingIsAdaptiveImageGlyphProvider:block:", a3, v8);

}

void sub_19E2B6944(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *v7;
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  if (v7)
  {
    objc_msgSend(*(id *)(a1 + 32), "addAttribute:value:range:", CFSTR("CTAdaptiveImageProvider"), v7, a3, a4);
    objc_msgSend(*(id *)(a1 + 32), "addAttribute:value:range:", CFSTR("CTEmojiImageProvider"), v7, a3, a4);
  }
  else
  {
    IMLogHandleForCategory("NSAttributedString+EmojiImages");
    v8 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
      sub_19E36D0BC(v8, v9, v10, v11, v12, v13, v14, v15);

  }
}

void sub_19E2B69F8(void *a1, uint64_t a2, void *a3)
{
  id v4;
  uint64_t v5;
  void *v6;
  id v7;
  _QWORD v8[4];
  id v9;
  void *v10;

  v4 = a3;
  v5 = objc_msgSend(a1, "length");
  v6 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99E60]), "initWithArray:", v4);

  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 3221225472;
  v8[2] = sub_19E2B6AB0;
  v8[3] = &unk_1E3FB7358;
  v9 = v6;
  v10 = a1;
  v7 = v6;
  objc_msgSend(a1, "enumerateAttributesInRange:options:usingBlock:", 0, v5, 0, v8);

}

void sub_19E2B6AB0(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t i;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _BYTE v17[128];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v7 = a2;
  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  v16 = 0u;
  v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
  if (v8)
  {
    v9 = v8;
    v10 = *(_QWORD *)v14;
    do
    {
      for (i = 0; i != v9; ++i)
      {
        if (*(_QWORD *)v14 != v10)
          objc_enumerationMutation(v7);
        v12 = *(_QWORD *)(*((_QWORD *)&v13 + 1) + 8 * i);
        if ((objc_msgSend(*(id *)(a1 + 32), "containsObject:", v12) & 1) == 0)
          objc_msgSend(*(id *)(a1 + 40), "removeAttribute:range:", v12, a3, a4);
      }
      v9 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
    }
    while (v9);
  }

}

void sub_19E2B6BD0(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, &a9, 2u);
}

uint64_t IMSharedUtilitiesProtoCloudKitEncryptedMessageUpdateT3ReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  BOOL v16;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t result;
  void *String;
  id v25;
  uint64_t v26;
  void *v27;
  void *Data;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (2)
    {
      if (!*(_BYTE *)(a2 + *v5))
      {
        v8 = 0;
        v9 = 0;
        v10 = 0;
        while (1)
        {
          v11 = *v3;
          v12 = *(_QWORD *)(a2 + v11);
          if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
            break;
          v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
          *(_QWORD *)(a2 + v11) = v12 + 1;
          v10 |= (unint64_t)(v13 & 0x7F) << v8;
          if ((v13 & 0x80) == 0)
            goto LABEL_12;
          v8 += 7;
          v14 = v9++ >= 9;
          if (v14)
          {
            v10 = 0;
            v15 = *(unsigned __int8 *)(a2 + *v5);
            goto LABEL_14;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
        v15 = *(unsigned __int8 *)(a2 + *v5);
        if (*(_BYTE *)(a2 + *v5))
          v10 = 0;
LABEL_14:
        if (v15)
          v16 = 1;
        else
          v16 = (v10 & 7) == 4;
        if (!v16)
        {
          switch((v10 >> 3))
          {
            case 1u:
              v17 = 0;
              v18 = 0;
              v19 = 0;
              *(_BYTE *)(a1 + 36) |= 1u;
              break;
            case 2u:
              String = (void *)PBReaderReadString();

              v25 = String;
              v26 = 16;
              goto LABEL_31;
            case 3u:
              v27 = (void *)PBReaderReadString();

              v25 = v27;
              v26 = 8;
              goto LABEL_31;
            case 4u:
              Data = (void *)PBReaderReadData();

              v25 = Data;
              v26 = 24;
LABEL_31:
              *(_QWORD *)(a1 + v26) = v25;
              goto LABEL_36;
            default:
              result = PBReaderSkipValueWithTag();
              if (!(_DWORD)result)
                return result;
LABEL_36:
              if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
                return *(_BYTE *)(a2 + *v5) == 0;
              continue;
          }
          while (1)
          {
            v20 = *v3;
            v21 = *(_QWORD *)(a2 + v20);
            if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
              break;
            v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
            *(_QWORD *)(a2 + v20) = v21 + 1;
            v19 |= (unint64_t)(v22 & 0x7F) << v17;
            if ((v22 & 0x80) == 0)
              goto LABEL_33;
            v17 += 7;
            v14 = v18++ >= 9;
            if (v14)
            {
              LODWORD(v19) = 0;
              goto LABEL_35;
            }
          }
          *(_BYTE *)(a2 + *v5) = 1;
LABEL_33:
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v19) = 0;
LABEL_35:
          *(_DWORD *)(a1 + 32) = v19;
          goto LABEL_36;
        }
      }
      break;
    }
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

id sub_19E2B7540()
{
  if (qword_1EE503A88 != -1)
    dispatch_once(&qword_1EE503A88, &unk_1E3FB37A8);
  return (id)qword_1EE503A80;
}

uint64_t sub_19E2B7580()
{
  id v0;
  void *v1;
  void *v2;

  v0 = objc_alloc_init(MEMORY[0x1E0CB37F0]);
  v1 = (void *)qword_1EE503A80;
  qword_1EE503A80 = (uint64_t)v0;

  objc_msgSend(MEMORY[0x1E0C99DC8], "currentLocale");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend((id)qword_1EE503A80, "setLocale:", v2);

  objc_msgSend((id)qword_1EE503A80, "setNumberStyle:", 1);
  return MEMORY[0x1E0DE7D20](qword_1EE503A80, sel_setUsesGroupingSeparator_);
}

id sub_19E2B75EC(uint64_t a1, uint64_t a2, void *a3)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  v3 = a3;
  if (qword_1EE503FC8 != -1)
    dispatch_once(&qword_1EE503FC8, &unk_1E3FB42A8);
  if (!v3)
    v3 = &unk_1E3FFE570;
  v4 = (void *)MEMORY[0x1E0CB3940];
  objc_msgSend(MEMORY[0x1E0CB34E8], "stringFromByteCount:countStyle:", objc_msgSend(v3, "longLongValue"), 3);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend((id)qword_1EE503FC0, "stringFromNumber:", v3);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "stringWithFormat:", CFSTR("%@ (%@ Bytes)"), v5, v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  return v7;
}

uint64_t sub_19E2B76C8()
{
  id v0;
  void *v1;
  void *v2;

  v0 = objc_alloc_init(MEMORY[0x1E0CB37F0]);
  v1 = (void *)qword_1EE503FC0;
  qword_1EE503FC0 = (uint64_t)v0;

  objc_msgSend(MEMORY[0x1E0C99DC8], "currentLocale");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend((id)qword_1EE503FC0, "setLocale:", v2);

  objc_msgSend((id)qword_1EE503FC0, "setNumberStyle:", 1);
  return MEMORY[0x1E0DE7D20](qword_1EE503FC0, sel_setUsesGroupingSeparator_);
}

id sub_19E2B7734(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;

  v6 = (void *)MEMORY[0x1E0CB3940];
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLongLong:");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(a1, "stringFromHugeNumber:", v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLongLong:", a4);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(a1, "stringFromHugeNumber:", v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "stringWithFormat:", CFSTR("%@ (disk allocation size: %@)"), v8, v10);
  v11 = (void *)objc_claimAutoreleasedReturnValue();

  return v11;
}

uint64_t IMSharedUtilitiesProtoCloudKitEncryptedParticipantChangeReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t result;
  char v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  void *String;
  id v31;
  uint64_t v32;
  void *Data;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      switch((v10 >> 3))
      {
        case 1u:
          v17 = 0;
          v18 = 0;
          v19 = 0;
          *(_BYTE *)(a1 + 36) |= 2u;
          while (1)
          {
            v20 = *v3;
            v21 = *(_QWORD *)(a2 + v20);
            if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
              break;
            v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
            *(_QWORD *)(a2 + v20) = v21 + 1;
            v19 |= (unint64_t)(v22 & 0x7F) << v17;
            if ((v22 & 0x80) == 0)
              goto LABEL_39;
            v17 += 7;
            v14 = v18++ >= 9;
            if (v14)
            {
              LODWORD(v19) = 0;
              goto LABEL_41;
            }
          }
          *(_BYTE *)(a2 + *v5) = 1;
LABEL_39:
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v19) = 0;
LABEL_41:
          *(_DWORD *)(a1 + 32) = v19;
          continue;
        case 2u:
          v24 = 0;
          v25 = 0;
          v26 = 0;
          *(_BYTE *)(a1 + 36) |= 1u;
          break;
        case 3u:
          String = (void *)PBReaderReadString();

          v31 = String;
          v32 = 16;
          goto LABEL_37;
        case 4u:
          Data = (void *)PBReaderReadData();

          v31 = Data;
          v32 = 24;
LABEL_37:
          *(_QWORD *)(a1 + v32) = v31;
          continue;
        default:
          result = PBReaderSkipValueWithTag();
          if (!(_DWORD)result)
            return result;
          continue;
      }
      while (1)
      {
        v27 = *v3;
        v28 = *(_QWORD *)(a2 + v27);
        if (v28 == -1 || v28 >= *(_QWORD *)(a2 + *v4))
          break;
        v29 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v28);
        *(_QWORD *)(a2 + v27) = v28 + 1;
        v26 |= (unint64_t)(v29 & 0x7F) << v24;
        if ((v29 & 0x80) == 0)
          goto LABEL_43;
        v24 += 7;
        v14 = v25++ >= 9;
        if (v14)
        {
          v26 = 0;
          goto LABEL_45;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_43:
      if (*(_BYTE *)(a2 + *v5))
        v26 = 0;
LABEL_45:
      *(_QWORD *)(a1 + 8) = v26;
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sub_19E2B8F94(uint64_t a1, void *a2, void *a3)
{
  void (**v5)(id, id, IMServiceReachabilityHandleResult *);
  uint64_t v6;
  uint64_t v7;
  IMServiceReachabilityHandleResult *v8;
  id v9;

  v9 = a2;
  v5 = a3;
  v6 = *(_QWORD *)(a1 + 48);
  if (v6)
    v7 = (*(uint64_t (**)(uint64_t, id))(v6 + 16))(v6, v9);
  else
    v7 = *(_BYTE *)(a1 + 56) != 0;
  objc_msgSend(*(id *)(a1 + 32), "setAllAreReachable:", v7 & objc_msgSend(*(id *)(a1 + 32), "allAreReachable"));
  v8 = -[IMServiceReachabilityHandleResult initWithHandleID:service:isReachable:]([IMServiceReachabilityHandleResult alloc], "initWithHandleID:service:isReachable:", v9, *(_QWORD *)(a1 + 40), v7);
  v5[2](v5, v9, v8);

}

id IMAttachmentsCreateLocalizedDescription(void *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  id v17;
  __CFString *v18;
  id v19;
  void *v20;
  __CFString *v21;
  void *v22;
  id v23;
  void *v24;
  char v25;
  void *v26;
  void *v27;
  BOOL IsImage;
  BOOL IsMovie;
  BOOL IsPass;
  const char *v31;
  uint64_t v32;
  const char *v33;
  uint64_t v34;
  char IsMap;
  BOOL IsAudio;
  BOOL IsVCard;
  _BOOL4 IsCalendar;
  __CFString *v39;
  uint64_t v40;
  int v41;
  void *v42;
  void *v43;
  void *v44;
  id v45;
  void *v46;
  void *v47;
  void *v48;
  void *v49;
  id v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  uint64_t v55;
  void *v56;
  void *v57;
  uint64_t v58;
  void *v59;
  void *v60;
  void *v61;
  void *v62;
  void *v63;
  void *v65;
  void *v66;
  void *v67;
  void *v68;
  id v69;
  void *v70;
  void *v71;
  id v72;
  id v73;
  uint64_t v74;
  uint64_t v75;
  id v76;
  int v77;
  void *v78;
  id v79;
  id v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  id v85;
  id v86;
  id v87;
  __int16 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  _BYTE v93[128];
  _BYTE v94[128];
  uint64_t v95;

  v95 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = a2;
  v7 = a3;
  v73 = objc_alloc_init(MEMORY[0x1E0C99E10]);
  v8 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  v89 = 0u;
  v90 = 0u;
  v91 = 0u;
  v92 = 0u;
  v9 = v5;
  v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v89, v94, 16);
  v78 = v8;
  if (v10)
  {
    v11 = v10;
    v69 = v6;
    v12 = 0;
    v13 = *(_QWORD *)v90;
    v75 = *MEMORY[0x1E0D362E0];
    v72 = v7;
    v76 = v9;
LABEL_3:
    v14 = 0;
    while (1)
    {
      if (*(_QWORD *)v90 != v13)
        objc_enumerationMutation(v9);
      v15 = *(_QWORD *)(*((_QWORD *)&v89 + 1) + 8 * v14);
      v88 = 0;
      v86 = 0;
      v87 = 0;
      v85 = 0;
      v16 = (*((uint64_t (**)(id, uint64_t, id *, id *, char *, __int16 *, id *, _QWORD, _QWORD))v7 + 2))(v7, v15, &v87, &v86, (char *)&v88 + 1, &v88, &v85, 0, 0);
      v17 = v87;
      v18 = (__CFString *)v86;
      v19 = v85;
      v20 = v19;
      if (!v16)
        goto LABEL_38;
      v21 = CFSTR("%lu Stickers");
      if (!HIBYTE(v88))
      {
        objc_msgSend(v19, "objectForKey:", v75);
        v22 = (void *)objc_claimAutoreleasedReturnValue();
        if ((objc_msgSend(v22, "BOOLValue") & 1) != 0)
        {

          v21 = CFSTR("%lu Animated Emoji");
        }
        else
        {
          v77 = v12;
          v79 = v17;
          v23 = v17;
          objc_msgSend(v23, "pathExtension");
          v24 = (void *)objc_claimAutoreleasedReturnValue();
          v25 = objc_msgSend(v24, "isEqualToString:", CFSTR("png"));
          v71 = v23;
          if ((v25 & 1) == 0)
          {
            objc_msgSend(v23, "pathExtension");
            v26 = (void *)objc_claimAutoreleasedReturnValue();
            if (!objc_msgSend(v26, "isEqualToString:", CFSTR("gif")))
            {

              v7 = v72;
              v12 = v77;
              v17 = v79;
              v9 = v76;
LABEL_18:
              IsImage = IMUTTypeIsImage(v18);
              v21 = CFSTR("%lu Images");
              if (!IsImage)
              {
                IsMovie = IMUTTypeIsMovie(v18);
                v21 = CFSTR("%lu Movies");
                if (!IsMovie)
                {
                  IsPass = IMUTTypeIsPass(v18);
                  v21 = CFSTR("%lu Passes");
                  if (!IsPass)
                  {
                    if (IMUTTypeIsWatchface(v18, v31))
                    {
                      v32 = objc_msgSend(v9, "count");
                      v21 = CFSTR("%lu Watch Faces");
                      if (v32 == 1)
                      {
                        v65 = (void *)MEMORY[0x1E0CB3940];
                        IMSharedUtilitiesFrameworkBundle();
                        v66 = (void *)objc_claimAutoreleasedReturnValue();
                        objc_msgSend(v66, "localizedStringForKey:value:table:", CFSTR("SHARED_WATCHFACE_NOTIFICATION"), &stru_1E3FBBA48, CFSTR("IMSharedUtilities"));
                        v67 = (void *)objc_claimAutoreleasedReturnValue();
                        v6 = v69;
                        goto LABEL_60;
                      }
                    }
                    else if (IMUTTypeIsWorkout((uint64_t)v18))
                    {
                      v34 = objc_msgSend(v9, "count");
                      v21 = CFSTR("%lu Workouts");
                      if (v34 == 1)
                      {
                        v6 = v69;
                        if (v69)
                        {
                          v65 = (void *)MEMORY[0x1E0CB3940];
                          IMSharedUtilitiesFrameworkBundle();
                          v66 = (void *)objc_claimAutoreleasedReturnValue();
                          objc_msgSend(v66, "localizedStringForKey:value:table:", CFSTR("SHARED_WORKOUT_NOTIFICATION"), &stru_1E3FBBA48, CFSTR("IMSharedUtilities"));
                          v67 = (void *)objc_claimAutoreleasedReturnValue();
LABEL_60:
                          v68 = v65;
                          v9 = v76;
                          objc_msgSend(v68, "stringWithFormat:", v67, v6);
                          v45 = (id)objc_claimAutoreleasedReturnValue();

                          v7 = v72;
                        }
                        else
                        {
                          IMSharedUtilitiesFrameworkBundle();
                          v66 = (void *)objc_claimAutoreleasedReturnValue();
                          objc_msgSend(v66, "localizedStringForKey:value:table:", CFSTR("SHARED_WORKOUT_NOTIFICATION_NO_NAME"), &stru_1E3FBBA48, CFSTR("IMSharedUtilities"));
                          v45 = (id)objc_claimAutoreleasedReturnValue();
                        }

                        goto LABEL_52;
                      }
                    }
                    else
                    {
                      IsMap = IMUTTypeIsMap(v18, v33);
                      v21 = CFSTR("%lu Locations");
                      if ((IsMap & 1) == 0)
                      {
                        IsAudio = IMUTTypeIsAudio(v18);
                        v21 = CFSTR("%lu Audio Files");
                        if (!IsAudio)
                        {
                          IsVCard = IMUTTypeIsVCard(v18);
                          v21 = CFSTR("%lu Contacts");
                          if (!IsVCard)
                          {
                            IsCalendar = IMUTTypeIsCalendar(v18);
                            v21 = CFSTR("%lu Files");
                            if (IsCalendar)
                              v21 = CFSTR("%lu Calendars");
                          }
                        }
                      }
                    }
                  }
                }
              }
              goto LABEL_32;
            }
            v70 = v26;
          }
          objc_msgSend(v23, "path");
          v27 = (void *)objc_claimAutoreleasedReturnValue();
          v74 = objc_msgSend(v27, "rangeOfString:", CFSTR(".emoji"));

          if ((v25 & 1) == 0)
          v21 = CFSTR("%lu Animated Emoji");
          v7 = v72;
          v9 = v76;
          v12 = v77;
          v17 = v79;
          if (v74 == 0x7FFFFFFFFFFFFFFFLL)
            goto LABEL_18;
        }
      }
LABEL_32:
      v39 = v21;
      if (v39)
      {
        v80 = v17;
        v40 = v13;
        v41 = v12;
        objc_msgSend(v78, "objectForKey:", v39);
        v42 = (void *)objc_claimAutoreleasedReturnValue();
        v43 = v42;
        if (v42)
        {
          objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", objc_msgSend(v42, "unsignedIntegerValue") + 1);
          v44 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v78, "setObject:forKey:", v44, v39);

          v9 = v76;
        }
        else
        {
          objc_msgSend(v78, "setObject:forKey:", &unk_1E3FFE588, v39);
          objc_msgSend(v73, "addObject:", v39);
        }

        v12 = v41;
        v13 = v40;
        v17 = v80;
      }
      ++v12;

LABEL_38:
      if (v11 == ++v14)
      {
        v11 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v89, v94, 16);
        if (v11)
          goto LABEL_3;

        if (v12 < 1)
        {
          v45 = 0;
          v6 = v69;
          goto LABEL_57;
        }
        v45 = objc_alloc_init(MEMORY[0x1E0CB37A0]);
        v46 = (void *)MEMORY[0x1E0CB3940];
        IMSharedUtilitiesFrameworkBundle();
        v47 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v47, "localizedStringForKey:value:table:", CFSTR("%lu Attachments: "), &stru_1E3FBBA48, CFSTR("IMSharedUtilities"));
        v48 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v46, "localizedStringWithFormat:", v48, v12);
        v49 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v45, "appendString:", v49);

        v83 = 0u;
        v84 = 0u;
        v81 = 0u;
        v82 = 0u;
        v50 = v73;
        v51 = objc_msgSend(v50, "countByEnumeratingWithState:objects:count:", &v81, v93, 16);
        if (v51)
        {
          v52 = v51;
          v53 = *(_QWORD *)v82;
          v54 = 1;
          do
          {
            v55 = 0;
            v56 = v78;
            do
            {
              if (*(_QWORD *)v82 != v53)
              {
                v57 = v56;
                objc_enumerationMutation(v50);
                v56 = v57;
              }
              v58 = *(_QWORD *)(*((_QWORD *)&v81 + 1) + 8 * v55);
              objc_msgSend(v56, "objectForKey:", v58);
              v59 = (void *)objc_claimAutoreleasedReturnValue();
              if ((v54 & 1) == 0)
                objc_msgSend(v45, "appendString:", CFSTR(", "));
              v60 = (void *)MEMORY[0x1E0CB3940];
              IMSharedUtilitiesFrameworkBundle();
              v61 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v61, "localizedStringForKey:value:table:", v58, &stru_1E3FBBA48, CFSTR("IMSharedUtilities"));
              v62 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v60, "localizedStringWithFormat:", v62, objc_msgSend(v59, "unsignedIntegerValue"));
              v63 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v45, "appendFormat:", v63);

              v54 = 0;
              ++v55;
              v56 = v78;
            }
            while (v52 != v55);
            v52 = objc_msgSend(v50, "countByEnumeratingWithState:objects:count:", &v81, v93, 16);
            v54 = 0;
          }
          while (v52);
          v6 = v69;
          v7 = v72;
        }
        else
        {
          v6 = v69;
        }
        v9 = v76;
        goto LABEL_56;
      }
    }
  }
  v45 = 0;
LABEL_52:
  v50 = v9;
LABEL_56:

LABEL_57:
  return v45;
}

void AttachmentsAutomationLogMilestone(void *a1, void *a2, void *a3)
{
  AttachmentsAutomationLogMilestoneWithOptionFlags(a1, a2, a3, 0);
}

void AttachmentsAutomationLogMilestoneWithOptionFlags(void *a1, void *a2, void *a3, char a4)
{
  void *v6;
  char v7;
  void *v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t i;
  uint64_t v13;
  void *v14;
  void *v15;
  void *v16;
  id v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  id v23;
  void *v24;
  id v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  const __CFString *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  id v38;
  id v39;
  id v40;
  id v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  _BYTE v46[128];
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  v38 = a1;
  v39 = a2;
  v40 = a3;
  objc_msgSend(MEMORY[0x1E0D36A50], "sharedInstance");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v6, "isInternalInstall"))
  {
    v7 = IMGetCachedDomainBoolForKey();

    if ((v7 & 1) != 0)
    {
      v8 = (void *)objc_msgSend(v40, "mutableCopy");
      v42 = 0u;
      v43 = 0u;
      v44 = 0u;
      v45 = 0u;
      v9 = v40;
      v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v42, v46, 16);
      if (v10)
      {
        v11 = *(_QWORD *)v43;
        do
        {
          for (i = 0; i != v10; ++i)
          {
            if (*(_QWORD *)v43 != v11)
              objc_enumerationMutation(v9);
            v13 = *(_QWORD *)(*((_QWORD *)&v42 + 1) + 8 * i);
            objc_msgSend(v9, "objectForKeyedSubscript:", v13);
            v14 = (void *)objc_claimAutoreleasedReturnValue();
            if ((objc_msgSend(MEMORY[0x1E0CB36D8], "isValidJSONObject:", v14) & 1) == 0)
            {
              objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@"), v14);
              v15 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v8, "setObject:forKeyedSubscript:", v15, v13);

            }
          }
          v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v42, v46, 16);
        }
        while (v10);
      }

      objc_msgSend(MEMORY[0x1E0CB3898], "processInfo");
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      v17 = v39;
      if (v17)
      {
        CFDictionarySetValue((CFMutableDictionaryRef)v8, (const void *)qword_1EE500EC0, v17);
      }
      else if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        sub_19E36D168();
      }

      objc_msgSend(v16, "processName");
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      if (v18)
        CFDictionarySetValue((CFMutableDictionaryRef)v8, (const void *)qword_1EE500EA8, v18);

      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", objc_msgSend(v16, "processIdentifier"));
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      if (v19)
        CFDictionarySetValue((CFMutableDictionaryRef)v8, (const void *)qword_1EE500EB0, v19);

      v20 = (void *)MEMORY[0x1E0CB37E8];
      objc_msgSend(MEMORY[0x1E0C99D68], "timeIntervalSinceReferenceDate");
      objc_msgSend(v20, "numberWithDouble:");
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      if (v21)
        CFDictionarySetValue((CFMutableDictionaryRef)v8, (const void *)qword_1EE500EB8, v21);

      v41 = 0;
      objc_msgSend(MEMORY[0x1E0CB36D8], "dataWithJSONObject:options:error:", v8, 1, &v41);
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      v23 = v41;
      if (v22)
      {
        v24 = (void *)MEMORY[0x1E0CB3940];
        v25 = v38;
        NSTemporaryDirectory();
        v26 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v24, "stringWithFormat:", CFSTR("%@/AttachmentsAutomation/%@.json"), v26, v25);
        v27 = (void *)objc_claimAutoreleasedReturnValue();

        objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
        v28 = (void *)objc_claimAutoreleasedReturnValue();
        LOBYTE(v25) = objc_msgSend(v28, "fileExistsAtPath:", v27);

        if ((v25 & 1) == 0)
        {
          objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
          v29 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v29, "createFileAtPath:contents:attributes:", v27, 0, 0);

        }
        objc_msgSend(MEMORY[0x1E0CB37A0], "string");
        v30 = (void *)objc_claimAutoreleasedReturnValue();
        v31 = v30;
        if ((a4 & 1) != 0)
          v32 = CFSTR("[");
        else
          v32 = CFSTR(",\n");
        objc_msgSend(v30, "appendString:", v32);
        v33 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithData:encoding:", v22, 4);
        objc_msgSend(v31, "appendString:", v33);

        if ((a4 & 2) != 0)
          objc_msgSend(v31, "appendString:", CFSTR("]"));
        objc_msgSend(MEMORY[0x1E0CB3608], "fileHandleForWritingAtPath:", v27);
        v34 = (void *)objc_claimAutoreleasedReturnValue();
        v35 = v34;
        if (v34)
        {
          objc_msgSend(v34, "seekToEndOfFile");
          objc_msgSend(v31, "dataUsingEncoding:", 4);
          v36 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v35, "writeData:", v36);

          objc_msgSend(v35, "closeFile");
        }

      }
    }
  }
  else
  {

  }
}

void sub_19E2BA5F8()
{
  IMHandleOffGridStateManager *v0;
  void *v1;

  v0 = objc_alloc_init(IMHandleOffGridStateManager);
  v1 = (void *)qword_1ECFC6F48;
  qword_1ECFC6F48 = (uint64_t)v0;

}

void sub_19E2BADF4(uint64_t a1, void *a2)
{
  id v3;
  id WeakRetained;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  id v11;
  void *v12;
  NSObject *v13;
  void *v14;
  uint64_t v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  NSObject *v21;
  void *v22;
  NSObject *v23;
  uint64_t v24;
  void *v25;
  NSObject *v26;
  void *v27;
  int v28;
  void *v29;
  __int16 v30;
  uint64_t v31;
  __int16 v32;
  void *v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 72));
  objc_msgSend(v3, "currentStatus");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "statusUniqueIdentifier");
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(WeakRetained, "pendingFetchesForCacheKeys");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_sync_enter(v7);
  v8 = objc_msgSend(WeakRetained, "currentCacheGeneration");
  objc_sync_exit(v7);

  if (*(_QWORD *)(a1 + 80) == v8 || *(_QWORD *)(a1 + 64))
  {
    objc_msgSend(WeakRetained, "pendingFetchesForCacheKeys");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_sync_enter(v9);
    objc_msgSend(WeakRetained, "pendingFetchesForCacheKeys");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "removeObject:", *(_QWORD *)(a1 + 32));

    objc_sync_exit(v9);
    if (v3)
    {
      v11 = v3;
    }
    else
    {
      objc_msgSend(MEMORY[0x1E0C99E38], "null");
      v11 = (id)objc_claimAutoreleasedReturnValue();
    }
    v12 = v11;
    if (IMOSLoggingEnabled())
    {
      OSLogHandleForIMFoundationCategory();
      v13 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
      {
        v15 = *(_QWORD *)(a1 + 32);
        v14 = *(void **)(a1 + 40);
        v28 = 138412802;
        v29 = v14;
        v30 = 2112;
        v31 = v15;
        v32 = 2112;
        v33 = v12;
        _os_log_impl(&dword_19E239000, v13, OS_LOG_TYPE_INFO, "Caching subscription for handle \"%@\" with key \"%@\" and value: %@", (uint8_t *)&v28, 0x20u);
      }

    }
    objc_msgSend(WeakRetained, "currentSubscriptionCache");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_sync_enter(v16);
    objc_msgSend(WeakRetained, "currentSubscriptionCache");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v17, "setObject:forKey:", v12, *(_QWORD *)(a1 + 32));

    objc_sync_exit(v16);
    objc_msgSend(WeakRetained, "lastKnownSubscriptionCache");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_sync_enter(v18);
    objc_msgSend(WeakRetained, "lastKnownSubscriptionCache");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v19, "setObject:forKey:", v12, *(_QWORD *)(a1 + 32));

    objc_sync_exit(v18);
    v20 = *(void **)(a1 + 48);
    if (v6 == v20 || v6 && v20 && (objc_msgSend(v6, "isEqualToString:") & 1) != 0)
    {
      if (IMOSLoggingEnabled())
      {
        OSLogHandleForIMFoundationCategory();
        v21 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
        {
          v22 = *(void **)(a1 + 32);
          v28 = 138412290;
          v29 = v22;
          _os_log_impl(&dword_19E239000, v21, OS_LOG_TYPE_INFO, "Fetched status is the same as the lask known status already returned. Not posting change notification for key: \"%@\"", (uint8_t *)&v28, 0xCu);
        }

      }
    }
    else
    {
      if (IMOSLoggingEnabled())
      {
        OSLogHandleForIMFoundationCategory();
        v23 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
        {
          v24 = *(_QWORD *)(a1 + 48);
          v25 = *(void **)(a1 + 32);
          v28 = 138412802;
          v29 = v6;
          v30 = 2112;
          v31 = v24;
          v32 = 2112;
          v33 = v25;
          _os_log_impl(&dword_19E239000, v23, OS_LOG_TYPE_INFO, "Fetched status %@ is different than the last known status %@. Posting change notification for key: \"%@\"", (uint8_t *)&v28, 0x20u);
        }

      }
      objc_msgSend(WeakRetained, "_postNotificationForUpdatedStatusWithSubscription:", v3);
    }
    if (*(_QWORD *)(a1 + 64))
    {
      objc_msgSend(*(id *)(a1 + 56), "_offGridModeFromStatusSubscription:handleID:", v3, *(_QWORD *)(a1 + 40));
      (*(void (**)(void))(*(_QWORD *)(a1 + 64) + 16))();
    }

  }
  else if (IMOSLoggingEnabled())
  {
    OSLogHandleForIMFoundationCategory();
    v26 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v26, OS_LOG_TYPE_INFO))
    {
      v27 = *(void **)(a1 + 80);
      v28 = 134218498;
      v29 = v27;
      v30 = 2048;
      v31 = v8;
      v32 = 2112;
      v33 = v6;
      _os_log_impl(&dword_19E239000, v26, OS_LOG_TYPE_INFO, "Fetched status is not current (startGeneration: %ld, endGeneration: %ld), discarding status %@.", (uint8_t *)&v28, 0x20u);
    }

  }
}

void sub_19E2BB460(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19E2BB708(uint64_t a1)
{
  void *v2;
  NSObject *v3;
  id v4;
  id v5;
  _QWORD v6[4];
  id v7;
  id v8;
  uint8_t buf[4];
  void *v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  objc_msgSend(*(id *)(a1 + 32), "personalStatusSubscription");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  if (IMOSLoggingEnabled())
  {
    OSLogHandleForIMFoundationCategory();
    v3 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138412290;
      v10 = v2;
      _os_log_impl(&dword_19E239000, v3, OS_LOG_TYPE_INFO, "Personal status subscription: %@", buf, 0xCu);
    }

  }
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v6[2] = sub_19E2BB854;
  v6[3] = &unk_1E3FB73D0;
  v4 = *(id *)(a1 + 40);
  v7 = v2;
  v8 = v4;
  v5 = v2;
  dispatch_async(MEMORY[0x1E0C80D38], v6);

}

uint64_t sub_19E2BB854(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32));
}

void sub_19E2BB864(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  NSObject *v7;
  int v8;
  NSObject *v9;
  void *v10;
  void *v11;
  int v12;
  void *v13;
  __int16 v14;
  id v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  if (!v6)
  {
    v8 = IMOSLoggingEnabled();
    if (v5)
    {
      if (!v8)
        goto LABEL_5;
      OSLogHandleForIMFoundationCategory();
      v9 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
      {
        objc_msgSend(*(id *)(a1 + 32), "handleString");
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        v12 = 138412546;
        v13 = v10;
        v14 = 2112;
        v15 = v5;
        _os_log_impl(&dword_19E239000, v9, OS_LOG_TYPE_INFO, "Found status subscription for handleID: \"%@\". Subscription: %@", (uint8_t *)&v12, 0x16u);

      }
    }
    else
    {
      if (!v8)
        goto LABEL_5;
      OSLogHandleForIMFoundationCategory();
      v9 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
      {
        objc_msgSend(*(id *)(a1 + 32), "handleString");
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        v12 = 138412290;
        v13 = v11;
        _os_log_impl(&dword_19E239000, v9, OS_LOG_TYPE_INFO, "Did not find status subscription for handleID: \"%@\"", (uint8_t *)&v12, 0xCu);

      }
    }

    goto LABEL_5;
  }
  IMLogHandleForCategory("IMHandleOffGridStateManager");
  v7 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    sub_19E36D200(a1, (uint64_t)v6, v7);

LABEL_5:
  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();

}

void sub_19E2BBA24(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x19E2BB8DCLL);
  }
  _Unwind_Resume(a1);
}

void sub_19E2BC48C(uint64_t a1)
{
  id v2;

  objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter");
  v2 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "__mainThreadPostNotificationName:object:", IMHandleOffGridStateChangedNotification, *(_QWORD *)(a1 + 32));

}

_DWORD *sub_19E2BD608(uint64_t a1, uint64_t a2)
{
  id WeakRetained;
  unint64_t v4;
  void *v5;
  unint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  _DWORD *v13;

  if (*(_DWORD *)(a2 + 16) != 3)
    return 0;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v4 = *(int *)(a1 + 40);
  objc_msgSend(WeakRetained, "trackedObjects");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v5, "count");

  if (v6 <= v4)
  {
    v13 = 0;
  }
  else
  {
    objc_msgSend(WeakRetained, "trackedObjects");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "pointerAtIndex:", *(int *)(a1 + 40));
    v8 = (void *)objc_claimAutoreleasedReturnValue();

    if (v8)
    {
      sub_19E28BB20(v8);
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      v10 = (void *)MEMORY[0x1E0CB3940];
      objc_msgSend(WeakRetained, "title");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v10, "stringWithFormat:", CFSTR("%@-%d"), v11, *(unsigned int *)(a1 + 40));
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      v13 = sub_19E28BC10(v12, v9);

    }
    else
    {
      v13 = 0;
    }

  }
  return v13;
}

void *IMSMSReportSpamExtensionAvailable()
{
  void *result;

  result = (void *)sub_19E24B3E8();
  if (result)
    return (void *)objc_msgSend(result, "isClassificationAvailable");
  return result;
}

uint64_t IMSSMSReportSpamShouldShowReportMessagesForItems(void *a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t i;
  void *v7;
  NSObject *v8;
  uint64_t v9;
  uint8_t v11[16];
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _BYTE v16[128];
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v2 = (void *)sub_19E24B3E8();
  if (!v2 || !objc_msgSend(v2, "isClassificationAvailable"))
    return 0;
  v14 = 0u;
  v15 = 0u;
  v12 = 0u;
  v13 = 0u;
  v3 = objc_msgSend(a1, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
  if (!v3)
    goto LABEL_19;
  v4 = *(_QWORD *)v13;
  v5 = 1;
  do
  {
    for (i = 0; i != v3; ++i)
    {
      if (*(_QWORD *)v13 != v4)
        objc_enumerationMutation(a1);
      v7 = (void *)objc_msgSend(*(id *)(*((_QWORD *)&v12 + 1) + 8 * i), "service");
      v5 &= objc_msgSend(v7, "isEqualToString:", IMServiceNameSMS[0]);
    }
    v3 = objc_msgSend(a1, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
  }
  while (v3);
  if (!v5)
    return 0;
LABEL_19:
  if (!IMOSLoggingEnabled())
    return 1;
  v8 = OSLogHandleForIMFoundationCategory();
  v9 = 1;
  if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)v11 = 0;
    _os_log_impl(&dword_19E239000, v8, OS_LOG_TYPE_INFO, "We have an extension installed and all the messages are on the SMS service, we can show Report Messages", v11, 2u);
  }
  return v9;
}

uint64_t sub_19E2BE1CC()
{
  void *v0;
  void *v1;
  uint64_t result;

  v0 = (void *)objc_msgSend((id)objc_msgSend(MEMORY[0x1E0D47230], "sharedConnection"), "installedMDMProfileIdentifier");
  v1 = (void *)objc_msgSend((id)objc_msgSend((id)objc_msgSend(MEMORY[0x1E0D47230], "sharedConnection"), "installedProfileWithIdentifier:", v0), "signerSummary");
  result = objc_msgSend(v0, "isEqualToString:", CFSTR("00000000-0000-0000-A000-4A414D460003"));
  if ((_DWORD)result)
  {
    result = objc_msgSend(v1, "isEqualToString:", CFSTR("manage.apple.com"));
    if ((_DWORD)result)
      byte_1EE503FD0 = 1;
  }
  return result;
}

uint64_t sub_19E2BE244()
{
  uint64_t v0;
  NSObject *v1;
  const __CFString *v2;
  int v4;
  const __CFString *v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  if (qword_1ECFC6F20 != -1)
    dispatch_once(&qword_1ECFC6F20, &unk_1E3FB37E8);
  v0 = byte_1EE503FD0;
  if (IMOSLoggingEnabled())
  {
    v1 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v1, OS_LOG_TYPE_INFO))
    {
      v2 = CFSTR("NO");
      if ((_DWORD)v0)
        v2 = CFSTR("YES");
      v4 = 138412290;
      v5 = v2;
      _os_log_impl(&dword_19E239000, v1, OS_LOG_TYPE_INFO, "iOS - Apple MDM profile is installed: %@", (uint8_t *)&v4, 0xCu);
    }
  }
  return v0;
}

uint64_t IMShouldHandleInternalPhishingAttempts()
{
  void *v0;
  NSObject *v1;
  const char *v2;
  uint8_t *v3;
  int v4;
  int v5;
  NSObject *v6;
  uint64_t v7;
  __int16 v9;
  uint8_t buf[16];
  __int16 v11;

  v0 = (void *)objc_msgSend((id)objc_msgSend(MEMORY[0x1E0D34E78], "sharedInstanceForBagType:", 1), "objectForKey:", CFSTR("disable-phishing-ui"));
  if (v0 && objc_msgSend(v0, "BOOLValue"))
  {
    if (!IMOSLoggingEnabled())
      return 0;
    v1 = OSLogHandleForIMFoundationCategory();
    if (!os_log_type_enabled(v1, OS_LOG_TYPE_INFO))
      return 0;
    v11 = 0;
    v2 = "Phishing UI disabled in IDSServerBag";
    v3 = (uint8_t *)&v11;
LABEL_13:
    _os_log_impl(&dword_19E239000, v1, OS_LOG_TYPE_INFO, v2, v3, 2u);
    return 0;
  }
  v4 = sub_19E2BE244();
  v5 = IMOSLoggingEnabled();
  if (!v4)
  {
    if (!v5)
      return 0;
    v1 = OSLogHandleForIMFoundationCategory();
    if (!os_log_type_enabled(v1, OS_LOG_TYPE_INFO))
      return 0;
    v9 = 0;
    v2 = "Should NOT Handle Phishing UI - iOS";
    v3 = (uint8_t *)&v9;
    goto LABEL_13;
  }
  if (!v5)
    return 1;
  v6 = OSLogHandleForIMFoundationCategory();
  v7 = 1;
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_19E239000, v6, OS_LOG_TYPE_INFO, "Should Handle Phishing UI - iOS", buf, 2u);
  }
  return v7;
}

IMSharedMessageSendingUtilities *sub_19E2BF12C()
{
  IMSharedMessageSendingUtilities *result;

  result = objc_alloc_init(IMSharedMessageSendingUtilities);
  qword_1ECFC7598 = (uint64_t)result;
  return result;
}

uint64_t sub_19E2BF57C()
{
  id v0;

  v0 = +[IMCTRCSUtilitiesManager sharedManager](IMCTRCSUtilitiesManager, "sharedManager");
  return MEMORY[0x1E0DE7D20](v0, sel_isRBMEnabledForContext_);
}

uint64_t sub_19E2BF5B4()
{
  id v0;

  v0 = +[IMCTRCSUtilitiesManager sharedManager](IMCTRCSUtilitiesManager, "sharedManager");
  return MEMORY[0x1E0DE7D20](v0, sel_isRBMSupportedForContext_);
}

_DWORD *sub_19E2BF940(uint64_t a1, uint64_t a2)
{
  id WeakRetained;
  void *v4;
  _DWORD *v5;

  if (*(_DWORD *)(a2 + 16) != 3)
    return 0;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  sub_19E28BB20(WeakRetained);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  v5 = sub_19E28BC10(*(void **)(a1 + 32), v4);
  return v5;
}

__CFString *IMTextEffectNameFromType(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 0xB)
    return 0;
  else
    return off_1E3FB7580[a1 - 1];
}

uint64_t IMTextEffectTypeFromName(void *a1)
{
  id v1;
  uint64_t v2;

  v1 = a1;
  if ((objc_msgSend(v1, "isEqualToString:", CFSTR("scaleRipple")) & 1) != 0)
  {
    v2 = 1;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("stretch")) & 1) != 0)
  {
    v2 = 2;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("squish")) & 1) != 0)
  {
    v2 = 3;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("bounce")) & 1) != 0)
  {
    v2 = 4;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("big")) & 1) != 0)
  {
    v2 = 5;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("bloom")) & 1) != 0)
  {
    v2 = 6;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("somersault")) & 1) != 0)
  {
    v2 = 7;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("shakeVertical")) & 1) != 0)
  {
    v2 = 8;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("shakeHorizontal")) & 1) != 0)
  {
    v2 = 9;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("jitter")) & 1) != 0)
  {
    v2 = 10;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("explode")) & 1) != 0)
  {
    v2 = 12;
  }
  else if (objc_msgSend(v1, "isEqualToString:", CFSTR("small")))
  {
    v2 = 11;
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

__CFString *IMTextStyleAttributeNameFromStyle(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 7)
    return 0;
  else
    return off_1E3FB75E0[a1 - 1];
}

uint64_t IMTextStyleFromAttributeName(void *a1)
{
  id v1;
  uint64_t v2;

  v1 = a1;
  if ((objc_msgSend(v1, "isEqualToString:", CFSTR("__kIMTextBoldAttributeName")) & 1) != 0)
  {
    v2 = 1;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("__kIMTextItalicAttributeName")) & 1) != 0)
  {
    v2 = 2;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("__kIMTextUnderlineAttributeName")) & 1) != 0)
  {
    v2 = 4;
  }
  else if (objc_msgSend(v1, "isEqualToString:", CFSTR("__kIMTextStrikethroughAttributeName")))
  {
    v2 = 8;
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

const __CFString *IMTextEffectLocalizationKeyFromType(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 0xB)
    return &stru_1E3FBBA48;
  else
    return off_1E3FB7620[a1 - 1];
}

const __CFString *IMTextEffectDiscoverabilityTitleLocalizationKeyFromType(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 0xB)
    return &stru_1E3FBBA48;
  else
    return off_1E3FB7680[a1 - 1];
}

id IMTextEffectOrderedSupportedNames()
{
  if (qword_1EE503A70 != -1)
    dispatch_once(&qword_1EE503A70, &unk_1E3FB3828);
  return (id)qword_1EE503A78;
}

void sub_19E2BFC9C()
{
  uint64_t v0;
  void *v1;
  _QWORD v2[9];

  v2[8] = *MEMORY[0x1E0C80C00];
  v2[0] = CFSTR("big");
  v2[1] = CFSTR("small");
  v2[2] = CFSTR("shakeHorizontal");
  v2[3] = CFSTR("shakeVertical");
  v2[4] = CFSTR("explode");
  v2[5] = CFSTR("bounce");
  v2[6] = CFSTR("bloom");
  v2[7] = CFSTR("jitter");
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v2, 8);
  v0 = objc_claimAutoreleasedReturnValue();
  v1 = (void *)qword_1EE503A78;
  qword_1EE503A78 = v0;

}

void sub_19E2BFD58(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "setCachedSharedWithYouEnabledValue:", 0);

}

uint64_t sub_19E2C23A0()
{
  CFPreferencesSynchronize(CFSTR("com.apple.MobileSMS"), (CFStringRef)*MEMORY[0x1E0C9B260], (CFStringRef)*MEMORY[0x1E0C9B250]);
  return objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter"), "postNotificationName:object:", CFSTR("com.apple.IMSharedUtilities.IMUserLoginIntentChanged"), 0);
}

void sub_19E2C23EC()
{
  __CFNotificationCenter *DarwinNotifyCenter;

  CFPreferencesSynchronize(CFSTR("com.apple.MobileSMS"), (CFStringRef)*MEMORY[0x1E0C9B260], (CFStringRef)*MEMORY[0x1E0C9B250]);
  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterAddObserver(DarwinNotifyCenter, 0, (CFNotificationCallback)sub_19E2C23A0, CFSTR("com.apple.IMSharedUtilities.IMUserLoginIntentChangedInternal"), 0, CFNotificationSuspensionBehaviorDeliverImmediately);
}

void IMSetUserLoginIntent(void *a1)
{
  const void *v2;
  const __CFString *v3;
  const __CFString *v4;
  __CFNotificationCenter *DarwinNotifyCenter;

  if (qword_1EE503CD0 != -1)
    dispatch_once(&qword_1EE503CD0, &unk_1E3FB3868);
  if (IMGetUserLoginIntent() != a1)
  {
    v2 = (const void *)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", a1);
    v3 = (const __CFString *)*MEMORY[0x1E0C9B260];
    v4 = (const __CFString *)*MEMORY[0x1E0C9B250];
    CFPreferencesSetValue(CFSTR("UserLoginIntent"), v2, CFSTR("com.apple.MobileSMS"), (CFStringRef)*MEMORY[0x1E0C9B260], (CFStringRef)*MEMORY[0x1E0C9B250]);
    CFPreferencesSynchronize(CFSTR("com.apple.MobileSMS"), v3, v4);
    DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
    CFNotificationCenterPostNotification(DarwinNotifyCenter, CFSTR("com.apple.IMSharedUtilities.IMUserLoginIntentChangedInternal"), 0, 0, 1u);
  }
}

void *IMSetUserIgnoreLogoutIntent(uint64_t a1)
{
  void *result;
  const void *v3;
  const __CFString *v4;
  const __CFString *v5;

  result = IMGetUserIgnoreLogoutIntent();
  if ((_DWORD)result != (_DWORD)a1)
  {
    v3 = (const void *)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", a1);
    v4 = (const __CFString *)*MEMORY[0x1E0C9B260];
    v5 = (const __CFString *)*MEMORY[0x1E0C9B250];
    CFPreferencesSetValue(CFSTR("UserIgnoreLogoutIntent"), v3, CFSTR("com.apple.MobileSMS"), (CFStringRef)*MEMORY[0x1E0C9B260], (CFStringRef)*MEMORY[0x1E0C9B250]);
    return (void *)CFPreferencesSynchronize(CFSTR("com.apple.MobileSMS"), v4, v5);
  }
  return result;
}

uint64_t sub_19E2C25B4()
{
  CFPreferencesSynchronize(CFSTR("com.apple.MobileSMS"), (CFStringRef)*MEMORY[0x1E0C9B260], (CFStringRef)*MEMORY[0x1E0C9B250]);
  return objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter"), "postNotificationName:object:", CFSTR("com.apple.IMSharedUtilities.IMUserRegistrationFailureIntentChanged"), 0);
}

void sub_19E2C2600()
{
  __CFNotificationCenter *DarwinNotifyCenter;

  CFPreferencesSynchronize(CFSTR("com.apple.MobileSMS"), (CFStringRef)*MEMORY[0x1E0C9B260], (CFStringRef)*MEMORY[0x1E0C9B250]);
  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterAddObserver(DarwinNotifyCenter, 0, (CFNotificationCallback)sub_19E2C25B4, CFSTR("com.apple.IMSharedUtilities.IMUserRegistrationFailureIntentChangedInternal"), 0, CFNotificationSuspensionBehaviorDeliverImmediately);
}

void *IMGetUserRegistrationFailureIntent()
{
  CFPropertyListRef v0;
  void *result;

  if (qword_1ECFC7260 != -1)
    dispatch_once(&qword_1ECFC7260, &unk_1E3FB3F48);
  v0 = CFPreferencesCopyValue(CFSTR("UserRegistrationFailureIntent"), CFSTR("com.apple.MobileSMS"), (CFStringRef)*MEMORY[0x1E0C9B260], (CFStringRef)*MEMORY[0x1E0C9B250]);
  result = (id)CFMakeCollectable(v0);
  if (result)
  {
    result = (void *)objc_msgSend(result, "integerValue");
    if ((unint64_t)result >= 3)
      return 0;
  }
  return result;
}

void IMSetUserRegistrationFailureIntent(void *a1)
{
  const void *v2;
  const __CFString *v3;
  const __CFString *v4;
  __CFNotificationCenter *DarwinNotifyCenter;

  if (qword_1ECFC7260 != -1)
    dispatch_once(&qword_1ECFC7260, &unk_1E3FB3F48);
  if (IMGetUserRegistrationFailureIntent() != a1)
  {
    v2 = (const void *)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", a1);
    v3 = (const __CFString *)*MEMORY[0x1E0C9B260];
    v4 = (const __CFString *)*MEMORY[0x1E0C9B250];
    CFPreferencesSetValue(CFSTR("UserRegistrationFailureIntent"), v2, CFSTR("com.apple.MobileSMS"), (CFStringRef)*MEMORY[0x1E0C9B260], (CFStringRef)*MEMORY[0x1E0C9B250]);
    CFPreferencesSynchronize(CFSTR("com.apple.MobileSMS"), v3, v4);
    DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
    CFNotificationCenterPostNotification(DarwinNotifyCenter, CFSTR("com.apple.IMSharedUtilities.IMUserRegistrationFailureIntentChangedInternal"), 0, 0, 1u);
  }
}

void *IMGetUserIgnoreFailureWaitingForCloudIntent()
{
  CFPropertyListRef v0;
  void *result;

  v0 = CFPreferencesCopyValue(CFSTR("UserIgnoreFailureWaitingIntent"), CFSTR("com.apple.MobileSMS"), (CFStringRef)*MEMORY[0x1E0C9B260], (CFStringRef)*MEMORY[0x1E0C9B250]);
  result = (id)CFMakeCollectable(v0);
  if (result)
    return (void *)(objc_msgSend(result, "integerValue") != 0);
  return result;
}

void IMSetUserIgnoreFailureWaitingForCloudIntent(uint64_t a1)
{
  const void *v2;
  const __CFString *v3;
  const __CFString *v4;
  __CFNotificationCenter *DarwinNotifyCenter;

  if (IMGetUserIgnoreFailureWaitingForCloudIntent() != (_DWORD)a1)
  {
    v2 = (const void *)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", a1);
    v3 = (const __CFString *)*MEMORY[0x1E0C9B260];
    v4 = (const __CFString *)*MEMORY[0x1E0C9B250];
    CFPreferencesSetValue(CFSTR("UserIgnoreFailureWaitingIntent"), v2, CFSTR("com.apple.MobileSMS"), (CFStringRef)*MEMORY[0x1E0C9B260], (CFStringRef)*MEMORY[0x1E0C9B250]);
    CFPreferencesSynchronize(CFSTR("com.apple.MobileSMS"), v3, v4);
  }
  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterPostNotification(DarwinNotifyCenter, CFSTR("com.apple.IMSharedUtilities.IMUserRegistrationFailureIntentChangedInternal"), 0, 0, 1u);
}

void *IMGetUserIgnoreFailureUpdateAppleIDIntent()
{
  CFPropertyListRef v0;
  void *result;

  v0 = CFPreferencesCopyValue(CFSTR("UserIgnoreFailureSyncingIntent"), CFSTR("com.apple.MobileSMS"), (CFStringRef)*MEMORY[0x1E0C9B260], (CFStringRef)*MEMORY[0x1E0C9B250]);
  result = (id)CFMakeCollectable(v0);
  if (result)
    return (void *)(objc_msgSend(result, "integerValue") != 0);
  return result;
}

void IMSetUserIgnoreFailureUpdateAppleIDIntent(uint64_t a1)
{
  const void *v2;
  const __CFString *v3;
  const __CFString *v4;
  __CFNotificationCenter *DarwinNotifyCenter;

  if (IMGetUserIgnoreFailureUpdateAppleIDIntent() != (_DWORD)a1)
  {
    v2 = (const void *)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", a1);
    v3 = (const __CFString *)*MEMORY[0x1E0C9B260];
    v4 = (const __CFString *)*MEMORY[0x1E0C9B250];
    CFPreferencesSetValue(CFSTR("UserIgnoreFailureSyncingIntent"), v2, CFSTR("com.apple.MobileSMS"), (CFStringRef)*MEMORY[0x1E0C9B260], (CFStringRef)*MEMORY[0x1E0C9B250]);
    CFPreferencesSynchronize(CFSTR("com.apple.MobileSMS"), v3, v4);
    DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
    CFNotificationCenterPostNotification(DarwinNotifyCenter, CFSTR("com.apple.IMSharedUtilities.IMUserRegistrationFailureIntentChangedInternal"), 0, 0, 1u);
  }
}

void sub_19E2C31A0()
{
  void *v0;

  v0 = (void *)qword_1EE503FD8;
  qword_1EE503FD8 = (uint64_t)&unk_1E3FFEF78;

}

void sub_19E2C31F8()
{
  void *v0;

  v0 = (void *)qword_1EE503FE8;
  qword_1EE503FE8 = (uint64_t)&unk_1E3FFEF90;

}

void sub_19E2C3384(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  int v4;
  void *v5;
  __int16 v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  if (IMOSLoggingEnabled())
  {
    OSLogHandleForIMFoundationCategory();
    v2 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      v3 = *(_QWORD *)(a1 + 32);
      v4 = 138412546;
      v5 = &unk_1E3FFE5A0;
      v6 = 2112;
      v7 = v3;
      _os_log_impl(&dword_19E239000, v2, OS_LOG_TYPE_INFO, "apply-imessage-junk-filter: Client (%@) Server (%@)", (uint8_t *)&v4, 0x16u);
    }

  }
}

void sub_19E2C3484(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  int v4;
  void *v5;
  __int16 v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  if (IMOSLoggingEnabled())
  {
    OSLogHandleForIMFoundationCategory();
    v2 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      v3 = *(_QWORD *)(a1 + 32);
      v4 = 138412546;
      v5 = &unk_1E3FFE5A0;
      v6 = 2112;
      v7 = v3;
      _os_log_impl(&dword_19E239000, v2, OS_LOG_TYPE_INFO, "apply-imessage-junk-filter: Client (%@) Server (%@)", (uint8_t *)&v4, 0x16u);
    }

  }
}

void sub_19E2C35C4()
{
  IMOffGridModeInvitationManager *v0;
  void *v1;

  v0 = objc_alloc_init(IMOffGridModeInvitationManager);
  v1 = (void *)qword_1ECFC6F50;
  qword_1ECFC6F50 = (uint64_t)v0;

}

void sub_19E2C39E4(uint64_t a1, int a2, void *a3)
{
  id v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  NSObject *v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v5 = a3;
  if (v5)
  {
    IMLogHandleForCategory("IMOffGridModeInvitationManager");
    v6 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      sub_19E36D570((uint64_t)v5, v6, v7, v8, v9, v10, v11, v12);

    v13 = *(_QWORD *)(a1 + 56);
    if (v13)
      (*(void (**)(uint64_t, _QWORD, _QWORD, _QWORD, id))(v13 + 16))(v13, 0, 0, 0, v5);
  }
  else
  {
    v14 = IMOSLoggingEnabled();
    if (a2)
    {
      if (v14)
      {
        OSLogHandleForIMFoundationCategory();
        v15 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
        {
          v16 = *(_QWORD *)(a1 + 32);
          v20 = 138412290;
          v21 = v16;
          _os_log_impl(&dword_19E239000, v15, OS_LOG_TYPE_INFO, "Handle is already invited: %@", (uint8_t *)&v20, 0xCu);
        }

      }
      v17 = *(_QWORD *)(a1 + 56);
      if (v17)
        (*(void (**)(uint64_t, _QWORD, uint64_t, _QWORD, _QWORD))(v17 + 16))(v17, 0, 1, 0, 0);
    }
    else
    {
      if (v14)
      {
        OSLogHandleForIMFoundationCategory();
        v18 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
        {
          v19 = *(_QWORD *)(a1 + 32);
          v20 = 138412290;
          v21 = v19;
          _os_log_impl(&dword_19E239000, v18, OS_LOG_TYPE_INFO, "Handle is not already invited. Initiating invitation flow for handle: %@", (uint8_t *)&v20, 0xCu);
        }

      }
      objc_msgSend(*(id *)(a1 + 40), "_inviteHandleID:fromSenderHandle:completion:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56));
    }
  }

}

void sub_19E2C405C(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x19E2C3F68);
  }
  _Unwind_Resume(a1);
}

void sub_19E2C4090(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  NSObject *v16;
  NSObject *v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  uint64_t v23;
  _QWORD v24[4];
  id v25;
  uint8_t buf[4];
  uint64_t v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  if (v6)
  {
    IMLogHandleForCategory("IMOffGridModeInvitationManager");
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      sub_19E36D570((uint64_t)v6, v7, v8, v9, v10, v11, v12, v13);

    v14 = *(_QWORD *)(a1 + 56);
    objc_msgSend(MEMORY[0x1E0C99E20], "set");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    (*(void (**)(uint64_t, void *))(v14 + 16))(v14, v15);
  }
  else
  {
    if (IMOSLoggingEnabled())
    {
      OSLogHandleForIMFoundationCategory();
      v16 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 134217984;
        v27 = objc_msgSend(v5, "count");
        _os_log_impl(&dword_19E239000, v16, OS_LOG_TYPE_INFO, "Removing already invited handles, total of %lu invited handles", buf, 0xCu);
      }

    }
    objc_msgSend(*(id *)(a1 + 32), "minusSet:", v5);
    if (IMOSLoggingEnabled())
    {
      OSLogHandleForIMFoundationCategory();
      v17 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
      {
        v18 = objc_msgSend(*(id *)(a1 + 32), "count");
        *(_DWORD *)buf = 134217984;
        v27 = v18;
        _os_log_impl(&dword_19E239000, v17, OS_LOG_TYPE_INFO, "Final set of URIs to invite has %lu handles", buf, 0xCu);
      }

    }
    if (objc_msgSend(*(id *)(a1 + 32), "count"))
    {
      objc_msgSend(*(id *)(a1 + 40), "offGridStateManager");
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      v20 = *(_QWORD *)(a1 + 32);
      v24[0] = MEMORY[0x1E0C809B0];
      v24[1] = 3221225472;
      v24[2] = sub_19E2C43A8;
      v24[3] = &unk_1E3FB7808;
      v21 = *(_QWORD *)(a1 + 48);
      v25 = *(id *)(a1 + 56);
      objc_msgSend(v19, "inviteHandles:fromSenderHandle:withDictionaryPayload:completion:", v20, v21, MEMORY[0x1E0C9AA70], v24);

      v15 = v25;
    }
    else
    {
      if (IMOSLoggingEnabled())
      {
        OSLogHandleForIMFoundationCategory();
        v22 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_19E239000, v22, OS_LOG_TYPE_INFO, "No URIs to invite", buf, 2u);
        }

      }
      v23 = *(_QWORD *)(a1 + 56);
      objc_msgSend(MEMORY[0x1E0C99E20], "set");
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      (*(void (**)(uint64_t, void *))(v23 + 16))(v23, v15);
    }
  }

}

void sub_19E2C43A8(uint64_t a1, void *a2, void *a3, void *a4, void *a5)
{
  id v9;
  id v10;
  id v11;
  id v12;
  NSObject *v13;
  NSObject *v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v9 = a2;
  v10 = a3;
  v11 = a4;
  v12 = a5;
  if (v12 && IMOSLoggingEnabled())
  {
    OSLogHandleForIMFoundationCategory();
    v13 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
    {
      v16 = 138412290;
      v17 = (uint64_t)v12;
      _os_log_impl(&dword_19E239000, v13, OS_LOG_TYPE_INFO, "Error inviting handles %@", (uint8_t *)&v16, 0xCu);
    }

  }
  if (IMOSLoggingEnabled())
  {
    OSLogHandleForIMFoundationCategory();
    v14 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
    {
      v15 = objc_msgSend(v9, "count");
      v16 = 134217984;
      v17 = v15;
      _os_log_impl(&dword_19E239000, v14, OS_LOG_TYPE_INFO, "Invited %lu handles", (uint8_t *)&v16, 0xCu);
    }

  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();

}

void sub_19E2C461C(uint64_t a1, char a2, void *a3)
{
  id v5;
  char v6;
  int v7;
  NSObject *v8;
  NSObject *v9;
  NSObject *v10;
  void *v11;
  uint8_t v12[16];
  uint8_t buf[16];
  uint8_t v14[16];

  v5 = a3;
  if (v5)
  {
    (*(void (**)(void))(*(_QWORD *)(a1 + 56) + 16))();
    goto LABEL_19;
  }
  if ((a2 & 1) != 0)
  {
LABEL_4:
    objc_msgSend(*(id *)(a1 + 32), "_inviteHandleID:fromSenderHandle:completion:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56));
    goto LABEL_19;
  }
  v6 = objc_msgSend(*(id *)(a1 + 32), "_isHandleIDEligibleToReceiveAutomaticInvitation:", *(_QWORD *)(a1 + 40));
  v7 = IMOSLoggingEnabled();
  if ((v6 & 1) != 0)
  {
    if (v7)
    {
      OSLogHandleForIMFoundationCategory();
      v8 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_19E239000, v8, OS_LOG_TYPE_INFO, "Handle is eligible to receive an automatic invitation, will repair failed validation token.", buf, 2u);
      }

    }
    goto LABEL_4;
  }
  if (v7)
  {
    OSLogHandleForIMFoundationCategory();
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)v14 = 0;
      _os_log_impl(&dword_19E239000, v9, OS_LOG_TYPE_INFO, "Handle is neither invited nor eligible to receive an automatic invitation, will not repair the failed validation token.", v14, 2u);
    }

  }
  if (IMOSLoggingEnabled())
  {
    OSLogHandleForIMFoundationCategory();
    v10 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)v12 = 0;
      _os_log_impl(&dword_19E239000, v10, OS_LOG_TYPE_INFO, "Not repairing invalid validation token.", v12, 2u);
    }

  }
  objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", CFSTR("IMOffGridModeInvitationManagerErrorDomain"), 2, 0);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  (*(void (**)(void))(*(_QWORD *)(a1 + 56) + 16))();

LABEL_19:
}

void sub_19E2C494C(uint64_t a1, void *a2, void *a3, void *a4, void *a5)
{
  id v9;
  id v10;
  id v11;
  id v12;
  NSObject *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(void);
  NSObject *v22;
  uint64_t v23;
  uint8_t v24[16];

  v9 = a2;
  v10 = a3;
  v11 = a4;
  v12 = a5;
  if (v12)
  {
    IMLogHandleForCategory("IMOffGridModeInvitationManager");
    v13 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      sub_19E36D5D4((uint64_t)v12, v13, v14, v15, v16, v17, v18, v19);

    v20 = *(_QWORD *)(a1 + 32);
    if (v20)
    {
      v21 = *(void (**)(void))(v20 + 16);
LABEL_12:
      v21();
    }
  }
  else
  {
    if (IMOSLoggingEnabled())
    {
      OSLogHandleForIMFoundationCategory();
      v22 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)v24 = 0;
        _os_log_impl(&dword_19E239000, v22, OS_LOG_TYPE_INFO, "Completed inviting handles", v24, 2u);
      }

    }
    v23 = *(_QWORD *)(a1 + 32);
    if (v23)
    {
      v21 = *(void (**)(void))(v23 + 16);
      goto LABEL_12;
    }
  }

}

uint64_t sub_19E2C4C30(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t (*v4)(void);

  if (a3)
  {
    v4 = *(uint64_t (**)(void))(*(_QWORD *)(a1 + 48) + 16);
  }
  else
  {
    objc_msgSend(*(id *)(a1 + 32), "_isHandleAlreadyInvited:idsInvitedHandles:", *(_QWORD *)(a1 + 40), a2);
    v4 = *(uint64_t (**)(void))(*(_QWORD *)(a1 + 48) + 16);
  }
  return v4();
}

void sub_19E2C5128(uint64_t a1, uint64_t a2, void *a3)
{
  void *v4;
  id v5;

  if (a3)
  {
    objc_msgSend(a3, "userInfo");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "objectForKeyedSubscript:", *MEMORY[0x1E0CB2938]);
    v5 = (id)objc_claimAutoreleasedReturnValue();

    (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  }
  else
  {
    (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  }
}

id sub_19E2C5220(void *a1)
{
  void *v2;
  void *v3;
  double v4;
  double v5;
  NSObject *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  int v11;
  void *v12;
  __int16 v13;
  void *v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  objc_msgSend(a1, "date");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(a1, "useCourierTime"))
  {
    if (qword_1ECFC6C78 != -1)
      dispatch_once(&qword_1ECFC6C78, &unk_1E3FB38C8);
    if (qword_1ECFC6C70)
    {
      objc_msgSend((id)qword_1ECFC6C70, "sharedInstance");
      v3 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v3, "currentServerTimeInterval");
      v5 = v4;

      if (v5 >= 1009864800.0)
      {
        objc_msgSend(a1, "dateWithTimeIntervalSince1970:", v5);
        v9 = objc_claimAutoreleasedReturnValue();

        v2 = (void *)v9;
      }
      else if (IMOSLoggingEnabled())
      {
        OSLogHandleForIMFoundationCategory();
        v6 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
        {
          objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", v5);
          v7 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", 1009864800.0);
          v8 = (void *)objc_claimAutoreleasedReturnValue();
          v11 = 138412546;
          v12 = v7;
          v13 = 2112;
          v14 = v8;
          _os_log_impl(&dword_19E239000, v6, OS_LOG_TYPE_INFO, "The server time we got back is around epoch time: %@ checked with padding: %@", (uint8_t *)&v11, 0x16u);

        }
      }
    }
  }
  return v2;
}

uint64_t sub_19E2C53D4()
{
  uint64_t result;

  result = MEMORY[0x1A1AE7D4C](CFSTR("IDSCurrentServerTime"), CFSTR("IDSFoundation"));
  qword_1ECFC6C70 = result;
  return result;
}

uint64_t sub_19E2C5400()
{
  return 1;
}

uint64_t sub_19E2C5408(void *a1)
{
  double v1;

  objc_msgSend(a1, "timeIntervalSinceReferenceDate");
  return (uint64_t)(v1 * 1000000000.0);
}

uint64_t sub_19E2C542C(void *a1)
{
  double v1;

  objc_msgSend(a1, "timeIntervalSince1970");
  return (uint64_t)(v1 * 1000000000.0);
}

BOOL sub_19E2C5450(void *a1, uint64_t a2, void *a3)
{
  id v4;
  double v5;
  double v6;
  double v7;
  double v8;

  if (!a3)
    return 0;
  v4 = a3;
  objc_msgSend(a1, "timeIntervalSinceReferenceDate");
  v6 = v5;
  objc_msgSend(v4, "timeIntervalSinceReferenceDate");
  v8 = v7;

  return vabdd_f64(v6, v8) < 0.00001;
}

BOOL sub_19E2C54B8(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BOOL8 v10;

  objc_msgSend(MEMORY[0x1E0C99D48], "currentCalendar");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0C99D68], "date");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "components:fromDate:", 30, v3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v2, "components:fromDate:", 30, a1);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v4, "day");
  if (v6 == objc_msgSend(v5, "day")
    && (v7 = objc_msgSend(v4, "month"), v7 == objc_msgSend(v5, "month"))
    && (v8 = objc_msgSend(v4, "year"), v8 == objc_msgSend(v5, "year")))
  {
    v9 = objc_msgSend(v4, "era");
    v10 = v9 == objc_msgSend(v5, "era");
  }
  else
  {
    v10 = 0;
  }

  return v10;
}

uint64_t sub_19E2C55C0(uint64_t a1, uint64_t a2, void *a3)
{
  void *v4;
  id v5;
  void *v6;
  void *v7;
  uint64_t v8;

  v4 = (void *)MEMORY[0x1E0C99D48];
  v5 = a3;
  objc_msgSend(v4, "currentCalendar");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "components:fromDate:toDate:options:", 16, v5, a1, 0);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  v8 = objc_msgSend(v7, "day");
  return v8;
}

uint64_t sub_19E2C563C(uint64_t a1, uint64_t a2, void *a3)
{
  void *v4;
  id v5;
  void *v6;
  void *v7;
  uint64_t v8;

  v4 = (void *)MEMORY[0x1E0C99D48];
  v5 = a3;
  objc_msgSend(v4, "currentCalendar");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "components:fromDate:toDate:options:", 32, v5, a1, 0);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  v8 = objc_msgSend(v7, "hour");
  return v8;
}

uint64_t sub_19E2C56B8(uint64_t a1, uint64_t a2, void *a3)
{
  void *v4;
  id v5;
  void *v6;
  void *v7;
  uint64_t v8;

  v4 = (void *)MEMORY[0x1E0C99D48];
  v5 = a3;
  objc_msgSend(v4, "currentCalendar");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "components:fromDate:toDate:options:", 32, v5, a1, 0);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  v8 = objc_msgSend(v7, "minute");
  return v8;
}

uint64_t sub_19E2C5734(uint64_t a1, uint64_t a2, void *a3)
{
  void *v4;
  id v5;
  void *v6;
  void *v7;
  uint64_t v8;

  v4 = (void *)MEMORY[0x1E0C99D48];
  v5 = a3;
  objc_msgSend(v4, "currentCalendar");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "components:fromDate:toDate:options:", 128, v5, a1, 0);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  v8 = objc_msgSend(v7, "second");
  return v8;
}

id sub_19E2C57B0(uint64_t a1, uint64_t a2, void *a3)
{
  id v3;
  void *v4;
  id v5;
  void *v6;

  v3 = a3;
  v4 = v3;
  if (v3)
  {
    v5 = v3;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0C99D68], "date");
    v5 = (id)objc_claimAutoreleasedReturnValue();
  }
  v6 = v5;

  return v6;
}

id sub_19E2C57F8(uint64_t a1, uint64_t a2, void *a3)
{
  id v3;
  void *v4;
  unint64_t v5;
  NSObject *v6;
  double v7;
  NSObject *v8;
  void *v9;
  NSObject *v10;
  void *v11;
  NSObject *v12;
  int v14;
  double v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v3 = a3;
  v4 = v3;
  if (v3)
  {
    v5 = objc_msgSend(v3, "unsignedLongLongValue");
    if (IMOSLoggingEnabled())
    {
      OSLogHandleForIMFoundationCategory();
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
      {
        v14 = 138412290;
        v15 = *(double *)&v4;
        _os_log_impl(&dword_19E239000, v6, OS_LOG_TYPE_INFO, "Converting timestamp: %@ to date", (uint8_t *)&v14, 0xCu);
      }

    }
    v7 = (double)v5 / 1000000000.0;
    if (IMOSLoggingEnabled())
    {
      OSLogHandleForIMFoundationCategory();
      v8 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        v14 = 134217984;
        v15 = v7;
        _os_log_impl(&dword_19E239000, v8, OS_LOG_TYPE_INFO, "  => seconds: %f", (uint8_t *)&v14, 0xCu);
      }

    }
    if (v7 <= 600000.0)
    {
      if (IMOSLoggingEnabled())
      {
        OSLogHandleForIMFoundationCategory();
        v12 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
        {
          LOWORD(v14) = 0;
          _os_log_impl(&dword_19E239000, v12, OS_LOG_TYPE_INFO, "  => Returning current date, failed sanity", (uint8_t *)&v14, 2u);
        }

      }
      objc_msgSend(MEMORY[0x1E0C99D68], "date");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      objc_msgSend(MEMORY[0x1E0C99D68], "dateWithTimeIntervalSince1970:", v7);
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      if (IMOSLoggingEnabled())
      {
        OSLogHandleForIMFoundationCategory();
        v10 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
        {
          v14 = 138412290;
          v15 = *(double *)&v9;
          _os_log_impl(&dword_19E239000, v10, OS_LOG_TYPE_INFO, "  => Returning date: %@", (uint8_t *)&v14, 0xCu);
        }

      }
    }
    objc_msgSend(MEMORY[0x1E0C99D68], "__im_clampDate:", v9);
    v11 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    objc_msgSend(MEMORY[0x1E0C99D68], "date");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
  }

  return v11;
}

uint64_t sub_19E2C5AB8(uint64_t a1, uint64_t a2, void *a3)
{
  void *v4;
  id v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;

  if (!a3)
    return 0;
  v4 = (void *)MEMORY[0x1E0C99D48];
  v5 = a3;
  objc_msgSend(v4, "currentCalendar");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "components:fromDate:", 2097918, a1);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "components:fromDate:", 2097918, v5);
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  v9 = objc_msgSend(v7, "isEqual:", v8);
  return v9;
}

id sub_19E2C5B60()
{
  if (qword_1EE504008 != -1)
    dispatch_once(&qword_1EE504008, &unk_1E3FB4748);
  return (id)qword_1EE504000;
}

void sub_19E2C5BA0()
{
  id v0;
  void *v1;
  id v2;

  v0 = objc_alloc_init(MEMORY[0x1E0CB36A8]);
  v1 = (void *)qword_1EE504000;
  qword_1EE504000 = (uint64_t)v0;

  objc_msgSend((id)qword_1EE504000, "setFormatOptions:", 1907);
  objc_msgSend(MEMORY[0x1E0C99E80], "timeZoneWithAbbreviation:", CFSTR("GMT"));
  v2 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend((id)qword_1EE504000, "setTimeZone:", v2);

}

id sub_19E2C5C14(uint64_t a1)
{
  void *v2;
  void *v3;

  objc_msgSend((id)objc_opt_class(), "__im_serialization_dateFormatter");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "stringFromDate:", a1);
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return v3;
}

id sub_19E2C5C58(void *a1, uint64_t a2, void *a3)
{
  id v4;
  void *v5;
  void *v6;

  if (a3)
  {
    v4 = a3;
    objc_msgSend(a1, "__im_serialization_dateFormatter");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "dateFromString:", v4);
    v6 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v6 = 0;
  }
  return v6;
}

id sub_19E2C5CBC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v5;
  void *v6;
  void *v7;

  v5 = objc_alloc_init(MEMORY[0x1E0C99D78]);
  objc_msgSend(v5, "setDay:", a3);
  objc_msgSend(MEMORY[0x1E0C99D48], "currentCalendar");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "dateByAddingComponents:toDate:options:", v5, a1, 0);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  return v7;
}

uint64_t sub_19E2C5DDC()
{
  uint64_t result;

  if ((_os_feature_enabled_impl() & 1) != 0)
    result = 1;
  else
    result = IMGetCachedDomainBoolForKeyWithDefaultValue();
  byte_1EE504010 = result;
  return result;
}

uint64_t sub_19E2C5E78()
{
  uint64_t result;

  if ((_os_feature_enabled_impl() & 1) != 0)
    result = 1;
  else
    result = IMGetCachedDomainBoolForKeyWithDefaultValue();
  byte_1EE504020 = result;
  return result;
}

uint64_t sub_19E2C5F14()
{
  uint64_t result;

  if ((_os_feature_enabled_impl() & 1) != 0)
    result = 1;
  else
    result = IMGetCachedDomainBoolForKeyWithDefaultValue();
  byte_1EE504030 = result;
  return result;
}

uint64_t sub_19E2C5FB0()
{
  char v0;
  uint64_t result;

  v0 = IMGetCachedDomainBoolForKeyWithDefaultValue();
  result = 0;
  if ((v0 & 1) == 0)
  {
    if ((_os_feature_enabled_impl() & 1) != 0)
      result = 1;
    else
      result = IMGetCachedDomainBoolForKeyWithDefaultValue();
  }
  byte_1EE503D58 = result;
  return result;
}

uint64_t sub_19E2C6070()
{
  uint64_t result;

  if ((_os_feature_enabled_impl() & 1) != 0)
    result = 1;
  else
    result = IMGetCachedDomainBoolForKeyWithDefaultValue();
  byte_1EE503870 = result;
  return result;
}

uint64_t sub_19E2C6110()
{
  uint64_t result;

  if ((_os_feature_enabled_impl() & 1) != 0)
    result = 1;
  else
    result = IMGetCachedDomainBoolForKeyWithDefaultValue();
  byte_1EE504040 = result;
  return result;
}

uint64_t sub_19E2C61C4()
{
  uint64_t result;

  if ((_os_feature_enabled_impl() & 1) != 0)
    result = 1;
  else
    result = IMGetCachedDomainBoolForKeyWithDefaultValue();
  byte_1EE504050 = result;
  return result;
}

uint64_t sub_19E2C6274()
{
  uint64_t result;

  if ((_os_feature_enabled_impl() & 1) != 0)
    result = 1;
  else
    result = IMGetCachedDomainBoolForKeyWithDefaultValue();
  byte_1EE5039F8 = result;
  return result;
}

uint64_t sub_19E2C6354()
{
  uint64_t result;

  if ((_os_feature_enabled_impl() & 1) != 0)
    result = 1;
  else
    result = IMGetCachedDomainBoolForKeyWithDefaultValue();
  byte_1EE503A90 = result;
  return result;
}

uint64_t sub_19E2C6420()
{
  uint64_t result;

  if ((_os_feature_enabled_impl() & 1) != 0)
    result = 1;
  else
    result = IMGetCachedDomainBoolForKeyWithDefaultValue();
  byte_1EE504058 = result;
  return result;
}

uint64_t sub_19E2C64BC()
{
  uint64_t result;

  if ((_os_feature_enabled_impl() & 1) != 0)
    result = 1;
  else
    result = IMGetCachedDomainBoolForKeyWithDefaultValue();
  byte_1EE503CF0 = result;
  return result;
}

uint64_t sub_19E2C6558()
{
  uint64_t result;

  if ((_os_feature_enabled_impl() & 1) != 0 || (_os_feature_enabled_impl() & 1) != 0)
    result = 1;
  else
    result = IMGetCachedDomainBoolForKeyWithDefaultValue();
  byte_1EE503D90 = result;
  return result;
}

uint64_t sub_19E2C660C()
{
  uint64_t result;

  if ((_os_feature_enabled_impl() & 1) != 0)
    result = 1;
  else
    result = IMGetCachedDomainBoolForKeyWithDefaultValue();
  byte_1EE503D60 = result;
  return result;
}

uint64_t sub_19E2C66A8()
{
  uint64_t result;

  if ((_os_feature_enabled_impl() & 1) != 0)
    result = 1;
  else
    result = IMGetCachedDomainBoolForKeyWithDefaultValue();
  byte_1EE503D00 = result;
  return result;
}

uint64_t sub_19E2C6744()
{
  uint64_t result;

  if ((_os_feature_enabled_impl() & 1) != 0)
    result = 1;
  else
    result = IMGetCachedDomainBoolForKeyWithDefaultValue();
  byte_1EE503D40 = result;
  return result;
}

uint64_t sub_19E2C67E0()
{
  uint64_t result;

  if ((_os_feature_enabled_impl() & 1) != 0)
    result = 1;
  else
    result = IMGetCachedDomainBoolForKeyWithDefaultValue();
  byte_1EE504068 = result;
  return result;
}

uint64_t sub_19E2C68B0()
{
  uint64_t result;

  if ((_os_feature_enabled_impl() & 1) != 0)
    result = 1;
  else
    result = IMGetCachedDomainBoolForKeyWithDefaultValue();
  byte_1EE503BB0 = result;
  return result;
}

uint64_t sub_19E2C6990()
{
  uint64_t result;

  if ((_os_feature_enabled_impl() & 1) != 0)
    result = 1;
  else
    result = IMGetCachedDomainBoolForKeyWithDefaultValue();
  byte_1EE504078 = result;
  return result;
}

uint64_t sub_19E2C6A2C()
{
  uint64_t result;

  if ((_os_feature_enabled_impl() & 1) != 0)
    result = 1;
  else
    result = IMGetCachedDomainBoolForKeyWithDefaultValue();
  byte_1EE504088 = result;
  return result;
}

uint64_t sub_19E2C6AC8()
{
  uint64_t result;

  if ((_os_feature_enabled_impl() & 1) != 0)
    result = 1;
  else
    result = IMGetCachedDomainBoolForKeyWithDefaultValue();
  byte_1EE503B88 = result;
  return result;
}

uint64_t sub_19E2C6B64()
{
  uint64_t result;

  if ((_os_feature_enabled_impl() & 1) != 0)
    result = 1;
  else
    result = IMGetCachedDomainBoolForKeyWithDefaultValue();
  byte_1EE504098 = result;
  return result;
}

uint64_t sub_19E2C6C00()
{
  uint64_t result;

  if ((_os_feature_enabled_impl() & 1) != 0)
    result = 1;
  else
    result = IMGetCachedDomainBoolForKeyWithDefaultValue();
  byte_1EE503AC0 = result;
  return result;
}

uint64_t sub_19E2C6C9C()
{
  uint64_t result;

  if ((_os_feature_enabled_impl() & 1) != 0)
    result = 1;
  else
    result = IMGetCachedDomainBoolForKeyWithDefaultValue();
  byte_1EE5040A0 = result;
  return result;
}

uint64_t sub_19E2C6D38()
{
  uint64_t result;

  if ((_os_feature_enabled_impl() & 1) != 0)
    result = 1;
  else
    result = IMGetCachedDomainBoolForKeyWithDefaultValue();
  byte_1EE503A50 = result;
  return result;
}

uint64_t sub_19E2C6DD4()
{
  uint64_t result;

  if ((_os_feature_enabled_impl() & 1) != 0)
    result = 1;
  else
    result = IMGetCachedDomainBoolForKeyWithDefaultValue();
  byte_1EE5040B0 = result;
  return result;
}

id IMSMWorkoutAlwaysPromptActionIdentifier()
{
  id *v0;
  void *v1;
  _Unwind_Exception *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2020000000;
  v0 = (id *)qword_1EE5040C0;
  v7 = qword_1EE5040C0;
  if (!qword_1EE5040C0)
  {
    v1 = (void *)sub_19E2C96F8();
    v0 = (id *)dlsym(v1, "SMWorkoutAlwaysPromptActionIdentifier");
    v5[3] = (uint64_t)v0;
    qword_1EE5040C0 = (uint64_t)v0;
  }
  _Block_object_dispose(&v4, 8);
  if (!v0)
  {
    v3 = (_Unwind_Exception *)sub_19E36B7D8();
    _Block_object_dispose(&v4, 8);
    _Unwind_Resume(v3);
  }
  return *v0;
}

uint64_t IMShouldDropIncomingCheckInMessage(void *a1, void *a2, uint64_t a3)
{
  id v5;
  id v6;
  void *v7;
  NSObject *v8;
  const __CFString *v9;
  uint64_t v10;
  NSObject *v11;
  _BYTE v13[22];
  __int16 v14;
  const __CFString *v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = a2;
  if (!v5)
  {
    if (IMOSLoggingEnabled())
    {
      OSLogHandleForIMFoundationCategory();
      v11 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)v13 = 0;
        _os_log_impl(&dword_19E239000, v11, OS_LOG_TYPE_INFO, "No URL for check-in message, skipping letting SafetyMonitorManager know", v13, 2u);
      }

    }
    goto LABEL_15;
  }
  objc_msgSend(sub_19E2C7098(), "defaultManager");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_opt_respondsToSelector() & 1) == 0)
  {

LABEL_15:
    v10 = 0;
    goto LABEL_16;
  }
  if (IMOSLoggingEnabled())
  {
    OSLogHandleForIMFoundationCategory();
    v8 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      v9 = CFSTR("NO");
      *(_DWORD *)v13 = 138412802;
      *(_QWORD *)&v13[4] = v5;
      *(_WORD *)&v13[12] = 2112;
      if ((_DWORD)a3)
        v9 = CFSTR("YES");
      *(_QWORD *)&v13[14] = v6;
      v14 = 2112;
      v15 = v9;
      _os_log_impl(&dword_19E239000, v8, OS_LOG_TYPE_INFO, "Asking SafetyMonitorManager if we should drop incoming message with URL: %@ from handle: %@, isFromMe %@", v13, 0x20u);
    }

  }
  v10 = objc_msgSend(v7, "shouldDropMessage:from:fromMe:", v5, v6, a3, *(_OWORD *)v13);

LABEL_16:
  return v10;
}

id sub_19E2C7098()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)qword_1ECFC6DD8;
  v7 = qword_1ECFC6DD8;
  if (!qword_1ECFC6DD8)
  {
    v3[0] = MEMORY[0x1E0C809B0];
    v3[1] = 3221225472;
    v3[2] = sub_19E2C97A8;
    v3[3] = &unk_1E3FB4F80;
    v3[4] = &v4;
    sub_19E2C97A8((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_19E2C7138(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void IMInformSafetyMonitorManagerOfOutgoingMessage(void *a1, void *a2, uint64_t a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  void *v10;
  NSObject *v11;
  const __CFString *v12;
  NSObject *v13;
  _BYTE v14[22];
  __int16 v15;
  const __CFString *v16;
  __int16 v17;
  id v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v7 = a1;
  v8 = a2;
  v9 = a4;
  if (v7)
  {
    objc_msgSend(sub_19E2C7098(), "defaultManager");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    if ((objc_opt_respondsToSelector() & 1) != 0)
    {
      if (IMOSLoggingEnabled())
      {
        OSLogHandleForIMFoundationCategory();
        v11 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
        {
          v12 = CFSTR("NO");
          *(_DWORD *)v14 = 138413058;
          *(_QWORD *)&v14[4] = v7;
          if ((_DWORD)a3)
            v12 = CFSTR("YES");
          *(_WORD *)&v14[12] = 2112;
          *(_QWORD *)&v14[14] = v8;
          v15 = 2112;
          v16 = v12;
          v17 = 2112;
          v18 = v9;
          _os_log_impl(&dword_19E239000, v11, OS_LOG_TYPE_INFO, "Informing SafetyMonitorManager of an outgoing message with URL: %@ guid: %@ was success: %@, error %@", v14, 0x2Au);
        }

      }
      objc_msgSend(v10, "iMessageSendFor:guid:successful:withError:", v7, v8, a3, v9, *(_OWORD *)v14);
    }

  }
  else if (IMOSLoggingEnabled())
  {
    OSLogHandleForIMFoundationCategory();
    v13 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)v14 = 0;
      _os_log_impl(&dword_19E239000, v13, OS_LOG_TYPE_INFO, "No URL for check-in message, skipping letting SafetyMonitorManager know", v14, 2u);
    }

  }
}

void IMInformSafetyMonitorManagerOfIncomingMessage(void *a1, void *a2, uint64_t a3)
{
  id v5;
  id v6;
  void *v7;
  NSObject *v8;
  const __CFString *v9;
  NSObject *v10;
  _BYTE v11[22];
  __int16 v12;
  const __CFString *v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = a2;
  if (v5)
  {
    objc_msgSend(sub_19E2C7098(), "defaultManager");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    if ((objc_opt_respondsToSelector() & 1) != 0)
    {
      if (IMOSLoggingEnabled())
      {
        OSLogHandleForIMFoundationCategory();
        v8 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
        {
          v9 = CFSTR("NO");
          *(_DWORD *)v11 = 138412802;
          *(_QWORD *)&v11[4] = v5;
          *(_WORD *)&v11[12] = 2112;
          if ((_DWORD)a3)
            v9 = CFSTR("YES");
          *(_QWORD *)&v11[14] = v6;
          v12 = 2112;
          v13 = v9;
          _os_log_impl(&dword_19E239000, v8, OS_LOG_TYPE_INFO, "Informing SafetyMonitorManager that of an incoming message with URL: %@ from handle: %@, isFromMe %@", v11, 0x20u);
        }

      }
      objc_msgSend(v7, "iMessageReceived:fromHandle:fromMe:", v5, v6, a3, *(_OWORD *)v11);
    }

  }
  else if (IMOSLoggingEnabled())
  {
    OSLogHandleForIMFoundationCategory();
    v10 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)v11 = 0;
      _os_log_impl(&dword_19E239000, v10, OS_LOG_TYPE_INFO, "No URL for check-in message, skipping letting SafetyMonitorManager know", v11, 2u);
    }

  }
}

void IMInformSafetyMonitorManagerOfDeletedMessages(void *a1)
{
  id v1;
  NSObject *v2;
  char v3;
  int v4;
  NSObject *v5;
  NSObject *v6;
  int v7;
  id v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (objc_msgSend(v1, "count"))
  {
    objc_msgSend(sub_19E2C7098(), "defaultManager");
    v2 = objc_claimAutoreleasedReturnValue();
    v3 = objc_opt_respondsToSelector();
    v4 = IMOSLoggingEnabled();
    if ((v3 & 1) != 0)
    {
      if (v4)
      {
        OSLogHandleForIMFoundationCategory();
        v5 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
        {
          v7 = 138412290;
          v8 = v1;
          _os_log_impl(&dword_19E239000, v5, OS_LOG_TYPE_INFO, "Informing SafetyMonitorManager of deleted messages URLs: %@ ", (uint8_t *)&v7, 0xCu);
        }

      }
      -[NSObject iMessageDeletedFor:](v2, "iMessageDeletedFor:", v1);
    }
    else if (v4)
    {
      OSLogHandleForIMFoundationCategory();
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
      {
        v7 = 138412290;
        v8 = v1;
        _os_log_impl(&dword_19E239000, v6, OS_LOG_TYPE_INFO, "NOT Informing SafetyMonitorManager of deleted messages URLs: %@ since SMManager does not respond to iMessageDeletedFor:", (uint8_t *)&v7, 0xCu);
      }

    }
LABEL_16:

    goto LABEL_17;
  }
  if (IMOSLoggingEnabled())
  {
    OSLogHandleForIMFoundationCategory();
    v2 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      LOWORD(v7) = 0;
      _os_log_impl(&dword_19E239000, v2, OS_LOG_TYPE_INFO, "No URLs passed in, skipping letting SafetyMonitorManager know of message deletions", (uint8_t *)&v7, 2u);
    }
    goto LABEL_16;
  }
LABEL_17:

}

void IMInformSafetyMonitorManagerOfDeletedConversation(void *a1)
{
  id v1;
  NSObject *v2;
  char v3;
  int v4;
  NSObject *v5;
  NSObject *v6;
  int v7;
  id v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (objc_msgSend(v1, "count"))
  {
    objc_msgSend(sub_19E2C7098(), "defaultManager");
    v2 = objc_claimAutoreleasedReturnValue();
    v3 = objc_opt_respondsToSelector();
    v4 = IMOSLoggingEnabled();
    if ((v3 & 1) != 0)
    {
      if (v4)
      {
        OSLogHandleForIMFoundationCategory();
        v5 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
        {
          v7 = 138412290;
          v8 = v1;
          _os_log_impl(&dword_19E239000, v5, OS_LOG_TYPE_INFO, "Informing SafetyMonitorManager of deleted conversation with: %@ ", (uint8_t *)&v7, 0xCu);
        }

      }
      -[NSObject iMessageConversationDeletedFor:](v2, "iMessageConversationDeletedFor:", v1);
    }
    else if (v4)
    {
      OSLogHandleForIMFoundationCategory();
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
      {
        v7 = 138412290;
        v8 = v1;
        _os_log_impl(&dword_19E239000, v6, OS_LOG_TYPE_INFO, "NOT Informing SafetyMonitorManager of deleted conversation with: %@ since SMManager does not respond to iMessageConversationDeletedFor:", (uint8_t *)&v7, 0xCu);
      }

    }
LABEL_16:

    goto LABEL_17;
  }
  if (IMOSLoggingEnabled())
  {
    OSLogHandleForIMFoundationCategory();
    v2 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      LOWORD(v7) = 0;
      _os_log_impl(&dword_19E239000, v2, OS_LOG_TYPE_INFO, "No receiver handles passed in, skipping letting SafetyMonitorManager know of conversation deletions", (uint8_t *)&v7, 2u);
    }
    goto LABEL_16;
  }
LABEL_17:

}

void IMInformSafetyMonitorManagerOfScheduledSendScheduledFor(void *a1, void *a2, uint64_t a3, void *a4)
{
  id v7;
  id v8;
  __CFString *v9;
  void *v10;
  NSObject *v11;
  const __CFString *v12;
  NSObject *v13;
  NSObject *v14;
  const __CFString *v15;
  _BYTE v16[22];
  __int16 v17;
  const __CFString *v18;
  __int16 v19;
  __CFString *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v7 = a1;
  v8 = a2;
  v9 = a4;
  if (objc_msgSend(v8, "length"))
  {
    objc_msgSend(sub_19E2C7098(), "defaultManager");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    if ((objc_opt_respondsToSelector() & 1) != 0)
    {
      if (IMOSLoggingEnabled())
      {
        OSLogHandleForIMFoundationCategory();
        v11 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
        {
          v12 = CFSTR("NO");
          *(_DWORD *)v16 = 138413058;
          *(_QWORD *)&v16[4] = v7;
          if ((_DWORD)a3)
            v12 = CFSTR("YES");
          *(_WORD *)&v16[12] = 2112;
          *(_QWORD *)&v16[14] = v8;
          v17 = 2112;
          v18 = v12;
          v19 = 2112;
          v20 = v9;
          _os_log_impl(&dword_19E239000, v11, OS_LOG_TYPE_INFO, "Informing SafetyMonitorManager that scheduled message send was scheduled with URL: %@ guid: %@ was success: %@, error %@", v16, 0x2Au);
        }

      }
      objc_msgSend(v10, "iMessageScheduledSendScheduledFor:guid:successful:withError:", v7, v8, a3, v9, *(_OWORD *)v16);
    }
    else if ((objc_opt_respondsToSelector() & 1) != 0)
    {
      if (IMOSLoggingEnabled())
      {
        OSLogHandleForIMFoundationCategory();
        v14 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
        {
          v15 = CFSTR("NO");
          *(_DWORD *)v16 = 138412802;
          *(_QWORD *)&v16[4] = v8;
          *(_WORD *)&v16[12] = 2112;
          if ((_DWORD)a3)
            v15 = CFSTR("YES");
          *(_QWORD *)&v16[14] = v15;
          v17 = 2112;
          v18 = v9;
          _os_log_impl(&dword_19E239000, v14, OS_LOG_TYPE_INFO, "Informing SafetyMonitorManager that scheduled message send was scheduled for messageGUID: %@ was success: %@, error %@", v16, 0x20u);
        }

      }
      objc_msgSend(v10, "iMessageScheduledSendScheduledFor:successful:withError:", v8, a3, v9, *(_QWORD *)v16, *(_QWORD *)&v16[8]);
    }

  }
  else if (IMOSLoggingEnabled())
  {
    OSLogHandleForIMFoundationCategory();
    v13 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)v16 = 0;
      _os_log_impl(&dword_19E239000, v13, OS_LOG_TYPE_INFO, "Invalid messageGUID passed in, skipping letting SafetyMonitorManager know", v16, 2u);
    }

  }
}

void IMInformSafetyMonitorManagerOfScheduledSendCancelledFor(void *a1, uint64_t a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  NSObject *v8;
  const __CFString *v9;
  NSObject *v10;
  _BYTE v11[22];
  __int16 v12;
  id v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = a3;
  if (objc_msgSend(v5, "length"))
  {
    objc_msgSend(sub_19E2C7098(), "defaultManager");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    if ((objc_opt_respondsToSelector() & 1) != 0)
    {
      if (IMOSLoggingEnabled())
      {
        OSLogHandleForIMFoundationCategory();
        v8 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
        {
          v9 = CFSTR("NO");
          *(_DWORD *)v11 = 138412802;
          *(_QWORD *)&v11[4] = v5;
          *(_WORD *)&v11[12] = 2112;
          if ((_DWORD)a2)
            v9 = CFSTR("YES");
          *(_QWORD *)&v11[14] = v9;
          v12 = 2112;
          v13 = v6;
          _os_log_impl(&dword_19E239000, v8, OS_LOG_TYPE_INFO, "Informing SafetyMonitorManager that scheduled message send for messageGUID: %@ was cancelled with success: %@, error %@", v11, 0x20u);
        }

      }
      objc_msgSend(v7, "iMessageScheduledSendCancelFor:successful:withError:", v5, a2, v6, *(_OWORD *)v11);
    }

  }
  else if (IMOSLoggingEnabled())
  {
    OSLogHandleForIMFoundationCategory();
    v10 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)v11 = 0;
      _os_log_impl(&dword_19E239000, v10, OS_LOG_TYPE_INFO, "Invalid messageGUID passed in, skipping letting SafetyMonitorManager know", v11, 2u);
    }

  }
}

void IMInformSafetyMonitorManagerOfScheduledSendTriggeredFor(void *a1)
{
  id v1;
  NSObject *v2;
  NSObject *v3;
  int v4;
  id v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (objc_msgSend(v1, "length"))
  {
    objc_msgSend(sub_19E2C7098(), "defaultManager");
    v2 = objc_claimAutoreleasedReturnValue();
    if ((objc_opt_respondsToSelector() & 1) != 0)
    {
      if (IMOSLoggingEnabled())
      {
        OSLogHandleForIMFoundationCategory();
        v3 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
        {
          v4 = 138412290;
          v5 = v1;
          _os_log_impl(&dword_19E239000, v3, OS_LOG_TYPE_INFO, "Informing SafetyMonitorManager that scheduled message send for messageGUID: %@ was triggered", (uint8_t *)&v4, 0xCu);
        }

      }
      -[NSObject iMessageScheduledSendTriggeredFor:](v2, "iMessageScheduledSendTriggeredFor:", v1);
    }
LABEL_12:

    goto LABEL_13;
  }
  if (IMOSLoggingEnabled())
  {
    OSLogHandleForIMFoundationCategory();
    v2 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      LOWORD(v4) = 0;
      _os_log_impl(&dword_19E239000, v2, OS_LOG_TYPE_INFO, "Invalid messageGUID passed in, skipping letting SafetyMonitorManager know", (uint8_t *)&v4, 2u);
    }
    goto LABEL_12;
  }
LABEL_13:

}

void IMFetchSafetyMonitorHandleSuggestions(void *a1)
{
  id v1;
  void *v2;
  NSObject *v3;
  NSObject *v4;
  _QWORD v5[4];
  id v6;
  uint64_t *v7;
  uint8_t buf[16];
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, uint64_t);
  void (*v13)(uint64_t);
  id v14;

  v1 = a1;
  objc_msgSend(sub_19E2C7098(), "defaultManager");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = 0;
  v10 = &v9;
  v11 = 0x3032000000;
  v12 = sub_19E24763C;
  v13 = sub_19E247504;
  v14 = 0;
  objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v14 = (id)objc_claimAutoreleasedReturnValue();
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    if (IMOSLoggingEnabled())
    {
      OSLogHandleForIMFoundationCategory();
      v3 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_19E239000, v3, OS_LOG_TYPE_INFO, "Fetching handles with which the user is most likely to initiate a session", buf, 2u);
      }

    }
    v5[0] = MEMORY[0x1E0C809B0];
    v5[1] = 3221225472;
    v5[2] = sub_19E2C80F8;
    v5[3] = &unk_1E3FB79A8;
    v7 = &v9;
    v6 = v1;
    objc_msgSend(v2, "fetchMostLikelyReceiverHandlesWithHandler:", v5);

  }
  else
  {
    if (IMOSLoggingEnabled())
    {
      OSLogHandleForIMFoundationCategory();
      v4 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_19E239000, v4, OS_LOG_TYPE_INFO, "Failed to fetch SafetyMonitor Handle suggestions", buf, 2u);
      }

    }
    (*((void (**)(id, uint64_t))v1 + 2))(v1, v10[5]);
  }
  _Block_object_dispose(&v9, 8);

}

void sub_19E2C80F8(uint64_t a1, void *a2, void *a3)
{
  id v5;
  int v6;
  NSObject *v7;
  void *v8;
  NSObject *v9;
  uint64_t v10;
  void *v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t i;
  void *v16;
  void *v17;
  BOOL v18;
  void *v19;
  void *v20;
  NSObject *v21;
  uint64_t v22;
  id v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint8_t v28[128];
  uint8_t buf[4];
  uint64_t v30;
  __int16 v31;
  void *v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v23 = a2;
  v5 = a3;
  v6 = IMOSLoggingEnabled();
  if (v5)
  {
    if (v6)
    {
      OSLogHandleForIMFoundationCategory();
      v7 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
      {
        objc_msgSend(v5, "localizedDescription");
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138412290;
        v30 = (uint64_t)v8;
        _os_log_impl(&dword_19E239000, v7, OS_LOG_TYPE_INFO, "Error fetching likelySessionHandles: %@", buf, 0xCu);

      }
    }
  }
  else
  {
    if (v6)
    {
      OSLogHandleForIMFoundationCategory();
      v9 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
      {
        v10 = objc_msgSend(v23, "count");
        objc_msgSend(0, "localizedDescription");
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 134218242;
        v30 = v10;
        v31 = 2112;
        v32 = v11;
        _os_log_impl(&dword_19E239000, v9, OS_LOG_TYPE_INFO, "%lu handles received.Error: %@", buf, 0x16u);

      }
    }
    v26 = 0u;
    v27 = 0u;
    v24 = 0u;
    v25 = 0u;
    v12 = v23;
    v13 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v24, v28, 16);
    if (v13)
    {
      v14 = *(_QWORD *)v25;
      do
      {
        for (i = 0; i != v13; ++i)
        {
          if (*(_QWORD *)v25 != v14)
            objc_enumerationMutation(v12);
          v16 = *(void **)(*((_QWORD *)&v24 + 1) + 8 * i);
          objc_msgSend(v16, "primaryHandle");
          v17 = (void *)objc_claimAutoreleasedReturnValue();
          v18 = objc_msgSend(v17, "length") == 0;

          if (!v18)
          {
            objc_msgSend(v16, "primaryHandle");
            v19 = (void *)objc_claimAutoreleasedReturnValue();
            +[IMContactStore validateAndCleanupID:](IMContactStore, "validateAndCleanupID:", v19);
            v20 = (void *)objc_claimAutoreleasedReturnValue();

            if (objc_msgSend(v20, "length"))
              objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), "addObject:", v20);

          }
        }
        v13 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v24, v28, 16);
      }
      while (v13);
    }

  }
  if (IMOSLoggingEnabled())
  {
    OSLogHandleForIMFoundationCategory();
    v21 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
    {
      v22 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40);
      *(_DWORD *)buf = 138412290;
      v30 = v22;
      _os_log_impl(&dword_19E239000, v21, OS_LOG_TYPE_INFO, "Returning likelySessionHandles: %@", buf, 0xCu);
    }

  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();

}

void sub_19E2C8418(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x19E2C834CLL);
  }
  _Unwind_Resume(a1);
}

void IMShouldShowKeyboardSuggestionsForCheckIn(void *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void (**v7)(id, _QWORD);
  NSObject *v8;
  void *v9;
  void *v10;
  void *v11;
  NSObject *v12;
  _QWORD v13[4];
  void (**v14)(id, _QWORD);
  uint8_t buf[4];
  id v16;
  __int16 v17;
  id v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = a2;
  v7 = a3;
  if (!objc_msgSend(v5, "length") || !objc_msgSend(v6, "length"))
  {
    if (IMOSLoggingEnabled())
    {
      OSLogHandleForIMFoundationCategory();
      v8 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412546;
        v16 = v5;
        v17 = 2112;
        v18 = v6;
        _os_log_impl(&dword_19E239000, v8, OS_LOG_TYPE_INFO, "Invalid handle ID passed in :%@, %@", buf, 0x16u);
      }

    }
    v7[2](v7, 0);
  }
  objc_msgSend(sub_19E2C7098(), "defaultManager");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    v10 = (void *)objc_msgSend(objc_alloc((Class)sub_19E2C86D4()), "initWithPrimaryHandle:secondaryHandles:", v5, MEMORY[0x1E0C9AA60]);
    v11 = (void *)objc_msgSend(objc_alloc((Class)sub_19E2C86D4()), "initWithPrimaryHandle:secondaryHandles:", v6, MEMORY[0x1E0C9AA60]);
    v13[0] = MEMORY[0x1E0C809B0];
    v13[1] = 3221225472;
    v13[2] = sub_19E2C878C;
    v13[3] = &unk_1E3FB6FD0;
    v14 = v7;
    objc_msgSend(v9, "shouldShowKeyboardSuggestionsForInitiator:receiver:handler:", v10, v11, v13);

  }
  else
  {
    if (IMOSLoggingEnabled())
    {
      OSLogHandleForIMFoundationCategory();
      v12 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_19E239000, v12, OS_LOG_TYPE_INFO, "Failed to fetch SafetyMonitor KB suggestion policy", buf, 2u);
      }

    }
    v7[2](v7, 0);
  }

}

id sub_19E2C86D4()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)qword_1ECFC6DD0;
  v7 = qword_1ECFC6DD0;
  if (!qword_1ECFC6DD0)
  {
    v3[0] = MEMORY[0x1E0C809B0];
    v3[1] = 3221225472;
    v3[2] = sub_19E2C97FC;
    v3[3] = &unk_1E3FB4F80;
    v3[4] = &v4;
    sub_19E2C97FC((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_19E2C8774(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19E2C878C(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;
  NSObject *v5;
  void *v6;
  int v7;
  void *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  if (v4)
  {
    if (IMOSLoggingEnabled())
    {
      OSLogHandleForIMFoundationCategory();
      v5 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
      {
        objc_msgSend(v4, "localizedDescription");
        v6 = (void *)objc_claimAutoreleasedReturnValue();
        v7 = 138412290;
        v8 = v6;
        _os_log_impl(&dword_19E239000, v5, OS_LOG_TYPE_INFO, "Error fetching shouldShowKeyboardSuggestionsForInitiator: %@", (uint8_t *)&v7, 0xCu);

      }
    }
    (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  }
  else
  {
    (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  }

}

void IMShouldShowTipKitSuggestionsForCheckIn(void *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void (**v7)(id, _QWORD);
  NSObject *v8;
  void *v9;
  void *v10;
  void *v11;
  NSObject *v12;
  _QWORD v13[4];
  void (**v14)(id, _QWORD);
  uint8_t buf[4];
  id v16;
  __int16 v17;
  id v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = a2;
  v7 = a3;
  if (!objc_msgSend(v5, "length") || !objc_msgSend(v6, "length"))
  {
    if (IMOSLoggingEnabled())
    {
      OSLogHandleForIMFoundationCategory();
      v8 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412546;
        v16 = v5;
        v17 = 2112;
        v18 = v6;
        _os_log_impl(&dword_19E239000, v8, OS_LOG_TYPE_INFO, "Invalid handle ID passed in :%@, %@", buf, 0x16u);
      }

    }
    v7[2](v7, 0);
  }
  objc_msgSend(sub_19E2C7098(), "defaultManager");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    v10 = (void *)objc_msgSend(objc_alloc((Class)sub_19E2C86D4()), "initWithPrimaryHandle:secondaryHandles:", v5, MEMORY[0x1E0C9AA60]);
    v11 = (void *)objc_msgSend(objc_alloc((Class)sub_19E2C86D4()), "initWithPrimaryHandle:secondaryHandles:", v6, MEMORY[0x1E0C9AA60]);
    v13[0] = MEMORY[0x1E0C809B0];
    v13[1] = 3221225472;
    v13[2] = sub_19E2C8B20;
    v13[3] = &unk_1E3FB6FD0;
    v14 = v7;
    objc_msgSend(v9, "shouldShowTipKitSuggestionsForInitiator:receiver:handler:", v10, v11, v13);

  }
  else
  {
    if (IMOSLoggingEnabled())
    {
      OSLogHandleForIMFoundationCategory();
      v12 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_19E239000, v12, OS_LOG_TYPE_INFO, "Failed to fetch SafetyMonitor TipKit suggestion policy", buf, 2u);
      }

    }
    v7[2](v7, 0);
  }

}

void sub_19E2C8B20(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;
  NSObject *v5;
  void *v6;
  int v7;
  void *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  if (v4)
  {
    if (IMOSLoggingEnabled())
    {
      OSLogHandleForIMFoundationCategory();
      v5 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
      {
        objc_msgSend(v4, "localizedDescription");
        v6 = (void *)objc_claimAutoreleasedReturnValue();
        v7 = 138412290;
        v8 = v6;
        _os_log_impl(&dword_19E239000, v5, OS_LOG_TYPE_INFO, "Error fetching shouldShowTipKitSuggestionsForInitiator: %@", (uint8_t *)&v7, 0xCu);

      }
    }
    (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  }
  else
  {
    (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  }

}

uint64_t IMPopulateNotificationUserInfoForCheckIn(void *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  NSObject *v11;
  NSObject *v12;
  int v14;
  id v15;
  __int16 v16;
  id v17;
  __int16 v18;
  id v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = a2;
  v7 = a3;
  v8 = objc_msgSend(v6, "length");
  if (v5 && v7 && v8)
  {
    objc_msgSend(sub_19E2C7098(), "defaultManager");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    if ((objc_opt_respondsToSelector() & 1) != 0)
    {
      v10 = objc_msgSend(v9, "prepareUserInfoForNotificationContent:initiatorHandle:messageUrl:", v5, v6, v7);
    }
    else
    {
      if (IMOSLoggingEnabled())
      {
        OSLogHandleForIMFoundationCategory();
        v12 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
        {
          LOWORD(v14) = 0;
          _os_log_impl(&dword_19E239000, v12, OS_LOG_TYPE_INFO, "SafetyMonitor does not respond to prepareUserInfoForNotificationContent. Defaulting to DefaultDeliveryRequest", (uint8_t *)&v14, 2u);
        }

      }
      v10 = 0;
    }

  }
  else
  {
    if (IMOSLoggingEnabled())
    {
      OSLogHandleForIMFoundationCategory();
      v11 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
      {
        v14 = 138412802;
        v15 = v5;
        v16 = 2112;
        v17 = v6;
        v18 = 2112;
        v19 = v7;
        _os_log_impl(&dword_19E239000, v11, OS_LOG_TYPE_INFO, "Invalid parameter passed in :%@, %@, %@", (uint8_t *)&v14, 0x20u);
      }

    }
    v10 = 0;
  }

  return v10;
}

void IMRespondToNotificationWithIdentifier(void *a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  id v10;
  void *v11;
  NSObject *v12;
  uint8_t v13[16];

  v7 = a1;
  v8 = a2;
  v9 = a3;
  v10 = a4;
  objc_msgSend(sub_19E2C7098(), "defaultManager");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    objc_msgSend(v11, "respondToNotificationWithIdentifier:sessionIdentifier:actionIdentifier:handler:", v7, v8, v9, v10);
  }
  else if (IMOSLoggingEnabled())
  {
    OSLogHandleForIMFoundationCategory();
    v12 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)v13 = 0;
      _os_log_impl(&dword_19E239000, v12, OS_LOG_TYPE_INFO, "SafetyMonitor does not respond to respondToNotificationWithIdentifier.", v13, 2u);
    }

  }
}

void IMInformSafetyMonitorManagerOfChangedGroupMembership(void *a1)
{
  id v1;
  NSObject *v2;
  char v3;
  int v4;
  NSObject *v5;
  NSObject *v6;
  int v7;
  id v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (v1)
  {
    objc_msgSend(sub_19E2C7098(), "defaultManager");
    v2 = objc_claimAutoreleasedReturnValue();
    v3 = objc_opt_respondsToSelector();
    v4 = IMOSLoggingEnabled();
    if ((v3 & 1) != 0)
    {
      if (v4)
      {
        OSLogHandleForIMFoundationCategory();
        v5 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
        {
          v7 = 138412290;
          v8 = v1;
          _os_log_impl(&dword_19E239000, v5, OS_LOG_TYPE_INFO, "Informing SafetyMonitorManager of changed group membership with: %@ ", (uint8_t *)&v7, 0xCu);
        }

      }
      -[NSObject iMessageGroupMembershipChangedFor:](v2, "iMessageGroupMembershipChangedFor:", v1);
    }
    else if (v4)
    {
      OSLogHandleForIMFoundationCategory();
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
      {
        v7 = 138412290;
        v8 = v1;
        _os_log_impl(&dword_19E239000, v6, OS_LOG_TYPE_INFO, "NOT Informing SafetyMonitorManager of changed group membership: %@ since SMManager does not respond to iMessageGroupMembershipChangedFor:", (uint8_t *)&v7, 0xCu);
      }

    }
LABEL_16:

    goto LABEL_17;
  }
  if (IMOSLoggingEnabled())
  {
    OSLogHandleForIMFoundationCategory();
    v2 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      LOWORD(v7) = 0;
      _os_log_impl(&dword_19E239000, v2, OS_LOG_TYPE_INFO, "No groupID passed in, skipping letting SafetyMonitorManager know of group membership change", (uint8_t *)&v7, 2u);
    }
    goto LABEL_16;
  }
LABEL_17:

}

void IMInformSafetyMonitorManagerOfKickFromGroup(void *a1)
{
  id v1;
  NSObject *v2;
  char v3;
  int v4;
  NSObject *v5;
  NSObject *v6;
  int v7;
  id v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (v1)
  {
    objc_msgSend(sub_19E2C7098(), "defaultManager");
    v2 = objc_claimAutoreleasedReturnValue();
    v3 = objc_opt_respondsToSelector();
    v4 = IMOSLoggingEnabled();
    if ((v3 & 1) != 0)
    {
      if (v4)
      {
        OSLogHandleForIMFoundationCategory();
        v5 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
        {
          v7 = 138412290;
          v8 = v1;
          _os_log_impl(&dword_19E239000, v5, OS_LOG_TYPE_INFO, "Informing SafetyMonitorManager of kick from group with: %@ ", (uint8_t *)&v7, 0xCu);
        }

      }
      -[NSObject kickedFromIMessageGroupWith:](v2, "kickedFromIMessageGroupWith:", v1);
    }
    else if (v4)
    {
      OSLogHandleForIMFoundationCategory();
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
      {
        v7 = 138412290;
        v8 = v1;
        _os_log_impl(&dword_19E239000, v6, OS_LOG_TYPE_INFO, "NOT Informing SafetyMonitorManager of kick from group: %@ since SMManager does not respond to kickedFromIMessageGroupWith:", (uint8_t *)&v7, 0xCu);
      }

    }
LABEL_16:

    goto LABEL_17;
  }
  if (IMOSLoggingEnabled())
  {
    OSLogHandleForIMFoundationCategory();
    v2 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      LOWORD(v7) = 0;
      _os_log_impl(&dword_19E239000, v2, OS_LOG_TYPE_INFO, "No groupID passed in, skipping letting SafetyMonitorManager know of kick from group", (uint8_t *)&v7, 2u);
    }
    goto LABEL_16;
  }
LABEL_17:

}

void IMInformSafetyMonitorManagerOfChangedGroupDisplayName(void *a1)
{
  id v1;
  NSObject *v2;
  char v3;
  int v4;
  NSObject *v5;
  NSObject *v6;
  int v7;
  id v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (v1)
  {
    objc_msgSend(sub_19E2C7098(), "defaultManager");
    v2 = objc_claimAutoreleasedReturnValue();
    v3 = objc_opt_respondsToSelector();
    v4 = IMOSLoggingEnabled();
    if ((v3 & 1) != 0)
    {
      if (v4)
      {
        OSLogHandleForIMFoundationCategory();
        v5 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
        {
          v7 = 138412290;
          v8 = v1;
          _os_log_impl(&dword_19E239000, v5, OS_LOG_TYPE_INFO, "Informing SafetyMonitorManager of changed group display name with: %@ ", (uint8_t *)&v7, 0xCu);
        }

      }
      -[NSObject iMessageGroupDisplayNameChangedFor:](v2, "iMessageGroupDisplayNameChangedFor:", v1);
    }
    else if (v4)
    {
      OSLogHandleForIMFoundationCategory();
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
      {
        v7 = 138412290;
        v8 = v1;
        _os_log_impl(&dword_19E239000, v6, OS_LOG_TYPE_INFO, "NOT Informing SafetyMonitorManager of changed group display name: %@ since SMManager does not respond to iMessageGroupDisplayNameChangedFor:", (uint8_t *)&v7, 0xCu);
      }

    }
LABEL_16:

    goto LABEL_17;
  }
  if (IMOSLoggingEnabled())
  {
    OSLogHandleForIMFoundationCategory();
    v2 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      LOWORD(v7) = 0;
      _os_log_impl(&dword_19E239000, v2, OS_LOG_TYPE_INFO, "No groupID passed in, skipping letting SafetyMonitorManager know of group display name change", (uint8_t *)&v7, 2u);
    }
    goto LABEL_16;
  }
LABEL_17:

}

void IMInformSafetyMonitorManagerOfChangedGroupPhoto(void *a1)
{
  id v1;
  NSObject *v2;
  char v3;
  int v4;
  NSObject *v5;
  NSObject *v6;
  int v7;
  id v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (v1)
  {
    objc_msgSend(sub_19E2C7098(), "defaultManager");
    v2 = objc_claimAutoreleasedReturnValue();
    v3 = objc_opt_respondsToSelector();
    v4 = IMOSLoggingEnabled();
    if ((v3 & 1) != 0)
    {
      if (v4)
      {
        OSLogHandleForIMFoundationCategory();
        v5 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
        {
          v7 = 138412290;
          v8 = v1;
          _os_log_impl(&dword_19E239000, v5, OS_LOG_TYPE_INFO, "Informing SafetyMonitorManager of changed group photo with: %@ ", (uint8_t *)&v7, 0xCu);
        }

      }
      -[NSObject iMessageGroupPhotoChangedFor:](v2, "iMessageGroupPhotoChangedFor:", v1);
    }
    else if (v4)
    {
      OSLogHandleForIMFoundationCategory();
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
      {
        v7 = 138412290;
        v8 = v1;
        _os_log_impl(&dword_19E239000, v6, OS_LOG_TYPE_INFO, "NOT Informing SafetyMonitorManager of changed group photo: %@ since SMManager does not respond to iMessageGroupPhotoChangedFor:", (uint8_t *)&v7, 0xCu);
      }

    }
LABEL_16:

    goto LABEL_17;
  }
  if (IMOSLoggingEnabled())
  {
    OSLogHandleForIMFoundationCategory();
    v2 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      LOWORD(v7) = 0;
      _os_log_impl(&dword_19E239000, v2, OS_LOG_TYPE_INFO, "No groupID passed in, skipping letting SafetyMonitorManager know of group photo change", (uint8_t *)&v7, 2u);
    }
    goto LABEL_16;
  }
LABEL_17:

}

uint64_t sub_19E2C96F8()
{
  uint64_t v0;
  void *v2;

  if (!qword_1ECFC6DB8)
    qword_1ECFC6DB8 = _sl_dlopen();
  v0 = qword_1ECFC6DB8;
  if (!qword_1ECFC6DB8)
  {
    v2 = (void *)abort_report_np();
    free(v2);
  }
  return v0;
}

Class sub_19E2C97A8(uint64_t a1)
{
  Class result;
  uint64_t v3;

  sub_19E2C96F8();
  result = objc_getClass("SMSafetyMonitorManager");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    qword_1ECFC6DD8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    v3 = sub_19E36D638();
    return (Class)sub_19E2C97FC(v3);
  }
  return result;
}

IMSharedEmergencyInfo *sub_19E2C97FC(uint64_t a1)
{
  IMSharedEmergencyInfo *result;
  IMSharedEmergencyInfo *v3;
  SEL v4;
  id v5;
  id v6;
  id v7;
  int64_t v8;

  sub_19E2C96F8();
  result = (IMSharedEmergencyInfo *)objc_getClass("SMHandle");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    qword_1ECFC6DD0 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    sub_19E36D65C();
    return -[IMSharedEmergencyInfo initWithStewieUserPersona:stewieUserPersona:conversationID:messageType:](v3, v4, v5, v6, v7, v8);
  }
  return result;
}

uint64_t sub_19E2CAA34(uint64_t a1)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(a1 + 32), sel_currentTestDidFinish);
}

uint64_t sub_19E2CAC30(uint64_t a1)
{
  void *v2;
  _QWORD v4[5];
  __int128 v5;

  objc_msgSend(*(id *)(a1 + 40), "testLog:", CFSTR("actually starting test batch %ld of %ld"), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56));
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 3221225472;
  v4[2] = sub_19E2CACB0;
  v4[3] = &unk_1E3FB7A18;
  v2 = *(void **)(a1 + 32);
  v4[4] = *(_QWORD *)(a1 + 40);
  v5 = *(_OWORD *)(a1 + 48);
  return objc_msgSend(v2, "runTest:", v4);
}

uint64_t sub_19E2CACB0(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "testLog:", CFSTR("finished test batch %ld of %ld"), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(a1 + 32), sel_runTestsIfNeededWithRepeatCount_withCount_);
}

void sub_19E2CAE6C()
{
  IMSafetyMonitorCoordinator *v0;
  void *v1;

  v0 = objc_alloc_init(IMSafetyMonitorCoordinator);
  v1 = (void *)qword_1ECFC6FD8;
  qword_1ECFC6FD8 = (uint64_t)v0;

}

uint64_t sub_19E2CD3F0(uint64_t a1, void *a2)
{
  NSObject *v3;
  uint8_t v5[16];

  if (IMOSLoggingEnabled())
  {
    OSLogHandleForIMFoundationCategory();
    v3 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)v5 = 0;
      _os_log_impl(&dword_19E239000, v3, OS_LOG_TYPE_INFO, "Received Me Card Picker Changed Notification (IMContactStore)", v5, 2u);
    }

  }
  return objc_msgSend(a2, "meCardChanged:", 0);
}

void sub_19E2CD890(uint64_t a1)
{
  void *v1;
  id v2;

  v1 = *(void **)(a1 + 32);
  v2 = (id)objc_msgSend(*(id *)(a1 + 40), "copy");
  objc_msgSend(v1, "addEntriesToIDToCNContactMap:", v2);

}

void sub_19E2CD8CC()
{
  id v0;

  objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter");
  v0 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "postNotificationName:object:", IMContactStoreBatchLoadCompleteNotification, 0);

}

void sub_19E2CD90C(uint64_t a1, void *a2, _BYTE *a3)
{
  id v6;
  id *v7;
  void *v8;

  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), a2);
  v6 = a2;
  v7 = *(id **)(a1 + 32);
  objc_msgSend(v7[3], "currentHistoryToken");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "setCurrentHistoryToken:", v8);

  +[IMContactStore logCNContact:](IMContactStore, "logCNContact:", v6);
  *a3 = 1;
}

void sub_19E2CEAEC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19E2CF294(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  void *v4;
  id v5;
  int v6;
  NSObject *v7;
  void *v8;
  IMContactStoreChangeHistoryEventsHandler *v9;
  void *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  NSObject *v14;
  void *v15;
  NSObject *v16;
  void *v17;
  BOOL v18;
  void *v19;
  _BOOL4 v20;
  NSObject *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  id v26;
  uint8_t buf[4];
  void *v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 40);
  v3 = *(void **)(*(_QWORD *)(a1 + 32) + 24);
  v26 = 0;
  objc_msgSend(v3, "enumeratorForChangeHistoryFetchRequest:error:", v2, &v26);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = v26;
  v6 = IMOSLoggingEnabled();
  if (v4)
  {
    if (v6)
    {
      OSLogHandleForIMFoundationCategory();
      v7 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
      {
        objc_msgSend(v4, "value");
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 134217984;
        v28 = v8;
        _os_log_impl(&dword_19E239000, v7, OS_LOG_TYPE_INFO, "Received %lu contact change history events", buf, 0xCu);

      }
    }
    v9 = objc_alloc_init(IMContactStoreChangeHistoryEventsHandler);
    objc_msgSend(v4, "value");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "nextObject");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    if (v11)
    {
      while (1)
      {
        v12 = (void *)MEMORY[0x1A1AE8394]();
        objc_msgSend(v11, "acceptEventVisitor:", v9);
        if (-[IMContactStoreChangeHistoryEventsHandler receivedDropEverythingEvent](v9, "receivedDropEverythingEvent"))
          break;
        objc_autoreleasePoolPop(v12);
        objc_msgSend(v10, "nextObject");
        v13 = objc_claimAutoreleasedReturnValue();

        v11 = (void *)v13;
        if (!v13)
          goto LABEL_19;
      }
      if (IMOSLoggingEnabled())
      {
        OSLogHandleForIMFoundationCategory();
        v16 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_19E239000, v16, OS_LOG_TYPE_INFO, "Skipping Contact change history events after the Drop Everything Event", buf, 2u);
        }

      }
      objc_autoreleasePoolPop(v12);
    }
LABEL_19:
    objc_msgSend(v4, "value");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    if (v17
      && (v18 = -[IMContactStoreChangeHistoryEventsHandler receivedDropEverythingEvent](v9, "receivedDropEverythingEvent"), v17, !v18))
    {
      v22 = *(void **)(a1 + 32);
      objc_msgSend(v4, "currentHistoryToken");
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v22, "setCurrentHistoryToken:", v23);

    }
    else
    {
      objc_msgSend(v4, "value");
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      if (v19
        && (v20 = -[IMContactStoreChangeHistoryEventsHandler receivedDropEverythingEvent](v9, "receivedDropEverythingEvent"), v19, v20))
      {
        objc_msgSend(*(id *)(a1 + 32), "setCurrentHistoryToken:", 0);
      }
      else if (IMOSLoggingEnabled())
      {
        OSLogHandleForIMFoundationCategory();
        v21 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_19E239000, v21, OS_LOG_TYPE_INFO, "Not updating history token since NO change history events were recieved.", buf, 2u);
        }

      }
    }
    objc_msgSend(*(id *)(a1 + 32), "getIDToCNContactMap");
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    +[IMContactStore logDictionary:](IMContactStore, "logDictionary:", v24);

    objc_msgSend(*(id *)(a1 + 32), "currentHistoryToken");
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    +[IMContactStore logHistoryToken:](IMContactStore, "logHistoryToken:", v25);

  }
  else if (v6)
  {
    OSLogHandleForIMFoundationCategory();
    v14 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
    {
      objc_msgSend(v5, "description");
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138412290;
      v28 = v15;
      _os_log_impl(&dword_19E239000, v14, OS_LOG_TYPE_INFO, "Could not fetch Change History from CNContactStore error:%@", buf, 0xCu);

    }
  }

}

void sub_19E2CF908(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x19E2CF8CCLL);
  }
  _Unwind_Resume(a1);
}

void sub_19E2CFFE0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19E2D0D48()
{
  IMDPLogsCollector *v0;
  void *v1;

  v0 = objc_alloc_init(IMDPLogsCollector);
  v1 = (void *)qword_1ECFC75A8;
  qword_1ECFC75A8 = (uint64_t)v0;

}

uint64_t sub_19E2D12C0(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 32), "addObject:", a2);
}

void sub_19E2D135C()
{
  IMMutedChatList *v0;
  void *v1;

  v0 = objc_alloc_init(IMMutedChatList);
  v1 = (void *)qword_1ECFC72A0;
  qword_1ECFC72A0 = (uint64_t)v0;

}

uint64_t sub_19E2D13F0(uint64_t a1, void *a2)
{
  NSObject *v3;
  uint8_t v5[16];

  if (IMOSLoggingEnabled())
  {
    OSLogHandleForIMFoundationCategory();
    v3 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)v5 = 0;
      _os_log_impl(&dword_19E239000, v3, OS_LOG_TYPE_INFO, "Received Do Not Disturb List Changed Notification", v5, 2u);
    }

  }
  return objc_msgSend(a2, "_handleMutedChatListChanged");
}

void sub_19E2D2000()
{
  id v0;

  CFPreferencesAppSynchronize(CFSTR("com.apple.MobileSMS.CKDNDList"));
  objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter");
  v0 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "postNotificationName:object:", CFSTR("__kIMMutedChatListDidChangeNotification"), 0);

}

id sub_19E2D218C(void *a1)
{
  void *v2;
  void *v3;
  IMRichCards *v4;
  void *v5;
  IMRichCards *v6;
  IMRichCards *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;

  if (objc_msgSend(a1, "isSingleCharacterString:", CFSTR("\uFFFE")))
  {
    objc_msgSend(a1, "attributesAtIndex:effectiveRange:", 0, 0);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "_arrayForKey:", CFSTR("__kIMRichCardsAttributeName"));
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    v4 = [IMRichCards alloc];
    if (v3)
      v5 = v3;
    else
      v5 = (void *)MEMORY[0x1E0C9AA60];
    v6 = -[IMRichCards initWithCardArray:](v4, "initWithCardArray:", v5);
    v7 = v6;
    if (v6)
    {
      -[IMRichCards previewText](v6, "previewText");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      if (v8)
      {
        v9 = (void *)MEMORY[0x1E0CB3940];
        IMSharedUtilitiesFrameworkBundle();
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v10, "localizedStringForKey:value:table:", CFSTR("RICH_CARDS_PREVIEW_FORMAT"), &stru_1E3FBBA48, CFSTR("IMSharedUtilities"));
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v9, "localizedStringWithFormat:", v11, v8);
        v12 = (void *)objc_claimAutoreleasedReturnValue();

      }
      else
      {
        IMSharedUtilitiesFrameworkBundle();
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v10, "localizedStringForKey:value:table:", CFSTR("RICH_CARDS_DEFAULT_PREVIEW"), &stru_1E3FBBA48, CFSTR("IMSharedUtilities"));
        v12 = (void *)objc_claimAutoreleasedReturnValue();
      }

    }
    else
    {
      v12 = 0;
    }

  }
  else
  {
    v12 = 0;
  }
  return v12;
}

id sub_19E2D22F8(void *a1)
{
  void *v2;
  void *v3;
  IMChipReply *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;

  if (objc_msgSend(a1, "isSingleCharacterString:", CFSTR("\uFFFF")))
  {
    objc_msgSend(a1, "attributesAtIndex:effectiveRange:", 0, 0);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "_dictionaryForKey:", CFSTR("__kIMSuggestedReplyAttributeName"));
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    v4 = -[IMChipReply initWithDictionary:]([IMChipReply alloc], "initWithDictionary:", v3);
    if (v4)
    {
      v5 = (void *)MEMORY[0x1E0CB3940];
      IMSharedUtilitiesFrameworkBundle();
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "localizedStringForKey:value:table:", CFSTR("SELECTED_OPTION_PREVIEW_FORMAT"), &stru_1E3FBBA48, CFSTR("IMSharedUtilities"));
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      -[IMChipReply suggestion](v4, "suggestion");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v8, "displayText");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v5, "localizedStringWithFormat:", v7, v9);
      v10 = (void *)objc_claimAutoreleasedReturnValue();

    }
    else
    {
      v10 = 0;
    }

  }
  else
  {
    v10 = 0;
  }
  return v10;
}

uint64_t sub_19E2D2430(void *a1)
{
  if ((objc_msgSend(a1, "isSingleCharacterString:", CFSTR("\uFFFE")) & 1) != 0)
    return 1;
  else
    return objc_msgSend(a1, "isSingleCharacterString:", CFSTR("\uFFFF"));
}

uint64_t sub_19E2D2480(void *a1, uint64_t a2, void *a3)
{
  id v4;
  void *v5;
  void *v6;
  uint64_t v7;

  v4 = a3;
  if (objc_msgSend(a1, "length") == 1)
  {
    objc_msgSend(a1, "string");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "substringToIndex:", 1);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = objc_msgSend(v6, "isEqualToString:", v4);

  }
  else
  {
    v7 = 0;
  }

  return v7;
}

uint64_t IMSharedUtilitiesProtoCloudKitEncryptedGroupTitleChangeReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  BOOL v16;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t result;
  void *String;
  id v25;
  uint64_t v26;
  void *v27;
  void *Data;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (2)
    {
      if (!*(_BYTE *)(a2 + *v5))
      {
        v8 = 0;
        v9 = 0;
        v10 = 0;
        while (1)
        {
          v11 = *v3;
          v12 = *(_QWORD *)(a2 + v11);
          if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
            break;
          v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
          *(_QWORD *)(a2 + v11) = v12 + 1;
          v10 |= (unint64_t)(v13 & 0x7F) << v8;
          if ((v13 & 0x80) == 0)
            goto LABEL_12;
          v8 += 7;
          v14 = v9++ >= 9;
          if (v14)
          {
            v10 = 0;
            v15 = *(unsigned __int8 *)(a2 + *v5);
            goto LABEL_14;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
        v15 = *(unsigned __int8 *)(a2 + *v5);
        if (*(_BYTE *)(a2 + *v5))
          v10 = 0;
LABEL_14:
        if (v15)
          v16 = 1;
        else
          v16 = (v10 & 7) == 4;
        if (!v16)
        {
          switch((v10 >> 3))
          {
            case 1u:
              v17 = 0;
              v18 = 0;
              v19 = 0;
              *(_BYTE *)(a1 + 36) |= 1u;
              break;
            case 2u:
              String = (void *)PBReaderReadString();

              v25 = String;
              v26 = 8;
              goto LABEL_31;
            case 3u:
              v27 = (void *)PBReaderReadString();

              v25 = v27;
              v26 = 16;
              goto LABEL_31;
            case 4u:
              Data = (void *)PBReaderReadData();

              v25 = Data;
              v26 = 24;
LABEL_31:
              *(_QWORD *)(a1 + v26) = v25;
              goto LABEL_36;
            default:
              result = PBReaderSkipValueWithTag();
              if (!(_DWORD)result)
                return result;
LABEL_36:
              if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
                return *(_BYTE *)(a2 + *v5) == 0;
              continue;
          }
          while (1)
          {
            v20 = *v3;
            v21 = *(_QWORD *)(a2 + v20);
            if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
              break;
            v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
            *(_QWORD *)(a2 + v20) = v21 + 1;
            v19 |= (unint64_t)(v22 & 0x7F) << v17;
            if ((v22 & 0x80) == 0)
              goto LABEL_33;
            v17 += 7;
            v14 = v18++ >= 9;
            if (v14)
            {
              LODWORD(v19) = 0;
              goto LABEL_35;
            }
          }
          *(_BYTE *)(a2 + *v5) = 1;
LABEL_33:
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v19) = 0;
LABEL_35:
          *(_DWORD *)(a1 + 32) = v19;
          goto LABEL_36;
        }
      }
      break;
    }
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sub_19E2D2EA0()
{
  uint64_t v0;
  void *v1;

  v0 = objc_opt_new();
  v1 = (void *)qword_1ECFC6D08;
  qword_1ECFC6D08 = v0;

}

void sub_19E2D32D4(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;

  objc_msgSend(MEMORY[0x1E0D027B8], "discoverabilitySignal");
  v4 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "source");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0D02618]), "initWithIdentifier:bundleID:context:", *(_QWORD *)(a1 + 32), CFSTR("com.apple.MobileSMS"), 0);
  objc_msgSend(v2, "sendEvent:", v3);

}

id sub_19E2D3364()
{
  void *v0;
  void *v1;
  uint64_t v2;
  void *v3;
  void *v4;
  const __CFString *v6;
  _QWORD v7[2];

  v7[1] = *MEMORY[0x1E0C80C00];
  objc_msgSend(MEMORY[0x1E0D00100], "sharedInstance");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "primaryAuthKitAccount");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = objc_msgSend(v0, "userIsSeniorForAccount:", v1);
  v6 = CFSTR("u65_flag");
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", v2);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v7[0] = v3;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v7, &v6, 1);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  return v4;
}

uint64_t IMStringFromCGSize(double a1, double a2)
{
  return objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("<%f, %f>"), *(_QWORD *)&a1, *(_QWORD *)&a2);
}

__CFData *IMCreateASTCImageDataFromCGImageRef(CGImage *a1)
{
  __CFData *v2;
  CGImageDestination *v3;
  CGImageDestination *v4;
  BOOL v5;

  if (!a1)
    return 0;
  v2 = (__CFData *)objc_alloc_init(MEMORY[0x1E0C99DF0]);
  if (v2)
  {
    if (qword_1EE503A38 != -1)
      dispatch_once(&qword_1EE503A38, &unk_1E3FB39A8);
    v3 = CGImageDestinationCreateWithData(v2, CFSTR("com.apple.atx"), 1uLL, 0);
    if (!v3
      || (v4 = v3,
          CGImageDestinationAddImage(v3, a1, (CFDictionaryRef)qword_1EE503A60),
          v5 = CGImageDestinationFinalize(v4),
          CFRelease(v4),
          !v5))
    {

      return 0;
    }
  }
  return v2;
}

BOOL IMFreeSpaceWriteDataToURL(void *a1, uint64_t a2, int a3)
{
  uint64_t v6;
  _BOOL8 v7;
  NSObject *v8;
  void *v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  char v15;

  v6 = objc_msgSend(a1, "length");
  v7 = 0;
  if (a2 && v6)
  {
    v8 = 0;
    v12 = 0;
    v13 = &v12;
    v14 = 0x2020000000;
    v15 = 0;
    if (a3)
    {
      v8 = dispatch_group_create();
      dispatch_group_enter(v8);
    }
    v9 = (void *)MEMORY[0x1E0C99D80];
    v10 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", 1);
    objc_msgSend(v9, "dictionaryWithObject:forKey:", v10, *MEMORY[0x1E0CFAA38]);
    objc_msgSend(a1, "length");
    CPFreeSpaceRequestBytesAtPathWithCompletionBlock();
    if (v8)
    {
      dispatch_group_wait(v8, 0x3B9ACA00uLL);
      dispatch_release(v8);
    }
    v7 = *((_BYTE *)v13 + 24) != 0;
    _Block_object_dispose(&v12, 8);
  }
  return v7;
}

void sub_19E2D3D64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

CGImageRef IMCreateThumbnailWithImageSourceAtIndexForMaxDimension(CGImageSource *a1, size_t a2, double a3)
{
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const __CFDictionary *v10;
  NSObject *v12;
  const char *v13;
  NSObject *v14;
  uint32_t v15;
  NSObject *v16;
  int v17;
  size_t Count;
  __int16 v19;
  size_t v20;
  _QWORD v21[6];
  _QWORD v22[7];

  v22[6] = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    if (!IMOSLoggingEnabled())
      return 0;
    v12 = OSLogHandleForIMFoundationCategory();
    if (!os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
      return 0;
    LOWORD(v17) = 0;
    v13 = "ImageSource was null";
    v14 = v12;
    v15 = 2;
    goto LABEL_12;
  }
  v6 = IMLogHandleForCategory("IMAttachmentUtilities");
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
    sub_19E36D838(v6);
  v7 = MEMORY[0x1E0C9AAB0];
  v8 = *MEMORY[0x1E0CBD170];
  v21[0] = *MEMORY[0x1E0CBD280];
  v21[1] = v8;
  v22[0] = MEMORY[0x1E0C9AAB0];
  v22[1] = MEMORY[0x1E0C9AAB0];
  v21[2] = *MEMORY[0x1E0CBD298];
  v22[2] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLong:", (uint64_t)fmin(a3, 4.61168602e18));
  v9 = *MEMORY[0x1E0CBD2C0];
  v21[3] = *MEMORY[0x1E0CBD188];
  v21[4] = v9;
  v22[3] = v7;
  v22[4] = v7;
  v21[5] = *MEMORY[0x1E0CBD248];
  v22[5] = v7;
  v10 = (const __CFDictionary *)objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v22, v21, 6);
  if (CGImageSourceGetCount(a1) > a2)
    return CGImageSourceCreateThumbnailAtIndex(a1, a2, v10);
  if (IMOSLoggingEnabled())
  {
    v16 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
    {
      v17 = 134218240;
      Count = CGImageSourceGetCount(a1);
      v19 = 2048;
      v20 = a2;
      v13 = "Required image did not exist, count %zu, index %zu";
      v14 = v16;
      v15 = 22;
LABEL_12:
      _os_log_impl(&dword_19E239000, v14, OS_LOG_TYPE_INFO, v13, (uint8_t *)&v17, v15);
    }
  }
  return 0;
}

void sub_19E2D42DC(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x19E2D42A4);
  }
  _Unwind_Resume(a1);
}

CFTypeRef sub_19E2D42FC()
{
  uint64_t v0;
  CFTypeRef result;
  _QWORD v2[3];
  _QWORD v3[4];

  v3[3] = *MEMORY[0x1E0C80C00];
  v0 = *MEMORY[0x1E0CBC828];
  v2[0] = *MEMORY[0x1E0CBCA10];
  v2[1] = v0;
  v3[0] = *MEMORY[0x1E0CBC838];
  v3[1] = &unk_1E3FFE5B8;
  v2[2] = *MEMORY[0x1E0CBC850];
  v3[2] = MEMORY[0x1E0C9AAB0];
  result = (CFTypeRef)objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v3, v2, 3);
  if (result)
    result = CFRetain(result);
  qword_1EE503A60 = (uint64_t)result;
  return result;
}

CGImageDestination *IMCreateHEICSImageDataFromCGImageRef(CGImage *a1)
{
  __CFData *v2;
  CGImageDestination *result;
  CGImageDestination *v4;
  uint64_t v5;
  _QWORD v6[2];

  v6[1] = *MEMORY[0x1E0C80C00];
  v2 = (__CFData *)objc_alloc_init(MEMORY[0x1E0C99DF0]);
  result = CGImageDestinationCreateWithData(v2, CFSTR("public.heic"), 1uLL, 0);
  if (result)
  {
    v4 = result;
    v5 = *MEMORY[0x1E0CBC788];
    v6[0] = &unk_1E3FFF2C0;
    CGImageDestinationAddImage(result, a1, (CFDictionaryRef)objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v6, &v5, 1));
    CGImageDestinationFinalize(v4);
    CFAutorelease(v4);
    return (CGImageDestination *)-[__CFData copy](v2, "copy");
  }
  return result;
}

__CFData *IMCreatePNGImageDataFromCGImageRef(CGImage *a1)
{
  __CFData *v2;
  __CFData *v3;
  CGImageDestinationRef v4;
  CGImageDestination *v5;
  id v6;
  void *v7;
  id v8;
  void *v9;
  uint64_t v10;
  BOOL v11;

  if (!a1)
    return 0;
  v2 = (__CFData *)objc_alloc_init(MEMORY[0x1E0C99DF0]);
  v3 = v2;
  if (v2)
  {
    v4 = CGImageDestinationCreateWithData(v2, CFSTR("public.png"), 1uLL, 0);
    if (!v4)
      goto LABEL_5;
    v5 = v4;
    v6 = objc_alloc_init(MEMORY[0x1E0C99E08]);
    v7 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB37E8]), "initWithLong:", 8);
    v8 = objc_alloc(MEMORY[0x1E0C99D80]);
    v9 = (void *)objc_msgSend(v8, "initWithObjectsAndKeys:", v7, *MEMORY[0x1E0CBD010], 0);
    objc_msgSend(v6, "setObject:forKey:", v9, *MEMORY[0x1E0CBD020]);
    v10 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLong:", 2);
    objc_msgSend(v6, "setObject:forKey:", v10, *MEMORY[0x1E0CBD000]);
    CGImageDestinationAddImage(v5, a1, (CFDictionaryRef)v6);
    v11 = CGImageDestinationFinalize(v5);
    CFRelease(v5);

    if (!v11)
    {
LABEL_5:

      return 0;
    }
  }
  return v3;
}

void sub_19E2D45D8(uint64_t a1, int a2)
{
  NSObject *v3;
  uint64_t v4;
  NSObject *v5;
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  uint8_t buf[4];
  uint64_t v10;
  __int16 v11;
  uint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    v8 = 0;
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) = objc_msgSend(*(id *)(a1 + 32), "writeToURL:options:error:", *(_QWORD *)(a1 + 40), 1073741825, &v8);
    if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24))
    {
      if (IMOSLoggingEnabled())
      {
        v3 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
        {
          v4 = *(_QWORD *)(a1 + 40);
          *(_DWORD *)buf = 138412546;
          v10 = v4;
          v11 = 2112;
          v12 = v8;
          _os_log_impl(&dword_19E239000, v3, OS_LOG_TYPE_INFO, "Failed to write preview with permissions via CPFreeSpaceRequestBytesAtPathWithCompletionBlock at URL: %@    error: %@", buf, 0x16u);
        }
      }
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) = objc_msgSend(*(id *)(a1 + 32), "writeToURL:atomically:", *(_QWORD *)(a1 + 40), 1);
      if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24))
      {
        if (IMOSLoggingEnabled())
        {
          v5 = OSLogHandleForIMFoundationCategory();
          if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
          {
            v6 = *(_QWORD *)(a1 + 40);
            *(_DWORD *)buf = 138412290;
            v10 = v6;
            _os_log_impl(&dword_19E239000, v5, OS_LOG_TYPE_INFO, "Failed to write preview with [NSData writeToURL:] at URL %@", buf, 0xCu);
          }
        }
      }
    }
  }
  v7 = *(NSObject **)(a1 + 48);
  if (v7)
    dispatch_group_leave(v7);
}

CGImageRef IMImageUtilsCreateImageFromImageWithCropRect(CGImage *a1, double a2, double a3, double a4, double a5)
{
  CGColorSpace *DeviceRGB;
  double height;
  double x;
  double y;
  double width;
  double v11;
  double v12;
  CGContext *v14;
  CGImageRef v15;
  CGImage *v16;
  CGFloat v17;
  CGFloat v18;
  CGFloat v19;
  CGFloat v20;
  CGAffineTransform v22;
  CGAffineTransform v23;
  CGAffineTransform v24;
  CGRect v25;
  CGRect v26;
  CGRect v27;
  CGRect v28;
  CGRect v29;
  CGRect v30;
  CGRect v31;
  CGRect v32;
  CGRect v33;
  CGRect v34;
  CGRect v35;
  CGRect v36;
  CGRect v37;
  CGRect v38;
  CGRect v39;
  CGRect v40;

  if (!a1)
    return 0;
  v25 = CGRectStandardize(*(CGRect *)&a2);
  v26 = CGRectIntegral(v25);
  DeviceRGB = 0;
  if (v26.size.width > 0.0)
  {
    height = v26.size.height;
    if (v26.size.height > 0.0)
    {
      x = v26.origin.x;
      y = v26.origin.y;
      width = v26.size.width;
      v11 = (double)CGImageGetWidth(a1);
      v12 = (double)CGImageGetHeight(a1);
      v27.origin.x = 0.0;
      v27.origin.y = 0.0;
      v27.size.width = v11;
      v27.size.height = v12;
      v39.origin.x = x;
      v39.origin.y = y;
      v39.size.width = width;
      v39.size.height = height;
      v28 = CGRectIntersection(v27, v39);
      v29 = CGRectStandardize(v28);
      if (v29.size.width >= width && v29.size.height >= height)
      {
        v38.origin.x = x;
        v38.origin.y = y;
        v38.size.width = width;
        v38.size.height = height;
        return CGImageCreateWithImageInRect(a1, v38);
      }
      DeviceRGB = 0;
      if (v29.size.width >= 0.0 && v29.size.height >= 0.0)
      {
        DeviceRGB = CGColorSpaceCreateDeviceRGB();
        if (DeviceRGB)
        {
          v14 = CGBitmapContextCreate(0, (unint64_t)width, (unint64_t)height, 8uLL, vcvtd_n_u64_f64(width, 2uLL), DeviceRGB, 0x2006u);
          CGColorSpaceRelease(DeviceRGB);
          if (v14)
          {
            CGContextSetFillColor(v14, dbl_1EE501038);
            v30.origin.x = 0.0;
            v30.origin.y = 0.0;
            v30.size.width = width;
            v30.size.height = height;
            CGContextFillRect(v14, v30);
            v31.origin.x = x;
            v31.origin.y = y;
            v31.size.width = width;
            v31.size.height = height;
            v15 = CGImageCreateWithImageInRect(a1, v31);
            if (v15)
            {
              v16 = v15;
              v40.origin.x = -x;
              v40.origin.y = -y;
              v32.origin.x = 0.0;
              v32.origin.y = 0.0;
              v32.size.width = width;
              v32.size.height = height;
              v40.size.width = v11;
              v40.size.height = v12;
              v33 = CGRectIntersection(v32, v40);
              v17 = v33.origin.x;
              v18 = v33.origin.y;
              v19 = v33.size.width;
              v20 = v33.size.height;
              memset(&v24, 0, sizeof(v24));
              CGAffineTransformMakeScale(&v24, 1.0, -1.0);
              memset(&v23, 0, sizeof(v23));
              CGAffineTransformMakeTranslation(&v23, 0.0, height);
              v22 = v24;
              v34.origin.x = v17;
              v34.origin.y = v18;
              v34.size.width = v19;
              v34.size.height = v20;
              v35 = CGRectApplyAffineTransform(v34, &v22);
              v22 = v23;
              v36 = CGRectApplyAffineTransform(v35, &v22);
              v37 = CGRectStandardize(v36);
              CGContextDrawImage(v14, v37, v16);
              DeviceRGB = CGBitmapContextCreateImage(v14);
              CGImageRelease(v16);
            }
            else
            {
              DeviceRGB = 0;
            }
            CFRelease(v14);
            return DeviceRGB;
          }
          return 0;
        }
      }
    }
  }
  return DeviceRGB;
}

__CFData *IMCroppedImageDataFromDataWithCropRect(void *a1, double a2, double a3, double a4, double a5)
{
  __CFData *v10;
  CGImageSource *v11;
  CGImage *ImageAtIndex;
  CGImage *ImageFromImageWithCropRect;

  if (!a1)
    return 0;
  if (CGRectIsEmpty(*(CGRect *)&a2))
    return (__CFData *)a1;
  v11 = CGImageSourceCreateWithData((CFDataRef)a1, 0);
  ImageAtIndex = CGImageSourceCreateImageAtIndex(v11, 0, 0);
  ImageFromImageWithCropRect = IMImageUtilsCreateImageFromImageWithCropRect(ImageAtIndex, a2, a3, a4, a5);
  v10 = IMCreatePNGImageDataFromCGImageRef(ImageFromImageWithCropRect);
  if (ImageFromImageWithCropRect)
    CFRelease(ImageFromImageWithCropRect);
  if (ImageAtIndex)
    CFRelease(ImageAtIndex);
  if (v11)
    CFRelease(v11);
  return v10;
}

__CFData *IMRescaledImageDataFromDataForBiomeDonation(const __CFData *a1)
{
  CGImageSourceRef v1;
  double v2;
  double v3;
  CGImage *v4;
  __CFData *v5;

  if (!a1)
    return 0;
  v1 = CGImageSourceCreateWithData(a1, 0);
  +[IMImageUtilities imageSourcePxSize:](IMImageUtilities, "imageSourcePxSize:", v1);
  v4 = +[IMImageUtilities newThumbnailForTargetSize:imageSize:imageSource:mode:scale:](IMImageUtilities, "newThumbnailForTargetSize:imageSize:imageSource:mode:scale:", v1, 1, 360.0, 360.0, v2, v3, 2.0);
  v5 = IMCreatePNGImageDataFromCGImageRef(v4);
  if (v4)
    CFRelease(v4);
  if (v1)
    CFRelease(v1);
  return v5;
}

void sub_19E2D5CB4(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, a5, 0xCu);
}

void sub_19E2D68D8()
{
  void *v0;
  void *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v0 = (void *)MEMORY[0x1E0C99E60];
  v4 = objc_opt_class();
  v5 = objc_opt_class();
  v6 = objc_opt_class();
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v4, 3);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "setWithArray:", v1, v4, v5);
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = (void *)qword_1EE503A48;
  qword_1EE503A48 = v2;

}

uint64_t IMSharedUtilitiesProtoCloudKitEncryptedMessageUpdateT2ReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  BOOL v16;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t result;
  void *String;
  id v25;
  uint64_t v26;
  void *v27;
  void *Data;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (2)
    {
      if (!*(_BYTE *)(a2 + *v5))
      {
        v8 = 0;
        v9 = 0;
        v10 = 0;
        while (1)
        {
          v11 = *v3;
          v12 = *(_QWORD *)(a2 + v11);
          if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
            break;
          v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
          *(_QWORD *)(a2 + v11) = v12 + 1;
          v10 |= (unint64_t)(v13 & 0x7F) << v8;
          if ((v13 & 0x80) == 0)
            goto LABEL_12;
          v8 += 7;
          v14 = v9++ >= 9;
          if (v14)
          {
            v10 = 0;
            v15 = *(unsigned __int8 *)(a2 + *v5);
            goto LABEL_14;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
        v15 = *(unsigned __int8 *)(a2 + *v5);
        if (*(_BYTE *)(a2 + *v5))
          v10 = 0;
LABEL_14:
        if (v15)
          v16 = 1;
        else
          v16 = (v10 & 7) == 4;
        if (!v16)
        {
          switch((v10 >> 3))
          {
            case 1u:
              v17 = 0;
              v18 = 0;
              v19 = 0;
              *(_BYTE *)(a1 + 36) |= 1u;
              break;
            case 2u:
              String = (void *)PBReaderReadString();

              v25 = String;
              v26 = 8;
              goto LABEL_31;
            case 3u:
              v27 = (void *)PBReaderReadString();

              v25 = v27;
              v26 = 24;
              goto LABEL_31;
            case 4u:
              Data = (void *)PBReaderReadData();

              v25 = Data;
              v26 = 16;
LABEL_31:
              *(_QWORD *)(a1 + v26) = v25;
              goto LABEL_36;
            default:
              result = PBReaderSkipValueWithTag();
              if (!(_DWORD)result)
                return result;
LABEL_36:
              if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
                return *(_BYTE *)(a2 + *v5) == 0;
              continue;
          }
          while (1)
          {
            v20 = *v3;
            v21 = *(_QWORD *)(a2 + v20);
            if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
              break;
            v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
            *(_QWORD *)(a2 + v20) = v21 + 1;
            v19 |= (unint64_t)(v22 & 0x7F) << v17;
            if ((v22 & 0x80) == 0)
              goto LABEL_33;
            v17 += 7;
            v14 = v18++ >= 9;
            if (v14)
            {
              LODWORD(v19) = 0;
              goto LABEL_35;
            }
          }
          *(_BYTE *)(a2 + *v5) = 1;
LABEL_33:
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v19) = 0;
LABEL_35:
          *(_DWORD *)(a1 + 32) = v19;
          goto LABEL_36;
        }
      }
      break;
    }
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

id sub_19E2D7510(uint64_t a1, uint64_t a2, void *a3)
{
  id v3;
  id v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _BYTE v16[128];
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v3 = a3;
  v4 = objc_alloc_init(MEMORY[0x1E0CB3788]);
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  v5 = v3;
  v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
  if (v6)
  {
    v7 = v6;
    v8 = *(_QWORD *)v13;
    do
    {
      v9 = 0;
      do
      {
        if (*(_QWORD *)v13 != v8)
          objc_enumerationMutation(v5);
        objc_msgSend(v4, "addIndex:", objc_msgSend(*(id *)(*((_QWORD *)&v12 + 1) + 8 * v9++), "unsignedIntegerValue", (_QWORD)v12));
      }
      while (v7 != v9);
      v7 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
    }
    while (v7);
  }

  v10 = (void *)objc_msgSend(v4, "copy");
  return v10;
}

id sub_19E2D7630(void *a1)
{
  id v2;
  id v3;
  void *v4;
  _QWORD v6[4];
  id v7;

  v2 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v6[2] = sub_19E2D76C0;
  v6[3] = &unk_1E3FB8090;
  v7 = v2;
  v3 = v2;
  objc_msgSend(a1, "enumerateIndexesUsingBlock:", v6);
  v4 = (void *)objc_msgSend(v3, "copy");

  return v4;
}

void sub_19E2D76C0(uint64_t a1, uint64_t a2)
{
  id v3;

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", a2);
  v3 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 32), "addObject:", v3);

}

void sub_19E2D812C()
{
  uint64_t v0;
  void *v1;

  objc_msgSend(MEMORY[0x1E0C99E98], "fileURLWithPath:isDirectory:", CFSTR("/var/mobile/Library/"), 1);
  v0 = objc_claimAutoreleasedReturnValue();
  v1 = (void *)qword_1ECFC7060;
  qword_1ECFC7060 = v0;

}

void sub_19E2D8164()
{
  __CFString *v0;
  uint64_t v1;
  void *v2;
  id v3;

  v0 = IMServiceNameSMS[0];
  IMHomeLibraryDirectoryURL();
  v3 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "URLByAppendingPathComponent:isDirectory:", v0, 1);
  v1 = objc_claimAutoreleasedReturnValue();
  v2 = (void *)qword_1ECFC71C0;
  qword_1ECFC71C0 = v1;

}

id IMAttachmentsDirectoryURL()
{
  if (qword_1EE5039D0 != -1)
    dispatch_once(&qword_1EE5039D0, &unk_1E3FB42C8);
  return (id)qword_1EE5039D8;
}

void sub_19E2D820C()
{
  uint64_t v0;
  void *v1;
  id v2;

  IMSMSDirectoryURL();
  v2 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "URLByAppendingPathComponent:isDirectory:", CFSTR("Attachments"), 1);
  v0 = objc_claimAutoreleasedReturnValue();
  v1 = (void *)qword_1EE5039D8;
  qword_1EE5039D8 = v0;

}

id IMExternalAttachmentsDirectoryURL()
{
  if (qword_1EE5040D8 != -1)
    dispatch_once(&qword_1EE5040D8, &unk_1E3FB45C8);
  return (id)qword_1EE5040D0;
}

void sub_19E2D8298()
{
  uint64_t v0;
  void *v1;
  id v2;

  IMHomeLibraryDirectoryURL();
  v2 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "URLByAppendingPathComponent:isDirectory:", CFSTR("MessagesMetaData"), 1);
  v0 = objc_claimAutoreleasedReturnValue();
  v1 = (void *)qword_1EE5040D0;
  qword_1EE5040D0 = v0;

}

void sub_19E2D82E4()
{
  void *v0;
  void *v1;
  uint64_t v2;
  void *v3;
  NSObject *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v0 = (void *)MEMORY[0x1E0C99E98];
  objc_msgSend(CFSTR("/var/mobile/Library/Caches/"), "stringByAppendingPathComponent:", CFSTR("com.apple.MobileSMS"));
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "fileURLWithPath:isDirectory:", v1, 1);
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = (void *)qword_1ECFC71D0;
  qword_1ECFC71D0 = v2;

  if (IMOSLoggingEnabled())
  {
    OSLogHandleForIMFoundationCategory();
    v4 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      v5 = 138412290;
      v6 = qword_1ECFC71D0;
      _os_log_impl(&dword_19E239000, v4, OS_LOG_TYPE_INFO, "Caches directory is %@", (uint8_t *)&v5, 0xCu);
    }

  }
}

id IMNicknameCacheDirectoryURL()
{
  if (qword_1EE5040E8 != -1)
    dispatch_once(&qword_1EE5040E8, &unk_1E3FB3F68);
  return (id)qword_1EE5040E0;
}

void sub_19E2D8458()
{
  uint64_t v0;
  void *v1;
  id v2;

  IMExternalAttachmentsDirectoryURL();
  v2 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "URLByAppendingPathComponent:isDirectory:", CFSTR("NickNameCache"), 1);
  v0 = objc_claimAutoreleasedReturnValue();
  v1 = (void *)qword_1EE5040E0;
  qword_1EE5040E0 = v0;

}

id IMCollaborationNoticeDirectoryURL()
{
  if (qword_1EE5040F8 != -1)
    dispatch_once(&qword_1EE5040F8, &unk_1E3FB4028);
  return (id)qword_1EE5040F0;
}

void sub_19E2D84E4()
{
  uint64_t v0;
  void *v1;
  id v2;

  IMSMSDirectoryURL();
  v2 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "URLByAppendingPathComponent:isDirectory:", CFSTR("CollaborationNoticeCache"), 1);
  v0 = objc_claimAutoreleasedReturnValue();
  v1 = (void *)qword_1EE5040F0;
  qword_1EE5040F0 = v0;

}

id IMStickerCacheDirectoryURL()
{
  if (qword_1EE504108 != -1)
    dispatch_once(&qword_1EE504108, &unk_1E3FB40C8);
  return (id)qword_1EE504100;
}

void sub_19E2D8570()
{
  uint64_t v0;
  void *v1;
  id v2;

  IMSMSDirectoryURL();
  v2 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "URLByAppendingPathComponent:isDirectory:", CFSTR("StickerCache"), 1);
  v0 = objc_claimAutoreleasedReturnValue();
  v1 = (void *)qword_1EE504100;
  qword_1EE504100 = v0;

}

id IMStickerTransferInfoDirectoryURL()
{
  if (qword_1EE504118 != -1)
    dispatch_once(&qword_1EE504118, &unk_1E3FB4188);
  return (id)qword_1EE504110;
}

void sub_19E2D85FC()
{
  uint64_t v0;
  void *v1;
  id v2;

  IMSMSDirectoryURL();
  v2 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "URLByAppendingPathComponent:isDirectory:", CFSTR("transferInfo"), 1);
  v0 = objc_claimAutoreleasedReturnValue();
  v1 = (void *)qword_1EE504110;
  qword_1EE504110 = v0;

}

id IMBrowserSnapshotCacheDirectoryURL()
{
  if (qword_1EE504128 != -1)
    dispatch_once(&qword_1EE504128, &unk_1E3FB2798);
  return (id)qword_1EE504120;
}

void sub_19E2D8688()
{
  uint64_t v0;
  void *v1;
  id v2;

  IMCachesDirectoryURL();
  v2 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "URLByAppendingPathComponent:isDirectory:", CFSTR("BrowserSnapshots"), 1);
  v0 = objc_claimAutoreleasedReturnValue();
  v1 = (void *)qword_1EE504120;
  qword_1EE504120 = v0;

}

id IMBalloonPluginMetadataCacheDirectoryURL()
{
  if (qword_1EE504138 != -1)
    dispatch_once(&qword_1EE504138, &unk_1E3FB42E8);
  return (id)qword_1EE504130;
}

void sub_19E2D8714()
{
  uint64_t v0;
  void *v1;
  id v2;

  IMSMSDirectoryURL();
  v2 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "URLByAppendingPathComponent:isDirectory:", CFSTR("PluginMetaDataCache"), 1);
  v0 = objc_claimAutoreleasedReturnValue();
  v1 = (void *)qword_1EE504130;
  qword_1EE504130 = v0;

}

id IMSafeTemporaryDirectory()
{
  if (qword_1ECFC71B0 != -1)
    dispatch_once(&qword_1ECFC71B0, &unk_1E3FB1748);
  return (id)qword_1ECFC71B8;
}

void sub_19E2D87A0()
{
  void *v0;
  void *v1;
  uint64_t v2;
  void *v3;
  NSObject *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v0 = (void *)MEMORY[0x1E0C99E98];
  NSTemporaryDirectory();
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "fileURLWithPath:", v1);
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = (void *)qword_1ECFC71B8;
  qword_1ECFC71B8 = v2;

  if (IMOSLoggingEnabled())
  {
    OSLogHandleForIMFoundationCategory();
    v4 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      v5 = 138412290;
      v6 = qword_1ECFC71B8;
      _os_log_impl(&dword_19E239000, v4, OS_LOG_TYPE_INFO, "Safe temporary directory is %@", (uint8_t *)&v5, 0xCu);
    }

  }
}

void sub_19E2D8E64(uint64_t a1, void *a2)
{
  id v3;

  v3 = a2;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    objc_msgSend(*(id *)(a1 + 32), "addObject:", v3);

}

void *IMParserResultsForLogging(void *a1)
{
  id v2;
  id v3;
  uint64_t v4;
  objc_class *Superclass;
  IMP MethodImplementation;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  unint64_t v13;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _BYTE v19[128];
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v2 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  v3 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  v4 = objc_opt_class();
  if (v4)
  {
    Superclass = (objc_class *)v4;
    do
    {
      MethodImplementation = class_getMethodImplementation(Superclass, sel_resultsForLogging);
      if (!MethodImplementation)
        break;
      v7 = ((uint64_t (*)(void *, char *))MethodImplementation)(a1, sel_resultsForLogging);
      if (!v7)
        break;
      objc_msgSend(v2, "addObjectsFromArray:", v7);
      Superclass = class_getSuperclass(Superclass);
    }
    while (Superclass);
  }
  objc_msgSend(v2, "sortUsingSelector:", sel_compare_);
  v17 = 0u;
  v18 = 0u;
  v15 = 0u;
  v16 = 0u;
  v8 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
  if (v8)
  {
    v9 = *(_QWORD *)v16;
    do
    {
      v10 = 0;
      do
      {
        if (*(_QWORD *)v16 != v9)
          objc_enumerationMutation(v2);
        v11 = objc_msgSend(a1, "valueForKey:", *(_QWORD *)(*((_QWORD *)&v15 + 1) + 8 * v10));
        if (!v11)
          v11 = objc_msgSend(MEMORY[0x1E0C99E38], "null");
        objc_msgSend(v3, "addObject:", v11);
        ++v10;
      }
      while (v8 != v10);
      v8 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
    }
    while (v8);
  }
  v12 = (void *)objc_msgSend(MEMORY[0x1E0CB37A0], "string");
  if (objc_msgSend(v2, "count"))
  {
    v13 = 0;
    do
    {
      objc_msgSend(v12, "appendFormat:", CFSTR("    %@: %@\n"), objc_msgSend(v2, "objectAtIndex:", v13), objc_msgSend(v3, "objectAtIndex:", v13));
      ++v13;
    }
    while (v13 < objc_msgSend(v2, "count"));
  }

  return v12;
}

IMXMLParser *sub_19E2D91A8()
{
  IMXMLParser *result;

  result = objc_alloc_init(IMXMLParser);
  qword_1ECFC75B0 = (uint64_t)result;
  return result;
}

uint64_t sub_19E2D9704(uint64_t a1, uint64_t a2)
{
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 16), "reset");
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) = objc_msgSend(objc_alloc(MEMORY[0x1E0CB3B28]), "initWithData:", a2);
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 32) = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 24) = 0;
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "setDelegate:");
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "parse");
}

void sub_19E2D977C(uint64_t a1)
{
  uint64_t v2;
  void *v3;

  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 32), "makeObjectsPerformSelector:", sel_release);

  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 32) = 0;
  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(void **)(v2 + 24);
  if (v3)
  {

    *(_QWORD *)(*(_QWORD *)(a1 + 32) + 24) = 0;
    v2 = *(_QWORD *)(a1 + 32);
  }
  objc_msgSend(*(id *)(v2 + 8), "setDelegate:", 0);

  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) = 0;
}

Class sub_19E2D9BA4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  objc_class *Superclass;
  IMP MethodImplementation;
  NSString *v8;
  Class v9;

  v4 = objc_opt_class();
  v5 = objc_opt_class();
  if (v5 == v4)
    return 0;
  Superclass = (objc_class *)v5;
  while (1)
  {
    MethodImplementation = class_getMethodImplementation(Superclass, sel_name);
    v8 = (NSString *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("%@_%@_Frame"), ((uint64_t (*)(_QWORD, char *))MethodImplementation)(*(_QWORD *)(a1 + 32), sel_name), a2);
    v9 = NSClassFromString(v8);

    if (v9)
      break;
    Superclass = class_getSuperclass(Superclass);
    if (Superclass == (objc_class *)v4)
      return 0;
  }
  return v9;
}

void sub_19E2DA068(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x19E2D9FECLL);
  }
  _Unwind_Resume(a1);
}

void sub_19E2DA674(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  uint64_t v8;
  id v9;
  void *v10;
  NSObject *v11;
  int v12;
  uint64_t v13;
  _DWORD v14[2];
  __int16 v15;
  uint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  v7 = v6;
  if (v5 && !v6)
  {
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 1;
    v8 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
    v9 = v5;
    v10 = *(void **)(v8 + 40);
    *(_QWORD *)(v8 + 40) = v9;
LABEL_7:

    goto LABEL_8;
  }
  v10 = v6;
  if (!v6)
    v10 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB35C8]), "initWithDomain:code:userInfo:", CFSTR("__kIMPreviewGenerationErrorDomain"), 1, 0);
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40), v10);
  if (!v7)
    goto LABEL_7;
LABEL_8:
  if (IMOSLoggingEnabled())
  {
    OSLogHandleForIMFoundationCategory();
    v11 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      v12 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24);
      v13 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40);
      v14[0] = 67109378;
      v14[1] = v12;
      v15 = 2112;
      v16 = v13;
      _os_log_impl(&dword_19E239000, v11, OS_LOG_TYPE_INFO, "Blastdoor validation completed, result: %d, err: %@", (uint8_t *)v14, 0x12u);
    }

  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));

}

void sub_19E2DA818(uint64_t a1)
{
  sub_19E2DA86C();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("WKUIBlastDoorDataSource");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    qword_1EE504148 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    sub_19E36DBE4();
    sub_19E2DA86C();
  }
}

void sub_19E2DA86C()
{
  void *v0;

  if (!qword_1EE504150)
    qword_1EE504150 = _sl_dlopen();
  if (!qword_1EE504150)
  {
    v0 = (void *)abort_report_np();
    free(v0);
  }
}

Class sub_19E2DA918(uint64_t a1)
{
  Class result;
  void *v3;
  SEL v4;
  id v5;
  id v6;
  BOOL v7;
  BOOL v8;
  BOOL v9;

  sub_19E2DA86C();
  result = objc_getClass("WKUIConfigurationPreviewGenerator");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    qword_1EE504158 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    v3 = (void *)sub_19E36DC08();
    return (Class)+[IMSpamFilterHelper shouldDowngradeToRecipient:fromSender:ifCapableOfSMS:withConversationDowngradeState:andConversationHistoryState:](v3, v4, v5, v6, v7, v8, v9);
  }
  return result;
}

void sub_19E2DACA4(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x19E2DAC60);
  }
  _Unwind_Resume(a1);
}

void sub_19E2DD068(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  objc_msgSend(v3, "allKeys", 0);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
  if (v5)
  {
    v6 = v5;
    v7 = *(_QWORD *)v12;
    do
    {
      v8 = 0;
      do
      {
        if (*(_QWORD *)v12 != v7)
          objc_enumerationMutation(v4);
        objc_msgSend(v3, "objectForKey:", *(_QWORD *)(*((_QWORD *)&v11 + 1) + 8 * v8));
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        v10 = objc_msgSend(v9, "integerValue");

        if (v10 != 1)
          (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
        ++v8;
      }
      while (v6 != v8);
      v6 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    }
    while (v6);
  }

  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t sub_19E2DD54C(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "_stripFZIDPrefix");
}

void sub_19E2DD810()
{
  NSObject *v0;
  const __CFString *v1;
  int v2;
  const __CFString *v3;
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  off_1EE504168 = (uint64_t (*)(_QWORD))MEMORY[0x1A1AE7D58]("IMDCNRecordIDForAliases", CFSTR("IMDPersistence"));
  if (IMOSLoggingEnabled())
  {
    OSLogHandleForIMFoundationCategory();
    v0 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v0, OS_LOG_TYPE_INFO))
    {
      if (off_1EE504168)
        v1 = CFSTR("YES");
      else
        v1 = CFSTR("NO");
      v2 = 138412290;
      v3 = v1;
      _os_log_impl(&dword_19E239000, v0, OS_LOG_TYPE_INFO, "Linked linkedIMDCNRecordIDForAliases ok: %@", (uint8_t *)&v2, 0xCu);
    }

  }
}

void sub_19E2DDAA0(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  int v4;
  void *v5;
  __int16 v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  if (IMOSLoggingEnabled())
  {
    OSLogHandleForIMFoundationCategory();
    v2 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      v3 = *(_QWORD *)(a1 + 32);
      v4 = 138412546;
      v5 = &unk_1E3FFE5D0;
      v6 = 2112;
      v7 = v3;
      _os_log_impl(&dword_19E239000, v2, OS_LOG_TYPE_INFO, "apply-international-spam-filter: Client (%@) Server (%@)", (uint8_t *)&v4, 0x16u);
    }

  }
}

void sub_19E2DDBA0(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  int v4;
  void *v5;
  __int16 v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  if (IMOSLoggingEnabled())
  {
    OSLogHandleForIMFoundationCategory();
    v2 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      v3 = *(_QWORD *)(a1 + 32);
      v4 = 138412546;
      v5 = &unk_1E3FFE5D0;
      v6 = 2112;
      v7 = v3;
      _os_log_impl(&dword_19E239000, v2, OS_LOG_TYPE_INFO, "apply-international-spam-filter: Client (%@) Server (%@)", (uint8_t *)&v4, 0x16u);
    }

  }
}

void sub_19E2DDDE8()
{
  NSObject *v0;
  uint8_t v1[16];

  if (IMOSLoggingEnabled())
  {
    OSLogHandleForIMFoundationCategory();
    v0 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v0, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)v1 = 0;
      _os_log_impl(&dword_19E239000, v0, OS_LOG_TYPE_INFO, "chinese-spam-filter enabled using Defaults", v1, 2u);
    }

  }
}

void sub_19E2DDE7C(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  int v4;
  void *v5;
  __int16 v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  if (IMOSLoggingEnabled())
  {
    OSLogHandleForIMFoundationCategory();
    v2 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      v3 = *(_QWORD *)(a1 + 32);
      v4 = 138412546;
      v5 = &unk_1E3FFE5D0;
      v6 = 2112;
      v7 = v3;
      _os_log_impl(&dword_19E239000, v2, OS_LOG_TYPE_INFO, "apply-chinese-spam-filter: Client (%@) Server (%@)", (uint8_t *)&v4, 0x16u);
    }

  }
}

uint64_t IMSharedUtilitiesProtoCloudKitEncryptedMessageUpdateT1ReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  BOOL v16;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t result;
  void *String;
  id v25;
  uint64_t v26;
  void *v27;
  void *v28;
  void *Data;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (2)
    {
      if (!*(_BYTE *)(a2 + *v5))
      {
        v8 = 0;
        v9 = 0;
        v10 = 0;
        while (1)
        {
          v11 = *v3;
          v12 = *(_QWORD *)(a2 + v11);
          if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
            break;
          v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
          *(_QWORD *)(a2 + v11) = v12 + 1;
          v10 |= (unint64_t)(v13 & 0x7F) << v8;
          if ((v13 & 0x80) == 0)
            goto LABEL_12;
          v8 += 7;
          v14 = v9++ >= 9;
          if (v14)
          {
            v10 = 0;
            v15 = *(unsigned __int8 *)(a2 + *v5);
            goto LABEL_14;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
        v15 = *(unsigned __int8 *)(a2 + *v5);
        if (*(_BYTE *)(a2 + *v5))
          v10 = 0;
LABEL_14:
        if (v15)
          v16 = 1;
        else
          v16 = (v10 & 7) == 4;
        if (!v16)
        {
          switch((v10 >> 3))
          {
            case 1u:
              v17 = 0;
              v18 = 0;
              v19 = 0;
              *(_BYTE *)(a1 + 44) |= 1u;
              break;
            case 2u:
              String = (void *)PBReaderReadString();

              v25 = String;
              v26 = 8;
              goto LABEL_32;
            case 3u:
              v27 = (void *)PBReaderReadString();

              v25 = v27;
              v26 = 24;
              goto LABEL_32;
            case 4u:
              v28 = (void *)PBReaderReadString();

              v25 = v28;
              v26 = 32;
              goto LABEL_32;
            case 5u:
              Data = (void *)PBReaderReadData();

              v25 = Data;
              v26 = 16;
LABEL_32:
              *(_QWORD *)(a1 + v26) = v25;
              goto LABEL_37;
            default:
              result = PBReaderSkipValueWithTag();
              if (!(_DWORD)result)
                return result;
LABEL_37:
              if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
                return *(_BYTE *)(a2 + *v5) == 0;
              continue;
          }
          while (1)
          {
            v20 = *v3;
            v21 = *(_QWORD *)(a2 + v20);
            if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
              break;
            v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
            *(_QWORD *)(a2 + v20) = v21 + 1;
            v19 |= (unint64_t)(v22 & 0x7F) << v17;
            if ((v22 & 0x80) == 0)
              goto LABEL_34;
            v17 += 7;
            v14 = v18++ >= 9;
            if (v14)
            {
              LODWORD(v19) = 0;
              goto LABEL_36;
            }
          }
          *(_BYTE *)(a2 + *v5) = 1;
LABEL_34:
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v19) = 0;
LABEL_36:
          *(_DWORD *)(a1 + 40) = v19;
          goto LABEL_37;
        }
      }
      break;
    }
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t sub_19E2DF308(void *a1, uint64_t a2, unint64_t a3, unint64_t a4, int a5)
{
  unint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  void *v13;
  _BOOL4 v14;
  void *v15;
  void *v16;
  void *v17;
  unint64_t v18;
  unint64_t v19;
  _QWORD v21[5];
  char v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t (*v26)(uint64_t, uint64_t);
  void (*v27)(uint64_t);
  id v28;

  if (a3 >= objc_msgSend(a1, "length"))
  {
    objc_msgSend(a1, "length");
    return 0;
  }
  else
  {
    v9 = objc_msgSend(a1, "length");
    v10 = 0;
    if (objc_msgSend(a1, "length") && a3 + a4 <= v9)
    {
      v23 = 0;
      v24 = &v23;
      v25 = 0x3032000000;
      v26 = sub_19E24766C;
      v27 = sub_19E24751C;
      v28 = 0;
      objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
      v28 = (id)objc_claimAutoreleasedReturnValue();
      v21[0] = MEMORY[0x1E0C809B0];
      v21[1] = 3221225472;
      v21[2] = sub_19E2DF528;
      v21[3] = &unk_1E3FB81C0;
      v21[4] = &v23;
      v22 = a5;
      objc_msgSend(a1, "enumerateAttribute:inRange:options:usingBlock:", CFSTR("__kIMTextEffectAttributeName"), a3, a4, 0, v21);
      objc_msgSend((id)v24[5], "allKeys");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      v12 = objc_msgSend(v11, "count");

      if (a5)
      {
        objc_msgSend((id)v24[5], "allKeys");
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        v14 = objc_msgSend(v13, "count") != 0;

      }
      else
      {
        v14 = 0;
      }
      if (v12 != 1 && !v14)
        goto LABEL_11;
      objc_msgSend((id)v24[5], "allKeys");
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v15, "firstObject");
      v16 = (void *)objc_claimAutoreleasedReturnValue();

      v10 = objc_msgSend(v16, "integerValue");
      objc_msgSend((id)v24[5], "objectForKeyedSubscript:", v16);
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v17, "rangeValue");
      v19 = v18;

      if (v19 < a4)
LABEL_11:
        v10 = 0;
      _Block_object_dispose(&v23, 8);

    }
  }
  return v10;
}

void sub_19E2DF4FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19E2DF528(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, _BYTE *a5)
{
  void *v9;
  id v10;

  v10 = a2;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    objc_msgSend(MEMORY[0x1E0CB3B18], "valueWithRange:", a3, a4);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), "setObject:forKeyedSubscript:", v9, v10);
    if (*(_BYTE *)(a1 + 40))
      *a5 = 1;

  }
}

uint64_t sub_19E2DF5D0(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[5];
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  char v9;

  v6 = 0;
  v7 = &v6;
  v8 = 0x2020000000;
  v9 = 0;
  v2 = objc_msgSend(a1, "length");
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 3221225472;
  v5[2] = sub_19E2DF694;
  v5[3] = &unk_1E3FB5448;
  v5[4] = &v6;
  objc_msgSend(a1, "enumerateAttribute:inRange:options:usingBlock:", CFSTR("__kIMTextEffectAttributeName"), 0, v2, 0, v5);
  v3 = *((unsigned __int8 *)v7 + 24);
  _Block_object_dispose(&v6, 8);
  return v3;
}

void sub_19E2DF67C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_19E2DF694(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, _BYTE *a5)
{
  if (a2)
  {
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = 1;
    *a5 = 1;
  }
  return result;
}

id IMBiomeQueue()
{
  if (qword_1EE5039E8 != -1)
    dispatch_once(&qword_1EE5039E8, &unk_1E3FB3A48);
  return (id)qword_1EE5039E0;
}

void sub_19E2DF6F0()
{
  dispatch_queue_t v0;
  void *v1;
  NSObject *v2;

  dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  v2 = objc_claimAutoreleasedReturnValue();
  v0 = dispatch_queue_create("com.apple.Messages.Biome", v2);
  v1 = (void *)qword_1EE5039E0;
  qword_1EE5039E0 = (uint64_t)v0;

}

uint64_t im_messageCheckpointingEnabled()
{
  void *v0;
  void *v1;
  char v2;
  void *v4;
  uint64_t v5;

  objc_msgSend(MEMORY[0x1E0D34E78], "sharedInstanceForBagType:", 1);
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "objectForKey:", CFSTR("disable-message-checkpointing"));
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = objc_msgSend(v1, "BOOLValue");

  if ((v2 & 1) != 0)
    return 0;
  objc_msgSend(MEMORY[0x1E0D36A50], "sharedInstance");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v4, "isInternalInstall");

  return v5;
}

id im_checkpointIDSService()
{
  if (qword_1EE5037F8 != -1)
    dispatch_once(&qword_1EE5037F8, &unk_1E3FB3A68);
  return (id)qword_1EE5037F0;
}

void sub_19E2E064C()
{
  uint64_t v0;
  void *v1;

  v0 = objc_msgSend(objc_alloc(MEMORY[0x1E0D34358]), "initWithService:", CFSTR("com.apple.madrid"));
  v1 = (void *)qword_1EE5037F0;
  qword_1EE5037F0 = v0;

}

void im_sendMessageCheckpointIfNecessary(void *a1, uint64_t a2, void *a3, int a4)
{
  id v7;
  id v8;
  NSObject *v9;
  const __CFString *v10;
  id v11;
  void *v12;
  void *v13;
  _BYTE v14[22];
  __int16 v15;
  const __CFString *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v7 = a1;
  v8 = a3;
  if (IMOSLoggingEnabled())
  {
    OSLogHandleForIMFoundationCategory();
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      v10 = CFSTR("NO");
      *(_DWORD *)v14 = 134218498;
      *(_QWORD *)&v14[4] = a2;
      *(_WORD *)&v14[12] = 2112;
      if (a4)
        v10 = CFSTR("YES");
      *(_QWORD *)&v14[14] = v8;
      v15 = 2112;
      v16 = v10;
      _os_log_impl(&dword_19E239000, v9, OS_LOG_TYPE_INFO, "At checkpoint %ld for guid %@. Will send? %@", v14, 0x20u);
    }

  }
  if (a4 && im_messageCheckpointingEnabled())
  {
    v11 = objc_alloc_init(MEMORY[0x1E0C99E08]);
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", a2);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "setObject:forKey:", v12, CFSTR("fR"));

    IDSGetUUIDData();
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    if (v13)
      objc_msgSend(v11, "setObject:forKey:", v13, CFSTR("fU"));
    objc_msgSend(v7, "sendServerMessage:command:fromAccount:", v11, &unk_1E3FFE5E8, 0, *(_OWORD *)v14);

  }
}

uint64_t im_sendCertifiedDeliveryReceiptIfPossible(void *a1, void *a2, void *a3, uint64_t a4, void *a5, void *a6)
{
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  void *v16;
  int v17;
  void *v18;
  NSObject *v19;
  uint64_t v20;
  NSObject *v21;
  NSObject *v22;
  int v24;
  id v25;
  __int16 v26;
  uint64_t v27;
  __int16 v28;
  id v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v11 = a1;
  v12 = a2;
  v13 = a3;
  v14 = a5;
  v15 = a6;
  +[IMFeatureFlags sharedFeatureFlags](IMFeatureFlags, "sharedFeatureFlags");
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  v17 = objc_msgSend(v16, "certifiedDeliveryEnabled");

  if (!v17)
  {
LABEL_23:
    v20 = 0;
    goto LABEL_24;
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    if (IMOSLoggingEnabled())
    {
      OSLogHandleForIMFoundationCategory();
      v21 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
      {
        v24 = 138412290;
        v25 = v12;
        _os_log_impl(&dword_19E239000, v21, OS_LOG_TYPE_INFO, "IMMessageContext %@ is not of class IDSMessageContext", (uint8_t *)&v24, 0xCu);
      }

    }
    goto LABEL_19;
  }
  objc_msgSend(v12, "certifiedDeliveryContext");
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v18)
  {
LABEL_19:
    if (IMOSLoggingEnabled())
    {
      OSLogHandleForIMFoundationCategory();
      v22 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
      {
        v24 = 138412802;
        v25 = v13;
        v26 = 2112;
        v27 = 0;
        v28 = 2112;
        v29 = v11;
        _os_log_impl(&dword_19E239000, v22, OS_LOG_TYPE_INFO, "Not sending certified delivery receipt for guid %@ certifiedDeliveryContext: %@ handler service: %@", (uint8_t *)&v24, 0x20u);
      }

    }
    goto LABEL_23;
  }
  if (IMOSLoggingEnabled())
  {
    OSLogHandleForIMFoundationCategory();
    v19 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
    {
      v24 = 138412290;
      v25 = v13;
      _os_log_impl(&dword_19E239000, v19, OS_LOG_TYPE_INFO, "Sending certified delivery receipt for guid %@", (uint8_t *)&v24, 0xCu);
    }

  }
  objc_msgSend(v18, "setGenerateDeliveryReceipt:", a4);
  if (v14 && (objc_opt_respondsToSelector() & 1) != 0)
    objc_msgSend(v18, "setFailureReason:", v14);
  if (v15 && (objc_opt_respondsToSelector() & 1) != 0)
    objc_msgSend(v18, "setFailureReasonMessage:", v15);
  objc_msgSend(v11, "sendCertifiedDeliveryReceipt:", v18);

  v20 = 1;
LABEL_24:

  return v20;
}

void sub_19E2E13F4(uint64_t a1, void *a2, void *a3)
{
  id v6;
  id v7;
  void *v8;
  NSObject *v9;
  const __CFString *v10;
  int v11;
  const __CFString *v12;
  __int16 v13;
  void *v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v6 = a2;
  v7 = a3;
  v8 = v7;
  if (!v6 || v7)
  {
    if (IMOSLoggingEnabled())
    {
      OSLogHandleForIMFoundationCategory();
      v9 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
      {
        v10 = CFSTR("NO");
        if (!v8)
          v10 = CFSTR("YES");
        v11 = 138412546;
        v12 = v10;
        v13 = 2112;
        v14 = v8;
        _os_log_impl(&dword_19E239000, v9, OS_LOG_TYPE_INFO, "BlastDoor processing for audioPreviews was successful (%@) with error (%@)", (uint8_t *)&v11, 0x16u);
      }
      goto LABEL_12;
    }
  }
  else
  {
    objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), a2);
    if (IMOSLoggingEnabled())
    {
      OSLogHandleForIMFoundationCategory();
      v9 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
      {
        v11 = 138412290;
        v12 = CFSTR("YES");
        _os_log_impl(&dword_19E239000, v9, OS_LOG_TYPE_INFO, "BlastDoor processing for audioPreviews was successful (%@)", (uint8_t *)&v11, 0xCu);
      }
LABEL_12:

    }
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));

}

uint64_t IMMessageSoundPlayReceivedAckSound(char *a1)
{
  id v2;
  void *v3;
  void *v4;
  void *v5;
  NSObject *v6;
  uint64_t result;
  NSObject *v8;
  int v9;
  void *v10;
  __int16 v11;
  void *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  if ((unint64_t)(a1 - 2000) <= 5 && (v2 = **((id **)&unk_1E3FB81F8 + (_QWORD)(a1 - 2000))) != 0)
  {
    v3 = v2;
    v4 = (void *)objc_msgSend(objc_alloc((Class)MEMORY[0x1A1AE7D4C](CFSTR("TLAlertConfiguration"), CFSTR("ToneLibrary"))), "initWithType:", 2);
    objc_msgSend(v4, "setTopic:", v3);
    objc_msgSend((id)MEMORY[0x1A1AE7D4C](CFSTR("TLAlert"), CFSTR("ToneLibrary")), "alertWithConfiguration:", v4);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    if (IMOSLoggingEnabled())
    {
      OSLogHandleForIMFoundationCategory();
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
      {
        v9 = 138412546;
        v10 = v3;
        v11 = 2112;
        v12 = v5;
        _os_log_impl(&dword_19E239000, v6, OS_LOG_TYPE_INFO, "Alert plays with topic: [%@] and TLAlert: [%@]", (uint8_t *)&v9, 0x16u);
      }

    }
    objc_msgSend(v5, "play");

    return 1;
  }
  else
  {
    result = IMOSLoggingEnabled();
    if ((_DWORD)result)
    {
      OSLogHandleForIMFoundationCategory();
      v8 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        v9 = 134217984;
        v10 = a1;
        _os_log_impl(&dword_19E239000, v8, OS_LOG_TYPE_INFO, "No sound available for message type: %ld", (uint8_t *)&v9, 0xCu);
      }

      return 0;
    }
  }
  return result;
}

void IMMessageSoundStartSuppressingSendSoundForMessageGUID(void *a1)
{
  void *v1;
  void *v2;
  id v3;

  v3 = a1;
  IMGetCachedDomainValueForKey();
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v1)
  {
    objc_msgSend(MEMORY[0x1E0C99D20], "array");
    v1 = (void *)objc_claimAutoreleasedReturnValue();
  }
  objc_msgSend(v1, "arrayByAddingObject:", v3);
  v2 = (void *)objc_claimAutoreleasedReturnValue();

  IMSetDomainValueForKey();
}

id IMCreateDictionaryFromCSSString(void *a1, int a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  _BYTE *v7;
  void *v8;
  void *v9;
  unsigned int v10;
  _BYTE *v11;
  int v12;
  unint64_t v13;
  _BYTE *v14;
  unsigned int v15;
  BOOL v16;
  uint64_t v17;
  unint64_t v20;
  unint64_t v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v25;
  void *v27;

  if (!a1)
    return 0;
  v3 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  v4 = objc_msgSend(a1, "lengthOfBytesUsingEncoding:", 4);
  if (!v4 || (v5 = v4 + 1, (v6 = malloc_type_malloc(v4 + 1, 0xD1D05091uLL)) == 0))
  {

    return 0;
  }
  v7 = v6;
  if (!objc_msgSend(a1, "getCString:maxLength:encoding:", v6, v5, 4))
  {

    free(v7);
    return 0;
  }
  v8 = 0;
  v27 = v7;
  while (2)
  {
    v9 = 0;
    while (1)
    {
      v10 = *v7;
      if (!*v7)
        break;
      v11 = v7;
      if (v10 > 0x39)
      {
        if (v10 == 58)
        {

          goto LABEL_37;
        }
        v11 = v7;
        if (v10 < 0x3C)
          break;
      }
      do
        v12 = *++v11;
      while (byte_19E3815F4[v12] < 0);
      v13 = (unint64_t)(v11 - 1);
      v14 = v7;
      if (v7 < v11)
      {
        while (1)
        {
          v15 = *v7;
          v16 = v15 > 0x27;
          v17 = (1 << v15) & 0x8500002600;
          if (v16 || v17 == 0)
            break;
          v14 = v7 + 1;
          if ((unint64_t)v7++ >= v13)
            goto LABEL_19;
        }
        v14 = v7;
      }
LABEL_19:
      v20 = (unint64_t)v11;
      if (v13 > (unint64_t)v14)
      {
        v21 = (unint64_t)v11;
        v20 = (unint64_t)v11;
        while (1)
        {
          v22 = *(unsigned __int8 *)--v20;
          v23 = (1 << v22) & 0x8500002600;
          if (v22 > 0x27 || v23 == 0)
            break;
          v21 = v20;
          if (v20 <= (unint64_t)(v14 + 1))
            goto LABEL_26;
        }
        v20 = v21;
      }
LABEL_26:

      v9 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithBytes:length:encoding:", v14, v20 - (_QWORD)v14, 4);
      v7 = v11;
    }
    if (v8 && v9)
    {
      v25 = (uint64_t)v8;
      if (a2)
        v25 = objc_msgSend(v8, "lowercaseString", v27);
      objc_msgSend(v3, "setObject:forKey:", v9, v25, v27);
    }

    if (*v7)
    {
      v9 = 0;
LABEL_37:
      ++v7;
      v8 = v9;
      continue;
    }
    break;
  }
  free(v27);
  return v3;
}

BOOL IMStickerEffectTypeShouldAvoidEffectView(uint64_t a1)
{
  return (unint64_t)(a1 - 5) < 0xFFFFFFFFFFFFFFFCLL;
}

id IMDefaultServiceHybridCapabilities()
{
  _QWORD v1[5];
  _QWORD v2[6];

  v2[5] = *MEMORY[0x1E0C80C00];
  v1[0] = IMServiceCapabilityInlineReplies;
  v1[1] = IMServiceCapabilityEditMessage;
  v2[0] = MEMORY[0x1E0C9AAB0];
  v2[1] = MEMORY[0x1E0C9AAB0];
  v1[2] = IMServiceCapabilityMentions;
  v1[3] = IMServiceCapabilityNicknames;
  v2[2] = MEMORY[0x1E0C9AAB0];
  v2[3] = MEMORY[0x1E0C9AAB0];
  v1[4] = IMServiceCapabilityTextEffects;
  v2[4] = MEMORY[0x1E0C9AAB0];
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v2, v1, 5);
  return (id)objc_claimAutoreleasedReturnValue();
}

id IMDefaultServiceCapabilities()
{
  uint64_t v1;
  _QWORD v2[2];

  v2[1] = *MEMORY[0x1E0C80C00];
  v1 = IMServiceCapabilityAudioMessageForwarding;
  v2[0] = MEMORY[0x1E0C9AAB0];
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v2, &v1, 1);
  return (id)objc_claimAutoreleasedReturnValue();
}

void sub_19E2E2A2C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  if (IMOSLoggingEnabled())
  {
    v4 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      v5 = 138412290;
      v6 = a3;
      _os_log_impl(&dword_19E239000, v4, OS_LOG_TYPE_INFO, "Received notification to display keep messages setting has reset: %@", (uint8_t *)&v5, 0xCu);
    }
  }
  dword_1ECFC6650 = -1;
}

uint64_t IMClearDisplayKeepMessagesSetting()
{
  dword_1ECFC6650 = 0;
  return IMSetDomainValueForKey();
}

IMAttributedStringParser *sub_19E2E2B58()
{
  IMAttributedStringParser *result;

  result = objc_alloc_init(IMAttributedStringParser);
  qword_1ECFC75B8 = (uint64_t)result;
  return result;
}

IMMessageNotificationController *sub_19E2E2E54()
{
  IMMessageNotificationController *result;

  result = objc_alloc_init(IMMessageNotificationController);
  qword_1ECFC75C0 = (uint64_t)result;
  return result;
}

void sub_19E2E3700(_Unwind_Exception *a1, int a2)
{
  uint64_t v2;

  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    if (!v2)
      JUMPOUT(0x19E2E360CLL);
    JUMPOUT(0x19E2E365CLL);
  }
  _Unwind_Resume(a1);
}

void sub_19E2E3930(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *v6;
  int v7;
  uint64_t v8;
  __int16 v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  if (IMOSLoggingEnabled())
  {
    v6 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      v7 = 134218242;
      v8 = a2;
      v9 = 2112;
      v10 = a3;
      _os_log_impl(&dword_19E239000, v6, OS_LOG_TYPE_INFO, "_playbackDidEnd: completionType:%ld, error:%@", (uint8_t *)&v7, 0x16u);
    }
  }

}

void sub_19E2E4634()
{
  dispatch_queue_t v0;
  void *v1;

  v0 = dispatch_queue_create("com.apple.IMSharedUtilities.IMSyndicationUtilities.AttributionFetchQueue", 0);
  v1 = (void *)qword_1EE5041B0;
  qword_1EE5041B0 = (uint64_t)v0;

}

void sub_19E2E4914(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  id v5;
  id v6;
  _QWORD v7[4];
  id v8;
  id v9;

  v2 = *(void **)(a1 + 32);
  v3 = (void *)objc_msgSend(*(id *)(a1 + 40), "copy");
  objc_msgSend(v2, "fetchAttributionsForHighlight:", v3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = sub_19E2E49C8;
  v7[3] = &unk_1E3FB73D0;
  v5 = *(id *)(a1 + 48);
  v8 = v4;
  v9 = v5;
  v6 = v4;
  dispatch_async(MEMORY[0x1E0C80D38], v7);

}

uint64_t sub_19E2E49C8(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32));
}

void sub_19E2E4F78(uint64_t a1, void *a2, void *a3, void *a4, void *a5)
{
  id v9;
  id v10;
  id v11;
  id v12;
  NSObject *v13;
  NSObject *v14;
  int v15;
  id v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v9 = a2;
  v10 = a3;
  v11 = a4;
  v12 = a5;
  if (IMOSLoggingEnabled())
  {
    OSLogHandleForIMFoundationCategory();
    v13 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
    {
      v15 = 138412290;
      v16 = v10;
      _os_log_impl(&dword_19E239000, v13, OS_LOG_TYPE_INFO, "Returned results from CloudKit: %@", (uint8_t *)&v15, 0xCu);
    }

  }
  if (v12)
  {
    if (IMOSLoggingEnabled())
    {
      OSLogHandleForIMFoundationCategory();
      v14 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
      {
        v15 = 138412290;
        v16 = v12;
        _os_log_impl(&dword_19E239000, v14, OS_LOG_TYPE_INFO, " Failed to get bundleIDs from CloudKit: %@", (uint8_t *)&v15, 0xCu);
      }

    }
  }
  else
  {
    objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), a3);
  }

}

uint64_t IMSharedUtilitiesProtoCloudKitEncryptedGroupActionReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t result;
  char v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  void *String;
  id v31;
  uint64_t v32;
  void *Data;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      switch((v10 >> 3))
      {
        case 1u:
          v17 = 0;
          v18 = 0;
          v19 = 0;
          *(_BYTE *)(a1 + 36) |= 2u;
          while (1)
          {
            v20 = *v3;
            v21 = *(_QWORD *)(a2 + v20);
            if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
              break;
            v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
            *(_QWORD *)(a2 + v20) = v21 + 1;
            v19 |= (unint64_t)(v22 & 0x7F) << v17;
            if ((v22 & 0x80) == 0)
              goto LABEL_39;
            v17 += 7;
            v14 = v18++ >= 9;
            if (v14)
            {
              LODWORD(v19) = 0;
              goto LABEL_41;
            }
          }
          *(_BYTE *)(a2 + *v5) = 1;
LABEL_39:
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v19) = 0;
LABEL_41:
          *(_DWORD *)(a1 + 32) = v19;
          continue;
        case 2u:
          v24 = 0;
          v25 = 0;
          v26 = 0;
          *(_BYTE *)(a1 + 36) |= 1u;
          break;
        case 3u:
          String = (void *)PBReaderReadString();

          v31 = String;
          v32 = 16;
          goto LABEL_37;
        case 4u:
          Data = (void *)PBReaderReadData();

          v31 = Data;
          v32 = 24;
LABEL_37:
          *(_QWORD *)(a1 + v32) = v31;
          continue;
        default:
          result = PBReaderSkipValueWithTag();
          if (!(_DWORD)result)
            return result;
          continue;
      }
      while (1)
      {
        v27 = *v3;
        v28 = *(_QWORD *)(a2 + v27);
        if (v28 == -1 || v28 >= *(_QWORD *)(a2 + *v4))
          break;
        v29 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v28);
        *(_QWORD *)(a2 + v27) = v28 + 1;
        v26 |= (unint64_t)(v29 & 0x7F) << v24;
        if ((v29 & 0x80) == 0)
          goto LABEL_43;
        v24 += 7;
        v14 = v25++ >= 9;
        if (v14)
        {
          v26 = 0;
          goto LABEL_45;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_43:
      if (*(_BYTE *)(a2 + *v5))
        v26 = 0;
LABEL_45:
      *(_QWORD *)(a1 + 8) = v26;
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

id IMVCardDataFromLocation(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  id v12;
  NSObject *v13;
  NSObject *v14;
  NSObject *v15;
  id v17;
  void *v18;
  uint8_t buf[4];
  id v20;
  __int16 v21;
  void *v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    IMCurrentLocationURLFromLocation(v1);
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    if (!v3)
    {
      v11 = 0;
LABEL_24:

      goto LABEL_25;
    }
    objc_msgSend(MEMORY[0x1E0CB34D0], "bundleForClass:", objc_opt_class());
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "localizedStringForKey:value:table:", CFSTR("Current Location"), &stru_1E3FBBA48, CFSTR("IMCoreLocalizable"));
    v5 = (void *)objc_claimAutoreleasedReturnValue();

    v6 = MEMORY[0x1A1AE7D4C](CFSTR("CNContactVCardSerialization"), CFSTR("Contacts"));
    if (v6)
    {
      v7 = (void *)v6;
      +[IMContactStore createMutableContactWithMapURL:andLocalizedLocationString:](IMContactStore, "createMutableContactWithMapURL:andLocalizedLocationString:", v3, v5);
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      v9 = (void *)objc_msgSend(v8, "copy");

      if (v9)
      {
        v18 = v9;
        objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v18, 1);
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        v17 = 0;
        objc_msgSend(v7, "dataWithContacts:error:", v10, &v17);
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        v12 = v17;

        if (!v12)
        {

          goto LABEL_23;
        }
        if (IMOSLoggingEnabled())
        {
          OSLogHandleForIMFoundationCategory();
          v13 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 138412290;
            v20 = v12;
            _os_log_impl(&dword_19E239000, v13, OS_LOG_TYPE_INFO, "IMFileUtilities - Unable to extract vCardData from Contact. Error %@", buf, 0xCu);
          }

        }
      }
      else
      {
        if (IMOSLoggingEnabled())
        {
          OSLogHandleForIMFoundationCategory();
          v15 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 138412546;
            v20 = v2;
            v21 = 2112;
            v22 = v3;
            _os_log_impl(&dword_19E239000, v15, OS_LOG_TYPE_INFO, "IMFileUtilities - Unable to create contact from location %@. MapURLString: %@", buf, 0x16u);
          }

        }
        v12 = 0;
        v11 = 0;
      }

      v5 = v11;
    }
    else if (IMOSLoggingEnabled())
    {
      OSLogHandleForIMFoundationCategory();
      v14 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_19E239000, v14, OS_LOG_TYPE_INFO, "IMFileUtilities - Unable to weaklink CNContactVCardSerialization", buf, 2u);
      }

    }
    v11 = 0;
LABEL_23:

    goto LABEL_24;
  }
  v11 = 0;
LABEL_25:

  return v11;
}

id IMCurrentLocationURLFromLocation(void *a1)
{
  double v1;
  double v2;
  double v3;
  double v4;
  void *v5;
  void *v6;

  if (!a1)
    goto LABEL_6;
  objc_msgSend(a1, "coordinate");
  v2 = v1;
  v4 = v3;
  if (qword_1EE5041C8 != -1)
    dispatch_once(&qword_1EE5041C8, &unk_1E3FB3AE8);
  if (off_1EE5041C0(v2, v4))
  {
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%f,%f"), *(_QWORD *)&v2, *(_QWORD *)&v4);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("http://maps.apple.com/?ll=%@&q=%@"), v5, v5);
    v6 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
LABEL_6:
    v6 = 0;
  }
  return v6;
}

void *sub_19E2E5F74()
{
  void *result;

  result = (void *)MEMORY[0x1A1AE7D58]("CLLocationCoordinate2DIsValid", CFSTR("CoreLocation"));
  off_1EE5041C0 = result;
  return result;
}

void sub_19E2E6034()
{
  IMBusinessNameManager *v0;
  void *v1;

  v0 = objc_alloc_init(IMBusinessNameManager);
  v1 = (void *)qword_1ECFC75C8;
  qword_1ECFC75C8 = (uint64_t)v0;

}

void sub_19E2E62C8(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_19E2E62EC(uint64_t a1, void *a2, void *a3)
{
  void *v5;
  void *v6;
  uint64_t v7;
  id WeakRetained;
  id v9;

  v9 = a3;
  objc_msgSend(a2, "name");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if (!objc_msgSend(v5, "length"))
  {
    objc_msgSend(v9, "domain");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    if (!objc_msgSend(v6, "isEqualToString:", CFSTR("BrandManagerErrorDomain")))
    {
LABEL_5:

      goto LABEL_6;
    }
    v7 = objc_msgSend(v9, "code");

    if (v7 == 1)
    {
      +[IMBusinessNameManager placeholderBusinessNameForBrandURI:](IMBusinessNameManager, "placeholderBusinessNameForBrandURI:", *(_QWORD *)(a1 + 32));
      v6 = v5;
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      goto LABEL_5;
    }
  }
LABEL_6:
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(WeakRetained, "_fetchedBrandName:forUID:", v5, *(_QWORD *)(a1 + 32));

}

uint64_t IM_APFS_PURGEABLE_IGNORE_ME()
{
  return 4096;
}

void sub_19E2E80E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v8;
  va_list va;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  va_list va1;

  va_start(va1, a7);
  va_start(va, a7);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_19E2E8108(uint64_t a1, void *a2, void *a3)
{
  id v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  id v9;

  v9 = a2;
  v5 = a3;
  if (objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), "__im_containsFileTransferGUID:", v9))
  {
    objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), "__im_attributedStringByReplacingFileTransferGUID:withUpdatedTransferGUID:", v9, v5);
    v6 = objc_claimAutoreleasedReturnValue();
    v7 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
    v8 = *(void **)(v7 + 40);
    *(_QWORD *)(v7 + 40) = v6;

    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 1;
  }

}

id IMAssociatedMessageDecodeGUID(void *a1)
{
  id v1;
  uint64_t v2;
  void *v3;
  id v4;
  char v5;
  unint64_t v6;
  int v7;
  void *v9;

  v1 = a1;
  if ((objc_msgSend(v1, "hasPrefix:", CFSTR("bp:")) & 1) != 0)
  {
    v2 = objc_msgSend(CFSTR("bp:"), "length");
    v3 = v1;
    goto LABEL_3;
  }
  if (!objc_msgSend(v1, "length"))
  {
LABEL_15:
    v4 = v1;
    goto LABEL_16;
  }
  v5 = 0;
  v6 = 1;
  while (1)
  {
    v7 = objc_msgSend(v1, "characterAtIndex:", v6 - 1);
    if (v7 != 47)
    {
      if (v7 == 58)
      {
        v5 = 1;
      }
      else if (v7 == 45)
      {
        goto LABEL_15;
      }
      goto LABEL_13;
    }
    if ((v5 & 1) != 0)
      break;
    v5 = 0;
LABEL_13:
    if (v6++ >= objc_msgSend(v1, "length"))
      goto LABEL_15;
  }
  v3 = v1;
  v2 = v6;
LABEL_3:
  objc_msgSend(v3, "substringFromIndex:", v2);
  v4 = (id)objc_claimAutoreleasedReturnValue();
LABEL_16:
  v9 = v4;

  return v9;
}

uint64_t IMAssociatedMessageDecodePartIndex(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;

  v1 = a1;
  if (objc_msgSend(v1, "hasPrefix:", CFSTR("p:")))
  {
    objc_msgSend(v1, "substringFromIndex:", objc_msgSend(CFSTR("p:"), "length"));
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "componentsSeparatedByString:", CFSTR("/"));
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v3, "count") == 2)
    {
      objc_msgSend(v3, "objectAtIndexedSubscript:", 0);
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      v5 = objc_msgSend(v4, "integerValue");

    }
    else
    {
      v5 = 0x7FFFFFFFFFFFFFFFLL;
    }

  }
  else
  {
    v5 = 0x7FFFFFFFFFFFFFFFLL;
  }

  return v5;
}

const __CFString *IMMetricsValueForAssociatedMessageContentType(int a1)
{
  if ((a1 - 1) > 9)
    return CFSTR("Unknown");
  else
    return off_1E3FB8408[(char)(a1 - 1)];
}

id sub_19E2E8558(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, void *a6, void *a7)
{
  id v11;
  id v12;
  id v13;
  id v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;

  v11 = a3;
  v12 = a5;
  v13 = a6;
  v14 = a7;
  objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  v16 = v15;
  if (v11)
    objc_msgSend(v15, "setObject:forKey:", v11, CFSTR("ams"));
  if (v12)
  {
    JWEncodeCodableObject();
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    if (v17)
      objc_msgSend(v16, "setObject:forKey:", v17, CFSTR("ampt"));

  }
  if (objc_msgSend(v13, "length"))
    objc_msgSend(v16, "setObject:forKey:", v13, CFSTR("amb"));
  if (objc_msgSend(v14, "length"))
    objc_msgSend(v16, "setObject:forKey:", v14, CFSTR("amd"));
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedChar:", a4);
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v16, "setObject:forKey:", v18, CFSTR("amc"));

  return v16;
}

id sub_19E2E86AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!a3)
    return 0;
  JWDecodeDictionary();
  return (id)objc_claimAutoreleasedReturnValue();
}

uint64_t sub_19E2E86D4(void *a1, const char *a2)
{
  return objc_msgSend(a1, "objectForKey:", CFSTR("amb"));
}

uint64_t sub_19E2E86E4(void *a1, const char *a2)
{
  return objc_msgSend(a1, "objectForKey:", CFSTR("amd"));
}

id sub_19E2E86F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!a3)
    return 0;
  JWEncodeDictionary();
  return (id)objc_claimAutoreleasedReturnValue();
}

id sub_19E2E871C(void *a1)
{
  void *v1;
  void *v2;
  id v3;
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  objc_msgSend(a1, "_dataForKey:");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  if (v1)
  {
    JWDecodeCodableObjectWithStandardAllowlist();
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      v3 = v2;
    }
    else
    {
      IMLogHandleForCategory("IMAssociatedMessageItem");
      v4 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
        sub_19E36DF50(v4, v5, v6, v7, v8, v9, v10, v11);

      v3 = 0;
    }

  }
  else
  {
    v3 = 0;
  }

  return v3;
}

void sub_19E2E87CC(void *a1, uint64_t a2, void *a3, void *a4)
{
  id v6;
  id v7;
  void *v8;

  v6 = a3;
  v7 = a4;
  JWEncodeCodableObject();
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  if (v8)
  {
    objc_msgSend(a1, "setObject:forKey:", v8, v7);

  }
}

id IMGetConsumedSessionPayloadsForBreadcrumbItems(void *a1)
{
  void *v1;
  void *v2;

  objc_msgSend(a1, "sortedArrayUsingComparator:", &unk_1E3FB3B28);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "__imArrayByApplyingBlock:", &unk_1E3FB26B8);
  v2 = (void *)objc_claimAutoreleasedReturnValue();

  return v2;
}

uint64_t sub_19E2E88E8(uint64_t a1, void *a2, void *a3)
{
  id v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = a2;
  v5 = a3;
  v6 = objc_msgSend(v4, "messageID");
  if (v6 == objc_msgSend(v5, "messageID"))
  {
    v7 = 0;
  }
  else
  {
    v8 = objc_msgSend(v4, "messageID");
    if (v8 < objc_msgSend(v5, "messageID"))
      v7 = -1;
    else
      v7 = 1;
  }

  return v7;
}

id sub_19E2E896C(uint64_t a1, void *a2)
{
  id v2;
  void *v3;

  v2 = a2;
  if (objc_msgSend(v2, "messageID") && objc_msgSend(v2, "associatedMessageType") == 3)
  {
    objc_msgSend(v2, "payloadData");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v3 = 0;
  }

  return v3;
}

BOOL sub_19E2E89C4(void *a1)
{
  void *v2;
  _BOOL8 v3;

  if (!objc_msgSend(a1, "length") || !objc_msgSend(a1, "containsString:", CFSTR("maps.apple.com")))
    return 0;
  objc_msgSend(MEMORY[0x1E0CB38E8], "regularExpressionWithPattern:options:error:", CFSTR("^(http)s?(\\:\\/\\/maps\\.apple\\.com\\/\\?ll\\=)\\-?\\d+\\.\\d+,\\-?\\d+\\.\\d+\\&q\\=[^\\&]+$"), 0, 0);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "numberOfMatchesInString:options:range:", a1, 0, 0, objc_msgSend(a1, "length")) == 1;

  return v3;
}

uint64_t sub_19E2E8BA0(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 32), "addObject:", a2);
}

void sub_19E2E8E38(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x19E2E8E04);
  }
  _Unwind_Resume(a1);
}

void sub_19E2E8FCC(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x19E2E8F98);
  }
  _Unwind_Resume(a1);
}

void sub_19E2EA284(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, os_activity_scope_state_s state)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x19E2EA178);
  }
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

void sub_19E2EAA14(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void **v6;
  void *v7;
  id v8;
  void *v9;
  id v10;

  v10 = a2;
  v5 = a3;
  if (!v10 || v5)
  {
    v6 = (void **)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40);
    v7 = v5;
    goto LABEL_6;
  }
  MEMORY[0x1A1AE7D4C](CFSTR("BlastDoorOrderPreview"), CFSTR("BlastDoor"));
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    v6 = (void **)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40);
    v7 = v10;
LABEL_6:
    v8 = v7;
    v9 = *v6;
    *v6 = v8;

  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));

}

void sub_19E2EAB64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_19E2EAB7C(uint64_t result)
{
  ++*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24);
  return result;
}

void sub_19E2EAC44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_19E2EAC5C(uint64_t result, uint64_t a2, _BYTE *a3)
{
  if (*(_QWORD *)(result + 32) == a2)
  {
    *a3 = 1;
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 40) + 8) + 24) = 1;
  }
  return result;
}

void sub_19E2EB228(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

uint64_t IMSharedUtilitiesProtoCloudKitEncryptedMessageP3ReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t result;
  char v24;
  unsigned int v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  unint64_t v32;
  char v33;
  void *Data;
  uint64_t v35;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      switch((v10 >> 3))
      {
        case 1u:
          v17 = 0;
          v18 = 0;
          v19 = 0;
          *(_BYTE *)(a1 + 28) |= 4u;
          while (1)
          {
            v20 = *v3;
            v21 = *(_QWORD *)(a2 + v20);
            if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
              break;
            v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
            *(_QWORD *)(a2 + v20) = v21 + 1;
            v19 |= (unint64_t)(v22 & 0x7F) << v17;
            if ((v22 & 0x80) == 0)
              goto LABEL_44;
            v17 += 7;
            v14 = v18++ >= 9;
            if (v14)
            {
              LODWORD(v19) = 0;
              goto LABEL_46;
            }
          }
          *(_BYTE *)(a2 + *v5) = 1;
LABEL_44:
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v19) = 0;
LABEL_46:
          v35 = 24;
          goto LABEL_55;
        case 2u:
          v24 = 0;
          v25 = 0;
          v19 = 0;
          *(_BYTE *)(a1 + 28) |= 2u;
          while (2)
          {
            v26 = *v3;
            v27 = *(_QWORD *)(a2 + v26);
            if (v27 == -1 || v27 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v28 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v27);
              *(_QWORD *)(a2 + v26) = v27 + 1;
              v19 |= (unint64_t)(v28 & 0x7F) << v24;
              if (v28 < 0)
              {
                v24 += 7;
                v14 = v25++ >= 9;
                if (v14)
                {
                  LODWORD(v19) = 0;
                  goto LABEL_50;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v19) = 0;
LABEL_50:
          v35 = 12;
          goto LABEL_55;
        case 3u:
          v29 = 0;
          v30 = 0;
          v19 = 0;
          *(_BYTE *)(a1 + 28) |= 1u;
          break;
        case 4u:
          Data = (void *)PBReaderReadData();

          *(_QWORD *)(a1 + 16) = Data;
          continue;
        default:
          result = PBReaderSkipValueWithTag();
          if (!(_DWORD)result)
            return result;
          continue;
      }
      while (1)
      {
        v31 = *v3;
        v32 = *(_QWORD *)(a2 + v31);
        if (v32 == -1 || v32 >= *(_QWORD *)(a2 + *v4))
          break;
        v33 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v32);
        *(_QWORD *)(a2 + v31) = v32 + 1;
        v19 |= (unint64_t)(v33 & 0x7F) << v29;
        if ((v33 & 0x80) == 0)
          goto LABEL_52;
        v29 += 7;
        v14 = v30++ >= 9;
        if (v14)
        {
          LODWORD(v19) = 0;
          goto LABEL_54;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_52:
      if (*(_BYTE *)(a2 + *v5))
        LODWORD(v19) = 0;
LABEL_54:
      v35 = 8;
LABEL_55:
      *(_DWORD *)(a1 + v35) = v19;
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

BOOL IMSharedUtilitiesProtoCloudKitEncryptedChatP1ReadFrom(void *a1, void *a2)
{
  _BYTE *v3;
  _BYTE *v4;
  int *v5;
  int *v6;
  int *v7;
  int *v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  int v16;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  char v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  _BOOL8 v31;

  v3 = a1;
  v4 = a2;
  v5 = (int *)MEMORY[0x1E0D82BF0];
  v6 = (int *)MEMORY[0x1E0D82BD8];
  v7 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&v4[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&v4[*MEMORY[0x1E0D82BD8]])
  {
    v8 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (v4[*v7])
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = *v5;
        v13 = *(_QWORD *)&v4[v12];
        if (v13 == -1 || v13 >= *(_QWORD *)&v4[*v6])
          break;
        v14 = *(_BYTE *)(*(_QWORD *)&v4[*v8] + v13);
        *(_QWORD *)&v4[v12] = v13 + 1;
        v11 |= (unint64_t)(v14 & 0x7F) << v9;
        if ((v14 & 0x80) == 0)
          goto LABEL_12;
        v9 += 7;
        v15 = v10++ >= 9;
        if (v15)
        {
          v11 = 0;
          v16 = v4[*v7];
          goto LABEL_14;
        }
      }
      v4[*v7] = 1;
LABEL_12:
      v16 = v4[*v7];
      if (v4[*v7])
        v11 = 0;
LABEL_14:
      if (v16 || (v11 & 7) == 4)
        break;
      if ((v11 >> 3) == 2)
      {
        v24 = 0;
        v25 = 0;
        v26 = 0;
        v3[16] |= 2u;
        while (1)
        {
          v27 = *v5;
          v28 = *(_QWORD *)&v4[v27];
          if (v28 == -1 || v28 >= *(_QWORD *)&v4[*v6])
            break;
          v29 = *(_BYTE *)(*(_QWORD *)&v4[*v8] + v28);
          *(_QWORD *)&v4[v27] = v28 + 1;
          v26 |= (unint64_t)(v29 & 0x7F) << v24;
          if ((v29 & 0x80) == 0)
            goto LABEL_41;
          v24 += 7;
          v15 = v25++ >= 9;
          if (v15)
          {
            v26 = 0;
            goto LABEL_43;
          }
        }
        v4[*v7] = 1;
LABEL_41:
        if (v4[*v7])
          v26 = 0;
LABEL_43:
        v3[12] = v26 != 0;
      }
      else if ((v11 >> 3) == 1)
      {
        v18 = 0;
        v19 = 0;
        v20 = 0;
        v3[16] |= 1u;
        while (1)
        {
          v21 = *v5;
          v22 = *(_QWORD *)&v4[v21];
          if (v22 == -1 || v22 >= *(_QWORD *)&v4[*v6])
            break;
          v23 = *(_BYTE *)(*(_QWORD *)&v4[*v8] + v22);
          *(_QWORD *)&v4[v21] = v22 + 1;
          v20 |= (unint64_t)(v23 & 0x7F) << v18;
          if ((v23 & 0x80) == 0)
            goto LABEL_37;
          v18 += 7;
          v15 = v19++ >= 9;
          if (v15)
          {
            LODWORD(v20) = 0;
            goto LABEL_39;
          }
        }
        v4[*v7] = 1;
LABEL_37:
        if (v4[*v7])
          LODWORD(v20) = 0;
LABEL_39:
        *((_DWORD *)v3 + 2) = v20;
      }
      else if (!PBReaderSkipValueWithTag())
      {
        v31 = 0;
        goto LABEL_46;
      }
    }
    while (*(_QWORD *)&v4[*v5] < *(_QWORD *)&v4[*v6]);
  }
  v31 = v4[*v7] == 0;
LABEL_46:

  return v31;
}

uint64_t sub_19E2ED078()
{
  return 0;
}

uint64_t IMGetAlwaysUseSingletonProxies()
{
  return byte_1EE5041D0;
}

void IMSetAlwaysUseSingletonProxies(char a1)
{
  NSObject *v2;

  byte_1EE5041D0 = a1;
  IMLogHandleForCategory("IMSingletonLog");
  v2 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
    sub_19E36E3CC(a1, v2);

}

id sub_19E2ED0EC(void *a1)
{
  id v1;
  void *v2;
  void *v3;

  v1 = a1;
  objc_sync_enter(v1);
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    objc_msgSend(v1, "__singleton__im");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v2, "__isSingletonProxy__im"))
    {
      objc_msgSend(v2, "singletonOverrideRef");
      v3 = (void *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      v3 = 0;
    }

  }
  else
  {
    v3 = 0;
  }
  objc_sync_exit(v1);

  return v3;
}

void sub_19E2ED178(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19E2ED190(void *a1, uint64_t a2, void *a3)
{
  id v4;
  void *v5;
  IMSingletonProxy *v6;
  id v7;

  v7 = a3;
  v4 = a1;
  objc_sync_enter(v4);
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    objc_msgSend(v4, "__singleton__im");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v5, "__isSingletonProxy__im"))
    {
      objc_msgSend(v5, "setSingletonOverride:", v7);
    }
    else
    {
      v6 = -[IMSingletonProxy initWithSingleton:singletonOverride:]([IMSingletonProxy alloc], "initWithSingleton:singletonOverride:", v5, v7);
      objc_msgSend(v4, "__setSingleton__im:", v6);

    }
  }
  objc_sync_exit(v4);

}

void sub_19E2ED24C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_19E2ED268(uint64_t a1)
{
  return MEMORY[0x1E0DE7D20](a1, sel_overrideSingletonWithObject_);
}

void sub_19E2ED270(void *a1, uint64_t a2, void *a3)
{
  id v4;
  IMSingletonProxy *v5;
  id v6;

  v6 = a3;
  v4 = a1;
  objc_sync_enter(v4);
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    if (byte_1EE5041D0)
    {
      v5 = -[IMSingletonProxy initWithSingleton:singletonOverride:]([IMSingletonProxy alloc], "initWithSingleton:singletonOverride:", v6, 0);
      objc_msgSend(v4, "__setSingleton__im:", v5);

    }
    else
    {
      objc_msgSend(v4, "__setSingleton__im:", v6);
    }
  }
  objc_sync_exit(v4);

}

void sub_19E2ED314(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id sub_19E2ED328(void *a1)
{
  id v1;
  void *v2;
  void *v3;

  v1 = a1;
  objc_sync_enter(v1);
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    objc_msgSend(v1, "__singleton__im");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v2, "__isSingletonProxy__im"))
    {
      objc_msgSend(v2, "singletonRef");
      v3 = (void *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      v3 = 0;
    }

  }
  else
  {
    v3 = 0;
  }
  objc_sync_exit(v1);

  return v3;
}

void sub_19E2ED3B4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL sub_19E2ED3CC(void *a1)
{
  void *v1;
  _BOOL8 v2;

  objc_msgSend(a1, "singletonOverride");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = v1 != 0;

  return v2;
}

uint64_t sub_19E2ED3FC()
{
  return 0;
}

uint64_t sub_19E2ED404(void *a1, uint64_t a2, void *a3)
{
  id v4;
  char isKindOfClass;

  v4 = a3;
  objc_opt_class();
  isKindOfClass = objc_opt_isKindOfClass();
  if ((isKindOfClass & 1) != 0)
    objc_msgSend(a1, "replaceSingletonWithObject:", v4);

  return isKindOfClass & 1;
}

uint64_t sub_19E2ED460()
{
  return objc_opt_respondsToSelector() & 1;
}

void sub_19E2EDA1C(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  NSObject *v9;

  _os_log_debug_impl(a1, v9, OS_LOG_TYPE_DEBUG, a4, &a9, 0xCu);
}

void sub_19E2EDA30(void *a1, double a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  NSObject *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[7];
  _QWORD block[7];
  _QWORD v16[3];
  char v17;

  v16[0] = 0;
  v16[1] = v16;
  v16[2] = 0x2020000000;
  v17 = 0;
  v11 = dispatch_group_create();
  v12 = objc_msgSend(a1, "expectationWithDescription:", a5);
  (*(void (**)(uint64_t, NSObject *))(a4 + 16))(a4, v11);
  v13 = MEMORY[0x1E0C809B0];
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = sub_19E2EDB68;
  block[3] = &unk_1E3FB84D8;
  block[5] = a6;
  block[6] = v16;
  block[4] = v12;
  dispatch_group_notify(v11, MEMORY[0x1E0C80D38], block);
  v14[0] = v13;
  v14[1] = 3221225472;
  v14[2] = sub_19E2EDBC0;
  v14[3] = &unk_1E3FB8500;
  v14[5] = a6;
  v14[6] = v16;
  v14[4] = a5;
  objc_msgSend(a1, "waitForExpectationsWithTimeout:handler:", v14, a2);
  _Block_object_dispose(v16, 8);
}

void sub_19E2EDB50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_19E2EDB68(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;

  result = objc_msgSend(*(id *)(a1 + 32), "fulfill");
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  if (!*(_BYTE *)(v3 + 24))
  {
    if (*(_QWORD *)(a1 + 40))
    {
      *(_BYTE *)(v3 + 24) = 1;
      return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
    }
  }
  return result;
}

void sub_19E2EDBC0(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;

  if (a2)
    NSLog(CFSTR("Async test %@ returned error = %@"), a1[4], a2);
  v3 = *(_QWORD *)(a1[6] + 8);
  if (!*(_BYTE *)(v3 + 24))
  {
    if (a1[5])
    {
      *(_BYTE *)(v3 + 24) = 1;
      (*(void (**)(void))(a1[5] + 16))();
    }
  }
}

void *sub_19E2EDDD8()
{
  void *result;

  result = (void *)MEMORY[0x1A1AE7D58]("SecMPComputePaddingForStorage", CFSTR("MessageProtection"));
  off_1EE503AA8 = result;
  return result;
}

void sub_19E2EE7CC(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_19E2EE7E0(void *a1)
{
  objc_begin_catch(a1);
  JUMPOUT(0x19E2EE71CLL);
}

void sub_19E2EE9C8(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_19E2EE9DC(void *a1)
{
  objc_begin_catch(a1);
  JUMPOUT(0x19E2EE918);
}

uint64_t sub_19E2EEA6C(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "loadXCTestFramework:", *(_QWORD *)(a1 + 40));
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(a1 + 32), sel_setXctestFrameworkLoaded_);
}

uint64_t sub_19E2EF20C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;

  v4 = objc_msgSend(*(id *)(a1 + 32), "objectForKey:", a2);
  result = objc_opt_isKindOfClass();
  if ((result & 1) != 0)
    return objc_msgSend(*(id *)(a1 + 40), "setObject:forKey:", v4, a2);
  return result;
}

void sub_19E2EF5F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19E2EF700(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19E2EF8C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19E2EFA4C(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  NSObject *v5;
  void *v6;
  int v7;
  void *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  if (v3)
  {
    IMLogHandleForCategory("Diagnostics");
    v4 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      sub_19E36E710(a1, (uint64_t)v3, v4);

  }
  else if (IMOSLoggingEnabled())
  {
    OSLogHandleForIMFoundationCategory();
    v5 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      objc_msgSend(*(id *)(a1 + 32), "identifier");
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      v7 = 138412290;
      v8 = v6;
      _os_log_impl(&dword_19E239000, v5, OS_LOG_TYPE_INFO, "Successfully posted notification %@", (uint8_t *)&v7, 0xCu);

    }
  }

}

void sub_19E2EFC14(uint64_t a1)
{
  sub_19E2EFC68();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("UNMutableNotificationContent");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    qword_1EE5041E0 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    sub_19E36E7C4();
    sub_19E2EFC68();
  }
}

void sub_19E2EFC68()
{
  void *v0;

  if (!qword_1EE5041E8)
    qword_1EE5041E8 = _sl_dlopen();
  if (!qword_1EE5041E8)
  {
    v0 = (void *)abort_report_np();
    free(v0);
  }
}

Class sub_19E2EFD14(uint64_t a1)
{
  Class result;
  uint64_t v3;

  sub_19E2EFC68();
  result = objc_getClass("UNNotificationRequest");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    qword_1EE5041F0 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    v3 = sub_19E36E7E8();
    return (Class)sub_19E2EFD68(v3);
  }
  return result;
}

Class sub_19E2EFD68(uint64_t a1)
{
  Class result;
  IMSenderContext *v3;
  SEL v4;

  sub_19E2EFC68();
  result = objc_getClass("UNUserNotificationCenter");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    qword_1EE5041F8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    v3 = (IMSenderContext *)sub_19E36E80C();
    return (Class)-[IMSenderContext isFromMe](v3, v4);
  }
  return result;
}

uint64_t sub_19E2F0370(uint64_t result, uint64_t a2)
{
  if (a2)
    return objc_msgSend(*(id *)(result + 32), "addObject:", a2);
  return result;
}

IMCoreAutomationNotifications *sub_19E2F03C4()
{
  IMCoreAutomationNotifications *result;

  result = objc_alloc_init(IMCoreAutomationNotifications);
  qword_1ECFC75D0 = (uint64_t)result;
  return result;
}

void sub_19E2F0FD0()
{
  id v0;
  void *v1;

  v0 = objc_alloc_init((Class)objc_opt_class());
  v1 = (void *)qword_1ECFC6F70;
  qword_1ECFC6F70 = (uint64_t)v0;

}

void sub_19E2F17C4()
{
  __CFNotificationCenter *DarwinNotifyCenter;
  __CFNotificationCenter *v1;

  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterAddObserver(DarwinNotifyCenter, 0, (CFNotificationCallback)sub_19E2F1820, CFSTR("com.apple.MobileSMS.MMSEnabled.changed"), 0, CFNotificationSuspensionBehaviorDeliverImmediately);
  v1 = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterAddObserver(v1, 0, (CFNotificationCallback)sub_19E2F1820, CFSTR("com.apple.MobileSMS.MMSCapable"), 0, CFNotificationSuspensionBehaviorDeliverImmediately);
}

void sub_19E2F1820()
{
  void *v0;
  NSObject *v1;
  uint8_t v2[16];

  v0 = (void *)MEMORY[0x1A1AE8394]();
  if (IMOSLoggingEnabled())
  {
    OSLogHandleForIMFoundationCategory();
    v1 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v1, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)v2 = 0;
      _os_log_impl(&dword_19E239000, v1, OS_LOG_TYPE_INFO, "Refresh: User setting for MMS changed", v2, 2u);
    }

  }
  dispatch_async(MEMORY[0x1E0C80D38], &unk_1E3FB8810);
  objc_autoreleasePoolPop(v0);
}

double sub_19E2F3A04(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  double v4;
  __int128 v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;

  v1 = a1;
  if (v1)
  {
    if (qword_1EE504260 != -1)
      dispatch_once(&qword_1EE504260, &unk_1E3FB2738);
    if (qword_1EE504270 != -1)
      dispatch_once(&qword_1EE504270, &unk_1E3FB87F0);
    v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB37E8]), "initWithLongLong:", IMMMSMaximumMessageByteCount());
    v3 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99D80]), "initWithObjectsAndKeys:", v2, CFSTR("fileLengthLimit"), 0);
    v8 = 0uLL;
    v9 = 0;
    if (qword_1EE504258)
      objc_msgSend((id)qword_1EE504258, "maximumDurationForPreset:properties:", v1, v3);
    v6 = v8;
    v7 = v9;
    v4 = off_1EE504268(&v6);

  }
  else
  {
    v4 = INFINITY;
  }

  return v4;
}

uint64_t sub_19E2F3DA4()
{
  uint64_t result;

  result = MEMORY[0x1A1AE7D4C](CFSTR("AVAssetExportSession"), CFSTR("AVFoundation"));
  qword_1EE504228 = result;
  return result;
}

void *sub_19E2F3DD0()
{
  void *result;

  result = (void *)MEMORY[0x1A1AE7D58]("CMTimeGetSeconds", CFSTR("CoreMedia"));
  off_1EE504238 = result;
  return result;
}

void sub_19E2F4658()
{
  __CFNotificationCenter *DarwinNotifyCenter;

  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterAddObserver(DarwinNotifyCenter, 0, (CFNotificationCallback)sub_19E2F4688, CFSTR("com.apple.MobileSMS.MMSEmailAddress.changed"), 0, CFNotificationSuspensionBehaviorDeliverImmediately);
}

void sub_19E2F4688()
{
  NSObject *v0;
  uint8_t v1[16];

  if (IMOSLoggingEnabled())
  {
    OSLogHandleForIMFoundationCategory();
    v0 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v0, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)v1 = 0;
      _os_log_impl(&dword_19E239000, v0, OS_LOG_TYPE_INFO, "Refresh: Email address for MMS changed", v1, 2u);
    }

  }
}

void sub_19E2F4F40()
{
  NSObject *v0;
  void *v1;
  uint8_t v2[16];

  if (IMOSLoggingEnabled())
  {
    OSLogHandleForIMFoundationCategory();
    v0 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v0, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)v2 = 0;
      _os_log_impl(&dword_19E239000, v0, OS_LOG_TYPE_INFO, "Restricted Mode changed, reloading", v2, 2u);
    }

  }
  +[IMCTSMSUtilitiesManager sharedManager](IMCTSMSUtilitiesManager, "sharedManager");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "mmsRestrictedModeEnabledForPhoneNumber:simID:reset:", 0, 0, 1);

}

uint64_t sub_19E2F6160()
{
  uint64_t result;

  result = MEMORY[0x1A1AE7D4C](CFSTR("AVAssetExportSession"), CFSTR("AVFoundation"));
  qword_1EE504258 = result;
  return result;
}

void *sub_19E2F618C()
{
  void *result;

  result = (void *)MEMORY[0x1A1AE7D58]("CMTimeGetSeconds", CFSTR("CoreMedia"));
  off_1EE504268 = result;
  return result;
}

void sub_19E2F61B8()
{
  void *v0;
  id v1;

  v0 = (void *)qword_1EE503DB8;
  qword_1EE503DB8 = 0;

  +[IMCTSMSUtilitiesManager sharedManager](IMCTSMSUtilitiesManager, "sharedManager");
  v1 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "synchronizePreferredSubscriptionMMSCapabilityToWatch");

}

void sub_19E2F67F0()
{
  IMAssistiveAccessCommunicationLimitManager *v0;
  void *v1;

  v0 = objc_alloc_init(IMAssistiveAccessCommunicationLimitManager);
  v1 = (void *)qword_1ECFC6F78;
  qword_1ECFC6F78 = (uint64_t)v0;

}

uint64_t sub_19E2F6AA4(uint64_t a1)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(a1 + 32), sel__handleStringForFavoritesEntry_);
}

uint64_t sub_19E2F6FDC(uint64_t a1, void *a2)
{
  void *v2;
  uint64_t v3;

  objc_msgSend(a2, "bundleIdentifier");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "isEqualToString:", CFSTR("com.apple.MobileSMS"));

  return v3;
}

void sub_19E2F7194()
{
  void *v0;
  void *v1;
  id v2;

  if (IMIsRunningInUnitTesting())
  {
    objc_msgSend(MEMORY[0x1E0CB3898], "processInfo");
    v2 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "environment");
    v0 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v0, "objectForKey:", CFSTR("IMFEATUREFLAGS_STRICT"));
    v1 = (void *)objc_claimAutoreleasedReturnValue();
    byte_1EE504278 = objc_msgSend(v1, "BOOLValue");

  }
}

uint64_t sub_19E2F7264()
{
  uint64_t result;

  if ((_os_feature_enabled_impl() & 1) != 0)
    result = 1;
  else
    result = IMGetCachedDomainBoolForKeyWithDefaultValue();
  byte_1EE503B90 = result;
  return result;
}

uint64_t sub_19E2F7300()
{
  uint64_t result;

  if ((_os_feature_enabled_impl() & 1) != 0)
    result = 1;
  else
    result = IMGetCachedDomainBoolForKeyWithDefaultValue();
  byte_1ECFC6ED0 = result;
  return result;
}

uint64_t sub_19E2F73C4(uint64_t a1)
{
  _BOOL4 v2;
  void *v3;
  uint64_t result;

  v2 = IMSharedHelperDeviceIsiPad();
  v3 = *(void **)(a1 + 32);
  if (v2)
    result = objc_msgSend(v3, "_isEntryViewInTranscriptEnabledForiPad");
  else
    result = objc_msgSend(v3, "_isEntryViewInTranscriptEnabled");
  byte_1ECFC6E00 = result;
  return result;
}

uint64_t sub_19E2F7450()
{
  uint64_t result;

  if ((_os_feature_enabled_impl() & 1) != 0)
    result = 1;
  else
    result = IMGetCachedDomainBoolForKeyWithDefaultValue();
  byte_1ECFC6E10 = result;
  return result;
}

uint64_t sub_19E2F74EC()
{
  uint64_t result;

  if ((_os_feature_enabled_impl() & 1) != 0)
    result = 1;
  else
    result = IMGetCachedDomainBoolForKeyWithDefaultValue();
  byte_1ECFC6EE0 = result;
  return result;
}

uint64_t sub_19E2F7588()
{
  uint64_t result;

  if ((_os_feature_enabled_impl() & 1) != 0)
    result = 1;
  else
    result = IMGetCachedDomainBoolForKeyWithDefaultValue();
  byte_1EE504280 = result;
  return result;
}

uint64_t sub_19E2F7618()
{
  uint64_t result;

  if ((IMIsRunningInUnitTesting() & 1) != 0 || (_os_feature_enabled_impl() & 1) != 0)
    result = 1;
  else
    result = IMGetCachedDomainBoolForKeyWithDefaultValue();
  byte_1EE504290 = result;
  return result;
}

uint64_t sub_19E2F76E4()
{
  uint64_t result;

  if ((_os_feature_enabled_impl() & 1) != 0)
    result = 1;
  else
    result = IMGetCachedDomainBoolForKeyWithDefaultValue();
  byte_1ECFC6EB0 = result;
  return result;
}

uint64_t sub_19E2F7780()
{
  uint64_t result;

  if ((_os_feature_enabled_impl() & 1) != 0)
    result = 1;
  else
    result = IMGetCachedDomainBoolForKeyWithDefaultValue();
  byte_1EE5042A0 = result;
  return result;
}

uint64_t sub_19E2F781C()
{
  uint64_t result;

  if ((_os_feature_enabled_impl() & 1) != 0)
    result = 1;
  else
    result = IMGetCachedDomainBoolForKeyWithDefaultValue();
  byte_1EE5038B8 = result;
  return result;
}

uint64_t sub_19E2F78B8()
{
  uint64_t result;

  if ((_os_feature_enabled_impl() & 1) != 0)
    result = 1;
  else
    result = IMGetCachedDomainBoolForKeyWithDefaultValue();
  byte_1ECFC6D40 = result;
  return result;
}

uint64_t sub_19E2F7954()
{
  uint64_t result;

  if ((_os_feature_enabled_impl() & 1) != 0)
    result = 1;
  else
    result = IMGetCachedDomainBoolForKeyWithDefaultValue();
  byte_1ECFC6CB0 = result;
  return result;
}

uint64_t sub_19E2F79F0()
{
  uint64_t result;

  if ((_os_feature_enabled_impl() & 1) != 0)
    result = 1;
  else
    result = IMGetCachedDomainBoolForKeyWithDefaultValue();
  byte_1EE5042A8 = result;
  return result;
}

uint64_t sub_19E2F7A8C()
{
  uint64_t result;

  if ((_os_feature_enabled_impl() & 1) != 0)
    result = 1;
  else
    result = IMGetCachedDomainBoolForKeyWithDefaultValue();
  byte_1EE5042B0 = result;
  return result;
}

uint64_t sub_19E2F7B28()
{
  uint64_t result;

  if ((_os_feature_enabled_impl() & 1) != 0)
    result = 1;
  else
    result = IMGetCachedDomainBoolForKeyWithDefaultValue();
  byte_1ECFC6C90 = result;
  return result;
}

uint64_t sub_19E2F7BC4()
{
  uint64_t result;

  if ((_os_feature_enabled_impl() & 1) != 0)
    result = 1;
  else
    result = IMGetCachedDomainBoolForKeyWithDefaultValue();
  byte_1EE5042C0 = result;
  return result;
}

uint64_t sub_19E2F7C60()
{
  uint64_t result;

  if ((_os_feature_enabled_impl() & 1) != 0)
    result = 1;
  else
    result = IMGetCachedDomainBoolForKeyWithDefaultValue();
  byte_1EE5042C8 = result;
  return result;
}

uint64_t sub_19E2F7CFC()
{
  uint64_t result;

  if ((_os_feature_enabled_impl() & 1) != 0)
    result = 1;
  else
    result = IMGetCachedDomainBoolForKeyWithDefaultValue();
  byte_1EE503B20 = result;
  return result;
}

uint64_t sub_19E2F7D98()
{
  uint64_t result;

  if ((_os_feature_enabled_impl() & 1) != 0)
    result = 1;
  else
    result = IMGetCachedDomainBoolForKeyWithDefaultValue();
  byte_1ECFC6E88 = result;
  return result;
}

uint64_t sub_19E2F7E34()
{
  uint64_t result;

  if ((_os_feature_enabled_impl() & 1) != 0)
    result = 1;
  else
    result = IMGetCachedDomainBoolForKeyWithDefaultValue();
  byte_1EE5042D8 = result;
  return result;
}

uint64_t sub_19E2F7ED0()
{
  uint64_t result;

  if ((_os_feature_enabled_impl() & 1) != 0)
    result = 1;
  else
    result = IMGetCachedDomainBoolForKeyWithDefaultValue();
  byte_1EE5042E8 = result;
  return result;
}

uint64_t sub_19E2F7F6C()
{
  uint64_t result;

  if ((_os_feature_enabled_impl() & 1) != 0)
    result = 1;
  else
    result = IMGetCachedDomainBoolForKeyWithDefaultValue();
  byte_1EE5042F8 = result;
  return result;
}

uint64_t sub_19E2F7FFC()
{
  uint64_t result;

  if ((IMIsRunningInUnitTesting() & 1) != 0)
  {
    result = 0;
  }
  else if ((_os_feature_enabled_impl() & 1) != 0)
  {
    result = 1;
  }
  else
  {
    result = IMGetCachedDomainBoolForKeyWithDefaultValue();
  }
  byte_1EE504308 = result;
  return result;
}

uint64_t sub_19E2F80A8()
{
  uint64_t result;

  if ((_os_feature_enabled_impl() & 1) != 0)
    result = 1;
  else
    result = IMGetCachedDomainBoolForKeyWithDefaultValue();
  byte_1ECFC6E78 = result;
  return result;
}

uint64_t sub_19E2F8144()
{
  uint64_t result;

  if ((_os_feature_enabled_impl() & 1) != 0)
    result = 1;
  else
    result = IMGetCachedDomainBoolForKeyWithDefaultValue();
  byte_1ECFC6CD8 = result;
  return result;
}

uint64_t sub_19E2F81E0()
{
  uint64_t result;

  if ((_os_feature_enabled_impl() & 1) != 0)
    result = 1;
  else
    result = IMGetCachedDomainBoolForKeyWithDefaultValue();
  byte_1EE504318 = result;
  return result;
}

uint64_t sub_19E2F827C()
{
  uint64_t result;

  if ((_os_feature_enabled_impl() & 1) != 0)
    result = 1;
  else
    result = IMGetCachedDomainBoolForKeyWithDefaultValue();
  byte_1EE504328 = result;
  return result;
}

uint64_t sub_19E2F8318()
{
  uint64_t result;

  if ((_os_feature_enabled_impl() & 1) != 0)
    result = 1;
  else
    result = IMGetCachedDomainBoolForKeyWithDefaultValue();
  byte_1ECFC6E20 = result;
  return result;
}

uint64_t sub_19E2F83B4()
{
  uint64_t result;

  if ((_os_feature_enabled_impl() & 1) != 0)
    result = 1;
  else
    result = IMGetCachedDomainBoolForKeyWithDefaultValue();
  byte_1ECFC6DC0 = result;
  return result;
}

uint64_t sub_19E2F8478(uint64_t a1)
{
  uint64_t result;

  result = objc_msgSend(*(id *)(a1 + 32), "isSendMenuEnabled");
  if ((_DWORD)result)
    result = objc_msgSend(*(id *)(a1 + 32), "_isAudioMessagesEntryViewRecordingEnabled");
  byte_1ECFC6DF0 = result;
  return result;
}

uint64_t sub_19E2F84FC()
{
  uint64_t result;

  if ((_os_feature_enabled_impl() & 1) != 0)
    result = 1;
  else
    result = IMGetCachedDomainBoolForKeyWithDefaultValue();
  byte_1ECFC6DE0 = result;
  return result;
}

uint64_t sub_19E2F8598()
{
  uint64_t result;

  if ((_os_feature_enabled_impl() & 1) != 0)
    result = 1;
  else
    result = IMGetCachedDomainBoolForKeyWithDefaultValue();
  byte_1ECFC6DA0 = result;
  return result;
}

uint64_t sub_19E2F86A4()
{
  uint64_t result;

  if ((_os_feature_enabled_impl() & 1) != 0)
    result = 1;
  else
    result = IMGetCachedDomainBoolForKeyWithDefaultValue();
  byte_1EE503A10 = result;
  return result;
}

uint64_t sub_19E2F8740()
{
  uint64_t result;

  if ((_os_feature_enabled_impl() & 1) != 0)
    result = 1;
  else
    result = IMGetCachedDomainBoolForKeyWithDefaultValue();
  byte_1ECFC6CF8 = result;
  return result;
}

uint64_t sub_19E2F87DC()
{
  uint64_t result;

  if ((_os_feature_enabled_impl() & 1) != 0)
    result = 1;
  else
    result = IMGetCachedDomainBoolForKeyWithDefaultValue();
  byte_1EE503D38 = result;
  return result;
}

uint64_t sub_19E2F8878()
{
  uint64_t result;

  if ((_os_feature_enabled_impl() & 1) != 0)
    result = 1;
  else
    result = IMGetCachedDomainBoolForKeyWithDefaultValue();
  byte_1EE504330 = result;
  return result;
}

uint64_t sub_19E2F8908()
{
  uint64_t result;

  if ((IMIsRunningInUnitTesting() & 1) != 0)
  {
    result = 0;
  }
  else if ((_os_feature_enabled_impl() & 1) != 0)
  {
    result = 1;
  }
  else
  {
    result = IMGetCachedDomainBoolForKeyWithDefaultValue();
  }
  byte_1EE503AF8 = result;
  return result;
}

uint64_t sub_19E2F89B4()
{
  uint64_t result;

  if ((_os_feature_enabled_impl() & 1) != 0)
    result = 1;
  else
    result = IMGetCachedDomainBoolForKeyWithDefaultValue();
  byte_1ECFC71E0 = result;
  return result;
}

uint64_t sub_19E2F8A58()
{
  uint64_t result;

  if ((_os_feature_enabled_impl() & 1) != 0)
    result = 1;
  else
    result = IMGetCachedDomainBoolForKeyWithDefaultValue();
  byte_1EE503860 = result;
  return result;
}

uint64_t sub_19E2F8AF4()
{
  uint64_t result;

  if ((_os_feature_enabled_impl() & 1) != 0)
    result = 1;
  else
    result = IMGetCachedDomainBoolForKeyWithDefaultValue();
  byte_1EE504340 = result;
  return result;
}

uint64_t sub_19E2F8B90()
{
  uint64_t result;

  if ((_os_feature_enabled_impl() & 1) != 0)
    result = 1;
  else
    result = IMGetCachedDomainBoolForKeyWithDefaultValue();
  byte_1ECFC6D30 = result;
  return result;
}

uint64_t sub_19E2F8C2C()
{
  uint64_t result;

  if ((_os_feature_enabled_impl() & 1) != 0)
    result = 1;
  else
    result = IMGetCachedDomainBoolForKeyWithDefaultValue();
  byte_1EE504350 = result;
  return result;
}

uint64_t sub_19E2F8CC8()
{
  uint64_t result;

  if ((_os_feature_enabled_impl() & 1) != 0)
    result = 1;
  else
    result = IMGetCachedDomainBoolForKeyWithDefaultValue();
  byte_1EE504360 = result;
  return result;
}

uint64_t sub_19E2F8D64()
{
  uint64_t result;

  if ((_os_feature_enabled_impl() & 1) != 0)
    result = 1;
  else
    result = IMGetCachedDomainBoolForKeyWithDefaultValue();
  byte_1EE504370 = result;
  return result;
}

uint64_t sub_19E2F8E04()
{
  uint64_t result;

  if ((_os_feature_enabled_impl() & 1) != 0)
    result = 1;
  else
    result = IMGetCachedDomainBoolForKeyWithDefaultValue();
  byte_1EE504380 = result;
  return result;
}

uint64_t sub_19E2F8EA0()
{
  uint64_t result;

  if ((_os_feature_enabled_impl() & 1) != 0)
    result = 1;
  else
    result = IMGetCachedDomainBoolForKeyWithDefaultValue();
  byte_1EE503AA0 = result;
  return result;
}

uint64_t sub_19E2F8F3C()
{
  uint64_t result;

  if ((_os_feature_enabled_impl() & 1) != 0)
    result = 1;
  else
    result = IMGetCachedDomainBoolForKeyWithDefaultValue();
  byte_1EE504390 = result;
  return result;
}

uint64_t sub_19E2F8FD8()
{
  uint64_t result;

  if ((_os_feature_enabled_impl() & 1) != 0)
    result = 1;
  else
    result = IMGetCachedDomainBoolForKeyWithDefaultValue();
  byte_1ECFC7050 = result;
  return result;
}

uint64_t sub_19E2F9074()
{
  uint64_t result;

  if ((_os_feature_enabled_impl() & 1) != 0)
    result = 1;
  else
    result = IMGetCachedDomainBoolForKeyWithDefaultValue();
  byte_1EE5043A0 = result;
  return result;
}

uint64_t sub_19E2F9110()
{
  uint64_t result;

  if ((_os_feature_enabled_impl() & 1) != 0)
    result = 1;
  else
    result = IMGetCachedDomainBoolForKeyWithDefaultValue();
  byte_1EE5043B0 = result;
  return result;
}

uint64_t sub_19E2F91AC()
{
  uint64_t result;

  if ((_os_feature_enabled_impl() & 1) != 0)
    result = 1;
  else
    result = IMGetCachedDomainBoolForKeyWithDefaultValue();
  byte_1ECFC6EC0 = result;
  return result;
}

uint64_t sub_19E2F91FC()
{
  uint64_t result;

  if ((_os_feature_enabled_impl() & 1) != 0)
    result = 1;
  else
    result = IMGetCachedDomainBoolForKeyWithDefaultValue();
  byte_1EE503DB0 = result;
  return result;
}

uint64_t sub_19E2F9298()
{
  uint64_t result;

  if ((_os_feature_enabled_impl() & 1) != 0)
    result = 1;
  else
    result = IMGetCachedDomainBoolForKeyWithDefaultValue();
  byte_1EE5043C0 = result;
  return result;
}

uint64_t sub_19E2F9334()
{
  uint64_t result;

  if ((_os_feature_enabled_impl() & 1) != 0)
    result = 1;
  else
    result = IMGetCachedDomainBoolForKeyWithDefaultValue();
  byte_1ECFC6D20 = result;
  return result;
}

uint64_t sub_19E2F93D0()
{
  uint64_t result;

  if ((_os_feature_enabled_impl() & 1) != 0)
    result = 1;
  else
    result = IMGetCachedDomainBoolForKeyWithDefaultValue();
  byte_1EE5043D0 = result;
  return result;
}

uint64_t sub_19E2F946C()
{
  uint64_t result;

  if ((_os_feature_enabled_impl() & 1) != 0)
    result = 1;
  else
    result = IMGetCachedDomainBoolForKeyWithDefaultValue();
  byte_1EE5043D8 = result;
  return result;
}

uint64_t sub_19E2F9508()
{
  uint64_t result;

  if ((_os_feature_enabled_impl() & 1) != 0)
    result = 1;
  else
    result = IMGetCachedDomainBoolForKeyWithDefaultValue();
  byte_1EE5043E8 = result;
  return result;
}

uint64_t sub_19E2F95A4()
{
  uint64_t result;

  if ((_os_feature_enabled_impl() & 1) != 0)
    result = 1;
  else
    result = IMGetCachedDomainBoolForKeyWithDefaultValue();
  byte_1EE5043F8 = result;
  return result;
}

uint64_t sub_19E2F9640()
{
  uint64_t result;

  if ((_os_feature_enabled_impl() & 1) != 0)
    result = 1;
  else
    result = IMGetCachedDomainBoolForKeyWithDefaultValue();
  byte_1EE503D98 = result;
  return result;
}

uint64_t sub_19E2F96DC()
{
  uint64_t result;

  if ((_os_feature_enabled_impl() & 1) != 0)
    result = 1;
  else
    result = IMGetCachedDomainBoolForKeyWithDefaultValue();
  byte_1EE504408 = result;
  return result;
}

uint64_t sub_19E2F9778()
{
  uint64_t result;

  if ((_os_feature_enabled_impl() & 1) != 0)
    result = 1;
  else
    result = IMGetCachedDomainBoolForKeyWithDefaultValue();
  byte_1EE504418 = result;
  return result;
}

uint64_t sub_19E2F9814()
{
  uint64_t result;

  if ((_os_feature_enabled_impl() & 1) != 0)
    result = 1;
  else
    result = IMGetCachedDomainBoolForKeyWithDefaultValue();
  byte_1EE504428 = result;
  return result;
}

uint64_t sub_19E2F98B0()
{
  uint64_t result;

  if ((_os_feature_enabled_impl() & 1) != 0)
    result = 1;
  else
    result = IMGetCachedDomainBoolForKeyWithDefaultValue();
  byte_1EE504438 = result;
  return result;
}

uint64_t sub_19E2F994C()
{
  uint64_t result;

  if ((_os_feature_enabled_impl() & 1) != 0)
    result = 1;
  else
    result = IMGetCachedDomainBoolForKeyWithDefaultValue();
  byte_1EE504448 = result;
  return result;
}

uint64_t sub_19E2F99DC()
{
  uint64_t result;

  IMSharedHelperDeviceIsiPad();
  result = _os_feature_enabled_impl();
  byte_1EE504450 = result;
  return result;
}

void sub_19E2F9A90()
{
  IMSenderIdentityManager *v0;
  void *v1;

  v0 = objc_alloc_init(IMSenderIdentityManager);
  v1 = (void *)qword_1ECFC75D8;
  qword_1ECFC75D8 = (uint64_t)v0;

}

uint64_t sub_19E2FA618()
{
  uint64_t result;

  qword_1ECFC74F0 = MEMORY[0x1A1AE7D4C](CFSTR("CNContactStore"), CFSTR("Contacts"));
  result = MEMORY[0x1A1AE7D4C](CFSTR("CNGeminiHandle"), CFSTR("Contacts"));
  qword_1EE503868 = result;
  return result;
}

uint64_t sub_19E2FAC58(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "compare:");
}

void sub_19E2FB3DC(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  NSObject *v9;

  _os_log_error_impl(a1, v9, OS_LOG_TYPE_ERROR, a4, &a9, 0x16u);
}

void sub_19E2FB458()
{
  IMIDSServiceController *v0;
  void *v1;

  v0 = objc_alloc_init(IMIDSServiceController);
  v1 = (void *)qword_1ECFC75E0;
  qword_1ECFC75E0 = (uint64_t)v0;

}

void sub_19E2FB67C()
{
  id v0;
  void *v1;

  qword_1EE504460 = MEMORY[0x1A1AE7D4C](CFSTR("BSUIBrandManager"), CFSTR("BusinessServicesUI"));
  v0 = -[IMBrandManager _init]([IMBrandManager alloc], "_init");
  v1 = (void *)qword_1ECFC6F58;
  qword_1ECFC6F58 = (uint64_t)v0;

}

void sub_19E2FB978(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  _QWORD v4[4];
  id v5;
  id v6;

  objc_msgSend(*(id *)(a1 + 32), "brandManagerForType:", *(_QWORD *)(a1 + 56));
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 3221225472;
  v4[2] = sub_19E2FBA20;
  v4[3] = &unk_1E3FB8E30;
  v3 = *(_QWORD *)(a1 + 40);
  v6 = *(id *)(a1 + 48);
  v5 = *(id *)(a1 + 40);
  objc_msgSend(v2, "brandWithURI:completion:", v3, v4);

}

void sub_19E2FBA20(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  id v8;
  _QWORD v9[4];
  id v10;
  id v11;
  id v12;
  id v13;

  v5 = a2;
  v6 = a3;
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 3221225472;
  v9[2] = sub_19E2FBAF4;
  v9[3] = &unk_1E3FB8E08;
  v10 = v5;
  v13 = *(id *)(a1 + 40);
  v11 = v6;
  v12 = *(id *)(a1 + 32);
  v7 = v6;
  v8 = v5;
  dispatch_async(MEMORY[0x1E0C80D38], v9);

}

void sub_19E2FBAF4(uint64_t a1)
{
  uint64_t v2;
  id v3;
  void *v4;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint8_t buf[4];
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if (*(_QWORD *)(a1 + 32))
  {
    v2 = *(_QWORD *)(a1 + 56);
    +[IMBrand brandWithBSBrand:](IMBrand, "brandWithBSBrand:");
    v14 = (id)objc_claimAutoreleasedReturnValue();
    (*(void (**)(uint64_t))(v2 + 16))(v2);

    return;
  }
  v3 = *(id *)(a1 + 40);
  objc_msgSend(v3, "domain");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if (!objc_msgSend(v4, "isEqualToString:", CFSTR("com.apple.BusinessServicesUI.BrandManager")))
  {

LABEL_11:
    if (IMOSLoggingEnabled())
    {
      OSLogHandleForIMFoundationCategory();
      v12 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
      {
        v13 = *(_QWORD *)(a1 + 48);
        *(_DWORD *)buf = 138412290;
        v18 = v13;
        _os_log_impl(&dword_19E239000, v12, OS_LOG_TYPE_INFO, "Error getting mapItem for business with messageUID: %@", buf, 0xCu);
      }

    }
    goto LABEL_15;
  }
  v5 = objc_msgSend(v3, "code");

  if (v5)
    goto LABEL_11;
  if (IMOSLoggingEnabled())
  {
    OSLogHandleForIMFoundationCategory();
    v6 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      v7 = *(_QWORD *)(a1 + 48);
      *(_DWORD *)buf = 138412290;
      v18 = v7;
      _os_log_impl(&dword_19E239000, v6, OS_LOG_TYPE_INFO, "Error getting mapItem for business with messageUID: %@ - not found", buf, 0xCu);
    }

  }
  v8 = (void *)MEMORY[0x1E0CB35C8];
  v9 = *(_QWORD *)(a1 + 40);
  v15 = *MEMORY[0x1E0CB3388];
  v16 = v9;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v16, &v15, 1);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "errorWithDomain:code:userInfo:", CFSTR("BrandManagerErrorDomain"), 1, v10);
  v11 = objc_claimAutoreleasedReturnValue();

  v3 = (id)v11;
LABEL_15:
  (*(void (**)(void))(*(_QWORD *)(a1 + 56) + 16))();

}

void IMGreenTeaMessageReadLog()
{
  NSObject *CTGreenTeaOsLogHandle;
  NSObject *v1;
  int v2;
  const char *v3;
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  ct_green_tea_logger_create_static();
  CTGreenTeaOsLogHandle = getCTGreenTeaOsLogHandle();
  if (CTGreenTeaOsLogHandle)
  {
    v1 = CTGreenTeaOsLogHandle;
    if (os_log_type_enabled(CTGreenTeaOsLogHandle, OS_LOG_TYPE_INFO))
    {
      v2 = 136315138;
      v3 = "Messages";
      _os_log_impl(&dword_19E239000, v1, OS_LOG_TYPE_INFO, "Message read by: %s", (uint8_t *)&v2, 0xCu);
    }
  }
}

void IMGreenTeaMessageDeleteLog()
{
  NSObject *CTGreenTeaOsLogHandle;
  NSObject *v1;
  int v2;
  const char *v3;
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  ct_green_tea_logger_create_static();
  CTGreenTeaOsLogHandle = getCTGreenTeaOsLogHandle();
  if (CTGreenTeaOsLogHandle)
  {
    v1 = CTGreenTeaOsLogHandle;
    if (os_log_type_enabled(CTGreenTeaOsLogHandle, OS_LOG_TYPE_INFO))
    {
      v2 = 136315138;
      v3 = "Messages";
      _os_log_impl(&dword_19E239000, v1, OS_LOG_TYPE_INFO, "Message deleted by: %s", (uint8_t *)&v2, 0xCu);
    }
  }
}

void IMGreenTeaMessageTransmitLog()
{
  NSObject *CTGreenTeaOsLogHandle;
  NSObject *v1;
  int v2;
  const char *v3;
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  ct_green_tea_logger_create_static();
  CTGreenTeaOsLogHandle = getCTGreenTeaOsLogHandle();
  if (CTGreenTeaOsLogHandle)
  {
    v1 = CTGreenTeaOsLogHandle;
    if (os_log_type_enabled(CTGreenTeaOsLogHandle, OS_LOG_TYPE_INFO))
    {
      v2 = 136315138;
      v3 = "Messages";
      _os_log_impl(&dword_19E239000, v1, OS_LOG_TYPE_INFO, "Message trasmitted by: %s", (uint8_t *)&v2, 0xCu);
    }
  }
}

void IMGreenTeaPhoneNumberTransmitLog()
{
  NSObject *CTGreenTeaOsLogHandle;
  NSObject *v1;
  int v2;
  const char *v3;
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  ct_green_tea_logger_create_static();
  CTGreenTeaOsLogHandle = getCTGreenTeaOsLogHandle();
  if (CTGreenTeaOsLogHandle)
  {
    v1 = CTGreenTeaOsLogHandle;
    if (os_log_type_enabled(CTGreenTeaOsLogHandle, OS_LOG_TYPE_INFO))
    {
      v2 = 136315138;
      v3 = "Messages";
      _os_log_impl(&dword_19E239000, v1, OS_LOG_TYPE_INFO, "Phone number transmitted by: %s", (uint8_t *)&v2, 0xCu);
    }
  }
}

void IMGreenTeaReceived2FACode(void *a1, void *a2)
{
  NSObject *CTGreenTeaOsLogHandle;
  NSObject *v5;
  int v6;
  uint64_t v7;
  __int16 v8;
  uint64_t v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  ct_green_tea_logger_create_static();
  CTGreenTeaOsLogHandle = getCTGreenTeaOsLogHandle();
  if (CTGreenTeaOsLogHandle)
  {
    v5 = CTGreenTeaOsLogHandle;
    if (os_log_type_enabled(CTGreenTeaOsLogHandle, OS_LOG_TYPE_INFO))
    {
      v6 = 136315394;
      v7 = objc_msgSend(a1, "UTF8String");
      v8 = 2080;
      v9 = objc_msgSend(a2, "UTF8String");
      _os_log_impl(&dword_19E239000, v5, OS_LOG_TYPE_INFO, "Incoming message from: %s -- found token: %s", (uint8_t *)&v6, 0x16u);
    }
  }
}

void IMGreenTeaAttachmentReadLoggingFormat(void *a1)
{
  NSObject *CTGreenTeaOsLogHandle;
  NSObject *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  ct_green_tea_logger_create_static();
  CTGreenTeaOsLogHandle = getCTGreenTeaOsLogHandle();
  if (CTGreenTeaOsLogHandle)
  {
    v3 = CTGreenTeaOsLogHandle;
    if (os_log_type_enabled(CTGreenTeaOsLogHandle, OS_LOG_TYPE_INFO))
    {
      v4 = 136315138;
      v5 = objc_msgSend(a1, "UTF8String");
      _os_log_impl(&dword_19E239000, v3, OS_LOG_TYPE_INFO, "Attachment read: %s", (uint8_t *)&v4, 0xCu);
    }
  }
}

void IMGreenTeaAttachmentTransmitLoggingFormat(void *a1)
{
  NSObject *CTGreenTeaOsLogHandle;
  NSObject *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  ct_green_tea_logger_create_static();
  CTGreenTeaOsLogHandle = getCTGreenTeaOsLogHandle();
  if (CTGreenTeaOsLogHandle)
  {
    v3 = CTGreenTeaOsLogHandle;
    if (os_log_type_enabled(CTGreenTeaOsLogHandle, OS_LOG_TYPE_INFO))
    {
      v4 = 136315138;
      v5 = objc_msgSend(a1, "UTF8String");
      _os_log_impl(&dword_19E239000, v3, OS_LOG_TYPE_INFO, "Attachment transmitted: %s", (uint8_t *)&v4, 0xCu);
    }
  }
}

void sub_19E2FD0BC()
{
  JUMPOUT(0x19E2FD0C4);
}

void sub_19E2FD0FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,os_activity_scope_state_s state)
{
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

void sub_19E2FD118(uint64_t a1, int a2, void *a3, double a4, double a5)
{
  uint64_t v10;
  id v11;

  v11 = a3;
  if (v11 || !a2)
  {
    objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40), a3);
  }
  else
  {
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 1;
    v10 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
    *(double *)(v10 + 32) = a4;
    *(double *)(v10 + 40) = a5;
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));

}

uint64_t sub_19E2FD1B4()
{
  uint64_t result;

  result = MEMORY[0x1A1AE7D4C](CFSTR("BSBrand"), CFSTR("BusinessServices"));
  qword_1EE504470 = result;
  return result;
}

IMMessageNotificationTimeManager *sub_19E2FDDB8()
{
  IMMessageNotificationTimeManager *result;

  result = objc_alloc_init(IMMessageNotificationTimeManager);
  qword_1ECFC75E8 = (uint64_t)result;
  return result;
}

void sub_19E2FED34(uint64_t a1)
{
  NSObject *v2;
  uint8_t v3[16];

  if (IMOSLoggingEnabled())
  {
    v2 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)v3 = 0;
      _os_log_impl(&dword_19E239000, v2, OS_LOG_TYPE_INFO, "Invalidated unsuspend assertion", v3, 2u);
    }
  }
  objc_msgSend(*(id *)(a1 + 32), "invalidate");

}

void *IMSharedHelperCombinedPluginPayloadDictionaryData(void *a1, void *a2)
{
  __CFDictionary *v4;
  __CFDictionary *v5;
  uint64_t v6;

  if (!objc_msgSend(a1, "length") || !objc_msgSend(a2, "count"))
    return a1;
  v4 = (__CFDictionary *)objc_alloc_init(MEMORY[0x1E0C99E08]);
  v5 = v4;
  if (a1)
    CFDictionarySetValue(v4, CFSTR("__payload__"), a1);
  if (a2)
    CFDictionarySetValue(v5, CFSTR("__attachments__"), a2);
  v6 = JWEncodeDictionary();

  return (void *)v6;
}

uint64_t IMSharedHelperPayloadFromCombinedPluginPayloadData(uint64_t a1, _QWORD *a2)
{
  void *v4;

  v4 = (void *)JWDecodeDictionary();
  if (!objc_msgSend((id)objc_msgSend(v4, "objectForKeyedSubscript:", CFSTR("__payload__")), "length"))
    return a1;
  if (a2)
    *a2 = objc_msgSend(v4, "objectForKeyedSubscript:", CFSTR("__attachments__"));
  return objc_msgSend(v4, "objectForKeyedSubscript:", CFSTR("__payload__"));
}

uint64_t IMSharedHelperCombinedPluginPayloadDictionaryDataWithAttachmentURLs(const void *a1, void *a2)
{
  __CFArray *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  uint64_t v8;
  const void *v9;
  NSObject *v10;
  uint64_t v11;
  __CFDictionary *theDict;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint8_t buf[4];
  uint64_t v20;
  __int16 v21;
  uint64_t v22;
  _BYTE v23[128];
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  if (!a1)
    return 0;
  theDict = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  CFDictionarySetValue(theDict, CFSTR("__payload__"), a1);
  v4 = (__CFArray *)objc_alloc_init(MEMORY[0x1E0C99DE8]);
  v15 = 0u;
  v16 = 0u;
  v17 = 0u;
  v18 = 0u;
  v5 = objc_msgSend(a2, "countByEnumeratingWithState:objects:count:", &v15, v23, 16);
  if (v5)
  {
    v6 = *(_QWORD *)v16;
    do
    {
      for (i = 0; i != v5; ++i)
      {
        if (*(_QWORD *)v16 != v6)
          objc_enumerationMutation(a2);
        v8 = *(_QWORD *)(*((_QWORD *)&v15 + 1) + 8 * i);
        v14 = 0;
        v9 = (const void *)objc_msgSend(MEMORY[0x1E0C99D50], "dataWithContentsOfURL:options:error:", v8, 1, &v14);
        if (v14)
        {
          if (IMOSLoggingEnabled())
          {
            v10 = OSLogHandleForIMFoundationCategory();
            if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)buf = 138412546;
              v20 = v14;
              v21 = 2112;
              v22 = v8;
              _os_log_impl(&dword_19E239000, v10, OS_LOG_TYPE_INFO, "IMSharedHelper IMSharedHelperCombinedPluginPayloadDictionaryDataWithAttachmentURLs fileReadError %@ file %@", buf, 0x16u);
            }
          }
          v9 = (const void *)objc_msgSend(MEMORY[0x1E0C99D50], "data");
        }
        if (v4 && v9)
          CFArrayAppendValue(v4, v9);
      }
      v5 = objc_msgSend(a2, "countByEnumeratingWithState:objects:count:", &v15, v23, 16);
    }
    while (v5);
  }
  if (v4)
    CFDictionarySetValue(theDict, CFSTR("__attachments__"), v4);
  v11 = JWEncodeDictionary();

  return v11;
}

uint64_t IMSharedHelperExtractPayloadURL(void *a1)
{
  uint64_t v2;
  void *v3;
  NSObject *v4;
  void *v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v9;
  uint8_t buf[4];
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  if (!objc_msgSend(a1, "length"))
    return 0;
  v2 = IMExtensionPayloadUnarchivingClasses();
  v9 = 0;
  v3 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3710]), "initForReadingFromData:error:", a1, &v9);
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    objc_msgSend(v3, "_enableStrictSecureDecodingMode");
    if (IMOSLoggingEnabled())
    {
      v4 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_19E239000, v4, OS_LOG_TYPE_INFO, "strict-decoding 005 _enableStrictSecureDecodingMode called", buf, 2u);
      }
    }
  }
  v5 = (void *)objc_msgSend(v3, "decodeObjectOfClasses:forKey:", v2, *MEMORY[0x1E0CB2CD0]);
  if (v9)
  {
    if (IMOSLoggingEnabled())
    {
      v6 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412290;
        v11 = v9;
        _os_log_impl(&dword_19E239000, v6, OS_LOG_TYPE_INFO, "Failed to unarchive payload URL. Error: %@", buf, 0xCu);
      }
    }
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v7 = IMSanitizedURLForIMExtensionPayloadURLKey(v5);
  else
    v7 = 0;

  return v7;
}

uint64_t IMSharedHelperIsMakoURI(void *a1)
{
  uint64_t result;

  result = objc_msgSend(a1, "length");
  if (result)
    return objc_msgSend(a1, "isEqualToString:", CFSTR("urn:biz:e46750f1-3f94-4aba-73ca-1c14fb3adddd"));
  return result;
}

uint64_t IMSharedHelperIsAppleURI(void *a1)
{
  uint64_t result;

  result = objc_msgSend(a1, "length");
  if (result)
    return objc_msgSend(a1, "isEqualToString:", CFSTR("urn:biz:b15ed773-9eed-11e7-baa2-7b88b04daa8e"));
  return result;
}

uint64_t IMSharedHelperEnsureDirectoryExistsAtPath(uint64_t a1)
{
  uint64_t result;
  uint64_t v2;

  result = objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager"), "fileExistsAtPath:", a1);
  if ((result & 1) == 0)
  {
    v2 = objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
    return MEMORY[0x1E0DE7D20](v2, sel_makeDirectoriesInPath_mode_);
  }
  return result;
}

uint64_t IMSharedHelperMD5DataHashOfFileAtPath(uint64_t a1)
{
  NSObject *v2;
  void *v3;
  uint64_t v4;
  void *v5;
  void *i;
  void *v7;
  NSObject *v9;
  const char *v10;
  _QWORD v11[2];
  CC_MD5_CTX buf;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  if (IMOSLoggingEnabled())
  {
    v2 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      buf.A = 138412290;
      *(_QWORD *)&buf.B = a1;
      _os_log_impl(&dword_19E239000, v2, OS_LOG_TYPE_INFO, "About to hash file at path %@", (uint8_t *)&buf, 0xCu);
    }
  }
  if (!a1)
  {
    if (!IMOSLoggingEnabled())
      return 0;
    v9 = OSLogHandleForIMFoundationCategory();
    if (!os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
      return 0;
    LOWORD(buf.A) = 0;
    v10 = "IMSharedHelperMD5HashStringOfFileAtPath nil file path";
    goto LABEL_17;
  }
  v3 = (void *)objc_msgSend(MEMORY[0x1E0CB3608], "fileHandleForReadingAtPath:", a1);
  if (!v3)
  {
    if (!IMOSLoggingEnabled())
      return 0;
    v9 = OSLogHandleForIMFoundationCategory();
    if (!os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
      return 0;
    LOWORD(buf.A) = 0;
    v10 = "IMSharedHelperMD5HashStringOfFileAtPath could not generate filehandle";
LABEL_17:
    _os_log_impl(&dword_19E239000, v9, OS_LOG_TYPE_INFO, v10, (uint8_t *)&buf, 2u);
    return 0;
  }
  memset(&buf, 0, sizeof(buf));
  v4 = CC_MD5_Init(&buf);
  v5 = (void *)MEMORY[0x1A1AE8394](v4);
  for (i = (void *)objc_msgSend(v3, "readDataOfLength:", 0x80000);
        ;
        i = (void *)objc_msgSend(v3, "readDataOfLength:", 0x80000))
  {
    v7 = i;
    if (!i || !objc_msgSend(i, "length"))
      break;
    CC_MD5_Update(&buf, (const void *)objc_msgSend(v7, "bytes"), objc_msgSend(v7, "length"));
    objc_autoreleasePoolPop(v5);
    v5 = (void *)MEMORY[0x1A1AE8394]();
  }
  objc_autoreleasePoolPop(v5);
  v11[0] = 0;
  v11[1] = 0;
  CC_MD5_Final((unsigned __int8 *)v11, &buf);
  return objc_msgSend(MEMORY[0x1E0C99D50], "dataWithBytes:length:", v11, 16);
}

unsigned __int8 *IMSharedHelperMD5HashOfFileAtPath(uint64_t a1)
{
  NSObject *v2;
  void *v3;
  uint64_t v4;
  void *v5;
  void *i;
  void *v7;
  NSObject *v9;
  const char *v10;
  _QWORD v11[2];
  CC_MD5_CTX buf;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  if (IMOSLoggingEnabled())
  {
    v2 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      buf.A = 138412290;
      *(_QWORD *)&buf.B = a1;
      _os_log_impl(&dword_19E239000, v2, OS_LOG_TYPE_INFO, "About to hash file at path %@", (uint8_t *)&buf, 0xCu);
    }
  }
  if (!a1)
  {
    if (!IMOSLoggingEnabled())
      return 0;
    v9 = OSLogHandleForIMFoundationCategory();
    if (!os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
      return 0;
    LOWORD(buf.A) = 0;
    v10 = "IMSharedHelperMD5HashStringOfFileAtPath nil file path";
    goto LABEL_17;
  }
  v3 = (void *)objc_msgSend(MEMORY[0x1E0CB3608], "fileHandleForReadingAtPath:", a1);
  if (!v3)
  {
    if (!IMOSLoggingEnabled())
      return 0;
    v9 = OSLogHandleForIMFoundationCategory();
    if (!os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
      return 0;
    LOWORD(buf.A) = 0;
    v10 = "IMSharedHelperMD5HashStringOfFileAtPath could not generate filehandle";
LABEL_17:
    _os_log_impl(&dword_19E239000, v9, OS_LOG_TYPE_INFO, v10, (uint8_t *)&buf, 2u);
    return 0;
  }
  memset(&buf, 0, sizeof(buf));
  v4 = CC_MD5_Init(&buf);
  v5 = (void *)MEMORY[0x1A1AE8394](v4);
  for (i = (void *)objc_msgSend(v3, "readDataOfLength:", 0x80000);
        ;
        i = (void *)objc_msgSend(v3, "readDataOfLength:", 0x80000))
  {
    v7 = i;
    if (!i || !objc_msgSend(i, "length"))
      break;
    CC_MD5_Update(&buf, (const void *)objc_msgSend(v7, "bytes"), objc_msgSend(v7, "length"));
    objc_autoreleasePoolPop(v5);
    v5 = (void *)MEMORY[0x1A1AE8394]();
  }
  objc_autoreleasePoolPop(v5);
  v11[0] = 0;
  v11[1] = 0;
  CC_MD5_Final((unsigned __int8 *)v11, &buf);
  return IMSharedHelperMd5ToString((unsigned __int8 *)v11);
}

unsigned __int8 *IMSharedHelperMd5ToString(unsigned __int8 *result)
{
  uint64_t v1;
  unsigned int v2;
  char *v3;
  _QWORD v4[2];
  char v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  if (result)
  {
    v1 = 0;
    v4[0] = 0;
    v4[1] = 0;
    v5 = 0;
    do
    {
      v2 = *result++;
      v3 = (char *)v4 + v1;
      *v3 = a0123456789abcd[(unint64_t)v2 >> 4];
      v3[1] = a0123456789abcd[v2 & 0xF];
      v1 += 2;
    }
    while (v1 != 16);
    return (unsigned __int8 *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithCString:encoding:", v4, 4);
  }
  return result;
}

unsigned __int8 *IMSharedHelperMD5HashPlist(void *a1)
{
  CC_MD5_CTX v3;
  unsigned __int8 md[8];
  uint64_t v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  memset(&v3, 0, sizeof(v3));
  CC_MD5_Init(&v3);
  if (!a1 || !sub_19E2FFA70(a1, &v3))
    return 0;
  *(_QWORD *)md = 0;
  v5 = 0;
  CC_MD5_Final(md, &v3);
  return IMSharedHelperMd5ToString(md);
}

uint64_t sub_19E2FFA70(void *a1, CC_MD5_CTX *c)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _BYTE v16[128];
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  CC_MD5_Update(c, "NSDictionary{", 0xDu);
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  v4 = (void *)objc_msgSend((id)objc_msgSend(a1, "allKeys", 0), "sortedArrayUsingSelector:", sel_compare_);
  v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
  if (v5)
  {
    v6 = v5;
    v7 = *(_QWORD *)v13;
    while (2)
    {
      v8 = 0;
      do
      {
        if (*(_QWORD *)v13 != v7)
          objc_enumerationMutation(v4);
        v9 = *(void **)(*((_QWORD *)&v12 + 1) + 8 * v8);
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) == 0)
          return 0;
        sub_19E3030B0(v9, c);
        CC_MD5_Update(c, ":", 1u);
        if (!sub_19E303140((void *)objc_msgSend(a1, "objectForKeyedSubscript:", v9), c))
          return 0;
        CC_MD5_Update(c, ",", 1u);
        ++v8;
      }
      while (v6 != v8);
      v6 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
      if (v6)
        continue;
      break;
    }
  }
  v10 = 1;
  CC_MD5_Update(c, "}", 1u);
  return v10;
}

unsigned __int8 *IMSharedHelperMD5OfData(void *a1)
{
  unsigned __int8 md[8];
  uint64_t v3;
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)md = 0;
  v3 = 0;
  CC_MD5((const void *)objc_msgSend(a1, "bytes"), objc_msgSend(a1, "length"), md);
  return IMSharedHelperMd5ToString(md);
}

uint64_t IMSharedHelperMD5OfDataInBytes(void *a1)
{
  unsigned __int8 md[8];
  uint64_t v3;
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)md = 0;
  v3 = 0;
  CC_MD5((const void *)objc_msgSend(a1, "bytes"), objc_msgSend(a1, "length"), md);
  return objc_msgSend(MEMORY[0x1E0C99D50], "dataWithBytes:length:", md, 16);
}

uint64_t IMSharedHelperCachePathForStickerWithProperties(void *a1, int a2)
{
  NSObject *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  NSObject *v10;
  NSObject *v11;
  uint8_t buf[4];
  uint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  if (IMOSLoggingEnabled())
  {
    v4 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138412290;
      v14 = (uint64_t)a1;
      _os_log_impl(&dword_19E239000, v4, OS_LOG_TYPE_INFO, "pathForStickerWithProperties %@", buf, 0xCu);
    }
  }
  if (objc_msgSend(a1, "objectForKey:", CFSTR("shash")) && objc_msgSend(a1, "objectForKey:", CFSTR("sid")))
  {
    v5 = (void *)objc_msgSend((id)objc_msgSend(IMStickerCacheDirectoryURL(), "path"), "stringByExpandingTildeInPath");
    v6 = (void *)objc_msgSend((id)objc_msgSend(a1, "objectForKey:", CFSTR("shash")), "lastPathComponent");
    v7 = (void *)objc_msgSend((id)objc_msgSend(a1, "objectForKey:", CFSTR("sid")), "lastPathComponent");
    v8 = (void *)objc_msgSend((id)objc_msgSend(v5, "stringByAppendingPathComponent:", objc_msgSend(v6, "stringByAppendingFormat:", CFSTR("-%@"), objc_msgSend(v7, "stringByDeletingPathExtension"))), "stringByAppendingPathComponent:", v7);
    v9 = (uint64_t)v8;
    if (a2)
      v9 = objc_msgSend(v8, "stringByAppendingPathExtension:", CFSTR("heic"));
    if (IMOSLoggingEnabled())
    {
      v10 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412290;
        v14 = v9;
        _os_log_impl(&dword_19E239000, v10, OS_LOG_TYPE_INFO, "Resulting path %@", buf, 0xCu);
      }
    }
  }
  else
  {
    if (IMOSLoggingEnabled())
    {
      v11 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_19E239000, v11, OS_LOG_TYPE_INFO, "IMSharedHelper ivalid parameters passed in to pathForStickerWithProperties", buf, 2u);
      }
    }
    return 0;
  }
  return v9;
}

void IMSharedHelperDeleteOrphanedStickerMMCSDownloadTokens(void *a1)
{
  NSObject *v2;
  uint64_t v3;
  void *v4;
  NSObject *v5;
  void *v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  uint64_t i;
  void *v11;
  uint64_t v12;
  void *v13;
  void *v14;
  double v15;
  double v16;
  double v17;
  double v18;
  NSObject *v19;
  double v20;
  _BOOL4 v21;
  int v22;
  NSObject *v23;
  NSObject *v24;
  NSObject *v25;
  const char *v26;
  NSObject *v27;
  uint64_t v28;
  NSObject *v29;
  uint32_t v30;
  NSObject *v31;
  __int128 v32;
  double v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  double v38;
  uint8_t v39[128];
  uint8_t buf[4];
  uint64_t v41;
  __int16 v42;
  double v43;
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  if (IMOSLoggingEnabled())
  {
    v2 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_19E239000, v2, OS_LOG_TYPE_INFO, "IMSharedHelperDeleteOrphanedStickerMMCSDownloadTokens", buf, 2u);
    }
  }
  v3 = objc_msgSend(a1, "stringByExpandingTildeInPath");
  v38 = 0.0;
  v4 = (void *)objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager"), "contentsOfDirectoryAtPath:error:", v3, &v38);
  if (v38 == 0.0)
  {
    v6 = v4;
    v36 = 0u;
    v37 = 0u;
    v34 = 0u;
    v35 = 0u;
    v7 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v34, v39, 16);
    if (!v7)
      return;
    v9 = *(_QWORD *)v35;
    *(_QWORD *)&v8 = 67109120;
    v32 = v8;
    while (1)
    {
      for (i = 0; i != v7; ++i)
      {
        if (*(_QWORD *)v35 != v9)
          objc_enumerationMutation(v6);
        v11 = *(void **)(*((_QWORD *)&v34 + 1) + 8 * i);
        if (objc_msgSend((id)objc_msgSend(v11, "pathExtension", v32), "isEqualToString:", CFSTR("plist")))
        {
          v12 = objc_msgSend(a1, "stringByAppendingPathComponent:", v11);
          v13 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99D80]), "initWithContentsOfFile:", v12);
          v14 = v13;
          if (v13)
          {
            objc_msgSend((id)objc_msgSend(v13, "objectForKey:", CFSTR("sticker-TimeInterval")), "doubleValue");
            v16 = v15;
            objc_msgSend(MEMORY[0x1E0C99D68], "timeIntervalSinceReferenceDate");
            v18 = v17;
            if (IMOSLoggingEnabled())
            {
              v19 = OSLogHandleForIMFoundationCategory();
              if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
              {
                *(_DWORD *)buf = v32;
                LODWORD(v41) = 3456000;
                _os_log_impl(&dword_19E239000, v19, OS_LOG_TYPE_INFO, "Target time difference %d", buf, 8u);
              }
            }
            v20 = v18 - v16;
            v21 = v20 > 0.0 && v20 > 3456000.0;
            v22 = IMOSLoggingEnabled();
            if (v21)
            {
              if (v22)
              {
                v23 = OSLogHandleForIMEventCategory();
                if (os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
                {
                  *(_DWORD *)buf = 138412546;
                  v41 = v12;
                  v42 = 2048;
                  v43 = v20;
                  _os_log_impl(&dword_19E239000, v23, OS_LOG_TYPE_INFO, "Will delete file at location %@ timeDifference %f", buf, 0x16u);
                }
              }
              v33 = 0.0;
              objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager"), "removeItemAtPath:error:", v12, &v33);
              if (v33 != 0.0)
              {
                if (IMOSLoggingEnabled())
                {
                  v24 = OSLogHandleForIMFoundationCategory();
                  if (os_log_type_enabled(v24, OS_LOG_TYPE_INFO))
                  {
                    *(_DWORD *)buf = 138412546;
                    v41 = v12;
                    v42 = 2112;
                    v43 = v33;
                    v25 = v24;
                    v26 = "IMSharedHelperDeleteOrphanedStickerMMCSDownloadTokens could not delete file path %@ error %@";
                    goto LABEL_38;
                  }
                }
              }
LABEL_40:

              continue;
            }
            if (!v22)
              goto LABEL_40;
            v31 = OSLogHandleForIMFoundationCategory();
            if (!os_log_type_enabled(v31, OS_LOG_TYPE_INFO))
              goto LABEL_40;
            *(_DWORD *)buf = 138412546;
            v41 = v12;
            v42 = 2048;
            v43 = v20;
            v25 = v31;
            v26 = "Will NOT delete file at location %@ timeDifference %f";
LABEL_38:
            v30 = 22;
          }
          else
          {
            if (!IMOSLoggingEnabled())
              goto LABEL_40;
            v29 = OSLogHandleForIMFoundationCategory();
            if (!os_log_type_enabled(v29, OS_LOG_TYPE_INFO))
              goto LABEL_40;
            *(_DWORD *)buf = 138412290;
            v41 = v12;
            v25 = v29;
            v26 = "IMSharedHelperDeleteOrphanedStickerMMCSDownloadTokens Not deleting file %@ unable to read plist";
            v30 = 12;
          }
          _os_log_impl(&dword_19E239000, v25, OS_LOG_TYPE_INFO, v26, buf, v30);
          goto LABEL_40;
        }
        if (IMOSLoggingEnabled())
        {
          v27 = OSLogHandleForIMFoundationCategory();
          if (os_log_type_enabled(v27, OS_LOG_TYPE_INFO))
          {
            v28 = objc_msgSend(a1, "stringByAppendingPathComponent:", v11);
            *(_DWORD *)buf = 138412290;
            v41 = v28;
            _os_log_impl(&dword_19E239000, v27, OS_LOG_TYPE_INFO, "IMSharedHelperDeleteOrphanedStickerMMCSDownloadTokens Not deleting file %@ due to extension mismatch", buf, 0xCu);
          }
        }
      }
      v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v34, v39, 16);
      if (!v7)
        return;
    }
  }
  if (IMOSLoggingEnabled())
  {
    v5 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138412546;
      v41 = v3;
      v42 = 2112;
      v43 = v38;
      _os_log_impl(&dword_19E239000, v5, OS_LOG_TYPE_INFO, "IMSharedHelperDeleteOrphanedStickerMMCSDownloadTokens error reading contents of directory at path %@ fileError %@", buf, 0x16u);
    }
  }
}

uint64_t IMIsRunningInAutomation()
{
  uint64_t result;

  result = objc_msgSend((id)objc_msgSend(MEMORY[0x1E0D36A50], "sharedInstance"), "isInternalInstall");
  if ((_DWORD)result)
    return IMGetCachedDomainBoolForKey();
  return result;
}

uint64_t IMIsRunningInDebugMode()
{
  uint64_t result;

  result = objc_msgSend((id)objc_msgSend(MEMORY[0x1E0D36A50], "sharedInstance"), "isInternalInstall");
  if ((_DWORD)result)
    return IMGetCachedDomainBoolForKey();
  return result;
}

BOOL IMIsRunningOnAudioAccessory()
{
  return MGGetSInt32Answer() == 7;
}

uint64_t IMBagIntValueWithDefault(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  void *v4;
  uint64_t v5;

  v3 = objc_msgSend((id)objc_msgSend(MEMORY[0x1E0D34E78], "sharedInstanceForBagType:", 1), "objectForKey:", a2);
  if (v3)
  {
    v4 = (void *)v3;
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      v5 = objc_msgSend(v4, "longLongValue");
      if (v5 > 0)
        return v5;
    }
  }
  return a1;
}

double IMBagDoubleValueWithDefault(uint64_t a1, double a2)
{
  uint64_t v3;
  void *v4;
  double v5;

  v3 = objc_msgSend((id)objc_msgSend(MEMORY[0x1E0D34E78], "sharedInstanceForBagType:", 1), "objectForKey:", a1);
  if (v3)
  {
    v4 = (void *)v3;
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      objc_msgSend(v4, "doubleValue");
      if (v5 > 0.0)
        return v5;
    }
  }
  return a2;
}

uint64_t IMBagBoolValueWithDefault(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  void *v4;

  v3 = objc_msgSend((id)objc_msgSend(MEMORY[0x1E0D34E78], "sharedInstanceForBagType:", 1), "objectForKey:", a2);
  if (v3 && (v4 = (void *)v3, objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
    return objc_msgSend(v4, "BOOLValue");
  else
    return a1;
}

uint64_t IMIsRunningInMessagesExtension()
{
  if (qword_1ECFC7208 != -1)
    dispatch_once(&qword_1ECFC7208, &unk_1E3FB1828);
  return byte_1EE503D78;
}

CFStringRef sub_19E300758()
{
  __CFBundle *MainBundle;
  CFStringRef result;
  BOOL v2;

  MainBundle = CFBundleGetMainBundle();
  result = CFBundleGetIdentifier(MainBundle);
  if (result)
  {
    result = (CFStringRef)CFEqual(result, CFSTR("com.apple.MobileSMS.MessagesNotificationExtension"));
    v2 = (_DWORD)result != 0;
  }
  else
  {
    v2 = 0;
  }
  byte_1EE503D78 = v2;
  return result;
}

uint64_t IMIsRunningInMessagesTranscriptExtension()
{
  if (qword_1ECFC6F88 != -1)
    dispatch_once(&qword_1ECFC6F88, &unk_1E3FB8EC0);
  return byte_1EE503B08;
}

CFStringRef sub_19E3007D8()
{
  __CFBundle *MainBundle;
  CFStringRef result;
  BOOL v2;

  MainBundle = CFBundleGetMainBundle();
  result = CFBundleGetIdentifier(MainBundle);
  if (result)
  {
    result = (CFStringRef)CFEqual(result, CFSTR("com.apple.MobileSMS.MessagesTranscriptExtension"));
    v2 = (_DWORD)result != 0;
  }
  else
  {
    v2 = 0;
  }
  byte_1EE503B08 = v2;
  return result;
}

uint64_t IMIsRunningInMessagesUIProcess()
{
  if (qword_1ECFC6F90 != -1)
    dispatch_once(&qword_1ECFC6F90, &unk_1E3FB8EE0);
  return byte_1ECFC6DB0;
}

uint64_t sub_19E300858()
{
  uint64_t v0;
  uint64_t result;

  v0 = objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB34D0], "mainBundle"), "bundleIdentifier");
  result = objc_msgSend((id)objc_msgSend(MEMORY[0x1E0C99E60], "setWithArray:", &unk_1E3FFF200), "containsObject:", v0);
  byte_1ECFC6DB0 = result;
  return result;
}

uint64_t IMIsRunningInPhotosPersistenceDependentClient()
{
  uint64_t v0;

  v0 = objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB34D0], "mainBundle"), "bundleIdentifier");
  return objc_msgSend((id)objc_msgSend(MEMORY[0x1E0C99E60], "setWithArray:", &unk_1E3FFF200), "containsObject:", v0);
}

uint64_t IMIsRunningInMessagesMacOSX()
{
  if (qword_1EE504480 != -1)
    dispatch_once(&qword_1EE504480, &unk_1E3FB4648);
  return byte_1EE504478;
}

CFStringRef sub_19E30092C()
{
  __CFBundle *MainBundle;
  CFStringRef result;
  BOOL v2;

  MainBundle = CFBundleGetMainBundle();
  result = CFBundleGetIdentifier(MainBundle);
  if (result)
  {
    result = (CFStringRef)CFEqual(result, CFSTR("com.apple.iChat"));
    v2 = (_DWORD)result != 0;
  }
  else
  {
    v2 = 0;
  }
  byte_1EE504478 = v2;
  return result;
}

CFStringRef sub_19E30096C()
{
  __CFBundle *MainBundle;
  CFStringRef result;
  BOOL v2;

  MainBundle = CFBundleGetMainBundle();
  result = CFBundleGetIdentifier(MainBundle);
  if (result)
  {
    result = (CFStringRef)CFEqual(result, CFSTR("com.apple.Carousel"));
    v2 = (_DWORD)result != 0;
  }
  else
  {
    v2 = 0;
  }
  byte_1EE503838 = v2;
  return result;
}

uint64_t IMIsRunningInMessagesComposeViewService()
{
  if (qword_1ECFC70E8 != -1)
    dispatch_once(&qword_1ECFC70E8, &unk_1E3FB4708);
  return byte_1ECFC6C60;
}

CFStringRef sub_19E3009EC()
{
  __CFBundle *MainBundle;
  CFStringRef result;
  BOOL v2;

  MainBundle = CFBundleGetMainBundle();
  result = CFBundleGetIdentifier(MainBundle);
  if (result)
  {
    result = (CFStringRef)CFEqual(result, CFSTR("com.apple.mobilesms.compose"));
    v2 = (_DWORD)result != 0;
  }
  else
  {
    v2 = 0;
  }
  byte_1ECFC6C60 = v2;
  return result;
}

BOOL IMIsRunningInMessagesViewService()
{
  if (qword_1ECFC70E8 != -1)
    dispatch_once(&qword_1ECFC70E8, &unk_1E3FB4708);
  if (byte_1ECFC6C60)
    return 1;
  if (qword_1EE503B78 != -1)
    dispatch_once(&qword_1EE503B78, &unk_1E3FB1888);
  return byte_1EE504488 != 0;
}

uint64_t IMIsRunningInMessagesNotificationViewService()
{
  if (qword_1EE503B78 != -1)
    dispatch_once(&qword_1EE503B78, &unk_1E3FB1888);
  return byte_1EE504488;
}

CFStringRef sub_19E300AF0()
{
  __CFBundle *MainBundle;
  CFStringRef result;
  BOOL v2;

  MainBundle = CFBundleGetMainBundle();
  result = CFBundleGetIdentifier(MainBundle);
  if (result)
  {
    result = (CFStringRef)CFEqual(result, CFSTR("com.apple.mobilesms.notification"));
    v2 = (_DWORD)result != 0;
  }
  else
  {
    v2 = 0;
  }
  byte_1EE504488 = v2;
  return result;
}

uint64_t IMIsRunningInShareSheet()
{
  if (qword_1EE504498 != -1)
    dispatch_once(&qword_1EE504498, &unk_1E3FB18E8);
  return byte_1EE504490;
}

CFStringRef sub_19E300B70()
{
  __CFBundle *MainBundle;
  CFStringRef result;
  BOOL v2;

  MainBundle = CFBundleGetMainBundle();
  result = CFBundleGetIdentifier(MainBundle);
  if (result)
  {
    result = (CFStringRef)CFEqual(result, CFSTR("com.apple.messages.ShareExtension"));
    v2 = (_DWORD)result != 0;
  }
  else
  {
    v2 = 0;
  }
  byte_1EE504490 = v2;
  return result;
}

uint64_t IMIsRunningInScreenshotTesting()
{
  if (qword_1EE503830 != -1)
    dispatch_once(&qword_1EE503830, &unk_1E3FB3E68);
  return byte_1EE5044A0;
}

void sub_19E300BF0()
{
  void *v0;
  void *v1;
  void *v2;
  char v3;
  NSObject *v4;
  const __CFString *v5;
  int v6;
  const __CFString *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v0 = (void *)objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB3898], "processInfo"), "environment");
  if (!byte_1EE5044A0)
  {
    v1 = v0;
    v2 = (void *)objc_msgSend(v0, "objectForKeyedSubscript:", CFSTR("_"));
    if ((objc_msgSend(v2, "containsString:", CFSTR("xctest")) & 1) != 0)
    {
      v3 = 1;
LABEL_6:
      byte_1EE5044A0 = v3;
      goto LABEL_7;
    }
    byte_1EE5044A0 = objc_msgSend(v2, "containsString:", CFSTR("CKTestRunner"));
    if ((byte_1EE5044A0 & 1) == 0)
    {
      v3 = objc_msgSend((id)objc_msgSend(v1, "objectForKeyedSubscript:", CFSTR("IMIsRunningInScreenshotTesting")), "isEqualToString:", CFSTR("YES"));
      goto LABEL_6;
    }
  }
LABEL_7:
  if (IMOSLoggingEnabled())
  {
    v4 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      if (byte_1EE5044A0)
        v5 = CFSTR("YES");
      else
        v5 = CFSTR("NO");
      v6 = 138412290;
      v7 = v5;
      _os_log_impl(&dword_19E239000, v4, OS_LOG_TYPE_INFO, "IMIsRunningInScreenshotTesting %@", (uint8_t *)&v6, 0xCu);
    }
  }
}

uint64_t IMIsRunningInScreenshotTesting_IsolatedTranscriptUI()
{
  if (qword_1ECFC6D98 != -1)
    dispatch_once(&qword_1ECFC6D98, &unk_1E3FB2538);
  return byte_1EE5044A8;
}

void sub_19E300DB4()
{
  void *v0;
  void *v1;
  NSObject *v2;
  const __CFString *v3;
  int v4;
  const __CFString *v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v0 = (void *)objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB3898], "processInfo"), "environment");
  if (!byte_1EE5044A8)
  {
    v1 = v0;
    byte_1EE5044A8 = objc_msgSend((id)objc_msgSend(v0, "objectForKeyedSubscript:", CFSTR("_")), "containsString:", CFSTR("CKTestRunner"));
    if ((byte_1EE5044A8 & 1) == 0)
      byte_1EE5044A8 = objc_msgSend((id)objc_msgSend(v1, "objectForKeyedSubscript:", CFSTR("IMIsRunningInScreenshotTesting_IsolatedTranscriptUI")), "isEqualToString:", CFSTR("YES"));
  }
  if (IMOSLoggingEnabled())
  {
    v2 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      if (byte_1EE5044A8)
        v3 = CFSTR("YES");
      else
        v3 = CFSTR("NO");
      v4 = 138412290;
      v5 = v3;
      _os_log_impl(&dword_19E239000, v2, OS_LOG_TYPE_INFO, "IMIsRunningInScreenshotTesting_IsolatedTranscriptUI %@", (uint8_t *)&v4, 0xCu);
    }
  }
}

uint64_t IMSendAdditionalMMCSErrorInfoToMadrid()
{
  return IMGetCachedDomainBoolForKey();
}

BOOL IMSharedHelperPathIsInStickerCache(void *a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  _BOOL8 v4;
  NSObject *v5;
  const __CFString *v6;
  NSObject *v7;
  int v9;
  void *v10;
  __int16 v11;
  uint64_t v12;
  __int16 v13;
  const __CFString *v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v1 = (void *)objc_msgSend(a1, "stringByResolvingAndStandardizingPath");
    v2 = objc_msgSend((id)objc_msgSend(IMStickerCacheDirectoryURL(), "path"), "stringByResolvingAndStandardizingPath");
    v3 = objc_msgSend(v1, "rangeOfString:", v2);
    v4 = v3 != 0x7FFFFFFFFFFFFFFFLL;
    if (IMOSLoggingEnabled())
    {
      v5 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
      {
        v6 = CFSTR("NO");
        v9 = 138412802;
        v10 = v1;
        v11 = 2112;
        if (v3 != 0x7FFFFFFFFFFFFFFFLL)
          v6 = CFSTR("YES");
        v12 = v2;
        v13 = 2112;
        v14 = v6;
        _os_log_impl(&dword_19E239000, v5, OS_LOG_TYPE_INFO, "IMSharedHelperPathIsInStickerCache input path %@, cache %@ result %@", (uint8_t *)&v9, 0x20u);
      }
    }
  }
  else
  {
    if (IMOSLoggingEnabled())
    {
      v7 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
      {
        LOWORD(v9) = 0;
        _os_log_impl(&dword_19E239000, v7, OS_LOG_TYPE_INFO, "Invalid parameters to IMSharedHelperPathIsInStickerCache", (uint8_t *)&v9, 2u);
      }
    }
    return 0;
  }
  return v4;
}

uint64_t IMSharedHelperAppDisabledBundleIDsForAppCardSwipeGesture()
{
  void *v0;
  void *v1;
  NSObject *v2;
  int v4;
  uint64_t v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v0 = (void *)objc_msgSend(MEMORY[0x1E0D34E78], "sharedInstanceForBagType:", 1);
  if (v0)
  {
    v1 = (void *)objc_msgSend(v0, "objectForKey:", CFSTR("messages-app-card-swipe-disabled-bids"));
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      objc_msgSend(v1, "indexesOfObjectsPassingTest:", &unk_1E3FB3EC8);
      return MEMORY[0x1E0DE7D20](v1, sel_objectsAtIndexes_);
    }
  }
  else if (IMOSLoggingEnabled())
  {
    v2 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      v4 = 138412290;
      v5 = 0;
      _os_log_impl(&dword_19E239000, v2, OS_LOG_TYPE_INFO, "Invalid parameters serverBag: %@", (uint8_t *)&v4, 0xCu);
    }
  }
  return 0;
}

uint64_t sub_19E301200()
{
  objc_opt_class();
  return objc_opt_isKindOfClass() & 1;
}

uint64_t IMSharedHelperStickerAppsTemporarilyDisplayedInSendMenu()
{
  void *v0;
  void *v1;
  NSObject *v2;
  int v4;
  uint64_t v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v0 = (void *)objc_msgSend(MEMORY[0x1E0D34E78], "sharedInstanceForBagType:", 1);
  if (v0)
  {
    v1 = (void *)objc_msgSend(v0, "objectForKey:", CFSTR("messages-app-forced-out-of-stickers"));
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      objc_msgSend(v1, "indexesOfObjectsPassingTest:", &unk_1E3FB8FA0);
      return MEMORY[0x1E0DE7D20](v1, sel_objectsAtIndexes_);
    }
  }
  else if (IMOSLoggingEnabled())
  {
    v2 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      v4 = 138412290;
      v5 = 0;
      _os_log_impl(&dword_19E239000, v2, OS_LOG_TYPE_INFO, "Invalid parameters serverBag: %@", (uint8_t *)&v4, 0xCu);
    }
  }
  return 0;
}

uint64_t sub_19E301378()
{
  objc_opt_class();
  return objc_opt_isKindOfClass() & 1;
}

BOOL IMSharedHelperDeviceHasMultipleSubscriptionsWithAtLeastOneActive()
{
  _BOOL8 result;

  result = -[IMCTSubscriptionUtilities deviceSupportsMultipleSubscriptions](+[IMCTSubscriptionUtilities sharedInstance](IMCTSubscriptionUtilities, "sharedInstance"), "deviceSupportsMultipleSubscriptions");
  if (result)
    return -[IMCTSubscriptionUtilities numberOfSubscriptions](+[IMCTSubscriptionUtilities sharedInstance](IMCTSubscriptionUtilities, "sharedInstance"), "numberOfSubscriptions") != 0;
  return result;
}

uint64_t IMSharedHelperDeviceIsAltAccountDeviceWithActiveSubscription()
{
  return 0;
}

uint64_t IMNormalizePhoneNumber(uint64_t a1)
{
  const void *v2;
  uint64_t v3;
  NSObject *v4;
  int v6;
  uint64_t v7;
  __int16 v8;
  uint64_t v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  IMCountryCodeForIncomingTextMessage();
  v2 = (const void *)IMPhoneNumberRefCopyForPhoneNumber();
  v3 = IMNormalizedPhoneNumberForCFPhoneNumberRef();
  if (IMOSLoggingEnabled())
  {
    v4 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      v6 = 138412546;
      v7 = a1;
      v8 = 2112;
      v9 = v3;
      _os_log_impl(&dword_19E239000, v4, OS_LOG_TYPE_INFO, "Normalized phone number from: %@ to: %@", (uint8_t *)&v6, 0x16u);
    }
  }
  if (v2)
    CFRelease(v2);
  return v3;
}

uint64_t sub_19E301504(uint64_t a1)
{
  return MEMORY[0x1E0DE7D20](a1, sel___im_URLForChatIdentifier_entryBody_messageGUID_);
}

uint64_t sub_19E30150C(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, void *a5)
{
  void *v7;
  void *v8;

  if (!a3)
    return 0;
  v7 = (void *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("sms://open?groupid=%@"), a3);
  if (objc_msgSend(a4, "length"))
  {
    v8 = (void *)IMCopyURLEscapedString();
    v7 = (void *)objc_msgSend(v7, "stringByAppendingString:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("&body=%@"), v8));

  }
  if (objc_msgSend(a5, "length"))
    v7 = (void *)objc_msgSend(v7, "stringByAppendingString:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("&message-guid=%@"), a5));
  return objc_msgSend(MEMORY[0x1E0C99E98], "URLWithString:", v7);
}

uint64_t sub_19E3015E0(uint64_t a1)
{
  void *v1;
  void *v2;

  v1 = (void *)objc_msgSend(MEMORY[0x1E0CB3998], "componentsWithURL:resolvingAgainstBaseURL:", a1, 0);
  v2 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithArray:", objc_msgSend(v1, "queryItems"));
  objc_msgSend(v2, "addObject:", objc_msgSend(MEMORY[0x1E0CB39D8], "queryItemWithName:value:", CFSTR("compose"), CFSTR("false")));
  objc_msgSend(v1, "setQueryItems:", v2);
  return objc_msgSend(v1, "URL");
}

uint64_t sub_19E301664(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *v7;
  void *v8;
  void *v9;

  v7 = (void *)objc_msgSend(a1, "scheme");
  v8 = (void *)objc_msgSend(a1, "host");
  if (objc_msgSend(v7, "isEqualToString:", CFSTR("https"))
    && (v9 = (void *)objc_msgSend(v8, "componentsSeparatedByString:", CFSTR(".")),
        (unint64_t)objc_msgSend(v9, "count") >= 2)
    && objc_msgSend((id)objc_msgSend(v9, "lastObject"), "isEqualToString:", a4))
  {
    return objc_msgSend((id)objc_msgSend(v9, "objectAtIndex:", objc_msgSend(v9, "count") - 2), "isEqualToString:", a3);
  }
  else
  {
    return 0;
  }
}

uint64_t sub_19E301718(void *a1, uint64_t a2, uint64_t a3)
{
  void *v5;
  void *v6;
  uint64_t result;

  v5 = (void *)objc_msgSend(a1, "scheme");
  v6 = (void *)objc_msgSend(a1, "host");
  result = objc_msgSend(v5, "isEqualToString:", CFSTR("https"));
  if ((_DWORD)result)
    return objc_msgSend(v6, "hasSuffix:", a3);
  return result;
}

uint64_t IMSharedHelperIsOlderDevice()
{
  if (qword_1ECFC6FF8 != -1)
    dispatch_once(&qword_1ECFC6FF8, &unk_1E3FB8FC0);
  return byte_1EE5044B0;
}

void sub_19E3017C0()
{
  id v0;

  v0 = (id)MGCopyAnswer();
  if (objc_msgSend((id)objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:", CFSTR("n56ap"), 0), "containsObject:", objc_msgSend(v0, "lowercaseString")))byte_1EE5044B0 = 1;

}

uint64_t IMSharedHelperIsUnderAutomation()
{
  uint64_t result;

  result = objc_msgSend((id)objc_msgSend(MEMORY[0x1E0D36A50], "sharedInstance"), "isInternalInstall");
  if ((_DWORD)result)
    return IMGetCachedDomainBoolForKey();
  return result;
}

uint64_t sub_19E301874(void *a1, void *a2, void *a3, uint64_t a4, CCHmacAlgorithm a5)
{
  CCHmac(a5, (const void *)objc_msgSend(a2, "UTF8String"), objc_msgSend(a2, "lengthOfBytesUsingEncoding:", 4), (const void *)objc_msgSend(a1, "UTF8String"), objc_msgSend(a1, "lengthOfBytesUsingEncoding:", 4), a3);
  return objc_msgSend((id)objc_msgSend((id)objc_msgSend(MEMORY[0x1E0C99D50], "dataWithBytes:length:", a3, a4), "__imHexString"), "lowercaseString");
}

uint64_t IMSharedHelperHMACSHA256(void *a1, void *a2)
{
  NSObject *v5;
  _OWORD v6[2];
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  if (objc_msgSend(a1, "length") && objc_msgSend(a2, "length"))
  {
    memset(v6, 0, sizeof(v6));
    return sub_19E301874(a1, a2, v6, 32, 2u);
  }
  else
  {
    if (IMOSLoggingEnabled())
    {
      v5 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
      {
        LODWORD(v6[0]) = 138412546;
        *(_QWORD *)((char *)v6 + 4) = a1;
        WORD6(v6[0]) = 2112;
        *(_QWORD *)((char *)v6 + 14) = a2;
        _os_log_impl(&dword_19E239000, v5, OS_LOG_TYPE_INFO, "IMSharedHelperHMACSHA256: Invalid parameters %@ %@ ", (uint8_t *)v6, 0x16u);
      }
    }
    return 0;
  }
}

uint64_t IMIsRunningInImagent()
{
  if (qword_1ECFC7070 != -1)
    dispatch_once(&qword_1ECFC7070, &unk_1E3FB9000);
  return byte_1ECFC6EA8;
}

uint64_t sub_19E301A74()
{
  uint64_t result;

  result = objc_msgSend((id)objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB34D0], "mainBundle"), "bundleIdentifier"), "isEqualToString:", CFSTR("com.apple.imagent"));
  byte_1ECFC6EA8 = result;
  return result;
}

uint64_t IMIsRunningInGameCenter()
{
  if (qword_1EE5044C0 != -1)
    dispatch_once(&qword_1EE5044C0, &unk_1E3FB4068);
  return byte_1EE5044B8;
}

uint64_t sub_19E301AE8()
{
  uint64_t result;

  result = objc_msgSend((id)objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB34D0], "mainBundle"), "bundleIdentifier"), "isEqualToString:", CFSTR("com.apple.GameCenterUI.GameCenterMatchmakerExtension"));
  byte_1EE5044B8 = result;
  return result;
}

uint64_t __IMSharedHelperCheckPersistMergeID()
{
  int v0;
  NSObject *v1;
  uint64_t v2;
  NSObject *v3;
  uint8_t v5[16];
  uint8_t buf[16];

  v0 = objc_msgSend((id)objc_msgSend((id)objc_msgSend(MEMORY[0x1E0D34E78], "sharedInstanceForBagType:", 1), "objectForKey:", CFSTR("madrid-dont-persist-mergeid")), "BOOLValue");
  if (v0)
  {
    if (IMOSLoggingEnabled())
    {
      v1 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v1, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_19E239000, v1, OS_LOG_TYPE_INFO, "Not persisting merge ID due to server overrride", buf, 2u);
      }
    }
  }
  v2 = v0 ^ 1u;
  if (objc_msgSend((id)objc_msgSend(MEMORY[0x1E0D36A50], "sharedInstance"), "isInternalInstall")
    && IMGetDomainBoolForKeyWithDefaultValue())
  {
    if (IMOSLoggingEnabled())
    {
      v3 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)v5 = 0;
        _os_log_impl(&dword_19E239000, v3, OS_LOG_TYPE_INFO, "Not persisting merge ID due to user defaults override", v5, 2u);
      }
    }
    return 0;
  }
  return v2;
}

uint64_t sub_19E301C64()
{
  uint64_t result;

  result = __IMSharedHelperCheckPersistMergeID();
  byte_1EE4FF8F8 = result;
  return result;
}

void sub_19E301C80(uint64_t a1)
{
  NSObject *v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  const __CFString *v6;
  int v7;
  const __CFString *v8;
  __int16 v9;
  uint64_t v10;
  __int16 v11;
  uint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  if (IMOSLoggingEnabled())
  {
    v2 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      v3 = *(unsigned __int8 *)(a1 + 40);
      v4 = *(_QWORD *)(a1 + 32);
      v5 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", 1);
      v6 = CFSTR("YES");
      v7 = 138412802;
      if (!v3)
        v6 = CFSTR("NO");
      v8 = v6;
      v9 = 2112;
      v10 = v4;
      v11 = 2112;
      v12 = v5;
      _os_log_impl(&dword_19E239000, v2, OS_LOG_TYPE_INFO, "Server says we should keep nicknames on? %@ {serverbagValue: %@ version: %@}", (uint8_t *)&v7, 0x20u);
    }
  }
}

BOOL IMSharedHelperAlwaysShowNicknameBanners_0()
{
  void *v0;
  void *v1;
  _BOOL8 v2;
  _QWORD v4[5];
  BOOL v5;

  v0 = (void *)objc_msgSend((id)objc_msgSend(MEMORY[0x1E0D34E78], "sharedInstanceForBagType:", 1), "objectForKey:", CFSTR("always-show-nickname-banners-version"));
  v1 = v0;
  v2 = !v0 || !objc_msgSend(v0, "unsignedIntegerValue");
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 3221225472;
  v4[2] = sub_19E301E6C;
  v4[3] = &unk_1E3FB9028;
  v5 = v2;
  v4[4] = v1;
  if (qword_1EE503B50 != -1)
    dispatch_once(&qword_1EE503B50, v4);
  return v2;
}

void sub_19E301E6C(uint64_t a1)
{
  NSObject *v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  const __CFString *v6;
  int v7;
  const __CFString *v8;
  __int16 v9;
  uint64_t v10;
  __int16 v11;
  uint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  if (IMOSLoggingEnabled())
  {
    v2 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      v3 = *(unsigned __int8 *)(a1 + 40);
      v4 = *(_QWORD *)(a1 + 32);
      v5 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", 0);
      v6 = CFSTR("YES");
      v7 = 138412802;
      if (!v3)
        v6 = CFSTR("NO");
      v8 = v6;
      v9 = 2112;
      v10 = v4;
      v11 = 2112;
      v12 = v5;
      _os_log_impl(&dword_19E239000, v2, OS_LOG_TYPE_INFO, "Server says we should always show nickname banners? %@ {serverbagValue: %@ version: %@}", (uint8_t *)&v7, 0x20u);
    }
  }
}

uint64_t IMSharedHelperMacConversationMergingEnabled()
{
  return 0;
}

void sub_19E301FAC()
{
  NSObject *v0;
  const __CFString *v1;
  int v2;
  const __CFString *v3;
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  byte_1EE5005A1 = IMGetDomainBoolForKeyWithDefaultValue();
  if (IMOSLoggingEnabled())
  {
    v0 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v0, OS_LOG_TYPE_INFO))
    {
      if (byte_1EE5005A1)
        v1 = CFSTR("YES");
      else
        v1 = CFSTR("NO");
      v2 = 138412290;
      v3 = v1;
      _os_log_impl(&dword_19E239000, v0, OS_LOG_TYPE_INFO, "Contacts based merging is enabled %@", (uint8_t *)&v2, 0xCu);
    }
  }
}

uint64_t IMSharedHelperPersistMergeIDMergedChats()
{
  if (qword_1ECFC6C38 != -1)
    dispatch_once(&qword_1ECFC6C38, &unk_1E3FB9068);
  return byte_1EE5014C2;
}

void sub_19E302104()
{
  NSObject *v0;
  const __CFString *v1;
  int v2;
  const __CFString *v3;
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  byte_1EE5014C2 = IMGetDomainBoolForKeyWithDefaultValue();
  if (IMOSLoggingEnabled())
  {
    v0 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v0, OS_LOG_TYPE_INFO))
    {
      if (byte_1EE5014C2)
        v1 = CFSTR("YES");
      else
        v1 = CFSTR("NO");
      v2 = 138412290;
      v3 = v1;
      _os_log_impl(&dword_19E239000, v0, OS_LOG_TYPE_INFO, "Persist mergeID merged chats is enabled %@", (uint8_t *)&v2, 0xCu);
    }
  }
}

uint64_t IMSharedHelperSortUsingReplyToGUIDAlgorithm()
{
  int v0;
  uint64_t result;

  if (qword_1ECFC7600 != -1)
    dispatch_once(&qword_1ECFC7600, &unk_1E3FB8F60);
  v0 = byte_1ECFC7390;
  LODWORD(result) = IMGetDomainBoolForKey();
  if (v0)
    return 1;
  else
    return result;
}

BOOL sub_19E302280()
{
  void *v0;
  void *v1;
  _BOOL8 v2;
  NSObject *v3;
  const __CFString *v4;
  int v6;
  const __CFString *v7;
  __int16 v8;
  void *v9;
  __int16 v10;
  void *v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v0 = (void *)objc_msgSend((id)objc_msgSend(MEMORY[0x1E0D34E78], "sharedInstanceForBagType:", 1), "objectForKey:", CFSTR("pin-unsent-messages-to-bottom"));
  v1 = v0;
  v2 = !v0 || (unint64_t)objc_msgSend(v0, "unsignedIntegerValue") <= 1;
  if (IMOSLoggingEnabled())
  {
    v3 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      v4 = CFSTR("NO");
      if (v2)
        v4 = CFSTR("YES");
      v6 = 138412802;
      v7 = v4;
      v8 = 2112;
      v9 = v1;
      v10 = 2112;
      v11 = &unk_1E3FFE660;
      _os_log_impl(&dword_19E239000, v3, OS_LOG_TYPE_INFO, "Server says we should pin messages to the bottom? %@ {serverbagValue: %@ version: %@}", (uint8_t *)&v6, 0x20u);
    }
  }
  return v2;
}

uint64_t IMSharedHelperPinUnsentMessagesToBottom()
{
  if (qword_1ECFC70F0 != -1)
    dispatch_once(&qword_1ECFC70F0, &unk_1E3FB9088);
  return byte_1ECFC70F8;
}

void sub_19E3023FC()
{
  BOOL v0;

  byte_1ECFC70F8 = sub_19E302280();
  if ((byte_1ECFC70F8 & 1) == 0)
  {
    byte_1ECFC70F8 = IMGetDomainBoolForKeyWithDefaultValue();
    if ((byte_1ECFC70F8 & 1) != 0)
    {
      v0 = 1;
    }
    else
    {
      if (qword_1ECFC7600 != -1)
        dispatch_once(&qword_1ECFC7600, &unk_1E3FB8F60);
      v0 = byte_1ECFC7390 != 0;
    }
    byte_1ECFC70F8 = v0;
  }
}

uint64_t IMSharedHelperDeviceIsSharediPad()
{
  uint64_t v0;

  v0 = objc_msgSend(MEMORY[0x1E0DC5EE8], "sharedManager");
  return MEMORY[0x1E0DE7D20](v0, sel_isSharedIPad);
}

BOOL IMSharedHelperDeviceIsiPod()
{
  return MGGetSInt32Answer() == 2;
}

uint64_t IMSharedHelperDeviceIsAltAccount()
{
  return 0;
}

uint64_t IMSharedHelperTruncatedGroupDisplayName(void *a1)
{
  void *v1;
  NSObject *v2;
  int v4;
  uint64_t v5;
  uint64_t v6;

  v1 = a1;
  v6 = *MEMORY[0x1E0C80C00];
  if ((unint64_t)objc_msgSend(a1, "length") > 0x400)
  {
    if (IMOSLoggingEnabled())
    {
      v2 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
      {
        v4 = 134217984;
        v5 = 1024;
        _os_log_impl(&dword_19E239000, v2, OS_LOG_TYPE_INFO, "Trying to set a group display name that's too long. truncating to %tu characters", (uint8_t *)&v4, 0xCu);
      }
    }
    return objc_msgSend(v1, "substringToIndex:", 1024);
  }
  return (uint64_t)v1;
}

uint64_t IMSharedHelperShouldAdjustTimestampOfResentMessages()
{
  if (qword_1ECFC6C48 != -1)
    dispatch_once(&qword_1ECFC6C48, &unk_1E3FB26F8);
  return byte_1ECFC6C40;
}

uint64_t sub_19E30260C()
{
  void *v0;
  void *v1;
  void *v2;
  NSObject *v3;
  void *v4;
  BOOL v5;
  uint64_t result;
  char v7;
  int v8;
  void *v9;
  __int16 v10;
  void *v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v0 = (void *)objc_msgSend(MEMORY[0x1E0D34E78], "sharedInstanceForBagType:", 1);
  v1 = (void *)objc_msgSend(v0, "objectForKey:", CFSTR("allowed-app-retry-version"));
  if (v1)
  {
    v2 = v1;
    if ((unint64_t)objc_msgSend(v1, "unsignedIntegerValue") <= 2)
    {
      if (IMOSLoggingEnabled())
      {
        v3 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
        {
          v8 = 138412546;
          v9 = v2;
          v10 = 2112;
          v11 = &unk_1E3FFE678;
          _os_log_impl(&dword_19E239000, v3, OS_LOG_TYPE_INFO, "Server says we should send oe key on message retry {serverbagValue: %@ version: %@}", (uint8_t *)&v8, 0x16u);
        }
      }
      byte_1ECFC6C40 = 1;
    }
  }
  v4 = (void *)objc_msgSend(v0, "objectForKey:", CFSTR("allowed-app-retry-time-sec"));
  if (v4)
    v5 = objc_msgSend(v4, "integerValue") > 0;
  else
    v5 = 0;
  if (!byte_1ECFC6C40)
    v5 = 0;
  byte_1ECFC6C40 = v5;
  result = IMGetDomainBoolForKeyWithDefaultValue();
  if (byte_1ECFC6C40)
    v7 = 1;
  else
    v7 = result;
  byte_1ECFC6C40 = v7;
  return result;
}

double IMSharedHelperRetryTimeout()
{
  uint64_t v0;
  double result;

  if (qword_1EE5039F0 != -1)
    dispatch_once(&qword_1EE5039F0, &unk_1E3FB90A8);
  v0 = IMGetDomainIntForKey();
  if (!v0)
    return *(double *)&qword_1EE5014C8;
  result = (double)v0;
  *(double *)&qword_1EE5014C8 = (double)v0;
  return result;
}

void *sub_19E3027F4()
{
  void *result;
  uint64_t v1;

  result = (void *)objc_msgSend((id)objc_msgSend(MEMORY[0x1E0D34E78], "sharedInstanceForBagType:", 1), "objectForKey:", CFSTR("allowed-app-retry-time-sec"));
  if (result)
  {
    result = (void *)objc_msgSend(result, "doubleValue");
    qword_1EE5014C8 = v1;
  }
  return result;
}

uint64_t IMSharedHelperCatalystNotificationDisabled()
{
  return 1;
}

uint64_t IMSharedHelperBusinessAllowlist()
{
  if (qword_1EE5044D0 != -1)
    dispatch_once(&qword_1EE5044D0, &unk_1E3FB2718);
  return qword_1EE5044C8;
}

uint64_t sub_19E302878()
{
  uint64_t result;

  result = objc_msgSend(objc_alloc(MEMORY[0x1E0C99E60]), "initWithObjects:", CFSTR("urn:biz:b15ed773-9eed-11e7-baa2-7b88b04daa8e"), CFSTR("urn:biz:55d74f63-6caf-11e7-8569-c753b1bff6fa"), CFSTR("urn:biz:597b5bf3-672f-11e7-adb7-7b88b04daa8e"), CFSTR("urn:biz:705c53d3-8cf3-11e7-a70c-c753b1bff6fa"), CFSTR("urn:biz:71a35d53-8cf4-11e7-a70c-c753b1bff6fa"), CFSTR("urn:biz:84ac37b0-8cf3-11e7-a70c-c753b1bff6fa"), CFSTR("urn:biz:8f509023-8cf4-11e7-a70c-c753b1bff6fa"), CFSTR("urn:biz:9ba45833-8cf3-11e7-a70c-c753b1bff6fa"), CFSTR("urn:biz:b00f1713-8cf3-11e7-a70c-c753b1bff6fa"), CFSTR("urn:biz:bb4690d3-672e-11e7-adb7-7b88b04daa8e"), CFSTR("urn:biz:c6da1a13-cbde-11e7-ae91-c560a982710b"), CFSTR("urn:biz:cf567ab3-6cae-11e7-8569-c753b1bff6fa"), 0);
  qword_1EE5044C8 = result;
  return result;
}

BOOL IMSharedHelperCatalystRunningOnDefaultScale()
{
  void *v0;
  float v1;

  v0 = (void *)IMGetCachedDomainValueForKey();
  if (!v0)
    return 1;
  objc_msgSend(v0, "floatValue");
  return v1 == 1.0;
}

uint64_t IMSharedHelperSpotlightIndexingPreference()
{
  return 0;
}

uint64_t IMSharedHelperExternalLocationForFile(void *a1, void *a2)
{
  void *v3;
  unsigned __int8 v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  NSObject *v8;
  uint8_t buf[4];
  void *v11;
  __int16 v12;
  void *v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v3 = (void *)objc_msgSend(a2, "im_lastPathComponent");
  v4 = objc_msgSend(a1, "hash");
  v5 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%02x"), v4);
  v6 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%02d"), v4 & 0xF);
  if (objc_msgSend(v3, "length") && objc_msgSend(a1, "length"))
    v7 = (void *)objc_msgSend((id)objc_msgSend((id)objc_msgSend((id)objc_msgSend(CFSTR("/var/mobile/Library/MessagesMetaData"), "stringByAppendingPathComponent:", v5), "stringByAppendingPathComponent:", v6), "stringByAppendingPathComponent:", objc_msgSend(a1, "im_lastPathComponent")), "stringByAppendingPathComponent:", v3);
  else
    v7 = 0;
  if (IMOSLoggingEnabled())
  {
    v8 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138412546;
      v11 = v7;
      v12 = 2112;
      v13 = a1;
      _os_log_impl(&dword_19E239000, v8, OS_LOG_TYPE_INFO, "Resulting path %@   for transfer: %@", buf, 0x16u);
    }
  }
  return objc_msgSend(v7, "stringByExpandingTildeInPath");
}

uint64_t IMSharedHelperGet_IMDaemonRequestConnectionWithSync()
{
  if (qword_1ECFC7338 != -1)
    dispatch_once(&qword_1ECFC7338, &unk_1E3FB16C8);
  return qword_1ECFC7330;
}

void sub_19E302B40()
{
  NSObject *v0;
  uint8_t v1[16];

  qword_1ECFC7330 = MEMORY[0x1A1AE7D58]("IMDaemonRequestConnectionWithSync", CFSTR("IMFoundation"));
  if (!qword_1ECFC7330 && IMOSLoggingEnabled())
  {
    v0 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v0, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)v1 = 0;
      _os_log_impl(&dword_19E239000, v0, OS_LOG_TYPE_INFO, "Unable to weak link IMDaemonRequestConnectionWithSync", v1, 2u);
    }
  }
}

uint64_t IMSharedHelperGet_IMXPCCreateServerConnectionWithQueue()
{
  if (qword_1ECFC7348 != -1)
    dispatch_once(&qword_1ECFC7348, &unk_1E3FB4208);
  return qword_1ECFC7340;
}

void sub_19E302C2C()
{
  NSObject *v0;
  uint8_t v1[16];

  qword_1ECFC7340 = MEMORY[0x1A1AE7D58]("IMXPCCreateServerConnectionWithQueue", CFSTR("IMFoundation"));
  if (!qword_1ECFC7340 && IMOSLoggingEnabled())
  {
    v0 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v0, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)v1 = 0;
      _os_log_impl(&dword_19E239000, v0, OS_LOG_TYPE_INFO, "Unable to weak link IMXPCCreateServerConnectionWithQueue", v1, 2u);
    }
  }
}

uint64_t IMIsPlugInProxyAMessagesExtensionPoint(void *a1)
{
  void *v1;

  v1 = (void *)objc_msgSend(a1, "protocol");
  if ((objc_msgSend(v1, "isEqualToString:", CFSTR("com.apple.message-payload-provider")) & 1) != 0)
    return 1;
  else
    return objc_msgSend(v1, "isEqualToString:", CFSTR("com.apple.message-payload-provider.highmemory"));
}

uint64_t IMIsRunningIniMessageAppExtension()
{
  if (qword_1EE503B68 != -1)
    dispatch_once(&qword_1EE503B68, &unk_1E3FB9100);
  return byte_1EE5044D8;
}

id IMSharedHelperMissingKeysInStickerUserInfo(void *a1)
{
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _BYTE v16[128];
  _QWORD v17[12];

  v17[11] = *MEMORY[0x1E0C80C00];
  v17[0] = CFSTR("sid");
  v17[1] = CFSTR("pid");
  v17[2] = CFSTR("shash");
  v17[3] = CFSTR("spw");
  v17[4] = CFSTR("sxs");
  v17[5] = CFSTR("sys");
  v17[6] = CFSTR("ssa");
  v17[7] = CFSTR("sro");
  v17[8] = CFSTR("sli");
  v17[9] = CFSTR("sir");
  v17[10] = CFSTR("spv");
  v2 = (void *)objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v17, 11);
  if (a1)
  {
    v3 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
    v12 = 0u;
    v13 = 0u;
    v14 = 0u;
    v15 = 0u;
    v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v13;
      do
      {
        for (i = 0; i != v5; ++i)
        {
          if (*(_QWORD *)v13 != v6)
            objc_enumerationMutation(v2);
          v8 = *(_QWORD *)(*((_QWORD *)&v12 + 1) + 8 * i);
          v9 = objc_msgSend(a1, "objectForKey:", v8);
          if (v9)
          {
            v10 = (void *)v9;
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) == 0 || objc_msgSend(v10, "length"))
              continue;
          }
          objc_msgSend(v3, "addObject:", v8);
        }
        v5 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
      }
      while (v5);
    }
    return v3;
  }
  return v2;
}

uint64_t IMIsRunningInIDSAccountCapableClient()
{
  if (qword_1EE503D50 != -1)
    dispatch_once(&qword_1EE503D50, &unk_1E3FB90E0);
  return byte_1EE503CDB;
}

uint64_t sub_19E302FB4()
{
  void *v0;
  uint64_t result;

  v0 = (void *)objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB34D0], "mainBundle"), "bundleIdentifier");
  if ((objc_msgSend(v0, "isEqualToString:", CFSTR("com.apple.MobileSMS")) & 1) != 0
    || (objc_msgSend(v0, "isEqualToString:", CFSTR("com.apple.mobilesms.notification")) & 1) != 0
    || (objc_msgSend(v0, "isEqualToString:", CFSTR("com.apple.mobilesms.compose")) & 1) != 0
    || (objc_msgSend(v0, "isEqualToString:", CFSTR("com.apple.MobileSMS.MessagesNotificationExtension")) & 1) != 0
    || (objc_msgSend(v0, "isEqualToString:", CFSTR("com.apple.iChat")) & 1) != 0
    || (objc_msgSend(v0, "isEqualToString:", CFSTR("com.apple.messages.AssistantExtension")) & 1) != 0
    || (objc_msgSend(v0, "isEqualToString:", CFSTR("com.apple.MobileSMS.MessagesAssistantExtension")) & 1) != 0
    || (objc_msgSend(v0, "isEqualToString:", CFSTR("com.apple.messages.ReplyExtension")) & 1) != 0
    || (objc_msgSend(v0, "isEqualToString:", CFSTR("com.apple.messages.ShareExtension")) & 1) != 0)
  {
    result = 1;
  }
  else
  {
    result = objc_msgSend(v0, "isEqualToString:", CFSTR("com.apple.MobileSMS.MessagesTranscriptExtension"));
  }
  byte_1EE503CDB = result;
  return result;
}

void sub_19E3030B0(void *a1, CC_MD5_CTX *a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  CC_LONG v8;

  v4 = objc_msgSend(a1, "maximumLengthOfBytesUsingEncoding:", 4);
  if (v4)
  {
    v5 = v4 + 1;
    v6 = (char *)malloc_type_malloc(v4 + 1, 0x477A2FF5uLL);
    if (v6)
    {
      v7 = v6;
      objc_msgSend(a1, "getCString:maxLength:encoding:", v6, v5, 4);
      v8 = strlen(v7);
      CC_MD5_Update(a2, v7, v8);
      free(v7);
    }
  }
}

uint64_t sub_19E303140(void *a1, CC_MD5_CTX *a2)
{
  uint64_t v4;
  CC_LONG v5;
  CC_MD5_CTX *v6;
  const char *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _BYTE v17[128];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    sub_19E3030B0(a1, a2);
    return 1;
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    sub_19E303360(a1, a2);
    return 1;
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    v4 = objc_msgSend(a1, "bytes");
    v5 = objc_msgSend(a1, "length");
    v6 = a2;
    v7 = (const char *)v4;
LABEL_7:
    CC_MD5_Update(v6, v7, v5);
    return 1;
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    CC_MD5_Update(a2, "NSArray[", 8u);
    v13 = 0u;
    v14 = 0u;
    v15 = 0u;
    v16 = 0u;
    v9 = objc_msgSend(a1, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
    if (v9)
    {
      v10 = v9;
      v11 = *(_QWORD *)v14;
LABEL_13:
      v12 = 0;
      while (1)
      {
        if (*(_QWORD *)v14 != v11)
          objc_enumerationMutation(a1);
        if (!sub_19E303140(*(_QWORD *)(*((_QWORD *)&v13 + 1) + 8 * v12), a2))
          return 1;
        CC_MD5_Update(a2, ",", 1u);
        if (v10 == ++v12)
        {
          v10 = objc_msgSend(a1, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
          if (v10)
            goto LABEL_13;
          break;
        }
      }
    }
    v7 = "]";
    v6 = a2;
    v5 = 1;
    goto LABEL_7;
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
    return 0;
  sub_19E2FFA70((int)a1, a2);
  return 1;
}

uint64_t sub_19E303360(void *a1, CC_MD5_CTX *a2)
{
  const char *v4;
  const char *v5;
  size_t v6;
  char *v7;
  CC_LONG v8;
  NSUInteger sizep[2];

  sizep[1] = *MEMORY[0x1E0C80C00];
  sizep[0] = 0;
  v4 = (const char *)objc_msgSend(a1, "objCType");
  v5 = NSGetSizeAndAlignment(v4, sizep, 0);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)sizep - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  bzero(v7, v6);
  objc_msgSend(a1, "getValue:", v7);
  v8 = strlen(v4);
  CC_MD5_Update(a2, v4, v8);
  CC_MD5_Update(a2, ":", 1u);
  return CC_MD5_Update(a2, v7, sizep[0]);
}

void sub_19E305330()
{
  JUMPOUT(0x19E305338);
}

void sub_19E305340(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *exc_buf, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  JUMPOUT(0x19E30538CLL);
}

uint64_t IMDDatabaseTelemetryLogHandle()
{
  if (qword_1ECFC7008 != -1)
    dispatch_once(&qword_1ECFC7008, &unk_1E3FB3CC8);
  return qword_1ECFC7000;
}

os_log_t sub_19E305544()
{
  os_log_t result;

  result = os_log_create("com.apple.Messages.telemetry", "IMDDatabase");
  qword_1ECFC7000 = (uint64_t)result;
  return result;
}

uint64_t IMDDaemonTelemetryLogHandle()
{
  if (qword_1EE503808 != -1)
    dispatch_once(&qword_1EE503808, &unk_1E3FB9C10);
  return qword_1EE503800;
}

os_log_t sub_19E3055B0()
{
  os_log_t result;

  result = os_log_create("com.apple.Messages.telemetry", "Daemon");
  qword_1EE503800 = (uint64_t)result;
  return result;
}

uint64_t IMSharedUtilitiesTelemetryLogHandle()
{
  if (qword_1EE5044E8 != -1)
    dispatch_once(&qword_1EE5044E8, &unk_1E3FB9C30);
  return qword_1EE5044E0;
}

os_log_t sub_19E30561C()
{
  os_log_t result;

  result = os_log_create("com.apple.Messages.telemetry", "SharedUtilities");
  qword_1EE5044E0 = (uint64_t)result;
  return result;
}

uint64_t sub_19E305A24(uint64_t a1)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(a1 + 32), sel__trackEvent_);
}

uint64_t sub_19E305DD4(uint64_t a1)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(a1 + 32), sel__trackEvent_withStatistic_);
}

void sub_19E305F30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9)
{
  id v9;
  NSObject *v10;

  if (a2 == 1)
  {
    v9 = objc_begin_catch(exception_object);
    if (IMOSLoggingEnabled())
    {
      v10 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
      {
        LODWORD(a9) = 138412290;
        *(_QWORD *)((char *)&a9 + 4) = v9;
        _os_log_impl(&dword_19E239000, v10, OS_LOG_TYPE_INFO, "Caught an exception sending to CoreAnalytics: %@", (uint8_t *)&a9, 0xCu);
      }
    }
    objc_end_catch();
    JUMPOUT(0x19E305F00);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_19E306174(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_trackEvent:withDictionary:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
}

void sub_19E3065AC()
{
  JUMPOUT(0x19E3065B8);
}

void *sub_19E30665C()
{
  void *result;

  result = (void *)MEMORY[0x1A1AE7D58]("FTAWDLogIMessageCloudKitSyncFailed", CFSTR("FTAWD"));
  off_1EE503BB8 = result;
  return result;
}

void sub_19E306688(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  NSObject *v6;
  const char *v7;
  _QWORD v8[5];
  uint8_t buf[4];
  uint64_t v10;
  const __CFString *v11;
  _QWORD v12[2];

  v12[1] = *MEMORY[0x1E0C80C00];
  v2 = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 16), "signatureWithDomain:type:subType:subtypeContext:detectedProcess:triggerThresholdValues:", CFSTR("iMessage"), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB34D0], "mainBundle"), "bundleIdentifier"), 0);
  if (objc_msgSend(*(id *)(a1 + 64), "localizedDescription"))
  {
    v11 = CFSTR("error");
    v12[0] = objc_msgSend(*(id *)(a1 + 64), "localizedDescription");
    v3 = objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v12, &v11, 1);
  }
  else
  {
    v3 = 0;
  }
  v4 = *(void **)(*(_QWORD *)(a1 + 32) + 16);
  v5 = *(_QWORD *)(a1 + 72);
  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 3221225472;
  v8[2] = sub_19E306930;
  v8[3] = &unk_1E3FB9D08;
  v8[4] = v2;
  if ((objc_msgSend(v4, "snapshotWithSignature:duration:event:payload:reply:", v2, v5, v3, v8, 15.0) & 1) != 0)
  {
    if (IMOSLoggingEnabled())
    {
      v6 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412290;
        v10 = v2;
        v7 = "Auto Bug Capture took a snapshot for signature %@";
LABEL_11:
        _os_log_impl(&dword_19E239000, v6, OS_LOG_TYPE_INFO, v7, buf, 0xCu);
      }
    }
  }
  else if (IMOSLoggingEnabled())
  {
    v6 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138412290;
      v10 = v2;
      v7 = "Auto Bug Capture failed to take snapshot for signature %@";
      goto LABEL_11;
    }
  }
}

void sub_19E306864(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x19E306830);
  }
  _Unwind_Resume(a1);
}

void sub_19E306930(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  __int16 v8;
  uint64_t v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  if (IMOSLoggingEnabled())
  {
    v4 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      v5 = *(_QWORD *)(a1 + 32);
      v6 = 138412546;
      v7 = v5;
      v8 = 2112;
      v9 = a2;
      _os_log_impl(&dword_19E239000, v4, OS_LOG_TYPE_INFO, "Received response from Auto Bug Capture for signature %@ - response: %@", (uint8_t *)&v6, 0x16u);
    }
  }
}

void *sub_19E306BE0()
{
  void *result;

  result = (void *)MEMORY[0x1A1AE7D58]("FTAWDLogIMessageCloudKitValidatePurgeableAttachment", CFSTR("FTAWD"));
  off_1EE5044F0 = result;
  return result;
}

uint64_t sub_19E306D70(uint64_t a1, void *a2, void *a3)
{
  return objc_msgSend(*(id *)(a1 + 40), "setObject:forKey:", objc_msgSend(a3, "stringValue"), objc_msgSend(*(id *)(a1 + 32), "_stringForiMessageJunkType:", (int)objc_msgSend(a2, "intValue")));
}

void *sub_19E307070()
{
  void *result;

  result = (void *)MEMORY[0x1A1AE7D58]("ADClientAddValueForScalarKey", CFSTR("AggregateDictionary"));
  off_1ECFC7190 = result;
  return result;
}

void *sub_19E30709C()
{
  void *result;

  result = (void *)MEMORY[0x1A1AE7D58]("ADClientPushValueForDistributionKey", CFSTR("AggregateDictionary"));
  off_1ECFC7010 = result;
  return result;
}

void *sub_19E307B4C()
{
  void *result;

  result = (void *)MEMORY[0x1A1AE7D58]("CLLocationCoordinate2DIsValid", CFSTR("CoreLocation"));
  off_1EE504500 = result;
  return result;
}

void *sub_19E307B78()
{
  void *result;

  result = (void *)MEMORY[0x1A1AE7D58]("MKCoordinateRegionMakeWithDistance", CFSTR("MapKit"));
  off_1EE504510 = result;
  return result;
}

void sub_19E307BA4(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  NSObject *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  _BYTE v12[24];
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  if (v6)
  {
    if (IMOSLoggingEnabled())
    {
      OSLogHandleForIMFoundationCategory();
      v7 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)v12 = 138412546;
        *(_QWORD *)&v12[4] = objc_opt_class();
        *(_WORD *)&v12[12] = 2112;
        *(_QWORD *)&v12[14] = v6;
        v8 = *(id *)&v12[4];
        _os_log_impl(&dword_19E239000, v7, OS_LOG_TYPE_INFO, "%@ - Got error back from MKMapSnapshotter: %@", v12, 0x16u);

      }
    }

    v5 = 0;
  }
  objc_msgSend(v5, "image", *(_OWORD *)v12, *(_QWORD *)&v12[16], v13);
  v9 = objc_claimAutoreleasedReturnValue();
  v10 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v11 = *(void **)(v10 + 40);
  *(_QWORD *)(v10 + 40) = v9;

  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40))
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = 1;
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));

}

void sub_19E307D5C()
{
  dispatch_queue_t v0;
  void *v1;
  NSObject *v2;
  NSObject *v3;

  v0 = dispatch_queue_create(0, 0);
  v1 = (void *)qword_1EE504520;
  qword_1EE504520 = (uint64_t)v0;

  v2 = qword_1EE504520;
  dispatch_get_global_queue(0, 0);
  v3 = objc_claimAutoreleasedReturnValue();
  dispatch_set_target_queue(v2, v3);

}

void sub_19E30817C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *sub_19E308194()
{
  void *result;

  result = (void *)MEMORY[0x1A1AE7D58]("CLLocationCoordinate2DMake", CFSTR("CoreLocation"));
  off_1EE504530 = result;
  return result;
}

double sub_19E3081C0()
{
  if (qword_1EE504560 != -1)
    dispatch_once(&qword_1EE504560, &unk_1E3FB9FD0);
  return *(double *)&xmmword_1EE504550;
}

void sub_19E308204(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  void *v8;
  NSObject *v9;
  double (*v10)(uint64_t, double, double);
  double v11;
  double v12;
  uint64_t v13;
  double v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  int v19;
  int v20;
  void *v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  v7 = v6;
  if (v5 && !v6)
  {
    MEMORY[0x1A1AE7D4C](CFSTR("BlastDoorLocationCoordinate2D"), CFSTR("BlastDoor"));
    if ((objc_opt_isKindOfClass() & 1) != 0)
      v8 = v5;
    else
      v8 = 0;
    v9 = v8;
    v10 = (double (*)(uint64_t, double, double))off_1EE504530;
    -[NSObject latitude](v9, "latitude");
    v12 = v11;
    v13 = -[NSObject longitude](v9, "longitude");
    v15 = v10(v13, v12, v14);
    v16 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
    *(double *)(v16 + 32) = v15;
    *(_QWORD *)(v16 + 40) = v17;
    if (IMOSLoggingEnabled())
    {
      OSLogHandleForIMFoundationCategory();
      v18 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
      {
        LOWORD(v20) = 0;
        _os_log_impl(&dword_19E239000, v18, OS_LOG_TYPE_INFO, "Successfully extracted coordinate from data.", (uint8_t *)&v20, 2u);
      }

    }
LABEL_19:

    goto LABEL_20;
  }
  v19 = IMOSLoggingEnabled();
  if (v7)
  {
    if (v19)
    {
      OSLogHandleForIMFoundationCategory();
      v9 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
      {
        v20 = 138412290;
        v21 = v7;
        _os_log_impl(&dword_19E239000, v9, OS_LOG_TYPE_INFO, "Unable to extract coordinate from data. Error: %@.", (uint8_t *)&v20, 0xCu);
      }
      goto LABEL_19;
    }
  }
  else if (v19)
  {
    OSLogHandleForIMFoundationCategory();
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      LOWORD(v20) = 0;
      _os_log_impl(&dword_19E239000, v9, OS_LOG_TYPE_INFO, "No error but no result.", (uint8_t *)&v20, 2u);
    }
    goto LABEL_19;
  }
LABEL_20:
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));

}

void *sub_19E308810()
{
  void *result;

  result = (void *)MEMORY[0x1A1AE7D58]("CLLocationCoordinate2DMake", CFSTR("CoreLocation"));
  off_1EE504540 = result;
  return result;
}

void sub_19E309084(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _Block_object_dispose(&a9, 8);
  _Unwind_Resume(a1);
}

__n128 sub_19E3090A4()
{
  __n128 result;

  result = *(__n128 *)MEMORY[0x1A1AE7D58]("kCLLocationCoordinate2DInvalid", CFSTR("CoreLocation"));
  xmmword_1EE504550 = (__int128)result;
  return result;
}

Class sub_19E3090D8(uint64_t a1)
{
  Class result;

  sub_19E30912C();
  result = objc_getClass("UIColor");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    qword_1EE504568 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    sub_19E36EAEC();
    return (Class)sub_19E30912C();
  }
  return result;
}

uint64_t sub_19E30912C()
{
  uint64_t v0;
  void *v2;

  if (!qword_1EE504570)
    qword_1EE504570 = _sl_dlopen();
  v0 = qword_1EE504570;
  if (!qword_1EE504570)
  {
    v2 = (void *)abort_report_np();
    free(v2);
  }
  return v0;
}

void *sub_19E3091DC()
{
  void *v0;
  void *v1;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  v3 = 0;
  v4 = &v3;
  v5 = 0x2020000000;
  v0 = (void *)qword_1EE504578;
  v6 = qword_1EE504578;
  if (!qword_1EE504578)
  {
    v1 = (void *)sub_19E30912C();
    v0 = dlsym(v1, "UIGraphicsBeginImageContextWithOptions");
    v4[3] = (uint64_t)v0;
    qword_1EE504578 = (uint64_t)v0;
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_19E309254(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _Block_object_dispose(&a9, 8);
  _Unwind_Resume(a1);
}

void *sub_19E30926C()
{
  void *v0;
  void *v1;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  v3 = 0;
  v4 = &v3;
  v5 = 0x2020000000;
  v0 = (void *)qword_1EE504580;
  v6 = qword_1EE504580;
  if (!qword_1EE504580)
  {
    v1 = (void *)sub_19E30912C();
    v0 = dlsym(v1, "UIGraphicsGetImageFromCurrentImageContext");
    v4[3] = (uint64_t)v0;
    qword_1EE504580 = (uint64_t)v0;
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_19E3092E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _Block_object_dispose(&a9, 8);
  _Unwind_Resume(a1);
}

void *sub_19E3092FC()
{
  void *v0;
  void *v1;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  v3 = 0;
  v4 = &v3;
  v5 = 0x2020000000;
  v0 = (void *)qword_1EE504588;
  v6 = qword_1EE504588;
  if (!qword_1EE504588)
  {
    v1 = (void *)sub_19E30912C();
    v0 = dlsym(v1, "UIRectFill");
    v4[3] = (uint64_t)v0;
    qword_1EE504588 = (uint64_t)v0;
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_19E309374(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _Block_object_dispose(&a9, 8);
  _Unwind_Resume(a1);
}

void *sub_19E30938C()
{
  void *v0;
  void *v1;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  v3 = 0;
  v4 = &v3;
  v5 = 0x2020000000;
  v0 = (void *)qword_1EE504590;
  v6 = qword_1EE504590;
  if (!qword_1EE504590)
  {
    v1 = (void *)sub_19E30912C();
    v0 = dlsym(v1, "UIGraphicsEndImageContext");
    v4[3] = (uint64_t)v0;
    qword_1EE504590 = (uint64_t)v0;
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_19E309404(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _Block_object_dispose(&a9, 8);
  _Unwind_Resume(a1);
}

void sub_19E30B084()
{
  id v0;
  void *v1;

  v0 = objc_alloc_init((Class)objc_opt_class());
  v1 = (void *)qword_1ECFC75F8;
  qword_1ECFC75F8 = (uint64_t)v0;

}

void sub_19E30B1A0()
{
  IMBatteryStatus *v0;
  void *v1;

  v0 = objc_alloc_init(IMBatteryStatus);
  v1 = (void *)qword_1ECFC6C50;
  qword_1ECFC6C50 = (uint64_t)v0;

}

uint64_t sub_19E30B78C(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "compare:");
}

void sub_19E30C82C(_Unwind_Exception *exc_buf, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  uint64_t v25;

  if (a2 == 1)
  {
    objc_begin_catch(exc_buf);
    objc_end_catch();
    JUMPOUT(0x19E30C790);
  }
  _Block_object_dispose(&a19, 8);
  _Block_object_dispose(&a25, 8);
  os_activity_scope_leave((os_activity_scope_state_t)(v25 - 160));
  _Unwind_Resume(exc_buf);
}

void sub_19E30C8F8(uint64_t a1, void *a2, void *a3)
{
  id v6;
  id v7;
  NSObject *v8;
  const __CFString *v9;
  const __CFString *v10;
  int v11;
  int v12;
  __int16 v13;
  const __CFString *v14;
  __int16 v15;
  id v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v6 = a2;
  v7 = a3;
  if (v6)
  {
    objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), a2);
    if (IMOSLoggingEnabled())
    {
      OSLogHandleForIMFoundationCategory();
      v8 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        v9 = CFSTR("NO");
        if (!v7)
          v9 = CFSTR("YES");
        v11 = 67109378;
        v12 = 1;
        v13 = 2112;
        v14 = v9;
        _os_log_impl(&dword_19E239000, v8, OS_LOG_TYPE_INFO, "BlastDoor processing for preview type %u was successful (%@)", (uint8_t *)&v11, 0x12u);
      }
LABEL_13:

    }
  }
  else if (IMOSLoggingEnabled())
  {
    OSLogHandleForIMFoundationCategory();
    v8 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      v10 = CFSTR("NO");
      v11 = 67109634;
      v12 = 1;
      v13 = 2112;
      if (!v7)
        v10 = CFSTR("YES");
      v14 = v10;
      v15 = 2112;
      v16 = v7;
      _os_log_impl(&dword_19E239000, v8, OS_LOG_TYPE_INFO, "BlastDoor processing for preview type %u was successful (%@) with error (%@)", (uint8_t *)&v11, 0x1Cu);
    }
    goto LABEL_13;
  }
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40));

}

void sub_19E30CE98(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x19E30CE40);
  }
  _Unwind_Resume(a1);
}

uint64_t IMDidPerformInitialChatVocabularyUpdate()
{
  return IMGetDomainBoolForKeyWithDefaultValue();
}

uint64_t IMSetHavePerformedInitialChatVocabularyUpdate()
{
  return IMSetDomainBoolForKey();
}

uint64_t IMClearDidPerformInitialChatVocabularyUpdate()
{
  return IMSetDomainValueForKey();
}

uint64_t localizedTextForAppName(uint64_t a1)
{
  return objc_msgSend(MEMORY[0x1E0CB3940], "localizedStringWithFormat:", objc_msgSend((id)IMSharedUtilitiesFrameworkBundle(), "localizedStringForKey:value:table:", CFSTR("1 %@ Message"), &stru_1E3FBBA48, CFSTR("IMSharedUtilities")), a1);
}

void IMProcessPeerPaymentMessageWithPayloadData(uint64_t a1)
{
  void *v1;
  NSObject *v2;
  void *v3;
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint8_t buf[4];
  uint64_t v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v7 = 0;
  v1 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3710]), "initForReadingFromData:error:", a1, &v7);
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    objc_msgSend(v1, "_enableStrictSecureDecodingMode");
    if (IMOSLoggingEnabled())
    {
      v2 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_19E239000, v2, OS_LOG_TYPE_INFO, "strict-decoding 002 _enableStrictSecureDecodingMode called", buf, 2u);
      }
    }
  }
  v3 = (void *)objc_msgSend(v1, "decodeObjectOfClasses:forKey:", IMExtensionPayloadUnarchivingClasses(), *MEMORY[0x1E0CB2CD0]);
  if (v7)
  {
    if (IMOSLoggingEnabled())
    {
      v4 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412290;
        v9 = v7;
        _os_log_impl(&dword_19E239000, v4, OS_LOG_TYPE_INFO, "Failed to unarchive surf payment. Error: %@", buf, 0xCu);
      }
    }
  }

  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    v5 = IMSanitizedURLForIMExtensionPayloadURLKey(v3);
    if (v5)
    {
      if (qword_1EE5045A8 != -1)
        dispatch_once(&qword_1EE5045A8, &unk_1E3FB3D48);
      if (off_1EE5045A0)
      {
        v6 = IMSanitizedSessionIdentifierForIMExtensionPayloadUserSessionIdentifierKey(v3);
        off_1EE5045A0(v5, v6);
      }
    }
  }
}

void sub_19E30D174(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int buf, uint64_t a12)
{
  if (a2 == 1)
  {
    objc_begin_catch(exception_object);
    objc_end_catch();
    JUMPOUT(0x19E30D044);
  }
  _Unwind_Resume(exception_object);
}

uint64_t IMSanitizedURLForIMExtensionPayloadURLKey(void *a1)
{
  uint64_t v1;

  v1 = objc_msgSend(a1, "objectForKey:", CFSTR("URL"));
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    return v1;
  else
    return 0;
}

void *sub_19E30D368()
{
  void *result;

  result = (void *)MEMORY[0x1A1AE7D58]("PKPeerPaymentProcessMessageWithDataURLAndSessionIdentifier", CFSTR("PassKitCore"));
  off_1EE5045A0 = result;
  return result;
}

uint64_t IMSanitizedSessionIdentifierForIMExtensionPayloadUserSessionIdentifierKey(void *a1)
{
  uint64_t v1;

  v1 = objc_msgSend(a1, "objectForKey:", CFSTR("sessionIdentifier"));
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    return v1;
  else
    return 0;
}

void IMProcessPhotosExtensionMessageWithPayloadData(uint64_t a1)
{
  uint64_t v1;

  v1 = IMPhotosShareURLFromPayloadData(a1);
  if (v1)
    sub_19E30D738(v1);
}

uint64_t IMPhotosShareURLFromPayloadData(uint64_t a1)
{
  void *v1;
  NSObject *v2;
  void *v3;
  NSObject *v5;
  uint64_t v6;
  uint8_t buf[4];
  uint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v6 = 0;
  v1 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3710]), "initForReadingFromData:error:", a1, &v6);
  objc_msgSend(v1, "setRequiresSecureCoding:", 1);
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    objc_msgSend(v1, "_enableStrictSecureDecodingMode");
    if (IMOSLoggingEnabled())
    {
      v2 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_19E239000, v2, OS_LOG_TYPE_INFO, "strict-decoding 003 _enableStrictSecureDecodingMode called", buf, 2u);
      }
    }
  }
  v3 = (void *)objc_msgSend(v1, "decodeObjectOfClasses:forKey:", IMExtensionPayloadUnarchivingClasses(), *MEMORY[0x1E0CB2CD0]);

  if (!v6)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
      return IMSanitizedURLForIMExtensionPayloadURLKey(v3);
  }
  if (IMOSLoggingEnabled())
  {
    v5 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138412290;
      v8 = v6;
      _os_log_impl(&dword_19E239000, v5, OS_LOG_TYPE_INFO, "Failed to provide photos extension message to PLMessagesSPI. Error: %@", buf, 0xCu);
    }
  }
  return 0;
}

void sub_19E30D59C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int buf, uint64_t a12)
{
  if (a2 == 1)
  {
    objc_begin_catch(exception_object);
    objc_end_catch();
    JUMPOUT(0x19E30D4B8);
  }
  _Unwind_Resume(exception_object);
}

void sub_19E30D738(uint64_t a1)
{
  if (qword_1EE5045B8 != -1)
    dispatch_once(&qword_1EE5045B8, &unk_1E3FB1728);
  if (off_1EE5045B0)
    off_1EE5045B0(a1, &unk_1E3FB17A8);
}

uint64_t IMDictionaryFromPayloadData(uint64_t a1)
{
  void *v1;
  NSObject *v2;
  uint64_t v3;
  NSObject *v4;
  uint64_t v6;
  uint8_t buf[4];
  uint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v6 = 0;
  v1 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3710]), "initForReadingFromData:error:", a1, &v6);
  objc_msgSend(v1, "setRequiresSecureCoding:", 1);
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    objc_msgSend(v1, "_enableStrictSecureDecodingMode");
    if (IMOSLoggingEnabled())
    {
      v2 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_19E239000, v2, OS_LOG_TYPE_INFO, "strict-decoding 003 _enableStrictSecureDecodingMode called", buf, 2u);
      }
    }
  }
  v3 = objc_msgSend(v1, "decodeObjectOfClasses:forKey:", IMExtensionPayloadUnarchivingClasses(), *MEMORY[0x1E0CB2CD0]);

  if (v6 || (objc_opt_class(), (objc_opt_isKindOfClass() & 1) == 0))
  {
    if (IMOSLoggingEnabled())
    {
      v4 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412290;
        v8 = v6;
        _os_log_impl(&dword_19E239000, v4, OS_LOG_TYPE_INFO, "Failed to provide payload data. error: %@", buf, 0xCu);
      }
    }
  }
  return v3;
}

void sub_19E30D948(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int buf, uint64_t a12)
{
  if (a2 == 1)
  {
    objc_begin_catch(exception_object);
    objc_end_catch();
    JUMPOUT(0x19E30D870);
  }
  _Unwind_Resume(exception_object);
}

uint64_t IMProcessRichLinkMessageWithBody()
{
  void *v0;

  v0 = (void *)JWDecodeCodableObjectWithStandardAllowlist();
  return objc_msgSend(v0, "enumerateAttribute:inRange:options:usingBlock:", *MEMORY[0x1E0D365F0], 0, objc_msgSend(v0, "length"), 0, &unk_1E3FBA060);
}

void sub_19E30DB30(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;

  v3 = (void *)sub_19E30E17C();
  if ((sub_19E30E294(a2, (uint64_t)CFSTR("photos"), v3) & 1) != 0
    || (v4 = (void *)sub_19E30E17C(), sub_19E30E294(a2, (uint64_t)CFSTR("photos_sharing"), v4)))
  {
    sub_19E30D738((uint64_t)a2);
  }
}

uint64_t _IMShouldProcessURLForPhotosExtension(void *a1)
{
  void *v2;

  v2 = (void *)sub_19E30E17C();
  return sub_19E30E294(a1, (uint64_t)CFSTR("photos"), v2);
}

void IMProcessGameCenterMessageWithPayloadData(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v5;
  NSObject *v6;
  void *v7;
  NSObject *v8;
  uint64_t v9;
  void *v10;
  NSObject *v11;
  NSObject *v12;
  const char *v13;
  NSObject *v14;
  uint64_t v15;
  _QWORD v16[5];
  __int128 buf;
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t);
  void (*v20)(uint64_t);
  uint64_t v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v15 = 0;
  v5 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3710]), "initForReadingFromData:error:", a1, &v15);
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    objc_msgSend(v5, "_enableStrictSecureDecodingMode");
    if (IMOSLoggingEnabled())
    {
      v6 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
      {
        LOWORD(buf) = 0;
        _os_log_impl(&dword_19E239000, v6, OS_LOG_TYPE_INFO, "strict-decoding 002 _enableStrictSecureDecodingMode called", (uint8_t *)&buf, 2u);
      }
    }
  }
  v7 = (void *)objc_msgSend(v5, "decodeObjectOfClasses:forKey:", IMExtensionPayloadUnarchivingClasses(), *MEMORY[0x1E0CB2CD0]);
  if (v15)
  {
    if (IMOSLoggingEnabled())
    {
      v8 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        LODWORD(buf) = 138412290;
        *(_QWORD *)((char *)&buf + 4) = v15;
        _os_log_impl(&dword_19E239000, v8, OS_LOG_TYPE_INFO, "Failed to unarchive game center message. Error: %@", (uint8_t *)&buf, 0xCu);
      }
    }
  }

  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    if (!IMOSLoggingEnabled())
      return;
    v12 = OSLogHandleForIMFoundationCategory();
    if (!os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
      return;
    LOWORD(buf) = 0;
    v13 = "Failed to provide message payload to Game Center. Payload is not a dictionary.";
LABEL_24:
    _os_log_impl(&dword_19E239000, v12, OS_LOG_TYPE_INFO, v13, (uint8_t *)&buf, 2u);
    return;
  }
  v9 = IMSanitizedURLForIMExtensionPayloadURLKey(v7);
  if (!v9)
  {
    if (!IMOSLoggingEnabled())
      return;
    v12 = OSLogHandleForIMFoundationCategory();
    if (!os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
      return;
    LOWORD(buf) = 0;
    v13 = "Failed to provide message payload to Game Center. No payload URL.";
    goto LABEL_24;
  }
  *(_QWORD *)&buf = 0;
  *((_QWORD *)&buf + 1) = &buf;
  v18 = 0x3052000000;
  v19 = sub_19E2476EC;
  v20 = sub_19E24755C;
  v10 = (void *)qword_1EE5045C0;
  v21 = qword_1EE5045C0;
  if (!qword_1EE5045C0)
  {
    v16[0] = MEMORY[0x1E0C809B0];
    v16[1] = 3221225472;
    v16[2] = sub_19E30E688;
    v16[3] = &unk_1E3FB4F80;
    v16[4] = &buf;
    sub_19E30E688((uint64_t)v16);
    v10 = *(void **)(*((_QWORD *)&buf + 1) + 40);
  }
  _Block_object_dispose(&buf, 8);
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    if (IMOSLoggingEnabled())
    {
      v11 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
      {
        LOWORD(buf) = 0;
        _os_log_impl(&dword_19E239000, v11, OS_LOG_TYPE_INFO, "Notifying GKDaemonProxy with URL, senderHandle, and contactID", (uint8_t *)&buf, 2u);
      }
    }
    objc_msgSend(v10, "messagesDidReceiveGameCenterURL:senderHandle:contactID:", v9, a2, a3, v15);
  }
  else if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    if (IMOSLoggingEnabled())
    {
      v14 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
      {
        LOWORD(buf) = 0;
        _os_log_impl(&dword_19E239000, v14, OS_LOG_TYPE_INFO, "Notifying GKDaemonProxy with URL", (uint8_t *)&buf, 2u);
      }
    }
    objc_msgSend(v10, "messagesDidReceiveGameCenterURL:", v9, v15);
  }
}

void sub_19E30DF5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int buf, uint64_t a16)
{
  if (a2 == 1)
  {
    objc_begin_catch(exception_object);
    objc_end_catch();
    JUMPOUT(0x19E30DF1CLL);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_19E30E17C()
{
  NSObject *v1;
  uint8_t v2[16];

  if (qword_1EE503818 != -1)
    dispatch_once(&qword_1EE503818, &unk_1E3FB2698);
  if (off_1EE503810)
    return off_1EE503810();
  if (IMOSLoggingEnabled())
  {
    v1 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v1, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)v2 = 0;
      _os_log_impl(&dword_19E239000, v1, OS_LOG_TYPE_INFO, "Could not link CKValidSharingURLHostnames from CloudKit!", v2, 2u);
    }
  }
  return 0;
}

void *sub_19E30E248()
{
  void *result;

  result = (void *)MEMORY[0x1A1AE7D58]("CKValidSharingURLHostnames", CFSTR("CloudKit"));
  off_1EE503810 = result;
  return result;
}

uint64_t _IMShouldProcessURLForPhotosExtensionAndSupportedHosts(void *a1, void *a2)
{
  return sub_19E30E294(a1, (uint64_t)CFSTR("photos"), a2);
}

uint64_t _IMShouldProcessURLForPhotosSharingAndSupportedHosts(void *a1, void *a2)
{
  return sub_19E30E294(a1, (uint64_t)CFSTR("photos_sharing"), a2);
}

uint64_t sub_19E30E294(void *a1, uint64_t a2, void *a3)
{
  void *v6;
  void *v7;
  void *v8;
  uint64_t result;
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint8_t buf[8];
  _BYTE v19[128];
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    result = IMOSLoggingEnabled();
    if (!(_DWORD)result)
      return result;
    v10 = OSLogHandleForIMFoundationCategory();
    result = os_log_type_enabled(v10, OS_LOG_TYPE_INFO);
    if (!(_DWORD)result)
      return result;
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_19E239000, v10, OS_LOG_TYPE_INFO, "_IsURLForServiceAndSupportedHosts called with nil URL", buf, 2u);
    return 0;
  }
  v6 = (void *)objc_msgSend((id)objc_msgSend(a1, "host"), "lowercaseString");
  v7 = (void *)objc_msgSend(a1, "pathComponents");
  if ((unint64_t)objc_msgSend(v7, "count") < 2)
    v8 = 0;
  else
    v8 = (void *)objc_msgSend((id)objc_msgSend(v7, "objectAtIndex:", 1), "lowercaseString");
  result = objc_msgSend(v8, "isEqualToString:", a2);
  if (!(_DWORD)result)
    return result;
  v16 = 0u;
  v17 = 0u;
  v14 = 0u;
  v15 = 0u;
  v11 = objc_msgSend(a3, "countByEnumeratingWithState:objects:count:", &v14, v19, 16);
  if (!v11)
    return 0;
  v12 = *(_QWORD *)v15;
  while (2)
  {
    v13 = 0;
    do
    {
      if (*(_QWORD *)v15 != v12)
        objc_enumerationMutation(a3);
      if ((objc_msgSend(v6, "isEqualToString:", *(_QWORD *)(*((_QWORD *)&v14 + 1) + 8 * v13)) & 1) != 0)
        return 1;
      ++v13;
    }
    while (v11 != v13);
    v11 = objc_msgSend(a3, "countByEnumeratingWithState:objects:count:", &v14, v19, 16);
    result = 0;
    if (v11)
      continue;
    break;
  }
  return result;
}

void *sub_19E30E448()
{
  void *result;

  result = (void *)MEMORY[0x1A1AE7D58]("PLDonateMomentShareURL", CFSTR("PhotoLibraryServicesCore"));
  off_1EE5045B0 = result;
  return result;
}

void sub_19E30E474(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  if (a2 && IMOSLoggingEnabled())
  {
    v3 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      v4 = 138412290;
      v5 = a2;
      _os_log_impl(&dword_19E239000, v3, OS_LOG_TYPE_INFO, "PLMessagesSPI PLDonateMomentShareURL returned error: %@", (uint8_t *)&v4, 0xCu);
    }
  }
}

uint64_t IMSanitizedCaptionForIMExtensionPayloadUserInfoKey(void *a1)
{
  void *v1;
  uint64_t v2;

  v1 = (void *)objc_msgSend(a1, "objectForKey:", CFSTR("userInfo"));
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
    return 0;
  v2 = objc_msgSend(v1, "objectForKeyedSubscript:", CFSTR("caption"));
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    return v2;
  else
    return 0;
}

uint64_t IMSanitizedAppNameForIMExtensionPayloadUserInfoKey(void *a1)
{
  uint64_t v1;

  v1 = objc_msgSend(a1, "objectForKey:", CFSTR("an"));
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    return v1;
  else
    return 0;
}

uint64_t IMSanitizedAppIconDataForIMExtensionPayloadAppIconKey(void *a1)
{
  void *v1;

  v1 = (void *)objc_msgSend(a1, "objectForKey:", CFSTR("ai"));
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    return objc_msgSend(v1, "_FTOptionallyDecompressData");
  else
    return 0;
}

Class sub_19E30E688(uint64_t a1)
{
  Class result;
  void *v3;

  if (!qword_1EE5045C8)
  {
    qword_1EE5045C8 = _sl_dlopen();
    if (!qword_1EE5045C8)
    {
      abort_report_np();
      goto LABEL_6;
    }
  }
  while (1)
  {
    result = objc_getClass("GKDaemonProxy");
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40) = result;
    if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40))
      break;
LABEL_6:
    v3 = (void *)sub_19E36EB10();
    free(v3);
  }
  qword_1EE5045C0 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  return result;
}

void sub_19E30F2A8(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, os_activity_scope_state_s state)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x19E30F19CLL);
  }
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

void sub_19E30FA48(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void **v6;
  void *v7;
  id v8;
  void *v9;
  id v10;

  v10 = a2;
  v5 = a3;
  if (!v10 || v5)
  {
    v6 = (void **)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40);
    v7 = v5;
    goto LABEL_6;
  }
  MEMORY[0x1A1AE7D4C](CFSTR("BlastDoorPassPreview"), CFSTR("BlastDoor"));
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    v6 = (void **)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40);
    v7 = v10;
LABEL_6:
    v8 = v7;
    v9 = *v6;
    *v6 = v8;

  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));

}

uint64_t IMCSIndexReasonFromIMIndexReason(uint64_t a1)
{
  uint64_t result;

  result = 1;
  switch(a1)
  {
    case 0:
    case 2:
    case 5:
    case 6:
    case 7:
      result = a1;
      break;
    case 1:
      return result;
    case 3:
      result = 4;
      break;
    case 4:
LABEL_5:
      result = 3;
      break;
    default:
      switch(a1)
      {
        case 1001:
          result = 2;
          break;
        case 1002:
          goto LABEL_5;
        case 1004:
        case 1007:
          result = 0;
          break;
        default:
          return result;
      }
      break;
  }
  return result;
}

const __CFString *NSStringFromIMCoreSpotlightIndexReason(uint64_t a1)
{
  const __CFString *result;

  switch(a1)
  {
    case 1000:
      result = CFSTR("IMCoreSpotlightIndexReasonIncomingMessage");
      break;
    case 1001:
      result = CFSTR("IMCoreSpotlightIndexReasonCloudImport");
      break;
    case 1002:
      result = CFSTR("IMCoreSpotlightIndexReasonJunkMigration");
      break;
    case 1003:
      result = CFSTR("IMCoreSpotlightIndexReasonCollaboration");
      break;
    case 1004:
      result = CFSTR("IMCoreSpotlightIndexReasonManual");
      break;
    case 1005:
      result = CFSTR("IMCoreSpotlightIndexReasonRecentlyDeleted");
      break;
    case 1006:
      result = CFSTR("IMCoreSpotlightIndexReasonPermanentDeletion");
      break;
    case 1007:
      result = CFSTR("IMCoreSpotlightIndexReasonAttachmentsPurged");
      break;
    case 1008:
      result = CFSTR("IMCoreSpotlightIndexReasonContactsChanged");
      break;
    default:
      switch(a1)
      {
        case 1:
          result = CFSTR("IMCoreSpotlightIndexReasonNewContent");
          break;
        case 2:
          result = CFSTR("IMCoreSpotlightIndexReasonMigration");
          break;
        case 3:
          result = CFSTR("IMCoreSpotlightIndexReasonClientMigration");
          break;
        case 4:
          result = CFSTR("IMCoreSpotlightIndexReasonClientVersionChange");
          break;
        case 5:
          result = CFSTR("IMCoreSpotlightIndexReasonInconsistentState");
          break;
        case 6:
          result = CFSTR("IMCoreSpotlightIndexReasonFullReindexRequest");
          break;
        case 7:
          result = CFSTR("IMCoreSpotlightIndexReasonSelectiveReindexRequest");
          break;
        default:
          result = CFSTR("IMCoreSpotlightIndexReasonDefault");
          break;
      }
      break;
  }
  return result;
}

uint64_t IMCoreSpotlightIndexReasonFromReindexReason(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 5)
    return 0;
  else
    return qword_19E381778[a1 - 1];
}

uint64_t sub_19E30FDCC()
{
  uint64_t result;

  result = IMGetCachedDomainBoolForKeyWithDefaultValue();
  byte_1EE5045D0 = result;
  return result;
}

uint64_t IMSharedUtilitiesProtoCloudKitEncryptedMessageP2ReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  unint64_t v17;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  void *Data;
  id v25;
  uint64_t v26;
  void *String;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v17 = v10 >> 3;
      if ((v10 >> 3) == 3)
      {
        Data = (void *)PBReaderReadData();

        v25 = Data;
        v26 = 8;
      }
      else
      {
        if ((_DWORD)v17 != 2)
        {
          if ((_DWORD)v17 == 1)
          {
            v18 = 0;
            v19 = 0;
            v20 = 0;
            *(_BYTE *)(a1 + 28) |= 1u;
            while (1)
            {
              v21 = *v3;
              v22 = *(_QWORD *)(a2 + v21);
              if (v22 == -1 || v22 >= *(_QWORD *)(a2 + *v4))
                break;
              v23 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v22);
              *(_QWORD *)(a2 + v21) = v22 + 1;
              v20 |= (unint64_t)(v23 & 0x7F) << v18;
              if ((v23 & 0x80) == 0)
                goto LABEL_34;
              v18 += 7;
              v14 = v19++ >= 9;
              if (v14)
              {
                LODWORD(v20) = 0;
                goto LABEL_36;
              }
            }
            *(_BYTE *)(a2 + *v5) = 1;
LABEL_34:
            if (*(_BYTE *)(a2 + *v5))
              LODWORD(v20) = 0;
LABEL_36:
            *(_DWORD *)(a1 + 24) = v20;
          }
          else
          {
            result = PBReaderSkipValueWithTag();
            if (!(_DWORD)result)
              return result;
          }
          continue;
        }
        String = (void *)PBReaderReadString();

        v25 = String;
        v26 = 16;
      }
      *(_QWORD *)(a1 + v26) = v25;
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sub_19E3117B4(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, _BYTE *a5)
{
  id v8;
  id v9;

  v8 = a2;
  if (v8)
  {
    v9 = v8;
    objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), a2);
    v8 = v9;
    *a5 = 1;
  }

}

void sub_19E311900(uint64_t a1)
{
  IMGroupBlocklistManager *v2;
  uint64_t v3;
  void *v4;
  id v5;

  v2 = [IMGroupBlocklistManager alloc];
  objc_msgSend(*(id *)(a1 + 32), "groupsBlocklistFilename");
  v5 = (id)objc_claimAutoreleasedReturnValue();
  v3 = -[IMGroupBlocklistManager initFromFile:](v2, "initFromFile:", v5);
  v4 = (void *)qword_1EE5045D8;
  qword_1EE5045D8 = v3;

}

void sub_19E313BC8(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "_updateSettings");

}

void sub_19E313D68(uint64_t a1)
{
  NSObject *v2;
  int v3;
  _DWORD v4[2];
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  if (IMOSLoggingEnabled())
  {
    OSLogHandleForIMFoundationCategory();
    v2 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      v3 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 32) + 12);
      v4[0] = 67109120;
      v4[1] = v3;
      _os_log_impl(&dword_19E239000, v2, OS_LOG_TYPE_INFO, "checkSensitivePhotosAnalyticsEnabled returns: %d", (uint8_t *)v4, 8u);
    }

  }
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = *(_BYTE *)(*(_QWORD *)(a1 + 32) + 12);
}

intptr_t sub_19E31416C(uint64_t a1, char a2)
{
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = a2;
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void sub_19E314180(uint64_t a1, int a2, int a3)
{
  NSObject *v6;
  const __CFString *v7;
  const __CFString *v8;
  id *v9;
  id WeakRetained;
  uint64_t v11;
  id v12;
  int v13;
  const __CFString *v14;
  __int16 v15;
  const __CFString *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  if (IMOSLoggingEnabled())
  {
    OSLogHandleForIMFoundationCategory();
    v6 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      v7 = CFSTR("NO");
      if (a2)
        v8 = CFSTR("YES");
      else
        v8 = CFSTR("NO");
      if (a3)
        v7 = CFSTR("YES");
      v13 = 138412546;
      v14 = v8;
      v15 = 2112;
      v16 = v7;
      _os_log_impl(&dword_19E239000, v6, OS_LOG_TYPE_INFO, "AnalysisEnabledChanged with commSafetyEnabled: %@, nudityDetectionEnabled: %@", (uint8_t *)&v13, 0x16u);
    }

  }
  v9 = (id *)(a1 + 32);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v11 = objc_msgSend(WeakRetained, "_fetchEnablementGroup");
  v12 = objc_loadWeakRetained(v9);
  objc_msgSend(v12, "setEnablementGroup:", v11);

}

void sub_19E314414()
{
  void *v0;
  uint64_t v1;
  BOOL v2;
  char v3;
  void *v4;

  +[IMDefaults sharedInstance](IMDefaults, "sharedInstance");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "getValueFromDomain:forKey:", CFSTR("com.apple.messages.commsafety"), CFSTR("kInternalEnablementGroupOverride"));
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  v1 = objc_msgSend(v4, "integerValue");
  if (v4)
    v2 = v1 == 0;
  else
    v2 = 1;
  v3 = !v2;
  byte_1EE5045E0 = v3;

}

void sub_19E3144CC()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  id v3;

  +[IMDefaults sharedInstance](IMDefaults, "sharedInstance");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "getValueFromDomain:forKey:", CFSTR("com.apple.messages.commsafety"), CFSTR("kInternalEnablementGroupOverride"));
  v3 = (id)objc_claimAutoreleasedReturnValue();

  v1 = objc_msgSend(v3, "integerValue");
  v2 = v1 == 1;
  if (v1 == 2)
    v2 = 2;
  qword_1EE5045E8 = v2;

}

uint64_t sub_19E314548(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "_updateSettings");
  return objc_msgSend(*(id *)(a1 + 32), "_connectToFamilyCircle:", 0);
}

void sub_19E31467C(uint64_t a1)
{
  id *v1;
  id WeakRetained;
  id v3;

  v1 = (id *)(a1 + 32);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "_updateSettings");

  v3 = objc_loadWeakRetained(v1);
  objc_msgSend(v3, "_connectToFamilyCircle:", 0);

}

BOOL IMFileTransferStateIsActive(uint64_t a1)
{
  return (unint64_t)(a1 - 1) < 4;
}

BOOL IMFileTransferStateIsNotActive(uint64_t a1)
{
  return (unint64_t)(a1 - 5) < 0xFFFFFFFFFFFFFFFCLL;
}

BOOL sub_19E3148C8(void *a1, unint64_t a2, _BYTE *a3)
{
  int v6;
  int v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  stat v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  char v23;
  _BYTE v24[128];
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  if (a2 > 2)
    return 1;
  v23 = 0;
  v6 = objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager"), "fileExistsAtPath:isDirectory:", a1, &v23);
  if (objc_msgSend(a1, "rangeOfCharacterFromSet:", objc_msgSend(MEMORY[0x1E0CB3500], "invalidCharactersForFileTransferName")) != 0x7FFFFFFFFFFFFFFFLL)return 1;
  if (v23)
    v7 = v6;
  else
    v7 = 0;
  if (v7 != 1)
  {
    if (!v6)
      return 0;
    *a3 = 1;
    stat((const char *)objc_msgSend(a1, "fileSystemRepresentation", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                      0,
                      0),
      &v18);
    return (v18.st_mode & 0xF000) == 40960;
  }
  v8 = (void *)MEMORY[0x1A1AE8394]();
  v9 = (void *)objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager"), "contentsOfDirectoryAtPath:error:", a1, 0);
  LOBYTE(v18.st_dev) = 0;
  v19 = 0u;
  v20 = 0u;
  v21 = 0u;
  v22 = 0u;
  v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v19, v24, 16);
  if (!v10)
  {
    objc_autoreleasePoolPop(v8);
    return 1;
  }
  v11 = v10;
  v12 = *(_QWORD *)v20;
  v13 = a2 + 1;
LABEL_9:
  v14 = 0;
  while (1)
  {
    if (*(_QWORD *)v20 != v12)
      objc_enumerationMutation(v9);
    v15 = sub_19E3148C8(objc_msgSend(a1, "stringByAppendingPathComponent:", *(_QWORD *)(*((_QWORD *)&v19 + 1) + 8 * v14)), v13, &v18);
    if ((v15 & 1) != 0)
      break;
    if (v11 == ++v14)
    {
      v11 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v19, v24, 16);
      if (v11)
        goto LABEL_9;
      break;
    }
  }
  v16 = 1;
  if (LOBYTE(v18.st_dev))
  {
    *a3 = 1;
    v16 = v15;
  }
  objc_autoreleasePoolPop(v8);
  return v16;
}

const __CFString *IMStringFromTransferState(uint64_t a1)
{
  if ((unint64_t)(a1 + 1) > 0xA)
    return CFSTR("Unknown");
  else
    return off_1E3FBA508[a1 + 1];
}

const __CFString *IMStringFromCKSyncState(uint64_t a1)
{
  const __CFString *result;

  switch(a1)
  {
    case 0:
      result = CFSTR("Not synced");
      break;
    case 1:
      result = CFSTR("Synced");
      break;
    case 2:
      result = CFSTR("Upload unsuccessful");
      break;
    case 3:
      result = CFSTR("Needs upload");
      break;
    case 4:
      result = CFSTR("Pending validation");
      break;
    case 5:
      result = CFSTR("Download unsuccessful");
      break;
    default:
      if (a1 == 64)
        result = CFSTR("Unsyncable");
      else
        result = CFSTR("Unknown");
      break;
  }
  return result;
}

const __CFString *IMStringFromIMFileTransferUpdateReason(unint64_t a1)
{
  if (a1 > 2)
    return CFSTR("Unhandled New Case");
  else
    return off_1E3FBA560[a1];
}

void sub_19E3169F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  if (a2 == 1)
  {
    objc_begin_catch(exception_object);
    objc_end_catch();
    JUMPOUT(0x19E316860);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_19E316F94()
{
  uint64_t v0;
  void *v2;

  if (!qword_1ECFC6D88)
    qword_1ECFC6D88 = _sl_dlopen();
  v0 = qword_1ECFC6D88;
  if (!qword_1ECFC6D88)
  {
    v2 = (void *)abort_report_np();
    free(v2);
  }
  return v0;
}

IMMessageHistoryDateRangeSummary *sub_19E317044(uint64_t a1)
{
  IMMessageHistoryDateRangeSummary *result;
  IMMessageHistoryDateRangeSummary *v3;
  SEL v4;
  id v5;
  id v6;

  sub_19E316F94();
  result = (IMMessageHistoryDateRangeSummary *)objc_getClass("PFVideoComplement");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40) = result;
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40))
  {
    qword_1ECFC6C80 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  }
  else
  {
    v3 = (IMMessageHistoryDateRangeSummary *)sub_19E36ED7C();
    return -[IMMessageHistoryDateRangeSummary initWithDateInterval:messages:](v3, v4, v5, v6);
  }
  return result;
}

id sub_19E317534(void *a1, uint64_t a2, void *a3)
{
  id v4;
  void *v5;
  void *v6;
  uint64_t v7;
  void *v8;
  id v9;
  uint64_t v10;

  v4 = a3;
  if (v4)
  {
    objc_msgSend(a1, "stringByDeletingPathExtension");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(a1, "pathExtension");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = objc_msgSend(v6, "length");
    objc_msgSend(v5, "stringByAppendingString:", v4);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = v8;
    if (v7)
    {
      objc_msgSend(v8, "stringByAppendingPathExtension:", v6);
      v10 = objc_claimAutoreleasedReturnValue();

      v9 = (id)v10;
    }

  }
  else
  {
    v9 = a1;
  }

  return v9;
}

id sub_19E3175E4(void *a1, uint64_t a2, void *a3)
{
  id v4;
  void *v5;
  void *v6;
  id v7;
  NSObject *v8;
  int v10;
  void *v11;
  __int16 v12;
  id v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  objc_msgSend(a1, "stringByAppendingPathComponent:", v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "stringByResolvingAndStandardizingPath");
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  if ((objc_msgSend(v6, "hasPrefix:", a1) & 1) != 0)
  {
    v7 = v6;
  }
  else
  {
    if (IMOSLoggingEnabled())
    {
      OSLogHandleForIMFoundationCategory();
      v8 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        v10 = 138412546;
        v11 = a1;
        v12 = 2112;
        v13 = v4;
        _os_log_impl(&dword_19E239000, v8, OS_LOG_TYPE_INFO, "Attempted to create path that is not a subpath of self (%@): '%@'", (uint8_t *)&v10, 0x16u);
      }

    }
    v7 = 0;
  }

  return v7;
}

id sub_19E317718(void *a1)
{
  void *v1;
  void *v2;
  void *v3;
  id v4;
  id v5;
  uint64_t v6;
  int v7;
  void *v8;
  void *v9;
  uint64_t v10;
  id v11;
  void *v13;

  objc_msgSend(a1, "pathComponents");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  if ((unint64_t)objc_msgSend(v1, "count") < 2)
  {
    if (objc_msgSend(v1, "count") == 1)
    {
      objc_msgSend(v1, "objectAtIndexedSubscript:", 0);
      v2 = (void *)objc_claimAutoreleasedReturnValue();
      v3 = 0;
      if (v2)
        goto LABEL_6;
    }
    else
    {
      v2 = 0;
      v3 = 0;
    }
LABEL_9:
    v4 = 0;
    goto LABEL_21;
  }
  objc_msgSend(v1, "lastObject");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "subarrayWithRange:", 0, objc_msgSend(v1, "count") - 1);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v2)
    goto LABEL_9;
LABEL_6:
  if (objc_msgSend(v2, "isEqualToString:", CFSTR("/")))
  {
    v4 = v2;
  }
  else
  {
    v5 = objc_retainAutorelease(v2);
    v6 = objc_msgSend(v5, "cStringUsingEncoding:", 4);
    v13 = 0;
    if (qword_1ECFC6F08 != -1)
      dispatch_once(&qword_1ECFC6F08, &unk_1E3FB3DC8);
    v7 = off_1ECFC6F00(v6, &v13);
    v4 = 0;
    v8 = v13;
    if (!v7 && v13)
    {
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v13);
      v4 = (id)objc_claimAutoreleasedReturnValue();
      v8 = v13;
    }
    if (v8)
      free(v8);
    if (!v4)
    {
      v2 = v5;
      goto LABEL_21;
    }
  }
  if (v3)
  {
    objc_msgSend(v3, "arrayByAddingObject:", v4);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "pathWithComponents:", v9);
    v10 = objc_claimAutoreleasedReturnValue();

    v4 = (id)v10;
  }
LABEL_21:
  v11 = v4;

  return v11;
}

void *sub_19E3178E8()
{
  void *result;

  result = (void *)MEMORY[0x1A1AE7D58]("APFSMakeCompatibleName", CFSTR("APFS"));
  off_1ECFC6F00 = result;
  return result;
}

uint64_t IMLegacyCalculateFileSizeForPath(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  NSObject *v14;
  id v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint8_t buf[4];
  id v22;
  __int16 v23;
  uint64_t v24;
  _BYTE v25[128];
  _QWORD v26[3];

  v26[1] = *MEMORY[0x1E0C80C00];
  v1 = a1;
  objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0C99E98], "fileURLWithPath:", v1);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = *MEMORY[0x1E0C99998];
  v26[0] = *MEMORY[0x1E0C99998];
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v26, 1);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "enumeratorAtURL:includingPropertiesForKeys:options:errorHandler:", v3, v5, 0, &unk_1E3FB3F88);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  v19 = 0u;
  v20 = 0u;
  v17 = 0u;
  v18 = 0u;
  v7 = v6;
  v8 = 0;
  v9 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v17, v25, 16);
  if (v9)
  {
    v10 = *(_QWORD *)v18;
    do
    {
      v11 = 0;
      do
      {
        if (*(_QWORD *)v18 != v10)
          objc_enumerationMutation(v7);
        v12 = *(void **)(*((_QWORD *)&v17 + 1) + 8 * v11);
        v13 = (void *)MEMORY[0x1A1AE8394]();
        v16 = 0;
        if (objc_msgSend(v12, "getResourceValue:forKey:error:", &v16, v4, 0))
          v8 += objc_msgSend(v16, "unsignedLongLongValue");
        objc_autoreleasePoolPop(v13);
        ++v11;
      }
      while (v9 != v11);
      v9 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v17, v25, 16);
    }
    while (v9);
  }

  if (IMOSLoggingEnabled())
  {
    OSLogHandleForIMFoundationCategory();
    v14 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138412546;
      v22 = v1;
      v23 = 2048;
      v24 = v8;
      _os_log_impl(&dword_19E239000, v14, OS_LOG_TYPE_INFO, "_CalculateFileSizeForPath: calculated %@ to be %llu bytes", buf, 0x16u);
    }

  }
  return v8;
}

uint64_t sub_19E317B60(uint64_t a1, void *a2, void *a3)
{
  id v4;
  id v5;
  NSObject *v6;
  int v8;
  id v9;
  __int16 v10;
  id v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v4 = a2;
  v5 = a3;
  if (IMOSLoggingEnabled())
  {
    OSLogHandleForIMFoundationCategory();
    v6 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      v8 = 138412546;
      v9 = v4;
      v10 = 2112;
      v11 = v5;
      _os_log_impl(&dword_19E239000, v6, OS_LOG_TYPE_INFO, "Couldn't enumerate %@: %@", (uint8_t *)&v8, 0x16u);
    }

  }
  return 1;
}

unint64_t IMRoundFileSize(unint64_t a1)
{
  return vcvtd_n_u64_f64((double)(a1 >> 20), 0x14uLL);
}

uint64_t IMCalculateFileSizeForPath(void *a1, int a2)
{
  id v3;
  void *v4;
  id v5;
  NSObject *v6;
  uint64_t v7;
  int *v8;
  char *v9;
  uint64_t v10;
  NSObject *v11;
  void *v12;
  uint64_t v13;
  id v14;
  id v15;
  NSObject *v16;
  NSObject *v17;
  id v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint8_t buf[4];
  uint64_t v24;
  __int16 v25;
  char *v26;
  __int16 v27;
  uint64_t v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (a2)
  {
    v21 = 0;
    v22 = 0;
    v5 = objc_retainAutorelease(v3);
    objc_msgSend(v5, "fileSystemRepresentation");
    if ((dirstat_np() & 0x80000000) != 0 && IMOSLoggingEnabled())
    {
      OSLogHandleForIMFoundationCategory();
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
      {
        v7 = objc_msgSend(objc_retainAutorelease(v5), "fileSystemRepresentation");
        v8 = __error();
        v9 = strerror(*v8);
        *(_DWORD *)buf = 136315394;
        v24 = v7;
        v25 = 2080;
        v26 = v9;
        _os_log_impl(&dword_19E239000, v6, OS_LOG_TYPE_INFO, "Directory sizing for %s failed with error %s", buf, 0x16u);
      }

    }
    v10 = v21;
    if (IMOSLoggingEnabled())
    {
      OSLogHandleForIMFoundationCategory();
      v11 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412802;
        v24 = (uint64_t)v5;
        v25 = 2048;
        v26 = (char *)v21;
        v27 = 2048;
        v28 = v22;
        _os_log_impl(&dword_19E239000, v11, OS_LOG_TYPE_INFO, "IMCalculateFileSizeForPath: calculated %@ to be %llu bytes for %llu descendents", buf, 0x20u);
      }

    }
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0C99E98], "fileURLWithPath:", v3);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v20 = 0;
    v13 = *MEMORY[0x1E0C99998];
    v19 = 0;
    objc_msgSend(v12, "getResourceValue:forKey:error:", &v20, v13, &v19);
    v14 = v20;
    v15 = v19;
    if (v14)
    {
      v10 = objc_msgSend(v14, "unsignedLongLongValue");
      if (IMOSLoggingEnabled())
      {
        OSLogHandleForIMFoundationCategory();
        v16 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 134217984;
          v24 = v10;
          _os_log_impl(&dword_19E239000, v16, OS_LOG_TYPE_INFO, "Calculated file size value of %llu", buf, 0xCu);
        }

      }
    }
    else
    {
      if (IMOSLoggingEnabled())
      {
        OSLogHandleForIMFoundationCategory();
        v17 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 138412290;
          v24 = (uint64_t)v15;
          _os_log_impl(&dword_19E239000, v17, OS_LOG_TYPE_INFO, "Received error when calculating file size %@", buf, 0xCu);
        }

      }
      v10 = 0;
    }

  }
  return v10;
}

uint64_t sub_19E317F98(void *a1, uint64_t a2, uint64_t a3, void *a4, _QWORD *a5)
{
  id v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  char v13;
  id v14;
  NSObject *v15;
  uint64_t v16;
  void *v17;
  const __CFString *v18;
  uint64_t v19;
  NSObject *v20;
  const __CFString *v21;
  id v22;
  void *v23;
  id v25;
  uint8_t buf[4];
  const __CFString *v27;
  __int16 v28;
  uint64_t v29;
  __int16 v30;
  void *v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v8 = a4;
  objc_msgSend(MEMORY[0x1E0C99E98], "fileURLWithPath:", v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "path");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  LOBYTE(a1) = objc_msgSend(a1, "fileExistsAtPath:", v10);

  if ((a1 & 1) != 0)
  {
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", a3);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v12 = *MEMORY[0x1E0C999D8];
    v25 = 0;
    v13 = objc_msgSend(v9, "setResourceValue:forKey:error:", v11, v12, &v25);
    v14 = v25;

    if ((v13 & 1) != 0)
    {
      if (IMOSLoggingEnabled())
      {
        OSLogHandleForIMFoundationCategory();
        v15 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
        {
          objc_msgSend(v9, "path");
          v16 = objc_claimAutoreleasedReturnValue();
          v17 = (void *)v16;
          v18 = CFSTR("NO");
          if ((_DWORD)a3)
            v18 = CFSTR("YES");
          *(_DWORD *)buf = 138412546;
          v27 = v18;
          v28 = 2112;
          v29 = v16;
          _os_log_impl(&dword_19E239000, v15, OS_LOG_TYPE_INFO, "Set iCloudBackupAttribute to %@ on '%@' ok", buf, 0x16u);

        }
      }
      v19 = 1;
      goto LABEL_21;
    }
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", *MEMORY[0x1E0CB28A8], 4, 0);
    v14 = (id)objc_claimAutoreleasedReturnValue();
  }
  if (a5)
    *a5 = objc_retainAutorelease(v14);
  if (IMOSLoggingEnabled())
  {
    OSLogHandleForIMFoundationCategory();
    v20 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
    {
      if ((_DWORD)a3)
        v21 = CFSTR("YES");
      else
        v21 = CFSTR("NO");
      objc_msgSend(v9, "path");
      v22 = (id)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v14, "localizedDescription");
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138412802;
      v27 = v21;
      v28 = 2112;
      v29 = (uint64_t)v22;
      v30 = 2112;
      v31 = v23;
      _os_log_impl(&dword_19E239000, v20, OS_LOG_TYPE_INFO, "Failed to set iCloudBackupAttribute to %@ on '%@'. Error = '%@'", buf, 0x20u);

    }
  }
  v19 = 0;
LABEL_21:

  return v19;
}

uint64_t sub_19E318278(void *a1, uint64_t a2, unsigned int a3, void *a4, _QWORD *a5)
{
  NSObject *v6;
  const __CFString *v7;
  int v8;
  id v9;
  id v10;
  int v11;
  int v12;
  id v13;
  void *v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t i;
  void *v19;
  void *v20;
  void *v21;
  int v22;
  id v23;
  uint64_t v24;
  void *v26;
  id v29;
  id v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  id v35;
  id v36;
  uint8_t v37[128];
  uint8_t buf[4];
  id v39;
  __int16 v40;
  const __CFString *v41;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  v29 = a4;
  if (IMOSLoggingEnabled())
  {
    OSLogHandleForIMFoundationCategory();
    v6 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      v7 = CFSTR("NO");
      if (a3)
        v7 = CFSTR("YES");
      *(_DWORD *)buf = 138412546;
      v39 = v29;
      v40 = 2112;
      v41 = v7;
      _os_log_impl(&dword_19E239000, v6, OS_LOG_TYPE_INFO, "Setting iCloudBackupAttribute for all files and dirs at '%@' to %@", buf, 0x16u);
    }

  }
  v36 = 0;
  v8 = objc_msgSend(a1, "__im_setiCloudBackupAttribute:onItemAtPath:error:", a3, v29, &v36);
  v9 = v36;
  v10 = v9;
  buf[0] = 0;
  if (v8)
  {
    v11 = objc_msgSend(a1, "fileExistsAtPath:isDirectory:", v29, buf);
    if (buf[0])
      v12 = v11;
    else
      v12 = 0;
    if (v12 != 1)
    {
      v24 = 1;
      goto LABEL_35;
    }
    v35 = v10;
    objc_msgSend(a1, "subpathsOfDirectoryAtPath:error:", v29, &v35);
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    v13 = v35;

    v14 = v26;
    if (v26)
    {
      v33 = 0u;
      v34 = 0u;
      v31 = 0u;
      v32 = 0u;
      v15 = v26;
      v16 = objc_msgSend(v15, "countByEnumeratingWithState:objects:count:", &v31, v37, 16);
      if (v16)
      {
        v17 = *(_QWORD *)v32;
        while (2)
        {
          for (i = 0; i != v16; ++i)
          {
            if (*(_QWORD *)v32 != v17)
              objc_enumerationMutation(v15);
            v19 = *(void **)(*((_QWORD *)&v31 + 1) + 8 * i);
            v20 = (void *)MEMORY[0x1A1AE8394]();
            if (objc_msgSend(v19, "characterAtIndex:", 0) == 46)
            {
              objc_autoreleasePoolPop(v20);
            }
            else
            {
              objc_msgSend(v29, "stringByAppendingPathComponent:", v19);
              v21 = (void *)objc_claimAutoreleasedReturnValue();
              v30 = v13;
              v22 = objc_msgSend(a1, "__im_setiCloudBackupAttribute:onItemAtPath:error:", a3, v21, &v30);
              v23 = v30;

              objc_autoreleasePoolPop(v20);
              if (!v22)
              {
                v24 = 0;
                v13 = v23;
                goto LABEL_29;
              }
              v13 = v23;
            }
          }
          v16 = objc_msgSend(v15, "countByEnumeratingWithState:objects:count:", &v31, v37, 16);
          if (v16)
            continue;
          break;
        }
      }
      v24 = 1;
LABEL_29:

      v14 = v26;
    }
    else
    {
      v24 = 0;
    }

  }
  else
  {
    v24 = 0;
    v13 = v9;
  }
  if (!a5 || (v24 & 1) != 0)
  {
    v10 = v13;
  }
  else
  {
    v10 = objc_retainAutorelease(v13);
    v24 = 0;
    *a5 = v10;
  }
LABEL_35:

  return v24;
}

uint64_t sub_19E318598(void *a1, uint64_t a2, void *a3, _QWORD *a4, _QWORD *a5, _QWORD *a6)
{
  id v10;
  int v11;
  id v12;
  id v13;
  uint64_t v14;
  void *v15;
  id v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  void *v23;
  void *v24;
  int v25;
  void *v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  id v32;
  id v33;
  id v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  id v39;
  id v40;
  char v41;
  _BYTE v42[128];
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  v10 = a3;
  objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v32 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v33 = (id)objc_claimAutoreleasedReturnValue();
  v41 = 0;
  v40 = 0;
  v11 = objc_msgSend(a1, "__im_getiCloudBackupAttributeForItemAtPath:attributeValue:error:", v10, &v41, &v40);
  v12 = v40;
  v13 = v12;
  v14 = 0;
  if (v11 && !v12)
  {
    if (v41)
      objc_msgSend(v32, "addObject:", v10);
    objc_msgSend(v33, "addObject:", v10);
    v39 = 0;
    objc_msgSend(a1, "subpathsOfDirectoryAtPath:error:", v10, &v39);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    v16 = v39;
    v13 = v16;
    v14 = 0;
    if (!v15 || v16)
      goto LABEL_32;
    v37 = 0u;
    v38 = 0u;
    v35 = 0u;
    v36 = 0u;
    v17 = v15;
    v18 = objc_msgSend(v17, "countByEnumeratingWithState:objects:count:", &v35, v42, 16);
    if (v18)
    {
      v19 = v18;
      v28 = v15;
      v29 = a4;
      v30 = a5;
      v31 = a6;
      v20 = *(_QWORD *)v36;
      LOBYTE(v21) = 1;
LABEL_9:
      v22 = 0;
      while (1)
      {
        if (*(_QWORD *)v36 != v20)
          objc_enumerationMutation(v17);
        v23 = *(void **)(*((_QWORD *)&v35 + 1) + 8 * v22);
        if (objc_msgSend(v23, "characterAtIndex:", 0) != 46)
        {
          objc_msgSend(v10, "stringByAppendingPathComponent:", v23);
          v24 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v33, "addObject:", v24);
          v34 = 0;
          v21 = objc_msgSend(a1, "__im_getiCloudBackupAttributeForItemAtPath:attributeValue:error:", v24, &v41, &v34);
          v13 = v34;
          if (v13)
            v25 = 0;
          else
            v25 = v21;
          if (v25 == 1 && v41 != 0)
            objc_msgSend(v32, "addObject:", v24);

          if (!v25)
            break;
        }
        if (v19 == ++v22)
        {
          v19 = objc_msgSend(v17, "countByEnumeratingWithState:objects:count:", &v35, v42, 16);
          if (v19)
            goto LABEL_9;
          v13 = 0;
          break;
        }
      }

      a5 = v30;
      a6 = v31;
      a4 = v29;
      if ((v21 & 1) == 0)
      {
        v14 = 0;
        v15 = v28;
LABEL_32:

        goto LABEL_33;
      }
      v15 = v28;
      if (!v29)
      {
LABEL_29:
        if (a5)
          *a5 = objc_retainAutorelease(v32);
        v14 = 1;
        goto LABEL_32;
      }
    }
    else
    {

      v13 = 0;
      if (!a4)
        goto LABEL_29;
    }
    *a4 = objc_retainAutorelease(v33);
    goto LABEL_29;
  }
LABEL_33:
  if (a6 && (v14 & 1) == 0)
    *a6 = objc_retainAutorelease(v13);

  return v14;
}

uint64_t sub_19E31886C(uint64_t a1, uint64_t a2, void *a3)
{
  id v3;
  void *v4;
  int v5;
  void *v6;
  void *v7;
  void *v8;
  int v9;
  uint64_t v10;

  v3 = a3;
  objc_msgSend(v3, "pathComponents");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v3, "hasPrefix:", CFSTR("/Volumes"));

  if (!v5)
    goto LABEL_4;
  if ((unint64_t)objc_msgSend(v4, "count") < 3)
    goto LABEL_4;
  objc_msgSend(v4, "objectAtIndex:", 2);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(CFSTR("/Volumes"), "stringByAppendingPathComponent:", v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = objc_msgSend(v8, "fileExistsAtPath:", v7);

  if (!v9)
    v10 = 1;
  else
LABEL_4:
    v10 = 0;

  return v10;
}

uint64_t sub_19E31893C(void *a1, uint64_t a2, void *a3, unsigned int a4)
{
  void *v6;
  uint64_t v7;
  id v8;
  void *v9;
  void *v10;

  objc_msgSend(a3, "stringByResolvingAndStandardizingPath");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_msgSend(a1, "__im_isPathOnMissingVolume:", v6) & 1) != 0)
  {
    v7 = 0;
  }
  else
  {
    v8 = objc_alloc(MEMORY[0x1E0C99D80]);
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLong:", a4);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = (void *)objc_msgSend(v8, "initWithObjectsAndKeys:", v9, *MEMORY[0x1E0CB2AA8], 0);

    v7 = objc_msgSend(a1, "createDirectoryAtPath:withIntermediateDirectories:attributes:error:", v6, 1, v10, 0);
  }

  return v7;
}

id sub_19E318A08(void *a1, uint64_t a2, void *a3)
{
  void *v4;
  id v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;

  v4 = (void *)MEMORY[0x1E0CB3940];
  v5 = a3;
  objc_msgSend(v4, "stringGUID");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  IMSafeTemporaryDirectory();
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "path");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(a1, "createUniqueDirectoryWithName:atPath:ofType:", v6, v8, 0);
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v5, "lastPathComponent");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "stringByDeletingPathExtension");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "pathExtension");
  v12 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(a1, "uniqueFilename:atPath:ofType:", v11, v9, v12);
  v13 = (void *)objc_claimAutoreleasedReturnValue();

  if (v13)
  {
    objc_msgSend(MEMORY[0x1E0C99E98], "fileURLWithPath:", v13);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v14 = 0;
  }

  return v14;
}

id sub_19E318B1C(uint64_t a1, uint64_t a2, void *a3)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  NSObject *v7;
  void *v8;
  char v9;
  id v10;
  id v11;
  NSObject *v12;
  NSObject *v13;
  id v15;
  uint8_t buf[4];
  id v17;
  __int16 v18;
  void *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v3 = a3;
  if (v3)
  {
    objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "lastPathComponent");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "im_randomTemporaryFileURLWithFileName:", v5);
    v6 = (void *)objc_claimAutoreleasedReturnValue();

    if (IMOSLoggingEnabled())
    {
      OSLogHandleForIMFoundationCategory();
      v7 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412546;
        v17 = v3;
        v18 = 2112;
        v19 = v6;
        _os_log_impl(&dword_19E239000, v7, OS_LOG_TYPE_INFO, "Attempting to copy URL %@ to new URL %@", buf, 0x16u);
      }

    }
    if (v6)
    {
      objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      v15 = 0;
      v9 = objc_msgSend(v8, "copyItemAtURL:toURL:error:", v3, v6, &v15);
      v10 = v15;

      if ((v9 & 1) != 0)
      {
        v11 = v6;
LABEL_20:

        goto LABEL_21;
      }
    }
    else
    {
      v10 = 0;
    }
    if (IMOSLoggingEnabled())
    {
      OSLogHandleForIMFoundationCategory();
      v13 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412290;
        v17 = v10;
        _os_log_impl(&dword_19E239000, v13, OS_LOG_TYPE_INFO, "Copy failed with error %@", buf, 0xCu);
      }

    }
    v11 = 0;
    goto LABEL_20;
  }
  if (IMOSLoggingEnabled())
  {
    OSLogHandleForIMFoundationCategory();
    v12 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_19E239000, v12, OS_LOG_TYPE_INFO, "Empty URL passed in for link generation", buf, 2u);
    }

  }
  v11 = 0;
LABEL_21:

  return v11;
}

id sub_19E318D90(uint64_t a1, uint64_t a2, void *a3)
{
  void *v3;
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;

  v3 = (void *)MEMORY[0x1E0CB3500];
  v4 = a3;
  objc_msgSend(v3, "URLPathAllowedCharacterSet");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "stringByAddingPercentEncodingWithAllowedCharacters:", v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v6, "stringByReplacingOccurrencesOfString:withString:", CFSTR("%"), CFSTR("-"));
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("adaptive-image-glyph-%@.heic"), v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  IMSafeTemporaryDirectory();
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "URLByAppendingPathComponent:isDirectory:", CFSTR("adaptive-image-glyphs"), 1);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "URLByAppendingPathComponent:isDirectory:", v8, 0);
  v11 = (void *)objc_claimAutoreleasedReturnValue();

  return v11;
}

void sub_19E319638(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_19E319650(uint64_t result)
{
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = 1;
  return result;
}

void *IMLoggingLevelFromString(uint64_t a1)
{
  void *result;

  if (qword_1EE504600 != -1)
    dispatch_once(&qword_1EE504600, &unk_1E3FBA5C8);
  result = (void *)objc_msgSend((id)qword_1EE5045F8, "objectForKey:", a1);
  if (result)
    LOBYTE(result) = objc_msgSend(result, "integerValue");
  return (void *)result;
}

void sub_19E3196C4()
{
  qword_1EE5045F8 = (uint64_t)&unk_1E3FFF298;
}

const __CFString *IMStringFromLoggingLevel(int a1)
{
  if (a1 <= 1)
  {
    if (!a1)
      return CFSTR("OS_LOG_TYPE_DEFAULT");
    if (a1 == 1)
      return CFSTR("OS_LOG_TYPE_INFO");
  }
  else
  {
    switch(a1)
    {
      case 2:
        return CFSTR("OS_LOG_TYPE_DEBUG");
      case 16:
        return CFSTR("OS_LOG_TYPE_ERROR");
      case 17:
        return CFSTR("OS_LOG_TYPE_FAULT");
    }
  }
  return 0;
}

void *IMLogCategoryFromFilePath(const char *a1)
{
  size_t v2;
  size_t v3;
  size_t v4;
  uint64_t v5;
  int v6;
  size_t v7;
  size_t v8;
  void *v9;

  v2 = strnlen(a1, 0x400uLL);
  if ((uint64_t)(v2 - 1) >= 0)
  {
    v3 = v2;
    v4 = v2;
    do
    {
      v5 = v3 - 1;
      v6 = a1[v3 - 1];
      v7 = v3 - 1;
      if (v6 != 46)
      {
        if (v6 == 47)
        {
          v8 = v4 - v3;
          goto LABEL_9;
        }
        v7 = v4;
      }
      --v3;
      v4 = v7;
    }
    while (v5 > 0);
  }
  v8 = 0;
  v3 = 0;
LABEL_9:
  v9 = malloc_type_malloc(v8 + 1, 0x46511449uLL);
  memcpy(v9, &a1[v3], v8);
  *((_BYTE *)v9 + v8) = 0;
  return v9;
}

void sub_19E31B048()
{
  void *v0;
  void *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v0 = (void *)MEMORY[0x1E0C99E60];
  v4 = objc_opt_class();
  v5 = objc_opt_class();
  v6 = objc_opt_class();
  v7 = objc_opt_class();
  v8 = objc_opt_class();
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v4, 5);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "setWithArray:", v1, v4, v5, v6, v7);
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = (void *)qword_1EE504608;
  qword_1EE504608 = v2;

}

void sub_19E31B3BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41)
{
  _Block_object_dispose(&a35, 8);
  _Block_object_dispose(&a41, 8);
  _Unwind_Resume(a1);
}

void sub_19E31B410(_QWORD *a1, void *a2, uint64_t a3, _BYTE *a4)
{
  uint64_t v7;
  BOOL v8;
  void *v9;
  id v10;

  v10 = a2;
  v8 = objc_msgSend(v10, "messagePartRange") == a1[8] && v7 == a1[9];
  v9 = v10;
  if (v8)
  {
    if (objc_msgSend(v10, "_canBeReplacedByRange:", a1[4]))
    {
      objc_msgSend(*(id *)(*(_QWORD *)(a1[5] + 8) + 40), "replaceObjectAtIndex:withObject:", a3, a1[4]);
      *(_BYTE *)(*(_QWORD *)(a1[6] + 8) + 24) = 1;
    }
    *a4 = 1;
    *(_BYTE *)(*(_QWORD *)(a1[7] + 8) + 24) = 0;
    v9 = v10;
  }

}

void sub_19E31C26C(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  NSObject *v9;

  _os_log_error_impl(a1, v9, OS_LOG_TYPE_ERROR, a4, &a9, 0x20u);
}

void sub_19E31C2CC()
{
  _QWORD *v0;
  void *v1;
  NSObject *v2;
  uint8_t v3[16];

  if (!qword_1EE504618)
  {
    v0 = (_QWORD *)MEMORY[0x1A1AE7D58]("AKUserInfoChangedNotification", CFSTR("AuthKit"));
    v1 = v0 ? (void *)*v0 : 0;
    objc_storeStrong((id *)&qword_1EE504618, v1);
    if (!qword_1EE504618)
    {
      if (IMOSLoggingEnabled())
      {
        OSLogHandleForIMFoundationCategory();
        v2 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)v3 = 0;
          _os_log_impl(&dword_19E239000, v2, OS_LOG_TYPE_INFO, "Failed to weak link AKUserInfoChangedNotification from AuthKit.", v3, 2u);
        }

      }
    }
  }
}

void sub_19E31C3E8()
{
  _QWORD *v0;
  void *v1;
  NSObject *v2;
  uint8_t v3[16];

  if (!qword_1EE504628)
  {
    v0 = (_QWORD *)MEMORY[0x1A1AE7D58]("AKUserInfoChangedAltDSIDKey", CFSTR("AuthKit"));
    v1 = v0 ? (void *)*v0 : 0;
    objc_storeStrong((id *)&qword_1EE504628, v1);
    if (!qword_1EE504628)
    {
      if (IMOSLoggingEnabled())
      {
        OSLogHandleForIMFoundationCategory();
        v2 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)v3 = 0;
          _os_log_impl(&dword_19E239000, v2, OS_LOG_TYPE_INFO, "Failed to weak link AKUserInfoChangedAltDSIDKey from AuthKit.", v3, 2u);
        }

      }
    }
  }
}

void sub_19E31C504()
{
  _QWORD *v0;
  void *v1;
  NSObject *v2;
  uint8_t v3[16];

  if (!qword_1EE504638)
  {
    v0 = (_QWORD *)MEMORY[0x1A1AE7D58]("AKUserInfoChangedSecurityLevelKey", CFSTR("AuthKit"));
    v1 = v0 ? (void *)*v0 : 0;
    objc_storeStrong((id *)&qword_1EE504638, v1);
    if (!qword_1EE504638)
    {
      if (IMOSLoggingEnabled())
      {
        OSLogHandleForIMFoundationCategory();
        v2 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)v3 = 0;
          _os_log_impl(&dword_19E239000, v2, OS_LOG_TYPE_INFO, "Failed to weak link AKUserInfoChangedSecurityLevelKey from AuthKit.", v3, 2u);
        }

      }
    }
  }
}

id SharedUtilitiesHelloWorldClass.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

id SharedUtilitiesHelloWorldClass.init()()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for SharedUtilitiesHelloWorldClass();
  return objc_msgSendSuper2(&v2, sel_init);
}

uint64_t type metadata accessor for SharedUtilitiesHelloWorldClass()
{
  return objc_opt_self();
}

id SharedUtilitiesHelloWorldClass.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for SharedUtilitiesHelloWorldClass();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t method lookup function for SharedUtilitiesHelloWorldClass()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of SharedUtilitiesHelloWorldClass.printGreeting()()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x50))();
}

ValueMetadata *type metadata accessor for SharedUtilitiesHelloWorld()
{
  return &type metadata for SharedUtilitiesHelloWorld;
}

void type metadata accessor for SyncedSettingsKey(uint64_t a1)
{
  sub_19E31CBB0(a1, &qword_1ECFC6638);
}

void type metadata accessor for MessagesClientCapabilities(uint64_t a1)
{
  sub_19E31CBB0(a1, &qword_1EE501600);
}

void type metadata accessor for IMChatStyle(uint64_t a1)
{
  sub_19E31CBB0(a1, &qword_1EE501608);
}

void type metadata accessor for Key(uint64_t a1)
{
  sub_19E31CBB0(a1, &qword_1EE501610);
}

uint64_t sub_19E31C754(uint64_t a1, uint64_t a2)
{
  return sub_19E31C89C(a1, a2, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1938]);
}

uint64_t sub_19E31C760(uint64_t a1, id *a2)
{
  uint64_t result;

  result = sub_19E36F870();
  *a2 = 0;
  return result;
}

uint64_t sub_19E31C7D4(uint64_t a1, id *a2)
{
  char v3;

  v3 = sub_19E36F87C();
  *a2 = 0;
  return v3 & 1;
}

uint64_t sub_19E31C850@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  sub_19E36F888();
  v2 = sub_19E36F864();
  result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

uint64_t sub_19E31C890(uint64_t a1, uint64_t a2)
{
  return sub_19E31C89C(a1, a2, MEMORY[0x1E0DEA950]);
}

uint64_t sub_19E31C89C(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v4;
  uint64_t v5;

  v4 = sub_19E36F888();
  v5 = a3(v4);
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t sub_19E31C8D8()
{
  sub_19E36F888();
  sub_19E36F8B8();
  return swift_bridgeObjectRelease();
}

uint64_t sub_19E31C918()
{
  uint64_t v0;

  sub_19E36F888();
  sub_19E36FE88();
  sub_19E36F8B8();
  v0 = sub_19E36FEA0();
  swift_bridgeObjectRelease();
  return v0;
}

unsigned __int8 *sub_19E31C988@<X0>(unsigned __int8 *result@<X0>, _WORD *a2@<X8>)
{
  *a2 = *result;
  return result;
}

void sub_19E31C998(_BYTE *a1@<X8>)
{
  _BYTE *v1;

  *a1 = *v1;
}

uint64_t sub_19E31C9A4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;

  v0 = sub_19E36F888();
  v2 = v1;
  if (v0 == sub_19E36F888() && v2 == v3)
    v5 = 1;
  else
    v5 = sub_19E36FE10();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v5 & 1;
}

uint64_t sub_19E31CA2C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = sub_19E36F864();
  result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

uint64_t sub_19E31CA70@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = sub_19E36F888();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_19E31CA98()
{
  sub_19E31CB4C((unint64_t *)&qword_1EE501630, (uint64_t)&unk_19E381A28);
  sub_19E31CB4C(&qword_1EE501638, (uint64_t)&unk_19E381944);
  return sub_19E36FD38();
}

uint64_t sub_19E31CB04()
{
  return sub_19E31CB4C(&qword_1EE501618, (uint64_t)&unk_19E381908);
}

uint64_t sub_19E31CB28()
{
  return sub_19E31CB4C(&qword_1EE501620, (uint64_t)&unk_19E3818DC);
}

uint64_t sub_19E31CB4C(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    type metadata accessor for Key(255);
    result = MEMORY[0x1A1AE8A18](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_19E31CB8C()
{
  return sub_19E31CB4C(&qword_1EE501628, (uint64_t)&unk_19E381978);
}

void sub_19E31CBB0(uint64_t a1, unint64_t *a2)
{
  unint64_t ForeignTypeMetadata;
  uint64_t v4;

  if (!*a2)
  {
    ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v4)
      atomic_store(ForeignTypeMetadata, a2);
  }
}

id TranscodingSettingsProvider.transcodePreviews.getter()
{
  uint64_t v0;
  id v1;
  void *v2;

  v1 = *(id *)(v0 + 16);
  if (v1)
  {
    v2 = (void *)sub_19E36F864();
    v1 = objc_msgSend(v1, sel_BOOLForKey_, v2);

  }
  return v1;
}

void sub_19E31CC40(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  void *v3;
  void *v4;

  v3 = *(void **)(*(_QWORD *)a1 + 16);
  if (v3)
  {
    v4 = (void *)sub_19E36F864();
    LOBYTE(v3) = objc_msgSend(v3, sel_BOOLForKey_, v4);

  }
  *a2 = (_BYTE)v3;
}

void sub_19E31CC9C(unsigned __int8 *a1, uint64_t a2)
{
  void *v2;
  uint64_t v3;
  id v4;

  v2 = *(void **)(*(_QWORD *)a2 + 16);
  if (v2)
  {
    v3 = *a1;
    v4 = (id)sub_19E36F864();
    objc_msgSend(v2, sel_setBool_forKey_, v3, v4);

  }
}

void TranscodingSettingsProvider.transcodePreviews.setter(char a1)
{
  uint64_t v1;
  void *v2;
  id v4;

  v2 = *(void **)(v1 + 16);
  if (v2)
  {
    v4 = (id)sub_19E36F864();
    objc_msgSend(v2, sel_setBool_forKey_, a1 & 1, v4);

  }
}

void (*TranscodingSettingsProvider.transcodePreviews.modify(_QWORD *a1))(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  unsigned __int8 *v3;
  void *v4;
  unsigned __int8 v5;
  void (*result)(uint64_t);

  v2 = *(void **)(v1 + 16);
  v3 = (unsigned __int8 *)(a1 + 2);
  *a1 = v1;
  a1[1] = v2;
  if (v2)
  {
    v4 = (void *)sub_19E36F864();
    v5 = objc_msgSend(v2, sel_BOOLForKey_, v4);

    result = sub_19E31CDEC;
  }
  else
  {
    v5 = 0;
    result = (void (*)(uint64_t))nullsub_5;
  }
  *v3 = v5;
  return result;
}

void sub_19E31CDEC(uint64_t a1)
{
  void *v1;
  uint64_t v2;
  id v3;

  v1 = *(void **)(a1 + 8);
  v2 = *(unsigned __int8 *)(a1 + 16);
  v3 = (id)sub_19E36F864();
  objc_msgSend(v1, sel_setBool_forKey_, v2, v3);

}

id TranscodingSettingsProvider.disableLowQualityModeOnWiFi.getter()
{
  uint64_t v0;
  id v1;
  void *v2;

  v1 = *(id *)(v0 + 16);
  if (v1)
  {
    v2 = (void *)sub_19E36F864();
    v1 = objc_msgSend(v1, sel_BOOLForKey_, v2);

  }
  return v1;
}

void sub_19E31CE88(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  void *v3;
  void *v4;

  v3 = *(void **)(*(_QWORD *)a1 + 16);
  if (v3)
  {
    v4 = (void *)sub_19E36F864();
    LOBYTE(v3) = objc_msgSend(v3, sel_BOOLForKey_, v4);

  }
  *a2 = (_BYTE)v3;
}

void sub_19E31CEE4(unsigned __int8 *a1, uint64_t a2)
{
  void *v2;
  uint64_t v3;
  id v4;

  v2 = *(void **)(*(_QWORD *)a2 + 16);
  if (v2)
  {
    v3 = *a1;
    v4 = (id)sub_19E36F864();
    objc_msgSend(v2, sel_setBool_forKey_, v3, v4);

  }
}

void TranscodingSettingsProvider.disableLowQualityModeOnWiFi.setter(char a1)
{
  uint64_t v1;
  void *v2;
  id v4;

  v2 = *(void **)(v1 + 16);
  if (v2)
  {
    v4 = (id)sub_19E36F864();
    objc_msgSend(v2, sel_setBool_forKey_, a1 & 1, v4);

  }
}

void (*TranscodingSettingsProvider.disableLowQualityModeOnWiFi.modify(_QWORD *a1))(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  unsigned __int8 *v3;
  void *v4;
  unsigned __int8 v5;
  void (*result)(uint64_t);

  v2 = *(void **)(v1 + 16);
  v3 = (unsigned __int8 *)(a1 + 2);
  *a1 = v1;
  a1[1] = v2;
  if (v2)
  {
    v4 = (void *)sub_19E36F864();
    v5 = objc_msgSend(v2, sel_BOOLForKey_, v4);

    result = sub_19E31D034;
  }
  else
  {
    v5 = 0;
    result = (void (*)(uint64_t))j_nullsub_5;
  }
  *v3 = v5;
  return result;
}

void sub_19E31D034(uint64_t a1)
{
  void *v1;
  uint64_t v2;
  id v3;

  v1 = *(void **)(a1 + 8);
  v2 = *(unsigned __int8 *)(a1 + 16);
  v3 = (id)sub_19E36F864();
  objc_msgSend(v1, sel_setBool_forKey_, v2, v3);

}

id TranscodingSettingsProvider.transcodePreviewsInitialized.getter()
{
  uint64_t v0;
  id v1;
  void *v2;

  v1 = *(id *)(v0 + 16);
  if (v1)
  {
    v2 = (void *)sub_19E36F864();
    v1 = objc_msgSend(v1, sel_BOOLForKey_, v2);

  }
  return v1;
}

void sub_19E31D0D0(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  void *v3;
  void *v4;

  v3 = *(void **)(*(_QWORD *)a1 + 16);
  if (v3)
  {
    v4 = (void *)sub_19E36F864();
    LOBYTE(v3) = objc_msgSend(v3, sel_BOOLForKey_, v4);

  }
  *a2 = (_BYTE)v3;
}

void sub_19E31D12C(unsigned __int8 *a1, uint64_t a2)
{
  void *v2;
  uint64_t v3;
  id v4;

  v2 = *(void **)(*(_QWORD *)a2 + 16);
  if (v2)
  {
    v3 = *a1;
    v4 = (id)sub_19E36F864();
    objc_msgSend(v2, sel_setBool_forKey_, v3, v4);

  }
}

void TranscodingSettingsProvider.transcodePreviewsInitialized.setter(char a1)
{
  uint64_t v1;
  void *v2;
  id v4;

  v2 = *(void **)(v1 + 16);
  if (v2)
  {
    v4 = (id)sub_19E36F864();
    objc_msgSend(v2, sel_setBool_forKey_, a1 & 1, v4);

  }
}

void (*TranscodingSettingsProvider.transcodePreviewsInitialized.modify(_QWORD *a1))(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  unsigned __int8 *v3;
  void *v4;
  unsigned __int8 v5;
  void (*result)(uint64_t);

  v2 = *(void **)(v1 + 16);
  v3 = (unsigned __int8 *)(a1 + 2);
  *a1 = v1;
  a1[1] = v2;
  if (v2)
  {
    v4 = (void *)sub_19E36F864();
    v5 = objc_msgSend(v2, sel_BOOLForKey_, v4);

    result = sub_19E31D27C;
  }
  else
  {
    v5 = 0;
    result = (void (*)(uint64_t))j_nullsub_5;
  }
  *v3 = v5;
  return result;
}

void sub_19E31D27C(uint64_t a1)
{
  void *v1;
  uint64_t v2;
  id v3;

  v1 = *(void **)(a1 + 8);
  v2 = *(unsigned __int8 *)(a1 + 16);
  v3 = (id)sub_19E36F864();
  objc_msgSend(v1, sel_setBool_forKey_, v2, v3);

}

id TranscodingSettingsProvider.disableLowQualityModeOnWiFiInitialized.getter()
{
  uint64_t v0;
  id v1;
  void *v2;

  v1 = *(id *)(v0 + 16);
  if (v1)
  {
    v2 = (void *)sub_19E36F864();
    v1 = objc_msgSend(v1, sel_BOOLForKey_, v2);

  }
  return v1;
}

void sub_19E31D318(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  void *v3;
  void *v4;

  v3 = *(void **)(*(_QWORD *)a1 + 16);
  if (v3)
  {
    v4 = (void *)sub_19E36F864();
    LOBYTE(v3) = objc_msgSend(v3, sel_BOOLForKey_, v4);

  }
  *a2 = (_BYTE)v3;
}

void sub_19E31D374(unsigned __int8 *a1, uint64_t a2)
{
  void *v2;
  uint64_t v3;
  id v4;

  v2 = *(void **)(*(_QWORD *)a2 + 16);
  if (v2)
  {
    v3 = *a1;
    v4 = (id)sub_19E36F864();
    objc_msgSend(v2, sel_setBool_forKey_, v3, v4);

  }
}

void TranscodingSettingsProvider.disableLowQualityModeOnWiFiInitialized.setter(char a1)
{
  uint64_t v1;
  void *v2;
  id v4;

  v2 = *(void **)(v1 + 16);
  if (v2)
  {
    v4 = (id)sub_19E36F864();
    objc_msgSend(v2, sel_setBool_forKey_, a1 & 1, v4);

  }
}

void (*TranscodingSettingsProvider.disableLowQualityModeOnWiFiInitialized.modify(_QWORD *a1))(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  unsigned __int8 *v3;
  void *v4;
  unsigned __int8 v5;
  void (*result)(uint64_t);

  v2 = *(void **)(v1 + 16);
  v3 = (unsigned __int8 *)(a1 + 2);
  *a1 = v1;
  a1[1] = v2;
  if (v2)
  {
    v4 = (void *)sub_19E36F864();
    v5 = objc_msgSend(v2, sel_BOOLForKey_, v4);

    result = sub_19E31D4C4;
  }
  else
  {
    v5 = 0;
    result = (void (*)(uint64_t))j_nullsub_5;
  }
  *v3 = v5;
  return result;
}

void sub_19E31D4C4(uint64_t a1)
{
  void *v1;
  uint64_t v2;
  id v3;

  v1 = *(void **)(a1 + 8);
  v2 = *(unsigned __int8 *)(a1 + 16);
  v3 = (id)sub_19E36F864();
  objc_msgSend(v1, sel_setBool_forKey_, v2, v3);

}

uint64_t TranscodingSettingsProvider.__allocating_init()()
{
  uint64_t v0;

  v0 = swift_allocObject();
  TranscodingSettingsProvider.init()();
  return v0;
}

_QWORD *TranscodingSettingsProvider.init()()
{
  _QWORD *v0;
  id v1;
  void *v2;
  id v3;

  v1 = objc_allocWithZone(MEMORY[0x1E0C99EA0]);
  v2 = (void *)sub_19E36F864();
  v3 = objc_msgSend(v1, sel_initWithSuiteName_, v2);

  v0[2] = v3;
  v0[3] = 0xD000000000000019;
  v0[4] = 0x800000019E39C150;
  v0[5] = 0xD000000000000026;
  v0[6] = 0x800000019E39C170;
  v0[7] = 0xD000000000000020;
  v0[8] = 0x800000019E39C1A0;
  v0[9] = 0xD00000000000003BLL;
  v0[10] = 0x800000019E39C1D0;
  return v0;
}

uint64_t TranscodingSettingsProvider.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t TranscodingSettingsProvider.__deallocating_deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

id sub_19E31D6A8()
{
  uint64_t v0;
  id v1;
  void *v2;

  v1 = *(id *)(*(_QWORD *)v0 + 16);
  if (v1)
  {
    v2 = (void *)sub_19E36F864();
    v1 = objc_msgSend(v1, sel_BOOLForKey_, v2);

  }
  return v1;
}

void sub_19E31D6F8(char a1)
{
  uint64_t v1;
  void *v2;
  id v4;

  v2 = *(void **)(*(_QWORD *)v1 + 16);
  if (v2)
  {
    v4 = (id)sub_19E36F864();
    objc_msgSend(v2, sel_setBool_forKey_, a1 & 1, v4);

  }
}

uint64_t (*sub_19E31D760(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = TranscodingSettingsProvider.transcodePreviews.modify(v2);
  return sub_19E31D7A8;
}

id sub_19E31D7AC()
{
  uint64_t v0;
  id v1;
  void *v2;

  v1 = *(id *)(*(_QWORD *)v0 + 16);
  if (v1)
  {
    v2 = (void *)sub_19E36F864();
    v1 = objc_msgSend(v1, sel_BOOLForKey_, v2);

  }
  return v1;
}

void sub_19E31D7FC(char a1)
{
  uint64_t v1;
  void *v2;
  id v4;

  v2 = *(void **)(*(_QWORD *)v1 + 16);
  if (v2)
  {
    v4 = (id)sub_19E36F864();
    objc_msgSend(v2, sel_setBool_forKey_, a1 & 1, v4);

  }
}

uint64_t (*sub_19E31D864(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = TranscodingSettingsProvider.disableLowQualityModeOnWiFi.modify(v2);
  return sub_19E31D7A8;
}

id sub_19E31D8AC()
{
  uint64_t v0;
  id v1;
  void *v2;

  v1 = *(id *)(*(_QWORD *)v0 + 16);
  if (v1)
  {
    v2 = (void *)sub_19E36F864();
    v1 = objc_msgSend(v1, sel_BOOLForKey_, v2);

  }
  return v1;
}

void sub_19E31D8FC(char a1)
{
  uint64_t v1;
  void *v2;
  id v4;

  v2 = *(void **)(*(_QWORD *)v1 + 16);
  if (v2)
  {
    v4 = (id)sub_19E36F864();
    objc_msgSend(v2, sel_setBool_forKey_, a1 & 1, v4);

  }
}

uint64_t (*sub_19E31D964(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = TranscodingSettingsProvider.transcodePreviewsInitialized.modify(v2);
  return sub_19E31D7A8;
}

id sub_19E31D9AC()
{
  uint64_t v0;
  id v1;
  void *v2;

  v1 = *(id *)(*(_QWORD *)v0 + 16);
  if (v1)
  {
    v2 = (void *)sub_19E36F864();
    v1 = objc_msgSend(v1, sel_BOOLForKey_, v2);

  }
  return v1;
}

void sub_19E31D9FC(char a1)
{
  uint64_t v1;
  void *v2;
  id v4;

  v2 = *(void **)(*(_QWORD *)v1 + 16);
  if (v2)
  {
    v4 = (id)sub_19E36F864();
    objc_msgSend(v2, sel_setBool_forKey_, a1 & 1, v4);

  }
}

uint64_t (*sub_19E31DA64(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = TranscodingSettingsProvider.disableLowQualityModeOnWiFiInitialized.modify(v2);
  return sub_19E31D7A8;
}

void sub_19E31DAAC(_QWORD *a1)
{
  void *v1;

  v1 = (void *)*a1;
  (*(void (**)(_QWORD))(*a1 + 32))(*a1);
  free(v1);
}

uint64_t type metadata accessor for TranscodingSettingsProvider()
{
  return objc_opt_self();
}

uint64_t method lookup function for TranscodingSettingsProvider()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of TranscodingSettingsProvider.__allocating_init()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 120))();
}

uint64_t sub_19E31DB30()
{
  uint64_t v0;

  v0 = sub_19E36F798();
  sub_19E3222DC(v0, qword_1EE5006F0);
  sub_19E3222C4(v0, (uint64_t)qword_1EE5006F0);
  return sub_19E36F78C();
}

uint64_t sub_19E31DBB0()
{
  return swift_deallocClassInstance();
}

id sub_19E31DBC0()
{
  id result;

  result = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for IMCTRCSUtilitiesManagerLiveDelegate()), sel_init);
  qword_1EE500788 = (uint64_t)result;
  return result;
}

char *sub_19E31DBF0()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  void *v18;
  char *v19;
  uint64_t v20;
  _QWORD *v21;
  void (*v22)(char *, char *, uint64_t);
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  void *v31;
  objc_class *v32;
  char *v33;
  uint64_t v34;
  char *v35;
  _QWORD v37[2];
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  id v45;
  uint64_t v46;
  char *v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  id v51;
  uint64_t v52;
  char *v53;
  id (*v54)(uint64_t);
  char *v55;
  uint64_t v56;
  char v57;
  char *v58;
  objc_super v59;
  uint64_t v60;

  v49 = sub_19E36FAD4();
  v1 = *(_QWORD *)(v49 - 8);
  v2 = MEMORY[0x1E0C80A78](v49);
  v53 = (char *)v37 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v2);
  v42 = (char *)v37 - v4;
  v5 = sub_19E36FAC8();
  v6 = (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF810];
  v46 = *(_QWORD *)(v5 - 8);
  v7 = MEMORY[0x1E0C80A78](v5);
  v47 = (char *)v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)v37 - v9;
  v41 = sub_19E36F7D4();
  v40 = *(_QWORD *)(v41 - 8);
  v11 = v40;
  v12 = MEMORY[0x1E0C80A78](v41);
  v14 = (char *)v37 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37[1] = v14;
  MEMORY[0x1E0C80A78](v12);
  v16 = (char *)v37 - v15;
  v52 = OBJC_IVAR____TtC17IMSharedUtilitiesP33_CDA2CBCEBC7ECDABD170E61A465583F135IMCTRCSUtilitiesManagerLiveDelegate_queue;
  v51 = v0;
  v17 = MEMORY[0x1E0DEE9D8];
  v48 = sub_19E32D74C(MEMORY[0x1E0DEE9D8]);
  v44 = sub_19E24B854(0, (unint64_t *)&qword_1ECFC6BA0);
  v18 = (void *)sub_19E36FAE0();
  v45 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CA6E38]), sel_initWithQueue_, v18);

  type metadata accessor for IMCTRCSUtilitiesManagerLiveDelegate.Token();
  v43 = swift_allocObject();
  *(_DWORD *)(v43 + 16) = -1;
  v39 = v16;
  sub_19E36F7C8();
  v60 = v17;
  sub_19E24C518(&qword_1ECFC6B98, v6, MEMORY[0x1E0DEF828]);
  sub_19E247E74(&qword_1ECFC6B80);
  sub_19E24C410((unint64_t *)&unk_1ECFC6B88, &qword_1ECFC6B80);
  v38 = v5;
  sub_19E36FC30();
  v19 = v42;
  v20 = v49;
  (*(void (**)(char *, _QWORD, uint64_t))(v1 + 104))(v42, *MEMORY[0x1E0DEF8D0], v49);
  sub_19E247E74(&qword_1EE500780);
  v21 = (_QWORD *)swift_allocObject();
  v22 = *(void (**)(char *, char *, uint64_t))(v11 + 16);
  v23 = v41;
  v22(v14, v16, v41);
  v24 = v46;
  (*(void (**)(char *, char *, uint64_t))(v46 + 16))(v47, v10, v5);
  v25 = v19;
  v26 = v19;
  v27 = v20;
  (*(void (**)(char *, char *, uint64_t))(v1 + 16))(v53, v25, v20);
  v28 = sub_19E36FB10();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v26, v27);
  (*(void (**)(char *, uint64_t))(v24 + 8))(v10, v38);
  (*(void (**)(char *, uint64_t))(v40 + 8))(v39, v23);
  v29 = v48;
  v21[2] = v28;
  v21[3] = v29;
  v30 = v43;
  v21[4] = v45;
  v21[5] = v30;
  v31 = v51;
  *(_QWORD *)(v50 + v52) = v21;

  v32 = (objc_class *)type metadata accessor for IMCTRCSUtilitiesManagerLiveDelegate();
  v59.receiver = v31;
  v59.super_class = v32;
  v33 = (char *)objc_msgSendSuper2(&v59, sel_init);
  v34 = *(_QWORD *)&v33[OBJC_IVAR____TtC17IMSharedUtilitiesP33_CDA2CBCEBC7ECDABD170E61A465583F135IMCTRCSUtilitiesManagerLiveDelegate_queue];
  v58 = v33;
  v54 = sub_19E32343C;
  v55 = &v57;
  v56 = v34;
  v35 = v33;
  swift_retain();
  sub_19E36FAF8();
  swift_release();

  return v35;
}

uint64_t sub_19E31E070(uint64_t *a1)
{
  char v2;
  char v3;
  int v4;
  uint64_t v5;
  int out_token;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  sub_19E32231C(*a1);
  v3 = v2;
  out_token = -1;
  notify_register_check("kRCSEnabledDidChange", &out_token);
  v4 = out_token;
  type metadata accessor for IMCTRCSUtilitiesManagerLiveDelegate.Token();
  v5 = swift_allocObject();
  *(_DWORD *)(v5 + 16) = v4;
  swift_release();
  a1[2] = v5;
  notify_set_state(v4, v3 & 1);
  return notify_post("kRCSEnabledDidChange");
}

uint64_t sub_19E31E13C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t (*v7)(uint64_t);
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  _QWORD *v15;
  void *v16;
  _QWORD v18[2];
  _QWORD aBlock[6];

  v3 = v2;
  v6 = sub_19E36F7BC();
  v7 = (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8];
  v8 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v10 = (char *)v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_19E36F7D4();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11);
  v14 = (char *)v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18[0] = *(_QWORD *)(v3 + 16);
  v15 = (_QWORD *)swift_allocObject();
  v15[2] = a1;
  v15[3] = a2;
  v15[4] = v3;
  aBlock[4] = sub_19E323294;
  aBlock[5] = v15;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_19E333388;
  aBlock[3] = &unk_1E3FB49B8;
  v16 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  sub_19E36F7C8();
  v18[1] = MEMORY[0x1E0DEE9D8];
  sub_19E24C518((unint64_t *)&qword_1ECFC69D8, v7, MEMORY[0x1E0DEF510]);
  sub_19E247E74((uint64_t *)&unk_1ECFC69E0);
  sub_19E24C410((unint64_t *)&qword_1ECFC6A08, (uint64_t *)&unk_1ECFC69E0);
  sub_19E36FC30();
  MEMORY[0x1A1AE71D0](0, v14, v10, v16);
  _Block_release(v16);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v6);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  return swift_release();
}

id sub_19E31E3EC(void *a1)
{
  id result;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  result = objc_msgSend(a1, sel_labelID);
  if (result)
  {
    v2 = result;
    sub_19E36F888();

    v4 = MEMORY[0x1E0C80A78](v3);
    MEMORY[0x1E0C80A78](v4);
    sub_19E247E74(&qword_1EE5018F0);
    sub_19E36FAF8();
    swift_bridgeObjectRelease();
    return (id)v5;
  }
  return result;
}

void sub_19E31E4F8(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v10;
  unint64_t v11;
  char v12;
  id v13;
  void *v14;
  id v15;
  id v16;
  id v17;
  id v18;
  char isUniquelyReferenced_nonNull_native;
  id v20;
  void *v21;
  uint64_t v22;
  id v23;
  id v24;
  NSObject *v25;
  os_log_type_t v26;
  uint8_t *v27;
  _QWORD *v28;
  id v29;
  void *v30;
  id v31[2];

  v31[1] = *(id *)MEMORY[0x1E0C80C00];
  v10 = *a1;
  if (*(_QWORD *)(*a1 + 16))
  {
    swift_bridgeObjectRetain();
    v11 = sub_19E3247E4(a2, a3);
    if ((v12 & 1) != 0)
    {
      v13 = *(id *)(*(_QWORD *)(v10 + 56) + 8 * v11);
LABEL_7:
      swift_bridgeObjectRelease();
      goto LABEL_8;
    }
    swift_bridgeObjectRelease();
  }
  v14 = (void *)a1[1];
  v31[0] = 0;
  v15 = objc_msgSend(v14, sel__getSystemConfiguration_withError_, a4, v31);
  v16 = v31[0];
  if (v15)
  {
    v13 = v15;
    swift_bridgeObjectRetain();
    v17 = v16;
    v18 = v13;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v31[0] = *(id *)a1;
    *a1 = 0x8000000000000000;
    sub_19E32F710((uint64_t)v18, a2, a3, isUniquelyReferenced_nonNull_native);
    *a1 = v31[0];
    swift_bridgeObjectRelease();
    goto LABEL_7;
  }
  v20 = v31[0];
  v21 = (void *)sub_19E36F57C();

  swift_willThrow();
  if (qword_1EE500710 != -1)
    swift_once();
  v22 = sub_19E36F798();
  sub_19E3222C4(v22, (uint64_t)qword_1EE5006F0);
  v23 = v21;
  v24 = v21;
  v25 = sub_19E36F780();
  v26 = sub_19E36FA98();
  if (os_log_type_enabled(v25, v26))
  {
    v27 = (uint8_t *)swift_slowAlloc();
    v28 = (_QWORD *)swift_slowAlloc();
    *(_DWORD *)v27 = 138412290;
    v29 = v21;
    v30 = (void *)_swift_stdlib_bridgeErrorToNSError();
    v31[0] = v30;
    sub_19E36FBD0();
    *v28 = v30;

    _os_log_impl(&dword_19E239000, v25, v26, "Error getting system configuration: %@", v27, 0xCu);
    sub_19E247E74(&qword_1EE5006C0);
    swift_arrayDestroy();
    MEMORY[0x1A1AE8ACC](v28, -1, -1);
    MEMORY[0x1A1AE8ACC](v27, -1, -1);

  }
  else
  {

  }
  v13 = 0;
LABEL_8:
  *a5 = v13;
}

id sub_19E31E7F4(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v4;
  void *v5;
  id v6;
  void *v7;
  id v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v19;

  v4 = sub_19E322528(a3, a4, a1, a2);
  if (!v4)
  {
    if (qword_1EE500710 != -1)
      swift_once();
    v9 = sub_19E36F798();
    sub_19E3222C4(v9, (uint64_t)qword_1EE5006F0);
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    v10 = sub_19E36F780();
    v11 = sub_19E36FA8C();
    if (os_log_type_enabled(v10, v11))
    {
      v12 = swift_slowAlloc();
      v13 = swift_slowAlloc();
      v19 = v13;
      *(_DWORD *)v12 = 136315394;
      swift_bridgeObjectRetain();
      sub_19E247E74((uint64_t *)&unk_1EE5018F8);
      v14 = sub_19E36F894();
      sub_19E337764(v14, v15, &v19);
      sub_19E36FBD0();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v12 + 12) = 2080;
      swift_bridgeObjectRetain();
      v16 = sub_19E36F894();
      sub_19E337764(v16, v17, &v19);
      sub_19E36FBD0();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_19E239000, v10, v11, "No subscription found for simID: %s phoneNumber: %s", (uint8_t *)v12, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1A1AE8ACC](v13, -1, -1);
      MEMORY[0x1A1AE8ACC](v12, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
    }
    return 0;
  }
  v5 = v4;
  v6 = sub_19E31E3EC(v4);
  if (!v6)
  {

    return 0;
  }
  v7 = v6;
  v8 = objc_msgSend(v6, sel_featureSupported);

  return v8;
}

id sub_19E31EA94(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v4;
  void *v5;
  id v6;
  void *v7;
  id v8;
  void *v9;
  id v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v37;
  uint64_t type;
  os_log_type_t typea;
  uint64_t v40;

  v4 = sub_19E322528(a3, a4, a1, a2);
  if (!v4)
  {
    if (qword_1EE500710 != -1)
      swift_once();
    v11 = sub_19E36F798();
    sub_19E3222C4(v11, (uint64_t)qword_1EE5006F0);
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    v12 = sub_19E36F780();
    v13 = sub_19E36FA8C();
    if (os_log_type_enabled(v12, v13))
    {
      v14 = swift_slowAlloc();
      v15 = swift_slowAlloc();
      v40 = v15;
      *(_DWORD *)v14 = 136315394;
      swift_bridgeObjectRetain();
      sub_19E247E74((uint64_t *)&unk_1EE5018F8);
      v16 = sub_19E36F894();
      sub_19E337764(v16, v17, &v40);
      sub_19E36FBD0();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v14 + 12) = 2080;
      swift_bridgeObjectRetain();
      v18 = sub_19E36F894();
      sub_19E337764(v18, v19, &v40);
      sub_19E36FBD0();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_19E239000, v12, v13, "No subscription found for simID: %s phoneNumber: %s", (uint8_t *)v14, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1A1AE8ACC](v15, -1, -1);
      MEMORY[0x1A1AE8ACC](v14, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
    }
    return 0;
  }
  v5 = v4;
  v6 = sub_19E31E3EC(v4);
  if (!v6)
  {
    if (qword_1EE500710 != -1)
      swift_once();
    v20 = sub_19E36F798();
    sub_19E3222C4(v20, (uint64_t)qword_1EE5006F0);
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    v21 = sub_19E36F780();
    v22 = sub_19E36FA8C();
    if (os_log_type_enabled(v21, v22))
    {
      v23 = swift_slowAlloc();
      type = swift_slowAlloc();
      v40 = type;
      *(_DWORD *)v23 = 136315394;
      swift_bridgeObjectRetain();
      sub_19E247E74((uint64_t *)&unk_1EE5018F8);
      v24 = sub_19E36F894();
      sub_19E337764(v24, v25, &v40);
      sub_19E36FBD0();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v23 + 12) = 2080;
      swift_bridgeObjectRetain();
      v26 = sub_19E36F894();
      sub_19E337764(v26, v27, &v40);
      sub_19E36FBD0();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_19E239000, v21, v22, "No RCS config found for simID: %s phoneNumber: %s", (uint8_t *)v23, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1A1AE8ACC](type, -1, -1);
      MEMORY[0x1A1AE8ACC](v23, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();

    }
    return 0;
  }
  v7 = v6;
  v8 = objc_msgSend(v6, sel_chatCapabilities);
  if (!v8)
  {
    if (qword_1EE500710 != -1)
      swift_once();
    v28 = sub_19E36F798();
    sub_19E3222C4(v28, (uint64_t)qword_1EE5006F0);
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    v29 = sub_19E36F780();
    v30 = sub_19E36FA8C();
    if (os_log_type_enabled(v29, v30))
    {
      typea = v30;
      v31 = swift_slowAlloc();
      v37 = swift_slowAlloc();
      v40 = v37;
      *(_DWORD *)v31 = 136315394;
      swift_bridgeObjectRetain();
      sub_19E247E74((uint64_t *)&unk_1EE5018F8);
      v32 = sub_19E36F894();
      sub_19E337764(v32, v33, &v40);
      sub_19E36FBD0();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v31 + 12) = 2080;
      swift_bridgeObjectRetain();
      v34 = sub_19E36F894();
      sub_19E337764(v34, v35, &v40);
      sub_19E36FBD0();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_19E239000, v29, typea, "No Chat capabilities found in RCS config for simID: %s phoneNumber: %s", (uint8_t *)v31, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1A1AE8ACC](v37, -1, -1);
      MEMORY[0x1A1AE8ACC](v31, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
    }

    return 0;
  }
  v9 = v8;
  v10 = objc_msgSend(v8, sel_revokeTimer);

  return v10;
}

id sub_19E31F154(void *a1)
{
  id v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  NSObject *v9;

  v1 = objc_msgSend(a1, sel_labelID);
  if (v1)
  {
    sub_19E36F888();

    v3 = MEMORY[0x1E0C80A78](v2);
    MEMORY[0x1E0C80A78](v3);
    sub_19E247E74(&qword_1EE5018F0);
    sub_19E36FAF8();
    swift_bridgeObjectRelease();
    if (v9)
    {
      if (-[NSObject respondsToSelector:](v9, sel_respondsToSelector_, sel_featureEnabledByDefault))
      {
        v1 = -[NSObject featureEnabledByDefault](v9, sel_featureEnabledByDefault);
      }
      else
      {
        if (qword_1EE500710 != -1)
          swift_once();
        v4 = sub_19E36F798();
        sub_19E3222C4(v4, (uint64_t)qword_1EE5006F0);
        v5 = sub_19E36F780();
        v6 = sub_19E36FA8C();
        if (os_log_type_enabled(v5, v6))
        {
          v7 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)v7 = 0;
          _os_log_impl(&dword_19E239000, v5, v6, "Feature enabled by default is unsupported.", v7, 2u);
          MEMORY[0x1A1AE8ACC](v7, -1, -1);

          v1 = 0;
LABEL_12:

          return v1;
        }

        v1 = 0;
      }
      v5 = v9;
      goto LABEL_12;
    }
    return 0;
  }
  return v1;
}

double sub_19E31F564@<D0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, _OWORD *a4@<X8>)
{
  id v8;
  void *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  id v22;
  double result;
  _QWORD v24[3];
  uint64_t v25;

  v8 = objc_msgSend((id)objc_opt_self(), sel_sharedInstance);
  v9 = (void *)sub_19E36F954();
  sub_19E323318(a2, (uint64_t)v24);
  v10 = v25;
  if (v25)
  {
    v11 = sub_19E323360(v24, v25);
    v12 = *(_QWORD *)(v10 - 8);
    MEMORY[0x1E0C80A78](v11);
    v14 = (char *)v24 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *))(v12 + 16))(v14);
    v15 = sub_19E36FE04();
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v10);
    sub_19E323384((uint64_t)v24);
  }
  else
  {
    v15 = 0;
  }
  sub_19E323318(a3, (uint64_t)v24);
  v16 = v25;
  if (v25)
  {
    v17 = sub_19E323360(v24, v25);
    v18 = *(_QWORD *)(v16 - 8);
    MEMORY[0x1E0C80A78](v17);
    v20 = (char *)v24 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *))(v18 + 16))(v20);
    v21 = sub_19E36FE04();
    (*(void (**)(char *, uint64_t))(v18 + 8))(v20, v16);
    sub_19E323384((uint64_t)v24);
  }
  else
  {
    v21 = 0;
  }
  v22 = objc_msgSend(v8, sel_copyCarrierBundleValueForSubscriptionContext_keyHierarchy_defaultValue_valueIfError_, a1, v9, v15, v21);

  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  if (v22)
  {
    sub_19E36FC0C();
    swift_unknownObjectRelease();
  }
  else
  {
    result = 0.0;
    *a4 = 0u;
    a4[1] = 0u;
  }
  return result;
}

id sub_19E31FAF8()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for IMCTRCSUtilitiesManagerLiveDelegate();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for IMCTRCSUtilitiesManagerLiveDelegate()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for IMCTRCSUtilitiesManagerLiveDelegate.Token()
{
  return objc_opt_self();
}

void sub_19E31FB7C(uint64_t *a1, uint64_t a2, uint64_t a3, void *a4)
{
  char v8;
  int v9;
  id v10;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v12;
  char v13;
  uint64_t v14;

  sub_19E32231C(*a1);
  v9 = v8 & 1;
  swift_bridgeObjectRetain();
  v10 = a4;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v14 = *a1;
  *a1 = 0x8000000000000000;
  sub_19E32F710((uint64_t)v10, a2, a3, isUniquelyReferenced_nonNull_native);
  *a1 = v14;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v12 = a1[2];
  sub_19E32231C(*a1);
  if (v9 != (v13 & 1))
  {
    notify_set_state(*(_DWORD *)(v12 + 16), v13 & 1);
    notify_post("kRCSEnabledDidChange");
  }
}

uint64_t sub_19E31FDB0(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int64_t v6;
  uint64_t result;
  int64_t v8;
  unint64_t v9;
  unint64_t i;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  id v18;
  id v19;
  void *v20;
  id v21;
  unint64_t v22;
  char v23;
  char v24;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;

  v2 = *a1;
  v28 = *a1 + 64;
  v3 = 1 << *(_BYTE *)(*a1 + 32);
  v4 = -1;
  if (v3 < 64)
    v4 = ~(-1 << v3);
  v5 = v4 & *(_QWORD *)(*a1 + 64);
  v6 = (unint64_t)(v3 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v8 = 0;
  if (v5)
    goto LABEL_6;
LABEL_7:
  v11 = v8 + 1;
  if (!__OFADD__(v8, 1))
  {
    if (v11 < v6)
    {
      v12 = *(_QWORD *)(v28 + 8 * v11);
      ++v8;
      if (v12)
        goto LABEL_24;
      v8 = v11 + 1;
      if (v11 + 1 >= v6)
        return swift_release();
      v12 = *(_QWORD *)(v28 + 8 * v8);
      if (v12)
        goto LABEL_24;
      v8 = v11 + 2;
      if (v11 + 2 >= v6)
        return swift_release();
      v12 = *(_QWORD *)(v28 + 8 * v8);
      if (v12)
        goto LABEL_24;
      v8 = v11 + 3;
      if (v11 + 3 >= v6)
        return swift_release();
      v12 = *(_QWORD *)(v28 + 8 * v8);
      if (v12)
        goto LABEL_24;
      v8 = v11 + 4;
      if (v11 + 4 >= v6)
        return swift_release();
      v12 = *(_QWORD *)(v28 + 8 * v8);
      if (v12)
      {
LABEL_24:
        v5 = (v12 - 1) & v12;
        for (i = __clz(__rbit64(v12)) + (v8 << 6); ; i = v9 | (v8 << 6))
        {
          v14 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * i);
          v15 = *v14;
          v16 = v14[1];
          v17 = (void *)objc_opt_self();
          swift_bridgeObjectRetain();
          v18 = objc_msgSend(v17, sel_sharedInstance);
          v19 = objc_msgSend(v18, sel_ctSubscriptionInfo);

          if (v19)
          {
            v20 = (void *)sub_19E36F864();
            v21 = objc_msgSend(v19, sel___im_subscriptionContextForForSimID_, v20);

            if (v21)
              goto LABEL_5;
          }
          swift_bridgeObjectRetain();
          v22 = sub_19E3247E4(v15, v16);
          v24 = v23;
          swift_bridgeObjectRelease();
          if ((v24 & 1) == 0)
          {
LABEL_5:
            result = swift_bridgeObjectRelease();
            if (!v5)
              goto LABEL_7;
          }
          else
          {
            isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            v26 = *a1;
            v29 = *a1;
            *a1 = 0x8000000000000000;
            if ((isUniquelyReferenced_nonNull_native & 1) == 0)
            {
              sub_19E35936C();
              v26 = v29;
            }
            swift_bridgeObjectRelease();
            v27 = *(void **)(*(_QWORD *)(v26 + 56) + 8 * v22);
            sub_19E358FAC(v22, v26);
            *a1 = v26;

            swift_bridgeObjectRelease();
            result = swift_bridgeObjectRelease();
            if (!v5)
              goto LABEL_7;
          }
LABEL_6:
          v9 = __clz(__rbit64(v5));
          v5 &= v5 - 1;
        }
      }
      v13 = v11 + 5;
      if (v13 < v6)
      {
        v12 = *(_QWORD *)(v28 + 8 * v13);
        if (v12)
        {
          v8 = v13;
          goto LABEL_24;
        }
        while (1)
        {
          v8 = v13 + 1;
          if (__OFADD__(v13, 1))
            goto LABEL_34;
          if (v8 >= v6)
            return swift_release();
          v12 = *(_QWORD *)(v28 + 8 * v8);
          ++v13;
          if (v12)
            goto LABEL_24;
        }
      }
    }
    return swift_release();
  }
  __break(1u);
LABEL_34:
  __break(1u);
  return result;
}

void sub_19E3200D0()
{
  void *v0;
  id v1;
  id v2;
  id v3;

  if (qword_1EE500798 != -1)
    swift_once();
  v0 = (void *)qword_1EE500788;
  v1 = objc_allocWithZone((Class)IMCTRCSUtilitiesManager);
  v2 = v0;
  v3 = objc_msgSend(v1, sel_initWithDelegate_, v2);

  qword_1EE5007A0 = (uint64_t)v3;
}

void sub_19E32033C()
{
  void *v0;
  id v1;
  id v2;
  unint64_t v3;
  uint64_t v4;
  id v5;
  void *v6;
  char v7;
  uint64_t v8;
  unint64_t v9;
  id v10;
  void *v11;
  char v12;

  v1 = objc_msgSend(v0, sel_delegate);
  if (!v1)
    return;
  v2 = objc_msgSend(v1, sel_subscriptionsWithRCSSupport);
  swift_unknownObjectRelease();
  sub_19E24B854(0, &qword_1EE500820);
  v3 = sub_19E36F960();

  if (v3 >> 62)
  {
LABEL_21:
    swift_bridgeObjectRetain();
    v4 = sub_19E36FCFC();
    swift_bridgeObjectRelease();
    if (v4)
      goto LABEL_4;
LABEL_18:
    swift_bridgeObjectRelease();
    return;
  }
  v4 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v4)
    goto LABEL_18;
LABEL_4:
  if ((v3 & 0xC000000000000001) != 0)
  {
    v5 = (id)MEMORY[0x1A1AE7368](0, v3);
LABEL_7:
    v6 = v5;
    v7 = sub_19E3204F8((uint64_t)v5);

    if ((v7 & 1) == 0)
    {
      v8 = 0;
      while (v4 - 1 != v8)
      {
        v9 = v8 + 1;
        if ((v3 & 0xC000000000000001) != 0)
        {
          v10 = (id)MEMORY[0x1A1AE7368](v8 + 1, v3);
        }
        else
        {
          if (v9 >= *(_QWORD *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10))
            goto LABEL_20;
          v10 = *(id *)(v3 + 8 * v8 + 40);
        }
        v11 = v10;
        if (__OFADD__(v9, 1))
        {
          __break(1u);
LABEL_20:
          __break(1u);
          goto LABEL_21;
        }
        v12 = sub_19E3204F8((uint64_t)v10);

        ++v8;
        if ((v12 & 1) != 0)
          goto LABEL_18;
      }
    }
    goto LABEL_18;
  }
  if (*(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v5 = *(id *)(v3 + 32);
    goto LABEL_7;
  }
  __break(1u);
}

unint64_t sub_19E3204F8(uint64_t a1)
{
  void *v1;
  void *v2;
  id v4;
  unint64_t v5;
  unsigned int v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  unsigned int v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  id v16;
  void *v17;
  void *v18;
  void *v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;

  v2 = v1;
  v4 = objc_msgSend(v2, sel_delegate);
  v5 = (unint64_t)v4;
  if (v4)
  {
    v6 = objc_msgSend(v4, sel_enabledByDefaultForContext_, a1);
    swift_unknownObjectRelease();
    v7 = objc_msgSend(v2, sel_delegate);
    if (v7)
    {
      v8 = v7;
      v9 = (void *)sub_19E36F864();
      v10 = (void *)sub_19E36F864();
      v11 = objc_msgSend(v8, sel_getBoolFromDomain_forKey_defaultValue_, v9, v10, 0);
      swift_unknownObjectRelease();

      v5 = (v6 | v11) ^ 1;
      if ((v11 & 1) == 0)
      {
        if (qword_1EE500710 != -1)
          swift_once();
        v12 = sub_19E36F798();
        sub_19E3222C4(v12, (uint64_t)qword_1EE5006F0);
        v13 = sub_19E36F780();
        v14 = sub_19E36FA8C();
        if (os_log_type_enabled(v13, v14))
        {
          v15 = (uint8_t *)swift_slowAlloc();
          *(_DWORD *)v15 = 67109120;
          sub_19E36FBD0();
          _os_log_impl(&dword_19E239000, v13, v14, "Clearing first time RCS. Requires first time on alert: %{BOOL}d", v15, 8u);
          MEMORY[0x1A1AE8ACC](v15, -1, -1);
        }

        v16 = objc_msgSend(v2, sel_delegate);
        if (v16)
        {
          v17 = v16;
          v18 = (void *)sub_19E36F864();
          v19 = (void *)sub_19E36F864();
          objc_msgSend(v17, sel_setBool_forDomain_forKey_, 1, v18, v19);

          swift_unknownObjectRelease();
        }
      }
    }
    else
    {
      if (qword_1EE500710 != -1)
        swift_once();
      v20 = sub_19E36F798();
      sub_19E3222C4(v20, (uint64_t)qword_1EE5006F0);
      v21 = sub_19E36F780();
      v22 = sub_19E36FA8C();
      if (os_log_type_enabled(v21, v22))
      {
        v23 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v23 = 0;
        _os_log_impl(&dword_19E239000, v21, v22, "Delegate is not set on class.", v23, 2u);
        MEMORY[0x1A1AE8ACC](v23, -1, -1);
      }

      return 0;
    }
  }
  return v5;
}

uint64_t sub_19E320844(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  void *v4;
  id v9;
  void *v10;
  void *v11;
  void *v12;
  id v13;
  char v14;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;

  v9 = objc_msgSend(v4, sel_delegate);
  if (!v9)
    goto LABEL_9;
  v10 = v9;
  if (a4)
  {
    v11 = (void *)sub_19E36F864();
    if (a2)
    {
LABEL_4:
      v12 = (void *)sub_19E36F864();
      goto LABEL_7;
    }
  }
  else
  {
    v11 = 0;
    if (a2)
      goto LABEL_4;
  }
  v12 = 0;
LABEL_7:
  v13 = objc_msgSend(v10, sel_subscriptionContextForForSimID_phoneNumber_, v11, v12);
  swift_unknownObjectRelease();

  if (v13)
  {
    v14 = sub_19E3204F8((uint64_t)v13);

    return v14 & 1;
  }
LABEL_9:
  if (qword_1EE500710 != -1)
    swift_once();
  v16 = sub_19E36F798();
  sub_19E3222C4(v16, (uint64_t)qword_1EE5006F0);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  v17 = sub_19E36F780();
  v18 = sub_19E36FA8C();
  if (os_log_type_enabled(v17, v18))
  {
    v19 = swift_slowAlloc();
    v20 = swift_slowAlloc();
    v24 = v20;
    *(_DWORD *)v19 = 136315394;
    if (a2)
    {
      v21 = a2;
    }
    else
    {
      a1 = 0x3E6C696E3CLL;
      v21 = 0xE500000000000000;
    }
    swift_bridgeObjectRetain();
    sub_19E337764(a1, v21, &v24);
    sub_19E36FBD0();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v19 + 12) = 2080;
    if (a4)
      v22 = a3;
    else
      v22 = 0x3E6C696E3CLL;
    if (a4)
      v23 = a4;
    else
      v23 = 0xE500000000000000;
    swift_bridgeObjectRetain();
    sub_19E337764(v22, v23, &v24);
    sub_19E36FBD0();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_19E239000, v17, v18, "No subscription context found for phone number %s simID %s", (uint8_t *)v19, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1A1AE8ACC](v20, -1, -1);
    MEMORY[0x1A1AE8ACC](v19, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
  }
  return 0;
}

id sub_19E320C44(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  void *v4;
  void *v5;
  id v8;
  void *v9;
  id v10;

  v5 = v4;
  v8 = objc_msgSend(v5, sel_delegate);
  if (!v8)
    return 0;
  v9 = v8;
  if (a2)
    a2 = (void *)sub_19E36F864();
  if (a4)
    a4 = (void *)sub_19E36F864();
  v10 = objc_msgSend(v9, sel_revokeIntervalForPhoneNumber_simID_, a2, a4);
  swift_unknownObjectRelease();

  return v10;
}

id sub_19E320D14(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  void *v14;

  v6 = a4;
  if (!a3)
  {
    v8 = 0;
    v10 = 0;
    if (a4)
      goto LABEL_3;
LABEL_5:
    v11 = 0;
    goto LABEL_6;
  }
  v8 = sub_19E36F888();
  v10 = v9;
  if (!v6)
    goto LABEL_5;
LABEL_3:
  v11 = sub_19E36F888();
  v6 = v12;
LABEL_6:
  v13 = a1;
  v14 = (void *)a5(v8, v10, v11, v6);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v14;
}

uint64_t sub_19E320E68(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  char v14;

  v8 = sub_19E36F888();
  v10 = v9;
  if (a4)
  {
    v11 = sub_19E36F888();
    a4 = v12;
  }
  else
  {
    v11 = 0;
  }
  v13 = a1;
  v14 = a5(v8, v10, v11, a4);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v14 & 1;
}

id sub_19E320F00(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  void *v4;
  id v7;
  id v8;
  id v9;
  id v10;

  if (IMSharedHelperRetrieveSimDetailsFromTelephony()
    && (v7 = objc_msgSend((id)objc_opt_self(), sel_sharedInstance),
        v8 = objc_msgSend(v7, sel_ctSubscriptionInfo),
        v7,
        v8))
  {
    if (a4)
      a4 = (void *)sub_19E36F864();
    if (a2)
      a2 = (void *)sub_19E36F864();
    v9 = objc_msgSend(v8, sel___im_subscriptionContextOrDefaultForForSimID_phoneNumber_, a4, a2);

  }
  else
  {
    v9 = 0;
  }
  v10 = objc_msgSend(v4, sel_enabledForContext_, v9);

  return v10;
}

uint64_t sub_19E321018(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  char v14;

  v6 = a4;
  if (!a3)
  {
    v8 = 0;
    v10 = 0;
    if (a4)
      goto LABEL_3;
LABEL_5:
    v11 = 0;
    goto LABEL_6;
  }
  v8 = sub_19E36F888();
  v10 = v9;
  if (!v6)
    goto LABEL_5;
LABEL_3:
  v11 = sub_19E36F888();
  v6 = v12;
LABEL_6:
  v13 = a1;
  v14 = a5(v8, v10, v11, v6);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v14 & 1;
}

uint64_t sub_19E3210C0(void *a1)
{
  void *v1;
  void *v2;
  void **p_vtable;
  void *v5;
  id v6;
  id v7;
  id v8;
  id v9;
  uint64_t v10;
  id v11;
  NSObject *v12;
  os_log_type_t v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  id v20;
  NSObject *v21;
  os_log_type_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  id v26;
  uint64_t v27;
  NSObject *v28;
  os_log_type_t v29;
  uint8_t *v30;
  uint64_t v31;
  unsigned __int8 v32;
  id v33;
  uint64_t v34;
  id v35;
  NSObject *v36;
  os_log_type_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  id v41;
  os_log_type_t type;
  uint64_t v44;
  unsigned __int8 v45;
  uint64_t v46[4];

  v2 = v1;
  v46[3] = *MEMORY[0x1E0C80C00];
  v45 = 0;
  p_vtable = &OBJC_METACLASS___IMChipAction.vtable;
  if (IMSharedHelperRetrieveSimDetailsFromTelephony())
  {
    if (a1)
    {
      v5 = (void *)objc_opt_self();
      v6 = a1;
      v7 = objc_msgSend(v5, sel_sharedInstance);
      v8 = objc_msgSend(v7, sel_rcsConfigurationForSubscriptionContext_, v6);

      if (v8 && (v9 = objc_msgSend(v8, sel_operationStatus), v8, v9))
      {
        if (qword_1EE500710 != -1)
          swift_once();
        v10 = sub_19E36F798();
        sub_19E3222C4(v10, (uint64_t)qword_1EE5006F0);
        v11 = v9;
        v12 = sub_19E36F780();
        v13 = sub_19E36FA80();
        if (os_log_type_enabled(v12, v13))
        {
          type = v13;
          v14 = swift_slowAlloc();
          v44 = swift_slowAlloc();
          v46[0] = v44;
          *(_DWORD *)v14 = 136446466;
          sub_19E337764(0x2864656C62616E65, 0xED0000293A726F66, v46);
          sub_19E36FBD0();
          *(_WORD *)(v14 + 12) = 2080;
          v15 = objc_msgSend(v11, sel_debugDescription);
          v16 = sub_19E36F888();
          v18 = v17;

          p_vtable = (void **)(&OBJC_METACLASS___IMChipAction + 24);
          sub_19E337764(v16, v18, v46);
          sub_19E36FBD0();

          swift_bridgeObjectRelease();
          _os_log_impl(&dword_19E239000, v12, type, "%{public}s found RCS configuration, operation status: %s", (uint8_t *)v14, 0x16u);
          swift_arrayDestroy();
          MEMORY[0x1A1AE8ACC](v44, -1, -1);
          MEMORY[0x1A1AE8ACC](v14, -1, -1);

        }
        else
        {

        }
        if (objc_msgSend(v11, sel_switchState) && objc_msgSend(v11, sel_switchState) != (id)1)
        {
          if (objc_msgSend(v11, sel_switchState) == (id)-1
            && (v33 = objc_msgSend(v2, sel_delegate)) != 0)
          {
            v32 = objc_msgSend(v33, sel_enabledByDefaultForContext_, v6);
            swift_unknownObjectRelease();
          }
          else
          {
            v32 = 0;
          }
        }
        else
        {
          v32 = 1;
        }

        v45 = v32;
      }
      else
      {
        if (qword_1EE500710 != -1)
          swift_once();
        v19 = sub_19E36F798();
        sub_19E3222C4(v19, (uint64_t)qword_1EE5006F0);
        v20 = v6;
        v21 = sub_19E36F780();
        v22 = sub_19E36FA80();
        if (os_log_type_enabled(v21, v22))
        {
          v23 = swift_slowAlloc();
          v24 = (_QWORD *)swift_slowAlloc();
          v25 = swift_slowAlloc();
          v46[0] = v25;
          *(_DWORD *)v23 = 136446466;
          sub_19E337764(0x2864656C62616E65, 0xED0000293A726F66, v46);
          sub_19E36FBD0();
          *(_WORD *)(v23 + 12) = 2112;
          v26 = v20;
          p_vtable = (void **)(&OBJC_METACLASS___IMChipAction + 24);
          sub_19E36FBD0();
          *v24 = a1;

          _os_log_impl(&dword_19E239000, v21, v22, "%{public}s failed to find RCS operation status for context %@", (uint8_t *)v23, 0x16u);
          sub_19E247E74(&qword_1EE5006C0);
          swift_arrayDestroy();
          MEMORY[0x1A1AE8ACC](v24, -1, -1);
          swift_arrayDestroy();
          MEMORY[0x1A1AE8ACC](v25, -1, -1);
          MEMORY[0x1A1AE8ACC](v23, -1, -1);

        }
        else
        {

        }
      }
    }
    else
    {
      if (qword_1EE500710 != -1)
        swift_once();
      v27 = sub_19E36F798();
      sub_19E3222C4(v27, (uint64_t)qword_1EE5006F0);
      v28 = sub_19E36F780();
      v29 = sub_19E36FA80();
      if (os_log_type_enabled(v28, v29))
      {
        v30 = (uint8_t *)swift_slowAlloc();
        v31 = swift_slowAlloc();
        v46[0] = v31;
        *(_DWORD *)v30 = 136446210;
        sub_19E337764(0x2864656C62616E65, 0xED0000293A726F66, v46);
        sub_19E36FBD0();
        _os_log_impl(&dword_19E239000, v28, v29, "%{public}s failed to find subscription context.", v30, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1A1AE8ACC](v31, -1, -1);
        MEMORY[0x1A1AE8ACC](v30, -1, -1);
      }

    }
  }
  else
  {
    v45 = IMMMSEnabled();
  }
  if (p_vtable[226] != (void *)-1)
    swift_once();
  v34 = sub_19E36F798();
  sub_19E3222C4(v34, (uint64_t)qword_1EE5006F0);
  v35 = a1;
  v36 = sub_19E36F780();
  v37 = sub_19E36FA80();
  if (os_log_type_enabled(v36, v37))
  {
    v38 = swift_slowAlloc();
    v39 = (_QWORD *)swift_slowAlloc();
    v40 = swift_slowAlloc();
    v46[0] = v40;
    *(_DWORD *)v38 = 136446722;
    sub_19E337764(0x2864656C62616E65, 0xED0000293A726F66, v46);
    sub_19E36FBD0();
    *(_WORD *)(v38 + 12) = 1024;
    sub_19E36FBD0();
    *(_WORD *)(v38 + 18) = 2112;
    if (a1)
      v41 = v35;
    sub_19E36FBD0();
    *v39 = a1;

    _os_log_impl(&dword_19E239000, v36, v37, "%{public}s isRCSEnabled %{BOOL}d for subscriptionContext %@", (uint8_t *)v38, 0x1Cu);
    sub_19E247E74(&qword_1EE5006C0);
    swift_arrayDestroy();
    MEMORY[0x1A1AE8ACC](v39, -1, -1);
    swift_arrayDestroy();
    MEMORY[0x1A1AE8ACC](v40, -1, -1);
    MEMORY[0x1A1AE8ACC](v38, -1, -1);

  }
  else
  {

  }
  swift_beginAccess();
  return v45;
}

id sub_19E3219C0(void *a1)
{
  void *v1;
  id v3;
  id v4;
  unsigned int v5;
  id v6;
  void *v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v13;
  _OWORD v14[2];
  _BYTE v15[24];
  uint64_t v16;

  v3 = objc_msgSend(a1, sel_phoneNumber);
  v4 = objc_msgSend(a1, sel_labelID);
  v5 = objc_msgSend(v1, sel_enabledForPhoneNumber_simID_, v3, v4);

  if (!v5)
    return 0;
  v6 = objc_msgSend((id)objc_opt_self(), sel_sharedInstance);
  sub_19E321BB0((uint64_t)&unk_1E3FB2478);
  v7 = (void *)sub_19E36F954();
  swift_bridgeObjectRelease();
  v8 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37E8]), sel_initWithBool_, 0);
  v9 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37E8]), sel_initWithBool_, 0);
  v10 = objc_msgSend(v6, sel_copyCarrierBundleValueForSubscriptionContext_keyHierarchy_defaultValue_valueIfError_, a1, v7, v8, v9);

  if (v10)
  {
    sub_19E36FC0C();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v14, 0, sizeof(v14));
  }
  sub_19E32223C((uint64_t)v14, (uint64_t)v15);
  if (!v16)
  {
    sub_19E322284((uint64_t)v15);
    return 0;
  }
  sub_19E24B854(0, (unint64_t *)&qword_1ECFC6A00);
  if ((swift_dynamicCast() & 1) == 0)
    return 0;
  v11 = objc_msgSend(v13, sel_BOOLValue);

  return v11;
}

uint64_t sub_19E321BB0(uint64_t a1)
{
  int64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  __int128 v8;
  uint64_t v9;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x1E0DEE9D8];
  if (v1)
  {
    v9 = MEMORY[0x1E0DEE9D8];
    sub_19E24B838(0, v1, 0);
    v2 = v9;
    v4 = a1 + 40;
    do
    {
      swift_bridgeObjectRetain();
      swift_dynamicCast();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_19E24B838(0, *(_QWORD *)(v2 + 16) + 1, 1);
        v2 = v9;
      }
      v6 = *(_QWORD *)(v2 + 16);
      v5 = *(_QWORD *)(v2 + 24);
      if (v6 >= v5 >> 1)
      {
        sub_19E24B838(v5 > 1, v6 + 1, 1);
        v2 = v9;
      }
      v4 += 16;
      *(_QWORD *)(v2 + 16) = v6 + 1;
      sub_19E24B594(&v8, (_OWORD *)(v2 + 32 * v6 + 32));
      --v1;
    }
    while (v1);
  }
  return v2;
}

uint64_t sub_19E321CD4(uint64_t a1)
{
  int64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v8;
  uint64_t v9;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x1E0DEE9D8];
  if (v1)
  {
    v9 = MEMORY[0x1E0DEE9D8];
    sub_19E36A950(0, v1, 0);
    v4 = a1 + 32;
    v2 = v9;
    do
    {
      sub_19E247E74(&qword_1EE501908);
      sub_19E247E74(qword_1ECFC6AF0);
      swift_dynamicCast();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_19E36A950(0, *(_QWORD *)(v2 + 16) + 1, 1);
        v2 = v9;
      }
      v6 = *(_QWORD *)(v2 + 16);
      v5 = *(_QWORD *)(v2 + 24);
      if (v6 >= v5 >> 1)
      {
        sub_19E36A950(v5 > 1, v6 + 1, 1);
        v2 = v9;
      }
      *(_QWORD *)(v2 + 16) = v6 + 1;
      *(_QWORD *)(v2 + 8 * v6 + 32) = v8;
      v4 += 8;
      --v1;
    }
    while (v1);
  }
  return v2;
}

id sub_19E321E4C(void *a1)
{
  id v2;
  void *v3;
  id v4;
  id v5;
  id v6;
  id v7;
  id v9;
  _OWORD v10[2];
  _BYTE v11[24];
  uint64_t v12;

  if ((sub_19E3219C0(a1) & 1) == 0)
    return 0;
  v2 = objc_msgSend((id)objc_opt_self(), sel_sharedInstance);
  sub_19E321BB0((uint64_t)&unk_1E3FB2438);
  v3 = (void *)sub_19E36F954();
  swift_bridgeObjectRelease();
  v4 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37E8]), sel_initWithBool_, 0);
  v5 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37E8]), sel_initWithBool_, 0);
  v6 = objc_msgSend(v2, sel_copyCarrierBundleValueForSubscriptionContext_keyHierarchy_defaultValue_valueIfError_, a1, v3, v4, v5);

  if (v6)
  {
    sub_19E36FC0C();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v10, 0, sizeof(v10));
  }
  sub_19E32223C((uint64_t)v10, (uint64_t)v11);
  if (!v12)
  {
    sub_19E322284((uint64_t)v11);
    return 0;
  }
  sub_19E24B854(0, (unint64_t *)&qword_1ECFC6A00);
  if ((swift_dynamicCast() & 1) == 0)
    return 0;
  v7 = objc_msgSend(v9, sel_BOOLValue);

  return v7;
}

uint64_t type metadata accessor for IMCTRCSUtilitiesManager(uint64_t a1)
{
  return sub_19E24B854(a1, &qword_1EE5018E8);
}

uint64_t destroy for IMCTRCSUtilitiesManagerLiveDelegate.State(uint64_t a1)
{
  swift_bridgeObjectRelease();

  return swift_release();
}

_QWORD *_s17IMSharedUtilities35IMCTRCSUtilitiesManagerLiveDelegateC5StateVwCP_0(_QWORD *a1, _QWORD *a2)
{
  void *v3;
  id v4;

  v3 = (void *)a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  v4 = v3;
  swift_retain();
  return a1;
}

_QWORD *assignWithCopy for IMCTRCSUtilitiesManagerLiveDelegate.State(_QWORD *a1, _QWORD *a2)
{
  void *v4;
  void *v5;
  id v6;

  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = (void *)a2[1];
  v5 = (void *)a1[1];
  a1[1] = v4;
  v6 = v4;

  a1[2] = a2[2];
  swift_retain();
  swift_release();
  return a1;
}

__n128 initializeWithTake for IMCTRCSUtilitiesManagerLiveDelegate.State(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for IMCTRCSUtilitiesManagerLiveDelegate.State(uint64_t a1, uint64_t a2)
{
  void *v4;

  swift_bridgeObjectRelease();
  v4 = *(void **)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;

  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for IMCTRCSUtilitiesManagerLiveDelegate.State(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 24))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for IMCTRCSUtilitiesManagerLiveDelegate.State(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 24) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for IMCTRCSUtilitiesManagerLiveDelegate.State()
{
  return &type metadata for IMCTRCSUtilitiesManagerLiveDelegate.State;
}

uint64_t sub_19E32223C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_19E247E74(qword_1ECFC68D0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_19E322284(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_19E247E74(qword_1ECFC68D0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_19E3222C4(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(*(_QWORD *)(a1 - 8) + 82) & 2) != 0)
    return *(_QWORD *)a2;
  return a2;
}

uint64_t *sub_19E3222DC(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  if ((*(_DWORD *)(*(_QWORD *)(a1 - 8) + 80) & 0x20000) != 0)
  {
    v3 = swift_slowAlloc();
    *a2 = v3;
    return (uint64_t *)v3;
  }
  return a2;
}

void sub_19E32231C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int64_t v6;
  int64_t v7;
  unint64_t v8;
  unint64_t v9;
  int64_t v10;
  unint64_t v11;
  int64_t v12;
  id v13;
  id v14;
  void *v15;
  unsigned int v16;

  v2 = a1 + 64;
  v3 = 1 << *(_BYTE *)(a1 + 32);
  v4 = -1;
  if (v3 < 64)
    v4 = ~(-1 << v3);
  v5 = v4 & *(_QWORD *)(a1 + 64);
  v6 = (unint64_t)(v3 + 63) >> 6;
  swift_bridgeObjectRetain();
  v7 = 0;
  while (v5)
  {
    v8 = __clz(__rbit64(v5));
    v5 &= v5 - 1;
    v9 = v8 | (v7 << 6);
LABEL_23:
    v13 = *(id *)(*(_QWORD *)(a1 + 56) + 8 * v9);
    v14 = objc_msgSend(v13, sel_operationStatus);
    if (v14)
    {
      v15 = v14;
      if (!objc_msgSend(v14, sel_switchState) || objc_msgSend(v15, sel_switchState) == (id)1)
      {
        swift_release();

        return;
      }
      if (objc_msgSend(v15, sel_switchState) == (id)-1)
      {
        v16 = objc_msgSend(v13, sel_featureEnabledByDefault);

        if (v16)
        {
LABEL_29:
          swift_release();
          return;
        }
      }
      else
      {

      }
    }
    else
    {

    }
  }
  v10 = v7 + 1;
  if (__OFADD__(v7, 1))
  {
    __break(1u);
    goto LABEL_33;
  }
  if (v10 >= v6)
    goto LABEL_29;
  v11 = *(_QWORD *)(v2 + 8 * v10);
  ++v7;
  if (v11)
    goto LABEL_22;
  v7 = v10 + 1;
  if (v10 + 1 >= v6)
    goto LABEL_29;
  v11 = *(_QWORD *)(v2 + 8 * v7);
  if (v11)
    goto LABEL_22;
  v7 = v10 + 2;
  if (v10 + 2 >= v6)
    goto LABEL_29;
  v11 = *(_QWORD *)(v2 + 8 * v7);
  if (v11)
    goto LABEL_22;
  v7 = v10 + 3;
  if (v10 + 3 >= v6)
    goto LABEL_29;
  v11 = *(_QWORD *)(v2 + 8 * v7);
  if (v11)
  {
LABEL_22:
    v5 = (v11 - 1) & v11;
    v9 = __clz(__rbit64(v11)) + (v7 << 6);
    goto LABEL_23;
  }
  v12 = v10 + 4;
  if (v12 >= v6)
    goto LABEL_29;
  v11 = *(_QWORD *)(v2 + 8 * v12);
  if (v11)
  {
    v7 = v12;
    goto LABEL_22;
  }
  while (1)
  {
    v7 = v12 + 1;
    if (__OFADD__(v12, 1))
      break;
    if (v7 >= v6)
      goto LABEL_29;
    v11 = *(_QWORD *)(v2 + 8 * v7);
    ++v12;
    if (v11)
      goto LABEL_22;
  }
LABEL_33:
  __break(1u);
}

id sub_19E322528(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v6;
  id v7;
  id v8;

  v6 = objc_msgSend((id)objc_opt_self(), sel_sharedInstance);
  v7 = objc_msgSend(v6, sel_ctSubscriptionInfo);

  if (!v7)
    return 0;
  if (a2)
    a2 = (void *)sub_19E36F864();
  if (a4)
    a4 = (void *)sub_19E36F864();
  v8 = objc_msgSend(v7, sel___im_subscriptionContextForForSimID_phoneNumber_, a2, a4);

  return v8;
}

BOOL sub_19E322608(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  void *v7;
  id v8;
  id v9;
  void *v10;
  void *v11;
  id v12;
  id v13;
  id v14;
  id v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v25[3];
  BOOL v26;

  v26 = 1;
  v7 = (void *)objc_opt_self();
  v8 = objc_msgSend(v7, sel_sharedInstance);
  v9 = objc_msgSend(v8, sel_ctSubscriptionInfo);

  if (v9)
  {
    v10 = a4 ? (void *)sub_19E36F864() : 0;
    v11 = (void *)sub_19E36F864();
    v12 = objc_msgSend(v9, sel___im_subscriptionContextOrDefaultForForSimID_phoneNumber_, v10, v11);

    if (v12)
    {
      v13 = objc_msgSend(v7, sel_sharedInstance);
      v14 = objc_msgSend(v13, sel_rcsConfigurationForSubscriptionContext_, v12);

      if (v14)
      {
        v15 = objc_msgSend(v14, sel_groupChatCapabilites);

        if (v15)
        v26 = v15 != 0;
      }
      else
      {

      }
    }
  }
  if (qword_1EE500710 != -1)
    swift_once();
  v16 = sub_19E36F798();
  sub_19E3222C4(v16, (uint64_t)qword_1EE5006F0);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  v17 = sub_19E36F780();
  v18 = sub_19E36FA80();
  if (os_log_type_enabled(v17, v18))
  {
    v19 = swift_slowAlloc();
    v20 = swift_slowAlloc();
    v25[0] = v20;
    *(_DWORD *)v19 = 136315650;
    swift_bridgeObjectRetain();
    sub_19E337764(a1, a2, v25);
    sub_19E36FBD0();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v19 + 12) = 2080;
    if (a4)
      v21 = a3;
    else
      v21 = 0x3E6C696E3CLL;
    if (a4)
      v22 = a4;
    else
      v22 = 0xE500000000000000;
    swift_bridgeObjectRetain();
    sub_19E337764(v21, v22, v25);
    sub_19E36FBD0();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v19 + 22) = 1024;
    sub_19E36FBD0();
    _os_log_impl(&dword_19E239000, v17, v18, "Groups enabled for phone number %s simID %s: %{BOOL}d", (uint8_t *)v19, 0x1Cu);
    swift_arrayDestroy();
    MEMORY[0x1A1AE8ACC](v20, -1, -1);
    MEMORY[0x1A1AE8ACC](v19, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
  }
  swift_beginAccess();
  return v26;
}

id sub_19E3229A0(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  void *v8;
  id v9;
  id v10;
  void *v11;
  void *v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v27[3];
  id v28;

  v28 = 0;
  v8 = (void *)objc_opt_self();
  v9 = objc_msgSend(v8, sel_sharedInstance);
  v10 = objc_msgSend(v9, sel_ctSubscriptionInfo);

  if (v10)
  {
    v11 = a4 ? (void *)sub_19E36F864() : 0;
    v12 = (void *)sub_19E36F864();
    v13 = objc_msgSend(v10, sel___im_subscriptionContextOrDefaultForForSimID_phoneNumber_, v11, v12);

    if (v13)
    {
      v14 = objc_msgSend(v8, sel_sharedInstance);
      v15 = objc_msgSend(v14, sel_rcsConfigurationForSubscriptionContext_, v13);

      if (v15)
      {
        v16 = objc_msgSend(v15, sel_groupChatCapabilites);
        v17 = v16;
        if (v16)
        {
          v18 = objc_msgSend(v16, sel_maxGroupSize);

          if (v18)
          {
            v17 = objc_msgSend(v18, sel_integerValue);

          }
          else
          {
            v17 = 0;
          }
        }

        v28 = v17;
      }
      else
      {

      }
    }
  }
  if (qword_1EE500710 != -1)
    swift_once();
  v19 = sub_19E36F798();
  sub_19E3222C4(v19, (uint64_t)qword_1EE5006F0);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  v20 = sub_19E36F780();
  v21 = sub_19E36FA80();
  if (os_log_type_enabled(v20, v21))
  {
    v22 = swift_slowAlloc();
    v23 = swift_slowAlloc();
    v27[0] = v23;
    *(_DWORD *)v22 = 136315650;
    swift_bridgeObjectRetain();
    sub_19E337764(a1, a2, v27);
    sub_19E36FBD0();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v22 + 12) = 2080;
    if (a4)
      v24 = a3;
    else
      v24 = 0x3E6C696E3CLL;
    if (a4)
      v25 = a4;
    else
      v25 = 0xE500000000000000;
    swift_bridgeObjectRetain();
    sub_19E337764(v24, v25, v27);
    sub_19E36FBD0();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v22 + 22) = 2048;
    sub_19E36FBD0();
    _os_log_impl(&dword_19E239000, v20, v21, "Max group size for phone number %s simID %s: %ld", (uint8_t *)v22, 0x20u);
    swift_arrayDestroy();
    MEMORY[0x1A1AE8ACC](v23, -1, -1);
    MEMORY[0x1A1AE8ACC](v22, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
  }
  swift_beginAccess();
  return v28;
}

uint64_t sub_19E322D70(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  void *v8;
  id v9;
  id v10;
  void *v11;
  void *v12;
  id v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  void *v19;
  id v20;
  char v21;
  uint64_t v22;
  int v23;
  NSObject *v24;
  os_log_type_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v31;
  char v32;
  _OWORD v33[2];
  uint64_t v34[4];
  unsigned __int8 v35;

  v35 = 1;
  if (IMSharedHelperRetrieveSimDetailsFromTelephony())
  {
    v8 = (void *)objc_opt_self();
    v9 = objc_msgSend(v8, sel_sharedInstance);
    v10 = objc_msgSend(v9, sel_ctSubscriptionInfo);

    if (v10)
    {
      v11 = a4 ? (void *)sub_19E36F864() : 0;
      v12 = (void *)sub_19E36F864();
      v13 = objc_msgSend(v10, sel___im_subscriptionContextOrDefaultForForSimID_phoneNumber_, v11, v12);

      if (v13)
      {
        v14 = objc_msgSend(v8, sel_sharedInstance);
        sub_19E247E74((uint64_t *)&unk_1ECFC6AB8);
        v15 = swift_allocObject();
        *(_OWORD *)(v15 + 16) = xmmword_19E381B30;
        v16 = MEMORY[0x1E0DEA968];
        *(_QWORD *)(v15 + 32) = 5456722;
        *(_QWORD *)(v15 + 40) = 0xE300000000000000;
        *(_QWORD *)(v15 + 88) = v16;
        *(_QWORD *)(v15 + 56) = v16;
        *(_QWORD *)(v15 + 64) = 0xD00000000000001CLL;
        *(_QWORD *)(v15 + 72) = 0x800000019E39C4F0;
        v17 = (void *)sub_19E36F954();
        swift_bridgeObjectRelease();
        v18 = (void *)sub_19E36F9B4();
        v19 = (void *)sub_19E36F9B4();
        v20 = objc_msgSend(v14, sel_copyCarrierBundleValueForSubscriptionContext_keyHierarchy_defaultValue_valueIfError_, v13, v17, v18, v19);

        if (v20)
        {
          sub_19E36FC0C();

          swift_unknownObjectRelease();
        }
        else
        {

          memset(v33, 0, sizeof(v33));
        }
        sub_19E32223C((uint64_t)v33, (uint64_t)v34);
        if (v34[3])
        {
          if (swift_dynamicCast())
          {
            v21 = v32;
LABEL_15:
            v35 = v21;
            goto LABEL_16;
          }
        }
        else
        {
          sub_19E322284((uint64_t)v34);
        }
        v21 = 1;
        goto LABEL_15;
      }
    }
  }
LABEL_16:
  v31 = a1;
  if (qword_1EE500710 != -1)
    swift_once();
  v22 = sub_19E36F798();
  sub_19E3222C4(v22, (uint64_t)qword_1EE5006F0);
  v23 = v35;
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  v24 = sub_19E36F780();
  v25 = sub_19E36FA8C();
  if (os_log_type_enabled(v24, v25))
  {
    v26 = swift_slowAlloc();
    v27 = swift_slowAlloc();
    v34[0] = v27;
    *(_DWORD *)v26 = 136446978;
    *(_QWORD *)&v33[0] = sub_19E337764(0xD000000000000031, 0x800000019E39C4B0, v34);
    sub_19E36FBD0();
    *(_WORD *)(v26 + 12) = 1024;
    LODWORD(v33[0]) = v23;
    sub_19E36FBD0();
    *(_WORD *)(v26 + 18) = 2080;
    swift_bridgeObjectRetain();
    *(_QWORD *)&v33[0] = sub_19E337764(v31, a2, v34);
    sub_19E36FBD0();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v26 + 28) = 2080;
    if (a4)
      v28 = a3;
    else
      v28 = 0x3E6C696E3CLL;
    if (a4)
      v29 = a4;
    else
      v29 = 0xE500000000000000;
    swift_bridgeObjectRetain();
    *(_QWORD *)&v33[0] = sub_19E337764(v28, v29, v34);
    sub_19E36FBD0();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_19E239000, v24, v25, "%{public}s resolved %{BOOL}d phoneNumber %s simID %s", (uint8_t *)v26, 0x26u);
    swift_arrayDestroy();
    MEMORY[0x1A1AE8ACC](v27, -1, -1);
    MEMORY[0x1A1AE8ACC](v26, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
  }
  swift_beginAccess();
  return v35;
}

uint64_t sub_19E323244(uint64_t a1)
{
  swift_unknownObjectWeakDestroy();
  return a1;
}

uint64_t sub_19E323268()
{
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_19E323294()
{
  uint64_t v0;
  void (*v1)(uint64_t);
  uint64_t v2;

  v1 = *(void (**)(uint64_t))(v0 + 16);
  v2 = *(_QWORD *)(v0 + 32) + 24;
  swift_beginAccess();
  v1(v2);
  return swift_endAccess();
}

uint64_t sub_19E3232F0()
{
  return swift_release();
}

void sub_19E3232F8(uint64_t *a1)
{
  uint64_t v1;

  sub_19E31FB7C(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(void **)(v1 + 32));
}

uint64_t sub_19E323304()
{
  return sub_19E323450();
}

uint64_t sub_19E323318(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_19E247E74(qword_1ECFC68D0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

_QWORD *sub_19E323360(_QWORD *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
    return (_QWORD *)(*result
                    + ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80)));
  return result;
}

uint64_t sub_19E323384(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 24) - 8);
  if ((*(_BYTE *)(v1 + 82) & 2) != 0)
    return swift_release();
  else
    return (*(uint64_t (**)(void))(v1 + 8))();
}

void sub_19E3233A4(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t *v2;

  sub_19E31E4F8(a1, v2[2], v2[3], v2[4], a2);
}

uint64_t sub_19E3233B0@<X0>(_QWORD *a1@<X8>)
{
  return sub_19E3233C4(a1);
}

uint64_t sub_19E3233C4@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  void (*v3)(uint64_t *__return_ptr, uint64_t);
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  v3 = *(void (**)(uint64_t *__return_ptr, uint64_t))(v1 + 16);
  v4 = *(_QWORD *)(v1 + 32) + 24;
  swift_beginAccess();
  v3(&v6, v4);
  result = swift_endAccess();
  *a1 = v6;
  return result;
}

id sub_19E32343C(uint64_t a1)
{
  uint64_t v1;

  return objc_msgSend(*(id *)(a1 + 8), sel_setDelegate_, *(_QWORD *)(v1 + 16));
}

uint64_t sub_19E323450()
{
  uint64_t v0;
  void (*v1)(uint64_t);
  uint64_t v2;

  v1 = *(void (**)(uint64_t))(v0 + 16);
  v2 = *(_QWORD *)(v0 + 32) + 24;
  swift_beginAccess();
  v1(v2);
  return swift_endAccess();
}

uint64_t sub_19E3234C8()
{
  uint64_t v0;

  v0 = sub_19E36F798();
  sub_19E3222DC(v0, qword_1EE501910);
  sub_19E3222C4(v0, (uint64_t)qword_1EE501910);
  return sub_19E36F78C();
}

uint64_t sub_19E323578()
{
  void *v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if (objc_msgSend(v0, sel_isFromMe))
  {
    if (qword_1EE501528 != -1)
      swift_once();
    v1 = sub_19E36F798();
    sub_19E3222C4(v1, (uint64_t)qword_1EE501910);
    v2 = sub_19E36F780();
    v3 = sub_19E36FAA4();
    if (!os_log_type_enabled(v2, v3))
      goto LABEL_47;
    v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v4 = 0;
    v5 = "Not processing possible availability reply for message from me";
LABEL_46:
    _os_log_impl(&dword_19E239000, v2, v3, v5, v4, 2u);
    MEMORY[0x1A1AE8ACC](v4, -1, -1);
LABEL_47:

    return 0;
  }
  if (objc_msgSend(v0, sel_isEmote))
  {
    if (qword_1EE501528 != -1)
      swift_once();
    v6 = sub_19E36F798();
    sub_19E3222C4(v6, (uint64_t)qword_1EE501910);
    v2 = sub_19E36F780();
    v3 = sub_19E36FAA4();
    if (!os_log_type_enabled(v2, v3))
      goto LABEL_47;
    v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v4 = 0;
    v5 = "Not processing possible availability reply for emote message";
    goto LABEL_46;
  }
  if (objc_msgSend(v0, sel_isEmpty))
  {
    if (qword_1EE501528 != -1)
      swift_once();
    v7 = sub_19E36F798();
    sub_19E3222C4(v7, (uint64_t)qword_1EE501910);
    v2 = sub_19E36F780();
    v3 = sub_19E36FAA4();
    if (!os_log_type_enabled(v2, v3))
      goto LABEL_47;
    v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v4 = 0;
    v5 = "Not processing possible availability reply for empty message";
    goto LABEL_46;
  }
  if (objc_msgSend(v0, sel_isTypingMessage))
  {
    if (qword_1EE501528 != -1)
      swift_once();
    v8 = sub_19E36F798();
    sub_19E3222C4(v8, (uint64_t)qword_1EE501910);
    v2 = sub_19E36F780();
    v3 = sub_19E36FAA4();
    if (!os_log_type_enabled(v2, v3))
      goto LABEL_47;
    v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v4 = 0;
    v5 = "Not processing possible availability reply for typing message";
    goto LABEL_46;
  }
  if (objc_msgSend(v0, sel_isLocatingMessage))
  {
    if (qword_1EE501528 != -1)
      swift_once();
    v9 = sub_19E36F798();
    sub_19E3222C4(v9, (uint64_t)qword_1EE501910);
    v2 = sub_19E36F780();
    v3 = sub_19E36FAA4();
    if (!os_log_type_enabled(v2, v3))
      goto LABEL_47;
    v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v4 = 0;
    v5 = "Not processing possible availability reply for locating message";
    goto LABEL_46;
  }
  if (objc_msgSend(v0, sel_isAutoReply))
  {
    if (qword_1EE501528 != -1)
      swift_once();
    v10 = sub_19E36F798();
    sub_19E3222C4(v10, (uint64_t)qword_1EE501910);
    v2 = sub_19E36F780();
    v3 = sub_19E36FAA4();
    if (!os_log_type_enabled(v2, v3))
      goto LABEL_47;
    v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v4 = 0;
    v5 = "Not processing possible availability reply for auto reply message";
    goto LABEL_46;
  }
  if (objc_msgSend(v0, sel_isUnfinished))
  {
    if (qword_1EE501528 != -1)
      swift_once();
    v11 = sub_19E36F798();
    sub_19E3222C4(v11, (uint64_t)qword_1EE501910);
    v2 = sub_19E36F780();
    v3 = sub_19E36FAA4();
    if (!os_log_type_enabled(v2, v3))
      goto LABEL_47;
    v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v4 = 0;
    v5 = "Not processing possible availability reply for unfinished message";
    goto LABEL_46;
  }
  if (objc_msgSend(v0, sel_isSystemMessage))
  {
    if (qword_1EE501528 != -1)
      swift_once();
    v12 = sub_19E36F798();
    sub_19E3222C4(v12, (uint64_t)qword_1EE501910);
    v2 = sub_19E36F780();
    v3 = sub_19E36FAA4();
    if (!os_log_type_enabled(v2, v3))
      goto LABEL_47;
    v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v4 = 0;
    v5 = "Not processing possible availability reply for system message";
    goto LABEL_46;
  }
  if (objc_msgSend(v0, sel_hasLegacyUrgentTriggerMatchInText))
  {
    if (qword_1EE501528 != -1)
      swift_once();
    v13 = sub_19E36F798();
    sub_19E3222C4(v13, (uint64_t)qword_1EE501910);
    v2 = sub_19E36F780();
    v3 = sub_19E36FAA4();
    if (!os_log_type_enabled(v2, v3))
      goto LABEL_47;
    v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v4 = 0;
    v5 = "Not processing possible availability reply for message that is a legacy urgent trigger";
    goto LABEL_46;
  }
  return 1;
}

unint64_t sub_19E323B74()
{
  void *v0;
  id v1;
  unint64_t v2;
  id v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t ObjCClassFromMetadata;
  void *v8;
  void *v9;
  void *v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  void (*v20)(char *, uint64_t);
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;

  v1 = objc_msgSend(v0, sel_body);
  v2 = (unint64_t)v1;
  if (v1)
  {
    v3 = objc_msgSend(v1, sel_string);

    v4 = sub_19E36F888();
    v2 = v5;

    v6 = HIBYTE(v2) & 0xF;
    if ((v2 & 0x2000000000000000) == 0)
      v6 = v4 & 0xFFFFFFFFFFFFLL;
    if (v6)
    {
      sub_19E323E5C();
      ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
      v28 = objc_msgSend((id)objc_opt_self(), sel_bundleForClass_, ObjCClassFromMetadata);
      v8 = (void *)sub_19E36F864();
      v9 = (void *)sub_19E36F864();
      v10 = (void *)sub_19E36F864();
      v11 = objc_msgSend(v28, sel_localizedStringForKey_value_table_, v8, v9, v10);

      v12 = sub_19E36F888();
      v26 = v13;
      v27 = v12;

      v31 = v4;
      v32 = v2;
      v14 = sub_19E36F4E0();
      v25 = (uint64_t)&v25;
      v15 = *(_QWORD *)(v14 - 8);
      v16 = *(_QWORD *)(v15 + 64);
      v17 = MEMORY[0x1E0C80A78](v14);
      MEMORY[0x1E0C80A78](v17);
      v18 = sub_19E36F4C8();
      MEMORY[0x1E0C80A78](v18);
      v19 = (char *)&v25 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
      sub_19E36F4BC();
      sub_19E36F4D4();
      v20 = *(void (**)(char *, uint64_t))(v15 + 8);
      v20(v19, v14);
      v20(v19, v14);
      sub_19E323E98();
      v21 = sub_19E36FBE8();
      v23 = v22;
      v20(v19, v14);
      swift_bridgeObjectRelease();
      v31 = v21;
      v32 = v23;
      v29 = v27;
      v30 = v26;
      LOBYTE(v2) = sub_19E36FBF4();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

    }
    else
    {
      swift_bridgeObjectRelease();
      LOBYTE(v2) = 0;
    }
  }
  return v2 & 1;
}

unint64_t sub_19E323E5C()
{
  unint64_t result;

  result = qword_1EE501928;
  if (!qword_1EE501928)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1EE501928);
  }
  return result;
}

unint64_t sub_19E323E98()
{
  unint64_t result;

  result = qword_1EE501930;
  if (!qword_1EE501930)
  {
    result = MEMORY[0x1A1AE8A18](MEMORY[0x1E0DEA9B8], MEMORY[0x1E0DEA968]);
    atomic_store(result, (unint64_t *)&qword_1EE501930);
  }
  return result;
}

id sub_19E323F48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, SEL *a5)
{
  id v6;
  void *v7;
  void *v8;
  id v9;

  sub_19E36F888();
  sub_19E36F888();
  v6 = objc_msgSend((id)objc_opt_self(), sel_sharedManager);
  v7 = (void *)sub_19E36F864();
  v8 = (void *)sub_19E36F864();
  v9 = objc_msgSend(v6, *a5, v7, v8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return v9;
}

id sub_19E324110(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, SEL *a5)
{
  uint64_t v7;
  id v8;
  void *v9;
  void *v10;
  id v11;

  sub_19E36F888();
  if (a4)
  {
    sub_19E36F888();
    a4 = v7;
  }
  v8 = objc_msgSend((id)objc_opt_self(), sel_sharedManager);
  v9 = (void *)sub_19E36F864();
  if (a4)
    v10 = (void *)sub_19E36F864();
  else
    v10 = 0;
  v11 = objc_msgSend(v8, *a5, v9, v10);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return v11;
}

IMCTRCSUtilities __swiftcall IMCTRCSUtilities.init()()
{
  return (IMCTRCSUtilities)objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_init);
}

id IMCTRCSUtilities.init()()
{
  objc_super v1;

  v1.super_class = (Class)IMCTRCSUtilities;
  return objc_msgSendSuper2(&v1, sel_init);
}

unint64_t type metadata accessor for IMCTRCSUtilities()
{
  unint64_t result;

  result = qword_1EE501938;
  if (!qword_1EE501938)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1EE501938);
  }
  return result;
}

id sub_19E324344(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v6;
  id v7;

  v6 = objc_msgSend((id)objc_opt_self(), sel_sharedManager);
  if (a2)
    a2 = (void *)sub_19E36F864();
  if (a4)
    a4 = (void *)sub_19E36F864();
  v7 = objc_msgSend(v6, sel_enabledForPhoneNumber_simID_, a2, a4);

  return v7;
}

void __swiftcall IMActionOpenApp.init(dictionary:)(IMActionOpenApp_optional *__return_ptr retstr, Swift::OpaquePointer dictionary)
{
  id v2;
  void *v3;

  v2 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  v3 = (void *)sub_19E36F81C();
  swift_bridgeObjectRelease();
  objc_msgSend(v2, sel_initWithDictionary_, v3);

}

id IMActionOpenApp.init(dictionary:)(uint64_t a1)
{
  void *v1;
  void *v2;
  unint64_t v4;
  char v5;
  void *v6;
  id v7;
  __int128 v9;
  __int128 v10;

  v2 = v1;
  if (!*(_QWORD *)(a1 + 16) || (v4 = sub_19E3247E4(7107189, 0xE300000000000000), (v5 & 1) == 0))
  {
    v9 = 0u;
    v10 = 0u;
    swift_bridgeObjectRelease();
    goto LABEL_7;
  }
  sub_19E324848(*(_QWORD *)(a1 + 56) + 32 * v4, (uint64_t)&v9);
  swift_bridgeObjectRelease();
  if (!*((_QWORD *)&v10 + 1))
  {
LABEL_7:
    sub_19E322284((uint64_t)&v9);
    goto LABEL_8;
  }
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_8:
    swift_getObjectType();
    swift_deallocPartialClassInstance();
    return 0;
  }
  v6 = (void *)sub_19E36F864();
  swift_bridgeObjectRelease();
  v7 = objc_msgSend(v2, sel_initWithUrl_, v6);

  return v7;
}

void __swiftcall IMActionOpenApp.init()(IMActionOpenApp *__return_ptr retstr)
{
  objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_init);
}

void IMActionOpenApp.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

unint64_t sub_19E3247E4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_19E36FE88();
  sub_19E36F8B8();
  v4 = sub_19E36FEA0();
  return sub_19E324970(a1, a2, v4);
}

uint64_t sub_19E324848(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

unint64_t type metadata accessor for IMActionOpenApp()
{
  unint64_t result;

  result = qword_1EE5019B0;
  if (!qword_1EE5019B0)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1EE5019B0);
  }
  return result;
}

unint64_t sub_19E3248C0(uint64_t a1)
{
  uint64_t v2;

  sub_19E36F888();
  sub_19E36FE88();
  sub_19E36F8B8();
  v2 = sub_19E36FEA0();
  swift_bridgeObjectRelease();
  return sub_19E324A50(a1, v2);
}

unint64_t sub_19E324940(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_19E36FC48();
  return sub_19E324BC4(a1, v2);
}

unint64_t sub_19E324970(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  _QWORD *v10;
  BOOL v11;
  uint64_t v12;
  _QWORD *v13;
  BOOL v14;

  v4 = v3 + 64;
  v5 = -1 << *(_BYTE *)(v3 + 32);
  v6 = a3 & ~v5;
  if (((*(_QWORD *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0)
  {
    v9 = *(_QWORD *)(v3 + 48);
    v10 = (_QWORD *)(v9 + 16 * v6);
    v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (sub_19E36FE10() & 1) == 0)
    {
      v12 = ~v5;
      do
      {
        v6 = (v6 + 1) & v12;
        if (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
          break;
        v13 = (_QWORD *)(v9 + 16 * v6);
        v14 = *v13 == a1 && v13[1] == a2;
      }
      while (!v14 && (sub_19E36FE10() & 1) == 0);
    }
  }
  return v6;
}

unint64_t sub_19E324A50(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v18;

  v3 = v2 + 64;
  v4 = -1 << *(_BYTE *)(v2 + 32);
  v5 = a2 & ~v4;
  if (((*(_QWORD *)(v2 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
  {
    v6 = sub_19E36F888();
    v8 = v7;
    if (v6 == sub_19E36F888() && v8 == v9)
    {
LABEL_16:
      swift_bridgeObjectRelease_n();
      return v5;
    }
    v11 = sub_19E36FE10();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v11 & 1) == 0)
    {
      v12 = ~v4;
      v5 = (v5 + 1) & v12;
      if (((*(_QWORD *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
      {
        while (1)
        {
          v13 = sub_19E36F888();
          v15 = v14;
          if (v13 == sub_19E36F888() && v15 == v16)
            break;
          v18 = sub_19E36FE10();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v18 & 1) == 0)
          {
            v5 = (v5 + 1) & v12;
            if (((*(_QWORD *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
              continue;
          }
          return v5;
        }
        goto LABEL_16;
      }
    }
  }
  return v5;
}

unint64_t sub_19E324BC4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v6;
  char v7;
  _BYTE v9[40];

  v3 = -1 << *(_BYTE *)(v2 + 32);
  v4 = a2 & ~v3;
  if (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0)
  {
    v6 = ~v3;
    do
    {
      sub_19E324C88(*(_QWORD *)(v2 + 48) + 40 * v4, (uint64_t)v9);
      v7 = MEMORY[0x1A1AE7320](v9, a1);
      sub_19E324CC4((uint64_t)v9);
      if ((v7 & 1) != 0)
        break;
      v4 = (v4 + 1) & v6;
    }
    while (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0);
  }
  return v4;
}

uint64_t sub_19E324C88(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(MEMORY[0x1E0DEC198] - 8) + 16))(a2, a1);
  return a2;
}

uint64_t sub_19E324CC4(uint64_t a1)
{
  (*(void (**)(void))(*(_QWORD *)(MEMORY[0x1E0DEC198] - 8) + 8))();
  return a1;
}

id sub_19E324CF8()
{
  id result;

  result = sub_19E324D5C(0, 1);
  qword_1EE5019C0 = (uint64_t)result;
  return result;
}

id static NSNumberFormatter.zeroFormatter.getter()
{
  return sub_19E24BFC0(&qword_1EE501530, (id *)&qword_1EE5019C0);
}

id sub_19E324D38()
{
  id result;

  result = sub_19E324D5C(4, 3);
  qword_1EE5019C8 = (uint64_t)result;
  return result;
}

id sub_19E324D5C(uint64_t a1, uint64_t a2)
{
  id v4;
  void *v5;

  v4 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37F0]), sel_init);
  objc_msgSend(v4, sel_setNumberStyle_, 3);
  objc_msgSend(v4, sel_setMinimumFractionDigits_, a1);
  objc_msgSend(v4, sel_setMaximumFractionDigits_, a1);
  objc_msgSend(v4, sel_setMinimumSignificantDigits_, a2);
  objc_msgSend(v4, sel_setMaximumSignificantDigits_, a2);
  sub_19E324FB4();
  v5 = (void *)sub_19E36FBAC();
  objc_msgSend(v4, sel_setRoundingIncrement_, v5);

  objc_msgSend(v4, sel_setRoundingMode_, 2);
  return v4;
}

id static NSNumberFormatter.percentFormatter.getter()
{
  return sub_19E24BFC0(&qword_1EE501538, (id *)&qword_1EE5019C8);
}

uint64_t static NSNumberFormatter.percentString(forTotal:count:)(double a1, double a2)
{
  double v2;
  BOOL v3;
  double v4;

  v2 = a2 / a1;
  v3 = a1 == 0.0;
  v4 = 1.0;
  if (!v3)
    v4 = v2;
  return sub_19E324E7C(v4);
}

uint64_t sub_19E324E7C(double a1)
{
  void *v1;
  void *v2;
  id v3;
  void *v4;
  id v5;
  uint64_t v6;

  if (a1 <= 0.0)
  {
    if (qword_1EE501530 != -1)
      swift_once();
    v4 = (void *)qword_1EE5019C0;
    sub_19E324FB4();
    v2 = (void *)sub_19E36FBAC();
    v3 = objc_msgSend(v4, sel_stringFromNumber_, v2);
  }
  else
  {
    if (qword_1EE501538 != -1)
      swift_once();
    v1 = (void *)qword_1EE5019C8;
    v2 = (void *)sub_19E36F66C();
    v3 = objc_msgSend(v1, sel_stringFromNumber_, v2);
  }
  v5 = v3;

  if (!v5)
    return 0;
  v6 = sub_19E36F888();

  return v6;
}

unint64_t sub_19E324FB4()
{
  unint64_t result;

  result = qword_1ECFC6A00;
  if (!qword_1ECFC6A00)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1ECFC6A00);
  }
  return result;
}

void __swiftcall IMPersistentMenu.init(dictionary:)(IMPersistentMenu_optional *__return_ptr retstr, Swift::OpaquePointer dictionary)
{
  id v2;
  void *v3;

  v2 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  v3 = (void *)sub_19E36F81C();
  swift_bridgeObjectRelease();
  objc_msgSend(v2, sel_initWithDictionary_, v3);

}

id IMPersistentMenu.init(dictionary:)(uint64_t a1)
{
  void *v1;
  void *v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;
  unint64_t v8;
  char v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t i;
  id v15;
  id v17;
  void *v18;
  id v19;
  unint64_t v20;
  char v21;
  void *v22;
  void *v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;

  v2 = v1;
  v4 = sub_19E36F888();
  if (!*(_QWORD *)(a1 + 16) || (v6 = sub_19E3247E4(v4, v5), (v7 & 1) == 0))
  {
    v25 = 0u;
    v26 = 0u;
    swift_bridgeObjectRelease();
LABEL_9:
    sub_19E322284((uint64_t)&v25);
    if (!*(_QWORD *)(a1 + 16))
      goto LABEL_17;
    goto LABEL_10;
  }
  sub_19E324848(*(_QWORD *)(a1 + 56) + 32 * v6, (uint64_t)&v25);
  swift_bridgeObjectRelease();
  if (!*((_QWORD *)&v26 + 1))
    goto LABEL_9;
  sub_19E247E74(&qword_1EE503490);
  if ((swift_dynamicCast() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    a1 = v24;
  }
  if (!*(_QWORD *)(a1 + 16))
    goto LABEL_17;
LABEL_10:
  v8 = sub_19E3247E4(0x6C6576656CLL, 0xE500000000000000);
  if ((v9 & 1) != 0)
  {
    sub_19E324848(*(_QWORD *)(a1 + 56) + 32 * v8, (uint64_t)&v25);
    if ((swift_dynamicCast() & 1) != 0)
    {
      if (*(_QWORD *)(a1 + 16))
      {
        v10 = v24;
        v11 = sub_19E3247E4(0x736D657469, 0xE500000000000000);
        if ((v12 & 1) != 0)
        {
          sub_19E324848(*(_QWORD *)(a1 + 56) + 32 * v11, (uint64_t)&v25);
          sub_19E247E74(&qword_1EE5019D0);
          if ((swift_dynamicCast() & 1) != 0)
          {
            *(_QWORD *)&v25 = MEMORY[0x1E0DEE9D8];
            v13 = *(_QWORD *)(v24 + 16);
            if (v13)
            {
              swift_bridgeObjectRetain();
              for (i = 0; i != v13; ++i)
              {
                v17 = objc_allocWithZone((Class)IMPersistentMenuItem);
                swift_bridgeObjectRetain();
                v18 = (void *)sub_19E36F81C();
                swift_bridgeObjectRelease();
                v19 = objc_msgSend(v17, sel_initWithDictionary_, v18);

                if (v19)
                {
                  MEMORY[0x1A1AE7014]();
                  if (*(_QWORD *)((v25 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v25 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
                    sub_19E36F984();
                  sub_19E36F99C();
                  sub_19E36F978();
                }
              }
              swift_bridgeObjectRelease();
              v10 = v24;
            }
            swift_bridgeObjectRelease();
            if (*(_QWORD *)(a1 + 16)
              && (v20 = sub_19E3247E4(0x5479616C70736964, 0xEB00000000747865), (v21 & 1) != 0))
            {
              sub_19E324848(*(_QWORD *)(a1 + 56) + 32 * v20, (uint64_t)&v25);
            }
            else
            {
              v25 = 0u;
              v26 = 0u;
            }
            swift_bridgeObjectRelease();
            if (*((_QWORD *)&v26 + 1))
            {
              if ((swift_dynamicCast() & 1) != 0)
              {
                v22 = (void *)sub_19E36F864();
                swift_bridgeObjectRelease();
LABEL_34:
                type metadata accessor for IMPersistentMenuItem();
                v23 = (void *)sub_19E36F954();
                swift_bridgeObjectRelease();
                v15 = objc_msgSend(v2, sel_initWithLevel_displayText_items_, v10, v22, v23);

                return v15;
              }
            }
            else
            {
              sub_19E322284((uint64_t)&v25);
            }
            v22 = 0;
            goto LABEL_34;
          }
        }
      }
    }
  }
LABEL_17:
  swift_bridgeObjectRelease();
  swift_getObjectType();
  swift_deallocPartialClassInstance();
  return 0;
}

unint64_t sub_19E32560C()
{
  void *v0;
  void *v1;
  uint64_t inited;
  id v3;
  uint64_t v4;
  id v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  id v16;
  void *v17;
  id v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  id v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  uint64_t v30;
  id v31;

  v1 = v0;
  sub_19E247E74((uint64_t *)&unk_1EE5019F8);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_19E381BB0;
  *(_QWORD *)(inited + 32) = 0x6C6576656CLL;
  *(_QWORD *)(inited + 40) = 0xE500000000000000;
  v3 = objc_msgSend(v0, sel_level);
  v4 = MEMORY[0x1E0DEB418];
  *(_QWORD *)(inited + 48) = v3;
  *(_QWORD *)(inited + 72) = v4;
  *(_QWORD *)(inited + 80) = 0x5479616C70736964;
  *(_QWORD *)(inited + 88) = 0xEB00000000747865;
  v5 = objc_msgSend(v0, sel_displayText);
  if (v5)
  {
    v6 = v5;
    v7 = sub_19E36F888();
    v9 = v8;

    v10 = MEMORY[0x1E0DEA968];
  }
  else
  {
    v7 = 0;
    v9 = 0;
    v10 = 0;
    *(_QWORD *)(inited + 112) = 0;
  }
  *(_QWORD *)(inited + 96) = v7;
  *(_QWORD *)(inited + 104) = v9;
  *(_QWORD *)(inited + 120) = v10;
  *(_QWORD *)(inited + 128) = 0x736D657469;
  *(_QWORD *)(inited + 136) = 0xE500000000000000;
  v11 = objc_msgSend(v1, sel_items);
  type metadata accessor for IMPersistentMenuItem();
  v12 = sub_19E36F960();

  if (v12 >> 62)
  {
    swift_bridgeObjectRetain();
    v13 = sub_19E36FCFC();
  }
  else
  {
    v13 = *(_QWORD *)((v12 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
  }
  v30 = inited;
  v31 = v1;
  if (v13)
  {
    if (v13 < 1)
    {
      __break(1u);
      goto LABEL_28;
    }
    v14 = 0;
    v15 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    do
    {
      if ((v12 & 0xC000000000000001) != 0)
        v16 = (id)MEMORY[0x1A1AE7368](v14, v12);
      else
        v16 = *(id *)(v12 + 8 * v14 + 32);
      v17 = v16;
      v18 = objc_msgSend(v16, sel_dictionaryRepresentation);
      v19 = sub_19E36F828();

      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v15 = sub_19E36A3B4(0, v15[2] + 1, 1, v15);
      v21 = v15[2];
      v20 = v15[3];
      if (v21 >= v20 >> 1)
        v15 = sub_19E36A3B4((_QWORD *)(v20 > 1), v21 + 1, 1, v15);
      ++v14;
      v15[2] = v21 + 1;
      v15[v21 + 4] = v19;
    }
    while (v13 != v14);
  }
  else
  {
    v15 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  swift_bridgeObjectRelease_n();
  *(_QWORD *)(v30 + 168) = sub_19E247E74(&qword_1EE5019D0);
  *(_QWORD *)(v30 + 144) = v15;
  v22 = sub_19E32D998(v30);
  v1 = (void *)sub_19E35FE5C(v22);
  swift_bridgeObjectRelease();
  if (objc_msgSend(v31, sel_level))
    return (unint64_t)v1;
  v23 = objc_msgSend(v31, sel_items);
  v24 = sub_19E36F960();

  if (!(v24 >> 62))
  {
    v25 = *(_QWORD *)((v24 & 0xFFFFFFFFFFFFF8) + 0x10);
    goto LABEL_22;
  }
LABEL_28:
  swift_bridgeObjectRetain();
  v25 = sub_19E36FCFC();
  swift_bridgeObjectRelease();
LABEL_22:
  swift_bridgeObjectRelease();
  if (v25)
  {
    sub_19E247E74(&qword_1EE5019B8);
    v26 = swift_initStackObject();
    *(_OWORD *)(v26 + 16) = xmmword_19E381BA0;
    *(_QWORD *)(v26 + 32) = sub_19E36F888();
    *(_QWORD *)(v26 + 40) = v27;
    *(_QWORD *)(v26 + 72) = sub_19E247E74(&qword_1EE503490);
    *(_QWORD *)(v26 + 48) = v1;
    return sub_19E32D864(v26);
  }
  else
  {
    swift_bridgeObjectRelease();
    v28 = objc_msgSend((id)objc_opt_self(), sel_emptyStampProperty);
    v1 = (void *)sub_19E36F828();

  }
  return (unint64_t)v1;
}

void __swiftcall IMPersistentMenu.init()(IMPersistentMenu *__return_ptr retstr)
{
  objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_init);
}

void IMPersistentMenu.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

unint64_t type metadata accessor for IMPersistentMenu()
{
  unint64_t result;

  result = qword_1EE5019F0;
  if (!qword_1EE5019F0)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1EE5019F0);
  }
  return result;
}

uint64_t sub_19E325CAC(uint64_t a1)
{
  uint64_t v1;
  char v3;
  uint64_t v5;
  uint64_t v6;
  _BYTE v7[24];
  uint64_t v8;

  sub_19E323318(a1, (uint64_t)v7);
  if (!v8)
  {
    sub_19E322284((uint64_t)v7);
    goto LABEL_9;
  }
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_9:
    v3 = 0;
    return v3 & 1;
  }
  if (v5 == sub_19E36F888() && v6 == v1)
  {
    swift_bridgeObjectRelease_n();
    v3 = 1;
  }
  else
  {
    v3 = sub_19E36FE10();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return v3 & 1;
}

id sub_19E325D9C()
{
  void *v0;

  swift_bridgeObjectRetain();
  v0 = (void *)sub_19E36F864();
  swift_bridgeObjectRelease();
  return v0;
}

void __swiftcall IMActionComposeText.init(dictionary:)(IMActionComposeText_optional *__return_ptr retstr, Swift::OpaquePointer dictionary)
{
  id v2;
  void *v3;

  v2 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  v3 = (void *)sub_19E36F81C();
  swift_bridgeObjectRelease();
  objc_msgSend(v2, sel_initWithDictionary_, v3);

}

id IMActionComposeText.init(dictionary:)(uint64_t a1)
{
  void *v1;
  void *v2;
  unint64_t v4;
  char v5;
  unint64_t v6;
  char v7;
  id v8;
  void *v10;
  void *v11;
  __int128 v12;
  __int128 v13;

  v2 = v1;
  if (*(_QWORD *)(a1 + 16))
  {
    v4 = sub_19E3247E4(0x6D754E656E6F6870, 0xEB00000000726562);
    if ((v5 & 1) != 0)
    {
      sub_19E324848(*(_QWORD *)(a1 + 56) + 32 * v4, (uint64_t)&v12);
      if ((swift_dynamicCast() & 1) != 0)
      {
        if (*(_QWORD *)(a1 + 16) && (v6 = sub_19E3247E4(1954047348, 0xE400000000000000), (v7 & 1) != 0))
        {
          sub_19E324848(*(_QWORD *)(a1 + 56) + 32 * v6, (uint64_t)&v12);
        }
        else
        {
          v12 = 0u;
          v13 = 0u;
        }
        swift_bridgeObjectRelease();
        if (!*((_QWORD *)&v13 + 1))
        {
          swift_bridgeObjectRelease();
          sub_19E322284((uint64_t)&v12);
          goto LABEL_8;
        }
        if ((swift_dynamicCast() & 1) != 0)
        {
          v10 = (void *)sub_19E36F864();
          swift_bridgeObjectRelease();
          v11 = (void *)sub_19E36F864();
          swift_bridgeObjectRelease();
          v8 = objc_msgSend(v2, sel_initWithPhoneNumber_text_, v10, v11);

          return v8;
        }
      }
    }
  }
  swift_bridgeObjectRelease();
LABEL_8:
  swift_getObjectType();
  swift_deallocPartialClassInstance();
  return 0;
}

unint64_t sub_19E3260E0()
{
  void *v0;
  uint64_t inited;
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  sub_19E247E74(&qword_1EE5019B8);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_19E381B30;
  *(_QWORD *)(inited + 32) = 0x6D754E656E6F6870;
  *(_QWORD *)(inited + 40) = 0xEB00000000726562;
  v2 = objc_msgSend(v0, sel_phoneNumber);
  v3 = sub_19E36F888();
  v5 = v4;

  v6 = MEMORY[0x1E0DEA968];
  *(_QWORD *)(inited + 48) = v3;
  *(_QWORD *)(inited + 56) = v5;
  *(_QWORD *)(inited + 72) = v6;
  *(_QWORD *)(inited + 80) = 1954047348;
  *(_QWORD *)(inited + 88) = 0xE400000000000000;
  v7 = objc_msgSend(v0, sel_text);
  v8 = sub_19E36F888();
  v10 = v9;

  *(_QWORD *)(inited + 120) = v6;
  *(_QWORD *)(inited + 96) = v8;
  *(_QWORD *)(inited + 104) = v10;
  return sub_19E32D864(inited);
}

void __swiftcall IMActionComposeText.init()(IMActionComposeText *__return_ptr retstr)
{
  objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_init);
}

void IMActionComposeText.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

unint64_t type metadata accessor for IMActionComposeText()
{
  unint64_t result;

  result = qword_1EE501A80;
  if (!qword_1EE501A80)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1EE501A80);
  }
  return result;
}

void __swiftcall IMActionComposeAudio.init(dictionary:)(IMActionComposeAudio_optional *__return_ptr retstr, Swift::OpaquePointer dictionary)
{
  id v2;
  void *v3;

  v2 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  v3 = (void *)sub_19E36F81C();
  swift_bridgeObjectRelease();
  objc_msgSend(v2, sel_initWithDictionary_, v3);

}

id IMActionComposeAudio.init(dictionary:)(uint64_t a1)
{
  void *v1;
  void *v2;
  unint64_t v4;
  char v5;
  void *v6;
  id v7;
  __int128 v9;
  __int128 v10;

  v2 = v1;
  if (!*(_QWORD *)(a1 + 16) || (v4 = sub_19E3247E4(0x6D754E656E6F6870, 0xEB00000000726562), (v5 & 1) == 0))
  {
    v9 = 0u;
    v10 = 0u;
    swift_bridgeObjectRelease();
    goto LABEL_7;
  }
  sub_19E324848(*(_QWORD *)(a1 + 56) + 32 * v4, (uint64_t)&v9);
  swift_bridgeObjectRelease();
  if (!*((_QWORD *)&v10 + 1))
  {
LABEL_7:
    sub_19E322284((uint64_t)&v9);
    goto LABEL_8;
  }
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_8:
    swift_getObjectType();
    swift_deallocPartialClassInstance();
    return 0;
  }
  v6 = (void *)sub_19E36F864();
  swift_bridgeObjectRelease();
  v7 = objc_msgSend(v2, sel_initWithPhoneNumber_, v6);

  return v7;
}

void __swiftcall IMActionComposeAudio.init()(IMActionComposeAudio *__return_ptr retstr)
{
  objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_init);
}

void IMActionComposeAudio.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

unint64_t type metadata accessor for IMActionComposeAudio()
{
  unint64_t result;

  result = qword_1EE501A90;
  if (!qword_1EE501A90)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, &qword_1EE501A90);
  }
  return result;
}

uint64_t AsyncSerialQueue.init(priority:bufferingPolicy:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;
  char *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;

  v30 = a1;
  v31 = a2;
  v26 = a3;
  v3 = sub_19E247E74(&qword_1EE4FFA30);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (char *)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = sub_19E247E74(&qword_1EE4FFA58);
  v7 = *(_QWORD *)(v28 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  v9 = MEMORY[0x1E0C80A78](v28);
  v27 = (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)&v26 - v10;
  v12 = sub_19E247E74(&qword_1EE4FFA48);
  v13 = MEMORY[0x1E0C80A78](v12);
  v15 = (char *)&v26 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v26 - v16;
  v18 = sub_19E247E74(&qword_1EE4FFA38);
  v19 = *(_QWORD *)(v18 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v19 + 56))(v17, 1, 1, v18);
  v29 = v4;
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, v31, v3);
  v32 = v17;
  sub_19E247E74(&qword_1EE4FFA60);
  sub_19E36FA2C();
  sub_19E327DEC((uint64_t)v17, (uint64_t)v15, &qword_1EE4FFA48);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v19 + 48))(v15, 1, v18);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    (*(void (**)(uint64_t, char *, uint64_t))(v19 + 32))(v26, v15, v18);
    v22 = v27;
    v21 = v28;
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v27, v11, v28);
    v23 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
    v24 = swift_allocObject();
    *(_QWORD *)(v24 + 16) = 0;
    *(_QWORD *)(v24 + 24) = 0;
    (*(void (**)(unint64_t, char *, uint64_t))(v7 + 32))(v24 + v23, v22, v21);
    v25 = v30;
    sub_19E326E10(v30, (uint64_t)&unk_1EE501AA0, v24);
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v31, v3);
    sub_19E326FA8(v25, &qword_1ECFC6648);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v11, v21);
    return sub_19E326FA8((uint64_t)v17, &qword_1EE4FFA48);
  }
  return result;
}

uint64_t sub_19E326A20(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  sub_19E326FA8(a2, &qword_1EE4FFA48);
  v4 = sub_19E247E74(&qword_1EE4FFA38);
  v5 = *(_QWORD *)(v4 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(a2, a1, v4);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v5 + 56))(a2, 0, 1, v4);
}

uint64_t sub_19E326A94(uint64_t a1)
{
  uint64_t v1;

  return sub_19E326A20(a1, *(_QWORD *)(v1 + 16));
}

uint64_t sub_19E326A9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;

  v4[4] = a4;
  v5 = sub_19E247E74(&qword_1EE4FFA50);
  v4[5] = v5;
  v4[6] = *(_QWORD *)(v5 - 8);
  v4[7] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_19E326B00()
{
  uint64_t v0;
  _QWORD *v1;

  sub_19E247E74(&qword_1EE4FFA58);
  sub_19E36FA14();
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 64) = v1;
  *v1 = v0;
  v1[1] = sub_19E326B88;
  return sub_19E36FA20();
}

uint64_t sub_19E326B88()
{
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_19E326BDC()
{
  uint64_t v0;
  int *v1;
  _QWORD *v2;
  uint64_t (*v4)(void);

  v1 = *(int **)(v0 + 16);
  *(_QWORD *)(v0 + 72) = v1;
  if (v1)
  {
    *(_QWORD *)(v0 + 80) = *(_QWORD *)(v0 + 24);
    v4 = (uint64_t (*)(void))((char *)v1 + *v1);
    v2 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 88) = v2;
    *v2 = v0;
    v2[1] = sub_19E326C74;
    return v4();
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 48) + 8))(*(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 40));
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_19E326C74()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 72);
  v3 = *v0;
  swift_task_dealloc();
  sub_19E327EA0(v2);
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 64) = v4;
  *v4 = v3;
  v4[1] = sub_19E326B88;
  return sub_19E36FA20();
}

uint64_t sub_19E326D10()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = sub_19E247E74(&qword_1EE4FFA58);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_unknownObjectRelease();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  return swift_deallocObject();
}

uint64_t sub_19E326D88(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v4 = *(unsigned __int8 *)(*(_QWORD *)(sub_19E247E74(&qword_1EE4FFA58) - 8) + 80);
  v5 = *(_QWORD *)(v1 + 16);
  v6 = *(_QWORD *)(v1 + 24);
  v7 = v1 + ((v4 + 32) & ~v4);
  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = sub_19E24C450;
  return sub_19E326A9C(a1, v5, v6, v7);
}

uint64_t sub_19E326E10(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v16[4];

  v6 = sub_19E247E74(&qword_1ECFC6648);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_19E327DEC(a1, (uint64_t)v8, &qword_1ECFC6648);
  v9 = sub_19E36F9E4();
  v10 = *(_QWORD *)(v9 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
  {
    sub_19E326FA8((uint64_t)v8, &qword_1ECFC6648);
    if (*(_QWORD *)(a3 + 16))
    {
LABEL_3:
      swift_getObjectType();
      swift_unknownObjectRetain();
      v11 = sub_19E36F9C0();
      v13 = v12;
      swift_unknownObjectRelease();
      goto LABEL_6;
    }
  }
  else
  {
    sub_19E36F9D8();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v8, v9);
    if (*(_QWORD *)(a3 + 16))
      goto LABEL_3;
  }
  v11 = 0;
  v13 = 0;
LABEL_6:
  v14 = swift_allocObject();
  *(_QWORD *)(v14 + 16) = a2;
  *(_QWORD *)(v14 + 24) = a3;
  if (v13 | v11)
  {
    v16[0] = 0;
    v16[1] = 0;
    v16[2] = v11;
    v16[3] = v13;
  }
  return swift_task_create();
}

uint64_t sub_19E326FA8(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = sub_19E247E74(a2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t AsyncSerialQueue.performAndWaitFor<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;

  v5[5] = a4;
  v5[6] = v4;
  v5[3] = a2;
  v5[4] = a3;
  v5[2] = a1;
  return swift_task_switch();
}

{
  uint64_t v4;
  _QWORD *v5;

  v5[5] = a4;
  v5[6] = v4;
  v5[3] = a2;
  v5[4] = a3;
  v5[2] = a1;
  return swift_task_switch();
}

uint64_t sub_19E327004()
{
  uint64_t v0;
  uint64_t v1;
  __int128 v2;
  _QWORD *v3;
  uint64_t (*v5)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  v1 = swift_task_alloc();
  *(_QWORD *)(v0 + 56) = v1;
  v2 = *(_OWORD *)(v0 + 24);
  *(_OWORD *)(v1 + 16) = *(_OWORD *)(v0 + 40);
  *(_OWORD *)(v1 + 32) = v2;
  v5 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_1EE501AC0 + dword_1EE501AC0);
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 64) = v3;
  *v3 = v0;
  v3[1] = sub_19E327098;
  return v5(*(_QWORD *)(v0 + 16), 0, 0, (uint64_t)sub_19E32725C, v1);
}

uint64_t sub_19E327098()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_19E3270E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;

  v20 = a5;
  v21 = a2;
  v8 = sub_19E247E74(&qword_1EE4FFA38);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_19E247E74(&qword_1EE4FFA28);
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12);
  v15 = (char *)&v20 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = (_QWORD *)swift_allocObject();
  v17 = v21;
  v16[2] = v20;
  v16[3] = a1;
  v16[4] = a3;
  v16[5] = a4;
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, v17, v8);
  v18 = swift_allocObject();
  *(_QWORD *)(v18 + 16) = &unk_1EE501AF8;
  *(_QWORD *)(v18 + 24) = v16;
  v22 = &unk_1EE501B00;
  v23 = v18;
  swift_retain();
  swift_retain();
  sub_19E36F9F0();
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  return swift_release();
}

uint64_t sub_19E32725C(uint64_t a1)
{
  uint64_t *v1;

  return sub_19E3270E8(a1, v1[3], v1[4], v1[5], v1[2]);
}

uint64_t sub_19E327268(uint64_t a1, int *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v6;
  _QWORD *v7;
  uint64_t (*v9)(uint64_t);

  v4[2] = a1;
  v4[3] = a4;
  v6 = swift_task_alloc();
  v4[4] = v6;
  v9 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  v7 = (_QWORD *)swift_task_alloc();
  v4[5] = v7;
  *v7 = v4;
  v7[1] = sub_19E3272F0;
  return v9(v6);
}

uint64_t sub_19E3272F0()
{
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_19E327344()
{
  uint64_t v0;

  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(*(_QWORD *)(v0 + 24) - 8) + 32))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v0 + 16) + 64) + 40), *(_QWORD *)(v0 + 32));
  swift_continuation_resume();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_19E32739C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;

  v5[11] = a4;
  v5[12] = a5;
  v5[10] = a1;
  if (a2)
  {
    swift_getObjectType();
    sub_19E36F9C0();
  }
  return swift_task_switch();
}

uint64_t sub_19E327404()
{
  _QWORD *v0;
  void (*v1)(uint64_t);
  uint64_t v2;

  v1 = (void (*)(uint64_t))v0[11];
  v0[7] = v0[10];
  v0[2] = v0;
  v0[3] = sub_19E327460;
  v2 = swift_continuation_init();
  v1(v2);
  return swift_continuation_await();
}

uint64_t sub_19E327460()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  return (*(uint64_t (**)(void))(*v0 + 8))();
}

uint64_t sub_19E3274C0()
{
  uint64_t v0;
  uint64_t v1;
  __int128 v2;
  _QWORD *v3;
  uint64_t (*v5)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  v1 = swift_task_alloc();
  *(_QWORD *)(v0 + 56) = v1;
  v2 = *(_OWORD *)(v0 + 24);
  *(_OWORD *)(v1 + 16) = *(_OWORD *)(v0 + 40);
  *(_OWORD *)(v1 + 32) = v2;
  v5 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_1EE501AD0 + dword_1EE501AD0);
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 64) = v3;
  *v3 = v0;
  v3[1] = sub_19E327554;
  return v5(*(_QWORD *)(v0 + 16), 0, 0, (uint64_t)sub_19E327770, v1);
}

uint64_t sub_19E327554()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 72) = v0;
  swift_task_dealloc();
  if (v0)
    return swift_task_switch();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_19E3275C8()
{
  uint64_t v0;

  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_19E3275FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;

  v20 = a5;
  v21 = a2;
  v8 = sub_19E247E74(&qword_1EE4FFA38);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_19E247E74(&qword_1EE4FFA28);
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12);
  v15 = (char *)&v20 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = (_QWORD *)swift_allocObject();
  v17 = v21;
  v16[2] = v20;
  v16[3] = a1;
  v16[4] = a3;
  v16[5] = a4;
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, v17, v8);
  v18 = swift_allocObject();
  *(_QWORD *)(v18 + 16) = &unk_1EE501AE0;
  *(_QWORD *)(v18 + 24) = v16;
  v22 = &unk_1EE501AE8;
  v23 = v18;
  swift_retain();
  swift_retain();
  sub_19E36F9F0();
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  return swift_release();
}

uint64_t sub_19E327770(uint64_t a1)
{
  uint64_t *v1;

  return sub_19E3275FC(a1, v1[3], v1[4], v1[5], v1[2]);
}

uint64_t sub_19E32777C(uint64_t a1, int *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v6;
  _QWORD *v7;
  uint64_t (*v9)(uint64_t);

  v4[3] = a1;
  v4[4] = a4;
  v4[5] = *(_QWORD *)(a4 - 8);
  v6 = swift_task_alloc();
  v4[6] = v6;
  v9 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  v7 = (_QWORD *)swift_task_alloc();
  v4[7] = v7;
  *v7 = v4;
  v7[1] = sub_19E327808;
  return v9(v6);
}

uint64_t sub_19E327808()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 64) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_19E32786C()
{
  uint64_t v0;

  (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 40) + 32))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v0 + 24) + 64) + 40), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 32));
  swift_continuation_throwingResume();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_19E3278BC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v0 + 16) = *(_QWORD *)(v0 + 64);
  v1 = sub_19E247E74(&qword_1ECFC6620);
  swift_allocError();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 32))(v2, v0 + 16, v1);
  swift_continuation_throwingResumeWithError();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_19E327950(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;

  v5[11] = a4;
  v5[12] = a5;
  v5[10] = a1;
  if (a2)
  {
    swift_getObjectType();
    sub_19E36F9C0();
  }
  return swift_task_switch();
}

uint64_t sub_19E3279B8()
{
  _QWORD *v0;
  void (*v1)(uint64_t);
  uint64_t v2;

  v1 = (void (*)(uint64_t))v0[11];
  v0[7] = v0[10];
  v0[2] = v0;
  v0[3] = sub_19E327A14;
  v2 = swift_continuation_init();
  v1(v2);
  return swift_continuation_await();
}

uint64_t sub_19E327A14()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  if (*(_QWORD *)(v1 + 48))
    swift_willThrow();
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t initializeBufferWithCopyOfBuffer for AsyncSerialQueue(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_19E247E74(&qword_1EE4FFA38);
  return (**(uint64_t (***)(uint64_t, uint64_t, uint64_t))(v4 - 8))(a1, a2, v4);
}

uint64_t assignWithCopy for AsyncSerialQueue(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_19E247E74(&qword_1EE4FFA38);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a1, a2, v4);
  return a1;
}

uint64_t initializeWithTake for AsyncSerialQueue(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_19E247E74(&qword_1EE4FFA38);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a1, a2, v4);
  return a1;
}

uint64_t assignWithTake for AsyncSerialQueue(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_19E247E74(&qword_1EE4FFA38);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a1, a2, v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for AsyncSerialQueue()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_19E327B8C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_19E247E74(&qword_1EE4FFA38);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for AsyncSerialQueue()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_19E327BD8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_19E247E74(&qword_1EE4FFA38);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

void sub_19E327C1C()
{
  unint64_t v0;

  sub_19E327C84();
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

void sub_19E327C84()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EE4FFA40)
  {
    sub_19E247E30(&qword_1EE4FFA60);
    v0 = sub_19E36FA08();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EE4FFA40);
  }
}

uint64_t sub_19E327CDC()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_19E327D00()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int *v5;
  _QWORD *v6;

  v2 = v0[2];
  v3 = v0[3];
  v5 = (int *)v0[4];
  v4 = v0[5];
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v6;
  *v6 = v1;
  v6[1] = sub_19E24C768;
  return sub_19E32777C(v3, v5, v4, v2);
}

uint64_t sub_19E327D64()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_19E327D88()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int *v5;
  _QWORD *v6;

  v2 = v0[2];
  v3 = v0[3];
  v5 = (int *)v0[4];
  v4 = v0[5];
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v6;
  *v6 = v1;
  v6[1] = sub_19E24C450;
  return sub_19E327268(v3, v5, v4, v2);
}

uint64_t sub_19E327DEC(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = sub_19E247E74(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_19E327E30(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_19E24C768;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_1EE502FB0 + dword_1EE502FB0))(a1, v4);
}

uint64_t sub_19E327EA0(uint64_t result)
{
  if (result)
    return swift_release();
  return result;
}

void sub_19E327EC0(uint64_t *a1@<X8>)
{
  void *v2;
  void *v3;
  uint64_t v4;

  v2 = (void *)sub_19E36F864();
  v3 = (void *)sub_19E36F864();
  v4 = IMGetCachedDomainIntForKeyWithDefaultValue();

  *a1 = v4;
}

void sub_19E327F30(double *a1@<X4>, double *a2@<X8>)
{
  *a2 = sub_19E3290EC(*a1);
}

void sub_19E327F58(_BYTE *a1@<X8>)
{
  void *v2;
  void *v3;
  char v4;

  v2 = (void *)sub_19E36F864();
  v3 = (void *)sub_19E36F864();
  v4 = IMGetCachedDomainBoolForKeyWithDefaultValue();

  *a1 = v4;
}

uint64_t sub_19E327FC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v6;
  void *v7;
  id v8;
  uint64_t v10;
  _OWORD v11[2];
  _BYTE v12[24];
  uint64_t v13;

  v6 = (void *)sub_19E36F864();
  v7 = (void *)sub_19E36F864();
  v8 = (id)IMGetCachedDomainValueForKey();

  if (v8)
  {
    sub_19E36FC0C();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v11, 0, sizeof(v11));
  }
  sub_19E32223C((uint64_t)v11, (uint64_t)v12);
  if (!v13)
  {
    sub_19E322284((uint64_t)v12);
    goto LABEL_8;
  }
  sub_19E36F9A8();
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_8:
    swift_bridgeObjectRetain();
    return a5;
  }
  return v10;
}

uint64_t sub_19E3280C4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X4>, uint64_t *a6@<X8>)
{
  uint64_t result;

  result = sub_19E327FC8(a1, a2, a3, a4, *a5);
  *a6 = result;
  return result;
}

uint64_t PrototypingSetting.DefaultsDomain.init(rawValue:)@<X0>(char *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;
  char v4;

  v2 = sub_19E36FD44();
  result = swift_bridgeObjectRelease();
  if (v2 == 1)
    v4 = 1;
  else
    v4 = 2;
  if (!v2)
    v4 = 0;
  *a1 = v4;
  return result;
}

unint64_t PrototypingSetting.DefaultsDomain.rawValue.getter()
{
  _BYTE *v0;

  if (*v0)
    return 0xD000000000000013;
  else
    return 0xD000000000000012;
}

uint64_t sub_19E328190(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x1A1AE8A18](&protocol conformance descriptor for PrototypingSetting<A>.DefaultsDomain, a3);
  return sub_19E36FE1C();
}

uint64_t sub_19E3281E4(uint64_t a1)
{
  MEMORY[0x1A1AE8A18](&protocol conformance descriptor for PrototypingSetting<A>.DefaultsDomain, a1);
  return sub_19E36F918();
}

uint64_t sub_19E328230()
{
  MEMORY[0x1A1AE8A18](&protocol conformance descriptor for PrototypingSetting<A>.DefaultsDomain);
  return sub_19E36F930();
}

uint64_t sub_19E328280()
{
  MEMORY[0x1A1AE8A18](&protocol conformance descriptor for PrototypingSetting<A>.DefaultsDomain);
  return sub_19E36F924();
}

uint64_t sub_19E3282D0@<X0>(char *a1@<X8>)
{
  return PrototypingSetting.DefaultsDomain.init(rawValue:)(a1);
}

unint64_t sub_19E3282DC@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result;
  unint64_t v3;

  result = PrototypingSetting.DefaultsDomain.rawValue.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t (*sub_19E328300@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X6>, uint64_t a6@<X8>))(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int *v22;
  void (*v23)(char *, uint64_t, uint64_t);
  uint64_t v24;
  uint64_t (*result)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t (**v26)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v27;

  v11 = *(_QWORD *)(a4 - 8);
  v12 = MEMORY[0x1E0C80A78](a1);
  v14 = (char *)&v27 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = MEMORY[0x1E0C80A78](v12);
  v17 = (char *)&v27 - v16;
  *(_BYTE *)a6 = *v18 & 1;
  *(_QWORD *)(a6 + 8) = v15;
  *(_QWORD *)(a6 + 16) = v19;
  v22 = (int *)type metadata accessor for PrototypingSetting(0, v21, (uint64_t)v18, v20);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 16))(a6 + v22[8], a2, a4);
  v23 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 32);
  v23(v14, a2, a4);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(a3, 1, a4) == 1)
  {
    v23(v17, (uint64_t)v14, a4);
    v24 = sub_19E36FBC4();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 8))(a3, v24);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v14, a4);
    v23(v17, a3, a4);
  }
  v23((char *)(a6 + v22[9]), (uint64_t)v17, a4);
  result = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))swift_allocObject();
  *((_QWORD *)result + 2) = a4;
  *((_QWORD *)result + 3) = a5;
  *((_QWORD *)result + 4) = a4;
  v26 = (uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a6 + v22[10]);
  *v26 = sub_19E329200;
  v26[1] = result;
  return result;
}

uint64_t PrototypingSetting.init<A>(_:domain:default:internalDefault:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X2>, char a4@<W3>, char a5@<W4>, uint64_t a6@<X8>)
{
  char v6;

  *(_BYTE *)a6 = *a3 & 1;
  if (a5 == 2)
    v6 = a4;
  else
    v6 = a5;
  *(_QWORD *)(a6 + 8) = result;
  *(_QWORD *)(a6 + 16) = a2;
  *(_BYTE *)(a6 + 24) = a4;
  *(_BYTE *)(a6 + 25) = v6 & 1;
  *(_QWORD *)(a6 + 32) = sub_19E327F58;
  *(_QWORD *)(a6 + 40) = 0;
  return result;
}

uint64_t PrototypingSetting.init<A>(_:domain:default:internalDefault:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, char a6@<W5>, uint64_t a7@<X8>)
{
  *(_BYTE *)a7 = *a3 & 1;
  if ((a6 & 1) != 0)
    a5 = a4;
  *(_QWORD *)(a7 + 8) = result;
  *(_QWORD *)(a7 + 16) = a2;
  *(_QWORD *)(a7 + 24) = a4;
  *(_QWORD *)(a7 + 32) = a5;
  *(_QWORD *)(a7 + 40) = sub_19E327EC0;
  *(_QWORD *)(a7 + 48) = 0;
  return result;
}

uint64_t PrototypingSetting.init<A>(_:domain:default:internalDefault:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X2>, double a4@<X3>, char a5@<W4>, uint64_t a6@<X8>, double a7@<D0>)
{
  *(_BYTE *)a6 = *a3 & 1;
  if ((a5 & 1) != 0)
    a4 = a7;
  *(_QWORD *)(a6 + 8) = result;
  *(_QWORD *)(a6 + 16) = a2;
  *(double *)(a6 + 24) = a7;
  *(double *)(a6 + 32) = a4;
  *(_QWORD *)(a6 + 40) = sub_19E327F30;
  *(_QWORD *)(a6 + 48) = 0;
  return result;
}

__n128 PrototypingSetting.init<A>(_:domain:default:internalDefault:)@<Q0>(uint64_t a1@<X0>, char *a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __n128 result;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  _BYTE v15[8];
  uint64_t v16;
  __n128 v17;
  __int128 v18;
  uint64_t v19;

  v14 = *a2;
  v12 = a4;
  v13 = a3;
  v7 = sub_19E36F9A8();
  sub_19E328300(a1, (uint64_t)&v13, (uint64_t)&v12, v7, (uint64_t)&off_1E3FB2248, (uint64_t)v15);
  v8 = v16;
  v9 = v19;
  result = v17;
  v11 = v18;
  *(_BYTE *)a5 = v15[0];
  *(_QWORD *)(a5 + 8) = v8;
  *(__n128 *)(a5 + 16) = result;
  *(_OWORD *)(a5 + 32) = v11;
  *(_QWORD *)(a5 + 48) = v9;
  return result;
}

id PrototypingSetting.wrappedValue.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  id result;
  void *v6;
  unsigned int v7;
  uint64_t v8;
  void (**v9)(unint64_t, unint64_t, _QWORD, _QWORD, uint64_t);
  unint64_t v10;
  unint64_t v11;

  result = objc_msgSend((id)objc_opt_self(), sel_sharedInstance);
  if (result)
  {
    v6 = result;
    v7 = objc_msgSend(result, sel_isInternalInstall);

    if (v7)
    {
      v8 = *(int *)(a1 + 36);
      v9 = (void (**)(unint64_t, unint64_t, _QWORD, _QWORD, uint64_t))(v2 + *(int *)(a1 + 40));
      if (*(_BYTE *)v2)
        v10 = 0xD000000000000013;
      else
        v10 = 0xD000000000000012;
      if (*(_BYTE *)v2)
        v11 = 0x800000019E39BF40;
      else
        v11 = 0x800000019E39BF20;
      (*v9)(v10, v11, *(_QWORD *)(v2 + 8), *(_QWORD *)(v2 + 16), v2 + v8);
      return (id)swift_bridgeObjectRelease();
    }
    else
    {
      return (id)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 16))(a2, v2 + *(int *)(a1 + 32));
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t type metadata accessor for PrototypingSetting.DefaultsDomain(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_19E329228(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for PrototypingSetting.DefaultsDomain);
}

void sub_19E3286D4()
{
  JUMPOUT(0x1A1AE8A18);
}

uint64_t sub_19E3286E4()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t sub_19E3286EC()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

_QWORD *sub_19E32877C(unint64_t a1, unint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  void (*v17)(unint64_t, unint64_t, uint64_t);
  unint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;

  v3 = (_QWORD *)a1;
  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  v7 = *(_QWORD *)(v5 + 64);
  v8 = v7 + v6;
  v9 = v7 + 7;
  if (v6 > 7
    || (*(_DWORD *)(v5 + 80) & 0x100000) != 0
    || ((v7 + 7 + ((v7 + v6 + ((v6 + 24) & ~v6)) & ~v6)) & 0xFFFFFFFFFFFFFFF8) + 16 > 0x18)
  {
    v12 = *(_QWORD *)a2;
    *v3 = *(_QWORD *)a2;
    v3 = (_QWORD *)(v12 + ((v6 & 0xF8 ^ 0x1F8) & (v6 + 16)));
  }
  else
  {
    v13 = ~v6;
    *(_BYTE *)a1 = *(_BYTE *)a2;
    v14 = a1 & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)(v14 + 8) = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 8);
    *(_QWORD *)(v14 + 16) = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 16);
    v15 = ((a1 & 0xFFFFFFFFFFFFFFF8) + v6 + 24) & ~v6;
    v16 = ((a2 & 0xFFFFFFFFFFFFFFF8) + v6 + 24) & ~v6;
    v17 = *(void (**)(unint64_t, unint64_t, uint64_t))(v5 + 16);
    swift_bridgeObjectRetain();
    v17(v15, v16, v4);
    v18 = (v8 + v15) & v13;
    v19 = (v8 + v16) & v13;
    v17(v18, v19, v4);
    v20 = (_QWORD *)((v9 + v19) & 0xFFFFFFFFFFFFFFF8);
    v21 = v20[1];
    v22 = (_QWORD *)((v9 + v18) & 0xFFFFFFFFFFFFFFF8);
    *v22 = *v20;
    v22[1] = v21;
  }
  swift_retain();
  return v3;
}

uint64_t sub_19E3288B0(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t);

  v3 = a1 & 0xFFFFFFFFFFFFFFF8;
  swift_bridgeObjectRelease();
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = (v3 + v6 + 24) & ~v6;
  v8 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
  v8(v7, v4);
  v8((*(_QWORD *)(v5 + 64) + v6 + v7) & ~v6, v4);
  return swift_release();
}

unint64_t sub_19E32893C(unint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  void (*v10)(unint64_t, unint64_t, uint64_t);
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = a1 & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)(v4 + 8) = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 8);
  *(_QWORD *)(v4 + 16) = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 16);
  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = (v7 + 24 + (a1 & 0xFFFFFFFFFFFFFFF8)) & ~v7;
  v9 = (v7 + 24 + (a2 & 0xFFFFFFFFFFFFFFF8)) & ~v7;
  v10 = *(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 16);
  swift_bridgeObjectRetain();
  v10(v8, v9, v5);
  v11 = *(_QWORD *)(v6 + 64);
  v12 = (v11 + v7 + v8) & ~v7;
  v13 = (v11 + v7 + v9) & ~v7;
  v10(v12, v13, v5);
  v14 = (uint64_t *)((v11 + 7 + v13) & 0xFFFFFFFFFFFFFFF8);
  v16 = *v14;
  v15 = v14[1];
  v17 = (_QWORD *)((v11 + 7 + v12) & 0xFFFFFFFFFFFFFFF8);
  *v17 = v16;
  v17[1] = v15;
  swift_retain();
  return a1;
}

unint64_t sub_19E328A14(unint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v5 = a1 & 0xFFFFFFFFFFFFFFF8;
  v6 = a2 & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)(v5 + 8) = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 8);
  *(_QWORD *)(v5 + 16) = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v7 = *(_QWORD *)(a3 + 16);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = (v9 + 24 + v5) & ~v9;
  v11 = (v9 + 24 + v6) & ~v9;
  v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 24);
  v12(v10, v11, v7);
  v13 = *(_QWORD *)(v8 + 64);
  v14 = (v13 + v9 + v10) & ~v9;
  v15 = (v13 + v9 + v11) & ~v9;
  v12(v14, v15, v7);
  v16 = (_QWORD *)((v13 + 7 + v14) & 0xFFFFFFFFFFFFFFF8);
  v17 = (_QWORD *)((v13 + 7 + v15) & 0xFFFFFFFFFFFFFFF8);
  v18 = v17[1];
  *v16 = *v17;
  v16[1] = v18;
  swift_retain();
  swift_release();
  return a1;
}

unint64_t sub_19E328B08(unint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  void (*v9)(unint64_t, unint64_t, uint64_t);
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_OWORD *)((a1 & 0xFFFFFFFFFFFFFFF8) + 8) = *(_OWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 8);
  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = (v6 + 24 + (a1 & 0xFFFFFFFFFFFFFFF8)) & ~v6;
  v8 = (v6 + 24 + (a2 & 0xFFFFFFFFFFFFFFF8)) & ~v6;
  v9 = *(void (**)(unint64_t, unint64_t, uint64_t))(v5 + 32);
  v9(v7, v8, v4);
  v10 = *(_QWORD *)(v5 + 64);
  v11 = (v10 + v6 + v7) & ~v6;
  v12 = (v10 + v6 + v8) & ~v6;
  v9(v11, v12, v4);
  *(_OWORD *)((v10 + 7 + v11) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)((v10 + 7 + v12) & 0xFFFFFFFFFFFFF8);
  return a1;
}

unint64_t sub_19E328BD0(unint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v5 = a1 & 0xFFFFFFFFFFFFFFF8;
  v6 = a2 & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)(v5 + 8) = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 8);
  *(_QWORD *)(v5 + 16) = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 16);
  swift_bridgeObjectRelease();
  v7 = *(_QWORD *)(a3 + 16);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = (v9 + 24 + v5) & ~v9;
  v11 = (v9 + 24 + v6) & ~v9;
  v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 40);
  v12(v10, v11, v7);
  v13 = *(_QWORD *)(v8 + 64);
  v14 = (v13 + v9 + v10) & ~v9;
  v15 = (v13 + v9 + v11) & ~v9;
  v12(v14, v15, v7);
  *(_OWORD *)((v13 + 7 + v14) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)((v13 + 7 + v15) & 0xFFFFFFFFFFFFF8);
  swift_release();
  return a1;
}

uint64_t sub_19E328CB4(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v12;
  unint64_t v13;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(unsigned __int8 *)(v4 + 80);
  if (v6 >= a2)
  {
    v12 = a1 & 0xFFFFFFFFFFFFFFF8;
    if ((v5 & 0x80000000) != 0)
    {
      return (*(uint64_t (**)(unint64_t))(v4 + 48))((v12 + v7 + 24) & ~v7);
    }
    else
    {
      v13 = *(_QWORD *)(v12 + 16);
      if (v13 >= 0xFFFFFFFF)
        LODWORD(v13) = -1;
      return (v13 + 1);
    }
  }
  else
  {
    if (((((*(_QWORD *)(v4 + 64) + ((*(_QWORD *)(v4 + 64) + v7 + ((v7 + 24) & ~v7)) & ~v7) + 7) & 0xFFFFFFFFFFFFFFF8)
         + 16) & 0xFFFFFFF8) != 0)
      v8 = 2;
    else
      v8 = a2 - v6 + 1;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    return ((uint64_t (*)(void))((char *)&loc_19E328D4C + 4 * byte_19E381BE0[v10]))();
  }
}

void sub_19E328DD0(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  int v9;
  unsigned int v10;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  if (v6 >= a3)
  {
    v9 = 0u;
    if (a2 <= v6)
      goto LABEL_17;
  }
  else
  {
    if (((*(_DWORD *)(v5 + 64)
         + ((*(_DWORD *)(v5 + 64)
           + *(unsigned __int8 *)(v5 + 80)
           + ((*(unsigned __int8 *)(v5 + 80) + 24) & ~*(unsigned __int8 *)(v5 + 80))) & ~*(unsigned __int8 *)(v5 + 80))
         + 7) & 0xFFFFFFF8) == 0xFFFFFFF0)
      v7 = a3 - v6 + 1;
    else
      v7 = 2;
    if (v7 >= 0x10000)
      v8 = 4;
    else
      v8 = 2;
    if (v7 < 0x100)
      v8 = 1;
    if (v7 >= 2)
      v9 = v8;
    else
      v9 = 0;
    if (a2 <= v6)
LABEL_17:
      __asm { BR              X13 }
  }
  if (((*(_DWORD *)(v5 + 64)
       + ((*(_DWORD *)(v5 + 64)
         + *(unsigned __int8 *)(v5 + 80)
         + ((*(unsigned __int8 *)(v5 + 80) + 24) & ~*(unsigned __int8 *)(v5 + 80))) & ~*(unsigned __int8 *)(v5 + 80))
       + 7) & 0xFFFFFFF8) != 0xFFFFFFF0)
  {
    v10 = ~v6 + a2;
    bzero(a1, ((*(_QWORD *)(v5 + 64)+ ((*(_QWORD *)(v5 + 64)+ *(unsigned __int8 *)(v5 + 80)+ ((*(unsigned __int8 *)(v5 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))+ 7) & 0xFFFFFFFFFFFFFFF8)+ 16);
    *a1 = v10;
  }
  __asm { BR              X10 }
}

void sub_19E328EE4()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x19E328F54);
}

void sub_19E328EEC(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x19E328EF4);
  JUMPOUT(0x19E328F54);
}

void sub_19E328F0C()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x19E328F54);
}

void sub_19E328F14()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x19E328F54);
}

void sub_19E328F1C(uint64_t a1, int a2, int a3)
{
  uint64_t v3;
  uint64_t v4;

  *(_WORD *)(v3 + v4) = 0;
  if (a2)
  {
    if (a3 < 0)
      JUMPOUT(0x19E328F28);
    if (a2 < 0)
      JUMPOUT(0x19E328F4CLL);
    *(_QWORD *)((v3 & 0xFFFFFFFFFFFFFFF8) + 16) = (a2 - 1);
  }
  JUMPOUT(0x19E328F54);
}

uint64_t type metadata accessor for PrototypingSetting(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_19E329228(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for PrototypingSetting);
}

uint64_t sub_19E328F78()
{
  return swift_allocateGenericValueMetadata();
}

_BYTE *initializeBufferWithCopyOfBuffer for TapToRadarDraft.Classification(_BYTE *result, _BYTE *a2)
{
  *result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for MessagesTipEvents(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_17;
  if (a2 + 1 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 1;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 1;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 1;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 2;
  v8 = v6 - 2;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t sub_19E32901C(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_19E329068 + 4 * byte_19E381BF4[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_19E32909C + 4 * byte_19E381BEF[v4]))();
}

uint64_t sub_19E32909C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_19E3290A4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x19E3290ACLL);
  return result;
}

uint64_t sub_19E3290B8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x19E3290C0);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_19E3290C4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_19E3290CC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_19E3290D8(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *sub_19E3290E0(_BYTE *result, char a2)
{
  *result = a2 & 1;
  return result;
}

double sub_19E3290EC(double a1)
{
  void *v2;
  void *v3;
  id v4;
  double v5;
  id v7;
  _OWORD v8[2];
  _BYTE v9[24];
  uint64_t v10;

  v2 = (void *)sub_19E36F864();
  v3 = (void *)sub_19E36F864();
  v4 = (id)IMGetCachedDomainValueForKey();

  if (v4)
  {
    sub_19E36FC0C();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v8, 0, sizeof(v8));
  }
  sub_19E32223C((uint64_t)v8, (uint64_t)v9);
  if (v10)
  {
    sub_19E324FB4();
    if ((swift_dynamicCast() & 1) != 0)
    {
      objc_msgSend(v7, sel_doubleValue);
      a1 = v5;

    }
  }
  else
  {
    sub_19E322284((uint64_t)v9);
  }
  return a1;
}

uint64_t sub_19E3291F0()
{
  return swift_deallocObject();
}

uint64_t sub_19E329200(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v5 + 24) + 8))(a1, a2, a3, a4, a5, *(_QWORD *)(v5 + 16));
}

uint64_t sub_19E329228(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD v6[3];

  v6[0] = a2;
  v6[1] = a3;
  v6[2] = a4;
  return MEMORY[0x1A1AE89B8](a1, v6, a5);
}

void __swiftcall IMChipAction.init(dictionary:)(IMChipAction_optional *__return_ptr retstr, Swift::OpaquePointer dictionary)
{
  id v2;
  void *v3;

  v2 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  v3 = (void *)sub_19E36F81C();
  swift_bridgeObjectRelease();
  objc_msgSend(v2, sel_initWithDictionary_, v3);

}

id IMChipAction.init(dictionary:)(uint64_t a1)
{
  void *v1;
  void *v2;
  unint64_t v4;
  char v5;
  id v6;
  void *v7;
  id v8;
  unint64_t v9;
  char v10;
  unint64_t v11;
  char v12;
  id v13;
  void *v15;
  id v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;

  v2 = v1;
  if (*(_QWORD *)(a1 + 16))
  {
    v4 = sub_19E3247E4(0x6974736567677573, 0xEA00000000006E6FLL);
    if ((v5 & 1) != 0)
    {
      sub_19E324848(*(_QWORD *)(a1 + 56) + 32 * v4, (uint64_t)&v18);
      sub_19E247E74(&qword_1EE503490);
      if ((swift_dynamicCast() & 1) != 0)
      {
        v6 = objc_allocWithZone((Class)IMChipSuggestion);
        v7 = (void *)sub_19E36F81C();
        swift_bridgeObjectRelease();
        v8 = objc_msgSend(v6, sel_initWithDictionary_, v7);

        if (v8)
        {
          if (*(_QWORD *)(a1 + 16))
          {
            v9 = sub_19E3247E4(1701869940, 0xE400000000000000);
            if ((v10 & 1) != 0)
            {
              sub_19E324848(*(_QWORD *)(a1 + 56) + 32 * v9, (uint64_t)&v18);
              if ((swift_dynamicCast() & 1) != 0)
              {
                if (*(_QWORD *)(a1 + 16)
                  && (v11 = sub_19E3247E4(0x6E6F69746361, 0xE600000000000000), (v12 & 1) != 0))
                {
                  sub_19E324848(*(_QWORD *)(a1 + 56) + 32 * v11, (uint64_t)&v18);
                }
                else
                {
                  v18 = 0u;
                  v19 = 0u;
                }
                swift_bridgeObjectRelease();
                if (*((_QWORD *)&v19 + 1))
                {
                  if ((swift_dynamicCast() & 1) != 0)
                  {
                    v15 = (void *)sub_19E36F81C();
                    swift_bridgeObjectRelease();
LABEL_20:
                    v16 = objc_msgSend((id)objc_opt_self(), sel_actionWithType_dictionary_, v17, v15);

                    v13 = objc_msgSend(v2, sel_initWithSuggestion_type_action_, v8, v17, v16);
                    swift_unknownObjectRelease();

                    return v13;
                  }
                }
                else
                {
                  sub_19E322284((uint64_t)&v18);
                }
                v15 = 0;
                goto LABEL_20;
              }
            }
          }

        }
      }
    }
  }
  swift_bridgeObjectRelease();
  swift_getObjectType();
  swift_deallocPartialClassInstance();
  return 0;
}

uint64_t sub_19E329668()
{
  void *v0;
  uint64_t inited;
  id v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  id v10;
  unint64_t v11;
  uint64_t v12;

  sub_19E247E74((uint64_t *)&unk_1EE5019F8);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_19E381BB0;
  *(_QWORD *)(inited + 32) = 0x6974736567677573;
  *(_QWORD *)(inited + 40) = 0xEA00000000006E6FLL;
  v2 = objc_msgSend(v0, sel_suggestion);
  v3 = objc_msgSend(v2, sel_dictionaryRepresentation);

  v4 = sub_19E36F828();
  v5 = sub_19E247E74(&qword_1EE503490);
  *(_QWORD *)(inited + 48) = v4;
  *(_QWORD *)(inited + 72) = v5;
  *(_QWORD *)(inited + 80) = 1701869940;
  *(_QWORD *)(inited + 88) = 0xE400000000000000;
  v6 = objc_msgSend(v0, sel_type);
  v7 = MEMORY[0x1E0DEB418];
  *(_QWORD *)(inited + 96) = v6;
  *(_QWORD *)(inited + 120) = v7;
  *(_QWORD *)(inited + 128) = 0x6E6F69746361;
  *(_QWORD *)(inited + 136) = 0xE600000000000000;
  v8 = objc_msgSend(v0, sel_action);
  v9 = (uint64_t)v8;
  if (v8)
  {
    v10 = objc_msgSend(v8, sel_dictionaryRepresentation);
    swift_unknownObjectRelease();
    v9 = sub_19E36F828();

  }
  else
  {
    v5 = 0;
    *(_QWORD *)(inited + 152) = 0;
    *(_QWORD *)(inited + 160) = 0;
  }
  *(_QWORD *)(inited + 144) = v9;
  *(_QWORD *)(inited + 168) = v5;
  v11 = sub_19E32D998(inited);
  v12 = sub_19E35FE5C(v11);
  swift_bridgeObjectRelease();
  return v12;
}

id sub_19E329910()
{
  void *v0;
  uint64_t inited;
  __CFString *v2;
  id v3;
  uint64_t v4;
  unint64_t v5;
  id v6;
  void *v7;
  void *v8;
  id v9;

  sub_19E247E74((uint64_t *)&unk_1EE501B30);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_19E381BA0;
  *(_QWORD *)(inited + 32) = CFSTR("__kIMSuggestedActionAttributeName");
  v2 = CFSTR("__kIMSuggestedActionAttributeName");
  v3 = objc_msgSend(v0, sel_dictionaryRepresentation);
  v4 = sub_19E36F828();

  *(_QWORD *)(inited + 40) = v4;
  v5 = sub_19E32DACC(inited);
  sub_19E36F888();
  sub_19E365710(v5);
  swift_bridgeObjectRelease();
  v6 = objc_allocWithZone(MEMORY[0x1E0CB3498]);
  v7 = (void *)sub_19E36F864();
  swift_bridgeObjectRelease();
  type metadata accessor for Key(0);
  sub_19E329BA8();
  v8 = (void *)sub_19E36F81C();
  swift_bridgeObjectRelease();
  v9 = objc_msgSend(v6, sel_initWithString_attributes_, v7, v8);

  return v9;
}

void __swiftcall IMChipAction.init()(IMChipAction *__return_ptr retstr)
{
  objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_init);
}

void IMChipAction.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

unint64_t type metadata accessor for IMChipAction()
{
  unint64_t result;

  result = qword_1EE501B28;
  if (!qword_1EE501B28)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1EE501B28);
  }
  return result;
}

unint64_t sub_19E329BA8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EE501630;
  if (!qword_1EE501630)
  {
    type metadata accessor for Key(255);
    result = MEMORY[0x1A1AE8A18](&unk_19E381A28, v1);
    atomic_store(result, (unint64_t *)&qword_1EE501630);
  }
  return result;
}

id sub_19E329BF0(uint64_t a1, void *a2)
{
  id v2;
  __objc2_class *v3;
  id v4;
  void *v5;

  v2 = a2;
  if (a2)
  {
    switch(a1)
    {
      case 0:
        v3 = IMActionOpenWeb;
        goto LABEL_17;
      case 1:
        v3 = IMActionOpenApp;
        goto LABEL_17;
      case 2:
        v3 = IMActionComposeText;
        goto LABEL_17;
      case 3:
        v3 = IMActionComposeAudio;
        goto LABEL_17;
      case 4:
        v3 = IMActionComposeVideo;
        goto LABEL_17;
      case 5:
        v3 = IMActionShowLocation;
        goto LABEL_17;
      case 6:
        v3 = IMActionRequestLocation;
        goto LABEL_17;
      case 7:
        v3 = IMActionCalendar;
        goto LABEL_17;
      case 8:
        v3 = IMActionDialVideo;
        goto LABEL_17;
      case 9:
        v3 = IMActionDialEnriched;
        goto LABEL_17;
      case 10:
        v3 = IMActionDialPhone;
        goto LABEL_17;
      case 11:
        v3 = IMActionDevice;
        goto LABEL_17;
      case 12:
        v3 = IMActionSettings;
LABEL_17:
        v4 = objc_allocWithZone((Class)v3);
        swift_bridgeObjectRetain();
        v5 = (void *)sub_19E36F81C();
        swift_bridgeObjectRelease();
        v2 = objc_msgSend(v4, sel_initWithDictionary_, v5);

        break;
      default:
        v2 = 0;
        break;
    }
  }
  return v2;
}

uint64_t static NSXPCInterface.prewarmMessagesInterfaces()()
{
  uint64_t result;

  if (qword_1ECFC6A60 != -1)
    result = swift_once();
  if (qword_1ECFC6AC8 != -1)
    return swift_once();
  return result;
}

id sub_19E329DD0(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  void *v3;

  if (*(_QWORD *)(a1 + *a3 + 8))
  {
    swift_bridgeObjectRetain();
    v3 = (void *)sub_19E36F864();
    swift_bridgeObjectRelease();
  }
  else
  {
    v3 = 0;
  }
  return v3;
}

void __swiftcall IMActionCalendar.init(dictionary:)(IMActionCalendar_optional *__return_ptr retstr, Swift::OpaquePointer dictionary)
{
  id v2;
  void *v3;

  v2 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  v3 = (void *)sub_19E36F81C();
  swift_bridgeObjectRelease();
  objc_msgSend(v2, sel_initWithDictionary_, v3);

}

id IMActionCalendar.init(dictionary:)(uint64_t a1)
{
  void *v1;
  void *v2;
  unint64_t v4;
  char v5;
  unint64_t v6;
  char v7;
  unint64_t v8;
  char v9;
  void *v10;
  void *v11;
  void *v12;
  unint64_t v13;
  char v14;
  void *v15;
  id v16;
  unint64_t v18;
  char v19;
  void *v20;
  __int128 v21;
  __int128 v22;

  v2 = v1;
  if (!*(_QWORD *)(a1 + 16))
    goto LABEL_17;
  v4 = sub_19E3247E4(0x6D69547472617473, 0xE900000000000065);
  if ((v5 & 1) == 0)
    goto LABEL_17;
  sub_19E324848(*(_QWORD *)(a1 + 56) + 32 * v4, (uint64_t)&v21);
  if ((swift_dynamicCast() & 1) == 0)
    goto LABEL_17;
  if (!*(_QWORD *)(a1 + 16))
    goto LABEL_16;
  v6 = sub_19E3247E4(0x656D6954646E65, 0xE700000000000000);
  if ((v7 & 1) == 0)
    goto LABEL_16;
  sub_19E324848(*(_QWORD *)(a1 + 56) + 32 * v6, (uint64_t)&v21);
  if ((swift_dynamicCast() & 1) == 0)
    goto LABEL_16;
  if (*(_QWORD *)(a1 + 16))
  {
    v8 = sub_19E3247E4(0x656C746974, 0xE500000000000000);
    if ((v9 & 1) != 0)
    {
      sub_19E324848(*(_QWORD *)(a1 + 56) + 32 * v8, (uint64_t)&v21);
      if ((swift_dynamicCast() & 1) != 0)
      {
        v10 = (void *)sub_19E36F864();
        swift_bridgeObjectRelease();
        v11 = (void *)sub_19E36F864();
        swift_bridgeObjectRelease();
        v12 = (void *)sub_19E36F864();
        swift_bridgeObjectRelease();
        if (*(_QWORD *)(a1 + 16)
          && (v13 = sub_19E3247E4(0x72637365446C6163, 0xEE006E6F69747069), (v14 & 1) != 0)
          && (sub_19E324848(*(_QWORD *)(a1 + 56) + 32 * v13, (uint64_t)&v21), (swift_dynamicCast() & 1) != 0))
        {
          v15 = (void *)sub_19E36F864();
          swift_bridgeObjectRelease();
        }
        else
        {
          v15 = 0;
        }
        if (*(_QWORD *)(a1 + 16) && (v18 = sub_19E3247E4(0x6B6361626C6C6166, 0xEB000000006C7255), (v19 & 1) != 0))
        {
          sub_19E324848(*(_QWORD *)(a1 + 56) + 32 * v18, (uint64_t)&v21);
        }
        else
        {
          v21 = 0u;
          v22 = 0u;
        }
        swift_bridgeObjectRelease();
        if (*((_QWORD *)&v22 + 1))
        {
          if ((swift_dynamicCast() & 1) != 0)
          {
            v20 = (void *)sub_19E36F864();
            swift_bridgeObjectRelease();
LABEL_29:
            v16 = objc_msgSend(v2, sel_initWithStartTime_endTime_title_calDescription_fallbackUrl_, v10, v11, v12, v15, v20);

            return v16;
          }
        }
        else
        {
          sub_19E322284((uint64_t)&v21);
        }
        v20 = 0;
        goto LABEL_29;
      }
      swift_bridgeObjectRelease();
LABEL_16:
      swift_bridgeObjectRelease();
      goto LABEL_17;
    }
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_17:
  swift_bridgeObjectRelease();
  swift_getObjectType();
  swift_deallocPartialClassInstance();
  return 0;
}

uint64_t sub_19E32A374()
{
  void *v0;
  uint64_t inited;
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;

  sub_19E247E74((uint64_t *)&unk_1EE5019F8);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_19E381D90;
  *(_QWORD *)(inited + 32) = 0x6D69547472617473;
  *(_QWORD *)(inited + 40) = 0xE900000000000065;
  v2 = objc_msgSend(v0, sel_startTime);
  v3 = sub_19E36F888();
  v5 = v4;

  v6 = MEMORY[0x1E0DEA968];
  *(_QWORD *)(inited + 48) = v3;
  *(_QWORD *)(inited + 56) = v5;
  *(_QWORD *)(inited + 72) = v6;
  *(_QWORD *)(inited + 80) = 0x656D6954646E65;
  *(_QWORD *)(inited + 88) = 0xE700000000000000;
  v7 = objc_msgSend(v0, sel_endTime);
  v8 = sub_19E36F888();
  v10 = v9;

  *(_QWORD *)(inited + 96) = v8;
  *(_QWORD *)(inited + 104) = v10;
  *(_QWORD *)(inited + 120) = v6;
  *(_QWORD *)(inited + 128) = 0x656C746974;
  *(_QWORD *)(inited + 136) = 0xE500000000000000;
  v11 = objc_msgSend(v0, sel_title);
  v12 = sub_19E36F888();
  v14 = v13;

  *(_QWORD *)(inited + 144) = v12;
  *(_QWORD *)(inited + 152) = v14;
  *(_QWORD *)(inited + 168) = v6;
  strcpy((char *)(inited + 176), "calDescription");
  *(_BYTE *)(inited + 191) = -18;
  v15 = objc_msgSend(v0, sel_calDescription);
  if (v15)
  {
    v16 = v15;
    v17 = sub_19E36F888();
    v19 = v18;

    v20 = MEMORY[0x1E0DEA968];
  }
  else
  {
    v17 = 0;
    v19 = 0;
    v20 = 0;
    *(_QWORD *)(inited + 208) = 0;
  }
  *(_QWORD *)(inited + 192) = v17;
  *(_QWORD *)(inited + 200) = v19;
  *(_QWORD *)(inited + 216) = v20;
  *(_QWORD *)(inited + 224) = 0x6B6361626C6C6166;
  *(_QWORD *)(inited + 232) = 0xEB000000006C7255;
  v21 = objc_msgSend(v0, sel_fallbackUrl);
  if (v21)
  {
    v22 = v21;
    v23 = sub_19E36F888();
    v25 = v24;

    v26 = MEMORY[0x1E0DEA968];
  }
  else
  {
    v23 = 0;
    v25 = 0;
    v26 = 0;
    *(_QWORD *)(inited + 256) = 0;
  }
  *(_QWORD *)(inited + 240) = v23;
  *(_QWORD *)(inited + 248) = v25;
  *(_QWORD *)(inited + 264) = v26;
  v27 = sub_19E32D998(inited);
  v28 = sub_19E35FE5C(v27);
  swift_bridgeObjectRelease();
  return v28;
}

void __swiftcall IMActionCalendar.init()(IMActionCalendar *__return_ptr retstr)
{
  objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_init);
}

void IMActionCalendar.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

unint64_t type metadata accessor for IMActionCalendar()
{
  unint64_t result;

  result = qword_1EE5029C0;
  if (!qword_1EE5029C0)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1EE5029C0);
  }
  return result;
}

void __swiftcall IMActionDialVideo.init(dictionary:)(IMActionDialVideo_optional *__return_ptr retstr, Swift::OpaquePointer dictionary)
{
  id v2;
  void *v3;

  v2 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  v3 = (void *)sub_19E36F81C();
  swift_bridgeObjectRelease();
  objc_msgSend(v2, sel_initWithDictionary_, v3);

}

id IMActionDialVideo.init(dictionary:)(uint64_t a1)
{
  void *v1;
  void *v2;
  unint64_t v4;
  char v5;
  void *v6;
  unint64_t v7;
  char v8;
  id v9;
  void *v11;
  __int128 v12;
  __int128 v13;

  v2 = v1;
  if (*(_QWORD *)(a1 + 16))
  {
    v4 = sub_19E3247E4(0x6D754E656E6F6870, 0xEB00000000726562);
    if ((v5 & 1) != 0)
    {
      sub_19E324848(*(_QWORD *)(a1 + 56) + 32 * v4, (uint64_t)&v12);
      if ((swift_dynamicCast() & 1) != 0)
      {
        v6 = (void *)sub_19E36F864();
        swift_bridgeObjectRelease();
        if (*(_QWORD *)(a1 + 16) && (v7 = sub_19E3247E4(0x6B6361626C6C6166, 0xEB000000006C7255), (v8 & 1) != 0))
        {
          sub_19E324848(*(_QWORD *)(a1 + 56) + 32 * v7, (uint64_t)&v12);
        }
        else
        {
          v12 = 0u;
          v13 = 0u;
        }
        swift_bridgeObjectRelease();
        if (*((_QWORD *)&v13 + 1))
        {
          if ((swift_dynamicCast() & 1) != 0)
          {
            v11 = (void *)sub_19E36F864();
            swift_bridgeObjectRelease();
LABEL_15:
            v9 = objc_msgSend(v2, sel_initWithPhoneNumber_fallbackUrl_, v6, v11);

            return v9;
          }
        }
        else
        {
          sub_19E322284((uint64_t)&v12);
        }
        v11 = 0;
        goto LABEL_15;
      }
    }
  }
  swift_bridgeObjectRelease();
  swift_getObjectType();
  swift_deallocPartialClassInstance();
  return 0;
}

uint64_t sub_19E32AB10()
{
  void *v0;
  uint64_t inited;
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;

  sub_19E247E74((uint64_t *)&unk_1EE5019F8);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_19E381B30;
  *(_QWORD *)(inited + 32) = 0x6D754E656E6F6870;
  *(_QWORD *)(inited + 40) = 0xEB00000000726562;
  v2 = objc_msgSend(v0, sel_phoneNumber);
  v3 = sub_19E36F888();
  v5 = v4;

  v6 = MEMORY[0x1E0DEA968];
  *(_QWORD *)(inited + 48) = v3;
  *(_QWORD *)(inited + 56) = v5;
  *(_QWORD *)(inited + 72) = v6;
  *(_QWORD *)(inited + 80) = 0x6B6361626C6C6166;
  *(_QWORD *)(inited + 88) = 0xEB000000006C7255;
  v7 = objc_msgSend(v0, sel_fallbackUrl);
  if (v7)
  {
    v8 = v7;
    v9 = sub_19E36F888();
    v11 = v10;

    v12 = MEMORY[0x1E0DEA968];
  }
  else
  {
    v9 = 0;
    v11 = 0;
    v12 = 0;
    *(_QWORD *)(inited + 112) = 0;
  }
  *(_QWORD *)(inited + 96) = v9;
  *(_QWORD *)(inited + 104) = v11;
  *(_QWORD *)(inited + 120) = v12;
  v13 = sub_19E32D998(inited);
  v14 = sub_19E35FE5C(v13);
  swift_bridgeObjectRelease();
  return v14;
}

void __swiftcall IMActionDialVideo.init()(IMActionDialVideo *__return_ptr retstr)
{
  objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_init);
}

void IMActionDialVideo.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

unint64_t type metadata accessor for IMActionDialVideo()
{
  unint64_t result;

  result = qword_1EE5029E0;
  if (!qword_1EE5029E0)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1EE5029E0);
  }
  return result;
}

void __swiftcall IMActionShowLocation.init(dictionary:)(IMActionShowLocation_optional *__return_ptr retstr, Swift::OpaquePointer dictionary)
{
  id v2;
  void *v3;

  v2 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  v3 = (void *)sub_19E36F81C();
  swift_bridgeObjectRelease();
  objc_msgSend(v2, sel_initWithDictionary_, v3);

}

id IMActionShowLocation.init(dictionary:)(uint64_t a1)
{
  void *v1;
  void *v2;
  unint64_t v4;
  char v5;
  void *v6;
  unint64_t v7;
  char v8;
  void *v9;
  void *v10;
  unint64_t v11;
  char v12;
  void *v13;
  unint64_t v14;
  char v15;
  unint64_t v16;
  char v17;
  void *v18;
  id v19;
  void *v21;
  __int128 v22;
  __int128 v23;

  v2 = v1;
  if (!*(_QWORD *)(a1 + 16))
  {
    v6 = 0;
    goto LABEL_16;
  }
  v4 = sub_19E3247E4(0x656475746974616CLL, 0xE800000000000000);
  if ((v5 & 1) == 0)
  {
    v6 = 0;
    if (*(_QWORD *)(a1 + 16))
      goto LABEL_10;
LABEL_16:
    v9 = 0;
    goto LABEL_17;
  }
  sub_19E324848(*(_QWORD *)(a1 + 56) + 32 * v4, (uint64_t)&v22);
  sub_19E24B854(0, (unint64_t *)&qword_1ECFC6A00);
  if (swift_dynamicCast())
    v6 = v21;
  else
    v6 = 0;
  if (!*(_QWORD *)(a1 + 16))
    goto LABEL_16;
LABEL_10:
  v7 = sub_19E3247E4(0x64757469676E6F6CLL, 0xE900000000000065);
  if ((v8 & 1) != 0)
  {
    sub_19E324848(*(_QWORD *)(a1 + 56) + 32 * v7, (uint64_t)&v22);
    sub_19E24B854(0, (unint64_t *)&qword_1ECFC6A00);
    if (swift_dynamicCast())
      v9 = v21;
    else
      v9 = 0;
    if (!*(_QWORD *)(a1 + 16))
    {
LABEL_17:
      v10 = 0;
      if (!*(_QWORD *)(a1 + 16))
        goto LABEL_26;
      goto LABEL_18;
    }
  }
  else
  {
    v9 = 0;
    if (!*(_QWORD *)(a1 + 16))
      goto LABEL_17;
  }
  v14 = sub_19E3247E4(0x7972657571, 0xE500000000000000);
  if ((v15 & 1) == 0)
    goto LABEL_17;
  sub_19E324848(*(_QWORD *)(a1 + 56) + 32 * v14, (uint64_t)&v22);
  if ((swift_dynamicCast() & 1) == 0)
    goto LABEL_17;
  v10 = (void *)sub_19E36F864();
  swift_bridgeObjectRelease();
  if (!*(_QWORD *)(a1 + 16))
    goto LABEL_26;
LABEL_18:
  v11 = sub_19E3247E4(0x6C6562616CLL, 0xE500000000000000);
  if ((v12 & 1) == 0 || (sub_19E324848(*(_QWORD *)(a1 + 56) + 32 * v11, (uint64_t)&v22), (swift_dynamicCast() & 1) == 0))
  {
LABEL_26:
    v13 = 0;
    if (!*(_QWORD *)(a1 + 16))
      goto LABEL_29;
    goto LABEL_27;
  }
  v13 = (void *)sub_19E36F864();
  swift_bridgeObjectRelease();
  if (!*(_QWORD *)(a1 + 16))
    goto LABEL_29;
LABEL_27:
  v16 = sub_19E3247E4(0x6B6361626C6C6166, 0xEB000000006C7255);
  if ((v17 & 1) != 0)
  {
    sub_19E324848(*(_QWORD *)(a1 + 56) + 32 * v16, (uint64_t)&v22);
    goto LABEL_30;
  }
LABEL_29:
  v22 = 0u;
  v23 = 0u;
LABEL_30:
  swift_bridgeObjectRelease();
  if (!*((_QWORD *)&v23 + 1))
  {
    sub_19E322284((uint64_t)&v22);
    goto LABEL_34;
  }
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_34:
    v18 = 0;
    goto LABEL_35;
  }
  v18 = (void *)sub_19E36F864();
  swift_bridgeObjectRelease();
LABEL_35:
  v19 = objc_msgSend(v2, sel_initWithLatitude_longitude_query_label_fallbackUrl_, v6, v9, v10, v13, v18);

  return v19;
}

uint64_t sub_19E32B314()
{
  void *v0;
  uint64_t inited;
  id v2;
  id v3;
  id v4;
  id v5;
  id v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;

  sub_19E247E74((uint64_t *)&unk_1EE5019F8);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_19E381D90;
  *(_QWORD *)(inited + 32) = 0x656475746974616CLL;
  *(_QWORD *)(inited + 40) = 0xE800000000000000;
  v2 = objc_msgSend(v0, sel_latitude);
  v3 = v2;
  if (v2)
  {
    v2 = (id)sub_19E24B854(0, (unint64_t *)&qword_1ECFC6A00);
  }
  else
  {
    *(_QWORD *)(inited + 56) = 0;
    *(_QWORD *)(inited + 64) = 0;
  }
  *(_QWORD *)(inited + 48) = v3;
  *(_QWORD *)(inited + 72) = v2;
  *(_QWORD *)(inited + 80) = 0x64757469676E6F6CLL;
  *(_QWORD *)(inited + 88) = 0xE900000000000065;
  v4 = objc_msgSend(v0, sel_longitude);
  v5 = v4;
  if (v4)
  {
    v4 = (id)sub_19E24B854(0, (unint64_t *)&qword_1ECFC6A00);
  }
  else
  {
    *(_QWORD *)(inited + 104) = 0;
    *(_QWORD *)(inited + 112) = 0;
  }
  *(_QWORD *)(inited + 96) = v5;
  *(_QWORD *)(inited + 120) = v4;
  *(_QWORD *)(inited + 128) = 0x7972657571;
  *(_QWORD *)(inited + 136) = 0xE500000000000000;
  v6 = objc_msgSend(v0, sel_query);
  if (v6)
  {
    v7 = v6;
    v8 = sub_19E36F888();
    v10 = v9;

    v11 = MEMORY[0x1E0DEA968];
  }
  else
  {
    v8 = 0;
    v10 = 0;
    v11 = 0;
    *(_QWORD *)(inited + 160) = 0;
  }
  *(_QWORD *)(inited + 144) = v8;
  *(_QWORD *)(inited + 152) = v10;
  *(_QWORD *)(inited + 168) = v11;
  *(_QWORD *)(inited + 176) = 0x6C6562616CLL;
  *(_QWORD *)(inited + 184) = 0xE500000000000000;
  v12 = objc_msgSend(v0, sel_label);
  if (v12)
  {
    v13 = v12;
    v14 = sub_19E36F888();
    v16 = v15;

    v17 = MEMORY[0x1E0DEA968];
  }
  else
  {
    v14 = 0;
    v16 = 0;
    v17 = 0;
    *(_QWORD *)(inited + 208) = 0;
  }
  *(_QWORD *)(inited + 192) = v14;
  *(_QWORD *)(inited + 200) = v16;
  *(_QWORD *)(inited + 216) = v17;
  *(_QWORD *)(inited + 224) = 0x6B6361626C6C6166;
  *(_QWORD *)(inited + 232) = 0xEB000000006C7255;
  v18 = objc_msgSend(v0, sel_fallbackUrl);
  if (v18)
  {
    v19 = v18;
    v20 = sub_19E36F888();
    v22 = v21;

    v23 = MEMORY[0x1E0DEA968];
  }
  else
  {
    v20 = 0;
    v22 = 0;
    v23 = 0;
    *(_QWORD *)(inited + 256) = 0;
  }
  *(_QWORD *)(inited + 240) = v20;
  *(_QWORD *)(inited + 248) = v22;
  *(_QWORD *)(inited + 264) = v23;
  v24 = sub_19E32D998(inited);
  v25 = sub_19E35FE5C(v24);
  swift_bridgeObjectRelease();
  return v25;
}

void __swiftcall IMActionShowLocation.init()(IMActionShowLocation *__return_ptr retstr)
{
  objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_init);
}

void IMActionShowLocation.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t type metadata accessor for IMActionShowLocation(uint64_t a1)
{
  return sub_19E24B854(a1, &qword_1EE502A20);
}

uint64_t sub_19E32B7B0(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;

  if (a3)
  {
    v6 = sub_19E36F888();
  }
  else
  {
    v6 = 0;
    v7 = 0;
  }
  v8 = (uint64_t *)(a1 + *a4);
  *v8 = v6;
  v8[1] = v7;
  return swift_bridgeObjectRelease();
}

id sub_19E32B7FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  char *v6;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  objc_super v14;

  v9 = &v6[OBJC_IVAR___IMChipSuggestion_postback];
  *(_QWORD *)v9 = 0;
  *((_QWORD *)v9 + 1) = 0;
  v10 = &v6[OBJC_IVAR___IMChipSuggestion_inReplyToID];
  *(_QWORD *)v10 = 0;
  *((_QWORD *)v10 + 1) = 0;
  v11 = &v6[OBJC_IVAR___IMChipSuggestion_displayText];
  *(_QWORD *)v11 = a1;
  *((_QWORD *)v11 + 1) = a2;
  *(_QWORD *)v9 = a3;
  *((_QWORD *)v9 + 1) = a4;
  v12 = v6;
  swift_bridgeObjectRelease();
  *(_QWORD *)v10 = a5;
  *((_QWORD *)v10 + 1) = a6;

  swift_bridgeObjectRelease();
  v14.receiver = v12;
  v14.super_class = (Class)IMChipSuggestion;
  return objc_msgSendSuper2(&v14, sel_init);
}

void __swiftcall IMChipSuggestion.init(dictionary:)(IMChipSuggestion_optional *__return_ptr retstr, Swift::OpaquePointer dictionary)
{
  id v2;
  void *v3;

  v2 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  v3 = (void *)sub_19E36F81C();
  swift_bridgeObjectRelease();
  objc_msgSend(v2, sel_initWithDictionary_, v3);

}

id IMChipSuggestion.init(dictionary:)(uint64_t a1)
{
  void *v1;
  void *v2;
  unint64_t v4;
  char v5;
  void *v6;
  unint64_t v7;
  char v8;
  void *v9;
  id v10;
  unint64_t v12;
  char v13;
  void *v14;
  __int128 v15;
  __int128 v16;

  v2 = v1;
  if (*(_QWORD *)(a1 + 16))
  {
    v4 = sub_19E3247E4(0x5479616C70736964, 0xEB00000000747865);
    if ((v5 & 1) != 0)
    {
      sub_19E324848(*(_QWORD *)(a1 + 56) + 32 * v4, (uint64_t)&v15);
      if ((swift_dynamicCast() & 1) != 0)
      {
        v6 = (void *)sub_19E36F864();
        swift_bridgeObjectRelease();
        if (*(_QWORD *)(a1 + 16)
          && (v7 = sub_19E3247E4(0x6B63616274736F70, 0xE800000000000000), (v8 & 1) != 0)
          && (sub_19E324848(*(_QWORD *)(a1 + 56) + 32 * v7, (uint64_t)&v15), (swift_dynamicCast() & 1) != 0))
        {
          v9 = (void *)sub_19E36F864();
          swift_bridgeObjectRelease();
        }
        else
        {
          v9 = 0;
        }
        if (*(_QWORD *)(a1 + 16) && (v12 = sub_19E3247E4(0x54796C7065526E69, 0xEB0000000044496FLL), (v13 & 1) != 0))
        {
          sub_19E324848(*(_QWORD *)(a1 + 56) + 32 * v12, (uint64_t)&v15);
        }
        else
        {
          v15 = 0u;
          v16 = 0u;
        }
        swift_bridgeObjectRelease();
        if (*((_QWORD *)&v16 + 1))
        {
          if ((swift_dynamicCast() & 1) != 0)
          {
            v14 = (void *)sub_19E36F864();
            swift_bridgeObjectRelease();
LABEL_20:
            v10 = objc_msgSend(v2, sel_initWithDisplayText_postback_inReplyToID_, v6, v9, v14);

            return v10;
          }
        }
        else
        {
          sub_19E322284((uint64_t)&v15);
        }
        v14 = 0;
        goto LABEL_20;
      }
    }
  }
  swift_bridgeObjectRelease();
  swift_getObjectType();
  swift_deallocPartialClassInstance();
  return 0;
}

uint64_t sub_19E32BC30()
{
  void *v0;
  uint64_t inited;
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;

  sub_19E247E74((uint64_t *)&unk_1EE5019F8);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_19E381BB0;
  *(_QWORD *)(inited + 32) = 0x5479616C70736964;
  *(_QWORD *)(inited + 40) = 0xEB00000000747865;
  v2 = objc_msgSend(v0, sel_displayText);
  v3 = sub_19E36F888();
  v5 = v4;

  v6 = MEMORY[0x1E0DEA968];
  *(_QWORD *)(inited + 48) = v3;
  *(_QWORD *)(inited + 56) = v5;
  *(_QWORD *)(inited + 72) = v6;
  *(_QWORD *)(inited + 80) = 0x6B63616274736F70;
  *(_QWORD *)(inited + 88) = 0xE800000000000000;
  v7 = objc_msgSend(v0, sel_postback);
  if (v7)
  {
    v8 = v7;
    v9 = sub_19E36F888();
    v11 = v10;

    v12 = MEMORY[0x1E0DEA968];
  }
  else
  {
    v9 = 0;
    v11 = 0;
    v12 = 0;
    *(_QWORD *)(inited + 112) = 0;
  }
  *(_QWORD *)(inited + 96) = v9;
  *(_QWORD *)(inited + 104) = v11;
  *(_QWORD *)(inited + 120) = v12;
  *(_QWORD *)(inited + 128) = 0x54796C7065526E69;
  *(_QWORD *)(inited + 136) = 0xEB0000000044496FLL;
  v13 = objc_msgSend(v0, sel_inReplyToID);
  if (v13)
  {
    v14 = v13;
    v15 = sub_19E36F888();
    v17 = v16;

    v18 = MEMORY[0x1E0DEA968];
  }
  else
  {
    v15 = 0;
    v17 = 0;
    v18 = 0;
    *(_QWORD *)(inited + 160) = 0;
  }
  *(_QWORD *)(inited + 144) = v15;
  *(_QWORD *)(inited + 152) = v17;
  *(_QWORD *)(inited + 168) = v18;
  v19 = sub_19E32D998(inited);
  v20 = sub_19E35FE5C(v19);
  swift_bridgeObjectRelease();
  return v20;
}

void __swiftcall IMChipSuggestion.init()(IMChipSuggestion *__return_ptr retstr)
{
  objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_init);
}

void IMChipSuggestion.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

unint64_t type metadata accessor for IMChipSuggestion()
{
  unint64_t result;

  result = qword_1EE502A40;
  if (!qword_1EE502A40)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1EE502A40);
  }
  return result;
}

uint64_t sub_19E32BF50()
{
  uint64_t *v0;
  id v1;
  uint64_t v2;

  v1 = IMStringFromClientCapabilities(*v0);
  v2 = sub_19E36F888();

  return v2;
}

id sub_19E32BF9C()
{
  id result;

  result = objc_msgSend(objc_allocWithZone((Class)IMGenerativeModelsAvailabilityProvider), sel_init);
  qword_1EE5006A0 = (uint64_t)result;
  return result;
}

uint64_t static IMGenerativeModelsAvailabilityProvider.summarizationModelsAvailable()()
{
  return sub_19E32BFF0(&OBJC_IVAR___IMGenerativeModelsAvailabilityProvider_summarizationModelsAvailable);
}

uint64_t static IMGenerativeModelsAvailabilityProvider.generativePlaygroundModelsAvailable()()
{
  return sub_19E32BFF0(&OBJC_IVAR___IMGenerativeModelsAvailabilityProvider_generativePlaygroundModelsAvailable);
}

uint64_t sub_19E32BFF0(_QWORD *a1)
{
  if (qword_1EE5006B0 != -1)
    swift_once();
  return *(unsigned __int8 *)(qword_1EE5006A0 + *a1);
}

uint64_t sub_19E32C050(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  if (qword_1EE5006B0 != -1)
    swift_once();
  return *(unsigned __int8 *)(qword_1EE5006A0 + *a3);
}

void static IMGenerativeModelsAvailabilityProvider.setMessageSummarizationUserPreference(_:)(char a1)
{
  void *v2;
  void *v3;
  id v4;

  v2 = (void *)sub_19E36F864();
  v3 = (void *)sub_19E36F864();
  v4 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37E8]), sel_initWithBool_, a1 & 1);
  IMSetDomainValueForKey();

}

uint64_t static IMGenerativeModelsAvailabilityProvider.messageSummarizationEnabled()()
{
  int v0;
  unsigned int v1;
  id v2;
  unsigned int v3;

  if (qword_1EE5006B0 != -1)
    swift_once();
  v0 = *(unsigned __int8 *)(qword_1EE5006A0
                          + OBJC_IVAR___IMGenerativeModelsAvailabilityProvider_summarizationModelsAvailable);
  v1 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_summarizationUserPreferenceEnabled);
  v2 = objc_msgSend((id)objc_opt_self(), sel_sharedFeatureFlags);
  v3 = objc_msgSend(v2, sel_isInboxSummaryEnabled);

  return v0 & v1 & v3;
}

id sub_19E32C2F4()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  char *v18;
  char *v19;
  void (*v20)(_BYTE *, uint64_t);
  uint64_t v21;
  void (*v22)(_BYTE *);
  char v23;
  void (*v24)(_BYTE *, uint64_t);
  _BYTE *v25;
  char *v26;
  _BYTE *v27;
  _BYTE *v28;
  int v29;
  id v30;
  void (*v31)(_BYTE *, uint64_t);
  _BYTE *v32;
  uint64_t v33;
  _BYTE v35[4];
  int v36;
  char *v37;
  _BYTE *v38;
  uint64_t v39;
  _BYTE *v40;
  _BYTE *v41;
  uint64_t v42;
  uint64_t v43;
  objc_super v44;

  v1 = sub_19E36F6D8();
  v39 = *(_QWORD *)(v1 - 8);
  v2 = MEMORY[0x1E0C80A78](v1);
  v40 = &v35[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v4 = MEMORY[0x1E0C80A78](v2);
  v6 = &v35[-v5];
  MEMORY[0x1E0C80A78](v4);
  v8 = &v35[-v7];
  v9 = sub_19E36F6F0();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v12 = &v35[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v13 = sub_19E36F714();
  v42 = *(_QWORD *)(v13 - 8);
  v43 = v13;
  v14 = MEMORY[0x1E0C80A78](v13);
  v38 = &v35[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v14);
  v17 = &v35[-v16];
  v18 = &v0[OBJC_IVAR___IMGenerativeModelsAvailabilityProvider_summarizationUseCaseIdentifier];
  *(_QWORD *)v18 = 0xD000000000000022;
  *((_QWORD *)v18 + 1) = 0x800000019E39CC10;
  v19 = &v0[OBJC_IVAR___IMGenerativeModelsAvailabilityProvider_generativePlaygroundUseCaseIdentifier];
  *(_QWORD *)v19 = 0xD00000000000001ELL;
  *((_QWORD *)v19 + 1) = 0x800000019E39CC40;
  v37 = v0;
  sub_19E36F6E4();
  sub_19E36F708();
  v20 = *(void (**)(_BYTE *, uint64_t))(v10 + 8);
  v20(v12, v9);
  v41 = v17;
  sub_19E36F6FC();
  v21 = v39;
  v22 = *(void (**)(_BYTE *))(v39 + 104);
  v36 = *MEMORY[0x1E0D26080];
  v22(v6);
  v23 = sub_19E36F6CC();
  v24 = *(void (**)(_BYTE *, uint64_t))(v21 + 8);
  v25 = v6;
  v26 = v37;
  v24(v25, v1);
  v24(v8, v1);
  v26[OBJC_IVAR___IMGenerativeModelsAvailabilityProvider_summarizationModelsAvailable] = v23 & 1;
  swift_bridgeObjectRetain();
  v27 = v38;
  sub_19E36F6E4();
  sub_19E36F708();
  v20(v12, v9);
  v28 = v40;
  sub_19E36F6FC();
  v29 = (*(uint64_t (**)(_BYTE *, uint64_t))(v21 + 88))(v28, v1);
  if (v29 == *MEMORY[0x1E0D25F68])
  {
    v24(v28, v1);
  }
  else if (v29 == *MEMORY[0x1E0D25F78] || v29 != v36)
  {
    v26[OBJC_IVAR___IMGenerativeModelsAvailabilityProvider_generativePlaygroundModelsAvailable] = 0;

    v24(v28, v1);
    goto LABEL_7;
  }
  v26[OBJC_IVAR___IMGenerativeModelsAvailabilityProvider_generativePlaygroundModelsAvailable] = 1;

LABEL_7:
  v44.receiver = v26;
  v44.super_class = (Class)IMGenerativeModelsAvailabilityProvider;
  v30 = objc_msgSendSuper2(&v44, sel_init);
  v31 = *(void (**)(_BYTE *, uint64_t))(v42 + 8);
  v32 = v27;
  v33 = v43;
  v31(v32, v43);
  v31(v41, v33);
  return v30;
}

uint64_t _sSo38IMGenerativeModelsAvailabilityProviderC17IMSharedUtilitiesE34summarizationUserPreferenceEnabledSbyFZ_0()
{
  void *v0;
  void *v1;
  id v2;
  id v3;
  id v5;
  _OWORD v6[2];
  _BYTE v7[24];
  uint64_t v8;

  v0 = (void *)sub_19E36F864();
  v1 = (void *)sub_19E36F864();
  v2 = (id)IMGetCachedDomainValueForKey();

  if (v2)
  {
    sub_19E36FC0C();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v6, 0, sizeof(v6));
  }
  sub_19E32223C((uint64_t)v6, (uint64_t)v7);
  if (!v8)
  {
    sub_19E322284((uint64_t)v7);
    return 1;
  }
  sub_19E24B854(0, (unint64_t *)&qword_1ECFC6A00);
  if ((swift_dynamicCast() & 1) == 0)
    return 1;
  v3 = objc_msgSend(v5, sel_BOOLValue);

  return (uint64_t)v3;
}

uint64_t type metadata accessor for IMGenerativeModelsAvailabilityProvider(uint64_t a1)
{
  return sub_19E24B854(a1, &qword_1EE502A68);
}

uint64_t SenderContext.isFromMe.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + OBJC_IVAR___IMSenderContext_Impl_isFromMe);
}

uint64_t sub_19E32C838()
{
  uint64_t v0;

  if ((*(_BYTE *)(v0 + OBJC_IVAR___IMSenderContext_Impl_isKnownSender) & 1) != 0)
    return 1;
  else
    return *(unsigned __int8 *)(v0 + OBJC_IVAR___IMSenderContext_Impl_isFromMe);
}

uint64_t SenderContext.serviceName.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR___IMSenderContext_Impl_serviceName);
  swift_bridgeObjectRetain();
  return v1;
}

id sub_19E32C8F4(char a1)
{
  objc_class *v2;
  _BYTE *v3;
  _QWORD *v4;
  objc_super v6;

  v2 = (objc_class *)type metadata accessor for SenderContext();
  v3 = objc_allocWithZone(v2);
  v3[OBJC_IVAR___IMSenderContext_Impl_isKnownSender] = a1;
  v3[OBJC_IVAR___IMSenderContext_Impl_isFromMe] = 0;
  v4 = &v3[OBJC_IVAR___IMSenderContext_Impl_serviceName];
  *v4 = 0;
  v4[1] = 0;
  v6.receiver = v3;
  v6.super_class = v2;
  return objc_msgSendSuper2(&v6, sel_init);
}

uint64_t type metadata accessor for SenderContext()
{
  return objc_opt_self();
}

id sub_19E32C9EC()
{
  objc_class *v0;
  _BYTE *v1;
  _QWORD *v2;
  objc_super v4;

  v0 = (objc_class *)type metadata accessor for SenderContext();
  v1 = objc_allocWithZone(v0);
  v1[OBJC_IVAR___IMSenderContext_Impl_isKnownSender] = 1;
  v1[OBJC_IVAR___IMSenderContext_Impl_isFromMe] = 1;
  v2 = &v1[OBJC_IVAR___IMSenderContext_Impl_serviceName];
  *v2 = 0;
  v2[1] = 0;
  v4.receiver = v1;
  v4.super_class = v0;
  return objc_msgSendSuper2(&v4, sel_init);
}

id sub_19E32CAC4()
{
  objc_class *v0;
  _BYTE *v1;
  _QWORD *v2;
  objc_super v4;

  v0 = (objc_class *)type metadata accessor for SenderContext();
  v1 = objc_allocWithZone(v0);
  v1[OBJC_IVAR___IMSenderContext_Impl_isKnownSender] = 0;
  v1[OBJC_IVAR___IMSenderContext_Impl_isFromMe] = 0;
  v2 = &v1[OBJC_IVAR___IMSenderContext_Impl_serviceName];
  *v2 = 0;
  v2[1] = 0;
  v4.receiver = v1;
  v4.super_class = v0;
  return objc_msgSendSuper2(&v4, sel_init);
}

id sub_19E32CB94()
{
  objc_class *v0;
  _BYTE *v1;
  _QWORD *v2;
  objc_super v4;

  v0 = (objc_class *)type metadata accessor for SenderContext();
  v1 = objc_allocWithZone(v0);
  v1[OBJC_IVAR___IMSenderContext_Impl_isKnownSender] = 1;
  v1[OBJC_IVAR___IMSenderContext_Impl_isFromMe] = 0;
  v2 = &v1[OBJC_IVAR___IMSenderContext_Impl_serviceName];
  *v2 = 0;
  v2[1] = 0;
  v4.receiver = v1;
  v4.super_class = v0;
  return objc_msgSendSuper2(&v4, sel_init);
}

id sub_19E32CC6C(char a1, uint64_t a2, uint64_t a3)
{
  objc_class *v6;
  _BYTE *v7;
  _QWORD *v8;
  objc_super v10;

  v6 = (objc_class *)type metadata accessor for SenderContext();
  v7 = objc_allocWithZone(v6);
  v7[OBJC_IVAR___IMSenderContext_Impl_isKnownSender] = a1;
  v7[OBJC_IVAR___IMSenderContext_Impl_isFromMe] = 0;
  v8 = &v7[OBJC_IVAR___IMSenderContext_Impl_serviceName];
  *v8 = a2;
  v8[1] = a3;
  v10.receiver = v7;
  v10.super_class = v6;
  swift_bridgeObjectRetain();
  return objc_msgSendSuper2(&v10, sel_init);
}

id sub_19E32CD88(uint64_t a1, uint64_t a2)
{
  objc_class *v4;
  _BYTE *v5;
  _QWORD *v6;
  objc_super v8;

  v4 = (objc_class *)type metadata accessor for SenderContext();
  v5 = objc_allocWithZone(v4);
  v5[OBJC_IVAR___IMSenderContext_Impl_isKnownSender] = 1;
  v5[OBJC_IVAR___IMSenderContext_Impl_isFromMe] = 1;
  v6 = &v5[OBJC_IVAR___IMSenderContext_Impl_serviceName];
  *v6 = a1;
  v6[1] = a2;
  v8.receiver = v5;
  v8.super_class = v4;
  swift_bridgeObjectRetain();
  return objc_msgSendSuper2(&v8, sel_init);
}

id sub_19E32CEA4(uint64_t a1, uint64_t a2)
{
  objc_class *v4;
  _BYTE *v5;
  _QWORD *v6;
  objc_super v8;

  v4 = (objc_class *)type metadata accessor for SenderContext();
  v5 = objc_allocWithZone(v4);
  v5[OBJC_IVAR___IMSenderContext_Impl_isKnownSender] = 0;
  v5[OBJC_IVAR___IMSenderContext_Impl_isFromMe] = 0;
  v6 = &v5[OBJC_IVAR___IMSenderContext_Impl_serviceName];
  *v6 = a1;
  v6[1] = a2;
  v8.receiver = v5;
  v8.super_class = v4;
  swift_bridgeObjectRetain();
  return objc_msgSendSuper2(&v8, sel_init);
}

id sub_19E32CFB8(uint64_t a1, uint64_t a2)
{
  objc_class *v4;
  _BYTE *v5;
  _QWORD *v6;
  objc_super v8;

  v4 = (objc_class *)type metadata accessor for SenderContext();
  v5 = objc_allocWithZone(v4);
  v5[OBJC_IVAR___IMSenderContext_Impl_isKnownSender] = 1;
  v5[OBJC_IVAR___IMSenderContext_Impl_isFromMe] = 0;
  v6 = &v5[OBJC_IVAR___IMSenderContext_Impl_serviceName];
  *v6 = a1;
  v6[1] = a2;
  v8.receiver = v5;
  v8.super_class = v4;
  swift_bridgeObjectRetain();
  return objc_msgSendSuper2(&v8, sel_init);
}

uint64_t static SenderContext.supportsSecureCoding.getter()
{
  swift_beginAccess();
  return byte_1EE502A70;
}

uint64_t static SenderContext.supportsSecureCoding.setter(char a1)
{
  uint64_t result;

  result = swift_beginAccess();
  byte_1EE502A70 = a1;
  return result;
}

uint64_t (*static SenderContext.supportsSecureCoding.modify())()
{
  swift_beginAccess();
  return j__swift_endAccess;
}

void sub_19E32D220(void *a1)
{
  uint64_t v1;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  id v8;

  v3 = *(unsigned __int8 *)(v1 + OBJC_IVAR___IMSenderContext_Impl_isKnownSender);
  v4 = (void *)sub_19E36F864();
  objc_msgSend(a1, sel_encodeBool_forKey_, v3, v4);

  v5 = *(unsigned __int8 *)(v1 + OBJC_IVAR___IMSenderContext_Impl_isFromMe);
  v6 = (void *)sub_19E36F864();
  objc_msgSend(a1, sel_encodeBool_forKey_, v5, v6);

  if (*(_QWORD *)(v1 + OBJC_IVAR___IMSenderContext_Impl_serviceName + 8))
    v7 = sub_19E36F864();
  else
    v7 = 0;
  v8 = (id)sub_19E36F864();
  objc_msgSend(a1, sel_encodeObject_forKey_, v7, v8);
  swift_unknownObjectRelease();

}

id SenderContext.__allocating_init(coder:)(void *a1)
{
  objc_class *v1;
  id v3;
  id v4;

  v3 = objc_allocWithZone(v1);
  v4 = sub_19E32D500(a1);

  return v4;
}

id SenderContext.init(coder:)(void *a1)
{
  id v2;

  v2 = sub_19E32D500(a1);

  return v2;
}

id SenderContext.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void SenderContext.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id SenderContext.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for SenderContext();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

id sub_19E32D500(void *a1)
{
  void *v1;
  _BYTE *v3;
  void *v4;
  unsigned __int8 v5;
  void *v6;
  unsigned __int8 v7;
  void *v8;
  id v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v15;
  uint64_t v16;
  objc_super v17;
  _OWORD v18[2];
  _BYTE v19[24];
  uint64_t v20;

  v3 = v1;
  v4 = (void *)sub_19E36F864();
  v5 = objc_msgSend(a1, sel_decodeBoolForKey_, v4);

  v3[OBJC_IVAR___IMSenderContext_Impl_isKnownSender] = v5;
  v6 = (void *)sub_19E36F864();
  v7 = objc_msgSend(a1, sel_decodeBoolForKey_, v6);

  v3[OBJC_IVAR___IMSenderContext_Impl_isFromMe] = v7;
  v8 = (void *)sub_19E36F864();
  v9 = objc_msgSend(a1, sel_decodeObjectForKey_, v8);

  if (v9)
  {
    sub_19E36FC0C();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v18, 0, sizeof(v18));
  }
  sub_19E32223C((uint64_t)v18, (uint64_t)v19);
  if (v20)
  {
    v10 = swift_dynamicCast();
    v11 = v15;
    v12 = v16;
    if (!v10)
    {
      v11 = 0;
      v12 = 0;
    }
  }
  else
  {
    sub_19E322284((uint64_t)v19);
    v11 = 0;
    v12 = 0;
  }
  v13 = &v3[OBJC_IVAR___IMSenderContext_Impl_serviceName];
  *v13 = v11;
  v13[1] = v12;

  v17.receiver = v3;
  v17.super_class = (Class)type metadata accessor for SenderContext();
  return objc_msgSendSuper2(&v17, sel_init);
}

uint64_t method lookup function for SenderContext()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of SenderContext.isTrustedSender.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x68))();
}

uint64_t dispatch thunk of static SenderContext.makeContextWithKnownSender(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 120))();
}

uint64_t dispatch thunk of static SenderContext.makeFromMeContext()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 128))();
}

uint64_t dispatch thunk of static SenderContext.makeUntrustedContext()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 136))();
}

uint64_t dispatch thunk of static SenderContext.makeBusinessChatContext()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 144))();
}

uint64_t dispatch thunk of static SenderContext.makeContextWithKnownSender(_:serviceName:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 152))();
}

uint64_t dispatch thunk of static SenderContext.makeFromMeContext(serviceName:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 160))();
}

uint64_t dispatch thunk of static SenderContext.makeUntrustedContext(serviceName:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 168))();
}

uint64_t dispatch thunk of static SenderContext.makeBusinessChatContext(serviceName:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 176))();
}

uint64_t dispatch thunk of SenderContext.encode(with:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xB8))();
}

uint64_t dispatch thunk of SenderContext.__allocating_init(coder:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 192))();
}

unint64_t sub_19E32D74C(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void **v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  id v8;
  unint64_t result;
  char v10;
  uint64_t *v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  sub_19E247E74(&qword_1EE502B48);
  v2 = (_QWORD *)sub_19E36FD20();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (void **)(a1 + 48);
  while (1)
  {
    v5 = (uint64_t)*(v4 - 2);
    v6 = (uint64_t)*(v4 - 1);
    v7 = *v4;
    swift_bridgeObjectRetain();
    v8 = v7;
    result = sub_19E3247E4(v5, v6);
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v11 = (uint64_t *)(v2[6] + 16 * result);
    *v11 = v5;
    v11[1] = v6;
    *(_QWORD *)(v2[7] + 8 * result) = v8;
    v12 = v2[2];
    v13 = __OFADD__(v12, 1);
    v14 = v12 + 1;
    if (v13)
      goto LABEL_11;
    v2[2] = v14;
    v4 += 3;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_19E32D864(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t result;
  char v10;
  uint64_t *v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;

  if (!*(_QWORD *)(a1 + 16))
  {
    v3 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  sub_19E247E74((uint64_t *)&unk_1EE503400);
  v2 = sub_19E36FD20();
  v3 = (_QWORD *)v2;
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  v5 = v2 + 64;
  v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_19E327DEC(v6, (uint64_t)&v15, &qword_1EE502B50);
    v7 = v15;
    v8 = v16;
    result = sub_19E3247E4(v15, v16);
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v11 = (uint64_t *)(v3[6] + 16 * result);
    *v11 = v7;
    v11[1] = v8;
    result = (unint64_t)sub_19E24B594(&v17, (_OWORD *)(v3[7] + 32 * result));
    v12 = v3[2];
    v13 = __OFADD__(v12, 1);
    v14 = v12 + 1;
    if (v13)
      goto LABEL_11;
    v3[2] = v14;
    v6 += 48;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_19E32D998(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t result;
  char v10;
  uint64_t *v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  if (!*(_QWORD *)(a1 + 16))
  {
    v3 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  sub_19E247E74(&qword_1EE502B28);
  v2 = sub_19E36FD20();
  v3 = (_QWORD *)v2;
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  v5 = v2 + 64;
  v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_19E327DEC(v6, (uint64_t)&v15, &qword_1EE502B30);
    v7 = v15;
    v8 = v16;
    result = sub_19E3247E4(v15, v16);
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v11 = (uint64_t *)(v3[6] + 16 * result);
    *v11 = v7;
    v11[1] = v8;
    result = sub_19E32223C((uint64_t)&v17, v3[7] + 32 * result);
    v12 = v3[2];
    v13 = __OFADD__(v12, 1);
    v14 = v12 + 1;
    if (v13)
      goto LABEL_11;
    v3[2] = v14;
    v6 += 48;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_19E32DACC(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  id v6;
  unint64_t result;
  char v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  sub_19E247E74(&qword_1EE502B38);
  v2 = (_QWORD *)sub_19E36FD20();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (uint64_t *)(a1 + 40);
  while (1)
  {
    v5 = *v4;
    v6 = (id)*(v4 - 1);
    swift_bridgeObjectRetain();
    result = sub_19E3248C0((uint64_t)v6);
    if ((v8 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v9 = 8 * result;
    *(_QWORD *)(v2[6] + v9) = v6;
    *(_QWORD *)(v2[7] + v9) = v5;
    v10 = v2[2];
    v11 = __OFADD__(v10, 1);
    v12 = v10 + 1;
    if (v11)
      goto LABEL_11;
    v2[2] = v12;
    v4 += 2;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_19E32DBD4(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t result;
  char v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  sub_19E247E74((uint64_t *)&unk_1EE503500);
  v2 = (_QWORD *)sub_19E36FD20();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (uint64_t *)(a1 + 56);
  while (1)
  {
    v5 = *(v4 - 3);
    v6 = *(v4 - 2);
    v8 = *(v4 - 1);
    v7 = *v4;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    result = sub_19E3247E4(v5, v6);
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v11 = (uint64_t *)(v2[6] + 16 * result);
    *v11 = v5;
    v11[1] = v6;
    v12 = (_QWORD *)(v2[7] + 16 * result);
    *v12 = v8;
    v12[1] = v7;
    v13 = v2[2];
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
      goto LABEL_11;
    v4 += 4;
    v2[2] = v15;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_19E32DCF4(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  unint64_t result;
  char v9;
  uint64_t *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  sub_19E247E74(&qword_1EE502B60);
  v2 = (_QWORD *)sub_19E36FD20();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (_BYTE *)(a1 + 48);
  while (1)
  {
    v5 = *((_QWORD *)v4 - 2);
    v6 = *((_QWORD *)v4 - 1);
    v7 = *v4;
    swift_bridgeObjectRetain();
    result = sub_19E3247E4(v5, v6);
    if ((v9 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v10 = (uint64_t *)(v2[6] + 16 * result);
    *v10 = v5;
    v10[1] = v6;
    *(_BYTE *)(v2[7] + result) = v7;
    v11 = v2[2];
    v12 = __OFADD__(v11, 1);
    v13 = v11 + 1;
    if (v12)
      goto LABEL_11;
    v4 += 24;
    v2[2] = v13;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_19E32DE04(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t result;
  char v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;

  if (!*(_QWORD *)(a1 + 16))
  {
    v3 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  sub_19E247E74(&qword_1EE5037A0);
  v2 = sub_19E36FD20();
  v3 = (_QWORD *)v2;
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  v5 = v2 + 64;
  v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_19E327DEC(v6, (uint64_t)&v13, &qword_1EE502B58);
    v7 = v13;
    result = sub_19E3248C0(v13);
    if ((v9 & 1) != 0)
      break;
    *(_QWORD *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    *(_QWORD *)(v3[6] + 8 * result) = v7;
    result = (unint64_t)sub_19E24B594(&v14, (_OWORD *)(v3[7] + 32 * result));
    v10 = v3[2];
    v11 = __OFADD__(v10, 1);
    v12 = v10 + 1;
    if (v11)
      goto LABEL_11;
    v3[2] = v12;
    v6 += 40;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_19E32DF30(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t result;
  char v9;
  uint64_t *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  sub_19E247E74((uint64_t *)&unk_1EE5033F0);
  v2 = (_QWORD *)sub_19E36FD20();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (uint64_t *)(a1 + 48);
  while (1)
  {
    v5 = *(v4 - 2);
    v6 = *(v4 - 1);
    v7 = *v4;
    swift_bridgeObjectRetain();
    swift_retain();
    result = sub_19E3247E4(v5, v6);
    if ((v9 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v10 = (uint64_t *)(v2[6] + 16 * result);
    *v10 = v5;
    v10[1] = v6;
    *(_QWORD *)(v2[7] + 8 * result) = v7;
    v11 = v2[2];
    v12 = __OFADD__(v11, 1);
    v13 = v11 + 1;
    if (v12)
      goto LABEL_11;
    v2[2] = v13;
    v4 += 3;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_19E32E048(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t result;
  char v9;
  uint64_t *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  sub_19E247E74(&qword_1EE500630);
  v2 = (_QWORD *)sub_19E36FD20();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (uint64_t *)(a1 + 48);
  while (1)
  {
    v5 = *(v4 - 2);
    v6 = *(v4 - 1);
    v7 = *v4;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    result = sub_19E3247E4(v5, v6);
    if ((v9 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v10 = (uint64_t *)(v2[6] + 16 * result);
    *v10 = v5;
    v10[1] = v6;
    *(_QWORD *)(v2[7] + 8 * result) = v7;
    v11 = v2[2];
    v12 = __OFADD__(v11, 1);
    v13 = v11 + 1;
    if (v12)
      goto LABEL_11;
    v2[2] = v13;
    v4 += 3;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_19E32E160(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t result;
  char v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  sub_19E247E74(&qword_1EE500590);
  v2 = (_QWORD *)sub_19E36FD20();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = a1 + 40;
  while (1)
  {
    v5 = *(_QWORD *)(v4 - 8);
    v6 = *(_QWORD *)v4;
    v7 = *(_QWORD *)(v4 + 8);
    v15 = *(_OWORD *)(v4 + 32);
    v16 = *(_OWORD *)(v4 + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain();
    result = sub_19E3247E4(v5, v6);
    if ((v9 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v10 = (uint64_t *)(v2[6] + 16 * result);
    *v10 = v5;
    v10[1] = v6;
    v11 = v2[7] + 40 * result;
    *(_QWORD *)v11 = v7;
    *(_OWORD *)(v11 + 8) = v16;
    *(_OWORD *)(v11 + 24) = v15;
    v12 = v2[2];
    v13 = __OFADD__(v12, 1);
    v14 = v12 + 1;
    if (v13)
      goto LABEL_11;
    v2[2] = v14;
    v4 += 56;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

void __swiftcall IMRichCard.init(dictionary:)(IMRichCard_optional *__return_ptr retstr, Swift::OpaquePointer dictionary)
{
  id v2;
  void *v3;

  v2 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  v3 = (void *)sub_19E36F81C();
  swift_bridgeObjectRelease();
  objc_msgSend(v2, sel_initWithDictionary_, v3);

}

id IMRichCard.init(dictionary:)(uint64_t a1)
{
  void *v1;
  void *v2;
  unint64_t v4;
  char v5;
  id v6;
  void *v7;
  id v8;
  unint64_t v9;
  char v10;
  id v11;
  void *v12;
  id v13;
  id v14;
  unint64_t v16;
  char v17;
  id v18;
  void *v19;
  id v20;
  unint64_t v21;
  char v22;
  void *v23;
  unint64_t v24;
  char v25;
  void *v26;
  __int128 v27;
  __int128 v28;

  v2 = v1;
  if (*(_QWORD *)(a1 + 16))
  {
    v4 = sub_19E3247E4(0x74756F79616CLL, 0xE600000000000000);
    if ((v5 & 1) != 0)
    {
      sub_19E324848(*(_QWORD *)(a1 + 56) + 32 * v4, (uint64_t)&v27);
      sub_19E247E74(&qword_1EE503490);
      if ((swift_dynamicCast() & 1) != 0)
      {
        v6 = objc_allocWithZone((Class)IMRichCardLayout);
        v7 = (void *)sub_19E36F81C();
        swift_bridgeObjectRelease();
        v8 = objc_msgSend(v6, sel_initWithDictionary_, v7);

        if (v8)
        {
          if (*(_QWORD *)(a1 + 16)
            && (v9 = sub_19E3247E4(0x616964656DLL, 0xE500000000000000), (v10 & 1) != 0)
            && (sub_19E324848(*(_QWORD *)(a1 + 56) + 32 * v9, (uint64_t)&v27), (swift_dynamicCast() & 1) != 0))
          {
            v11 = objc_allocWithZone((Class)IMRichCardMedia);
            v12 = (void *)sub_19E36F81C();
            swift_bridgeObjectRelease();
            v13 = objc_msgSend(v11, sel_initWithDictionary_, v12);

          }
          else
          {
            v13 = 0;
          }
          if (*(_QWORD *)(a1 + 16)
            && (v16 = sub_19E3247E4(0x7473694C70696863, 0xE800000000000000), (v17 & 1) != 0)
            && (sub_19E324848(*(_QWORD *)(a1 + 56) + 32 * v16, (uint64_t)&v27), (swift_dynamicCast() & 1) != 0))
          {
            v18 = objc_allocWithZone((Class)IMChipList);
            v19 = (void *)sub_19E36F81C();
            swift_bridgeObjectRelease();
            v20 = objc_msgSend(v18, sel_initWithDictionary_, v19);

          }
          else
          {
            v20 = 0;
          }
          if (*(_QWORD *)(a1 + 16)
            && (v21 = sub_19E3247E4(0x656C746974, 0xE500000000000000), (v22 & 1) != 0)
            && (sub_19E324848(*(_QWORD *)(a1 + 56) + 32 * v21, (uint64_t)&v27), (swift_dynamicCast() & 1) != 0))
          {
            v23 = (void *)sub_19E36F864();
            swift_bridgeObjectRelease();
          }
          else
          {
            v23 = 0;
          }
          if (*(_QWORD *)(a1 + 16) && (v24 = sub_19E3247E4(0x6373654464726163, 0xEF6E6F6974706972), (v25 & 1) != 0))
          {
            sub_19E324848(*(_QWORD *)(a1 + 56) + 32 * v24, (uint64_t)&v27);
          }
          else
          {
            v27 = 0u;
            v28 = 0u;
          }
          swift_bridgeObjectRelease();
          if (*((_QWORD *)&v28 + 1))
          {
            if ((swift_dynamicCast() & 1) != 0)
            {
              v26 = (void *)sub_19E36F864();
              swift_bridgeObjectRelease();
LABEL_31:
              v14 = objc_msgSend(v2, sel_initWithLayout_media_title_cardDescription_chipList_, v8, v13, v23, v26, v20);

              return v14;
            }
          }
          else
          {
            sub_19E322284((uint64_t)&v27);
          }
          v26 = 0;
          goto LABEL_31;
        }
      }
    }
  }
  swift_bridgeObjectRelease();
  swift_getObjectType();
  swift_deallocPartialClassInstance();
  return 0;
}

uint64_t sub_19E32E900()
{
  void *v0;
  uint64_t inited;
  id v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  void *v24;
  id v25;
  unint64_t v26;
  uint64_t v27;

  sub_19E247E74((uint64_t *)&unk_1EE5019F8);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_19E381D90;
  *(_QWORD *)(inited + 32) = 0x74756F79616CLL;
  *(_QWORD *)(inited + 40) = 0xE600000000000000;
  v2 = objc_msgSend(v0, sel_layout);
  v3 = objc_msgSend(v2, sel_dictionaryRepresentation);

  v4 = sub_19E36F828();
  v5 = sub_19E247E74(&qword_1EE503490);
  *(_QWORD *)(inited + 48) = v4;
  *(_QWORD *)(inited + 72) = v5;
  *(_QWORD *)(inited + 80) = 0x616964656DLL;
  *(_QWORD *)(inited + 88) = 0xE500000000000000;
  v6 = objc_msgSend(v0, sel_media);
  if (v6)
  {
    v7 = v6;
    v8 = objc_msgSend(v6, sel_dictionaryRepresentation);

    v9 = sub_19E36F828();
    v10 = v5;
  }
  else
  {
    v9 = 0;
    v10 = 0;
    *(_QWORD *)(inited + 104) = 0;
    *(_QWORD *)(inited + 112) = 0;
  }
  *(_QWORD *)(inited + 96) = v9;
  *(_QWORD *)(inited + 120) = v10;
  *(_QWORD *)(inited + 128) = 0x656C746974;
  *(_QWORD *)(inited + 136) = 0xE500000000000000;
  v11 = objc_msgSend(v0, sel_title);
  if (v11)
  {
    v12 = v11;
    v13 = sub_19E36F888();
    v15 = v14;

    v16 = MEMORY[0x1E0DEA968];
  }
  else
  {
    v13 = 0;
    v15 = 0;
    v16 = 0;
    *(_QWORD *)(inited + 160) = 0;
  }
  *(_QWORD *)(inited + 144) = v13;
  *(_QWORD *)(inited + 152) = v15;
  *(_QWORD *)(inited + 168) = v16;
  *(_QWORD *)(inited + 176) = 0x6373654464726163;
  *(_QWORD *)(inited + 184) = 0xEF6E6F6974706972;
  v17 = objc_msgSend(v0, sel_cardDescription);
  if (v17)
  {
    v18 = v17;
    v19 = sub_19E36F888();
    v21 = v20;

    v22 = MEMORY[0x1E0DEA968];
  }
  else
  {
    v19 = 0;
    v21 = 0;
    v22 = 0;
    *(_QWORD *)(inited + 208) = 0;
  }
  *(_QWORD *)(inited + 192) = v19;
  *(_QWORD *)(inited + 200) = v21;
  *(_QWORD *)(inited + 216) = v22;
  *(_QWORD *)(inited + 224) = 0x7473694C70696863;
  *(_QWORD *)(inited + 232) = 0xE800000000000000;
  v23 = objc_msgSend(v0, sel_chipList);
  v24 = v23;
  if (v23)
  {
    v25 = objc_msgSend(v23, sel_dictionaryRepresentation);

    v24 = (void *)sub_19E36F828();
  }
  else
  {
    v5 = 0;
    *(_QWORD *)(inited + 248) = 0;
    *(_QWORD *)(inited + 256) = 0;
  }
  *(_QWORD *)(inited + 240) = v24;
  *(_QWORD *)(inited + 264) = v5;
  v26 = sub_19E32D998(inited);
  v27 = sub_19E35FE5C(v26);
  swift_bridgeObjectRelease();
  return v27;
}

Swift::Void __swiftcall IMRichCard.update(urlToTransferMap:)(IMUrlToTransferMap *urlToTransferMap)
{
  void *v1;
  id v3;
  void *v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char isUniquelyReferenced_nonNull_native;
  id v15;
  void *v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  id v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  id v37;
  void *v38;
  id v39;

  sub_19E32DBD4(MEMORY[0x1E0DEE9D8]);
  v3 = objc_msgSend(v1, sel_media);
  if (v3)
  {
    v4 = v3;
    v5 = objc_msgSend(v3, sel_mediaUrl);

    v6 = sub_19E36F888();
    v8 = v7;

    v9 = (void *)sub_19E36F864();
    v10 = -[IMUrlToTransferMap transferGuidFromUrl:](urlToTransferMap, sel_transferGuidFromUrl_, v9);

    if (v10)
    {
      v11 = sub_19E36F888();
      v13 = v12;

      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      sub_19E32F86C(v11, v13, v6, v8, isUniquelyReferenced_nonNull_native);
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
  }
  v15 = objc_msgSend(v1, sel_media);
  if (v15)
  {
    v16 = v15;
    v17 = objc_msgSend(v15, sel_thumbnailUrl);

    if (v17)
    {
      v18 = sub_19E36F888();
      v20 = v19;

      v21 = (void *)sub_19E36F864();
      v22 = -[IMUrlToTransferMap transferGuidFromUrl:](urlToTransferMap, sel_transferGuidFromUrl_, v21);

      if (v22)
      {
        v23 = sub_19E36F888();
        v25 = v24;

        v26 = swift_isUniquelyReferenced_nonNull_native();
        sub_19E32F86C(v23, v25, v18, v20, v26);
        swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRelease();
    }
  }
  v27 = objc_msgSend(v1, sel_layout);
  v28 = objc_msgSend(v27, sel_cardStyleUrl);

  if (v28)
  {
    v29 = sub_19E36F888();
    v31 = v30;
    v32 = -[IMUrlToTransferMap transferGuidFromUrl:](urlToTransferMap, sel_transferGuidFromUrl_, v28);

    if (v32)
    {
      v33 = sub_19E36F888();
      v35 = v34;

      v36 = swift_isUniquelyReferenced_nonNull_native();
      sub_19E32F86C(v33, v35, v29, v31, v36);
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
  }
  v37 = objc_allocWithZone((Class)IMUrlToTransferMap);
  v38 = (void *)sub_19E36F81C();
  swift_bridgeObjectRelease();
  v39 = objc_msgSend(v37, sel_initWithUrlToTransferGuids_, v38);

  objc_msgSend(v1, sel_setUrlToTransferMap_, v39);
}

uint64_t sub_19E32F010@<X0>(_QWORD *a1@<X8>)
{
  void *v1;
  id v3;
  id v4;
  void *v5;
  id v6;
  id v7;
  void *v8;
  uint64_t result;

  v3 = objc_msgSend(v1, sel_dictionaryRepresentation);
  sub_19E36F828();

  v4 = objc_allocWithZone((Class)IMRichCard);
  v5 = (void *)sub_19E36F81C();
  swift_bridgeObjectRelease();
  v6 = objc_msgSend(v4, sel_initWithDictionary_, v5);

  if (v6)
  {
    v7 = objc_msgSend(v1, sel_urlToTransferMap);
    if (v7)
    {
      v8 = v7;
      objc_msgSend(v6, sel_updateUrlToTransferMap_, v7);

    }
    result = type metadata accessor for IMRichCard((uint64_t)v7);
  }
  else
  {
    v6 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0C99E38]), sel_init);
    result = sub_19E24B854(0, &qword_1EE502B40);
  }
  a1[3] = result;
  *a1 = v6;
  return result;
}

uint64_t IMRichCard.isEqual(_:)(uint64_t a1)
{
  void *v1;
  void *v2;
  uint64_t v3;
  id v4;
  id v5;
  char v6;
  id v7;
  id v8;
  void *v9;
  id v10;
  char v11;
  char v12;
  id v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  id v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  id v36;
  id v37;
  void *v38;
  id v39;
  void *v40;
  _BYTE v41[24];
  uint64_t v42;

  v2 = v1;
  v3 = sub_19E327DEC(a1, (uint64_t)v41, qword_1ECFC68D0);
  if (!v42)
  {
    sub_19E322284((uint64_t)v41);
    goto LABEL_9;
  }
  type metadata accessor for IMRichCard(v3);
  if ((swift_dynamicCast() & 1) != 0)
  {
    sub_19E24B854(0, &qword_1EE503750);
    v4 = objc_msgSend(v1, sel_layout);
    v5 = objc_msgSend(v40, sel_layout);
    v6 = sub_19E36FBB8();

    if ((v6 & 1) == 0)
      goto LABEL_7;
    v7 = objc_msgSend(v2, sel_media);
    v8 = objc_msgSend(v40, sel_media);
    v9 = v8;
    if (v7)
    {
      if (!v8)
      {

        goto LABEL_9;
      }
      type metadata accessor for IMRichCardMedia(0);
      v10 = v7;
      v11 = sub_19E36FBB8();

      if ((v11 & 1) == 0)
        goto LABEL_7;
    }
    else if (v8)
    {

      goto LABEL_9;
    }
    v14 = objc_msgSend(v2, sel_title);
    if (v14)
    {
      v15 = v14;
      v16 = sub_19E36F888();
      v18 = v17;

    }
    else
    {
      v16 = 0;
      v18 = 0;
    }
    v19 = objc_msgSend(v40, sel_title);
    if (v19)
    {
      v20 = v19;
      v21 = sub_19E36F888();
      v23 = v22;

      if (v18)
      {
        if (!v23)
          goto LABEL_40;
        if (v16 == v21 && v18 == v23)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
        else
        {
          v24 = sub_19E36FE10();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v24 & 1) == 0)
            goto LABEL_7;
        }
      }
      else if (v23)
      {
        goto LABEL_40;
      }
    }
    else if (v18)
    {
      goto LABEL_40;
    }
    v25 = objc_msgSend(v2, sel_cardDescription);
    if (v25)
    {
      v26 = v25;
      v27 = sub_19E36F888();
      v29 = v28;

    }
    else
    {
      v27 = 0;
      v29 = 0;
    }
    v30 = objc_msgSend(v40, sel_cardDescription);
    if (v30)
    {
      v31 = v30;
      v32 = sub_19E36F888();
      v34 = v33;

      if (v29)
      {
        if (v34)
        {
          if (v27 == v32 && v29 == v34)
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
LABEL_42:
            v36 = objc_msgSend(v2, sel_chipList);
            v37 = objc_msgSend(v40, sel_chipList);
            v38 = v37;
            if (!v36)
            {

              if (!v38)
              {
                v12 = 1;
                return v12 & 1;
              }

              goto LABEL_9;
            }
            if (v37)
            {
              type metadata accessor for IMChipList(0);
              v39 = v36;
              v12 = sub_19E36FBB8();

              return v12 & 1;
            }

            goto LABEL_7;
          }
          v35 = sub_19E36FE10();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v35 & 1) != 0)
            goto LABEL_42;
LABEL_7:

          goto LABEL_9;
        }
      }
      else if (!v34)
      {
        goto LABEL_42;
      }
    }
    else if (!v29)
    {
      goto LABEL_42;
    }
LABEL_40:

    swift_bridgeObjectRelease();
  }
LABEL_9:
  v12 = 0;
  return v12 & 1;
}

void __swiftcall IMRichCard.init()(IMRichCard *__return_ptr retstr)
{
  objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_init);
}

void IMRichCard.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void sub_19E32F710(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  char v21;
  uint64_t *v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;

  v5 = v4;
  v10 = *v4;
  v12 = sub_19E3247E4(a2, a3);
  v13 = *(_QWORD *)(v10 + 16);
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v16 = v11;
  v17 = *(_QWORD *)(v10 + 24);
  if (v17 >= v15 && (a4 & 1) != 0)
    goto LABEL_7;
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    sub_19E35936C();
LABEL_7:
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
    {
LABEL_8:
      v19 = v18[7];

      *(_QWORD *)(v19 + 8 * v12) = a1;
      return;
    }
LABEL_11:
    v18[(v12 >> 6) + 8] |= 1 << v12;
    v22 = (uint64_t *)(v18[6] + 16 * v12);
    *v22 = a2;
    v22[1] = a3;
    *(_QWORD *)(v18[7] + 8 * v12) = a1;
    v23 = v18[2];
    v24 = __OFADD__(v23, 1);
    v25 = v23 + 1;
    if (!v24)
    {
      v18[2] = v25;
      swift_bridgeObjectRetain();
      return;
    }
    goto LABEL_14;
  }
  sub_19E360720(v15, a4 & 1);
  v20 = sub_19E3247E4(a2, a3);
  if ((v16 & 1) == (v21 & 1))
  {
    v12 = v20;
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  sub_19E36FE4C();
  __break(1u);
}

uint64_t sub_19E32F86C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t result;
  unint64_t v23;
  char v24;
  uint64_t *v25;
  _QWORD *v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;

  v6 = v5;
  v12 = *v5;
  v14 = sub_19E3247E4(a3, a4);
  v15 = *(_QWORD *)(v12 + 16);
  v16 = (v13 & 1) == 0;
  v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v18 = v13;
  v19 = *(_QWORD *)(v12 + 24);
  if (v19 >= v17 && (a5 & 1) != 0)
    goto LABEL_7;
  if (v19 >= v17 && (a5 & 1) == 0)
  {
    sub_19E35951C();
LABEL_7:
    v20 = (_QWORD *)*v6;
    if ((v18 & 1) != 0)
    {
LABEL_8:
      v21 = (_QWORD *)(v20[7] + 16 * v14);
      result = swift_bridgeObjectRelease();
      *v21 = a1;
      v21[1] = a2;
      return result;
    }
LABEL_11:
    v20[(v14 >> 6) + 8] |= 1 << v14;
    v25 = (uint64_t *)(v20[6] + 16 * v14);
    *v25 = a3;
    v25[1] = a4;
    v26 = (_QWORD *)(v20[7] + 16 * v14);
    *v26 = a1;
    v26[1] = a2;
    v27 = v20[2];
    v28 = __OFADD__(v27, 1);
    v29 = v27 + 1;
    if (!v28)
    {
      v20[2] = v29;
      return swift_bridgeObjectRetain();
    }
    goto LABEL_14;
  }
  sub_19E360A28(v17, a5 & 1);
  v23 = sub_19E3247E4(a3, a4);
  if ((v18 & 1) == (v24 & 1))
  {
    v14 = v23;
    v20 = (_QWORD *)*v6;
    if ((v18 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  result = sub_19E36FE4C();
  __break(1u);
  return result;
}

uint64_t type metadata accessor for IMRichCard(uint64_t a1)
{
  return sub_19E24B854(a1, &qword_1EE502B20);
}

uint64_t sub_19E32F9F4(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t result;
  __int128 v21;
  unint64_t v22;
  char v23;
  uint64_t *v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;

  v5 = v4;
  v10 = *v4;
  v12 = sub_19E3247E4(a2, a3);
  v13 = *(_QWORD *)(v10 + 16);
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v16 = v11;
  v17 = *(_QWORD *)(v10 + 24);
  if (v17 >= v15 && (a4 & 1) != 0)
    goto LABEL_7;
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    sub_19E359888();
LABEL_7:
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
    {
LABEL_8:
      v19 = v18[7] + 40 * v12;
      swift_release();
      swift_bridgeObjectRelease();
      result = swift_bridgeObjectRelease();
      v21 = *(_OWORD *)(a1 + 16);
      *(_OWORD *)v19 = *(_OWORD *)a1;
      *(_OWORD *)(v19 + 16) = v21;
      *(_QWORD *)(v19 + 32) = *(_QWORD *)(a1 + 32);
      return result;
    }
LABEL_11:
    v18[(v12 >> 6) + 8] |= 1 << v12;
    v24 = (uint64_t *)(v18[6] + 16 * v12);
    *v24 = a2;
    v24[1] = a3;
    v25 = v18[7] + 40 * v12;
    v26 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)v25 = *(_OWORD *)a1;
    *(_OWORD *)(v25 + 16) = v26;
    *(_QWORD *)(v25 + 32) = *(_QWORD *)(a1 + 32);
    v27 = v18[2];
    v28 = __OFADD__(v27, 1);
    v29 = v27 + 1;
    if (!v28)
    {
      v18[2] = v29;
      return swift_bridgeObjectRetain();
    }
    goto LABEL_14;
  }
  sub_19E361060(v15, a4 & 1);
  v22 = sub_19E3247E4(a2, a3);
  if ((v16 & 1) == (v23 & 1))
  {
    v12 = v22;
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  result = sub_19E36FE4C();
  __break(1u);
  return result;
}

uint64_t sub_19E32FB88(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t result;
  unint64_t v21;
  char v22;
  uint64_t *v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;

  v5 = v4;
  v10 = *v4;
  v12 = sub_19E3247E4(a2, a3);
  v13 = *(_QWORD *)(v10 + 16);
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v16 = v11;
  v17 = *(_QWORD *)(v10 + 24);
  if (v17 >= v15 && (a4 & 1) != 0)
    goto LABEL_7;
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    sub_19E359A80();
LABEL_7:
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
    {
LABEL_8:
      v19 = v18[7];
      result = swift_bridgeObjectRelease();
      *(_QWORD *)(v19 + 8 * v12) = a1;
      return result;
    }
LABEL_11:
    v18[(v12 >> 6) + 8] |= 1 << v12;
    v23 = (uint64_t *)(v18[6] + 16 * v12);
    *v23 = a2;
    v23[1] = a3;
    *(_QWORD *)(v18[7] + 8 * v12) = a1;
    v24 = v18[2];
    v25 = __OFADD__(v24, 1);
    v26 = v24 + 1;
    if (!v25)
    {
      v18[2] = v26;
      return swift_bridgeObjectRetain();
    }
    goto LABEL_14;
  }
  sub_19E3613B8(v15, a4 & 1);
  v21 = sub_19E3247E4(a2, a3);
  if ((v16 & 1) == (v22 & 1))
  {
    v12 = v21;
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  result = sub_19E36FE4C();
  __break(1u);
  return result;
}

_OWORD *sub_19E32FCE4(_OWORD *a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD **v5;
  _QWORD *v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  _OWORD *v19;
  _OWORD *result;
  unint64_t v21;
  char v22;

  v5 = (_QWORD **)v4;
  v10 = (_QWORD *)*v4;
  v12 = sub_19E3247E4(a2, a3);
  v13 = v10[2];
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }
  else
  {
    v16 = v11;
    v17 = v10[3];
    if (v17 >= v15 && (a4 & 1) != 0)
    {
LABEL_7:
      v18 = *v5;
      if ((v16 & 1) != 0)
      {
LABEL_8:
        v19 = (_OWORD *)(v18[7] + 32 * v12);
        sub_19E323384((uint64_t)v19);
        return sub_19E24B594(a1, v19);
      }
      goto LABEL_11;
    }
    if (v17 >= v15 && (a4 & 1) == 0)
    {
      sub_19E359C34();
      goto LABEL_7;
    }
    sub_19E36072C(v15, a4 & 1);
    v21 = sub_19E3247E4(a2, a3);
    if ((v16 & 1) == (v22 & 1))
    {
      v12 = v21;
      v18 = *v5;
      if ((v16 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      sub_19E32FE5C(v12, a2, a3, a1, v18);
      return (_OWORD *)swift_bridgeObjectRetain();
    }
  }
  result = (_OWORD *)sub_19E36FE4C();
  __break(1u);
  return result;
}

unint64_t sub_19E32FE14(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  _QWORD *v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;

  a5[(result >> 6) + 8] |= 1 << result;
  v5 = (_QWORD *)(a5[6] + 16 * result);
  *v5 = a2;
  v5[1] = a3;
  *(_QWORD *)(a5[7] + 8 * result) = a4;
  v6 = a5[2];
  v7 = __OFADD__(v6, 1);
  v8 = v6 + 1;
  if (v7)
    __break(1u);
  else
    a5[2] = v8;
  return result;
}

_OWORD *sub_19E32FE5C(unint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4, _QWORD *a5)
{
  _QWORD *v6;
  _OWORD *result;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;

  a5[(a1 >> 6) + 8] |= 1 << a1;
  v6 = (_QWORD *)(a5[6] + 16 * a1);
  *v6 = a2;
  v6[1] = a3;
  result = sub_19E24B594(a4, (_OWORD *)(a5[7] + 32 * a1));
  v8 = a5[2];
  v9 = __OFADD__(v8, 1);
  v10 = v8 + 1;
  if (v9)
    __break(1u);
  else
    a5[2] = v10;
  return result;
}

void __swiftcall IMRichCardStyle.init(dictionary:)(IMRichCardStyle_optional *__return_ptr retstr, Swift::OpaquePointer dictionary)
{
  id v2;
  void *v3;

  v2 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  v3 = (void *)sub_19E36F81C();
  swift_bridgeObjectRelease();
  objc_msgSend(v2, sel_initWithDictionary_, v3);

}

id IMRichCardStyle.init(dictionary:)(uint64_t a1)
{
  void *v1;
  void *v2;
  unint64_t v4;
  char v5;
  id v6;
  unint64_t v7;
  char v8;
  id v9;
  unint64_t v10;
  char v11;
  id v12;
  id v14;
  __int128 v15;
  __int128 v16;

  v2 = v1;
  if (*(_QWORD *)(a1 + 16)
    && (v4 = sub_19E3247E4(1684828002, 0xE400000000000000), (v5 & 1) != 0)
    && (sub_19E324848(*(_QWORD *)(a1 + 56) + 32 * v4, (uint64_t)&v15),
        sub_19E24B854(0, (unint64_t *)&qword_1ECFC6A00),
        (swift_dynamicCast() & 1) != 0))
  {
    v6 = objc_msgSend(v14, sel_BOOLValue);

    if (!*(_QWORD *)(a1 + 16))
      goto LABEL_11;
  }
  else
  {
    v6 = 0;
    if (!*(_QWORD *)(a1 + 16))
      goto LABEL_11;
  }
  v7 = sub_19E3247E4(0x7363696C617469, 0xE700000000000000);
  if ((v8 & 1) == 0
    || (sub_19E324848(*(_QWORD *)(a1 + 56) + 32 * v7, (uint64_t)&v15),
        sub_19E24B854(0, (unint64_t *)&qword_1ECFC6A00),
        (swift_dynamicCast() & 1) == 0))
  {
LABEL_11:
    v9 = 0;
    if (!*(_QWORD *)(a1 + 16))
      goto LABEL_14;
    goto LABEL_12;
  }
  v9 = objc_msgSend(v14, sel_BOOLValue);

  if (!*(_QWORD *)(a1 + 16))
    goto LABEL_14;
LABEL_12:
  v10 = sub_19E3247E4(0x6E696C7265646E75, 0xE900000000000065);
  if ((v11 & 1) != 0)
  {
    sub_19E324848(*(_QWORD *)(a1 + 56) + 32 * v10, (uint64_t)&v15);
    goto LABEL_15;
  }
LABEL_14:
  v15 = 0u;
  v16 = 0u;
LABEL_15:
  swift_bridgeObjectRelease();
  if (!*((_QWORD *)&v16 + 1))
  {
    sub_19E322284((uint64_t)&v15);
    goto LABEL_19;
  }
  sub_19E24B854(0, (unint64_t *)&qword_1ECFC6A00);
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_19:
    v12 = 0;
    return objc_msgSend(v2, sel_initWithBold_italics_underline_, v6, v9, v12);
  }
  v12 = objc_msgSend(v14, sel_BOOLValue);

  return objc_msgSend(v2, sel_initWithBold_italics_underline_, v6, v9, v12);
}

unint64_t sub_19E330258()
{
  void *v0;
  uint64_t inited;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  sub_19E247E74(&qword_1EE5019B8);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_19E381BB0;
  *(_QWORD *)(inited + 32) = 1684828002;
  *(_QWORD *)(inited + 40) = 0xE400000000000000;
  objc_msgSend(v0, sel_bold);
  v2 = sub_19E36F9B4();
  v3 = sub_19E24B854(0, (unint64_t *)&qword_1ECFC6A00);
  *(_QWORD *)(inited + 48) = v2;
  *(_QWORD *)(inited + 72) = v3;
  *(_QWORD *)(inited + 80) = 0x7363696C617469;
  *(_QWORD *)(inited + 88) = 0xE700000000000000;
  objc_msgSend(v0, sel_italics);
  *(_QWORD *)(inited + 96) = sub_19E36F9B4();
  *(_QWORD *)(inited + 120) = v3;
  *(_QWORD *)(inited + 128) = 0x6E696C7265646E75;
  *(_QWORD *)(inited + 136) = 0xE900000000000065;
  objc_msgSend(v0, sel_underline);
  v4 = sub_19E36F9B4();
  *(_QWORD *)(inited + 168) = v3;
  *(_QWORD *)(inited + 144) = v4;
  return sub_19E32D864(inited);
}

void __swiftcall IMRichCardStyle.init()(IMRichCardStyle *__return_ptr retstr)
{
  objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_init);
}

void IMRichCardStyle.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t type metadata accessor for IMRichCardStyle(uint64_t a1)
{
  return sub_19E24B854(a1, &qword_1EE502B80);
}

void __swiftcall IMActionSettings.init(dictionary:)(IMActionSettings_optional *__return_ptr retstr, Swift::OpaquePointer dictionary)
{
  id v2;
  void *v3;

  v2 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  v3 = (void *)sub_19E36F81C();
  swift_bridgeObjectRelease();
  objc_msgSend(v2, sel_initWithDictionary_, v3);

}

id IMActionSettings.init(dictionary:)(uint64_t a1)
{
  void *v1;
  void *v2;
  unint64_t v4;
  char v5;
  uint64_t v7;
  __int128 v8;
  __int128 v9;

  v2 = v1;
  if (!*(_QWORD *)(a1 + 16) || (v4 = sub_19E3247E4(1701869940, 0xE400000000000000), (v5 & 1) == 0))
  {
    v8 = 0u;
    v9 = 0u;
    swift_bridgeObjectRelease();
    goto LABEL_7;
  }
  sub_19E324848(*(_QWORD *)(a1 + 56) + 32 * v4, (uint64_t)&v8);
  swift_bridgeObjectRelease();
  if (!*((_QWORD *)&v9 + 1))
  {
LABEL_7:
    sub_19E322284((uint64_t)&v8);
    goto LABEL_8;
  }
  if ((swift_dynamicCast() & 1) != 0)
    return objc_msgSend(v2, sel_initWithType_, v7);
LABEL_8:
  swift_getObjectType();
  swift_deallocPartialClassInstance();
  return 0;
}

void __swiftcall IMActionSettings.init()(IMActionSettings *__return_ptr retstr)
{
  objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_init);
}

void IMActionSettings.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

unint64_t type metadata accessor for IMActionSettings()
{
  unint64_t result;

  result = qword_1EE502B90;
  if (!qword_1EE502B90)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1EE502B90);
  }
  return result;
}

uint64_t sub_19E3307C4()
{
  uint64_t v0;

  v0 = sub_19E36F798();
  sub_19E3222DC(v0, qword_1EE502B98);
  sub_19E3222C4(v0, (uint64_t)qword_1EE502B98);
  return sub_19E36F78C();
}

id sub_19E330838(uint64_t a1, unint64_t a2, void *a3)
{
  id v6;
  id v7;
  id v8;
  void *v9;
  id v10;
  id v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  int v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  id v23;
  id v24;
  id v25;
  NSObject *v26;
  os_log_type_t v27;
  uint64_t v28;
  void *v29;
  id v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  id v34;
  void *v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  id v39;
  id v40;
  void *v41;
  id v42;
  id v43;
  id v44;
  NSObject *v45;
  os_log_type_t v46;
  char **v47;
  uint64_t v48;
  void *v49;
  id v50;
  void *v51;
  id v52;
  uint64_t v54;
  id v55;
  uint64_t v56;
  unint64_t v57;
  id v58;
  unint64_t v59;
  uint64_t v60;

  v60 = *MEMORY[0x1E0C80C00];
  v6 = (id)im_primary_queue();
  v7 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CA6E38]), sel_initWithQueue_, v6);

  v8 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CA6D40]), sel_init);
  v9 = (void *)sub_19E36F864();
  v10 = objc_msgSend(v9, sel_im_stripCategoryLabel);

  if (!v10)
  {
    sub_19E36F888();
    v10 = (id)sub_19E36F864();
    swift_bridgeObjectRelease();
  }
  v11 = objc_msgSend(v10, sel__stripFZIDPrefix);

  if (!v11)
  {

    return 0;
  }
  v12 = sub_19E36F888();
  v14 = v13;
  v15 = HIBYTE(v13) & 0xF;
  if ((v13 & 0x2000000000000000) == 0)
    v15 = v12 & 0xFFFFFFFFFFFFLL;
  if (!v15)
  {
    swift_bridgeObjectRelease();

    return 0;
  }
  v16 = (void *)v12;
  v56 = a1;
  v57 = a2;
  objc_msgSend(v8, sel_setUri_, v11);
  if (IMStringIsEmail()
    && (v17 = 980445555, v58 = v16, v59 = v14, sub_19E323E98(), (sub_19E36FC00() & 1) == 0))
  {

  }
  else
  {
    v18 = MEMORY[0x1A1AE7D10](v11);

    if (!v18 || (v17 = 980182388, v58 = v16, v59 = v14, sub_19E323E98(), (sub_19E36FC00() & 1) != 0))
    {
      swift_bridgeObjectRelease();
      goto LABEL_16;
    }
  }
  v58 = (id)v17;
  v59 = 0xE400000000000000;
  sub_19E36F8C4();
  swift_bridgeObjectRelease();
  v19 = (void *)sub_19E36F864();
  swift_bridgeObjectRelease();
  objc_msgSend(v8, sel_setUri_, v19);

LABEL_16:
  if (qword_1EE501548 != -1)
    swift_once();
  v20 = sub_19E36F798();
  v21 = sub_19E3222C4(v20, (uint64_t)qword_1EE502B98);
  v22 = v8;
  v23 = a3;
  v24 = v22;
  v25 = v23;
  v26 = sub_19E36F780();
  v27 = sub_19E36FA80();
  if (os_log_type_enabled(v26, v27))
  {
    v54 = v21;
    v55 = v7;
    v28 = swift_slowAlloc();
    v29 = (void *)swift_slowAlloc();
    v58 = v29;
    *(_DWORD *)v28 = 136315394;
    v30 = objc_msgSend(v24, sel_uri);
    v31 = sub_19E36F888();
    v33 = v32;

    sub_19E337764(v31, v33, (uint64_t *)&v58);
    sub_19E36FBD0();

    swift_bridgeObjectRelease();
    *(_WORD *)(v28 + 12) = 2080;
    v34 = objc_msgSend(v25, sel_phoneNumber);
    if (v34)
    {
      v35 = v34;
      v36 = sub_19E36F888();
      v38 = v37;

    }
    else
    {
      v38 = 0xE400000000000000;
      v36 = 1701736270;
    }
    sub_19E337764(v36, v38, (uint64_t *)&v58);
    sub_19E36FBD0();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_19E239000, v26, v27, "Reading cached capabilities for %s, for RCS subscription %s", (uint8_t *)v28, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1A1AE8ACC](v29, -1, -1);
    MEMORY[0x1A1AE8ACC](v28, -1, -1);

    v7 = v55;
  }
  else
  {

  }
  v58 = 0;
  v39 = objc_msgSend(v7, sel_readCachedCapabilities_forDestination_withError_, v25, v24, &v58, v54, v55);
  v40 = v58;
  if (!v39)
  {
    v50 = v58;
    v51 = (void *)sub_19E36F57C();

    swift_willThrow();
    return 0;
  }
  v41 = v39;
  swift_bridgeObjectRetain_n();
  v42 = v41;
  v43 = v40;
  v44 = v42;
  v45 = sub_19E36F780();
  v46 = sub_19E36FA80();
  v47 = &selRef_IMSynchronizeMMSCapabilityToWatch_;
  if (os_log_type_enabled(v45, v46))
  {
    v48 = swift_slowAlloc();
    v49 = (void *)swift_slowAlloc();
    v58 = v49;
    *(_DWORD *)v48 = 136315394;
    swift_bridgeObjectRetain();
    sub_19E337764(v56, v57, (uint64_t *)&v58);
    sub_19E36FBD0();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v48 + 12) = 1024;
    objc_msgSend(v44, sel_isBot);

    v47 = &selRef_IMSynchronizeMMSCapabilityToWatch_;
    sub_19E36FBD0();

    _os_log_impl(&dword_19E239000, v45, v46, "%s is a chat bot: %{BOOL}d, verified by telephony options", (uint8_t *)v48, 0x12u);
    swift_arrayDestroy();
    MEMORY[0x1A1AE8ACC](v49, -1, -1);
    MEMORY[0x1A1AE8ACC](v48, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  v52 = objc_msgSend(v44, v47[372]);

  return v52;
}

id sub_19E330F20()
{
  id v0;
  id v1;
  id v2;
  unint64_t v3;
  id v4;
  void *v5;
  id v6;
  id v7;
  id v8;
  void *v9;
  id v10;
  id v11;
  id v12;
  void *v13;
  void *ObjCClassFromMetadata;
  id v15;
  void *v16;
  id v17;
  uint64_t v18;
  id v20[2];

  v20[1] = *(id *)MEMORY[0x1E0C80C00];
  v0 = objc_msgSend((id)objc_opt_self(), sel_sharedInstance);
  v1 = objc_msgSend(v0, sel_ctSubscriptionInfo);

  if (!v1)
    return 0;
  v2 = objc_msgSend(v1, sel___im_subscriptionsWithRCSSupport);

  sub_19E24B854(0, &qword_1EE500820);
  v3 = sub_19E36F960();

  if (v3 >> 62)
  {
    swift_bridgeObjectRetain();
    v18 = sub_19E36FCFC();
    swift_bridgeObjectRelease();
    if (v18)
      goto LABEL_4;
    goto LABEL_12;
  }
  if (!*(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_12:
    swift_bridgeObjectRelease();
    return 0;
  }
LABEL_4:
  if ((v3 & 0xC000000000000001) != 0)
  {
    v4 = (id)MEMORY[0x1A1AE7368](0, v3);
  }
  else
  {
    if (!*(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10))
      __break(1u);
    v4 = *(id *)(v3 + 32);
  }
  v5 = v4;
  swift_bridgeObjectRelease();
  v6 = (id)im_primary_queue();
  v7 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CA6E38]), sel_initWithQueue_, v6);

  v8 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CA6D38]), sel_init);
  v9 = (void *)sub_19E36F864();
  objc_msgSend(v8, sel_setBase64String_, v9);

  v20[0] = 0;
  v10 = objc_msgSend(v7, sel_decodeSuggestionsBase64_withBase64String_withError_, v5, v8, v20);
  if (v10)
  {
    v11 = v20[0];
  }
  else
  {
    v12 = v20[0];
    v13 = (void *)sub_19E36F57C();

    swift_willThrow();
  }
  ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata();
  v15 = objc_msgSend(v10, sel_chipList);
  v16 = (void *)sub_19E36F864();
  v17 = objc_msgSend(ObjCClassFromMetadata, sel_IMChipListFromCTChipList_originalID_, v15, v16);

  return v17;
}

uint64_t sub_19E33125C(void *a1)
{
  id v1;
  id v2;
  void *v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t result;
  void *v7;
  uint64_t i;
  void *v9;
  id v10;
  void *v11;
  id v12;
  id v13;
  id v14;
  id v15;
  void *v16;
  id v17;
  uint64_t v18;

  if (!a1)
    return 0;
  v1 = a1;
  v2 = objc_msgSend(v1, sel_list);
  if (!v2)
  {

    return 0;
  }
  v3 = v2;
  sub_19E24B854(0, &qword_1EE502C30);
  v4 = sub_19E36F960();

  v18 = MEMORY[0x1E0DEE9D8];
  if (!(v4 >> 62))
  {
    v5 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v5)
      goto LABEL_5;
LABEL_19:
    swift_bridgeObjectRelease();
LABEL_20:
    v15 = objc_allocWithZone((Class)IMChipList);
    type metadata accessor for IMChip();
    v16 = (void *)sub_19E36F954();
    swift_bridgeObjectRelease();
    v14 = objc_msgSend(v15, sel_initWithChipList_, v16);

    return (uint64_t)v14;
  }
  swift_bridgeObjectRetain();
  v5 = sub_19E36FCFC();
  swift_bridgeObjectRelease();
  if (!v5)
    goto LABEL_19;
LABEL_5:
  result = swift_getObjCClassFromMetadata();
  if (v5 >= 1)
  {
    v7 = (void *)result;
    v17 = v1;
    for (i = 0; i != v5; ++i)
    {
      if ((v4 & 0xC000000000000001) != 0)
        v10 = (id)MEMORY[0x1A1AE7368](i, v4);
      else
        v10 = *(id *)(v4 + 8 * i + 32);
      v9 = v10;
      v11 = (void *)sub_19E36F864();
      v12 = objc_msgSend(v7, sel_IMChipFromCTChip_originalID_, v9, v11);

      if (v12)
      {
        v13 = v12;
        MEMORY[0x1A1AE7014]();
        if (*(_QWORD *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
          sub_19E36F984();
        sub_19E36F99C();
        sub_19E36F978();

        v9 = v13;
      }

    }
    swift_bridgeObjectRelease();
    v1 = v17;
    goto LABEL_20;
  }
  __break(1u);
  return result;
}

IMCTChatBotUtilities __swiftcall IMCTChatBotUtilities.init()()
{
  return (IMCTChatBotUtilities)objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_init);
}

id IMCTChatBotUtilities.init()()
{
  objc_super v1;

  v1.super_class = (Class)IMCTChatBotUtilities;
  return objc_msgSendSuper2(&v1, sel_init);
}

uint64_t type metadata accessor for IMCTChatBotUtilities(uint64_t a1)
{
  return sub_19E24B854(a1, &qword_1EE502BB0);
}

id sub_19E33163C(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *v8;
  void *v9;
  void *v14;
  void *v15;
  void *v16;
  id v17;

  v9 = v8;
  if (a4)
  {
    v14 = (void *)sub_19E36F864();
    swift_bridgeObjectRelease();
    if (a6)
      goto LABEL_3;
LABEL_6:
    v15 = 0;
    if (a8)
      goto LABEL_4;
LABEL_7:
    v16 = 0;
    goto LABEL_8;
  }
  v14 = 0;
  if (!a6)
    goto LABEL_6;
LABEL_3:
  v15 = (void *)sub_19E36F864();
  swift_bridgeObjectRelease();
  if (!a8)
    goto LABEL_7;
LABEL_4:
  v16 = (void *)sub_19E36F864();
  swift_bridgeObjectRelease();
LABEL_8:
  v17 = objc_msgSend(v9, sel_initWithLatitude_longitude_query_label_fallbackUrl_, a1, a2, v14, v15, v16);

  return v17;
}

id sub_19E331740(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  void *v10;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  id v17;

  v12 = (void *)sub_19E36F864();
  swift_bridgeObjectRelease();
  v13 = (void *)sub_19E36F864();
  swift_bridgeObjectRelease();
  v14 = (void *)sub_19E36F864();
  swift_bridgeObjectRelease();
  if (!a8)
  {
    v15 = 0;
    if (a10)
      goto LABEL_3;
LABEL_5:
    v16 = 0;
    goto LABEL_6;
  }
  v15 = (void *)sub_19E36F864();
  swift_bridgeObjectRelease();
  if (!a10)
    goto LABEL_5;
LABEL_3:
  v16 = (void *)sub_19E36F864();
  swift_bridgeObjectRelease();
LABEL_6:
  v17 = objc_msgSend(v10, sel_initWithStartTime_endTime_title_calDescription_fallbackUrl_, v12, v13, v14, v15, v16);

  return v17;
}

id sub_19E331860(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  void *v6;
  void *v9;
  void *v10;
  void *v11;
  id v12;

  v9 = (void *)sub_19E36F864();
  swift_bridgeObjectRelease();
  if (!a4)
  {
    v10 = 0;
    if (a6)
      goto LABEL_3;
LABEL_5:
    v11 = 0;
    goto LABEL_6;
  }
  v10 = (void *)sub_19E36F864();
  swift_bridgeObjectRelease();
  if (!a6)
    goto LABEL_5;
LABEL_3:
  v11 = (void *)sub_19E36F864();
  swift_bridgeObjectRelease();
LABEL_6:
  v12 = objc_msgSend(v6, sel_initWithPhoneNumber_fallbackUrl_subject_, v9, v10, v11);

  return v12;
}

void sub_19E33192C(uint64_t a1, unint64_t a2)
{
  id v4;
  void *v5;
  unsigned int v6;
  id v7;
  id v8;
  id v9;
  unint64_t v10;
  uint64_t v11;
  id v12;
  void *v13;
  unsigned __int8 v14;
  uint64_t v15;
  unint64_t v16;
  id v17;
  void *v18;
  unsigned __int8 v19;

  v4 = objc_msgSend((id)objc_opt_self(), sel_sharedInstance);
  if (!v4)
    goto LABEL_28;
  v5 = v4;
  v6 = objc_msgSend(v4, sel_isRBMSupported);

  if (v6)
  {
    v7 = objc_msgSend((id)objc_opt_self(), sel_sharedInstance);
    v8 = objc_msgSend(v7, sel_ctSubscriptionInfo);

    if (v8)
    {
      v9 = objc_msgSend(v8, sel___im_subscriptionsWithRCSSupport);

      sub_19E24B854(0, &qword_1EE500820);
      v10 = sub_19E36F960();

      if (v10 >> 62)
      {
LABEL_24:
        swift_bridgeObjectRetain();
        v11 = sub_19E36FCFC();
        swift_bridgeObjectRelease();
        if (v11)
          goto LABEL_6;
      }
      else
      {
        v11 = *(_QWORD *)((v10 & 0xFFFFFFFFFFFFF8) + 0x10);
        if (v11)
        {
LABEL_6:
          if ((v10 & 0xC000000000000001) != 0)
          {
            v12 = (id)MEMORY[0x1A1AE7368](0, v10);
LABEL_9:
            v13 = v12;
            v14 = sub_19E330838(a1, a2, v12);

            if ((v14 & 1) == 0)
            {
              v15 = 0;
              while (v11 - 1 != v15)
              {
                v16 = v15 + 1;
                if ((v10 & 0xC000000000000001) != 0)
                {
                  v17 = (id)MEMORY[0x1A1AE7368](v15 + 1, v10);
                }
                else
                {
                  if (v16 >= *(_QWORD *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10))
                    goto LABEL_23;
                  v17 = *(id *)(v10 + 8 * v15 + 40);
                }
                v18 = v17;
                if (__OFADD__(v16, 1))
                {
                  __break(1u);
LABEL_23:
                  __break(1u);
                  goto LABEL_24;
                }
                v19 = sub_19E330838(a1, a2, v17);

                ++v15;
                if ((v19 & 1) != 0)
                  goto LABEL_20;
              }
            }
            goto LABEL_20;
          }
          if (*(_QWORD *)((v10 & 0xFFFFFFFFFFFFF8) + 0x10))
          {
            v12 = *(id *)(v10 + 32);
            goto LABEL_9;
          }
          __break(1u);
LABEL_28:
          __break(1u);
          return;
        }
      }
LABEL_20:
      swift_bridgeObjectRelease();
    }
  }
}

id sub_19E331B68(void *a1)
{
  id v1;
  id v2;
  id v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  id v9;
  id v10;
  void *v11;
  void *v12;
  id v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  id v19;
  void *v20;
  id v21;
  id v22;
  id v23;
  id v24;
  void *v25;
  void *v26;
  id v27;
  id v28;
  id v29;
  __objc2_class *v30;
  id v31;
  id v32;
  id v33;
  id v35;
  void *v36;
  id v37;
  id v38;
  id v39;
  id v40;
  id v41;
  uint64_t v42;
  uint64_t v43;
  id v44;
  id v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  id v49;
  id v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  id v54;
  id v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  id v59;
  void *v60;
  id v61;
  id v62;
  void *v63;
  id v64;
  uint64_t v65;
  uint64_t v66;
  id v67;
  id v68;
  void *v69;
  uint64_t v70;
  uint64_t v71;
  id v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  id v77;
  void *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  id v82;
  id v83;
  id v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  id v88;
  void *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  id v93;
  id v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  id v98;
  id v99;
  id v100;
  void *v101;
  uint64_t v102;
  uint64_t v103;
  __objc2_class *v104;
  id v105;
  __objc2_class *v106;
  id v107;
  void *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  id v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  id v116;
  _OWORD v117[2];
  _OWORD v118[2];

  v1 = objc_msgSend(a1, sel_action);
  if (v1)
  {
    sub_19E36FC0C();
    swift_unknownObjectRelease();
    sub_19E24B594(v117, v118);
    sub_19E324848((uint64_t)v118, (uint64_t)v117);
    sub_19E24B854(0, &qword_1EE502BC8);
    if (swift_dynamicCast())
    {
      v2 = v116;
      v3 = objc_msgSend(v116, sel_mode);
      v4 = objc_msgSend(v116, "url");
      v5 = sub_19E36F5E8();
      v6 = *(_QWORD *)(v5 - 8);
      MEMORY[0x1E0C80A78](v5);
      v8 = (char *)&v113 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
      sub_19E36F5D0();

      sub_19E36F5AC();
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      v9 = objc_msgSend(v2, sel_parameters);
      sub_19E36F888();

      v10 = objc_allocWithZone((Class)IMActionOpenWeb);
      v11 = (void *)sub_19E36F864();
      swift_bridgeObjectRelease();
      v12 = (void *)sub_19E36F864();
      swift_bridgeObjectRelease();
      v1 = objc_msgSend(v10, sel_initWithMode_url_parameters_, v3, v11, v12);

      sub_19E323384((uint64_t)v118);
LABEL_16:
      sub_19E323384((uint64_t)v117);
      return v1;
    }
    sub_19E24B854(0, &qword_1EE502BD0);
    if (swift_dynamicCast())
    {
      v13 = v116;
      v14 = objc_msgSend(v116, "url");
      v15 = sub_19E36F5E8();
      v16 = *(_QWORD *)(v15 - 8);
      MEMORY[0x1E0C80A78](v15);
      v18 = (char *)&v113 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
      sub_19E36F5D0();

      sub_19E36F5AC();
      (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
      v19 = objc_allocWithZone((Class)IMActionOpenApp);
      v20 = (void *)sub_19E36F864();
      swift_bridgeObjectRelease();
      v1 = objc_msgSend(v19, sel_initWithUrl_, v20);

      sub_19E323384((uint64_t)v118);
      goto LABEL_16;
    }
    sub_19E24B854(0, &qword_1EE502BD8);
    if (swift_dynamicCast())
    {
      v21 = v116;
      v22 = objc_msgSend(v116, sel_phoneNumber);
      sub_19E36F888();

      v23 = objc_msgSend(v116, sel_text);
      sub_19E36F888();

      v24 = objc_allocWithZone((Class)IMActionComposeText);
      v25 = (void *)sub_19E36F864();
      swift_bridgeObjectRelease();
      v26 = (void *)sub_19E36F864();
      swift_bridgeObjectRelease();
      v27 = objc_msgSend(v24, sel_initWithPhoneNumber_text_, v25, v26);
LABEL_8:
      v1 = v27;

LABEL_15:
      sub_19E323384((uint64_t)v118);
      goto LABEL_16;
    }
    sub_19E24B854(0, &qword_1EE502BE0);
    if (swift_dynamicCast())
    {
      v28 = v116;
      v29 = objc_msgSend(v116, sel_phoneNumber);
      sub_19E36F888();

      v30 = IMActionComposeAudio;
LABEL_13:
      v32 = objc_allocWithZone((Class)v30);
      v33 = (id)sub_19E36F864();
      swift_bridgeObjectRelease();
      v1 = objc_msgSend(v32, sel_initWithPhoneNumber_, v33);

LABEL_14:
      goto LABEL_15;
    }
    sub_19E24B854(0, &qword_1EE502BE8);
    if (swift_dynamicCast())
    {
      v28 = v116;
      v31 = objc_msgSend(v116, sel_phoneNumber);
      sub_19E36F888();

      v30 = IMActionComposeVideo;
      goto LABEL_13;
    }
    sub_19E24B854(0, &qword_1EE502BF0);
    if (swift_dynamicCast())
    {
      v33 = v116;
      v35 = objc_msgSend(v116, sel_coordinates);
      if (v35)
      {
        v36 = v35;
        v37 = objc_msgSend(v35, sel_latitude);

      }
      else
      {
        v37 = 0;
      }
      v59 = objc_msgSend(v116, sel_coordinates);
      if (v59)
      {
        v60 = v59;
        v61 = objc_msgSend(v59, sel_longitude);

      }
      else
      {
        v61 = 0;
      }
      v62 = objc_msgSend(v116, sel_query);
      v63 = v62;
      if (v62)
      {
        v64 = objc_msgSend(v62, sel_query);

        if (v64)
        {
          v63 = (void *)sub_19E36F888();
          v66 = v65;

LABEL_39:
          v72 = objc_msgSend(v116, sel_label);
          if (v72)
          {
            v73 = v72;
            v74 = sub_19E36F888();
            v76 = v75;

          }
          else
          {
            v74 = 0;
            v76 = 0;
          }
          v77 = objc_msgSend(v116, sel_fallbackUrl);
          if (v77)
          {
            v78 = v77;
            v79 = sub_19E36F888();
            v81 = v80;

          }
          else
          {
            v79 = 0;
            v81 = 0;
          }
          v82 = objc_allocWithZone((Class)IMActionShowLocation);
          v83 = sub_19E33163C(v37, v61, (uint64_t)v63, v66, v74, v76, v79, v81);
LABEL_69:
          v1 = v83;
          goto LABEL_14;
        }
        v63 = 0;
      }
      v66 = 0;
      goto LABEL_39;
    }
    sub_19E24B854(0, &qword_1EE502BF8);
    if (swift_dynamicCast())
    {
      v38 = v116;
      v39 = objc_msgSend(objc_allocWithZone((Class)IMActionRequestLocation), sel_initWithSendPush_, objc_msgSend(v116, sel_sendPush));
LABEL_23:
      v1 = v39;

      goto LABEL_15;
    }
    sub_19E24B854(0, &qword_1EE502C00);
    if (swift_dynamicCast())
    {
      v33 = v116;
      v40 = objc_msgSend(v116, sel_event);
      v41 = objc_msgSend(v40, sel_startTime);

      v42 = sub_19E36F888();
      v114 = v43;
      v115 = v42;

      v44 = objc_msgSend(v116, sel_event);
      v45 = objc_msgSend(v44, sel_endTime);

      v46 = sub_19E36F888();
      v48 = v47;

      v49 = objc_msgSend(v116, sel_event);
      v50 = objc_msgSend(v49, sel_title);

      v51 = sub_19E36F888();
      v53 = v52;

      v54 = objc_msgSend(v116, sel_event);
      v55 = objc_msgSend(v54, sel_calDescription);

      if (v55)
      {
        v56 = sub_19E36F888();
        v58 = v57;

      }
      else
      {
        v56 = 0;
        v58 = 0;
      }
      v93 = objc_msgSend(v116, sel_event);
      v94 = objc_msgSend(v93, sel_fallbackUrl);

      if (v94)
      {
        v95 = sub_19E36F888();
        v97 = v96;

      }
      else
      {
        v95 = 0;
        v97 = 0;
      }
      v98 = objc_allocWithZone((Class)IMActionCalendar);
      v83 = sub_19E331740(v115, v114, v46, v48, v51, v53, v56, v58, v95, v97);
      goto LABEL_69;
    }
    sub_19E24B854(0, &qword_1EE502C08);
    if (swift_dynamicCast())
    {
      v21 = v116;
      v67 = objc_msgSend(v116, sel_phoneNumber);
      sub_19E36F888();

      v68 = objc_msgSend(v116, sel_fallbackUrl);
      if (v68)
      {
        v69 = v68;
        sub_19E36F888();
        v71 = v70;

      }
      else
      {
        v71 = 0;
      }
      v25 = (void *)sub_19E36F864();
      swift_bridgeObjectRelease();
      if (v71)
      {
        v26 = (void *)sub_19E36F864();
        swift_bridgeObjectRelease();
      }
      else
      {
        v26 = 0;
      }
      v104 = IMActionDialVideo;
    }
    else
    {
      sub_19E24B854(0, &qword_1EE502C10);
      if (swift_dynamicCast())
      {
        v33 = v116;
        v84 = objc_msgSend(v116, sel_phoneNumber);
        v85 = sub_19E36F888();
        v87 = v86;

        v88 = objc_msgSend(v116, sel_fallbackUrl);
        if (v88)
        {
          v89 = v88;
          v90 = sub_19E36F888();
          v92 = v91;

        }
        else
        {
          v90 = 0;
          v92 = 0;
        }
        v107 = objc_msgSend(v116, sel_subject);
        if (v107)
        {
          v108 = v107;
          v109 = sub_19E36F888();
          v111 = v110;

        }
        else
        {
          v109 = 0;
          v111 = 0;
        }
        v112 = objc_allocWithZone((Class)IMActionDialEnriched);
        v83 = sub_19E331860(v85, v87, v90, v92, v109, v111);
        goto LABEL_69;
      }
      sub_19E24B854(0, &qword_1EE502C18);
      if (!swift_dynamicCast())
      {
        sub_19E24B854(0, &qword_1EE502C20);
        if (swift_dynamicCast())
        {
          v38 = v116;
          v105 = objc_msgSend(v116, sel_type);
          v106 = IMActionDevice;
        }
        else
        {
          sub_19E24B854(0, &qword_1EE502C28);
          if (!swift_dynamicCast())
          {
            sub_19E323384((uint64_t)v118);
            sub_19E323384((uint64_t)v117);
            return 0;
          }
          v38 = v116;
          v105 = objc_msgSend(v116, sel_type);
          v106 = IMActionSettings;
        }
        v39 = objc_msgSend(objc_allocWithZone((Class)v106), sel_initWithType_, v105);
        goto LABEL_23;
      }
      v21 = v116;
      v99 = objc_msgSend(v116, sel_phoneNumber);
      sub_19E36F888();

      v100 = objc_msgSend(v116, sel_fallbackUrl);
      if (v100)
      {
        v101 = v100;
        sub_19E36F888();
        v103 = v102;

      }
      else
      {
        v103 = 0;
      }
      v25 = (void *)sub_19E36F864();
      swift_bridgeObjectRelease();
      if (v103)
      {
        v26 = (void *)sub_19E36F864();
        swift_bridgeObjectRelease();
      }
      else
      {
        v26 = 0;
      }
      v104 = IMActionDialPhone;
    }
    v27 = objc_msgSend(objc_allocWithZone((Class)v104), sel_initWithPhoneNumber_fallbackUrl_, v25, v26);
    goto LABEL_8;
  }
  return v1;
}

id sub_19E3328D8(void *a1)
{
  void *v2;
  id v3;
  id v4;
  id v5;
  id v6;
  id v7;
  void *v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;
  void *v15;
  void *v16;
  void *v17;
  id v18;
  void *v19;
  id v20;
  id v21;
  id v22;
  void *v23;
  void *v24;
  id v25;
  void *v26;
  id v27;
  id v29;
  _BYTE v30[32];
  _OWORD v31[2];

  if (objc_msgSend(a1, sel_chip))
  {
    sub_19E36FC0C();
    swift_unknownObjectRelease();
    sub_19E323318((uint64_t)v31, (uint64_t)v30);
    sub_19E24B854(0, &qword_1EE502BB8);
    if ((swift_dynamicCast() & 1) != 0)
    {
      v2 = v29;
      v3 = objc_msgSend(v29, sel_data);
      v4 = objc_msgSend(v3, sel_displayText);

      sub_19E36F888();
      v5 = objc_msgSend(v29, sel_data);
      v6 = objc_msgSend(v5, sel_postback);

      if (v6)
      {
        v7 = objc_msgSend(v6, sel_data);

        sub_19E36F888();
        v6 = v8;

      }
      swift_bridgeObjectRetain();
      v16 = (void *)sub_19E36F864();
      swift_bridgeObjectRelease();
      if (v6)
      {
        v17 = (void *)sub_19E36F864();
        swift_bridgeObjectRelease();
      }
      else
      {
        v17 = 0;
      }
      v18 = objc_allocWithZone((Class)IMChipSuggestion);
      v19 = (void *)sub_19E36F864();
      swift_bridgeObjectRelease();
      v20 = objc_msgSend(v18, sel_initWithDisplayText_postback_inReplyToID_, v16, v17, v19);

      v21 = objc_msgSend(objc_allocWithZone((Class)IMChipReply), sel_initWithSuggestion_, v20);
      v22 = objc_msgSend(a1, sel_type);
LABEL_18:
      v9 = objc_msgSend(objc_allocWithZone((Class)IMChip), sel_initWithType_chip_, v22, v21);

      sub_19E323384((uint64_t)v30);
      goto LABEL_19;
    }
    sub_19E24B854(0, &qword_1EE502BC0);
    if (swift_dynamicCast())
    {
      v2 = v29;
      v10 = objc_msgSend(v29, sel_suggestion);
      v11 = objc_msgSend(v10, sel_displayText);

      sub_19E36F888();
      v12 = objc_msgSend(v29, sel_suggestion);
      v13 = objc_msgSend(v12, sel_postback);

      if (v13)
      {
        v14 = objc_msgSend(v13, sel_data);

        sub_19E36F888();
        v13 = v15;

      }
      swift_bridgeObjectRetain();
      v23 = (void *)sub_19E36F864();
      swift_bridgeObjectRelease();
      if (v13)
      {
        v24 = (void *)sub_19E36F864();
        swift_bridgeObjectRelease();
      }
      else
      {
        v24 = 0;
      }
      v25 = objc_allocWithZone((Class)IMChipSuggestion);
      v26 = (void *)sub_19E36F864();
      swift_bridgeObjectRelease();
      v27 = objc_msgSend(v25, sel_initWithDisplayText_postback_inReplyToID_, v23, v24, v26);

      v21 = objc_msgSend(objc_allocWithZone((Class)IMChipAction), sel_initWithSuggestion_type_action_, v27, objc_msgSend(v29, sel_type), sub_19E331B68(v29));
      swift_unknownObjectRelease();
      v22 = objc_msgSend(a1, sel_type);
      goto LABEL_18;
    }
    sub_19E323384((uint64_t)v30);
    v9 = 0;
  }
  else
  {
    v9 = 0;
    memset(v31, 0, sizeof(v31));
  }
LABEL_19:
  sub_19E322284((uint64_t)v31);
  return v9;
}

uint64_t ProtectiveQueue.__allocating_init(label:qos:attributes:autoreleaseFrequency:target:initialState:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v14;

  v14 = swift_allocObject();
  ProtectiveQueue.init(label:qos:attributes:autoreleaseFrequency:target:initialState:)(a1, a2, a3, a4, a5, a6, a7);
  return v14;
}

uint64_t ProtectiveQueue.sync<A>(execute:)()
{
  return sub_19E36FAF8();
}

{
  return sub_19E36FAF8();
}

uint64_t ProtectiveQueue.async(execute:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  _QWORD *v13;
  void *v14;
  _QWORD v16[2];
  _QWORD aBlock[6];

  v5 = sub_19E36F7BC();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_19E36F7D4();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v12 = (char *)v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = (_QWORD *)swift_allocObject();
  v13[2] = a1;
  v13[3] = a2;
  v13[4] = v2;
  aBlock[4] = sub_19E333384;
  aBlock[5] = v13;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_19E333388;
  aBlock[3] = &unk_1E3FB49E0;
  v14 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  sub_19E36F7C8();
  v16[1] = MEMORY[0x1E0DEE9D8];
  sub_19E3333BC();
  sub_19E247E74((uint64_t *)&unk_1ECFC69E0);
  sub_19E333404();
  sub_19E36FC30();
  MEMORY[0x1A1AE71D0](0, v12, v8, v14);
  _Block_release(v14);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  return swift_release();
}

id ProtectiveQueue.underlyingQueue.getter()
{
  uint64_t v0;

  return *(id *)(v0 + 16);
}

uint64_t ProtectiveQueue.init(label:qos:attributes:autoreleaseFrequency:target:initialState:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t *v7;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  void (*v21)(char *, uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD v28[2];
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v35 = a6;
  v32 = a5;
  v33 = a1;
  v34 = a2;
  v37 = *v7;
  v38 = a7;
  v31 = sub_19E36FAD4();
  v10 = *(_QWORD *)(v31 - 8);
  MEMORY[0x1E0C80A78](v31);
  v12 = (char *)v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_19E36FAC8();
  v14 = *(_QWORD *)(v13 - 8);
  v29 = v13;
  v30 = v14;
  MEMORY[0x1E0C80A78](v13);
  v16 = (char *)v28 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_19E36F7D4();
  v18 = *(_QWORD *)(v17 - 8);
  MEMORY[0x1E0C80A78](v17);
  v20 = (char *)v28 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28[1] = sub_19E333450();
  (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))(v20, a3, v17);
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v16, a4, v13);
  v21 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 16);
  v22 = v10;
  v24 = v31;
  v23 = v32;
  v21(v12, v32, v31);
  v25 = sub_19E36FB10();
  (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v23, v24);
  (*(void (**)(uint64_t, uint64_t))(v30 + 8))(a4, v29);
  (*(void (**)(uint64_t, uint64_t))(v18 + 8))(a3, v17);
  v26 = v36;
  *(_QWORD *)(v36 + 16) = v25;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(v37 + 80) - 8) + 32))(v26 + *(_QWORD *)(*(_QWORD *)v26 + 96), v38);
  return v26;
}

char *ProtectiveQueue.__allocating_init(underlyingQueue:initialState:)(uint64_t a1, uint64_t a2)
{
  char *v4;
  uint64_t v5;

  v4 = (char *)swift_allocObject();
  v5 = *(_QWORD *)v4;
  *((_QWORD *)v4 + 2) = a1;
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(v5 + 80) - 8) + 32))(&v4[*(_QWORD *)(v5 + 96)], a2);
  return v4;
}

char *ProtectiveQueue.init(underlyingQueue:initialState:)(uint64_t a1)
{
  char *v1;
  uint64_t v2;

  v2 = *(_QWORD *)v1;
  *((_QWORD *)v1 + 2) = a1;
  (*(void (**)(char *))(*(_QWORD *)(*(_QWORD *)(v2 + 80) - 8) + 32))(&v1[*(_QWORD *)(v2 + 96)]);
  return v1;
}

uint64_t sub_19E333284()
{
  uint64_t v0;
  void (*v1)(uint64_t);
  uint64_t v2;

  v1 = *(void (**)(uint64_t))(v0 + 24);
  v2 = *(_QWORD *)(v0 + 40) + *(_QWORD *)(**(_QWORD **)(v0 + 40) + 96);
  swift_beginAccess();
  v1(v2);
  return swift_endAccess();
}

uint64_t ProtectiveQueue.sync<A>(flags:execute:)()
{
  return sub_19E36FAEC();
}

uint64_t sub_19E333388(uint64_t a1)
{
  void (*v1)(uint64_t);
  uint64_t v2;

  v1 = *(void (**)(uint64_t))(a1 + 32);
  v2 = swift_retain();
  v1(v2);
  return swift_release();
}

uint64_t sub_19E3333B4()
{
  return swift_release();
}

unint64_t sub_19E3333BC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1ECFC69D8;
  if (!qword_1ECFC69D8)
  {
    v1 = sub_19E36F7BC();
    result = MEMORY[0x1A1AE8A18](MEMORY[0x1E0DEF510], v1);
    atomic_store(result, (unint64_t *)&qword_1ECFC69D8);
  }
  return result;
}

unint64_t sub_19E333404()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1ECFC6A08;
  if (!qword_1ECFC6A08)
  {
    v1 = sub_19E247E30((uint64_t *)&unk_1ECFC69E0);
    result = MEMORY[0x1A1AE8A18](MEMORY[0x1E0DEAF38], v1);
    atomic_store(result, (unint64_t *)&qword_1ECFC6A08);
  }
  return result;
}

unint64_t sub_19E333450()
{
  unint64_t result;

  result = qword_1ECFC6BA0;
  if (!qword_1ECFC6BA0)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1ECFC6BA0);
  }
  return result;
}

uint64_t sub_19E33348C()
{
  return sub_19E3334A0();
}

uint64_t sub_19E3334A0()
{
  uint64_t v0;
  void (*v1)(uint64_t);
  uint64_t v2;

  v1 = *(void (**)(uint64_t))(v0 + 24);
  v2 = *(_QWORD *)(v0 + 40) + *(_QWORD *)(**(_QWORD **)(v0 + 40) + 96);
  swift_beginAccess();
  v1(v2);
  return swift_endAccess();
}

uint64_t ProtectiveQueue.async(flags:execute:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  _QWORD *v11;
  void *v12;
  _QWORD aBlock[6];

  v7 = sub_19E36F7D4();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)aBlock - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = (_QWORD *)swift_allocObject();
  v11[2] = a2;
  v11[3] = a3;
  v11[4] = v3;
  aBlock[4] = sub_19E333384;
  aBlock[5] = v11;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_19E333388;
  aBlock[3] = &unk_1E3FB4BB0;
  v12 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  sub_19E36F7C8();
  MEMORY[0x1A1AE71D0](0, v10, a1, v12);
  _Block_release(v12);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  return swift_release();
}

uint64_t sub_19E333658()
{
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_19E333684()
{
  uint64_t v0;
  void (*v1)(uint64_t);
  uint64_t v2;

  v1 = *(void (**)(uint64_t))(v0 + 16);
  v2 = *(_QWORD *)(v0 + 32) + *(_QWORD *)(**(_QWORD **)(v0 + 32) + 96);
  swift_beginAccess();
  v1(v2);
  return swift_endAccess();
}

uint64_t ProtectiveQueue.assertAccessAlreadyOnQueue<A>(execute:)(void (*a1)(char *))
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  id v8;
  uint64_t result;
  char *v10;
  uint64_t v11;

  v3 = sub_19E36F804();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (uint64_t *)((char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = (void *)v1[2];
  *v6 = v7;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v4 + 104))(v6, *MEMORY[0x1E0DEF740], v3);
  v8 = v7;
  LOBYTE(v7) = sub_19E36F810();
  result = (*(uint64_t (**)(_QWORD *, uint64_t))(v4 + 8))(v6, v3);
  if ((v7 & 1) != 0)
  {
    v10 = (char *)v1 + *(_QWORD *)(*v1 + 96);
    swift_beginAccess();
    a1(v10);
    return swift_endAccess();
  }
  else
  {
    __break(1u);
  }
  return result;
}

id *ProtectiveQueue.deinit()
{
  id *v0;
  _QWORD *v1;

  v1 = *v0;

  (*(void (**)(char *))(*(_QWORD *)(v1[10] - 8) + 8))((char *)v0 + *((_QWORD *)*v0 + 12));
  return v0;
}

uint64_t ProtectiveQueue.__deallocating_deinit()
{
  id *v0;
  _QWORD *v1;

  v1 = *v0;

  (*(void (**)(char *))(*(_QWORD *)(v1[10] - 8) + 8))((char *)v0 + *((_QWORD *)*v0 + 12));
  return swift_deallocClassInstance();
}

uint64_t sub_19E333898()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    result = swift_initClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t type metadata accessor for ProtectiveQueue(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_19E329228(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ProtectiveQueue);
}

uint64_t method lookup function for ProtectiveQueue()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of ProtectiveQueue.__allocating_init(label:qos:attributes:autoreleaseFrequency:target:initialState:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 104))();
}

uint64_t dispatch thunk of ProtectiveQueue.__allocating_init(underlyingQueue:initialState:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t sub_19E333A04(uint64_t a1, uint64_t a2)
{
  void *v2;
  id v5;
  uint64_t v6;
  unint64_t v7;
  char v8;
  uint64_t v9;

  if (!a2)
    return 0;
  swift_bridgeObjectRetain();
  v5 = objc_msgSend(v2, sel_urlToTransferGuids);
  v6 = sub_19E36F828();

  if (*(_QWORD *)(v6 + 16) && (v7 = sub_19E3247E4(a1, a2), (v8 & 1) != 0))
  {
    v9 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 16 * v7);
    swift_bridgeObjectRetain();
  }
  else
  {
    v9 = 0;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v9;
}

void __swiftcall IMUrlToTransferMap.init(dictionary:)(IMUrlToTransferMap_optional *__return_ptr retstr, Swift::OpaquePointer dictionary)
{
  id v2;
  void *v3;

  v2 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  v3 = (void *)sub_19E36F81C();
  swift_bridgeObjectRelease();
  objc_msgSend(v2, sel_initWithDictionary_, v3);

}

id IMUrlToTransferMap.init(dictionary:)(uint64_t a1)
{
  void *v1;
  void *v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;
  void *v8;
  id v9;
  uint64_t v11;
  __int128 v12;
  __int128 v13;

  v2 = v1;
  v4 = sub_19E36F888();
  if (!*(_QWORD *)(a1 + 16) || (v6 = sub_19E3247E4(v4, v5), (v7 & 1) == 0))
  {
    v12 = 0u;
    v13 = 0u;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_8;
  }
  sub_19E324848(*(_QWORD *)(a1 + 56) + 32 * v6, (uint64_t)&v12);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!*((_QWORD *)&v13 + 1))
  {
LABEL_8:
    sub_19E322284((uint64_t)&v12);
    goto LABEL_9;
  }
  sub_19E247E74(&qword_1EE502C38);
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_9:
    swift_getObjectType();
    swift_deallocPartialClassInstance();
    return 0;
  }
  if (!*(_QWORD *)(v11 + 16))
  {
    swift_bridgeObjectRelease();
    goto LABEL_9;
  }
  v8 = (void *)sub_19E36F81C();
  swift_bridgeObjectRelease();
  v9 = objc_msgSend(v2, sel_initWithUrlToTransferGuids_, v8);

  return v9;
}

id sub_19E333E8C@<X0>(_QWORD *a1@<X8>)
{
  void *v1;
  id v3;
  id v4;
  void *v5;
  id v6;
  id result;

  v3 = objc_msgSend(v1, sel_dictionaryRepresentation);
  sub_19E36F828();

  v4 = objc_allocWithZone((Class)IMUrlToTransferMap);
  v5 = (void *)sub_19E36F81C();
  swift_bridgeObjectRelease();
  v6 = objc_msgSend(v4, sel_initWithDictionary_, v5);

  result = (id)sub_19E24B854(0, &qword_1EE503750);
  a1[3] = result;
  if (!v6)
  {
    result = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0C99E38]), sel_init);
    v6 = result;
  }
  *a1 = v6;
  return result;
}

void __swiftcall IMUrlToTransferMap.init()(IMUrlToTransferMap *__return_ptr retstr)
{
  objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_init);
}

void IMUrlToTransferMap.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t type metadata accessor for IMUrlToTransferMap(uint64_t a1)
{
  return sub_19E24B854(a1, &qword_1EE502C48);
}

uint64_t sub_19E334090()
{
  uint64_t v0;

  v0 = sub_19E36F798();
  sub_19E3222DC(v0, qword_1ECFC6658);
  sub_19E3222C4(v0, (uint64_t)qword_1ECFC6658);
  return sub_19E36F78C();
}

id sub_19E33410C()
{
  id result;

  result = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for SafetyMonitorCoordinator()), sel_init);
  qword_1ECFC6678 = (uint64_t)result;
  return result;
}

id static SafetyMonitorCoordinator.shared.getter()
{
  if (qword_1ECFC6688 != -1)
    swift_once();
  return (id)qword_1ECFC6678;
}

uint64_t sub_19E33429C()
{
  uint64_t v1;

  v1 = sub_19E36F888();
  swift_bridgeObjectRetain();
  sub_19E36F8C4();
  swift_bridgeObjectRelease();
  return v1;
}

unint64_t sub_19E334360()
{
  return sub_19E32DCF4((uint64_t)&unk_1E3FB2118);
}

void sub_19E33436C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;
  _QWORD aBlock[6];

  v2 = sub_19E247E74(&qword_1ECFC6618);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 64);
  MEMORY[0x1E0C80A78](v2);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))((char *)aBlock - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v2);
  v5 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v6 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v3 + 32))(v6 + v5, (char *)aBlock - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v2);
  aBlock[4] = sub_19E33A788;
  aBlock[5] = v6;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_19E334598;
  aBlock[3] = &unk_1E3FBACC8;
  v7 = _Block_copy(aBlock);
  swift_release();
  IMFetchSafetyMonitorHandleSuggestions(v7);
  _Block_release(v7);
}

uint64_t sub_19E334484(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;

  if (!*(_QWORD *)(a1 + 16))
  {
    if (qword_1ECFC6670 != -1)
      swift_once();
    v1 = sub_19E36F798();
    sub_19E3222C4(v1, (uint64_t)qword_1ECFC6658);
    v2 = sub_19E36F780();
    v3 = sub_19E36FA98();
    if (os_log_type_enabled(v2, v3))
    {
      v4 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v4 = 0;
      _os_log_impl(&dword_19E239000, v2, v3, "Got no preferred handles back from Safety Monitor", v4, 2u);
      MEMORY[0x1A1AE8ACC](v4, -1, -1);
    }

  }
  swift_bridgeObjectRetain();
  sub_19E247E74(&qword_1ECFC6618);
  return sub_19E36F9CC();
}

uint64_t sub_19E334598(uint64_t a1)
{
  void (*v1)(uint64_t);
  uint64_t v2;

  v1 = *(void (**)(uint64_t))(a1 + 32);
  v2 = sub_19E36F960();
  swift_retain();
  v1(v2);
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t sub_19E334620()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  void *v6;
  uint64_t v7;
  id v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v14;

  v1 = OBJC_IVAR___IMSafetyMonitorCoordinator_Impl_currentBestEstimates;
  v2 = *(_QWORD *)(v0 + OBJC_IVAR___IMSafetyMonitorCoordinator_Impl_currentBestEstimates);
  if (!v2)
  {
    sub_19E3347CC();
    v2 = *(_QWORD *)(v0 + v1);
    if (!v2)
      return 0;
  }
  if (v2 >> 62)
    goto LABEL_23;
  v3 = *(_QWORD *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain_n();
  for (; v3; v3 = sub_19E36FCFC())
  {
    v4 = 4;
    while (1)
    {
      v5 = (v2 & 0xC000000000000001) != 0 ? (id)MEMORY[0x1A1AE7368](v4 - 4, v2) : *(id *)(v2 + 8 * v4);
      v6 = v5;
      v7 = v4 - 3;
      if (__OFADD__(v4 - 4, 1))
        break;
      v8 = objc_msgSend(v5, sel_countryCode);
      if (v8)
      {
        v9 = v8;
        v10 = sub_19E36F888();
        v12 = v11;

        if (v10 == 21067 && v12 == 0xE200000000000000)
        {
          swift_bridgeObjectRelease_n();

          v3 = 1;
          goto LABEL_25;
        }
        v14 = sub_19E36FE10();

        swift_bridgeObjectRelease();
        if ((v14 & 1) != 0)
        {
          swift_bridgeObjectRelease();
          v3 = 1;
          goto LABEL_25;
        }
      }
      else
      {

      }
      ++v4;
      if (v7 == v3)
      {
        swift_bridgeObjectRelease();
        v3 = 0;
        goto LABEL_25;
      }
    }
    __break(1u);
LABEL_23:
    swift_bridgeObjectRetain_n();
  }
  swift_bridgeObjectRelease();
LABEL_25:
  swift_bridgeObjectRelease();
  return v3;
}

uint64_t sub_19E3347CC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  id v6;
  unint64_t v7;
  uint64_t v9;

  v1 = v0;
  if (qword_1ECFC6670 != -1)
    swift_once();
  v2 = sub_19E36F798();
  sub_19E3222C4(v2, (uint64_t)qword_1ECFC6658);
  v3 = sub_19E36F780();
  v4 = sub_19E36FA80();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v5 = 0;
    _os_log_impl(&dword_19E239000, v3, v4, "Fetching Current Estimates from RD", v5, 2u);
    MEMORY[0x1A1AE8ACC](v5, -1, -1);
  }

  v6 = objc_msgSend((id)objc_opt_self(), sel_currentEstimates);
  sub_19E24B854(0, qword_1ECFC6690);
  v7 = sub_19E36F960();

  if (v7 >> 62)
  {
    swift_bridgeObjectRetain();
    v9 = sub_19E36FCFC();
    swift_bridgeObjectRelease();
    if (!v9)
      return swift_bridgeObjectRelease();
    goto LABEL_7;
  }
  if (*(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10))
LABEL_7:
    *(_QWORD *)(v1 + OBJC_IVAR___IMSafetyMonitorCoordinator_Impl_currentBestEstimates) = v7;
  return swift_bridgeObjectRelease();
}

void sub_19E334948()
{
  const void *v0;
  const void *v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  __CFNotificationCenter *v6;

  v1 = v0;
  if (qword_1ECFC6670 != -1)
    swift_once();
  v2 = sub_19E36F798();
  sub_19E3222C4(v2, (uint64_t)qword_1ECFC6658);
  v3 = sub_19E36F780();
  v4 = sub_19E36FA80();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v5 = 0;
    _os_log_impl(&dword_19E239000, v3, v4, "Registering for Regulatory Domain Notifications", v5, 2u);
    MEMORY[0x1A1AE8ACC](v5, -1, -1);
  }

  v6 = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterAddObserver(v6, v1, (CFNotificationCallback)sub_19E334A58, (CFStringRef)*MEMORY[0x1E0D842B8], 0, CFNotificationSuspensionBehaviorDeliverImmediately);

}

void sub_19E334A58(void *a1, void *a2, void *a3, uint64_t a4, void *a5)
{
  id v8;
  id v9;
  id v10;

  v8 = a1;
  v9 = a3;
  v10 = a5;
  sub_19E339FC0(a2, (uint64_t)a3);

}

uint64_t sub_19E334AC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *v4;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD *v13;
  id v14;
  uint64_t v16;

  v9 = sub_19E247E74(&qword_1ECFC6648);
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)&v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_19E36F9E4();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v11, 1, 1, v12);
  v13 = (_QWORD *)swift_allocObject();
  v13[2] = 0;
  v13[3] = 0;
  v13[4] = v4;
  v13[5] = a1;
  v13[6] = a2;
  v13[7] = a3;
  v13[8] = a4;
  v14 = v4;
  swift_bridgeObjectRetain();
  swift_retain();
  sub_19E334DB4((uint64_t)v11, (uint64_t)&unk_1EE502C60, (uint64_t)v13);
  return swift_release();
}

uint64_t sub_19E334BB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  _QWORD *v9;

  v8[5] = a7;
  v8[6] = a8;
  v8[3] = a5;
  v8[4] = a6;
  v9 = (_QWORD *)swift_task_alloc();
  v8[7] = v9;
  sub_19E247E74(&qword_1ECFC6610);
  *v9 = v8;
  v9[1] = sub_19E334C50;
  return sub_19E36FE34();
}

uint64_t sub_19E334C50()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 64) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_19E334CB4()
{
  uint64_t v0;
  void (*v1)(_QWORD);
  char v2;

  v1 = *(void (**)(_QWORD))(v0 + 40);
  v2 = sub_19E347CE4(*(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD **)(v0 + 16));
  swift_bridgeObjectRelease();
  v1(v2 & 1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_19E334D10()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_19E334D20(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = v1[5];
  v8 = v1[6];
  v9 = v1[7];
  v10 = v1[8];
  v11 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v11;
  *v11 = v2;
  v11[1] = sub_19E24C450;
  return sub_19E334BB8(a1, v4, v5, v6, v7, v8, v9, v10);
}

uint64_t sub_19E334DB4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;

  v5 = sub_19E36F9E4();
  v6 = *(_QWORD *)(v5 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(a1, 1, v5) != 1)
  {
    sub_19E36F9D8();
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(a1, v5);
    if (!*(_QWORD *)(a3 + 16))
      return swift_task_create();
    goto LABEL_3;
  }
  sub_19E326FA8(a1, &qword_1ECFC6648);
  if (*(_QWORD *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    sub_19E36F9C0();
    swift_unknownObjectRelease();
  }
  return swift_task_create();
}

uint64_t sub_19E335034(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  void *v6;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  _QWORD *v17;
  id v18;
  uint64_t v20;

  v13 = sub_19E247E74(&qword_1ECFC6648);
  MEMORY[0x1E0C80A78](v13);
  v15 = (char *)&v20 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_19E36F9E4();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v15, 1, 1, v16);
  v17 = (_QWORD *)swift_allocObject();
  v17[2] = 0;
  v17[3] = 0;
  v17[4] = v6;
  v17[5] = a1;
  v17[6] = a2;
  v17[7] = a3;
  v17[8] = a4;
  v17[9] = a5;
  v17[10] = a6;
  v18 = v6;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  sub_19E334DB4((uint64_t)v15, (uint64_t)&unk_1EE502C70, (uint64_t)v17);
  return swift_release();
}

uint64_t sub_19E335144(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v11;
  uint64_t v12;

  v8[15] = v11;
  v8[16] = v12;
  v8[13] = a7;
  v8[14] = a8;
  v8[11] = a5;
  v8[12] = a6;
  v9 = (_QWORD *)swift_task_alloc();
  v8[17] = v9;
  sub_19E247E74(&qword_1ECFC6610);
  *v9 = v8;
  v9[1] = sub_19E3351E8;
  return sub_19E36FE34();
}

uint64_t sub_19E3351E8()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 144) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_19E33524C()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_19E335258()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t inited;
  uint64_t v5;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  char v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  void (*v16)(_QWORD);
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v21;

  v2 = *(_QWORD *)(v0 + 104);
  v1 = *(_QWORD *)(v0 + 112);
  v21 = *(_OWORD *)(v0 + 88);
  v3 = *(_QWORD **)(v0 + 80);
  sub_19E247E74(&qword_1EE502C78);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_19E381B30;
  *(_OWORD *)(inited + 32) = v21;
  *(_QWORD *)(inited + 48) = v2;
  *(_QWORD *)(inited + 56) = v1;
  v5 = v3[2];
  if (!v5)
  {
LABEL_24:
    v11 = 0;
    goto LABEL_25;
  }
  if (v3[4] != *(_QWORD *)(v0 + 88) || v3[5] != *(_QWORD *)(v0 + 96))
  {
    result = sub_19E36FE10();
    if ((result & 1) == 0)
    {
      if (v5 != 1)
      {
        v17 = v3 + 7;
        v18 = 1;
        while (1)
        {
          v19 = v18 + 1;
          if (__OFADD__(v18, 1))
            goto LABEL_35;
          if (*(v17 - 1) == *(_QWORD *)(v0 + 88) && *v17 == *(_QWORD *)(v0 + 96))
            goto LABEL_7;
          result = sub_19E36FE10();
          if ((result & 1) != 0)
            goto LABEL_7;
          v11 = 0;
          ++v18;
          v17 += 2;
          if (v19 == v5)
            goto LABEL_25;
        }
      }
      goto LABEL_24;
    }
  }
LABEL_7:
  v8 = *(_QWORD *)(inited + 48);
  v9 = *(_QWORD *)(inited + 56);
  if (v3[4] == v8 && v3[5] == v9)
  {
LABEL_22:
    v11 = 1;
LABEL_25:
    v16 = *(void (**)(_QWORD))(v0 + 120);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v16(v11 & 1);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  result = sub_19E36FE10();
  v11 = result;
  if (v5 == 1 || (result & 1) != 0)
    goto LABEL_25;
  v12 = v3 + 7;
  v13 = 1;
  while (1)
  {
    v14 = v13 + 1;
    if (__OFADD__(v13, 1))
      break;
    if (*(v12 - 1) == v8 && *v12 == v9)
      goto LABEL_22;
    result = sub_19E36FE10();
    if ((result & 1) != 0)
      goto LABEL_22;
    ++v13;
    v12 += 2;
    if (v14 == v5)
      goto LABEL_24;
  }
LABEL_35:
  __break(1u);
  return result;
}

uint64_t sub_19E33541C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v12;

  v4 = v1[3];
  v12 = v1[2];
  v5 = v1[4];
  v6 = v1[5];
  v7 = v1[6];
  v8 = v1[7];
  v9 = v1[8];
  v10 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v10;
  *v10 = v2;
  v10[1] = sub_19E24C450;
  return sub_19E335144(a1, v12, v4, v5, v6, v7, v8, v9);
}

uint64_t sub_19E335640(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  void *v5;
  void *v6;
  uint64_t v7;

  v5 = (void *)sub_19E36F5C4();
  v6 = (void *)sub_19E36F864();
  v7 = IMShouldDropIncomingCheckInMessage(v5, v6, a4 & 1);

  return v7;
}

void sub_19E3357A0(void *a1, char a2, void *a3)
{
  sub_19E336348(a1, a2, a3, IMInformSafetyMonitorManagerOfOutgoingMessage);
}

void sub_19E335824(void *a1)
{
  id v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v13;
  id v14;
  unsigned __int8 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  id v24;
  NSObject *v25;
  os_log_type_t v26;
  uint8_t *v27;
  _QWORD *v28;
  id v29;
  void *v30;
  id v31;
  void *v32;
  _QWORD v33[2];

  v2 = objc_msgSend(a1, sel_balloonBundleID);
  if (v2)
  {
    v3 = v2;
    v4 = sub_19E36F888();
    v6 = v5;

    v7 = (id)IMBalloonExtensionIDWithSuffix((uint64_t)CFSTR("com.apple.SafetyMonitorApp.SafetyMonitorMessages"));
    if (!v7)
    {
LABEL_8:
      swift_bridgeObjectRelease();
      return;
    }
    v8 = v7;
    v9 = sub_19E36F888();
    v11 = v10;

    if (v4 == v9 && v6 == v11)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      v13 = sub_19E36FE10();
      swift_bridgeObjectRelease();
      if ((v13 & 1) == 0)
        goto LABEL_8;
    }
    v14 = objc_msgSend((id)objc_opt_self(), sel_sharedFeatureFlags);
    v15 = objc_msgSend(v14, sel_isZelkovaEnabled);
    swift_bridgeObjectRelease();

    if ((v15 & 1) != 0)
    {
      v16 = sub_19E36F5E8();
      v17 = *(_QWORD *)(v16 - 8);
      MEMORY[0x1E0C80A78](v16);
      v19 = (char *)v33 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
      v20 = sub_19E247E74((uint64_t *)&unk_1ECFC6628);
      MEMORY[0x1E0C80A78](v20);
      v22 = (char *)v33 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
      sub_19E3370A0(a1, (uint64_t)v22);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v22, 1, v16) == 1)
      {
        sub_19E326FA8((uint64_t)v22, (uint64_t *)&unk_1ECFC6628);
        if (qword_1ECFC6670 != -1)
          swift_once();
        v23 = sub_19E36F798();
        sub_19E3222C4(v23, (uint64_t)qword_1ECFC6658);
        v24 = a1;
        v25 = sub_19E36F780();
        v26 = sub_19E36FA98();
        if (os_log_type_enabled(v25, v26))
        {
          v27 = (uint8_t *)swift_slowAlloc();
          v28 = (_QWORD *)swift_slowAlloc();
          *(_DWORD *)v27 = 138412290;
          v33[1] = v24;
          v29 = v24;
          sub_19E36FBD0();
          *v28 = v24;

          _os_log_impl(&dword_19E239000, v25, v26, "Failed to get URL from message %@. Not informing Safety Monitor Manager", v27, 0xCu);
          sub_19E247E74(&qword_1EE5006C0);
          swift_arrayDestroy();
          MEMORY[0x1A1AE8ACC](v28, -1, -1);
          MEMORY[0x1A1AE8ACC](v27, -1, -1);

        }
        else
        {

        }
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v19, v22, v16);
        v30 = (void *)sub_19E36F5C4();
        v31 = objc_msgSend(a1, sel_sender);
        if (v31)
        {
          v32 = v31;
          IMInformSafetyMonitorManagerOfIncomingMessage(v30, v31, (uint64_t)objc_msgSend(a1, sel_isFromMe));

          (*(void (**)(char *, uint64_t))(v17 + 8))(v19, v16);
        }
        else
        {
          __break(1u);
        }
      }
    }
  }
}

void sub_19E335C44(unint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  id v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(char *, uint64_t);
  NSObject *v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  _QWORD *v23;
  NSObject *v24;
  uint64_t v25;
  os_log_type_t v26;
  uint8_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t *v36;
  uint64_t v37;
  unint64_t *v38;
  uint64_t v39;
  NSObject *v40;
  uint64_t v41;

  v35 = a1;
  if (a1 >> 62)
  {
LABEL_27:
    swift_bridgeObjectRetain();
    v1 = sub_19E36FCFC();
    swift_bridgeObjectRelease();
    if (!v1)
      return;
  }
  else
  {
    v1 = *(_QWORD *)((v35 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v1)
      return;
  }
  v41 = MEMORY[0x1E0DEE9E8];
  v34 = v35 & 0xC000000000000001;
  swift_bridgeObjectRetain();
  v2 = 4;
  do
  {
    v3 = v2 - 4;
    if (v34)
    {
      v4 = (id)MEMORY[0x1A1AE7368](v2 - 4, v35);
      v5 = v2 - 3;
      if (__OFADD__(v3, 1))
        goto LABEL_26;
    }
    else
    {
      v4 = *(id *)(v35 + 8 * v2);
      v5 = v2 - 3;
      if (__OFADD__(v3, 1))
      {
LABEL_26:
        __break(1u);
        goto LABEL_27;
      }
    }
    v37 = v5;
    v6 = v4;
    v7 = sub_19E36F5E8();
    v38 = &v34;
    v8 = *(_QWORD *)(v7 - 8);
    v9 = *(_QWORD *)(v8 + 64);
    MEMORY[0x1E0C80A78](v7);
    v10 = (v9 + 15) & 0xFFFFFFFFFFFFFFF0;
    v11 = (char *)&v34 - v10;
    v12 = sub_19E247E74((uint64_t *)&unk_1ECFC6628);
    MEMORY[0x1E0C80A78](v12);
    v14 = (char *)&v34 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
    sub_19E3370A0(v6, (uint64_t)v14);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v14, 1, v7) == 1)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_19E326FA8((uint64_t)v14, (uint64_t *)&unk_1ECFC6628);
      if (qword_1ECFC6670 != -1)
        swift_once();
      v19 = sub_19E36F798();
      sub_19E3222C4(v19, (uint64_t)qword_1ECFC6658);
      v20 = v6;
      v18 = sub_19E36F780();
      v21 = sub_19E36FA98();
      if (os_log_type_enabled(v18, v21))
      {
        v22 = (uint8_t *)swift_slowAlloc();
        v23 = (_QWORD *)swift_slowAlloc();
        *(_DWORD *)v22 = 138412290;
        v40 = v20;
        v24 = v20;
        sub_19E36FBD0();
        *v23 = v20;

        _os_log_impl(&dword_19E239000, v18, v21, "Failed to get URL from message %@. Not informing Safety Monitor Manager", v22, 0xCu);
        sub_19E247E74(&qword_1EE5006C0);
        swift_arrayDestroy();
        MEMORY[0x1A1AE8ACC](v23, -1, -1);
        MEMORY[0x1A1AE8ACC](v22, -1, -1);
      }
      else
      {

        v18 = v20;
      }

      goto LABEL_19;
    }
    v15 = (*(uint64_t (**)(char *, char *, uint64_t))(v8 + 32))((char *)&v34 - v10, v14, v7);
    v36 = &v34;
    v16 = MEMORY[0x1E0C80A78](v15);
    MEMORY[0x1E0C80A78](v16);
    (*(void (**)(char *, char *, uint64_t))(v8 + 16))((char *)&v34 - v10, v11, v7);
    sub_19E338068((uint64_t)&v34 - v10, (char *)&v34 - v10);

    v17 = *(void (**)(char *, uint64_t))(v8 + 8);
    v17((char *)&v34 - v10, v7);
    v17(v11, v7);
    ++v2;
  }
  while (v37 != v1);
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(v41 + 16))
  {
    sub_19E337DA4(v41);
    swift_bridgeObjectRelease();
    v18 = sub_19E36F954();
    swift_release();
    IMInformSafetyMonitorManagerOfDeletedMessages(v18);
LABEL_19:

    return;
  }
  swift_bridgeObjectRelease();
  if (qword_1ECFC6670 != -1)
    swift_once();
  v25 = sub_19E36F798();
  sub_19E3222C4(v25, (uint64_t)qword_1ECFC6658);
  swift_bridgeObjectRetain_n();
  v18 = sub_19E36F780();
  v26 = sub_19E36FA98();
  if (os_log_type_enabled(v18, v26))
  {
    v27 = (uint8_t *)swift_slowAlloc();
    v28 = swift_slowAlloc();
    v40 = v28;
    *(_DWORD *)v27 = 136315138;
    v29 = sub_19E24B854(0, (unint64_t *)&qword_1EE501928);
    v30 = swift_bridgeObjectRetain();
    v31 = MEMORY[0x1A1AE7038](v30, v29);
    v33 = v32;
    swift_bridgeObjectRelease();
    v39 = sub_19E337764(v31, v33, (uint64_t *)&v40);
    sub_19E36FBD0();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_19E239000, v18, v26, "Failed to get URL from any of the deleted messages %s. Not informing Safety Monitor Manager", v27, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1A1AE8ACC](v28, -1, -1);
    MEMORY[0x1A1AE8ACC](v27, -1, -1);
    goto LABEL_19;
  }

  swift_bridgeObjectRelease_n();
}

void sub_19E336274(uint64_t a1)
{
  id v1;

  if (*(_QWORD *)(a1 + 16))
  {
    v1 = (id)sub_19E36F954();
    IMInformSafetyMonitorManagerOfDeletedConversation(v1);

  }
}

void sub_19E33633C(void *a1, char a2, void *a3)
{
  sub_19E336348(a1, a2, a3, IMInformSafetyMonitorManagerOfScheduledSendScheduledFor);
}

void sub_19E336348(void *a1, char a2, void *a3, void (*a4)(void *, void *, _QWORD, void *))
{
  id v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v19;
  id v20;
  unsigned __int8 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  id v30;
  NSObject *v31;
  os_log_type_t v32;
  uint8_t *v33;
  _QWORD *v34;
  id v35;
  void *v36;
  id v37;
  void *v38;
  _QWORD v39[2];

  v8 = objc_msgSend(a1, sel_balloonBundleID);
  if (v8)
  {
    v9 = v8;
    v10 = sub_19E36F888();
    v12 = v11;

    v13 = (id)IMBalloonExtensionIDWithSuffix((uint64_t)CFSTR("com.apple.SafetyMonitorApp.SafetyMonitorMessages"));
    if (!v13)
    {
LABEL_8:
      swift_bridgeObjectRelease();
      return;
    }
    v14 = v13;
    v15 = sub_19E36F888();
    v17 = v16;

    if (v10 == v15 && v12 == v17)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      v19 = sub_19E36FE10();
      swift_bridgeObjectRelease();
      if ((v19 & 1) == 0)
        goto LABEL_8;
    }
    v20 = objc_msgSend((id)objc_opt_self(), sel_sharedFeatureFlags);
    v21 = objc_msgSend(v20, sel_isZelkovaEnabled);
    swift_bridgeObjectRelease();

    if ((v21 & 1) != 0)
    {
      v22 = sub_19E36F5E8();
      v23 = *(_QWORD *)(v22 - 8);
      MEMORY[0x1E0C80A78](v22);
      v25 = (char *)v39 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
      v26 = sub_19E247E74((uint64_t *)&unk_1ECFC6628);
      MEMORY[0x1E0C80A78](v26);
      v28 = (char *)v39 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
      sub_19E3370A0(a1, (uint64_t)v28);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v28, 1, v22) == 1)
      {
        sub_19E326FA8((uint64_t)v28, (uint64_t *)&unk_1ECFC6628);
        if (qword_1ECFC6670 != -1)
          swift_once();
        v29 = sub_19E36F798();
        sub_19E3222C4(v29, (uint64_t)qword_1ECFC6658);
        v30 = a1;
        v31 = sub_19E36F780();
        v32 = sub_19E36FA98();
        if (os_log_type_enabled(v31, v32))
        {
          v33 = (uint8_t *)swift_slowAlloc();
          v34 = (_QWORD *)swift_slowAlloc();
          *(_DWORD *)v33 = 138412290;
          v39[1] = v30;
          v35 = v30;
          sub_19E36FBD0();
          *v34 = v30;

          _os_log_impl(&dword_19E239000, v31, v32, "Failed to get URL from message %@. Not informing Safety Monitor Manager", v33, 0xCu);
          sub_19E247E74(&qword_1EE5006C0);
          swift_arrayDestroy();
          MEMORY[0x1A1AE8ACC](v34, -1, -1);
          MEMORY[0x1A1AE8ACC](v33, -1, -1);

        }
        else
        {

        }
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v23 + 32))(v25, v28, v22);
        v36 = (void *)sub_19E36F5C4();
        v37 = objc_msgSend(a1, sel_guid);
        if (v37)
        {
          v38 = v37;
          if (a3)
            a3 = (void *)sub_19E36F570();
          a4(v36, v38, a2 & 1, a3);

          (*(void (**)(char *, uint64_t))(v23 + 8))(v25, v22);
        }
        else
        {
          __break(1u);
        }
      }
    }
  }
}

void sub_19E3367A0(void *a1, char a2, void *a3)
{
  id v5;

  if (a3)
    a3 = (void *)sub_19E36F570();
  v5 = a3;
  IMInformSafetyMonitorManagerOfScheduledSendCancelledFor(a1, a2 & 1, a3);

}

void sub_19E3368B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  sub_19E336A5C(a1, a2, a3, a4, a5, a6, (uint64_t)&unk_1E3FB4A08, IMShouldShowKeyboardSuggestionsForCheckIn);
}

uint64_t sub_19E3368C4(uint64_t a1, uint64_t a2)
{
  void (*v3)(uint64_t);

  v3 = *(void (**)(uint64_t))(a1 + 32);
  swift_retain();
  v3(a2);
  return swift_release();
}

void sub_19E336A48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  sub_19E336A5C(a1, a2, a3, a4, a5, a6, (uint64_t)&unk_1E3FB2988, IMShouldShowTipKitSuggestionsForCheckIn);
}

void sub_19E336A5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void (*a8)(void *, void *, void *))
{
  void *v12;
  void *v13;
  void *v14;
  _QWORD v15[6];

  v12 = (void *)sub_19E36F864();
  v13 = (void *)sub_19E36F864();
  v15[4] = a5;
  v15[5] = a6;
  v15[0] = MEMORY[0x1E0C809B0];
  v15[1] = 1107296256;
  v15[2] = sub_19E3368C4;
  v15[3] = a7;
  v14 = _Block_copy(v15);
  swift_retain();
  swift_release();
  a8(v12, v13, v14);
  _Block_release(v14);

}

uint64_t sub_19E336C74(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  void *v6;
  uint64_t v7;

  v6 = (void *)sub_19E36F864();
  v7 = IMPopulateNotificationUserInfoForCheckIn(a4, v6, a3);

  return v7;
}

void sub_19E336D5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  _QWORD v14[6];

  v10 = (void *)sub_19E36F864();
  v11 = (void *)sub_19E36F864();
  v12 = (void *)sub_19E36F864();
  v14[4] = a7;
  v14[5] = a8;
  v14[0] = MEMORY[0x1E0C809B0];
  v14[1] = 1107296256;
  v14[2] = sub_19E336E4C;
  v14[3] = &unk_1E3FB2938;
  v13 = _Block_copy(v14);
  swift_retain();
  swift_release();
  IMRespondToNotificationWithIdentifier(v10, v11, v12, v13);
  _Block_release(v13);

}

void sub_19E336E4C(uint64_t a1, void *a2)
{
  void (*v3)(void *);
  id v4;

  v3 = *(void (**)(void *))(a1 + 32);
  swift_retain();
  v4 = a2;
  v3(a2);
  swift_release();

}

void sub_19E337024(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  id v4;

  if (a1)
    v3 = sub_19E36F570();
  else
    v3 = 0;
  v4 = (id)v3;
  (*(void (**)(uint64_t))(a2 + 16))(a2);

}

uint64_t sub_19E3370A0@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  id v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v15;
  id v16;
  unsigned int v17;
  id v18;
  void *v19;
  id v20;
  void *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  void *v25;
  void *v26;
  void *v27;
  id v28;
  id v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  id v36;
  void *v37;
  uint64_t v38;
  id v39;
  id v40;
  NSObject *v41;
  os_log_type_t v42;
  uint8_t *v43;
  _QWORD *v44;
  id v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  void (*v51)(char *, _QWORD, uint64_t, uint64_t);
  _OWORD v53[2];
  id v54[5];

  v54[4] = *(id *)MEMORY[0x1E0C80C00];
  v4 = objc_msgSend(a1, sel_balloonBundleID);
  if (!v4)
    goto LABEL_17;
  v5 = v4;
  v6 = sub_19E36F888();
  v8 = v7;

  v9 = (id)IMBalloonExtensionIDWithSuffix((uint64_t)CFSTR("com.apple.SafetyMonitorApp.SafetyMonitorMessages"));
  if (!v9)
    goto LABEL_8;
  v10 = v9;
  v11 = sub_19E36F888();
  v13 = v12;

  if (v6 == v11 && v8 == v13)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    v15 = sub_19E36FE10();
    swift_bridgeObjectRelease();
    if ((v15 & 1) == 0)
    {
LABEL_8:
      swift_bridgeObjectRelease();
LABEL_17:
      v34 = sub_19E36F5E8();
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 56))(a2, 1, 1, v34);
    }
  }
  v16 = objc_msgSend((id)objc_opt_self(), sel_sharedFeatureFlags);
  v17 = objc_msgSend(v16, sel_isZelkovaEnabled);
  swift_bridgeObjectRelease();

  if (!v17)
    goto LABEL_17;
  v18 = (id)IMExtensionPayloadUnarchivingClasses();
  if (!v18)
    goto LABEL_25;
  v19 = v18;
  sub_19E36FA5C();

  v20 = objc_msgSend(a1, sel_payloadData);
  if (!v20)
  {
    swift_bridgeObjectRelease();
LABEL_25:
    v47 = sub_19E36F5E8();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v47 - 8) + 56))(a2, 1, 1, v47);
  }
  v21 = v20;
  v22 = sub_19E36F60C();
  v24 = v23;

  v25 = (void *)objc_opt_self();
  v26 = (void *)sub_19E36FA44();
  swift_bridgeObjectRelease();
  v27 = (void *)sub_19E36F600();
  v54[0] = 0;
  v28 = objc_msgSend(v25, sel_unarchivedObjectOfClasses_fromData_error_, v26, v27, v54);

  if (!v28)
  {
    v36 = v54[0];
    v37 = (void *)sub_19E36F57C();

    swift_willThrow();
    sub_19E33A6E0(v22, v24);
    if (qword_1ECFC6670 != -1)
      swift_once();
    v38 = sub_19E36F798();
    sub_19E3222C4(v38, (uint64_t)qword_1ECFC6658);
    v39 = v37;
    v40 = v37;
    v41 = sub_19E36F780();
    v42 = sub_19E36FA98();
    if (os_log_type_enabled(v41, v42))
    {
      v43 = (uint8_t *)swift_slowAlloc();
      v44 = (_QWORD *)swift_slowAlloc();
      *(_DWORD *)v43 = 138412290;
      v45 = v37;
      v46 = (void *)_swift_stdlib_bridgeErrorToNSError();
      v54[0] = v46;
      sub_19E36FBD0();
      *v44 = v46;

      _os_log_impl(&dword_19E239000, v41, v42, "Failed to decode URL from message %@", v43, 0xCu);
      sub_19E247E74(&qword_1EE5006C0);
      swift_arrayDestroy();
      MEMORY[0x1A1AE8ACC](v44, -1, -1);
      MEMORY[0x1A1AE8ACC](v43, -1, -1);

    }
    else
    {

    }
    goto LABEL_25;
  }
  v29 = v54[0];
  sub_19E36FC0C();
  swift_unknownObjectRelease();
  sub_19E24B854(0, &qword_1ECFC6A70);
  if ((swift_dynamicCast() & 1) == 0)
  {
    sub_19E33A6E0(v22, v24);
    goto LABEL_25;
  }
  v30 = *(void **)&v53[0];
  v31 = sub_19E247E74((uint64_t *)&unk_1ECFC6628);
  MEMORY[0x1E0C80A78](v31);
  v33 = (char *)v53 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (objc_msgSend(*(id *)&v53[0], sel_objectForKey_, CFSTR("URL")))
  {
    sub_19E36FC0C();
    sub_19E33A6E0(v22, v24);

    swift_unknownObjectRelease();
  }
  else
  {
    sub_19E33A6E0(v22, v24);

    memset(v53, 0, sizeof(v53));
  }
  sub_19E32223C((uint64_t)v53, (uint64_t)v54);
  if (v54[3])
  {
    v48 = sub_19E36F5E8();
    v49 = swift_dynamicCast();
    v50 = *(_QWORD *)(v48 - 8);
    v51 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v50 + 56);
    v51(v33, v49 ^ 1u, 1, v48);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v50 + 48))(v33, 1, v48) != 1)
    {
      (*(void (**)(uint64_t, char *, uint64_t))(v50 + 32))(a2, v33, v48);
      return ((uint64_t (*)(uint64_t, _QWORD, uint64_t, uint64_t))v51)(a2, 0, 1, v48);
    }
  }
  else
  {
    sub_19E326FA8((uint64_t)v54, qword_1ECFC68D0);
    v48 = sub_19E36F5E8();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v48 - 8) + 56))(v33, 1, 1, v48);
  }
  sub_19E326FA8((uint64_t)v33, (uint64_t *)&unk_1ECFC6628);
  sub_19E36F5E8();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v48 - 8) + 56))(a2, 1, 1, v48);
}

id SafetyMonitorCoordinator.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for SafetyMonitorCoordinator();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t sub_19E337764(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12[3];
  uint64_t ObjectType;

  v6 = sub_19E337834(v12, 0, 0, 1, a1, a2);
  v7 = v12[0];
  if (v6)
  {
    v8 = v6;
    ObjectType = swift_getObjectType();
    v12[0] = v8;
    v9 = *a3;
    if (*a3)
    {
      sub_19E324848((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    ObjectType = MEMORY[0x1E0DEC2B8];
    v12[0] = a1;
    v12[1] = a2;
    v10 = *a3;
    if (*a3)
    {
      sub_19E324848((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain();
  }
  sub_19E323384((uint64_t)v12);
  return v7;
}

uint64_t sub_19E337834(uint64_t *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  uint64_t v8;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  _QWORD __src[2];

  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        v11 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v11)
        {
          __src[0] = a5;
          __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          if (__src >= (_QWORD *)&__dst[v11] || (char *)__src + v11 <= __dst)
          {
            memcpy(__dst, __src, HIBYTE(a6) & 0xF);
            sub_19E36FBDC();
            result = 0;
            *a1 = (uint64_t)__dst;
            return result;
          }
          goto LABEL_17;
        }
      }
    }
LABEL_13:
    result = sub_19E3379EC(a5, a6);
    *a1 = v12;
    return result;
  }
  if ((a6 & 0x1000000000000000) != 0)
    goto LABEL_13;
  if ((a5 & 0x1000000000000000) != 0)
  {
    v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }
  v8 = sub_19E36FCCC();
  if (!v8)
  {
    sub_19E36FCE4();
    __break(1u);
LABEL_17:
    result = sub_19E36FD2C();
    __break(1u);
    return result;
  }
LABEL_5:
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0)
    return 0;
  else
    return swift_unknownObjectRetain();
}

uint64_t sub_19E3379EC(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v2 = sub_19E337A80(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = sub_19E337C58(0, *(_QWORD *)(v2 + 16) + 1, 1, (char *)v2);
  v4 = *(_QWORD *)(v2 + 16);
  v3 = *(_QWORD *)(v2 + 24);
  if (v4 >= v3 >> 1)
    v2 = sub_19E337C58(v3 > 1, v4 + 1, 1, (char *)v2);
  *(_QWORD *)(v2 + 16) = v4 + 1;
  *(_BYTE *)(v2 + 32 + v4) = 0;
  return v2;
}

uint64_t sub_19E337A80(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  char v6;
  uint64_t result;

  if ((a2 & 0x1000000000000000) != 0)
    goto LABEL_10;
  if ((a2 & 0x2000000000000000) != 0)
    v2 = HIBYTE(a2) & 0xF;
  else
    v2 = a1 & 0xFFFFFFFFFFFFLL;
  if (v2)
  {
    while (1)
    {
      v3 = sub_19E337BF4(v2, 0);
      if (v2 < 0)
        break;
      v4 = v3;
      v5 = sub_19E36FC90();
      if ((v6 & 1) != 0)
        goto LABEL_14;
      if (v5 == v2)
        return (uint64_t)v4;
      sub_19E36FCE4();
      __break(1u);
LABEL_10:
      v2 = sub_19E36F8D0();
      if (!v2)
        return MEMORY[0x1E0DEE9D8];
    }
    sub_19E36FD2C();
    __break(1u);
LABEL_14:
    result = sub_19E36FCE4();
    __break(1u);
  }
  else
  {
    return MEMORY[0x1E0DEE9D8];
  }
  return result;
}

_QWORD *sub_19E337BF4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  size_t v5;

  if (a2 <= a1)
    v2 = a1;
  else
    v2 = a2;
  if (!v2)
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  sub_19E247E74(&qword_1EE5007E8);
  v4 = (_QWORD *)swift_allocObject();
  v5 = j__malloc_size(v4);
  v4[2] = a1;
  v4[3] = 2 * v5 - 64;
  return v4;
}

uint64_t sub_19E337C58(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    sub_19E247E74(&qword_1EE5007E8);
    v10 = (char *)swift_allocObject();
    v11 = j__malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[v8])
      memmove(v12, v13, v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v8] || v12 >= &v13[v8])
  {
    memcpy(v12, v13, v8);
LABEL_28:
    swift_bridgeObjectRelease();
    return (uint64_t)v10;
  }
LABEL_30:
  result = sub_19E36FD2C();
  __break(1u);
  return result;
}

size_t sub_19E337DA4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  size_t result;
  _QWORD *v9;
  uint64_t v10;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return MEMORY[0x1E0DEE9D8];
  sub_19E247E74(&qword_1EE502C90);
  v3 = *(_QWORD *)(sub_19E36F5E8() - 8);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v6 = (_QWORD *)swift_allocObject();
  result = j__malloc_size(v6);
  if (v4)
  {
    if (result - v5 != 0x8000000000000000 || v4 != -1)
    {
      v6[2] = v1;
      v6[3] = 2 * ((uint64_t)(result - v5) / v4);
      swift_bridgeObjectRetain();
      v9 = sub_19E339870(&v10, (uint64_t)v6 + v5, v1, a1);
      sub_19E33A53C();
      if (v9 == (_QWORD *)v1)
        return (size_t)v6;
      __break(1u);
      return MEMORY[0x1E0DEE9D8];
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

_QWORD *sub_19E337E9C(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  int64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v8;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  sub_19E247E74(&qword_1EE500640);
  v3 = (_QWORD *)swift_allocObject();
  v4 = j__malloc_size(v3);
  v5 = v4 - 32;
  if (v4 < 32)
    v5 = v4 - 25;
  v3[2] = v1;
  v3[3] = (2 * (v5 >> 3)) | 1;
  v6 = sub_19E339BCC(&v8, v3 + 4, v1, a1);
  swift_bridgeObjectRetain();
  sub_19E33A53C();
  if (v6 != (_QWORD *)v1)
  {
    __break(1u);
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  return v3;
}

_QWORD *sub_19E337F84(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  sub_19E247E74(&qword_1EE502C78);
  v3 = (_QWORD *)swift_allocObject();
  v4 = j__malloc_size(v3);
  v5 = v4 - 32;
  if (v4 < 32)
    v5 = v4 - 17;
  v3[2] = v1;
  v3[3] = 2 * (v5 >> 4);
  v6 = sub_19E339DC4((uint64_t)&v8, v3 + 4, v1, a1);
  swift_bridgeObjectRetain();
  sub_19E33A53C();
  if (v6 != v1)
  {
    __break(1u);
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  return v3;
}

uint64_t sub_19E338068(uint64_t a1, char *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  void (*v13)(_QWORD, _QWORD, _QWORD);
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  void (*v17)(_QWORD, _QWORD, _QWORD);
  char v18;
  uint64_t (*v19)(char *, uint64_t);
  _QWORD *v20;
  uint64_t isUniquelyReferenced_nonNull_native;
  char v22;
  char *v23;
  char *v24;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  char *v32;
  uint64_t v33;

  v3 = v2;
  v6 = *v2;
  v7 = sub_19E36F5E8();
  sub_19E33A6A0(&qword_1EE502C98, MEMORY[0x1E0CB0020]);
  swift_bridgeObjectRetain();
  v32 = a2;
  v8 = sub_19E36F834();
  v9 = -1 << *(_BYTE *)(v6 + 32);
  v10 = v8 & ~v9;
  v30 = v6 + 56;
  if (((*(_QWORD *)(v6 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0)
  {
    v26 = v2;
    v27 = a1;
    v28 = ~v9;
    v11 = *(_QWORD **)(v7 - 8);
    v12 = v11[8];
    v29 = v11[9];
    v31 = v11;
    v13 = (void (*)(_QWORD, _QWORD, _QWORD))v11[2];
    while (1)
    {
      MEMORY[0x1E0C80A78](v8);
      v14 = v6;
      v15 = *(_QWORD *)(v6 + 48);
      v16 = v29 * v10;
      v17 = v13;
      v13((char *)&v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), v15 + v29 * v10, v7);
      sub_19E33A6A0(&qword_1EE502CA0, MEMORY[0x1E0CB0030]);
      v18 = sub_19E36F858();
      v19 = (uint64_t (*)(char *, uint64_t))v31[1];
      v8 = v19((char *)&v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), v7);
      if ((v18 & 1) != 0)
        break;
      v10 = (v10 + 1) & v28;
      v13 = v17;
      v6 = v14;
      if (((*(_QWORD *)(v30 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        v3 = v26;
        a1 = v27;
        v20 = v31;
        goto LABEL_7;
      }
    }
    swift_bridgeObjectRelease();
    v19(v32, v7);
    v17(v27, *(_QWORD *)(*v26 + 48) + v16, v7);
    return 0;
  }
  else
  {
    swift_bridgeObjectRelease();
    v20 = *(_QWORD **)(v7 - 8);
    v12 = v20[8];
    v13 = (void (*)(_QWORD, _QWORD, _QWORD))v20[2];
LABEL_7:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v22 = isUniquelyReferenced_nonNull_native;
    MEMORY[0x1E0C80A78](isUniquelyReferenced_nonNull_native);
    v23 = (char *)&v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
    v24 = v32;
    v13(v23, v32, v7);
    v33 = *v3;
    *v3 = 0x8000000000000000;
    sub_19E338AF8((uint64_t)v23, v10, v22);
    *v3 = v33;
    swift_bridgeObjectRelease();
    ((void (*)(uint64_t, char *, uint64_t))v20[4])(a1, v24, v7);
    return 1;
  }
}

uint64_t sub_19E338304(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  BOOL v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v17;
  _QWORD *v18;
  BOOL v19;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v21;

  v7 = *v3;
  sub_19E36FE88();
  swift_bridgeObjectRetain();
  sub_19E36F8B8();
  v8 = sub_19E36FEA0();
  v9 = -1 << *(_BYTE *)(v7 + 32);
  v10 = v8 & ~v9;
  if (((*(_QWORD *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0)
  {
    v11 = *(_QWORD *)(v7 + 48);
    v12 = (_QWORD *)(v11 + 16 * v10);
    v13 = *v12 == a2 && v12[1] == a3;
    if (v13 || (sub_19E36FE10() & 1) != 0)
    {
LABEL_7:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v14 = (uint64_t *)(*(_QWORD *)(*v3 + 48) + 16 * v10);
      v15 = v14[1];
      *a1 = *v14;
      a1[1] = v15;
      swift_bridgeObjectRetain();
      return 0;
    }
    v17 = ~v9;
    while (1)
    {
      v10 = (v10 + 1) & v17;
      if (((*(_QWORD *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) == 0)
        break;
      v18 = (_QWORD *)(v11 + 16 * v10);
      v19 = *v18 == a2 && v18[1] == a3;
      if (v19 || (sub_19E36FE10() & 1) != 0)
        goto LABEL_7;
    }
  }
  swift_bridgeObjectRelease();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v21 = *v3;
  *v3 = 0x8000000000000000;
  swift_bridgeObjectRetain();
  sub_19E338D08(a2, a3, v10, isUniquelyReferenced_nonNull_native);
  *v3 = v21;
  swift_bridgeObjectRelease();
  *a1 = a2;
  a1[1] = a3;
  return 1;
}

uint64_t sub_19E3384B0()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t result;
  int64_t i;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  void (*v25)(char *, unint64_t, uint64_t);
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char v29;
  unint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  int64_t v35;
  _QWORD *v36;
  int64_t v37;

  v1 = v0;
  v2 = *v0;
  sub_19E247E74(&qword_1EE502CA8);
  v3 = sub_19E36FC78();
  v4 = v3;
  if (*(_QWORD *)(v2 + 16))
  {
    v5 = 1 << *(_BYTE *)(v2 + 32);
    v6 = *(_QWORD *)(v2 + 56);
    v36 = (_QWORD *)(v2 + 56);
    if (v5 < 64)
      v7 = ~(-1 << v5);
    else
      v7 = -1;
    v8 = v7 & v6;
    v34 = v0;
    v35 = (unint64_t)(v5 + 63) >> 6;
    v9 = v3 + 56;
    result = swift_retain();
    for (i = 0; ; i = v37)
    {
      if (v8)
      {
        v13 = __clz(__rbit64(v8));
        v8 &= v8 - 1;
        v37 = i;
        v14 = v13 | (i << 6);
      }
      else
      {
        v15 = i + 1;
        if (__OFADD__(i, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v15 >= v35)
          goto LABEL_33;
        v16 = v36[v15];
        v17 = i + 1;
        if (!v16)
        {
          v17 = i + 2;
          if (i + 2 >= v35)
            goto LABEL_33;
          v16 = v36[v17];
          if (!v16)
          {
            v17 = i + 3;
            if (i + 3 >= v35)
              goto LABEL_33;
            v16 = v36[v17];
            if (!v16)
            {
              v18 = i + 4;
              if (i + 4 >= v35)
              {
LABEL_33:
                swift_release();
                v1 = v34;
                v33 = 1 << *(_BYTE *)(v2 + 32);
                if (v33 > 63)
                  bzero(v36, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v36 = -1 << v33;
                *(_QWORD *)(v2 + 16) = 0;
                break;
              }
              v16 = v36[v18];
              if (!v16)
              {
                while (1)
                {
                  v17 = v18 + 1;
                  if (__OFADD__(v18, 1))
                    goto LABEL_39;
                  if (v17 >= v35)
                    goto LABEL_33;
                  v16 = v36[v17];
                  ++v18;
                  if (v16)
                    goto LABEL_23;
                }
              }
              v17 = i + 4;
            }
          }
        }
LABEL_23:
        v8 = (v16 - 1) & v16;
        v37 = v17;
        v14 = __clz(__rbit64(v16)) + (v17 << 6);
      }
      v19 = sub_19E36F5E8();
      MEMORY[0x1E0C80A78](v19);
      v21 = (char *)&v34 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
      v23 = *(_QWORD *)(v22 + 72);
      v24 = *(_QWORD *)(v2 + 48) + v23 * v14;
      v25 = *(void (**)(char *, unint64_t, uint64_t))(v22 + 32);
      v25(v21, v24, v19);
      sub_19E33A6A0(&qword_1EE502C98, MEMORY[0x1E0CB0020]);
      result = sub_19E36F834();
      v26 = -1 << *(_BYTE *)(v4 + 32);
      v27 = result & ~v26;
      v28 = v27 >> 6;
      if (((-1 << v27) & ~*(_QWORD *)(v9 + 8 * (v27 >> 6))) != 0)
      {
        v12 = __clz(__rbit64((-1 << v27) & ~*(_QWORD *)(v9 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v29 = 0;
        v30 = (unint64_t)(63 - v26) >> 6;
        do
        {
          if (++v28 == v30 && (v29 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          v31 = v28 == v30;
          if (v28 == v30)
            v28 = 0;
          v29 |= v31;
          v32 = *(_QWORD *)(v9 + 8 * v28);
        }
        while (v32 == -1);
        v12 = __clz(__rbit64(~v32)) + (v28 << 6);
      }
      *(_QWORD *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      result = ((uint64_t (*)(unint64_t, char *, uint64_t))v25)(*(_QWORD *)(v4 + 48) + v12 * v23, v21, v19);
      ++*(_QWORD *)(v4 + 16);
    }
  }
  result = swift_release();
  *v1 = v4;
  return result;
}

uint64_t sub_19E33881C()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t result;
  int64_t v11;
  unint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;

  v1 = v0;
  v2 = *v0;
  sub_19E247E74((uint64_t *)&unk_1EE500580);
  v3 = sub_19E36FC78();
  v4 = v3;
  if (*(_QWORD *)(v2 + 16))
  {
    v5 = 1 << *(_BYTE *)(v2 + 32);
    v30 = (_QWORD *)(v2 + 56);
    if (v5 < 64)
      v6 = ~(-1 << v5);
    else
      v6 = -1;
    v7 = v6 & *(_QWORD *)(v2 + 56);
    v8 = (unint64_t)(v5 + 63) >> 6;
    v9 = v3 + 56;
    result = swift_retain();
    v11 = 0;
    while (1)
    {
      if (v7)
      {
        v14 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
        v15 = v14 | (v11 << 6);
      }
      else
      {
        v16 = v11 + 1;
        if (__OFADD__(v11, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v16 >= v8)
          goto LABEL_33;
        v17 = v30[v16];
        ++v11;
        if (!v17)
        {
          v11 = v16 + 1;
          if (v16 + 1 >= v8)
            goto LABEL_33;
          v17 = v30[v11];
          if (!v17)
          {
            v11 = v16 + 2;
            if (v16 + 2 >= v8)
              goto LABEL_33;
            v17 = v30[v11];
            if (!v17)
            {
              v18 = v16 + 3;
              if (v18 >= v8)
              {
LABEL_33:
                swift_release();
                v1 = v0;
                v29 = 1 << *(_BYTE *)(v2 + 32);
                if (v29 > 63)
                  bzero(v30, ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v30 = -1 << v29;
                *(_QWORD *)(v2 + 16) = 0;
                break;
              }
              v17 = v30[v18];
              if (!v17)
              {
                while (1)
                {
                  v11 = v18 + 1;
                  if (__OFADD__(v18, 1))
                    goto LABEL_39;
                  if (v11 >= v8)
                    goto LABEL_33;
                  v17 = v30[v11];
                  ++v18;
                  if (v17)
                    goto LABEL_23;
                }
              }
              v11 = v18;
            }
          }
        }
LABEL_23:
        v7 = (v17 - 1) & v17;
        v15 = __clz(__rbit64(v17)) + (v11 << 6);
      }
      v19 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
      v20 = *v19;
      v21 = v19[1];
      sub_19E36FE88();
      sub_19E36F8B8();
      result = sub_19E36FEA0();
      v22 = -1 << *(_BYTE *)(v4 + 32);
      v23 = result & ~v22;
      v24 = v23 >> 6;
      if (((-1 << v23) & ~*(_QWORD *)(v9 + 8 * (v23 >> 6))) != 0)
      {
        v12 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v25 = 0;
        v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          v27 = v24 == v26;
          if (v24 == v26)
            v24 = 0;
          v25 |= v27;
          v28 = *(_QWORD *)(v9 + 8 * v24);
        }
        while (v28 == -1);
        v12 = __clz(__rbit64(~v28)) + (v24 << 6);
      }
      *(_QWORD *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      v13 = (_QWORD *)(*(_QWORD *)(v4 + 48) + 16 * v12);
      *v13 = v20;
      v13[1] = v21;
      ++*(_QWORD *)(v4 + 16);
    }
  }
  result = swift_release();
  *v1 = v4;
  return result;
}

uint64_t sub_19E338AF8(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t *v3;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(char *, unint64_t, uint64_t);
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v27 = a1;
  v5 = *(_QWORD *)(*v3 + 16);
  v6 = *(_QWORD *)(*v3 + 24);
  if (v6 > v5 && (a3 & 1) != 0)
    goto LABEL_12;
  if ((a3 & 1) != 0)
  {
    sub_19E3384B0();
  }
  else
  {
    if (v6 > v5)
    {
      sub_19E338EA0();
      goto LABEL_12;
    }
    sub_19E339290();
  }
  v7 = *v3;
  v8 = sub_19E36F5E8();
  sub_19E33A6A0(&qword_1EE502C98, MEMORY[0x1E0CB0020]);
  v9 = sub_19E36F834();
  v10 = -1 << *(_BYTE *)(v7 + 32);
  a2 = v9 & ~v10;
  v25 = v7 + 56;
  v26 = v7;
  if (((*(_QWORD *)(v7 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v11 = ~v10;
    v12 = *(_QWORD *)(v8 - 8);
    v14 = *(_QWORD *)(v12 + 64);
    v13 = *(_QWORD *)(v12 + 72);
    v15 = *(void (**)(char *, unint64_t, uint64_t))(v12 + 16);
    do
    {
      MEMORY[0x1E0C80A78](v9);
      v15((char *)&v24 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0), *(_QWORD *)(v26 + 48) + v13 * a2, v8);
      sub_19E33A6A0(&qword_1EE502CA0, MEMORY[0x1E0CB0030]);
      v16 = sub_19E36F858();
      v9 = (*(uint64_t (**)(char *, uint64_t))(v12 + 8))((char *)&v24 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0), v8);
      if ((v16 & 1) != 0)
        goto LABEL_15;
      a2 = (a2 + 1) & v11;
    }
    while (((*(_QWORD *)(v25 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  v17 = *v24;
  *(_QWORD *)(*v24 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  v18 = *(_QWORD *)(v17 + 48);
  v19 = sub_19E36F5E8();
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 32))(v18 + *(_QWORD *)(*(_QWORD *)(v19 - 8) + 72) * a2, v27, v19);
  v21 = *(_QWORD *)(v17 + 16);
  v22 = __OFADD__(v21, 1);
  v23 = v21 + 1;
  if (!v22)
  {
    *(_QWORD *)(v17 + 16) = v23;
    return result;
  }
  __break(1u);
LABEL_15:
  result = sub_19E36FE40();
  __break(1u);
  return result;
}

uint64_t sub_19E338D08(uint64_t result, uint64_t a2, unint64_t a3, char a4)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  BOOL v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;

  v5 = v4;
  v8 = result;
  v9 = *(_QWORD *)(*v4 + 16);
  v10 = *(_QWORD *)(*v4 + 24);
  if (v10 > v9 && (a4 & 1) != 0)
    goto LABEL_22;
  if ((a4 & 1) != 0)
  {
    sub_19E33881C();
  }
  else
  {
    if (v10 > v9)
    {
      result = (uint64_t)sub_19E3390E0();
      goto LABEL_22;
    }
    sub_19E3395C4();
  }
  v11 = *v4;
  sub_19E36FE88();
  sub_19E36F8B8();
  result = sub_19E36FEA0();
  v12 = -1 << *(_BYTE *)(v11 + 32);
  a3 = result & ~v12;
  v13 = v11 + 56;
  if (((*(_QWORD *)(v11 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) != 0)
  {
    v14 = *(_QWORD *)(v11 + 48);
    v15 = (_QWORD *)(v14 + 16 * a3);
    v16 = *v15 == v8 && v15[1] == a2;
    if (v16 || (result = sub_19E36FE10(), (result & 1) != 0))
    {
LABEL_21:
      result = sub_19E36FE40();
      __break(1u);
    }
    else
    {
      v17 = ~v12;
      while (1)
      {
        a3 = (a3 + 1) & v17;
        if (((*(_QWORD *)(v13 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) == 0)
          break;
        v18 = (_QWORD *)(v14 + 16 * a3);
        if (*v18 != v8 || v18[1] != a2)
        {
          result = sub_19E36FE10();
          if ((result & 1) == 0)
            continue;
        }
        goto LABEL_21;
      }
    }
  }
LABEL_22:
  v20 = *v5;
  *(_QWORD *)(*v5 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  v21 = (uint64_t *)(*(_QWORD *)(v20 + 48) + 16 * a3);
  *v21 = v8;
  v21[1] = a2;
  v22 = *(_QWORD *)(v20 + 16);
  v23 = __OFADD__(v22, 1);
  v24 = v22 + 1;
  if (v23)
    __break(1u);
  else
    *(_QWORD *)(v20 + 16) = v24;
  return result;
}

void *sub_19E338EA0()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  unint64_t v6;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t *v23;
  const void *v24;

  v1 = v0;
  sub_19E247E74(&qword_1EE502CA8);
  v2 = *v0;
  v3 = sub_19E36FC6C();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = (void *)swift_release();
LABEL_30:
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 56);
  v6 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  v23 = v1;
  v24 = (const void *)(v2 + 56);
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v6)
    result = memmove(result, v24, 8 * v6);
  v8 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v9 = 1 << *(_BYTE *)(v2 + 32);
  v10 = -1;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  v11 = v10 & *(_QWORD *)(v2 + 56);
  v12 = (unint64_t)(v9 + 63) >> 6;
  while (1)
  {
    if (v11)
    {
      v13 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v14 = v13 | (v8 << 6);
      goto LABEL_12;
    }
    v20 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
      goto LABEL_32;
    }
    if (v20 >= v12)
      goto LABEL_28;
    v21 = *((_QWORD *)v24 + v20);
    ++v8;
    if (!v21)
    {
      v8 = v20 + 1;
      if (v20 + 1 >= v12)
        goto LABEL_28;
      v21 = *((_QWORD *)v24 + v8);
      if (!v21)
      {
        v8 = v20 + 2;
        if (v20 + 2 >= v12)
          goto LABEL_28;
        v21 = *((_QWORD *)v24 + v8);
        if (!v21)
          break;
      }
    }
LABEL_27:
    v11 = (v21 - 1) & v21;
    v14 = __clz(__rbit64(v21)) + (v8 << 6);
LABEL_12:
    v15 = sub_19E36F5E8();
    v16 = *(_QWORD *)(v15 - 8);
    MEMORY[0x1E0C80A78](v15);
    v18 = (char *)&v23 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
    v19 = *(_QWORD *)(v16 + 72) * v14;
    (*(void (**)(char *, unint64_t, uint64_t))(v16 + 16))(v18, *(_QWORD *)(v2 + 48) + v19, v15);
    result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v16 + 32))(*(_QWORD *)(v4 + 48) + v19, v18, v15);
  }
  v22 = v20 + 3;
  if (v22 >= v12)
  {
LABEL_28:
    result = (void *)swift_release();
    v1 = v23;
    goto LABEL_30;
  }
  v21 = *((_QWORD *)v24 + v22);
  if (v21)
  {
    v8 = v22;
    goto LABEL_27;
  }
  while (1)
  {
    v8 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v8 >= v12)
      goto LABEL_28;
    v21 = *((_QWORD *)v24 + v8);
    ++v22;
    if (v21)
      goto LABEL_27;
  }
LABEL_32:
  __break(1u);
  return result;
}

void *sub_19E3390E0()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;

  v1 = v0;
  sub_19E247E74((uint64_t *)&unk_1EE500580);
  v2 = *v0;
  v3 = sub_19E36FC6C();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v20 >= v13)
      goto LABEL_28;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      v9 = v20 + 1;
      if (v20 + 1 >= v13)
        goto LABEL_28;
      v21 = *(_QWORD *)(v6 + 8 * v9);
      if (!v21)
      {
        v9 = v20 + 2;
        if (v20 + 2 >= v13)
          goto LABEL_28;
        v21 = *(_QWORD *)(v6 + 8 * v9);
        if (!v21)
          break;
      }
    }
LABEL_27:
    v12 = (v21 - 1) & v21;
    v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (_QWORD *)(*(_QWORD *)(v2 + 48) + v16);
    v18 = v17[1];
    v19 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v19 = *v17;
    v19[1] = v18;
    result = (void *)swift_bridgeObjectRetain();
  }
  v22 = v20 + 3;
  if (v22 >= v13)
    goto LABEL_28;
  v21 = *(_QWORD *)(v6 + 8 * v22);
  if (v21)
  {
    v9 = v22;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v21 = *(_QWORD *)(v6 + 8 * v9);
    ++v22;
    if (v21)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t sub_19E339290()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t result;
  int64_t i;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char v29;
  unint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  int64_t v35;
  int64_t v36;

  v1 = v0;
  v2 = *v0;
  sub_19E247E74(&qword_1EE502CA8);
  v3 = sub_19E36FC78();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = swift_release();
LABEL_35:
    *v1 = v4;
    return result;
  }
  v5 = 1 << *(_BYTE *)(v2 + 32);
  v6 = *(_QWORD *)(v2 + 56);
  v33 = v0;
  v34 = v2 + 56;
  if (v5 < 64)
    v7 = ~(-1 << v5);
  else
    v7 = -1;
  v8 = v7 & v6;
  v35 = (unint64_t)(v5 + 63) >> 6;
  v9 = v3 + 56;
  result = swift_retain();
  for (i = 0; ; i = v36)
  {
    if (v8)
    {
      v13 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v36 = i;
      v14 = v13 | (i << 6);
      goto LABEL_24;
    }
    v15 = i + 1;
    if (__OFADD__(i, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v15 >= v35)
      goto LABEL_33;
    v16 = *(_QWORD *)(v34 + 8 * v15);
    v17 = i + 1;
    if (!v16)
    {
      v17 = i + 2;
      if (i + 2 >= v35)
        goto LABEL_33;
      v16 = *(_QWORD *)(v34 + 8 * v17);
      if (!v16)
      {
        v17 = i + 3;
        if (i + 3 >= v35)
          goto LABEL_33;
        v16 = *(_QWORD *)(v34 + 8 * v17);
        if (!v16)
          break;
      }
    }
LABEL_23:
    v8 = (v16 - 1) & v16;
    v36 = v17;
    v14 = __clz(__rbit64(v16)) + (v17 << 6);
LABEL_24:
    v19 = sub_19E36F5E8();
    v20 = *(_QWORD *)(v19 - 8);
    MEMORY[0x1E0C80A78](v19);
    v22 = (char *)&v33 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
    v23 = v2;
    v24 = *(_QWORD *)(v2 + 48);
    v25 = *(_QWORD *)(v20 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v20 + 16))(v22, v24 + v25 * v14, v19);
    sub_19E33A6A0(&qword_1EE502C98, MEMORY[0x1E0CB0020]);
    result = sub_19E36F834();
    v26 = -1 << *(_BYTE *)(v4 + 32);
    v27 = result & ~v26;
    v28 = v27 >> 6;
    if (((-1 << v27) & ~*(_QWORD *)(v9 + 8 * (v27 >> 6))) != 0)
    {
      v12 = __clz(__rbit64((-1 << v27) & ~*(_QWORD *)(v9 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v29 = 0;
      v30 = (unint64_t)(63 - v26) >> 6;
      do
      {
        if (++v28 == v30 && (v29 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        v31 = v28 == v30;
        if (v28 == v30)
          v28 = 0;
        v29 |= v31;
        v32 = *(_QWORD *)(v9 + 8 * v28);
      }
      while (v32 == -1);
      v12 = __clz(__rbit64(~v32)) + (v28 << 6);
    }
    *(_QWORD *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v20 + 32))(*(_QWORD *)(v4 + 48) + v12 * v25, v22, v19);
    ++*(_QWORD *)(v4 + 16);
    v2 = v23;
  }
  v18 = i + 4;
  if (i + 4 >= v35)
  {
LABEL_33:
    result = swift_release_n();
    v1 = v33;
    goto LABEL_35;
  }
  v16 = *(_QWORD *)(v34 + 8 * v18);
  if (v16)
  {
    v17 = i + 4;
    goto LABEL_23;
  }
  while (1)
  {
    v17 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v17 >= v35)
      goto LABEL_33;
    v16 = *(_QWORD *)(v34 + 8 * v17);
    ++v18;
    if (v16)
      goto LABEL_23;
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_19E3395C4()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t result;
  int64_t v11;
  unint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  int64_t v29;

  v1 = v0;
  v2 = *v0;
  sub_19E247E74((uint64_t *)&unk_1EE500580);
  v3 = sub_19E36FC78();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = swift_release();
LABEL_35:
    *v1 = v4;
    return result;
  }
  v5 = 1 << *(_BYTE *)(v2 + 32);
  v6 = v2 + 56;
  if (v5 < 64)
    v7 = ~(-1 << v5);
  else
    v7 = -1;
  v8 = v7 & *(_QWORD *)(v2 + 56);
  v29 = (unint64_t)(v5 + 63) >> 6;
  v9 = v3 + 56;
  result = swift_retain();
  v11 = 0;
  while (1)
  {
    if (v8)
    {
      v14 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v15 = v14 | (v11 << 6);
      goto LABEL_24;
    }
    v16 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v16 >= v29)
      goto LABEL_33;
    v17 = *(_QWORD *)(v6 + 8 * v16);
    ++v11;
    if (!v17)
    {
      v11 = v16 + 1;
      if (v16 + 1 >= v29)
        goto LABEL_33;
      v17 = *(_QWORD *)(v6 + 8 * v11);
      if (!v17)
      {
        v11 = v16 + 2;
        if (v16 + 2 >= v29)
          goto LABEL_33;
        v17 = *(_QWORD *)(v6 + 8 * v11);
        if (!v17)
          break;
      }
    }
LABEL_23:
    v8 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v11 << 6);
LABEL_24:
    v19 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v20 = *v19;
    v21 = v19[1];
    sub_19E36FE88();
    swift_bridgeObjectRetain();
    sub_19E36F8B8();
    result = sub_19E36FEA0();
    v22 = -1 << *(_BYTE *)(v4 + 32);
    v23 = result & ~v22;
    v24 = v23 >> 6;
    if (((-1 << v23) & ~*(_QWORD *)(v9 + 8 * (v23 >> 6))) != 0)
    {
      v12 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v25 = 0;
      v26 = (unint64_t)(63 - v22) >> 6;
      do
      {
        if (++v24 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        v27 = v24 == v26;
        if (v24 == v26)
          v24 = 0;
        v25 |= v27;
        v28 = *(_QWORD *)(v9 + 8 * v24);
      }
      while (v28 == -1);
      v12 = __clz(__rbit64(~v28)) + (v24 << 6);
    }
    *(_QWORD *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    v13 = (_QWORD *)(*(_QWORD *)(v4 + 48) + 16 * v12);
    *v13 = v20;
    v13[1] = v21;
    ++*(_QWORD *)(v4 + 16);
  }
  v18 = v16 + 3;
  if (v18 >= v29)
  {
LABEL_33:
    result = swift_release_n();
    v1 = v0;
    goto LABEL_35;
  }
  v17 = *(_QWORD *)(v6 + 8 * v18);
  if (v17)
  {
    v11 = v18;
    goto LABEL_23;
  }
  while (1)
  {
    v11 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v11 >= v29)
      goto LABEL_33;
    v17 = *(_QWORD *)(v6 + 8 * v11);
    ++v18;
    if (v17)
      goto LABEL_23;
  }
LABEL_37:
  __break(1u);
  return result;
}

_QWORD *sub_19E339870(_QWORD *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  void (*v24)(char *, char *, uint64_t);
  uint64_t v25;
  int64_t v26;
  int64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  int64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int64_t v35;
  uint64_t v36;

  v34 = a4;
  v4 = a4 + 56;
  v5 = -1 << *(_BYTE *)(a4 + 32);
  if (-v5 < 64)
    v6 = ~(-1 << -(char)v5);
  else
    v6 = -1;
  v7 = v6 & *(_QWORD *)(a4 + 56);
  if (!a2)
  {
    v26 = 0;
    v10 = 0;
LABEL_40:
    *result = v34;
    result[1] = v4;
    result[2] = ~v5;
    result[3] = v26;
    result[4] = v7;
    return (_QWORD *)v10;
  }
  if (!a3)
  {
    v26 = 0;
    v10 = 0;
    goto LABEL_40;
  }
  if (a3 < 0)
  {
LABEL_42:
    __break(1u);
    goto LABEL_43;
  }
  v36 = a2;
  v32 = a3;
  v29 = result;
  v30 = a4 + 56;
  v8 = sub_19E36F5E8();
  v9 = v8;
  v35 = 0;
  v10 = 0;
  v11 = *(_QWORD *)(v8 - 8);
  v33 = *(_QWORD *)(v11 + 64);
  v31 = (unint64_t)(63 - v5) >> 6;
  v27 = v31 - 1;
  v28 = v5;
  while (1)
  {
    MEMORY[0x1E0C80A78](v8);
    v13 = (char *)&v27 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
    v14 = sub_19E247E74((uint64_t *)&unk_1ECFC6628);
    result = (_QWORD *)MEMORY[0x1E0C80A78](v14);
    v16 = (char *)&v27 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
    if (v7)
    {
      v17 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      v18 = v17 | (v35 << 6);
      goto LABEL_23;
    }
    v19 = v35;
    v20 = v35 + 1;
    if (__OFADD__(v35, 1))
    {
      __break(1u);
      goto LABEL_42;
    }
    v4 = v30;
    if (v20 >= v31)
      goto LABEL_37;
    v21 = *(_QWORD *)(v30 + 8 * v20);
    if (v21)
      goto LABEL_22;
    v22 = v35 + 2;
    v19 = v35 + 1;
    if (v35 + 2 >= v31)
      goto LABEL_37;
    v21 = *(_QWORD *)(v30 + 8 * v22);
    if (!v21)
    {
      v19 = v35 + 2;
      if (v35 + 3 >= v31)
        goto LABEL_37;
      v21 = *(_QWORD *)(v30 + 8 * (v35 + 3));
      if (v21)
      {
        v20 = v35 + 3;
        goto LABEL_22;
      }
      v19 = v35 + 3;
      if (v35 + 4 >= v31)
        goto LABEL_37;
      v21 = *(_QWORD *)(v30 + 8 * (v35 + 4));
      if (v21)
      {
        v20 = v35 + 4;
        goto LABEL_22;
      }
      v22 = v35 + 5;
      v19 = v35 + 4;
      if (v35 + 5 >= v31)
      {
LABEL_37:
        v35 = v19;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56))(v16, 1, 1, v9);
        v7 = 0;
        goto LABEL_38;
      }
      v21 = *(_QWORD *)(v30 + 8 * v22);
      if (!v21)
        break;
    }
    v20 = v22;
LABEL_22:
    v7 = (v21 - 1) & v21;
    v18 = __clz(__rbit64(v21)) + (v20 << 6);
    v35 = v20;
LABEL_23:
    v23 = *(_QWORD *)(v11 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v11 + 16))(v16, *(_QWORD *)(v34 + 48) + v23 * v18, v9);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v16, 0, 1, v9);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v16, 1, v9) == 1)
    {
      v4 = v30;
LABEL_38:
      sub_19E326FA8((uint64_t)v16, (uint64_t *)&unk_1ECFC6628);
      result = v29;
      goto LABEL_39;
    }
    ++v10;
    v24 = *(void (**)(char *, char *, uint64_t))(v11 + 32);
    v24(v13, v16, v9);
    v25 = v36;
    v8 = ((uint64_t (*)(uint64_t, char *, uint64_t))v24)(v36, v13, v9);
    if (v10 == v32)
    {
      v10 = v32;
      result = v29;
      v4 = v30;
LABEL_39:
      v5 = v28;
      v26 = v35;
      goto LABEL_40;
    }
    v36 = v25 + v23;
  }
  while (1)
  {
    v20 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v20 >= v31)
    {
      v19 = v27;
      goto LABEL_37;
    }
    v21 = *(_QWORD *)(v30 + 8 * v20);
    ++v22;
    if (v21)
      goto LABEL_22;
  }
LABEL_43:
  __break(1u);
  return result;
}

_QWORD *sub_19E339BCC(_QWORD *result, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  void *v20;
  id v21;

  v5 = result;
  v6 = a4 + 64;
  v7 = -1 << *(_BYTE *)(a4 + 32);
  if (-v7 < 64)
    v8 = ~(-1 << -(char)v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(a4 + 64);
  if (!a2)
  {
    v12 = 0;
    v10 = 0;
LABEL_38:
    *v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return (_QWORD *)v10;
  }
  v10 = a3;
  if (!a3)
  {
    v12 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  v11 = a2;
  v12 = 0;
  v13 = 0;
  v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9)
    goto LABEL_9;
LABEL_8:
  v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    v20 = *(void **)(*(_QWORD *)(a4 + 56) + 8 * v16);
    *v11 = v20;
    if (v13 == v10)
    {
      v21 = v20;
      goto LABEL_38;
    }
    ++v11;
    result = v20;
    if (v9)
      goto LABEL_8;
LABEL_9:
    v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v14)
      goto LABEL_33;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    if (!v18)
      break;
LABEL_18:
    v9 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v17 << 6);
    v12 = v17;
  }
  v12 += 2;
  if (v17 + 1 >= v14)
  {
    v9 = 0;
    v12 = v17;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
    goto LABEL_14;
  v19 = v17 + 2;
  if (v17 + 2 >= v14)
    goto LABEL_33;
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
    goto LABEL_17;
  v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    v9 = 0;
    v12 = v17 + 2;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    v17 = v12;
    goto LABEL_18;
  }
  v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    v9 = 0;
LABEL_37:
    v10 = v13;
    goto LABEL_38;
  }
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    v17 = v19;
    goto LABEL_18;
  }
  while (1)
  {
    v17 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v17 >= v14)
    {
      v9 = 0;
      v12 = v14 - 1;
      goto LABEL_37;
    }
    v18 = *(_QWORD *)(v6 + 8 * v17);
    ++v19;
    if (v18)
      goto LABEL_18;
  }
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_19E339DC4(uint64_t result, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  _QWORD *v20;
  uint64_t v21;

  v5 = (_QWORD *)result;
  v6 = a4 + 64;
  v7 = -1 << *(_BYTE *)(a4 + 32);
  if (-v7 < 64)
    v8 = ~(-1 << -(char)v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(a4 + 64);
  if (!a2)
  {
    v12 = 0;
    v10 = 0;
LABEL_38:
    *v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return v10;
  }
  v10 = a3;
  if (!a3)
  {
    v12 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  v11 = a2;
  v12 = 0;
  v13 = 0;
  v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9)
    goto LABEL_9;
LABEL_8:
  v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    v20 = (_QWORD *)(*(_QWORD *)(a4 + 48) + 16 * v16);
    v21 = v20[1];
    *v11 = *v20;
    v11[1] = v21;
    if (v13 == v10)
    {
      swift_bridgeObjectRetain();
      goto LABEL_38;
    }
    v11 += 2;
    result = swift_bridgeObjectRetain();
    if (v9)
      goto LABEL_8;
LABEL_9:
    v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v14)
      goto LABEL_33;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    if (!v18)
      break;
LABEL_18:
    v9 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v17 << 6);
    v12 = v17;
  }
  v12 += 2;
  if (v17 + 1 >= v14)
  {
    v9 = 0;
    v12 = v17;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
    goto LABEL_14;
  v19 = v17 + 2;
  if (v17 + 2 >= v14)
    goto LABEL_33;
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
    goto LABEL_17;
  v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    v9 = 0;
    v12 = v17 + 2;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    v17 = v12;
    goto LABEL_18;
  }
  v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    v9 = 0;
LABEL_37:
    v10 = v13;
    goto LABEL_38;
  }
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    v17 = v19;
    goto LABEL_18;
  }
  while (1)
  {
    v17 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v17 >= v14)
    {
      v9 = 0;
      v12 = v14 - 1;
      goto LABEL_37;
    }
    v18 = *(_QWORD *)(v6 + 8 * v17);
    ++v19;
    if (v18)
      goto LABEL_18;
  }
LABEL_41:
  __break(1u);
  return result;
}

void sub_19E339FC0(void *a1, uint64_t a2)
{
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v13;
  void *v14;
  id v15;

  if (qword_1ECFC6670 != -1)
    swift_once();
  v4 = sub_19E36F798();
  sub_19E3222C4(v4, (uint64_t)qword_1ECFC6658);
  v5 = sub_19E36F780();
  v6 = sub_19E36FA80();
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v7 = 0;
    _os_log_impl(&dword_19E239000, v5, v6, "Received RD darwin notification", v7, 2u);
    MEMORY[0x1A1AE8ACC](v7, -1, -1);
  }

  if (a1 && a2)
  {
    v8 = sub_19E36F888();
    v10 = v9;
    v15 = a1;
    if (sub_19E36F888() == v8 && v11 == v10)
    {
      swift_bridgeObjectRelease_n();
    }
    else
    {
      v13 = sub_19E36FE10();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v14 = v15;
      if ((v13 & 1) == 0)
        goto LABEL_16;
    }
    sub_19E3347CC();
    v14 = v15;
LABEL_16:

  }
}

void sub_19E33A14C(void *a1)
{
  id v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v13;
  id v14;
  unsigned __int8 v15;
  id v16;
  id v17;

  v2 = objc_msgSend(a1, sel_balloonBundleID);
  if (v2)
  {
    v3 = v2;
    v4 = sub_19E36F888();
    v6 = v5;

    v7 = (id)IMBalloonExtensionIDWithSuffix((uint64_t)CFSTR("com.apple.SafetyMonitorApp.SafetyMonitorMessages"));
    if (!v7)
    {
LABEL_8:
      swift_bridgeObjectRelease();
      return;
    }
    v8 = v7;
    v9 = sub_19E36F888();
    v11 = v10;

    if (v4 == v9 && v6 == v11)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      v13 = sub_19E36FE10();
      swift_bridgeObjectRelease();
      if ((v13 & 1) == 0)
        goto LABEL_8;
    }
    v14 = objc_msgSend((id)objc_opt_self(), sel_sharedFeatureFlags);
    v15 = objc_msgSend(v14, sel_isZelkovaEnabled);
    swift_bridgeObjectRelease();

    if ((v15 & 1) != 0)
    {
      v16 = objc_msgSend(a1, sel_guid);
      if (v16)
      {
        v17 = v16;
        IMInformSafetyMonitorManagerOfScheduledSendTriggeredFor(v16);

      }
      else
      {
        __break(1u);
      }
    }
  }
}

uint64_t sub_19E33A2BC()
{
  return swift_release();
}

uint64_t type metadata accessor for SafetyMonitorCoordinator()
{
  return objc_opt_self();
}

uint64_t method lookup function for SafetyMonitorCoordinator()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of SafetyMonitorCoordinator.appPayloadID.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x58))();
}

uint64_t dispatch thunk of SafetyMonitorCoordinator.appPayload.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x60))();
}

uint64_t dispatch thunk of SafetyMonitorCoordinator.shouldDisallowBasedOnRegulatoryDomain.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x88))();
}

uint64_t dispatch thunk of SafetyMonitorCoordinator.checkPreferredHandlesCache(forReceiverWith:completion:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xB8))();
}

uint64_t dispatch thunk of SafetyMonitorCoordinator.checkPreferredHandlesCache(forInitiatorHandleID:andReceiver:completion:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xC0))();
}

uint64_t dispatch thunk of SafetyMonitorCoordinator.shouldDropIncomingCheckInMessage(URL:senderHandle:isFromMe:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xC8))();
}

uint64_t dispatch thunk of SafetyMonitorCoordinator.informOfOutgoingMessage(message:sentSuccessfully:error:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xD0))();
}

uint64_t dispatch thunk of SafetyMonitorCoordinator.informOfIncomingMessage(message:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xD8))();
}

uint64_t dispatch thunk of SafetyMonitorCoordinator.informOfDeletedMessages(messages:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xE0))();
}

uint64_t dispatch thunk of SafetyMonitorCoordinator.informOfDeletedConversation(receiverHandles:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xE8))();
}

uint64_t dispatch thunk of SafetyMonitorCoordinator.informOfScheduledMessageSend(message:sentSuccessfully:error:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xF0))();
}

uint64_t dispatch thunk of SafetyMonitorCoordinator.informOfCancelledScheduledMessageSend(messageGUID:sentSuccessfully:error:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xF8))();
}

uint64_t dispatch thunk of SafetyMonitorCoordinator.informOfTriggeredScheduledMessageSend(message:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x100))();
}

uint64_t dispatch thunk of SafetyMonitorCoordinator.shouldShowKeyboardSuggestion(forInitiator:andReceiver:completion:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x108))();
}

uint64_t dispatch thunk of SafetyMonitorCoordinator.shouldShowTipKitSuggestion(forInitiator:andReceiver:completion:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x110))();
}

uint64_t dispatch thunk of SafetyMonitorCoordinator.notificationContent(forInitiator:messageURL:content:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x118))();
}

uint64_t dispatch thunk of SafetyMonitorCoordinator.respondToNotification(withIdentifier:sessionIdentifier:actionIdentifier:completion:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x120))();
}

uint64_t dispatch thunk of SafetyMonitorCoordinator.informOfChangedGroupMembership(groupID:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x128))();
}

uint64_t dispatch thunk of SafetyMonitorCoordinator.informOfKickFromGroup(groupID:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x130))();
}

uint64_t dispatch thunk of SafetyMonitorCoordinator.informOfChangedGroupDisplayName(groupID:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x138))();
}

uint64_t dispatch thunk of SafetyMonitorCoordinator.informOfChangedGroupPhoto(groupID:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x140))();
}

uint64_t sub_19E33A53C()
{
  return swift_release();
}

uint64_t sub_19E33A544()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject();
}

void sub_19E33A568(uint64_t a1)
{
  uint64_t v1;

  sub_19E337024(a1, *(_QWORD *)(v1 + 16));
}

uint64_t sub_19E33A570(char a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(v1 + 16) + 16))(*(_QWORD *)(v1 + 16), a1 & 1);
}

uint64_t sub_19E33A588()
{
  uint64_t v0;

  swift_unknownObjectRelease();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_19E33A5D0()
{
  uint64_t v0;

  swift_unknownObjectRelease();

  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_19E33A60C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = v1[5];
  v8 = v1[6];
  v9 = v1[7];
  v10 = v1[8];
  v11 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v11;
  *v11 = v2;
  v11[1] = sub_19E24C768;
  return sub_19E334BB8(a1, v4, v5, v6, v7, v8, v9, v10);
}

uint64_t sub_19E33A6A0(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = sub_19E36F5E8();
    result = MEMORY[0x1A1AE8A18](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_19E33A6E0(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_release();
  }
  return swift_release();
}

uint64_t sub_19E33A724()
{
  uint64_t v0;
  uint64_t v1;

  v1 = sub_19E247E74(&qword_1ECFC6618);
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80)), v1);
  return swift_deallocObject();
}

uint64_t sub_19E33A788(uint64_t a1)
{
  sub_19E247E74(&qword_1ECFC6618);
  return sub_19E334484(a1);
}

uint64_t sub_19E33A80C()
{
  uint64_t v0;

  v0 = sub_19E36F798();
  sub_19E3222DC(v0, qword_1EE502CB0);
  sub_19E3222C4(v0, (uint64_t)qword_1EE502CB0);
  return sub_19E36F78C();
}

id sub_19E33A888()
{
  id result;
  uint64_t v1;

  result = sub_19E33A8A8();
  qword_1EE502CC8 = (uint64_t)result;
  unk_1EE502CD0 = v1;
  return result;
}

id sub_19E33A8A8()
{
  id v0;
  id v1;
  id v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  unint64_t v8;
  id result;
  void *v10;
  void *v11;
  unint64_t v12;
  unint64_t v13;

  v0 = objc_msgSend((id)objc_opt_self(), sel_mainBundle);
  v1 = objc_msgSend(v0, sel_bundleIdentifier);

  if (v1)
  {
    sub_19E36F888();

  }
  v2 = objc_msgSend((id)objc_opt_self(), sel_stringGUID);
  if (v2)
  {
    v3 = v2;
    sub_19E36F888();

  }
  else
  {
    v4 = sub_19E36F660();
    v5 = *(_QWORD *)(v4 - 8);
    MEMORY[0x1E0C80A78](v4);
    v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
    sub_19E36F654();
    sub_19E36F648();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
  v12 = 0;
  v13 = 0xE000000000000000;
  sub_19E36FC84();
  swift_bridgeObjectRelease();
  v12 = 0xD00000000000001FLL;
  v13 = 0x800000019E39D520;
  sub_19E36F8C4();
  swift_bridgeObjectRelease();
  sub_19E36F8C4();
  sub_19E36F8C4();
  swift_bridgeObjectRelease();
  v8 = v12;
  result = objc_msgSend((id)objc_opt_self(), sel_sharedInstance);
  if (result)
  {
    v10 = result;
    v11 = (void *)sub_19E36F864();
    objc_msgSend(v10, sel_addListenerID_forService_, v11, 1);

    return (id)v8;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_19E33AAB4()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  void *v4;
  _QWORD aBlock[7];

  v1 = v0;
  aBlock[6] = *MEMORY[0x1E0C80C00];
  sub_19E24B854(0, (unint64_t *)&qword_1ECFC6BA0);
  v2 = (void *)sub_19E36FAE0();
  v3 = swift_allocObject();
  swift_unknownObjectWeakInit();
  aBlock[4] = sub_19E33B254;
  aBlock[5] = v3;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_19E34D2E0;
  aBlock[3] = &unk_1E3FBAD20;
  v4 = _Block_copy(aBlock);
  swift_release();
  swift_beginAccess();
  im_notify_register_dispatch();
  swift_endAccess();
  _Block_release(v4);

  *(_BYTE *)(v1 + OBJC_IVAR___IMServiceAvailabilityMonitor_mmsEnabled) = 0;
}

void sub_19E33AC10()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  void *v4;
  _QWORD aBlock[6];
  uint64_t v6;
  int v7;
  uint64_t v8;

  v1 = v0;
  v8 = *MEMORY[0x1E0C80C00];
  v7 = -1;
  v6 = 0;
  sub_19E24B854(0, (unint64_t *)&qword_1ECFC6BA0);
  v2 = (void *)sub_19E36FAE0();
  v3 = swift_allocObject();
  swift_unknownObjectWeakInit();
  aBlock[4] = sub_19E33B224;
  aBlock[5] = v3;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_19E34D2E0;
  aBlock[3] = &unk_1E3FB4A30;
  v4 = _Block_copy(aBlock);
  swift_release();
  im_notify_register_dispatch();
  _Block_release(v4);

  *(_BYTE *)(v1 + OBJC_IVAR___IMServiceAvailabilityMonitor_rcsEnabled) = v6 != 0;
}

void sub_19E33ADC8(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, char *a5)
{
  uint64_t v8;
  unsigned __int8 *v9;
  int v10;
  _BYTE *v11;
  unsigned __int8 *v12;
  int v13;
  int v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unsigned __int8 *v25;
  int v26;
  uint64_t v27;
  char *format;
  uint64_t v29;

  v8 = a3 + 16;
  swift_beginAccess();
  v9 = (unsigned __int8 *)MEMORY[0x1A1AE8B50](v8);
  if (v9)
  {
    v10 = v9[*a4];

  }
  else
  {
    v10 = 2;
  }
  swift_beginAccess();
  v11 = (_BYTE *)MEMORY[0x1A1AE8B50](v8);
  if (v11)
  {
    v11[*a4] = a2 != 0;

  }
  swift_beginAccess();
  v12 = (unsigned __int8 *)MEMORY[0x1A1AE8B50](v8);
  if (!v12)
  {
    if (v10 == 2)
      return;
    goto LABEL_12;
  }
  v13 = v12[*a4];

  if (v10 != 2)
  {
    if (v13 == (v10 != 0))
      return;
LABEL_12:
    v14 = 0;
    goto LABEL_13;
  }
  v14 = 1;
LABEL_13:
  if (qword_1EE501550 != -1)
    swift_once();
  v15 = sub_19E36F798();
  sub_19E3222C4(v15, (uint64_t)qword_1EE502CB0);
  swift_retain_n();
  v16 = sub_19E36F780();
  v17 = sub_19E36FAA4();
  if (os_log_type_enabled(v16, v17))
  {
    format = a5;
    v18 = 0x3E6C696E3CLL;
    v19 = swift_slowAlloc();
    v27 = swift_slowAlloc();
    v29 = v27;
    *(_DWORD *)v19 = 136315394;
    v20 = 20302;
    if ((v10 & 1) != 0)
      v20 = 5457241;
    v21 = 0xE300000000000000;
    if ((v10 & 1) == 0)
      v21 = 0xE200000000000000;
    if (v14)
      v22 = 0x3E6C696E3CLL;
    else
      v22 = v20;
    v23 = 0xE500000000000000;
    if (v14)
      v24 = 0xE500000000000000;
    else
      v24 = v21;
    sub_19E337764(v22, v24, &v29);
    sub_19E36FBD0();
    swift_bridgeObjectRelease();
    *(_WORD *)(v19 + 12) = 2080;
    swift_beginAccess();
    v25 = (unsigned __int8 *)MEMORY[0x1A1AE8B50](v8);
    if (v25)
    {
      v26 = v25[*a4];

      if (v26)
        v18 = 5457241;
      else
        v18 = 20302;
      if (v26)
        v23 = 0xE300000000000000;
      else
        v23 = 0xE200000000000000;
    }
    sub_19E337764(v18, v23, &v29);
    sub_19E36FBD0();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_19E239000, v16, v17, format, (uint8_t *)v19, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1A1AE8ACC](v27, -1, -1);
    MEMORY[0x1A1AE8ACC](v19, -1, -1);

  }
  else
  {

    swift_release_n();
  }
}

uint64_t type metadata accessor for IMServiceAvailabilityMonitor(uint64_t a1)
{
  return sub_19E24B854(a1, &qword_1EE502D78);
}

uint64_t sub_19E33B200()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

void sub_19E33B224(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_19E33ADC8(a1, a2, v2, &OBJC_IVAR___IMServiceAvailabilityMonitor_rcsEnabled, "RCS Enabled State Changed from %s to %s");
}

uint64_t sub_19E33B24C()
{
  return swift_release();
}

void sub_19E33B254(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_19E33ADC8(a1, a2, v2, &OBJC_IVAR___IMServiceAvailabilityMonitor_mmsEnabled, "MMS Enabled State Changed from %s to %s");
}

id NSUserDefaults.conversationListFocusFilterActionEnabled.getter()
{
  void *v0;
  void *v1;
  id v2;

  v1 = (void *)sub_19E36F864();
  v2 = objc_msgSend(v0, sel_BOOLForKey_, v1);

  return v2;
}

void NSUserDefaults.conversationListFocusFilterActionEnabled.setter(char a1)
{
  void *v1;
  id v3;

  v3 = (id)sub_19E36F864();
  objc_msgSend(v1, sel_setBool_forKey_, a1 & 1, v3);

}

char *sub_19E33B33C()
{
  return sel_conversationListFocusFilterActionEnabled;
}

id sub_19E33B348@<X0>(id *a1@<X0>, _BYTE *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, sel_conversationListFocusFilterActionEnabled);
  *a2 = (_BYTE)result;
  return result;
}

id sub_19E33B378(unsigned __int8 *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setConversationListFocusFilterActionEnabled_, *a1);
}

uint64_t sub_19E33B38C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
  {
    v4 = 0;
    v5 = (uint64_t *)(a1 + 32);
    do
    {
      v7 = *v5++;
      v6 = v7;
      if ((v7 & ~v4) == 0)
        v6 = 0;
      v4 |= v6;
      --v3;
    }
    while (v3);
  }
  else
  {
    v4 = 0;
  }
  result = swift_bridgeObjectRelease();
  *a2 = v4;
  return result;
}

uint64_t sub_19E33B3E0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 *a3@<X2>, unsigned __int8 *a4@<X3>, unsigned __int8 *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, unsigned __int8 a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t *a20,unsigned __int8 a21,unsigned __int8 *a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  uint64_t v26;
  int *v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  char *v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  _QWORD *v41;
  uint64_t v42;
  __int128 v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  _QWORD *v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v54;
  _QWORD *v55;
  char *v56;
  _QWORD *v57;
  _QWORD *v58;
  uint64_t v59;
  int v60;
  int v61;
  uint64_t v62;
  __int128 v63;
  __int128 v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  uint64_t v77;
  int v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  int v83;
  uint64_t v84;
  uint64_t v85;

  v70 = a7;
  v71 = a8;
  v68 = a2;
  v69 = a6;
  v67 = a1;
  v84 = a24;
  v85 = a25;
  v83 = a21;
  v76 = a16;
  v74 = a14;
  v75 = a15;
  v72 = a12;
  v73 = a13;
  v65 = a10;
  v66 = a11;
  v81 = a18;
  v82 = a23;
  v79 = a17;
  v80 = a19;
  v64 = *a3;
  v63 = a3[1];
  v62 = *((_QWORD *)a3 + 4);
  v61 = *a4;
  v60 = *a5;
  v77 = *a20;
  v78 = *a22;
  *(_QWORD *)a9 = 0x4449656C646E7542;
  *(_QWORD *)(a9 + 8) = 0xE800000000000000;
  *(_OWORD *)(a9 + 16) = 0u;
  *(_OWORD *)(a9 + 32) = 0u;
  *(_OWORD *)(a9 + 48) = 0u;
  *(_BYTE *)(a9 + 88) = 10;
  *(_QWORD *)(a9 + 64) = 0;
  strcpy((char *)(a9 + 72), "Classification");
  *(_BYTE *)(a9 + 87) = -18;
  *(_BYTE *)(a9 + 112) = 6;
  *(_QWORD *)(a9 + 96) = 0x6375646F72706552;
  *(_QWORD *)(a9 + 104) = 0xEF7974696C696269;
  *(_QWORD *)(a9 + 120) = 0x656C746954;
  *(_QWORD *)(a9 + 128) = 0xE500000000000000;
  *(_QWORD *)(a9 + 136) = 0;
  *(_QWORD *)(a9 + 144) = 0;
  *(_QWORD *)(a9 + 152) = 0x7470697263736544;
  *(_QWORD *)(a9 + 160) = 0xEB000000006E6F69;
  *(_QWORD *)(a9 + 168) = 0;
  *(_QWORD *)(a9 + 176) = 0;
  *(_QWORD *)(a9 + 184) = 0x7364726F7779654BLL;
  *(_QWORD *)(a9 + 192) = 0xE800000000000000;
  v26 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(a9 + 200) = MEMORY[0x1E0DEE9D8];
  v27 = (int *)type metadata accessor for TapToRadarDraft();
  v28 = (_QWORD *)(a9 + v27[11]);
  v59 = (uint64_t)v28 + *(int *)(sub_19E247E74(&qword_1EE502E60) + 36);
  v29 = sub_19E36F63C();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 56))(v59, 1, 1, v29);
  *v28 = 0x7349664F656D6954;
  v28[1] = 0xEB00000000657573;
  v30 = (_QWORD *)(a9 + v27[12]);
  v58 = v30;
  *v30 = 0x656D686361747441;
  v30[1] = 0xEB0000000073746ELL;
  v30[2] = v26;
  v31 = (_QWORD *)(a9 + v27[13]);
  v57 = v31;
  *v31 = 0xD000000000000011;
  v31[1] = 0x800000019E39D690;
  v31[2] = v26;
  v32 = (_QWORD *)(a9 + v27[14]);
  *v32 = 0xD000000000000014;
  v32[1] = 0x800000019E39D6B0;
  v32[2] = v26;
  v33 = (char *)(a9 + v27[15]);
  v56 = v33;
  strcpy(v33, "DeleteOnAttach");
  v33[15] = -18;
  v33[16] = 0;
  v34 = (_QWORD *)(a9 + v27[16]);
  *v34 = 0x4449656369766544;
  v34[1] = 0xE900000000000073;
  v34[2] = v26;
  v35 = a9 + v27[17];
  strcpy((char *)v35, "DeviceClasses");
  *(_WORD *)(v35 + 14) = -4864;
  *(_QWORD *)(v35 + 16) = v26;
  v36 = a9 + v27[18];
  strcpy((char *)v36, "DeviceModels");
  *(_BYTE *)(v36 + 13) = 0;
  *(_WORD *)(v36 + 14) = -5120;
  *(_QWORD *)(v36 + 16) = v26;
  v37 = (_QWORD *)(a9 + v27[19]);
  v55 = v37;
  *v37 = 0xD000000000000016;
  v37[1] = 0x800000019E3826F0;
  v37[2] = 0;
  v38 = a9 + v27[20];
  *(_QWORD *)v38 = 0xD00000000000001ALL;
  *(_QWORD *)(v38 + 8) = 0x800000019E39D6D0;
  *(_BYTE *)(v38 + 16) = 0;
  v39 = a9 + v27[21];
  *(_BYTE *)(v39 + 16) = 0;
  *(_QWORD *)v39 = 0x676169446F747541;
  *(_QWORD *)(v39 + 8) = 0xEF73636974736F6ELL;
  v40 = (_QWORD *)(a9 + v27[22]);
  *v40 = 0xD00000000000001BLL;
  v40[1] = 0x800000019E39D6F0;
  v40[2] = v26;
  v41 = (_QWORD *)(a9 + v27[23]);
  *v41 = 0xD000000000000018;
  v41[1] = 0x800000019E39D710;
  v41[2] = 0;
  v41[3] = 0;
  v42 = v68;
  *(_QWORD *)(a9 + 16) = v67;
  *(_QWORD *)(a9 + 24) = v42;
  v43 = v63;
  *(_OWORD *)(a9 + 32) = v64;
  *(_OWORD *)(a9 + 48) = v43;
  *(_QWORD *)(a9 + 64) = v62;
  *(_BYTE *)(a9 + 88) = v61;
  *(_BYTE *)(a9 + 112) = v60;
  v44 = v70;
  *(_QWORD *)(a9 + 136) = v69;
  *(_QWORD *)(a9 + 144) = v44;
  v45 = v65;
  *(_QWORD *)(a9 + 168) = v71;
  *(_QWORD *)(a9 + 176) = v45;
  *(_QWORD *)(a9 + 200) = v66;
  v46 = sub_19E247E74(&qword_1EE502E00);
  MEMORY[0x1E0C80A78](v46);
  v48 = (char *)&v54 - ((v47 + 15) & 0xFFFFFFFFFFFFFFF0);
  v49 = v72;
  sub_19E34370C(v72, (uint64_t)v48);
  sub_19E343754((uint64_t)v48, v59);
  v50 = v58;
  swift_bridgeObjectRelease();
  v50[2] = v73;
  v51 = v57;
  swift_bridgeObjectRelease();
  v51[2] = v74;
  swift_bridgeObjectRelease();
  v32[2] = v75;
  v56[16] = v76;
  swift_bridgeObjectRelease();
  v34[2] = v79;
  swift_bridgeObjectRelease();
  *(_QWORD *)(v35 + 16) = v81;
  swift_bridgeObjectRelease();
  *(_QWORD *)(v36 + 16) = v80;
  v55[2] = v77;
  *(_BYTE *)(v38 + 16) = v83;
  *(_BYTE *)(v39 + 16) = v78;
  swift_bridgeObjectRelease();
  v40[2] = v82;
  swift_bridgeObjectRelease();
  v52 = v85;
  v41[2] = v84;
  v41[3] = v52;
  return sub_19E326FA8(v49, &qword_1EE502E00);
}

uint64_t sub_19E33B9CC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v13;

  v2 = sub_19E36F540();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_19E36F534();
  sub_19E36F528();
  sub_19E36F51C();
  sub_19E33BB78();
  sub_19E36F504();
  v6 = sub_19E247E74((uint64_t *)&unk_1ECFC6628);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_19E36F510();
  v9 = sub_19E36F5E8();
  v10 = *(_QWORD *)(v9 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
  {
    sub_19E326FA8((uint64_t)v8, (uint64_t *)&unk_1ECFC6628);
    sub_19E340E10();
    swift_allocError();
    *v11 = 0;
    swift_willThrow();
    return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v10 + 32))(a1, v8, v9);
  }
}

unint64_t sub_19E33BB78()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t (*v8)(char *, char *, uint64_t);
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t (*v28)(char *, char *, uint64_t);
  uint64_t v29;
  char *v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t (*v43)(char *, char *, uint64_t);
  uint64_t v44;
  char *v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t (*v53)(char *, char *, uint64_t);
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t (*v63)(char *, char *, uint64_t);
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t (*v77)(char *, char *, uint64_t);
  uint64_t v78;
  char *v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t (*v87)(char *, char *, uint64_t);
  uint64_t v88;
  unint64_t v89;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v91;
  unint64_t v92;
  uint64_t v93;
  unint64_t v94;
  char *v95;
  uint64_t *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  uint64_t (*v102)(char *, char *, uint64_t);
  uint64_t v103;
  char *v104;
  unint64_t v105;
  unint64_t v106;
  unint64_t v107;
  uint64_t v108;
  unint64_t v109;
  char *v110;
  uint64_t *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  uint64_t v116;
  uint64_t (*v117)(char *, char *, uint64_t);
  uint64_t v118;
  char *v119;
  unint64_t v120;
  unint64_t v121;
  unint64_t v122;
  uint64_t v123;
  unint64_t v124;
  char *v125;
  uint64_t *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  char *v130;
  uint64_t v131;
  uint64_t (*v132)(char *, char *, uint64_t);
  uint64_t v133;
  char *v134;
  unint64_t v135;
  unint64_t v136;
  unint64_t v137;
  uint64_t v138;
  unint64_t v139;
  char *v140;
  uint64_t v141;
  char *v142;
  uint64_t v143;
  uint64_t (*v144)(char *, char *, uint64_t);
  uint64_t v145;
  char *v146;
  unint64_t v147;
  unint64_t v148;
  unint64_t v149;
  uint64_t v150;
  unint64_t v151;
  char *v152;
  uint64_t *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  char *v157;
  uint64_t v158;
  uint64_t (*v159)(char *, char *, uint64_t);
  uint64_t v160;
  char *v161;
  unint64_t v162;
  unint64_t v163;
  unint64_t v164;
  uint64_t v165;
  unint64_t v166;
  char *v167;
  uint64_t *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  char *v172;
  uint64_t v173;
  uint64_t (*v174)(char *, char *, uint64_t);
  uint64_t v175;
  char *v176;
  unint64_t v177;
  unint64_t v178;
  unint64_t v179;
  uint64_t v180;
  unint64_t v181;
  char *v182;
  uint64_t *v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  char *v187;
  uint64_t v188;
  uint64_t (*v189)(char *, char *, uint64_t);
  uint64_t v190;
  char *v191;
  unint64_t v192;
  unint64_t v193;
  unint64_t v194;
  uint64_t v195;
  uint64_t *v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  char *v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t (*v205)(char *, char *, uint64_t);
  uint64_t v206;
  unint64_t v207;
  unint64_t v208;
  unint64_t v209;
  uint64_t v210;
  unint64_t v211;
  char *v212;
  uint64_t v213;
  char *v214;
  uint64_t v215;
  uint64_t (*v216)(char *, char *, uint64_t);
  uint64_t v217;
  char *v218;
  unint64_t v219;
  unint64_t v220;
  unint64_t v221;
  uint64_t v222;
  uint64_t *v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  char *v227;
  char v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t (*v232)(char *, char *, uint64_t);
  uint64_t v233;
  unint64_t v234;
  unint64_t v235;
  unint64_t v236;
  uint64_t v237;
  unint64_t v238;
  char *v239;
  uint64_t *v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  char *v244;
  uint64_t v245;
  uint64_t (*v246)(char *, char *, uint64_t);
  uint64_t v247;
  char *v248;
  unint64_t v249;
  unint64_t v250;
  unint64_t v251;
  uint64_t v252;
  char *v253;
  uint64_t v254;
  uint64_t v255;
  char *v256;
  uint64_t (*v257)(char *, char *, uint64_t);
  uint64_t v258;
  char *v259;
  unint64_t v260;
  unint64_t v261;
  unint64_t v262;
  uint64_t v264;
  void (*v265)(char *, uint64_t, uint64_t, uint64_t);
  int *v266;
  unsigned int (*v267)(char *, uint64_t, uint64_t);
  uint64_t v268;
  uint64_t v269;
  __int128 v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  unint64_t v274;

  v274 = MEMORY[0x1E0DEE9D8];
  v1 = sub_19E36F4F8();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 64);
  MEMORY[0x1E0C80A78](v1);
  v4 = *(_QWORD *)(v0 + 24);
  v269 = v0;
  v5 = sub_19E247E74(&qword_1EE502F18);
  MEMORY[0x1E0C80A78](v5);
  v268 = v6;
  v7 = (char *)&v264 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!v4)
  {
    v265 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v2 + 56);
    v265((char *)&v264 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), 1, 1, v1);
    goto LABEL_7;
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_19E36F4EC();
  v265 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v2 + 56);
  v265(v7, 0, 1, v1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v2 + 48))(v7, 1, v1) == 1)
  {
LABEL_7:
    v13 = sub_19E326FA8((uint64_t)v7, &qword_1EE502F18);
    goto LABEL_8;
  }
  v8 = *(uint64_t (**)(char *, char *, uint64_t))(v2 + 32);
  v9 = v8((char *)&v264 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), v7, v1);
  MEMORY[0x1E0C80A78](v9);
  (*(void (**)(char *, char *, uint64_t))(v2 + 16))((char *)&v264 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), (char *)&v264 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), v1);
  v10 = sub_19E36A4D4(0, 1, 1, MEMORY[0x1E0DEE9D8]);
  v12 = *(_QWORD *)(v10 + 16);
  v11 = *(_QWORD *)(v10 + 24);
  if (v12 >= v11 >> 1)
    v10 = sub_19E36A4D4(v11 > 1, v12 + 1, 1, v10);
  *(_QWORD *)(v10 + 16) = v12 + 1;
  v8((char *)(v10+ ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80))+ *(_QWORD *)(v2 + 72) * v12), (char *)&v264 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), v1);
  v274 = v10;
  v13 = (*(uint64_t (**)(char *, uint64_t))(v2 + 8))((char *)&v264 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), v1);
LABEL_8:
  v14 = v269;
  v15 = *(_QWORD *)(v269 + 48);
  if (v15)
  {
    v17 = *(_QWORD *)(v269 + 56);
    v16 = *(_QWORD *)(v269 + 64);
    v270 = *(_OWORD *)(v269 + 32);
    v271 = v15;
    v272 = v17;
    v273 = v16;
    v18 = sub_19E33E584();
    v13 = sub_19E3494D0(v18);
  }
  v266 = (int *)&v264;
  v19 = MEMORY[0x1E0C80A78](v13);
  v20 = (v3 + 15) & 0xFFFFFFFFFFFFFFF0;
  v21 = (char *)&v264 - v20;
  v22 = *(_QWORD *)(v14 + 72);
  v23 = *(_QWORD *)(v14 + 80);
  v24 = *(_BYTE *)(v14 + 88);
  MEMORY[0x1E0C80A78](v19);
  v26 = (char *)&v264 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_bridgeObjectRetain();
  sub_19E33FE1C(v22, v23, v24);
  swift_bridgeObjectRelease();
  v267 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v2 + 48);
  if (v267(v26, 1, v1) == 1)
  {
    v27 = sub_19E326FA8((uint64_t)v26, &qword_1EE502F18);
  }
  else
  {
    v28 = *(uint64_t (**)(char *, char *, uint64_t))(v2 + 32);
    v29 = v28((char *)&v264 - v20, v26, v1);
    MEMORY[0x1E0C80A78](v29);
    v30 = (char *)&v264 - v20;
    (*(void (**)(char *, char *, uint64_t))(v2 + 16))((char *)&v264 - v20, (char *)&v264 - v20, v1);
    v31 = v274;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v31 = sub_19E36A4D4(0, *(_QWORD *)(v31 + 16) + 1, 1, v31);
    v33 = *(_QWORD *)(v31 + 16);
    v32 = *(_QWORD *)(v31 + 24);
    if (v33 >= v32 >> 1)
      v31 = sub_19E36A4D4(v32 > 1, v33 + 1, 1, v31);
    *(_QWORD *)(v31 + 16) = v33 + 1;
    v28((char *)(v31+ ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80))+ *(_QWORD *)(v2 + 72) * v33), v30, v1);
    v274 = v31;
    v27 = (*(uint64_t (**)(char *, uint64_t))(v2 + 8))(v21, v1);
  }
  v266 = (int *)&v264;
  v34 = MEMORY[0x1E0C80A78](v27);
  v35 = (v3 + 15) & 0xFFFFFFFFFFFFFFF0;
  v36 = (char *)&v264 - v35;
  v37 = *(_QWORD *)(v269 + 96);
  v38 = *(_QWORD *)(v269 + 104);
  v39 = *(_BYTE *)(v269 + 112);
  MEMORY[0x1E0C80A78](v34);
  v41 = (char *)&v264 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_bridgeObjectRetain();
  sub_19E33FFBC(v37, v38, v39);
  swift_bridgeObjectRelease();
  if (v267(v41, 1, v1) == 1)
  {
    v42 = sub_19E326FA8((uint64_t)v41, &qword_1EE502F18);
  }
  else
  {
    v43 = *(uint64_t (**)(char *, char *, uint64_t))(v2 + 32);
    v44 = v43((char *)&v264 - v35, v41, v1);
    MEMORY[0x1E0C80A78](v44);
    v45 = (char *)&v264 - v35;
    (*(void (**)(char *, char *, uint64_t))(v2 + 16))((char *)&v264 - v35, (char *)&v264 - v35, v1);
    v46 = v274;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v46 = sub_19E36A4D4(0, *(_QWORD *)(v46 + 16) + 1, 1, v46);
    v48 = *(_QWORD *)(v46 + 16);
    v47 = *(_QWORD *)(v46 + 24);
    if (v48 >= v47 >> 1)
      v46 = sub_19E36A4D4(v47 > 1, v48 + 1, 1, v46);
    *(_QWORD *)(v46 + 16) = v48 + 1;
    v43((char *)(v46+ ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80))+ *(_QWORD *)(v2 + 72) * v48), v45, v1);
    v274 = v46;
    v42 = (*(uint64_t (**)(char *, uint64_t))(v2 + 8))(v36, v1);
  }
  v266 = (int *)&v264;
  v49 = MEMORY[0x1E0C80A78](v42);
  v50 = *(_QWORD *)(v269 + 144);
  MEMORY[0x1E0C80A78](v49);
  v52 = (char *)&v264 - ((v51 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!v50)
  {
    v265((char *)&v264 - ((v51 + 15) & 0xFFFFFFFFFFFFFFF0), 1, 1, v1);
    goto LABEL_32;
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_19E36F4EC();
  v265(v52, 0, 1, v1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v267(v52, 1, v1) == 1)
  {
LABEL_32:
    v58 = sub_19E326FA8((uint64_t)v52, &qword_1EE502F18);
    goto LABEL_33;
  }
  v53 = *(uint64_t (**)(char *, char *, uint64_t))(v2 + 32);
  v54 = v53((char *)&v264 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), v52, v1);
  MEMORY[0x1E0C80A78](v54);
  (*(void (**)(char *, char *, uint64_t))(v2 + 16))((char *)&v264 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), (char *)&v264 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), v1);
  v55 = v274;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v55 = sub_19E36A4D4(0, *(_QWORD *)(v55 + 16) + 1, 1, v55);
  v57 = *(_QWORD *)(v55 + 16);
  v56 = *(_QWORD *)(v55 + 24);
  if (v57 >= v56 >> 1)
    v55 = sub_19E36A4D4(v56 > 1, v57 + 1, 1, v55);
  *(_QWORD *)(v55 + 16) = v57 + 1;
  v53((char *)(v55+ ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80))+ *(_QWORD *)(v2 + 72) * v57), (char *)&v264 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), v1);
  v274 = v55;
  v58 = (*(uint64_t (**)(char *, uint64_t))(v2 + 8))((char *)&v264 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), v1);
LABEL_33:
  v266 = (int *)&v264;
  v59 = MEMORY[0x1E0C80A78](v58);
  v60 = *(_QWORD *)(v269 + 176);
  MEMORY[0x1E0C80A78](v59);
  v62 = (char *)&v264 - ((v61 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!v60)
  {
    v265((char *)&v264 - ((v61 + 15) & 0xFFFFFFFFFFFFFFF0), 1, 1, v1);
    goto LABEL_41;
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_19E36F4EC();
  v265(v62, 0, 1, v1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v267(v62, 1, v1) == 1)
  {
LABEL_41:
    v68 = sub_19E326FA8((uint64_t)v62, &qword_1EE502F18);
    goto LABEL_42;
  }
  v63 = *(uint64_t (**)(char *, char *, uint64_t))(v2 + 32);
  v64 = v63((char *)&v264 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), v62, v1);
  MEMORY[0x1E0C80A78](v64);
  (*(void (**)(char *, char *, uint64_t))(v2 + 16))((char *)&v264 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), (char *)&v264 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), v1);
  v65 = v274;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v65 = sub_19E36A4D4(0, *(_QWORD *)(v65 + 16) + 1, 1, v65);
  v67 = *(_QWORD *)(v65 + 16);
  v66 = *(_QWORD *)(v65 + 24);
  if (v67 >= v66 >> 1)
    v65 = sub_19E36A4D4(v66 > 1, v67 + 1, 1, v65);
  *(_QWORD *)(v65 + 16) = v67 + 1;
  v63((char *)(v65+ ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80))+ *(_QWORD *)(v2 + 72) * v67), (char *)&v264 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), v1);
  v274 = v65;
  v68 = (*(uint64_t (**)(char *, uint64_t))(v2 + 8))((char *)&v264 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), v1);
LABEL_42:
  v266 = (int *)&v264;
  v69 = MEMORY[0x1E0C80A78](v68);
  v70 = (v3 + 15) & 0xFFFFFFFFFFFFFFF0;
  v71 = (char *)&v264 - v70;
  v72 = *(_QWORD *)(v269 + 184);
  v73 = *(_QWORD *)(v269 + 200);
  MEMORY[0x1E0C80A78](v69);
  v75 = (char *)&v264 - ((v74 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_19E340488(v72, v73, (void (*)(uint64_t, uint64_t))sub_19E343C88, (uint64_t)v75);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v267(v75, 1, v1) == 1)
  {
    v76 = sub_19E326FA8((uint64_t)v75, &qword_1EE502F18);
  }
  else
  {
    v77 = *(uint64_t (**)(char *, char *, uint64_t))(v2 + 32);
    v78 = v77((char *)&v264 - v70, v75, v1);
    MEMORY[0x1E0C80A78](v78);
    v79 = (char *)&v264 - v70;
    (*(void (**)(char *, char *, uint64_t))(v2 + 16))((char *)&v264 - v70, (char *)&v264 - v70, v1);
    v80 = v274;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v80 = sub_19E36A4D4(0, *(_QWORD *)(v80 + 16) + 1, 1, v80);
    v82 = *(_QWORD *)(v80 + 16);
    v81 = *(_QWORD *)(v80 + 24);
    if (v82 >= v81 >> 1)
      v80 = sub_19E36A4D4(v81 > 1, v82 + 1, 1, v80);
    *(_QWORD *)(v80 + 16) = v82 + 1;
    v77((char *)(v80+ ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80))+ *(_QWORD *)(v2 + 72) * v82), v79, v1);
    v274 = v80;
    v76 = (*(uint64_t (**)(char *, uint64_t))(v2 + 8))(v71, v1);
  }
  MEMORY[0x1E0C80A78](v76);
  v83 = (v3 + 15) & 0xFFFFFFFFFFFFFFF0;
  v266 = (int *)type metadata accessor for TapToRadarDraft();
  MEMORY[0x1E0C80A78](v266);
  v85 = (char *)&v264 - ((v84 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_19E3400D8((uint64_t)v85);
  if (v267(v85, 1, v1) == 1)
  {
    v86 = sub_19E326FA8((uint64_t)v85, &qword_1EE502F18);
  }
  else
  {
    v87 = *(uint64_t (**)(char *, char *, uint64_t))(v2 + 32);
    v88 = v87((char *)&v264 - v83, v85, v1);
    MEMORY[0x1E0C80A78](v88);
    (*(void (**)(char *, char *, uint64_t))(v2 + 16))((char *)&v264 - v83, (char *)&v264 - v83, v1);
    v89 = v274;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v264 = (uint64_t)&v264;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      v89 = sub_19E36A4D4(0, *(_QWORD *)(v89 + 16) + 1, 1, v89);
    v92 = *(_QWORD *)(v89 + 16);
    v91 = *(_QWORD *)(v89 + 24);
    if (v92 >= v91 >> 1)
      v89 = sub_19E36A4D4(v91 > 1, v92 + 1, 1, v89);
    *(_QWORD *)(v89 + 16) = v92 + 1;
    v87((char *)(v89+ ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80))+ *(_QWORD *)(v2 + 72) * v92), (char *)&v264 - v83, v1);
    v274 = v89;
    v86 = (*(uint64_t (**)(char *, uint64_t))(v2 + 8))((char *)&v264 - v83, v1);
  }
  v264 = (uint64_t)&v264;
  v93 = MEMORY[0x1E0C80A78](v86);
  v94 = (v3 + 15) & 0xFFFFFFFFFFFFFFF0;
  v95 = (char *)&v264 - v94;
  v96 = (uint64_t *)(v269 + v266[12]);
  v97 = *v96;
  v98 = v96[2];
  MEMORY[0x1E0C80A78](v93);
  v100 = (char *)&v264 - ((v99 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_19E340308(v97, v98, (uint64_t)v100);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v267(v100, 1, v1) == 1)
  {
    v101 = sub_19E326FA8((uint64_t)v100, &qword_1EE502F18);
  }
  else
  {
    v102 = *(uint64_t (**)(char *, char *, uint64_t))(v2 + 32);
    v103 = v102((char *)&v264 - v94, v100, v1);
    MEMORY[0x1E0C80A78](v103);
    v104 = (char *)&v264 - v94;
    (*(void (**)(char *, char *, uint64_t))(v2 + 16))((char *)&v264 - v94, (char *)&v264 - v94, v1);
    v105 = v274;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v105 = sub_19E36A4D4(0, *(_QWORD *)(v105 + 16) + 1, 1, v105);
    v107 = *(_QWORD *)(v105 + 16);
    v106 = *(_QWORD *)(v105 + 24);
    if (v107 >= v106 >> 1)
      v105 = sub_19E36A4D4(v106 > 1, v107 + 1, 1, v105);
    *(_QWORD *)(v105 + 16) = v107 + 1;
    v102((char *)(v105+ ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80))+ *(_QWORD *)(v2 + 72) * v107), v104, v1);
    v274 = v105;
    v101 = (*(uint64_t (**)(char *, uint64_t))(v2 + 8))(v95, v1);
  }
  v264 = (uint64_t)&v264;
  v108 = MEMORY[0x1E0C80A78](v101);
  v109 = (v3 + 15) & 0xFFFFFFFFFFFFFFF0;
  v110 = (char *)&v264 - v109;
  v111 = (uint64_t *)(v269 + v266[13]);
  v112 = *v111;
  v113 = v111[2];
  MEMORY[0x1E0C80A78](v108);
  v115 = (char *)&v264 - ((v114 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_19E340308(v112, v113, (uint64_t)v115);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v267(v115, 1, v1) == 1)
  {
    v116 = sub_19E326FA8((uint64_t)v115, &qword_1EE502F18);
  }
  else
  {
    v117 = *(uint64_t (**)(char *, char *, uint64_t))(v2 + 32);
    v118 = v117((char *)&v264 - v109, v115, v1);
    MEMORY[0x1E0C80A78](v118);
    v119 = (char *)&v264 - v109;
    (*(void (**)(char *, char *, uint64_t))(v2 + 16))((char *)&v264 - v109, (char *)&v264 - v109, v1);
    v120 = v274;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v120 = sub_19E36A4D4(0, *(_QWORD *)(v120 + 16) + 1, 1, v120);
    v122 = *(_QWORD *)(v120 + 16);
    v121 = *(_QWORD *)(v120 + 24);
    if (v122 >= v121 >> 1)
      v120 = sub_19E36A4D4(v121 > 1, v122 + 1, 1, v120);
    *(_QWORD *)(v120 + 16) = v122 + 1;
    v117((char *)(v120+ ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80))+ *(_QWORD *)(v2 + 72) * v122), v119, v1);
    v274 = v120;
    v116 = (*(uint64_t (**)(char *, uint64_t))(v2 + 8))(v110, v1);
  }
  v264 = (uint64_t)&v264;
  v123 = MEMORY[0x1E0C80A78](v116);
  v124 = (v3 + 15) & 0xFFFFFFFFFFFFFFF0;
  v125 = (char *)&v264 - v124;
  v126 = (uint64_t *)(v269 + v266[14]);
  v127 = *v126;
  v128 = v126[2];
  MEMORY[0x1E0C80A78](v123);
  v130 = (char *)&v264 - ((v129 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_19E340488(v127, v128, (void (*)(uint64_t, uint64_t))sub_19E343904, (uint64_t)v130);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v267(v130, 1, v1) == 1)
  {
    v131 = sub_19E326FA8((uint64_t)v130, &qword_1EE502F18);
  }
  else
  {
    v132 = *(uint64_t (**)(char *, char *, uint64_t))(v2 + 32);
    v133 = v132((char *)&v264 - v124, v130, v1);
    MEMORY[0x1E0C80A78](v133);
    v134 = (char *)&v264 - v124;
    (*(void (**)(char *, char *, uint64_t))(v2 + 16))((char *)&v264 - v124, (char *)&v264 - v124, v1);
    v135 = v274;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v135 = sub_19E36A4D4(0, *(_QWORD *)(v135 + 16) + 1, 1, v135);
    v137 = *(_QWORD *)(v135 + 16);
    v136 = *(_QWORD *)(v135 + 24);
    if (v137 >= v136 >> 1)
      v135 = sub_19E36A4D4(v136 > 1, v137 + 1, 1, v135);
    *(_QWORD *)(v135 + 16) = v137 + 1;
    v132((char *)(v135+ ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80))+ *(_QWORD *)(v2 + 72) * v137), v134, v1);
    v274 = v135;
    v131 = (*(uint64_t (**)(char *, uint64_t))(v2 + 8))(v125, v1);
  }
  v264 = (uint64_t)&v264;
  v138 = MEMORY[0x1E0C80A78](v131);
  v139 = (v3 + 15) & 0xFFFFFFFFFFFFFFF0;
  v140 = (char *)&v264 - v139;
  MEMORY[0x1E0C80A78](v138);
  v142 = (char *)&v264 - ((v141 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_bridgeObjectRetain();
  sub_19E36F4EC();
  swift_bridgeObjectRelease();
  v265(v142, 0, 1, v1);
  swift_bridgeObjectRelease();
  if (v267(v142, 1, v1) == 1)
  {
    v143 = sub_19E326FA8((uint64_t)v142, &qword_1EE502F18);
  }
  else
  {
    v144 = *(uint64_t (**)(char *, char *, uint64_t))(v2 + 32);
    v145 = v144((char *)&v264 - v139, v142, v1);
    MEMORY[0x1E0C80A78](v145);
    v146 = (char *)&v264 - v139;
    (*(void (**)(char *, char *, uint64_t))(v2 + 16))((char *)&v264 - v139, (char *)&v264 - v139, v1);
    v147 = v274;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v147 = sub_19E36A4D4(0, *(_QWORD *)(v147 + 16) + 1, 1, v147);
    v149 = *(_QWORD *)(v147 + 16);
    v148 = *(_QWORD *)(v147 + 24);
    if (v149 >= v148 >> 1)
      v147 = sub_19E36A4D4(v148 > 1, v149 + 1, 1, v147);
    *(_QWORD *)(v147 + 16) = v149 + 1;
    v144((char *)(v147+ ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80))+ *(_QWORD *)(v2 + 72) * v149), v146, v1);
    v274 = v147;
    v143 = (*(uint64_t (**)(char *, uint64_t))(v2 + 8))(v140, v1);
  }
  v264 = (uint64_t)&v264;
  v150 = MEMORY[0x1E0C80A78](v143);
  v151 = (v3 + 15) & 0xFFFFFFFFFFFFFFF0;
  v152 = (char *)&v264 - v151;
  v153 = (uint64_t *)(v269 + v266[16]);
  v154 = *v153;
  v155 = v153[2];
  MEMORY[0x1E0C80A78](v150);
  v157 = (char *)&v264 - ((v156 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_19E340488(v154, v155, (void (*)(uint64_t, uint64_t))sub_19E343904, (uint64_t)v157);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v267(v157, 1, v1) == 1)
  {
    v158 = sub_19E326FA8((uint64_t)v157, &qword_1EE502F18);
  }
  else
  {
    v159 = *(uint64_t (**)(char *, char *, uint64_t))(v2 + 32);
    v160 = v159((char *)&v264 - v151, v157, v1);
    MEMORY[0x1E0C80A78](v160);
    v161 = (char *)&v264 - v151;
    (*(void (**)(char *, char *, uint64_t))(v2 + 16))((char *)&v264 - v151, (char *)&v264 - v151, v1);
    v162 = v274;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v162 = sub_19E36A4D4(0, *(_QWORD *)(v162 + 16) + 1, 1, v162);
    v164 = *(_QWORD *)(v162 + 16);
    v163 = *(_QWORD *)(v162 + 24);
    if (v164 >= v163 >> 1)
      v162 = sub_19E36A4D4(v163 > 1, v164 + 1, 1, v162);
    *(_QWORD *)(v162 + 16) = v164 + 1;
    v159((char *)(v162+ ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80))+ *(_QWORD *)(v2 + 72) * v164), v161, v1);
    v274 = v162;
    v158 = (*(uint64_t (**)(char *, uint64_t))(v2 + 8))(v152, v1);
  }
  v264 = (uint64_t)&v264;
  v165 = MEMORY[0x1E0C80A78](v158);
  v166 = (v3 + 15) & 0xFFFFFFFFFFFFFFF0;
  v167 = (char *)&v264 - v166;
  v168 = (uint64_t *)(v269 + v266[17]);
  v169 = *v168;
  v170 = v168[2];
  MEMORY[0x1E0C80A78](v165);
  v172 = (char *)&v264 - ((v171 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_19E340488(v169, v170, (void (*)(uint64_t, uint64_t))sub_19E3437E4, (uint64_t)v172);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v267(v172, 1, v1) == 1)
  {
    v173 = sub_19E326FA8((uint64_t)v172, &qword_1EE502F18);
  }
  else
  {
    v174 = *(uint64_t (**)(char *, char *, uint64_t))(v2 + 32);
    v175 = v174((char *)&v264 - v166, v172, v1);
    MEMORY[0x1E0C80A78](v175);
    v176 = (char *)&v264 - v166;
    (*(void (**)(char *, char *, uint64_t))(v2 + 16))((char *)&v264 - v166, (char *)&v264 - v166, v1);
    v177 = v274;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v177 = sub_19E36A4D4(0, *(_QWORD *)(v177 + 16) + 1, 1, v177);
    v179 = *(_QWORD *)(v177 + 16);
    v178 = *(_QWORD *)(v177 + 24);
    if (v179 >= v178 >> 1)
      v177 = sub_19E36A4D4(v178 > 1, v179 + 1, 1, v177);
    *(_QWORD *)(v177 + 16) = v179 + 1;
    v174((char *)(v177+ ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80))+ *(_QWORD *)(v2 + 72) * v179), v176, v1);
    v274 = v177;
    v173 = (*(uint64_t (**)(char *, uint64_t))(v2 + 8))(v167, v1);
  }
  v264 = (uint64_t)&v264;
  v180 = MEMORY[0x1E0C80A78](v173);
  v181 = (v3 + 15) & 0xFFFFFFFFFFFFFFF0;
  v182 = (char *)&v264 - v181;
  v183 = (uint64_t *)(v269 + v266[18]);
  v184 = *v183;
  v185 = v183[2];
  MEMORY[0x1E0C80A78](v180);
  v187 = (char *)&v264 - ((v186 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_19E340488(v184, v185, (void (*)(uint64_t, uint64_t))sub_19E343904, (uint64_t)v187);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v267(v187, 1, v1) == 1)
  {
    v188 = sub_19E326FA8((uint64_t)v187, &qword_1EE502F18);
  }
  else
  {
    v189 = *(uint64_t (**)(char *, char *, uint64_t))(v2 + 32);
    v190 = v189((char *)&v264 - v181, v187, v1);
    MEMORY[0x1E0C80A78](v190);
    v191 = (char *)&v264 - v181;
    (*(void (**)(char *, char *, uint64_t))(v2 + 16))((char *)&v264 - v181, (char *)&v264 - v181, v1);
    v192 = v274;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v192 = sub_19E36A4D4(0, *(_QWORD *)(v192 + 16) + 1, 1, v192);
    v194 = *(_QWORD *)(v192 + 16);
    v193 = *(_QWORD *)(v192 + 24);
    if (v194 >= v193 >> 1)
      v192 = sub_19E36A4D4(v193 > 1, v194 + 1, 1, v192);
    *(_QWORD *)(v192 + 16) = v194 + 1;
    v189((char *)(v192+ ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80))+ *(_QWORD *)(v2 + 72) * v194), v191, v1);
    v274 = v192;
    v188 = (*(uint64_t (**)(char *, uint64_t))(v2 + 8))(v182, v1);
  }
  v195 = MEMORY[0x1E0C80A78](v188);
  v196 = (uint64_t *)(v269 + v266[19]);
  v198 = *v196;
  v197 = v196[1];
  MEMORY[0x1E0C80A78](v195);
  v200 = (char *)&v264 - ((v199 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)&v270 = v198;
  *((_QWORD *)&v270 + 1) = v197;
  v271 = v201;
  swift_bridgeObjectRetain();
  sub_19E33F3EC();
  if (v202)
  {
    sub_19E36F4EC();
    swift_bridgeObjectRelease();
    v203 = 0;
  }
  else
  {
    v203 = 1;
  }
  v265(v200, v203, 1, v1);
  swift_bridgeObjectRelease();
  if (v267(v200, 1, v1) == 1)
  {
    v204 = sub_19E326FA8((uint64_t)v200, &qword_1EE502F18);
  }
  else
  {
    v264 = (uint64_t)&v264;
    v205 = *(uint64_t (**)(char *, char *, uint64_t))(v2 + 32);
    v206 = v205((char *)&v264 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), v200, v1);
    MEMORY[0x1E0C80A78](v206);
    (*(void (**)(char *, char *, uint64_t))(v2 + 16))((char *)&v264 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), (char *)&v264 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), v1);
    v207 = v274;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v207 = sub_19E36A4D4(0, *(_QWORD *)(v207 + 16) + 1, 1, v207);
    v209 = *(_QWORD *)(v207 + 16);
    v208 = *(_QWORD *)(v207 + 24);
    if (v209 >= v208 >> 1)
      v207 = sub_19E36A4D4(v208 > 1, v209 + 1, 1, v207);
    *(_QWORD *)(v207 + 16) = v209 + 1;
    v205((char *)(v207+ ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80))+ *(_QWORD *)(v2 + 72) * v209), (char *)&v264 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), v1);
    v274 = v207;
    v204 = (*(uint64_t (**)(char *, uint64_t))(v2 + 8))((char *)&v264 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), v1);
  }
  v264 = (uint64_t)&v264;
  v210 = MEMORY[0x1E0C80A78](v204);
  v211 = (v3 + 15) & 0xFFFFFFFFFFFFFFF0;
  v212 = (char *)&v264 - v211;
  MEMORY[0x1E0C80A78](v210);
  v214 = (char *)&v264 - ((v213 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_bridgeObjectRetain();
  sub_19E36F4EC();
  swift_bridgeObjectRelease();
  v265(v214, 0, 1, v1);
  swift_bridgeObjectRelease();
  if (v267(v214, 1, v1) == 1)
  {
    v215 = sub_19E326FA8((uint64_t)v214, &qword_1EE502F18);
  }
  else
  {
    v216 = *(uint64_t (**)(char *, char *, uint64_t))(v2 + 32);
    v217 = v216((char *)&v264 - v211, v214, v1);
    MEMORY[0x1E0C80A78](v217);
    v218 = (char *)&v264 - v211;
    (*(void (**)(char *, char *, uint64_t))(v2 + 16))((char *)&v264 - v211, (char *)&v264 - v211, v1);
    v219 = v274;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v219 = sub_19E36A4D4(0, *(_QWORD *)(v219 + 16) + 1, 1, v219);
    v221 = *(_QWORD *)(v219 + 16);
    v220 = *(_QWORD *)(v219 + 24);
    if (v221 >= v220 >> 1)
      v219 = sub_19E36A4D4(v220 > 1, v221 + 1, 1, v219);
    *(_QWORD *)(v219 + 16) = v221 + 1;
    v216((char *)(v219+ ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80))+ *(_QWORD *)(v2 + 72) * v221), v218, v1);
    v274 = v219;
    v215 = (*(uint64_t (**)(char *, uint64_t))(v2 + 8))(v212, v1);
  }
  v222 = MEMORY[0x1E0C80A78](v215);
  v223 = (uint64_t *)(v269 + v266[21]);
  v225 = *v223;
  v224 = v223[1];
  MEMORY[0x1E0C80A78](v222);
  v227 = (char *)&v264 - ((v226 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)&v270 = v225;
  *((_QWORD *)&v270 + 1) = v224;
  LOBYTE(v271) = v228;
  swift_bridgeObjectRetain();
  sub_19E33F984();
  if (v229)
  {
    sub_19E36F4EC();
    swift_bridgeObjectRelease();
    v230 = 0;
  }
  else
  {
    v230 = 1;
  }
  v265(v227, v230, 1, v1);
  swift_bridgeObjectRelease();
  if (v267(v227, 1, v1) == 1)
  {
    v231 = sub_19E326FA8((uint64_t)v227, &qword_1EE502F18);
  }
  else
  {
    v264 = (uint64_t)&v264;
    v232 = *(uint64_t (**)(char *, char *, uint64_t))(v2 + 32);
    v233 = v232((char *)&v264 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), v227, v1);
    MEMORY[0x1E0C80A78](v233);
    (*(void (**)(char *, char *, uint64_t))(v2 + 16))((char *)&v264 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), (char *)&v264 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), v1);
    v234 = v274;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v234 = sub_19E36A4D4(0, *(_QWORD *)(v234 + 16) + 1, 1, v234);
    v236 = *(_QWORD *)(v234 + 16);
    v235 = *(_QWORD *)(v234 + 24);
    if (v236 >= v235 >> 1)
      v234 = sub_19E36A4D4(v235 > 1, v236 + 1, 1, v234);
    *(_QWORD *)(v234 + 16) = v236 + 1;
    v232((char *)(v234+ ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80))+ *(_QWORD *)(v2 + 72) * v236), (char *)&v264 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), v1);
    v274 = v234;
    v231 = (*(uint64_t (**)(char *, uint64_t))(v2 + 8))((char *)&v264 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), v1);
  }
  v264 = (uint64_t)&v264;
  v237 = MEMORY[0x1E0C80A78](v231);
  v238 = (v3 + 15) & 0xFFFFFFFFFFFFFFF0;
  v239 = (char *)&v264 - v238;
  v240 = (uint64_t *)(v269 + v266[22]);
  v241 = *v240;
  v242 = v240[2];
  MEMORY[0x1E0C80A78](v237);
  v244 = (char *)&v264 - ((v243 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_19E340488(v241, v242, (void (*)(uint64_t, uint64_t))sub_19E343904, (uint64_t)v244);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v267(v244, 1, v1) == 1)
  {
    v245 = sub_19E326FA8((uint64_t)v244, &qword_1EE502F18);
  }
  else
  {
    v246 = *(uint64_t (**)(char *, char *, uint64_t))(v2 + 32);
    v247 = v246((char *)&v264 - v238, v244, v1);
    MEMORY[0x1E0C80A78](v247);
    v248 = (char *)&v264 - v238;
    (*(void (**)(char *, char *, uint64_t))(v2 + 16))((char *)&v264 - v238, (char *)&v264 - v238, v1);
    v249 = v274;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v249 = sub_19E36A4D4(0, *(_QWORD *)(v249 + 16) + 1, 1, v249);
    v251 = *(_QWORD *)(v249 + 16);
    v250 = *(_QWORD *)(v249 + 24);
    if (v251 >= v250 >> 1)
      v249 = sub_19E36A4D4(v250 > 1, v251 + 1, 1, v249);
    *(_QWORD *)(v249 + 16) = v251 + 1;
    v246((char *)(v249+ ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80))+ *(_QWORD *)(v2 + 72) * v251), v248, v1);
    v274 = v249;
    v245 = (*(uint64_t (**)(char *, uint64_t))(v2 + 8))(v239, v1);
  }
  v264 = (uint64_t)&v264;
  v252 = MEMORY[0x1E0C80A78](v245);
  v253 = (char *)&v264 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v254 = *(_QWORD *)(v269 + v266[23] + 24);
  MEMORY[0x1E0C80A78](v252);
  v256 = (char *)&v264 - ((v255 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!v254)
  {
    v265((char *)&v264 - ((v255 + 15) & 0xFFFFFFFFFFFFFFF0), 1, 1, v1);
    goto LABEL_147;
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_19E36F4EC();
  v265(v256, 0, 1, v1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v267(v256, 1, v1) == 1)
  {
LABEL_147:
    sub_19E326FA8((uint64_t)v256, &qword_1EE502F18);
    return v274;
  }
  v257 = *(uint64_t (**)(char *, char *, uint64_t))(v2 + 32);
  v258 = v257((char *)&v264 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), v256, v1);
  MEMORY[0x1E0C80A78](v258);
  v259 = (char *)&v264 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, char *, uint64_t))(v2 + 16))(v259, v253, v1);
  v260 = v274;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v260 = sub_19E36A4D4(0, *(_QWORD *)(v260 + 16) + 1, 1, v260);
  v262 = *(_QWORD *)(v260 + 16);
  v261 = *(_QWORD *)(v260 + 24);
  if (v262 >= v261 >> 1)
    v260 = sub_19E36A4D4(v261 > 1, v262 + 1, 1, v260);
  *(_QWORD *)(v260 + 16) = v262 + 1;
  v257((char *)(v260+ ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80))+ *(_QWORD *)(v2 + 72) * v262), v259, v1);
  v274 = v260;
  (*(void (**)(char *, uint64_t))(v2 + 8))(v253, v1);
  return v274;
}

uint64_t TapToRadarDraft.open()()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 128) = v0;
  return swift_task_switch();
}

uint64_t sub_19E33DF64()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  id v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;

  v1 = sub_19E36F5E8();
  *(_QWORD *)(v0 + 136) = v1;
  v2 = *(_QWORD *)(v1 - 8);
  *(_QWORD *)(v0 + 144) = v2;
  v3 = swift_task_alloc();
  *(_QWORD *)(v0 + 152) = v3;
  sub_19E33B9CC(v3);
  v4 = objc_msgSend((id)objc_opt_self(), sel_defaultWorkspace);
  *(_QWORD *)(v0 + 160) = v4;
  if (v4)
  {
    v5 = v4;
    v6 = sub_19E36F5C4();
    *(_QWORD *)(v0 + 168) = v6;
    *(_QWORD *)(v0 + 56) = v0 + 120;
    *(_QWORD *)(v0 + 16) = v0;
    *(_QWORD *)(v0 + 24) = sub_19E33E190;
    v7 = swift_continuation_init();
    *(_QWORD *)(v0 + 80) = MEMORY[0x1E0C809B0];
    v8 = (_QWORD *)(v0 + 80);
    v8[1] = 0x40000000;
    v8[2] = sub_19E33E2D0;
    v8[3] = &unk_1E3FB4A58;
    v8[4] = v7;
    objc_msgSend(v5, sel_openURL_configuration_completionHandler_, v6, 0, v8);
    return swift_continuation_await();
  }
  else
  {
    if (qword_1EE501578 != -1)
      swift_once();
    v10 = sub_19E36F798();
    sub_19E3222C4(v10, (uint64_t)qword_1EE506678);
    v11 = sub_19E36F780();
    v12 = sub_19E36FA98();
    if (os_log_type_enabled(v11, v12))
    {
      v13 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v13 = 0;
      _os_log_impl(&dword_19E239000, v11, v12, "No default LSApplicationWorkspace, could not open tap to radar!", v13, 2u);
      MEMORY[0x1A1AE8ACC](v13, -1, -1);
    }

    (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v3, v1);
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_19E33E190()
{
  uint64_t v0;

  *(_QWORD *)(*(_QWORD *)v0 + 176) = *(_QWORD *)(*(_QWORD *)v0 + 48);
  return swift_task_switch();
}

uint64_t sub_19E33E1F0()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(void **)(v0 + 168);
  v3 = *(_QWORD *)(v0 + 144);
  v2 = *(_QWORD *)(v0 + 152);
  v4 = *(_QWORD *)(v0 + 136);

  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_19E33E25C()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(void **)(v0 + 168);
  v2 = *(_QWORD *)(v0 + 152);
  v3 = *(void **)(v0 + 160);
  v4 = *(_QWORD *)(v0 + 136);
  v5 = *(_QWORD *)(v0 + 144);
  swift_willThrow();

  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v2, v4);
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_19E33E2D0(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3;
  _QWORD *v5;
  id v6;
  uint64_t v8;
  uint64_t v9;

  v3 = *(_QWORD *)(a1 + 32);
  if (a3)
  {
    sub_19E247E74(&qword_1ECFC6620);
    swift_allocError();
    *v5 = a3;
    v6 = a3;
    return swift_continuation_throwingResumeWithError();
  }
  else
  {
    if (a2)
      v8 = sub_19E36F828();
    else
      v8 = 0;
    v9 = v8;
    sub_19E34379C((uint64_t)&v9, *(_QWORD *)(*(_QWORD *)(v3 + 64) + 40));
    return swift_continuation_throwingResume();
  }
}

uint64_t static TapToRadarDraft.Component.messagesAll.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  if (qword_1EE501560 != -1)
    swift_once();
  v2 = qword_1EE502D90;
  v3 = unk_1EE502D98;
  v4 = qword_1EE502DA0;
  *(_OWORD *)a1 = xmmword_1EE502D80;
  *(_QWORD *)(a1 + 16) = v2;
  *(_QWORD *)(a1 + 24) = v3;
  *(_QWORD *)(a1 + 32) = v4;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t static TapToRadarDraft.submitTapToRadar(title:problemDescription:deviceClasses:component:classification:reproducibility:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, unsigned __int8 *a7@<X6>, unsigned __int8 *a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 v18;
  unsigned __int8 v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v25;
  unsigned __int8 v26;
  uint64_t v27;
  unsigned __int8 v28;
  unsigned __int8 v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v16 = *(_QWORD *)(a6 + 16);
  v15 = *(_QWORD *)(a6 + 24);
  v17 = *(_QWORD *)(a6 + 32);
  v18 = *a7;
  v19 = *a8;
  v30 = *(_OWORD *)a6;
  v31 = v16;
  v32 = v15;
  v33 = v17;
  v29 = v18;
  v28 = v19;
  v20 = sub_19E247E74(&qword_1EE502E00);
  MEMORY[0x1E0C80A78](v20);
  v22 = (char *)&v25 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_19E36F630();
  v23 = sub_19E36F63C();
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 56))(v22, 0, 1, v23);
  v27 = 0;
  v26 = 0;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return sub_19E33B3E0(0, 0, &v30, &v29, &v28, a1, a2, a3, a9, a4, MEMORY[0x1E0DEE9D8], (uint64_t)v22, MEMORY[0x1E0DEE9D8], MEMORY[0x1E0DEE9D8], MEMORY[0x1E0DEE9D8], 0, MEMORY[0x1E0DEE9D8], a5, MEMORY[0x1E0DEE9D8],
           &v27,
           1u,
           &v26,
           MEMORY[0x1E0DEE9D8],
           0,
           0);
}

uint64_t sub_19E33E584()
{
  uint64_t v0;

  sub_19E247E74(&qword_1EE502F20);
  sub_19E36F4F8();
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_19E381BB0;
  sub_19E36FDF8();
  sub_19E36F4EC();
  swift_bridgeObjectRelease();
  sub_19E36F4EC();
  sub_19E36F4EC();
  return v0;
}

double sub_19E33E6D8()
{
  double result;

  *(_QWORD *)&result = 450305;
  xmmword_1EE502D80 = xmmword_19E381E90;
  qword_1EE502D90 = 0xE800000000000000;
  unk_1EE502D98 = 7105633;
  qword_1EE502DA0 = 0xE300000000000000;
  return result;
}

double sub_19E33E708()
{
  double result;

  *(_QWORD *)&result = 137610;
  xmmword_1EE502DA8 = xmmword_19E381EA0;
  qword_1EE502DB8 = 0xE800000000000000;
  unk_1EE502DC0 = 0x6775422077654E28;
  qword_1EE502DC8 = 0xEA00000000002973;
  return result;
}

uint64_t static TapToRadarDraft.Component.messagesNewBugs.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  if (qword_1EE501568 != -1)
    swift_once();
  v2 = qword_1EE502DB8;
  v3 = unk_1EE502DC0;
  v4 = qword_1EE502DC8;
  *(_OWORD *)a1 = xmmword_1EE502DA8;
  *(_QWORD *)(a1 + 16) = v2;
  *(_QWORD *)(a1 + 24) = v3;
  *(_QWORD *)(a1 + 32) = v4;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

double sub_19E33E7B0()
{
  double result;

  *(_QWORD *)&result = 988691;
  xmmword_1EE502DD0 = xmmword_19E381EB0;
  qword_1EE502DE0 = 0xEA00000000007365;
  unk_1EE502DE8 = 825242446;
  qword_1EE502DF0 = 0xE400000000000000;
  return result;
}

uint64_t static TapToRadarDraft.Component.mrmessages.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  if (qword_1EE501570 != -1)
    swift_once();
  v2 = qword_1EE502DE0;
  v3 = unk_1EE502DE8;
  v4 = qword_1EE502DF0;
  *(_OWORD *)a1 = xmmword_1EE502DD0;
  *(_QWORD *)(a1 + 16) = v2;
  *(_QWORD *)(a1 + 24) = v3;
  *(_QWORD *)(a1 + 32) = v4;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t TapToRadarDraft.Component.hash(into:)()
{
  sub_19E36FE94();
  swift_bridgeObjectRetain();
  sub_19E36F8B8();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_19E36F8B8();
  return swift_bridgeObjectRelease();
}

uint64_t TapToRadarDraft.Component.hashValue.getter()
{
  sub_19E36FE88();
  sub_19E36FE94();
  swift_bridgeObjectRetain();
  sub_19E36F8B8();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_19E36F8B8();
  swift_bridgeObjectRelease();
  return sub_19E36FEA0();
}

uint64_t sub_19E33E96C()
{
  sub_19E36FE88();
  sub_19E36FE94();
  swift_bridgeObjectRetain();
  sub_19E36F8B8();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_19E36F8B8();
  swift_bridgeObjectRelease();
  return sub_19E36FEA0();
}

uint64_t sub_19E33EA08()
{
  sub_19E36FE94();
  swift_bridgeObjectRetain();
  sub_19E36F8B8();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_19E36F8B8();
  return swift_bridgeObjectRelease();
}

uint64_t sub_19E33EA84()
{
  sub_19E36FE88();
  sub_19E36FE94();
  swift_bridgeObjectRetain();
  sub_19E36F8B8();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_19E36F8B8();
  swift_bridgeObjectRelease();
  return sub_19E36FEA0();
}

uint64_t sub_19E33EB20()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_19E33EB50 + 4 * byte_19E381EC0[*v0]))(0x7974697275636553, 0xE800000000000000);
}

unint64_t sub_19E33EB50()
{
  return 0xD000000000000014;
}

uint64_t sub_19E33EB6C()
{
  return 0x7265776F50;
}

uint64_t sub_19E33EB80()
{
  return 0x616D726F66726550;
}

uint64_t sub_19E33EBA0()
{
  return 0x69626173552F4955;
}

uint64_t sub_19E33EBC0()
{
  return 0x2073756F69726553;
}

uint64_t sub_19E33EBE0()
{
  return 0x754220726568744FLL;
}

uint64_t sub_19E33EBFC()
{
  return 0x2065727574616546;
}

uint64_t sub_19E33EC20()
{
  return 0x6D65636E61686E45;
}

uint64_t sub_19E33EC40()
{
  return 1802723668;
}

uint64_t TapToRadarDraft.Classification.rawValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_19E33EC80 + 4 * byte_19E381ECA[*v0]))(0x7974697275636553, 0xE800000000000000);
}

unint64_t sub_19E33EC80()
{
  return 0xD000000000000014;
}

uint64_t sub_19E33EC9C()
{
  return 0x7265776F50;
}

uint64_t sub_19E33ECB0()
{
  return 0x616D726F66726550;
}

uint64_t sub_19E33ECD0()
{
  return 0x69626173552F4955;
}

uint64_t sub_19E33ECF0()
{
  return 0x2073756F69726553;
}

uint64_t sub_19E33ED10()
{
  return 0x754220726568744FLL;
}

uint64_t sub_19E33ED2C()
{
  return 0x2065727574616546;
}

uint64_t sub_19E33ED50()
{
  return 0x6D65636E61686E45;
}

uint64_t sub_19E33ED70()
{
  return 1802723668;
}

IMSharedUtilities::TapToRadarDraft::Classification_optional __swiftcall TapToRadarDraft.Classification.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  char *v2;
  unint64_t v3;
  IMSharedUtilities::TapToRadarDraft::Classification_optional result;
  char v5;

  v2 = v1;
  v3 = sub_19E36FD44();
  result.value = swift_bridgeObjectRelease();
  v5 = 10;
  if (v3 < 0xA)
    v5 = v3;
  *v2 = v5;
  return result;
}

void sub_19E33EDD8(char *a1)
{
  sub_19E35BCE8(*a1);
}

uint64_t sub_19E33EDE4()
{
  char *v0;
  char v1;
  _BYTE v3[72];

  v1 = *v0;
  sub_19E36FE88();
  sub_19E35C474((uint64_t)v3, v1);
  return sub_19E36FEA0();
}

void sub_19E33EE28(uint64_t a1)
{
  char *v1;

  sub_19E35C474(a1, *v1);
}

uint64_t sub_19E33EE30()
{
  char *v0;
  char v1;
  _BYTE v3[72];

  v1 = *v0;
  sub_19E36FE88();
  sub_19E35C474((uint64_t)v3, v1);
  return sub_19E36FEA0();
}

IMSharedUtilities::TapToRadarDraft::Classification_optional sub_19E33EE70(Swift::String *a1)
{
  return TapToRadarDraft.Classification.init(rawValue:)(*a1);
}

uint64_t sub_19E33EE7C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = TapToRadarDraft.Classification.rawValue.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t TapToRadarDraft.Reproducibility.rawValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_19E33EED0 + 4 * byte_19E381ED4[*v0]))(0x737961776C41, 0xE600000000000000);
}

uint64_t sub_19E33EED0()
{
  return 0x656D6974656D6F53;
}

uint64_t sub_19E33EEEC()
{
  return 0x796C65726152;
}

uint64_t sub_19E33EEFC()
{
  return 0x656C62616E55;
}

uint64_t sub_19E33EF0C()
{
  return 0x74276E6469442049;
}

uint64_t sub_19E33EF2C()
{
  return 0x6C70704120746F4ELL;
}

IMSharedUtilities::TapToRadarDraft::Reproducibility_optional __swiftcall TapToRadarDraft.Reproducibility.init(rawValue:)(Swift::String rawValue)
{
  char *v1;

  return (IMSharedUtilities::TapToRadarDraft::Reproducibility_optional)sub_19E33F1D0(v1);
}

void sub_19E33EF5C(char *a1)
{
  sub_19E35B988(*a1);
}

void sub_19E33EF68()
{
  char *v0;

  sub_19E35C16C(*v0);
}

void sub_19E33EF70()
{
  __asm { BR              X10 }
}

uint64_t sub_19E33EFA8()
{
  sub_19E36F8B8();
  return swift_bridgeObjectRelease();
}

void sub_19E33F03C(uint64_t a1)
{
  char *v1;

  sub_19E35C774(a1, *v1);
}

IMSharedUtilities::TapToRadarDraft::Reproducibility_optional sub_19E33F044(Swift::String *a1)
{
  return TapToRadarDraft.Reproducibility.init(rawValue:)(*a1);
}

uint64_t sub_19E33F050()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_19E33F07C + 4 * byte_19E381EE0[*v0]))();
}

void sub_19E33F07C(_QWORD *a1@<X8>)
{
  *a1 = 0x656D6974656D6F53;
  a1[1] = 0xE900000000000073;
}

void sub_19E33F09C(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = 0x796C65726152;
  a1[1] = v1;
}

void sub_19E33F0B0(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = 0x656C62616E55;
  a1[1] = v1;
}

void sub_19E33F0C4(uint64_t a1@<X8>)
{
  strcpy((char *)a1, "I Didn't Try");
  *(_BYTE *)(a1 + 13) = 0;
  *(_WORD *)(a1 + 14) = -5120;
}

void sub_19E33F0E8(char *a1@<X8>)
{
  strcpy(a1, "Not Applicable");
  a1[15] = -18;
}

uint64_t sub_19E33F110()
{
  char *v0;

  return *(_QWORD *)&aAlways_1[8 * *v0];
}

uint64_t TapToRadarDraft.DeviceClass.rawValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_19E33F160 + 4 * byte_19E381EE6[*v0]))(0x656E6F685069, 0xE600000000000000);
}

uint64_t sub_19E33F160()
{
  return 1684099177;
}

uint64_t sub_19E33F170()
{
  return 0x6863746157;
}

uint64_t sub_19E33F184()
{
  return 0x5654656C707041;
}

uint64_t sub_19E33F19C()
{
  return 0x646F50656D6F48;
}

uint64_t sub_19E33F1B4()
{
  return 6512973;
}

IMSharedUtilities::TapToRadarDraft::DeviceClass_optional __swiftcall TapToRadarDraft.DeviceClass.init(rawValue:)(Swift::String rawValue)
{
  char *v1;

  return (IMSharedUtilities::TapToRadarDraft::DeviceClass_optional)sub_19E33F1D0(v1);
}

uint64_t sub_19E33F1D0@<X0>(char *a1@<X8>)
{
  unint64_t v2;
  uint64_t result;
  char v4;

  v2 = sub_19E36FD44();
  result = swift_bridgeObjectRelease();
  v4 = 6;
  if (v2 < 6)
    v4 = v2;
  *a1 = v4;
  return result;
}

void sub_19E33F224(char *a1)
{
  sub_19E35BFD4(*a1);
}

void sub_19E33F230()
{
  char *v0;

  sub_19E35C260(*v0);
}

void sub_19E33F238()
{
  __asm { BR              X10 }
}

uint64_t sub_19E33F270()
{
  sub_19E36F8B8();
  return swift_bridgeObjectRelease();
}

void sub_19E33F2E8(uint64_t a1)
{
  char *v1;

  sub_19E35C5C8(a1, *v1);
}

IMSharedUtilities::TapToRadarDraft::DeviceClass_optional sub_19E33F2F0(Swift::String *a1)
{
  return TapToRadarDraft.DeviceClass.init(rawValue:)(*a1);
}

uint64_t sub_19E33F2FC()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_19E33F328 + 4 * byte_19E381EF2[*v0]))();
}

void sub_19E33F328(_QWORD *a1@<X8>)
{
  *a1 = 1684099177;
  a1[1] = 0xE400000000000000;
}

void sub_19E33F33C(_QWORD *a1@<X8>)
{
  *a1 = 0x6863746157;
  a1[1] = 0xE500000000000000;
}

void sub_19E33F354(_QWORD *a1@<X8>)
{
  *a1 = 0x5654656C707041;
  a1[1] = 0xE700000000000000;
}

void sub_19E33F370(_QWORD *a1@<X8>)
{
  *a1 = 0x646F50656D6F48;
  a1[1] = 0xE700000000000000;
}

void sub_19E33F38C(_QWORD *a1@<X8>)
{
  *a1 = 6512973;
  a1[1] = 0xE300000000000000;
}

uint64_t sub_19E33F3A0()
{
  char *v0;

  return *(_QWORD *)&aIphone_1[8 * *v0];
}

uint64_t TapToRadarDraft.RemoteDeviceSelections.rawValue.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t TapToRadarDraft.RemoteDeviceSelections.rawValue.setter(uint64_t result)
{
  _QWORD *v1;

  *v1 = result;
  return result;
}

uint64_t (*TapToRadarDraft.RemoteDeviceSelections.rawValue.modify())()
{
  return nullsub_5;
}

IMSharedUtilities::TapToRadarDraft::RemoteDeviceSelections __swiftcall TapToRadarDraft.RemoteDeviceSelections.init(rawValue:)(IMSharedUtilities::TapToRadarDraft::RemoteDeviceSelections rawValue)
{
  IMSharedUtilities::TapToRadarDraft::RemoteDeviceSelections *v1;

  v1->rawValue = rawValue.rawValue;
  return rawValue;
}

uint64_t sub_19E33F3EC()
{
  uint64_t *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;

  v1 = *v0;
  if (*v0)
  {
    if ((v1 & 1) != 0)
    {
      v2 = sub_19E36A3C8(0, 1, 1, MEMORY[0x1E0DEE9D8]);
      v5 = v2[2];
      v4 = v2[3];
      if (v5 >= v4 >> 1)
        v2 = sub_19E36A3C8((_QWORD *)(v4 > 1), v5 + 1, 1, v2);
      v2[2] = v5 + 1;
      v6 = &v2[2 * v5];
      v6[4] = 0x79616C50726941;
      v6[5] = 0xE700000000000000;
      if ((v1 & 2) == 0)
      {
LABEL_14:
        if ((v1 & 4) != 0)
        {
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v2 = sub_19E36A3C8(0, v2[2] + 1, 1, v2);
          v11 = v2[2];
          v10 = v2[3];
          if (v11 >= v10 >> 1)
            v2 = sub_19E36A3C8((_QWORD *)(v10 > 1), v11 + 1, 1, v2);
          v2[2] = v11 + 1;
          v12 = (char *)&v2[2 * v11];
          strcpy(v12 + 32, "MediaSystems");
          v12[45] = 0;
          *((_WORD *)v12 + 23) = -5120;
          if ((v1 & 8) == 0)
          {
LABEL_16:
            if ((v1 & 0x10) == 0)
            {
LABEL_33:
              sub_19E247E74(&qword_1ECFC6610);
              sub_19E3436C0();
              v3 = sub_19E36F840();
              swift_bridgeObjectRelease();
              return v3;
            }
LABEL_28:
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
              v2 = sub_19E36A3C8(0, v2[2] + 1, 1, v2);
            v17 = v2[2];
            v16 = v2[3];
            if (v17 >= v16 >> 1)
              v2 = sub_19E36A3C8((_QWORD *)(v16 > 1), v17 + 1, 1, v2);
            v2[2] = v17 + 1;
            v18 = &v2[2 * v17];
            v18[4] = 0x79627261654ELL;
            v18[5] = 0xE600000000000000;
            goto LABEL_33;
          }
        }
        else if ((v1 & 8) == 0)
        {
          goto LABEL_16;
        }
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v2 = sub_19E36A3C8(0, v2[2] + 1, 1, v2);
        v14 = v2[2];
        v13 = v2[3];
        if (v14 >= v13 >> 1)
          v2 = sub_19E36A3C8((_QWORD *)(v13 > 1), v14 + 1, 1, v2);
        v2[2] = v14 + 1;
        v15 = &v2[2 * v14];
        v15[4] = 0x616C506572616853;
        v15[5] = 0xE900000000000079;
        if ((v1 & 0x10) == 0)
          goto LABEL_33;
        goto LABEL_28;
      }
    }
    else
    {
      v2 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      if ((v1 & 2) == 0)
        goto LABEL_14;
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v2 = sub_19E36A3C8(0, v2[2] + 1, 1, v2);
    v8 = v2[2];
    v7 = v2[3];
    if (v8 >= v7 >> 1)
      v2 = sub_19E36A3C8((_QWORD *)(v7 > 1), v8 + 1, 1, v2);
    v2[2] = v8 + 1;
    v9 = &v2[2 * v8];
    v9[4] = 0x4874694B656D6F48;
    v9[5] = 0xEB00000000656D6FLL;
    goto LABEL_14;
  }
  return 0;
}

_QWORD *sub_19E33F708@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *result;
  return result;
}

uint64_t sub_19E33F718()
{
  sub_19E36FE88();
  sub_19E36FE94();
  return sub_19E36FEA0();
}

uint64_t sub_19E33F75C()
{
  return sub_19E36FE94();
}

uint64_t sub_19E33F784()
{
  sub_19E36FE88();
  sub_19E36FE94();
  return sub_19E36FEA0();
}

void sub_19E33F7C4(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

_QWORD *sub_19E33F7CC@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 | *result;
  return result;
}

_QWORD *sub_19E33F7E0@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 & *result;
  return result;
}

_QWORD *sub_19E33F7F4@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 ^ *result;
  return result;
}

BOOL sub_19E33F808(_QWORD *a1, uint64_t *a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *a2;
  v4 = *v2 & *a2;
  if (v4 != *a2)
    *v2 |= v3;
  *a1 = v3;
  return v4 != v3;
}

_QWORD *sub_19E33F838@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  uint64_t v3;

  v3 = *v2 & *result;
  if (v3)
    *v2 &= ~*result;
  *(_QWORD *)a2 = v3;
  *(_BYTE *)(a2 + 8) = v3 == 0;
  return result;
}

uint64_t *sub_19E33F864@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *result;
  v4 = *v2;
  *v2 |= *result;
  v5 = v4 & v3;
  *(_QWORD *)a2 = v5;
  *(_BYTE *)(a2 + 8) = v5 == 0;
  return result;
}

_QWORD *sub_19E33F888(_QWORD *result)
{
  _QWORD *v1;

  *v1 |= *result;
  return result;
}

_QWORD *sub_19E33F89C(_QWORD *result)
{
  _QWORD *v1;

  *v1 &= *result;
  return result;
}

_QWORD *sub_19E33F8B0(_QWORD *result)
{
  _QWORD *v1;

  *v1 ^= *result;
  return result;
}

_QWORD *sub_19E33F8C4@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 & ~*result;
  return result;
}

BOOL sub_19E33F8D8(_QWORD *a1)
{
  _QWORD *v1;

  return (*v1 & ~*a1) == 0;
}

BOOL sub_19E33F8EC(_QWORD *a1)
{
  _QWORD *v1;

  return (*v1 & *a1) == 0;
}

BOOL sub_19E33F900(_QWORD *a1)
{
  _QWORD *v1;

  return (*a1 & ~*v1) == 0;
}

BOOL sub_19E33F914()
{
  _QWORD *v0;

  return *v0 == 0;
}

uint64_t sub_19E33F924()
{
  return sub_19E36FC24();
}

_QWORD *sub_19E33F93C(_QWORD *result)
{
  _QWORD *v1;

  *v1 &= ~*result;
  return result;
}

_QWORD *sub_19E33F950@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *result;
  *(_BYTE *)(a2 + 8) = 0;
  return result;
}

void sub_19E33F960(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  *a1 = *v1;
}

BOOL sub_19E33F96C(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2;
}

void sub_19E33F984()
{
  __asm { BR              X9 }
}

uint64_t sub_19E33F9B8()
{
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t TapToRadarDraft.AutoDiagnostics.rawValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_19E33FB0C + 4 * byte_19E381F05[*v0]))(7105633, 0xE300000000000000);
}

uint64_t sub_19E33FB0C()
{
  return 48;
}

uint64_t sub_19E33FB18()
{
  return 12589;
}

unint64_t sub_19E33FB24()
{
  return 0xD000000000000010;
}

unint64_t sub_19E33FB58()
{
  return 0xD00000000000001CLL;
}

IMSharedUtilities::TapToRadarDraft::AutoDiagnostics_optional __swiftcall TapToRadarDraft.AutoDiagnostics.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  char *v2;
  unint64_t v3;
  IMSharedUtilities::TapToRadarDraft::AutoDiagnostics_optional result;
  char v5;

  v2 = v1;
  v3 = sub_19E36FD44();
  result.value = swift_bridgeObjectRelease();
  v5 = 7;
  if (v3 < 7)
    v5 = v3;
  *v2 = v5;
  return result;
}

void sub_19E33FBD0(char *a1)
{
  sub_19E35BB58(*a1);
}

void sub_19E33FBDC()
{
  char *v0;

  sub_19E35C69C(0, *v0);
}

void sub_19E33FBE8(uint64_t a1)
{
  char *v1;

  sub_19E35C3BC(a1, *v1);
}

void sub_19E33FBF0(uint64_t a1)
{
  char *v1;

  sub_19E35C69C(a1, *v1);
}

IMSharedUtilities::TapToRadarDraft::AutoDiagnostics_optional sub_19E33FBF8(Swift::String *a1)
{
  return TapToRadarDraft.AutoDiagnostics.init(rawValue:)(*a1);
}

uint64_t sub_19E33FC04@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = TapToRadarDraft.AutoDiagnostics.rawValue.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

unint64_t TapToRadarDraft.TapToRadarError.errorDescription.getter()
{
  _BYTE *v0;
  unint64_t v1;

  v1 = 0xD00000000000001DLL;
  if (*v0 != 1)
    v1 = 0xD00000000000002DLL;
  if (*v0)
    return v1;
  else
    return 0xD000000000000028;
}

BOOL static TapToRadarDraft.TapToRadarError.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t TapToRadarDraft.TapToRadarError.hash(into:)()
{
  return sub_19E36FE94();
}

uint64_t TapToRadarDraft.TapToRadarError.hashValue.getter()
{
  sub_19E36FE88();
  sub_19E36FE94();
  return sub_19E36FEA0();
}

BOOL sub_19E33FD0C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t sub_19E33FD20()
{
  sub_19E36FE88();
  sub_19E36FE94();
  return sub_19E36FEA0();
}

uint64_t sub_19E33FD64()
{
  return sub_19E36FE94();
}

uint64_t sub_19E33FD8C()
{
  sub_19E36FE88();
  sub_19E36FE94();
  return sub_19E36FEA0();
}

uint64_t sub_19E33FDD0()
{
  return sub_19E36F558();
}

uint64_t sub_19E33FDE4()
{
  return sub_19E36F564();
}

uint64_t sub_19E33FDF8()
{
  return sub_19E36F54C();
}

void sub_19E33FE1C(uint64_t a1, uint64_t a2, char a3)
{
  __asm { BR              X10 }
}

uint64_t sub_19E33FE60()
{
  uint64_t v0;
  uint64_t v1;

  sub_19E36F4EC();
  swift_bridgeObjectRelease();
  v1 = sub_19E36F4F8();
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 56))(v0, 0, 1, v1);
}

void sub_19E33FFBC(uint64_t a1, uint64_t a2, char a3)
{
  __asm { BR              X10 }
}

uint64_t sub_19E33FFFC()
{
  uint64_t v0;
  uint64_t v1;

  sub_19E36F4EC();
  swift_bridgeObjectRelease();
  v1 = sub_19E36F4F8();
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 56))(v0, 0, 1, v1);
}

void sub_19E3400B8()
{
  sub_19E36F4F8();
  JUMPOUT(0x19E3400A8);
}

uint64_t sub_19E3400D8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  id v13;
  void *v14;
  void *v15;
  id v16;
  uint64_t v17;
  uint64_t v18;

  v3 = v1 + *(int *)(sub_19E247E74(&qword_1EE502E60) + 36);
  v4 = sub_19E36F63C();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_19E247E74(&qword_1EE502E00);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_19E34370C(v3, (uint64_t)v10);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v10, 1, v4) == 1)
  {
    sub_19E326FA8((uint64_t)v10, &qword_1EE502E00);
    v11 = sub_19E36F4F8();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(a1, 1, 1, v11);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v7, v10, v4);
    v13 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB3578]), sel_init);
    v14 = (void *)sub_19E36F864();
    objc_msgSend(v13, sel_setDateFormat_, v14);

    objc_msgSend(v13, sel_setDoesRelativeDateFormatting_, 0);
    v15 = (void *)sub_19E36F624();
    v16 = objc_msgSend(v13, sel_stringFromDate_, v15);

    sub_19E36F888();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    sub_19E36F4EC();
    swift_bridgeObjectRelease();
    v17 = sub_19E36F4F8();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(a1, 0, 1, v17);
  }
}

uint64_t sub_19E340308@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t KeyPath;
  uint64_t v6;
  uint64_t v8;

  if (*(_QWORD *)(a2 + 16))
  {
    MEMORY[0x1E0C80A78](a1);
    sub_19E36F5E8();
    KeyPath = swift_getKeyPath();
    swift_retain();
    sub_19E343A30(a2, KeyPath);
    swift_release_n();
    sub_19E247E74(&qword_1ECFC6610);
    sub_19E3436C0();
    sub_19E36F840();
    swift_bridgeObjectRelease();
    sub_19E36F4EC();
    swift_bridgeObjectRelease();
    v6 = sub_19E36F4F8();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(a3, 0, 1, v6);
  }
  else
  {
    v8 = sub_19E36F4F8();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(a3, 1, 1, v8);
  }
}

uint64_t sub_19E340488@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, void (*a3)(uint64_t, uint64_t)@<X5>, uint64_t a4@<X8>)
{
  uint64_t KeyPath;
  uint64_t v8;
  uint64_t v10;

  if (*(_QWORD *)(a2 + 16))
  {
    MEMORY[0x1E0C80A78](a1);
    KeyPath = swift_getKeyPath();
    swift_retain();
    a3(a2, KeyPath);
    swift_release_n();
    sub_19E247E74(&qword_1ECFC6610);
    sub_19E3436C0();
    sub_19E36F840();
    swift_bridgeObjectRelease();
    sub_19E36F4EC();
    swift_bridgeObjectRelease();
    v8 = sub_19E36F4F8();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(a4, 0, 1, v8);
  }
  else
  {
    v10 = sub_19E36F4F8();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(a4, 1, 1, v10);
  }
}

uint64_t sub_19E3405F8()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_19E340624()
{
  return sub_19E36FDF8();
}

uint64_t sub_19E34065C()
{
  _BYTE *v0;

  if (*v0)
    return 49;
  else
    return 48;
}

uint64_t sub_19E340674()
{
  id v0;
  void *v1;
  void *v2;
  id v3;
  uint64_t v4;

  v0 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB3578]), sel_init);
  v1 = (void *)sub_19E36F864();
  objc_msgSend(v0, sel_setDateFormat_, v1);

  objc_msgSend(v0, sel_setDoesRelativeDateFormatting_, 0);
  v2 = (void *)sub_19E36F624();
  v3 = objc_msgSend(v0, sel_stringFromDate_, v2);

  v4 = sub_19E36F888();
  return v4;
}

uint64_t sub_19E34074C()
{
  return sub_19E36F5DC();
}

uint64_t sub_19E340764()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t KeyPath;

  v0 = sub_19E36F9A8();
  MEMORY[0x1A1AE8A18](MEMORY[0x1E0DEAF50], v0);
  v1 = sub_19E36FA74();
  v2 = 0;
  if ((v1 & 1) == 0)
  {
    MEMORY[0x1E0C80A78](v1);
    KeyPath = swift_getKeyPath();
    MEMORY[0x1E0C80A78](KeyPath);
    MEMORY[0x1A1AE8A18](MEMORY[0x1E0DEAF38], v0);
    sub_19E36F8DC();
    swift_release();
    sub_19E247E74(&qword_1ECFC6610);
    sub_19E3436C0();
    v2 = sub_19E36F840();
    swift_bridgeObjectRelease();
  }
  return v2;
}

uint64_t sub_19E3408C8()
{
  return sub_19E340764();
}

uint64_t sub_19E3408DC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  v4 = *(_QWORD *)(a1 - 8);
  v5 = MEMORY[0x1E0C80A78]();
  v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(_QWORD *)(v5 + 16);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78]();
  v11 = (char *)&v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v7, v12, a1);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
  {
    (*(void (**)(char *, uint64_t))(v4 + 8))(v7, a1);
    return 0;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v11, v7, v8);
    v13 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 8))(v8, a2);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  }
  return v13;
}

uint64_t sub_19E340A0C(uint64_t a1, uint64_t a2)
{
  return sub_19E3408DC(a1, *(_QWORD *)(a2 - 8));
}

uint64_t sub_19E340A14()
{
  uint64_t v0;

  v0 = sub_19E36F798();
  sub_19E3222DC(v0, qword_1EE506678);
  sub_19E3222C4(v0, (uint64_t)qword_1EE506678);
  return sub_19E36F78C();
}

uint64_t _s17IMSharedUtilities15TapToRadarDraftV9ComponentV2eeoiySbAE_AEtFZ_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  char v7;
  uint64_t result;

  if (*a1 != *a2)
    return 0;
  v2 = a1[3];
  v3 = a1[4];
  v4 = a2[3];
  v5 = a2[4];
  v6 = a1[1] == a2[1] && a1[2] == a2[2];
  if (v6 || (v7 = sub_19E36FE10(), result = 0, (v7 & 1) != 0))
  {
    if (v2 == v4 && v3 == v5)
      return 1;
    else
      return sub_19E36FE10();
  }
  return result;
}

unint64_t sub_19E340B40()
{
  unint64_t result;

  result = qword_1EE502E08;
  if (!qword_1EE502E08)
  {
    result = MEMORY[0x1A1AE8A18](&protocol conformance descriptor for TapToRadarDraft.Component, &type metadata for TapToRadarDraft.Component);
    atomic_store(result, (unint64_t *)&qword_1EE502E08);
  }
  return result;
}

unint64_t sub_19E340B88()
{
  unint64_t result;

  result = qword_1EE502E10;
  if (!qword_1EE502E10)
  {
    result = MEMORY[0x1A1AE8A18](&protocol conformance descriptor for TapToRadarDraft.Classification, &type metadata for TapToRadarDraft.Classification);
    atomic_store(result, (unint64_t *)&qword_1EE502E10);
  }
  return result;
}

unint64_t sub_19E340BD0()
{
  unint64_t result;

  result = qword_1EE502E18;
  if (!qword_1EE502E18)
  {
    result = MEMORY[0x1A1AE8A18](&protocol conformance descriptor for TapToRadarDraft.Reproducibility, &type metadata for TapToRadarDraft.Reproducibility);
    atomic_store(result, (unint64_t *)&qword_1EE502E18);
  }
  return result;
}

unint64_t sub_19E340C18()
{
  unint64_t result;

  result = qword_1EE502E20;
  if (!qword_1EE502E20)
  {
    result = MEMORY[0x1A1AE8A18](&protocol conformance descriptor for TapToRadarDraft.DeviceClass, &type metadata for TapToRadarDraft.DeviceClass);
    atomic_store(result, (unint64_t *)&qword_1EE502E20);
  }
  return result;
}

unint64_t sub_19E340C60()
{
  unint64_t result;

  result = qword_1EE502E28;
  if (!qword_1EE502E28)
  {
    result = MEMORY[0x1A1AE8A18](&protocol conformance descriptor for TapToRadarDraft.RemoteDeviceSelections, &type metadata for TapToRadarDraft.RemoteDeviceSelections);
    atomic_store(result, (unint64_t *)&qword_1EE502E28);
  }
  return result;
}

unint64_t sub_19E340CA8()
{
  unint64_t result;

  result = qword_1EE502E30;
  if (!qword_1EE502E30)
  {
    result = MEMORY[0x1A1AE8A18](&protocol conformance descriptor for TapToRadarDraft.RemoteDeviceSelections, &type metadata for TapToRadarDraft.RemoteDeviceSelections);
    atomic_store(result, (unint64_t *)&qword_1EE502E30);
  }
  return result;
}

unint64_t sub_19E340CF0()
{
  unint64_t result;

  result = qword_1EE502E38;
  if (!qword_1EE502E38)
  {
    result = MEMORY[0x1A1AE8A18](&protocol conformance descriptor for TapToRadarDraft.RemoteDeviceSelections, &type metadata for TapToRadarDraft.RemoteDeviceSelections);
    atomic_store(result, (unint64_t *)&qword_1EE502E38);
  }
  return result;
}

unint64_t sub_19E340D38()
{
  unint64_t result;

  result = qword_1EE502E40;
  if (!qword_1EE502E40)
  {
    result = MEMORY[0x1A1AE8A18](&protocol conformance descriptor for TapToRadarDraft.RemoteDeviceSelections, &type metadata for TapToRadarDraft.RemoteDeviceSelections);
    atomic_store(result, (unint64_t *)&qword_1EE502E40);
  }
  return result;
}

unint64_t sub_19E340D80()
{
  unint64_t result;

  result = qword_1EE502E48;
  if (!qword_1EE502E48)
  {
    result = MEMORY[0x1A1AE8A18](&protocol conformance descriptor for TapToRadarDraft.AutoDiagnostics, &type metadata for TapToRadarDraft.AutoDiagnostics);
    atomic_store(result, (unint64_t *)&qword_1EE502E48);
  }
  return result;
}

unint64_t sub_19E340DC8()
{
  unint64_t result;

  result = qword_1EE502E50;
  if (!qword_1EE502E50)
  {
    result = MEMORY[0x1A1AE8A18](&protocol conformance descriptor for TapToRadarDraft.TapToRadarError, &type metadata for TapToRadarDraft.TapToRadarError);
    atomic_store(result, (unint64_t *)&qword_1EE502E50);
  }
  return result;
}

unint64_t sub_19E340E10()
{
  unint64_t result;

  result = qword_1EE502E58;
  if (!qword_1EE502E58)
  {
    result = MEMORY[0x1A1AE8A18](&protocol conformance descriptor for TapToRadarDraft.TapToRadarError, &type metadata for TapToRadarDraft.TapToRadarError);
    atomic_store(result, (unint64_t *)&qword_1EE502E58);
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for TapToRadarDraft(uint64_t a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  const void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  uint64_t v51;
  _QWORD *v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  _QWORD *v58;
  uint64_t v59;
  _QWORD *v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  _QWORD *v74;
  uint64_t v75;
  _QWORD *v76;
  _QWORD *v77;
  uint64_t v78;
  uint64_t v79;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *(_QWORD *)a1 = *a2;
    a1 = v12 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    v7 = a2[1];
    *(_QWORD *)a1 = *a2;
    *(_QWORD *)(a1 + 8) = v7;
    v8 = a2[3];
    *(_QWORD *)(a1 + 16) = a2[2];
    *(_QWORD *)(a1 + 24) = v8;
    v9 = a2[6];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v9)
    {
      *(_OWORD *)(a1 + 32) = *((_OWORD *)a2 + 2);
      v10 = a2[7];
      v11 = a2[8];
      *(_QWORD *)(a1 + 48) = v9;
      *(_QWORD *)(a1 + 56) = v10;
      *(_QWORD *)(a1 + 64) = v11;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      v13 = *((_OWORD *)a2 + 3);
      *(_OWORD *)(a1 + 32) = *((_OWORD *)a2 + 2);
      *(_OWORD *)(a1 + 48) = v13;
      *(_QWORD *)(a1 + 64) = a2[8];
    }
    v14 = a2[10];
    *(_QWORD *)(a1 + 72) = a2[9];
    *(_QWORD *)(a1 + 80) = v14;
    *(_BYTE *)(a1 + 88) = *((_BYTE *)a2 + 88);
    v15 = a2[13];
    *(_QWORD *)(a1 + 96) = a2[12];
    *(_QWORD *)(a1 + 104) = v15;
    *(_BYTE *)(a1 + 112) = *((_BYTE *)a2 + 112);
    v16 = a2[16];
    *(_QWORD *)(a1 + 120) = a2[15];
    *(_QWORD *)(a1 + 128) = v16;
    v17 = a2[18];
    *(_QWORD *)(a1 + 136) = a2[17];
    *(_QWORD *)(a1 + 144) = v17;
    v18 = a2[20];
    *(_QWORD *)(a1 + 152) = a2[19];
    *(_QWORD *)(a1 + 160) = v18;
    v19 = a2[22];
    *(_QWORD *)(a1 + 168) = a2[21];
    *(_QWORD *)(a1 + 176) = v19;
    v20 = a2[24];
    *(_QWORD *)(a1 + 184) = a2[23];
    *(_QWORD *)(a1 + 192) = v20;
    *(_QWORD *)(a1 + 200) = a2[25];
    v21 = a3[11];
    v22 = (_QWORD *)(a1 + v21);
    v23 = (uint64_t)a2 + v21;
    v24 = *(uint64_t *)((char *)a2 + v21 + 8);
    *v22 = *(uint64_t *)((char *)a2 + v21);
    v22[1] = v24;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v25 = *(int *)(sub_19E247E74(&qword_1EE502E60) + 36);
    v26 = (char *)v22 + v25;
    v27 = (const void *)(v23 + v25);
    v28 = sub_19E36F63C();
    v29 = *(_QWORD *)(v28 - 8);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v29 + 48))(v27, 1, v28))
    {
      v30 = sub_19E247E74(&qword_1EE502E00);
      memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, const void *, uint64_t))(v29 + 16))(v26, v27, v28);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v29 + 56))(v26, 0, 1, v28);
    }
    v31 = a3[12];
    v32 = a3[13];
    v33 = (_QWORD *)(a1 + v31);
    v34 = (uint64_t *)((char *)a2 + v31);
    v35 = v34[1];
    *v33 = *v34;
    v33[1] = v35;
    v33[2] = v34[2];
    v36 = (_QWORD *)(a1 + v32);
    v37 = (uint64_t *)((char *)a2 + v32);
    v38 = v37[1];
    *v36 = *v37;
    v36[1] = v38;
    v36[2] = v37[2];
    v39 = a3[14];
    v40 = a3[15];
    v41 = (_QWORD *)(a1 + v39);
    v42 = (uint64_t *)((char *)a2 + v39);
    v43 = v42[1];
    *v41 = *v42;
    v41[1] = v43;
    v41[2] = v42[2];
    v44 = a1 + v40;
    v45 = (uint64_t)a2 + v40;
    v46 = *(_QWORD *)(v45 + 8);
    *(_QWORD *)v44 = *(_QWORD *)v45;
    *(_QWORD *)(v44 + 8) = v46;
    *(_BYTE *)(v44 + 16) = *(_BYTE *)(v45 + 16);
    v47 = a3[16];
    v48 = a3[17];
    v49 = (_QWORD *)(a1 + v47);
    v50 = (uint64_t *)((char *)a2 + v47);
    v51 = v50[1];
    *v49 = *v50;
    v49[1] = v51;
    v49[2] = v50[2];
    v52 = (_QWORD *)(a1 + v48);
    v53 = (uint64_t *)((char *)a2 + v48);
    v54 = v53[1];
    *v52 = *v53;
    v52[1] = v54;
    v52[2] = v53[2];
    v55 = a3[18];
    v56 = a3[19];
    v57 = (_QWORD *)(a1 + v55);
    v58 = (uint64_t *)((char *)a2 + v55);
    v59 = v58[1];
    *v57 = *v58;
    v57[1] = v59;
    v57[2] = v58[2];
    v60 = (_QWORD *)(a1 + v56);
    v61 = (uint64_t *)((char *)a2 + v56);
    v62 = v61[1];
    *v60 = *v61;
    v60[1] = v62;
    v60[2] = v61[2];
    v63 = a3[20];
    v64 = a3[21];
    v65 = a1 + v63;
    v66 = (uint64_t)a2 + v63;
    v67 = *(_QWORD *)(v66 + 8);
    *(_QWORD *)v65 = *(_QWORD *)v66;
    *(_QWORD *)(v65 + 8) = v67;
    *(_BYTE *)(v65 + 16) = *(_BYTE *)(v66 + 16);
    v68 = a1 + v64;
    v69 = (uint64_t)a2 + v64;
    v70 = *(_QWORD *)(v69 + 8);
    *(_QWORD *)v68 = *(_QWORD *)v69;
    *(_QWORD *)(v68 + 8) = v70;
    *(_BYTE *)(v68 + 16) = *(_BYTE *)(v69 + 16);
    v71 = a3[22];
    v72 = a3[23];
    v73 = (_QWORD *)(a1 + v71);
    v74 = (uint64_t *)((char *)a2 + v71);
    v75 = v74[1];
    *v73 = *v74;
    v73[1] = v75;
    v73[2] = v74[2];
    v76 = (_QWORD *)(a1 + v72);
    v77 = (uint64_t *)((char *)a2 + v72);
    v78 = v77[1];
    *v76 = *v77;
    v76[1] = v78;
    v79 = v77[3];
    v76[2] = v77[2];
    v76[3] = v79;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for TapToRadarDraft(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(a1 + 48))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 44);
  swift_bridgeObjectRelease();
  v5 = v4 + *(int *)(sub_19E247E74(&qword_1EE502E60) + 36);
  v6 = sub_19E36F63C();
  v7 = *(_QWORD *)(v6 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6))
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v5, v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for TapToRadarDraft(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  const void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  _QWORD *v48;
  uint64_t v49;
  _QWORD *v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  _QWORD *v56;
  uint64_t v57;
  _QWORD *v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  _QWORD *v72;
  uint64_t v73;
  _QWORD *v74;
  _QWORD *v75;
  uint64_t v76;
  uint64_t v77;
  int *v79;

  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  v7 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v7;
  v8 = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v8)
  {
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    v9 = *(_QWORD *)(a2 + 56);
    v10 = *(_QWORD *)(a2 + 64);
    *(_QWORD *)(a1 + 48) = v8;
    *(_QWORD *)(a1 + 56) = v9;
    *(_QWORD *)(a1 + 64) = v10;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v11 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v11;
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  }
  v12 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = v12;
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  v13 = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = v13;
  *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
  v14 = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 128) = v14;
  v15 = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 144) = v15;
  v16 = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 160) = v16;
  v17 = *(_QWORD *)(a2 + 176);
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a1 + 176) = v17;
  v18 = *(_QWORD *)(a2 + 192);
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  *(_QWORD *)(a1 + 192) = v18;
  v79 = a3;
  *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
  v19 = a3[11];
  v20 = (_QWORD *)(a1 + v19);
  v21 = a2 + v19;
  v22 = *(_QWORD *)(a2 + v19 + 8);
  *v20 = *(_QWORD *)(a2 + v19);
  v20[1] = v22;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v23 = *(int *)(sub_19E247E74(&qword_1EE502E60) + 36);
  v24 = (char *)v20 + v23;
  v25 = (const void *)(v21 + v23);
  v26 = sub_19E36F63C();
  v27 = *(_QWORD *)(v26 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v27 + 48))(v25, 1, v26))
  {
    v28 = sub_19E247E74(&qword_1EE502E00);
    memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, const void *, uint64_t))(v27 + 16))(v24, v25, v26);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v27 + 56))(v24, 0, 1, v26);
  }
  v29 = v79[12];
  v30 = v79[13];
  v31 = (_QWORD *)(a1 + v29);
  v32 = (_QWORD *)(a2 + v29);
  v33 = v32[1];
  *v31 = *v32;
  v31[1] = v33;
  v31[2] = v32[2];
  v34 = (_QWORD *)(a1 + v30);
  v35 = (_QWORD *)(a2 + v30);
  v36 = v35[1];
  *v34 = *v35;
  v34[1] = v36;
  v34[2] = v35[2];
  v37 = v79[14];
  v38 = v79[15];
  v39 = (_QWORD *)(a1 + v37);
  v40 = (_QWORD *)(a2 + v37);
  v41 = v40[1];
  *v39 = *v40;
  v39[1] = v41;
  v39[2] = v40[2];
  v42 = a1 + v38;
  v43 = a2 + v38;
  v44 = *(_QWORD *)(v43 + 8);
  *(_QWORD *)v42 = *(_QWORD *)v43;
  *(_QWORD *)(v42 + 8) = v44;
  *(_BYTE *)(v42 + 16) = *(_BYTE *)(v43 + 16);
  v45 = v79[16];
  v46 = v79[17];
  v47 = (_QWORD *)(a1 + v45);
  v48 = (_QWORD *)(a2 + v45);
  v49 = v48[1];
  *v47 = *v48;
  v47[1] = v49;
  v47[2] = v48[2];
  v50 = (_QWORD *)(a1 + v46);
  v51 = (_QWORD *)(a2 + v46);
  v52 = v51[1];
  *v50 = *v51;
  v50[1] = v52;
  v50[2] = v51[2];
  v53 = v79[18];
  v54 = v79[19];
  v55 = (_QWORD *)(a1 + v53);
  v56 = (_QWORD *)(a2 + v53);
  v57 = v56[1];
  *v55 = *v56;
  v55[1] = v57;
  v55[2] = v56[2];
  v58 = (_QWORD *)(a1 + v54);
  v59 = (_QWORD *)(a2 + v54);
  v60 = v59[1];
  *v58 = *v59;
  v58[1] = v60;
  v58[2] = v59[2];
  v61 = v79[20];
  v62 = v79[21];
  v63 = a1 + v61;
  v64 = a2 + v61;
  v65 = *(_QWORD *)(v64 + 8);
  *(_QWORD *)v63 = *(_QWORD *)v64;
  *(_QWORD *)(v63 + 8) = v65;
  *(_BYTE *)(v63 + 16) = *(_BYTE *)(v64 + 16);
  v66 = a1 + v62;
  v67 = a2 + v62;
  v68 = *(_QWORD *)(v67 + 8);
  *(_QWORD *)v66 = *(_QWORD *)v67;
  *(_QWORD *)(v66 + 8) = v68;
  *(_BYTE *)(v66 + 16) = *(_BYTE *)(v67 + 16);
  v69 = v79[22];
  v70 = v79[23];
  v71 = (_QWORD *)(a1 + v69);
  v72 = (_QWORD *)(a2 + v69);
  v73 = v72[1];
  *v71 = *v72;
  v71[1] = v73;
  v71[2] = v72[2];
  v74 = (_QWORD *)(a1 + v70);
  v75 = (_QWORD *)(a2 + v70);
  v76 = v75[1];
  *v74 = *v75;
  v74[1] = v76;
  v77 = v75[3];
  v74[2] = v75[2];
  v74[3] = v77;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for TapToRadarDraft(uint64_t a1, uint64_t a2, int *a3)
{
  _OWORD *v6;
  _OWORD *v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t (*v21)(char *, uint64_t, uint64_t);
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = (_OWORD *)(a1 + 32);
  v7 = (_OWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 48);
  if (*(_QWORD *)(a1 + 48))
  {
    if (v8)
    {
      *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
      *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
      *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
      *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_19E341E98(a1 + 32);
      v9 = *(_QWORD *)(a2 + 64);
      v10 = *(_OWORD *)(a2 + 48);
      *v6 = *v7;
      *(_OWORD *)(a1 + 48) = v10;
      *(_QWORD *)(a1 + 64) = v9;
    }
  }
  else if (v8)
  {
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v11 = *v7;
    v12 = *(_OWORD *)(a2 + 48);
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
    *v6 = v11;
    *(_OWORD *)(a1 + 48) = v12;
  }
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v13 = a3[11];
  v14 = (_QWORD *)(a1 + v13);
  v15 = a2 + v13;
  *v14 = *(_QWORD *)(a2 + v13);
  v14[1] = *(_QWORD *)(a2 + v13 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v16 = *(int *)(sub_19E247E74(&qword_1EE502E60) + 36);
  v17 = (char *)v14 + v16;
  v18 = (char *)(v15 + v16);
  v19 = sub_19E36F63C();
  v20 = *(_QWORD *)(v19 - 8);
  v21 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v20 + 48);
  v22 = v21(v17, 1, v19);
  v23 = v21(v18, 1, v19);
  if (!v22)
  {
    if (!v23)
    {
      (*(void (**)(char *, char *, uint64_t))(v20 + 24))(v17, v18, v19);
      goto LABEL_14;
    }
    (*(void (**)(char *, uint64_t))(v20 + 8))(v17, v19);
    goto LABEL_13;
  }
  if (v23)
  {
LABEL_13:
    v24 = sub_19E247E74(&qword_1EE502E00);
    memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
    goto LABEL_14;
  }
  (*(void (**)(char *, char *, uint64_t))(v20 + 16))(v17, v18, v19);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
LABEL_14:
  v25 = a3[12];
  v26 = (_QWORD *)(a1 + v25);
  v27 = a2 + v25;
  *v26 = *(_QWORD *)(a2 + v25);
  v26[1] = *(_QWORD *)(a2 + v25 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v26[2] = *(_QWORD *)(v27 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v28 = a3[13];
  v29 = (_QWORD *)(a1 + v28);
  v30 = a2 + v28;
  *v29 = *(_QWORD *)(a2 + v28);
  v29[1] = *(_QWORD *)(a2 + v28 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v29[2] = *(_QWORD *)(v30 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v31 = a3[14];
  v32 = (_QWORD *)(a1 + v31);
  v33 = a2 + v31;
  *v32 = *(_QWORD *)(a2 + v31);
  v32[1] = *(_QWORD *)(a2 + v31 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v32[2] = *(_QWORD *)(v33 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v34 = a3[15];
  v35 = a1 + v34;
  v36 = a2 + v34;
  *(_QWORD *)v35 = *(_QWORD *)(a2 + v34);
  *(_QWORD *)(v35 + 8) = *(_QWORD *)(a2 + v34 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(v35 + 16) = *(_BYTE *)(v36 + 16);
  v37 = a3[16];
  v38 = (_QWORD *)(a1 + v37);
  v39 = a2 + v37;
  *v38 = *(_QWORD *)(a2 + v37);
  v38[1] = *(_QWORD *)(a2 + v37 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v38[2] = *(_QWORD *)(v39 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v40 = a3[17];
  v41 = (_QWORD *)(a1 + v40);
  v42 = a2 + v40;
  *v41 = *(_QWORD *)(a2 + v40);
  v41[1] = *(_QWORD *)(a2 + v40 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v41[2] = *(_QWORD *)(v42 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v43 = a3[18];
  v44 = (_QWORD *)(a1 + v43);
  v45 = a2 + v43;
  *v44 = *(_QWORD *)(a2 + v43);
  v44[1] = *(_QWORD *)(a2 + v43 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v44[2] = *(_QWORD *)(v45 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v46 = a3[19];
  v47 = (_QWORD *)(a1 + v46);
  v48 = a2 + v46;
  *v47 = *(_QWORD *)(a2 + v46);
  v47[1] = *(_QWORD *)(a2 + v46 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v47[2] = *(_QWORD *)(v48 + 16);
  v49 = a3[20];
  v50 = a1 + v49;
  v51 = a2 + v49;
  *(_QWORD *)v50 = *(_QWORD *)(a2 + v49);
  *(_QWORD *)(v50 + 8) = *(_QWORD *)(a2 + v49 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(v50 + 16) = *(_BYTE *)(v51 + 16);
  v52 = a3[21];
  v53 = a1 + v52;
  v54 = a2 + v52;
  *(_QWORD *)v53 = *(_QWORD *)(a2 + v52);
  *(_QWORD *)(v53 + 8) = *(_QWORD *)(a2 + v52 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(v53 + 16) = *(_BYTE *)(v54 + 16);
  v55 = a3[22];
  v56 = (_QWORD *)(a1 + v55);
  v57 = a2 + v55;
  *v56 = *(_QWORD *)(a2 + v55);
  v56[1] = *(_QWORD *)(a2 + v55 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v56[2] = *(_QWORD *)(v57 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v58 = a3[23];
  v59 = (_QWORD *)(a1 + v58);
  v60 = a2 + v58;
  *v59 = *(_QWORD *)(a2 + v58);
  v59[1] = *(_QWORD *)(a2 + v58 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v59[2] = *(_QWORD *)(v60 + 16);
  v59[3] = *(_QWORD *)(v60 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_19E341E98(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for TapToRadarDraft(uint64_t a1, uint64_t a2, int *a3)
{
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  const void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int128 *v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _OWORD *v52;
  _OWORD *v53;
  __int128 v54;

  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  v7 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v7;
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
  *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
  v8 = a3[11];
  v9 = a1 + v8;
  v10 = a2 + v8;
  *(_OWORD *)(a1 + v8) = *(_OWORD *)(a2 + v8);
  v11 = *(int *)(sub_19E247E74(&qword_1EE502E60) + 36);
  v12 = (void *)(v9 + v11);
  v13 = (const void *)(v10 + v11);
  v14 = sub_19E36F63C();
  v15 = *(_QWORD *)(v14 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
  {
    v16 = sub_19E247E74(&qword_1EE502E00);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v15 + 32))(v12, v13, v14);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  }
  v17 = a3[12];
  v18 = a3[13];
  v19 = a1 + v17;
  v20 = a2 + v17;
  *(_OWORD *)v19 = *(_OWORD *)v20;
  *(_QWORD *)(v19 + 16) = *(_QWORD *)(v20 + 16);
  v21 = a1 + v18;
  v22 = a2 + v18;
  *(_OWORD *)v21 = *(_OWORD *)v22;
  *(_QWORD *)(v21 + 16) = *(_QWORD *)(v22 + 16);
  v23 = a3[14];
  v24 = a3[15];
  v25 = a1 + v23;
  v26 = a2 + v23;
  *(_OWORD *)v25 = *(_OWORD *)v26;
  *(_QWORD *)(v25 + 16) = *(_QWORD *)(v26 + 16);
  v27 = a1 + v24;
  v28 = a2 + v24;
  *(_OWORD *)v27 = *(_OWORD *)v28;
  *(_BYTE *)(v27 + 16) = *(_BYTE *)(v28 + 16);
  v29 = a3[16];
  v30 = a3[17];
  v31 = a1 + v29;
  v32 = (__int128 *)(a2 + v29);
  v33 = *v32;
  *(_QWORD *)(v31 + 16) = *((_QWORD *)v32 + 2);
  *(_OWORD *)v31 = v33;
  v34 = a1 + v30;
  v35 = a2 + v30;
  *(_QWORD *)(v34 + 16) = *(_QWORD *)(v35 + 16);
  *(_OWORD *)v34 = *(_OWORD *)v35;
  v36 = a3[18];
  v37 = a3[19];
  v38 = a1 + v36;
  v39 = a2 + v36;
  *(_QWORD *)(v38 + 16) = *(_QWORD *)(v39 + 16);
  *(_OWORD *)v38 = *(_OWORD *)v39;
  v40 = a1 + v37;
  v41 = a2 + v37;
  *(_QWORD *)(v40 + 16) = *(_QWORD *)(v41 + 16);
  *(_OWORD *)v40 = *(_OWORD *)v41;
  v42 = a3[20];
  v43 = a3[21];
  v44 = a1 + v42;
  v45 = a2 + v42;
  *(_BYTE *)(v44 + 16) = *(_BYTE *)(v45 + 16);
  *(_OWORD *)v44 = *(_OWORD *)v45;
  v46 = a1 + v43;
  v47 = a2 + v43;
  *(_BYTE *)(v46 + 16) = *(_BYTE *)(v47 + 16);
  *(_OWORD *)v46 = *(_OWORD *)v47;
  v48 = a3[22];
  v49 = a3[23];
  v50 = a1 + v48;
  v51 = a2 + v48;
  *(_QWORD *)(v50 + 16) = *(_QWORD *)(v51 + 16);
  *(_OWORD *)v50 = *(_OWORD *)v51;
  v52 = (_OWORD *)(a1 + v49);
  v53 = (_OWORD *)(a2 + v49);
  v54 = v53[1];
  *v52 = *v53;
  v52[1] = v54;
  return a1;
}

uint64_t assignWithTake for TapToRadarDraft(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t (*v27)(char *, uint64_t, uint64_t);
  int v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  _QWORD *v76;
  _QWORD *v77;
  uint64_t v78;
  uint64_t v79;

  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRelease();
  v7 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v7;
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(a1 + 48))
  {
    v8 = *(_QWORD *)(a2 + 48);
    if (v8)
    {
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
      *(_QWORD *)(a1 + 48) = v8;
      swift_bridgeObjectRelease();
      v9 = *(_QWORD *)(a2 + 64);
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
      *(_QWORD *)(a1 + 64) = v9;
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
    sub_19E341E98(a1 + 32);
  }
  v10 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v10;
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
LABEL_6:
  v11 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = v11;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  v12 = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = v12;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
  v13 = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 128) = v13;
  swift_bridgeObjectRelease();
  v14 = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 144) = v14;
  swift_bridgeObjectRelease();
  v15 = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 160) = v15;
  swift_bridgeObjectRelease();
  v16 = *(_QWORD *)(a2 + 176);
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a1 + 176) = v16;
  swift_bridgeObjectRelease();
  v17 = *(_QWORD *)(a2 + 192);
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  *(_QWORD *)(a1 + 192) = v17;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
  swift_bridgeObjectRelease();
  v18 = a3[11];
  v19 = (_QWORD *)(a1 + v18);
  v20 = a2 + v18;
  v21 = *(_QWORD *)(a2 + v18 + 8);
  *v19 = *(_QWORD *)(a2 + v18);
  v19[1] = v21;
  swift_bridgeObjectRelease();
  v22 = *(int *)(sub_19E247E74(&qword_1EE502E60) + 36);
  v23 = (char *)v19 + v22;
  v24 = (char *)(v20 + v22);
  v25 = sub_19E36F63C();
  v26 = *(_QWORD *)(v25 - 8);
  v27 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v26 + 48);
  v28 = v27(v23, 1, v25);
  v29 = v27(v24, 1, v25);
  if (!v28)
  {
    if (!v29)
    {
      (*(void (**)(char *, char *, uint64_t))(v26 + 40))(v23, v24, v25);
      goto LABEL_12;
    }
    (*(void (**)(char *, uint64_t))(v26 + 8))(v23, v25);
    goto LABEL_11;
  }
  if (v29)
  {
LABEL_11:
    v30 = sub_19E247E74(&qword_1EE502E00);
    memcpy(v23, v24, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
    goto LABEL_12;
  }
  (*(void (**)(char *, char *, uint64_t))(v26 + 32))(v23, v24, v25);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v26 + 56))(v23, 0, 1, v25);
LABEL_12:
  v31 = a3[12];
  v32 = (_QWORD *)(a1 + v31);
  v33 = a2 + v31;
  v34 = *(_QWORD *)(a2 + v31 + 8);
  *v32 = *(_QWORD *)(a2 + v31);
  v32[1] = v34;
  swift_bridgeObjectRelease();
  v32[2] = *(_QWORD *)(v33 + 16);
  swift_bridgeObjectRelease();
  v35 = a3[13];
  v36 = (_QWORD *)(a1 + v35);
  v37 = a2 + v35;
  v38 = *(_QWORD *)(a2 + v35 + 8);
  *v36 = *(_QWORD *)(a2 + v35);
  v36[1] = v38;
  swift_bridgeObjectRelease();
  v36[2] = *(_QWORD *)(v37 + 16);
  swift_bridgeObjectRelease();
  v39 = a3[14];
  v40 = (_QWORD *)(a1 + v39);
  v41 = a2 + v39;
  v42 = *(_QWORD *)(a2 + v39 + 8);
  *v40 = *(_QWORD *)(a2 + v39);
  v40[1] = v42;
  swift_bridgeObjectRelease();
  v40[2] = *(_QWORD *)(v41 + 16);
  swift_bridgeObjectRelease();
  v43 = a3[15];
  v44 = a1 + v43;
  v45 = a2 + v43;
  v46 = *(_QWORD *)(a2 + v43 + 8);
  *(_QWORD *)v44 = *(_QWORD *)(a2 + v43);
  *(_QWORD *)(v44 + 8) = v46;
  swift_bridgeObjectRelease();
  *(_BYTE *)(v44 + 16) = *(_BYTE *)(v45 + 16);
  v47 = a3[16];
  v48 = (_QWORD *)(a1 + v47);
  v49 = a2 + v47;
  v50 = *(_QWORD *)(a2 + v47 + 8);
  *v48 = *(_QWORD *)(a2 + v47);
  v48[1] = v50;
  swift_bridgeObjectRelease();
  v48[2] = *(_QWORD *)(v49 + 16);
  swift_bridgeObjectRelease();
  v51 = a3[17];
  v52 = (_QWORD *)(a1 + v51);
  v53 = a2 + v51;
  v54 = *(_QWORD *)(a2 + v51 + 8);
  *v52 = *(_QWORD *)(a2 + v51);
  v52[1] = v54;
  swift_bridgeObjectRelease();
  v52[2] = *(_QWORD *)(v53 + 16);
  swift_bridgeObjectRelease();
  v55 = a3[18];
  v56 = (_QWORD *)(a1 + v55);
  v57 = a2 + v55;
  v58 = *(_QWORD *)(a2 + v55 + 8);
  *v56 = *(_QWORD *)(a2 + v55);
  v56[1] = v58;
  swift_bridgeObjectRelease();
  v56[2] = *(_QWORD *)(v57 + 16);
  swift_bridgeObjectRelease();
  v59 = a3[19];
  v60 = (_QWORD *)(a1 + v59);
  v61 = a2 + v59;
  v62 = *(_QWORD *)(a2 + v59 + 8);
  *v60 = *(_QWORD *)(a2 + v59);
  v60[1] = v62;
  swift_bridgeObjectRelease();
  v60[2] = *(_QWORD *)(v61 + 16);
  v63 = a3[20];
  v64 = a1 + v63;
  v65 = a2 + v63;
  v66 = *(_QWORD *)(a2 + v63 + 8);
  *(_QWORD *)v64 = *(_QWORD *)(a2 + v63);
  *(_QWORD *)(v64 + 8) = v66;
  swift_bridgeObjectRelease();
  *(_BYTE *)(v64 + 16) = *(_BYTE *)(v65 + 16);
  v67 = a3[21];
  v68 = a1 + v67;
  v69 = a2 + v67;
  v70 = *(_QWORD *)(a2 + v67 + 8);
  *(_QWORD *)v68 = *(_QWORD *)(a2 + v67);
  *(_QWORD *)(v68 + 8) = v70;
  swift_bridgeObjectRelease();
  *(_BYTE *)(v68 + 16) = *(_BYTE *)(v69 + 16);
  v71 = a3[22];
  v72 = (_QWORD *)(a1 + v71);
  v73 = a2 + v71;
  v74 = *(_QWORD *)(a2 + v71 + 8);
  *v72 = *(_QWORD *)(a2 + v71);
  v72[1] = v74;
  swift_bridgeObjectRelease();
  v72[2] = *(_QWORD *)(v73 + 16);
  swift_bridgeObjectRelease();
  v75 = a3[23];
  v76 = (_QWORD *)(a1 + v75);
  v77 = (_QWORD *)(a2 + v75);
  v78 = v77[1];
  *v76 = *v77;
  v76[1] = v78;
  swift_bridgeObjectRelease();
  v79 = v77[3];
  v76[2] = v77[2];
  v76[3] = v79;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for TapToRadarDraft()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_19E34257C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_19E247E74(&qword_1EE502E60);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 44), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for TapToRadarDraft()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_19E342608(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = sub_19E247E74(&qword_1EE502E60);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 44), a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for TapToRadarDraft()
{
  uint64_t result;

  result = qword_1EE502E68;
  if (!qword_1EE502E68)
    return swift_getSingletonMetadata();
  return result;
}

void sub_19E3426BC()
{
  unint64_t v0;

  sub_19E342774(319);
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

void sub_19E342774(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  if (!qword_1EE502E78)
  {
    v2 = sub_19E247E30(&qword_1EE502E00);
    v3 = sub_19E3427D8();
    v5 = type metadata accessor for URLParameter(a1, v2, v3, v4);
    if (!v6)
      atomic_store(v5, (unint64_t *)&qword_1EE502E78);
  }
}

unint64_t sub_19E3427D8()
{
  unint64_t result;
  uint64_t v1;
  _UNKNOWN **v2;

  result = qword_1EE502E80[0];
  if (!qword_1EE502E80[0])
  {
    v1 = sub_19E247E30(&qword_1EE502E00);
    v2 = &off_1E3FB29C0;
    result = MEMORY[0x1A1AE8A18](&unk_19E3825C4, v1, &v2);
    atomic_store(result, qword_1EE502E80);
  }
  return result;
}

uint64_t type metadata accessor for URLParameter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_19E329228(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for URLParameter);
}

uint64_t initializeBufferWithCopyOfBuffer for TapToRadarDraft.Component(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a2;
  *a1 = *a2;
  v3 = v2 + 16;
  swift_retain();
  return v3;
}

uint64_t destroy for TapToRadarDraft.Component()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for TapToRadarDraft.Component(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v3 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v3;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for TapToRadarDraft.Component(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 initializeWithTake for TapToRadarDraft.Component(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for TapToRadarDraft.Component(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  v4 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v4;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for TapToRadarDraft.Component(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 40))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for TapToRadarDraft.Component(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 40) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for TapToRadarDraft.Component()
{
  return &type metadata for TapToRadarDraft.Component;
}

uint64_t getEnumTagSinglePayload for TapToRadarDraft.Classification(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF7)
    goto LABEL_17;
  if (a2 + 9 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 9) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 9;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 9;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 9;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0xA;
  v8 = v6 - 10;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for TapToRadarDraft.Classification(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 9 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 9) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF7)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF6)
    return ((uint64_t (*)(void))((char *)&loc_19E342B2C + 4 * byte_19E381F23[v4]))();
  *a1 = a2 + 9;
  return ((uint64_t (*)(void))((char *)sub_19E342B60 + 4 * byte_19E381F1E[v4]))();
}

uint64_t sub_19E342B60(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_19E342B68(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x19E342B70);
  return result;
}

uint64_t sub_19E342B7C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x19E342B84);
  *(_BYTE *)result = a2 + 9;
  return result;
}

uint64_t sub_19E342B88(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_19E342B90(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for TapToRadarDraft.Classification()
{
  return &type metadata for TapToRadarDraft.Classification;
}

ValueMetadata *type metadata accessor for TapToRadarDraft.Reproducibility()
{
  return &type metadata for TapToRadarDraft.Reproducibility;
}

uint64_t _s17IMSharedUtilities15TapToRadarDraftV15ReproducibilityOwet_0(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFB)
    goto LABEL_17;
  if (a2 + 5 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 5) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 5;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 5;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 5;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 6;
  v8 = v6 - 6;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t _s17IMSharedUtilities15TapToRadarDraftV15ReproducibilityOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_19E342CA0 + 4 * byte_19E381F2D[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_19E342CD4 + 4 * byte_19E381F28[v4]))();
}

uint64_t sub_19E342CD4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_19E342CDC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x19E342CE4);
  return result;
}

uint64_t sub_19E342CF0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x19E342CF8);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_19E342CFC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_19E342D04(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for TapToRadarDraft.DeviceClass()
{
  return &type metadata for TapToRadarDraft.DeviceClass;
}

ValueMetadata *type metadata accessor for TapToRadarDraft.RemoteDeviceSelections()
{
  return &type metadata for TapToRadarDraft.RemoteDeviceSelections;
}

uint64_t getEnumTagSinglePayload for TapToRadarDraft.AutoDiagnostics(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFA)
    goto LABEL_17;
  if (a2 + 6 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 6) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 6;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 6;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 6;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 7;
  v8 = v6 - 7;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for TapToRadarDraft.AutoDiagnostics(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 6 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 6) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFA)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF9)
    return ((uint64_t (*)(void))((char *)&loc_19E342E0C + 4 * byte_19E381F37[v4]))();
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_19E342E40 + 4 * byte_19E381F32[v4]))();
}

uint64_t sub_19E342E40(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_19E342E48(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x19E342E50);
  return result;
}

uint64_t sub_19E342E5C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x19E342E64);
  *(_BYTE *)result = a2 + 6;
  return result;
}

uint64_t sub_19E342E68(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_19E342E70(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for TapToRadarDraft.AutoDiagnostics()
{
  return &type metadata for TapToRadarDraft.AutoDiagnostics;
}

uint64_t getEnumTagSinglePayload for TapToRadarDraft.TapToRadarError(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFE)
    goto LABEL_17;
  if (a2 + 2 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 2) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 2;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 2;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 2;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 3;
  v8 = v6 - 3;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for TapToRadarDraft.TapToRadarError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_19E342F68 + 4 * byte_19E381F41[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_19E342F9C + 4 * byte_19E381F3C[v4]))();
}

uint64_t sub_19E342F9C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_19E342FA4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x19E342FACLL);
  return result;
}

uint64_t sub_19E342FB8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x19E342FC0);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_19E342FC4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_19E342FCC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for TapToRadarDraft.TapToRadarError()
{
  return &type metadata for TapToRadarDraft.TapToRadarError;
}

uint64_t sub_19E342FE8()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t sub_19E342FF0()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_19E343068(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t);

  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if (v6 > 7
    || (*(_DWORD *)(v5 + 80) & 0x100000) != 0
    || ((v6 + 16) & (unint64_t)~v6) + *(_QWORD *)(v5 + 64) > 0x18)
  {
    v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v6 & 0xF8 ^ 0x1F8) & (v6 + 16)));
    swift_retain();
  }
  else
  {
    v10 = a2[1];
    *a1 = *a2;
    a1[1] = v10;
    v11 = ((unint64_t)a1 + v6 + 16) & ~v6;
    v12 = ((unint64_t)a2 + v6 + 16) & ~v6;
    v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
    swift_bridgeObjectRetain();
    v13(v11, v12, v4);
  }
  return a1;
}

uint64_t sub_19E343128(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))((a1 + *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80));
}

_QWORD *sub_19E34316C(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = ((unint64_t)a1 + v7 + 16) & ~v7;
  v9 = ((unint64_t)a2 + v7 + 16) & ~v7;
  v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
  swift_bridgeObjectRetain();
  v10(v8, v9, v5);
  return a1;
}

_QWORD *sub_19E3431DC(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v6 + 24))(((unint64_t)a1 + *(unsigned __int8 *)(v6 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v6 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
  return a1;
}

_OWORD *sub_19E343254(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v4;

  *a1 = *a2;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v4 + 32))(((unint64_t)a1 + *(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  return a1;
}

_QWORD *sub_19E3432A4(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  v7 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v7 + 40))(((unint64_t)a1 + *(unsigned __int8 *)(v7 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v7 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
  return a1;
}

uint64_t sub_19E34330C(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  char v10;
  int v11;
  unsigned int v13;
  int v14;
  unint64_t v15;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(unsigned __int8 *)(v4 + 80);
  v8 = a2 - v6;
  if (a2 <= v6)
    goto LABEL_22;
  v9 = ((v7 + 16) & ~v7) + *(_QWORD *)(v4 + 64);
  v10 = 8 * v9;
  if (v9 <= 3)
  {
    v13 = ((v8 + ~(-1 << v10)) >> v10) + 1;
    if (HIWORD(v13))
    {
      v11 = *(_DWORD *)(a1 + v9);
      if (!v11)
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v13 > 0xFF)
    {
      v11 = *(unsigned __int16 *)(a1 + v9);
      if (!*(_WORD *)(a1 + v9))
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v13 < 2)
    {
LABEL_22:
      if ((v5 & 0x80000000) != 0)
        return (*(uint64_t (**)(uint64_t))(v4 + 48))((a1 + v7 + 16) & ~v7);
      v15 = *(_QWORD *)(a1 + 8);
      if (v15 >= 0xFFFFFFFF)
        LODWORD(v15) = -1;
      return (v15 + 1);
    }
  }
  v11 = *(unsigned __int8 *)(a1 + v9);
  if (!*(_BYTE *)(a1 + v9))
    goto LABEL_22;
LABEL_15:
  v14 = (v11 - 1) << v10;
  if (v9 > 3)
    v14 = 0;
  if (!(_DWORD)v9)
    return v6 + v14 + 1;
  if (v9 > 3)
    LODWORD(v9) = 4;
  return ((uint64_t (*)(void))((char *)&loc_19E3433E0 + 4 * byte_19E381F46[(v9 - 1)]))();
}

void sub_19E343450(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  size_t v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  int v11;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = ((*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))
     + *(_QWORD *)(v5 + 64);
  if (a3 > v6)
  {
    if (v7 <= 3)
    {
      v10 = ((a3 - v6 + ~(-1 << (8 * v7))) >> (8 * v7)) + 1;
      if (HIWORD(v10))
      {
        v8 = 4u;
      }
      else if (v10 >= 0x100)
      {
        v8 = 2;
      }
      else
      {
        v8 = v10 > 1;
      }
    }
    else
    {
      v8 = 1u;
    }
  }
  else
  {
    v8 = 0u;
  }
  if (v6 < a2)
  {
    v9 = ~v6 + a2;
    if (v7 < 4)
    {
      if ((_DWORD)v7)
      {
        v11 = v9 & ~(-1 << (8 * v7));
        bzero(a1, v7);
        if ((_DWORD)v7 == 3)
        {
          *a1 = v11;
          *((_BYTE *)a1 + 2) = BYTE2(v11);
        }
        else if ((_DWORD)v7 == 2)
        {
          *a1 = v11;
        }
        else
        {
          *(_BYTE *)a1 = v11;
        }
      }
    }
    else
    {
      bzero(a1, v7);
      *(_DWORD *)a1 = v9;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X13 }
}

uint64_t sub_19E343648@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X8>)
{
  uint64_t result;
  uint64_t v5;

  result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)(a2 + a1 - 8) + 8))(*(_QWORD *)(a2 + a1 - 16));
  *a3 = result;
  a3[1] = v5;
  return result;
}

uint64_t sub_19E343680()
{
  return 16;
}

__n128 sub_19E34368C(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_19E343698()
{
  return swift_getAtKeyPath();
}

unint64_t sub_19E3436C0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EE502F08;
  if (!qword_1EE502F08)
  {
    v1 = sub_19E247E30(&qword_1ECFC6610);
    result = MEMORY[0x1A1AE8A18](MEMORY[0x1E0DEAF20], v1);
    atomic_store(result, (unint64_t *)&qword_1EE502F08);
  }
  return result;
}

uint64_t sub_19E34370C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_19E247E74(&qword_1EE502E00);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_19E343754(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_19E247E74(&qword_1EE502E00);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_19E34379C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_19E247E74(&qword_1EE502F10);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

_QWORD *sub_19E3437E4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v8;
  uint64_t v9;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  swift_bridgeObjectRetain();
  v2 = 0;
  v3 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  do
  {
    swift_getAtKeyPath();
    if (v9)
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v3 = sub_19E36A3C8(0, v3[2] + 1, 1, v3);
      v6 = v3[2];
      v5 = v3[3];
      if (v6 >= v5 >> 1)
        v3 = sub_19E36A3C8((_QWORD *)(v5 > 1), v6 + 1, 1, v3);
      v3[2] = v6 + 1;
      v4 = &v3[2 * v6];
      v4[4] = v8;
      v4[5] = v9;
    }
    ++v2;
  }
  while (v1 != v2);
  swift_bridgeObjectRelease();
  return v3;
}

_QWORD *sub_19E343904(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v8;
  uint64_t v9;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  v2 = swift_bridgeObjectRetain() + 40;
  v3 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  do
  {
    swift_bridgeObjectRetain();
    swift_getAtKeyPath();
    swift_bridgeObjectRelease();
    if (v9)
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v3 = sub_19E36A3C8(0, v3[2] + 1, 1, v3);
      v6 = v3[2];
      v5 = v3[3];
      if (v6 >= v5 >> 1)
        v3 = sub_19E36A3C8((_QWORD *)(v5 > 1), v6 + 1, 1, v3);
      v3[2] = v6 + 1;
      v4 = &v3[2 * v6];
      v4[4] = v8;
      v4[5] = v9;
    }
    v2 += 16;
    --v1;
  }
  while (v1);
  swift_bridgeObjectRelease();
  return v3;
}

_QWORD *sub_19E343A30(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(char *, uint64_t, uint64_t);
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(char *, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;

  v26 = a2;
  v3 = sub_19E247E74((uint64_t *)&unk_1ECFC6628);
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)&v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(a1 + 16);
  v23 = a1;
  if (v6)
  {
    v7 = sub_19E36F5E8();
    v8 = *(_QWORD *)(v7 - 8);
    v9 = a1 + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
    v10 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
    v24 = *(_QWORD *)(v8 + 72);
    v25 = v10;
    swift_bridgeObjectRetain();
    v30 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    while (1)
    {
      v25(v5, v9, v7);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v5, 0, 1, v7);
      v13 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v8 + 48))(v5, 1, v7);
      if ((_DWORD)v13 == 1)
        break;
      MEMORY[0x1E0C80A78](v13);
      v15 = (char *)&v23 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
      (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v15, v5, v7);
      swift_getAtKeyPath();
      v17 = v28;
      v16 = v29;
      (*(void (**)(char *, uint64_t))(v8 + 8))(v15, v7);
      if (v16)
      {
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v27 = &v23;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          v30 = sub_19E36A3C8(0, v30[2] + 1, 1, v30);
        v20 = v30[2];
        v19 = v30[3];
        if (v20 >= v19 >> 1)
          v30 = sub_19E36A3C8((_QWORD *)(v19 > 1), v20 + 1, 1, v30);
        v11 = v30;
        v30[2] = v20 + 1;
        v12 = &v11[2 * v20];
        v12[4] = v17;
        v12[5] = v16;
      }
      v9 += v24;
      if (!--v6)
        goto LABEL_12;
    }
  }
  else
  {
    swift_bridgeObjectRetain();
    v30 = (_QWORD *)MEMORY[0x1E0DEE9D8];
LABEL_12:
    v21 = sub_19E36F5E8();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(v5, 1, 1, v21);
  }
  swift_bridgeObjectRelease();
  return v30;
}

_QWORD *sub_19E343C88(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v8;
  uint64_t v9;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  swift_bridgeObjectRetain();
  v2 = 0;
  v3 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  do
  {
    swift_getAtKeyPath();
    if (v9)
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v3 = sub_19E36A3C8(0, v3[2] + 1, 1, v3);
      v6 = v3[2];
      v5 = v3[3];
      if (v6 >= v5 >> 1)
        v3 = sub_19E36A3C8((_QWORD *)(v5 > 1), v6 + 1, 1, v3);
      v3[2] = v6 + 1;
      v4 = &v3[2 * v6];
      v4[4] = v8;
      v4[5] = v9;
    }
    ++v2;
  }
  while (v1 != v2);
  swift_bridgeObjectRelease();
  return v3;
}

uint64_t sub_19E343DB4()
{
  uint64_t v0;

  v0 = sub_19E36F798();
  sub_19E3222DC(v0, qword_1EE4FFA10);
  sub_19E3222C4(v0, (uint64_t)qword_1EE4FFA10);
  return sub_19E36F78C();
}

id sub_19E343E34()
{
  void *v0;
  id *v1;
  id v2;
  void *v3;

  v0 = (void *)sub_19E36F864();
  v1 = (id *)MEMORY[0x1A1AE7D58]("PFLivePhotoBundleExtension", v0);

  if (v1)
  {
    v2 = *v1;
    sub_19E36F888();

  }
  v3 = (void *)sub_19E36F864();
  swift_bridgeObjectRelease();
  return v3;
}

uint64_t sub_19E343EE4(void *a1)
{
  id v1;
  char v2;

  v1 = a1;
  v2 = sub_19E343F14();

  return v2 & 1;
}

uint64_t sub_19E343F14()
{
  void *v0;
  uint64_t inited;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  sub_19E247E74(&qword_1EE502C78);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_19E381B30;
  v2 = (void *)objc_opt_self();
  v3 = objc_msgSend(v2, sel___im_livePhotoExtension);
  v4 = sub_19E36F888();
  v6 = v5;

  *(_QWORD *)(inited + 32) = v4;
  *(_QWORD *)(inited + 40) = v6;
  v7 = objc_msgSend(v2, sel___im_livePhotoExtension);
  sub_19E36F888();

  v8 = sub_19E36F8A0();
  v10 = v9;
  swift_bridgeObjectRelease();
  *(_QWORD *)(inited + 48) = v8;
  *(_QWORD *)(inited + 56) = v10;
  v11 = objc_msgSend(v0, sel_pathExtension);
  v12 = sub_19E36F888();
  v14 = v13;

  LOBYTE(v11) = sub_19E347CE4(v12, v14, (_QWORD *)inited);
  swift_bridgeObjectRelease();
  swift_setDeallocating();
  swift_arrayDestroy();
  return v11 & 1;
}

id sub_19E344064(void *a1)
{
  id v1;
  id v2;
  id v3;
  id v4;

  v1 = a1;
  v2 = objc_msgSend(v1, sel_stringByDeletingLastPathComponent);
  if (v2)
  {
    v3 = v2;
    v4 = objc_msgSend(v2, sel___im_isLivePhotoBundlePath);

    v1 = v3;
  }
  else
  {
    v4 = 0;
  }

  return v4;
}

uint64_t sub_19E3440D0(void *a1)
{
  void *v1;
  void *v2;
  id v4;
  void *v5;
  id v6;
  void *v7;
  id v8;
  id v9;
  id v10;
  void *v11;
  id v12;
  id v13;
  uint64_t v14;
  id v15;
  unsigned __int8 v16;
  id v17;
  void *v18;
  id v19;
  uint64_t v20;
  id v21;
  NSObject *v22;
  os_log_type_t v23;
  uint8_t *v24;
  id v25;
  id v26;
  unsigned int v27;
  NSObject *v28;
  int v29;
  uint8_t *v30;
  _DWORD *v32;
  _QWORD *v33;
  uint8_t *v34;
  void *v35;
  id v36;

  v2 = v1;
  v4 = objc_msgSend(v2, sel_stringByDeletingLastPathComponent);
  if (!v4)
    return 0;
  v5 = v4;
  v6 = objc_msgSend(v4, sel_im_lastPathComponent);
  if (!v6)
    goto LABEL_24;
  v7 = v6;
  v8 = a1;
  if (!a1)
    v8 = v6;
  v9 = a1;
  v10 = objc_msgSend(v5, sel___im_stringBySafelyAppendingPathComponent_, v8);

  if (!v10)
  {

    return 0;
  }
  v11 = (void *)objc_opt_self();
  v12 = objc_msgSend(v11, sel___im_livePhotoExtension);
  if (!v12)
  {
    sub_19E36F888();
    v12 = (id)sub_19E36F864();
    swift_bridgeObjectRelease();
  }
  v13 = objc_msgSend(v10, sel_stringByAppendingPathExtension_, v12);

  if (!v13)
  {

    return 0;
  }
  v14 = sub_19E36F888();
  v36 = (id)objc_opt_self();
  v15 = objc_msgSend(v36, sel_defaultManager);
  v16 = objc_msgSend(v15, sel_fileExistsAtPath_, v13);

  if ((v16 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    v17 = objc_msgSend(v11, sel___im_livePhotoExtension);
    sub_19E36F888();

    sub_19E36F8A0();
    swift_bridgeObjectRelease();
    v18 = (void *)sub_19E36F864();
    swift_bridgeObjectRelease();
    v19 = objc_msgSend(v10, sel_stringByAppendingPathComponent_, v18);

    v35 = v19;
    if (!v19)
    {
      sub_19E36F888();
      v35 = (void *)sub_19E36F864();
      swift_bridgeObjectRelease();
    }
    v14 = sub_19E36F888();
    if (qword_1EE4FF8F0 != -1)
      swift_once();
    v20 = sub_19E36F798();
    sub_19E3222C4(v20, (uint64_t)qword_1EE4FFA10);
    v21 = v2;
    v22 = sub_19E36F780();
    v23 = sub_19E36FAA4();
    if (os_log_type_enabled(v22, v23))
    {
      v24 = (uint8_t *)swift_slowAlloc();
      v33 = (_QWORD *)swift_slowAlloc();
      v34 = v24;
      *(_DWORD *)v24 = 138412290;
      v32 = v24 + 4;
      v25 = v21;
      sub_19E36FBD0();
      *v33 = v21;

      _os_log_impl(&dword_19E239000, v22, v23, "Second try: Trying to check existence of live photo bundle at path %@", v34, 0xCu);
      sub_19E247E74(&qword_1EE5006C0);
      swift_arrayDestroy();
      MEMORY[0x1A1AE8ACC](v33, -1, -1);
      MEMORY[0x1A1AE8ACC](v34, -1, -1);

    }
    else
    {

    }
    v26 = objc_msgSend(v36, sel_defaultManager, v32);
    v27 = objc_msgSend(v26, sel_fileExistsAtPath_, v35);

    if (!v27)
    {
      swift_bridgeObjectRelease();
      v28 = sub_19E36F780();
      v29 = sub_19E36FAA4();
      if (os_log_type_enabled(v28, (os_log_type_t)v29))
      {
        v30 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v30 = 0;
        _os_log_impl(&dword_19E239000, v28, (os_log_type_t)v29, "Failed to find live photo bundle for transfer", v30, 2u);
        MEMORY[0x1A1AE8ACC](v30, -1, -1);

      }
      else
      {

      }
LABEL_24:

      return 0;
    }
  }

  return v14;
}

uint64_t sub_19E344588(uint64_t a1, uint64_t a2)
{
  void *v2;
  id v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  void *v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;

  v4 = objc_msgSend(v2, sel_im_livePhotoBundlePath);
  if (v4)
  {
    v5 = v4;
    v6 = sub_19E36F888();

  }
  else
  {
    if (qword_1EE4FF8F0 != -1)
      swift_once();
    v7 = sub_19E36F798();
    sub_19E3222C4(v7, (uint64_t)qword_1EE4FFA10);
    v8 = sub_19E36F780();
    v9 = sub_19E36FAA4();
    if (os_log_type_enabled(v8, v9))
    {
      v10 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v10 = 0;
      _os_log_impl(&dword_19E239000, v8, v9, "Could not find live photo bundle from path alone, checking with the guid instead.", v10, 2u);
      MEMORY[0x1A1AE8ACC](v10, -1, -1);
    }

    if (a2)
    {
      v11 = (void *)sub_19E36F864();
      v6 = sub_19E3440D0(v11);

    }
    else
    {
      v12 = sub_19E36F780();
      v13 = sub_19E36FA80();
      if (os_log_type_enabled(v12, v13))
      {
        v14 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v14 = 0;
        _os_log_impl(&dword_19E239000, v12, v13, "Cannot find live photo bundle because guid is nil.", v14, 2u);
        MEMORY[0x1A1AE8ACC](v14, -1, -1);
      }

      return 0;
    }
  }
  return v6;
}

id sub_19E34474C(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;

  if (a3)
  {
    v4 = sub_19E36F888();
    v6 = v5;
  }
  else
  {
    v4 = 0;
    v6 = 0;
  }
  v7 = a1;
  sub_19E344588(v4, v6);
  v9 = v8;

  swift_bridgeObjectRelease();
  if (v9)
  {
    v10 = (void *)sub_19E36F864();
    swift_bridgeObjectRelease();
  }
  else
  {
    v10 = 0;
  }
  return v10;
}

id sub_19E3447E4()
{
  id result;

  result = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for TipsNextEventReporter()), sel_init);
  qword_1ECFC65E8 = (uint64_t)result;
  return result;
}

id TipsNextEventReporter.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

id static TipsNextEventReporter.shared.getter()
{
  if (qword_1ECFC65F8 != -1)
    swift_once();
  return (id)qword_1ECFC65E8;
}

uint64_t sub_19E3448B4(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t v5;

  *(_QWORD *)(v5 + 24) = a5;
  *(_BYTE *)(v5 + 48) = a4;
  return swift_task_switch();
}

uint64_t sub_19E3448D0()
{
  uint64_t v0;
  _QWORD *v1;

  sub_19E36F690();
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 32) = v1;
  *v1 = v0;
  v1[1] = sub_19E34499C;
  return sub_19E36F684();
}

uint64_t sub_19E34499C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 40) = v0;
  swift_task_dealloc();
  if (v0)
    return swift_task_switch();
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_19E344A38()
{
  uint64_t v0;
  NSObject *v1;
  os_log_type_t v2;
  unint64_t v3;
  uint64_t v4;
  uint8_t *v5;
  uint64_t v6;
  void *v7;
  void *v9;
  uint64_t v10;

  swift_bridgeObjectRelease();
  v1 = sub_19E36F780();
  v2 = sub_19E36FA98();
  if (os_log_type_enabled(v1, v2))
  {
    v9 = *(void **)(v0 + 40);
    if ((*(_BYTE *)(v0 + 48) & 1) != 0)
      v3 = 0x800000019E39D940;
    else
      v3 = 0x800000019E39D970;
    if ((*(_BYTE *)(v0 + 48) & 1) != 0)
      v4 = 0xD000000000000027;
    else
      v4 = 0xD000000000000020;
    v5 = (uint8_t *)swift_slowAlloc();
    v6 = swift_slowAlloc();
    v10 = v6;
    *(_DWORD *)v5 = 136315138;
    *(_QWORD *)(v0 + 16) = sub_19E337764(v4, v3, &v10);
    sub_19E36FBD0();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_19E239000, v1, v2, "Failed to donate event with identifier: %s", v5, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1A1AE8ACC](v6, -1, -1);
    MEMORY[0x1A1AE8ACC](v5, -1, -1);
    v7 = v9;
  }
  else
  {
    v7 = *(void **)(v0 + 40);
  }

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_19E344BE8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = sub_19E36F9E4();
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) != 1)
  {
    sub_19E36F9D8();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    if (!*(_QWORD *)(a3 + 16))
      goto LABEL_5;
    goto LABEL_3;
  }
  sub_19E3463B4(a1);
  if (*(_QWORD *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    sub_19E36F9C0();
    swift_unknownObjectRelease();
  }
LABEL_5:
  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 16) = a2;
  *(_QWORD *)(v8 + 24) = a3;
  return swift_task_create();
}

uint64_t sub_19E344D2C(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t v5;

  *(_QWORD *)(v5 + 24) = a5;
  *(_BYTE *)(v5 + 80) = a4;
  return swift_task_switch();
}

void sub_19E344D48()
{
  __asm { BR              X11 }
}

uint64_t sub_19E344D9C()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;

  v0[4] = 0x800000019E39D8A0;
  sub_19E36F6C0();
  v1 = sub_19E36F6B4();
  v0[5] = v1;
  v0[6] = *(_QWORD *)(v1 - 8);
  v0[7] = swift_task_alloc();
  sub_19E36F6A8();
  v2 = (_QWORD *)swift_task_alloc();
  v0[8] = v2;
  *v2 = v0;
  v2[1] = sub_19E344EB0;
  return sub_19E36F69C();
}

uint64_t sub_19E344EB0()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(*v1 + 56);
  v3 = *(_QWORD *)(*v1 + 40);
  v4 = *(_QWORD *)(*v1 + 48);
  v5 = *v1;
  *(_QWORD *)(v5 + 72) = v0;
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v2, v3);
  swift_bridgeObjectRelease();
  if (v0)
    return swift_task_switch();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v5 + 8))();
}

uint64_t sub_19E344F5C()
{
  uint64_t v0;
  NSObject *v1;
  os_log_type_t v2;
  uint64_t v3;
  _DWORD *v4;

  swift_task_dealloc();
  v1 = sub_19E36F780();
  v2 = sub_19E36FA98();
  if (os_log_type_enabled(v1, v2))
  {
    v3 = *(unsigned __int8 *)(v0 + 80);
    v4 = (_DWORD *)swift_slowAlloc();
    swift_slowAlloc();
    *v4 = 136315138;
    __asm { BR              X9 }
  }

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_19E345158()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  uint64_t v8;

  v1 = sub_19E247E74(&qword_1ECFC6648);
  MEMORY[0x1E0C80A78](v1);
  v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_19E36F9E4();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v3, 1, 1, v4);
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = 0;
  *(_QWORD *)(v5 + 24) = 0;
  *(_BYTE *)(v5 + 32) = 0;
  *(_QWORD *)(v5 + 40) = v0;
  v6 = v0;
  sub_19E344BE8((uint64_t)v3, (uint64_t)&unk_1EE502F30, v5);
  return swift_release();
}

uint64_t sub_19E34521C()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_BYTE *)(v0 + 32);
  v3 = *(_QWORD *)(v0 + 40);
  v4 = swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v4;
  *(_QWORD *)v4 = v1;
  *(_QWORD *)(v4 + 8) = sub_19E24C450;
  *(_QWORD *)(v4 + 24) = v3;
  *(_BYTE *)(v4 + 48) = v2;
  return swift_task_switch();
}

uint64_t sub_19E34535C()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  uint64_t v8;

  v1 = sub_19E247E74(&qword_1ECFC6648);
  MEMORY[0x1E0C80A78](v1);
  v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_19E36F9E4();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v3, 1, 1, v4);
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = 0;
  *(_QWORD *)(v5 + 24) = 0;
  *(_BYTE *)(v5 + 32) = 1;
  *(_QWORD *)(v5 + 40) = v0;
  v6 = v0;
  sub_19E344BE8((uint64_t)v3, (uint64_t)&unk_1EE502F38, v5);
  return swift_release();
}

uint64_t sub_19E345500()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  uint64_t v8;

  v1 = sub_19E247E74(&qword_1ECFC6648);
  MEMORY[0x1E0C80A78](v1);
  v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_19E36F9E4();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v3, 1, 1, v4);
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = 0;
  *(_QWORD *)(v5 + 24) = 0;
  *(_BYTE *)(v5 + 32) = 0;
  *(_QWORD *)(v5 + 40) = v0;
  v6 = v0;
  sub_19E344BE8((uint64_t)v3, (uint64_t)&unk_1EE502F48, v5);
  return swift_release();
}

uint64_t sub_19E3455C4()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_BYTE *)(v0 + 32);
  v3 = *(_QWORD *)(v0 + 40);
  v4 = swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v4;
  *(_QWORD *)v4 = v1;
  *(_QWORD *)(v4 + 8) = sub_19E24C450;
  *(_QWORD *)(v4 + 24) = v3;
  *(_BYTE *)(v4 + 80) = v2;
  return swift_task_switch();
}

uint64_t sub_19E345704()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  uint64_t v8;

  v1 = sub_19E247E74(&qword_1ECFC6648);
  MEMORY[0x1E0C80A78](v1);
  v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_19E36F9E4();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v3, 1, 1, v4);
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = 0;
  *(_QWORD *)(v5 + 24) = 0;
  *(_BYTE *)(v5 + 32) = 4;
  *(_QWORD *)(v5 + 40) = v0;
  v6 = v0;
  sub_19E344BE8((uint64_t)v3, (uint64_t)&unk_1EE502F50, v5);
  return swift_release();
}

uint64_t sub_19E3457CC()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_BYTE *)(v0 + 32);
  v3 = *(_QWORD *)(v0 + 40);
  v4 = swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v4;
  *(_QWORD *)v4 = v1;
  *(_QWORD *)(v4 + 8) = sub_19E24C768;
  *(_QWORD *)(v4 + 24) = v3;
  *(_BYTE *)(v4 + 80) = v2;
  return swift_task_switch();
}

uint64_t sub_19E345910()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  uint64_t v8;

  v1 = sub_19E247E74(&qword_1ECFC6648);
  MEMORY[0x1E0C80A78](v1);
  v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_19E36F9E4();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v3, 1, 1, v4);
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = 0;
  *(_QWORD *)(v5 + 24) = 0;
  *(_BYTE *)(v5 + 32) = 5;
  *(_QWORD *)(v5 + 40) = v0;
  v6 = v0;
  sub_19E344BE8((uint64_t)v3, (uint64_t)&unk_1EE502F58, v5);
  return swift_release();
}

uint64_t sub_19E345AB4()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  uint64_t v8;

  v1 = sub_19E247E74(&qword_1ECFC6648);
  MEMORY[0x1E0C80A78](v1);
  v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_19E36F9E4();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v3, 1, 1, v4);
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = 0;
  *(_QWORD *)(v5 + 24) = 0;
  *(_BYTE *)(v5 + 32) = 6;
  *(_QWORD *)(v5 + 40) = v0;
  v6 = v0;
  sub_19E344BE8((uint64_t)v3, (uint64_t)&unk_1EE502F60, v5);
  return swift_release();
}

id TipsNextEventReporter.init()()
{
  char *v0;
  char *v1;
  objc_super v3;

  v1 = &v0[OBJC_IVAR___TipsNextEventReporter_appBundleId];
  *(_QWORD *)v1 = 0xD000000000000013;
  *((_QWORD *)v1 + 1) = 0x800000019E39BF40;
  sub_19E36F78C();
  v3.receiver = v0;
  v3.super_class = (Class)type metadata accessor for TipsNextEventReporter();
  return objc_msgSendSuper2(&v3, sel_init);
}

uint64_t type metadata accessor for TipsNextEventReporter()
{
  uint64_t result;

  result = qword_1ECFC6600;
  if (!qword_1ECFC6600)
    return swift_getSingletonMetadata();
  return result;
}

id TipsNextEventReporter.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for TipsNextEventReporter();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

BOOL static MessagesTip.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t MessagesTip.hash(into:)()
{
  return sub_19E36FE94();
}

uint64_t MessagesTip.hashValue.getter()
{
  sub_19E36FE88();
  sub_19E36FE94();
  return sub_19E36FEA0();
}

BOOL static MessagesTipEvents.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t MessagesTipEvents.hash(into:)()
{
  return sub_19E36FE94();
}

uint64_t MessagesTipEvents.hashValue.getter()
{
  sub_19E36FE88();
  sub_19E36FE94();
  return sub_19E36FEA0();
}

BOOL sub_19E345F5C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

unint64_t sub_19E345F78()
{
  unint64_t result;

  result = qword_1EE502F70;
  if (!qword_1EE502F70)
  {
    result = MEMORY[0x1A1AE8A18](&protocol conformance descriptor for MessagesTip, &type metadata for MessagesTip);
    atomic_store(result, (unint64_t *)&qword_1EE502F70);
  }
  return result;
}

unint64_t sub_19E345FC0()
{
  unint64_t result;

  result = qword_1EE502F78;
  if (!qword_1EE502F78)
  {
    result = MEMORY[0x1A1AE8A18](&protocol conformance descriptor for MessagesTipEvents, &type metadata for MessagesTipEvents);
    atomic_store(result, (unint64_t *)&qword_1EE502F78);
  }
  return result;
}

uint64_t sub_19E346004()
{
  return type metadata accessor for TipsNextEventReporter();
}

uint64_t sub_19E34600C()
{
  uint64_t result;
  unint64_t v1;

  result = sub_19E36F798();
  if (v1 <= 0x3F)
  {
    result = swift_updateClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t method lookup function for TipsNextEventReporter()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of TipsNextEventReporter.donateSentMessageEvent()()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x70))();
}

uint64_t dispatch thunk of TipsNextEventReporter.donateReceivedPhotoEventWatch()()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x78))();
}

uint64_t dispatch thunk of TipsNextEventReporter.donateSentINSendMessageIntentEvent()()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x80))();
}

uint64_t dispatch thunk of TipsNextEventReporter.donateSavedPhotoEventWatch()()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x88))();
}

uint64_t dispatch thunk of TipsNextEventReporter.donateSentTapbackEventWatch()()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x90))();
}

uint64_t dispatch thunk of TipsNextEventReporter.donateSentSetNameAndPhotoProfileEvent()()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x98))();
}

uint64_t storeEnumTagSinglePayload for MessagesTip(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 6 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 6) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFA)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF9)
    return ((uint64_t (*)(void))((char *)&loc_19E346184 + 4 * byte_19E3828DA[v4]))();
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_19E3461B8 + 4 * byte_19E3828D5[v4]))();
}

uint64_t sub_19E3461B8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_19E3461C0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x19E3461C8);
  return result;
}

uint64_t sub_19E3461D4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x19E3461DCLL);
  *(_BYTE *)result = a2 + 6;
  return result;
}

uint64_t sub_19E3461E0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_19E3461E8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t storeEnumTagSinglePayload for MessagesTipEvents(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_19E346240 + 4 * byte_19E3828E4[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_19E346274 + 4 * byte_19E3828DF[v4]))();
}

uint64_t sub_19E346274(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_19E34627C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x19E346284);
  return result;
}

uint64_t sub_19E346290(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x19E346298);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_19E34629C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_19E3462A4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for MessagesTipEvents()
{
  return &type metadata for MessagesTipEvents;
}

uint64_t sub_19E3462D8()
{
  uint64_t v0;

  swift_unknownObjectRelease();

  return swift_deallocObject();
}

uint64_t sub_19E346304(uint64_t a1, int *a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t);

  v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = sub_19E346368;
  return v6(a1);
}

uint64_t sub_19E346368()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_19E3463B4(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_19E247E74(&qword_1ECFC6648);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_19E3463F4()
{
  swift_release();
  return swift_deallocObject();
}

void __swiftcall IMActionOpenWeb.init(dictionary:)(IMActionOpenWeb_optional *__return_ptr retstr, Swift::OpaquePointer dictionary)
{
  id v2;
  void *v3;

  v2 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  v3 = (void *)sub_19E36F81C();
  swift_bridgeObjectRelease();
  objc_msgSend(v2, sel_initWithDictionary_, v3);

}

id IMActionOpenWeb.init(dictionary:)(uint64_t a1)
{
  void *v1;
  void *v2;
  unint64_t v4;
  char v5;
  unint64_t v6;
  char v7;
  unint64_t v8;
  char v9;
  id v10;
  void *v12;
  void *v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;

  v2 = v1;
  if (*(_QWORD *)(a1 + 16))
  {
    v4 = sub_19E3247E4(1701080941, 0xE400000000000000);
    if ((v5 & 1) != 0)
    {
      sub_19E324848(*(_QWORD *)(a1 + 56) + 32 * v4, (uint64_t)&v15);
      if ((swift_dynamicCast() & 1) != 0)
      {
        if (*(_QWORD *)(a1 + 16))
        {
          v6 = sub_19E3247E4(7107189, 0xE300000000000000);
          if ((v7 & 1) != 0)
          {
            sub_19E324848(*(_QWORD *)(a1 + 56) + 32 * v6, (uint64_t)&v15);
            if ((swift_dynamicCast() & 1) != 0)
            {
              if (*(_QWORD *)(a1 + 16)
                && (v8 = sub_19E3247E4(0x6574656D61726170, 0xEA00000000007372), (v9 & 1) != 0))
              {
                sub_19E324848(*(_QWORD *)(a1 + 56) + 32 * v8, (uint64_t)&v15);
              }
              else
              {
                v15 = 0u;
                v16 = 0u;
              }
              swift_bridgeObjectRelease();
              if (!*((_QWORD *)&v16 + 1))
              {
                swift_bridgeObjectRelease();
                sub_19E322284((uint64_t)&v15);
                goto LABEL_11;
              }
              if ((swift_dynamicCast() & 1) != 0)
              {
                v12 = (void *)sub_19E36F864();
                swift_bridgeObjectRelease();
                v13 = (void *)sub_19E36F864();
                swift_bridgeObjectRelease();
                v10 = objc_msgSend(v2, sel_initWithMode_url_parameters_, v14, v12, v13);

                return v10;
              }
            }
          }
        }
      }
    }
  }
  swift_bridgeObjectRelease();
LABEL_11:
  swift_getObjectType();
  swift_deallocPartialClassInstance();
  return 0;
}

unint64_t sub_19E3467A4()
{
  void *v0;
  uint64_t inited;
  id v2;
  uint64_t v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  sub_19E247E74(&qword_1EE5019B8);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_19E381BB0;
  *(_QWORD *)(inited + 32) = 1701080941;
  *(_QWORD *)(inited + 40) = 0xE400000000000000;
  v2 = objc_msgSend(v0, sel_mode);
  v3 = MEMORY[0x1E0DEB418];
  *(_QWORD *)(inited + 48) = v2;
  *(_QWORD *)(inited + 72) = v3;
  *(_QWORD *)(inited + 80) = 7107189;
  *(_QWORD *)(inited + 88) = 0xE300000000000000;
  v4 = objc_msgSend(v0, "url");
  v5 = sub_19E36F888();
  v7 = v6;

  v8 = MEMORY[0x1E0DEA968];
  *(_QWORD *)(inited + 96) = v5;
  *(_QWORD *)(inited + 104) = v7;
  *(_QWORD *)(inited + 120) = v8;
  *(_QWORD *)(inited + 128) = 0x6574656D61726170;
  *(_QWORD *)(inited + 136) = 0xEA00000000007372;
  v9 = objc_msgSend(v0, sel_parameters);
  v10 = sub_19E36F888();
  v12 = v11;

  *(_QWORD *)(inited + 168) = v8;
  *(_QWORD *)(inited + 144) = v10;
  *(_QWORD *)(inited + 152) = v12;
  return sub_19E32D864(inited);
}

void __swiftcall IMActionOpenWeb.init()(IMActionOpenWeb *__return_ptr retstr)
{
  objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_init);
}

void IMActionOpenWeb.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

unint64_t type metadata accessor for IMActionOpenWeb()
{
  unint64_t result;

  result = qword_1EE502FD0;
  if (!qword_1EE502FD0)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1EE502FD0);
  }
  return result;
}

uint64_t TypedFastEnumerator.next()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  __int128 v8;
  uint64_t v9;
  _OWORD v10[2];

  v3 = *(_QWORD *)(a1 + 16);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](a1);
  v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_19E36F588();
  if (v9)
  {
    sub_19E24B594(&v8, v10);
    sub_19E24B594(v10, &v8);
    swift_dynamicCast();
    (*(void (**)(uint64_t, char *, uint64_t))(v4 + 16))(a2, v6, v3);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v4 + 56))(a2, 0, 1, v3);
    return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  }
  else
  {
    sub_19E322284((uint64_t)&v8);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v4 + 56))(a2, 1, 1, v3);
  }
}

uint64_t TypedFastEnumeratorSequence.makeIterator()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v7;

  v2 = sub_19E36F594();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_unknownObjectRetain();
  sub_19E36F5A0();
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v3 + 32))(a1, v5, v2);
}

uint64_t sub_19E346BC4@<X0>(uint64_t a1@<X8>)
{
  TypedFastEnumeratorSequence.makeIterator()(a1);
  return swift_unknownObjectRelease();
}

uint64_t sub_19E346BDC()
{
  return 0;
}

uint64_t sub_19E346BE4()
{
  return 2;
}

uint64_t sub_19E346BEC()
{
  uint64_t v0;

  v0 = sub_19E346F00();
  swift_unknownObjectRelease();
  return v0;
}

uint64_t sub_19E346C28()
{
  return sub_19E36F8F4();
}

uint64_t NSFastEnumeration.sequence<A>(of:)@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = v1;
  return swift_unknownObjectRetain();
}

void sub_19E346C54()
{
  JUMPOUT(0x1A1AE8A18);
}

uint64_t sub_19E346C64()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t sub_19E346C6C()
{
  uint64_t result;
  unint64_t v1;

  result = sub_19E36F594();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_19E346CD4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_19E36F594();
  return (**(uint64_t (***)(uint64_t, uint64_t, uint64_t))(v4 - 8))(a1, a2, v4);
}

uint64_t sub_19E346D10(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_19E36F594();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
}

uint64_t sub_19E346D44(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_19E36F594();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, a2, v4);
  return a1;
}

uint64_t sub_19E346D88(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_19E36F594();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a1, a2, v4);
  return a1;
}

uint64_t sub_19E346DCC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_19E36F594();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a1, a2, v4);
  return a1;
}

uint64_t sub_19E346E10(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_19E36F594();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a1, a2, v4);
  return a1;
}

uint64_t sub_19E346E54()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_19E346E60(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_19E36F594();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t sub_19E346E9C()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_19E346EA8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_19E36F594();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t type metadata accessor for TypedFastEnumerator(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_19E329228(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for TypedFastEnumerator);
}

uint64_t type metadata accessor for TypedFastEnumeratorSequence(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_19E329228(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for TypedFastEnumeratorSequence);
}

void __swiftcall IMPersistentMenuItem.init(dictionary:)(IMPersistentMenuItem_optional *__return_ptr retstr, Swift::OpaquePointer dictionary)
{
  id v2;
  void *v3;

  v2 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  v3 = (void *)sub_19E36F81C();
  swift_bridgeObjectRelease();
  objc_msgSend(v2, sel_initWithDictionary_, v3);

}

id IMPersistentMenuItem.init(dictionary:)(uint64_t a1)
{
  void *v1;
  void *v2;
  unint64_t v4;
  char v5;
  unint64_t v6;
  char v7;
  id v8;
  void *v10;
  void *v11;
  id v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;

  v2 = v1;
  if (*(_QWORD *)(a1 + 16)
    && (v4 = sub_19E3247E4(1701869940, 0xE400000000000000), (v5 & 1) != 0)
    && (sub_19E324848(*(_QWORD *)(a1 + 56) + 32 * v4, (uint64_t)&v14), (swift_dynamicCast() & 1) != 0))
  {
    if (*(_QWORD *)(a1 + 16) && (v6 = sub_19E3247E4(0x746E65746E6F63, 0xE700000000000000), (v7 & 1) != 0))
    {
      sub_19E324848(*(_QWORD *)(a1 + 56) + 32 * v6, (uint64_t)&v14);
    }
    else
    {
      v14 = 0u;
      v15 = 0u;
    }
    swift_bridgeObjectRelease();
    if (*((_QWORD *)&v15 + 1))
    {
      sub_19E247E74(&qword_1EE503490);
      if ((swift_dynamicCast() & 1) != 0)
      {
        v10 = (void *)objc_opt_self();
        v11 = (void *)sub_19E36F81C();
        swift_bridgeObjectRelease();
        v12 = objc_msgSend(v10, sel_contentWithType_dictionary_, v13, v11);

        v8 = objc_msgSend(v2, sel_initWithType_content_, v13, v12);
        swift_unknownObjectRelease();
        return v8;
      }
    }
    else
    {
      sub_19E322284((uint64_t)&v14);
    }
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  swift_getObjectType();
  swift_deallocPartialClassInstance();
  return 0;
}

uint64_t sub_19E347230()
{
  void *v0;
  uint64_t inited;
  id v2;
  uint64_t v3;
  id v4;
  uint64_t v5;
  id v6;
  unint64_t v7;
  uint64_t v8;

  sub_19E247E74((uint64_t *)&unk_1EE5019F8);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_19E381B30;
  *(_QWORD *)(inited + 32) = 1701869940;
  *(_QWORD *)(inited + 40) = 0xE400000000000000;
  v2 = objc_msgSend(v0, sel_type);
  v3 = MEMORY[0x1E0DEB418];
  *(_QWORD *)(inited + 48) = v2;
  *(_QWORD *)(inited + 72) = v3;
  *(_QWORD *)(inited + 80) = 0x746E65746E6F63;
  *(_QWORD *)(inited + 88) = 0xE700000000000000;
  v4 = objc_msgSend(v0, sel_content);
  v5 = (uint64_t)v4;
  if (v4)
  {
    v6 = objc_msgSend(v4, sel_dictionaryRepresentation);
    swift_unknownObjectRelease();
    v5 = sub_19E36F828();

    v4 = (id)sub_19E247E74(&qword_1EE503490);
  }
  else
  {
    *(_QWORD *)(inited + 104) = 0;
    *(_QWORD *)(inited + 112) = 0;
  }
  *(_QWORD *)(inited + 96) = v5;
  *(_QWORD *)(inited + 120) = v4;
  v7 = sub_19E32D998(inited);
  v8 = sub_19E35FE5C(v7);
  swift_bridgeObjectRelease();
  return v8;
}

void __swiftcall IMPersistentMenuItem.init()(IMPersistentMenuItem *__return_ptr retstr)
{
  objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_init);
}

void IMPersistentMenuItem.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

unint64_t type metadata accessor for IMPersistentMenuItem()
{
  unint64_t result;

  result = qword_1EE502FE8;
  if (!qword_1EE502FE8)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1EE502FE8);
  }
  return result;
}

id sub_19E3474FC(uint64_t a1)
{
  __objc2_class *v1;
  id v2;
  void *v3;
  id v4;

  if (a1 == 1)
  {
    v1 = IMPersistentMenu;
  }
  else
  {
    if (a1)
      return 0;
    v1 = IMChip;
  }
  v2 = objc_allocWithZone((Class)v1);
  swift_bridgeObjectRetain();
  v3 = (void *)sub_19E36F81C();
  swift_bridgeObjectRelease();
  v4 = objc_msgSend(v2, sel_initWithDictionary_, v3);

  return v4;
}

uint64_t sub_19E3475A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v6;
  void *v7;
  id v8;
  uint64_t v10;
  _OWORD v11[2];
  _BYTE v12[24];
  uint64_t v13;

  v6 = (void *)sub_19E36F864();
  v7 = (void *)sub_19E36F864();
  v8 = (id)IMGetCachedDomainValueForKey();

  if (v8)
  {
    sub_19E36FC0C();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v11, 0, sizeof(v11));
  }
  sub_19E32223C((uint64_t)v11, (uint64_t)v12);
  if (!v13)
  {
    sub_19E326FA8((uint64_t)v12, qword_1ECFC68D0);
    goto LABEL_8;
  }
  sub_19E247E74(&qword_1ECFC6610);
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_8:
    swift_bridgeObjectRetain();
    return a5;
  }
  return v10;
}

id sub_19E34769C()
{
  uint64_t v0;
  id result;
  void *v2;
  unsigned int v3;
  unint64_t v4;
  unint64_t v5;
  __int128 v6;
  uint64_t v7;

  result = objc_msgSend((id)objc_opt_self(), sel_sharedInstance, *(_QWORD *)v0, *(_QWORD *)(v0 + 8), *(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_OWORD *)(v0 + 32), *(_QWORD *)(v0 + 48));
  if (result)
  {
    v2 = result;
    v3 = objc_msgSend(result, sel_isInternalInstall);

    if (v3)
    {
      if (*(_BYTE *)v0)
        v4 = 0xD000000000000013;
      else
        v4 = 0xD000000000000012;
      if (*(_BYTE *)v0)
        v5 = 0x800000019E39BF40;
      else
        v5 = 0x800000019E39BF20;
      (*(void (**)(uint64_t *__return_ptr, unint64_t, unint64_t, _QWORD, _QWORD, __int128 *))(v0 + 40))(&v7, v4, v5, *(_QWORD *)(v0 + 8), *(_QWORD *)(v0 + 16), &v6);
      swift_bridgeObjectRelease();
      return (id)v7;
    }
    else
    {
      return (id)swift_bridgeObjectRetain();
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_19E347790()
{
  LOBYTE(xmmword_1EE500828) = 1;
  *((_QWORD *)&xmmword_1EE500828 + 1) = 0x6148746F42534352;
  unk_1EE500838 = 0xED000073656C646ELL;
  qword_1EE500840 = MEMORY[0x1E0DEE9D8];
  unk_1EE500848 = MEMORY[0x1E0DEE9D8];
  qword_1EE500850 = (uint64_t)sub_19E347CBC;
  qword_1EE500858 = 0;
}

id sub_19E3477E0(void *a1)
{
  id v1;
  void *v2;
  id v3;

  v1 = a1;
  v2 = (void *)sub_19E36F864();
  v3 = objc_msgSend(v1, sel_hasPrefix_, v2);

  return v3;
}

uint64_t sub_19E347840()
{
  void *v0;
  void *v1;
  _QWORD *v2;
  uint64_t result;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _OWORD v8[3];
  uint64_t v9;

  v1 = v0;
  if (qword_1EE500860 != -1)
    swift_once();
  v8[0] = xmmword_1EE500828;
  v8[1] = unk_1EE500838;
  v8[2] = unk_1EE500848;
  v9 = qword_1EE500858;
  sub_19E347C1C((uint64_t)v8);
  v2 = sub_19E34769C();
  sub_19E347C6C((uint64_t)v8);
  result = (uint64_t)objc_msgSend(v1, sel__stripFZIDPrefix);
  if (result)
  {
    v4 = (void *)result;
    v5 = sub_19E36F888();
    v7 = v6;

    LOBYTE(v4) = sub_19E347CE4(v5, v7, v2);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v4 & 1) != 0)
      return 1;
    else
      return (uint64_t)objc_msgSend((id)objc_opt_self(), sel_IMHandleIsChatBot_, v1);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_19E347958(void *a1)
{
  id v1;
  char v2;

  v1 = a1;
  v2 = sub_19E347840();

  return v2 & 1;
}

uint64_t sub_19E347988()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  char v14;
  void (*v15)(char *, uint64_t);
  char v16;
  char v17;
  char v18;
  uint64_t v19;

  v0 = sub_19E247E74(&qword_1EE502FF0);
  MEMORY[0x1E0C80A78](v0);
  v2 = (char *)&v19 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_19E36F774();
  v4 = *(_QWORD *)(v3 - 8);
  v5 = MEMORY[0x1E0C80A78](v3);
  v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = MEMORY[0x1E0C80A78](v5);
  v10 = (char *)&v19 - v9;
  MEMORY[0x1E0C80A78](v8);
  v12 = (char *)&v19 - v11;
  sub_19E36F888();
  sub_19E36F72C();
  sub_19E36F720();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v2, 1, v3) == 1)
  {
    sub_19E326FA8((uint64_t)v2, &qword_1EE502FF0);
    return -1;
  }
  (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v12, v2, v3);
  sub_19E36F744();
  v14 = sub_19E36F768();
  v15 = *(void (**)(char *, uint64_t))(v4 + 8);
  v15(v10, v3);
  if ((v14 & 1) != 0)
  {
    v15(v12, v3);
    return 0;
  }
  sub_19E36F75C();
  v16 = sub_19E36F768();
  v15(v10, v3);
  (*(void (**)(char *, char *, uint64_t))(v4 + 16))(v7, v12, v3);
  if ((v16 & 1) != 0)
  {
    v15(v7, v3);
LABEL_8:
    v15(v12, v3);
    return 1;
  }
  sub_19E36F750();
  v17 = sub_19E36F768();
  v15(v10, v3);
  v15(v7, v3);
  if ((v17 & 1) != 0)
    goto LABEL_8;
  sub_19E36F738();
  v18 = sub_19E36F768();
  v15(v10, v3);
  v15(v12, v3);
  if ((v18 & 1) != 0)
    return 2;
  else
    return -1;
}

uint64_t sub_19E347BEC(void *a1)
{
  id v1;
  uint64_t v2;

  v1 = a1;
  v2 = sub_19E347988();

  return v2;
}

uint64_t sub_19E347C1C(uint64_t a1)
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

uint64_t sub_19E347C6C(uint64_t a1)
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_19E347CBC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X4>, uint64_t *a6@<X8>)
{
  uint64_t result;

  result = sub_19E3475A4(a1, a2, a3, a4, *a5);
  *a6 = result;
  return result;
}

uint64_t sub_19E347CE4(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t result;
  _QWORD *v9;
  uint64_t i;
  uint64_t v11;
  BOOL v12;

  v3 = a3[2];
  if (!v3)
    return 0;
  if (a3[4] == a1 && a3[5] == a2)
    return 1;
  result = sub_19E36FE10();
  if ((result & 1) != 0)
    return 1;
  if (v3 == 1)
    return 0;
  v9 = a3 + 7;
  for (i = 1; ; ++i)
  {
    v11 = i + 1;
    if (__OFADD__(i, 1))
      break;
    v12 = *(v9 - 1) == a1 && *v9 == a2;
    if (v12 || (sub_19E36FE10() & 1) != 0)
      return 1;
    result = 0;
    v9 += 2;
    if (v11 == v3)
      return result;
  }
  __break(1u);
  return result;
}

uint64_t sub_19E347DA8(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t i;
  uint64_t v4;
  _BOOL8 v5;
  BOOL v6;

  v2 = *(_QWORD *)(a2 + 16);
  if (!v2)
    return 0;
  if (*(_QWORD *)(a2 + 32) == result)
    return 1;
  if (v2 == 1)
    return 0;
  for (i = 5; ; ++i)
  {
    v4 = i - 3;
    if (__OFADD__(i - 4, 1))
      break;
    v6 = *(_QWORD *)(a2 + 8 * i) == result;
    v5 = v6;
    v6 = v6 || v4 == v2;
    if (v6)
      return v5;
  }
  __break(1u);
  return result;
}

uint64_t IMStickerTapback.transferGUID.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR___IMStickerTapback__transferGuid);
  swift_bridgeObjectRetain();
  return v1;
}

id IMStickerTapback.counterpart.getter()
{
  void *v0;
  unsigned int v1;
  char **v2;

  v1 = objc_msgSend(v0, sel_isRemoved);
  v2 = &selRef_visibleTapbackCounterpart;
  if (!v1)
    v2 = &selRef_removedTapbackCounterpart;
  return objc_msgSend(v0, *v2);
}

id IMStickerTapback.removedTapbackCounterpart.getter()
{
  void *v0;
  id v1;
  id v2;
  id v3;
  void *v4;

  if ((objc_msgSend(v0, sel_isRemoved) & 1) != 0)
    return v0;
  v2 = objc_msgSend(v0, sel_transferGUID);
  sub_19E36F888();

  v3 = objc_allocWithZone((Class)IMStickerTapback);
  v4 = (void *)sub_19E36F864();
  swift_bridgeObjectRelease();
  v1 = objc_msgSend(v3, sel_initWithTransferGUID_isRemoved_, v4, 1);

  return v1;
}

id IMStickerTapback.visibleTapbackCounterpart.getter()
{
  void *v0;
  id v1;
  id v2;
  void *v3;
  id v4;

  if (!objc_msgSend(v0, sel_isRemoved))
    return v0;
  v1 = objc_msgSend(v0, sel_transferGUID);
  sub_19E36F888();

  v2 = objc_allocWithZone((Class)IMStickerTapback);
  v3 = (void *)sub_19E36F864();
  swift_bridgeObjectRelease();
  v4 = objc_msgSend(v2, sel_initWithTransferGUID_isRemoved_, v3, 0);

  return v4;
}

void __swiftcall IMStickerTapback.init(transferGUID:isRemoved:)(IMStickerTapback_optional *__return_ptr retstr, Swift::String transferGUID, Swift::Bool isRemoved)
{
  id v4;
  void *v5;

  v4 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  v5 = (void *)sub_19E36F864();
  swift_bridgeObjectRelease();
  objc_msgSend(v4, sel_initWithTransferGUID_isRemoved_, v5, isRemoved);

}

id IMStickerTapback.init(transferGUID:isRemoved:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  objc_super v7;

  v4 = (_QWORD *)(v3 + OBJC_IVAR___IMStickerTapback__transferGuid);
  *v4 = a1;
  v4[1] = a2;
  if ((a3 & 1) != 0)
    v5 = 3007;
  else
    v5 = 2007;
  v7.super_class = (Class)IMStickerTapback;
  return objc_msgSendSuper2(&v7, sel_initWithAssociatedMessageType_, v5);
}

void __swiftcall IMStickerTapback.init(coder:)(IMStickerTapback_optional *__return_ptr retstr, NSCoder coder)
{
  objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_initWithCoder_, coder.super.isa);

}

void IMStickerTapback.init(coder:)()
{
  sub_19E36FC84();
  swift_bridgeObjectRelease();
  sub_19E36FCF0();
  __break(1u);
}

void __swiftcall IMStickerTapback.init(imRemoteObjectSerializedDictionary:)(IMStickerTapback_optional *__return_ptr retstr, Swift::OpaquePointer_optional imRemoteObjectSerializedDictionary)
{
  void *v2;

  if (imRemoteObjectSerializedDictionary.value._rawValue)
  {
    v2 = (void *)sub_19E36F81C();
    swift_bridgeObjectRelease();
  }
  else
  {
    v2 = 0;
  }
  objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_initWithIMRemoteObjectSerializedDictionary_, v2);

}

void IMStickerTapback.init(imRemoteObjectSerializedDictionary:)()
{
  sub_19E36FC84();
  swift_bridgeObjectRelease();
  sub_19E36FCF0();
  __break(1u);
}

IMTapbackSummaryActionStringFormat_optional __swiftcall IMStickerTapback.actionStringFormat(withAdaptiveImageGlyphAvailable:)(Swift::Bool withAdaptiveImageGlyphAvailable)
{
  void *v1;
  id v3;
  BOOL v4;
  NSString *v5;
  Swift::Bool v6;
  id v7;
  void *v8;
  objc_class *v9;
  objc_class *v10;
  objc_class *v11;
  IMTapbackSummaryActionStringFormat_optional result;

  v3 = objc_msgSend(v1, sel_associatedMessageType);
  if (v3 == (id)3007)
  {
    v7 = objc_allocWithZone((Class)IMTapbackSummaryActionStringFormat);
    if (withAdaptiveImageGlyphAvailable)
    {
LABEL_6:
      v8 = (void *)sub_19E36F864();
      v9 = (objc_class *)objc_msgSend(v7, sel_initWithActionStringFormat_requiresReactionReplacment_, v8, 1);
LABEL_9:
      v10 = v9;

      goto LABEL_10;
    }
LABEL_8:
    v8 = (void *)sub_19E36F864();
    v9 = (objc_class *)objc_msgSend(v7, sel_initWithActionStringFormat_requiresReactionReplacment_, v8, 0);
    goto LABEL_9;
  }
  if (v3 == (id)2007)
  {
    v7 = objc_allocWithZone((Class)IMTapbackSummaryActionStringFormat);
    if (withAdaptiveImageGlyphAvailable)
      goto LABEL_6;
    goto LABEL_8;
  }
  v10 = 0;
LABEL_10:
  v11 = v10;
  result.value._actionStringFormat = v5;
  result.value.super.isa = v11;
  result.is_nil = v6;
  result.value._requiresReactionReplacment = v4;
  return result;
}

id IMStickerTapback.reactionString(with:)(void *a1)
{
  id v1;
  void *v2;
  id v3;

  if (!a1)
    return 0;
  v1 = a1;
  sub_19E32DE04(MEMORY[0x1E0DEE9D8]);
  type metadata accessor for Key(0);
  sub_19E329BA8();
  v2 = (void *)sub_19E36F81C();
  swift_bridgeObjectRelease();
  v3 = objc_msgSend((id)objc_opt_self(), sel_attributedStringWithAdaptiveImageGlyph_attributes_, v1, v2);

  return v3;
}

uint64_t IMStickerTapback.adaptiveImageGlyphForPreviewString(adaptiveImageGlyphProvider:)(uint64_t (*a1)(uint64_t, uint64_t))
{
  void *v1;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = objc_msgSend(v1, sel_transferGUID);
  v4 = sub_19E36F888();
  v6 = v5;

  v7 = a1(v4, v6);
  swift_bridgeObjectRelease();
  return v7;
}

BOOL static IMStickerTapback.isValidAssociatedMessageType(_:)(uint64_t a1)
{
  return a1 == 2007 || a1 == 3007;
}

uint64_t IMStickerTapback.isEqual(_:)(uint64_t a1)
{
  void *v1;
  void *v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  objc_super v14;
  void *v15;
  _BYTE v16[24];
  uint64_t v17;

  swift_getObjectType();
  sub_19E323318(a1, (uint64_t)v16);
  if (!v17)
  {
    sub_19E322284((uint64_t)v16);
    goto LABEL_9;
  }
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_9:
    v12 = 0;
    return v12 & 1;
  }
  v3 = v15;
  v14.receiver = v1;
  v14.super_class = (Class)IMStickerTapback;
  if (!objc_msgSendSuper2(&v14, sel_isEqual_, v15))
  {

    goto LABEL_9;
  }
  v4 = objc_msgSend(v1, sel_transferGUID);
  v5 = sub_19E36F888();
  v7 = v6;

  v8 = objc_msgSend(v3, sel_transferGUID);
  v9 = sub_19E36F888();
  v11 = v10;

  if (v5 == v9 && v7 == v11)
    v12 = 1;
  else
    v12 = sub_19E36FE10();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  return v12 & 1;
}

id IMStickerTapback.init(associatedMessageType:)(uint64_t a1)
{
  return objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_initWithAssociatedMessageType_, a1);
}

void IMStickerTapback.init(associatedMessageType:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

unint64_t type metadata accessor for IMStickerTapback()
{
  unint64_t result;

  result = qword_1EE503000;
  if (!qword_1EE503000)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1EE503000);
  }
  return result;
}

uint64_t MainThreadOnly.init(initialValue:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(a3, a1);
}

uint64_t MainThreadOnly.valueAssertingIfNotMainThread.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t result;

  if (objc_msgSend((id)objc_opt_self(), sel_isMainThread))
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 16))(a2, v2);
  result = sub_19E36FCF0();
  __break(1u);
  return result;
}

uint64_t sub_19E348DC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v4 = *(_QWORD *)(a4 + a3 - 8);
  MEMORY[0x1E0C80A78](a1);
  v6 = (char *)&v12 - v5;
  (*(void (**)(char *))(v7 + 16))((char *)&v12 - v5);
  v10 = type metadata accessor for MainThreadOnly(0, v4, v8, v9);
  return MainThreadOnly.valueAssertingIfNotMainThread.setter((uint64_t)v6, v10);
}

uint64_t MainThreadOnly.valueAssertingIfNotMainThread.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  if (objc_msgSend((id)objc_opt_self(), sel_isMainThread))
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 40))(v2, a1);
  result = sub_19E36FCF0();
  __break(1u);
  return result;
}

void (*MainThreadOnly.valueAssertingIfNotMainThread.modify(_QWORD *a1, uint64_t a2))(uint64_t **a1, char a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  void *v9;

  v5 = malloc(0x30uLL);
  *a1 = v5;
  *v5 = a2;
  v5[1] = v2;
  v6 = *(_QWORD *)(a2 + 16);
  v5[2] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v5[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v5[4] = malloc(v8);
  v9 = malloc(v8);
  v5[5] = v9;
  MainThreadOnly.valueAssertingIfNotMainThread.getter(a2, (uint64_t)v9);
  return sub_19E348F7C;
}

void sub_19E348F7C(uint64_t **a1, char a2)
{
  uint64_t *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *a1;
  v3 = (void *)(*a1)[4];
  v4 = (void *)(*a1)[5];
  if ((a2 & 1) != 0)
  {
    v5 = v2[2];
    v6 = v2[3];
    v7 = *v2;
    (*(void (**)(uint64_t, void *, uint64_t))(v6 + 16))((*a1)[4], v4, v5);
    MainThreadOnly.valueAssertingIfNotMainThread.setter((uint64_t)v3, v7);
    (*(void (**)(void *, uint64_t))(v6 + 8))(v4, v5);
  }
  else
  {
    MainThreadOnly.valueAssertingIfNotMainThread.setter((*a1)[5], *v2);
  }
  free(v4);
  free(v3);
  free(v2);
}

uint64_t sub_19E349014@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v5;

  v5 = type metadata accessor for MainThreadOnly(0, *(_QWORD *)(a2 + a1 - 8), a2, a3);
  return MainThreadOnly.valueAssertingIfNotMainThread.getter(v5, a4);
}

uint64_t sub_19E349050()
{
  return 8;
}

_QWORD *sub_19E34905C(_QWORD *result, _QWORD *a2)
{
  *a2 = *result;
  return result;
}

uint64_t sub_19E349068()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_19E3490D4(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;

  v3 = a1;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 80);
  if (v5 <= 7 && *(_QWORD *)(v4 + 64) <= 0x18uLL && (*(_DWORD *)(v4 + 80) & 0x100000) == 0)
  {
    (*(void (**)(uint64_t *))(v4 + 16))(a1);
  }
  else
  {
    v8 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v8 + ((v5 + 16) & ~v5));
    swift_retain();
  }
  return v3;
}

uint64_t sub_19E349144(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))();
}

uint64_t sub_19E349154(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 16))();
  return a1;
}

uint64_t sub_19E349184(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 24))();
  return a1;
}

uint64_t sub_19E3491B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 32))();
  return a1;
}

uint64_t sub_19E3491E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 40))();
  return a1;
}

uint64_t sub_19E349214(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  char v8;
  int v9;
  unsigned int v10;
  int v11;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = a2 - v5;
  if (a2 <= v5)
    goto LABEL_18;
  v7 = *(_QWORD *)(v4 + 64);
  v8 = 8 * v7;
  if (v7 <= 3)
  {
    v10 = ((v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      v9 = *(_DWORD *)(a1 + v7);
      if (!v9)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_18:
      if (v5)
        return (*(uint64_t (**)(void))(v4 + 48))();
      return 0;
    }
  }
  v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_18;
LABEL_11:
  v11 = (v9 - 1) << v8;
  if (v7 > 3)
    v11 = 0;
  if (!(_DWORD)v7)
    return v5 + v11 + 1;
  if (v7 > 3)
    LODWORD(v7) = 4;
  return ((uint64_t (*)(void))((char *)&loc_19E3492C4 + 4 * byte_19E382B80[(v7 - 1)]))();
}

void sub_19E349314(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  BOOL v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = a3 >= v7;
  v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      v13 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v13))
      {
        v11 = 4u;
      }
      else if (v13 >= 0x100)
      {
        v11 = 2;
      }
      else
      {
        v11 = v13 > 1;
      }
    }
    else
    {
      v11 = 1u;
    }
  }
  else
  {
    v11 = 0u;
  }
  if (v7 < a2)
  {
    v12 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v14 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v14;
          *((_BYTE *)a1 + 2) = BYTE2(v14);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v14;
        }
        else
        {
          *(_BYTE *)a1 = v14;
        }
      }
    }
    else
    {
      bzero(a1, *(_QWORD *)(v6 + 64));
      *(_DWORD *)a1 = v12;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

uint64_t type metadata accessor for MainThreadOnly(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_19E329228(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for MainThreadOnly);
}

uint64_t sub_19E3494D0(uint64_t a1)
{
  unint64_t *v1;
  unint64_t v2;
  unint64_t v3;
  int64_t v4;
  int64_t v5;
  int isUniquelyReferenced_nonNull_native;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  int64_t v24;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
    goto LABEL_21;
  }
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && v5 <= *(_QWORD *)(v3 + 24) >> 1)
  {
    v8 = *(_QWORD *)(a1 + 16);
    if (v8)
      goto LABEL_5;
LABEL_18:
    if (!v2)
      goto LABEL_19;
    goto LABEL_21;
  }
  if (v4 <= v5)
    v24 = v4 + v2;
  else
    v24 = v4;
  v3 = sub_19E36A4D4(isUniquelyReferenced_nonNull_native, v24, 1, v3);
  v8 = *(_QWORD *)(a1 + 16);
  if (!v8)
    goto LABEL_18;
LABEL_5:
  v9 = *(_QWORD *)(v3 + 16);
  v10 = (*(_QWORD *)(v3 + 24) >> 1) - v9;
  v11 = sub_19E36F4F8();
  if (v10 < (uint64_t)v8)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v12 = *(_QWORD *)(v11 - 8);
  v13 = (*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  v14 = *(_QWORD *)(v12 + 72);
  v15 = v3 + v13 + v14 * v9;
  v16 = a1 + v13;
  v17 = v14 * v8;
  v18 = v15 + v17;
  v19 = v16 + v17;
  if (v16 < v18 && v15 < v19)
    goto LABEL_24;
  swift_arrayInitWithCopy();
  if (v8 < v2)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  v21 = *(_QWORD *)(v3 + 16);
  v22 = __OFADD__(v21, v8);
  v23 = v21 + v8;
  if (!v22)
  {
    *(_QWORD *)(v3 + 16) = v23;
LABEL_19:
    result = swift_bridgeObjectRelease();
    *v1 = v3;
    return result;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  result = sub_19E36FD2C();
  __break(1u);
  return result;
}

uint64_t sub_19E349644(unint64_t a1)
{
  unint64_t *v1;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;

  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    v3 = sub_19E36FCFC();
    swift_bridgeObjectRelease();
  }
  else
  {
    v3 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v4 = *v1;
  if (*v1 >> 62)
  {
    swift_bridgeObjectRetain();
    v5 = sub_19E36FCFC();
    swift_bridgeObjectRelease();
    v6 = v5 + v3;
    if (!__OFADD__(v5, v3))
      goto LABEL_5;
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v5 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
  v6 = v5 + v3;
  if (__OFADD__(v5, v3))
    goto LABEL_23;
LABEL_5:
  v4 = *v1;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *v1 = v4;
  v5 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v4 & 0x8000000000000000) == 0 && (v4 & 0x4000000000000000) == 0)
  {
    v8 = v4 & 0xFFFFFFFFFFFFFF8;
    if (v6 <= *(_QWORD *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      goto LABEL_15;
    v5 = 1;
  }
  if (v4 >> 62)
    goto LABEL_25;
  v9 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    if (v9 <= v6)
      v9 = v6;
    swift_bridgeObjectRetain();
    v4 = MEMORY[0x1A1AE7374](v5, v9, 1, v4);
    swift_bridgeObjectRelease();
    *v1 = v4;
    v8 = v4 & 0xFFFFFFFFFFFFFF8;
LABEL_15:
    result = sub_19E34AE08(v8 + 8 * *(_QWORD *)(v8 + 16) + 32, (*(_QWORD *)(v8 + 24) >> 1) - *(_QWORD *)(v8 + 16), a1);
    if (v11 >= v3)
      break;
LABEL_24:
    __break(1u);
LABEL_25:
    swift_bridgeObjectRetain();
    v9 = sub_19E36FCFC();
    swift_bridgeObjectRelease();
  }
  if (v11 < 1)
    goto LABEL_19;
  v12 = *(_QWORD *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  v13 = __OFADD__(v12, v11);
  v14 = v12 + v11;
  if (!v13)
  {
    *(_QWORD *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10) = v14;
LABEL_19:
    swift_bridgeObjectRelease();
    return sub_19E36F978();
  }
  __break(1u);
  return result;
}

void __swiftcall IMChipList.init(dictionary:)(IMChipList_optional *__return_ptr retstr, Swift::OpaquePointer dictionary)
{
  id v2;
  void *v3;

  v2 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  v3 = (void *)sub_19E36F81C();
  swift_bridgeObjectRelease();
  objc_msgSend(v2, sel_initWithDictionary_, v3);

}

id IMChipList.init(dictionary:)(uint64_t a1)
{
  void *v1;
  void *v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  id v12;
  void *v14;
  void *v15;
  id v16;
  void *v17;
  __int128 v18;
  __int128 v19;

  v2 = v1;
  v4 = sub_19E36F888();
  if (!*(_QWORD *)(a1 + 16) || (v6 = sub_19E3247E4(v4, v5), (v7 & 1) == 0))
  {
    v18 = 0u;
    v19 = 0u;
    swift_bridgeObjectRelease();
    goto LABEL_9;
  }
  sub_19E324848(*(_QWORD *)(a1 + 56) + 32 * v6, (uint64_t)&v18);
  swift_bridgeObjectRelease();
  if (!*((_QWORD *)&v19 + 1))
  {
LABEL_9:
    swift_bridgeObjectRelease();
    sub_19E322284((uint64_t)&v18);
LABEL_10:
    swift_getObjectType();
    swift_deallocPartialClassInstance();
    return 0;
  }
  sub_19E247E74(&qword_1EE5019D0);
  if ((swift_dynamicCast() & 1) == 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_10;
  }
  v8 = sub_19E36F888();
  if (*(_QWORD *)(a1 + 16) && (v10 = sub_19E3247E4(v8, v9), (v11 & 1) != 0))
  {
    sub_19E324848(*(_QWORD *)(a1 + 56) + 32 * v10, (uint64_t)&v18);
  }
  else
  {
    v18 = 0u;
    v19 = 0u;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!*((_QWORD *)&v19 + 1))
  {
    sub_19E322284((uint64_t)&v18);
    goto LABEL_18;
  }
  sub_19E24B854(0, (unint64_t *)&qword_1ECFC6A00);
  if (!swift_dynamicCast())
  {
LABEL_18:
    v14 = 0;
    goto LABEL_19;
  }
  v14 = v17;
LABEL_19:
  sub_19E247E74(&qword_1EE503490);
  v15 = (void *)sub_19E36F954();
  swift_bridgeObjectRelease();
  if (v14)
    v16 = objc_msgSend(v14, sel_BOOLValue);
  else
    v16 = 0;
  v12 = objc_msgSend(v2, sel_initWithChipArray_replied_, v15, v16);

  if (v12)
  return v12;
}

id sub_19E349CC0(uint64_t a1, char a2)
{
  void *v2;
  void *v3;
  char v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t i;
  id v8;
  void *v9;
  id v10;
  void *v11;
  id v12;
  uint64_t v13;
  unint64_t v16;

  v3 = v2;
  v4 = a2;
  v5 = MEMORY[0x1E0DEE9D8];
  v16 = MEMORY[0x1E0DEE9D8];
  v6 = *(_QWORD *)(a1 + 16);
  if (v6)
  {
    swift_bridgeObjectRetain();
    for (i = 0; i != v6; ++i)
    {
      v8 = objc_allocWithZone((Class)IMChip);
      swift_bridgeObjectRetain();
      v9 = (void *)sub_19E36F81C();
      swift_bridgeObjectRelease();
      v10 = objc_msgSend(v8, sel_initWithDictionary_, v9);

      if (v10)
      {
        MEMORY[0x1A1AE7014]();
        if (*(_QWORD *)((v16 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v16 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
          sub_19E36F984();
        sub_19E36F99C();
        sub_19E36F978();
      }
    }
    swift_bridgeObjectRelease();
    v5 = v16;
    v4 = a2;
  }
  swift_bridgeObjectRelease();
  if (v5 >> 62)
  {
    swift_bridgeObjectRetain();
    v13 = sub_19E36FCFC();
    swift_bridgeObjectRelease();
    if (v13)
      goto LABEL_11;
LABEL_13:
    swift_bridgeObjectRelease();
    swift_getObjectType();
    swift_deallocPartialClassInstance();
    return 0;
  }
  if (!*(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10))
    goto LABEL_13;
LABEL_11:
  type metadata accessor for IMChip();
  v11 = (void *)sub_19E36F954();
  swift_bridgeObjectRelease();
  v12 = objc_msgSend(v3, sel_initWithChipList_replied_, v11, v4 & 1);

  return v12;
}

unint64_t sub_19E349F24()
{
  void *v0;
  void *v1;
  uint64_t inited;
  uint64_t v3;
  id v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t result;
  uint64_t v8;
  _QWORD *v9;
  id v10;
  void *v11;
  id v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  _QWORD *v19;

  v1 = v0;
  sub_19E247E74(&qword_1EE5019B8);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_19E381B30;
  *(_QWORD *)(inited + 32) = sub_19E36F888();
  *(_QWORD *)(inited + 40) = v3;
  v4 = objc_msgSend(v0, sel_chipList);
  type metadata accessor for IMChip();
  v5 = sub_19E36F960();

  if (!(v5 >> 62))
  {
    v6 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain();
    v18 = v1;
    v19 = (_QWORD *)inited;
    if (v6)
      goto LABEL_3;
LABEL_15:
    v9 = (_QWORD *)MEMORY[0x1E0DEE9D8];
LABEL_16:
    swift_bridgeObjectRelease_n();
    v19[9] = sub_19E247E74(&qword_1EE5019D0);
    v19[6] = v9;
    v19[10] = sub_19E36F888();
    v19[11] = v16;
    objc_msgSend(v18, sel_replied);
    v17 = sub_19E36F9B4();
    v19[15] = sub_19E24B854(0, (unint64_t *)&qword_1ECFC6A00);
    v19[12] = v17;
    return sub_19E32D864((uint64_t)v19);
  }
  swift_bridgeObjectRetain();
  result = sub_19E36FCFC();
  v6 = result;
  v18 = v1;
  v19 = (_QWORD *)inited;
  if (!result)
    goto LABEL_15;
LABEL_3:
  if (v6 >= 1)
  {
    v8 = 0;
    v9 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    do
    {
      if ((v5 & 0xC000000000000001) != 0)
        v10 = (id)MEMORY[0x1A1AE7368](v8, v5);
      else
        v10 = *(id *)(v5 + 8 * v8 + 32);
      v11 = v10;
      v12 = objc_msgSend(v10, sel_dictionaryRepresentation, v18);
      v13 = sub_19E36F828();

      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v9 = sub_19E36A3B4(0, v9[2] + 1, 1, v9);
      v15 = v9[2];
      v14 = v9[3];
      if (v15 >= v14 >> 1)
        v9 = sub_19E36A3B4((_QWORD *)(v14 > 1), v15 + 1, 1, v9);
      ++v8;
      v9[2] = v15 + 1;
      v9[v15 + 4] = v13;
    }
    while (v6 != v8);
    goto LABEL_16;
  }
  __break(1u);
  return result;
}

uint64_t sub_19E34A218()
{
  void *v0;
  id v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t i;
  id v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = objc_msgSend(v0, sel_chipList);
  type metadata accessor for IMChip();
  v2 = sub_19E36F960();

  v10 = MEMORY[0x1E0DEE9D8];
  if (!(v2 >> 62))
  {
    v3 = *(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain();
    if (v3)
      goto LABEL_3;
LABEL_18:
    swift_bridgeObjectRelease();
    v9 = MEMORY[0x1E0DEE9D8];
LABEL_19:
    swift_bridgeObjectRelease();
    return v9;
  }
  swift_bridgeObjectRetain();
  result = sub_19E36FCFC();
  v3 = result;
  if (!result)
    goto LABEL_18;
LABEL_3:
  if (v3 >= 1)
  {
    for (i = 0; i != v3; ++i)
    {
      if ((v2 & 0xC000000000000001) != 0)
        v6 = (id)MEMORY[0x1A1AE7368](i, v2);
      else
        v6 = *(id *)(v2 + 8 * i + 32);
      v7 = v6;
      if (objc_msgSend(v6, sel_chip))
      {
        objc_opt_self();
        v8 = swift_dynamicCastObjCClass();

        if (v8)
        {
          MEMORY[0x1A1AE7014]();
          if (*(_QWORD *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
            sub_19E36F984();
          sub_19E36F99C();
          sub_19E36F978();
        }
        else
        {
          swift_unknownObjectRelease();
        }
      }
      else
      {

      }
    }
    swift_bridgeObjectRelease();
    v9 = v10;
    goto LABEL_19;
  }
  __break(1u);
  return result;
}

id sub_19E34A408(void *a1, uint64_t a2, uint64_t a3, void (*a4)(_QWORD))
{
  id v5;
  void *v6;

  v5 = a1;
  sub_19E34A218();

  a4(0);
  v6 = (void *)sub_19E36F954();
  swift_bridgeObjectRelease();
  return v6;
}

uint64_t IMChipList.isEqual(_:)(uint64_t a1)
{
  void *v1;
  uint64_t v2;
  id v3;
  unint64_t v4;
  id v5;
  unint64_t v6;
  unsigned __int8 v7;
  void *v9;
  _BYTE v10[24];
  uint64_t v11;

  v2 = sub_19E323318(a1, (uint64_t)v10);
  if (!v11)
  {
    sub_19E322284((uint64_t)v10);
    goto LABEL_5;
  }
  type metadata accessor for IMChipList(v2);
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_5:
    v7 = 0;
    return v7 & 1;
  }
  v3 = objc_msgSend(v1, sel_chipList);
  type metadata accessor for IMChip();
  v4 = sub_19E36F960();

  v5 = objc_msgSend(v9, sel_chipList);
  v6 = sub_19E36F960();

  v7 = sub_19E34A58C(v4, v6, (uint64_t (*)(_QWORD))type metadata accessor for IMChip);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

id sub_19E34A580(unint64_t a1, unint64_t a2)
{
  return sub_19E34A58C(a1, a2, type metadata accessor for IMRichCard);
}

id sub_19E34A58C(unint64_t a1, unint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id result;
  void *v14;
  id v15;
  void *v16;
  char v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  id v21;
  void *v22;
  id v23;
  void *v24;
  unint64_t v26;
  unint64_t v27;
  void **v28;
  void *v29;
  void *v30;
  void *v31;
  uint64_t v32;
  unint64_t v33;

  v4 = a2;
  v5 = a1;
  v6 = a1 >> 62;
  if (!(a1 >> 62))
  {
    v7 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    v8 = a2 >> 62;
    if (!(a2 >> 62))
      goto LABEL_3;
LABEL_47:
    swift_bridgeObjectRetain();
    v32 = sub_19E36FCFC();
    swift_bridgeObjectRelease();
    if (v7 == v32)
      goto LABEL_4;
LABEL_48:
    LOBYTE(v7) = 0;
    return (id)(v7 & 1);
  }
  swift_bridgeObjectRetain();
  v7 = sub_19E36FCFC();
  swift_bridgeObjectRelease();
  v8 = (unint64_t)v4 >> 62;
  if ((unint64_t)v4 >> 62)
    goto LABEL_47;
LABEL_3:
  if (v7 != *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10))
    goto LABEL_48;
LABEL_4:
  if (!v7)
    goto LABEL_37;
  v9 = v5 & 0xFFFFFFFFFFFFFF8;
  if (v5 < 0)
    v9 = v5;
  if (!v6)
    v9 = (v5 & 0xFFFFFFFFFFFFFF8) + 32;
  v10 = v4 & 0xFFFFFFFFFFFFFF8;
  v11 = (v4 & 0xFFFFFFFFFFFFFF8) + 32;
  if (v4 < 0)
    v12 = v4;
  else
    v12 = v4 & 0xFFFFFFFFFFFFFF8;
  if (v8)
    v11 = v12;
  if (v9 == v11)
  {
LABEL_37:
    LOBYTE(v7) = 1;
    return (id)(v7 & 1);
  }
  if ((v7 & 0x8000000000000000) != 0)
    goto LABEL_54;
  v33 = v5 & 0xC000000000000001;
  if ((v5 & 0xC000000000000001) != 0)
    goto LABEL_55;
  for (result = *(id *)(v5 + 32); ; result = (id)MEMORY[0x1A1AE7368](0, v5))
  {
    v14 = result;
    if ((v4 & 0xC000000000000001) == 0)
      break;
    v15 = (id)MEMORY[0x1A1AE7368](0, v4);
LABEL_21:
    v16 = v15;
    a3 = (uint64_t (*)(_QWORD))a3(0);
    v17 = sub_19E36FBB8();

    if ((v17 & 1) == 0)
      goto LABEL_48;
    v18 = v7 - 1;
    if (v7 == 1)
      return (id)(v7 & 1);
    if (((v4 | v5) & 0xC000000000000001) != 0)
    {
      v19 = 0;
      v20 = v7 - 2;
      while (v18 != v19)
      {
        v7 = v19 + 1;
        if (v33)
          v21 = (id)MEMORY[0x1A1AE7368](v19 + 1, v5);
        else
          v21 = *(id *)(v5 + 40 + 8 * v19);
        v22 = v21;
        if ((v4 & 0xC000000000000001) != 0)
        {
          v23 = (id)MEMORY[0x1A1AE7368](v19 + 1, v4);
        }
        else
        {
          if (v7 >= *(_QWORD *)(v10 + 16))
            goto LABEL_53;
          v23 = *(id *)(v4 + 40 + 8 * v19);
        }
        v24 = v23;
        v7 = sub_19E36FBB8();

        if ((v7 & 1) != 0 && v20 != v19++)
          continue;
        return (id)(v7 & 1);
      }
      __break(1u);
    }
    else
    {
      v26 = *(_QWORD *)(v10 + 16);
      if (v26 <= 1)
        v26 = 1;
      v27 = v26 - 1;
      v28 = (void **)(v5 + 40);
      v10 = v4 + 40;
      while (v18)
      {
        if (!v27)
          goto LABEL_52;
        v30 = *v28++;
        v29 = v30;
        v31 = *(void **)v10;
        v10 += 8;
        v4 = v29;
        v5 = v31;
        v7 = sub_19E36FBB8();

        if ((v7 & 1) != 0)
        {
          --v27;
          if (--v18)
            continue;
        }
        return (id)(v7 & 1);
      }
    }
    __break(1u);
LABEL_52:
    __break(1u);
LABEL_53:
    __break(1u);
LABEL_54:
    __break(1u);
LABEL_55:
    ;
  }
  if (*(_QWORD *)(v10 + 16))
  {
    v15 = *(id *)(v4 + 32);
    goto LABEL_21;
  }
  __break(1u);
  return result;
}

id sub_19E34A8E8()
{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  id v6;
  id v7;
  id v8;
  id v9;
  uint64_t v10;
  void *v11;
  id v12;
  uint64_t v14;

  v1 = v0;
  v2 = sub_19E247E74(&qword_1EE502E00);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)&v14 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_19E36F630();
  v5 = sub_19E36F63C();
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v4, 0, 1, v5);
  v6 = objc_allocWithZone((Class)IMMessageItem);
  v7 = sub_19E34ABFC(0, 0, (uint64_t)v4, 0, 0, MEMORY[0x1E0DEE9D8], 0, 0, 0, 0, 0, 0);
  v8 = objc_msgSend(objc_allocWithZone((Class)IMToSuperParserContext), sel_init);
  objc_msgSend(v8, sel_reset);
  v9 = objc_msgSend(v1, sel_dictionaryRepresentation);
  v10 = sub_19E36F828();

  sub_19E365AB4(v10);
  swift_bridgeObjectRelease();
  v11 = (void *)sub_19E36F81C();
  swift_bridgeObjectRelease();
  objc_msgSend(v8, sel_appendChipList_, v11);

  objc_msgSend(v7, sel_setFlags_, (unint64_t)objc_msgSend(v7, sel_flags) | 1);
  v12 = objc_msgSend(v8, sel_body);
  objc_msgSend(v7, sel_setBody_, v12);

  return v7;
}

void __swiftcall IMChipList.init()(IMChipList *__return_ptr retstr)
{
  objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_init);
}

void IMChipList.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id sub_19E34ABFC(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  void *v12;
  void *v13;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  void *v23;
  void *v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  void *v28;
  void *v29;
  id v30;

  v13 = v12;
  if (a2)
  {
    v19 = (void *)sub_19E36F864();
    swift_bridgeObjectRelease();
  }
  else
  {
    v19 = 0;
  }
  v20 = sub_19E36F63C();
  v21 = *(_QWORD *)(v20 - 8);
  v22 = 0;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v21 + 48))(a3, 1, v20) != 1)
  {
    v22 = (void *)sub_19E36F624();
    (*(void (**)(uint64_t, uint64_t))(v21 + 8))(a3, v20);
  }
  if (a5)
  {
    v23 = (void *)sub_19E36F81C();
    swift_bridgeObjectRelease();
    if (a6)
      goto LABEL_8;
  }
  else
  {
    v23 = 0;
    if (a6)
    {
LABEL_8:
      v24 = (void *)sub_19E36F954();
      swift_bridgeObjectRelease();
      v25 = a10;
      if (a8)
        goto LABEL_9;
      goto LABEL_14;
    }
  }
  v24 = 0;
  v25 = a10;
  if (a8)
  {
LABEL_9:
    v26 = (void *)sub_19E36F570();

    v27 = a12;
    if (v25)
      goto LABEL_10;
LABEL_15:
    v28 = 0;
    if (v27)
      goto LABEL_11;
LABEL_16:
    v29 = 0;
    goto LABEL_17;
  }
LABEL_14:
  v26 = 0;
  v27 = a12;
  if (!v25)
    goto LABEL_15;
LABEL_10:
  v28 = (void *)sub_19E36F864();
  swift_bridgeObjectRelease();
  if (!v27)
    goto LABEL_16;
LABEL_11:
  v29 = (void *)sub_19E36F864();
  swift_bridgeObjectRelease();
LABEL_17:
  v30 = objc_msgSend(v13, sel_initWithSender_time_body_attributes_fileTransferGUIDs_flags_error_guid_threadIdentifier_, v19, v22, a4, v23, v24, a7, v26, v28, v29);

  return v30;
}

uint64_t type metadata accessor for IMChipList(uint64_t a1)
{
  return sub_19E24B854(a1, &qword_1EE503018);
}

uint64_t sub_19E34AE08(unint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t i;
  void (*v12)(_QWORD *);
  id *v13;
  id v14;
  uint64_t result;
  void (*v16[4])(id *);

  v6 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    v7 = sub_19E36FCFC();
    swift_bridgeObjectRelease();
    if (!v7)
      return a3;
  }
  else
  {
    v7 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v7)
      return a3;
  }
  if (!a1)
    goto LABEL_19;
  v8 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v6)
  {
    swift_bridgeObjectRetain();
    v10 = sub_19E36FCFC();
    swift_bridgeObjectRelease();
    if (v10 <= a2)
    {
      if (v7 >= 1)
      {
        sub_19E34B1F4();
        swift_bridgeObjectRetain();
        for (i = 0; i != v7; ++i)
        {
          sub_19E247E74(&qword_1EE503020);
          v12 = sub_19E34B000(v16, i, a3);
          v14 = *v13;
          ((void (*)(void (**)(id *), _QWORD))v12)(v16, 0);
          *(_QWORD *)(a1 + 8 * i) = v14;
        }
        swift_bridgeObjectRelease();
        return a3;
      }
      goto LABEL_18;
    }
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  v9 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    type metadata accessor for IMChip();
    swift_arrayInitWithCopy();
    return a3;
  }
LABEL_20:
  result = sub_19E36FD2C();
  __break(1u);
  return result;
}

void (*sub_19E34B000(void (**a1)(id *a1), unint64_t a2, uint64_t a3))(_QWORD *a1)
{
  void (*v6)(id *);

  v6 = (void (*)(id *))malloc(0x28uLL);
  *a1 = v6;
  *((_QWORD *)v6 + 4) = sub_19E34B054(v6, a2, a3);
  return sub_19E31DAAC;
}

void (*sub_19E34B054(void (*result)(id *a1), unint64_t a2, uint64_t a3))(id *a1)
{
  void (*v3)(id *);
  id v4;

  v3 = result;
  if ((a3 & 0xC000000000000001) != 0)
  {
    v4 = (id)MEMORY[0x1A1AE7368](a2, a3);
    goto LABEL_5;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10) > a2)
  {
    v4 = *(id *)(a3 + 8 * a2 + 32);
LABEL_5:
    *(_QWORD *)v3 = v4;
    return sub_19E34B0C0;
  }
  __break(1u);
  return result;
}

void sub_19E34B0C0(id *a1)
{

}

id _sSo10IMChipListC17IMSharedUtilitiesE5merge_4withABSgAF_AFtFZ_0(void *a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  id v6;
  id v7;
  unint64_t v8;
  id v9;
  void *v10;
  id v11;
  id v12;

  if (a1)
  {
    v3 = a1;
    if (a2)
    {
      v4 = a1;
      v5 = a2;
      v6 = objc_msgSend(v4, sel_chipList);
      type metadata accessor for IMChip();
      sub_19E36F960();

      v7 = objc_msgSend(v5, sel_chipList);
      v8 = sub_19E36F960();

      sub_19E349644(v8);
      v9 = objc_allocWithZone((Class)IMChipList);
      v10 = (void *)sub_19E36F954();
      swift_bridgeObjectRelease();
      v3 = objc_msgSend(v9, sel_initWithChipList_, v10);

    }
    else
    {
      v12 = a1;
    }
  }
  else
  {
    v11 = a2;
    return a2;
  }
  return v3;
}

unint64_t sub_19E34B1F4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EE503028;
  if (!qword_1EE503028)
  {
    v1 = sub_19E247E30(&qword_1EE503020);
    result = MEMORY[0x1A1AE8A18](MEMORY[0x1E0DEAF50], v1);
    atomic_store(result, (unint64_t *)&qword_1EE503028);
  }
  return result;
}

uint64_t IMEmojiTapback.associatedMessageEmoji.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR___IMEmojiTapback_emoji);
  swift_bridgeObjectRetain();
  return v1;
}

id IMEmojiTapback.counterpart.getter()
{
  void *v0;
  unsigned int v1;
  char **v2;

  v1 = objc_msgSend(v0, sel_isRemoved);
  v2 = &selRef_visibleTapbackCounterpart;
  if (!v1)
    v2 = &selRef_removedTapbackCounterpart;
  return objc_msgSend(v0, *v2);
}

id IMEmojiTapback.removedTapbackCounterpart.getter()
{
  void *v0;
  id v1;
  id v2;
  void *v3;

  if ((objc_msgSend(v0, sel_isRemoved) & 1) != 0)
    return v0;
  v2 = objc_allocWithZone((Class)IMEmojiTapback);
  swift_bridgeObjectRetain();
  v3 = (void *)sub_19E36F864();
  swift_bridgeObjectRelease();
  v1 = objc_msgSend(v2, sel_initWithEmoji_isRemoved_, v3, 1);

  return v1;
}

id IMEmojiTapback.visibleTapbackCounterpart.getter()
{
  void *v0;
  id v1;
  void *v2;
  id v3;

  if (!objc_msgSend(v0, sel_isRemoved))
    return v0;
  v1 = objc_allocWithZone((Class)IMEmojiTapback);
  swift_bridgeObjectRetain();
  v2 = (void *)sub_19E36F864();
  swift_bridgeObjectRelease();
  v3 = objc_msgSend(v1, sel_initWithEmoji_isRemoved_, v2, 0);

  return v3;
}

void __swiftcall IMEmojiTapback.init(emoji:isRemoved:)(IMEmojiTapback_optional *__return_ptr retstr, Swift::String emoji, Swift::Bool isRemoved)
{
  id v4;
  void *v5;

  v4 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  v5 = (void *)sub_19E36F864();
  swift_bridgeObjectRelease();
  objc_msgSend(v4, sel_initWithEmoji_isRemoved_, v5, isRemoved);

}

id IMEmojiTapback.init(emoji:isRemoved:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  objc_super v7;

  v4 = (_QWORD *)(v3 + OBJC_IVAR___IMEmojiTapback_emoji);
  *v4 = a1;
  v4[1] = a2;
  if ((a3 & 1) != 0)
    v5 = 3006;
  else
    v5 = 2006;
  v7.super_class = (Class)IMEmojiTapback;
  return objc_msgSendSuper2(&v7, sel_initWithAssociatedMessageType_, v5);
}

void __swiftcall IMEmojiTapback.init(coder:)(IMEmojiTapback_optional *__return_ptr retstr, NSCoder coder)
{
  objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_initWithCoder_, coder.super.isa);

}

id IMEmojiTapback.init(coder:)(void *a1)
{
  void *v1;
  char *v3;
  void *v4;
  id v5;
  uint64_t v6;
  char *v7;
  id v8;
  objc_super v10;
  uint64_t v11;
  uint64_t v12;
  _OWORD v13[2];
  _BYTE v14[24];
  uint64_t v15;

  v3 = v1;
  v4 = (void *)sub_19E36F864();
  v5 = objc_msgSend(a1, sel_decodeObjectForKey_, v4);

  if (v5)
  {
    sub_19E36FC0C();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v13, 0, sizeof(v13));
  }
  sub_19E32223C((uint64_t)v13, (uint64_t)v14);
  if (!v15)
  {

    sub_19E322284((uint64_t)v14);
LABEL_9:
    type metadata accessor for IMEmojiTapback();
    swift_deallocPartialClassInstance();
    return 0;
  }
  if ((swift_dynamicCast() & 1) == 0)
  {

    goto LABEL_9;
  }
  v6 = v12;
  v7 = &v3[OBJC_IVAR___IMEmojiTapback_emoji];
  *(_QWORD *)v7 = v11;
  *((_QWORD *)v7 + 1) = v6;

  v10.receiver = v3;
  v10.super_class = (Class)IMEmojiTapback;
  v8 = objc_msgSendSuper2(&v10, sel_initWithCoder_, a1);

  return v8;
}

unint64_t type metadata accessor for IMEmojiTapback()
{
  unint64_t result;

  result = qword_1EE503038;
  if (!qword_1EE503038)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, &qword_1EE503038);
  }
  return result;
}

void __swiftcall IMEmojiTapback.init(imRemoteObjectSerializedDictionary:)(IMEmojiTapback_optional *__return_ptr retstr, Swift::OpaquePointer_optional imRemoteObjectSerializedDictionary)
{
  void *v2;

  if (imRemoteObjectSerializedDictionary.value._rawValue)
  {
    v2 = (void *)sub_19E36F81C();
    swift_bridgeObjectRelease();
  }
  else
  {
    v2 = 0;
  }
  objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_initWithIMRemoteObjectSerializedDictionary_, v2);

}

id IMEmojiTapback.init(imRemoteObjectSerializedDictionary:)(uint64_t a1)
{
  void *v1;
  void *v2;
  char *v4;
  unint64_t v5;
  char v6;
  uint64_t v7;
  char *v8;
  void *v9;
  id v10;
  objc_super v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD v15[5];
  __int128 v16;
  __int128 v17;

  v2 = v1;
  if (!a1)
  {
    v16 = 0u;
    v17 = 0u;
LABEL_12:
    sub_19E322284((uint64_t)&v16);
LABEL_14:
    type metadata accessor for IMEmojiTapback();
    swift_deallocPartialClassInstance();
    return 0;
  }
  v13 = 0xD000000000000016;
  v14 = 0x800000019E39DDC0;
  v4 = v2;
  sub_19E36FC60();
  if (*(_QWORD *)(a1 + 16) && (v5 = sub_19E324940((uint64_t)v15), (v6 & 1) != 0))
  {
    sub_19E324848(*(_QWORD *)(a1 + 56) + 32 * v5, (uint64_t)&v16);
  }
  else
  {
    v16 = 0u;
    v17 = 0u;
  }
  sub_19E324CC4((uint64_t)v15);
  if (!*((_QWORD *)&v17 + 1))
  {
    swift_bridgeObjectRelease();

    goto LABEL_12;
  }
  if ((swift_dynamicCast() & 1) == 0)
  {
    swift_bridgeObjectRelease();

    goto LABEL_14;
  }
  v7 = v15[1];
  v8 = &v4[OBJC_IVAR___IMEmojiTapback_emoji];
  *(_QWORD *)v8 = v15[0];
  *((_QWORD *)v8 + 1) = v7;

  v9 = (void *)sub_19E36F81C();
  swift_bridgeObjectRelease();
  v12.receiver = v4;
  v12.super_class = (Class)IMEmojiTapback;
  v10 = objc_msgSendSuper2(&v12, sel_initWithIMRemoteObjectSerializedDictionary_, v9);

  if (v10)
  return v10;
}

id IMEmojiTapback.reactionString(with:)()
{
  void *v0;
  id v1;
  id v2;
  void *v3;
  id v4;

  v1 = objc_msgSend(v0, sel_associatedMessageEmoji);
  sub_19E36F888();

  v2 = objc_allocWithZone(MEMORY[0x1E0CB3498]);
  v3 = (void *)sub_19E36F864();
  swift_bridgeObjectRelease();
  v4 = objc_msgSend(v2, sel_initWithString_, v3);

  return v4;
}

uint64_t IMEmojiTapback.description.getter()
{
  void *v0;
  id v1;
  uint64_t v2;
  id v3;
  objc_super v5;

  v5.super_class = (Class)IMEmojiTapback;
  v1 = objc_msgSendSuper2(&v5, sel_description);
  v2 = sub_19E36F888();

  v3 = objc_msgSend(v0, sel_associatedMessageEmoji, 0x203A696A6F6D6520, 0xE800000000000000);
  sub_19E36F888();

  sub_19E36F8C4();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_19E36F8C4();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2;
}

BOOL static IMEmojiTapback.isValidAssociatedMessageType(_:)(uint64_t a1)
{
  return a1 == 2006 || a1 == 3006;
}

uint64_t IMEmojiTapback.isEqual(_:)(uint64_t a1)
{
  void *v1;
  void *v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  objc_super v14;
  void *v15;
  _BYTE v16[24];
  uint64_t v17;

  swift_getObjectType();
  sub_19E323318(a1, (uint64_t)v16);
  if (!v17)
  {
    sub_19E322284((uint64_t)v16);
    goto LABEL_9;
  }
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_9:
    v12 = 0;
    return v12 & 1;
  }
  v3 = v15;
  v14.receiver = v1;
  v14.super_class = (Class)IMEmojiTapback;
  if (!objc_msgSendSuper2(&v14, sel_isEqual_, v15))
  {

    goto LABEL_9;
  }
  v4 = objc_msgSend(v1, sel_associatedMessageEmoji);
  v5 = sub_19E36F888();
  v7 = v6;

  v8 = objc_msgSend(v3, sel_associatedMessageEmoji);
  v9 = sub_19E36F888();
  v11 = v10;

  if (v5 == v9 && v7 == v11)
    v12 = 1;
  else
    v12 = sub_19E36FE10();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  return v12 & 1;
}

id IMEmojiTapback.init(associatedMessageType:)(uint64_t a1)
{
  return objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_initWithAssociatedMessageType_, a1);
}

void IMEmojiTapback.init(associatedMessageType:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id _sSo14IMEmojiTapbackC17IMSharedUtilitiesE18actionStringFormat31withAdaptiveImageGlyphAvailableSo022IMTapbackSummaryActionfG0CSgSb_tF_0()
{
  void *v0;
  id v1;
  id v2;
  void *v3;
  id v4;

  v1 = objc_msgSend(v0, sel_associatedMessageType);
  if (v1 != (id)3006 && v1 != (id)2006)
    return 0;
  v2 = objc_allocWithZone((Class)IMTapbackSummaryActionStringFormat);
  v3 = (void *)sub_19E36F864();
  v4 = objc_msgSend(v2, sel_initWithActionStringFormat_requiresReactionReplacment_, v3, 1);

  return v4;
}

uint64_t sub_19E34C200()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 40) = v0;
  type metadata accessor for AsyncSerialQueue();
  *(_QWORD *)(v1 + 48) = swift_task_alloc();
  return swift_task_switch();
}

void sub_19E34C258()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  BOOL v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = *(_QWORD *)(v0 + 40);
  v2 = *(_QWORD *)(v1 + OBJC_IVAR____TtC17IMSharedUtilitiesP33_C20C688308560C840065F702ABA438D84Lane_scheduled);
  v3 = __OFSUB__(v2, 1);
  v4 = v2 - 1;
  if (v3)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v1 + OBJC_IVAR____TtC17IMSharedUtilitiesP33_C20C688308560C840065F702ABA438D84Lane_scheduled) = v4;
    if (v4 > 0)
      goto LABEL_3;
    v6 = *(_QWORD *)(v0 + 40);
    v5 = *(_QWORD *)(v0 + 48);
    sub_19E34D25C(v6 + OBJC_IVAR____TtC17IMSharedUtilitiesP33_C20C688308560C840065F702ABA438D84Lane_queue, v5);
    v7 = sub_19E247E74(&qword_1EE4FFA38);
    sub_19E36F9FC();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v5, v7);
    *(_BYTE *)(v6 + OBJC_IVAR____TtC17IMSharedUtilitiesP33_C20C688308560C840065F702ABA438D84Lane_closed) = 1;
    v8 = MEMORY[0x1A1AE8B50](v6 + 112);
    *(_QWORD *)(v0 + 56) = v8;
    if (v8)
    {
      swift_task_switch();
    }
    else
    {
LABEL_3:
      swift_task_dealloc();
      (*(void (**)(void))(v0 + 8))();
    }
  }
}

uint64_t sub_19E34C33C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = (uint64_t *)(*(_QWORD *)(v0 + 40)
                 + OBJC_IVAR____TtC17IMSharedUtilitiesP33_C20C688308560C840065F702ABA438D84Lane_key);
  v2 = *v1;
  v3 = v1[1];
  swift_beginAccess();
  swift_bridgeObjectRetain();
  sub_19E358E14(v2, v3);
  swift_endAccess();
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  swift_release();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_19E34C3F4(int *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t (*v6)(void);

  *(_QWORD *)(v3 + 16) = a3;
  v6 = (uint64_t (*)(void))((char *)a1 + *a1);
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 24) = v4;
  *v4 = v3;
  v4[1] = sub_19E34C450;
  return v6();
}

uint64_t sub_19E34C450()
{
  uint64_t *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v4;

  v1 = *v0;
  v4 = *v0;
  swift_task_dealloc();
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 32) = v2;
  *v2 = v4;
  v2[1] = sub_19E34C4B4;
  return sub_19E34C200();
}

uint64_t sub_19E34C4B4()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_19E34C4FC()
{
  uint64_t v0;

  sub_19E323244(v0 + 112);
  sub_19E34D2A0(v0 + OBJC_IVAR____TtC17IMSharedUtilitiesP33_C20C688308560C840065F702ABA438D84Lane_queue);
  swift_bridgeObjectRelease();
  swift_defaultActor_destroy();
  return swift_defaultActor_deallocate();
}

uint64_t AsyncMultiQueue.__allocating_init(priority:bufferingPolicy:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = swift_allocObject();
  swift_defaultActor_initialize();
  v5 = OBJC_IVAR____TtC17IMSharedUtilities15AsyncMultiQueue_lanes;
  *(_QWORD *)(v4 + v5) = sub_19E32DF30(MEMORY[0x1E0DEE9D8]);
  sub_19E34C674(a1, v4 + OBJC_IVAR____TtC17IMSharedUtilities15AsyncMultiQueue_priority);
  v6 = v4 + OBJC_IVAR____TtC17IMSharedUtilities15AsyncMultiQueue_bufferingPolicy;
  v7 = sub_19E247E74(&qword_1EE4FFA30);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v6, a2, v7);
  return v4;
}

uint64_t AsyncMultiQueue.init(priority:bufferingPolicy:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  swift_defaultActor_initialize();
  v5 = OBJC_IVAR____TtC17IMSharedUtilities15AsyncMultiQueue_lanes;
  *(_QWORD *)(v2 + v5) = sub_19E32DF30(MEMORY[0x1E0DEE9D8]);
  sub_19E34C674(a1, v2 + OBJC_IVAR____TtC17IMSharedUtilities15AsyncMultiQueue_priority);
  v6 = v2 + OBJC_IVAR____TtC17IMSharedUtilities15AsyncMultiQueue_bufferingPolicy;
  v7 = sub_19E247E74(&qword_1EE4FFA30);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v6, a2, v7);
  return v2;
}

uint64_t sub_19E34C674(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_19E247E74(&qword_1ECFC6648);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_19E34C6BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  v5[10] = a4;
  v5[11] = v4;
  v5[8] = a2;
  v5[9] = a3;
  v5[7] = a1;
  v6 = sub_19E247E74(&qword_1EE4FFA28);
  v5[12] = v6;
  v5[13] = *(_QWORD *)(v6 - 8);
  v5[14] = swift_task_alloc();
  v7 = sub_19E247E74(&qword_1EE4FFA30);
  v5[15] = v7;
  v5[16] = *(_QWORD *)(v7 - 8);
  v5[17] = swift_task_alloc();
  sub_19E247E74(&qword_1ECFC6648);
  v5[18] = swift_task_alloc();
  type metadata accessor for AsyncSerialQueue();
  v5[19] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_19E34C798()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;

  v1 = (uint64_t *)(v0[11] + OBJC_IVAR____TtC17IMSharedUtilities15AsyncMultiQueue_lanes);
  swift_beginAccess();
  v2 = *v1;
  v3 = *(_QWORD *)(v2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v3 && (v4 = sub_19E3247E4(v0[7], v0[8]), (v5 & 1) != 0))
  {
    v6 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + 8 * v4);
    swift_retain();
  }
  else
  {
    v8 = v0[18];
    v7 = v0[19];
    v10 = v0[16];
    v9 = v0[17];
    v11 = v0[15];
    v12 = v0[11];
    v14 = v0[7];
    v13 = v0[8];
    sub_19E34CD00(v12 + OBJC_IVAR____TtC17IMSharedUtilities15AsyncMultiQueue_priority, v8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 16))(v9, v12 + OBJC_IVAR____TtC17IMSharedUtilities15AsyncMultiQueue_bufferingPolicy, v11);
    AsyncSerialQueue.init(priority:bufferingPolicy:)(v8, v9, v7);
    type metadata accessor for Lane(0);
    v6 = swift_allocObject();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_defaultActor_initialize();
    *(_QWORD *)(v6 + 120) = 0;
    swift_unknownObjectWeakInit();
    *(_QWORD *)(v6 + OBJC_IVAR____TtC17IMSharedUtilitiesP33_C20C688308560C840065F702ABA438D84Lane_scheduled) = 0;
    *(_BYTE *)(v6 + OBJC_IVAR____TtC17IMSharedUtilitiesP33_C20C688308560C840065F702ABA438D84Lane_closed) = 0;
    *(_QWORD *)(v6 + 120) = &off_1E3FB1C80;
    swift_unknownObjectWeakAssign();
    swift_release();
    sub_19E34CD5C(v7, v6 + OBJC_IVAR____TtC17IMSharedUtilitiesP33_C20C688308560C840065F702ABA438D84Lane_queue);
    v15 = (uint64_t *)(v6 + OBJC_IVAR____TtC17IMSharedUtilitiesP33_C20C688308560C840065F702ABA438D84Lane_key);
    *v15 = v14;
    v15[1] = v13;
  }
  v0[20] = v6;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_task_switch();
}

void sub_19E34C950()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  BOOL v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;

  v1 = *(_QWORD *)(v0 + 160);
  v2 = *(_QWORD *)(v1 + OBJC_IVAR____TtC17IMSharedUtilitiesP33_C20C688308560C840065F702ABA438D84Lane_scheduled);
  v3 = __OFADD__(v2, 1);
  v4 = v2 + 1;
  if (v3)
  {
    __break(1u);
  }
  else
  {
    v6 = *(_QWORD *)(v0 + 104);
    v5 = *(_QWORD *)(v0 + 112);
    v7 = *(_QWORD *)(v0 + 96);
    v8 = *(_QWORD *)(v0 + 72);
    v9 = *(_QWORD *)(v0 + 80);
    *(_QWORD *)(v1 + OBJC_IVAR____TtC17IMSharedUtilitiesP33_C20C688308560C840065F702ABA438D84Lane_scheduled) = v4;
    v10 = (_QWORD *)swift_allocObject();
    v10[2] = v8;
    v10[3] = v9;
    v10[4] = v1;
    v11 = swift_allocObject();
    *(_QWORD *)(v11 + 16) = &unk_1EE503070;
    *(_QWORD *)(v11 + 24) = v10;
    *(_QWORD *)(v0 + 40) = &unk_1EE501AB0;
    *(_QWORD *)(v0 + 48) = v11;
    swift_retain();
    swift_retain();
    swift_retain();
    sub_19E247E74(&qword_1EE4FFA38);
    sub_19E36F9F0();
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
    swift_release();
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    (*(void (**)(void))(v0 + 8))();
  }
}

uint64_t sub_19E34CAA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  _QWORD *v12;
  uint64_t v14;

  v9 = sub_19E247E74(&qword_1ECFC6648);
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)&v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_19E34CD00(v4 + OBJC_IVAR____TtC17IMSharedUtilities15AsyncMultiQueue_priority, (uint64_t)v11);
  v12 = (_QWORD *)swift_allocObject();
  v12[2] = 0;
  v12[3] = 0;
  v12[4] = v4;
  v12[5] = a1;
  v12[6] = a2;
  v12[7] = a3;
  v12[8] = a4;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  sub_19E344BE8((uint64_t)v11, (uint64_t)&unk_1EE503080, (uint64_t)v12);
  return swift_release();
}

uint64_t sub_19E34CB8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  _QWORD *v13;

  v13 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v8 + 16) = v13;
  *v13 = v8;
  v13[1] = sub_19E24C450;
  return sub_19E34C6BC(a5, a6, a7, a8);
}

uint64_t AsyncMultiQueue.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_19E3463B4(v0 + OBJC_IVAR____TtC17IMSharedUtilities15AsyncMultiQueue_priority);
  v1 = v0 + OBJC_IVAR____TtC17IMSharedUtilities15AsyncMultiQueue_bufferingPolicy;
  v2 = sub_19E247E74(&qword_1EE4FFA30);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  swift_bridgeObjectRelease();
  swift_defaultActor_destroy();
  return v0;
}

uint64_t AsyncMultiQueue.__deallocating_deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_19E3463B4(v0 + OBJC_IVAR____TtC17IMSharedUtilities15AsyncMultiQueue_priority);
  v1 = v0 + OBJC_IVAR____TtC17IMSharedUtilities15AsyncMultiQueue_bufferingPolicy;
  v2 = sub_19E247E74(&qword_1EE4FFA30);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  swift_bridgeObjectRelease();
  swift_defaultActor_destroy();
  return swift_defaultActor_deallocate();
}

uint64_t AsyncMultiQueue.unownedExecutor.getter()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_19E34CCF4()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_19E34CD00(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_19E247E74(&qword_1ECFC6648);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for Lane(uint64_t a1)
{
  return sub_19E34D020(a1, (uint64_t *)&unk_1EE503088);
}

uint64_t sub_19E34CD5C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for AsyncSerialQueue();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_19E34CDA0()
{
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_19E34CDCC()
{
  uint64_t v0;
  uint64_t v1;
  int *v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t (*v7)(void);

  v2 = *(int **)(v0 + 16);
  v3 = *(_QWORD *)(v0 + 32);
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v4;
  *v4 = v1;
  v4[1] = sub_19E24C450;
  v4[2] = v3;
  v7 = (uint64_t (*)(void))((char *)v2 + *v2);
  v5 = (_QWORD *)swift_task_alloc();
  v4[3] = v5;
  *v5 = v4;
  v5[1] = sub_19E34C450;
  return v7();
}

uint64_t sub_19E34CE58()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_19E34CE7C()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_19E34CEB8()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;

  v2 = v0[5];
  v3 = v0[6];
  v4 = v0[7];
  v5 = v0[8];
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v6;
  *v6 = v1;
  v6[1] = sub_19E24C768;
  v7 = (_QWORD *)swift_task_alloc();
  v6[2] = v7;
  *v7 = v6;
  v7[1] = sub_19E24C450;
  return sub_19E34C6BC(v2, v3, v4, v5);
}

uint64_t sub_19E34CF4C()
{
  return type metadata accessor for Lane(0);
}

void sub_19E34CF54()
{
  unint64_t v0;

  sub_19E34D200(319, (unint64_t *)&qword_1EE4FFA40, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DF07E8]);
  if (v0 <= 0x3F)
    swift_updateClassMetadata2();
}

uint64_t sub_19E34D004()
{
  return type metadata accessor for AsyncMultiQueue(0);
}

uint64_t type metadata accessor for AsyncMultiQueue(uint64_t a1)
{
  return sub_19E34D020(a1, qword_1EE4FFA80);
}

uint64_t sub_19E34D020(uint64_t a1, uint64_t *a2)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
    return swift_getSingletonMetadata();
  return result;
}

void sub_19E34D054()
{
  unint64_t v0;
  unint64_t v1;

  sub_19E34D1AC();
  if (v0 <= 0x3F)
  {
    sub_19E34D200(319, qword_1EE4FFB98, MEMORY[0x1E0DF07C0]);
    if (v1 <= 0x3F)
      swift_updateClassMetadata2();
  }
}

uint64_t method lookup function for AsyncMultiQueue()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of AsyncMultiQueue.__allocating_init(priority:bufferingPolicy:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 136))();
}

uint64_t dispatch thunk of AsyncMultiQueue.perform(key:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v10;
  uint64_t (*v12)(uint64_t, uint64_t, uint64_t, uint64_t);

  v12 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(**(int **)(*(_QWORD *)v4 + 152)
                                                                   + *(_QWORD *)(*(_QWORD *)v4 + 152));
  v10 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v5 + 16) = v10;
  *v10 = v5;
  v10[1] = sub_19E24C450;
  return v12(a1, a2, a3, a4);
}

uint64_t dispatch thunk of AsyncMultiQueue.perform(key:_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 160))();
}

void sub_19E34D1AC()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EE4FFB90)
  {
    sub_19E36F9E4();
    v0 = sub_19E36FBC4();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EE4FFB90);
  }
}

void sub_19E34D200(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t))
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    v6 = sub_19E247E30(&qword_1EE4FFA60);
    v7 = a3(a1, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

uint64_t sub_19E34D25C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for AsyncSerialQueue();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_19E34D2A0(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for AsyncSerialQueue();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_19E34D2E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void (*v5)(uint64_t, uint64_t);

  v5 = *(void (**)(uint64_t, uint64_t))(a1 + 32);
  swift_retain();
  v5(a2, a3);
  return swift_release();
}

uint64_t sub_19E34D328()
{
  uint64_t v0;

  v0 = sub_19E36F798();
  sub_19E3222DC(v0, qword_1EE5030B0);
  sub_19E3222C4(v0, (uint64_t)qword_1EE5030B0);
  return sub_19E36F78C();
}

uint64_t sub_19E34D3A4(char a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  os_unfair_lock_s *v9;

  v3 = v2;
  v6 = swift_allocObject();
  *(_BYTE *)(v6 + 16) = 0;
  v7 = swift_allocObject();
  *(_BYTE *)(v7 + 16) = 0;
  v8 = *(_QWORD *)(v3 + OBJC_IVAR___IMUnlockMonitor_state);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v8 + 20));
  sub_19E34D8D4((_BYTE *)(v8 + 16), a2, v3, (_BYTE *)(v6 + 16), a1, (_BYTE *)(v7 + 16));
  os_unfair_lock_unlock((os_unfair_lock_t)(v8 + 20));
  swift_release();
  v9 = *(os_unfair_lock_s **)(v3 + OBJC_IVAR___IMUnlockMonitor_listeners);
  swift_retain();
  os_unfair_lock_lock(v9 + 6);
  sub_19E34DA48((uint64_t)&v9[4], v6, v7);
  os_unfair_lock_unlock(v9 + 6);
  swift_release();
  swift_release();
  return swift_release();
}

BOOL sub_19E34D50C()
{
  uint64_t v0;
  os_unfair_lock_s *v1;
  char v2;

  v1 = *(os_unfair_lock_s **)(v0 + OBJC_IVAR___IMUnlockMonitor_state);
  swift_getKeyPath();
  swift_retain();
  swift_retain();
  os_unfair_lock_lock(v1 + 5);
  v2 = sub_19E34D7DC();
  os_unfair_lock_unlock(v1 + 5);
  swift_release();
  swift_release_n();
  return (v2 & 1) == 0;
}

uint64_t sub_19E34D5BC()
{
  uint64_t v0;
  os_unfair_lock_s *v1;
  char v2;

  v1 = *(os_unfair_lock_s **)(v0 + OBJC_IVAR___IMUnlockMonitor_state);
  swift_getKeyPath();
  swift_retain();
  swift_retain();
  os_unfair_lock_lock(v1 + 5);
  v2 = sub_19E34D7DC();
  os_unfair_lock_unlock(v1 + 5);
  swift_release();
  swift_release_n();
  return v2 & 1;
}

uint64_t sub_19E34D698(uint64_t result, SEL *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  if (result)
  {
    v4 = result;
    v5 = *(_QWORD *)(v2 + OBJC_IVAR___IMUnlockMonitor_listeners);
    swift_unknownObjectRetain();
    swift_retain();
    os_unfair_lock_lock((os_unfair_lock_t)(v5 + 24));
    objc_msgSend(*(id *)(v5 + 16), *a2, v4);
    os_unfair_lock_unlock((os_unfair_lock_t)(v5 + 24));
    swift_release();
    return swift_unknownObjectRelease();
  }
  return result;
}

void sub_19E34D72C(void *a1, uint64_t a2, uint64_t a3, SEL *a4)
{
  id v7;

  swift_unknownObjectRetain();
  v7 = a1;
  sub_19E34D698(a3, a4);
  swift_unknownObjectRelease();

}

uint64_t type metadata accessor for IMUnlockMonitor(uint64_t a1)
{
  return sub_19E24B854(a1, (unint64_t *)&unk_1EE503108);
}

uint64_t sub_19E34D7DC()
{
  unsigned __int8 v1;

  swift_getAtKeyPath();
  return v1;
}

uint64_t sub_19E34D820()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t sub_19E34D844(uint64_t a1, uint64_t a2)
{
  return sub_19E34D85C(a1, a2, 1);
}

uint64_t sub_19E34D84C()
{
  return swift_release();
}

uint64_t sub_19E34D854(uint64_t a1, uint64_t a2)
{
  return sub_19E34D85C(a1, a2, 0);
}

uint64_t sub_19E34D85C(uint64_t a1, uint64_t a2, char a3)
{
  int v4;
  BOOL v5;
  char v6;

  v4 = MKBGetDeviceLockState();
  if (v4)
    v5 = v4 == 3;
  else
    v5 = 1;
  v6 = !v5;
  return sub_19E34D3A4(v6, a3);
}

uint64_t sub_19E34D898(uint64_t a1, uint64_t a2)
{
  return sub_19E34D3A4(a2 == 1, 0);
}

uint64_t sub_19E34D8C4()
{
  return swift_deallocObject();
}

void sub_19E34D8D4(_BYTE *a1, char a2, uint64_t a3, _BYTE *a4, char a5, _BYTE *a6)
{
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  int v14;
  char v15;

  if ((a2 & 1) != 0
    || *(_BYTE *)(a3 + OBJC_IVAR___IMUnlockMonitor_initializedBeforeFirstUnlock) == 1
    && (a1[1] & 1) == 0
    && (int)MKBDeviceUnlockedSinceBoot() >= 1)
  {
    if (qword_1EE501588 != -1)
      swift_once();
    v10 = sub_19E36F798();
    sub_19E3222C4(v10, (uint64_t)qword_1EE5030B0);
    v11 = sub_19E36F780();
    v12 = sub_19E36FA80();
    if (os_log_type_enabled(v11, v12))
    {
      v13 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v13 = 0;
      _os_log_impl(&dword_19E239000, v11, v12, "We are now past first unlock!", v13, 2u);
      MEMORY[0x1A1AE8ACC](v13, -1, -1);
    }

    a1[1] = 1;
    *a4 = 1;
  }
  v14 = a1[2];
  a1[2] = a5 & 1;
  if (*a1 != 1)
  {
    v15 = a5 ^ 1;
    *a1 = (a5 ^ 1) & 1;
    if (v14)
      goto LABEL_15;
LABEL_14:
    v15 = 0;
    goto LABEL_15;
  }
  *a1 = 1;
  if (!v14)
    goto LABEL_14;
  v15 = a5 ^ 1;
LABEL_15:
  *a6 = v15 & 1;
}

id sub_19E34DA48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t *v8;
  char *v9;
  char *v10;
  uint64_t *v11;
  uint64_t v12;
  id result;
  void *v14;
  _QWORD *v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int128 aBlock;
  uint64_t (*v33)(uint64_t);
  void *v34;
  uint64_t (*v35)();
  _QWORD *v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;

  v30 = a2;
  v31 = a3;
  v26 = sub_19E36F7BC();
  v29 = *(_QWORD *)(v26 - 8);
  MEMORY[0x1E0C80A78]();
  v25 = (char *)&v19 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_19E36F7D4();
  v27 = *(_QWORD *)(v4 - 8);
  v28 = v4;
  MEMORY[0x1E0C80A78]();
  v24 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = sub_19E36F594();
  v20 = *(_QWORD *)(v21 - 8);
  MEMORY[0x1E0C80A78]();
  v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_19E36FB7C();
  sub_19E36F588();
  if (!v39)
    return (id)(*(uint64_t (**)(char *, uint64_t))(v20 + 8))(v7, v21);
  v8 = (uint64_t *)&unk_1EE5005B0;
  v22 = MEMORY[0x1E0DEE9B8] + 8;
  v23 = v7;
  v9 = v24;
  v10 = v25;
  while (1)
  {
    sub_19E24B594(&v38, &aBlock);
    sub_19E247E74(v8);
    if ((swift_dynamicCast() & 1) != 0)
      break;
LABEL_3:
    sub_19E36F588();
    if (!v39)
      return (id)(*(uint64_t (**)(char *, uint64_t))(v20 + 8))(v7, v21);
  }
  v11 = v8;
  v12 = v37;
  result = (id)im_primary_queue();
  if (result)
  {
    v14 = result;
    v15 = (_QWORD *)swift_allocObject();
    v16 = v31;
    v15[2] = v30;
    v15[3] = v12;
    v15[4] = v16;
    v35 = sub_19E34DE78;
    v36 = v15;
    *(_QWORD *)&aBlock = MEMORY[0x1E0C809B0];
    *((_QWORD *)&aBlock + 1) = 1107296256;
    v33 = sub_19E333388;
    v34 = &unk_1E3FBB318;
    v17 = _Block_copy(&aBlock);
    swift_retain();
    swift_unknownObjectRetain();
    swift_retain();
    sub_19E36F7C8();
    v37 = MEMORY[0x1E0DEE9D8];
    sub_19E24C518((unint64_t *)&qword_1ECFC69D8, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
    sub_19E247E74((uint64_t *)&unk_1ECFC69E0);
    sub_19E24C410((unint64_t *)&qword_1ECFC6A08, (uint64_t *)&unk_1ECFC69E0);
    v18 = v26;
    sub_19E36FC30();
    MEMORY[0x1A1AE71D0](0, v9, v10, v17);
    _Block_release(v17);
    swift_unknownObjectRelease();

    (*(void (**)(char *, uint64_t))(v29 + 8))(v10, v18);
    (*(void (**)(char *, uint64_t))(v27 + 8))(v9, v28);
    swift_release();
    v8 = v11;
    v7 = v23;
    goto LABEL_3;
  }
  __break(1u);
  return result;
}

uint64_t sub_19E34DD84(uint64_t a1, void *a2, uint64_t a3)
{
  _BYTE *v5;
  uint64_t result;

  v5 = (_BYTE *)(a3 + 16);
  swift_beginAccess();
  if (*(_BYTE *)(a1 + 16) == 1
    && (objc_msgSend(a2, sel_respondsToSelector_, sel_systemDidLeaveFirstDataProtectionLock) & 1) != 0)
  {
    objc_msgSend(a2, sel_systemDidLeaveFirstDataProtectionLock);
  }
  result = swift_beginAccess();
  if (*v5 == 1)
  {
    result = (uint64_t)objc_msgSend(a2, sel_respondsToSelector_, sel_systemDidUnlock);
    if ((result & 1) != 0)
      return (uint64_t)objc_msgSend(a2, sel_systemDidUnlock);
  }
  return result;
}

uint64_t sub_19E34DE44()
{
  swift_release();
  swift_unknownObjectRelease();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_19E34DE78()
{
  uint64_t v0;

  return sub_19E34DD84(*(_QWORD *)(v0 + 16), *(void **)(v0 + 24), *(_QWORD *)(v0 + 32));
}

uint64_t _s5StateVwCP(uint64_t result, __int16 *a2)
{
  __int16 v2;

  v2 = *a2;
  *(_BYTE *)(result + 2) = *((_BYTE *)a2 + 2);
  *(_WORD *)result = v2;
  return result;
}

uint64_t _s5StateVwet(unsigned __int16 *a1, unsigned int a2)
{
  int v2;
  unsigned int v4;
  BOOL v5;
  int v6;

  if (!a2)
    return 0;
  if (a2 >= 0xFF)
  {
    if ((a2 + 33554177) >> 24)
    {
      v2 = *((unsigned __int8 *)a1 + 3);
      if (*((_BYTE *)a1 + 3))
        return (*a1 | (*((unsigned __int8 *)a1 + 2) << 16) | (v2 << 24)) - 16776961;
    }
    else
    {
      v2 = *(unsigned __int16 *)((char *)a1 + 3);
      if (*(unsigned __int16 *)((char *)a1 + 3))
        return (*a1 | (*((unsigned __int8 *)a1 + 2) << 16) | (v2 << 24)) - 16776961;
    }
  }
  v4 = *(unsigned __int8 *)a1;
  v5 = v4 >= 2;
  v6 = (v4 + 2147483646) & 0x7FFFFFFF;
  if (!v5)
    v6 = -1;
  return (v6 + 1);
}

uint64_t _s5StateVwst(uint64_t result, unsigned int a2, unsigned int a3)
{
  int v3;
  unsigned int v4;

  if ((a3 + 33554177) >> 24)
    v3 = 1;
  else
    v3 = 2;
  if (a3 <= 0xFE)
    v3 = 0;
  if (a2 > 0xFE)
  {
    *(_WORD *)result = a2 - 255;
    *(_BYTE *)(result + 2) = (a2 - 255) >> 16;
    if (v3)
    {
      v4 = ((a2 - 255) >> 24) + 1;
      if (v3 == 2)
        *(_WORD *)(result + 3) = v4;
      else
        *(_BYTE *)(result + 3) = v4;
    }
  }
  else
  {
    if (!v3)
      goto LABEL_10;
    if (v3 == 2)
    {
      *(_WORD *)(result + 3) = 0;
LABEL_10:
      if (!a2)
        return result;
LABEL_16:
      *(_BYTE *)result = a2 + 1;
      return result;
    }
    *(_BYTE *)(result + 3) = 0;
    if (a2)
      goto LABEL_16;
  }
  return result;
}

void __swiftcall IMActionDialEnriched.init(dictionary:)(IMActionDialEnriched_optional *__return_ptr retstr, Swift::OpaquePointer dictionary)
{
  id v2;
  void *v3;

  v2 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  v3 = (void *)sub_19E36F81C();
  swift_bridgeObjectRelease();
  objc_msgSend(v2, sel_initWithDictionary_, v3);

}

id IMActionDialEnriched.init(dictionary:)(uint64_t a1)
{
  void *v1;
  void *v2;
  unint64_t v4;
  char v5;
  void *v6;
  unint64_t v7;
  char v8;
  void *v9;
  id v10;
  unint64_t v12;
  char v13;
  void *v14;
  __int128 v15;
  __int128 v16;

  v2 = v1;
  if (*(_QWORD *)(a1 + 16))
  {
    v4 = sub_19E3247E4(0x6D754E656E6F6870, 0xEB00000000726562);
    if ((v5 & 1) != 0)
    {
      sub_19E324848(*(_QWORD *)(a1 + 56) + 32 * v4, (uint64_t)&v15);
      if ((swift_dynamicCast() & 1) != 0)
      {
        v6 = (void *)sub_19E36F864();
        swift_bridgeObjectRelease();
        if (*(_QWORD *)(a1 + 16)
          && (v7 = sub_19E3247E4(0x6B6361626C6C6166, 0xEB000000006C7255), (v8 & 1) != 0)
          && (sub_19E324848(*(_QWORD *)(a1 + 56) + 32 * v7, (uint64_t)&v15), (swift_dynamicCast() & 1) != 0))
        {
          v9 = (void *)sub_19E36F864();
          swift_bridgeObjectRelease();
        }
        else
        {
          v9 = 0;
        }
        if (*(_QWORD *)(a1 + 16) && (v12 = sub_19E3247E4(0x7463656A627573, 0xE700000000000000), (v13 & 1) != 0))
        {
          sub_19E324848(*(_QWORD *)(a1 + 56) + 32 * v12, (uint64_t)&v15);
        }
        else
        {
          v15 = 0u;
          v16 = 0u;
        }
        swift_bridgeObjectRelease();
        if (*((_QWORD *)&v16 + 1))
        {
          if ((swift_dynamicCast() & 1) != 0)
          {
            v14 = (void *)sub_19E36F864();
            swift_bridgeObjectRelease();
LABEL_20:
            v10 = objc_msgSend(v2, sel_initWithPhoneNumber_fallbackUrl_subject_, v6, v9, v14);

            return v10;
          }
        }
        else
        {
          sub_19E322284((uint64_t)&v15);
        }
        v14 = 0;
        goto LABEL_20;
      }
    }
  }
  swift_bridgeObjectRelease();
  swift_getObjectType();
  swift_deallocPartialClassInstance();
  return 0;
}

uint64_t sub_19E34E3E4()
{
  void *v0;
  uint64_t inited;
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;

  sub_19E247E74((uint64_t *)&unk_1EE5019F8);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_19E381BB0;
  *(_QWORD *)(inited + 32) = 0x6D754E656E6F6870;
  *(_QWORD *)(inited + 40) = 0xEB00000000726562;
  v2 = objc_msgSend(v0, sel_phoneNumber);
  v3 = sub_19E36F888();
  v5 = v4;

  v6 = MEMORY[0x1E0DEA968];
  *(_QWORD *)(inited + 48) = v3;
  *(_QWORD *)(inited + 56) = v5;
  *(_QWORD *)(inited + 72) = v6;
  *(_QWORD *)(inited + 80) = 0x6B6361626C6C6166;
  *(_QWORD *)(inited + 88) = 0xEB000000006C7255;
  v7 = objc_msgSend(v0, sel_fallbackUrl);
  if (v7)
  {
    v8 = v7;
    v9 = sub_19E36F888();
    v11 = v10;

    v12 = MEMORY[0x1E0DEA968];
  }
  else
  {
    v9 = 0;
    v11 = 0;
    v12 = 0;
    *(_QWORD *)(inited + 112) = 0;
  }
  *(_QWORD *)(inited + 96) = v9;
  *(_QWORD *)(inited + 104) = v11;
  *(_QWORD *)(inited + 120) = v12;
  *(_QWORD *)(inited + 128) = 0x7463656A627573;
  *(_QWORD *)(inited + 136) = 0xE700000000000000;
  v13 = objc_msgSend(v0, sel_subject);
  if (v13)
  {
    v14 = v13;
    v15 = sub_19E36F888();
    v17 = v16;

    v18 = MEMORY[0x1E0DEA968];
  }
  else
  {
    v15 = 0;
    v17 = 0;
    v18 = 0;
    *(_QWORD *)(inited + 160) = 0;
  }
  *(_QWORD *)(inited + 144) = v15;
  *(_QWORD *)(inited + 152) = v17;
  *(_QWORD *)(inited + 168) = v18;
  v19 = sub_19E32D998(inited);
  v20 = sub_19E35FE5C(v19);
  swift_bridgeObjectRelease();
  return v20;
}

void __swiftcall IMActionDialEnriched.init()(IMActionDialEnriched *__return_ptr retstr)
{
  objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_init);
}

void IMActionDialEnriched.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

unint64_t type metadata accessor for IMActionDialEnriched()
{
  unint64_t result;

  result = qword_1EE503130;
  if (!qword_1EE503130)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1EE503130);
  }
  return result;
}

void __swiftcall IMRichCardLayout.init(dictionary:)(IMRichCardLayout_optional *__return_ptr retstr, Swift::OpaquePointer dictionary)
{
  id v2;
  void *v3;

  v2 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  v3 = (void *)sub_19E36F81C();
  swift_bridgeObjectRelease();
  objc_msgSend(v2, sel_initWithDictionary_, v3);

}

id IMRichCardLayout.init(dictionary:)(uint64_t a1)
{
  void *v1;
  void *v2;
  unint64_t v4;
  char v5;
  unint64_t v6;
  char v7;
  unint64_t v8;
  char v9;
  id v10;
  void *v11;
  id v12;
  id v13;
  unint64_t v15;
  char v16;
  id v17;
  void *v18;
  id v19;
  unint64_t v20;
  char v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  void *v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;

  v2 = v1;
  if (*(_QWORD *)(a1 + 16))
  {
    v4 = sub_19E3247E4(0x7461746E6569726FLL, 0xEB000000006E6F69);
    if ((v5 & 1) != 0)
    {
      sub_19E324848(*(_QWORD *)(a1 + 56) + 32 * v4, (uint64_t)&v27);
      if ((swift_dynamicCast() & 1) != 0)
      {
        if (*(_QWORD *)(a1 + 16))
        {
          v6 = sub_19E3247E4(0x696C416567616D69, 0xEE00746E656D6E67);
          if ((v7 & 1) != 0)
          {
            sub_19E324848(*(_QWORD *)(a1 + 56) + 32 * v6, (uint64_t)&v27);
            if ((swift_dynamicCast() & 1) != 0)
            {
              if (*(_QWORD *)(a1 + 16)
                && (v8 = sub_19E3247E4(0x797453656C746974, 0xEA0000000000656CLL), (v9 & 1) != 0)
                && (sub_19E324848(*(_QWORD *)(a1 + 56) + 32 * v8, (uint64_t)&v27),
                    sub_19E247E74(&qword_1EE503490),
                    (swift_dynamicCast() & 1) != 0))
              {
                v10 = objc_allocWithZone((Class)IMRichCardStyle);
                v11 = (void *)sub_19E36F81C();
                swift_bridgeObjectRelease();
                v12 = objc_msgSend(v10, sel_initWithDictionary_, v11);

              }
              else
              {
                v12 = 0;
              }
              if (*(_QWORD *)(a1 + 16)
                && (v15 = sub_19E3247E4(0xD000000000000010, 0x800000019E39E0E0), (v16 & 1) != 0)
                && (sub_19E324848(*(_QWORD *)(a1 + 56) + 32 * v15, (uint64_t)&v27),
                    sub_19E247E74(&qword_1EE503490),
                    (swift_dynamicCast() & 1) != 0))
              {
                v17 = objc_allocWithZone((Class)IMRichCardStyle);
                v18 = (void *)sub_19E36F81C();
                swift_bridgeObjectRelease();
                v19 = objc_msgSend(v17, sel_initWithDictionary_, v18);

              }
              else
              {
                v19 = 0;
              }
              if (*(_QWORD *)(a1 + 16))
              {
                v20 = sub_19E3247E4(0x6874646977, 0xE500000000000000);
                if ((v21 & 1) != 0
                  && (sub_19E324848(*(_QWORD *)(a1 + 56) + 32 * v20, (uint64_t)&v27), (swift_dynamicCast() & 1) != 0))
                {
                  v22 = v26;
                }
                else
                {
                  v22 = -1;
                }
                if (*(_QWORD *)(a1 + 16))
                {
                  v23 = sub_19E3247E4(0x6C79745364726163, 0xEC0000006C725565);
                  if ((v24 & 1) != 0)
                  {
                    sub_19E324848(*(_QWORD *)(a1 + 56) + 32 * v23, (uint64_t)&v27);
                    goto LABEL_29;
                  }
                }
              }
              else
              {
                v22 = -1;
              }
              v27 = 0u;
              v28 = 0u;
LABEL_29:
              swift_bridgeObjectRelease();
              if (*((_QWORD *)&v28 + 1))
              {
                if ((swift_dynamicCast() & 1) != 0)
                {
                  v25 = (void *)sub_19E36F864();
                  swift_bridgeObjectRelease();
LABEL_34:
                  v13 = objc_msgSend(v2, sel_initWithOrientation_imageAlignment_width_titleStyle_descriptionStyle_cardStyleUrl_, v26, v26, v22, v12, v19, v25);

                  return v13;
                }
              }
              else
              {
                sub_19E322284((uint64_t)&v27);
              }
              v25 = 0;
              goto LABEL_34;
            }
          }
        }
      }
    }
  }
  swift_bridgeObjectRelease();
  swift_getObjectType();
  swift_deallocPartialClassInstance();
  return 0;
}

uint64_t sub_19E34ED54()
{
  void *v0;
  uint64_t inited;
  id v2;
  uint64_t v3;
  id v4;
  void *v5;
  id v6;
  id v7;
  void *v8;
  id v9;
  id v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;

  sub_19E247E74((uint64_t *)&unk_1EE5019F8);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_19E382D50;
  *(_QWORD *)(inited + 32) = 0x7461746E6569726FLL;
  *(_QWORD *)(inited + 40) = 0xEB000000006E6F69;
  v2 = objc_msgSend(v0, sel_orientation);
  v3 = MEMORY[0x1E0DEB418];
  *(_QWORD *)(inited + 48) = v2;
  *(_QWORD *)(inited + 72) = v3;
  strcpy((char *)(inited + 80), "imageAlignment");
  *(_BYTE *)(inited + 95) = -18;
  *(_QWORD *)(inited + 96) = objc_msgSend(v0, sel_imageAlignment);
  *(_QWORD *)(inited + 120) = v3;
  *(_QWORD *)(inited + 128) = 0x6874646977;
  *(_QWORD *)(inited + 136) = 0xE500000000000000;
  *(_QWORD *)(inited + 144) = objc_msgSend(v0, sel_width);
  *(_QWORD *)(inited + 168) = v3;
  *(_QWORD *)(inited + 176) = 0x797453656C746974;
  *(_QWORD *)(inited + 184) = 0xEA0000000000656CLL;
  v4 = objc_msgSend(v0, sel_titleStyle);
  v5 = v4;
  if (v4)
  {
    v6 = objc_msgSend(v4, sel_dictionaryRepresentation);

    v5 = (void *)sub_19E36F828();
    v4 = (id)sub_19E247E74(&qword_1EE503490);
  }
  else
  {
    *(_QWORD *)(inited + 200) = 0;
    *(_QWORD *)(inited + 208) = 0;
  }
  *(_QWORD *)(inited + 192) = v5;
  *(_QWORD *)(inited + 216) = v4;
  *(_QWORD *)(inited + 224) = 0xD000000000000010;
  *(_QWORD *)(inited + 232) = 0x800000019E39E0E0;
  v7 = objc_msgSend(v0, sel_descriptionStyle);
  v8 = v7;
  if (v7)
  {
    v9 = objc_msgSend(v7, sel_dictionaryRepresentation);

    v8 = (void *)sub_19E36F828();
    v7 = (id)sub_19E247E74(&qword_1EE503490);
  }
  else
  {
    *(_QWORD *)(inited + 248) = 0;
    *(_QWORD *)(inited + 256) = 0;
  }
  *(_QWORD *)(inited + 240) = v8;
  *(_QWORD *)(inited + 264) = v7;
  strcpy((char *)(inited + 272), "cardStyleUrl");
  *(_BYTE *)(inited + 285) = 0;
  *(_WORD *)(inited + 286) = -5120;
  v10 = objc_msgSend(v0, sel_cardStyleUrl);
  if (v10)
  {
    v11 = v10;
    v12 = sub_19E36F888();
    v14 = v13;

    v15 = MEMORY[0x1E0DEA968];
  }
  else
  {
    v12 = 0;
    v14 = 0;
    v15 = 0;
    *(_QWORD *)(inited + 304) = 0;
  }
  *(_QWORD *)(inited + 288) = v12;
  *(_QWORD *)(inited + 296) = v14;
  *(_QWORD *)(inited + 312) = v15;
  v16 = sub_19E32D998(inited);
  v17 = sub_19E35FE5C(v16);
  swift_bridgeObjectRelease();
  return v17;
}

uint64_t IMRichCardLayout.isEqual(_:)(uint64_t a1)
{
  void *v1;
  void *v2;
  id v3;
  id v4;
  id v5;
  id v6;
  id v7;
  void *v8;
  id v9;
  char v10;
  id v11;
  id v12;
  char v13;
  char v14;
  id v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  _BYTE v27[24];
  uint64_t v28;

  v2 = v1;
  sub_19E323318(a1, (uint64_t)v27);
  if (!v28)
  {
    sub_19E322284((uint64_t)v27);
    goto LABEL_16;
  }
  type metadata accessor for IMRichCardLayout();
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_16:
    v14 = 0;
    return v14 & 1;
  }
  v3 = objc_msgSend(v1, sel_orientation);
  if (v3 != objc_msgSend(v26, sel_orientation))
    goto LABEL_15;
  v4 = objc_msgSend(v2, sel_imageAlignment);
  if (v4 != objc_msgSend(v26, sel_imageAlignment))
    goto LABEL_15;
  v5 = objc_msgSend(v2, sel_width);
  if (v5 != objc_msgSend(v26, sel_width))
    goto LABEL_15;
  v6 = objc_msgSend(v2, sel_titleStyle);
  v7 = objc_msgSend(v26, sel_titleStyle);
  v8 = v7;
  if (v6)
  {
    if (!v7)
    {
LABEL_18:

      goto LABEL_16;
    }
    type metadata accessor for IMRichCardStyle(0);
    v9 = v6;
    v10 = sub_19E36FBB8();

    if ((v10 & 1) == 0)
      goto LABEL_15;
  }
  else if (v7)
  {
    goto LABEL_20;
  }
  v6 = objc_msgSend(v2, sel_descriptionStyle);
  v11 = objc_msgSend(v26, sel_descriptionStyle);
  v8 = v11;
  if (!v6)
  {
    if (!v11)
      goto LABEL_21;
LABEL_20:

    goto LABEL_16;
  }
  if (!v11)
    goto LABEL_18;
  type metadata accessor for IMRichCardStyle(0);
  v12 = v6;
  v13 = sub_19E36FBB8();

  if ((v13 & 1) == 0)
  {
LABEL_15:

    goto LABEL_16;
  }
LABEL_21:
  v16 = objc_msgSend(v2, sel_cardStyleUrl);
  if (v16)
  {
    v17 = v16;
    v18 = sub_19E36F888();
    v20 = v19;

  }
  else
  {
    v18 = 0;
    v20 = 0;
  }
  v21 = objc_msgSend(v26, sel_cardStyleUrl);
  if (!v21)
  {
    if (!v20)
    {

      v14 = 1;
      return v14 & 1;
    }
LABEL_31:

    swift_bridgeObjectRelease();
    goto LABEL_16;
  }
  v22 = v21;
  v23 = sub_19E36F888();
  v25 = v24;

  if (!v20)
  {

    if (!v25)
    {
      v14 = 1;
      return v14 & 1;
    }
    swift_bridgeObjectRelease();
    goto LABEL_16;
  }
  if (!v25)
    goto LABEL_31;
  if (v18 == v23 && v20 == v25)
    v14 = 1;
  else
    v14 = sub_19E36FE10();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return v14 & 1;
}

void __swiftcall IMRichCardLayout.init()(IMRichCardLayout *__return_ptr retstr)
{
  objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_init);
}

void IMRichCardLayout.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

unint64_t type metadata accessor for IMRichCardLayout()
{
  unint64_t result;

  result = qword_1EE503168;
  if (!qword_1EE503168)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1EE503168);
  }
  return result;
}

void __swiftcall IMChip.init(dictionary:)(IMChip_optional *__return_ptr retstr, Swift::OpaquePointer dictionary)
{
  id v2;
  void *v3;

  v2 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  v3 = (void *)sub_19E36F81C();
  swift_bridgeObjectRelease();
  objc_msgSend(v2, sel_initWithDictionary_, v3);

}

id IMChip.init(dictionary:)(uint64_t a1)
{
  void *v1;
  void *v2;
  unint64_t v4;
  char v5;
  unint64_t v6;
  char v7;
  id v8;
  void *v10;
  id v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;

  v2 = v1;
  if (*(_QWORD *)(a1 + 16))
  {
    v4 = sub_19E3247E4(1701869940, 0xE400000000000000);
    if ((v5 & 1) != 0)
    {
      sub_19E324848(*(_QWORD *)(a1 + 56) + 32 * v4, (uint64_t)&v13);
      if ((swift_dynamicCast() & 1) != 0)
      {
        if (*(_QWORD *)(a1 + 16) && (v6 = sub_19E3247E4(1885956195, 0xE400000000000000), (v7 & 1) != 0))
        {
          sub_19E324848(*(_QWORD *)(a1 + 56) + 32 * v6, (uint64_t)&v13);
        }
        else
        {
          v13 = 0u;
          v14 = 0u;
        }
        swift_bridgeObjectRelease();
        if (*((_QWORD *)&v14 + 1))
        {
          sub_19E247E74(&qword_1EE503490);
          if ((swift_dynamicCast() & 1) != 0)
          {
            v10 = (void *)sub_19E36F81C();
            swift_bridgeObjectRelease();
LABEL_15:
            v11 = objc_msgSend((id)objc_opt_self(), sel_chipWithType_dictionary_, v12, v10);

            v8 = objc_msgSend(v2, sel_initWithType_chip_, v12, v11);
            swift_unknownObjectRelease();
            return v8;
          }
        }
        else
        {
          sub_19E322284((uint64_t)&v13);
        }
        v10 = 0;
        goto LABEL_15;
      }
    }
  }
  swift_bridgeObjectRelease();
  swift_getObjectType();
  swift_deallocPartialClassInstance();
  return 0;
}

uint64_t sub_19E34F818()
{
  void *v0;
  uint64_t inited;
  id v2;
  uint64_t v3;
  id v4;
  uint64_t v5;
  id v6;
  unint64_t v7;
  uint64_t v8;

  sub_19E247E74((uint64_t *)&unk_1EE5019F8);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_19E381B30;
  *(_QWORD *)(inited + 32) = 1701869940;
  *(_QWORD *)(inited + 40) = 0xE400000000000000;
  v2 = objc_msgSend(v0, sel_type);
  v3 = MEMORY[0x1E0DEB418];
  *(_QWORD *)(inited + 48) = v2;
  *(_QWORD *)(inited + 72) = v3;
  *(_QWORD *)(inited + 80) = 1885956195;
  *(_QWORD *)(inited + 88) = 0xE400000000000000;
  v4 = objc_msgSend(v0, sel_chip);
  v5 = (uint64_t)v4;
  if (v4)
  {
    v6 = objc_msgSend(v4, sel_dictionaryRepresentation);
    swift_unknownObjectRelease();
    v5 = sub_19E36F828();

    v4 = (id)sub_19E247E74(&qword_1EE503490);
  }
  else
  {
    *(_QWORD *)(inited + 104) = 0;
    *(_QWORD *)(inited + 112) = 0;
  }
  *(_QWORD *)(inited + 96) = v5;
  *(_QWORD *)(inited + 120) = v4;
  v7 = sub_19E32D998(inited);
  v8 = sub_19E35FE5C(v7);
  swift_bridgeObjectRelease();
  return v8;
}

BOOL IMChip.isEqual(_:)(uint64_t a1)
{
  void *v1;
  id v2;
  id v3;
  void *v5;
  _BYTE v6[24];
  uint64_t v7;

  sub_19E323318(a1, (uint64_t)v6);
  if (v7)
  {
    type metadata accessor for IMChip();
    if ((swift_dynamicCast() & 1) != 0)
    {
      v2 = objc_msgSend(v1, sel_type);
      v3 = objc_msgSend(v5, sel_type);

      return v2 == v3;
    }
  }
  else
  {
    sub_19E322284((uint64_t)v6);
  }
  return 0;
}

void __swiftcall IMChip.init()(IMChip *__return_ptr retstr)
{
  objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_init);
}

void IMChip.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

unint64_t type metadata accessor for IMChip()
{
  unint64_t result;

  result = qword_1EE503180;
  if (!qword_1EE503180)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1EE503180);
  }
  return result;
}

id sub_19E34FC00(uint64_t a1, void *a2)
{
  id v2;
  __objc2_class *v3;
  id v4;
  void *v5;

  v2 = a2;
  if (a2)
  {
    if (a1 == 1)
    {
      v3 = IMChipAction;
    }
    else
    {
      if (a1)
        return 0;
      v3 = IMChipReply;
    }
    v4 = objc_allocWithZone((Class)v3);
    swift_bridgeObjectRetain();
    v5 = (void *)sub_19E36F81C();
    swift_bridgeObjectRelease();
    v2 = objc_msgSend(v4, sel_initWithDictionary_, v5);

  }
  return v2;
}

id ProtectiveConcurrentQueue.underlyingQueue.getter()
{
  uint64_t v0;

  return *(id *)(v0 + 16);
}

uint64_t ProtectiveConcurrentQueue.__allocating_init(label:qos:attributes:autoreleaseFrequency:target:initialState:)(uint64_t a1, uint64_t a2, uint64_t a3, char *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v14;

  v14 = swift_allocObject();
  ProtectiveConcurrentQueue.init(label:qos:attributes:autoreleaseFrequency:target:initialState:)(a1, a2, a3, a4, a5, a6, a7);
  return v14;
}

uint64_t ProtectiveConcurrentQueue.init(label:qos:attributes:autoreleaseFrequency:target:initialState:)(uint64_t a1, uint64_t a2, uint64_t a3, char *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  void (*v24)(char *, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD v31[2];
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  v41 = a6;
  v38 = a5;
  v39 = a1;
  v32 = a4;
  v34 = a3;
  v40 = a2;
  v43 = *v7;
  v44 = a7;
  v37 = sub_19E36FAD4();
  v35 = *(_QWORD *)(v37 - 8);
  MEMORY[0x1E0C80A78](v37);
  v36 = (char *)v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_19E36FAC8();
  v11 = (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF810];
  v12 = *(_QWORD *)(v10 - 8);
  v13 = MEMORY[0x1E0C80A78](v10);
  v15 = (char *)v31 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = MEMORY[0x1E0C80A78](v13);
  v18 = (char *)v31 - v17;
  MEMORY[0x1E0C80A78](v16);
  v19 = sub_19E36F7D4();
  v20 = *(_QWORD *)(v19 - 8);
  v33 = v19;
  MEMORY[0x1E0C80A78](v19);
  v22 = (char *)v31 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31[1] = sub_19E333450();
  (*(void (**)(char *, uint64_t, uint64_t))(v20 + 16))(v22, a3, v19);
  sub_19E36FABC();
  sub_19E24C518(&qword_1EE503188, v11, MEMORY[0x1E0DEF820]);
  v23 = v32;
  sub_19E36F900();
  sub_19E24C518(&qword_1EE503190, v11, MEMORY[0x1E0DEF830]);
  sub_19E36FEDC();
  (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v15, v18, v10);
  sub_19E24C518(&qword_1ECFC6B98, v11, MEMORY[0x1E0DEF828]);
  sub_19E36FC18();
  v24 = *(void (**)(char *, uint64_t))(v12 + 8);
  v24(v18, v10);
  v25 = v35;
  v27 = v37;
  v26 = v38;
  (*(void (**)(char *, uint64_t, uint64_t))(v35 + 16))(v36, v38, v37);
  v28 = sub_19E36FB10();
  (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v26, v27);
  v24(v23, v10);
  (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v34, v33);
  v29 = v42;
  *(_QWORD *)(v42 + 16) = v28;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(v43 + 80) - 8) + 32))(v29 + *(_QWORD *)(*(_QWORD *)v29 + 96), v44);
  return v29;
}

char *ProtectiveConcurrentQueue.__allocating_init(underlyingQueue:initialState:)(uint64_t a1, uint64_t a2)
{
  char *v4;
  uint64_t v5;

  v4 = (char *)swift_allocObject();
  v5 = *(_QWORD *)v4;
  *((_QWORD *)v4 + 2) = a1;
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(v5 + 80) - 8) + 32))(&v4[*(_QWORD *)(v5 + 96)], a2);
  return v4;
}

char *ProtectiveConcurrentQueue.init(underlyingQueue:initialState:)(uint64_t a1)
{
  char *v1;
  uint64_t v2;

  v2 = *(_QWORD *)v1;
  *((_QWORD *)v1 + 2) = a1;
  (*(void (**)(char *))(*(_QWORD *)(*(_QWORD *)(v2 + 80) - 8) + 32))(&v1[*(_QWORD *)(v2 + 96)]);
  return v1;
}

uint64_t ProtectiveConcurrentQueue.sync<A>(execute:)()
{
  return sub_19E36FAF8();
}

{
  return sub_19E36FAF8();
}

uint64_t sub_19E3500D8(void (*a1)(char *), uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v4 = *(_QWORD *)(*(_QWORD *)a3 + 80);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](a1);
  v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = v9 + *(_QWORD *)(v8 + 96);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v10, v4);
  a1(v7);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t sub_19E3501A4()
{
  uint64_t v0;

  return sub_19E3500D8(*(void (**)(char *))(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40));
}

uint64_t ProtectiveConcurrentQueue.sync<A>(flags:execute:)()
{
  return sub_19E36FAEC();
}

uint64_t sub_19E350240(void (*a1)(char *), uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v4 = *(_QWORD *)(*(_QWORD *)a3 + 80);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](a1);
  v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = v9 + *(_QWORD *)(v8 + 96);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v10, v4);
  a1(v7);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t sub_19E350314()
{
  uint64_t v0;

  return sub_19E350240(*(void (**)(char *))(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40));
}

uint64_t ProtectiveConcurrentQueue.async(execute:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t (*v7)(uint64_t);
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  _QWORD *v15;
  void *v16;
  _QWORD v18[2];
  _QWORD aBlock[6];

  v3 = v2;
  v6 = sub_19E36F7BC();
  v7 = (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8];
  v8 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v10 = (char *)v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_19E36F7D4();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11);
  v14 = (char *)v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18[0] = *(_QWORD *)(v3 + 16);
  v15 = (_QWORD *)swift_allocObject();
  v15[2] = a1;
  v15[3] = a2;
  v15[4] = v3;
  aBlock[4] = sub_19E35109C;
  aBlock[5] = v15;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_19E333388;
  aBlock[3] = &unk_1E3FB4A98;
  v16 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  sub_19E36F7C8();
  v18[1] = MEMORY[0x1E0DEE9D8];
  sub_19E24C518((unint64_t *)&qword_1ECFC69D8, v7, MEMORY[0x1E0DEF510]);
  sub_19E247E74((uint64_t *)&unk_1ECFC69E0);
  sub_19E333404();
  sub_19E36FC30();
  MEMORY[0x1A1AE71D0](0, v14, v10, v16);
  _Block_release(v16);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v6);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  return swift_release();
}

uint64_t sub_19E35051C()
{
  return swift_release();
}

uint64_t ProtectiveConcurrentQueue.async(flags:execute:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  _QWORD *v11;
  void *v12;
  _QWORD aBlock[6];

  v7 = sub_19E36F7D4();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)aBlock - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = (_QWORD *)swift_allocObject();
  v11[2] = a2;
  v11[3] = a3;
  v11[4] = v3;
  aBlock[4] = sub_19E35070C;
  aBlock[5] = v11;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_19E333388;
  aBlock[3] = &unk_1E3FB4BD8;
  v12 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  sub_19E36F7C8();
  MEMORY[0x1A1AE71D0](0, v10, a1, v12);
  _Block_release(v12);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  return swift_release();
}

uint64_t sub_19E350654(void (*a1)(char *), uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v4 = *(_QWORD *)(*(_QWORD *)a3 + 80);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](a1);
  v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = v9 + *(_QWORD *)(v8 + 96);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v10, v4);
  a1(v7);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t sub_19E35070C()
{
  uint64_t v0;

  return sub_19E350654(*(void (**)(char *))(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
}

uint64_t ProtectiveConcurrentQueue.mutatingSync<A>(execute:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  _BYTE v12[16];
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v7 = sub_19E36F7BC();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = &v12[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_19E36F7B0();
  v13 = a3;
  v14 = a1;
  v15 = a2;
  v16 = v3;
  sub_19E36FAEC();
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v8 + 8))(v10, v7);
}

{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  _BYTE v12[16];
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v7 = sub_19E36F7BC();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = &v12[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_19E36F7B0();
  v13 = a3;
  v14 = a1;
  v15 = a2;
  v16 = v3;
  sub_19E36FAEC();
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v8 + 8))(v10, v7);
}

uint64_t ProtectiveConcurrentQueue.mutatingSync<A>(flags:execute:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t (*v7)(uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  void (*v17)(char *, uint64_t);
  _QWORD v19[2];
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v22 = a4;
  v20 = a1;
  v21 = a2;
  v6 = sub_19E36F7BC();
  v7 = (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8];
  v8 = *(_QWORD *)(v6 - 8);
  v9 = MEMORY[0x1E0C80A78](v6);
  v11 = (char *)v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = MEMORY[0x1E0C80A78](v9);
  v14 = (char *)v19 - v13;
  MEMORY[0x1E0C80A78](v12);
  v16 = (char *)v19 - v15;
  v19[1] = *(_QWORD *)(v4 + 16);
  sub_19E36F7B0();
  sub_19E24C518(&qword_1EE503198, v7, MEMORY[0x1E0DEF508]);
  sub_19E36F900();
  sub_19E24C518(qword_1EE5031A0, v7, MEMORY[0x1E0DEF518]);
  sub_19E36FEDC();
  (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v11, v14, v6);
  sub_19E24C518((unint64_t *)&qword_1ECFC69D8, v7, MEMORY[0x1E0DEF510]);
  sub_19E36FC18();
  v17 = *(void (**)(char *, uint64_t))(v8 + 8);
  v17(v14, v6);
  v23 = a3;
  v24 = v20;
  v25 = v21;
  v26 = v4;
  sub_19E36FAEC();
  return ((uint64_t (*)(char *, uint64_t))v17)(v16, v6);
}

uint64_t ProtectiveConcurrentQueue.mutatingAsync(execute:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  _QWORD *v13;
  void *v14;
  _QWORD aBlock[6];

  v5 = sub_19E36F7D4();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)aBlock - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_19E36F7BC();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v12 = (char *)aBlock - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_19E36F7B0();
  v13 = (_QWORD *)swift_allocObject();
  v13[2] = a1;
  v13[3] = a2;
  v13[4] = v2;
  aBlock[4] = sub_19E333384;
  aBlock[5] = v13;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_19E333388;
  aBlock[3] = &unk_1E3FB4B38;
  v14 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  sub_19E36F7C8();
  MEMORY[0x1A1AE71D0](0, v8, v12, v14);
  _Block_release(v14);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  return swift_release();
}

uint64_t ProtectiveConcurrentQueue.mutatingAsync(flags:execute:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  void (*v19)(char *, uint64_t);
  _QWORD *v20;
  void *v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD aBlock[6];

  v24 = a2;
  v5 = sub_19E36F7D4();
  v25 = *(_QWORD *)(v5 - 8);
  v26 = v5;
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_19E36F7BC();
  v9 = (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8];
  v10 = *(_QWORD *)(v8 - 8);
  v11 = MEMORY[0x1E0C80A78](v8);
  v13 = (char *)&v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = MEMORY[0x1E0C80A78](v11);
  v16 = (char *)&v23 - v15;
  MEMORY[0x1E0C80A78](v14);
  v18 = (char *)&v23 - v17;
  v23 = *(_QWORD *)(v3 + 16);
  sub_19E36F7B0();
  sub_19E24C518(&qword_1EE503198, v9, MEMORY[0x1E0DEF508]);
  sub_19E36F900();
  sub_19E24C518(qword_1EE5031A0, v9, MEMORY[0x1E0DEF518]);
  sub_19E36FEDC();
  (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v13, v16, v8);
  sub_19E24C518((unint64_t *)&qword_1ECFC69D8, v9, MEMORY[0x1E0DEF510]);
  sub_19E36FC18();
  v19 = *(void (**)(char *, uint64_t))(v10 + 8);
  v19(v16, v8);
  v20 = (_QWORD *)swift_allocObject();
  v20[2] = v24;
  v20[3] = a3;
  v20[4] = v3;
  aBlock[4] = sub_19E333384;
  aBlock[5] = v20;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_19E333388;
  aBlock[3] = &unk_1E3FB4B88;
  v21 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  sub_19E36F7C8();
  MEMORY[0x1A1AE71D0](0, v7, v18, v21);
  _Block_release(v21);
  (*(void (**)(char *, uint64_t))(v25 + 8))(v7, v26);
  v19(v18, v8);
  return swift_release();
}

uint64_t ProtectiveConcurrentQueue.assertAccessAlreadyOnQueue<A>(execute:)(void (*a1)(char *))
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  id v8;
  uint64_t result;
  char *v10;
  uint64_t v11;

  v3 = sub_19E36F804();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (uint64_t *)((char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = (void *)v1[2];
  *v6 = v7;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v4 + 104))(v6, *MEMORY[0x1E0DEF740], v3);
  v8 = v7;
  LOBYTE(v7) = sub_19E36F810();
  result = (*(uint64_t (**)(_QWORD *, uint64_t))(v4 + 8))(v6, v3);
  if ((v7 & 1) != 0)
  {
    v10 = (char *)v1 + *(_QWORD *)(*v1 + 96);
    swift_beginAccess();
    a1(v10);
    return swift_endAccess();
  }
  else
  {
    __break(1u);
  }
  return result;
}

id *ProtectiveConcurrentQueue.deinit()
{
  id *v0;
  _QWORD *v1;

  v1 = *v0;

  (*(void (**)(char *))(*(_QWORD *)(v1[10] - 8) + 8))((char *)v0 + *((_QWORD *)*v0 + 12));
  return v0;
}

uint64_t ProtectiveConcurrentQueue.__deallocating_deinit()
{
  id *v0;
  _QWORD *v1;

  v1 = *v0;

  (*(void (**)(char *))(*(_QWORD *)(v1[10] - 8) + 8))((char *)v0 + *((_QWORD *)*v0 + 12));
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for ProtectiveConcurrentQueue(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_19E329228(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ProtectiveConcurrentQueue);
}

uint64_t method lookup function for ProtectiveConcurrentQueue()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of ProtectiveConcurrentQueue.__allocating_init(label:qos:attributes:autoreleaseFrequency:target:initialState:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 104))();
}

uint64_t dispatch thunk of ProtectiveConcurrentQueue.__allocating_init(underlyingQueue:initialState:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t sub_19E35107C()
{
  return sub_19E350314();
}

void __swiftcall IMRichCardMedia.init(dictionary:)(IMRichCardMedia_optional *__return_ptr retstr, Swift::OpaquePointer dictionary)
{
  id v2;
  void *v3;

  v2 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  v3 = (void *)sub_19E36F81C();
  swift_bridgeObjectRelease();
  objc_msgSend(v2, sel_initWithDictionary_, v3);

}

id IMRichCardMedia.init(dictionary:)(uint64_t a1)
{
  void *v1;
  void *v2;
  unint64_t v4;
  char v5;
  unint64_t v6;
  char v7;
  unint64_t v8;
  char v9;
  unint64_t v10;
  char v11;
  void *v12;
  void *v13;
  unint64_t v14;
  char v15;
  void *v16;
  id v17;
  unint64_t v19;
  char v20;
  void *v21;
  unint64_t v22;
  char v23;
  void *v24;
  unint64_t v25;
  char v26;
  void *v27;
  void *v28;
  void *v29;
  __int128 v30;
  __int128 v31;

  v2 = v1;
  if (!*(_QWORD *)(a1 + 16))
    goto LABEL_22;
  v4 = sub_19E3247E4(0x6C7255616964656DLL, 0xE800000000000000);
  if ((v5 & 1) == 0)
    goto LABEL_22;
  sub_19E324848(*(_QWORD *)(a1 + 56) + 32 * v4, (uint64_t)&v30);
  if ((swift_dynamicCast() & 1) == 0)
    goto LABEL_22;
  if (!*(_QWORD *)(a1 + 16))
    goto LABEL_21;
  v6 = sub_19E3247E4(0xD000000000000010, 0x800000019E39E2D0);
  if ((v7 & 1) == 0)
    goto LABEL_21;
  sub_19E324848(*(_QWORD *)(a1 + 56) + 32 * v6, (uint64_t)&v30);
  if ((swift_dynamicCast() & 1) == 0)
    goto LABEL_21;
  if (*(_QWORD *)(a1 + 16) && (v8 = sub_19E3247E4(0x6C6946616964656DLL, 0xED0000657A695365), (v9 & 1) != 0))
  {
    sub_19E324848(*(_QWORD *)(a1 + 56) + 32 * v8, (uint64_t)&v30);
    sub_19E24B854(0, (unint64_t *)&qword_1ECFC6A00);
    if ((swift_dynamicCast() & 1) == 0)
    {
LABEL_20:
      swift_bridgeObjectRelease();
LABEL_21:
      swift_bridgeObjectRelease();
      goto LABEL_22;
    }
    if (*(_QWORD *)(a1 + 16))
    {
      v10 = sub_19E3247E4(0x746867696568, 0xE600000000000000);
      if ((v11 & 1) != 0)
      {
        sub_19E324848(*(_QWORD *)(a1 + 56) + 32 * v10, (uint64_t)&v30);
        if ((swift_dynamicCast() & 1) != 0)
        {
          v12 = (void *)sub_19E36F864();
          swift_bridgeObjectRelease();
          v13 = (void *)sub_19E36F864();
          swift_bridgeObjectRelease();
          if (*(_QWORD *)(a1 + 16)
            && (v14 = sub_19E3247E4(0x69616E626D756874, 0xEC0000006C72556CLL), (v15 & 1) != 0)
            && (sub_19E324848(*(_QWORD *)(a1 + 56) + 32 * v14, (uint64_t)&v30), (swift_dynamicCast() & 1) != 0))
          {
            v16 = (void *)sub_19E36F864();
            swift_bridgeObjectRelease();
          }
          else
          {
            v16 = 0;
          }
          if (*(_QWORD *)(a1 + 16)
            && (v19 = sub_19E3247E4(0xD000000000000014, 0x800000019E39E2F0), (v20 & 1) != 0)
            && (sub_19E324848(*(_QWORD *)(a1 + 56) + 32 * v19, (uint64_t)&v30), (swift_dynamicCast() & 1) != 0))
          {
            v21 = (void *)sub_19E36F864();
            swift_bridgeObjectRelease();
          }
          else
          {
            v21 = 0;
          }
          if (*(_QWORD *)(a1 + 16))
          {
            v22 = sub_19E3247E4(0xD000000000000011, 0x800000019E39E310);
            if ((v23 & 1) != 0)
            {
              sub_19E324848(*(_QWORD *)(a1 + 56) + 32 * v22, (uint64_t)&v30);
              if (swift_dynamicCast())
                v24 = v29;
              else
                v24 = 0;
            }
            else
            {
              v24 = 0;
            }
            if (*(_QWORD *)(a1 + 16))
            {
              v25 = sub_19E3247E4(0xD000000000000012, 0x800000019E39E330);
              if ((v26 & 1) != 0)
              {
                sub_19E324848(*(_QWORD *)(a1 + 56) + 32 * v25, (uint64_t)&v30);
                goto LABEL_41;
              }
            }
          }
          else
          {
            v24 = 0;
          }
          v30 = 0u;
          v31 = 0u;
LABEL_41:
          swift_bridgeObjectRelease();
          if (*((_QWORD *)&v31 + 1))
          {
            if ((swift_dynamicCast() & 1) != 0)
            {
              v27 = (void *)sub_19E36F864();
              swift_bridgeObjectRelease();
              v28 = v29;
LABEL_46:
              v17 = objc_msgSend(v2, sel_initWithMediaUrl_mediaContentType_mediaFileSize_thumbnailUrl_thumbnailContentType_thumbnailFileSize_height_contentDescription_, v12, v13, v29, v16, v21, v24, v28, v27);

              return v17;
            }
          }
          else
          {
            sub_19E322284((uint64_t)&v30);
          }
          v28 = v29;
          v27 = 0;
          goto LABEL_46;
        }

        goto LABEL_20;
      }
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
LABEL_22:
  swift_bridgeObjectRelease();
  swift_getObjectType();
  swift_deallocPartialClassInstance();
  return 0;
}

uint64_t sub_19E351834()
{
  void *v0;
  uint64_t inited;
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  id v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  id v26;
  uint64_t v27;
  id v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;

  sub_19E247E74((uint64_t *)&unk_1EE5019F8);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_19E382DA0;
  *(_QWORD *)(inited + 32) = 0x6C7255616964656DLL;
  *(_QWORD *)(inited + 40) = 0xE800000000000000;
  v2 = objc_msgSend(v0, sel_mediaUrl);
  v3 = sub_19E36F888();
  v5 = v4;

  v6 = MEMORY[0x1E0DEA968];
  *(_QWORD *)(inited + 48) = v3;
  *(_QWORD *)(inited + 56) = v5;
  *(_QWORD *)(inited + 72) = v6;
  *(_QWORD *)(inited + 80) = 0xD000000000000010;
  *(_QWORD *)(inited + 88) = 0x800000019E39E2D0;
  v7 = objc_msgSend(v0, sel_mediaContentType);
  v8 = sub_19E36F888();
  v10 = v9;

  *(_QWORD *)(inited + 96) = v8;
  *(_QWORD *)(inited + 104) = v10;
  *(_QWORD *)(inited + 120) = v6;
  strcpy((char *)(inited + 128), "mediaFileSize");
  *(_WORD *)(inited + 142) = -4864;
  v11 = objc_msgSend(v0, sel_mediaFileSize);
  v12 = sub_19E24B854(0, (unint64_t *)&qword_1ECFC6A00);
  *(_QWORD *)(inited + 144) = v11;
  *(_QWORD *)(inited + 168) = v12;
  strcpy((char *)(inited + 176), "thumbnailUrl");
  *(_BYTE *)(inited + 189) = 0;
  *(_WORD *)(inited + 190) = -5120;
  v13 = objc_msgSend(v0, sel_thumbnailUrl);
  if (v13)
  {
    v14 = v13;
    v15 = sub_19E36F888();
    v17 = v16;

    v18 = MEMORY[0x1E0DEA968];
  }
  else
  {
    v15 = 0;
    v17 = 0;
    v18 = 0;
    *(_QWORD *)(inited + 208) = 0;
  }
  *(_QWORD *)(inited + 192) = v15;
  *(_QWORD *)(inited + 200) = v17;
  *(_QWORD *)(inited + 216) = v18;
  *(_QWORD *)(inited + 224) = 0xD000000000000014;
  *(_QWORD *)(inited + 232) = 0x800000019E39E2F0;
  v19 = objc_msgSend(v0, sel_thumbnailContentType);
  if (v19)
  {
    v20 = v19;
    v21 = sub_19E36F888();
    v23 = v22;

    v24 = MEMORY[0x1E0DEA968];
  }
  else
  {
    v21 = 0;
    v23 = 0;
    v24 = 0;
    *(_QWORD *)(inited + 256) = 0;
  }
  *(_QWORD *)(inited + 240) = v21;
  *(_QWORD *)(inited + 248) = v23;
  *(_QWORD *)(inited + 264) = v24;
  *(_QWORD *)(inited + 272) = 0xD000000000000011;
  *(_QWORD *)(inited + 280) = 0x800000019E39E310;
  v25 = objc_msgSend(v0, sel_thumbnailFileSize);
  if (!v25)
  {
    v12 = 0;
    *(_QWORD *)(inited + 296) = 0;
    *(_QWORD *)(inited + 304) = 0;
  }
  *(_QWORD *)(inited + 288) = v25;
  *(_QWORD *)(inited + 312) = v12;
  *(_QWORD *)(inited + 320) = 0x746867696568;
  *(_QWORD *)(inited + 328) = 0xE600000000000000;
  v26 = objc_msgSend(v0, sel_height);
  v27 = MEMORY[0x1E0DEB418];
  *(_QWORD *)(inited + 336) = v26;
  *(_QWORD *)(inited + 360) = v27;
  *(_QWORD *)(inited + 368) = 0xD000000000000012;
  *(_QWORD *)(inited + 376) = 0x800000019E39E330;
  v28 = objc_msgSend(v0, sel_contentDescription);
  if (v28)
  {
    v29 = v28;
    v30 = sub_19E36F888();
    v32 = v31;

    v33 = MEMORY[0x1E0DEA968];
  }
  else
  {
    v30 = 0;
    v32 = 0;
    v33 = 0;
    *(_QWORD *)(inited + 400) = 0;
  }
  *(_QWORD *)(inited + 384) = v30;
  *(_QWORD *)(inited + 392) = v32;
  *(_QWORD *)(inited + 408) = v33;
  v34 = sub_19E32D998(inited);
  v35 = sub_19E35FE5C(v34);
  swift_bridgeObjectRelease();
  return v35;
}

uint64_t IMRichCardMedia.isEqual(_:)(uint64_t a1)
{
  void *v1;
  void *v2;
  uint64_t v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  id v22;
  id v23;
  char v24;
  id v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  id v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  id v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  id v47;
  id v48;
  void *v49;
  id v50;
  char v51;
  id v52;
  id v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  id v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void *v65;
  _BYTE v66[24];
  uint64_t v67;

  v2 = v1;
  v3 = sub_19E323318(a1, (uint64_t)v66);
  if (!v67)
  {
    sub_19E322284((uint64_t)v66);
    goto LABEL_51;
  }
  type metadata accessor for IMRichCardMedia(v3);
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_51:
    v58 = 0;
    return v58 & 1;
  }
  v4 = objc_msgSend(v1, sel_mediaUrl);
  v5 = sub_19E36F888();
  v7 = v6;

  v8 = objc_msgSend(v65, sel_mediaUrl);
  v9 = sub_19E36F888();
  v11 = v10;

  if (v5 == v9 && v7 == v11)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    v12 = sub_19E36FE10();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v12 & 1) == 0)
      goto LABEL_50;
  }
  v13 = objc_msgSend(v2, sel_mediaContentType);
  v14 = sub_19E36F888();
  v16 = v15;

  v17 = objc_msgSend(v65, sel_mediaContentType);
  v18 = sub_19E36F888();
  v20 = v19;

  if (v14 == v18 && v16 == v20)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    v21 = sub_19E36FE10();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v21 & 1) == 0)
      goto LABEL_50;
  }
  sub_19E24B854(0, &qword_1EE503750);
  v22 = objc_msgSend(v2, sel_mediaFileSize);
  v23 = objc_msgSend(v65, sel_mediaFileSize);
  v24 = sub_19E36FBB8();

  if ((v24 & 1) == 0)
    goto LABEL_50;
  v25 = objc_msgSend(v2, sel_thumbnailUrl);
  if (v25)
  {
    v26 = v25;
    v27 = sub_19E36F888();
    v29 = v28;

  }
  else
  {
    v27 = 0;
    v29 = 0;
  }
  v30 = objc_msgSend(v65, sel_thumbnailUrl);
  if (v30)
  {
    v31 = v30;
    v32 = sub_19E36F888();
    v34 = v33;

    if (v29)
    {
      if (!v34)
        goto LABEL_39;
      if (v27 == v32 && v29 == v34)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      else
      {
        v35 = sub_19E36FE10();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v35 & 1) == 0)
          goto LABEL_50;
      }
    }
    else if (v34)
    {
      goto LABEL_39;
    }
  }
  else if (v29)
  {
    goto LABEL_39;
  }
  v36 = objc_msgSend(v2, sel_thumbnailContentType);
  if (v36)
  {
    v37 = v36;
    v38 = sub_19E36F888();
    v40 = v39;

  }
  else
  {
    v38 = 0;
    v40 = 0;
  }
  v41 = objc_msgSend(v65, sel_thumbnailContentType);
  if (!v41)
  {
    if (!v40)
      goto LABEL_41;
    goto LABEL_39;
  }
  v42 = v41;
  v43 = sub_19E36F888();
  v45 = v44;

  if (!v40)
  {
    if (!v45)
      goto LABEL_41;
LABEL_39:

    swift_bridgeObjectRelease();
    goto LABEL_51;
  }
  if (!v45)
    goto LABEL_39;
  if (v38 == v43 && v40 == v45)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    v46 = sub_19E36FE10();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v46 & 1) == 0)
      goto LABEL_50;
  }
LABEL_41:
  v47 = objc_msgSend(v2, sel_thumbnailFileSize);
  v48 = objc_msgSend(v65, sel_thumbnailFileSize);
  v49 = v48;
  if (v47)
  {
    if (!v48)
    {

      goto LABEL_51;
    }
    sub_19E24B854(0, (unint64_t *)&qword_1ECFC6A00);
    v50 = v47;
    v51 = sub_19E36FBB8();

    if ((v51 & 1) == 0)
      goto LABEL_50;
  }
  else if (v48)
  {

    goto LABEL_51;
  }
  v52 = objc_msgSend(v2, sel_height);
  if (v52 != objc_msgSend(v65, sel_height))
  {
LABEL_50:

    goto LABEL_51;
  }
  v53 = objc_msgSend(v2, sel_contentDescription);
  if (v53)
  {
    v54 = v53;
    v55 = sub_19E36F888();
    v57 = v56;

  }
  else
  {
    v55 = 0;
    v57 = 0;
  }
  v60 = objc_msgSend(v65, sel_contentDescription);
  if (!v60)
  {
    if (!v57)
    {

      v58 = 1;
      return v58 & 1;
    }
    goto LABEL_39;
  }
  v61 = v60;
  v62 = sub_19E36F888();
  v64 = v63;

  if (!v57)
  {

    if (!v64)
    {
      v58 = 1;
      return v58 & 1;
    }
    swift_bridgeObjectRelease();
    goto LABEL_51;
  }
  if (!v64)
    goto LABEL_39;
  if (v55 == v62 && v57 == v64)
    v58 = 1;
  else
    v58 = sub_19E36FE10();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return v58 & 1;
}

void __swiftcall IMRichCardMedia.init()(IMRichCardMedia *__return_ptr retstr)
{
  objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_init);
}

void IMRichCardMedia.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t type metadata accessor for IMRichCardMedia(uint64_t a1)
{
  return sub_19E24B854(a1, (unint64_t *)&unk_1EE503268);
}

void __swiftcall IMActionDevice.init(dictionary:)(IMActionDevice_optional *__return_ptr retstr, Swift::OpaquePointer dictionary)
{
  id v2;
  void *v3;

  v2 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  v3 = (void *)sub_19E36F81C();
  swift_bridgeObjectRelease();
  objc_msgSend(v2, sel_initWithDictionary_, v3);

}

id IMActionDevice.init(dictionary:)(uint64_t a1)
{
  void *v1;
  void *v2;
  unint64_t v4;
  char v5;
  uint64_t v7;
  __int128 v8;
  __int128 v9;

  v2 = v1;
  if (!*(_QWORD *)(a1 + 16) || (v4 = sub_19E3247E4(1701869940, 0xE400000000000000), (v5 & 1) == 0))
  {
    v8 = 0u;
    v9 = 0u;
    swift_bridgeObjectRelease();
    goto LABEL_7;
  }
  sub_19E324848(*(_QWORD *)(a1 + 56) + 32 * v4, (uint64_t)&v8);
  swift_bridgeObjectRelease();
  if (!*((_QWORD *)&v9 + 1))
  {
LABEL_7:
    sub_19E322284((uint64_t)&v8);
    goto LABEL_8;
  }
  if ((swift_dynamicCast() & 1) != 0)
    return objc_msgSend(v2, sel_initWithType_, v7);
LABEL_8:
  swift_getObjectType();
  swift_deallocPartialClassInstance();
  return 0;
}

void __swiftcall IMActionDevice.init()(IMActionDevice *__return_ptr retstr)
{
  objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_init);
}

void IMActionDevice.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

unint64_t type metadata accessor for IMActionDevice()
{
  unint64_t result;

  result = qword_1EE503280;
  if (!qword_1EE503280)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1EE503280);
  }
  return result;
}

void *static IMSyncedSettingsKey.allCases.getter()
{
  return &unk_1E3FB23A0;
}

void sub_19E3526B0(_QWORD *a1@<X8>)
{
  *a1 = &unk_1E3FB23D8;
}

uint64_t IMSyncedSettingsKey.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char v5;
  char v7;
  char v8;

  v4 = 0;
  if (a1 == 0x654D7065654B5353 && a2 == 0xEE00736567617373)
    goto LABEL_3;
  v5 = sub_19E36FE10();
  swift_bridgeObjectRelease();
  if ((v5 & 1) != 0)
    goto LABEL_5;
  v4 = 1;
  if (a1 == 0xD000000000000011 && 0x800000019E39E520 == a2)
    goto LABEL_3;
  v7 = sub_19E36FE10();
  swift_bridgeObjectRelease();
  if ((v7 & 1) != 0)
    goto LABEL_5;
  v4 = 2;
  if (a1 == 0xD000000000000017 && 0x800000019E39E500 == a2)
  {
LABEL_3:
    swift_bridgeObjectRelease();
  }
  else
  {
    v8 = sub_19E36FE10();
    swift_bridgeObjectRelease();
    if ((v8 & 1) == 0)
      v4 = 0;
  }
LABEL_5:
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t IMSyncedSettingsKey.stringValue.getter(uint64_t a1)
{
  uint64_t result;

  switch(a1)
  {
    case 0:
      return 0x654D7065654B5353;
    case 2:
      return 0xD000000000000017;
    case 1:
      return 0xD000000000000011;
  }
  sub_19E36FC84();
  swift_bridgeObjectRelease();
  result = sub_19E36FCF0();
  __break(1u);
  return result;
}

uint64_t IMSyncedSettingsKey.notificationName.getter(uint64_t a1)
{
  uint64_t result;

  if (a1 == 2 || a1 == 1 || !a1)
    return sub_19E36F864();
  sub_19E36FC84();
  swift_bridgeObjectRelease();
  result = sub_19E36FCF0();
  __break(1u);
  return result;
}

uint64_t IMSyncedSettingsKey.defaultValue.getter@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  unint64_t v3;
  uint64_t result;

  if (a1 == 2)
  {
    v3 = sub_19E324FB4();
    result = sub_19E36FBA0();
LABEL_7:
    a2[3] = v3;
    *a2 = result;
    return result;
  }
  if (a1 == 1 || !a1)
  {
    v3 = sub_19E324FB4();
    result = sub_19E36FBAC();
    goto LABEL_7;
  }
  sub_19E36FC84();
  swift_bridgeObjectRelease();
  result = sub_19E36FCF0();
  __break(1u);
  return result;
}

unint64_t sub_19E352C84()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EE503288;
  if (!qword_1EE503288)
  {
    v1 = sub_19E247E30(&qword_1EE503290);
    result = MEMORY[0x1A1AE8A18](MEMORY[0x1E0DEAF50], v1);
    atomic_store(result, (unint64_t *)&qword_1EE503288);
  }
  return result;
}

uint64_t sub_19E352CD0()
{
  uint64_t v0;

  v0 = sub_19E36F798();
  sub_19E3222DC(v0, qword_1EE500218);
  sub_19E3222C4(v0, (uint64_t)qword_1EE500218);
  return sub_19E36F78C();
}

id sub_19E352D50(id result)
{
  void *v1;
  uint64_t v2;
  id v3;
  NSObject *v4;
  os_log_type_t v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if (*((_BYTE *)v1 + OBJC_IVAR___IMNetworkMonitor_networkAvailable) != (result & 1))
  {
    if (qword_1EE500230 != -1)
      swift_once();
    v2 = sub_19E36F798();
    sub_19E3222C4(v2, (uint64_t)qword_1EE500218);
    v3 = v1;
    v4 = sub_19E36F780();
    v5 = sub_19E36FA80();
    if (os_log_type_enabled(v4, v5))
    {
      v6 = swift_slowAlloc();
      v11 = swift_slowAlloc();
      v12 = v11;
      *(_DWORD *)v6 = 136315650;
      v7 = objc_msgSend(v3, sel_debugDescription);
      v8 = sub_19E36F888();
      v10 = v9;

      sub_19E337764(v8, v10, &v12);
      sub_19E36FBD0();

      swift_bridgeObjectRelease();
      *(_WORD *)(v6 + 12) = 1024;
      sub_19E36FBD0();
      *(_WORD *)(v6 + 18) = 1024;
      sub_19E36FBD0();
      _os_log_impl(&dword_19E239000, v4, v5, "%s availability changed from %{BOOL}d to %{BOOL}d", (uint8_t *)v6, 0x18u);
      swift_arrayDestroy();
      MEMORY[0x1A1AE8ACC](v11, -1, -1);
      MEMORY[0x1A1AE8ACC](v6, -1, -1);

    }
    else
    {

    }
    return sub_19E352F78();
  }
  return result;
}

id sub_19E352F78()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  id result;
  id v10;
  void *v11;
  uint64_t v12;
  void *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD aBlock[6];

  v1 = sub_19E36F7BC();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1);
  v4 = (char *)&v15 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_19E36F7D4();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = (id)MEMORY[0x1A1AE8B50](&v0[OBJC_IVAR___IMNetworkMonitor_delegate]);
  if (result)
  {
    v10 = result;
    v16 = v5;
    v17 = v2;
    result = (id)im_primary_queue();
    if (result)
    {
      v11 = result;
      v12 = swift_allocObject();
      *(_QWORD *)(v12 + 16) = v10;
      *(_QWORD *)(v12 + 24) = v0;
      aBlock[4] = sub_19E353EE0;
      aBlock[5] = v12;
      aBlock[0] = MEMORY[0x1E0C809B0];
      aBlock[1] = 1107296256;
      aBlock[2] = sub_19E333388;
      aBlock[3] = &unk_1E3FB4C00;
      v13 = _Block_copy(aBlock);
      swift_unknownObjectRetain();
      v14 = v0;
      sub_19E36F7C8();
      v18 = MEMORY[0x1E0DEE9D8];
      sub_19E24C518((unint64_t *)&qword_1ECFC69D8, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
      sub_19E247E74((uint64_t *)&unk_1ECFC69E0);
      sub_19E24C410((unint64_t *)&qword_1ECFC6A08, (uint64_t *)&unk_1ECFC69E0);
      sub_19E36FC30();
      MEMORY[0x1A1AE71D0](0, v8, v4, v13);
      _Block_release(v13);
      swift_unknownObjectRelease();

      (*(void (**)(char *, uint64_t))(v17 + 8))(v4, v1);
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v16);
      return (id)swift_release();
    }
    else
    {
      __break(1u);
    }
  }
  return result;
}

uint64_t sub_19E353194()
{
  void *v0;
  uint64_t v1;
  id v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v12;

  if (qword_1EE500230 != -1)
    swift_once();
  v1 = sub_19E36F798();
  sub_19E3222C4(v1, (uint64_t)qword_1EE500218);
  v2 = v0;
  v3 = sub_19E36F780();
  v4 = sub_19E36FA80();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc();
    v6 = swift_slowAlloc();
    v12 = v6;
    *(_DWORD *)v5 = 136315138;
    v7 = objc_msgSend(v2, sel_debugDescription);
    v8 = sub_19E36F888();
    v10 = v9;

    sub_19E337764(v8, v10, &v12);
    sub_19E36FBD0();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_19E239000, v3, v4, "Starting path evaluator: %s", v5, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1A1AE8ACC](v6, -1, -1);
    MEMORY[0x1A1AE8ACC](v5, -1, -1);

  }
  else
  {

  }
  return nw_path_evaluator_start();
}

uint64_t sub_19E353404(uint64_t a1, unint64_t a2, uint64_t a3, int a4)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t);
  uint64_t v10;
  _BYTE *v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  _BOOL4 v18;
  uint64_t v19;
  uint8_t *v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  BOOL v25;
  uint8_t *v26;
  uint64_t v27;
  uint64_t evaluator_for_endpoint;
  uint64_t *v29;
  id v30;
  uint64_t v31;
  void *v32;
  uint64_t result;
  _QWORD v34[2];
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t aBlock[6];
  objc_super v44;

  v35 = a4;
  v34[1] = a3;
  v40 = a2;
  v36 = a1;
  v41 = sub_19E36FAD4();
  v5 = *(_QWORD *)(v41 - 8);
  MEMORY[0x1E0C80A78](v41);
  v7 = (char *)v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_19E36FAC8();
  v9 = (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF810];
  MEMORY[0x1E0C80A78](v8);
  v10 = sub_19E36F7D4();
  MEMORY[0x1E0C80A78](v10);
  v39 = OBJC_IVAR___IMNetworkMonitor_queue;
  v37 = sub_19E24B854(0, (unint64_t *)&qword_1ECFC6BA0);
  v11 = v4;
  sub_19E36F7C8();
  aBlock[0] = MEMORY[0x1E0DEE9D8];
  sub_19E24C518(&qword_1ECFC6B98, v9, MEMORY[0x1E0DEF828]);
  sub_19E247E74(&qword_1ECFC6B80);
  sub_19E24C410((unint64_t *)&unk_1ECFC6B88, &qword_1ECFC6B80);
  v12 = v40;
  v13 = v11;
  sub_19E36FC30();
  (*(void (**)(char *, _QWORD, uint64_t))(v5 + 104))(v7, *MEMORY[0x1E0DEF8D0], v41);
  *(_QWORD *)(v38 + v39) = sub_19E36FB10();
  swift_unknownObjectWeakInit();
  v11[OBJC_IVAR___IMNetworkMonitor_networkAvailable] = 1;
  if (v12)
  {
    v14 = qword_1EE500230;
    swift_bridgeObjectRetain();
    if (v14 != -1)
      swift_once();
    v15 = sub_19E36F798();
    sub_19E3222C4(v15, (uint64_t)qword_1EE500218);
    swift_bridgeObjectRetain();
    v16 = sub_19E36F780();
    v17 = sub_19E36FA80();
    v18 = os_log_type_enabled(v16, v17);
    v19 = v36;
    if (v18)
    {
      v20 = (uint8_t *)swift_slowAlloc();
      v21 = swift_slowAlloc();
      aBlock[0] = v21;
      *(_DWORD *)v20 = 136315138;
      swift_bridgeObjectRetain();
      v42 = sub_19E337764(v19, v12, aBlock);
      sub_19E36FBD0();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_19E239000, v16, v17, "Configuring IMNetworkMonitor for reachability to %s", v20, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1A1AE8ACC](v21, -1, -1);
      MEMORY[0x1A1AE8ACC](v20, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    v27 = sub_19E36F8AC();
    nw_endpoint_create_host((const char *)(v27 + 32), "0");
    swift_release();
  }
  else
  {
    if (qword_1EE500230 != -1)
      swift_once();
    v22 = sub_19E36F798();
    sub_19E3222C4(v22, (uint64_t)qword_1EE500218);
    v23 = sub_19E36F780();
    v24 = sub_19E36FA80();
    v25 = os_log_type_enabled(v23, v24);
    v19 = v36;
    if (v25)
    {
      v26 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v26 = 0;
      _os_log_impl(&dword_19E239000, v23, v24, "Configuring IMNetworkMonitor for general network reachability", v26, 2u);
      MEMORY[0x1A1AE8ACC](v26, -1, -1);
    }

  }
  nw_parameters_create();
  swift_unknownObjectRetain();
  nw_parameters_set_allow_ultra_constrained();
  evaluator_for_endpoint = nw_path_create_evaluator_for_endpoint();
  swift_unknownObjectRelease();
  if (evaluator_for_endpoint)
  {
    *(_QWORD *)&v13[OBJC_IVAR___IMNetworkMonitor_evaluator] = evaluator_for_endpoint;
    v29 = (uint64_t *)&v13[OBJC_IVAR___IMNetworkMonitor_host];
    *v29 = v19;
    v29[1] = v12;
    swift_unknownObjectWeakAssign();

    v44.receiver = v13;
    v44.super_class = (Class)IMNetworkMonitor;
    v30 = objc_msgSendSuper2(&v44, sel_init);
    nw_path_evaluator_set_queue();
    v31 = swift_allocObject();
    swift_unknownObjectWeakInit();
    aBlock[4] = (uint64_t)sub_19E353EA4;
    aBlock[5] = v31;
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)sub_19E353A78;
    aBlock[3] = (uint64_t)&unk_1E3FB4AC0;
    v32 = _Block_copy(aBlock);
    swift_unknownObjectRetain();
    swift_release();
    nw_path_evaluator_set_update_handler();
    _Block_release(v32);
    swift_unknownObjectRelease();
    sub_19E353194();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();

    swift_unknownObjectRelease();
    return (uint64_t)v30;
  }
  else
  {
    result = swift_bridgeObjectRelease();
    __break(1u);
  }
  return result;
}

void sub_19E3539F4(NSObject *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  BOOL v6;
  unint64_t v7;

  v3 = a2 + 16;
  swift_beginAccess();
  v4 = MEMORY[0x1A1AE8B50](v3);
  if (v4)
  {
    v5 = (_BYTE *)v4;
    if (a1)
      v6 = ((nw_path_get_status(a1) - 1) & 0xFFFFFFFD) == 0;
    else
      v6 = 0;
    v7 = v5[OBJC_IVAR___IMNetworkMonitor_networkAvailable];
    v5[OBJC_IVAR___IMNetworkMonitor_networkAvailable] = v6;
    sub_19E352D50((id)v7);

  }
}

uint64_t sub_19E353A78(uint64_t a1)
{
  void (*v1)(uint64_t);
  uint64_t v2;

  v1 = *(void (**)(uint64_t))(a1 + 32);
  swift_retain();
  v2 = swift_unknownObjectRetain();
  v1(v2);
  swift_release();
  return swift_unknownObjectRelease();
}

unint64_t sub_19E353BE4()
{
  uint64_t v0;

  sub_19E36FC84();
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(v0 + OBJC_IVAR___IMNetworkMonitor_host + 8))
  {
    sub_19E36F8C4();
    sub_19E36F8C4();
  }
  sub_19E36F8C4();
  swift_bridgeObjectRelease();
  sub_19E36F8C4();
  sub_19E36F8C4();
  swift_bridgeObjectRelease();
  sub_19E36F8C4();
  return 0xD000000000000017;
}

void __swiftcall IMNetworkMonitor.init()(IMNetworkMonitor *__return_ptr retstr)
{
  objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_init);
}

void IMNetworkMonitor.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t type metadata accessor for IMNetworkMonitor(uint64_t a1)
{
  return sub_19E24B854(a1, &qword_1EE5032C0);
}

uint64_t sub_19E353E80()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

void sub_19E353EA4(NSObject *a1)
{
  uint64_t v1;

  sub_19E3539F4(a1, v1);
}

uint64_t sub_19E353EAC()
{
  return swift_release();
}

uint64_t sub_19E353EB4()
{
  uint64_t v0;

  swift_unknownObjectRelease();

  return swift_deallocObject();
}

id sub_19E353EE0()
{
  uint64_t v0;

  return objc_msgSend(*(id *)(v0 + 16), sel_networkMonitorDidUpdate_, *(_QWORD *)(v0 + 24));
}

uint64_t sub_19E353EF8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t result;
  int64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  int64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  int64_t v30;
  uint64_t v31;
  uint64_t v32;

  v2 = a1 + 64;
  v29 = MEMORY[0x1E0DEE9E0];
  v32 = MEMORY[0x1E0DEE9E0];
  v3 = -1 << *(_BYTE *)(a1 + 32);
  if (-v3 < 64)
    v4 = ~(-1 << -(char)v3);
  else
    v4 = -1;
  v5 = v4 & *(_QWORD *)(a1 + 64);
  v30 = (unint64_t)(63 - v3) >> 6;
  result = swift_bridgeObjectRetain();
  v7 = 0;
  if (!v5)
    goto LABEL_8;
LABEL_5:
  v8 = __clz(__rbit64(v5));
  v5 &= v5 - 1;
  v9 = v8 | (v7 << 6);
  while (1)
  {
    v10 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v9);
    v11 = *v10;
    v12 = v10[1];
    swift_getKeyPath();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_getAtKeyPath();
    swift_release();
    if (v31)
    {
      v17 = v29;
      v18 = *(_QWORD *)(v29 + 16);
      if (*(_QWORD *)(v29 + 24) <= v18)
      {
        sub_19E360D4C(v18 + 1, 1);
        v17 = v32;
      }
      v29 = v17;
      sub_19E36FE88();
      sub_19E36F8B8();
      result = sub_19E36FEA0();
      v19 = v29 + 64;
      v20 = -1 << *(_BYTE *)(v29 + 32);
      v21 = result & ~v20;
      v22 = v21 >> 6;
      if (((-1 << v21) & ~*(_QWORD *)(v29 + 64 + 8 * (v21 >> 6))) == 0)
      {
        v24 = 0;
        v25 = (unint64_t)(63 - v20) >> 6;
        while (++v22 != v25 || (v24 & 1) == 0)
        {
          v26 = v22 == v25;
          if (v22 == v25)
            v22 = 0;
          v24 |= v26;
          v27 = *(_QWORD *)(v19 + 8 * v22);
          if (v27 != -1)
          {
            v23 = __clz(__rbit64(~v27)) + (v22 << 6);
            goto LABEL_36;
          }
        }
        goto LABEL_40;
      }
      v23 = __clz(__rbit64((-1 << v21) & ~*(_QWORD *)(v29 + 64 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
LABEL_36:
      *(_QWORD *)(v19 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v23;
      v28 = (_QWORD *)(*(_QWORD *)(v29 + 48) + 16 * v23);
      *v28 = v11;
      v28[1] = v12;
      *(_QWORD *)(*(_QWORD *)(v29 + 56) + 8 * v23) = v31;
      ++*(_QWORD *)(v29 + 16);
      result = swift_bridgeObjectRelease();
      if (v5)
        goto LABEL_5;
    }
    else
    {
      swift_bridgeObjectRelease();
      result = swift_bridgeObjectRelease();
      if (v5)
        goto LABEL_5;
    }
LABEL_8:
    v13 = v7 + 1;
    if (__OFADD__(v7, 1))
    {
      __break(1u);
LABEL_40:
      __break(1u);
      goto LABEL_41;
    }
    if (v13 >= v30)
      goto LABEL_38;
    v14 = *(_QWORD *)(v2 + 8 * v13);
    v15 = v7 + 1;
    if (!v14)
    {
      v15 = v7 + 2;
      if (v7 + 2 >= v30)
        goto LABEL_38;
      v14 = *(_QWORD *)(v2 + 8 * v15);
      if (!v14)
      {
        v15 = v7 + 3;
        if (v7 + 3 >= v30)
          goto LABEL_38;
        v14 = *(_QWORD *)(v2 + 8 * v15);
        if (!v14)
        {
          v15 = v7 + 4;
          if (v7 + 4 >= v30)
            goto LABEL_38;
          v14 = *(_QWORD *)(v2 + 8 * v15);
          if (!v14)
            break;
        }
      }
    }
LABEL_23:
    v5 = (v14 - 1) & v14;
    v9 = __clz(__rbit64(v14)) + (v15 << 6);
    v7 = v15;
  }
  v16 = v7 + 5;
  if (v7 + 5 >= v30)
  {
LABEL_38:
    sub_19E33A53C();
    return v29;
  }
  v14 = *(_QWORD *)(v2 + 8 * v16);
  if (v14)
  {
    v15 = v7 + 5;
    goto LABEL_23;
  }
  while (1)
  {
    v15 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v15 >= v30)
      goto LABEL_38;
    v14 = *(_QWORD *)(v2 + 8 * v15);
    ++v16;
    if (v14)
      goto LABEL_23;
  }
LABEL_41:
  __break(1u);
  return result;
}

void *sub_19E354230(unint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  id v4;
  void *v5;
  uint64_t v6;

  if (a1 >> 62)
    goto LABEL_14;
  v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v2; v2 = sub_19E36FCFC())
  {
    v3 = 4;
    while (1)
    {
      v4 = (a1 & 0xC000000000000001) != 0 ? (id)MEMORY[0x1A1AE7368](v3 - 4, a1) : *(id *)(a1 + 8 * v3);
      v5 = v4;
      v6 = v3 - 3;
      if (__OFADD__(v3 - 4, 1))
        break;
      if (objc_msgSend(v4, sel_isFinal))
      {
        swift_bridgeObjectRelease();
        return v5;
      }

      ++v3;
      if (v6 == v2)
        goto LABEL_10;
    }
    __break(1u);
LABEL_14:
    swift_bridgeObjectRetain();
  }
LABEL_10:
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t sub_19E354328()
{
  uint64_t v0;

  v0 = sub_19E36F798();
  sub_19E3222DC(v0, qword_1EE5005C0);
  sub_19E3222C4(v0, (uint64_t)qword_1EE5005C0);
  return sub_19E36F78C();
}

uint64_t sub_19E3543A8()
{
  uint64_t *v0;
  uint64_t *v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  void *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  id v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint8_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  uint8_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  NSObject *v37;
  os_log_type_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;

  v1 = v0;
  v2 = v0[2];
  v47 = v2;
  if (!(v2 >> 62))
  {
    v3 = *(_QWORD *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v3)
      goto LABEL_3;
LABEL_36:
    sub_19E359E90((uint64_t)&v47);
    return 1;
  }
LABEL_35:
  swift_bridgeObjectRetain();
  v3 = sub_19E36FCFC();
  if (!v3)
    goto LABEL_36;
LABEL_3:
  v45 = v2 & 0xC000000000000001;
  v4 = 4;
  v42 = v1;
  v43 = v3;
  v44 = v2;
  while (1)
  {
    if (v45)
      v5 = (id)MEMORY[0x1A1AE7368](v4 - 4, v2);
    else
      v5 = *(id *)(v2 + 8 * v4);
    v6 = v5;
    v7 = v4 - 3;
    if (__OFADD__(v4 - 4, 1))
    {
      __break(1u);
      goto LABEL_35;
    }
    sub_19E24B854(0, (unint64_t *)&unk_1EE500620);
    v8 = (void *)sub_19E36F81C();
    v9 = (void *)sub_19E36FA44();
    v10 = objc_msgSend(v6, sel_evaluateWithLatestResults_requestedServices_, v8, v9);

    if (v10 != (id)1)
      break;
    if (qword_1EE5005A8 != -1)
      swift_once();
    v11 = sub_19E36F798();
    sub_19E3222C4(v11, (uint64_t)qword_1EE5005C0);
    v13 = *v1;
    v12 = v1[1];
    sub_19E359E40((uint64_t)&v47);
    swift_bridgeObjectRetain();
    swift_retain();
    sub_19E359E40((uint64_t)&v47);
    swift_bridgeObjectRetain();
    swift_retain();
    v14 = sub_19E36F780();
    v15 = sub_19E36FAA4();
    if (os_log_type_enabled(v14, v15))
    {
      v16 = v6;
      v17 = swift_slowAlloc();
      v18 = swift_slowAlloc();
      v46 = v18;
      *(_DWORD *)v17 = 136446210;
      swift_bridgeObjectRetain();
      *(_QWORD *)(v17 + 4) = sub_19E337764(v13, v12, &v46);
      swift_bridgeObjectRelease_n();
      sub_19E359E90((uint64_t)&v47);
      swift_bridgeObjectRelease();
      swift_release();
      sub_19E359E90((uint64_t)&v47);
      swift_release();
      _os_log_impl(&dword_19E239000, v14, v15, "Reachability request ID %{public}s may begin", (uint8_t *)v17, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1A1AE8ACC](v18, -1, -1);
      MEMORY[0x1A1AE8ACC](v17, -1, -1);

      v1 = v42;
    }
    else
    {
      swift_bridgeObjectRelease();

      sub_19E359E90((uint64_t)&v47);
      swift_bridgeObjectRelease();
      swift_release();
      sub_19E359E90((uint64_t)&v47);

      swift_release();
    }
    v2 = v44;
    ++v4;
    if (v7 == v43)
      goto LABEL_36;
  }
  if (v10)
  {
    if (v10 == (id)2)
    {
      sub_19E359E90((uint64_t)&v47);
      if (qword_1EE5005A8 != -1)
        swift_once();
      v19 = sub_19E36F798();
      sub_19E3222C4(v19, (uint64_t)qword_1EE5005C0);
      v20 = *v1;
      v21 = v1[1];
      sub_19E359E40((uint64_t)&v47);
      swift_bridgeObjectRetain();
      swift_retain();
      sub_19E359E40((uint64_t)&v47);
      swift_bridgeObjectRetain();
      swift_retain();
      v22 = sub_19E36F780();
      v23 = sub_19E36FAA4();
      if (os_log_type_enabled(v22, v23))
      {
        v24 = (uint8_t *)swift_slowAlloc();
        v25 = swift_slowAlloc();
        v46 = v25;
        *(_DWORD *)v24 = 136446210;
        swift_bridgeObjectRetain();
        sub_19E337764(v20, v21, &v46);
        sub_19E36FBD0();
        v26 = 2;
        swift_bridgeObjectRelease_n();
        sub_19E359E90((uint64_t)&v47);
        swift_bridgeObjectRelease();
        swift_release();
        sub_19E359E90((uint64_t)&v47);
        swift_release();
        _os_log_impl(&dword_19E239000, v22, v23, "Reachability request ID %{public}s should be skipped", v24, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1A1AE8ACC](v25, -1, -1);
        MEMORY[0x1A1AE8ACC](v24, -1, -1);

        return v26;
      }
      swift_bridgeObjectRelease();
      sub_19E359E90((uint64_t)&v47);
      swift_bridgeObjectRelease();
      swift_release();
      sub_19E359E90((uint64_t)&v47);

    }
    else
    {
      sub_19E359E90((uint64_t)&v47);
      if (qword_1EE5005A8 != -1)
        swift_once();
      v34 = sub_19E36F798();
      sub_19E3222C4(v34, (uint64_t)qword_1EE5005C0);
      v35 = *v1;
      v36 = v1[1];
      sub_19E359E40((uint64_t)&v47);
      swift_bridgeObjectRetain();
      swift_retain();
      sub_19E359E40((uint64_t)&v47);
      swift_bridgeObjectRetain();
      swift_retain();
      v37 = sub_19E36F780();
      v38 = sub_19E36FA98();
      if (os_log_type_enabled(v37, v38))
      {
        v39 = swift_slowAlloc();
        v40 = swift_slowAlloc();
        v46 = v40;
        *(_DWORD *)v39 = 134218242;
        sub_19E36FBD0();
        *(_WORD *)(v39 + 12) = 2082;
        swift_bridgeObjectRetain();
        sub_19E337764(v35, v36, &v46);
        sub_19E36FBD0();
        v26 = 2;
        swift_bridgeObjectRelease_n();
        sub_19E359E90((uint64_t)&v47);
        swift_bridgeObjectRelease();
        swift_release();
        sub_19E359E90((uint64_t)&v47);
        swift_release();
        _os_log_impl(&dword_19E239000, v37, v38, "Unknown precondition result %lu for request ID %{public}s", (uint8_t *)v39, 0x16u);
        swift_arrayDestroy();
        MEMORY[0x1A1AE8ACC](v40, -1, -1);
        MEMORY[0x1A1AE8ACC](v39, -1, -1);

        return v26;
      }
      swift_bridgeObjectRelease();

      sub_19E359E90((uint64_t)&v47);
      swift_bridgeObjectRelease();
      swift_release();
      sub_19E359E90((uint64_t)&v47);

    }
    swift_release();
    return 2;
  }
  else
  {
    sub_19E359E90((uint64_t)&v47);
    if (qword_1EE5005A8 != -1)
      swift_once();
    v27 = sub_19E36F798();
    sub_19E3222C4(v27, (uint64_t)qword_1EE5005C0);
    v29 = *v1;
    v28 = v1[1];
    sub_19E359E40((uint64_t)&v47);
    swift_bridgeObjectRetain();
    swift_retain();
    sub_19E359E40((uint64_t)&v47);
    swift_bridgeObjectRetain();
    swift_retain();
    v30 = sub_19E36F780();
    v31 = sub_19E36FA8C();
    if (os_log_type_enabled(v30, v31))
    {
      v32 = (uint8_t *)swift_slowAlloc();
      v33 = swift_slowAlloc();
      v46 = v33;
      *(_DWORD *)v32 = 136446210;
      swift_bridgeObjectRetain();
      sub_19E337764(v29, v28, &v46);
      sub_19E36FBD0();
      swift_bridgeObjectRelease_n();
      sub_19E359E90((uint64_t)&v47);
      swift_bridgeObjectRelease();
      swift_release();
      sub_19E359E90((uint64_t)&v47);
      swift_release();
      _os_log_impl(&dword_19E239000, v30, v31, "Reachability request ID %{public}s should continue to wait", v32, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1A1AE8ACC](v33, -1, -1);
      MEMORY[0x1A1AE8ACC](v32, -1, -1);

    }
    else
    {
      swift_bridgeObjectRelease();

      sub_19E359E90((uint64_t)&v47);
      swift_bridgeObjectRelease();
      swift_release();
      sub_19E359E90((uint64_t)&v47);

      swift_release();
    }
    return 0;
  }
}

uint64_t sub_19E354CDC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  _QWORD *v18;
  void *v19;
  uint64_t ObjectType;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  void (*v26)(char *, _QWORD, uint64_t);
  uint64_t v27;
  char *v28;
  void (*v29)(char *, uint64_t);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD aBlock[6];

  v5 = sub_19E36F7A4();
  v39 = *(_QWORD *)(v5 - 8);
  v40 = v5;
  v6 = MEMORY[0x1E0C80A78](v5);
  v34 = (char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v38 = (char *)&v31 - v8;
  v9 = sub_19E36F7F8();
  v36 = *(_QWORD *)(v9 - 8);
  v37 = v9;
  MEMORY[0x1E0C80A78](v9);
  v35 = (char *)&v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_19E36F7BC();
  v32 = *(_QWORD *)(v11 - 8);
  v33 = v11;
  MEMORY[0x1E0C80A78](v11);
  v13 = (char *)&v31 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_19E36F7D4();
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x1E0C80A78](v14);
  v17 = (char *)&v31 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_getObjectType();
  v18 = (_QWORD *)swift_allocObject();
  v18[2] = a1;
  v18[3] = a2;
  v18[4] = v2;
  aBlock[4] = sub_19E35B698;
  aBlock[5] = v18;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_19E333388;
  aBlock[3] = &unk_1E3FB1990;
  v19 = _Block_copy(aBlock);
  swift_unknownObjectRetain();
  swift_retain();
  swift_retain();
  sub_19E36F7C8();
  sub_19E355010();
  sub_19E36FB4C();
  _Block_release(v19);
  swift_unknownObjectRelease();
  (*(void (**)(char *, uint64_t))(v32 + 8))(v13, v33);
  (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
  swift_release();
  swift_getObjectType();
  swift_unknownObjectRetain();
  sub_19E36FB64();
  swift_unknownObjectRelease();
  ObjectType = swift_getObjectType();
  v22 = v35;
  v21 = v36;
  v23 = v37;
  (*(void (**)(char *, uint64_t, uint64_t))(v36 + 16))(v35, v2+ OBJC_IVAR____TtCE17IMSharedUtilitiesCSo23IMServiceForSendingTaskP33_3EED2FA8A158671F213145B6668888AC8Deadline_time, v37);
  v25 = v38;
  v24 = v39;
  v26 = *(void (**)(char *, _QWORD, uint64_t))(v39 + 104);
  v27 = v40;
  v26(v38, *MEMORY[0x1E0DEF498], v40);
  v28 = v34;
  *(_QWORD *)v34 = 0;
  v26(v28, *MEMORY[0x1E0DEF480], v27);
  swift_unknownObjectRetain();
  MEMORY[0x1A1AE723C](v22, v25, v28, ObjectType);
  swift_unknownObjectRelease();
  v29 = *(void (**)(char *, uint64_t))(v24 + 8);
  v29(v28, v27);
  v29(v25, v27);
  return (*(uint64_t (**)(char *, uint64_t))(v21 + 8))(v22, v23);
}

uint64_t sub_19E355010()
{
  sub_19E36F7BC();
  sub_19E24C518((unint64_t *)&qword_1ECFC69D8, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
  sub_19E247E74((uint64_t *)&unk_1ECFC69E0);
  sub_19E359FB8((unint64_t *)&qword_1ECFC6A08, (uint64_t *)&unk_1ECFC69E0, MEMORY[0x1E0DEAF38]);
  return sub_19E36FC30();
}

uint64_t sub_19E3550C4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0
     + OBJC_IVAR____TtCE17IMSharedUtilitiesCSo23IMServiceForSendingTaskP33_3EED2FA8A158671F213145B6668888AC8Deadline_time;
  v2 = sub_19E36F7F8();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  swift_unknownObjectRelease();
  return swift_deallocClassInstance();
}

id sub_19E3551A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v3;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  id v19;
  objc_super v21;

  swift_unknownObjectWeakInit();
  *(_QWORD *)&v3[OBJC_IVAR___IMServiceForSendingTask_requestedServices] = MEMORY[0x1E0DEE9E8];
  v6 = OBJC_IVAR___IMServiceForSendingTask_requestIDToResults;
  v7 = v3;
  v8 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)&v3[v6] = sub_19E32E048(MEMORY[0x1E0DEE9D8]);
  v9 = OBJC_IVAR___IMServiceForSendingTask_pendingRequests;
  *(_QWORD *)&v7[v9] = sub_19E32E160(v8);
  *(_QWORD *)&v7[OBJC_IVAR___IMServiceForSendingTask_deadline] = 0;
  *(_QWORD *)&v7[OBJC_IVAR___IMServiceForSendingTask_latestBestResult] = 0;
  swift_unknownObjectWeakAssign();
  v10 = &v7[OBJC_IVAR___IMServiceForSendingTask_updateHandler];
  *(_QWORD *)v10 = a2;
  *((_QWORD *)v10 + 1) = a3;
  v11 = sub_19E36F660();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11);
  v14 = (char *)&v21 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_retain();
  sub_19E36F654();
  v15 = sub_19E36F648();
  v17 = v16;
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  v18 = (uint64_t *)&v7[OBJC_IVAR___IMServiceForSendingTask_taskID];
  *v18 = v15;
  v18[1] = v17;

  v21.receiver = v7;
  v21.super_class = (Class)IMServiceForSendingTask;
  v19 = objc_msgSendSuper2(&v21, sel_init);
  sub_19E355338();

  swift_unknownObjectRelease();
  swift_release();
  return v19;
}

id sub_19E355338()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char v14;
  id result;
  void *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(char *, uint64_t);
  uint64_t v21;
  char *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;

  v1 = sub_19E36FB28();
  v32 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1);
  v31 = (char *)&v27 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_19E36F7A4();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (uint64_t *)((char *)&v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = sub_19E36F7F8();
  v28 = *(_QWORD *)(v7 - 8);
  v29 = v7;
  v8 = MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8);
  v12 = (char *)&v27 - v11;
  v30 = OBJC_IVAR___IMServiceForSendingTask_deadline;
  v13 = *(_QWORD *)&v0[OBJC_IVAR___IMServiceForSendingTask_deadline];
  if (v13)
  {
    v27 = v1;
    swift_getObjectType();
    swift_retain();
    swift_unknownObjectRetain();
    v14 = sub_19E36FB40();
    swift_unknownObjectRelease();
    if ((v14 & 1) != 0
      || *(_BYTE *)(v13
                  + OBJC_IVAR____TtCE17IMSharedUtilitiesCSo23IMServiceForSendingTaskP33_3EED2FA8A158671F213145B6668888AC8Deadline_fired) == 1)
    {
      swift_release();
    }
    else
    {
      swift_getObjectType();
      swift_unknownObjectRetain();
      sub_19E36FB58();
      swift_release();
      swift_unknownObjectRelease();
    }
    v1 = v27;
  }
  result = objc_msgSend(v0, sel_delegate);
  if (result)
  {
    v16 = result;
    sub_19E36F7E0();
    *v6 = objc_msgSend(v16, sel_taskDeadlineSeconds);
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(v4 + 104))(v6, *MEMORY[0x1E0DEF4A0], v3);
    v27 = (uint64_t)v16;
    v17 = v0;
    sub_19E36F7EC();
    (*(void (**)(_QWORD *, uint64_t))(v4 + 8))(v6, v3);
    v18 = v28;
    v19 = v29;
    v20 = *(void (**)(char *, uint64_t))(v28 + 8);
    v20(v10, v29);
    _s8DeadlineCMa();
    v21 = swift_allocObject();
    *(_BYTE *)(v21
             + OBJC_IVAR____TtCE17IMSharedUtilitiesCSo23IMServiceForSendingTaskP33_3EED2FA8A158671F213145B6668888AC8Deadline_fired) = 0;
    (*(void (**)(uint64_t, char *, uint64_t))(v18 + 16))(v21+ OBJC_IVAR____TtCE17IMSharedUtilitiesCSo23IMServiceForSendingTaskP33_3EED2FA8A158671F213145B6668888AC8Deadline_time, v12, v19);
    sub_19E24B854(0, &qword_1EE5005E0);
    v22 = v31;
    sub_19E36FB1C();
    sub_19E24B854(0, (unint64_t *)&qword_1ECFC6BA0);
    v23 = (void *)sub_19E36FAE0();
    v24 = sub_19E36FB34();

    v20(v12, v19);
    (*(void (**)(char *, uint64_t))(v32 + 8))(v22, v1);
    *(_QWORD *)(v21
              + OBJC_IVAR____TtCE17IMSharedUtilitiesCSo23IMServiceForSendingTaskP33_3EED2FA8A158671F213145B6668888AC8Deadline_timer) = v24;
    v25 = swift_allocObject();
    *(_QWORD *)(v25 + 16) = v17;
    v26 = v17;
    sub_19E354CDC((uint64_t)sub_19E35B63C, v25);
    swift_release();
    swift_unknownObjectRelease();
    *(_QWORD *)&v17[v30] = v21;
    return (id)swift_release();
  }
  return result;
}

void sub_19E35571C()
{
  void *v0;
  uint64_t v1;
  char *v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;

  if (qword_1EE5005A8 != -1)
    swift_once();
  v1 = sub_19E36F798();
  sub_19E3222C4(v1, (uint64_t)qword_1EE5005C0);
  v2 = v0;
  v3 = sub_19E36F780();
  v4 = sub_19E36FA80();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc();
    v6 = swift_slowAlloc();
    v13 = v6;
    *(_DWORD *)v5 = 136446210;
    v7 = objc_msgSend(v2, sel_taskID);
    v8 = sub_19E36F888();
    v10 = v9;

    sub_19E337764(v8, v10, &v13);
    sub_19E36FBD0();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_19E239000, v3, v4, "%{public}s deadline timer fired", v5, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1A1AE8ACC](v6, -1, -1);
    MEMORY[0x1A1AE8ACC](v5, -1, -1);

  }
  else
  {

  }
  v11 = *(_QWORD *)&v2[OBJC_IVAR___IMServiceForSendingTask_deadline];
  if (v11)
  {
    swift_getObjectType();
    swift_retain();
    swift_unknownObjectRetain();
    v12 = sub_19E36FB40();
    swift_unknownObjectRelease();
    if ((v12 & 1) != 0
      || (*(_BYTE *)(v11
                   + OBJC_IVAR____TtCE17IMSharedUtilitiesCSo23IMServiceForSendingTaskP33_3EED2FA8A158671F213145B6668888AC8Deadline_fired) & 1) != 0)
    {
      swift_release();
    }
    else
    {
      swift_getObjectType();
      swift_unknownObjectRetain();
      sub_19E36FB58();
      swift_release();
      swift_unknownObjectRelease();
    }
    sub_19E35689C();
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_19E355988(void *a1, void *a2)
{
  void *v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  void *v11;
  _QWORD *v12;
  void *v13;
  id v14;
  id v15;
  id v16;
  uint64_t v18;
  uint64_t v19;
  _QWORD aBlock[6];

  v5 = sub_19E36F7BC();
  v19 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_19E36F7D4();
  v8 = *(_QWORD *)(v18 - 8);
  MEMORY[0x1E0C80A78](v18);
  v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_19E24B854(0, (unint64_t *)&qword_1ECFC6BA0);
  v11 = (void *)sub_19E36FAE0();
  v12 = (_QWORD *)swift_allocObject();
  v12[2] = v2;
  v12[3] = a1;
  v12[4] = a2;
  aBlock[4] = sub_19E359F88;
  aBlock[5] = v12;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_19E333388;
  aBlock[3] = &unk_1E3FB4AE8;
  v13 = _Block_copy(aBlock);
  v14 = v2;
  v15 = a1;
  v16 = a2;
  swift_release();
  sub_19E36F7C8();
  aBlock[0] = MEMORY[0x1E0DEE9D8];
  sub_19E24C518((unint64_t *)&qword_1ECFC69D8, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
  sub_19E247E74((uint64_t *)&unk_1ECFC69E0);
  sub_19E359FB8((unint64_t *)&qword_1ECFC6A08, (uint64_t *)&unk_1ECFC69E0, MEMORY[0x1E0DEAF38]);
  sub_19E36FC30();
  MEMORY[0x1A1AE71D0](0, v10, v7, v13);
  _Block_release(v13);

  (*(void (**)(char *, uint64_t))(v19 + 8))(v7, v5);
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v18);
}

void sub_19E355BAC(void *a1, void *a2)
{
  char *v2;
  void *v3;
  uint64_t *v6;
  uint64_t v7;
  char **v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  char v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char v21;
  unint64_t v22;
  uint64_t v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  NSObject *v30;
  os_log_type_t v31;
  uint64_t v32;
  id v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  id v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  id v41;
  id v42;
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  uint64_t v48;
  id v49;
  id v50;
  id v51;
  NSObject *v52;
  id v53;
  id v54;
  NSObject *v55;
  os_log_type_t v56;
  uint64_t v57;
  NSObject *v58;
  id v59;
  id v60;
  uint64_t v61;
  id v62;
  void *v63;
  void *v64;
  void *v65;
  void *v66;
  uint64_t v67;
  id v68;
  id v69;
  id v70;
  id v71;
  id v72;
  id v73;
  NSObject *v74;
  os_log_type_t v75;
  uint64_t v76;
  id v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  id v81;
  uint64_t v82;
  unint64_t v83;
  unint64_t v84;
  id v85;
  uint64_t v86;
  unint64_t v87;
  unint64_t v88;
  id v89;
  uint64_t v90;
  unint64_t v91;
  unint64_t v92;
  id v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  id v97;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v99;
  char v100;
  unint64_t v101;
  uint64_t v102;
  _BOOL8 v103;
  uint64_t v104;
  char v105;
  unint64_t v106;
  char v107;
  _QWORD *v108;
  uint64_t v109;
  uint64_t v110;
  _QWORD *v111;
  void *v112;
  os_log_type_t type;
  _QWORD *v114;
  void *v115;
  uint64_t v116;
  id v117;
  id v118;
  NSObject *v119;
  uint64_t v120[3];
  uint64_t v121;

  v3 = v2;
  v6 = (uint64_t *)&v2[OBJC_IVAR___IMServiceForSendingTask_requestIDToResults];
  swift_beginAccess();
  v7 = *v6;
  swift_bridgeObjectRetain();
  v8 = &selRef_propertyListWithData_options_format_error_;
  v9 = objc_msgSend(a1, sel_requestID);
  v10 = sub_19E36F888();
  v12 = v11;

  if (!*(_QWORD *)(v7 + 16))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_7;
  }
  sub_19E3247E4(v10, v12);
  v14 = v13;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v14 & 1) == 0)
  {
LABEL_7:
    if (qword_1EE5005A8 != -1)
      swift_once();
    v23 = sub_19E36F798();
    sub_19E3222C4(v23, (uint64_t)qword_1EE5005C0);
    v24 = a2;
    v25 = a1;
    v26 = v3;
    v27 = v24;
    v28 = v25;
    v29 = v26;
    v30 = sub_19E36F780();
    v31 = sub_19E36FA98();
    if (os_log_type_enabled(v30, v31))
    {
      v32 = swift_slowAlloc();
      v114 = (_QWORD *)swift_slowAlloc();
      v117 = (id)swift_slowAlloc();
      v120[0] = (uint64_t)v117;
      *(_DWORD *)v32 = 136446722;
      v33 = objc_msgSend(v29, sel_taskID);
      v34 = sub_19E36F888();
      v36 = v35;

      v121 = sub_19E337764(v34, v36, v120);
      sub_19E36FBD0();

      swift_bridgeObjectRelease();
      *(_WORD *)(v32 + 12) = 2082;
      v37 = objc_msgSend(v28, sel_requestID);
      v38 = sub_19E36F888();
      v40 = v39;

      v121 = sub_19E337764(v38, v40, v120);
      sub_19E36FBD0();

      swift_bridgeObjectRelease();
      *(_WORD *)(v32 + 22) = 2112;
      v121 = (uint64_t)v27;
      v41 = v27;
      sub_19E36FBD0();
      *v114 = v27;

      _os_log_impl(&dword_19E239000, v30, v31, "%{public}s dropping reachability update for untracked request %{public}s %@", (uint8_t *)v32, 0x20u);
      sub_19E247E74(&qword_1EE5006C0);
      swift_arrayDestroy();
      MEMORY[0x1A1AE8ACC](v114, -1, -1);
      swift_arrayDestroy();
      MEMORY[0x1A1AE8ACC](v117, -1, -1);
      MEMORY[0x1A1AE8ACC](v32, -1, -1);

    }
    else
    {

    }
    v42 = objc_msgSend((id)objc_opt_self(), sel_sharedInstance);
    if (v42)
    {
      v43 = v42;
      v44 = (void *)sub_19E36F864();
      v45 = (void *)sub_19E36F864();
      v46 = (void *)sub_19E36F864();
      objc_msgSend(v43, sel_forceAutoBugCaptureWithSubType_errorPayload_type_context_, v44, 0, v45, v46);

      return;
    }
    __break(1u);
    goto LABEL_41;
  }
  v15 = objc_msgSend(a1, sel_requestID);
  v16 = sub_19E36F888();
  v18 = v17;

  swift_beginAccess();
  v19 = *v6;
  if (*(_QWORD *)(*v6 + 16) && (v20 = sub_19E3247E4(v16, v18), (v21 & 1) != 0))
  {
    v22 = *(_QWORD *)(*(_QWORD *)(v19 + 56) + 8 * v20);
    swift_bridgeObjectRetain();
  }
  else
  {
    v22 = MEMORY[0x1E0DEE9D8];
  }
  swift_bridgeObjectRelease();
  swift_endAccess();
  v47 = sub_19E354230(v22);
  swift_bridgeObjectRelease();
  if (!v47)
    goto LABEL_23;
  if (qword_1EE5005A8 != -1)
    swift_once();
  v48 = sub_19E36F798();
  sub_19E3222C4(v48, (uint64_t)qword_1EE5005C0);
  v115 = a2;
  v49 = a2;
  v50 = a1;
  v51 = v47;
  v52 = v49;
  v53 = v50;
  v54 = v51;
  v55 = sub_19E36F780();
  v56 = sub_19E36FA98();
  if (os_log_type_enabled(v55, v56))
  {
    v118 = v54;
    v57 = swift_slowAlloc();
    v111 = (_QWORD *)swift_slowAlloc();
    *(_DWORD *)v57 = 138412802;
    v112 = v47;
    v58 = v52;
    sub_19E36FBD0();
    *v111 = v52;

    *(_WORD *)(v57 + 12) = 2112;
    v59 = v53;
    sub_19E36FBD0();
    v111[1] = v53;

    *(_WORD *)(v57 + 22) = 2112;
    v120[0] = (uint64_t)v118;
    v60 = v118;
    sub_19E36FBD0();
    v111[2] = v112;

    _os_log_impl(&dword_19E239000, v55, v56, "Received an updated result %@ for a reachability request %@ after receiving the final result %@", (uint8_t *)v57, 0x20u);
    sub_19E247E74(&qword_1EE5006C0);
    swift_arrayDestroy();
    MEMORY[0x1A1AE8ACC](v111, -1, -1);
    v61 = v57;
    v54 = v118;
    MEMORY[0x1A1AE8ACC](v61, -1, -1);
  }
  else
  {

    v55 = v52;
  }

  v62 = objc_msgSend((id)objc_opt_self(), sel_sharedInstance);
  v8 = &selRef_propertyListWithData_options_format_error_;
  if (!v62)
  {
LABEL_41:
    __break(1u);
    goto LABEL_42;
  }
  v63 = v62;
  v64 = (void *)sub_19E36F864();
  v65 = (void *)sub_19E36F864();
  v66 = (void *)sub_19E36F864();
  objc_msgSend(v63, sel_forceAutoBugCaptureWithSubType_errorPayload_type_context_, v64, 0, v65, v66);

  a2 = v115;
LABEL_23:
  if (qword_1EE5005A8 != -1)
    swift_once();
  v67 = sub_19E36F798();
  sub_19E3222C4(v67, (uint64_t)qword_1EE5005C0);
  v68 = a1;
  v69 = a2;
  v70 = v68;
  v71 = v3;
  v72 = v69;
  v73 = v70;
  v119 = v71;
  v74 = sub_19E36F780();
  v75 = sub_19E36FA80();
  if (os_log_type_enabled(v74, v75))
  {
    v76 = swift_slowAlloc();
    v116 = swift_slowAlloc();
    v120[0] = v116;
    *(_DWORD *)v76 = 136446978;
    v77 = -[NSObject taskID](v119, sel_taskID);
    v78 = sub_19E36F888();
    type = v75;
    v80 = v79;

    v121 = sub_19E337764(v78, v80, v120);
    sub_19E36FBD0();

    swift_bridgeObjectRelease();
    *(_WORD *)(v76 + 12) = 2082;
    v81 = objc_msgSend(v73, sel_requestID);
    v82 = sub_19E36F888();
    v84 = v83;

    v121 = sub_19E337764(v82, v84, v120);
    sub_19E36FBD0();

    swift_bridgeObjectRelease();
    *(_WORD *)(v76 + 22) = 2082;
    v85 = objc_msgSend(v73, sel_serviceName);
    v86 = sub_19E36F888();
    v88 = v87;

    v121 = sub_19E337764(v86, v88, v120);
    sub_19E36FBD0();

    swift_bridgeObjectRelease();
    *(_WORD *)(v76 + 32) = 2080;
    v89 = objc_msgSend(v72, sel_description);
    v90 = sub_19E36F888();
    v92 = v91;

    v121 = sub_19E337764(v90, v92, v120);
    v8 = &selRef_propertyListWithData_options_format_error_;
    sub_19E36FBD0();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_19E239000, v74, type, "%{public}s received reachability update for request %{public}s on service %{public}s: %s", (uint8_t *)v76, 0x2Au);
    swift_arrayDestroy();
    MEMORY[0x1A1AE8ACC](v116, -1, -1);
    MEMORY[0x1A1AE8ACC](v76, -1, -1);
  }
  else
  {

    v74 = v119;
  }

  v93 = objc_msgSend(v73, v8[104]);
  v94 = sub_19E36F888();
  v96 = v95;

  swift_beginAccess();
  v97 = v72;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v121 = *v6;
  v99 = v121;
  *v6 = 0x8000000000000000;
  v101 = sub_19E3247E4(v94, v96);
  v102 = *(_QWORD *)(v99 + 16);
  v103 = (v100 & 1) == 0;
  v104 = v102 + v103;
  if (__OFADD__(v102, v103))
  {
    __break(1u);
LABEL_39:
    sub_19E36F984();
LABEL_37:
    sub_19E36F99C();
    sub_19E36F978();
    swift_endAccess();
    swift_bridgeObjectRelease();
    sub_19E35689C();
    return;
  }
  v105 = v100;
  if (*(_QWORD *)(v99 + 24) >= v104)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      sub_19E359A80();
LABEL_34:
    *v6 = v121;
    swift_bridgeObjectRelease();
    v108 = (_QWORD *)*v6;
    swift_bridgeObjectRetain();
    if ((v105 & 1) == 0)
    {
      sub_19E32FE14(v101, v94, v96, MEMORY[0x1E0DEE9D8], v108);
      swift_bridgeObjectRetain();
    }
    v109 = v108[7];
    v110 = swift_bridgeObjectRelease();
    MEMORY[0x1A1AE7014](v110);
    if (*(_QWORD *)((*(_QWORD *)(v109 + 8 * v101) & 0xFFFFFFFFFFFFFF8) + 0x10) < *(_QWORD *)((*(_QWORD *)(v109 + 8 * v101) & 0xFFFFFFFFFFFFFF8)
                                                                                              + 0x18) >> 1)
      goto LABEL_37;
    goto LABEL_39;
  }
  sub_19E3613B8(v104, isUniquelyReferenced_nonNull_native);
  v106 = sub_19E3247E4(v94, v96);
  if ((v105 & 1) == (v107 & 1))
  {
    v101 = v106;
    goto LABEL_34;
  }
LABEL_42:
  sub_19E36FE4C();
  __break(1u);
}

void sub_19E35689C()
{
  char *v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  void (*v17)(char *, uint64_t);
  uint64_t v18;
  char *v19;
  NSObject *v20;
  os_log_type_t v21;
  int v22;
  uint64_t v23;
  uint8_t *v24;
  uint64_t v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  char *v32;
  uint8_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  NSObject *v38;
  os_log_type_t v39;
  uint8_t *v40;
  uint64_t v41;
  id v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  char *v51;
  uint64_t v52;
  NSObject *v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  id v59;
  void *v60;
  uint64_t v61;
  void *v62;
  id v63;
  uint64_t v64;
  id v65;
  uint64_t v66;
  char *v67;
  NSObject *v68;
  os_log_type_t v69;
  uint64_t v70;
  uint8_t *v71;
  uint64_t v72;
  id v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint8_t *v79;
  uint64_t v80;
  id v81;
  char *v82;
  void *v83;
  id v84;
  uint64_t v85;
  char *v86;
  id v87;
  char *v88;
  NSObject *v89;
  os_log_type_t v90;
  uint64_t v91;
  _QWORD *v92;
  id v93;
  uint64_t v94;
  unint64_t v95;
  unint64_t v96;
  char *v97;
  NSObject *v98;
  id v99;
  void *v100;
  uint64_t v101;
  void *v102;
  char *v103;
  char *v104;
  char *v105;
  char *v106;
  uint64_t v107;
  _QWORD v108[2];
  uint8_t *v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  NSObject *v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  char *v120;
  uint64_t v121;
  uint64_t aBlock[7];
  uint64_t v123;

  v1 = v0;
  v2 = sub_19E36F7BC();
  v118 = *(_QWORD *)(v2 - 8);
  v119 = v2;
  MEMORY[0x1E0C80A78](v2);
  v117 = (char *)v108 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_19E36F7D4();
  v115 = *(_QWORD *)(v4 - 8);
  v116 = v4;
  MEMORY[0x1E0C80A78](v4);
  v114 = (char *)v108 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_19E36F7F8();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = MEMORY[0x1E0C80A78](v6);
  v10 = (char *)v108 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8);
  v12 = (char *)v108 - v11;
  v13 = OBJC_IVAR___IMServiceForSendingTask_deadline;
  v14 = *(_QWORD *)&v0[OBJC_IVAR___IMServiceForSendingTask_deadline];
  if (!v14)
  {
    __break(1u);
LABEL_62:
    __break(1u);
    goto LABEL_63;
  }
  swift_retain();
  sub_19E36F7E0();
  v120 = *(char **)(v7 + 16);
  ((void (*)(char *, uint64_t, uint64_t))v120)(v10, v14+ OBJC_IVAR____TtCE17IMSharedUtilitiesCSo23IMServiceForSendingTaskP33_3EED2FA8A158671F213145B6668888AC8Deadline_time, v6);
  v15 = sub_19E24C518(&qword_1EE5005D8, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF6B8], MEMORY[0x1E0DEF6C8]);
  v16 = sub_19E36F84C();
  v17 = *(void (**)(char *, uint64_t))(v7 + 8);
  v17(v10, v6);
  v17(v12, v6);
  swift_release();
  if ((v16 & 1) == 0 && sub_19E358194())
  {
    if (qword_1EE5005A8 != -1)
      swift_once();
    v18 = sub_19E36F798();
    sub_19E3222C4(v18, (uint64_t)qword_1EE5005C0);
    v19 = v1;
    v20 = sub_19E36F780();
    v21 = sub_19E36FAA4();
    v22 = v21;
    if (os_log_type_enabled(v20, v21))
    {
      v23 = swift_slowAlloc();
      LODWORD(v110) = v22;
      v24 = (uint8_t *)v23;
      v111 = swift_slowAlloc();
      aBlock[0] = v111;
      v113 = v20;
      v109 = v24;
      *(_DWORD *)v24 = 136446210;
      v108[1] = v24 + 4;
      v25 = v13;
      v26 = objc_msgSend(v19, sel_taskID);
      v27 = sub_19E36F888();
      v112 = v19;
      v28 = v27;
      v108[0] = v15;
      v30 = v29;

      v13 = v25;
      v31 = v28;
      v32 = v112;
      v123 = sub_19E337764(v31, v30, aBlock);
      sub_19E36FBD0();

      swift_bridgeObjectRelease();
      v33 = v109;
      _os_log_impl(&dword_19E239000, v113, (os_log_type_t)v110, "%{public}s ran additional requests that were no longer waiting, extending timer", v109, 0xCu);
      v34 = v111;
      swift_arrayDestroy();
      MEMORY[0x1A1AE8ACC](v34, -1, -1);
      MEMORY[0x1A1AE8ACC](v33, -1, -1);

    }
    else
    {

    }
    sub_19E355338();
  }
  if ((sub_19E358808() & 1) == 0)
  {
    if (qword_1EE5005A8 == -1)
      goto LABEL_14;
    goto LABEL_44;
  }
  if ((sub_19E358634() & 1) != 0)
  {
    v35 = v13;
    LODWORD(v13) = 1;
  }
  else
  {
    v46 = *(_QWORD *)&v1[v13];
    if (!v46)
    {
LABEL_63:
      __break(1u);
      goto LABEL_64;
    }
    v35 = v13;
    swift_retain();
    sub_19E36F7E0();
    ((void (*)(char *, uint64_t, uint64_t))v120)(v10, v46+ OBJC_IVAR____TtCE17IMSharedUtilitiesCSo23IMServiceForSendingTaskP33_3EED2FA8A158671F213145B6668888AC8Deadline_time, v6);
    LODWORD(v13) = sub_19E36F84C();
    v17(v10, v6);
    v17(v12, v6);
    swift_release();
  }
  if ((sub_19E358634() & 1) != 0)
  {
    v47 = 0;
  }
  else
  {
    v48 = *(_QWORD *)&v1[v35];
    if (!v48)
    {
LABEL_64:
      __break(1u);
      goto LABEL_65;
    }
    swift_retain();
    sub_19E36F7E0();
    ((void (*)(char *, uint64_t, uint64_t))v120)(v10, v48+ OBJC_IVAR____TtCE17IMSharedUtilitiesCSo23IMServiceForSendingTaskP33_3EED2FA8A158671F213145B6668888AC8Deadline_time, v6);
    v47 = sub_19E36F84C();
    v17(v10, v6);
    v17(v12, v6);
    swift_release();
  }
  if ((sub_19E358634() & 1) != 0)
  {
    v49 = *(_QWORD *)&v1[v35];
    if (!v49)
    {
LABEL_65:
      __break(1u);

      swift_release();
      __break(1u);
      return;
    }
    swift_getObjectType();
    swift_retain();
    swift_unknownObjectRetain();
    v50 = sub_19E36FB40();
    swift_unknownObjectRelease();
    if ((v50 & 1) != 0
      || *(_BYTE *)(v49
                  + OBJC_IVAR____TtCE17IMSharedUtilitiesCSo23IMServiceForSendingTaskP33_3EED2FA8A158671F213145B6668888AC8Deadline_fired) == 1)
    {
      swift_release();
    }
    else
    {
      swift_getObjectType();
      swift_unknownObjectRetain();
      sub_19E36FB58();
      swift_release();
      swift_unknownObjectRelease();
    }
  }
  v51 = &v1[OBJC_IVAR___IMServiceForSendingTask_requestIDToResults];
  swift_beginAccess();
  v52 = swift_bridgeObjectRetain();
  v53 = 0;
  sub_19E353EF8(v52);
  swift_bridgeObjectRelease();
  v1 = v1;
  v54 = swift_bridgeObjectRetain();
  v55 = sub_19E337E9C(v54);
  swift_bridgeObjectRelease();
  aBlock[0] = (uint64_t)v55;
  sub_19E35B520(aBlock, v1);
  swift_bridgeObjectRelease();

  v56 = aBlock[0];
  if ((aBlock[0] & 0x8000000000000000) == 0 && (aBlock[0] & 0x4000000000000000) == 0)
  {
    v57 = *(_QWORD *)(aBlock[0] + 16);
    swift_retain();
    if (v57)
      goto LABEL_32;
    goto LABEL_46;
  }
  swift_retain();
  v57 = sub_19E36FCFC();
  if (!v57)
  {
LABEL_46:
    swift_release_n();
    v60 = 0;
LABEL_47:
    v62 = *(void **)&v1[OBJC_IVAR___IMServiceForSendingTask_latestBestResult];
    *(_QWORD *)&v1[OBJC_IVAR___IMServiceForSendingTask_latestBestResult] = v60;
    v63 = v60;

    if ((v47 & (v60 != 0)) != 0)
    {
      v64 = qword_1EE5005A8;
      v65 = v63;
      if (v64 != -1)
        swift_once();
      v66 = sub_19E36F798();
      sub_19E3222C4(v66, (uint64_t)qword_1EE5005C0);
      v67 = v1;
      v68 = sub_19E36F780();
      v69 = sub_19E36FA80();
      if (os_log_type_enabled(v68, v69))
      {
        v113 = v53;
        v70 = swift_slowAlloc();
        v111 = (uint64_t)v65;
        v71 = (uint8_t *)v70;
        v72 = swift_slowAlloc();
        LODWORD(v112) = v13;
        v110 = v72;
        aBlock[0] = v72;
        v120 = v51;
        *(_DWORD *)v71 = 136446210;
        v109 = v71 + 4;
        v73 = objc_msgSend(v67, sel_taskID);
        v13 = (uint64_t)v63;
        v74 = sub_19E36F888();
        v76 = v75;

        v77 = v74;
        v63 = (id)v13;
        v121 = sub_19E337764(v77, v76, aBlock);
        sub_19E36FBD0();

        swift_bridgeObjectRelease();
        _os_log_impl(&dword_19E239000, v68, v69, "%{public}s terminating due to deadline fired, marking current best result as final", v71, 0xCu);
        v78 = v110;
        swift_arrayDestroy();
        LOBYTE(v13) = (_BYTE)v112;
        MEMORY[0x1A1AE8ACC](v78, -1, -1);
        v79 = v71;
        v65 = (id)v111;
        MEMORY[0x1A1AE8ACC](v79, -1, -1);

      }
      else
      {

      }
      objc_msgSend(v65, sel_setFinal_, 1);

    }
    v80 = swift_bridgeObjectRetain();
    sub_19E353EF8(v80);
    swift_bridgeObjectRelease();
    v81 = objc_allocWithZone((Class)IMServiceForSendingResult);
    sub_19E24B854(0, (unint64_t *)&unk_1EE500620);
    v82 = (char *)v63;
    v83 = (void *)sub_19E36F81C();
    swift_bridgeObjectRelease();
    v84 = objc_msgSend(v81, sel_initAsFinalResult_bestResult_resultsByAccountID_, v13 & 1, v82, v83);

    v120 = v82;
    if (qword_1EE5005A8 != -1)
      swift_once();
    v85 = sub_19E36F798();
    sub_19E3222C4(v85, (uint64_t)qword_1EE5005C0);
    v86 = v1;
    v87 = v84;
    v88 = v86;
    v1 = (char *)v87;
    v89 = sub_19E36F780();
    v90 = sub_19E36FA80();
    if (os_log_type_enabled(v89, v90))
    {
      v91 = swift_slowAlloc();
      v92 = (_QWORD *)swift_slowAlloc();
      v113 = swift_slowAlloc();
      aBlock[0] = (uint64_t)v113;
      *(_DWORD *)v91 = 136446466;
      v93 = objc_msgSend(v88, sel_taskID);
      v94 = sub_19E36F888();
      v96 = v95;

      v121 = sub_19E337764(v94, v96, aBlock);
      sub_19E36FBD0();

      swift_bridgeObjectRelease();
      *(_WORD *)(v91 + 12) = 2112;
      v121 = (uint64_t)v1;
      v97 = v1;
      sub_19E36FBD0();
      *v92 = v1;

      _os_log_impl(&dword_19E239000, v89, v90, "%{public}s updating with result %@", (uint8_t *)v91, 0x16u);
      sub_19E247E74(&qword_1EE5006C0);
      swift_arrayDestroy();
      MEMORY[0x1A1AE8ACC](v92, -1, -1);
      v98 = v113;
      swift_arrayDestroy();
      MEMORY[0x1A1AE8ACC](v98, -1, -1);
      MEMORY[0x1A1AE8ACC](v91, -1, -1);

    }
    else
    {

    }
    v99 = (id)im_primary_queue();
    if (v99)
    {
      v100 = v99;
      v101 = swift_allocObject();
      *(_QWORD *)(v101 + 16) = v88;
      *(_QWORD *)(v101 + 24) = v1;
      aBlock[4] = (uint64_t)sub_19E35B5E8;
      aBlock[5] = v101;
      aBlock[0] = MEMORY[0x1E0C809B0];
      aBlock[1] = 1107296256;
      aBlock[2] = (uint64_t)sub_19E333388;
      aBlock[3] = (uint64_t)&unk_1E3FB2960;
      v102 = _Block_copy(aBlock);
      v103 = v88;
      v104 = v1;
      v105 = v114;
      sub_19E36F7C8();
      v121 = MEMORY[0x1E0DEE9D8];
      sub_19E24C518((unint64_t *)&qword_1ECFC69D8, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
      sub_19E247E74((uint64_t *)&unk_1ECFC69E0);
      sub_19E359FB8((unint64_t *)&qword_1ECFC6A08, (uint64_t *)&unk_1ECFC69E0, MEMORY[0x1E0DEAF38]);
      v106 = v117;
      v107 = v119;
      sub_19E36FC30();
      MEMORY[0x1A1AE71D0](0, v105, v106, v102);
      _Block_release(v102);

      (*(void (**)(char *, uint64_t))(v118 + 8))(v106, v107);
      (*(void (**)(char *, uint64_t))(v115 + 8))(v105, v116);
      swift_release();
      return;
    }
    goto LABEL_62;
  }
LABEL_32:
  LODWORD(v112) = v47;
  v113 = 0;
  v120 = v51;
  v47 = v13;
  v58 = 4;
  while (1)
  {
    v59 = (v56 & 0xC000000000000001) != 0
        ? (id)MEMORY[0x1A1AE7368](v58 - 4, v56)
        : *(id *)(v56 + 8 * v58);
    v60 = v59;
    v61 = v58 - 3;
    if (__OFADD__(v58 - 4, 1))
      break;
    if (objc_msgSend(v59, sel_allAreReachable) && !objc_msgSend(v60, sel_error))
    {
      swift_release_n();
LABEL_42:
      LODWORD(v13) = v47;
      v51 = v120;
      v53 = v113;
      LOBYTE(v47) = (_BYTE)v112;
      goto LABEL_47;
    }

    ++v58;
    if (v61 == v57)
    {
      swift_release_n();
      v60 = 0;
      goto LABEL_42;
    }
  }
  __break(1u);
LABEL_44:
  swift_once();
LABEL_14:
  v36 = sub_19E36F798();
  sub_19E3222C4(v36, (uint64_t)qword_1EE5005C0);
  v37 = v1;
  v38 = sub_19E36F780();
  v39 = sub_19E36FA80();
  if (os_log_type_enabled(v38, v39))
  {
    v40 = (uint8_t *)swift_slowAlloc();
    v41 = swift_slowAlloc();
    aBlock[0] = v41;
    *(_DWORD *)v40 = 136446210;
    v42 = objc_msgSend(v37, sel_taskID);
    v43 = sub_19E36F888();
    v45 = v44;

    v123 = sub_19E337764(v43, v45, aBlock);
    sub_19E36FBD0();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_19E239000, v38, v39, "%{public}s called to update but criteria unmet", v40, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1A1AE8ACC](v41, -1, -1);
    MEMORY[0x1A1AE8ACC](v40, -1, -1);

  }
  else
  {

  }
}

void __swiftcall IMServiceForSendingTask.init()(IMServiceForSendingTask *__return_ptr retstr)
{
  objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_init);
}

void IMServiceForSendingTask.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t sub_19E357790()
{
  return _s8DeadlineCMa();
}

uint64_t _s8DeadlineCMa()
{
  uint64_t result;

  result = qword_1EE500608;
  if (!qword_1EE500608)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_19E3577D4()
{
  uint64_t result;
  unint64_t v1;

  result = sub_19E36F7F8();
  if (v1 <= 0x3F)
  {
    result = swift_updateClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t type metadata accessor for IMServiceForSendingTask(uint64_t a1)
{
  return sub_19E24B854(a1, &qword_1EE500618);
}

uint64_t sub_19E3579C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t *v16;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v19;
  uint64_t v20;
  _QWORD v21[5];

  v8 = v7;
  swift_beginAccess();
  swift_bridgeObjectRetain();
  sub_19E338304(&v20, a3, a4);
  swift_endAccess();
  swift_bridgeObjectRelease();
  v21[0] = a1;
  v21[1] = a2;
  v21[2] = a5;
  v21[3] = a6;
  v21[4] = a7;
  v16 = (uint64_t *)(v8 + OBJC_IVAR___IMServiceForSendingTask_pendingRequests);
  swift_beginAccess();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  swift_retain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v19 = *v16;
  *v16 = 0x8000000000000000;
  sub_19E32F9F4((uint64_t)v21, a1, a2, isUniquelyReferenced_nonNull_native);
  *v16 = v19;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_endAccess();
}

uint64_t sub_19E357C10()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t result;
  int64_t v8;
  unint64_t i;
  int64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v25;
  uint64_t *v26;
  unint64_t v27;
  char v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t *v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  int64_t v43;
  uint64_t v44;
  int64_t v45;
  uint64_t v46;
  uint64_t v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  __int128 v51;
  _QWORD v52[2];

  swift_beginAccess();
  v1 = swift_bridgeObjectRetain();
  sub_19E353EF8(v1);
  swift_bridgeObjectRelease();
  v2 = (uint64_t *)(v0 + OBJC_IVAR___IMServiceForSendingTask_pendingRequests);
  swift_beginAccess();
  v3 = *v2;
  v42 = *v2 + 64;
  v4 = 1 << *(_BYTE *)(*v2 + 32);
  v5 = -1;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  v6 = v5 & *(_QWORD *)(*v2 + 64);
  swift_bridgeObjectRetain();
  result = swift_beginAccess();
  v8 = 0;
  v43 = (unint64_t)(v4 + 63) >> 6;
  v40 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  v41 = v3;
  if (v6)
    goto LABEL_7;
LABEL_8:
  v10 = v8 + 1;
  if (!__OFADD__(v8, 1))
  {
    if (v10 < v43)
    {
      v11 = *(_QWORD *)(v42 + 8 * v10);
      v12 = v8 + 1;
      if (v11)
        goto LABEL_21;
      v12 = v8 + 2;
      if (v8 + 2 >= v43)
        goto LABEL_39;
      v11 = *(_QWORD *)(v42 + 8 * v12);
      if (v11)
        goto LABEL_21;
      v12 = v8 + 3;
      if (v8 + 3 >= v43)
        goto LABEL_39;
      v11 = *(_QWORD *)(v42 + 8 * v12);
      if (v11)
      {
LABEL_21:
        v44 = (v11 - 1) & v11;
        v45 = v12;
        for (i = __clz(__rbit64(v11)) + (v12 << 6); ; i = __clz(__rbit64(v6)) | (v8 << 6))
        {
          v14 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * i);
          v16 = *v14;
          v15 = v14[1];
          v17 = *(_QWORD *)(v3 + 56) + 40 * i;
          v48 = *(_OWORD *)v17;
          v49 = *(_OWORD *)(v17 + 16);
          v50 = *(_QWORD *)(v17 + 32);
          v51 = *(_OWORD *)v17;
          v52[0] = v49;
          swift_bridgeObjectRetain();
          sub_19E359E18((uint64_t)&v51);
          sub_19E359E40((uint64_t)v52);
          swift_retain();
          swift_bridgeObjectRetain();
          v18 = sub_19E3543A8();
          swift_bridgeObjectRelease();
          if (!v18)
            break;
          if (v18 != 1)
          {
            swift_beginAccess();
            swift_bridgeObjectRetain();
            v19 = sub_19E3247E4(v16, v15);
            v21 = v20;
            swift_bridgeObjectRelease();
            v22 = 0;
            v23 = 0;
            if ((v21 & 1) != 0)
            {
              isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
              v25 = *v2;
              v46 = *v2;
              *v2 = 0x8000000000000000;
              if (!isUniquelyReferenced_nonNull_native)
              {
                sub_19E359888();
                v25 = v46;
              }
              swift_bridgeObjectRelease();
              v26 = (uint64_t *)(*(_QWORD *)(v25 + 56) + 40 * v19);
              v22 = *v26;
              v23 = v26[1];
              sub_19E359184(v19, v25);
              *v2 = v25;
              swift_bridgeObjectRelease();
              v3 = v41;
            }
            swift_endAccess();
            sub_19E359E68((uint64_t)&v51);
            sub_19E359E90((uint64_t)v52);
            swift_release();
            sub_19E359EB8(v22, v23);
            result = swift_bridgeObjectRelease();
LABEL_6:
            v6 = v44;
            v8 = v45;
            if (!v44)
              goto LABEL_8;
            goto LABEL_7;
          }
          swift_beginAccess();
          swift_bridgeObjectRetain();
          v27 = sub_19E3247E4(v16, v15);
          v29 = v28;
          swift_bridgeObjectRelease();
          v30 = 0;
          v31 = 0;
          if ((v29 & 1) != 0)
          {
            v32 = v27;
            v33 = swift_isUniquelyReferenced_nonNull_native();
            v34 = *v2;
            v47 = *v2;
            *v2 = 0x8000000000000000;
            if (!v33)
            {
              sub_19E359888();
              v34 = v47;
            }
            swift_bridgeObjectRelease();
            v35 = (uint64_t *)(*(_QWORD *)(v34 + 56) + 40 * v32);
            v31 = v35[1];
            v36 = v32;
            v30 = *v35;
            sub_19E359184(v36, v34);
            *v2 = v34;
            swift_bridgeObjectRelease();
          }
          swift_endAccess();
          sub_19E359EB8(v30, v31);
          swift_bridgeObjectRelease();
          sub_19E359E18((uint64_t)&v51);
          sub_19E359E40((uint64_t)v52);
          swift_retain();
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v40 = sub_19E36A6DC(0, v40[2] + 1, 1, v40);
          v6 = v44;
          v38 = v40[2];
          v37 = v40[3];
          if (v38 >= v37 >> 1)
            v40 = sub_19E36A6DC((_QWORD *)(v37 > 1), v38 + 1, 1, v40);
          v40[2] = v38 + 1;
          v39 = &v40[5 * v38];
          v39[8] = v50;
          *((_OWORD *)v39 + 2) = v48;
          *((_OWORD *)v39 + 3) = v49;
          sub_19E359E68((uint64_t)&v51);
          sub_19E359E90((uint64_t)v52);
          result = swift_release();
          v8 = v45;
          if (!v44)
            goto LABEL_8;
LABEL_7:
          v44 = (v6 - 1) & v6;
          v45 = v8;
        }
        sub_19E359E68((uint64_t)&v51);
        sub_19E359E90((uint64_t)v52);
        swift_bridgeObjectRelease();
        result = swift_release();
        goto LABEL_6;
      }
      v13 = v8 + 4;
      if (v8 + 4 < v43)
      {
        v11 = *(_QWORD *)(v42 + 8 * v13);
        if (v11)
        {
          v12 = v8 + 4;
          goto LABEL_21;
        }
        while (1)
        {
          v12 = v13 + 1;
          if (__OFADD__(v13, 1))
            goto LABEL_41;
          if (v12 >= v43)
            break;
          v11 = *(_QWORD *)(v42 + 8 * v12);
          ++v13;
          if (v11)
            goto LABEL_21;
        }
      }
    }
LABEL_39:
    swift_bridgeObjectRelease();
    swift_release();
    return (uint64_t)v40;
  }
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

BOOL sub_19E358194()
{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(void);
  void *v6;
  uint64_t v8;

  v1 = v0;
  v2 = sub_19E357C10();
  v3 = *(_QWORD *)(v2 + 16);
  if (v3)
  {
    swift_bridgeObjectRetain();
    v4 = v2 + 64;
    v8 = v3;
    do
    {
      v5 = *(void (**)(void))(v4 - 8);
      v4 += 40;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_retain();
      v6 = (void *)sub_19E36F864();
      objc_msgSend(v1, sel_beganRequestWithID_, v6);

      v5();
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      --v3;
    }
    while (v3);
    swift_bridgeObjectRelease();
    v3 = v8;
  }
  swift_bridgeObjectRelease();
  return v3 != 0;
}

unint64_t sub_19E35842C@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t result;
  id v6;

  v3 = *a1;
  if ((unint64_t)*a1 >> 62)
  {
    swift_bridgeObjectRetain();
    v4 = sub_19E36FCFC();
    if (!v4)
      goto LABEL_9;
  }
  else
  {
    v4 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (!v4)
    {
LABEL_9:
      result = swift_bridgeObjectRelease();
      *a2 = v4;
      return result;
    }
  }
  result = v4 - 1;
  if (__OFSUB__(v4, 1))
  {
    __break(1u);
    goto LABEL_13;
  }
  if ((v3 & 0xC000000000000001) != 0)
  {
LABEL_13:
    v6 = (id)MEMORY[0x1A1AE7368](result, v3);
    goto LABEL_8;
  }
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (result < *(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v6 = *(id *)(v3 + 8 * result + 32);
LABEL_8:
    v4 = (uint64_t)v6;
    goto LABEL_9;
  }
  __break(1u);
  return result;
}

BOOL sub_19E3584F0()
{
  uint64_t v0;
  uint64_t v1;
  _BOOL8 v2;
  unint64_t v3;
  uint64_t v4;

  v1 = v0 + OBJC_IVAR___IMServiceForSendingTask_pendingRequests;
  swift_beginAccess();
  if (*(_QWORD *)(*(_QWORD *)v1 + 16))
    return 0;
  swift_beginAccess();
  swift_bridgeObjectRetain_n();
  do
  {
    v3 = sub_19E35A1AC();
    v2 = v3 == 0;
    if (!v3)
      break;
    v4 = v3 >> 62 ? sub_19E36FCFC() : *(_QWORD *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRelease();
  }
  while (v4);
  sub_19E33A53C();
  swift_bridgeObjectRelease();
  return v2;
}

uint64_t sub_19E358628@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *(_QWORD *)(a1 + 16);
  return swift_bridgeObjectRetain();
}

uint64_t sub_19E358634()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int64_t v6;
  uint64_t result;
  int64_t v8;
  unint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;

  if (!sub_19E3584F0())
    return 0;
  swift_beginAccess();
  v0 = swift_bridgeObjectRetain();
  v1 = sub_19E353EF8(v0);
  swift_bridgeObjectRelease();
  v2 = v1 + 64;
  v3 = 1 << *(_BYTE *)(v1 + 32);
  v4 = -1;
  if (v3 < 64)
    v4 = ~(-1 << v3);
  v5 = v4 & *(_QWORD *)(v1 + 64);
  v6 = (unint64_t)(v3 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v8 = 0;
  while (v5)
  {
    v9 = __clz(__rbit64(v5));
    v5 &= v5 - 1;
    v10 = v9 | (v8 << 6);
LABEL_6:
    result = (uint64_t)objc_msgSend(*(id *)(*(_QWORD *)(v1 + 56) + 8 * v10), sel_isFinal);
    if ((result & 1) == 0)
    {
      v14 = 0;
LABEL_29:
      swift_release();
      swift_bridgeObjectRelease();
      return v14;
    }
  }
  v11 = v8 + 1;
  if (__OFADD__(v8, 1))
  {
    __break(1u);
    goto LABEL_32;
  }
  if (v11 >= v6)
    goto LABEL_28;
  v12 = *(_QWORD *)(v2 + 8 * v11);
  ++v8;
  if (v12)
    goto LABEL_25;
  v8 = v11 + 1;
  if (v11 + 1 >= v6)
    goto LABEL_28;
  v12 = *(_QWORD *)(v2 + 8 * v8);
  if (v12)
    goto LABEL_25;
  v8 = v11 + 2;
  if (v11 + 2 >= v6)
    goto LABEL_28;
  v12 = *(_QWORD *)(v2 + 8 * v8);
  if (v12)
    goto LABEL_25;
  v8 = v11 + 3;
  if (v11 + 3 >= v6)
    goto LABEL_28;
  v12 = *(_QWORD *)(v2 + 8 * v8);
  if (v12)
    goto LABEL_25;
  v8 = v11 + 4;
  if (v11 + 4 >= v6)
    goto LABEL_28;
  v12 = *(_QWORD *)(v2 + 8 * v8);
  if (v12)
  {
LABEL_25:
    v5 = (v12 - 1) & v12;
    v10 = __clz(__rbit64(v12)) + (v8 << 6);
    goto LABEL_6;
  }
  v13 = v11 + 5;
  if (v13 >= v6)
  {
LABEL_28:
    v14 = 1;
    goto LABEL_29;
  }
  v12 = *(_QWORD *)(v2 + 8 * v13);
  if (v12)
  {
    v8 = v13;
    goto LABEL_25;
  }
  while (1)
  {
    v8 = v13 + 1;
    if (__OFADD__(v13, 1))
      break;
    if (v8 >= v6)
      goto LABEL_28;
    v12 = *(_QWORD *)(v2 + 8 * v8);
    ++v13;
    if (v12)
      goto LABEL_25;
  }
LABEL_32:
  __break(1u);
  return result;
}

uint64_t sub_19E358808()
{
  char *v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t result;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  const char *v21;
  NSObject *v22;
  os_log_type_t v23;
  uint8_t *v24;
  uint32_t v25;
  char v26;
  void (*v27)(char *, uint64_t);
  uint64_t v28;
  char *v29;
  NSObject *v30;
  os_log_type_t v31;
  uint8_t *v32;
  uint64_t v33;
  id v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  os_log_type_t v40;
  id v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  char *v45;
  uint64_t v46;
  _DWORD v47[4];
  uint64_t v48[3];
  uint64_t v49;

  v1 = v0;
  v2 = sub_19E36F7F8();
  v3 = *(_QWORD *)(v2 - 8);
  v4 = MEMORY[0x1E0C80A78](v2);
  v6 = (char *)v47 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = MEMORY[0x1E0C80A78](v4);
  v9 = (char *)v47 - v8;
  v10 = *(_QWORD *)&v1[OBJC_IVAR___IMServiceForSendingTask_deadline];
  if (v10)
  {
    if ((*(_BYTE *)(v10
                   + OBJC_IVAR____TtCE17IMSharedUtilitiesCSo23IMServiceForSendingTaskP33_3EED2FA8A158671F213145B6668888AC8Deadline_fired) & 1) != 0)
    {
      if (qword_1EE5005A8 != -1)
        swift_once();
      v11 = sub_19E36F798();
      sub_19E3222C4(v11, (uint64_t)qword_1EE5005C0);
      v12 = v1;
      v13 = sub_19E36F780();
      v14 = sub_19E36FA80();
      if (os_log_type_enabled(v13, v14))
      {
        v15 = swift_slowAlloc();
        v16 = swift_slowAlloc();
        v48[0] = v16;
        *(_DWORD *)v15 = 136446210;
        v17 = objc_msgSend(v12, sel_taskID);
        v18 = sub_19E36F888();
        v20 = v19;

        v49 = sub_19E337764(v18, v20, v48);
        sub_19E36FBD0();

        swift_bridgeObjectRelease();
        v21 = "%{public}s cannot update anymore: deadline fired";
        v22 = v13;
        v23 = v14;
        v24 = (uint8_t *)v15;
        v25 = 12;
LABEL_20:
        _os_log_impl(&dword_19E239000, v22, v23, v21, v24, v25);
        swift_arrayDestroy();
        MEMORY[0x1A1AE8ACC](v16, -1, -1);
        MEMORY[0x1A1AE8ACC](v15, -1, -1);

        return 0;
      }

    }
    else
    {
      swift_retain();
      sub_19E36F7E0();
      (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v6, v10+ OBJC_IVAR____TtCE17IMSharedUtilitiesCSo23IMServiceForSendingTaskP33_3EED2FA8A158671F213145B6668888AC8Deadline_time, v2);
      sub_19E24C518(&qword_1EE5005D8, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF6B8], MEMORY[0x1E0DEF6C8]);
      v26 = sub_19E36F84C();
      v27 = *(void (**)(char *, uint64_t))(v3 + 8);
      v27(v6, v2);
      v27(v9, v2);
      swift_release();
      if ((v26 & 1) != 0)
      {
        if (qword_1EE5005A8 != -1)
          swift_once();
        v28 = sub_19E36F798();
        sub_19E3222C4(v28, (uint64_t)qword_1EE5005C0);
        v29 = v1;
        v30 = sub_19E36F780();
        v31 = sub_19E36FA80();
        if (os_log_type_enabled(v30, v31))
        {
          v32 = (uint8_t *)swift_slowAlloc();
          v33 = swift_slowAlloc();
          v48[0] = v33;
          *(_DWORD *)v32 = 136446210;
          v34 = objc_msgSend(v29, sel_taskID);
          v35 = sub_19E36F888();
          v37 = v36;

          v49 = sub_19E337764(v35, v37, v48);
          sub_19E36FBD0();

          swift_bridgeObjectRelease();
          _os_log_impl(&dword_19E239000, v30, v31, "%{public}s cannot update anymore: deadline exceeded", v32, 0xCu);
          v38 = 1;
          swift_arrayDestroy();
          MEMORY[0x1A1AE8ACC](v33, -1, -1);
          MEMORY[0x1A1AE8ACC](v32, -1, -1);

        }
        else
        {

          return 1;
        }
        return v38;
      }
      if (sub_19E3584F0())
        return 1;
      if (qword_1EE5005A8 != -1)
        swift_once();
      v39 = sub_19E36F798();
      sub_19E3222C4(v39, (uint64_t)qword_1EE5005C0);
      v12 = v1;
      v13 = sub_19E36F780();
      v40 = sub_19E36FA80();
      if (os_log_type_enabled(v13, v40))
      {
        v15 = swift_slowAlloc();
        v16 = swift_slowAlloc();
        v49 = v16;
        *(_DWORD *)v15 = 136446466;
        v41 = objc_msgSend(v12, sel_taskID);
        v42 = sub_19E36F888();
        v44 = v43;

        v48[0] = sub_19E337764(v42, v44, &v49);
        sub_19E36FBD0();

        swift_bridgeObjectRelease();
        *(_WORD *)(v15 + 12) = 1024;
        v45 = &v12[OBJC_IVAR___IMServiceForSendingTask_pendingRequests];
        swift_beginAccess();
        v46 = *(_QWORD *)(*(_QWORD *)v45 + 16);

        v47[3] = v46 != 0;
        sub_19E36FBD0();

        v21 = "%{public}s cannot update: don't have all results (has pending: %{BOOL}d)";
        v22 = v13;
        v23 = v40;
        v24 = (uint8_t *)v15;
        v25 = 18;
        goto LABEL_20;
      }

    }
    return 0;
  }
  __break(1u);
  return result;
}

uint64_t sub_19E358E14(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  unint64_t v6;
  char v7;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v3 = v2;
  swift_bridgeObjectRetain();
  v6 = sub_19E3247E4(a1, a2);
  LOBYTE(a2) = v7;
  swift_bridgeObjectRelease();
  if ((a2 & 1) == 0)
    return 0;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v9 = *v3;
  v12 = *v3;
  *v3 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_19E3596D4();
    v9 = v12;
  }
  swift_bridgeObjectRelease();
  v10 = *(_QWORD *)(*(_QWORD *)(v9 + 56) + 8 * v6);
  sub_19E358FB0(v6, v9);
  *v3 = v9;
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t sub_19E358EE0(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  unint64_t v6;
  char v7;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v3 = v2;
  swift_bridgeObjectRetain();
  v6 = sub_19E3247E4(a1, a2);
  LOBYTE(a2) = v7;
  swift_bridgeObjectRelease();
  if ((a2 & 1) == 0)
    return 0;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v9 = *v3;
  v12 = *v3;
  *v3 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_19E359A80();
    v9 = v12;
  }
  swift_bridgeObjectRelease();
  v10 = *(_QWORD *)(*(_QWORD *)(v9 + 56) + 8 * v6);
  sub_19E358FB0(v6, v9);
  *v3 = v9;
  swift_bridgeObjectRelease();
  return v10;
}

unint64_t sub_19E358FB0(unint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  _OWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = sub_19E36FC3C();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        sub_19E36FE88();
        swift_bridgeObjectRetain();
        sub_19E36F8B8();
        v9 = sub_19E36FEA0();
        result = swift_bridgeObjectRelease();
        v10 = v9 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v10 < v8)
            goto LABEL_5;
        }
        else if (v10 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v10)
        {
LABEL_11:
          v11 = *(_QWORD *)(a2 + 48);
          v12 = (_OWORD *)(v11 + 16 * v3);
          v13 = (_OWORD *)(v11 + 16 * v6);
          if (v3 != v6 || v12 >= v13 + 1)
            *v12 = *v13;
          v14 = *(_QWORD *)(a2 + 56);
          v15 = (_QWORD *)(v14 + 8 * v3);
          v16 = (_QWORD *)(v14 + 8 * v6);
          if (v3 != v6 || (v3 = v6, v15 >= v16 + 1))
          {
            *v15 = *v16;
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v17 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v18 = *v17;
    v19 = (-1 << v3) - 1;
  }
  else
  {
    v17 = (uint64_t *)(v4 + 8 * (result >> 6));
    v19 = *v17;
    v18 = (-1 << result) - 1;
  }
  *v17 = v19 & v18;
  v20 = *(_QWORD *)(a2 + 16);
  v21 = __OFSUB__(v20, 1);
  v22 = v20 - 1;
  if (v21)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v22;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_19E359184(unint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _OWORD *v14;
  _OWORD *v15;
  uint64_t v16;
  unint64_t v17;
  __int128 *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = sub_19E36FC3C();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        sub_19E36FE88();
        swift_bridgeObjectRetain();
        sub_19E36F8B8();
        v11 = sub_19E36FEA0();
        result = swift_bridgeObjectRelease();
        v12 = v11 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v12 < v8)
            goto LABEL_5;
        }
        else if (v12 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v12)
        {
LABEL_11:
          v13 = *(_QWORD *)(a2 + 48);
          v14 = (_OWORD *)(v13 + 16 * v3);
          v15 = (_OWORD *)(v13 + 16 * v6);
          if (v3 != v6 || v14 >= v15 + 1)
            *v14 = *v15;
          v16 = *(_QWORD *)(a2 + 56);
          v17 = v16 + 40 * v3;
          v18 = (__int128 *)(v16 + 40 * v6);
          if (v3 != v6 || (v3 = v6, v17 >= (unint64_t)v18 + 40))
          {
            v9 = *v18;
            v10 = v18[1];
            *(_QWORD *)(v17 + 32) = *((_QWORD *)v18 + 4);
            *(_OWORD *)v17 = v9;
            *(_OWORD *)(v17 + 16) = v10;
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v19 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v20 = *v19;
    v21 = (-1 << v3) - 1;
  }
  else
  {
    v19 = (uint64_t *)(v4 + 8 * (result >> 6));
    v21 = *v19;
    v20 = (-1 << result) - 1;
  }
  *v19 = v21 & v20;
  v22 = *(_QWORD *)(a2 + 16);
  v23 = __OFSUB__(v22, 1);
  v24 = v22 - 1;
  if (v23)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v24;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

id sub_19E35936C()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  _QWORD *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;

  v1 = v0;
  sub_19E247E74(&qword_1EE502B48);
  v2 = *v0;
  v3 = sub_19E36FD08();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (id)swift_release();
    *v1 = v4;
    return result;
  }
  result = (id)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      v9 = v22 + 1;
      if (v22 + 1 >= v13)
        goto LABEL_26;
      v23 = *(_QWORD *)(v6 + 8 * v9);
      if (!v23)
        break;
    }
LABEL_25:
    v12 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (_QWORD *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v18 = v17[1];
    v19 = 8 * v15;
    v20 = *(void **)(*(_QWORD *)(v2 + 56) + v19);
    v21 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v21 = *v17;
    v21[1] = v18;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain();
    result = v20;
  }
  v24 = v22 + 2;
  if (v24 >= v13)
    goto LABEL_26;
  v23 = *(_QWORD *)(v6 + 8 * v24);
  if (v23)
  {
    v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v9);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_19E35951C()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  int64_t v25;
  unint64_t v26;
  int64_t v27;

  v1 = v0;
  sub_19E247E74((uint64_t *)&unk_1EE503500);
  v2 = *v0;
  v3 = sub_19E36FD08();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v25 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v25 >= v13)
      goto LABEL_26;
    v26 = *(_QWORD *)(v6 + 8 * v25);
    ++v9;
    if (!v26)
    {
      v9 = v25 + 1;
      if (v25 + 1 >= v13)
        goto LABEL_26;
      v26 = *(_QWORD *)(v6 + 8 * v9);
      if (!v26)
        break;
    }
LABEL_25:
    v12 = (v26 - 1) & v26;
    v15 = __clz(__rbit64(v26)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + v16);
    v19 = *v17;
    v18 = v17[1];
    v20 = (uint64_t *)(*(_QWORD *)(v2 + 56) + v16);
    v21 = *v20;
    v22 = v20[1];
    v23 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v23 = v19;
    v23[1] = v18;
    v24 = (_QWORD *)(*(_QWORD *)(v4 + 56) + v16);
    *v24 = v21;
    v24[1] = v22;
    swift_bridgeObjectRetain();
    result = (void *)swift_bridgeObjectRetain();
  }
  v27 = v25 + 2;
  if (v27 >= v13)
    goto LABEL_26;
  v26 = *(_QWORD *)(v6 + 8 * v27);
  if (v26)
  {
    v9 = v27;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v27 + 1;
    if (__OFADD__(v27, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v26 = *(_QWORD *)(v6 + 8 * v9);
    ++v27;
    if (v26)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_19E3596D4()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;

  v1 = v0;
  sub_19E247E74((uint64_t *)&unk_1EE5033F0);
  v2 = *v0;
  v3 = sub_19E36FD08();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      v9 = v22 + 1;
      if (v22 + 1 >= v13)
        goto LABEL_26;
      v23 = *(_QWORD *)(v6 + 8 * v9);
      if (!v23)
        break;
    }
LABEL_25:
    v12 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (_QWORD *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v18 = v17[1];
    v19 = 8 * v15;
    v20 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v19);
    v21 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v21 = *v17;
    v21[1] = v18;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain();
    result = (void *)swift_retain();
  }
  v24 = v22 + 2;
  if (v24 >= v13)
    goto LABEL_26;
  v23 = *(_QWORD *)(v6 + 8 * v24);
  if (v23)
  {
    v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v9);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_19E359888()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  __int128 v24;
  uint64_t v25;
  int64_t v26;
  unint64_t v27;
  int64_t v28;
  __int128 v29;

  v1 = v0;
  sub_19E247E74(&qword_1EE500590);
  v2 = *v0;
  v3 = sub_19E36FD08();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v26 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v26 >= v13)
      goto LABEL_26;
    v27 = *(_QWORD *)(v6 + 8 * v26);
    ++v9;
    if (!v27)
    {
      v9 = v26 + 1;
      if (v26 + 1 >= v13)
        goto LABEL_26;
      v27 = *(_QWORD *)(v6 + 8 * v9);
      if (!v27)
        break;
    }
LABEL_25:
    v12 = (v27 - 1) & v27;
    v15 = __clz(__rbit64(v27)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v19 = *v17;
    v18 = v17[1];
    v20 = 40 * v15;
    v21 = *(_QWORD *)(v2 + 56) + v20;
    v22 = *(_QWORD *)v21;
    v23 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    v24 = *(_OWORD *)(v21 + 24);
    v29 = *(_OWORD *)(v21 + 8);
    *v23 = v19;
    v23[1] = v18;
    v25 = *(_QWORD *)(v4 + 56) + v20;
    *(_QWORD *)v25 = v22;
    *(_OWORD *)(v25 + 8) = v29;
    *(_OWORD *)(v25 + 24) = v24;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    result = (void *)swift_retain();
  }
  v28 = v26 + 2;
  if (v28 >= v13)
    goto LABEL_26;
  v27 = *(_QWORD *)(v6 + 8 * v28);
  if (v27)
  {
    v9 = v28;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v28 + 1;
    if (__OFADD__(v28, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v27 = *(_QWORD *)(v6 + 8 * v9);
    ++v28;
    if (v27)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_19E359A80()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;

  v1 = v0;
  sub_19E247E74(&qword_1EE500630);
  v2 = *v0;
  v3 = sub_19E36FD08();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      v9 = v22 + 1;
      if (v22 + 1 >= v13)
        goto LABEL_26;
      v23 = *(_QWORD *)(v6 + 8 * v9);
      if (!v23)
        break;
    }
LABEL_25:
    v12 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (_QWORD *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v18 = v17[1];
    v19 = 8 * v15;
    v20 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v19);
    v21 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v21 = *v17;
    v21[1] = v18;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain();
    result = (void *)swift_bridgeObjectRetain();
  }
  v24 = v22 + 2;
  if (v24 >= v13)
    goto LABEL_26;
  v23 = *(_QWORD *)(v6 + 8 * v24);
  if (v23)
  {
    v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v9);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_19E359C34()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t *v25;
  _OWORD v26[2];

  v1 = v0;
  sub_19E247E74((uint64_t *)&unk_1EE503400);
  v2 = *v0;
  v3 = sub_19E36FD08();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = (void *)swift_release();
LABEL_28:
    *v1 = v4;
    return result;
  }
  v25 = v1;
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v22 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      v9 = v22 + 1;
      if (v22 + 1 >= v13)
        goto LABEL_26;
      v23 = *(_QWORD *)(v6 + 8 * v9);
      if (!v23)
        break;
    }
LABEL_25:
    v12 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v19 = *v17;
    v18 = v17[1];
    v20 = 32 * v15;
    sub_19E324848(*(_QWORD *)(v2 + 56) + 32 * v15, (uint64_t)v26);
    v21 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v21 = v19;
    v21[1] = v18;
    sub_19E24B594(v26, (_OWORD *)(*(_QWORD *)(v4 + 56) + v20));
    result = (void *)swift_bridgeObjectRetain();
  }
  v24 = v22 + 2;
  if (v24 >= v13)
  {
LABEL_26:
    result = (void *)swift_release();
    v1 = v25;
    goto LABEL_28;
  }
  v23 = *(_QWORD *)(v6 + 8 * v24);
  if (v23)
  {
    v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v9);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t sub_19E359E18(uint64_t a1)
{
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_19E359E40(uint64_t a1)
{
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_19E359E68(uint64_t a1)
{
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_19E359E90(uint64_t a1)
{
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_19E359EB8(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_release();
  }
  return result;
}

uint64_t sub_19E359EF4()
{
  return sub_19E359FB8(&qword_1EE5033D8, &qword_1EE5033E0, MEMORY[0x1E0DEAF20]);
}

uint64_t sub_19E359F24()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject();
}

uint64_t sub_19E359F48()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 16) + 16))();
}

uint64_t sub_19E359F54()
{
  id *v0;

  return swift_deallocObject();
}

void sub_19E359F88()
{
  uint64_t v0;

  sub_19E355BAC(*(void **)(v0 + 24), *(void **)(v0 + 32));
}

uint64_t sub_19E359FB0()
{
  return swift_release();
}

uint64_t sub_19E359FB8(unint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = sub_19E247E30(a2);
    result = MEMORY[0x1A1AE8A18](a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

char *sub_19E359FF8(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    sub_19E247E74(&qword_1EE5033E8);
    v10 = (char *)swift_allocObject();
    v11 = j__malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8])
      memmove(v13, v14, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 16 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_19E35A0F0(void **a1, const void **a2, _QWORD *a3)
{
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *result;
  uint64_t v7;

  v3 = (char *)*a2;
  v4 = *a3 - (_QWORD)v3;
  v5 = v4 + 7;
  if (v4 >= 0)
    v5 = *a3 - (_QWORD)v3;
  if (v4 <= -8)
  {
    result = (char *)sub_19E36FD2C();
    __break(1u);
  }
  else
  {
    result = (char *)*a1;
    v7 = v5 >> 3;
    if (result != v3 || result >= &v3[8 * v7])
      return (char *)memmove(result, v3, 8 * v7);
  }
  return result;
}

char *sub_19E35A198(uint64_t a1)
{
  return sub_19E359FF8(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_19E35A1AC()
{
  uint64_t *v0;
  uint64_t v1;
  unint64_t v2;
  int64_t v3;
  int64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t *__return_ptr, _QWORD *);
  uint64_t result;
  int64_t v13;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  int64_t v17;
  int64_t v18;
  uint64_t v19;
  _QWORD v20[3];

  v1 = *v0;
  v3 = v0[3];
  v2 = v0[4];
  v4 = v3;
  if (v2)
  {
    v5 = (v2 - 1) & v2;
    v6 = __clz(__rbit64(v2)) | (v3 << 6);
LABEL_3:
    v7 = (uint64_t *)(*(_QWORD *)(v1 + 48) + 16 * v6);
    v8 = *v7;
    v9 = v7[1];
    v10 = *(_QWORD *)(*(_QWORD *)(v1 + 56) + 8 * v6);
    v0[3] = v4;
    v0[4] = v5;
    v11 = (void (*)(uint64_t *__return_ptr, _QWORD *))v0[5];
    v20[0] = v8;
    v20[1] = v9;
    v20[2] = v10;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v11(&v19, v20);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return v19;
  }
  v13 = v3 + 1;
  if (__OFADD__(v3, 1))
  {
    __break(1u);
  }
  else
  {
    v14 = (unint64_t)(v0[2] + 64) >> 6;
    if (v13 < v14)
    {
      v15 = v0[1];
      v16 = *(_QWORD *)(v15 + 8 * v13);
      if (v16)
      {
LABEL_7:
        v5 = (v16 - 1) & v16;
        v6 = __clz(__rbit64(v16)) + (v13 << 6);
        v4 = v13;
        goto LABEL_3;
      }
      v17 = v3 + 2;
      v4 = v3 + 1;
      if (v3 + 2 < v14)
      {
        v16 = *(_QWORD *)(v15 + 8 * v17);
        if (v16)
        {
LABEL_10:
          v13 = v17;
          goto LABEL_7;
        }
        v4 = v3 + 2;
        if (v3 + 3 < v14)
        {
          v16 = *(_QWORD *)(v15 + 8 * (v3 + 3));
          if (v16)
          {
            v13 = v3 + 3;
            goto LABEL_7;
          }
          v17 = v3 + 4;
          v4 = v3 + 3;
          if (v3 + 4 < v14)
          {
            v16 = *(_QWORD *)(v15 + 8 * v17);
            if (v16)
              goto LABEL_10;
            v13 = v3 + 5;
            v4 = v3 + 4;
            if (v3 + 5 < v14)
            {
              v16 = *(_QWORD *)(v15 + 8 * v13);
              if (v16)
                goto LABEL_7;
              v4 = v14 - 1;
              v18 = v3 + 6;
              while (v14 != v18)
              {
                v16 = *(_QWORD *)(v15 + 8 * v18++);
                if (v16)
                {
                  v13 = v18 - 1;
                  goto LABEL_7;
                }
              }
            }
          }
        }
      }
    }
    result = 0;
    v0[3] = v4;
    v0[4] = 0;
  }
  return result;
}

void sub_19E35A330()
{
  JUMPOUT(0x1A1AE74ACLL);
}

uint64_t sub_19E35A344(void **__src, id *a2, unint64_t a3, void **__dst, void *a5)
{
  id *v6;
  void **v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void **v14;
  char **v15;
  id *v16;
  void *v17;
  id v18;
  id v19;
  id v20;
  void *v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id *v26;
  char *v27;
  _QWORD *v28;
  char **v29;
  id *v30;
  void *v31;
  id v32;
  id v33;
  id v34;
  void *v35;
  id v36;
  id v37;
  id v38;
  BOOL v39;
  uint64_t result;
  char *v41;
  id v42;
  id *v44;
  void **v45;
  void **v46;
  char *v47;
  id *v49;
  char *v50;
  void **v51;
  id *v52;

  v6 = a2;
  v7 = __src;
  v8 = (char *)a2 - (char *)__src;
  v9 = (char *)a2 - (char *)__src + 7;
  if ((char *)a2 - (char *)__src >= 0)
    v9 = (char *)a2 - (char *)__src;
  v10 = v9 >> 3;
  v11 = a3 - (_QWORD)a2;
  v12 = a3 - (_QWORD)a2 + 7;
  if ((uint64_t)(a3 - (_QWORD)a2) >= 0)
    v12 = a3 - (_QWORD)a2;
  v13 = v12 >> 3;
  v52 = __src;
  v51 = __dst;
  if (v10 >= v12 >> 3)
  {
    if (v11 < -7)
      goto LABEL_61;
    if (__dst != a2 || &a2[v13] <= __dst)
      memmove(__dst, a2, 8 * v13);
    v41 = (char *)__dst;
    v27 = (char *)&__dst[v13];
    v50 = v27;
    v52 = v6;
    if (v7 >= v6 || v11 < 8)
    {
LABEL_60:
      sub_19E35A0F0((void **)&v52, (const void **)&v51, &v50);
      return 1;
    }
    v28 = (_QWORD *)(a3 - 8);
    v29 = &selRef_propertyListWithData_options_format_error_;
    v30 = v6;
    v45 = v7;
    while (1)
    {
      v47 = (char *)(v28 + 1);
      v49 = v6;
      v31 = *--v30;
      v32 = *((id *)v27 - 1);
      v33 = v31;
      v34 = objc_msgSend(a5, sel_delegate);
      if (!v34)
        break;
      v35 = v34;
      v36 = objc_msgSend(v32, v29[176]);
      if (!v36)
      {
        sub_19E36F888();
        v36 = (id)sub_19E36F864();
        v29 = &selRef_propertyListWithData_options_format_error_;
        swift_bridgeObjectRelease();
      }
      v42 = objc_msgSend(v35, sel_sortOrderForServiceName_, v36);

      v37 = objc_msgSend(v33, v29[176]);
      if (!v37)
      {
        sub_19E36F888();
        v37 = (id)sub_19E36F864();
        swift_bridgeObjectRelease();
      }
      v38 = objc_msgSend(v35, sel_sortOrderForServiceName_, v37);

      swift_unknownObjectRelease();
      v39 = (uint64_t)v38 < (uint64_t)v42;
      v29 = &selRef_propertyListWithData_options_format_error_;
      if (!v39)
        goto LABEL_53;
      if (v47 != (char *)v49 || v28 >= v49)
        *v28 = *v30;
      v52 = v30;
      if (v30 <= v45)
        goto LABEL_60;
LABEL_41:
      --v28;
      v6 = v30;
      if (v27 <= v41)
        goto LABEL_60;
    }

LABEL_53:
    v50 = v27 - 8;
    v30 = v49;
    if (v47 < v27 || v28 >= (_QWORD *)v27 || v47 != v27)
      *v28 = *((_QWORD *)v27 - 1);
    v27 -= 8;
    if (v49 <= v45)
      goto LABEL_60;
    goto LABEL_41;
  }
  if (v8 >= -7)
  {
    if (__dst != __src || &__src[v10] <= __dst)
      memmove(__dst, __src, 8 * v10);
    v46 = &__dst[v10];
    v50 = (char *)v46;
    if ((unint64_t)v6 < a3 && v8 >= 8)
    {
      v14 = __dst;
      v15 = &selRef_propertyListWithData_options_format_error_;
      while (1)
      {
        v16 = v6;
        v17 = *v14;
        v18 = *v6;
        v19 = v17;
        v20 = objc_msgSend(a5, sel_delegate);
        if (!v20)
          break;
        v21 = v20;
        v44 = v7;
        v22 = objc_msgSend(v18, v15[176]);
        if (!v22)
        {
          sub_19E36F888();
          v22 = (id)sub_19E36F864();
          swift_bridgeObjectRelease();
        }
        v23 = objc_msgSend(v21, sel_sortOrderForServiceName_, v22);

        v24 = objc_msgSend(v19, v15[176]);
        if (!v24)
        {
          sub_19E36F888();
          v24 = (id)sub_19E36F864();
          swift_bridgeObjectRelease();
        }
        v25 = objc_msgSend(v21, sel_sortOrderForServiceName_, v24);

        swift_unknownObjectRelease();
        v7 = v44;
        if ((uint64_t)v25 >= (uint64_t)v23)
          goto LABEL_24;
        v26 = v16 + 1;
        if (v44 >= v16 && v44 < v26)
        {
          v15 = &selRef_propertyListWithData_options_format_error_;
          if (v44 != v16)
            *v44 = *v16;
          goto LABEL_28;
        }
        *v44 = *v16;
LABEL_27:
        v15 = &selRef_propertyListWithData_options_format_error_;
LABEL_28:
        ++v7;
        if (v14 < v46)
        {
          v6 = v26;
          if ((unint64_t)v26 < a3)
            continue;
        }
        v52 = v7;
        goto LABEL_60;
      }

LABEL_24:
      if (v7 != v14)
        *v7 = *v14;
      v51 = ++v14;
      v26 = v16;
      goto LABEL_27;
    }
    goto LABEL_60;
  }
LABEL_61:

  result = sub_19E36FD2C();
  __break(1u);
  return result;
}

void sub_19E35A804(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, void *a5)
{
  uint64_t v5;
  uint64_t v6;
  char **v7;
  void *v8;
  uint64_t v9;
  void *v10;
  id v11;
  id v12;
  id v13;
  void *v14;
  id v15;
  id v16;
  char **v17;
  id v18;
  id v19;
  BOOL v20;
  void *v21;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;

  if (a3 != a2)
  {
    v5 = a3;
    v26 = *a4;
    v6 = *a4 + 8 * a3 - 8;
    v7 = &selRef_propertyListWithData_options_format_error_;
LABEL_6:
    v8 = *(void **)(v26 + 8 * v5);
    v9 = a1;
    v24 = v6;
    v27 = v5;
    while (1)
    {
      v10 = *(void **)v6;
      v11 = v8;
      v12 = v10;
      v13 = objc_msgSend(a5, sel_delegate);
      if (!v13)
      {

LABEL_5:
        ++v5;
        v6 = v24 + 8;
        if (v5 == a2)
          return;
        goto LABEL_6;
      }
      v14 = v13;
      v15 = objc_msgSend(v11, v7[176]);
      if (!v15)
      {
        sub_19E36F888();
        v15 = (id)sub_19E36F864();
        swift_bridgeObjectRelease();
      }
      v16 = objc_msgSend(v14, sel_sortOrderForServiceName_, v15);

      v17 = v7;
      v18 = objc_msgSend(v12, v7[176]);
      if (!v18)
      {
        sub_19E36F888();
        v18 = (id)sub_19E36F864();
        swift_bridgeObjectRelease();
      }
      v19 = objc_msgSend(v14, sel_sortOrderForServiceName_, v18);

      swift_unknownObjectRelease();
      v20 = (uint64_t)v19 < (uint64_t)v16;
      v7 = v17;
      v5 = v27;
      if (!v20)
        goto LABEL_5;
      if (!v26)
        break;
      v21 = *(void **)v6;
      v8 = *(void **)(v6 + 8);
      *(_QWORD *)v6 = v8;
      *(_QWORD *)(v6 + 8) = v21;
      v6 -= 8;
      if (v27 == ++v9)
        goto LABEL_5;
    }
    __break(1u);
  }
}

void sub_19E35A9C8(uint64_t *a1, void *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char **v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  id v20;
  id v21;
  id v22;
  void *v23;
  id v24;
  id v25;
  id v26;
  id v27;
  _BOOL4 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _BOOL4 v33;
  id v34;
  int v35;
  uint64_t v36;
  void *v37;
  id v38;
  id v39;
  id v40;
  void *v41;
  id v42;
  id v43;
  id v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  id v57;
  id v58;
  id v59;
  void *v60;
  id v61;
  id v62;
  id v63;
  id v64;
  void *v65;
  unint64_t v66;
  unint64_t v67;
  char *v68;
  char *v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  BOOL v81;
  unint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  BOOL v91;
  uint64_t v92;
  char v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  BOOL v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  char *v110;
  char *v111;
  uint64_t v112;
  unint64_t v113;
  char *v114;
  uint64_t v115;
  id *v116;
  unint64_t v117;
  id v118;
  unint64_t v119;
  uint64_t v120;
  unint64_t v121;
  uint64_t v122;
  uint64_t v123;
  void **v124;
  id *v125;
  unint64_t v126;
  id v127;
  char *v128;
  unint64_t v129;
  uint64_t *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  char *v138;
  void **__dst;
  char *v140;
  char *v141;
  char *v142;
  char *v143;
  uint64_t v144;
  void **v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  id v149;
  uint64_t v150;

  v4 = a1[1];
  v149 = a2;
  v5 = sub_19E36FDEC();
  if (v5 >= v4)
  {
    if (v4 < 0)
      goto LABEL_162;
    if (v4)
    {
      v10 = v149;
      sub_19E35A804(0, v4, 1, a1, v10);

    }
    else
    {

    }
    return;
  }
  if (v4 >= 0)
    v6 = v4;
  else
    v6 = v4 + 1;
  if (v4 < -1)
    goto LABEL_170;
  v7 = v5;
  v136 = v4;
  v146 = v2;
  v130 = a1;
  if (v4 < 2)
  {
    v11 = (char *)MEMORY[0x1E0DEE9D8];
    v150 = MEMORY[0x1E0DEE9D8];
    __dst = (void **)((MEMORY[0x1E0DEE9D8] & 0xFFFFFFFFFFFFFF8) + 32);
    if (v4 != 1)
    {
      v16 = *(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16);
LABEL_128:
      if (v16 >= 2)
      {
        v120 = *v130;
        v148 = *v130;
        do
        {
          v121 = v16 - 2;
          if (v16 < 2)
            goto LABEL_157;
          if (!v120)
            goto LABEL_169;
          v143 = v11;
          v122 = *(_QWORD *)&v11[16 * v121 + 32];
          v123 = *(_QWORD *)&v11[16 * v16 + 24];
          v124 = (void **)(v120 + 8 * v122);
          v125 = (id *)(v120 + 8 * *(_QWORD *)&v11[16 * v16 + 16]);
          v126 = v120 + 8 * v123;
          v127 = v149;
          sub_19E35A344(v124, v125, v126, __dst, v127);
          if (v146)
            goto LABEL_140;

          if (v123 < v122)
            goto LABEL_158;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v143 = sub_19E35A198((uint64_t)v143);
          v11 = v143;
          if (v121 >= *((_QWORD *)v143 + 2))
            goto LABEL_159;
          v128 = &v143[16 * v121 + 32];
          *(_QWORD *)v128 = v122;
          *((_QWORD *)v128 + 1) = v123;
          v129 = *((_QWORD *)v143 + 2);
          if (v16 > v129)
            goto LABEL_160;
          memmove(&v143[16 * v16 + 16], &v143[16 * v16 + 32], 16 * (v129 - v16));
          *((_QWORD *)v143 + 2) = v129 - 1;
          v16 = v129 - 1;
          v120 = v148;
        }
        while (v129 > 2);
      }
      swift_bridgeObjectRelease();
      *(_QWORD *)((v150 & 0xFFFFFFFFFFFFF8) + 0x10) = 0;
      sub_19E36F978();

      swift_bridgeObjectRelease();
      return;
    }
  }
  else
  {
    v8 = v6 >> 1;
    sub_19E24B854(0, (unint64_t *)&unk_1EE500620);
    v9 = sub_19E36F990();
    *(_QWORD *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10) = v8;
    __dst = (void **)((v9 & 0xFFFFFFFFFFFFFF8) + 32);
    v150 = v9;
  }
  v12 = 0;
  v13 = *a1;
  v131 = *a1 - 8;
  v132 = v7;
  v11 = (char *)MEMORY[0x1E0DEE9D8];
  v14 = &selRef_IMSynchronizeMMSCapabilityToWatch_;
  v15 = v136;
  v147 = *a1;
  while (1)
  {
    v17 = v12 + 1;
    v137 = v12;
    if (v12 + 1 >= v15)
      goto LABEL_51;
    v18 = v12;
    v140 = v11;
    v133 = v12 + 1;
    v19 = *(void **)(v13 + 8 * v12);
    v20 = *(id *)(v13 + 8 * v17);
    v21 = v19;
    v22 = objc_msgSend(v149, sel_delegate);
    if (!v22)
    {

      v29 = v18 + 2;
      v30 = v136;
      if (v29 >= v136)
      {
        v17 = v29;
        v11 = v140;
LABEL_51:
        v31 = v132;
        goto LABEL_52;
      }
      v28 = 0;
LABEL_26:
      v32 = v133;
      v33 = v28;
      do
      {
        v37 = *(void **)(v13 + 8 * v32);
        v38 = *(id *)(v13 + 8 * v29);
        v39 = v37;
        v40 = objc_msgSend(v149, sel_delegate);
        if (v40)
        {
          v41 = v40;
          v42 = objc_msgSend(v38, sel_service);
          if (!v42)
          {
            sub_19E36F888();
            v42 = (id)sub_19E36F864();
            swift_bridgeObjectRelease();
          }
          v43 = objc_msgSend(v41, v14[415], v42);

          v44 = objc_msgSend(v39, sel_service);
          if (!v44)
          {
            sub_19E36F888();
            v44 = (id)sub_19E36F864();
            v14 = &selRef_IMSynchronizeMMSCapabilityToWatch_;
            swift_bridgeObjectRelease();
          }
          v34 = objc_msgSend(v41, v14[415], v44);

          swift_unknownObjectRelease();
          v98 = (uint64_t)v34 < (uint64_t)v43;
          v14 = &selRef_IMSynchronizeMMSCapabilityToWatch_;
          v35 = !v98;
          v30 = v136;
          v13 = v147;
          if (((v33 ^ v35) & 1) == 0)
            goto LABEL_40;
        }
        else
        {

          if (v33)
          {
            v11 = v140;
            v31 = v132;
            goto LABEL_41;
          }
        }
        v36 = v29 + 1;
        v32 = v29;
        v29 = v36;
      }
      while (v36 < v30);
      v29 = v36;
LABEL_40:
      v11 = v140;
      v31 = v132;
      v17 = v29;
      if (!v33)
        goto LABEL_52;
      goto LABEL_41;
    }
    v23 = v22;
    v24 = objc_msgSend(v20, sel_service);
    if (!v24)
    {
      sub_19E36F888();
      v24 = (id)sub_19E36F864();
      swift_bridgeObjectRelease();
    }
    v25 = objc_msgSend(v23, v14[415], v24);

    v26 = objc_msgSend(v21, sel_service);
    if (!v26)
    {
      sub_19E36F888();
      v26 = (id)sub_19E36F864();
      swift_bridgeObjectRelease();
    }
    v27 = objc_msgSend(v23, v14[415], v26);

    swift_unknownObjectRelease();
    v28 = (uint64_t)v27 < (uint64_t)v25;
    v29 = v18 + 2;
    v30 = v136;
    v13 = v147;
    if (v29 < v136)
      goto LABEL_26;
    v11 = v140;
    v31 = v132;
    v17 = v29;
    if (!v28)
      goto LABEL_52;
LABEL_41:
    if (v29 < v137)
      goto LABEL_165;
    if (v137 < v29)
    {
      v45 = (uint64_t *)(v131 + 8 * v29);
      v46 = v29;
      v47 = v137;
      v48 = (uint64_t *)(v13 + 8 * v137);
      do
      {
        if (v47 != --v46)
        {
          if (!v13)
            goto LABEL_168;
          v49 = *v48;
          *v48 = *v45;
          *v45 = v49;
        }
        ++v47;
        --v45;
        ++v48;
      }
      while (v47 < v46);
    }
    v17 = v29;
LABEL_52:
    if (v17 >= v136)
    {
      v50 = v137;
LABEL_76:
      if (v17 < v50)
        goto LABEL_156;
      goto LABEL_77;
    }
    v50 = v137;
    if (__OFSUB__(v17, v137))
      goto LABEL_161;
    if (v17 - v137 >= v31)
      goto LABEL_76;
    if (__OFADD__(v137, v31))
      goto LABEL_163;
    v51 = v136;
    if (v137 + v31 < v136)
      v51 = v137 + v31;
    if (v51 < v137)
      break;
    if (v17 == v51)
      goto LABEL_76;
    v141 = v11;
    v52 = v131 + 8 * v17;
    v134 = v51;
    do
    {
      v53 = *(void **)(v13 + 8 * v17);
      v54 = v50;
      v144 = v52;
      while (1)
      {
        v55 = v17;
        v56 = *(void **)v52;
        v57 = v53;
        v58 = v56;
        v59 = objc_msgSend(v149, sel_delegate);
        if (!v59)
        {

          goto LABEL_62;
        }
        v60 = v59;
        v61 = objc_msgSend(v57, sel_service);
        if (!v61)
        {
          sub_19E36F888();
          v61 = (id)sub_19E36F864();
          v14 = &selRef_IMSynchronizeMMSCapabilityToWatch_;
          swift_bridgeObjectRelease();
        }
        v62 = objc_msgSend(v60, v14[415], v61);

        v63 = objc_msgSend(v58, sel_service);
        if (!v63)
        {
          sub_19E36F888();
          v63 = (id)sub_19E36F864();
          v14 = &selRef_IMSynchronizeMMSCapabilityToWatch_;
          swift_bridgeObjectRelease();
        }
        v64 = objc_msgSend(v60, v14[415], v63);

        swift_unknownObjectRelease();
        if ((uint64_t)v64 >= (uint64_t)v62)
          break;
        v13 = v147;
        if (!v147)
          goto LABEL_166;
        v17 = v55;
        v65 = *(void **)v52;
        v53 = *(void **)(v52 + 8);
        *(_QWORD *)v52 = v53;
        *(_QWORD *)(v52 + 8) = v65;
        v52 -= 8;
        ++v54;
        v14 = &selRef_IMSynchronizeMMSCapabilityToWatch_;
        if (v55 == v54)
          goto LABEL_63;
      }
      v13 = v147;
      v14 = &selRef_IMSynchronizeMMSCapabilityToWatch_;
LABEL_62:
      v17 = v55;
LABEL_63:
      ++v17;
      v52 = v144 + 8;
      v50 = v137;
    }
    while (v17 != v134);
    v17 = v134;
    v11 = v141;
    if (v134 < v137)
      goto LABEL_156;
LABEL_77:
    v135 = v17;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v11 = sub_19E359FF8(0, *((_QWORD *)v11 + 2) + 1, 1, v11);
    v67 = *((_QWORD *)v11 + 2);
    v66 = *((_QWORD *)v11 + 3);
    v16 = v67 + 1;
    if (v67 >= v66 >> 1)
      v11 = sub_19E359FF8((char *)(v66 > 1), v67 + 1, 1, v11);
    *((_QWORD *)v11 + 2) = v16;
    v68 = v11 + 32;
    v69 = &v11[16 * v67 + 32];
    *(_QWORD *)v69 = v50;
    *((_QWORD *)v69 + 1) = v17;
    if (v67)
    {
      v142 = v11;
      v138 = v11 + 32;
      while (1)
      {
        v70 = v16 - 1;
        if (v16 >= 4)
        {
          v75 = &v68[16 * v16];
          v76 = *((_QWORD *)v75 - 8);
          v77 = *((_QWORD *)v75 - 7);
          v81 = __OFSUB__(v77, v76);
          v78 = v77 - v76;
          if (v81)
            goto LABEL_145;
          v80 = *((_QWORD *)v75 - 6);
          v79 = *((_QWORD *)v75 - 5);
          v81 = __OFSUB__(v79, v80);
          v73 = v79 - v80;
          v74 = v81;
          if (v81)
            goto LABEL_146;
          v82 = v16 - 2;
          v83 = &v68[16 * v16 - 32];
          v85 = *(_QWORD *)v83;
          v84 = *((_QWORD *)v83 + 1);
          v81 = __OFSUB__(v84, v85);
          v86 = v84 - v85;
          if (v81)
            goto LABEL_148;
          v81 = __OFADD__(v73, v86);
          v87 = v73 + v86;
          if (v81)
            goto LABEL_151;
          if (v87 >= v78)
          {
            v105 = &v68[16 * v70];
            v107 = *(_QWORD *)v105;
            v106 = *((_QWORD *)v105 + 1);
            v81 = __OFSUB__(v106, v107);
            v108 = v106 - v107;
            if (v81)
              goto LABEL_155;
            v98 = v73 < v108;
            goto LABEL_114;
          }
        }
        else
        {
          if (v16 != 3)
          {
            v99 = *((_QWORD *)v11 + 4);
            v100 = *((_QWORD *)v11 + 5);
            v81 = __OFSUB__(v100, v99);
            v92 = v100 - v99;
            v93 = v81;
            goto LABEL_108;
          }
          v72 = *((_QWORD *)v11 + 4);
          v71 = *((_QWORD *)v11 + 5);
          v81 = __OFSUB__(v71, v72);
          v73 = v71 - v72;
          v74 = v81;
        }
        if ((v74 & 1) != 0)
          goto LABEL_147;
        v82 = v16 - 2;
        v88 = &v68[16 * v16 - 32];
        v90 = *(_QWORD *)v88;
        v89 = *((_QWORD *)v88 + 1);
        v91 = __OFSUB__(v89, v90);
        v92 = v89 - v90;
        v93 = v91;
        if (v91)
          goto LABEL_150;
        v94 = &v68[16 * v70];
        v96 = *(_QWORD *)v94;
        v95 = *((_QWORD *)v94 + 1);
        v81 = __OFSUB__(v95, v96);
        v97 = v95 - v96;
        if (v81)
          goto LABEL_153;
        if (__OFADD__(v92, v97))
          goto LABEL_154;
        if (v92 + v97 >= v73)
        {
          v98 = v73 < v97;
LABEL_114:
          if (v98)
            v70 = v82;
          goto LABEL_116;
        }
LABEL_108:
        if ((v93 & 1) != 0)
          goto LABEL_149;
        v101 = &v68[16 * v70];
        v103 = *(_QWORD *)v101;
        v102 = *((_QWORD *)v101 + 1);
        v81 = __OFSUB__(v102, v103);
        v104 = v102 - v103;
        if (v81)
          goto LABEL_152;
        if (v104 < v92)
          goto LABEL_14;
LABEL_116:
        v109 = v70 - 1;
        if (v70 - 1 >= v16)
        {
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
LABEL_144:
          __break(1u);
LABEL_145:
          __break(1u);
LABEL_146:
          __break(1u);
LABEL_147:
          __break(1u);
LABEL_148:
          __break(1u);
LABEL_149:
          __break(1u);
LABEL_150:
          __break(1u);
LABEL_151:
          __break(1u);
LABEL_152:
          __break(1u);
LABEL_153:
          __break(1u);
LABEL_154:
          __break(1u);
LABEL_155:
          __break(1u);
LABEL_156:
          __break(1u);
LABEL_157:
          __break(1u);
LABEL_158:
          __break(1u);
LABEL_159:
          __break(1u);
LABEL_160:
          __break(1u);
LABEL_161:
          __break(1u);
LABEL_162:
          __break(1u);
LABEL_163:
          __break(1u);
          goto LABEL_164;
        }
        if (!v13)
          goto LABEL_167;
        v110 = &v68[16 * v109];
        v111 = v68;
        v112 = *(_QWORD *)v110;
        v113 = v70;
        v114 = &v111[16 * v70];
        v115 = *((_QWORD *)v114 + 1);
        v145 = (void **)(v13 + 8 * *(_QWORD *)v110);
        v116 = (id *)(v13 + 8 * *(_QWORD *)v114);
        v117 = v13 + 8 * v115;
        v118 = v149;
        sub_19E35A344(v145, v116, v117, __dst, v118);
        if (v146)
        {
LABEL_140:
          swift_bridgeObjectRelease();

          *(_QWORD *)((v150 & 0xFFFFFFFFFFFFF8) + 0x10) = 0;
          sub_19E36F978();

          swift_bridgeObjectRelease();
          return;
        }

        if (v115 < v112)
          goto LABEL_142;
        v11 = v142;
        if (v113 > *((_QWORD *)v142 + 2))
          goto LABEL_143;
        *(_QWORD *)v110 = v112;
        v68 = v138;
        *(_QWORD *)&v138[16 * v109 + 8] = v115;
        v119 = *((_QWORD *)v142 + 2);
        if (v113 >= v119)
          goto LABEL_144;
        v146 = 0;
        v16 = v119 - 1;
        memmove(v114, v114 + 16, 16 * (v119 - 1 - v113));
        *((_QWORD *)v142 + 2) = v119 - 1;
        v13 = v147;
        v14 = &selRef_IMSynchronizeMMSCapabilityToWatch_;
        if (v119 <= 2)
          goto LABEL_14;
      }
    }
    v16 = 1;
LABEL_14:
    v12 = v135;
    v15 = v136;
    if (v135 >= v136)
      goto LABEL_128;
  }
LABEL_164:
  __break(1u);
LABEL_165:
  __break(1u);
LABEL_166:

  __break(1u);
LABEL_167:

  __break(1u);
LABEL_168:

  __break(1u);
LABEL_169:

  __break(1u);
LABEL_170:

  sub_19E36FCE4();
  __break(1u);
}

void sub_19E35B520(uint64_t *a1, void *a2)
{
  uint64_t v3;
  id v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  id v7;
  uint64_t v8[2];

  v3 = *a1;
  v4 = a2;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *a1 = v3;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    sub_19E35A330();
  v6 = *(_QWORD *)(v3 + 16);
  v8[0] = v3 + 32;
  v8[1] = v6;
  v7 = v4;
  sub_19E35A9C8(v8, v7);

  sub_19E36FCD8();
}

uint64_t sub_19E35B5BC()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t sub_19E35B5E8()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)(v0 + 16) + OBJC_IVAR___IMServiceForSendingTask_updateHandler))(*(_QWORD *)(v0 + 24));
}

uint64_t sub_19E35B618()
{
  uint64_t v0;

  return swift_deallocObject();
}

void sub_19E35B63C()
{
  sub_19E35571C();
}

uint64_t sub_19E35B65C()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 16) + 16))();
}

uint64_t sub_19E35B66C()
{
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_19E35B698()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  v1 = *(_QWORD *)(v0 + 32);
  result = (*(uint64_t (**)(void))(v0 + 16))();
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCE17IMSharedUtilitiesCSo23IMServiceForSendingTaskP33_3EED2FA8A158671F213145B6668888AC8Deadline_fired) = 1;
  return result;
}

uint64_t destroy for PendingRequest()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t initializeWithCopy for PendingRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

_QWORD *assignWithCopy for PendingRequest(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = a2[4];
  a1[3] = a2[3];
  a1[4] = v4;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for PendingRequest(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for PendingRequest(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 40))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PendingRequest(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 40) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for PendingRequest()
{
  return &type metadata for PendingRequest;
}

uint64_t sub_19E35B8E0(char a1, char a2)
{
  BOOL v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0xD000000000000018;
  else
    v3 = 0xD000000000000012;
  if (v2)
    v4 = 0x800000019E39C0C0;
  else
    v4 = 0x800000019E39C0E0;
  if ((a2 & 1) != 0)
    v5 = 0xD000000000000018;
  else
    v5 = 0xD000000000000012;
  if ((a2 & 1) != 0)
    v6 = 0x800000019E39C0E0;
  else
    v6 = 0x800000019E39C0C0;
  if (v3 == v5 && v4 == v6)
    v7 = 1;
  else
    v7 = sub_19E36FE10();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

void sub_19E35B988(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_19E35B9D0(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_19E35BA6C + 4 * byte_19E382E96[a2]))(0x656D6974656D6F53);
}

uint64_t sub_19E35BA6C(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x656D6974656D6F53 && v1 == 0xE900000000000073)
    v2 = 1;
  else
    v2 = sub_19E36FE10();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

void sub_19E35BB58(char a1)
{
  __asm { BR              X11 }
}

uint64_t sub_19E35BBA0(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_19E35BC20 + 4 * byte_19E382EA3[a2]))(48);
}

uint64_t sub_19E35BC20(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 48 && v1 == 0xE100000000000000)
    v2 = 1;
  else
    v2 = sub_19E36FE10();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

void sub_19E35BCE8(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_19E35BD38(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_19E35BE54 + 4 * byte_19E382EB4[a2]))(0xD000000000000014);
}

uint64_t sub_19E35BE54(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0xD000000000000014 && v1 == 0x800000019E39BF60)
    v2 = 1;
  else
    v2 = sub_19E36FE10();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

void sub_19E35BFD4(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_19E35C01C(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_19E35C09C + 4 * byte_19E382EC4[a2]))(1684099177);
}

uint64_t sub_19E35C09C(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 1684099177 && v1 == 0xE400000000000000)
    v2 = 1;
  else
    v2 = sub_19E36FE10();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

void sub_19E35C16C(char a1)
{
  sub_19E36FE88();
  __asm { BR              X10 }
}

uint64_t sub_19E35C1B8()
{
  sub_19E36F8B8();
  swift_bridgeObjectRelease();
  return sub_19E36FEA0();
}

void sub_19E35C260(char a1)
{
  sub_19E36FE88();
  __asm { BR              X10 }
}

uint64_t sub_19E35C2AC()
{
  sub_19E36F8B8();
  swift_bridgeObjectRelease();
  return sub_19E36FEA0();
}

uint64_t sub_19E35C338()
{
  sub_19E36FE88();
  sub_19E36F8B8();
  swift_bridgeObjectRelease();
  return sub_19E36FEA0();
}

void sub_19E35C3BC(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_19E35C3F4()
{
  sub_19E36F8B8();
  return swift_bridgeObjectRelease();
}

void sub_19E35C474(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_19E35C4B4()
{
  sub_19E36F8B8();
  return swift_bridgeObjectRelease();
}

void sub_19E35C5C8(uint64_t a1, char a2)
{
  sub_19E36FE88();
  __asm { BR              X10 }
}

uint64_t sub_19E35C610()
{
  sub_19E36F8B8();
  swift_bridgeObjectRelease();
  return sub_19E36FEA0();
}

void sub_19E35C69C(uint64_t a1, char a2)
{
  sub_19E36FE88();
  __asm { BR              X10 }
}

uint64_t sub_19E35C6E0()
{
  sub_19E36F8B8();
  swift_bridgeObjectRelease();
  return sub_19E36FEA0();
}

void sub_19E35C774(uint64_t a1, char a2)
{
  sub_19E36FE88();
  __asm { BR              X10 }
}

uint64_t sub_19E35C7BC()
{
  sub_19E36F8B8();
  swift_bridgeObjectRelease();
  return sub_19E36FEA0();
}

uint64_t sub_19E35C864()
{
  sub_19E36FE88();
  sub_19E36F8B8();
  swift_bridgeObjectRelease();
  return sub_19E36FEA0();
}

uint64_t static Wallpaper.supportsSecureCoding.getter()
{
  return 1;
}

uint64_t Wallpaper.fileName.getter()
{
  return sub_19E35C954(&OBJC_IVAR___IMWallpaper_SwiftImpl_fileName);
}

uint64_t Wallpaper.filePath.getter()
{
  return sub_19E35C954(&OBJC_IVAR___IMWallpaper_SwiftImpl_filePath);
}

uint64_t Wallpaper.lowResFileName.getter()
{
  return sub_19E35C954(&OBJC_IVAR___IMWallpaper_SwiftImpl_lowResFileName);
}

uint64_t Wallpaper.lowResFilePath.getter()
{
  return sub_19E35C954(&OBJC_IVAR___IMWallpaper_SwiftImpl_lowResFilePath);
}

uint64_t sub_19E35C954(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + *a1);
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t Wallpaper.dataVersion.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + OBJC_IVAR___IMWallpaper_SwiftImpl_dataVersion);
}

void *Wallpaper.metadata.getter()
{
  uint64_t v0;
  void *v1;
  id v2;

  v1 = *(void **)(v0 + OBJC_IVAR___IMWallpaper_SwiftImpl_metadata);
  v2 = v1;
  return v1;
}

uint64_t Wallpaper.contentIsSensitive.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + OBJC_IVAR___IMWallpaper_SwiftImpl_contentIsSensitive);
}

id Wallpaper.__allocating_init(fileName:filePath:lowResFileName:lowResFilePath:metadata:contentIsSensitive:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  objc_class *v10;
  id v18;

  v18 = objc_allocWithZone(v10);
  return Wallpaper.init(fileName:filePath:lowResFileName:lowResFilePath:metadata:contentIsSensitive:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
}

id Wallpaper.init(fileName:filePath:lowResFileName:lowResFilePath:metadata:contentIsSensitive:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  _BYTE *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  objc_super v24;

  v11 = &v10[OBJC_IVAR___IMWallpaper_SwiftImpl_filePathKey];
  *v11 = 0xD000000000000014;
  v11[1] = 0x800000019E39EB10;
  v12 = &v10[OBJC_IVAR___IMWallpaper_SwiftImpl_fileNameKey];
  *v12 = 0xD000000000000014;
  v12[1] = 0x800000019E39EB30;
  v13 = &v10[OBJC_IVAR___IMWallpaper_SwiftImpl_lowResFilePathKey];
  *v13 = 0xD00000000000001ALL;
  v13[1] = 0x800000019E39EB50;
  v14 = &v10[OBJC_IVAR___IMWallpaper_SwiftImpl_lowResFileNameKey];
  *v14 = 0xD00000000000001ALL;
  v14[1] = 0x800000019E39EB70;
  v15 = &v10[OBJC_IVAR___IMWallpaper_SwiftImpl_dataVersionKey];
  *v15 = 0xD000000000000013;
  v15[1] = 0x800000019E39EB90;
  v16 = &v10[OBJC_IVAR___IMWallpaper_SwiftImpl_highResKey];
  *v16 = 0xD000000000000013;
  v16[1] = 0x800000019E39EBB0;
  v17 = &v10[OBJC_IVAR___IMWallpaper_SwiftImpl_metadataKey];
  *v17 = 0xD000000000000014;
  v17[1] = 0x800000019E39EBD0;
  v18 = &v10[OBJC_IVAR___IMWallpaper_SwiftImpl_contentIsSensitiveKey];
  *v18 = 0xD000000000000015;
  v18[1] = 0x800000019E39EBF0;
  v19 = &v10[OBJC_IVAR___IMWallpaper_SwiftImpl_fileName];
  *v19 = a1;
  v19[1] = a2;
  v20 = &v10[OBJC_IVAR___IMWallpaper_SwiftImpl_filePath];
  *v20 = a3;
  v20[1] = a4;
  v21 = &v10[OBJC_IVAR___IMWallpaper_SwiftImpl_lowResFileName];
  *v21 = a5;
  v21[1] = a6;
  v22 = &v10[OBJC_IVAR___IMWallpaper_SwiftImpl_lowResFilePath];
  *v22 = a7;
  v22[1] = a8;
  *(_QWORD *)&v10[OBJC_IVAR___IMWallpaper_SwiftImpl_dataVersion] = 0;
  *(_QWORD *)&v10[OBJC_IVAR___IMWallpaper_SwiftImpl_metadata] = a9;
  v10[OBJC_IVAR___IMWallpaper_SwiftImpl_contentIsSensitive] = a10;
  v24.receiver = v10;
  v24.super_class = (Class)type metadata accessor for Wallpaper();
  return objc_msgSendSuper2(&v24, sel_init);
}

uint64_t type metadata accessor for Wallpaper()
{
  return objc_opt_self();
}

id Wallpaper.__allocating_init(fileName:filePath:data:lowResFileName:lowResFilePath:lowResData:metadata:contentIsSensitive:)(uint64_t a1, uint64_t a2, id *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, __int128 a9, __int128 a10, void *a11, char a12)
{
  objc_class *v12;
  id v19;

  v19 = objc_allocWithZone(v12);
  return Wallpaper.init(fileName:filePath:data:lowResFileName:lowResFilePath:lowResData:metadata:contentIsSensitive:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, *((uint64_t *)&a9 + 1), a10, *((unint64_t *)&a10 + 1), a11, a12);
}

id Wallpaper.init(fileName:filePath:data:lowResFileName:lowResFilePath:lowResData:metadata:contentIsSensitive:)(uint64_t a1, uint64_t a2, id *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, unint64_t a12, void *a13, char a14)
{
  void *v14;
  uint64_t v15;
  void *v16;
  void *v21;
  void *v22;
  void *v23;
  void *v25;
  id v26;
  id v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  void *v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  id v39;
  id v40;
  void *v41;
  id v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  id v48[2];
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  id *v56;
  id v57;

  v16 = v14;
  v56 = a3;
  if (a2)
  {
    v21 = (void *)sub_19E36F864();
    swift_bridgeObjectRelease();
  }
  else
  {
    v21 = 0;
  }
  v22 = 0;
  v49 = a6 >> 60;
  v52 = a5;
  v53 = a6;
  if (a6 >> 60 != 15 && a4)
  {
    swift_bridgeObjectRetain();
    v22 = (void *)sub_19E36F864();
    swift_bridgeObjectRelease();
  }
  v51 = a4;
  v57 = a13;
  v50 = a9;
  if (a8)
  {
    v23 = (void *)sub_19E36F864();
    swift_bridgeObjectRelease();
  }
  else
  {
    v23 = 0;
  }
  v54 = a11;
  v55 = a12;
  if (a12 >> 60 == 15 || a10 == 0)
  {
    v25 = 0;
  }
  else
  {
    swift_bridgeObjectRetain();
    v25 = (void *)sub_19E36F864();
    swift_bridgeObjectRelease();
  }
  v26 = objc_msgSend(v16, sel_initWithFileName_filePath_lowResFileName_lowResFilePath_metadata_contentIsSensitive_, v21, v22, v23, v25, v57, a14 & 1);

  if (a12 >> 60 == 15)
  {
    v27 = v26;
    swift_bridgeObjectRelease();
    v29 = v52;
    v28 = v53;
    v30 = v51;
    v31 = v55;
  }
  else
  {
    v31 = v55;
    if (a10)
    {
      v48[0] = v26;
      v32 = v54;
      sub_19E35F598(v54, v55);
      v33 = (void *)sub_19E36F864();
      v34 = objc_msgSend(v33, sel_stringByDeletingLastPathComponent);

      if (!v34)
      {
        sub_19E36F888();
        v34 = (id)sub_19E36F864();
        swift_bridgeObjectRelease();
      }
      IMSharedHelperEnsureDirectoryExistsAtPath((uint64_t)v34);

      v35 = sub_19E36F5E8();
      v48[1] = v48;
      v36 = *(_QWORD *)(v35 - 8);
      MEMORY[0x1E0C80A78](v35);
      v38 = (char *)v48 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
      sub_19E36F5B8();
      sub_19E36F618();
      if (v15)
      {
        (*(void (**)(char *, uint64_t))(v36 + 8))(v38, v35);

        sub_19E35D340(v32, v31);
        sub_19E35D340(v52, v53);
        swift_bridgeObjectRelease();
        v39 = v48[0];

        swift_bridgeObjectRelease();
        sub_19E35D340(v32, v31);
        return v26;
      }
      (*(void (**)(char *, uint64_t))(v36 + 8))(v38, v35);
      swift_bridgeObjectRelease();
      sub_19E35D340(v32, v31);
    }
    else
    {
      v40 = v26;
    }
    v29 = v52;
    v28 = v53;
    v30 = v51;
  }
  if (v49 < 0xF)
  {
    if (v30)
    {
      sub_19E35D354(v29, v28);
      v41 = (void *)sub_19E36F864();
      v42 = objc_msgSend(v41, sel_stringByDeletingLastPathComponent);

      if (!v42)
      {
        sub_19E36F888();
        v42 = (id)sub_19E36F864();
        swift_bridgeObjectRelease();
      }
      IMSharedHelperEnsureDirectoryExistsAtPath((uint64_t)v42);

      v43 = sub_19E36F5E8();
      v56 = v48;
      v44 = *(_QWORD *)(v43 - 8);
      MEMORY[0x1E0C80A78](v43);
      v46 = (char *)v48 - ((v45 + 15) & 0xFFFFFFFFFFFFFFF0);
      sub_19E36F5B8();
      sub_19E36F618();
      (*(void (**)(char *, uint64_t))(v44 + 8))(v46, v43);

      sub_19E35D340(v54, v55);
      sub_19E35D340(v29, v28);
      swift_bridgeObjectRelease();
      if (v15)

      sub_19E35D340(v29, v28);
    }
    else
    {
      sub_19E35D354(v29, v28);

      sub_19E35D340(v54, v31);
      sub_19E35D340(v29, v28);

      sub_19E35D340(v29, v28);
    }
  }
  else
  {

    sub_19E35D340(v54, v31);
    swift_bridgeObjectRelease();
  }
  return v26;
}

uint64_t sub_19E35D340(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15)
    return sub_19E33A6E0(a1, a2);
  return a1;
}

uint64_t sub_19E35D354(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_retain();
  }
  return swift_retain();
}

id Wallpaper.__allocating_init(dictionaryRepresentation:)(uint64_t a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  return Wallpaper.init(dictionaryRepresentation:)(a1);
}

id Wallpaper.init(dictionaryRepresentation:)(uint64_t a1)
{
  char *v1;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t *v5;
  char *v6;
  uint64_t *v7;
  char *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char v19;
  char *v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  char v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  char v54;
  id v55;
  void *v56;
  id v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t *v62;
  uint64_t *v63;
  uint64_t *v64;
  objc_super v65;
  uint64_t v66;
  uint64_t v67;
  __int128 v68;
  __int128 v69;

  v3 = (uint64_t *)&v1[OBJC_IVAR___IMWallpaper_SwiftImpl_filePathKey];
  *v3 = 0xD000000000000014;
  v3[1] = 0x800000019E39EB10;
  v4 = (uint64_t *)&v1[OBJC_IVAR___IMWallpaper_SwiftImpl_fileNameKey];
  *v4 = 0xD000000000000014;
  v4[1] = 0x800000019E39EB30;
  v61 = v4;
  v62 = v3;
  v5 = (uint64_t *)&v1[OBJC_IVAR___IMWallpaper_SwiftImpl_lowResFilePathKey];
  *v5 = 0xD00000000000001ALL;
  v5[1] = 0x800000019E39EB50;
  v6 = &v1[OBJC_IVAR___IMWallpaper_SwiftImpl_lowResFileNameKey];
  *(_QWORD *)v6 = 0xD00000000000001ALL;
  *((_QWORD *)v6 + 1) = 0x800000019E39EB70;
  v7 = (uint64_t *)&v1[OBJC_IVAR___IMWallpaper_SwiftImpl_dataVersionKey];
  *v7 = 0xD000000000000013;
  v7[1] = 0x800000019E39EB90;
  v8 = &v1[OBJC_IVAR___IMWallpaper_SwiftImpl_highResKey];
  *(_QWORD *)v8 = 0xD000000000000013;
  *((_QWORD *)v8 + 1) = 0x800000019E39EBB0;
  v9 = (uint64_t *)&v1[OBJC_IVAR___IMWallpaper_SwiftImpl_metadataKey];
  *v9 = 0xD000000000000014;
  v9[1] = 0x800000019E39EBD0;
  v64 = v9;
  v10 = (uint64_t *)&v1[OBJC_IVAR___IMWallpaper_SwiftImpl_contentIsSensitiveKey];
  *v10 = 0xD000000000000015;
  v10[1] = 0x800000019E39EBF0;
  v63 = v10;
  v11 = *(_QWORD *)(a1 + 16);
  v12 = v1;
  if (v11)
  {
    v13 = sub_19E3247E4(0xD00000000000001ALL, 0x800000019E39EB70);
    if ((v14 & 1) != 0)
    {
      sub_19E324848(*(_QWORD *)(a1 + 56) + 32 * v13, (uint64_t)&v68);
      if ((swift_dynamicCast() & 1) != 0)
      {
        v15 = v67;
        v60 = a1;
        if (*(_QWORD *)(a1 + 16))
        {
          v59 = v66;
          v16 = *v5;
          v17 = v5[1];
          swift_bridgeObjectRetain();
          v18 = sub_19E3247E4(v16, v17);
          if ((v19 & 1) != 0)
          {
            sub_19E324848(*(_QWORD *)(a1 + 56) + 32 * v18, (uint64_t)&v68);
          }
          else
          {
            v68 = 0u;
            v69 = 0u;
          }
          v20 = v12;
          swift_bridgeObjectRelease();
          if (*((_QWORD *)&v69 + 1))
          {
            if ((swift_dynamicCast() & 1) == 0)
            {
LABEL_28:
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              goto LABEL_8;
            }
            v22 = v67;
            if (*(_QWORD *)(a1 + 16))
            {
              v58 = v66;
              v24 = *v7;
              v23 = v7[1];
              swift_bridgeObjectRetain();
              v25 = sub_19E3247E4(v24, v23);
              if ((v26 & 1) != 0)
              {
                sub_19E324848(*(_QWORD *)(v60 + 56) + 32 * v25, (uint64_t)&v68);
              }
              else
              {
                v68 = 0u;
                v69 = 0u;
              }
              swift_bridgeObjectRelease();
              if (*((_QWORD *)&v69 + 1))
              {
                if ((swift_dynamicCast() & 1) != 0)
                {
                  v27 = v66;
                  if (*(_QWORD *)(v60 + 16))
                  {
                    v28 = *v61;
                    v29 = v61[1];
                    swift_bridgeObjectRetain();
                    v30 = sub_19E3247E4(v28, v29);
                    if ((v31 & 1) != 0)
                    {
                      sub_19E324848(*(_QWORD *)(v60 + 56) + 32 * v30, (uint64_t)&v68);
                    }
                    else
                    {
                      v68 = 0u;
                      v69 = 0u;
                    }
                    swift_bridgeObjectRelease();
                    if (*((_QWORD *)&v69 + 1))
                    {
                      v32 = swift_dynamicCast();
                      v33 = v66;
                      v34 = v67;
                      if (!v32)
                      {
                        v33 = 0;
                        v34 = 0;
                      }
LABEL_35:
                      v35 = &v20[OBJC_IVAR___IMWallpaper_SwiftImpl_fileName];
                      *(_QWORD *)v35 = v33;
                      *((_QWORD *)v35 + 1) = v34;
                      if (*(_QWORD *)(v60 + 16))
                      {
                        v36 = *v62;
                        v37 = v62[1];
                        swift_bridgeObjectRetain();
                        v38 = sub_19E3247E4(v36, v37);
                        if ((v39 & 1) != 0)
                        {
                          sub_19E324848(*(_QWORD *)(v60 + 56) + 32 * v38, (uint64_t)&v68);
                        }
                        else
                        {
                          v68 = 0u;
                          v69 = 0u;
                        }
                        swift_bridgeObjectRelease();
                        if (*((_QWORD *)&v69 + 1))
                        {
                          v40 = swift_dynamicCast();
                          v41 = v66;
                          v42 = v67;
                          if (!v40)
                          {
                            v41 = 0;
                            v42 = 0;
                          }
LABEL_44:
                          v43 = &v20[OBJC_IVAR___IMWallpaper_SwiftImpl_filePath];
                          *(_QWORD *)v43 = v41;
                          *((_QWORD *)v43 + 1) = v42;
                          v44 = &v20[OBJC_IVAR___IMWallpaper_SwiftImpl_lowResFileName];
                          *(_QWORD *)v44 = v59;
                          *((_QWORD *)v44 + 1) = v15;
                          v45 = &v20[OBJC_IVAR___IMWallpaper_SwiftImpl_lowResFilePath];
                          *(_QWORD *)v45 = v58;
                          *((_QWORD *)v45 + 1) = v22;
                          *(_QWORD *)&v20[OBJC_IVAR___IMWallpaper_SwiftImpl_dataVersion] = v27;
                          if (*(_QWORD *)(v60 + 16))
                          {
                            v46 = *v63;
                            v47 = v63[1];
                            swift_bridgeObjectRetain();
                            v48 = sub_19E3247E4(v46, v47);
                            if ((v49 & 1) != 0)
                            {
                              sub_19E324848(*(_QWORD *)(v60 + 56) + 32 * v48, (uint64_t)&v68);
                            }
                            else
                            {
                              v68 = 0u;
                              v69 = 0u;
                            }
                            swift_bridgeObjectRelease();
                            if (*((_QWORD *)&v69 + 1))
                            {
                              if (swift_dynamicCast())
                              {
                                v50 = v66;
                                goto LABEL_54;
                              }
LABEL_53:
                              v50 = 0;
LABEL_54:
                              v20[OBJC_IVAR___IMWallpaper_SwiftImpl_contentIsSensitive] = v50;
                              if (*(_QWORD *)(v60 + 16))
                              {
                                v51 = *v64;
                                v52 = v64[1];
                                swift_bridgeObjectRetain();
                                v53 = sub_19E3247E4(v51, v52);
                                if ((v54 & 1) != 0)
                                {
                                  sub_19E324848(*(_QWORD *)(v60 + 56) + 32 * v53, (uint64_t)&v68);
                                }
                                else
                                {
                                  v68 = 0u;
                                  v69 = 0u;
                                }
                                swift_bridgeObjectRelease();
                              }
                              else
                              {
                                v68 = 0u;
                                v69 = 0u;
                              }
                              swift_bridgeObjectRelease();
                              if (*((_QWORD *)&v69 + 1))
                              {
                                sub_19E247E74(&qword_1EE503490);
                                if ((swift_dynamicCast() & 1) != 0)
                                {
                                  v55 = objc_allocWithZone((Class)IMWallpaperMetadata);
                                  v56 = (void *)sub_19E36F81C();
                                  swift_bridgeObjectRelease();
                                  v57 = objc_msgSend(v55, sel_initWithDictionaryRepresentation_, v56);

LABEL_65:
                                  *(_QWORD *)&v20[OBJC_IVAR___IMWallpaper_SwiftImpl_metadata] = v57;

                                  v65.receiver = v20;
                                  v65.super_class = (Class)type metadata accessor for Wallpaper();
                                  return objc_msgSendSuper2(&v65, sel_init);
                                }
                              }
                              else
                              {
                                sub_19E322284((uint64_t)&v68);
                              }
                              v57 = 0;
                              goto LABEL_65;
                            }
                          }
                          else
                          {
                            v68 = 0u;
                            v69 = 0u;
                          }
                          sub_19E322284((uint64_t)&v68);
                          goto LABEL_53;
                        }
                      }
                      else
                      {
                        v68 = 0u;
                        v69 = 0u;
                      }
                      sub_19E322284((uint64_t)&v68);
                      v41 = 0;
                      v42 = 0;
                      goto LABEL_44;
                    }
                  }
                  else
                  {
                    v68 = 0u;
                    v69 = 0u;
                  }
                  sub_19E322284((uint64_t)&v68);
                  v33 = 0;
                  v34 = 0;
                  goto LABEL_35;
                }
                swift_bridgeObjectRelease();
                goto LABEL_28;
              }
            }
            else
            {
              v68 = 0u;
              v69 = 0u;
            }
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            goto LABEL_18;
          }
        }
        else
        {
          v68 = 0u;
          v69 = 0u;
          v20 = v12;
        }
        swift_bridgeObjectRelease();
LABEL_18:
        swift_bridgeObjectRelease();
        sub_19E322284((uint64_t)&v68);
        goto LABEL_8;
      }
    }
  }
  swift_bridgeObjectRelease();
  v20 = v12;
LABEL_8:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  type metadata accessor for Wallpaper();
  swift_deallocPartialClassInstance();
  return 0;
}

void sub_19E35DD08(void *a1)
{
  uint64_t v1;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  void *v14;
  void *v15;
  id v16;
  id v17;

  if (*(_QWORD *)(v1 + OBJC_IVAR___IMWallpaper_SwiftImpl_fileName + 8)
    && *(_QWORD *)(v1 + OBJC_IVAR___IMWallpaper_SwiftImpl_filePath + 8))
  {
    v3 = (void *)sub_19E36F864();
    v4 = (void *)sub_19E36F864();
    objc_msgSend(a1, sel_encodeObject_forKey_, v3, v4);

    v5 = (void *)sub_19E36F864();
    v6 = (void *)sub_19E36F864();
    objc_msgSend(a1, sel_encodeObject_forKey_, v5, v6);

  }
  if (*(_QWORD *)(v1 + OBJC_IVAR___IMWallpaper_SwiftImpl_lowResFileName + 8))
    v7 = sub_19E36F864();
  else
    v7 = 0;
  v8 = (void *)sub_19E36F864();
  objc_msgSend(a1, sel_encodeObject_forKey_, v7, v8);
  swift_unknownObjectRelease();

  if (*(_QWORD *)(v1 + OBJC_IVAR___IMWallpaper_SwiftImpl_lowResFilePath + 8))
    v9 = sub_19E36F864();
  else
    v9 = 0;
  v10 = (void *)sub_19E36F864();
  objc_msgSend(a1, sel_encodeObject_forKey_, v9, v10);
  swift_unknownObjectRelease();

  v11 = (void *)sub_19E36FA68();
  v12 = (void *)sub_19E36F864();
  objc_msgSend(a1, sel_encodeObject_forKey_, v11, v12);

  v13 = *(unsigned __int8 *)(v1 + OBJC_IVAR___IMWallpaper_SwiftImpl_contentIsSensitive);
  v14 = (void *)sub_19E36F864();
  objc_msgSend(a1, sel_encodeBool_forKey_, v13, v14);

  v15 = *(void **)(v1 + OBJC_IVAR___IMWallpaper_SwiftImpl_metadata);
  if (v15)
  {
    v16 = v15;
    v17 = (id)sub_19E36F864();
    objc_msgSend(a1, sel_encodeObject_forKey_, v16, v17);

  }
}

id Wallpaper.__allocating_init(coder:)(void *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  return Wallpaper.init(coder:)(a1);
}

id Wallpaper.init(coder:)(void *a1)
{
  char *v1;
  char *v2;
  char *v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  void *v16;
  void *v17;
  __int128 v18;
  void *v19;
  __int128 v20;
  void *v21;
  __int128 v22;
  id v23;
  uint64_t v24;
  void *v25;
  unsigned __int8 v26;
  id v27;
  char *v29;
  id v30;
  objc_super v31;

  v2 = v1;
  v4 = &v2[OBJC_IVAR___IMWallpaper_SwiftImpl_filePathKey];
  *(_QWORD *)v4 = 0xD000000000000014;
  *((_QWORD *)v4 + 1) = 0x800000019E39EB10;
  v5 = &v2[OBJC_IVAR___IMWallpaper_SwiftImpl_fileNameKey];
  *(_QWORD *)v5 = 0xD000000000000014;
  *((_QWORD *)v5 + 1) = 0x800000019E39EB30;
  v6 = &v2[OBJC_IVAR___IMWallpaper_SwiftImpl_lowResFilePathKey];
  *(_QWORD *)v6 = 0xD00000000000001ALL;
  *((_QWORD *)v6 + 1) = 0x800000019E39EB50;
  v7 = &v2[OBJC_IVAR___IMWallpaper_SwiftImpl_lowResFileNameKey];
  *(_QWORD *)v7 = 0xD00000000000001ALL;
  *((_QWORD *)v7 + 1) = 0x800000019E39EB70;
  v8 = &v2[OBJC_IVAR___IMWallpaper_SwiftImpl_dataVersionKey];
  *(_QWORD *)v8 = 0xD000000000000013;
  *((_QWORD *)v8 + 1) = 0x800000019E39EB90;
  v29 = v8;
  v9 = &v2[OBJC_IVAR___IMWallpaper_SwiftImpl_highResKey];
  *(_QWORD *)v9 = 0xD000000000000013;
  *((_QWORD *)v9 + 1) = 0x800000019E39EBB0;
  v10 = &v2[OBJC_IVAR___IMWallpaper_SwiftImpl_metadataKey];
  *(_QWORD *)v10 = 0xD000000000000014;
  *((_QWORD *)v10 + 1) = 0x800000019E39EBD0;
  v11 = &v2[OBJC_IVAR___IMWallpaper_SwiftImpl_contentIsSensitiveKey];
  *(_QWORD *)v11 = 0xD000000000000015;
  *((_QWORD *)v11 + 1) = 0x800000019E39EBF0;
  sub_19E24B854(0, (unint64_t *)&qword_1ECFC6A00);
  v12 = v2;
  v13 = sub_19E36FB88();
  if (v13)
  {
    v30 = (id)v13;
    sub_19E24B854(0, (unint64_t *)&unk_1ECFC6A50);
    v14 = sub_19E36FB88();
    v15 = 0uLL;
    if (v14)
    {
      v16 = (void *)v14;
      sub_19E36F87C();

      v15 = 0uLL;
    }
    *(_OWORD *)&v12[OBJC_IVAR___IMWallpaper_SwiftImpl_lowResFileName] = v15;
    swift_bridgeObjectRetain();
    v17 = (void *)sub_19E36FB88();
    swift_bridgeObjectRelease();
    v18 = 0uLL;
    if (v17)
    {
      sub_19E36F87C();

      v18 = 0uLL;
    }
    *(_OWORD *)&v12[OBJC_IVAR___IMWallpaper_SwiftImpl_lowResFilePath] = v18;
    swift_bridgeObjectRetain();
    v19 = (void *)sub_19E36FB88();
    swift_bridgeObjectRelease();
    v20 = 0uLL;
    if (v19)
    {
      sub_19E36F87C();

      v20 = 0uLL;
    }
    *(_OWORD *)&v12[OBJC_IVAR___IMWallpaper_SwiftImpl_filePath] = v20;
    swift_bridgeObjectRetain();
    v21 = (void *)sub_19E36FB88();
    swift_bridgeObjectRelease();
    v22 = 0uLL;
    if (v21)
    {
      sub_19E36F87C();

      v22 = 0uLL;
    }
    *(_OWORD *)&v12[OBJC_IVAR___IMWallpaper_SwiftImpl_fileName] = v22;
    v23 = objc_msgSend(v30, sel_integerValue, v29);
    *(_QWORD *)&v12[OBJC_IVAR___IMWallpaper_SwiftImpl_dataVersion] = v23;
    sub_19E24B854(0, &qword_1EE503498);
    swift_bridgeObjectRetain();
    v24 = sub_19E36FB88();
    swift_bridgeObjectRelease();
    *(_QWORD *)&v12[OBJC_IVAR___IMWallpaper_SwiftImpl_metadata] = v24;
    swift_bridgeObjectRetain();
    v25 = (void *)sub_19E36F864();
    swift_bridgeObjectRelease();
    v26 = objc_msgSend(a1, sel_decodeBoolForKey_, v25);

    v12[OBJC_IVAR___IMWallpaper_SwiftImpl_contentIsSensitive] = v26;
    v31.receiver = v12;
    v31.super_class = (Class)type metadata accessor for Wallpaper();
    v27 = objc_msgSendSuper2(&v31, sel_init);

  }
  else
  {

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    type metadata accessor for Wallpaper();
    swift_deallocPartialClassInstance();
    return 0;
  }
  return v27;
}

unint64_t sub_19E35E508()
{
  return sub_19E35E550(&OBJC_IVAR___IMWallpaper_SwiftImpl_filePath);
}

unint64_t sub_19E35E544()
{
  return sub_19E35E550(&OBJC_IVAR___IMWallpaper_SwiftImpl_lowResFilePath);
}

unint64_t sub_19E35E550(_QWORD *a1)
{
  uint64_t v1;
  uint64_t *v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  void *v7;

  v2 = (uint64_t *)(v1 + *a1);
  v3 = v2[1];
  if (v3)
  {
    v4 = *v2;
    v5 = HIBYTE(v3) & 0xF;
    if ((v3 & 0x2000000000000000) == 0)
      v5 = v4 & 0xFFFFFFFFFFFFLL;
    if (v5)
    {
      v6 = objc_msgSend((id)objc_opt_self(), sel_defaultManager);
      v7 = (void *)sub_19E36F864();
      v3 = (unint64_t)objc_msgSend(v6, sel_fileExistsAtPath_, v7);

    }
    else
    {
      return 0;
    }
  }
  return v3;
}

uint64_t sub_19E35E5F8()
{
  return sub_19E35E63C(&OBJC_IVAR___IMWallpaper_SwiftImpl_filePath);
}

uint64_t sub_19E35E620()
{
  return sub_19E35E63C(&OBJC_IVAR___IMWallpaper_SwiftImpl_lowResFilePath);
}

uint64_t sub_19E35E63C(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v11;

  v3 = *(_QWORD *)(v1 + *a1 + 8);
  if (v3)
  {
    v4 = sub_19E36F5E8();
    v5 = *(_QWORD *)(v4 - 8);
    MEMORY[0x1E0C80A78](v4);
    v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
    sub_19E36F5B8();
    v8 = sub_19E36F5F4();
    if (!v2)
      v3 = v8;
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
  else
  {
    sub_19E35F5AC();
    swift_allocError();
    *v9 = 0;
    swift_willThrow();
  }
  return v3;
}

id sub_19E35E768(char *a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  void *v11;
  id v12;
  void *v13;
  _BYTE *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  void *v18;
  uint64_t v20;

  if (*(_QWORD *)&a1[*a4 + 8])
  {
    v6 = sub_19E36F5E8();
    v7 = *(_QWORD *)(v6 - 8);
    MEMORY[0x1E0C80A78](v6);
    v9 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
    v10 = a1;
    sub_19E36F5B8();
    v15 = sub_19E36F5F4();
    v17 = v16;
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);

    v18 = (void *)sub_19E36F600();
    sub_19E33A6E0(v15, v17);
    return v18;
  }
  else
  {
    sub_19E35F5AC();
    v13 = (void *)swift_allocError();
    *v14 = 0;
    swift_willThrow();
    if (a3)
    {
      v11 = (void *)sub_19E36F570();

      v12 = v11;
      *a3 = v11;
    }
    else
    {

    }
    return 0;
  }
}

uint64_t sub_19E35E8F4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  id v15;
  id v16;
  char v17;
  char v18;
  char v19;
  char v20;
  char *v22;
  _BYTE v23[24];
  uint64_t v24;

  v2 = v1;
  sub_19E323318(a1, (uint64_t)v23);
  if (!v24)
  {
    sub_19E322284((uint64_t)v23);
    goto LABEL_43;
  }
  type metadata accessor for Wallpaper();
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_43:
    v20 = 0;
    return v20 & 1;
  }
  v3 = *(_QWORD *)(v1 + OBJC_IVAR___IMWallpaper_SwiftImpl_fileName + 8);
  v4 = *(_QWORD *)&v22[OBJC_IVAR___IMWallpaper_SwiftImpl_fileName + 8];
  if (v3)
  {
    if (!v4)
      goto LABEL_42;
    v5 = *(_QWORD *)(v1 + OBJC_IVAR___IMWallpaper_SwiftImpl_fileName) == *(_QWORD *)&v22[OBJC_IVAR___IMWallpaper_SwiftImpl_fileName]
      && v3 == v4;
    if (!v5 && (sub_19E36FE10() & 1) == 0)
      goto LABEL_42;
  }
  else if (v4)
  {
    goto LABEL_42;
  }
  v6 = *(_QWORD *)(v1 + OBJC_IVAR___IMWallpaper_SwiftImpl_filePath + 8);
  v7 = *(_QWORD *)&v22[OBJC_IVAR___IMWallpaper_SwiftImpl_filePath + 8];
  if (v6)
  {
    if (!v7)
      goto LABEL_42;
    v8 = *(_QWORD *)(v1 + OBJC_IVAR___IMWallpaper_SwiftImpl_filePath) == *(_QWORD *)&v22[OBJC_IVAR___IMWallpaper_SwiftImpl_filePath]
      && v6 == v7;
    if (!v8 && (sub_19E36FE10() & 1) == 0)
      goto LABEL_42;
  }
  else if (v7)
  {
    goto LABEL_42;
  }
  if (*(_QWORD *)(v1 + OBJC_IVAR___IMWallpaper_SwiftImpl_dataVersion) != *(_QWORD *)&v22[OBJC_IVAR___IMWallpaper_SwiftImpl_dataVersion])
    goto LABEL_42;
  v9 = *(_QWORD *)(v1 + OBJC_IVAR___IMWallpaper_SwiftImpl_lowResFileName + 8);
  v10 = *(_QWORD *)&v22[OBJC_IVAR___IMWallpaper_SwiftImpl_lowResFileName + 8];
  if (v9)
  {
    if (!v10
      || (*(_QWORD *)(v1 + OBJC_IVAR___IMWallpaper_SwiftImpl_lowResFileName) != *(_QWORD *)&v22[OBJC_IVAR___IMWallpaper_SwiftImpl_lowResFileName]
       || v9 != v10)
      && (sub_19E36FE10() & 1) == 0)
    {
      goto LABEL_42;
    }
  }
  else if (v10)
  {
    goto LABEL_42;
  }
  v11 = *(_QWORD *)(v1 + OBJC_IVAR___IMWallpaper_SwiftImpl_lowResFilePath + 8);
  v12 = *(_QWORD *)&v22[OBJC_IVAR___IMWallpaper_SwiftImpl_lowResFilePath + 8];
  if (v11)
  {
    if (!v12
      || (*(_QWORD *)(v1 + OBJC_IVAR___IMWallpaper_SwiftImpl_lowResFilePath) != *(_QWORD *)&v22[OBJC_IVAR___IMWallpaper_SwiftImpl_lowResFilePath]
       || v11 != v12)
      && (sub_19E36FE10() & 1) == 0)
    {
      goto LABEL_42;
    }
  }
  else if (v12)
  {
    goto LABEL_42;
  }
  v13 = *(void **)(v1 + OBJC_IVAR___IMWallpaper_SwiftImpl_metadata);
  v14 = *(void **)&v22[OBJC_IVAR___IMWallpaper_SwiftImpl_metadata];
  if (v13)
  {
    if (v14)
    {
      sub_19E24B854(0, &qword_1EE503498);
      v15 = v14;
      v16 = v13;
      v17 = sub_19E36FBB8();

      if ((v17 & 1) != 0)
        goto LABEL_40;
    }
LABEL_42:

    goto LABEL_43;
  }
  if (v14)
    goto LABEL_42;
LABEL_40:
  v18 = *(_BYTE *)(v2 + OBJC_IVAR___IMWallpaper_SwiftImpl_contentIsSensitive);
  v19 = v22[OBJC_IVAR___IMWallpaper_SwiftImpl_contentIsSensitive];

  v20 = v18 ^ v19 ^ 1;
  return v20 & 1;
}

unint64_t sub_19E35EBC4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t inited;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  id v22;
  uint64_t v23;
  char v24;
  _OWORD v26[2];
  __int128 v27;
  uint64_t v28;

  v1 = v0;
  sub_19E247E74(&qword_1EE5019B8);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_19E381BA0;
  v3 = *(_QWORD *)(v0 + OBJC_IVAR___IMWallpaper_SwiftImpl_dataVersionKey + 8);
  *(_QWORD *)(inited + 32) = *(_QWORD *)(v0 + OBJC_IVAR___IMWallpaper_SwiftImpl_dataVersionKey);
  *(_QWORD *)(inited + 40) = v3;
  v4 = *(_QWORD *)(v0 + OBJC_IVAR___IMWallpaper_SwiftImpl_dataVersion);
  *(_QWORD *)(inited + 72) = MEMORY[0x1E0DEB418];
  *(_QWORD *)(inited + 48) = v4;
  swift_bridgeObjectRetain();
  v5 = sub_19E32D864(inited);
  v6 = (uint64_t *)(v0 + OBJC_IVAR___IMWallpaper_SwiftImpl_fileName);
  v7 = *(_QWORD *)(v0 + OBJC_IVAR___IMWallpaper_SwiftImpl_fileName + 8);
  v8 = MEMORY[0x1E0DEA968];
  if (v7)
  {
    v9 = *v6;
    v10 = *(_QWORD *)(v1 + OBJC_IVAR___IMWallpaper_SwiftImpl_fileNameKey);
    v11 = *(_QWORD *)(v1 + OBJC_IVAR___IMWallpaper_SwiftImpl_fileNameKey + 8);
    v28 = MEMORY[0x1E0DEA968];
    *(_QWORD *)&v27 = v9;
    *((_QWORD *)&v27 + 1) = v7;
    sub_19E24B594(&v27, v26);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    sub_19E32FCE4(v26, v10, v11, isUniquelyReferenced_nonNull_native);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  v13 = *(_QWORD *)(v1 + OBJC_IVAR___IMWallpaper_SwiftImpl_lowResFileName + 8);
  if (v13)
  {
    v14 = *(_QWORD *)(v1 + OBJC_IVAR___IMWallpaper_SwiftImpl_lowResFileName);
    v15 = *(_QWORD *)(v1 + OBJC_IVAR___IMWallpaper_SwiftImpl_lowResFileNameKey);
    v16 = *(_QWORD *)(v1 + OBJC_IVAR___IMWallpaper_SwiftImpl_lowResFileNameKey + 8);
    v28 = v8;
    *(_QWORD *)&v27 = v14;
    *((_QWORD *)&v27 + 1) = v13;
    sub_19E24B594(&v27, v26);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v17 = swift_isUniquelyReferenced_nonNull_native();
    sub_19E32FCE4(v26, v15, v16, v17);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  v18 = *(void **)(v1 + OBJC_IVAR___IMWallpaper_SwiftImpl_metadata);
  if (v18)
  {
    v20 = *(_QWORD *)(v1 + OBJC_IVAR___IMWallpaper_SwiftImpl_metadataKey);
    v19 = *(_QWORD *)(v1 + OBJC_IVAR___IMWallpaper_SwiftImpl_metadataKey + 8);
    v21 = v18;
    swift_bridgeObjectRetain();
    v22 = objc_msgSend(v21, sel_dictionaryRepresentation);
    v23 = sub_19E36F828();

    v28 = sub_19E247E74(&qword_1EE503490);
    *(_QWORD *)&v27 = v23;
    sub_19E24B594(&v27, v26);
    v24 = swift_isUniquelyReferenced_nonNull_native();
    sub_19E32FCE4(v26, v20, v19, v24);

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return v5;
}

id sub_19E35EE4C(void *a1, uint64_t a2, void (*a3)(void))
{
  id v4;
  void *v5;

  v4 = a1;
  a3();

  v5 = (void *)sub_19E36F81C();
  swift_bridgeObjectRelease();
  return v5;
}

unint64_t sub_19E35EEB0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t inited;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  id v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  char v38;
  _OWORD v40[2];
  __int128 v41;
  uint64_t v42;

  v1 = v0;
  sub_19E247E74(&qword_1EE5019B8);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_19E381BA0;
  v3 = *(_QWORD *)(v1 + OBJC_IVAR___IMWallpaper_SwiftImpl_dataVersionKey + 8);
  *(_QWORD *)(inited + 32) = *(_QWORD *)(v1 + OBJC_IVAR___IMWallpaper_SwiftImpl_dataVersionKey);
  *(_QWORD *)(inited + 40) = v3;
  v4 = *(_QWORD *)(v1 + OBJC_IVAR___IMWallpaper_SwiftImpl_dataVersion);
  *(_QWORD *)(inited + 72) = MEMORY[0x1E0DEB418];
  *(_QWORD *)(inited + 48) = v4;
  swift_bridgeObjectRetain();
  v5 = sub_19E32D864(inited);
  v6 = *(_QWORD *)(v1 + OBJC_IVAR___IMWallpaper_SwiftImpl_fileName + 8);
  if (v6)
  {
    v7 = *(_QWORD *)(v1 + OBJC_IVAR___IMWallpaper_SwiftImpl_filePath + 8);
    if (v7)
    {
      v8 = *(_QWORD *)(v1 + OBJC_IVAR___IMWallpaper_SwiftImpl_fileName);
      v9 = *(_QWORD *)(v1 + OBJC_IVAR___IMWallpaper_SwiftImpl_filePath);
      v10 = *(_QWORD *)(v1 + OBJC_IVAR___IMWallpaper_SwiftImpl_fileNameKey);
      v11 = *(_QWORD *)(v1 + OBJC_IVAR___IMWallpaper_SwiftImpl_fileNameKey + 8);
      v12 = MEMORY[0x1E0DEA968];
      v42 = MEMORY[0x1E0DEA968];
      *(_QWORD *)&v41 = v8;
      *((_QWORD *)&v41 + 1) = v6;
      sub_19E24B594(&v41, v40);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      sub_19E32FCE4(v40, v10, v11, isUniquelyReferenced_nonNull_native);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v14 = *(_QWORD *)(v1 + OBJC_IVAR___IMWallpaper_SwiftImpl_filePathKey);
      v15 = *(_QWORD *)(v1 + OBJC_IVAR___IMWallpaper_SwiftImpl_filePathKey + 8);
      v42 = v12;
      *(_QWORD *)&v41 = v9;
      *((_QWORD *)&v41 + 1) = v7;
      sub_19E24B594(&v41, v40);
      swift_bridgeObjectRetain();
      v16 = swift_isUniquelyReferenced_nonNull_native();
      sub_19E32FCE4(v40, v14, v15, v16);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
  }
  v17 = *(_QWORD *)(v1 + OBJC_IVAR___IMWallpaper_SwiftImpl_lowResFileName + 8);
  if (v17)
  {
    v18 = *(_QWORD *)(v1 + OBJC_IVAR___IMWallpaper_SwiftImpl_lowResFilePath + 8);
    if (v18)
    {
      v19 = *(_QWORD *)(v1 + OBJC_IVAR___IMWallpaper_SwiftImpl_lowResFileName);
      v20 = *(_QWORD *)(v1 + OBJC_IVAR___IMWallpaper_SwiftImpl_lowResFilePath);
      v21 = *(_QWORD *)(v1 + OBJC_IVAR___IMWallpaper_SwiftImpl_lowResFileNameKey);
      v22 = *(_QWORD *)(v1 + OBJC_IVAR___IMWallpaper_SwiftImpl_lowResFileNameKey + 8);
      v23 = MEMORY[0x1E0DEA968];
      v42 = MEMORY[0x1E0DEA968];
      *(_QWORD *)&v41 = v19;
      *((_QWORD *)&v41 + 1) = v17;
      sub_19E24B594(&v41, v40);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v24 = swift_isUniquelyReferenced_nonNull_native();
      sub_19E32FCE4(v40, v21, v22, v24);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v25 = *(_QWORD *)(v1 + OBJC_IVAR___IMWallpaper_SwiftImpl_lowResFilePathKey);
      v26 = *(_QWORD *)(v1 + OBJC_IVAR___IMWallpaper_SwiftImpl_lowResFilePathKey + 8);
      v42 = v23;
      *(_QWORD *)&v41 = v20;
      *((_QWORD *)&v41 + 1) = v18;
      sub_19E24B594(&v41, v40);
      swift_bridgeObjectRetain();
      v27 = swift_isUniquelyReferenced_nonNull_native();
      sub_19E32FCE4(v40, v25, v26, v27);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
  }
  v28 = *(void **)(v1 + OBJC_IVAR___IMWallpaper_SwiftImpl_metadata);
  if (v28)
  {
    v30 = *(_QWORD *)(v1 + OBJC_IVAR___IMWallpaper_SwiftImpl_metadataKey);
    v29 = *(_QWORD *)(v1 + OBJC_IVAR___IMWallpaper_SwiftImpl_metadataKey + 8);
    v31 = v28;
    swift_bridgeObjectRetain();
    v32 = objc_msgSend(v31, sel_dictionaryRepresentation);
    v33 = sub_19E36F828();

    v42 = sub_19E247E74(&qword_1EE503490);
    *(_QWORD *)&v41 = v33;
    sub_19E24B594(&v41, v40);
    v34 = swift_isUniquelyReferenced_nonNull_native();
    sub_19E32FCE4(v40, v30, v29, v34);

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  v35 = *(_QWORD *)(v1 + OBJC_IVAR___IMWallpaper_SwiftImpl_contentIsSensitiveKey);
  v36 = *(_QWORD *)(v1 + OBJC_IVAR___IMWallpaper_SwiftImpl_contentIsSensitiveKey + 8);
  v37 = *(_BYTE *)(v1 + OBJC_IVAR___IMWallpaper_SwiftImpl_contentIsSensitive);
  v42 = MEMORY[0x1E0DEAFA0];
  LOBYTE(v41) = v37;
  sub_19E24B594(&v41, v40);
  swift_bridgeObjectRetain();
  v38 = swift_isUniquelyReferenced_nonNull_native();
  sub_19E32FCE4(v40, v35, v36, v38);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v5;
}

id Wallpaper.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void Wallpaper.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id Wallpaper.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for Wallpaper();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t sub_19E35F47C(char *a1, char *a2)
{
  return sub_19E35B8E0(*a1, *a2);
}

uint64_t sub_19E35F488()
{
  return sub_19E35C338();
}

uint64_t sub_19E35F490()
{
  sub_19E36F8B8();
  return swift_bridgeObjectRelease();
}

uint64_t sub_19E35F4F0()
{
  return sub_19E35C864();
}

uint64_t sub_19E35F4F8@<X0>(char *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;
  char v4;

  v2 = sub_19E36FD44();
  result = swift_bridgeObjectRelease();
  if (v2 == 1)
    v4 = 1;
  else
    v4 = 2;
  if (!v2)
    v4 = 0;
  *a1 = v4;
  return result;
}

void sub_19E35F554(unint64_t *a1@<X8>)
{
  _BYTE *v1;
  unint64_t v2;
  unint64_t v3;

  if (*v1)
    v2 = 0xD000000000000018;
  else
    v2 = 0xD000000000000012;
  v3 = 0x800000019E39C0C0;
  if (*v1)
    v3 = 0x800000019E39C0E0;
  *a1 = v2;
  a1[1] = v3;
}

uint64_t sub_19E35F598(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15)
    return sub_19E35D354(a1, a2);
  return a1;
}

unint64_t sub_19E35F5AC()
{
  unint64_t result;

  result = qword_1EE5034A0;
  if (!qword_1EE5034A0)
  {
    result = MEMORY[0x1A1AE8A18](&unk_19E382FE0, &type metadata for Wallpaper.WallpaperError);
    atomic_store(result, (unint64_t *)&qword_1EE5034A0);
  }
  return result;
}

uint64_t method lookup function for Wallpaper()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of Wallpaper.__allocating_init(fileName:filePath:lowResFileName:lowResFilePath:metadata:contentIsSensitive:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 200))();
}

uint64_t dispatch thunk of Wallpaper.__allocating_init(dictionaryRepresentation:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 208))();
}

uint64_t dispatch thunk of Wallpaper.encode(with:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xD8))();
}

uint64_t dispatch thunk of Wallpaper.__allocating_init(coder:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 224))();
}

uint64_t dispatch thunk of Wallpaper.wallpaperExists.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xE8))();
}

uint64_t dispatch thunk of Wallpaper.lowResWallpaperExists.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xF0))();
}

uint64_t dispatch thunk of Wallpaper.fetchWallpaperData()()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xF8))();
}

uint64_t dispatch thunk of Wallpaper.fetchLowResWallpaperData()()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x100))();
}

uint64_t dispatch thunk of Wallpaper.publicDictionaryRepresentation.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x108))();
}

uint64_t dispatch thunk of Wallpaper.dictionaryRepresentation.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x110))();
}

uint64_t storeEnumTagSinglePayload for Wallpaper.WallpaperError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_19E35F754 + 4 * byte_19E382EFF[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_19E35F788 + 4 * byte_19E382EFA[v4]))();
}

uint64_t sub_19E35F788(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_19E35F790(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x19E35F798);
  return result;
}

uint64_t sub_19E35F7A4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x19E35F7ACLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_19E35F7B0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_19E35F7B8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Wallpaper.WallpaperError()
{
  return &type metadata for Wallpaper.WallpaperError;
}

unint64_t sub_19E35F7D8()
{
  unint64_t result;

  result = qword_1EE5034A8;
  if (!qword_1EE5034A8)
  {
    result = MEMORY[0x1A1AE8A18](&unk_19E382FB8, &type metadata for Wallpaper.WallpaperError);
    atomic_store(result, (unint64_t *)&qword_1EE5034A8);
  }
  return result;
}

void __swiftcall IMChipReply.init(dictionary:)(IMChipReply_optional *__return_ptr retstr, Swift::OpaquePointer dictionary)
{
  id v2;
  void *v3;

  v2 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  v3 = (void *)sub_19E36F81C();
  swift_bridgeObjectRelease();
  objc_msgSend(v2, sel_initWithDictionary_, v3);

}

id IMChipReply.init(dictionary:)(uint64_t a1)
{
  void *v1;
  void *v2;
  unint64_t v4;
  char v5;
  id v6;
  void *v7;
  id v8;
  id v9;
  __int128 v11;
  __int128 v12;

  v2 = v1;
  if (!*(_QWORD *)(a1 + 16) || (v4 = sub_19E3247E4(0x6974736567677573, 0xEA00000000006E6FLL), (v5 & 1) == 0))
  {
    v11 = 0u;
    v12 = 0u;
    swift_bridgeObjectRelease();
    goto LABEL_8;
  }
  sub_19E324848(*(_QWORD *)(a1 + 56) + 32 * v4, (uint64_t)&v11);
  swift_bridgeObjectRelease();
  if (!*((_QWORD *)&v12 + 1))
  {
LABEL_8:
    sub_19E322284((uint64_t)&v11);
LABEL_9:
    swift_getObjectType();
    swift_deallocPartialClassInstance();
    return 0;
  }
  sub_19E247E74(&qword_1EE503490);
  if ((swift_dynamicCast() & 1) == 0)
    goto LABEL_9;
  v6 = objc_allocWithZone((Class)IMChipSuggestion);
  v7 = (void *)sub_19E36F81C();
  swift_bridgeObjectRelease();
  v8 = objc_msgSend(v6, sel_initWithDictionary_, v7);

  if (!v8)
    goto LABEL_9;
  v9 = objc_msgSend(v2, sel_initWithSuggestion_, v8);

  return v9;
}

id sub_19E35FBEC()
{
  void *v0;
  uint64_t inited;
  __CFString *v2;
  id v3;
  uint64_t v4;
  unint64_t v5;
  id v6;
  void *v7;
  void *v8;
  id v9;

  sub_19E247E74((uint64_t *)&unk_1EE501B30);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_19E381BA0;
  *(_QWORD *)(inited + 32) = CFSTR("__kIMSuggestedReplyAttributeName");
  v2 = CFSTR("__kIMSuggestedReplyAttributeName");
  v3 = objc_msgSend(v0, sel_dictionaryRepresentation);
  v4 = sub_19E36F828();

  *(_QWORD *)(inited + 40) = v4;
  v5 = sub_19E32DACC(inited);
  sub_19E36F888();
  sub_19E365710(v5);
  swift_bridgeObjectRelease();
  v6 = objc_allocWithZone(MEMORY[0x1E0CB3498]);
  v7 = (void *)sub_19E36F864();
  swift_bridgeObjectRelease();
  type metadata accessor for Key(0);
  sub_19E329BA8();
  v8 = (void *)sub_19E36F81C();
  swift_bridgeObjectRelease();
  v9 = objc_msgSend(v6, sel_initWithString_attributes_, v7, v8);

  return v9;
}

void __swiftcall IMChipReply.init()(IMChipReply *__return_ptr retstr)
{
  objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_init);
}

void IMChipReply.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

unint64_t type metadata accessor for IMChipReply()
{
  unint64_t result;

  result = qword_1EE5034B8;
  if (!qword_1EE5034B8)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1EE5034B8);
  }
  return result;
}

uint64_t sub_19E35FE5C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t result;
  int64_t v7;
  __int128 *v8;
  unint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  int64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  int64_t v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  _OWORD v34[3];
  uint64_t v35;
  _OWORD v36[2];
  __int128 v37;
  _OWORD v38[2];
  __int128 v39;
  _OWORD v40[2];
  uint64_t v41;
  uint64_t *v42;

  v2 = MEMORY[0x1E0DEE9E0];
  v41 = MEMORY[0x1E0DEE9E0];
  v31 = a1 + 64;
  v3 = -1 << *(_BYTE *)(a1 + 32);
  if (-v3 < 64)
    v4 = ~(-1 << -(char)v3);
  else
    v4 = -1;
  v5 = v4 & *(_QWORD *)(a1 + 64);
  v30 = (unint64_t)(63 - v3) >> 6;
  v42 = &v35;
  result = swift_bridgeObjectRetain();
  v7 = 0;
  while (1)
  {
    if (v5)
    {
      v9 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      v10 = v9 | (v7 << 6);
      goto LABEL_25;
    }
    v11 = v7 + 1;
    if (__OFADD__(v7, 1))
    {
LABEL_41:
      __break(1u);
      goto LABEL_42;
    }
    if (v11 >= v30)
      goto LABEL_40;
    v12 = *(_QWORD *)(v31 + 8 * v11);
    v13 = v7 + 1;
    if (!v12)
    {
      v13 = v7 + 2;
      if (v7 + 2 >= v30)
        goto LABEL_40;
      v12 = *(_QWORD *)(v31 + 8 * v13);
      if (!v12)
      {
        v13 = v7 + 3;
        if (v7 + 3 >= v30)
          goto LABEL_40;
        v12 = *(_QWORD *)(v31 + 8 * v13);
        if (!v12)
        {
          v13 = v7 + 4;
          if (v7 + 4 >= v30)
            goto LABEL_40;
          v12 = *(_QWORD *)(v31 + 8 * v13);
          if (!v12)
            break;
        }
      }
    }
LABEL_24:
    v5 = (v12 - 1) & v12;
    v10 = __clz(__rbit64(v12)) + (v13 << 6);
    v7 = v13;
LABEL_25:
    v15 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v10);
    v17 = *v15;
    v16 = v15[1];
    sub_19E323318(*(_QWORD *)(a1 + 56) + 32 * v10, (uint64_t)v40);
    *(_QWORD *)&v39 = v17;
    *((_QWORD *)&v39 + 1) = v16;
    v37 = v39;
    v38[0] = v40[0];
    v38[1] = v40[1];
    sub_19E323318((uint64_t)v38, (uint64_t)&v32);
    if (v33)
    {
      sub_19E24B594(&v32, v36);
      v18 = v37;
      v34[2] = v37;
      sub_19E32223C((uint64_t)v38, (uint64_t)v42);
      sub_19E24B594(v36, v34);
      v19 = *(_QWORD *)(v2 + 16);
      if (*(_QWORD *)(v2 + 24) <= v19)
      {
        v20 = v19 + 1;
        swift_bridgeObjectRetain();
        sub_19E36072C(v20, 1);
        v2 = v41;
      }
      else
      {
        swift_bridgeObjectRetain();
      }
      sub_19E36FE88();
      sub_19E36F8B8();
      result = sub_19E36FEA0();
      v21 = v2 + 64;
      v22 = -1 << *(_BYTE *)(v2 + 32);
      v23 = result & ~v22;
      v24 = v23 >> 6;
      if (((-1 << v23) & ~*(_QWORD *)(v2 + 64 + 8 * (v23 >> 6))) != 0)
      {
        v25 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)(v2 + 64 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v26 = 0;
        v27 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v27 && (v26 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v28 = v24 == v27;
          if (v24 == v27)
            v24 = 0;
          v26 |= v28;
          v29 = *(_QWORD *)(v21 + 8 * v24);
        }
        while (v29 == -1);
        v25 = __clz(__rbit64(~v29)) + (v24 << 6);
      }
      *(_QWORD *)(v21 + ((v25 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v25;
      *(_OWORD *)(*(_QWORD *)(v2 + 48) + 16 * v25) = v18;
      sub_19E24B594(v34, (_OWORD *)(*(_QWORD *)(v2 + 56) + 32 * v25));
      ++*(_QWORD *)(v2 + 16);
      v8 = (__int128 *)v42;
    }
    else
    {
      swift_bridgeObjectRetain();
      sub_19E326FA8((uint64_t)&v37, (uint64_t *)&unk_1EE5034F0);
      v8 = &v32;
    }
    result = sub_19E326FA8((uint64_t)v8, qword_1ECFC68D0);
  }
  v14 = v7 + 5;
  if (v7 + 5 >= v30)
  {
LABEL_40:
    sub_19E33A53C();
    return v2;
  }
  v12 = *(_QWORD *)(v31 + 8 * v14);
  if (v12)
  {
    v13 = v7 + 5;
    goto LABEL_24;
  }
  while (1)
  {
    v13 = v14 + 1;
    if (__OFADD__(v14, 1))
      break;
    if (v13 >= v30)
      goto LABEL_40;
    v12 = *(_QWORD *)(v31 + 8 * v13);
    ++v14;
    if (v12)
      goto LABEL_24;
  }
LABEL_42:
  __break(1u);
  return result;
}

void __swiftcall IMActionDialPhone.init(dictionary:)(IMActionDialPhone_optional *__return_ptr retstr, Swift::OpaquePointer dictionary)
{
  id v2;
  void *v3;

  v2 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  v3 = (void *)sub_19E36F81C();
  swift_bridgeObjectRelease();
  objc_msgSend(v2, sel_initWithDictionary_, v3);

}

id IMActionDialPhone.init(dictionary:)(uint64_t a1)
{
  void *v1;
  void *v2;
  unint64_t v4;
  char v5;
  void *v6;
  unint64_t v7;
  char v8;
  id v9;
  void *v11;
  __int128 v12;
  __int128 v13;

  v2 = v1;
  if (*(_QWORD *)(a1 + 16))
  {
    v4 = sub_19E3247E4(0x6D754E656E6F6870, 0xEB00000000726562);
    if ((v5 & 1) != 0)
    {
      sub_19E324848(*(_QWORD *)(a1 + 56) + 32 * v4, (uint64_t)&v12);
      if ((swift_dynamicCast() & 1) != 0)
      {
        v6 = (void *)sub_19E36F864();
        swift_bridgeObjectRelease();
        if (*(_QWORD *)(a1 + 16) && (v7 = sub_19E3247E4(0x6B6361626C6C6166, 0xEB000000006C7255), (v8 & 1) != 0))
        {
          sub_19E324848(*(_QWORD *)(a1 + 56) + 32 * v7, (uint64_t)&v12);
        }
        else
        {
          v12 = 0u;
          v13 = 0u;
        }
        swift_bridgeObjectRelease();
        if (*((_QWORD *)&v13 + 1))
        {
          if ((swift_dynamicCast() & 1) != 0)
          {
            v11 = (void *)sub_19E36F864();
            swift_bridgeObjectRelease();
LABEL_15:
            v9 = objc_msgSend(v2, sel_initWithPhoneNumber_fallbackUrl_, v6, v11);

            return v9;
          }
        }
        else
        {
          sub_19E326FA8((uint64_t)&v12, qword_1ECFC68D0);
        }
        v11 = 0;
        goto LABEL_15;
      }
    }
  }
  swift_bridgeObjectRelease();
  swift_getObjectType();
  swift_deallocPartialClassInstance();
  return 0;
}

void __swiftcall IMActionDialPhone.init()(IMActionDialPhone *__return_ptr retstr)
{
  objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_init);
}

void IMActionDialPhone.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

unint64_t type metadata accessor for IMActionDialPhone()
{
  unint64_t result;

  result = qword_1EE5034E0;
  if (!qword_1EE5034E0)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1EE5034E0);
  }
  return result;
}

uint64_t sub_19E360720(uint64_t a1, char a2)
{
  return sub_19E360D58(a1, a2, &qword_1EE502B48);
}

uint64_t sub_19E36072C(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  _OWORD *v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  int64_t v33;
  _QWORD *v34;
  _OWORD v35[2];

  v3 = v2;
  v5 = *v2;
  sub_19E247E74((uint64_t *)&unk_1EE503400);
  v6 = sub_19E36FD14();
  v7 = v6;
  if (*(_QWORD *)(v5 + 16))
  {
    v8 = 1 << *(_BYTE *)(v5 + 32);
    v34 = (_QWORD *)(v5 + 64);
    if (v8 < 64)
      v9 = ~(-1 << v8);
    else
      v9 = -1;
    v10 = v9 & *(_QWORD *)(v5 + 64);
    v33 = (unint64_t)(v8 + 63) >> 6;
    v11 = v6 + 64;
    result = swift_retain();
    v13 = 0;
    while (1)
    {
      if (v10)
      {
        v16 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        v17 = v16 | (v13 << 6);
      }
      else
      {
        v18 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        if (v18 >= v33)
          goto LABEL_34;
        v19 = v34[v18];
        ++v13;
        if (!v19)
        {
          v13 = v18 + 1;
          if (v18 + 1 >= v33)
            goto LABEL_34;
          v19 = v34[v13];
          if (!v19)
          {
            v20 = v18 + 2;
            if (v20 >= v33)
            {
LABEL_34:
              swift_release();
              v3 = v2;
              if ((a2 & 1) != 0)
              {
                v32 = 1 << *(_BYTE *)(v5 + 32);
                if (v32 >= 64)
                  bzero(v34, ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v34 = -1 << v32;
                *(_QWORD *)(v5 + 16) = 0;
              }
              break;
            }
            v19 = v34[v20];
            if (!v19)
            {
              while (1)
              {
                v13 = v20 + 1;
                if (__OFADD__(v20, 1))
                  goto LABEL_41;
                if (v13 >= v33)
                  goto LABEL_34;
                v19 = v34[v13];
                ++v20;
                if (v19)
                  goto LABEL_21;
              }
            }
            v13 = v20;
          }
        }
LABEL_21:
        v10 = (v19 - 1) & v19;
        v17 = __clz(__rbit64(v19)) + (v13 << 6);
      }
      v21 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v17);
      v23 = *v21;
      v22 = v21[1];
      v24 = (_OWORD *)(*(_QWORD *)(v5 + 56) + 32 * v17);
      if ((a2 & 1) != 0)
      {
        sub_19E24B594(v24, v35);
      }
      else
      {
        sub_19E324848((uint64_t)v24, (uint64_t)v35);
        swift_bridgeObjectRetain();
      }
      sub_19E36FE88();
      sub_19E36F8B8();
      result = sub_19E36FEA0();
      v25 = -1 << *(_BYTE *)(v7 + 32);
      v26 = result & ~v25;
      v27 = v26 >> 6;
      if (((-1 << v26) & ~*(_QWORD *)(v11 + 8 * (v26 >> 6))) != 0)
      {
        v14 = __clz(__rbit64((-1 << v26) & ~*(_QWORD *)(v11 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v28 = 0;
        v29 = (unint64_t)(63 - v25) >> 6;
        do
        {
          if (++v27 == v29 && (v28 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          v30 = v27 == v29;
          if (v27 == v29)
            v27 = 0;
          v28 |= v30;
          v31 = *(_QWORD *)(v11 + 8 * v27);
        }
        while (v31 == -1);
        v14 = __clz(__rbit64(~v31)) + (v27 << 6);
      }
      *(_QWORD *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      v15 = (_QWORD *)(*(_QWORD *)(v7 + 48) + 16 * v14);
      *v15 = v23;
      v15[1] = v22;
      result = (uint64_t)sub_19E24B594(v35, (_OWORD *)(*(_QWORD *)(v7 + 56) + 32 * v14));
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
  *v3 = v7;
  return result;
}

uint64_t sub_19E360A28(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  _QWORD *v24;
  unint64_t v25;
  int64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  int64_t v40;
  uint64_t v41;
  char v42;

  v3 = v2;
  v5 = *v2;
  sub_19E247E74((uint64_t *)&unk_1EE503500);
  v42 = a2;
  v6 = sub_19E36FD14();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_40;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v41 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v39 = v2;
  v40 = (unint64_t)(v8 + 63) >> 6;
  v11 = v6 + 64;
  result = swift_retain();
  v13 = 0;
  while (1)
  {
    if (v10)
    {
      v21 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v22 = v21 | (v13 << 6);
      goto LABEL_31;
    }
    v23 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v23 >= v40)
      break;
    v24 = (_QWORD *)(v5 + 64);
    v25 = *(_QWORD *)(v41 + 8 * v23);
    ++v13;
    if (!v25)
    {
      v13 = v23 + 1;
      if (v23 + 1 >= v40)
        goto LABEL_33;
      v25 = *(_QWORD *)(v41 + 8 * v13);
      if (!v25)
      {
        v26 = v23 + 2;
        if (v26 >= v40)
        {
LABEL_33:
          swift_release();
          v3 = v39;
          if ((v42 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v25 = *(_QWORD *)(v41 + 8 * v26);
        if (!v25)
        {
          while (1)
          {
            v13 = v26 + 1;
            if (__OFADD__(v26, 1))
              goto LABEL_42;
            if (v13 >= v40)
              goto LABEL_33;
            v25 = *(_QWORD *)(v41 + 8 * v13);
            ++v26;
            if (v25)
              goto LABEL_30;
          }
        }
        v13 = v26;
      }
    }
LABEL_30:
    v10 = (v25 - 1) & v25;
    v22 = __clz(__rbit64(v25)) + (v13 << 6);
LABEL_31:
    v31 = 16 * v22;
    v32 = (uint64_t *)(*(_QWORD *)(v5 + 48) + v31);
    v34 = *v32;
    v33 = v32[1];
    v35 = (uint64_t *)(*(_QWORD *)(v5 + 56) + v31);
    v36 = *v35;
    v37 = v35[1];
    if ((v42 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    sub_19E36FE88();
    sub_19E36F8B8();
    result = sub_19E36FEA0();
    v14 = -1 << *(_BYTE *)(v7 + 32);
    v15 = result & ~v14;
    v16 = v15 >> 6;
    if (((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v27 = 0;
      v28 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v29 = v16 == v28;
        if (v16 == v28)
          v16 = 0;
        v27 |= v29;
        v30 = *(_QWORD *)(v11 + 8 * v16);
      }
      while (v30 == -1);
      v17 = __clz(__rbit64(~v30)) + (v16 << 6);
    }
    *(_QWORD *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    v18 = 16 * v17;
    v19 = (_QWORD *)(*(_QWORD *)(v7 + 48) + v18);
    *v19 = v34;
    v19[1] = v33;
    v20 = (_QWORD *)(*(_QWORD *)(v7 + 56) + v18);
    *v20 = v36;
    v20[1] = v37;
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v3 = v39;
  v24 = (_QWORD *)(v5 + 64);
  if ((v42 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v38 = 1 << *(_BYTE *)(v5 + 32);
  if (v38 >= 64)
    bzero(v24, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v24 = -1 << v38;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v3 = v7;
  return result;
}

uint64_t sub_19E360D4C(uint64_t a1, char a2)
{
  return sub_19E360D58(a1, a2, &qword_1EE500638);
}

uint64_t sub_19E360D58(uint64_t a1, char a2, uint64_t *a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  id v34;
  uint64_t v35;
  uint64_t *v36;
  int64_t v37;
  uint64_t v38;
  char v39;

  v4 = v3;
  v6 = *v3;
  sub_19E247E74(a3);
  v39 = a2;
  v7 = sub_19E36FD14();
  v8 = v7;
  if (!*(_QWORD *)(v6 + 16))
    goto LABEL_40;
  v9 = 1 << *(_BYTE *)(v6 + 32);
  v38 = v6 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v6 + 64);
  v36 = v3;
  v37 = (unint64_t)(v9 + 63) >> 6;
  v12 = v7 + 64;
  result = swift_retain();
  v14 = 0;
  while (1)
  {
    if (v11)
    {
      v20 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v21 = v20 | (v14 << 6);
      goto LABEL_31;
    }
    v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v22 >= v37)
      break;
    v23 = (_QWORD *)(v6 + 64);
    v24 = *(_QWORD *)(v38 + 8 * v22);
    ++v14;
    if (!v24)
    {
      v14 = v22 + 1;
      if (v22 + 1 >= v37)
        goto LABEL_33;
      v24 = *(_QWORD *)(v38 + 8 * v14);
      if (!v24)
      {
        v25 = v22 + 2;
        if (v25 >= v37)
        {
LABEL_33:
          swift_release();
          v4 = v36;
          if ((v39 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v24 = *(_QWORD *)(v38 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            v14 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_42;
            if (v14 >= v37)
              goto LABEL_33;
            v24 = *(_QWORD *)(v38 + 8 * v14);
            ++v25;
            if (v24)
              goto LABEL_30;
          }
        }
        v14 = v25;
      }
    }
LABEL_30:
    v11 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_31:
    v30 = (uint64_t *)(*(_QWORD *)(v6 + 48) + 16 * v21);
    v32 = *v30;
    v31 = v30[1];
    v33 = *(void **)(*(_QWORD *)(v6 + 56) + 8 * v21);
    if ((v39 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      v34 = v33;
    }
    sub_19E36FE88();
    sub_19E36F8B8();
    result = sub_19E36FEA0();
    v15 = -1 << *(_BYTE *)(v8 + 32);
    v16 = result & ~v15;
    v17 = v16 >> 6;
    if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v28 = v17 == v27;
        if (v17 == v27)
          v17 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    v19 = (_QWORD *)(*(_QWORD *)(v8 + 48) + 16 * v18);
    *v19 = v32;
    v19[1] = v31;
    *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v18) = v33;
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release();
  v4 = v36;
  v23 = (_QWORD *)(v6 + 64);
  if ((v39 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v35 = 1 << *(_BYTE *)(v6 + 32);
  if (v35 >= 64)
    bzero(v23, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v35;
  *(_QWORD *)(v6 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v4 = v8;
  return result;
}

uint64_t sub_19E361060(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  int64_t v37;
  uint64_t v38;
  char v39;
  __int128 v40;
  __int128 v41;

  v3 = v2;
  v5 = *v2;
  sub_19E247E74(&qword_1EE500590);
  v39 = a2;
  v6 = sub_19E36FD14();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_40;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v38 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v36 = v2;
  v37 = (unint64_t)(v8 + 63) >> 6;
  v11 = v6 + 64;
  result = swift_retain();
  v13 = 0;
  while (1)
  {
    if (v10)
    {
      v20 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v21 = v20 | (v13 << 6);
      goto LABEL_31;
    }
    v22 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v22 >= v37)
      break;
    v23 = (_QWORD *)(v5 + 64);
    v24 = *(_QWORD *)(v38 + 8 * v22);
    ++v13;
    if (!v24)
    {
      v13 = v22 + 1;
      if (v22 + 1 >= v37)
        goto LABEL_33;
      v24 = *(_QWORD *)(v38 + 8 * v13);
      if (!v24)
      {
        v25 = v22 + 2;
        if (v25 >= v37)
        {
LABEL_33:
          swift_release();
          v3 = v36;
          if ((v39 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v24 = *(_QWORD *)(v38 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            v13 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_42;
            if (v13 >= v37)
              goto LABEL_33;
            v24 = *(_QWORD *)(v38 + 8 * v13);
            ++v25;
            if (v24)
              goto LABEL_30;
          }
        }
        v13 = v25;
      }
    }
LABEL_30:
    v10 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v13 << 6);
LABEL_31:
    v30 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v21);
    v32 = *v30;
    v31 = v30[1];
    v33 = *(_QWORD *)(v5 + 56) + 40 * v21;
    v34 = *(_QWORD *)v33;
    v40 = *(_OWORD *)(v33 + 24);
    v41 = *(_OWORD *)(v33 + 8);
    if ((v39 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_retain();
    }
    sub_19E36FE88();
    sub_19E36F8B8();
    result = sub_19E36FEA0();
    v14 = -1 << *(_BYTE *)(v7 + 32);
    v15 = result & ~v14;
    v16 = v15 >> 6;
    if (((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v28 = v16 == v27;
        if (v16 == v27)
          v16 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v11 + 8 * v16);
      }
      while (v29 == -1);
      v17 = __clz(__rbit64(~v29)) + (v16 << 6);
    }
    *(_QWORD *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    v18 = (_QWORD *)(*(_QWORD *)(v7 + 48) + 16 * v17);
    *v18 = v32;
    v18[1] = v31;
    v19 = *(_QWORD *)(v7 + 56) + 40 * v17;
    *(_QWORD *)v19 = v34;
    *(_OWORD *)(v19 + 8) = v41;
    *(_OWORD *)(v19 + 24) = v40;
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v3 = v36;
  v23 = (_QWORD *)(v5 + 64);
  if ((v39 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v35 = 1 << *(_BYTE *)(v5 + 32);
  if (v35 >= 64)
    bzero(v23, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v35;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v3 = v7;
  return result;
}

uint64_t sub_19E3613B8(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  _QWORD *v22;
  unint64_t v23;
  int64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int64_t v34;
  uint64_t v35;
  char v36;

  v3 = v2;
  v5 = *v2;
  sub_19E247E74(&qword_1EE500630);
  v36 = a2;
  v6 = sub_19E36FD14();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_40;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v35 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v34 = (unint64_t)(v8 + 63) >> 6;
  v11 = v6 + 64;
  result = swift_retain();
  v13 = 0;
  while (1)
  {
    if (v10)
    {
      v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v34)
      break;
    v22 = (_QWORD *)(v5 + 64);
    v23 = *(_QWORD *)(v35 + 8 * v21);
    ++v13;
    if (!v23)
    {
      v13 = v21 + 1;
      if (v21 + 1 >= v34)
        goto LABEL_33;
      v23 = *(_QWORD *)(v35 + 8 * v13);
      if (!v23)
      {
        v24 = v21 + 2;
        if (v24 >= v34)
        {
LABEL_33:
          swift_release();
          if ((v36 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v23 = *(_QWORD *)(v35 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            v13 = v24 + 1;
            if (__OFADD__(v24, 1))
              goto LABEL_42;
            if (v13 >= v34)
              goto LABEL_33;
            v23 = *(_QWORD *)(v35 + 8 * v13);
            ++v24;
            if (v23)
              goto LABEL_30;
          }
        }
        v13 = v24;
      }
    }
LABEL_30:
    v10 = (v23 - 1) & v23;
    v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    v29 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v20);
    v31 = *v29;
    v30 = v29[1];
    v32 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v20);
    if ((v36 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    sub_19E36FE88();
    sub_19E36F8B8();
    result = sub_19E36FEA0();
    v14 = -1 << *(_BYTE *)(v7 + 32);
    v15 = result & ~v14;
    v16 = v15 >> 6;
    if (((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v25 = 0;
      v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v27 = v16 == v26;
        if (v16 == v26)
          v16 = 0;
        v25 |= v27;
        v28 = *(_QWORD *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(_QWORD *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    v18 = (_QWORD *)(*(_QWORD *)(v7 + 48) + 16 * v17);
    *v18 = v31;
    v18[1] = v30;
    *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v17) = v32;
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v22 = (_QWORD *)(v5 + 64);
  if ((v36 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v33 = 1 << *(_BYTE *)(v5 + 32);
  if (v33 >= 64)
    bzero(v22, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v22 = -1 << v33;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v3 = v7;
  return result;
}

uint64_t dispatch thunk of TranscodingSettingsProviding.transcodePreviews.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of TranscodingSettingsProviding.transcodePreviews.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

uint64_t dispatch thunk of TranscodingSettingsProviding.transcodePreviews.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t dispatch thunk of TranscodingSettingsProviding.disableLowQualityModeOnWiFi.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of TranscodingSettingsProviding.disableLowQualityModeOnWiFi.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 40))();
}

uint64_t dispatch thunk of TranscodingSettingsProviding.disableLowQualityModeOnWiFi.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 48))();
}

uint64_t dispatch thunk of TranscodingSettingsProviding.transcodePreviewsInitialized.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 56))();
}

uint64_t dispatch thunk of TranscodingSettingsProviding.transcodePreviewsInitialized.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 64))();
}

uint64_t dispatch thunk of TranscodingSettingsProviding.transcodePreviewsInitialized.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 72))();
}

uint64_t dispatch thunk of TranscodingSettingsProviding.disableLowQualityModeOnWiFiInitialized.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 80))();
}

uint64_t dispatch thunk of TranscodingSettingsProviding.disableLowQualityModeOnWiFiInitialized.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 88))();
}

uint64_t dispatch thunk of TranscodingSettingsProviding.disableLowQualityModeOnWiFiInitialized.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 96))();
}

uint64_t sub_19E36172C()
{
  sub_19E364B88((unint64_t *)&unk_1EE503680, (uint64_t)&unk_19E3819F0);
  return sub_19E36F93C();
}

uint64_t sub_19E361798()
{
  sub_19E364B88((unint64_t *)&unk_1EE503680, (uint64_t)&unk_19E3819F0);
  return sub_19E36F90C();
}

uint64_t AgentRequest.data.getter()
{
  uint64_t v0;

  sub_19E36F4B0();
  swift_allocObject();
  sub_19E36F4A4();
  sub_19E3618C4();
  v0 = sub_19E36F498();
  swift_release();
  return v0;
}

unint64_t sub_19E3618C4()
{
  unint64_t result;

  result = qword_1EE503518;
  if (!qword_1EE503518)
  {
    result = MEMORY[0x1A1AE8A18](&protocol conformance descriptor for AgentRequest, &type metadata for AgentRequest);
    atomic_store(result, (unint64_t *)&qword_1EE503518);
  }
  return result;
}

double AgentRequest.init(data:)@<D0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v3;
  double result;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;

  sub_19E36F48C();
  swift_allocObject();
  sub_19E36F480();
  sub_19E3619CC();
  sub_19E36F474();
  sub_19E33A6E0(a1, a2);
  swift_release();
  if (!v3)
  {
    result = *(double *)&v8;
    *a3 = v8;
    a3[1] = v9;
    a3[2] = v10;
    a3[3] = v11;
    a3[4] = v12;
    a3[5] = v13;
  }
  return result;
}

unint64_t sub_19E3619CC()
{
  unint64_t result;

  result = qword_1EE503520;
  if (!qword_1EE503520)
  {
    result = MEMORY[0x1A1AE8A18](&protocol conformance descriptor for AgentRequest, &type metadata for AgentRequest);
    atomic_store(result, (unint64_t *)&qword_1EE503520);
  }
  return result;
}

unint64_t sub_19E361A10()
{
  _BYTE *v0;

  if (*v0)
    return 0xD000000000000012;
  else
    return 0xD00000000000001FLL;
}

uint64_t sub_19E361A54@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_19E36370C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_19E361A78()
{
  return 0;
}

void sub_19E361A84(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

uint64_t sub_19E361A90()
{
  sub_19E3622AC();
  return sub_19E36FEC4();
}

uint64_t sub_19E361AB8()
{
  sub_19E3622AC();
  return sub_19E36FED0();
}

uint64_t sub_19E361AE0(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_19E361B0C + 4 * byte_19E383040[a1]))(1684632935, 0xE400000000000000);
}

uint64_t sub_19E361B0C()
{
  return 0x6E65644974616863;
}

uint64_t sub_19E361B30()
{
  return 0x656C797473;
}

uint64_t sub_19E361B44()
{
  return 0x7365636976726573;
}

uint64_t sub_19E361B5C()
{
  return 0x74696D696CLL;
}

uint64_t sub_19E361B70()
{
  return 0x554765726F666562;
}

uint64_t sub_19E361B8C()
{
  return 0x4955477265746661;
}

unint64_t sub_19E361BA8()
{
  return 0xD000000000000010;
}

uint64_t sub_19E361BC4()
{
  return 1;
}

uint64_t sub_19E361BCC()
{
  sub_19E36FE88();
  sub_19E36FE94();
  return sub_19E36FEA0();
}

uint64_t sub_19E361C0C()
{
  return sub_19E36FE94();
}

uint64_t sub_19E361C30()
{
  sub_19E36FE88();
  sub_19E36FE94();
  return sub_19E36FEA0();
}

uint64_t sub_19E361C6C()
{
  return 0x4449656C646E6168;
}

uint64_t sub_19E361C88@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v5;
  uint64_t result;
  char v7;

  if (a1 == 0x4449656C646E6168 && a2 == 0xE900000000000073)
  {
    result = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else
  {
    v5 = sub_19E36FE10();
    result = swift_bridgeObjectRelease();
    v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

void sub_19E361D28(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

uint64_t sub_19E361D34()
{
  sub_19E362334();
  return sub_19E36FEC4();
}

uint64_t sub_19E361D5C()
{
  sub_19E362334();
  return sub_19E36FED0();
}

uint64_t sub_19E361D84()
{
  unsigned __int8 *v0;

  return sub_19E361AE0(*v0);
}

uint64_t sub_19E361D8C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_19E3637F8(a1, a2);
  *a3 = result;
  return result;
}

void sub_19E361DB0(_BYTE *a1@<X8>)
{
  *a1 = 8;
}

uint64_t sub_19E361DBC()
{
  sub_19E3622F0();
  return sub_19E36FEC4();
}

uint64_t sub_19E361DE4()
{
  sub_19E3622F0();
  return sub_19E36FED0();
}

uint64_t AgentRequest.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  _QWORD v30[7];
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44;

  v3 = sub_19E247E74(&qword_1EE503528);
  v34 = *(_QWORD *)(v3 - 8);
  v35 = v3;
  MEMORY[0x1E0C80A78](v3);
  v38 = (char *)v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_19E247E74(&qword_1EE503530);
  v36 = *(_QWORD *)(v5 - 8);
  v37 = v5;
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v41 = sub_19E247E74(&qword_1EE503538);
  v39 = *(_QWORD *)(v41 - 8);
  MEMORY[0x1E0C80A78](v41);
  v40 = *v1;
  v9 = v1[1];
  v10 = v1[3];
  v32 = v1[2];
  v33 = v9;
  v11 = v1[4];
  v30[6] = v1[5];
  v31 = v11;
  v12 = v1[6];
  v30[4] = v1[7];
  v30[5] = v12;
  v13 = v1[9];
  v30[3] = v1[8];
  v14 = v1[10];
  v15 = v1[11];
  v16 = a1[3];
  v17 = a1;
  v18 = (char *)v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_19E323360(v17, v16);
  sub_19E3622AC();
  sub_19E36FEB8();
  if (v10 < 0)
  {
    v22 = v32;
    v36 = v13;
    v37 = v10;
    v30[1] = v15;
    v30[2] = v14;
    v23 = v34;
    LOBYTE(v44) = 1;
    sub_19E3622F0();
    v24 = v41;
    sub_19E36FDA4();
    LOBYTE(v44) = 0;
    v25 = v35;
    v26 = v42;
    sub_19E36FDBC();
    if (v26)
    {
      (*(void (**)(char *, uint64_t))(v23 + 8))(v38, v25);
      return (*(uint64_t (**)(char *, uint64_t))(v39 + 8))(v18, v24);
    }
    else
    {
      v44 = v22;
      v43 = 1;
      sub_19E247E74(&qword_1ECFC6610);
      sub_19E362A1C(&qword_1EE503558, MEMORY[0x1E0DEA970], MEMORY[0x1E0DEAF10]);
      sub_19E36FDD4();
      LOBYTE(v44) = v37;
      v43 = 2;
      type metadata accessor for IMChatStyle(0);
      sub_19E364B88(&qword_1EE503560, (uint64_t)&protocol conformance descriptor for IMChatStyle);
      sub_19E36FDD4();
      v44 = v31;
      v43 = 3;
      v27 = v35;
      sub_19E36FDD4();
      LOBYTE(v44) = 4;
      sub_19E36FDC8();
      v28 = v39;
      LOBYTE(v44) = 5;
      sub_19E36FDB0();
      LOBYTE(v44) = 6;
      sub_19E36FDB0();
      LOBYTE(v44) = 7;
      v29 = v38;
      sub_19E36FDB0();
      (*(void (**)(char *, uint64_t))(v23 + 8))(v29, v27);
      return (*(uint64_t (**)(char *, uint64_t))(v28 + 8))(v18, v24);
    }
  }
  else
  {
    LOBYTE(v44) = 0;
    sub_19E362334();
    v19 = v41;
    sub_19E36FDA4();
    v44 = v40;
    sub_19E247E74(&qword_1ECFC6610);
    sub_19E362A1C(&qword_1EE503558, MEMORY[0x1E0DEA970], MEMORY[0x1E0DEAF10]);
    v20 = v37;
    sub_19E36FDD4();
    (*(void (**)(char *, uint64_t))(v36 + 8))(v7, v20);
    return (*(uint64_t (**)(char *, uint64_t))(v39 + 8))(v18, v19);
  }
}

unint64_t sub_19E3622AC()
{
  unint64_t result;

  result = qword_1EE503540;
  if (!qword_1EE503540)
  {
    result = MEMORY[0x1A1AE8A18](&unk_19E3834F8, &type metadata for AgentRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE503540);
  }
  return result;
}

unint64_t sub_19E3622F0()
{
  unint64_t result;

  result = qword_1EE503548;
  if (!qword_1EE503548)
  {
    result = MEMORY[0x1A1AE8A18](&unk_19E3834A8, &type metadata for AgentRequest.LoadHistoryForChatCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE503548);
  }
  return result;
}

unint64_t sub_19E362334()
{
  unint64_t result;

  result = qword_1EE503568;
  if (!qword_1EE503568)
  {
    result = MEMORY[0x1A1AE8A18](&unk_19E383458, &type metadata for AgentRequest.LoadAnyChatsContainingHandleIDsCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE503568);
  }
  return result;
}

uint64_t AgentRequest.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  char *v58;
  _QWORD *v59;
  uint64_t v60;
  char v61;
  uint64_t v62;
  unsigned __int8 v63;
  uint64_t v64;

  v57 = a2;
  v3 = sub_19E247E74(&qword_1EE503570);
  v4 = *(_QWORD *)(v3 - 8);
  v55 = v3;
  v56 = v4;
  MEMORY[0x1E0C80A78](v3);
  v58 = (char *)&v44 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_19E247E74(&qword_1EE503578);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v44 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_19E247E74(&qword_1EE503580);
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10);
  v13 = (char *)&v44 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = a1[3];
  v59 = a1;
  sub_19E323360(a1, v14);
  sub_19E3622AC();
  v15 = v60;
  sub_19E36FEAC();
  if (v15)
    goto LABEL_7;
  v60 = v7;
  v54 = v11;
  v16 = sub_19E36FD98();
  v17 = v10;
  if (*(_QWORD *)(v16 + 16) != 1)
  {
    v18 = sub_19E36FCC0();
    swift_allocError();
    v20 = v19;
    sub_19E247E74(&qword_1EE503588);
    *v20 = &type metadata for AgentRequest;
    sub_19E36FD5C();
    sub_19E36FCB4();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v18 - 8) + 104))(v20, *MEMORY[0x1E0DEC450], v18);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v54 + 8))(v13, v10);
LABEL_7:
    v36 = (uint64_t)v59;
    return sub_19E323384(v36);
  }
  if ((*(_BYTE *)(v16 + 32) & 1) != 0)
  {
    LOBYTE(v64) = 1;
    sub_19E3622F0();
    sub_19E36FD50();
    LOBYTE(v64) = 0;
    v53 = sub_19E36FD74();
    v60 = v21;
    sub_19E247E74(&qword_1ECFC6610);
    LOBYTE(v62) = 1;
    sub_19E362A1C(&qword_1EE503590, MEMORY[0x1E0DEA9A0], MEMORY[0x1E0DEAF40]);
    sub_19E36FD8C();
    v52 = v64;
    type metadata accessor for IMChatStyle(0);
    LOBYTE(v62) = 2;
    sub_19E364B88(&qword_1EE503598, (uint64_t)&protocol conformance descriptor for IMChatStyle);
    sub_19E36FD8C();
    v22 = v63;
    v61 = 3;
    sub_19E36FD8C();
    v51 = v22;
    v24 = v62;
    v61 = 4;
    v49 = sub_19E36FD80();
    v50 = v24;
    v61 = 5;
    v25 = sub_19E36FD68();
    v48 = v26;
    v61 = 6;
    v27 = sub_19E36FD68();
    v47 = v28;
    v29 = v27;
    v61 = 7;
    v30 = sub_19E36FD68();
    v45 = v31;
    v46 = v30;
    (*(void (**)(char *, uint64_t))(v56 + 8))(v58, v55);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v54 + 8))(v13, v17);
    v32 = v52;
    v33 = v51 | 0x8000000000000000;
    v34 = v45;
    v35 = v46;
    v36 = (uint64_t)v59;
    v37 = v60;
    v38 = v57;
    v39 = v53;
    v41 = v49;
    v40 = v50;
    v43 = v47;
    v42 = v48;
  }
  else
  {
    LOBYTE(v64) = 0;
    sub_19E362334();
    sub_19E36FD50();
    v38 = v57;
    sub_19E247E74(&qword_1ECFC6610);
    sub_19E362A1C(&qword_1EE503590, MEMORY[0x1E0DEA9A0], MEMORY[0x1E0DEAF40]);
    sub_19E36FD8C();
    (*(void (**)(char *, uint64_t))(v60 + 8))(v9, v6);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v54 + 8))(v13, v10);
    v37 = 0;
    v32 = 0;
    v33 = 0;
    v40 = 0;
    v41 = 0;
    v25 = 0;
    v42 = 0;
    v29 = 0;
    v43 = 0;
    v35 = 0;
    v34 = 0;
    v39 = v64;
    v36 = (uint64_t)v59;
  }
  *v38 = v39;
  v38[1] = v37;
  v38[2] = v32;
  v38[3] = v33;
  v38[4] = v40;
  v38[5] = v41;
  v38[6] = v25;
  v38[7] = v42;
  v38[8] = v29;
  v38[9] = v43;
  v38[10] = v35;
  v38[11] = v34;
  return sub_19E323384(v36);
}

uint64_t sub_19E362A1C(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  result = *a1;
  if (!result)
  {
    v7 = sub_19E247E30(&qword_1ECFC6610);
    v8 = a2;
    result = MEMORY[0x1A1AE8A18](a3, v7, &v8);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_19E362A7C@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return AgentRequest.init(from:)(a1, a2);
}

uint64_t sub_19E362A90(_QWORD *a1)
{
  return AgentRequest.encode(to:)(a1);
}

uint64_t static AgentRequestChatLoadResult.supportsSecureCoding.getter()
{
  swift_beginAccess();
  return byte_1EE503510;
}

uint64_t static AgentRequestChatLoadResult.supportsSecureCoding.setter(char a1)
{
  uint64_t result;

  result = swift_beginAccess();
  byte_1EE503510 = a1;
  return result;
}

uint64_t (*static AgentRequestChatLoadResult.supportsSecureCoding.modify())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

void sub_19E362BEC(void *a1)
{
  void *v2;
  void *v3;

  swift_beginAccess();
  swift_bridgeObjectRetain();
  sub_19E247E74(&qword_1EE5035A8);
  v2 = (void *)sub_19E36F954();
  swift_bridgeObjectRelease();
  v3 = (void *)sub_19E36F864();
  objc_msgSend(a1, sel_encodeObject_forKey_, v2, v3);

}

id AgentRequestChatLoadResult.__allocating_init(coder:)(void *a1)
{
  objc_class *v1;
  id v3;
  id v4;

  v3 = objc_allocWithZone(v1);
  v4 = sub_19E363B58();

  return v4;
}

id AgentRequestChatLoadResult.init(coder:)(void *a1)
{
  id v2;

  v2 = sub_19E363B58();

  return v2;
}

id AgentRequestChatLoadResult.__allocating_init(chatDictionaries:)(uint64_t a1)
{
  objc_class *v1;
  char *v3;
  objc_super v5;

  v3 = (char *)objc_allocWithZone(v1);
  *(_QWORD *)&v3[OBJC_IVAR____TtC17IMSharedUtilities26AgentRequestChatLoadResult_chatDictionaries] = a1;
  v5.receiver = v3;
  v5.super_class = v1;
  return objc_msgSendSuper2(&v5, sel_init);
}

id AgentRequestChatLoadResult.init(chatDictionaries:)(uint64_t a1)
{
  char *v1;
  objc_super v3;

  *(_QWORD *)&v1[OBJC_IVAR____TtC17IMSharedUtilities26AgentRequestChatLoadResult_chatDictionaries] = a1;
  v3.receiver = v1;
  v3.super_class = (Class)type metadata accessor for AgentRequestChatLoadResult();
  return objc_msgSendSuper2(&v3, sel_init);
}

uint64_t sub_19E362EA4()
{
  return sub_19E363514();
}

uint64_t sub_19E362EB0(uint64_t a1)
{
  return sub_19E363564(a1, &OBJC_IVAR____TtC17IMSharedUtilities26AgentRequestChatLoadResult_chatDictionaries);
}

uint64_t (*sub_19E362EBC())()
{
  swift_beginAccess();
  return j__swift_endAccess;
}

id AgentRequestChatLoadResult.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void AgentRequestChatLoadResult.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id AgentRequestChatLoadResult.__deallocating_deinit()
{
  return sub_19E363658(type metadata accessor for AgentRequestChatLoadResult);
}

uint64_t sub_19E362F94()
{
  return static AgentRequestResult.from(data:)();
}

uint64_t static AgentRequestResult.from(data:)()
{
  sub_19E24B854(0, &qword_1EE5035B0);
  return sub_19E36FAB0();
}

uint64_t static AgentRequestMessageLoadResult.supportsSecureCoding.getter()
{
  swift_beginAccess();
  return byte_1EE503511;
}

uint64_t static AgentRequestMessageLoadResult.supportsSecureCoding.setter(char a1)
{
  uint64_t result;

  result = swift_beginAccess();
  byte_1EE503511 = a1;
  return result;
}

uint64_t (*static AgentRequestMessageLoadResult.supportsSecureCoding.modify())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

void sub_19E363158(void *a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  swift_beginAccess();
  swift_bridgeObjectRetain();
  sub_19E247E74(&qword_1EE5035A8);
  v2 = (void *)sub_19E36F954();
  swift_bridgeObjectRelease();
  v3 = (void *)sub_19E36F864();
  objc_msgSend(a1, sel_encodeObject_forKey_, v2, v3);

  swift_beginAccess();
  swift_bridgeObjectRetain();
  v4 = (void *)sub_19E36F954();
  swift_bridgeObjectRelease();
  v5 = (void *)sub_19E36F864();
  objc_msgSend(a1, sel_encodeObject_forKey_, v4, v5);

}

id AgentRequestMessageLoadResult.__allocating_init(coder:)(void *a1)
{
  objc_class *v1;
  id v3;
  id v4;

  v3 = objc_allocWithZone(v1);
  v4 = sub_19E363D2C();

  return v4;
}

id AgentRequestMessageLoadResult.init(coder:)(void *a1)
{
  id v2;

  v2 = sub_19E363D2C();

  return v2;
}

id AgentRequestMessageLoadResult.__allocating_init(serializedMessages:serializedFileTransfers:)(uint64_t a1, uint64_t a2)
{
  objc_class *v2;
  char *v5;
  objc_super v7;

  v5 = (char *)objc_allocWithZone(v2);
  *(_QWORD *)&v5[OBJC_IVAR____TtC17IMSharedUtilities29AgentRequestMessageLoadResult_serializedMessages] = a1;
  *(_QWORD *)&v5[OBJC_IVAR____TtC17IMSharedUtilities29AgentRequestMessageLoadResult_serializedFileTransfers] = a2;
  v7.receiver = v5;
  v7.super_class = v2;
  return objc_msgSendSuper2(&v7, sel_init);
}

id AgentRequestMessageLoadResult.init(serializedMessages:serializedFileTransfers:)(uint64_t a1, uint64_t a2)
{
  char *v2;
  objc_super v4;

  *(_QWORD *)&v2[OBJC_IVAR____TtC17IMSharedUtilities29AgentRequestMessageLoadResult_serializedMessages] = a1;
  *(_QWORD *)&v2[OBJC_IVAR____TtC17IMSharedUtilities29AgentRequestMessageLoadResult_serializedFileTransfers] = a2;
  v4.receiver = v2;
  v4.super_class = (Class)type metadata accessor for AgentRequestMessageLoadResult();
  return objc_msgSendSuper2(&v4, sel_init);
}

uint64_t sub_19E363448()
{
  return sub_19E363514();
}

uint64_t sub_19E363454(uint64_t a1)
{
  return sub_19E363564(a1, &OBJC_IVAR____TtC17IMSharedUtilities29AgentRequestMessageLoadResult_serializedMessages);
}

uint64_t (*sub_19E363460())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t sub_19E3634A4(uint64_t *a1, _QWORD *a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v5;
  _QWORD *v6;

  v5 = *a1;
  v6 = (_QWORD *)(*a2 + *a5);
  swift_beginAccess();
  *v6 = v5;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRelease();
}

uint64_t sub_19E363508()
{
  return sub_19E363514();
}

uint64_t sub_19E363514()
{
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t sub_19E363558(uint64_t a1)
{
  return sub_19E363564(a1, &OBJC_IVAR____TtC17IMSharedUtilities29AgentRequestMessageLoadResult_serializedFileTransfers);
}

uint64_t sub_19E363564(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  _QWORD *v4;

  v4 = (_QWORD *)(v2 + *a2);
  swift_beginAccess();
  *v4 = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*sub_19E3635B0())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

void AgentRequestMessageLoadResult.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id AgentRequestMessageLoadResult.__deallocating_deinit()
{
  return sub_19E363658(type metadata accessor for AgentRequestMessageLoadResult);
}

id sub_19E363658(uint64_t (*a1)(void))
{
  void *v1;
  objc_super v3;

  v3.receiver = v1;
  v3.super_class = (Class)a1();
  return objc_msgSendSuper2(&v3, sel_dealloc);
}

uint64_t sub_19E3636C0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;

  v0 = sub_19E247E74(&qword_1EE501908);
  if (swift_isClassType())
    v1 = v0;
  else
    v1 = 0;
  if (v1)
    v2 = &qword_1EE500640;
  else
    v2 = (uint64_t *)&unk_1EE5036A0;
  return sub_19E247E74(v2);
}

uint64_t sub_19E36370C(uint64_t a1, uint64_t a2)
{
  char v5;

  if (a1 == 0xD00000000000001FLL && a2 == 0x800000019E39F070 || (sub_19E36FE10() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x800000019E39F090)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v5 = sub_19E36FE10();
    swift_bridgeObjectRelease();
    if ((v5 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_19E3637F8(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 1684632935 && a2 == 0xE400000000000000;
  if (v2 || (sub_19E36FE10() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6E65644974616863 && a2 == 0xEF73726569666974 || (sub_19E36FE10() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x656C797473 && a2 == 0xE500000000000000 || (sub_19E36FE10() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x7365636976726573 && a2 == 0xE800000000000000 || (sub_19E36FE10() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x74696D696CLL && a2 == 0xE500000000000000 || (sub_19E36FE10() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x554765726F666562 && a2 == 0xEA00000000004449 || (sub_19E36FE10() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x4955477265746661 && a2 == 0xE900000000000044 || (sub_19E36FE10() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x800000019E39F0B0)
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else
  {
    v6 = sub_19E36FE10();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 7;
    else
      return 8;
  }
}

id sub_19E363B58()
{
  void *v0;
  uint64_t inited;
  char *v2;
  id result;
  objc_super v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  __int128 v8;

  sub_19E3636C0();
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_19E382D50;
  *(_QWORD *)(inited + 32) = sub_19E24B854(0, &qword_1ECFC6AE8);
  *(_QWORD *)(inited + 40) = sub_19E24B854(0, &qword_1ECFC6A70);
  *(_QWORD *)(inited + 48) = sub_19E24B854(0, (unint64_t *)&unk_1ECFC6A50);
  *(_QWORD *)(inited + 56) = sub_19E24B854(0, (unint64_t *)&qword_1ECFC6A00);
  *(_QWORD *)(inited + 64) = sub_19E24B854(0, &qword_1ECFC69B8);
  *(_QWORD *)(inited + 72) = sub_19E24B854(0, (unint64_t *)&unk_1ECFC69F0);
  v2 = v0;
  sub_19E321CD4(inited);
  swift_bridgeObjectRelease();
  sub_19E36FB94();
  result = (id)swift_bridgeObjectRelease();
  if (v7)
  {
    sub_19E24B594(&v6, &v8);
    sub_19E247E74((uint64_t *)&unk_1EE503690);
    swift_dynamicCast();
    *(_QWORD *)&v2[OBJC_IVAR____TtC17IMSharedUtilities26AgentRequestChatLoadResult_chatDictionaries] = v5;

    v4.receiver = v2;
    v4.super_class = (Class)type metadata accessor for AgentRequestChatLoadResult();
    return objc_msgSendSuper2(&v4, sel_init);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t type metadata accessor for AgentRequestChatLoadResult()
{
  return objc_opt_self();
}

id sub_19E363D2C()
{
  void *v0;
  uint64_t inited;
  char *v2;
  id result;
  objc_super v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  _OWORD v8[2];

  sub_19E3636C0();
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_19E381D90;
  *(_QWORD *)(inited + 32) = sub_19E24B854(0, &qword_1ECFC6AE8);
  *(_QWORD *)(inited + 40) = sub_19E24B854(0, &qword_1ECFC6A70);
  *(_QWORD *)(inited + 48) = sub_19E24B854(0, (unint64_t *)&unk_1ECFC6A50);
  *(_QWORD *)(inited + 56) = sub_19E24B854(0, (unint64_t *)&qword_1ECFC6A00);
  *(_QWORD *)(inited + 64) = sub_19E24B854(0, &qword_1ECFC69B8);
  v2 = v0;
  sub_19E321CD4(inited);
  sub_19E36FB94();
  result = (id)swift_bridgeObjectRelease();
  if (v7)
  {
    sub_19E24B594(&v6, v8);
    sub_19E247E74((uint64_t *)&unk_1EE503690);
    swift_dynamicCast();
    *(_QWORD *)&v2[OBJC_IVAR____TtC17IMSharedUtilities29AgentRequestMessageLoadResult_serializedMessages] = v5;
    sub_19E321CD4(inited);
    swift_bridgeObjectRelease();
    sub_19E36FB94();
    result = (id)swift_bridgeObjectRelease();
    if (v7)
    {
      sub_19E24B594(&v6, v8);
      swift_dynamicCast();
      *(_QWORD *)&v2[OBJC_IVAR____TtC17IMSharedUtilities29AgentRequestMessageLoadResult_serializedFileTransfers] = v5;

      v4.receiver = v2;
      v4.super_class = (Class)type metadata accessor for AgentRequestMessageLoadResult();
      return objc_msgSendSuper2(&v4, sel_init);
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t type metadata accessor for AgentRequestMessageLoadResult()
{
  return objc_opt_self();
}

uint64_t sub_19E363F6C@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_19E363FC8(a1, &OBJC_IVAR____TtC17IMSharedUtilities26AgentRequestChatLoadResult_chatDictionaries, a2);
}

uint64_t sub_19E363F78(uint64_t *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  return sub_19E3634A4(a1, a2, a3, a4, &OBJC_IVAR____TtC17IMSharedUtilities26AgentRequestChatLoadResult_chatDictionaries);
}

uint64_t sub_19E363F94@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_19E363FC8(a1, &OBJC_IVAR____TtC17IMSharedUtilities29AgentRequestMessageLoadResult_serializedMessages, a2);
}

uint64_t sub_19E363FA0(uint64_t *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  return sub_19E3634A4(a1, a2, a3, a4, &OBJC_IVAR____TtC17IMSharedUtilities29AgentRequestMessageLoadResult_serializedMessages);
}

uint64_t sub_19E363FBC@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_19E363FC8(a1, &OBJC_IVAR____TtC17IMSharedUtilities29AgentRequestMessageLoadResult_serializedFileTransfers, a2);
}

uint64_t sub_19E363FC8@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X3>, _QWORD *a3@<X8>)
{
  _QWORD *v4;

  v4 = (_QWORD *)(*a1 + *a2);
  swift_beginAccess();
  *a3 = *v4;
  return swift_bridgeObjectRetain();
}

uint64_t sub_19E364018(uint64_t *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  return sub_19E3634A4(a1, a2, a3, a4, &OBJC_IVAR____TtC17IMSharedUtilities29AgentRequestMessageLoadResult_serializedFileTransfers);
}

uint64_t sub_19E364034(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4 < 0)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return swift_bridgeObjectRetain();
}

uint64_t destroy for AgentRequest(uint64_t *a1)
{
  return sub_19E3640E4(*a1, a1[1], a1[2], a1[3]);
}

uint64_t sub_19E3640E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4 < 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return swift_bridgeObjectRelease();
}

uint64_t *initializeWithCopy for AgentRequest(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v3 = *a2;
  v4 = a2[1];
  v5 = a2[2];
  v6 = a2[3];
  v7 = a2[4];
  v8 = a2[5];
  v9 = a2[6];
  v10 = a2[7];
  v11 = a2[8];
  v13 = a2[9];
  v14 = a2[10];
  v15 = a2[11];
  sub_19E364034(*a2, v4, v5, v6);
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  a1[3] = v6;
  a1[4] = v7;
  a1[5] = v8;
  a1[6] = v9;
  a1[7] = v10;
  a1[8] = v11;
  a1[9] = v13;
  a1[10] = v14;
  a1[11] = v15;
  return a1;
}

uint64_t *assignWithCopy for AgentRequest(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v3 = *a2;
  v4 = a2[1];
  v5 = a2[2];
  v6 = a2[3];
  v7 = a2[4];
  v8 = a2[5];
  v9 = a2[6];
  v10 = a2[7];
  v11 = a2[8];
  v17 = a2[9];
  v18 = a2[10];
  v19 = a2[11];
  sub_19E364034(*a2, v4, v5, v6);
  v12 = *a1;
  v13 = a1[1];
  v14 = a1[2];
  v15 = a1[3];
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  a1[3] = v6;
  a1[4] = v7;
  a1[5] = v8;
  a1[6] = v9;
  a1[7] = v10;
  a1[8] = v11;
  a1[9] = v17;
  a1[10] = v18;
  a1[11] = v19;
  sub_19E3640E4(v12, v13, v14, v15);
  return a1;
}

__n128 initializeWithTake for AgentRequest(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __n128 result;
  __int128 v4;
  __int128 v5;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  result = *(__n128 *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(__n128 *)(a1 + 32) = result;
  *(_OWORD *)(a1 + 48) = v4;
  return result;
}

uint64_t assignWithTake for AgentRequest(uint64_t a1, _OWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;

  v3 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  v7 = a2[1];
  *(_OWORD *)a1 = *a2;
  *(_OWORD *)(a1 + 16) = v7;
  v8 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v8;
  v9 = a2[5];
  *(_OWORD *)(a1 + 64) = a2[4];
  *(_OWORD *)(a1 + 80) = v9;
  sub_19E3640E4(v3, v5, v4, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for AgentRequest(uint64_t a1, int a2)
{
  unsigned int v2;
  int v3;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 96))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_DWORD *)(a1 + 25);
  if (v2 > 0x80000000)
    v3 = ~v2;
  else
    v3 = -1;
  return (v3 + 1);
}

double storeEnumTagSinglePayload for AgentRequest(uint64_t a1, int a2, int a3)
{
  double result;

  if (a2 < 0)
  {
    *(_QWORD *)(a1 + 88) = 0;
    result = 0.0;
    *(_OWORD *)(a1 + 72) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 8) = 0u;
    *(_QWORD *)a1 = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(a1 + 96) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 0;
      *(_QWORD *)(a1 + 24) = (unint64_t)-a2 << 8;
      result = 0.0;
      *(_OWORD *)(a1 + 32) = 0u;
      *(_OWORD *)(a1 + 48) = 0u;
      *(_OWORD *)(a1 + 64) = 0u;
      *(_OWORD *)(a1 + 80) = 0u;
      return result;
    }
    *(_BYTE *)(a1 + 96) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t sub_19E364428(uint64_t a1)
{
  return *(_QWORD *)(a1 + 24) >> 63;
}

uint64_t sub_19E364434(uint64_t result)
{
  *(_QWORD *)(result + 24) &= ~0x8000000000000000;
  return result;
}

uint64_t sub_19E364444(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 24) = *(unsigned __int8 *)(result + 24) | (unint64_t)(a2 << 63);
  return result;
}

ValueMetadata *type metadata accessor for AgentRequest()
{
  return &type metadata for AgentRequest;
}

uint64_t method lookup function for AgentRequestChatLoadResult()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of AgentRequestChatLoadResult.encode(with:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x58))();
}

uint64_t dispatch thunk of AgentRequestChatLoadResult.__allocating_init(coder:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t dispatch thunk of AgentRequestChatLoadResult.__allocating_init(chatDictionaries:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 104))();
}

uint64_t dispatch thunk of AgentRequestChatLoadResult.chatDictionaries.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x70))();
}

uint64_t dispatch thunk of AgentRequestChatLoadResult.chatDictionaries.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x78))();
}

uint64_t dispatch thunk of AgentRequestChatLoadResult.chatDictionaries.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x80))();
}

uint64_t method lookup function for AgentRequestMessageLoadResult()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of AgentRequestMessageLoadResult.encode(with:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x60))();
}

uint64_t dispatch thunk of AgentRequestMessageLoadResult.__allocating_init(serializedMessages:serializedFileTransfers:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t dispatch thunk of AgentRequestMessageLoadResult.serializedMessages.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x78))();
}

uint64_t dispatch thunk of AgentRequestMessageLoadResult.serializedMessages.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x80))();
}

uint64_t dispatch thunk of AgentRequestMessageLoadResult.serializedMessages.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x88))();
}

uint64_t dispatch thunk of AgentRequestMessageLoadResult.serializedFileTransfers.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x90))();
}

uint64_t dispatch thunk of AgentRequestMessageLoadResult.serializedFileTransfers.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x98))();
}

uint64_t dispatch thunk of AgentRequestMessageLoadResult.serializedFileTransfers.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xA0))();
}

uint64_t dispatch thunk of static AgentRequestResult.from(data:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 8))();
}

uint64_t storeEnumTagSinglePayload for AgentRequest.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_19E36462C + 4 * byte_19E38304D[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_19E364660 + 4 * byte_19E383048[v4]))();
}

uint64_t sub_19E364660(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_19E364668(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x19E364670);
  return result;
}

uint64_t sub_19E36467C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x19E364684);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_19E364688(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_19E364690(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AgentRequest.CodingKeys()
{
  return &type metadata for AgentRequest.CodingKeys;
}

uint64_t getEnumTagSinglePayload for AgentRequest.LoadAnyChatsContainingHandleIDsCodingKeys(unsigned int *a1, int a2)
{
  int v2;
  int v3;

  if (!a2)
    return 0;
  if ((a2 + 1) >= 0x10000)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) < 0x100)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
    return *a1;
  if (v3 == 2)
    return *(unsigned __int16 *)a1;
  return *(unsigned __int8 *)a1;
}

uint64_t storeEnumTagSinglePayload for AgentRequest.LoadAnyChatsContainingHandleIDsCodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_19E364740 + 4 * byte_19E383052[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_19E364760 + 4 * byte_19E383057[v4]))();
}

_BYTE *sub_19E364740(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_19E364760(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_19E364768(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_19E364770(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_19E364778(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_19E364780(_DWORD *result)
{
  *result = 0;
  return result;
}

uint64_t sub_19E36478C()
{
  return 0;
}

ValueMetadata *type metadata accessor for AgentRequest.LoadAnyChatsContainingHandleIDsCodingKeys()
{
  return &type metadata for AgentRequest.LoadAnyChatsContainingHandleIDsCodingKeys;
}

uint64_t getEnumTagSinglePayload for AgentRequest.LoadHistoryForChatCodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF9)
    goto LABEL_17;
  if (a2 + 7 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 7) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 7;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 7;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 7;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 8;
  v8 = v6 - 8;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for AgentRequest.LoadHistoryForChatCodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 7 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 7) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF9)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF8)
    return ((uint64_t (*)(void))((char *)&loc_19E364880 + 4 * byte_19E383061[v4]))();
  *a1 = a2 + 7;
  return ((uint64_t (*)(void))((char *)sub_19E3648B4 + 4 * byte_19E38305C[v4]))();
}

uint64_t sub_19E3648B4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_19E3648BC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x19E3648C4);
  return result;
}

uint64_t sub_19E3648D0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x19E3648D8);
  *(_BYTE *)result = a2 + 7;
  return result;
}

uint64_t sub_19E3648DC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_19E3648E4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AgentRequest.LoadHistoryForChatCodingKeys()
{
  return &type metadata for AgentRequest.LoadHistoryForChatCodingKeys;
}

unint64_t sub_19E364904()
{
  unint64_t result;

  result = qword_1EE503638;
  if (!qword_1EE503638)
  {
    result = MEMORY[0x1A1AE8A18](&unk_19E3832C0, &type metadata for AgentRequest.LoadHistoryForChatCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE503638);
  }
  return result;
}

unint64_t sub_19E36494C()
{
  unint64_t result;

  result = qword_1EE503640;
  if (!qword_1EE503640)
  {
    result = MEMORY[0x1A1AE8A18](&unk_19E383378, &type metadata for AgentRequest.LoadAnyChatsContainingHandleIDsCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE503640);
  }
  return result;
}

unint64_t sub_19E364994()
{
  unint64_t result;

  result = qword_1EE503648;
  if (!qword_1EE503648)
  {
    result = MEMORY[0x1A1AE8A18](&unk_19E383430, &type metadata for AgentRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE503648);
  }
  return result;
}

unint64_t sub_19E3649DC()
{
  unint64_t result;

  result = qword_1EE503650;
  if (!qword_1EE503650)
  {
    result = MEMORY[0x1A1AE8A18](&unk_19E3832E8, &type metadata for AgentRequest.LoadAnyChatsContainingHandleIDsCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE503650);
  }
  return result;
}

unint64_t sub_19E364A24()
{
  unint64_t result;

  result = qword_1EE503658;
  if (!qword_1EE503658)
  {
    result = MEMORY[0x1A1AE8A18](&unk_19E383310, &type metadata for AgentRequest.LoadAnyChatsContainingHandleIDsCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE503658);
  }
  return result;
}

unint64_t sub_19E364A6C()
{
  unint64_t result;

  result = qword_1EE503660;
  if (!qword_1EE503660)
  {
    result = MEMORY[0x1A1AE8A18](&unk_19E383230, &type metadata for AgentRequest.LoadHistoryForChatCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE503660);
  }
  return result;
}

unint64_t sub_19E364AB4()
{
  unint64_t result;

  result = qword_1EE503668;
  if (!qword_1EE503668)
  {
    result = MEMORY[0x1A1AE8A18](&unk_19E383258, &type metadata for AgentRequest.LoadHistoryForChatCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE503668);
  }
  return result;
}

unint64_t sub_19E364AFC()
{
  unint64_t result;

  result = qword_1EE503670;
  if (!qword_1EE503670)
  {
    result = MEMORY[0x1A1AE8A18](&unk_19E3833A0, &type metadata for AgentRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE503670);
  }
  return result;
}

unint64_t sub_19E364B44()
{
  unint64_t result;

  result = qword_1EE503678;
  if (!qword_1EE503678)
  {
    result = MEMORY[0x1A1AE8A18](&unk_19E3833C8, &type metadata for AgentRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE503678);
  }
  return result;
}

uint64_t sub_19E364B88(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    type metadata accessor for IMChatStyle(255);
    result = MEMORY[0x1A1AE8A18](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

void __swiftcall IMActionComposeVideo.init(dictionary:)(IMActionComposeVideo_optional *__return_ptr retstr, Swift::OpaquePointer dictionary)
{
  id v2;
  void *v3;

  v2 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  v3 = (void *)sub_19E36F81C();
  swift_bridgeObjectRelease();
  objc_msgSend(v2, sel_initWithDictionary_, v3);

}

id IMActionComposeVideo.init(dictionary:)(uint64_t a1)
{
  void *v1;
  void *v2;
  unint64_t v4;
  char v5;
  void *v6;
  id v7;
  __int128 v9;
  __int128 v10;

  v2 = v1;
  if (!*(_QWORD *)(a1 + 16) || (v4 = sub_19E3247E4(0x6D754E656E6F6870, 0xEB00000000726562), (v5 & 1) == 0))
  {
    v9 = 0u;
    v10 = 0u;
    swift_bridgeObjectRelease();
    goto LABEL_7;
  }
  sub_19E324848(*(_QWORD *)(a1 + 56) + 32 * v4, (uint64_t)&v9);
  swift_bridgeObjectRelease();
  if (!*((_QWORD *)&v10 + 1))
  {
LABEL_7:
    sub_19E322284((uint64_t)&v9);
    goto LABEL_8;
  }
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_8:
    swift_getObjectType();
    swift_deallocPartialClassInstance();
    return 0;
  }
  v6 = (void *)sub_19E36F864();
  swift_bridgeObjectRelease();
  v7 = objc_msgSend(v2, sel_initWithPhoneNumber_, v6);

  return v7;
}

void __swiftcall IMActionComposeVideo.init()(IMActionComposeVideo *__return_ptr retstr)
{
  objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_init);
}

void IMActionComposeVideo.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

unint64_t type metadata accessor for IMActionComposeVideo()
{
  unint64_t result;

  result = qword_1EE5036B0;
  if (!qword_1EE5036B0)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1EE5036B0);
  }
  return result;
}

id PluginSettingsProvider.initiallyDisabledHashtagImages.getter()
{
  uint64_t v0;
  id v1;
  void *v2;

  v1 = *(id *)(v0 + 16);
  if (v1)
  {
    v2 = (void *)sub_19E36F864();
    v1 = objc_msgSend(v1, sel_BOOLForKey_, v2);

  }
  return v1;
}

void PluginSettingsProvider.initiallyDisabledHashtagImages.setter(char a1)
{
  uint64_t v1;
  void *v2;
  id v4;

  v2 = *(void **)(v1 + 16);
  if (v2)
  {
    v4 = (id)sub_19E36F864();
    objc_msgSend(v2, sel_setBool_forKey_, a1 & 1, v4);

  }
}

void (*PluginSettingsProvider.initiallyDisabledHashtagImages.modify(_QWORD *a1))(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  unsigned __int8 *v3;
  void *v4;
  unsigned __int8 v5;
  void (*result)(uint64_t);

  v2 = *(void **)(v1 + 16);
  v3 = (unsigned __int8 *)(a1 + 2);
  *a1 = v1;
  a1[1] = v2;
  if (v2)
  {
    v4 = (void *)sub_19E36F864();
    v5 = objc_msgSend(v2, sel_BOOLForKey_, v4);

    result = sub_19E31CDEC;
  }
  else
  {
    v5 = 0;
    result = (void (*)(uint64_t))nullsub_5;
  }
  *v3 = v5;
  return result;
}

_QWORD *PluginSettingsProvider.__allocating_init()()
{
  _QWORD *v0;
  id v1;
  void *v2;
  id v3;

  v0 = (_QWORD *)swift_allocObject();
  v1 = objc_allocWithZone(MEMORY[0x1E0C99EA0]);
  v2 = (void *)sub_19E36F864();
  v3 = objc_msgSend(v1, sel_initWithSuiteName_, v2);

  v0[2] = v3;
  v0[3] = 0xD000000000000020;
  v0[4] = 0x800000019E39C1A0;
  return v0;
}

_QWORD *PluginSettingsProvider.init()()
{
  _QWORD *v0;
  id v1;
  void *v2;
  id v3;

  v1 = objc_allocWithZone(MEMORY[0x1E0C99EA0]);
  v2 = (void *)sub_19E36F864();
  v3 = objc_msgSend(v1, sel_initWithSuiteName_, v2);

  v0[2] = v3;
  v0[3] = 0xD000000000000020;
  v0[4] = 0x800000019E39C1A0;
  return v0;
}

uint64_t PluginSettingsProvider.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  return v0;
}

uint64_t PluginSettingsProvider.__deallocating_deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

void (*sub_19E3652E0(_QWORD *a1))(_QWORD *a1)
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = PluginSettingsProvider.initiallyDisabledHashtagImages.modify(v2);
  return sub_19E31DAAC;
}

uint64_t type metadata accessor for PluginSettingsProvider()
{
  return objc_opt_self();
}

uint64_t method lookup function for PluginSettingsProvider()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of PluginSettingsProvider.__allocating_init()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 96))();
}

void __swiftcall IMActionRequestLocation.init(dictionary:)(IMActionRequestLocation_optional *__return_ptr retstr, Swift::OpaquePointer dictionary)
{
  id v2;
  void *v3;

  v2 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  v3 = (void *)sub_19E36F81C();
  swift_bridgeObjectRelease();
  objc_msgSend(v2, sel_initWithDictionary_, v3);

}

id IMActionRequestLocation.init(dictionary:)(uint64_t a1)
{
  void *v1;
  void *v2;
  unint64_t v4;
  char v5;
  id v6;
  id v8;
  __int128 v9;
  __int128 v10;

  v2 = v1;
  if (!*(_QWORD *)(a1 + 16) || (v4 = sub_19E3247E4(0x68737550646E6573, 0xE800000000000000), (v5 & 1) == 0))
  {
    v9 = 0u;
    v10 = 0u;
    swift_bridgeObjectRelease();
    goto LABEL_7;
  }
  sub_19E324848(*(_QWORD *)(a1 + 56) + 32 * v4, (uint64_t)&v9);
  swift_bridgeObjectRelease();
  if (!*((_QWORD *)&v10 + 1))
  {
LABEL_7:
    sub_19E322284((uint64_t)&v9);
    goto LABEL_8;
  }
  sub_19E24B854(0, (unint64_t *)&qword_1ECFC6A00);
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_8:
    swift_getObjectType();
    swift_deallocPartialClassInstance();
    return 0;
  }
  v6 = objc_msgSend(v2, sel_initWithSendPush_, objc_msgSend(v8, sel_BOOLValue));

  return v6;
}

void __swiftcall IMActionRequestLocation.init()(IMActionRequestLocation *__return_ptr retstr)
{
  objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_init);
}

void IMActionRequestLocation.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t type metadata accessor for IMActionRequestLocation(uint64_t a1)
{
  return sub_19E24B854(a1, (unint64_t *)&unk_1EE5036D0);
}

uint64_t sub_19E365710(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t result;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  int64_t v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;
  int64_t v26;
  uint64_t v27;
  int64_t v28;
  _OWORD v29[4];
  _OWORD v30[2];
  _OWORD v31[3];

  if (*(_QWORD *)(a1 + 16))
  {
    sub_19E247E74(&qword_1EE5037A0);
    v2 = sub_19E36FD20();
  }
  else
  {
    v2 = MEMORY[0x1E0DEE9E0];
  }
  v27 = a1 + 64;
  v3 = -1 << *(_BYTE *)(a1 + 32);
  if (-v3 < 64)
    v4 = ~(-1 << -(char)v3);
  else
    v4 = -1;
  v5 = v4 & *(_QWORD *)(a1 + 64);
  v26 = (unint64_t)(63 - v3) >> 6;
  v6 = v2 + 64;
  swift_bridgeObjectRetain();
  result = swift_retain();
  v28 = 0;
  while (1)
  {
    if (v5)
    {
      v9 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      v10 = v9 | (v28 << 6);
      goto LABEL_28;
    }
    v11 = v28 + 1;
    if (__OFADD__(v28, 1))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    if (v11 >= v26)
      goto LABEL_37;
    v12 = *(_QWORD *)(v27 + 8 * v11);
    v13 = v28 + 1;
    if (!v12)
    {
      v13 = v28 + 2;
      if (v28 + 2 >= v26)
        goto LABEL_37;
      v12 = *(_QWORD *)(v27 + 8 * v13);
      if (!v12)
      {
        v13 = v28 + 3;
        if (v28 + 3 >= v26)
          goto LABEL_37;
        v12 = *(_QWORD *)(v27 + 8 * v13);
        if (!v12)
        {
          v13 = v28 + 4;
          if (v28 + 4 >= v26)
            goto LABEL_37;
          v12 = *(_QWORD *)(v27 + 8 * v13);
          if (!v12)
            break;
        }
      }
    }
LABEL_27:
    v5 = (v12 - 1) & v12;
    v10 = __clz(__rbit64(v12)) + (v13 << 6);
    v28 = v13;
LABEL_28:
    v15 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v10);
    *(_QWORD *)&v31[0] = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * v10);
    *(_QWORD *)&v30[0] = v15;
    v16 = *(id *)&v31[0];
    swift_bridgeObjectRetain();
    sub_19E247E74(&qword_1EE503490);
    swift_dynamicCast();
    v17 = *(_QWORD *)&v31[0];
    sub_19E24B594((_OWORD *)((char *)v31 + 8), v29);
    sub_19E24B594(v29, v31);
    sub_19E24B594(v31, v30);
    sub_19E36F888();
    sub_19E36FE88();
    sub_19E36F8B8();
    v18 = sub_19E36FEA0();
    result = swift_bridgeObjectRelease();
    v19 = -1 << *(_BYTE *)(v2 + 32);
    v20 = v18 & ~v19;
    v21 = v20 >> 6;
    if (((-1 << v20) & ~*(_QWORD *)(v6 + 8 * (v20 >> 6))) != 0)
    {
      v8 = __clz(__rbit64((-1 << v20) & ~*(_QWORD *)(v6 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v22 = 0;
      v23 = (unint64_t)(63 - v19) >> 6;
      do
      {
        if (++v21 == v23 && (v22 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        v24 = v21 == v23;
        if (v21 == v23)
          v21 = 0;
        v22 |= v24;
        v25 = *(_QWORD *)(v6 + 8 * v21);
      }
      while (v25 == -1);
      v8 = __clz(__rbit64(~v25)) + (v21 << 6);
    }
    *(_QWORD *)(v6 + ((v8 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v8;
    *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v8) = v17;
    result = (uint64_t)sub_19E24B594(v30, (_OWORD *)(*(_QWORD *)(v2 + 56) + 32 * v8));
    ++*(_QWORD *)(v2 + 16);
  }
  v14 = v28 + 5;
  if (v28 + 5 >= v26)
  {
LABEL_37:
    swift_release();
    sub_19E33A53C();
    return v2;
  }
  v12 = *(_QWORD *)(v27 + 8 * v14);
  if (v12)
  {
    v13 = v28 + 5;
    goto LABEL_27;
  }
  while (1)
  {
    v13 = v14 + 1;
    if (__OFADD__(v14, 1))
      break;
    if (v13 >= v26)
      goto LABEL_37;
    v12 = *(_QWORD *)(v27 + 8 * v13);
    ++v14;
    if (v12)
      goto LABEL_27;
  }
LABEL_39:
  __break(1u);
  return result;
}

uint64_t sub_19E365AB4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t result;
  int64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  int64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  int64_t v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  _OWORD v32[2];
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  _OWORD v36[2];
  _OWORD v37[3];
  _OWORD v38[2];
  __int128 v39;
  _OWORD v40[2];

  if (*(_QWORD *)(a1 + 16))
  {
    sub_19E247E74(&qword_1EE5037A8);
    v2 = sub_19E36FD20();
  }
  else
  {
    v2 = MEMORY[0x1E0DEE9E0];
  }
  v28 = a1 + 64;
  v3 = -1 << *(_BYTE *)(a1 + 32);
  if (-v3 < 64)
    v4 = ~(-1 << -(char)v3);
  else
    v4 = -1;
  v5 = v4 & *(_QWORD *)(a1 + 64);
  v27 = (unint64_t)(63 - v3) >> 6;
  v6 = v2 + 64;
  swift_bridgeObjectRetain();
  result = swift_retain();
  v8 = 0;
  while (1)
  {
    if (v5)
    {
      v11 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      v12 = v11 | (v8 << 6);
      goto LABEL_28;
    }
    v13 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    if (v13 >= v27)
      goto LABEL_37;
    v14 = *(_QWORD *)(v28 + 8 * v13);
    v15 = v8 + 1;
    if (!v14)
    {
      v15 = v8 + 2;
      if (v8 + 2 >= v27)
        goto LABEL_37;
      v14 = *(_QWORD *)(v28 + 8 * v15);
      if (!v14)
      {
        v15 = v8 + 3;
        if (v8 + 3 >= v27)
          goto LABEL_37;
        v14 = *(_QWORD *)(v28 + 8 * v15);
        if (!v14)
        {
          v15 = v8 + 4;
          if (v8 + 4 >= v27)
            goto LABEL_37;
          v14 = *(_QWORD *)(v28 + 8 * v15);
          if (!v14)
            break;
        }
      }
    }
LABEL_27:
    v5 = (v14 - 1) & v14;
    v12 = __clz(__rbit64(v14)) + (v15 << 6);
    v8 = v15;
LABEL_28:
    v17 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v12);
    v19 = *v17;
    v18 = v17[1];
    sub_19E324848(*(_QWORD *)(a1 + 56) + 32 * v12, (uint64_t)v40);
    *(_QWORD *)&v39 = v19;
    *((_QWORD *)&v39 + 1) = v18;
    v37[2] = v39;
    v38[0] = v40[0];
    v38[1] = v40[1];
    *(_QWORD *)&v37[0] = v19;
    *((_QWORD *)&v37[0] + 1) = v18;
    swift_bridgeObjectRetain();
    swift_dynamicCast();
    sub_19E24B594(v38, v32);
    v33 = v29;
    v34 = v30;
    v35 = v31;
    sub_19E24B594(v32, v36);
    v29 = v33;
    v30 = v34;
    v31 = v35;
    sub_19E24B594(v36, v37);
    sub_19E24B594(v37, &v33);
    result = sub_19E36FC48();
    v20 = -1 << *(_BYTE *)(v2 + 32);
    v21 = result & ~v20;
    v22 = v21 >> 6;
    if (((-1 << v21) & ~*(_QWORD *)(v6 + 8 * (v21 >> 6))) != 0)
    {
      v9 = __clz(__rbit64((-1 << v21) & ~*(_QWORD *)(v6 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v23 = 0;
      v24 = (unint64_t)(63 - v20) >> 6;
      do
      {
        if (++v22 == v24 && (v23 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        v25 = v22 == v24;
        if (v22 == v24)
          v22 = 0;
        v23 |= v25;
        v26 = *(_QWORD *)(v6 + 8 * v22);
      }
      while (v26 == -1);
      v9 = __clz(__rbit64(~v26)) + (v22 << 6);
    }
    *(_QWORD *)(v6 + ((v9 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v9;
    v10 = *(_QWORD *)(v2 + 48) + 40 * v9;
    *(_OWORD *)v10 = v29;
    *(_OWORD *)(v10 + 16) = v30;
    *(_QWORD *)(v10 + 32) = v31;
    result = (uint64_t)sub_19E24B594(&v33, (_OWORD *)(*(_QWORD *)(v2 + 56) + 32 * v9));
    ++*(_QWORD *)(v2 + 16);
  }
  v16 = v8 + 5;
  if (v8 + 5 >= v27)
  {
LABEL_37:
    swift_release();
    sub_19E33A53C();
    return v2;
  }
  v14 = *(_QWORD *)(v28 + 8 * v16);
  if (v14)
  {
    v15 = v8 + 5;
    goto LABEL_27;
  }
  while (1)
  {
    v15 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v15 >= v27)
      goto LABEL_37;
    v14 = *(_QWORD *)(v28 + 8 * v15);
    ++v16;
    if (v14)
      goto LABEL_27;
  }
LABEL_39:
  __break(1u);
  return result;
}

unint64_t sub_19E365E78(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  unint64_t result;
  unint64_t *v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t *v15;
  uint64_t *v16;
  _OWORD *v17;
  unint64_t i;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  int64_t v22;
  uint64_t *v23;
  void *v24;
  id v25;
  unint64_t v26;
  char v27;
  uint64_t *v28;
  uint64_t v29;
  BOOL v30;
  uint64_t v31;
  int64_t v32;
  uint64_t v33;
  int64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  _OWORD v41[2];

  v1 = a1;
  if (*(_QWORD *)(a1 + 16))
  {
    sub_19E247E74((uint64_t *)&unk_1EE503400);
    v2 = (_QWORD *)sub_19E36FD20();
  }
  else
  {
    v2 = (_QWORD *)MEMORY[0x1E0DEE9E0];
  }
  v33 = v1 + 64;
  v3 = -1 << *(_BYTE *)(v1 + 32);
  if (-v3 < 64)
    v4 = ~(-1 << -(char)v3);
  else
    v4 = -1;
  v5 = v4 & *(_QWORD *)(v1 + 64);
  v32 = (unint64_t)(63 - v3) >> 6;
  v6 = &v38;
  v7 = &v40;
  result = swift_bridgeObjectRetain();
  v34 = 0;
  v9 = (unint64_t *)&qword_1ECFC6A00;
  v10 = 0x1E0CB37E8uLL;
  if (v5)
    goto LABEL_10;
LABEL_11:
  v19 = v34 + 1;
  if (__OFADD__(v34, 1))
    goto LABEL_35;
  if (v19 >= v32)
    goto LABEL_32;
  v20 = *(_QWORD *)(v33 + 8 * v19);
  v21 = v34 + 1;
  if (!v20)
  {
    v21 = v34 + 2;
    if (v34 + 2 >= v32)
      goto LABEL_32;
    v20 = *(_QWORD *)(v33 + 8 * v21);
    if (!v20)
    {
      v21 = v34 + 3;
      if (v34 + 3 >= v32)
        goto LABEL_32;
      v20 = *(_QWORD *)(v33 + 8 * v21);
      if (!v20)
      {
        v21 = v34 + 4;
        if (v34 + 4 >= v32)
          goto LABEL_32;
        v20 = *(_QWORD *)(v33 + 8 * v21);
        if (!v20)
        {
          v22 = v34 + 5;
          if (v34 + 5 < v32)
          {
            v20 = *(_QWORD *)(v33 + 8 * v22);
            if (v20)
            {
              v21 = v34 + 5;
              goto LABEL_26;
            }
            while (1)
            {
              v21 = v22 + 1;
              if (__OFADD__(v22, 1))
                goto LABEL_36;
              if (v21 >= v32)
                break;
              v20 = *(_QWORD *)(v33 + 8 * v21);
              ++v22;
              if (v20)
                goto LABEL_26;
            }
          }
LABEL_32:
          sub_19E33A53C();
          return (unint64_t)v2;
        }
      }
    }
  }
LABEL_26:
  v34 = v21;
  v35 = (v20 - 1) & v20;
  for (i = __clz(__rbit64(v20)) + (v21 << 6); ; i = __clz(__rbit64(v5)) | (v34 << 6))
  {
    v23 = (uint64_t *)(*(_QWORD *)(v1 + 48) + 16 * i);
    v24 = *(void **)(*(_QWORD *)(v1 + 56) + 8 * i);
    v36 = *v23;
    v37 = v23[1];
    sub_19E24B854(0, v9);
    swift_bridgeObjectRetain();
    v25 = v24;
    swift_dynamicCast();
    sub_19E24B594(v6, v7);
    sub_19E24B594(v7, v41);
    sub_19E24B594(v41, &v39);
    result = sub_19E3247E4(v36, v37);
    v26 = result;
    if ((v27 & 1) != 0)
    {
      v11 = v7;
      v12 = v6;
      v13 = v1;
      v14 = v10;
      v15 = v9;
      v16 = (uint64_t *)(v2[6] + 16 * result);
      swift_bridgeObjectRelease();
      *v16 = v36;
      v16[1] = v37;
      v9 = v15;
      v10 = v14;
      v1 = v13;
      v6 = v12;
      v7 = v11;
      v17 = (_OWORD *)(v2[7] + 32 * v26);
      sub_19E323384((uint64_t)v17);
      result = (unint64_t)sub_19E24B594(&v39, v17);
      v5 = v35;
      if (!v35)
        goto LABEL_11;
      goto LABEL_10;
    }
    if (v2[2] >= v2[3])
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v28 = (uint64_t *)(v2[6] + 16 * result);
    *v28 = v36;
    v28[1] = v37;
    result = (unint64_t)sub_19E24B594(&v39, (_OWORD *)(v2[7] + 32 * result));
    v29 = v2[2];
    v30 = __OFADD__(v29, 1);
    v31 = v29 + 1;
    if (v30)
      goto LABEL_34;
    v2[2] = v31;
    v5 = v35;
    if (!v35)
      goto LABEL_11;
LABEL_10:
    v35 = (v5 - 1) & v5;
  }
  __break(1u);
LABEL_34:
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
  return result;
}

uint64_t static WallpaperMetadata.supportsSecureCoding.getter()
{
  return 1;
}

uint64_t WallpaperMetadata.fontName.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR___IMWallpaperMetadata_Impl_fontName);
  swift_bridgeObjectRetain();
  return v1;
}

double WallpaperMetadata.fontSize.getter()
{
  uint64_t v0;

  return *(double *)(v0 + OBJC_IVAR___IMWallpaperMetadata_Impl_fontSize);
}

double WallpaperMetadata.fontWeight.getter()
{
  uint64_t v0;

  return *(double *)(v0 + OBJC_IVAR___IMWallpaperMetadata_Impl_fontWeight);
}

id sub_19E3662D0()
{
  uint64_t v0;
  id *v1;

  v1 = (id *)(v0 + OBJC_IVAR___IMWallpaperMetadata_Impl_fontColor);
  swift_beginAccess();
  return *v1;
}

void sub_19E366370(void *a1)
{
  uint64_t v1;
  void **v3;
  void *v4;

  v3 = (void **)(v1 + OBJC_IVAR___IMWallpaperMetadata_Impl_fontColor);
  swift_beginAccess();
  v4 = *v3;
  *v3 = a1;

}

void sub_19E3663C0(void **a1, _QWORD *a2)
{
  void *v2;
  void **v3;
  void *v4;
  id v5;

  v2 = *a1;
  v3 = (void **)(*a2 + OBJC_IVAR___IMWallpaperMetadata_Impl_fontColor);
  swift_beginAccess();
  v4 = *v3;
  *v3 = v2;
  v5 = v2;

}

uint64_t (*sub_19E366420())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t WallpaperMetadata.isVertical.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + OBJC_IVAR___IMWallpaperMetadata_Impl_isVertical);
}

uint64_t WallpaperMetadata.type.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR___IMWallpaperMetadata_Impl_type);
  swift_bridgeObjectRetain();
  return v1;
}

void *sub_19E366510()
{
  uint64_t v0;
  void **v1;
  void *v2;
  id v3;

  v1 = (void **)(v0 + OBJC_IVAR___IMWallpaperMetadata_Impl_backgroundColor);
  swift_beginAccess();
  v2 = *v1;
  v3 = v2;
  return v2;
}

void sub_19E3665B8(void *a1)
{
  uint64_t v1;
  void **v3;
  void *v4;

  v3 = (void **)(v1 + OBJC_IVAR___IMWallpaperMetadata_Impl_backgroundColor);
  swift_beginAccess();
  v4 = *v3;
  *v3 = a1;

}

void sub_19E366608(void **a1, _QWORD *a2)
{
  void *v2;
  void **v3;
  void *v4;
  id v5;

  v2 = *a1;
  v3 = (void **)(*a2 + OBJC_IVAR___IMWallpaperMetadata_Impl_backgroundColor);
  swift_beginAccess();
  v4 = *v3;
  *v3 = v2;
  v5 = v2;

}

uint64_t (*sub_19E366668())()
{
  swift_beginAccess();
  return j__swift_endAccess;
}

void sub_19E3666AC(void *a1)
{
  uint64_t v1;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  id *v9;
  id v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  id *v16;
  id v17;
  void *v18;

  v3 = (void *)sub_19E36F864();
  v4 = (void *)sub_19E36F864();
  objc_msgSend(a1, sel_encodeObject_forKey_, v3, v4);

  v5 = (void *)sub_19E36F66C();
  v6 = (void *)sub_19E36F864();
  objc_msgSend(a1, sel_encodeObject_forKey_, v5, v6);

  v7 = (void *)sub_19E36F66C();
  v8 = (void *)sub_19E36F864();
  objc_msgSend(a1, sel_encodeObject_forKey_, v7, v8);

  v9 = (id *)(v1 + OBJC_IVAR___IMWallpaperMetadata_Impl_fontColor);
  swift_beginAccess();
  v10 = *v9;
  v11 = (void *)sub_19E36F864();
  objc_msgSend(a1, sel_encodeObject_forKey_, v10, v11);

  v12 = (void *)sub_19E36F9B4();
  v13 = (void *)sub_19E36F864();
  objc_msgSend(a1, sel_encodeObject_forKey_, v12, v13);

  v14 = (void *)sub_19E36F864();
  v15 = (void *)sub_19E36F864();
  objc_msgSend(a1, sel_encodeObject_forKey_, v14, v15);

  v16 = (id *)(v1 + OBJC_IVAR___IMWallpaperMetadata_Impl_backgroundColor);
  swift_beginAccess();
  if (*v16)
  {
    v17 = *v16;
    v18 = (void *)sub_19E36F864();
    objc_msgSend(a1, sel_encodeObject_forKey_, v17, v18);

  }
}

id WallpaperMetadata.__allocating_init(fontName:fontSize:fontWeight:fontColor:isVertical:type:backgroundColor:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, double a8, double a9)
{
  objc_class *v9;
  id v19;

  v19 = objc_allocWithZone(v9);
  return WallpaperMetadata.init(fontName:fontSize:fontWeight:fontColor:isVertical:type:backgroundColor:)(a1, a2, a3, a4, a5, a6, a7, a8, a9);
}

id WallpaperMetadata.init(fontName:fontSize:fontWeight:fontColor:isVertical:type:backgroundColor:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, double a8, double a9)
{
  char *v9;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  void **v22;
  char *v23;
  char *v24;
  unint64_t v25;
  objc_class *v26;
  id v27;
  char *v28;
  unint64_t v29;
  id v30;
  id v31;
  void *v32;
  objc_super v34;

  v15 = &v9[OBJC_IVAR___IMWallpaperMetadata_Impl_fontNameKey];
  *(_QWORD *)v15 = 0x656D614E746E6F66;
  *((_QWORD *)v15 + 1) = 0xEB0000000079654BLL;
  v16 = &v9[OBJC_IVAR___IMWallpaperMetadata_Impl_fontSizeKey];
  *(_QWORD *)v16 = 0x657A6953746E6F66;
  *((_QWORD *)v16 + 1) = 0xEB0000000079654BLL;
  v17 = &v9[OBJC_IVAR___IMWallpaperMetadata_Impl_fontWeightKey];
  strcpy(&v9[OBJC_IVAR___IMWallpaperMetadata_Impl_fontWeightKey], "fontWeightKey");
  *((_WORD *)v17 + 7) = -4864;
  v18 = &v9[OBJC_IVAR___IMWallpaperMetadata_Impl_fontColorKey];
  strcpy(&v9[OBJC_IVAR___IMWallpaperMetadata_Impl_fontColorKey], "fontColorKey");
  v18[13] = 0;
  *((_WORD *)v18 + 7) = -5120;
  v19 = &v9[OBJC_IVAR___IMWallpaperMetadata_Impl_isVerticalKey];
  strcpy(&v9[OBJC_IVAR___IMWallpaperMetadata_Impl_isVerticalKey], "isVerticalKey");
  *((_WORD *)v19 + 7) = -4864;
  v20 = &v9[OBJC_IVAR___IMWallpaperMetadata_Impl_typeKey];
  *(_QWORD *)v20 = 0x79654B65707974;
  *((_QWORD *)v20 + 1) = 0xE700000000000000;
  v21 = &v9[OBJC_IVAR___IMWallpaperMetadata_Impl_backgroundColorKey];
  *(_QWORD *)v21 = 0xD000000000000012;
  *((_QWORD *)v21 + 1) = 0x800000019E39F210;
  v22 = (void **)&v9[OBJC_IVAR___IMWallpaperMetadata_Impl_backgroundColor];
  *(_QWORD *)&v9[OBJC_IVAR___IMWallpaperMetadata_Impl_backgroundColor] = 0;
  v23 = &v9[OBJC_IVAR___IMWallpaperMetadata_Impl_fontName];
  *(_QWORD *)v23 = a1;
  *((_QWORD *)v23 + 1) = a2;
  *(double *)&v9[OBJC_IVAR___IMWallpaperMetadata_Impl_fontSize] = a8;
  *(double *)&v9[OBJC_IVAR___IMWallpaperMetadata_Impl_fontWeight] = a9;
  v24 = v9;
  v25 = sub_19E365E78(a3);
  swift_bridgeObjectRelease();
  v26 = (objc_class *)type metadata accessor for WallpaperMetadataColor();
  v27 = objc_allocWithZone(v26);
  *(_QWORD *)&v24[OBJC_IVAR___IMWallpaperMetadata_Impl_fontColor] = WallpaperMetadataColor.init(dictionaryRepresentation:)(v25);
  v24[OBJC_IVAR___IMWallpaperMetadata_Impl_isVertical] = a4;
  v28 = &v24[OBJC_IVAR___IMWallpaperMetadata_Impl_type];
  *(_QWORD *)v28 = a5;
  *((_QWORD *)v28 + 1) = a6;
  if (a7)
  {
    v29 = sub_19E365E78(a7);
    swift_bridgeObjectRelease();
    v30 = objc_allocWithZone(v26);
    v31 = WallpaperMetadataColor.init(dictionaryRepresentation:)(v29);
    swift_beginAccess();
    v32 = *v22;
    *v22 = v31;

  }
  else
  {

  }
  v34.receiver = v24;
  v34.super_class = (Class)type metadata accessor for WallpaperMetadata();
  return objc_msgSendSuper2(&v34, sel_init);
}

id WallpaperMetadataColor.__allocating_init(dictionaryRepresentation:)(uint64_t a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  return WallpaperMetadataColor.init(dictionaryRepresentation:)(a1);
}

uint64_t type metadata accessor for WallpaperMetadataColor()
{
  return objc_opt_self();
}

uint64_t WallpaperMetadata.__allocating_init(coder:)(void *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  return WallpaperMetadata.init(coder:)(a1);
}

uint64_t WallpaperMetadata.init(coder:)(void *a1)
{
  char *v1;
  char *v2;
  char *v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  char *v9;
  char *v10;
  void **v11;
  char *v12;
  uint64_t v13;
  void *v14;
  void *v15;
  uint64_t v17;
  uint64_t v18;

  v2 = v1;
  v4 = &v2[OBJC_IVAR___IMWallpaperMetadata_Impl_fontNameKey];
  *(_QWORD *)v4 = 0x656D614E746E6F66;
  *((_QWORD *)v4 + 1) = 0xEB0000000079654BLL;
  v5 = &v2[OBJC_IVAR___IMWallpaperMetadata_Impl_fontSizeKey];
  *(_QWORD *)v5 = 0x657A6953746E6F66;
  *((_QWORD *)v5 + 1) = 0xEB0000000079654BLL;
  v6 = &v2[OBJC_IVAR___IMWallpaperMetadata_Impl_fontWeightKey];
  strcpy(&v2[OBJC_IVAR___IMWallpaperMetadata_Impl_fontWeightKey], "fontWeightKey");
  *((_WORD *)v6 + 7) = -4864;
  v7 = &v2[OBJC_IVAR___IMWallpaperMetadata_Impl_fontColorKey];
  strcpy(&v2[OBJC_IVAR___IMWallpaperMetadata_Impl_fontColorKey], "fontColorKey");
  v7[13] = 0;
  *((_WORD *)v7 + 7) = -5120;
  v8 = &v2[OBJC_IVAR___IMWallpaperMetadata_Impl_isVerticalKey];
  strcpy(&v2[OBJC_IVAR___IMWallpaperMetadata_Impl_isVerticalKey], "isVerticalKey");
  *((_WORD *)v8 + 7) = -4864;
  v9 = &v2[OBJC_IVAR___IMWallpaperMetadata_Impl_typeKey];
  *(_QWORD *)v9 = 0x79654B65707974;
  *((_QWORD *)v9 + 1) = 0xE700000000000000;
  v10 = &v2[OBJC_IVAR___IMWallpaperMetadata_Impl_backgroundColorKey];
  *(_QWORD *)v10 = 0xD000000000000012;
  *((_QWORD *)v10 + 1) = 0x800000019E39F210;
  v11 = (void **)&v2[OBJC_IVAR___IMWallpaperMetadata_Impl_backgroundColor];
  *(_QWORD *)&v2[OBJC_IVAR___IMWallpaperMetadata_Impl_backgroundColor] = 0;
  sub_19E24B854(0, (unint64_t *)&unk_1ECFC6A50);
  v12 = v2;
  v13 = sub_19E36FB88();
  if (v13)
  {
    v14 = (void *)v13;
    v17 = 0;
    v18 = 0;
    sub_19E36F87C();

  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v15 = *v11;

  type metadata accessor for WallpaperMetadata();
  swift_deallocPartialClassInstance();
  return 0;
}

id WallpaperMetadata.__allocating_init(dictionaryRepresentation:)(uint64_t a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  return WallpaperMetadata.init(dictionaryRepresentation:)(a1);
}

id WallpaperMetadata.init(dictionaryRepresentation:)(uint64_t a1)
{
  char *v1;
  char *v3;
  uint64_t *v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char v35;
  void *v36;
  uint64_t v38;
  char *v39;
  uint64_t *v40;
  objc_class *v41;
  id v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  char v46;
  id v47;
  id v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  char *v54;
  void **v55;
  objc_super v56;
  uint64_t v57;
  uint64_t v58;
  __int128 v59;
  __int128 v60;

  v3 = &v1[OBJC_IVAR___IMWallpaperMetadata_Impl_fontNameKey];
  *(_QWORD *)v3 = 0x656D614E746E6F66;
  *((_QWORD *)v3 + 1) = 0xEB0000000079654BLL;
  v4 = (uint64_t *)&v1[OBJC_IVAR___IMWallpaperMetadata_Impl_fontSizeKey];
  *v4 = 0x657A6953746E6F66;
  v4[1] = 0xEB0000000079654BLL;
  v5 = &v1[OBJC_IVAR___IMWallpaperMetadata_Impl_fontWeightKey];
  strcpy(&v1[OBJC_IVAR___IMWallpaperMetadata_Impl_fontWeightKey], "fontWeightKey");
  *((_WORD *)v5 + 7) = -4864;
  v6 = &v1[OBJC_IVAR___IMWallpaperMetadata_Impl_fontColorKey];
  strcpy(&v1[OBJC_IVAR___IMWallpaperMetadata_Impl_fontColorKey], "fontColorKey");
  v6[13] = 0;
  *((_WORD *)v6 + 7) = -5120;
  v7 = &v1[OBJC_IVAR___IMWallpaperMetadata_Impl_isVerticalKey];
  strcpy(&v1[OBJC_IVAR___IMWallpaperMetadata_Impl_isVerticalKey], "isVerticalKey");
  *((_WORD *)v7 + 7) = -4864;
  v8 = (uint64_t *)&v1[OBJC_IVAR___IMWallpaperMetadata_Impl_typeKey];
  *v8 = 0x79654B65707974;
  v8[1] = 0xE700000000000000;
  v9 = (uint64_t *)&v1[OBJC_IVAR___IMWallpaperMetadata_Impl_backgroundColorKey];
  *v9 = 0xD000000000000012;
  v9[1] = 0x800000019E39F210;
  v55 = (void **)&v1[OBJC_IVAR___IMWallpaperMetadata_Impl_backgroundColor];
  *(_QWORD *)&v1[OBJC_IVAR___IMWallpaperMetadata_Impl_backgroundColor] = 0;
  v10 = *(_QWORD *)(a1 + 16);
  v11 = v1;
  if (!v10)
    goto LABEL_35;
  v54 = v11;
  v12 = sub_19E3247E4(0x656D614E746E6F66, 0xEB0000000079654BLL);
  if ((v13 & 1) == 0)
    goto LABEL_35;
  sub_19E324848(*(_QWORD *)(a1 + 56) + 32 * v12, (uint64_t)&v59);
  if ((swift_dynamicCast() & 1) == 0)
    goto LABEL_35;
  if (!*(_QWORD *)(a1 + 16))
    goto LABEL_25;
  v53 = v58;
  v14 = *v4;
  v15 = v4[1];
  swift_bridgeObjectRetain();
  v16 = sub_19E3247E4(v14, v15);
  if ((v17 & 1) != 0)
  {
    sub_19E324848(*(_QWORD *)(a1 + 56) + 32 * v16, (uint64_t)&v59);
  }
  else
  {
    v59 = 0u;
    v60 = 0u;
  }
  v11 = v54;
  swift_bridgeObjectRelease();
  if (!*((_QWORD *)&v60 + 1))
    goto LABEL_26;
  if ((swift_dynamicCast() & 1) == 0)
    goto LABEL_34;
  if (!*(_QWORD *)(a1 + 16))
    goto LABEL_25;
  v18 = v57;
  v19 = *(_QWORD *)v5;
  v20 = *((_QWORD *)v5 + 1);
  swift_bridgeObjectRetain();
  v21 = sub_19E3247E4(v19, v20);
  if ((v22 & 1) != 0)
  {
    sub_19E324848(*(_QWORD *)(a1 + 56) + 32 * v21, (uint64_t)&v59);
  }
  else
  {
    v59 = 0u;
    v60 = 0u;
  }
  v11 = v54;
  swift_bridgeObjectRelease();
  if (!*((_QWORD *)&v60 + 1))
    goto LABEL_26;
  if ((swift_dynamicCast() & 1) == 0)
    goto LABEL_34;
  if (!*(_QWORD *)(a1 + 16))
  {
LABEL_25:
    v59 = 0u;
    v60 = 0u;
LABEL_26:
    swift_bridgeObjectRelease();
LABEL_27:
    swift_bridgeObjectRelease();
    sub_19E322284((uint64_t)&v59);
LABEL_36:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v36 = *v55;

    type metadata accessor for WallpaperMetadata();
    swift_deallocPartialClassInstance();
    return 0;
  }
  v23 = v57;
  v24 = *(_QWORD *)v7;
  v25 = *((_QWORD *)v7 + 1);
  swift_bridgeObjectRetain();
  v26 = sub_19E3247E4(v24, v25);
  if ((v27 & 1) != 0)
  {
    sub_19E324848(*(_QWORD *)(a1 + 56) + 32 * v26, (uint64_t)&v59);
  }
  else
  {
    v59 = 0u;
    v60 = 0u;
  }
  v11 = v54;
  swift_bridgeObjectRelease();
  if (!*((_QWORD *)&v60 + 1))
    goto LABEL_26;
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_34:
    swift_bridgeObjectRelease();
LABEL_35:
    swift_bridgeObjectRelease();
    goto LABEL_36;
  }
  if (!*(_QWORD *)(a1 + 16))
    goto LABEL_25;
  v52 = v57;
  v28 = *v8;
  v29 = v8[1];
  swift_bridgeObjectRetain();
  v30 = sub_19E3247E4(v28, v29);
  if ((v31 & 1) != 0)
  {
    sub_19E324848(*(_QWORD *)(a1 + 56) + 32 * v30, (uint64_t)&v59);
  }
  else
  {
    v59 = 0u;
    v60 = 0u;
  }
  v11 = v54;
  swift_bridgeObjectRelease();
  if (!*((_QWORD *)&v60 + 1))
    goto LABEL_26;
  if ((swift_dynamicCast() & 1) == 0)
    goto LABEL_34;
  if (!*(_QWORD *)(a1 + 16))
  {
    v59 = 0u;
    v60 = 0u;
LABEL_44:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_27;
  }
  v50 = v57;
  v51 = v58;
  v32 = *(_QWORD *)v6;
  v33 = *((_QWORD *)v6 + 1);
  swift_bridgeObjectRetain();
  v34 = sub_19E3247E4(v32, v33);
  if ((v35 & 1) != 0)
  {
    sub_19E324848(*(_QWORD *)(a1 + 56) + 32 * v34, (uint64_t)&v59);
  }
  else
  {
    v59 = 0u;
    v60 = 0u;
  }
  v11 = v54;
  swift_bridgeObjectRelease();
  if (!*((_QWORD *)&v60 + 1))
    goto LABEL_44;
  sub_19E247E74(&qword_1EE503490);
  if ((swift_dynamicCast() & 1) == 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v11 = v54;
    goto LABEL_36;
  }
  v38 = v57;
  v39 = &v54[OBJC_IVAR___IMWallpaperMetadata_Impl_fontName];
  *(_QWORD *)v39 = v57;
  *((_QWORD *)v39 + 1) = v53;
  *(_QWORD *)&v54[OBJC_IVAR___IMWallpaperMetadata_Impl_fontSize] = v18;
  *(_QWORD *)&v54[OBJC_IVAR___IMWallpaperMetadata_Impl_fontWeight] = v23;
  v40 = (uint64_t *)&v54[OBJC_IVAR___IMWallpaperMetadata_Impl_type];
  *v40 = v50;
  v40[1] = v51;
  v54[OBJC_IVAR___IMWallpaperMetadata_Impl_isVertical] = v52;
  v41 = (objc_class *)type metadata accessor for WallpaperMetadataColor();
  v42 = objc_allocWithZone(v41);
  *(_QWORD *)&v54[OBJC_IVAR___IMWallpaperMetadata_Impl_fontColor] = WallpaperMetadataColor.init(dictionaryRepresentation:)(v38);
  if (*(_QWORD *)(a1 + 16))
  {
    v43 = *v9;
    v44 = v9[1];
    swift_bridgeObjectRetain();
    v45 = sub_19E3247E4(v43, v44);
    if ((v46 & 1) != 0)
    {
      sub_19E324848(*(_QWORD *)(a1 + 56) + 32 * v45, (uint64_t)&v59);
    }
    else
    {
      v59 = 0u;
      v60 = 0u;
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    v59 = 0u;
    v60 = 0u;
  }
  swift_bridgeObjectRelease();
  if (*((_QWORD *)&v60 + 1))
  {
    if ((swift_dynamicCast() & 1) != 0)
    {
      v47 = objc_allocWithZone(v41);
      v48 = WallpaperMetadataColor.init(dictionaryRepresentation:)(v57);
      swift_beginAccess();
      v49 = *v55;
      *v55 = v48;

    }
    else
    {

    }
  }
  else
  {

    sub_19E322284((uint64_t)&v59);
  }
  v56.receiver = v54;
  v56.super_class = (Class)type metadata accessor for WallpaperMetadata();
  return objc_msgSendSuper2(&v56, sel_init);
}

uint64_t sub_19E367B08(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  BOOL v3;
  char v4;
  void **v6;
  void *v7;
  void **v8;
  void *v9;
  id v10;
  id v11;
  char v12;
  void **v13;
  void *v14;
  void **v15;
  void *v16;
  id v17;
  id v18;
  char *v19;
  _BYTE v20[24];
  uint64_t v21;

  v2 = v1;
  sub_19E323318(a1, (uint64_t)v20);
  if (v21)
  {
    type metadata accessor for WallpaperMetadata();
    if ((swift_dynamicCast() & 1) != 0)
    {
      v3 = *(_QWORD *)(v1 + OBJC_IVAR___IMWallpaperMetadata_Impl_fontName) == *(_QWORD *)&v19[OBJC_IVAR___IMWallpaperMetadata_Impl_fontName]
        && *(_QWORD *)(v1 + OBJC_IVAR___IMWallpaperMetadata_Impl_fontName + 8) == *(_QWORD *)&v19[OBJC_IVAR___IMWallpaperMetadata_Impl_fontName
                                                                                                + 8];
      if ((v3 || (sub_19E36FE10() & 1) != 0)
        && *(double *)(v1 + OBJC_IVAR___IMWallpaperMetadata_Impl_fontSize) == *(double *)&v19[OBJC_IVAR___IMWallpaperMetadata_Impl_fontSize]
        && *(double *)(v1 + OBJC_IVAR___IMWallpaperMetadata_Impl_fontWeight) == *(double *)&v19[OBJC_IVAR___IMWallpaperMetadata_Impl_fontWeight]
        && *(unsigned __int8 *)(v1 + OBJC_IVAR___IMWallpaperMetadata_Impl_isVertical) == v19[OBJC_IVAR___IMWallpaperMetadata_Impl_isVertical]
        && (*(_QWORD *)(v1 + OBJC_IVAR___IMWallpaperMetadata_Impl_type) == *(_QWORD *)&v19[OBJC_IVAR___IMWallpaperMetadata_Impl_type]
         && *(_QWORD *)(v1 + OBJC_IVAR___IMWallpaperMetadata_Impl_type + 8) == *(_QWORD *)&v19[OBJC_IVAR___IMWallpaperMetadata_Impl_type
                                                                                             + 8]
         || (sub_19E36FE10() & 1) != 0))
      {
        v6 = (void **)(v1 + OBJC_IVAR___IMWallpaperMetadata_Impl_backgroundColor);
        swift_beginAccess();
        v7 = *v6;
        v8 = (void **)&v19[OBJC_IVAR___IMWallpaperMetadata_Impl_backgroundColor];
        swift_beginAccess();
        v9 = *v8;
        if (v7)
        {
          if (v9)
          {
            type metadata accessor for WallpaperMetadataColor();
            v10 = v9;
            v11 = v7;
            v12 = sub_19E36FBB8();

            if ((v12 & 1) != 0)
              goto LABEL_23;
          }
        }
        else if (!v9)
        {
LABEL_23:
          sub_19E24B854(0, &qword_1EE503750);
          v13 = (void **)(v2 + OBJC_IVAR___IMWallpaperMetadata_Impl_fontColor);
          swift_beginAccess();
          v14 = *v13;
          v15 = (void **)&v19[OBJC_IVAR___IMWallpaperMetadata_Impl_fontColor];
          swift_beginAccess();
          v16 = *v15;
          v17 = v14;
          v18 = v16;
          v4 = sub_19E36FBB8();

          return v4 & 1;
        }
      }

    }
  }
  else
  {
    sub_19E322284((uint64_t)v20);
  }
  v4 = 0;
  return v4 & 1;
}

uint64_t sub_19E367D68()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void **v21;
  void *v22;
  id v23;
  unint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  id *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  id v42;
  unint64_t v43;
  char v44;
  _OWORD v46[2];
  __int128 v47;
  uint64_t v48;

  v1 = v0;
  v2 = *(_QWORD *)(v0 + OBJC_IVAR___IMWallpaperMetadata_Impl_fontNameKey);
  v3 = *(_QWORD *)(v0 + OBJC_IVAR___IMWallpaperMetadata_Impl_fontNameKey + 8);
  v4 = *(_QWORD *)(v0 + OBJC_IVAR___IMWallpaperMetadata_Impl_fontName);
  v5 = *(_QWORD *)(v0 + OBJC_IVAR___IMWallpaperMetadata_Impl_fontName + 8);
  v6 = MEMORY[0x1E0DEA968];
  v48 = MEMORY[0x1E0DEA968];
  *(_QWORD *)&v47 = v4;
  *((_QWORD *)&v47 + 1) = v5;
  sub_19E24B594(&v47, v46);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v7 = MEMORY[0x1E0DEE9E0];
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  sub_19E32FCE4(v46, v2, v3, isUniquelyReferenced_nonNull_native);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v9 = *(_QWORD *)(v1 + OBJC_IVAR___IMWallpaperMetadata_Impl_fontSizeKey);
  v10 = *(_QWORD *)(v1 + OBJC_IVAR___IMWallpaperMetadata_Impl_fontSizeKey + 8);
  v11 = *(_QWORD *)(v1 + OBJC_IVAR___IMWallpaperMetadata_Impl_fontSize);
  v12 = MEMORY[0x1E0DEF040];
  v48 = MEMORY[0x1E0DEF040];
  *(_QWORD *)&v47 = v11;
  sub_19E24B594(&v47, v46);
  swift_bridgeObjectRetain();
  v13 = swift_isUniquelyReferenced_nonNull_native();
  sub_19E32FCE4(v46, v9, v10, v13);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v14 = *(_QWORD *)(v1 + OBJC_IVAR___IMWallpaperMetadata_Impl_fontWeightKey);
  v15 = *(_QWORD *)(v1 + OBJC_IVAR___IMWallpaperMetadata_Impl_fontWeightKey + 8);
  v16 = *(_QWORD *)(v1 + OBJC_IVAR___IMWallpaperMetadata_Impl_fontWeight);
  v48 = v12;
  *(_QWORD *)&v47 = v16;
  sub_19E24B594(&v47, v46);
  swift_bridgeObjectRetain();
  v17 = swift_isUniquelyReferenced_nonNull_native();
  sub_19E32FCE4(v46, v14, v15, v17);
  v18 = v7;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v20 = *(_QWORD *)(v1 + OBJC_IVAR___IMWallpaperMetadata_Impl_fontColorKey);
  v19 = *(_QWORD *)(v1 + OBJC_IVAR___IMWallpaperMetadata_Impl_fontColorKey + 8);
  v21 = (void **)(v1 + OBJC_IVAR___IMWallpaperMetadata_Impl_fontColor);
  swift_beginAccess();
  v22 = *v21;
  swift_bridgeObjectRetain();
  v23 = v22;
  v24 = sub_19E368BBC();

  v25 = sub_19E247E74(&qword_1EE503490);
  v48 = v25;
  *(_QWORD *)&v47 = v24;
  sub_19E24B594(&v47, v46);
  v26 = swift_isUniquelyReferenced_nonNull_native();
  sub_19E32FCE4(v46, v20, v19, v26);
  v27 = v18;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v28 = *(_QWORD *)(v1 + OBJC_IVAR___IMWallpaperMetadata_Impl_isVerticalKey);
  v29 = *(_QWORD *)(v1 + OBJC_IVAR___IMWallpaperMetadata_Impl_isVerticalKey + 8);
  v30 = *(_BYTE *)(v1 + OBJC_IVAR___IMWallpaperMetadata_Impl_isVertical);
  v48 = MEMORY[0x1E0DEAFA0];
  LOBYTE(v47) = v30;
  sub_19E24B594(&v47, v46);
  swift_bridgeObjectRetain();
  v31 = swift_isUniquelyReferenced_nonNull_native();
  sub_19E32FCE4(v46, v28, v29, v31);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v32 = *(_QWORD *)(v1 + OBJC_IVAR___IMWallpaperMetadata_Impl_typeKey);
  v33 = *(_QWORD *)(v1 + OBJC_IVAR___IMWallpaperMetadata_Impl_typeKey + 8);
  v34 = *(_QWORD *)(v1 + OBJC_IVAR___IMWallpaperMetadata_Impl_type);
  v35 = *(_QWORD *)(v1 + OBJC_IVAR___IMWallpaperMetadata_Impl_type + 8);
  v48 = v6;
  *(_QWORD *)&v47 = v34;
  *((_QWORD *)&v47 + 1) = v35;
  sub_19E24B594(&v47, v46);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v36 = swift_isUniquelyReferenced_nonNull_native();
  sub_19E32FCE4(v46, v32, v33, v36);
  v37 = v27;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v38 = (id *)(v1 + OBJC_IVAR___IMWallpaperMetadata_Impl_backgroundColor);
  swift_beginAccess();
  if (*v38)
  {
    v39 = v1 + OBJC_IVAR___IMWallpaperMetadata_Impl_backgroundColorKey;
    v40 = *(_QWORD *)(v1 + OBJC_IVAR___IMWallpaperMetadata_Impl_backgroundColorKey);
    v41 = *(_QWORD *)(v39 + 8);
    v42 = *v38;
    swift_bridgeObjectRetain();
    v43 = sub_19E368BBC();
    v48 = v25;
    *(_QWORD *)&v47 = v43;
    sub_19E24B594(&v47, v46);
    v44 = swift_isUniquelyReferenced_nonNull_native();
    sub_19E32FCE4(v46, v40, v41, v44);

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return v37;
}

id WallpaperMetadata.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void WallpaperMetadata.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id WallpaperMetadata.__deallocating_deinit()
{
  return sub_19E363658(type metadata accessor for WallpaperMetadata);
}

uint64_t static WallpaperMetadataColor.supportsSecureCoding.getter()
{
  return 1;
}

double WallpaperMetadataColor.red.getter()
{
  uint64_t v0;

  return *(double *)(v0 + OBJC_IVAR___IMWallpaperMetadataColor_Impl_red);
}

double WallpaperMetadataColor.green.getter()
{
  uint64_t v0;

  return *(double *)(v0 + OBJC_IVAR___IMWallpaperMetadataColor_Impl_green);
}

double WallpaperMetadataColor.blue.getter()
{
  uint64_t v0;

  return *(double *)(v0 + OBJC_IVAR___IMWallpaperMetadataColor_Impl_blue);
}

double WallpaperMetadataColor.alpha.getter()
{
  uint64_t v0;

  return *(double *)(v0 + OBJC_IVAR___IMWallpaperMetadataColor_Impl_alpha);
}

void sub_19E36831C(void *a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;

  v2 = (void *)sub_19E36F66C();
  v3 = (void *)sub_19E36F864();
  objc_msgSend(a1, sel_encodeObject_forKey_, v2, v3);

  v4 = (void *)sub_19E36F66C();
  v5 = (void *)sub_19E36F864();
  objc_msgSend(a1, sel_encodeObject_forKey_, v4, v5);

  v6 = (void *)sub_19E36F66C();
  v7 = (void *)sub_19E36F864();
  objc_msgSend(a1, sel_encodeObject_forKey_, v6, v7);

  v8 = (void *)sub_19E36F66C();
  v9 = (id)sub_19E36F864();
  objc_msgSend(a1, sel_encodeObject_forKey_, v8, v9);

}

id WallpaperMetadataColor.__allocating_init(red:green:blue:alpha:)(double a1, double a2, double a3, double a4)
{
  objc_class *v4;
  id v9;

  v9 = objc_allocWithZone(v4);
  return WallpaperMetadataColor.init(red:green:blue:alpha:)(a1, a2, a3, a4);
}

id WallpaperMetadataColor.init(red:green:blue:alpha:)(double a1, double a2, double a3, double a4)
{
  char *v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  objc_super v10;

  v5 = &v4[OBJC_IVAR___IMWallpaperMetadataColor_Impl_redKey];
  *(_QWORD *)v5 = 6579570;
  *((_QWORD *)v5 + 1) = 0xE300000000000000;
  v6 = &v4[OBJC_IVAR___IMWallpaperMetadataColor_Impl_greenKey];
  *(_QWORD *)v6 = 0x6E65657267;
  *((_QWORD *)v6 + 1) = 0xE500000000000000;
  v7 = &v4[OBJC_IVAR___IMWallpaperMetadataColor_Impl_blueKey];
  *(_QWORD *)v7 = 1702194274;
  *((_QWORD *)v7 + 1) = 0xE400000000000000;
  v8 = &v4[OBJC_IVAR___IMWallpaperMetadataColor_Impl_alphaKey];
  *(_QWORD *)v8 = 0x6168706C61;
  *((_QWORD *)v8 + 1) = 0xE500000000000000;
  *(double *)&v4[OBJC_IVAR___IMWallpaperMetadataColor_Impl_red] = a1;
  *(double *)&v4[OBJC_IVAR___IMWallpaperMetadataColor_Impl_green] = a2;
  *(double *)&v4[OBJC_IVAR___IMWallpaperMetadataColor_Impl_blue] = a3;
  *(double *)&v4[OBJC_IVAR___IMWallpaperMetadataColor_Impl_alpha] = a4;
  v10.receiver = v4;
  v10.super_class = (Class)type metadata accessor for WallpaperMetadataColor();
  return objc_msgSendSuper2(&v10, sel_init);
}

id WallpaperMetadataColor.__allocating_init(coder:)(void *a1)
{
  objc_class *v1;
  id v3;
  id v4;

  v3 = objc_allocWithZone(v1);
  v4 = sub_19E368DA8();

  return v4;
}

id WallpaperMetadataColor.init(coder:)(void *a1)
{
  id v2;

  v2 = sub_19E368DA8();

  return v2;
}

id WallpaperMetadataColor.init(dictionaryRepresentation:)(uint64_t a1)
{
  char *v1;
  char *v2;
  char *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  char *v9;
  double v10;
  unint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  unint64_t v16;
  char v17;
  double v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  double v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  double v28;
  double v30;
  objc_super v31;
  __int128 v32;
  __int128 v33;

  v2 = v1;
  v4 = &v2[OBJC_IVAR___IMWallpaperMetadataColor_Impl_redKey];
  *(_QWORD *)v4 = 6579570;
  *((_QWORD *)v4 + 1) = 0xE300000000000000;
  v5 = (uint64_t *)&v2[OBJC_IVAR___IMWallpaperMetadataColor_Impl_greenKey];
  *v5 = 0x6E65657267;
  v5[1] = 0xE500000000000000;
  v6 = (uint64_t *)&v2[OBJC_IVAR___IMWallpaperMetadataColor_Impl_blueKey];
  *v6 = 1702194274;
  v6[1] = 0xE400000000000000;
  v7 = (uint64_t *)&v2[OBJC_IVAR___IMWallpaperMetadataColor_Impl_alphaKey];
  *v7 = 0x6168706C61;
  v7[1] = 0xE500000000000000;
  v8 = *(_QWORD *)(a1 + 16);
  v9 = v2;
  v10 = 1.0;
  if (v8)
  {
    v11 = sub_19E3247E4(6579570, 0xE300000000000000);
    if ((v12 & 1) != 0)
    {
      sub_19E324848(*(_QWORD *)(a1 + 56) + 32 * v11, (uint64_t)&v32);
      if (swift_dynamicCast())
        v10 = v30;
    }
  }
  *(double *)&v9[OBJC_IVAR___IMWallpaperMetadataColor_Impl_red] = v10;
  if (!*(_QWORD *)(a1 + 16))
  {
    v32 = 0u;
    v33 = 0u;
LABEL_13:
    sub_19E322284((uint64_t)&v32);
    goto LABEL_14;
  }
  v15 = v5;
  v14 = *v5;
  v13 = v15[1];
  swift_bridgeObjectRetain();
  v16 = sub_19E3247E4(v14, v13);
  if ((v17 & 1) != 0)
  {
    sub_19E324848(*(_QWORD *)(a1 + 56) + 32 * v16, (uint64_t)&v32);
  }
  else
  {
    v32 = 0u;
    v33 = 0u;
  }
  swift_bridgeObjectRelease();
  if (!*((_QWORD *)&v33 + 1))
    goto LABEL_13;
  if (swift_dynamicCast())
  {
    v18 = v30;
    goto LABEL_15;
  }
LABEL_14:
  v18 = 1.0;
LABEL_15:
  *(double *)&v9[OBJC_IVAR___IMWallpaperMetadataColor_Impl_green] = v18;
  if (!*(_QWORD *)(a1 + 16))
  {
    v32 = 0u;
    v33 = 0u;
LABEL_23:
    sub_19E322284((uint64_t)&v32);
    goto LABEL_24;
  }
  v20 = *v6;
  v19 = v6[1];
  swift_bridgeObjectRetain();
  v21 = sub_19E3247E4(v20, v19);
  if ((v22 & 1) != 0)
  {
    sub_19E324848(*(_QWORD *)(a1 + 56) + 32 * v21, (uint64_t)&v32);
  }
  else
  {
    v32 = 0u;
    v33 = 0u;
  }
  swift_bridgeObjectRelease();
  if (!*((_QWORD *)&v33 + 1))
    goto LABEL_23;
  if (swift_dynamicCast())
  {
    v23 = v30;
    goto LABEL_25;
  }
LABEL_24:
  v23 = 1.0;
LABEL_25:
  *(double *)&v9[OBJC_IVAR___IMWallpaperMetadataColor_Impl_blue] = v23;
  if (*(_QWORD *)(a1 + 16))
  {
    v25 = *v7;
    v24 = v7[1];
    swift_bridgeObjectRetain();
    v26 = sub_19E3247E4(v25, v24);
    if ((v27 & 1) != 0)
    {
      sub_19E324848(*(_QWORD *)(a1 + 56) + 32 * v26, (uint64_t)&v32);
    }
    else
    {
      v32 = 0u;
      v33 = 0u;
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    v32 = 0u;
    v33 = 0u;
  }
  swift_bridgeObjectRelease();
  if (!*((_QWORD *)&v33 + 1))
  {
    sub_19E322284((uint64_t)&v32);
    goto LABEL_35;
  }
  if (!swift_dynamicCast())
  {
LABEL_35:
    v28 = 1.0;
    goto LABEL_36;
  }
  v28 = v30;
LABEL_36:
  *(double *)&v9[OBJC_IVAR___IMWallpaperMetadataColor_Impl_alpha] = v28;

  v31.receiver = v9;
  v31.super_class = (Class)type metadata accessor for WallpaperMetadataColor();
  return objc_msgSendSuper2(&v31, sel_init);
}

uint64_t type metadata accessor for WallpaperMetadata()
{
  return objc_opt_self();
}

BOOL sub_19E368A4C(uint64_t a1)
{
  uint64_t v1;
  double v2;
  double v3;
  char *v5;
  _BYTE v6[24];
  uint64_t v7;

  sub_19E323318(a1, (uint64_t)v6);
  if (v7)
  {
    type metadata accessor for WallpaperMetadataColor();
    if ((swift_dynamicCast() & 1) != 0)
    {
      if (*(double *)(v1 + OBJC_IVAR___IMWallpaperMetadataColor_Impl_red) == *(double *)&v5[OBJC_IVAR___IMWallpaperMetadataColor_Impl_red]
        && *(double *)(v1 + OBJC_IVAR___IMWallpaperMetadataColor_Impl_green) == *(double *)&v5[OBJC_IVAR___IMWallpaperMetadataColor_Impl_green]
        && *(double *)(v1 + OBJC_IVAR___IMWallpaperMetadataColor_Impl_blue) == *(double *)&v5[OBJC_IVAR___IMWallpaperMetadataColor_Impl_blue])
      {
        v2 = *(double *)(v1 + OBJC_IVAR___IMWallpaperMetadataColor_Impl_alpha);
        v3 = *(double *)&v5[OBJC_IVAR___IMWallpaperMetadataColor_Impl_alpha];

        return v2 == v3;
      }

    }
  }
  else
  {
    sub_19E322284((uint64_t)v6);
  }
  return 0;
}

uint64_t sub_19E368B30(void *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_OWORD *))
{
  id v6;
  id v7;
  char v8;
  _OWORD v10[2];

  if (a3)
  {
    v6 = a1;
    swift_unknownObjectRetain();
    sub_19E36FC0C();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v10, 0, sizeof(v10));
    v7 = a1;
  }
  v8 = a4(v10);

  sub_19E322284((uint64_t)v10);
  return v8 & 1;
}

unint64_t sub_19E368BBC()
{
  uint64_t v0;
  uint64_t inited;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  sub_19E247E74(&qword_1EE5019B8);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_19E3835A0;
  v2 = *(_QWORD *)(v0 + OBJC_IVAR___IMWallpaperMetadataColor_Impl_redKey + 8);
  *(_QWORD *)(inited + 32) = *(_QWORD *)(v0 + OBJC_IVAR___IMWallpaperMetadataColor_Impl_redKey);
  *(_QWORD *)(inited + 40) = v2;
  v3 = *(_QWORD *)(v0 + OBJC_IVAR___IMWallpaperMetadataColor_Impl_red);
  v4 = MEMORY[0x1E0DEF040];
  *(_QWORD *)(inited + 72) = MEMORY[0x1E0DEF040];
  *(_QWORD *)(inited + 48) = v3;
  v5 = *(_QWORD *)(v0 + OBJC_IVAR___IMWallpaperMetadataColor_Impl_greenKey + 8);
  *(_QWORD *)(inited + 80) = *(_QWORD *)(v0 + OBJC_IVAR___IMWallpaperMetadataColor_Impl_greenKey);
  *(_QWORD *)(inited + 88) = v5;
  v6 = *(_QWORD *)(v0 + OBJC_IVAR___IMWallpaperMetadataColor_Impl_green);
  *(_QWORD *)(inited + 120) = v4;
  *(_QWORD *)(inited + 96) = v6;
  v7 = *(_QWORD *)(v0 + OBJC_IVAR___IMWallpaperMetadataColor_Impl_blueKey + 8);
  *(_QWORD *)(inited + 128) = *(_QWORD *)(v0 + OBJC_IVAR___IMWallpaperMetadataColor_Impl_blueKey);
  *(_QWORD *)(inited + 136) = v7;
  v8 = *(_QWORD *)(v0 + OBJC_IVAR___IMWallpaperMetadataColor_Impl_blue);
  *(_QWORD *)(inited + 168) = v4;
  *(_QWORD *)(inited + 144) = v8;
  v9 = *(_QWORD *)(v0 + OBJC_IVAR___IMWallpaperMetadataColor_Impl_alphaKey + 8);
  *(_QWORD *)(inited + 176) = *(_QWORD *)(v0 + OBJC_IVAR___IMWallpaperMetadataColor_Impl_alphaKey);
  *(_QWORD *)(inited + 184) = v9;
  v10 = *(_QWORD *)(v0 + OBJC_IVAR___IMWallpaperMetadataColor_Impl_alpha);
  *(_QWORD *)(inited + 216) = v4;
  *(_QWORD *)(inited + 192) = v10;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return sub_19E32D864(inited);
}

void WallpaperMetadataColor.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id WallpaperMetadataColor.__deallocating_deinit()
{
  return sub_19E363658(type metadata accessor for WallpaperMetadataColor);
}

id sub_19E368DA8()
{
  char *v0;
  char *v1;
  char *v2;
  char *v3;
  char *v4;
  char *v5;
  void *v6;
  double v7;
  double v8;
  void *v9;
  double v10;
  void *v11;
  double v12;
  void *v13;
  double v14;
  double v15;
  double v16;
  void *v17;
  double v18;
  objc_super v20;

  v1 = &v0[OBJC_IVAR___IMWallpaperMetadataColor_Impl_redKey];
  *(_QWORD *)v1 = 6579570;
  *((_QWORD *)v1 + 1) = 0xE300000000000000;
  v2 = &v0[OBJC_IVAR___IMWallpaperMetadataColor_Impl_greenKey];
  *(_QWORD *)v2 = 0x6E65657267;
  *((_QWORD *)v2 + 1) = 0xE500000000000000;
  v3 = &v0[OBJC_IVAR___IMWallpaperMetadataColor_Impl_blueKey];
  *(_QWORD *)v3 = 1702194274;
  *((_QWORD *)v3 + 1) = 0xE400000000000000;
  v4 = &v0[OBJC_IVAR___IMWallpaperMetadataColor_Impl_alphaKey];
  *(_QWORD *)v4 = 0x6168706C61;
  *((_QWORD *)v4 + 1) = 0xE500000000000000;
  sub_19E24B854(0, (unint64_t *)&qword_1ECFC6A00);
  v5 = v0;
  v6 = (void *)sub_19E36FB88();
  v7 = 1.0;
  v8 = 1.0;
  if (v6)
  {
    v9 = v6;
    objc_msgSend(v6, sel_doubleValue);
    v8 = v10;

  }
  *(double *)&v5[OBJC_IVAR___IMWallpaperMetadataColor_Impl_red] = v8;
  swift_bridgeObjectRetain();
  v11 = (void *)sub_19E36FB88();
  swift_bridgeObjectRelease();
  if (v11)
  {
    objc_msgSend(v11, sel_doubleValue);
    v7 = v12;

  }
  *(double *)&v5[OBJC_IVAR___IMWallpaperMetadataColor_Impl_blue] = v7;
  swift_bridgeObjectRetain();
  v13 = (void *)sub_19E36FB88();
  swift_bridgeObjectRelease();
  v14 = 1.0;
  v15 = 1.0;
  if (v13)
  {
    objc_msgSend(v13, sel_doubleValue);
    v15 = v16;

  }
  *(double *)&v5[OBJC_IVAR___IMWallpaperMetadataColor_Impl_green] = v15;
  swift_bridgeObjectRetain();
  v17 = (void *)sub_19E36FB88();
  swift_bridgeObjectRelease();
  if (v17)
  {
    objc_msgSend(v17, sel_doubleValue);
    v14 = v18;

  }
  *(double *)&v5[OBJC_IVAR___IMWallpaperMetadataColor_Impl_alpha] = v14;

  v20.receiver = v5;
  v20.super_class = (Class)type metadata accessor for WallpaperMetadataColor();
  return objc_msgSendSuper2(&v20, sel_init);
}

id sub_19E368FE4@<X0>(_QWORD *a1@<X0>, void **a2@<X8>)
{
  void **v3;
  void *v4;

  v3 = (void **)(*a1 + OBJC_IVAR___IMWallpaperMetadata_Impl_fontColor);
  swift_beginAccess();
  v4 = *v3;
  *a2 = *v3;
  return v4;
}

id sub_19E369038@<X0>(_QWORD *a1@<X0>, void **a2@<X8>)
{
  void **v3;
  void *v4;

  v3 = (void **)(*a1 + OBJC_IVAR___IMWallpaperMetadata_Impl_backgroundColor);
  swift_beginAccess();
  v4 = *v3;
  *a2 = *v3;
  return v4;
}

uint64_t method lookup function for WallpaperMetadata()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of WallpaperMetadata.fontColor.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xC0))();
}

uint64_t dispatch thunk of WallpaperMetadata.fontColor.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xC8))();
}

uint64_t dispatch thunk of WallpaperMetadata.fontColor.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xD0))();
}

uint64_t dispatch thunk of WallpaperMetadata.backgroundColor.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xD8))();
}

uint64_t dispatch thunk of WallpaperMetadata.backgroundColor.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xE0))();
}

uint64_t dispatch thunk of WallpaperMetadata.backgroundColor.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xE8))();
}

uint64_t dispatch thunk of WallpaperMetadata.encode(with:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xF0))();
}

uint64_t dispatch thunk of WallpaperMetadata.__allocating_init(fontName:fontSize:fontWeight:fontColor:isVertical:type:backgroundColor:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 248))();
}

uint64_t dispatch thunk of WallpaperMetadata.__allocating_init(coder:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 256))();
}

uint64_t dispatch thunk of WallpaperMetadata.__allocating_init(dictionaryRepresentation:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 264))();
}

uint64_t dispatch thunk of WallpaperMetadata.dictionaryRepresentation.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x110))();
}

uint64_t method lookup function for WallpaperMetadataColor()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of WallpaperMetadataColor.encode(with:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x90))();
}

uint64_t dispatch thunk of WallpaperMetadataColor.__allocating_init(red:green:blue:alpha:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 152))();
}

uint64_t dispatch thunk of WallpaperMetadataColor.__allocating_init(coder:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 160))();
}

uint64_t dispatch thunk of WallpaperMetadataColor.__allocating_init(dictionaryRepresentation:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 168))();
}

uint64_t dispatch thunk of WallpaperMetadataColor.dictionaryRepresentation.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xB0))();
}

void __swiftcall IMRichCards.init(dictionary:)(IMRichCards_optional *__return_ptr retstr, Swift::OpaquePointer dictionary)
{
  id v2;
  void *v3;

  v2 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  v3 = (void *)sub_19E36F81C();
  swift_bridgeObjectRelease();
  objc_msgSend(v2, sel_initWithDictionary_, v3);

}

id IMRichCards.init(dictionary:)(uint64_t a1)
{
  void *v1;
  void *v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;
  void *v8;
  id v9;
  __int128 v11;
  __int128 v12;

  v2 = v1;
  v4 = sub_19E36F888();
  if (!*(_QWORD *)(a1 + 16) || (v6 = sub_19E3247E4(v4, v5), (v7 & 1) == 0))
  {
    v11 = 0u;
    v12 = 0u;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_8;
  }
  sub_19E324848(*(_QWORD *)(a1 + 56) + 32 * v6, (uint64_t)&v11);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!*((_QWORD *)&v12 + 1))
  {
LABEL_8:
    sub_19E322284((uint64_t)&v11);
    goto LABEL_9;
  }
  sub_19E247E74(&qword_1EE5019D0);
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_9:
    swift_getObjectType();
    swift_deallocPartialClassInstance();
    return 0;
  }
  sub_19E247E74(&qword_1EE503490);
  v8 = (void *)sub_19E36F954();
  swift_bridgeObjectRelease();
  v9 = objc_msgSend(v2, sel_initWithCardArray_, v8);

  if (v9)
  return v9;
}

id sub_19E3694BC(uint64_t a1)
{
  void *v1;
  void *v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t i;
  id v6;
  void *v7;
  id v8;
  void *v9;
  id v10;
  uint64_t v11;
  unint64_t v13;

  v2 = v1;
  v3 = MEMORY[0x1E0DEE9D8];
  v13 = MEMORY[0x1E0DEE9D8];
  v4 = *(_QWORD *)(a1 + 16);
  if (v4)
  {
    swift_bridgeObjectRetain();
    for (i = 0; i != v4; ++i)
    {
      v6 = objc_allocWithZone((Class)IMRichCard);
      swift_bridgeObjectRetain();
      v7 = (void *)sub_19E36F81C();
      swift_bridgeObjectRelease();
      v8 = objc_msgSend(v6, sel_initWithDictionary_, v7);

      if (v8)
      {
        MEMORY[0x1A1AE7014]();
        if (*(_QWORD *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
          sub_19E36F984();
        sub_19E36F99C();
        sub_19E36F978();
      }
    }
    swift_bridgeObjectRelease();
    v3 = v13;
  }
  swift_bridgeObjectRelease();
  if (v3 >> 62)
  {
    swift_bridgeObjectRetain();
    v11 = sub_19E36FCFC();
    swift_bridgeObjectRelease();
    if (v11)
      goto LABEL_11;
LABEL_13:
    swift_bridgeObjectRelease();
    swift_getObjectType();
    swift_deallocPartialClassInstance();
    return 0;
  }
  if (!*(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10))
    goto LABEL_13;
LABEL_11:
  type metadata accessor for IMRichCard(0);
  v9 = (void *)sub_19E36F954();
  swift_bridgeObjectRelease();
  v10 = objc_msgSend(v2, sel_initWithCards_, v9);

  return v10;
}

unint64_t sub_19E3696FC()
{
  void *v0;
  uint64_t inited;
  uint64_t v2;
  id v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t result;
  uint64_t v7;
  _QWORD *v8;
  id v9;
  void *v10;
  id v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;

  sub_19E247E74(&qword_1EE5019B8);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_19E381BA0;
  *(_QWORD *)(inited + 32) = sub_19E36F888();
  *(_QWORD *)(inited + 40) = v2;
  v3 = objc_msgSend(v0, sel_cards);
  type metadata accessor for IMRichCard(0);
  v4 = sub_19E36F960();

  if (!(v4 >> 62))
  {
    v5 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain();
    v15 = inited;
    if (v5)
      goto LABEL_3;
LABEL_15:
    v8 = (_QWORD *)MEMORY[0x1E0DEE9D8];
LABEL_16:
    swift_bridgeObjectRelease_n();
    *(_QWORD *)(v15 + 72) = sub_19E247E74(&qword_1EE5019D0);
    *(_QWORD *)(v15 + 48) = v8;
    return sub_19E32D864(v15);
  }
  swift_bridgeObjectRetain();
  result = sub_19E36FCFC();
  v5 = result;
  v15 = inited;
  if (!result)
    goto LABEL_15;
LABEL_3:
  if (v5 >= 1)
  {
    v7 = 0;
    v8 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    do
    {
      if ((v4 & 0xC000000000000001) != 0)
        v9 = (id)MEMORY[0x1A1AE7368](v7, v4);
      else
        v9 = *(id *)(v4 + 8 * v7 + 32);
      v10 = v9;
      v11 = objc_msgSend(v9, sel_dictionaryRepresentation);
      v12 = sub_19E36F828();

      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v8 = sub_19E36A7FC(0, v8[2] + 1, 1, v8, (uint64_t *)&unk_1EE5037E0, &qword_1EE503490);
      v14 = v8[2];
      v13 = v8[3];
      if (v14 >= v13 >> 1)
        v8 = sub_19E36A7FC((_QWORD *)(v13 > 1), v14 + 1, 1, v8, (uint64_t *)&unk_1EE5037E0, &qword_1EE503490);
      ++v7;
      v8[2] = v14 + 1;
      v8[v14 + 4] = v12;
    }
    while (v5 != v7);
    goto LABEL_16;
  }
  __break(1u);
  return result;
}

uint64_t sub_19E3699AC()
{
  void *v0;
  id v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  id v7;
  void *v8;
  id v9;
  id v10;
  id v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;

  v1 = objc_msgSend(v0, sel_cards);
  type metadata accessor for IMRichCard(0);
  v2 = sub_19E36F960();

  if (!(v2 >> 62))
  {
    v3 = *(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v3)
      goto LABEL_3;
LABEL_16:
    swift_bridgeObjectRelease();
    return MEMORY[0x1E0DEE9D8];
  }
  swift_bridgeObjectRetain();
  v3 = sub_19E36FCFC();
  swift_bridgeObjectRelease();
  if (!v3)
    goto LABEL_16;
LABEL_3:
  v15 = MEMORY[0x1E0DEE9D8];
  result = sub_19E36A96C(0, v3 & ~(v3 >> 63), 0);
  if ((v3 & 0x8000000000000000) == 0)
  {
    v5 = 0;
    v6 = v15;
    do
    {
      if ((v2 & 0xC000000000000001) != 0)
        v7 = (id)MEMORY[0x1A1AE7368](v5, v2);
      else
        v7 = *(id *)(v2 + 8 * v5 + 32);
      v8 = v7;
      v9 = objc_msgSend(v7, sel_chipList);
      if (v9)
      {
        v10 = v9;
        v11 = objc_msgSend(v9, sel_suggestedReplies);
        type metadata accessor for IMChipReply();
        v12 = sub_19E36F960();

        v8 = v10;
      }
      else
      {
        v12 = MEMORY[0x1E0DEE9D8];
      }

      v14 = *(_QWORD *)(v15 + 16);
      v13 = *(_QWORD *)(v15 + 24);
      if (v14 >= v13 >> 1)
        sub_19E36A96C(v13 > 1, v14 + 1, 1);
      ++v5;
      *(_QWORD *)(v15 + 16) = v14 + 1;
      *(_QWORD *)(v15 + 8 * v14 + 32) = v12;
    }
    while (v3 != v5);
    swift_bridgeObjectRelease();
    return v6;
  }
  __break(1u);
  return result;
}

uint64_t sub_19E369BA8()
{
  void *v0;
  id v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  _QWORD *v6;
  id v7;
  void *v8;
  id v9;
  void *v10;
  id v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;

  v1 = objc_msgSend(v0, sel_cards);
  type metadata accessor for IMRichCard(0);
  v2 = sub_19E36F960();

  if (!(v2 >> 62))
  {
    v3 = *(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain();
    if (v3)
      goto LABEL_3;
LABEL_22:
    v6 = (_QWORD *)MEMORY[0x1E0DEE9D8];
LABEL_23:
    swift_bridgeObjectRelease_n();
    return (uint64_t)v6;
  }
  swift_bridgeObjectRetain();
  result = sub_19E36FCFC();
  v3 = result;
  if (!result)
    goto LABEL_22;
LABEL_3:
  if (v3 >= 1)
  {
    v5 = 0;
    v6 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    do
    {
      if ((v2 & 0xC000000000000001) != 0)
        v7 = (id)MEMORY[0x1A1AE7368](v5, v2);
      else
        v7 = *(id *)(v2 + 8 * v5 + 32);
      v8 = v7;
      v9 = objc_msgSend(v7, sel_chipList);
      if (v9)
      {
        v10 = v9;
        v11 = objc_msgSend(v9, sel_suggestedActions);
        type metadata accessor for IMChipAction();
        v12 = sub_19E36F960();

        if (v12 >> 62)
        {
          swift_bridgeObjectRetain();
          v13 = sub_19E36FCFC();
          swift_bridgeObjectRelease();
        }
        else
        {
          v13 = *(_QWORD *)((v12 & 0xFFFFFFFFFFFFF8) + 0x10);
        }

        if (v13)
        {
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v6 = sub_19E36A7FC(0, v6[2] + 1, 1, v6, &qword_1EE5037C8, &qword_1EE5037C0);
          v15 = v6[2];
          v14 = v6[3];
          if (v15 >= v14 >> 1)
            v6 = sub_19E36A7FC((_QWORD *)(v14 > 1), v15 + 1, 1, v6, &qword_1EE5037C8, &qword_1EE5037C0);
          v6[2] = v15 + 1;
          v6[v15 + 4] = v12;
        }
        else
        {
          swift_bridgeObjectRelease();
        }
      }
      else
      {

      }
      ++v5;
    }
    while (v3 != v5);
    goto LABEL_23;
  }
  __break(1u);
  return result;
}

id sub_19E369E08(void *a1, uint64_t a2, void (*a3)(void), uint64_t *a4)
{
  id v6;
  void *v7;

  v6 = a1;
  a3();

  sub_19E247E74(a4);
  v7 = (void *)sub_19E36F954();
  swift_bridgeObjectRelease();
  return v7;
}

void sub_19E369E68(uint64_t a1)
{
  void *v1;
  id v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t i;
  id v7;
  void *v8;

  v3 = objc_msgSend(v1, sel_cards);
  type metadata accessor for IMRichCard(0);
  v4 = sub_19E36F960();

  if (!(v4 >> 62))
  {
    v5 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v5)
      goto LABEL_3;
LABEL_10:
    swift_bridgeObjectRelease();
    return;
  }
  swift_bridgeObjectRetain();
  v5 = sub_19E36FCFC();
  swift_bridgeObjectRelease();
  if (!v5)
    goto LABEL_10;
LABEL_3:
  if (v5 >= 1)
  {
    for (i = 0; i != v5; ++i)
    {
      if ((v4 & 0xC000000000000001) != 0)
        v7 = (id)MEMORY[0x1A1AE7368](i, v4);
      else
        v7 = *(id *)(v4 + 8 * i + 32);
      v8 = v7;
      objc_msgSend(v7, sel_updateUrlToTransferMap_, a1);

    }
    goto LABEL_10;
  }
  __break(1u);
}

uint64_t sub_19E369FC8()
{
  void *v0;
  id v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t i;
  id v5;
  void *v6;
  uint64_t v7;
  id v8;
  void *v9;
  id v10;
  void *v11;
  uint64_t v12;

  v1 = objc_msgSend(v0, sel_cards);
  type metadata accessor for IMRichCard(0);
  v2 = sub_19E36F960();

  if (v2 >> 62)
    goto LABEL_16;
  v3 = *(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (v3)
  {
    for (i = 4; ; ++i)
    {
      v5 = (v2 & 0xC000000000000001) != 0 ? (id)MEMORY[0x1A1AE7368](i - 4, v2) : *(id *)(v2 + 8 * i);
      v6 = v5;
      v7 = i - 3;
      if (__OFADD__(i - 4, 1))
        break;
      v8 = objc_msgSend(v5, sel_title);
      if (v8)
      {
        v9 = v8;
        swift_bridgeObjectRelease();

        v10 = objc_msgSend(v6, sel_title);
        if (v10)
        {
          v11 = v10;
          v12 = sub_19E36F888();

          return v12;
        }

        return 0;
      }

      if (v7 == v3)
      {
        swift_bridgeObjectRelease();
        return 0;
      }
    }
    __break(1u);
LABEL_16:
    swift_bridgeObjectRetain();
    v3 = sub_19E36FCFC();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t IMRichCards.isEqual(_:)(uint64_t a1)
{
  void *v1;
  id v2;
  unint64_t v3;
  id v4;
  unint64_t v5;
  unsigned __int8 v6;
  void *v8;
  _BYTE v9[24];
  uint64_t v10;

  sub_19E323318(a1, (uint64_t)v9);
  if (!v10)
  {
    sub_19E322284((uint64_t)v9);
    goto LABEL_5;
  }
  type metadata accessor for IMRichCards();
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_5:
    v6 = 0;
    return v6 & 1;
  }
  v2 = objc_msgSend(v1, sel_cards);
  type metadata accessor for IMRichCard(0);
  v3 = sub_19E36F960();

  v4 = objc_msgSend(v8, sel_cards);
  v5 = sub_19E36F960();

  v6 = sub_19E34A580(v3, v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v6 & 1;
}

void __swiftcall IMRichCards.init()(IMRichCards *__return_ptr retstr)
{
  objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_init);
}

void IMRichCards.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

_QWORD *sub_19E36A3B4(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_19E36A7FC(a1, a2, a3, a4, (uint64_t *)&unk_1EE5037E0, &qword_1EE503490);
}

_QWORD *sub_19E36A3C8(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      sub_19E247E74(&qword_1EE502C78);
      v10 = (_QWORD *)swift_allocObject();
      v11 = j__malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 17;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v13 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4])
          memmove(v13, a4 + 4, 16 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_19E36AC6C(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_19E36A4D4(char a1, int64_t a2, char a3, unint64_t a4)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  size_t v14;
  BOOL v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *(_QWORD *)(a4 + 24);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_29;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *(_QWORD *)(a4 + 16);
  if (v7 <= v8)
    v9 = *(_QWORD *)(a4 + 16);
  else
    v9 = v7;
  if (!v9)
  {
    v13 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    goto LABEL_19;
  }
  sub_19E247E74(&qword_1EE502F20);
  v10 = *(_QWORD *)(sub_19E36F4F8() - 8);
  v11 = *(_QWORD *)(v10 + 72);
  v12 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  v13 = (_QWORD *)swift_allocObject();
  v14 = j__malloc_size(v13);
  if (!v11 || (v14 - v12 == 0x8000000000000000 ? (v15 = v11 == -1) : (v15 = 0), v15))
  {
LABEL_29:
    result = sub_19E36FCE4();
    __break(1u);
    return result;
  }
  v13[2] = v8;
  v13[3] = 2 * ((uint64_t)(v14 - v12) / v11);
LABEL_19:
  v16 = *(_QWORD *)(sub_19E36F4F8() - 8);
  v17 = (*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
  v18 = (unint64_t)v13 + v17;
  if ((a1 & 1) != 0)
  {
    if ((unint64_t)v13 < a4 || v18 >= a4 + v17 + *(_QWORD *)(v16 + 72) * v8)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v13 != (_QWORD *)a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    sub_19E36AD5C(0, v8, v18, a4);
  }
  swift_bridgeObjectRelease();
  return (uint64_t)v13;
}

_QWORD *sub_19E36A6DC(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      sub_19E247E74(&qword_1EE500598);
      v10 = (_QWORD *)swift_allocObject();
      v11 = j__malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 40);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[5 * v8 + 4])
          memmove(v12, a4 + 4, 40 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v12 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_19E36AE74(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

_QWORD *sub_19E36A7FC(_QWORD *result, int64_t a2, char a3, _QWORD *a4, uint64_t *a5, uint64_t *a6)
{
  char v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  int64_t v14;
  uint64_t v15;
  _QWORD *v16;

  v8 = (char)result;
  if ((a3 & 1) == 0)
  {
    v10 = a2;
    goto LABEL_8;
  }
  v9 = a4[3];
  v10 = v9 >> 1;
  if ((uint64_t)(v9 >> 1) >= a2)
    goto LABEL_8;
  if (v10 + 0x4000000000000000 >= 0)
  {
    v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v10 = a2;
LABEL_8:
    v11 = a4[2];
    if (v10 <= v11)
      v12 = a4[2];
    else
      v12 = v10;
    if (v12)
    {
      sub_19E247E74(a5);
      v13 = (_QWORD *)swift_allocObject();
      v14 = j__malloc_size(v13);
      v15 = v14 - 32;
      if (v14 < 32)
        v15 = v14 - 25;
      v13[2] = v11;
      v13[3] = 2 * (v15 >> 3);
      v16 = v13 + 4;
      if ((v8 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v13 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v16 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v13 != a4 || v16 >= &a4[v11 + 4])
          memmove(v16, a4 + 4, 8 * v11);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_19E36AF68(0, v11, (unint64_t)v16, (uint64_t)a4, a6);
LABEL_24:
    swift_bridgeObjectRelease();
    return v13;
  }
  __break(1u);
  return result;
}

unint64_t type metadata accessor for IMRichCards()
{
  unint64_t result;

  result = qword_1EE5037B8;
  if (!qword_1EE5037B8)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1EE5037B8);
  }
  return result;
}

uint64_t sub_19E36A950(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_19E36A988(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_19E36A96C(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_19E36AAE4(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t sub_19E36A988(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    sub_19E247E74((uint64_t *)&unk_1ECFC6AA0);
    v10 = (char *)swift_allocObject();
    v11 = j__malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 25;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 3);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8])
      memmove(v13, v14, 8 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[8 * v8] || v13 >= &v14[8 * v8])
  {
    memcpy(v13, v14, 8 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = sub_19E36FD2C();
  __break(1u);
  return result;
}

uint64_t sub_19E36AAE4(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    sub_19E247E74(&qword_1EE5037D8);
    v10 = (_QWORD *)swift_allocObject();
    v11 = j__malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 25;
    v10[2] = v8;
    v10[3] = 2 * (v12 >> 3);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  v13 = (unint64_t)(v10 + 4);
  v14 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= v14 + 8 * v8)
      memmove(v10 + 4, a4 + 4, 8 * v8);
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v14 >= v13 + 8 * v8 || v13 >= v14 + 8 * v8)
  {
    sub_19E247E74(&qword_1EE5037D0);
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = sub_19E36FD2C();
  __break(1u);
  return result;
}

uint64_t sub_19E36AC6C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 16 * a1 + 32;
    v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = sub_19E36FD2C();
  __break(1u);
  return result;
}

uint64_t sub_19E36AD5C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v8 = *(_QWORD *)(sub_19E36F4F8() - 8);
    v9 = *(unsigned __int8 *)(v8 + 80);
    v10 = *(_QWORD *)(v8 + 72);
    v11 = a4 + ((v9 + 32) & ~v9) + v10 * a1;
    v12 = v10 * v4;
    v13 = a3 + v12;
    v14 = v11 + v12;
    if (v11 >= v13 || v14 <= a3)
    {
      swift_arrayInitWithCopy();
      return v13;
    }
  }
  result = sub_19E36FD2C();
  __break(1u);
  return result;
}

uint64_t sub_19E36AE74(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 40 * a1 + 32;
    v6 = a3 + 40 * v4;
    if (v5 >= v6 || v5 + 40 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = sub_19E36FD2C();
  __break(1u);
  return result;
}

uint64_t sub_19E36AF68(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;

  v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v5 & 0x8000000000000000) == 0)
  {
    v6 = a4 + 8 * a1 + 32;
    v7 = a3 + 8 * v5;
    if (v6 >= v7 || v6 + 8 * v5 <= a3)
    {
      sub_19E247E74(a5);
      swift_arrayInitWithCopy();
      return v7;
    }
  }
  result = sub_19E36FD2C();
  __break(1u);
  return result;
}

uint64_t dispatch thunk of PluginSettingsProviding.initiallyDisabledHashtagImages.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of PluginSettingsProviding.initiallyDisabledHashtagImages.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

uint64_t dispatch thunk of PluginSettingsProviding.initiallyDisabledHashtagImages.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

void sub_19E36B084()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_19E2593D8();
  sub_19E2593B0(&dword_19E239000, v0, v1, "Error determining if handle is already invited: %@", v2, v3, v4, v5, v6);
  sub_19E2593D0();
}

void sub_19E36B0E4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_19E2593D8();
  sub_19E2593B0(&dword_19E239000, v0, v1, "Error fetching invitability. Not repairing invalid validation token. Error: %@", v2, v3, v4, v5, v6);
  sub_19E2593D0();
}

void sub_19E36B144()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_19E2593D8();
  sub_19E2593B0(&dword_19E239000, v0, v1, "Error fetching if the user is already invited. Not repairing invalid validation token. Error: %@", v2, v3, v4, v5, v6);
  sub_19E2593D0();
}

void sub_19E36B1A4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_19E2593EC();
  sub_19E2593C0(&dword_19E239000, v0, v1, "Faild sharing focus status following failed validation of token.", v2, v3, v4, v5, v6);
  sub_19E2593E4();
}

void sub_19E36B1D0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_19E2593D8();
  sub_19E2593B0(&dword_19E239000, v0, v1, "Error sharing focus status following failed validation of token. Error: %@", v2, v3, v4, v5, v6);
  sub_19E2593D0();
}

void sub_19E36B230()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_19E2593EC();
  sub_19E2593C0(&dword_19E239000, v0, v1, "Failed manually sharing focus status.", v2, v3, v4, v5, v6);
  sub_19E2593E4();
}

void sub_19E36B25C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_19E2593D8();
  sub_19E2593B0(&dword_19E239000, v0, v1, "Error manually sharing focus status. Error: %@", v2, v3, v4, v5, v6);
  sub_19E2593D0();
}

void sub_19E36B2BC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_19E2593EC();
  sub_19E2593C0(&dword_19E239000, v0, v1, "Unable to create DNDGlobalConfigurationService due to weak link class being unavailable", v2, v3, v4, v5, v6);
  sub_19E2593E4();
}

void sub_19E36B2E8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_19E2593EC();
  sub_19E2593C0(&dword_19E239000, v0, v1, "Unable to create DNDGlobalConfigurationService", v2, v3, v4, v5, v6);
  sub_19E2593E4();
}

void sub_19E36B314()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_19E2593D8();
  sub_19E2593B0(&dword_19E239000, v0, v1, "Error manually unsharing focus status. Error: %@", v2, v3, v4, v5, v6);
  sub_19E2593D0();
}

void sub_19E36B374(uint64_t a1, uint64_t a2, NSObject *a3)
{
  void *v6;
  void *v7;
  int v8;
  void *v9;
  __int16 v10;
  void *v11;
  __int16 v12;
  uint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  objc_msgSend(*(id *)(a1 + 32), "handleString");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 40), "handleString");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = 138412802;
  v9 = v6;
  v10 = 2112;
  v11 = v7;
  v12 = 2112;
  v13 = a2;
  _os_log_error_impl(&dword_19E239000, a3, OS_LOG_TYPE_ERROR, "Invitation of handle %@ from handle %@ encountered error %@", (uint8_t *)&v8, 0x20u);

}

void sub_19E36B448()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_19E2593D8();
  sub_19E2593B0(&dword_19E239000, v0, v1, "Error checking invitability: %@", v2, v3, v4, v5, v6);
  sub_19E2593D0();
}

void sub_19E36B4A8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_19E2593EC();
  sub_19E2593C0(&dword_19E239000, v0, v1, "Unable to generate invitation payload due to weak link class being unavailable", v2, v3, v4, v5, v6);
  sub_19E2593E4();
}

void sub_19E36B4D4()
{
  uint64_t v0;
  os_log_t v1;

  sub_19E25940C();
  sub_19E2593F8(&dword_19E239000, v0, v1, "Error fetching silenced modes for contact handle: %@. Error: %@");
  sub_19E2593D0();
}

void sub_19E36B534()
{
  uint64_t v0;
  os_log_t v1;

  sub_19E25940C();
  sub_19E2593F8(&dword_19E239000, v0, v1, "Error fetching allowed modes for contact handle: %@. Error: %@");
  sub_19E2593D0();
}

void sub_19E36B594()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_19E2593EC();
  sub_19E2593C0(&dword_19E239000, v0, v1, "Unable to create DNDModeConfigurationService due to weak link class being unavailable", v2, v3, v4, v5, v6);
  sub_19E2593E4();
}

void sub_19E36B5C0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_19E2593EC();
  sub_19E2593C0(&dword_19E239000, v0, v1, "Unable to create DNDModeConfigurationService", v2, v3, v4, v5, v6);
  sub_19E2593E4();
}

void sub_19E36B5EC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_19E2593D8();
  sub_19E2593B0(&dword_19E239000, v0, v1, "Failed to republish status following an invitation. Error: %@", v2, v3, v4, v5, v6);
  sub_19E2593D0();
}

void sub_19E36B64C(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_19E2593C0(&dword_19E239000, a1, a3, "nil fileSize passed to IMFileSizeForItemAtPath", a5, a6, a7, a8, 0);
}

void sub_19E36B680(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_19E2593C0(&dword_19E239000, a1, a3, "nil path passed to IMFileSizeForItemAtPath", a5, a6, a7, a8, 0);
}

void sub_19E36B6B4(uint64_t a1, NSObject *a2)
{
  int v2;
  uint64_t v3;
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  v2 = 138412290;
  v3 = a1;
  _os_log_error_impl(&dword_19E239000, a2, OS_LOG_TYPE_ERROR, "Failed to get fileSystemRepresentation for path: %@", (uint8_t *)&v2, 0xCu);
}

void sub_19E36B728(int a1, uint64_t a2, NSObject *a3)
{
  _DWORD v5[2];
  __int16 v6;
  char *v7;
  __int16 v8;
  uint64_t v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v5[0] = 67109634;
  v5[1] = a1;
  v6 = 2080;
  v7 = strerror(a1);
  v8 = 2112;
  v9 = a2;
  _os_log_error_impl(&dword_19E239000, a3, OS_LOG_TYPE_ERROR, "sys/stat returned error %d (%s) while getting info for file at path: %@", (uint8_t *)v5, 0x1Cu);
}

uint64_t sub_19E36B7D8()
{
  uint64_t v0;

  dlerror();
  v0 = abort_report_np();
  return sub_19E36B7F8(v0);
}

void sub_19E36B7F8(uint64_t a1, uint64_t a2, NSObject *a3)
{
  void *v5;
  void *v6;
  void *v7;
  objc_class *v8;
  void *v9;
  uint8_t buf[4];
  void *v11;
  __int16 v12;
  void *v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v5 = (void *)MEMORY[0x1E0CB3940];
  IMStringFromAssociatedMessageType(a1);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "stringWithFormat:", CFSTR("%ld (%@)"), a1, v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  v8 = (objc_class *)objc_opt_class();
  NSStringFromClass(v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 138412546;
  v11 = v7;
  v12 = 2112;
  v13 = v9;
  _os_log_error_impl(&dword_19E239000, a3, OS_LOG_TYPE_ERROR, "invalid associated message type: %@ for %@", buf, 0x16u);

}

void sub_19E36B8F0(const char *a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint8_t v8;

  NSStringFromSelector(a1);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  sub_19E2593D8();
  sub_19E268400(&dword_19E239000, v2, v3, "actionStringFormat is a required override in %@", v4, v5, v6, v7, v8);

  sub_19E268414();
}

void sub_19E36B968(const char *a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint8_t v8;

  NSStringFromSelector(a1);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  sub_19E2593D8();
  sub_19E268400(&dword_19E239000, v2, v3, "reactionString is a required override in %@", v4, v5, v6, v7, v8);

  sub_19E268414();
}

void sub_19E36B9E0(const char *a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint8_t v8;

  NSStringFromSelector(a1);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  sub_19E2593D8();
  sub_19E268400(&dword_19E239000, v2, v3, "adaptiveImageGlyphForPreviewString is a required override in %@", v4, v5, v6, v7, v8);

  sub_19E268414();
}

void sub_19E36BA58(const char *a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint8_t v8;

  NSStringFromSelector(a1);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  sub_19E2593D8();
  sub_19E268400(&dword_19E239000, v2, v3, "emojiReactionForPreviewString is a required override in %@", v4, v5, v6, v7, v8);

  sub_19E268414();
}

void sub_19E36BAD0(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_19E2593C0(&dword_19E239000, a1, a3, "Message is an attachment character with no associated file transfer", a5, a6, a7, a8, 0);
  sub_19E2593E4();
}

void sub_19E36BB00(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_19E2593C0(&dword_19E239000, a1, a3, "Attributed associated message text contains only a file transfer, and it is not an adaptive image glyph.", a5, a6, a7, a8, 0);
  sub_19E2593E4();
}

void sub_19E36BB30(const char *a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint8_t v8;

  NSStringFromSelector(a1);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  sub_19E2593D8();
  sub_19E268400(&dword_19E239000, v2, v3, "MessageSummaryInfo is nil in %@", v4, v5, v6, v7, v8);

  sub_19E268414();
}

void sub_19E36BBA8(const char *a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint8_t v8;

  NSStringFromSelector(a1);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  sub_19E2593D8();
  sub_19E268400(&dword_19E239000, v2, v3, "Tapback actionFormat is nil in %@", v4, v5, v6, v7, v8);

  sub_19E268414();
}

void sub_19E36BC20(const char *a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint8_t v8;

  NSStringFromSelector(a1);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  sub_19E2593D8();
  sub_19E268400(&dword_19E239000, v2, v3, "actionStringFormat is nil in %@", v4, v5, v6, v7, v8);

  sub_19E268414();
}

void sub_19E36BC98(os_log_t log)
{
  uint8_t v1[16];

  *(_WORD *)v1 = 0;
  _os_log_fault_impl(&dword_19E239000, log, OS_LOG_TYPE_FAULT, "Backward compatibility messages never include sender name.", v1, 2u);
  sub_19E2593E4();
}

void sub_19E36BCD4(os_log_t log)
{
  uint8_t v1[16];

  *(_WORD *)v1 = 0;
  _os_log_error_impl(&dword_19E239000, log, OS_LOG_TYPE_ERROR, "Unexpected type found when decoding attributed string.", v1, 2u);
}

void sub_19E36BD14(uint64_t a1, NSObject *a2)
{
  int v2;
  uint64_t v3;
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  v2 = 138412290;
  v3 = a1;
  _os_log_error_impl(&dword_19E239000, a2, OS_LOG_TYPE_ERROR, "Exception encoding attributed string. Exception: %@", (uint8_t *)&v2, 0xCu);
}

void sub_19E36BD88()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_19E2593D8();
  sub_19E2593B0(&dword_19E239000, v0, v1, "Could not find message part matching message part index: %ld", v2, v3, v4, v5, v6);
  sub_19E2593D0();
}

void sub_19E36BDE8(void *a1, uint8_t *buf, os_log_t log)
{
  *(_DWORD *)buf = 138412290;
  *(_QWORD *)(buf + 4) = a1;
  _os_log_error_impl(&dword_19E239000, log, OS_LOG_TYPE_ERROR, "Could not find message part matching message part range: %@", buf, 0xCu);

}

void sub_19E36BE3C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_19E2593D8();
  sub_19E2593B0(&dword_19E239000, v0, v1, "Message part index %ld not found in message, cannot add message part, bailing", v2, v3, v4, v5, v6);
  sub_19E2593D0();
}

void sub_19E36BE9C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_19E2593D8();
  sub_19E2593B0(&dword_19E239000, v0, v1, "Message part index %ld not found in message, cannot replace message part, bailing", v2, v3, v4, v5, v6);
  sub_19E2593D0();
}

void sub_19E36BEFC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_19E2593D8();
  sub_19E2593B0(&dword_19E239000, v0, v1, "Message part index %ld not found in message, cannot remove message part, bailing", v2, v3, v4, v5, v6);
  sub_19E2593D0();
}

void sub_19E36BF5C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_19E2593D8();
  sub_19E2593B0(&dword_19E239000, v0, v1, "Message part index %ld found in edited message, but not found in previous version of this message, marking part as edited", v2, v3, v4, v5, v6);
  sub_19E2593D0();
}

void sub_19E36BFBC()
{
  os_log_t v0;
  uint8_t v1[24];
  uint64_t v2;

  v2 = *MEMORY[0x1E0C80C00];
  sub_19E2593D8();
  _os_log_fault_impl(&dword_19E239000, v0, OS_LOG_TYPE_FAULT, "IMMessagePartDescriptor for index %ld not found in message, but was found when enumerating indexes", v1, 0xCu);
  sub_19E2593D0();
}

void sub_19E36C028(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_19E2593C0(&dword_19E239000, a1, a3, "BlastDoor's getMetadataForEmojiImageWithFileURL returned nil.", a5, a6, a7, a8, 0);
  sub_19E2593E4();
}

void sub_19E36C058(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_19E2593C0(&dword_19E239000, a1, a3, "Not generating emoji image for heic without a content identifier", a5, a6, a7, a8, 0);
  sub_19E2593E4();
}

void sub_19E36C088(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_19E2593C0(&dword_19E239000, a1, a3, "Timed out waiting for BlastDoor's getMetadataForEmojiImageWithFileURL.", a5, a6, a7, a8, 0);
  sub_19E2593E4();
}

void sub_19E36C0B8(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_19E2593C0(&dword_19E239000, a1, a3, "Could not create pronouns from dictionary", a5, a6, a7, a8, 0);
}

void sub_19E36C0EC(void *a1, NSObject *a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v3 = 134217984;
  v4 = objc_msgSend(a1, "associatedMessageType");
  _os_log_error_impl(&dword_19E239000, a2, OS_LOG_TYPE_ERROR, "Unexpected associated message type actionString: %lld", (uint8_t *)&v3, 0xCu);
}

void sub_19E36C174(uint64_t a1, uint64_t *a2, uint8_t *buf, os_log_t log)
{
  uint64_t v4;

  v4 = *a2;
  *(_DWORD *)buf = 138412546;
  *(_QWORD *)(buf + 4) = a1;
  *((_WORD *)buf + 6) = 2112;
  *(_QWORD *)(buf + 14) = v4;
  _os_log_error_impl(&dword_19E239000, log, OS_LOG_TYPE_ERROR, "Unable to detect screenshot for asset at URL: %@ - error: %@", buf, 0x16u);
}

void sub_19E36C1CC(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_19E2593B0(&dword_19E239000, a2, a3, "Received error from combined balloon plugin unpacking: %@", a5, a6, a7, a8, 2u);
}

void sub_19E36C238(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_19E2593B0(&dword_19E239000, a2, a3, "Received error from combined balloon plugin unpacking: %@", a5, a6, a7, a8, 2u);
}

void sub_19E36C2A0(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_19E2593C0(&dword_19E239000, a1, a3, "Invalid input to encode message part GUID", a5, a6, a7, a8, 0);
}

void sub_19E36C2D4(os_log_t log)
{
  uint8_t v1[16];

  *(_WORD *)v1 = 0;
  _os_log_error_impl(&dword_19E239000, log, OS_LOG_TYPE_ERROR, "Emoji string is nil", v1, 2u);
}

void sub_19E36C314(uint64_t a1, NSObject *a2)
{
  int v2;
  uint64_t v3;
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  v2 = 138412290;
  v3 = a1;
  _os_log_error_impl(&dword_19E239000, a2, OS_LOG_TYPE_ERROR, "No emoji found in emojiString: %@", (uint8_t *)&v2, 0xCu);
}

void sub_19E36C388(uint8_t *a1, _BYTE *a2, NSObject *a3)
{
  *a1 = 0;
  *a2 = 0;
  sub_19E299F24(&dword_19E239000, (int)a2, a3, "Could not convert dictionary to historical content. Skipping.", a1);
}

void sub_19E36C3B8(uint8_t *a1, _BYTE *a2, NSObject *a3)
{
  *a1 = 0;
  *a2 = 0;
  sub_19E299F24(&dword_19E239000, (int)a2, a3, "Found non-dictionary historical content in message part array", a1);
}

void sub_19E36C3E8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_19E2593EC();
  sub_19E2593C0(&dword_19E239000, v0, v1, "Nil dictionary for encoding!", v2, v3, v4, v5, v6);
  sub_19E2593E4();
}

void sub_19E36C414()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_19E2593EC();
  sub_19E2593C0(&dword_19E239000, v0, v1, "Unavailable init called on IMSyndicationAction", v2, v3, v4, v5, v6);
  sub_19E2593E4();
}

void sub_19E36C440()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_19E2593EC();
  sub_19E2593C0(&dword_19E239000, v0, v1, "Subclasses must override initWithDictionary", v2, v3, v4, v5, v6);
  sub_19E2593E4();
}

void sub_19E36C46C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_19E2593EC();
  sub_19E2593C0(&dword_19E239000, v0, v1, "Chat guid is required", v2, v3, v4, v5, v6);
  sub_19E2593E4();
}

void sub_19E36C498()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_19E2593EC();
  sub_19E2593C0(&dword_19E239000, v0, v1, "Syndication start date is required", v2, v3, v4, v5, v6);
  sub_19E2593E4();
}

void sub_19E36C4C4(unsigned __int8 a1, NSObject *a2)
{
  int v2;
  uint64_t v3;
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  v2 = 134217984;
  v3 = a1;
  _os_log_error_impl(&dword_19E239000, a2, OS_LOG_TYPE_ERROR, "Invalid Syndication action type: %ld", (uint8_t *)&v2, 0xCu);
}

void sub_19E36C53C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_19E2593EC();
  sub_19E2593C0(&dword_19E239000, v0, v1, "initWithCoder must be overriden by subclass", v2, v3, v4, v5, v6);
  sub_19E2593E4();
}

void sub_19E36C568()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_19E2593EC();
  sub_19E2593C0(&dword_19E239000, v0, v1, "copyWithZone must be overriden by subclass", v2, v3, v4, v5, v6);
  sub_19E2593E4();
}

void sub_19E36C594(uint64_t a1, NSObject *a2)
{
  int v2;
  uint64_t v3;
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  v2 = 138412290;
  v3 = a1;
  _os_log_error_impl(&dword_19E239000, a2, OS_LOG_TYPE_ERROR, "Sender identity: %@", (uint8_t *)&v2, 0xCu);
}

void sub_19E36C608(uint64_t a1, uint64_t a2, os_log_t log)
{
  int v3;
  uint64_t v4;
  __int16 v5;
  uint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v3 = 138412546;
  v4 = a1;
  v5 = 2112;
  v6 = a2;
  _os_log_error_impl(&dword_19E239000, log, OS_LOG_TYPE_ERROR, "Could not get a subscription short name for sim ID: %@ - accountUUID: %@", (uint8_t *)&v3, 0x16u);
}

void sub_19E36C68C()
{
  uint64_t v0;
  os_log_t v1;
  int v2;
  int v3;

  sub_19E29E9F4();
  sub_19E29EA10(&dword_19E239000, v0, v1, "Invalid SyndicationAction version. Got: %d, expected: %d", v2, v3);
  sub_19E2593D0();
}

void sub_19E36C6EC(unsigned __int8 a1, NSObject *a2)
{
  int v2;
  uint64_t v3;
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  v2 = 134217984;
  v3 = a1;
  _os_log_error_impl(&dword_19E239000, a2, OS_LOG_TYPE_ERROR, "Deserialized invalid syndication action type: %ld", (uint8_t *)&v2, 0xCu);
  sub_19E2593D0();
}

void sub_19E36C760(uint64_t a1, uint64_t a2, NSObject *a3)
{
  objc_class *v5;
  void *v6;
  int v7;
  uint64_t v8;
  __int16 v9;
  void *v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v5 = (objc_class *)objc_opt_class();
  NSStringFromClass(v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = 138412546;
  v8 = a1;
  v9 = 2112;
  v10 = v6;
  _os_log_error_impl(&dword_19E239000, a3, OS_LOG_TYPE_ERROR, "No standard handler for command: '%@' in %@. Installing NOOP lockdown handler.", (uint8_t *)&v7, 0x16u);

}

void sub_19E36C814()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_19E2593D8();
  sub_19E2593B0(&dword_19E239000, v0, v1, "Got error while extracting call registration display status - %@", v2, v3, v4, v5, v6);
  sub_19E2593D0();
}

void sub_19E36C874()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_19E2593D8();
  sub_19E2593B0(&dword_19E239000, v0, v1, "Got error while extracting call capabilities - %@", v2, v3, v4, v5, v6);
  sub_19E2593D0();
}

void sub_19E36C8D4(os_log_t log)
{
  uint8_t v1[16];

  *(_WORD *)v1 = 0;
  _os_log_error_impl(&dword_19E239000, log, OS_LOG_TYPE_ERROR, "Got empty ISO country code", v1, 2u);
}

void sub_19E36C914()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_19E2593D8();
  sub_19E2593B0(&dword_19E239000, v0, v1, "Got error while extracting ISO country code - %@", v2, v3, v4, v5, v6);
  sub_19E2593D0();
}

void sub_19E36C974()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_19E2593D8();
  sub_19E2593B0(&dword_19E239000, v0, v1, "Got error while extracting country code - %@", v2, v3, v4, v5, v6);
  sub_19E2593D0();
}

void sub_19E36C9D4()
{
  uint64_t v0;
  os_log_t v1;
  uint8_t v2[12];
  __int16 v3;
  uint64_t v4;
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  sub_19E2593D8();
  v3 = 2112;
  v4 = v0;
  _os_log_error_impl(&dword_19E239000, v1, OS_LOG_TYPE_ERROR, "Failed to look up RCS configuration for subscription context %@: %@", v2, 0x16u);
  sub_19E2593D0();
}

void sub_19E36CA50(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_19E2593C0(&dword_19E239000, a1, a3, "Failure registering for dnd state updates.", a5, a6, a7, a8, 0);
}

void sub_19E36CA84(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_19E2593B0(&dword_19E239000, a2, a3, "Error registering for dnd state updates. Error: %@", a5, a6, a7, a8, 2u);
}

void sub_19E36CAEC(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_19E2593C0(&dword_19E239000, a1, a3, "DND state is nil", a5, a6, a7, a8, 0);
}

void sub_19E36CB20(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_19E2593B0(&dword_19E239000, a2, a3, "Error querying DND state: %@", a5, a6, a7, a8, 2u);
}

uint64_t sub_19E36CB88()
{
  NSObject *v0;

  v0 = abort_report_np();
  return sub_19E36CBAC(v0);
}

void sub_19E36CBAC(os_log_t log)
{
  int v1;
  const char *v2;
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  v1 = 136315138;
  v2 = "-[IMMessagePartSyndicationAssetDescriptor syndicationForPartIndex:asset:]";
  _os_log_error_impl(&dword_19E239000, log, OS_LOG_TYPE_ERROR, "%s No asset syndications present for descriptor", (uint8_t *)&v1, 0xCu);
  sub_19E2593D0();
}

void sub_19E36CC28(int a1, NSObject *a2)
{
  int v2;
  const char *v3;
  __int16 v4;
  int v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v2 = 136315394;
  v3 = "-[IMMessagePartSyndicationAssetDescriptor syndicationForPartIndex:asset:]";
  v4 = 1024;
  v5 = a1;
  _os_log_error_impl(&dword_19E239000, a2, OS_LOG_TYPE_ERROR, "%s No asset info present for asset %i", (uint8_t *)&v2, 0x12u);
  sub_19E2593D0();
}

void sub_19E36CCAC(uint64_t a1, int a2, os_log_t log)
{
  int v3;
  const char *v4;
  __int16 v5;
  uint64_t v6;
  __int16 v7;
  int v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v3 = 136315650;
  v4 = "-[IMMessagePartSyndicationAssetDescriptor syndicationForPartIndex:asset:]";
  v5 = 2048;
  v6 = a1;
  v7 = 1024;
  v8 = a2;
  _os_log_error_impl(&dword_19E239000, log, OS_LOG_TYPE_ERROR, "%s No syndication present for partIndex %lu on asset %i", (uint8_t *)&v3, 0x1Cu);
}

void sub_19E36CD44()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_19E2AC648();
  sub_19E2AC638(&dword_19E239000, v0, v1, "%s no tokens to parse for string: %@", v2, v3, v4, v5, 2u);
  sub_19E2593D0();
}

void sub_19E36CDB0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_19E2AC648();
  sub_19E2AC638(&dword_19E239000, v0, v1, "%s no tokens could be parsed from %@", v2, v3, v4, v5, 2u);
  sub_19E2593D0();
}

void sub_19E36CE1C(uint64_t a1, uint64_t a2, os_log_t log)
{
  int v3;
  uint64_t v4;
  __int16 v5;
  uint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v3 = 138412546;
  v4 = a1;
  v5 = 2112;
  v6 = a2;
  _os_log_error_impl(&dword_19E239000, log, OS_LOG_TYPE_ERROR, "movePreviewToDiskCache -- nil file URL:\ntmpPreviewURL:%@ \ntargetPreviewURL:%@", (uint8_t *)&v3, 0x16u);
}

void sub_19E36CEA0(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_19E2593B0(&dword_19E239000, a2, a3, "Looking up localized format string failed for string: '%@'", a5, a6, a7, a8, 2u);
}

void sub_19E36CF08(uint64_t a1, uint64_t a2, os_log_t log)
{
  int v3;
  uint64_t v4;
  __int16 v5;
  uint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v3 = 138412546;
  v4 = a1;
  v5 = 2112;
  v6 = a2;
  _os_log_error_impl(&dword_19E239000, log, OS_LOG_TYPE_ERROR, "Error loading bundle at path %@: %@", (uint8_t *)&v3, 0x16u);
}

