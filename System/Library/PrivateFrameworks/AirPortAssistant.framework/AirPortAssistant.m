uint64_t sub_21A670CF4(unsigned int a1, unsigned int a2, unsigned int a3, unint64_t a4, unsigned __int8 *a5, const char *a6, uint64_t a7)
{
  unsigned int v10;
  unsigned int v11;
  const char *v12;
  unint64_t v13;
  uint64_t i;

  *(_OWORD *)a7 = 0u;
  *(_OWORD *)(a7 + 16) = 0u;
  *(_OWORD *)(a7 + 96) = 0u;
  *(_OWORD *)(a7 + 112) = 0u;
  *(_OWORD *)(a7 + 64) = 0u;
  *(_OWORD *)(a7 + 80) = 0u;
  *(_OWORD *)(a7 + 32) = 0u;
  *(_OWORD *)(a7 + 48) = 0u;
  *(_QWORD *)a7 = 0x100030070706361;
  *(_DWORD *)(a7 + 16) = bswap32(a4);
  *(_DWORD *)(a7 + 20) = bswap32(a1);
  v10 = bswap32(a2);
  v11 = bswap32(a3);
  if (a6)
    v12 = a6;
  else
    v12 = "public";
  *(_DWORD *)(a7 + 24) = v10;
  *(_DWORD *)(a7 + 28) = v11;
  strncpy((char *)(a7 + 48), v12, 0x20uLL);
  v13 = 0;
  for (i = 0; i != 32; ++i)
  {
    if (v13 > 0xF)
      v13 = 0;
    *(_BYTE *)(a7 + i + 48) ^= (i + 85) ^ byte_21A73EA7D[v13++];
  }
  return sub_21A670E14(a7, a4, a5);
}

uint64_t sub_21A670DCC(uint64_t result, uint64_t a2)
{
  unint64_t v2;
  uint64_t i;

  if (result)
  {
    v2 = 0;
    for (i = 0; i != result; ++i)
    {
      if (v2 > 0xF)
        v2 = 0;
      *(_BYTE *)(a2 + i) ^= (i + 85) ^ byte_21A73EA7D[v2++];
    }
  }
  return result;
}

uint64_t sub_21A670E14(uint64_t a1, unint64_t a2, unsigned __int8 *a3)
{
  unint64_t v4;
  unsigned int v5;
  uint64_t result;

  if (a2 == 0xFFFFFFFF)
    v4 = 0;
  else
    v4 = a2;
  v5 = sub_21A670E6C(1u, 0x1388uLL, a3, v4);
  *(_DWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 12) = bswap32(v5);
  result = sub_21A670E6C(1u, 0x1388uLL, (unsigned __int8 *)a1, 0x80uLL);
  *(_DWORD *)(a1 + 8) = bswap32(result);
  return result;
}

uint64_t sub_21A670E6C(unsigned int a1, unint64_t a2, unsigned __int8 *a3, unint64_t a4)
{
  unint64_t v4;
  unsigned int v5;
  unsigned int i;
  unint64_t v7;
  unint64_t v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  unint64_t v39;
  unsigned __int8 *v40;
  int v41;

  v4 = 5552;
  if (a2)
    v4 = a2;
  v5 = (unsigned __int16)a1;
  for (i = HIWORD(a1); a4; a4 -= v7)
  {
    if (a4 >= v4)
      v7 = v4;
    else
      v7 = a4;
    v8 = v7;
    if (v7 >= 0x10)
    {
      do
      {
        v9 = v5 + *a3;
        v10 = v9 + i;
        v11 = v9 + a3[1];
        v12 = v10 + v11;
        v13 = v11 + a3[2];
        v14 = v12 + v13;
        v15 = v13 + a3[3];
        v16 = v14 + v15;
        v17 = v15 + a3[4];
        v18 = v16 + v17;
        v19 = v17 + a3[5];
        v20 = v18 + v19;
        v21 = v19 + a3[6];
        v22 = v20 + v21;
        v23 = v21 + a3[7];
        v24 = v22 + v23;
        v25 = v23 + a3[8];
        v26 = v24 + v25;
        v27 = v25 + a3[9];
        v28 = v26 + v27;
        v29 = v27 + a3[10];
        v30 = v28 + v29;
        v31 = v29 + a3[11];
        v32 = v30 + v31;
        v33 = v31 + a3[12];
        v34 = v32 + v33;
        v35 = v33 + a3[13];
        v36 = v34 + v35;
        v37 = v35 + a3[14];
        v38 = v36 + v37;
        v5 = v37 + a3[15];
        i = v38 + v5;
        a3 += 16;
        v8 -= 16;
      }
      while (v8 > 0xF);
    }
    v39 = v8;
    v40 = a3;
    if (v8)
    {
      do
      {
        v41 = *v40++;
        v5 += v41;
        i += v5;
        --v39;
      }
      while (v39);
      a3 += v8;
    }
    v5 %= 0xFFF1u;
    i %= 0xFFF1u;
  }
  return v5 | (i << 16);
}

BOOL sub_21A670FC0(uint64_t a1)
{
  int v2;
  unsigned int v3;

  v2 = *(_DWORD *)(a1 + 8);
  *(_DWORD *)(a1 + 8) = 0;
  v3 = sub_21A670E6C(1u, 0x1388uLL, (unsigned __int8 *)a1, 0x80uLL);
  *(_DWORD *)(a1 + 8) = v2;
  return v2 == bswap32(v3);
}

uint64_t sub_21A671008(int a1, uint64_t **a2)
{
  int v2;
  uint64_t *v3;
  int v4;
  uint64_t result;

  v2 = 1651861868;
  v3 = &qword_21A73D148;
  while (v2 != a1)
  {
    v4 = *((_DWORD *)v3 + 3);
    v3 = (uint64_t *)((char *)v3 + 12);
    v2 = v4;
    if (!v4)
      return 4294967291;
  }
  result = 0;
  *a2 = v3;
  return result;
}

uint64_t sub_21A67103C(uint64_t a1, unint64_t a2, int a3, _DWORD *a4, _DWORD *a5, _DWORD *a6, int *a7, _DWORD *a8, _QWORD *a9, unint64_t *a10)
{
  unint64_t v10;
  uint64_t result;
  unint64_t v20;
  unsigned int v21;
  int v22;
  int v23;
  int v24;
  int v25;

  v10 = a2 - 36;
  if (a2 < 0x24)
    return 4294967281;
  if (strcmp((const char *)a1, "APPLE-FIRMWARE"))
    return 4294967276;
  if (a3)
  {
    v20 = a2 - 4;
    v21 = bswap32(*(_DWORD *)(a1 + a2 - 4));
    if (v21 != sub_21A670E6C(1u, 0x1388uLL, (unsigned __int8 *)a1, v20))
      return 4294967290;
  }
  v22 = *(unsigned __int8 *)(a1 + 15);
  v23 = *(unsigned __int8 *)(a1 + 24);
  v24 = *(unsigned __int8 *)(a1 + 25);
  v25 = *(unsigned __int8 *)(a1 + 26);
  if (a4)
    *a4 = bswap32(*(_DWORD *)(a1 + 16));
  if (a5)
    *a5 = bswap32(*(_DWORD *)(a1 + 20));
  if (a6)
    *a6 = *(unsigned __int8 *)(a1 + 27);
  if (a7)
    *a7 = (v22 << 24) | (v23 << 16) | (v24 << 8) | v25;
  if (a8)
    *a8 = bswap32(*(_DWORD *)(a1 + 28));
  if (a9)
    *a9 = a1 + 32;
  result = 0;
  if (a10)
    *a10 = v10;
  return result;
}

uint64_t sub_21A671170(uint64_t a1, unint64_t a2, _DWORD *a3, _DWORD *a4, _DWORD *a5, _QWORD *a6, unint64_t *a7)
{
  return sub_21A67103C(a1, a2, 1, a3, a4, a5, 0, 0, a6, a7);
}

uint64_t sub_21A6711AC(uint64_t a1, unint64_t a2, _DWORD *a3, _DWORD *a4, _DWORD *a5, int *a6, _DWORD *a7, _QWORD *a8, unint64_t *a9)
{
  return sub_21A67103C(a1, a2, 1, a3, a4, a5, a6, a7, a8, a9);
}

_BYTE *sub_21A6711EC(int a1, _BYTE *a2)
{
  *a2 = HIBYTE(a1);
  a2[1] = BYTE2(a1);
  a2[2] = BYTE1(a1);
  a2[3] = a1;
  a2[4] = 0;
  return a2;
}

uint64_t sub_21A671214(char *__s, size_t a2, _DWORD *a3)
{
  uint64_t result;

  if (a2 == -1)
    a2 = strlen(__s);
  if (a2 != 4)
    return 4294960553;
  result = 0;
  *a3 = bswap32(*(_DWORD *)__s);
  return result;
}

uint64_t sub_21A671268(uint64_t result)
{
  int v1;
  int *v2;
  int v3;

  if ((_DWORD)result)
  {
    v1 = 1;
    v2 = &dword_24DD049E8;
    while (v1 != (_DWORD)result)
    {
      v3 = *v2;
      v2 += 12;
      v1 = v3;
      if (!v3)
        return 0;
    }
    return *((unsigned __int8 *)v2 - 32);
  }
  return result;
}

uint64_t sub_21A671298(uint64_t result)
{
  int v1;
  int *v2;
  int v3;

  if ((_DWORD)result)
  {
    v1 = 1;
    v2 = &dword_24DD049E8;
    while (v1 != (_DWORD)result)
    {
      v3 = *v2;
      v2 += 12;
      v1 = v3;
      if (!v3)
        return 0;
    }
    return *(v2 - 11);
  }
  return result;
}

BOOL sub_21A6712C8(int a1)
{
  int v2;
  const char *v3;
  int v4;
  _BOOL8 result;
  int v6;

  v2 = 1651861868;
  v3 = "SnyD\r";
  while (v2 != a1)
  {
    v4 = *(_DWORD *)v3;
    v3 += 12;
    v2 = v4;
    if (!v4)
      goto LABEL_6;
  }
  if ((*(v3 - 4) & 0x5C) != 0)
    return 0;
LABEL_6:
  result = 1;
  if (a1 > 1818449522)
  {
    if (a1 > 1918980215)
    {
      if (a1 > 1937331018)
      {
        if (a1 == 1937331019 || a1 == 1937331540)
          return 0;
        v6 = 2004050793;
      }
      else
      {
        if (a1 == 1918980216 || a1 == 1937006964)
          return 0;
        v6 = 1937327724;
      }
    }
    else
    {
      if (a1 <= 1835626066)
      {
        if (a1 != 1818449523 && a1 != 1835090284)
        {
          v6 = 1835094130;
          goto LABEL_34;
        }
        return 0;
      }
      if (a1 == 1835626067 || a1 == 1885423186)
        return 0;
      v6 = 1886547529;
    }
LABEL_34:
    if (a1 != v6)
      return result;
    return 0;
  }
  if (a1 > 1349676901)
  {
    if (a1 > 1668703601)
    {
      if (a1 == 1668703602 || a1 == 1717920116)
        return 0;
      v6 = 1769161027;
    }
    else
    {
      if (a1 == 1349676902 || a1 == 1635076676)
        return 0;
      v6 = 1668573549;
    }
    goto LABEL_34;
  }
  if (a1 > 1148808786)
  {
    if (a1 == 1148808787 || a1 == 1298223988)
      return 0;
    v6 = 1346918739;
    goto LABEL_34;
  }
  return a1 != 1094800672 && a1 != 1095783250;
}

uint64_t sub_21A6714D8(int a1, int a2, _QWORD *a3)
{
  uint64_t result;
  _DWORD *v7;
  _DWORD *v8;

  result = 4294960591;
  if (a1 == 2 && a3)
  {
    v7 = malloc_type_calloc(1uLL, 0x168uLL, 0x10300400F1396E7uLL);
    if (v7)
    {
      v8 = v7;
      v7[10] = 5;
      v7[58] = a2 | 0x20;
      *((_BYTE *)v7 + 353) = 0;
      sub_21A695970((uint64_t)(v7 + 44), 0, 0, -1);
      result = 0;
      *a3 = v8;
    }
    else
    {
      return 4294960568;
    }
  }
  return result;
}

uint64_t sub_21A671570(_QWORD *a1)
{
  _QWORD *v2;
  void *v3;
  void *v4;
  void *v5;

  if (!a1)
    return 4294960591;
  v2 = (_QWORD *)*a1;
  if (v2)
  {
    sub_21A6A0598(v2);
    *a1 = 0;
  }
  sub_21A674C08((uint64_t)(a1 + 30));
  sub_21A674C08((uint64_t)(a1 + 37));
  sub_21A695988((uint64_t)(a1 + 22));
  v3 = (void *)a1[2];
  if (v3)
  {
    free(v3);
    a1[2] = 0;
  }
  v4 = (void *)a1[3];
  if (v4)
  {
    free(v4);
    a1[3] = 0;
  }
  v5 = (void *)a1[4];
  if (v5)
    free(v5);
  a1[44] = 0;
  *((_OWORD *)a1 + 20) = 0u;
  *((_OWORD *)a1 + 21) = 0u;
  *((_OWORD *)a1 + 18) = 0u;
  *((_OWORD *)a1 + 19) = 0u;
  *((_OWORD *)a1 + 16) = 0u;
  *((_OWORD *)a1 + 17) = 0u;
  *((_OWORD *)a1 + 14) = 0u;
  *((_OWORD *)a1 + 15) = 0u;
  *((_OWORD *)a1 + 12) = 0u;
  *((_OWORD *)a1 + 13) = 0u;
  *((_OWORD *)a1 + 10) = 0u;
  *((_OWORD *)a1 + 11) = 0u;
  *((_OWORD *)a1 + 8) = 0u;
  *((_OWORD *)a1 + 9) = 0u;
  *((_OWORD *)a1 + 6) = 0u;
  *((_OWORD *)a1 + 7) = 0u;
  *((_OWORD *)a1 + 4) = 0u;
  *((_OWORD *)a1 + 5) = 0u;
  *((_OWORD *)a1 + 2) = 0u;
  *((_OWORD *)a1 + 3) = 0u;
  *(_OWORD *)a1 = 0u;
  *((_OWORD *)a1 + 1) = 0u;
  free(a1);
  return 0;
}

uint64_t sub_21A67162C(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  if (!a1)
    return 4294960591;
  *(_BYTE *)(a1 + 8) = 1;
  v1 = *(_QWORD *)a1;
  if (!v1)
    return 0;
  result = sub_21A6A06B4(v1);
  if (!(_DWORD)result)
    return 0;
  return result;
}

uint64_t sub_21A671664(uint64_t a1)
{
  return *(unsigned int *)(a1 + 232);
}

uint64_t sub_21A67166C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 232) = a2;
  return result;
}

uint64_t sub_21A671674(uint64_t a1, char *a2, _BYTE *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  __int16 v10;
  uint64_t v11;
  char *v12;
  int v13;
  __int16 v14;
  uint64_t v16;
  uint64_t v18;

  if (!a1)
    return 4294960591;
  if (*(_BYTE *)(a1 + 8))
    return 4294960573;
  if (*(_BYTE *)(a1 + 45))
    return 0;
  v10 = a4;
  v11 = (uint64_t)a3;
  v12 = a2;
  if (!a2 || !*a2)
  {
    if (*(_QWORD *)(a1 + 16))
      v12 = *(char **)(a1 + 16);
    if (!v12)
      return 4294960591;
  }
  if (!a3 || !*a3)
  {
    if (*(_QWORD *)(a1 + 32))
      v11 = *(_QWORD *)(a1 + 32);
    if (!v11)
      return 4294960591;
  }
  v13 = *(_DWORD *)(a1 + 232);
  if (*(_BYTE *)(a1 + 44) || (v9 = sub_21A671958((_DWORD **)a1, v12, (uint64_t)a3, a4, a5, a6, a7, a8), !(_DWORD)v9))
  {
    v14 = v13 | v10;
    if ((v14 & 0x800) != 0)
      goto LABEL_35;
    if (*(_BYTE *)(a1 + 352))
      goto LABEL_35;
    v16 = sub_21A671B60(a1, v11, (uint64_t)a3, a4, a5, a6, a7, a8);
    if (!(_DWORD)v16)
      goto LABEL_35;
    v9 = v16;
    if ((_DWORD)v16 == -6723)
      return v9;
    if ((_DWORD)v16 == -6754)
    {
      if (dword_2550EE370 <= 3000 && (dword_2550EE370 != -1 || sub_21A69876C((uint64_t)&dword_2550EE370, 0xBB8u)))
        sub_21A698FDC((uint64_t)&dword_2550EE370, (uint64_t)"OSStatus ACPClientSetUpConnection(ACPClientRef, const char *, const char *, ACPClientOptions)", 3000, (uint64_t)"### bad password for %s/%##a\n", a5, a6, a7, a8, (uint64_t)v12);
      return 4294967280;
    }
    if ((v14 & 0x400) != 0 || *(_QWORD *)(a1 + 24))
    {
      if (dword_2550EE370 <= 3000 && (dword_2550EE370 != -1 || sub_21A69876C((uint64_t)&dword_2550EE370, 0xBB8u)))
        sub_21A698FDC((uint64_t)&dword_2550EE370, (uint64_t)"OSStatus ACPClientSetUpConnection(ACPClientRef, const char *, const char *, ACPClientOptions)", 3000, (uint64_t)"### secure auth required, but failed: %#m\n", a5, a6, a7, a8, v9);
      if ((_DWORD)v9 == -16 || (_DWORD)v9 == -7)
        return 4294960528;
      else
        return v9;
    }
    if (dword_2550EE370 <= 3000 && (dword_2550EE370 != -1 || sub_21A69876C((uint64_t)&dword_2550EE370, 0xBB8u)))
      sub_21A698FDC((uint64_t)&dword_2550EE370, (uint64_t)"OSStatus ACPClientSetUpConnection(ACPClientRef, const char *, const char *, ACPClientOptions)", 3000, (uint64_t)"### secure auth failed with %s/%##a: %#m\n", a5, a6, a7, a8, (uint64_t)v12);
    v9 = sub_21A671958((_DWORD **)a1, v12, (uint64_t)a3, a4, a5, a6, a7, a8);
    if (!(_DWORD)v9)
    {
LABEL_35:
      if (*(_BYTE *)(a1 + 352) || *(_BYTE *)(a1 + 353) || (v14 & 0x260) == 0 || (v14 & 0x80) != 0)
      {
LABEL_21:
        v9 = 0;
        *(_BYTE *)(a1 + 45) = 1;
        return v9;
      }
      if ((v14 & 0x40) == 0)
      {
        v9 = sub_21A671958((_DWORD **)a1, v12, (uint64_t)a3, a4, a5, a6, a7, a8);
        if ((_DWORD)v9)
          return v9;
        goto LABEL_21;
      }
      if (dword_2550EE370 <= 3000 && (dword_2550EE370 != -1 || sub_21A69876C((uint64_t)&dword_2550EE370, 0xBB8u)))
        sub_21A698FDC((uint64_t)&dword_2550EE370, (uint64_t)"OSStatus ACPClientSetUpConnection(ACPClientRef, const char *, const char *, ACPClientOptions)", 3000, (uint64_t)"### security required, but not supported by the server\n", a5, a6, a7, a8, v18);
      return 4294960528;
    }
  }
  return v9;
}

uint64_t sub_21A671958(_DWORD **a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  _DWORD **v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  socklen_t v24;

  if (dword_2550EE370 <= 3000 && (dword_2550EE370 != -1 || sub_21A69876C((uint64_t)&dword_2550EE370, 0xBB8u)))
    sub_21A698FDC((uint64_t)&dword_2550EE370, (uint64_t)"OSStatus __ACPClientSetUpConnection_Connect(ACPClientRef, const char *)", 3000, (uint64_t)"connecting to %s\n", a5, a6, a7, a8, (uint64_t)a2);
  sub_21A6720D8((uint64_t)a1);
  v10 = sub_21A69FEC4(a1);
  if (!(_DWORD)v10)
  {
    v12 = sub_21A6A073C((uint64_t)*a1, a2, 5009, *((_DWORD *)a1 + 10));
    v10 = v12;
    if ((_DWORD)v12 != -6723)
    {
      if ((_DWORD)v12)
      {
        if (dword_2550EE370 <= 3000 && (dword_2550EE370 != -1 || sub_21A69876C((uint64_t)&dword_2550EE370, 0xBB8u)))
          sub_21A698FDC((uint64_t)&dword_2550EE370, (uint64_t)"OSStatus __ACPClientSetUpConnection_Connect(ACPClientRef, const char *)", 3000, (uint64_t)"### failed to connect to %s: %#m\n", v13, v14, v15, v16, (uint64_t)a2);
      }
      else
      {
        v24 = 0;
        *((_BYTE *)a1 + 44) = 1;
        v17 = sub_21A6A068C(*a1);
        v23 = 1;
        if (setsockopt(v17, 6, 1, &v23, 4u) && *__error())
          __error();
        *((_OWORD *)a1 + 3) = 0u;
        v18 = a1 + 6;
        *((_OWORD *)v18 + 6) = 0u;
        *((_OWORD *)v18 + 7) = 0u;
        *((_OWORD *)v18 + 4) = 0u;
        *((_OWORD *)v18 + 5) = 0u;
        *((_OWORD *)v18 + 2) = 0u;
        *((_OWORD *)v18 + 3) = 0u;
        *((_OWORD *)v18 + 1) = 0u;
        v24 = 128;
        if (!getpeername(v17, (sockaddr *)v18, &v24))
          goto LABEL_27;
        if (!*__error())
          return 4294960596;
        v10 = *__error();
        if (!(_DWORD)v10)
        {
LABEL_27:
          if (dword_2550EE370 <= 3000 && (dword_2550EE370 != -1 || sub_21A69876C((uint64_t)&dword_2550EE370, 0xBB8u)))
            sub_21A698FDC((uint64_t)&dword_2550EE370, (uint64_t)"OSStatus __ACPClientSetUpConnection_Connect(ACPClientRef, const char *)", 3000, (uint64_t)"connected  to %s/%##a\n", v19, v20, v21, v22, (uint64_t)a2);
          return 0;
        }
      }
    }
  }
  return v10;
}

uint64_t sub_21A671B60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  CFTypeID v13;
  const __CFData *Value;
  const __CFData *v15;
  CFTypeID v16;
  const __CFData *v17;
  const __CFData *v18;
  CFTypeID v19;
  const __CFData *v20;
  const __CFData *v21;
  CFTypeID v22;
  const __CFData *v23;
  const __CFData *v24;
  CFTypeID v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  CFTypeID v32;
  const __CFData *v33;
  const __CFData *v34;
  CFTypeID v35;
  const __CFData *v36;
  const __CFData *v37;
  CFTypeID v38;
  __n128 *BytePtr;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  CFTypeRef v44;
  CFTypeRef cf;
  __n128 v46;
  uint8_t derivedKey[16];
  uint64_t v48;

  v48 = *MEMORY[0x24BDAC8D0];
  v44 = 0;
  cf = 0;
  v9 = sub_21A692FEC(0, &cf, (uint64_t)"{%kO=%i%kO=%s}", a4, a5, a6, a7, a8, (uint64_t)CFSTR("state"));
  if ((_DWORD)v9)
  {
    v10 = v9;
LABEL_4:
    v11 = 0;
    goto LABEL_5;
  }
  v10 = sub_21A672190(a1, 0x1Au, (const __CFString *)cf, &v44);
  CFRelease(cf);
  cf = 0;
  if ((_DWORD)v10)
    goto LABEL_4;
  v13 = CFGetTypeID(v44);
  if (v13 != CFDictionaryGetTypeID())
    goto LABEL_24;
  Value = (const __CFData *)CFDictionaryGetValue((CFDictionaryRef)v44, CFSTR("modulus"));
  if (!Value)
    goto LABEL_26;
  v15 = Value;
  v16 = CFGetTypeID(Value);
  if (v16 != CFDataGetTypeID())
  {
LABEL_24:
    v11 = 0;
    goto LABEL_25;
  }
  v17 = (const __CFData *)CFDictionaryGetValue((CFDictionaryRef)v44, CFSTR("generator"));
  if (!v17)
  {
LABEL_26:
    v11 = 0;
LABEL_27:
    v10 = 4294960584;
    goto LABEL_5;
  }
  v18 = v17;
  v19 = CFGetTypeID(v17);
  if (v19 != CFDataGetTypeID())
    goto LABEL_24;
  v20 = (const __CFData *)CFDictionaryGetValue((CFDictionaryRef)v44, CFSTR("salt"));
  if (!v20)
    goto LABEL_26;
  v21 = v20;
  v22 = CFGetTypeID(v20);
  if (v22 != CFDataGetTypeID())
    goto LABEL_24;
  v23 = (const __CFData *)CFDictionaryGetValue((CFDictionaryRef)v44, CFSTR("publicKey"));
  if (!v23)
    goto LABEL_26;
  v24 = v23;
  v25 = CFGetTypeID(v23);
  if (v25 != CFDataGetTypeID())
    goto LABEL_24;
  SRP6a_client_method();
  v11 = SRP_new();
  if (!v11 || SRP_set_username())
    goto LABEL_23;
  CFDataGetBytePtr(v15);
  CFDataGetLength(v15);
  CFDataGetBytePtr(v18);
  CFDataGetLength(v18);
  CFDataGetBytePtr(v21);
  CFDataGetLength(v21);
  if (SRP_set_params())
    goto LABEL_29;
  if (SRP_gen_pub() || SRP_set_auth_password())
    goto LABEL_23;
  CFDataGetBytePtr(v24);
  CFDataGetLength(v24);
  if (SRP_compute_key())
  {
LABEL_29:
    v10 = 4294960559;
    goto LABEL_5;
  }
  if (SRP_respond())
  {
LABEL_23:
    v10 = 4294960534;
    goto LABEL_5;
  }
  v26 = sub_21A72BD3C((uint64_t)&v46, 0x10uLL);
  if ((_DWORD)v26)
    goto LABEL_36;
  CFRelease(v44);
  v44 = 0;
  v26 = sub_21A692FEC(0, &cf, (uint64_t)"{%kO=%i%kO=%D%kO=%D%kO=%D}", v27, v28, v29, v30, v31, (uint64_t)CFSTR("state"));
  if ((_DWORD)v26)
    goto LABEL_36;
  v10 = sub_21A672190(a1, 0x1Au, (const __CFString *)cf, &v44);
  if (cf)
  {
    CFRelease(cf);
    cf = 0;
  }
  if ((_DWORD)v10)
    goto LABEL_5;
  v32 = CFGetTypeID(v44);
  if (v32 != CFDictionaryGetTypeID())
  {
LABEL_25:
    v10 = 4294960540;
    goto LABEL_5;
  }
  v33 = (const __CFData *)CFDictionaryGetValue((CFDictionaryRef)v44, CFSTR("response"));
  if (!v33)
    goto LABEL_27;
  v34 = v33;
  v35 = CFGetTypeID(v33);
  if (v35 != CFDataGetTypeID())
    goto LABEL_25;
  v36 = (const __CFData *)CFDictionaryGetValue((CFDictionaryRef)v44, CFSTR("iv"));
  if (!v36)
    goto LABEL_27;
  v37 = v36;
  v38 = CFGetTypeID(v36);
  if (v38 != CFDataGetTypeID())
    goto LABEL_25;
  if (CFDataGetLength(v37) == 16)
  {
    CFDataGetBytePtr(v34);
    CFDataGetLength(v34);
    if (SRP_verify())
    {
      v10 = 4294960542;
    }
    else
    {
      v26 = CCKeyDerivationPBKDF(2u, MEMORY[0], MEMORY[8], byte_21A73EA5C, 0x10uLL, 1u, 5u, derivedKey, 0x10uLL);
      if ((_DWORD)v26
        || (sub_21A6749E8((CCCryptorRef *)(a1 + 240), derivedKey, &v46),
            v26 = CCKeyDerivationPBKDF(2u, MEMORY[0], MEMORY[8], byte_21A73EA6C, 0x10uLL, 1u, 7u, derivedKey, 0x10uLL),
            (_DWORD)v26))
      {
LABEL_36:
        v10 = v26;
        goto LABEL_5;
      }
      BytePtr = (__n128 *)CFDataGetBytePtr(v37);
      sub_21A6749E8((CCCryptorRef *)(a1 + 296), derivedKey, BytePtr);
      *(_BYTE *)(a1 + 352) = 1;
      if (dword_2550EE370 <= 3000 && (dword_2550EE370 != -1 || sub_21A69876C((uint64_t)&dword_2550EE370, 0xBB8u)))
        sub_21A698FDC((uint64_t)&dword_2550EE370, (uint64_t)"OSStatus ACPClientAuthenticate(ACPClientRef, const char *)", 3000, (uint64_t)"*** authenticated server %##a @ %N\n", v40, v41, v42, v43, a1 + 48);
      v10 = 0;
    }
  }
  else
  {
    v10 = 4294960553;
  }
LABEL_5:
  if (v11)
    SRP_free();
  if (v44)
    CFRelease(v44);
  if (cf)
    CFRelease(cf);
  return v10;
}

uint64_t sub_21A6720D8(uint64_t a1)
{
  _QWORD *v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  if (!a1)
    return 4294960591;
  v2 = *(_QWORD **)a1;
  if (v2)
  {
    sub_21A6A0598(v2);
    *(_QWORD *)a1 = 0;
  }
  v3 = *(unsigned __int8 *)(a1 + 44);
  *(_WORD *)(a1 + 44) = 0;
  *(_WORD *)(a1 + 352) = 0;
  sub_21A674C08(a1 + 240);
  sub_21A674C08(a1 + 296);
  result = 0;
  if (v3)
  {
    if (dword_2550EE370 <= 800)
    {
      if (dword_2550EE370 != -1 || (result = sub_21A69876C((uint64_t)&dword_2550EE370, 0x320u), (_DWORD)result))
      {
        sub_21A698FDC((uint64_t)&dword_2550EE370, (uint64_t)"ACPStatus ACPClientTearDownConnection(ACPClientRef, ACPClientOptions)", 800, (uint64_t)"connection torn down: %#m\n", v4, v5, v6, v7, 0);
        return 0;
      }
    }
  }
  return result;
}

uint64_t sub_21A672190(uint64_t a1, unsigned int a2, const __CFString *a3, CFTypeRef *a4)
{
  uint64_t v7;
  CFIndex Length;
  unsigned __int8 *BytePtr;
  uint64_t v10;
  char *v12;
  uint64_t v13;
  char *v14;
  CFDataRef theData;
  __int128 v16;
  size_t size[2];
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  theData = 0;
  v22 = 0u;
  v23 = 0u;
  v20 = 0u;
  v21 = 0u;
  v18 = 0u;
  v19 = 0u;
  v16 = 0u;
  *(_OWORD *)size = 0u;
  v7 = sub_21A692394(0, a3, (CFTypeRef *)&theData);
  if (!(_DWORD)v7)
  {
    Length = CFDataGetLength(theData);
    BytePtr = (unsigned __int8 *)CFDataGetBytePtr(theData);
    v7 = sub_21A67295C(a1, 4u, "", a2, Length, BytePtr);
    CFRelease(theData);
    if (!(_DWORD)v7)
    {
      v7 = sub_21A672688(a1, v10, 30000, (char *)&v16);
      if (!(_DWORD)v7)
      {
        if (LODWORD(size[0]))
        {
          v12 = (char *)malloc_type_malloc(LODWORD(size[0]), 0x8C4EB8C4uLL);
          if (v12)
          {
            v14 = v12;
            v7 = sub_21A6732F0(a1, v13, 15000, LODWORD(size[0]), LODWORD(size[0]), v12, 0);
            if (!(_DWORD)v7)
              v7 = sub_21A692924(0, (uint64_t)v14, LODWORD(size[0]), a4);
            free(v14);
          }
          else
          {
            return 4294960568;
          }
        }
        else
        {
          return 4294960553;
        }
      }
    }
  }
  return v7;
}

uint64_t sub_21A6722F8(uint64_t a1, char a2, uint64_t a3, char *a4, char *a5, uint64_t a6, char **a7, _QWORD *a8)
{
  uint64_t v8;
  unsigned int v12;
  int v16;
  char v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  int8x8_t v35;
  uint64_t v36;

  v8 = 4294960591;
  if (a4)
  {
    if (a5)
    {
      v12 = a6;
      v16 = *(_DWORD *)(a1 + 232);
      v8 = sub_21A671674(a1, a4, a5, 0, (uint64_t)a5, a6, (uint64_t)a7, (uint64_t)a8);
      if (!(_DWORD)v8)
      {
        v17 = v16 | a2;
        v36 = 0;
        if (*(_BYTE *)(a1 + 352))
          v18 = "";
        else
          v18 = a5;
        v35 = (int8x8_t)v12;
        v8 = sub_21A67259C(a1, v17 & 0xC, v18, 1, &v35);
        if (!(_DWORD)v8)
        {
          v8 = sub_21A672688(a1, v19, a3, 0);
          if (!(_DWORD)v8)
          {
            LODWORD(v36) = 0;
            v35 = 0;
            v8 = sub_21A672788(a1, v20, a3, &v35);
            if (!(_DWORD)v8)
            {
              v26 = 0;
              while (1)
              {
                v27 = v35.u32[0];
                if (!v35.i32[0] || (v35.i8[4] & 1) != 0)
                {
                  if ((_DWORD)v36 != 4)
                  {
                    if (dword_2550EE370 <= 8000)
                    {
                      if (dword_2550EE370 != -1)
                        goto LABEL_33;
                      if (sub_21A69876C((uint64_t)&dword_2550EE370, 0x1F40u))
                      {
                        v27 = v35.u32[0];
LABEL_33:
                        sub_21A698FDC((uint64_t)&dword_2550EE370, (uint64_t)"ACPStatus ACPClientGetProperty(ACPClientRef, ACPClientOptions, ACPDuration, const char *, const char *, ACPPropertyCode, void *, size_t *)", 8000, (uint64_t)"bad property size (code='%C', expected=%u, actual=%u)\n", v22, v23, v24, v25, v27);
                      }
                    }
                    v8 = 4294960553;
                    goto LABEL_35;
                  }
                  v32 = sub_21A6732F0(a1, v21, a3, 4, 4, (char *)&v36 + 4, 0);
                  if ((_DWORD)v32)
                    goto LABEL_28;
                  v33 = bswap32(HIDWORD(v36));
                  HIDWORD(v36) = v33;
                  if ((v35.i8[4] & 1) != 0)
                    v8 = v33;
                  else
                    v8 = v8;
                  if (!v35.i32[0])
                    goto LABEL_35;
                }
                else
                {
                  v28 = (char *)malloc_type_malloc((v36 + 1), 0x8B6EECACuLL);
                  if (!v28)
                  {
                    v8 = 4294967293;
                    if ((v17 & 4) == 0)
                      goto LABEL_41;
                    goto LABEL_38;
                  }
                  v26 = v28;
                  v30 = sub_21A6732F0(a1, v29, a3, v36, v36, v28, 0);
                  if ((_DWORD)v30)
                  {
                    v8 = v30;
                    goto LABEL_36;
                  }
                  v26[v36] = 0;
                  if ((v35.i8[4] & 2) != 0)
                    sub_21A670DCC(v36, (uint64_t)v26);
                  if (a7)
                  {
                    *a7 = v26;
                    v26 = 0;
                  }
                  if (a8)
                    *a8 = v36;
                }
                LODWORD(v36) = 0;
                v35 = 0;
                v32 = sub_21A672788(a1, v31, a3, &v35);
                if ((_DWORD)v32)
                {
LABEL_28:
                  v8 = v32;
LABEL_35:
                  if (!v26)
                    break;
LABEL_36:
                  free(v26);
                  break;
                }
              }
            }
          }
        }
        if ((v17 & 4) == 0)
          goto LABEL_41;
LABEL_38:
        if ((_DWORD)v8 == 32 || (_DWORD)v8 == 54 || (_DWORD)v8 == -6753)
LABEL_41:
          sub_21A6720D8(a1);
      }
    }
  }
  return v8;
}

uint64_t sub_21A67259C(uint64_t a1, char a2, const char *a3, uint64_t a4, const void *a5)
{
  uint64_t v6;
  const char *v9;
  size_t v10;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  int8x8_t *v13;
  uint64_t v14;

  if (!a3)
    return 4294960591;
  v6 = a4;
  if (*(_BYTE *)(a1 + 352))
    v9 = "";
  else
    v9 = a3;
  v10 = 12 * a4;
  v11 = (unsigned __int8 *)malloc_type_malloc(12 * a4, 0x48148995uLL);
  if (!v11)
    return 4294967293;
  v12 = v11;
  memcpy(v11, a5, v10);
  if (v6)
  {
    v13 = (int8x8_t *)v12;
    do
    {
      *v13 = vrev32_s8(*v13);
      v13[1].i32[0] = bswap32(v13[1].u32[0]);
      v13 = (int8x8_t *)((char *)v13 + 12);
      --v6;
    }
    while (v6);
  }
  v14 = sub_21A67295C(a1, a2 & 0xC, v9, 0x14u, v10, v12);
  free(v12);
  return v14;
}

uint64_t sub_21A672688(uint64_t a1, uint64_t a2, uint64_t a3, char *a4)
{
  char *v5;
  uint64_t result;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  _OWORD v11[8];
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  if (!a1)
    return 4294960591;
  memset(&v11[2], 0, 96);
  if (a4)
    v5 = a4;
  else
    v5 = (char *)v11;
  memset(v11, 0, 32);
  result = sub_21A6732F0(a1, a2, a3, 128, 128, v5, 0);
  if (!(_DWORD)result)
  {
    if (sub_21A670FC0((uint64_t)v5))
    {
      *(_DWORD *)v5 = bswap32(*(_DWORD *)v5);
      v7 = (unsigned int *)v11;
      if (a4)
        v7 = (unsigned int *)a4;
      v8 = bswap32(v7[2]);
      v7[1] = bswap32(v7[1]);
      v7[2] = v8;
      v9 = bswap32(v7[4]);
      v7[3] = bswap32(v7[3]);
      v7[4] = v9;
      v10 = bswap32(v7[6]);
      v7[5] = bswap32(v7[5]);
      v7[6] = v10;
      result = bswap32(v7[8]);
      v7[7] = bswap32(v7[7]);
      v7[8] = result;
    }
    else
    {
      return 4294967290;
    }
  }
  return result;
}

uint64_t sub_21A672788(uint64_t a1, uint64_t a2, uint64_t a3, int8x8_t *a4)
{
  uint64_t result;

  if (!a4)
    return 4294960591;
  result = sub_21A6732F0(a1, a2, a3, 12, 12, (char *)a4, 0);
  if (!(_DWORD)result)
  {
    *a4 = vrev32_s8(*a4);
    a4[1].i32[0] = bswap32(a4[1].u32[0]);
  }
  return result;
}

uint64_t sub_21A6727E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char *a5)
{
  return sub_21A6732F0(a1, a2, a3, a4, a4, a5, 0);
}

uint64_t sub_21A6727F0(uint64_t a1, char a2, uint64_t a3, char *a4, char *a5, uint64_t a6, char *a7, uint64_t a8)
{
  uint64_t v8;
  int v10;
  unsigned int v12;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  int8x8_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;

  v8 = 4294960591;
  if (a4)
  {
    if (a5)
    {
      v10 = a8;
      v12 = a6;
      v8 = sub_21A671674(a1, a4, a5, 0, (uint64_t)a5, a6, (uint64_t)a7, a8);
      if (!(_DWORD)v8)
      {
        v25 = 0;
        v23 = 0;
        v24 = 0;
        v22 = 0;
        if (*(_BYTE *)(a1 + 352))
          v16 = "";
        else
          v16 = a5;
        v8 = sub_21A67295C(a1, a2 & 0xC, v16, 0x15u, 0xFFFFFFFFuLL, 0);
        if (!(_DWORD)v8)
        {
          v8 = sub_21A672688(a1, v17, a3, 0);
          if (!(_DWORD)v8)
          {
            v24 = v12;
            v25 = v10;
            v8 = sub_21A672A7C(a1, 0, (unsigned int *)&v24, a7);
            if (!(_DWORD)v8)
            {
              v8 = sub_21A672B28(a1, 0, 0);
              if (!(_DWORD)v8)
              {
                while (1)
                {
                  v20 = sub_21A672BA4(a1, v18, a3, &v22);
                  if ((_DWORD)v20)
                    break;
                  if ((_DWORD)v8)
                    v19 = 1;
                  else
                    v19 = HIDWORD(v23) == 0;
                  if (v19)
                    v8 = v8;
                  else
                    v8 = HIDWORD(v23);
                  if (!v22.i32[0])
                    goto LABEL_21;
                }
                v8 = v20;
              }
            }
          }
        }
LABEL_21:
        if ((a2 & 4) == 0 || (_DWORD)v8 == 32 || (_DWORD)v8 == 54 || (_DWORD)v8 == -6753)
          sub_21A6720D8(a1);
      }
    }
  }
  return v8;
}

uint64_t sub_21A67295C(uint64_t a1, unsigned int a2, const char *a3, unsigned int a4, unint64_t a5, unsigned __int8 *a6)
{
  uint64_t result;
  char v10;
  const char *v11;
  _OWORD v12[8];
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  result = 4294960591;
  if (a1 && a3)
  {
    v10 = a2;
    if (*(_BYTE *)(a1 + 352))
      v11 = "";
    else
      v11 = a3;
    if (a6 || a5 == 0xFFFFFFFF || !a5)
    {
      memset(v12, 0, sizeof(v12));
      sub_21A670CF4(a2 & 4 | (32 * ((a2 >> 3) & 1)), 0, a4, a5, a6, v11, (uint64_t)v12);
      result = sub_21A673208(a1, v10, 0x7FFFFFFF, 0x80uLL, (char *)v12);
      if (!(_DWORD)result && a5 && a5 != 0xFFFFFFFF)
        return sub_21A673208(a1, v10, 0x7FFFFFFF, a5, (char *)a6);
    }
    else
    {
      return 4294960553;
    }
  }
  return result;
}

uint64_t sub_21A672A7C(uint64_t a1, char a2, unsigned int *a3, char *a4)
{
  uint64_t result;
  unsigned int v9;
  unsigned int v10;
  size_t v11;
  _DWORD v12[3];

  result = 4294960591;
  if (a1)
  {
    if (a3)
    {
      v9 = a3[2];
      if (a4 || !v9)
      {
        v10 = bswap32(a3[1] & 0xFFFFFFFD);
        v12[0] = bswap32(*a3);
        v12[1] = v10;
        v12[2] = bswap32(v9);
        result = sub_21A673208(a1, a2, 0x7FFFFFFF, 0xCuLL, (char *)v12);
        if (!(_DWORD)result)
        {
          v11 = a3[2];
          if ((_DWORD)v11)
            return sub_21A673208(a1, a2, 0x7FFFFFFF, v11, a4);
          else
            return 0;
        }
      }
    }
  }
  return result;
}

uint64_t sub_21A672B28(uint64_t a1, char a2, unsigned int a3)
{
  uint64_t result;
  uint64_t v6;
  int v7;
  unsigned int v8;

  if (!a1)
    return 4294960591;
  v6 = 0;
  v7 = 0x4000000;
  v8 = bswap32(a3);
  result = sub_21A673208(a1, a2, 0x7FFFFFFF, 0xCuLL, (char *)&v6);
  if (!(_DWORD)result)
    return sub_21A673208(a1, a2, 0x7FFFFFFF, 4uLL, (char *)&v8);
  return result;
}

uint64_t sub_21A672BA4(uint64_t a1, uint64_t a2, uint64_t a3, int8x8_t *a4)
{
  uint64_t result;
  uint64_t v8;
  unsigned int v9;
  char *v10;
  uint8x8_t v11;
  int16x8_t v12;

  if (!a4)
    return 4294960591;
  result = sub_21A6732F0(a1, a2, a3, 12, 12, (char *)a4, 0);
  if (!(_DWORD)result)
  {
    *a4 = vrev32_s8(*a4);
    v9 = a4[1].u32[0];
    a4[1].i32[0] = bswap32(v9);
    if (v9 == 0x4000000)
    {
      v10 = (char *)&a4[1] + 4;
      result = sub_21A6732F0(a1, v8, a3, 4, 4, v10, 0);
      if (!(_DWORD)result)
      {
        v11.i32[0] = *(_DWORD *)v10;
        v12 = (int16x8_t)vmovl_u8(v11);
        *(int16x4_t *)v12.i8 = vrev64_s16(*(int16x4_t *)v12.i8);
        *(_DWORD *)v10 = vmovn_s16(v12).u32[0];
      }
    }
    else
    {
      return 4294960553;
    }
  }
  return result;
}

uint64_t sub_21A672C58(uint64_t a1, char a2, uint64_t a3, char *a4, char *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 *v8;
  unint64_t v9;
  uint64_t v12;
  unsigned __int8 *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  int v26;
  uint64_t v27;

  v8 = (unsigned __int8 *)a7;
  v9 = a6;
  v12 = a3;
  v27 = *MEMORY[0x24BDAC8D0];
  if (dword_2550EE370 <= 3000 && (dword_2550EE370 != -1 || sub_21A69876C((uint64_t)&dword_2550EE370, 0xBB8u)))
    sub_21A698FDC((uint64_t)&dword_2550EE370, (uint64_t)"ACPStatus ACPClientUpdateFirmware(ACPClientRef, ACPClientOptions, ACPDuration, const char *, const char *, ACPByteCount, const void *)", 3000, (uint64_t)"updating firmware (host=%s, pass=%s, size=%u, data:)\n", (uint64_t)a5, a6, a7, a8, (uint64_t)a4);
  v15 = 0;
  v24 = 0;
  v16 = 4294960591;
  if (a1 && v9 && v8)
  {
    if (v9 >= 3 && *v8 == 80 && v8[1] == 75)
    {
      v15 = 0;
      goto LABEL_21;
    }
    v17 = sub_21A671170((uint64_t)v8, v9, 0, 0, &v24, 0, 0);
    if ((_DWORD)v17 == -20 || (v16 = v17, (_DWORD)v17 == -15))
    {
      if (v9 >= 0x180001)
      {
        v15 = 0;
        v16 = 4294967281;
        goto LABEL_34;
      }
      v15 = (unsigned __int8 *)malloc_type_malloc(0x180000uLL, 0x2F77CE67uLL);
      if (!v15)
      {
        v16 = 4294967293;
        goto LABEL_34;
      }
      v22 = *(_DWORD *)&v8[v9 - 4];
      v23 = *(_DWORD *)&v8[v9 - 8];
      __memcpy_chk();
      bzero(&v15[v9 - 8], 1572872 - v9);
      *((_DWORD *)v15 + 393214) = v23;
      *((_DWORD *)v15 + 393215) = v22;
      if (v22 != bswap32(sub_21A670E6C(1u, 0x1388uLL, v15, 0x17FFFCuLL)))
      {
        v16 = 4294967290;
        goto LABEL_34;
      }
      v8 = v15;
      v9 = 1572864;
      v12 = v12;
      goto LABEL_21;
    }
    v15 = 0;
    if (!(_DWORD)v17)
    {
      v15 = 0;
      if ((v24 & 1) != 0)
      {
        v16 = 4294967276;
        goto LABEL_34;
      }
LABEL_21:
      v18 = sub_21A672F80(a1, 0, a3, a4, a5, 3, v9, v8);
      if ((_DWORD)v18)
      {
LABEL_33:
        v16 = v18;
        goto LABEL_34;
      }
      if ((a2 & 1) != 0)
      {
        v25 = 1633899086;
        v26 = 0;
        v19 = 1;
        if ((a2 & 2) == 0)
          goto LABEL_32;
      }
      else
      {
        if ((a2 & 2) == 0)
        {
          v16 = 0;
          goto LABEL_34;
        }
        v19 = 0;
      }
      v20 = (char *)&v25 + 12 * v19;
      *(_QWORD *)v20 = 1633899074;
      *((_DWORD *)v20 + 2) = 0;
      ++v19;
LABEL_32:
      v18 = sub_21A67306C(a1, 0, v12, a4, a5, v19, (uint64_t)&v25, a8);
      goto LABEL_33;
    }
  }
LABEL_34:
  if (dword_2550EE370 <= 3000 && (dword_2550EE370 != -1 || sub_21A69876C((uint64_t)&dword_2550EE370, 0xBB8u)))
    sub_21A698FDC((uint64_t)&dword_2550EE370, (uint64_t)"ACPStatus ACPClientUpdateFirmware(ACPClientRef, ACPClientOptions, ACPDuration, const char *, const char *, ACPByteCount, const void *)", 3000, (uint64_t)"updating firmware done (err=%#m)\n", (uint64_t)a5, a6, a7, a8, v16);
  if (v15)
    free(v15);
  return v16;
}

uint64_t sub_21A672F80(uint64_t a1, char a2, uint64_t a3, char *a4, char *a5, uint64_t a6, unint64_t a7, unsigned __int8 *a8)
{
  uint64_t v8;
  unsigned int v12;
  const char *v15;
  uint64_t v16;

  v8 = 4294960591;
  if (a4)
  {
    if (a5)
    {
      v12 = a6;
      if (!a7 || a8)
      {
        v8 = sub_21A671674(a1, a4, a5, 0, (uint64_t)a5, a6, a7, (uint64_t)a8);
        if (!(_DWORD)v8)
        {
          if (*(_BYTE *)(a1 + 352))
            v15 = "";
          else
            v15 = a5;
          v8 = sub_21A67295C(a1, 0, v15, v12, a7, a8);
          if (!(_DWORD)v8)
            v8 = sub_21A672688(a1, v16, 0x7FFFFFFFLL, 0);
          if ((a2 & 4) == 0 || (_DWORD)v8 == 32 || (_DWORD)v8 == 54 || (_DWORD)v8 == -6753)
            sub_21A6720D8(a1);
        }
      }
    }
  }
  return v8;
}

uint64_t sub_21A67306C(uint64_t a1, char a2, uint64_t a3, char *a4, char *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v10;
  unsigned int *v11;
  const char *v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  int8x8_t v21;
  uint64_t v22;

  v8 = 4294960591;
  if (a4)
  {
    if (a5)
    {
      v10 = a6;
      if (a6)
      {
        v11 = (unsigned int *)a7;
        if (a7)
        {
          v8 = sub_21A671674(a1, a4, a5, 0, (uint64_t)a5, a6, a7, a8);
          if (!(_DWORD)v8)
          {
            v21 = 0;
            v22 = 0;
            if (*(_BYTE *)(a1 + 352))
              v15 = "";
            else
              v15 = a5;
            v8 = sub_21A67295C(a1, 0, v15, 0x15u, 0xFFFFFFFFuLL, 0);
            if (!(_DWORD)v8)
            {
              v8 = sub_21A672688(a1, v16, a3, 0);
              if (!(_DWORD)v8)
              {
                do
                {
                  if (v11[2])
                  {
                    v8 = 4294967281;
                    goto LABEL_11;
                  }
                  v18 = sub_21A672A7C(a1, 0, v11, 0);
                  if ((_DWORD)v18)
                    goto LABEL_20;
                  v11 += 3;
                  --v10;
                }
                while (v10);
                v8 = sub_21A672B28(a1, 0, 0);
                if (!(_DWORD)v8)
                {
                  while (1)
                  {
                    v18 = sub_21A672BA4(a1, v19, a3, &v21);
                    if ((_DWORD)v18)
                      break;
                    v8 = HIDWORD(v22);
                    if (HIDWORD(v22))
                      v20 = 1;
                    else
                      v20 = v21.i32[0] == 0;
                    if (v20)
                      goto LABEL_11;
                  }
LABEL_20:
                  v8 = v18;
                }
              }
            }
LABEL_11:
            if ((a2 & 4) == 0 || (_DWORD)v8 == -6753 || (_DWORD)v8 == 54 || (_DWORD)v8 == 32)
              sub_21A6720D8(a1);
          }
        }
      }
    }
  }
  return v8;
}

uint64_t sub_21A6731E4(uint64_t a1, unsigned int a2, uint64_t a3, char *a4, char *a5, _QWORD *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return sub_21A673774(a1, a2, a3, a4, a5, a6, a7, a8, (uint64_t)&a9);
}

uint64_t sub_21A673208(uint64_t a1, char a2, int a3, size_t size, char *a5)
{
  unint64_t v5;
  char *v9;
  char *v10;
  uint64_t v11;

  v5 = size;
  if (!size)
    return v5;
  if (*(_BYTE *)(a1 + 352) || *(_BYTE *)(a1 + 353))
  {
    v9 = (char *)malloc_type_malloc(size, 0xF244C199uLL);
    if (!v9)
      return 4294960568;
    v10 = v9;
    sub_21A674A40((_QWORD *)(a1 + 240), a5, v5, v9);
    a5 = v10;
    if ((a2 & 0x10) == 0)
      goto LABEL_6;
  }
  else
  {
    v10 = 0;
    if ((a2 & 0x10) == 0)
    {
LABEL_6:
      v11 = (*(uint64_t (**)(void))(*(_QWORD *)a1 + 32))();
      goto LABEL_10;
    }
  }
  v11 = sub_21A6959CC(a1 + 176, a5, v5);
LABEL_10:
  v5 = v11;
  if (v10)
    free(v10);
  return v5;
}

uint64_t sub_21A6732F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char *a6, _QWORD *a7)
{
  uint64_t result;
  unint64_t v11;

  if (!a1)
    return 4294960591;
  v11 = 0;
  result = (*(uint64_t (**)(void))(*(_QWORD *)a1 + 24))();
  if (!(_DWORD)result)
  {
    if (*(_BYTE *)(a1 + 352) || *(_BYTE *)(a1 + 353))
      sub_21A674A40((_QWORD *)(a1 + 296), a6, v11, a6);
    result = 0;
    if (a7)
      *a7 = v11;
  }
  return result;
}

uint64_t sub_21A6733A8(_QWORD *a1, int a2)
{
  uint64_t v3;
  uint64_t result;

  if (!a1)
    return 4294960591;
  v3 = a1[26];
  if (!v3)
    return 0;
  result = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, _QWORD))(*a1 + 32))(*a1, a1[25], v3, (a2 / 1000));
  if (!(_DWORD)result)
    a1[26] = 0;
  return result;
}

uint64_t sub_21A673414(uint64_t a1, int a2, uint64_t a3, char *a4, char *a5, uint64_t a6, const __CFString *a7, unsigned int *a8)
{
  uint64_t v8;
  const char *v9;
  unsigned int v12;
  const UInt8 *BytePtr;
  size_t Length;
  unsigned __int8 *v18;
  unsigned __int8 *v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v25;
  CFDataRef theData;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;

  v35 = *MEMORY[0x24BDAC8D0];
  theData = 0;
  v8 = 4294960591;
  if (!a4)
    return v8;
  v9 = a5;
  if (!a5)
    return v8;
  v12 = a6;
  v8 = sub_21A671674(a1, a4, a5, 0, (uint64_t)a5, a6, (uint64_t)a7, (uint64_t)a8);
  if ((_DWORD)v8)
    return v8;
  v33 = 0u;
  v34 = 0u;
  v31 = 0u;
  v32 = 0u;
  v29 = 0u;
  v30 = 0u;
  v27 = 0u;
  v28 = 0u;
  v25 = 0;
  if (*(_BYTE *)(a1 + 352))
    v9 = "";
  if (!a7)
  {
    BytePtr = 0;
    Length = 0;
LABEL_10:
    v18 = (unsigned __int8 *)malloc_type_malloc(Length + 4, 0x5EC311B6uLL);
    if (v18)
    {
      v19 = v18;
      v20 = a2 | 4;
      *(_DWORD *)v18 = bswap32(v12);
      if (Length)
        memcpy(v18 + 4, BytePtr, Length);
      if (theData)
      {
        CFRelease(theData);
        theData = 0;
      }
      v8 = sub_21A67295C(a1, v20, v9, 0x18u, Length + 4, v19);
      free(v19);
      if (!(_DWORD)v8)
      {
        v8 = sub_21A672688(a1, v21, a3, (char *)&v27);
        if (!(_DWORD)v8)
        {
          if ((_DWORD)v28 == 4)
          {
            v8 = sub_21A6732F0(a1, v22, a3, 4, 4, (char *)&v25, 0);
            if (!(_DWORD)v8)
            {
              v23 = bswap32(v25);
              v25 = v23;
              v8 = 0;
              if (a8)
                *a8 = v23;
            }
          }
          else
          {
            v8 = 4294960553;
          }
        }
      }
    }
    else
    {
      v8 = 4294960568;
    }
    goto LABEL_22;
  }
  v8 = sub_21A692394((CFAllocatorRef)*MEMORY[0x24BDBD240], a7, (CFTypeRef *)&theData);
  if (!(_DWORD)v8)
  {
    BytePtr = CFDataGetBytePtr(theData);
    Length = CFDataGetLength(theData);
    goto LABEL_10;
  }
LABEL_22:
  if (theData)
    CFRelease(theData);
  if ((_DWORD)v8 == -6753 || (_DWORD)v8 == 54 || (_DWORD)v8 == 32)
    sub_21A6720D8(a1);
  return v8;
}

uint64_t sub_21A673654(uint64_t a1, uint64_t a2, CFMutableDictionaryRef *a3)
{
  uint64_t v6;
  int v8;
  size_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  CFMutableDictionaryRef Mutable;
  __CFDictionary *v14;
  uint64_t v15;

  v14 = 0;
  v15 = 0;
  v6 = sub_21A6732F0(a1, a2, a2, 8, 8, (char *)&v15, 0);
  if ((_DWORD)v6)
    return v6;
  v8 = HIDWORD(v15);
  v9 = bswap32(HIDWORD(v15));
  HIDWORD(v15) = v9;
  if (!v8)
  {
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
    if (Mutable)
    {
      v6 = 0;
      *a3 = Mutable;
      return v6;
    }
    return 4294960568;
  }
  v10 = (char *)malloc_type_malloc(v9, 0x36A6941uLL);
  if (!v10)
    return 4294960568;
  v12 = v10;
  v6 = sub_21A6732F0(a1, v11, a2, HIDWORD(v15), HIDWORD(v15), v10, 0);
  if (!(_DWORD)v6)
  {
    v6 = sub_21A692924((const __CFAllocator *)*MEMORY[0x24BDBD240], (uint64_t)v12, HIDWORD(v15), (CFTypeRef *)&v14);
    if (!(_DWORD)v6)
      *a3 = v14;
  }
  free(v12);
  return v6;
}

uint64_t sub_21A673774(uint64_t a1, unsigned int a2, uint64_t a3, char *a4, char *a5, _QWORD *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  const __CFAllocator *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  const void *Value;
  const void *v31;
  unsigned int v32;
  CFTypeRef cf;
  __CFArray *v34;
  CFTypeRef v35;

  v34 = 0;
  v35 = 0;
  v32 = 0;
  cf = 0;
  v16 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  v21 = sub_21A692FEC((const __CFAllocator *)*MEMORY[0x24BDBD240], &v35, (uint64_t)"{%kO=%O%kO={%@}}", (uint64_t)a4, (uint64_t)a5, (uint64_t)a6, a7, a8, (uint64_t)CFSTR("function"));
  if (!(_DWORD)v21)
  {
    v21 = sub_21A693ABC(v16, v34, a8, a9, v17, v18, v19, v20);
    if (!(_DWORD)v21)
    {
      v21 = sub_21A6738EC(a1, a2, a3, a4, a5, (const __CFString *)v35, &cf, v22);
      if (!(_DWORD)v21)
      {
        sub_21A693B94((const __CFString *)cf, (uint64_t)&v32, (UInt8 *)"%kO:err", v23, v24, v25, v26, v27, (uint64_t)CFSTR("status"));
        v21 = v28;
        if (!(_DWORD)v28)
        {
          v21 = v32;
          if (!v32)
          {
            if (a6)
            {
              Value = CFDictionaryGetValue((CFDictionaryRef)cf, CFSTR("outputs"));
              if (Value)
              {
                v31 = Value;
                CFRetain(Value);
                v21 = 0;
                *a6 = v31;
              }
              else
              {
                v21 = 4294960554;
              }
            }
            else
            {
              v21 = 0;
            }
          }
        }
      }
    }
  }
  if (cf)
    CFRelease(cf);
  if (v35)
    CFRelease(v35);
  return v21;
}

uint64_t sub_21A6738EC(uint64_t a1, unsigned int a2, uint64_t a3, char *a4, char *a5, const __CFString *a6, CFTypeRef *a7, uint64_t a8)
{
  uint64_t v14;
  int v15;
  const __CFAllocator *v16;
  const char *v17;
  unsigned __int8 *BytePtr;
  CFIndex Length;
  uint64_t v20;
  BOOL v21;
  char *v23;
  uint64_t v24;
  char *v25;
  CFDataRef theData;
  __int128 v27;
  size_t size[2];
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;

  v35 = *MEMORY[0x24BDAC8D0];
  v14 = sub_21A671674(a1, a4, a5, 0, (uint64_t)a5, (uint64_t)a6, (uint64_t)a7, a8);
  if (!(_DWORD)v14)
  {
    v33 = 0u;
    v34 = 0u;
    v31 = 0u;
    v32 = 0u;
    v29 = 0u;
    v30 = 0u;
    v27 = 0u;
    *(_OWORD *)size = 0u;
    theData = 0;
    v15 = *(unsigned __int8 *)(a1 + 352);
    v16 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
    v14 = sub_21A692394((CFAllocatorRef)*MEMORY[0x24BDBD240], a6, (CFTypeRef *)&theData);
    if (!(_DWORD)v14)
    {
      v17 = v15 ? "" : a5;
      BytePtr = (unsigned __int8 *)CFDataGetBytePtr(theData);
      Length = CFDataGetLength(theData);
      v14 = sub_21A67295C(a1, a2, v17, 0x19u, Length, BytePtr);
      CFRelease(theData);
      if (!(_DWORD)v14)
      {
        v14 = sub_21A672688(a1, v20, a3, (char *)&v27);
        if (!(_DWORD)v14)
        {
          if (LODWORD(size[0]))
          {
            v23 = (char *)malloc_type_malloc(LODWORD(size[0]), 0xBC82BA25uLL);
            if (v23)
            {
              v25 = v23;
              v14 = sub_21A6732F0(a1, v24, a3, LODWORD(size[0]), LODWORD(size[0]), v23, 0);
              if (!(_DWORD)v14)
                v14 = sub_21A692924(v16, (uint64_t)v25, LODWORD(size[0]), a7);
              free(v25);
            }
            else
            {
              v14 = 4294960568;
            }
          }
          else
          {
            v14 = 4294960553;
          }
        }
      }
    }
    if ((a2 & 4) == 0 || (_DWORD)v14 == 32 || ((_DWORD)v14 != 54 ? (v21 = (_DWORD)v14 == -6753) : (v21 = 1), v21))
      sub_21A6720D8(a1);
  }
  return v14;
}

uint64_t sub_21A673ACC(_QWORD *a1, const char *a2, const char *a3, int a4, const void *a5, uint64_t a6, uint64_t a7)
{
  char *v14;
  char *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;

  v14 = (char *)malloc_type_calloc(1uLL, 0xB0uLL, 0x10F0040894D8A09uLL);
  if (!v14)
    return 4294960568;
  v15 = v14;
  *(_DWORD *)v14 = 1634561902;
  v16 = v14 + 8;
  v17 = pthread_mutex_init((pthread_mutex_t *)(v14 + 8), 0);
  if ((_DWORD)v17)
  {
LABEL_13:
    sub_21A673D80((unsigned __int8 *)v15);
    return v17;
  }
  *((_QWORD *)v15 + 9) = v16;
  v18 = strdup(a2);
  *((_QWORD *)v15 + 12) = v18;
  if (!v18 || (v19 = strdup(a3), (*((_QWORD *)v15 + 13) = v19) == 0))
  {
    v17 = 4294960568;
    goto LABEL_13;
  }
  *((_DWORD *)v15 + 28) = a4;
  *((_QWORD *)v15 + 15) = a6;
  *((_QWORD *)v15 + 16) = a7;
  if (a5)
  {
    CFRetain(a5);
    *((_QWORD *)v15 + 17) = a5;
  }
  v17 = sub_21A6714D8(2, a4, (_QWORD *)v15 + 11);
  if ((_DWORD)v17)
    goto LABEL_13;
  v17 = sub_21A673414(*((_QWORD *)v15 + 11), 0, 30000, *((char **)v15 + 12), *((char **)v15 + 13), 0, *((const __CFString **)v15 + 17), 0);
  if ((_DWORD)v17)
    goto LABEL_13;
  v17 = pthread_create((pthread_t *)v15 + 18, 0, (void *(__cdecl *)(void *))sub_21A673C2C, v15);
  if ((_DWORD)v17)
    goto LABEL_13;
  *((_QWORD *)v15 + 19) = v15 + 144;
  *a1 = v15;
  return v17;
}

uint64_t sub_21A673C2C(uint64_t a1)
{
  uint64_t v2;
  CFTypeRef *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  pthread_mutex_t **v9;
  NSObject *v10;
  int v11;
  _QWORD *v12;

  v2 = a1 + 88;
  v3 = (CFTypeRef *)(a1 + 160);
  v8 = sub_21A673654(*(_QWORD *)(a1 + 88), 0x7FFFFFFFLL, (CFMutableDictionaryRef *)(a1 + 160));
  if (v8)
  {
LABEL_6:
    if (v8 != -6723
      && dword_2550EE370 <= 3000
      && (dword_2550EE370 != -1 || sub_21A69876C((uint64_t)&dword_2550EE370, 0xBB8u)))
    {
      sub_21A698FDC((uint64_t)&dword_2550EE370, (uint64_t)"void *__ACPMonitoringClient_Thread(void *)", 3000, (uint64_t)"[ACPMonitoring %p] read event error: %#m\n", v4, v5, v6, v7, a1);
    }
    v9 = (pthread_mutex_t **)(a1 + 72);
    pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 72));
    v12 = *(_QWORD **)(a1 + 88);
    if (v12)
    {
      sub_21A671570(v12);
      v3 = (CFTypeRef *)v2;
LABEL_15:
      *v3 = 0;
    }
  }
  else
  {
    v9 = (pthread_mutex_t **)(a1 + 72);
    v10 = MEMORY[0x24BDAC9B8];
    while (1)
    {
      pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 72));
      if (*(_BYTE *)(a1 + 80))
        break;
      ++*(_DWORD *)(a1 + 168);
      pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 72));
      dispatch_sync_f(v10, (void *)a1, (dispatch_function_t)sub_21A673F48);
      v11 = sub_21A673654(*(_QWORD *)(a1 + 88), 0x7FFFFFFFLL, (CFMutableDictionaryRef *)(v2 + 72));
      if (v11)
      {
        v8 = v11;
        goto LABEL_6;
      }
    }
    if (*v3)
    {
      CFRelease(*v3);
      goto LABEL_15;
    }
  }
  pthread_mutex_unlock(*v9);
  return 0;
}

uint64_t sub_21A673D80(unsigned __int8 *a1)
{
  pthread_mutex_t *v2;
  pthread_mutex_t *v3;
  int v4;
  int v6;
  pthread_mutex_t *v7;
  pthread_mutex_t *v8;
  int v9;

  if (!a1)
    return 4294960591;
  if (*(_DWORD *)a1 != 1634561902)
    return 4294960556;
  v2 = (pthread_mutex_t *)*((_QWORD *)a1 + 9);
  if (v2)
  {
    pthread_mutex_lock(v2);
    v3 = (pthread_mutex_t *)*((_QWORD *)a1 + 9);
    v4 = a1[80];
    a1[80] = 1;
    if (v3)
      pthread_mutex_unlock(v3);
    if (v4)
      return 4294960572;
  }
  else
  {
    v6 = a1[80];
    a1[80] = 1;
    if (v6)
      return 4294960572;
  }
  if (pthread_main_np())
  {
    sub_21A673E5C((uint64_t)a1);
  }
  else
  {
    v7 = (pthread_mutex_t *)*((_QWORD *)a1 + 9);
    if (v7)
    {
      pthread_mutex_lock(v7);
      v8 = (pthread_mutex_t *)*((_QWORD *)a1 + 9);
      v9 = *((_DWORD *)a1 + 42);
      if (v8)
        pthread_mutex_unlock(v8);
    }
    else
    {
      v9 = *((_DWORD *)a1 + 42);
    }
    if (!v9)
      dispatch_async_f(MEMORY[0x24BDAC9B8], a1, (dispatch_function_t)sub_21A673E5C);
  }
  return 0;
}

void sub_21A673E5C(uint64_t a1)
{
  pthread_mutex_t *v2;
  pthread_mutex_t *v3;
  int v4;
  pthread_mutex_t *v5;
  uint64_t v6;
  _QWORD *v7;
  const void *v8;
  void *v9;
  void *v10;
  pthread_mutex_t *v11;

  v2 = *(pthread_mutex_t **)(a1 + 72);
  if (v2)
  {
    pthread_mutex_lock(v2);
    v3 = *(pthread_mutex_t **)(a1 + 72);
    v4 = *(_DWORD *)(a1 + 168);
    if (v3)
      pthread_mutex_unlock(v3);
  }
  else
  {
    v4 = *(_DWORD *)(a1 + 168);
  }
  if (v4 <= 0)
  {
    v5 = *(pthread_mutex_t **)(a1 + 72);
    if (v5)
    {
      pthread_mutex_lock(v5);
      v6 = *(_QWORD *)(a1 + 88);
      if (v6)
      {
        *(_BYTE *)(v6 + 8) = 1;
        if (*(_QWORD *)v6)
          sub_21A6A06B4(*(_QWORD *)v6);
      }
      pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 72));
    }
    if (*(_QWORD *)(a1 + 152))
    {
      pthread_join(*(pthread_t *)(a1 + 144), 0);
      *(_QWORD *)(a1 + 152) = 0;
    }
    v7 = *(_QWORD **)(a1 + 88);
    if (v7)
    {
      sub_21A671570(v7);
      *(_QWORD *)(a1 + 88) = 0;
    }
    v8 = *(const void **)(a1 + 136);
    if (v8)
    {
      CFRelease(v8);
      *(_QWORD *)(a1 + 136) = 0;
    }
    v9 = *(void **)(a1 + 104);
    if (v9)
    {
      free(v9);
      *(_QWORD *)(a1 + 104) = 0;
    }
    v10 = *(void **)(a1 + 96);
    if (v10)
    {
      free(v10);
      *(_QWORD *)(a1 + 96) = 0;
    }
    v11 = *(pthread_mutex_t **)(a1 + 72);
    if (v11)
      pthread_mutex_destroy(v11);
    free((void *)a1);
  }
}

void sub_21A673F48(char *context)
{
  const void *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  if (!context[80])
    (*((void (**)(_QWORD, _QWORD, _QWORD))context + 15))(0, *((_QWORD *)context + 20), *((_QWORD *)context + 16));
  v2 = (const void *)*((_QWORD *)context + 20);
  if (v2)
  {
    CFRelease(v2);
    *((_QWORD *)context + 20) = 0;
  }
  v3 = (unsigned int *)(context + 168);
  do
  {
    v4 = __ldaxr(v3);
    v5 = v4 - 1;
  }
  while (__stlxr(v5, v3));
  if (!v5)
  {
    if (context[80])
      dispatch_async_f(MEMORY[0x24BDAC9B8], context, (dispatch_function_t)sub_21A673E5C);
  }
}

uint64_t sub_21A673FCC(int a1, unsigned __int8 *a2, unint64_t a3, int a4, CFStringRef *a5)
{
  const __CFString *v10;
  CFStringRef v11;
  uint64_t result;
  __int16 v13;
  int v14;
  int v15;
  uint64_t v16;
  CFStringRef *v17;
  const __CFAllocator *v18;
  CFNumberType v19;
  const __CFString *v20;
  uint64_t *v21;
  char cStr[128];
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  v20 = 0;
  v21 = 0;
  if (sub_21A671008(a1, &v21))
  {
LABEL_2:
    v10 = (const __CFString *)CFDataCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], a2, a3);
  }
  else
  {
    result = 4294960562;
    switch(*((_DWORD *)v21 + 1))
    {
      case 2:
        v11 = CFStringCreateWithBytes((CFAllocatorRef)*MEMORY[0x24BDBD240], a2, a3, 0x8000100u, 0);
        if (v11)
          goto LABEL_4;
        return 4294960554;
      case 3:
        if (a3 == 1)
          v13 = *a2;
        else
          v13 = 0;
        *(_WORD *)cStr = v13;
        v18 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
        v19 = kCFNumberSInt16Type;
        goto LABEL_50;
      case 4:
        if (a3 == 2)
        {
          v14 = *a2;
          if (a4 < 1)
            v15 = v14 | (a2[1] << 8);
          else
            v15 = a2[1] | (v14 << 8);
          *(_DWORD *)cStr = v15;
        }
        else
        {
          *(_DWORD *)cStr = 0;
        }
        v18 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
        v19 = kCFNumberSInt32Type;
        goto LABEL_50;
      case 5:
        if (a3 == 4)
        {
          if (a4 < 1)
            v16 = *(unsigned int *)a2;
          else
            v16 = bswap32(*(_DWORD *)a2);
          *(_QWORD *)cStr = v16;
        }
        else
        {
          *(_QWORD *)cStr = 0;
        }
        v18 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
        v19 = kCFNumberSInt64Type;
LABEL_50:
        v10 = (const __CFString *)CFNumberCreate(v18, v19, cStr);
        break;
      case 6:
        if (a3 == 1 && *a2)
          v17 = (CFStringRef *)MEMORY[0x24BDBD270];
        else
          v17 = (CFStringRef *)MEMORY[0x24BDBD268];
        v11 = *v17;
        goto LABEL_4;
      case 7:
        if (a3 != 4)
        {
          v11 = CFSTR("0.0.0.0");
          goto LABEL_37;
        }
        __sprintf_chk(cStr, 0, 0x80uLL, "%u.%u.%u.%u", *a2, a2[1], a2[2], a2[3]);
        goto LABEL_43;
      case 8:
        if (a3 == 6)
        {
          sub_21A6A1FDC(a2, 6, cStr);
          goto LABEL_43;
        }
        v11 = CFSTR("00:00:00:00:00:00");
        goto LABEL_37;
      case 0xA:
        return result;
      case 0xC:
        if (a3 == 16)
        {
          sub_21A6A1914(a2, 0, -1, 0xFFFFFFFF, cStr);
LABEL_43:
          v10 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x24BDBD240], cStr, 0x8000100u);
          break;
        }
        v11 = CFSTR("::");
LABEL_37:
        CFRetain(v11);
        goto LABEL_4;
      case 0xD:
        if (a3)
        {
          if (!sub_21A692924((const __CFAllocator *)*MEMORY[0x24BDBD240], (uint64_t)a2, a3, (CFTypeRef *)&v20))
          {
            v11 = v20;
            goto LABEL_4;
          }
        }
        else if (a1 == 1298223988)
        {
          v10 = (const __CFString *)CFArrayCreate(0, 0, 0, MEMORY[0x24BDBD690]);
          break;
        }
        v10 = (const __CFString *)CFDictionaryCreate(0, 0, 0, 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
        break;
      default:
        goto LABEL_2;
    }
  }
  v11 = v10;
  if (!v10)
    return 4294960568;
LABEL_4:
  result = 0;
  *a5 = v11;
  return result;
}

uint64_t sub_21A674314(int a1, const __CFString *cf, int a3, CFDataRef *a4)
{
  CFTypeID v8;
  const UInt8 *BytePtr;
  CFIndex Length;
  const __CFAllocator *v11;
  const UInt8 *v12;
  CFDataRef v13;
  uint64_t v14;
  size_t v15;
  unsigned int v16;
  __int16 v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t valuePtr;
  unsigned int v22;
  BOOL v23;
  void *v24;
  char *__s;
  uint64_t *v26;
  const __CFData *v27;
  __int128 v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  v26 = 0;
  v27 = 0;
  v24 = 0;
  __s = 0;
  v23 = 0;
  v22 = 0;
  valuePtr = 0;
  v8 = CFGetTypeID(cf);
  if (!sub_21A671008(a1, &v26))
  {
    switch(*((_DWORD *)v26 + 1))
    {
      case 2:
        if (v8 != CFStringGetTypeID())
          return 4294960540;
        v14 = sub_21A694C44(cf, (const char **)&__s, (UInt8 **)&v24);
        if ((_DWORD)v14)
          return v14;
        v15 = strlen(__s);
        v13 = CFDataCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], (const UInt8 *)__s, v15);
        if (v24)
          free(v24);
        if (!v13)
          return 4294960568;
        goto LABEL_5;
      case 3:
        if (v8 != CFNumberGetTypeID())
          return 4294960540;
        if (!CFNumberGetValue((CFNumberRef)cf, kCFNumberSInt64Type, &valuePtr)
          || (unint64_t)(valuePtr + 128) > 0x17F)
        {
          return 4294960586;
        }
        v23 = valuePtr;
        goto LABEL_33;
      case 4:
        if (v8 != CFNumberGetTypeID())
          return 4294960540;
        if (!CFNumberGetValue((CFNumberRef)cf, kCFNumberSInt64Type, &valuePtr)
          || (unint64_t)(valuePtr + 0x8000) >> 15 > 2)
        {
          return 4294960586;
        }
        v16 = bswap32(valuePtr) >> 16;
        if (a3 <= 0)
          v17 = valuePtr;
        else
          v17 = v16;
        LOWORD(v28) = v17;
        v11 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
        v12 = (const UInt8 *)&v28;
        Length = 2;
        goto LABEL_4;
      case 5:
        if (v8 != CFNumberGetTypeID())
          return 4294960540;
        if (!CFNumberGetValue((CFNumberRef)cf, kCFNumberSInt64Type, &valuePtr)
          || (unint64_t)(valuePtr + 0x80000000) >> 31 > 2)
        {
          return 4294960586;
        }
        v18 = bswap32(valuePtr);
        if (a3 <= 0)
          v19 = valuePtr;
        else
          v19 = v18;
        goto LABEL_59;
      case 6:
        if (v8 != CFBooleanGetTypeID())
          return 4294960540;
        v23 = CFBooleanGetValue((CFBooleanRef)cf) != 0;
LABEL_33:
        v11 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
        v12 = (const UInt8 *)&v23;
        Length = 1;
        goto LABEL_4;
      case 7:
        if (v8 != CFStringGetTypeID())
          return 4294960540;
        if (CFStringGetLength(cf))
        {
          v14 = sub_21A694C44(cf, (const char **)&__s, (UInt8 **)&v24);
          if ((_DWORD)v14)
            return v14;
          v14 = sub_21A6A16C4(__s, 0, &v22, 0, 0, 0, 0);
          if (v24)
            free(v24);
          if ((_DWORD)v14)
            return v14;
          v19 = bswap32(v22);
        }
        else
        {
          v19 = 0;
        }
LABEL_59:
        v22 = v19;
        v11 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
        v12 = (const UInt8 *)&v22;
        Length = 4;
        goto LABEL_4;
      case 8:
        if (v8 != CFStringGetTypeID())
          return 4294960540;
        v14 = sub_21A694C44(cf, (const char **)&__s, (UInt8 **)&v24);
        if ((_DWORD)v14)
          return v14;
        v14 = sub_21A6A1EB0(__s, 0xFFFFFFFFFFFFFFFFLL, 6, &v28);
        if (v24)
          free(v24);
        if ((_DWORD)v14)
          return v14;
        v11 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
        v12 = (const UInt8 *)&v28;
        Length = 6;
        goto LABEL_4;
      case 0xC:
        if (v8 != CFStringGetTypeID())
          return 4294960540;
        if (CFStringGetLength(cf))
        {
          v14 = sub_21A694C44(cf, (const char **)&__s, (UInt8 **)&v24);
          if ((_DWORD)v14)
            return v14;
          v14 = sub_21A6A11D4(__s, 0, &v28, 0, 0, 0, 0);
          if (v24)
            free(v24);
          if ((_DWORD)v14)
            return v14;
        }
        else
        {
          v28 = 0uLL;
        }
        v11 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
        v12 = (const UInt8 *)&v28;
        Length = 16;
        goto LABEL_4;
      case 0xD:
        v14 = sub_21A692394((CFAllocatorRef)*MEMORY[0x24BDBD240], cf, (CFTypeRef *)&v27);
        if ((_DWORD)v14)
          return v14;
        v13 = v27;
        goto LABEL_5;
      default:
        break;
    }
  }
  if (v8 != CFDataGetTypeID())
    return 4294960540;
  BytePtr = CFDataGetBytePtr((CFDataRef)cf);
  Length = CFDataGetLength((CFDataRef)cf);
  v11 = 0;
  v12 = BytePtr;
LABEL_4:
  v13 = CFDataCreate(v11, v12, Length);
  if (!v13)
    return 4294960568;
LABEL_5:
  v14 = 0;
  *a4 = v13;
  return v14;
}

uint64_t sub_21A674750(int a1, UInt8 *a2, size_t a3, CFStringRef *a4)
{
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const __CFString *v13;
  CFStringRef v14;
  CFStringRef *v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t *v18;
  char valuePtr[128];
  __int128 v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v17 = 0;
  v18 = 0;
  v16 = 0;
  result = sub_21A671008(a1, &v18);
  if (!(_DWORD)result)
  {
    result = 4294960561;
    switch(*((_DWORD *)v18 + 1))
    {
      case 2:
        v14 = CFStringCreateWithBytes((CFAllocatorRef)*MEMORY[0x24BDBD240], a2, a3, 0x8000100u, 0);
        if (v14)
          goto LABEL_26;
        goto LABEL_27;
      case 3:
      case 4:
      case 5:
        if (sub_21A6A2BD4((char *)a2, a3, "%li", v8, v9, v10, v11, v12, (int)&v17) != 1)
          goto LABEL_27;
        *(_QWORD *)valuePtr = v17;
        v13 = (const __CFString *)CFNumberCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], kCFNumberSInt64Type, valuePtr);
        goto LABEL_22;
      case 6:
        if (!strncmp((const char *)a2, "1", a3)
          || !strcasecmp((const char *)a2, "true")
          || !strcasecmp((const char *)a2, "yes"))
        {
          v15 = (CFStringRef *)MEMORY[0x24BDBD270];
        }
        else
        {
          if (strncmp((const char *)a2, "0", a3)
            && strcasecmp((const char *)a2, "false")
            && strcasecmp((const char *)a2, "no"))
          {
            goto LABEL_27;
          }
          v15 = (CFStringRef *)MEMORY[0x24BDBD268];
        }
        v14 = *v15;
        if (v14)
        {
LABEL_26:
          result = 0;
          *a4 = v14;
          return result;
        }
LABEL_27:
        result = 4294960554;
        break;
      case 7:
        result = sub_21A6A16C4((char *)a2, 0, &v16, 0, 0, 0, 0);
        if ((_DWORD)result)
          return result;
        sub_21A69A24C(v16, 0xFFFFFFFF, valuePtr);
        goto LABEL_21;
      case 8:
        result = sub_21A6A1EB0((char *)a2, a3, 6, &v20);
        if ((_DWORD)result)
          return result;
        sub_21A6A1FDC((unsigned __int8 *)&v20, 6, valuePtr);
        goto LABEL_21;
      case 0xC:
        result = sub_21A6A11D4(a2, 0, &v20, 0, 0, 0, 0);
        if ((_DWORD)result)
          return result;
        sub_21A6A1914(&v20, 0, -1, 0xFFFFFFFF, valuePtr);
LABEL_21:
        v13 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x24BDBD240], valuePtr, 0x8000100u);
LABEL_22:
        v14 = v13;
        if (v13)
          goto LABEL_26;
        return 4294960568;
      default:
        return result;
    }
  }
  return result;
}

__n128 sub_21A6749E8(CCCryptorRef *cryptorRef, void *key, __n128 *a3)
{
  __n128 result;

  *cryptorRef = 0;
  if (!CCCryptorCreate(0, 0, 2u, key, 0x10uLL, 0, cryptorRef))
  {
    result = *a3;
    *(__n128 *)(cryptorRef + 1) = *a3;
    cryptorRef[5] = 0;
    *((_BYTE *)cryptorRef + 48) = 0;
  }
  return result;
}

uint64_t sub_21A674A40(_QWORD *dataIn, char *a2, unint64_t a3, _BYTE *a4)
{
  unint64_t v5;
  char *v8;
  uint64_t v9;
  char v10;
  char *v11;
  uint64_t result;
  unsigned int v13;
  __int16 v14;
  __int16 v15;
  BOOL v17;
  uint64_t v18;
  char *v19;
  unsigned int v20;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  size_t dataOutMoved;

  v5 = a3;
  v8 = (char *)(dataIn + 3);
  v9 = dataIn[5];
  if (a3 && v9)
  {
    do
    {
      v10 = *a2++;
      *a4++ = v8[v9] ^ v10;
      v9 = ((int)v9 + 1) & 0xFLL;
      --v5;
    }
    while (v5 && v9);
  }
  dataOutMoved = 0;
  dataIn[5] = v9;
  if (v5 < 0x10)
  {
LABEL_18:
    if (v5)
    {
      v19 = (char *)(dataIn + 1);
      result = CCCryptorUpdate((CCCryptorRef)*dataIn, dataIn + 1, 0x10uLL, v8, 0x10uLL, &dataOutMoved);
      if ((_DWORD)result)
        return result;
      if (dataOutMoved != 16)
        return 4294960553;
      v20 = 15;
      do
      {
        if (++v19[v20])
          v22 = 1;
        else
          v22 = v20 == 0;
        --v20;
      }
      while (!v22);
      v23 = 0;
      dataOutMoved = 0;
      if (v5 <= 1)
        v24 = 1;
      else
        v24 = v5;
      do
      {
        a4[v23] = v8[v9 + v23] ^ a2[v23];
        dataOutMoved = ++v23;
      }
      while (v24 != v23);
      if (!*((_BYTE *)dataIn + 48))
      {
        result = 0;
        dataIn[5] = v9 + v23;
        return result;
      }
    }
    return 0;
  }
  v11 = (char *)(dataIn + 1);
  while (1)
  {
    result = CCCryptorUpdate((CCCryptorRef)*dataIn, dataIn + 1, 0x10uLL, v8, 0x10uLL, &dataOutMoved);
    if ((_DWORD)result)
      return result;
    if (dataOutMoved != 16)
      return 4294960553;
    v13 = 15;
    do
    {
      v14 = v11[v13];
      v15 = v14 + 1;
      v11[v13] = v14 + 1;
      v17 = v13-- != 0;
    }
    while ((v15 & 0x100) != 0 && v17);
    v18 = 0;
    dataOutMoved = 0;
    do
    {
      a4[v18] = v8[v18] ^ a2[v18];
      dataOutMoved = ++v18;
    }
    while (v18 != 16);
    a2 += 16;
    a4 += 16;
    v5 -= 16;
    if (v5 <= 0xF)
      goto LABEL_18;
  }
}

double sub_21A674C08(uint64_t a1)
{
  _CCCryptor *v2;
  double result;

  v2 = *(_CCCryptor **)a1;
  if (v2)
    CCCryptorRelease(v2);
  *(_QWORD *)(a1 + 48) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  return result;
}

void sub_21A674D1C(int a1, uint64_t a2, void *a3, void *a4)
{
  const char *v7;
  uint64_t v8;
  char *v9;
  void *v10;
  const char *v11;
  const __CFString *v12;
  const char *v13;
  uint64_t CompletionDictFromAutoGuessResults;
  const char *v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t AutoGuessUISelector;
  const char *v26;
  const char *v27;
  uint64_t v28;
  uint64_t ParamString;
  const char *v30;
  const char *v31;
  uint64_t v32;
  const char *v33;
  uint64_t v34;
  uint64_t v35;
  const char *v36;
  uint64_t v37;
  uint64_t v38;
  const char *v39;
  const char *v40;
  uint64_t v41;
  uint64_t v42;
  const char *v43;
  const char *v44;
  uint64_t v45;
  uint64_t v46;
  const char *v47;
  const char *v48;
  const char *v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  const char *v53;
  uint64_t v54;
  uint64_t v55;
  const char *v56;
  const char *v57;

  v7 = (const char *)objc_alloc_init(MEMORY[0x24BDD1460]);
  v9 = (char *)v7;
  if (a4)
  {
    v57 = v7;
    v10 = (void *)objc_msgSend_delegate(a4, v7, v8);
    v12 = (const __CFString *)objc_msgSend_objectForKey_(a3, v11, (uint64_t)CFSTR("BSAssistantProgressKey_DictionaryParameter"));
    if (a1 == 18)
    {
      CompletionDictFromAutoGuessResults = objc_msgSend_createCompletionDictFromAutoGuessResults_(a4, v13, (uint64_t)v12);
      objc_msgSend_setGuessCompletionDict_(a4, v15, CompletionDictFromAutoGuessResults);
      if (v10 && (objc_opt_respondsToSelector() & 1) != 0)
      {
        v18 = objc_msgSend_guessCompletionDict(a4, v16, v17);
        objc_msgSend_autoguessProgressComplete_(v10, v19, v18);
      }
      objc_msgSend_autoGuessEngineComplete(a4, v16, v17);
      goto LABEL_21;
    }
    if ((a1 - 5) <= 1 && v12)
    {
      v20 = (uint64_t)sub_21A69107C((uint64_t)v12, (const char *)1, (uint64_t)v12);
    }
    else if ((a1 - 7) <= 1 && v12)
    {
      v20 = (uint64_t)sub_21A691000(v12, (const char *)1, (uint64_t)v12);
    }
    else
    {
      v20 = objc_msgSend_objectForKey_(a3, v13, (uint64_t)CFSTR("BSAssistantProgressKey_StringParameter"));
    }
    v23 = v20;
    v24 = a1 - 3;
    if ((a1 - 3) > 0xE || ((0x7955u >> v24) & 1) == 0)
    {
      AutoGuessUISelector = objc_msgSend_lastAutoGuessUISelector(a4, v21, v22);
      objc_msgSend_setCurrentAutoGuessUISelector_(a4, v26, AutoGuessUISelector);
      ParamString = objc_msgSend_lastParamString(a4, v27, v28);
      objc_msgSend_setCurrentParamString_(a4, v30, ParamString);
      if (objc_msgSend_lastAutoGuessUISelector(a4, v31, v32) != 14
        && v10
        && (objc_opt_respondsToSelector() & 1) != 0)
      {
        v35 = objc_msgSend_lastAutoGuessUISelector(a4, v33, v34);
        v38 = objc_msgSend_lastParamString(a4, v36, v37);
        objc_msgSend_autoguessProgressUpdated_paramString_(v10, v39, v35, v38);
      }
      objc_msgSend_setLastAutoGuessUISelector_(a4, v33, 14);
      objc_msgSend_setLastParamString_(a4, v40, (uint64_t)&stru_24DD08368);
      goto LABEL_21;
    }
    v41 = dword_21A73EAC4[v24];
    v42 = objc_msgSend_currentAutoGuessUISelector(a4, v21, v22);
    objc_msgSend_setLastAutoGuessUISelector_(a4, v43, v42);
    v46 = objc_msgSend_currentParamString(a4, v44, v45);
    objc_msgSend_setLastParamString_(a4, v47, v46);
    objc_msgSend_setCurrentAutoGuessUISelector_(a4, v48, v41);
    objc_msgSend_setCurrentParamString_(a4, v49, v23);
    v9 = (char *)v57;
    if (v10)
    {
      v50 = objc_opt_respondsToSelector();
      v9 = (char *)v57;
      if ((v50 & 1) != 0)
      {
        v52 = objc_msgSend_currentAutoGuessUISelector(a4, v57, v51);
        v55 = objc_msgSend_currentParamString(a4, v53, v54);
        objc_msgSend_autoguessProgressUpdated_paramString_(v10, v56, v52, v55);
LABEL_21:
        v9 = (char *)v57;
      }
    }
  }

}

void *sub_21A6774B8(void *a1, const char *a2, uint64_t a3)
{
  void *v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  const char *v17;
  uint64_t v18;
  const char *v19;
  void *v20;
  uint64_t v21;
  const char *v22;
  uint64_t valid;
  const char *v24;
  uint64_t v26;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  _BYTE v32[128];
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  v4 = (void *)objc_msgSend_string(MEMORY[0x24BDD16A8], a2, a3);
  v7 = objc_msgSend_count(a1, v5, v6);
  if (v7 >= 2)
  {
    v9 = v7;
    v30 = 0u;
    v31 = 0u;
    v28 = 0u;
    v29 = 0u;
    v10 = objc_msgSend_countByEnumeratingWithState_objects_count_(a1, v8, (uint64_t)&v28, v32, 16);
    if (v10)
    {
      v12 = v10;
      v13 = 0;
      v14 = *(_QWORD *)v29;
      do
      {
        v15 = 0;
        v26 = v13;
        do
        {
          if (*(_QWORD *)v29 != v14)
            objc_enumerationMutation(a1);
          v16 = objc_msgSend_valueForKey_(*(void **)(*((_QWORD *)&v28 + 1) + 8 * v15), v11, (uint64_t)CFSTR("name"));
          objc_msgSend_appendString_(v4, v17, v16);
          if (v13 + 2 >= v9)
          {
            if (++v13 < v9)
            {
              v20 = (void *)MEMORY[0x24BDD17C8];
              v21 = sub_21A690C10((uint64_t)CFSTR("CommaListConjunction"), qword_2550F4DE8);
              valid = objc_msgSend_stringWithValidatedFormat_validFormatSpecifiers_error_(v20, v22, v21, CFSTR("%@"), 0, a2);
              objc_msgSend_appendString_(v4, v24, valid);
            }
          }
          else
          {
            v18 = sub_21A690C10((uint64_t)CFSTR("CommaListSeparator"), qword_2550F4DE8);
            objc_msgSend_appendString_(v4, v19, v18);
            ++v13;
          }
          ++v15;
        }
        while (v12 != v15);
        v13 = v26 + v12;
        v12 = objc_msgSend_countByEnumeratingWithState_objects_count_(a1, v11, (uint64_t)&v28, v32, 16);
      }
      while (v12);
    }
  }
  return v4;
}

void *sub_21A677690(void *a1, const char *a2, uint64_t a3)
{
  void *v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  const char *v17;
  uint64_t v18;
  const char *v19;
  void *v20;
  uint64_t v21;
  const char *v22;
  uint64_t valid;
  const char *v24;
  uint64_t v26;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  _BYTE v32[128];
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  v4 = (void *)objc_msgSend_string(MEMORY[0x24BDD16A8], a2, a3);
  v7 = objc_msgSend_count(a1, v5, v6);
  if (v7 >= 2)
  {
    v9 = v7;
    v30 = 0u;
    v31 = 0u;
    v28 = 0u;
    v29 = 0u;
    v10 = objc_msgSend_countByEnumeratingWithState_objects_count_(a1, v8, (uint64_t)&v28, v32, 16);
    if (v10)
    {
      v12 = v10;
      v13 = 0;
      v14 = *(_QWORD *)v29;
      do
      {
        v15 = 0;
        v26 = v13;
        do
        {
          if (*(_QWORD *)v29 != v14)
            objc_enumerationMutation(a1);
          v16 = objc_msgSend_valueForKey_(*(void **)(*((_QWORD *)&v28 + 1) + 8 * v15), v11, (uint64_t)CFSTR("SSID_STR"));
          objc_msgSend_appendString_(v4, v17, v16);
          if (v13 + 2 >= v9)
          {
            if (++v13 < v9)
            {
              v20 = (void *)MEMORY[0x24BDD17C8];
              v21 = sub_21A690C10((uint64_t)CFSTR("CommaListConjunction"), qword_2550F4DE8);
              valid = objc_msgSend_stringWithValidatedFormat_validFormatSpecifiers_error_(v20, v22, v21, CFSTR("%@"), 0, a2);
              objc_msgSend_appendString_(v4, v24, valid);
            }
          }
          else
          {
            v18 = sub_21A690C10((uint64_t)CFSTR("CommaListSeparator"), qword_2550F4DE8);
            objc_msgSend_appendString_(v4, v19, v18);
            ++v13;
          }
          ++v15;
        }
        while (v12 != v15);
        v13 = v26 + v12;
        v12 = objc_msgSend_countByEnumeratingWithState_objects_count_(a1, v11, (uint64_t)&v28, v32, 16);
      }
      while (v12);
    }
  }
  return v4;
}

uint64_t sub_21A677938(uint64_t a1, uint64_t a2, void *a3)
{
  const char *v6;
  id v7;
  uint64_t v8;

  v7 = objc_alloc_init(MEMORY[0x24BDD1460]);
  if (a3)
    v8 = objc_msgSend_assistantCallback_withSelector_(a3, v6, a1, a2);
  else
    v8 = 4294960591;

  return v8;
}

uint64_t sub_21A677A58(uint64_t a1, const char *a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;

  result = objc_msgSend_keychainWrapperWithMACAddress_(KeychainWrapper, a2, *(_QWORD *)(a1 + 32));
  if (result)
  {
    v4 = result;
    v5 = *(_QWORD *)(a1 + 40);
    sub_21A690C10((uint64_t)CFSTR("keychainBaseStationDescription"), (uint64_t)CFSTR("AirPortSettings"));
    return MEMORY[0x24BEDD108](v4, sel_addGenericPassword_withLabel_andDescription_, v5);
  }
  return result;
}

uint64_t sub_21A677CA8(uint64_t a1, const char *a2)
{
  void *v3;
  uint64_t v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  const char *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _BYTE v17[128];
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  v16 = 0u;
  v3 = *(void **)(a1 + 32);
  v4 = objc_msgSend_countByEnumeratingWithState_objects_count_(v3, a2, (uint64_t)&v13, v17, 16);
  if (v4)
  {
    v6 = v4;
    v7 = *(_QWORD *)v14;
    while (2)
    {
      for (i = 0; i != v6; ++i)
      {
        if (*(_QWORD *)v14 != v7)
          objc_enumerationMutation(v3);
        v9 = objc_msgSend_keychainPasswordForMACAddress_(KeychainWrapper, v5, *(_QWORD *)(*((_QWORD *)&v13 + 1) + 8 * i));
        if (v9)
        {
          v10 = v9;
          goto LABEL_11;
        }
      }
      v6 = objc_msgSend_countByEnumeratingWithState_objects_count_(v3, v5, (uint64_t)&v13, v17, 16);
      if (v6)
        continue;
      break;
    }
  }
  v10 = 0;
LABEL_11:
  result = objc_opt_respondsToSelector();
  if ((result & 1) != 0)
    return objc_msgSend_assistantCallbackKeychainPassword_forBaseStation_(*(void **)(a1 + 40), v12, v10, *(_QWORD *)(a1 + 48));
  return result;
}

uint64_t sub_21A677E7C(uint64_t a1, const char *a2)
{
  void *v2;
  uint64_t result;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _BYTE v14[128];
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v2 = *(void **)(a1 + 32);
  result = objc_msgSend_countByEnumeratingWithState_objects_count_(v2, a2, (uint64_t)&v10, v14, 16);
  if (result)
  {
    v5 = result;
    v6 = *(_QWORD *)v11;
    do
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v11 != v6)
          objc_enumerationMutation(v2);
        v8 = (void *)objc_msgSend_keychainWrapperWithMACAddress_(KeychainWrapper, v4, *(_QWORD *)(*((_QWORD *)&v10 + 1) + 8 * v7));
        if (v8)
          objc_msgSend_removeGenericPassword(v8, v4, v9);
        ++v7;
      }
      while (v5 != v7);
      result = objc_msgSend_countByEnumeratingWithState_objects_count_(v2, v4, (uint64_t)&v10, v14, 16);
      v5 = result;
    }
    while (result);
  }
  return result;
}

uint64_t sub_21A678B88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  const char *v24;
  void *v25;
  const char *v26;
  uint64_t v27;
  const char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t i;
  uint64_t v32;
  uint64_t NetworkPassword;
  const char *v34;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  void *v40;
  void *v41;
  _BYTE v42[128];
  uint64_t v43;

  v43 = *MEMORY[0x24BDAC8D0];
  v41 = 0;
  sub_21A70B0B0(*(_QWORD *)(a1 + 32), (uint64_t)CFSTR("BSAssistantCallback_KeychainServiceType"), &v41, a4, a5, a6, a7, a8);
  v17 = v16;
  if (!v16)
  {
    if (!v41)
    {
LABEL_21:
      v17 = -6728;
      goto LABEL_22;
    }
    if (objc_msgSend_isEqualToString_(v41, v9, (uint64_t)CFSTR("keychainBaseStationType")))
    {
      v40 = 0;
      sub_21A70B0B0(*(_QWORD *)(a1 + 32), (uint64_t)CFSTR("BSAssistantCallback_KeychainAccounts"), &v40, v18, v19, v20, v21, v22);
      if (!v23)
      {
        if (v40)
        {
          v25 = (void *)objc_msgSend_copy(v40, v24, v10);
          v40 = v25;
          v36 = 0u;
          v37 = 0u;
          v38 = 0u;
          v39 = 0u;
          v27 = objc_msgSend_countByEnumeratingWithState_objects_count_(v25, v26, (uint64_t)&v36, v42, 16);
          if (v27)
          {
            v29 = v27;
            v30 = *(_QWORD *)v37;
            while (2)
            {
              for (i = 0; i != v29; ++i)
              {
                if (*(_QWORD *)v37 != v30)
                  objc_enumerationMutation(v25);
                v32 = objc_msgSend_keychainPasswordForMACAddress_(KeychainWrapper, v28, *(_QWORD *)(*((_QWORD *)&v36 + 1) + 8 * i));
                if (v32)
                {
                  NetworkPassword = v32;
                  goto LABEL_28;
                }
              }
              v29 = objc_msgSend_countByEnumeratingWithState_objects_count_(v25, v28, (uint64_t)&v36, v42, 16);
              if (v29)
                continue;
              break;
            }
          }
          NetworkPassword = 0;
LABEL_28:

          if (!NetworkPassword)
            goto LABEL_29;
          goto LABEL_19;
        }
        goto LABEL_21;
      }
    }
    else
    {
      v40 = 0;
      sub_21A70B0B0(*(_QWORD *)(a1 + 32), (uint64_t)CFSTR("BSAssistantCallback_ScanInfo"), &v40, v18, v19, v20, v21, v22);
      if (!v23)
      {
        v10 = (uint64_t)v40;
        if (v40)
        {
          NetworkPassword = objc_msgSend_getNetworkPassword_(WiFiUtils, v34, (uint64_t)v40);
          if (!NetworkPassword)
          {
LABEL_29:
            v17 = -6727;
            goto LABEL_22;
          }
LABEL_19:
          v17 = sub_21A70B204(*(_QWORD *)(a1 + 32), (uint64_t)CFSTR("BSAssistantCallback_String"), NetworkPassword, v11, v12, v13, v14, v15);
          if (!v17)
            return sub_21A70B2E0(*(_QWORD **)(a1 + 32), v17, v10, v11, v12, v13, v14, v15);
          goto LABEL_22;
        }
        goto LABEL_21;
      }
    }
    v17 = v23;
  }
LABEL_22:
  if (dword_2550EE3F0 <= 800 && (dword_2550EE3F0 != -1 || sub_21A69876C((uint64_t)&dword_2550EE3F0, 0x320u)))
    sub_21A698FDC((uint64_t)&dword_2550EE3F0, (uint64_t)"-[AssistantCallbackController(Private) assistantCallback:withSelector:]_block_invoke", 800, (uint64_t)"failing inSelector: %d err: %m\n", v12, v13, v14, v15, *(unsigned int *)(a1 + 40));
  return sub_21A70B2E0(*(_QWORD **)(a1 + 32), v17, v10, v11, v12, v13, v14, v15);
}

uint64_t sub_21A67945C(const char *a1, const char *a2, const char *a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v10;
  const __CFAllocator *v11;
  CFStringRef v12;
  CFStringRef v13;
  const char *v14;
  NSObject *v15;
  CFMutableDictionaryRef Mutable;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  CFNotificationCenterRef LocalCenter;
  __CFNotificationCenter *v21;
  CFIndex Count;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  CFIndex v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  const void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  CFTypeRef cf;
  uint64_t v52;
  void *v53;
  CFArrayRef theArray;

  v4 = 0;
  theArray = 0;
  v5 = 4294960591;
  if (!a1 || !a2 || !a4)
    goto LABEL_30;
  v10 = malloc_type_calloc(1uLL, 0x38uLL, 0x1060040067EBA7CuLL);
  v4 = (uint64_t)v10;
  if (!v10)
    goto LABEL_29;
  *v10 = 0;
  v11 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  v12 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x24BDBD240], a1, 0x8000100u);
  *(_QWORD *)(v4 + 24) = v12;
  if (!v12)
    goto LABEL_29;
  v13 = CFStringCreateWithCString(v11, a2, 0x8000100u);
  *(_QWORD *)(v4 + 32) = v13;
  if (!v13)
    goto LABEL_29;
  v14 = a3 ? a3 : "ACPBrowserSession";
  v15 = dispatch_queue_create(v14, 0);
  *(_QWORD *)(v4 + 8) = v15;
  if (!v15)
    goto LABEL_29;
  dispatch_set_context(v15, (void *)v4);
  dispatch_set_finalizer_f(*(dispatch_object_t *)(v4 + 8), (dispatch_function_t)sub_21A679700);
  sub_21A679764(v4, MEMORY[0x24BDAC9B8]);
  *(_BYTE *)(v4 + 40) = 0;
  Mutable = CFDictionaryCreateMutable(v11, 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
  *(_QWORD *)(v4 + 48) = Mutable;
  if (!Mutable)
    goto LABEL_29;
  v19 = sub_21A72E078(&theArray, v17, v18);
  if ((_DWORD)v19 == -6727)
  {
LABEL_28:
    v5 = 0;
    *a4 = v4;
    v4 = 0;
    goto LABEL_30;
  }
  v5 = v19;
  if ((_DWORD)v19)
    goto LABEL_30;
  if (!theArray)
  {
    v5 = 4294960568;
LABEL_33:
    sub_21A679700((_QWORD *)v4);
    return v5;
  }
  LocalCenter = CFNotificationCenterGetLocalCenter();
  if (!LocalCenter)
  {
LABEL_29:
    v5 = 4294960568;
    goto LABEL_30;
  }
  v21 = LocalCenter;
  Count = CFArrayGetCount(theArray);
  if (Count < 1)
  {
LABEL_27:
    CFNotificationCenterAddObserver(v21, (const void *)v4, (CFNotificationCallback)sub_21A67980C, CFSTR("com.apple.AirPort.WiFiShim.Notification.LinkChange"), 0, CFNotificationSuspensionBehaviorDeliverImmediately);
    goto LABEL_28;
  }
  v28 = Count;
  v29 = 0;
  while (1)
  {
    v52 = 0;
    v53 = 0;
    cf = 0;
    sub_21A693B94((const __CFString *)theArray, (uint64_t)&v53, (UInt8 *)"[*]", v23, v24, v25, v26, v27, v29);
    if ((_DWORD)v30)
      break;
    if (!v53)
      goto LABEL_29;
    v37 = sub_21A6862B0((uint64_t)v11, v53, v31, v32, v33, v34, v35, v36);
    if (!v37)
      goto LABEL_29;
    v39 = (const void *)v37;
    v5 = sub_21A6869A0(v37, (char *)&cf, v38);
    CFRelease(v39);
    if ((_DWORD)v5)
      goto LABEL_30;
    if (!cf)
      goto LABEL_29;
    v52 = 0;
    sub_21A693B94((const __CFString *)cf, (uint64_t)&v52, (UInt8 *)"%kO", v40, v41, v42, v43, v44, (uint64_t)CFSTR("kNetworkLinkManager_LinkChangeKey_WiFiName"));
    v5 = sub_21A6797A8(v4, v52, v53, v45, v46, v47, v48, v49);
    if (cf)
      CFRelease(cf);
    if ((_DWORD)v5)
      goto LABEL_30;
    if (v28 == ++v29)
      goto LABEL_27;
  }
  v5 = v30;
LABEL_30:
  if (theArray)
  {
    CFRelease(theArray);
    theArray = 0;
  }
  if (v4)
    goto LABEL_33;
  return v5;
}

void sub_21A679700(_QWORD *a1)
{
  NSObject *v2;
  const void *v3;
  const void *v4;
  const void *v5;

  if (a1)
  {
    v2 = a1[2];
    if (v2)
    {
      dispatch_release(v2);
      a1[2] = 0;
    }
    v3 = (const void *)a1[3];
    if (v3)
    {
      CFRelease(v3);
      a1[3] = 0;
    }
    v4 = (const void *)a1[4];
    if (v4)
    {
      CFRelease(v4);
      a1[4] = 0;
    }
    v5 = (const void *)a1[6];
    if (v5)
      CFRelease(v5);
    free(a1);
  }
}

void sub_21A679764(uint64_t a1, NSObject *a2)
{
  NSObject *v3;
  NSObject *v4;

  if (a2)
    v3 = a2;
  else
    v3 = MEMORY[0x24BDAC9B8];
  dispatch_retain(v3);
  v4 = *(NSObject **)(a1 + 16);
  if (v4)
    dispatch_release(v4);
  *(_QWORD *)(a1 + 16) = v3;
}

uint64_t sub_21A6797A8(uint64_t a1, uint64_t a2, void *key, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  __CFArray *v9;
  uint64_t result;

  v9 = *(__CFArray **)(a1 + 48);
  if (!v9)
    return 4294960591;
  if (a2)
  {
    result = sub_21A693A8C((const __CFAllocator *)*MEMORY[0x24BDBD240], v9, (uint64_t)"%kO=%O", a4, a5, a6, a7, a8, (uint64_t)key);
    if ((_DWORD)result)
      return result;
  }
  else
  {
    CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a1 + 48), key);
  }
  return 0;
}

void sub_21A67980C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const __CFString *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;

  if (a2)
  {
    v22 = 0;
    if (a5)
    {
      v23 = 0;
      sub_21A693B94(a5, (uint64_t)&v23, (UInt8 *)"%kO", a4, (uint64_t)a5, a6, a7, a8, (uint64_t)CFSTR("kNetworkLinkManager_LinkChangeKey_IfName"));
      if (!v15)
      {
        if (v23)
        {
          sub_21A693B94(a5, (uint64_t)&v22, (UInt8 *)"%kO", v10, v11, v12, v13, v14, (uint64_t)CFSTR("kNetworkLinkManager_LinkChangeKey_WiFiName"));
          if (!v16 || v16 == -6727)
            sub_21A6797A8(a2, v22, v23, v17, v18, v19, v20, v21);
        }
      }
    }
  }
}

uint64_t sub_21A6798AC(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD *v6;

  v6 = malloc_type_calloc(1uLL, 0x18uLL, 0x1070040319640ECuLL);
  if (!v6)
    return 4294960568;
  if (!a1)
    return 4294960591;
  *v6 = a1;
  v6[1] = a2;
  *((_BYTE *)v6 + 16) = a3;
  dispatch_async_f(*(dispatch_queue_t *)(a1 + 8), v6, (dispatch_function_t)sub_21A679934);
  return 0;
}

uint64_t sub_21A67992C(uint64_t a1, uint64_t a2)
{
  return sub_21A6798AC(a1, a2, 0);
}

void sub_21A679934(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  if (dword_2550EE490 <= 3000 && (dword_2550EE490 != -1 || sub_21A69876C((uint64_t)&dword_2550EE490, 0xBB8u)))
    sub_21A698FDC((uint64_t)&dword_2550EE490, (uint64_t)"void __StartBrowseEx2(void *)", 3000, (uint64_t)"%s: starting browse\n", a5, a6, a7, a8, (uint64_t)"__StartBrowseEx2");
  if (!**(_QWORD **)a1 && !sub_21A72BE08(*(NSObject ****)a1, "ACPBrowserSession"))
  {
    sub_21A72BEDC(**(_QWORD **)a1, *(NSObject **)(*(_QWORD *)a1 + 8));
    sub_21A72BF58(**(_QWORD **)a1, (uint64_t)sub_21A679C90, *(_QWORD *)a1);
    v9 = 1;
    while (1)
    {
      v10 = *((_BYTE *)a1 + 16) ? 0 : "local.";
      if (!sub_21A72BF60(**(dispatch_queue_t ***)a1, "_airport._tcp", v10, *((const char **)a1 + 1), 0))
        break;
      if (dword_2550EE490 <= 5000 && (dword_2550EE490 != -1 || sub_21A69876C((uint64_t)&dword_2550EE490, 0x1388u)))
        sub_21A698FDC((uint64_t)&dword_2550EE490, (uint64_t)"void __StartBrowseEx2(void *)", 5000, (uint64_t)"### waiting for bonjour to become ready (%d)\n", v11, v12, v13, v14, v9);
      sleep(1u);
      v9 = (v9 + 1);
      if ((_DWORD)v9 == 31)
        goto LABEL_22;
    }
    if (dword_2550EE490 <= 3000 && (dword_2550EE490 != -1 || sub_21A69876C((uint64_t)&dword_2550EE490, 0xBB8u)))
      sub_21A698FDC((uint64_t)&dword_2550EE490, (uint64_t)"void __StartBrowseEx2(void *)", 3000, (uint64_t)"AirPort discovery started\n", v11, v12, v13, v14, v15);
  }
LABEL_22:
  free(a1);
}

uint64_t sub_21A679AFC(dispatch_queue_t **a1, const void *a2)
{
  uint64_t result;

  result = 4294960591;
  if (a1 && a2)
  {
    if (*a1)
    {
      sub_21A72C244(*a1, a2, 1);
      return 0;
    }
    else
    {
      return 4294960591;
    }
  }
  return result;
}

uint64_t sub_21A679B38(dispatch_queue_t *context)
{
  if (!context)
    return 4294960591;
  dispatch_async_f(context[1], context, (dispatch_function_t)sub_21A679B6C);
  return 0;
}

void sub_21A679B6C(dispatch_queue_t **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  dispatch_queue_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (a1)
  {
    v10 = *a1;
    if (v10)
    {
      sub_21A72C1AC(v10);
      sub_21A72BF20(*a1);
      *a1 = 0;
      if (dword_2550EE490 <= 3000 && (dword_2550EE490 != -1 || sub_21A69876C((uint64_t)&dword_2550EE490, 0xBB8u)))
        sub_21A698FDC((uint64_t)&dword_2550EE490, (uint64_t)"void _ACPBrowserSession_StopBrowse(void *)", 3000, (uint64_t)"AirPort discovery stopped\n", v11, v12, v13, v14, a9);
    }
  }
}

uint64_t sub_21A679BF8(void *context)
{
  if (!context)
    return 4294960591;
  if (!*((_BYTE *)context + 40))
  {
    *((_BYTE *)context + 40) = 1;
    dispatch_async_f(*((dispatch_queue_t *)context + 1), context, (dispatch_function_t)sub_21A679C3C);
  }
  return 0;
}

void sub_21A679C3C(dispatch_queue_t *a1)
{
  __CFNotificationCenter *LocalCenter;

  LocalCenter = CFNotificationCenterGetLocalCenter();
  if (LocalCenter)
    CFNotificationCenterRemoveObserver(LocalCenter, a1, CFSTR("com.apple.AirPort.WiFiShim.Notification.LinkChange"), 0);
  if (a1)
    dispatch_async_f(a1[1], a1, (dispatch_function_t)sub_21A679B6C);
  dispatch_release(a1[1]);
}

void sub_21A679C90(int a1, CFDictionaryRef theDict, uint64_t a3)
{
  const __CFAllocator *v5;
  const __CFString *MutableCopy;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const __CFDictionary *v12;
  int v13;
  CFIndex Count;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  CFIndex v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  const __CFData *v34;
  const __CFData *v35;
  CFMutableDictionaryRef Mutable;
  const UInt8 *BytePtr;
  uint16_t Length;
  unsigned int v39;
  unsigned int v40;
  uint16_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unsigned __int8 *v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  const __CFString *v70;
  char *v71;
  char *v72;
  CFStringRef v73;
  CFStringRef v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  const void *v80;
  const UInt8 *v81;
  const void *v82;
  __CFArray *theDicta;
  CFTypeRef cf;
  uint8_t valueLen;
  void *value;
  __CFString *v87;
  void *v88;
  unsigned int key[8];
  const char *v90[3];

  v90[2] = *(const char **)MEMORY[0x24BDAC8D0];
  if (a1 != 3)
  {
    if (a3)
    {
      if (*(_QWORD *)a3)
      {
        v5 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
        MutableCopy = (const __CFString *)CFDictionaryCreateMutableCopy((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, theDict);
        if (MutableCopy)
        {
          v12 = (const __CFDictionary *)MutableCopy;
          v90[0] = 0;
          v88 = 0;
          sub_21A693B94(MutableCopy, (uint64_t)v90, (UInt8 *)"%ks", v7, v8, v9, v10, v11, (uint64_t)"services");
          if (!v13)
          {
            if (v90[0])
            {
              Count = CFArrayGetCount((CFArrayRef)v90[0]);
              if (Count)
              {
                v20 = Count;
                if (Count >= 1)
                {
                  v21 = 0;
                  do
                  {
                    v87 = 0;
                    sub_21A693B94((const __CFString *)v90[0], (uint64_t)&v87, (UInt8 *)"[*]", v15, v16, v17, v18, v19, v21);
                    if (v27)
                      goto LABEL_6;
                    if (!v87)
                      goto LABEL_6;
                    sub_21A693B94(v87, (uint64_t)&v88, (UInt8 *)"%ks", v22, v23, v24, v25, v26, (uint64_t)"ifname");
                    if (v33)
                      goto LABEL_6;
                    *(_QWORD *)key = 0;
                    sub_21A693B94(*(const __CFString **)(a3 + 48), (uint64_t)key, (UInt8 *)"%kO", v28, v29, v30, v31, v32, (uint64_t)v88);
                    if (*(_QWORD *)key)
                    {
                      if (sub_21A693A8C(v5, (__CFArray *)v87, (uint64_t)"%kO=%O", v15, v16, v17, v18, v19, (uint64_t)CFSTR("wifiname")))goto LABEL_6;
                    }
                  }
                  while (v20 != ++v21);
                }
                v34 = (const __CFData *)CFDictionaryGetValue(v12, CFSTR("txt"));
                if (v34)
                {
                  v35 = v34;
                  Mutable = CFDictionaryCreateMutable(v5, 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
                  if (Mutable)
                  {
                    theDicta = Mutable;
                    cf = 0;
                    value = 0;
                    valueLen = 0;
                    BytePtr = CFDataGetBytePtr(v35);
                    Length = CFDataGetLength(v35);
                    v39 = TXTRecordGetCount(Length, BytePtr);
                    if (v39)
                    {
                      v40 = v39;
                      v41 = 0;
                      v82 = (const void *)*MEMORY[0x24BDBD270];
                      do
                      {
                        if (!TXTRecordGetItemAtIndex(Length, BytePtr, v41, 0x20u, (char *)key, &valueLen, (const void **)&value)&& strlen((const char *)key) == 4)
                        {
                          v42 = bswap32(key[0]);
                          if (!sub_21A674750(v42, (UInt8 *)value, valueLen, (CFStringRef *)&cf))
                          {
                            v48 = sub_21A693A8C(0, theDicta, (uint64_t)"%kC=%O", v43, v44, v45, v46, v47, v42);
                            CFRelease(cf);
                            if ((_DWORD)v42 == 1886547810 && !v48)
                            {
                              v54 = (unsigned __int8 *)value;
                              v55 = valueLen;
                              v87 = 0;
                              v88 = value;
                              if (!sub_21A693A8C(0, theDicta, (uint64_t)"%kO=[%@]", v49, v50, v51, v52, v53, (uint64_t)CFSTR("problemArray")))
                              {
                                if ((_DWORD)v55)
                                {
                                  v81 = BytePtr;
                                  v56 = v55;
                                  v57 = 0;
                                  v58 = (unint64_t)&v54[v56];
                                  do
                                  {
                                    v59 = v58;
                                    if (sub_21A6A2F38(v54, v58, 0x3Bu, v90, 16, 0, 0, (unsigned __int8 **)&v88))break;
                                    sub_21A693A8C(0, (__CFArray *)v87, (uint64_t)"%s", v60, v61, v62, v63, v64, (uint64_t)v90);
                                    if (LOWORD(v90[0]) == 43)
                                      v57 = 1;
                                    v54 = (unsigned __int8 *)v88;
                                    v58 = v59;
                                  }
                                  while ((unint64_t)v88 < v59);
                                  BytePtr = v81;
                                  if (v57)
                                    CFDictionarySetValue(theDicta, CFSTR("hasMoreProblems"), v82);
                                }
                              }
                            }
                          }
                        }
                        ++v41;
                      }
                      while (v40 > v41);
                    }
                    v88 = 0;
                    if (!CFDictionaryGetValue(theDicta, CFSTR("syVs")))
                    {
                      v90[0] = 0;
                      v70 = (const __CFString *)CFDictionaryGetValue(theDicta, CFSTR("syDs"));
                      if (v70 && !sub_21A694C44(v70, v90, (UInt8 **)&v88))
                      {
                        v71 = (char *)v90[0];
                        v72 = strstr((char *)v90[0], " V");
                        if (v72)
                          v71 = v72 + 2;
                        if (!sub_21A6A2044(v71, -1, 0))
                        {
                          v73 = CFStringCreateWithCString(v5, v71, 0x8000100u);
                          if (v73)
                          {
                            v74 = v73;
                            CFDictionarySetValue(theDicta, CFSTR("syVs"), v73);
                            CFRelease(v74);
                          }
                        }
                      }
                      if (v88)
                        free(v88);
                    }
                    v75 = sub_21A693A8C(v5, v12, (uint64_t)"%kO=%O", v65, v66, v67, v68, v69, (uint64_t)CFSTR("txt"));
                    CFRelease(theDicta);
                    if (!v75 && !sub_21A693B5C((uint64_t)v12, theDicta))
                    {
                      if (a1 == 2)
                      {
                        if (dword_2550EE490 <= 3000
                          && (dword_2550EE490 != -1 || sub_21A69876C((uint64_t)&dword_2550EE490, 0xBB8u)))
                        {
                          sub_21A698FDC((uint64_t)&dword_2550EE490, (uint64_t)"void browserCallBack(BonjourBrowserEventType, CFDictionaryRef, void *)", 3000, (uint64_t)"%s: removed service: %@\n", v76, v77, v78, v79, (uint64_t)"browserCallBack");
                        }
                        v80 = *(const void **)(a3 + 32);
                        goto LABEL_62;
                      }
                      if (a1 == 1)
                      {
                        if (dword_2550EE490 <= 100
                          && (dword_2550EE490 != -1 || sub_21A69876C((uint64_t)&dword_2550EE490, 0x64u)))
                        {
                          sub_21A698FDC((uint64_t)&dword_2550EE490, (uint64_t)"void browserCallBack(BonjourBrowserEventType, CFDictionaryRef, void *)", 100, (uint64_t)"%s: starting resolve for service: %@\n", v76, v77, v78, v79, (uint64_t)"browserCallBack");
                        }
                        v80 = *(const void **)(a3 + 24);
LABEL_62:
                        sub_21A67A200(a3, v80, v12);
                      }
                    }
                  }
                }
              }
            }
          }
LABEL_6:
          CFRelease(v12);
        }
      }
    }
  }
}

void sub_21A67A200(uint64_t a1, const void *a2, const void *a3)
{
  _QWORD *v6;
  _QWORD *v7;

  v6 = malloc_type_calloc(1uLL, 0x10uLL, 0x600405BB7FD7CuLL);
  if (v6)
  {
    v7 = v6;
    *v6 = a2;
    CFRetain(a2);
    v7[1] = a3;
    CFRetain(a3);
    dispatch_async_f(*(dispatch_queue_t *)(a1 + 16), v7, (dispatch_function_t)sub_21A67A288);
  }
}

void sub_21A67A288(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  __CFNotificationCenter *LocalCenter;
  const void *v10;

  if (dword_2550EE490 <= 3000 && (dword_2550EE490 != -1 || sub_21A69876C((uint64_t)&dword_2550EE490, 0xBB8u)))
    sub_21A698FDC((uint64_t)&dword_2550EE490, (uint64_t)"void __NotifyServiceAsync(void *)", 3000, (uint64_t)"%s: notify service\n", a5, a6, a7, a8, (uint64_t)"__NotifyServiceAsync");
  LocalCenter = CFNotificationCenterGetLocalCenter();
  if (LocalCenter)
    CFNotificationCenterPostNotificationWithOptions(LocalCenter, *(CFNotificationName *)a1, 0, *(CFDictionaryRef *)(a1 + 8), 1uLL);
  if (*(_QWORD *)a1)
  {
    CFRelease(*(CFTypeRef *)a1);
    *(_QWORD *)a1 = 0;
  }
  v10 = *(const void **)(a1 + 8);
  if (v10)
    CFRelease(v10);
  free((void *)a1);
}

uint64_t sub_21A67BE2C(uint64_t inSystemSoundID)
{
  if ((_DWORD)inSystemSoundID)
    return AudioServicesDisposeSystemSoundID(inSystemSoundID);
  return inSystemSoundID;
}

uint64_t sub_21A6829C8(void *a1, char *a2, void *a3)
{
  const char *v6;
  const char *v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;

  if (objc_msgSend_length(a3, a2, (uint64_t)a3))
    objc_msgSend_setText_(a1, v6, (uint64_t)a3);
  else
    objc_msgSend_setText_(a1, v6, (uint64_t)CFSTR("\n"));
  objc_msgSend_sizeToFit(a1, v7, v8);
  objc_msgSend_setNeedsLayout(a1, v9, v10);
  return objc_msgSend_setNeedsLayout(a2, v11, v12);
}

BOOL sub_21A682B48(_BOOL8 result, int a2)
{
  void *v2;
  uint64_t v3;
  const char *v4;

  if (result)
  {
    v2 = (void *)result;
    v3 = sub_21A690CA4(a2);
    return objc_msgSend_indexOfObject_(v2, v4, v3) != 0x7FFFFFFFFFFFFFFFLL;
  }
  return result;
}

uint64_t sub_21A682B88(int a1, const char *a2)
{
  const char *v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v6 = 0;
  if (a1 > 1651722063)
  {
    if (a1 != 1651722064 && a1 != 1651725131)
      goto LABEL_12;
    v4 = 63;
LABEL_9:
    v6 = v4;
    v5 = 3;
    return objc_msgSend_formatterForBSFormatter_withMaxLen_(APFormatter, a2, v5);
  }
  if (a1 == 1651716432)
  {
    v4 = sub_21A6D4F98(1651721296);
    goto LABEL_9;
  }
  if (a1 == 1651720528)
  {
    v6 = sub_21A6D4F98(1651721296);
    return objc_msgSend_formatterForBSFormatter_withMaxLen_(APFormatter, v2, 1);
  }
LABEL_12:
  v5 = sub_21A6D6FE4(a1, &v6);
  result = 0;
  if ((_DWORD)v5 && v6)
    return objc_msgSend_formatterForBSFormatter_withMaxLen_(APFormatter, a2, v5);
  return result;
}

uint64_t sub_21A6860C8(const __CFString *a1, CFTypeRef *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const __CFString *v19;
  _BOOL4 v20;
  CFTypeID v21;
  size_t v23;
  CFTypeRef cf;
  void *v25;
  char *__s;

  cf = 0;
  if (a2)
    *a2 = 0;
  if (!a1)
    return 0;
  sub_21A693B94(a1, (uint64_t)&cf, (UInt8 *)"%kO.%kO", a4, a5, a6, a7, a8, (uint64_t)CFSTR("kNetworkLinkManager_LinkChangeKey_IPv4Dict"));
  if (v10 == -6727)
  {
    sub_21A693B94(a1, (uint64_t)&cf, (UInt8 *)"%kO.%kO", v11, v12, v13, v14, v15, (uint64_t)CFSTR("kNetworkLinkManager_LinkChangeKey_IPv6Dict"));
    if (v10 == -6727)
    {
      sub_21A693B94(a1, (uint64_t)&cf, (UInt8 *)"%kO.%kO.[*]", v16, v12, v13, v14, v15, (uint64_t)CFSTR("kNetworkLinkManager_LinkChangeKey_IPv6Dict"));
      if (v10 == -6727)
        sub_21A693B94(a1, (uint64_t)&cf, (UInt8 *)"%kO.%kO.[*]", v17, v12, v13, v14, v15, (uint64_t)CFSTR("kNetworkLinkManager_LinkChangeKey_IPv4Dict"));
    }
  }
  v18 = 0;
  if (!v10)
  {
    v19 = (const __CFString *)cf;
    if (cf)
    {
      if (dword_2550EE850 <= 800)
      {
        if (dword_2550EE850 != -1
          || (v20 = sub_21A69876C((uint64_t)&dword_2550EE850, 0x320u), v19 = (const __CFString *)cf, v20))
        {
          sub_21A698FDC((uint64_t)&dword_2550EE850, (uint64_t)"uint32_t _NetworkLinkManager_GetNetworkSignatureAndHashIdentifier(CFDictionaryRef, CFStringRef *)", 800, (uint64_t)"hashStr: %@\n", v12, v13, v14, v15, (uint64_t)v19);
          v19 = (const __CFString *)cf;
        }
      }
      v21 = CFGetTypeID(v19);
      if (v21 == CFStringGetTypeID()
        && (v25 = 0, __s = 0, !sub_21A694C44(v19, (const char **)&__s, (UInt8 **)&v25)))
      {
        v23 = strlen(__s);
        v18 = sub_21A69D330(1u, 0, (unsigned __int8 *)__s, v23);
        if (v25)
          free(v25);
      }
      else
      {
        v18 = 0;
      }
      if (a2)
        *a2 = cf;
    }
  }
  return v18;
}

uint64_t sub_21A6862B0(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t Instance;
  uint64_t v10;
  const __CFAllocator *v11;
  SCDynamicStoreRef v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  SCPreferencesRef v20;
  const __CFString *v21;
  const __CFString *v22;
  const __CFString *v23;
  const __CFString *v24;
  CFStringRef NetworkServiceEntity;
  CFStringRef v26;
  CFStringRef v27;
  const __SCDynamicStore *v28;
  const __CFString *v29;
  const __CFDictionary *v30;
  const void *Value;
  Boolean v32;
  uint64_t v34;

  if (dword_2550EE850 <= 800 && (dword_2550EE850 != -1 || sub_21A69876C((uint64_t)&dword_2550EE850, 0x320u)))
    sub_21A698FDC((uint64_t)&dword_2550EE850, (uint64_t)"OSStatus _NetworkLinkManager_Create(CFAllocatorRef, CFStringRef, CFNetworkLinkManagerContextRef *)", 800, (uint64_t)" \n", a5, a6, a7, a8, v34);
  if (!a2)
    return 0;
  if (!qword_2550F4CC0)
    qword_2550F4CC0 = _CFRuntimeRegisterClass();
  Instance = _CFRuntimeCreateInstance();
  v10 = Instance;
  if (Instance)
  {
    *(_QWORD *)(Instance + 24) = 0;
    *(_QWORD *)(Instance + 32) = Instance;
    *(_QWORD *)(Instance + 40) = 0;
    *(_QWORD *)(Instance + 48) = 0;
    *(_QWORD *)(Instance + 56) = 0;
    v11 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
    v12 = SCDynamicStoreCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], CFSTR("com.apple.airport.airportutility"), (SCDynamicStoreCallBack)sub_21A686CAC, (SCDynamicStoreContext *)(Instance + 24));
    *(_QWORD *)(v10 + 16) = v12;
    if (v12)
    {
      v20 = SCPreferencesCreateWithAuthorization(v11, CFSTR("com.apple.airport.airportutility"), 0, 0);
      *(_QWORD *)(v10 + 64) = v20;
      if (v20)
      {
        *(_QWORD *)(v10 + 88) = a2;
        CFRetain(a2);
        v21 = *(const __CFString **)(v10 + 88);
        if (dword_2550EE850 <= 800 && (dword_2550EE850 != -1 || sub_21A69876C((uint64_t)&dword_2550EE850, 0x320u)))
          sub_21A698FDC((uint64_t)&dword_2550EE850, (uint64_t)"OSStatus _NetworkLink_InitDynamicStoreInfo(CFNetworkLinkManagerContextRef, CFStringRef)", 800, (uint64_t)" \n", v16, v17, v18, v19, v34);
        if (v21)
        {
          if (*(_QWORD *)(v10 + 16))
          {
            if (*(_QWORD *)(v10 + 64))
            {
              v22 = sub_21A686FA4(v10, v21);
              if (v22)
              {
                v23 = v22;
                v24 = (const __CFString *)*MEMORY[0x24BDF59B0];
                NetworkServiceEntity = SCDynamicStoreKeyCreateNetworkServiceEntity(v11, (CFStringRef)*MEMORY[0x24BDF59B0], v22, (CFStringRef)*MEMORY[0x24BDF59F0]);
                *(_QWORD *)(v10 + 80) = NetworkServiceEntity;
                if (NetworkServiceEntity)
                {
                  v26 = SCDynamicStoreKeyCreateNetworkServiceEntity(v11, v24, v23, (CFStringRef)*MEMORY[0x24BDF59F8]);
                  *(_QWORD *)(v10 + 112) = v26;
                  if (v26)
                  {
                    v27 = SCDynamicStoreKeyCreateNetworkServiceEntity(v11, v24, v23, (CFStringRef)*MEMORY[0x24BDF59D8]);
                    *(_QWORD *)(v10 + 104) = v27;
                    if (v27)
                    {
                      v28 = *(const __SCDynamicStore **)(v10 + 16);
                      v29 = SCDynamicStoreKeyCreateNetworkServiceEntity(v11, (CFStringRef)*MEMORY[0x24BDF59A8], v23, (CFStringRef)*MEMORY[0x24BDF5A00]);
                      v30 = (const __CFDictionary *)SCDynamicStoreCopyValue(v28, v29);
                      if (v29)
                        CFRelease(v29);
                      if (v30)
                      {
                        Value = CFDictionaryGetValue(v30, (const void *)*MEMORY[0x24BDF5B40]);
                        if (Value)
                          v32 = CFEqual(Value, (CFTypeRef)*MEMORY[0x24BDF59C0]);
                        else
                          v32 = 0;
                        CFRelease(v30);
                      }
                      else
                      {
                        v32 = 0;
                      }
                      *(_BYTE *)(v10 + 120) = v32;
                      CFRelease(v23);
                      return v10;
                    }
                  }
                }
                CFRelease(v23);
              }
            }
          }
        }
      }
    }
    sub_21A686888(v10, v13, v14, v15, v16, v17, v18, v19);
    return 0;
  }
  return v10;
}

uint64_t sub_21A686574(uint64_t a1, CFTypeRef cf)
{
  uint64_t v2;
  CFTypeRef v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const __CFAllocator *v11;
  const __CFString *v12;
  const __CFString *v13;
  CFStringRef NetworkServiceEntity;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  CFStringRef v20;
  CFStringRef v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  CFStringRef v27;
  CFStringRef NetworkInterfaceEntity;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  CFStringRef v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  CFRunLoopSourceRef RunLoopSource;
  __CFRunLoop *Main;
  const char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  CFArrayRef patterns;

  v2 = 4294960591;
  if (!a1 || !cf)
    return v2;
  v5 = *(CFTypeRef *)(a1 + 96);
  if (v5 != cf && v5 != 0)
    CFRelease(v5);
  *(_QWORD *)(a1 + 96) = cf;
  CFRetain(cf);
  patterns = 0;
  if (dword_2550EE850 <= 800 && (dword_2550EE850 != -1 || sub_21A69876C((uint64_t)&dword_2550EE850, 0x320u)))
    sub_21A698FDC((uint64_t)&dword_2550EE850, (uint64_t)"OSStatus _NetworkLink_InitDynamicStoreMonitor(CFNetworkLinkManagerContextRef)", 800, (uint64_t)" \n", v7, v8, v9, v10, v48);
  if (*(_QWORD *)(a1 + 16) && *(_QWORD *)(a1 + 64))
  {
    v11 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
    v12 = (const __CFString *)*MEMORY[0x24BDF59B0];
    v13 = (const __CFString *)*MEMORY[0x24BDF5990];
    NetworkServiceEntity = SCDynamicStoreKeyCreateNetworkServiceEntity((CFAllocatorRef)*MEMORY[0x24BDBD240], (CFStringRef)*MEMORY[0x24BDF59B0], (CFStringRef)*MEMORY[0x24BDF5990], (CFStringRef)*MEMORY[0x24BDF59F0]);
    if (NetworkServiceEntity)
    {
      v20 = NetworkServiceEntity;
      v2 = sub_21A692FEC(v11, (CFTypeRef *)&patterns, (uint64_t)"[%O]", v15, v16, v17, v18, v19, (uint64_t)NetworkServiceEntity);
      CFRelease(v20);
      if ((_DWORD)v2)
        goto LABEL_31;
      if (!patterns)
        return 4294960568;
      v21 = SCDynamicStoreKeyCreateNetworkServiceEntity(v11, v12, v13, (CFStringRef)*MEMORY[0x24BDF59F8]);
      if (v21)
      {
        v27 = v21;
        v2 = sub_21A693A8C(v11, patterns, (uint64_t)"%O", v22, v23, v24, v25, v26, (uint64_t)v21);
        CFRelease(v27);
        if ((_DWORD)v2)
          goto LABEL_31;
        NetworkInterfaceEntity = SCDynamicStoreKeyCreateNetworkInterfaceEntity(v11, v12, v13, (CFStringRef)*MEMORY[0x24BDF5A10]);
        if (NetworkInterfaceEntity)
        {
          v34 = NetworkInterfaceEntity;
          v2 = sub_21A693A8C(v11, patterns, (uint64_t)"%O", v29, v30, v31, v32, v33, (uint64_t)NetworkInterfaceEntity);
          CFRelease(v34);
          if (!(_DWORD)v2)
          {
            if (dword_2550EE850 <= 800 && (dword_2550EE850 != -1 || sub_21A69876C((uint64_t)&dword_2550EE850, 0x320u)))
              sub_21A698FDC((uint64_t)&dword_2550EE850, (uint64_t)"OSStatus _NetworkLink_InitDynamicStoreMonitor(CFNetworkLinkManagerContextRef)", 800, (uint64_t)"SCDynamicStoreSetNotificationKeys keys: %@ patterns: %@\n", v35, v36, v37, v38, 0);
            v39 = SCDynamicStoreSetNotificationKeys(*(SCDynamicStoreRef *)(a1 + 16), 0, patterns);
            if (patterns)
            {
              CFRelease(patterns);
              patterns = 0;
            }
            if (v39)
              goto LABEL_28;
            v2 = SCError();
            if (dword_2550EE850 <= 800 && (dword_2550EE850 != -1 || sub_21A69876C((uint64_t)&dword_2550EE850, 0x320u)))
            {
              v43 = SCErrorString(v2);
              sub_21A698FDC((uint64_t)&dword_2550EE850, (uint64_t)"OSStatus _NetworkLink_InitDynamicStoreMonitor(CFNetworkLinkManagerContextRef)", 800, (uint64_t)"SCDynamicStoreSetNotificationKeys failed: %s\n", v44, v45, v46, v47, (uint64_t)v43);
            }
            if (!(_DWORD)v2)
            {
LABEL_28:
              RunLoopSource = SCDynamicStoreCreateRunLoopSource(v11, *(SCDynamicStoreRef *)(a1 + 16), 0);
              *(_QWORD *)(a1 + 72) = RunLoopSource;
              if (RunLoopSource)
              {
                Main = CFRunLoopGetMain();
                CFRunLoopAddSource(Main, *(CFRunLoopSourceRef *)(a1 + 72), (CFRunLoopMode)*MEMORY[0x24BDBD5A0]);
                v2 = 0;
              }
              else
              {
                v2 = 4294960578;
              }
            }
          }
          goto LABEL_31;
        }
      }
    }
    v2 = 4294960568;
  }
LABEL_31:
  if (patterns)
    CFRelease(patterns);
  return v2;
}

uint64_t sub_21A686888(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  __CFRunLoop *Main;
  const void *v10;
  const void *v11;
  const void *v12;
  const void *v13;
  const void *v14;
  const void *v15;
  uint64_t result;
  uint64_t v17;

  if (dword_2550EE850 <= 800 && (dword_2550EE850 != -1 || sub_21A69876C((uint64_t)&dword_2550EE850, 0x320u)))
    sub_21A698FDC((uint64_t)&dword_2550EE850, (uint64_t)"OSStatus NetworkLinkManager_Release(CFNetworkLinkManagerContextRef)", 800, (uint64_t)" \n", a5, a6, a7, a8, v17);
  if (!a1)
    return 4294960591;
  if (*(_QWORD *)(a1 + 72))
  {
    SCDynamicStoreSetNotificationKeys(*(SCDynamicStoreRef *)(a1 + 16), 0, 0);
    Main = CFRunLoopGetMain();
    CFRunLoopRemoveSource(Main, *(CFRunLoopSourceRef *)(a1 + 72), (CFRunLoopMode)*MEMORY[0x24BDBD5A0]);
    v10 = *(const void **)(a1 + 72);
    if (v10)
    {
      CFRelease(v10);
      *(_QWORD *)(a1 + 72) = 0;
    }
  }
  v11 = *(const void **)(a1 + 88);
  if (v11)
  {
    CFRelease(v11);
    *(_QWORD *)(a1 + 88) = 0;
  }
  v12 = *(const void **)(a1 + 64);
  if (v12)
  {
    CFRelease(v12);
    *(_QWORD *)(a1 + 64) = 0;
  }
  v13 = *(const void **)(a1 + 16);
  if (v13)
  {
    CFRelease(v13);
    *(_QWORD *)(a1 + 16) = 0;
  }
  v14 = *(const void **)(a1 + 80);
  if (v14)
  {
    CFRelease(v14);
    *(_QWORD *)(a1 + 80) = 0;
  }
  v15 = *(const void **)(a1 + 112);
  if (v15)
  {
    CFRelease(v15);
    *(_QWORD *)(a1 + 112) = 0;
  }
  result = *(_QWORD *)(a1 + 104);
  if (result)
  {
    CFRelease((CFTypeRef)result);
    result = 0;
    *(_QWORD *)(a1 + 104) = 0;
  }
  return result;
}

uint64_t sub_21A6869A0(uint64_t a1, char *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  const __CFString *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const __CFString *v15;
  const __CFString *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  const __CFString *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  CFPropertyListRef v30;
  const __CFAllocator *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  CFTypeRef v44;
  const __CFDictionary *v45;
  __CFString *v46;

  v46 = 0;
  v3 = 4294960591;
  if (!a1 || !a2)
    return v3;
  v44 = 0;
  v45 = 0;
  if (!*(_BYTE *)(a1 + 120))
    goto LABEL_9;
  v6 = sub_21A72E138(&v45, a2, a3);
  if ((_DWORD)v6 == -6727)
    goto LABEL_9;
  v3 = v6;
  if (!(_DWORD)v6)
  {
    if (v45)
    {
      CFDictionaryGetValue(v45, CFSTR("SSID_STR"));
      if (v45)
      {
        CFRelease(v45);
        v45 = 0;
      }
LABEL_9:
      v7 = (const __CFString *)SCDynamicStoreCopyValue(*(SCDynamicStoreRef *)(a1 + 16), *(CFStringRef *)(a1 + 80));
      v15 = sub_21A686C10(v7, v8, v9, v10, v11, v12, v13, v14);
      v16 = (const __CFString *)SCDynamicStoreCopyValue(*(SCDynamicStoreRef *)(a1 + 16), *(CFStringRef *)(a1 + 112));
      v24 = v16;
      if (!(_DWORD)v15)
        v15 = sub_21A686C10(v16, v17, v18, v19, v20, v21, v22, v23);
      v30 = SCDynamicStoreCopyValue(*(SCDynamicStoreRef *)(a1 + 16), *(CFStringRef *)(a1 + 104));
      if (dword_2550EE850 <= 800 && (dword_2550EE850 != -1 || sub_21A69876C((uint64_t)&dword_2550EE850, 0x320u)))
        sub_21A698FDC((uint64_t)&dword_2550EE850, (uint64_t)"OSStatus NetworkLinkManager_CopyLinkStatusDictionary(CFNetworkLinkManagerContextRef, CFDictionaryRef *)", 800, (uint64_t)"linkState: %d wifiName: %@ ipDict: %@ ipV6Dict: %@\n", v26, v27, v28, v29, (uint64_t)v15);
      v31 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
      v3 = sub_21A692FEC((const __CFAllocator *)*MEMORY[0x24BDBD240], (CFTypeRef *)&v46, (uint64_t)"{%kO=%O%kO=%b%kO=%i%kO=%O%kO=%O%kO=%O%kO=%O}", v25, v26, v27, v28, v29, (uint64_t)CFSTR("kNetworkLinkManager_LinkChangeKey_IfName"));
      if (!(_DWORD)v3)
      {
        if (v46)
        {
          v44 = 0;
          sub_21A6860C8(v46, &v44, v32, v33, v34, v35, v36, v37);
          v3 = sub_21A693A8C(v31, (__CFArray *)v46, (uint64_t)"%kO=%lli%kO=%O", v39, v40, v41, v42, v43, (uint64_t)CFSTR("kNetworkLinkManager_LinkChangeKey_HashIdentifier"));
          if (!(_DWORD)v3)
          {
            *(_QWORD *)a2 = v46;
            v46 = 0;
          }
        }
        else
        {
          v3 = 4294960568;
        }
      }
      if (v7)
        CFRelease(v7);
      if (v24)
        CFRelease(v24);
      if (v30)
        CFRelease(v30);
      goto LABEL_22;
    }
    v3 = 4294960568;
  }
LABEL_22:
  if (v46)
    CFRelease(v46);
  return v3;
}

const __CFString *sub_21A686C10(const __CFString *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  const __CFString *v8;
  int v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __CFString *v17;

  if (result)
  {
    v8 = result;
    v17 = 0;
    sub_21A693B94(result, (uint64_t)&v17, (UInt8 *)"%kO", a4, a5, a6, a7, a8, *MEMORY[0x24BDF5AD8]);
    if (v9 == -6727)
      sub_21A693B94(v8, (uint64_t)&v17, (UInt8 *)"%kO", v12, v13, v14, v15, v16, *MEMORY[0x24BDF5B08]);
    if (v9)
    {
      return 0;
    }
    else
    {
      result = v17;
      if (v17)
        return (const __CFString *)(objc_msgSend_count(v17, v10, v11) != 0);
    }
  }
  return result;
}

void sub_21A686CAC(const __SCDynamicStore *a1, CFArrayRef theArray, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  CFIndex Count;
  CFIndex v11;
  CFIndex v12;
  const __CFAllocator *v13;
  const __CFString *ValueAtIndex;
  const __CFString *v15;
  const __CFArray *ArrayBySeparatingStrings;
  const __CFArray *v17;
  const __CFString *v18;
  const __CFString *v19;
  const __CFString *v20;
  const __CFString *NetworkServiceEntity;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  const __CFDictionary *v26;
  const void *Value;
  int v28;
  const void *v29;
  CFNotificationCenterRef LocalCenter;
  uint64_t v31;
  __CFNotificationCenter *v32;
  const __CFString *suffix;
  int v34;
  void *key;
  const __CFString *v36;
  const __CFString *v37;
  CFDictionaryRef userInfo;

  if (dword_2550EE850 <= 800 && (dword_2550EE850 != -1 || sub_21A69876C((uint64_t)&dword_2550EE850, 0x320u)))
    sub_21A698FDC((uint64_t)&dword_2550EE850, (uint64_t)"void _NetworkLink__DynamicStoreChanged(SCDynamicStoreRef, CFArrayRef, void *)", 800, (uint64_t)"changedKeys: %@ \n", a5, a6, a7, a8, (uint64_t)theArray);
  if (a3)
  {
    Count = CFArrayGetCount(theArray);
    if (Count >= 1)
    {
      v11 = Count;
      v34 = 0;
      v12 = 0;
      v13 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
      v37 = (const __CFString *)*MEMORY[0x24BDF59A8];
      v36 = (const __CFString *)*MEMORY[0x24BDF5A00];
      key = (void *)*MEMORY[0x24BDF5B38];
      suffix = (const __CFString *)*MEMORY[0x24BDF59F0];
      while (1)
      {
        ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(theArray, v12);
        if (!ValueAtIndex)
          goto LABEL_32;
        if (!*(_QWORD *)(a3 + 88))
          goto LABEL_32;
        v15 = ValueAtIndex;
        ArrayBySeparatingStrings = CFStringCreateArrayBySeparatingStrings(v13, ValueAtIndex, CFSTR("/"));
        if (!ArrayBySeparatingStrings)
          goto LABEL_32;
        v17 = ArrayBySeparatingStrings;
        if (CFArrayGetCount(ArrayBySeparatingStrings) == 5)
        {
          v18 = (const __CFString *)CFArrayGetValueAtIndex(v17, 3);
          if (CFStringGetLength(v18) > 4)
          {
            NetworkServiceEntity = SCDynamicStoreKeyCreateNetworkServiceEntity(v13, v37, v18, v36);
LABEL_16:
            v26 = (const __CFDictionary *)SCDynamicStoreCopyValue(a1, NetworkServiceEntity);
            if (dword_2550EE850 <= 800 && (dword_2550EE850 != -1 || sub_21A69876C((uint64_t)&dword_2550EE850, 0x320u)))
              sub_21A698FDC((uint64_t)&dword_2550EE850, (uint64_t)"Boolean _NetworkLink__IsMyInterfaceName(CFNetworkLinkManagerContextRef, SCDynamicStoreRef, CFStringRef)", 800, (uint64_t)"interface_key: %@ returned interface_dict: %@ \n", v22, v23, v24, v25, (uint64_t)NetworkServiceEntity);
            if (NetworkServiceEntity)
              CFRelease(NetworkServiceEntity);
            CFRelease(v17);
            if (!v26)
              goto LABEL_32;
            Value = CFDictionaryGetValue(v26, key);
            if (Value)
            {
              v28 = CFEqual(Value, *(CFTypeRef *)(a3 + 88));
              CFRelease(v26);
              if (v28)
              {
                if (CFStringHasSuffix(v15, suffix))
                {
                  v29 = *(const void **)(a3 + 80);
                  if (v29)
                    CFRelease(v29);
                  *(_QWORD *)(a3 + 80) = v15;
                  CFRetain(v15);
                }
                v34 = 1;
              }
              goto LABEL_32;
            }
            v17 = v26;
            goto LABEL_31;
          }
          v19 = sub_21A686FA4(a3, v18);
          if (v19)
          {
            v20 = v19;
            NetworkServiceEntity = SCDynamicStoreKeyCreateNetworkServiceEntity(v13, v37, v19, v36);
            CFRelease(v20);
            goto LABEL_16;
          }
        }
LABEL_31:
        CFRelease(v17);
LABEL_32:
        if (v11 == ++v12)
        {
          if (v34)
          {
            if (*(_QWORD *)(a3 + 96))
            {
              LocalCenter = CFNotificationCenterGetLocalCenter();
              if (LocalCenter)
              {
                v32 = LocalCenter;
                userInfo = 0;
                if (!sub_21A6869A0(a3, (char *)&userInfo, v31))
                {
                  if (userInfo)
                  {
                    CFNotificationCenterPostNotificationWithOptions(v32, *(CFNotificationName *)(a3 + 96), 0, userInfo, 1uLL);
                    if (userInfo)
                      CFRelease(userInfo);
                  }
                }
              }
            }
          }
          return;
        }
      }
    }
  }
}

CFStringRef sub_21A686FA4(uint64_t a1, const __CFString *a2)
{
  const __SCNetworkSet *v3;
  const __SCNetworkSet *v4;
  const __CFArray *v5;
  CFIndex Count;
  CFIndex v7;
  CFIndex v8;
  const __SCNetworkService *ValueAtIndex;
  const __SCNetworkService *v10;
  const __SCNetworkInterface *Interface;
  const __SCNetworkInterface *v12;
  const __CFString *BSDName;
  CFStringRef v14;
  CFStringRef ServiceID;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  if (!a2)
    return 0;
  v3 = SCNetworkSetCopyCurrent(*(SCPreferencesRef *)(a1 + 64));
  if (!v3)
    return 0;
  v4 = v3;
  v5 = SCNetworkSetCopyServices(v3);
  Count = CFArrayGetCount(v5);
  if (Count >= 1)
  {
    v7 = Count;
    v8 = 0;
    while (1)
    {
      ValueAtIndex = (const __SCNetworkService *)CFArrayGetValueAtIndex(v5, v8);
      if (ValueAtIndex)
      {
        v10 = ValueAtIndex;
        Interface = SCNetworkServiceGetInterface(ValueAtIndex);
        if (Interface)
        {
          v12 = Interface;
          if (SCNetworkInterfaceGetInterfaceType(Interface))
          {
            BSDName = SCNetworkInterfaceGetBSDName(v12);
            if (BSDName)
            {
              if (CFStringCompare(BSDName, a2, 0) == kCFCompareEqualTo)
                break;
            }
          }
        }
      }
      if (v7 == ++v8)
        goto LABEL_11;
    }
    CFRetain(v10);
    ServiceID = SCNetworkServiceGetServiceID(v10);
    v14 = ServiceID;
    if (ServiceID)
    {
      CFRetain(ServiceID);
      if (dword_2550EE850 <= 800 && (dword_2550EE850 != -1 || sub_21A69876C((uint64_t)&dword_2550EE850, 0x320u)))
        sub_21A698FDC((uint64_t)&dword_2550EE850, (uint64_t)"CFStringRef _NetworkLink__CopyServiceIDForIfName(CFNetworkLinkManagerContextRef, CFStringRef)", 800, (uint64_t)"inIfName: %@ mapped to foundServiceID: %@ \n", v17, v18, v19, v20, (uint64_t)a2);
    }
    CFRelease(v10);
    if (!v5)
      goto LABEL_13;
    goto LABEL_12;
  }
LABEL_11:
  v14 = 0;
  if (v5)
LABEL_12:
    CFRelease(v5);
LABEL_13:
  CFRelease(v4);
  return v14;
}

uint64_t sub_21A687104(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;

  if (dword_2550EE850 <= 800 && (dword_2550EE850 != -1 || sub_21A69876C((uint64_t)&dword_2550EE850, 0x320u)))
    sub_21A698FDC((uint64_t)&dword_2550EE850, (uint64_t)"void __NetworkLinkDealloc(CFTypeRef)", 800, (uint64_t)"\n", a5, a6, a7, a8, v10);
  return sub_21A686888(a1, a2, a3, a4, a5, a6, a7, a8);
}

BOOL sub_21A687170(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BOOL8 result;
  uint64_t v11;

  if (dword_2550EE850 <= 800 && (dword_2550EE850 != -1 || sub_21A69876C((uint64_t)&dword_2550EE850, 0x320u)))
    sub_21A698FDC((uint64_t)&dword_2550EE850, (uint64_t)"Boolean __NetworkLinkEqual(CFTypeRef, CFTypeRef)", 800, (uint64_t)"\n", a5, a6, a7, a8, v11);
  if (a1 == a2)
    return 1;
  result = 0;
  if (a1)
  {
    if (a2)
      return CFStringCompare(*(CFStringRef *)(a1 + 88), *(CFStringRef *)(a2 + 88), 0) == kCFCompareEqualTo;
  }
  return result;
}

unint64_t sub_21A687210(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;

  if (dword_2550EE850 <= 800 && (dword_2550EE850 != -1 || sub_21A69876C((uint64_t)&dword_2550EE850, 0x320u)))
    sub_21A698FDC((uint64_t)&dword_2550EE850, (uint64_t)"CFHashCode __NetworkLinkHash(CFTypeRef)", 800, (uint64_t)"\n", a5, a6, a7, a8, v10);
  return a1 >> 2;
}

CFStringRef sub_21A68727C(CFStringRef result)
{
  _QWORD *p_isa;
  const __CFAllocator *v2;
  CFAllocatorRef v3;

  if (result)
  {
    p_isa = &result->isa;
    v2 = CFGetAllocator(result);
    v3 = CFGetAllocator(p_isa);
    return CFStringCreateWithFormat(v2, 0, CFSTR("<NetworkLinkManager %p [%p]>{ifName = %@}"), p_isa, v3, p_isa[11]);
  }
  return result;
}

uint64_t sub_21A689820(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t Instance;
  _QWORD *v10;
  NSObject *v11;
  _QWORD *v12;
  _QWORD *v13;
  const __CFAllocator *v14;
  CFStringRef v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  dispatch_queue_t *v20;
  uint64_t v22;
  CFStringRef v23;
  uint64_t v24;

  if (dword_2550EE8F0 <= 800 && (dword_2550EE8F0 != -1 || sub_21A69876C((uint64_t)&dword_2550EE8F0, 0x320u)))
    sub_21A698FDC((uint64_t)&dword_2550EE8F0, (uint64_t)"OSStatus _AssistantResourceManager_Create(CFAllocatorRef, CFStringRef, CFAssistantResourceManagerContextRef *)", 800, (uint64_t)" \n", a5, a6, a7, a8, v24);
  if (!a2)
    return 0;
  if (!qword_2550F4CC8)
    qword_2550F4CC8 = _CFRuntimeRegisterClass();
  Instance = _CFRuntimeCreateInstance();
  if (Instance)
  {
    v10 = malloc_type_calloc(1uLL, 0x70uLL, 0x10E0040D8572FD4uLL);
    *(_QWORD *)(Instance + 16) = v10;
    if (!v10)
      goto LABEL_12;
    *v10 = Instance;
    v11 = dispatch_queue_create("AssistantResourceManager_Internal_queue", 0);
    v12 = *(_QWORD **)(Instance + 16);
    v12[9] = v11;
    dispatch_set_context(v11, v12);
    dispatch_set_finalizer_f(*(dispatch_object_t *)(*(_QWORD *)(Instance + 16) + 72), (dispatch_function_t)sub_21A68A2E0);
    v13 = *(_QWORD **)(Instance + 16);
    v13[2] = 0;
    v13[3] = v13;
    v13[5] = 0;
    v13[6] = 0;
    v13[4] = 0;
    v14 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
    v15 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("%@.%@"));
    *(_QWORD *)(*(_QWORD *)(Instance + 16) + 56) = v15;
    if (!v15)
      goto LABEL_12;
    sub_21A689DA4(Instance, MEMORY[0x24BDAC9B8]);
    if (sub_21A68A388(*(_QWORD *)(Instance + 16)))
      goto LABEL_12;
    v22 = *(_QWORD *)(Instance + 16);
    if (dword_2550EE8F0 <= 800 && (dword_2550EE8F0 != -1 || sub_21A69876C((uint64_t)&dword_2550EE8F0, 0x320u)))
      sub_21A698FDC((uint64_t)&dword_2550EE8F0, (uint64_t)"OSStatus _AssistantResource_InitDynamicStoreInfo(AssistantResourceManagerPvtPtr)", 800, (uint64_t)" \n", v16, v17, v18, v19, (uint64_t)CFSTR("com.apple.airport.airportassistant"));
    if (!v22
      || !*(_QWORD *)(v22 + 8)
      || (v23 = SCDynamicStoreKeyCreate(v14, CFSTR("%@:/%@/%@/%@"), CFSTR("com.apple.airport.airportassistant"), CFSTR("Resource"), CFSTR("Application"), CFSTR("Configuration")), (*(_QWORD *)(v22 + 64) = v23) == 0))
    {
LABEL_12:
      v20 = *(dispatch_queue_t **)(Instance + 16);
      if (!*((_BYTE *)v20 + 104))
      {
        *((_BYTE *)v20 + 104) = 1;
        *v20 = 0;
        dispatch_async_f(v20[9], v20, (dispatch_function_t)sub_21A689E38);
      }
      return 0;
    }
  }
  return Instance;
}

uint64_t sub_21A689A60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *v3;
  uint64_t v4;
  _QWORD v6[8];
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  int v10;

  v7 = 0;
  v8 = &v7;
  v9 = 0x2020000000;
  v10 = 0;
  if (a1)
  {
    v3 = *(NSObject **)(*(_QWORD *)(a1 + 16) + 72);
    v6[0] = MEMORY[0x24BDAC760];
    v6[1] = 3221225472;
    v6[2] = sub_21A689B08;
    v6[3] = &unk_24DD04FB8;
    v6[6] = a2;
    v6[7] = a3;
    v6[4] = &v7;
    v6[5] = a1;
    dispatch_sync(v3, v6);
    v4 = *((unsigned int *)v8 + 6);
  }
  else
  {
    v4 = 4294960591;
    v10 = -6705;
  }
  _Block_object_dispose(&v7, 8);
  return v4;
}

uint64_t sub_21A689B08(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t result;

  *(_QWORD *)(*(_QWORD *)(a1[5] + 16) + 88) = a1[6];
  *(_QWORD *)(*(_QWORD *)(a1[5] + 16) + 96) = a1[7];
  v9 = a1[6];
  v10 = *(_QWORD *)(a1[5] + 16);
  if (v9)
    result = sub_21A689B64(v10, a2, a3, a4, a5, a6, a7, a8);
  else
    result = sub_21A689D34(v10);
  *(_DWORD *)(*(_QWORD *)(a1[4] + 8) + 24) = result;
  return result;
}

uint64_t sub_21A689B64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const __CFArray *v14;
  _BOOL4 v15;
  int v16;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  CFArrayRef keys;

  keys = 0;
  if (dword_2550EE8F0 <= 800 && (dword_2550EE8F0 != -1 || sub_21A69876C((uint64_t)&dword_2550EE8F0, 0x320u)))
    sub_21A698FDC((uint64_t)&dword_2550EE8F0, (uint64_t)"OSStatus _AssistantResourceManager_StartDynamicStoreMonitor(AssistantResourceManagerPvtPtr)", 800, (uint64_t)" \n", a5, a6, a7, a8, v23);
  if (a1 && *(_QWORD *)(a1 + 8))
  {
    v13 = sub_21A692FEC((const __CFAllocator *)*MEMORY[0x24BDBD240], (CFTypeRef *)&keys, (uint64_t)"[%O]", a4, a5, a6, a7, a8, *(_QWORD *)(a1 + 64));
    if (!(_DWORD)v13)
    {
      v14 = keys;
      if (!keys)
        return 4294960568;
      if (dword_2550EE8F0 <= 800)
      {
        if (dword_2550EE8F0 != -1 || (v15 = sub_21A69876C((uint64_t)&dword_2550EE8F0, 0x320u), v14 = keys, v15))
        {
          sub_21A698FDC((uint64_t)&dword_2550EE8F0, (uint64_t)"OSStatus _AssistantResourceManager_StartDynamicStoreMonitor(AssistantResourceManagerPvtPtr)", 800, (uint64_t)"SCDynamicStoreSetNotificationKeys keys: %@ patterns: %@\n", v9, v10, v11, v12, (uint64_t)v14);
          v14 = keys;
        }
      }
      v16 = SCDynamicStoreSetNotificationKeys(*(SCDynamicStoreRef *)(a1 + 8), v14, 0);
      if (keys)
      {
        CFRelease(keys);
        keys = 0;
      }
      if (v16)
        goto LABEL_16;
      v13 = SCError();
      if (dword_2550EE8F0 <= 800 && (dword_2550EE8F0 != -1 || sub_21A69876C((uint64_t)&dword_2550EE8F0, 0x320u)))
      {
        v18 = SCErrorString(v13);
        sub_21A698FDC((uint64_t)&dword_2550EE8F0, (uint64_t)"OSStatus _AssistantResourceManager_StartDynamicStoreMonitor(AssistantResourceManagerPvtPtr)", 800, (uint64_t)"SCDynamicStoreSetNotificationKeys failed: %s\n", v19, v20, v21, v22, (uint64_t)v18);
      }
      if (!(_DWORD)v13)
      {
LABEL_16:
        SCDynamicStoreSetDispatchQueue(*(SCDynamicStoreRef *)(a1 + 8), *(dispatch_queue_t *)(a1 + 72));
        v13 = 0;
        *(_BYTE *)(a1 + 105) = 1;
      }
    }
  }
  else
  {
    v13 = 4294960591;
  }
  if (keys)
    CFRelease(keys);
  return v13;
}

uint64_t sub_21A689D34(uint64_t a1)
{
  uint64_t result;

  if (!a1)
    return 4294960591;
  if (!*(_BYTE *)(a1 + 105))
    return 0;
  if (!SCDynamicStoreSetNotificationKeys(*(SCDynamicStoreRef *)(a1 + 8), 0, 0)
    || !SCDynamicStoreSetDispatchQueue(*(SCDynamicStoreRef *)(a1 + 8), 0))
  {
    return SCError();
  }
  result = 0;
  *(_BYTE *)(a1 + 105) = 0;
  return result;
}

void sub_21A689DA4(uint64_t a1, NSObject *a2)
{
  NSObject *v3;
  uint64_t v4;
  NSObject *v5;

  if (a2)
    v3 = a2;
  else
    v3 = MEMORY[0x24BDAC9B8];
  dispatch_retain(v3);
  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(NSObject **)(v4 + 80);
  if (v5)
  {
    dispatch_release(v5);
    v4 = *(_QWORD *)(a1 + 16);
  }
  *(_QWORD *)(v4 + 80) = v3;
}

uint64_t sub_21A689DF0(uint64_t a1)
{
  dispatch_queue_t *v1;

  if (!a1)
    return 4294960591;
  v1 = *(dispatch_queue_t **)(a1 + 16);
  if (!*((_BYTE *)v1 + 104))
  {
    *((_BYTE *)v1 + 104) = 1;
    *v1 = 0;
    dispatch_async_f(v1[9], v1, (dispatch_function_t)sub_21A689E38);
  }
  return 0;
}

void sub_21A689E38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  NSObject *v9;
  uint64_t v10;

  if (dword_2550EE8F0 <= 800 && (dword_2550EE8F0 != -1 || sub_21A69876C((uint64_t)&dword_2550EE8F0, 0x320u)))
    sub_21A698FDC((uint64_t)&dword_2550EE8F0, (uint64_t)"void __AssistantResourceManager_ReleaseOnQueue(void *)", 800, (uint64_t)" \n", a5, a6, a7, a8, v10);
  if (a1)
  {
    sub_21A68A7A8(a1);
    v9 = *(NSObject **)(a1 + 72);
    if (v9)
    {
      dispatch_release(v9);
      *(_QWORD *)(a1 + 72) = 0;
    }
  }
}

uint64_t sub_21A689EBC(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  CFTypeRef v15;
  _BOOL4 v16;
  CFTypeRef cf;

  cf = 0;
  v2 = 4294960591;
  if (a1)
  {
    if (a2)
    {
      v4 = *(_QWORD *)(a1 + 16);
      if (v4)
      {
        if (*(_BYTE *)(v4 + 104))
        {
          return 4294960569;
        }
        else
        {
          sub_21A68A7E4(*(SCDynamicStoreRef *)(v4 + 8), *(const __CFString **)(v4 + 64));
          v2 = sub_21A692FEC((const __CFAllocator *)*MEMORY[0x24BDBD240], &cf, (uint64_t)"{%kO=%i}", v6, v7, v8, v9, v10, (uint64_t)CFSTR("kAssistantResourceManager_StateKey"));
          v15 = cf;
          if ((_DWORD)v2)
          {
            if (cf)
              CFRelease(cf);
          }
          else if (cf)
          {
            if (dword_2550EE8F0 <= 800)
            {
              if (dword_2550EE8F0 != -1 || (v16 = sub_21A69876C((uint64_t)&dword_2550EE8F0, 0x320u), v15 = cf, v16))
              {
                sub_21A698FDC((uint64_t)&dword_2550EE8F0, (uint64_t)"OSStatus _AssistantResourceManager_CopyStatusDictionary(CFAssistantResourceManagerContextRef, CFDictionaryRef *)", 800, (uint64_t)"statusDict: %@\n", v11, v12, v13, v14, (uint64_t)v15);
                v15 = cf;
              }
            }
            v2 = 0;
            *a2 = v15;
          }
          else
          {
            return 4294960568;
          }
        }
      }
    }
  }
  return v2;
}

uint64_t sub_21A689FCC(uint64_t a1)
{
  NSObject *v1;
  uint64_t v2;
  _QWORD v4[6];
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  int v8;

  v5 = 0;
  v6 = &v5;
  v7 = 0x2020000000;
  v8 = 0;
  if (a1)
  {
    v1 = *(NSObject **)(*(_QWORD *)(a1 + 16) + 72);
    v4[0] = MEMORY[0x24BDAC760];
    v4[1] = 3221225472;
    v4[2] = sub_21A68A070;
    v4[3] = &unk_24DD04FE0;
    v4[4] = &v5;
    v4[5] = a1;
    dispatch_sync(v1, v4);
    v2 = *((unsigned int *)v6 + 6);
  }
  else
  {
    v2 = 4294960591;
    v8 = -6705;
  }
  _Block_object_dispose(&v5, 8);
  return v2;
}

void sub_21A68A070(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  int v5;
  CFNumberRef v6;
  CFNumberRef v7;
  int v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  pid_t valuePtr;

  v2 = *(_QWORD *)(a1 + 40);
  if (v2 && (v3 = *(_QWORD *)(v2 + 16)) != 0)
  {
    if (*(_BYTE *)(v3 + 104))
    {
      v4 = -6727;
    }
    else
    {
      v5 = sub_21A68A7E4(*(SCDynamicStoreRef *)(v3 + 8), *(const __CFString **)(v3 + 64));
      if (v5 == 1)
      {
        valuePtr = getpid();
        v6 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], kCFNumberSInt64Type, &valuePtr);
        if (v6)
        {
          v7 = v6;
          v8 = SCDynamicStoreAddTemporaryValue(*(SCDynamicStoreRef *)(*(_QWORD *)(v2 + 16) + 8), *(CFStringRef *)(*(_QWORD *)(v2 + 16) + 64), v6);
          CFRelease(v7);
          if (v8)
            goto LABEL_13;
          v4 = SCError();
          if (dword_2550EE8F0 <= 800 && (dword_2550EE8F0 != -1 || sub_21A69876C((uint64_t)&dword_2550EE8F0, 0x320u)))
          {
            v9 = SCErrorString(v4);
            sub_21A698FDC((uint64_t)&dword_2550EE8F0, (uint64_t)"OSStatus _AssistantResourceManager_AquireLock(CFAssistantResourceManagerContextRef)", 800, (uint64_t)"SCDynamicStoreSetValue failed: %s\n", v10, v11, v12, v13, (uint64_t)v9);
          }
          if (!v4)
LABEL_13:
            v4 = 0;
        }
        else
        {
          v4 = -6728;
        }
      }
      else if (v5 == 3)
      {
        v4 = 0;
      }
      else
      {
        v4 = -6709;
      }
    }
  }
  else
  {
    v4 = -6705;
  }
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = v4;
}

uint64_t sub_21A68A1B4(uint64_t a1)
{
  NSObject *v1;
  uint64_t v2;
  _QWORD v4[6];
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  int v8;

  v5 = 0;
  v6 = &v5;
  v7 = 0x2020000000;
  v8 = 0;
  if (a1)
  {
    v1 = *(NSObject **)(*(_QWORD *)(a1 + 16) + 72);
    v4[0] = MEMORY[0x24BDAC760];
    v4[1] = 3221225472;
    v4[2] = sub_21A68A258;
    v4[3] = &unk_24DD04FE0;
    v4[4] = &v5;
    v4[5] = a1;
    dispatch_sync(v1, v4);
    v2 = *((unsigned int *)v6 + 6);
  }
  else
  {
    v2 = 4294960591;
    v8 = -6705;
  }
  _Block_object_dispose(&v5, 8);
  return v2;
}

uint64_t sub_21A68A258(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v2 = *(_QWORD *)(a1 + 40);
  if (v2 && (v3 = *(_QWORD *)(v2 + 16)) != 0)
  {
    if (*(_BYTE *)(v3 + 104))
    {
      result = 4294960569;
    }
    else
    {
      v5 = *(unsigned __int8 *)(v3 + 105);
      result = sub_21A68A7A8(v3);
      if (!(_DWORD)result)
      {
        result = sub_21A68A388(v3);
        if (!(_DWORD)result)
        {
          if (!v5 || (result = sub_21A689B64(v3, v6, v7, v8, v9, v10, v11, v12), !(_DWORD)result))
            result = 0;
        }
      }
    }
  }
  else
  {
    result = 4294960591;
  }
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  return result;
}

void sub_21A68A2E0(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  NSObject *v9;
  const void *v10;
  const void *v11;
  uint64_t v12;

  if (dword_2550EE8F0 <= 800 && (dword_2550EE8F0 != -1 || sub_21A69876C((uint64_t)&dword_2550EE8F0, 0x320u)))
    sub_21A698FDC((uint64_t)&dword_2550EE8F0, (uint64_t)"void __AssistantResourceManager_Finalizer(void *)", 800, (uint64_t)" \n", a5, a6, a7, a8, v12);
  if (a1)
  {
    v9 = a1[10];
    if (v9)
    {
      dispatch_release(v9);
      a1[10] = 0;
    }
    v10 = (const void *)a1[8];
    if (v10)
    {
      CFRelease(v10);
      a1[8] = 0;
    }
    v11 = (const void *)a1[7];
    if (v11)
      CFRelease(v11);
    free(a1);
  }
}

uint64_t sub_21A68A388(uint64_t a1)
{
  const __CFString *v2;
  SCDynamicStoreRef v3;

  if (!a1)
    return 4294960591;
  v2 = *(const __CFString **)(a1 + 56);
  if (!v2)
    return 4294960578;
  v3 = SCDynamicStoreCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], v2, (SCDynamicStoreCallBack)sub_21A68A3EC, (SCDynamicStoreContext *)(a1 + 16));
  *(_QWORD *)(a1 + 8) = v3;
  if (v3)
    return 0;
  else
    return 4294960560;
}

void sub_21A68A3EC(int a1, CFArrayRef theArray, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  CFIndex Count;
  CFIndex v11;
  char v12;
  CFIndex i;
  const __CFString *ValueAtIndex;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;

  if (dword_2550EE8F0 <= 800 && (dword_2550EE8F0 != -1 || sub_21A69876C((uint64_t)&dword_2550EE8F0, 0x320u)))
    sub_21A698FDC((uint64_t)&dword_2550EE8F0, (uint64_t)"void _AssistantResource__DynamicStoreChanged(SCDynamicStoreRef, CFArrayRef, void *)", 800, (uint64_t)"changedKeys: %@ \n", a5, a6, a7, a8, (uint64_t)theArray);
  if (a3)
  {
    if (!*(_BYTE *)(a3 + 104))
    {
      Count = CFArrayGetCount(theArray);
      if (Count >= 1)
      {
        v11 = Count;
        v12 = 0;
        for (i = 0; i != v11; ++i)
        {
          ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(theArray, i);
          if (ValueAtIndex && CFStringCompare(ValueAtIndex, *(CFStringRef *)(a3 + 64), 0) == kCFCompareEqualTo)
            v12 = 1;
        }
        if (v12)
        {
          v15 = *(_QWORD *)a3;
          if (*(_QWORD *)a3)
          {
            if (*(_QWORD *)(a3 + 80))
            {
              if (*(_QWORD *)(a3 + 88))
              {
                if (!*(_BYTE *)(a3 + 104))
                {
                  v22 = 0;
                  if (!sub_21A689EBC(v15, &v22))
                  {
                    v20 = v22;
                    if (v22)
                    {
                      if (dword_2550EE8F0 > 800)
                        goto LABEL_26;
                      if (dword_2550EE8F0 == -1)
                      {
                        if (!sub_21A69876C((uint64_t)&dword_2550EE8F0, 0x320u))
                          goto LABEL_26;
                        v20 = v22;
                      }
                      sub_21A698FDC((uint64_t)&dword_2550EE8F0, (uint64_t)"OSStatus _SendResourceStatusChangedNotify(AssistantResourceManagerPvtPtr)", 800, (uint64_t)"linkStatusDict: %@ \n", v16, v17, v18, v19, v20);
LABEL_26:
                      v21 = (char *)malloc_type_calloc(1uLL, 0x18uLL, 0xE0040BC9ECFC2uLL);
                      if (v21)
                      {
                        *(_QWORD *)v21 = v22;
                        *(_OWORD *)(v21 + 8) = *(_OWORD *)(a3 + 88);
                        dispatch_async_f(*(dispatch_queue_t *)(a3 + 80), v21, (dispatch_function_t)sub_21A68A5A4);
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

void sub_21A68A5A4(const void **a1)
{
  const void *v2;
  void (*v3)(void);

  v2 = *a1;
  if (v2)
  {
    v3 = (void (*)(void))a1[1];
    if (!v3 || (v3(), (v2 = *a1) != 0))
      CFRelease(v2);
  }
  free(a1);
}

uint64_t sub_21A68A5E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;

  if (dword_2550EE8F0 <= 800 && (dword_2550EE8F0 != -1 || sub_21A69876C((uint64_t)&dword_2550EE8F0, 0x320u)))
    sub_21A698FDC((uint64_t)&dword_2550EE8F0, (uint64_t)"void __AssistantResourceDealloc(CFTypeRef)", 800, (uint64_t)"\n", a5, a6, a7, a8, v10);
  return sub_21A689DF0(a1);
}

BOOL sub_21A68A654(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BOOL8 result;
  uint64_t v11;

  if (dword_2550EE8F0 <= 800 && (dword_2550EE8F0 != -1 || sub_21A69876C((uint64_t)&dword_2550EE8F0, 0x320u)))
    sub_21A698FDC((uint64_t)&dword_2550EE8F0, (uint64_t)"Boolean __AssistantResourceEqual(CFTypeRef, CFTypeRef)", 800, (uint64_t)"\n", a5, a6, a7, a8, v11);
  if (a1 == a2)
    return 1;
  result = 0;
  if (a1)
  {
    if (a2)
      return CFStringCompare(*(CFStringRef *)(*(_QWORD *)(a1 + 16) + 64), *(CFStringRef *)(*(_QWORD *)(a2 + 16) + 64), 0) == kCFCompareEqualTo;
  }
  return result;
}

unint64_t sub_21A68A6FC(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;

  if (dword_2550EE8F0 <= 800 && (dword_2550EE8F0 != -1 || sub_21A69876C((uint64_t)&dword_2550EE8F0, 0x320u)))
    sub_21A698FDC((uint64_t)&dword_2550EE8F0, (uint64_t)"CFHashCode __AssistantResourceHash(CFTypeRef)", 800, (uint64_t)"\n", a5, a6, a7, a8, v10);
  return a1 >> 2;
}

CFStringRef sub_21A68A768(CFStringRef result)
{
  CFStringRef v1;
  const __CFAllocator *v2;

  if (result)
  {
    v1 = result;
    v2 = CFGetAllocator(result);
    return CFStringCreateWithFormat(v2, 0, CFSTR("<AssistantResourceManager %p"), v1);
  }
  return result;
}

uint64_t sub_21A68A7A8(uint64_t a1)
{
  uint64_t v2;
  const void *v3;

  v2 = sub_21A689D34(a1);
  if (!(_DWORD)v2)
  {
    v3 = *(const void **)(a1 + 8);
    if (v3)
    {
      CFRelease(v3);
      *(_QWORD *)(a1 + 8) = 0;
    }
  }
  return v2;
}

uint64_t sub_21A68A7E4(SCDynamicStoreRef store, const __CFString *a2)
{
  uint64_t result;
  const __CFNumber *v4;
  const __CFNumber *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int valuePtr;

  result = 0;
  if (store && a2)
  {
    v4 = (const __CFNumber *)SCDynamicStoreCopyValue(store, a2);
    if (v4)
    {
      v5 = v4;
      valuePtr = 0;
      CFNumberGetValue(v4, kCFNumberSInt64Type, &valuePtr);
      CFRelease(v5);
      if (dword_2550EE8F0 <= 800 && (dword_2550EE8F0 != -1 || sub_21A69876C((uint64_t)&dword_2550EE8F0, 0x320u)))
        sub_21A698FDC((uint64_t)&dword_2550EE8F0, (uint64_t)"eAssistantResourceState _GetStateForKey(SCDynamicStoreRef, CFStringRef)", 800, (uint64_t)"found pid: %d\n", v6, v7, v8, v9, valuePtr);
      v10 = valuePtr;
      if (v10 == getpid())
        return 3;
      else
        return 2;
    }
    else
    {
      return 1;
    }
  }
  return result;
}

uint64_t sub_21A68B838(void *a1, const char *a2, void *a3)
{
  uint64_t v4;
  const char *v5;
  uint64_t v6;

  v4 = objc_msgSend_objectForKey_(a1, a2, (uint64_t)CFSTR("SSID_STR"));
  v6 = objc_msgSend_objectForKey_(a3, v5, (uint64_t)CFSTR("SSID_STR"));
  return MEMORY[0x24BEDD108](v4, sel_localizedCaseInsensitiveCompare_, v6);
}

uint64_t sub_21A68B884(void *a1, const char *a2, void *a3)
{
  void *v5;
  const char *v6;
  uint64_t v7;
  const char *v8;
  void *v9;
  const char *v10;
  uint64_t v11;
  const char *v12;

  v5 = (void *)objc_msgSend_objectForKey_(a1, a2, (uint64_t)CFSTR("SSID_STR"));
  if (!objc_msgSend_length(v5, v6, v7))
    v5 = (void *)objc_msgSend_objectForKey_(a1, v8, (uint64_t)CFSTR("name"));
  v9 = (void *)objc_msgSend_objectForKey_(a3, v8, (uint64_t)CFSTR("SSID_STR"));
  if (!objc_msgSend_length(v9, v10, v11))
    v9 = (void *)objc_msgSend_objectForKey_(a3, v12, (uint64_t)CFSTR("name"));
  return MEMORY[0x24BEDD108](v5, sel_localizedCaseInsensitiveCompare_, v9);
}

uint64_t sub_21A68E2C8(uint64_t result)
{
  const __CFString *v1;
  const char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (result)
  {
    v1 = (const __CFString *)result;
    if (CFDictionaryContainsKey((CFDictionaryRef)result, CFSTR("txt")))
    {
      if (sub_21A68E3B0(v1, (uint64_t)v2, v3, v4, v5, v6, v7, v8))
        return 2;
      else
        return 1;
    }
    else
    {
      return sub_21A72E2E4((uint64_t)v1, v2);
    }
  }
  return result;
}

const __CFDictionary *sub_21A68E31C(const __CFDictionary *result)
{
  if (result)
    return (const __CFDictionary *)(CFDictionaryContainsKey(result, CFSTR("txt")) != 0);
  return result;
}

uint64_t sub_21A68E344(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (result)
  {
    if (sub_21A68E3B0((const __CFString *)result, a2, a3, a4, a5, a6, a7, a8))
      return 2;
    else
      return 1;
  }
  return result;
}

const __CFString *sub_21A68E368(const __CFString *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;

  v8 = 0;
  if (result)
  {
    sub_21A693B94(result, (uint64_t)&v8, (UInt8 *)"%kO.%kO:int", a4, a5, a6, a7, a8, (uint64_t)CFSTR("txt"));
    return (const __CFString *)v8;
  }
  return result;
}

const __CFString *sub_21A68E3B0(const __CFString *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  const __CFString *result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  result = sub_21A690078(a1, a2, a3, a4, a5, a6, a7, a8);
  if ((_DWORD)result)
    return (const __CFString *)(sub_21A690078(a1, v10, v11, v12, v13, v14, v15, v16) != 0);
  return result;
}

const __CFDictionary *sub_21A68E3E4(const __CFDictionary *result)
{
  const __CFDictionary *v1;

  if (result)
  {
    v1 = result;
    result = (const __CFDictionary *)CFDictionaryContainsKey(result, CFSTR("txt"));
    if ((_DWORD)result)
      return (const __CFDictionary *)(CFDictionaryContainsKey(v1, CFSTR("connectionTypes")) != 0);
  }
  return result;
}

CFStringRef sub_21A68E42C(const __CFString *a1, const __CFString *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  CFStringRef result;
  uint64_t v10;
  CFStringRef theString1;

  if (!a2)
    return 0;
  v10 = 0;
  theString1 = 0;
  if (sub_21A68E494(a1, &v10, &theString1, a4, a5, a6, a7, a8))
    return 0;
  result = theString1;
  if (theString1)
    return (CFStringRef)(CFStringCompare(theString1, a2, 0) == kCFCompareEqualTo);
  return result;
}

uint64_t sub_21A68E494(const __CFString *a1, _QWORD *a2, _QWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v11;
  CFIndex Count;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  CFIndex v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  CFArrayRef theArray;

  v23 = 0;
  v24 = 0;
  v8 = 4294960591;
  if (!a1)
    return v8;
  if (!a2)
    return v8;
  theArray = 0;
  sub_21A693B94(a1, (uint64_t)&theArray, (UInt8 *)"%ks", a4, a5, a6, a7, a8, (uint64_t)"services");
  v8 = v11;
  if ((_DWORD)v11)
    return v8;
  if (!theArray)
    return 4294960568;
  Count = CFArrayGetCount(theArray);
  v8 = 4294960569;
  if (Count >= 1)
  {
    v19 = Count;
    v20 = 0;
    while (1)
    {
      sub_21A693B94((const __CFString *)theArray, (uint64_t)&v24, (UInt8 *)"[*].%ks", v14, v15, v16, v17, v18, v20);
      if (v21 != -6727)
        break;
      if (v19 == ++v20)
        return 4294960569;
    }
    sub_21A693B94((const __CFString *)theArray, (uint64_t)&v23, (UInt8 *)"[*].%ks", v14, v15, v16, v17, v18, v20);
    v8 = v22;
    if (!(_DWORD)v22)
    {
      if (v23)
      {
        *a2 = v23;
        v8 = 0;
        if (a3)
          *a3 = v24;
        return v8;
      }
      return 4294960568;
    }
  }
  return v8;
}

BOOL sub_21A68E5C0(const __CFString *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;

  v9 = 0;
  return sub_21A68E494(a1, &v9, 0, a4, a5, a6, a7, a8) == 0;
}

BOOL sub_21A68E5F0(const __CFString *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  uint64_t v10;

  v10 = 0;
  sub_21A68E61C(a1, &v10, a3, a4, a5, a6, a7, a8);
  return v8 == 0;
}

void sub_21A68E61C(const __CFString *a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  CFIndex Count;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  CFIndex v16;
  uint64_t i;
  int v18;
  int v19;
  int v20;
  CFStringRef theString1;
  uint64_t v22;
  uint64_t v23;
  CFArrayRef theArray;

  v23 = 0;
  if (a1)
  {
    if (a2)
    {
      theArray = 0;
      sub_21A693B94(a1, (uint64_t)&theArray, (UInt8 *)"%ks", a4, a5, a6, a7, a8, (uint64_t)"services");
      if (!v9)
      {
        if (theArray)
        {
          Count = CFArrayGetCount(theArray);
          if (Count >= 1)
          {
            v16 = Count;
            for (i = 0; v16 != i; ++i)
            {
              theString1 = 0;
              v22 = 0;
              sub_21A693B94((const __CFString *)theArray, (uint64_t)&theString1, (UInt8 *)"[*].%ks", v11, v12, v13, v14, v15, i);
              if (v18 || !theString1)
                break;
              if (CFStringCompare(theString1, CFSTR("local."), 0) == kCFCompareEqualTo)
              {
                sub_21A693B94((const __CFString *)theArray, (uint64_t)&v22, (UInt8 *)"[*].%ks", v11, v12, v13, v14, v15, i);
                if (v19 == -6727)
                {
                  sub_21A693B94((const __CFString *)theArray, (uint64_t)&v23, (UInt8 *)"[*].%ks", v11, v12, v13, v14, v15, i);
                  if (!v20)
                  {
                    if (v23)
                      *a2 = v23;
                  }
                  return;
                }
              }
            }
          }
        }
      }
    }
  }
}

void sub_21A68E77C(const __CFString *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  if (a1)
  {
    if (CFDictionaryContainsKey((CFDictionaryRef)a1, CFSTR("services")))
    {
      v20 = 0;
      v21 = 0;
      sub_21A68E61C(a1, &v21, v2, v3, v4, v5, v6, v7);
      if (v13)
      {
        v21 = 0;
        if (sub_21A68E494(a1, &v21, 0, v8, v9, v10, v11, v12))
          sub_21A68E7F4(a1, &v20, v14, v15, v16, v17, v18, v19);
      }
    }
  }
}

void sub_21A68E7F4(const __CFString *a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  CFIndex Count;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  CFIndex v16;
  uint64_t i;
  int v18;
  int v19;
  int v20;
  CFStringRef theString1;
  uint64_t v22;
  uint64_t v23;
  CFArrayRef theArray;

  v23 = 0;
  if (a1)
  {
    if (a2)
    {
      theArray = 0;
      sub_21A693B94(a1, (uint64_t)&theArray, (UInt8 *)"%ks", a4, a5, a6, a7, a8, (uint64_t)"services");
      if (!v9)
      {
        if (theArray)
        {
          Count = CFArrayGetCount(theArray);
          if (Count >= 1)
          {
            v16 = Count;
            for (i = 0; v16 != i; ++i)
            {
              theString1 = 0;
              v22 = 0;
              sub_21A693B94((const __CFString *)theArray, (uint64_t)&theString1, (UInt8 *)"[*].%ks", v11, v12, v13, v14, v15, i);
              if (v18 || !theString1)
                break;
              if (CFStringCompare(theString1, CFSTR("local."), 0))
              {
                sub_21A693B94((const __CFString *)theArray, (uint64_t)&v22, (UInt8 *)"[*].%ks", v11, v12, v13, v14, v15, i);
                if (v19 == -6727)
                {
                  sub_21A693B94((const __CFString *)theArray, (uint64_t)&v23, (UInt8 *)"[*].%ks", v11, v12, v13, v14, v15, i);
                  if (!v20)
                  {
                    if (v23)
                      *a2 = v23;
                  }
                  return;
                }
              }
            }
          }
        }
      }
    }
  }
}

void sub_21A68E954(const __CFString *a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  CFIndex Count;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  CFIndex v16;
  uint64_t i;
  int v18;
  int v19;
  CFStringRef theString1;
  uint64_t v21;
  CFArrayRef theArray;

  v21 = 0;
  if (a1)
  {
    if (a2)
    {
      theArray = 0;
      sub_21A693B94(a1, (uint64_t)&theArray, (UInt8 *)"%ks", a4, a5, a6, a7, a8, (uint64_t)"services");
      if (!v9)
      {
        if (theArray)
        {
          Count = CFArrayGetCount(theArray);
          if (Count >= 1)
          {
            v16 = Count;
            for (i = 0; v16 != i; ++i)
            {
              theString1 = 0;
              sub_21A693B94((const __CFString *)theArray, (uint64_t)&theString1, (UInt8 *)"[*].%ks", v11, v12, v13, v14, v15, i);
              if (v18 || !theString1)
                break;
              if (CFStringCompare(theString1, CFSTR("local."), 0) == kCFCompareEqualTo)
              {
                sub_21A693B94((const __CFString *)theArray, (uint64_t)&v21, (UInt8 *)"[*].%ks", v11, v12, v13, v14, v15, i);
                if (!v19)
                {
                  if (v21)
                    *a2 = v21;
                }
                return;
              }
            }
          }
        }
      }
    }
  }
}

void sub_21A68EA84(const __CFString *a1, int a2, _QWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v11;
  uint64_t v12;
  uint64_t v13;

  v13 = 0;
  if (a1 && a3)
  {
    switch(a2)
    {
      case 0:
      case 3:
        sub_21A68E61C(a1, &v13, (uint64_t)a3, a4, a5, a6, a7, a8);
        if (v11 != -6727)
          goto LABEL_13;
        v12 = v13;
        if (a2 || v13)
          goto LABEL_17;
        goto LABEL_7;
      case 1:
        goto LABEL_10;
      case 2:
LABEL_7:
        v11 = sub_21A68E494(a1, &v13, 0, a4, a5, a6, a7, a8);
        if (v11 != -6727)
          goto LABEL_13;
        v12 = v13;
        if (a2 || v13)
          goto LABEL_17;
LABEL_10:
        sub_21A68E7F4(a1, &v13, (uint64_t)a3, a4, a5, a6, a7, a8);
LABEL_12:
        if (v11 != -6727)
        {
LABEL_13:
          if (v11)
            return;
          v12 = v13;
          if (!v13)
            return;
LABEL_18:
          *a3 = v12;
          return;
        }
        v12 = v13;
LABEL_17:
        if (v12)
          goto LABEL_18;
        break;
      case 4:
        sub_21A68E954(a1, &v13, (uint64_t)a3, a4, a5, a6, a7, a8);
        goto LABEL_12;
      default:
        return;
    }
  }
}

uint64_t sub_21A68EB8C(const __CFString *a1, __CFArray **a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  const __CFAllocator *v31;
  __CFArray *Mutable;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __CFArray *v38;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  if (dword_2550EEB50 <= 800 && (dword_2550EEB50 != -1 || sub_21A69876C((uint64_t)&dword_2550EEB50, 0x320u)))
    sub_21A698FDC((uint64_t)&dword_2550EEB50, (uint64_t)"OSStatus BSUtilities_CopyAllKeychainAccountKeysFromBaseStation(CFDictionaryRef, CFArrayRef *)", 800, (uint64_t)"\n", a5, a6, a7, a8, v40);
  v10 = 4294960591;
  if (a1 && a2)
  {
    v44 = 0;
    sub_21A693B94(a1, (uint64_t)&v44, (UInt8 *)"%kC", a4, a5, a6, a7, a8, 2002865473);
    if ((_DWORD)v11 == -6727)
      goto LABEL_15;
    v10 = v11;
    if ((_DWORD)v11)
      return v10;
    if (v44)
    {
LABEL_15:
      v43 = 0;
      sub_21A693B94(a1, (uint64_t)&v43, (UInt8 *)"%kC", v12, v13, v14, v15, v16, 1918979393);
      if ((_DWORD)v17 == -6727)
        goto LABEL_40;
      v10 = v17;
      if ((_DWORD)v17)
        return v10;
      if (v43)
      {
LABEL_40:
        v41 = 0;
        sub_21A693B94(a1, (uint64_t)&v41, (UInt8 *)"%kC", v18, v19, v20, v21, v22, 1818316097);
        if ((_DWORD)v23 == -6727)
          goto LABEL_16;
        v10 = v23;
        if ((_DWORD)v23)
          return v10;
        if (v41)
        {
LABEL_16:
          v42 = 0;
          sub_21A693B94(a1, (uint64_t)&v42, (UInt8 *)"%kC", v24, v25, v26, v27, v28, 1918979378);
          v10 = v29;
          if ((_DWORD)v29)
          {
            if ((_DWORD)v29 != -6727)
              return v10;
            v30 = v42;
          }
          else
          {
            v30 = v42;
            if (!v42)
              return 4294960568;
          }
          if (!v44 && !v43 && !v30 && !v41)
            return 4294960569;
          v31 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
          Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD690]);
          if (Mutable)
          {
            v38 = Mutable;
            if (v44 && (v10 = sub_21A693A8C(v31, Mutable, (uint64_t)"%O", v33, v34, v35, v36, v37, v44), (_DWORD)v10)
              || v43 && (v10 = sub_21A693A8C(v31, v38, (uint64_t)"%O", v33, v34, v35, v36, v37, v43), (_DWORD)v10)
              || v41 && (v10 = sub_21A693A8C(v31, v38, (uint64_t)"%O", v33, v34, v35, v36, v37, v41), (_DWORD)v10)
              || v42 && (v10 = sub_21A693A8C(v31, v38, (uint64_t)"%O", v33, v34, v35, v36, v37, v42), (_DWORD)v10))
            {
              CFRelease(v38);
            }
            else
            {
              *a2 = v38;
            }
            return v10;
          }
        }
      }
    }
    return 4294960568;
  }
  return v10;
}

const __CFString *sub_21A68EE24(const __CFString *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;

  v8 = 0;
  if (result)
  {
    sub_21A693B94(result, (uint64_t)&v8, (UInt8 *)"%ks.%ks", a4, a5, a6, a7, a8, (uint64_t)"txt");
    return (const __CFString *)v8;
  }
  return result;
}

const __CFString *sub_21A68EE6C(const __CFString *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;

  v8 = 0;
  if (result)
  {
    sub_21A693B94(result, (uint64_t)&v8, (UInt8 *)"%ks", a4, a5, a6, a7, a8, (uint64_t)"name");
    return (const __CFString *)v8;
  }
  return result;
}

const __CFString *sub_21A68EEAC(const __CFString *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  const __CFString *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  CFIndex Count;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  CFIndex v22;
  uint64_t i;
  int v24;
  uint64_t v25;
  CFArrayRef theArray;
  uint64_t v27;

  if (result)
  {
    v8 = result;
    v25 = 0;
    theArray = 0;
    sub_21A693B94(result, (uint64_t)&theArray, (UInt8 *)"%ks", a4, a5, a6, a7, a8, (uint64_t)"services");
    if (v9)
    {
      v15 = v9;
      result = 0;
      if (v15 == -6727)
      {
        v27 = 0;
        sub_21A693B94(v8, (uint64_t)&v27, (UInt8 *)"%ks.%ks", v10, v11, v12, v13, v14, (uint64_t)"txt");
        return (const __CFString *)v27;
      }
    }
    else
    {
      result = (const __CFString *)theArray;
      if (theArray)
      {
        Count = CFArrayGetCount(theArray);
        if (Count < 1)
          return 0;
        v22 = Count;
        for (i = 0; i != v22; ++i)
        {
          sub_21A693B94((const __CFString *)theArray, (uint64_t)&v25, (UInt8 *)"[*].%ks", v17, v18, v19, v20, v21, i);
          if (v24 != -6727)
            break;
          result = 0;
        }
        if (v24)
          return 0;
        else
          return (const __CFString *)v25;
      }
    }
  }
  return result;
}

const __CFString *sub_21A68EFC0(const __CFString *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;

  v8 = 0;
  if (result)
  {
    sub_21A693B94(result, (uint64_t)&v8, (UInt8 *)"%ks.%ks", a4, a5, a6, a7, a8, (uint64_t)"txt");
    return (const __CFString *)v8;
  }
  return result;
}

const __CFString *sub_21A68F008(const __CFString *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;

  v8 = 0;
  if (result)
  {
    sub_21A693B94(result, (uint64_t)&v8, (UInt8 *)"%ks.%ks:int", a4, a5, a6, a7, a8, (uint64_t)"txt");
    return (const __CFString *)v8;
  }
  return result;
}

const __CFString *sub_21A68F050(const __CFString *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  int v9;
  int v10;

  if (result)
  {
    v10 = 0;
    sub_21A693B94(result, (uint64_t)&v10, (UInt8 *)"%ks.%kC:int", a4, a5, a6, a7, a8, (uint64_t)"txt");
    v9 = v8;
    result = 0;
    if (!v9)
      return (const __CFString *)((v10 >> 5) & 1);
  }
  return result;
}

const __CFString *sub_21A68F0A8(const __CFString *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  uint64_t v9;

  if (result)
  {
    v9 = 0;
    sub_21A693B94(result, (uint64_t)&v9, (UInt8 *)"%ks.%ks", a4, a5, a6, a7, a8, (uint64_t)"txt");
    if (v8)
      return 0;
    else
      return (const __CFString *)(v9 != 0);
  }
  return result;
}

const __CFString *sub_21A68F104(const __CFString *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  int v9;
  int v10;

  if (result)
  {
    v10 = 0;
    sub_21A693B94(result, (uint64_t)&v10, (UInt8 *)"%ks.%kC:int", a4, a5, a6, a7, a8, (uint64_t)"txt");
    v9 = v8;
    result = 0;
    if (!v9)
      return (const __CFString *)((v10 >> 6) & 1);
  }
  return result;
}

const __CFString *sub_21A68F15C(const __CFString *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;

  v8 = 0;
  if (result)
  {
    sub_21A693B94(result, (uint64_t)&v8, (UInt8 *)"%kO.%kO:int", a4, a5, a6, a7, a8, (uint64_t)CFSTR("txt"));
    return (const __CFString *)v8;
  }
  return result;
}

BOOL sub_21A68F1A4(const __CFString *a1, const char *a2)
{
  _BOOL8 result;
  int v5;
  const char *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int v20;

  result = 0;
  if (a1 && a2)
  {
    v5 = sub_21A72E2F4((uint64_t)a1, a2);
    v7 = sub_21A72E2F4((uint64_t)a2, v6);
    v13 = v7;
    if (!v5 || v7)
    {
      result = 0;
      if (v5)
      {
        if (v5 != 3 && v5 != 102)
        {
          result = 1;
          if (v13)
          {
            if (v13 != 3 && v13 != 102)
            {
              v19 = 0;
              sub_21A693B94(a1, (uint64_t)&v19, (UInt8 *)"%kO:int", v8, v9, v10, v11, v12, (uint64_t)CFSTR("CHANNEL"));
              result = 0;
              if (v19 <= 14)
              {
                v20 = 0;
                sub_21A693B94((const __CFString *)a2, (uint64_t)&v20, (UInt8 *)"%kO:int", v14, v15, v16, v17, v18, (uint64_t)CFSTR("CHANNEL"));
                return v20 > 14;
              }
            }
          }
        }
      }
    }
    else
    {
      return 1;
    }
  }
  return result;
}

const __CFString *sub_21A68F294(const __CFString *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  int v9;
  unsigned int v10;

  if (result)
  {
    v10 = 0;
    sub_21A693B94(result, (uint64_t)&v10, (UInt8 *)"%ks.%kC:int", a4, a5, a6, a7, a8, (uint64_t)"txt");
    v9 = v8;
    result = 0;
    if (!v9)
      return (const __CFString *)((v10 >> 17) & 1);
  }
  return result;
}

uint64_t sub_21A68F2EC(const void *a1, __CFArray **a2)
{
  uint64_t v2;
  CFMutableArrayRef Mutable;
  __CFArray *v6;
  uint64_t *v7;
  void *value;
  const void **v10;

  v10 = 0;
  v2 = 4294960591;
  if (!a1 || !a2)
    return v2;
  value = 0;
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD690]);
  if (Mutable)
  {
    v6 = Mutable;
    v2 = sub_21A695640(a1, &v10);
    if (!(_DWORD)v2)
    {
      v7 = (uint64_t *)v10;
      if (v10)
      {
        while (sub_21A6956DC(v7, 0, &value))
        {
          CFArrayAppendValue(v6, value);
          v7 = (uint64_t *)v10;
        }
        v2 = 0;
        *a2 = v6;
        goto LABEL_11;
      }
      v2 = 4294960568;
    }
    CFRelease(v6);
  }
  else
  {
    v2 = 4294960568;
  }
LABEL_11:
  if (v10)
    sub_21A6956D0(v10);
  return v2;
}

uint64_t sub_21A68F3C8(const __CFArray *a1, const __CFString *a2)
{
  CFIndex i;
  CFIndex Count;
  CFIndex v6;
  const __CFString *ValueAtIndex;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  i = -1;
  if (a1)
  {
    if (a2)
    {
      Count = CFArrayGetCount(a1);
      if (Count >= 1)
      {
        v6 = Count;
        for (i = 0; i != v6; ++i)
        {
          ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(a1, i);
          if (!ValueAtIndex)
            break;
          if (sub_21A68F440(ValueAtIndex, a2, v8, v9, v10, v11, v12, v13))
            return i;
        }
        return -1;
      }
    }
  }
  return i;
}

uint64_t sub_21A68F440(const __CFString *a1, const __CFString *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  const __CFString *v30;
  const __CFString *v31;
  const __CFString *v32;
  const __CFString *v33;

  result = 0;
  if (a1 && a2)
  {
    v32 = 0;
    v33 = 0;
    v30 = 0;
    v31 = 0;
    sub_21A693B94(a1, (uint64_t)&v33, (UInt8 *)"%ks.%ks", a4, a5, a6, a7, a8, (uint64_t)"txt");
    if ((v11 == -6727 || !v11 && v33)
      && ((sub_21A693B94(a1, (uint64_t)&v32, (UInt8 *)"%ks.%ks", v12, v13, v14, v15, v16, (uint64_t)"txt"), v17 == -6727)
       || !v17 && v32)
      && ((sub_21A693B94(a1, (uint64_t)&v31, (UInt8 *)"%ks.%ks", v18, v19, v20, v21, v22, (uint64_t)"txt"), v23 == -6727)
       || !v23 && v31)
      && ((sub_21A693B94(a1, (uint64_t)&v30, (UInt8 *)"%ks.%ks", v24, v25, v26, v27, v28, (uint64_t)"txt"), v29 == -6727)
       || !v29 && v30))
    {
      if ((sub_21A6D039C(v33, a2) & 1) != 0
        || v32 && (sub_21A6D039C(v32, a2) & 1) != 0)
      {
        return 1;
      }
      if (v31 && (sub_21A6D039C(v31, a2) & 1) != 0)
        return 1;
      result = (uint64_t)v30;
      if (v30)
      {
        result = (uint64_t)sub_21A6D039C(v30, a2);
        if ((_DWORD)result)
          return 1;
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

const __CFString *sub_21A68F5B8(const __CFString *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  int v9;
  unsigned int v10;

  if (result)
  {
    v10 = 0;
    sub_21A693B94(result, (uint64_t)&v10, (UInt8 *)"%ks.%kC:int", a4, a5, a6, a7, a8, (uint64_t)"txt");
    v9 = v8;
    result = 0;
    if (!v9)
      return (const __CFString *)((v10 >> 9) & 1);
  }
  return result;
}

uint64_t sub_21A68F610(const __CFString *a1, const __CFString *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  const __CFString *v17;

  result = 0;
  if (a1 && a2)
  {
    v17 = 0;
    sub_21A693B94(a2, (uint64_t)&v17, (UInt8 *)"%ks", a4, a5, a6, a7, a8, (uint64_t)"BSSID");
    if (v16 || !v17)
      return 0;
    else
      return sub_21A68F440(a1, v17, v10, v11, v12, v13, v14, v15);
  }
  return result;
}

BOOL sub_21A68F680(const __CFString *a1, const __CFString *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  const __CFString *v18;

  v8 = 0;
  if (a1 && a2)
  {
    v18 = 0;
    sub_21A693B94(a1, (uint64_t)&v18, (UInt8 *)"%ks.%ks", a4, a5, a6, a7, a8, (uint64_t)"txt");
    return !v16 && v18 && sub_21A68F440(a2, v18, v10, v11, v12, v13, v14, v15) != 0;
  }
  return v8;
}

uint64_t sub_21A68F700(const __CFString *a1, uint64_t a2, CFArrayRef theArray)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  CFIndex Count;
  int v13;
  CFStringRef theString1;

  result = -1;
  if (a1)
  {
    if (theArray)
    {
      Count = CFArrayGetCount(theArray);
      result = -1;
      if (Count)
      {
        if (Count > a2)
        {
          theString1 = 0;
          while (1)
          {
            sub_21A693B94((const __CFString *)theArray, (uint64_t)&theString1, (UInt8 *)"[*].%kO", v7, v8, v9, v10, v11, a2);
            if (v13 != -6727)
            {
              if (!theString1)
                return -1;
              if (CFStringCompare(theString1, a1, 0) == kCFCompareEqualTo)
                break;
            }
            if (Count == ++a2)
              return -1;
          }
          return a2;
        }
      }
    }
  }
  return result;
}

CFIndex sub_21A68F7D0(const __CFString *a1, int a2, uint64_t a3, const __CFArray *a4)
{
  CFIndex result;

  result = -1;
  if (a1 && (a2 - 1) <= 2)
  {
    if (a2 == 3)
    {
      result = sub_21A68F83C(a1, 1, a4);
      if (result != -1)
        return result;
      a2 = 2;
    }
    return sub_21A68F83C(a1, a2, a4);
  }
  return result;
}

CFIndex sub_21A68F83C(const __CFString *a1, int a2, CFArrayRef theArray)
{
  const __CFString *v5;
  uint64_t v6;
  CFIndex v7;
  const void *ValueAtIndex;
  const char *v9;
  int v10;
  BOOL v11;
  BOOL v12;

  if ((a2 - 1) > 1)
    return -1;
  v5 = a1;
  v6 = 0;
  while (1)
  {
    v7 = sub_21A68F700(a1, v6, theArray);
    if (v7 == -1)
      break;
    ValueAtIndex = CFArrayGetValueAtIndex(theArray, v7);
    if (!ValueAtIndex)
      return -1;
    v10 = sub_21A72E344((uint64_t)ValueAtIndex, v9);
    v11 = !v10 && a2 == 1;
    v12 = v10 && a2 == 2;
    if (v12 || v11)
      break;
    v6 = v7 + 1;
    a1 = v5;
  }
  return v7;
}

uint64_t sub_21A68F8D8(const __CFString *a1, uint64_t a2, CFArrayRef theArray)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  CFIndex Count;
  int v13;
  const __CFString *v14;

  result = -1;
  if (a1)
  {
    if (theArray)
    {
      Count = CFArrayGetCount(theArray);
      result = -1;
      if (Count)
      {
        if (Count > a2)
        {
          v14 = 0;
          while (1)
          {
            sub_21A693B94((const __CFString *)theArray, (uint64_t)&v14, (UInt8 *)"[*].%ks", v7, v8, v9, v10, v11, a2);
            if (v13 || !v14)
              return -1;
            if ((sub_21A6D039C(a1, v14) & 1) != 0)
              break;
            if (Count == ++a2)
              return -1;
          }
          return a2;
        }
      }
    }
  }
  return result;
}

uint64_t sub_21A68F994(const __CFString *a1, CFArrayRef theArray)
{
  uint64_t v2;
  CFIndex Count;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  CFIndex v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  const __CFString *v20;

  v2 = -1;
  if (a1)
  {
    if (theArray)
    {
      Count = CFArrayGetCount(theArray);
      if (Count >= 1)
      {
        v11 = Count;
        v2 = 0;
        v20 = 0;
        do
        {
          sub_21A693B94((const __CFString *)theArray, (uint64_t)&v20, (UInt8 *)"[*]", v6, v7, v8, v9, v10, v2);
          if (v18 || !v20)
            break;
          if (sub_21A68F610(a1, v20, v12, v13, v14, v15, v16, v17))
            return v2;
          ++v2;
        }
        while (v11 != v2);
        return -1;
      }
    }
  }
  return v2;
}

void sub_21A68FA3C(CFArrayRef theArray, const __CFDate *a2, const __CFString **a3)
{
  CFIndex Count;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  CFIndex v12;
  const __CFString *v13;
  const __CFDate *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  const __CFDate *v23;
  const __CFString *v24;
  CFDateRef theDate;

  if (theArray)
  {
    if (a3)
    {
      Count = CFArrayGetCount(theArray);
      if (Count >= 1)
      {
        v12 = Count;
        v13 = 0;
        v14 = 0;
        v15 = 0;
        v24 = 0;
        theDate = 0;
        while (1)
        {
          sub_21A693B94((const __CFString *)theArray, (uint64_t)&v24, (UInt8 *)"[*]", v7, v8, v9, v10, v11, v15);
          if (v21)
            return;
          if (!v24)
            return;
          sub_21A693B94(v24, (uint64_t)&theDate, (UInt8 *)"%ks", v16, v17, v18, v19, v20, (uint64_t)"WiFiShim_PreferredNetwork_TimeAssociated");
          if (v22)
            return;
          v23 = theDate;
          if (!theDate)
            return;
          if (v14)
          {
            if (CFDateCompare(theDate, v14, 0) != kCFCompareGreaterThan)
              goto LABEL_16;
            v23 = theDate;
          }
          if (!a2)
            goto LABEL_15;
          if (CFDateCompare(v23, a2, 0) == kCFCompareLessThan)
          {
            v23 = theDate;
LABEL_15:
            v13 = v24;
            v14 = v23;
          }
LABEL_16:
          if (v12 == ++v15)
          {
            if (v13)
              *a3 = v13;
            return;
          }
        }
      }
    }
  }
}

const char *sub_21A68FB74(const char *result)
{
  if (result)
  {
    result = (const char *)strlen(result);
    if (result)
      return (const char *)((unint64_t)result <= sub_21A6D4F98(1918979693));
  }
  return result;
}

const char *sub_21A68FBB0(const char *result)
{
  char *v1;
  size_t v2;

  if (result)
  {
    v1 = (char *)result;
    v2 = strlen(result);
    return (const char *)sub_21A6A7ADC(v1, v2);
  }
  return result;
}

const char *sub_21A68FBE0(const char *result)
{
  if (result)
  {
    result = (const char *)strlen(result);
    if (result)
      return (const char *)((unint64_t)result <= sub_21A6D4F98(1937329773));
  }
  return result;
}

const char *sub_21A68FC1C(const char *result)
{
  if (result)
  {
    result = (const char *)strlen(result);
    if (result)
      return (const char *)((unint64_t)result <= sub_21A6D4F98(1937330263));
  }
  return result;
}

const char *sub_21A68FC58(const char *result)
{
  if (result)
  {
    result = (const char *)strlen(result);
    if (result)
      return (const char *)((unint64_t)result <= sub_21A6D4F98(1635077712));
  }
  return result;
}

const char *sub_21A68FC94(const char *result)
{
  if (result)
  {
    result = (const char *)strlen(result);
    if (result)
      return (const char *)((unint64_t)result <= sub_21A6D4F98(1718842224));
  }
  return result;
}

CFTypeRef sub_21A68FCD0(const void *a1, unsigned int *a2)
{
  int v3;
  const void **v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v13;
  uint64_t v15;
  const __CFString *v16;
  const void **v17;
  CFTypeRef v18;

  v17 = 0;
  v18 = 0;
  if (a1)
  {
    v15 = 0;
    v16 = 0;
    v3 = sub_21A695640(a1, &v17);
    v4 = v17;
    if (!v3 && v17)
    {
      while (sub_21A6956DC((uint64_t *)v17, &v16, &v15))
      {
        v5 = sub_21A6D463C(v16);
        if (v5 == 1684099956 || v5 == 1684886388 || v5 == 1684362100)
        {
          if (v15)
          {
            v13 = v5;
            if (!sub_21A692FEC((const __CFAllocator *)*MEMORY[0x24BDBD240], &v18, (uint64_t)"{%kO=%O}", v6, v7, v8, v9, v10, (uint64_t)v16)&& a2&& v18)
            {
              *a2 = v13;
            }
          }
          break;
        }
      }
      v4 = v17;
    }
    if (v4)
      sub_21A6956D0(v4);
  }
  return v18;
}

BOOL sub_21A68FDC0(const __CFString *a1, int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const __CFString *v16;
  int v17;
  _BOOL8 v18;
  int v19;
  int v20;
  int v21;
  CFStringRef theString1;
  const __CFString *v24;

  if (!a1)
    return 0;
  theString1 = 0;
  v24 = 0;
  sub_21A693B94(a1, (uint64_t)&v24, (UInt8 *)"%kC", a4, a5, a6, a7, a8, 1684362100);
  if (v10 == -6727)
  {
    sub_21A693B94(a1, (uint64_t)&v24, (UInt8 *)"%kC", v11, v12, v13, v14, v15, 1684099956);
    if (v19 == -6727)
    {
      sub_21A693B94(a1, (uint64_t)&v24, (UInt8 *)"%kC", v11, v12, v13, v14, v15, 1684886388);
      v18 = 0;
      if (v20)
        return v18;
      v16 = v24;
      if (!v24)
        return v18;
      v17 = 1298753353;
    }
    else
    {
      if (v19)
        return 0;
      v16 = v24;
      if (!v24)
        return 0;
      v17 = 1098015561;
    }
  }
  else
  {
    if (v10)
      return 0;
    v16 = v24;
    if (!v24)
      return 0;
    v17 = 1165123913;
  }
  sub_21A693B94(v16, (uint64_t)&theString1, (UInt8 *)"%kO", v11, v12, v13, v14, v15, (uint64_t)CFSTR("status"));
  if (v21 || !theString1)
    return 0;
  v18 = CFStringCompare(theString1, CFSTR("starting"), 0) == kCFCompareEqualTo;
  if (a2)
    *a2 = v17;
  return v18;
}

uint64_t sub_21A68FF04(const __CFString *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const __CFString *v16;
  const __CFString *v17;
  const __CFString *v18;
  _BOOL8 v19;
  int v20;
  int v21;
  int v22;
  CFComparisonResult v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  CFStringRef theString1;
  const __CFString *v31;

  if (!a1)
    return 0;
  theString1 = 0;
  v31 = 0;
  sub_21A693B94(a1, (uint64_t)&v31, (UInt8 *)"%kC", a4, a5, a6, a7, a8, 1684362100);
  if (v10 == -6727)
  {
    sub_21A693B94(a1, (uint64_t)&v31, (UInt8 *)"%kC", v11, v12, v13, v14, v15, 1684099956);
    if (v20 == -6727)
    {
      sub_21A693B94(a1, (uint64_t)&v31, (UInt8 *)"%kC", v11, v12, v13, v14, v15, 1684886388);
      v19 = 0;
      if (v21)
        return v19;
      v16 = v31;
      if (!v31)
        return v19;
      v17 = CFSTR("migrateComplete");
      v18 = CFSTR("migrateError");
    }
    else
    {
      if (v20)
        return 0;
      v16 = v31;
      if (!v31)
        return 0;
      v17 = CFSTR("archiveComplete");
      v18 = CFSTR("archiveError");
    }
  }
  else
  {
    if (v10)
      return 0;
    v16 = v31;
    if (!v31)
      return 0;
    v17 = CFSTR("eraseComplete");
    v18 = CFSTR("eraseError");
  }
  sub_21A693B94(v16, (uint64_t)&theString1, (UInt8 *)"%kO", v11, v12, v13, v14, v15, (uint64_t)CFSTR("status"));
  if (v22 || !theString1)
    return 0;
  v24 = CFStringCompare(theString1, v17, 0);
  v19 = v24 == kCFCompareEqualTo;
  if (a2 && v24 == kCFCompareEqualTo)
  {
    sub_21A693B94(v31, a2, (UInt8 *)"%kO:err", v25, v26, v27, v28, v29, (uint64_t)v18);
    return 1;
  }
  return v19;
}

const __CFString *sub_21A690078(const __CFString *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;

  if (result)
  {
    v8 = 0;
    sub_21A693B94(result, (uint64_t)&v8, (UInt8 *)"%kO.%kO:int", a4, a5, a6, a7, a8, (uint64_t)CFSTR("txt"));
    return (const __CFString *)(v8 == 118);
  }
  return result;
}

const __CFString *sub_21A6900C8(const __CFString *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  int v9;
  int v10;

  if (result)
  {
    v10 = 0;
    sub_21A693B94(result, (uint64_t)&v10, (UInt8 *)"%ks.%kC:int", a4, a5, a6, a7, a8, (uint64_t)"txt");
    v9 = v8;
    result = 0;
    if (!v9)
      return (const __CFString *)((v10 & 0x18000) == 0x10000);
  }
  return result;
}

BOOL sub_21A690128(const __CFString *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  _BOOL8 result;
  int v17;

  if (!a1)
    return 1;
  v17 = 0;
  sub_21A693B94(a1, (uint64_t)&v17, (UInt8 *)"%ks.%ks:vers", a4, a5, a6, a7, a8, (uint64_t)"txt");
  result = v14 && (sub_21A693B94(a1, (uint64_t)&v17, (UInt8 *)"%ks:vers", v9, v10, v11, v12, v13, (uint64_t)"syVs"), v15)
        || (v17 & 0xFFFFFF00) > 0x7318000
        || (v17 & 0xFFFFFF00) == 0x7318000 && !(_BYTE)v17;
  return result;
}

uint64_t sub_21A6901D4(const __CFString *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;
  int v11;
  int v12;
  CFTypeID TypeID;
  CFIndex Count;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  CFIndex v20;
  uint64_t v21;
  int v22;
  int v23;
  CFTypeRef cf;

  result = -1;
  if (a1)
  {
    if ((a2 - 1) <= 1)
    {
      cf = 0;
      sub_21A693B94(a1, (uint64_t)&cf, (UInt8 *)"%kO", a4, a5, a6, a7, a8, (uint64_t)CFSTR("radios"));
      v12 = v11;
      result = -1;
      if (!v12)
      {
        if (cf)
        {
          TypeID = CFArrayGetTypeID();
          if (TypeID == CFGetTypeID(cf))
          {
            Count = CFArrayGetCount((CFArrayRef)cf);
            if (Count >= 1)
            {
              v20 = Count;
              v21 = 0;
              while (1)
              {
                v23 = 0;
                sub_21A693B94((const __CFString *)cf, (uint64_t)&v23, (UInt8 *)"[*].%kO:int", v15, v16, v17, v18, v19, v21);
                if (v22)
                  break;
                if (a2 == 2)
                {
                  if ((v23 & 0xE) != 0)
                    return v21;
                }
                else if (a2 == 1 && (v23 & 0x70) != 0)
                {
                  return v21;
                }
                ++v21;
                result = -1;
                if (v20 == v21)
                  return result;
              }
            }
          }
          return -1;
        }
      }
    }
  }
  return result;
}

void sub_21A690300(const __CFString *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v12;
  CFIndex Count;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  CFIndex v20;
  uint64_t v21;
  uint64_t v22;
  CFArrayRef theArray;

  if (a1)
  {
    if (a3)
    {
      theArray = 0;
      sub_21A693B94(a1, (uint64_t)&theArray, (UInt8 *)"%kO", a4, a5, a6, a7, a8, (uint64_t)CFSTR("radios"));
      if (!v12)
      {
        if (theArray)
        {
          Count = CFArrayGetCount(theArray);
          if (Count)
          {
            if (a2)
            {
              v20 = Count;
              v21 = sub_21A6901D4(a1, a2, v14, v15, v16, v17, v18, v19);
              if (v21 == -1)
                return;
              v22 = v21;
              if (v21 >= v20)
                return;
            }
            else
            {
              v22 = 0;
            }
            sub_21A6903D8(a1, v22, a3, a4, v16, v17, v18, v19);
          }
        }
      }
    }
  }
}

void sub_21A6903D8(const __CFString *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a4)
    sub_21A693B94(a1, a4, (UInt8 *)"%kO.[*].%kO", a4, a5, a6, a7, a8, (uint64_t)CFSTR("radios"));
}

void sub_21A69043C(const __CFString *a1, int a2, const void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v12;
  CFIndex Count;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  CFIndex v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t i;
  int v27;
  CFArrayRef theArray;

  if (a1)
  {
    if (a3)
    {
      theArray = 0;
      sub_21A693B94(a1, (uint64_t)&theArray, (UInt8 *)"%kO", a4, a5, a6, a7, a8, (uint64_t)CFSTR("radios"));
      if (!v12)
      {
        if (theArray)
        {
          Count = CFArrayGetCount(theArray);
          if (Count)
          {
            v20 = Count;
            if (a2)
            {
              v21 = sub_21A6901D4(a1, a2, v14, v15, v16, v17, v18, v19);
              if (v21 != -1 && v21 < v20)
                sub_21A69054C(a1, v21, a3, a4, v22, v23, v24, v25);
            }
            else if (Count >= 1)
            {
              for (i = 0; i != v20; ++i)
              {
                sub_21A69054C(a1, i, a3, a4, v16, v17, v18, v19);
                if (v27)
                  break;
              }
            }
          }
        }
      }
    }
  }
}

void sub_21A69054C(const __CFString *a1, uint64_t a2, const void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  __CFDictionary *v8;
  __CFDictionary *v9;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  CFMutableDictionaryRef theDict[5];

  if (a2 != -1)
  {
    theDict[3] = v8;
    theDict[4] = v9;
    theDict[0] = 0;
    sub_21A693B94(a1, (uint64_t)theDict, (UInt8 *)"%kO.[*]", a4, a5, a6, a7, a8, (uint64_t)CFSTR("radios"));
    if (!v17)
    {
      if (theDict[0])
      {
        if (a4)
          sub_21A693A8C((const __CFAllocator *)*MEMORY[0x24BDBD240], theDict[0], (uint64_t)"%kO=%O", v12, v13, v14, v15, v16, (uint64_t)a3);
        else
          CFDictionaryRemoveValue(theDict[0], a3);
      }
    }
  }
}

CFPropertyListRef sub_21A6905F0(const void *a1)
{
  if (CFPropertyListIsValid(a1, kCFPropertyListXMLFormat_v1_0))
    return CFPropertyListCreateDeepCopy((CFAllocatorRef)*MEMORY[0x24BDBD240], a1, 2uLL);
  else
    return 0;
}

const char *sub_21A69063C(void *a1, const char *a2, uint64_t a3)
{
  const char *result;

  result = (const char *)objc_msgSend_UTF8String(a1, a2, a3);
  if (result)
    return (const char *)strlen(result);
  return result;
}

const __CFString *sub_21A69065C(void *a1, const char *a2, unint64_t a3)
{
  char *v5;
  const char *v6;
  uint64_t v7;
  size_t v8;
  size_t v9;
  void *v10;
  void *v11;
  const char *v12;
  uint64_t v13;
  const void *v14;
  const char *v15;
  uint64_t v16;

  v5 = (char *)objc_msgSend_UTF8String(a1, a2, a3);
  v8 = objc_msgSend_UTF8ByteCount(a1, v6, v7);
  v9 = sub_21A6A2D84(v5, v8, a3);
  v10 = malloc_type_malloc(v9 + 1, 0x2B634DA6uLL);
  if (!v10)
    return &stru_24DD08368;
  v11 = v10;
  memset(v10, 255, v9 + 1);
  v14 = (const void *)objc_msgSend_UTF8String(a1, v12, v13);
  memcpy(v11, v14, v9);
  *((_BYTE *)v11 + v9) = 0;
  v16 = objc_msgSend_stringWithCString_encoding_(MEMORY[0x24BDD17C8], v15, (uint64_t)v11, 4);
  free(v11);
  return (const __CFString *)v16;
}

uint64_t sub_21A69071C(void *a1, const char *a2, void *a3)
{
  char *v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  char *v10;
  uint64_t v12;

  v5 = (char *)objc_msgSend_UTF8String(a3, a2, (uint64_t)a3);
  v8 = objc_msgSend_UTF8String(a1, v6, v7);
  if (!v5)
    return objc_msgSend_compare_(a1, v9, (uint64_t)a3);
  v10 = (char *)v8;
  if (!v8)
    return objc_msgSend_compare_(a1, v9, (uint64_t)a3);
  v12 = 0;
  if (sub_21A6A16C4(v5, 0, (unsigned int *)&v12, 0, 0, 0, 0)
    || !(_DWORD)v12
    || sub_21A6A16C4(v10, 0, (unsigned int *)&v12 + 1, 0, 0, 0, 0)
    || !HIDWORD(v12))
  {
    return objc_msgSend_compare_(a1, v9, (uint64_t)a3);
  }
  if (HIDWORD(v12) < v12)
    return -1;
  return HIDWORD(v12) > v12;
}

uint64_t sub_21A6907E8(void *a1, const char *a2, void *a3)
{
  _BYTE *v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  _BYTE *v10;
  unint64_t v12;
  unint64_t v13;
  __int128 v15;
  __int128 v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v5 = (_BYTE *)objc_msgSend_UTF8String(a3, a2, (uint64_t)a3);
  v8 = objc_msgSend_UTF8String(a1, v6, v7);
  if (!v5)
    return objc_msgSend_compare_(a1, v9, (uint64_t)a3);
  v10 = (_BYTE *)v8;
  if (!v8
    || sub_21A6A11D4(v5, 0, &v15, 0, 0, 0, 0)
    || sub_21A6A11D4(v10, 0, &v16, 0, 0, 0, 0))
  {
    return objc_msgSend_compare_(a1, v9, (uint64_t)a3);
  }
  v12 = bswap64(v16);
  v13 = bswap64(v15);
  if (v12 == v13
    && (v12 = bswap64(*((unint64_t *)&v16 + 1)), v13 = bswap64(*((unint64_t *)&v15 + 1)), v12 == v13))
  {
    return 0;
  }
  else if (v12 < v13)
  {
    return -1;
  }
  else
  {
    return 1;
  }
}

uint64_t sub_21A690904(void *a1, const char *a2, uint64_t a3)
{
  const char *v4;
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  void *v9;
  void *v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  const char *v16;

  if (!a1 || !objc_msgSend_length(a1, a2, a3))
    return (uint64_t)a1;
  if (objc_msgSend_length(a1, v4, v5) == 1)
    return objc_msgSend_uppercaseString(a1, v6, v7);
  v9 = (void *)MEMORY[0x24BDD17C8];
  v10 = (void *)objc_msgSend_substringToIndex_(a1, v6, 1);
  v13 = objc_msgSend_uppercaseString(v10, v11, v12);
  v15 = objc_msgSend_substringFromIndex_(a1, v14, 1);
  return objc_msgSend_stringWithFormat_(v9, v16, (uint64_t)CFSTR("%@%@"), v13, v15);
}

uint64_t sub_21A690A14(void *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  void *v11;
  const char *v12;
  void *v13;

  v11 = (void *)objc_msgSend_dictionary(MEMORY[0x24BDBCED8], a2, a3);
  v13 = v11;
  if (a3)
    objc_msgSend_setObject_forKey_(v11, v12, a3, CFSTR("name"));
  if (a4)
    objc_msgSend_setObject_forKey_(v13, v12, a4, CFSTR("object"));
  if (a5)
    objc_msgSend_setObject_forKey_(v13, v12, a5, CFSTR("userInfo"));
  return objc_msgSend_performSelectorOnMainThread_withObject_waitUntilDone_(a1, v12, (uint64_t)sel_postNotificationNameOnMainThreadHandler_, v13, a6);
}

uint64_t sub_21A690ABC(uint64_t a1, const char *a2, void *a3)
{
  uint64_t v5;
  const char *v6;
  const char *v7;

  v5 = objc_msgSend_objectForKey_(a3, a2, (uint64_t)CFSTR("name"));
  objc_msgSend_objectForKey_(a3, v6, (uint64_t)CFSTR("object"));
  objc_msgSend_objectForKey_(a3, v7, (uint64_t)CFSTR("userInfo"));
  return MEMORY[0x24BEDD108](a1, sel_postNotificationName_object_userInfo_, v5);
}

BOOL sub_21A690B2C(void *a1, const char *a2, uint64_t a3)
{
  void *v4;
  const char *v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  unint64_t v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;

  v4 = (void *)objc_msgSend_pathExtension(a1, a2, a3);
  if ((unint64_t)objc_msgSend_length(v4, v5, v6) < 2)
    return 0;
  v8 = objc_msgSend_rangeOfString_(a1, v7, (uint64_t)CFSTR("@"));
  if (v8 == 0x7FFFFFFFFFFFFFFFLL)
    return 0;
  v12 = v8;
  v13 = objc_msgSend_length(a1, v9, v10);
  return v13 - objc_msgSend_length(v4, v14, v15) - 2 > v12;
}

id sub_21A690BB0(id result)
{
  void *v1;

  if ((id)qword_2550F4DE8 != result)
  {
    v1 = result;

    result = v1;
    qword_2550F4DE8 = (uint64_t)result;
  }
  return result;
}

void sub_21A690BE8()
{

  qword_2550F4DE8 = 0;
}

uint64_t sub_21A690C10(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;
  const char *v6;
  void *v7;
  const char *v8;

  v4 = (void *)MEMORY[0x24BDD1488];
  v5 = objc_opt_class();
  v7 = (void *)objc_msgSend_bundleForClass_(v4, v6, v5);
  return objc_msgSend_localizedStringForKey_value_table_(v7, v8, a1, &stru_24DD08368, a2);
}

uint64_t sub_21A690C68(uint64_t a1, const char *a2)
{
  void *v2;
  uint64_t v3;
  const char *v4;

  v2 = (void *)MEMORY[0x24BDD16F0];
  v3 = objc_msgSend_numberWithInteger_(MEMORY[0x24BDD16E0], a2, a1);
  return objc_msgSend_localizedStringFromNumber_numberStyle_(v2, v4, v3, 1);
}

uint64_t sub_21A690CA4(int a1)
{
  const char *v1;
  _BYTE v3[5];

  sub_21A6711EC(a1, v3);
  return objc_msgSend_stringWithCString_encoding_(MEMORY[0x24BDD17C8], v1, (uint64_t)v3, 4);
}

void *sub_21A690CD8(void *result, const char *a2, uint64_t a3)
{
  unsigned int v3;

  v3 = 0;
  if (result)
  {
    result = (void *)objc_msgSend_UTF8String(result, a2, a3);
    if (result)
    {
      sub_21A671214((char *)result, 0xFFFFFFFFFFFFFFFFLL, &v3);
      return (void *)v3;
    }
  }
  return result;
}

const __CFString *sub_21A690D10(uint64_t a1, int a2)
{
  unsigned int v3;
  __CFString **v4;

  v3 = sub_21A671298(a1) - 3;
  if (v3 < 8 && ((0xBFu >> v3) & 1) != 0)
  {
    v4 = &off_24DD05010[v3];
  }
  else
  {
    if ((a2 - 2) >= 3)
      return &stru_24DD08368;
    v4 = &off_24DD05050[a2 - 2];
  }
  return *v4;
}

const __CFString *sub_21A690D80(unsigned int a1, int a2, int a3)
{
  int v6;
  const char *v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  __CFString *v12;
  const __CFString *v13;
  void *v14;
  uint64_t v15;
  const char *v16;
  void *v17;
  const char *v18;
  _BYTE v21[5];

  if (a3)
    v6 = 1937326416;
  else
    v6 = 1651725136;
  sub_21A6711EC(v6, v21);
  v8 = objc_msgSend_stringWithCString_encoding_(MEMORY[0x24BDD17C8], v7, (uint64_t)v21, 4);
  v11 = v8;
  if ((a2 - 5) > 0xFFFFFFFD)
  {
    v12 = &stru_24DD08368;
LABEL_8:
    if (objc_msgSend_length(v12, v9, v10))
      return v12;
    goto LABEL_9;
  }
  v12 = (__CFString *)sub_21A690E94(v8, (const char *)a1);
  if (v12)
    goto LABEL_8;
LABEL_9:
  if (a2 != 2)
    return sub_21A690E94(v11, 0);
  if (a3)
    v13 = CFSTR("longGenericAirPlayDeviceName");
  else
    v13 = CFSTR("shortGenericAirPlayDeviceName");
  v14 = (void *)MEMORY[0x24BDD1488];
  v15 = objc_opt_class();
  v17 = (void *)objc_msgSend_bundleForClass_(v14, v16, v15);
  return (const __CFString *)objc_msgSend_localizedStringForKey_value_table_(v17, v18, (uint64_t)v13, &stru_24DD08368, CFSTR("AirPortSettings"));
}

const __CFString *sub_21A690E94(uint64_t a1, const char *a2)
{
  void *v2;
  void *v3;
  uint64_t v4;
  const char *v5;
  void *v6;
  const char *v7;
  void *v8;
  const char *v9;
  const char *v10;
  void *v11;
  uint64_t v12;
  const char *v13;
  void *v14;
  const char *v15;

  v2 = (void *)objc_msgSend_stringWithFormat_(MEMORY[0x24BDD17C8], a2, (uint64_t)CFSTR("%@.%lu"), a1, a2);
  v3 = (void *)MEMORY[0x24BDD1488];
  v4 = objc_opt_class();
  v6 = (void *)objc_msgSend_bundleForClass_(v3, v5, v4);
  v8 = (void *)objc_msgSend_localizedStringForKey_value_table_(v6, v7, (uint64_t)v2, &stru_24DD08368, CFSTR("AirPortSettings"));
  if (objc_msgSend_isEqualToString_(v8, v9, (uint64_t)v2))
  {
    v11 = (void *)MEMORY[0x24BDD1488];
    v12 = objc_opt_class();
    v14 = (void *)objc_msgSend_bundleForClass_(v11, v13, v12);
    v8 = (void *)objc_msgSend_localizedStringForKey_value_table_(v14, v15, (uint64_t)v2, &stru_24DD08368, CFSTR("GuestNetwork"));
  }
  if (objc_msgSend_isEqual_(v2, v10, (uint64_t)v8))
    return &stru_24DD08368;
  else
    return (const __CFString *)v8;
}

const __CFString *sub_21A690F78(uint64_t a1, const char *a2, int a3)
{
  unsigned int v4;
  unsigned int v6;
  const char *v7;

  v4 = a2;
  v6 = objc_msgSend_scanInfoDeviceKind_(WiFiUtils, a2, a1);
  if (v6 < 3)
    return sub_21A690D80(v4, v6, a3);
  if (v6 - 3 >= 2)
    return &stru_24DD08368;
  return (const __CFString *)objc_msgSend_scanInfoFriendlyName_(WiFiUtils, v7, a1);
}

const __CFString *sub_21A691000(const __CFString *a1, const char *a2, uint64_t a3)
{
  int v3;
  const __CFString *result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;

  v3 = (int)a2;
  result = (const __CFString *)objc_msgSend_string(MEMORY[0x24BDD17C8], a2, a3);
  if (a1)
  {
    if (v3 && sub_21A68F104(a1, v6, v7, v8, v9, v10, v11, v12))
    {
      v13 = sub_21A68E368(a1, v6, v7, v8, v9, v10, v11, v12);
      v21 = sub_21A68E344((uint64_t)a1, v14, v15, v16, v17, v18, v19, v20);
      return sub_21A690D80(v13, v21, 0);
    }
    else
    {
      return sub_21A68EE6C(a1, v6, v7, v8, v9, v10, v11, v12);
    }
  }
  return result;
}

const __CFString *sub_21A69107C(uint64_t a1, const char *a2, uint64_t a3)
{
  int v3;
  const __CFString *result;
  const char *v6;
  unsigned int v7;
  const char *v8;
  int v9;

  v3 = (int)a2;
  result = (const __CFString *)objc_msgSend_string(MEMORY[0x24BDD17C8], a2, a3);
  if (a1)
  {
    if (v3 && objc_msgSend_scanInfoIsUnconfigured_(WiFiUtils, v6, a1))
    {
      v7 = objc_msgSend_scanInfoAppleProductID_(WiFiUtils, v6, a1);
      v9 = objc_msgSend_scanInfoDeviceKind_(WiFiUtils, v8, a1);
      return sub_21A690D80(v7, v9, 0);
    }
    else
    {
      return (const __CFString *)objc_msgSend_scanInfoNetworkName_(WiFiUtils, v6, a1);
    }
  }
  return result;
}

const __CFString *sub_21A69111C(int a1)
{
  const __CFString *v1;

  v1 = CFSTR("AirPortSetupTitle");
  if (a1 == 4)
    v1 = CFSTR("AccessorySetupTitle");
  if ((a1 & 0xFFFFFFFE) == 2)
    return CFSTR("AirPlaySetupTitle");
  else
    return v1;
}

const char *sub_21A69114C(void *a1, const char *a2, uint64_t a3)
{
  int v3;
  const char *result;
  char *v5;
  size_t v6;
  int v7;
  void *v8;
  _BYTE *v9;
  const char *v10;
  void *v11;
  const char *v12;
  uint64_t v13;
  int v14;
  __int16 v15;
  _QWORD v16[2];
  int v17;
  uint64_t v18;

  v3 = (int)a2;
  v18 = *MEMORY[0x24BDAC8D0];
  result = (const char *)objc_msgSend_UTF8String(a1, a2, a3);
  if (result)
  {
    v5 = (char *)result;
    v15 = 0;
    v14 = 0;
    v16[0] = 0;
    v16[1] = 0;
    v17 = 0;
    v6 = strlen(result);
    v7 = sub_21A6A1EB0(v5, v6, 6, &v14);
    result = 0;
    if (!v7)
    {
      v8 = (void *)MEMORY[0x24BDD17C8];
      v9 = sub_21A6A1FDC((unsigned __int8 *)&v14, 6, v16);
      v11 = (void *)objc_msgSend_stringWithCString_encoding_(v8, v10, (uint64_t)v9, 4);
      if (v3)
        return (const char *)objc_msgSend_uppercaseString(v11, v12, v13);
      else
        return (const char *)objc_msgSend_lowercaseString(v11, v12, v13);
    }
  }
  return result;
}

uint64_t sub_21A691214(int a1)
{
  void *v2;
  uint64_t v3;
  const char *v4;
  uint64_t v5;
  void *v6;
  const char *v7;
  uint64_t v8;
  const char *v9;
  _BYTE v11[5];
  _BYTE v12[17];
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v2 = (void *)MEMORY[0x24BDD17C8];
  v3 = sub_21A6D69EC(v12, 0x11uLL);
  v5 = objc_msgSend_stringWithCString_encoding_(v2, v4, v3, 4);
  v6 = (void *)MEMORY[0x24BDD17C8];
  sub_21A6711EC(a1, v11);
  v8 = objc_msgSend_stringWithCString_encoding_(MEMORY[0x24BDD17C8], v7, (uint64_t)v11, 4);
  return objc_msgSend_stringWithFormat_(v6, v9, (uint64_t)CFSTR("%@%@"), v5, v8);
}

void *sub_21A6912CC(uint64_t a1, const char *a2)
{
  void *Object;
  const char *v3;
  uint64_t v4;
  const char *v5;
  uint64_t v6;
  void *v7;
  const char *v8;
  uint64_t v9;

  Object = (void *)objc_msgSend_stringWithString_(MEMORY[0x24BDD17C8], a2, a1);
  if ((unint64_t)objc_msgSend_length(Object, v3, v4) >= 5)
  {
    v7 = (void *)objc_msgSend_componentsSeparatedByString_(Object, v5, (uint64_t)CFSTR("."));
    if (objc_msgSend_count(v7, v8, v9))
      Object = (void *)objc_msgSend_lastObject(v7, v5, v6);
  }
  return sub_21A690CD8(Object, v5, v6);
}

uint64_t sub_21A691330(int a1)
{
  const char *v1;
  void *v2;
  _BYTE v4[5];

  sub_21A6711EC(a1, v4);
  v2 = (void *)objc_msgSend_stringWithCString_encoding_(MEMORY[0x24BDD17C8], v1, (uint64_t)v4, 4);
  return sub_21A691368(v2);
}

uint64_t sub_21A691368(void *a1)
{
  void *v2;
  uint64_t v3;
  const char *v4;
  void *v5;
  const char *v6;
  uint64_t v7;
  const char *v8;
  void *v9;
  uint64_t v10;
  const char *v11;
  void *v12;
  const char *v13;

  v2 = (void *)MEMORY[0x24BDD1488];
  v3 = objc_opt_class();
  v5 = (void *)objc_msgSend_bundleForClass_(v2, v4, v3);
  v7 = objc_msgSend_localizedStringForKey_value_table_(v5, v6, (uint64_t)a1, &stru_24DD08368, CFSTR("AirPortSettings"));
  if (!objc_msgSend_isEqualToString_(a1, v8, v7))
    return v7;
  v9 = (void *)MEMORY[0x24BDD1488];
  v10 = objc_opt_class();
  v12 = (void *)objc_msgSend_bundleForClass_(v9, v11, v10);
  return objc_msgSend_localizedStringForKey_value_table_(v12, v13, (uint64_t)a1, &stru_24DD08368, CFSTR("GuestNetwork"));
}

const __CFString *sub_21A691418(int a1, const char *a2)
{
  const char *v3;
  uint64_t v4;
  _BYTE v6[5];

  sub_21A6711EC(a1, v6);
  v4 = objc_msgSend_stringWithCString_encoding_(MEMORY[0x24BDD17C8], v3, (uint64_t)v6, 4);
  return sub_21A690E94(v4, a2);
}

const __CFString *sub_21A691460(void *a1, unint64_t a2)
{
  const char *v4;
  uint64_t v5;
  const __CFString *v6;
  void *v7;
  uint64_t v8;
  const char *v9;
  void *v10;
  const char *v11;
  uint64_t v12;
  const char *v13;
  void *valid;
  const char *v15;
  uint64_t v16;
  void *v19;

  v19 = 0;
  sub_21A72AC80(&v19, 0, 0);
  if (a2 && objc_msgSend_UTF8ByteCount(a1, v4, v5) >= a2)
    return &stru_24DD08368;
  v6 = &stru_24DD08368;
  if (objc_msgSend_length(v19, v4, v5))
  {
    v7 = (void *)MEMORY[0x24BDD1488];
    v8 = objc_opt_class();
    v10 = (void *)objc_msgSend_bundleForClass_(v7, v9, v8);
    v12 = objc_msgSend_localizedStringForKey_value_table_(v10, v11, (uint64_t)CFSTR("genericUserOwnership"), &stru_24DD08368, CFSTR("AirPortSettings"));
    valid = (void *)objc_msgSend_stringWithValidatedFormat_validFormatSpecifiers_error_(MEMORY[0x24BDD17C8], v13, v12, CFSTR("%@%@"), 0, v19, a1);
    if (objc_msgSend_UTF8ByteCount(valid, v15, v16) <= a2 || a2 == 0)
      return (const __CFString *)valid;
  }
  return v6;
}

const __CFString *sub_21A69154C(unsigned int a1, int a2)
{
  __CFString *v2;
  unint64_t v3;

  v2 = (__CFString *)sub_21A690D80(a1, a2, 0);
  v3 = sub_21A6D4F98(1937329773);
  return sub_21A691460(v2, v3);
}

const __CFString *sub_21A691584(unsigned int a1, int a2)
{
  __CFString *v2;
  unsigned int v3;
  const char *v4;
  uint64_t v5;
  unint64_t v6;
  const char *v7;
  uint64_t v8;
  const __CFString *v9;

  v2 = (__CFString *)sub_21A690D80(a1, a2, 0);
  v3 = sub_21A6D4F98(1937329773);
  if (!v3)
    return v2;
  v6 = v3;
  v9 = &stru_24DD08368;
  if (objc_msgSend_UTF8ByteCount(v2, v4, v5) < (unint64_t)v3 && objc_msgSend_UTF8ByteCount(v2, v7, v8) <= v6)
    return v2;
  return v9;
}

const __CFString *sub_21A6915F8()
{
  void *v0;
  uint64_t v1;
  const char *v2;
  void *v3;
  const char *v4;
  void *v5;
  unint64_t v6;

  v0 = (void *)MEMORY[0x24BDD1488];
  v1 = objc_opt_class();
  v3 = (void *)objc_msgSend_bundleForClass_(v0, v2, v1);
  v5 = (void *)objc_msgSend_localizedStringForKey_value_table_(v3, v4, (uint64_t)CFSTR("genericWiFiNetwork"), &stru_24DD08368, CFSTR("AirPortSettings"));
  v6 = sub_21A6D4F98(1918979693);
  return sub_21A691460(v5, v6);
}

uint64_t sub_21A692394(CFAllocatorRef allocator, const __CFString *a2, CFTypeRef *a3)
{
  CFMutableDataRef Mutable;
  uint64_t v7;
  CFTypeRef cf;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  if (qword_2550EEBD0 == -1)
  {
    qword_2550EEBD8 = CFArrayGetTypeID();
    qword_2550EEBE0 = CFBooleanGetTypeID();
    qword_2550EEBE8 = CFDataGetTypeID();
    qword_2550EEBF0 = CFDateGetTypeID();
    qword_2550EEBF8 = CFDictionaryGetTypeID();
    qword_2550EEC00 = CFNumberGetTypeID();
    qword_2550EEBD0 = CFStringGetTypeID();
  }
  Mutable = CFDataCreateMutable(allocator, 0);
  cf = Mutable;
  if (!Mutable)
    return 4294960568;
  v24 = 0u;
  v25 = 0u;
  v22 = 0u;
  v23 = 0u;
  v20 = 0u;
  v21 = 0u;
  v18 = 0u;
  v19 = 0u;
  v16 = 0u;
  v17 = 0u;
  v14 = 0u;
  v15 = 0u;
  v12 = 0u;
  v13 = 0u;
  v10 = 0u;
  v11 = 0u;
  CFDataAppendBytes(Mutable, (const UInt8 *)"CFB0", 4);
  v7 = sub_21A6924F4((uint64_t)&cf, a2);
  if ((_DWORD)v7)
  {
    if (cf)
      CFRelease(cf);
  }
  else
  {
    CFDataAppendBytes((CFMutableDataRef)cf, (const UInt8 *)"END!", 4);
    *a3 = cf;
  }
  return v7;
}

uint64_t sub_21A6924F4(uint64_t a1, const __CFString *a2)
{
  CFTypeID v4;
  CFIndex v5;
  CFIndex v6;
  CFIndex v7;
  CFIndex v8;
  CFIndex v9;
  BOOL v10;
  __CFData *v11;
  const UInt8 *BytePtr;
  UInt8 v13;
  CFIndex v14;
  uint64_t v15;
  CFIndex v17;
  UInt8 v18;
  const __CFAllocator *Default;
  CFCalendarRef v20;
  __CFCalendar *v21;
  CFAbsoluteTime v22;
  CFIndex Count;
  CFIndex v24;
  const void **v25;
  const void **v26;
  const void **v27;
  uint64_t v28;
  uint64_t v29;
  CFIndex v30;
  CFIndex v31;
  CFIndex v32;
  const void *ValueAtIndex;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t valuePtr;
  CFIndex length;
  UInt8 bytes;
  uint64_t *v41;
  char *v42;
  uint64_t *v43;
  char *v44;
  uint64_t *v45;
  char *v46;
  CFRange v47;

  bytes = 0;
  valuePtr = 0;
  length = 0;
  v4 = CFGetTypeID(a2);
  if (v4 == qword_2550EEBD0)
  {
    bytes = 112;
    CFDataAppendBytes(*(CFMutableDataRef *)a1, &bytes, 1);
    v5 = CFStringGetLength(a2);
    if (v5 >= 1)
    {
      v6 = v5;
      v7 = 0;
      do
      {
        v47.location = v7;
        v47.length = v6;
        v8 = CFStringGetBytes(a2, v47, 0x8000100u, 0, 0, (UInt8 *)(a1 + 8), 256, &length);
        if (v8 < 1)
          return 4294960561;
        v9 = v8;
        CFDataAppendBytes(*(CFMutableDataRef *)a1, (const UInt8 *)(a1 + 8), length);
        v7 += v9;
        v10 = v6 <= v9;
        v6 -= v9;
      }
      while (!v10);
    }
    v11 = *(__CFData **)a1;
    BytePtr = (const UInt8 *)"";
    goto LABEL_16;
  }
  if (v4 == qword_2550EEC00)
  {
    CFNumberGetValue((CFNumberRef)a2, kCFNumberSInt64Type, &valuePtr);
    sub_21A692F38((CFMutableDataRef *)a1, valuePtr);
    return 0;
  }
  if (v4 == qword_2550EEBE0)
  {
    if ((const __CFString *)*MEMORY[0x24BDBD270] == a2)
      v13 = 9;
    else
      v13 = 8;
    bytes = v13;
    goto LABEL_15;
  }
  if (v4 == qword_2550EEBE8)
  {
    v17 = CFDataGetLength((CFDataRef)a2);
    v18 = v17 | 0x40;
    if (v17 >= 15)
      v18 = 79;
    bytes = v18;
    CFDataAppendBytes(*(CFMutableDataRef *)a1, &bytes, 1);
    if (v17 >= 15)
      sub_21A692F38((CFMutableDataRef *)a1, v17);
    BytePtr = CFDataGetBytePtr((CFDataRef)a2);
    v11 = *(__CFData **)a1;
    v14 = v17;
    goto LABEL_17;
  }
  if (v4 == qword_2550EEBF0)
  {
    v36 = 0;
    v37 = 0;
    v35 = 0;
    v46 = (char *)&v37 + 4;
    v45 = &v37;
    v44 = (char *)&v36 + 4;
    v43 = &v36;
    v42 = (char *)&v35 + 4;
    v41 = &v35;
    Default = CFAllocatorGetDefault();
    v20 = CFCalendarCreateWithIdentifier(Default, (CFCalendarIdentifier)*MEMORY[0x24BDBD3B8]);
    if (v20)
    {
      v21 = v20;
      MEMORY[0x2207468B8](a2);
      CFCalendarDecomposeAbsoluteTime(v21, v22, "yMdHms", &v46, &v45, &v44, &v43, &v42, &v41);
      CFRelease(v21);
    }
    LOBYTE(v46) = 48;
    BYTE1(v46) = HIDWORD(v37) >> 6;
    BYTE2(v46) = (4 * BYTE4(v37)) | (v37 >> 2) & 3;
    BYTE3(v46) = ((_BYTE)v37 << 6) | (2 * (BYTE4(v36) & 0x1F)) | ((v36 & 0x10) != 0);
    BYTE4(v46) = (16 * v36) | (BYTE4(v35) >> 2) & 0xF;
    BYTE5(v46) = v35 & 0x3F | (BYTE4(v35) << 6);
    v11 = *(__CFData **)a1;
    BytePtr = (const UInt8 *)&v46;
    v14 = 6;
    goto LABEL_17;
  }
  if (v4 == qword_2550EEBF8)
  {
    bytes = -48;
    CFDataAppendBytes(*(CFMutableDataRef *)a1, &bytes, 1);
    Count = CFDictionaryGetCount((CFDictionaryRef)a2);
    if (Count >= 1)
    {
      v24 = Count;
      v25 = (const void **)malloc_type_malloc(16 * Count, 0xC0040B8AA526DuLL);
      if (!v25)
        return 4294960568;
      v26 = v25;
      v27 = &v25[v24];
      CFDictionaryGetKeysAndValues((CFDictionaryRef)a2, v25, v27);
      v28 = 0;
      while (1)
      {
        v29 = sub_21A6924F4(a1, v26[v28]);
        if ((_DWORD)v29)
          break;
        v29 = sub_21A6924F4(a1, v27[v28]);
        if ((_DWORD)v29)
          break;
        if (v24 == ++v28)
        {
          free(v26);
          goto LABEL_43;
        }
      }
      v15 = v29;
      free(v26);
      return v15;
    }
LABEL_43:
    bytes = 0;
LABEL_15:
    v11 = *(__CFData **)a1;
    BytePtr = &bytes;
LABEL_16:
    v14 = 1;
LABEL_17:
    CFDataAppendBytes(v11, BytePtr, v14);
    return 0;
  }
  if (v4 != qword_2550EEBD8)
    return 4294960561;
  bytes = -96;
  CFDataAppendBytes(*(CFMutableDataRef *)a1, &bytes, 1);
  v30 = CFArrayGetCount((CFArrayRef)a2);
  if (v30 < 1)
    goto LABEL_43;
  v31 = v30;
  v32 = 0;
  while (1)
  {
    ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)a2, v32);
    v34 = sub_21A6924F4(a1, ValueAtIndex);
    if ((_DWORD)v34)
      return v34;
    if (v31 == ++v32)
      goto LABEL_43;
  }
}

uint64_t sub_21A692924(const __CFAllocator *a1, uint64_t a2, unint64_t a3, CFTypeRef *a4)
{
  uint64_t v4;
  uint64_t v7;
  CFTypeRef cf;
  unsigned __int8 *v9;

  cf = 0;
  if (a3 < 5)
    return 4294960553;
  if (*(_DWORD *)a2 == 809649731)
  {
    v7 = a2 + a3;
    v9 = (unsigned __int8 *)(a2 + 4);
    v4 = sub_21A692A00(a1, &v9, a2 + a3, (__CFDictionary **)&cf);
    if ((_DWORD)v4)
    {
      if (!cf)
        return v4;
    }
    else
    {
      if (!cf)
        return 4294960554;
      if (v7 - (uint64_t)v9 < 4)
      {
        v4 = 4294960553;
      }
      else
      {
        if (*(_DWORD *)v9 == 558124613)
        {
          v4 = 0;
          *a4 = cf;
          return v4;
        }
        v4 = 4294960580;
      }
    }
    CFRelease(cf);
    return v4;
  }
  return 4294960580;
}

uint64_t sub_21A692A00(const __CFAllocator *a1, unsigned __int8 **a2, unint64_t a3, __CFDictionary **a4)
{
  unsigned __int8 *v4;
  void *Mutable;
  unsigned int v6;
  const UInt8 *v7;
  uint64_t v8;
  __CFDictionary *v13;
  CFTypeRef *v14;
  int v15;
  CFIndex v16;
  unsigned int v17;
  unsigned int v18;
  int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  __CFCalendar *v24;
  CFIndex v25;
  UInt8 v26;
  int v27;
  unsigned __int8 *v28;
  unint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  CFTypeRef v33;
  uint64_t v34;
  unsigned int v35;
  unsigned int v36;
  char *v38;
  char v39;
  char *v40;
  unsigned __int8 *v41;
  int v42;
  void *value;
  CFTypeRef cf;
  CFIndex valuePtr;
  unsigned __int8 *v46;
  CFAbsoluteTime at;

  value = 0;
  cf = 0;
  v4 = *a2;
  if ((unint64_t)*a2 >= a3)
    return 4294960546;
  Mutable = 0;
  valuePtr = 0;
  v7 = v4 + 1;
  v6 = *v4;
  v46 = v4 + 1;
  v8 = 4294960561;
  v13 = 0;
  switch(v6 >> 4)
  {
    case 0u:
      Mutable = 0;
      switch(v6)
      {
        case 0u:
          goto LABEL_43;
        case 9u:
          v14 = (CFTypeRef *)MEMORY[0x24BDBD270];
          break;
        case 8u:
          v14 = (CFTypeRef *)MEMORY[0x24BDBD268];
          break;
        default:
          goto LABEL_39;
      }
      v13 = (__CFDictionary *)CFRetain(*v14);
      goto LABEL_59;
    case 1u:
      v46 = v4;
      if ((v6 & 0xF0) != 0x10)
        goto LABEL_40;
      v15 = 1 << (v6 & 0xF);
      if (v15 > (int)a3 - (int)v7)
        goto LABEL_23;
      v16 = 0;
      v17 = v15 + 1;
      do
      {
        v18 = *v7++;
        v16 = v18 | (unint64_t)(v16 << 8);
        --v17;
      }
      while (v17 > 1);
      valuePtr = v16;
      v46 = (unsigned __int8 *)v7;
      v13 = CFNumberCreate(a1, kCFNumberSInt64Type, &valuePtr);
      if (!v13)
        goto LABEL_61;
      goto LABEL_59;
    case 2u:
    case 5u:
    case 6u:
    case 8u:
    case 9u:
    case 0xBu:
    case 0xCu:
      goto LABEL_63;
    case 3u:
      if ((int)a3 - (int)v7 < 5)
        goto LABEL_23;
      v19 = v4[1];
      v20 = v4[2];
      v21 = v4[3];
      v22 = v4[4];
      v23 = v4[5];
      v46 = v4 + 6;
      v24 = CFCalendarCreateWithIdentifier(a1, (CFCalendarIdentifier)*MEMORY[0x24BDBD3B8]);
      Mutable = v24;
      if (!v24)
        goto LABEL_50;
      at = 0.0;
      if (!CFCalendarComposeAbsoluteTime(v24, &at, "yMdHms", (v20 >> 2) | (v19 << 6), (v21 >> 6) & 0xFFFFFFF3 | (4 * (v20 & 3)), (v21 >> 1) & 0x1F, (v22 >> 4) & 0xFFFFFFEF | (16 * (v21 & 1)), (v23 >> 6) & 0xFFFFFFC3 | (4 * (v22 & 0xF)), v23 & 0x3F))
      {
        CFRelease(Mutable);
        Mutable = 0;
        goto LABEL_50;
      }
      v13 = CFDateCreate(a1, at);
      CFRelease(Mutable);
      if (v13)
        goto LABEL_59;
      goto LABEL_61;
    case 4u:
      v25 = v6 & 0xF;
      valuePtr = v25;
      if ((v6 & 0xF) != 0xF)
        goto LABEL_54;
      if ((unint64_t)v7 >= a3)
        goto LABEL_55;
      v26 = *v7;
      if ((*v7 & 0xF0) != 0x10)
      {
LABEL_40:
        Mutable = 0;
        v13 = 0;
        v8 = 4294960540;
        goto LABEL_63;
      }
      v7 = v4 + 2;
      v27 = 1 << (v26 & 0xF);
      if (v27 > (int)a3 - (int)v7)
      {
LABEL_23:
        Mutable = 0;
        v13 = 0;
        v8 = 4294960553;
        goto LABEL_63;
      }
      v25 = 0;
      v35 = v27 + 1;
      do
      {
        v36 = *v7++;
        v25 = v36 | (unint64_t)(v25 << 8);
        --v35;
      }
      while (v35 > 1);
      valuePtr = v25;
      v46 = (unsigned __int8 *)v7;
      if ((unint64_t)v25 >> 31)
      {
        Mutable = 0;
        v13 = 0;
        v8 = 4294960586;
        goto LABEL_63;
      }
LABEL_54:
      if (v25 > (uint64_t)(a3 - (_QWORD)v7))
      {
LABEL_55:
        Mutable = 0;
        v13 = 0;
        goto LABEL_56;
      }
      v13 = CFDataCreate(a1, v7, v25);
      if (v13)
      {
        v46 = (unsigned __int8 *)&v7[v25];
        goto LABEL_59;
      }
LABEL_61:
      Mutable = 0;
      goto LABEL_62;
    case 7u:
      if ((unint64_t)v7 >= a3)
        goto LABEL_28;
      v28 = v4 + 2;
      v29 = ~(unint64_t)v4 + a3;
      break;
    case 0xAu:
      Mutable = CFArrayCreateMutable(a1, 0, MEMORY[0x24BDBD690]);
      if (!Mutable)
        goto LABEL_50;
      while (2)
      {
        v30 = sub_21A692A00(a1, &v46, a3, &value);
        if ((_DWORD)v30)
        {
          v8 = v30;
          goto LABEL_60;
        }
        v31 = value;
        if (value)
        {
          CFArrayAppendValue((CFMutableArrayRef)Mutable, value);
          CFRelease(v31);
          value = 0;
          continue;
        }
        break;
      }
LABEL_43:
      v13 = (__CFDictionary *)Mutable;
      goto LABEL_59;
    case 0xDu:
      v13 = CFDictionaryCreateMutable(a1, 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
      if (!v13)
        goto LABEL_61;
      while (2)
      {
        v32 = sub_21A692A00(a1, &v46, a3, &cf);
        if ((_DWORD)v32)
        {
          v8 = v32;
          Mutable = 0;
          goto LABEL_63;
        }
        v33 = cf;
        if (!cf)
          goto LABEL_59;
        v34 = sub_21A692A00(a1, &v46, a3, &value);
        if ((_DWORD)v34)
        {
          v8 = v34;
          Mutable = 0;
          goto LABEL_64;
        }
        Mutable = value;
        if (value)
        {
          CFDictionarySetValue(v13, v33, value);
          CFRelease(v33);
          cf = 0;
          CFRelease(Mutable);
          value = 0;
          continue;
        }
        break;
      }
LABEL_56:
      v8 = 4294960546;
      goto LABEL_63;
    default:
LABEL_39:
      v13 = 0;
      goto LABEL_63;
  }
  while (*(v28 - 1))
  {
    ++v28;
    if (!--v29)
    {
LABEL_28:
      Mutable = 0;
      v13 = 0;
      v8 = 4294960569;
      goto LABEL_63;
    }
  }
  v13 = (__CFDictionary *)CFStringCreateWithCString(a1, (const char *)v7, 0x8000100u);
  if (v13)
    goto LABEL_46;
  v13 = (__CFDictionary *)CFStringCreateWithCString(a1, (const char *)v7, 0x500u);
  if (v13)
    goto LABEL_46;
  v38 = strdup((const char *)v7);
  Mutable = v38;
  if (v38)
  {
    v39 = *v38;
    v40 = v38;
    if (*v38)
    {
      v41 = (unsigned __int8 *)(v38 + 1);
      v40 = v38;
      do
      {
        if ((v39 & 0x80) == 0)
          *v40++ = v39;
        v42 = *v41++;
        v39 = v42;
      }
      while (v42);
    }
    *v40 = 0;
    v13 = (__CFDictionary *)CFStringCreateWithCString(a1, v38, 0x8000100u);
    free(Mutable);
    if (v13)
    {
LABEL_46:
      v46 = v28;
LABEL_59:
      Mutable = 0;
      v8 = 0;
      *a4 = v13;
      *a2 = v46;
LABEL_60:
      v13 = 0;
      goto LABEL_63;
    }
    Mutable = 0;
    v8 = 4294960554;
  }
  else
  {
LABEL_50:
    v13 = 0;
LABEL_62:
    v8 = 4294960568;
  }
LABEL_63:
  v33 = cf;
  if (cf)
LABEL_64:
    CFRelease(v33);
  if (value)
    CFRelease(value);
  if (Mutable)
    CFRelease(Mutable);
  if (v13)
    CFRelease(v13);
  return v8;
}

void sub_21A692F38(CFMutableDataRef *a1, unint64_t a2)
{
  CFIndex v4;
  UInt8 bytes;
  unint64_t v6;

  if (a2 > 0xFF)
  {
    if (a2 >> 16)
    {
      if (HIDWORD(a2))
      {
        bytes = 19;
        v4 = 8;
      }
      else
      {
        bytes = 18;
        v4 = 4;
      }
    }
    else
    {
      bytes = 17;
      v4 = 2;
    }
  }
  else
  {
    bytes = 16;
    v4 = 1;
  }
  CFDataAppendBytes(*a1, &bytes, 1);
  v6 = bswap64(a2);
  CFDataAppendBytes(*a1, (const UInt8 *)&v6 - v4 + 8, v4);
}

uint64_t sub_21A692FEC(const __CFAllocator *a1, CFTypeRef *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return sub_21A693020(a1, 0, a2, a3, (uint64_t)&a9, a6, a7, a8);
}

uint64_t sub_21A693020(const __CFAllocator *a1, __CFArray *cf, CFTypeRef *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  __CFArray *v8;
  const UInt8 *v9;
  CFTypeID v11;
  __CFDictionary *v12;
  __CFArray *v13;
  uint64_t v14;
  __CFArray *v15;
  unsigned int v16;
  __CFArray *v17;
  __CFArray *v18;
  CFMutableDictionaryRef v19;
  CFMutableArrayRef v20;
  __CFArray *v21;
  CFMutableDictionaryRef Mutable;
  int v23;
  int v24;
  uint64_t i;
  int v26;
  CFIndex v27;
  CFStringRef v28;
  CFStringRef v29;
  const UInt8 *v30;
  unsigned int *v31;
  uint64_t v32;
  CFTypeRef v33;
  int v34;
  int v35;
  int v36;
  unsigned int *v37;
  uint64_t v38;
  int v39;
  unsigned int *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  __CFCalendar *v46;
  __CFCalendar *v47;
  CFDateRef v48;
  CFDateRef v49;
  unsigned int *v50;
  const __CFAllocator *v51;
  CFIndex v52;
  CFStringEncoding v53;
  unsigned int *v54;
  const UInt8 *v55;
  unsigned int v56;
  const __CFString *DeepCopy;
  CFTypeRef *v58;
  const __CFDictionary *v59;
  const char **v60;
  const char *v61;
  int v62;
  CFStringRef v63;
  unsigned int *v64;
  __CFArray **v65;
  __CFArray *v66;
  unsigned int *v67;
  CFTypeRef v68;
  __CFArray *v69;
  __CFDictionary *v70;
  CFAbsoluteTime *v71;
  CFAbsoluteTime v72;
  unsigned int v73;
  uint64_t *v74;
  uint64_t v75;
  CFIndex v76;
  const __CFAllocator *v77;
  UInt8 *v78;
  CFStringEncoding v79;
  unsigned __int8 **v80;
  char *v81;
  CFTypeID v82;
  uint64_t v83;
  const void **v84;
  const void *v85;
  CFStringRef v86;
  unsigned __int8 **v87;
  char *v88;
  const __CFAllocator *v89;
  unsigned int *v90;
  CFStringRef v91;
  int v92;
  __CFArray *v93;
  uint64_t v95;
  __CFArray *v96;
  CFTypeRef *v97;
  const void *v98;
  const void *v99;
  const __CFString *v100;
  CFTypeRef v102;
  CFTypeRef cfa;
  unsigned int *v104;
  CFAbsoluteTime at;
  uint64_t v106;
  UInt8 bytes[64];
  uint64_t v108;

  v8 = cf;
  v108 = *MEMORY[0x24BDAC8D0];
  cfa = 0;
  v104 = (unsigned int *)a5;
  v102 = 0;
  if (!a4)
  {
    v13 = 0;
LABEL_6:
    v14 = 4294960591;
    goto LABEL_174;
  }
  v9 = (const UInt8 *)a4;
  if (cf)
  {
    v11 = CFGetTypeID(cf);
    if (v11 == CFArrayGetTypeID())
    {
      v97 = a3;
      v12 = 0;
      v13 = v8;
    }
    else
    {
      v13 = 0;
      if (v11 != CFDictionaryGetTypeID())
      {
LABEL_160:
        v14 = 4294960540;
        goto LABEL_171;
      }
      v97 = a3;
      v12 = v8;
    }
  }
  else
  {
    v97 = a3;
    v13 = 0;
    v12 = 0;
  }
  v99 = (const void *)*MEMORY[0x24BDBD270];
  v100 = (const __CFString *)*MEMORY[0x24BDBD3B8];
  v98 = (const void *)*MEMORY[0x24BDBD268];
  v15 = v13;
  v13 = 0;
  while (1)
  {
    v16 = *v9;
    if (v16 <= 0x5C)
      break;
    if (v16 != 93)
    {
      if (v16 == 123)
      {
        Mutable = CFDictionaryCreateMutable(a1, 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
        if (!Mutable)
          goto LABEL_159;
        v19 = Mutable;
        v14 = sub_21A693ACC(v15, v12, &cfa, Mutable, &v102);
        CFRelease(v19);
        if ((_DWORD)v14)
          goto LABEL_171;
        v21 = (__CFArray *)malloc_type_calloc(1uLL, 0x18uLL, 0x20040960023A9uLL);
        if (!v21)
          goto LABEL_159;
        v18 = 0;
        goto LABEL_27;
      }
      if (v16 != 125)
        goto LABEL_36;
    }
    if (!v13)
    {
      v14 = 4294960554;
      goto LABEL_171;
    }
    v17 = *(__CFArray **)v13;
    v18 = (__CFArray *)*((_QWORD *)v13 + 1);
    v19 = (CFMutableDictionaryRef)*((_QWORD *)v13 + 2);
    free(v13);
    v13 = v17;
LABEL_144:
    ++v9;
    v15 = v18;
    v12 = v19;
  }
  if (v16 != 37)
  {
    if (v16 == 91)
    {
      v20 = CFArrayCreateMutable(a1, 0, MEMORY[0x24BDBD690]);
      if (!v20)
        goto LABEL_159;
      v18 = v20;
      v14 = sub_21A693ACC(v15, v12, &cfa, v20, &v102);
      CFRelease(v18);
      if ((_DWORD)v14)
        goto LABEL_171;
      v21 = (__CFArray *)malloc_type_calloc(1uLL, 0x18uLL, 0x20040960023A9uLL);
      if (!v21)
        goto LABEL_159;
      v19 = 0;
LABEL_27:
      *(_QWORD *)v21 = v13;
      *((_QWORD *)v21 + 1) = v15;
      v13 = v21;
      *((_QWORD *)v21 + 2) = v12;
      goto LABEL_144;
    }
    if (!*v9)
      goto LABEL_162;
LABEL_36:
    v27 = 0;
    if (*v9)
    {
      while (1)
      {
        if (v16 == 59)
          goto LABEL_40;
        if (v16 == 61)
          break;
        v16 = v9[++v27];
        if (!v16)
          goto LABEL_40;
      }
      v33 = cfa;
      v14 = 4294960554;
      if (cfa || !v12)
        goto LABEL_172;
      cfa = CFStringCreateWithBytes(a1, v9, v27, 0x8000100u, 0);
      if (!cfa)
        goto LABEL_167;
    }
    else
    {
LABEL_40:
      v28 = CFStringCreateWithBytes(a1, v9, v27, 0x8000100u, 0);
      if (!v28)
        goto LABEL_159;
      v29 = v28;
      v14 = sub_21A693ACC(v15, v12, &cfa, v28, &v102);
      CFRelease(v29);
      if ((_DWORD)v14)
        goto LABEL_171;
      if (!v16)
      {
LABEL_162:
        v14 = 0;
        if (v97)
        {
          *v97 = v102;
          v102 = 0;
        }
        goto LABEL_171;
      }
    }
    v9 += v27;
    v18 = v15;
    v19 = v12;
    goto LABEL_144;
  }
  v23 = 0;
  v24 = 0;
  while (1)
  {
    for (i = 0; ; ++i)
    {
      v26 = v9[i + 1];
      if (v26 != 35)
        break;
    }
    if (v26 == 46)
      break;
    if (v26 != 108)
    {
      v30 = &v9[i + 1];
      v32 = 0xFFFFFFFFLL;
      goto LABEL_58;
    }
    ++v23;
    v24 += i;
    v9 += i + 1;
  }
  v30 = &v9[i + 2];
  v26 = *v30;
  if (v26 == 42)
  {
    v31 = v104;
    v104 += 2;
    v32 = *v31;
    if ((v32 & 0x80000000) == 0)
    {
      v30 = &v9[i + 3];
      v26 = *v30;
      goto LABEL_58;
    }
LABEL_166:
    v14 = 4294960553;
    goto LABEL_171;
  }
  v34 = v26 - 48;
  if ((v26 - 48) > 9)
  {
    v32 = 0;
  }
  else
  {
    LODWORD(v32) = 0;
    do
    {
      v32 = (v34 + 10 * v32);
      v35 = *++v30;
      v26 = v35;
      v34 = v35 - 48;
    }
    while ((v35 - 48) < 0xA);
    if ((v32 & 0x80000000) != 0)
      goto LABEL_166;
  }
LABEL_58:
  v36 = v24 + i;
  v14 = 4294960579;
  if (v26 > 84)
  {
    switch(v26)
    {
      case 'a':
        v37 = v104;
        v104 += 2;
        v38 = *(_QWORD *)v37;
        if (!v38)
          goto LABEL_165;
        if (v36 == 2)
        {
          v39 = sub_21A695CB4((uint64_t)bytes, 64, "%##a", a4, a5, a6, a7, a8, v38);
          if (v39 <= 0)
          {
LABEL_170:
            v14 = 4294960596;
            goto LABEL_171;
          }
        }
        else
        {
          v39 = sub_21A695CB4((uint64_t)bytes, 64, "%.*a", a4, a5, a6, a7, a8, v32, v38);
          if (v39 < 1)
            goto LABEL_170;
        }
        v52 = v39;
        v51 = a1;
        v53 = 134217984;
        goto LABEL_139;
      case 'b':
        if ((_DWORD)v32 != -1)
          goto LABEL_171;
        v67 = v104;
        v104 += 2;
        if (*v67)
          v68 = v99;
        else
          v68 = v98;
        v69 = v15;
        v70 = v12;
        goto LABEL_130;
      case 'c':
      case 'e':
      case 'f':
      case 'g':
      case 'h':
      case 'j':
      case 'l':
      case 'm':
      case 'n':
        goto LABEL_171;
      case 'd':
        goto LABEL_77;
      case 'i':
        if ((_DWORD)v32 != -1)
          goto LABEL_171;
        v71 = (CFAbsoluteTime *)v104;
        v104 += 2;
        if (v23 == 2)
          v72 = *v71;
        else
          *(_QWORD *)&v72 = *(int *)v71;
        at = v72;
        DeepCopy = (const __CFString *)CFNumberCreate(a1, kCFNumberSInt64Type, &at);
        if (!DeepCopy)
          goto LABEL_159;
        goto LABEL_140;
      case 'k':
        v33 = cfa;
        v14 = 4294960554;
        if (cfa || !v12)
          goto LABEL_172;
        v73 = v30[1];
        v14 = 4294960579;
        if (v73 <= 0x54)
        {
          if (v73 != 67)
          {
            if (v73 != 79)
              goto LABEL_171;
LABEL_134:
            if ((_DWORD)v32 != -1)
              goto LABEL_171;
            v84 = (const void **)v104;
            v104 += 2;
            v85 = *v84;
            cfa = v85;
            if (!v85)
              goto LABEL_6;
            CFRetain(v85);
            goto LABEL_157;
          }
          if ((_DWORD)v32 != -1)
            goto LABEL_171;
          v90 = v104;
          v104 += 2;
          *(_DWORD *)bytes = bswap32(*v90);
          v78 = bytes;
          v77 = a1;
          v76 = 4;
          v79 = 0;
          goto LABEL_153;
        }
        switch(v73)
        {
          case 'U':
            if ((_DWORD)v32 != -1)
              goto LABEL_171;
            v87 = (unsigned __int8 **)v104;
            v104 += 2;
            if (!*v87)
            {
LABEL_165:
              v14 = 4294960591;
              goto LABEL_171;
            }
            v88 = sub_21A6A2990(*v87, 0, (char *)bytes);
            v89 = 0;
            break;
          case 'o':
            goto LABEL_134;
          case 's':
            v74 = (uint64_t *)v104;
            v104 += 2;
            v75 = *v74;
            if (!*v74)
              goto LABEL_165;
            if ((v32 & 0x80000000) == 0)
            {
              v76 = (int)sub_21A6A2C70(*v74, v32);
              v77 = a1;
              v78 = (UInt8 *)v75;
              v79 = 134217984;
LABEL_153:
              v91 = CFStringCreateWithBytes(v77, v78, v76, v79, 0);
              goto LABEL_156;
            }
            v89 = a1;
            v88 = (char *)*v74;
            break;
          default:
            goto LABEL_171;
        }
        v91 = CFStringCreateWithCString(v89, v88, 0x8000100u);
LABEL_156:
        cfa = v91;
        if (!v91)
        {
LABEL_167:
          v14 = 4294960568;
          goto LABEL_174;
        }
LABEL_157:
        v92 = v30[2];
        v30 += 2;
        if (v92 != 61)
          goto LABEL_171;
        break;
      case 'o':
        goto LABEL_82;
      default:
        if (v26 == 85)
        {
          v80 = (unsigned __int8 **)v104;
          v104 += 2;
          if (!*v80)
            goto LABEL_165;
          v81 = sub_21A6A2990(*v80, 0, (char *)bytes);
          DeepCopy = CFStringCreateWithCString(0, v81, 0x8000100u);
          if (!DeepCopy)
          {
LABEL_159:
            v14 = 4294960568;
            goto LABEL_171;
          }
          goto LABEL_140;
        }
        if (v26 != 115)
          goto LABEL_171;
        v60 = (const char **)v104;
        v104 += 2;
        v61 = *v60;
        if (!*v60)
          goto LABEL_99;
        if ((v32 & 0x80000000) != 0)
        {
          v63 = CFStringCreateWithCString(a1, *v60, 0x8000100u);
        }
        else
        {
          v62 = sub_21A6A2C70((uint64_t)*v60, v32);
          v63 = CFStringCreateWithBytes(a1, (const UInt8 *)v61, v62, 0x8000100u, 0);
        }
        v86 = v63;
        if (!v63)
          goto LABEL_159;
        goto LABEL_141;
    }
    goto LABEL_143;
  }
  if (v26 <= 67)
  {
    if (v26 == 64)
    {
      if ((_DWORD)v32 != -1)
        goto LABEL_171;
      v64 = v104;
      v104 += 2;
      v65 = *(__CFArray ***)v64;
      if (!v65)
        goto LABEL_165;
      if (v15)
        v66 = v15;
      else
        v66 = v12;
      *v65 = v66;
      goto LABEL_143;
    }
    if (v26 != 67 || (_DWORD)v32 != -1)
      goto LABEL_171;
    v50 = v104;
    v104 += 2;
    *(_DWORD *)bytes = bswap32(*v50);
    v51 = a1;
    v52 = 4;
    v53 = 0;
LABEL_139:
    DeepCopy = CFStringCreateWithBytes(v51, bytes, v52, v53, 0);
    if (!DeepCopy)
      goto LABEL_159;
    goto LABEL_140;
  }
  if (v26 == 68)
  {
LABEL_77:
    if ((_DWORD)v32 != -1)
      goto LABEL_171;
    v54 = v104;
    v104 += 2;
    v55 = *(const UInt8 **)v54;
    v104 = v54 + 4;
    v56 = v54[2];
    if (!v55 && v56)
      goto LABEL_165;
    DeepCopy = (const __CFString *)CFDataCreate(a1, v55, (int)v56);
    if (!DeepCopy)
      goto LABEL_159;
LABEL_140:
    v86 = DeepCopy;
LABEL_141:
    v14 = sub_21A693ACC(v15, v12, &cfa, v86, &v102);
    v49 = (CFDateRef)v86;
LABEL_142:
    CFRelease(v49);
    if ((_DWORD)v14)
      goto LABEL_171;
    goto LABEL_143;
  }
  if (v26 != 79)
  {
    if (v26 != 84 || (_DWORD)v32 != -1)
      goto LABEL_171;
    v96 = v8;
    v40 = v104;
    v104 += 2;
    v95 = *v40;
    v104 = v40 + 4;
    v41 = v40[2];
    v104 = v40 + 6;
    v42 = v40[4];
    v104 = v40 + 8;
    v43 = v40[6];
    v104 = v40 + 10;
    v44 = v40[8];
    v104 = v40 + 12;
    v45 = v40[10];
    v46 = CFCalendarCreateWithIdentifier(a1, v100);
    if (!v46)
      goto LABEL_169;
    v47 = v46;
    at = 0.0;
    if (!CFCalendarComposeAbsoluteTime(v46, &at, "yMdHms", v95, v41, v42, v43, v44, v45))
    {
      CFRelease(v47);
LABEL_169:
      v14 = 4294960568;
      v8 = v96;
      goto LABEL_171;
    }
    v48 = CFDateCreate(a1, at);
    CFRelease(v47);
    v8 = v96;
    if (!v48)
      goto LABEL_159;
    v14 = sub_21A693ACC(v15, v12, &cfa, v48, &v102);
    v49 = v48;
    goto LABEL_142;
  }
LABEL_82:
  if ((_DWORD)v32 != -1)
    goto LABEL_171;
  v58 = (CFTypeRef *)v104;
  v104 += 2;
  v59 = (const __CFDictionary *)*v58;
  if (!*v58)
  {
LABEL_99:
    if (cfa)
    {
      CFRelease(cfa);
      cfa = 0;
    }
    goto LABEL_143;
  }
  if (v36 == 2)
  {
    v33 = cfa;
    v14 = 4294960591;
    if (cfa || !v12)
      goto LABEL_172;
    v82 = CFGetTypeID(*v58);
    if (v82 != CFDictionaryGetTypeID())
      goto LABEL_160;
    *(_QWORD *)&at = v12;
    v106 = 0;
    CFDictionaryApplyFunction(v59, (CFDictionaryApplierFunction)sub_21A695458, &at);
    v14 = v106;
    if ((_DWORD)v106)
      goto LABEL_171;
    goto LABEL_143;
  }
  if (v36 == 1)
  {
    DeepCopy = (const __CFString *)CFPropertyListCreateDeepCopy(a1, *v58, 2uLL);
    if (!DeepCopy)
      goto LABEL_159;
    goto LABEL_140;
  }
  v69 = v15;
  v70 = v12;
  v68 = *v58;
LABEL_130:
  v83 = sub_21A693ACC(v69, v70, &cfa, v68, &v102);
  if (!(_DWORD)v83)
  {
LABEL_143:
    v18 = v15;
    v19 = v12;
    v9 = v30;
    goto LABEL_144;
  }
  v14 = v83;
LABEL_171:
  v33 = cfa;
LABEL_172:
  if (v33)
    CFRelease(v33);
LABEL_174:
  if (!v8 && v102)
    CFRelease(v102);
  if (v13)
  {
    do
    {
      v93 = *(__CFArray **)v13;
      free(v13);
      v13 = v93;
    }
    while (v93);
  }
  return v14;
}

uint64_t sub_21A693A8C(const __CFAllocator *a1, __CFArray *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return sub_21A693020(a1, a2, 0, a3, (uint64_t)&a9, a6, a7, a8);
}

uint64_t sub_21A693ABC(const __CFAllocator *a1, __CFArray *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return sub_21A693020(a1, a2, 0, a3, a4, a6, a7, a8);
}

uint64_t sub_21A693ACC(__CFArray *a1, CFMutableDictionaryRef theDict, const void **a3, CFTypeRef cf, _QWORD *a5)
{
  uint64_t result;

  if (a1)
  {
    CFArrayAppendValue(a1, cf);
  }
  else if (theDict)
  {
    if (!*a3)
      return 4294960554;
    CFDictionarySetValue(theDict, *a3, cf);
    CFRelease(*a3);
    *a3 = 0;
  }
  else
  {
    CFRetain(cf);
  }
  result = 0;
  if (!*a5)
    *a5 = cf;
  return result;
}

uint64_t sub_21A693B5C(uint64_t a1, CFDictionaryRef theDict)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a1;
  v4 = 0;
  CFDictionaryApplyFunction(theDict, (CFDictionaryApplierFunction)sub_21A695458, &v3);
  return v4;
}

void sub_21A693B94(const __CFString *a1, uint64_t a2, UInt8 *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_21A693BBC(a1, a2, a3, (uint64_t)&a9, a5, a6, a7, a8);
}

void sub_21A693BBC(const __CFString *cf, uint64_t a2, UInt8 *bytes, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  UInt8 *v9;
  const __CFAllocator *v11;
  CFIndex v12;
  unsigned int i;
  UInt8 *v14;
  UInt8 *v15;
  unsigned int v16;
  unsigned int v17;
  int v18;
  UInt8 **v19;
  uint64_t v20;
  CFStringRef v21;
  unsigned int v22;
  int v23;
  int v24;
  CFTypeID v25;
  unsigned int *v26;
  UInt8 *v27;
  const __CFAllocator *v28;
  CFIndex v29;
  CFStringEncoding v30;
  char **v31;
  char *v32;
  const __CFAllocator *v33;
  CFTypeRef *v34;
  UInt8 **v35;
  CFStringRef v36;
  UInt8 **v37;
  UInt8 **v38;
  CFTypeID v39;
  _BYTE *v40;
  _BYTE *j;
  unsigned int v42;
  size_t v43;
  unsigned __int8 *v44;
  int v45;
  int v46;
  UInt8 **v47;
  CFTypeID v48;
  CFIndex Length;
  UInt8 *v50;
  UInt8 *v51;
  CFTypeID v52;
  CFIndex *v53;
  CFTypeID v54;
  CFTypeID v55;
  const UInt8 *BytePtr;
  __int16 v57;
  CFTypeID v58;
  unsigned __int8 *v59;
  CFTypeID v60;
  CFTypeID v61;
  CFTypeID v62;
  CFTypeID v63;
  CFTypeID v64;
  CFTypeID v65;
  CFTypeID v66;
  int v67;
  CFTypeID v68;
  CFTypeID v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  CFTypeID v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  size_t v81;
  CFTypeID v82;
  UInt8 **v83;
  UInt8 *v84;
  CFTypeID v85;
  const UInt8 *v86;
  CFTypeID TypeID;
  _BOOL8 v89;
  CFIndex maxBufLen;
  UInt8 **v91;
  char valuePtr[64];
  char cStr[64];
  UInt8 v94[8];
  uint64_t v95;
  CFRange v96;
  CFRange v97;
  CFRange v98;
  CFRange v99;

  v95 = *MEMORY[0x24BDAC8D0];
  maxBufLen = 0;
  v91 = (UInt8 **)a4;
  v89 = 0;
  v8 = *bytes;
  if (!*bytes)
    return;
  v9 = bytes;
  v11 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  while (1)
  {
    v12 = 0;
    for (i = v8; i > 0x3A || ((1 << i) & 0x400400000000001) == 0; i = v9[++v12])
      ;
    v14 = &v9[v12];
    v15 = &v9[v12];
    if (i)
    {
      do
      {
        if (i == 46)
          break;
        v16 = *++v15;
        i = v16;
      }
      while (v16);
    }
    if (v8 == 91)
    {
      v18 = v9[1];
      if (v18 == 42)
      {
        if (v9[2] != 93)
          return;
        v19 = v91++;
        v20 = *(unsigned int *)v19;
        if ((v20 & 0x80000000) != 0)
          return;
        v14 = v9 + 3;
      }
      else
      {
        v22 = v18 - 48;
        if (v22 > 9)
          return;
        v20 = 0;
        v14 = v9 + 2;
        do
        {
          v20 = 10 * v20 + v22;
          v24 = *v14++;
          v23 = v24;
          v22 = v24 - 48;
        }
        while ((v24 - 48) < 0xA);
        if (v20 < 0 || v23 != 93)
          return;
      }
      v25 = CFGetTypeID(cf);
      if (v25 != CFArrayGetTypeID() || v20 >= CFArrayGetCount((CFArrayRef)cf))
        return;
      cf = (const __CFString *)CFArrayGetValueAtIndex((CFArrayRef)cf, v20);
      goto LABEL_53;
    }
    if (v8 != 37)
    {
      if (v9 >= v14)
      {
        v14 = v9;
        goto LABEL_53;
      }
      v21 = CFStringCreateWithBytes(v11, v9, v12, 0x8000100u, 0);
      if (!v21)
        return;
      goto LABEL_51;
    }
    if (v9[1] != 107)
      return;
    v17 = v9[2];
    if (v17 > 0x68)
    {
      if (v9[2] > 0x72u)
      {
        if (v17 == 116)
        {
          v37 = v91++;
          v27 = *v37;
          if (!*v37)
            return;
          v38 = v91++;
          v29 = *(int *)v38;
          v28 = v11;
          v30 = 134217984;
          goto LABEL_48;
        }
        if (v17 != 115)
          return;
        v31 = (char **)v91++;
        v32 = *v31;
        if (!*v31)
          return;
        v33 = v11;
      }
      else
      {
        if (v17 != 105)
        {
          if (v17 != 111)
            return;
          goto LABEL_42;
        }
        v35 = v91++;
        sub_21A695CB4((uint64_t)cStr, 64, "%llu", a4, a5, a6, a7, a8, *v35);
        v32 = cStr;
        v33 = 0;
      }
      v36 = CFStringCreateWithCString(v33, v32, 0x8000100u);
      goto LABEL_49;
    }
    if (v17 == 67)
      goto LABEL_37;
    if (v17 != 79)
    {
      if (v17 != 99)
        return;
LABEL_37:
      v26 = (unsigned int *)v91++;
      *(_DWORD *)v94 = bswap32(*v26);
      v27 = v94;
      v28 = v11;
      v29 = 4;
      v30 = 0;
LABEL_48:
      v36 = CFStringCreateWithBytes(v28, v27, v29, v30, 0);
LABEL_49:
      v21 = v36;
      if (!v36)
        return;
      goto LABEL_50;
    }
LABEL_42:
    v34 = (CFTypeRef *)v91++;
    v21 = (CFStringRef)*v34;
    if (!*v34)
      return;
    CFRetain(*v34);
LABEL_50:
    v14 = v9 + 3;
LABEL_51:
    v39 = CFGetTypeID(cf);
    if (v39 != CFDictionaryGetTypeID())
    {
      CFRelease(v21);
      return;
    }
    cf = (const __CFString *)CFDictionaryGetValue((CFDictionaryRef)cf, v21);
    CFRelease(v21);
    if (!cf)
      return;
LABEL_53:
    if (*v14 == 58)
      break;
    if (*v15)
      v9 = v15 + 1;
    else
      v9 = v15;
    v8 = *v9;
    if (!*v9)
    {
      if (!cf)
        return;
      goto LABEL_59;
    }
  }
  v40 = v14 + 1;
  for (j = v14 + 1; *j; ++j)
  {
    if (*j == 46)
      return;
  }
  if (!cf)
    return;
  if (!strcmp((const char *)v14 + 1, "err") || !strcmp((const char *)v14 + 1, "int"))
  {
    if (!sub_21A694998(cf, &v89) && a2)
LABEL_99:
      *(_DWORD *)a2 = v89;
    return;
  }
  if (!strcmp((const char *)v14 + 1, "int8"))
  {
    if (!sub_21A694998(cf, &v89) && a2)
LABEL_102:
      *(_BYTE *)a2 = v89;
    return;
  }
  if (!strcmp((const char *)v14 + 1, "int16"))
  {
    if (!sub_21A694998(cf, &v89) && a2)
LABEL_105:
      *(_WORD *)a2 = v89;
    return;
  }
  if (!strcmp((const char *)v14 + 1, "int64"))
  {
    sub_21A694998(cf, (_BOOL8 *)a2);
    return;
  }
  if (!strcmp((const char *)v14 + 1, "int*"))
  {
    if (!sub_21A694998(cf, &v89))
    {
      v47 = v91++;
      switch((unint64_t)*v47)
      {
        case 1uLL:
          goto LABEL_102;
        case 2uLL:
          goto LABEL_105;
        case 4uLL:
          goto LABEL_99;
        case 8uLL:
          *(_QWORD *)a2 = v89;
          break;
        default:
          return;
      }
    }
    return;
  }
  if (!strcmp((const char *)v14 + 1, "utf8"))
  {
    v48 = CFGetTypeID(cf);
    if (v48 == CFStringGetTypeID())
    {
      Length = CFStringGetLength(cf);
      maxBufLen = CFStringGetMaximumSizeForEncoding(Length, 0x8000100u);
      v50 = (UInt8 *)malloc_type_malloc(maxBufLen + 1, 0xB4A46436uLL);
      if (v50)
      {
        v51 = v50;
        v96.location = 0;
        v96.length = Length;
        if (CFStringGetBytes(cf, v96, 0x8000100u, 0, 0, v50, maxBufLen, &maxBufLen) == Length)
        {
          v51[maxBufLen] = 0;
          if (a2)
            *(_QWORD *)a2 = v51;
          else
            free(v51);
        }
        else
        {
          free(v51);
        }
      }
    }
    return;
  }
  if (!strcmp((const char *)v14 + 1, "*utf8"))
  {
    v52 = CFGetTypeID(cf);
    if (v52 == CFStringGetTypeID())
    {
      v53 = (CFIndex *)v91++;
      CFStringGetCString(cf, (char *)a2, *v53, 0x8000100u);
    }
    return;
  }
  if (!strcmp((const char *)v14 + 1, "obj"))
  {
    if (!a2)
      return;
    CFRetain(cf);
    goto LABEL_60;
  }
  if (!strcmp((const char *)v14 + 1, "BOOL"))
  {
    v54 = CFGetTypeID(cf);
    if (v54 == CFBooleanGetTypeID() && a2)
      *(_BYTE *)a2 = CFBooleanGetValue((CFBooleanRef)cf);
    return;
  }
  if (!strcmp((const char *)v14 + 1, "mac"))
  {
    v55 = CFGetTypeID(cf);
    if (v55 == CFDataGetTypeID())
    {
      if (CFDataGetLength((CFDataRef)cf) == 6 && a2)
      {
        BytePtr = CFDataGetBytePtr((CFDataRef)cf);
        v57 = *((_WORD *)BytePtr + 2);
        *(_DWORD *)a2 = *(_DWORD *)BytePtr;
        *(_WORD *)(a2 + 4) = v57;
      }
    }
    else
    {
      v60 = CFGetTypeID(cf);
      if (v60 == CFStringGetTypeID() && CFStringGetCString(cf, cStr, 64, 0x8000100u))
        sub_21A6A1EB0(cStr, 0xFFFFFFFFFFFFFFFFLL, 6, (_BYTE *)a2);
    }
    return;
  }
  if (!strcmp((const char *)v14 + 1, "macStr"))
  {
    v58 = CFGetTypeID(cf);
    if (v58 == CFDataGetTypeID())
    {
      if (CFDataGetLength((CFDataRef)cf) != 6)
        return;
      v59 = (unsigned __int8 *)CFDataGetBytePtr((CFDataRef)cf);
    }
    else
    {
      v62 = CFGetTypeID(cf);
      if (v62 != CFStringGetTypeID()
        || !CFStringGetCString(cf, cStr, 64, 0x8000100u)
        || sub_21A6A1EB0(cStr, 0xFFFFFFFFFFFFFFFFLL, 6, v94))
      {
        return;
      }
      v59 = v94;
    }
    sub_21A6A1FDC(v59, 6, (_BYTE *)a2);
    return;
  }
  if (strcmp((const char *)v14 + 1, "code"))
  {
    if (!strcmp((const char *)v14 + 1, "ipv4"))
    {
      v63 = CFGetTypeID(cf);
      if (v63 == CFStringGetTypeID() && CFStringGetCString(cf, cStr, 64, 0x8000100u))
        sub_21A6A16C4(cStr, 0, (unsigned int *)a2, 0, 0, 0, 0);
      return;
    }
    if (!strcmp((const char *)v14 + 1, "vers"))
    {
      v65 = CFGetTypeID(cf);
      if (v65 == CFStringGetTypeID())
      {
        v98.length = CFStringGetLength(cf);
        maxBufLen = 0;
        v98.location = 0;
        CFStringGetBytes(cf, v98, 0x8000100u, 0, 0, (UInt8 *)cStr, 63, &maxBufLen);
        sub_21A6A2044(cStr, maxBufLen, (int *)a2);
      }
      return;
    }
    if (!strcmp((const char *)v14 + 1, "svers"))
    {
      v66 = CFGetTypeID(cf);
      if (v66 == CFStringGetTypeID())
      {
        v99.length = CFStringGetLength(cf);
        maxBufLen = 0;
        v99.location = 0;
        CFStringGetBytes(cf, v99, 0x8000100u, 0, 0, (UInt8 *)cStr, 63, &maxBufLen);
        v67 = sub_21A6A2654(cStr, maxBufLen);
        if (v67)
          *(_DWORD *)a2 = v67;
      }
      return;
    }
    if (!strcmp((const char *)v14 + 1, "uuid"))
    {
      v68 = CFGetTypeID(cf);
      if (v68 == CFDataGetTypeID())
      {
        if (CFDataGetLength((CFDataRef)cf) == 16 && a2)
          *(_OWORD *)a2 = *(_OWORD *)CFDataGetBytePtr((CFDataRef)cf);
      }
      else
      {
        v75 = CFGetTypeID(cf);
        if (v75 == CFStringGetTypeID() && CFStringGetCString(cf, valuePtr, 64, 0x8000100u))
          sub_21A6A2A54(valuePtr, 0xFFFFFFFFFFFFFFFFLL, 0, (_OWORD *)a2, v76, v77, v78, v79);
      }
      return;
    }
    if (!strcmp((const char *)v14 + 1, "CFStringUUID"))
    {
      v69 = CFGetTypeID(cf);
      if (v69 != CFStringGetTypeID())
        return;
      if (!CFStringGetCString(cf, cStr, 64, 0x8000100u))
        return;
      sub_21A6A2A54(cStr, 0xFFFFFFFFFFFFFFFFLL, 0, 0, v70, v71, v72, v73);
      if (v74)
        return;
    }
    else
    {
      if (strncmp((const char *)v14 + 1, "CF", 2uLL))
      {
        if (!strcmp((const char *)v14 + 1, "data*"))
        {
          v82 = CFGetTypeID(cf);
          if (v82 == CFDataGetTypeID())
          {
            v83 = v91++;
            v84 = *v83;
            if ((UInt8 *)CFDataGetLength((CFDataRef)cf) == v84)
            {
              if (a2)
                *(_QWORD *)a2 = CFDataGetBytePtr((CFDataRef)cf);
            }
          }
        }
        else
        {
          v42 = *v40 - 48;
          if (v42 > 9)
          {
            if (*v40)
              return;
            v43 = 0;
          }
          else
          {
            v43 = 0;
            v44 = v14 + 2;
            do
            {
              v43 = 10 * v43 + v42;
              v46 = *v44++;
              v45 = v46;
              v42 = v46 - 48;
            }
            while ((v46 - 48) < 0xA);
            if (v45 || (v43 & 0x8000000000000000) != 0)
              return;
          }
          v85 = CFGetTypeID(cf);
          if (v85 == CFDataGetTypeID() && CFDataGetLength((CFDataRef)cf) == v43 && a2)
          {
            v86 = CFDataGetBytePtr((CFDataRef)cf);
            memcpy((void *)a2, v86, v43);
          }
        }
        return;
      }
      v80 = strchr((char *)v14 + 1, 33);
      if (v80)
        v81 = v80 - v40;
      else
        v81 = strlen((const char *)v14 + 1);
      if (sub_21A6A2CA0(v14 + 1, v81, "CFArray"))
      {
        if (sub_21A6A2CA0(v14 + 1, v81, "CFBoolean"))
        {
          if (sub_21A6A2CA0(v14 + 1, v81, "CFData"))
          {
            if (sub_21A6A2CA0(v14 + 1, v81, "CFDate"))
            {
              if (sub_21A6A2CA0(v14 + 1, v81, "CFDictionary"))
              {
                if (sub_21A6A2CA0(v14 + 1, v81, "CFNumber"))
                {
                  if (sub_21A6A2CA0(v14 + 1, v81, "CFString"))
                    return;
                  TypeID = CFStringGetTypeID();
                }
                else
                {
                  TypeID = CFNumberGetTypeID();
                }
              }
              else
              {
                TypeID = CFDictionaryGetTypeID();
              }
            }
            else
            {
              TypeID = CFDateGetTypeID();
            }
          }
          else
          {
            TypeID = CFDataGetTypeID();
          }
        }
        else
        {
          TypeID = CFBooleanGetTypeID();
        }
      }
      else
      {
        TypeID = CFArrayGetTypeID();
      }
      if (CFGetTypeID(cf) != TypeID)
        return;
    }
LABEL_59:
    if (!a2)
      return;
LABEL_60:
    *(_QWORD *)a2 = cf;
    return;
  }
  *(_DWORD *)valuePtr = 0;
  v61 = CFGetTypeID(cf);
  if (v61 == CFStringGetTypeID())
  {
    if (CFStringGetLength(cf) != 4)
      return;
    maxBufLen = 0;
    v97.location = 0;
    v97.length = 4;
    CFStringGetBytes(cf, v97, 0x8000100u, 0, 0, v94, 4, &maxBufLen);
    if (maxBufLen != 4)
      return;
    *(_DWORD *)valuePtr = sub_21A6A1E24(v94, 4uLL);
  }
  else
  {
    v64 = CFGetTypeID(cf);
    if (v64 != CFNumberGetTypeID())
      return;
    CFNumberGetValue((CFNumberRef)cf, kCFNumberSInt32Type, valuePtr);
  }
  if (a2)
    *(_DWORD *)a2 = *(_DWORD *)valuePtr;
}

uint64_t sub_21A694998(const __CFString *a1, _BOOL8 *a2)
{
  CFTypeID v4;
  CFTypeID v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  CFTypeID v11;
  uint64_t result;
  _BOOL8 valuePtr;
  char buffer[64];
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  valuePtr = 0;
  v4 = CFGetTypeID(a1);
  if (v4 == CFNumberGetTypeID())
  {
    if (!CFNumberGetValue((CFNumberRef)a1, kCFNumberSInt64Type, &valuePtr))
      return 4294960540;
  }
  else
  {
    v5 = CFGetTypeID(a1);
    if (v5 == CFStringGetTypeID())
    {
      if (!CFStringGetCString(a1, buffer, 64, 0x8000100u))
        return 4294960545;
      if (sub_21A6A2BD4(buffer, 0xFFFFFFFFFFFFFFFFLL, "%lli", v6, v7, v8, v9, v10, (int)&valuePtr) != 1)
        return 4294960540;
    }
    else
    {
      v11 = CFGetTypeID(a1);
      if (v11 != CFBooleanGetTypeID())
        return 4294960540;
      valuePtr = *MEMORY[0x24BDBD270] == (_QWORD)a1;
    }
  }
  result = 0;
  if (a2)
    *a2 = valuePtr;
  return result;
}

uint64_t sub_21A694AD0(const char *a1, CFMutableDataRef *a2)
{
  FILE *v3;
  FILE *v4;
  uint64_t v5;
  uint64_t result;

  v3 = fopen(a1, "rb");
  if (v3)
  {
    v4 = v3;
    v5 = sub_21A694B4C(v3, a2);
    fclose(v4);
    return v5;
  }
  else if (*__error())
  {
    result = *__error();
    if (!(_DWORD)result)
      return sub_21A694B4C(0, a2);
  }
  else
  {
    return 4294960596;
  }
  return result;
}

uint64_t sub_21A694B4C(FILE *a1, CFMutableDataRef *a2)
{
  CFMutableDataRef Mutable;
  CFMutableDataRef v5;
  UInt8 *v6;
  UInt8 *v7;
  size_t v8;
  size_t v9;
  uint64_t v10;

  Mutable = CFDataCreateMutable(0, 0);
  if (!Mutable)
    return 4294960568;
  v5 = Mutable;
  v6 = (UInt8 *)malloc_type_malloc(0x20000uLL, 0x26FA432EuLL);
  if (!v6)
  {
    v10 = 4294960568;
LABEL_15:
    CFRelease(v5);
    return v10;
  }
  v7 = v6;
  v8 = fread(v6, 1uLL, 0x20000uLL, a1);
  if (v8)
  {
    v9 = v8;
    do
    {
      CFDataAppendBytes(v5, v7, v9);
      v9 = fread(v7, 1uLL, 0x20000uLL, a1);
    }
    while (v9);
  }
  if (feof(a1))
    goto LABEL_7;
  if (!*__error())
  {
    v10 = 4294960596;
    goto LABEL_14;
  }
  v10 = *__error();
  if ((_DWORD)v10)
  {
LABEL_14:
    free(v7);
    goto LABEL_15;
  }
LABEL_7:
  *a2 = v5;
  free(v7);
  return 0;
}

uint64_t sub_21A694C44(const __CFString *a1, const char **a2, UInt8 **a3)
{
  const char *CStringPtr;
  const char *v7;
  UInt8 *v8;
  uint64_t result;
  CFIndex Length;
  CFIndex MaximumSizeForEncoding;
  UInt8 *v12;
  CFIndex usedBufLen;
  CFRange v14;

  CStringPtr = CFStringGetCStringPtr(a1, 0x8000100u);
  if (CStringPtr)
  {
    v7 = CStringPtr;
    v8 = 0;
  }
  else
  {
    Length = CFStringGetLength(a1);
    MaximumSizeForEncoding = CFStringGetMaximumSizeForEncoding(Length, 0x8000100u);
    usedBufLen = MaximumSizeForEncoding;
    v12 = (UInt8 *)malloc_type_malloc(MaximumSizeForEncoding + 1, 0x6E325C90uLL);
    if (!v12)
      return 4294960568;
    v8 = v12;
    v14.location = 0;
    v14.length = Length;
    if (CFStringGetBytes(a1, v14, 0x8000100u, 0, 0, v12, MaximumSizeForEncoding, &usedBufLen) != Length)
    {
      free(v8);
      return 4294960596;
    }
    v8[usedBufLen] = 0;
    v7 = (const char *)v8;
  }
  result = 0;
  *a2 = v7;
  *a3 = v8;
  return result;
}

uint64_t sub_21A694D3C(const __CFString *a1, char **a2)
{
  const char *CStringPtr;
  char *v5;
  CFIndex Length;
  CFIndex MaximumSizeForEncoding;
  UInt8 *v8;
  uint64_t result;
  CFIndex usedBufLen;
  CFRange v11;

  CStringPtr = CFStringGetCStringPtr(a1, 0x8000100u);
  if (CStringPtr)
  {
    v5 = strdup(CStringPtr);
    if (!v5)
      return 4294960568;
LABEL_7:
    result = 0;
    *a2 = v5;
    return result;
  }
  Length = CFStringGetLength(a1);
  MaximumSizeForEncoding = CFStringGetMaximumSizeForEncoding(Length, 0x8000100u);
  usedBufLen = MaximumSizeForEncoding;
  v8 = (UInt8 *)malloc_type_malloc(MaximumSizeForEncoding + 1, 0x40A999DEuLL);
  if (!v8)
    return 4294960568;
  v5 = (char *)v8;
  v11.location = 0;
  v11.length = Length;
  if (CFStringGetBytes(a1, v11, 0x8000100u, 0, 0, v8, MaximumSizeForEncoding, &usedBufLen) == Length)
  {
    v5[usedBufLen] = 0;
    goto LABEL_7;
  }
  free(v5);
  return 4294960596;
}

CFNumberRef sub_21A694E2C(uint64_t a1)
{
  uint64_t *p_valuePtr;
  CFNumberType v2;
  int v4;
  __int16 v5;
  char v6;
  uint64_t valuePtr;

  valuePtr = a1;
  v6 = 0;
  v5 = 0;
  v4 = 0;
  if (a1 == (char)a1)
  {
    v6 = a1;
    p_valuePtr = (uint64_t *)&v6;
    v2 = kCFNumberSInt8Type;
  }
  else
  {
    p_valuePtr = &valuePtr;
    v2 = kCFNumberSInt64Type;
  }
  return CFNumberCreate(0, v2, p_valuePtr);
}

const char *sub_21A694EAC(const __CFString *cf, char *__dst, size_t __size)
{
  CFTypeID v6;
  const char *v7;
  const UInt8 *BytePtr;
  CFIndex Length;
  char *v10;
  uint64_t v11;
  const UInt8 *v12;
  char *v13;
  unint64_t v14;
  char v15;
  BOOL v16;
  const __CFAllocator *Default;
  CFCalendarRef v18;
  __CFCalendar *v19;
  CFAbsoluteTime v20;
  uint64_t v22;
  uint64_t v23;
  _BYTE v24[12];
  uint64_t valuePtr;

  if (!__size)
    return "";
  if (!cf)
  {
    v7 = "";
LABEL_7:
    strlcpy(__dst, v7, __size);
    return __dst;
  }
  v6 = CFGetTypeID(cf);
  if (v6 == CFStringGetTypeID())
  {
    CFStringGetCString(cf, __dst, __size, 0x8000100u);
    return __dst;
  }
  if (v6 == CFNumberGetTypeID())
  {
    if (CFNumberIsFloatType((CFNumberRef)cf))
    {
      valuePtr = 0;
      CFNumberGetValue((CFNumberRef)cf, kCFNumberDoubleType, &valuePtr);
      snprintf(__dst, __size, "%f");
    }
    else
    {
      *(_QWORD *)&v24[4] = 0;
      CFNumberGetValue((CFNumberRef)cf, kCFNumberSInt64Type, &v24[4]);
      snprintf(__dst, __size, "%lld");
    }
    return __dst;
  }
  if ((const __CFString *)*MEMORY[0x24BDBD270] == cf)
  {
    v7 = "true";
    goto LABEL_7;
  }
  if ((const __CFString *)*MEMORY[0x24BDBD268] == cf)
  {
    v7 = "false";
    goto LABEL_7;
  }
  if (v6 == CFDataGetTypeID())
  {
    BytePtr = CFDataGetBytePtr((CFDataRef)cf);
    Length = CFDataGetLength((CFDataRef)cf);
    v10 = __dst;
    if (Length >= 1)
    {
      v10 = __dst;
      if ((uint64_t)(__size - 1) >= 2)
      {
        v11 = __size - 3;
        v12 = BytePtr + 1;
        v13 = __dst;
        do
        {
          v14 = *(v12 - 1);
          *v13 = a0123456789abcd[v14 >> 4];
          v15 = a0123456789abcd[v14 & 0xF];
          v10 = v13 + 2;
          v13[1] = v15;
          if (v12 >= &BytePtr[Length])
            break;
          ++v12;
          v13 += 2;
          v16 = v11 <= 1;
          v11 -= 2;
        }
        while (!v16);
      }
    }
    *v10 = 0;
  }
  else if (v6 == CFDateGetTypeID())
  {
    *(_QWORD *)v24 = 0;
    v23 = 0;
    v22 = 0;
    Default = CFAllocatorGetDefault();
    v18 = CFCalendarCreateWithIdentifier(Default, (CFCalendarIdentifier)*MEMORY[0x24BDBD3B8]);
    if (v18
      && (v19 = v18,
          MEMORY[0x2207468B8](cf),
          CFCalendarDecomposeAbsoluteTime(v19, v20, "yMdHms", &v24[4], v24, (char *)&v23 + 4, &v23, (char *)&v22 + 4, &v22), modf((double)(int)v22, (long double *)&valuePtr), CFRelease(v19), (_DWORD)v23))
    {
      if ((int)v23 > 12)
        LODWORD(v23) = v23 - 12;
    }
    else
    {
      LODWORD(v23) = 12;
    }
    snprintf(__dst, __size, "%04d-%02d-%02d %02d:%02d:%02d.%06d %s", *(unsigned int *)&v24[4], *(unsigned int *)v24);
  }
  else if (v6 == CFDictionaryGetTypeID())
  {
    snprintf(__dst, __size, "{}");
  }
  else if (v6 == CFArrayGetTypeID())
  {
    snprintf(__dst, __size, "[]");
  }
  else
  {
    snprintf(__dst, __size, "");
  }
  return __dst;
}

uint64_t sub_21A6951D8(void *cf, uint64_t a2, const void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v11;
  const CFDictionaryKeyCallBacks *v12;
  const CFDictionaryValueCallBacks *v13;
  CFIndex i;
  uint64_t v15;
  CFTypeID v16;
  CFIndex v17;
  CFTypeID v18;
  CFStringRef v19;
  CFStringRef v20;
  const void *Value;
  CFMutableDictionaryRef Mutable;
  CFTypeID v23;
  CFStringRef v24;
  CFStringRef v25;
  CFTypeID v27;
  CFIndex idx;

  v11 = -1;
  v12 = (const CFDictionaryKeyCallBacks *)MEMORY[0x24BDBD6A0];
  v13 = (const CFDictionaryValueCallBacks *)MEMORY[0x24BDBD6B0];
  while (1)
  {
    for (i = 0; *(_BYTE *)(a2 + i) && *(_BYTE *)(a2 + i) != 46; ++i)
      ;
    if (!*(_BYTE *)(a2 + i))
      break;
    v15 = a2 + i + 1;
    if (*(_BYTE *)a2 == 91)
    {
      LODWORD(idx) = 0;
      if (sub_21A6A2BD4((char *)(a2 + 1), i - 1, "%i]", a4, a5, a6, a7, a8, (int)&idx) != 1)
        return 4294960579;
      v16 = CFGetTypeID(cf);
      if (v16 != CFArrayGetTypeID())
        return 4294960540;
      v17 = idx;
      if ((idx & 0x80000000) != 0 || CFArrayGetCount((CFArrayRef)cf) <= v17)
        return 4294960586;
      cf = (void *)CFArrayGetValueAtIndex((CFArrayRef)cf, (int)idx);
      v11 = idx;
      a2 = v15;
    }
    else
    {
      v18 = CFGetTypeID(cf);
      if (v18 != CFDictionaryGetTypeID())
        return 4294960540;
      v19 = CFStringCreateWithBytes(0, (const UInt8 *)a2, i, 0x8000100u, 0);
      if (!v19)
        return 4294960596;
      v20 = v19;
      Value = CFDictionaryGetValue((CFDictionaryRef)cf, v19);
      if (!Value)
      {
        Mutable = CFDictionaryCreateMutable(0, 0, v12, v13);
        if (!Mutable)
        {
          CFRelease(v20);
          return 4294960568;
        }
        Value = Mutable;
        CFDictionarySetValue((CFMutableDictionaryRef)cf, v20, Mutable);
        CFRelease(Value);
      }
      CFRelease(v20);
      v11 = -1;
      a2 = v15;
      cf = (void *)Value;
    }
  }
  v23 = CFGetTypeID(cf);
  if (v23 == CFDictionaryGetTypeID())
  {
    if (i)
    {
      v24 = CFStringCreateWithBytes(0, (const UInt8 *)a2, i, 0x8000100u, 0);
      if (!v24)
        return 4294960596;
      v25 = v24;
      if (a3)
        CFDictionarySetValue((CFMutableDictionaryRef)cf, v24, a3);
      else
        CFDictionaryRemoveValue((CFMutableDictionaryRef)cf, v24);
      CFRelease(v25);
      return 0;
    }
    return 4294960579;
  }
  v27 = CFGetTypeID(cf);
  if (v27 == CFArrayGetTypeID())
  {
    if (!i)
    {
      if (a3)
      {
        CFArrayAppendValue((CFMutableArrayRef)cf, a3);
      }
      else
      {
        if ((v11 & 0x80000000) != 0)
          return 4294960579;
        CFArrayRemoveValueAtIndex((CFMutableArrayRef)cf, v11);
      }
      return 0;
    }
    return 4294960579;
  }
  return 4294960540;
}

void sub_21A695458(void *key, void *value, uint64_t a3)
{
  if (!*(_DWORD *)(a3 + 8))
  {
    CFDictionarySetValue(*(CFMutableDictionaryRef *)a3, key, value);
    *(_DWORD *)(a3 + 8) = 0;
  }
}

char *sub_21A695490(const __CFDictionary *a1, const void *a2, char *a3, size_t a4, int *a5)
{
  const __CFString *Value;
  int v9;

  Value = (const __CFString *)CFDictionaryGetValue(a1, a2);
  if (!Value)
  {
    v9 = -6727;
    if (!a5)
      return a3;
    goto LABEL_3;
  }
  a3 = (char *)sub_21A694EAC(Value, a3, a4);
  v9 = 0;
  if (a5)
LABEL_3:
    *a5 = v9;
  return a3;
}

uint64_t sub_21A6954F0(__CFDictionary *a1, const void *a2, char *cStr, CFIndex numBytes)
{
  CFStringRef v6;
  CFStringRef v7;

  if (numBytes == -1)
    v6 = CFStringCreateWithCString(0, cStr, 0x8000100u);
  else
    v6 = CFStringCreateWithBytes(0, (const UInt8 *)cStr, numBytes, 0x8000100u, 0);
  v7 = v6;
  if (!v6)
    return 4294960596;
  CFDictionarySetValue(a1, a2, v6);
  CFRelease(v7);
  return 0;
}

uint64_t sub_21A695580(__CFDictionary *a1, const void *a2, UInt8 *bytes, CFIndex length)
{
  CFDataRef v6;
  CFDataRef v7;

  v6 = CFDataCreate(0, bytes, length);
  if (!v6)
    return 4294960596;
  v7 = v6;
  CFDictionarySetValue(a1, a2, v6);
  CFRelease(v7);
  return 0;
}

uint64_t sub_21A6955E4(__CFDictionary *a1, const void *a2, uint64_t a3)
{
  CFNumberRef v5;
  CFNumberRef v6;

  v5 = sub_21A694E2C(a3);
  if (!v5)
    return 4294960568;
  v6 = v5;
  CFDictionarySetValue(a1, a2, v5);
  CFRelease(v6);
  return 0;
}

uint64_t sub_21A695640(const void *a1, const void ***a2)
{
  CFTypeID v4;
  CFIndex Count;
  const void **v6;
  const void **v7;
  uint64_t result;

  v4 = CFGetTypeID(a1);
  if (v4 != CFDictionaryGetTypeID())
    return 4294960540;
  Count = CFDictionaryGetCount((CFDictionaryRef)a1);
  v6 = (const void **)malloc_type_malloc(16 * Count + 16, 0x3FA85CF1uLL);
  if (!v6)
    return 4294960568;
  v7 = v6;
  *v6 = 0;
  v6[1] = (const void *)Count;
  CFDictionaryGetKeysAndValues((CFDictionaryRef)a1, v6 + 2, &v6[Count + 2]);
  result = 0;
  *a2 = v7;
  return result;
}

void sub_21A6956D0(void *a1)
{
  if (a1)
    free(a1);
}

uint64_t sub_21A6956DC(uint64_t *a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a1;
  v4 = a1[1];
  if (*a1 >= v4)
    return 0;
  if (a2)
    *a2 = a1[v3 + 2];
  if (a3)
    *a3 = a1[v4 + 2 + v3];
  *a1 = v3 + 1;
  return 1;
}

uint64_t sub_21A695724(const Bytef *a1, uLong a2, _QWORD *a3, uLongf *a4)
{
  uLong v8;
  Bytef *v9;
  Bytef *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  size_t v14;
  void *v15;
  uLongf destLen;

  v8 = a2 + a2 / 0xA;
  destLen = v8 + 12;
  v9 = (Bytef *)malloc_type_malloc(v8 + 20, 0x92DA1CD0uLL);
  if (!v9)
    return 4294960568;
  v10 = v9;
  *(_DWORD *)v9 = 2053924451;
  v9[4] = BYTE3(a2);
  v9[5] = BYTE2(a2);
  v9[6] = BYTE1(a2);
  v9[7] = a2;
  v11 = compress2(v9 + 8, &destLen, a1, a2, 9);
  if ((_DWORD)v11)
  {
    v12 = v11;
LABEL_13:
    free(v10);
    return v12;
  }
  v14 = destLen + 8;
  destLen += 8;
  if (a3)
  {
    v15 = malloc_type_realloc(v10, v14, 0x2DBB6E1AuLL);
    if (!v15)
    {
      v12 = 4294960553;
      goto LABEL_13;
    }
    v10 = 0;
    *a3 = v15;
  }
  if (a4)
    *a4 = destLen;
  v12 = 0;
  result = 0;
  if (v10)
    goto LABEL_13;
  return result;
}

uint64_t sub_21A695840(uint64_t a1, unint64_t a2, _QWORD *a3, uLongf *a4)
{
  uLong v4;
  unint64_t v8;
  uint64_t v9;
  Bytef *v10;
  void *v11;
  uint64_t v12;
  uint64_t result;
  uLongf destLen;

  v4 = a2 - 8;
  if (a2 < 8)
    return 4294960554;
  if (*(_BYTE *)a1 != 99 && *(_BYTE *)(a1 + 1) != 102 && *(_BYTE *)(a1 + 2) != 108 && *(_BYTE *)(a1 + 3) != 122)
    return 4294960548;
  v8 = (*(unsigned __int8 *)(a1 + 4) << 24) | ((unint64_t)*(unsigned __int8 *)(a1 + 5) << 16) | ((unint64_t)*(unsigned __int8 *)(a1 + 6) << 8);
  v9 = *(unsigned __int8 *)(a1 + 7);
  destLen = v8 | v9;
  if (v8 | v9)
  {
    v10 = (Bytef *)malloc_type_malloc(v8 | v9, 0xABB20DADuLL);
    if (v10)
    {
      v11 = v10;
      v12 = uncompress(v10, &destLen, (const Bytef *)(a1 + 8), v4);
      if ((_DWORD)v12)
      {
LABEL_17:
        free(v11);
        return v12;
      }
      goto LABEL_12;
    }
    return 4294960568;
  }
  v11 = malloc_type_malloc(1uLL, 0x511897C6uLL);
  if (!v11)
    return 4294960568;
LABEL_12:
  if (a3)
  {
    *a3 = v11;
    v11 = 0;
  }
  if (a4)
    *a4 = destLen;
  v12 = 0;
  result = 0;
  if (v11)
    goto LABEL_17;
  return result;
}

uint64_t sub_21A695970(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(_QWORD *)result = a2;
  *(_QWORD *)(result + 8) = a3;
  *(_QWORD *)(result + 16) = a4;
  *(_QWORD *)(result + 24) = a2;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 40) = a3;
  *(_BYTE *)(result + 48) = 0;
  *(_DWORD *)(result + 52) = 0;
  return result;
}

void sub_21A695988(uint64_t a1)
{
  void *v2;
  uint64_t v3;

  if (*(_BYTE *)(a1 + 48))
  {
    v2 = *(void **)(a1 + 24);
    if (v2)
      free(v2);
  }
  v3 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)a1;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = v3;
  *(_BYTE *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 52) = 0;
}

uint64_t sub_21A6959CC(uint64_t a1, char *__s, size_t a3)
{
  size_t v3;
  uint64_t v6;
  uint64_t v7;
  void *__dst;

  v3 = a3;
  if (a3 == -1)
    v3 = strlen(__s);
  __dst = 0;
  v6 = sub_21A695A58(a1, *(_QWORD *)(a1 + 32) + v3, (unint64_t *)&__dst);
  v7 = v6;
  if ((_DWORD)v6)
  {
    if (!*(_DWORD *)(a1 + 52))
      *(_DWORD *)(a1 + 52) = v6;
  }
  else
  {
    memcpy(__dst, __s, v3);
  }
  return v7;
}

uint64_t sub_21A695A58(uint64_t a1, unint64_t a2, unint64_t *a3)
{
  uint64_t result;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  size_t v11;
  void *v12;
  void *v13;
  size_t v14;
  void *v15;

  result = *(unsigned int *)(a1 + 52);
  if (!(_DWORD)result)
  {
    v7 = *(_QWORD *)(a1 + 32);
    if (v7 >= a2)
    {
      *(_QWORD *)(a1 + 32) = a2;
      if (a3)
      {
        result = 0;
        v8 = *(_QWORD *)(a1 + 24);
LABEL_26:
        *a3 = v8;
        return result;
      }
      return 0;
    }
    if (*(_QWORD *)(a1 + 40) >= a2)
    {
LABEL_24:
      *(_QWORD *)(a1 + 32) = a2;
      if (a3)
      {
        result = 0;
        v8 = *(_QWORD *)(a1 + 24) + v7;
        goto LABEL_26;
      }
      return 0;
    }
    if (*(_QWORD *)(a1 + 16) < a2)
    {
      result = 4294960545;
LABEL_6:
      *(_DWORD *)(a1 + 52) = result;
      return result;
    }
    v9 = 4096;
    if (a2 >> 17)
      v10 = (a2 + 0x1FFFF) & 0xFFFFFFFFFFFE0000;
    else
      v10 = (a2 + 0x3FFF) & 0xFFFFFFFFFFFFC000;
    if (a2 >= 0x1000)
      v9 = v10;
    if (a2 >= 0x100)
      v11 = v9;
    else
      v11 = 256;
    v12 = malloc_type_malloc(v11, 0x7C709581uLL);
    if (v12)
    {
      v13 = v12;
      v14 = *(_QWORD *)(a1 + 32);
      if (v14)
        memcpy(v12, *(const void **)(a1 + 24), v14);
      if (*(_BYTE *)(a1 + 48))
      {
        v15 = *(void **)(a1 + 24);
        if (v15)
          free(v15);
      }
      *(_QWORD *)(a1 + 40) = v11;
      *(_QWORD *)(a1 + 24) = v13;
      *(_BYTE *)(a1 + 48) = 1;
      goto LABEL_24;
    }
    result = 4294960568;
    if (!*(_DWORD *)(a1 + 52))
      goto LABEL_6;
  }
  return result;
}

char *sub_21A695B94(uint64_t __errnum, char *a2, uint64_t a3)
{
  char **v6;
  char *v7;
  int v8;
  void *v9;
  uint64_t v10;
  char *v11;
  char v12;

  if ((_DWORD)__errnum)
  {
    v6 = &off_24DD05080;
    while (1)
    {
      v7 = *v6;
      if (!*v6)
        break;
      v8 = *((_DWORD *)v6 - 2);
      v6 += 2;
      if (v8 == (_DWORD)__errnum)
        goto LABEL_16;
    }
    if ((byte_2550F4CD8 & 1) == 0)
    {
      v9 = dlopen("/System/Library/Frameworks/CoreServices.framework/CoreServices", 5);
      if (v9)
        off_2550F4CE0 = dlsym(v9, "GetMacOSStatusErrorString");
      byte_2550F4CD8 = 1;
    }
    if (!off_2550F4CE0 || (v7 = (char *)((uint64_t (*)(uint64_t))off_2550F4CE0)(__errnum)) == 0 || !*v7)
    {
      v7 = strerror(__errnum);
      if (!v7)
        v7 = "<< NO ERROR STRING >>";
    }
  }
  else
  {
    v7 = "noErr";
  }
LABEL_16:
  if (!a2 || !a3)
    return v7;
  v10 = a3 - 1;
  v11 = a2;
  if (a3 - 1 >= 1)
  {
    v11 = a2;
    do
    {
      v12 = *v7;
      if (!*v7)
        break;
      ++v7;
      *v11++ = v12;
      --v10;
    }
    while (v10 > 0);
  }
  *v11 = 0;
  return a2;
}

uint64_t sub_21A695CB4(uint64_t a1, uint64_t a2, const char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  return sub_21A695CDC(a1, a2, a3, (uint64_t)va, a5, a6, a7, a8);
}

uint64_t sub_21A695CDC(uint64_t a1, uint64_t a2, const char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t result;
  uint64_t (*v11)(const char *, uint64_t, _QWORD);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v15 = 0;
  v16 = 0;
  v11 = (uint64_t (*)(const char *, uint64_t, _QWORD))sub_21A695D38;
  v12 = a1;
  v9 = a2 - 1;
  if (!a2)
    v9 = 0;
  v13 = 0;
  v14 = v9;
  result = sub_21A695DBC(&v11, a3, a4, a4, a5, a6, a7, a8);
  if (a2)
    *(_BYTE *)(v12 + v13) = 0;
  return result;
}

size_t sub_21A695D38(_BYTE *__src, size_t __n, _QWORD *a3)
{
  size_t v4;
  uint64_t v5;
  size_t v6;

  v4 = __n;
  v5 = a3[2];
  v6 = a3[3] - v5;
  if (v6 >= __n)
  {
    if (!__n)
      goto LABEL_10;
    goto LABEL_9;
  }
  if (v6)
  {
    while ((__src[v6] & 0xC0) == 0x80)
    {
      if (!--v6)
        goto LABEL_5;
    }
    v4 = v6;
LABEL_9:
    memcpy((void *)(a3[1] + v5), __src, v4);
    v5 = a3[2];
    goto LABEL_10;
  }
LABEL_5:
  v4 = 0;
LABEL_10:
  a3[2] = v5 + v4;
  return v4;
}

uint64_t sub_21A695DBC(uint64_t (**a1)(const char *, uint64_t, _QWORD), const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t (**v9)(const char *, uint64_t, _QWORD);
  uint64_t v10;
  uint64_t v11;
  uint64_t i;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  char v17;
  char v18;
  int v19;
  char *v20;
  char *v21;
  unsigned int *v22;
  unsigned int *v23;
  unsigned int v24;
  int v25;
  char *v26;
  unint64_t v27;
  int v28;
  unsigned __int8 v29;
  char v30;
  unsigned __int8 *v31;
  unint64_t v32;
  int v33;
  int v34;
  unsigned int v35;
  const char *v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t v39;
  unsigned int *v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int *v43;
  const char *v44;
  unsigned int v45;
  size_t v46;
  unint64_t v47;
  uint64_t v48;
  tm *v49;
  char *p_str;
  int v51;
  unsigned __int8 **v52;
  unsigned __int8 *v53;
  int v54;
  _BOOL4 v55;
  unsigned __int8 **v56;
  unsigned __int8 *v57;
  uint64_t v58;
  unsigned int *v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  unsigned __int8 **v63;
  unsigned __int8 *v64;
  unsigned int *v65;
  unsigned int v66;
  char v67;
  uint64_t v68;
  unsigned int *v69;
  uint64_t v70;
  int v71;
  unsigned int *v72;
  _BYTE *v73;
  char **v74;
  int v75;
  _BOOL4 v76;
  BOOL v77;
  unsigned int *v78;
  unsigned int v79;
  int v80;
  int v81;
  _BYTE *v82;
  int v83;
  _BYTE *v84;
  unint64_t v85;
  int v86;
  unint64_t *v87;
  unsigned int *v88;
  int v89;
  uint64_t v90;
  unsigned __int8 *v91;
  int v92;
  int v93;
  const __CFString **v94;
  const __CFString *v95;
  const __CFString *v96;
  __int16 v97;
  unsigned int *v98;
  unsigned int v99;
  unsigned int v100;
  int v101;
  int v102;
  unsigned int v103;
  char *j;
  unint64_t v105;
  uint64_t v106;
  int v107;
  int v108;
  uint64_t v109;
  uint64_t v110;
  int v111;
  char v112;
  int v113;
  uint64_t v114;
  int v115;
  int v116;
  uint64_t v117;
  const char *v118;
  uint64_t v119;
  const char *v120;
  uint64_t v121;
  unsigned __int8 **v123;
  unsigned __int8 *v124;
  uint64_t v125;
  uint64_t v126;
  unsigned __int8 *v127;
  uint64_t v128;
  uint64_t v129;
  unsigned __int8 *v130;
  unsigned int v131;
  int v132;
  uint64_t v133;
  uint64_t v134;
  const char *v135;
  unint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  _BYTE *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  unsigned int v147;
  _BYTE *v148;
  char v149;
  char v150;
  BOOL v151;
  int v152;
  unsigned int *v153;
  unint64_t v154;
  unsigned int v155;
  __int128 v156;
  CFTypeID v157;
  char *v158;
  uint64_t v159;
  uint64_t (**v160)(const char *, uint64_t, _QWORD);
  CFIndex Length;
  size_t MaximumSizeForEncoding;
  CFIndex v163;
  uint64_t v164;
  UInt8 *v165;
  char *v166;
  uint64_t v167;
  unsigned __int8 **v168;
  unsigned __int8 *v169;
  uint64_t v170;
  uint64_t v171;
  unsigned __int8 *v172;
  BOOL v173;
  unsigned __int8 *v174;
  unint64_t v175;
  int v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  BOOL v180;
  int v181;
  BOOL v182;
  int v183;
  uint64_t v184;
  uint64_t v185;
  int v186;
  BOOL v187;
  BOOL v188;
  __int16 v189;
  int v190;
  int v191;
  uint64_t v192;
  const char *v193;
  int v194;
  uint64_t v195;
  uint64_t v196;
  const char *v197;
  uint64_t v198;
  char *v199;
  unsigned int v200;
  int v201;
  int v202;
  unsigned int *v203;
  unint64_t v204;
  char *v205;
  uint64_t v206;
  uint64_t v207;
  unint64_t v208;
  uint64_t v209;
  uint64_t v210;
  char *v211;
  uint64_t v212;
  int v214;
  uint64_t v215;
  unsigned int v216;
  uint64_t v217;
  char *v218;
  char *v219;
  char *v220;
  int v221;
  uint64_t v222;
  char *v223;
  int v224;
  int v225;
  int v226;
  uint64_t v227;
  char *v228;
  uint64_t v229;
  char *v230;
  unsigned int v231;
  unsigned int v232;
  char *v233;
  int v234;
  int v235;
  int v236;
  int v237;
  int v238;
  char *v239;
  unsigned int v240;
  char v241;
  unsigned int v242;
  char *v243;
  char *v244;
  unsigned int v245;
  char v246;
  unsigned int v247;
  char *v248;
  char *v249;
  char v250;
  unsigned __int8 *v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  unint64_t v255;
  char *v256;
  int v257;
  int v258;
  int v259;
  int v260;
  int v261;
  int v262;
  int v263;
  int v264;
  BOOL v265;
  __int16 v266;
  int v267;
  int v268;
  uint64_t v269;
  unsigned __int8 *v270;
  char *v271;
  unsigned __int8 *v272;
  int v273;
  int v274;
  uint64_t v275;
  int v276;
  int v277;
  CFIndex *usedBufLen;
  CFIndex *usedBufLena;
  uint64_t v281;
  const __CFString *v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  time_t tv_sec;
  timeval v288;
  __int128 v289;
  __int128 v290;
  unsigned int *v291;
  char v292[8];
  char __str;
  _BYTE v294[299];
  char valuePtr[8];
  __int128 *v296;
  int v297;
  int v298;
  uint64_t v299;
  uint64_t v300;
  CFRange v301;

  v9 = a1;
  v10 = 0;
  v300 = *MEMORY[0x24BDAC8D0];
  v291 = (unsigned int *)a3;
  v289 = 0u;
  v290 = 0u;
  v282 = (const __CFString *)*MEMORY[0x24BDBD270];
LABEL_2:
  v11 = 0;
  for (i = 0; ; ++i)
  {
    v13 = a2[i];
    if (!a2[i] || v13 == 37)
      break;
    v11 += 0x100000000;
  }
  if (i)
  {
    v14 = v11 >> 32;
    v15 = (*v9)(a2, v11 >> 32, v9);
    if ((v15 & 0x80000000) != 0)
      return v15;
    v10 += v14;
  }
  if (!v13)
    return v10;
  v16 = 0;
  v17 = 0;
  v18 = 0;
  v19 = 0;
  v289 = 0u;
  v290 = 0u;
  v20 = (char *)&a2[i];
  while (2)
  {
    v21 = v20 + 2;
LABEL_12:
    LOBYTE(v22) = *(v21 - 1);
    switch((char)v22)
    {
      case ' ':
        v16 = 32;
        BYTE4(v289) = 32;
        v20 = v21 - 1;
        continue;
      case '#':
        BYTE3(v289) = ++v17;
        v20 = v21 - 1;
        continue;
      case '\'':
        BYTE8(v290) = ++v18;
        v20 = v21 - 1;
        continue;
      case '*':
        v23 = v291;
        v291 += 2;
        v24 = *v23;
        if ((*v23 & 0x80000000) != 0)
        {
          v24 = -v24;
          LOBYTE(v19) = v19 | 1;
          LOBYTE(v289) = v19;
        }
        DWORD2(v289) = v24;
        LODWORD(v22) = *v21;
        goto LABEL_28;
      case '+':
        v19 |= 2u;
        goto LABEL_16;
      case '-':
        v19 |= 1u;
        goto LABEL_16;
      case '0':
        v19 |= 4u;
LABEL_16:
        LOBYTE(v289) = v19;
        ++v21;
        goto LABEL_12;
      default:
        LODWORD(v22) = (char)v22;
        --v21;
        if (((char)v22 - 48) > 9)
        {
          v24 = 0;
        }
        else
        {
          v24 = 0;
          do
          {
            v24 = (_DWORD)v22 + 10 * v24 - 48;
            DWORD2(v289) = v24;
            v25 = *++v21;
            LODWORD(v22) = v25;
          }
          while ((v25 - 48) < 0xA);
        }
LABEL_28:
        if ((_DWORD)v22 != 46)
        {
          v27 = 0;
          if ((v19 & 1) == 0)
            goto LABEL_40;
LABEL_39:
          LOBYTE(v19) = v19 & 0xFB;
          LOBYTE(v289) = v19;
          goto LABEL_40;
        }
        v26 = v21 + 1;
        LODWORD(v22) = v21[1];
        if ((_DWORD)v22 == 42)
        {
          v22 = v291;
          v291 += 2;
          v27 = *v22;
          *(_QWORD *)&v290 = v27;
          LODWORD(v22) = v21[2];
          v26 = v21 + 2;
        }
        else if (((_DWORD)v22 - 48) > 9)
        {
          v27 = 0;
        }
        else
        {
          v27 = 0;
          do
          {
            v27 = ((_DWORD)v22 - 48) + 10 * v27;
            *(_QWORD *)&v290 = v27;
            v28 = *++v26;
            LODWORD(v22) = v28;
          }
          while ((v28 - 48) < 0xA);
        }
        LOBYTE(v19) = v19 | 8;
        LOBYTE(v289) = v19;
        v21 = v26;
        if ((v19 & 1) != 0)
          goto LABEL_39;
LABEL_40:
        v29 = 0;
        v30 = 0;
        v31 = (unsigned __int8 *)(v21 + 1);
        break;
    }
    break;
  }
  while (2)
  {
    HIDWORD(v32) = (_DWORD)v22;
    LODWORD(v32) = (_DWORD)v22 - 104;
    switch((v32 >> 1))
    {
      case 0u:
        BYTE1(v289) = ++v29;
        goto LABEL_44;
      case 1u:
      case 6u:
      case 9u:
        if (v29 | v30)
          return 0xFFFFFFFFLL;
        v29 = 0;
        v30 = 1;
        BYTE2(v289) = 1;
        LODWORD(v22) = (char)*v31;
        goto LABEL_47;
      case 2u:
        BYTE2(v289) = ++v30;
LABEL_44:
        v33 = (char)*v31++;
        LODWORD(v22) = v33;
        continue;
      default:
        v39 = 0xFFFFFFFFLL;
        if ((char)v29 > 2 || v30 > 2)
          return v39;
        --v31;
        if (v29 && v30)
          return 0xFFFFFFFFLL;
LABEL_47:
        if ((int)v22 <= 71)
        {
          if ((_DWORD)v22 == 37)
          {
            __str = 37;
LABEL_262:
            LODWORD(v39) = 1;
LABEL_263:
            p_str = &__str;
            goto LABEL_264;
          }
          if ((_DWORD)v22 != 64)
          {
            if ((_DWORD)v22 == 67)
            {
              v40 = v291;
              v291 += 2;
              v41 = *v40;
              if (v18)
              {
                __str = 39;
                v42 = 1;
              }
              else
              {
                v42 = 0;
              }
              v9 = a1;
              v147 = HIBYTE(v41);
              p_str = &__str;
              v148 = &v294[v42 - 1];
              if (HIBYTE(v41) - 127 < 0xFFFFFFA1)
                LOBYTE(v147) = 94;
              *v148 = v147;
              v149 = BYTE2(v41);
              if (BYTE2(v41) - 127 < 0xFFFFFFA1)
                v149 = 94;
              v148[1] = v149;
              v150 = BYTE1(v41);
              if (BYTE1(v41) - 127 < 0xFFFFFFA1)
                v150 = 94;
              v148[2] = v150;
              v151 = v41 << 24 == 2130706432 || (int)(v41 << 24) < 520093697;
              if (v151)
                LOBYTE(v41) = 94;
              v148[3] = v41;
              if (v18)
              {
                LODWORD(v39) = v42 + 5;
                v294[(v42 | 4) - 1] = 39;
              }
              else
              {
                LODWORD(v39) = v42 | 4;
              }
              goto LABEL_653;
            }
LABEL_148:
            p_str = &__str;
            v51 = sub_21A695CB4(&__str, 300, "<<UNKNOWN FORMAT CONVERSION CODE %%%c>>");
LABEL_149:
            LODWORD(v39) = v51;
LABEL_264:
            v9 = a1;
            goto LABEL_653;
          }
          v94 = (const __CFString **)v291;
          v291 += 2;
          v95 = *v94;
          if (v95)
            v96 = v95;
          else
            v96 = CFSTR("<<NULL>>");
          if (v18)
          {
            if ((v19 & 8) != 0)
            {
              if (v27 < 2)
              {
                *(_QWORD *)&v290 = 0;
                BYTE8(v290) = 0;
                goto LABEL_353;
              }
              *(_QWORD *)&v290 = v27 - 2;
            }
            if (v18 == 2)
            {
              v97 = 8738;
            }
            else
            {
              if (v18 != 1)
                goto LABEL_353;
              v97 = 10023;
            }
            *(_WORD *)((char *)&v290 + 9) = v97;
          }
LABEL_353:
          v157 = CFGetTypeID(v96);
          if (v157 == CFBooleanGetTypeID())
          {
            if (v282 == v96)
              v158 = "true";
            else
              v158 = "false";
            if (v282 == v96)
              v159 = 4;
            else
              v159 = 5;
            v9 = a1;
            goto LABEL_364;
          }
          v9 = a1;
          if (v157 == CFNumberGetTypeID())
          {
            *(_QWORD *)valuePtr = 0;
            if (CFNumberGetValue((CFNumberRef)v96, kCFNumberSInt64Type, valuePtr))
            {
              v159 = (int)sub_21A695CB4(&__str, 300, "%lld", *(_QWORD *)valuePtr);
              v158 = &__str;
LABEL_364:
              v160 = v9;
LABEL_365:
              v39 = sub_21A6996E8(v160, (uint64_t)&v289, v158, v159);
              goto LABEL_366;
            }
            v39 = 4294960559;
          }
          else if (v157 == CFStringGetTypeID())
          {
            Length = CFStringGetLength(v96);
            MaximumSizeForEncoding = CFStringGetMaximumSizeForEncoding(Length, 0x8000100u);
            if (!MaximumSizeForEncoding)
            {
              v9 = a1;
              v160 = a1;
              v158 = "";
              v159 = 0;
              goto LABEL_365;
            }
            v163 = MaximumSizeForEncoding;
            v164 = v10;
            *(_QWORD *)valuePtr = 0;
            v165 = (UInt8 *)malloc_type_malloc(MaximumSizeForEncoding, 0xDF19D30FuLL);
            if (v165)
            {
              v166 = (char *)v165;
              *(_QWORD *)valuePtr = 0;
              v301.location = 0;
              v301.length = Length;
              CFStringGetBytes(v96, v301, 0x8000100u, 0x5Eu, 0, v165, v163, (CFIndex *)valuePtr);
              v167 = *(_QWORD *)valuePtr;
              if ((v289 & 8) != 0)
              {
                v9 = a1;
                if (*(uint64_t *)valuePtr > (uint64_t)v290)
                {
                  v269 = (int)v290;
                  *(_QWORD *)valuePtr = (int)v290;
                  v167 = (int)v290;
                  if ((uint64_t)((_QWORD)v290 << 32) >= 1)
                  {
                    while ((v166[v269] & 0xC0) == 0x80)
                    {
                      v167 = v269 - 1;
                      *(_QWORD *)valuePtr = v269 - 1;
                      v151 = v269-- < 2;
                      if (v151)
                        goto LABEL_688;
                    }
                    v167 = v269;
                  }
                }
              }
              else
              {
                v9 = a1;
              }
LABEL_688:
              v39 = sub_21A6996E8(v9, (uint64_t)&v289, v166, v167);
              free(v166);
              v10 = v164;
            }
            else
            {
              v39 = 4294960568;
              v9 = a1;
            }
          }
          else
          {
            v298 = 0;
            v299 = 0;
            *(_QWORD *)valuePtr = a1;
            v296 = &v289;
            v297 = DWORD2(v289);
            v39 = sub_21A69985C((uint64_t (***)(const char *, ...))valuePtr, v96, 1, 0);
            if ((v39 & 0x80000000) == 0 && (v157 == CFArrayGetTypeID() || v157 == CFDictionaryGetTypeID()))
            {
              v190 = (*a1)("\n", 1, a1);
              if (v190 <= 0)
                v191 = 0;
              else
                v191 = v39;
              v39 = (v191 + v190);
            }
          }
LABEL_366:
          if ((v39 & 0x80000000) == 0)
          {
            v10 += v39 & ~((int)v39 >> 31);
            goto LABEL_656;
          }
          return v39;
        }
        v34 = 0;
        v35 = 10;
        v36 = "0123456789ABCDEF";
        switch((int)v22)
        {
          case 'H':
            v283 = v10;
            v43 = v291;
            v291 += 2;
            v44 = *(const char **)v43;
            v291 = v43 + 4;
            v45 = v43[2];
            v46 = (int)v45;
            v291 = v43 + 6;
            v47 = (int)v43[4];
            if (!v44 && v45)
            {
              v9 = a1;
              v48 = sub_21A6996C0((uint64_t)a1, (uint64_t)"<<NULL %zu/%zu>>", a3, a4, a5, a6, a7, a8, (int)v45);
              v39 = v48;
              if ((v48 & 0x80000000) == 0)
              {
                v10 = v283 + v48;
                goto LABEL_656;
              }
              return v39;
            }
            if (v45 == -1)
              v46 = strlen(v44);
            switch(v27)
            {
              case 0uLL:
                if (v46 >= v47)
                  v46 = v47;
                v9 = a1;
                if (!v46)
                {
                  v39 = 0;
                  goto LABEL_619;
                }
                if (v17 == 2)
                {
                  LODWORD(v39) = 0;
                }
                else
                {
                  v253 = 0;
                  LODWORD(v39) = 0;
                  do
                  {
                    if (v253)
                    {
                      valuePtr[0] = 32;
                      v254 = 1;
                    }
                    else
                    {
                      v254 = 0;
                    }
                    v255 = v44[v253];
                    v256 = &valuePtr[v254];
                    *v256 = a0123456789abcd[v255 >> 4];
                    v256[1] = a0123456789abcd[v255 & 0xF];
                    v110 = (*a1)(valuePtr, v254 | 2, a1);
                    if ((v110 & 0x80000000) != 0)
                      goto LABEL_618;
                    v39 = (v110 + v39);
                    ++v253;
                  }
                  while (v46 != v253);
                  if (SBYTE3(v289) < 1)
                  {
LABEL_619:
                    v10 = v283;
                    goto LABEL_620;
                  }
                  if ((int)v39 >= 1)
                  {
                    v110 = (*a1)(" |", 2, a1);
LABEL_225:
                    if ((v110 & 0x80000000) != 0)
                    {
LABEL_618:
                      v39 = v110;
                    }
                    else
                    {
                      v111 = v110 + v39;
                      if (v46 <= 1)
                        v46 = 1;
                      do
                      {
                        v113 = *(unsigned __int8 *)v44++;
                        v112 = v113;
                        if ((v113 - 127) < 0xFFFFFFA1)
                          v112 = 94;
                        LOBYTE(v288.tv_sec) = v112;
                        v114 = (*a1)((const char *)&v288, 1, a1);
                        v39 = v114;
                        if ((v114 & 0x80000000) != 0)
                          goto LABEL_619;
                        v111 += v114;
                        --v46;
                      }
                      while (v46);
                      v115 = (*a1)("|", 1, a1);
                      if (v115 >= 0)
                        v116 = v111;
                      else
                        v116 = 0;
                      v39 = (v116 + v115);
                    }
                    goto LABEL_619;
                  }
                }
                v110 = (*a1)("|", 1, a1);
                goto LABEL_225;
              case 1uLL:
                v9 = a1;
                v192 = (uint64_t)a1;
                v194 = v24;
                goto LABEL_613;
              case 2uLL:
                v9 = a1;
                v192 = (uint64_t)a1;
                if (v46)
                {
                  if (v46 > 0x10)
                  {
                    v15 = sub_21A6996C0((uint64_t)a1, (uint64_t)"\n", a3, a4, a5, a6, a7, a8, (uint64_t)usedBufLen);
                    if ((v15 & 0x80000000) != 0)
                      return v15;
                    v194 = DWORD2(v289);
                    v192 = (uint64_t)a1;
                  }
                  else
                  {
                    v194 = 0;
                  }
LABEL_613:
                  v252 = sub_21A699244(v192, v194, (uint64_t)v44, v46, v47, a6, a7, a8);
                }
                else
                {
                  v193 = "(0 bytes)\n";
LABEL_600:
                  v252 = sub_21A6996C0(v192, (uint64_t)v193, a3, a4, a5, a6, a7, a8, (uint64_t)usedBufLen);
                }
                v39 = v252;
                goto LABEL_615;
              case 3uLL:
                if (v46 >= v47)
                  v195 = v47;
                else
                  v195 = v46;
                v9 = a1;
                if (v195 < 1)
                {
                  v39 = 0;
                  goto LABEL_615;
                }
                v196 = 0;
                v39 = 0;
                v197 = &v44[v195];
                do
                {
                  if (v196 == 64)
                  {
                    v198 = (*a1)(valuePtr, 64, a1);
                    if ((v198 & 0x80000000) != 0)
                    {
                      v39 = v198;
                      v10 = v283;
                      goto LABEL_616;
                    }
                    v196 = 0;
                    v39 = (v198 + v39);
                  }
                  v199 = &valuePtr[v196];
                  v200 = *(unsigned __int8 *)v44++;
                  *v199 = a0123456789abcd[(unint64_t)v200 >> 4];
                  v196 += 2;
                  v199[1] = a0123456789abcd[v200 & 0xF];
                }
                while (v44 < v197);
                v10 = v283;
                if (v196)
                {
                  v201 = (*a1)(valuePtr, v196, a1);
                  if (v201 >= 0)
                    v202 = v39;
                  else
                    v202 = 0;
                  v39 = (v202 + v201);
                }
                goto LABEL_616;
              default:
                v9 = a1;
                v192 = (uint64_t)a1;
                v193 = "<< BAD %%H PRECISION >>";
                goto LABEL_600;
            }
          case 'N':
            v288.tv_sec = 0;
            *(_QWORD *)&v288.tv_usec = 0;
            tv_sec = 0;
            gettimeofday(&v288, 0);
            tv_sec = v288.tv_sec;
            v49 = localtime(&tv_sec);
            strftime(valuePtr, 0x18uLL, "%Y-%m-%d %I:%M:%S", v49);
            strftime(v292, 8uLL, "%p", v49);
            p_str = &__str;
            v51 = sub_21A695CB4(&__str, 300, "%s.%06u %s");
            goto LABEL_149;
          case 'S':
            v52 = (unsigned __int8 **)v291;
            v291 += 2;
            v53 = *v52;
            v54 = v19 & 8;
            if (!v53)
            {
              LODWORD(v39) = 8;
              if ((v19 & 8) == 0 || v27)
                goto LABEL_151;
            }
            if (v18)
            {
              if ((v19 & 8) == 0)
              {
                v55 = 1;
                goto LABEL_391;
              }
              v77 = v27 >= 2;
              v27 -= 2;
              if (v77)
              {
                *(_QWORD *)&v290 = v27;
              }
              else
              {
                v18 = 0;
                v27 = 0;
                *(_QWORD *)&v290 = 0;
                BYTE8(v290) = 0;
              }
              v54 = 1;
            }
            else
            {
              v18 = 0;
            }
            v55 = v54 == 0;
            if (v54 && !v27)
            {
              v55 = 0;
              goto LABEL_398;
            }
LABEL_391:
            v176 = *v53;
            if (v176 == 255)
            {
              if (v53[1] == 254)
              {
                v17 = 2;
                goto LABEL_397;
              }
            }
            else if (v176 == 254 && v53[1] == 255)
            {
              v17 = 1;
LABEL_397:
              BYTE3(v289) = v17;
              --v27;
              v53 += 2;
              *(_QWORD *)&v290 = v27;
              goto LABEL_399;
            }
LABEL_398:
            if ((v17 - 1) >= 2)
            {
              if (v17)
              {
                LODWORD(v39) = sub_21A695CB4(&__str, 300, "<< ERROR: %%S with too many #'s (%d) >>", v17);
                v18 = BYTE8(v290);
                goto LABEL_432;
              }
              v183 = (int)v27 > 0 || v55;
              if (v183 == 1)
              {
                v39 = 0;
                v184 = (int)v27;
                v185 = 300;
                v9 = a1;
                do
                {
                  v186 = *(unsigned __int16 *)&v53[2 * v39];
                  if (*(_WORD *)&v53[2 * v39])
                    v187 = v185 < 1;
                  else
                    v187 = 1;
                  if (v187)
                    break;
                  if ((v186 - 32) >= 0x5F)
                    LOBYTE(v186) = 94;
                  v294[v39++ - 1] = v186;
                  v188 = v39 < v184 || v55;
                  --v185;
                }
                while (v188);
LABEL_433:
                if (v18 == 1)
                {
                  v189 = 10023;
                }
                else
                {
                  if (v18 != 2)
                  {
LABEL_438:
                    p_str = &__str;
                    goto LABEL_653;
                  }
                  v189 = 8738;
                }
                *(_WORD *)((char *)&v290 + 9) = v189;
                goto LABEL_438;
              }
LABEL_430:
              LODWORD(v39) = 0;
LABEL_432:
              v9 = a1;
              goto LABEL_433;
            }
LABEL_399:
            if (v55 || (int)v27 >= 1)
            {
              v39 = 0;
              v177 = (int)v27;
              v178 = 300;
              v179 = 2 - v17;
              v9 = a1;
              do
              {
                if (*(_WORD *)&v53[2 * v39])
                  v180 = v178 < 1;
                else
                  v180 = 1;
                if (v180)
                  break;
                v181 = v53[v179];
                if ((v181 - 32) >= 0x5F)
                  LOBYTE(v181) = 94;
                v294[v39++ - 1] = v181;
                v182 = v39 < v177 || v55;
                --v178;
                v179 += 2;
              }
              while (v182);
              goto LABEL_433;
            }
            goto LABEL_430;
          case 'U':
            v56 = (unsigned __int8 **)v291;
            v291 += 2;
            v57 = *v56;
            if (!v57)
              goto LABEL_150;
            v9 = a1;
            if (v17)
              v58 = *v57;
            else
              v58 = v57[3];
            p_str = &__str;
            v152 = sub_21A695CB4(&__str, 300, "%02x%02x%02x%02x-%02x%02x-%02x%02x-%02x%02x-%02x%02x%02x%02x%02x%02x", v58);
            goto LABEL_333;
          case 'V':
            v59 = v291;
            v291 += 2;
            v60 = *(_QWORD *)v59;
            v291 = v59 + 4;
            LODWORD(v39) = 8;
            if (!v60)
              goto LABEL_151;
            v61 = (_QWORD *)*((_QWORD *)v59 + 1);
            v9 = a1;
            if (v61)
            {
              v62 = sub_21A695DBC(a1, v60, *v61);
              goto LABEL_654;
            }
            p_str = "<<NULL>>";
            goto LABEL_653;
          case 'X':
            goto LABEL_110;
          case 'a':
            v63 = (unsigned __int8 **)v291;
            v291 += 2;
            v64 = *v63;
            if (!*v63)
            {
LABEL_150:
              LODWORD(v39) = 8;
              goto LABEL_151;
            }
            if (v17 != 2)
            {
              if (v17 != 1)
              {
                *((_QWORD *)&v156 + 1) = v27;
                *(_QWORD *)&v156 = v27 - 4;
                switch((unint64_t)(v156 >> 1))
                {
                  case 0uLL:
                    goto LABEL_342;
                  case 1uLL:
                    p_str = &__str;
                    v51 = sub_21A695CB4(&__str, 300, "%02X:%02X:%02X:%02X:%02X:%02X", *v64);
                    goto LABEL_149;
                  case 2uLL:
                    p_str = &__str;
                    v51 = sub_21A695CB4(&__str, 300, "%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X", *v64);
                    goto LABEL_149;
                  case 6uLL:
                    p_str = &__str;
                    sub_21A69A370(v64, 0, 0, &__str);
                    LODWORD(v39) = strlen(&__str);
                    break;
                  default:
                    goto LABEL_593;
                }
                goto LABEL_264;
              }
              if (v27 == 4)
              {
LABEL_342:
                p_str = &__str;
                v51 = sub_21A695CB4(&__str, 300, "%u.%u.%u.%u");
              }
              else
              {
LABEL_593:
                p_str = &__str;
                v51 = sub_21A695CB4(&__str, 300, "%s");
              }
              goto LABEL_149;
            }
            v155 = v64[1];
            if (v155 > 0x11)
            {
              v9 = a1;
              if (v155 == 18)
              {
                v251 = &v64[v64[5] + 8];
                p_str = &__str;
                if (v64[6] == 6)
                  v152 = sub_21A695CB4(&__str, 300, "%02X:%02X:%02X:%02X:%02X:%02X", *v251);
                else
                  v152 = sub_21A695CB4(&__str, 300, "<< AF_LINK %H >>", v251);
                goto LABEL_333;
              }
              if (v155 == 30)
              {
                p_str = &__str;
                sub_21A69A370(v64 + 8, *((_DWORD *)v64 + 6), bswap32(*((unsigned __int16 *)v64 + 1)) >> 16, &__str);
                goto LABEL_451;
              }
            }
            else
            {
              v9 = a1;
              if (!v64[1])
              {
                p_str = &__str;
                v152 = sub_21A695CB4(&__str, 300, "<< AF_UNSPEC >>", usedBufLen);
LABEL_333:
                LODWORD(v39) = v152;
                goto LABEL_653;
              }
              if (v155 == 2)
              {
                p_str = &__str;
                sub_21A69A24C(bswap32(*((_DWORD *)v64 + 1)), bswap32(*((unsigned __int16 *)v64 + 1)) >> 16, &__str);
LABEL_451:
                LODWORD(v39) = strlen(&__str);
                goto LABEL_653;
              }
            }
            p_str = &__str;
            v152 = sub_21A695CB4(&__str, 300, "<< ERROR: %%##a used with unknown family: %d >>");
            goto LABEL_333;
          case 'b':
            v35 = 2;
            v34 = 1;
            goto LABEL_111;
          case 'c':
            v65 = v291;
            v291 += 2;
            v66 = *v65;
            if (!v18)
            {
              __str = v66;
              goto LABEL_262;
            }
            __str = 39;
            if (v66 - 32 >= 0x5F)
              v67 = 94;
            else
              v67 = v66;
            v294[0] = v67;
            v294[1] = 39;
            LODWORD(v39) = 3;
            goto LABEL_263;
          case 'd':
          case 'i':
            if (v30 == 1 || v30 == 2)
            {
              v37 = (unint64_t *)v291;
              v291 += 2;
              v38 = *v37;
            }
            else
            {
              v98 = v291;
              v291 += 2;
              v38 = (int)*v98;
            }
            if (v29 == 2)
            {
              v38 = (char)v38;
              if (((char)v38 & 0x8000000000000000) == 0)
                goto LABEL_157;
            }
            else
            {
              if (v29 == 1)
                v38 = (__int16)v38;
              if ((v38 & 0x8000000000000000) == 0)
              {
LABEL_157:
                v35 = 10;
                if ((v19 & 2) == 0)
                  goto LABEL_162;
                v16 = 43;
LABEL_161:
                BYTE4(v289) = v16;
LABEL_162:
                v36 = "0123456789ABCDEF";
LABEL_163:
                if ((v19 & 8) != 0)
                  goto LABEL_176;
                if ((v19 & 4) != 0)
                {
                  v99 = 2 * (v35 != 10);
                  if (v35 == 8)
                    v99 = 1;
                  if (!v17)
                    v99 = 0;
                  if (v16)
                    ++v99;
                  v77 = v24 >= v99;
                  v100 = v24 - v99;
                  if (v77)
                    v27 = v100;
                  else
                    v27 = 0;
                  *(_QWORD *)&v290 = v27;
                }
                if (v27)
                {
LABEL_176:
                  if (v27 < 0x12C)
                    goto LABEL_180;
                  v27 = 299;
                }
                else
                {
                  v27 = 1;
                }
                *(_QWORD *)&v290 = v27;
LABEL_180:
                if (v18)
                {
                  v101 = 0;
                  v102 = -1;
                  v103 = 1;
                  for (j = valuePtr; ; j = p_str)
                  {
                    if (HIDWORD(v38))
                    {
                      v105 = v38 / v35;
                      *(j - 1) = v36[v38 % v35];
                      p_str = j - 1;
                      LODWORD(v39) = v101 + 1;
                    }
                    else
                    {
                      v105 = v38 / v35;
                      *(j - 1) = v36[v38 % v35];
                      p_str = j - 1;
                      LODWORD(v39) = v101 + 1;
                      if (v35 > v38)
                      {
                        LODWORD(v27) = v290;
                        goto LABEL_201;
                      }
                    }
                    v38 = v105;
                    if (BYTE8(v290) && !(v102 + 3 * (v103 / 3)))
                    {
                      *(j - 2) = 44;
                      LODWORD(v39) = v101 + 2;
                      p_str = j - 2;
                    }
                    --v102;
                    ++v103;
                    v101 = v39;
                  }
                }
                if (v38)
                {
                  v106 = 0;
                  do
                  {
                    if (HIDWORD(v38))
                      v107 = v38 % v35;
                    else
                      v107 = v38 % v35;
                    if (HIDWORD(v38))
                      v38 /= v35;
                    else
                      v38 = v38 / v35;
                    v294[v106-- + 298] = v36[v107];
                  }
                  while (v38);
                  p_str = &valuePtr[v106];
                  LODWORD(v39) = -(int)v106;
                }
                else
                {
                  LODWORD(v39) = 0;
                  p_str = valuePtr;
                }
LABEL_201:
                if ((int)v39 >= (int)v27)
                {
                  v9 = a1;
                }
                else
                {
                  v9 = a1;
                  do
                  {
                    *--p_str = 48;
                    LODWORD(v39) = v39 + 1;
                  }
                  while ((int)v39 < (int)v290);
                }
                if (!BYTE3(v289))
                  goto LABEL_212;
                if (v35 == 8)
                {
                  v108 = 1;
                  v109 = -1;
                }
                else
                {
                  if (v35 == 10)
                    goto LABEL_212;
                  *(p_str - 1) = (char)v22;
                  v108 = 2;
                  v109 = -2;
                }
                p_str += v109;
                *p_str = 48;
                LODWORD(v39) = v108 + v39;
LABEL_212:
                if (BYTE4(v289))
                {
                  *--p_str = BYTE4(v289);
                  LODWORD(v39) = v39 + 1;
                }
                goto LABEL_653;
              }
            }
            v38 = -(uint64_t)v38;
            v35 = 10;
            v16 = 45;
            goto LABEL_161;
          case 'f':
            v291 += 2;
            if ((v19 & 8) != 0)
              v68 = snprintf(&__str, 0x12CuLL, "%*.*f");
            else
              v68 = snprintf(&__str, 0x12CuLL, "%*f");
            v39 = v68;
            v9 = a1;
            if ((v68 & 0x80000000) != 0)
              return v39;
            goto LABEL_438;
          case 'm':
            v69 = v291;
            v291 += 2;
            v70 = *v69;
            if (v17)
              v71 = sub_21A695CB4(&__str, 300, "%lld/0x%llX ", (int)v70, (int)v70);
            else
              v71 = 0;
            v9 = a1;
            sub_21A695B94(v70, &v294[v71 - 1], 300 - v71);
            v121 = 0;
            do
              LODWORD(v39) = v121;
            while (v294[v121++ - 1]);
            p_str = &__str;
            goto LABEL_653;
          case 'n':
            v72 = v291;
            v291 += 2;
            v73 = *(_BYTE **)v72;
            if (v29 == 2)
            {
              *v73 = v10;
              goto LABEL_551;
            }
            v9 = a1;
            if (v29 == 1)
            {
              *(_WORD *)v73 = v10;
            }
            else if (v30 == 2 || v30 == 1)
            {
              *(_QWORD *)v73 = v10;
            }
            else
            {
              *(_DWORD *)v73 = v10;
            }
            goto LABEL_656;
          case 'o':
            v34 = 0;
            v35 = 8;
            goto LABEL_111;
          case 'p':
            v16 = 0;
            v22 = v291;
            v291 += 2;
            v38 = *(_QWORD *)v22;
            v27 = 16;
            *(_QWORD *)&v290 = 16;
            LOBYTE(v19) = v19 | 8;
            LOBYTE(v289) = v19;
            v17 = 1;
            BYTE3(v289) = 1;
            LOBYTE(v22) = 120;
            v35 = 16;
            goto LABEL_161;
          case 's':
            v74 = (char **)v291;
            v291 += 2;
            p_str = *v74;
            if (*v74)
            {
              v75 = v19 & 8;
              v76 = v75 == 0;
              if (v18 && v75)
              {
                v77 = v27 >= 2;
                v27 -= 2;
                if (v77)
                {
                  v76 = 0;
                  *(_QWORD *)&v290 = v27;
                  goto LABEL_488;
                }
                goto LABEL_272;
              }
            }
            else
            {
              LODWORD(v39) = 8;
              if ((v19 & 8) == 0 || v27)
              {
LABEL_151:
                p_str = "<<NULL>>";
                goto LABEL_264;
              }
              if (v18)
              {
LABEL_272:
                v76 = 0;
                LODWORD(v27) = 0;
                *(_QWORD *)&v290 = 0;
                BYTE8(v290) = 0;
                goto LABEL_488;
              }
              v76 = 0;
              LODWORD(v27) = 0;
            }
LABEL_488:
            switch(v17)
            {
              case 0:
                if (v76)
                {
                  v212 = 0;
                  v9 = a1;
                  do
                    LODWORD(v39) = v212;
                  while (p_str[v212++]);
                }
                else
                {
                  if ((int)v27 < 1)
                    goto LABEL_638;
                  v222 = 0;
                  while (p_str[v222])
                  {
                    if (v27 == ++v222)
                      goto LABEL_626;
                  }
                  LODWORD(v27) = v222;
LABEL_626:
                  if (!(_DWORD)v27)
                  {
LABEL_638:
                    LODWORD(v39) = 0;
                    goto LABEL_639;
                  }
                  v257 = 0;
                  v258 = v27 - 1;
                  while (1)
                  {
                    v259 = p_str[v258];
                    v260 = v27 + v257;
                    if ((v259 & 0x80) == 0)
                      break;
                    --v257;
                    if (v260 >= 2)
                    {
                      --v258;
                      if ((v259 & 0xC0) == 0x80)
                        continue;
                    }
                    v260 = v27 + v257;
                    break;
                  }
                  v261 = -v257;
                  if ((((255 << (8 - v261)) | (1 << (7 - v261))) & v259) == (255 << (8 - v261)))
                    v262 = v261;
                  else
                    v262 = 0;
                  v263 = v262 + v260;
                  if ((v261 - 2) <= 4)
                    LODWORD(v39) = v263;
                  else
                    LODWORD(v39) = v260;
LABEL_639:
                  v9 = a1;
                }
                goto LABEL_640;
              case 1:
                v214 = *p_str++;
                LODWORD(v39) = v214;
                goto LABEL_639;
              case 2:
                v215 = v10;
                v216 = *p_str;
                if (*p_str)
                {
                  v217 = 0;
                  v218 = &__str;
                  v9 = a1;
                }
                else
                {
                  __str = 46;
                  v216 = *p_str;
                  v218 = v294;
                  v9 = a1;
                  if (!*p_str)
                    goto LABEL_556;
                  v218 = v294;
                  v217 = 1;
                }
                while (2)
                {
                  if (v216 >= 0x40)
                  {
                    v236 = sub_21A695CB4(v218, 300 - v217, "<<INVALID DNS LABEL LENGTH %u>>");
                  }
                  else
                  {
                    v229 = 300 - v217;
                    if (v217 + v216 < 254)
                    {
                      v217 += (int)sub_21A695CB4(v218, v229, "%#s.", p_str);
                      v230 = &p_str[*p_str];
                      v231 = v230[1];
                      p_str = v230 + 1;
                      v216 = v231;
                      v218 = &v294[v217 - 1];
                      if (!v231)
                        goto LABEL_556;
                      continue;
                    }
                    v236 = sub_21A695CB4(v218, v229, "<<DNS NAME TOO LONG>>");
                  }
                  break;
                }
                LODWORD(v218) = (_DWORD)v218 + v236;
LABEL_556:
                p_str = &__str;
                LODWORD(v39) = (_DWORD)v218 - &__str;
                v10 = v215;
                goto LABEL_640;
              case 3:
                v219 = p_str + 1;
                v220 = p_str;
                while (2)
                {
                  v221 = *(v219 - 1);
                  if (v221 == 32)
                  {
                    v220 = v219;
                    goto LABEL_503;
                  }
                  if (!*(v219 - 1))
                  {
                    v223 = p_str;
                    v9 = a1;
                    goto LABEL_512;
                  }
                  if (v221 != 58)
                  {
LABEL_503:
                    ++v219;
                    continue;
                  }
                  break;
                }
                v223 = p_str;
                v9 = a1;
                if (*v219 == 58)
                {
                  p_str = v219 + 1;
                  v223 = v220;
                  goto LABEL_519;
                }
                while (1)
                {
LABEL_512:
                  v224 = *p_str;
                  if (v224 == 32)
                  {
                    v223 = p_str + 1;
                    goto LABEL_517;
                  }
                  if (!*p_str || v224 == 40)
                    break;
LABEL_517:
                  ++p_str;
                }
LABEL_519:
                while (1)
                {
                  v225 = *p_str;
                  if (!*p_str || v225 == 32)
                    break;
                  if (v225 == 40)
                  {
                    if (p_str[1] == 41)
                    {
                      v226 = p_str[2];
                      v227 = 3;
                      if (v226 != 39)
                        v227 = 0;
                      v228 = &p_str[v227];
                      if (v226 == 40)
                        p_str += 2;
                      else
                        p_str = v228;
                    }
                    break;
                  }
                  ++p_str;
                }
                if (v223 < p_str && *v223 == 42)
                  ++v223;
                LODWORD(v39) = (_DWORD)p_str - (_DWORD)v223;
                p_str = v223;
LABEL_640:
                if ((v289 & 8) != 0)
                {
                  v264 = v290;
                  if ((int)v39 > (int)v290)
                  {
                    if ((int)v290 >= 1)
                    {
                      while ((p_str[v264] & 0xC0) == 0x80)
                      {
                        v265 = __OFSUB__(v264--, 1);
                        if ((v264 < 0) ^ v265 | (v264 == 0))
                        {
                          LODWORD(v39) = 0;
                          goto LABEL_648;
                        }
                      }
                    }
                    LODWORD(v39) = v264;
                  }
                }
LABEL_648:
                if (BYTE8(v290) == 2)
                {
                  v266 = 8738;
LABEL_652:
                  *(_WORD *)((char *)&v290 + 9) = v266;
                }
                else if (BYTE8(v290) == 1)
                {
                  v266 = 10023;
                  goto LABEL_652;
                }
LABEL_653:
                v62 = sub_21A6996E8(v9, (uint64_t)&v289, p_str, (int)v39);
LABEL_654:
                v39 = v62;
                if ((v62 & 0x80000000) == 0)
                {
                  v10 += v62;
                  goto LABEL_656;
                }
                return v39;
              default:
                p_str = &__str;
                LODWORD(v39) = sub_21A695CB4(&__str, 300, "<< ERROR: %%s with too many #'s (%d) >>", v17);
                goto LABEL_639;
            }
          case 'u':
            goto LABEL_111;
          case 'v':
            v284 = v10;
            v78 = v291;
            v291 += 2;
            v79 = *v78;
            v80 = HIWORD(*v78) & 0xF;
            v81 = sub_21A695CB4(&__str, 300, "%u", HIBYTE(*v78));
            v82 = &v294[v81 - 1];
            v83 = sub_21A695CB4(v82, 300 - v81, ".%u", (v79 >> 20) & 0xF);
            v84 = &v82[v83];
            if (v80)
              v84 += (int)sub_21A695CB4(&v82[v83], valuePtr - v84, ".%u", HIWORD(v79) & 0xF);
            v9 = a1;
            HIDWORD(v85) = v79 >> 8;
            LODWORD(v85) = ((v79 >> 8) & 0xE0) - 32;
            switch((v85 >> 5))
            {
              case 0u:
                v86 = sub_21A695CB4(v84, valuePtr - v84, "d%u");
                goto LABEL_348;
              case 1u:
                v86 = sub_21A695CB4(v84, valuePtr - v84, "a%u");
                goto LABEL_348;
              case 2u:
                v86 = sub_21A695CB4(v84, valuePtr - v84, "b%u");
                goto LABEL_348;
              case 3u:
                if (!(_BYTE)v79)
                  goto LABEL_349;
                v86 = sub_21A695CB4(v84, valuePtr - v84, "f%u");
LABEL_348:
                LODWORD(v84) = (_DWORD)v84 + v86;
LABEL_349:
                p_str = &__str;
                LODWORD(v39) = (_DWORD)v84 - &__str;
                v10 = v284;
                break;
              default:
                v86 = sub_21A695CB4(v84, valuePtr - v84, "<< ERROR: invalid NumVersion stage: 0x%02X >>");
                goto LABEL_348;
            }
            goto LABEL_653;
          case 'x':
            v36 = "0123456789abcdef";
LABEL_110:
            v34 = 0;
            v35 = 16;
LABEL_111:
            if (v30 == 2 || v30 == 1)
            {
              v87 = (unint64_t *)v291;
              v291 += 2;
              v38 = *v87;
            }
            else
            {
              v88 = v291;
              v291 += 2;
              v38 = *v88;
            }
            if (v29 == 2)
            {
              v38 = v38;
            }
            else if (v29 == 1)
            {
              v38 = (unsigned __int16)v38;
            }
            BYTE4(v289) = 0;
            if (v17 <= 1)
              v34 = 0;
            if (v34 != 1)
            {
              v16 = 0;
              goto LABEL_163;
            }
            if ((v19 & 8) == 0)
            {
              if (v29 == 1)
              {
                v27 = 16;
              }
              else if (v29 == 2)
              {
                v27 = 8;
              }
              else if (((v30 - 1) & 0xFE) != 0)
              {
                v27 = 32;
              }
              else
              {
                v27 = 64;
              }
              goto LABEL_243;
            }
            if (v27 >= 0x41)
            {
              p_str = &__str;
              v89 = sub_21A695CB4(&__str, 300, "ERROR: << precision must be 0-%d >>");
              goto LABEL_136;
            }
            if (!v27)
            {
              v27 = 1;
LABEL_243:
              *(_QWORD *)&v290 = v27;
            }
            v117 = (v27 - 1);
            if (v17 == 2)
            {
              LODWORD(v39) = 0;
              v9 = a1;
              do
              {
                if (((v38 >> v117) & 1) != 0)
                {
                  v118 = "";
                  if ((int)v39 > 0)
                    v118 = " ";
                  LODWORD(v39) = sub_21A695CB4(&v294[(int)v39 - 1], 300 - (int)v39, "%s%d", v118, v117) + v39;
                }
                v151 = v117-- <= 0;
              }
              while (!v151);
              p_str = &__str;
              goto LABEL_653;
            }
            v119 = 0;
            LODWORD(v39) = 0;
            do
            {
              if (((v38 >> v117) & 1) != 0)
              {
                v120 = "";
                if ((int)v39 > 0)
                  v120 = " ";
                LODWORD(v39) = sub_21A695CB4(&v294[(int)v39 - 1], 300 - (int)v39, "%s%d", v120, v119) + v39;
              }
              ++v119;
              LOBYTE(v117) = v117 - 1;
            }
            while (v27 != v119);
            p_str = &__str;
            goto LABEL_260;
          case '{':
            v90 = 0;
            v91 = v31 + 1;
            v92 = 123;
            do
            {
              if (v92 == 125)
                break;
              v92 = (char)v31[v90++ + 2];
            }
            while (v92);
            v93 = sub_21A6988A0(v31 + 1, v90, "ie");
            v31 += v90 + 1;
            if (v93)
            {
              if (!sub_21A6988A0(v91, v90, "dur"))
              {
                if (BYTE2(v289) == 2)
                {
                  v203 = v291;
                  v291 += 2;
                  v154 = *(_QWORD *)v203;
                  v9 = a1;
                }
                else
                {
                  v9 = a1;
                  v153 = v291;
                  v291 += 2;
                  if (BYTE2(v289) == 1)
                    v154 = *(_QWORD *)v153;
                  else
                    v154 = (int)*v153;
                }
                if (BYTE1(v289) == 1)
                  v154 = (__int16)v154;
                if (BYTE1(v289) == 2)
                  v204 = (char)v154;
                else
                  v204 = v154;
                if (v204 >> 7 >= 0x2A3)
                {
                  v206 = 0;
                  v207 = 1;
                  v208 = v204 / 0x15180;
                  do
                  {
                    v209 = v206;
                    v210 = v207;
                    valuePtr[v206++] = (v208 % 0xA) | 0x30;
                    ++v207;
                    v151 = v208 > 9;
                    v208 /= 0xAuLL;
                  }
                  while (v151);
                  if (&valuePtr[v206] <= valuePtr)
                  {
                    v211 = &__str;
                  }
                  else
                  {
                    v211 = &__str;
                    do
                    {
                      *v211++ = v294[v210-- + 298];
                      --v209;
                    }
                    while (v209 != -1);
                  }
                  *v211 = 100;
                  v205 = v211 + 1;
                }
                else
                {
                  v205 = &__str;
                }
                v232 = v204 % 0x15180;
                if (v232 >= 0xE10)
                {
                  if (v205 == &__str)
                  {
                    v233 = &__str;
                  }
                  else
                  {
                    *v205 = 32;
                    v233 = v205 + 1;
                  }
                  v239 = valuePtr;
                  v240 = v232 / 0xE10;
                  do
                  {
                    *v239++ = (v240 % 0xA) | 0x30;
                    v151 = v240 > 9;
                    v240 /= 0xAu;
                  }
                  while (v151);
                  while (v239 > valuePtr)
                  {
                    v241 = *--v239;
                    *v233++ = v241;
                  }
                  *v233 = 104;
                  v205 = v233 + 1;
                }
                v242 = v232 % 0xE10;
                if (v242 >= 0x3C)
                {
                  if (v205 == &__str)
                  {
                    v243 = &__str;
                  }
                  else
                  {
                    *v205 = 32;
                    v243 = v205 + 1;
                  }
                  v244 = valuePtr;
                  v245 = (unsigned __int16)v242 / 0x3Cu;
                  do
                  {
                    *v244++ = (v245 % 0xA) | 0x30;
                    v151 = v245 > 9;
                    v245 /= 0xAu;
                  }
                  while (v151);
                  while (v244 > valuePtr)
                  {
                    v246 = *--v244;
                    *v243++ = v246;
                  }
                  *v243 = 109;
                  v205 = v243 + 1;
                }
                v247 = (unsigned __int16)v242 % 0x3Cu;
                if ((unsigned __int16)v242 % 0x3Cu || v205 == &__str)
                {
                  if (v205 == &__str)
                  {
                    v248 = &__str;
                  }
                  else
                  {
                    *v205 = 32;
                    v248 = v205 + 1;
                  }
                  v249 = valuePtr;
                  do
                  {
                    *v249++ = (v247 % 0xA) | 0x30;
                    v151 = v247 > 9;
                    v247 /= 0xAu;
                  }
                  while (v151);
                  while (v249 > valuePtr)
                  {
                    v250 = *--v249;
                    *v248++ = v250;
                  }
                  *v248 = 115;
                  v205 = v248 + 1;
                }
                *v205 = 0;
                p_str = &__str;
                LODWORD(v39) = (_DWORD)v205 - &__str;
                goto LABEL_653;
              }
              if (!sub_21A6988A0(v91, v90, "txt"))
              {
                v168 = (unsigned __int8 **)v291;
                v291 += 2;
                v169 = *v168;
                v291 = (unsigned int *)(v168 + 2);
                v170 = (uint64_t)v168[1];
                v171 = (4 * DWORD2(v289));
                v172 = &v169[v170];
                if ((unint64_t)v170 >= 6
                  && (*(_DWORD *)(v169 + 1) == 1095590263 ? (v173 = v169[5] == 61) : (v173 = 0), v173))
                {
                  if (&v169[*v169 + 1] == v172)
                  {
                    v283 = v10;
                    if (v170 < 2)
                    {
                      v39 = 0;
                      goto LABEL_383;
                    }
                    v270 = v169 + 1;
                    LODWORD(v39) = 0;
                    while (1)
                    {
                      v271 = valuePtr;
                      v272 = v270;
                      do
                      {
                        v274 = *v270++;
                        v273 = v274;
                        if (v274 == 92)
                        {
                          if (v270 >= v172)
                          {
                            v9 = a1;
                            v276 = sub_21A6996C0((uint64_t)a1, (uint64_t)"%*s### bad TXT escape: %.*s\n", a3, a4, a5, a6, a7, a8, v171);
                            if (v276 >= 0)
                              v277 = v39;
                            else
                              v277 = 0;
                            v39 = (v277 + v276);
                            v10 = v283;
                            goto LABEL_620;
                          }
                          v270 = v272 + 2;
                          LOBYTE(v273) = v272[1];
                        }
                        else if (v273 == 44)
                        {
                          break;
                        }
                        *v271++ = v273;
                        v272 = v270;
                      }
                      while (v270 < v172);
                      v275 = sub_21A6996C0((uint64_t)a1, (uint64_t)"%*s%.*s\n", a3, a4, a5, a6, a7, a8, v171);
                      if ((v275 & 0x80000000) != 0)
                        break;
                      v39 = (v275 + v39);
                      if (v270 >= v172)
                      {
LABEL_383:
                        v10 = v283;
                        if (v170 && *v169)
                        {
                          v9 = a1;
                        }
                        else
                        {
                          v9 = a1;
                          v237 = sub_21A6996C0((uint64_t)a1, (uint64_t)"\n", a3, a4, a5, a6, a7, a8, (uint64_t)usedBufLen);
                          if (v237 >= 0)
                            v238 = v39;
                          else
                            v238 = 0;
                          v39 = (v238 + v237);
                        }
                        goto LABEL_616;
                      }
                    }
                    v39 = v275;
                    v10 = v283;
                    v9 = a1;
                  }
                  else
                  {
                    v9 = a1;
                    v39 = sub_21A6996C0((uint64_t)a1, (uint64_t)"%*s### bad TXT record length byte (%zu, %zu expected)\n", a3, a4, a5, a6, a7, a8, (4 * DWORD2(v289)));
                  }
LABEL_620:
                  if ((v39 & 0x80000000) != 0)
                    return v39;
                }
                else
                {
                  v283 = v10;
                  v39 = 0;
                  if (v170 < 1)
                    goto LABEL_383;
                  v174 = v169;
                  while (1)
                  {
                    v175 = (unint64_t)&v174[*v174 + 1];
                    if (v175 > (unint64_t)v172)
                      break;
                    v15 = sub_21A6996C0((uint64_t)a1, (uint64_t)"%*s%.*s\n", a3, a4, a5, a6, a7, a8, v171);
                    if ((v15 & 0x80000000) != 0)
                      return v15;
                    v39 = (v15 + v39);
                    v174 = (unsigned __int8 *)v175;
                    if (v175 >= (unint64_t)v172)
                      goto LABEL_383;
                  }
                  v9 = a1;
                  v267 = sub_21A6996C0((uint64_t)a1, (uint64_t)"%*s### TXT record length byte too big (%zu, %zu max)\n", a3, a4, a5, a6, a7, a8, v171);
                  if (v267 >= 0)
                    v268 = v39;
                  else
                    v268 = 0;
                  v39 = (v268 + v267);
LABEL_615:
                  v10 = v283;
LABEL_616:
                  if ((v39 & 0x80000000) != 0)
                    return v39;
                }
                v10 += v39;
                goto LABEL_656;
              }
              p_str = &__str;
              v89 = sub_21A695CB4(&__str, 300, "<<UNKNOWN PRINTF EXTENSION '%.*s'>>");
LABEL_136:
              LODWORD(v39) = v89;
LABEL_260:
              v9 = a1;
              goto LABEL_653;
            }
            v123 = (unsigned __int8 **)v291;
            v291 += 2;
            v124 = *v123;
            v291 = (unsigned int *)(v123 + 2);
            v125 = (uint64_t)v123[1];
            if (v125 < 1)
            {
              LODWORD(v39) = 0;
              goto LABEL_550;
            }
            v285 = v10;
            LODWORD(v39) = 0;
            v126 = (4 * DWORD2(v289));
            v127 = &v124[v125];
            v128 = (uint64_t)a1;
            break;
          default:
            goto LABEL_148;
        }
        while (1)
        {
          if ((unint64_t)(v127 - v124) <= 1)
          {
            v234 = sub_21A6996C0(v128, (uint64_t)"### bad IE header:\n%2.1H\n", a3, a4, a5, a6, a7, a8, (uint64_t)v124);
            goto LABEL_545;
          }
          v129 = v124[1];
          v130 = &v124[v129 + 2];
          if (v130 > v127)
          {
            v234 = sub_21A6996C0(v128, (uint64_t)"### bad IE length:\n%2.1H\n", a3, a4, a5, a6, a7, a8, (uint64_t)v124);
            goto LABEL_545;
          }
          v131 = *v124;
          if (v131 <= 2)
            break;
          if (v131 == 3 || v131 == 50)
            goto LABEL_287;
          if (v131 != 221)
            goto LABEL_290;
          if (v129 <= 3)
          {
            v234 = sub_21A6996C0(v128, (uint64_t)"### bad vendor IE:\n%2.1H\n", a3, a4, a5, a6, a7, a8, (uint64_t)v124);
            goto LABEL_545;
          }
          v132 = bswap32(*(_DWORD *)(v124 + 2));
          v133 = v129 - 4;
          if (v132 <= 1569282)
          {
            if (v132 != 234241)
            {
LABEL_306:
              usedBufLena = (CFIndex *)v126;
              v128 = (uint64_t)a1;
LABEL_288:
              v134 = v128;
              v135 = "%*s%3d %-*s %2.2H";
              goto LABEL_291;
            }
            if (v129 - 4 <= 2)
            {
              v234 = sub_21A6996C0((uint64_t)a1, (uint64_t)"### bad Apple General IE:\n%2.1H\n", a3, a4, a5, a6, a7, a8, (uint64_t)v124);
LABEL_545:
              if (v234 >= 0)
                v235 = v39;
              else
                v235 = 0;
              v39 = (v235 + v234);
LABEL_549:
              v10 = v285;
              if ((v39 & 0x80000000) != 0)
                return v39;
LABEL_550:
              v10 += v39;
LABEL_551:
              v9 = a1;
LABEL_656:
              a2 = (const char *)(v31 + 1);
              goto LABEL_2;
            }
            v128 = (uint64_t)a1;
            v15 = sub_21A6996C0((uint64_t)a1, (uint64_t)"%*s%3d %-*s product ID %d flags 0x%x\n", a3, a4, a5, a6, a7, a8, v126);
LABEL_292:
            if ((v15 & 0x80000000) != 0)
              return v15;
            v39 = (v15 + v39);
            goto LABEL_294;
          }
          if (v132 == 1569283)
          {
            v142 = v124 + 6;
            v281 = v126;
            v141 = sub_21A6996C0((uint64_t)a1, (uint64_t)"%*s%3d %-*s\n", a3, a4, a5, a6, a7, a8, v126);
            if ((v141 & 0x80000000) != 0)
              return v141;
            v15 = sub_21A69A7E4((uint64_t)a1, (uint64_t)&v289, v142, v133, v143, v144, v145, v146);
            if ((v15 & 0x80000000) != 0)
              return v15;
          }
          else
          {
            if (v132 != 5304836)
              goto LABEL_306;
            v136 = (unint64_t)(v124 + 6);
            v281 = v126;
            v141 = sub_21A6996C0((uint64_t)a1, (uint64_t)"%*s%3d %-*s\n", a3, a4, a5, a6, a7, a8, v126);
            if ((v141 & 0x80000000) != 0)
              return v141;
            v15 = sub_21A69A9D0((uint64_t)a1, (uint64_t)&v289, v136, v133, v137, v138, v139, v140);
            if ((v15 & 0x80000000) != 0)
              return v15;
          }
          v39 = (v141 + v39 + v15);
          v128 = (uint64_t)a1;
          v126 = v281;
LABEL_294:
          v124 = v130;
          if (v130 >= v127)
            goto LABEL_549;
        }
        if (*v124)
        {
          if (v131 == 1)
          {
LABEL_287:
            usedBufLena = (CFIndex *)v126;
            goto LABEL_288;
          }
LABEL_290:
          usedBufLena = (CFIndex *)v126;
          v134 = v128;
          v135 = "%*s%3d %-*s %2.2H\n";
LABEL_291:
          v15 = sub_21A6996C0(v134, (uint64_t)v135, a3, a4, a5, a6, a7, a8, (uint64_t)usedBufLena);
        }
        else
        {
          v15 = sub_21A6996C0(v128, (uint64_t)"%*s%3d %-*s '%.*s'\n", a3, a4, a5, a6, a7, a8, v126);
        }
        goto LABEL_292;
    }
  }
}

void sub_21A69841C(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;

  v2 = (void *)a1[1];
  if (v2)
    free(v2);
  v3 = (void *)a1[2];
  if (v3)
    free(v3);
  v4 = (void *)a1[3];
  if (v4)
    free(v4);
  free(a1);
}

void sub_21A698460(_QWORD *a1)
{
  void *v2;
  FILE *v3;
  void *v5;
  void *v6;

  if (*((_DWORD *)a1 + 8) == 2)
  {
    v2 = (void *)a1[5];
    if (v2)
    {
      free(v2);
      a1[5] = 0;
    }
    v3 = (FILE *)a1[6];
    if (v3)
    {
      if (v3 != (FILE *)*MEMORY[0x24BDAC8D8] && v3 != (FILE *)*MEMORY[0x24BDAC8E8])
        fclose(v3);
      a1[6] = 0;
    }
    v5 = (void *)a1[10];
    if (v5)
    {
      free(v5);
      a1[10] = 0;
    }
  }
  v6 = (void *)a1[2];
  if (v6)
    free(v6);
  free(a1);
}

uint64_t sub_21A6984EC(unsigned __int8 *a1)
{
  unsigned __int8 *v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 *v5;
  size_t v6;
  unsigned __int8 *v7;
  unsigned __int8 *i;
  int v9;
  unsigned __int8 *v10;
  uint64_t v11;
  uint64_t *v12;
  _QWORD *v13;
  _QWORD *v14;
  void *v15;
  void *v16;
  void *v17;
  _BYTE *v18;
  _BYTE *v19;
  uint64_t result;
  void *v21;
  void *v22;
  void *v23;

  if (a1)
  {
    v1 = a1;
    v2 = *a1;
    if (!*a1)
      return (uint64_t)sub_21A698920(0);
    while (2)
    {
      v3 = 0;
      if (v2)
      {
        while (v2 != 58)
        {
          v2 = v1[++v3];
          if (!v2)
            return 4294960554;
        }
        v4 = 0;
        v5 = &v1[v3];
        while (1)
        {
          if (!v5[v4 + 1])
            return 4294960554;
          if (v5[v4 + 1] == 61)
            break;
          ++v4;
        }
        v6 = 0;
        v7 = &v1[v3 + 2 + v4];
        for (i = v7; ; ++i)
        {
          v9 = *i;
          if (!*i || v9 == 44)
            break;
          ++v6;
        }
        if (v9 == 44)
          v10 = i + 1;
        else
          v10 = i;
        v11 = qword_2550F4CF0;
        if (qword_2550F4CF0)
        {
          while (1)
          {
            v12 = (uint64_t *)v11;
            if (!sub_21A6988A0(v1, v3, *(_BYTE **)(v11 + 8))
              && !sub_21A6988A0(&v1[v3 + 1], v4, (_BYTE *)v12[2]))
            {
              break;
            }
            v11 = *v12;
            if (!*v12)
              goto LABEL_24;
          }
          v18 = malloc_type_malloc(v6 + 1, 0x61B4FDF3uLL);
          if (v18)
          {
            v19 = v18;
            memcpy(v18, v7, v6);
            v19[v6] = 0;
            free((void *)v12[3]);
            v12[3] = (uint64_t)v19;
LABEL_29:
            v2 = *v10;
            v1 = v10;
            if (*v10)
              continue;
            return (uint64_t)sub_21A698920(0);
          }
        }
        else
        {
          v12 = &qword_2550F4CF0;
LABEL_24:
          v13 = malloc_type_calloc(1uLL, 0x20uLL, 0x30040E3C0B0CCuLL);
          if (v13)
          {
            v14 = v13;
            v15 = malloc_type_malloc(v3 + 1, 0xCC4A32C3uLL);
            v14[1] = v15;
            if (v15)
            {
              memcpy(v15, v1, v3);
              *(_BYTE *)(v14[1] + v3) = 0;
              v16 = malloc_type_malloc(v4 + 1, 0xAC5CD173uLL);
              v14[2] = v16;
              if (v16)
              {
                memcpy(v16, &v1[v3 + 1], v4);
                *(_BYTE *)(v14[2] + v4) = 0;
                v17 = malloc_type_malloc(v6 + 1, 0xC219957FuLL);
                v14[3] = v17;
                if (v17)
                {
                  memcpy(v17, &v1[v3 + 2 + v4], v6);
                  *(_BYTE *)(v14[3] + v6) = 0;
                  *v12 = (uint64_t)v14;
                  goto LABEL_29;
                }
              }
              v21 = (void *)v14[1];
              if (v21)
                free(v21);
            }
            v22 = (void *)v14[2];
            if (v22)
              free(v22);
            v23 = (void *)v14[3];
            if (v23)
              free(v23);
            free(v14);
          }
        }
        return 4294960568;
      }
      return 4294960554;
    }
  }
  else
  {
    while (1)
    {
      result = qword_2550F4CF0;
      if (!qword_2550F4CF0)
        break;
      qword_2550F4CF0 = *(_QWORD *)qword_2550F4CF0;
      sub_21A69841C((_QWORD *)result);
    }
  }
  return result;
}

BOOL sub_21A69876C(uint64_t a1, unsigned __int16 a2)
{
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  int v11;

  if (byte_2550F4DF0)
    return 0;
  pthread_mutex_lock(&stru_2550EEC08);
  if (*(_DWORD *)a1 == -1)
  {
    *(_DWORD *)a1 = *(_DWORD *)(a1 + 4);
    v5 = &qword_2550F4CE8;
    v6 = qword_2550F4CE8;
    if (qword_2550F4CE8)
    {
      if ((int)sub_21A6988A0(*(unsigned __int8 **)(qword_2550F4CE8 + 24), -1, *(_BYTE **)(a1 + 24)) <= 0)
      {
        do
        {
          v7 = v6;
          v6 = *(_QWORD *)(v6 + 48);
          if (!v6)
          {
            v8 = 0;
            v5 = (uint64_t *)(v7 + 48);
            goto LABEL_13;
          }
        }
        while ((int)sub_21A6988A0(*(unsigned __int8 **)(v6 + 24), -1, *(_BYTE **)(a1 + 24)) < 1);
        v5 = (uint64_t *)(v7 + 48);
      }
      else
      {
        v5 = &qword_2550F4CE8;
      }
      v8 = *v5;
    }
    else
    {
      v8 = 0;
    }
LABEL_13:
    *(_QWORD *)(a1 + 48) = v8;
    *v5 = a1;
    v9 = *(unsigned __int8 **)(a1 + 8);
    if (v9)
      sub_21A6984EC(v9);
    sub_21A698920(a1);
    v10 = a1 + 56;
    if (!*(_QWORD *)(a1 + 56))
    {
      sub_21A698CD0("console", (uint64_t **)(a1 + 56));
      if (*(_QWORD *)v10)
        ++*(_DWORD *)(*(_QWORD *)v10 + 8);
    }
  }
  v11 = *(_DWORD *)a1;
  pthread_mutex_unlock(&stru_2550EEC08);
  return v11 <= a2;
}

uint64_t sub_21A6988A0(unsigned __int8 *a1, uint64_t a2, _BYTE *a3)
{
  uint64_t v4;
  __darwin_ct_rune_t v6;
  uint64_t result;

  if (a2)
  {
    v4 = a2;
    while (1)
    {
      --v4;
      v6 = __tolower(*a1);
      result = __tolower(*a3);
      if (v6 < (int)result)
        return 0xFFFFFFFFLL;
      if (v6 > (int)result)
        return 1;
      if (!(_DWORD)result)
        return result;
      ++a1;
      ++a3;
      if (!v4)
        goto LABEL_8;
    }
  }
  else
  {
LABEL_8:
    if (*a3)
      return 0xFFFFFFFFLL;
    else
      return 0;
  }
}

uint64_t *sub_21A698920(uint64_t a1)
{
  uint64_t v1;
  int v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  const char *v7;
  int v8;
  const char *v9;
  unsigned __int8 *v10;
  _BOOL4 v11;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  size_t v14;
  unsigned __int8 *v15;
  uint64_t v16;
  int v17;
  uint64_t i;
  char *v19;
  char *v20;
  uint64_t j;
  uint64_t k;
  uint64_t *result;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t *v28;

  v1 = qword_2550F4CF0;
  if (qword_2550F4CF0)
  {
    do
    {
      if (!strcmp(*(const char **)(v1 + 16), "level"))
      {
        v3 = sub_21A698E64(*(char **)(v1 + 24));
        if (v3 != -1)
        {
          v4 = qword_2550F4CE8;
          if (qword_2550F4CE8)
          {
            v5 = v3;
            do
            {
              if ((!a1 || v4 == a1) && sub_21A69AB14(*(_BYTE **)(v1 + 8), *(_BYTE **)(v4 + 24)))
                *(_DWORD *)v4 = v5;
              v4 = *(_QWORD *)(v4 + 48);
            }
            while (v4);
          }
        }
      }
      v1 = *(_QWORD *)v1;
    }
    while (v1);
    v6 = qword_2550F4CF0;
    if (qword_2550F4CF0)
    {
      do
      {
        if (!strcmp(*(const char **)(v6 + 16), "flags"))
        {
          v7 = *(const char **)(v6 + 24);
          v8 = 0;
          v9 = &v7[strlen(v7)];
LABEL_17:
          v10 = (unsigned __int8 *)v7;
          while (v10 < (unsigned __int8 *)v9)
          {
            if (*v10 == 59)
            {
              v11 = 1;
              v12 = v10;
            }
            else
            {
              v13 = v10 + 1;
              v14 = v9 - 1 - (const char *)v10;
              while (1)
              {
                v15 = v13;
                if (!v14)
                  break;
                ++v13;
                --v14;
                if (*v15 == 59)
                {
                  v12 = v15;
                  goto LABEL_26;
                }
              }
              v12 = (unsigned __int8 *)v9;
LABEL_26:
              v11 = v15 < (unsigned __int8 *)v9;
            }
            v16 = v12 - v10;
            v7 = (const char *)&v12[v11];
            if (!sub_21A6988A0(v10, v12 - v10, "none"))
            {
              v8 = 0;
              goto LABEL_17;
            }
            if (!sub_21A6988A0(v10, v16, "time"))
            {
              v8 |= 1u;
              goto LABEL_17;
            }
            if (!sub_21A6988A0(v10, v16, "pid"))
            {
              v8 |= 2u;
              goto LABEL_17;
            }
            if (!sub_21A6988A0(v10, v16, "program"))
            {
              v8 |= 4u;
              goto LABEL_17;
            }
            if (!sub_21A6988A0(v10, v16, "category"))
            {
              v8 |= 8u;
              goto LABEL_17;
            }
            if (!sub_21A6988A0(v10, v16, "level"))
            {
              v8 |= 0x10u;
              goto LABEL_17;
            }
            if (!sub_21A6988A0(v10, v16, "prefix"))
            {
              v8 |= 0x20u;
              goto LABEL_17;
            }
            v17 = sub_21A6988A0(v10, v16, "function");
            v10 = (unsigned __int8 *)v7;
            if (!v17)
            {
              v8 |= 0x40u;
              goto LABEL_17;
            }
          }
          for (i = qword_2550F4CE8; i; i = *(_QWORD *)(i + 48))
          {
            if (!a1 || i == a1)
            {
              v19 = *(char **)(i + 24);
              if (sub_21A69AB14(*(_BYTE **)(v6 + 8), v19))
              {
                if ((v8 & 0x20) != 0)
                {
                  v20 = strchr(v19, 95);
                  if (!v20)
                    LODWORD(v20) = (_DWORD)v19 + strlen(v19);
                  *(_QWORD *)(i + 32) = v19;
                  *(_DWORD *)(i + 40) = (_DWORD)v20 - (_DWORD)v19;
                }
                *(_DWORD *)(i + 16) = v8;
              }
            }
          }
        }
        v6 = *(_QWORD *)v6;
      }
      while (v6);
      for (j = qword_2550F4CF0; j; j = *(_QWORD *)j)
      {
        if (!strcmp(*(const char **)(j + 16), "output"))
        {
          for (k = qword_2550F4CE8; k; k = *(_QWORD *)(k + 48))
          {
            if ((!a1 || k == a1) && sub_21A69AB14(*(_BYTE **)(j + 8), *(_BYTE **)(k + 24)))
            {
              v28 = 0;
              result = (uint64_t *)sub_21A698CD0(*(char **)(j + 24), &v28);
              if ((_DWORD)result)
                return result;
              v24 = *(_QWORD *)(k + 56);
              v25 = v28;
              if ((uint64_t *)v24 != v28)
              {
                if (v24)
                  --*(_DWORD *)(v24 + 8);
                ++*((_DWORD *)v25 + 2);
                *(_QWORD *)(k + 56) = v25;
              }
            }
          }
        }
      }
    }
  }
  v26 = qword_2550F4CF8;
  if (qword_2550F4CF8)
  {
    result = &qword_2550F4CF8;
    do
    {
      v27 = result;
      result = (uint64_t *)v26;
      while (1)
      {
        v26 = *result;
        if (*((_DWORD *)result + 2))
          break;
        *v27 = v26;
        sub_21A698460(result);
        result = (uint64_t *)*v27;
        if (!*v27)
          return result;
      }
    }
    while (v26);
  }
  return 0;
}

uint64_t sub_21A698CD0(char *__s2, uint64_t **a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t *v6;
  char *v7;
  uint64_t i;
  char *v9;
  unsigned __int8 *v10;
  uint64_t v11;

  v4 = &qword_2550F4CF8;
  while (1)
  {
    v4 = (uint64_t *)*v4;
    if (!v4)
      break;
    if (!strcmp((const char *)v4[2], __s2))
    {
      v5 = 0;
LABEL_5:
      *a2 = v4;
      return v5;
    }
  }
  v6 = (uint64_t *)malloc_type_calloc(1uLL, 0x60uLL, 0x10B2040E503BF9DuLL);
  if (v6)
  {
    v4 = v6;
    *((_DWORD *)v6 + 2) = 0;
    v7 = strdup(__s2);
    v4[2] = (uint64_t)v7;
    if (v7)
    {
      for (i = 0; __s2[i] && __s2[i] != 59; ++i)
        ;
      if (!i)
      {
        v5 = 4294960540;
        goto LABEL_27;
      }
      if (__s2[i])
        v9 = __s2 + 1;
      else
        v9 = __s2;
      v10 = (unsigned __int8 *)&v9[i];
      if (sub_21A6988A0((unsigned __int8 *)__s2, i, "console")
        && sub_21A6988A0((unsigned __int8 *)__s2, i, "file"))
      {
        if (sub_21A6988A0((unsigned __int8 *)__s2, i, "syslog"))
        {
          if (sub_21A6988A0((unsigned __int8 *)__s2, i, "callback"))
          {
            v5 = 4294960591;
LABEL_27:
            sub_21A698460(v4);
            return v5;
          }
          v11 = sub_21A69B2DC((uint64_t)v4, v10);
        }
        else
        {
          v11 = sub_21A69B188((uint64_t)v4, v10);
        }
      }
      else
      {
        v11 = sub_21A69AC58((uint64_t)v4, (char *)v10);
      }
      v5 = v11;
      if (!(_DWORD)v11)
      {
        v5 = 0;
        *v4 = qword_2550F4CF8;
        qword_2550F4CF8 = (uint64_t)v4;
        goto LABEL_5;
      }
      goto LABEL_27;
    }
    v5 = 4294960568;
    goto LABEL_27;
  }
  return 4294960568;
}

uint64_t sub_21A698E64(char *__s1)
{
  uint64_t v2;
  char *v3;
  char *v4;
  int v5;
  int v6;
  size_t v7;
  uint64_t v8;
  int v9;
  unsigned int v10;
  char *v11;
  int v12;
  uint64_t result;
  int v14;
  int v15;
  uint64_t v16;

  v2 = MEMORY[0x24BDAC740];
  v3 = __s1;
  do
  {
    v4 = v3;
    v5 = *v3;
    if (*v3 < 0)
      v6 = __maskrune(*v3, 0x100uLL);
    else
      v6 = *(_DWORD *)(v2 + 4 * *v3 + 60) & 0x100;
    ++v3;
  }
  while (v6);
  v7 = v4 - __s1;
  if (v4 == __s1)
  {
    v9 = *__s1;
    if ((v9 - 48) > 9)
    {
      v10 = 0;
    }
    else
    {
      v10 = 0;
      v11 = __s1 + 1;
      do
      {
        v10 = 10 * v10 + (char)v9 - 48;
        v12 = *v11++;
        v9 = v12;
      }
      while ((v12 - 48) < 0xA);
    }
    if (v9)
      return 0xFFFFFFFFLL;
    else
      return v10;
  }
  v8 = 0;
  while (strncmp(__s1, *(const char **)&dword_24DD06ED8[v8 + 2], v7))
  {
    v8 += 4;
    if (v8 == 68)
      return 0xFFFFFFFFLL;
  }
  result = dword_24DD06ED8[v8];
  if (v5 && (_DWORD)result != -1)
  {
    v14 = *v3;
    if ((v14 - 48) > 9)
    {
      v15 = 0;
      if (!*v3)
      {
LABEL_27:
        if (v5 != 45)
        {
          if (v5 == 43)
            return (v15 + result);
          return 0xFFFFFFFFLL;
        }
        return (result - v15);
      }
    }
    else
    {
      v15 = 0;
      v16 = 1;
      do
      {
        v15 = 10 * v15 + (char)v14 - 48;
        v14 = v3[v16++];
      }
      while ((v14 - 48) < 0xA);
      if (!v14)
        goto LABEL_27;
    }
    return 0xFFFFFFFFLL;
  }
  return result;
}

uint64_t sub_21A698FDC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  const char *v10;
  const char *v11;
  int v12;
  int v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  int v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25[1000];
  uint8_t v26[4096];
  __int128 buf;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v9 = MEMORY[0x24BDAC7A8]();
  v11 = v10;
  v13 = v12;
  v14 = v9;
  v31 = *MEMORY[0x24BDAC8D0];
  if (qword_2550F4D08 != -1)
    dispatch_once(&qword_2550F4D08, &unk_24DD07018);
  if (qword_2550F4D00)
    v15 = qword_2550F4D00;
  else
    v15 = MEMORY[0x24BDACB70];
  if (v13 > 4999)
  {
    if (v13 > 9999)
    {
      if (v13 == 10000 || v13 == 11000)
      {
LABEL_24:
        v16 = OS_LOG_TYPE_FAULT;
        goto LABEL_25;
      }
      v17 = 12000;
    }
    else
    {
      if (v13 == 5000)
      {
        v16 = OS_LOG_TYPE_DEFAULT;
        goto LABEL_25;
      }
      if (v13 == 8000)
      {
        v16 = OS_LOG_TYPE_ERROR;
        goto LABEL_25;
      }
      v17 = 9000;
    }
    if (v13 != v17)
    {
LABEL_36:
      v16 = OS_LOG_TYPE_DEBUG;
      goto LABEL_25;
    }
    goto LABEL_24;
  }
  v16 = OS_LOG_TYPE_INFO;
  if (v13 > 799)
  {
    if (v13 != 800 && v13 != 1000 && v13 != 3000)
      goto LABEL_36;
  }
  else if (v13 && v13 != 100 && v13 != 500)
  {
    goto LABEL_36;
  }
LABEL_25:
  if (!sub_21A72BCB0() || strlen(v11) < 2)
    return 0;
  if ((*(_BYTE *)(v14 + 16) & 0x40) != 0)
    __sprintf_chk(v25, 0, 0x3E8uLL, "%s: %s");
  else
    __sprintf_chk(v25, 0, 0x3E8uLL, "%s");
  v29 = 0;
  v30 = 0;
  *(_QWORD *)&buf = sub_21A695D38;
  *((_QWORD *)&buf + 1) = v26;
  v28 = xmmword_21A73ED60;
  v18 = sub_21A695DBC((uint64_t (**)(const char *, uint64_t, _QWORD))&buf, v25, (uint64_t)&a9, v20, v21, v22, v23, v24);
  *(_BYTE *)(*((_QWORD *)&buf + 1) + v28) = 0;
  if (os_log_type_enabled(v15, v16))
  {
    LODWORD(buf) = 136315138;
    *(_QWORD *)((char *)&buf + 4) = v26;
    _os_log_impl(&dword_21A66F000, v15, v16, "%s", (uint8_t *)&buf, 0xCu);
  }
  return v18;
}

uint64_t sub_21A699244(uint64_t a1, int a2, uint64_t a3, unint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t result;
  unint64_t v11;
  char *v12;
  char *v13;
  unint64_t v14;
  unint64_t v15;
  char v16;
  unint64_t v17;
  int v18;
  unint64_t v19;
  char *v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  BOOL v30;
  BOOL v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v72;
  int v74;
  int v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  char *v80;
  _BYTE v81[64];
  char v82;
  char v83;
  uint64_t v84;

  v8 = a3;
  result = 0;
  v74 = 0;
  v72 = 0;
  v84 = *MEMORY[0x24BDAC8D0];
  if (a4 >= a5)
    v11 = a5;
  else
    v11 = a4;
  v78 = (4 * a2);
  v12 = &v82;
  v13 = &v83;
  v77 = a1;
  while (1)
  {
    v14 = 0;
    v15 = v11 >= 0x10 ? 16 : v11;
    v80 = v13;
    do
    {
      if (v14 && (v14 & 3) == 0)
        *v13++ = 32;
      if (v14 >= v15)
      {
        v16 = 32;
        *v13 = 32;
      }
      else
      {
        *v13 = a0123456789abcd[(unint64_t)*(unsigned __int8 *)(v8 + v14) >> 4];
        v16 = a0123456789abcd[*(_BYTE *)(v8 + v14) & 0xF];
      }
      v13[1] = v16;
      v13 += 2;
      ++v14;
    }
    while (v14 != 16);
    v17 = 0;
    *v13 = 0;
    do
    {
      if (v17 >= v15)
      {
        LOBYTE(v18) = 32;
      }
      else
      {
        v18 = *(unsigned __int8 *)(v8 + v17);
        if ((v18 - 32) >= 0x5F)
          LOBYTE(v18) = 94;
      }
      v81[v17++] = v18;
    }
    while (v17 != 16);
    v81[16] = 0;
    if (a4 > 0x10)
    {
      if (v8 == a3)
      {
        v76 = result;
        v41 = a1;
        v29 = sub_21A6996C0(a1, (uint64_t)"%*s", a3, a4, a5, a6, a7, a8, v78);
        if ((v29 & 0x80000000) != 0)
          return v29;
        result = sub_21A6996C0(v41, (uint64_t)"+%04X: %s |%s| (%zu bytes)\n", v42, v43, v44, v45, v46, v47, 0);
        if ((result & 0x80000000) != 0)
          return result;
        result = (v29 + v76 + result);
        a1 = v77;
      }
      else
      {
        v30 = *(_QWORD *)v80 == *(_QWORD *)v12 && *((_QWORD *)v80 + 1) == *((_QWORD *)v12 + 1);
        v31 = v30 && *((_QWORD *)v80 + 2) == *((_QWORD *)v12 + 2);
        if (v31 && *((_QWORD *)v80 + 3) == *((_QWORD *)v12 + 3))
        {
          ++v74;
          v72 += v15;
        }
        else
        {
          v75 = result;
          if (v74 < 1)
          {
            v40 = v12;
          }
          else
          {
            v33 = a1;
            v29 = sub_21A6996C0(a1, (uint64_t)"%*s", a3, a4, a5, a6, a7, a8, v78);
            if ((v29 & 0x80000000) != 0)
              return v29;
            result = sub_21A6996C0(v33, (uint64_t)"* (%d duplicate lines, %zu duplicate bytes)\n", v34, v35, v36, v37, v38, v39, (v74 + 1));
            if ((result & 0x80000000) != 0)
              return result;
            v40 = v12;
            v72 = 0;
            v74 = 0;
            v75 += v29 + result;
            a1 = v77;
          }
          v48 = a1;
          v29 = sub_21A6996C0(a1, (uint64_t)"%*s", a3, a4, a5, a6, a7, a8, v78);
          if ((v29 & 0x80000000) != 0)
            return v29;
          result = sub_21A6996C0(v48, (uint64_t)"+%04X: %s |%s|\n", v49, v50, v51, v52, v53, v54, v8 - a3);
          if ((result & 0x80000000) != 0)
            return result;
          result = (v29 + v75 + result);
          a1 = v77;
          v12 = v40;
        }
      }
    }
    else
    {
      v19 = v11;
      v20 = v12;
      v21 = result;
      v22 = a1;
      v29 = sub_21A6996C0(a1, (uint64_t)"%*s", a3, a4, a5, a6, a7, a8, v78);
      if ((v29 & 0x80000000) != 0)
        return v29;
      result = sub_21A6996C0(v22, (uint64_t)"%s |%s| (%zu bytes)\n", v23, v24, v25, v26, v27, v28, (uint64_t)v80);
      if ((result & 0x80000000) != 0)
        return result;
      result = (v29 + v21 + result);
      a1 = v77;
      v12 = v20;
      v11 = v19;
    }
    v11 -= v15;
    if (!v11)
      break;
    v8 += v15;
    v13 = v12;
    v12 = v80;
  }
  if (v74 >= 1)
  {
    v55 = result;
    v56 = a1;
    v29 = sub_21A6996C0(a1, (uint64_t)"%*s", a3, a4, a5, a6, a7, a8, v78);
    if ((v29 & 0x80000000) != 0)
      return v29;
    result = sub_21A6996C0(v56, (uint64_t)"* (%d duplicate lines, %zu duplicate bytes)\n", v57, v58, v59, v60, v61, v62, (v74 + 1));
    if ((result & 0x80000000) != 0)
      return result;
    result = (v29 + v55 + result);
    a1 = v77;
  }
  if (a4 <= a5)
    return result;
  v63 = result;
  v64 = a1;
  v29 = sub_21A6996C0(a1, (uint64_t)"%*s", a3, a4, a5, a6, a7, a8, v78);
  if ((v29 & 0x80000000) != 0)
    return v29;
  result = sub_21A6996C0(v64, (uint64_t)"... %zu more bytes ...\n", v65, v66, v67, v68, v69, v70, a4 - a5);
  if ((result & 0x80000000) == 0)
    return (v29 + v63 + result);
  return result;
}

uint64_t sub_21A6996C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return sub_21A695DBC(a1, a2, &a9);
}

uint64_t sub_21A6996E8(uint64_t (**a1)(const char *, uint64_t, _QWORD), uint64_t a2, const char *a3, uint64_t a4)
{
  const char *v8;
  int v9;
  const char *v10;
  int v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;

  v8 = (const char *)(a2 + 25);
  if (*(_BYTE *)(a2 + 25))
    v9 = a4 + 1;
  else
    v9 = a4;
  v10 = (const char *)(a2 + 26);
  if (*(_BYTE *)(a2 + 26))
    v11 = v9 + 1;
  else
    v11 = v9;
  if ((*(_BYTE *)a2 & 1) == 0 && v11 < *(_DWORD *)(a2 + 8))
  {
    v12 = 0;
    while (1)
    {
      v13 = (*a1)(" ", 1, a1);
      if ((v13 & 0x80000000) != 0)
        return v13;
      ++v12;
      v14 = *(_DWORD *)(a2 + 8) - 1;
      *(_DWORD *)(a2 + 8) = v14;
      if (v11 >= v14)
      {
        if (*v8)
          goto LABEL_15;
        goto LABEL_17;
      }
    }
  }
  v12 = 0;
  if (*(_BYTE *)(a2 + 25))
  {
LABEL_15:
    v13 = (*a1)(v8, 1, a1);
    if ((v13 & 0x80000000) != 0)
      return v13;
    ++v12;
  }
LABEL_17:
  v13 = (*a1)(a3, a4, a1);
  if ((v13 & 0x80000000) != 0)
    return v13;
  v15 = (v12 + a4);
  if (!*v10)
    goto LABEL_21;
  v13 = (*a1)(v10, 1, a1);
  if ((v13 & 0x80000000) != 0)
    return v13;
  v15 = (v15 + 1);
LABEL_21:
  if (v11 < *(_DWORD *)(a2 + 8))
  {
    while (1)
    {
      v13 = (*a1)(" ", 1, a1);
      if ((v13 & 0x80000000) != 0)
        break;
      v15 = (v15 + 1);
      if (++v11 >= *(_DWORD *)(a2 + 8))
        return v15;
    }
    return v13;
  }
  return v15;
}

uint64_t sub_21A69985C(uint64_t (***a1)(const char *, ...), const __CFString *a2, uint64_t a3, int a4)
{
  int v8;
  int v9;
  BOOL v10;
  CFTypeID v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  CFIndex Count;
  uint64_t (*v20)(const char *, ...);
  CFIndex v21;
  uint64_t v22;
  CFIndex v23;
  int v24;
  const void *ValueAtIndex;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  const char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  unint64_t Length;
  unint64_t v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  CFIndex v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  int v71;
  uint64_t v72;
  const UInt8 *BytePtr;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  int v84;
  const __CFAllocator *Default;
  CFCalendarRef v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  __CFCalendar *v93;
  CFAbsoluteTime v94;
  uint64_t v95;
  CFTypeID TypeID;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  CFStringRef v110;
  uint64_t v111;
  int v112;
  int v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  CFIndex v120;
  size_t MaximumSizeForEncoding;
  CFIndex v122;
  UInt8 *v123;
  UInt8 *v124;
  uint64_t v125;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  int Value;
  uint64_t v134;
  uint64_t v135;
  CFIndex *usedBufLen;
  uint64_t v137;
  CFIndex valuePtr;
  uint64_t v139;
  uint64_t v140;
  CFRange v141;

  v8 = *((unsigned __int8 *)a1[1] + 3);
  if ((_DWORD)a3 || v8 != 1)
  {
    if ((_DWORD)a3)
      v10 = v8 == 2;
    else
      v10 = 0;
    v9 = v10;
  }
  else
  {
    v9 = 1;
  }
  v11 = CFGetTypeID(a2);
  if (v11 == CFArrayGetTypeID())
  {
    v18 = sub_21A6996C0((uint64_t)*a1, (uint64_t)"%*s", v12, v13, v14, v15, v16, v17, (4 * *((_DWORD *)a1 + 4)));
    if ((v18 & 0x80000000) != 0)
      return v18;
    Count = CFArrayGetCount((CFArrayRef)a2);
    v20 = **a1;
    if (Count >= 1)
    {
      v21 = Count;
      v22 = v20("[\n", 2);
      if ((v22 & 0x80000000) == 0)
      {
        v23 = 0;
        v24 = v22 + v18;
        while (1)
        {
          ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)a2, v23);
          ++*((_DWORD *)a1 + 4);
          v18 = sub_21A69985C(a1, ValueAtIndex, a3, 1);
          --*((_DWORD *)a1 + 4);
          if ((v18 & 0x80000000) != 0)
            break;
          v22 = (**a1)("\n", 1);
          if ((v22 & 0x80000000) != 0)
            return v22;
          v24 += v18 + v22;
          if (v21 == ++v23)
          {
            v18 = sub_21A6996C0((uint64_t)*a1, (uint64_t)"%*s", v26, v27, v28, v29, v30, v31, (4 * *((_DWORD *)a1 + 4)));
            if ((v18 & 0x80000000) != 0)
              return v18;
            v22 = (**a1)("]", 1);
            if ((v22 & 0x80000000) == 0)
            {
              v32 = v18 + v24;
              return (v32 + v22);
            }
            return v22;
          }
        }
        return v18;
      }
      return v22;
    }
    v39 = "[]";
    goto LABEL_34;
  }
  if (v11 == CFBooleanGetTypeID())
  {
    v18 = sub_21A6996C0((uint64_t)*a1, (uint64_t)"%*s", v33, v34, v35, v36, v37, v38, (4 * *((_DWORD *)a1 + 4)));
    if ((v18 & 0x80000000) != 0)
      return v18;
    if (!v9)
    {
      if ((const __CFString *)*MEMORY[0x24BDBD270] == a2)
        v52 = 4;
      else
        v52 = 5;
      if ((const __CFString *)*MEMORY[0x24BDBD270] == a2)
        v39 = "true";
      else
        v39 = "false";
      v20 = **a1;
      goto LABEL_42;
    }
    v20 = **a1;
    v39 = "%b";
    goto LABEL_34;
  }
  if (v11 == CFDataGetTypeID())
  {
    if (!v9)
    {
      v53 = *((_DWORD *)a1 + 4);
      Length = CFDataGetLength((CFDataRef)a2);
      v55 = Length;
      if (a4 || Length >= 0x11)
      {
        v18 = (**a1)("\n", 1);
        if ((v18 & 0x80000000) != 0)
          return v18;
        v56 = v53 + 1;
      }
      else
      {
        v56 = 0;
        LODWORD(v18) = 0;
      }
      *((_DWORD *)a1 + 4) = v56;
      v72 = (uint64_t)*a1;
      BytePtr = CFDataGetBytePtr((CFDataRef)a2);
      v22 = sub_21A699244(v72, v56, (uint64_t)BytePtr, v55, v55, v74, v75, v76);
      if ((v22 & 0x80000000) == 0)
      {
        v18 = (v22 + v18);
        *((_DWORD *)a1 + 4) = v53;
        return v18;
      }
      return v22;
    }
    v18 = sub_21A6996C0((uint64_t)*a1, (uint64_t)"%*s", v40, v41, v42, v43, v44, v45, (4 * *((_DWORD *)a1 + 4)));
    if ((v18 & 0x80000000) != 0)
      return v18;
    v20 = **a1;
    v39 = "%D";
    goto LABEL_34;
  }
  if (v11 == CFDateGetTypeID())
  {
    v18 = sub_21A6996C0((uint64_t)*a1, (uint64_t)"%*s", v46, v47, v48, v49, v50, v51, (4 * *((_DWORD *)a1 + 4)));
    if ((v18 & 0x80000000) != 0)
      return v18;
    if (!v9)
    {
      LODWORD(valuePtr) = 0;
      LODWORD(v137) = 0;
      v139 = 0;
      v140 = 0;
      Default = CFAllocatorGetDefault();
      v86 = CFCalendarCreateWithIdentifier(Default, (CFCalendarIdentifier)*MEMORY[0x24BDBD3B8]);
      if (v86)
      {
        v93 = v86;
        MEMORY[0x2207468B8](a2);
        CFCalendarDecomposeAbsoluteTime(v93, v94, "yMdHms", &valuePtr, &v137, (char *)&v140 + 4, &v140, (char *)&v139 + 4, &v139);
        CFRelease(v93);
        v95 = valuePtr;
      }
      else
      {
        v95 = 0;
      }
      LODWORD(v22) = sub_21A6996C0((uint64_t)*a1, (uint64_t)"%04d-%02d-%02d %02d:%02d:%02d", v87, v88, v89, v90, v91, v92, v95);
      goto LABEL_43;
    }
    v20 = **a1;
    v39 = "%T";
    goto LABEL_34;
  }
  if (v11 == CFDictionaryGetTypeID())
  {
    v18 = sub_21A6996C0((uint64_t)*a1, (uint64_t)"%*s", v57, v58, v59, v60, v61, v62, (4 * *((_DWORD *)a1 + 4)));
    if ((v18 & 0x80000000) != 0)
      return v18;
    v63 = CFDictionaryGetCount((CFDictionaryRef)a2);
    v20 = **a1;
    if (v63 >= 1)
    {
      v22 = v20("{\n", 2);
      if ((v22 & 0x80000000) != 0)
        return v22;
      ++*((_DWORD *)a1 + 4);
      *((_DWORD *)a1 + 5) = v22 + v18;
      CFDictionaryApplyFunction((CFDictionaryRef)a2, (CFDictionaryApplierFunction)sub_21A69A00C, a1);
      v18 = *((unsigned int *)a1 + 6);
      if ((v18 & 0x80000000) != 0)
        return v18;
      v70 = *((_DWORD *)a1 + 5);
      v71 = *((_DWORD *)a1 + 4) - 1;
      *((_DWORD *)a1 + 4) = v71;
      v18 = sub_21A6996C0((uint64_t)*a1, (uint64_t)"%*s", v64, v65, v66, v67, v68, v69, (4 * v71));
      if ((v18 & 0x80000000) != 0)
        return v18;
      v22 = (**a1)("}", 1);
      if ((v22 & 0x80000000) != 0)
        return v22;
      v32 = v18 + v70;
      return (v32 + v22);
    }
    v39 = "{}";
LABEL_34:
    v52 = 2;
LABEL_42:
    LODWORD(v22) = v20(v39, v52);
    goto LABEL_43;
  }
  if (v11 == CFNumberGetTypeID())
  {
    v83 = sub_21A6996C0((uint64_t)*a1, (uint64_t)"%*s", v77, v78, v79, v80, v81, v82, (4 * *((_DWORD *)a1 + 4)));
    v84 = v83;
    if ((v83 & 0x80000000) != 0)
      return v83;
    if (v9)
    {
      LODWORD(v22) = (**a1)("%i", (_DWORD)usedBufLen);
    }
    else
    {
      valuePtr = 0;
      if (!CFNumberGetValue((CFNumberRef)a2, kCFNumberSInt64Type, &valuePtr))
      {
        v137 = 0;
        Value = CFNumberGetValue((CFNumberRef)a2, kCFNumberDoubleType, &v137);
        v134 = (uint64_t)*a1;
        if (Value)
          v135 = sub_21A6996C0(v134, (uint64_t)"%f", v127, v128, v129, v130, v131, v132, v137);
        else
          v135 = sub_21A6996C0(v134, (uint64_t)"<< BAD NUMBER >>", v127, v128, v129, v130, v131, v132, (uint64_t)usedBufLen);
        v18 = v135;
        if ((v135 & 0x80000000) == 0)
          return (v135 + v84);
        return v18;
      }
      LODWORD(v22) = sub_21A6996C0((uint64_t)*a1, (uint64_t)"%lld", v114, v115, v116, v117, v118, v119, valuePtr);
    }
    if ((int)v22 >= 0)
      v32 = v84;
    else
      v32 = 0;
    return (v32 + v22);
  }
  TypeID = CFStringGetTypeID();
  v103 = sub_21A6996C0((uint64_t)*a1, (uint64_t)"%*s", v97, v98, v99, v100, v101, v102, (4 * *((_DWORD *)a1 + 4)));
  v18 = v103;
  if (v11 != TypeID)
  {
    if ((v103 & 0x80000000) != 0)
      return v18;
    v110 = CFCopyDescription(a2);
    v111 = (uint64_t)*a1;
    if (v110)
    {
      v112 = sub_21A6996C0(v111, (uint64_t)"%@", v104, v105, v106, v107, v108, v109, (uint64_t)v110);
      CFRelease(v110);
      if (v112 >= 0)
        v113 = v18;
      else
        v113 = 0;
      return (v113 + v112);
    }
    LODWORD(v22) = sub_21A6996C0(v111, (uint64_t)"<<UNKNOWN CF OBJECT TYPE: %d>>", v104, v105, v106, v107, v108, v109, v11);
    goto LABEL_43;
  }
  if ((v103 & 0x80000000) != 0)
    return v18;
  if (v9)
  {
    v20 = **a1;
    if (!(_DWORD)a3)
    {
      v39 = "%ks";
      v52 = 3;
      goto LABEL_42;
    }
    v39 = "%s";
    goto LABEL_34;
  }
  if ((_DWORD)a3)
  {
    v22 = (**a1)("\"", 1);
    if ((v22 & 0x80000000) != 0)
      return v22;
    v18 = (v22 + v18);
  }
  v120 = CFStringGetLength(a2);
  MaximumSizeForEncoding = CFStringGetMaximumSizeForEncoding(v120, 0x8000100u);
  if (MaximumSizeForEncoding)
  {
    v122 = MaximumSizeForEncoding;
    v123 = (UInt8 *)malloc_type_malloc(MaximumSizeForEncoding, 0x874C834EuLL);
    if (!v123)
      return 4294960568;
    v124 = v123;
    valuePtr = 0;
    v141.location = 0;
    v141.length = v120;
    CFStringGetBytes(a2, v141, 0x8000100u, 0x5Eu, 0, v123, v122, &valuePtr);
    v125 = (**a1)((const char *)v124, valuePtr);
    free(v124);
    if ((v125 & 0x80000000) != 0)
      return v125;
    v18 = (v125 + v18);
  }
  if ((_DWORD)a3)
  {
    LODWORD(v22) = (**a1)("\"", 1);
LABEL_43:
    if ((int)v22 >= 0)
      v32 = v18;
    else
      v32 = 0;
    return (v32 + v22);
  }
  return v18;
}

uint64_t sub_21A69A00C(uint64_t result, const void *a2, uint64_t a3)
{
  int v5;
  int v6;
  CFTypeID v7;
  CFIndex Count;
  uint64_t (*v9)(const char *, uint64_t);
  uint64_t v10;
  const void *v11;
  uint64_t v12;
  CFIndex v13;
  int v14;
  int v15;
  int v16;
  const char *v17;
  int v18;

  if (*(_DWORD *)(a3 + 24))
    return result;
  result = sub_21A69985C(a3, result, 0, 0);
  v5 = result;
  if ((result & 0x80000000) != 0)
    goto LABEL_22;
  result = (**(uint64_t (***)(const char *, uint64_t))a3)("=", 1);
  if ((result & 0x80000000) != 0)
  {
LABEL_21:
    v5 = result;
    goto LABEL_22;
  }
  v6 = result + v5;
  v7 = CFGetTypeID(a2);
  if (v7 == CFArrayGetTypeID())
  {
    Count = CFArrayGetCount((CFArrayRef)a2);
    v9 = **(uint64_t (***)(const char *, uint64_t))a3;
    if (Count >= 1)
    {
      result = v9("\n", 1);
      v5 = result;
      if ((result & 0x80000000) == 0)
      {
        v10 = a3;
        v11 = a2;
        v12 = 1;
LABEL_12:
        result = sub_21A69985C(v10, v11, 1, v12);
        v14 = result;
        if ((result & 0x80000000) != 0)
        {
          v5 = result;
          goto LABEL_22;
        }
        result = (**(uint64_t (***)(const char *, uint64_t))a3)("\n", 1);
        if ((result & 0x80000000) == 0)
        {
          v15 = v5 + v6 + v14 + result;
LABEL_20:
          *(_DWORD *)(a3 + 20) += v15;
          return result;
        }
        goto LABEL_21;
      }
      goto LABEL_22;
    }
    v17 = "[]\n";
LABEL_28:
    result = v9(v17, 3);
    goto LABEL_29;
  }
  if (v7 == CFDictionaryGetTypeID())
  {
    v13 = CFDictionaryGetCount((CFDictionaryRef)a2);
    v9 = **(uint64_t (***)(const char *, uint64_t))a3;
    if (v13 >= 1)
    {
      result = v9("\n", 1);
      v5 = result;
      if ((result & 0x80000000) == 0)
      {
        v10 = a3;
        v11 = a2;
        v12 = 0;
        goto LABEL_12;
      }
LABEL_22:
      *(_DWORD *)(a3 + 20) += v5;
LABEL_23:
      *(_DWORD *)(a3 + 24) = v5;
      return result;
    }
    v17 = "{}\n";
    goto LABEL_28;
  }
  if (v7 != CFDataGetTypeID() || *(_BYTE *)(*(_QWORD *)(a3 + 8) + 3) == 2)
  {
    v16 = *(_DWORD *)(a3 + 16);
    *(_DWORD *)(a3 + 16) = 0;
    result = sub_21A69985C(a3, a2, 1, 0);
    v5 = result;
    if ((result & 0x80000000) != 0)
      goto LABEL_22;
    *(_DWORD *)(a3 + 16) = v16;
    result = (**(uint64_t (***)(const char *, uint64_t))a3)("\n", 1);
    if ((result & 0x80000000) == 0)
    {
      v15 = v5 + v6 + result;
      goto LABEL_20;
    }
    goto LABEL_21;
  }
  result = sub_21A69985C(a3, a2, 1, 0);
LABEL_29:
  v5 = result;
  if ((int)result >= 0)
    v18 = v6;
  else
    v18 = 0;
  *(_DWORD *)(a3 + 20) += result + v18;
  if ((result & 0x80000000) != 0)
    goto LABEL_23;
  return result;
}

_BYTE *sub_21A69A24C(unsigned int a1, unsigned int a2, _BYTE *a3)
{
  unsigned int v3;
  _BYTE *v4;
  unsigned int v5;
  _BYTE *v6;
  BOOL v7;
  char v8;
  _BYTE *v9;
  char v10;
  _BYTE v12[32];
  uint64_t v13;

  v3 = 1;
  v13 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  do
  {
    v5 = (a1 >> (-8 * v3));
    v6 = v12;
    do
    {
      *v6++ = (v5 % 0xA) | 0x30;
      v7 = v5 > 9;
      v5 /= 0xAu;
    }
    while (v7);
    while (v6 > v12)
    {
      v8 = *--v6;
      *v4++ = v8;
    }
    if (v3 <= 3)
      *v4++ = 46;
    ++v3;
  }
  while (v3 != 5);
  if ((int)a2 >= 1)
  {
    *v4 = 58;
    v9 = v12;
    do
    {
      *v9++ = (a2 % 0xA) | 0x30;
      v7 = a2 > 9;
      a2 /= 0xAu;
    }
    while (v7);
    ++v4;
    while (v9 > v12)
    {
      v10 = *--v9;
      *v4++ = v10;
    }
  }
  *v4 = 0;
  return a3;
}

char *sub_21A69A370(_BYTE *a1, unsigned int a2, int a3, char *a4)
{
  unsigned int v5;
  unsigned int v6;
  char *v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  int v17;
  _BYTE *v18;
  uint64_t i;
  uint64_t v20;
  int v21;
  int v22;
  int v23;
  char v24;
  char *v25;
  int v26;
  BOOL v27;
  char *v28;
  char v29;
  unsigned __int8 *v30;
  int v31;
  char *v32;
  char v33;
  char *v35;
  char v36;
  _BYTE *v37;
  uint64_t v38;
  unsigned int v39;
  char *v40;
  char v41;
  _BYTE v42[32];
  char v43[40];
  char v44[64];
  uint64_t v45;

  v5 = a3;
  v6 = a2;
  v45 = *MEMORY[0x24BDAC8D0];
  v7 = a4;
  if (a3 >= 1)
  {
    *a4 = 91;
    v7 = a4 + 1;
  }
  if (*a1 || a1[1])
    goto LABEL_25;
  if (!a1[2]
    && !a1[3]
    && !a1[4]
    && !a1[5]
    && !a1[6]
    && !a1[7]
    && !a1[8]
    && !a1[9]
    && a1[10] == 255
    && a1[11] == 255)
  {
    *(_WORD *)v7 = 14906;
    v37 = v7 + 6;
    *(_DWORD *)(v7 + 2) = 1717986918;
    v7 += 7;
    goto LABEL_81;
  }
  if (a1[2]
    || a1[3]
    || a1[4]
    || a1[5]
    || a1[6]
    || a1[7]
    || a1[8]
    || a1[9]
    || a1[10]
    || a1[11]
    || !a1[12] && !a1[13] && (!a1[14] && !a1[15] || !a1[14] && a1[15] == 1))
  {
LABEL_25:
    v8 = 0;
    v9 = v43;
    while (1)
    {
      v10 = v8 | 1;
      v11 = a1[v8];
      if (v11 >= 0x10)
      {
        *v9 = a0123456789abcd[v11 >> 4];
        LODWORD(v11) = v11 & 0xF;
        v12 = 1;
      }
      else
      {
        if (!a1[v8])
        {
          v14 = 0;
          v16 = 0;
          v8 += 2;
          v15 = a1[v10];
          if (v15 < 0x10)
            goto LABEL_32;
          goto LABEL_31;
        }
        v12 = 0;
      }
      v13 = a0123456789abcd[v11];
      v14 = v12 + 1;
      v9[v12] = v13;
      v8 += 2;
      v15 = a1[v10];
LABEL_31:
      v16 = v14 + 1;
      v9[v14] = a0123456789abcd[(unint64_t)v15 >> 4];
LABEL_32:
      *(_WORD *)&v9[v16] = a0123456789abcd[v15 & 0xF];
      v9 += 5;
      if (v8 >= 0x10)
      {
        v17 = 0;
        v18 = a1 + 15;
        for (i = 28; i != -4; i -= 4)
        {
          if (*(v18 - 1))
          {
            v17 = 0;
          }
          else if (*v18)
          {
            v17 = 0;
          }
          else
          {
            ++v17;
          }
          *(_DWORD *)&v42[i] = v17;
          v18 -= 2;
        }
        v20 = 0;
        v21 = 0;
        v22 = -1;
        do
        {
          if (*(_DWORD *)&v42[4 * v20] > v21)
          {
            v21 = *(_DWORD *)&v42[4 * v20];
            v22 = v20;
          }
          ++v20;
        }
        while (v20 != 8);
        v23 = 0;
        while (1)
        {
          if (v23 == v22)
          {
            if (!v22)
              *v7++ = 58;
            *v7 = 58;
            v23 = v22 - 1 + *(_DWORD *)&v42[4 * v22];
          }
          else
          {
            v24 = v43[5 * v23];
            if (v24)
            {
              v25 = &v43[5 * v23 + 1];
              do
              {
                *v7++ = v24;
                v26 = *v25++;
                v24 = v26;
              }
              while (v26);
            }
            if (v23 == 7)
              goto LABEL_57;
            *v7 = 58;
          }
          ++v7;
          v27 = v23++ < 7;
          if (!v27)
            goto LABEL_57;
        }
      }
    }
  }
  v37 = v7 + 1;
  *v7 = 58;
  v7 += 2;
LABEL_81:
  v38 = 12;
  *v37 = 58;
  while (1)
  {
    v39 = a1[v38];
    v40 = v44;
    do
    {
      *v40++ = (v39 % 0xA) | 0x30;
      v27 = v39 > 9;
      v39 /= 0xAu;
    }
    while (v27);
    while (v40 > v44)
    {
      v41 = *--v40;
      *v7++ = v41;
    }
    if (v38 == 15)
      break;
    *v7++ = 46;
    ++v38;
  }
LABEL_57:
  if (a2)
  {
    *v7++ = 37;
    v28 = if_indextoname(a2, v44);
    if (v28)
    {
      v29 = *v28;
      if (*v28)
      {
        v30 = (unsigned __int8 *)(v28 + 1);
        do
        {
          *v7++ = v29;
          v31 = *v30++;
          v29 = v31;
        }
        while (v31);
      }
    }
    else
    {
      v35 = v44;
      do
      {
        *v35++ = (v6 % 0xA) | 0x30;
        v27 = v6 > 9;
        v6 /= 0xAu;
      }
      while (v27);
      while (v35 > v44)
      {
        v36 = *--v35;
        *v7++ = v36;
      }
    }
  }
  if ((int)v5 >= 1)
  {
    *(_WORD *)v7 = 14941;
    v32 = v44;
    do
    {
      *v32++ = (v5 % 0xA) | 0x30;
      v27 = v5 > 9;
      v5 /= 0xAu;
    }
    while (v27);
    v7 += 2;
    while (v32 > v44)
    {
      v33 = *--v32;
      *v7++ = v33;
    }
  }
  *v7 = 0;
  return a4;
}

uint64_t sub_21A69A7E4(uint64_t a1, uint64_t a2, _BYTE *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  unint64_t v12;
  uint64_t v13;
  const char *v14;
  uint64_t result;
  int v16;
  int v17;
  uint64_t v18;

  if (a4 < 1)
    return 0;
  LODWORD(v9) = 0;
  v10 = (4 * *(_DWORD *)(a2 + 8) + 8);
  v11 = &a3[a4];
  while (1)
  {
    if ((unint64_t)(v11 - a3) <= 1)
    {
      v16 = sub_21A6996C0(a1, (uint64_t)"### EasyConnect IE too small for header:\n%2.1H\n", (uint64_t)a3, a4, a5, a6, a7, a8, (uint64_t)a3);
      goto LABEL_16;
    }
    v12 = (unint64_t)&a3[a3[1] + 2];
    if (v12 > (unint64_t)v11)
      break;
    switch(*a3)
    {
      case 0:
      case 1:
      case 5:
        v18 = v10;
        goto LABEL_8;
      case 3:
        v18 = v10;
LABEL_8:
        v13 = a1;
        v14 = "%*s%-*s '%.*s'\n";
        break;
      default:
        v18 = v10;
        v13 = a1;
        v14 = "%*s%-*s %3.2H";
        break;
    }
    result = sub_21A6996C0(v13, (uint64_t)v14, (uint64_t)a3, a4, a5, a6, a7, a8, v18);
    if ((result & 0x80000000) == 0)
    {
      v9 = (result + v9);
      a3 = (_BYTE *)v12;
      result = v9;
      if (v12 < (unint64_t)v11)
        continue;
    }
    return result;
  }
  v16 = sub_21A6996C0(a1, (uint64_t)"### EasyConnect IE bad length:\n%2.1H\n", (uint64_t)a3, a4, a5, a6, a7, a8, (uint64_t)a3);
LABEL_16:
  if (v16 >= 0)
    v17 = v9;
  else
    v17 = 0;
  return (v17 + v16);
}

uint64_t sub_21A69A9D0(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t result;
  int v15;
  int v16;

  if (a4 < 1)
    return 0;
  LODWORD(v9) = 0;
  v10 = (4 * *(_DWORD *)(a2 + 8) + 8);
  v11 = a3 + a4;
  while (1)
  {
    if (v11 - a3 <= 3)
    {
      v15 = sub_21A6996C0(a1, (uint64_t)"### WPS TLV too small for header:\n%2.1H\n", a3, a4, a5, a6, a7, a8, a3);
      goto LABEL_14;
    }
    v12 = a3 + 4 + __rev16(*(unsigned __int16 *)(a3 + 2));
    if (v12 < a3 || v12 > v11)
      break;
    result = sub_21A6996C0(a1, (uint64_t)"%*s%-*s %3.2H", a3, a4, a5, a6, a7, a8, v10);
    if ((result & 0x80000000) == 0)
    {
      v9 = (result + v9);
      a3 = v12;
      result = v9;
      if (v12 < v11)
        continue;
    }
    return result;
  }
  v15 = sub_21A6996C0(a1, (uint64_t)"### WPS TLV bad length:\n%2.1H\n", a3, a4, a5, a6, a7, a8, a3);
LABEL_14:
  if (v15 >= 0)
    v16 = v9;
  else
    v16 = 0;
  return (v16 + v15);
}

uint64_t sub_21A69AB14(_BYTE *a1, _BYTE *a2)
{
  _BYTE *v2;

  v2 = a2;
  if (*a1 == 94)
    return sub_21A69AB78(a1 + 1, a2);
  while (!sub_21A69AB78(a1, v2))
  {
    if (!*v2++)
      return 0;
  }
  return 1;
}

uint64_t sub_21A69AB78(_BYTE *a1, _BYTE *a2)
{
  int v2;
  _BYTE *i;
  int v5;
  int v6;
  int v7;
  int v8;
  BOOL v10;
  uint64_t result;

  v2 = *a1;
  if (*a1)
  {
    for (i = a1 + 2; ; ++i)
    {
      v5 = *(i - 1);
      if (v5 == 42)
        break;
      v6 = *a2;
      if (v2 == 36 && !*(i - 1))
        return v6 == 0;
      if (!*a2 || v2 != 46 && v2 != v6)
        return 0;
      ++a2;
      v2 = v5;
      if (!v5)
        return 1;
    }
    while (1)
    {
      result = sub_21A69AB78(i, a2);
      if ((_DWORD)result)
        break;
      v8 = *a2++;
      v7 = v8;
      v10 = v2 == 46 || v7 == v2;
      if (!v7 || !v10)
        return result;
    }
  }
  return 1;
}

os_log_t sub_21A69AC2C()
{
  os_log_t result;

  result = os_log_create("com.apple.airportutility", "general");
  qword_2550F4D00 = (uint64_t)result;
  return result;
}

uint64_t sub_21A69AC58(uint64_t a1, char *__s1)
{
  int v3;
  unsigned __int8 *v4;
  unsigned __int8 *v5;
  int v6;
  unsigned __int8 *v7;
  uint64_t v8;
  size_t i;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  size_t v12;
  unsigned __int8 *v13;
  _BOOL4 v14;
  char *v15;
  char *v16;
  void *v17;
  char *v18;
  int64_t v19;
  char *v20;
  const char *v21;
  int v22;
  int v23;
  uint64_t v24;
  int v25;
  int v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  unsigned __int8 *v31;
  BOOL v32;
  unsigned __int8 *v33;
  unsigned __int8 *v34;
  int v35;
  int v36;
  size_t v37;
  _BYTE *v38;
  _BYTE *v39;
  void *v40;
  unsigned __int8 *v41;
  int v42;
  int v43;
  FILE *v44;
  FILE *v45;
  uint64_t result;
  FILE **v47;
  unsigned __int8 *v48;
  stat v49;
  char v50[1025];
  char v51[1024];
  uint64_t v52;

  v52 = *MEMORY[0x24BDAC8D0];
  v3 = *__s1;
  if (!*__s1 || (v4 = (unsigned __int8 *)__s1, !strcmp(__s1, "stderr")))
  {
    v47 = (FILE **)MEMORY[0x24BDAC8D8];
  }
  else
  {
    if (strcmp((const char *)v4, "stdout"))
    {
      while (1)
      {
        v5 = v4;
        if (!v3)
          return 4294960554;
        while (v3 != 61)
        {
          v6 = *++v5;
          v3 = v6;
          if (!v6)
            return 4294960554;
        }
        v7 = v5 + 1;
        v8 = -1;
        for (i = 1; v5[i] && v5[i] != 59; ++i)
          ++v8;
        v10 = &v5[i];
        if (v5[i])
          v11 = v10 + 1;
        else
          v11 = &v5[i];
        v48 = v11;
        if (sub_21A6988A0(v4, v5 - v4, "path"))
        {
          if (sub_21A6988A0(v4, v5 - v4, "roll"))
          {
            if (sub_21A6988A0(v4, v5 - v4, "backup"))
              return 4294960561;
            if (i < 2)
            {
              v14 = 0;
              v12 = 1;
              v13 = v5 + 1;
LABEL_39:
              if (v12 != i && *v13 != 35)
                return 4294960591;
            }
            else
            {
              if (*v7 == 35)
              {
                v12 = 1;
                v13 = v5 + 1;
                v14 = 1;
                goto LABEL_39;
              }
              v27 = 2;
              while (v8)
              {
                v28 = v5[v27];
                --v8;
                ++v27;
                if (v28 == 35)
                {
                  v12 = v27 - 1;
                  v14 = v27 - 1 < i;
                  v13 = &v5[v27 - 1];
                  goto LABEL_39;
                }
              }
              v14 = 0;
              v13 = &v5[v27];
              v12 = i;
            }
            v37 = v12 - 1;
            if (v12 == 1)
            {
              v38 = 0;
            }
            else
            {
              v39 = malloc_type_malloc(v12, 0xF7BB2B65uLL);
              if (!v39)
                return 4294960568;
              v38 = v39;
              memcpy(v39, v7, v37);
              v38[v37] = 0;
            }
            v40 = *(void **)(a1 + 80);
            if (v40)
              free(v40);
            *(_QWORD *)(a1 + 80) = v38;
            v41 = &v13[v14];
            if (v41 >= v10)
            {
              v42 = 0;
            }
            else
            {
              v42 = 0;
              do
              {
                v43 = *v41;
                if ((v43 - 48) > 9)
                  break;
                v42 = (char)v43 + 10 * v42 - 48;
                ++v41;
              }
              while (v41 < v10);
            }
            if (v10 != v41)
              return 4294960591;
            *(_DWORD *)(a1 + 88) = v42;
            goto LABEL_95;
          }
          if (i < 2)
          {
            v24 = 0;
          }
          else
          {
            v24 = 0;
            while (1)
            {
              v25 = *v7;
              v26 = (char)v25;
              if ((v25 - 48) > 9)
                break;
              v24 = (char)v25 + 10 * v24 - 48;
              if (++v7 >= v10)
                goto LABEL_62;
            }
            v29 = v24 << 10;
            v30 = v24 << 20;
            if (v25 == 77)
              v31 = v7 + 1;
            else
              v31 = v7;
            if (v25 != 77)
              v30 = v24;
            v32 = v25 == 75;
            if (v25 == 75)
              v33 = v7 + 1;
            else
              v33 = v31;
            if (!v32)
              v29 = v30;
            if (v26 == 66)
              ++v7;
            else
              v7 = v33;
            if (v26 != 66)
              v24 = v29;
          }
LABEL_62:
          if (v10 != v7 && *v7 != 35)
            return 4294960591;
          *(_QWORD *)(a1 + 64) = v24;
          v34 = v7 >= v10 ? v7 : v7 + 1;
          if (v34 >= v10)
          {
            v35 = 0;
          }
          else
          {
            v35 = 0;
            do
            {
              v36 = *v34;
              if ((v36 - 48) > 9)
                break;
              v35 = (char)v36 + 10 * v35 - 48;
              ++v34;
            }
            while (v34 < v10);
          }
          if (v10 != v34)
            return 4294960591;
          *(_DWORD *)(a1 + 72) = v35;
        }
        else
        {
          if (i == 1)
            return 4294960592;
          v15 = (char *)malloc_type_malloc(i, 0x5C4A2E0DuLL);
          if (!v15)
            return 4294960568;
          v16 = v15;
          memcpy(v15, v7, i - 1);
          v16[i - 1] = 0;
          v17 = *(void **)(a1 + 40);
          if (v17)
            free(v17);
          *(_QWORD *)(a1 + 40) = v16;
          v18 = strrchr(v16, 47);
          if (v18)
          {
            v19 = v18 - v16;
            if ((unint64_t)(v18 - v16) > 0x400)
              return 4294960592;
            __memcpy_chk();
            v50[v19] = 0;
            memset(&v49, 0, sizeof(v49));
            v20 = v51;
            __strlcpy_chk();
            while (1)
            {
              v21 = &v20[strspn(v20, "/")];
              v20 = (char *)&v21[strcspn(v21, "/")];
              v22 = *v20;
              *v20 = 0;
              if (mkdir(v51, 0x1F8u) < 0)
              {
                v23 = *__error();
                if (stat(v51, &v49) < 0)
                  goto LABEL_91;
                if ((v49.st_mode & 0xF000) != 0x4000)
                  break;
              }
              if (!v22)
                goto LABEL_92;
              *v20 = 47;
            }
            v23 = 20;
LABEL_91:
            *__error() = v23;
LABEL_92:
            v16 = *(char **)(a1 + 40);
          }
          v44 = fopen(v16, "a");
          *(_QWORD *)(a1 + 48) = v44;
          if (!v44)
            return 4294960541;
          fseeko(v44, 0, 2);
          *(_QWORD *)(a1 + 56) = ftello(*(FILE **)(a1 + 48));
        }
LABEL_95:
        v4 = v48;
        v3 = *v48;
        if (!*v48)
        {
          v45 = *(FILE **)(a1 + 48);
          if (v45)
            goto LABEL_100;
          return 4294960591;
        }
      }
    }
    v47 = (FILE **)MEMORY[0x24BDAC8E8];
  }
  v45 = *v47;
  *(_QWORD *)(a1 + 48) = *v47;
LABEL_100:
  setvbuf(v45, 0, 2, 0);
  result = 0;
  *(_QWORD *)(a1 + 24) = sub_21A69B4C0;
  *(_DWORD *)(a1 + 32) = 2;
  return result;
}

uint64_t sub_21A69B188(uint64_t a1, unsigned __int8 *a2)
{
  int v3;
  unsigned __int8 *v4;
  uint64_t v5;
  unint64_t v6;
  unsigned __int8 *v7;
  int v8;
  unsigned __int8 *v9;
  uint64_t v10;
  uint64_t result;
  char __s1[32];
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  *(_DWORD *)(a1 + 40) = -1;
  v3 = *a2;
  if (*a2)
  {
    v4 = a2;
    while (1)
    {
      v5 = 1;
      if (!v3)
        return 4294960554;
      while (v3 != 61)
      {
        v3 = v4[v5++];
        if (!v3)
          return 4294960554;
      }
      v6 = 0;
      v7 = &v4[v5];
      while (1)
      {
        v8 = v7[v6];
        if (!v7[v6] || v8 == 59)
          break;
        ++v6;
      }
      if (sub_21A6988A0(v4, v5 - 1, "level"))
        return 4294960561;
      if (v8)
        v9 = v4 + 1;
      else
        v9 = v4;
      v4 = &v9[v5 + v6];
      if (v6 >= 0x1F)
        v10 = 31;
      else
        v10 = v6;
      __memcpy_chk();
      __s1[v10] = 0;
      *(_DWORD *)(a1 + 40) = sub_21A698E64(__s1);
      v3 = *v4;
      if (!*v4)
        goto LABEL_19;
    }
  }
  else
  {
LABEL_19:
    result = 0;
    *(_QWORD *)(a1 + 24) = sub_21A69B8A0;
    *(_DWORD *)(a1 + 32) = 6;
  }
  return result;
}

uint64_t sub_21A69B2DC(uint64_t a1, unsigned __int8 *a2)
{
  _QWORD *v3;
  uint64_t v4;
  int v5;
  unsigned __int8 *v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  unsigned __int8 *v10;
  uint64_t v11;
  char *v12;
  uint64_t result;
  uint64_t v14;
  char v15[64];
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  v14 = 0;
  *(_QWORD *)(a1 + 40) = 0;
  v3 = (_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 48) = 0;
  v4 = a1 + 48;
  v5 = *a2;
  if (!*a2)
  {
LABEL_23:
    result = 0;
    *(_QWORD *)(a1 + 24) = sub_21A69B974;
    *(_DWORD *)(a1 + 32) = 11;
    return result;
  }
  v6 = a2;
  v7 = "func";
  while (1)
  {
    v8 = 1;
    if (!v5)
      return 4294960554;
    while (v5 != 61)
    {
      v5 = v6[v8++];
      if (!v5)
        return 4294960554;
    }
    v9 = 0;
    v10 = &v6[v8];
    while (v10[v9] && v10[v9] != 59)
      ++v9;
    v11 = (uint64_t)(v10[v9] ? v6 + 1 : v6);
    v12 = v7;
    if (sub_21A6988A0(v6, v8 - 1, v7))
      break;
    if (v9 > 0x3F)
      return 4294960553;
    __memcpy_chk();
    v15[v9] = 0;
    if (sscanf(v15, "%p", &v14) != 1)
      return 4294960554;
    *v3 = v14;
LABEL_22:
    v6 = (unsigned __int8 *)(v11 + v8 + v9);
    v5 = *v6;
    v7 = v12;
    if (!*v6)
      goto LABEL_23;
  }
  if (!sub_21A6988A0(v6, v8 - 1, "arg"))
  {
    if (v9 > 0x3F)
      return 4294960553;
    __memcpy_chk();
    v15[v9] = 0;
    if (sscanf(v15, "%p", v4) != 1)
      return 4294960554;
    goto LABEL_22;
  }
  return 4294960561;
}

FILE *sub_21A69B4C0(uint64_t a1, const void *a2, size_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  FILE *result;
  FILE **v12;
  FILE **v13;
  uint64_t v15;
  uint64_t v16;
  int v18;
  BOOL v19;
  uint64_t v20;
  std::error_code *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  std::error_code *v34;
  BOOL v35;
  std::error_code *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  const char *v42;
  void *v43;
  void *v44;
  FILE *v45;
  FILE *v46;
  size_t v47;
  FILE *v48;
  std::error_code *v49;
  int v50;
  int v51;
  std::error_code *v52;
  std::error_code *v53;
  FILE *v54;
  int v55;
  std::__fs::filesystem::path __to;
  std::__fs::filesystem::path __p;
  uint64_t v58;

  v58 = *MEMORY[0x24BDAC8D0];
  v10 = *(_QWORD *)(*(_QWORD *)a1 + 56);
  result = *(FILE **)(v10 + 48);
  v12 = (FILE **)MEMORY[0x24BDAC8D8];
  v13 = (FILE **)MEMORY[0x24BDAC8E8];
  if (result != (FILE *)*MEMORY[0x24BDAC8D8] && result != (FILE *)*MEMORY[0x24BDAC8E8])
  {
    v15 = *(_QWORD *)(v10 + 64);
    v16 = *(_QWORD *)(v10 + 56) + a3;
    *(_QWORD *)(v10 + 56) = v16;
    if (v15 >= 1 && v16 > v15)
    {
      if (*(_QWORD *)(v10 + 80))
      {
        v18 = *(_DWORD *)(v10 + 88);
        v19 = __OFSUB__(v18, 1);
        v20 = (v18 - 1);
        if ((int)v20 < 0 == v19)
        {
          sub_21A695CB4((uint64_t)&__p, 1025, "%s.%d", a4, a5, a6, a7, a8, *(_QWORD *)(v10 + 80), v20);
          remove(&__p, v21);
          v27 = *(_DWORD *)(v10 + 88);
          if (v27 >= 3)
          {
            v28 = (v27 - 2);
            do
            {
              sub_21A695CB4((uint64_t)&__p, 1025, "%s.%d", v22, v23, v24, v25, v26, *(_QWORD *)(v10 + 80), v28);
              sub_21A695CB4((uint64_t)&__to, 1025, "%s.%d", v29, v30, v31, v32, v33, *(_QWORD *)(v10 + 80), (v28 + 1));
              rename(&__p, &__to, v34);
              v35 = (_DWORD)v28 != 0;
              v28 = (v28 - 1);
            }
            while ((_DWORD)v28 != 0 && v35);
          }
          sub_21A695CB4((uint64_t)&__to, 1025, "%s.1", v22, v23, v24, v25, v26, *(_QWORD *)(v10 + 80));
          rename(*(const std::__fs::filesystem::path **)(v10 + 80), &__to, v36);
          sub_21A695CB4((uint64_t)&__to, 1025, "%s", v37, v38, v39, v40, v41, *(_QWORD *)(v10 + 80));
          v42 = *(const char **)(v10 + 40);
          v43 = malloc_type_malloc(0x1000uLL, 0x30F77872uLL);
          if (v43)
          {
            v44 = v43;
            v45 = fopen(v42, "r");
            if (v45 || *__error() && !*__error())
            {
              v46 = fopen((const char *)&__to, "w");
              if (v46 || *__error() && !*__error())
              {
                do
                  v47 = fread(v44, 1uLL, 0x1000uLL, v45);
                while (v47 && (fwrite(v44, 1uLL, v47, v46) == v47 || *__error() && !*__error()));
              }
              if (v45)
                fclose(v45);
              if (v46)
                fclose(v46);
            }
            free(v44);
          }
        }
      }
      v48 = *(FILE **)(v10 + 48);
      if (v48)
      {
        fwrite("\nLOG ENDED, CONTINUES IN NEXT LOG FILE\n", 0x27uLL, 1uLL, v48);
        fclose(*(FILE **)(v10 + 48));
        *(_QWORD *)(v10 + 48) = 0;
      }
      snprintf((char *)&__p, 0x401uLL, "%s.%d", *(const char **)(v10 + 40), *(_DWORD *)(v10 + 72) - 1);
      remove(&__p, v49);
      v50 = *(_DWORD *)(v10 + 72);
      if (v50 >= 3)
      {
        v51 = v50 - 2;
        do
        {
          snprintf((char *)&__p, 0x401uLL, "%s.%d", *(const char **)(v10 + 40), v51);
          snprintf((char *)&__to, 0x401uLL, "%s.%d", *(const char **)(v10 + 40), v51 + 1);
          rename(&__p, &__to, v52);
          v35 = v51-- != 0;
        }
        while (v51 != 0 && v35);
      }
      snprintf((char *)&__to, 0x401uLL, "%s.%d", *(const char **)(v10 + 40), 1);
      rename(*(const std::__fs::filesystem::path **)(v10 + 40), &__to, v53);
      v54 = fopen(*(const char **)(v10 + 40), "w");
      *(_QWORD *)(v10 + 48) = v54;
      if (!v54 && *__error())
        __error();
      *(_QWORD *)(v10 + 56) = a3;
      result = *(FILE **)(v10 + 48);
    }
  }
  if (result)
  {
    if (result == *v12)
    {
      v55 = 2;
    }
    else if (result == *v13)
    {
      v55 = 1;
    }
    else
    {
      v55 = fileno(result);
    }
    return (FILE *)write(v55, a2, a3);
  }
  return result;
}

void sub_21A69B8A0(unsigned __int16 *a1, const char *a2, uint64_t a3)
{
  unsigned int v3;
  int v4;
  uint64_t v5;

  v3 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 56) + 40);
  if (v3 == -1)
    v3 = a1[4];
  if ((int)v3 >= 501)
  {
    if (v3 >= 0x3E9)
    {
      if (v3 >= 0xBB9)
      {
        if (v3 >= 0x1389)
        {
          if (v3 >= 0x1F41)
          {
            if (v3 >= 0x2329)
              v4 = v3 < 0x2711;
            else
              v4 = 2;
          }
          else
          {
            v4 = 3;
          }
        }
        else
        {
          v4 = 4;
        }
      }
      else
      {
        v4 = 5;
      }
    }
    else
    {
      v4 = 6;
    }
  }
  else
  {
    v4 = 7;
  }
  do
  {
    v5 = a3;
    if (!a3)
      break;
    --a3;
  }
  while (a2[v5 - 1] == 10);
  syslog(v4, "%.*s", v5, a2);
}

uint64_t sub_21A69B974(uint64_t result)
{
  uint64_t (*v1)(void);

  v1 = *(uint64_t (**)(void))(*(_QWORD *)(*(_QWORD *)result + 56) + 40);
  if (v1)
    return v1();
  return result;
}

uint64_t sub_21A69BDB8(uint64_t a1)
{
  uint64_t result;

  result = objc_opt_respondsToSelector();
  if ((result & 1) != 0)
    return MEMORY[0x24BEDD108](*(_QWORD *)(*(_QWORD *)(a1 + 32) + 16), sel_auUIAlertDestructiveAction_, *(_QWORD *)(a1 + 32));
  return result;
}

uint64_t sub_21A69BE00(uint64_t a1)
{
  uint64_t result;

  result = objc_opt_respondsToSelector();
  if ((result & 1) != 0)
    return MEMORY[0x24BEDD108](*(_QWORD *)(*(_QWORD *)(a1 + 32) + 16), sel_auUIAlertCancelAction_, *(_QWORD *)(a1 + 32));
  return result;
}

uint64_t sub_21A69BE48(uint64_t a1)
{
  uint64_t result;

  result = objc_opt_respondsToSelector();
  if ((result & 1) != 0)
    return MEMORY[0x24BEDD108](*(_QWORD *)(*(_QWORD *)(a1 + 32) + 16), sel_auUIAlertAlternateAction_, *(_QWORD *)(a1 + 32));
  return result;
}

uint64_t sub_21A69BE90(uint64_t a1)
{
  uint64_t result;

  result = objc_opt_respondsToSelector();
  if ((result & 1) != 0)
    return MEMORY[0x24BEDD108](*(_QWORD *)(*(_QWORD *)(a1 + 32) + 16), sel_auUIAlertOKAction_, *(_QWORD *)(a1 + 32));
  return result;
}

uint64_t sub_21A69C138(uint64_t a1)
{
  uint64_t result;

  result = objc_opt_respondsToSelector();
  if ((result & 1) != 0)
    return MEMORY[0x24BEDD108](*(_QWORD *)(*(_QWORD *)(a1 + 32) + 16), sel_auUIAlertOKAction_, *(_QWORD *)(a1 + 32));
  return result;
}

uint64_t sub_21A69C1E8(uint64_t a1)
{
  uint64_t result;

  result = objc_opt_respondsToSelector();
  if ((result & 1) != 0)
    return MEMORY[0x24BEDD108](*(_QWORD *)(*(_QWORD *)(a1 + 32) + 16), sel_auUIAlertCancelAction_, *(_QWORD *)(a1 + 32));
  return result;
}

uint64_t sub_21A69C508(unsigned __int8 *a1, unint64_t a2, int a3, unsigned __int8 **a4, _QWORD *a5, unsigned __int8 **a6)
{
  uint64_t v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  int v9;
  uint64_t v10;

  do
  {
    if (a2 - (unint64_t)a1 < 2)
    {
      v10 = 4294960569;
      if (!a6)
        return v10;
      goto LABEL_13;
    }
    v6 = a1[1];
    v7 = a1 + 2;
    v8 = &a1[v6 + 2];
    if ((unint64_t)v8 > a2)
    {
      v10 = 4294960546;
      if (!a6)
        return v10;
      goto LABEL_13;
    }
    v9 = *a1;
    a1 += v6 + 2;
  }
  while (v9 != a3);
  if (a4)
    *a4 = v7;
  v10 = 0;
  if (a5)
    *a5 = v6;
  a1 = v8;
  if (a6)
LABEL_13:
    *a6 = a1;
  return v10;
}

uint64_t sub_21A69C578(unsigned __int8 *a1, unint64_t a2, int a3, _QWORD *a4, _QWORD *a5, _QWORD *a6)
{
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  int v8;
  uint64_t v9;
  uint64_t result;

  if ((uint64_t)(a2 - (_QWORD)a1) < 2)
    return 4294960569;
  v6 = a1;
  while (1)
  {
    v7 = v6;
    v8 = *v6;
    v9 = v6[1];
    v6 += v9 + 2;
    if (v8 == 221)
    {
      if (v6 < a1 || (unint64_t)v6 > a2)
        return 4294960553;
      if (v9 >= 4 && bswap32(*(_DWORD *)(v7 + 2)) == a3)
        break;
    }
    if ((uint64_t)(a2 - (_QWORD)v6) <= 1)
      return 4294960569;
  }
  *a4 = v7 + 6;
  *a5 = v9 - 4;
  result = 0;
  if (a6)
    *a6 = v6;
  return result;
}

uint64_t sub_21A69C604(unsigned __int8 *a1, unint64_t a2, _BYTE *a3, _WORD *a4)
{
  uint64_t result;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;

  v8 = 0;
  v9 = 0;
  result = sub_21A69C578(a1, a2, 234241, &v9, &v8, 0);
  if (!(_DWORD)result)
  {
    if (v8 >= 3)
    {
      v7 = *(unsigned __int16 *)(v9 + 1);
      if (a3)
        *a3 = *(_BYTE *)v9;
      result = 0;
      if (a4)
        *a4 = bswap32(v7) >> 16;
    }
    else
    {
      return 4294960553;
    }
  }
  return result;
}

uint64_t sub_21A69C688(unsigned __int8 *a1, unint64_t a2, _QWORD *a3, _QWORD *a4)
{
  uint64_t result;
  unint64_t v7;
  unint64_t v8;
  _BYTE *v9;

  v8 = 0;
  v9 = 0;
  result = sub_21A69C578(a1, a2, 1569287, &v9, &v8, 0);
  if (!(_DWORD)result)
  {
    v7 = v8;
    if (v8 >= 0xA)
    {
      if (*v9)
      {
        return 4294960540;
      }
      else if (v9[1] == 1)
      {
        result = 0;
        *a3 = v9 + 2;
        *a4 = v7 - 2;
      }
      else
      {
        return 4294960581;
      }
    }
    else
    {
      return 4294960553;
    }
  }
  return result;
}

uint64_t sub_21A69C720(unsigned __int8 *a1, unint64_t a2, int a3, unsigned __int8 **a4, _QWORD *a5, unsigned __int8 **a6)
{
  uint64_t v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  int v9;
  uint64_t result;

  do
  {
    if (a2 - (unint64_t)a1 < 2)
      return 4294960569;
    v6 = a1[1];
    v7 = a1 + 2;
    v8 = &a1[v6 + 2];
    if ((unint64_t)v8 > a2)
      return 4294960546;
    v9 = *a1;
    a1 += v6 + 2;
  }
  while (v9 != a3);
  *a4 = v7;
  *a5 = v6;
  result = 0;
  if (a6)
    *a6 = v8;
  return result;
}

double sub_21A69C778(uint64_t a1)
{
  double result;

  result = -3.59869635e230;
  *(_OWORD *)a1 = xmmword_21A73ED80;
  *(_QWORD *)(a1 + 16) = 0;
  return result;
}

void *sub_21A69C78C(uint64_t a1, char *a2, size_t a3)
{
  return sub_21A69C79C(a1, a2, a3, 0);
}

double sub_21A69C794(_OWORD *a1, uint64_t a2)
{
  return sub_21A69C880(a1, a2, 0);
}

void *sub_21A69C79C(uint64_t a1, char *__src, size_t a3, int a4)
{
  char *v5;
  int v7;
  size_t v8;
  unint64_t v9;
  void *v10;
  _OWORD *v11;
  char *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;

  v5 = __src;
  v7 = *(_DWORD *)(a1 + 16);
  *(_DWORD *)(a1 + 16) = v7 + a3;
  if (__CFADD__(v7, (_DWORD)a3))
    ++*(_DWORD *)(a1 + 20);
  v8 = 64 - (v7 & 0x3F);
  v9 = a3 - v8;
  if (a3 >= v8)
  {
    v11 = (_OWORD *)(a1 + 24);
    memcpy((void *)(a1 - v8 + 88), __src, v8);
    sub_21A69C93C((_DWORD *)a1, (int *)(a1 + 24), a4);
    v12 = &v5[v8];
    if (v9 >= 0x40)
    {
      do
      {
        v13 = *(_OWORD *)v12;
        v14 = *((_OWORD *)v12 + 1);
        v15 = *((_OWORD *)v12 + 3);
        *(_OWORD *)(a1 + 56) = *((_OWORD *)v12 + 2);
        *(_OWORD *)(a1 + 72) = v15;
        *v11 = v13;
        *(_OWORD *)(a1 + 40) = v14;
        sub_21A69C93C((_DWORD *)a1, (int *)(a1 + 24), a4);
        v12 += 64;
        v9 -= 64;
      }
      while (v9 > 0x3F);
    }
    v10 = (void *)(a1 + 24);
    __src = v12;
    a3 = v9;
  }
  else
  {
    v10 = (void *)(a1 - v8 + 88);
  }
  return memcpy(v10, __src, a3);
}

double sub_21A69C880(_OWORD *a1, uint64_t a2, int a3)
{
  uint64_t v6;
  int *v7;
  _BYTE *v8;
  int *v9;
  unsigned int v10;
  double result;

  v6 = *(_DWORD *)(a2 + 16) & 0x3F;
  v7 = (int *)(a2 + 24);
  v8 = (_BYTE *)(a2 + 24 + v6);
  *v8 = 0x80;
  v9 = (int *)(v8 + 1);
  if (v6 < 0x38)
  {
    v10 = 55 - v6;
  }
  else
  {
    bzero(v9, v6 ^ 0x3F);
    sub_21A69C93C((_DWORD *)a2, v7, a3);
    v10 = 56;
    v9 = v7;
  }
  bzero(v9, v10);
  *(_QWORD *)(a2 + 80) = 8 * *(_QWORD *)(a2 + 16);
  sub_21A69C93C((_DWORD *)a2, v7, a3);
  *a1 = *(_OWORD *)a2;
  result = 0.0;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_QWORD *)(a2 + 80) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  return result;
}

_DWORD *sub_21A69C93C(_DWORD *result, int *a2, int a3)
{
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  unint64_t v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  BOOL v52;
  int v53;
  int v54;
  unint64_t v55;
  int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  int v65;
  int v66;
  int v67;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  int v73;
  int v74;
  int v75;
  int v76;
  int v77;
  int v78;
  int v79;
  int v80;
  int v81;
  int v82;
  int v83;
  int v84;
  int v85;
  int v86;
  int v87;
  int v88;
  int v89;
  int v90;

  v3 = result[1];
  v5 = result[2];
  v4 = result[3];
  v6 = *a2;
  v7 = a2[1];
  HIDWORD(v8) = *result + *a2 - 680876936 + (v5 & v3 | v4 & ~v3);
  LODWORD(v8) = HIDWORD(v8);
  v9 = (v8 >> 25) + v3;
  HIDWORD(v8) = v4 + v7 - 389564586 + (v3 & v9 | v5 & ~v9);
  LODWORD(v8) = HIDWORD(v8);
  v10 = (v8 >> 20) + v9;
  v11 = a2[2];
  v12 = a2[3];
  HIDWORD(v8) = v5 + v11 + 606105819 + (v9 & v10 | v3 & ~v10);
  LODWORD(v8) = HIDWORD(v8);
  v13 = (v8 >> 15) + v10;
  HIDWORD(v8) = v3 + v12 - 1044525330 + (v10 & v13 | v9 & ~v13);
  LODWORD(v8) = HIDWORD(v8);
  v14 = (v8 >> 10) + v13;
  v16 = a2[4];
  v15 = a2[5];
  HIDWORD(v8) = v16 + v9 - 176418897 + (v13 & v14 | v10 & ~v14);
  LODWORD(v8) = HIDWORD(v8);
  v17 = (v8 >> 25) + v14;
  HIDWORD(v8) = v15 + v10 + 1200080426 + (v14 & v17 | v13 & ~v17);
  LODWORD(v8) = HIDWORD(v8);
  v18 = (v8 >> 20) + v17;
  v19 = a2[6];
  v20 = a2[7];
  HIDWORD(v8) = v19 + v13 - 1473231341 + (v17 & v18 | v14 & ~v18);
  LODWORD(v8) = HIDWORD(v8);
  v21 = (v8 >> 15) + v18;
  HIDWORD(v8) = v20 + v14 - 45705983 + (v18 & v21 | v17 & ~v21);
  LODWORD(v8) = HIDWORD(v8);
  v22 = (v8 >> 10) + v21;
  v23 = a2[8];
  v24 = a2[9];
  HIDWORD(v8) = v23 + v17 + 1770035416 + (v21 & v22 | v18 & ~v22);
  LODWORD(v8) = HIDWORD(v8);
  v25 = (v8 >> 25) + v22;
  HIDWORD(v8) = v24 + v18 - 1958414417 + (v22 & v25 | v21 & ~v25);
  LODWORD(v8) = HIDWORD(v8);
  v26 = (v8 >> 20) + v25;
  v28 = a2[10];
  v27 = a2[11];
  HIDWORD(v8) = v28 + v21 - 42063 + (v25 & v26 | v22 & ~v26);
  LODWORD(v8) = HIDWORD(v8);
  v29 = (v8 >> 15) + v26;
  HIDWORD(v8) = v27 + v22 - 1990404162 + (v26 & v29 | v25 & ~v29);
  LODWORD(v8) = HIDWORD(v8);
  v30 = (v8 >> 10) + v29;
  v32 = a2[12];
  v31 = a2[13];
  HIDWORD(v8) = v32 + v25 + 1804603682 + (v29 & v30 | v26 & ~v30);
  LODWORD(v8) = HIDWORD(v8);
  v33 = (v8 >> 25) + v30;
  HIDWORD(v8) = v31 + v26 - 40341101 + (v30 & v33 | v29 & ~v33);
  LODWORD(v8) = HIDWORD(v8);
  v34 = (v8 >> 20) + v33;
  v36 = a2[14];
  v35 = a2[15];
  HIDWORD(v8) = v36 + v29 - 1502002290 + (v33 & v34 | v30 & ~v34);
  LODWORD(v8) = HIDWORD(v8);
  v37 = (v8 >> 15) + v34;
  HIDWORD(v8) = v35 + v30 + 1236535329 + (v34 & v37 | v33 & ~v37);
  LODWORD(v8) = HIDWORD(v8);
  v38 = (v8 >> 10) + v37;
  HIDWORD(v8) = v7 + v33 - 165796510 + (v38 & v34 | v37 & ~v34);
  LODWORD(v8) = HIDWORD(v8);
  v39 = (v8 >> 27) + v38;
  HIDWORD(v8) = v19 + v34 - 1069501632 + (v39 & v37 | v38 & ~v37);
  LODWORD(v8) = HIDWORD(v8);
  v40 = (v8 >> 23) + v39;
  HIDWORD(v8) = v27 + v37 + 643717713 + (v40 & v38 | v39 & ~v38);
  LODWORD(v8) = HIDWORD(v8);
  v41 = (v8 >> 18) + v40;
  HIDWORD(v8) = v6 + v38 - 373897302 + (v41 & v39 | v40 & ~v39);
  LODWORD(v8) = HIDWORD(v8);
  v42 = (v8 >> 12) + v41;
  HIDWORD(v8) = v15 + v39 - 701558691 + (v42 & v40 | v41 & ~v40);
  LODWORD(v8) = HIDWORD(v8);
  v43 = (v8 >> 27) + v42;
  HIDWORD(v8) = v28 + v40 + 38016083 + (v43 & v41 | v42 & ~v41);
  LODWORD(v8) = HIDWORD(v8);
  v44 = (v8 >> 23) + v43;
  HIDWORD(v8) = v35 + v41 - 660478335 + (v44 & v42 | v43 & ~v42);
  LODWORD(v8) = HIDWORD(v8);
  v45 = (v8 >> 18) + v44;
  HIDWORD(v8) = v16 + v42 - 405537848 + (v45 & v43 | v44 & ~v43);
  LODWORD(v8) = HIDWORD(v8);
  v46 = (v8 >> 12) + v45;
  HIDWORD(v8) = v24 + v43 + 568446438 + (v46 & v44 | v45 & ~v44);
  LODWORD(v8) = HIDWORD(v8);
  v47 = (v8 >> 27) + v46;
  HIDWORD(v8) = v36 + v44 - 1019803690 + (v47 & v45 | v46 & ~v45);
  LODWORD(v8) = HIDWORD(v8);
  v48 = (v8 >> 23) + v47;
  HIDWORD(v8) = v12 + v45 - 187363961 + (v48 & v46 | v47 & ~v46);
  LODWORD(v8) = HIDWORD(v8);
  v49 = (v8 >> 18) + v48;
  v50 = v46 + v23 + (v49 & v47 | v48 & ~v47);
  HIDWORD(v8) = v50 + 1163531501;
  LODWORD(v8) = v50 + 1163531501;
  v51 = v8 >> 12;
  v52 = a3 == 1;
  HIDWORD(v8) = v50 + 1146754285;
  LODWORD(v8) = v50 + 1146754285;
  v53 = v8 >> 12;
  if (!v52)
    v53 = v51;
  v54 = v53 + v49;
  HIDWORD(v55) = v31 + v47 - 1444681467 + (v54 & v48 | v49 & ~v48);
  LODWORD(v55) = HIDWORD(v55);
  v56 = (v55 >> 27) + v54;
  HIDWORD(v55) = v11 + v48 - 51403784 + (v56 & v49 | v54 & ~v49);
  LODWORD(v55) = HIDWORD(v55);
  v57 = (v55 >> 23) + v56;
  HIDWORD(v55) = v20 + v49 + 1735328473 + (v57 & v54 | v56 & ~v54);
  LODWORD(v55) = HIDWORD(v55);
  v58 = (v55 >> 18) + v57;
  HIDWORD(v55) = v32 + v54 - 1926607734 + ((v58 ^ v57) & v56 ^ v57);
  LODWORD(v55) = HIDWORD(v55);
  v59 = (v55 >> 12) + v58;
  HIDWORD(v55) = v15 + v56 - 378558 + (v58 ^ v57 ^ v59);
  LODWORD(v55) = HIDWORD(v55);
  v60 = (v55 >> 28) + v59;
  HIDWORD(v55) = v23 + v57 - 2022574463 + (v59 ^ v58 ^ v60);
  LODWORD(v55) = HIDWORD(v55);
  v61 = (v55 >> 21) + v60;
  HIDWORD(v55) = v27 + v58 + 1839030562 + (v60 ^ v59 ^ v61);
  LODWORD(v55) = HIDWORD(v55);
  v62 = (v55 >> 16) + v61;
  HIDWORD(v55) = v36 + v59 - 35309556 + (v61 ^ v60 ^ v62);
  LODWORD(v55) = HIDWORD(v55);
  v63 = (v55 >> 9) + v62;
  HIDWORD(v55) = v7 + v60 - 1530992060 + (v62 ^ v61 ^ v63);
  LODWORD(v55) = HIDWORD(v55);
  v64 = (v55 >> 28) + v63;
  HIDWORD(v55) = v16 + v61 + 1272893353 + (v63 ^ v62 ^ v64);
  LODWORD(v55) = HIDWORD(v55);
  v65 = (v55 >> 21) + v64;
  HIDWORD(v55) = v20 + v62 - 155497632 + (v64 ^ v63 ^ v65);
  LODWORD(v55) = HIDWORD(v55);
  v66 = (v55 >> 16) + v65;
  HIDWORD(v55) = v28 + v63 - 1094730640 + (v65 ^ v64 ^ v66);
  LODWORD(v55) = HIDWORD(v55);
  v67 = (v55 >> 9) + v66;
  HIDWORD(v55) = v31 + v64 + 681279174 + (v66 ^ v65 ^ v67);
  LODWORD(v55) = HIDWORD(v55);
  v68 = (v55 >> 28) + v67;
  HIDWORD(v55) = v6 + v65 - 358537222 + (v67 ^ v66 ^ v68);
  LODWORD(v55) = HIDWORD(v55);
  v69 = (v55 >> 21) + v68;
  HIDWORD(v55) = v12 + v66 - 722521979 + (v68 ^ v67 ^ v69);
  LODWORD(v55) = HIDWORD(v55);
  v70 = (v55 >> 16) + v69;
  HIDWORD(v55) = v19 + v67 + 76029189 + (v69 ^ v68 ^ v70);
  LODWORD(v55) = HIDWORD(v55);
  v71 = (v55 >> 9) + v70;
  HIDWORD(v55) = v24 + v68 - 640364487 + (v70 ^ v69 ^ v71);
  LODWORD(v55) = HIDWORD(v55);
  v72 = (v55 >> 28) + v71;
  HIDWORD(v55) = v32 + v69 - 421815835 + (v71 ^ v70 ^ v72);
  LODWORD(v55) = HIDWORD(v55);
  v73 = (v55 >> 21) + v72;
  HIDWORD(v55) = v35 + v70 + 530742520 + (v72 ^ v71 ^ v73);
  LODWORD(v55) = HIDWORD(v55);
  v74 = (v55 >> 16) + v73;
  HIDWORD(v55) = v11 + v71 - 995338651 + (v73 ^ v72 ^ v74);
  LODWORD(v55) = HIDWORD(v55);
  v75 = (v55 >> 9) + v74;
  HIDWORD(v55) = v6 + v72 - 198630844 + ((v75 | ~v73) ^ v74);
  LODWORD(v55) = HIDWORD(v55);
  v76 = (v55 >> 26) + v75;
  HIDWORD(v55) = v20 + v73 + 1126891415 + ((v76 | ~v74) ^ v75);
  LODWORD(v55) = HIDWORD(v55);
  v77 = (v55 >> 22) + v76;
  HIDWORD(v55) = v36 + v74 - 1416354905 + ((v77 | ~v75) ^ v76);
  LODWORD(v55) = HIDWORD(v55);
  v78 = (v55 >> 17) + v77;
  HIDWORD(v55) = v15 + v75 - 57434055 + ((v78 | ~v76) ^ v77);
  LODWORD(v55) = HIDWORD(v55);
  v79 = (v55 >> 11) + v78;
  HIDWORD(v55) = v32 + v76 + 1700485571 + ((v79 | ~v77) ^ v78);
  LODWORD(v55) = HIDWORD(v55);
  v80 = (v55 >> 26) + v79;
  HIDWORD(v55) = v12 + v77 - 1894986606 + ((v80 | ~v78) ^ v79);
  LODWORD(v55) = HIDWORD(v55);
  v81 = (v55 >> 22) + v80;
  HIDWORD(v55) = v28 + v78 - 1051523 + ((v81 | ~v79) ^ v80);
  LODWORD(v55) = HIDWORD(v55);
  v82 = (v55 >> 17) + v81;
  HIDWORD(v55) = v7 + v79 - 2054922799 + ((v82 | ~v80) ^ v81);
  LODWORD(v55) = HIDWORD(v55);
  v83 = (v55 >> 11) + v82;
  HIDWORD(v55) = v23 + v80 + 1873313359 + ((v83 | ~v81) ^ v82);
  LODWORD(v55) = HIDWORD(v55);
  v84 = (v55 >> 26) + v83;
  HIDWORD(v55) = v35 + v81 - 30611744 + ((v84 | ~v82) ^ v83);
  LODWORD(v55) = HIDWORD(v55);
  v85 = (v55 >> 22) + v84;
  HIDWORD(v55) = v19 + v82 - 1560198380 + ((v85 | ~v83) ^ v84);
  LODWORD(v55) = HIDWORD(v55);
  v86 = (v55 >> 17) + v85;
  HIDWORD(v55) = v31 + v83 + 1309151649 + ((v86 | ~v84) ^ v85);
  LODWORD(v55) = HIDWORD(v55);
  v87 = (v55 >> 11) + v86;
  HIDWORD(v55) = v16 + v84 - 145523070 + ((v87 | ~v85) ^ v86);
  LODWORD(v55) = HIDWORD(v55);
  v88 = (v55 >> 26) + v87;
  HIDWORD(v55) = v27 + v85 - 1120210379 + ((v88 | ~v86) ^ v87);
  LODWORD(v55) = HIDWORD(v55);
  v89 = (v55 >> 22) + v88;
  HIDWORD(v55) = v11 + v86 + 718787259 + ((v89 | ~v87) ^ v88);
  LODWORD(v55) = HIDWORD(v55);
  v90 = (v55 >> 17) + v89;
  HIDWORD(v55) = v24 + v87 - 343485551 + ((v90 | ~v88) ^ v89);
  LODWORD(v55) = HIDWORD(v55);
  *result += v88;
  result[1] = v90 + v3 + (v55 >> 11);
  result[2] = v90 + v5;
  result[3] = v89 + v4;
  return result;
}

uint64_t sub_21A69D330(unsigned int a1, int a2, unsigned __int8 *a3, unint64_t a4)
{
  int v4;
  unsigned int v5;
  unsigned int i;
  unint64_t v7;
  unint64_t v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  unint64_t v39;
  unsigned __int8 *v40;
  int v41;

  if (a2 == -1)
    v4 = 5000;
  else
    v4 = a2;
  if (!a2)
    v4 = 5552;
  v5 = (unsigned __int16)a1;
  for (i = HIWORD(a1); a4; a4 -= v7)
  {
    if (a4 >= v4)
      v7 = v4;
    else
      v7 = a4;
    v8 = v7;
    if (v7 >= 0x10)
    {
      do
      {
        v9 = v5 + *a3;
        v10 = v9 + i;
        v11 = v9 + a3[1];
        v12 = v10 + v11;
        v13 = v11 + a3[2];
        v14 = v12 + v13;
        v15 = v13 + a3[3];
        v16 = v14 + v15;
        v17 = v15 + a3[4];
        v18 = v16 + v17;
        v19 = v17 + a3[5];
        v20 = v18 + v19;
        v21 = v19 + a3[6];
        v22 = v20 + v21;
        v23 = v21 + a3[7];
        v24 = v22 + v23;
        v25 = v23 + a3[8];
        v26 = v24 + v25;
        v27 = v25 + a3[9];
        v28 = v26 + v27;
        v29 = v27 + a3[10];
        v30 = v28 + v29;
        v31 = v29 + a3[11];
        v32 = v30 + v31;
        v33 = v31 + a3[12];
        v34 = v32 + v33;
        v35 = v33 + a3[13];
        v36 = v34 + v35;
        v37 = v35 + a3[14];
        v38 = v36 + v37;
        v5 = v37 + a3[15];
        i = v38 + v5;
        a3 += 16;
        v8 -= 16;
      }
      while (v8 > 0xF);
    }
    v39 = v8;
    v40 = a3;
    if (v8)
    {
      do
      {
        v41 = *v40++;
        v5 += v41;
        i += v5;
        --v39;
      }
      while (v39);
      a3 += v8;
    }
    v5 %= 0xFFF1u;
    i %= 0xFFF1u;
  }
  return v5 | (i << 16);
}

uint64_t sub_21A69E224(void *a1, const char *a2, double a3)
{
  const char *v5;
  const char *v6;
  const char *v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  const char *v16;
  const char *v17;
  uint64_t v18;
  void *v19;
  const char *v20;
  uint64_t v21;
  double v22;
  double v23;
  const char *v24;
  uint64_t v25;
  void *v26;
  const char *v27;
  uint64_t v28;
  double v29;
  const char *v30;
  uint64_t v31;

  objc_msgSend_setTranslatesAutoresizingMaskIntoConstraints_(a1, a2, 0);
  objc_msgSend_setNumberOfLines_(a1, v5, 0);
  objc_msgSend_setTextAlignment_(a1, v6, 1);
  objc_msgSend_setLineBreakMode_(a1, v7, 0);
  v10 = objc_msgSend__secondaryLabelColor(MEMORY[0x24BDF6950], v8, v9);
  objc_msgSend_setTextColor_(a1, v11, v10);
  v14 = objc_msgSend_systemFontOfSize_(MEMORY[0x24BDF6A70], v12, v13, a3);
  objc_msgSend_setFont_(a1, v15, v14);
  objc_msgSend_setAdjustsFontSizeToFitWidth_(a1, v16, 1);
  v19 = (void *)objc_msgSend_font(a1, v17, v18);
  objc_msgSend_pointSize(v19, v20, v21);
  v23 = v22 + -4.0;
  v26 = (void *)objc_msgSend_font(a1, v24, v25);
  objc_msgSend_pointSize(v26, v27, v28);
  return objc_msgSend_setMinimumScaleFactor_(a1, v30, v31, v23 / v29);
}

double sub_21A69E6C0(double a1, uint64_t a2, const char *a3, uint64_t a4)
{
  void *v5;
  const char *v6;
  uint64_t v7;
  double v8;
  float v9;

  v5 = (void *)objc_msgSend_mainScreen(MEMORY[0x24BDF6D38], a3, a4);
  objc_msgSend_scale(v5, v6, v7);
  if (v8 < 2.0)
  {
    v9 = a1;
    return roundf(v9);
  }
  return a1;
}

double sub_21A69F768(double a1, uint64_t a2, const char *a3, uint64_t a4)
{
  void *v5;
  const char *v6;
  uint64_t v7;
  double v8;
  float v9;

  v5 = (void *)objc_msgSend_mainScreen(MEMORY[0x24BDF6D38], a3, a4);
  objc_msgSend_scale(v5, v6, v7);
  if (v8 < 2.0)
  {
    v9 = a1;
    return roundf(v9) + -0.5;
  }
  return a1;
}

uint64_t sub_21A69F8E8(void *a1, const char *a2, uint64_t a3)
{
  uint64_t v4;
  const char *v5;
  const char *v6;
  void *v7;
  AUImageView *v8;
  const char *v9;
  void *v10;
  const char *v11;
  const char *v12;
  AULabel *v13;
  uint64_t v14;
  const char *v15;
  const char *v16;
  double v17;
  const char *v18;
  uint64_t v19;
  const char *v20;
  const char *v21;
  uint64_t v22;
  double v23;
  float v24;
  const char *v25;
  double v26;
  double v27;
  const char *v28;
  uint64_t v29;
  const char *v30;
  uint64_t v31;
  double v32;
  double v33;
  double v34;
  double v35;
  float v36;
  const char *v37;
  uint64_t v38;
  double v39;
  const char *v40;
  const char *v41;
  AULabel *v42;
  uint64_t v43;
  const char *v44;
  const char *v45;
  const char *v46;
  const char *v47;
  uint64_t v48;
  const char *v49;
  uint64_t v50;
  double v51;
  float v52;
  const char *v53;
  double v54;
  double v55;
  const char *v56;
  uint64_t v57;
  const char *v58;
  uint64_t v59;
  double v60;
  double v61;
  double v62;
  double v63;
  float v64;
  const char *v65;
  uint64_t v66;
  double v67;
  const char *v68;
  const char *v69;
  void *v70;
  const char *v71;
  uint64_t v72;
  const char *v73;
  double v74;
  uint64_t v75;
  const char *v76;
  void *v77;
  const char *v78;
  uint64_t v79;
  const char *v80;
  uint64_t v81;
  const char *v82;
  const char *v83;
  uint64_t v84;
  const char *v85;
  const char *v86;
  uint64_t v87;
  void *v88;
  double v89;
  float v90;
  const char *v91;
  void *v92;
  double v93;
  const char *v94;
  uint64_t v95;
  const char *v96;
  NSDictionary *v97;
  const char *v98;
  uint64_t v99;
  const char *v100;
  const char *v101;
  void *v102;
  NSDictionary *v103;
  const char *v104;
  uint64_t v105;
  const char *v106;
  const char *v107;
  uint64_t v108;
  void *v109;
  double v110;
  float v111;
  const char *v112;
  void *v113;
  double v114;
  const char *v115;
  uint64_t v116;
  const char *v117;
  NSDictionary *v118;
  const char *v119;
  uint64_t v120;
  const char *v121;
  const char *v122;
  void *v123;
  NSDictionary *v124;
  const char *v125;
  uint64_t v126;
  const char *v127;
  void *v128;
  NSDictionary *v129;
  const char *v130;
  uint64_t v131;
  const char *v132;
  const char *v133;
  uint64_t v134;

  v4 = sub_21A731B64(a1, a2, a3);
  objc_msgSend_setTranslatesAutoresizingMaskIntoConstraints_(a1, v5, 0);
  v7 = (void *)objc_msgSend_imageNamed_(ImageStore, v6, (uint64_t)CFSTR("Reset-Modem"));
  v8 = [AUImageView alloc];
  v10 = (void *)objc_msgSend_initWithImage_(v8, v9, (uint64_t)v7);
  objc_msgSend_setTranslatesAutoresizingMaskIntoConstraints_(v10, v11, 0);
  objc_msgSend_addSubview_(a1, v12, (uint64_t)v10);

  v13 = objc_alloc_init(AULabel);
  v14 = sub_21A690C10((uint64_t)CFSTR("CyclePower"), (uint64_t)CFSTR("AirPortSettings"));
  objc_msgSend_setText_(v13, v15, v14);
  if (v4 == 1)
    v17 = 14.0;
  else
    v17 = 17.0;
  sub_21A69E224(v13, v16, v17);
  objc_msgSend_sizeToFit(v13, v18, v19);
  objc_msgSend_setTranslatesAutoresizingMaskIntoConstraints_(v13, v20, 0);
  objc_msgSend_frame(v10, v21, v22);
  v24 = v23 * 0.5;
  objc_msgSend_textRectForBounds_limitedToNumberOfLines_(v13, v25, 0, 0.0, 0.0, (float)(floorf(v24) + -10.0), 3.40282347e38);
  v27 = v26;
  objc_msgSend_bounds(v13, v28, v29);
  v34 = v33;
  if (v27 == v33)
  {
    objc_msgSend_frame(v10, v30, v31);
    v36 = v35 * 0.5;
    objc_msgSend_setPreferredMaxLayoutWidth_(v13, v37, v38, (float)(floorf(v36) + -10.0));
  }
  LODWORD(v32) = 1148846080;
  objc_msgSend_setContentCompressionResistancePriority_forAxis_(v13, v30, 1, v32);
  LODWORD(v39) = 1148846080;
  objc_msgSend_setContentCompressionResistancePriority_forAxis_(v13, v40, 0, v39);
  objc_msgSend_addSubview_(a1, v41, (uint64_t)v13);

  v42 = objc_alloc_init(AULabel);
  v43 = sub_21A690C10((uint64_t)CFSTR("RemoveBattery"), (uint64_t)CFSTR("AirPortSettings"));
  objc_msgSend_setText_(v42, v44, v43);
  sub_21A69E224(v42, v45, v17);
  objc_msgSend_setTranslatesAutoresizingMaskIntoConstraints_(v42, v46, 0);
  objc_msgSend_sizeToFit(v42, v47, v48);
  objc_msgSend_frame(v10, v49, v50);
  v52 = v51 * 0.5;
  objc_msgSend_textRectForBounds_limitedToNumberOfLines_(v42, v53, 0, 0.0, 0.0, (float)(floorf(v52) + -10.0), 3.40282347e38);
  v55 = v54;
  objc_msgSend_bounds(v42, v56, v57);
  v62 = v61;
  if (v55 == v61)
  {
    objc_msgSend_frame(v10, v58, v59);
    v64 = v63 * 0.5;
    objc_msgSend_setPreferredMaxLayoutWidth_(v42, v65, v66, (float)(floorf(v64) + -10.0));
  }
  LODWORD(v60) = 1148846080;
  objc_msgSend_setContentCompressionResistancePriority_forAxis_(v42, v58, 1, v60);
  LODWORD(v67) = 1148846080;
  objc_msgSend_setContentCompressionResistancePriority_forAxis_(v42, v68, 0, v67);
  objc_msgSend_addSubview_(a1, v69, (uint64_t)v42);

  v70 = (void *)MEMORY[0x24BDD1628];
  objc_msgSend_size(v7, v71, v72);
  v75 = objc_msgSend_constraintWithItem_attribute_relatedBy_toItem_attribute_multiplier_constant_(v70, v73, (uint64_t)v10, 7, 0, 0, 0, 1.0, v74);
  objc_msgSend_addConstraint_(a1, v76, v75);
  v77 = (void *)MEMORY[0x24BDD1628];
  objc_msgSend_size(v7, v78, v79);
  v81 = objc_msgSend_constraintWithItem_attribute_relatedBy_toItem_attribute_multiplier_constant_(v77, v80, (uint64_t)v10, 8, 0, 0, 0, 1.0);
  objc_msgSend_addConstraint_(a1, v82, v81);
  v84 = objc_msgSend_constraintWithItem_attribute_relatedBy_toItem_attribute_multiplier_constant_(MEMORY[0x24BDD1628], v83, (uint64_t)v10, 9, 0, a1, 9, 1.0, 0.0);
  objc_msgSend_addConstraint_(a1, v85, v84);
  v88 = (void *)MEMORY[0x24BDD1628];
  if (v27 == v34)
  {
    objc_msgSend_frame(v10, v86, v87);
    v90 = v89 * 0.286458343;
    v92 = (void *)objc_msgSend_constraintWithItem_attribute_relatedBy_toItem_attribute_multiplier_constant_(v88, v91, (uint64_t)v13, 9, 0, v10, 1, 1.0, floorf(v90));
    LODWORD(v93) = 1132068864;
    objc_msgSend_setPriority_(v92, v94, v95, v93);
  }
  else
  {
    v97 = _NSDictionaryOfVariableBindings(CFSTR("cycleLabel"), v13, 0);
    v99 = objc_msgSend_constraintsWithVisualFormat_options_metrics_views_(v88, v98, (uint64_t)CFSTR("H:|-(>=10)-[cycleLabel]"), 0x10000, 0, v97);
    objc_msgSend_addConstraints_(a1, v100, v99);
    v92 = (void *)objc_msgSend_constraintWithItem_attribute_relatedBy_toItem_attribute_multiplier_constant_(MEMORY[0x24BDD1628], v101, (uint64_t)v13, 2, 0, v10, 9, 1.0, -14.0);
  }
  objc_msgSend_addConstraint_(a1, v96, (uint64_t)v92);
  v102 = (void *)MEMORY[0x24BDD1628];
  v103 = _NSDictionaryOfVariableBindings(CFSTR("cycleLabel, imageView"), v13, v10, 0);
  v105 = objc_msgSend_constraintsWithVisualFormat_options_metrics_views_(v102, v104, (uint64_t)CFSTR("V:|-20-[cycleLabel]-(>=20)-[imageView]-20-|"), 0, 0, v103);
  objc_msgSend_addConstraints_(a1, v106, v105);
  v109 = (void *)MEMORY[0x24BDD1628];
  if (v55 == v62)
  {
    objc_msgSend_frame(v10, v107, v108);
    v111 = v110 * 0.713541667;
    v113 = (void *)objc_msgSend_constraintWithItem_attribute_relatedBy_toItem_attribute_multiplier_constant_(v109, v112, (uint64_t)v42, 9, 0, v10, 1, 1.0, floorf(v111));
    LODWORD(v114) = 1132068864;
    objc_msgSend_setPriority_(v113, v115, v116, v114);
  }
  else
  {
    v118 = _NSDictionaryOfVariableBindings(CFSTR("removeLabel"), v42, 0);
    v120 = objc_msgSend_constraintsWithVisualFormat_options_metrics_views_(v109, v119, (uint64_t)CFSTR("H:[removeLabel]-(>=10)-|"), 0x10000, 0, v118);
    objc_msgSend_addConstraints_(a1, v121, v120);
    v113 = (void *)objc_msgSend_constraintWithItem_attribute_relatedBy_toItem_attribute_multiplier_constant_(MEMORY[0x24BDD1628], v122, (uint64_t)v42, 1, 0, v10, 9, 1.0, 14.0);
  }
  objc_msgSend_addConstraint_(a1, v117, (uint64_t)v113);
  v123 = (void *)MEMORY[0x24BDD1628];
  v124 = _NSDictionaryOfVariableBindings(CFSTR("removeLabel, imageView"), v42, v10, 0);
  v126 = objc_msgSend_constraintsWithVisualFormat_options_metrics_views_(v123, v125, (uint64_t)CFSTR("V:|-20-[removeLabel]-(>=20)-[imageView]-20-|"), 0, 0, v124);
  objc_msgSend_addConstraints_(a1, v127, v126);
  v128 = (void *)MEMORY[0x24BDD1628];
  v129 = _NSDictionaryOfVariableBindings(CFSTR("cycleLabel, removeLabel"), v13, v42, 0);
  v131 = objc_msgSend_constraintsWithVisualFormat_options_metrics_views_(v128, v130, (uint64_t)CFSTR("H:[cycleLabel]-(>=12)-[removeLabel]"), 65544, 0, v129);
  objc_msgSend_addConstraints_(a1, v132, v131);
  return objc_msgSend_setNeedsLayout(a1, v133, v134);
}

uint64_t sub_21A69FEC4(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  int32x2_t v6[2];

  v6[1] = *(int32x2_t *)MEMORY[0x24BDAC8D0];
  v2 = malloc_type_calloc(1uLL, 0x80uLL, 0x1090040AE1C4F64uLL);
  if (!v2)
    return 4294960568;
  v3 = v2;
  *v2 = -2441908381;
  *(_QWORD *)((char *)v2 + 12) = -1;
  if (pipe((int *)v6))
  {
    if (*__error())
    {
      v4 = *__error();
      if (!(_DWORD)v4)
        goto LABEL_5;
    }
    else
    {
      v4 = 4294960596;
    }
    sub_21A6A0598(v3);
    return v4;
  }
LABEL_5:
  v4 = 0;
  *(int32x2_t *)((char *)v3 + 12) = vrev64_s32(v6[0]);
  v3[3] = sub_21A69FFD0;
  v3[4] = sub_21A6A0164;
  v3[5] = sub_21A6A025C;
  v3[6] = sub_21A6A0380;
  *a1 = v3;
  return v4;
}

uint64_t sub_21A69FFD0(uint64_t a1, size_t a2, uint64_t a3, char *__dst, size_t *a5, int a6, unsigned int a7)
{
  size_t v9;
  uint64_t result;
  char *v13;
  uint64_t v14;
  const void *v16;
  uint64_t v17;
  ssize_t v18;

  if (a1 && *(_DWORD *)a1 == 1853058915)
  {
    if (*(_BYTE *)(a1 + 8))
    {
      v9 = 0;
      result = 4294960573;
      goto LABEL_6;
    }
    if ((*(_DWORD *)(a1 + 4) & 0x80000000) != 0)
    {
      v9 = 0;
      result = 4294960551;
    }
    else
    {
      v13 = __dst;
      v14 = a3;
      v16 = *(const void **)(a1 + 64);
      v17 = *(_QWORD *)(a1 + 72) - (_QWORD)v16;
      if (v17 < 1)
      {
        v9 = 0;
      }
      else
      {
        if (v17 >= a3)
          v9 = a3;
        else
          v9 = *(_QWORD *)(a1 + 72) - (_QWORD)v16;
        memcpy(__dst, v16, v9);
        *(_QWORD *)(a1 + 64) += v9;
        v13 += v9;
        v14 -= v9;
      }
      if (v14 >= 1)
      {
        while (1)
        {
          v18 = recv(*(_DWORD *)(a1 + 4), v13, (int)v14, a6);
          if (v18 >= 1)
            break;
          if (!v18)
          {
            if (v9 >= a2)
              result = 0;
            else
              result = 4294960543;
            goto LABEL_6;
          }
          if (!*__error())
          {
            result = 4294960596;
            goto LABEL_6;
          }
          result = *__error();
          if ((_DWORD)result != 4)
          {
            if ((_DWORD)result != 35)
              goto LABEL_6;
            if (v9 >= a2)
              goto LABEL_29;
            result = sub_21A6A0810(a1, *(_DWORD *)(a1 + 4), 0, a7);
            if ((_DWORD)result)
              goto LABEL_6;
LABEL_27:
            result = 0;
            if (v14 <= 0)
              goto LABEL_6;
          }
        }
        v13 += v18;
        v14 -= v18;
        v9 += v18;
        goto LABEL_27;
      }
LABEL_29:
      result = 0;
    }
  }
  else
  {
    v9 = 0;
    result = 4294960556;
  }
LABEL_6:
  if (a5)
    *a5 = v9;
  return result;
}

uint64_t sub_21A6A0164(uint64_t a1, char *a2, uint64_t a3, unsigned int a4)
{
  uint64_t result;
  uint64_t v6;
  ssize_t v9;

  if (!a1)
    return 4294960556;
  if (*(_DWORD *)a1 == 1853058915)
  {
    if (*(_BYTE *)(a1 + 8))
      return 4294960573;
    if ((*(_DWORD *)(a1 + 4) & 0x80000000) != 0)
      return 4294960551;
    v6 = a3;
    if (!a3)
      return 0;
    while (1)
    {
      v9 = send(*(_DWORD *)(a1 + 4), a2, (int)v6, 0);
      if (v9 < 1)
      {
        if (!*__error())
          return 4294960596;
        result = *__error();
        if ((_DWORD)result != 4)
        {
          if ((_DWORD)result != 35)
            return result;
          result = sub_21A6A0810(a1, *(_DWORD *)(a1 + 4), 1, a4);
          if ((_DWORD)result)
            return result;
        }
      }
      else
      {
        a2 += v9;
        v6 -= v9;
      }
      result = 0;
      if (!v6)
        return result;
    }
  }
  return 4294960556;
}

uint64_t sub_21A6A025C(uint64_t a1, iovec *a2, int a3, unsigned int a4)
{
  uint64_t result;
  ssize_t v9;
  ssize_t v10;
  int64_t iov_len;
  BOOL v12;

  if (!a1)
    return 4294960556;
  if (*(_DWORD *)a1 == 1853058915)
  {
    if (*(_BYTE *)(a1 + 8))
      return 4294960573;
    if ((*(_DWORD *)(a1 + 4) & 0x80000000) != 0)
      return 4294960551;
    while (1)
    {
      while (1)
      {
        v9 = writev(*(_DWORD *)(a1 + 4), a2, a3);
        if (v9 < 0)
          break;
        v10 = v9;
        if (a3 < 1)
        {
          if (!a3)
            return 0;
          iov_len = a2->iov_len;
        }
        else
        {
          while (1)
          {
            iov_len = a2->iov_len;
            if (v10 < iov_len)
              break;
            result = 0;
            ++a2;
            v10 -= iov_len;
            v12 = __OFSUB__(a3--, 1);
            if ((a3 < 0) ^ v12 | (a3 == 0))
              return result;
          }
        }
        a2->iov_base = (char *)a2->iov_base + v10;
        a2->iov_len = iov_len - v10;
LABEL_22:
        result = sub_21A6A0810(a1, *(_DWORD *)(a1 + 4), 1, a4);
        if ((_DWORD)result)
          return result;
      }
      if (!*__error())
        return 4294960596;
      result = *__error();
      if ((_DWORD)result != 4)
      {
        if ((_DWORD)result != 35)
          return result;
        goto LABEL_22;
      }
    }
  }
  return 4294960556;
}

uint64_t sub_21A6A0380(uint64_t a1, _QWORD *a2, int a3, _QWORD *a4, int a5, int a6, off_t a7, uint64_t a8, unsigned int a9)
{
  uint64_t v10;
  _QWORD *v17;
  unint64_t v18;
  uint64_t v19;
  void *v20;
  void *v21;
  size_t v22;
  ssize_t v23;
  ssize_t v24;
  uint64_t v25;
  BOOL v26;
  _QWORD *v27;

  if (!a1 || *(_DWORD *)a1 != 1853058915)
    return 4294960556;
  if (*(_BYTE *)(a1 + 8))
    return 4294960573;
  if ((*(_DWORD *)(a1 + 4) & 0x80000000) != 0)
    return 4294960551;
  if (a3 < 1)
  {
LABEL_12:
    if (lseek(a6, a7, 0) != -1)
      goto LABEL_13;
    if (!*__error())
      return 4294960596;
    v10 = *__error();
    if (!(_DWORD)v10)
    {
LABEL_13:
      if (a8 < 1)
      {
        v21 = 0;
LABEL_30:
        if (*(_DWORD *)a1 == 1853058915)
        {
          if (a5 < 1)
          {
LABEL_35:
            v10 = 0;
          }
          else
          {
            v27 = &a4[2 * a5];
            while (1)
            {
              v25 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, _QWORD))(a1 + 32))(a1, *a4, a4[1], a9);
              if ((_DWORD)v25)
                break;
              a4 += 2;
              if (a4 >= v27)
                goto LABEL_35;
            }
LABEL_38:
            v10 = v25;
          }
        }
        else
        {
          v10 = 4294960556;
        }
      }
      else
      {
        v20 = malloc_type_malloc(0x100000uLL, 0xC90692C0uLL);
        if (!v20)
          return 4294960568;
        v21 = v20;
        while (1)
        {
          v22 = a8 >= 0x100000 ? 0x100000 : a8;
          v23 = read(a6, v21, v22);
          v24 = v23;
          if (v23 < 1)
            break;
          v25 = (*(uint64_t (**)(uint64_t, void *, ssize_t, _QWORD))(a1 + 32))(a1, v21, v23, a9);
          if ((_DWORD)v25)
            goto LABEL_38;
          v26 = a8 <= v24;
          a8 -= v24;
          if (v26)
            goto LABEL_30;
        }
        if (v23)
        {
          if (*__error())
            v10 = *__error();
          else
            v10 = 4294960596;
        }
        else
        {
          v10 = 4294960546;
        }
      }
      if (v21)
        free(v21);
    }
  }
  else
  {
    v17 = a2;
    v18 = (unint64_t)&a2[2 * a3];
    while (1)
    {
      v19 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, _QWORD))(a1 + 32))(a1, *v17, v17[1], a9);
      if ((_DWORD)v19)
        return v19;
      v17 += 2;
      if ((unint64_t)v17 >= v18)
        goto LABEL_12;
    }
  }
  return v10;
}

uint64_t sub_21A6A0598(_QWORD *a1)
{
  void (*v2)(_QWORD *);
  int v3;
  int v4;
  int v5;
  void *v6;
  void *v7;

  if (!a1)
    return 4294960556;
  if (*(_DWORD *)a1 != 1853058915)
    return 4294960556;
  v2 = (void (*)(_QWORD *))a1[7];
  if (v2)
    v2(a1);
  v3 = *((_DWORD *)a1 + 1);
  if ((v3 & 0x80000000) == 0)
  {
    if (close(v3) && *__error())
      __error();
    *((_DWORD *)a1 + 1) = -1;
  }
  v4 = *((_DWORD *)a1 + 3);
  if ((v4 & 0x80000000) == 0)
  {
    if (close(v4) && *__error())
      __error();
    *((_DWORD *)a1 + 3) = -1;
  }
  v5 = *((_DWORD *)a1 + 4);
  if ((v5 & 0x80000000) == 0)
  {
    if (close(v5) && *__error())
      __error();
    *((_DWORD *)a1 + 4) = -1;
  }
  v6 = (void *)a1[10];
  if (v6)
  {
    free(v6);
    a1[10] = 0;
  }
  v7 = (void *)a1[14];
  if (v7)
    free(v7);
  free(a1);
  return 0;
}

uint64_t sub_21A6A068C(_DWORD *a1)
{
  if (a1 && *a1 == 1853058915)
    return a1[1];
  else
    return 0xFFFFFFFFLL;
}

uint64_t sub_21A6A06B4(uint64_t a1)
{
  if (!a1)
    return 4294960556;
  if (*(_DWORD *)a1 != 1853058915)
    return 4294960556;
  if (*(_BYTE *)(a1 + 8))
    return 0;
  *(_BYTE *)(a1 + 8) = 1;
  if (write(*(_DWORD *)(a1 + 12), "Q", 1uLL) == 1)
    return 0;
  if (*__error())
    return *__error();
  return 4294960596;
}

uint64_t sub_21A6A073C(uint64_t a1, char *a2, int a3, int a4)
{
  return sub_21A6A074C(a1, (uint64_t)a2, a2, a3, a4);
}

uint64_t sub_21A6A074C(uint64_t a1, uint64_t a2, char *a3, int a4, int a5)
{
  uint64_t result;
  int v7;
  int v8;

  if (!a1)
    return 4294960556;
  if (*(_DWORD *)a1 != 1853058915)
    return 4294960556;
  if (*(_BYTE *)(a1 + 8))
    return 4294960573;
  v8 = -1;
  result = sub_21A72F988(a3, a4, 6, 1000000000 * a5, -1, -1, 0, 0, &v8);
  if ((_DWORD)result == -6722)
    return 4294960543;
  if (!(_DWORD)result)
  {
    v7 = v8;
    *(_DWORD *)(a1 + 4) = v8;
    return (v7 >> 31) & 0xFFFFE59F;
  }
  return result;
}

uint64_t sub_21A6A0810(uint64_t a1, unsigned int a2, int a3, unsigned int a4)
{
  uint64_t result;
  int v9;
  fd_set *v10;
  fd_set *v11;
  unsigned int v12;
  int v13;
  timeval *v14;
  signed int v15;
  int v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  fd_set v29;

  if (!a1)
    return 4294960556;
  if (*(_DWORD *)a1 != 1853058915)
    return 4294960556;
  if (*(_BYTE *)(a1 + 8))
    return 4294960573;
  if ((a2 & 0x80000000) != 0)
    return 4294960551;
  v27 = 0u;
  v28 = 0u;
  v25 = 0u;
  v26 = 0u;
  v23 = 0u;
  v24 = 0u;
  v21 = 0u;
  v22 = 0u;
  v19 = 0;
  v20 = 0;
  memset(&v29, 0, sizeof(v29));
  v9 = *(_DWORD *)(a1 + 16);
  if (__darwin_check_fd_set_overflow(v9, &v29, 0))
    *(__int32_t *)((char *)v29.fds_bits + (((unint64_t)v9 >> 3) & 0x1FFFFFFFFFFFFFFCLL)) |= 1 << v9;
  if (a3 == 2)
  {
    if (!__darwin_check_fd_set_overflow(a2, &v29, 0))
      goto LABEL_21;
    v12 = a2 >> 5;
    v13 = v29.fds_bits[a2 >> 5] | (1 << a2);
    goto LABEL_20;
  }
  if (a3 == 1)
  {
    if (!__darwin_check_fd_set_overflow(a2, &v29, 0))
      goto LABEL_21;
    v12 = a2 >> 5;
    v13 = v29.fds_bits[a2 >> 5] & ~(1 << a2);
LABEL_20:
    v29.fds_bits[v12] = v13;
LABEL_21:
    v27 = 0u;
    v28 = 0u;
    v25 = 0u;
    v26 = 0u;
    v23 = 0u;
    v24 = 0u;
    v21 = 0u;
    v22 = 0u;
    v10 = (fd_set *)&v21;
    v11 = (fd_set *)&v21;
    if (!__darwin_check_fd_set_overflow(a2, &v21, 0))
      goto LABEL_23;
    goto LABEL_22;
  }
  if (a3)
    return 4294960591;
  v10 = &v29;
  v11 = 0;
  if (__darwin_check_fd_set_overflow(a2, &v29, 0))
LABEL_22:
    v10->fds_bits[a2 >> 5] |= 1 << a2;
LABEL_23:
  if ((a4 & 0x80000000) != 0)
  {
    v14 = 0;
  }
  else
  {
    v19 = a4;
    LODWORD(v20) = 0;
    v14 = (timeval *)&v19;
  }
  v15 = *(_DWORD *)(a1 + 16);
  if (v15 <= (int)a2)
    v15 = a2;
  v16 = v15 + 1;
  while (1)
  {
    v17 = select(v16, &v29, v11, 0, v14);
    if ((v17 & 0x80000000) == 0)
      break;
    if (!*__error())
      return 4294960596;
    result = *__error();
    if ((_DWORD)result != 4)
      return result;
  }
  if (v17)
  {
    v18 = *(_DWORD *)(a1 + 16);
    if (!__darwin_check_fd_set_overflow(v18, &v29, 0)
      || ((*(unsigned int *)((char *)v29.fds_bits + (((unint64_t)v18 >> 3) & 0x1FFFFFFFFFFFFFFCLL)) >> v18) & 1) == 0)
    {
      return 0;
    }
    return 4294960573;
  }
  return 4294960574;
}

uint64_t sub_21A6A0A98(char *a1, uint64_t a2, unint64_t a3, uint64_t *a4)
{
  uint64_t result;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v11 = 0;
  if (!sub_21A6A16C4(a1, 0, (unsigned int *)&v11 + 1, (int *)&v11, 0, 0, 0))
  {
    if (a3 >= 0x10)
    {
      *(_QWORD *)a2 = 0;
      *(_QWORD *)(a2 + 8) = 0;
      *(_WORD *)a2 = 528;
      *(_WORD *)(a2 + 2) = bswap32((unsigned __int16)v11) >> 16;
      *(_DWORD *)(a2 + 4) = bswap32(HIDWORD(v11));
      result = 0;
      if (!a4)
        return result;
      v9 = 16;
      goto LABEL_9;
    }
    return 4294960553;
  }
  if (a3 < 0x1C)
    return 4294960553;
  v10 = 0;
  result = sub_21A6A11D4(a1, 0, &v12, &v10, (int *)&v11, 0, 0);
  if (!(_DWORD)result)
  {
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)a2 = 0;
    *(_WORD *)a2 = 7708;
    *(_WORD *)(a2 + 2) = bswap32((unsigned __int16)v11) >> 16;
    *(_OWORD *)(a2 + 8) = v12;
    *(_DWORD *)(a2 + 24) = v10;
    result = 0;
    if (a4)
    {
      v9 = 28;
LABEL_9:
      *a4 = v9;
    }
  }
  return result;
}

uint64_t sub_21A6A0BD8(uint64_t a1)
{
  int v1;

  v1 = *(unsigned __int8 *)(a1 + 1);
  if (v1 == 30 || v1 == 2)
    return bswap32(*(unsigned __int16 *)(a1 + 2)) >> 16;
  else
    return 0xFFFFFFFFLL;
}

uint64_t sub_21A6A0C04(uint64_t result, unsigned int a2)
{
  int v2;

  v2 = *(unsigned __int8 *)(result + 1);
  if (v2 == 30 || v2 == 2)
    *(_WORD *)(result + 2) = bswap32(a2) >> 16;
  return result;
}

uint64_t sub_21A6A0C28(int a1, int a2)
{
  BOOL v3;
  int v4;

  v3 = a2 != 0;
  v4 = fcntl(a1, 3, 0);
  if (fcntl(a1, 4, v4 & 0xFFFFFFFB | (4 * v3)) != -1)
    return 0;
  if (*__error())
    return *__error();
  return 4294960596;
}

uint64_t sub_21A6A0CA0(int a1, int a2, int a3)
{
  uint64_t result;
  int v7;
  signed int v8;
  int v10;
  size_t v11;
  int v12;
  int v13;

  v13 = a3;
  result = 4294960591;
  if ((a1 & 0x80000000) == 0 && (a2 - 4097) <= 1)
  {
    v12 = 0;
    if (a3 < 1)
    {
      if (a3 == -1)
      {
        return 0;
      }
      else
      {
        v7 = -a3;
        v11 = 4;
        if (sysctlbyname("kern.ipc.maxsockbuf", &v12, &v11, 0, 0) && (!*__error() || *__error()))
          v12 = 0x40000;
        v8 = (85 * v12 / 100 + 4095) & 0xFFFFF000;
        if (v8 > v7 && a3 < 0)
          v8 = v7;
        v12 = v8;
        do
        {
          result = setsockopt(a1, 0xFFFF, a2, &v12, 4u);
          if (!(_DWORD)result)
            break;
          if (*__error())
          {
            result = *__error();
            if (!(_DWORD)result)
              return result;
          }
          else
          {
            result = 4294960596;
          }
          v10 = v12;
          v12 -= 1024;
        }
        while (v10 > 33791);
      }
    }
    else
    {
      result = setsockopt(a1, 0xFFFF, a2, &v13, 4u);
      if ((_DWORD)result)
      {
        if (*__error())
          return *__error();
        else
          return 4294960596;
      }
    }
  }
  return result;
}

uint64_t sub_21A6A0E24(int a1, int a2)
{
  uint64_t result;
  int v3;

  v3 = a2;
  result = setsockopt(a1, 0xFFFF, 4356, &v3, 4u);
  if ((_DWORD)result)
  {
    if (*__error())
      return *__error();
    else
      return 4294960596;
  }
  return result;
}

uint64_t sub_21A6A0E74(int a1, int a2, int a3)
{
  BOOL v3;
  int v4;
  int v5;
  uint64_t result;
  int v7;

  v7 = a3;
  if (a1 < 0)
    return 4294960591;
  if (a2 != 30 && a2 != 2 || !a3)
    return 0;
  v3 = a2 == 30;
  if (a2 == 30)
    v4 = 41;
  else
    v4 = 0;
  if (v3)
    v5 = 125;
  else
    v5 = 25;
  result = setsockopt(a1, v4, v5, &v7, 4u);
  if ((_DWORD)result)
  {
    if (*__error())
      return *__error();
    else
      return 4294960596;
  }
  return result;
}

uint64_t sub_21A6A0EFC(uint64_t a1)
{
  int v1;
  unsigned int v2;

  v1 = *(unsigned __int8 *)(a1 + 1);
  if (v1 == 30)
    v2 = 28;
  else
    v2 = 0;
  if (v1 == 2)
    return 16;
  else
    return v2;
}

unsigned __int8 *sub_21A6A0F1C(unsigned __int8 *__src, void *__dst)
{
  int v2;
  size_t v3;

  v2 = __src[1];
  if (v2 == 2)
  {
    v3 = 16;
  }
  else
  {
    if (v2 != 30)
      return __src;
    v3 = 28;
  }
  return (unsigned __int8 *)memcpy(__dst, __src, v3);
}

uint64_t sub_21A6A0F50(int a1)
{
  unsigned __int8 *v1;
  int v3;

  v3 = a1;
  v1 = (unsigned __int8 *)&unk_21A73EE28;
  while (!sub_21A6A0FB0((unsigned __int8 *)&v3, v1, v1[4]))
  {
    v1 += 5;
    if (v1 >= byte_21A73EE73)
      return 0;
  }
  return 1;
}

BOOL sub_21A6A0FB0(unsigned __int8 *a1, unsigned __int8 *a2, unsigned int a3)
{
  uint64_t v3;
  unsigned __int8 *v4;
  unsigned __int8 *v5;

  if (a3 >= 8)
  {
    v3 = ((a3 - 8) >> 3) + 1;
    v4 = &a2[v3];
    v5 = &a1[v3];
    while (*a1 == *a2)
    {
      ++a2;
      ++a1;
      LOBYTE(a3) = a3 - 8;
      if (a3 <= 7u)
      {
        a1 = v5;
        a2 = v4;
        return !(_BYTE)a3 || ((-256 >> a3) & (*a2 ^ *a1)) == 0;
      }
    }
    return 0;
  }
  return !(_BYTE)a3 || ((-256 >> a3) & (*a2 ^ *a1)) == 0;
}

BOOL sub_21A6A102C(unsigned __int8 *a1, char a2)
{
  uint64_t v4;

  v4 = 0;
  while (!sub_21A6A0FB0(a1, *(unsigned __int8 **)((char *)&off_24DD070A0 + v4), *((unsigned __int8 *)&off_24DD070A0 + v4 + 8)))
  {
    v4 += 16;
    if (v4 == 400)
      return 0;
  }
  if ((a2 & 1) != 0 && !v4 || (a2 & 2) != 0 && v4 == 320)
    return 0;
  return (a2 & 4) == 0 || v4 != 304;
}

BOOL sub_21A6A10B4(unsigned int a1)
{
  _BOOL8 result;
  unsigned int v3;
  unsigned int v4;

  result = 0;
  v3 = bswap32(a1);
  if ((v3 & 0xFFFF0000) != 0xA9FE0000 && (v3 + 0x20000000) >> 24 >= 0x21 && (v3 & 0xFF000000) != 0x7F000000)
  {
    result = 0;
    if ((v3 & 0xFFFF0000) != 0xC0A80000 && (v3 & 0xFF000000) != 0xA000000 && (v3 & 0xFFF00000) != 0xAC100000)
    {
      result = 0;
      v4 = v3 >> 8;
      if (v4 != 12582914 && v4 != 12989284)
        return v4 != 13303921;
    }
  }
  return result;
}

BOOL sub_21A6A115C(const char *a1)
{
  return strncmp(a1, "awdl", 4uLL) == 0;
}

uint64_t sub_21A6A1184(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  unsigned int v3;
  unsigned int v4;

  v2 = bswap32(*(_DWORD *)a1);
  v3 = bswap32(*(_DWORD *)a2);
  if (v2 == v3)
  {
    v2 = bswap32(*(unsigned __int16 *)(a1 + 4)) >> 16;
    v4 = bswap32(*(unsigned __int16 *)(a2 + 4));
    if (v2 == HIWORD(v4))
      return 0;
    v3 = HIWORD(v4);
  }
  if (v2 < v3)
    return 0xFFFFFFFFLL;
  else
    return 1;
}

uint64_t sub_21A6A11D4(_BYTE *a1, char a2, _OWORD *a3, unsigned int *a4, int *a5, unsigned int *a6, _QWORD *a7)
{
  _BYTE *v12;
  int v13;
  unint64_t v14;
  char *v15;
  unsigned int v16;
  _BYTE *v17;
  char *v18;
  char v19;
  int v20;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  unsigned int *v32;
  unsigned int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  unsigned int v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  uint64_t i;
  int v49;
  BOOL v50;
  BOOL v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  char *v56;
  int v57;
  BOOL v58;
  _OWORD *v60;
  unsigned int *v61;
  int *v62;
  unsigned int *v63;
  _QWORD *v64;
  int v65;
  __int128 v66;
  char v67[64];
  uint64_t v68;

  v68 = *MEMORY[0x24BDAC8D0];
  if (!a1)
    return 4294960591;
  v12 = a1 + 1;
  if (*a1 != 91)
    v12 = a1;
  *(_QWORD *)v67 = v12;
  v66 = 0uLL;
  if (*v12 == 58)
  {
    v13 = *++v12;
    *(_QWORD *)v67 = v12;
    if (v13 != 58)
      return 4294960554;
  }
  v14 = 0;
  v15 = 0;
LABEL_7:
  v16 = 0;
  v17 = v12;
  v18 = v15;
  while (2)
  {
    v15 = v18;
    v12 = v17 + 1;
    v19 = 1;
    while (1)
    {
      v20 = *(v12 - 1);
      if ((v20 - 37) <= 0x38 && ((1 << (v20 - 37)) & 0x100000000000401) != 0
        || v20 == 0)
      {
        *(_QWORD *)v67 = v12;
        goto LABEL_32;
      }
      v20 = (char)v20;
      if (((char)v20 - 97) < 6)
        v20 = (char)v20 - 32;
      v23 = v20 - 48;
      if (v23 >= 0xA && (v20 - 65) > 5)
        break;
      v19 = 0;
      ++v12;
      v16 = byte_21A73EF46[v23] | (16 * v16);
      if (v16 >= 0x10000)
        return 4294960586;
    }
    if (v20 == 58)
    {
      if ((v19 & 1) != 0)
      {
        v17 = v12;
        v18 = &v67[v14 - 16];
        if (!v15)
          continue;
        return 4294960554;
      }
      *(_QWORD *)v67 = v12;
      if (*v12)
      {
        if (v14 <= 0xE)
        {
          v25 = v14 | 1;
          v67[v14 - 16] = BYTE1(v16);
          v14 += 2;
          v67[v25 - 16] = v16;
          goto LABEL_7;
        }
        return 4294960545;
      }
      return 4294960546;
    }
    break;
  }
  *(_QWORD *)v67 = v12;
  if ((a2 & 8) == 0 && v20 == 46 && v14 <= 0xC)
  {
    v32 = a6;
    v31 = sub_21A6A185C(v17, &v67[v14 - 16], v67);
    if ((_DWORD)v31)
      return v31;
    v14 += 4;
    v12 = (_BYTE *)++*(_QWORD *)v67;
    a6 = v32;
    if (!v15)
      goto LABEL_48;
LABEL_36:
    if ((uint64_t)v14 <= 15)
    {
      v27 = (char *)(&v67[v14 - 16] - v15);
      if ((int)(&v67[v14 - 16] - (_DWORD)v15) >= 1)
      {
        v28 = ((_DWORD)v27 + 1) - 1;
        v29 = (char *)&v66 + 15;
        v30 = &v15[(int)v27 - 1];
        do
        {
          *v29-- = *v30;
          *v30-- = 0;
          --v28;
        }
        while (v28);
        v12 = *(_BYTE **)v67;
      }
      goto LABEL_49;
    }
    return 4294960545;
  }
LABEL_32:
  if ((v19 & 1) == 0)
  {
    if (v14 > 0xE)
      return 4294960545;
    v26 = v14 | 1;
    v67[v14 - 16] = BYTE1(v16);
    v14 += 2;
    v67[v26 - 16] = v16;
  }
  if (v15)
    goto LABEL_36;
LABEL_48:
  if (v14 != 16)
    return 4294960546;
LABEL_49:
  v33 = 0;
  v34 = 0;
  v35 = 0;
  v36 = 0;
  v37 = 0;
  v38 = 0;
  v39 = 0;
  v40 = v12 - 1;
  v41 = a2 & 1;
  v42 = a2 & 4;
LABEL_50:
  while (2)
  {
    v43 = *v40;
    while (1)
    {
      while (v43 == 47)
      {
        if (v37 | a2 & 2)
        {
          v58 = v37 == 0;
          goto LABEL_105;
        }
        v44 = *++v40;
        v43 = v44;
        if ((v44 - 48) <= 9)
        {
          do
          {
            v38 = v43 + 10 * v38 - 48;
            v45 = *++v40;
            v43 = v45;
          }
          while ((v45 - 48) < 0xA);
        }
        v37 = 1;
        if (v38 >= 0x81)
          return 4294960586;
      }
      if (v43 == 93)
      {
        if ((_DWORD)v39)
          return 4294960554;
        ++v40;
        v39 = 1;
        goto LABEL_50;
      }
      if (v43 != 58)
        break;
      if (v35 | v41)
      {
        v58 = v35 == 0;
        goto LABEL_105;
      }
      v46 = *++v40;
      v43 = v46;
      if ((v46 - 48) <= 9)
      {
        do
        {
          v36 = v43 + 10 * v36 - 48;
          v47 = *++v40;
          v43 = v47;
        }
        while ((v47 - 48) < 0xA);
      }
      v31 = 4294960586;
      v35 = 1;
      if (v36 >= 0x10000)
        return v31;
    }
    if (v43 == 37)
    {
      if (v34 | v42)
      {
        v58 = v34 == 0;
LABEL_105:
        if (v58)
          return 4294960560;
        else
          return 4294960554;
      }
      v64 = a7;
      for (i = 0; ; ++i)
      {
        v49 = v40[i + 1];
        v50 = (v49 - 47) > 0x2E || ((1 << (v49 - 47)) & 0x400000000801) == 0;
        v51 = !v50 || v49 == 0;
        if (v51 || i == 63)
          break;
        v67[i] = v49;
      }
      v60 = a3;
      v61 = a4;
      v62 = a5;
      v63 = a6;
      v67[i] = 0;
      v52 = v41;
      v53 = v39;
      v54 = v42;
      v65 = v35;
      v33 = if_nametoindex(v67);
      v35 = v65;
      v42 = v54;
      v39 = v53;
      v41 = v52;
      if (v33)
        goto LABEL_87;
      v55 = v67[0];
      if (v67[0] - 48 > 9)
      {
        v33 = 0;
        v56 = v67;
      }
      else
      {
        v33 = 0;
        v56 = v67;
        do
        {
          v33 = v55 + 10 * v33 - 48;
          v57 = *++v56;
          v55 = v57;
        }
        while ((v57 - 48) < 0xA);
      }
      if (!v55 && v56 != v67 && (int)((_DWORD)v56 - v67) < 11)
      {
LABEL_87:
        v40 += i + 1;
        v34 = 1;
        a6 = v63;
        a7 = v64;
        a4 = v61;
        a5 = v62;
        a3 = v60;
        continue;
      }
      return 4294960554;
    }
    break;
  }
  if (a3)
    *a3 = v66;
  if (a4 && v34)
    *a4 = v33;
  if (a5 && v35)
    *a5 = v36;
  if (a6 && v37)
    *a6 = v38;
  v31 = 0;
  if (a7)
    *a7 = v40;
  return v31;
}

uint64_t sub_21A6A16C4(char *a1, char a2, unsigned int *a3, int *a4, int *a5, int *a6, char **a7)
{
  uint64_t result;
  char *v14;
  int v15;
  int v16;
  int v17;
  int v18;
  unsigned int v19;
  int v20;
  int v21;
  unsigned int v22;
  int v23;
  int v24;
  int v25;
  unsigned int v26;
  char *v27;

  v27 = a1;
  if (!a1)
    return 4294960591;
  result = sub_21A6A185C(a1, &v26, &v27);
  if (!(_DWORD)result)
  {
    v14 = v27;
    v15 = *v27;
    if (v15 == 58)
    {
      if ((a2 & 1) != 0)
        return 4294960560;
      v14 = v27 + 1;
      v16 = v27[1];
      if ((v16 - 48) > 9)
      {
        v17 = 0;
        ++v27;
      }
      else
      {
        v17 = 0;
        do
        {
          v17 = v16 + 10 * v17 - 48;
          v18 = *++v14;
          v16 = v18;
        }
        while ((v18 - 48) < 0xA);
        v27 = v14;
        if (v17 >= 0x10000)
          return 4294960586;
      }
    }
    else
    {
      v17 = 0;
      v16 = *v27;
    }
    v19 = bswap32(v26);
    if (v16 != 47)
    {
      v24 = 0;
      v25 = 0;
      if (!a3)
        goto LABEL_22;
      goto LABEL_21;
    }
    if ((a2 & 2) == 0)
    {
      v21 = *++v14;
      v20 = v21;
      if ((v21 - 48) > 9)
      {
        LOBYTE(v22) = 0;
      }
      else
      {
        v22 = 0;
        do
        {
          v22 = v20 + 10 * v22 - 48;
          v23 = *++v14;
          v20 = v23;
        }
        while ((v23 - 48) < 0xA);
        if (v22 > 0x20)
          return 4294960586;
      }
      v24 = -1 << -(char)v22;
      v25 = v24 & v19 | 1;
      if (!a3)
        goto LABEL_22;
LABEL_21:
      *a3 = v19;
LABEL_22:
      if (a4 && v15 == 58)
        *a4 = v17;
      if (a5 && v16 == 47)
        *a5 = v24;
      if (a6 && v16 == 47)
        *a6 = v25;
      result = 0;
      if (a7)
        *a7 = v14;
      return result;
    }
    return 4294960560;
  }
  return result;
}

uint64_t sub_21A6A185C(_BYTE *a1, _BYTE *a2, _QWORD *a3)
{
  int v3;
  unsigned int v4;
  int v5;
  int v6;
  int v7;
  uint64_t v8;

  *a2 = 0;
  v3 = *a1;
  if (!*a1)
    return 4294960546;
  LOBYTE(v4) = 0;
  v5 = 0;
  v6 = 0;
  do
  {
    if ((v3 - 48) <= 9)
    {
      v4 = v3 + 10 * v4 - 48;
      if (v4 > 0xFF)
        return 4294960586;
      *a2 = v4;
      if (!v5)
      {
        if (v6 > 3)
          return 4294960545;
        ++v6;
      }
      v5 = 1;
      goto LABEL_13;
    }
    if (!v5 || v3 != 46)
      break;
    if (v6 > 3)
      return 4294960554;
    LOBYTE(v4) = 0;
    v5 = 0;
    *++a2 = 0;
LABEL_13:
    v7 = *++a1;
    v3 = v7;
  }
  while (v7);
  if (v6 != 4)
    return 4294960546;
  v8 = 0;
  *a3 = a1;
  return v8;
}

char *sub_21A6A1914(_BYTE *a1, unsigned int a2, int a3, unsigned int a4, char *a5)
{
  unsigned int v7;
  unsigned int v8;
  char *v9;
  _BOOL4 v10;
  int v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  int v21;
  _BYTE *v22;
  uint64_t i;
  uint64_t v24;
  int v25;
  int v26;
  int v27;
  char v28;
  char *v29;
  int v30;
  BOOL v31;
  char *v32;
  char v33;
  unsigned __int8 *v34;
  int v35;
  char *v36;
  char v37;
  char *v38;
  char v39;
  char *v41;
  char v42;
  uint64_t j;
  unsigned int v44;
  char *v45;
  char v46;
  _BYTE v47[32];
  char v48[40];
  char v49[64];
  uint64_t v50;

  v7 = a3;
  v8 = a2;
  v50 = *MEMORY[0x24BDAC8D0];
  if (a3 > 0 || (v9 = a5, a3 == -2))
  {
    *a5 = 91;
    v9 = a5 + 1;
  }
  if (*a1 || a1[1])
    goto LABEL_30;
  v10 = !a1[2]
     && !a1[3]
     && !a1[4]
     && !a1[5]
     && !a1[6]
     && !a1[7]
     && !a1[8]
     && !a1[9]
     && a1[10] == 255
     && a1[11] == 255;
  if (a1[2] || a1[3] || a1[4] || a1[5] || a1[6] || a1[7] || a1[8] || a1[9] || a1[10] || a1[11])
  {
    v11 = 0;
    goto LABEL_27;
  }
  if (a1[12] || a1[13])
    goto LABEL_101;
  if (a1[14] || (v11 = a1[15], a1[15]))
  {
    if (a1[14])
    {
LABEL_101:
      v11 = 1;
      goto LABEL_27;
    }
    v11 = a1[15] != 1;
  }
LABEL_27:
  if ((v10 | v11) != 1)
  {
LABEL_30:
    v12 = 0;
    v13 = v48;
    while (1)
    {
      v14 = v12 | 1;
      v15 = a1[v12];
      if (v15 >= 0x10)
      {
        *v13 = a0123456789abcd_1[v15 >> 4];
        LODWORD(v15) = v15 & 0xF;
        v16 = 1;
      }
      else
      {
        if (!a1[v12])
        {
          v18 = 0;
          v20 = 0;
          v12 += 2;
          v19 = a1[v14];
          if (v19 < 0x10)
            goto LABEL_37;
          goto LABEL_36;
        }
        v16 = 0;
      }
      v17 = a0123456789abcd_1[v15];
      v18 = v16 + 1;
      v13[v16] = v17;
      v12 += 2;
      v19 = a1[v14];
LABEL_36:
      v20 = v18 + 1;
      v13[v18] = a0123456789abcd_1[(unint64_t)v19 >> 4];
LABEL_37:
      *(_WORD *)&v13[v20] = a0123456789abcd_1[v19 & 0xF];
      v13 += 5;
      if (v12 >= 0x10)
      {
        v21 = 0;
        v22 = a1 + 15;
        for (i = 28; i != -4; i -= 4)
        {
          if (*(v22 - 1))
          {
            v21 = 0;
          }
          else if (*v22)
          {
            v21 = 0;
          }
          else
          {
            ++v21;
          }
          *(_DWORD *)&v47[i] = v21;
          v22 -= 2;
        }
        v24 = 0;
        v25 = 0;
        v26 = -1;
        do
        {
          if (*(_DWORD *)&v47[4 * v24] > v25)
          {
            v25 = *(_DWORD *)&v47[4 * v24];
            v26 = v24;
          }
          ++v24;
        }
        while (v24 != 8);
        v27 = 0;
        while (1)
        {
          if (v27 == v26)
          {
            if (!v26)
              *v9++ = 58;
            *v9 = 58;
            v27 = v26 - 1 + *(_DWORD *)&v47[4 * v26];
          }
          else
          {
            v28 = v48[5 * v27];
            if (v28)
            {
              v29 = &v48[5 * v27 + 1];
              do
              {
                *v9++ = v28;
                v30 = *v29++;
                v28 = v30;
              }
              while (v30);
            }
            if (v27 == 7)
              goto LABEL_62;
            *v9 = 58;
          }
          ++v9;
          v31 = v27++ < 7;
          if (!v31)
            goto LABEL_62;
        }
      }
    }
  }
  *(_WORD *)v9 = 14906;
  if (v10)
  {
    *(_DWORD *)(v9 + 2) = 1717986918;
    v9[6] = 58;
    v9 += 7;
  }
  else
  {
    v9 += 2;
  }
  for (j = 12; ; ++j)
  {
    v44 = a1[j];
    v45 = v49;
    do
    {
      *v45++ = (v44 % 0xA) | 0x30;
      v31 = v44 > 9;
      v44 /= 0xAu;
    }
    while (v31);
    while (v45 > v49)
    {
      v46 = *--v45;
      *v9++ = v46;
    }
    if (j == 15)
      break;
    *v9++ = 46;
  }
LABEL_62:
  if (a2)
  {
    *v9++ = 37;
    v32 = if_indextoname(a2, v49);
    if (v32)
    {
      v33 = *v32;
      if (*v32)
      {
        v34 = (unsigned __int8 *)(v32 + 1);
        do
        {
          *v9++ = v33;
          v35 = *v34++;
          v33 = v35;
        }
        while (v35);
      }
    }
    else
    {
      v41 = v49;
      do
      {
        *v41++ = (v8 % 0xA) | 0x30;
        v31 = v8 > 9;
        v8 /= 0xAu;
      }
      while (v31);
      while (v41 > v49)
      {
        v42 = *--v41;
        *v9++ = v42;
      }
    }
  }
  if ((int)v7 < 1)
  {
    if (v7 == -2)
      *v9++ = 93;
  }
  else
  {
    *(_WORD *)v9 = 14941;
    v36 = v49;
    do
    {
      *v36++ = (v7 % 0xA) | 0x30;
      v31 = v7 > 9;
      v7 /= 0xAu;
    }
    while (v31);
    v9 += 2;
    while (v36 > v49)
    {
      v37 = *--v36;
      *v9++ = v37;
    }
  }
  if ((a4 & 0x80000000) == 0)
  {
    *v9 = 47;
    v38 = v49;
    do
    {
      *v38++ = (a4 % 0xA) | 0x30;
      v31 = a4 > 9;
      a4 /= 0xAu;
    }
    while (v31);
    ++v9;
    while (v38 > v49)
    {
      v39 = *--v38;
      *v9++ = v39;
    }
  }
  *v9 = 0;
  return a5;
}

uint64_t sub_21A6A1E24(unsigned __int8 *a1, unint64_t a2)
{
  int v2;
  int v3;
  int v4;
  int v5;

  v2 = 0x2000;
  if (a2)
  {
    if (*a1)
      v3 = *a1 << 8;
    else
      v3 = 0x2000;
    v4 = 32;
    if (a2 == 1)
    {
      v5 = 32;
    }
    else
    {
      if (a1[1])
        v5 = a1[1];
      else
        v5 = 32;
      v2 = 0x2000;
      if (a2 >= 3)
      {
        if (a1[2])
          v2 = a1[2] << 8;
        else
          v2 = 0x2000;
        v4 = 32;
        if (a2 != 3)
        {
          if (a1[3])
            v4 = a1[3];
          else
            v4 = 32;
        }
      }
    }
  }
  else
  {
    v5 = 32;
    v3 = 0x2000;
    v4 = 32;
  }
  return v4 | v2 | ((v3 | v5) << 16);
}

uint64_t sub_21A6A1EB0(char *__s, size_t a2, int a3, _BYTE *a4)
{
  char *v6;
  char *v7;
  uint64_t v8;
  int v9;
  int v10;
  char *v11;
  __darwin_ct_rune_t v12;

  v6 = __s;
  if (a2 == -1)
    a2 = strlen(__s);
  if (a3 < 1)
    return 0;
  v7 = &v6[a2];
  v8 = MEMORY[0x24BDAC740];
LABEL_5:
  if (v6 < v7)
  {
    v9 = 0;
    v10 = 0;
    v11 = v6 + 1;
    while (1)
    {
      v6 = v11;
      v12 = *(v11 - 1);
      if ((v12 - 48) > 9)
      {
        if ((*(_DWORD *)(v8 + 4 * *(v11 - 1) + 60) & 0x10000) == 0)
        {
          if (v10)
            goto LABEL_20;
          if ((char)v12 > 0x3A || ((1 << v12) & 0x400200100000000) == 0)
            return 4294960554;
          v10 = 0;
          goto LABEL_18;
        }
        v9 = __tolower(v12) + 16 * v9 - 87;
      }
      else
      {
        v9 = (char)v12 + 16 * v9 - 48;
      }
      ++v10;
LABEL_18:
      if (v10 <= 1)
      {
        v11 = v6 + 1;
        if (v6 < v7)
          continue;
      }
LABEL_20:
      if (!v10)
        return 4294960554;
      if (a4)
        *a4++ = v9;
      if (a3-- <= 1)
        return 0;
      goto LABEL_5;
    }
  }
  return 4294960554;
}

_BYTE *sub_21A6A1FDC(unsigned __int8 *a1, uint64_t a2, _BYTE *a3)
{
  _BYTE *v3;
  unsigned __int8 *v4;
  _BYTE *v5;
  unsigned int v6;

  v3 = a3;
  if (a2 >= 1)
  {
    v4 = &a1[a2];
    v3 = a3;
    do
    {
      v5 = a3;
      if (v3 != a3)
      {
        *v3 = 58;
        v5 = v3 + 1;
      }
      v6 = *a1++;
      *v5 = a0123456789abcd_0[(unint64_t)v6 >> 4];
      v3 = v5 + 2;
      v5[1] = a0123456789abcd_0[v6 & 0xF];
    }
    while (a1 < v4);
  }
  *v3 = 0;
  return a3;
}

uint64_t sub_21A6A2044(char *__s, int64_t a2, int *a3)
{
  int64_t v4;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  _BOOL4 v14;
  unsigned int v15;
  unsigned int v16;
  char *v17;
  char *v18;
  unsigned int v19;
  BOOL v20;
  uint64_t result;
  unsigned int v22;
  unsigned int v23;
  char v24;
  unsigned int v25;
  unsigned int v26;
  int v27;
  char *v28;
  __darwin_ct_rune_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  BOOL v35;
  int v36;
  int v37;
  char *v38;
  char *v39;
  unsigned int v40;
  _BOOL4 v42;
  BOOL v43;
  unsigned int v44;
  char v45;
  __darwin_ct_rune_t v46;
  char v47;

  v4 = a2;
  if (a2 == -1)
    v4 = strlen(__s);
  v6 = &__s[v4];
  if (v4 < 1)
  {
    v8 = __s;
  }
  else
  {
    v7 = MEMORY[0x24BDAC740];
    v8 = __s;
    do
    {
      v9 = *v8;
      if (*v8 < 0)
      {
        if (!__maskrune(v9, 0x4000uLL))
          break;
      }
      else if ((*(_DWORD *)(v7 + 4 * v9 + 60) & 0x4000) == 0)
      {
        break;
      }
      ++v8;
    }
    while (v8 < v6);
  }
  if (v8 >= v6)
  {
    v14 = 0;
LABEL_21:
    v10 = v8;
    goto LABEL_22;
  }
  if (*v8 - 48 > 9)
  {
    v14 = 1;
    goto LABEL_21;
  }
  v10 = &__s[v4];
  v11 = v8 + 1;
  v12 = &__s[v4 + ~(unint64_t)v8];
  while (1)
  {
    v13 = v11;
    if (!v12)
      break;
    ++v11;
    --v12;
    if (*v13 - 48 > 9)
    {
      v10 = v13;
      break;
    }
  }
  v14 = v13 < v6;
LABEL_22:
  if (v8 == v10)
    return 4294960554;
  v15 = sub_21A6A23C0(v8, v10 - v8, 10);
  if (v15 > 0xFF)
    return 4294960586;
  v16 = v15;
  v17 = &v10[v14];
  if (v17 >= v6)
  {
    v20 = 1;
    v18 = v17;
  }
  else
  {
    v18 = v17;
    while (1)
    {
      v19 = *v18 - 48;
      v20 = v19 < 0xA;
      if (v19 > 9)
        break;
      if (++v18 >= v6)
      {
        v18 = &__s[v4];
        break;
      }
    }
  }
  v22 = sub_21A6A23C0(v17, v18 - v17, 10);
  if (v22 > 0xF)
    return 4294960586;
  v23 = v22;
  v24 = v17 == v18 || v20;
  if ((v24 & 1) == 0)
  {
    v28 = v18 + 1;
    v29 = __tolower(*v18);
    if (v29 != 46)
    {
      v25 = 0;
      v30 = v28;
      goto LABEL_46;
    }
    if (v28 >= v6)
    {
      v31 = 1;
      v30 = v18 + 1;
      v35 = 1;
    }
    else
    {
      if (v18[1] - 48 > 9)
      {
        v47 = 0;
        v31 = 1;
        v30 = v18 + 1;
LABEL_79:
        v44 = sub_21A6A23C0(v18 + 1, v31 - 1, 10);
        if (v44 <= 0xF)
        {
          v25 = v44;
          v45 = v47;
          if (v31 == 1)
            v45 = 1;
          if ((v45 & 1) != 0)
          {
            v37 = 0x8000;
LABEL_54:
            v38 = v30;
            if (v30 < v6)
            {
              v39 = (char *)(&__s[v4] - v30);
              v38 = v30;
              while (*v38 - 48 <= 9)
              {
                ++v38;
                if (!--v39)
                {
                  v38 = &__s[v4];
                  break;
                }
              }
            }
            if (v30 >= v38)
              v40 = 0;
            else
              v40 = sub_21A6A23C0(v30, v38 - v30, 10);
            v42 = v30 == v38 || v40 > 0xFF;
            v43 = !v42;
            if (v42)
              v27 = 0x8000;
            else
              v27 = v37;
            if (v43)
              v26 = v40;
            else
              v26 = 0;
            goto LABEL_74;
          }
          v46 = *v30++;
          v29 = __tolower(v46);
LABEL_46:
          if (v29 == 100)
            v36 = 0x2000;
          else
            v36 = 0x8000;
          if (v29 == 98)
            v36 = 24576;
          if (v29 == 97)
            v37 = 0x4000;
          else
            v37 = v36;
          goto LABEL_54;
        }
        return 4294960586;
      }
      v30 = &__s[v4];
      v31 = &__s[v4] - v18;
      v32 = 2;
      while (1)
      {
        v33 = v32;
        if (v31 == v32)
          break;
        v34 = v18[v32++] - 48;
        if (v34 > 9)
        {
          v31 = v33;
          v30 = &v18[v33];
          break;
        }
      }
      v35 = &v18[v33] >= v6;
    }
    v47 = v35;
    goto LABEL_79;
  }
  v25 = 0;
  v26 = 0;
  v27 = 0x8000;
LABEL_74:
  result = 0;
  if (a3)
    *a3 = (v23 << 20) | (v16 << 24) | (v25 << 16) | v27 | v26;
  return result;
}

uint64_t sub_21A6A23C0(char *__s, int64_t a2, int a3)
{
  int64_t v4;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  int v14;
  char *v15;
  int v16;
  int v17;
  unsigned int v18;
  int v19;
  int v20;
  unsigned int v21;
  char *v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;

  v4 = a2;
  if (a2 == -1)
    v4 = strlen(__s);
  v6 = &__s[v4];
  if (v4 < 1)
  {
    v8 = __s;
  }
  else
  {
    v7 = MEMORY[0x24BDAC740];
    v8 = __s;
    do
    {
      v9 = *v8;
      if (*v8 < 0)
      {
        if (!__maskrune(v9, 0x4000uLL))
          break;
      }
      else if ((*(_DWORD *)(v7 + 4 * v9 + 60) & 0x4000) == 0)
      {
        break;
      }
      ++v8;
    }
    while (v8 < v6);
  }
  if (v6 - v8 <= 1)
  {
    if (a3)
      goto LABEL_22;
  }
  else
  {
    if (*v8 == 48)
    {
      if (__tolower(v8[1]) == 120)
      {
        v8 += 2;
        a3 = 16;
LABEL_22:
        v10 = a3 - 2;
        goto LABEL_27;
      }
      if (*v8 == 48 && __tolower(v8[1]) == 98)
      {
        v8 += 2;
        a3 = 2;
        goto LABEL_22;
      }
    }
    if (a3)
      goto LABEL_22;
    if (*v8 == 48 && (v8[1] & 0xF8) == 0x30)
    {
      a3 = 8;
      ++v8;
      goto LABEL_22;
    }
  }
  v10 = 8;
LABEL_27:
  v11 = 0;
  HIDWORD(v12) = v10;
  LODWORD(v12) = v10;
  switch((v12 >> 1))
  {
    case 0u:
      if (v8 >= v6)
        goto LABEL_54;
      v11 = 0;
      v13 = (char *)(&__s[v4] - v8);
      do
      {
        v14 = *v8;
        if ((v14 - 50) < 0xFFFFFFFE)
          break;
        ++v8;
        v11 = (v14 + 2 * v11 - 48);
        --v13;
      }
      while (v13);
      break;
    case 3u:
      if (v8 >= v6)
        goto LABEL_54;
      v11 = 0;
      v15 = (char *)(&__s[v4] - v8);
      do
      {
        v16 = *v8;
        if ((v16 - 56) < 0xFFFFFFF8)
          break;
        ++v8;
        v11 = (v16 + 8 * v11 - 48);
        --v15;
      }
      while (v15);
      break;
    case 4u:
      v17 = *v8;
      if (v17 == 45 || v17 == 43)
        ++v8;
      v18 = 0;
      while (v8 < v6)
      {
        v20 = *v8++;
        v19 = v20;
        if (v20 != 44)
        {
          v21 = v19 - 48;
          if (v21 > 9)
            break;
          v18 = v21 + 10 * v18;
        }
      }
      if (v17 == 45)
        v11 = -v18;
      else
        v11 = v18;
      break;
    case 7u:
      if (v8 >= v6)
      {
LABEL_54:
        v11 = 0;
      }
      else
      {
        v11 = 0;
        v22 = (char *)(&__s[v4] - v8);
        v23 = MEMORY[0x24BDAC740];
        do
        {
          v25 = *v8++;
          v24 = v25;
          v26 = v25 - 48;
          if (v25 - 48 > 9)
          {
            if ((*(_DWORD *)(v23 + 4 * v24 + 60) & 0x10000) == 0)
              return v11;
            v11 = (__tolower(v24) + 16 * v11 - 87);
          }
          else
          {
            v11 = v26 + 16 * (_DWORD)v11;
          }
          --v22;
        }
        while (v22);
      }
      break;
    default:
      return v11;
  }
  return v11;
}

uint64_t sub_21A6A2654(char *__s, int64_t a2)
{
  int64_t v2;
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  unsigned int v8;
  char *v9;
  int v10;
  char *v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;

  v2 = a2;
  if (a2 == -1)
    v2 = strlen(__s);
  v4 = &__s[v2];
  if (v2 < 1)
  {
    v6 = __s;
  }
  else
  {
    v5 = MEMORY[0x24BDAC740];
    v6 = __s;
    do
    {
      v7 = *v6;
      if (*v6 < 0)
      {
        if (!__maskrune(v7, 0x4000uLL))
          break;
      }
      else if ((*(_DWORD *)(v5 + 4 * v7 + 60) & 0x4000) == 0)
      {
        break;
      }
      ++v6;
    }
    while (v6 < v4);
  }
  if (v6 >= v4)
  {
    v10 = 0;
    v8 = 0;
  }
  else
  {
    v8 = 0;
    v9 = (char *)(&__s[v2] - v6);
    while (1)
    {
      v10 = *v6;
      if ((v10 - 48) > 9 || v8 >= 0x346DC)
        break;
      v8 = v10 - 48 + 10 * v8;
      ++v6;
      if (!--v9)
      {
        v6 = &__s[v2];
        break;
      }
    }
    if (v8 > 0x346DB)
      return 0;
  }
  if (v10 == 46)
    v12 = v6 + 1;
  else
    v12 = v6;
  if (v12 >= v4)
  {
    v13 = 0;
  }
  else
  {
    v13 = 0;
    while (1)
    {
      v10 = *v12;
      if ((v10 - 48) > 9 || v13 > 0x63)
        break;
      v13 = v10 - 48 + 10 * v13;
      if (++v12 >= v4)
      {
        v12 = &__s[v2];
        break;
      }
    }
    if (v13 > 0x63)
      return 0;
  }
  if (v10 == 46)
    ++v12;
  if (v12 >= v4)
  {
    v14 = 0;
  }
  else
  {
    v14 = 0;
    do
    {
      v15 = *v12 - 48;
      if (v15 > 9)
        break;
      if (v14 > 0x63)
        break;
      v14 = v15 + 10 * v14;
      ++v12;
    }
    while (v12 < v4);
    if (v14 > 0x63)
      return 0;
  }
  return 10000 * v8 + 100 * v13 + v14;
}

uint64_t sub_21A6A281C(char *__s, int64_t a2, uint64_t a3, _BYTE *a4, _QWORD *a5)
{
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _BYTE *v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  char v18;
  char v19;
  char v20;
  uint64_t result;

  v8 = __s;
  if (a2 == -1)
    a2 = strlen(__s);
  v9 = &v8[a2];
  v10 = MEMORY[0x24BDAC740];
  if (a2 >= 1)
  {
    do
    {
      v11 = *v8;
      if (*v8 < 0)
      {
        if (!__maskrune(v11, 0x4000uLL))
          break;
      }
      else if ((*(_DWORD *)(v10 + 4 * v11 + 60) & 0x4000) == 0)
      {
        break;
      }
      ++v8;
    }
    while (v8 < v9);
  }
  v12 = v9 - v8;
  if (v9 - v8 <= 1)
  {
    result = 0;
    v14 = a4;
    if (a5)
LABEL_28:
      *a5 = v14 - a4;
  }
  else
  {
    v13 = (unint64_t)&a4[a3];
    v14 = a4;
    while (1)
    {
      v15 = __tolower(*v8);
      if (v15 > 0xFF || (v16 = v15, (*(_DWORD *)(v10 + 4 * v15 + 60) & 0x10000) == 0))
      {
LABEL_25:
        result = 0;
        if (a5)
          goto LABEL_28;
        return result;
      }
      v17 = __tolower(v8[1]);
      if (v17 > 0xFF || (*(_DWORD *)(v10 + 4 * v17 + 60) & 0x10000) == 0)
        break;
      if (a4 && (unint64_t)v14 < v13)
      {
        if (v16 <= 0x60)
          v18 = -48;
        else
          v18 = -87;
        v19 = v18 + v16;
        if (v17 <= 0x60)
          v20 = -48;
        else
          v20 = -87;
        *v14 = (v20 + v17) | (16 * v19);
      }
      ++v14;
      v12 -= 2;
      v8 += 2;
      if (v12 <= 1)
        goto LABEL_25;
    }
    result = 4294960554;
    if (a5)
      goto LABEL_28;
  }
  return result;
}

char *sub_21A6A2990(unsigned __int8 *a1, int a2, char *__str)
{
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;

  if (a2)
  {
    v4 = a1[3];
    v5 = a1[2];
    v6 = a1[1];
    v7 = *a1;
    v8 = a1[5];
    v9 = a1[4];
    v10 = a1[7];
    v11 = a1[6];
  }
  else
  {
    v4 = *a1;
    v5 = a1[1];
    v6 = a1[2];
    v7 = a1[3];
    v8 = a1[4];
    v9 = a1[5];
    v10 = a1[6];
    v11 = a1[7];
  }
  snprintf(__str, 0x25uLL, "%02x%02x%02x%02x-%02x%02x-%02x%02x-%02x%02x-%02x%02x%02x%02x%02x%02x", v4, v5, v6, v7, v8, v9, v10, v11, a1[8], a1[9], a1[10], a1[11], a1[12], a1[13], a1[14], a1[15]);
  return __str;
}

double sub_21A6A2A54(char *__s, size_t a2, int a3, _OWORD *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  double result;
  int v12;
  int v13;
  __int128 v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  if (a2 == -1)
    a2 = strlen(__s);
  if (a2 == 36)
  {
    v13 = 0;
    if (a3)
      v12 = sub_21A6A2BD4(__s, 0x24uLL, "%2hhx%2hhx%2hhx%2hhx-%2hhx%2hhx-%2hhx%2hhx-%2hhx%2hhx-%2hhx%2hhx%2hhx%2hhx%2hhx%2hhx%n", (uint64_t)&v14 + 4, (uint64_t)&v14 + 7, (uint64_t)&v14 + 6, (uint64_t)&v13, a8, (int)&v14 + 3);
    else
      v12 = sub_21A6A2BD4(__s, 0x24uLL, "%2hhx%2hhx%2hhx%2hhx-%2hhx%2hhx-%2hhx%2hhx-%2hhx%2hhx-%2hhx%2hhx%2hhx%2hhx%2hhx%2hhx%n", (uint64_t)&v14 + 5, (uint64_t)&v14 + 6, (uint64_t)&v14 + 7, (uint64_t)&v13, a8, (int)&v14);
    if (v12 == 16 && v13 == 36)
    {
      if (a4)
      {
        result = *(double *)&v14;
        *a4 = v14;
      }
    }
  }
  return result;
}

uint64_t sub_21A6A2BD4(char *a1, size_t a2, unsigned __int8 *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9)
{
  return sub_21A6A3004(a1, a2, a3, &a9);
}

_BYTE *sub_21A6A2BFC(_BYTE *a1, size_t a2)
{
  size_t v3;
  _BYTE *v4;
  _BYTE *v5;

  v3 = 0;
  if (a2)
  {
    while (a1[v3])
    {
      if (a2 == ++v3)
      {
        v3 = a2;
        break;
      }
    }
  }
  v4 = malloc_type_malloc(v3 + 1, 0xAD0833DAuLL);
  v5 = v4;
  if (v4)
  {
    memcpy(v4, a1, v3);
    v5[v3] = 0;
  }
  return v5;
}

uint64_t sub_21A6A2C70(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (!a2)
    return 0;
  result = 0;
  while (*(_BYTE *)(a1 + result))
  {
    if (a2 == ++result)
      return a2;
  }
  return result;
}

uint64_t sub_21A6A2CA0(unsigned __int8 *a1, uint64_t a2, unsigned __int8 *a3)
{
  uint64_t v3;
  unsigned __int8 *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  BOOL v9;

  v3 = a2;
  v4 = a3;
  while (v3)
  {
    v6 = *a1++;
    v5 = v6;
    v8 = *v4++;
    v7 = v8;
    v9 = v5 > v8;
    if (v5 < v8)
      return 0xFFFFFFFFLL;
    if (v9)
      return 1;
    --v3;
    if (!v7)
      return 0;
  }
  if (a3[a2])
    return 0xFFFFFFFFLL;
  else
    return 0;
}

_BYTE *sub_21A6A2CF0(_BYTE *a1, _BYTE *a2)
{
  __darwin_ct_rune_t v4;
  uint64_t v5;
  __darwin_ct_rune_t v6;
  __darwin_ct_rune_t v7;
  BOOL v8;

  if (a2 && *a2)
  {
    v4 = __tolower(*a2);
    while (*a1)
    {
      if (__tolower(*a1) == v4)
      {
        v5 = 1;
        do
        {
          v6 = __tolower(a1[v5]);
          v7 = __tolower(a2[v5++]);
          if (v6)
            v8 = v6 == v7;
          else
            v8 = 0;
        }
        while (v8);
        if (!v7)
          return a1;
      }
      ++a1;
    }
    return 0;
  }
  return a1;
}

unint64_t sub_21A6A2D84(char *__s, size_t a2, unint64_t a3)
{
  unint64_t result;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  char v9;
  unint64_t v10;
  char v11;
  unsigned int v12;

  if (a2 == -1)
    a2 = strlen(__s);
  if (a2 >= a3)
    result = a3;
  else
    result = a2;
  if (result)
  {
    while (__s[result - 1] < 0)
    {
      v6 = 0;
      v7 = __s[result - 1];
      v8 = 1;
      if (result == 1 || v7 > 0xBF)
      {
        --result;
        v11 = 0;
      }
      else
      {
        v9 = 0;
        v10 = result - 2;
        while (1)
        {
          v11 = v7;
          v12 = v8;
          if ((__s[v10] & 0x80000000) == 0)
            break;
          v7 = __s[v10];
          ++v8;
          if (v10-- != 0)
          {
            v9 = v11;
            if (v7 < 0xC0)
              continue;
          }
          result = v10 + 1;
          v6 = v12;
          goto LABEL_18;
        }
        v6 = v8 - 1;
        result = v10 + 1;
        v11 = v9;
      }
LABEL_18:
      if (v6 < 6
        && (((255 << (7 - v6)) | (1 << (6 - v6))) & v7) == (255 << (7 - v6))
        && (v7 != 237 || (v11 & 0xF0) != 0xA0))
      {
        result += v8;
        return result;
      }
      if (!result)
        return result;
    }
  }
  return result;
}

uint64_t sub_21A6A2EA0(unsigned __int8 *a1, unint64_t a2, _BYTE *a3, uint64_t a4, _QWORD *a5, _QWORD *a6, _BYTE *a7, uint64_t a8, _QWORD *a9, _QWORD *a10, _QWORD *a11)
{
  uint64_t result;
  unsigned __int8 *v15;

  v15 = a1;
  if ((unint64_t)a1 >= a2)
  {
    result = 4294960569;
  }
  else
  {
    result = sub_21A6A2F38(a1, a2, 0x3Du, a3, a4, a5, a6, &v15);
    if (!(_DWORD)result)
      result = sub_21A6A2F38(v15, a2, 0x2Cu, a7, a8, a9, a10, &v15);
  }
  if (a11)
    *a11 = v15;
  return result;
}

uint64_t sub_21A6A2F38(unsigned __int8 *a1, unint64_t a2, unsigned __int8 a3, _BYTE *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, unsigned __int8 **a8)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _BYTE *v11;
  unsigned __int8 *v12;
  int v13;
  uint64_t v14;

  if (a5)
    v8 = a5 - 1;
  else
    v8 = 0;
  if ((unint64_t)a1 < a2)
  {
    v9 = 0;
    v10 = (unint64_t)&a4[v8];
    v11 = a4;
    while (1)
    {
      v12 = a1 + 1;
      v13 = *a1;
      if (v13 == a3)
      {
        ++a1;
        goto LABEL_19;
      }
      if (v13 == 92)
      {
        if ((unint64_t)v12 >= a2)
        {
          v14 = 4294960546;
          if (!a6)
            goto LABEL_24;
LABEL_23:
          *a6 = v11 - a4;
          goto LABEL_24;
        }
        LOBYTE(v13) = a1[1];
        a1 += 2;
      }
      else
      {
        ++a1;
      }
      if ((unint64_t)v11 < v10)
      {
        if (a4)
          *v11 = v13;
        ++v11;
      }
      ++v9;
      if ((unint64_t)a1 >= a2)
        goto LABEL_19;
    }
  }
  v9 = 0;
  v11 = a4;
LABEL_19:
  v14 = 0;
  if (a4 && a5)
  {
    v14 = 0;
    *v11 = 0;
  }
  v12 = a1;
  if (a6)
    goto LABEL_23;
LABEL_24:
  if (a7)
    *a7 = v9;
  if (a8)
    *a8 = v12;
  return v14;
}

uint64_t sub_21A6A3004(char *__s, size_t a2, unsigned __int8 *a3, _DWORD *a4)
{
  char *v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  int v14;
  int v15;
  uint64_t v16;
  char v17;
  unsigned __int8 *v18;
  uint64_t v19;
  int v20;
  int v21;
  unsigned __int8 *v22;
  int v23;
  int v24;
  int v25;
  int *v26;
  int v27;
  int v28;
  unint64_t v29;
  int v30;
  BOOL v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  uint64_t v37;
  int v38;
  unsigned __int8 *v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  unsigned __int8 *i;
  int v45;
  int v46;
  _DWORD **v47;
  _DWORD *v48;
  int v49;
  int64_t v50;
  uint64_t v51;
  int v52;
  int v53;
  uint64_t v54;
  __darwin_ct_rune_t v55;
  __darwin_ct_rune_t v56;
  int v57;
  uint64_t v58;
  int64_t v59;
  BOOL v60;
  __darwin_ct_rune_t v61;
  int v62;
  uint64_t v63;
  _WORD **v64;
  _WORD *v65;
  char v66;
  char *v67;
  int64_t v68;
  uint64_t v69;
  int64_t v70;
  uint64_t v71;
  int v72;
  unsigned int v74;
  uint64_t v75;
  int64_t v76;
  char **v77;
  char *v78;
  int64_t v79;
  uint64_t v80;
  char v81;
  int v82;
  uint64_t v84;
  unsigned __int8 *v85;
  _BYTE **v86;
  _BYTE *v87;
  int64_t v88;
  unsigned int v89;
  char v90;
  char ***v91;
  char **v92;
  int64_t **v93;
  int64_t *v94;
  unsigned int v95;
  char *v96;
  int64_t v97;
  uint64_t v98;
  int v99;
  char ***v101;
  char **v102;
  _QWORD **v103;
  _QWORD *v104;
  _QWORD *v105;
  _BYTE *v106;
  unsigned int v107;
  char v108;
  _QWORD **v109;
  _QWORD *v110;
  int v112;
  char *v113;
  unsigned int v114;
  int v115;
  char *v116;
  _QWORD **v118;
  _QWORD **v119;

  v5 = __s;
  if (a2 == -1)
    a2 = strlen(__s);
  v114 = 0;
  v6 = MEMORY[0x24BDAC740];
  v112 = (int)v5;
  v116 = &v5[a2];
LABEL_4:
  while (2)
  {
    while (2)
    {
      while (2)
      {
        while (2)
        {
          while (2)
          {
            v7 = *a3;
            if (((char)*a3 & 0x80000000) == 0)
            {
              if ((*(_DWORD *)(v6 + 4 * v7 + 60) & 0x4000) != 0)
                goto LABEL_6;
LABEL_19:
              v13 = v5;
              v10 = v116;
              goto LABEL_22;
            }
            if (!__maskrune(v7, 0x4000uLL))
              goto LABEL_19;
            do
            {
LABEL_6:
              while (1)
              {
                v8 = (char)*++a3;
                v9 = v8;
                if (v8 < 0)
                  break;
                if ((*(_DWORD *)(v6 + 4 * v9 + 60) & 0x4000) == 0)
                  goto LABEL_10;
              }
            }
            while (__maskrune(v9, 0x4000uLL));
LABEL_10:
            v10 = v116;
            if (v5 >= v116)
              goto LABEL_21;
            v11 = v116 - v5;
            while (1)
            {
              v12 = *v5;
              if (*v5 < 0)
                break;
              if ((*(_DWORD *)(v6 + 4 * v12 + 60) & 0x4000) == 0)
                goto LABEL_20;
LABEL_16:
              ++v5;
              if (!--v11)
              {
                v10 = v116;
                v5 = v116;
                goto LABEL_21;
              }
            }
            if (__maskrune(v12, 0x4000uLL))
              goto LABEL_16;
LABEL_20:
            v10 = v116;
LABEL_21:
            v13 = v5;
LABEL_22:
            v14 = *a3;
            if (v14 != 37)
            {
              if (*a3)
              {
                if (v13 < v10)
                {
                  ++a3;
                  v5 = v13 + 1;
                  if (v14 == *v13)
                    continue;
                }
              }
              return v114;
            }
            break;
          }
          v15 = 0;
          v16 = 0;
          v17 = 1;
          while (2)
          {
            v18 = a3 + 1;
            v19 = v16;
            do
            {
              v16 = v19;
              v21 = *v18++;
              v20 = v21;
              v19 = 1;
            }
            while (v21 == 42);
            if (v20 == 38)
            {
              v17 = 0;
              goto LABEL_34;
            }
            if (v20 == 35)
            {
              ++v15;
LABEL_34:
              a3 = v18 - 1;
              continue;
            }
            break;
          }
          v22 = v18 - 1;
          if ((v20 - 48) > 9)
          {
            if (v20 != 46)
            {
              v23 = 0x7FFFFFFF;
              goto LABEL_43;
            }
            v26 = a4;
            a4 += 2;
            v23 = *v26;
            if ((*v26 & 0x80000000) == 0)
            {
              v27 = *v18;
              v20 = v27;
              v22 = v18;
              goto LABEL_44;
            }
            return v114;
          }
          v23 = 0;
          do
          {
            v24 = v20 + 10 * v23;
            v25 = *++v22;
            v20 = v25;
            v23 = v24 - 48;
          }
          while ((v25 - 48) < 0xA);
LABEL_43:
          v27 = v20;
LABEL_44:
          v28 = 0;
          HIDWORD(v29) = v27;
          LODWORD(v29) = v27 - 104;
          switch((v29 >> 1))
          {
            case 0u:
              v30 = *++v22;
              v31 = v30 == 104;
              v32 = 104;
              v27 = 72;
              goto LABEL_48;
            case 1u:
            case 6u:
            case 9u:
              ++v22;
              goto LABEL_51;
            case 2u:
              v33 = *++v22;
              v31 = v33 == 108;
              v32 = 108;
              v27 = 76;
LABEL_48:
              if (v31)
                ++v22;
              else
                v27 = v32;
LABEL_51:
              v20 = *v22;
              v28 = v27;
              break;
            default:
              break;
          }
          v115 = v28;
          if (!v20)
            return v114;
          a3 = v22 + 1;
          if (v20 > 97)
          {
            v34 = 0;
            v35 = 0;
            v36 = 0;
            v37 = 10;
            switch(v20)
            {
              case 'b':
                v34 = 0;
                v35 = 0;
                v36 = 1;
                v37 = 2;
                goto LABEL_91;
              case 'c':
                if (v28)
                  return v114;
                if ((v17 & 1) != 0)
                {
                  if (v23 == 0x7FFFFFFF)
                    v45 = 1;
                  else
                    v45 = v23;
                  if (v10 - v13 < v45)
                    return v114;
                  v46 = v45;
                  if ((_DWORD)v16)
                  {
                    v5 = &v13[v45];
                    continue;
                  }
                  v105 = a4;
                  a4 += 2;
                  v106 = (_BYTE *)*v105;
                  if (!v106)
                    return v114;
                  if (v46 < 1)
                  {
                    v95 = v114;
                  }
                  else
                  {
                    v107 = v46 + 1;
                    v95 = v114;
                    do
                    {
                      v108 = *v13++;
                      *v106++ = v108;
                      --v107;
                    }
                    while (v107 > 1);
                  }
                }
                else
                {
                  v76 = v10 - v13;
                  if (v10 - v13 >= (unint64_t)v23)
                    v76 = v23;
                  if ((_DWORD)v16)
                  {
                    v5 = &v13[v76];
                    continue;
                  }
                  v91 = (char ***)a4;
                  v118 = (_QWORD **)(a4 + 2);
                  v92 = *v91;
                  if (v92)
                    *v92 = v13;
                  v93 = v118;
                  a4 = v118 + 1;
                  v94 = *v93;
                  v95 = v114;
                  if (v94)
                    *v94 = v76;
                  v13 += v76;
                }
                v114 = v95 + 1;
                v5 = v13;
                continue;
              case 'd':
              case 'u':
                goto LABEL_91;
              case 'i':
                v35 = 0;
                v36 = 0;
                v37 = 0;
                v34 = 1;
                goto LABEL_91;
              case 'n':
                if (v28)
                  return v114;
                if (v23 != 0x7FFFFFFF)
                  return v114;
                if ((_DWORD)v16)
                  return v114;
                v47 = (_DWORD **)a4;
                a4 += 2;
                v48 = *v47;
                if (!v48)
                  return v114;
                *v48 = (_DWORD)v13 - v112;
                v5 = v13;
                continue;
              case 'o':
                v34 = 0;
                v35 = 0;
                v36 = 0;
                v37 = 8;
                goto LABEL_91;
              case 'p':
                v49 = v28;
                if (!v28)
                  v49 = 112;
                v115 = v49;
                goto LABEL_90;
              case 's':
                if (v28)
                  return v114;
                if (v13 >= v10)
                  goto LABEL_168;
                v66 = v17;
                v67 = v10;
                v68 = v10 - v13;
                v5 = v13;
                break;
              case 'x':
                goto LABEL_90;
              default:
                return v114;
            }
            while (2)
            {
              v69 = *v5;
              if (*v5 < 0)
              {
                if (__maskrune(v69, 0x4000uLL))
                  goto LABEL_166;
LABEL_215:
                if (!v15)
                {
                  v10 = v116;
                  v17 = v66;
                  if (*v5)
                    goto LABEL_169;
                  return v114;
                }
                v10 = v116;
                v17 = v66;
                if ((_DWORD)v16)
                  goto LABEL_170;
              }
              else
              {
                if ((*(_DWORD *)(v6 + 4 * v69 + 60) & 0x4000) == 0)
                  goto LABEL_215;
LABEL_166:
                ++v5;
                if (--v68)
                  continue;
                v13 = v67;
                v10 = v116;
                v17 = v66;
LABEL_168:
                v5 = v13;
                if (!v15)
                  return v114;
LABEL_169:
                if ((_DWORD)v16)
                {
LABEL_170:
                  if (v5 < v10)
                  {
                    v70 = v10 - v5;
                    while (1)
                    {
                      v71 = *v5;
                      if (!*v5)
                        break;
                      v72 = (v71 & 0x80) != 0 ? __maskrune(v71, 0x4000uLL) : *(_DWORD *)(v6 + 4 * v71 + 60) & 0x4000;
                      if (v72 || v23 < 1)
                        break;
                      --v23;
                      ++v5;
                      if (!--v70)
                      {
                        v5 = v116;
                        goto LABEL_4;
                      }
                    }
                  }
                  goto LABEL_4;
                }
              }
              break;
            }
            if ((v17 & 1) == 0)
            {
              v96 = v5;
              if (v5 < v10)
              {
                v97 = v10 - v5;
                v96 = v5;
                while (1)
                {
                  v98 = *v96;
                  if (!*v96)
                    break;
                  v99 = (v98 & 0x80) != 0 ? __maskrune(v98, 0x4000uLL) : *(_DWORD *)(v6 + 4 * v98 + 60) & 0x4000;
                  if (v99 || v23 < 1)
                    break;
                  --v23;
                  ++v96;
                  if (!--v97)
                  {
                    v96 = v116;
                    break;
                  }
                }
              }
              v101 = (char ***)a4;
              v119 = (_QWORD **)(a4 + 2);
              v102 = *v101;
              if (v102)
                *v102 = v5;
              v103 = v119;
              a4 = v119 + 1;
              v104 = *v103;
              if (v104)
                *v104 = v96 - v5;
              ++v114;
              v5 = v96;
              continue;
            }
            v77 = (char **)a4;
            a4 += 2;
            v78 = *v77;
            if (!*v77)
              return v114;
            if (v5 < v10)
            {
              v79 = v10 - v5;
              while (1)
              {
                v80 = *v5;
                if (!*v5)
                  break;
                v81 = *v5;
                v82 = (char)v80 < 0 ? __maskrune(v80, 0x4000uLL) : *(_DWORD *)(v6 + 4 * v80 + 60) & 0x4000;
                if (v82 || v23 < 1)
                  break;
                --v23;
                ++v5;
                *v78++ = v81;
                if (!--v79)
                {
                  v5 = v116;
                  break;
                }
              }
            }
            v74 = v114;
            *v78 = 0;
LABEL_196:
            v114 = v74 + 1;
            continue;
          }
          break;
        }
        if (v20 == 37)
        {
          if (!v28 && v23 == 0x7FFFFFFF && !(_DWORD)v16 && v13 < v10)
          {
            v5 = v13 + 1;
            if (*v13 == 37)
              continue;
          }
          return v114;
        }
        break;
      }
      if (v20 != 88)
      {
        if (v20 == 91 && !v28)
        {
          v38 = v22[1];
          v39 = v22 + 2;
          v40 = v38 == 94 ? 2 : 1;
          v41 = (uint64_t)(v38 == 94 ? v22 + 2 : v22 + 1);
          v42 = v22[v40];
          v43 = v42 == 93;
          for (i = (unsigned __int8 *)(v42 == 93 ? v41 + 1 : v41); ; ++i)
          {
            if (!*i)
              return v114;
            if (*i == 93)
              break;
            ++v43;
          }
          v5 = v13;
          if (v38 == 94)
          {
            if (v13 < v10)
            {
              v5 = v13;
              while (*v5)
              {
                v60 = __OFSUB__(v23--, 1);
                if (v23 < 0 != v60)
                  break;
                if (v39 < i)
                {
                  v75 = 0;
                  while (*(unsigned __int8 *)(v41 + v75) != *v5)
                  {
                    if (v43 == ++v75)
                      goto LABEL_206;
                  }
                  break;
                }
LABEL_206:
                if (++v5 == v10)
                {
                  v5 = v10;
                  break;
                }
              }
            }
          }
          else if (v13 < v10)
          {
            v5 = v13;
            while (*v5)
            {
              v60 = __OFSUB__(v23, 1);
              if (--v23 < 0 != v60)
                break;
              v84 = v43;
              v85 = (unsigned __int8 *)v41;
              if (a3 >= i)
                break;
              while (*v85 != *v5)
              {
                ++v85;
                if (!--v84)
                  goto LABEL_242;
              }
              if (++v5 == v10)
              {
                v5 = v10;
                break;
              }
            }
          }
LABEL_242:
          if (v13 != v5 || v15)
          {
            a3 = i + 1;
            if ((_DWORD)v16)
              continue;
            v86 = (_BYTE **)a4;
            a4 += 2;
            v87 = *v86;
            if ((v17 & 1) != 0)
            {
              if (!v87)
                return v114;
              if (v13 >= v5)
              {
                v89 = v114;
              }
              else
              {
                v88 = v5 - v13;
                v89 = v114;
                do
                {
                  v90 = *v13++;
                  *v87++ = v90;
                  --v88;
                }
                while (v88);
              }
              *v87 = 0;
            }
            else
            {
              if (v87)
                *(_QWORD *)v87 = v13;
              v109 = (_QWORD **)a4;
              a4 += 2;
              v110 = *v109;
              v89 = v114;
              if (v110)
                *v110 = v5 - v13;
            }
            v114 = v89 + 1;
            continue;
          }
        }
        return v114;
      }
      break;
    }
LABEL_90:
    v34 = 0;
    v36 = 0;
    v35 = 1;
    v37 = 16;
LABEL_91:
    if (v13 < v10)
    {
      v113 = v10;
      v50 = v10 - v13;
      do
      {
        v51 = *v13;
        if (*v13 < 0)
        {
          if (!__maskrune(v51, 0x4000uLL))
            goto LABEL_99;
        }
        else if ((*(_DWORD *)(v6 + 4 * v51 + 60) & 0x4000) == 0)
        {
          goto LABEL_99;
        }
        ++v13;
        --v50;
      }
      while (v50);
      v13 = v113;
LABEL_99:
      v10 = v116;
    }
    v52 = 1;
    if (v10 - v13 >= 2 && v23 >= 1)
    {
      v53 = *v13;
      if (v53 == 43)
        goto LABEL_105;
      if (v53 == 45)
      {
        v52 = 0;
LABEL_105:
        ++v13;
        --v23;
      }
    }
    if (!v34)
    {
      if (v35)
      {
        if (v10 - v13 >= 2 && v23 >= 2 && *v13 == 48)
        {
          v56 = __tolower(v13[1]);
          v10 = v116;
          if (v56 == 120)
          {
            v5 = v13 + 2;
            v23 -= 2;
            v37 = 16;
            goto LABEL_140;
          }
        }
      }
      if (!v36)
        goto LABEL_139;
      if (v10 - v13 < 2 || v23 < 2 || *v13 != 48)
      {
        v37 = 2;
        goto LABEL_139;
      }
      if (__tolower(v13[1]) == 98)
      {
        v5 = v13 + 2;
        v23 -= 2;
        v37 = 2;
      }
      else
      {
        v37 = 2;
        v5 = v13;
      }
LABEL_252:
      v10 = v116;
      goto LABEL_140;
    }
    v54 = v10 - v13;
    if (v10 - v13 <= 2 || v23 < 2 || *v13 != 48)
      goto LABEL_128;
    if (__tolower(v13[1]) == 120)
    {
      v5 = v13 + 2;
      if ((*(_DWORD *)(v6 + 4 * v13[2] + 60) & 0x10000) != 0)
      {
        v23 -= 2;
        v37 = 16;
        goto LABEL_252;
      }
    }
    v10 = v116;
    if (*v13 == 48)
    {
      v55 = __tolower(v13[1]);
      v10 = v116;
      if (v55 == 98)
      {
        v5 = v13 + 2;
        if ((v13[2] & 0xFE) == 0x30)
        {
          v23 -= 2;
          v37 = 2;
          goto LABEL_140;
        }
      }
    }
LABEL_128:
    if (v54 < 2 || v23 < 1 || *v13 != 48)
    {
      v37 = 10;
LABEL_139:
      v5 = v13;
      goto LABEL_140;
    }
    v57 = v13[1] & 0xF8;
    if (v57 == 48)
    {
      --v23;
      v37 = 8;
    }
    else
    {
      v37 = 10;
    }
    if (v57 == 48)
      v5 = v13 + 1;
    else
      v5 = v13;
LABEL_140:
    if (v5 >= v10)
    {
      v58 = 0;
    }
    else
    {
      v58 = 0;
      v59 = v10 - v5;
      while (1)
      {
        v60 = __OFSUB__(v23, 1);
        if (--v23 < 0 != v60)
          break;
        v61 = *v5;
        v62 = v61 - 48;
        if ((v61 - 48) >= 0xA)
        {
          if ((*(_DWORD *)(v6 + 4 * *v5 + 60) & 0x10000) == 0)
            break;
          v62 = __tolower(v61) - 87;
        }
        if (v62 >= (int)v37)
          break;
        v58 = v58 * v37 + v62;
        ++v5;
        if (!--v59)
        {
          v5 = v116;
          break;
        }
      }
    }
    if (v5 != v13)
    {
      if ((_DWORD)v16)
        continue;
      v63 = v52 ? v58 : -v58;
      v64 = (_WORD **)a4;
      a4 += 2;
      v65 = *v64;
      if (v65)
      {
        if (v115 > 103)
        {
          switch(v115)
          {
            case 'h':
              *v65 = v63;
              goto LABEL_195;
            case 'i':
            case 'k':
            case 'm':
            case 'n':
            case 'o':
              return v114;
            case 'j':
            case 'l':
            case 'p':
              goto LABEL_194;
            default:
              if (v115 == 116 || v115 == 122)
                goto LABEL_194;
              break;
          }
          return v114;
        }
        if (v115)
        {
          if (v115 == 72)
          {
            *(_BYTE *)v65 = v63;
          }
          else
          {
            if (v115 != 76)
              return v114;
LABEL_194:
            *(_QWORD *)v65 = v63;
          }
        }
        else
        {
          *(_DWORD *)v65 = v63;
        }
LABEL_195:
        v74 = v114;
        goto LABEL_196;
      }
    }
    return v114;
  }
}

uint64_t sub_21A6A3B70()
{
  unint64_t v0;
  mach_timebase_info info;

  if (byte_2550F4D10 == 1)
    return qword_2550F4D18;
  v0 = 1000000000;
  info = 0;
  if (!mach_timebase_info(&info) && info.numer && info.denom)
    v0 = 1000000000 * (unint64_t)info.denom / info.numer;
  qword_2550F4D18 = v0;
  byte_2550F4D10 = 1;
  return v0;
}

uint64_t sub_21A6A3BF0(tm *a1, _DWORD *a2)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  time_t v6;
  double v7;
  uint64_t result;
  time_t v9;
  tm v10;
  tm v11;

  if (!a2)
    return 4294960591;
  memset(&v10.tm_wday, 0, 32);
  v9 = 0;
  if (!a1)
  {
    v9 = time(0);
    if (v9 == -1)
      return 4294960596;
    a1 = gmtime(&v9);
    if (!a1)
      return 4294960561;
  }
  v3 = *(_OWORD *)&a1->tm_sec;
  v4 = *(_OWORD *)&a1->tm_mon;
  v5 = *(_OWORD *)&a1->tm_isdst;
  v11.tm_zone = a1->tm_zone;
  *(_OWORD *)&v11.tm_mon = v4;
  *(_OWORD *)&v11.tm_isdst = v5;
  *(_OWORD *)&v11.tm_sec = v3;
  v9 = mktime(&v11);
  if (v9 == -1)
    return 4294960596;
  *(_QWORD *)&v10.tm_mon = 0x6500000000;
  *(_OWORD *)&v10.tm_sec = xmmword_21A73EF70;
  v10.tm_isdst = -1;
  v6 = mktime(&v10);
  if (v6 == -1)
    return 4294960596;
  v7 = difftime(v9, v6);
  if (v7 < 0.0)
    return 4294960586;
  result = 0;
  *a2 = v7;
  return result;
}

uint64_t sub_21A6A3CE4(unsigned __int8 *a1, int *a2)
{
  uint64_t result;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  unsigned __int8 *v13;

  v12 = 0;
  v13 = 0;
  result = sub_21A6A3E34(a1, "days", &v13, &v12, 0);
  if ((_DWORD)result == -6727)
  {
    v11 = 127;
LABEL_30:
    result = 0;
    *a2 = v11;
    return result;
  }
  if ((_DWORD)result)
    return result;
  if (v12 == 7)
  {
    v4 = *v13;
    if ((v4 | 0x40) == 0x6D)
    {
      v5 = v13[1];
      if (v5 == 116 || v5 == 45)
      {
        v6 = v13[2];
        if (v6 == 119 || v6 == 45)
        {
          v7 = v13[3];
          if (v7 == 116 || v7 == 45)
          {
            v8 = v13[4];
            if (v8 == 102 || v8 == 45)
            {
              v9 = v13[5];
              if (v9 == 115 || v9 == 45)
              {
                v10 = v13[6];
                if (v10 == 115 || v10 == 45)
                {
                  v11 = v4 != 45;
                  if (v5 != 45)
                    v11 |= 2u;
                  if (v6 != 45)
                    v11 |= 4u;
                  if (v7 != 45)
                    v11 |= 8u;
                  if (v8 != 45)
                    v11 |= 0x10u;
                  if (v9 != 45)
                    v11 |= 0x20u;
                  if (v10 != 45)
                    v11 |= 0x40u;
                  goto LABEL_30;
                }
              }
            }
          }
        }
      }
    }
  }
  return 4294960554;
}

uint64_t sub_21A6A3E34(unsigned __int8 *a1, unsigned __int8 *a2, _QWORD *a3, _QWORD *a4, _QWORD *a5)
{
  uint64_t v10;
  unsigned __int8 *v11;
  uint64_t v12;
  int v13;
  uint64_t i;
  unsigned __int8 *v15;
  uint64_t j;
  int v17;
  unsigned __int8 *v18;
  unsigned __int8 *v19;
  unsigned __int8 *v20;
  uint64_t result;

  v10 = MEMORY[0x24BDAC740];
  do
  {
    do
    {
      v11 = a1;
      v12 = *a1;
      if ((char)*a1 < 0)
        v13 = __maskrune(*a1, 0x4000uLL);
      else
        v13 = *(_DWORD *)(v10 + 4 * v12 + 60) & 0x4000;
      ++a1;
    }
    while (v13);
    if (!(_DWORD)v12)
      return 4294960569;
    for (i = 0; ; ++i)
    {
      if (!v11[i])
        return 4294960554;
      if (v11[i] == 61)
        break;
    }
    v15 = &v11[i];
    for (j = 1; ; ++j)
    {
      v17 = v15[j];
      if (!v15[j] || v17 == 59)
        break;
    }
    if (v17 == 59)
      v18 = v11 + 1;
    else
      v18 = v11;
    a1 = &v18[i + j];
  }
  while (sub_21A6A2CA0(v11, i, a2));
  v19 = &v11[i];
  if (v17 == 59)
    v20 = v19 + 1;
  else
    v20 = &v11[i];
  if (a3)
    *a3 = v19 + 1;
  if (a4)
    *a4 = j - 1;
  result = 0;
  if (a5)
    *a5 = &v20[j];
  return result;
}

uint64_t sub_21A6A3F64(unsigned __int8 *a1, _DWORD *a2, _DWORD *a3, _DWORD *a4, _DWORD *a5, _DWORD *a6, _DWORD *a7)
{
  uint64_t result;
  _BYTE *v14;
  int v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  uint64_t v22;
  _BYTE *v23;
  unsigned __int8 *v24;

  v23 = 0;
  v24 = a1;
  v22 = 0;
  v19 = 0;
  v20 = 0;
  v18 = 0;
  result = sub_21A6A3E34(a1, "t", &v23, &v22, &v24);
  if (!(_DWORD)result)
  {
    v21 = v23;
    v14 = &v23[v22];
    result = sub_21A6A40D0(v23, (unint64_t)&v23[v22], (int *)&v20 + 1, (int *)&v20, (int *)&v19 + 1, &v21);
    if (!(_DWORD)result)
    {
      if (v21 >= v14 || *v21 != 45)
        return 4294960554;
      result = 4294960586;
      if (HIDWORD(v20) <= 0x17 && v20 <= 0x3B && HIDWORD(v19) <= 0x3D)
      {
        ++v21;
        result = sub_21A6A40D0(v21, (unint64_t)v14, (int *)&v19, (int *)&v18 + 1, (int *)&v18, &v21);
        if (!(_DWORD)result)
        {
          if (v21 != v14)
            return 4294960554;
          v15 = v19;
          result = 4294960586;
          if (v19 <= 0x18)
          {
            v16 = HIDWORD(v18);
            if (HIDWORD(v18) <= 0x3C)
            {
              v17 = v18;
              if (v18 <= 0x3E)
              {
                result = 0;
                *a2 = HIDWORD(v20);
                *a3 = v20;
                *a4 = HIDWORD(v19);
                *a5 = v15;
                *a6 = v16;
                *a7 = v17;
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t sub_21A6A40D0(_BYTE *a1, unint64_t a2, int *a3, int *a4, int *a5, _QWORD *a6)
{
  int v6;
  _BYTE *v7;
  int v8;
  int v9;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t result;

  if ((unint64_t)a1 < a2)
  {
    v6 = 0;
    v7 = a1;
    while (1)
    {
      v8 = *v7;
      if ((v8 - 48) > 9)
        break;
      v6 = (char)v8 + 10 * v6 - 48;
      if (++v7 == (_BYTE *)a2)
      {
        if ((_BYTE *)a2 == a1)
          return 4294960554;
        v9 = 0;
LABEL_7:
        v7 = (_BYTE *)a2;
LABEL_16:
        if ((unint64_t)v7 < a2 && *v7 == 58)
        {
          if ((unint64_t)(v7 + 1) >= a2)
            return 4294960554;
          v12 = 0;
          v13 = 1;
          while (1)
          {
            v14 = v7[v13];
            if ((v14 - 48) > 9)
              break;
            v12 = (char)v14 + 10 * v12 - 48;
            if (a2 - (_QWORD)v7 == ++v13)
            {
              v13 = a2 - (_QWORD)v7;
              goto LABEL_35;
            }
          }
          a2 = (unint64_t)&v7[v13];
LABEL_35:
          v7 = (_BYTE *)a2;
          if (v13 == 1)
            return 4294960554;
        }
        else
        {
          v12 = 0;
        }
        if (a3)
          *a3 = v6;
        if (a4)
          *a4 = v9;
        if (a5)
          *a5 = v12;
        result = 0;
        if (a6)
          *a6 = v7;
        return result;
      }
    }
    if (v7 == a1)
      return 4294960554;
    if ((char)v8 != 58)
    {
      v9 = 0;
      goto LABEL_16;
    }
    if ((unint64_t)(v7 + 1) < a2)
    {
      v9 = 0;
      v10 = 1;
      while (1)
      {
        v11 = v7[v10];
        if ((v11 - 48) > 9)
          break;
        v9 = (char)v11 + 10 * v9 - 48;
        if ((unint64_t)&v7[++v10] >= a2)
          goto LABEL_7;
      }
      if (v10 != 1)
      {
        v7 += v10;
        goto LABEL_16;
      }
    }
  }
  return 4294960554;
}

uint64_t sub_21A6A4230(char *__s, char *a2, char **a3, char **a4)
{
  char *v6;
  uint64_t v7;
  unsigned int v8;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;
  unsigned int v14;
  BOOL v15;
  unint64_t v16;
  unint64_t v18;
  unint64_t v19;
  char *v20;
  _BYTE *v21;
  unsigned __int8 *v22;
  char *v23;
  _BYTE *v24;
  char *v25;
  unint64_t v26;
  int v27;
  char *v28;
  char *v29;
  char *v30;
  unsigned __int8 *v31;
  char *v32;
  unsigned __int8 *v33;
  unsigned __int8 *v34;
  char *v35;
  char *v36;
  char *v38;
  int v39;

  v6 = __s;
  if (!a2)
    a2 = &__s[strlen(__s)];
  if (a2 <= v6)
    goto LABEL_14;
  v7 = 0;
  do
  {
    v8 = v6[v7];
    if (v8 <= 0x3F && ((1 << v8) & 0x8400800800000000) != 0)
    {
      v10 = &v6[v7];
      goto LABEL_12;
    }
    ++v7;
  }
  while (a2 - v6 != v7);
  v10 = a2;
LABEL_12:
  if (v8 == 58)
  {
    v11 = v10 + 1;
  }
  else
  {
LABEL_14:
    v10 = 0;
    v11 = v6;
    v6 = 0;
  }
  if (a2 - v11 >= 2 && *v11 == 47 && v11[1] == 47)
  {
    v12 = v11 + 2;
    if (v11 + 2 >= a2)
    {
      v20 = 0;
      v21 = 0;
      v22 = 0;
      v23 = 0;
      v18 = (unint64_t)(v11 + 2);
      v24 = v11 + 2;
    }
    else
    {
      v13 = 2;
      while (1)
      {
        v14 = v11[v13];
        v15 = v14 > 0x3F;
        v16 = (1 << v14) & 0x8000800800000000;
        if (!v15 && v16 != 0)
          break;
        if (a2 - v11 == ++v13)
        {
          v13 = a2 - v11;
          break;
        }
      }
      v18 = (unint64_t)&v11[v13];
      if (v13 < 3)
      {
LABEL_31:
        v20 = 0;
        v21 = 0;
        v22 = 0;
        v23 = 0;
      }
      else
      {
        v19 = 2;
        while (v11[v19] != 64)
        {
          if (v13 == ++v19)
            goto LABEL_31;
        }
        v38 = &v11[v19];
        if (v19 < 3)
        {
          v23 = 0;
          v22 = 0;
          v21 = v11 + 2;
        }
        else
        {
          v21 = v11 + 2;
          v22 = (unsigned __int8 *)(v11 + 2);
          while (1)
          {
            v39 = *v22++;
            if (v39 == 58)
              break;
            v21 = v22;
            if (v22 >= (unsigned __int8 *)v38)
            {
              v23 = 0;
              v21 = v22;
              v22 = 0;
              goto LABEL_69;
            }
          }
          v23 = &v11[v19];
        }
LABEL_69:
        v20 = v11 + 2;
        v12 = v38 + 1;
      }
      v24 = (_BYTE *)v18;
    }
  }
  else
  {
    v20 = 0;
    v21 = 0;
    v22 = 0;
    v23 = 0;
    v12 = 0;
    v24 = 0;
    v18 = (unint64_t)v11;
  }
  if (v18 >= (unint64_t)a2)
  {
    v28 = 0;
    v30 = 0;
    v27 = 0;
    v31 = (unsigned __int8 *)v18;
    v26 = v18;
  }
  else
  {
    v25 = &a2[-v18];
    v26 = v18;
    while (1)
    {
      v27 = *(unsigned __int8 *)v26;
      if (v27 == 35 || v27 == 63)
        break;
      ++v26;
      if (!--v25)
      {
        v26 = (unint64_t)a2;
        break;
      }
    }
    if (v27 == 63)
    {
      v28 = (char *)(v26 + 1);
      if (v26 + 1 >= (unint64_t)a2)
      {
        v27 = 63;
        v31 = (unsigned __int8 *)v26++;
        v30 = v28;
      }
      else
      {
        v29 = &a2[~v26];
        v30 = (char *)(v26 + 1);
        while (1)
        {
          v27 = *v30;
          if (v27 == 35)
            break;
          ++v30;
          if (!--v29)
          {
            v31 = (unsigned __int8 *)v26;
            v26 = (unint64_t)a2;
            v30 = a2;
            goto LABEL_49;
          }
        }
        v31 = (unsigned __int8 *)v26;
        v26 = (unint64_t)v30;
      }
    }
    else
    {
      v28 = 0;
      v30 = 0;
      v31 = (unsigned __int8 *)v26;
    }
  }
LABEL_49:
  v32 = (char *)(v23 - (char *)v22);
  *a3 = v6;
  a3[1] = (char *)(v10 - v6);
  v33 = (unsigned __int8 *)(v30 - v28);
  a3[2] = v20;
  a3[3] = (char *)(v21 - v20);
  if (v27 == 35)
    v34 = (unsigned __int8 *)(v26 + 1);
  else
    v34 = 0;
  a3[4] = (char *)v22;
  a3[5] = v32;
  a3[6] = v12;
  a3[7] = (char *)(v24 - v12);
  a3[8] = (char *)v18;
  a3[9] = (char *)&v31[-v18];
  a3[10] = v28;
  a3[11] = (char *)v33;
  if (v27 == 35)
    v35 = a2;
  else
    v35 = 0;
  a3[12] = (char *)v34;
  a3[13] = (char *)(v35 - (char *)v34);
  if (a4)
  {
    if (v27 == 35)
      v36 = a2;
    else
      v36 = (char *)v26;
    *a4 = v36;
  }
  return 0;
}

uint64_t sub_21A6A5644(CFDictionaryRef theDict, _QWORD *a2, _QWORD *a3)
{
  uint64_t result;
  const __CFData *Value;
  const __CFData *v8;
  const UInt8 *BytePtr;
  unsigned __int8 *v10;
  CFIndex Length;
  uint64_t v12;
  uint64_t v13;

  v13 = 0;
  result = 4294960591;
  if (theDict && a2 && a3)
  {
    Value = (const __CFData *)CFDictionaryGetValue(theDict, CFSTR("IE"));
    if (Value)
    {
      v8 = Value;
      BytePtr = CFDataGetBytePtr(Value);
      if (!BytePtr)
        return 4294960568;
      v10 = (unsigned __int8 *)BytePtr;
      v12 = 0;
      Length = CFDataGetLength(v8);
      result = sub_21A69C688(v10, (unint64_t)&v10[Length], &v13, &v12);
      if ((_DWORD)result)
        return result;
      if (v13)
      {
        result = 0;
        *a2 = v13;
        *a3 = v12;
      }
      else
      {
        return 4294960568;
      }
    }
    else
    {
      return 4294960569;
    }
  }
  return result;
}

void sub_21A6A797C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_21A6A79D4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

double sub_21A6A7A18(uint64_t a1, int a2, void *a3, size_t a4, _OWORD *a5)
{
  double result;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _BYTE key[64];
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  __memcpy_chk();
  sub_21A6A7BA8(key, a2, a3, a4, 1, (uint64_t)&v11);
  sub_21A6A7BA8(key, a2, a3, a4, 2, (uint64_t)&v12 + 4);
  result = *(double *)&v11;
  v10 = v12;
  *a5 = v11;
  a5[1] = v10;
  return result;
}

BOOL sub_21A6A7ADC(char *__s, uint64_t a2)
{
  char *v2;
  int v3;
  int v4;
  uint64_t v7;
  _BYTE v8[32];
  uint64_t v9;

  v2 = __s;
  v9 = *MEMORY[0x24BDAC8D0];
  if ((unint64_t)(a2 - 8) > 0x37)
  {
    if (a2 != 64 || strspn(__s, "0123456789abcdefABCDEF") != 64)
      return 0;
    v7 = 0;
    return !sub_21A6A281C(v2, 64, 32, v8, &v7) && v7 == 32;
  }
  else
  {
    do
    {
      v4 = *v2++;
      v3 = v4;
    }
    while ((v4 - 127) > 0xFFFFFFA0);
    return v3 == 0;
  }
}

void sub_21A6A7BA8(void *key, int a2, void *__src, size_t __n, char a5, uint64_t a6)
{
  int v8;
  char *v11;
  int v12;
  uint64_t v13;
  __int128 v14;
  int v15;
  __int128 __dst;
  int v17;
  uint64_t v18;

  v8 = __n;
  v18 = *MEMORY[0x24BDAC8D0];
  if ((int)__n >= 1)
    memcpy(&__dst, __src, __n);
  v11 = (char *)&__dst + v8;
  *(_WORD *)v11 = 0;
  v11[2] = 0;
  v11[3] = a5;
  CCHmac(0, key, a2, &__dst, v8 + 4, &v14);
  v12 = 0;
  *(_OWORD *)a6 = v14;
  *(_DWORD *)(a6 + 16) = v15;
  do
  {
    CCHmac(0, key, a2, &v14, 0x14uLL, &__dst);
    v13 = 0;
    v14 = __dst;
    v15 = v17;
    do
    {
      *(_BYTE *)(a6 + v13) ^= *((_BYTE *)&__dst + v13);
      ++v13;
    }
    while (v13 != 20);
    ++v12;
  }
  while (v12 != 4095);
}

dispatch_group_t sub_21A6A7D00()
{
  dispatch_group_t result;

  qword_2550F4D30 = (uint64_t)dispatch_queue_create("com.apple.airport.airportutility.setupcontroller.keychain", 0);
  result = dispatch_group_create();
  qword_2550F4D38 = (uint64_t)result;
  return result;
}

void sub_21A6A7E60(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v8;
  const char *v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  id v13;
  const __CFString *v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t i;
  void *v24;
  const char *v25;
  const __CFString *v26;
  const char *v27;
  void *v28;
  uint64_t v29;
  const char *v30;
  id v31;
  const char *v32;
  uint64_t v33;
  const char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t j;
  void *v39;
  const char *v40;
  void *v41;
  uint64_t v42;
  const char *v43;
  void *v44;
  const char *v45;
  uint64_t v46;
  uint64_t v47;
  const char *v48;
  uint64_t v49;
  id v50;
  const char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t n;
  void *v56;
  const char *v57;
  const char *v58;
  const char *v59;
  uint64_t v60;
  uint64_t v61;
  const char *v62;
  uint64_t v63;
  id v64;
  const char *v65;
  uint64_t v66;
  const char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t ii;
  void *v72;
  const char *v73;
  uint64_t v74;
  uint64_t v75;
  const char *v76;
  uint64_t v77;
  uint64_t v78;
  id v79;
  const char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t m;
  void *v85;
  const char *v86;
  id v87;
  const char *v88;
  uint64_t v89;
  const char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t k;
  void *v94;
  const char *v95;
  void *v96;
  void *v97;
  id v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  _BYTE v123[128];
  _BYTE v124[128];
  _BYTE v125[128];
  _BYTE v126[128];
  _BYTE v127[128];
  _BYTE v128[128];
  uint64_t v129;

  v129 = *MEMORY[0x24BDAC8D0];
  v98 = objc_alloc_init(MEMORY[0x24BDD1460]);
  if (!a4)
    goto LABEL_90;
  v8 = a4;
  v13 = (id)objc_msgSend_setupDelegates(a4, v9, v10);
  if (!(_DWORD)a2)
    objc_msgSend_updateLastHeardFromDevice(a4, v11, v12);
  v14 = (const __CFString *)objc_msgSend_objectForKey_(a3, v11, (uint64_t)CFSTR("BSAssistantProgressKey_DictionaryParameter"));
  v17 = (uint64_t)v14;
  if ((_DWORD)a1 == 135)
  {
    v121 = 0u;
    v122 = 0u;
    v119 = 0u;
    v120 = 0u;
    v18 = (id)objc_msgSend_copy(v13, v15, v16);
    v20 = objc_msgSend_countByEnumeratingWithState_objects_count_(v18, v19, (uint64_t)&v119, v128, 16);
    if (v20)
    {
      v21 = v20;
      v22 = *(_QWORD *)v120;
      do
      {
        for (i = 0; i != v21; ++i)
        {
          if (*(_QWORD *)v120 != v22)
            objc_enumerationMutation(v18);
          v24 = *(void **)(*((_QWORD *)&v119 + 1) + 8 * i);
          if ((objc_opt_respondsToSelector() & 1) != 0)
            objc_msgSend_setupMonitoringMessage_paramDict_forController_(v24, v25, a2, v17, a4);
        }
        v21 = objc_msgSend_countByEnumeratingWithState_objects_count_(v18, v25, (uint64_t)&v119, v128, 16);
      }
      while (v21);
    }
    goto LABEL_90;
  }
  if ((a1 - 5) <= 1 && v14)
  {
    v26 = sub_21A69107C((uint64_t)v14, (const char *)1, v16);
LABEL_21:
    v29 = (uint64_t)v26;
    v28 = (void *)objc_msgSend_dictionaryWithDictionary_(MEMORY[0x24BDBCED8], v27, v17);
    objc_msgSend_setObject_forKey_(v28, v30, v29, CFSTR("BSAssistantProgressKey_StringParameter"));
    goto LABEL_22;
  }
  v28 = a3;
  if ((a1 - 7) <= 1)
  {
    v28 = a3;
    if (v14)
    {
      v26 = sub_21A691000(v14, (const char *)1, v16);
      goto LABEL_21;
    }
  }
LABEL_22:
  v96 = v13;
  v97 = a3;
  v117 = 0u;
  v118 = 0u;
  v115 = 0u;
  v116 = 0u;
  v31 = (id)objc_msgSend_copy(v13, v15, v16);
  v33 = objc_msgSend_countByEnumeratingWithState_objects_count_(v31, v32, (uint64_t)&v115, v127, 16);
  if (v33)
  {
    v36 = v33;
    v37 = *(_QWORD *)v116;
    do
    {
      for (j = 0; j != v36; ++j)
      {
        if (*(_QWORD *)v116 != v37)
          objc_enumerationMutation(v31);
        v39 = *(void **)(*((_QWORD *)&v115 + 1) + 8 * j);
        if ((objc_opt_respondsToSelector() & 1) != 0)
          objc_msgSend_setupProgressUpdated_status_paramDict_forController_(v39, v40, a1, a2, v28, a4);
      }
      v36 = objc_msgSend_countByEnumeratingWithState_objects_count_(v31, v40, (uint64_t)&v115, v127, 16);
    }
    while (v36);
  }
  if ((int)a1 <= 27)
  {
    v41 = v97;
    switch((_DWORD)a1)
    {
      case 0xE:
        goto LABEL_90;
      case 0xF:
        if ((_DWORD)a2)
          v74 = 0;
        else
          v74 = objc_msgSend_targetBaseInfoDict(a4, v34, v35);
        v113 = 0u;
        v114 = 0u;
        v111 = 0u;
        v112 = 0u;
        v87 = (id)objc_msgSend_copy(v96, v34, v35);
        v89 = objc_msgSend_countByEnumeratingWithState_objects_count_(v87, v88, (uint64_t)&v111, v126, 16);
        if (v89)
        {
          v91 = v89;
          v92 = *(_QWORD *)v112;
          do
          {
            for (k = 0; k != v91; ++k)
            {
              if (*(_QWORD *)v112 != v92)
                objc_enumerationMutation(v87);
              v94 = *(void **)(*((_QWORD *)&v111 + 1) + 8 * k);
              if ((objc_opt_respondsToSelector() & 1) != 0)
                objc_msgSend_setupCompleteWithResult_baseStationInfo_forController_(v94, v95, a2, v74, a4);
            }
            v91 = objc_msgSend_countByEnumeratingWithState_objects_count_(v87, v95, (uint64_t)&v111, v126, 16);
          }
          while (v91);
        }
        objc_msgSend_handleSetupComplete_(a4, v90, a2);
        break;
      case 0x13:
        if (!objc_msgSend_performingManualRead(a4, v34, v35))
          goto LABEL_90;
        if (!(_DWORD)a2 || (_DWORD)a2 == -16)
          objc_msgSend_updateRememberKeychainFlagsButSkipBasePassword_(a4, v58, 1);
        objc_msgSend_updateKeychainWithPasswordsWithStatus_(a4, v58, a2);
        break;
      default:
LABEL_65:
        if ((_DWORD)a1 == 34 && !(_DWORD)a2)
        {
          v75 = objc_msgSend_objectForKey_(v41, v34, (uint64_t)CFSTR("BSAssistantProgressKey_DictionaryParameter"));
          if (v75)
          {
            v78 = v75;
            v101 = 0u;
            v102 = 0u;
            v99 = 0u;
            v100 = 0u;
            v79 = (id)objc_msgSend_copy(v96, v76, v77);
            v81 = objc_msgSend_countByEnumeratingWithState_objects_count_(v79, v80, (uint64_t)&v99, v123, 16);
            if (v81)
            {
              v82 = v81;
              v83 = *(_QWORD *)v100;
              do
              {
                for (m = 0; m != v82; ++m)
                {
                  if (*(_QWORD *)v100 != v83)
                    objc_enumerationMutation(v79);
                  v85 = *(void **)(*((_QWORD *)&v99 + 1) + 8 * m);
                  if ((objc_opt_respondsToSelector() & 1) != 0)
                    objc_msgSend_setupMonitoredSettingChanged_paramDict_forController_(v85, v86, 0, v78, a4);
                }
                v82 = objc_msgSend_countByEnumeratingWithState_objects_count_(v79, v86, (uint64_t)&v99, v123, 16);
              }
              while (v82);
            }
          }
        }
        goto LABEL_90;
    }
LABEL_89:
    objc_msgSend_handleBusyComplete(a4, v59, v60);
    goto LABEL_90;
  }
  v41 = v97;
  switch((int)a1)
  {
    case 28:
      v42 = objc_msgSend_objectForKey_(v97, v34, (uint64_t)CFSTR("BSAssistantProgressKey_DictionaryParameter"));
      v44 = (void *)objc_msgSend_objectForKey_(v97, v43, (uint64_t)CFSTR("kBSAssistantProgressKey_NumberParameter"));
      v47 = objc_msgSend_integerValue(v44, v45, v46);
      v103 = 0u;
      v104 = 0u;
      v105 = 0u;
      v106 = 0u;
      v50 = (id)objc_msgSend_copy(v96, v48, v49);
      v52 = objc_msgSend_countByEnumeratingWithState_objects_count_(v50, v51, (uint64_t)&v103, v124, 16);
      if (v52)
      {
        v53 = v52;
        v54 = *(_QWORD *)v104;
        do
        {
          for (n = 0; n != v53; ++n)
          {
            if (*(_QWORD *)v104 != v54)
              objc_enumerationMutation(v50);
            v56 = *(void **)(*((_QWORD *)&v103 + 1) + 8 * n);
            if ((objc_opt_respondsToSelector() & 1) != 0)
              objc_msgSend_setupRPCResponseWithResult_rpcSelector_responseDict_forController_(v56, v57, a2, v47, v42, a4);
          }
          v53 = objc_msgSend_countByEnumeratingWithState_objects_count_(v50, v57, (uint64_t)&v103, v124, 16);
        }
        while (v53);
      }
      break;
    case 29:
      break;
    case 30:
      v61 = objc_msgSend_objectForKey_(v97, v34, (uint64_t)CFSTR("BSAssistantProgressKey_DictionaryParameter"));
      v107 = 0u;
      v108 = 0u;
      v109 = 0u;
      v110 = 0u;
      v64 = (id)objc_msgSend_copy(v96, v62, v63);
      v66 = objc_msgSend_countByEnumeratingWithState_objects_count_(v64, v65, (uint64_t)&v107, v125, 16);
      if (v66)
      {
        v69 = v66;
        v70 = *(_QWORD *)v108;
        do
        {
          for (ii = 0; ii != v69; ++ii)
          {
            if (*(_QWORD *)v108 != v70)
              objc_enumerationMutation(v64);
            v72 = *(void **)(*((_QWORD *)&v107 + 1) + 8 * ii);
            if ((objc_opt_respondsToSelector() & 1) != 0)
              objc_msgSend_setupTaskResponseWithResult_responseDict_forController_(v72, v73, a2, v61, a4);
          }
          v69 = objc_msgSend_countByEnumeratingWithState_objects_count_(v64, v73, (uint64_t)&v107, v125, 16);
        }
        while (v69);
      }
      objc_msgSend_handleTaskComplete(a4, v67, v68);
      goto LABEL_89;
    case 36:
      if (!(_DWORD)a2)
        objc_msgSend_updateKeychainWithPasswords(a4, v34, v35);
      break;
    default:
      goto LABEL_65;
  }
LABEL_90:

}

void sub_21A6A8718(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_21A6A9260(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_21A6A9334(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_21A6A93D8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_21A6A995C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_21A6A9970(uint64_t a1, const char *a2)
{
  uint64_t v3;
  const char *v4;

  v3 = objc_msgSend_keychainPasswordForBaseStation_(AUSetupController, a2, *(_QWORD *)(a1 + 40));
  objc_msgSend_setKeychainBasePassword_(*(void **)(a1 + 32), v4, v3);
  CFRelease(*(CFTypeRef *)(a1 + 40));
}

void sub_21A6A9BC8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_21A6A9BDC(uint64_t a1, const char *a2, uint64_t a3)
{
  void *v4;
  uint64_t v5;
  const char *v6;
  uint64_t result;
  const char *v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v4 = *(void **)(a1 + 32);
  v5 = objc_msgSend_keychainBasePassword(*(void **)(a1 + 40), a2, a3);
  result = objc_msgSend_isEqualToString_(v4, v6, v5);
  if ((result & 1) == 0)
  {
    result = objc_msgSend_updateKeychainBasePassword_forMACAddress_withBaseName_(AUSetupController, v8, *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56));
    v14 = result;
    if (dword_2550EEDA8 <= 800)
    {
      if (dword_2550EEDA8 != -1 || (result = sub_21A69876C((uint64_t)&dword_2550EEDA8, 0x320u), (_DWORD)result))
        result = sub_21A698FDC((uint64_t)&dword_2550EEDA8, (uint64_t)"-[AUSetupController saveKeychainBasePassword]_block_invoke", 800, (uint64_t)"updateKeychainBasePassword err: %#m\n", v10, v11, v12, v13, v14);
    }
    if (!(_DWORD)v14)
      return objc_msgSend_setKeychainBasePassword_(*(void **)(a1 + 40), v9, *(_QWORD *)(a1 + 32));
  }
  return result;
}

void sub_21A6A9D4C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_21A6A9D60(uint64_t a1, const char *a2)
{
  const char *v3;

  if (objc_msgSend_removeKeychainPasswordForBaseStation_(AUSetupController, a2, *(_QWORD *)(a1 + 40)) != -6727)objc_msgSend_setKeychainBasePassword_(*(void **)(a1 + 32), v3, 0);
  CFRelease(*(CFTypeRef *)(a1 + 40));
}

void sub_21A6A9EFC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_21A6A9F10(uint64_t a1)
{
  id v2;
  const char *v3;
  void *v4;
  const char *v5;
  uint64_t NetworkPassword;
  const char *v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  BOOL v11;
  id v12;
  const char *v13;
  void *v14;
  const char *v15;

  v2 = objc_alloc(MEMORY[0x24BDBCE70]);
  v4 = (void *)objc_msgSend_initWithObjectsAndKeys_(v2, v3, *(_QWORD *)(a1 + 32), CFSTR("SSID_STR"), 0);
  NetworkPassword = objc_msgSend_getNetworkPassword_(WiFiUtils, v5, (uint64_t)v4);

  if (objc_msgSend_BOOLValue(*(void **)(a1 + 40), v7, v8))
    v11 = NetworkPassword == 0;
  else
    v11 = 0;
  if (v11)
  {
    if (!objc_msgSend_length(*(void **)(a1 + 48), v9, v10))
      return objc_msgSend_setRememberWiFiPassword_(*(void **)(a1 + 56), v9, 0);
    v12 = objc_alloc(MEMORY[0x24BDBCE70]);
    v14 = (void *)objc_msgSend_initWithObjectsAndKeys_(v12, v13, *(_QWORD *)(a1 + 48), CFSTR("SSID_STR"), 0);
    NetworkPassword = objc_msgSend_getNetworkPassword_(WiFiUtils, v15, (uint64_t)v14);

  }
  if (NetworkPassword)
    return MEMORY[0x24BEDD108](*(_QWORD *)(a1 + 56), sel_setKeychainWiFiPassword_, NetworkPassword);
  return objc_msgSend_setRememberWiFiPassword_(*(void **)(a1 + 56), v9, 0);
}

void sub_21A6AA150(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_21A6AA164(uint64_t a1)
{
  int v2;
  const char *v3;
  uint64_t v4;
  uint64_t result;
  const char *v6;
  uint64_t v7;

  v2 = sub_21A72AC78();
  result = objc_msgSend_BOOLValue(*(void **)(a1 + 40), v3, v4);
  if ((_DWORD)result)
  {
    result = objc_msgSend_length(*(void **)(a1 + 48), v6, v7);
    if (result)
    {
      result = sub_21A72AC78();
      v2 = result;
    }
  }
  if (!v2)
    return MEMORY[0x24BEDD108](*(_QWORD *)(a1 + 56), sel_setKeychainWiFiPassword_, 0);
  return result;
}

void sub_21A6AA8A0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_21A6ABB48(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  void *v12;
  const char *v13;
  const __CFString *v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  const char *v18;
  uint64_t v19;
  const char *v20;
  id v21;

  v21 = objc_alloc_init(MEMORY[0x24BDD1460]);
  if (a4)
  {
    v10 = objc_msgSend_delegate(a4, v8, v9);
    if (v10)
    {
      v12 = (void *)v10;
      if ((objc_opt_respondsToSelector() & 1) != 0)
      {
        v14 = (const __CFString *)objc_msgSend_objectForKey_(a3, v13, (uint64_t)CFSTR("BSAssistantProgressKey_DictionaryParameter"));
        if ((a1 - 5) <= 1 && v14)
        {
          v17 = (uint64_t)sub_21A69107C((uint64_t)v14, (const char *)1, v16);
        }
        else if ((a1 - 7) <= 1 && v14)
        {
          v17 = (uint64_t)sub_21A691000(v14, (const char *)1, v16);
        }
        else
        {
          v17 = objc_msgSend_objectForKey_(a3, v15, (uint64_t)CFSTR("BSAssistantProgressKey_StringParameter"));
        }
        objc_msgSend_stepByStepProgressUpdated_status_paramString_(v12, v18, a1, a2, v17);
      }
      if ((_DWORD)a1 == 15)
      {
        v19 = objc_msgSend_objectForKey_(a3, v13, (uint64_t)CFSTR("BSAssistantProgressKey_DictionaryParameter"));
        if ((objc_opt_respondsToSelector() & 1) != 0)
          objc_msgSend_stepByStepCompleteWithResult_paramDict_(v12, v20, a2, v19);
      }
    }
    else if ((_DWORD)a1 == 15)
    {
      objc_msgSend_objectForKey_(a3, v11, (uint64_t)CFSTR("BSAssistantProgressKey_DictionaryParameter"));
    }
  }

}

uint64_t sub_21A6AC130(uint64_t a1)
{
  const __CFAllocator *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  pthread_mutexattr_t v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a1 = &off_24DD072D0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_QWORD *)(a1 + 112) = time(0);
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  *(_DWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 200) = 0;
  *(_WORD *)(a1 + 384) = 0;
  *(_BYTE *)(a1 + 386) = 0;
  *(_DWORD *)(a1 + 456) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_DWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  *(_WORD *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 208) = 0;
  *(_QWORD *)(a1 + 216) = 0;
  *(_DWORD *)(a1 + 223) = 0;
  *(_QWORD *)(a1 + 232) = 0;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_QWORD *)(a1 + 344) = 0;
  *(_DWORD *)(a1 + 256) = 0;
  *(_QWORD *)(a1 + 240) = 0;
  *(_QWORD *)(a1 + 248) = 0;
  *(_QWORD *)(a1 + 328) = 0;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_QWORD *)(a1 + 352) = 0;
  *(_QWORD *)(a1 + 360) = 0;
  *(_QWORD *)(a1 + 366) = 0;
  pthread_mutexattr_init(&v9);
  pthread_mutexattr_settype(&v9, 2);
  pthread_mutex_init((pthread_mutex_t *)(a1 + 392), &v9);
  v2 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  *(_QWORD *)(a1 + 32) = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
  *(_QWORD *)(a1 + 40) = CFDictionaryCreateMutable(v2, 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
  *(_QWORD *)(a1 + 48) = CFDictionaryCreateMutable(v2, 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
  sub_21A692FEC(v2, (CFTypeRef *)(a1 + 56), (uint64_t)"{%kO=%i%kO=[{%kO={%kO={}%kO=[]}}]}", v3, v4, v5, v6, v7, (uint64_t)CFSTR("Version"));
  *(_QWORD *)(a1 + 336) = 0;
  sub_21A6AC3F4(a1);
  return a1;
}

void sub_21A6AC334(_Unwind_Exception *a1)
{
  uint64_t v1;
  _QWORD *v2;
  void **v3;

  sub_21A6CDE70(v2);
  if (*(char *)(v1 + 31) < 0)
    operator delete(*v3);
  _Unwind_Resume(a1);
}

uint64_t sub_21A6AC3F4(uint64_t a1)
{
  __CFDictionary *v2;
  __CFDictionary *v3;
  __CFDictionary *v4;

  *(_WORD *)(a1 + 384) = 0;
  v2 = *(__CFDictionary **)(a1 + 32);
  if (v2)
    CFDictionaryRemoveAllValues(v2);
  v3 = *(__CFDictionary **)(a1 + 40);
  if (v3)
    CFDictionaryRemoveAllValues(v3);
  v4 = *(__CFDictionary **)(a1 + 48);
  if (v4)
    CFDictionaryRemoveAllValues(v4);
  sub_21A6AC45C(a1);
  *(_BYTE *)(a1 + 226) = 0;
  return sub_21A6B0050(a1);
}

void sub_21A6AC448(void *a1)
{
  __cxa_begin_catch(a1);
  std::terminate();
}

uint64_t sub_21A6AC45C(uint64_t result)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;

  v1 = *(_QWORD *)(result + 104);
  if (v1)
  {
    v2 = (_QWORD *)result;
    v3 = (_QWORD *)(result + 64);
    do
    {
      CFRelease(*(CFTypeRef *)(*(_QWORD *)(v2[9] + (((unint64_t)(v1 + v2[12] - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                             + 8 * ((v1 + v2[12] - 1) & 0x1FF)));
      --v2[13];
      result = sub_21A6CEB8C(v3, 1);
      v1 = v2[13];
    }
    while (v1);
  }
  return result;
}

void sub_21A6AC4CC(uint64_t a1, CFTypeRef cf)
{
  CFTypeRef v3;

  v3 = *(CFTypeRef *)(a1 + 336);
  if (v3 != cf)
  {
    if (v3)
      CFRelease(v3);
    *(_QWORD *)(a1 + 336) = cf;
    if (cf)
      CFRetain(cf);
  }
}

uint64_t sub_21A6AC518(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t v5;
  CFPropertyListRef v6;
  const __CFAllocator *v7;
  const void *Mutable;
  void *v9;
  CFMutableArrayRef v10;
  void *ValueAtIndex;
  CFStringRef v12;
  CFStringRef v13;
  const __CFNumber *v14;
  CFNumberRef v15;
  CFNumberRef v16;
  CFPropertyListRef propertyList;
  int valuePtr;
  void *value;

  value = 0;
  valuePtr = 0;
  propertyList = 0;
  if (a2)
    v4 = 2;
  else
    v4 = 0;
  v5 = sub_21A6AF29C(a1, 1349676902, &propertyList, v4);
  if ((_DWORD)v5)
    goto LABEL_27;
  v6 = propertyList;
  v7 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  if (propertyList)
  {
    propertyList = CFPropertyListCreateDeepCopy((CFAllocatorRef)*MEMORY[0x24BDBD240], propertyList, 2uLL);
    CFRelease(v6);
    Mutable = propertyList;
    if (!propertyList)
      goto LABEL_26;
  }
  else
  {
    Mutable = CFDictionaryCreateMutable(v7, 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
    propertyList = Mutable;
    if (!Mutable)
      goto LABEL_26;
  }
  v9 = (void *)CFDictionaryGetValue((CFDictionaryRef)Mutable, CFSTR("profiles"));
  if (!v9)
  {
    v10 = CFArrayCreateMutable(v7, 0, MEMORY[0x24BDBD690]);
    if (!v10)
      goto LABEL_26;
    v9 = v10;
    CFDictionarySetValue((CFMutableDictionaryRef)propertyList, CFSTR("profiles"), v10);
    CFRelease(v9);
  }
  if (CFArrayGetCount((CFArrayRef)v9) < 1)
  {
    v5 = sub_21A6AFBEC(a1, qword_2550F4DF8, (__CFArray **)&value);
    if ((_DWORD)v5)
      goto LABEL_27;
    CFArrayAppendValue((CFMutableArrayRef)v9, value);
    CFRelease(value);
    ValueAtIndex = value;
  }
  else
  {
    ValueAtIndex = (void *)CFArrayGetValueAtIndex((CFArrayRef)v9, 0);
    value = ValueAtIndex;
    if (a2)
      *(_BYTE *)(a1 + 372) = 1;
  }
  if (!CFDictionaryGetValue((CFDictionaryRef)ValueAtIndex, CFSTR("name")))
  {
    v12 = CFStringCreateWithCString(v7, (const char *)qword_2550F4DF8, 0x8000100u);
    if (!v12)
    {
      v5 = 4294960554;
      goto LABEL_27;
    }
    v13 = v12;
    CFDictionarySetValue((CFMutableDictionaryRef)value, CFSTR("name"), v12);
    CFRelease(v13);
  }
  v14 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)propertyList, CFSTR("currentProfile"));
  if (!v14)
  {
    *(_DWORD *)(a1 + 368) = 0;
    v15 = CFNumberCreate(v7, kCFNumberIntType, (const void *)(a1 + 368));
    if (v15)
    {
      v16 = v15;
      CFDictionarySetValue((CFMutableDictionaryRef)propertyList, CFSTR("currentProfile"), v15);
      CFRelease(v16);
      goto LABEL_25;
    }
LABEL_26:
    v5 = 4294960568;
    goto LABEL_27;
  }
  if (CFNumberGetValue(v14, kCFNumberIntType, &valuePtr))
  {
    *(_DWORD *)(a1 + 368) = valuePtr;
LABEL_25:
    v5 = sub_21A6AD43C(a1, 1349676902, (const __CFString *)propertyList, 0);
    goto LABEL_27;
  }
  v5 = 4294960553;
LABEL_27:
  if (propertyList)
    CFRelease(propertyList);
  return v5;
}

uint64_t sub_21A6AC788(uint64_t a1)
{
  const void *v2;
  const void *v3;
  const void *v4;
  void *v5;
  void *v6;

  *(_QWORD *)a1 = &off_24DD072D0;
  if (*(_QWORD *)(a1 + 40))
  {
    pthread_mutex_lock((pthread_mutex_t *)(a1 + 392));
    ++*(_DWORD *)(a1 + 456);
    CFRelease(*(CFTypeRef *)(a1 + 40));
    *(_QWORD *)(a1 + 40) = 0;
    --*(_DWORD *)(a1 + 456);
    pthread_mutex_unlock((pthread_mutex_t *)(a1 + 392));
  }
  if (*(_QWORD *)(a1 + 32))
  {
    pthread_mutex_lock((pthread_mutex_t *)(a1 + 392));
    ++*(_DWORD *)(a1 + 456);
    CFRelease(*(CFTypeRef *)(a1 + 32));
    *(_QWORD *)(a1 + 32) = 0;
    --*(_DWORD *)(a1 + 456);
    pthread_mutex_unlock((pthread_mutex_t *)(a1 + 392));
  }
  v2 = *(const void **)(a1 + 48);
  if (v2)
  {
    CFRelease(v2);
    *(_QWORD *)(a1 + 48) = 0;
  }
  v3 = *(const void **)(a1 + 56);
  if (v3)
  {
    CFRelease(v3);
    *(_QWORD *)(a1 + 56) = 0;
  }
  sub_21A6AC45C(a1);
  v4 = *(const void **)(a1 + 336);
  if (v4)
  {
    CFRelease(v4);
    *(_QWORD *)(a1 + 336) = 0;
  }
  pthread_mutex_destroy((pthread_mutex_t *)(a1 + 392));
  if (*(char *)(a1 + 367) < 0)
    operator delete(*(void **)(a1 + 344));
  if (*(char *)(a1 + 335) < 0)
    operator delete(*(void **)(a1 + 312));
  if (*(char *)(a1 + 311) < 0)
    operator delete(*(void **)(a1 + 288));
  if (*(char *)(a1 + 287) < 0)
    operator delete(*(void **)(a1 + 264));
  v5 = *(void **)(a1 + 232);
  if (v5)
  {
    *(_QWORD *)(a1 + 240) = v5;
    operator delete(v5);
  }
  v6 = *(void **)(a1 + 200);
  if (v6)
  {
    *(_QWORD *)(a1 + 208) = v6;
    operator delete(v6);
  }
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  if (*(char *)(a1 + 143) < 0)
    operator delete(*(void **)(a1 + 120));
  sub_21A6CDE70((_QWORD *)(a1 + 64));
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_21A6AC90C(_Unwind_Exception *a1)
{
  uint64_t v1;
  pthread_mutex_t *v2;
  pthread_mutex_t *v3;
  void *v5;
  void *v6;

  v3 = v2;
  --*(_DWORD *)(v1 + 456);
  pthread_mutex_unlock(v3);
  if (*(char *)(v1 + 367) < 0)
    operator delete(*(void **)(v1 + 344));
  if (*(char *)(v1 + 335) < 0)
    operator delete(*(void **)(v1 + 312));
  if (*(char *)(v1 + 311) < 0)
    operator delete(*(void **)(v1 + 288));
  if (*(char *)(v1 + 287) < 0)
    operator delete(*(void **)(v1 + 264));
  v5 = *(void **)(v1 + 232);
  if (v5)
  {
    *(_QWORD *)(v1 + 240) = v5;
    operator delete(v5);
  }
  v6 = *(void **)(v1 + 200);
  if (v6)
  {
    *(_QWORD *)(v1 + 208) = v6;
    operator delete(v6);
  }
  if (*(char *)(v1 + 191) < 0)
    operator delete(*(void **)(v1 + 168));
  if (*(char *)(v1 + 143) < 0)
    operator delete(*(void **)(v1 + 120));
  sub_21A6CDE70((_QWORD *)(v1 + 64));
  if (*(char *)(v1 + 31) < 0)
    operator delete(*(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

void sub_21A6ACA08(uint64_t a1)
{
  sub_21A6AC788(a1);
  JUMPOUT(0x220747368);
}

void sub_21A6ACA3C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x220747368](v1, 0x10F3C40C1DAC261);
  _Unwind_Resume(a1);
}

uint64_t sub_21A6ACA60(uint64_t a1, int a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  unsigned int v11;
  int v12;
  int v13;
  unsigned int v14;
  _DWORD *v15;
  char *v16;
  char *v17;
  CFTypeRef cf;
  void *__p[2];
  uint64_t v21;
  int v22;
  uint64_t v23;

  v23 = 0;
  v22 = 0;
  __p[0] = 0;
  __p[1] = 0;
  v21 = 0;
  v4 = sub_21A6AD02C(a1, 1937326416, (char *)&v23 + 4, 0);
  if (!(_DWORD)v4)
  {
    v5 = sub_21A671298(HIDWORD(v23));
    *(_DWORD *)(a1 + 256) = v5;
    if (v5)
      v10 = 0;
    else
      v10 = dword_2550EEFA8 <= 5000;
    if (v10 && (dword_2550EEFA8 != -1 || sub_21A69876C((uint64_t)&dword_2550EEFA8, 0x1388u)))
      sub_21A698FDC((uint64_t)&dword_2550EEFA8, (uint64_t)"ACPStatus BaseStation::Prepare(BOOL)", 5000, (uint64_t)"### no product family for product ID %d\n", v6, v7, v8, v9, HIDWORD(v23));
    v11 = HIDWORD(v23);
    v4 = sub_21A6AD02C(a1, 1717907505, &v23, 0);
    if (!(_DWORD)v4)
    {
      if (v11 <= 0x67)
        LODWORD(v23) = v23 | 0x1000000;
      if (HIDWORD(v23) <= 1)
        LODWORD(v23) = v23 | 0x2000000;
      if (v11 <= 0x67)
      {
        LODWORD(v23) = v23 | 0x7C000000;
        if (HIDWORD(v23))
        {
LABEL_17:
          if (!a2)
            goto LABEL_72;
          goto LABEL_21;
        }
      }
      else if (HIDWORD(v23))
      {
        goto LABEL_17;
      }
      LODWORD(v23) = v23 | 0x1F880;
      if (!a2)
      {
LABEL_72:
        v13 = HIDWORD(v23);
        if (HIDWORD(v23) == 102)
        {
          sub_21A6AD0C4(a1, 0x61546E73u);
          sub_21A6AD0C4(a1, 0x4C454449u);
          sub_21A6AD0C4(a1, 0x4C454443u);
          v13 = HIDWORD(v23);
        }
        v14 = v13 - 104;
        if (v14 <= 5 && v14 != 3)
          sub_21A6AD0C4(a1, 0x52544370u);
        v4 = sub_21A6AD02C(a1, 1937327724, &v22, 0);
        if (!(_DWORD)v4)
        {
          if ((*(_WORD *)(a1 + 224) & 8) != 0 || (v22 & 8) != 0 || HIDWORD(v23) == 104)
            sub_21A6AD0C4(a1, 0x4C454449u);
          sub_21A6AD1C0(a1, 1330463043);
          if (*(_BYTE *)(a1 + 385))
          {
            cf = 0;
            if (!sub_21A6AD300(a1, "raMA", -1, (CFMutableDictionaryRef *)&cf, 2))
              sub_21A6AD43C(a1, 1918979393, (const __CFString *)cf, 2);
            *(_BYTE *)(a1 + 385) = 0;
            if (cf)
              CFRelease(cf);
          }
          sub_21A6AD6EC(a1, 1);
          if (a2)
          {
            *(_DWORD *)(a1 + 260) = -1;
            v4 = sub_21A6AF01C(a1, 1836013171, (uint64_t)__p, 0);
            v15 = (_DWORD *)(a1 + 260);
            if (v21 >= 0)
              v16 = (char *)__p;
            else
              v16 = (char *)__p[0];
            v17 = strstr(v16, "APPLE VERSION ");
            if (v17)
              sscanf(v17 + 14, "%u", a1 + 260);
            if ((*v15 & 0x80000000) != 0)
              *v15 = 7;
            if (sub_21A6AF0B4(a1, 1347372333) || (v4 = sub_21A6AF140(a1, 1769161027, 1, 2), !(_DWORD)v4))
            {
              if (sub_21A6AF0B4(a1, 1349676902))
                sub_21A6AF1F0(a1);
            }
          }
          else
          {
            v4 = 0;
          }
        }
        goto LABEL_100;
      }
LABEL_21:
      if (v11 <= 0x67)
      {
        v12 = v23;
        if ((v23 & 1) != 0)
        {
          sub_21A6AD0C4(a1, 0x53416343u);
          v12 = v23;
        }
        if ((v12 & 2) != 0)
        {
          sub_21A6AD0C4(a1, 0x52654449u);
          v12 = v23;
        }
        if ((v12 & 4) != 0)
        {
          sub_21A6AD0C4(a1, 0x444D6573u);
          v12 = v23;
        }
        if ((v12 & 8) != 0)
        {
          sub_21A6AD0C4(a1, 0x4E414F4Cu);
          v12 = v23;
        }
        if ((v12 & 0x10) != 0)
        {
          sub_21A6AD0C4(a1, 0x4E6F4D57u);
          v12 = v23;
        }
        if ((v12 & 0x20) != 0)
        {
          sub_21A6AD0C4(a1, 0x41436853u);
          v12 = v23;
        }
        if ((v12 & 0x40) != 0)
        {
          sub_21A6AD0C4(a1, 0x5261526Fu);
          v12 = v23;
        }
        if ((v12 & 0x80) != 0)
        {
          sub_21A6AD0C4(a1, 0x53447557u);
          v12 = v23;
        }
        if ((v12 & 0x100) != 0)
        {
          sub_21A6AD0C4(a1, 0x4D435274u);
          v12 = v23;
        }
        if ((v12 & 0x200) != 0)
        {
          sub_21A6AD0C4(a1, 0x416C7444u);
          v12 = v23;
        }
        if ((v12 & 0x400) != 0)
        {
          sub_21A6AD0C4(a1, 0x416C7449u);
          v12 = v23;
        }
        if ((v12 & 0x800) != 0)
        {
          sub_21A6AD0C4(a1, 0x5750412Du);
          v12 = v23;
        }
        if ((v12 & 0x1000) != 0)
        {
          sub_21A6AD0C4(a1, 0x4145532Du);
          v12 = v23;
        }
        if ((v12 & 0x2000) != 0)
        {
          sub_21A6AD0C4(a1, 0x5379734Cu);
          v12 = v23;
        }
        if ((v12 & 0x4000) != 0)
        {
          sub_21A6AD0C4(a1, 0x4E54502Du);
          v12 = v23;
        }
        if ((v12 & 0x8000) != 0)
        {
          sub_21A6AD0C4(a1, 0x50726F66u);
          v12 = v23;
        }
        if ((v12 & 0x10000) != 0)
        {
          sub_21A6AD0C4(a1, 0x42535441u);
          v12 = v23;
        }
        if ((v12 & 0x1000000) != 0)
        {
          sub_21A6AD0C4(a1, 0x52614D53u);
          v12 = v23;
        }
        if ((v12 & 0x2000000) != 0)
        {
          sub_21A6AD0C4(a1, 0x52616444u);
          v12 = v23;
        }
        if ((v12 & 0x4000000) != 0)
        {
          sub_21A6AD0C4(a1, 0x5553422Du);
          v12 = v23;
        }
        if ((v12 & 0x8000000) != 0)
        {
          sub_21A6AD0C4(a1, 0x54785077u);
          v12 = v23;
        }
        if ((v12 & 0x10000000) != 0)
        {
          sub_21A6AD0C4(a1, 0x5744532Du);
          v12 = v23;
        }
        if ((v12 & 0x20000000) != 0)
        {
          sub_21A6AD0C4(a1, 0x4E507241u);
          v12 = v23;
        }
        if ((v12 & 0x40000000) != 0)
        {
          sub_21A6AD0C4(a1, 0x4E446548u);
          v12 = v23;
        }
        if (v12 < 0)
          sub_21A6AD0C4(a1, 0x504F452Du);
      }
      goto LABEL_72;
    }
  }
LABEL_100:
  if (SHIBYTE(v21) < 0)
    operator delete(__p[0]);
  return v4;
}

void sub_21A6AD010(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_21A6AD02C(uint64_t a1, int a2, void *a3, uint64_t a4)
{
  uint64_t v7;
  void *__p[2];
  char v10;
  char __s[5];

  sub_21A6711EC(a2, __s);
  sub_21A6CE0F0(__p, __s);
  v7 = sub_21A6B77DC(a1, (uint64_t)__p, a3, a4);
  if (v10 < 0)
    operator delete(__p[0]);
  return v7;
}

void sub_21A6AD0A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_21A6AD0C4(uint64_t a1, unsigned int a2)
{
  CFTypeID v4;
  const __CFAllocator *v5;
  CFIndex Length;
  __CFData *MutableCopy;
  const __CFString *v8;
  UInt8 bytes[4];
  CFTypeRef cf;

  cf = 0;
  if (!sub_21A6AF0B4(a1, a2))
  {
    *(_DWORD *)bytes = 0;
    if (!sub_21A6AF29C(a1, 1717920116, &cf, 0))
    {
      if (!cf)
        return;
      v4 = CFGetTypeID(cf);
      if (v4 == CFDataGetTypeID())
      {
        v5 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
        Length = CFDataGetLength((CFDataRef)cf);
        MutableCopy = CFDataCreateMutableCopy(v5, Length + 4, (CFDataRef)cf);
        if (MutableCopy)
        {
          v8 = (const __CFString *)MutableCopy;
          *(_DWORD *)bytes = bswap32(a2);
          CFDataAppendBytes(MutableCopy, bytes, 4);
          if (!sub_21A6AD43C(a1, 1717920116, v8, 2))
            sub_21A6AD6EC(a1, 1);
          CFRelease(v8);
        }
      }
    }
    if (cf)
      CFRelease(cf);
  }
}

void sub_21A6AD1C0(uint64_t a1, int a2)
{
  CFTypeID v4;
  const UInt8 *BytePtr;
  unint64_t Length;
  const __CFAllocator *v7;
  CFIndex v8;
  CFMutableDataRef Mutable;
  __CFData *v10;
  uint64_t v11;
  CFTypeRef cf;

  cf = 0;
  if (sub_21A6AF0B4(a1, a2))
  {
    if (!sub_21A6AF29C(a1, 1717920116, &cf, 0))
    {
      if (!cf)
        return;
      v4 = CFGetTypeID(cf);
      if (v4 == CFDataGetTypeID())
      {
        BytePtr = CFDataGetBytePtr((CFDataRef)cf);
        Length = CFDataGetLength((CFDataRef)cf);
        v7 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
        v8 = CFDataGetLength((CFDataRef)cf);
        Mutable = CFDataCreateMutable(v7, v8 - 4);
        if (Mutable)
        {
          v10 = Mutable;
          if (Length >= 4)
          {
            if (Length >> 2 <= 1)
              v11 = 1;
            else
              v11 = Length >> 2;
            do
            {
              if (bswap32(*(_DWORD *)BytePtr) != a2)
                CFDataAppendBytes(v10, BytePtr, 4);
              BytePtr += 4;
              --v11;
            }
            while (v11);
          }
          if (!sub_21A6AD43C(a1, 1717920116, (const __CFString *)v10, 2))
            sub_21A6AD6EC(a1, 1);
          CFRelease(v10);
        }
      }
    }
    if (cf)
      CFRelease(cf);
  }
}

uint64_t sub_21A6AD300(uint64_t a1, char *a2, uint64_t a3, CFMutableDictionaryRef *a4, uint64_t a5)
{
  uint64_t v9;
  void *__p[2];
  char v12;
  std::string v13;
  _BYTE v14[17];
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  memset(&v13, 0, sizeof(v13));
  if (a4)
  {
    sub_21A6C379C(v14, 0x11uLL, a3);
    MEMORY[0x220747320](&v13, v14);
    sub_21A6CE0F0(__p, a2);
    sub_21A6B3A38((unsigned __int8 *)&v13, (uint64_t)__p, &v13);
    if (v12 < 0)
      operator delete(__p[0]);
    v9 = sub_21A6B44B4(a1, (uint64_t)&v13, a4, a5);
    if ((_DWORD)v9 == -5)
    {
      *a4 = (CFMutableDictionaryRef)&stru_24DD08368;
      CFRetain(&stru_24DD08368);
      v9 = 0;
    }
  }
  else
  {
    v9 = 4294967292;
  }
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
  return v9;
}

void sub_21A6AD404(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_21A6AD43C(uint64_t a1, uint64_t a2, const __CFString *a3, uint64_t a4)
{
  pthread_mutex_t *v8;
  CFStringRef v9;
  uint64_t v10;
  void *v12;
  void *v13;
  _BOOL4 v14;
  void *__p[2];
  char v16;
  char v17;
  char cStr[5];
  void *value;

  value = 0;
  v17 = 0;
  v8 = (pthread_mutex_t *)(a1 + 392);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 392));
  ++*(_DWORD *)(a1 + 456);
  sub_21A6711EC(a2, cStr);
  v9 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x24BDBD240], cStr, 0x8000100u);
  if (v9)
  {
    if (sub_21A6B13CC(a1, a2))
    {
      sub_21A6CE0F0(__p, cStr);
      v10 = sub_21A6B5B00(a1, (uint64_t)__p, (uint64_t)a3, a4);
      if (v16 < 0)
        operator delete(__p[0]);
      goto LABEL_20;
    }
    if (a3)
    {
      v10 = sub_21A6B76C4(a1, a2, a3, &value, &v17);
      if ((_DWORD)v10 || !value)
        goto LABEL_20;
      __p[0] = 0;
      if (a4 > 1)
      {
        CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 32), v9, value);
        __p[0] = value;
LABEL_17:
        if (v17)
          CFRelease(value);
        goto LABEL_19;
      }
      if ((_DWORD)a2 != 2002862934)
      {
        __p[0] = (void *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 32), v9);
        goto LABEL_23;
      }
      v10 = sub_21A6AF97C((CFDictionaryRef *)a1, 2002862934, (CFNumberRef *)__p, 2);
      if (!(_DWORD)v10)
      {
LABEL_23:
        v12 = (void *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 40), v9);
        v13 = v12;
        if (v12 && !CFEqual(v12, value) || !__p[0] || !CFEqual(__p[0], value))
        {
          v14 = !sub_21A6B7764(a1, a2);
          if ((_DWORD)a2 == 1466517097)
            LOBYTE(v14) = 0;
          if (!v14)
          {
            CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 40), v9, value);
            v13 = value;
          }
        }
        if (__p[0])
        {
          if (v13)
          {
            if (CFEqual(v13, __p[0]))
            {
              v10 = sub_21A6AD43C(a1, a2, 0, 1);
              if ((_DWORD)v10)
                goto LABEL_20;
            }
          }
        }
        goto LABEL_17;
      }
    }
    else
    {
      if (a4 <= 1)
      {
        CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a1 + 40), v9);
LABEL_19:
        v10 = 0;
        goto LABEL_20;
      }
      v10 = 4294960591;
    }
LABEL_20:
    CFRelease(v9);
    goto LABEL_21;
  }
  v10 = 4294960568;
LABEL_21:
  --*(_DWORD *)(a1 + 456);
  pthread_mutex_unlock(v8);
  return v10;
}

void sub_21A6AD6A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  pthread_mutex_t *v15;
  uint64_t v16;

  --*(_DWORD *)(v16 + 456);
  pthread_mutex_unlock(v15);
  _Unwind_Resume(a1);
}

void sub_21A6AD6EC(uint64_t a1, char a2)
{
  _BOOL4 v3;
  BOOL v4;
  BOOL v5;
  int v6;
  unint64_t v7;
  int v8;
  uint64_t v9;
  unint64_t *v10;
  uint64_t v11;
  _QWORD *v12;
  BOOL v13;
  uint64_t v14;
  uint64_t *i;
  int v16;
  unsigned __int16 v17;
  unsigned __int16 v18;
  unsigned __int16 v19;
  unsigned __int16 v20;
  uint64_t v21;
  int v22;
  unsigned __int16 v23;
  char v24;
  unsigned __int16 v25;
  unsigned __int16 v26;
  unsigned __int16 v27;
  unsigned __int16 v28;
  int v29;
  unsigned __int16 v30;
  int v31;
  unsigned __int16 v32;
  unsigned int v33;
  int v34;
  unsigned __int16 v35;
  unsigned __int16 v36;
  unsigned __int16 v37;
  unsigned __int16 v38;
  int v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  unint64_t v45;
  BOOL v46;
  BOOL v47;
  BOOL v48;
  char v49;
  int v50;

  if ((a2 & 1) != 0 || *(_QWORD *)(a1 + 208) == *(_QWORD *)(a1 + 200))
  {
    v50 = 0;
    if (!sub_21A6AD02C(a1, 1752641585, &v50, 0))
    {
      v3 = sub_21A6AF0B4(a1, 2003390540);
      v4 = sub_21A6AF0B4(a1, 1382368329);
      v49 = v50;
      v48 = sub_21A6AF0B4(a1, 1768961614);
      v5 = sub_21A6AF0B4(a1, 1765164850);
      v47 = sub_21A6AF0B4(a1, 1198748750);
      v6 = 1651861868;
      v7 = 0;
      do
      {
        v8 = *(_DWORD *)((char *)&qword_21A73D148 + v7 + 12);
        v7 += 12;
      }
      while (v8);
      v10 = (unint64_t *)(a1 + 200);
      v9 = *(_QWORD *)(a1 + 200);
      v12 = (_QWORD *)(a1 + 208);
      v11 = *(_QWORD *)(a1 + 208);
      if (v11 - v9 >= v7)
      {
        if (v11 - v9 > v7)
          *v12 = v9 + v7;
      }
      else
      {
        sub_21A6CE228((unint64_t *)(a1 + 200), v9 - v11 + v7);
        v6 = 1651861868;
      }
      v13 = (v49 & 1) == 0 && v4;
      v46 = v13;
      v14 = 0;
      for (i = &qword_21A73D148; ; i = (uint64_t *)((char *)i + 12))
      {
        if (v6 > 1885688653)
        {
          if (v6 > 1936611158)
          {
            if (v6 <= 2002862896)
            {
              if (v6 > 1937330257)
              {
                if (v6 <= 1937331825)
                {
                  if (v6 > 1937331018)
                  {
                    if (v6 <= 1937331059)
                    {
                      if (v6 == 1937331019)
                        goto LABEL_446;
                      v32 = 21326;
                      goto LABEL_355;
                    }
                    if (v6 != 1937331060)
                    {
                      v32 = 21844;
LABEL_355:
                      v31 = v32 | 0x73790000;
                      goto LABEL_406;
                    }
LABEL_412:
                    v21 = a1;
                    v38 = 21364;
LABEL_413:
                    v22 = v38 | 0x53790000;
                    goto LABEL_440;
                  }
                  if (v6 == 1937330258 || v6 == 1937330263)
                    goto LABEL_446;
                  v30 = 21093;
                  goto LABEL_290;
                }
                if (v6 <= 1953066361)
                {
                  if ((v6 - 1937331826) >= 2)
                  {
                    if (v6 == 1950434124)
                    {
                      v21 = a1;
                      v22 = 1950434124;
                    }
                    else
                    {
                      if (v6 != 1953066341)
                        goto LABEL_447;
LABEL_390:
                      v21 = a1;
                      v22 = 1381253996;
                    }
                    goto LABEL_440;
                  }
                  goto LABEL_446;
                }
                if (v6 > 1970496069)
                {
                  if (v6 == 1970496070)
                    goto LABEL_446;
                  if (v6 == 1970500196)
                  {
                    v21 = a1;
                    v22 = 1433617506;
                    goto LABEL_440;
                  }
                  goto LABEL_447;
                }
                if (v6 == 1953066362)
                  goto LABEL_390;
                v34 = 1953645423;
                goto LABEL_394;
              }
              if (v6 > 1937326963)
              {
                if (v6 <= 1937328486)
                {
                  if (v6 == 1937326964 || v6 == 1937327182)
                    goto LABEL_446;
                  v32 = 18028;
                  goto LABEL_355;
                }
                if (v6 > 1937329262)
                {
                  if (v6 == 1937329263)
                    goto LABEL_446;
                  v32 = 20077;
                  goto LABEL_355;
                }
                if (v6 == 1937328487)
                  goto LABEL_412;
                v30 = 19538;
LABEL_290:
                if (v6 == (v30 | 0x73790000))
                {
                  v21 = a1;
                  v22 = 942682734;
                  goto LABEL_440;
                }
                goto LABEL_447;
              }
              if (v6 <= 1937011780)
              {
                if (v6 == 1936611159 || v6 == 1936876406)
                  goto LABEL_446;
                if (v6 == 1937006964)
                {
LABEL_260:
                  v21 = a1;
                  v22 = 1097749364;
                  goto LABEL_440;
                }
              }
              else
              {
                if (v6 > 1937326412)
                {
                  if (v6 == 1937326413)
                    goto LABEL_446;
                  v32 = 16720;
                  goto LABEL_355;
                }
                if ((v6 - 1937011781) < 2)
                  goto LABEL_260;
                if (v6 == 1937068114)
                {
                  v21 = a1;
                  v22 = 1937068114;
                  goto LABEL_440;
                }
              }
            }
            else
            {
              if (v6 <= 2002866766)
              {
                if (v6 <= 2002864463)
                {
                  if ((v6 - 2002863153) > 0x22
                    || ((1 << (v6 - 49)) & 0x420040007) == 0)
                  {
                    v33 = v6 - 2002862897;
                    if (v33 > 0x25 || ((1 << v33) & 0x2000080007) == 0)
                      goto LABEL_447;
                  }
                  goto LABEL_446;
                }
                if (v6 <= 2002865472)
                {
                  if (v6 == 2002864464)
                    goto LABEL_446;
                  v19 = 18798;
                }
                else
                {
                  if (v6 == 2002865473)
                    goto LABEL_446;
                  if (v6 == 2002865741)
                  {
                    v21 = a1;
                    v22 = 1315917143;
                    goto LABEL_440;
                  }
                  v19 = 21057;
                }
                goto LABEL_189;
              }
              if (v6 <= 2002932291)
              {
                if (v6 > 2002927938)
                {
                  if (((v6 - 2002929742) > 7 || ((1 << (v6 - 78)) & 0x85) == 0)
                    && v6 != 2002927939
                    && v6 != 2002929006)
                  {
                    goto LABEL_447;
                  }
                  goto LABEL_216;
                }
                if (v6 != 2002866767)
                {
                  if (v6 == 2002867012)
                  {
                    v21 = a1;
                    v22 = 1396995415;
                    goto LABEL_440;
                  }
                  v19 = 21325;
LABEL_189:
                  v31 = v19 | 0x77610000;
                  goto LABEL_406;
                }
                v40 = a1;
                v41 = 1400460148;
LABEL_428:
                if (sub_21A6AF0B4(v40, v41))
                  goto LABEL_447;
                goto LABEL_446;
              }
              if (v6 <= 2003003252)
              {
                if ((v6 - 2002932292) > 0x11 || ((1 << (v6 - 68)) & 0x21001) == 0)
                {
                  v29 = 2003003251;
LABEL_204:
                  if (v6 != v29)
                    goto LABEL_447;
LABEL_297:
                  v21 = a1;
                  v22 = 1635215715;
                  goto LABEL_440;
                }
LABEL_216:
                v21 = a1;
                v22 = 2000834122;
                goto LABEL_440;
              }
              if (v6 <= 2003061874)
              {
                if (v6 == 2003003253)
                  goto LABEL_297;
                if (v6 != 2003060332)
                  goto LABEL_447;
LABEL_415:
                if (!v3)
                {
                  v21 = a1;
                  v22 = 1464095533;
                  goto LABEL_440;
                }
                goto LABEL_447;
              }
              if (v6 == 2003061875)
                goto LABEL_415;
              if (v6 == 2004050793)
              {
                v21 = a1;
                v22 = 1465074477;
                goto LABEL_440;
              }
            }
          }
          else if (v6 > 1918979648)
          {
            if (v6 <= 1918981233)
            {
              if (v6 > 1918980913)
              {
                if (v6 <= 1918981169)
                {
                  v24 = v6 - 76;
                  if ((v6 - 1918980940) <= 0x28)
                  {
                    if (((1 << v24) & 0x10082000000) != 0)
                      goto LABEL_445;
                    if (((1 << v24) & 0x41) != 0)
                      goto LABEL_446;
                  }
                  v20 = 21298;
                  goto LABEL_443;
                }
                if (v6 != 1918981170)
                {
                  v20 = 21613;
                  goto LABEL_443;
                }
LABEL_445:
                if (!v3)
                  goto LABEL_446;
                goto LABEL_447;
              }
              if (v6 <= 1918980215)
              {
                if (v6 == 1918979649)
                  goto LABEL_446;
                if (v6 != 1918979693)
                {
                  if (v6 != 1918980207 || v3)
                    goto LABEL_447;
                  v21 = a1;
                  v22 = 1417171063;
                  goto LABEL_440;
                }
                goto LABEL_445;
              }
              if (v6 > 1918980708)
              {
                if (v6 != 1918980709)
                {
                  if (v6 != 1918980719 || v3)
                    goto LABEL_447;
                  v21 = a1;
                  v37 = 21103;
LABEL_421:
                  v22 = v37 | 0x52610000;
LABEL_440:
                  if (!sub_21A6AF0B4(v21, v22))
                    goto LABEL_447;
LABEL_446:
                  v42 = *v10 + 12 * v14++;
                  v43 = *i;
                  *(_DWORD *)(v42 + 8) = *((_DWORD *)i + 2);
                  *(_QWORD *)v42 = v43;
                  goto LABEL_447;
                }
                goto LABEL_445;
              }
              if (v6 == 1918980216)
                goto LABEL_446;
              v20 = 21042;
LABEL_443:
              v39 = v20 | 0x72610000;
LABEL_444:
              if (v6 != v39)
                goto LABEL_447;
              goto LABEL_445;
            }
            if (v6 > 1936488043)
            {
              if (v6 > 1936608342)
              {
                if (v6 > 1936609878)
                {
                  if (v6 == 1936609879)
                    goto LABEL_446;
                  v27 = 22348;
                }
                else
                {
                  if (v6 == 1936608343)
                    goto LABEL_446;
                  v27 = 21068;
                }
              }
              else if (v6 > 1936606034)
              {
                if (v6 == 1936606035)
                {
                  v21 = a1;
                  v22 = 1936606035;
                  goto LABEL_440;
                }
                v27 = 19532;
              }
              else
              {
                if (v6 == 1936488044)
                {
LABEL_367:
                  v21 = a1;
                  v38 = 29516;
                  goto LABEL_413;
                }
                v27 = 16710;
              }
              v31 = v27 | 0x736E0000;
              goto LABEL_406;
            }
            if (v6 <= 1918981956)
            {
              if (v6 > 1918981953)
              {
                if (v6 != 1918981954)
                {
                  if (v6 != 1918981955 || v3)
                    goto LABEL_447;
                  v21 = a1;
                  v22 = 1466188648;
                  goto LABEL_440;
                }
                goto LABEL_446;
              }
              if (v6 == 1918981234)
                goto LABEL_446;
              v20 = 21810;
              goto LABEL_443;
            }
            if (v6 <= 1936017003)
            {
              if (v6 != 1918981957)
              {
                v20 = 22349;
                goto LABEL_443;
              }
              goto LABEL_445;
            }
            if (v6 == 1936017004)
              goto LABEL_446;
            if (v6 == 1936474988)
              goto LABEL_367;
          }
          else if (v6 > 1918977106)
          {
            if (v6 > 1918978899)
            {
              if (v6 > 1918979392)
              {
                if (v6 == 1918979393)
                  goto LABEL_446;
                if (v6 != 1918979428)
                {
                  if (v6 != 1918979445 || v3)
                    goto LABEL_447;
                  v21 = a1;
                  v22 = 1296257652;
                  goto LABEL_440;
                }
              }
              else if (v6 != 1918978900)
              {
                if (v6 == 1918979139)
                  goto LABEL_446;
                v31 = 1918979142;
                goto LABEL_406;
              }
              goto LABEL_445;
            }
            if (v6 > 1918977585)
            {
              if ((v6 - 1918978353) >= 2 && v6 != 1918977586)
              {
                v20 = 18028;
                goto LABEL_443;
              }
              goto LABEL_445;
            }
            if (v6 == 1918977107)
              goto LABEL_446;
            if (v6 != 1918977125)
            {
              if (v6 != 1918977345 || v3)
                goto LABEL_447;
              v21 = a1;
              v22 = 1464877357;
              goto LABEL_440;
            }
            if (!v3)
            {
              v21 = a1;
              v37 = 25668;
              goto LABEL_421;
            }
          }
          else
          {
            if (v6 <= 1918972226)
            {
              if (v6 <= 1886213216)
              {
                if ((v6 - 1886212169) <= 0xA && ((1 << (v6 - 73)) & 0x601) != 0 || v6 == 1885688654)
                  goto LABEL_446;
                v17 = 21838;
                goto LABEL_405;
              }
              if (v6 > 1886547537)
              {
                if (v6 != 1886547538)
                {
                  if (v6 != 1918128974 || v3)
                    goto LABEL_447;
                  v21 = a1;
                  v22 = 1414745645;
                  goto LABEL_440;
                }
              }
              else
              {
                if (v6 == 1886213217)
                {
                  v40 = a1;
                  v41 = 1181898604;
                  goto LABEL_428;
                }
                if (v6 != 1886547529)
                  goto LABEL_447;
              }
              v21 = a1;
              v22 = 1431519789;
              goto LABEL_440;
            }
            if (v6 <= 1918976817)
            {
              if (v6 != 1918972227 && v6 != 1918976355)
              {
                v20 = 16757;
                goto LABEL_443;
              }
              goto LABEL_445;
            }
            if ((v6 - 1918976833) > 0x31)
              goto LABEL_442;
            if (((1 << (v6 - 65)) & 0x2098000000000) != 0)
              goto LABEL_445;
            if (v6 != 1918976833)
            {
LABEL_442:
              v20 = 17202;
              goto LABEL_443;
            }
            if (!v3)
            {
              v21 = a1;
              v22 = 1094936659;
              goto LABEL_440;
            }
          }
        }
        else if (v6 > 1684558667)
        {
          if (v6 > 1836007759)
          {
            if (v6 <= 1851868525)
            {
              if (v6 <= 1836011587)
              {
                if (v6 <= 1836008531)
                {
                  if (v6 == 1836007760 || v6 == 1836008259)
                  {
LABEL_379:
                    if ((v49 & 1) != 0)
                      goto LABEL_447;
                    goto LABEL_446;
                  }
                  v25 = 17225;
                }
                else if (v6 > 1836010821)
                {
                  if (v6 == 1836010822)
                    goto LABEL_379;
                  v25 = 19792;
                }
                else
                {
                  if (v6 == 1836008532)
                    goto LABEL_379;
                  v25 = 18756;
                }
                goto LABEL_378;
              }
              if (v6 <= 1836013170)
              {
                if ((v6 - 1836011588) <= 0x13 && ((1 << (v6 - 68)) & 0x80401) != 0)
                  goto LABEL_379;
                v25 = 21838;
                goto LABEL_378;
              }
              if (v6 > 1851867461)
              {
                if (v6 == 1851867462)
                {
                  v21 = a1;
                  v22 = 1312902988;
                  goto LABEL_440;
                }
                v36 = 16999;
                goto LABEL_386;
              }
              if (v6 == 1836013171)
                goto LABEL_379;
              if (v6 == 1849970010)
              {
                v21 = a1;
                v22 = 1313105224;
                goto LABEL_440;
              }
            }
            else
            {
              if (v6 > 1885621570)
              {
                if (v6 > 1885684046)
                {
                  if (v6 > 1885687894)
                  {
                    if (v6 == 1885687895)
                      goto LABEL_446;
                    v17 = 21315;
                  }
                  else
                  {
                    if (v6 == 1885684047)
                      goto LABEL_446;
                    v17 = 18756;
                  }
                  goto LABEL_405;
                }
                if (v6 > 1885623629)
                {
                  if (v6 == 1885623630)
                  {
LABEL_371:
                    if (!v46)
                      goto LABEL_447;
                    goto LABEL_446;
                  }
                  v17 = 16707;
LABEL_405:
                  v31 = v17 | 0x70650000;
                  goto LABEL_406;
                }
                if (v6 == 1885621571)
                  goto LABEL_371;
                v28 = 20567;
                goto LABEL_370;
              }
              if (v6 > 1853117269)
              {
                if (v6 > 1885619819)
                {
                  if (v6 == 1885619820)
                    goto LABEL_371;
                  v28 = 18756;
                }
                else
                {
                  if (v6 == 1853117270)
                  {
                    v21 = a1;
                    v22 = 1314148397;
                    goto LABEL_440;
                  }
                  v28 = 16722;
                }
LABEL_370:
                if (v6 == (v28 | 0x70640000))
                  goto LABEL_371;
                goto LABEL_447;
              }
              if (v6 > 1851871854)
              {
                if (v6 == 1851871855)
                  goto LABEL_446;
                v36 = 21326;
LABEL_386:
                v31 = v36 | 0x6E610000;
LABEL_406:
                if (v6 != v31)
                  goto LABEL_447;
                goto LABEL_446;
              }
              if (v6 == 1851868526)
                goto LABEL_446;
              if (v6 == 1851868780)
              {
                v21 = a1;
                v22 = 1313885520;
                goto LABEL_440;
              }
            }
          }
          else if (v6 > 1752641584)
          {
            if (v6 <= 1818449521)
            {
              if (v6 <= 1818315087)
              {
                if (v6 == 1752641585)
                  goto LABEL_446;
                if (v6 == 1766026340)
                {
                  v21 = a1;
                  v22 = 1766018116;
                  goto LABEL_440;
                }
                v31 = 1769161027;
              }
              else if (v6 > 1818317644)
              {
                if (v6 == 1818317645)
                  goto LABEL_446;
                v31 = 1818447190;
              }
              else
              {
                if (v6 == 1818315088)
                  goto LABEL_446;
                v31 = 1818316097;
              }
              goto LABEL_406;
            }
            if (v6 > 1835090283)
            {
              if (v6 > 1835626066)
              {
                if (v6 == 1835626067)
                  goto LABEL_446;
                v25 = 16708;
LABEL_378:
                if (v6 == (v25 | 0x6D6F0000))
                  goto LABEL_379;
                goto LABEL_447;
              }
              if (v6 == 1835090284)
                goto LABEL_446;
              if (v6 == 1835094130)
                goto LABEL_224;
            }
            else
            {
              if ((v6 - 1818449522) < 2 || v6 == 1818455382)
                goto LABEL_446;
              if (v6 == 1818575203)
              {
                v21 = a1;
                v22 = 1279607875;
                goto LABEL_440;
              }
            }
          }
          else
          {
            if (v6 > 1718842223)
            {
              if (v6 > 1735281764)
              {
                if (v6 > 1735283310)
                {
                  if (v6 == 1735283311)
                    goto LABEL_395;
                  v26 = 21326;
                }
                else
                {
                  if (v6 == 1735281765)
                    goto LABEL_395;
                  v26 = 19815;
                }
              }
              else if (v6 > 1735279206)
              {
                if (v6 == 1735279207)
                  goto LABEL_395;
                v26 = 17774;
              }
              else
              {
                if (v6 == 1718842224)
                  goto LABEL_346;
                v26 = 14645;
              }
              v34 = v26 | 0x676E0000;
LABEL_394:
              if (v6 == v34)
              {
LABEL_395:
                if (!v47)
                  goto LABEL_447;
                goto LABEL_446;
              }
              goto LABEL_447;
            }
            if (v6 <= 1702519653)
            {
              if (v6 > 1684886387)
              {
                if (v6 == 1684886388)
                {
                  v21 = a1;
                  v22 = 1298616948;
                }
                else
                {
                  if (v6 != 1685538412 || v3)
                    goto LABEL_447;
                  v21 = a1;
                  v22 = 1685540419;
                }
                goto LABEL_440;
              }
              if (v6 == 1684558668)
                goto LABEL_446;
              v18 = 21326;
LABEL_246:
              v31 = v18 | 0x64680000;
              goto LABEL_406;
            }
            if (v6 <= 1717920115)
            {
              if (v6 == 1702519654)
              {
LABEL_220:
                v21 = a1;
                v22 = 1163543378;
                goto LABEL_440;
              }
              v31 = 1717907505;
              goto LABEL_406;
            }
            if (v6 == 1717920116)
              goto LABEL_446;
            if (v6 == 1718186597)
            {
              v21 = a1;
              v22 = 1181898604;
              goto LABEL_440;
            }
          }
        }
        else if (v6 > 1280077418)
        {
          if (v6 <= 1633899616)
          {
            if (v6 <= 1397572214)
            {
              if (v6 <= 1349676901)
              {
                if (v6 == 1280077419)
                  goto LABEL_446;
                if (v6 == 1298223988)
                {
LABEL_346:
                  v21 = a1;
                  v22 = 1297314927;
                  goto LABEL_440;
                }
                v31 = 1346918739;
                goto LABEL_406;
              }
              if (v6 <= 1381328491)
              {
                if (v6 == 1349676902)
                {
LABEL_224:
                  v21 = a1;
                  v22 = 1349676902;
                }
                else
                {
                  if (v6 != 1381327990)
                    goto LABEL_447;
LABEL_411:
                  v21 = a1;
                  v22 = 1179996994;
                }
                goto LABEL_440;
              }
              if (v6 == 1381328492)
                goto LABEL_411;
              if (v6 == 1397572211)
                goto LABEL_346;
            }
            else
            {
              if (v6 > 1464626794)
              {
                if (v6 <= 1633116525)
                {
                  if (v6 != 1464626795 && (v6 != 1466517097 || !v3))
                    goto LABEL_447;
                  goto LABEL_446;
                }
                if (v6 == 1633116526)
                  goto LABEL_383;
                v39 = 1633895790;
                goto LABEL_444;
              }
              if (v6 > 1398097520)
              {
                if (v6 == 1398097521)
                  goto LABEL_325;
                v23 = 21366;
              }
              else
              {
                if (v6 == 1397572215)
                  goto LABEL_346;
                v23 = 17774;
              }
              if (v6 == (v23 | 0x53550000))
              {
LABEL_325:
                v21 = a1;
                v22 = 1130911088;
                goto LABEL_440;
              }
            }
          }
          else
          {
            if (v6 <= 1683440722)
            {
              if (v6 > 1635078737)
              {
                if (v6 > 1668573548)
                {
                  if (v6 == 1668573549)
                    goto LABEL_446;
                  v31 = 1668703602;
                  goto LABEL_406;
                }
                if (v6 != 1635078738)
                {
                  v29 = 1635214181;
                  goto LABEL_204;
                }
              }
              else if (v6 > 1635077711)
              {
                if (v6 != 1635077712)
                {
                  v31 = 1635078258;
                  goto LABEL_406;
                }
              }
              else
              {
                if (v6 == 1633899617)
                {
                  v40 = a1;
                  v41 = 1950434124;
                  goto LABEL_428;
                }
                if (v6 != 1635077710)
                  goto LABEL_447;
              }
LABEL_383:
              v21 = a1;
              v22 = 1632923251;
              goto LABEL_440;
            }
            if (v6 > 1684554342)
            {
              if (v6 <= 1684556900)
              {
                if (v6 == 1684554343)
                  goto LABEL_446;
                v18 = 17774;
                goto LABEL_246;
              }
              if (v6 == 1684556901)
                goto LABEL_446;
              if (v6 == 1684557159)
              {
                v21 = a1;
                v22 = 1145922931;
                goto LABEL_440;
              }
            }
            else if (v6 > 1684362099)
            {
              if (v6 == 1684362100)
              {
                v21 = a1;
                v22 = 1165123913;
                goto LABEL_440;
              }
              if (v6 == 1684551989)
              {
                v21 = a1;
                v22 = 1684551989;
                goto LABEL_440;
              }
            }
            else if (v6 == 1683440723)
            {
              if (!v3)
              {
                v21 = a1;
                v22 = 1146569811;
                goto LABEL_440;
              }
            }
            else if (v6 == 1684099956)
            {
              v21 = a1;
              v22 = 1098015561;
              goto LABEL_440;
            }
          }
        }
        else
        {
          if (v6 <= 911697527)
          {
            if (v6 <= 910976630)
            {
              if (v6 <= 910382944)
              {
                if (v6 == 910380129 || v6 == 910381153)
                  goto LABEL_446;
                v31 = 910381164;
                goto LABEL_406;
              }
              if ((v6 - 910382945) <= 0xF && ((1 << (v6 - 97)) & 0x8041) != 0)
                goto LABEL_446;
              v16 = 910975332;
              goto LABEL_302;
            }
            if (v6 <= 911102816)
            {
              if ((v6 - 910976631) < 2)
              {
LABEL_303:
                if (!v48)
                  goto LABEL_447;
              }
              else if ((v6 - 911102769) >= 2 || !v5)
              {
                goto LABEL_447;
              }
              goto LABEL_446;
            }
            if (v6 <= 911230059)
            {
              if ((v6 - 911102817) < 2)
                goto LABEL_446;
              v16 = 911230049;
              goto LABEL_302;
            }
            if (v6 == 911230060)
              goto LABEL_303;
            v35 = 24932;
LABEL_301:
            v16 = v35 | 0x36570000;
            goto LABEL_302;
          }
          if (v6 <= 913532258)
          {
            if (v6 <= 912356723)
            {
              if (v6 == 911697528 || v6 == 911697783)
                goto LABEL_303;
              v35 = 29797;
              goto LABEL_301;
            }
            if (v6 <= 912684907)
            {
              if (v6 == 912356724)
                goto LABEL_303;
              v16 = 912483943;
LABEL_302:
              if (v6 == v16)
                goto LABEL_303;
              goto LABEL_447;
            }
            if (v6 == 912684908)
            {
              v21 = a1;
              v22 = 1768961606;
              goto LABEL_440;
            }
            if (v6 == 913337712)
            {
              v21 = a1;
              v22 = 913337712;
              goto LABEL_440;
            }
          }
          else if (v6 > 1148808786)
          {
            if (v6 > 1229213292)
            {
              if (v6 == 1229213293)
              {
                v21 = a1;
                v22 = 1231975492;
                goto LABEL_440;
              }
              if (v6 == 1229409616)
              {
                v21 = a1;
                v22 = 1229409616;
                goto LABEL_440;
              }
            }
            else
            {
              if (v6 == 1148808787)
              {
                v21 = a1;
                v22 = 1835881796;
                goto LABEL_440;
              }
              if (v6 == 1163543366)
                goto LABEL_220;
            }
          }
          else
          {
            if (v6 <= 913601123)
            {
              if (v6 == 913532259)
              {
                v21 = a1;
                v22 = 913532259;
                goto LABEL_440;
              }
              v16 = 913532535;
              goto LABEL_302;
            }
            if (v6 == 913601124)
            {
              v21 = a1;
              v22 = 913601124;
              goto LABEL_440;
            }
            if (v6 == 1146250611)
            {
              v21 = a1;
              v22 = 1146250611;
              goto LABEL_440;
            }
          }
        }
LABEL_447:
        v44 = *((_DWORD *)i + 3);
        v6 = v44;
        if (!v44)
        {
          v45 = *v12 - *v10;
          if (12 * v14 <= v45)
          {
            if (12 * v14 < v45)
              *v12 = *v10 + 12 * v14;
          }
          else
          {
            sub_21A6CE228(v10, 12 * v14 - v45);
          }
          return;
        }
      }
    }
  }
}

uint64_t sub_21A6AF01C(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  void *__p[2];
  char v10;
  char __s[5];

  sub_21A6711EC(a2, __s);
  sub_21A6CE0F0(__p, __s);
  v7 = sub_21A6B7B5C(a1, (uint64_t)__p, a3, a4);
  if (v10 < 0)
    operator delete(__p[0]);
  return v7;
}

void sub_21A6AF098(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL sub_21A6AF0B4(uint64_t a1, int a2)
{
  _BOOL8 v3;
  CFTypeID v4;
  CFTypeRef cf;

  cf = 0;
  if (sub_21A6AF29C(a1, 1717920116, &cf, 2))
    goto LABEL_2;
  if (!cf)
    return 0;
  v4 = CFGetTypeID(cf);
  if (v4 != CFDataGetTypeID())
LABEL_2:
    v3 = 0;
  else
    v3 = sub_21A6B7FA0((CFDataRef)cf, a2);
  if (cf)
    CFRelease(cf);
  return v3;
}

uint64_t sub_21A6AF140(uint64_t a1, int a2, int a3, uint64_t a4)
{
  const __CFString **v7;
  uint64_t v8;
  void *__p[2];
  char v11;
  char __s[5];

  sub_21A6711EC(a2, __s);
  sub_21A6CE0F0(__p, __s);
  v7 = (const __CFString **)MEMORY[0x24BDBD270];
  if (!a3)
    v7 = (const __CFString **)MEMORY[0x24BDBD268];
  v8 = sub_21A6B2DEC(a1, (uint64_t)__p, *v7, a4);
  if (v11 < 0)
    operator delete(__p[0]);
  return v8;
}

void sub_21A6AF1D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_21A6AF1F0(uint64_t a1)
{
  uint64_t v2;
  CFTypeID v4;
  CFTypeRef cf;

  cf = 0;
  if (*(_BYTE *)(a1 + 373)
    || sub_21A6AF29C(a1, 1349676902, &cf, 2)
    || !cf
    || (v4 = CFGetTypeID(cf), v4 != CFDataGetTypeID())
    || (v2 = sub_21A6AF354(a1, 1349676902, (const __CFString *)cf, 0), !(_DWORD)v2))
  {
    v2 = sub_21A6AC518(a1, 1);
  }
  if (cf)
    CFRelease(cf);
  return v2;
}

uint64_t sub_21A6AF29C(uint64_t a1, uint64_t a2, CFTypeRef *a3, uint64_t a4)
{
  pthread_mutex_t *v8;
  uint64_t v9;
  uint64_t v10;

  v8 = (pthread_mutex_t *)(a1 + 392);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 392));
  ++*(_DWORD *)(a1 + 456);
  v9 = sub_21A6AF97C(a1, a2, a3, a4);
  v10 = v9;
  if (a3 && !(_DWORD)v9 && *a3)
    CFRetain(*a3);
  --*(_DWORD *)(a1 + 456);
  pthread_mutex_unlock(v8);
  return v10;
}

void sub_21A6AF330(_Unwind_Exception *a1)
{
  pthread_mutex_t *v1;
  uint64_t v2;

  --*(_DWORD *)(v2 + 456);
  pthread_mutex_unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_21A6AF354(uint64_t a1, uint64_t a2, const __CFString *a3, uint64_t a4)
{
  const __CFString *v5;
  int v8;
  unsigned int v9;
  int v11;
  CFTypeRef cf;

  cf = 0;
  if (!a3)
    return 4294967292;
  v5 = a3;
  v8 = sub_21A6B488C(a1, a2);
  if (!v8)
  {
    cf = v5;
    goto LABEL_7;
  }
  v9 = sub_21A6B4940(a1, a2, (CFDataRef)v5, &cf);
  if (!v9)
  {
    v5 = (const __CFString *)cf;
LABEL_7:
    v9 = sub_21A6AD43C(a1, a2, v5, a4);
    if (cf)
      v11 = v8;
    else
      v11 = 0;
    if (v11 == 1)
      CFRelease(cf);
  }
  if (v9 == -19)
    return 0;
  else
    return v9;
}

uint64_t sub_21A6AF410(uint64_t a1)
{
  uint64_t v2;
  const __CFString *Value;
  const __CFString *v4;
  const char *v5;
  uint64_t v6;
  CFIndex Length;
  __CFString *v8;
  tm *v9;
  CFStringRef theString[2];
  char v12;
  CFMutableDictionaryRef v13;
  CFDictionaryRef theDict;
  timeval v15;
  time_t v16;
  char __s[16];
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  theDict = 0;
  sub_21A6AC45C(a1);
  v2 = sub_21A6AF770(a1);
  if ((_DWORD)v2)
    return v2;
  v16 = 0;
  if (sub_21A6AF0B4(a1, 1381253996))
  {
    theString[0] = 0;
    v2 = sub_21A6AF29C(a1, 1953066362, (CFTypeRef *)&theDict, 0);
    if ((_DWORD)v2)
      goto LABEL_34;
    if (!theDict)
      return 4294960569;
    Value = (const __CFString *)CFDictionaryGetValue(theDict, CFSTR("zoneName"));
    v4 = Value;
    if (!Value
      || !CFStringGetLength(Value)
      || !sub_21A6F573C(v4, (__CFString **)theString)
      || !theString[0]
      || !CFStringGetLength(theString[0]))
    {
      if (CFDictionaryGetCount(theDict))
      {
        if (!sub_21A6F56B8((const __CFString *)theDict, v5, v6))
          goto LABEL_19;
        theString[0] = v4;
        if (!v4)
          goto LABEL_19;
        Length = CFStringGetLength(v4);
      }
      else
      {
        v8 = sub_21A6F5564(0, v5, v6);
        theString[0] = v8;
        if (!v8)
          goto LABEL_19;
        Length = CFStringGetLength(v8);
      }
      if (!Length)
        goto LABEL_19;
    }
    v2 = sub_21A6AD43C(a1, 1651725402, theString[0], 0);
    if ((_DWORD)v2)
      goto LABEL_34;
  }
LABEL_19:
  if (!sub_21A6AF0B4(a1, 1349676902) || (v2 = sub_21A6AF86C(a1), !(_DWORD)v2))
  {
    if (sub_21A6AF0B4(a1, 1920159858))
    {
      theString[0] = 0;
      v13 = 0;
      pthread_mutex_lock((pthread_mutex_t *)(a1 + 392));
      ++*(_DWORD *)(a1 + 456);
      v2 = sub_21A6AF97C((CFDictionaryRef *)a1, 1349676902, &v13, 0);
      if ((_DWORD)v2 || (v2 = sub_21A6AFBEC(a1, (uint64_t)"restoreProfile", (__CFArray **)theString), (_DWORD)v2))
      {
        --*(_DWORD *)(a1 + 456);
        pthread_mutex_unlock((pthread_mutex_t *)(a1 + 392));
        goto LABEL_34;
      }
      CFDictionarySetValue(v13, CFSTR("restoreProfile"), theString[0]);
      CFRelease(theString[0]);
      --*(_DWORD *)(a1 + 456);
      pthread_mutex_unlock((pthread_mutex_t *)(a1 + 392));
    }
    sub_21A6AFE04(a1);
    v16 = time(0);
    v9 = gmtime(&v16);
    if (!v9
      || v9->tm_year < 106
      || (gettimeofday(&v15, 0), v2 = sub_21A6AFE60(a1, 1953066341, v15.tv_sec, 0), !(_DWORD)v2))
    {
      v2 = sub_21A72DD0C(__s, 0x10u);
      if (!(_DWORD)v2)
      {
        sub_21A6CE0F0(theString, __s);
        v2 = sub_21A6AFEF8(a1, 1818449523, (uint64_t)theString, 0);
        if (v12 < 0)
          operator delete((void *)theString[0]);
        if (!(_DWORD)v2)
          v2 = sub_21A6AFE60(a1, 1818449522, 0x2000000, 0);
      }
    }
  }
LABEL_34:
  if (theDict)
    CFRelease(theDict);
  return v2;
}

void sub_21A6AF720(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_21A6AF770(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  BOOL v8;

  result = sub_21A6AF0B4(a1, 1396995415);
  if ((_DWORD)result)
  {
    v8 = 0;
    result = sub_21A6B7A3C(a1, 1918979649, &v8, 0);
    if (!(_DWORD)result && !v8)
    {
      v7 = 0;
      result = sub_21A6AD02C(a1, 2002867012, &v7, 0);
      if (!(_DWORD)result)
      {
        if ((v7 & 0xF) != 0)
        {
          if (dword_2550EEFA8 <= 5000 && (dword_2550EEFA8 != -1 || sub_21A69876C((uint64_t)&dword_2550EEFA8, 0x1388u)))
            sub_21A698FDC((uint64_t)&dword_2550EEFA8, (uint64_t)"ACPStatus BaseStation::FixUpSettingsAfterConfig()", 5000, (uint64_t)"%s: WAN was not Auto in bridge mode, so setting to Auto\n", v3, v4, v5, v6, (uint64_t)"ACPStatus BaseStation::FixUpSettingsAfterConfig()");
          return sub_21A6AFE60(a1, 2002867012, 0, 0);
        }
        else
        {
          return 0;
        }
      }
    }
  }
  return result;
}

uint64_t sub_21A6AF86C(uint64_t a1)
{
  uint64_t v2;
  const __CFArray *v3;
  __CFArray *v4;
  const __CFDictionary *ValueAtIndex;
  const __CFString *v6;
  CFTypeRef cf;
  void *v9;
  void *value;

  v9 = 0;
  value = 0;
  cf = 0;
  v2 = sub_21A6BB67C(a1, &cf);
  if (!(_DWORD)v2)
  {
    if (!cf)
      return 4294960551;
    v3 = (const __CFArray *)CFDictionaryGetValue((CFDictionaryRef)cf, CFSTR("profiles"));
    if (v3
      && (v4 = v3,
          ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v3, *(int *)(a1 + 368)),
          (value = ValueAtIndex) != 0))
    {
      v6 = (const __CFString *)CFDictionaryGetValue(ValueAtIndex, CFSTR("name"));
      if (v6)
      {
        v2 = sub_21A694D3C(v6, (char **)&v9);
        if (!(_DWORD)v2)
        {
          v2 = sub_21A6AFBEC(a1, (uint64_t)v9, (__CFArray **)&value);
          free(v9);
          if (!(_DWORD)v2)
          {
            CFArraySetValueAtIndex(v4, *(int *)(a1 + 368), value);
            CFRelease(value);
            v2 = sub_21A6AD43C(a1, 1349676902, (const __CFString *)cf, 0);
          }
        }
      }
      else
      {
        v2 = 4294960569;
      }
    }
    else
    {
      v2 = 4294960551;
    }
  }
  if (cf)
    CFRelease(cf);
  return v2;
}

uint64_t sub_21A6AF97C(CFDictionaryRef *a1, uint64_t a2, CFNumberRef *a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  CFStringRef v10;
  CFStringRef v11;
  const __CFDictionary *v12;
  const __CFNumber *Value;
  CFNumberRef v14;
  const __CFNumber *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *__p[2];
  char v29;
  char cStr[5];

  if (!a3)
    return 4294960591;
  *a3 = 0;
  sub_21A6711EC(a2, cStr);
  if (sub_21A6B13CC((uint64_t)a1, a2))
  {
    sub_21A6CE0F0(__p, cStr);
    v8 = sub_21A6B6CB4((uint64_t)a1, (uint64_t)__p, (uint64_t)a3, a4);
    v9 = v8;
    if (v29 < 0)
    {
      operator delete(__p[0]);
      if ((_DWORD)v9)
        return v9;
    }
    else if ((_DWORD)v8)
    {
      return v9;
    }
    v11 = 0;
    goto LABEL_22;
  }
  v10 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x24BDBD240], cStr, 0x8000100u);
  if (!v10)
    return 4294960568;
  v11 = v10;
  v12 = a1[5];
  if (!v12 || !a1[4])
  {
    v9 = 0;
    goto LABEL_35;
  }
  if (a4 <= 1)
  {
    if (CFDictionaryContainsKey(v12, v11))
    {
      Value = (const __CFNumber *)CFDictionaryGetValue(a1[5], v11);
      *a3 = Value;
      if (!Value)
      {
LABEL_17:
        v9 = 0xFFFFFFFFLL;
LABEL_35:
        CFRelease(v11);
        return v9;
      }
    }
  }
  v14 = *a3;
  if ((a4 & 0xFFFFFFFD) != 0 || v14)
    goto LABEL_23;
  if (CFDictionaryContainsKey(a1[4], v11))
  {
    v15 = (const __CFNumber *)CFDictionaryGetValue(a1[4], v11);
    *a3 = v15;
    if (v15)
      goto LABEL_24;
    goto LABEL_17;
  }
LABEL_22:
  v14 = *a3;
LABEL_23:
  if (v14)
    goto LABEL_24;
  if ((a4 & 0xFFFFFFFD) != 0)
  {
    v9 = 4294967291;
    goto LABEL_34;
  }
  __p[0] = 0;
  v16 = sub_21A6B0180((uint64_t)a1, a2, (CFMutableDictionaryRef *)__p);
  if ((_DWORD)v16)
    goto LABEL_33;
  *a3 = (CFNumberRef)__p[0];
  v9 = sub_21A693A8C((const __CFAllocator *)*MEMORY[0x24BDBD240], a1[6], (uint64_t)"%kC=%O", v22, v23, v24, v25, v26, a2);
  if (__p[0])
    CFRelease(__p[0]);
  if (!(_DWORD)v9)
  {
LABEL_24:
    if ((_DWORD)a2 != 2002862934)
    {
      v9 = 0;
      goto LABEL_34;
    }
    __p[0] = 0;
    v16 = sub_21A6CF11C(*a3, 4095, (CFNumberRef *)__p);
    if (!(_DWORD)v16)
    {
      if (__p[0])
      {
        *a3 = (CFNumberRef)__p[0];
        v9 = sub_21A693A8C((const __CFAllocator *)*MEMORY[0x24BDBD240], a1[6], (uint64_t)"%kC=%O", v17, v18, v19, v20, v21, 2002862934);
        if (__p[0])
          CFRelease(__p[0]);
      }
      else
      {
        v9 = 4294960568;
      }
      goto LABEL_34;
    }
LABEL_33:
    v9 = v16;
  }
LABEL_34:
  if (v11)
    goto LABEL_35;
  return v9;
}

void sub_21A6AFBD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_21A6AFBEC(uint64_t a1, uint64_t a2, __CFArray **a3)
{
  uint64_t v3;
  const __CFAllocator *v6;
  __CFArray *Mutable;
  unsigned int *v8;
  unsigned int *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v21;
  CFTypeRef cf;

  v3 = 4294960591;
  if (a2 && a3)
  {
    v6 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
    if (Mutable)
    {
      v9 = *(unsigned int **)(a1 + 200);
      v8 = *(unsigned int **)(a1 + 208);
      if (v8 == v9)
      {
        sub_21A6AD6EC(a1, 0);
        v9 = *(unsigned int **)(a1 + 200);
        v8 = *(unsigned int **)(a1 + 208);
      }
      v10 = (char *)v8 - (char *)v9;
      if (v10 >= 0xC)
      {
        v11 = v10 / 0xC;
        if (v11 <= 1)
          v12 = 1;
        else
          v12 = v11;
        while (1)
        {
          v21 = 0;
          cf = 0;
          v14 = *v9;
          v9 += 3;
          v13 = v14;
          if (sub_21A6712C8(v14) && !sub_21A6B5A34(a1, v13, &cf, &v21))
          {
            v3 = sub_21A693A8C(v6, Mutable, (uint64_t)"%kC=%O", v15, v16, v17, v18, v19, v13);
            if (v21 && cf)
              CFRelease(cf);
            if ((_DWORD)v3)
              break;
          }
          if (!--v12)
          {
            v3 = sub_21A693A8C(v6, Mutable, (uint64_t)"%kO=%s", v15, v16, v17, v18, v19, (uint64_t)CFSTR("name"));
            if ((_DWORD)v3)
              break;
            *a3 = Mutable;
            return v3;
          }
        }
      }
      else
      {
        v3 = 4294960551;
      }
      CFRelease(Mutable);
    }
    else
    {
      return 4294960568;
    }
  }
  return v3;
}

#error "21A6AFDDC: call analysis failed (funcsize=24)"

void sub_21A6AFDF0(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t sub_21A6AFE04(uint64_t a1)
{
  int v2;
  int v4;

  v4 = 0;
  if (sub_21A6A3BF0(0, &v4))
  {
    v2 = -1;
    v4 = -1;
  }
  else
  {
    v2 = v4;
  }
  return sub_21A6AFE60(a1, 1668573549, v2, 0);
}

uint64_t sub_21A6AFE60(uint64_t a1, int a2, int a3, uint64_t a4)
{
  uint64_t v7;
  void *__p[2];
  char v10;
  char __s[5];

  sub_21A6711EC(a2, __s);
  sub_21A6CE0F0(__p, __s);
  v7 = sub_21A6B38E4(a1, (uint64_t)__p, a3, a4);
  if (v10 < 0)
    operator delete(__p[0]);
  return v7;
}

void sub_21A6AFEDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_21A6AFEF8(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  void *__p[2];
  char v10;
  char __s[5];

  sub_21A6711EC(a2, __s);
  sub_21A6CE0F0(__p, __s);
  v7 = sub_21A6B7AD4(a1, (uint64_t)__p, a3, a4);
  if (v10 < 0)
    operator delete(__p[0]);
  return v7;
}

void sub_21A6AFF74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_21A6AFF90(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, std::string *a8@<X8>)
{
  int v9;
  void *v10;
  const __CFString *v11;

  a8->__r_.__value_.__r.__words[0] = 0;
  a8->__r_.__value_.__l.__size_ = 0;
  a8->__r_.__value_.__r.__words[2] = 0;
  if (*(char *)(a1 + 287) < 0)
  {
    if (*(_QWORD *)(a1 + 272))
      goto LABEL_3;
  }
  else if (*(_BYTE *)(a1 + 287))
  {
LABEL_3:
    std::string::operator=(a8, (const std::string *)(a1 + 264));
    return;
  }
  v11 = 0;
  sub_21A68EA84(*(const __CFString **)(a1 + 336), a2, &v11, a3, a4, a5, a6, a7);
  if (!v9)
  {
    if (v11)
    {
      v10 = 0;
      if (!sub_21A694D3C(v11, (char **)&v10))
      {
        if (v10)
        {
          MEMORY[0x220747320](a8);
          if (v10)
            free(v10);
        }
      }
    }
  }
}

void sub_21A6B0030(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_21A6B0050(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  CFTypeRef v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  CFTypeRef cf;

  cf = 0;
  v1 = (_QWORD *)qword_2550F4E00;
  if (!qword_2550F4E00)
    return 4294960578;
  v2 = a1;
  if (!*(_QWORD *)(qword_2550F4E00 + 16))
  {
    a1 = (uint64_t)sub_21A6F4694();
    v1 = (_QWORD *)qword_2550F4E00;
  }
  v3 = (_QWORD *)*v1;
  if ((_QWORD *)*v1 == v1 + 1)
    return 0;
  while (1)
  {
    v4 = v3[5];
    v5 = *(unsigned int *)(v4 + 4);
    a1 = sub_21A6B456C(a1, *(_DWORD *)(v4 + 4));
    if ((a1 & 1) == 0)
    {
      v6 = !(_DWORD)v5 || (_DWORD)v5 == 913532535;
      if (!v6)
      {
        a1 = sub_21A6B0180(v2, v5, (CFMutableDictionaryRef *)&cf);
        v7 = cf;
        if ((_DWORD)a1)
          goto LABEL_23;
        if (cf)
          break;
      }
    }
LABEL_14:
    v8 = (_QWORD *)v3[1];
    if (v8)
    {
      do
      {
        v9 = v8;
        v8 = (_QWORD *)*v8;
      }
      while (v8);
    }
    else
    {
      do
      {
        v9 = (_QWORD *)v3[2];
        v6 = *v9 == (_QWORD)v3;
        v3 = v9;
      }
      while (!v6);
    }
    v3 = v9;
    if (v9 == (_QWORD *)(qword_2550F4E00 + 8))
      return 0;
  }
  a1 = sub_21A6AF354(v2, v5, (const __CFString *)cf, 2);
  v7 = cf;
  if (!(_DWORD)a1)
  {
    CFRelease(cf);
    cf = 0;
    goto LABEL_14;
  }
LABEL_23:
  v10 = a1;
  if (v7)
    CFRelease(v7);
  return v10;
}

uint64_t sub_21A6B0180(uint64_t a1, int a2, CFMutableDictionaryRef *a3)
{
  char *v5;
  uint64_t v6;
  std::string __p;
  _BYTE v9[5];

  v5 = sub_21A6711EC(a2, v9);
  sub_21A6CE0F0(&__p, v5);
  v6 = sub_21A6B0208(a1, &__p, a3);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v6;
}

void sub_21A6B01EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_21A6B0208(uint64_t a1, std::string *__str, CFMutableDictionaryRef *a3)
{
  std::string *p_p;
  std::string::size_type size;
  std::string::size_type v8;
  int v9;
  BOOL v11;
  CFStringRef v13;
  uint64_t v14;
  const __CFString **v15;
  const __CFString *v16;
  CFMutableArrayRef Mutable;
  std::string *v18;
  unsigned __int16 v20;
  int v21;
  _BOOL4 v22;
  uint64_t v23;
  unint64_t v24;
  std::string __p;
  int v26;
  _OWORD valuePtr[2];
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  v26 = 0;
  memset(&__p, 0, sizeof(__p));
  sub_21A6B0EE4(__str, (unsigned int *)&v26, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    size = __p.__r_.__value_.__l.__size_;
    if (__p.__r_.__value_.__l.__size_ != 4 || *(_DWORD *)__p.__r_.__value_.__l.__data_ != 1917018482)
    {
      if (__p.__r_.__value_.__l.__size_ == 7)
      {
        if (*(_DWORD *)__p.__r_.__value_.__l.__data_ == 1650552389
          && *(_DWORD *)(__p.__r_.__value_.__r.__words[0] + 3) == 1684368482)
        {
          goto LABEL_36;
        }
        size = __p.__r_.__value_.__l.__size_;
      }
      if (size == 4)
      {
        if (*(_DWORD *)__p.__r_.__value_.__l.__data_ == 1096045424)
          goto LABEL_36;
        size = __p.__r_.__value_.__l.__size_;
      }
      if (size != 9)
      {
        if (v26 != 2003061875)
          goto LABEL_47;
LABEL_46:
        Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD690]);
LABEL_65:
        v14 = 0;
        *a3 = Mutable;
        goto LABEL_66;
      }
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      goto LABEL_19;
    }
    goto LABEL_31;
  }
  if (HIBYTE(__p.__r_.__value_.__r.__words[2]) == 4)
  {
    if (LODWORD(__p.__r_.__value_.__l.__data_) != 1917018482)
    {
      if (LODWORD(__p.__r_.__value_.__l.__data_) != 1096045424)
        goto LABEL_39;
LABEL_36:
      v14 = 0;
      v15 = (const __CFString **)MEMORY[0x24BDBD268];
LABEL_37:
      v16 = *v15;
LABEL_38:
      *a3 = (CFMutableDictionaryRef)v16;
      goto LABEL_66;
    }
LABEL_31:
    v13 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x24BDBD240], "", 0x8000100u);
    *a3 = (CFMutableDictionaryRef)v13;
    if (v13)
LABEL_32:
      v14 = 0;
    else
      v14 = 4294960568;
    goto LABEL_66;
  }
  if (HIBYTE(__p.__r_.__value_.__r.__words[2]) == 7)
  {
    if (LODWORD(__p.__r_.__value_.__l.__data_) != 1650552389
      || *(_DWORD *)((char *)__p.__r_.__value_.__r.__words + 3) != 1684368482)
    {
      v11 = 0;
      goto LABEL_40;
    }
    goto LABEL_36;
  }
  if (HIBYTE(__p.__r_.__value_.__r.__words[2]) != 9)
  {
LABEL_39:
    v11 = 0;
    goto LABEL_40;
  }
  p_p = &__p;
LABEL_19:
  v8 = p_p->__r_.__value_.__r.__words[0];
  v9 = p_p->__r_.__value_.__s.__data_[8];
  v11 = v8 == 0x647779636167656CLL && v9 == 115;
LABEL_40:
  if (v11 || v26 == 2003061875)
    goto LABEL_46;
  if ((*((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x80) == 0)
  {
    if (HIBYTE(__p.__r_.__value_.__r.__words[2]) != 4)
      goto LABEL_53;
    if (LODWORD(__p.__r_.__value_.__l.__data_) == 1297572210)
    {
LABEL_114:
      LODWORD(valuePtr[0]) = 0;
      Mutable = CFNumberCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], kCFNumberSInt32Type, valuePtr);
      goto LABEL_65;
    }
    goto LABEL_51;
  }
LABEL_47:
  if (__p.__r_.__value_.__l.__size_ != 4)
    goto LABEL_53;
  v18 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if (*(_DWORD *)__p.__r_.__value_.__l.__data_ == 1297572210)
    goto LABEL_114;
  if ((*((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x80) != 0)
    goto LABEL_52;
  if (HIBYTE(__p.__r_.__value_.__r.__words[2]) != 4)
    goto LABEL_53;
LABEL_51:
  v18 = &__p;
LABEL_52:
  if (LODWORD(v18->__r_.__value_.__l.__data_) == 1414226290)
    goto LABEL_126;
LABEL_53:
  if (sub_21A6B1064(&__p, "raCh") || sub_21A6B1064(&__p, "raDe"))
    goto LABEL_98;
  if (sub_21A6B1064(&__p, "raMu"))
  {
    LODWORD(valuePtr[0]) = 2;
    Mutable = CFNumberCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], kCFNumberSInt32Type, valuePtr);
    goto LABEL_65;
  }
  if (sub_21A6B1064(&__p, "raMd"))
  {
LABEL_62:
    LOWORD(valuePtr[0]) = 1;
    Mutable = CFNumberCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], kCFNumberSInt16Type, valuePtr);
    goto LABEL_65;
  }
  if (sub_21A6B1064(&__p, "raPo"))
  {
LABEL_64:
    LOWORD(valuePtr[0]) = 100;
    Mutable = CFNumberCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], kCFNumberSInt16Type, valuePtr);
    goto LABEL_65;
  }
  if (v26 > 1835090283)
  {
    if (v26 > 1885688642)
    {
      if (v26 <= 1918980215)
      {
        if (v26 <= 1918979138)
        {
          if (v26 == 1885688643)
            goto LABEL_133;
          v20 = 17491;
        }
        else
        {
          if (v26 == 1918979139)
          {
            LOWORD(valuePtr[0]) = 0x3FFF;
            Mutable = CFNumberCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], kCFNumberSInt16Type, valuePtr);
            goto LABEL_65;
          }
          if (v26 == 1918979142)
          {
            LODWORD(valuePtr[0]) = 260047018;
            Mutable = CFNumberCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], kCFNumberSInt32Type, valuePtr);
            goto LABEL_65;
          }
          v20 = 20033;
        }
        v21 = v20 | 0x72610000;
        goto LABEL_132;
      }
      if (v26 > 1937326415)
      {
        switch(v26)
        {
          case 2002864494:
            LODWORD(valuePtr[0]) = 16;
            Mutable = CFNumberCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], kCFNumberSInt32Type, valuePtr);
            goto LABEL_65;
          case 2002862934:
            LODWORD(valuePtr[0]) = 1024;
            Mutable = CFNumberCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], kCFNumberSInt32Type, valuePtr);
            goto LABEL_65;
          case 1937326416:
            goto LABEL_114;
        }
        goto LABEL_159;
      }
      if (v26 == 1918980216)
        goto LABEL_64;
      if (v26 != 1936488044)
        goto LABEL_159;
LABEL_111:
      LODWORD(valuePtr[0]) = 5;
      Mutable = CFNumberCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], kCFNumberSInt32Type, valuePtr);
      goto LABEL_65;
    }
    if (v26 <= 1836010831)
    {
      if (v26 <= 1836008258)
      {
        if (v26 == 1835090284)
        {
          LODWORD(valuePtr[0]) = 500;
          Mutable = CFNumberCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], kCFNumberSInt32Type, valuePtr);
          goto LABEL_65;
        }
        if (v26 != 1835094130)
          goto LABEL_159;
        goto LABEL_111;
      }
      if (v26 == 1836008259)
      {
        LODWORD(valuePtr[0]) = 22;
        Mutable = CFNumberCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], kCFNumberSInt32Type, valuePtr);
        goto LABEL_65;
      }
      if (v26 != 1836009796)
        goto LABEL_159;
    }
    else
    {
      if (v26 <= 1885620547)
      {
        if (v26 == 1836010832)
          goto LABEL_98;
        if (v26 == 1885618514)
        {
          LODWORD(valuePtr[0]) = 3;
          Mutable = CFNumberCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], kCFNumberSInt32Type, valuePtr);
          goto LABEL_65;
        }
        goto LABEL_159;
      }
      if (v26 != 1885620548)
      {
        if (v26 == 1885621571)
          goto LABEL_114;
        v21 = 1885684035;
LABEL_132:
        if (v26 != v21)
          goto LABEL_159;
        goto LABEL_133;
      }
    }
    LODWORD(valuePtr[0]) = 600;
    Mutable = CFNumberCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], kCFNumberSInt32Type, valuePtr);
    goto LABEL_65;
  }
  if (v26 <= 1464626794)
  {
    if (v26 > 913532534)
    {
      if (v26 > 1280077418)
      {
        switch(v26)
        {
          case 1280077419:
            goto LABEL_114;
          case 1381328492:
            goto LABEL_98;
          case 1398097521:
            LODWORD(valuePtr[0]) = 604800;
            Mutable = CFNumberCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], kCFNumberSInt32Type, valuePtr);
            goto LABEL_65;
        }
        goto LABEL_159;
      }
      if (v26 == 913532535)
      {
        v22 = sub_21A6AF0B4(a1, 912681828);
        v14 = 0;
        v15 = (const __CFString **)MEMORY[0x24BDBD270];
        if (!v22)
          v15 = (const __CFString **)MEMORY[0x24BDBD268];
        goto LABEL_37;
      }
      if (v26 != 913601124)
        goto LABEL_159;
      goto LABEL_36;
    }
    if (v26 <= 913337711)
    {
      if (!v26)
      {
        v14 = 4294967291;
        goto LABEL_66;
      }
      if (v26 == 912483943)
        goto LABEL_114;
      goto LABEL_159;
    }
    if (v26 != 913337712)
    {
      v21 = 913532259;
      goto LABEL_132;
    }
LABEL_133:
    v14 = 0;
    v15 = (const __CFString **)MEMORY[0x24BDBD270];
    goto LABEL_37;
  }
  if (v26 <= 1735279981)
  {
    if (v26 <= 1635078737)
    {
      if (v26 == 1464626795)
      {
        LODWORD(valuePtr[0]) = 4;
        Mutable = CFNumberCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], kCFNumberSInt32Type, valuePtr);
        goto LABEL_65;
      }
      if (v26 == 1635076676)
        goto LABEL_114;
    }
    else
    {
      switch(v26)
      {
        case 1635078738:
          goto LABEL_62;
        case 1684556901:
          LODWORD(valuePtr[0]) = 86400;
          Mutable = CFNumberCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], kCFNumberSInt32Type, valuePtr);
          goto LABEL_65;
        case 1735279207:
          v14 = 0;
          v16 = CFSTR("172.16.42.2");
          goto LABEL_38;
      }
    }
    goto LABEL_159;
  }
  if (v26 <= 1735283310)
  {
    if (v26 == 1735279982)
    {
      v14 = 0;
      v16 = CFSTR("172.16.42.200");
      goto LABEL_38;
    }
    if (v26 != 1735281765)
      goto LABEL_159;
LABEL_126:
    LODWORD(valuePtr[0]) = 3600;
    Mutable = CFNumberCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], kCFNumberSInt32Type, valuePtr);
    goto LABEL_65;
  }
  switch(v26)
  {
    case 1735283311:
      v14 = 0;
      v16 = CFSTR("172.16.42.1");
      goto LABEL_38;
    case 1735283534:
      v14 = 0;
      v16 = CFSTR("255.255.255.0");
      goto LABEL_38;
    case 1818575203:
LABEL_98:
      LODWORD(valuePtr[0]) = 1;
      Mutable = CFNumberCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], kCFNumberSInt32Type, valuePtr);
      goto LABEL_65;
  }
LABEL_159:
  *(_QWORD *)&valuePtr[0] = 0;
  v23 = sub_21A671008(v26, (uint64_t **)valuePtr);
  v14 = v23;
  if (!(_DWORD)v23)
  {
    v24 = 0;
    switch(*(_DWORD *)(*(_QWORD *)&valuePtr[0] + 4))
    {
      case 3:
      case 6:
        v24 = 1;
        break;
      case 4:
        v24 = 2;
        break;
      case 5:
        v24 = 4;
        break;
      case 7:
      case 8:
      case 0xC:
        goto LABEL_31;
      case 0xD:
        sub_21A6B10F4(v23, v26, a3);
        goto LABEL_32;
      default:
        break;
    }
    memset(valuePtr, 0, sizeof(valuePtr));
    v14 = sub_21A673FCC(v26, (unsigned __int8 *)valuePtr, v24, 1, (CFStringRef *)a3);
  }
LABEL_66:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v14;
}

void sub_21A6B0E40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_21A6B0EE4(std::string *__str, unsigned int *a2, std::string *a3)
{
  int v6;
  BOOL v7;
  std::string *v8;
  std::string::size_type size;
  unsigned __int8 *v10;
  std::string *v11;
  std::string *v12;
  std::string *v13;
  unsigned __int8 *v14;
  int v15;
  int64_t v16;
  std::string::size_type v17;
  std::string::size_type v18;
  std::string *v19;
  unsigned int v20;
  std::string __stra;
  std::string v22;
  char v23;

  memset(&v22, 0, sizeof(v22));
  v6 = SHIBYTE(__str->__r_.__value_.__r.__words[2]);
  v7 = v6 < 0;
  if (v6 >= 0)
    v8 = __str;
  else
    v8 = (std::string *)__str->__r_.__value_.__r.__words[0];
  if (v7)
    size = __str->__r_.__value_.__l.__size_;
  else
    size = HIBYTE(__str->__r_.__value_.__r.__words[2]);
  v10 = (unsigned __int8 *)v8 + size;
  if (size)
  {
    v11 = v8;
    v12 = (std::string *)((char *)v8 + size);
    do
    {
      v13 = v11;
      v14 = (unsigned __int8 *)v11;
      while (1)
      {
        v15 = *v14++;
        if (v15 == 46)
          break;
        v13 = (std::string *)v14;
        if (v14 == v10)
        {
          v13 = v12;
          goto LABEL_16;
        }
      }
      v11 = (std::string *)((char *)&v13->__r_.__value_.__l.__data_ + 1);
      v12 = v13;
    }
    while (v14 != v10);
  }
  else
  {
    v13 = v8;
  }
LABEL_16:
  v16 = (char *)v13 - (char *)v8;
  if (v13 == (std::string *)v10)
    v17 = 0;
  else
    v17 = v16 + 1;
  std::string::basic_string(&__stra, __str, v17, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v23);
  std::string::operator=(&v22, &__stra);
  if (SHIBYTE(__stra.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__stra.__r_.__value_.__l.__data_);
  v18 = HIBYTE(v22.__r_.__value_.__r.__words[2]);
  if ((v22.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v18 = v22.__r_.__value_.__l.__size_;
  if (v18 == 4)
  {
    if ((__str->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v19 = __str;
    else
      v19 = (std::string *)__str->__r_.__value_.__r.__words[0];
    v20 = sub_21A6BB08C((const char *)v19);
    if (a2)
      goto LABEL_28;
  }
  else
  {
    v20 = 0;
    if (a2)
LABEL_28:
      *a2 = v20;
  }
  if (a3)
    std::string::operator=(a3, &v22);
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v22.__r_.__value_.__l.__data_);
}

void sub_21A6B102C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

BOOL sub_21A6B1064(_QWORD *a1, char *__s)
{
  size_t v4;

  v4 = strlen(__s);
  if (*((char *)a1 + 23) < 0)
  {
    if (v4 == a1[1])
    {
      if (v4 == -1)
        goto LABEL_10;
      a1 = (_QWORD *)*a1;
      return memcmp(a1, __s, v4) == 0;
    }
  }
  else if (v4 == *((unsigned __int8 *)a1 + 23))
  {
    if (v4 == -1)
LABEL_10:
      sub_21A6CE1A0();
    return memcmp(a1, __s, v4) == 0;
  }
  return 0;
}

uint64_t sub_21A6B10F4(uint64_t a1, int a2, CFMutableDictionaryRef *a3)
{
  const __CFAllocator *v5;
  CFMutableArrayRef v6;
  uint64_t v7;
  CFMutableDictionaryRef Mutable;
  CFMutableArrayRef v9;
  __CFArray *v10;
  int v11;
  __CFDictionary *v12;
  const __CFString *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  __CFArray *v32;

  if (!a3)
    return 4294967292;
  v5 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  if (a2 != 1298223988)
  {
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
    *a3 = Mutable;
    if (!Mutable)
      return 4294960568;
    v9 = CFArrayCreateMutable(v5, 0, MEMORY[0x24BDBD690]);
    if (!v9)
      return 4294960568;
    v10 = v9;
    v7 = 0;
    if (a2 <= 1718186596)
    {
      if (a2 > 1466517096)
      {
        if (a2 != 1466517097)
        {
          if (a2 == 1684558668)
          {
            v12 = *a3;
            v13 = CFSTR("leases");
            goto LABEL_31;
          }
          goto LABEL_34;
        }
        CFDictionarySetValue(*a3, CFSTR("radios"), v9);
        v19 = sub_21A693A8C(v5, v10, (uint64_t)"{}", v25, v26, v27, v28, v29, v31);
        goto LABEL_33;
      }
      if (a2 != 912684908)
      {
        if (a2 == 1146250611)
        {
          v12 = *a3;
          v13 = CFSTR("dhcpReservations");
LABEL_31:
          CFDictionarySetValue(v12, v13, v10);
          v7 = 0;
        }
LABEL_34:
        CFRelease(v10);
        return v7;
      }
    }
    else
    {
      if (a2 > 1937328486)
      {
        if (a2 == 1937328487)
        {
          v12 = *a3;
          v13 = CFSTR("problems");
          goto LABEL_31;
        }
        if (a2 != 1950434124)
        {
          v11 = 1970500196;
          goto LABEL_21;
        }
        CFDictionarySetValue(*a3, CFSTR("entries"), v9);
        v32 = 0;
        v19 = sub_21A693A8C(v5, v10, (uint64_t)"{%@}", v14, v15, v16, v17, v18, (uint64_t)&v32);
        if (!(_DWORD)v19)
          v19 = sub_21A693A8C(v5, v32, (uint64_t)"%kO=[%O]%kO=%O%kO=%i%kO=%O", v20, v21, v22, v23, v24, (uint64_t)CFSTR("wirelessAccessTimes"));
LABEL_33:
        v7 = v19;
        goto LABEL_34;
      }
      if (a2 != 1718186597)
      {
        v11 = 1766026340;
LABEL_21:
        if (a2 == v11)
        {
          v12 = *a3;
          v13 = CFSTR("users");
          goto LABEL_31;
        }
        goto LABEL_34;
      }
      CFDictionarySetValue(*a3, CFSTR("firewallEnabled"), (const void *)*MEMORY[0x24BDBD268]);
    }
    v12 = *a3;
    v13 = CFSTR("entries");
    goto LABEL_31;
  }
  v6 = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD690]);
  *a3 = v6;
  if (v6)
    return 0;
  else
    return 4294960568;
}

BOOL sub_21A6B13CC(uint64_t a1, int a2)
{
  _BOOL8 result;
  uint64_t v3;

  result = 0;
  if (!*(_BYTE *)(a1 + 386))
  {
    v3 = 0;
    if (!sub_21A6D4DDC(a2, &v3) && v3 && *(_BYTE *)(v3 + 25))
      return 1;
  }
  return result;
}

BOOL sub_21A6B1420(uint64_t a1, std::string *__str)
{
  int v4;

  v4 = 0;
  sub_21A6B0EE4(__str, (unsigned int *)&v4, 0);
  return v4 && sub_21A6B13CC(a1, v4);
}

std::string *sub_21A6B1474@<X0>(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  std::string *result;
  char v5;
  int64_t size;
  std::string *v7;
  char *v8;
  std::string *v9;
  char *v10;
  std::string::size_type v11;
  char __str[16];
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  result = (std::string *)sub_21A6CE0F0(a2, "WiFi.radios.[*].");
  if (a1 != -1)
  {
    snprintf(__str, 0x10uLL, "%d", a1);
    v5 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
    if (v5 >= 0)
      size = HIBYTE(a2->__r_.__value_.__r.__words[2]);
    else
      size = a2->__r_.__value_.__l.__size_;
    if (v5 >= 0)
      v7 = a2;
    else
      v7 = (std::string *)a2->__r_.__value_.__r.__words[0];
    v8 = (char *)v7 + size;
    if (size >= 1)
    {
      v9 = v7;
      do
      {
        v10 = (char *)memchr(v9, 42, size);
        if (!v10)
          break;
        if (*v10 == 42)
          goto LABEL_14;
        v9 = (std::string *)(v10 + 1);
        size = v8 - (char *)v9;
      }
      while (v8 - (char *)v9 > 0);
    }
    v10 = v8;
LABEL_14:
    if (v10 == v8)
      v11 = -1;
    else
      v11 = v10 - (char *)v7;
    return std::string::replace(a2, v11, 1uLL, __str);
  }
  return result;
}

void sub_21A6B1570(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

unint64_t sub_21A6B158C(uint64_t *a1, char *__s, unint64_t a3)
{
  uint64_t v5;
  unint64_t v6;
  size_t v7;
  int64_t v8;
  void *v9;
  char *v10;
  int64_t v11;
  char *v12;
  int v14;
  uint64_t v15;
  char *v16;

  v5 = (uint64_t)a1;
  if (*((char *)a1 + 23) < 0)
  {
    v5 = *a1;
    v6 = a1[1];
  }
  else
  {
    v6 = *((unsigned __int8 *)a1 + 23);
  }
  v7 = strlen(__s);
  if (v6 < a3)
    return -1;
  v8 = v7;
  if (v7)
  {
    v9 = (void *)(v5 + a3);
    v10 = (char *)(v5 + v6);
    v11 = v6 - a3;
    if ((uint64_t)(v6 - a3) >= v8)
    {
      v14 = *__s;
      do
      {
        v15 = v11 - v8;
        if (v15 == -1)
          break;
        v16 = (char *)memchr(v9, v14, v15 + 1);
        if (!v16)
          break;
        v12 = v16;
        if (!memcmp(v16, __s, v8))
          goto LABEL_9;
        v9 = v12 + 1;
        v11 = v10 - (v12 + 1);
      }
      while (v11 >= v8);
    }
    v12 = v10;
LABEL_9:
    if (v12 == v10)
      return -1;
    else
      return (unint64_t)&v12[-v5];
  }
  return a3;
}

uint64_t sub_21A6B1660(uint64_t a1, const __CFString *a2, const __CFString *a3, const __CFString *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  CFIndex v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  CFIndex v20;
  uint64_t v21;
  int v22;
  _BOOL4 v23;
  _BOOL4 v24;
  uint64_t *v25;
  char *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  _BOOL4 v43;
  uint64_t v44;
  unsigned int v45;
  uint64_t v46;
  std::string::size_type v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  std::string::size_type v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  int v59;
  std::string::size_type v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  int64_t size;
  std::string *p_p;
  _BYTE *v67;
  std::string *v68;
  _BYTE *v69;
  std::string::size_type v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  std::string::size_type v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char v84;
  char v85;
  std::string::size_type v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  const __CFArray *Value;
  uint64_t v93;
  const __CFBoolean *v94;
  int v95;
  std::string::size_type v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  int v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  _BOOL4 v112;
  _BOOL4 v113;
  _BOOL8 v114;
  uint64_t v115;
  uint64_t v116;
  CFDictionaryRef valuePtr;
  unsigned int v118;
  void *v119[2];
  char v120;
  CFArrayRef theArray;
  std::string __p;
  const __CFString *v123;
  _BYTE v124[5];
  char __str[16];
  uint64_t v126;

  v126 = *MEMORY[0x24BDAC8D0];
  v123 = 0;
  memset(&__p, 0, sizeof(__p));
  theArray = 0;
  if (!a3)
  {
    v12 = 0;
    goto LABEL_6;
  }
  sub_21A693B94(a3, (uint64_t)&theArray, (UInt8 *)"%kC.%kO", (uint64_t)a4, a5, a6, a7, a8, 1466517097);
  v12 = v11;
  if ((_DWORD)v11)
    goto LABEL_6;
  v13 = sub_21A6B262C(a1, theArray);
  v14 = v13 < 2 ? 0 : sub_21A6B26A8(a1, theArray);
  v20 = sub_21A6B262C(a1, 0);
  v21 = v20 < 2 ? 0 : sub_21A6B26A8(a1, 0);
  v12 = 0;
  v114 = v21 == 0;
  if (!v13)
    goto LABEL_6;
  v115 = v21;
  if (!v20)
    goto LABEL_6;
  v12 = 0;
  if (v13 > 2 || v20 > 2)
    goto LABEL_6;
  v22 = 1651861868;
  v12 = 0;
  v23 = v20 == 2;
  v24 = v13 == 1 && v20 == 2;
  if (v13 != 2)
    v23 = 0;
  v112 = v23;
  v113 = v24;
  v25 = &qword_21A73D148;
  do
  {
    if (dword_2550EEFA8 <= 8000 && (dword_2550EEFA8 != -1 || sub_21A69876C((uint64_t)&dword_2550EEFA8, 0x1F40u)))
      sub_21A698FDC((uint64_t)&dword_2550EEFA8, (uint64_t)"ACPStatus BaseStation::MergeRadiosArraySettings(CFDictionaryRef, CFDictionaryRef, CFArrayRef)", 8000, (uint64_t)"%s: Importing propertyCode: '%C'\n", v16, v17, v18, v19, (uint64_t)"ACPStatus BaseStation::MergeRadiosArraySettings(CFDictionaryRef, CFDictionaryRef, CFArrayRef)");
    if (!sub_21A6B27A8(v22))
      goto LABEL_43;
    v26 = sub_21A6711EC(v22, v124);
    v27 = sub_21A6CE0F0(v119, v26);
    if (v22 == 2003061875)
      v27 = (_QWORD *)MEMORY[0x220747320](v119, "legacywds");
    if (v20 == 1 || (v29 = sub_21A6B2BC4((uint64_t)v27, v22), (v29 & 1) != 0))
    {
LABEL_32:
      sub_21A693B94(a4, (uint64_t)&v123, (UInt8 *)"[*].%ks", v28, v16, v17, v18, v19, v14);
      if (v30)
        goto LABEL_33;
      MEMORY[0x220747320](&__p, "WiFi.radios.[*].");
      sub_21A6B2D64((unsigned __int8 *)&__p, v22, &__p);
      if (dword_2550EEFA8 <= 8000 && (dword_2550EEFA8 != -1 || sub_21A69876C((uint64_t)&dword_2550EEFA8, 0x1F40u)))
        sub_21A698FDC((uint64_t)&dword_2550EEFA8, (uint64_t)"ACPStatus BaseStation::MergeRadiosArraySettings(CFDictionaryRef, CFDictionaryRef, CFArrayRef)", 8000, (uint64_t)"%s: Importing val: '%@' @ %s in simple case.\n", v32, v33, v34, v35, (uint64_t)"ACPStatus BaseStation::MergeRadiosArraySettings(CFDictionaryRef, CFDictionaryRef, CFArrayRef)");
LABEL_38:
      v36 = sub_21A6B2DEC(a1, (uint64_t)&__p, v123, 0);
LABEL_39:
      v12 = v36;
      v31 = 0;
      if (!(_DWORD)v36)
        goto LABEL_33;
      goto LABEL_40;
    }
    if (v113)
    {
      if (sub_21A6B2CEC(v29, v22))
        goto LABEL_32;
      sub_21A693B94(a4, (uint64_t)&v123, (UInt8 *)"[*].%ks", v28, v16, v17, v18, v19, v14);
      if (v38)
        goto LABEL_33;
      MEMORY[0x220747320](&__p, "WiFi.radios.[*].");
      sub_21A6B2D64((unsigned __int8 *)&__p, v22, &__p);
      if (v22 > 1918981954)
      {
        if (v22 == 2003061875 || v22 == 2003060332)
        {
LABEL_103:
          snprintf(__str, 0x10uLL, "%ld", v115);
          v78 = sub_21A6B158C((uint64_t *)&__p, "*", 0);
          std::string::replace(&__p, v78, 1uLL, __str);
          if (dword_2550EEFA8 <= 8000 && (dword_2550EEFA8 != -1 || sub_21A69876C((uint64_t)&dword_2550EEFA8, 0x1F40u)))
            sub_21A698FDC((uint64_t)&dword_2550EEFA8, (uint64_t)"ACPStatus BaseStation::MergeRadiosArraySettings(CFDictionaryRef, CFDictionaryRef, CFArrayRef)", 8000, (uint64_t)"%s: Importing val: '%@' @ %s into 2.4GHzOnly radio.\n", v79, v80, v81, v82, (uint64_t)"ACPStatus BaseStation::MergeRadiosArraySettings(CFDictionaryRef, CFDictionaryRef, CFArrayRef)");
        }
        else
        {
          if (v22 != 1918981955)
          {
LABEL_124:
            if (dword_2550EEFA8 <= 8000 && (dword_2550EEFA8 != -1 || sub_21A69876C((uint64_t)&dword_2550EEFA8, 0x1F40u)))
              sub_21A698FDC((uint64_t)&dword_2550EEFA8, (uint64_t)"ACPStatus BaseStation::MergeRadiosArraySettings(CFDictionaryRef, CFDictionaryRef, CFArrayRef)", 8000, (uint64_t)"%s: Code '%s' isn't supported.\n", v16, v17, v18, v19, (uint64_t)"ACPStatus BaseStation::MergeRadiosArraySettings(CFDictionaryRef, CFDictionaryRef, CFArrayRef)");
            goto LABEL_33;
          }
          v118 = 0;
          sub_21A693B94(a4, (uint64_t)&v118, (UInt8 *)"[*].%kO:int", v39, v16, v17, v18, v19, v14);
          v12 = v76;
          if ((_DWORD)v76)
            goto LABEL_132;
          if (v118 > 0xA || ((1 << v118) & 0x520) == 0)
          {
LABEL_140:
            v12 = 0;
            goto LABEL_33;
          }
          valuePtr = 0;
          HIDWORD(v116) = 0;
          sub_21A693B94(a2, (uint64_t)&valuePtr, (UInt8 *)"%kC", v75, v16, v17, v18, v19, 1937329234);
          v12 = v77;
          if ((_DWORD)v77 == -6727)
          {
            v12 = 4294960569;
LABEL_33:
            v31 = 1;
            goto LABEL_40;
          }
          if (!valuePtr)
            goto LABEL_132;
          Value = (const __CFArray *)CFDictionaryGetValue(valuePtr, CFSTR("regions"));
          if (!Value)
            goto LABEL_132;
          sub_21A693B94(a2, (uint64_t)&v116 + 4, (UInt8 *)"%kC:int", v91, v16, v17, v18, v19, 1937330789);
          v12 = v93;
          if ((_DWORD)v93)
            goto LABEL_132;
          v94 = (const __CFBoolean *)sub_21A6B36C0(0, Value, SHIDWORD(v116), CFSTR("ht40_5GHz"));
          v12 = (uint64_t)v94;
          if (!v94)
            goto LABEL_132;
          v95 = CFBooleanGetValue(v94);
          CFRelease((CFTypeRef)v12);
          if (!v95)
            goto LABEL_140;
          snprintf(__str, 0x10uLL, "%ld", v114);
          v96 = sub_21A6B158C((uint64_t *)&__p, "*", 0);
          std::string::replace(&__p, v96, 1uLL, __str);
          if (dword_2550EEFA8 <= 8000 && (dword_2550EEFA8 != -1 || sub_21A69876C((uint64_t)&dword_2550EEFA8, 0x1F40u)))
            sub_21A698FDC((uint64_t)&dword_2550EEFA8, (uint64_t)"ACPStatus BaseStation::MergeRadiosArraySettings(CFDictionaryRef, CFDictionaryRef, CFArrayRef)", 8000, (uint64_t)"%s: Importing val: '%@' @ %s into 5GHzOnly radio.\n", v97, v98, v99, v100, (uint64_t)"ACPStatus BaseStation::MergeRadiosArraySettings(CFDictionaryRef, CFDictionaryRef, CFArrayRef)");
        }
        goto LABEL_38;
      }
      if (v22 == 1651720515)
        goto LABEL_103;
      if (v22 != 1918976872)
      {
        if (v22 != 1918979445)
          goto LABEL_124;
        LODWORD(valuePtr) = 0;
        v118 = 0;
        v116 = 0;
        sub_21A693B94(a4, (uint64_t)&valuePtr, (UInt8 *)"[*].%kO:int", v39, v16, v17, v18, v19, v14);
        v12 = v41;
        if ((_DWORD)v41)
          goto LABEL_132;
        v42 = (char)valuePtr;
        v43 = valuePtr < 0xB;
        sub_21A693B94(a4, (uint64_t)&v118, (UInt8 *)"[*].%kC:int", v40, v16, v17, v18, v19, v14);
        v12 = v44;
        if ((_DWORD)v44)
          goto LABEL_132;
        v45 = v43 & (0x530u >> v42);
        v46 = sub_21A6B3794(v44, 1918979445, v45, 0, v118, (int *)&v116 + 1);
        v12 = v46;
        if ((_DWORD)v46)
          goto LABEL_132;
        v12 = sub_21A6B3794(v46, 1918979445, v45, 1, v118, (int *)&v116);
        if ((_DWORD)v12)
          goto LABEL_132;
        MEMORY[0x220747320](&__p, "WiFi.radios.[*].");
        sub_21A6B2D64((unsigned __int8 *)&__p, 1918979445, &__p);
        snprintf(__str, 0x10uLL, "%ld", v115);
        v47 = sub_21A6B158C((uint64_t *)&__p, "*", 0);
        std::string::replace(&__p, v47, 1uLL, __str);
        sub_21A6B2D64((unsigned __int8 *)&__p, 1918979445, &__p);
        if (dword_2550EEFA8 <= 8000 && (dword_2550EEFA8 != -1 || sub_21A69876C((uint64_t)&dword_2550EEFA8, 0x1F40u)))
          sub_21A698FDC((uint64_t)&dword_2550EEFA8, (uint64_t)"ACPStatus BaseStation::MergeRadiosArraySettings(CFDictionaryRef, CFDictionaryRef, CFArrayRef)", 8000, (uint64_t)"%s: Mapping %u to 2.4GHz val: %u @ %s. into my radio\n", v48, v49, v50, v51, (uint64_t)"ACPStatus BaseStation::MergeRadiosArraySettings(CFDictionaryRef, CFDictionaryRef, CFArrayRef)");
        v12 = sub_21A6B38E4(a1, (uint64_t)&__p, SHIDWORD(v116), 0);
        if ((_DWORD)v12)
        {
LABEL_132:
          v31 = 0;
          goto LABEL_40;
        }
        MEMORY[0x220747320](&__p, "WiFi.radios.[*].");
        sub_21A6B2D64((unsigned __int8 *)&__p, 1918979445, &__p);
        snprintf(__str, 0x10uLL, "%ld", v114);
        v52 = sub_21A6B158C((uint64_t *)&__p, "*", 0);
        std::string::replace(&__p, v52, 1uLL, __str);
        sub_21A6B2D64((unsigned __int8 *)&__p, 1918979445, &__p);
        if (dword_2550EEFA8 <= 8000 && (dword_2550EEFA8 != -1 || sub_21A69876C((uint64_t)&dword_2550EEFA8, 0x1F40u)))
          sub_21A698FDC((uint64_t)&dword_2550EEFA8, (uint64_t)"ACPStatus BaseStation::MergeRadiosArraySettings(CFDictionaryRef, CFDictionaryRef, CFArrayRef)", 8000, (uint64_t)"%s: Mapping %u to 5 GHz val: %u @ %s into my radio.\n", v53, v54, v55, v56, (uint64_t)"ACPStatus BaseStation::MergeRadiosArraySettings(CFDictionaryRef, CFDictionaryRef, CFArrayRef)");
        v36 = sub_21A6B38E4(a1, (uint64_t)&__p, v116, 0);
        goto LABEL_39;
      }
      if (sub_21A6D4ED8(1651724867) != 6)
        goto LABEL_132;
      LODWORD(valuePtr) = 0;
      if (CFNumberGetValue((CFNumberRef)v123, kCFNumberIntType, &valuePtr))
      {
        v83 = 0;
        v84 = 1;
        while (1)
        {
          v85 = v84;
          MEMORY[0x220747320](&__p, "WiFi.radios.[*].");
          sub_21A6B2D64((unsigned __int8 *)&__p, 1651724867, &__p);
          snprintf(__str, 0x10uLL, "%ld", v83);
          v86 = sub_21A6B158C((uint64_t *)&__p, "*", 0);
          std::string::replace(&__p, v86, 1uLL, __str);
          if (sub_21A6B3968(a1, (uint64_t)&__p, (int)valuePtr, 1))
          {
            sub_21A6B2D64((unsigned __int8 *)&__p, 1918976872, &__p);
            if (dword_2550EEFA8 <= 8000 && (dword_2550EEFA8 != -1 || sub_21A69876C((uint64_t)&dword_2550EEFA8, 0x1F40u)))
              sub_21A698FDC((uint64_t)&dword_2550EEFA8, (uint64_t)"ACPStatus BaseStation::MergeRadiosArraySettings(CFDictionaryRef, CFDictionaryRef, CFArrayRef)", 8000, (uint64_t)"%s: Importing val: %u @ %s into my radio index %ld.\n", v87, v88, v89, v90, (uint64_t)"ACPStatus BaseStation::MergeRadiosArraySettings(CFDictionaryRef, CFDictionaryRef, CFArrayRef)");
            v12 = sub_21A6B2DEC(a1, (uint64_t)&__p, v123, 0);
            if ((_DWORD)v12)
              goto LABEL_132;
          }
          else if (dword_2550EEFA8 <= 8000
                 && (dword_2550EEFA8 != -1 || sub_21A69876C((uint64_t)&dword_2550EEFA8, 0x1F40u)))
          {
            sub_21A698FDC((uint64_t)&dword_2550EEFA8, (uint64_t)"ACPStatus BaseStation::MergeRadiosArraySettings(CFDictionaryRef, CFDictionaryRef, CFArrayRef)", 8000, (uint64_t)"%s: Value: %u @ path '%s' isn't supported.\n", v16, v17, v18, v19, (uint64_t)"ACPStatus BaseStation::MergeRadiosArraySettings(CFDictionaryRef, CFDictionaryRef, CFArrayRef)");
          }
          v84 = 0;
          v83 = 1;
          if ((v85 & 1) == 0)
            goto LABEL_33;
        }
      }
      v31 = 0;
      v12 = 4294967292;
    }
    else
    {
      if (!v112)
        goto LABEL_33;
      sub_21A693B94(a4, (uint64_t)&v123, (UInt8 *)"[*].%ks", v28, v16, v17, v18, v19, v14);
      if (v58)
        goto LABEL_68;
      MEMORY[0x220747320](&__p, "WiFi.radios.[*].");
      sub_21A6B2D64((unsigned __int8 *)&__p, v22, &__p);
      snprintf(__str, 0x10uLL, "%ld", v115);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        size = __p.__r_.__value_.__l.__size_;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      v67 = (char *)p_p + size;
      if (size >= 1)
      {
        v68 = p_p;
        do
        {
          v69 = memchr(v68, 42, size);
          if (!v69)
            break;
          if (*v69 == 42)
            goto LABEL_86;
          v68 = (std::string *)(v69 + 1);
          size = v67 - (_BYTE *)v68;
        }
        while (v67 - (_BYTE *)v68 > 0);
      }
      v69 = v67;
LABEL_86:
      if (v69 == v67)
        v70 = -1;
      else
        v70 = v69 - (_BYTE *)p_p;
      std::string::replace(&__p, v70, 1uLL, __str);
      if (dword_2550EEFA8 <= 8000 && (dword_2550EEFA8 != -1 || sub_21A69876C((uint64_t)&dword_2550EEFA8, 0x1F40u)))
        sub_21A698FDC((uint64_t)&dword_2550EEFA8, (uint64_t)"ACPStatus BaseStation::MergeRadiosArraySettings(CFDictionaryRef, CFDictionaryRef, CFArrayRef)", 8000, (uint64_t)"%s: Importing val: '%@' @ %s into 2.4GHz radio.\n", v71, v72, v73, v74, (uint64_t)"ACPStatus BaseStation::MergeRadiosArraySettings(CFDictionaryRef, CFDictionaryRef, CFArrayRef)");
      v12 = sub_21A6B2DEC(a1, (uint64_t)&__p, v123, 0);
      v31 = 0;
      if (!(_DWORD)v12)
      {
LABEL_68:
        sub_21A693B94(a4, (uint64_t)&v123, (UInt8 *)"[*].%ks", v57, v16, v17, v18, v19, v14 == 0);
        if (v59)
          goto LABEL_33;
        MEMORY[0x220747320](&__p, "WiFi.radios.[*].");
        sub_21A6B2D64((unsigned __int8 *)&__p, v22, &__p);
        snprintf(__str, 0x10uLL, "%ld", v114);
        v60 = sub_21A6B158C((uint64_t *)&__p, "*", 0);
        std::string::replace(&__p, v60, 1uLL, __str);
        if (dword_2550EEFA8 <= 8000 && (dword_2550EEFA8 != -1 || sub_21A69876C((uint64_t)&dword_2550EEFA8, 0x1F40u)))
          sub_21A698FDC((uint64_t)&dword_2550EEFA8, (uint64_t)"ACPStatus BaseStation::MergeRadiosArraySettings(CFDictionaryRef, CFDictionaryRef, CFArrayRef)", 8000, (uint64_t)"%s: Importing val: '%@' @ %s into 5GHz radio.\n", v61, v62, v63, v64, (uint64_t)"ACPStatus BaseStation::MergeRadiosArraySettings(CFDictionaryRef, CFDictionaryRef, CFArrayRef)");
        goto LABEL_38;
      }
    }
LABEL_40:
    if (v120 < 0)
      operator delete(v119[0]);
    if ((v31 & 1) == 0)
      goto LABEL_6;
LABEL_43:
    v37 = *((_DWORD *)v25 + 3);
    v25 = (uint64_t *)((char *)v25 + 12);
    v22 = v37;
  }
  while (v37);
  if (sub_21A6AF0B4(a1, 1198748750))
  {
    sub_21A693B94(a4, (uint64_t)&v123, (UInt8 *)"[*].%ks", v102, v103, v104, v105, v106, v14);
    if (!v107)
    {
      MEMORY[0x220747320](&__p, "WiFi.radios.[*].");
      sub_21A6CE0F0(v119, "vaps");
      sub_21A6B3A38((unsigned __int8 *)&__p, (uint64_t)v119, &__p);
      if (v120 < 0)
        operator delete(v119[0]);
      if (dword_2550EEFA8 <= 8000 && (dword_2550EEFA8 != -1 || sub_21A69876C((uint64_t)&dword_2550EEFA8, 0x1F40u)))
        sub_21A698FDC((uint64_t)&dword_2550EEFA8, (uint64_t)"ACPStatus BaseStation::MergeRadiosArraySettings(CFDictionaryRef, CFDictionaryRef, CFArrayRef)", 8000, (uint64_t)"%s: Importing vaps to %s.\n", v108, v109, v110, v111, (uint64_t)"ACPStatus BaseStation::MergeRadiosArraySettings(CFDictionaryRef, CFDictionaryRef, CFArrayRef)");
      v12 = sub_21A6B2DEC(a1, (uint64_t)&__p, v123, 0);
    }
  }
LABEL_6:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v12;
}

void sub_21A6B25CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a25 < 0)
    operator delete(__p);
  if (a32 < 0)
    operator delete(a27);
  _Unwind_Resume(exception_object);
}

CFIndex sub_21A6B262C(uint64_t a1, CFArrayRef theArray)
{
  CFIndex Count;
  CFDictionaryRef theDict;

  theDict = 0;
  if (theArray
    || !sub_21A6AF29C(a1, 1466517097, (CFTypeRef *)&theDict, 0)
    && (theArray = (CFArrayRef)CFDictionaryGetValue(theDict, CFSTR("radios"))) != 0)
  {
    Count = CFArrayGetCount(theArray);
  }
  else
  {
    Count = 0;
  }
  if (theDict)
    CFRelease(theDict);
  return Count;
}

uint64_t sub_21A6B26A8(uint64_t a1, CFArrayRef theArray)
{
  const __CFArray *Value;
  CFIndex Count;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  CFIndex v9;
  uint64_t v10;
  int v11;
  CFDictionaryRef theDict;
  int v15;

  Value = theArray;
  v15 = 0;
  theDict = 0;
  if (!theArray)
  {
    if (!sub_21A6AF0B4(a1, 1935819842))
      return 0;
    if (sub_21A6AF29C(a1, 1466517097, (CFTypeRef *)&theDict, 0))
      goto LABEL_11;
    Value = (const __CFArray *)CFDictionaryGetValue(theDict, CFSTR("radios"));
    if (!Value)
      goto LABEL_11;
  }
  Count = CFArrayGetCount(Value);
  if (Count >= 2)
  {
    v9 = Count;
    v10 = 0;
    while (1)
    {
      sub_21A693B94((const __CFString *)Value, (uint64_t)&v15, (UInt8 *)"[*].%kO:int", v4, v5, v6, v7, v8, v10);
      if (!v11 && (v15 & 0xE) != 0)
        break;
      if (v9 == ++v10)
        goto LABEL_11;
    }
  }
  else
  {
LABEL_11:
    v10 = 0;
  }
  if (theDict)
    CFRelease(theDict);
  return v10;
}

uint64_t sub_21A6B27A8(int a1)
{
  uint64_t result;
  unsigned __int16 v3;
  int v4;
  unsigned __int16 v5;
  unsigned int v6;

  result = 1;
  if (a1 > 1918977124)
  {
    if (a1 <= 1918980657)
    {
      if (a1 <= 1918978352)
      {
        if (a1 > 1918977365)
        {
          if (a1 == 1918977366 || a1 == 1918977586)
            return result;
          v5 = 18028;
        }
        else
        {
          if (a1 == 1918977125 || a1 == 1918977140)
            return result;
          v5 = 17729;
        }
      }
      else if (a1 <= 1918979406)
      {
        if ((a1 - 1918978353) < 2)
          return result;
        v5 = 19284;
      }
      else
      {
        if ((a1 - 1918979407) <= 0x26 && ((1 << (a1 - 79)) & 0x4000200001) != 0
          || a1 == 1918979693)
        {
          return result;
        }
        v5 = 20591;
      }
    }
    else if (a1 <= 1918981169)
    {
      if ((a1 - 1918980658) <= 0x3D && ((1 << (a1 - 50)) & 0x2008000000000001) != 0
        || (a1 - 1918980965) <= 0xF && ((1 << (a1 - 101)) & 0x8041) != 0)
      {
        return result;
      }
      v5 = 21298;
    }
    else
    {
      if (a1 > 1918981954)
      {
        if (((a1 - 1918981955) > 0xA || ((1 << (a1 - 67)) & 0x405) == 0) && a1 != 2003060332)
        {
          v4 = 2003061875;
          goto LABEL_68;
        }
        return result;
      }
      if (a1 == 1918981170 || a1 == 1918981229)
        return result;
      v5 = 21810;
    }
LABEL_62:
    v4 = v5 | 0x72610000;
    goto LABEL_68;
  }
  if (a1 > 1651724877)
  {
    if (a1 <= 1918976354)
    {
      if (a1 <= 1683440722)
      {
        if (a1 > 1651725132)
        {
          if (a1 == 1651725133)
            return result;
          v3 = 29268;
        }
        else
        {
          if (a1 == 1651724878)
            return result;
          v3 = 21323;
        }
        goto LABEL_67;
      }
      if (a1 > 1700876864)
      {
        if (a1 == 1700876865)
          return result;
        v4 = 1918128974;
      }
      else
      {
        if (a1 == 1683440723)
          return result;
        v4 = 1685538412;
      }
LABEL_68:
      if (a1 == v4)
        return result;
      return 0;
    }
    if (a1 > 1918976832)
    {
      v6 = a1 - 1918976833;
      if (v6 > 0x31 || ((1 << v6) & 0x2098000000001) == 0)
        return 0;
      return result;
    }
    if (a1 == 1918976355 || a1 == 1918976373)
      return result;
    v5 = 17202;
    goto LABEL_62;
  }
  if (a1 > 1651723636)
  {
    if (a1 <= 1651724336)
    {
      if (a1 == 1651723637)
        return result;
      v3 = 20045;
      goto LABEL_67;
    }
    if ((a1 - 1651724337) > 0x14 || ((1 << (a1 - 49)) & 0x100003) == 0)
    {
      v3 = 21059;
      goto LABEL_67;
    }
  }
  else if (a1 <= 1651720514)
  {
    if (a1 != 1633895790 && a1 != 1651717459)
    {
      v3 = 14413;
      goto LABEL_67;
    }
  }
  else if (((a1 - 1651722051) > 0x10 || ((1 << (a1 - 67)) & 0x12C05) == 0) && a1 != 1651720515)
  {
    v3 = 16724;
LABEL_67:
    v4 = v3 | 0x62730000;
    goto LABEL_68;
  }
  return result;
}

uint64_t sub_21A6B2BC4(uint64_t a1, int a2)
{
  uint64_t result;
  unsigned __int16 v4;
  int v5;

  result = sub_21A6B27A8(a2);
  if ((_DWORD)result)
  {
    result = 1;
    if (a2 <= 1918979427)
    {
      if (a2 > 1651724866)
      {
        if (a2 != 1651724867 && a2 != 1918976833)
        {
          v4 = 17256;
          goto LABEL_17;
        }
      }
      else if (a2 != 1651718221 && a2 != 1651720515)
      {
        v5 = 1651723637;
        goto LABEL_20;
      }
    }
    else if (a2 <= 1918981954)
    {
      if (a2 != 1918979428 && a2 != 1918979445)
      {
        v4 = 20077;
        goto LABEL_17;
      }
    }
    else if (a2 > 2003060331)
    {
      if (a2 != 2003061875)
      {
        v5 = 2003060332;
LABEL_20:
        if (a2 != v5)
          return result;
      }
    }
    else if (a2 != 1918981955)
    {
      v4 = 22341;
LABEL_17:
      v5 = v4 | 0x72610000;
      goto LABEL_20;
    }
    return 0;
  }
  return result;
}

uint64_t sub_21A6B2CEC(uint64_t a1, int a2)
{
  uint64_t result;
  unsigned __int16 v4;

  result = sub_21A6B27A8(a2);
  if ((_DWORD)result)
  {
    result = 1;
    if (a2 > 1918979692)
    {
      if (a2 == 1918979693)
        return result;
      v4 = 22341;
    }
    else
    {
      if (a2 == 1918976833)
        return result;
      v4 = 19812;
    }
    if (a2 != (v4 | 0x72610000))
      return 0;
  }
  return result;
}

void sub_21A6B2D64(unsigned __int8 *a1, int a2, std::string *a3)
{
  char *v5;
  void *__p[2];
  char v7;
  int v8;
  char v9;

  v9 = 0;
  v8 = 0;
  v5 = sub_21A6711EC(a2, &v8);
  sub_21A6CE0F0(__p, v5);
  sub_21A6B3A38(a1, (uint64_t)__p, a3);
  if (v7 < 0)
    operator delete(__p[0]);
}

void sub_21A6B2DD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_21A6B2DEC(uint64_t a1, uint64_t a2, const __CFString *DeepCopy, uint64_t a4)
{
  pthread_mutex_t *v8;
  char *v9;
  uint64_t v10;
  unint64_t v12;
  std::string::size_type size;
  uint64_t v14;
  BOOL v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v21;
  int v22;
  const void *v23;
  CFTypeRef v24;
  int v25;
  CFTypeID v26;
  CFTypeID v27;
  std::string *p_p;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  std::string *v34;
  uint64_t v35;
  CFIndex v36;
  CFIndex v37;
  uint64_t v38;
  int64_t v39;
  std::string *v40;
  _BYTE *v41;
  std::string *v42;
  _BYTE *v43;
  std::string::size_type v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  CFIndex v49;
  CFIndex v50;
  uint64_t v51;
  int64_t v52;
  std::string *p_str;
  _BYTE *v54;
  std::string *v55;
  _BYTE *v56;
  std::string::size_type v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  std::string *v63;
  uint64_t v64;
  BOOL v65;
  BOOL v66;
  char v67;
  CFTypeRef v68;
  std::string __str;
  CFTypeRef cf;
  unsigned int v71;
  std::string __p;
  std::string v73;
  std::string::value_type __s[16];
  uint64_t v75;

  v75 = *MEMORY[0x24BDAC8D0];
  memset(&v73, 0, sizeof(v73));
  memset(&__p, 0, sizeof(__p));
  v71 = 0;
  cf = 0;
  v8 = (pthread_mutex_t *)(a1 + 392);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 392));
  ++*(_DWORD *)(a1 + 456);
  std::string::basic_string(&__str, (const std::string *)a2, 0, 4uLL, (std::allocator<char> *)__s);
  std::string::operator=(&v73, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (*(char *)(a2 + 23) >= 0)
    v9 = (char *)a2;
  else
    v9 = *(char **)a2;
  v10 = sub_21A671214(v9, 4uLL, &v71);
  if ((_DWORD)v10)
    goto LABEL_7;
  v12 = *(unsigned __int8 *)(a2 + 23);
  if ((v12 & 0x80u) != 0)
    v12 = *(_QWORD *)(a2 + 8);
  if (v12 >= 5)
  {
    std::string::basic_string(&__str, (const std::string *)a2, 5uLL, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)__s);
    std::string::operator=(&__p, &__str);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
  }
  size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = __p.__r_.__value_.__l.__size_;
  if (!size)
  {
    v10 = sub_21A6AD43C(a1, v71, DeepCopy, a4);
    goto LABEL_7;
  }
  if (!sub_21A6B1420(a1, (std::string *)a2))
  {
    if ((_DWORD)a4 == 2)
    {
      v21 = sub_21A6AF97C((CFDictionaryRef *)a1, v71, (CFNumberRef *)&cf, 2);
      v22 = 0;
      v23 = 0;
      v24 = cf;
      goto LABEL_39;
    }
    v35 = sub_21A6AF97C((CFDictionaryRef *)a1, v71, (CFNumberRef *)&cf, 1);
    v10 = v35;
    if ((_DWORD)v35 == -5 || (v24 = cf) == 0)
    {
      v21 = sub_21A6AF97C((CFDictionaryRef *)a1, v71, (CFNumberRef *)&cf, 2);
      v23 = 0;
      v22 = 0;
      v24 = cf;
      if (!cf || (_DWORD)v21)
      {
LABEL_39:
        if ((_DWORD)v21 == -5 || !v24)
        {
          v10 = sub_21A6B10F4(v21, v71, (CFMutableDictionaryRef *)&cf);
          if ((_DWORD)v10)
          {
LABEL_149:
            if (v23)
              CFRelease(v23);
            goto LABEL_151;
          }
          v24 = cf;
          v25 = 1;
          if (!cf)
          {
            v10 = 0;
            goto LABEL_146;
          }
          v22 = 1;
        }
        else
        {
          v25 = 0;
        }
        v68 = 0;
        v67 = 0;
        v26 = CFGetTypeID(v24);
        if (v26 == CFDictionaryGetTypeID() || (v27 = CFGetTypeID(cf), v27 == CFArrayGetTypeID()))
        {
          if (!DeepCopy)
          {
            __str.__r_.__value_.__r.__words[0] = 0;
            if (a4 > 1)
            {
              v10 = 4294960591;
              goto LABEL_146;
            }
            if (sub_21A6B64FC((CFDictionaryRef *)a1, a2, (CFMutableDictionaryRef *)&__str, 2))
            {
              if (dword_2550EEFA8 <= 1000
                && (dword_2550EEFA8 != -1 || sub_21A69876C((uint64_t)&dword_2550EEFA8, 0x3E8u)))
              {
                sub_21A698FDC((uint64_t)&dword_2550EEFA8, (uint64_t)"ACPStatus BaseStation::SetPropertyCF(const std::string &, CFTypeRef, eWhichValue)", 1000, (uint64_t)"%s: This path (%s) does not exist in original settings for removal", v45, v46, v47, v48, (uint64_t)"SetPropertyCF");
              }
              DeepCopy = 0;
            }
            else
            {
              DeepCopy = (const __CFString *)CFPropertyListCreateDeepCopy((CFAllocatorRef)*MEMORY[0x24BDBD240], __str.__r_.__value_.__l.__data_, 2uLL);
              if (!DeepCopy)
              {
                v10 = 4294960568;
                goto LABEL_146;
              }
            }
          }
          v10 = sub_21A6B6AB4(a1, &__p, DeepCopy, &v68, &v67);
          if (!(_DWORD)v10)
          {
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              p_p = &__p;
            else
              p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
            if (sub_21A6BB08C((const char *)p_p) == 2003061875)
            {
              sub_21A6CE0F0(&__str, "legacywds");
              sub_21A6B3A38((unsigned __int8 *)&__p, (uint64_t)&__str, &__p);
              if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__str.__r_.__value_.__l.__data_);
            }
            if (!sub_21A6B158C((uint64_t *)a2, "WiFi.radios.[*].", 0))
            {
              memset(&__str, 0, sizeof(__str));
              v49 = sub_21A6B262C(a1, 0);
              v50 = v49;
              if (v49)
              {
                if (v49 < 1)
                {
                  v66 = 0;
                  v10 = 0;
                  v65 = 1;
                }
                else
                {
                  v51 = 0;
                  while (1)
                  {
                    snprintf(__s, 0x10uLL, "%ld", v51);
                    std::string::operator=(&__str, &__p);
                    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                      v52 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
                    else
                      v52 = __str.__r_.__value_.__l.__size_;
                    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                      p_str = &__str;
                    else
                      p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
                    v54 = (char *)p_str + v52;
                    if (v52 >= 1)
                    {
                      v55 = p_str;
                      do
                      {
                        v56 = memchr(v55, 42, v52);
                        if (!v56)
                          break;
                        if (*v56 == 42)
                          goto LABEL_121;
                        v55 = (std::string *)(v56 + 1);
                        v52 = v54 - (_BYTE *)v55;
                      }
                      while (v54 - (_BYTE *)v55 > 0);
                    }
                    v56 = v54;
LABEL_121:
                    v57 = v56 == v54 ? -1 : v56 - (_BYTE *)p_str;
                    std::string::replace(&__str, v57, 1uLL, __s);
                    v63 = (__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
                        ? &__str
                        : (std::string *)__str.__r_.__value_.__r.__words[0];
                    v64 = sub_21A6951D8((void *)cf, (uint64_t)v63, v68, v58, v59, v60, v61, v62);
                    v65 = (_DWORD)v64 == 0;
                    v10 = v64;
                    if ((_DWORD)v64)
                      break;
                    if (++v51 == v50)
                    {
                      v10 = 0;
                      break;
                    }
                  }
                  v66 = (_DWORD)v64 != 0;
                }
              }
              else
              {
                v65 = 0;
                v10 = 4294967291;
                v66 = 1;
              }
              if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__str.__r_.__value_.__l.__data_);
              if (!v65)
              {
                if (!v66)
                  goto LABEL_151;
                goto LABEL_146;
              }
              goto LABEL_141;
            }
            if (sub_21A6B158C((uint64_t *)a2, "vaps.[*]", 0) == -1
              || (v10 = (*(uint64_t (**)(uint64_t, CFTypeRef, uint64_t, uint64_t, std::string *))(*(_QWORD *)a1 + 24))(a1, cf, a2, 1, &__p), !(_DWORD)v10))
            {
              v34 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
                  ? &__p
                  : (std::string *)__p.__r_.__value_.__r.__words[0];
              v10 = sub_21A6951D8((void *)cf, (uint64_t)v34, v68, v29, v30, v31, v32, v33);
              if (!(_DWORD)v10)
              {
LABEL_141:
                if (v67)
                  CFRelease(v68);
                if (v22)
                  v10 = sub_21A6AD43C(a1, v71, (const __CFString *)cf, 1);
              }
            }
          }
        }
        else
        {
          v10 = 4294960540;
        }
LABEL_146:
        if (v25 && cf)
          CFRelease(cf);
        goto LABEL_149;
      }
      v24 = CFPropertyListCreateDeepCopy((CFAllocatorRef)*MEMORY[0x24BDBD240], cf, 2uLL);
      if (v24)
      {
        v21 = 0;
        cf = v24;
        v22 = 1;
        v23 = v24;
        goto LABEL_39;
      }
      v10 = 4294967293;
    }
    else if (!(_DWORD)v35)
    {
      v22 = 0;
      v23 = 0;
      v21 = 0;
      goto LABEL_39;
    }
LABEL_7:
    --*(_DWORD *)(a1 + 456);
    pthread_mutex_unlock(v8);
    goto LABEL_8;
  }
  v14 = *(unsigned __int8 *)(a2 + 23);
  v15 = (v14 & 0x80u) != 0;
  if ((v14 & 0x80u) != 0)
    v14 = *(_QWORD *)(a2 + 8);
  if (v15)
    v16 = *(char **)a2;
  else
    v16 = (char *)a2;
  if (v14 >= 16)
  {
    v17 = &v16[v14];
    v18 = v16;
    do
    {
      v19 = (char *)memchr(v18, 87, v14 - 15);
      if (!v19)
        break;
      if (*(_QWORD *)v19 == 0x6461722E69466957 && *((_QWORD *)v19 + 1) == 0x2E5D2A5B2E736F69)
      {
        if (v19 == v17 || v19 != v16)
          break;
        memset(&__str, 0, sizeof(__str));
        v36 = sub_21A6B262C(a1, 0);
        v37 = v36;
        if (v36)
        {
          if (v36 < 1)
          {
LABEL_93:
            v10 = 0;
          }
          else
          {
            v38 = 0;
            while (1)
            {
              snprintf(__s, 0x10uLL, "%ld", v38);
              std::string::operator=(&__str, (const std::string *)a2);
              if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v39 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
              else
                v39 = __str.__r_.__value_.__l.__size_;
              if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v40 = &__str;
              else
                v40 = (std::string *)__str.__r_.__value_.__r.__words[0];
              v41 = (char *)v40 + v39;
              if (v39 >= 1)
              {
                v42 = v40;
                do
                {
                  v43 = memchr(v42, 42, v39);
                  if (!v43)
                    break;
                  if (*v43 == 42)
                    goto LABEL_88;
                  v42 = (std::string *)(v43 + 1);
                  v39 = v41 - (_BYTE *)v42;
                }
                while (v41 - (_BYTE *)v42 > 0);
              }
              v43 = v41;
LABEL_88:
              v44 = v43 == v41 ? -1 : v43 - (_BYTE *)v40;
              std::string::replace(&__str, v44, 1uLL, __s);
              v10 = sub_21A6B5B00(a1, (uint64_t)&__str, (uint64_t)DeepCopy, a4);
              if ((_DWORD)v10)
                break;
              if (++v38 == v37)
                goto LABEL_93;
            }
          }
        }
        else
        {
          v10 = 4294967291;
        }
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__str.__r_.__value_.__l.__data_);
        goto LABEL_151;
      }
      v18 = v19 + 1;
      v14 = v17 - v18;
    }
    while (v17 - v18 >= 16);
  }
  v10 = sub_21A6B5B00(a1, a2, (uint64_t)DeepCopy, a4);
LABEL_151:
  if (a1)
    goto LABEL_7;
LABEL_8:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v73.__r_.__value_.__l.__data_);
  return v10;
}

void sub_21A6B3600(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  uint64_t v32;
  pthread_mutex_t *v33;

  if (a18 < 0)
    operator delete(__p);
  if (v32)
  {
    --*(_DWORD *)(v32 + 456);
    pthread_mutex_unlock(v33);
  }
  if (a26 < 0)
    operator delete(a21);
  if (a32 < 0)
    operator delete(a27);
  _Unwind_Resume(exception_object);
}

const void *sub_21A6B36C0(int a1, CFArrayRef theArray, int a3, const void *a4)
{
  CFIndex Count;
  CFIndex v8;
  CFIndex v9;
  const __CFDictionary *ValueAtIndex;
  const __CFDictionary *v11;
  const __CFNumber *Value;
  const void *v13;
  const void *v15;
  int valuePtr;

  Count = CFArrayGetCount(theArray);
  if (Count >= 1)
  {
    v8 = Count;
    v9 = 0;
    valuePtr = 0;
    do
    {
      ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(theArray, v9);
      if (!ValueAtIndex)
        break;
      v11 = ValueAtIndex;
      Value = (const __CFNumber *)CFDictionaryGetValue(ValueAtIndex, CFSTR("region"));
      if (!Value)
        break;
      CFNumberGetValue(Value, kCFNumberIntType, &valuePtr);
      if (valuePtr == a3)
      {
        v15 = CFDictionaryGetValue(v11, a4);
        v13 = v15;
        if (v15)
          CFRetain(v15);
        return v13;
      }
      ++v9;
    }
    while (v8 != v9);
  }
  return 0;
}

uint64_t sub_21A6B3794(uint64_t a1, int a2, int a3, int a4, unsigned int a5, int *a6)
{
  int v11;
  uint64_t result;
  BOOL v13;
  int v14;
  int v15;

  if (sub_21A6D4ED8(a2) != 6)
    return 4294967292;
  v11 = sub_21A6B27A8(a2);
  result = 4294967292;
  if (a2 == 1918979445 && v11)
  {
    if (a3)
    {
      if (a5 > 0x24 || ((1 << a5) & 0x46) != 0)
        goto LABEL_18;
      if (((1 << a5) & 0x60200) == 0)
      {
        if (((1 << a5) & 0x1001000000) == 0)
          goto LABEL_18;
        goto LABEL_13;
      }
LABEL_17:
      v13 = a4 == 0;
      v14 = 85;
      v15 = 18;
      goto LABEL_19;
    }
    if (a5 <= 0x24)
    {
      if (((1 << a5) & 0x1001060200) != 0)
      {
LABEL_13:
        v13 = a4 == 0;
        v14 = 17;
        v15 = 36;
LABEL_19:
        if (!v13)
          v14 = v15;
        result = 0;
        *a6 = v14;
        return result;
      }
      if (((1 << a5) & 6) != 0)
        goto LABEL_18;
      if (a5 == 6)
        goto LABEL_17;
    }
    if (a5 == 85)
      goto LABEL_17;
LABEL_18:
    v13 = a4 == 0;
    v14 = 2;
    v15 = 6;
    goto LABEL_19;
  }
  return result;
}

uint64_t sub_21A6B38E4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  const __CFString *v7;
  const __CFString *v8;
  uint64_t v9;
  int valuePtr;

  valuePtr = a3;
  v7 = (const __CFString *)CFNumberCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], kCFNumberSInt32Type, &valuePtr);
  if (!v7)
    return 4294960568;
  v8 = v7;
  v9 = sub_21A6B2DEC(a1, a2, v7, a4);
  CFRelease(v8);
  return v9;
}

const __CFArray *sub_21A6B3968(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  CFNumberRef v7;
  CFNumberRef v8;
  const char *v9;
  const __CFArray *v10;
  CFArrayRef theArray;
  int valuePtr;
  CFRange v14;

  valuePtr = a3;
  theArray = 0;
  v7 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], kCFNumberSInt32Type, &valuePtr);
  if (!v7)
    return 0;
  v8 = v7;
  if (*(char *)(a2 + 23) >= 0)
    v9 = (const char *)a2;
  else
    v9 = *(const char **)a2;
  if (sub_21A6F47C0(a1, v9, &theArray, a4))
  {
    v10 = 0;
  }
  else
  {
    v10 = theArray;
    if (theArray)
    {
      v14.length = CFArrayGetCount(theArray);
      v14.location = 0;
      v10 = (const __CFArray *)CFArrayContainsValue(v10, v14, v8);
    }
  }
  CFRelease(v8);
  if (theArray)
    CFRelease(theArray);
  return v10;
}

void sub_21A6B3A38(unsigned __int8 *a1, uint64_t a2, std::string *a3)
{
  unsigned __int8 *v5;
  int v6;
  uint64_t v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  int v13;
  std::string::size_type v14;
  int v15;
  const std::string::value_type *v16;
  std::string::size_type v17;
  std::string *v18;
  unsigned __int8 *v19;
  std::string v20;
  std::string __str;
  char v22;

  v5 = a1;
  v6 = (char)a1[23];
  if ((v6 & 0x80000000) == 0)
  {
    __str = *(std::string *)a1;
LABEL_4:
    v7 = v6;
    goto LABEL_5;
  }
  sub_21A6CDFB4(&__str, *(void **)a1, *((_QWORD *)a1 + 1));
  v6 = (char)v5[23];
  if ((v6 & 0x80000000) == 0)
    goto LABEL_4;
  v19 = v5;
  v5 = *(unsigned __int8 **)v5;
  v7 = *((_QWORD *)v19 + 1);
LABEL_5:
  v8 = &v5[v7];
  if (v7)
  {
    v9 = v5;
    v10 = &v5[v7];
    do
    {
      v11 = v9;
      v12 = v9;
      while (1)
      {
        v13 = *v12++;
        if (v13 == 46)
          break;
        v11 = v12;
        if (v12 == v8)
        {
          v11 = v10;
          goto LABEL_14;
        }
      }
      v9 = v11 + 1;
      v10 = v11;
    }
    while (v12 != v8);
  }
  else
  {
    v11 = v5;
  }
LABEL_14:
  if (v11 == v8)
    v14 = 0;
  else
    v14 = v11 - v5 + 1;
  std::string::basic_string(&v20, &__str, 0, v14, (std::allocator<char> *)&v22);
  std::string::operator=(&__str, &v20);
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v20.__r_.__value_.__l.__data_);
  v15 = *(char *)(a2 + 23);
  if (v15 >= 0)
    v16 = (const std::string::value_type *)a2;
  else
    v16 = *(const std::string::value_type **)a2;
  if (v15 >= 0)
    v17 = *(unsigned __int8 *)(a2 + 23);
  else
    v17 = *(_QWORD *)(a2 + 8);
  v18 = std::string::append(&__str, v16, v17);
  std::string::operator=(a3, v18);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
}

void sub_21A6B3B74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

uint64_t sub_21A6B3BAC(uint64_t a1)
{
  uint64_t v2;
  const __CFArray *Value;
  const __CFString *v4;
  CFIndex Count;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t i;
  const __CFNumber *v14;
  int64_t size;
  std::string *v16;
  _BYTE *v17;
  std::string *v18;
  _BYTE *v19;
  std::string::size_type v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  int v28;
  CFNumberRef v29;
  std::string *v30;
  CFNumberRef v31;
  CFIndex v33;
  const __CFAllocator *allocator;
  int v35;
  int valuePtr;
  CFNumberRef v37;
  CFDictionaryRef v38;
  CFTypeRef cf;
  std::string v40;
  CFDictionaryRef theDict;
  char __str[16];
  uint64_t v43;

  v43 = *MEMORY[0x24BDAC8D0];
  theDict = 0;
  memset(&v40, 0, sizeof(v40));
  cf = 0;
  v2 = sub_21A6AF29C(a1, 1466517097, (CFTypeRef *)&theDict, 0);
  if ((_DWORD)v2)
    goto LABEL_63;
  Value = (const __CFArray *)CFDictionaryGetValue(theDict, CFSTR("radios"));
  v4 = (const __CFString *)Value;
  if (!Value)
    goto LABEL_60;
  Count = CFArrayGetCount(Value);
  if (Count < 1)
  {
    v2 = 0;
    goto LABEL_63;
  }
  v11 = 0;
  v33 = Count;
  allocator = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  while (2)
  {
    v37 = 0;
    v38 = 0;
    valuePtr = 0;
    sub_21A693B94(v4, (uint64_t)&v38, (UInt8 *)"[*]", v6, v7, v8, v9, v10, v11);
    v2 = v12;
    if (!(_DWORD)v12)
    {
      if (v38)
      {
        for (i = 0; i != 4; ++i)
        {
          v14 = (const __CFNumber *)CFDictionaryGetValue(v38, *(&off_24DD077A0 + 2 * i));
          if (!v14)
          {
            v2 = 4294967291;
            goto LABEL_63;
          }
          MEMORY[0x220747320](&v40, "WiFi.radios.[*].");
          sub_21A6B2D64((unsigned __int8 *)&v40, *((_DWORD *)&off_24DD077A0 + 4 * i + 2), &v40);
          snprintf(__str, 0x10uLL, "%ld", v11);
          if ((v40.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            size = HIBYTE(v40.__r_.__value_.__r.__words[2]);
          else
            size = v40.__r_.__value_.__l.__size_;
          if ((v40.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v16 = &v40;
          else
            v16 = (std::string *)v40.__r_.__value_.__r.__words[0];
          v17 = (char *)v16 + size;
          if (size >= 1)
          {
            v18 = v16;
            do
            {
              v19 = memchr(v18, 42, size);
              if (!v19)
                break;
              if (*v19 == 42)
                goto LABEL_21;
              v18 = (std::string *)(v19 + 1);
              size = v17 - (_BYTE *)v18;
            }
            while (v17 - (_BYTE *)v18 > 0);
          }
          v19 = v17;
LABEL_21:
          if (v19 == v17)
            v20 = -1;
          else
            v20 = v19 - (_BYTE *)v16;
          std::string::replace(&v40, v20, 1uLL, __str);
          if (!CFNumberGetValue(v14, kCFNumberIntType, &valuePtr))
            goto LABEL_60;
          v37 = 0;
          if (i == 3)
          {
            v35 = 0;
            sub_21A6D6E48((const __CFString *)v38, &v35, v21, v22, v23, v24, v25, v26);
            v28 = v27;
            if (!v27)
            {
              switch(v35)
              {
                case 2:
                case 3:
                  if (!sub_21A6AF0B4(a1, 1852787795))
                    break;
                  v35 = 1;
                  v37 = CFNumberCreate(allocator, kCFNumberNSIntegerType, &v35);
                  sub_21A6B2D64((unsigned __int8 *)&v40, 1651725131, &v40);
                  v2 = sub_21A6B2DEC(a1, (uint64_t)&v40, &stru_24DD08368, 0);
                  if (!(_DWORD)v2)
                    break;
                  goto LABEL_63;
                case 4:
                case 6:
                case 8:
                  if (!sub_21A6AF0B4(a1, 1852787795))
                    break;
                  goto LABEL_29;
                case 5:
                  if (!sub_21A6AF0B4(a1, 1852788045))
                    break;
LABEL_29:
                  v35 = 7;
                  v29 = CFNumberCreate(allocator, kCFNumberNSIntegerType, &v35);
                  goto LABEL_57;
                case 9:
                case 11:
                  if (!sub_21A6AF0B4(a1, 1852787795))
                    break;
                  goto LABEL_56;
                case 10:
                  if (!sub_21A6AF0B4(a1, 1852788045))
                    break;
LABEL_56:
                  v35 = 12;
                  v29 = CFNumberCreate(allocator, kCFNumberNSIntegerType, &v35);
LABEL_57:
                  v37 = v29;
                  break;
                default:
                  break;
              }
            }
          }
          else
          {
            if ((v40.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v30 = &v40;
            else
              v30 = (std::string *)v40.__r_.__value_.__r.__words[0];
            v28 = sub_21A6B40BC(a1, (char *)v30, v14, 1, (CFTypeRef *)&v37);
          }
          v31 = v37;
          if (v28 || v37)
          {
            if (cf)
            {
              CFRelease(cf);
              cf = 0;
              v31 = v37;
            }
            if (v31)
            {
              cf = v31;
            }
            else
            {
              v2 = sub_21A6B44B4(a1, (uint64_t)&v40, (CFMutableDictionaryRef *)&cf, 2);
              if ((_DWORD)v2)
                goto LABEL_63;
            }
            sub_21A6B2D64((unsigned __int8 *)&v40, *((_DWORD *)&off_24DD077A0 + 4 * i + 3), &v40);
            v2 = sub_21A6B2DEC(a1, (uint64_t)&v40, (const __CFString *)cf, 0);
            if ((_DWORD)v2)
              goto LABEL_63;
          }
          else if (dword_2550EEFA8 <= 8000
                 && (dword_2550EEFA8 != -1 || sub_21A69876C((uint64_t)&dword_2550EEFA8, 0x1F40u)))
          {
            sub_21A698FDC((uint64_t)&dword_2550EEFA8, (uint64_t)"ACPStatus BaseStation::PostImportValidateWiFiPlistSettings()", 8000, (uint64_t)"%s: val is good: %u @ %s in radio index %ld.\n", v7, v8, v9, v10, (uint64_t)"ACPStatus BaseStation::PostImportValidateWiFiPlistSettings()");
          }
        }
        v2 = 0;
        if (++v11 != v33)
          continue;
        break;
      }
LABEL_60:
      v2 = 4294967292;
    }
    break;
  }
LABEL_63:
  if (theDict)
  {
    CFRelease(theDict);
    theDict = 0;
  }
  if (cf)
    CFRelease(cf);
  if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v40.__r_.__value_.__l.__data_);
  return v2;
}

void sub_21A6B4090(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a25 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_21A6B40BC(uint64_t a1, char *a2, const __CFBoolean *a3, uint64_t a4, CFTypeRef *a5)
{
  int v10;
  uint64_t v11;
  uint64_t v12;
  const __CFString *v13;
  CFIndex Count;
  CFIndex v15;
  int Value;
  unsigned __int16 *p_valuePtr;
  const __CFNumber *v18;
  CFNumberType v19;
  int v21;
  CFIndex i;
  const __CFNumber *ValueAtIndex;
  int v24;
  int v25;
  CFIndex v26;
  const __CFNumber *v27;
  int v28;
  int v30;
  void *__p[2];
  char v34;
  int v35;
  CFArrayRef theArray;
  int v37;
  unsigned __int16 v38;
  unsigned __int8 v39;
  int valuePtr;
  unsigned __int16 v41;
  uint64_t v42;
  int v43;

  v43 = 0;
  v42 = 0;
  v41 = 0;
  valuePtr = 0;
  v39 = 0;
  v38 = 0;
  v37 = 0;
  v10 = sub_21A6BB08C(a2);
  theArray = 0;
  v35 = 0;
  v11 = sub_21A6D4DDC(v10, &v42);
  if ((_DWORD)v11)
    goto LABEL_2;
  if (*(_DWORD *)(v42 + 12) != 6)
    goto LABEL_21;
  v12 = 0;
  v13 = 0;
  if (v10 == 1651725402 || v10 == 1937326416)
    goto LABEL_23;
  v11 = sub_21A6F47C0(a1, a2, &theArray, 1);
  if ((_DWORD)v11)
    goto LABEL_2;
  if (!theArray)
    return 0;
  Count = CFArrayGetCount(theArray);
  if (Count < 1)
    goto LABEL_21;
  v15 = Count;
  v11 = sub_21A6D4B80(v10, &v43);
  if ((_DWORD)v11)
  {
LABEL_2:
    v12 = v11;
    v13 = 0;
    goto LABEL_23;
  }
  if (v43 == 2)
  {
    p_valuePtr = &v41;
    v18 = a3;
    v19 = kCFNumberShortType;
LABEL_16:
    CFNumberGetValue(v18, v19, p_valuePtr);
    Value = 0;
    goto LABEL_17;
  }
  if (v43 != 1)
  {
    p_valuePtr = (unsigned __int16 *)&valuePtr;
    v18 = a3;
    v19 = kCFNumberIntType;
    goto LABEL_16;
  }
  Value = CFBooleanGetValue(a3);
LABEL_17:
  if (v10 == 1651718221 && valuePtr == 9 || v10 == 1651724867 && valuePtr == 1000)
    goto LABEL_21;
  v21 = 0;
  for (i = 0; i != v15; ++i)
  {
    ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(theArray, i);
    if (v43 == 2)
    {
      CFNumberGetValue(ValueAtIndex, kCFNumberShortType, &v38);
      v24 = v38;
      v25 = v41;
    }
    else
    {
      if (v43 == 1)
      {
        CFNumberGetValue(ValueAtIndex, kCFNumberSInt8Type, &v39);
        v24 = v39;
        if (v39 == Value)
          goto LABEL_21;
        goto LABEL_36;
      }
      CFNumberGetValue(ValueAtIndex, kCFNumberIntType, &v37);
      v24 = v37;
      v25 = valuePtr;
    }
    if (v24 == v25)
      goto LABEL_21;
LABEL_36:
    if (!i)
    {
      v35 = v24;
      v21 = v24;
    }
  }
  if (v21 == 8888)
  {
LABEL_21:
    v13 = 0;
LABEL_22:
    v12 = 0;
    goto LABEL_23;
  }
  if (v10 == 1398097521)
  {
    if (valuePtr == 2678400)
    {
      v28 = 2592000;
      goto LABEL_69;
    }
    if (!valuePtr)
    {
      v28 = 604800;
      goto LABEL_69;
    }
  }
  else if (v10 == 1651725133 || v10 == 1651722067)
  {
    v26 = 0;
    while (1)
    {
      v27 = (const __CFNumber *)CFArrayGetValueAtIndex(theArray, v26);
      CFNumberGetValue(v27, kCFNumberIntType, &v37);
      if ((valuePtr & 0xFFFFFFFE) == 2)
      {
        v28 = v37;
        if ((v37 & 0xFFFFFFFE) == 2)
          break;
      }
      if ((valuePtr - 2) < 6 || valuePtr == 13)
      {
        v28 = v37;
        v30 = v37 - 4;
        if ((v37 - 4) < 0xA && ((0x20Fu >> v30) & 1) != 0)
        {
          v28 = dword_21A73F130[v30];
          break;
        }
        if (((valuePtr - 4) < 4 || valuePtr == 13) && v37 == 13)
          break;
      }
      if ((valuePtr - 9) <= 3)
      {
        v28 = v37;
        if ((v37 - 9) < 4)
          break;
      }
      if (v15 == ++v26)
        goto LABEL_70;
    }
LABEL_69:
    v35 = v28;
  }
LABEL_70:
  v13 = (const __CFString *)CFNumberCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], kCFNumberIntType, &v35);
  if (!v13)
    goto LABEL_22;
  sub_21A6CE0F0(__p, a2);
  v12 = sub_21A6B2DEC(a1, (uint64_t)__p, v13, a4);
  if (v34 < 0)
    operator delete(__p[0]);
  if (a5 && !(_DWORD)v12)
    *a5 = CFRetain(v13);
LABEL_23:
  if (theArray)
  {
    CFRelease(theArray);
    theArray = 0;
  }
  if (v13)
    CFRelease(v13);
  return v12;
}

void sub_21A6B4498(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_21A6B44B4(uint64_t a1, uint64_t a2, CFMutableDictionaryRef *a3, uint64_t a4)
{
  pthread_mutex_t *v8;
  uint64_t v9;
  uint64_t v10;

  v8 = (pthread_mutex_t *)(a1 + 392);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 392));
  ++*(_DWORD *)(a1 + 456);
  v9 = sub_21A6B64FC((CFDictionaryRef *)a1, a2, a3, a4);
  v10 = v9;
  if (a3 && !(_DWORD)v9 && *a3)
    CFRetain(*a3);
  --*(_DWORD *)(a1 + 456);
  pthread_mutex_unlock(v8);
  return v10;
}

void sub_21A6B4548(_Unwind_Exception *a1)
{
  pthread_mutex_t *v1;
  uint64_t v2;

  --*(_DWORD *)(v2 + 456);
  pthread_mutex_unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_21A6B456C(uint64_t a1, int a2)
{
  uint64_t result;
  unsigned __int16 v3;
  unsigned __int16 v4;
  int v5;

  result = 1;
  if (a2 <= 1918978352)
  {
    if (a2 <= 1918128973)
    {
      if (a2 > 1651725132)
      {
        if (a2 > 1651733075)
        {
          if (a2 != 1651733076 && a2 != 1683440723)
          {
            v5 = 1685538412;
            goto LABEL_55;
          }
          return result;
        }
        if (a2 == 1651725133)
          return result;
        v4 = 22349;
      }
      else
      {
        if (a2 <= 1651724866)
        {
          if (a2 == 910976632)
            return result;
          v5 = 1633895790;
          goto LABEL_55;
        }
        if (a2 == 1651724867 || a2 == 1651724877)
          return result;
        v4 = 21323;
      }
      v5 = v4 | 0x62730000;
      goto LABEL_55;
    }
    if (a2 > 1918977124)
    {
      if (a2 > 1918977585)
      {
        if (a2 == 1918977586)
          return result;
        v3 = 18028;
      }
      else
      {
        if (a2 == 1918977125)
          return result;
        v3 = 17729;
      }
    }
    else
    {
      if ((a2 - 1918976833) <= 0x31 && ((1 << (a2 - 65)) & 0x2098000000001) != 0
        || a2 == 1918128974)
      {
        return result;
      }
      v3 = 16757;
    }
LABEL_54:
    v5 = v3 | 0x72610000;
    goto LABEL_55;
  }
  if (a2 > 1918980913)
  {
    if (a2 > 1918981425)
    {
      if (a2 <= 2003060331)
      {
        if ((a2 - 1918981955) <= 0xA && ((1 << (a2 - 67)) & 0x405) != 0)
          return result;
        v3 = 21810;
        goto LABEL_54;
      }
      if (a2 == 2003060332)
        return result;
      v5 = 2003061875;
LABEL_55:
      if (a2 == v5)
        return result;
      return 0;
    }
    if ((a2 - 1918980965) <= 0xF && ((1 << (a2 - 101)) & 0x8041) != 0 || a2 == 1918980914)
      return result;
    v3 = 21618;
    goto LABEL_54;
  }
  if (a2 <= 1918979406)
  {
    if (a2 > 1918979138)
    {
      if (a2 == 1918979139)
        return result;
      v3 = 19526;
    }
    else
    {
      if ((a2 - 1918978353) < 2)
        return result;
      v3 = 19284;
    }
    goto LABEL_54;
  }
  if (a2 > 1918979692)
  {
    if (a2 > 1918980215)
    {
      if (a2 == 1918980216)
        return result;
      v3 = 21103;
    }
    else
    {
      if (a2 == 1918979693)
        return result;
      v3 = 20591;
    }
    goto LABEL_54;
  }
  if ((a2 - 1918979407) > 0x26 || ((1 << (a2 - 79)) & 0x4000200001) == 0)
    return 0;
  return result;
}

uint64_t sub_21A6B488C(uint64_t a1, int a2)
{
  uint64_t result;
  int v3;

  result = 1;
  if (a2 > 1886547537)
  {
    if (a2 > 2002862933)
    {
      if (a2 == 2002862934)
        return result;
      v3 = 2003061875;
    }
    else
    {
      if (a2 == 1886547538)
        return result;
      v3 = 1918976882;
    }
  }
  else if (a2 > 1633899616)
  {
    if (a2 == 1633899617)
      return result;
    v3 = 1886213217;
  }
  else
  {
    if (a2 == 1349676902)
      return result;
    v3 = 1466517097;
  }
  if (a2 != v3)
    return 0;
  return result;
}

uint64_t sub_21A6B4940(uint64_t a1, int a2, CFDataRef theData, CFTypeRef *a4)
{
  uint64_t v4;
  const __CFData *v6;
  const __CFArray *Value;
  const __CFString *v9;
  CFIndex Count;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  CFIndex v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  CFStringRef v25;
  const __CFString *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  CFTypeID v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  const __CFString *v39;
  CFTypeID v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  int v47;
  CFTypeID TypeID;
  unint64_t v50;
  const UInt8 *v51;
  const __CFAllocator *v52;
  CFMutableArrayRef v53;
  __CFArray *v54;
  unsigned int v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  const CFDictionaryKeyCallBacks *v59;
  const CFDictionaryValueCallBacks *v60;
  __CFDictionary *v61;
  unint64_t Length;
  const UInt8 *BytePtr;
  const __CFAllocator *v64;
  CFMutableArrayRef Mutable;
  unsigned int v66;
  unint64_t v67;
  UInt8 *v68;
  uint64_t v69;
  const CFDictionaryKeyCallBacks *v70;
  const CFDictionaryValueCallBacks *v71;
  __CFDictionary *v72;
  unint64_t v73;
  const UInt8 *v74;
  const __CFAllocator *v75;
  CFMutableArrayRef v76;
  unsigned int v77;
  unint64_t v78;
  unint64_t v79;
  const UInt8 *v80;
  const __CFAllocator *v81;
  CFMutableArrayRef v82;
  unsigned int v83;
  unint64_t v84;
  uint64_t v85;
  const CFDictionaryKeyCallBacks *v86;
  const CFDictionaryValueCallBacks *v87;
  __CFDictionary *v88;
  UInt8 *v89;
  uint64_t v90;
  const CFDictionaryKeyCallBacks *v91;
  const CFDictionaryValueCallBacks *v92;
  __CFDictionary *v93;
  const __CFAllocator *alloc;
  CFMutableDictionaryRef theDict;
  CFStringRef theString1;
  CFTypeRef cf;
  unsigned __int8 v98[6];
  char cStr[16];
  __int128 v100;
  uint64_t v101;

  v101 = *MEMORY[0x24BDAC8D0];
  v4 = 4294967292;
  if (!theData || !a4)
    return v4;
  v6 = theData;
  v4 = 4294967286;
  if (a2 > 1886547537)
  {
    if (a2 > 2002862933)
    {
      if (a2 == 2002862934)
      {
        *(_DWORD *)cStr = 0;
        if (!CFNumberGetValue(theData, kCFNumberSInt32Type, cStr))
          return 4294960553;
        LODWORD(cf) = *(_DWORD *)cStr;
        v4 = 0;
        *a4 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], kCFNumberSInt32Type, &cf);
        return v4;
      }
      if (a2 != 2003061875)
        return v4;
      Length = CFDataGetLength(theData);
      BytePtr = CFDataGetBytePtr(v6);
      v64 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
      Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD690]);
      if (Mutable)
      {
        v54 = Mutable;
        if (!Length)
          goto LABEL_99;
        if (!*(_DWORD *)BytePtr)
        {
          v66 = *((_DWORD *)BytePtr + 1);
          v67 = bswap32(v66);
          if (Length >= 40 * (unint64_t)v67 + 16)
          {
            if (v66)
            {
              v68 = (UInt8 *)(BytePtr + 16);
              if (v67 <= 1)
                v69 = 1;
              else
                v69 = v67;
              v70 = (const CFDictionaryKeyCallBacks *)MEMORY[0x24BDBD6A0];
              v71 = (const CFDictionaryValueCallBacks *)MEMORY[0x24BDBD6B0];
              while (1)
              {
                v72 = CFDictionaryCreateMutable(v64, 0, v70, v71);
                if (!v72)
                  goto LABEL_106;
                v6 = v72;
                if (!sub_21A6CF1B4(v68, (char *)v68 + 6, v72))
                {
LABEL_107:
                  v4 = 0xFFFFFFFFLL;
                  goto LABEL_102;
                }
                CFArrayAppendValue(v54, v6);
                CFRelease(v6);
                v68 += 40;
                if (!--v69)
                  goto LABEL_99;
              }
            }
            goto LABEL_99;
          }
          goto LABEL_81;
        }
        goto LABEL_74;
      }
    }
    else
    {
      if (a2 != 1886547538)
      {
        if (a2 == 1918976882)
        {
          TypeID = CFStringGetTypeID();
          return sub_21A6F4F30(1918976882, (const __CFString *)v6, TypeID, a4);
        }
        return v4;
      }
      v73 = CFDataGetLength(theData);
      v74 = CFDataGetBytePtr(v6);
      v75 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
      v76 = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD690]);
      if (v76)
      {
        v54 = v76;
        if (!v73)
          goto LABEL_99;
        if (*(_DWORD *)v74 == 50331648)
        {
          v77 = *((_DWORD *)v74 + 1);
          v78 = bswap32(v77);
          if (v73 < 720 * (unint64_t)v78 + 16)
          {
            v4 = 4294967281;
            goto LABEL_103;
          }
          if (v77)
          {
            if (v78 <= 1)
              v85 = 1;
            else
              v85 = v78;
            v86 = (const CFDictionaryKeyCallBacks *)MEMORY[0x24BDBD6A0];
            v87 = (const CFDictionaryValueCallBacks *)MEMORY[0x24BDBD6B0];
            while (1)
            {
              *((_WORD *)v74 + 8) = bswap32(*((unsigned __int16 *)v74 + 8)) >> 16;
              *((_WORD *)v74 + 9) = bswap32(*((unsigned __int16 *)v74 + 9)) >> 16;
              *((_WORD *)v74 + 367) = bswap32(*((unsigned __int16 *)v74 + 367)) >> 16;
              v88 = CFDictionaryCreateMutable(v75, 0, v86, v87);
              if (!v88)
                goto LABEL_106;
              v6 = v88;
              if (!sub_21A6CF444((uint64_t)(v74 + 16), v88))
                goto LABEL_107;
              CFArrayAppendValue(v54, v6);
              CFRelease(v6);
              v74 += 720;
              if (!--v85)
                goto LABEL_99;
            }
          }
          goto LABEL_99;
        }
        goto LABEL_74;
      }
    }
    return 4294960568;
  }
  if (a2 > 1633899616)
  {
    if (a2 == 1633899617)
    {
      v79 = CFDataGetLength(theData);
      v80 = CFDataGetBytePtr(v6);
      v81 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
      v82 = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD690]);
      if (v82)
      {
        v54 = v82;
        if (!v79)
          goto LABEL_99;
        if (!*(_DWORD *)v80)
        {
          v83 = *((_DWORD *)v80 + 1);
          v84 = bswap32(v83);
          if (v79 >= 40 * (unint64_t)v84 + 16)
          {
            if (v83)
            {
              v89 = (UInt8 *)(v80 + 16);
              if (v84 <= 1)
                v90 = 1;
              else
                v90 = v84;
              v91 = (const CFDictionaryKeyCallBacks *)MEMORY[0x24BDBD6A0];
              v92 = (const CFDictionaryValueCallBacks *)MEMORY[0x24BDBD6B0];
              do
              {
                v93 = CFDictionaryCreateMutable(v81, 0, v91, v92);
                if (!v93)
                  goto LABEL_106;
                v6 = v93;
                if (!sub_21A6CF1B4(v89, (char *)v89 + 6, v93))
                  goto LABEL_107;
                CFArrayAppendValue(v54, v6);
                CFRelease(v6);
                v89 += 40;
              }
              while (--v90);
            }
LABEL_99:
            v4 = 0;
            *a4 = v54;
            goto LABEL_103;
          }
LABEL_81:
          v4 = 4294967292;
          goto LABEL_103;
        }
LABEL_74:
        v4 = 4294967277;
        goto LABEL_103;
      }
    }
    else
    {
      if (a2 != 1886213217)
        return v4;
      v50 = CFDataGetLength(theData);
      v51 = CFDataGetBytePtr(v6);
      v52 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
      v53 = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD690]);
      if (v53)
      {
        v54 = v53;
        if (!v50)
          goto LABEL_99;
        if (!*(_DWORD *)v51)
        {
          v55 = *((_DWORD *)v51 + 1);
          v56 = bswap32(v55);
          if (v50 >= 8 * (unint64_t)v56 + 16)
          {
            if (v55)
            {
              v57 = (uint64_t)(v51 + 16);
              if (v56 <= 1)
                v58 = 1;
              else
                v58 = v56;
              v59 = (const CFDictionaryKeyCallBacks *)MEMORY[0x24BDBD6A0];
              v60 = (const CFDictionaryValueCallBacks *)MEMORY[0x24BDBD6B0];
              while (1)
              {
                *(_DWORD *)v57 = bswap32(*(_DWORD *)v57);
                *(_WORD *)(v57 + 4) = bswap32(*(unsigned __int16 *)(v57 + 4)) >> 16;
                *(_WORD *)(v57 + 6) = bswap32(*(unsigned __int16 *)(v57 + 6)) >> 16;
                v61 = CFDictionaryCreateMutable(v52, 0, v59, v60);
                if (!v61)
                  break;
                v6 = v61;
                if (!sub_21A6CF6B8(v57, v61))
                  goto LABEL_107;
                CFArrayAppendValue(v54, v6);
                CFRelease(v6);
                v57 += 8;
                if (!--v58)
                  goto LABEL_99;
              }
LABEL_106:
              v4 = 4294960568;
LABEL_103:
              if (!*a4)
                CFRelease(v54);
              return v4;
            }
            goto LABEL_99;
          }
          goto LABEL_81;
        }
        goto LABEL_74;
      }
    }
    return 4294960568;
  }
  if (a2 == 1349676902)
    return sub_21A6B7C9C(a1, theData, a4);
  if (a2 == 1466517097)
  {
    theString1 = 0;
    cf = 0;
    CFRetain(theData);
    CFRetain(v6);
    *a4 = v6;
    Value = (const __CFArray *)CFDictionaryGetValue(v6, CFSTR("radios"));
    if (!Value)
      goto LABEL_30;
    v9 = (const __CFString *)Value;
    Count = CFArrayGetCount(Value);
    if (Count >= 1)
    {
      v16 = Count;
      v17 = 0;
      alloc = (const __CFAllocator *)*MEMORY[0x24BDBD240];
      while (1)
      {
        theDict = 0;
        sub_21A693B94(v9, (uint64_t)&theDict, (UInt8 *)"[*]", v11, v12, v13, v14, v15, v17);
        if ((_DWORD)v18)
        {
LABEL_79:
          v4 = v18;
          goto LABEL_101;
        }
        if (!theDict)
          break;
        sub_21A693B94((const __CFString *)theDict, (uint64_t)v98, (UInt8 *)"%kO:mac", v19, v20, v21, v22, v23, (uint64_t)CFSTR("raMA"));
        if (!v24)
        {
          *(_OWORD *)cStr = 0u;
          v100 = 0u;
          sub_21A6A1FDC(v98, 6, cStr);
          v25 = CFStringCreateWithCString(alloc, cStr, 0x8000100u);
          cf = v25;
          if (!v25)
            goto LABEL_30;
          CFDictionarySetValue(theDict, CFSTR("raMA"), v25);
          CFRelease(cf);
        }
        v26 = (const __CFString *)CFDictionaryGetValue(theDict, CFSTR("raMO"));
        theString1 = v26;
        if (v26)
        {
          v32 = CFGetTypeID(v26);
          if (v32 == CFStringGetTypeID())
            *(_BYTE *)(a1 + 385) = 1;
        }
        sub_21A693B94((const __CFString *)theDict, (uint64_t)&theString1, (UInt8 *)"%kO", v27, v28, v29, v30, v31, (uint64_t)CFSTR("raCr"));
        if (!v38)
        {
          v39 = theString1;
          v40 = CFStringGetTypeID();
          v18 = sub_21A6F4F30(1918976882, v39, v40, &cf);
          if ((_DWORD)v18)
            goto LABEL_79;
          CFDictionarySetValue(theDict, CFSTR("raCr"), cf);
          CFRelease(cf);
        }
        sub_21A693B94((const __CFString *)theDict, (uint64_t)&theString1, (UInt8 *)"%kO", v33, v34, v35, v36, v37, (uint64_t)CFSTR("raI1"));
        if (!v46 && CFStringCompare(theString1, CFSTR("0.0.0.0"), 0) == kCFCompareEqualTo)
        {
          theString1 = &stru_24DD08368;
          CFDictionarySetValue(theDict, CFSTR("raI1"), &stru_24DD08368);
        }
        sub_21A693B94((const __CFString *)theDict, (uint64_t)&theString1, (UInt8 *)"%kO", v41, v42, v43, v44, v45, (uint64_t)CFSTR("raI2"));
        if (!v47 && CFStringCompare(theString1, CFSTR("0.0.0.0"), 0) == kCFCompareEqualTo)
        {
          theString1 = &stru_24DD08368;
          CFDictionarySetValue(theDict, CFSTR("raI2"), &stru_24DD08368);
        }
        v18 = sub_21A6F4890(theDict);
        if ((_DWORD)v18)
          goto LABEL_79;
        v18 = sub_21A6F4CEC(theDict);
        if ((_DWORD)v18)
          goto LABEL_79;
        if (v16 == ++v17)
          goto LABEL_30;
      }
      v4 = 4294967292;
    }
    else
    {
LABEL_30:
      v4 = 0;
    }
LABEL_101:
    v54 = 0;
LABEL_102:
    CFRelease(v6);
    if (v54)
      goto LABEL_103;
  }
  return v4;
}

uint64_t sub_21A6B51F8(CFDictionaryRef *a1, uint64_t a2, CFTypeRef *a3, _BYTE *a4, uint64_t a5)
{
  uint64_t v5;
  int v8;
  uint64_t v10;
  int v12;
  const __CFString *v13;
  uint64_t *v14;
  CFStringRef theString1;

  theString1 = 0;
  v5 = 4294967292;
  if (!a3)
    return v5;
  if (!a4)
    return v5;
  v8 = a2;
  *a3 = 0;
  v10 = sub_21A6AF97C(a1, a2, (CFNumberRef *)&theString1, a5);
  v5 = v10;
  if ((_DWORD)v10)
    return v5;
  if (!sub_21A6B488C(v10, v8))
  {
    v14 = 0;
    v5 = sub_21A671008(v8, &v14);
    if ((_DWORD)v5)
      return v5;
    v12 = *((_DWORD *)v14 + 1);
    if (v12 == 7)
    {
      if (CFStringCompare(theString1, &stru_24DD08368, 0) == kCFCompareEqualTo)
      {
        v13 = CFSTR("0.0.0.0");
LABEL_18:
        theString1 = v13;
      }
    }
    else
    {
      if (v12 != 12)
      {
        if (v12 != 8 || CFStringCompare(theString1, &stru_24DD08368, 0))
          goto LABEL_19;
        v13 = CFSTR("00:00:00:00:00:00");
        goto LABEL_18;
      }
      if (CFStringCompare(theString1, &stru_24DD08368, 0) == kCFCompareEqualTo)
      {
        v13 = CFSTR("::");
        goto LABEL_18;
      }
    }
LABEL_19:
    *a3 = theString1;
    *a4 = 0;
    return v5;
  }
  v5 = sub_21A6B534C((uint64_t)a1, v8, theString1, a3);
  if (!(_DWORD)v5)
    *a4 = 1;
  return v5;
}

uint64_t sub_21A6B534C(uint64_t a1, int a2, const __CFString *propertyList, CFTypeRef *a4)
{
  uint64_t v4;
  const __CFDictionary *DeepCopy;
  const __CFArray *Value;
  const __CFString *v10;
  CFIndex Count;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  CFIndex v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  const __CFString *v37;
  CFTypeID TypeID;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  int v45;
  CFTypeID v46;
  CFIndex v48;
  size_t v49;
  unsigned __int8 *v50;
  unsigned __int8 *v51;
  CFIndex v52;
  uint64_t v53;
  const __CFDictionary *v54;
  int v55;
  CFIndex v56;
  unsigned __int8 *v57;
  CFIndex v58;
  uint64_t v59;
  const __CFDictionary *v60;
  CFIndex v61;
  unsigned __int8 *v62;
  CFIndex v63;
  unsigned __int8 *v64;
  const __CFDictionary *v65;
  CFIndex v66;
  unsigned __int8 *v67;
  CFIndex v68;
  uint64_t v69;
  const __CFDictionary *ValueAtIndex;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unsigned int v76;
  unsigned int v77;
  CFTypeRef v78;
  CFMutableDictionaryRef theDict;
  CFTypeRef cf;
  CFStringRef theString1;

  v4 = 4294967292;
  if (!propertyList || !a4)
    return v4;
  v4 = 4294967286;
  if (a2 <= 1886547537)
  {
    if (a2 <= 1633899616)
    {
      if (a2 == 1349676902)
        return sub_21A6B7DD0(a1, (uint64_t)propertyList, a4);
      if (a2 == 1466517097)
      {
        cf = 0;
        theString1 = 0;
        DeepCopy = (const __CFDictionary *)CFPropertyListCreateDeepCopy((CFAllocatorRef)*MEMORY[0x24BDBD240], propertyList, 2uLL);
        if (!DeepCopy)
          return 4294967293;
        *a4 = DeepCopy;
        Value = (const __CFArray *)CFDictionaryGetValue(DeepCopy, CFSTR("radios"));
        if (!Value)
          return 4294967293;
        v10 = (const __CFString *)Value;
        Count = CFArrayGetCount(Value);
        if (Count >= 1)
        {
          v17 = Count;
          v18 = 0;
          while (1)
          {
            v78 = 0;
            theDict = 0;
            sub_21A693B94(v10, (uint64_t)&theDict, (UInt8 *)"[*]", v12, v13, v14, v15, v16, v18);
            if ((_DWORD)v19)
              break;
            if (!theDict)
              return 4294967292;
            sub_21A693B94((const __CFString *)theDict, (uint64_t)&v78, (UInt8 *)"%kO", v20, v21, v22, v23, v24, (uint64_t)CFSTR("raMA"));
            if (!v30)
            {
              v19 = sub_21A674314(1918979393, (const __CFString *)v78, 1, (CFDataRef *)&cf);
              if ((_DWORD)v19)
                return v19;
              CFDictionarySetValue(theDict, CFSTR("raMA"), cf);
              CFRelease(cf);
            }
            sub_21A693B94((const __CFString *)theDict, (uint64_t)&theString1, (UInt8 *)"%kO", v25, v26, v27, v28, v29, (uint64_t)CFSTR("raCr"));
            if (!v36)
            {
              v37 = theString1;
              TypeID = CFDataGetTypeID();
              v19 = sub_21A6F4F30(1918976882, v37, TypeID, &cf);
              if ((_DWORD)v19)
                return v19;
              CFDictionarySetValue(theDict, CFSTR("raCr"), cf);
              CFRelease(cf);
            }
            sub_21A693B94((const __CFString *)theDict, (uint64_t)&theString1, (UInt8 *)"%kO", v31, v32, v33, v34, v35, (uint64_t)CFSTR("raI1"));
            if (!v44 && CFStringCompare(theString1, &stru_24DD08368, 0) == kCFCompareEqualTo)
            {
              theString1 = CFSTR("0.0.0.0");
              CFDictionarySetValue(theDict, CFSTR("raI1"), CFSTR("0.0.0.0"));
            }
            sub_21A693B94((const __CFString *)theDict, (uint64_t)&theString1, (UInt8 *)"%kO", v39, v40, v41, v42, v43, (uint64_t)CFSTR("raI2"));
            if (!v45 && CFStringCompare(theString1, &stru_24DD08368, 0) == kCFCompareEqualTo)
            {
              theString1 = CFSTR("0.0.0.0");
              CFDictionarySetValue(theDict, CFSTR("raI2"), CFSTR("0.0.0.0"));
            }
            v19 = sub_21A6F4AC8(theDict);
            if ((_DWORD)v19)
              return v19;
            v19 = sub_21A6F5134(theDict);
            if ((_DWORD)v19)
              return v19;
            if (v17 == ++v18)
              return 0;
          }
          return v19;
        }
        return 0;
      }
      return v4;
    }
    if (a2 == 1633899617)
    {
      v66 = CFArrayGetCount((CFArrayRef)propertyList);
      v49 = 40 * v66 + 16;
      v67 = (unsigned __int8 *)malloc_type_malloc(v49, 0xCF00DC24uLL);
      if (v67)
      {
        v51 = v67;
        bzero(v67, v49);
        *(_DWORD *)v51 = 0;
        *((_DWORD *)v51 + 1) = bswap32(v66);
        if (v66 >= 1)
        {
          v68 = 0;
          v69 = (uint64_t)(v51 + 16);
          do
          {
            ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex((CFArrayRef)propertyList, v68);
            if (!ValueAtIndex)
              goto LABEL_72;
            if ((sub_21A6CF2D4(ValueAtIndex, v69, (_BYTE *)(v69 + 6), 0x14uLL) & 1) == 0)
              goto LABEL_73;
            ++v68;
            v69 += 40;
          }
          while (v66 != v68);
        }
        v55 = 1633899617;
LABEL_66:
        v4 = sub_21A673FCC(v55, v51, v49, 1, (CFStringRef *)a4);
LABEL_74:
        free(v51);
        return v4;
      }
    }
    else
    {
      if (a2 != 1886213217)
        return v4;
      v48 = CFArrayGetCount((CFArrayRef)propertyList);
      v49 = 8 * v48 + 16;
      v50 = (unsigned __int8 *)malloc_type_malloc(v49, 0x8BCCD48AuLL);
      if (v50)
      {
        v51 = v50;
        bzero(v50, v49);
        *(_DWORD *)v51 = 0;
        *((_DWORD *)v51 + 1) = bswap32(v48);
        if (v48 >= 1)
        {
          v52 = 0;
          v53 = (uint64_t)(v51 + 16);
          while (1)
          {
            v54 = (const __CFDictionary *)CFArrayGetValueAtIndex((CFArrayRef)propertyList, v52);
            if (!v54)
              break;
            if (!sub_21A6CF840(v54, v53))
              goto LABEL_73;
            *(_DWORD *)v53 = bswap32(*(_DWORD *)v53);
            *(_WORD *)(v53 + 4) = bswap32(*(unsigned __int16 *)(v53 + 4)) >> 16;
            *(_WORD *)(v53 + 6) = bswap32(*(unsigned __int16 *)(v53 + 6)) >> 16;
            ++v52;
            v53 += 8;
            if (v48 == v52)
              goto LABEL_41;
          }
LABEL_72:
          v4 = 4294967291;
          goto LABEL_74;
        }
LABEL_41:
        v55 = 1886213217;
        goto LABEL_66;
      }
    }
    return 4294960568;
  }
  if (a2 <= 2002862933)
  {
    if (a2 != 1886547538)
    {
      if (a2 == 1918976882)
      {
        v46 = CFDataGetTypeID();
        return sub_21A6F4F30(1918976882, propertyList, v46, a4);
      }
      return v4;
    }
    v61 = CFArrayGetCount((CFArrayRef)propertyList);
    v49 = 720 * v61 + 16;
    v62 = (unsigned __int8 *)malloc_type_malloc(v49, 0x863190E7uLL);
    if (v62)
    {
      v51 = v62;
      bzero(v62, v49);
      *(_DWORD *)v51 = 50331648;
      *((_DWORD *)v51 + 1) = bswap32(v61);
      if (v61 >= 1)
      {
        v63 = 0;
        v64 = v51;
        do
        {
          v65 = (const __CFDictionary *)CFArrayGetValueAtIndex((CFArrayRef)propertyList, v63);
          if (!v65)
            goto LABEL_72;
          if (!sub_21A6CF5C8(v65, (uint64_t)(v64 + 16)))
            goto LABEL_73;
          *((_WORD *)v64 + 8) = bswap32(*((unsigned __int16 *)v64 + 8)) >> 16;
          *((_WORD *)v64 + 9) = bswap32(*((unsigned __int16 *)v64 + 9)) >> 16;
          *((_WORD *)v64 + 367) = bswap32(*((unsigned __int16 *)v64 + 367)) >> 16;
          ++v63;
          v64 += 720;
        }
        while (v61 != v63);
      }
      v55 = 1886547538;
      goto LABEL_66;
    }
    return 4294960568;
  }
  if (a2 == 2002862934)
  {
    LODWORD(theString1) = 0;
    LODWORD(cf) = 0;
    if (!CFNumberGetValue((CFNumberRef)propertyList, kCFNumberSInt32Type, &cf))
      return 4294960553;
    sub_21A693B94(*(const __CFString **)(a1 + 32), (uint64_t)&theString1, (UInt8 *)"%kC:int", v71, v72, v73, v74, v75, 2002862934);
    if (!(_DWORD)v19)
    {
      if (((unsigned __int16)cf & 0x400) != 0)
      {
        v77 = theString1 & 0xFFFFF0FF | 0x400;
      }
      else
      {
        v76 = theString1 & 0xFFFFF0FF;
        if ((~(_DWORD)cf & 0x900) != 0)
          v77 = v76 | 0x300;
        else
          v77 = v76 | 0x900;
      }
      LODWORD(theString1) = v77;
      v4 = 0;
      *a4 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], kCFNumberSInt32Type, &theString1);
      return v4;
    }
    return v19;
  }
  if (a2 == 2003061875)
  {
    v56 = CFArrayGetCount((CFArrayRef)propertyList);
    v49 = 40 * v56 + 16;
    v57 = (unsigned __int8 *)malloc_type_malloc(v49, 0xB1E239B3uLL);
    if (v57)
    {
      v51 = v57;
      bzero(v57, v49);
      *(_DWORD *)v51 = 0;
      *((_DWORD *)v51 + 1) = bswap32(v56);
      if (v56 >= 1)
      {
        v58 = 0;
        v59 = (uint64_t)(v51 + 16);
        do
        {
          v60 = (const __CFDictionary *)CFArrayGetValueAtIndex((CFArrayRef)propertyList, v58);
          if (!v60)
            goto LABEL_72;
          if ((sub_21A6CF2D4(v60, v59, (_BYTE *)(v59 + 6), 0x14uLL) & 1) == 0)
          {
LABEL_73:
            v4 = 0xFFFFFFFFLL;
            goto LABEL_74;
          }
          ++v58;
          v59 += 40;
        }
        while (v56 != v58);
      }
      v55 = 2003061875;
      goto LABEL_66;
    }
    return 4294960568;
  }
  return v4;
}

uint64_t sub_21A6B5A34(uint64_t a1, uint64_t a2, CFTypeRef *a3, _BYTE *a4)
{
  pthread_mutex_t *v8;
  uint64_t v9;
  uint64_t v10;

  v8 = (pthread_mutex_t *)(a1 + 392);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 392));
  ++*(_DWORD *)(a1 + 456);
  v9 = sub_21A6B51F8((CFDictionaryRef *)a1, a2, a3, a4, 0);
  v10 = v9;
  if (a3 && !(_DWORD)v9 && *a3)
  {
    if (!*a4)
      CFRetain(*a3);
    *a4 = 1;
  }
  --*(_DWORD *)(a1 + 456);
  pthread_mutex_unlock(v8);
  return v10;
}

void sub_21A6B5ADC(_Unwind_Exception *a1)
{
  pthread_mutex_t *v1;
  uint64_t v2;

  --*(_DWORD *)(v2 + 456);
  pthread_mutex_unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_21A6B5B00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  const char *v8;
  int v9;
  uint64_t (*v10)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v11;
  unsigned __int16 v12;

  if (*(char *)(a2 + 23) >= 0)
    v8 = (const char *)a2;
  else
    v8 = *(const char **)a2;
  v9 = sub_21A6BB08C(v8);
  if (v9 <= 1651722562)
  {
    if (v9 > 1651721067)
    {
      if (v9 > 1651721804)
      {
        switch(v9)
        {
          case 1651722049:
            v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 520);
            return v10(a1, a2, a3, a4);
          case 1651722050:
          case 1651722054:
          case 1651722055:
          case 1651722056:
          case 1651722057:
          case 1651722058:
          case 1651722060:
          case 1651722063:
          case 1651722065:
          case 1651722066:
            return 4294967292;
          case 1651722051:
            v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 712);
            return v10(a1, a2, a3, a4);
          case 1651722052:
            v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 696);
            return v10(a1, a2, a3, a4);
          case 1651722053:
            v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 632);
            return v10(a1, a2, a3, a4);
          case 1651722059:
            v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 424);
            return v10(a1, a2, a3, a4);
          case 1651722061:
            v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 792);
            return v10(a1, a2, a3, a4);
          case 1651722062:
            v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 648);
            return v10(a1, a2, a3, a4);
          case 1651722064:
            v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 680);
            return v10(a1, a2, a3, a4);
          case 1651722067:
            v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 664);
            return v10(a1, a2, a3, a4);
          default:
            if (v9 == 1651721805)
            {
              v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 536);
            }
            else
            {
              if (v9 != 1651721811)
                return 4294967292;
              v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 472);
            }
            break;
        }
        return v10(a1, a2, a3, a4);
      }
      if (v9 > 1651721295)
      {
        if (v9 <= 1651721538)
        {
          if (v9 == 1651721296)
          {
            v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 40);
            return v10(a1, a2, a3, a4);
          }
          if (v9 == 1651721299)
          {
            v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 1056);
            return v10(a1, a2, a3, a4);
          }
        }
        else
        {
          switch(v9)
          {
            case 1651721539:
              v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 1008);
              return v10(a1, a2, a3, a4);
            case 1651721552:
              v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 1024);
              return v10(a1, a2, a3, a4);
            case 1651721797:
              v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 1152);
              return v10(a1, a2, a3, a4);
          }
        }
      }
      else if (v9 <= 1651721281)
      {
        if (v9 == 1651721068)
        {
          v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 1072);
          return v10(a1, a2, a3, a4);
        }
        if (v9 == 1651721281)
        {
          v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 584);
          return v10(a1, a2, a3, a4);
        }
      }
      else
      {
        switch(v9)
        {
          case 1651721282:
            v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 760);
            return v10(a1, a2, a3, a4);
          case 1651721289:
            v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 200);
            return v10(a1, a2, a3, a4);
          case 1651721294:
            v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 1040);
            return v10(a1, a2, a3, a4);
        }
      }
      return 4294967292;
    }
    if (v9 > 1651720514)
    {
      if (v9 > 1651720788)
      {
        if (v9 <= 1651721024)
        {
          if (v9 == 1651720789)
          {
            v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 992);
            return v10(a1, a2, a3, a4);
          }
          if (v9 == 1651720791)
          {
            v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 776);
            return v10(a1, a2, a3, a4);
          }
        }
        else
        {
          switch(v9)
          {
            case 1651721025:
              v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 1184);
              return v10(a1, a2, a3, a4);
            case 1651721027:
              v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 232);
              return v10(a1, a2, a3, a4);
            case 1651721040:
              v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 1216);
              return v10(a1, a2, a3, a4);
          }
        }
      }
      else if (v9 <= 1651720520)
      {
        if (v9 == 1651720515)
        {
          v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 152);
          return v10(a1, a2, a3, a4);
        }
        if (v9 == 1651720519)
        {
          v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 928);
          return v10(a1, a2, a3, a4);
        }
      }
      else
      {
        switch(v9)
        {
          case 1651720521:
            v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 912);
            return v10(a1, a2, a3, a4);
          case 1651720532:
            v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 456);
            return v10(a1, a2, a3, a4);
          case 1651720788:
            v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 1088);
            return v10(a1, a2, a3, a4);
        }
      }
    }
    else if (v9 > 1651717698)
    {
      if (v9 <= 1651717711)
      {
        if (v9 == 1651717699)
        {
          v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 1104);
          return v10(a1, a2, a3, a4);
        }
        if (v9 == 1651717709)
        {
          v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 1120);
          return v10(a1, a2, a3, a4);
        }
      }
      else
      {
        switch(v9)
        {
          case 1651717712:
            v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 1200);
            return v10(a1, a2, a3, a4);
          case 1651717715:
            v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 1136);
            return v10(a1, a2, a3, a4);
          case 1651718221:
            v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 824);
            return v10(a1, a2, a3, a4);
        }
      }
    }
    else if (v9 <= 1651717453)
    {
      if (v9 == 1651716685)
      {
        v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 896);
        return v10(a1, a2, a3, a4);
      }
      if (v9 == 1651717453)
      {
        v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 880);
        return v10(a1, a2, a3, a4);
      }
    }
    else
    {
      switch(v9)
      {
        case 1651717454:
          v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 848);
          return v10(a1, a2, a3, a4);
        case 1651717459:
          v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 864);
          return v10(a1, a2, a3, a4);
        case 1651717697:
          v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 1168);
          return v10(a1, a2, a3, a4);
      }
    }
    return 4294967292;
  }
  if (v9 > 1651725130)
  {
    if (v9 <= 1651725650)
    {
      if (v9 <= 1651725391)
      {
        switch(v9)
        {
          case 1651725131:
            goto LABEL_101;
          case 1651725132:
          case 1651725135:
          case 1651725136:
          case 1651725137:
          case 1651725138:
            return 4294967292;
          case 1651725133:
            v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 104);
            return v10(a1, a2, a3, a4);
          case 1651725134:
            v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 344);
            return v10(a1, a2, a3, a4);
          case 1651725139:
            v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 568);
            return v10(a1, a2, a3, a4);
          default:
            if (v9 != 1651725143)
              return 4294967292;
            v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 360);
            break;
        }
        return v10(a1, a2, a3, a4);
      }
      if (v9 <= 1651725632)
      {
        if (v9 == 1651725392)
        {
          v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 216);
          return v10(a1, a2, a3, a4);
        }
        if (v9 == 1651725402)
        {
          v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 552);
          return v10(a1, a2, a3, a4);
        }
      }
      else
      {
        switch(v9)
        {
          case 1651725633:
            v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 184);
            return v10(a1, a2, a3, a4);
          case 1651725634:
            v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 744);
            return v10(a1, a2, a3, a4);
          case 1651725648:
            v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 832);
            return v10(a1, a2, a3, a4);
        }
      }
      return 4294967292;
    }
    if (v9 <= 1651726159)
    {
      if (v9 > 1651726149)
      {
        if (v9 == 1651726150)
        {
          v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 504);
          return v10(a1, a2, a3, a4);
        }
        if (v9 == 1651726157)
        {
          v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 296);
          return v10(a1, a2, a3, a4);
        }
      }
      else
      {
        if (v9 == 1651725651)
        {
          v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 960);
          return v10(a1, a2, a3, a4);
        }
        if (v9 == 1651726147)
        {
          v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 408);
          return v10(a1, a2, a3, a4);
        }
      }
      return 4294967292;
    }
    if (v9 <= 1651733075)
    {
      if (v9 == 1651726160)
      {
        v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 392);
        return v10(a1, a2, a3, a4);
      }
      if (v9 == 1651726165)
      {
        v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 976);
        return v10(a1, a2, a3, a4);
      }
      return 4294967292;
    }
    if (v9 == 1651733076)
    {
      v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 136);
      return v10(a1, a2, a3, a4);
    }
    if (v9 == 1918976882)
    {
LABEL_101:
      v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 72);
      return v10(a1, a2, a3, a4);
    }
    if (v9 != 1918979693)
      return 4294967292;
LABEL_127:
    v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 88);
    return v10(a1, a2, a3, a4);
  }
  if (v9 <= 1651724357)
  {
    if (v9 <= 1651723855)
    {
      if (v9 > 1651723636)
      {
        if (v9 == 1651723637)
        {
          v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 808);
          return v10(a1, a2, a3, a4);
        }
        if (v9 == 1651723853)
        {
          v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 440);
          return v10(a1, a2, a3, a4);
        }
      }
      else
      {
        if (v9 == 1651722563)
        {
          v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 168);
          return v10(a1, a2, a3, a4);
        }
        if (v9 == 1651722583)
        {
          v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 600);
          return v10(a1, a2, a3, a4);
        }
      }
    }
    else if (v9 <= 1651724337)
    {
      if (v9 == 1651723856)
      {
        v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 248);
        return v10(a1, a2, a3, a4);
      }
      if (v9 == 1651724337)
      {
        v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 264);
        return v10(a1, a2, a3, a4);
      }
    }
    else
    {
      switch(v9)
      {
        case 1651724338:
          v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 280);
          return v10(a1, a2, a3, a4);
        case 1651724355:
          v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 312);
          return v10(a1, a2, a3, a4);
        case 1651724357:
          v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 728);
          return v10(a1, a2, a3, a4);
      }
    }
    return 4294967292;
  }
  if (v9 > 1651724866)
  {
    if (v9 <= 1651724876)
    {
      if (v9 == 1651724867)
      {
        v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 120);
        return v10(a1, a2, a3, a4);
      }
      if (v9 == 1651724870)
      {
        v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 488);
        return v10(a1, a2, a3, a4);
      }
      return 4294967292;
    }
    if (v9 == 1651724877)
    {
      v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 328);
      return v10(a1, a2, a3, a4);
    }
    if (v9 != 1651724878)
    {
      if (v9 == 1651724880)
      {
        v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 376);
        return v10(a1, a2, a3, a4);
      }
      return 4294967292;
    }
    goto LABEL_127;
  }
  v11 = 0;
  if (v9 > 1651724370)
  {
    if (v9 == 1651724371)
    {
      v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 616);
      return v10(a1, a2, a3, a4);
    }
    v12 = 20565;
  }
  else
  {
    if (v9 == 1651724358)
    {
      v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 944);
      return v10(a1, a2, a3, a4);
    }
    v12 = 20560;
  }
  if (v9 != (v12 | 0x62730000))
    return 4294967292;
  return v11;
}

uint64_t sub_21A6B64FC(CFDictionaryRef *a1, uint64_t a2, CFMutableDictionaryRef *a3, uint64_t a4)
{
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v17;
  std::string::size_type size;
  CFTypeID v19;
  CFTypeID v20;
  uint64_t v21;
  std::string::size_type v22;
  uint64_t v23;
  uint64_t v24;
  std::string::size_type v25;
  std::string *p_p;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  std::string *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  std::string __str;
  CFTypeRef cf;
  unsigned int v43;
  std::string __p;
  std::string v45;
  char v46;
  std::string __s;
  std::string::value_type v48[16];
  uint64_t v49;

  v49 = *MEMORY[0x24BDAC8D0];
  memset(&v45, 0, sizeof(v45));
  memset(&__p, 0, sizeof(__p));
  v43 = 0;
  cf = 0;
  if (!a3)
  {
    v9 = 4294967292;
    goto LABEL_18;
  }
  *a3 = 0;
  std::string::basic_string(&__str, (const std::string *)a2, 0, 4uLL, (std::allocator<char> *)&__s);
  std::string::operator=(&v45, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (*(char *)(a2 + 23) >= 0)
    v8 = (char *)a2;
  else
    v8 = *(char **)a2;
  v9 = sub_21A671214(v8, 4uLL, &v43);
  if (!(_DWORD)v9)
  {
    v10 = sub_21A6AF97C(a1, v43, (CFNumberRef *)&cf, a4);
    v9 = v10;
    if ((_DWORD)v10 == -5)
    {
      if (dword_2550EEFA8 <= 8000 && (dword_2550EEFA8 != -1 || sub_21A69876C((uint64_t)&dword_2550EEFA8, 0x1F40u)))
      {
        if (*(char *)(a2 + 23) >= 0)
          v15 = a2;
        else
          v15 = *(_QWORD *)a2;
        sub_21A698FDC((uint64_t)&dword_2550EEFA8, (uint64_t)"ACPStatus BaseStation::GetPropertyCFInternal(const std::string &, CFTypeRef *, eWhichValue) const", 8000, (uint64_t)"Need default value for %s\n", v11, v12, v13, v14, v15);
      }
      v9 = 4294967291;
      goto LABEL_18;
    }
    if ((_DWORD)a4 != 2 || !(_DWORD)v10)
    {
      v17 = *(unsigned __int8 *)(a2 + 23);
      if ((v17 & 0x80u) != 0)
        v17 = *(_QWORD *)(a2 + 8);
      if (v17 >= 5)
      {
        std::string::basic_string(&__str, (const std::string *)a2, 5uLL, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&__s);
        std::string::operator=(&__p, &__str);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__str.__r_.__value_.__l.__data_);
      }
      if (cf)
      {
        size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          size = __p.__r_.__value_.__l.__size_;
        if (!size)
        {
          *a3 = (CFMutableDictionaryRef)cf;
          goto LABEL_18;
        }
        v19 = CFGetTypeID(cf);
        if (v19 != CFDictionaryGetTypeID())
        {
          v20 = CFGetTypeID(cf);
          if (v20 != CFArrayGetTypeID())
          {
            v9 = 4294960540;
            goto LABEL_18;
          }
        }
        if (sub_21A6B1420((uint64_t)a1, (std::string *)a2))
        {
          if (*(char *)(a2 + 23) < 0)
            sub_21A6CDFB4(&__str, *(void **)a2, *(_QWORD *)(a2 + 8));
          else
            __str = *(std::string *)a2;
          if (!sub_21A6B158C((uint64_t *)&__str, "WiFi.radios.[*].", 0))
          {
            v21 = sub_21A6B26A8((uint64_t)a1, 0);
            snprintf((char *)&__s, 0x10uLL, "%ld", v21);
            v22 = sub_21A6B158C((uint64_t *)&__str, "*", 0);
            std::string::replace(&__str, v22, 1uLL, (const std::string::value_type *)&__s);
          }
          v23 = sub_21A6B6CB4((uint64_t)a1, (uint64_t)&__str, (uint64_t)a3, a4);
        }
        else
        {
          if (*(char *)(a2 + 23) < 0)
            sub_21A6CDFB4(&__str, *(void **)a2, *(_QWORD *)(a2 + 8));
          else
            __str = *(std::string *)a2;
          if (!sub_21A6B158C((uint64_t *)&__str, "WiFi.radios.[*].", 0))
          {
            v24 = sub_21A6B26A8((uint64_t)a1, 0);
            snprintf(v48, 0x10uLL, "%ld", v24);
            v25 = sub_21A6B158C((uint64_t *)&__str, "*", 0);
            std::string::replace(&__str, v25, 1uLL, v48);
            std::string::basic_string(&__s, &__str, 5uLL, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v46);
            std::string::operator=(&__p, &__s);
            if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__s.__r_.__value_.__l.__data_);
          }
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            p_p = &__p;
          else
            p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
          if (sub_21A6BB08C((const char *)p_p) == 2003061875)
          {
            sub_21A6CE0F0(&__s, "legacywds");
            sub_21A6B3A38((unsigned __int8 *)&__p, (uint64_t)&__s, &__p);
            if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__s.__r_.__value_.__l.__data_);
          }
          if (sub_21A6B158C((uint64_t *)a2, "vaps.[*]", 0) != -1)
          {
            v9 = (*((uint64_t (**)(CFDictionaryRef *, CFTypeRef, uint64_t, _QWORD, std::string *))*a1 + 3))(a1, cf, a2, 0, &__p);
            if ((_DWORD)v9)
              goto LABEL_74;
          }
          v32 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
              ? &__p
              : (std::string *)__p.__r_.__value_.__r.__words[0];
          sub_21A693B94((const __CFString *)cf, (uint64_t)a3, (UInt8 *)v32, v27, v28, v29, v30, v31, v40);
          v9 = v33;
          if ((_DWORD)v33 != -5 && (_DWORD)v33 != -6727)
            goto LABEL_74;
          if ((_DWORD)a4 == 2)
          {
            v9 = sub_21A6B0208((uint64_t)a1, (std::string *)a2, a3);
            if (!(_DWORD)v9)
            {
              if (*a3)
              {
                if (*(char *)(a2 + 23) >= 0)
                  v39 = a2;
                else
                  v39 = *(_QWORD *)a2;
                v9 = sub_21A693A8C((const __CFAllocator *)*MEMORY[0x24BDBD240], a1[6], (uint64_t)"%ks=%O", v34, v35, v36, v37, v38, v39);
                CFRelease(*a3);
              }
              else
              {
                v9 = 0;
              }
            }
            goto LABEL_74;
          }
          v23 = sub_21A6B64FC(a1, a2, a3, 2);
        }
        v9 = v23;
LABEL_74:
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__str.__r_.__value_.__l.__data_);
      }
    }
  }
LABEL_18:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v45.__r_.__value_.__l.__data_);
  return v9;
}

void sub_21A6B6A2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  uint64_t v30;

  if (*(char *)(v30 - 73) < 0)
    operator delete(*(void **)(v30 - 96));
  if (a16 < 0)
    operator delete(__p);
  if (a24 < 0)
    operator delete(a19);
  if (a30 < 0)
    operator delete(a25);
  _Unwind_Resume(exception_object);
}

uint64_t sub_21A6B6AB4(int a1, std::string *__str, const __CFString *a3, _QWORD *a4, _BYTE *a5)
{
  uint64_t result;
  int v10;
  CFTypeID v11;
  CFTypeID TypeID;
  CFNumberRef v13;
  int v14;
  CFTypeID v15;
  const __CFString *v16;
  __int16 valuePtr;
  int v18;
  uint64_t v19;

  result = 4294967292;
  if (a4 && a5)
  {
    if (a3)
    {
      v19 = 0;
      v18 = 0;
      sub_21A6B0EE4(__str, (unsigned int *)&v18, 0);
      result = sub_21A6BB2AC(v10, __str, (_DWORD *)&v19 + 1, &v19);
      if (!(_DWORD)result)
      {
        v11 = CFGetTypeID(a3);
        result = 4294967286;
        switch(HIDWORD(v19))
        {
          case 1:
          case 0xB:
            TypeID = CFDataGetTypeID();
            goto LABEL_28;
          case 2:
            TypeID = CFStringGetTypeID();
            goto LABEL_28;
          case 3:
            goto LABEL_16;
          case 4:
            if (v11 != CFBooleanGetTypeID())
              goto LABEL_16;
            valuePtr = *MEMORY[0x24BDBD268] != (_QWORD)a3;
            v13 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], kCFNumberSInt16Type, &valuePtr);
            *a4 = v13;
            if (v13)
            {
              result = 0;
              goto LABEL_15;
            }
            result = 4294967293;
            break;
          case 5:
            if ((_DWORD)v19 == 8 && v11 == CFBooleanGetTypeID())
            {
              v14 = v18;
              v15 = CFNumberGetTypeID();
              result = sub_21A6F4F30(v14, a3, v15, a4);
              if (!(_DWORD)result)
LABEL_15:
                *a5 = 1;
            }
            else
            {
LABEL_16:
              TypeID = CFNumberGetTypeID();
LABEL_28:
              if (v11 == TypeID)
              {
LABEL_29:
                result = 0;
                *a4 = a3;
              }
              else
              {
LABEL_30:
                result = 4294967292;
              }
            }
            break;
          case 6:
            TypeID = CFBooleanGetTypeID();
            goto LABEL_28;
          case 7:
            if (v11 != CFStringGetTypeID())
              goto LABEL_30;
            v16 = CFSTR("0.0.0.0");
            goto LABEL_24;
          case 8:
            if (v11 != CFStringGetTypeID())
              goto LABEL_30;
            v16 = CFSTR("00:00:00:00:00:00");
            goto LABEL_24;
          case 9:
            goto LABEL_29;
          case 0xC:
            if (v11 != CFStringGetTypeID())
              goto LABEL_30;
            v16 = CFSTR("::");
LABEL_24:
            result = CFStringCompare(a3, v16, 0);
            if (result)
              goto LABEL_29;
            *a4 = &stru_24DD08368;
            return result;
          case 0xD:
            if (v11 == CFDictionaryGetTypeID())
              goto LABEL_29;
            TypeID = CFArrayGetTypeID();
            goto LABEL_28;
          default:
            return result;
        }
      }
    }
    else
    {
      result = 0;
      *a4 = 0;
      *a5 = 0;
    }
  }
  return result;
}

uint64_t sub_21A6B6CB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  const char *v8;
  int v9;
  uint64_t (*v10)(uint64_t, uint64_t, uint64_t, uint64_t);

  if (*(char *)(a2 + 23) >= 0)
    v8 = (const char *)a2;
  else
    v8 = *(const char **)a2;
  v9 = sub_21A6BB08C(v8);
  if (v9 > 1651722562)
  {
    if (v9 <= 1651725130)
    {
      if (v9 <= 1651724357)
      {
        if (v9 <= 1651723855)
        {
          if (v9 > 1651723636)
          {
            if (v9 == 1651723637)
            {
              v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 800);
              return v10(a1, a2, a3, a4);
            }
            if (v9 == 1651723853)
            {
              v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 432);
              return v10(a1, a2, a3, a4);
            }
          }
          else
          {
            if (v9 == 1651722563)
            {
              v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 160);
              return v10(a1, a2, a3, a4);
            }
            if (v9 == 1651722583)
            {
              v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 592);
              return v10(a1, a2, a3, a4);
            }
          }
          return 4294967292;
        }
        if (v9 <= 1651724337)
        {
          if (v9 == 1651723856)
          {
            v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 240);
            return v10(a1, a2, a3, a4);
          }
          if (v9 == 1651724337)
          {
            v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 256);
            return v10(a1, a2, a3, a4);
          }
          return 4294967292;
        }
        if (v9 == 1651724338)
        {
          v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 272);
          return v10(a1, a2, a3, a4);
        }
        if (v9 == 1651724355)
        {
          v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 304);
          return v10(a1, a2, a3, a4);
        }
        if (v9 != 1651724357)
          return 4294967292;
        v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 720);
        return v10(a1, a2, a3, a4);
      }
      if (v9 <= 1651724866)
      {
        if (v9 > 1651724370)
        {
          if (v9 == 1651724371)
          {
            v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 608);
            return v10(a1, a2, a3, a4);
          }
          if (v9 == 1651724373)
          {
            v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 48);
            return v10(a1, a2, a3, a4);
          }
        }
        else
        {
          if (v9 == 1651724358)
          {
            v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 952);
            return v10(a1, a2, a3, a4);
          }
          if (v9 == 1651724368)
          {
            v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 56);
            return v10(a1, a2, a3, a4);
          }
        }
        return 4294967292;
      }
      if (v9 <= 1651724876)
      {
        if (v9 == 1651724867)
        {
          v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 112);
          return v10(a1, a2, a3, a4);
        }
        if (v9 == 1651724870)
        {
          v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 480);
          return v10(a1, a2, a3, a4);
        }
        return 4294967292;
      }
      if (v9 == 1651724877)
      {
        v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 320);
        return v10(a1, a2, a3, a4);
      }
      if (v9 != 1651724878)
      {
        if (v9 == 1651724880)
        {
          v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 368);
          return v10(a1, a2, a3, a4);
        }
        return 4294967292;
      }
    }
    else
    {
      if (v9 <= 1651725650)
      {
        if (v9 <= 1651725391)
        {
          switch(v9)
          {
            case 1651725131:
              goto LABEL_102;
            case 1651725132:
            case 1651725135:
            case 1651725136:
            case 1651725137:
            case 1651725138:
              return 4294967292;
            case 1651725133:
              v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 96);
              return v10(a1, a2, a3, a4);
            case 1651725134:
              v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 336);
              return v10(a1, a2, a3, a4);
            case 1651725139:
              v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 560);
              return v10(a1, a2, a3, a4);
            default:
              if (v9 != 1651725143)
                return 4294967292;
              v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 352);
              break;
          }
          return v10(a1, a2, a3, a4);
        }
        if (v9 <= 1651725632)
        {
          if (v9 == 1651725392)
          {
            v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 208);
            return v10(a1, a2, a3, a4);
          }
          if (v9 == 1651725402)
          {
            v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 544);
            return v10(a1, a2, a3, a4);
          }
        }
        else
        {
          switch(v9)
          {
            case 1651725633:
              v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 176);
              return v10(a1, a2, a3, a4);
            case 1651725634:
              v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 736);
              return v10(a1, a2, a3, a4);
            case 1651725648:
              v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 840);
              return v10(a1, a2, a3, a4);
          }
        }
        return 4294967292;
      }
      if (v9 <= 1651726159)
      {
        if (v9 > 1651726149)
        {
          if (v9 == 1651726150)
          {
            v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 496);
            return v10(a1, a2, a3, a4);
          }
          if (v9 == 1651726157)
          {
            v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 288);
            return v10(a1, a2, a3, a4);
          }
        }
        else
        {
          if (v9 == 1651725651)
          {
            v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 968);
            return v10(a1, a2, a3, a4);
          }
          if (v9 == 1651726147)
          {
            v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 400);
            return v10(a1, a2, a3, a4);
          }
        }
        return 4294967292;
      }
      if (v9 <= 1651733075)
      {
        if (v9 == 1651726160)
        {
          v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 384);
          return v10(a1, a2, a3, a4);
        }
        if (v9 == 1651726165)
        {
          v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 984);
          return v10(a1, a2, a3, a4);
        }
        return 4294967292;
      }
      if (v9 == 1651733076)
      {
        v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 128);
        return v10(a1, a2, a3, a4);
      }
      if (v9 == 1918976882)
      {
LABEL_102:
        v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 64);
        return v10(a1, a2, a3, a4);
      }
      if (v9 != 1918979693)
        return 4294967292;
    }
    v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 80);
    return v10(a1, a2, a3, a4);
  }
  if (v9 <= 1651721067)
  {
    if (v9 > 1651720514)
    {
      if (v9 > 1651720788)
      {
        if (v9 <= 1651721024)
        {
          if (v9 == 1651720789)
          {
            v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 1000);
            return v10(a1, a2, a3, a4);
          }
          if (v9 == 1651720791)
          {
            v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 768);
            return v10(a1, a2, a3, a4);
          }
        }
        else
        {
          switch(v9)
          {
            case 1651721025:
              v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 1192);
              return v10(a1, a2, a3, a4);
            case 1651721027:
              v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 224);
              return v10(a1, a2, a3, a4);
            case 1651721040:
              v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 1224);
              return v10(a1, a2, a3, a4);
          }
        }
      }
      else if (v9 <= 1651720520)
      {
        if (v9 == 1651720515)
        {
          v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 144);
          return v10(a1, a2, a3, a4);
        }
        if (v9 == 1651720519)
        {
          v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 936);
          return v10(a1, a2, a3, a4);
        }
      }
      else
      {
        switch(v9)
        {
          case 1651720521:
            v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 920);
            return v10(a1, a2, a3, a4);
          case 1651720532:
            v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 448);
            return v10(a1, a2, a3, a4);
          case 1651720788:
            v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 1096);
            return v10(a1, a2, a3, a4);
        }
      }
      return 4294967292;
    }
    if (v9 > 1651717698)
    {
      if (v9 <= 1651717711)
      {
        if (v9 == 1651717699)
        {
          v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 1112);
          return v10(a1, a2, a3, a4);
        }
        if (v9 == 1651717709)
        {
          v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 1128);
          return v10(a1, a2, a3, a4);
        }
      }
      else
      {
        switch(v9)
        {
          case 1651717712:
            v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 1208);
            return v10(a1, a2, a3, a4);
          case 1651717715:
            v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 1144);
            return v10(a1, a2, a3, a4);
          case 1651718221:
            v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 816);
            return v10(a1, a2, a3, a4);
        }
      }
      return 4294967292;
    }
    if (v9 <= 1651717453)
    {
      if (v9 == 1651716685)
      {
        v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 904);
        return v10(a1, a2, a3, a4);
      }
      if (v9 == 1651717453)
      {
        v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 888);
        return v10(a1, a2, a3, a4);
      }
      return 4294967292;
    }
    if (v9 == 1651717454)
    {
      v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 856);
      return v10(a1, a2, a3, a4);
    }
    if (v9 == 1651717459)
    {
      v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 872);
      return v10(a1, a2, a3, a4);
    }
    if (v9 != 1651717697)
      return 4294967292;
    v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 1176);
    return v10(a1, a2, a3, a4);
  }
  if (v9 > 1651721804)
  {
    switch(v9)
    {
      case 1651722049:
        v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 512);
        return v10(a1, a2, a3, a4);
      case 1651722050:
      case 1651722054:
      case 1651722055:
      case 1651722056:
      case 1651722057:
      case 1651722058:
      case 1651722060:
      case 1651722063:
      case 1651722065:
      case 1651722066:
        return 4294967292;
      case 1651722051:
        v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 704);
        return v10(a1, a2, a3, a4);
      case 1651722052:
        v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 688);
        return v10(a1, a2, a3, a4);
      case 1651722053:
        v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 624);
        return v10(a1, a2, a3, a4);
      case 1651722059:
        v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 416);
        return v10(a1, a2, a3, a4);
      case 1651722061:
        v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 784);
        return v10(a1, a2, a3, a4);
      case 1651722062:
        v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 640);
        return v10(a1, a2, a3, a4);
      case 1651722064:
        v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 672);
        return v10(a1, a2, a3, a4);
      case 1651722067:
        v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 656);
        return v10(a1, a2, a3, a4);
      default:
        if (v9 == 1651721805)
        {
          v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 528);
        }
        else
        {
          if (v9 != 1651721811)
            return 4294967292;
          v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 464);
        }
        break;
    }
    return v10(a1, a2, a3, a4);
  }
  if (v9 > 1651721295)
  {
    if (v9 <= 1651721538)
    {
      if (v9 == 1651721296)
      {
        v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 32);
        return v10(a1, a2, a3, a4);
      }
      if (v9 == 1651721299)
      {
        v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 1064);
        return v10(a1, a2, a3, a4);
      }
    }
    else
    {
      switch(v9)
      {
        case 1651721539:
          v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 1016);
          return v10(a1, a2, a3, a4);
        case 1651721552:
          v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 1032);
          return v10(a1, a2, a3, a4);
        case 1651721797:
          v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 1160);
          return v10(a1, a2, a3, a4);
      }
    }
  }
  else if (v9 <= 1651721281)
  {
    if (v9 == 1651721068)
    {
      v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 1080);
      return v10(a1, a2, a3, a4);
    }
    if (v9 == 1651721281)
    {
      v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 576);
      return v10(a1, a2, a3, a4);
    }
  }
  else
  {
    switch(v9)
    {
      case 1651721282:
        v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 752);
        return v10(a1, a2, a3, a4);
      case 1651721289:
        v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 192);
        return v10(a1, a2, a3, a4);
      case 1651721294:
        v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 1048);
        return v10(a1, a2, a3, a4);
    }
  }
  return 4294967292;
}

uint64_t sub_21A6B76C4(int a1, int a2, const __CFString *a3, _QWORD *a4, _BYTE *a5)
{
  char *v9;
  uint64_t v10;
  std::string __p;
  _BYTE v13[5];

  v9 = sub_21A6711EC(a2, v13);
  sub_21A6CE0F0(&__p, v9);
  v10 = sub_21A6B6AB4(a1, &__p, a3, a4, a5);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v10;
}

void sub_21A6B7748(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL sub_21A6B7764(uint64_t a1, int a2)
{
  char *v3;
  char *v4;
  unint64_t v6;
  unint64_t v7;
  int v8;
  _BOOL8 result;

  v3 = *(char **)(a1 + 200);
  v4 = *(char **)(a1 + 208);
  if (v4 == v3)
  {
    sub_21A6AD6EC(a1, 0);
    v3 = *(char **)(a1 + 200);
    v4 = *(char **)(a1 + 208);
  }
  v6 = v4 - v3;
  if (v6 < 0xC)
    return 0;
  v7 = v6 / 0xC - 1;
  do
  {
    v8 = *(_DWORD *)v3;
    v3 += 12;
    result = v8 == a2;
  }
  while (v8 != a2 && v7-- != 0);
  return result;
}

uint64_t sub_21A6B77DC(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v5;
  CFNumberRef number;

  number = 0;
  v5 = sub_21A6B44B4(a1, a2, &number, a4);
  if (!(_DWORD)v5)
  {
    if (CFNumberGetValue(number, kCFNumberSInt32Type, a3))
      v5 = 0;
    else
      v5 = 4294960553;
  }
  if (number)
    CFRelease(number);
  return v5;
}

uint64_t sub_21A6B7840(uint64_t a1, uint64_t a2, __int16 a3, uint64_t a4)
{
  const __CFString *v7;
  const __CFString *v8;
  uint64_t v9;
  __int16 valuePtr;

  valuePtr = a3;
  v7 = (const __CFString *)CFNumberCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], kCFNumberSInt16Type, &valuePtr);
  if (!v7)
    return 4294960568;
  v8 = v7;
  v9 = sub_21A6B2DEC(a1, a2, v7, a4);
  CFRelease(v8);
  return v9;
}

uint64_t sub_21A6B78C4(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v5;
  CFNumberRef number;

  number = 0;
  v5 = sub_21A6B44B4(a1, a2, &number, a4);
  if (!(_DWORD)v5)
  {
    if (CFNumberGetValue(number, kCFNumberSInt16Type, a3))
      v5 = 0;
    else
      v5 = 4294960553;
  }
  if (number)
    CFRelease(number);
  return v5;
}

uint64_t sub_21A6B7928(uint64_t a1, int a2, void *a3, uint64_t a4)
{
  uint64_t v7;
  void *__p[2];
  char v10;
  char __s[5];

  sub_21A6711EC(a2, __s);
  sub_21A6CE0F0(__p, __s);
  v7 = sub_21A6B78C4(a1, (uint64_t)__p, a3, a4);
  if (v10 < 0)
    operator delete(__p[0]);
  return v7;
}

void sub_21A6B79A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_21A6B79C0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  const __CFString **v4;

  v4 = (const __CFString **)MEMORY[0x24BDBD270];
  if (!a3)
    v4 = (const __CFString **)MEMORY[0x24BDBD268];
  return sub_21A6B2DEC(a1, a2, *v4, a4);
}

uint64_t sub_21A6B79E0(uint64_t a1, uint64_t a2, BOOL *a3, uint64_t a4)
{
  uint64_t v5;
  CFBooleanRef BOOLean;

  BOOLean = 0;
  v5 = sub_21A6B44B4(a1, a2, &BOOLean, a4);
  if (!(_DWORD)v5)
    *a3 = CFBooleanGetValue(BOOLean) != 0;
  if (BOOLean)
    CFRelease(BOOLean);
  return v5;
}

uint64_t sub_21A6B7A3C(uint64_t a1, int a2, BOOL *a3, uint64_t a4)
{
  uint64_t v7;
  void *__p[2];
  char v10;
  char __s[5];

  sub_21A6711EC(a2, __s);
  sub_21A6CE0F0(__p, __s);
  v7 = sub_21A6B79E0(a1, (uint64_t)__p, a3, a4);
  if (v10 < 0)
    operator delete(__p[0]);
  return v7;
}

void sub_21A6B7AB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_21A6B7AD4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  const char *v7;
  const __CFString *v8;
  const __CFString *v9;
  uint64_t v10;

  if (*(char *)(a3 + 23) >= 0)
    v7 = (const char *)a3;
  else
    v7 = *(const char **)a3;
  v8 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x24BDBD240], v7, 0x8000100u);
  if (!v8)
    return 4294960568;
  v9 = v8;
  v10 = sub_21A6B2DEC(a1, a2, v8, a4);
  CFRelease(v9);
  return v10;
}

uint64_t sub_21A6B7B5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  CFTypeRef v6;
  CFTypeID v7;
  CFTypeID TypeID;
  const __CFString *v9;
  int valuePtr;
  void *v12;
  const char *v13;
  CFTypeRef cf;
  char __str[32];
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  v13 = 0;
  cf = 0;
  v12 = 0;
  v5 = sub_21A6B44B4(a1, a2, (CFMutableDictionaryRef *)&cf, a4);
  v6 = cf;
  if (!(_DWORD)v5 && cf)
  {
    v7 = CFGetTypeID(cf);
    TypeID = CFNumberGetTypeID();
    v9 = (const __CFString *)cf;
    if (v7 == TypeID)
    {
      valuePtr = 0;
      if (CFNumberGetValue((CFNumberRef)cf, kCFNumberSInt32Type, &valuePtr))
      {
        snprintf(__str, 0x20uLL, "%ld", valuePtr);
        if (cf)
        {
          CFRelease(cf);
          cf = 0;
        }
        v9 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x24BDBD240], __str, 0x8000100u);
        cf = v9;
        if (v9)
          goto LABEL_8;
        v5 = 4294967293;
      }
      else
      {
        v5 = 4294960553;
      }
LABEL_12:
      v6 = cf;
      goto LABEL_13;
    }
LABEL_8:
    v5 = sub_21A694C44(v9, &v13, (UInt8 **)&v12);
    if (!(_DWORD)v5)
      MEMORY[0x220747320](a3, v13);
    goto LABEL_12;
  }
LABEL_13:
  if (v6)
  {
    CFRelease(v6);
    cf = 0;
  }
  if (v12)
    free(v12);
  return v5;
}

uint64_t sub_21A6B7C9C(uint64_t a1, CFDataRef theData, CFTypeRef *a3)
{
  uint64_t result;
  const UInt8 *BytePtr;
  CFIndex Length;
  unint64_t v9;
  int v10;
  const __CFAllocator *v11;
  const __CFData *v12;
  CFIndex v13;
  void *v14;

  result = 4294960591;
  if (theData && a3)
  {
    BytePtr = CFDataGetBytePtr(theData);
    Length = CFDataGetLength(theData);
    *a3 = 0;
    if (BytePtr && (v9 = Length) != 0)
    {
      v13 = 0;
      v14 = 0;
      v10 = sub_21A695840((uint64_t)BytePtr, Length, &v14, (uLongf *)&v13);
      v11 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
      if (v10)
      {
        result = sub_21A692924((const __CFAllocator *)*MEMORY[0x24BDBD240], (uint64_t)BytePtr, v9, a3);
        if ((_DWORD)result)
          return result;
      }
      else
      {
        v12 = CFDataCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], (const UInt8 *)v14, v13);
        free(v14);
        if (!v12)
          return 4294960568;
        *a3 = CFPropertyListCreateWithData(v11, v12, 2uLL, 0, 0);
        CFRelease(v12);
        if (!*a3)
          return 4294960568;
      }
    }
    else
    {
      *a3 = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
    }
    result = 0;
    *(_BYTE *)(a1 + 373) = 1;
  }
  return result;
}

uint64_t sub_21A6B7DD0(uint64_t a1, uint64_t a2, CFTypeRef *a3)
{
  uint64_t v3;
  _BOOL4 v6;
  const __CFAllocator *v7;
  const __CFData *Data;
  const __CFData *v10;
  const Bytef *BytePtr;
  uLong Length;
  CFDataRef v13;
  CFTypeRef cf;
  CFIndex v15;
  void *v16;

  v15 = 0;
  v16 = 0;
  v3 = 4294960591;
  cf = 0;
  if (!a2 || !a3)
  {
LABEL_13:
    if (v16)
      free(v16);
    return v3;
  }
  v3 = sub_21A6BB67C(a1, &cf);
  if ((_DWORD)v3)
  {
LABEL_4:
    if (cf)
      CFRelease(cf);
    goto LABEL_13;
  }
  if (!cf)
  {
    v3 = 4294960569;
    goto LABEL_13;
  }
  if (*(_BYTE *)(a1 + 372))
    goto LABEL_10;
  if (sub_21A6AF0B4(a1, 1920159858))
  {
    CFDictionaryRemoveValue((CFMutableDictionaryRef)cf, CFSTR("profiles"));
    CFDictionaryRemoveValue((CFMutableDictionaryRef)cf, CFSTR("currentProfile"));
LABEL_10:
    v6 = sub_21A6AF0B4(a1, 1651534953);
    v7 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
    if (v6)
    {
      v3 = sub_21A692394((CFAllocatorRef)*MEMORY[0x24BDBD240], (const __CFString *)cf, a3);
    }
    else
    {
      Data = CFPropertyListCreateData((CFAllocatorRef)*MEMORY[0x24BDBD240], cf, kCFPropertyListXMLFormat_v1_0, 0, 0);
      if (Data)
      {
        v10 = Data;
        BytePtr = CFDataGetBytePtr(Data);
        Length = CFDataGetLength(v10);
        v3 = sub_21A695724(BytePtr, Length, &v16, (uLongf *)&v15);
        CFRelease(v10);
        if (!(_DWORD)v3)
        {
          v13 = CFDataCreate(v7, (const UInt8 *)v16, v15);
          *a3 = v13;
          if (v13)
            v3 = 0;
          else
            v3 = 4294960568;
        }
      }
      else
      {
        v3 = 4294960568;
      }
    }
    goto LABEL_4;
  }
  if (cf)
    CFRelease(cf);
  return 4294960576;
}

BOOL sub_21A6B7F50(uint64_t a1, int a2)
{
  int v4;

  v4 = 0;
  sub_21A6D4F00(a2, &v4);
  return !v4 || sub_21A6AF0B4(a1, v4);
}

BOOL sub_21A6B7FA0(CFDataRef theData, int a2)
{
  _BOOL8 result;
  const UInt8 *BytePtr;
  unint64_t Length;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;

  result = 0;
  if (theData && a2)
  {
    BytePtr = CFDataGetBytePtr(theData);
    Length = CFDataGetLength(theData);
    if (Length >= 4)
    {
      v7 = (Length >> 2) - 1;
      do
      {
        v8 = *(_DWORD *)BytePtr;
        BytePtr += 4;
        v9 = bswap32(v8);
        result = v9 == a2;
      }
      while (v9 != a2 && v7-- != 0);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

__CFArray *sub_21A6B801C(uint64_t a1)
{
  const __CFAllocator *v2;
  __CFArray *Mutable;
  CFTypeID v4;
  const UInt8 *BytePtr;
  unint64_t Length;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  BOOL v14;
  CFTypeRef cf;

  cf = 0;
  v2 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD690]);
  if (!sub_21A6AF29C(a1, 1717920116, &cf, 0))
  {
    if (!cf)
      return Mutable;
    v4 = CFGetTypeID(cf);
    if (v4 == CFDataGetTypeID())
    {
      BytePtr = CFDataGetBytePtr((CFDataRef)cf);
      Length = CFDataGetLength((CFDataRef)cf);
      if (Length >= 4)
      {
        v12 = (Length >> 2) - 1;
        do
        {
          v13 = *(_DWORD *)BytePtr;
          BytePtr += 4;
          if (sub_21A693A8C(v2, Mutable, (uint64_t)"%C", v7, v8, v9, v10, v11, bswap32(v13)))
            v14 = 1;
          else
            v14 = v12 == 0;
          --v12;
        }
        while (!v14);
      }
    }
  }
  if (cf)
    CFRelease(cf);
  return Mutable;
}

uint64_t sub_21A6B8120(uint64_t a1, CFMutableArrayRef theArray)
{
  CFIndex Count;
  CFIndex v5;
  const void **v6;
  const void **v7;
  const __CFString **v8;
  int v9;
  uint64_t v11;

  if (!theArray)
    return 4294967292;
  if (!*(_QWORD *)(a1 + 40))
    return 0;
  CFArrayRemoveAllValues(theArray);
  Count = CFDictionaryGetCount(*(CFDictionaryRef *)(a1 + 40));
  if (Count < 1)
    return 0;
  v5 = Count;
  v6 = (const void **)malloc_type_malloc(8 * Count, 0x80040B8603338uLL);
  if (!v6)
    return 0;
  v7 = v6;
  CFDictionaryGetKeysAndValues(*(CFDictionaryRef *)(a1 + 40), v6, 0);
  if (!*v7)
  {
LABEL_22:
    v11 = 0;
    goto LABEL_26;
  }
  v8 = (const __CFString **)v7;
  while (*v8)
  {
    v9 = sub_21A6B827C(*v8);
    if (v9 > 1936017003)
    {
      if (v9 == 1936017004 || v9 == 1953066341)
        goto LABEL_21;
      goto LABEL_20;
    }
    if (v9 == 1349676902)
    {
      if (!*(_BYTE *)(a1 + 372) && !sub_21A6B82DC(a1))
        goto LABEL_21;
      goto LABEL_20;
    }
    if (v9 != 1668573549)
    {
      if (!v9)
        break;
LABEL_20:
      CFArrayAppendValue(theArray, *v8);
    }
LABEL_21:
    ++v8;
    if (!--v5)
      goto LABEL_22;
  }
  v11 = 4294967291;
LABEL_26:
  free(v7);
  return v11;
}

const char *sub_21A6B827C(const __CFString *a1)
{
  const char *v1;
  void *v3;

  v3 = 0;
  if (!a1)
    return 0;
  if (sub_21A694D3C(a1, (char **)&v3))
    v1 = 0;
  else
    v1 = sub_21A6BB08C((const char *)v3);
  if (v3)
    free(v3);
  return v1;
}

BOOL sub_21A6B82DC(uint64_t a1)
{
  _BOOL8 result;

  result = sub_21A6AF0B4(a1, 1349676902);
  if (result)
  {
    result = sub_21A6AF0B4(a1, 1920159858);
    if (result)
      return sub_21A6BB85C(a1, 0) == 0;
  }
  return result;
}

uint64_t sub_21A6B8330(uint64_t a1, CFMutableDictionaryRef theDict)
{
  CFIndex Count;
  CFIndex v5;
  const void **v6;
  const void **v7;
  const __CFString **v8;
  const char *v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  const __CFAllocator *v30;
  CFTypeRef cf;
  _BYTE v32[16];
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  cf = 0;
  if (!theDict)
    return 4294967292;
  if (!*(_QWORD *)(a1 + 40))
    return 0;
  CFDictionaryRemoveAllValues(theDict);
  Count = CFDictionaryGetCount(*(CFDictionaryRef *)(a1 + 40));
  if (Count < 1)
    return 0;
  v5 = Count;
  v6 = (const void **)malloc_type_malloc(8 * Count, 0x80040B8603338uLL);
  if (!v6)
    return 4294967293;
  v7 = v6;
  CFDictionaryGetKeysAndValues(*(CFDictionaryRef *)(a1 + 40), v6, 0);
  if (!*v7)
  {
    v18 = 0;
    goto LABEL_36;
  }
  v30 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  v8 = (const __CFString **)v7;
  do
  {
    v32[0] = 0;
    if (!*v8)
    {
LABEL_35:
      v18 = 4294967291;
      goto LABEL_36;
    }
    v9 = sub_21A6B827C(*v8);
    v10 = (uint64_t)v9;
    if ((int)v9 <= 1936017003)
    {
      if ((_DWORD)v9 == 1349676902)
      {
        if (!*(_BYTE *)(a1 + 372) && !sub_21A6B82DC(a1))
          goto LABEL_26;
        goto LABEL_20;
      }
      if (!(_DWORD)v9)
        goto LABEL_35;
    }
    else if ((_DWORD)v9 == 1936017004 || (_DWORD)v9 == 1953066341)
    {
      goto LABEL_26;
    }
    if (!sub_21A6B7764(a1, (int)v9))
      goto LABEL_26;
LABEL_20:
    v12 = sub_21A6B5A34(a1, v10, &cf, v32);
    if ((_DWORD)v12)
      goto LABEL_30;
    v18 = sub_21A693A8C(v30, theDict, (uint64_t)"%kC=%O", v13, v14, v15, v16, v17, v10);
    if (v32[0])
    {
      if (cf)
        CFRelease(cf);
      cf = 0;
    }
    if ((_DWORD)v18)
      goto LABEL_36;
LABEL_26:
    ++v8;
    --v5;
  }
  while (v5);
  v18 = sub_21A72DD0C(v32, 0x10u);
  if (!(_DWORD)v18)
  {
    v18 = sub_21A693A8C(v30, theDict, (uint64_t)"%kC=%s", v19, v20, v21, v22, v23, 1818449523);
    if (!(_DWORD)v18)
    {
      v12 = sub_21A693A8C(v30, theDict, (uint64_t)"%kC=%i", v24, v25, v26, v27, v28, 1818449522);
LABEL_30:
      v18 = v12;
    }
  }
LABEL_36:
  free(v7);
  return v18;
}

uint64_t sub_21A6B8590(uint64_t result)
{
  *(_WORD *)(result + 372) = 0;
  return result;
}

uint64_t sub_21A6B8598(uint64_t a1)
{
  pthread_mutex_t *v2;
  __CFDictionary *v3;

  v2 = (pthread_mutex_t *)(a1 + 392);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 392));
  ++*(_DWORD *)(a1 + 456);
  v3 = *(__CFDictionary **)(a1 + 40);
  if (v3)
    CFDictionaryRemoveAllValues(v3);
  if (sub_21A6AF0B4(a1, 1349676902))
  {
    *(_WORD *)(a1 + 372) = 0;
    sub_21A6AF1F0(a1);
  }
  *(_BYTE *)(a1 + 385) = 0;
  --*(_DWORD *)(a1 + 456);
  pthread_mutex_unlock(v2);
  return 0;
}

void sub_21A6B861C(_Unwind_Exception *a1)
{
  pthread_mutex_t *v1;
  uint64_t v2;

  --*(_DWORD *)(v2 + 456);
  pthread_mutex_unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_21A6B8640(uint64_t a1)
{
  pthread_mutex_t *v2;
  uint64_t v3;
  const __CFAllocator *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  const void **v13;

  v11 = 0;
  v12 = 0;
  v2 = (pthread_mutex_t *)(a1 + 392);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 392));
  ++*(_DWORD *)(a1 + 456);
  v13 = 0;
  if (!*(_QWORD *)(a1 + 40))
  {
    v3 = 4294960591;
    goto LABEL_15;
  }
  if ((sub_21A6B8780(a1) & 1) != 0)
  {
    v3 = sub_21A695640(*(const void **)(a1 + 40), &v13);
    if ((_DWORD)v3)
      goto LABEL_13;
    if (!v13)
    {
      v3 = 4294960568;
      goto LABEL_15;
    }
    v4 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
    while (sub_21A6956DC((uint64_t *)v13, &v12, &v11))
    {
      v3 = sub_21A693A8C(v4, *(__CFArray **)(a1 + 32), (uint64_t)"%kO=%O", v5, v6, v7, v8, v9, v12);
      if ((_DWORD)v3)
        goto LABEL_13;
    }
    sub_21A6B8598(a1);
  }
  v3 = 0;
LABEL_13:
  if (v13)
    sub_21A6956D0(v13);
LABEL_15:
  --*(_DWORD *)(a1 + 456);
  pthread_mutex_unlock(v2);
  return v3;
}

void sub_21A6B8750(_Unwind_Exception *a1)
{
  pthread_mutex_t *v1;
  uint64_t v2;

  --*(_DWORD *)(v2 + 456);
  pthread_mutex_unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_21A6B8780(uint64_t a1)
{
  CFIndex Count;
  _BOOL8 v4;
  CFTypeRef cf;

  Count = CFDictionaryGetCount(*(CFDictionaryRef *)(a1 + 40));
  if (Count < 1)
    return 0;
  if (Count != 1 || *(_BYTE *)(a1 + 372) != 0)
    return 1;
  cf = 0;
  v4 = sub_21A6AF29C(a1, 1349676902, &cf, 1) == -5;
  if (cf)
    CFRelease(cf);
  return v4;
}

uint64_t sub_21A6B8808(uint64_t a1, _QWORD *a2)
{
  CFPropertyListRef DeepCopy;

  if (!a2)
    return 4294960591;
  DeepCopy = CFPropertyListCreateDeepCopy((CFAllocatorRef)*MEMORY[0x24BDBD240], *(CFPropertyListRef *)(a1 + 32), 2uLL);
  *a2 = DeepCopy;
  if (DeepCopy)
    return sub_21A693B5C((uint64_t)DeepCopy, *(CFDictionaryRef *)(a1 + 40));
  else
    return 4294960568;
}

uint64_t sub_21A6B8868(uint64_t a1, const __CFDictionary *a2, CFMutableDictionaryRef *a3)
{
  uint64_t v3;
  CFMutableDictionaryRef Mutable;
  CFIndex Count;
  CFIndex v9;
  size_t v10;
  const void **v11;
  const void **v12;
  const void **v13;
  const void **v14;
  uint64_t v15;
  const __CFString *v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v3 = 4294960591;
  if (a2 && a3)
  {
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
    *a3 = Mutable;
    if (!Mutable)
      return 4294967293;
    Count = CFDictionaryGetCount(a2);
    if (Count < 1)
      return 0;
    v9 = Count;
    v10 = 8 * Count;
    v11 = (const void **)malloc_type_malloc(8 * Count, 0x80040B8603338uLL);
    if (v11)
    {
      v12 = v11;
      v13 = (const void **)malloc_type_malloc(v10, 0x80040B8603338uLL);
      if (v13)
      {
        v14 = v13;
        CFDictionaryGetKeysAndValues(a2, v12, v13);
        v15 = 0;
        while (1)
        {
          v16 = (const __CFString *)v12[v15];
          if (!v16 || !v14[v15])
            break;
          v17 = sub_21A6B827C(v16);
          if ((_DWORD)v17 == 1466517097)
            goto LABEL_13;
          v3 = (uint64_t)v17;
          if (!(_DWORD)v17)
            goto LABEL_24;
          if (sub_21A6B7764(a1, (int)v17))
          {
LABEL_13:
            CFDictionarySetValue(*a3, v12[v15], v14[v15]);
          }
          else if (dword_2550EEFA8 <= 5000
                 && (dword_2550EEFA8 != -1 || sub_21A69876C((uint64_t)&dword_2550EEFA8, 0x1388u)))
          {
            sub_21A698FDC((uint64_t)&dword_2550EEFA8, (uint64_t)"ACPStatus BaseStation::_CopySupported(CFDictionaryRef, CFDictionaryRef *)", 5000, (uint64_t)"%s: skipping key: %@ value: %@ because it isn't supported.\n", v18, v19, v20, v21, (uint64_t)"ACPStatus BaseStation::_CopySupported(CFDictionaryRef, CFDictionaryRef *)");
          }
          if (v9 == ++v15)
          {
            v3 = 0;
            goto LABEL_24;
          }
        }
        v3 = 4294967291;
LABEL_24:
        free(v12);
      }
      else
      {
        v3 = 4294967293;
        v14 = v12;
      }
      free(v14);
    }
    else
    {
      return 4294967293;
    }
  }
  return v3;
}

uint64_t sub_21A6B8A54(uint64_t a1, CFMutableDictionaryRef *a2)
{
  uint64_t v4;
  CFTypeRef cf;

  cf = 0;
  if (!a2)
    return 4294960591;
  v4 = sub_21A6B8808(a1, &cf);
  if (!(_DWORD)v4)
  {
    if (!cf)
      return 4294967291;
    v4 = sub_21A6B8868(a1, (const __CFDictionary *)cf, a2);
  }
  if (cf)
    CFRelease(cf);
  return v4;
}

uint64_t sub_21A6B8AD4(uint64_t a1, CFMutableDictionaryRef *a2)
{
  const __CFDictionary *DeepCopy;
  const __CFDictionary *v5;
  uint64_t v6;

  if (!a2)
    return 4294960591;
  DeepCopy = (const __CFDictionary *)CFPropertyListCreateDeepCopy((CFAllocatorRef)*MEMORY[0x24BDBD240], *(CFPropertyListRef *)(a1 + 32), 2uLL);
  if (!DeepCopy)
    return 4294960568;
  v5 = DeepCopy;
  v6 = sub_21A6B8868(a1, DeepCopy, a2);
  CFRelease(v5);
  return v6;
}

uint64_t sub_21A6B8B50(uint64_t a1, _QWORD *a2)
{
  CFPropertyListRef DeepCopy;

  if (!a2)
    return 4294960591;
  DeepCopy = CFPropertyListCreateDeepCopy((CFAllocatorRef)*MEMORY[0x24BDBD240], *(CFPropertyListRef *)(a1 + 32), 2uLL);
  *a2 = DeepCopy;
  if (DeepCopy)
    return 0;
  else
    return 4294960568;
}

uint64_t sub_21A6B8BA4(uint64_t a1, const __CFDictionary *a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  const __CFData *Value;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v41;
  const __CFString *v42;
  int v43;
  int v44;
  unsigned int *v45;
  unsigned int *v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int v51;
  int v52;
  _BOOL8 v53;
  char v54;
  int v55;
  char v56;
  int v57;
  CFStringRef v58;
  CFStringRef v59;
  unsigned __int8 v60;
  const __CFDictionary *v61;
  uint64_t v62;
  const __CFData *v63;
  std::string::size_type size;
  int v65;
  const __CFAllocator *alloc;
  BOOL v67;
  std::string __p;
  void *v69[2];
  char v70;
  CFTypeRef v71;
  CFTypeRef cf;
  char cStr[8];
  uint64_t v74;

  v74 = *MEMORY[0x24BDAC8D0];
  v71 = 0;
  cf = 0;
  sub_21A6CE0F0(v69, "WiFi.radios.[*].");
  memset(&__p, 0, sizeof(__p));
  if (!a2)
  {
    v14 = 4294960591;
    goto LABEL_21;
  }
  if (!CFDictionaryGetValue(a2, CFSTR("APPLE-CONFIG")))
  {
    v14 = 4294960569;
    goto LABEL_21;
  }
  sub_21A6AC3F4(a1);
  sub_21A693B94((const __CFString *)a2, (uint64_t)&v71, (UInt8 *)"%kC", v8, v9, v10, v11, v12, 1937326416);
  v14 = v13;
  if ((_DWORD)v13)
    goto LABEL_21;
  if (!v71)
    goto LABEL_20;
  v14 = sub_21A6AF354(a1, 1937326416, (const __CFString *)v71, 2);
  if ((_DWORD)v14)
    goto LABEL_21;
  sub_21A693B94((const __CFString *)a2, (uint64_t)&v71, (UInt8 *)"%kC", v15, v16, v17, v18, v19, 1717907505);
  v14 = v20;
  if ((_DWORD)v20)
    goto LABEL_21;
  if (!v71)
    goto LABEL_20;
  v14 = sub_21A6AF354(a1, 1717907505, (const __CFString *)v71, 2);
  if ((_DWORD)v14)
    goto LABEL_21;
  sub_21A693B94((const __CFString *)a2, (uint64_t)&v71, (UInt8 *)"%kC", v21, v22, v23, v24, v25, 1937327724);
  v14 = v26;
  if ((_DWORD)v26)
    goto LABEL_21;
  if (!v71)
  {
LABEL_20:
    v14 = 4294967291;
    goto LABEL_21;
  }
  v14 = sub_21A6AF354(a1, 1937327724, (const __CFString *)v71, 2);
  if ((_DWORD)v14)
    goto LABEL_21;
  sub_21A693B94((const __CFString *)a2, (uint64_t)&v71, (UInt8 *)"%kC", v27, v28, v29, v30, v31, 1717920116);
  if (v32)
  {
    sub_21A6ACA60(a1, 1);
  }
  else
  {
    v14 = sub_21A6AF354(a1, 1717920116, (const __CFString *)v71, 2);
    if ((_DWORD)v14)
      goto LABEL_21;
  }
  Value = (const __CFData *)CFDictionaryGetValue(a2, CFSTR("secureProperties"));
  if (a4 && Value)
  {
    if (*(char *)(a4 + 23) < 0)
      v39 = *(_QWORD *)(a4 + 8);
    else
      v39 = *(unsigned __int8 *)(a4 + 23);
    if (!v39)
    {
      v14 = 4294967280;
      goto LABEL_21;
    }
    v14 = sub_21A6B9180((int)Value, (_QWORD *)a4, Value, &cf);
    if ((_DWORD)v14)
      goto LABEL_21;
  }
  v71 = 0;
  if (cf)
  {
    sub_21A693B94((const __CFString *)cf, (uint64_t)&v71, (UInt8 *)"%kC", v34, v35, v36, v37, v38, 1466517097);
    v42 = (const __CFString *)v71;
    v67 = v41 == 0 && v71 != 0;
    if (v67)
      v14 = 0;
    else
      v14 = v41;
    if (v71)
      goto LABEL_44;
  }
  else
  {
    v14 = 0;
    v67 = 0;
  }
  sub_21A693B94((const __CFString *)a2, (uint64_t)&v71, (UInt8 *)"%kC", v34, v35, v36, v37, v38, 1466517097);
  if (v43)
  {
    v44 = 0;
    goto LABEL_46;
  }
  v42 = (const __CFString *)v71;
LABEL_44:
  v14 = sub_21A6AF354(a1, 1466517097, v42, 2);
  if ((_DWORD)v14)
    goto LABEL_21;
  v44 = 1;
LABEL_46:
  v46 = *(unsigned int **)(a1 + 200);
  v45 = *(unsigned int **)(a1 + 208);
  if (v45 == v46)
  {
    sub_21A6AD6EC(a1, 0);
    v46 = *(unsigned int **)(a1 + 200);
    v45 = *(unsigned int **)(a1 + 208);
  }
  v47 = (char *)v45 - (char *)v46;
  if (v47 >= 0xC)
  {
    v48 = v47 / 0xC;
    alloc = (const __CFAllocator *)*MEMORY[0x24BDBD240];
    if (v48 <= 1)
      v49 = 1;
    else
      v49 = v48;
    while (1)
    {
      v51 = *v46;
      v46 += 3;
      v50 = v51;
      v52 = sub_21A6B27A8(v51);
      if (a3)
        v53 = sub_21A6B936C(a1, v50);
      else
        v53 = sub_21A6B9420(a1, v50);
      if ((_DWORD)v50 == 1466517097)
        v54 = v44;
      else
        v54 = 0;
      if ((v54 & 1) != 0 || !v53)
        goto LABEL_66;
      if ((int)v50 > 1937326415)
      {
        if ((_DWORD)v50 == 1937326416)
          goto LABEL_66;
        v55 = 1937327724;
      }
      else
      {
        if ((_DWORD)v50 == 1717907505)
          goto LABEL_66;
        v55 = 1717920116;
      }
      if ((_DWORD)v50 != v55)
      {
        if (!v44
          || (!cf ? (v56 = v52) : (v56 = 0),
              (v56 & 1) == 0
           && (cf ? (v57 = v52) : (v57 = 0), v57 != 1 || !(v67 | ((sub_21A6B9758(v53, v50) & 1) == 0)))))
        {
          if (v52)
          {
            sub_21A6B2D64((unsigned __int8 *)v69, v50, &__p);
          }
          else if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          {
            *__p.__r_.__value_.__l.__data_ = 0;
            __p.__r_.__value_.__l.__size_ = 0;
          }
          else
          {
            __p.__r_.__value_.__s.__data_[0] = 0;
            *((_BYTE *)&__p.__r_.__value_.__s + 23) = 0;
          }
          sub_21A6711EC(v50, cStr);
          v58 = CFStringCreateWithCString(alloc, cStr, 0x8000100u);
          v59 = v58;
          if (!v58)
          {
            v14 = 4294960554;
            break;
          }
          v60 = sub_21A6B9758((uint64_t)v58, v50);
          if ((v60 & (cf != 0)) != 0)
            v61 = (const __CFDictionary *)cf;
          else
            v61 = a2;
          v71 = CFDictionaryGetValue(v61, v59);
          CFRelease(v59);
          v63 = (const __CFData *)v71;
          if (v71)
          {
            size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              size = __p.__r_.__value_.__l.__size_;
            if (size)
            {
              v65 = sub_21A6B488C(v62, v50);
              if (v65)
              {
                v14 = sub_21A6B4940(a1, v50, v63, &v71);
                if ((_DWORD)v14)
                  break;
                v63 = (const __CFData *)v71;
              }
              v14 = sub_21A6B2DEC(a1, (uint64_t)&__p, (const __CFString *)v63, 2);
              if (v65)
                CFRelease(v71);
            }
            else
            {
              v14 = sub_21A6AF354(a1, v50, (const __CFString *)v71, 2);
            }
            if ((_DWORD)v14)
              break;
          }
        }
      }
LABEL_66:
      if (!--v49)
      {
        *(_BYTE *)(a1 + 193) = 1;
        v14 = sub_21A6ACA60(a1, 1);
        break;
      }
    }
  }
LABEL_21:
  if (cf)
    CFRelease(cf);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v70 < 0)
    operator delete(v69[0]);
  return v14;
}

void sub_21A6B9144(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a18 < 0)
    operator delete(__p);
  if (a24 < 0)
    operator delete(a19);
  _Unwind_Resume(exception_object);
}

uint64_t sub_21A6B9180(int a1, _QWORD *data, const __CFData *a3, _QWORD *a4)
{
  uint64_t v6;
  uint64_t v7;
  CFIndex Length;
  UInt8 *v9;
  UInt8 *v10;
  char *BytePtr;
  const __CFAllocator *v12;
  const __CFData *v13;
  const __CFData *v14;
  CFPropertyListRef v15;
  __n128 v17;
  unsigned __int8 md[20];
  CCCryptorRef cryptorRef[8];

  cryptorRef[7] = *(CCCryptorRef *)MEMORY[0x24BDAC8D0];
  if (*((char *)data + 23) < 0)
  {
    v6 = 4294960591;
    if (!a4)
      return v6;
    if (!a3)
      return v6;
    v7 = data[1];
    if (!v7)
      return v6;
    data = (_QWORD *)*data;
  }
  else
  {
    v6 = 4294960591;
    if (!a4)
      return v6;
    if (!a3)
      return v6;
    LODWORD(v7) = *((unsigned __int8 *)data + 23);
    if (!*((_BYTE *)data + 23))
      return v6;
  }
  CC_SHA1(data, v7, md);
  v17 = 0uLL;
  sub_21A6749E8(cryptorRef, md, &v17);
  Length = CFDataGetLength(a3);
  v9 = (UInt8 *)malloc_type_malloc(Length, 0x4EF403F0uLL);
  if (!v9)
    return 4294960568;
  v10 = v9;
  BytePtr = (char *)CFDataGetBytePtr(a3);
  sub_21A674A40(cryptorRef, BytePtr, Length, v10);
  sub_21A674C08((uint64_t)cryptorRef);
  v12 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  v13 = CFDataCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], v10, Length);
  if (v13)
  {
    v14 = v13;
    v15 = CFPropertyListCreateWithData(v12, v13, 0, 0, 0);
    if (v15)
      v6 = 0;
    else
      v6 = 4294967280;
    *a4 = v15;
    CFRelease(v14);
  }
  else
  {
    v6 = 4294960568;
  }
  free(v10);
  return v6;
}

void sub_21A6B92F4(uint64_t a1, _QWORD *a2, unint64_t *a3)
{
  if (*(_QWORD *)(a1 + 208) != *(_QWORD *)(a1 + 200))
  {
    if (!a2)
      goto LABEL_4;
    goto LABEL_3;
  }
  sub_21A6AD6EC(a1, 0);
  if (a2)
LABEL_3:
    *a2 = *(_QWORD *)(a1 + 200);
LABEL_4:
  if (a3)
    *a3 = (*(_QWORD *)(a1 + 208) - *(_QWORD *)(a1 + 200)) / 0xCuLL;
}

BOOL sub_21A6B936C(uint64_t a1, int a2)
{
  _BOOL8 result;
  int v4;

  v4 = 0;
  sub_21A6AD02C(a1, 1937326416, &v4, 0);
  result = 0;
  if (a2 <= 1464626794)
  {
    if (a2 != 1280077419 && a2 != 1346918739)
      return 1;
  }
  else if (a2 != 1464626795 && a2 != 1936017004)
  {
    if (a2 == 1937326416)
      return v4 == 0;
    return 1;
  }
  return result;
}

BOOL sub_21A6B9420(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v4;
  int v5;
  BOOL v6;
  uint64_t *v7;
  _BOOL8 result;
  uint64_t v9;
  int v10;
  unsigned __int16 v11;
  int v12;

  if (!qword_2550F4E00)
    return 1;
  v2 = *(_QWORD *)(qword_2550F4E00 + 8);
  if (!v2)
    return 1;
  v4 = qword_2550F4E00 + 8;
  do
  {
    v5 = *(_DWORD *)(v2 + 32);
    v6 = v5 < a2;
    if (v5 >= a2)
      v7 = (uint64_t *)v2;
    else
      v7 = (uint64_t *)(v2 + 8);
    if (!v6)
      v4 = v2;
    v2 = *v7;
  }
  while (*v7);
  if (v4 == qword_2550F4E00 + 8 || *(_DWORD *)(v4 + 32) > a2)
    return 1;
  v9 = *(_QWORD *)(v4 + 40);
  if (*(_BYTE *)(v9 + 24))
    return 0;
  if (*(_BYTE *)(v9 + 25))
    return 1;
  result = 1;
  if (a2 <= 1717907504)
  {
    if (a2 <= 1349676901)
    {
      if (a2 <= 1229213292)
      {
        if (a2 == 1095783250 || a2 == 1097098612)
          return 0;
        v10 = 1148808787;
      }
      else if (a2 > 1298223987)
      {
        if (a2 == 1298223988)
          return 0;
        v10 = 1346918739;
      }
      else
      {
        if (a2 == 1229213293)
          return 0;
        v10 = 1280077419;
      }
    }
    else if (a2 > 1684099955)
    {
      if (a2 > 1684558667)
      {
        if (a2 == 1684558668)
          return 0;
        v10 = 1684886388;
      }
      else
      {
        if (a2 == 1684099956)
          return 0;
        v10 = 1684362100;
      }
    }
    else if (a2 > 1464626794)
    {
      if (a2 == 1464626795)
        return 0;
      v10 = 1635078258;
    }
    else
    {
      if (a2 == 1349676902)
        return 0;
      v10 = 1381327990;
    }
    goto LABEL_61;
  }
  if (a2 <= 1918980945)
  {
    if (a2 > 1835090283)
    {
      if ((a2 - 1886547529) <= 0x20 && ((1 << (a2 - 73)) & 0x100000201) != 0
        || a2 == 1835090284)
      {
        return 0;
      }
      v10 = 1918980940;
    }
    else
    {
      if (a2 == 1717907505 || a2 == 1717920116)
        return 0;
      v10 = 1752641585;
    }
LABEL_61:
    if (a2 != v10)
      return result;
    return 0;
  }
  if (a2 > 1937326417)
  {
    if (a2 > 1937330257)
    {
      if (a2 == 1937330258)
        return 0;
      v11 = 20567;
    }
    else
    {
      if (a2 == 1937326418)
        return 0;
      v11 = 19538;
    }
    v10 = v11 | 0x73790000;
    goto LABEL_61;
  }
  if (a2 <= 1937006963)
  {
    if (a2 == 1918980946)
      return 0;
    v10 = 1936017004;
    goto LABEL_61;
  }
  if (a2 == 1937006964)
    return 0;
  if (a2 == 1937326416)
  {
    v12 = 0;
    sub_21A6AD02C(a1, 1937326416, &v12, 0);
    return v12 == 0;
  }
  return result;
}

uint64_t sub_21A6B9758(uint64_t a1, int a2)
{
  uint64_t result;
  int v3;
  unsigned __int16 v4;

  result = 1;
  if (a2 <= 1918981956)
  {
    if (a2 > 1885622358)
    {
      if (a2 <= 1918976881)
      {
        if (a2 == 1885622359)
          return result;
        v3 = 1885687895;
        goto LABEL_30;
      }
      if (a2 == 1918976882 || a2 == 1918980914)
        return result;
      v3 = 1918980965;
    }
    else
    {
      if (a2 <= 1718842223)
      {
        if (a2 == 1635077712)
          return result;
        v3 = 1682792803;
        goto LABEL_30;
      }
      if (a2 == 1718842224 || a2 == 1766026340)
        return result;
      v3 = 1836011607;
    }
LABEL_30:
    if (a2 != v3)
      return 0;
    return result;
  }
  if (a2 <= 1936611158)
  {
    if (a2 <= 1936609867)
    {
      if (a2 == 1918981957)
        return result;
      v4 = 17235;
    }
    else
    {
      if (a2 == 1936609868 || a2 == 1936609879)
        return result;
      v4 = 22348;
    }
    v3 = v4 | 0x736E0000;
    goto LABEL_30;
  }
  if (a2 > 1970500195)
  {
    if (a2 == 1970500196 || a2 == 2002929744)
      return result;
    v3 = 2002932304;
    goto LABEL_30;
  }
  if (a2 != 1936611159 && a2 != 1937330258)
  {
    v3 = 1937330263;
    goto LABEL_30;
  }
  return result;
}

void sub_21A6B9908(unint64_t *a1, unint64_t a2)
{
  unint64_t v2;
  BOOL v3;
  size_t v4;

  v2 = a1[1] - *a1;
  v3 = a2 >= v2;
  v4 = a2 - v2;
  if (v4 != 0 && v3)
  {
    sub_21A6CE228(a1, v4);
  }
  else if (!v3)
  {
    a1[1] = *a1 + a2;
  }
}

uint64_t sub_21A6B9930(uint64_t a1, CFDictionaryRef theDict, const __CFString *a3, int a4)
{
  CFIndex Count;
  CFIndex v8;
  const void **v9;
  uint64_t v10;
  uint64_t v11;
  char **v12;
  const __CFString *v13;
  char **v14;
  int v15;
  _BOOL4 v16;
  BOOL v17;
  _BOOL4 v18;
  int v19;
  _BYTE *v20;
  int64_t size;
  std::string *p_p;
  _BYTE *v23;
  std::string *v24;
  _BYTE *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  const __CFString *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _BOOL4 v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void **v66;
  const __CFString *v68;
  const void **v69;
  void **keys;
  CFMutableDictionaryRef valuePtr[2];
  char v73;
  const __CFString *v74;
  _BYTE v75[5];
  std::string __p;

  memset(&__p, 0, sizeof(__p));
  if (!theDict)
  {
    v10 = 4294967292;
    goto LABEL_114;
  }
  Count = CFDictionaryGetCount(theDict);
  v8 = Count;
  if (Count <= 0)
  {
    v10 = 0;
    goto LABEL_114;
  }
  keys = (void **)malloc_type_malloc(8 * Count, 0x80040B8603338uLL);
  if (!keys)
  {
    v10 = 4294967293;
    goto LABEL_114;
  }
  v9 = (const void **)malloc_type_malloc(8 * v8, 0x80040B8603338uLL);
  if (!v9)
  {
    v10 = 4294967293;
    v66 = keys;
    goto LABEL_113;
  }
  CFDictionaryGetKeysAndValues(theDict, (const void **)keys, v9);
  v68 = a3;
  v69 = v9;
  v10 = 0;
  v11 = 0;
  v12 = off_2550EEFE8;
  while (1)
  {
    v13 = (const __CFString *)keys[v11];
    if (!v13 || !v69[v11])
    {
      v10 = 4294967291;
      goto LABEL_112;
    }
    v14 = v12;
    v15 = sub_21A6B827C(v13);
    if (!v15)
      goto LABEL_112;
    if (a4 == 1 && !sub_21A6B9420(a1, v15))
      goto LABEL_92;
    v16 = sub_21A6B13CC(a1, v15);
    v17 = v16;
    if (v16)
    {
      LODWORD(valuePtr[0]) = 0;
      v10 = sub_21A6D4F00(v15, valuePtr);
      if ((_DWORD)v10)
        goto LABEL_112;
      if (LODWORD(valuePtr[0]) && !sub_21A6AF0B4(a1, (int)valuePtr[0]))
        goto LABEL_103;
      v10 = 0;
    }
    else
    {
      v18 = sub_21A6B7764(a1, v15);
      v19 = v15 == 1466517097 || v18;
      if (v19 != 1)
        goto LABEL_104;
    }
    v20 = sub_21A6711EC(v15, v75);
    MEMORY[0x220747320](&__p, v20);
    if (sub_21A6B27A8(v15))
    {
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        size = __p.__r_.__value_.__l.__size_;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      if (size >= 1)
      {
        v23 = (char *)p_p + size;
        v24 = p_p;
        do
        {
          v25 = memchr(v24, 46, size);
          if (!v25)
            break;
          if (*v25 == 46)
          {
            if (v25 != v23 && v25 - (_BYTE *)p_p != -1)
              goto LABEL_39;
            break;
          }
          v24 = (std::string *)(v25 + 1);
          size = v23 - (_BYTE *)v24;
        }
        while (v23 - (_BYTE *)v24 >= 1);
      }
      MEMORY[0x220747320](&__p, "WiFi.radios.[*].");
      sub_21A6B2D64((unsigned __int8 *)&__p, v15, &__p);
      if (dword_2550EEFA8 <= 8000 && (dword_2550EEFA8 != -1 || sub_21A69876C((uint64_t)&dword_2550EEFA8, 0x1F40u)))
        sub_21A698FDC((uint64_t)&dword_2550EEFA8, (uint64_t)"ACPStatus BaseStation::ImportFromDictionary(CFDictionaryRef, CFDictionaryRef, eImportChoice)", 8000, (uint64_t)"%s: Just created a path %s for a WiFi setting without one.\n", v26, v27, v28, v29, (uint64_t)"ACPStatus BaseStation::ImportFromDictionary(CFDictionaryRef, CFDictionaryRef, eImportChoice)");
    }
LABEL_39:
    v12 = v14;
    if (sub_21A6D4ED8(v15) == 6)
      break;
LABEL_44:
    if (!v17)
    {
      valuePtr[0] = 0;
      v10 = sub_21A6B0208(a1, &__p, valuePtr);
      if (!(_DWORD)v10)
      {
        if (valuePtr[0])
        {
          if (sub_21A6BA150(0, &__p))
          {
            if (!sub_21A6BABCC(a1, &__p, (const __CFString *)v69[v11]))
            {
              if (dword_2550EEFA8 <= 5000
                && (dword_2550EEFA8 != -1 || sub_21A69876C((uint64_t)&dword_2550EEFA8, 0x1388u)))
              {
                sub_21A698FDC((uint64_t)&dword_2550EEFA8, (uint64_t)"ACPStatus BaseStation::ImportFromDictionary(CFDictionaryRef, CFDictionaryRef, eImportChoice)", 5000, (uint64_t)"%s: skipping import of value \"%@\" for \"%s\" because it is invalid, reseting to default val: \"%@\".\n", v54, v55, v56, v57, (uint64_t)"ACPStatus BaseStation::ImportFromDictionary(CFDictionaryRef, CFDictionaryRef, eImportChoice)");
              }
              v10 = sub_21A6B2DEC(a1, (uint64_t)&__p, (const __CFString *)valuePtr[0], 0);
              CFRelease(valuePtr[0]);
              if ((_DWORD)v10)
                goto LABEL_112;
              goto LABEL_103;
            }
          }
          else if (CFEqual(valuePtr[0], v69[v11]))
          {
            if (dword_2550EEFA8 <= 8000 && (dword_2550EEFA8 != -1 || sub_21A69876C((uint64_t)&dword_2550EEFA8, 0x1F40u)))
              sub_21A698FDC((uint64_t)&dword_2550EEFA8, (uint64_t)"ACPStatus BaseStation::ImportFromDictionary(CFDictionaryRef, CFDictionaryRef, eImportChoice)", 8000, (uint64_t)"%s: skipping import of default value \"%@\" for \"%s\".\n", v62, v63, v64, v65, (uint64_t)"ACPStatus BaseStation::ImportFromDictionary(CFDictionaryRef, CFDictionaryRef, eImportChoice)");
            CFRelease(valuePtr[0]);
LABEL_103:
            v10 = 0;
            goto LABEL_104;
          }
          CFRelease(valuePtr[0]);
        }
      }
    }
    v35 = (const __CFString *)v69[v11];
    if (v15 != 1466517097)
    {
      v10 = sub_21A6B2DEC(a1, (uint64_t)&__p, (const __CFString *)v69[v11], 0);
      if (dword_2550EEFA8 <= 5000 && (dword_2550EEFA8 != -1 || sub_21A69876C((uint64_t)&dword_2550EEFA8, 0x1388u)))
        sub_21A698FDC((uint64_t)&dword_2550EEFA8, (uint64_t)"ACPStatus BaseStation::ImportFromDictionary(CFDictionaryRef, CFDictionaryRef, eImportChoice)", 5000, (uint64_t)"%s: Importing '%s' as: %@\n", v58, v59, v60, v61, (uint64_t)"ACPStatus BaseStation::ImportFromDictionary(CFDictionaryRef, CFDictionaryRef, eImportChoice)");
      if ((_DWORD)v10)
        goto LABEL_112;
LABEL_92:
      v12 = v14;
      goto LABEL_104;
    }
    if (CFDictionaryGetCount((CFDictionaryRef)v69[v11]))
    {
      v41 = 0;
      v74 = 0;
      do
      {
        sub_21A693B94(v35, (uint64_t)&v74, (UInt8 *)"%ks", v36, v37, v38, v39, v40, (uint64_t)v14[v41]);
        if (!v42)
        {
          sub_21A6CE0F0(valuePtr, v14[v41]);
          if (v73 < 0)
          {
            if (valuePtr[1] == (CFMutableDictionaryRef)6)
            {
              v49 = *(_DWORD *)valuePtr[0] != 1768186226 || *((_WORD *)valuePtr[0] + 2) != 29551;
              operator delete(valuePtr[0]);
              if (!v49)
              {
LABEL_65:
                v10 = sub_21A6B1660(a1, (const __CFString *)theDict, v68, v74, v43, v44, v45, v46);
                if ((_DWORD)v10)
                  goto LABEL_112;
                v10 = sub_21A6B3BAC(a1);
                goto LABEL_75;
              }
            }
            else
            {
              operator delete(valuePtr[0]);
            }
          }
          else if (v73 == 6 && LODWORD(valuePtr[0]) == 1768186226 && WORD2(valuePtr[0]) == 29551)
          {
            goto LABEL_65;
          }
          MEMORY[0x220747320](&__p, "WiFi.");
          sub_21A6CE0F0(valuePtr, v14[v41]);
          sub_21A6B3A38((unsigned __int8 *)&__p, (uint64_t)valuePtr, &__p);
          if (v73 < 0)
            operator delete(valuePtr[0]);
          if (dword_2550EEFA8 <= 8000 && (dword_2550EEFA8 != -1 || sub_21A69876C((uint64_t)&dword_2550EEFA8, 0x1F40u)))
            sub_21A698FDC((uint64_t)&dword_2550EEFA8, (uint64_t)"ACPStatus BaseStation::ImportFromDictionary(CFDictionaryRef, CFDictionaryRef, eImportChoice)", 8000, (uint64_t)"%s: Importing WiFi root property val: '%@' @ %s.\n", v50, v51, v52, v53, (uint64_t)"ACPStatus BaseStation::ImportFromDictionary(CFDictionaryRef, CFDictionaryRef, eImportChoice)");
          v10 = sub_21A6B2DEC(a1, (uint64_t)&__p, v74, 0);
          if ((_DWORD)v10)
            goto LABEL_112;
        }
LABEL_75:
        ++v41;
      }
      while (v41 != 4);
    }
LABEL_104:
    if (++v11 == v8)
    {
      v10 = sub_21A6AF770(a1);
      goto LABEL_112;
    }
  }
  LODWORD(valuePtr[0]) = 0;
  if (CFNumberGetValue((CFNumberRef)v69[v11], kCFNumberIntType, valuePtr))
  {
    v30 = valuePtr[0];
    if (v15 == 2002862934)
    {
      v30 = (uint64_t)valuePtr[0] & 0xFFFE7FFF;
      LODWORD(valuePtr[0]) &= 0xFFFE7FFF;
    }
    if (!sub_21A6B3968(a1, (uint64_t)&__p, v30, 1))
    {
      if (dword_2550EEFA8 <= 8000 && (dword_2550EEFA8 != -1 || sub_21A69876C((uint64_t)&dword_2550EEFA8, 0x1F40u)))
        sub_21A698FDC((uint64_t)&dword_2550EEFA8, (uint64_t)"ACPStatus BaseStation::ImportFromDictionary(CFDictionaryRef, CFDictionaryRef, eImportChoice)", 8000, (uint64_t)"%s: skipping %s because possible value (%u) isn't supported.\n", v31, v32, v33, v34, (uint64_t)"ACPStatus BaseStation::ImportFromDictionary(CFDictionaryRef, CFDictionaryRef, eImportChoice)");
      goto LABEL_104;
    }
    goto LABEL_44;
  }
  v10 = 4294967292;
LABEL_112:
  free(keys);
  v66 = (void **)v69;
LABEL_113:
  free(v66);
LABEL_114:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v10;
}

void sub_21A6BA0FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a30 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL sub_21A6BA150(int a1, std::string *__str)
{
  _BOOL8 result;
  int v3;
  unsigned __int16 v4;
  unsigned __int16 v5;
  int v6;
  int v7;
  uint64_t v8;
  unsigned __int16 v9;
  unsigned __int16 v10;
  unsigned __int16 v11;
  unsigned __int16 v12;
  unsigned __int16 v13;
  unsigned __int16 v14;
  int v15;

  v15 = 0;
  sub_21A6B0EE4(__str, (unsigned int *)&v15, 0);
  result = 0;
  if (v15 <= 1851868779)
  {
    if (v15 <= 1635078737)
    {
      if (v15 > 913337459)
      {
        if (v15 <= 1397572210)
        {
          if (v15 > 913601123)
          {
            if (v15 > 1146250610)
            {
              if (v15 != 1146250611)
                return v15 == 1163543366;
              return 1;
            }
            if (v15 == 913601124)
              return 1;
            v3 = 913730676;
          }
          else if (v15 > 913532258)
          {
            if (v15 == 913532259)
              return 1;
            v3 = 913532535;
          }
          else
          {
            if (v15 == 913337460)
              return 1;
            v3 = 913337712;
          }
        }
        else if (v15 <= 1633116525)
        {
          if (v15 > 1398097261)
          {
            if (v15 == 1398097262)
              return 1;
            v3 = 1398097521;
          }
          else
          {
            if (v15 == 1397572211)
              return 1;
            v3 = 1397572215;
          }
        }
        else if (v15 <= 1633899616)
        {
          if (v15 == 1633116526)
            return 1;
          v3 = 1633895790;
        }
        else
        {
          if (v15 == 1633899617 || v15 == 1635077710)
            return 1;
          v3 = 1635077712;
        }
      }
      else
      {
        if (v15 <= 911697527)
        {
          if (v15 <= 911230048)
          {
            if ((v15 - 911102769) >= 3 && (v15 - 910976631) >= 2)
            {
              v3 = 910975332;
              goto LABEL_188;
            }
            return 1;
          }
          if (v15 == 911230049 || v15 == 911230060)
            return 1;
          v12 = 24932;
          goto LABEL_131;
        }
        if (v15 <= 912356723)
        {
          if (v15 <= 911701092)
          {
            if (v15 == 911697528)
              return 1;
            v12 = 26487;
LABEL_131:
            v3 = v12 | 0x36570000;
            goto LABEL_188;
          }
          if (v15 == 911701093)
            return 1;
          v3 = 912353394;
        }
        else if (v15 <= 912550002)
        {
          if (v15 == 912356724)
            return 1;
          v3 = 912483943;
        }
        else
        {
          if (v15 == 912550003 || v15 == 912552815)
            return 1;
          v3 = 912684908;
        }
      }
LABEL_188:
      if (v15 != v3)
        return result;
      return 1;
    }
    if (v15 <= 1766026339)
    {
      if (v15 > 1718186596)
      {
        if (v15 <= 1735279981)
        {
          if (v15 <= 1735276852)
          {
            if (v15 == 1718186597)
              return 1;
            v3 = 1718842224;
            goto LABEL_188;
          }
          if (v15 == 1735276853)
            return 1;
          v5 = 16999;
        }
        else if (v15 <= 1735282022)
        {
          if (v15 == 1735279982)
            return 1;
          v5 = 19557;
        }
        else
        {
          if (v15 == 1735282023 || v15 == 1735283311)
            return 1;
          v5 = 21326;
        }
        v3 = v5 | 0x676E0000;
        goto LABEL_188;
      }
      if (v15 > 1684555117)
      {
        if (v15 > 1684557158)
        {
          if (v15 == 1684557159)
            return 1;
          v3 = 1685538412;
          goto LABEL_188;
        }
        if (v15 == 1684555118)
          return 1;
        v13 = 19557;
      }
      else
      {
        if (v15 <= 1684551988)
        {
          if (v15 == 1635078738)
            return 1;
          v3 = 1683440723;
          goto LABEL_188;
        }
        if (v15 == 1684551989)
          return 1;
        v13 = 16999;
      }
      v3 = v13 | 0x64680000;
      goto LABEL_188;
    }
    if (v15 <= 1836009795)
    {
      if (v15 > 1836007759)
      {
        if (v15 > 1836008264)
        {
          if (v15 == 1836008265)
            return 1;
          v14 = 17492;
        }
        else
        {
          if (v15 == 1836007760)
            return 1;
          v14 = 17219;
        }
      }
      else
      {
        if (v15 <= 1818317644)
        {
          if (v15 == 1766026340)
            return 1;
          v3 = 1818315088;
          goto LABEL_188;
        }
        if (v15 == 1818317645)
          return 1;
        v14 = 16708;
      }
    }
    else
    {
      if (v15 > 1836011587)
      {
        if (v15 > 1836012877)
        {
          if (v15 == 1836012878 || v15 == 1849970010)
            return 1;
          v3 = 1851867462;
          goto LABEL_188;
        }
        if ((v15 - 1836011588) > 0x13)
          return result;
        v6 = 1 << (v15 - 68);
        v7 = 525313;
        goto LABEL_78;
      }
      if (v15 == 1836009796 || v15 == 1836010822)
        return 1;
      v14 = 19792;
    }
    v3 = v14 | 0x6D6F0000;
    goto LABEL_188;
  }
  if (v15 <= 1918980718)
  {
    if (v15 > 1918976832)
    {
      if (v15 > 1918977643)
      {
        if (v15 > 1918979427)
        {
          if (v15 > 1918979648)
          {
            if (v15 == 1918979649)
              return 1;
            v4 = 20591;
          }
          else
          {
            if (v15 == 1918979428)
              return 1;
            v4 = 19829;
          }
        }
        else
        {
          if ((v15 - 1918978353) < 2 || v15 == 1918977644)
            return 1;
          v4 = 19284;
        }
      }
      else
      {
        if (v15 <= 1918977106)
        {
          v8 = (v15 - 1918976833);
          if (v8 <= 0x31 && (((1 << (v15 - 65)) & 0x2088000000001) != 0 || v8 == 40))
            return 1;
          return result;
        }
        if (v15 > 1918977344)
        {
          if (v15 == 1918977345)
            return 1;
          v4 = 17970;
        }
        else
        {
          if (v15 == 1918977107)
            return 1;
          v4 = 17509;
        }
      }
LABEL_187:
      v3 = v4 | 0x72610000;
      goto LABEL_188;
    }
    if (v15 > 1885684046)
    {
      if (v15 <= 1885688653)
      {
        if (v15 > 1885687894)
        {
          if (v15 == 1885687895)
            return 1;
          v11 = 21315;
        }
        else
        {
          if (v15 == 1885684047)
            return 1;
          v11 = 18756;
        }
      }
      else
      {
        if (v15 > 1886213216)
        {
          if (v15 == 1886213217 || v15 == 1918128974)
            return 1;
          v4 = 16757;
          goto LABEL_187;
        }
        if (v15 == 1885688654)
          return 1;
        v11 = 21838;
      }
LABEL_179:
      v3 = v11 | 0x70650000;
      goto LABEL_188;
    }
    if (v15 > 1885621570)
    {
      if (v15 > 1885623629)
      {
        if (v15 == 1885623630)
          return 1;
        v11 = 16707;
        goto LABEL_179;
      }
      if (v15 == 1885621571)
        return 1;
      v10 = 20567;
    }
    else if (v15 > 1885619819)
    {
      if (v15 == 1885619820)
        return 1;
      v10 = 18756;
    }
    else
    {
      if (v15 == 1851868780)
        return 1;
      v10 = 16722;
    }
    v3 = v10 | 0x70640000;
    goto LABEL_188;
  }
  if (v15 <= 2002863152)
  {
    if (v15 <= 1936488043)
    {
      if (v15 > 1918980979)
      {
        if ((v15 - 1918981954) <= 0xB && ((1 << (v15 - 66)) & 0x80B) != 0 || v15 == 1918980980)
          return 1;
        v4 = 21810;
      }
      else
      {
        if (v15 == 1918980719 || v15 == 1918980914)
          return 1;
        v4 = 21349;
      }
      goto LABEL_187;
    }
    if (v15 <= 1937329262)
    {
      if (v15 > 1937068113)
      {
        if (v15 == 1937068114)
          return 1;
        v3 = 1937326964;
      }
      else
      {
        if (v15 == 1936488044)
          return 1;
        v3 = 1936605510;
      }
      goto LABEL_188;
    }
    if (v15 <= 1953645422)
    {
      if (v15 == 1937329263)
        return 1;
      v3 = 1950434124;
      goto LABEL_188;
    }
    if (v15 == 1953645423 || v15 == 2002862916)
      return 1;
    v9 = 17238;
LABEL_141:
    v3 = v9 | 0x77610000;
    goto LABEL_188;
  }
  if (v15 > 2002929005)
  {
    if (v15 <= 2002932291)
    {
      if ((v15 - 2002929742) <= 7 && ((1 << (v15 - 78)) & 0x85) != 0)
        return 1;
      v3 = 2002929006;
    }
    else
    {
      if ((v15 - 2002932292) <= 0x11 && ((1 << (v15 - 68)) & 0x21001) != 0 || v15 == 2003060332)
        return 1;
      v3 = 2003061875;
    }
    goto LABEL_188;
  }
  if (v15 > 2002864493)
  {
    if (v15 == 2002864494 || v15 == 2002865741)
      return 1;
    v9 = 21316;
    goto LABEL_141;
  }
  if ((v15 - 2002863153) > 0x1D)
    return result;
  v6 = 1 << (v15 - 49);
  v7 = 537133063;
LABEL_78:
  if ((v6 & v7) != 0)
    return 1;
  return result;
}

BOOL sub_21A6BABCC(int a1, std::string *__str, const __CFString *a3)
{
  int v5;
  _BOOL8 result;
  CFTypeID v7;
  int Value;
  const __CFString *v9;
  int v10;
  int v11;
  uint64_t v12;

  v12 = 0;
  sub_21A6B0EE4(__str, (unsigned int *)&v12 + 1, 0);
  if (sub_21A6BB2AC(v5, __str, &v12, &v11))
    return 1;
  v7 = CFGetTypeID(a3);
  if (HIDWORD(v12) != 1970496070)
  {
    if (HIDWORD(v12) == 1853117270)
    {
      if (v7 == CFStringGetTypeID())
        return CFStringCompare(a3, &stru_24DD08368, 0) != kCFCompareEqualTo;
      return 1;
    }
    if ((_DWORD)v12 == 7)
    {
      if (v7 == CFStringGetTypeID())
      {
        v9 = CFSTR("0.0.0.0");
        goto LABEL_20;
      }
    }
    else if ((_DWORD)v12 == 12)
    {
      if (v7 == CFStringGetTypeID())
      {
        v9 = CFSTR("::");
        goto LABEL_20;
      }
    }
    else if ((_DWORD)v12 == 8 && v7 == CFStringGetTypeID())
    {
      v9 = CFSTR("00:00:00:00:00:00");
LABEL_20:
      if (CFStringCompare(a3, v9, 0) == kCFCompareEqualTo
        || CFStringCompare(a3, &stru_24DD08368, 0) == kCFCompareEqualTo)
      {
        return 0;
      }
    }
    return 1;
  }
  if (v7 != CFNumberGetTypeID())
    return 1;
  v10 = 0;
  Value = CFNumberGetValue((CFNumberRef)a3, kCFNumberSInt32Type, &v10);
  result = v10 != 0;
  if (!Value)
    return 1;
  return result;
}

BOOL sub_21A6BAD44(uint64_t a1, const void *a2)
{
  const __CFBoolean *v2;
  const __CFBoolean *v3;
  _BOOL8 v4;

  v2 = (const __CFBoolean *)sub_21A6BAD88(a1, a2);
  if (!v2)
    return 0;
  v3 = v2;
  v4 = CFBooleanGetValue(v2) != 0;
  CFRelease(v3);
  return v4;
}

const void *sub_21A6BAD88(uint64_t a1, const void *a2)
{
  int v4;
  const void *v5;
  CFDictionaryRef v6;
  const __CFArray *Value;
  int v9;
  CFDictionaryRef theDict;

  theDict = 0;
  if (!a2)
    return 0;
  v9 = 0;
  v4 = sub_21A6AF29C(a1, 1937329234, (CFTypeRef *)&theDict, 0);
  v5 = 0;
  v6 = theDict;
  if (!v4 && theDict)
  {
    if (sub_21A6AD02C(a1, 1937330789, &v9, 0)
      || (Value = (const __CFArray *)CFDictionaryGetValue(theDict, CFSTR("regions"))) == 0)
    {
      v5 = 0;
    }
    else
    {
      v5 = sub_21A6B36C0((int)Value, Value, v9, a2);
    }
    v6 = theDict;
  }
  if (v6)
    CFRelease(v6);
  return v5;
}

uint64_t sub_21A6BAE54(uint64_t a1, uint64_t a2, int *a3)
{
  const char *v6;
  unsigned int v7;
  uint64_t v8;
  int v9;
  int v10;
  void *__p[2];
  char v13;
  std::string __dst;
  int v15;

  if (*(char *)(a2 + 23) >= 0)
    v6 = (const char *)a2;
  else
    v6 = *(const char **)a2;
  v7 = sub_21A6BB08C(v6);
  v8 = 4294967292;
  if (!a3 || !v7)
    return v8;
  if (v7 == 1398097521)
  {
    v9 = 604800;
LABEL_12:
    *a3 = v9;
    return 0;
  }
  if (v7 != 1918979445)
  {
    v9 = 0;
    goto LABEL_12;
  }
  v15 = 0;
  if (*(char *)(a2 + 23) < 0)
    sub_21A6CDFB4(&__dst, *(void **)a2, *(_QWORD *)(a2 + 8));
  else
    __dst = *(std::string *)a2;
  sub_21A6CE0F0(__p, "raMd");
  sub_21A6B3A38((unsigned __int8 *)&__dst, (uint64_t)__p, &__dst);
  if (v13 < 0)
    operator delete(__p[0]);
  v8 = sub_21A6B77DC(a1, (uint64_t)&__dst, &v15, 0);
  if (!(_DWORD)v8)
  {
    if ((v15 - 4) > 6)
      v10 = 2;
    else
      v10 = dword_21A73F158[v15 - 4];
    *a3 = v10;
  }
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  if (!(_DWORD)v8)
    return 0;
  return v8;
}

void sub_21A6BAF9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_21A6BAFD4(uint64_t a1, char *a2)
{
  uint64_t v4;
  uint64_t v5;
  void *__p[2];
  char v8;
  CFTypeRef cf;

  cf = 0;
  sub_21A6CE0F0(__p, a2);
  v4 = sub_21A6B44B4(a1, (uint64_t)__p, (CFMutableDictionaryRef *)&cf, 0);
  v5 = v4;
  if (v8 < 0)
  {
    operator delete(__p[0]);
    if ((_DWORD)v5)
      goto LABEL_3;
  }
  else if ((_DWORD)v4)
  {
    goto LABEL_3;
  }
  v5 = sub_21A6B40BC(a1, a2, (const __CFBoolean *)cf, 0, 0);
LABEL_3:
  if (cf)
    CFRelease(cf);
  return v5;
}

void sub_21A6BB070(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

const char *sub_21A6BB08C(const char *a1)
{
  const char *v1;
  uint64_t v2;
  unsigned __int8 *p_p;
  unsigned __int8 *v4;
  unsigned __int8 *v5;
  char *v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  int v9;
  int64_t v10;
  size_t v12;
  void *__p;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;

  v1 = a1;
  v16 = 0;
  __p = 0;
  v14 = 0;
  v15 = 0;
  if (!a1)
    return v1;
  MEMORY[0x220747320](&__p, a1);
  v2 = HIBYTE(v15);
  p_p = (unsigned __int8 *)__p;
  if (v15 < 0)
    v2 = v14;
  else
    p_p = (unsigned __int8 *)&__p;
  if (v2)
  {
    v4 = &p_p[v2];
    v5 = p_p;
    v6 = (char *)&p_p[v2];
    do
    {
      v7 = v5;
      v8 = v5;
      while (1)
      {
        v9 = *v8++;
        if (v9 == 46)
          break;
        v7 = v8;
        if (v8 == v4)
        {
          v7 = (unsigned __int8 *)v6;
          goto LABEL_12;
        }
      }
      v5 = v7 + 1;
      v6 = (char *)v7;
    }
    while (v8 != v4);
LABEL_12:
    if (v7 != v4)
    {
      v10 = v7 - p_p;
      if (v10 != -1)
      {
        if (v2 + ~v10 != 4)
          goto LABEL_15;
LABEL_19:
        v12 = strlen(v1);
        sub_21A671214((char *)&v1[v12 - 4], 4uLL, &v16);
        v1 = (const char *)v16;
        if ((v15 & 0x8000000000000000) == 0)
          return v1;
        goto LABEL_16;
      }
    }
  }
  if (strlen(v1) == 4)
    goto LABEL_19;
LABEL_15:
  v1 = 0;
  if (v15 < 0)
LABEL_16:
    operator delete(__p);
  return v1;
}

void sub_21A6BB1B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_21A6BB1CC(uint64_t a1, uint64_t a2, BOOL *a3)
{
  uint64_t v6;
  uint64_t v7;
  CFTypeRef cf2;
  CFTypeRef cf1;

  cf2 = 0;
  cf1 = 0;
  if (!a3)
    return 4294967292;
  *a3 = 0;
  v6 = sub_21A6B44B4(a1, a2, (CFMutableDictionaryRef *)&cf1, 1);
  if ((_DWORD)v6 == -5)
  {
    v7 = 0;
LABEL_10:
    if (cf1)
    {
      CFRelease(cf1);
      cf1 = 0;
    }
    goto LABEL_12;
  }
  v7 = v6;
  if ((_DWORD)v6)
    goto LABEL_10;
  if (cf1)
  {
    v7 = sub_21A6B44B4(a1, a2, (CFMutableDictionaryRef *)&cf2, 2);
    if (!(_DWORD)v7)
    {
      if (cf2)
      {
        v7 = 0;
        *a3 = CFEqual(cf1, cf2) == 0;
      }
      else
      {
        v7 = 4294967291;
      }
    }
    goto LABEL_10;
  }
  v7 = 4294967291;
LABEL_12:
  if (cf2)
    CFRelease(cf2);
  return v7;
}

uint64_t sub_21A6BB2AC(int a1, std::string *__str, _DWORD *a3, _DWORD *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  BOOL v14;
  uint64_t *v15;
  BOOL v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  std::string *v23;
  std::string *v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  std::string *v28;
  uint64_t *v29;
  int v30;

  if (!qword_2550F4E00)
    return 4294960578;
  v30 = 0;
  sub_21A6B0EE4(__str, (unsigned int *)&v30, 0);
  *a4 = 0;
  if (!v30)
  {
    *a3 = 9;
    if (dword_2550EEFA8 <= 5000)
    {
      if (dword_2550EEFA8 != -1 || (result = sub_21A69876C((uint64_t)&dword_2550EEFA8, 0x1388u), (_DWORD)result))
      {
        if ((__str->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v24 = __str;
        else
          v24 = (std::string *)__str->__r_.__value_.__r.__words[0];
        sub_21A698FDC((uint64_t)&dword_2550EEFA8, (uint64_t)"ACPStatus BaseStation::GetPropertyTypeInfo(const std::string &, ACPPropertyType &, BSUIType &) const", 5000, (uint64_t)"Property in path: %s ***ASSUMED*** to be kACPPropertyTypeCustom\n", v7, v8, v9, v10, (uint64_t)v24);
        return 0;
      }
      return result;
    }
    return 0;
  }
  v11 = *(_QWORD *)(qword_2550F4E00 + 8);
  if (v11)
  {
    v12 = qword_2550F4E00 + 8;
    do
    {
      v13 = *(_DWORD *)(v11 + 32);
      v14 = v13 < v30;
      if (v13 >= v30)
        v15 = (uint64_t *)v11;
      else
        v15 = (uint64_t *)(v11 + 8);
      if (!v14)
        v12 = v11;
      v11 = *v15;
    }
    while (*v15);
    if (v12 != qword_2550F4E00 + 8 && v30 >= *(_DWORD *)(v12 + 32))
    {
      result = 0;
      v26 = *(_QWORD *)(v12 + 40);
      v27 = *(_DWORD *)(v26 + 8);
      LODWORD(v26) = *(_DWORD *)(v26 + 12);
      *a3 = v27;
      *a4 = v26;
      return result;
    }
  }
  v17 = dword_2550EEFA8 > 5000 || v30 == 1918979378 || v30 == 1937327219;
  if (!v17 && (dword_2550EEFA8 != -1 || sub_21A69876C((uint64_t)&dword_2550EEFA8, 0x1388u)))
  {
    if ((__str->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v28 = __str;
    else
      v28 = (std::string *)__str->__r_.__value_.__r.__words[0];
    sub_21A698FDC((uint64_t)&dword_2550EEFA8, (uint64_t)"ACPStatus BaseStation::GetPropertyTypeInfo(const std::string &, ACPPropertyType &, BSUIType &) const", 5000, (uint64_t)"Property in path: %s NOT in _propertyMap\n", v7, v8, v9, v10, (uint64_t)v28);
  }
  v29 = 0;
  result = sub_21A671008(v30, &v29);
  if (!(_DWORD)result)
  {
    v25 = *((unsigned int *)v29 + 1);
    *a3 = v25;
    if (dword_2550EEFA8 <= 5000)
    {
      result = 0;
      if (v30 != 1918979378 && v30 != 1937327219)
      {
        if (dword_2550EEFA8 == -1)
        {
          result = sub_21A69876C((uint64_t)&dword_2550EEFA8, 0x1388u);
          if (!(_DWORD)result)
            return result;
          v25 = *a3;
        }
        sub_21A698FDC((uint64_t)&dword_2550EEFA8, (uint64_t)"ACPStatus BaseStation::GetPropertyTypeInfo(const std::string &, ACPPropertyType &, BSUIType &) const", 5000, (uint64_t)"...but found it in ACP Property Map, type: %d\n", v19, v20, v21, v22, v25);
        return 0;
      }
      return result;
    }
    return 0;
  }
  if ((_DWORD)result != -5)
    return result;
  *a3 = 9;
  if (dword_2550EEFA8 > 5000)
    return 0;
  if (dword_2550EEFA8 != -1 || (result = sub_21A69876C((uint64_t)&dword_2550EEFA8, 0x1388u), (_DWORD)result))
  {
    if ((__str->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v23 = __str;
    else
      v23 = (std::string *)__str->__r_.__value_.__r.__words[0];
    sub_21A698FDC((uint64_t)&dword_2550EEFA8, (uint64_t)"ACPStatus BaseStation::GetPropertyTypeInfo(const std::string &, ACPPropertyType &, BSUIType &) const", 5000, (uint64_t)"...and not found in ACP Property Map... so ***ASSUMED*** to be type: kACPPropertyTypeCustom\n", v19, v20, v21, v22, (uint64_t)v23);
    return 0;
  }
  return result;
}

char *sub_21A6BB568(char *__s)
{
  const char *v1;
  size_t v2;

  if (!qword_2550F4DF8)
  {
    v1 = __s;
    if ((__s[23] & 0x80000000) == 0 || (v1 = *(const char **)__s) != 0)
    {
      v2 = strlen(v1);
      qword_2550F4DF8 = (uint64_t)malloc_type_malloc(v2 + 1, 0x1972F8C4uLL);
      __s = strncpy((char *)qword_2550F4DF8, v1, v2);
      *(_BYTE *)(qword_2550F4DF8 + v2) = 0;
    }
  }
  return __s;
}

BOOL sub_21A6BB5DC(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  int v10;
  BOOL v12;
  BOOL v13;
  _BOOL8 v14;

  v2 = a1[23];
  if ((v2 & 0x80u) == 0)
    v3 = a1[23];
  else
    v3 = *((_QWORD *)a1 + 1);
  v4 = a2[23];
  v5 = (char)v4;
  if ((v4 & 0x80u) != 0)
    v4 = *((_QWORD *)a2 + 1);
  if (v3 != v4)
    return 0;
  if (v5 < 0)
    a2 = *(unsigned __int8 **)a2;
  if ((v2 & 0x80) != 0)
    return memcmp(*(const void **)a1, a2, *((_QWORD *)a1 + 1)) == 0;
  if (!a1[23])
    return 1;
  v6 = v2 - 1;
  do
  {
    v8 = *a1++;
    v7 = v8;
    v10 = *a2++;
    v9 = v10;
    v12 = v6-- != 0;
    v13 = v7 == v9;
    v14 = v7 == v9;
  }
  while (v13 && v12);
  return v14;
}

uint64_t sub_21A6BB67C(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  CFPropertyListRef DeepCopy;
  CFPropertyListRef propertyList;

  propertyList = 0;
  if (!a2)
    return 4294967292;
  v3 = sub_21A6AF29C(a1, 1349676902, &propertyList, 0);
  if (!(_DWORD)v3)
  {
    DeepCopy = CFPropertyListCreateDeepCopy((CFAllocatorRef)*MEMORY[0x24BDBD240], propertyList, 2uLL);
    if (DeepCopy)
    {
      v3 = 0;
      *a2 = DeepCopy;
    }
    else
    {
      v3 = 4294960568;
    }
  }
  if (propertyList)
    CFRelease(propertyList);
  return v3;
}

uint64_t sub_21A6BB708(uint64_t a1, const __CFDictionary *a2)
{
  char *v4;
  char *v5;
  unint64_t v6;
  unint64_t v8;
  const __CFAllocator *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  CFStringRef v13;
  CFStringRef v14;
  const __CFString *Value;
  char v16[8];
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  if (!a2)
    return 4294960591;
  v5 = *(char **)(a1 + 200);
  v4 = *(char **)(a1 + 208);
  if (v4 == v5)
  {
    sub_21A6AD6EC(a1, 0);
    v5 = *(char **)(a1 + 200);
    v4 = *(char **)(a1 + 208);
  }
  v6 = v4 - v5;
  if (v6 < 0xC)
    return 4294960551;
  v8 = v6 / 0xC;
  v9 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  if (v8 <= 1)
    v10 = 1;
  else
    v10 = v8;
  while (1)
  {
    v12 = *(_DWORD *)v5;
    v5 += 12;
    v11 = v12;
    if (v12 != 1349676902)
      break;
LABEL_14:
    if (!--v10)
      return 0;
  }
  sub_21A6711EC(v11, v16);
  v13 = CFStringCreateWithCString(v9, v16, 0x8000100u);
  if (v13)
  {
    v14 = v13;
    Value = (const __CFString *)CFDictionaryGetValue(a2, v13);
    CFRelease(v14);
    if (Value)
      sub_21A6AF354(a1, v11, Value, 0);
    goto LABEL_14;
  }
  return 4294960554;
}

uint64_t sub_21A6BB85C(uint64_t a1, CFTypeRef *a2)
{
  uint64_t v4;
  const void *Value;
  CFTypeRef cf;

  cf = 0;
  v4 = sub_21A6BB67C(a1, &cf);
  if (!(_DWORD)v4)
  {
    if (!cf)
      return 4294960551;
    if (sub_21A6AF0B4(a1, 1920159858))
    {
      Value = CFDictionaryGetValue((CFDictionaryRef)cf, CFSTR("restoreProfile"));
      if (Value)
      {
        v4 = 0;
        if (a2)
          *a2 = CFRetain(Value);
      }
      else
      {
        v4 = 4294960569;
      }
    }
    else
    {
      v4 = 4294960561;
    }
  }
  if (cf)
    CFRelease(cf);
  return v4;
}

uint64_t sub_21A6BB914(uint64_t a1)
{
  uint64_t v2;
  CFTypeRef v3;
  CFTypeRef cf;

  cf = 0;
  v2 = sub_21A6BB85C(a1, &cf);
  v3 = cf;
  if (!(_DWORD)v2 && cf)
  {
    v2 = sub_21A6BB708(a1, (const __CFDictionary *)cf);
    v3 = cf;
  }
  if (v3)
    CFRelease(v3);
  return v2;
}

uint64_t sub_21A6BB974(uint64_t a1, const __CFArray **a2)
{
  uint64_t v4;
  const __CFArray *v5;

  if (!sub_21A6BB9F4(a1))
    return 4294960569;
  v4 = *(_QWORD *)(a1 + 104);
  if (!v4)
    return 4294960569;
  if (!a2)
    return 4294960591;
  v5 = sub_21A6CFC08(*(const __CFDictionary **)(a1 + 40), *(const __CFString **)(*(_QWORD *)(*(_QWORD *)(a1 + 72)+ (((unint64_t)(v4 + *(_QWORD *)(a1 + 96) - 1) >> 6) & 0x3FFFFFFFFFFFFF8))+ 8 * ((v4 + *(_QWORD *)(a1 + 96) - 1) & 0x1FF)));
  *a2 = v5;
  if (v5)
    return 0;
  else
    return 4294960569;
}

BOOL sub_21A6BB9F4(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 104);
  return v1
      && CFEqual(*(CFTypeRef *)(*(_QWORD *)(*(_QWORD *)(a1 + 72)+ (((unint64_t)(v1 + *(_QWORD *)(a1 + 96) - 1) >> 6) & 0x3FFFFFFFFFFFFF8))+ 8 * ((v1 + *(_QWORD *)(a1 + 96) - 1) & 0x1FF)), *(CFTypeRef *)(a1 + 40)) == 0;
}

uint64_t sub_21A6BBA4C(uint64_t a1)
{
  const void *v1;
  CFPropertyListRef DeepCopy;

  v1 = *(const void **)(a1 + 40);
  if (!v1)
    return 4294960591;
  DeepCopy = CFPropertyListCreateDeepCopy((CFAllocatorRef)*MEMORY[0x24BDBD240], v1, 2uLL);
  if (!DeepCopy)
    return 4294960568;
  sub_21A6CE364((_QWORD *)(a1 + 64), &DeepCopy);
  return 0;
}

uint64_t sub_21A6BBAB4(uint64_t a1, int a2)
{
  const void *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(const void **)(a1 + 40);
  if (!v3)
    return 4294960591;
  v4 = *(_QWORD *)(a1 + 104);
  if (!v4)
    return 4294960569;
  if (a2)
  {
    CFRelease(v3);
    v5 = *(_QWORD *)(a1 + 104) - 1;
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 72)
                                                 + (((unint64_t)(v5 + *(_QWORD *)(a1 + 96)) >> 6) & 0x3FFFFFFFFFFFFF8))
                                     + 8 * ((v5 + *(_QWORD *)(a1 + 96)) & 0x1FF));
    *(_BYTE *)(a1 + 384) = 0;
  }
  else
  {
    CFRelease(*(CFTypeRef *)(*(_QWORD *)(*(_QWORD *)(a1 + 72)
                                       + (((unint64_t)(v4 + *(_QWORD *)(a1 + 96) - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                           + 8 * ((v4 + *(_QWORD *)(a1 + 96) - 1) & 0x1FF)));
    v5 = *(_QWORD *)(a1 + 104) - 1;
  }
  *(_QWORD *)(a1 + 104) = v5;
  sub_21A6CEB8C((_QWORD *)(a1 + 64), 1);
  return 0;
}

BOOL sub_21A6BBB70(uint64_t a1, uint64_t a2, uint64_t a3, int a4, unint64_t *a5)
{
  if ((a4 - 1) > 1)
    return sub_21A6BBFA8(a1, a2, a3, a5, 0);
  else
    return sub_21A6BBB9C(a3, a4, a5, 0);
}

BOOL sub_21A6BBB9C(uint64_t a1, int a2, unint64_t *a3, char a4)
{
  int v4;
  char *v5;
  unint64_t v6;
  size_t v9;
  void *v10;
  unint64_t v11;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  unint64_t v16;
  char *v17;
  size_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  size_t v23;
  int64_t v24;
  _BYTE *v25;
  _BYTE *v26;
  size_t v27;
  size_t v28;
  char *v29;
  char *v30;
  char *v31;
  size_t v32;
  uint64_t v34;
  _BYTE v35[88];
  __int128 __src;
  uint64_t v37;

  v37 = *MEMORY[0x24BDAC8D0];
  v4 = *(char *)(a1 + 23);
  if (v4 >= 0)
    v5 = (char *)a1;
  else
    v5 = *(char **)a1;
  if (v4 >= 0)
    v6 = *(unsigned __int8 *)(a1 + 23);
  else
    v6 = *(_QWORD *)(a1 + 8);
  if (!v6)
    return v6;
  if (a2 == 2)
    v9 = 13;
  else
    v9 = 5;
  if (v6 == v9)
  {
    v10 = (void *)*a3;
    v11 = a3[1] - *a3;
    if (v6 <= v11)
    {
      if (v6 < v11)
        a3[1] = (unint64_t)v10 + v6;
    }
    else
    {
      sub_21A6CE228(a3, v6 - v11);
      v10 = (void *)*a3;
    }
    v17 = v5;
    v18 = v6;
    goto LABEL_26;
  }
  v34 = 0;
  v13 = 10;
  if (a2 == 2)
    v13 = 26;
  if (v6 == v13)
  {
    if (strspn(v5, "0123456789abcdefABCDEF") == v6)
    {
      if (v6 == 10)
        v14 = 5;
      else
        v14 = 13;
      v15 = (_BYTE *)*a3;
      v16 = a3[1] - *a3;
      if (v14 <= v16)
      {
        if (v14 < v16)
          a3[1] = (unint64_t)&v15[v14];
      }
      else
      {
        sub_21A6CE228(a3, v14 - v16);
        v15 = (_BYTE *)*a3;
      }
      v21 = sub_21A6A281C(v5, v6, v14, v15, &v34);
LABEL_67:
      if (!v21)
        return v34 == v14;
      return 0;
    }
    if (a2 != 2 || v6 != 15)
      goto LABEL_36;
    goto LABEL_33;
  }
  v19 = 7;
  if (a2 == 2)
    v19 = 15;
  if (v6 == v19)
  {
LABEL_33:
    if (*v5 == 34 && v5[v6 - 1] == 34)
    {
      sub_21A6B9908(a3, v6 - 2);
      v10 = (void *)*a3;
      v17 = v5 + 1;
      v18 = v6 - 2;
LABEL_26:
      memcpy(v10, v17, v18);
      return 1;
    }
  }
LABEL_36:
  v20 = 11;
  if (a2 == 2)
    v20 = 27;
  if (v6 == v20 && *v5 == 36 && strspn(v5 + 1, "0123456789abcdefABCDEF") == v6 - 1)
  {
    if (v6 == 11)
      v14 = 5;
    else
      v14 = 13;
    sub_21A6B9908(a3, v14);
    v21 = sub_21A6A281C(v5 + 1, v6 - 1, v14, (_BYTE *)*a3, &v34);
    goto LABEL_67;
  }
  v22 = 12;
  if (a2 == 2)
    v22 = 28;
  if (v6 == v22 && *v5 == 48 && (v5[1] | 0x20) == 0x78)
  {
    v23 = strspn(v5 + 2, "0123456789abcdefABCDEF");
    if (v23 == v6 - 2)
    {
      v24 = v23;
      if (v6 == 12)
        v14 = 5;
      else
        v14 = 13;
      sub_21A6B9908(a3, v14);
      v21 = sub_21A6A281C(v5 + 2, v24, v14, (_BYTE *)*a3, &v34);
      goto LABEL_67;
    }
  }
  v26 = (_BYTE *)*a3;
  v25 = (_BYTE *)a3[1];
  if ((a4 & 1) != 0)
  {
    if (v25 != v26)
    {
      v6 = 0;
      a3[1] = (unint64_t)v26;
      return v6;
    }
    return 0;
  }
  v27 = v25 - v26;
  if (v9 <= v27)
  {
    if (v9 < v27)
      a3[1] = (unint64_t)&v26[v9];
  }
  else
  {
    sub_21A6CE228(a3, v9 - v27);
    v26 = (_BYTE *)*a3;
  }
  v28 = strlen(v5);
  v29 = (char *)malloc_type_malloc(v28 + 17, 0x7CA645C9uLL);
  v6 = v29 != 0;
  if (v29)
  {
    v30 = v29;
    v31 = strcpy(v29, v5);
    strcpy(&v30[strlen(v31)], "\x16\xEB\xAD\x57\x0F\xF4\xE3\xDE\x7Dtr\xE8\xD2\xAB\xA6\xA7");
    sub_21A69C778((uint64_t)v35);
    v32 = strlen(v30);
    sub_21A69C78C((uint64_t)v35, v30, v32);
    sub_21A69C794(&__src, (uint64_t)v35);
    sub_21A69C78C((uint64_t)v35, (char *)&__src, 0x10uLL);
    sub_21A69C794(&__src, (uint64_t)v35);
    sub_21A69C78C((uint64_t)v35, (char *)&__src, 0x10uLL);
    sub_21A69C794(&__src, (uint64_t)v35);
    memcpy(v26, &__src, v9);
    free(v30);
  }
  return v6;
}

BOOL sub_21A6BBFA8(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4, char *a5)
{
  _BOOL8 v9;
  void *__p[2];
  char v12;
  std::string __dst;
  void *v14[2];
  uint64_t v15;

  v14[0] = 0;
  v14[1] = 0;
  v15 = 0;
  if (*(char *)(a2 + 23) < 0)
    sub_21A6CDFB4(&__dst, *(void **)a2, *(_QWORD *)(a2 + 8));
  else
    __dst = *(std::string *)a2;
  sub_21A6CE0F0(__p, "raNm");
  sub_21A6B3A38((unsigned __int8 *)&__dst, (uint64_t)__p, &__dst);
  if (v12 < 0)
    operator delete(__p[0]);
  sub_21A6B7B5C(a1, (uint64_t)&__dst, (uint64_t)v14, 0);
  v9 = sub_21A6BC0E4(a3, v14, a4, a5);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  if (SHIBYTE(v15) < 0)
    operator delete(v14[0]);
  return v9;
}

void sub_21A6BC094(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL sub_21A6BC0E4(uint64_t a1, void **a2, unint64_t *a3, char *a4)
{
  int v6;
  char *v7;
  uint64_t v8;
  char *v10;
  int v11;
  int v12;
  unint64_t v13;
  _BYTE *v14;
  unint64_t v15;
  int v16;
  size_t v17;
  unint64_t v18;
  void **v19;
  _BOOL8 result;
  char v21;
  uint64_t v22;

  v22 = 0;
  v6 = *(char *)(a1 + 23);
  if (v6 >= 0)
    v7 = (char *)a1;
  else
    v7 = *(char **)a1;
  if (v6 >= 0)
    v8 = *(unsigned __int8 *)(a1 + 23);
  else
    v8 = *(_QWORD *)(a1 + 8);
  if ((unint64_t)(v8 - 8) > 0x37)
  {
    if (v8 == 64 && strspn(v7, "0123456789abcdefABCDEF") == 64)
    {
      v14 = (_BYTE *)*a3;
      v15 = a3[1] - *a3;
      if (v15 > 0x1F)
      {
        if (v15 != 32)
          a3[1] = (unint64_t)(v14 + 32);
      }
      else
      {
        sub_21A6CE228(a3, 32 - v15);
        v14 = (_BYTE *)*a3;
      }
      if (!sub_21A6A281C(v7, 64, 32, v14, &v22))
      {
        v21 = 0;
        result = v22 == 32;
        if (!a4)
          return result;
        goto LABEL_32;
      }
    }
LABEL_31:
    result = 0;
    v21 = 0;
    if (!a4)
      return result;
    goto LABEL_32;
  }
  v10 = v7;
  do
  {
    v12 = *v10++;
    v11 = v12;
  }
  while ((v12 - 127) > 0xFFFFFFA0);
  if (v11)
    goto LABEL_31;
  v13 = a3[1] - *a3;
  if (v13 > 0x1F)
  {
    if (v13 != 32)
      a3[1] = *a3 + 32;
  }
  else
  {
    sub_21A6CE228(a3, 32 - v13);
  }
  v16 = *((char *)a2 + 23);
  if (v16 < 0)
  {
    v19 = a2;
    a2 = (void **)*a2;
    v18 = (unint64_t)v19[1];
    if (v18 >= 0x20)
      v17 = 32;
    else
      v17 = v18;
  }
  else if ((v16 & 0xE0) != 0)
  {
    v17 = 32;
  }
  else
  {
    v17 = *((unsigned __int8 *)a2 + 23);
  }
  sub_21A6A7A18((uint64_t)v7, v8, a2, v17, (_OWORD *)*a3);
  result = 1;
  v21 = 1;
  if (a4)
LABEL_32:
    *a4 = v21;
  return result;
}

uint64_t sub_21A6BC27C(uint64_t a1, int a2)
{
  int v2;
  uint64_t v4;
  char *v5;
  int v6;
  char *v8;
  int v9;

  v2 = *(_DWORD *)(a1 + 260);
  if (v2 == 1 || v2 == 4)
  {
    if (a2 == 5)
      return 1;
    v4 = 0;
    v5 = &byte_21A73F068;
    while (v4 != 36)
    {
      v6 = *v5;
      v5 += 5;
      ++v4;
      if (v6 == a2)
        return byte_21A73F062[5 * v4];
    }
  }
  else
  {
    if (a2 == 5)
      return 1;
    v4 = 0;
    v8 = &byte_21A73F069;
    while (v4 != 36)
    {
      v9 = *v8;
      v8 += 5;
      ++v4;
      if (v9 == a2)
        return byte_21A73F062[5 * v4];
    }
  }
  return 37;
}

uint64_t sub_21A6BC30C(uint64_t a1, unsigned int a2, _DWORD *a3, _DWORD *a4)
{
  int v4;
  BOOL v5;
  char *v6;
  char *v7;
  char *v8;
  char *v9;
  char *v10;
  char *v11;
  uint64_t result;
  int v13;

  if (a2 > 0x25)
    return 4294960586;
  v4 = *(_DWORD *)(a1 + 260);
  v5 = v4 == 1 || v4 == 4;
  v6 = &byte_21A73F062[5 * a2];
  v7 = v6 - 2;
  v8 = v6 - 4;
  v9 = v6 - 1;
  v10 = v6 - 3;
  if (v5)
  {
    v9 = v7;
    v11 = v8;
  }
  else
  {
    v11 = v10;
  }
  result = 4294960561;
  if ((*v9 & 0x80000000) == 0)
  {
    v13 = *v11;
    if ((v13 & 0x80000000) == 0)
    {
      result = 0;
      *a4 = *v9;
      *a3 = v13;
    }
  }
  return result;
}

uint64_t sub_21A6BC380(uint64_t a1, _BYTE *a2, BOOL *a3, uint64_t a4)
{
  int v4;
  uint64_t v7;
  uint64_t v8;
  const __CFArray *Value;
  const __CFString *v11;
  CFIndex Count;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  CFIndex v18;
  uint64_t i;
  uint64_t v20;
  char v21;
  CFTypeRef cf;
  int v23;

  v4 = a4;
  v23 = 0;
  cf = 0;
  v7 = sub_21A6AF29C(a1, 1466517097, &cf, a4);
  v8 = v7;
  if ((v4 != 1 || (_DWORD)v7 != -5) && !(_DWORD)v7)
  {
    Value = (const __CFArray *)CFDictionaryGetValue((CFDictionaryRef)cf, CFSTR("radios"));
    if (Value)
    {
      v11 = (const __CFString *)Value;
      Count = CFArrayGetCount(Value);
      if (Count < 1)
        goto LABEL_18;
      v18 = Count;
      for (i = 0; i != v18; ++i)
      {
        sub_21A693B94(v11, (uint64_t)&v23, (UInt8 *)"[*].%kO:int", v13, v14, v15, v16, v17, i);
        if ((_DWORD)v20)
        {
          v8 = v20;
          goto LABEL_4;
        }
        v21 = v23;
        if (v23)
          break;
        v8 = 0;
      }
      *a2 = 1;
      if (a3)
      {
        v8 = 0;
        *a3 = (v21 & 2) != 0;
      }
      else
      {
LABEL_18:
        v8 = 0;
      }
    }
    else
    {
      v8 = 4294967291;
    }
  }
LABEL_4:
  if (cf)
    CFRelease(cf);
  return v8;
}

uint64_t sub_21A6BC4A8(uint64_t a1, CFArrayRef theArray)
{
  const __CFArray *Value;
  CFIndex Count;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  CFIndex v9;
  uint64_t v10;
  int v11;
  CFDictionaryRef theDict;
  int v15;

  Value = theArray;
  v15 = 0;
  theDict = 0;
  if (!theArray)
  {
    if (!sub_21A6AF0B4(a1, 1935819842))
      return 0;
    if (sub_21A6AF29C(a1, 1466517097, (CFTypeRef *)&theDict, 0))
      goto LABEL_11;
    Value = (const __CFArray *)CFDictionaryGetValue(theDict, CFSTR("radios"));
    if (!Value)
      goto LABEL_11;
  }
  Count = CFArrayGetCount(Value);
  if (Count >= 2)
  {
    v9 = Count;
    v10 = 0;
    while (1)
    {
      sub_21A693B94((const __CFString *)Value, (uint64_t)&v15, (UInt8 *)"[*].%kO:int", v4, v5, v6, v7, v8, v10);
      if (!v11 && (v15 & 0x70) != 0)
        break;
      if (v9 == ++v10)
        goto LABEL_11;
    }
  }
  else
  {
LABEL_11:
    v10 = 0;
  }
  if (theDict)
    CFRelease(theDict);
  return v10;
}

BOOL sub_21A6BC5A8(uint64_t a1)
{
  uint64_t v2;
  _BOOL8 v3;
  std::string __p;
  BOOL v6;
  _BYTE v7[17];
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v6 = 0;
  memset(&__p, 0, sizeof(__p));
  if (!sub_21A6AF0B4(a1, 1198748750))
    return 0;
  v2 = sub_21A6D69EC(v7, 0x11uLL);
  MEMORY[0x220747320](&__p, v2);
  sub_21A6B2D64((unsigned __int8 *)&__p, 1651722053, &__p);
  sub_21A6B79E0(a1, (uint64_t)&__p, &v6, 0);
  v3 = v6;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v3;
}

void sub_21A6BC678(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL sub_21A6BC694(uint64_t a1, uint64_t a2)
{
  char v4;
  uint64_t v5;
  int64_t size;
  std::string *v7;
  _BYTE *v8;
  std::string *v9;
  _BYTE *v10;
  std::string::size_type v11;
  _BOOL8 v12;
  BOOL v13;
  void *__p[2];
  char v16;
  BOOL v17;
  std::string v18;
  char __str[16];
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  if (!sub_21A6AF0B4(a1, 1935819842))
    return 0;
  memset(&v18, 0, sizeof(v18));
  v17 = 0;
  if (sub_21A6B262C(a1, 0) != 2)
    return 0;
  v4 = 0;
  v5 = 0;
  while (1)
  {
    MEMORY[0x220747320](&v18, "WiFi.radios.[*].");
    snprintf(__str, 0x10uLL, "%ld", v5);
    if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v18.__r_.__value_.__r.__words[2]);
    else
      size = v18.__r_.__value_.__l.__size_;
    if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v7 = &v18;
    else
      v7 = (std::string *)v18.__r_.__value_.__r.__words[0];
    v8 = (char *)v7 + size;
    if (size >= 1)
    {
      v9 = v7;
      do
      {
        v10 = memchr(v9, 42, size);
        if (!v10)
          break;
        if (*v10 == 42)
          goto LABEL_16;
        v9 = (std::string *)(v10 + 1);
        size = v8 - (_BYTE *)v9;
      }
      while (v8 - (_BYTE *)v9 > 0);
    }
    v10 = v8;
LABEL_16:
    if (v10 == v8)
      v11 = -1;
    else
      v11 = v10 - (_BYTE *)v7;
    std::string::replace(&v18, v11, 1uLL, __str);
    sub_21A6CE0F0(__p, "raCA");
    sub_21A6B3A38((unsigned __int8 *)&v18, (uint64_t)__p, &v18);
    if (v16 < 0)
      operator delete(__p[0]);
    if (sub_21A6B79E0(a1, (uint64_t)&v18, &v17, a2))
      break;
    v12 = !v17;
    v13 = v12 | v4;
    v4 = 1;
    v5 = 1;
    if (v13)
      goto LABEL_27;
  }
  v12 = 0;
LABEL_27:
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v18.__r_.__value_.__l.__data_);
  return v12;
}

void sub_21A6BC870(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_21A6BC8AC(uint64_t a1, uint64_t a2)
{
  const char *v4;
  int v5;
  int v6;
  _BOOL4 v7;
  _BOOL4 v8;
  BOOL v9;
  unsigned __int8 v10;
  std::string::size_type size;
  uint64_t v12;
  int v13;
  BOOL v14;
  unsigned __int8 v15;
  BOOL v16;
  _BOOL4 v17;
  _BOOL4 v18;
  int v20;
  unsigned int v21;
  int v22;
  int v23;
  unsigned __int16 v24;
  BOOL v25;
  unsigned __int16 v26;
  int v27;
  BOOL v28;
  int v29;
  BOOL v30;
  BOOL v31;
  unsigned __int8 v32;
  int v33;
  BOOL v34;
  int v35;
  int v36;
  BOOL v37;
  int v38;
  int v39;
  BOOL v40;
  char v41;
  int v42;
  unsigned __int8 v45;
  _BOOL4 v46;
  unsigned __int8 v47;
  __int16 v48;
  int v49;
  uint64_t v50;
  __int16 v51;
  int v52;
  std::string __p;
  int v54;
  BOOL v55;
  unsigned __int8 v56;
  __int16 v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  _DWORD v61[5];
  uint64_t v62;

  v62 = *MEMORY[0x24BDAC8D0];
  if (*(char *)(a2 + 23) >= 0)
    v4 = (const char *)a2;
  else
    v4 = *(const char **)a2;
  v5 = sub_21A6BB08C(v4);
  v60 = 0;
  if (!v5)
    return 1;
  v6 = v5;
  sub_21A6D4F00(v5, &v60);
  if (v60 && !sub_21A6AF0B4(a1, v60))
    return 0;
  v58 = 0;
  v59 = 0;
  v57 = 0;
  v56 = 0;
  v7 = sub_21A6AF0B4(a1, 1935819842);
  v8 = sub_21A6AF0B4(a1, 1198748750);
  v9 = sub_21A6AF0B4(a1, 1196311928);
  v55 = 0;
  v54 = 0;
  if (*(char *)(a2 + 23) < 0)
    sub_21A6CDFB4(&__p, *(void **)a2, *(_QWORD *)(a2 + 8));
  else
    __p = *(std::string *)a2;
  v52 = 0;
  v51 = 0;
  v50 = 0;
  v49 = 0;
  v48 = 0;
  v47 = 0;
  if (sub_21A6AD02C(a1, 1651722563, &v49, 0))
    goto LABEL_44;
  size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = __p.__r_.__value_.__l.__size_;
  if (size == 4)
  {
    v12 = sub_21A6D69EC(v61, 0x11uLL);
    MEMORY[0x220747320](&__p, v12);
  }
  sub_21A6B2D64((unsigned __int8 *)&__p, 1651723853, &__p);
  if (sub_21A6B77DC(a1, (uint64_t)&__p, (char *)&v59 + 4, 0))
    goto LABEL_44;
  v13 = HIDWORD(v59);
  v14 = !HIDWORD(v59) || HIDWORD(v59) == 10;
  v15 = v14;
  sub_21A6B2D64((unsigned __int8 *)&__p, 1651718221, &__p);
  if (sub_21A6B77DC(a1, (uint64_t)&__p, &v58, 0))
    goto LABEL_44;
  if (v7)
  {
    v16 = (v58 & 0xFFFF0000) == 0x50000 || (v58 & 0xFFFD0000) == 0x80000;
    v17 = v16;
  }
  else
  {
    v17 = v58 <= 0xA && (0x520u >> v58) & 1;
  }
  sub_21A6B2D64((unsigned __int8 *)&__p, 1651725133, &__p);
  if (sub_21A6B77DC(a1, (uint64_t)&__p, &v59, 0))
    goto LABEL_44;
  v18 = sub_21A6BC5A8(a1);
  HIDWORD(v58) = 1;
  if (v18)
  {
    sub_21A6B2D64((unsigned __int8 *)&__p, 1651722067, &__p);
    sub_21A6B77DC(a1, (uint64_t)&__p, (char *)&v58 + 4, 0);
  }
  if (sub_21A6B7A3C(a1, 1918979649, (BOOL *)&v57 + 1, 0))
    goto LABEL_44;
  if (sub_21A6AD02C(a1, 1851868780, &v50, 0))
    goto LABEL_44;
  if (sub_21A6B7A3C(a1, 1918977107, (BOOL *)&v57, 0))
    goto LABEL_44;
  if (sub_21A6B7A3C(a1, 1651721811, &v55, 0))
    goto LABEL_44;
  if (sub_21A6B7A3C(a1, 1635078738, (BOOL *)&v48 + 1, 0))
    goto LABEL_44;
  if (sub_21A6B7A3C(a1, 1885688643, (BOOL *)&v48, 0))
    goto LABEL_44;
  v54 = 2;
  v46 = v55;
  if (v55
    && (sub_21A6B7A3C(a1, 1651724870, (BOOL *)&v56, 0)
     || sub_21A6AD02C(a1, 1651721805, &v54, 0)))
  {
    goto LABEL_44;
  }
  if (sub_21A6AF0B4(a1, 1768961606))
  {
    if (sub_21A6AD02C(a1, 912483943, &v52, 0)
      || sub_21A6B7A3C(a1, 912356724, (BOOL *)&v51 + 1, 0)
      || sub_21A6B7A3C(a1, 913532535, (BOOL *)&v51, 0))
    {
      goto LABEL_44;
    }
  }
  else
  {
    v52 = 0;
  }
  if (sub_21A6B7A3C(a1, 2002929006, (BOOL *)&v47, 0)
    || (v20 = v59,
        v45 = sub_21A6AF0B4(a1, 1950434124),
        sub_21A6B2D64((unsigned __int8 *)&__p, 1651720532, &__p),
        sub_21A6B77DC(a1, (uint64_t)&__p, (char *)&v50 + 4, 0)))
  {
LABEL_44:
    v10 = 1;
    goto LABEL_45;
  }
  v21 = v20 - 9;
  v10 = 1;
  if (v6 > 1684554342)
  {
    if (v6 > 1918979427)
    {
      if (v6 > 1950434123)
      {
        if (v6 <= 2002929741)
        {
          if (v6 <= 2002863170)
          {
            if (v6 == 1950434124)
            {
              v32 = v45;
              if (HIDWORD(v50) != 3)
                v32 = 0;
              v31 = v13 == 1;
LABEL_306:
              if (v31)
                v10 = 0;
              else
                v10 = v32;
              goto LABEL_45;
            }
            if (v6 != 1970500196)
              goto LABEL_45;
            v37 = !v46;
            v38 = v54;
            goto LABEL_267;
          }
          if (v6 == 2002863171)
          {
            v40 = v49 == 2 || v49 == 7;
            goto LABEL_298;
          }
          if (v6 != 2002867012)
          {
            if (v6 != 2002929006)
              goto LABEL_45;
            v30 = sub_21A6AF0B4(a1, 2000834122);
            goto LABEL_322;
          }
LABEL_192:
          v10 = HIBYTE(v57);
          goto LABEL_45;
        }
        if (v6 <= 2002932291)
        {
          if ((v6 - 2002929742) > 7 || ((1 << (v6 - 78)) & 0x85) == 0)
            goto LABEL_45;
        }
        else if ((v6 - 2002932292) > 0x11 || ((1 << (v6 - 68)) & 0x21001) == 0)
        {
          if (v6 == 2003003251 || v6 == 2003003253)
          {
LABEL_234:
            v30 = sub_21A6AF0B4(a1, 1635215715);
            goto LABEL_322;
          }
          goto LABEL_45;
        }
        v10 = v47;
        goto LABEL_45;
      }
      if (v6 <= 1918980913)
      {
        if (v6 > 1918979692)
        {
          if (v6 == 1918979693)
            goto LABEL_240;
          v10 = v15;
          if (v6 != 1918980207)
          {
            v10 = 1;
            if (v6 == 1918980719)
            {
              if (v13 != 10 && v13)
                goto LABEL_290;
              if (!sub_21A6D6FB4(v58) || !sub_21A6AF0B4(a1, 1382109807))
              {
                if (sub_21A6D6F8C(v58))
                {
                  v30 = sub_21A6AF0B4(a1, 1381123655);
LABEL_322:
                  v10 = v30;
                  goto LABEL_45;
                }
                goto LABEL_290;
              }
            }
          }
        }
        else
        {
          if (v6 == 1918979428)
            goto LABEL_271;
          v10 = v15;
          if (v6 != 1918979445)
          {
            v10 = 1;
            if (v6 == 1918979649)
              goto LABEL_221;
          }
        }
        goto LABEL_45;
      }
      if (v6 > 1918981954)
      {
        if (v6 > 1937011780)
        {
          if (v6 != 1937011781)
          {
            v39 = 1937330789;
            goto LABEL_248;
          }
        }
        else
        {
          if (v6 == 1918981955)
          {
            if ((v13 == 10 || !v13) && v17)
            {
              v30 = sub_21A6BAD44(a1, CFSTR("ht40_5GHz"));
              goto LABEL_322;
            }
            goto LABEL_290;
          }
          if (v6 != 1937006964)
            goto LABEL_45;
        }
        v30 = sub_21A6AF0B4(a1, 1097749364);
        goto LABEL_322;
      }
      if (v6 != 1918980914 && v6 != 1918980965)
      {
        v24 = 21810;
        goto LABEL_163;
      }
    }
    else
    {
      if (v6 <= 1885688642)
      {
        if (v6 <= 1735279981)
        {
          if (v6 <= 1684557158)
          {
            if (v6 != 1684554343 && v6 != 1684555118)
            {
              v23 = 1684556901;
              goto LABEL_264;
            }
          }
          else
          {
            if (v6 > 1718842223)
            {
              if (v6 == 1718842224)
              {
                v25 = v46 && v54 == 1;
                goto LABEL_327;
              }
              if (v6 != 1735279207)
                goto LABEL_45;
              goto LABEL_237;
            }
            if (v6 != 1684557159)
            {
              v22 = 1718186597;
              goto LABEL_186;
            }
          }
LABEL_265:
          v10 = v57;
          goto LABEL_45;
        }
        if (v6 <= 1851868779)
        {
          if (v6 != 1735279982)
          {
            if (v6 == 1818315088)
              goto LABEL_192;
            v22 = 1849970010;
            goto LABEL_186;
          }
          goto LABEL_237;
        }
        if (v6 > 1885686083)
        {
          if (v6 == 1885686084)
          {
            v28 = v49 == 2;
            v42 = v48;
LABEL_324:
            v25 = v28 && v42 == 0;
            goto LABEL_327;
          }
          v26 = 20567;
        }
        else
        {
          if (v6 == 1851868780)
            goto LABEL_192;
          v26 = 16707;
        }
LABEL_260:
        if (v6 != (v26 | 0x70650000))
          goto LABEL_45;
        goto LABEL_261;
      }
      if (v6 <= 1918977106)
      {
        if (v6 <= 1886213216)
        {
          if (v6 == 1885688643 || v6 == 1885688654)
            goto LABEL_261;
          v26 = 21838;
          goto LABEL_260;
        }
        if (v6 <= 1918976872)
        {
          if (v6 == 1886213217)
          {
            v41 = sub_21A6AF0B4(a1, 1181898604);
            v10 = (HIBYTE(v57) != 0) & ~v41;
            goto LABEL_45;
          }
          v24 = 16757;
          goto LABEL_163;
        }
        if (v6 != 1918976873)
        {
          v39 = 1918976876;
LABEL_248:
          if (v6 != v39)
            goto LABEL_45;
          goto LABEL_249;
        }
        goto LABEL_252;
      }
      if (v6 > 1918978352)
      {
        if ((v6 - 1918978353) >= 2)
        {
          v35 = 1918978900;
LABEL_209:
          if (v6 == v35)
LABEL_210:
            v10 = v15;
          goto LABEL_45;
        }
        goto LABEL_252;
      }
      if (v6 == 1918977107)
        goto LABEL_221;
      if (v6 != 1918977586)
      {
        v24 = 18028;
LABEL_163:
        v27 = v24 | 0x72610000;
LABEL_164:
        if (v6 != v27)
          goto LABEL_45;
      }
    }
LABEL_252:
    v25 = v21 < 4 || HIDWORD(v50) == 2;
    goto LABEL_327;
  }
  if (v6 <= 1651721024)
  {
    if (v6 > 1397572214)
    {
      if (v6 <= 1651717458)
      {
        if (v6 > 1635077709)
        {
          if (v6 <= 1635214180)
          {
            if (v6 == 1635077710 || v6 == 1635077712)
              v10 = HIBYTE(v48);
            goto LABEL_45;
          }
          if (v6 != 1635214181)
          {
            v39 = 1651717454;
            goto LABEL_248;
          }
          goto LABEL_234;
        }
        v10 = v46;
        if (v6 == 1397572215)
          goto LABEL_45;
        if (v6 != 1633116526)
        {
          v10 = 1;
          if (v6 != 1633899617)
            goto LABEL_45;
          v31 = v13 == 1;
          v32 = (HIDWORD(v50) == 1) & ~v45;
          goto LABEL_306;
        }
        v34 = HIBYTE(v48) == 0;
        v33 = HIBYTE(v57);
        goto LABEL_295;
      }
      if (v6 > 1651717711)
      {
        if (v6 <= 1651718220)
        {
          if (v6 != 1651717712)
          {
            if (v6 != 1651717715)
              goto LABEL_45;
            if (!sub_21A6BDA38(a1))
            {
              v25 = (v52 & 0xFFFFFFFB) == 1;
              goto LABEL_327;
            }
LABEL_290:
            v10 = 0;
            goto LABEL_45;
          }
          v28 = v52 == 3 || v52 == 5;
          goto LABEL_302;
        }
        if (v6 != 1651718221)
        {
          if (v6 != 1651720532)
            goto LABEL_45;
          v40 = v13 == 1;
          goto LABEL_298;
        }
LABEL_271:
        if (v13 == 10 || !v13)
        {
          v10 = !sub_21A6AF0B4(a1, 1852782669);
          goto LABEL_45;
        }
        goto LABEL_290;
      }
      if (v6 == 1651717459)
      {
LABEL_249:
        if (v13 == 20)
          v10 = 1;
        else
          v10 = v15;
        goto LABEL_45;
      }
      if (v6 != 1651717697)
      {
        v36 = 1651717709;
        goto LABEL_205;
      }
      goto LABEL_266;
    }
    if (v6 > 912684907)
    {
      if (v6 > 913601123)
      {
        if (v6 > 1229409615)
        {
          if (v6 != 1229409616)
          {
            if (v6 == 1397572211)
              v10 = v46;
            goto LABEL_45;
          }
          v30 = sub_21A6AF0B4(a1, 1229409616);
          goto LABEL_322;
        }
        if (v6 != 913601124)
        {
          v23 = 1146250611;
          goto LABEL_264;
        }
LABEL_226:
        if (v52 != 5 && v52 != 3)
          goto LABEL_290;
        v29 = v51;
        goto LABEL_289;
      }
      if (v6 == 912684908 || v6 == 913532259)
        goto LABEL_226;
      if (v6 != 913532535)
        goto LABEL_45;
LABEL_169:
      v25 = v52 == 3 || v52 == 5;
      goto LABEL_327;
    }
    if (v6 > 911697782)
    {
      if (v6 == 911697783)
      {
LABEL_206:
        v29 = v52;
LABEL_289:
        v40 = v29 == 0;
LABEL_298:
        v10 = !v40;
        goto LABEL_45;
      }
      if (v6 != 911701093)
      {
        v36 = 912356724;
LABEL_205:
        if (v6 != v36)
          goto LABEL_45;
        goto LABEL_206;
      }
      v28 = v52 == 3;
    }
    else
    {
      if (v6 == 910975332)
        goto LABEL_169;
      if (v6 == 911696228)
      {
LABEL_266:
        v37 = v52 == 0;
        v38 = HIBYTE(v51);
LABEL_267:
        v25 = !v37 && v38 == 0;
        goto LABEL_327;
      }
      if (v6 != 911697528)
        goto LABEL_45;
      v28 = (v52 & 0xFFFFFFFB) == 1;
    }
LABEL_302:
    v42 = HIBYTE(v51);
    goto LABEL_324;
  }
  if (v6 <= 1651724354)
  {
    if (v6 > 1651722058)
    {
      switch(v6)
      {
        case 1651722059:
          goto LABEL_210;
        case 1651722060:
        case 1651722061:
        case 1651722063:
        case 1651722065:
        case 1651722066:
          goto LABEL_45;
        case 1651722062:
        case 1651722067:
          v10 = v18;
          goto LABEL_45;
        case 1651722064:
          v40 = !v18 || HIDWORD(v58) == 1;
          goto LABEL_298;
        default:
          if ((v6 - 1651724337) < 2)
            goto LABEL_252;
          v35 = 1651723637;
          goto LABEL_209;
      }
    }
    if (v6 <= 1651722048)
    {
      if (v6 != 1651721025)
      {
        if (v6 == 1651721040)
        {
          if (v52 != 5 && v52 != 3)
            goto LABEL_290;
          v29 = HIBYTE(v51);
        }
        else
        {
          if (v6 != 1651721797 || (v52 == 5 || v52 == 3) && (_BYTE)v51)
            goto LABEL_45;
          v29 = HIBYTE(v57);
        }
        goto LABEL_289;
      }
      v34 = v52 == 0;
      v33 = HIBYTE(v51);
      goto LABEL_295;
    }
    v10 = v46;
    if (v6 == 1651722049)
      goto LABEL_45;
    if (v6 != 1651722052)
    {
      v10 = 1;
      if (v6 != 1651722053)
        goto LABEL_45;
      if (v8)
      {
        if (v13 != 10 && v13 || HIBYTE(v57) != v57)
          v10 = v13 == 20 && v9;
        goto LABEL_45;
      }
      goto LABEL_290;
    }
LABEL_237:
    v34 = !v18;
    v33 = v57;
    goto LABEL_295;
  }
  if (v6 > 1651725142)
  {
    if (v6 <= 1651726164)
    {
      if (v6 != 1651725143 && v6 != 1651726147)
      {
        if (v6 == 1651726150)
          v10 = v56;
        goto LABEL_45;
      }
      goto LABEL_192;
    }
    if (v6 <= 1683440722)
    {
      if (v6 == 1651726165)
        goto LABEL_192;
      v27 = 1651733076;
      goto LABEL_164;
    }
    v10 = v15;
    if (v6 == 1683440723)
      goto LABEL_45;
    v23 = 1684551989;
    v10 = 1;
LABEL_264:
    if (v6 != v23)
      goto LABEL_45;
    goto LABEL_265;
  }
  if (v6 <= 1651724876)
  {
    if (v6 != 1651724355)
    {
      v10 = v15;
      if (v6 == 1651724867)
        goto LABEL_45;
      v10 = 1;
      if (v6 != 1651724870)
        goto LABEL_45;
      v33 = HIBYTE(v57);
      v34 = !v46;
LABEL_295:
      v40 = v34 || v33 == 0;
      goto LABEL_298;
    }
LABEL_261:
    v25 = v49 == 2;
LABEL_327:
    v10 = v25;
    goto LABEL_45;
  }
  if (v6 <= 1651725130)
  {
    if (v6 != 1651724877)
    {
      v22 = 1651724880;
LABEL_186:
      if (v6 != v22)
        goto LABEL_45;
      goto LABEL_192;
    }
LABEL_221:
    v61[0] = 0;
    v10 = sub_21A6AD02C(a1, 1937326416, v61, 0);
    if (v10)
      goto LABEL_45;
    v31 = sub_21A671268(v61[0]) == 1 && v13 == 3;
    v32 = (v13 == 20) ^ (v13 != 1);
    goto LABEL_306;
  }
  if (v6 == 1651725131)
  {
    v10 = v13 != 3 && (_DWORD)v59 != 1 && v21 > 3;
    goto LABEL_45;
  }
  if (v6 == 1651725133)
  {
LABEL_240:
    v40 = v13 == 3;
    goto LABEL_298;
  }
LABEL_45:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v10;
}

void sub_21A6BDA0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL sub_21A6BDA38(uint64_t a1)
{
  _BOOL8 v2;
  int v3;
  BOOL v5;
  int v6;
  std::string __p;

  sub_21A6CE0F0(&__p, "WiFi.radios.[*].");
  v6 = 0;
  sub_21A6B2D64((unsigned __int8 *)&__p, 1651723853, &__p);
  v2 = 0;
  if (!sub_21A6B77DC(a1, (uint64_t)&__p, &v6, 0) && v6 == 1)
  {
    if (sub_21A6AF0B4(a1, 1884509249))
    {
      v5 = 0;
      sub_21A6B2D64((unsigned __int8 *)&__p, 1651724357, &__p);
      v3 = sub_21A6B79E0(a1, (uint64_t)&__p, &v5, 0);
      v2 = (v3 | v5) == 0;
    }
    else
    {
      v2 = 1;
    }
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v2;
}

void sub_21A6BDB18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_21A6BDB38(uint64_t a1, const __CFString *a2, const std::string *a3, int a4, std::string *a5)
{
  uint64_t size;
  BOOL v6;
  const std::string *v7;
  char *v12;
  std::string *v13;
  char *v14;
  uint64_t v15;
  std::string::size_type v17;
  int64_t v18;
  std::string *p_p;
  _BYTE *v20;
  std::string *v21;
  _BYTE *v22;
  std::string::size_type v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  std::string *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  CFIndex Count;
  uint64_t v48;
  uint64_t v49;
  char v50;
  int64_t v51;
  std::string *v52;
  char *v53;
  std::string *v54;
  char *v55;
  std::string::size_type v56;
  uint64_t v57;
  std::string __str;
  void *value;
  int v60;
  std::string __p;
  const __CFArray *v62;
  __CFString *v63;
  char v64;
  std::string::value_type __s[32];
  uint64_t v66;

  v66 = *MEMORY[0x24BDAC8D0];
  v62 = 0;
  v63 = 0;
  memset(&__p, 0, sizeof(__p));
  v60 = 0;
  value = 0;
  size = HIBYTE(a3->__r_.__value_.__r.__words[2]);
  v6 = (size & 0x80u) != 0;
  if ((size & 0x80u) != 0)
    size = a3->__r_.__value_.__l.__size_;
  if (v6)
    v7 = (const std::string *)a3->__r_.__value_.__r.__words[0];
  else
    v7 = a3;
  if (size < 8)
  {
LABEL_11:
    v15 = 4294967292;
    goto LABEL_12;
  }
  v12 = (char *)v7 + size;
  v13 = (std::string *)v7;
  while (1)
  {
    v14 = (char *)memchr(v13, 118, size - 7);
    if (!v14)
      goto LABEL_11;
    if (*(_QWORD *)v14 == 0x5D2A5B2E73706176)
      break;
    v13 = (std::string *)(v14 + 1);
    size = v12 - (char *)v13;
    if (v12 - (char *)v13 < 8)
      goto LABEL_11;
  }
  if (v14 == v12)
    v17 = -1;
  else
    v17 = v14 - (char *)v7;
  v15 = 4294967292;
  if (a2 && v17 != -1)
  {
    std::string::basic_string(&__str, a3, 0, v17, (std::allocator<char> *)&v64);
    std::string::operator=(&__p, &__str);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v18 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      v18 = __p.__r_.__value_.__l.__size_;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    v20 = (char *)p_p + v18;
    if (v18 >= 1)
    {
      v21 = p_p;
      do
      {
        v22 = memchr(v21, 46, v18);
        if (!v22)
          break;
        if (*v22 == 46)
          goto LABEL_34;
        v21 = (std::string *)(v22 + 1);
        v18 = v20 - (_BYTE *)v21;
      }
      while (v20 - (_BYTE *)v21 > 0);
    }
    v22 = v20;
LABEL_34:
    if (v22 == v20)
      v23 = 0;
    else
      v23 = v22 - (_BYTE *)p_p + 1;
    std::string::basic_string(&__str, &__p, v23, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v64);
    std::string::operator=(&__p, &__str);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    v29 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? &__p
        : (std::string *)__p.__r_.__value_.__r.__words[0];
    sub_21A693B94(a2, (uint64_t)&v63, (UInt8 *)v29, v24, v25, v26, v27, v28, v57);
    v15 = v35;
    if (!(_DWORD)v35)
    {
      sub_21A693B94(v63, (uint64_t)&v62, (UInt8 *)"%kO", v30, v31, v32, v33, v34, (uint64_t)CFSTR("vaps"));
      if ((a4 & 1) != 0 || (v15 = v36, !(_DWORD)v36))
      {
        if (v62)
        {
          Count = CFArrayGetCount(v62);
          if (Count >= 1)
          {
            v48 = 0;
            while (1)
            {
              sub_21A693B94((const __CFString *)v62, (uint64_t)&v60, (UInt8 *)"[*].%kO:int", v42, v43, v44, v45, v46, v48);
              v15 = v49;
              if ((_DWORD)v49)
                goto LABEL_12;
              if (v60 == 6)
              {
                value = (void *)CFArrayGetValueAtIndex(v62, v48);
                if (!value)
                  goto LABEL_55;
                goto LABEL_60;
              }
              if (Count == ++v48)
              {
                v48 = Count;
                goto LABEL_55;
              }
            }
          }
          v48 = 0;
LABEL_55:
          if (!a4)
          {
            v15 = 4294967291;
            goto LABEL_12;
          }
          v15 = sub_21A692FEC((const __CFAllocator *)*MEMORY[0x24BDBD240], (CFTypeRef *)&value, (uint64_t)"{%kO=%b%kO=%i%kO=%O%kO=%i%kO=%b}", v42, v43, v44, v45, v46, (uint64_t)CFSTR("Enabled"));
          if ((_DWORD)v15)
            goto LABEL_12;
          CFArrayAppendValue(v62, value);
          CFRelease(value);
        }
        else
        {
          v15 = sub_21A692FEC((const __CFAllocator *)*MEMORY[0x24BDBD240], (CFTypeRef *)&v62, (uint64_t)"[{%kO=%b%kO=%i%kO=%O%kO=%i%kO=%b}]", v37, v38, v39, v40, v41, (uint64_t)CFSTR("Enabled"));
          if ((_DWORD)v15)
            goto LABEL_12;
          CFDictionarySetValue((CFMutableDictionaryRef)v63, CFSTR("vaps"), v62);
          CFRelease(v62);
          v48 = 0;
        }
LABEL_60:
        snprintf(__s, 0x20uLL, "%ld", v48);
        v50 = HIBYTE(a5->__r_.__value_.__r.__words[2]);
        if (v50 >= 0)
          v51 = HIBYTE(a5->__r_.__value_.__r.__words[2]);
        else
          v51 = a5->__r_.__value_.__l.__size_;
        if (v50 >= 0)
          v52 = a5;
        else
          v52 = (std::string *)a5->__r_.__value_.__r.__words[0];
        v53 = (char *)v52 + v51;
        if (v51 >= 1)
        {
          v54 = v52;
          do
          {
            v55 = (char *)memchr(v54, 42, v51);
            if (!v55)
              break;
            if (*v55 == 42)
              goto LABEL_72;
            v54 = (std::string *)(v55 + 1);
            v51 = v53 - (char *)v54;
          }
          while (v53 - (char *)v54 > 0);
        }
        v55 = v53;
LABEL_72:
        if (v55 == v53)
          v56 = -1;
        else
          v56 = v55 - (char *)v52;
        std::string::replace(a5, v56, 1uLL, __s);
        v15 = 0;
      }
    }
  }
LABEL_12:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v15;
}

void sub_21A6BDF9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a32 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_21A6BDFE0(uint64_t a1, uint64_t a2, CFTypeRef *a3)
{
  const __CFAllocator *v6;
  void **v7;
  CFStringRef v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *__p[2];
  uint64_t v18;

  if (*(char *)(a1 + 143) < 0)
  {
    sub_21A6CDFB4(__p, *(void **)(a1 + 120), *(_QWORD *)(a1 + 128));
    if (a3)
      goto LABEL_3;
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)(a1 + 120);
    v18 = *(_QWORD *)(a1 + 136);
    if (a3)
    {
LABEL_3:
      v6 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
      if (v18 >= 0)
        v7 = __p;
      else
        v7 = (void **)__p[0];
      v8 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x24BDBD240], (const char *)v7, 0x8000100u);
      *a3 = v8;
      if (v8)
      {
        if (*(char *)(a2 + 23) >= 0)
          v14 = a2;
        else
          v14 = *(_QWORD *)a2;
        v15 = sub_21A693A8C(v6, *(__CFArray **)(a1 + 48), (uint64_t)"%ks=%O", v9, v10, v11, v12, v13, v14);
        CFRelease(*a3);
      }
      else
      {
        v15 = 4294960568;
      }
      goto LABEL_14;
    }
  }
  v15 = 4294967292;
LABEL_14:
  if (SHIBYTE(v18) < 0)
    operator delete(__p[0]);
  return v15;
}

void sub_21A6BE0D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_21A6BE0F0(std::string *a1, uint64_t a2, const __CFString *a3)
{
  uint64_t v4;
  std::string __str;
  void *v7;
  char *v8;

  v8 = 0;
  v7 = 0;
  v4 = sub_21A694C44(a3, (const char **)&v8, (UInt8 **)&v7);
  if (!(_DWORD)v4)
  {
    sub_21A6CE0F0(&__str, v8);
    std::string::operator=(a1 + 5, &__str);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (v7)
    free(v7);
  return v4;
}

void sub_21A6BE170(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_21A6BE18C(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t result;
  _QWORD *v5;

  if (!a3)
    return 4294967292;
  result = 0;
  if (*(_BYTE *)(a1 + 372))
    v5 = (_QWORD *)MEMORY[0x24BDBD270];
  else
    v5 = (_QWORD *)MEMORY[0x24BDBD268];
  *a3 = *v5;
  return result;
}

uint64_t sub_21A6BE1C8(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  _BOOL4 v4;
  uint64_t result;
  _QWORD *v6;

  if (!a3)
    return 4294967292;
  v4 = sub_21A6B82DC(a1);
  result = 0;
  if (v4)
    v6 = (_QWORD *)MEMORY[0x24BDBD270];
  else
    v6 = (_QWORD *)MEMORY[0x24BDBD268];
  *a3 = *v6;
  return result;
}

uint64_t sub_21A6BE21C(uint64_t a1, uint64_t a2, CFTypeRef *a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  const UInt8 *BytePtr;
  CFIndex i;
  int v13;
  uint64_t v14;
  const __CFAllocator *v15;
  std::string *v16;
  CFStringRef v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  std::string::value_type __s[8];
  char v25;
  std::string v26;
  CFTypeRef cf;
  int v28;
  std::string v29;
  void *__p[2];
  char v31;
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  memset(&v29, 0, sizeof(v29));
  v28 = 0;
  cf = 0;
  memset(&v26, 0, sizeof(v26));
  if (!a3)
  {
    v9 = 4294967292;
    goto LABEL_10;
  }
  sub_21A6CE0F0(__p, "raWM");
  sub_21A6B3A38((unsigned __int8 *)a2, (uint64_t)__p, &v29);
  if (v31 < 0)
    operator delete(__p[0]);
  v8 = sub_21A6B77DC(a1, (uint64_t)&v29, &v28, a4);
  v9 = v8;
  if (((_DWORD)a4 != 1 || (_DWORD)v8 != -5) && !(_DWORD)v8)
  {
    if ((v28 - 1) > 1)
    {
      if ((v28 - 3) <= 5)
      {
        sub_21A6CE0F0(__p, "raCr");
        sub_21A6B3A38((unsigned __int8 *)a2, (uint64_t)__p, &v29);
        if (v31 < 0)
          operator delete(__p[0]);
        *(_BYTE *)(a1 + 386) = 1;
        v14 = sub_21A6B7B5C(a1, (uint64_t)&v29, (uint64_t)&v26, a4);
        v9 = v14;
        *(_BYTE *)(a1 + 386) = 0;
        if ((_DWORD)v14 != -5)
        {
          if ((_DWORD)v14)
            goto LABEL_7;
        }
      }
    }
    else
    {
      sub_21A6CE0F0(__p, "raWE");
      sub_21A6B3A38((unsigned __int8 *)a2, (uint64_t)__p, &v29);
      if (v31 < 0)
        operator delete(__p[0]);
      v9 = sub_21A6B44B4(a1, (uint64_t)&v29, (CFMutableDictionaryRef *)&cf, a4);
      if ((_DWORD)v9)
        goto LABEL_7;
      BytePtr = CFDataGetBytePtr((CFDataRef)cf);
      for (i = CFDataGetLength((CFDataRef)cf); i; --i)
      {
        v13 = *BytePtr++;
        snprintf((char *)__p, 0x20uLL, "%.2X", v13);
        v25 = 2;
        *(_WORD *)__s = __p[0];
        __s[2] = 0;
        std::string::append(&v26, __s, 2uLL);
        if (v25 < 0)
          operator delete(*(void **)__s);
      }
    }
    v15 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
    if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v16 = &v26;
    else
      v16 = (std::string *)v26.__r_.__value_.__r.__words[0];
    v17 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x24BDBD240], (const char *)v16, 0x8000100u);
    *a3 = v17;
    if (v17)
    {
      if (*(char *)(a2 + 23) >= 0)
        v23 = a2;
      else
        v23 = *(_QWORD *)a2;
      v9 = sub_21A693A8C(v15, *(__CFArray **)(a1 + 48), (uint64_t)"%ks=%O", v18, v19, v20, v21, v22, v23);
      CFRelease(*a3);
    }
    else
    {
      v9 = 4294960568;
    }
  }
LABEL_7:
  if (cf)
  {
    CFRelease(cf);
    cf = 0;
  }
LABEL_10:
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v26.__r_.__value_.__l.__data_);
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v29.__r_.__value_.__l.__data_);
  return v9;
}

void sub_21A6BE4FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (a22 < 0)
    operator delete(__p);
  if (a30 < 0)
    operator delete(a25);
  _Unwind_Resume(exception_object);
}

uint64_t sub_21A6BE570(uint64_t a1, uint64_t a2, const __CFString *a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  size_t v9;
  uint64_t v10;
  unsigned __int8 *v11;
  void **p_s1;
  uint64_t v13;
  void *__p[2];
  char v16;
  CFTypeRef cf;
  void *v18;
  _BYTE *v19;
  uint64_t v20;
  void *__s1;
  size_t __n;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  UInt8 *v27;
  const char *v28;
  int v29;
  std::string __dst;

  if (*(char *)(a2 + 23) < 0)
    sub_21A6CDFB4(&__dst, *(void **)a2, *(_QWORD *)(a2 + 8));
  else
    __dst = *(std::string *)a2;
  v29 = 0;
  v27 = 0;
  v28 = 0;
  v24 = 0;
  v25 = 0;
  v26 = 0;
  __s1 = 0;
  __n = 0;
  v23 = 0;
  v18 = 0;
  v19 = 0;
  v20 = 0;
  cf = 0;
  if (a3)
  {
    v7 = sub_21A694C44(a3, &v28, &v27);
    if ((_DWORD)v7)
      goto LABEL_54;
    MEMORY[0x220747320](&v24, v28);
  }
  else
  {
    LOBYTE(v24) = 0;
    HIBYTE(v26) = 0;
  }
  sub_21A6CE0F0(__p, "raCr");
  sub_21A6B3A38((unsigned __int8 *)&__dst, (uint64_t)__p, &__dst);
  if (v16 < 0)
    operator delete(__p[0]);
  *(_BYTE *)(a1 + 386) = 1;
  v7 = sub_21A6B7B5C(a1, (uint64_t)&__dst, (uint64_t)&__s1, a4);
  *(_BYTE *)(a1 + 386) = 0;
  if ((_DWORD)v7)
    goto LABEL_54;
  v8 = HIBYTE(v23);
  if (v23 >= 0)
    v9 = HIBYTE(v23);
  else
    v9 = __n;
  v10 = HIBYTE(v26);
  if (v26 < 0)
    v10 = v25;
  if (v9 == v10)
  {
    if (v26 >= 0)
      v11 = (unsigned __int8 *)&v24;
    else
      v11 = (unsigned __int8 *)v24;
    if (v23 < 0)
    {
      if (memcmp(__s1, v11, __n))
        goto LABEL_27;
    }
    else if (HIBYTE(v23))
    {
      p_s1 = &__s1;
      while (*(unsigned __int8 *)p_s1 == *v11)
      {
        v7 = 0;
        p_s1 = (void **)((char *)p_s1 + 1);
        ++v11;
        if (!--v8)
          goto LABEL_54;
      }
      goto LABEL_27;
    }
    v7 = 0;
    goto LABEL_54;
  }
LABEL_27:
  sub_21A6CE0F0(__p, "raWM");
  sub_21A6B3A38((unsigned __int8 *)&__dst, (uint64_t)__p, &__dst);
  if (v16 < 0)
    operator delete(__p[0]);
  v7 = sub_21A6B77DC(a1, (uint64_t)&__dst, &v29, a4);
  if (!(_DWORD)v7)
  {
    v13 = HIBYTE(v26);
    if (v26 < 0)
      v13 = v25;
    if (v13)
    {
      if (!sub_21A6BBB70(a1, (uint64_t)&__dst, (uint64_t)&v24, v29, (unint64_t *)&v18))
      {
        sub_21A6CE0F0(__p, "raCr");
        sub_21A6B3A38((unsigned __int8 *)&__dst, (uint64_t)__p, &__dst);
        if (v16 < 0)
          operator delete(__p[0]);
        *(_BYTE *)(a1 + 386) = 1;
        sub_21A6CE0F0(__p, "");
        v7 = sub_21A6B7AD4(a1, (uint64_t)&__dst, (uint64_t)__p, a4);
        if (v16 < 0)
          operator delete(__p[0]);
        goto LABEL_53;
      }
      v7 = sub_21A673FCC(1918981957, (unsigned __int8 *)v18, v19 - (_BYTE *)v18, 1, (CFStringRef *)&cf);
      if (!(_DWORD)v7)
      {
        sub_21A6CE0F0(__p, "raWE");
        sub_21A6B3A38((unsigned __int8 *)&__dst, (uint64_t)__p, &__dst);
        if (v16 < 0)
          operator delete(__p[0]);
        v7 = sub_21A6B2DEC(a1, (uint64_t)&__dst, (const __CFString *)cf, a4);
        if (!(_DWORD)v7)
        {
          if ((v29 - 3) >= 6)
            MEMORY[0x220747320](&v24, "");
LABEL_46:
          sub_21A6CE0F0(__p, "raCr");
          sub_21A6B3A38((unsigned __int8 *)&__dst, (uint64_t)__p, &__dst);
          if (v16 < 0)
            operator delete(__p[0]);
          *(_BYTE *)(a1 + 386) = 1;
          v7 = sub_21A6B7AD4(a1, (uint64_t)&__dst, (uint64_t)&v24, a4);
LABEL_53:
          *(_BYTE *)(a1 + 386) = 0;
        }
      }
    }
    else
    {
      v7 = sub_21A673FCC(1918981957, 0, 0, 1, (CFStringRef *)&cf);
      if (!(_DWORD)v7)
      {
        sub_21A6CE0F0(__p, "raWE");
        sub_21A6B3A38((unsigned __int8 *)&__dst, (uint64_t)__p, &__dst);
        if (v16 < 0)
          operator delete(__p[0]);
        v7 = sub_21A6B2DEC(a1, (uint64_t)&__dst, (const __CFString *)cf, a4);
        if (!(_DWORD)v7)
          goto LABEL_46;
      }
    }
  }
LABEL_54:
  if (cf)
    CFRelease(cf);
  if (v27)
    free(v27);
  if (v18)
  {
    v19 = v18;
    operator delete(v18);
  }
  if (SHIBYTE(v23) < 0)
    operator delete(__s1);
  if (SHIBYTE(v26) < 0)
    operator delete(v24);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  return v7;
}

void sub_21A6BE9D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  uint64_t v30;

  if (a14 < 0)
    operator delete(__p);
  if (a16)
    operator delete(a16);
  if (a24 < 0)
    operator delete(a19);
  if (a30 < 0)
    operator delete(a25);
  if (*(char *)(v30 - 41) < 0)
    operator delete(*(void **)(v30 - 64));
  _Unwind_Resume(exception_object);
}

BOOL sub_21A6BEA70(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  BOOL v10;

  v2 = a1[23];
  if ((v2 & 0x80u) == 0)
    v3 = a1[23];
  else
    v3 = *((_QWORD *)a1 + 1);
  v4 = a2[23];
  v5 = (char)v4;
  if ((v4 & 0x80u) != 0)
    v4 = *((_QWORD *)a2 + 1);
  if (v3 != v4)
    return 1;
  if (v5 < 0)
    a2 = *(unsigned __int8 **)a2;
  if ((v2 & 0x80) != 0)
    return memcmp(*(const void **)a1, a2, *((_QWORD *)a1 + 1)) != 0;
  if (a1[23])
  {
    v6 = v2 - 1;
    do
    {
      v8 = *a1++;
      v7 = v8;
      v9 = *a2++;
      v10 = v7 == v9;
      v2 = v7 != v9;
      v10 = !v10 || v6-- == 0;
    }
    while (!v10);
  }
  return v2;
}

uint64_t sub_21A6BEB04(uint64_t a1, uint64_t a2, CFMutableDictionaryRef *a3, uint64_t a4)
{
  unsigned int v7;
  uint64_t v9;
  void *__p[2];
  char v12;
  std::string __dst;

  if (*(char *)(a2 + 23) < 0)
  {
    sub_21A6CDFB4(&__dst, *(void **)a2, *(_QWORD *)(a2 + 8));
    if (a3)
      goto LABEL_3;
LABEL_12:
    v9 = 4294967292;
    goto LABEL_13;
  }
  __dst = *(std::string *)a2;
  if (!a3)
    goto LABEL_12;
LABEL_3:
  sub_21A6CE0F0(__p, "raNm");
  sub_21A6B3A38((unsigned __int8 *)&__dst, (uint64_t)__p, &__dst);
  if (v12 < 0)
    operator delete(__p[0]);
  *(_BYTE *)(a1 + 386) = 1;
  v7 = sub_21A6B64FC((CFDictionaryRef *)a1, (uint64_t)&__dst, a3, a4);
  *(_BYTE *)(a1 + 386) = 0;
  if (v7 == -5 && (_DWORD)a4 == 1)
    v9 = 4294967291;
  else
    v9 = v7;
LABEL_13:
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  return v9;
}

void sub_21A6BEBE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_21A6BEC1C(uint64_t a1, uint64_t a2, const __CFString *a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  void *__p[2];
  char v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  CFTypeRef cf;
  int v16;
  std::string __dst;

  if (*(char *)(a2 + 23) < 0)
    sub_21A6CDFB4(&__dst, *(void **)a2, *(_QWORD *)(a2 + 8));
  else
    __dst = *(std::string *)a2;
  v16 = 0;
  v14 = 0;
  cf = 0;
  v12 = 0;
  v13 = 0;
  sub_21A6CE0F0(__p, "raNm");
  sub_21A6B3A38((unsigned __int8 *)&__dst, (uint64_t)__p, &__dst);
  if (v11 < 0)
    operator delete(__p[0]);
  v7 = sub_21A6B44B4(a1, (uint64_t)&__dst, (CFMutableDictionaryRef *)&cf, a4);
  if (!(_DWORD)v7)
  {
    if (!cf)
    {
      v7 = 4294967291;
      goto LABEL_28;
    }
    *(_BYTE *)(a1 + 386) = 1;
    v7 = sub_21A6B2DEC(a1, (uint64_t)&__dst, a3, a4);
    *(_BYTE *)(a1 + 386) = 0;
    if (!(_DWORD)v7)
    {
      sub_21A6CE0F0(__p, "raWM");
      sub_21A6B3A38((unsigned __int8 *)&__dst, (uint64_t)__p, &__dst);
      if (v11 < 0)
        operator delete(__p[0]);
      v7 = sub_21A6B77DC(a1, (uint64_t)&__dst, &v16, a4);
      if (!(_DWORD)v7 && a3 && (v16 - 3) <= 5)
      {
        if (CFStringCompare(a3, (CFStringRef)cf, 0) == kCFCompareEqualTo)
          goto LABEL_33;
        sub_21A6CE0F0(__p, "raCr");
        sub_21A6B3A38((unsigned __int8 *)&__dst, (uint64_t)__p, &__dst);
        if (v11 < 0)
          operator delete(__p[0]);
        *(_BYTE *)(a1 + 386) = 1;
        v7 = sub_21A6B7B5C(a1, (uint64_t)&__dst, (uint64_t)&v12, a4);
        *(_BYTE *)(a1 + 386) = 0;
        if ((_DWORD)v7)
          goto LABEL_7;
        v8 = HIBYTE(v14);
        if (v14 < 0)
          v8 = v13;
        if (v8)
        {
          *(_BYTE *)(a1 + 386) = 1;
          sub_21A6CE0F0(__p, "");
          v7 = sub_21A6B7AD4(a1, (uint64_t)&__dst, (uint64_t)__p, a4);
          if (v11 < 0)
            operator delete(__p[0]);
          *(_BYTE *)(a1 + 386) = 0;
          if (!(_DWORD)v7)
          {
            sub_21A6B2D64((unsigned __int8 *)&__dst, 1651725131, &__dst);
            v7 = sub_21A6B7AD4(a1, (uint64_t)&__dst, (uint64_t)&v12, a4);
          }
        }
        else
        {
LABEL_33:
          v7 = 0;
        }
      }
    }
  }
LABEL_7:
  if (cf)
  {
    CFRelease(cf);
    cf = 0;
  }
LABEL_28:
  if (SHIBYTE(v14) < 0)
    operator delete(v12);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  return v7;
}

void sub_21A6BEEA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  if (a28 < 0)
    operator delete(a23);
  _Unwind_Resume(exception_object);
}

uint64_t sub_21A6BEF04(uint64_t a1, uint64_t a2, CFTypeRef *a3, uint64_t a4)
{
  _BOOL4 v8;
  _BOOL4 v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  const __CFAllocator *v14;
  CFNumberRef v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  void *__p[2];
  char v24;
  BOOL v25;
  uint64_t valuePtr;
  std::string v27;

  memset(&v27, 0, sizeof(v27));
  v8 = sub_21A6AF0B4(a1, 1095062317);
  valuePtr = 0;
  v25 = 0;
  if (a3)
  {
    v9 = v8;
    sub_21A6CE0F0(__p, "raEA");
    sub_21A6B3A38((unsigned __int8 *)a2, (uint64_t)__p, &v27);
    if (v24 < 0)
      operator delete(__p[0]);
    v10 = sub_21A6B79E0(a1, (uint64_t)&v27, &v25, a4);
    v11 = v10;
    if (((_DWORD)a4 != 1 || (_DWORD)v10 != -5) && !(_DWORD)v10)
    {
      sub_21A6CE0F0(__p, "raWM");
      sub_21A6B3A38((unsigned __int8 *)a2, (uint64_t)__p, &v27);
      if (v24 < 0)
        operator delete(__p[0]);
      v11 = sub_21A6B77DC(a1, (uint64_t)&v27, (char *)&valuePtr + 4, a4);
      if (!(_DWORD)v11)
      {
        switch(HIDWORD(valuePtr))
        {
          case 0:
            v12 = 1;
            goto LABEL_37;
          case 1:
            v12 = 2;
            goto LABEL_37;
          case 2:
            v12 = 3;
            goto LABEL_37;
          case 3:
            if (v9)
            {
              if (v25)
                v12 = 11;
              else
                v12 = 6;
            }
            else if (v25)
            {
              v12 = 9;
            }
            else
            {
              v12 = 4;
            }
            goto LABEL_37;
          case 4:
            v22 = 0;
            sub_21A6CE0F0(__p, "rTSN");
            sub_21A6B3A38((unsigned __int8 *)a2, (uint64_t)__p, &v27);
            if (v24 < 0)
              operator delete(__p[0]);
            if (sub_21A6AF0B4(a1, 1414745645))
            {
              v11 = sub_21A6B79E0(a1, (uint64_t)&v27, &v22, a4);
              if ((_DWORD)v11)
                break;
            }
            if (v25)
            {
              v12 = 10;
            }
            else if (v22)
            {
              v12 = 8;
            }
            else
            {
              v12 = 5;
            }
LABEL_37:
            LODWORD(valuePtr) = v12;
LABEL_38:
            v14 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
            v15 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], kCFNumberSInt32Type, &valuePtr);
            *a3 = v15;
            if (v15)
            {
              if (*(char *)(a2 + 23) >= 0)
                v21 = a2;
              else
                v21 = *(_QWORD *)a2;
              v11 = sub_21A693A8C(v14, *(__CFArray **)(a1 + 48), (uint64_t)"%ks=%O", v16, v17, v18, v19, v20, v21);
              CFRelease(*a3);
            }
            else
            {
              v11 = 4294960568;
            }
            break;
          case 5:
            if (v25)
              v12 = 12;
            else
              v12 = 7;
            goto LABEL_37;
          default:
            goto LABEL_38;
        }
      }
    }
  }
  else
  {
    v11 = 4294967292;
  }
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v27.__r_.__value_.__l.__data_);
  return v11;
}

void sub_21A6BF19C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a18 < 0)
    operator delete(__p);
  if (a26 < 0)
    operator delete(a21);
  _Unwind_Resume(exception_object);
}

uint64_t sub_21A6BF1E8(uint64_t a1, uint64_t a2, const __CFNumber *a3, uint64_t a4)
{
  _BOOL4 v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v12;
  uint64_t v13;
  const __CFString *v14;
  void *__p[2];
  char v16;
  uint64_t valuePtr;
  std::string __dst;

  if (*(char *)(a2 + 23) < 0)
    sub_21A6CDFB4(&__dst, *(void **)a2, *(_QWORD *)(a2 + 8));
  else
    __dst = *(std::string *)a2;
  v7 = sub_21A6AF0B4(a1, 1095062317);
  valuePtr = 0;
  if (CFNumberGetValue(a3, kCFNumberSInt32Type, (char *)&valuePtr + 4))
  {
    switch(HIDWORD(valuePtr))
    {
      case 1:
        sub_21A6CE0F0(__p, "raWM");
        sub_21A6B3A38((unsigned __int8 *)&__dst, (uint64_t)__p, &__dst);
        if (v16 < 0)
          operator delete(__p[0]);
        v8 = sub_21A6B38E4(a1, (uint64_t)&__dst, 0, a4);
        goto LABEL_30;
      case 2:
        sub_21A6CE0F0(__p, "raWM");
        sub_21A6B3A38((unsigned __int8 *)&__dst, (uint64_t)__p, &__dst);
        if (v16 < 0)
          operator delete(__p[0]);
        v8 = sub_21A6B38E4(a1, (uint64_t)&__dst, 1, a4);
        goto LABEL_30;
      case 3:
        sub_21A6CE0F0(__p, "raWM");
        sub_21A6B3A38((unsigned __int8 *)&__dst, (uint64_t)__p, &__dst);
        if (v16 < 0)
          operator delete(__p[0]);
        v8 = sub_21A6B38E4(a1, (uint64_t)&__dst, 2, a4);
        goto LABEL_30;
      case 4:
      case 6:
      case 9:
      case 0xB:
        sub_21A6CE0F0(__p, "raWM");
        sub_21A6B3A38((unsigned __int8 *)&__dst, (uint64_t)__p, &__dst);
        if (v16 < 0)
          operator delete(__p[0]);
        v8 = sub_21A6B38E4(a1, (uint64_t)&__dst, 3, a4);
        goto LABEL_30;
      case 5:
      case 8:
      case 0xA:
        sub_21A6CE0F0(__p, "raWM");
        sub_21A6B3A38((unsigned __int8 *)&__dst, (uint64_t)__p, &__dst);
        if (v16 < 0)
          operator delete(__p[0]);
        if (v7)
          v10 = 4;
        else
          v10 = 3;
        goto LABEL_15;
      case 7:
      case 0xC:
        sub_21A6CE0F0(__p, "raWM");
        sub_21A6B3A38((unsigned __int8 *)&__dst, (uint64_t)__p, &__dst);
        if (v16 < 0)
          operator delete(__p[0]);
        if (v7)
          v10 = 5;
        else
          v10 = 3;
LABEL_15:
        v8 = sub_21A6B38E4(a1, (uint64_t)&__dst, v10, a4);
LABEL_30:
        v9 = v8;
        if ((_DWORD)v8)
          break;
        if (SHIDWORD(valuePtr) <= 8)
        {
          sub_21A6CE0F0(__p, "raEA");
          sub_21A6B3A38((unsigned __int8 *)&__dst, (uint64_t)__p, &__dst);
          if (v16 < 0)
            operator delete(__p[0]);
          v12 = *MEMORY[0x24BDBD268];
          v13 = sub_21A6B2DEC(a1, (uint64_t)&__dst, (const __CFString *)*MEMORY[0x24BDBD268], a4);
LABEL_38:
          v9 = v13;
          if (!(_DWORD)v13)
          {
            if (!sub_21A6AF0B4(a1, 1414745645))
              goto LABEL_46;
            sub_21A6CE0F0(__p, "rTSN");
            sub_21A6B3A38((unsigned __int8 *)&__dst, (uint64_t)__p, &__dst);
            if (v16 < 0)
              operator delete(__p[0]);
            v14 = (const __CFString *)(HIDWORD(valuePtr) == 8 ? *MEMORY[0x24BDBD270] : v12);
            v9 = sub_21A6B2DEC(a1, (uint64_t)&__dst, v14, a4);
            if (!(_DWORD)v9)
            {
LABEL_46:
              sub_21A6CE0F0(__p, "raKT");
              sub_21A6B3A38((unsigned __int8 *)&__dst, (uint64_t)__p, &__dst);
              if (v16 < 0)
                operator delete(__p[0]);
              v9 = sub_21A6B77DC(a1, (uint64_t)&__dst, &valuePtr, a4);
              if (!(_DWORD)v9 && SHIDWORD(valuePtr) >= 4 && !(_DWORD)valuePtr)
              {
                sub_21A6CE0F0(__p, "raKT");
                sub_21A6B3A38((unsigned __int8 *)&__dst, (uint64_t)__p, &__dst);
                if (v16 < 0)
                  operator delete(__p[0]);
                v9 = sub_21A6B38E4(a1, (uint64_t)&__dst, 3600, a4);
              }
            }
          }
          break;
        }
        sub_21A6CE0F0(__p, "raEA");
        sub_21A6B3A38((unsigned __int8 *)&__dst, (uint64_t)__p, &__dst);
        if (v16 < 0)
          operator delete(__p[0]);
        v9 = sub_21A6B2DEC(a1, (uint64_t)&__dst, (const __CFString *)*MEMORY[0x24BDBD270], a4);
        if (!(_DWORD)v9)
        {
          sub_21A6CE0F0(__p, "acEn");
          sub_21A6B3A38((unsigned __int8 *)&__dst, (uint64_t)__p, &__dst);
          if (v16 < 0)
            operator delete(__p[0]);
          v12 = *MEMORY[0x24BDBD268];
          v9 = sub_21A6B2DEC(a1, (uint64_t)&__dst, (const __CFString *)*MEMORY[0x24BDBD268], a4);
          if (!(_DWORD)v9)
          {
            sub_21A6CE0F0(__p, "raFl");
            sub_21A6B3A38((unsigned __int8 *)&__dst, (uint64_t)__p, &__dst);
            if (v16 < 0)
              operator delete(__p[0]);
            v9 = sub_21A6B38E4(a1, (uint64_t)&__dst, 0, a4);
            if (!(_DWORD)v9)
            {
              sub_21A6CE0F0(__p, "raF2");
              sub_21A6B3A38((unsigned __int8 *)&__dst, (uint64_t)__p, &__dst);
              if (v16 < 0)
                operator delete(__p[0]);
              v13 = sub_21A6B38E4(a1, (uint64_t)&__dst, 0, a4);
              goto LABEL_38;
            }
          }
        }
        break;
      default:
        v9 = 4294967292;
        break;
    }
  }
  else
  {
    v9 = 4294960553;
  }
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  return v9;
}

void sub_21A6BF74C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

uint64_t sub_21A6BF7F0(uint64_t a1, uint64_t a2, CFTypeRef *a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  const __CFAllocator *v10;
  CFNumberRef v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *__p[2];
  char v20;
  int valuePtr;
  BOOL v22;
  std::string v23;

  memset(&v23, 0, sizeof(v23));
  valuePtr = 1000;
  if (a3)
  {
    sub_21A6CE0F0(__p, "raCA");
    sub_21A6B3A38((unsigned __int8 *)a2, (uint64_t)__p, &v23);
    if (v20 < 0)
      operator delete(__p[0]);
    v22 = 0;
    v8 = sub_21A6B79E0(a1, (uint64_t)&v23, &v22, a4);
    v9 = v8;
    if (((_DWORD)a4 != 1 || (_DWORD)v8 != -5) && !(_DWORD)v8)
    {
      if (v22)
        goto LABEL_8;
      sub_21A6CE0F0(__p, "raCh");
      sub_21A6B3A38((unsigned __int8 *)a2, (uint64_t)__p, &v23);
      if (v20 < 0)
        operator delete(__p[0]);
      v9 = sub_21A6B77DC(a1, (uint64_t)&v23, &valuePtr, a4);
      if (!(_DWORD)v9)
      {
LABEL_8:
        v10 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
        v11 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], kCFNumberSInt32Type, &valuePtr);
        *a3 = v11;
        if (v11)
        {
          if (*(char *)(a2 + 23) >= 0)
            v17 = a2;
          else
            v17 = *(_QWORD *)a2;
          v9 = sub_21A693A8C(v10, *(__CFArray **)(a1 + 48), (uint64_t)"%ks=%O", v12, v13, v14, v15, v16, v17);
          CFRelease(*a3);
        }
        else
        {
          v9 = 4294960568;
        }
      }
    }
  }
  else
  {
    v9 = 4294967292;
  }
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v23.__r_.__value_.__l.__data_);
  return v9;
}

void sub_21A6BF978(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a17 < 0)
    operator delete(__p);
  if (a24 < 0)
    operator delete(a19);
  _Unwind_Resume(exception_object);
}

uint64_t sub_21A6BF9B8(uint64_t a1, unsigned __int8 *a2, CFNumberRef number, uint64_t a4)
{
  uint64_t v4;
  uint64_t v7;
  BOOL v8;
  CFIndex v9;
  uint64_t v10;
  const char *v11;
  int64_t size;
  std::string *v13;
  _BYTE *v14;
  std::string *v15;
  _BYTE *v16;
  std::string::size_type v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const char *v22;
  std::string *v23;
  uint64_t v24;
  CFIndex Count;
  uint64_t v26;
  uint64_t v27;
  int v28;
  _BOOL4 v30;
  const __CFString *v31;
  const __CFString **v32;
  int v34;
  int v35;
  CFArrayRef theArray;
  unsigned int valuePtr;
  std::string v38;
  void *__p[2];
  char v40;
  uint64_t v41;

  v4 = a4;
  v41 = *MEMORY[0x24BDAC8D0];
  memset(&v38, 0, sizeof(v38));
  valuePtr = 0;
  theArray = 0;
  if (number)
  {
    if (!CFNumberGetValue(number, kCFNumberSInt32Type, &valuePtr))
    {
      v7 = 4294960553;
      goto LABEL_78;
    }
    v7 = valuePtr;
    switch(valuePtr)
    {
      case 0u:
        goto LABEL_78;
      case 0x3E8u:
        sub_21A6CE0F0(__p, "raCA");
        sub_21A6B3A38(a2, (uint64_t)__p, &v38);
        if (v40 < 0)
          operator delete(__p[0]);
        v32 = (const __CFString **)MEMORY[0x24BDBD270];
        goto LABEL_76;
      case 0x7D0u:
        v8 = sub_21A6BC694(a1, v4);
        if (v8)
          goto LABEL_10;
        MEMORY[0x220747320](&v38, "WiFi.radios.[*].");
        sub_21A6CE0F0(__p, "raCA");
        sub_21A6B3A38((unsigned __int8 *)&v38, (uint64_t)__p, &v38);
        if (v40 < 0)
          operator delete(__p[0]);
        v7 = sub_21A6B2DEC(a1, (uint64_t)&v38, (const __CFString *)*MEMORY[0x24BDBD268], v4);
        if (!(_DWORD)v7)
        {
LABEL_10:
          v9 = sub_21A6B262C(a1, 0);
          v35 = 0;
          if (v9 < 1)
          {
LABEL_83:
            v7 = 0;
          }
          else
          {
            v10 = 0;
            v11 = "WiFi.radios.[*].";
            while (1)
            {
              MEMORY[0x220747320](&v38, v11);
              sub_21A6B2D64((unsigned __int8 *)&v38, 1651724867, &v38);
              snprintf((char *)__p, 0x10uLL, "%ld", v10);
              if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                size = HIBYTE(v38.__r_.__value_.__r.__words[2]);
              else
                size = v38.__r_.__value_.__l.__size_;
              if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v13 = &v38;
              else
                v13 = (std::string *)v38.__r_.__value_.__r.__words[0];
              v14 = (char *)v13 + size;
              if (size >= 1)
              {
                v15 = v13;
                do
                {
                  v16 = memchr(v15, 42, size);
                  if (!v16)
                    break;
                  if (*v16 == 42)
                    goto LABEL_24;
                  v15 = (std::string *)(v16 + 1);
                  size = v14 - (_BYTE *)v15;
                }
                while (v14 - (_BYTE *)v15 > 0);
              }
              v16 = v14;
LABEL_24:
              v17 = v16 == v14 ? -1 : v16 - (_BYTE *)v13;
              std::string::replace(&v38, v17, 1uLL, (const std::string::value_type *)__p);
              v7 = sub_21A6B77DC(a1, (uint64_t)&v38, &v35, 0);
              if ((_DWORD)v7)
                break;
              if (!sub_21A6B3968(a1, (uint64_t)&v38, v35, 1))
              {
                if (!v8)
                {
                  v22 = v11;
                  v34 = 0;
                  if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                    v23 = &v38;
                  else
                    v23 = (std::string *)v38.__r_.__value_.__r.__words[0];
                  v7 = sub_21A6F47C0(a1, (const char *)v23, &theArray, 1);
                  if ((_DWORD)v7)
                    goto LABEL_78;
                  if (!theArray)
                  {
                    v7 = 4294967293;
                    goto LABEL_78;
                  }
                  Count = CFArrayGetCount(theArray);
                  if (Count >= 1)
                  {
                    v26 = 0;
                    do
                    {
                      sub_21A693B94((const __CFString *)theArray, (uint64_t)&v34, (UInt8 *)"[*]:int", v24, v18, v19, v20, v21, v26);
                      v7 = v27;
                      if ((_DWORD)v27)
                        goto LABEL_78;
                      v28 = v34;
                      if (v34 != 1000 && v34 != 8888)
                      {
                        if (dword_2550EEFA8 <= 8000)
                        {
                          if (dword_2550EEFA8 != -1
                            || (v30 = sub_21A69876C((uint64_t)&dword_2550EEFA8, 0x1F40u), v28 = v34, v30))
                          {
                            sub_21A698FDC((uint64_t)&dword_2550EEFA8, (uint64_t)"virtual ACPStatus BaseStation::SetBSSimpleChannel(const std::string &, CFTypeRef, eWhichValue)", 8000, (uint64_t)"%s: Fixing radio channel value for index: %ld @ %s to be %d.\n", v18, v19, v20, v21, (uint64_t)"virtual ACPStatus BaseStation::SetBSSimpleChannel(const std::string &, CFTypeRef, eWhichValue)");
                            v28 = v34;
                          }
                        }
                        v7 = sub_21A6B38E4(a1, (uint64_t)&v38, v28, 0);
                        if (!(_DWORD)v7)
                        {
                          v11 = v22;
                          goto LABEL_50;
                        }
                        goto LABEL_78;
                      }
                    }
                    while (Count != ++v26);
                  }
                  v11 = v22;
                }
                if (dword_2550EEFA8 <= 8000
                  && (dword_2550EEFA8 != -1 || sub_21A69876C((uint64_t)&dword_2550EEFA8, 0x1F40u)))
                {
                  sub_21A698FDC((uint64_t)&dword_2550EEFA8, (uint64_t)"virtual ACPStatus BaseStation::SetBSSimpleChannel(const std::string &, CFTypeRef, eWhichValue)", 8000, (uint64_t)"%s: Fixing radio channel value for index: %ld @ %s to be BSChannelAuto.\n", v18, v19, v20, v21, (uint64_t)"virtual ACPStatus BaseStation::SetBSSimpleChannel(const std::string &, CFTypeRef, eWhichValue)");
                }
                v7 = sub_21A6B38E4(a1, (uint64_t)&v38, 1000, 0);
                if ((_DWORD)v7)
                  goto LABEL_78;
              }
LABEL_50:
              if (++v10 == v9)
                goto LABEL_83;
            }
          }
        }
        goto LABEL_78;
    }
    sub_21A6CE0F0(__p, "raCh");
    sub_21A6B3A38(a2, (uint64_t)__p, &v38);
    if (v40 < 0)
      operator delete(__p[0]);
    v7 = sub_21A6B38E4(a1, (uint64_t)&v38, valuePtr, v4);
    if (!(_DWORD)v7)
    {
      sub_21A6CE0F0(__p, "raCA");
      sub_21A6B3A38(a2, (uint64_t)__p, &v38);
      if (v40 < 0)
        operator delete(__p[0]);
      v32 = (const __CFString **)MEMORY[0x24BDBD268];
LABEL_76:
      v31 = *v32;
LABEL_77:
      v7 = sub_21A6B2DEC(a1, (uint64_t)&v38, v31, v4);
    }
  }
  else
  {
    if ((_DWORD)a4 != 1)
    {
      v7 = 0;
      goto LABEL_80;
    }
    sub_21A6CE0F0(__p, "raCh");
    sub_21A6B3A38(a2, (uint64_t)__p, &v38);
    if (v40 < 0)
      operator delete(__p[0]);
    v7 = sub_21A6B2DEC(a1, (uint64_t)&v38, 0, 1);
    if (!(_DWORD)v7)
    {
      sub_21A6CE0F0(__p, "raCA");
      sub_21A6B3A38(a2, (uint64_t)__p, &v38);
      if (v40 < 0)
        operator delete(__p[0]);
      v31 = 0;
      v4 = 1;
      goto LABEL_77;
    }
  }
LABEL_78:
  if (theArray)
    CFRelease(theArray);
LABEL_80:
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v38.__r_.__value_.__l.__data_);
  return v7;
}

void sub_21A6BFF64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

uint64_t sub_21A6BFFDC(uint64_t a1, uint64_t a2, CFTypeRef *a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  const __CFAllocator *v10;
  CFNumberRef v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *__p[2];
  char v20;
  _BOOL4 valuePtr;
  BOOL v22;
  std::string v23;

  memset(&v23, 0, sizeof(v23));
  if (a3)
  {
    sub_21A6CE0F0(__p, "raCi");
    sub_21A6B3A38((unsigned __int8 *)a2, (uint64_t)__p, &v23);
    if (v20 < 0)
      operator delete(__p[0]);
    v22 = 0;
    v8 = sub_21A6B79E0(a1, (uint64_t)&v23, &v22, a4);
    v9 = v8;
    if (((_DWORD)a4 != 1 || (_DWORD)v8 != -5) && !(_DWORD)v8)
    {
      valuePtr = v22;
      v10 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
      v11 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], kCFNumberSInt32Type, &valuePtr);
      *a3 = v11;
      if (v11)
      {
        if (*(char *)(a2 + 23) >= 0)
          v17 = a2;
        else
          v17 = *(_QWORD *)a2;
        v9 = sub_21A693A8C(v10, *(__CFArray **)(a1 + 48), (uint64_t)"%ks=%O", v12, v13, v14, v15, v16, v17);
        CFRelease(*a3);
      }
      else
      {
        v9 = 4294960568;
      }
    }
  }
  else
  {
    v9 = 4294967292;
  }
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v23.__r_.__value_.__l.__data_);
  return v9;
}

void sub_21A6C010C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a17 < 0)
    operator delete(__p);
  if (a24 < 0)
    operator delete(a19);
  _Unwind_Resume(exception_object);
}

uint64_t sub_21A6C0144(uint64_t a1, unsigned __int8 *a2, CFNumberRef number, uint64_t a4)
{
  const __CFString **v7;
  uint64_t v8;
  void *__p[2];
  char v11;
  int valuePtr;
  std::string v13;

  memset(&v13, 0, sizeof(v13));
  valuePtr = 0;
  if (!CFNumberGetValue(number, kCFNumberSInt32Type, &valuePtr))
    return 4294960553;
  sub_21A6CE0F0(__p, "raCi");
  sub_21A6B3A38(a2, (uint64_t)__p, &v13);
  if (v11 < 0)
    operator delete(__p[0]);
  v7 = (const __CFString **)MEMORY[0x24BDBD270];
  if (!valuePtr)
    v7 = (const __CFString **)MEMORY[0x24BDBD268];
  v8 = sub_21A6B2DEC(a1, (uint64_t)&v13, *v7, a4);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
  return v8;
}

void sub_21A6C021C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a15 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  _Unwind_Resume(exception_object);
}

uint64_t sub_21A6C0254(uint64_t a1, unsigned __int8 *a2, _QWORD *a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  void *__p[2];
  char v13;
  int v14;
  std::string v15;

  memset(&v15, 0, sizeof(v15));
  v14 = 0;
  if (a3)
  {
    sub_21A6CE0F0(__p, "wdFl");
    sub_21A6B3A38(a2, (uint64_t)__p, &v15);
    if (v13 < 0)
      operator delete(__p[0]);
    v8 = sub_21A6B77DC(a1, (uint64_t)&v15, &v14, a4);
    v9 = v8;
    if (((_DWORD)a4 != 1 || (_DWORD)v8 != -5) && !(_DWORD)v8)
    {
      if ((v14 & 4) != 0)
        v10 = (_QWORD *)MEMORY[0x24BDBD270];
      else
        v10 = (_QWORD *)MEMORY[0x24BDBD268];
      *a3 = *v10;
    }
  }
  else
  {
    v9 = 4294967292;
  }
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v15.__r_.__value_.__l.__data_);
  return v9;
}

void sub_21A6C0338(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_21A6C0370(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  void *__p[2];
  char v11;
  unsigned int v12;
  std::string v13;

  memset(&v13, 0, sizeof(v13));
  v12 = 0;
  sub_21A6CE0F0(__p, "wdFl");
  sub_21A6B3A38(a2, (uint64_t)__p, &v13);
  if (v11 < 0)
    operator delete(__p[0]);
  v8 = sub_21A6B77DC(a1, (uint64_t)&v13, &v12, a4);
  if (!(_DWORD)v8)
  {
    v12 = v12 & 0xFFFFFFFB | (4 * (*MEMORY[0x24BDBD270] == a3));
    sub_21A6CE0F0(__p, "wdFl");
    sub_21A6B3A38(a2, (uint64_t)__p, &v13);
    if (v11 < 0)
      operator delete(__p[0]);
    v8 = sub_21A6B38E4(a1, (uint64_t)&v13, v12, a4);
  }
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
  return v8;
}

void sub_21A6C0484(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a15 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  _Unwind_Resume(exception_object);
}

uint64_t sub_21A6C04C4(uint64_t a1, uint64_t a2, CFTypeRef *a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  const __CFAllocator *v13;
  CFNumberRef v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t valuePtr;
  std::string __p;

  memset(&__p, 0, sizeof(__p));
  valuePtr = 0;
  v21 = 0;
  if (a3)
  {
    sub_21A6B2D64((unsigned __int8 *)a2, 2002864494, &__p);
    v8 = sub_21A6B77DC(a1, (uint64_t)&__p, &valuePtr, a4);
    v9 = v8;
    if (((_DWORD)a4 != 1 || (_DWORD)v8 != -5) && !(_DWORD)v8)
    {
      sub_21A6B2D64((unsigned __int8 *)a2, 2002862934, &__p);
      v10 = sub_21A6B77DC(a1, (uint64_t)&__p, &v21, a4);
      v9 = v10;
      if (((_DWORD)a4 != 1 || (_DWORD)v10 != -5) && !(_DWORD)v10)
      {
        if ((_DWORD)valuePtr == 16)
        {
          if ((~v21 & 0x900) != 0)
          {
            if ((v21 & 0x300) != 0)
              v11 = 6;
            else
              v11 = 7;
          }
          else
          {
            v11 = 2;
          }
          HIDWORD(valuePtr) = v11;
        }
        v13 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
        v14 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], kCFNumberSInt32Type, (char *)&valuePtr + 4);
        *a3 = v14;
        if (v14)
        {
          if (*(char *)(a2 + 23) >= 0)
            v20 = a2;
          else
            v20 = *(_QWORD *)a2;
          v9 = sub_21A693A8C(v13, *(__CFArray **)(a1 + 48), (uint64_t)"%ks=%O", v15, v16, v17, v18, v19, v20);
          CFRelease(*a3);
        }
        else
        {
          v9 = 4294960568;
        }
      }
    }
  }
  else
  {
    v9 = 4294967292;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v9;
}

void sub_21A6C0650(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_21A6C066C(uint64_t a1, unsigned __int8 *a2, CFNumberRef number, uint64_t a4)
{
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v11;
  BOOL v12;
  char v13;
  void *v14[2];
  char v15;
  void *__p;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  int v20;
  int valuePtr;
  std::string v22;

  memset(&v22, 0, sizeof(v22));
  valuePtr = 0;
  v19 = 0;
  v20 = 0;
  __p = 0;
  v17 = 0;
  v18 = 0;
  if (!CFNumberGetValue(number, kCFNumberSInt32Type, &valuePtr))
  {
    v7 = 4294960553;
    goto LABEL_11;
  }
  sub_21A6B2D64(a2, 2002862934, &v22);
  v7 = sub_21A6B77DC(a1, (uint64_t)&v22, &v19, a4);
  if ((_DWORD)v7)
    goto LABEL_11;
  if ((valuePtr - 6) < 2)
  {
    sub_21A6B2D64(a2, 2002864494, &v22);
    v7 = sub_21A6B38E4(a1, (uint64_t)&v22, 16, a4);
    if ((_DWORD)v7)
      goto LABEL_11;
    if (valuePtr == 7)
      v8 = 1024;
    else
      v8 = 768;
    v19 = v19 & 0xFFFFF0FF | v8;
    sub_21A6B2D64(a2, 2002862934, &v22);
    v9 = v19;
    goto LABEL_9;
  }
  if (valuePtr != 2)
    goto LABEL_29;
  sub_21A6B2D64(a2, 2002864494, &v22);
  v7 = sub_21A6B38E4(a1, (uint64_t)&v22, 16, a4);
  if (!(_DWORD)v7)
  {
    v19 = v19 & 0xFFFFF0FF | 0x900;
    sub_21A6B2D64(a2, 2002862934, &v22);
    v7 = sub_21A6B38E4(a1, (uint64_t)&v22, v19, a4);
    if (!(_DWORD)v7)
    {
      sub_21A6B2D64(a2, 2002864464, &v22);
      v7 = sub_21A6B7B5C(a1, (uint64_t)&v22, (uint64_t)&__p, a4);
      if (!(_DWORD)v7)
      {
        v11 = HIBYTE(v18);
        if (v18 < 0)
          v11 = v17;
        if (v11)
          goto LABEL_40;
        sub_21A6CE0F0(v14, "169.254.255.1");
        v7 = sub_21A6B7AD4(a1, (uint64_t)&v22, (uint64_t)v14, a4);
        if (v15 < 0)
          operator delete(v14[0]);
        if (!(_DWORD)v7)
        {
          sub_21A6B2D64(a2, 2002867021, &v22);
          sub_21A6CE0F0(v14, "255.255.255.0");
          v7 = sub_21A6B7AD4(a1, (uint64_t)&v22, (uint64_t)v14, a4);
          if (v15 < 0)
            operator delete(v14[0]);
          if (!(_DWORD)v7)
          {
LABEL_40:
            sub_21A6B2D64(a2, 1651724877, &v22);
            v7 = sub_21A6B7840(a1, (uint64_t)&v22, 0, a4);
            if (!(_DWORD)v7)
            {
              sub_21A6B2D64(a2, 912483943, &v22);
              v7 = sub_21A6B77DC(a1, (uint64_t)&v22, &v20, a4);
              if (!(_DWORD)v7)
              {
                v12 = sub_21A6AF0B4(a1, 1347437878);
                if (v20)
                  v13 = v12;
                else
                  v13 = 1;
                if ((v13 & 1) == 0)
                {
                  sub_21A6B2D64(a2, 912483943, &v22);
                  v9 = 0;
LABEL_9:
                  v7 = sub_21A6B38E4(a1, (uint64_t)&v22, v9, a4);
                  goto LABEL_11;
                }
LABEL_29:
                v7 = 0;
              }
            }
          }
        }
      }
    }
  }
LABEL_11:
  if (SHIBYTE(v18) < 0)
    operator delete(__p);
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v22.__r_.__value_.__l.__data_);
  return v7;
}

void sub_21A6C09B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;

  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (*(char *)(v21 - 33) < 0)
    operator delete(*(void **)(v21 - 56));
  _Unwind_Resume(exception_object);
}

uint64_t sub_21A6C0A00(uint64_t a1, unsigned __int8 *a2, _QWORD *a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  int v11;
  std::string __p;

  memset(&__p, 0, sizeof(__p));
  v11 = 0;
  if (a3)
  {
    sub_21A6B2D64(a2, 1836010822, &__p);
    v7 = sub_21A6B77DC(a1, (uint64_t)&__p, &v11, a4);
    v8 = v7;
    if (((_DWORD)a4 != 1 || (_DWORD)v7 != -5) && !(_DWORD)v7)
    {
      if (v11)
        v9 = (_QWORD *)MEMORY[0x24BDBD270];
      else
        v9 = (_QWORD *)MEMORY[0x24BDBD268];
      *a3 = *v9;
    }
  }
  else
  {
    v8 = 4294967292;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v8;
}

void sub_21A6C0AC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_21A6C0AE0(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  std::string __p;

  memset(&__p, 0, sizeof(__p));
  sub_21A6B2D64(a2, 1836010822, &__p);
  v7 = sub_21A6B38E4(a1, (uint64_t)&__p, *MEMORY[0x24BDBD270] == a3, a4);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v7;
}

void sub_21A6C0B6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_21A6C0B88(uint64_t a1, unsigned __int8 *a2, _QWORD *a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  int v11;
  std::string __p;

  memset(&__p, 0, sizeof(__p));
  v11 = 0;
  if (a3)
  {
    sub_21A6B2D64(a2, 1885619820, &__p);
    v7 = sub_21A6B77DC(a1, (uint64_t)&__p, &v11, a4);
    v8 = v7;
    if (((_DWORD)a4 != 1 || (_DWORD)v7 != -5) && !(_DWORD)v7)
    {
      if (v11)
        v9 = (_QWORD *)MEMORY[0x24BDBD270];
      else
        v9 = (_QWORD *)MEMORY[0x24BDBD268];
      *a3 = *v9;
    }
  }
  else
  {
    v8 = 4294967292;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v8;
}

void sub_21A6C0C4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_21A6C0C68(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  std::string __p;

  memset(&__p, 0, sizeof(__p));
  sub_21A6B2D64(a2, 1885619820, &__p);
  v7 = sub_21A6B38E4(a1, (uint64_t)&__p, *MEMORY[0x24BDBD270] == a3, a4);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v7;
}

void sub_21A6C0CF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_21A6C0D10(uint64_t a1, uint64_t a2, CFTypeRef *a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  int v10;
  const __CFAllocator *v11;
  CFNumberRef v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int valuePtr;
  BOOL v21;
  std::string __p;

  memset(&__p, 0, sizeof(__p));
  if (a3)
  {
    sub_21A6B2D64((unsigned __int8 *)a2, 1836011588, &__p);
    v21 = 0;
    v8 = sub_21A6B79E0(a1, (uint64_t)&__p, &v21, a4);
    v9 = v8;
    if (((_DWORD)a4 != 1 || (_DWORD)v8 != -5) && !(_DWORD)v8)
    {
      if (v21)
        v10 = 2;
      else
        v10 = 1;
      valuePtr = v10;
      v11 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
      v12 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], kCFNumberSInt32Type, &valuePtr);
      *a3 = v12;
      if (v12)
      {
        if (*(char *)(a2 + 23) >= 0)
          v18 = a2;
        else
          v18 = *(_QWORD *)a2;
        v9 = sub_21A693A8C(v11, *(__CFArray **)(a1 + 48), (uint64_t)"%ks=%O", v13, v14, v15, v16, v17, v18);
        CFRelease(*a3);
      }
      else
      {
        v9 = 4294960568;
      }
    }
  }
  else
  {
    v9 = 4294967292;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v9;
}

void sub_21A6C0E30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_21A6C0E4C(uint64_t a1, unsigned __int8 *a2, CFNumberRef number, uint64_t a4)
{
  int v7;
  const __CFString **v8;
  uint64_t v9;
  int valuePtr;
  std::string __p;

  memset(&__p, 0, sizeof(__p));
  valuePtr = 0;
  if (!CFNumberGetValue(number, kCFNumberSInt32Type, &valuePtr))
    return 4294960553;
  v7 = valuePtr;
  sub_21A6B2D64(a2, 1836011588, &__p);
  v8 = (const __CFString **)MEMORY[0x24BDBD270];
  if (v7 != 2)
    v8 = (const __CFString **)MEMORY[0x24BDBD268];
  v9 = sub_21A6B2DEC(a1, (uint64_t)&__p, *v8, a4);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v9;
}

void sub_21A6C0F08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_21A6C0F24(uint64_t a1, uint64_t a2, CFTypeRef *a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  const __CFAllocator *v10;
  CFNumberRef v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v19;
  int valuePtr;
  std::string __p;

  memset(&__p, 0, sizeof(__p));
  v19 = 0;
  if (a3)
  {
    sub_21A6B2D64((unsigned __int8 *)a2, 1836008265, &__p);
    v8 = sub_21A6B77DC(a1, (uint64_t)&__p, &v19, a4);
    v9 = v8;
    if (((_DWORD)a4 != 1 || (_DWORD)v8 != -5) && !(_DWORD)v8)
    {
      valuePtr = sub_21A6BC27C(a1, v19);
      if (valuePtr == -1)
      {
        v9 = 4294967291;
      }
      else
      {
        v10 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
        v11 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], kCFNumberSInt32Type, &valuePtr);
        *a3 = v11;
        if (v11)
        {
          if (*(char *)(a2 + 23) >= 0)
            v17 = a2;
          else
            v17 = *(_QWORD *)a2;
          v9 = sub_21A693A8C(v10, *(__CFArray **)(a1 + 48), (uint64_t)"%ks=%O", v12, v13, v14, v15, v16, v17);
          CFRelease(*a3);
        }
        else
        {
          v9 = 4294960568;
        }
      }
    }
  }
  else
  {
    v9 = 4294967292;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v9;
}

void sub_21A6C1050(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_21A6C106C(uint64_t a1, unsigned __int8 *a2, CFNumberRef number, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  int v10;
  uint64_t valuePtr;
  std::string __p;

  memset(&__p, 0, sizeof(__p));
  if (!number)
  {
    sub_21A6B2D64(a2, 1836008259, &__p);
    v7 = sub_21A6B2DEC(a1, (uint64_t)&__p, 0, a4);
    if ((_DWORD)v7)
      goto LABEL_10;
    sub_21A6B2D64(a2, 1836008265, &__p);
    v8 = sub_21A6B2DEC(a1, (uint64_t)&__p, 0, a4);
    goto LABEL_8;
  }
  valuePtr = 0;
  v10 = 0;
  if (CFNumberGetValue(number, kCFNumberSInt32Type, (char *)&valuePtr + 4))
  {
    v7 = sub_21A6BC30C(a1, HIDWORD(valuePtr), &v10, &valuePtr);
    if (!(_DWORD)v7)
    {
      sub_21A6B2D64(a2, 1836008259, &__p);
      v7 = sub_21A6B38E4(a1, (uint64_t)&__p, valuePtr, a4);
      if (!(_DWORD)v7)
      {
        sub_21A6B2D64(a2, 1836008265, &__p);
        v8 = sub_21A6B38E4(a1, (uint64_t)&__p, v10, a4);
LABEL_8:
        v7 = v8;
      }
    }
  }
  else
  {
    v7 = 4294960553;
  }
LABEL_10:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v7;
}

void sub_21A6C11BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_21A6C11DC(uint64_t a1, uint64_t a2, CFTypeRef *a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  const __CFAllocator *v10;
  void **v11;
  CFStringRef v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *__p[2];
  uint64_t v21;
  std::string v22;

  memset(&v22, 0, sizeof(v22));
  __p[0] = 0;
  __p[1] = 0;
  v21 = 0;
  if (a3)
  {
    sub_21A6B2D64((unsigned __int8 *)a2, 1853117270, &v22);
    v8 = sub_21A6B7B5C(a1, (uint64_t)&v22, (uint64_t)__p, a4);
    v9 = v8;
    if (((_DWORD)a4 != 1 || (_DWORD)v8 != -5) && !(_DWORD)v8)
    {
      v10 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
      if (v21 >= 0)
        v11 = __p;
      else
        v11 = (void **)__p[0];
      v12 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x24BDBD240], (const char *)v11, 0x8000100u);
      *a3 = v12;
      if (v12)
      {
        if (*(char *)(a2 + 23) >= 0)
          v18 = a2;
        else
          v18 = *(_QWORD *)a2;
        v9 = sub_21A693A8C(v10, *(__CFArray **)(a1 + 48), (uint64_t)"%ks=%O", v13, v14, v15, v16, v17, v18);
        CFRelease(*a3);
      }
      else
      {
        v9 = 4294960568;
      }
    }
  }
  else
  {
    v9 = 4294967292;
  }
  if (SHIBYTE(v21) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v22.__r_.__value_.__l.__data_);
  return v9;
}

void sub_21A6C1310(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  _Unwind_Resume(exception_object);
}

uint64_t sub_21A6C133C(uint64_t a1, unsigned __int8 *a2, const __CFString *a3, uint64_t a4)
{
  uint64_t v7;
  void *__p[2];
  char v10;
  void *v11;
  char *__s;
  std::string v13;

  memset(&v13, 0, sizeof(v13));
  v11 = 0;
  __s = 0;
  v7 = sub_21A694C44(a3, (const char **)&__s, (UInt8 **)&v11);
  if (!(_DWORD)v7)
  {
    sub_21A6B2D64(a2, 1853117270, &v13);
    sub_21A6CE0F0(__p, __s);
    v7 = sub_21A6B7AD4(a1, (uint64_t)&v13, (uint64_t)__p, a4);
    if (v10 < 0)
      operator delete(__p[0]);
  }
  if (v11)
    free(v11);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
  return v7;
}

void sub_21A6C1400(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a14 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  _Unwind_Resume(exception_object);
}

uint64_t sub_21A6C1438(uint64_t a1, uint64_t a2, CFTypeRef *a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  const __CFAllocator *v10;
  CFStringRef v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *__p[2];
  char v20;
  int v21;
  std::string v22;
  char __str[32];
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  memset(&v22, 0, sizeof(v22));
  v21 = 0;
  if (a3)
  {
    sub_21A6CE0F0(__p, "raAu");
    sub_21A6B3A38((unsigned __int8 *)a2, (uint64_t)__p, &v22);
    if (v20 < 0)
      operator delete(__p[0]);
    v8 = sub_21A6B77DC(a1, (uint64_t)&v22, &v21, a4);
    v9 = v8;
    if (((_DWORD)a4 != 1 || (_DWORD)v8 != -5) && !(_DWORD)v8)
    {
      snprintf(__str, 0x20uLL, "%u", v21);
      v10 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
      v11 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x24BDBD240], __str, 0x8000100u);
      *a3 = v11;
      if (v11)
      {
        if (*(char *)(a2 + 23) >= 0)
          v17 = a2;
        else
          v17 = *(_QWORD *)a2;
        v9 = sub_21A693A8C(v10, *(__CFArray **)(a1 + 48), (uint64_t)"%ks=%O", v12, v13, v14, v15, v16, v17);
        CFRelease(*a3);
      }
      else
      {
        v9 = 4294960568;
      }
    }
  }
  else
  {
    v9 = 4294967292;
  }
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v22.__r_.__value_.__l.__data_);
  return v9;
}

void sub_21A6C15AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a16 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  _Unwind_Resume(exception_object);
}

uint64_t sub_21A6C15E4(uint64_t a1, unsigned __int8 *a2, CFStringRef theString1, uint64_t a4)
{
  uint64_t v8;
  void *__p[2];
  char v11;
  void *v12;
  char *v13;
  int v14;
  std::string v15;

  memset(&v15, 0, sizeof(v15));
  v14 = 0;
  v12 = 0;
  v13 = 0;
  if (theString1 && CFStringCompare(theString1, &stru_24DD08368, 0))
  {
    v8 = sub_21A694C44(theString1, (const char **)&v13, (UInt8 **)&v12);
    if ((_DWORD)v8)
      goto LABEL_9;
    sscanf(v13, "%u", &v14);
  }
  else
  {
    v14 = 0;
  }
  sub_21A6CE0F0(__p, "raAu");
  sub_21A6B3A38(a2, (uint64_t)__p, &v15);
  if (v11 < 0)
    operator delete(__p[0]);
  v8 = sub_21A6B38E4(a1, (uint64_t)&v15, v14, a4);
LABEL_9:
  if (v12)
    free(v12);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v15.__r_.__value_.__l.__data_);
  return v8;
}

void sub_21A6C16E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a15 < 0)
    operator delete(__p);
  if (a24 < 0)
    operator delete(a19);
  _Unwind_Resume(exception_object);
}

uint64_t sub_21A6C1720(uint64_t a1, uint64_t a2, CFTypeRef *a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  const __CFAllocator *v10;
  CFStringRef v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *__p[2];
  char v20;
  int v21;
  std::string v22;
  char __str[32];
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  memset(&v22, 0, sizeof(v22));
  v21 = 0;
  if (a3)
  {
    sub_21A6CE0F0(__p, "raU2");
    sub_21A6B3A38((unsigned __int8 *)a2, (uint64_t)__p, &v22);
    if (v20 < 0)
      operator delete(__p[0]);
    v8 = sub_21A6B77DC(a1, (uint64_t)&v22, &v21, a4);
    v9 = v8;
    if (((_DWORD)a4 != 1 || (_DWORD)v8 != -5) && !(_DWORD)v8)
    {
      snprintf(__str, 0x20uLL, "%u", v21);
      v10 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
      v11 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x24BDBD240], __str, 0x8000100u);
      *a3 = v11;
      if (v11)
      {
        if (*(char *)(a2 + 23) >= 0)
          v17 = a2;
        else
          v17 = *(_QWORD *)a2;
        v9 = sub_21A693A8C(v10, *(__CFArray **)(a1 + 48), (uint64_t)"%ks=%O", v12, v13, v14, v15, v16, v17);
        CFRelease(*a3);
      }
      else
      {
        v9 = 4294960568;
      }
    }
  }
  else
  {
    v9 = 4294967292;
  }
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v22.__r_.__value_.__l.__data_);
  return v9;
}

void sub_21A6C1894(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a16 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  _Unwind_Resume(exception_object);
}

uint64_t sub_21A6C18CC(uint64_t a1, unsigned __int8 *a2, CFStringRef theString1, uint64_t a4)
{
  uint64_t v8;
  void *__p[2];
  char v11;
  void *v12;
  char *v13;
  int v14;
  std::string v15;

  memset(&v15, 0, sizeof(v15));
  v14 = 0;
  v12 = 0;
  v13 = 0;
  if (theString1 && CFStringCompare(theString1, &stru_24DD08368, 0))
  {
    v8 = sub_21A694C44(theString1, (const char **)&v13, (UInt8 **)&v12);
    if ((_DWORD)v8)
      goto LABEL_9;
    sscanf(v13, "%u", &v14);
  }
  else
  {
    v14 = 0;
  }
  sub_21A6CE0F0(__p, "raU2");
  sub_21A6B3A38(a2, (uint64_t)__p, &v15);
  if (v11 < 0)
    operator delete(__p[0]);
  v8 = sub_21A6B38E4(a1, (uint64_t)&v15, v14, a4);
LABEL_9:
  if (v12)
    free(v12);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v15.__r_.__value_.__l.__data_);
  return v8;
}

void sub_21A6C19D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a15 < 0)
    operator delete(__p);
  if (a24 < 0)
    operator delete(a19);
  _Unwind_Resume(exception_object);
}

uint64_t sub_21A6C1A08(uint64_t a1, uint64_t a2, CFTypeRef *a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  int v10;
  const __CFAllocator *v12;
  CFNumberRef v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *__p[2];
  char v21;
  uint64_t valuePtr;
  std::string v23;

  memset(&v23, 0, sizeof(v23));
  valuePtr = 0;
  if (a3)
  {
    sub_21A6CE0F0(__p, "wdFl");
    sub_21A6B3A38((unsigned __int8 *)a2, (uint64_t)__p, &v23);
    if (v21 < 0)
      operator delete(__p[0]);
    v8 = sub_21A6B77DC(a1, (uint64_t)&v23, &valuePtr, a4);
    v9 = v8;
    if (((_DWORD)a4 != 1 || (_DWORD)v8 != -5) && !(_DWORD)v8)
    {
      if ((valuePtr & 1) != 0)
      {
        if ((valuePtr & 2) != 0)
          v10 = 2;
        else
          v10 = 1;
      }
      else
      {
        if ((valuePtr & 2) == 0)
          goto LABEL_18;
        v10 = 3;
      }
      HIDWORD(valuePtr) = v10;
LABEL_18:
      v12 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
      v13 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], kCFNumberSInt32Type, (char *)&valuePtr + 4);
      *a3 = v13;
      if (v13)
      {
        if (*(char *)(a2 + 23) >= 0)
          v19 = a2;
        else
          v19 = *(_QWORD *)a2;
        v9 = sub_21A693A8C(v12, *(__CFArray **)(a1 + 48), (uint64_t)"%ks=%O", v14, v15, v16, v17, v18, v19);
        CFRelease(*a3);
      }
      else
      {
        v9 = 4294960568;
      }
    }
  }
  else
  {
    v9 = 4294967292;
  }
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v23.__r_.__value_.__l.__data_);
  return v9;
}

void sub_21A6C1B58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a17 < 0)
    operator delete(__p);
  if (a24 < 0)
    operator delete(a19);
  _Unwind_Resume(exception_object);
}

uint64_t sub_21A6C1B90(uint64_t a1, unsigned __int8 *a2, CFNumberRef number, uint64_t a4)
{
  uint64_t v7;
  int v8;
  void *__p[2];
  char v11;
  uint64_t valuePtr;
  std::string v13;

  memset(&v13, 0, sizeof(v13));
  valuePtr = 0;
  if (CFNumberGetValue(number, kCFNumberSInt32Type, (char *)&valuePtr + 4))
  {
    sub_21A6CE0F0(__p, "wdFl");
    sub_21A6B3A38(a2, (uint64_t)__p, &v13);
    if (v11 < 0)
      operator delete(__p[0]);
    v7 = sub_21A6B77DC(a1, (uint64_t)&v13, &valuePtr, a4);
    if (!(_DWORD)v7)
    {
      switch(HIDWORD(valuePtr))
      {
        case 0:
          v8 = valuePtr & 0xFFFFFFFC;
          goto LABEL_11;
        case 1:
          v8 = valuePtr & 0xFFFFFFFC | 1;
          goto LABEL_11;
        case 2:
          v8 = valuePtr | 3;
          goto LABEL_11;
        case 3:
          v8 = valuePtr & 0xFFFFFFFC | 2;
LABEL_11:
          LODWORD(valuePtr) = v8;
          break;
        default:
          break;
      }
      sub_21A6CE0F0(__p, "wdFl");
      sub_21A6B3A38(a2, (uint64_t)__p, &v13);
      if (v11 < 0)
        operator delete(__p[0]);
      v7 = sub_21A6B38E4(a1, (uint64_t)&v13, valuePtr, a4);
    }
  }
  else
  {
    v7 = 4294960553;
  }
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
  return v7;
}

void sub_21A6C1CF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a15 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  _Unwind_Resume(exception_object);
}

uint64_t sub_21A6C1D34(uint64_t a1, uint64_t a2, CFTypeRef *a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  int v11;
  const __CFAllocator *v12;
  CFNumberRef v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int valuePtr;
  BOOL v21;
  BOOL v22;
  std::string __p;

  memset(&__p, 0, sizeof(__p));
  if (a3)
  {
    sub_21A6B2D64((unsigned __int8 *)a2, 1885684035, &__p);
    v22 = 0;
    v8 = sub_21A6B79E0(a1, (uint64_t)&__p, &v22, a4);
    v9 = v8;
    if ((_DWORD)a4 == 1 && (_DWORD)v8 == -5)
      goto LABEL_10;
    if ((_DWORD)v8)
      goto LABEL_10;
    sub_21A6B2D64((unsigned __int8 *)a2, 1885688643, &__p);
    v21 = 0;
    v9 = sub_21A6B79E0(a1, (uint64_t)&__p, &v21, a4);
    if ((_DWORD)v9)
      goto LABEL_10;
    if (v22)
    {
      if (v21)
      {
        valuePtr = 0;
        goto LABEL_16;
      }
      v11 = 1;
    }
    else
    {
      v11 = 2;
    }
    valuePtr = v11;
LABEL_16:
    v12 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
    v13 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], kCFNumberSInt32Type, &valuePtr);
    *a3 = v13;
    if (v13)
    {
      if (*(char *)(a2 + 23) >= 0)
        v19 = a2;
      else
        v19 = *(_QWORD *)a2;
      v9 = sub_21A693A8C(v12, *(__CFArray **)(a1 + 48), (uint64_t)"%ks=%O", v14, v15, v16, v17, v18, v19);
      CFRelease(*a3);
    }
    else
    {
      v9 = 4294960568;
    }
    goto LABEL_10;
  }
  v9 = 4294967292;
LABEL_10:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v9;
}

void sub_21A6C1E9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_21A6C1EB8(uint64_t a1, unsigned __int8 *a2, CFNumberRef number, uint64_t a4)
{
  char v7;
  uint64_t v8;
  uint64_t v9;
  const __CFString *v10;
  uint64_t v11;
  int v12;
  const __CFString *v13;
  unsigned int valuePtr;
  std::string __p;

  memset(&__p, 0, sizeof(__p));
  valuePtr = 0;
  if (CFNumberGetValue(number, kCFNumberSInt32Type, &valuePtr))
  {
    v7 = valuePtr;
    if (valuePtr > 2)
    {
      v11 = 0;
    }
    else
    {
      sub_21A6B2D64(a2, 1885684035, &__p);
      v8 = *MEMORY[0x24BDBD270];
      v9 = *MEMORY[0x24BDBD268];
      if (((3u >> (v7 & 7)) & 1) != 0)
        v10 = (const __CFString *)*MEMORY[0x24BDBD270];
      else
        v10 = (const __CFString *)*MEMORY[0x24BDBD268];
      v11 = sub_21A6B2DEC(a1, (uint64_t)&__p, v10, a4);
      if (!(_DWORD)v11)
      {
        sub_21A6B2D64(a2, 1885688643, &__p);
        v12 = v7 & 7;
        v13 = (const __CFString *)(v12 ? v9 : v8);
        v11 = sub_21A6B2DEC(a1, (uint64_t)&__p, v13, a4);
        if (!(v12 | v11))
        {
          sub_21A6B2D64(a2, 1885686084, &__p);
          v11 = sub_21A6B38E4(a1, (uint64_t)&__p, 0, 0);
        }
      }
    }
  }
  else
  {
    v11 = 4294960553;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v11;
}

void sub_21A6C200C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_21A6C2028(uint64_t a1, uint64_t a2, CFTypeRef *a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  int v11;
  const __CFAllocator *v12;
  CFNumberRef v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int valuePtr;
  BOOL v21;
  BOOL v22;
  std::string __p;

  memset(&__p, 0, sizeof(__p));
  if (a3)
  {
    sub_21A6B2D64((unsigned __int8 *)a2, 1918977107, &__p);
    v22 = 0;
    v8 = sub_21A6B79E0(a1, (uint64_t)&__p, &v22, a4);
    v9 = v8;
    if ((_DWORD)a4 == 1 && (_DWORD)v8 == -5)
      goto LABEL_10;
    if ((_DWORD)v8)
      goto LABEL_10;
    sub_21A6B2D64((unsigned __int8 *)a2, 1918979649, &__p);
    v21 = 0;
    v9 = sub_21A6B79E0(a1, (uint64_t)&__p, &v21, a4);
    if ((_DWORD)v9)
      goto LABEL_10;
    if (v22)
    {
      if (v21)
      {
        valuePtr = 0;
        goto LABEL_18;
      }
      v11 = 1;
    }
    else if (v21)
    {
      v11 = 2;
    }
    else
    {
      v11 = 3;
    }
    valuePtr = v11;
LABEL_18:
    v12 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
    v13 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], kCFNumberSInt32Type, &valuePtr);
    *a3 = v13;
    if (v13)
    {
      if (*(char *)(a2 + 23) >= 0)
        v19 = a2;
      else
        v19 = *(_QWORD *)a2;
      v9 = sub_21A693A8C(v12, *(__CFArray **)(a1 + 48), (uint64_t)"%ks=%O", v14, v15, v16, v17, v18, v19);
      CFRelease(*a3);
    }
    else
    {
      v9 = 4294960568;
    }
    goto LABEL_10;
  }
  v9 = 4294967292;
LABEL_10:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v9;
}

void sub_21A6C219C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_21A6C21B8(uint64_t a1, unsigned __int8 *a2, CFNumberRef number, uint64_t a4)
{
  char v7;
  uint64_t v8;
  uint64_t v9;
  const __CFString *v10;
  uint64_t v11;
  const __CFString *v12;
  const __CFString *v13;
  _BOOL4 v14;
  unsigned int valuePtr;
  std::string __p;

  memset(&__p, 0, sizeof(__p));
  valuePtr = 0;
  if (CFNumberGetValue(number, kCFNumberSInt32Type, &valuePtr))
  {
    v7 = valuePtr;
    if (valuePtr > 3)
      goto LABEL_20;
    sub_21A6B2D64(a2, 1918979649, &__p);
    v8 = *MEMORY[0x24BDBD270];
    v9 = *MEMORY[0x24BDBD268];
    if ((v7 & 1) != 0)
      v10 = (const __CFString *)*MEMORY[0x24BDBD268];
    else
      v10 = (const __CFString *)*MEMORY[0x24BDBD270];
    v11 = sub_21A6B2DEC(a1, (uint64_t)&__p, v10, a4);
    if ((_DWORD)v11)
      goto LABEL_21;
    sub_21A6B2D64(a2, 1918977107, &__p);
    v12 = (const __CFString *)(((3u >> (v7 & 0xF)) & 1) != 0 ? v8 : v9);
    v11 = sub_21A6B2DEC(a1, (uint64_t)&__p, v12, a4);
    if ((_DWORD)v11)
      goto LABEL_21;
    sub_21A6B2D64(a2, 1918981954, &__p);
    v13 = (const __CFString *)((v7 & 1) != 0 ? v8 : v9);
    v11 = sub_21A6B2DEC(a1, (uint64_t)&__p, v13, a4);
    if ((_DWORD)v11)
      goto LABEL_21;
    v14 = !sub_21A6AF0B4(a1, 1396995415);
    if ((v7 & 1) == 0)
      LOBYTE(v14) = 1;
    if (v14)
    {
LABEL_20:
      v11 = 0;
    }
    else
    {
      sub_21A6B2D64(a2, 2002867012, &__p);
      v11 = sub_21A6B38E4(a1, (uint64_t)&__p, 0, a4);
    }
  }
  else
  {
    v11 = 4294960553;
  }
LABEL_21:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v11;
}

void sub_21A6C235C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_21A6C2378(uint64_t a1, unsigned __int8 *a2, _QWORD *a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  int v11;
  std::string __p;

  memset(&__p, 0, sizeof(__p));
  v11 = 0;
  if (a3)
  {
    sub_21A6B2D64(a2, 1936605510, &__p);
    v7 = sub_21A6B77DC(a1, (uint64_t)&__p, &v11, a4);
    v8 = v7;
    if (((_DWORD)a4 != 1 || (_DWORD)v7 != -5) && !(_DWORD)v7)
    {
      if ((v11 & 0xFFFFFFFE) == 2)
        v9 = (_QWORD *)MEMORY[0x24BDBD268];
      else
        v9 = (_QWORD *)MEMORY[0x24BDBD270];
      *a3 = *v9;
    }
  }
  else
  {
    v8 = 4294967292;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v8;
}

void sub_21A6C2440(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_21A6C245C(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  int v9;
  int v11;
  std::string __p;

  memset(&__p, 0, sizeof(__p));
  v11 = 0;
  sub_21A6B2D64(a2, 1936605510, &__p);
  v8 = sub_21A6B77DC(a1, (uint64_t)&__p, &v11, a4);
  if (!(_DWORD)v8)
  {
    if (*MEMORY[0x24BDBD270] == a3)
      v9 = v11 & 0xFFFFFFFD;
    else
      v9 = v11 | 3;
    v11 = v9;
    sub_21A6B2D64(a2, 1936605510, &__p);
    v8 = sub_21A6B38E4(a1, (uint64_t)&__p, v11, a4);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v8;
}

void sub_21A6C253C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_21A6C2558(uint64_t a1, unsigned __int8 *a2, _QWORD *a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  int v11;
  std::string __p;

  memset(&__p, 0, sizeof(__p));
  v11 = 0;
  if (a3)
  {
    sub_21A6B2D64(a2, 1936605510, &__p);
    v7 = sub_21A6B77DC(a1, (uint64_t)&__p, &v11, a4);
    v8 = v7;
    if (((_DWORD)a4 != 1 || (_DWORD)v7 != -5) && !(_DWORD)v7)
    {
      if (((v11 - 1) & 0xFFFFFFFD) != 0)
        v9 = (_QWORD *)MEMORY[0x24BDBD270];
      else
        v9 = (_QWORD *)MEMORY[0x24BDBD268];
      *a3 = *v9;
    }
  }
  else
  {
    v8 = 4294967292;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v8;
}

void sub_21A6C2620(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_21A6C263C(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  unsigned int v10;
  std::string __p;

  memset(&__p, 0, sizeof(__p));
  v10 = 0;
  sub_21A6B2D64(a2, 1936605510, &__p);
  v8 = sub_21A6B77DC(a1, (uint64_t)&__p, &v10, a4);
  if (!(_DWORD)v8)
  {
    v10 = v10 & 0xFFFFFFFE | (*MEMORY[0x24BDBD270] != a3);
    sub_21A6B2D64(a2, 1936605510, &__p);
    v8 = sub_21A6B38E4(a1, (uint64_t)&__p, v10, a4);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v8;
}

void sub_21A6C271C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_21A6C2738(uint64_t a1, unsigned __int8 *a2, _QWORD *a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  int v11;
  std::string __p;

  memset(&__p, 0, sizeof(__p));
  v11 = 0;
  if (a3)
  {
    sub_21A6B2D64(a2, 1970496070, &__p);
    v7 = sub_21A6B77DC(a1, (uint64_t)&__p, &v11, a4);
    v8 = v7;
    if (((_DWORD)a4 != 1 || (_DWORD)v7 != -5) && !(_DWORD)v7)
    {
      if ((v11 & 2) != 0)
        v9 = (_QWORD *)MEMORY[0x24BDBD270];
      else
        v9 = (_QWORD *)MEMORY[0x24BDBD268];
      *a3 = *v9;
    }
  }
  else
  {
    v8 = 4294967292;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v8;
}

void sub_21A6C27FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_21A6C2818(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  unsigned int v10;
  std::string __p;

  memset(&__p, 0, sizeof(__p));
  v10 = 0;
  sub_21A6B2D64(a2, 1970496070, &__p);
  v8 = sub_21A6B77DC(a1, (uint64_t)&__p, &v10, a4);
  if (!(_DWORD)v8)
  {
    v10 = v10 & 0xFFFFFFFD | (2 * (*MEMORY[0x24BDBD270] == a3));
    sub_21A6B2D64(a2, 1970496070, &__p);
    v8 = sub_21A6B38E4(a1, (uint64_t)&__p, v10, a4);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v8;
}

void sub_21A6C28F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_21A6C2910(uint64_t a1, unsigned __int8 *a2, _QWORD *a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  int v11;
  std::string __p;

  memset(&__p, 0, sizeof(__p));
  v11 = 0;
  if (a3)
  {
    sub_21A6B2D64(a2, 1970496070, &__p);
    v7 = sub_21A6B77DC(a1, (uint64_t)&__p, &v11, a4);
    v8 = v7;
    if (((_DWORD)a4 != 1 || (_DWORD)v7 != -5) && !(_DWORD)v7)
    {
      if ((v11 & 0x100) != 0)
        v9 = (_QWORD *)MEMORY[0x24BDBD270];
      else
        v9 = (_QWORD *)MEMORY[0x24BDBD268];
      *a3 = *v9;
    }
  }
  else
  {
    v8 = 4294967292;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v8;
}

void sub_21A6C29D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_21A6C29F0(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  unsigned int v10;
  std::string __p;

  memset(&__p, 0, sizeof(__p));
  v10 = 0;
  sub_21A6B2D64(a2, 1970496070, &__p);
  v8 = sub_21A6B77DC(a1, (uint64_t)&__p, &v10, a4);
  if (!(_DWORD)v8)
  {
    v10 = v10 & 0xFFFFFEFF | ((*MEMORY[0x24BDBD270] == a3) << 8);
    sub_21A6B2D64(a2, 1970496070, &__p);
    v8 = sub_21A6B38E4(a1, (uint64_t)&__p, v10, a4);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v8;
}

void sub_21A6C2ACC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_21A6C2AE8(uint64_t a1, unsigned __int8 *a2, _QWORD *a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  BOOL v11;
  std::string __p;

  memset(&__p, 0, sizeof(__p));
  if (a3)
  {
    sub_21A6B2D64(a2, 2002865741, &__p);
    v11 = 0;
    v7 = sub_21A6B79E0(a1, (uint64_t)&__p, &v11, a4);
    v8 = v7;
    if (((_DWORD)a4 != 1 || (_DWORD)v7 != -5) && !(_DWORD)v7)
    {
      if (v11)
        v9 = (_QWORD *)MEMORY[0x24BDBD268];
      else
        v9 = (_QWORD *)MEMORY[0x24BDBD270];
      *a3 = *v9;
    }
  }
  else
  {
    v8 = 4294967292;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v8;
}

void sub_21A6C2BAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_21A6C2BC8(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4)
{
  const __CFString *v6;
  const __CFString *v7;
  uint64_t v8;
  _BOOL4 v10;
  BOOL v12;
  std::string __p;

  memset(&__p, 0, sizeof(__p));
  v6 = (const __CFString *)*MEMORY[0x24BDBD268];
  if (*MEMORY[0x24BDBD270] == a3)
    v7 = (const __CFString *)*MEMORY[0x24BDBD268];
  else
    v7 = (const __CFString *)*MEMORY[0x24BDBD270];
  sub_21A6B2D64(a2, 2002865741, &__p);
  v8 = sub_21A6B2DEC(a1, (uint64_t)&__p, v7, a4);
  if (!(_DWORD)v8)
  {
    v12 = 0;
    v8 = sub_21A6B7A3C(a1, 2002929006, &v12, 0);
    if (!(_DWORD)v8)
    {
      v10 = v12 && v7 == v6;
      v8 = sub_21A6AF140(a1, 2002927939, v10, 0);
    }
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v8;
}

void sub_21A6C2CB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_21A6C2CCC(uint64_t a1, uint64_t a2, CFTypeRef *a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  const __CFAllocator *v10;
  CFNumberRef v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *__p[2];
  char v20;
  unsigned int valuePtr;
  std::string v22;

  memset(&v22, 0, sizeof(v22));
  valuePtr = 0;
  if (a3)
  {
    sub_21A6CE0F0(__p, "raKT");
    sub_21A6B3A38((unsigned __int8 *)a2, (uint64_t)__p, &v22);
    if (v20 < 0)
      operator delete(__p[0]);
    v8 = sub_21A6B77DC(a1, (uint64_t)&v22, &valuePtr, a4);
    v9 = v8;
    if (((_DWORD)a4 != 1 || (_DWORD)v8 != -5) && !(_DWORD)v8)
    {
      valuePtr /= 0x3Cu;
      v10 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
      v11 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], kCFNumberSInt32Type, &valuePtr);
      *a3 = v11;
      if (v11)
      {
        if (*(char *)(a2 + 23) >= 0)
          v17 = a2;
        else
          v17 = *(_QWORD *)a2;
        v9 = sub_21A693A8C(v10, *(__CFArray **)(a1 + 48), (uint64_t)"%ks=%O", v12, v13, v14, v15, v16, v17);
        CFRelease(*a3);
      }
      else
      {
        v9 = 4294960568;
      }
    }
  }
  else
  {
    v9 = 4294967292;
  }
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v22.__r_.__value_.__l.__data_);
  return v9;
}

void sub_21A6C2E0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a17 < 0)
    operator delete(__p);
  if (a24 < 0)
    operator delete(a19);
  _Unwind_Resume(exception_object);
}

uint64_t sub_21A6C2E44(uint64_t a1, unsigned __int8 *a2, CFNumberRef number, uint64_t a4)
{
  uint64_t v7;
  void *__p[2];
  char v10;
  int valuePtr;
  std::string v12;

  memset(&v12, 0, sizeof(v12));
  valuePtr = 0;
  if (!CFNumberGetValue(number, kCFNumberSInt32Type, &valuePtr))
    return 4294960553;
  sub_21A6CE0F0(__p, "raKT");
  sub_21A6B3A38(a2, (uint64_t)__p, &v12);
  if (v10 < 0)
    operator delete(__p[0]);
  v7 = sub_21A6B38E4(a1, (uint64_t)&v12, 60 * valuePtr, a4);
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v12.__r_.__value_.__l.__data_);
  return v7;
}

void sub_21A6C2F08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a15 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  _Unwind_Resume(exception_object);
}

uint64_t sub_21A6C2F40(uint64_t a1, uint64_t a2, CFTypeRef *a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  int v10;
  const __CFAllocator *v12;
  CFNumberRef v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *__p[2];
  char v21;
  BOOL v22;
  uint64_t valuePtr;
  std::string v24;

  memset(&v24, 0, sizeof(v24));
  valuePtr = 0;
  v22 = 0;
  if (a3)
  {
    sub_21A6CE0F0(__p, "wdFl");
    sub_21A6B3A38((unsigned __int8 *)a2, (uint64_t)__p, &v24);
    if (v21 < 0)
      operator delete(__p[0]);
    v8 = sub_21A6B77DC(a1, (uint64_t)&v24, (char *)&valuePtr + 4, a4);
    v9 = v8;
    if (((_DWORD)a4 != 1 || (_DWORD)v8 != -5) && !(_DWORD)v8)
    {
      sub_21A6CE0F0(__p, "raSt");
      sub_21A6B3A38((unsigned __int8 *)a2, (uint64_t)__p, &v24);
      if (v21 < 0)
        operator delete(__p[0]);
      v9 = sub_21A6B77DC(a1, (uint64_t)&v24, &valuePtr, a4);
      if (!(_DWORD)v9)
      {
        if (sub_21A6AF0B4(a1, 1146569811))
        {
          sub_21A6CE0F0(__p, "dWDS");
          sub_21A6B3A38((unsigned __int8 *)a2, (uint64_t)__p, &v24);
          if (v21 < 0)
            operator delete(__p[0]);
          sub_21A6B79E0(a1, (uint64_t)&v24, &v22, a4);
        }
        if ((_DWORD)valuePtr)
        {
          if ((_DWORD)valuePtr != 1 || !v22)
          {
LABEL_25:
            v12 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
            v13 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], kCFNumberSInt32Type, &valuePtr);
            *a3 = v13;
            if (v13)
            {
              if (*(char *)(a2 + 23) >= 0)
                v19 = a2;
              else
                v19 = *(_QWORD *)a2;
              v9 = sub_21A693A8C(v12, *(__CFArray **)(a1 + 48), (uint64_t)"%ks=%O", v14, v15, v16, v17, v18, v19);
              CFRelease(*a3);
            }
            else
            {
              v9 = 4294960568;
            }
            goto LABEL_19;
          }
          v10 = 20;
        }
        else
        {
          if ((valuePtr & 0x300000000) == 0)
            goto LABEL_25;
          v10 = 10;
        }
        LODWORD(valuePtr) = v10;
        goto LABEL_25;
      }
    }
  }
  else
  {
    v9 = 4294967292;
  }
LABEL_19:
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v24.__r_.__value_.__l.__data_);
  return v9;
}

void sub_21A6C3144(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a16 < 0)
    operator delete(__p);
  if (a24 < 0)
    operator delete(a19);
  _Unwind_Resume(exception_object);
}

uint64_t sub_21A6C318C(uint64_t a1, unsigned __int8 *a2, CFNumberRef number, uint64_t a4)
{
  uint64_t v7;
  int v8;
  int v9;
  _BOOL4 v10;
  const __CFString **v12;
  uint64_t v13;
  char v14;
  void *v15[2];
  char v16;
  std::string __p;
  uint64_t valuePtr;
  std::string v19;
  char __s[17];
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  memset(&v19, 0, sizeof(v19));
  valuePtr = 0;
  if (!CFNumberGetValue(number, kCFNumberSInt32Type, &valuePtr))
  {
    v7 = 4294960553;
    goto LABEL_17;
  }
  sub_21A6CE0F0(&__p, "wdFl");
  sub_21A6B3A38(a2, (uint64_t)&__p, &v19);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v7 = sub_21A6B77DC(a1, (uint64_t)&v19, (char *)&valuePtr + 4, a4);
  if ((_DWORD)v7)
    goto LABEL_17;
  v8 = 0;
  v9 = 1;
  if ((int)valuePtr > 2)
  {
    if ((_DWORD)valuePtr != 3)
    {
      if ((_DWORD)valuePtr == 10)
      {
        if ((valuePtr & 0x300000000) == 0)
        {
          v13 = sub_21A6B26A8(a1, 0);
          sub_21A6C379C(__s, 0x11uLL, v13);
          sub_21A6CE0F0(&__p, __s);
          sub_21A6CE0F0(v15, "wdFl");
          sub_21A6B3A38((unsigned __int8 *)&__p, (uint64_t)v15, &__p);
          if (v16 < 0)
            operator delete(v15[0]);
          HIDWORD(valuePtr) |= 1u;
          sub_21A6CE0F0(v15, "wdFl");
          sub_21A6B3A38(a2, (uint64_t)v15, &v19);
          if (v16 < 0)
            operator delete(v15[0]);
          if (!sub_21A6BB5DC((unsigned __int8 *)&v19, (unsigned __int8 *)&__p))
            goto LABEL_50;
          v7 = sub_21A6B38E4(a1, (uint64_t)&v19, SHIDWORD(valuePtr), a4);
          if ((_DWORD)v7)
            goto LABEL_49;
          sub_21A6CE0F0(v15, "raCA");
          sub_21A6B3A38((unsigned __int8 *)&v19, (uint64_t)v15, &v19);
          if (v16 < 0)
            operator delete(v15[0]);
          v7 = sub_21A6B2DEC(a1, (uint64_t)&v19, (const __CFString *)*MEMORY[0x24BDBD268], a4);
          if ((_DWORD)v7)
          {
LABEL_49:
            v14 = 0;
          }
          else
          {
LABEL_50:
            v7 = 0;
            v14 = 1;
          }
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          if ((v14 & 1) == 0)
            goto LABEL_17;
        }
        v8 = 0;
        LODWORD(valuePtr) = 0;
      }
      else if ((_DWORD)valuePtr == 20)
      {
        v10 = sub_21A6AF0B4(a1, 1196311928);
        sub_21A6CE0F0(&__p, "wdFl");
        sub_21A6B3A38(a2, (uint64_t)&__p, &v19);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        v7 = sub_21A6B38E4(a1, (uint64_t)&v19, 0, a4);
        if ((_DWORD)v7)
          goto LABEL_17;
        sub_21A6CE0F0(&__p, "dWDS");
        sub_21A6B3A38(a2, (uint64_t)&__p, &v19);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        v7 = sub_21A6B2DEC(a1, (uint64_t)&v19, (const __CFString *)*MEMORY[0x24BDBD270], a4);
        if ((_DWORD)v7)
          goto LABEL_17;
        v8 = !v10;
        LODWORD(valuePtr) = 1;
      }
      goto LABEL_55;
    }
    goto LABEL_23;
  }
  if (!(_DWORD)valuePtr)
  {
LABEL_24:
    sub_21A6CE0F0(&__p, "wdFl");
    sub_21A6B3A38(a2, (uint64_t)&__p, &v19);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v7 = sub_21A6B38E4(a1, (uint64_t)&v19, 0, a4);
    if ((_DWORD)v7)
      goto LABEL_17;
    if (sub_21A6AF0B4(a1, 1146569811))
    {
      sub_21A6CE0F0(&__p, "dWDS");
      sub_21A6B3A38(a2, (uint64_t)&__p, &v19);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      v12 = (const __CFString **)MEMORY[0x24BDBD270];
      if ((_DWORD)valuePtr)
        v12 = (const __CFString **)MEMORY[0x24BDBD268];
      v7 = sub_21A6B2DEC(a1, (uint64_t)&v19, *v12, a4);
      if ((_DWORD)v7)
        goto LABEL_17;
    }
    if ((_DWORD)valuePtr == 3)
    {
      LODWORD(__p.__r_.__value_.__l.__data_) = 0;
      v7 = sub_21A6AD02C(a1, 1651724358, &__p, 0);
      if ((_DWORD)v7)
        goto LABEL_17;
      if (LODWORD(__p.__r_.__value_.__l.__data_) == 4)
      {
        v7 = sub_21A6AFE60(a1, 1651724877, 3, a4);
        if ((_DWORD)v7)
          goto LABEL_17;
      }
    }
    if (!v9)
    {
LABEL_59:
      if (!v8
        || !sub_21A6AF0B4(a1, 1198748750)
        || (sub_21A6B2D64(a2, 1651722053, &v19),
            v7 = sub_21A6B2DEC(a1, (uint64_t)&v19, (const __CFString *)*MEMORY[0x24BDBD268], a4),
            !(_DWORD)v7))
      {
        sub_21A6CE0F0(&__p, "raSt");
        sub_21A6B3A38(a2, (uint64_t)&__p, &v19);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        v7 = sub_21A6B38E4(a1, (uint64_t)&v19, valuePtr, a4);
      }
      goto LABEL_17;
    }
    goto LABEL_55;
  }
  if ((_DWORD)valuePtr == 1)
  {
    v9 = 0;
LABEL_23:
    v8 = 1;
    goto LABEL_24;
  }
LABEL_55:
  if (!sub_21A6AF0B4(a1, 1884509249))
    goto LABEL_59;
  sub_21A6CE0F0(&__p, "pSTA");
  sub_21A6B3A38(a2, (uint64_t)&__p, &v19);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v7 = sub_21A6B2DEC(a1, (uint64_t)&v19, (const __CFString *)*MEMORY[0x24BDBD268], a4);
  if (!(_DWORD)v7)
    goto LABEL_59;
LABEL_17:
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v19.__r_.__value_.__l.__data_);
  return v7;
}

void sub_21A6C36FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  if (a27 < 0)
    operator delete(a22);
  _Unwind_Resume(exception_object);
}

void *sub_21A6C379C(void *a1, std::string::size_type a2, uint64_t a3)
{
  std::string __p;
  std::string v8;

  memset(&v8, 0, sizeof(v8));
  if (a1 && a2 >= 0x11)
  {
    bzero(a1, a2);
    sub_21A6B1474(a3, &__p);
    std::string::operator=(&v8, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0)
    {
      if (v8.__r_.__value_.__l.__size_ < a2)
        strcpy((char *)a1, v8.__r_.__value_.__l.__data_);
      operator delete(v8.__r_.__value_.__l.__data_);
    }
    else if (HIBYTE(v8.__r_.__value_.__r.__words[2]) < a2)
    {
      strcpy((char *)a1, (const char *)&v8);
    }
  }
  return a1;
}

void sub_21A6C3860(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_21A6C3894(uint64_t a1, uint64_t a2, CFTypeRef *a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  const __CFAllocator *v13;
  CFNumberRef v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *__p[2];
  char v22;
  uint64_t v23;
  BOOL v24;
  int valuePtr;
  std::string v26;

  memset(&v26, 0, sizeof(v26));
  valuePtr = 0;
  v24 = 0;
  v23 = 0;
  if (a3)
  {
    sub_21A6CE0F0(__p, "acEn");
    sub_21A6B3A38((unsigned __int8 *)a2, (uint64_t)__p, &v26);
    if (v22 < 0)
      operator delete(__p[0]);
    v8 = sub_21A6B79E0(a1, (uint64_t)&v26, &v24, a4);
    v9 = v8;
    if (((_DWORD)a4 != 1 || (_DWORD)v8 != -5) && !(_DWORD)v8)
    {
      sub_21A6CE0F0(__p, "raFl");
      sub_21A6B3A38((unsigned __int8 *)a2, (uint64_t)__p, &v26);
      if (v22 < 0)
        operator delete(__p[0]);
      v10 = sub_21A6B77DC(a1, (uint64_t)&v26, (char *)&v23 + 4, a4);
      v9 = v10;
      if (((_DWORD)a4 != 1 || (_DWORD)v10 != -5) && !(_DWORD)v10)
      {
        sub_21A6CE0F0(__p, "raF2");
        sub_21A6B3A38((unsigned __int8 *)a2, (uint64_t)__p, &v26);
        if (v22 < 0)
          operator delete(__p[0]);
        v9 = sub_21A6B77DC(a1, (uint64_t)&v26, &v23, a4);
        if (!(_DWORD)v9)
        {
          if (v24)
          {
            if (sub_21A6AF0B4(a1, 1950434124))
              v11 = 3;
            else
              v11 = 1;
          }
          else
          {
            if ((v23 & 0x100000000) == 0 && (v23 & 1) == 0)
            {
LABEL_27:
              v13 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
              v14 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], kCFNumberSInt32Type, &valuePtr);
              *a3 = v14;
              if (v14)
              {
                if (*(char *)(a2 + 23) >= 0)
                  v20 = a2;
                else
                  v20 = *(_QWORD *)a2;
                v9 = sub_21A693A8C(v13, *(__CFArray **)(a1 + 48), (uint64_t)"%ks=%O", v15, v16, v17, v18, v19, v20);
                CFRelease(*a3);
              }
              else
              {
                v9 = 4294960568;
              }
              goto LABEL_19;
            }
            v11 = 2;
          }
          valuePtr = v11;
          goto LABEL_27;
        }
      }
    }
  }
  else
  {
    v9 = 4294967292;
  }
LABEL_19:
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v26.__r_.__value_.__l.__data_);
  return v9;
}

void sub_21A6C3AB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a16 < 0)
    operator delete(__p);
  if (a24 < 0)
    operator delete(a19);
  _Unwind_Resume(exception_object);
}

uint64_t sub_21A6C3AF8(uint64_t a1, unsigned __int8 *a2, CFNumberRef number, uint64_t a4)
{
  uint64_t v7;
  const __CFString **v8;
  const __CFString *v10;
  int v11;
  void *__p[2];
  char v13;
  int v14;
  uint64_t valuePtr;
  std::string v16;

  memset(&v16, 0, sizeof(v16));
  valuePtr = 0;
  v14 = 0;
  if (CFNumberGetValue(number, kCFNumberSInt32Type, (char *)&valuePtr + 4))
  {
    sub_21A6CE0F0(__p, "raFl");
    sub_21A6B3A38(a2, (uint64_t)__p, &v16);
    if (v13 < 0)
      operator delete(__p[0]);
    v7 = sub_21A6B77DC(a1, (uint64_t)&v16, &valuePtr, a4);
    if (!(_DWORD)v7)
    {
      sub_21A6CE0F0(__p, "raF2");
      sub_21A6B3A38(a2, (uint64_t)__p, &v16);
      if (v13 < 0)
        operator delete(__p[0]);
      v7 = sub_21A6B77DC(a1, (uint64_t)&v16, &v14, a4);
      if (!(_DWORD)v7)
      {
        switch(HIDWORD(valuePtr))
        {
          case 0:
            v8 = (const __CFString **)MEMORY[0x24BDBD268];
            goto LABEL_16;
          case 1:
          case 3:
            v8 = (const __CFString **)MEMORY[0x24BDBD270];
LABEL_16:
            v10 = *v8;
            LODWORD(valuePtr) = valuePtr & 0xFFFFFFFE;
            v11 = v14 & 0xFFFFFFFE;
            goto LABEL_18;
          case 2:
            v10 = (const __CFString *)*MEMORY[0x24BDBD268];
            LODWORD(valuePtr) = valuePtr | 1;
            v11 = v14 | 1;
LABEL_18:
            v14 = v11;
            sub_21A6CE0F0(__p, "acEn");
            sub_21A6B3A38(a2, (uint64_t)__p, &v16);
            if (v13 < 0)
              operator delete(__p[0]);
            v7 = sub_21A6B2DEC(a1, (uint64_t)&v16, v10, a4);
            if (!(_DWORD)v7)
            {
              sub_21A6CE0F0(__p, "raFl");
              sub_21A6B3A38(a2, (uint64_t)__p, &v16);
              if (v13 < 0)
                operator delete(__p[0]);
              v7 = sub_21A6B38E4(a1, (uint64_t)&v16, valuePtr, a4);
              if (!(_DWORD)v7)
              {
                sub_21A6CE0F0(__p, "raF2");
                sub_21A6B3A38(a2, (uint64_t)__p, &v16);
                if (v13 < 0)
                  operator delete(__p[0]);
                v7 = sub_21A6B38E4(a1, (uint64_t)&v16, v14, a4);
              }
            }
            break;
          default:
            v7 = 0;
            break;
        }
      }
    }
  }
  else
  {
    v7 = 4294960553;
  }
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v16.__r_.__value_.__l.__data_);
  return v7;
}

void sub_21A6C3D68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a14 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  _Unwind_Resume(exception_object);
}

uint64_t sub_21A6C3DC0(uint64_t a1, unsigned __int8 *a2, _QWORD *a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  int v11;
  std::string __p;

  memset(&__p, 0, sizeof(__p));
  v11 = 0;
  if (a3)
  {
    sub_21A6B2D64(a2, 1970496070, &__p);
    v7 = sub_21A6B77DC(a1, (uint64_t)&__p, &v11, a4);
    v8 = v7;
    if (((_DWORD)a4 != 1 || (_DWORD)v7 != -5) && !(_DWORD)v7)
    {
      if ((v11 & 4) != 0)
        v9 = (_QWORD *)MEMORY[0x24BDBD268];
      else
        v9 = (_QWORD *)MEMORY[0x24BDBD270];
      *a3 = *v9;
    }
  }
  else
  {
    v8 = 4294967292;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v8;
}

void sub_21A6C3E84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_21A6C3EA0(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  unsigned int v10;
  std::string __p;

  memset(&__p, 0, sizeof(__p));
  v10 = 0;
  sub_21A6B2D64(a2, 1970496070, &__p);
  v8 = sub_21A6B77DC(a1, (uint64_t)&__p, &v10, a4);
  if (!(_DWORD)v8)
  {
    v10 = v10 & 0xFFFFFFFB | (4 * (*MEMORY[0x24BDBD270] != a3));
    sub_21A6B2D64(a2, 1970496070, &__p);
    v8 = sub_21A6B38E4(a1, (uint64_t)&__p, v10, a4);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v8;
}

void sub_21A6C3F7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_21A6C3F98(uint64_t a1, unsigned __int8 *a2, _QWORD *a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  int v11;
  std::string __p;

  memset(&__p, 0, sizeof(__p));
  v11 = 0;
  if (a3)
  {
    sub_21A6B2D64(a2, 1970496070, &__p);
    v7 = sub_21A6B77DC(a1, (uint64_t)&__p, &v11, a4);
    v8 = v7;
    if (((_DWORD)a4 != 1 || (_DWORD)v7 != -5) && !(_DWORD)v7)
    {
      if ((v11 & 8) != 0)
        v9 = (_QWORD *)MEMORY[0x24BDBD270];
      else
        v9 = (_QWORD *)MEMORY[0x24BDBD268];
      *a3 = *v9;
    }
  }
  else
  {
    v8 = 4294967292;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v8;
}

void sub_21A6C405C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_21A6C4078(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  BOOL v13;
  unsigned int v14;
  std::string __p;

  memset(&__p, 0, sizeof(__p));
  v14 = 0;
  sub_21A6B2D64(a2, 1970496070, &__p);
  v8 = sub_21A6B77DC(a1, (uint64_t)&__p, &v14, a4);
  if (!(_DWORD)v8)
  {
    v9 = *MEMORY[0x24BDBD270];
    v14 = v14 & 0xFFFFFFF7 | (8 * (*MEMORY[0x24BDBD270] == a3));
    sub_21A6B2D64(a2, 1970496070, &__p);
    v8 = sub_21A6B38E4(a1, (uint64_t)&__p, v14, a4);
    if (!(_DWORD)v8)
    {
      v13 = 0;
      v8 = sub_21A6B7A3C(a1, 2002929006, &v13, 0);
      if (!(_DWORD)v8)
      {
        if (v9 != a3 || !v13)
          v11 = *MEMORY[0x24BDBD268];
        else
          v11 = v9;
        v8 = (*(uint64_t (**)(uint64_t, unsigned __int8 *, uint64_t, uint64_t))(*(_QWORD *)a1 + 504))(a1, a2, v11, a4);
      }
    }
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v8;
}

void sub_21A6C41B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_21A6C41D0(uint64_t a1, unsigned __int8 *a2, _QWORD *a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  int v11;
  std::string __p;

  memset(&__p, 0, sizeof(__p));
  v11 = 0;
  if (a3)
  {
    sub_21A6B2D64(a2, 1970496070, &__p);
    v7 = sub_21A6B77DC(a1, (uint64_t)&__p, &v11, a4);
    v8 = v7;
    if (((_DWORD)a4 != 1 || (_DWORD)v7 != -5) && !(_DWORD)v7)
    {
      if ((v11 & 0x200) != 0)
        v9 = (_QWORD *)MEMORY[0x24BDBD270];
      else
        v9 = (_QWORD *)MEMORY[0x24BDBD268];
      *a3 = *v9;
    }
  }
  else
  {
    v8 = 4294967292;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v8;
}

void sub_21A6C4294(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_21A6C42B0(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  unsigned int v10;
  std::string __p;

  memset(&__p, 0, sizeof(__p));
  v10 = 0;
  sub_21A6B2D64(a2, 1970496070, &__p);
  v8 = sub_21A6B77DC(a1, (uint64_t)&__p, &v10, a4);
  if (!(_DWORD)v8)
  {
    v10 = v10 & 0xFFFFFDFF | ((*MEMORY[0x24BDBD270] == a3) << 9);
    sub_21A6B2D64(a2, 1970496070, &__p);
    v8 = sub_21A6B38E4(a1, (uint64_t)&__p, v10, a4);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v8;
}

void sub_21A6C438C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_21A6C43A8(uint64_t a1, uint64_t a2, CFTypeRef *a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  int v10;
  const __CFAllocator *v12;
  CFNumberRef v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int valuePtr;
  int v21;
  std::string __p;

  memset(&__p, 0, sizeof(__p));
  v21 = 0;
  if (a3)
  {
    sub_21A6B2D64((unsigned __int8 *)a2, 1970496070, &__p);
    v8 = sub_21A6B77DC(a1, (uint64_t)&__p, &v21, a4);
    v9 = v8;
    if (((_DWORD)a4 != 1 || (_DWORD)v8 != -5) && !(_DWORD)v8)
    {
      if ((v21 & 0x10) != 0)
      {
        valuePtr = 0;
      }
      else
      {
        if ((v21 & 0x20) != 0)
          v10 = 1;
        else
          v10 = 2;
        valuePtr = v10;
      }
      v12 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
      v13 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], kCFNumberSInt32Type, &valuePtr);
      *a3 = v13;
      if (v13)
      {
        if (*(char *)(a2 + 23) >= 0)
          v19 = a2;
        else
          v19 = *(_QWORD *)a2;
        v9 = sub_21A693A8C(v12, *(__CFArray **)(a1 + 48), (uint64_t)"%ks=%O", v14, v15, v16, v17, v18, v19);
        CFRelease(*a3);
      }
      else
      {
        v9 = 4294960568;
      }
    }
  }
  else
  {
    v9 = 4294967292;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v9;
}

void sub_21A6C44D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_21A6C44F4(uint64_t a1, unsigned __int8 *a2, CFNumberRef number, uint64_t a4)
{
  uint64_t v7;
  unsigned int v8;
  uint64_t v10;
  std::string __p;

  memset(&__p, 0, sizeof(__p));
  v10 = 0;
  if (CFNumberGetValue(number, kCFNumberSInt32Type, &v10))
  {
    sub_21A6B2D64(a2, 1970496070, &__p);
    v7 = sub_21A6B77DC(a1, (uint64_t)&__p, (char *)&v10 + 4, a4);
    if (!(_DWORD)v7)
    {
      if ((_DWORD)v10 == 1)
      {
        v8 = HIDWORD(v10) & 0xFFFFFFCF | 0x20;
      }
      else if ((_DWORD)v10 == 2)
      {
        v8 = HIDWORD(v10) & 0xFFFFFFCF;
      }
      else
      {
        v8 = HIDWORD(v10) | 0x30;
      }
      HIDWORD(v10) = v8;
      sub_21A6B2D64(a2, 1970496070, &__p);
      v7 = sub_21A6B38E4(a1, (uint64_t)&__p, SHIDWORD(v10), a4);
    }
  }
  else
  {
    v7 = 4294960553;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v7;
}

void sub_21A6C4600(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_21A6C461C(uint64_t a1, uint64_t a2, CFTypeRef *a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  int v13;
  const __CFAllocator *v14;
  CFNumberRef v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int valuePtr;
  void *__p;
  uint64_t v24;
  uint64_t v25;
  int v26;
  std::string v27;

  memset(&v27, 0, sizeof(v27));
  v26 = 0;
  __p = 0;
  v24 = 0;
  v25 = 0;
  if (!a3)
  {
    v9 = 4294967292;
    goto LABEL_8;
  }
  sub_21A6B2D64((unsigned __int8 *)a2, 1970496070, &v27);
  v8 = sub_21A6B77DC(a1, (uint64_t)&v27, &v26, a4);
  v9 = v8;
  if (((_DWORD)a4 != 1 || (_DWORD)v8 != -5) && !(_DWORD)v8)
  {
    if ((v26 & 0x40) != 0)
    {
      sub_21A6B2D64((unsigned __int8 *)a2, 1718842224, &v27);
      v11 = sub_21A6B7B5C(a1, (uint64_t)&v27, (uint64_t)&__p, a4);
      v9 = v11;
      if ((_DWORD)v11)
      {
        if ((_DWORD)v11 != -5)
          goto LABEL_8;
        MEMORY[0x220747320](&__p, "");
      }
      v12 = HIBYTE(v25);
      if (v25 < 0)
        v12 = v24;
      if (v12 || *(_BYTE *)(a1 + 384))
        v13 = 1;
      else
        v13 = 2;
      valuePtr = v13;
    }
    else
    {
      valuePtr = 0;
    }
    v14 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
    v15 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], kCFNumberSInt32Type, &valuePtr);
    *a3 = v15;
    if (v15)
    {
      if (*(char *)(a2 + 23) >= 0)
        v21 = a2;
      else
        v21 = *(_QWORD *)a2;
      v9 = sub_21A693A8C(v14, *(__CFArray **)(a1 + 48), (uint64_t)"%ks=%O", v16, v17, v18, v19, v20, v21);
      CFRelease(*a3);
    }
    else
    {
      v9 = 4294960568;
    }
  }
LABEL_8:
  if (SHIBYTE(v25) < 0)
    operator delete(__p);
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v27.__r_.__value_.__l.__data_);
  return v9;
}

void sub_21A6C47C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a17 < 0)
    operator delete(__p);
  if (a24 < 0)
    operator delete(a19);
  _Unwind_Resume(exception_object);
}

uint64_t sub_21A6C47F4(uint64_t a1, unsigned __int8 *a2, CFNumberRef number, uint64_t a4)
{
  uint64_t v7;
  void *__p[2];
  char v10;
  uint64_t valuePtr;
  std::string v12;

  memset(&v12, 0, sizeof(v12));
  valuePtr = 0;
  if (!number)
  {
    v7 = 4294960591;
    goto LABEL_15;
  }
  if (!CFNumberGetValue(number, kCFNumberSInt32Type, &valuePtr))
  {
    v7 = 4294960553;
    goto LABEL_15;
  }
  sub_21A6B2D64(a2, 1970496070, &v12);
  v7 = sub_21A6B77DC(a1, (uint64_t)&v12, (char *)&valuePtr + 4, a4);
  if ((_DWORD)v7)
    goto LABEL_15;
  *(_BYTE *)(a1 + 384) = 0;
  if ((_DWORD)valuePtr == 1)
  {
    HIDWORD(valuePtr) |= 0x40u;
    *(_BYTE *)(a1 + 384) = 1;
LABEL_14:
    sub_21A6B2D64(a2, 1970496070, &v12);
    v7 = sub_21A6B38E4(a1, (uint64_t)&v12, SHIDWORD(valuePtr), a4);
    goto LABEL_15;
  }
  if ((_DWORD)valuePtr == 2)
    HIDWORD(valuePtr) |= 0x40u;
  else
    HIDWORD(valuePtr) &= ~0x40u;
  sub_21A6B2D64(a2, 1718842224, &v12);
  sub_21A6CE0F0(__p, "");
  v7 = sub_21A6B7AD4(a1, (uint64_t)&v12, (uint64_t)__p, a4);
  if (v10 < 0)
    operator delete(__p[0]);
  if (!(_DWORD)v7)
    goto LABEL_14;
LABEL_15:
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v12.__r_.__value_.__l.__data_);
  return v7;
}

void sub_21A6C49A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a15 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  _Unwind_Resume(exception_object);
}

uint64_t sub_21A6C49E4(CFDictionaryRef *a1, unsigned __int8 *a2, const __CFString **a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  const __CFString *Value;
  const __CFString *v10;
  CFDictionaryRef theDict;
  std::string __p;

  memset(&__p, 0, sizeof(__p));
  theDict = 0;
  if (a3)
  {
    sub_21A6B2D64(a2, 1953066362, &__p);
    v7 = sub_21A6B64FC(a1, (uint64_t)&__p, &theDict, a4);
    v8 = v7;
    if (((_DWORD)a4 != 1 || (_DWORD)v7 != -5) && !(_DWORD)v7)
    {
      if (theDict)
      {
        Value = (const __CFString *)CFDictionaryGetValue(theDict, CFSTR("zoneName"));
        v10 = Value;
        if (!Value || !CFStringGetLength(Value))
          v10 = CFSTR("GMT");
        v8 = 0;
        *a3 = v10;
      }
      else
      {
        v8 = 0;
      }
    }
  }
  else
  {
    v8 = 4294967292;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v8;
}

void sub_21A6C4AC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_21A6C4AE0(uint64_t a1, unsigned __int8 *a2, CFStringRef theString, uint64_t a4)
{
  uint64_t v7;
  const __CFString *v9;
  std::string __p;

  memset(&__p, 0, sizeof(__p));
  v9 = 0;
  if (!theString)
    return 4294960591;
  v7 = sub_21A6F55C0(theString, &v9);
  if (!(_DWORD)v7)
  {
    sub_21A6B2D64(a2, 1953066362, &__p);
    v7 = sub_21A6B2DEC(a1, (uint64_t)&__p, v9, a4);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  return v7;
}

void sub_21A6C4B80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_21A6C4B9C(CFDictionaryRef *a1, uint64_t a2, CFTypeRef *a3, uint64_t a4)
{
  uint64_t v8;
  const __CFArray *Value;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  CFIndex v15;
  const __CFString *v16;
  const __CFArray *v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t i;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  const __CFAllocator *v30;
  CFIndex Count;
  const __CFString *theArray;
  int v33;
  __CFArray *v34;
  CFTypeRef v35;
  int v36;
  CFTypeRef v37;
  int v38;
  CFTypeRef cf;
  std::string __p;

  memset(&__p, 0, sizeof(__p));
  cf = 0;
  v38 = 0;
  v37 = 0;
  v36 = 0;
  v34 = 0;
  v35 = 0;
  v33 = 0;
  if (a3)
  {
    sub_21A6B2D64((unsigned __int8 *)a2, 1668573549, &__p);
    sub_21A6B77DC((uint64_t)a1, (uint64_t)&__p, &v33, a4);
    sub_21A6B2D64((unsigned __int8 *)a2, 1937331060, &__p);
    v8 = sub_21A6B64FC(a1, (uint64_t)&__p, (CFMutableDictionaryRef *)&cf, a4);
    if (!(_DWORD)v8)
    {
      if (!cf)
      {
        v8 = 4294967291;
        goto LABEL_12;
      }
      CFRetain(cf);
      Value = (const __CFArray *)CFDictionaryGetValue((CFDictionaryRef)cf, CFSTR("problems"));
      theArray = (const __CFString *)Value;
      if (Value)
      {
        Count = CFArrayGetCount(Value);
        sub_21A6B2D64((unsigned __int8 *)a2, 1937328487, &__p);
        v15 = 0;
        if (sub_21A6B64FC(a1, (uint64_t)&__p, (CFMutableDictionaryRef *)&v37, a4))
        {
          v16 = 0;
        }
        else
        {
          v16 = 0;
          if (v37)
          {
            CFRetain(v37);
            v17 = (const __CFArray *)CFDictionaryGetValue((CFDictionaryRef)v37, CFSTR("problems"));
            v16 = (const __CFString *)v17;
            if (v17)
              v15 = CFArrayGetCount(v17);
            else
              v15 = 0;
          }
        }
        v30 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
        v8 = sub_21A692FEC((const __CFAllocator *)*MEMORY[0x24BDBD240], &v35, (uint64_t)"{%kO=[%@]}", v10, v11, v12, v13, v14, (uint64_t)CFSTR("problems"));
        if (!(_DWORD)v8)
        {
          if (Count >= 1)
          {
            for (i = 0; i != Count; ++i)
            {
              sub_21A693B94(theArray, (uint64_t)&v38, (UInt8 *)"[*].%kO:code", v19, v20, v21, v22, v23, i);
              v8 = v25;
              if ((_DWORD)v25)
                goto LABEL_10;
              if (v15 >= 1)
              {
                v26 = 0;
                while (1)
                {
                  sub_21A693B94(v16, (uint64_t)&v36, (UInt8 *)"[*].%kO:code", v19, v20, v21, v22, v23, v26);
                  v8 = v27;
                  if ((_DWORD)v27)
                    goto LABEL_10;
                  if (v38 == v36)
                    goto LABEL_32;
                  if (v15 == ++v26)
                    goto LABEL_33;
                }
              }
              v26 = 0;
LABEL_32:
              if (v26 == v15)
              {
LABEL_33:
                if (v33)
                  goto LABEL_34;
                if (v38 > 2002862917)
                {
                  if (v38 == 2002862918)
                    continue;
                  v28 = 2002867022;
                }
                else
                {
                  if (v38 == 1869631063)
                    continue;
                  v28 = 1886741072;
                }
                if (v38 != v28)
                {
LABEL_34:
                  v8 = sub_21A693A8C(v30, v34, (uint64_t)"{%kO=%C}", v19, v20, v21, v22, v23, (uint64_t)CFSTR("code"));
                  if ((_DWORD)v8)
                    goto LABEL_10;
                }
              }
            }
          }
          *a3 = v35;
          if (*(char *)(a2 + 23) >= 0)
            v29 = a2;
          else
            v29 = *(_QWORD *)a2;
          v8 = sub_21A693A8C(v30, a1[6], (uint64_t)"%ks=%O", v19, v20, v21, v22, v23, v29);
          CFRelease(*a3);
        }
      }
      else
      {
        v8 = 0;
      }
    }
  }
  else
  {
    v8 = 4294967292;
  }
LABEL_10:
  if (cf)
    CFRelease(cf);
LABEL_12:
  if (v37)
    CFRelease(v37);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v8;
}

void sub_21A6C4EE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_21A6C4F04()
{
  return 0;
}

uint64_t sub_21A6C4F0C(uint64_t a1, unsigned __int8 *a2, _QWORD *a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  void *__p[2];
  char v13;
  int v14;
  std::string v15;

  memset(&v15, 0, sizeof(v15));
  v14 = 0;
  if (a3)
  {
    sub_21A6CE0F0(__p, "dwFl");
    sub_21A6B3A38(a2, (uint64_t)__p, &v15);
    if (v13 < 0)
      operator delete(__p[0]);
    v8 = sub_21A6B77DC(a1, (uint64_t)&v15, &v14, a4);
    v9 = v8;
    if (((_DWORD)a4 != 1 || (_DWORD)v8 != -5) && !(_DWORD)v8)
    {
      if ((v14 & 2) != 0)
        v10 = (_QWORD *)MEMORY[0x24BDBD268];
      else
        v10 = (_QWORD *)MEMORY[0x24BDBD270];
      *a3 = *v10;
    }
  }
  else
  {
    v9 = 4294967292;
  }
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v15.__r_.__value_.__l.__data_);
  return v9;
}

void sub_21A6C4FF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_21A6C5028(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  void *__p[2];
  char v11;
  unsigned int v12;
  std::string v13;

  memset(&v13, 0, sizeof(v13));
  v12 = 0;
  sub_21A6CE0F0(__p, "dwFl");
  sub_21A6B3A38(a2, (uint64_t)__p, &v13);
  if (v11 < 0)
    operator delete(__p[0]);
  v8 = sub_21A6B77DC(a1, (uint64_t)&v13, &v12, a4);
  if (!(_DWORD)v8)
  {
    v12 = v12 & 0xFFFFFFFD | (2 * (*MEMORY[0x24BDBD270] != a3));
    sub_21A6CE0F0(__p, "dwFl");
    sub_21A6B3A38(a2, (uint64_t)__p, &v13);
    if (v11 < 0)
      operator delete(__p[0]);
    v8 = sub_21A6B38E4(a1, (uint64_t)&v13, v12, a4);
  }
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
  return v8;
}

void sub_21A6C513C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a15 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  _Unwind_Resume(exception_object);
}

uint64_t sub_21A6C517C(uint64_t a1, unsigned __int8 *a2, _QWORD *a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  int v11;
  std::string __p;

  memset(&__p, 0, sizeof(__p));
  v11 = 0;
  if (a3)
  {
    sub_21A6B2D64(a2, 1936017004, &__p);
    v7 = sub_21A6B77DC(a1, (uint64_t)&__p, &v11, a4);
    v8 = v7;
    if (((_DWORD)a4 != 1 || (_DWORD)v7 != -5) && !(_DWORD)v7)
    {
      v9 = (_QWORD *)MEMORY[0x24BDBD270];
      if ((~v11 & 0x10001) != 0)
        v9 = (_QWORD *)MEMORY[0x24BDBD268];
      *a3 = *v9;
    }
  }
  else
  {
    v8 = 4294967292;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v8;
}

void sub_21A6C5244(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_21A6C5260()
{
  return 0;
}

uint64_t sub_21A6C5268(uint64_t a1, uint64_t a2, CFTypeRef *a3, uint64_t a4)
{
  const __CFAllocator *v8;
  __CFArray *Mutable;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t Length;
  const UInt8 *BytePtr;
  unsigned int *v19;
  unint64_t v20;
  unsigned int v21;
  uint64_t v22;
  CFDataRef theData;
  std::string __p;

  memset(&__p, 0, sizeof(__p));
  theData = 0;
  if (a3)
  {
    v8 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
    Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD690]);
    if (Mutable)
    {
      sub_21A6B2D64((unsigned __int8 *)a2, 1346918739, &__p);
      v10 = sub_21A6B44B4(a1, (uint64_t)&__p, &theData, a4);
      v11 = v10;
      if (((_DWORD)a4 != 1 || (_DWORD)v10 != -5) && !(_DWORD)v10)
      {
        Length = CFDataGetLength(theData);
        if (Length && (BytePtr = CFDataGetBytePtr(theData), Length >= 4))
        {
          v19 = (unsigned int *)BytePtr;
          v20 = Length >> 2;
          while (1)
          {
            v21 = *v19++;
            v11 = sub_21A693A8C(v8, Mutable, (uint64_t)"%i", v12, v13, v14, v15, v16, bswap32(v21));
            if ((_DWORD)v11)
              break;
            if (!--v20)
              goto LABEL_11;
          }
        }
        else
        {
LABEL_11:
          *a3 = Mutable;
          if (*(char *)(a2 + 23) >= 0)
            v22 = a2;
          else
            v22 = *(_QWORD *)a2;
          v11 = sub_21A693A8C(v8, *(__CFArray **)(a1 + 48), (uint64_t)"%ks=%O", v12, v13, v14, v15, v16, v22);
          CFRelease(*a3);
        }
      }
    }
    else
    {
      v11 = 4294960568;
    }
    if (theData)
    {
      CFRelease(theData);
      theData = 0;
    }
    if ((_DWORD)v11 && Mutable)
      CFRelease(Mutable);
  }
  else
  {
    v11 = 4294967292;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v11;
}

void sub_21A6C5408(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_21A6C542C()
{
  return 0;
}

uint64_t sub_21A6C5434(int a1, uint64_t a2, uint64_t a3, std::string *this)
{
  int v6;
  BOOL v7;
  unsigned __int8 *v8;
  uint64_t v9;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  uint64_t v13;
  int v14;
  int v15;
  std::string::size_type v16;
  unsigned __int8 *v17;
  unsigned __int8 *v18;
  unsigned __int8 *v19;
  unsigned __int8 *v20;
  int v21;
  std::string::size_type v22;
  size_t v23;
  std::string *p_str;
  void **v25;
  void *__p[2];
  unsigned __int8 v28;
  std::string __str;
  std::string v30;

  memset(&v30, 0, sizeof(v30));
  v6 = *(char *)(a2 + 23);
  v7 = v6 < 0;
  if (v6 >= 0)
    v8 = (unsigned __int8 *)a2;
  else
    v8 = *(unsigned __int8 **)a2;
  if (v7)
    v9 = *(_QWORD *)(a2 + 8);
  else
    v9 = *(unsigned __int8 *)(a2 + 23);
  v10 = &v8[v9];
  if (!v9)
  {
    v19 = v8;
LABEL_28:
    v22 = v19 - v8;
    if (v19 == v10)
      v16 = -1;
    else
      v16 = v22;
    goto LABEL_31;
  }
  v11 = v8;
  v12 = &v8[v9];
  do
  {
    if (*v11 == 46)
    {
      v13 = 1u;
      while (v13 != 6)
      {
        if (&v11[v13] == v10)
          goto LABEL_18;
        v14 = v11[v13];
        v15 = aVaps_1[v13++];
        if (v14 != v15)
          goto LABEL_10;
      }
      v12 = v11;
    }
LABEL_10:
    ++v11;
  }
  while (v11 != v10);
LABEL_18:
  if (v12 == v10 || (v16 = v12 - v8, v12 - v8 == -1))
  {
    v17 = v8;
    v18 = &v8[v9];
    do
    {
      v19 = v17;
      v20 = v17;
      while (1)
      {
        v21 = *v20++;
        if (v21 == 46)
          break;
        v19 = v20;
        if (v20 == v10)
        {
          v19 = v18;
          goto LABEL_28;
        }
      }
      v17 = v19 + 1;
      v18 = v19;
    }
    while (v20 != v10);
    goto LABEL_28;
  }
LABEL_31:
  std::string::operator=(this, (const std::string *)a2);
  if (v16 == -1)
    return 4294967292;
  std::string::basic_string(&__str, this, 0, v16, (std::allocator<char> *)__p);
  std::string::operator=(&v30, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  sub_21A6CE0F0(__p, "vaps.[*]");
  if ((v28 & 0x80u) == 0)
    v23 = v28;
  else
    v23 = (size_t)__p[1];
  p_str = &__str;
  sub_21A6CEBF8((uint64_t)&__str, v23 + 1);
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
  if (v23)
  {
    if ((v28 & 0x80u) == 0)
      v25 = __p;
    else
      v25 = (void **)__p[0];
    memmove(p_str, v25, v23);
  }
  *(_WORD *)((char *)&p_str->__r_.__value_.__l.__data_ + v23) = 46;
  sub_21A6B3A38((unsigned __int8 *)this, (uint64_t)&__str, this);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if ((char)v28 < 0)
    operator delete(__p[0]);
  sub_21A6B3A38((unsigned __int8 *)this, a3, this);
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v30.__r_.__value_.__l.__data_);
  return 0;
}

void sub_21A6C5674(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a20 < 0)
    operator delete(__p);
  if (a14 < 0)
    operator delete(a9);
  if (a26 < 0)
    operator delete(a21);
  _Unwind_Resume(exception_object);
}

uint64_t sub_21A6C56DC(CFDictionaryRef *a1, uint64_t a2, CFMutableDictionaryRef *a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  void *__p[2];
  char v12;
  void *v13[2];
  uint64_t v14;

  v13[0] = 0;
  v13[1] = 0;
  v14 = 0;
  if (!a3)
  {
    v9 = 4294967292;
    goto LABEL_9;
  }
  sub_21A6CE0F0(__p, "Enabled");
  v8 = (*((uint64_t (**)(CFDictionaryRef *, uint64_t, void **, void **))*a1 + 2))(a1, a2, __p, v13);
  v9 = v8;
  if (v12 < 0)
  {
    operator delete(__p[0]);
    if ((_DWORD)v9)
      goto LABEL_9;
  }
  else if ((_DWORD)v8)
  {
    goto LABEL_9;
  }
  v9 = sub_21A6B64FC(a1, (uint64_t)v13, a3, a4);
  if ((_DWORD)v9 == -5)
  {
    v9 = 0;
    *a3 = (CFMutableDictionaryRef)*MEMORY[0x24BDBD268];
  }
LABEL_9:
  if (SHIBYTE(v14) < 0)
    operator delete(v13[0]);
  return v9;
}

void sub_21A6C57BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_21A6C57F4(uint64_t a1, uint64_t a2, const __CFString *a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  void *__p[2];
  char v12;
  void *v13[2];
  uint64_t v14;

  v13[0] = 0;
  v13[1] = 0;
  v14 = 0;
  sub_21A6CE0F0(__p, "Enabled");
  v8 = (*(uint64_t (**)(uint64_t, uint64_t, void **, void **))(*(_QWORD *)a1 + 16))(a1, a2, __p, v13);
  v9 = v8;
  if (v12 < 0)
  {
    operator delete(__p[0]);
    if ((_DWORD)v9)
      goto LABEL_9;
  }
  else if ((_DWORD)v8)
  {
    goto LABEL_9;
  }
  v9 = sub_21A6B2DEC(a1, (uint64_t)v13, a3, a4);
  if (!(_DWORD)v9)
  {
    if ((const __CFString *)*MEMORY[0x24BDBD268] != a3)
      (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)a1 + 712))(a1, a2, *MEMORY[0x24BDBD268], a4);
    v9 = 0;
  }
LABEL_9:
  if (SHIBYTE(v14) < 0)
    operator delete(v13[0]);
  return v9;
}

void sub_21A6C58E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_21A6C5920(CFDictionaryRef *a1, uint64_t a2, CFMutableDictionaryRef *a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  void *__p[2];
  char v12;
  void *v13[2];
  uint64_t v14;

  v13[0] = 0;
  v13[1] = 0;
  v14 = 0;
  if (!a3)
  {
    v9 = 4294967292;
    goto LABEL_9;
  }
  sub_21A6CE0F0(__p, "raNm");
  v8 = (*((uint64_t (**)(CFDictionaryRef *, uint64_t, void **, void **))*a1 + 2))(a1, a2, __p, v13);
  v9 = v8;
  if (v12 < 0)
  {
    operator delete(__p[0]);
    if ((_DWORD)v9)
      goto LABEL_9;
  }
  else if ((_DWORD)v8)
  {
    goto LABEL_9;
  }
  *((_BYTE *)a1 + 386) = 1;
  v9 = sub_21A6B64FC(a1, (uint64_t)v13, a3, a4);
  *((_BYTE *)a1 + 386) = 0;
  if ((_DWORD)v9 == -5)
  {
    v9 = 0;
    *a3 = (CFMutableDictionaryRef)&stru_24DD08368;
  }
LABEL_9:
  if (SHIBYTE(v14) < 0)
    operator delete(v13[0]);
  return v9;
}

void sub_21A6C5A08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_21A6C5A40(_BYTE *a1, unsigned __int8 *a2, const __CFString *a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  void *v13[2];
  char v14;
  int v15;
  void *__p;
  uint64_t v17;
  uint64_t v18;
  CFTypeRef cf;
  BOOL v20;
  std::string v21;

  memset(&v21, 0, sizeof(v21));
  v20 = 0;
  cf = 0;
  sub_21A6CE0F0(&__p, "Enabled");
  v8 = (*(uint64_t (**)(_BYTE *, unsigned __int8 *, void **, std::string *))(*(_QWORD *)a1 + 16))(a1, a2, &__p, &v21);
  v9 = v8;
  if (SHIBYTE(v18) < 0)
  {
    operator delete(__p);
    if ((_DWORD)v9)
      goto LABEL_14;
  }
  else if ((_DWORD)v8)
  {
    goto LABEL_14;
  }
  if (sub_21A6B79E0((uint64_t)a1, (uint64_t)&v21, &v20, a4) == -5)
  {
    v9 = 0;
    goto LABEL_14;
  }
  v15 = 0;
  __p = 0;
  v17 = 0;
  v18 = 0;
  sub_21A6CE0F0(v13, "raNm");
  v10 = (*(uint64_t (**)(_BYTE *, unsigned __int8 *, void **, std::string *))(*(_QWORD *)a1 + 16))(a1, a2, v13, &v21);
  v9 = v10;
  if (v14 < 0)
  {
    operator delete(v13[0]);
    if (!(_DWORD)v9)
      goto LABEL_11;
  }
  else if (!(_DWORD)v10)
  {
LABEL_11:
    v9 = sub_21A6B44B4((uint64_t)a1, (uint64_t)&v21, (CFMutableDictionaryRef *)&cf, a4);
    if (!(_DWORD)v9)
    {
      if (cf)
      {
        a1[386] = 1;
        v9 = sub_21A6B2DEC((uint64_t)a1, (uint64_t)&v21, a3, a4);
        a1[386] = 0;
        if (!(_DWORD)v9)
        {
          sub_21A6CE0F0(v13, "raWM");
          sub_21A6B3A38((unsigned __int8 *)&v21, (uint64_t)v13, &v21);
          if (v14 < 0)
            operator delete(v13[0]);
          v9 = sub_21A6B77DC((uint64_t)a1, (uint64_t)&v21, &v15, a4);
          if (!(_DWORD)v9)
          {
            if (!a3 || (v15 - 3) > 5 || CFStringCompare(a3, (CFStringRef)cf, 0) == kCFCompareEqualTo)
              goto LABEL_37;
            sub_21A6CE0F0(v13, "raCr");
            sub_21A6B3A38((unsigned __int8 *)&v21, (uint64_t)v13, &v21);
            if (v14 < 0)
              operator delete(v13[0]);
            a1[386] = 1;
            v9 = sub_21A6B7B5C((uint64_t)a1, (uint64_t)&v21, (uint64_t)&__p, a4);
            a1[386] = 0;
            if (!(_DWORD)v9)
            {
              v12 = HIBYTE(v18);
              if (v18 < 0)
                v12 = v17;
              if (!v12)
                goto LABEL_37;
              a1[386] = 1;
              sub_21A6CE0F0(v13, "");
              v9 = sub_21A6B7AD4((uint64_t)a1, (uint64_t)&v21, (uint64_t)v13, a4);
              if (v14 < 0)
                operator delete(v13[0]);
              a1[386] = 0;
              if (!(_DWORD)v9)
              {
                sub_21A6B2D64(a2, 1651722064, &v21);
                v9 = sub_21A6B7AD4((uint64_t)a1, (uint64_t)&v21, (uint64_t)&__p, a4);
                if (!(_DWORD)v9)
LABEL_37:
                  v9 = 0;
              }
            }
          }
        }
      }
      else
      {
        v9 = 4294967291;
      }
    }
  }
  if (SHIBYTE(v18) < 0)
    operator delete(__p);
LABEL_14:
  if (cf)
    CFRelease(cf);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
  return v9;
}

void sub_21A6C5D5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a14 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a29 < 0)
    operator delete(a24);
  _Unwind_Resume(exception_object);
}

uint64_t sub_21A6C5DCC(__CFArray **a1, uint64_t a2, CFTypeRef *a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  const __CFAllocator *v12;
  CFNumberRef v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *__p[2];
  char v22;
  void *v23[2];
  uint64_t v24;
  int v25;
  int valuePtr;

  v25 = 0;
  valuePtr = 1;
  v23[0] = 0;
  v23[1] = 0;
  v24 = 0;
  if (!a3)
  {
    v9 = 4294967292;
    goto LABEL_20;
  }
  sub_21A6CE0F0(__p, "raWM");
  v8 = (*((uint64_t (**)(__CFArray **, uint64_t, void **, void **))*a1 + 2))(a1, a2, __p, v23);
  v9 = v8;
  if (v22 < 0)
  {
    operator delete(__p[0]);
    if ((_DWORD)v9)
      goto LABEL_20;
  }
  else if ((_DWORD)v8)
  {
    goto LABEL_20;
  }
  v10 = sub_21A6B77DC((uint64_t)a1, (uint64_t)v23, &v25, a4);
  v9 = v10;
  if ((_DWORD)v10 == -5 || !(_DWORD)v10)
  {
    if (v25 == 5)
    {
      v11 = 7;
    }
    else if (v25 == 4)
    {
      v11 = 5;
    }
    else
    {
      v11 = 1;
    }
    valuePtr = v11;
    v12 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
    v13 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], kCFNumberSInt32Type, &valuePtr);
    *a3 = v13;
    if (v13)
    {
      if (*(char *)(a2 + 23) >= 0)
        v19 = a2;
      else
        v19 = *(_QWORD *)a2;
      v9 = sub_21A693A8C(v12, a1[6], (uint64_t)"%ks=%O", v14, v15, v16, v17, v18, v19);
      CFRelease(*a3);
    }
    else
    {
      v9 = 4294960568;
    }
  }
LABEL_20:
  if (SHIBYTE(v24) < 0)
    operator delete(v23[0]);
  return v9;
}

void sub_21A6C5F38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_21A6C5F70(CFDictionaryRef *a1, uint64_t a2, CFNumberRef number, uint64_t a4)
{
  const __CFString *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::string::size_type size;
  CFMutableDictionaryRef theDict;
  std::string __p;
  std::string __str;
  int valuePtr;
  char v18;

  valuePtr = 1;
  memset(&__str, 0, sizeof(__str));
  if (!CFNumberGetValue(number, kCFNumberSInt32Type, &valuePtr))
  {
    v10 = 4294960553;
    goto LABEL_39;
  }
  v7 = (const __CFString *)*MEMORY[0x24BDBD268];
  if ((valuePtr | 2) != 7)
  {
    theDict = 0;
    sub_21A6CE0F0(&__p, "");
    v11 = (*((uint64_t (**)(CFDictionaryRef *, uint64_t, std::string *, std::string *))*a1 + 2))(a1, a2, &__p, &__str);
    v10 = v11;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__p.__r_.__value_.__l.__data_);
      if ((_DWORD)v10)
        goto LABEL_39;
    }
    else if ((_DWORD)v11)
    {
      goto LABEL_39;
    }
    size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      size = __str.__r_.__value_.__l.__size_;
    std::string::basic_string(&__p, &__str, 0, size - 1, (std::allocator<char> *)&v18);
    if (!sub_21A6B64FC(a1, (uint64_t)&__p, &theDict, a4) && theDict)
    {
      CFDictionaryRemoveValue(theDict, CFSTR("raKT"));
      CFDictionaryRemoveValue(theDict, CFSTR("rTSN"));
      CFDictionaryRemoveValue(theDict, CFSTR("raEA"));
      CFDictionaryRemoveValue(theDict, CFSTR("raWE"));
      CFDictionaryRemoveValue(theDict, CFSTR("raCr"));
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v8 = 0;
    goto LABEL_33;
  }
  if (valuePtr == 5)
    v8 = 4;
  else
    v8 = 5;
  sub_21A6CE0F0(&__p, "");
  v9 = (*((uint64_t (**)(CFDictionaryRef *, uint64_t, std::string *, std::string *))*a1 + 2))(a1, a2, &__p, &__str);
  v10 = v9;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((_DWORD)v10)
      goto LABEL_39;
  }
  else if ((_DWORD)v9)
  {
    goto LABEL_39;
  }
  sub_21A6CE0F0(&__p, "raKT");
  sub_21A6B3A38((unsigned __int8 *)&__str, (uint64_t)&__p, &__str);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v10 = sub_21A6B38E4((uint64_t)a1, (uint64_t)&__str, 3600, a4);
  if (!(_DWORD)v10)
  {
    sub_21A6CE0F0(&__p, "rTSN");
    sub_21A6B3A38((unsigned __int8 *)&__str, (uint64_t)&__p, &__str);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v10 = sub_21A6B2DEC((uint64_t)a1, (uint64_t)&__str, v7, a4);
    if (!(_DWORD)v10)
    {
      sub_21A6CE0F0(&__p, "raEA");
      sub_21A6B3A38((unsigned __int8 *)&__str, (uint64_t)&__p, &__str);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      v10 = sub_21A6B2DEC((uint64_t)a1, (uint64_t)&__str, v7, a4);
      if (!(_DWORD)v10)
      {
        v7 = (const __CFString *)*MEMORY[0x24BDBD270];
LABEL_33:
        sub_21A6CE0F0(&__p, "raWM");
        sub_21A6B3A38((unsigned __int8 *)&__str, (uint64_t)&__p, &__str);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        v10 = sub_21A6B38E4((uint64_t)a1, (uint64_t)&__str, v8, a4);
        if (!(_DWORD)v10)
        {
          sub_21A6CE0F0(&__p, "raSk");
          sub_21A6B3A38((unsigned __int8 *)&__str, (uint64_t)&__p, &__str);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          v10 = sub_21A6B2DEC((uint64_t)a1, (uint64_t)&__str, v7, a4);
        }
      }
    }
  }
LABEL_39:
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  return v10;
}

void sub_21A6C62E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

uint64_t sub_21A6C6358(CFDictionaryRef *a1, uint64_t a2, CFMutableDictionaryRef *a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  void *__p[2];
  char v12;
  void *v13[2];
  uint64_t v14;

  v13[0] = 0;
  v13[1] = 0;
  v14 = 0;
  if (!a3)
  {
    v9 = 4294967292;
    goto LABEL_9;
  }
  sub_21A6CE0F0(__p, "raCr");
  v8 = (*((uint64_t (**)(CFDictionaryRef *, uint64_t, void **, void **))*a1 + 2))(a1, a2, __p, v13);
  v9 = v8;
  if (v12 < 0)
  {
    operator delete(__p[0]);
    if ((_DWORD)v9)
      goto LABEL_9;
  }
  else if ((_DWORD)v8)
  {
    goto LABEL_9;
  }
  *((_BYTE *)a1 + 386) = 1;
  v9 = sub_21A6B64FC(a1, (uint64_t)v13, a3, a4);
  *((_BYTE *)a1 + 386) = 0;
  if ((_DWORD)v9 == -5)
  {
    v9 = 0;
    *a3 = (CFMutableDictionaryRef)&stru_24DD08368;
  }
LABEL_9:
  if (SHIBYTE(v14) < 0)
    operator delete(v13[0]);
  return v9;
}

void sub_21A6C6440(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_21A6C6478(CFDictionaryRef *a1, uint64_t a2, const __CFString *a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  std::string::size_type size;
  void *v16[2];
  char v17;
  void *v18;
  _BYTE *v19;
  uint64_t v20;
  CFMutableDictionaryRef theDict[2];
  uint64_t v22;
  std::string __p;
  std::string __str;
  CFStringRef v25;
  void *v26[2];
  uint64_t v27;
  UInt8 *v28;
  const char *v29;
  int v30;

  v30 = 0;
  v28 = 0;
  v29 = 0;
  v26[0] = 0;
  v26[1] = 0;
  v27 = 0;
  v25 = 0;
  memset(&__str, 0, sizeof(__str));
  sub_21A6CE0F0(&__p, "raWM");
  v8 = (*((uint64_t (**)(CFDictionaryRef *, uint64_t, std::string *, std::string *))*a1 + 2))(a1, a2, &__p, &__str);
  v9 = v8;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((_DWORD)v9)
      goto LABEL_6;
  }
  else if ((_DWORD)v8)
  {
    goto LABEL_6;
  }
  v9 = sub_21A694C44(a3, &v29, &v28);
  if (!(_DWORD)v9)
  {
    MEMORY[0x220747320](v26, v29);
    v11 = sub_21A6B77DC((uint64_t)a1, (uint64_t)&__str, &v30, a4);
    v9 = v11;
    if ((_DWORD)v11 != -5)
    {
      if ((_DWORD)v11)
        goto LABEL_6;
      if ((v30 & 0xFFFFFFFE) == 4)
      {
        memset(&__p, 0, sizeof(__p));
        theDict[0] = 0;
        theDict[1] = 0;
        v22 = 0;
        v18 = 0;
        v19 = 0;
        v20 = 0;
        sub_21A6CE0F0(v16, "raCr");
        sub_21A6B3A38((unsigned __int8 *)&__str, (uint64_t)v16, &__str);
        if (v17 < 0)
          operator delete(v16[0]);
        *((_BYTE *)a1 + 386) = 1;
        v12 = sub_21A6B7B5C((uint64_t)a1, (uint64_t)&__str, (uint64_t)theDict, a4);
        v9 = v12;
        *((_BYTE *)a1 + 386) = 0;
        if ((_DWORD)v12 != -5 && (_DWORD)v12)
          goto LABEL_43;
        if (sub_21A6BEA70((unsigned __int8 *)v26, (unsigned __int8 *)theDict))
        {
          sub_21A6CE0F0(v16, "raNm");
          sub_21A6B3A38((unsigned __int8 *)&__str, (uint64_t)v16, &__str);
          if (v17 < 0)
            operator delete(v16[0]);
          *((_BYTE *)a1 + 386) = 1;
          v9 = sub_21A6B7B5C((uint64_t)a1, (uint64_t)&__str, (uint64_t)&__p, a4);
          *((_BYTE *)a1 + 386) = 0;
          if ((_DWORD)v9)
            goto LABEL_43;
          if (!sub_21A6BC0E4((uint64_t)v26, (void **)&__p.__r_.__value_.__l.__data_, (unint64_t *)&v18, 0))
          {
            MEMORY[0x220747320](v26, "");
            sub_21A6CE0F0(v16, "raWE");
            sub_21A6B3A38((unsigned __int8 *)&__str, (uint64_t)v16, &__str);
            if (v17 < 0)
              operator delete(v16[0]);
            v25 = (CFStringRef)CFDataCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, 0);
            v14 = sub_21A6B2DEC((uint64_t)a1, (uint64_t)&__str, v25, a4);
            goto LABEL_53;
          }
          v13 = sub_21A6BB08C("raWE");
          v9 = sub_21A673FCC(v13, (unsigned __int8 *)v18, v19 - (_BYTE *)v18, 1, &v25);
          if (!(_DWORD)v9)
          {
            sub_21A6CE0F0(v16, "raWE");
            sub_21A6B3A38((unsigned __int8 *)&__str, (uint64_t)v16, &__str);
            if (v17 < 0)
              operator delete(v16[0]);
            v14 = sub_21A6B2DEC((uint64_t)a1, (uint64_t)&__str, v25, a4);
LABEL_53:
            v9 = v14;
            if (!(_DWORD)v14)
            {
              sub_21A6CE0F0(v16, "raCr");
              sub_21A6B3A38((unsigned __int8 *)&__str, (uint64_t)v16, &__str);
              if (v17 < 0)
                operator delete(v16[0]);
              *((_BYTE *)a1 + 386) = 1;
              v9 = sub_21A6B7AD4((uint64_t)a1, (uint64_t)&__str, (uint64_t)v26, a4);
              *((_BYTE *)a1 + 386) = 0;
            }
          }
        }
        else
        {
          v9 = 0;
        }
LABEL_43:
        if (v18)
        {
          v19 = v18;
          operator delete(v18);
        }
        if (SHIBYTE(v22) < 0)
          operator delete(theDict[0]);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        goto LABEL_6;
      }
      theDict[0] = 0;
      sub_21A6CE0F0(&__p, "");
      v9 = (*((uint64_t (**)(CFDictionaryRef *, uint64_t, std::string *, std::string *))*a1 + 2))(a1, a2, &__p, &__str);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if ((_DWORD)v9)
        goto LABEL_6;
      size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        size = __str.__r_.__value_.__l.__size_;
      std::string::basic_string(&__p, &__str, 0, size - 1, (std::allocator<char> *)&v18);
      if (!sub_21A6B64FC(a1, (uint64_t)&__p, theDict, a4) && theDict[0])
      {
        CFDictionaryRemoveValue(theDict[0], CFSTR("raWE"));
        CFDictionaryRemoveValue(theDict[0], CFSTR("raCr"));
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }
    v9 = 0;
  }
LABEL_6:
  if (v25)
    CFRelease(v25);
  if (v28)
    free(v28);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (SHIBYTE(v27) < 0)
    operator delete(v26[0]);
  return v9;
}

void sub_21A6C6908(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  uint64_t v35;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  if (a23 < 0)
    operator delete(a18);
  if (a29 < 0)
    operator delete(a24);
  if (a35 < 0)
    operator delete(a30);
  if (*(char *)(v35 - 73) < 0)
    operator delete(*(void **)(v35 - 96));
  _Unwind_Resume(exception_object);
}

uint64_t sub_21A6C69C4(uint64_t a1, uint64_t a2, CFTypeRef *a3, uint64_t a4)
{
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  unsigned int v12;
  char *v13;
  char *v14;
  char *p_p;
  char *v17;
  int v18;
  char *v19;
  const __CFAllocator *v20;
  CFStringRef v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  void *__p;
  uint64_t v33;
  uint64_t v34;
  std::string v35;

  memset(&v35, 0, sizeof(v35));
  __p = 0;
  v33 = 0;
  v34 = 0;
  v30 = 0;
  v31 = 0;
  v29 = 0;
  if (!a3)
  {
    v8 = 4294967292;
    goto LABEL_18;
  }
  sub_21A6B2D64((unsigned __int8 *)a2, 1684554343, &v35);
  v8 = sub_21A6B7B5C(a1, (uint64_t)&v35, (uint64_t)&__p, a4);
  if (!(_DWORD)v8)
  {
    v9 = v34 >= 0 ? (char *)&__p : (char *)__p;
    v8 = sub_21A6A16C4(v9, 0, (unsigned int *)&v31 + 1, 0, 0, 0, 0);
    if (!(_DWORD)v8)
    {
      sub_21A6B2D64((unsigned __int8 *)a2, 1684555118, &v35);
      v8 = sub_21A6B7B5C(a1, (uint64_t)&v35, (uint64_t)&__p, a4);
      if (!(_DWORD)v8)
      {
        v10 = v34 >= 0 ? (char *)&__p : (char *)__p;
        v8 = sub_21A6A16C4(v10, 0, (unsigned int *)&v31, 0, 0, 0, 0);
        if (!(_DWORD)v8)
        {
          sub_21A6B2D64((unsigned __int8 *)a2, 1735283534, &v35);
          v11 = sub_21A6B7B5C(a1, (uint64_t)&v35, (uint64_t)&__p, a4);
          if ((_DWORD)v11)
            goto LABEL_13;
          if (SHIBYTE(v34) < 0)
          {
            if (!v33)
              goto LABEL_13;
            p_p = (char *)__p;
          }
          else
          {
            if (!HIBYTE(v34))
              goto LABEL_13;
            p_p = (char *)&__p;
          }
          v8 = sub_21A6A16C4(p_p, 0, (unsigned int *)&v29, 0, 0, 0, 0);
          if ((_DWORD)v8)
            goto LABEL_18;
LABEL_13:
          v12 = v29;
          if (!(_DWORD)v29)
          {
            v8 = sub_21A6A16C4("255.255.255.0", 0, (unsigned int *)&v29, 0, 0, 0, 0);
            if ((_DWORD)v8)
              goto LABEL_18;
            v11 = 0;
            v12 = v29;
          }
          v31 = _byteswap_uint64(__PAIR64__(v31, HIDWORD(v31)));
          LODWORD(v29) = bswap32(v12);
          v13 = (char *)malloc_type_malloc(0x1BuLL, 0xA3D29CFFuLL);
          v14 = v13;
          v8 = v11;
          if (!v13)
            goto LABEL_18;
          *(_QWORD *)v13 = 0;
          *((_QWORD *)v13 + 1) = 0;
          *(_DWORD *)(v13 + 23) = 0;
          *((_QWORD *)v13 + 2) = 0;
          if (SHIBYTE(v34) < 0)
          {
            *(_BYTE *)__p = 0;
            v33 = 0;
          }
          else
          {
            LOBYTE(__p) = 0;
            HIBYTE(v34) = 0;
          }
          sub_21A6B2D64((unsigned __int8 *)a2, 1735279207, &v35);
          if (!sub_21A6B7B5C(a1, (uint64_t)&v35, (uint64_t)&__p, a4))
          {
            if (SHIBYTE(v34) < 0)
            {
              if (!v33)
                goto LABEL_30;
              v17 = (char *)__p;
            }
            else
            {
              if (!HIBYTE(v34))
                goto LABEL_30;
              v17 = (char *)&__p;
            }
            v8 = sub_21A6A16C4(v17, 0, (unsigned int *)&v30 + 1, 0, 0, 0, 0);
            if ((_DWORD)v8)
              goto LABEL_77;
          }
LABEL_30:
          if (!HIDWORD(v30))
          {
            v8 = sub_21A6A16C4("172.16.42.2", 0, (unsigned int *)&v30 + 1, 0, 0, 0, 0);
            if ((_DWORD)v8)
              goto LABEL_77;
            v18 = bswap32(HIDWORD(v30)) & v29;
            HIDWORD(v30) = bswap32(v18 & 0xFFFFFF) & 0xFFFFFF00 | ((v18 + (HIBYTE(v31) << 24)) >> 24);
          }
          if (SHIBYTE(v34) < 0)
          {
            *(_BYTE *)__p = 0;
            v33 = 0;
          }
          else
          {
            LOBYTE(__p) = 0;
            HIBYTE(v34) = 0;
          }
          sub_21A6B2D64((unsigned __int8 *)a2, 1735279982, &v35);
          if (!sub_21A6B7B5C(a1, (uint64_t)&v35, (uint64_t)&__p, a4))
          {
            if (SHIBYTE(v34) < 0)
            {
              if (!v33)
                goto LABEL_44;
              v19 = (char *)__p;
            }
            else
            {
              if (!HIBYTE(v34))
                goto LABEL_44;
              v19 = (char *)&__p;
            }
            v8 = sub_21A6A16C4(v19, 0, (unsigned int *)&v30, 0, 0, 0, 0);
            if ((_DWORD)v8)
              goto LABEL_77;
          }
LABEL_44:
          if (!(_DWORD)v30)
          {
            v8 = sub_21A6A16C4("172.16.42.200", 0, (unsigned int *)&v30, 0, 0, 0, 0);
            if ((_DWORD)v8)
              goto LABEL_77;
            LODWORD(v30) = (bswap32(v30) & v29) + (BYTE3(v31) << 24);
          }
          if (SHIBYTE(v34) < 0)
          {
            *(_BYTE *)__p = 0;
            v33 = 0;
          }
          else
          {
            LOBYTE(__p) = 0;
            HIBYTE(v34) = 0;
          }
          sub_21A6B2D64((unsigned __int8 *)a2, 1735283311, &v35);
          if (sub_21A6B7B5C(a1, (uint64_t)&v35, (uint64_t)&__p, a4))
            goto LABEL_54;
          if (SHIBYTE(v34) < 0)
          {
            if (v33)
            {
              v28 = (char *)__p;
              goto LABEL_73;
            }
          }
          else if (HIBYTE(v34))
          {
            v28 = (char *)&__p;
LABEL_73:
            v8 = sub_21A6A16C4(v28, 0, (unsigned int *)&v29 + 1, 0, 0, 0, 0);
            if ((_DWORD)v8)
              goto LABEL_77;
            if (HIDWORD(v29))
            {
LABEL_55:
              sub_21A69A24C(HIDWORD(v30), 0, v14);
              v20 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
              v21 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x24BDBD240], v14, 0x8000100u);
              *a3 = v21;
              if (v21)
              {
                if (*(char *)(a2 + 23) >= 0)
                  v27 = a2;
                else
                  v27 = *(_QWORD *)a2;
                v8 = sub_21A693A8C(v20, *(__CFArray **)(a1 + 48), (uint64_t)"%ks=%O", v22, v23, v24, v25, v26, v27);
                CFRelease(*a3);
              }
              else
              {
                v8 = 4294960568;
              }
              goto LABEL_77;
            }
          }
LABEL_54:
          v8 = sub_21A6A16C4("172.16.42.1", 0, (unsigned int *)&v29 + 1, 0, 0, 0, 0);
          if (!(_DWORD)v8)
            goto LABEL_55;
LABEL_77:
          free(v14);
        }
      }
    }
  }
LABEL_18:
  if (SHIBYTE(v34) < 0)
    operator delete(__p);
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v35.__r_.__value_.__l.__data_);
  return v8;
}

void sub_21A6C6F40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a20 < 0)
    operator delete(__p);
  if (a26 < 0)
    operator delete(a21);
  _Unwind_Resume(exception_object);
}

uint64_t sub_21A6C6F6C(uint64_t a1, unsigned __int8 *a2, const __CFString *a3, uint64_t a4)
{
  uint64_t v7;
  char *v8;
  char *v9;
  char *v10;
  unsigned int v12;
  char *v13;
  int v14;
  unsigned int v15;
  unsigned int v16;
  int v17;
  int v18;
  int v19;
  char *v20;
  unsigned int v21;
  char *v22;
  char *v23;
  void *v24[2];
  char v25;
  void *__p[2];
  uint64_t v27;
  void *v28;
  const char *v29;
  unsigned int v30;
  uint64_t v31;
  unint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  std::string v36;

  memset(&v36, 0, sizeof(v36));
  v33 = 0;
  v34 = 0;
  v35 = 0;
  v31 = 0;
  v32 = 0;
  v30 = 0;
  v28 = 0;
  v29 = 0;
  __p[0] = 0;
  __p[1] = 0;
  v27 = 0;
  v7 = sub_21A694C44(a3, &v29, (UInt8 **)&v28);
  if ((_DWORD)v7)
    goto LABEL_12;
  MEMORY[0x220747320](__p, v29);
  sub_21A6B2D64(a2, 1684554343, &v36);
  v7 = sub_21A6B7B5C(a1, (uint64_t)&v36, (uint64_t)&v33, a4);
  if ((_DWORD)v7)
    goto LABEL_12;
  v8 = v35 >= 0 ? (char *)&v33 : (char *)v33;
  v7 = sub_21A6A16C4(v8, 0, (unsigned int *)&v32 + 1, 0, 0, 0, 0);
  if ((_DWORD)v7)
    goto LABEL_12;
  sub_21A6B2D64(a2, 1684555118, &v36);
  v7 = sub_21A6B7B5C(a1, (uint64_t)&v36, (uint64_t)&v33, a4);
  if ((_DWORD)v7)
    goto LABEL_12;
  v9 = v35 >= 0 ? (char *)&v33 : (char *)v33;
  v7 = sub_21A6A16C4(v9, 0, (unsigned int *)&v32, 0, 0, 0, 0);
  if ((_DWORD)v7)
    goto LABEL_12;
  sub_21A6B2D64(a2, 1735283534, &v36);
  if (!sub_21A6B7B5C(a1, (uint64_t)&v36, (uint64_t)&v33, a4))
  {
    if (SHIBYTE(v35) < 0)
    {
      if (!v34)
        goto LABEL_25;
      v22 = (char *)v33;
    }
    else
    {
      if (!HIBYTE(v35))
        goto LABEL_25;
      v22 = (char *)&v33;
    }
    v7 = sub_21A6A16C4(v22, 0, &v30, 0, 0, 0, 0);
    if ((_DWORD)v7)
      goto LABEL_12;
  }
LABEL_25:
  v12 = v30;
  if (!v30)
  {
    MEMORY[0x220747320](&v33, "255.255.255.0");
    if (v35 >= 0)
      v23 = (char *)&v33;
    else
      v23 = (char *)v33;
    v7 = sub_21A6A16C4(v23, 0, &v30, 0, 0, 0, 0);
    if ((_DWORD)v7)
      goto LABEL_12;
    sub_21A6B2D64(a2, 1735283534, &v36);
    v7 = sub_21A6B7AD4(a1, (uint64_t)&v36, (uint64_t)&v33, a4);
    if ((_DWORD)v7)
      goto LABEL_12;
    v12 = v30;
  }
  v32 = _byteswap_uint64(__PAIR64__(v32, HIDWORD(v32)));
  v30 = bswap32(v12);
  if (v27 >= 0)
    v13 = (char *)__p;
  else
    v13 = (char *)__p[0];
  sub_21A6A16C4(v13, 0, (unsigned int *)&v31 + 1, 0, 0, 0, 0);
  v14 = v32;
  v15 = bswap32(HIDWORD(v31));
  HIDWORD(v31) = v15;
  v16 = v30;
  v17 = HIBYTE(v32);
  v7 = sub_21A6A16C4("172.16.42.1", 0, (unsigned int *)&v31, 0, 0, 0, 0);
  if ((_DWORD)v7)
  {
LABEL_12:
    v10 = 0;
    goto LABEL_13;
  }
  v18 = v16 & v15;
  v19 = v18 | (v17 << 24);
  LODWORD(v31) = v30 & v19 | ((_DWORD)v31 << 24);
  v20 = (char *)malloc_type_malloc(0x1BuLL, 0x9B9A4D81uLL);
  v10 = v20;
  if (v20)
  {
    *(_QWORD *)v20 = 0;
    *((_QWORD *)v20 + 1) = 0;
    *(_DWORD *)(v20 + 23) = 0;
    *((_QWORD *)v20 + 2) = 0;
    v21 = bswap32(v18 & 0xFFFFFF);
    sub_21A69A24C(v21 & 0xFFFFFF00 | HIBYTE(v19), 0, v20);
    sub_21A6B2D64(a2, 1735279207, &v36);
    sub_21A6CE0F0(v24, v10);
    v7 = sub_21A6B7AD4(a1, (uint64_t)&v36, (uint64_t)v24, a4);
    if (v25 < 0)
      operator delete(v24[0]);
    if (!(_DWORD)v7)
    {
      sub_21A69A24C(v21 | ((v14 | v18) >> 24), 0, v10);
      sub_21A6B2D64(a2, 1735279982, &v36);
      sub_21A6CE0F0(v24, v10);
      v7 = sub_21A6B7AD4(a1, (uint64_t)&v36, (uint64_t)v24, a4);
      if (v25 < 0)
        operator delete(v24[0]);
      if (!(_DWORD)v7)
      {
        sub_21A69A24C(bswap32(v31), 0, v10);
        sub_21A6B2D64(a2, 1735283311, &v36);
        sub_21A6CE0F0(v24, v10);
        v7 = sub_21A6B7AD4(a1, (uint64_t)&v36, (uint64_t)v24, a4);
        if (v25 < 0)
          operator delete(v24[0]);
      }
    }
  }
  else
  {
    v7 = 0;
  }
LABEL_13:
  if (v28)
    free(v28);
  if (v10)
    free(v10);
  if (SHIBYTE(v27) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v35) < 0)
    operator delete(v33);
  if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v36.__r_.__value_.__l.__data_);
  return v7;
}

void sub_21A6C7410(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  uint64_t v32;

  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a32 < 0)
    operator delete(a27);
  if (*(char *)(v32 - 65) < 0)
    operator delete(*(void **)(v32 - 88));
  _Unwind_Resume(exception_object);
}

uint64_t sub_21A6C7478(__CFArray **a1, uint64_t a2, CFTypeRef *a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const __CFAllocator *v11;
  CFNumberRef v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *__p[2];
  char v21;
  void *v22[2];
  uint64_t v23;
  int valuePtr;

  valuePtr = 0;
  v22[0] = 0;
  v22[1] = 0;
  v23 = 0;
  if (!a3)
  {
    v9 = 4294967292;
    goto LABEL_16;
  }
  sub_21A6CE0F0(__p, "tlna_limit");
  v8 = (*((uint64_t (**)(__CFArray **, uint64_t, void **, void **))*a1 + 2))(a1, a2, __p, v22);
  v9 = v8;
  if (v21 < 0)
  {
    operator delete(__p[0]);
    if ((_DWORD)v9)
      goto LABEL_16;
  }
  else if ((_DWORD)v8)
  {
    goto LABEL_16;
  }
  v10 = sub_21A6B77DC((uint64_t)a1, (uint64_t)v22, &valuePtr, a4);
  v9 = v10;
  if (!(_DWORD)v10)
    goto LABEL_10;
  if ((_DWORD)v10 == -5)
  {
    valuePtr = 0;
LABEL_10:
    v11 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
    v12 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], kCFNumberSInt32Type, &valuePtr);
    *a3 = v12;
    if (v12)
    {
      if (*(char *)(a2 + 23) >= 0)
        v18 = a2;
      else
        v18 = *(_QWORD *)a2;
      v9 = sub_21A693A8C(v11, a1[6], (uint64_t)"%ks=%O", v13, v14, v15, v16, v17, v18);
      CFRelease(*a3);
    }
    else
    {
      v9 = 4294960568;
    }
  }
LABEL_16:
  if (SHIBYTE(v23) < 0)
    operator delete(v22[0]);
  return v9;
}

void sub_21A6C75B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_21A6C75F0(uint64_t a1, uint64_t a2, const __CFNumber *a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  void *__p[2];
  char v12;
  std::string v13;
  int valuePtr;

  valuePtr = 0;
  memset(&v13, 0, sizeof(v13));
  sub_21A6CE0F0(__p, "tlna_limit");
  v8 = (*(uint64_t (**)(uint64_t, uint64_t, void **, std::string *))(*(_QWORD *)a1 + 16))(a1, a2, __p, &v13);
  v9 = v8;
  if (v12 < 0)
  {
    operator delete(__p[0]);
    if ((_DWORD)v9)
      goto LABEL_11;
  }
  else if ((_DWORD)v8)
  {
    goto LABEL_11;
  }
  if (CFNumberGetValue(a3, kCFNumberSInt32Type, &valuePtr))
  {
    v9 = sub_21A6B38E4(a1, (uint64_t)&v13, valuePtr, a4);
    if (!(_DWORD)v9)
    {
      sub_21A6CE0F0(__p, "tlna_period");
      sub_21A6B3A38((unsigned __int8 *)&v13, (uint64_t)__p, &v13);
      if (v12 < 0)
        operator delete(__p[0]);
      v9 = sub_21A6B38E4(a1, (uint64_t)&v13, 1440, a4);
    }
  }
  else
  {
    v9 = 4294960553;
  }
LABEL_11:
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
  return v9;
}

void sub_21A6C7714(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

uint64_t sub_21A6C7754(uint64_t a1, uint64_t a2, const __CFString *a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *__p[2];
  char v13;
  BOOL v14;
  void *v15[2];
  uint64_t v16;

  v15[0] = 0;
  v15[1] = 0;
  v16 = 0;
  sub_21A6CE0F0(__p, "Enabled");
  v8 = (*(uint64_t (**)(uint64_t, uint64_t, void **, void **))(*(_QWORD *)a1 + 16))(a1, a2, __p, v15);
  v9 = v8;
  if (v13 < 0)
  {
    operator delete(__p[0]);
    if ((_DWORD)v9)
      goto LABEL_12;
  }
  else if ((_DWORD)v8)
  {
    goto LABEL_12;
  }
  if (sub_21A6B79E0(a1, (uint64_t)v15, &v14, a4) == -5)
  {
    v9 = 0;
    goto LABEL_12;
  }
  sub_21A6CE0F0(__p, "raCl");
  v10 = (*(uint64_t (**)(uint64_t, uint64_t, void **, void **))(*(_QWORD *)a1 + 16))(a1, a2, __p, v15);
  v9 = v10;
  if (v13 < 0)
  {
    operator delete(__p[0]);
    if ((_DWORD)v9)
      goto LABEL_12;
  }
  else if ((_DWORD)v10)
  {
    goto LABEL_12;
  }
  v9 = sub_21A6B2DEC(a1, (uint64_t)v15, a3, a4);
LABEL_12:
  if (SHIBYTE(v16) < 0)
    operator delete(v15[0]);
  return v9;
}

void sub_21A6C7884(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a15 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  _Unwind_Resume(exception_object);
}

uint64_t sub_21A6C78C4(CFDictionaryRef *a1, uint64_t a2, CFMutableDictionaryRef *a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  void *__p[2];
  char v12;
  void *v13[2];
  uint64_t v14;

  v13[0] = 0;
  v13[1] = 0;
  v14 = 0;
  if (!a3)
  {
    v9 = 4294967292;
    goto LABEL_9;
  }
  sub_21A6CE0F0(__p, "raCl");
  v8 = (*((uint64_t (**)(CFDictionaryRef *, uint64_t, void **, void **))*a1 + 2))(a1, a2, __p, v13);
  v9 = v8;
  if (v12 < 0)
  {
    operator delete(__p[0]);
    if ((_DWORD)v9)
      goto LABEL_9;
  }
  else if ((_DWORD)v8)
  {
    goto LABEL_9;
  }
  v9 = sub_21A6B64FC(a1, (uint64_t)v13, a3, a4);
  if ((_DWORD)v9 == -5)
  {
    v9 = 0;
    *a3 = (CFMutableDictionaryRef)*MEMORY[0x24BDBD268];
  }
LABEL_9:
  if (SHIBYTE(v14) < 0)
    operator delete(v13[0]);
  return v9;
}

void sub_21A6C79A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_21A6C79DC(CFDictionaryRef *a1, uint64_t a2, CFMutableDictionaryRef *a3, uint64_t a4)
{
  unsigned int v7;
  uint64_t v9;
  void *__p[2];
  char v12;
  std::string __dst;

  if ((*(char *)(a2 + 23) & 0x80000000) == 0)
  {
    __dst = *(std::string *)a2;
    if (a3)
      goto LABEL_3;
LABEL_13:
    v9 = 4294967292;
    goto LABEL_15;
  }
  sub_21A6CDFB4(&__dst, *(void **)a2, *(_QWORD *)(a2 + 8));
  if (!a3)
    goto LABEL_13;
LABEL_3:
  if (sub_21A6AF0B4((uint64_t)a1, 2003390540))
  {
    sub_21A6CE0F0(__p, "pSTA");
    sub_21A6B3A38((unsigned __int8 *)&__dst, (uint64_t)__p, &__dst);
    if (v12 < 0)
      operator delete(__p[0]);
    v7 = sub_21A6B64FC(a1, (uint64_t)&__dst, a3, a4);
    if (v7 == -5 && (_DWORD)a4 == 1)
      v9 = 4294967291;
    else
      v9 = v7;
  }
  else
  {
    v9 = 0;
  }
LABEL_15:
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  return v9;
}

void sub_21A6C7ACC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

uint64_t sub_21A6C7B04(uint64_t a1, uint64_t a2, const __CFString *a3, uint64_t a4)
{
  uint64_t v7;
  void *__p[2];
  char v10;
  std::string __dst;

  if (*(char *)(a2 + 23) < 0)
    sub_21A6CDFB4(&__dst, *(void **)a2, *(_QWORD *)(a2 + 8));
  else
    __dst = *(std::string *)a2;
  if (sub_21A6AF0B4(a1, 2003390540))
  {
    sub_21A6CE0F0(__p, "pSTA");
    sub_21A6B3A38((unsigned __int8 *)&__dst, (uint64_t)__p, &__dst);
    if (v10 < 0)
      operator delete(__p[0]);
    v7 = sub_21A6B2DEC(a1, (uint64_t)&__dst, a3, a4);
  }
  else
  {
    v7 = 0;
  }
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  return v7;
}

void sub_21A6C7BDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

uint64_t sub_21A6C7C14(uint64_t a1, uint64_t a2, CFTypeRef *a3, uint64_t a4)
{
  std::string::size_type size;
  size_t v9;
  void **v10;
  void **v11;
  size_t v12;
  std::string *p_str;
  void **v14;
  uint64_t v15;
  uint64_t v16;
  const __CFAllocator *v17;
  CFNumberRef v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v26[2];
  unsigned __int8 v27;
  void *__p[2];
  unsigned __int8 v29;
  std::string __str;
  char __s[5];
  int valuePtr;
  std::string __dst;

  if (*(char *)(a2 + 23) < 0)
    sub_21A6CDFB4(&__dst, *(void **)a2, *(_QWORD *)(a2 + 8));
  else
    __dst = *(std::string *)a2;
  valuePtr = 0;
  if (a3)
  {
    size = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      size = __dst.__r_.__value_.__l.__size_;
    if (size == 4)
    {
      sub_21A6711EC(1953645423, __s);
      sub_21A6CE0F0(v26, __s);
      if ((v27 & 0x80u) == 0)
        v9 = v27;
      else
        v9 = (size_t)v26[1];
      v10 = __p;
      sub_21A6CEBF8((uint64_t)__p, v9 + 1);
      if ((v29 & 0x80u) != 0)
        v10 = (void **)__p[0];
      if (v9)
      {
        if ((v27 & 0x80u) == 0)
          v11 = v26;
        else
          v11 = (void **)v26[0];
        memmove(v10, v11, v9);
      }
      *(_WORD *)((char *)v10 + v9) = 46;
      if ((v29 & 0x80u) == 0)
        v12 = v29;
      else
        v12 = (size_t)__p[1];
      p_str = &__str;
      sub_21A6CEBF8((uint64_t)&__str, v12 + 22);
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
      if (v12)
      {
        if ((v29 & 0x80u) == 0)
          v14 = __p;
        else
          v14 = (void **)__p[0];
        memmove(p_str, v14, v12);
      }
      strcpy((char *)p_str + v12, "1stMileUplinkBandwidth");
      std::string::operator=(&__dst, &__str);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
      if ((char)v29 < 0)
        operator delete(__p[0]);
      if ((char)v27 < 0)
        operator delete(v26[0]);
    }
    v15 = sub_21A6B77DC(a1, (uint64_t)&__dst, &valuePtr, a4);
    v16 = v15;
    if (!(_DWORD)v15)
      goto LABEL_37;
    if ((_DWORD)v15 == -5)
    {
      valuePtr = 128;
LABEL_37:
      v17 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
      v18 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], kCFNumberSInt32Type, &valuePtr);
      *a3 = v18;
      if (v18)
      {
        if (*(char *)(a2 + 23) >= 0)
          v24 = a2;
        else
          v24 = *(_QWORD *)a2;
        v16 = sub_21A693A8C(v17, *(__CFArray **)(a1 + 48), (uint64_t)"%ks=%O", v19, v20, v21, v22, v23, v24);
        CFRelease(*a3);
      }
      else
      {
        v16 = 4294960568;
      }
    }
  }
  else
  {
    v16 = 4294967292;
  }
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  return v16;
}

void sub_21A6C7E80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  uint64_t v29;

  if (a29 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  if (a17 < 0)
    operator delete(a12);
  if (*(char *)(v29 - 57) < 0)
    operator delete(*(void **)(v29 - 80));
  _Unwind_Resume(exception_object);
}

uint64_t sub_21A6C7EEC(uint64_t a1, uint64_t a2, CFNumberRef number, uint64_t a4)
{
  std::string::size_type size;
  size_t v8;
  void **v9;
  void **v10;
  size_t v11;
  std::string *p_str;
  void **v13;
  uint64_t v14;
  void *v16[2];
  unsigned __int8 v17;
  void *__p[2];
  unsigned __int8 v19;
  std::string __str;
  char __s[5];
  int valuePtr;
  std::string __dst;

  if (*(char *)(a2 + 23) < 0)
    sub_21A6CDFB4(&__dst, *(void **)a2, *(_QWORD *)(a2 + 8));
  else
    __dst = *(std::string *)a2;
  valuePtr = 0;
  if (CFNumberGetValue(number, kCFNumberSInt32Type, &valuePtr))
  {
    size = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      size = __dst.__r_.__value_.__l.__size_;
    if (size == 4)
    {
      sub_21A6711EC(1953645423, __s);
      sub_21A6CE0F0(v16, __s);
      if ((v17 & 0x80u) == 0)
        v8 = v17;
      else
        v8 = (size_t)v16[1];
      v9 = __p;
      sub_21A6CEBF8((uint64_t)__p, v8 + 1);
      if ((v19 & 0x80u) != 0)
        v9 = (void **)__p[0];
      if (v8)
      {
        if ((v17 & 0x80u) == 0)
          v10 = v16;
        else
          v10 = (void **)v16[0];
        memmove(v9, v10, v8);
      }
      *(_WORD *)((char *)v9 + v8) = 46;
      if ((v19 & 0x80u) == 0)
        v11 = v19;
      else
        v11 = (size_t)__p[1];
      p_str = &__str;
      sub_21A6CEBF8((uint64_t)&__str, v11 + 22);
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
      if (v11)
      {
        if ((v19 & 0x80u) == 0)
          v13 = __p;
        else
          v13 = (void **)__p[0];
        memmove(p_str, v13, v11);
      }
      strcpy((char *)p_str + v11, "1stMileUplinkBandwidth");
      std::string::operator=(&__dst, &__str);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
      if ((char)v19 < 0)
        operator delete(__p[0]);
      if ((char)v17 < 0)
        operator delete(v16[0]);
    }
    v14 = sub_21A6B38E4(a1, (uint64_t)&__dst, valuePtr, a4);
  }
  else
  {
    v14 = 4294960553;
  }
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  return v14;
}

void sub_21A6C80EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  uint64_t v27;

  if (a27 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a15 < 0)
    operator delete(a10);
  if (*(char *)(v27 - 41) < 0)
    operator delete(*(void **)(v27 - 64));
  _Unwind_Resume(exception_object);
}

uint64_t sub_21A6C8158(uint64_t a1, uint64_t a2, CFTypeRef *a3, uint64_t a4)
{
  std::string::size_type size;
  size_t v9;
  void **v10;
  void **v11;
  size_t v12;
  std::string *p_str;
  void **v14;
  uint64_t v15;
  uint64_t v16;
  const __CFAllocator *v17;
  CFNumberRef v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v26[2];
  unsigned __int8 v27;
  void *__p[2];
  unsigned __int8 v29;
  std::string __str;
  char __s[5];
  int valuePtr;
  std::string __dst;

  if (*(char *)(a2 + 23) < 0)
    sub_21A6CDFB4(&__dst, *(void **)a2, *(_QWORD *)(a2 + 8));
  else
    __dst = *(std::string *)a2;
  valuePtr = 0;
  if (a3)
  {
    size = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      size = __dst.__r_.__value_.__l.__size_;
    if (size == 4)
    {
      sub_21A6711EC(1953645423, __s);
      sub_21A6CE0F0(v26, __s);
      if ((v27 & 0x80u) == 0)
        v9 = v27;
      else
        v9 = (size_t)v26[1];
      v10 = __p;
      sub_21A6CEBF8((uint64_t)__p, v9 + 1);
      if ((v29 & 0x80u) != 0)
        v10 = (void **)__p[0];
      if (v9)
      {
        if ((v27 & 0x80u) == 0)
          v11 = v26;
        else
          v11 = (void **)v26[0];
        memmove(v10, v11, v9);
      }
      *(_WORD *)((char *)v10 + v9) = 46;
      if ((v29 & 0x80u) == 0)
        v12 = v29;
      else
        v12 = (size_t)__p[1];
      p_str = &__str;
      sub_21A6CEBF8((uint64_t)&__str, v12 + 24);
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
      if (v12)
      {
        if ((v29 & 0x80u) == 0)
          v14 = __p;
        else
          v14 = (void **)__p[0];
        memmove(p_str, v14, v12);
      }
      strcpy((char *)p_str + v12, "1stMileDownlinkBandwidth");
      std::string::operator=(&__dst, &__str);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
      if ((char)v29 < 0)
        operator delete(__p[0]);
      if ((char)v27 < 0)
        operator delete(v26[0]);
    }
    v15 = sub_21A6B77DC(a1, (uint64_t)&__dst, &valuePtr, a4);
    v16 = v15;
    if (!(_DWORD)v15)
      goto LABEL_37;
    if ((_DWORD)v15 == -5)
    {
      valuePtr = 768;
LABEL_37:
      v17 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
      v18 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], kCFNumberSInt32Type, &valuePtr);
      *a3 = v18;
      if (v18)
      {
        if (*(char *)(a2 + 23) >= 0)
          v24 = a2;
        else
          v24 = *(_QWORD *)a2;
        v16 = sub_21A693A8C(v17, *(__CFArray **)(a1 + 48), (uint64_t)"%ks=%O", v19, v20, v21, v22, v23, v24);
        CFRelease(*a3);
      }
      else
      {
        v16 = 4294960568;
      }
    }
  }
  else
  {
    v16 = 4294967292;
  }
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  return v16;
}

void sub_21A6C83C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  uint64_t v29;

  if (a29 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  if (a17 < 0)
    operator delete(a12);
  if (*(char *)(v29 - 57) < 0)
    operator delete(*(void **)(v29 - 80));
  _Unwind_Resume(exception_object);
}

uint64_t sub_21A6C8430(uint64_t a1, uint64_t a2, CFNumberRef number, uint64_t a4)
{
  std::string::size_type size;
  size_t v8;
  void **v9;
  void **v10;
  size_t v11;
  std::string *p_str;
  void **v13;
  uint64_t v14;
  void *v16[2];
  unsigned __int8 v17;
  void *__p[2];
  unsigned __int8 v19;
  std::string __str;
  char __s[5];
  int valuePtr;
  std::string __dst;

  if (*(char *)(a2 + 23) < 0)
    sub_21A6CDFB4(&__dst, *(void **)a2, *(_QWORD *)(a2 + 8));
  else
    __dst = *(std::string *)a2;
  valuePtr = 0;
  if (CFNumberGetValue(number, kCFNumberSInt32Type, &valuePtr))
  {
    size = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      size = __dst.__r_.__value_.__l.__size_;
    if (size == 4)
    {
      sub_21A6711EC(1953645423, __s);
      sub_21A6CE0F0(v16, __s);
      if ((v17 & 0x80u) == 0)
        v8 = v17;
      else
        v8 = (size_t)v16[1];
      v9 = __p;
      sub_21A6CEBF8((uint64_t)__p, v8 + 1);
      if ((v19 & 0x80u) != 0)
        v9 = (void **)__p[0];
      if (v8)
      {
        if ((v17 & 0x80u) == 0)
          v10 = v16;
        else
          v10 = (void **)v16[0];
        memmove(v9, v10, v8);
      }
      *(_WORD *)((char *)v9 + v8) = 46;
      if ((v19 & 0x80u) == 0)
        v11 = v19;
      else
        v11 = (size_t)__p[1];
      p_str = &__str;
      sub_21A6CEBF8((uint64_t)&__str, v11 + 24);
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
      if (v11)
      {
        if ((v19 & 0x80u) == 0)
          v13 = __p;
        else
          v13 = (void **)__p[0];
        memmove(p_str, v13, v11);
      }
      strcpy((char *)p_str + v11, "1stMileDownlinkBandwidth");
      std::string::operator=(&__dst, &__str);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
      if ((char)v19 < 0)
        operator delete(__p[0]);
      if ((char)v17 < 0)
        operator delete(v16[0]);
    }
    v14 = sub_21A6B38E4(a1, (uint64_t)&__dst, valuePtr, a4);
  }
  else
  {
    v14 = 4294960553;
  }
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  return v14;
}

void sub_21A6C8630(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  uint64_t v27;

  if (a27 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a15 < 0)
    operator delete(a10);
  if (*(char *)(v27 - 41) < 0)
    operator delete(*(void **)(v27 - 64));
  _Unwind_Resume(exception_object);
}

uint64_t sub_21A6C869C(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  std::string::size_type size;
  size_t v8;
  void **v9;
  void **v10;
  size_t v11;
  std::string *p_str;
  void **v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  void *v18[2];
  unsigned __int8 v19;
  void *__p[2];
  unsigned __int8 v21;
  std::string __str;
  char __s[5];
  int v24;
  std::string __dst;

  if (*(char *)(a2 + 23) < 0)
    sub_21A6CDFB4(&__dst, *(void **)a2, *(_QWORD *)(a2 + 8));
  else
    __dst = *(std::string *)a2;
  v24 = 0;
  if (a3)
  {
    size = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      size = __dst.__r_.__value_.__l.__size_;
    if (size == 4)
    {
      sub_21A6711EC(1953645423, __s);
      sub_21A6CE0F0(v18, __s);
      if ((v19 & 0x80u) == 0)
        v8 = v19;
      else
        v8 = (size_t)v18[1];
      v9 = __p;
      sub_21A6CEBF8((uint64_t)__p, v8 + 1);
      if ((v21 & 0x80u) != 0)
        v9 = (void **)__p[0];
      if (v8)
      {
        if ((v19 & 0x80u) == 0)
          v10 = v18;
        else
          v10 = (void **)v18[0];
        memmove(v9, v10, v8);
      }
      *(_WORD *)((char *)v9 + v8) = 46;
      if ((v21 & 0x80u) == 0)
        v11 = v21;
      else
        v11 = (size_t)__p[1];
      p_str = &__str;
      sub_21A6CEBF8((uint64_t)&__str, v11 + 5);
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
      if (v11)
      {
        if ((v21 & 0x80u) == 0)
          v13 = __p;
        else
          v13 = (void **)__p[0];
        memmove(p_str, v13, v11);
      }
      strcpy((char *)p_str + v11, "flags");
      std::string::operator=(&__dst, &__str);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
      if ((char)v21 < 0)
        operator delete(__p[0]);
      if ((char)v19 < 0)
        operator delete(v18[0]);
    }
    v14 = sub_21A6B77DC(a1, (uint64_t)&__dst, &v24, a4);
    v15 = v14;
    if ((_DWORD)v14 == -5)
      goto LABEL_39;
    if ((_DWORD)v14)
      goto LABEL_41;
    if ((v24 & 3) == 0)
LABEL_39:
      v16 = (_QWORD *)MEMORY[0x24BDBD268];
    else
      v16 = (_QWORD *)MEMORY[0x24BDBD270];
    v15 = 0;
    *a3 = *v16;
  }
  else
  {
    v15 = 4294967292;
  }
LABEL_41:
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  return v15;
}

void sub_21A6C88C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  uint64_t v27;

  if (a27 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a15 < 0)
    operator delete(a10);
  if (*(char *)(v27 - 57) < 0)
    operator delete(*(void **)(v27 - 80));
  _Unwind_Resume(exception_object);
}

uint64_t sub_21A6C8930(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  std::string::size_type size;
  size_t v8;
  void **v9;
  void **v10;
  size_t v11;
  std::string *p_str;
  void **v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  int v17;
  void *v19[2];
  unsigned __int8 v20;
  void *__p[2];
  unsigned __int8 v22;
  std::string __str;
  char __s[5];
  int v25;
  std::string __dst;

  if (*(char *)(a2 + 23) < 0)
    sub_21A6CDFB4(&__dst, *(void **)a2, *(_QWORD *)(a2 + 8));
  else
    __dst = *(std::string *)a2;
  v25 = 0;
  size = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = __dst.__r_.__value_.__l.__size_;
  if (size == 4)
  {
    sub_21A6711EC(1953645423, __s);
    sub_21A6CE0F0(v19, __s);
    if ((v20 & 0x80u) == 0)
      v8 = v20;
    else
      v8 = (size_t)v19[1];
    v9 = __p;
    sub_21A6CEBF8((uint64_t)__p, v8 + 1);
    if ((v22 & 0x80u) != 0)
      v9 = (void **)__p[0];
    if (v8)
    {
      if ((v20 & 0x80u) == 0)
        v10 = v19;
      else
        v10 = (void **)v19[0];
      memmove(v9, v10, v8);
    }
    *(_WORD *)((char *)v9 + v8) = 46;
    if ((v22 & 0x80u) == 0)
      v11 = v22;
    else
      v11 = (size_t)__p[1];
    p_str = &__str;
    sub_21A6CEBF8((uint64_t)&__str, v11 + 5);
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
    if (v11)
    {
      if ((v22 & 0x80u) == 0)
        v13 = __p;
      else
        v13 = (void **)__p[0];
      memmove(p_str, v13, v11);
    }
    strcpy((char *)p_str + v11, "flags");
    std::string::operator=(&__dst, &__str);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    if ((char)v22 < 0)
      operator delete(__p[0]);
    if ((char)v20 < 0)
      operator delete(v19[0]);
  }
  v14 = sub_21A6B77DC(a1, (uint64_t)&__dst, &v25, a4);
  v15 = v14;
  if ((_DWORD)v14 == -5)
  {
    v16 = 0;
    goto LABEL_37;
  }
  if (!(_DWORD)v14)
  {
    v16 = v25 & 0xFFFFFFFC;
LABEL_37:
    if (*MEMORY[0x24BDBD270] == a3)
      v17 = 3;
    else
      v17 = 0;
    v25 = v16 | v17;
    v15 = sub_21A6B38E4(a1, (uint64_t)&__dst, v16 | v17, a4);
  }
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  return v15;
}

void sub_21A6C8B64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  uint64_t v27;

  if (a27 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a15 < 0)
    operator delete(a10);
  if (*(char *)(v27 - 57) < 0)
    operator delete(*(void **)(v27 - 80));
  _Unwind_Resume(exception_object);
}

uint64_t sub_21A6C8BD0(uint64_t a1, uint64_t a2, CFTypeRef *a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  _BOOL4 v10;
  int v11;
  const __CFAllocator *v13;
  CFNumberRef v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *__p[2];
  char v22;
  int valuePtr;
  int v24;
  std::string v25;

  memset(&v25, 0, sizeof(v25));
  v24 = 0;
  if (a3)
  {
    sub_21A6CE0F0(__p, "raMu");
    sub_21A6B3A38((unsigned __int8 *)a2, (uint64_t)__p, &v25);
    if (v22 < 0)
      operator delete(__p[0]);
    v8 = sub_21A6B77DC(a1, (uint64_t)&v25, &v24, a4);
    v9 = v8;
    if (((_DWORD)a4 != 1 || (_DWORD)v8 != -5) && !(_DWORD)v8)
    {
      v10 = sub_21A6AF0B4(a1, 1935819842);
      v11 = v24;
      if (!v10)
        goto LABEL_21;
      if (v24 > 35)
      {
        if (v24 == 85)
          goto LABEL_19;
        if (v24 != 36)
        {
LABEL_20:
          v11 = 1000;
LABEL_21:
          valuePtr = v11;
          v13 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
          v14 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], kCFNumberSInt32Type, &valuePtr);
          *a3 = v14;
          if (v14)
          {
            if (*(char *)(a2 + 23) >= 0)
              v20 = a2;
            else
              v20 = *(_QWORD *)a2;
            v9 = sub_21A693A8C(v13, *(__CFArray **)(a1 + 48), (uint64_t)"%ks=%O", v15, v16, v17, v18, v19, v20);
            CFRelease(*a3);
          }
          else
          {
            v9 = 4294960568;
          }
          goto LABEL_13;
        }
      }
      else if (v24 != 17)
      {
        if (v24 != 18)
          goto LABEL_20;
LABEL_19:
        v11 = 2000;
        goto LABEL_21;
      }
      v11 = 3000;
      goto LABEL_21;
    }
  }
  else
  {
    v9 = 4294967292;
  }
LABEL_13:
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v25.__r_.__value_.__l.__data_);
  return v9;
}

void sub_21A6C8D54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a17 < 0)
    operator delete(__p);
  if (a24 < 0)
    operator delete(a19);
  _Unwind_Resume(exception_object);
}

uint64_t sub_21A6C8D8C(uint64_t a1, unsigned __int8 *a2, const __CFNumber *a3, uint64_t a4)
{
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  _BOOL4 v12;
  int v13;
  BOOL v14;
  int v15;
  int v16;
  void *__p[2];
  char v19;
  uint64_t valuePtr;
  std::string v21;

  memset(&v21, 0, sizeof(v21));
  valuePtr = 0;
  sub_21A6CE0F0(__p, "raMd");
  sub_21A6B3A38(a2, (uint64_t)__p, &v21);
  if (v19 < 0)
    operator delete(__p[0]);
  v8 = sub_21A6B77DC(a1, (uint64_t)&v21, &valuePtr, a4);
  if (!(_DWORD)v8)
  {
    v9 = sub_21A6D6F8C(valuePtr);
    if ((_DWORD)valuePtr == 3)
      v10 = 1;
    else
      v10 = v9;
    if ((_DWORD)valuePtr == 7)
      v11 = 1;
    else
      v11 = v10;
    if (!CFNumberGetValue(a3, kCFNumberSInt32Type, (char *)&valuePtr + 4))
    {
      v8 = 4294967293;
      goto LABEL_28;
    }
    v12 = sub_21A6AF0B4(a1, 1935819842);
    v13 = HIDWORD(valuePtr);
    if (!v12)
      goto LABEL_25;
    if (SHIDWORD(valuePtr) > 1999)
    {
      if (HIDWORD(valuePtr) == 2000)
      {
        v14 = v11 == 0;
        v15 = 85;
        v16 = 18;
        goto LABEL_22;
      }
      if (HIDWORD(valuePtr) == 3000)
      {
        v14 = v11 == 0;
        v15 = 17;
        v16 = 36;
        goto LABEL_22;
      }
    }
    else if ((HIDWORD(valuePtr) - 1) < 2 || HIDWORD(valuePtr) == 85)
    {
      goto LABEL_25;
    }
    v14 = v11 == 0;
    v15 = 2;
    v16 = 6;
LABEL_22:
    if (v14)
      v13 = v15;
    else
      v13 = v16;
LABEL_25:
    sub_21A6CE0F0(__p, "raMu");
    sub_21A6B3A38(a2, (uint64_t)__p, &v21);
    if (v19 < 0)
      operator delete(__p[0]);
    v8 = sub_21A6B38E4(a1, (uint64_t)&v21, v13, a4);
  }
LABEL_28:
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
  return v8;
}

void sub_21A6C8F30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a15 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  _Unwind_Resume(exception_object);
}

uint64_t sub_21A6C8F70(uint64_t a1, unsigned __int8 *a2, CFNumberRef number, uint64_t a4)
{
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  _BOOL4 v10;
  const __CFString *v11;
  const __CFString *v12;
  uint64_t v13;
  void *__p[2];
  char v16;
  int v17;
  unsigned __int16 v18;
  unsigned int valuePtr;
  std::string v20;

  memset(&v20, 0, sizeof(v20));
  valuePtr = 0;
  v18 = 0;
  v17 = 0;
  if (!CFNumberGetValue(number, kCFNumberSInt32Type, &valuePtr))
  {
    v8 = 4294967293;
    goto LABEL_45;
  }
  v7 = valuePtr;
  if (!valuePtr)
  {
    v8 = 4294967284;
    goto LABEL_45;
  }
  if (sub_21A6AF0B4(a1, 1935819842))
  {
    sub_21A6CE0F0(__p, "raMd");
    sub_21A6B3A38(a2, (uint64_t)__p, &v20);
    if (v16 < 0)
      operator delete(__p[0]);
    v8 = sub_21A6B78C4(a1, (uint64_t)&v20, &v18, a4);
    if ((_DWORD)v8)
      goto LABEL_45;
    if (sub_21A6D6F8C(v18))
    {
      v8 = sub_21A6B7840(a1, (uint64_t)&v20, SHIWORD(v7), a4);
      if ((_DWORD)v8)
        goto LABEL_45;
      v7 >>= 16;
    }
    else
    {
      if ((sub_21A6D6FB4(v18) & 1) == 0)
      {
        LOWORD(v7) = v18;
        goto LABEL_19;
      }
      v8 = sub_21A6B7840(a1, (uint64_t)&v20, v7, a4);
      if ((_DWORD)v8)
        goto LABEL_45;
    }
  }
  else
  {
    sub_21A6CE0F0(__p, "raMd");
    sub_21A6B3A38(a2, (uint64_t)__p, &v20);
    if (v16 < 0)
      operator delete(__p[0]);
    v9 = HIWORD(v7);
    if (!HIWORD(v7))
      LOWORD(v9) = v7;
    v8 = sub_21A6B7840(a1, (uint64_t)&v20, v9, a4);
    if ((_DWORD)v8)
      goto LABEL_45;
    LOWORD(v7) = valuePtr;
  }
  v18 = v7;
LABEL_19:
  if (!sub_21A6D6F8C((unsigned __int16)v7))
  {
    sub_21A6CE0F0(__p, "raWC");
    sub_21A6B3A38(a2, (uint64_t)__p, &v20);
    if (v16 < 0)
      operator delete(__p[0]);
    v13 = sub_21A6B2DEC(a1, (uint64_t)&v20, (const __CFString *)*MEMORY[0x24BDBD268], a4);
    goto LABEL_33;
  }
  v10 = sub_21A6BAD44(a1, CFSTR("ht40_5GHz"));
  sub_21A6CE0F0(__p, "raWC");
  sub_21A6B3A38(a2, (uint64_t)__p, &v20);
  if (v16 < 0)
    operator delete(__p[0]);
  v11 = (const __CFString *)*MEMORY[0x24BDBD268];
  if (v10)
    v12 = (const __CFString *)*MEMORY[0x24BDBD270];
  else
    v12 = (const __CFString *)*MEMORY[0x24BDBD268];
  v8 = sub_21A6B2DEC(a1, (uint64_t)&v20, v12, a4);
  if (!(_DWORD)v8)
  {
    if (sub_21A6AF0B4(a1, 1381123655))
    {
LABEL_34:
      sub_21A6CE0F0(__p, "raMu");
      sub_21A6B3A38(a2, (uint64_t)__p, &v20);
      if (v16 < 0)
        operator delete(__p[0]);
      v8 = sub_21A6B77DC(a1, (uint64_t)&v20, &v17, a4);
      if (!(_DWORD)v8)
      {
        if (sub_21A6B3968(a1, (uint64_t)&v20, v17, 1))
        {
          v8 = 0;
        }
        else
        {
          v8 = sub_21A6BAE54(a1, (uint64_t)&v20, &v17);
          if (!(_DWORD)v8)
            v8 = sub_21A6B38E4(a1, (uint64_t)&v20, v17, a4);
        }
      }
      goto LABEL_45;
    }
    sub_21A6CE0F0(__p, "raRo");
    sub_21A6B3A38(a2, (uint64_t)__p, &v20);
    if (v16 < 0)
      operator delete(__p[0]);
    v13 = sub_21A6B2DEC(a1, (uint64_t)&v20, v11, a4);
LABEL_33:
    v8 = v13;
    if ((_DWORD)v13)
      goto LABEL_45;
    goto LABEL_34;
  }
LABEL_45:
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v20.__r_.__value_.__l.__data_);
  return v8;
}

void sub_21A6C92FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a14 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  _Unwind_Resume(exception_object);
}

uint64_t sub_21A6C9360(uint64_t a1, uint64_t a2, CFTypeRef *a3, uint64_t a4)
{
  int v8;
  uint64_t v9;
  int v10;
  char v11;
  char v12;
  int64_t size;
  std::string *v14;
  _BYTE *v15;
  std::string *v16;
  _BYTE *v17;
  std::string::size_type v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  const __CFAllocator *v23;
  CFNumberRef v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *__p[2];
  char v33;
  int valuePtr;
  unsigned __int16 v35;
  std::string v36;
  char __str[16];
  uint64_t v38;

  v38 = *MEMORY[0x24BDAC8D0];
  memset(&v36, 0, sizeof(v36));
  v35 = 0;
  if (!a3)
    goto LABEL_35;
  if (sub_21A6AF0B4(a1, 1935819842))
  {
    if (sub_21A6B262C(a1, 0) == 2)
    {
      v8 = 0;
      v9 = 0;
      v10 = 0;
      v11 = 1;
      while (1)
      {
        v12 = v11;
        MEMORY[0x220747320](&v36, "WiFi.radios.[*].");
        snprintf(__str, 0x10uLL, "%ld", v9);
        if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(v36.__r_.__value_.__r.__words[2]);
        else
          size = v36.__r_.__value_.__l.__size_;
        if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v14 = &v36;
        else
          v14 = (std::string *)v36.__r_.__value_.__r.__words[0];
        v15 = (char *)v14 + size;
        if (size >= 1)
        {
          v16 = v14;
          do
          {
            v17 = memchr(v16, 42, size);
            if (!v17)
              break;
            if (*v17 == 42)
              goto LABEL_17;
            v16 = (std::string *)(v17 + 1);
            size = v15 - (_BYTE *)v16;
          }
          while (v15 - (_BYTE *)v16 > 0);
        }
        v17 = v15;
LABEL_17:
        if (v17 == v15)
          v18 = -1;
        else
          v18 = v17 - (_BYTE *)v14;
        std::string::replace(&v36, v18, 1uLL, __str);
        sub_21A6CE0F0(__p, "raMd");
        sub_21A6B3A38((unsigned __int8 *)&v36, (uint64_t)__p, &v36);
        if (v33 < 0)
          operator delete(__p[0]);
        v19 = sub_21A6B78C4(a1, (uint64_t)&v36, &v35, a4);
        v20 = v19;
        if ((_DWORD)a4 == 1 && (_DWORD)v19 == -5)
          goto LABEL_48;
        if ((_DWORD)v19)
          goto LABEL_48;
        if ((sub_21A6D6F8C(v35) & 1) != 0)
        {
          v10 = v35;
        }
        else if (sub_21A6D6FB4(v35))
        {
          v8 = v35;
        }
        else
        {
          if (sub_21A6AF0B4(a1, 825319779))
            v10 = 10;
          else
            v10 = 5;
          v8 = 6;
        }
        v11 = 0;
        v9 = 1;
        if ((v12 & 1) == 0)
        {
          v21 = v8 + (v10 << 16);
          goto LABEL_42;
        }
      }
    }
LABEL_35:
    v20 = 4294967292;
    goto LABEL_48;
  }
  sub_21A6CE0F0(__p, "raMd");
  sub_21A6B3A38((unsigned __int8 *)a2, (uint64_t)__p, &v36);
  if (v33 < 0)
    operator delete(__p[0]);
  v22 = sub_21A6B78C4(a1, (uint64_t)&v36, &v35, a4);
  v20 = v22;
  if (((_DWORD)a4 != 1 || (_DWORD)v22 != -5) && !(_DWORD)v22)
  {
    v21 = v35;
LABEL_42:
    valuePtr = v21;
    v23 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
    v24 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], kCFNumberSInt32Type, &valuePtr);
    *a3 = v24;
    if (v24)
    {
      if (*(char *)(a2 + 23) >= 0)
        v30 = a2;
      else
        v30 = *(_QWORD *)a2;
      v20 = sub_21A693A8C(v23, *(__CFArray **)(a1 + 48), (uint64_t)"%ks=%O", v25, v26, v27, v28, v29, v30);
      CFRelease(*a3);
    }
    else
    {
      v20 = 4294960568;
    }
  }
LABEL_48:
  if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v36.__r_.__value_.__l.__data_);
  return v20;
}

void sub_21A6C9664(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a16 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  _Unwind_Resume(exception_object);
}

uint64_t sub_21A6C96AC(uint64_t a1, unsigned __int8 *a2, const __CFString *a3, uint64_t a4)
{
  uint64_t v7;
  void *__p[2];
  char v10;
  std::string v11;

  memset(&v11, 0, sizeof(v11));
  sub_21A6B2D64(a2, 1937068114, &v11);
  std::string::append(&v11, ".");
  sub_21A6CE0F0(__p, "enabled");
  sub_21A6B3A38((unsigned __int8 *)&v11, (uint64_t)__p, &v11);
  if (v10 < 0)
    operator delete(__p[0]);
  v7 = sub_21A6B2DEC(a1, (uint64_t)&v11, a3, a4);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  return v7;
}

void sub_21A6C9768(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_21A6C97A0(CFDictionaryRef *a1, unsigned __int8 *a2, CFMutableDictionaryRef *a3, uint64_t a4)
{
  uint64_t v7;
  void *__p[2];
  char v10;
  std::string v11;

  memset(&v11, 0, sizeof(v11));
  if (a3)
  {
    sub_21A6B2D64(a2, 1937068114, &v11);
    std::string::append(&v11, ".");
    sub_21A6CE0F0(__p, "enabled");
    sub_21A6B3A38((unsigned __int8 *)&v11, (uint64_t)__p, &v11);
    if (v10 < 0)
      operator delete(__p[0]);
    v7 = sub_21A6B64FC(a1, (uint64_t)&v11, a3, a4);
    if ((_DWORD)v7 == -5)
    {
      v7 = 0;
      *a3 = (CFMutableDictionaryRef)*MEMORY[0x24BDBD268];
    }
  }
  else
  {
    v7 = 4294967292;
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  return v7;
}

void sub_21A6C9884(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_21A6C98BC()
{
  return 0;
}

uint64_t sub_21A6C98C4(CFDictionaryRef *a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  CFComparisonResult v9;
  _QWORD *v10;
  void *__p[2];
  char v13;
  const __CFString *v14;
  const __CFString *v15;
  std::string v16;
  std::string v17;
  char __s[17];
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  sub_21A6C379C(__s, 0x11uLL, 0);
  sub_21A6CE0F0(&v17, __s);
  sub_21A6C379C(__s, 0x11uLL, 1);
  sub_21A6CE0F0(&v16, __s);
  v14 = 0;
  v15 = 0;
  if (a3)
  {
    if (!sub_21A6AF0B4((uint64_t)a1, 1935819842) || sub_21A6B262C((uint64_t)a1, 0) < 2)
    {
      v10 = (_QWORD *)MEMORY[0x24BDBD268];
LABEL_16:
      v8 = 0;
      *a3 = *v10;
      goto LABEL_18;
    }
    sub_21A6CE0F0(__p, "raNm");
    sub_21A6B3A38((unsigned __int8 *)&v17, (uint64_t)__p, &v17);
    if (v13 < 0)
      operator delete(__p[0]);
    sub_21A6CE0F0(__p, "raNm");
    sub_21A6B3A38((unsigned __int8 *)&v16, (uint64_t)__p, &v16);
    if (v13 < 0)
      operator delete(__p[0]);
    v7 = sub_21A6B64FC(a1, (uint64_t)&v17, (CFMutableDictionaryRef *)&v15, a4);
    v8 = v7;
    if (((_DWORD)a4 != 1 || (_DWORD)v7 != -5) && !(_DWORD)v7)
    {
      v8 = sub_21A6B64FC(a1, (uint64_t)&v16, (CFMutableDictionaryRef *)&v14, a4);
      if (!(_DWORD)v8)
      {
        v9 = CFStringCompare(v15, v14, 0);
        v10 = (_QWORD *)MEMORY[0x24BDBD270];
        if (v9 == kCFCompareEqualTo)
          v10 = (_QWORD *)MEMORY[0x24BDBD268];
        goto LABEL_16;
      }
    }
  }
  else
  {
    v8 = 4294967292;
  }
LABEL_18:
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v16.__r_.__value_.__l.__data_);
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v17.__r_.__value_.__l.__data_);
  return v8;
}

void sub_21A6C9A9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a15 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  if (a29 < 0)
    operator delete(a24);
  _Unwind_Resume(exception_object);
}

uint64_t sub_21A6C9AFC(uint64_t a1, uint64_t a2, CFMutableDictionaryRef *a3, uint64_t a4)
{
  uint64_t v7;
  unsigned int v8;
  uint64_t v10;
  void *__p[2];
  char v13;
  std::string v14;
  _BYTE v15[17];
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  memset(&v14, 0, sizeof(v14));
  if (!a3)
    return 4294967292;
  v7 = sub_21A6BC4A8(a1, 0);
  sub_21A6C379C(v15, 0x11uLL, v7);
  MEMORY[0x220747320](&v14, v15);
  sub_21A6CE0F0(__p, "raNm");
  sub_21A6B3A38((unsigned __int8 *)&v14, (uint64_t)__p, &v14);
  if (v13 < 0)
    operator delete(__p[0]);
  *(_BYTE *)(a1 + 386) = 1;
  v8 = sub_21A6B64FC((CFDictionaryRef *)a1, (uint64_t)&v14, a3, a4);
  *(_BYTE *)(a1 + 386) = 0;
  if (v8 == -5 && (_DWORD)a4 == 1)
    v10 = 4294967291;
  else
    v10 = v8;
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__r_.__value_.__l.__data_);
  return v10;
}

void sub_21A6C9C08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_21A6C9C40(uint64_t a1, uint64_t a2, const __CFString *a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  void *__p[2];
  char v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  const __CFString *v17;
  CFTypeRef cf;
  int v19;
  std::string v20;
  _BYTE v21[17];
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  memset(&v20, 0, sizeof(v20));
  v19 = 0;
  v17 = 0;
  cf = 0;
  v14 = 0;
  v15 = 0;
  v16 = 0;
  v7 = sub_21A6B26A8(a1, 0);
  sub_21A6C379C(v21, 0x11uLL, v7);
  MEMORY[0x220747320](&v20, v21);
  sub_21A6CE0F0(__p, "raNm");
  sub_21A6B3A38((unsigned __int8 *)&v20, (uint64_t)__p, &v20);
  if (v13 < 0)
    operator delete(__p[0]);
  v8 = sub_21A6B64FC((CFDictionaryRef *)a1, (uint64_t)&v20, (CFMutableDictionaryRef *)&v17, a4);
  if (!(_DWORD)v8)
  {
    v9 = sub_21A6BC4A8(a1, 0);
    sub_21A6C379C(v21, 0x11uLL, v9);
    MEMORY[0x220747320](&v20, v21);
    sub_21A6CE0F0(__p, "raNm");
    sub_21A6B3A38((unsigned __int8 *)&v20, (uint64_t)__p, &v20);
    if (v13 < 0)
      operator delete(__p[0]);
    v8 = sub_21A6B64FC((CFDictionaryRef *)a1, (uint64_t)&v20, (CFMutableDictionaryRef *)&cf, a4);
    if (!(_DWORD)v8)
    {
      if (!cf)
      {
        v8 = 4294967291;
        goto LABEL_9;
      }
      CFRetain(cf);
      *(_BYTE *)(a1 + 386) = 1;
      if (!CFStringGetLength(a3))
        a3 = v17;
      v8 = sub_21A6B2DEC(a1, (uint64_t)&v20, a3, a4);
      *(_BYTE *)(a1 + 386) = 0;
      if (!(_DWORD)v8)
      {
        sub_21A6CE0F0(__p, "raWM");
        sub_21A6B3A38((unsigned __int8 *)&v20, (uint64_t)__p, &v20);
        if (v13 < 0)
          operator delete(__p[0]);
        v8 = sub_21A6B77DC(a1, (uint64_t)&v20, &v19, a4);
        if (!(_DWORD)v8 && a3 && (v19 - 3) <= 5)
        {
          if (CFStringCompare(a3, (CFStringRef)cf, 0) == kCFCompareEqualTo)
            goto LABEL_35;
          sub_21A6CE0F0(__p, "raCr");
          sub_21A6B3A38((unsigned __int8 *)&v20, (uint64_t)__p, &v20);
          if (v13 < 0)
            operator delete(__p[0]);
          *(_BYTE *)(a1 + 386) = 1;
          v8 = sub_21A6B7B5C(a1, (uint64_t)&v20, (uint64_t)&v14, a4);
          *(_BYTE *)(a1 + 386) = 0;
          if ((_DWORD)v8)
            goto LABEL_7;
          v11 = HIBYTE(v16);
          if (v16 < 0)
            v11 = v15;
          if (v11)
          {
            *(_BYTE *)(a1 + 386) = 1;
            sub_21A6CE0F0(__p, "");
            v8 = sub_21A6B7AD4(a1, (uint64_t)&v20, (uint64_t)__p, a4);
            if (v13 < 0)
              operator delete(__p[0]);
            *(_BYTE *)(a1 + 386) = 0;
            if (!(_DWORD)v8)
            {
              sub_21A6B2D64((unsigned __int8 *)&v20, 1651725131, &v20);
              v8 = sub_21A6B7AD4(a1, (uint64_t)&v20, (uint64_t)&v14, a4);
            }
          }
          else
          {
LABEL_35:
            v8 = 0;
          }
        }
      }
    }
  }
LABEL_7:
  if (cf)
    CFRelease(cf);
LABEL_9:
  if (SHIBYTE(v16) < 0)
    operator delete(v14);
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v20.__r_.__value_.__l.__data_);
  return v8;
}

void sub_21A6C9F80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  if (a29 < 0)
    operator delete(a24);
  _Unwind_Resume(exception_object);
}

uint64_t sub_21A6C9FE8()
{
  return 0;
}

uint64_t sub_21A6C9FF0(CFDictionaryRef *a1, uint64_t a2, CFNumberRef *a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t result;
  CFTypeID v9;
  CFTypeRef v10;
  CFTypeRef cf;

  cf = 0;
  if (!a3)
    return 4294967292;
  v7 = sub_21A6B26A8((uint64_t)a1, 0);
  result = sub_21A6CA0F0(a1, "raMA", v7, (CFMutableDictionaryRef *)&cf, a4);
  if (((_DWORD)a4 != 1 || (_DWORD)result != -5) && !(_DWORD)result)
  {
    if (cf
      && (v9 = CFGetTypeID(cf), v9 == CFStringGetTypeID())
      && CFStringGetLength((CFStringRef)cf)
      && CFStringCompare((CFStringRef)cf, CFSTR("00:00:00:00:00:00"), 0))
    {
      v10 = cf;
      *a3 = (CFNumberRef)cf;
    }
    else
    {
      v10 = *a3;
    }
    if (v10)
    {
      return 0;
    }
    else
    {
      LODWORD(result) = sub_21A6AF97C(a1, 1918979393, a3, a4);
      if ((_DWORD)result == -5 && (_DWORD)a4 == 1)
        return 4294967291;
      else
        return result;
    }
  }
  return result;
}

uint64_t sub_21A6CA0F0(CFDictionaryRef *a1, char *a2, uint64_t a3, CFMutableDictionaryRef *a4, uint64_t a5)
{
  uint64_t v9;
  void *__p[2];
  char v12;
  std::string v13;
  _BYTE v14[17];
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  memset(&v13, 0, sizeof(v13));
  if (a4)
  {
    sub_21A6C379C(v14, 0x11uLL, a3);
    MEMORY[0x220747320](&v13, v14);
    sub_21A6CE0F0(__p, a2);
    sub_21A6B3A38((unsigned __int8 *)&v13, (uint64_t)__p, &v13);
    if (v12 < 0)
      operator delete(__p[0]);
    v9 = sub_21A6B64FC(a1, (uint64_t)&v13, a4, a5);
    if ((_DWORD)v9 == -5)
    {
      v9 = 0;
      *a4 = (CFMutableDictionaryRef)&stru_24DD08368;
    }
  }
  else
  {
    v9 = 4294967292;
  }
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
  return v9;
}

void sub_21A6CA1F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_21A6CA228()
{
  return 0;
}

uint64_t sub_21A6CA230(CFDictionaryRef *a1, uint64_t a2, CFMutableDictionaryRef *a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t result;

  if (!a3)
    return 4294967292;
  v7 = sub_21A6BC4A8((uint64_t)a1, 0);
  LODWORD(result) = sub_21A6CA0F0(a1, "raMA", v7, a3, a4);
  if ((_DWORD)result == -5 && (_DWORD)a4 == 1)
    return 4294967291;
  else
    return result;
}

uint64_t sub_21A6CA29C()
{
  return 0;
}

uint64_t sub_21A6CA2A4(CFDictionaryRef *a1, uint64_t a2, CFTypeRef *a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const __CFAllocator *v14;
  CFStringRef v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  void *v23;
  const __CFString *v24;
  const __CFString *v25;

  v24 = 0;
  v25 = 0;
  v22 = 0;
  v23 = 0;
  if (!a3)
  {
    v10 = 4294967292;
LABEL_15:
    *a3 = &stru_24DD08368;
    return v10;
  }
  v8 = sub_21A6BC4A8((uint64_t)a1, 0);
  v9 = sub_21A6CA0F0(a1, "raMA", v8, (CFMutableDictionaryRef *)&v25, a4);
  v10 = v9;
  if (((_DWORD)a4 != 1 || (_DWORD)v9 != -5) && !(_DWORD)v9)
  {
    v11 = sub_21A6B26A8((uint64_t)a1, 0);
    v12 = sub_21A6CA0F0(a1, "raMA", v11, (CFMutableDictionaryRef *)&v24, a4);
    v10 = v12;
    if (((_DWORD)a4 != 1 || (_DWORD)v12 != -5) && !(_DWORD)v12)
    {
      if (v24)
      {
        if (v25)
        {
          v10 = sub_21A694D3C(v24, (char **)&v23);
          if (!(_DWORD)v10)
          {
            if (!v23)
            {
              v10 = 4294960568;
              goto LABEL_10;
            }
            v10 = sub_21A694D3C(v25, (char **)&v22);
            if (!(_DWORD)v10)
            {
              if (v22)
              {
                v14 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
                v15 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("%s / %s"), v22, v23);
                *a3 = v15;
                if (v15)
                {
                  if (*(char *)(a2 + 23) >= 0)
                    v21 = a2;
                  else
                    v21 = *(_QWORD *)a2;
                  v10 = sub_21A693A8C(v14, a1[6], (uint64_t)"%ks=%O", v16, v17, v18, v19, v20, v21);
                  CFRelease(*a3);
                }
                else
                {
                  v10 = 4294960579;
                }
              }
              else
              {
                v10 = 4294960568;
              }
            }
          }
        }
      }
    }
  }
  if (v23)
    free(v23);
LABEL_10:
  if (v22)
    free(v22);
  if ((_DWORD)v10)
    goto LABEL_15;
  return v10;
}

uint64_t sub_21A6CA464(CFDictionaryRef *a1, uint64_t a2, CFMutableDictionaryRef *a3, uint64_t a4)
{
  uint64_t v7;
  void *__p[2];
  char v10;
  std::string v11;

  sub_21A6CE0F0(&v11, "WiFi.");
  if (a3)
  {
    if (sub_21A6AF0B4((uint64_t)a1, 2003390540) && sub_21A6AF0B4((uint64_t)a1, 1198748750))
    {
      sub_21A6CE0F0(__p, "guestnet_intrabss");
      sub_21A6B3A38((unsigned __int8 *)&v11, (uint64_t)__p, &v11);
      if (v10 < 0)
        operator delete(__p[0]);
      v7 = sub_21A6B64FC(a1, (uint64_t)&v11, a3, a4);
      if ((_DWORD)v7 == -5)
      {
        v7 = 0;
        *a3 = (CFMutableDictionaryRef)*MEMORY[0x24BDBD268];
      }
    }
    else
    {
      v7 = 0;
    }
  }
  else
  {
    v7 = 4294967292;
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  return v7;
}

void sub_21A6CA55C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_21A6CA594(uint64_t a1, uint64_t a2, const __CFString *a3, uint64_t a4)
{
  uint64_t v7;
  void *__p[2];
  char v10;
  std::string v11;

  sub_21A6CE0F0(&v11, "WiFi.");
  if (sub_21A6AF0B4(a1, 2003390540) && sub_21A6AF0B4(a1, 1198748750))
  {
    sub_21A6CE0F0(__p, "guestnet_intrabss");
    sub_21A6B3A38((unsigned __int8 *)&v11, (uint64_t)__p, &v11);
    if (v10 < 0)
      operator delete(__p[0]);
    v7 = sub_21A6B2DEC(a1, (uint64_t)&v11, a3, a4);
  }
  else
  {
    v7 = 0;
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  return v7;
}

void sub_21A6CA664(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_21A6CA69C(uint64_t a1, uint64_t a2, CFTypeRef *a3, uint64_t a4)
{
  int64_t size;
  std::string *p_str;
  char *v9;
  int64_t v10;
  std::string *v11;
  char *v12;
  uint64_t v14;
  std::string *v15;
  char *v16;
  int64_t v18;
  std::string::size_type v19;
  std::string::size_type v20;
  std::string *v21;
  int v22;
  const __CFAllocator *v23;
  CFNumberRef v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  std::string v32;
  int valuePtr;
  std::string __str;
  char v35;

  memset(&__str, 0, sizeof(__str));
  valuePtr = 0;
  if (a3)
  {
    if (!sub_21A6AF01C(a1, 1937326413, (uint64_t)&__str, a4))
    {
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
      else
        size = __str.__r_.__value_.__l.__size_;
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_str = &__str;
      else
        p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
      v9 = (char *)p_str + size;
      if (size >= 11)
      {
        v10 = size;
        v11 = p_str;
        while (1)
        {
          v12 = (char *)memchr(v11, 84, v10 - 10);
          if (!v12)
            goto LABEL_22;
          if (*(_QWORD *)v12 == 0x73706143656D6954 && *(_QWORD *)(v12 + 3) == 0x656C757370614365)
            break;
          v11 = (std::string *)(v12 + 1);
          v10 = v9 - (char *)v11;
          if (v9 - (char *)v11 < 11)
            goto LABEL_22;
        }
        if (v12 != v9 && v12 - (char *)p_str != -1)
        {
          valuePtr = 6;
          goto LABEL_45;
        }
      }
LABEL_22:
      if (size >= 7)
      {
        v15 = p_str;
        while (1)
        {
          v16 = (char *)memchr(v15, 65, size - 6);
          if (!v16)
            goto LABEL_43;
          if (*(_DWORD *)v16 == 1349675329 && *(_DWORD *)(v16 + 3) == 1953656656)
            break;
          v15 = (std::string *)(v16 + 1);
          size = v9 - (char *)v15;
          if (v9 - (char *)v15 < 7)
            goto LABEL_43;
        }
        if (v16 == v9)
          goto LABEL_43;
        v18 = v16 - (char *)p_str;
        if (v18 == -1)
          goto LABEL_43;
        v19 = std::string::find(&__str, 44, 0);
        std::string::basic_string(&v32, &__str, v18 + 7, v19 - (v18 + 7), (std::allocator<char> *)&v35);
        if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
        {
          v20 = v32.__r_.__value_.__l.__size_;
          if (!v32.__r_.__value_.__l.__size_)
          {
            v22 = 0;
LABEL_41:
            operator delete(v32.__r_.__value_.__l.__data_);
LABEL_42:
            if (v22)
              goto LABEL_45;
            goto LABEL_43;
          }
          v21 = (std::string *)v32.__r_.__value_.__r.__words[0];
        }
        else
        {
          v20 = HIBYTE(v32.__r_.__value_.__r.__words[2]);
          if (!*((_BYTE *)&v32.__r_.__value_.__s + 23))
            goto LABEL_43;
          v21 = &v32;
        }
        v22 = sub_21A6A23C0((char *)v21, v20, 10);
        valuePtr = v22;
        if ((SHIBYTE(v32.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_42;
        goto LABEL_41;
      }
    }
LABEL_43:
    LODWORD(v32.__r_.__value_.__l.__data_) = 0;
    v14 = sub_21A6AD02C(a1, 1937326416, &v32, 0);
    if (!(_DWORD)v14)
    {
      valuePtr = sub_21A671298(LODWORD(v32.__r_.__value_.__l.__data_));
LABEL_45:
      v23 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
      v24 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], kCFNumberSInt32Type, &valuePtr);
      *a3 = v24;
      if (v24)
      {
        if (*(char *)(a2 + 23) >= 0)
          v30 = a2;
        else
          v30 = *(_QWORD *)a2;
        v14 = sub_21A693A8C(v23, *(__CFArray **)(a1 + 48), (uint64_t)"%ks=%O", v25, v26, v27, v28, v29, v30);
        CFRelease(*a3);
      }
      else
      {
        v14 = 4294960568;
      }
    }
  }
  else
  {
    v14 = 4294967292;
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  return v14;
}

void sub_21A6CA938(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a16 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  _Unwind_Resume(exception_object);
}

uint64_t sub_21A6CA974()
{
  return 0;
}

uint64_t sub_21A6CA97C(uint64_t a1, unsigned __int8 *a2, _QWORD *a3, uint64_t a4)
{
  uint64_t v8;
  _QWORD *v9;
  int v11;
  std::string __p;

  memset(&__p, 0, sizeof(__p));
  v11 = 0;
  if (sub_21A6AF0B4(a1, 2003390540))
  {
    sub_21A6B2D64(a2, 1381328492, &__p);
    v8 = sub_21A6B77DC(a1, (uint64_t)&__p, &v11, a4);
    if (!(_DWORD)v8)
    {
      if ((v11 & 1) != 0)
        v9 = (_QWORD *)MEMORY[0x24BDBD270];
      else
        v9 = (_QWORD *)MEMORY[0x24BDBD268];
      *a3 = *v9;
    }
  }
  else
  {
    v8 = 0;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v8;
}

void sub_21A6CAA40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_21A6CAA5C(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  unsigned int v10;
  std::string __p;

  memset(&__p, 0, sizeof(__p));
  v10 = 0;
  if (sub_21A6AF0B4(a1, 2003390540))
  {
    sub_21A6B2D64(a2, 1381328492, &__p);
    v8 = sub_21A6B77DC(a1, (uint64_t)&__p, &v10, a4);
    if (!(_DWORD)v8)
    {
      v10 = v10 & 0xFFFFFFFE | (*MEMORY[0x24BDBD270] == a3);
      v8 = sub_21A6B38E4(a1, (uint64_t)&__p, v10, a4);
    }
  }
  else
  {
    v8 = 0;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v8;
}

void sub_21A6CAB34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_21A6CAB50(uint64_t a1, unsigned __int8 *a2, _QWORD *a3, uint64_t a4)
{
  uint64_t v8;
  _QWORD *v9;
  int v11;
  std::string __p;

  memset(&__p, 0, sizeof(__p));
  v11 = 0;
  if (sub_21A6AF0B4(a1, 2003390540))
  {
    sub_21A6B2D64(a2, 1381328492, &__p);
    v8 = sub_21A6B77DC(a1, (uint64_t)&__p, &v11, a4);
    if (!(_DWORD)v8)
    {
      if ((v11 & 2) != 0)
        v9 = (_QWORD *)MEMORY[0x24BDBD270];
      else
        v9 = (_QWORD *)MEMORY[0x24BDBD268];
      *a3 = *v9;
    }
  }
  else
  {
    v8 = 0;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v8;
}

void sub_21A6CAC14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_21A6CAC30(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  unsigned int v10;
  std::string __p;

  memset(&__p, 0, sizeof(__p));
  v10 = 0;
  if (sub_21A6AF0B4(a1, 2003390540))
  {
    sub_21A6B2D64(a2, 1381328492, &__p);
    v8 = sub_21A6B77DC(a1, (uint64_t)&__p, &v10, a4);
    if (!(_DWORD)v8)
    {
      v10 = v10 & 0xFFFFFFFD | (2 * (*MEMORY[0x24BDBD270] == a3));
      v8 = sub_21A6B38E4(a1, (uint64_t)&__p, v10, a4);
    }
  }
  else
  {
    v8 = 0;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v8;
}

void sub_21A6CAD04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_21A6CAD20(uint64_t a1, unsigned __int8 *a2, _QWORD *a3, uint64_t a4)
{
  uint64_t v8;
  _QWORD *v9;
  int v11;
  std::string __p;

  memset(&__p, 0, sizeof(__p));
  v11 = 0;
  if (sub_21A6AF0B4(a1, 2003390540))
  {
    sub_21A6B2D64(a2, 1381328492, &__p);
    v8 = sub_21A6B77DC(a1, (uint64_t)&__p, &v11, a4);
    if (!(_DWORD)v8)
    {
      if ((v11 & 4) != 0)
        v9 = (_QWORD *)MEMORY[0x24BDBD270];
      else
        v9 = (_QWORD *)MEMORY[0x24BDBD268];
      *a3 = *v9;
    }
  }
  else
  {
    v8 = 0;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v8;
}

void sub_21A6CADE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_21A6CAE00(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  unsigned int v10;
  std::string __p;

  memset(&__p, 0, sizeof(__p));
  v10 = 0;
  if (sub_21A6AF0B4(a1, 2003390540))
  {
    sub_21A6B2D64(a2, 1381328492, &__p);
    v8 = sub_21A6B77DC(a1, (uint64_t)&__p, &v10, a4);
    if (!(_DWORD)v8)
    {
      v10 = v10 & 0xFFFFFFFB | (4 * (*MEMORY[0x24BDBD270] == a3));
      v8 = sub_21A6B38E4(a1, (uint64_t)&__p, v10, a4);
    }
  }
  else
  {
    v8 = 0;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v8;
}

void sub_21A6CAED4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_21A6CAEF0(uint64_t a1, unsigned __int8 *a2, _QWORD *a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  int v11;
  std::string __p;

  memset(&__p, 0, sizeof(__p));
  v11 = 0;
  if (a3)
  {
    sub_21A6B2D64(a2, 1163543366, &__p);
    v7 = sub_21A6B77DC(a1, (uint64_t)&__p, &v11, a4);
    v8 = v7;
    if (((_DWORD)a4 != 1 || (_DWORD)v7 != -5) && !(_DWORD)v7)
    {
      if ((v11 & 1) != 0)
        v9 = (_QWORD *)MEMORY[0x24BDBD268];
      else
        v9 = (_QWORD *)MEMORY[0x24BDBD270];
      *a3 = *v9;
    }
  }
  else
  {
    v8 = 4294967292;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v8;
}

void sub_21A6CAFB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_21A6CAFD0(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  unsigned int v10;
  std::string __p;

  memset(&__p, 0, sizeof(__p));
  v10 = 0;
  sub_21A6B2D64(a2, 1163543366, &__p);
  v8 = sub_21A6B77DC(a1, (uint64_t)&__p, &v10, a4);
  if (!(_DWORD)v8)
  {
    v10 = v10 & 0xFFFFFFFE | (*MEMORY[0x24BDBD270] != a3);
    sub_21A6B2D64(a2, 1163543366, &__p);
    v8 = sub_21A6B38E4(a1, (uint64_t)&__p, v10, a4);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v8;
}

void sub_21A6CB0B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_21A6CB0CC(uint64_t a1, unsigned __int8 *a2, _QWORD *a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  int v11;
  std::string __p;

  memset(&__p, 0, sizeof(__p));
  v11 = 0;
  if (a3)
  {
    sub_21A6B2D64(a2, 1163543366, &__p);
    v7 = sub_21A6B77DC(a1, (uint64_t)&__p, &v11, a4);
    v8 = v7;
    if (((_DWORD)a4 != 1 || (_DWORD)v7 != -5) && !(_DWORD)v7)
    {
      if ((v11 & 2) != 0)
        v9 = (_QWORD *)MEMORY[0x24BDBD270];
      else
        v9 = (_QWORD *)MEMORY[0x24BDBD268];
      *a3 = *v9;
    }
  }
  else
  {
    v8 = 4294967292;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v8;
}

void sub_21A6CB190(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_21A6CB1AC(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  unsigned int v10;
  std::string __p;

  memset(&__p, 0, sizeof(__p));
  v10 = 0;
  sub_21A6B2D64(a2, 1163543366, &__p);
  v8 = sub_21A6B77DC(a1, (uint64_t)&__p, &v10, a4);
  if (!(_DWORD)v8)
  {
    v10 = v10 & 0xFFFFFFFD | (2 * (*MEMORY[0x24BDBD270] == a3));
    sub_21A6B2D64(a2, 1163543366, &__p);
    v8 = sub_21A6B38E4(a1, (uint64_t)&__p, v10, a4);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v8;
}

void sub_21A6CB288(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_21A6CB2A4(CFDictionaryRef *a1, unsigned __int8 *a2, CFMutableDictionaryRef *a3, uint64_t a4)
{
  uint64_t v7;
  int v8;
  const __CFString *v10;
  std::string __p;

  memset(&__p, 0, sizeof(__p));
  sub_21A6B2D64(a2, 1229213293, &__p);
  v7 = sub_21A6B64FC(a1, (uint64_t)&__p, a3, a4);
  if ((_DWORD)v7 == -5 || !*a3 || !CFStringGetLength((CFStringRef)*a3))
  {
    v10 = 0;
    v7 = sub_21A6AF97C(a1, 1298223988, (CFNumberRef *)&v10, 0);
    if (!(_DWORD)v7)
    {
      if (v10)
      {
        sub_21A6D10B4(v10, 0, 0, (uint64_t)a3);
        if (v8)
          v7 = 4294967291;
        else
          v7 = 0;
      }
      else
      {
        v7 = 4294967291;
      }
    }
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v7;
}

void sub_21A6CB388(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_21A6CB3A8(uint64_t a1, unsigned __int8 *a2, const __CFString *a3, uint64_t a4)
{
  uint64_t v7;
  std::string __p;

  memset(&__p, 0, sizeof(__p));
  sub_21A6B2D64(a2, 1229213293, &__p);
  v7 = sub_21A6B2DEC(a1, (uint64_t)&__p, a3, a4);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v7;
}

void sub_21A6CB424(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_21A6CB440(CFDictionaryRef *a1, uint64_t a2, CFTypeRef *a3)
{
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const __CFAllocator *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  int v23;
  const __CFString *v24;

  v24 = 0;
  v23 = 0;
  v21 = 0;
  v22 = 0;
  v6 = sub_21A6AF97C(a1, 1298223988, (CFNumberRef *)&v24, 0);
  if (!(_DWORD)v6)
  {
    if (v24)
    {
      sub_21A6D0BCC(v24, 0, (uint64_t)&v23, (uint64_t)&v22, (uint64_t)&v21);
      v6 = v13;
      if (!(_DWORD)v13)
      {
        v14 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
        v6 = sub_21A692FEC((const __CFAllocator *)*MEMORY[0x24BDBD240], a3, (uint64_t)"{%kO=%i%kO=%i%kO=%i}", v8, v9, v10, v11, v12, (uint64_t)CFSTR("mbsize"));
        if (!(_DWORD)v6)
        {
          if (*a3)
          {
            if (*(char *)(a2 + 23) >= 0)
              v20 = a2;
            else
              v20 = *(_QWORD *)a2;
            v6 = sub_21A693A8C(v14, a1[6], (uint64_t)"%ks=%O", v15, v16, v17, v18, v19, v20);
            CFRelease(*a3);
          }
          else
          {
            return 4294960568;
          }
        }
      }
    }
    else
    {
      return 4294967291;
    }
  }
  return v6;
}

uint64_t sub_21A6CB570()
{
  return 0;
}

uint64_t sub_21A6CB578(CFDictionaryRef *a1, unsigned __int8 *a2, _QWORD *a3, uint64_t a4)
{
  uint64_t v7;
  const void *Value;
  CFDictionaryRef theDict;
  std::string __p;

  memset(&__p, 0, sizeof(__p));
  theDict = 0;
  *a3 = 0;
  sub_21A6B2D64(a2, 1668050755, &__p);
  v7 = sub_21A6B64FC(a1, (uint64_t)&__p, &theDict, a4);
  if ((_DWORD)v7)
  {
    if (*a3)
      goto LABEL_4;
    goto LABEL_3;
  }
  Value = CFDictionaryGetValue(theDict, CFSTR("enabled"));
  *a3 = Value;
  if (!Value)
LABEL_3:
    *a3 = *MEMORY[0x24BDBD270];
LABEL_4:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v7;
}

void sub_21A6CB634(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_21A6CB650(CFDictionaryRef *a1, unsigned __int8 *a2, const void *a3, uint64_t a4)
{
  uint64_t v7;
  CFMutableDictionaryRef theDict;
  std::string __p;

  memset(&__p, 0, sizeof(__p));
  theDict = 0;
  sub_21A6B2D64(a2, 1668050755, &__p);
  v7 = sub_21A6B64FC(a1, (uint64_t)&__p, &theDict, a4);
  if (!(_DWORD)v7)
  {
    CFDictionarySetValue(theDict, CFSTR("enabled"), a3);
    v7 = sub_21A6B2DEC((uint64_t)a1, (uint64_t)&__p, (const __CFString *)theDict, a4);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v7;
}

void sub_21A6CB700(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_21A6CB71C(CFDictionaryRef *a1, uint64_t a2, __CFArray **a3, uint64_t a4)
{
  const __CFAllocator *v8;
  __CFArray *Mutable;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  const __CFArray *v18;
  const __CFArray *v19;
  CFIndex Count;
  CFIndex v21;
  const __CFDictionary *ValueAtIndex;
  __CFDictionary *v23;
  const void *Value;
  const void *v25;
  const void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  CFDictionaryRef theDict;
  std::string __p;

  memset(&__p, 0, sizeof(__p));
  *a3 = 0;
  v8 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD690]);
  if (sub_21A6AF0B4((uint64_t)a1, 1766018116)
    && (theDict = 0,
        sub_21A6B2D64((unsigned __int8 *)a2, 1766026340, &__p),
        !sub_21A6B64FC(a1, (uint64_t)&__p, &theDict, a4))
    && (v18 = (const __CFArray *)CFDictionaryGetValue(theDict, CFSTR("users")), (v19 = v18) != 0)
    && (Count = CFArrayGetCount(v18), Count >= 1))
  {
    v21 = 0;
    while (1)
    {
      ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v19, v21);
      if (!ValueAtIndex)
        break;
      v23 = CFDictionaryCreateMutable(v8, 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
      Value = CFDictionaryGetValue(ValueAtIndex, CFSTR("appleID"));
      if (!Value)
        break;
      CFDictionarySetValue(v23, CFSTR("appleID"), Value);
      v25 = CFDictionaryGetValue(ValueAtIndex, CFSTR("ncBag"));
      if (v25)
        CFDictionarySetValue(v23, CFSTR("ncBag"), v25);
      v26 = CFDictionaryGetValue(ValueAtIndex, CFSTR("accountStatus"));
      if (v26)
      {
        CFDictionarySetValue(v23, CFSTR("status"), v26);
      }
      else
      {
        v16 = sub_21A693A8C(v8, v23, (uint64_t)"%kO=%i", v27, v28, v29, v30, v31, (uint64_t)CFSTR("status"));
        if ((_DWORD)v16)
          goto LABEL_7;
      }
      CFArrayAppendValue(Mutable, v23);
      CFRelease(v23);
      if (Count == ++v21)
        goto LABEL_3;
    }
    v16 = 0;
  }
  else
  {
LABEL_3:
    *a3 = Mutable;
    if (*(char *)(a2 + 23) >= 0)
      v15 = a2;
    else
      v15 = *(_QWORD *)a2;
    v16 = sub_21A693A8C(v8, a1[6], (uint64_t)"%ks=%O", v10, v11, v12, v13, v14, v15);
  }
LABEL_7:
  if (Mutable)
    CFRelease(Mutable);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v16;
}

void sub_21A6CB964(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_21A6CB990(CFDictionaryRef *a1, unsigned __int8 *a2, const __CFArray *a3, unsigned int a4)
{
  CFIndex Count;
  CFIndex v7;
  const CFDictionaryKeyCallBacks *v8;
  const CFDictionaryValueCallBacks *v9;
  CFMutableDictionaryRef Mutable;
  const __CFDictionary *ValueAtIndex;
  const __CFDictionary *v12;
  const void *v13;
  const void *v14;
  uint64_t v15;
  const __CFArray *Value;
  const __CFString *v17;
  CFIndex v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  __CFDictionary *DeepCopy;
  const __CFString *v45;
  const __CFAllocator *allocator;
  CFMutableArrayRef theArray;
  CFTypeRef cf2;
  CFStringRef theString2;
  CFTypeRef cf1;
  CFStringRef theString1;
  CFDictionaryRef theDict;
  std::string __p;

  memset(&__p, 0, sizeof(__p));
  theDict = 0;
  if (!a3 || !sub_21A6AF0B4((uint64_t)a1, 1766018116))
  {
    v15 = 0;
    goto LABEL_34;
  }
  allocator = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  theArray = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD690]);
  Count = CFArrayGetCount(a3);
  if (Count < 1)
  {
LABEL_10:
    sub_21A6B2D64(a2, 1766026340, &__p);
    v15 = sub_21A6B64FC(a1, (uint64_t)&__p, &theDict, a4);
    if ((_DWORD)v15)
      goto LABEL_32;
    Value = (const __CFArray *)CFDictionaryGetValue(theDict, CFSTR("users"));
    v17 = (const __CFString *)Value;
    if (Value)
      v18 = CFArrayGetCount(Value);
    else
      v18 = 0;
    if (CFArrayGetCount(theArray) == v18)
    {
      cf1 = 0;
      theString1 = 0;
      cf2 = 0;
      theString2 = 0;
      if (v18 >= 1)
      {
        v24 = 0;
        do
        {
          sub_21A693B94(v17, (uint64_t)&theString1, (UInt8 *)"[*].%kO", v19, v20, v21, v22, v23, v24);
          v15 = v30;
          if ((_DWORD)v30)
            goto LABEL_32;
          sub_21A693B94((const __CFString *)theArray, (uint64_t)&theString2, (UInt8 *)"[*].%kO", v25, v26, v27, v28, v29, v24);
          v15 = v31;
          if ((_DWORD)v31)
            goto LABEL_32;
          if (!theString1 || CFStringCompare(theString1, theString2, 0))
            goto LABEL_29;
          sub_21A693B94(v17, (uint64_t)&cf1, (UInt8 *)"[*].%kO", v32, v33, v34, v35, v36, v24);
          v15 = v42;
          if ((_DWORD)v42)
            goto LABEL_32;
          sub_21A693B94((const __CFString *)theArray, (uint64_t)&cf2, (UInt8 *)"[*].%kO", v37, v38, v39, v40, v41, v24);
          v15 = v43;
          if ((_DWORD)v43)
            goto LABEL_32;
          if (!cf1 || !CFEqual(cf1, cf2))
            goto LABEL_29;
        }
        while (v18 != ++v24);
      }
    }
    else
    {
LABEL_29:
      DeepCopy = (__CFDictionary *)CFPropertyListCreateDeepCopy(allocator, theDict, 2uLL);
      v45 = (const __CFString *)DeepCopy;
      if (DeepCopy)
      {
        CFDictionarySetValue(DeepCopy, CFSTR("users"), theArray);
        v15 = sub_21A6B2DEC((uint64_t)a1, (uint64_t)&__p, v45, a4);
        CFRelease(v45);
        goto LABEL_32;
      }
    }
  }
  else
  {
    v7 = 0;
    v8 = (const CFDictionaryKeyCallBacks *)MEMORY[0x24BDBD6A0];
    v9 = (const CFDictionaryValueCallBacks *)MEMORY[0x24BDBD6B0];
    while (1)
    {
      Mutable = CFDictionaryCreateMutable(allocator, 0, v8, v9);
      if (!Mutable)
        break;
      ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(a3, v7);
      v12 = ValueAtIndex;
      if (!ValueAtIndex)
      {
        CFRelease(Mutable);
        break;
      }
      v13 = CFDictionaryGetValue(ValueAtIndex, CFSTR("appleID"));
      if (!v13)
        break;
      CFDictionarySetValue(Mutable, CFSTR("appleID"), v13);
      v14 = CFDictionaryGetValue(v12, CFSTR("ncBag"));
      if (!v14)
        break;
      CFDictionarySetValue(Mutable, CFSTR("ncBag"), v14);
      CFArrayAppendValue(theArray, Mutable);
      CFRelease(Mutable);
      if (Count == ++v7)
        goto LABEL_10;
    }
  }
  v15 = 0;
LABEL_32:
  if (theArray)
    CFRelease(theArray);
LABEL_34:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v15;
}

void sub_21A6CBCB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a25 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_21A6CBCE4(uint64_t a1, uint64_t a2, CFTypeRef *a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  const __CFAllocator *v13;
  CFNumberRef v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  std::string __p;
  int valuePtr;
  BOOL v23;
  int v24;

  v24 = 0;
  v23 = 0;
  valuePtr = 0;
  memset(&__p, 0, sizeof(__p));
  if (a3)
  {
    *a3 = 0;
    sub_21A6B2D64((unsigned __int8 *)a2, 912483943, &__p);
    v8 = sub_21A6B77DC(a1, (uint64_t)&__p, &v24, a4);
    v9 = v8;
    if (((_DWORD)a4 != 1 || (_DWORD)v8 != -5) && !(_DWORD)v8)
    {
      sub_21A6B2D64((unsigned __int8 *)a2, 912356724, &__p);
      v10 = sub_21A6B79E0(a1, (uint64_t)&__p, &v23, 0);
      v9 = v10;
      if (((_DWORD)a4 != 1 || (_DWORD)v10 != -5) && !(_DWORD)v10)
      {
        switch(v24)
        {
          case 0:
            valuePtr = 0;
            break;
          case 1:
          case 3:
          case 5:
            if (v23)
              v11 = 1;
            else
              v11 = 2;
            valuePtr = v11;
            break;
          default:
            break;
        }
        v13 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
        v14 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], kCFNumberSInt32Type, &valuePtr);
        *a3 = v14;
        if (v14)
        {
          if (*(char *)(a2 + 23) >= 0)
            v20 = a2;
          else
            v20 = *(_QWORD *)a2;
          v9 = sub_21A693A8C(v13, *(__CFArray **)(a1 + 48), (uint64_t)"%ks=%O", v15, v16, v17, v18, v19, v20);
          CFRelease(*a3);
        }
        else
        {
          v9 = 4294960568;
        }
      }
    }
  }
  else
  {
    v9 = 4294967292;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v9;
}

void sub_21A6CBE7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_21A6CBE98(uint64_t a1, unsigned __int8 *a2, CFNumberRef number, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const __CFString **v10;
  std::string __p;
  int valuePtr;
  int v14;
  BOOL v15;

  valuePtr = 0;
  v14 = 0;
  memset(&__p, 0, sizeof(__p));
  if (!number)
    goto LABEL_19;
  if (!CFNumberGetValue(number, kCFNumberSInt32Type, &valuePtr))
  {
    v8 = 4294967293;
    goto LABEL_20;
  }
  sub_21A6B2D64(a2, 912356724, &__p);
  v15 = 0;
  v7 = sub_21A6B79E0(a1, (uint64_t)&__p, &v15, a4);
  v8 = v7;
  if ((_DWORD)a4 == 1 && (_DWORD)v7 == -5)
    goto LABEL_20;
  if ((_DWORD)v7)
    goto LABEL_20;
  sub_21A6B2D64(a2, 912483943, &__p);
  v9 = sub_21A6B77DC(a1, (uint64_t)&__p, &v14, a4);
  v8 = v9;
  if ((_DWORD)a4 == 1 && (_DWORD)v9 == -5)
    goto LABEL_20;
  if ((_DWORD)v9)
    goto LABEL_20;
  if ((valuePtr - 1) < 2)
  {
    v15 = valuePtr == 1;
    if (!v14)
      v14 = 1;
    goto LABEL_15;
  }
  if (valuePtr)
  {
LABEL_19:
    v8 = 4294967292;
    goto LABEL_20;
  }
  v14 = 0;
LABEL_15:
  sub_21A6B2D64(a2, 912356724, &__p);
  v10 = (const __CFString **)MEMORY[0x24BDBD270];
  if (!v15)
    v10 = (const __CFString **)MEMORY[0x24BDBD268];
  v8 = sub_21A6B2DEC(a1, (uint64_t)&__p, *v10, a4);
  if (!(_DWORD)v8)
  {
    sub_21A6B2D64(a2, 912483943, &__p);
    v8 = sub_21A6B38E4(a1, (uint64_t)&__p, v14, a4);
  }
LABEL_20:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v8;
}

void sub_21A6CC04C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_21A6CC068(uint64_t a1, uint64_t a2, CFTypeRef *a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  int v10;
  const __CFAllocator *v12;
  CFNumberRef v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  std::string __p;
  uint64_t valuePtr;

  valuePtr = 0;
  memset(&__p, 0, sizeof(__p));
  if (a3)
  {
    *a3 = 0;
    sub_21A6B2D64((unsigned __int8 *)a2, 912483943, &__p);
    v8 = sub_21A6B77DC(a1, (uint64_t)&__p, &valuePtr, a4);
    v9 = v8;
    if ((_DWORD)a4 == 1 && (_DWORD)v8 == -5 || (_DWORD)v8)
      goto LABEL_8;
    if ((_DWORD)valuePtr == 3)
    {
      v10 = 1;
    }
    else
    {
      if (!sub_21A6BDA38(a1))
      {
        HIDWORD(valuePtr) = 0;
LABEL_15:
        v12 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
        v13 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], kCFNumberSInt32Type, (char *)&valuePtr + 4);
        *a3 = v13;
        if (v13)
        {
          if (*(char *)(a2 + 23) >= 0)
            v19 = a2;
          else
            v19 = *(_QWORD *)a2;
          v9 = sub_21A693A8C(v12, *(__CFArray **)(a1 + 48), (uint64_t)"%ks=%O", v14, v15, v16, v17, v18, v19);
          CFRelease(*a3);
        }
        else
        {
          v9 = 4294960568;
        }
        goto LABEL_8;
      }
      v10 = 2;
    }
    HIDWORD(valuePtr) = v10;
    goto LABEL_15;
  }
  v9 = 4294967292;
LABEL_8:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v9;
}

void sub_21A6CC1A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_21A6CC1C0(uint64_t a1, unsigned __int8 *a2, CFNumberRef number, uint64_t a4)
{
  int v7;
  uint64_t v8;
  std::string __p;
  unsigned int valuePtr;

  memset(&__p, 0, sizeof(__p));
  if (!number)
    return 4294967292;
  valuePtr = 0;
  if (!CFNumberGetValue(number, kCFNumberSInt32Type, &valuePtr))
    return 4294967293;
  if (valuePtr > 2)
    return 4294967292;
  v7 = dword_21A73F174[valuePtr];
  sub_21A6B2D64(a2, 912483943, &__p);
  v8 = sub_21A6B38E4(a1, (uint64_t)&__p, v7, a4);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v8;
}

void sub_21A6CC284(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_21A6CC2A0(CFDictionaryRef *a1, uint64_t a2, CFMutableArrayRef *a3, uint64_t a4)
{
  const __CFAllocator *v8;
  CFMutableArrayRef Mutable;
  const __CFArray *v10;
  const __CFArray *v11;
  CFIndex v12;
  CFIndex v13;
  const void *v14;
  const __CFString *ValueAtIndex;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  const __CFString *v21;
  int v22;
  __CFDictionary *DeepCopy;
  __CFDictionary *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  const __CFArray *Value;
  const __CFArray *v31;
  CFIndex Count;
  CFIndex v33;
  const void *v34;
  const void *v35;
  __CFDictionary *v36;
  __CFDictionary *v37;
  uint64_t v38;
  uint64_t v39;
  char v41;
  CFDictionaryRef theDict;
  std::string __p;

  memset(&__p, 0, sizeof(__p));
  if (a3)
  {
    v8 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
    Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD690]);
    *a3 = Mutable;
    if (Mutable)
    {
      if (sub_21A6AF0B4((uint64_t)a1, 1181898604)
        && (theDict = 0,
            sub_21A6B2D64((unsigned __int8 *)a2, 1718186597, &__p),
            !sub_21A6B64FC(a1, (uint64_t)&__p, &theDict, a4))
        && theDict
        && (v10 = (const __CFArray *)CFDictionaryGetValue(theDict, CFSTR("entries")), (v11 = v10) != 0)
        && (v12 = CFArrayGetCount(v10), v41 = 0, v12 >= 1))
      {
        v13 = 0;
        v14 = (const void *)*MEMORY[0x24BDBD268];
        while (1)
        {
          ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v11, v13);
          v21 = ValueAtIndex;
          if (!ValueAtIndex)
            break;
          sub_21A693B94(ValueAtIndex, (uint64_t)&v41, (UInt8 *)"%kO:BOOL", v16, v17, v18, v19, v20, (uint64_t)CFSTR("entryEnabled"));
          if (v22 || v41)
          {
            DeepCopy = (__CFDictionary *)CFPropertyListCreateDeepCopy(v8, v21, 2uLL);
            v24 = DeepCopy;
            if (!DeepCopy)
              goto LABEL_29;
            CFDictionarySetValue(DeepCopy, CFSTR("firewallEntryIsIPv6"), v14);
            CFArrayAppendValue(*a3, v24);
            CFRelease(v24);
          }
          if (v12 == ++v13)
            goto LABEL_15;
        }
      }
      else
      {
LABEL_15:
        if (!sub_21A6AF0B4((uint64_t)a1, 1768961606)
          || (theDict = 0,
              sub_21A6B2D64((unsigned __int8 *)a2, 912684908, &__p),
              sub_21A6B64FC(a1, (uint64_t)&__p, &theDict, a4))
          || !theDict
          || (Value = (const __CFArray *)CFDictionaryGetValue(theDict, CFSTR("entries")), (v31 = Value) == 0)
          || (Count = CFArrayGetCount(Value), Count < 1))
        {
LABEL_24:
          if (*(char *)(a2 + 23) >= 0)
            v38 = a2;
          else
            v38 = *(_QWORD *)a2;
          v39 = sub_21A693A8C(v8, a1[6], (uint64_t)"%ks=%O", v25, v26, v27, v28, v29, v38);
          CFRelease(*a3);
          goto LABEL_30;
        }
        v33 = 0;
        v34 = (const void *)*MEMORY[0x24BDBD270];
        while (1)
        {
          v35 = CFArrayGetValueAtIndex(v31, v33);
          if (!v35)
            break;
          v36 = (__CFDictionary *)CFPropertyListCreateDeepCopy(v8, v35, 2uLL);
          v37 = v36;
          if (!v36)
            goto LABEL_29;
          CFDictionarySetValue(v36, CFSTR("firewallEntryIsIPv6"), v34);
          CFArrayAppendValue(*a3, v37);
          CFRelease(v37);
          if (Count == ++v33)
            goto LABEL_24;
        }
      }
      v39 = 4294967291;
    }
    else
    {
LABEL_29:
      v39 = 4294967293;
    }
  }
  else
  {
    v39 = 4294967292;
  }
LABEL_30:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v39;
}

void sub_21A6CC580(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_21A6CC5BC(CFDictionaryRef *a1, unsigned __int8 *a2, CFTypeRef cf, uint64_t a4)
{
  CFTypeID v8;
  CFIndex Count;
  uint64_t v10;
  const void *Value;
  const void *v12;
  CFMutableArrayRef Mutable;
  CFIndex v14;
  const __CFAllocator *v15;
  const void *ValueAtIndex;
  const __CFString *DeepCopy;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __CFDictionary *v23;
  uint64_t v24;
  BOOL v25;
  int v26;
  int v27;
  __CFArray *v28;
  int v29;
  _BOOL4 v30;
  _BOOL4 v31;
  __CFDictionary *v32;
  const __CFString *v33;
  __CFDictionary *v34;
  const __CFString *v35;
  const void *v37;
  unsigned __int8 *v38;
  CFDictionaryRef *v39;
  CFMutableArrayRef theArray;
  CFDictionaryRef v41;
  CFDictionaryRef theDict;
  char v43;
  std::string __p;

  memset(&__p, 0, sizeof(__p));
  v43 = 0;
  v41 = 0;
  theDict = 0;
  if (!cf || (v8 = CFGetTypeID(cf), v8 != CFArrayGetTypeID()))
  {
    v10 = 4294967292;
    goto LABEL_58;
  }
  Count = CFArrayGetCount((CFArrayRef)cf);
  if (sub_21A6AF0B4((uint64_t)a1, 1181898604))
  {
    sub_21A6B2D64(a2, 1718186597, &__p);
    v10 = sub_21A6B64FC(a1, (uint64_t)&__p, &theDict, a4);
    if ((_DWORD)v10)
    {
      Value = 0;
    }
    else
    {
      Value = CFDictionaryGetValue(theDict, CFSTR("entries"));
      if (!Value)
      {
        v10 = 4294967291;
        goto LABEL_58;
      }
    }
    theArray = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD690]);
  }
  else
  {
    Value = 0;
    theArray = 0;
    v10 = 0;
  }
  if (sub_21A6AF0B4((uint64_t)a1, 1768961606))
  {
    sub_21A6B2D64(a2, 912684908, &__p);
    v10 = sub_21A6B64FC(a1, (uint64_t)&__p, &v41, a4);
    if ((_DWORD)v10)
    {
      v12 = 0;
    }
    else
    {
      v12 = CFDictionaryGetValue(v41, CFSTR("entries"));
      if (!v12)
      {
        Mutable = 0;
LABEL_53:
        v10 = 4294967291;
        goto LABEL_54;
      }
    }
    Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD690]);
  }
  else
  {
    v12 = 0;
    Mutable = 0;
  }
  if (Count >= 1)
  {
    v37 = Value;
    v38 = a2;
    v39 = a1;
    v14 = 0;
    v15 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
    while (1)
    {
      ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)cf, v14);
      if (!ValueAtIndex)
        goto LABEL_53;
      DeepCopy = (const __CFString *)CFPropertyListCreateDeepCopy(v15, ValueAtIndex, 2uLL);
      v23 = (__CFDictionary *)DeepCopy;
      if (!DeepCopy)
      {
        v10 = 4294967293;
        goto LABEL_54;
      }
      sub_21A693B94(DeepCopy, (uint64_t)&v43, (UInt8 *)"%kO:BOOL", v18, v19, v20, v21, v22, (uint64_t)CFSTR("firewallEntryIsIPv6"));
      v10 = v24;
      if ((_DWORD)v24)
        v25 = 1;
      else
        v25 = v43 == 0;
      v26 = !v25;
      CFDictionaryRemoveValue(v23, CFSTR("firewallEntryIsIPv6"));
      if (Mutable)
        v27 = v26;
      else
        v27 = 0;
      v28 = Mutable;
      if (v27 == 1 || ((v28 = theArray) == 0 ? (v29 = 1) : (v29 = v26), v29 != 1))
        CFArrayAppendValue(v28, v23);
      CFRelease(v23);
      if (Count == ++v14)
      {
        a4 = a4;
        a2 = v38;
        a1 = v39;
        Value = v37;
        break;
      }
    }
  }
  v30 = 0;
  if (theArray && Value)
    v30 = CFEqual(theArray, Value) == 0;
  v31 = 0;
  if (Mutable && v12)
    v31 = CFEqual(Mutable, v12) == 0;
  if (!v30)
    goto LABEL_46;
  v32 = (__CFDictionary *)CFPropertyListCreateDeepCopy((CFAllocatorRef)*MEMORY[0x24BDBD240], theDict, 2uLL);
  v33 = (const __CFString *)v32;
  if (!v32)
    goto LABEL_50;
  CFDictionarySetValue(v32, CFSTR("entries"), theArray);
  sub_21A6B2D64(a2, 1718186597, &__p);
  v10 = sub_21A6B2DEC((uint64_t)a1, (uint64_t)&__p, v33, a4);
  CFRelease(v33);
  if (!(_DWORD)v10)
  {
LABEL_46:
    if (v31)
    {
      v34 = (__CFDictionary *)CFPropertyListCreateDeepCopy((CFAllocatorRef)*MEMORY[0x24BDBD240], v41, 2uLL);
      v35 = (const __CFString *)v34;
      if (v34)
      {
        CFDictionarySetValue(v34, CFSTR("entries"), Mutable);
        sub_21A6B2D64(a2, 912684908, &__p);
        v10 = sub_21A6B2DEC((uint64_t)a1, (uint64_t)&__p, v35, a4);
        CFRelease(v35);
        goto LABEL_54;
      }
LABEL_50:
      v10 = 4294960568;
    }
  }
LABEL_54:
  if (theArray)
    CFRelease(theArray);
  if (Mutable)
    CFRelease(Mutable);
LABEL_58:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v10;
}

void sub_21A6CC9C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a25 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_21A6CC9EC(uint64_t a1, uint64_t a2, CFTypeRef *a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *p_p;
  unsigned int v13;
  char *v14;
  const __CFAllocator *v15;
  CFStringRef v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  void *__p;
  uint64_t v25;
  uint64_t v26;
  std::string v27;
  __int128 v28;
  char v29[81];
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  memset(&v27, 0, sizeof(v27));
  __p = 0;
  v25 = 0;
  v26 = 0;
  if (!a3)
  {
    v9 = 4294967292;
    goto LABEL_12;
  }
  v23 = 0;
  sub_21A6B2D64((unsigned __int8 *)a2, 911696228, &v27);
  v8 = sub_21A6B7B5C(a1, (uint64_t)&v27, (uint64_t)&__p, a4);
  v9 = v8;
  if (((_DWORD)a4 != 1 || (_DWORD)v8 != -5) && !(_DWORD)v8)
  {
    sub_21A6B2D64((unsigned __int8 *)a2, 911697528, &v27);
    v10 = sub_21A6B77DC(a1, (uint64_t)&v27, &v23, a4);
    v9 = v10;
    if (((_DWORD)a4 != 1 || (_DWORD)v10 != -5) && !(_DWORD)v10)
    {
      if (SHIBYTE(v26) < 0)
      {
        p_p = (char *)__p;
        if (!v25)
          goto LABEL_24;
      }
      else
      {
        p_p = (char *)&__p;
        if (!HIBYTE(v26))
        {
LABEL_24:
          v15 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
          v16 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x24BDBD240], p_p, 0x8000100u);
          *a3 = v16;
          if (v16)
          {
            if (*(char *)(a2 + 23) >= 0)
              v22 = a2;
            else
              v22 = *(_QWORD *)a2;
            v9 = sub_21A693A8C(v15, *(__CFArray **)(a1 + 48), (uint64_t)"%ks=%O", v17, v18, v19, v20, v21, v22);
            CFRelease(*a3);
          }
          else
          {
            v9 = 4294960568;
          }
          goto LABEL_12;
        }
      }
      v9 = sub_21A6A11D4(p_p, 0, &v28, 0, 0, 0, 0);
      if ((_DWORD)v9)
        goto LABEL_12;
      v13 = v23;
      if ((v23 & 0xFFFFFFBF) == 0)
      {
        v13 = -1;
        v23 = -1;
      }
      v14 = sub_21A6A1914(&v28, 0, 0, v13, v29);
      MEMORY[0x220747320](&__p, v14);
      if (SHIBYTE(v26) < 0)
        p_p = (char *)__p;
      else
        p_p = (char *)&__p;
      goto LABEL_24;
    }
  }
LABEL_12:
  if (SHIBYTE(v26) < 0)
    operator delete(__p);
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v27.__r_.__value_.__l.__data_);
  return v9;
}

void sub_21A6CCC08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a18 < 0)
    operator delete(__p);
  if (a24 < 0)
    operator delete(a19);
  _Unwind_Resume(exception_object);
}

uint64_t sub_21A6CCC34(uint64_t a1, unsigned __int8 *a2, const __CFString *a3, uint64_t a4)
{
  uint64_t v7;
  _BYTE *p_p;
  char *v10;
  int v11;
  int v12;
  void *__p;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  const char *v17;
  std::string v18;
  char v19[81];
  __int128 v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  memset(&v18, 0, sizeof(v18));
  v16 = 0;
  v17 = 0;
  __p = 0;
  v14 = 0;
  v15 = 0;
  v12 = 0;
  if (!a3)
  {
    v7 = 4294967292;
    goto LABEL_6;
  }
  v7 = sub_21A694C44(a3, &v17, (UInt8 **)&v16);
  if (!(_DWORD)v7)
  {
    MEMORY[0x220747320](&__p, v17);
    v12 = 0;
    if (SHIBYTE(v15) < 0)
    {
      p_p = __p;
      if (v14)
      {
LABEL_15:
        v7 = sub_21A6A11D4(p_p, 0, &v20, 0, 0, (unsigned int *)&v12, 0);
        if ((_DWORD)v7)
          goto LABEL_3;
        v10 = sub_21A6A1914(&v20, 0, 0, 0xFFFFFFFF, v19);
        MEMORY[0x220747320](&__p, v10);
        sub_21A6B2D64(a2, 911696228, &v18);
        v7 = sub_21A6B7AD4(a1, (uint64_t)&v18, (uint64_t)&__p, a4);
        if ((_DWORD)v7)
          goto LABEL_3;
        if (!v12)
          v12 = 64;
        sub_21A6B2D64(a2, 911697528, &v18);
        v11 = v12;
LABEL_24:
        v7 = sub_21A6B38E4(a1, (uint64_t)&v18, v11, a4);
        goto LABEL_3;
      }
      *(_BYTE *)__p = 0;
      v14 = 0;
    }
    else
    {
      if (HIBYTE(v15))
      {
        p_p = &__p;
        goto LABEL_15;
      }
      LOBYTE(__p) = 0;
      HIBYTE(v15) = 0;
    }
    sub_21A6B2D64(a2, 911696228, &v18);
    v7 = sub_21A6B7AD4(a1, (uint64_t)&v18, (uint64_t)&__p, a4);
    if ((_DWORD)v7)
      goto LABEL_3;
    sub_21A6B2D64(a2, 911697528, &v18);
    v11 = 0;
    goto LABEL_24;
  }
LABEL_3:
  if (v16)
  {
    free(v16);
    v16 = 0;
  }
LABEL_6:
  if (SHIBYTE(v15) < 0)
    operator delete(__p);
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v18.__r_.__value_.__l.__data_);
  return v7;
}

void sub_21A6CCE4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a16 < 0)
    operator delete(__p);
  if (a24 < 0)
    operator delete(a19);
  _Unwind_Resume(exception_object);
}

uint64_t sub_21A6CCE78(uint64_t a1, uint64_t a2, CFTypeRef *a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *p_p;
  unsigned int v13;
  char *v14;
  const __CFAllocator *v15;
  CFStringRef v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  void *__p;
  uint64_t v25;
  uint64_t v26;
  std::string v27;
  __int128 v28;
  char v29[81];
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  memset(&v27, 0, sizeof(v27));
  __p = 0;
  v25 = 0;
  v26 = 0;
  if (!a3)
  {
    v9 = 4294967292;
    goto LABEL_12;
  }
  v23 = 0;
  sub_21A6B2D64((unsigned __int8 *)a2, 910382945, &v27);
  v8 = sub_21A6B7B5C(a1, (uint64_t)&v27, (uint64_t)&__p, a4);
  v9 = v8;
  if (((_DWORD)a4 != 1 || (_DWORD)v8 != -5) && !(_DWORD)v8)
  {
    sub_21A6B2D64((unsigned __int8 *)a2, 910382960, &v27);
    v10 = sub_21A6B77DC(a1, (uint64_t)&v27, &v23, a4);
    v9 = v10;
    if (((_DWORD)a4 != 1 || (_DWORD)v10 != -5) && !(_DWORD)v10)
    {
      if (SHIBYTE(v26) < 0)
      {
        p_p = (char *)__p;
        if (!v25)
          goto LABEL_24;
      }
      else
      {
        p_p = (char *)&__p;
        if (!HIBYTE(v26))
        {
LABEL_24:
          v15 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
          v16 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x24BDBD240], p_p, 0x8000100u);
          *a3 = v16;
          if (v16)
          {
            if (*(char *)(a2 + 23) >= 0)
              v22 = a2;
            else
              v22 = *(_QWORD *)a2;
            v9 = sub_21A693A8C(v15, *(__CFArray **)(a1 + 48), (uint64_t)"%ks=%O", v17, v18, v19, v20, v21, v22);
            CFRelease(*a3);
          }
          else
          {
            v9 = 4294960568;
          }
          goto LABEL_12;
        }
      }
      v9 = sub_21A6A11D4(p_p, 0, &v28, 0, 0, 0, 0);
      if ((_DWORD)v9)
        goto LABEL_12;
      v13 = v23;
      if ((v23 & 0xFFFFFFBF) == 0)
      {
        v13 = -1;
        v23 = -1;
      }
      v14 = sub_21A6A1914(&v28, 0, 0, v13, v29);
      MEMORY[0x220747320](&__p, v14);
      if (SHIBYTE(v26) < 0)
        p_p = (char *)__p;
      else
        p_p = (char *)&__p;
      goto LABEL_24;
    }
  }
LABEL_12:
  if (SHIBYTE(v26) < 0)
    operator delete(__p);
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v27.__r_.__value_.__l.__data_);
  return v9;
}

void sub_21A6CD094(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a18 < 0)
    operator delete(__p);
  if (a24 < 0)
    operator delete(a19);
  _Unwind_Resume(exception_object);
}

uint64_t sub_21A6CD0C0()
{
  return 0;
}

uint64_t sub_21A6CD0C8(uint64_t a1, uint64_t a2, CFTypeRef *a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *p_p;
  unsigned int v13;
  char *v14;
  const __CFAllocator *v15;
  CFStringRef v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  void *__p;
  uint64_t v25;
  uint64_t v26;
  std::string v27;
  __int128 v28;
  char v29[81];
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  memset(&v27, 0, sizeof(v27));
  __p = 0;
  v25 = 0;
  v26 = 0;
  if (!a3)
  {
    v9 = 4294967292;
    goto LABEL_12;
  }
  v23 = 0;
  sub_21A6B2D64((unsigned __int8 *)a2, 911230049, &v27);
  v8 = sub_21A6B7B5C(a1, (uint64_t)&v27, (uint64_t)&__p, a4);
  v9 = v8;
  if (((_DWORD)a4 != 1 || (_DWORD)v8 != -5) && !(_DWORD)v8)
  {
    sub_21A6B2D64((unsigned __int8 *)a2, 911230060, &v27);
    v10 = sub_21A6B77DC(a1, (uint64_t)&v27, &v23, a4);
    v9 = v10;
    if (((_DWORD)a4 != 1 || (_DWORD)v10 != -5) && !(_DWORD)v10)
    {
      if (SHIBYTE(v26) < 0)
      {
        p_p = (char *)__p;
        if (!v25)
          goto LABEL_24;
      }
      else
      {
        p_p = (char *)&__p;
        if (!HIBYTE(v26))
        {
LABEL_24:
          v15 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
          v16 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x24BDBD240], p_p, 0x8000100u);
          *a3 = v16;
          if (v16)
          {
            if (*(char *)(a2 + 23) >= 0)
              v22 = a2;
            else
              v22 = *(_QWORD *)a2;
            v9 = sub_21A693A8C(v15, *(__CFArray **)(a1 + 48), (uint64_t)"%ks=%O", v17, v18, v19, v20, v21, v22);
            CFRelease(*a3);
          }
          else
          {
            v9 = 4294960568;
          }
          goto LABEL_12;
        }
      }
      v9 = sub_21A6A11D4(p_p, 0, &v28, 0, 0, 0, 0);
      if ((_DWORD)v9)
        goto LABEL_12;
      v13 = v23;
      if (!v23)
      {
        v13 = 48;
        v23 = 48;
      }
      v14 = sub_21A6A1914(&v28, 0, 0, v13, v29);
      MEMORY[0x220747320](&__p, v14);
      if (SHIBYTE(v26) < 0)
        p_p = (char *)__p;
      else
        p_p = (char *)&__p;
      goto LABEL_24;
    }
  }
LABEL_12:
  if (SHIBYTE(v26) < 0)
    operator delete(__p);
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v27.__r_.__value_.__l.__data_);
  return v9;
}

void sub_21A6CD2E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a18 < 0)
    operator delete(__p);
  if (a24 < 0)
    operator delete(a19);
  _Unwind_Resume(exception_object);
}

uint64_t sub_21A6CD30C(uint64_t a1, unsigned __int8 *a2, const __CFString *a3, uint64_t a4)
{
  uint64_t v7;
  _BYTE *p_p;
  char *v10;
  int v11;
  int v12;
  void *__p;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  const char *v17;
  std::string v18;
  char v19[81];
  __int128 v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  memset(&v18, 0, sizeof(v18));
  v16 = 0;
  v17 = 0;
  __p = 0;
  v14 = 0;
  v15 = 0;
  v12 = 0;
  if (!a3)
  {
    v7 = 4294967292;
    goto LABEL_6;
  }
  v7 = sub_21A694C44(a3, &v17, (UInt8 **)&v16);
  if (!(_DWORD)v7)
  {
    MEMORY[0x220747320](&__p, v17);
    v12 = 0;
    if (SHIBYTE(v15) < 0)
    {
      p_p = __p;
      if (v14)
      {
LABEL_15:
        v7 = sub_21A6A11D4(p_p, 0, &v20, 0, 0, (unsigned int *)&v12, 0);
        if ((_DWORD)v7)
          goto LABEL_3;
        v10 = sub_21A6A1914(&v20, 0, 0, 0xFFFFFFFF, v19);
        MEMORY[0x220747320](&__p, v10);
        sub_21A6B2D64(a2, 911230049, &v18);
        v7 = sub_21A6B7AD4(a1, (uint64_t)&v18, (uint64_t)&__p, a4);
        if ((_DWORD)v7)
          goto LABEL_3;
        if (!v12)
          v12 = 48;
        sub_21A6B2D64(a2, 911230060, &v18);
        v11 = v12;
LABEL_24:
        v7 = sub_21A6B38E4(a1, (uint64_t)&v18, v11, a4);
        goto LABEL_3;
      }
      *(_BYTE *)__p = 0;
      v14 = 0;
    }
    else
    {
      if (HIBYTE(v15))
      {
        p_p = &__p;
        goto LABEL_15;
      }
      LOBYTE(__p) = 0;
      HIBYTE(v15) = 0;
    }
    sub_21A6B2D64(a2, 911230049, &v18);
    v7 = sub_21A6B7AD4(a1, (uint64_t)&v18, (uint64_t)&__p, a4);
    if ((_DWORD)v7)
      goto LABEL_3;
    sub_21A6B2D64(a2, 911230060, &v18);
    v11 = 0;
    goto LABEL_24;
  }
LABEL_3:
  if (v16)
  {
    free(v16);
    v16 = 0;
  }
LABEL_6:
  if (SHIBYTE(v15) < 0)
    operator delete(__p);
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v18.__r_.__value_.__l.__data_);
  return v7;
}

void sub_21A6CD524(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a16 < 0)
    operator delete(__p);
  if (a24 < 0)
    operator delete(a19);
  _Unwind_Resume(exception_object);
}

uint64_t sub_21A6CD550(uint64_t a1, uint64_t a2, CFTypeRef *a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *p_p;
  unsigned int v13;
  char *v14;
  const __CFAllocator *v15;
  CFStringRef v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  void *__p;
  uint64_t v25;
  uint64_t v26;
  std::string v27;
  __int128 v28;
  char v29[81];
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  memset(&v27, 0, sizeof(v27));
  __p = 0;
  v25 = 0;
  v26 = 0;
  if (!a3)
  {
    v9 = 4294967292;
    goto LABEL_12;
  }
  v23 = 0;
  sub_21A6B2D64((unsigned __int8 *)a2, 910381153, &v27);
  v8 = sub_21A6B7B5C(a1, (uint64_t)&v27, (uint64_t)&__p, a4);
  v9 = v8;
  if (((_DWORD)a4 != 1 || (_DWORD)v8 != -5) && !(_DWORD)v8)
  {
    sub_21A6B2D64((unsigned __int8 *)a2, 910381164, &v27);
    v10 = sub_21A6B77DC(a1, (uint64_t)&v27, &v23, a4);
    v9 = v10;
    if (((_DWORD)a4 != 1 || (_DWORD)v10 != -5) && !(_DWORD)v10)
    {
      if (SHIBYTE(v26) < 0)
      {
        p_p = (char *)__p;
        if (!v25)
          goto LABEL_24;
      }
      else
      {
        p_p = (char *)&__p;
        if (!HIBYTE(v26))
        {
LABEL_24:
          v15 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
          v16 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x24BDBD240], p_p, 0x8000100u);
          *a3 = v16;
          if (v16)
          {
            if (*(char *)(a2 + 23) >= 0)
              v22 = a2;
            else
              v22 = *(_QWORD *)a2;
            v9 = sub_21A693A8C(v15, *(__CFArray **)(a1 + 48), (uint64_t)"%ks=%O", v17, v18, v19, v20, v21, v22);
            CFRelease(*a3);
          }
          else
          {
            v9 = 4294960568;
          }
          goto LABEL_12;
        }
      }
      v9 = sub_21A6A11D4(p_p, 0, &v28, 0, 0, 0, 0);
      if ((_DWORD)v9)
        goto LABEL_12;
      v13 = v23;
      if (!v23)
      {
        v13 = 48;
        v23 = 48;
      }
      v14 = sub_21A6A1914(&v28, 0, 0, v13, v29);
      MEMORY[0x220747320](&__p, v14);
      if (SHIBYTE(v26) < 0)
        p_p = (char *)__p;
      else
        p_p = (char *)&__p;
      goto LABEL_24;
    }
  }
LABEL_12:
  if (SHIBYTE(v26) < 0)
    operator delete(__p);
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v27.__r_.__value_.__l.__data_);
  return v9;
}

void sub_21A6CD768(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a18 < 0)
    operator delete(__p);
  if (a24 < 0)
    operator delete(a19);
  _Unwind_Resume(exception_object);
}

uint64_t sub_21A6CD794()
{
  return 0;
}

uint64_t sub_21A6CD79C(uint64_t a1, unsigned __int8 *a2, _QWORD *a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  std::string __p;
  int v12;

  v12 = 0;
  memset(&__p, 0, sizeof(__p));
  if (a3)
  {
    *a3 = 0;
    sub_21A6B2D64(a2, 912483943, &__p);
    v7 = sub_21A6B77DC(a1, (uint64_t)&__p, &v12, a4);
    v8 = v7;
    if (((_DWORD)a4 != 1 || (_DWORD)v7 != -5) && !(_DWORD)v7)
    {
      if (((v12 - 3) & 0xFFFFFFFD) != 0)
        v9 = (_QWORD *)MEMORY[0x24BDBD268];
      else
        v9 = (_QWORD *)MEMORY[0x24BDBD270];
      *a3 = *v9;
    }
  }
  else
  {
    v8 = 4294967292;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v8;
}

void sub_21A6CD868(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_21A6CD884(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4)
{
  int v7;
  uint64_t v8;
  std::string __p;

  memset(&__p, 0, sizeof(__p));
  if (!a3)
    return 4294967292;
  sub_21A6B2D64(a2, 912483943, &__p);
  if (*MEMORY[0x24BDBD270] == a3)
    v7 = 5;
  else
    v7 = 1;
  v8 = sub_21A6B38E4(a1, (uint64_t)&__p, v7, a4);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v8;
}

void sub_21A6CD920(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void *sub_21A6CD93C(void *a1, std::string::size_type a2, uint64_t a3, int a4)
{
  std::string __p;
  std::string v10;

  memset(&v10, 0, sizeof(v10));
  if (a1 && a2 >= 0x15)
  {
    bzero(a1, a2);
    sub_21A6CDA3C(a3, a4, &__p);
    std::string::operator=(&v10, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
    {
      if (v10.__r_.__value_.__l.__size_ < a2)
        strcpy((char *)a1, v10.__r_.__value_.__l.__data_);
      operator delete(v10.__r_.__value_.__l.__data_);
    }
    else if (HIBYTE(v10.__r_.__value_.__r.__words[2]) < a2)
    {
      strcpy((char *)a1, (const char *)&v10);
    }
  }
  return a1;
}

void sub_21A6CDA08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

void sub_21A6CDA3C(uint64_t a1@<X0>, int a2@<W1>, std::string *a3@<X8>)
{
  sub_21A6B1474(a1, a3);
  sub_21A6B2D64((unsigned __int8 *)a3, a2, a3);
}

void sub_21A6CDA70(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_21A6CDA8C(uint64_t a1)
{
  int v2;
  uint64_t v3;
  CFTypeRef cf;

  cf = 0;
  if (sub_21A6AF29C(a1, 1684362100, &cf, 0) || !CFDictionaryGetCount((CFDictionaryRef)cf))
  {
    if (cf)
    {
      CFRelease(cf);
      cf = 0;
    }
    if (sub_21A6AF29C(a1, 1684099956, &cf, 0) || !CFDictionaryGetCount((CFDictionaryRef)cf))
    {
      if (cf)
      {
        CFRelease(cf);
        cf = 0;
      }
      v2 = sub_21A6AF29C(a1, 1684886388, &cf, 0);
      v3 = 0;
      if (!v2)
      {
        if (CFDictionaryGetCount((CFDictionaryRef)cf))
          v3 = 1298753353;
        else
          v3 = 0;
      }
    }
    else
    {
      v3 = 1098015561;
    }
  }
  else
  {
    v3 = 1165123913;
  }
  if (cf)
    CFRelease(cf);
  return v3;
}

BOOL sub_21A6CDB80(uint64_t a1, int a2, BOOL *a3, uint64_t a4)
{
  _BOOL8 v8;
  const __CFArray *Value;
  const __CFArray *v10;
  CFTypeRef cf;

  cf = 0;
  if (!a2)
    return 0;
  if (sub_21A6AF29C(a1, 1937331060, &cf, a4))
  {
LABEL_3:
    v8 = 0;
    goto LABEL_4;
  }
  if (!cf)
    return 0;
  Value = (const __CFArray *)CFDictionaryGetValue((CFDictionaryRef)cf, CFSTR("problems"));
  if (!Value)
    goto LABEL_3;
  v8 = sub_21A6D0AE8(Value, a2) != -1;
  if (a3)
  {
    if (cf)
    {
      CFRelease(cf);
      cf = 0;
    }
    if (!sub_21A6AF29C(a1, 1937328487, &cf, a4))
    {
      if (!cf)
        return v8;
      v10 = (const __CFArray *)CFDictionaryGetValue((CFDictionaryRef)cf, CFSTR("problems"));
      if (v10)
        *a3 = sub_21A6D0AE8(v10, a2) != -1;
    }
  }
LABEL_4:
  if (cf)
    CFRelease(cf);
  return v8;
}

uint64_t sub_21A6CDC84(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t v5;
  const __CFString *v6;
  const __CFDictionary *DeepCopy;
  __CFArray *Value;
  uint64_t v10;
  CFTypeRef cf;

  cf = 0;
  if (!a2)
    return 4294960591;
  v4 = sub_21A6AF29C(a1, 1937328487, &cf, 0);
  if ((_DWORD)v4)
  {
    v5 = v4;
    v6 = 0;
  }
  else
  {
    if (!cf)
      return 4294960569;
    DeepCopy = (const __CFDictionary *)CFPropertyListCreateDeepCopy((CFAllocatorRef)*MEMORY[0x24BDBD240], cf, 2uLL);
    v6 = (const __CFString *)DeepCopy;
    if (DeepCopy)
    {
      Value = (__CFArray *)CFDictionaryGetValue(DeepCopy, CFSTR("problems"));
      if (Value)
      {
        v10 = sub_21A6D0A70(Value, a2);
        if (!(_DWORD)v10)
          v10 = sub_21A6AD43C(a1, 1937328487, v6, 0);
        v5 = v10;
      }
      else
      {
        v5 = 4294960569;
      }
    }
    else
    {
      v5 = 4294960568;
    }
  }
  if (cf)
  {
    CFRelease(cf);
    cf = 0;
  }
  if (v6)
    CFRelease(v6);
  return v5;
}

uint64_t sub_21A6CDD80(uint64_t a1, int a2)
{
  uint64_t v4;
  const __CFDictionary *DeepCopy;
  const __CFString *v7;
  const __CFArray *Value;
  CFTypeRef cf;

  cf = 0;
  if (!a2)
    return 4294960591;
  v4 = sub_21A6AF29C(a1, 1937328487, &cf, 0);
  if (!(_DWORD)v4)
  {
    if (!cf)
      return 4294960569;
    DeepCopy = (const __CFDictionary *)CFPropertyListCreateDeepCopy((CFAllocatorRef)*MEMORY[0x24BDBD240], cf, 2uLL);
    if (DeepCopy)
    {
      v7 = (const __CFString *)DeepCopy;
      Value = (const __CFArray *)CFDictionaryGetValue(DeepCopy, CFSTR("problems"));
      if (Value)
      {
        v4 = sub_21A6D0B84(Value, a2);
        if (!(_DWORD)v4)
          v4 = sub_21A6AD43C(a1, 1937328487, v7, 0);
      }
      else
      {
        v4 = 4294960569;
      }
      CFRelease(v7);
    }
    else
    {
      v4 = 4294960568;
    }
  }
  if (cf)
    CFRelease(cf);
  return v4;
}

uint64_t sub_21A6CDE70(_QWORD *a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  void **v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  void *v13;

  v2 = (void **)a1[1];
  v3 = (void **)a1[2];
  v4 = (char *)v3 - (char *)v2;
  if (v3 == v2)
  {
    v5 = a1 + 5;
  }
  else
  {
    v5 = a1 + 5;
    v6 = a1[4];
    v7 = &v2[v6 >> 9];
    v8 = (uint64_t)*v7;
    v9 = (uint64_t)*v7 + 8 * (v6 & 0x1FF);
    while ((void *)v9 != *(char **)((char *)v2 + (((a1[5] + v6) >> 6) & 0x3FFFFFFFFFFFFF8))
                        + 8 * ((a1[5] + v6) & 0x1FF))
    {
      v9 += 8;
      if (v9 - v8 == 4096)
      {
        v10 = (uint64_t)v7[1];
        ++v7;
        v8 = v10;
        v9 = v10;
      }
    }
  }
  *v5 = 0;
  if (v4 >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = (void **)a1[2];
      v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v11 = v4 >> 3;
  if (v11 == 1)
  {
    v12 = 256;
  }
  else
  {
    if (v11 != 2)
      goto LABEL_15;
    v12 = 512;
  }
  a1[4] = v12;
LABEL_15:
  while (v2 != v3)
  {
    v13 = *v2++;
    operator delete(v13);
  }
  return sub_21A6CDF68((uint64_t)a1);
}

uint64_t sub_21A6CDF68(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != v3)
    *(_QWORD *)(a1 + 16) = v2 + ((v3 - v2 + 7) & 0xFFFFFFFFFFFFFFF8);
  v4 = *(void **)a1;
  if (*(_QWORD *)a1)
    operator delete(v4);
  return a1;
}

void *sub_21A6CDFB4(_BYTE *__dst, void *__src, unint64_t a3)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v5 = __dst;
  if (a3 > 0x16)
  {
    if (a3 >= 0x7FFFFFFFFFFFFFF8)
      sub_21A6CE040();
    v6 = (a3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a3 | 7) != 0x17)
      v6 = a3 | 7;
    v7 = v6 + 1;
    v8 = operator new(v6 + 1);
    v5[1] = a3;
    v5[2] = v7 | 0x8000000000000000;
    *v5 = v8;
    v5 = v8;
  }
  else
  {
    __dst[23] = a3;
  }
  return memmove(v5, __src, a3 + 1);
}

void sub_21A6CE040()
{
  sub_21A6CE054("basic_string");
}

void sub_21A6CE054(const char *a1)
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  sub_21A6CE0A4(exception, a1);
  __cxa_throw(exception, (struct type_info *)off_24DD04260, MEMORY[0x24BEDAAF0]);
}

void sub_21A6CE090(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *sub_21A6CE0A4(std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8B8] + 16);
  return result;
}

void sub_21A6CE0C8()
{
  std::bad_array_new_length *exception;
  std::bad_array_new_length *v1;

  exception = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  v1 = std::bad_array_new_length::bad_array_new_length(exception);
  __cxa_throw(v1, MEMORY[0x24BEDB748], MEMORY[0x24BEDABB8]);
}

_QWORD *sub_21A6CE0F0(_QWORD *a1, char *__s)
{
  size_t v4;
  size_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    sub_21A6CE040();
  v5 = v4;
  if (v4 >= 0x17)
  {
    v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v7 = v4 | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v6;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v4;
    v6 = a1;
    if (!v4)
      goto LABEL_9;
  }
  memmove(v6, __s, v5);
LABEL_9:
  *((_BYTE *)v6 + v5) = 0;
  return a1;
}

void sub_21A6CE1A0()
{
  sub_21A6CE1B4("basic_string");
}

void sub_21A6CE1B4(const char *a1)
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  sub_21A6CE204(exception, a1);
  __cxa_throw(exception, (struct type_info *)off_24DD04268, MEMORY[0x24BEDAB00]);
}

void sub_21A6CE1F0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *sub_21A6CE204(std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
  return result;
}

void sub_21A6CE228(unint64_t *a1, size_t a2)
{
  char *v4;
  char *v5;
  unint64_t v6;
  char *v7;
  unint64_t v8;
  unint64_t v9;
  size_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  char v15;

  v5 = (char *)a1[1];
  v4 = (char *)a1[2];
  if (v4 - v5 >= a2)
  {
    if (a2)
    {
      bzero((void *)a1[1], a2);
      v5 += a2;
    }
    a1[1] = (unint64_t)v5;
  }
  else
  {
    v6 = *a1;
    v7 = &v5[-*a1];
    v8 = (unint64_t)&v7[a2];
    if ((uint64_t)&v7[a2] < 0)
      sub_21A6CE350();
    v9 = (unint64_t)&v4[-v6];
    if (2 * v9 > v8)
      v8 = 2 * v9;
    if (v9 >= 0x3FFFFFFFFFFFFFFFLL)
      v10 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v10 = v8;
    if (v10)
      v11 = (unint64_t)operator new(v10);
    else
      v11 = 0;
    v12 = &v7[v11];
    v13 = (char *)(v11 + v10);
    bzero(v12, a2);
    if (v5 == (char *)v6)
    {
      v11 = (unint64_t)v12;
    }
    else
    {
      v14 = &v5[~v6];
      do
      {
        v15 = *--v5;
        (v14--)[v11] = v15;
      }
      while (v5 != (char *)v6);
      v5 = (char *)*a1;
    }
    *a1 = v11;
    a1[1] = (unint64_t)&v12[a2];
    a1[2] = (unint64_t)v13;
    if (v5)
      operator delete(v5);
  }
}

void sub_21A6CE350()
{
  sub_21A6CE054("vector");
}

void sub_21A6CE364(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v4 = a1[2];
  v5 = a1[1];
  if (v4 == v5)
    v6 = 0;
  else
    v6 = ((v4 - v5) << 6) - 1;
  v7 = a1[5];
  v8 = v7 + a1[4];
  if (v6 == v8)
  {
    sub_21A6CE3E8(a1);
    v5 = a1[1];
    v7 = a1[5];
    v8 = a1[4] + v7;
  }
  *(_QWORD *)(*(_QWORD *)(v5 + ((v8 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v8 & 0x1FF)) = *a2;
  a1[5] = v7 + 1;
}

void sub_21A6CE3E8(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x200;
  v4 = v2 - 512;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_21A6CEB58(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0x1000uLL);
      sub_21A6CE6FC(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0x1000uLL);
    sub_21A6CE810((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_21A6CEB58((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = sub_21A6CEB58((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0x1000uLL);
  sub_21A6CE92C(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_21A6CEA40((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_21A6CE6B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_21A6CE6FC(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int64_t v16;
  char *v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;

  v5 = (char *)a1[3];
  v4 = (uint64_t)(a1 + 3);
  v6 = *(char **)(v4 - 8);
  if (v6 == v5)
  {
    v7 = (char *)a1[1];
    v8 = (uint64_t)&v7[-*a1];
    if ((unint64_t)v7 <= *a1)
    {
      if (v6 == (char *)*a1)
        v18 = 1;
      else
        v18 = (uint64_t)&v6[-*a1] >> 2;
      v19 = (char *)sub_21A6CEB58(v4, v18);
      v21 = &v19[8 * (v18 >> 2)];
      v22 = (uint64_t *)a1[1];
      v6 = v21;
      v23 = a1[2] - (_QWORD)v22;
      if (v23)
      {
        v6 = &v21[v23 & 0xFFFFFFFFFFFFFFF8];
        v24 = 8 * (v23 >> 3);
        v25 = &v19[8 * (v18 >> 2)];
        do
        {
          v26 = *v22++;
          *(_QWORD *)v25 = v26;
          v25 += 8;
          v24 -= 8;
        }
        while (v24);
      }
      v27 = (char *)*a1;
      *a1 = v19;
      a1[1] = v21;
      a1[2] = v6;
      a1[3] = &v19[8 * v20];
      if (v27)
      {
        operator delete(v27);
        v6 = (char *)a1[2];
      }
    }
    else
    {
      v9 = v8 >> 3;
      v10 = v8 >> 3 < -1;
      v11 = (v8 >> 3) + 2;
      if (v10)
        v12 = v11;
      else
        v12 = v9 + 1;
      v13 = -(v12 >> 1);
      v14 = v12 >> 1;
      v15 = &v7[-8 * v14];
      v16 = v6 - v7;
      if (v6 != v7)
      {
        memmove(&v7[-8 * v14], v7, v6 - v7);
        v6 = (char *)a1[1];
      }
      v17 = &v6[8 * v13];
      v6 = &v15[v16];
      a1[1] = v17;
      a1[2] = &v15[v16];
    }
  }
  *(_QWORD *)v6 = *a2;
  a1[2] += 8;
}

void sub_21A6CE810(uint64_t a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;

  v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    v6 = a1 + 24;
    v7 = *(_BYTE **)(a1 + 24);
    v8 = *(_BYTE **)(a1 + 16);
    if (v8 >= v7)
    {
      if (v7 == v4)
        v12 = 1;
      else
        v12 = (v7 - v4) >> 2;
      v13 = 2 * v12;
      v14 = (char *)sub_21A6CEB58(v6, v12);
      v5 = &v14[(v13 + 6) & 0xFFFFFFFFFFFFFFF8];
      v16 = *(uint64_t **)(a1 + 8);
      v17 = v5;
      v18 = *(_QWORD *)(a1 + 16) - (_QWORD)v16;
      if (v18)
      {
        v17 = &v5[v18 & 0xFFFFFFFFFFFFFFF8];
        v19 = 8 * (v18 >> 3);
        v20 = v5;
        do
        {
          v21 = *v16++;
          *(_QWORD *)v20 = v21;
          v20 += 8;
          v19 -= 8;
        }
        while (v19);
      }
      v22 = *(char **)a1;
      *(_QWORD *)a1 = v14;
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = v17;
      *(_QWORD *)(a1 + 24) = &v14[8 * v15];
      if (v22)
      {
        operator delete(v22);
        v5 = *(char **)(a1 + 8);
      }
    }
    else
    {
      v9 = (v7 - v8) >> 3;
      if (v9 >= -1)
        v10 = v9 + 1;
      else
        v10 = v9 + 2;
      v11 = v10 >> 1;
      v5 = &v4[8 * (v10 >> 1)];
      if (v8 != v4)
      {
        memmove(&v4[8 * (v10 >> 1)], v4, v8 - v4);
        v4 = *(char **)(a1 + 16);
      }
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = &v4[8 * v11];
    }
  }
  else
  {
    v5 = *(char **)(a1 + 8);
  }
  *((_QWORD *)v5 - 1) = *a2;
  *(_QWORD *)(a1 + 8) -= 8;
}

void sub_21A6CE92C(_QWORD *a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  int64_t v14;
  char *v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;

  v4 = (char *)a1[2];
  if (v4 == (char *)a1[3])
  {
    v5 = (char *)a1[1];
    v6 = (uint64_t)&v5[-*a1];
    if ((unint64_t)v5 <= *a1)
    {
      if (v4 == (char *)*a1)
        v16 = 1;
      else
        v16 = (uint64_t)&v4[-*a1] >> 2;
      v17 = (char *)sub_21A6CEB58(a1[4], v16);
      v19 = &v17[8 * (v16 >> 2)];
      v20 = (uint64_t *)a1[1];
      v4 = v19;
      v21 = a1[2] - (_QWORD)v20;
      if (v21)
      {
        v4 = &v19[v21 & 0xFFFFFFFFFFFFFFF8];
        v22 = 8 * (v21 >> 3);
        v23 = &v17[8 * (v16 >> 2)];
        do
        {
          v24 = *v20++;
          *(_QWORD *)v23 = v24;
          v23 += 8;
          v22 -= 8;
        }
        while (v22);
      }
      v25 = (char *)*a1;
      *a1 = v17;
      a1[1] = v19;
      a1[2] = v4;
      a1[3] = &v17[8 * v18];
      if (v25)
      {
        operator delete(v25);
        v4 = (char *)a1[2];
      }
    }
    else
    {
      v7 = v6 >> 3;
      v8 = v6 >> 3 < -1;
      v9 = (v6 >> 3) + 2;
      if (v8)
        v10 = v9;
      else
        v10 = v7 + 1;
      v11 = -(v10 >> 1);
      v12 = v10 >> 1;
      v13 = &v5[-8 * v12];
      v14 = v4 - v5;
      if (v4 != v5)
      {
        memmove(&v5[-8 * v12], v5, v4 - v5);
        v4 = (char *)a1[1];
      }
      v15 = &v4[8 * v11];
      v4 = &v13[v14];
      a1[1] = v15;
      a1[2] = &v13[v14];
    }
  }
  *(_QWORD *)v4 = *a2;
  a1[2] += 8;
}

void sub_21A6CEA40(uint64_t a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  _BYTE *v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;

  v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    v6 = *(_BYTE **)(a1 + 16);
    v7 = *(_BYTE **)(a1 + 24);
    if (v6 >= v7)
    {
      if (v7 == v4)
        v11 = 1;
      else
        v11 = (v7 - v4) >> 2;
      v12 = 2 * v11;
      v13 = (char *)sub_21A6CEB58(*(_QWORD *)(a1 + 32), v11);
      v5 = &v13[(v12 + 6) & 0xFFFFFFFFFFFFFFF8];
      v15 = *(uint64_t **)(a1 + 8);
      v16 = v5;
      v17 = *(_QWORD *)(a1 + 16) - (_QWORD)v15;
      if (v17)
      {
        v16 = &v5[v17 & 0xFFFFFFFFFFFFFFF8];
        v18 = 8 * (v17 >> 3);
        v19 = v5;
        do
        {
          v20 = *v15++;
          *(_QWORD *)v19 = v20;
          v19 += 8;
          v18 -= 8;
        }
        while (v18);
      }
      v21 = *(char **)a1;
      *(_QWORD *)a1 = v13;
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = v16;
      *(_QWORD *)(a1 + 24) = &v13[8 * v14];
      if (v21)
      {
        operator delete(v21);
        v5 = *(char **)(a1 + 8);
      }
    }
    else
    {
      v8 = (v7 - v6) >> 3;
      if (v8 >= -1)
        v9 = v8 + 1;
      else
        v9 = v8 + 2;
      v10 = v9 >> 1;
      v5 = &v4[8 * (v9 >> 1)];
      if (v6 != v4)
      {
        memmove(&v4[8 * (v9 >> 1)], v4, v6 - v4);
        v4 = *(char **)(a1 + 16);
      }
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = &v4[8 * v10];
    }
  }
  else
  {
    v5 = *(char **)(a1 + 8);
  }
  *((_QWORD *)v5 - 1) = *a2;
  *(_QWORD *)(a1 + 8) -= 8;
}

void *sub_21A6CEB58(uint64_t a1, unint64_t a2)
{
  if (a2 >> 61)
    sub_21A6CE0C8();
  return operator new(8 * a2);
}

uint64_t sub_21A6CEB8C(_QWORD *a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int v7;

  v3 = a1[1];
  v2 = a1[2];
  if (v2 == v3)
    v4 = 0;
  else
    v4 = ((v2 - v3) << 6) - 1;
  v5 = v4 - (a1[5] + a1[4]);
  if (v5 < 0x200)
    a2 = 1;
  if (v5 < 0x400)
    v7 = a2;
  else
    v7 = 0;
  if ((v7 & 1) == 0)
  {
    operator delete(*(void **)(v2 - 8));
    a1[2] -= 8;
  }
  return v7 ^ 1u;
}

uint64_t sub_21A6CEBF8(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;

  if (a2 >= 0x7FFFFFFFFFFFFFF8)
    sub_21A6CE040();
  if (a2 > 0x16)
  {
    v4 = (a2 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a2 | 7) != 0x17)
      v4 = a2 | 7;
    v5 = v4 + 1;
    v6 = operator new(v4 + 1);
    *(_QWORD *)(a1 + 8) = a2;
    *(_QWORD *)(a1 + 16) = v5 | 0x8000000000000000;
    *(_QWORD *)a1 = v6;
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    *(_BYTE *)(a1 + 23) = a2;
  }
  return a1;
}

__CFString *sub_21A6CEC7C(int *a1)
{
  __CFString *Mutable;
  int v3;
  char v5[4];
  char v6;
  char cStr[5];

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0);
  sub_21A6711EC(*a1, cStr);
  CFStringAppendCString(Mutable, cStr, 0x8000100u);
  CFStringAppendCString(Mutable, ".", 0x8000100u);
  v6 = 0;
  *(_DWORD *)v5 = 0;
  v3 = a1[1];
  if ((v3 - 1732604481) > 8)
    sub_21A6711EC(v3, v5);
  else
    __sprintf_chk(v5, 0, 5uLL, "%c", (v3 - 1732604416));
  CFStringAppendCString(Mutable, v5, 0x8000100u);
  return Mutable;
}

uint64_t sub_21A6CED60(uint64_t a1, int a2, __CFString **a3)
{
  uint64_t v3;
  uint64_t v6;
  void *v7;
  int v8;

  v3 = 0;
  v8 = a2;
  v6 = 0;
  v7 = 0;
  if (a1)
  {
    if (a2)
    {
      v3 = 1;
      sub_21A6D479C(a1, &v8, 1uLL, &v7, &v6);
      if (v6)
      {
        v3 = 0;
        if (a3)
          *a3 = sub_21A6CEC7C((int *)v7);
      }
    }
  }
  if (v7)
    free(v7);
  return v3;
}

uint64_t sub_21A6CEDE4(uint64_t a1)
{
  uint64_t result;
  const char *v3;
  uint64_t v4;
  __CFString *v5;
  char v6;

  if (!a1)
    return 4294960591;
  result = sub_21A6D4724(a1, 1381253996);
  if ((_DWORD)result)
  {
    v6 = 0;
    sub_21A6D3FB8(a1, 1651725402, &v6);
    result = 0;
    if (!v6)
    {
      v5 = sub_21A6F5564(0, v3, v4);
      if (v5)
        return sub_21A6D42C8(a1, 1651725402, v5);
      else
        return 4294960569;
    }
  }
  return result;
}

uint64_t sub_21A6CEE6C(uint64_t a1, int a2)
{
  uint64_t result;
  int v5;
  int v7;
  char v8;

  if (!a1)
    return 4294960591;
  v8 = 0;
  sub_21A6D3FB8(a1, 1937330789, &v8);
  result = 0;
  if (!v8)
  {
    v5 = sub_21A6CEEF4(a1);
    if (v5 != -1 || a2 == 0)
      v7 = v5;
    else
      v7 = 0;
    if (v7 == -1)
      return 4294960569;
    else
      return sub_21A6D4310(a1, 1937330789, v7);
  }
  return result;
}

uint64_t sub_21A6CEEF4(uint64_t a1)
{
  const __CFLocale *v2;
  const __CFLocale *v3;
  const __CFString *Value;
  void *v6;
  unsigned int v7;

  v6 = 0;
  v7 = 0;
  if (a1)
  {
    v2 = CFLocaleCopyCurrent();
    v3 = v2;
    if (v2)
    {
      Value = (const __CFString *)CFLocaleGetValue(v2, (CFLocaleKey)*MEMORY[0x24BDBD3D8]);
      if (!sub_21A694D3C(Value, (char **)&v6) && (sub_21A6CEF8C(a1, (char *)v6, &v7) & 1) == 0)
        v7 = -1;
    }
    if (v6)
    {
      free(v6);
      v6 = 0;
    }
    if (v3)
      CFRelease(v3);
  }
  return v7;
}

uint64_t sub_21A6CEF8C(uint64_t a1, char *a2, _DWORD *a3)
{
  int v6;
  uint64_t v7;
  CFIndex Count;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  CFIndex v14;
  uint64_t i;
  int v16;
  char __s[5];
  CFArrayRef theArray;
  int v20;

  v20 = 0;
  theArray = 0;
  sub_21A6711EC(1937330789, __s);
  if (a3)
  {
    *a3 = sub_21A6CF9D0(a2);
    v6 = sub_21A6CF0B0(a1, __s, 0, &theArray);
    v7 = 0;
    if (v6)
      goto LABEL_16;
    if (!theArray)
      return 0;
    Count = CFArrayGetCount(theArray);
    if (Count >= 1)
    {
      v14 = Count;
      for (i = 0; v14 != i; ++i)
      {
        sub_21A693B94((const __CFString *)theArray, (uint64_t)&v20, (UInt8 *)"[*]:int", v9, v10, v11, v12, v13, i);
        if (v16)
          break;
        if (v20 == 51)
        {
          if (*a3 == 1)
          {
LABEL_20:
            *a3 = v20;
LABEL_21:
            v7 = 1;
            goto LABEL_16;
          }
        }
        else if (v20 == 50)
        {
          if (!*a3)
            goto LABEL_20;
        }
        else if (*a3 == v20)
        {
          goto LABEL_21;
        }
      }
    }
  }
  v7 = 0;
LABEL_16:
  if (theArray)
    CFRelease(theArray);
  return v7;
}

uint64_t sub_21A6CF0B0(uint64_t a1, char *__s, uint64_t a3, _QWORD *a4)
{
  size_t v8;

  if (a1 && (v8 = strlen(__s), a4) && v8 >= 4)
    return sub_21A6D4B68(a1, __s, a4, a3);
  else
    return 4294967292;
}

uint64_t sub_21A6CF11C(CFNumberRef number, int a2, CFNumberRef *a3)
{
  uint64_t result;
  CFNumberRef v7;
  CFNumberRef v8;
  int valuePtr;

  result = 4294960591;
  if (number && a2 && a3)
  {
    valuePtr = 0;
    if (CFNumberGetValue(number, kCFNumberSInt32Type, &valuePtr))
    {
      valuePtr &= a2;
      v7 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], kCFNumberSInt32Type, &valuePtr);
      if (v7)
      {
        v8 = v7;
        result = 0;
        *a3 = v8;
      }
      else
      {
        return 4294960568;
      }
    }
    else
    {
      return 4294960553;
    }
  }
  return result;
}

uint64_t sub_21A6CF1B4(unsigned __int8 *a1, char *__s, __CFDictionary *a3)
{
  uint64_t result;
  size_t v7;
  CFIndex v8;
  const __CFAllocator *v9;
  const void *v10;
  const void *v11;
  _OWORD v12[2];
  uint64_t v13;

  result = 0;
  v13 = *MEMORY[0x24BDAC8D0];
  if (a1 && __s && a3)
  {
    v7 = strlen(__s);
    if (v7 >= 0x14)
      v8 = 20;
    else
      v8 = v7;
    v9 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
    result = (uint64_t)CFStringCreateWithBytes((CFAllocatorRef)*MEMORY[0x24BDBD240], (const UInt8 *)__s, v8, 0x8000100u, 0);
    if (result)
    {
      v10 = (const void *)result;
      CFDictionarySetValue(a3, CFSTR("Description"), (const void *)result);
      CFRelease(v10);
      memset(v12, 0, sizeof(v12));
      sub_21A6A1FDC(a1, 6, v12);
      result = (uint64_t)CFStringCreateWithCString(v9, (const char *)v12, 0x8000100u);
      if (result)
      {
        v11 = (const void *)result;
        CFDictionarySetValue(a3, CFSTR("PeerMAC"), (const void *)result);
        CFRelease(v11);
        return 1;
      }
    }
  }
  return result;
}

uint64_t sub_21A6CF2D4(const __CFDictionary *a1, uint64_t a2, _BYTE *a3, size_t a4)
{
  uint64_t v4;
  const __CFString *Value;
  size_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v17;
  char *v18;
  size_t v19;
  size_t v20;
  char *__s;
  char buffer[16];
  __int128 v23;
  uint64_t v24;

  v4 = 0;
  v24 = *MEMORY[0x24BDAC8D0];
  __s = 0;
  if (a1 && a2 && a3)
  {
    *(_WORD *)(a2 + 4) = 0;
    *(_DWORD *)a2 = 0;
    bzero(a3, a4);
    Value = (const __CFString *)CFDictionaryGetValue(a1, CFSTR("PeerMAC"));
    if (Value
      && (*(_OWORD *)buffer = 0u, v23 = 0u, CFStringGetCString(Value, buffer, 32, 0x8000100u))
      && (v10 = strlen(buffer), !sub_21A6A1EB0(buffer, v10, 6, (_BYTE *)a2)))
    {
      sub_21A693B94((const __CFString *)a1, (uint64_t)&__s, (UInt8 *)"%kO:utf8", v11, v12, v13, v14, v15, (uint64_t)CFSTR("Description"));
      if (v17 || (v18 = __s, (v19 = strlen(__s)) == 0))
      {
        *a3 = 0;
      }
      else
      {
        v20 = v19;
        if (v19 > a4)
        {
          v20 = sub_21A6A2D84(__s, v19, a4);
          v18 = __s;
        }
        strncpy(a3, v18, v20);
      }
      v4 = 1;
    }
    else
    {
      v4 = 0;
    }
  }
  if (__s)
    free(__s);
  return v4;
}

__CFString *sub_21A6CF444(uint64_t a1, __CFDictionary *a2)
{
  __CFString *result;
  const __CFAllocator *v5;
  const void *v6;
  const void *v7;
  __CFString *v8;
  const void *v9;
  const void **v10;

  result = 0;
  if (a1)
  {
    if (a2)
    {
      v5 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
      result = (__CFString *)CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x24BDBD240], (const char *)(a1 + 136), 0x8000100u);
      if (result)
      {
        v6 = result;
        CFDictionarySetValue(a2, CFSTR("USB_PRINTER_NAME"), result);
        CFRelease(v6);
        result = (__CFString *)CFStringCreateWithCString(v5, (const char *)(a1 + 8), 0x8000100u);
        if (result)
        {
          v7 = result;
          CFDictionarySetValue(a2, CFSTR("USB_PRINTER_UNIQUEID"), result);
          CFRelease(v7);
          result = CFStringCreateMutable(v5, 0);
          if (result)
          {
            v8 = result;
            CFStringAppendCString(result, (const char *)(a1 + 204), 0x8000100u);
            CFStringAppendCString(v8, " ", 0x8000100u);
            CFStringAppendCString(v8, (const char *)(a1 + 460), 0x8000100u);
            CFDictionarySetValue(a2, CFSTR("USB_PRINTER_MAKE_MODEL"), v8);
            CFRelease(v8);
            result = (__CFString *)CFDataCreate(v5, (const UInt8 *)a1, 720);
            if (result)
            {
              v9 = result;
              CFDictionarySetValue(a2, CFSTR("USB_PRINTER_ENTRY"), result);
              CFRelease(v9);
              v10 = (const void **)MEMORY[0x24BDBD270];
              if (!*(_BYTE *)(a1 + 716))
                v10 = (const void **)MEMORY[0x24BDBD268];
              CFDictionarySetValue(a2, CFSTR("USB_PRINTER_PLUGGED_IN"), *v10);
              return (__CFString *)1;
            }
          }
        }
      }
    }
  }
  return result;
}

BOOL sub_21A6CF5C8(const __CFDictionary *a1, uint64_t a2)
{
  const __CFData *Value;
  const __CFData *v5;
  const __CFString *v6;
  const __CFString *v7;
  uint64_t v8;
  CFRange v10;

  if (!a1)
    return 0;
  if (!a2)
    return 0;
  Value = (const __CFData *)CFDictionaryGetValue(a1, CFSTR("USB_PRINTER_ENTRY"));
  if (!Value)
    return 0;
  v5 = Value;
  if (CFDataGetLength(Value) != 720)
    return 0;
  v10.location = 0;
  v10.length = 720;
  CFDataGetBytes(v5, v10, (UInt8 *)a2);
  v6 = (const __CFString *)CFDictionaryGetValue(a1, CFSTR("USB_PRINTER_NAME"));
  if (!v6)
    return 0;
  *(_OWORD *)(a2 + 136) = 0u;
  *(_OWORD *)(a2 + 168) = 0u;
  *(_OWORD *)(a2 + 184) = 0u;
  *(_OWORD *)(a2 + 152) = 0u;
  if (!CFStringGetCString(v6, (char *)(a2 + 136), 64, 0x8000100u))
    return 0;
  v7 = (const __CFString *)CFDictionaryGetValue(a1, CFSTR("USB_PRINTER_UNIQUEID"));
  if (!v7)
    return 0;
  *(_OWORD *)(a2 + 8) = 0u;
  v8 = a2 + 8;
  *(_OWORD *)(v8 + 96) = 0u;
  *(_OWORD *)(v8 + 112) = 0u;
  *(_OWORD *)(v8 + 64) = 0u;
  *(_OWORD *)(v8 + 80) = 0u;
  *(_OWORD *)(v8 + 32) = 0u;
  *(_OWORD *)(v8 + 48) = 0u;
  *(_OWORD *)(v8 + 16) = 0u;
  return CFStringGetCString(v7, (char *)v8, 128, 0x8000100u) != 0;
}

CFStringRef sub_21A6CF6B8(uint64_t a1, __CFDictionary *a2)
{
  CFStringRef result;
  const __CFAllocator *v5;
  const char *v6;
  const void *v7;
  const void *v8;
  const void *v9;
  char cStr[16];
  __int128 v11;
  uint64_t v12;

  result = 0;
  v12 = *MEMORY[0x24BDAC8D0];
  if (a1)
  {
    if (a2)
    {
      *(_OWORD *)cStr = 0u;
      v11 = 0u;
      v5 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
      v6 = sub_21A69A24C(*(_DWORD *)a1, 0, cStr);
      result = CFStringCreateWithCString(v5, v6, 0x8000100u);
      if (result)
      {
        v7 = result;
        CFDictionarySetValue(a2, CFSTR("PORT_MAP_PRIV_IP"), result);
        CFRelease(v7);
        *(_OWORD *)cStr = 0u;
        v11 = 0u;
        __sprintf_chk(cStr, 0, 0x20uLL, "%d", *(unsigned __int16 *)(a1 + 4));
        result = CFStringCreateWithCString(v5, cStr, 0x8000100u);
        if (result)
        {
          v8 = result;
          CFDictionarySetValue(a2, CFSTR("PORT_MAP_PRIV_PORT"), result);
          CFRelease(v8);
          *(_OWORD *)cStr = 0u;
          v11 = 0u;
          __sprintf_chk(cStr, 0, 0x20uLL, "%d", *(unsigned __int16 *)(a1 + 6));
          result = CFStringCreateWithCString(v5, cStr, 0x8000100u);
          if (result)
          {
            v9 = result;
            CFDictionarySetValue(a2, CFSTR("PORT_MAP_PUB_PORT"), result);
            CFRelease(v9);
            return (CFStringRef)1;
          }
        }
      }
    }
  }
  return result;
}

uint64_t sub_21A6CF840(CFDictionaryRef theDict, uint64_t a2)
{
  uint64_t result;
  int v5;
  const __CFString *v6;
  size_t v7;
  const __CFString *v8;
  size_t v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;

  result = 0;
  v12 = *MEMORY[0x24BDAC8D0];
  if (theDict)
  {
    if (a2)
    {
      result = (uint64_t)CFDictionaryGetValue(theDict, CFSTR("PORT_MAP_PRIV_IP"));
      if (result)
      {
        v10 = 0u;
        v11 = 0u;
        result = CFStringGetCString((CFStringRef)result, (char *)&v10, 32, 0x8000100u);
        if ((_DWORD)result)
        {
          v5 = sub_21A6A16C4((char *)&v10, 0, (unsigned int *)a2, 0, 0, 0, 0);
          result = 0;
          if (!v5)
          {
            result = (uint64_t)CFDictionaryGetValue(theDict, CFSTR("PORT_MAP_PRIV_PORT"));
            if (result)
            {
              v6 = (const __CFString *)result;
              if (CFStringGetLength((CFStringRef)result))
              {
                v10 = 0u;
                v11 = 0u;
                result = CFStringGetCString(v6, (char *)&v10, 32, 0x8000100u);
                if (!(_DWORD)result)
                  return result;
                v7 = strlen((const char *)&v10);
                *(_WORD *)(a2 + 4) = sub_21A6A23C0((char *)&v10, v7, 10);
              }
              result = (uint64_t)CFDictionaryGetValue(theDict, CFSTR("PORT_MAP_PUB_PORT"));
              if (result)
              {
                v8 = (const __CFString *)result;
                if (!CFStringGetLength((CFStringRef)result))
                  return 1;
                v10 = 0u;
                v11 = 0u;
                result = CFStringGetCString(v8, (char *)&v10, 32, 0x8000100u);
                if ((_DWORD)result)
                {
                  v9 = strlen((const char *)&v10);
                  *(_WORD *)(a2 + 6) = sub_21A6A23C0((char *)&v10, v9, 10);
                  return 1;
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t sub_21A6CF9D0(char *__s1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  unsigned int v6;

  if (!__s1)
    return 0;
  v2 = 0;
  v3 = 0;
  do
  {
    v5 = *(_QWORD *)((char *)&unk_2550EF008 + v2);
    v6 = *(_DWORD *)((char *)&unk_2550EF008 + v2 + 8);
    if (!strncmp(__s1, (const char *)&v5, 2uLL) || !strncmp(__s1, (const char *)&v5 + 3, 3uLL))
      v3 = v6;
    v2 += 12;
  }
  while (v2 != 1956);
  return v3;
}

uint64_t sub_21A6CFA78(unsigned int *a1, __CFArray **a2)
{
  uint64_t v2;
  unsigned int *v4;
  const __CFAllocator *v5;
  CFMutableArrayRef Mutable;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __CFArray *v12;
  uint64_t v13;
  uint64_t v14;

  v2 = 4294960591;
  if (a1 && a2)
  {
    v4 = a1;
    if (*a1)
    {
      v5 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
      Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD690]);
      if (Mutable)
      {
        v12 = Mutable;
        while (1)
        {
          v13 = *v4;
          if (!(_DWORD)v13)
            break;
          ++v4;
          v14 = sub_21A693A8C(v5, v12, (uint64_t)"%C", v7, v8, v9, v10, v11, v13);
          if ((_DWORD)v14)
          {
            v2 = v14;
            CFRelease(v12);
            return v2;
          }
        }
        v2 = 0;
        *a2 = v12;
      }
      else
      {
        return 4294960568;
      }
    }
    else
    {
      return 4294960553;
    }
  }
  return v2;
}

const __CFString *sub_21A6CFB44(unsigned int a1, int a2)
{
  return sub_21A690D80(a1, a2, 0);
}

CFStringRef sub_21A6CFB4C(int a1)
{
  const __CFAllocator *v1;
  const char *v2;
  _BYTE v4[5];

  v1 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  v2 = sub_21A6711EC(a1, v4);
  return CFStringCreateWithCString(v1, v2, 0x8000100u);
}

uint64_t sub_21A6CFB94(const __CFString *a1)
{
  char *v2;
  size_t v3;
  char *__s;
  unsigned int v5;

  v5 = 0;
  __s = 0;
  if (a1)
  {
    if (!sub_21A694D3C(a1, &__s))
    {
      v2 = __s;
      if (__s)
      {
        v3 = strlen(__s);
        if (!v3)
        {
LABEL_8:
          free(v2);
          return v5;
        }
        if (!sub_21A671214(__s, v3, &v5))
        {
          v2 = __s;
          goto LABEL_8;
        }
      }
    }
  }
  return v5;
}

const __CFArray *sub_21A6CFC08(const __CFDictionary *a1, const __CFString *a2)
{
  const __CFArray *v2;
  const __CFArray *Mutable;
  const __CFAllocator *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  CFIndex Count;
  CFTypeRef v20;
  CFTypeRef v21;
  uint64_t v22;
  const void **v23;

  v2 = 0;
  v23 = 0;
  if (!a1 || !a2)
    return v2;
  v21 = 0;
  v22 = 0;
  v20 = 0;
  if (CFDictionaryGetCount(a1) && !sub_21A695640(a1, &v23))
  {
    v7 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
    Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD690]);
    if (Mutable)
    {
      if (!sub_21A6956DC((uint64_t *)v23, &v22, &v21))
      {
LABEL_18:
        Count = CFArrayGetCount(Mutable);
        if (Count)
          v2 = Mutable;
        else
          v2 = 0;
        if (Count)
          Mutable = 0;
        goto LABEL_6;
      }
      while (1)
      {
        sub_21A693B94(a2, (uint64_t)&v20, (UInt8 *)"%kO", v8, v9, v10, v11, v12, v22);
        if (v13 == -6727)
          goto LABEL_27;
        if (v13)
          break;
        if (!CFEqual(v21, v20))
        {
LABEL_27:
          if (sub_21A693A8C(v7, Mutable, (uint64_t)"%O", v14, v15, v16, v17, v18, v22))
            break;
        }
        if (!sub_21A6956DC((uint64_t *)v23, &v22, &v21))
          goto LABEL_18;
      }
    }
    v2 = 0;
  }
  else
  {
    v2 = 0;
    Mutable = 0;
  }
LABEL_6:
  if (v23)
    sub_21A6956D0(v23);
  if (Mutable)
    CFRelease(Mutable);
  return v2;
}

uint64_t sub_21A6CFD64(uint64_t a1, __CFArray **a2)
{
  _BOOL4 v4;
  uint64_t v5;
  _BOOL4 v6;
  const __CFAllocator *v7;
  CFMutableDictionaryRef Mutable;
  __CFArray *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  CFStringRef v67;
  CFStringRef v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  int valuePtr;
  _BYTE v97[5];
  CFTypeRef v98;
  CFTypeRef cf;
  char *__s;
  unsigned int v101;
  char v102[21];
  char cStr[16];
  __int128 v104;
  uint64_t v105;
  uint64_t v106;

  v106 = *MEMORY[0x24BDAC8D0];
  v101 = 0;
  cf = 0;
  __s = 0;
  v98 = 0;
  v4 = sub_21A6D4724(a1, 1935819842);
  v5 = 4294967292;
  if (!a1 || !a2)
    goto LABEL_23;
  v6 = v4;
  v7 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
  if (!Mutable)
  {
    v5 = 4294967293;
    goto LABEL_23;
  }
  v9 = Mutable;
  v5 = sub_21A6D4430(a1, 1918979393, (CFMutableDictionaryRef *)&cf);
  if ((_DWORD)v5)
    goto LABEL_23;
  __s = 0;
  v5 = sub_21A694D3C((const __CFString *)cf, &__s);
  if (cf)
  {
    CFRelease(cf);
    cf = 0;
  }
  if ((_DWORD)v5)
    goto LABEL_23;
  v10 = __s;
  if (!__s)
    goto LABEL_53;
  v105 = 0;
  *(_OWORD *)cStr = 0u;
  v104 = 0u;
  if (strlen(__s) == 17)
  {
    v95 = __tolower(__s[9]);
    v94 = __tolower(v10[10]);
    v11 = __tolower(v10[12]);
    v12 = __tolower(v10[13]);
    v13 = __tolower(v10[15]);
    v14 = __tolower(v10[16]);
    __sprintf_chk(cStr, 0, 0x28uLL, "Apple Network %c%c%c%c%c%c", v95, v94, v11, v12, v13, v14);
    v10 = __s;
  }
  free(v10);
  if (!cStr[0])
  {
    v5 = 4294967281;
    goto LABEL_23;
  }
  v5 = sub_21A693A8C(v7, v9, (uint64_t)"%kC=%s", v15, v16, v17, v18, v19, 1918979693);
  if (!(_DWORD)v5)
  {
    v5 = sub_21A693A8C(v7, v9, (uint64_t)"%kC=%i", v20, v21, v22, v23, v24, 1651725133);
    if (!(_DWORD)v5)
    {
      v5 = sub_21A693A8C(v7, v9, (uint64_t)"%kC=%i", v25, v26, v27, v28, v29, 1651723853);
      if (!(_DWORD)v5)
      {
        v5 = sub_21A693A8C(v7, v9, (uint64_t)"%kC=%i", v30, v31, v32, v33, v34, 2003060332);
        if (!(_DWORD)v5)
        {
          v5 = sub_21A693A8C(v7, v9, (uint64_t)"%kC=%i", v35, v36, v37, v38, v39, 1651720515);
          if (!(_DWORD)v5)
          {
            v5 = sub_21A693A8C(v7, v9, (uint64_t)"%kC=[]", v40, v41, v42, v43, v44, 2003061875);
            if (!(_DWORD)v5)
            {
              if (sub_21A6D4724(a1, 1146569811) && sub_21A6D4724(a1, 1685540419))
              {
                valuePtr = 0;
                sub_21A6D69EC(v102, 0x15uLL);
                sub_21A6711EC(1685538412, v97);
                __strcat_chk();
                v45 = sub_21A6D4328(a1, v102, (CFMutableDictionaryRef *)&v98);
                if ((_DWORD)v45)
                {
                  v5 = v45;
                  goto LABEL_23;
                }
                if (!CFNumberGetValue((CFNumberRef)v98, kCFNumberIntType, &valuePtr))
                {
                  v5 = 0;
                  goto LABEL_23;
                }
                if (v98)
                {
                  CFRelease(v98);
                  v98 = 0;
                }
                valuePtr &= ~2u;
                v5 = sub_21A693A8C(v7, v9, (uint64_t)"%kC=%i", v47, v48, v49, v50, v51, 1685538412);
                if ((_DWORD)v5)
                  goto LABEL_23;
              }
              if (!sub_21A6D4724(a1, 825319779) && !v6)
                sub_21A6D4724(a1, 942682734);
              v5 = sub_21A693A8C(v7, v9, (uint64_t)"%kC=%i", v52, v53, v54, v55, v56, 1651718221);
              if ((_DWORD)v5)
                goto LABEL_23;
              v5 = sub_21A693A8C(v7, v9, (uint64_t)"%kC=%i", v57, v58, v59, v60, v61, 1651724877);
              if ((_DWORD)v5)
                goto LABEL_23;
              v5 = sub_21A693A8C(v7, v9, (uint64_t)"%kC=%i", v62, v63, v64, v65, v66, 1651722563);
              if ((_DWORD)v5)
                goto LABEL_23;
              cf = 0;
              v5 = sub_21A6D4430(a1, 1684554343, (CFMutableDictionaryRef *)&cf);
              if ((_DWORD)v5)
                goto LABEL_23;
              v105 = 0;
              *(_OWORD *)cStr = 0u;
              v104 = 0u;
              __s = 0;
              v5 = sub_21A694D3C((const __CFString *)cf, &__s);
              if (cf)
              {
                CFRelease(cf);
                cf = 0;
              }
              if ((_DWORD)v5)
                goto LABEL_23;
              if (__s)
              {
                v5 = sub_21A6A16C4(__s, 0, &v101, 0, 0, 0, 0);
                if (!(_DWORD)v5)
                {
                  free(__s);
                  v105 = 0;
                  *(_OWORD *)cStr = 0u;
                  v104 = 0u;
                  sub_21A69A24C(v101 - 1, 0, cStr);
                  cf = CFStringCreateWithCString(v7, cStr, 0x8000100u);
                  if (!cf)
                  {
                    v5 = 4294967293;
                    goto LABEL_25;
                  }
                  v67 = sub_21A6CFB4C(1818315088);
                  if (v67)
                  {
                    v68 = v67;
                    CFDictionarySetValue(v9, v67, cf);
                    CFRelease(v68);
                    CFRelease(cf);
                    cf = 0;
                    v5 = sub_21A693A8C(v7, v9, (uint64_t)"%kC=%O", v69, v70, v71, v72, v73, 2002864464);
                    if (!(_DWORD)v5)
                    {
                      v5 = sub_21A693A8C(v7, v9, (uint64_t)"%kC=%O", v74, v75, v76, v77, v78, 2002867021);
                      if (!(_DWORD)v5)
                      {
                        v5 = sub_21A693A8C(v7, v9, (uint64_t)"%kC=%O", v79, v80, v81, v82, v83, 2002866753);
                        if (!(_DWORD)v5)
                        {
                          v5 = sub_21A693A8C(v7, v9, (uint64_t)"%kC=%O", v84, v85, v86, v87, v88, 2002863153);
                          if (!(_DWORD)v5)
                          {
                            v5 = sub_21A693A8C(v7, v9, (uint64_t)"%kC=%O", v89, v90, v91, v92, v93, 2002863154);
                            if (!(_DWORD)v5)
                              *a2 = v9;
                          }
                        }
                      }
                    }
                  }
                  else
                  {
                    v5 = 4294967292;
                  }
                }
                goto LABEL_23;
              }
LABEL_53:
              v5 = 4294967270;
            }
          }
        }
      }
    }
  }
LABEL_23:
  if (cf)
  {
    CFRelease(cf);
    cf = 0;
  }
LABEL_25:
  if (v98)
    CFRelease(v98);
  return v5;
}

char *sub_21A6D039C(const __CFString *a1, const __CFString *a2)
{
  CFIndex Length;
  char *v5;
  size_t v6;
  size_t v7;
  _BYTE v9[6];
  _BYTE v10[6];
  char *__s;

  __s = 0;
  if (!a1)
    return 0;
  Length = CFStringGetLength(a1);
  v5 = 0;
  if (!a2 || !Length)
    goto LABEL_8;
  if (!CFStringGetLength(a2))
    goto LABEL_7;
  sub_21A694D3C(a1, &__s);
  v5 = __s;
  if (!__s)
    return v5;
  v6 = strlen(__s);
  if (sub_21A6A1EB0(__s, v6, 6, v10))
    goto LABEL_7;
  free(__s);
  __s = 0;
  sub_21A694D3C(a2, &__s);
  if (!__s)
    return 0;
  v7 = strlen(__s);
  if (sub_21A6A1EB0(__s, v7, 6, v9))
  {
LABEL_7:
    v5 = 0;
    goto LABEL_8;
  }
  v5 = (char *)(sub_21A6A1184((uint64_t)v10, (uint64_t)v9) == 0);
LABEL_8:
  if (__s)
    free(__s);
  return v5;
}

void sub_21A6D0498(const __CFString *a1, const __CFString *a2, CFPropertyListRef *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v10;
  CFIndex Count;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  CFIndex v17;
  uint64_t i;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  int v25;
  const __CFString *v26;
  CFPropertyListRef propertyList;
  CFArrayRef theArray;

  if (a1)
  {
    if (a2)
    {
      if (a3)
      {
        theArray = 0;
        sub_21A693B94(a1, (uint64_t)&theArray, (UInt8 *)"%kO", a4, a5, a6, a7, a8, (uint64_t)CFSTR("entries"));
        if (!v10)
        {
          if (theArray)
          {
            Count = CFArrayGetCount(theArray);
            if (Count)
            {
              v17 = Count;
              if (Count >= 1)
              {
                for (i = 0; v17 != i; ++i)
                {
                  v26 = 0;
                  propertyList = 0;
                  sub_21A693B94((const __CFString *)theArray, (uint64_t)&propertyList, (UInt8 *)"[*]", v12, v13, v14, v15, v16, i);
                  if (v24)
                    break;
                  if (!propertyList)
                    break;
                  sub_21A693B94((const __CFString *)propertyList, (uint64_t)&v26, (UInt8 *)"%kO", v19, v20, v21, v22, v23, (uint64_t)CFSTR("macAddress"));
                  if (v25 || !v26)
                    break;
                  if ((sub_21A6D039C(v26, a2) & 1) != 0)
                  {
                    if (propertyList)
                      *a3 = CFPropertyListCreateDeepCopy((CFAllocatorRef)*MEMORY[0x24BDBD240], propertyList, 2uLL);
                    return;
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

void sub_21A6D05EC(const __CFString *a1, const void *a2, CFIndex a3, uint64_t a4, const __CFString *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v11;
  CFIndex Count;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  CFIndex v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  int v26;
  __CFString *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  const __CFString *v34;
  CFArrayRef v35;
  CFArrayRef theArray;

  if (a1)
  {
    if (a2)
    {
      if (a4)
      {
        if (a5)
        {
          theArray = 0;
          sub_21A693B94(a1, (uint64_t)&theArray, (UInt8 *)"%kO", a4, (uint64_t)a5, a6, a7, a8, (uint64_t)CFSTR("entries"));
          if (!v11)
          {
            if (theArray)
            {
              Count = CFArrayGetCount(theArray);
              if (Count)
              {
                v18 = Count;
                if (Count < 1)
                {
LABEL_25:
                  sub_21A693A8C((const __CFAllocator *)*MEMORY[0x24BDBD240], theArray, (uint64_t)"{%kO=[%O]%kO=%O%kO=%i%kO=%O}", v13, v14, v15, v16, v17, (uint64_t)CFSTR("wirelessAccessTimes"));
                }
                else
                {
                  v19 = 0;
                  while (1)
                  {
                    v34 = 0;
                    v35 = 0;
                    sub_21A693B94((const __CFString *)theArray, (uint64_t)&v35, (UInt8 *)"[*]", v13, v14, v15, v16, v17, v19);
                    if (v25)
                      break;
                    if (!v35)
                      break;
                    sub_21A693B94((const __CFString *)v35, (uint64_t)&v34, (UInt8 *)"%kO", v20, v21, v22, v23, v24, (uint64_t)CFSTR("macAddress"));
                    if (v26 || !v34)
                      break;
                    if ((sub_21A6D039C(v34, a5) & 1) != 0)
                    {
                      v27 = (__CFString *)v35;
                      if (!v35)
                        goto LABEL_25;
                      v35 = 0;
                      sub_21A693B94(v27, (uint64_t)&v35, (UInt8 *)"%kO", v13, v14, v15, v16, v17, (uint64_t)CFSTR("wirelessAccessTimes"));
                      if (!v33 && v35)
                      {
                        if (a3 == -2)
                        {
                          sub_21A693A8C((const __CFAllocator *)*MEMORY[0x24BDBD240], (__CFArray *)v27, (uint64_t)"%kO=[%O]", v28, v29, v30, v31, v32, (uint64_t)CFSTR("wirelessAccessTimes"));
                        }
                        else if (a3 == -1)
                        {
                          sub_21A693A8C((const __CFAllocator *)*MEMORY[0x24BDBD240], v35, (uint64_t)"%O", v28, v29, v30, v31, v32, (uint64_t)a2);
                        }
                        else if (CFArrayGetCount(v35) > a3)
                        {
                          CFArraySetValueAtIndex(v35, a3, a2);
                        }
                      }
                      return;
                    }
                    if (v18 == ++v19)
                      goto LABEL_25;
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

BOOL sub_21A6D0828(const __CFString *a1, const __CFString *a2)
{
  _BOOL8 v2;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  char *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  UInt8 *v15;
  char *v16;

  v2 = 0;
  v15 = 0;
  v9 = 0;
  if (a1 && a2)
  {
    v16 = 0;
    v13 = 0;
    v14 = 0;
    v11 = 0;
    v12 = 0;
    v10 = 0;
    v7 = 0;
    v8 = 0;
    v6 = 0;
    v5 = 0;
    v2 = 0;
    if (!sub_21A694C44(a1, (const char **)&v16, &v15))
      v2 = !sub_21A694C44(a2, (const char **)&v10, (UInt8 **)&v9)
        && !sub_21A6A3CE4((unsigned __int8 *)v16, (int *)&v14 + 1)
        && !sub_21A6A3CE4((unsigned __int8 *)v10, (int *)&v8 + 1)
        && HIDWORD(v14) == HIDWORD(v8)
        && !sub_21A6A3F64((unsigned __int8 *)v16, &v14, (_DWORD *)&v13 + 1, &v13, (_DWORD *)&v12 + 1, &v12, &v11)&& !sub_21A6A3F64((unsigned __int8 *)v10, &v8, (_DWORD *)&v7 + 1, &v7, (_DWORD *)&v6 + 1, &v6, &v5)&& (_DWORD)v14 == (_DWORD)v8&& v13 == v7&& v12 == v6&& v11 == v5;
    if (v15)
    {
      free(v15);
      v15 = 0;
    }
    if (v9)
      free(v9);
  }
  return v2;
}

CFArrayRef sub_21A6D09A8(CFArrayRef result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  CFIndex Count;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  CFIndex v15;
  uint64_t v16;
  int v17;
  const __CFString *v18;
  CFArrayRef theArray;

  if (result)
  {
    theArray = 0;
    sub_21A693B94((const __CFString *)result, (uint64_t)&theArray, (UInt8 *)"%kO", a4, a5, a6, a7, a8, (uint64_t)CFSTR("wirelessAccessTimes"));
    if (v8)
      return 0;
    result = theArray;
    if (theArray)
    {
      Count = CFArrayGetCount(theArray);
      if (Count >= 1)
      {
        v15 = Count;
        v16 = 0;
        while (1)
        {
          v18 = 0;
          sub_21A693B94((const __CFString *)theArray, (uint64_t)&v18, (UInt8 *)"[*]", v10, v11, v12, v13, v14, v16);
          if (v17)
            break;
          result = (CFArrayRef)v18;
          if (!v18)
            return result;
          result = (CFArrayRef)sub_21A6D0828(v18, CFSTR("days=mtwtfss;t=0-0"));
          if ((_DWORD)result)
            return (CFArrayRef)1;
          if (v15 == ++v16)
            return result;
        }
      }
      return 0;
    }
  }
  return result;
}

uint64_t sub_21A6D0A70(__CFArray *a1, int a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = 4294967292;
  if (a1 && a2)
  {
    if (sub_21A6D0AE8(a1, a2) == -1)
      return sub_21A693A8C((const __CFAllocator *)*MEMORY[0x24BDBD240], a1, (uint64_t)"{%kO=%C}", v4, v5, v6, v7, v8, (uint64_t)CFSTR("code"));
    else
      return 0;
  }
  return result;
}

uint64_t sub_21A6D0AE8(const __CFArray *a1, int a2)
{
  CFIndex Count;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  CFIndex v10;
  uint64_t i;
  int v13;

  v13 = 0;
  if (a1)
  {
    Count = CFArrayGetCount(a1);
    if (Count >= 1)
    {
      v10 = Count;
      for (i = 0; i != v10; ++i)
      {
        sub_21A693B94((const __CFString *)a1, (uint64_t)&v13, (UInt8 *)"[*].%kO:code", v5, v6, v7, v8, v9, i);
        if (!v13)
          break;
        if (v13 == a2)
          return i;
      }
    }
  }
  return -1;
}

uint64_t sub_21A6D0B84(const __CFArray *a1, int a2)
{
  uint64_t result;
  CFIndex v4;

  result = 4294967292;
  if (a1 && a2)
  {
    v4 = sub_21A6D0AE8(a1, a2);
    if (v4 != -1)
      CFArrayRemoveValueAtIndex(a1, v4);
    return 0;
  }
  return result;
}

void sub_21A6D0BCC(const __CFString *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  CFTypeID v10;
  CFIndex Count;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  CFIndex v17;
  uint64_t v18;
  int v19;
  int v21;
  int v22;
  int v23;
  char v24;

  if (a1)
  {
    v10 = CFGetTypeID(a1);
    if (v10 == CFArrayGetTypeID())
    {
      Count = CFArrayGetCount((CFArrayRef)a1);
      if (Count >= 1)
      {
        v17 = Count;
        v18 = 0;
        while (1)
        {
          v24 = 0;
          sub_21A693B94(a1, (uint64_t)&v24, (UInt8 *)"[*].%ks:BOOL", v12, v13, v14, v15, v16, v18);
          if (v19 != -6727 && v24 != 0)
            break;
          if (v17 == ++v18)
            return;
        }
        if (!v19)
        {
          if (!a2 || (sub_21A693B94(a1, a2, (UInt8 *)"[*].%ks.[0].%ks:int", v12, v13, v14, v15, v16, v18), !v21))
          {
            if (!a3 || (sub_21A693B94(a1, a3, (UInt8 *)"[*].%ks.[0].%ks:int", v12, v13, v14, v15, v16, v18), !v22))
            {
              if (!a4 || (sub_21A693B94(a1, a4, (UInt8 *)"[*].%ks.[0].%ks:int", v12, v13, v14, v15, v16, v18), !v23))
              {
                if (a5)
                  sub_21A693B94(a1, a5, (UInt8 *)"[*].%ks.[0].%ks:int", v12, v13, v14, v15, v16, v18);
              }
            }
          }
        }
      }
    }
  }
}

uint64_t sub_21A6D0D74(const __CFArray *a1, const __CFArray *a2, __CFString **a3)
{
  uint64_t v3;
  CFIndex Count;
  CFIndex v8;
  uint64_t v9;
  CFMutableDictionaryRef Mutable;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __CFString *v16;
  uint64_t i;
  uint64_t v18;
  const __CFData *v19;
  UInt8 *v20;
  UInt8 *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  const __CFString *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  const __CFAllocator *v43;
  uint64_t v44;
  __CFArray *v45;
  const __CFString *v46;
  const __CFString *v47;
  const __CFString *v48;

  v3 = 4294960591;
  if (!a1)
    return v3;
  if (!a2)
    return v3;
  if (!a3)
    return v3;
  Count = CFArrayGetCount(a1);
  v8 = CFArrayGetCount(a2);
  v3 = 4294960569;
  if (!Count)
    return v3;
  v9 = v8;
  if (!v8)
    return v3;
  v43 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
  if (!Mutable)
    return 4294960568;
  v16 = (__CFString *)Mutable;
  v47 = 0;
  v48 = 0;
  if (Count >= 1)
  {
    for (i = 0; i != Count; ++i)
    {
      sub_21A693B94((const __CFString *)a1, (uint64_t)&v48, (UInt8 *)"[*]", v11, v12, v13, v14, v15, i);
      if ((_DWORD)v18)
      {
        v3 = v18;
        goto LABEL_38;
      }
      v19 = (const __CFData *)sub_21A72E39C((uint64_t)v48);
      if (v19)
      {
        v20 = (UInt8 *)v19;
        if (CFDataGetLength(v19))
        {
          v21 = sub_21A6D100C(v20);
          if (!v21)
          {
            v3 = 4294960568;
            goto LABEL_38;
          }
          v27 = (const __CFString *)v21;
          if (v9 >= 1)
          {
            v28 = 0;
            while (1)
            {
              v45 = 0;
              v46 = 0;
              v44 = 0;
              sub_21A693B94((const __CFString *)a2, (uint64_t)&v46, (UInt8 *)"[*]", v22, v23, v24, v25, v26, v28);
              if ((_DWORD)v29)
                break;
              if (!v46)
                goto LABEL_34;
              sub_21A693B94(v46, (uint64_t)&v47, (UInt8 *)"%kO", v30, v31, v32, v33, v34, (uint64_t)CFSTR("raMA"));
              if (!v47)
                goto LABEL_34;
              if (sub_21A6D039C(v47, v27))
              {
                sub_21A693B94(v16, (uint64_t)&v45, (UInt8 *)"%kO", v22, v23, v24, v25, v26, (uint64_t)v47);
                v3 = v40;
                if ((_DWORD)v40 == -6727)
                  v3 = sub_21A693A8C(v43, (__CFArray *)v16, (uint64_t)"%kO=[%@]", v35, v36, v37, v38, v39, (uint64_t)v47);
                if ((_DWORD)v3)
                  goto LABEL_37;
                if (!v45)
                  goto LABEL_34;
                sub_21A693B94(v48, (uint64_t)&v44, (UInt8 *)"%kO", v35, v36, v37, v38, v39, (uint64_t)CFSTR("SSID_STR"));
                if ((_DWORD)v41 != -6727)
                {
                  v3 = v41;
                  if ((_DWORD)v41)
                    goto LABEL_37;
                  if (!v44)
                  {
LABEL_34:
                    v3 = 4294960568;
                    goto LABEL_37;
                  }
                  v29 = sub_21A693A8C(v43, v45, (uint64_t)"%O", v22, v23, v24, v25, v26, v44);
                  if (!(_DWORD)v29)
                    goto LABEL_29;
                  break;
                }
              }
              if (v9 == ++v28)
                goto LABEL_29;
            }
            v3 = v29;
LABEL_37:
            CFRelease(v27);
LABEL_38:
            CFRelease(v16);
            return v3;
          }
LABEL_29:
          CFRelease(v27);
        }
      }
    }
  }
  if (!CFDictionaryGetCount((CFDictionaryRef)v16))
  {
    v3 = 4294960569;
    goto LABEL_38;
  }
  v3 = 0;
  *a3 = v16;
  return v3;
}

UInt8 *sub_21A6D100C(UInt8 *result)
{
  const __CFData *v1;
  CFTypeID v2;
  const __CFAllocator *v3;
  const char *v4;
  _BYTE v5[32];
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  if (result)
  {
    v1 = (const __CFData *)result;
    v2 = CFGetTypeID(result);
    if (v2 == CFDataGetTypeID())
    {
      result = (UInt8 *)CFDataGetBytePtr(v1);
      if (result)
      {
        v3 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
        v4 = sub_21A6A1FDC(result, 6, v5);
        return (UInt8 *)CFStringCreateWithCString(v3, v4, 0x8000100u);
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void sub_21A6D10B4(const __CFString *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  CFTypeID v8;
  CFIndex Count;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  CFIndex v15;
  uint64_t v16;
  int v17;
  int v19;
  int v20;
  char v21;

  v21 = 0;
  if (a1)
  {
    v8 = CFGetTypeID(a1);
    if (v8 == CFArrayGetTypeID())
    {
      Count = CFArrayGetCount((CFArrayRef)a1);
      if (Count >= 1)
      {
        v15 = Count;
        v16 = 0;
        while (1)
        {
          sub_21A693B94(a1, (uint64_t)&v21, (UInt8 *)"[*].%ks:BOOL", v10, v11, v12, v13, v14, v16);
          if (!v17 && v21 != 0)
            break;
          if (v15 == ++v16)
            return;
        }
        if (!a2 || (sub_21A693B94(a1, a2, (UInt8 *)"[*].%ks.[0].%ks:obj", v10, v11, v12, v13, v14, v16), !v19))
        {
          if (!a3 || (sub_21A693B94(a1, a3, (UInt8 *)"[*].%ks.[0].%ks:obj", v10, v11, v12, v13, v14, v16), !v20))
          {
            if (a4)
              sub_21A693B94(a1, a4, (UInt8 *)"[*].%ks.[0].%ks:obj", v10, v11, v12, v13, v14, v16);
          }
        }
      }
    }
  }
}

uint64_t sub_21A6D1220(int *a1)
{
  _QWORD *v1;
  int v2;
  uint64_t v4;

  *((_QWORD *)a1 + 2) = 0;
  v1 = a1 + 4;
  *((_QWORD *)a1 + 1) = 0;
  *((_QWORD *)a1 + 3) = 0;
  v2 = *a1;
  if ((*a1 & 1) != 0)
  {
    v4 = operator new();
    sub_21A6AC458();
    *((_QWORD *)a1 + 1) = v4;
    v2 = *a1;
  }
  if ((v2 & 4) != 0)
    return sub_21A6714D8(2, 0, v1);
  else
    return 0;
}

void sub_21A6D12A8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x220747368](v1, 0x10F3C40C1DAC261);
  _Unwind_Resume(a1);
}

int *sub_21A6D12CC(int *result)
{
  int *v1;
  unsigned __int8 *v2;
  int v3;
  uint64_t v4;
  _QWORD *v5;

  if (result)
  {
    v1 = result;
    v2 = (unsigned __int8 *)*((_QWORD *)result + 3);
    if (v2)
    {
      sub_21A673D80(v2);
      *((_QWORD *)v1 + 3) = 0;
    }
    v3 = *v1;
    if ((*v1 & 1) != 0)
    {
      v4 = *((_QWORD *)v1 + 1);
      if (v4)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
        *((_QWORD *)v1 + 1) = 0;
        v3 = *v1;
      }
    }
    if ((v3 & 4) != 0)
    {
      v5 = (_QWORD *)*((_QWORD *)v1 + 2);
      if (v5)
      {
        sub_21A671570(v5);
        *((_QWORD *)v1 + 2) = 0;
      }
    }
    JUMPOUT(0x220747368);
  }
  return result;
}

uint64_t sub_21A6D1350(uint64_t *a1, const __CFString *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const __CFString *v20;
  uint64_t v21;

  if (!a1)
    return 4294967292;
  if ((byte_2550F4D40 & 1) == 0)
  {
    sub_21A6F4694();
    byte_2550F4D40 = 1;
  }
  v4 = operator new();
  *(_DWORD *)v4 = 5;
  v5 = sub_21A6D1220((int *)v4);
  if ((_DWORD)v5)
  {
    v11 = v5;
  }
  else
  {
    v20 = 0;
    v21 = 0;
    sub_21A693B94(a2, (uint64_t)&v21, (UInt8 *)"%ks", v6, v7, v8, v9, v10, (uint64_t)"syVs");
    v11 = v17;
    if (!(_DWORD)v17)
    {
      sub_21A693B94(a2, (uint64_t)&v20, (UInt8 *)"%ks", v12, v13, v14, v15, v16, (uint64_t)"syAP");
      v11 = v18;
      if (!(_DWORD)v18)
      {
        v11 = sub_21A6AD43C(*(_QWORD *)(v4 + 8), 1937326416, v20, 2);
        if (!(_DWORD)v11)
        {
          v11 = sub_21A6AD43C(*(_QWORD *)(v4 + 8), 1651721296, CFSTR("public"), 2);
          if (!(_DWORD)v11)
          {
            sub_21A6AC4CC(*(_QWORD *)(v4 + 8), a2);
            *a1 = v4;
            return v11;
          }
        }
      }
    }
  }
  sub_21A6D12CC((int *)v4);
  return v11;
}

uint64_t sub_21A6D1490(uint64_t *a1, const __CFDictionary *a2, const __CFString *a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v9;
  void *__p;
  uint64_t v11;
  uint64_t v12;

  __p = 0;
  v11 = 0;
  v12 = 0;
  if ((byte_2550F4D40 & 1) == 0)
  {
    sub_21A6F4694();
    byte_2550F4D40 = 1;
  }
  v6 = 0;
  v7 = 4294967292;
  if (!a1)
    goto LABEL_14;
  if (!a2)
    goto LABEL_14;
  v6 = operator new();
  *(_QWORD *)(v6 + 16) = 0;
  *(_DWORD *)v6 = 1;
  v7 = sub_21A6D1220((int *)v6);
  if ((_DWORD)v7)
    goto LABEL_14;
  if (!a3)
    goto LABEL_12;
  if (!CFStringGetLength(a3))
  {
    if (SHIBYTE(v12) < 0)
    {
      *(_BYTE *)__p = 0;
      v11 = 0;
      goto LABEL_13;
    }
LABEL_12:
    LOBYTE(__p) = 0;
    HIBYTE(v12) = 0;
    goto LABEL_13;
  }
  v9 = 0;
  v7 = sub_21A694D3C(a3, (char **)&v9);
  if ((_DWORD)v7)
  {
LABEL_14:
    sub_21A6D12CC((int *)v6);
    goto LABEL_15;
  }
  if (!v9)
  {
    v7 = 4294960568;
    goto LABEL_14;
  }
  MEMORY[0x220747320](&__p);
  free(v9);
LABEL_13:
  v7 = sub_21A6B8BA4(*(_QWORD *)(v6 + 8), a2, 1, (uint64_t)&__p);
  if ((_DWORD)v7)
    goto LABEL_14;
  if (!*(_QWORD *)(v6 + 8))
  {
    v7 = 0;
    goto LABEL_14;
  }
  v7 = 0;
  *a1 = v6;
LABEL_15:
  if (SHIBYTE(v12) < 0)
    operator delete(__p);
  return v7;
}

void sub_21A6D15F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_21A6D1610(uint64_t a1, const void *a2)
{
  uint64_t result;

  result = 4294960591;
  if (a1)
  {
    if (a2)
    {
      sub_21A6AC4CC(*(_QWORD *)(a1 + 8), a2);
      return 0;
    }
  }
  return result;
}

uint64_t sub_21A6D163C(uint64_t a1, const __CFString *a2, int a3)
{
  uint64_t v3;
  const __CFString *v7;
  __CFDictionary *v8;
  CFDataRef data;
  void *v11;
  const char *v12;
  CFTypeRef cf;
  int *v14;

  v14 = 0;
  v3 = 4294960591;
  if (!a1 || !a2)
    return v3;
  v12 = 0;
  cf = 0;
  data = 0;
  v11 = 0;
  if (pthread_main_np())
  {
    v3 = 4294960593;
  }
  else
  {
    v3 = sub_21A694C44(a2, &v12, (UInt8 **)&v11);
    if (!(_DWORD)v3)
    {
      v3 = sub_21A694AD0(v12, &data);
      if (v11)
      {
        free(v11);
        v11 = 0;
      }
      if (!(_DWORD)v3)
      {
        if (!data)
          goto LABEL_22;
        v7 = (const __CFString *)CFPropertyListCreateWithData(0, data, 0, 0, 0);
        if (data)
        {
          CFRelease(data);
          data = 0;
        }
        if (!v7)
          goto LABEL_22;
        v8 = sub_21A6F57C8(v7);
        CFRelease(v7);
        if (!v8)
          goto LABEL_22;
        v3 = sub_21A6D1490((uint64_t *)&v14, v8, 0);
        CFRelease(v8);
        if ((_DWORD)v3)
          goto LABEL_23;
        if (!v14)
          return 4294960568;
        v3 = sub_21A6D17C8((uint64_t)v14);
        if ((_DWORD)v3)
          goto LABEL_23;
        if (!v14)
          return 4294960591;
        v3 = sub_21A6B8B50(*((_QWORD *)v14 + 1), &cf);
        if ((_DWORD)v3)
          goto LABEL_23;
        if (cf)
        {
          v3 = sub_21A6B9930(*(_QWORD *)(a1 + 8), (CFDictionaryRef)cf, (const __CFString *)cf, a3 != 0);
          if (cf)
          {
            CFRelease(cf);
            cf = 0;
          }
        }
        else
        {
LABEL_22:
          v3 = 4294960568;
        }
      }
    }
  }
LABEL_23:
  if (v14)
    sub_21A6D12CC(v14);
  return v3;
}

uint64_t sub_21A6D17C8(uint64_t a1)
{
  uint64_t i;

  if (!a1)
    return 4294967292;
  sub_21A6ACA60(*(_QWORD *)(a1 + 8), 1);
  if (!sub_21A6AF0B4(*(_QWORD *)(a1 + 8), 1400460148))
    sub_21A6D6B64(a1);
  for (i = 0; i != 300; ++i)
  {
    if (sub_21A6B7F50(*(_QWORD *)(a1 + 8), dword_2550EF7F0[i]))
      sub_21A6D6880(a1, dword_2550EF7F0[i]);
  }
  return 0;
}

uint64_t sub_21A6D1858(uint64_t a1, const __CFString *a2, CFDictionaryRef theDict, int a4)
{
  if (a1)
    return sub_21A6B9930(*(_QWORD *)(a1 + 8), theDict, a2, a4 != 0);
  else
    return 4294967292;
}

uint64_t sub_21A6D1880(uint64_t a1, const void *a2)
{
  uint64_t v2;
  int v4;
  const __CFString *v5;
  char *v6;
  uint64_t v7;
  const void **v9;
  const __CFString *v10;
  const __CFString *v11;
  _BYTE v12[5];

  v9 = 0;
  v2 = 4294960591;
  if (a1 && a2)
  {
    v10 = 0;
    v11 = 0;
    v2 = sub_21A695640(a2, &v9);
    if (!(_DWORD)v2)
    {
      if (!v9)
        return 4294960568;
      while (sub_21A6956DC((uint64_t *)v9, &v10, &v11))
      {
        v4 = sub_21A6CFB94(v10);
        v5 = v11;
        v6 = sub_21A6711EC(v4, v12);
        v7 = sub_21A6D4244(a1, v6, v5);
        if ((_DWORD)v7)
          goto LABEL_10;
      }
      v7 = sub_21A6D17C8(a1);
LABEL_10:
      v2 = v7;
    }
    if (v9)
      sub_21A6956D0(v9);
  }
  return v2;
}

unsigned __int8 *sub_21A6D193C(uint64_t a1)
{
  unsigned __int8 *result;

  result = *(unsigned __int8 **)(a1 + 24);
  if (result)
  {
    result = (unsigned __int8 *)sub_21A673D80(result);
    *(_QWORD *)(a1 + 24) = 0;
  }
  if ((*(_BYTE *)a1 & 4) != 0)
  {
    result = *(unsigned __int8 **)(a1 + 16);
    if (result)
      return (unsigned __int8 *)sub_21A67162C((uint64_t)result);
  }
  return result;
}

uint64_t sub_21A6D1988(uint64_t result)
{
  uint64_t v1;

  if (result)
  {
    v1 = result;
    result = *(_QWORD *)(result + 24);
    if (result)
    {
      result = sub_21A673D80((unsigned __int8 *)result);
      *(_QWORD *)(v1 + 24) = 0;
    }
  }
  return result;
}

uint64_t sub_21A6D19B8(uint64_t a1, const __CFArray *a2, int a3)
{
  uint64_t result;

  if (!a1)
    return 4294967292;
  result = sub_21A6D19FC(*(_QWORD *)(a1 + 16), a2, a3, *(const std::string **)(a1 + 8));
  if (!(_DWORD)result)
    return sub_21A6D2450(a1);
  return result;
}

uint64_t sub_21A6D19FC(uint64_t a1, const __CFArray *a2, int a3, const std::string *a4)
{
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  std::string *v20;
  std::string *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  std::string *p_str;
  std::string *v28;
  uint64_t v29;
  std::string *v30;
  std::string *v31;
  std::string *v32;
  std::string *v33;
  std::string *v34;
  std::string *v35;
  std::string *v36;
  std::string *v37;
  CFIndex Count;
  char v39;
  CFStringRef v40;
  int v41;
  int *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int *v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  std::string *v54;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t data_low;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  char v66;
  int *v67;
  std::string v68;
  std::string v69;
  int v70;
  uint64_t v71;
  CFTypeRef cf;
  unint64_t v73;
  unsigned int v74;
  std::string v75;
  std::string v76;
  std::string __str;
  CFStringRef v78;
  unint64_t v79;
  char *v80[2];
  CFRange v81;

  v74 = 0;
  v8 = sub_21A671664(a1);
  cf = 0;
  v73 = 0;
  v71 = 0;
  v70 = 0;
  memset(&v69, 0, sizeof(v69));
  memset(&v68, 0, sizeof(v68));
  v9 = sub_21A6AD02C((uint64_t)a4, 1937326416, &v70, 0);
  if (!(_DWORD)v9)
  {
    if (v70 == 102 || v70 == 3)
    {
      v10 = v8 & 0xFFFFF3FF | 0x800;
    }
    else if (a3)
    {
      v10 = v8 & 0xFFFFF3FF | 0x400;
    }
    else
    {
      v10 = v8 & 0xFFFFFBFF;
    }
    sub_21A67166C(a1, v10);
    sub_21A6AFF90((uint64_t)a4, 0, v11, v12, v13, v14, v15, &__str);
    std::string::operator=(&v69, &__str);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    std::string::operator=(&v68, a4 + 5);
    v20 = (v69.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? &v69
        : (std::string *)v69.__r_.__value_.__r.__words[0];
    v21 = (v68.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? &v68
        : (std::string *)v68.__r_.__value_.__r.__words[0];
    v9 = sub_21A671674(a1, (char *)v20, v21, v10, v16, v17, v18, v19);
    if (!(_DWORD)v9)
    {
      v79 = 0;
      v80[0] = 0;
      v78 = 0;
      memset(&__str, 0, sizeof(__str));
      memset(&v76, 0, sizeof(v76));
      sub_21A6AFF90((uint64_t)a4, 0, v22, v23, v24, v25, v26, &v75);
      std::string::operator=(&__str, &v75);
      if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v75.__r_.__value_.__l.__data_);
      std::string::operator=(&v76, a4 + 5);
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_str = &__str;
      else
        p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
      if ((v76.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v28 = &v76;
      else
        v28 = (std::string *)v76.__r_.__value_.__r.__words[0];
      v29 = sub_21A6722F8(a1, 4, 60000, (char *)p_str, (char *)v28, 1717920116, v80, &v79);
      v9 = v29;
      if ((_DWORD)v29 == -16)
        goto LABEL_86;
      if (!(_DWORD)v29)
      {
        v9 = sub_21A673FCC(1717920116, (unsigned __int8 *)v80[0], v79, 1, &v78);
        if ((_DWORD)v9)
          goto LABEL_86;
        if (!v78)
          goto LABEL_85;
        v9 = sub_21A6AD43C((uint64_t)a4, 1717920116, v78, 2);
        if (v78)
        {
          CFRelease(v78);
          v78 = 0;
        }
        if ((_DWORD)v9)
          goto LABEL_86;
        free(v80[0]);
        v80[0] = 0;
      }
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v30 = &__str;
      else
        v30 = (std::string *)__str.__r_.__value_.__r.__words[0];
      if ((v76.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v31 = &v76;
      else
        v31 = (std::string *)v76.__r_.__value_.__r.__words[0];
      if (!sub_21A6722F8(a1, 4, 60000, (char *)v30, (char *)v31, 1717907505, v80, &v79))
      {
        v9 = sub_21A673FCC(1717907505, (unsigned __int8 *)v80[0], v79, 1, &v78);
        if ((_DWORD)v9)
          goto LABEL_86;
        if (!v78)
          goto LABEL_85;
        v9 = sub_21A6AD43C((uint64_t)a4, 1717907505, v78, 2);
        if (v78)
        {
          CFRelease(v78);
          v78 = 0;
        }
        if ((_DWORD)v9)
          goto LABEL_86;
        free(v80[0]);
        v80[0] = 0;
      }
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v32 = &__str;
      else
        v32 = (std::string *)__str.__r_.__value_.__r.__words[0];
      if ((v76.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v33 = &v76;
      else
        v33 = (std::string *)v76.__r_.__value_.__r.__words[0];
      if (!sub_21A6722F8(a1, 4, 60000, (char *)v32, (char *)v33, 1752641585, v80, &v79))
      {
        v9 = sub_21A673FCC(1752641585, (unsigned __int8 *)v80[0], v79, 1, &v78);
        if ((_DWORD)v9)
          goto LABEL_86;
        if (!v78)
          goto LABEL_85;
        v9 = sub_21A6AD43C((uint64_t)a4, 1752641585, v78, 2);
        if (v78)
        {
          CFRelease(v78);
          v78 = 0;
        }
        if ((_DWORD)v9)
          goto LABEL_86;
        free(v80[0]);
        v80[0] = 0;
      }
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v34 = &__str;
      else
        v34 = (std::string *)__str.__r_.__value_.__r.__words[0];
      if ((v76.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v35 = &v76;
      else
        v35 = (std::string *)v76.__r_.__value_.__r.__words[0];
      if (!sub_21A6722F8(a1, 4, 60000, (char *)v34, (char *)v35, 1937326416, v80, &v79))
      {
        v9 = sub_21A673FCC(1937326416, (unsigned __int8 *)v80[0], v79, 1, &v78);
        if ((_DWORD)v9)
          goto LABEL_86;
        if (!v78)
          goto LABEL_85;
        v9 = sub_21A6AD43C((uint64_t)a4, 1937326416, v78, 2);
        if (v78)
        {
          CFRelease(v78);
          v78 = 0;
        }
        if ((_DWORD)v9)
          goto LABEL_86;
        free(v80[0]);
        v80[0] = 0;
      }
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v36 = &__str;
      else
        v36 = (std::string *)__str.__r_.__value_.__r.__words[0];
      if ((v76.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v37 = &v76;
      else
        v37 = (std::string *)v76.__r_.__value_.__r.__words[0];
      v9 = sub_21A6722F8(a1, 4, 60000, (char *)v36, (char *)v37, 1937327724, v80, &v79);
      if ((_DWORD)v9)
        goto LABEL_86;
      v9 = sub_21A673FCC(1937327724, (unsigned __int8 *)v80[0], v79, 1, &v78);
      if ((_DWORD)v9)
        goto LABEL_86;
      if (v78)
      {
        v9 = sub_21A6AD43C((uint64_t)a4, 1937327724, v78, 2);
        if (v78)
        {
          CFRelease(v78);
          v78 = 0;
        }
        if (!(_DWORD)v9)
        {
          free(v80[0]);
          v80[0] = 0;
LABEL_88:
          if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v76.__r_.__value_.__l.__data_);
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(__str.__r_.__value_.__l.__data_);
            if ((_DWORD)v9)
              goto LABEL_120;
          }
          else if ((_DWORD)v9)
          {
            goto LABEL_120;
          }
          sub_21A6ACA60((uint64_t)a4, 0);
          if (!a2)
            goto LABEL_99;
          if (sub_21A6AF0B4((uint64_t)a4, 2003390540))
            goto LABEL_96;
          v40 = sub_21A6CFB4C(1466517097);
          if (!v40)
          {
LABEL_119:
            v9 = 4294967293;
            goto LABEL_120;
          }
          v81.length = CFArrayGetCount(a2);
          v81.location = 0;
          v41 = CFArrayContainsValue(a2, v81, v40);
          CFRelease(v40);
          if (!v41)
          {
LABEL_96:
            Count = CFArrayGetCount(a2);
            v39 = 0;
            v73 = Count;
          }
          else
          {
LABEL_99:
            sub_21A6B92F4((uint64_t)a4, &v71, &v73);
            a2 = 0;
            v39 = 1;
            Count = v73;
          }
          if (!Count)
          {
            v9 = 0;
            goto LABEL_120;
          }
          v42 = (int *)malloc_type_malloc(12 * Count, 0x10000403E1C8BA9uLL);
          v48 = v42;
          if (v42)
          {
            v49 = v73;
            v67 = v42;
            if (!v73)
              goto LABEL_112;
            v50 = 0;
            v51 = 0;
            v52 = 0;
            while (1)
            {
              if ((v39 & 1) != 0)
              {
                *v48 = *(_DWORD *)(v71 + v50);
              }
              else
              {
                sub_21A693B94((const __CFString *)a2, (uint64_t)v48, (UInt8 *)"[*]:code", v43, v44, v45, v46, v47, v52);
                v9 = v53;
                if ((_DWORD)v53)
                  goto LABEL_117;
                if (!sub_21A6B7764((uint64_t)a4, *v48))
                {
                  ++v51;
                  goto LABEL_110;
                }
              }
              v48[1] = 0;
              v48[2] = 0;
              v48 += 3;
LABEL_110:
              ++v52;
              v50 += 12;
              if (v52 >= v73)
              {
                v49 = v73 - v51;
                v48 = v67;
LABEL_112:
                v73 = v49;
                std::string::operator=(&v68, a4 + 5);
                if ((v68.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v54 = &v68;
                else
                  v54 = (std::string *)v68.__r_.__value_.__r.__words[0];
                v9 = sub_21A67259C(a1, 4, (const char *)v54, v73, v48);
                if ((_DWORD)v9 || (v9 = sub_21A672688(a1, 0, 60000, 0), (_DWORD)v9))
                {
LABEL_117:
                  free(v67);
                  goto LABEL_120;
                }
                while (2)
                {
                  LODWORD(v76.__r_.__value_.__r.__words[1]) = 0;
                  v76.__r_.__value_.__r.__words[0] = 0;
                  v9 = sub_21A672788(a1, 0, 60000, (int8x8_t *)&v76);
                  if ((_DWORD)v9)
                    goto LABEL_117;
                  data_low = LODWORD(v76.__r_.__value_.__l.__data_);
                  if (LODWORD(v76.__r_.__value_.__l.__data_) && (v76.__r_.__value_.__s.__data_[4] & 1) == 0)
                  {
                    memset(&__str, 0, sizeof(__str));
                    sub_21A6B9908((unint64_t *)&__str, LODWORD(v76.__r_.__value_.__r.__words[1]));
                    if (LODWORD(v76.__r_.__value_.__r.__words[1]))
                    {
                      v9 = sub_21A6727E0(a1, 0, 60000, LODWORD(v76.__r_.__value_.__r.__words[1]), __str.__r_.__value_.__l.__data_);
                      if (!(_DWORD)v9)
                      {
                        if ((v76.__r_.__value_.__s.__data_[4] & 2) != 0)
                          sub_21A670DCC(LODWORD(v76.__r_.__value_.__r.__words[1]), (uint64_t)__str.__r_.__value_.__l.__data_);
                        v9 = sub_21A673FCC((int)v76.__r_.__value_.__l.__data_, (unsigned __int8 *)__str.__r_.__value_.__l.__data_, LODWORD(v76.__r_.__value_.__r.__words[1]), 1, (CFStringRef *)&cf);
                        if (!(_DWORD)v9)
                        {
LABEL_146:
                          v9 = sub_21A6AF354((uint64_t)a4, LODWORD(v76.__r_.__value_.__l.__data_), (const __CFString *)cf, 2);
                          if ((_DWORD)v9)
                            goto LABEL_147;
                          CFRelease(cf);
                          v65 = 0;
                          v9 = 0;
                          cf = 0;
                          v66 = 1;
LABEL_148:
                          if (__str.__r_.__value_.__r.__words[0])
                          {
                            __str.__r_.__value_.__l.__size_ = __str.__r_.__value_.__r.__words[0];
                            operator delete(__str.__r_.__value_.__l.__data_);
                          }
                          if ((v66 & 1) == 0)
                          {
LABEL_143:
                            if (v65)
                              goto LABEL_117;
                            continue;
                          }
LABEL_142:
                          v65 = 0;
                          goto LABEL_143;
                        }
                      }
                    }
                    else
                    {
                      v9 = sub_21A673FCC((int)v76.__r_.__value_.__l.__data_, 0, 0, 1, (CFStringRef *)&cf);
                      if (!(_DWORD)v9)
                        goto LABEL_146;
                    }
LABEL_147:
                    v66 = 0;
                    v65 = 6;
                    goto LABEL_148;
                  }
                  break;
                }
                v74 = 0;
                if (LODWORD(v76.__r_.__value_.__r.__words[1]) != 4)
                {
                  if (dword_2550EF7B0 <= 8000)
                  {
                    if (dword_2550EF7B0 != -1)
                      goto LABEL_157;
                    if (sub_21A69876C((uint64_t)&dword_2550EF7B0, 0x1F40u))
                    {
                      data_low = LODWORD(v76.__r_.__value_.__l.__data_);
LABEL_157:
                      sub_21A698FDC((uint64_t)&dword_2550EF7B0, (uint64_t)"ACPStatus _BSReadConfiguration(ACPClientRef, CFArrayRef, Boolean, BaseStation *)", 8000, (uint64_t)"bad property size (code='%C', expected=%u, actual=%u)\n", v56, v57, v58, v59, data_low);
                    }
                  }
                  v9 = 4294960553;
                  goto LABEL_117;
                }
                v9 = sub_21A6727E0(a1, 0, 60000, 4, (char *)&v74);
                if ((_DWORD)v9)
                  goto LABEL_117;
                v74 = bswap32(v74);
                if (dword_2550EF7B0 <= 8000
                  && (dword_2550EF7B0 != -1 || sub_21A69876C((uint64_t)&dword_2550EF7B0, 0x1F40u)))
                {
                  sub_21A698FDC((uint64_t)&dword_2550EF7B0, (uint64_t)"ACPStatus _BSReadConfiguration(ACPClientRef, CFArrayRef, Boolean, BaseStation *)", 8000, (uint64_t)"read property error (code='%C' error = %m)\n", v61, v62, v63, v64, LODWORD(v76.__r_.__value_.__l.__data_));
                }
                if (!LODWORD(v76.__r_.__value_.__l.__data_))
                {
                  sub_21A6ACA60((uint64_t)a4, 1);
                  v9 = 0;
                  a4[9].__r_.__value_.__s.__data_[10] = 1;
                  goto LABEL_117;
                }
                v9 = 0;
                goto LABEL_142;
              }
            }
          }
          goto LABEL_119;
        }
LABEL_86:
        if (v80[0])
          free(v80[0]);
        goto LABEL_88;
      }
LABEL_85:
      v9 = 4294960568;
      goto LABEL_86;
    }
  }
LABEL_120:
  sub_21A6720D8(a1);
  if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v68.__r_.__value_.__l.__data_);
  if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v69.__r_.__value_.__l.__data_);
  return v9;
}

void sub_21A6D23B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41)
{
  if (a18 < 0)
    operator delete(__p);
  if (a24 < 0)
    operator delete(a19);
  _Unwind_Resume(exception_object);
}

uint64_t sub_21A6D2450(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  CFTypeRef cf;

  cf = 0;
  if (!a1)
    return 0;
  if (sub_21A6AF0B4(*(_QWORD *)(a1 + 8), 2003390540))
  {
    v7 = 0;
  }
  else
  {
    v7 = sub_21A692FEC((const __CFAllocator *)*MEMORY[0x24BDBD240], &cf, (uint64_t)"{%kO=[{%@}]}", v2, v3, v4, v5, v6, (uint64_t)CFSTR("radios"));
    if (!(_DWORD)v7)
    {
      v7 = sub_21A6D79AC(a1, 0, 1918979693);
      if (!(_DWORD)v7)
      {
        v7 = sub_21A6D79AC(a1, 0, 1918976876);
        if (!(_DWORD)v7)
        {
          v8 = sub_21A6D79AC(a1, 0, 1918980971);
          if ((_DWORD)v8 == -6727 || (v7 = v8, !(_DWORD)v8) || (_DWORD)v8 == -5)
          {
            v7 = sub_21A6D79AC(a1, 0, 1918981965);
            if (!(_DWORD)v7)
            {
              v7 = sub_21A6D79AC(a1, 0, 1918977345);
              if (!(_DWORD)v7)
              {
                v10 = sub_21A6D79AC(a1, 0, 1918976882);
                if ((_DWORD)v10 == -6727 || (v7 = v10, !(_DWORD)v10) || (_DWORD)v10 == -5)
                {
                  v11 = sub_21A6D79AC(a1, 0, 1918981957);
                  if ((_DWORD)v11 == -6727 || (v7 = v11, !(_DWORD)v11) || (_DWORD)v11 == -5)
                  {
                    v7 = sub_21A6D79AC(a1, 0, 1918978900);
                    if (!(_DWORD)v7)
                    {
                      v7 = sub_21A6D79AC(a1, 0, 1918980719);
                      if (!(_DWORD)v7)
                      {
                        v7 = sub_21A6D79AC(a1, 0, 1918976833);
                        if (!(_DWORD)v7)
                        {
                          v7 = sub_21A6D79AC(a1, 0, 1918976872);
                          if (!(_DWORD)v7)
                          {
                            v12 = sub_21A6D79AC(a1, 0, 1918981955);
                            if ((_DWORD)v12 == -6727 || (v7 = v12, !(_DWORD)v12) || (_DWORD)v12 == -5)
                            {
                              v7 = sub_21A6D79AC(a1, 0, 1918979445);
                              if (!(_DWORD)v7)
                              {
                                v7 = sub_21A6D79AC(a1, 0, 1918979428);
                                if (!(_DWORD)v7)
                                {
                                  v7 = sub_21A6D79AC(a1, 0, 1918980207);
                                  if (!(_DWORD)v7)
                                  {
                                    v7 = sub_21A6D79AC(a1, 0, 1918980980);
                                    if (!(_DWORD)v7)
                                    {
                                      v7 = sub_21A6D79AC(a1, 0, 1918128974);
                                      if (!(_DWORD)v7)
                                      {
                                        v7 = sub_21A6D79AC(a1, 0, 1633895790);
                                        if (!(_DWORD)v7)
                                        {
                                          v7 = sub_21A6D79AC(a1, 0, 2003060332);
                                          if (!(_DWORD)v7)
                                          {
                                            v7 = sub_21A6D79AC(a1, 0, 2003061875);
                                            if (!(_DWORD)v7)
                                            {
                                              v13 = sub_21A6D79AC(a1, 0, 1683440723);
                                              if ((_DWORD)v13 == -6727 || (v7 = v13, !(_DWORD)v13) || (_DWORD)v13 == -5)
                                              {
                                                v14 = sub_21A6D79AC(a1, 0, 1685538412);
                                                if ((_DWORD)v14 == -6727
                                                  || (v7 = v14, !(_DWORD)v14)
                                                  || (_DWORD)v14 == -5)
                                                {
                                                  v7 = sub_21A6D79AC(a1, 0, 1918977644);
                                                  if (!(_DWORD)v7)
                                                  {
                                                    v15 = sub_21A6D79AC(a1, 0, 1918978353);
                                                    if ((_DWORD)v15 == -6727
                                                      || (v7 = v15, !(_DWORD)v15)
                                                      || (_DWORD)v15 == -5)
                                                    {
                                                      v7 = sub_21A6D79AC(a1, 0, 1918976373);
                                                      if (!(_DWORD)v7)
                                                      {
                                                        v16 = sub_21A6D79AC(a1, 0, 1918980965);
                                                        if ((_DWORD)v16 == -6727
                                                          || (v7 = v16, !(_DWORD)v16)
                                                          || (_DWORD)v16 == -5)
                                                        {
                                                          v7 = sub_21A6D79AC(a1, 0, 1918977586);
                                                          if (!(_DWORD)v7)
                                                          {
                                                            v17 = sub_21A6D79AC(a1, 0, 1918978354);
                                                            if ((_DWORD)v17 == -6727
                                                              || (v7 = v17, !(_DWORD)v17)
                                                              || (_DWORD)v17 == -5)
                                                            {
                                                              v18 = sub_21A6D79AC(a1, 0, 1918981426);
                                                              if ((_DWORD)v18 == -6727
                                                                || (v7 = v18, !(_DWORD)v18)
                                                                || (_DWORD)v18 == -5)
                                                              {
                                                                v19 = sub_21A6D79AC(a1, 0, 1918980914);
                                                                if ((_DWORD)v19 == -6727
                                                                  || (v7 = v19, !(_DWORD)v19)
                                                                  || (_DWORD)v19 == -5)
                                                                {
                                                                  v7 = sub_21A6D79AC(a1, 0, 1918976873);
                                                                  if (!(_DWORD)v7)
                                                                    v7 = sub_21A6AD43C(*(_QWORD *)(a1 + 8), 1466517097, (const __CFString *)cf, 2);
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (cf)
    CFRelease(cf);
  return v7;
}

uint64_t sub_21A6D28FC(uint64_t a1, BOOL *a2, CFTypeRef *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BOOL4 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  CFComparisonResult v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v41;
  CFTypeRef v42;
  CFStringRef theString1;
  CFTypeRef v44;
  uint64_t v45;
  CFTypeRef cf;
  std::string __str;
  _BYTE v48[16];
  uint64_t v49;

  v49 = *MEMORY[0x24BDAC8D0];
  memset(&__str, 0, sizeof(__str));
  cf = 0;
  if (!a1)
  {
    v31 = 0;
    v6 = 4294967292;
    goto LABEL_25;
  }
  v6 = sub_21A72DD0C(v48, 0x10u);
  if ((_DWORD)v6)
    goto LABEL_24;
  MEMORY[0x220747320](&__str, v48);
  v6 = sub_21A6D2BE0(a1);
  if ((_DWORD)v6)
    goto LABEL_24;
  std::string::operator=((std::string *)(*(_QWORD *)(a1 + 8) + 344), &__str);
  sub_21A6AFE60(*(_QWORD *)(a1 + 8), 1818449522, 0x2000000, 0);
  sub_21A6AF410(*(_QWORD *)(a1 + 8));
  if (!sub_21A6AF0B4(*(_QWORD *)(a1 + 8), 1835626098))
  {
    if (sub_21A6AF0B4(*(_QWORD *)(a1 + 8), 1685214297))
      v39 = sub_21A6D3540(a1);
    else
      v39 = sub_21A6D3898(a1, v32, v33, v34, v35, v36, v37, v38);
    v6 = v39;
    goto LABEL_24;
  }
  v44 = 0;
  v45 = 0;
  theString1 = 0;
  v6 = sub_21A6D31A4(a1, &cf);
  if ((_DWORD)v6)
    goto LABEL_24;
  if (!cf)
  {
LABEL_32:
    v31 = 0;
    v6 = 4294960568;
    goto LABEL_25;
  }
  sub_21A693B94((const __CFString *)cf, (uint64_t)&v45, (UInt8 *)"%ks", v7, v8, v9, v10, v11, (uint64_t)"drTY");
  v6 = v16;
  if ((_DWORD)v16)
  {
LABEL_24:
    v31 = 0;
    goto LABEL_25;
  }
  v17 = v45;
  if (!v45)
    goto LABEL_32;
  if (dword_2550EF7B0 <= 1000)
  {
    if (dword_2550EF7B0 != -1 || (v18 = sub_21A69876C((uint64_t)&dword_2550EF7B0, 0x3E8u), v17 = v45, v18))
    {
      sub_21A698FDC((uint64_t)&dword_2550EF7B0, (uint64_t)"ACPStatus BSWriteWithMinimalRestart(BSRef, Boolean *, CFArrayRef *)", 1000, (uint64_t)"dirtyProperties: %@\n", v12, v13, v14, v15, v17);
      v17 = v45;
    }
  }
  v6 = sub_21A6D33C0(a1, v17);
  if ((_DWORD)v6)
    goto LABEL_24;
  sub_21A693B94((const __CFString *)cf, (uint64_t)&theString1, (UInt8 *)"%ks", v19, v20, v21, v22, v23, (uint64_t)"result");
  v6 = v24;
  if ((_DWORD)v24)
    goto LABEL_24;
  if (!theString1)
    goto LABEL_32;
  v25 = CFStringCompare(theString1, CFSTR("minimal"), 0);
  v31 = v25 == kCFCompareEqualTo;
  if (a3)
  {
    if (v25)
    {
      v31 = 0;
      v6 = 0;
      *a3 = 0;
    }
    else
    {
      sub_21A693B94((const __CFString *)cf, (uint64_t)&v44, (UInt8 *)"%ks", v26, v27, v28, v29, v30, (uint64_t)"interruptions");
      v6 = v41;
      if (!(_DWORD)v41)
      {
        v42 = v44;
        if (v44)
        {
          *a3 = v44;
          CFRetain(v42);
          v6 = 0;
        }
        else
        {
          v6 = 4294960568;
        }
      }
      v31 = 1;
    }
  }
  else
  {
    v6 = 0;
  }
LABEL_25:
  if (a2)
    *a2 = v31;
  if (cf)
    CFRelease(cf);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  return v6;
}

void sub_21A6D2BC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_21A6D2BE0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  const __CFString *v40;
  CFTypeRef cf;

  v40 = 0;
  cf = 0;
  if (!a1)
    return 0;
  if (sub_21A6AF0B4(*(_QWORD *)(a1 + 8), 2003390540))
  {
    v2 = 0;
  }
  else
  {
    v2 = sub_21A6AF29C(*(_QWORD *)(a1 + 8), 1466517097, &cf, 0);
    if (!(_DWORD)v2)
    {
      sub_21A693B94((const __CFString *)cf, (uint64_t)&v40, (UInt8 *)"%kO.[0]", v3, v4, v5, v6, v7, (uint64_t)CFSTR("radios"));
      v2 = v8;
      if (!(_DWORD)v8)
      {
        v10 = sub_21A6D78B4(a1, v40, 1918979693);
        if ((_DWORD)v10 == -6727 || (v2 = v10, !(_DWORD)v10) || (_DWORD)v10 == -5)
        {
          v11 = sub_21A6D78B4(a1, v40, 1918976876);
          if ((_DWORD)v11 == -6727 || (v2 = v11, !(_DWORD)v11) || (_DWORD)v11 == -5)
          {
            v12 = sub_21A6D78B4(a1, v40, 1918980971);
            if ((_DWORD)v12 == -6727 || (v2 = v12, !(_DWORD)v12) || (_DWORD)v12 == -5)
            {
              v13 = sub_21A6D78B4(a1, v40, 1918981965);
              if ((_DWORD)v13 == -6727 || (v2 = v13, !(_DWORD)v13) || (_DWORD)v13 == -5)
              {
                v14 = sub_21A6D78B4(a1, v40, 1918977345);
                if ((_DWORD)v14 == -6727 || (v2 = v14, !(_DWORD)v14) || (_DWORD)v14 == -5)
                {
                  v15 = sub_21A6D78B4(a1, v40, 1918976882);
                  if ((_DWORD)v15 == -6727 || (v2 = v15, !(_DWORD)v15) || (_DWORD)v15 == -5)
                  {
                    v16 = sub_21A6D78B4(a1, v40, 1918981957);
                    if ((_DWORD)v16 == -6727 || (v2 = v16, !(_DWORD)v16) || (_DWORD)v16 == -5)
                    {
                      v17 = sub_21A6D78B4(a1, v40, 1918978900);
                      if ((_DWORD)v17 == -6727 || (v2 = v17, !(_DWORD)v17) || (_DWORD)v17 == -5)
                      {
                        v18 = sub_21A6D78B4(a1, v40, 1918980719);
                        if ((_DWORD)v18 == -6727 || (v2 = v18, !(_DWORD)v18) || (_DWORD)v18 == -5)
                        {
                          v19 = sub_21A6D78B4(a1, v40, 1918976833);
                          if ((_DWORD)v19 == -6727 || (v2 = v19, !(_DWORD)v19) || (_DWORD)v19 == -5)
                          {
                            v20 = sub_21A6D78B4(a1, v40, 1918976872);
                            if ((_DWORD)v20 == -6727 || (v2 = v20, !(_DWORD)v20) || (_DWORD)v20 == -5)
                            {
                              v21 = sub_21A6D78B4(a1, v40, 1918981955);
                              if ((_DWORD)v21 == -6727 || (v2 = v21, !(_DWORD)v21) || (_DWORD)v21 == -5)
                              {
                                v22 = sub_21A6D78B4(a1, v40, 1918979445);
                                if ((_DWORD)v22 == -6727 || (v2 = v22, !(_DWORD)v22) || (_DWORD)v22 == -5)
                                {
                                  v23 = sub_21A6D78B4(a1, v40, 1918979428);
                                  if ((_DWORD)v23 == -6727 || (v2 = v23, !(_DWORD)v23) || (_DWORD)v23 == -5)
                                  {
                                    v24 = sub_21A6D78B4(a1, v40, 1918980207);
                                    if ((_DWORD)v24 == -6727 || (v2 = v24, !(_DWORD)v24) || (_DWORD)v24 == -5)
                                    {
                                      v25 = sub_21A6D78B4(a1, v40, 1918980980);
                                      if ((_DWORD)v25 == -6727 || (v2 = v25, !(_DWORD)v25) || (_DWORD)v25 == -5)
                                      {
                                        v26 = sub_21A6D78B4(a1, v40, 1918128974);
                                        if ((_DWORD)v26 == -6727 || (v2 = v26, !(_DWORD)v26) || (_DWORD)v26 == -5)
                                        {
                                          v27 = sub_21A6D78B4(a1, v40, 1633895790);
                                          if ((_DWORD)v27 == -6727 || (v2 = v27, !(_DWORD)v27) || (_DWORD)v27 == -5)
                                          {
                                            v28 = sub_21A6D78B4(a1, v40, 2003060332);
                                            if ((_DWORD)v28 == -6727 || (v2 = v28, !(_DWORD)v28) || (_DWORD)v28 == -5)
                                            {
                                              v29 = sub_21A6D78B4(a1, v40, 2003061875);
                                              if ((_DWORD)v29 == -6727 || (v2 = v29, !(_DWORD)v29) || (_DWORD)v29 == -5)
                                              {
                                                v30 = sub_21A6D78B4(a1, v40, 1683440723);
                                                if ((_DWORD)v30 == -6727
                                                  || (v2 = v30, !(_DWORD)v30)
                                                  || (_DWORD)v30 == -5)
                                                {
                                                  v31 = sub_21A6D78B4(a1, v40, 1685538412);
                                                  if ((_DWORD)v31 == -6727
                                                    || (v2 = v31, !(_DWORD)v31)
                                                    || (_DWORD)v31 == -5)
                                                  {
                                                    v32 = sub_21A6D78B4(a1, v40, 1918977644);
                                                    if ((_DWORD)v32 == -6727
                                                      || (v2 = v32, !(_DWORD)v32)
                                                      || (_DWORD)v32 == -5)
                                                    {
                                                      v33 = sub_21A6D78B4(a1, v40, 1918978353);
                                                      if ((_DWORD)v33 == -6727
                                                        || (v2 = v33, !(_DWORD)v33)
                                                        || (_DWORD)v33 == -5)
                                                      {
                                                        v34 = sub_21A6D78B4(a1, v40, 1918976373);
                                                        if ((_DWORD)v34 == -6727
                                                          || (v2 = v34, !(_DWORD)v34)
                                                          || (_DWORD)v34 == -5)
                                                        {
                                                          v35 = sub_21A6D78B4(a1, v40, 1918980965);
                                                          if ((_DWORD)v35 == -6727
                                                            || (v2 = v35, !(_DWORD)v35)
                                                            || (_DWORD)v35 == -5)
                                                          {
                                                            v36 = sub_21A6D78B4(a1, v40, 1918977586);
                                                            if ((_DWORD)v36 == -6727
                                                              || (v2 = v36, !(_DWORD)v36)
                                                              || (_DWORD)v36 == -5)
                                                            {
                                                              v37 = sub_21A6D78B4(a1, v40, 1918978354);
                                                              if (!(_DWORD)v37 || (v2 = v37, (_DWORD)v37 == -6727))
                                                              {
                                                                v38 = sub_21A6D78B4(a1, v40, 1918981426);
                                                                if ((_DWORD)v38 == -6727
                                                                  || (v2 = v38, !(_DWORD)v38)
                                                                  || (_DWORD)v38 == -5)
                                                                {
                                                                  v39 = sub_21A6D78B4(a1, v40, 1918980914);
                                                                  if ((_DWORD)v39 == -6727
                                                                    || (v2 = v39, !(_DWORD)v39)
                                                                    || (_DWORD)v39 == -5)
                                                                  {
                                                                    v2 = sub_21A6D78B4(a1, v40, 1918976873);
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (cf)
    CFRelease(cf);
  return v2;
}

uint64_t sub_21A6D31A4(uint64_t a1, CFTypeRef *a2)
{
  uint64_t v2;
  const __CFAllocator *v5;
  __CFDictionary *Mutable;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::string *v12;
  std::string *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  CFTypeRef v19;
  std::string __str;
  std::string v22;
  std::string v23;

  memset(&v23, 0, sizeof(v23));
  memset(&v22, 0, sizeof(v22));
  v2 = 4294967292;
  if (!a1 || !a2)
    goto LABEL_24;
  if (!sub_21A6AF0B4(*(_QWORD *)(a1 + 8), 1835626098))
  {
    v2 = 0;
    goto LABEL_24;
  }
  sub_21A6AF410(*(_QWORD *)(a1 + 8));
  v5 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
  if (!Mutable)
  {
    v2 = 4294967293;
    goto LABEL_24;
  }
  v2 = sub_21A6B8330(*(_QWORD *)(a1 + 8), Mutable);
  if (!(_DWORD)v2)
  {
    sub_21A6AFF90(*(_QWORD *)(a1 + 8), 0, v7, v8, v9, v10, v11, &__str);
    std::string::operator=(&v23, &__str);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    std::string::operator=(&v22, (const std::string *)(*(_QWORD *)(a1 + 8) + 120));
    v12 = (v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? &v23
        : (std::string *)v23.__r_.__value_.__r.__words[0];
    v13 = (v22.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? &v22
        : (std::string *)v22.__r_.__value_.__r.__words[0];
    v2 = sub_21A6731E4(*(_QWORD *)(a1 + 16), 4u, 60000, (char *)v12, (char *)v13, a2, (uint64_t)CFSTR("acpd.parseDirtyPlist"), (uint64_t)"%ks=%O", (uint64_t)"drTY");
    if (!(_DWORD)v2)
    {
      v19 = *a2;
      if (!*a2)
        goto LABEL_21;
      v2 = sub_21A692FEC(v5, a2, (uint64_t)"{%##O%ks=%O}", v14, v15, v16, v17, v18, (uint64_t)v19);
      if ((_DWORD)v2)
        goto LABEL_22;
      if (*a2)
      {
        CFRelease(v19);
        v2 = 0;
      }
      else
      {
LABEL_21:
        v2 = 4294967293;
      }
    }
  }
LABEL_22:
  CFRelease(Mutable);
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v22.__r_.__value_.__l.__data_);
LABEL_24:
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v23.__r_.__value_.__l.__data_);
  return v2;
}

void sub_21A6D3378(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a17 < 0)
    operator delete(__p);
  if (a29 < 0)
    operator delete(a24);
  _Unwind_Resume(exception_object);
}

uint64_t sub_21A6D33C0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  std::string *v9;
  std::string *v10;
  std::string __str;
  std::string v13;
  std::string v14;

  memset(&v14, 0, sizeof(v14));
  memset(&v13, 0, sizeof(v13));
  v2 = 4294967292;
  if (a1 && a2)
  {
    if (sub_21A6AF0B4(*(_QWORD *)(a1 + 8), 1835626098))
    {
      sub_21A6AFF90(*(_QWORD *)(a1 + 8), 0, v4, v5, v6, v7, v8, &__str);
      std::string::operator=(&v14, &__str);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
      std::string::operator=(&v13, (const std::string *)(*(_QWORD *)(a1 + 8) + 120));
      if ((v14.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v9 = &v14;
      else
        v9 = (std::string *)v14.__r_.__value_.__r.__words[0];
      if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v10 = &v13;
      else
        v10 = (std::string *)v13.__r_.__value_.__r.__words[0];
      v2 = sub_21A6731E4(*(_QWORD *)(a1 + 16), 0, 60000, (char *)v9, (char *)v10, 0, (uint64_t)CFSTR("acpd.setDirtyPlist"), (uint64_t)"%ks=%O%ks=%b", (uint64_t)"drTY");
      if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v13.__r_.__value_.__l.__data_);
    }
    else
    {
      v2 = 0;
    }
  }
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__r_.__value_.__l.__data_);
  return v2;
}

void sub_21A6D34F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  uint64_t v25;

  if (a19 < 0)
    operator delete(__p);
  if (*(char *)(v25 - 33) < 0)
    operator delete(*(void **)(v25 - 56));
  _Unwind_Resume(exception_object);
}

uint64_t sub_21A6D3540(uint64_t a1)
{
  const __CFAllocator *v2;
  __CFArray *Mutable;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  CFIndex Count;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  const char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  std::string *v35;
  uint64_t v36;
  std::string *v37;
  char *BytePtr;
  CFIndex Length;
  uint64_t v41;
  std::string __str;
  std::string v43;
  std::string v44;
  CFTypeRef cf;
  CFDataRef theData;
  CFTypeRef v47;
  __CFString *v48;

  v47 = 0;
  v48 = 0;
  cf = 0;
  theData = 0;
  memset(&v44, 0, sizeof(v44));
  memset(&v43, 0, sizeof(v43));
  v2 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD690]);
  if (Mutable)
  {
    v9 = sub_21A6B8120(*(_QWORD *)(a1 + 8), Mutable);
    if (!(_DWORD)v9)
    {
      v9 = sub_21A693A8C(v2, Mutable, (uint64_t)"%C", v4, v5, v6, v7, v8, 1668573549);
      if (!(_DWORD)v9)
      {
        v9 = sub_21A693A8C(v2, Mutable, (uint64_t)"%C", v10, v11, v12, v13, v14, 1818449523);
        if (!(_DWORD)v9)
        {
          Count = CFArrayGetCount(Mutable);
          v9 = sub_21A692FEC(v2, (CFTypeRef *)&v48, (uint64_t)"{}", v16, v17, v18, v19, v20, v41);
          if (!(_DWORD)v9)
          {
            if (Count < 1)
            {
LABEL_21:
              v9 = sub_21A692394(v2, v48, (CFTypeRef *)&theData);
              if (!(_DWORD)v9)
              {
                sub_21A6AFF90(*(_QWORD *)(a1 + 8), 0, v30, v31, v32, v33, v34, &__str);
                std::string::operator=(&v44, &__str);
                if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(__str.__r_.__value_.__l.__data_);
                v35 = &v43;
                std::string::operator=(&v43, (const std::string *)(*(_QWORD *)(a1 + 8) + 120));
                v36 = *(_QWORD *)(a1 + 16);
                if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v37 = &v44;
                else
                  v37 = (std::string *)v44.__r_.__value_.__r.__words[0];
                if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                  v35 = (std::string *)v43.__r_.__value_.__r.__words[0];
                BytePtr = (char *)CFDataGetBytePtr(theData);
                Length = CFDataGetLength(theData);
                v9 = sub_21A6727F0(v36, 0, 60000, (char *)v37, (char *)v35, 1685214297, BytePtr, Length);
              }
            }
            else
            {
              v26 = 0;
              while (1)
              {
                __str.__r_.__value_.__s.__data_[0] = 0;
                sub_21A693B94((const __CFString *)Mutable, (uint64_t)&cf, (UInt8 *)"[*]:utf8", v21, v22, v23, v24, v25, v26);
                v9 = v27;
                if ((_DWORD)v27)
                  break;
                if (!cf)
                {
                  v9 = 4294960569;
                  break;
                }
                v28 = sub_21A6BB08C((const char *)cf);
                free((void *)cf);
                cf = 0;
                if ((_DWORD)v28)
                {
                  if (sub_21A6B7764(*(_QWORD *)(a1 + 8), (int)v28))
                  {
                    v29 = sub_21A6B5A34(*(_QWORD *)(a1 + 8), (uint64_t)v28, &v47, &__str);
                    v9 = v29;
                    if ((_DWORD)v28 != 1349676902 || (_DWORD)v29 != -6720)
                    {
                      if ((_DWORD)v29)
                        break;
                      v9 = sub_21A693A8C(v2, (__CFArray *)v48, (uint64_t)"%kC=%O", v21, v22, v23, v24, v25, (uint64_t)v28);
                      if (__str.__r_.__value_.__s.__data_[0])
                      {
                        if (v47)
                          CFRelease(v47);
                        v47 = 0;
                      }
                      if ((_DWORD)v9)
                        break;
                    }
                  }
                }
                if (Count == ++v26)
                  goto LABEL_21;
              }
            }
          }
        }
      }
    }
  }
  else
  {
    v9 = 4294960568;
  }
  if (v48)
    CFRelease(v48);
  if (theData)
    CFRelease(theData);
  if (cf)
    CFRelease(cf);
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v43.__r_.__value_.__l.__data_);
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v44.__r_.__value_.__l.__data_);
  return v9;
}

void sub_21A6D384C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a17 < 0)
    operator delete(__p);
  if (a29 < 0)
    operator delete(a24);
  _Unwind_Resume(exception_object);
}

uint64_t sub_21A6D3898(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  __CFData *MutableCopy;
  uint64_t v9;
  _QWORD *v10;
  const std::string *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  std::string *v17;
  std::string *v18;
  std::string *v19;
  uint64_t v21;
  unint64_t v22;
  int v23;
  uint64_t v24;
  BOOL v25;
  int v27;
  BOOL v28;
  int v29;
  unsigned __int16 v31;
  unsigned int Length;
  CFIndex v38;
  char *MutableBytePtr;
  _BOOL4 v40;
  unsigned int v41;
  const __CFAllocator *allocator;
  char v43;
  std::string __str;
  std::string v45;
  std::string v46;
  CFTypeRef cf;
  CFTypeRef v48;
  uint64_t v49;
  unint64_t v50;
  int8x8_t v51[2];
  uint64_t v52;
  unsigned int v53;

  MutableCopy = 0;
  v49 = 0;
  v50 = 0;
  cf = 0;
  v48 = 0;
  memset(&v46, 0, sizeof(v46));
  memset(&v45, 0, sizeof(v45));
  v9 = 4294967292;
  v10 = *(_QWORD **)(a1 + 16);
  if (!v10)
    goto LABEL_18;
  v12 = *(const std::string **)(a1 + 8);
  if (!v12)
    goto LABEL_18;
  sub_21A6AFF90(*(_QWORD *)(a1 + 8), 0, a4, a5, a6, a7, a8, &__str);
  std::string::operator=(&v46, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  std::string::operator=(&v45, v12 + 5);
  if ((v46.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v17 = &v46;
  else
    v17 = (std::string *)v46.__r_.__value_.__r.__words[0];
  if ((v45.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v18 = &v45;
  else
    v18 = (std::string *)v45.__r_.__value_.__r.__words[0];
  v9 = sub_21A671674((uint64_t)v10, (char *)v17, v18, 0, v13, v14, v15, v16);
  if ((_DWORD)v9
    || ((v45.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
      ? (v19 = &v45)
      : (v19 = (std::string *)v45.__r_.__value_.__r.__words[0]),
        (v9 = sub_21A67295C((uint64_t)v10, 4u, (const char *)v19, 0x15u, 0xFFFFFFFFuLL, 0), (_DWORD)v9)
     || (v9 = sub_21A672688((uint64_t)v10, 0, 60000, 0), (_DWORD)v9)))
  {
LABEL_17:
    MutableCopy = 0;
    goto LABEL_18;
  }
  sub_21A6B92F4((uint64_t)v12, &v49, &v50);
  if (!v50)
  {
    MutableCopy = 0;
    v9 = 0;
    goto LABEL_18;
  }
  v21 = 0;
  v22 = 0;
  allocator = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  do
  {
    v43 = 0;
    v23 = *(_DWORD *)(v49 + v21);
    __str.__r_.__value_.__r.__words[0] = 0;
    v24 = sub_21A6D4DDC(v23, &__str);
    v9 = v24;
    if ((_DWORD)v24)
      v25 = 1;
    else
      v25 = __str.__r_.__value_.__r.__words[0] == 0;
    if (v25)
    {
      if ((_DWORD)v24 != -5 && (_DWORD)v24 != 0)
        goto LABEL_17;
    }
    else if (*(_BYTE *)(__str.__r_.__value_.__r.__words[0] + 24))
    {
      goto LABEL_120;
    }
    v27 = *(_DWORD *)(v49 + v21);
    if (v27 > 1918979427)
    {
      if (v27 > 1918980964)
      {
        if (v27 <= 1918981954)
        {
          if (((v27 - 1918980965) > 0xF || ((1 << (v27 - 101)) & 0x8041) == 0) && v27 != 1918981426)
            goto LABEL_97;
          goto LABEL_96;
        }
        v28 = (v27 - 1918981955) <= 0xA && ((1 << (v27 - 67)) & 0x405) != 0 || v27 == 2003061875;
        v29 = 2003060332;
        goto LABEL_91;
      }
      if (v27 > 1918980206)
      {
        v28 = v27 == 1918980207 || v27 == 1918980719;
        v31 = 21298;
      }
      else
      {
        v28 = v27 == 1918979428 || v27 == 1918979445;
        v31 = 20077;
      }
      goto LABEL_90;
    }
    if (v27 > 1918977344)
    {
      if (v27 > 1918978352)
      {
        if ((v27 - 1918978353) >= 2 && v27 != 1918978900)
          goto LABEL_97;
        goto LABEL_96;
      }
      v28 = v27 == 1918977345 || v27 == 1918977586;
      v31 = 18028;
      goto LABEL_90;
    }
    if (v27 > 1918128973)
    {
      v28 = (v27 - 1918976833) <= 0x31 && ((1 << (v27 - 65)) & 0x2098000000001) != 0
         || v27 == 1918128974;
      v31 = 16757;
LABEL_90:
      v29 = v31 | 0x72610000;
      goto LABEL_91;
    }
    v28 = v27 == 1633895790 || v27 == 1683440723;
    v29 = 1685538412;
LABEL_91:
    if (!v28 && v27 != v29)
      goto LABEL_97;
LABEL_96:
    if (sub_21A6AF0B4(*(_QWORD *)(a1 + 8), 2003390540))
      goto LABEL_120;
LABEL_97:
    if (!sub_21A6D4F54(a1, v27) || sub_21A6B5A34((uint64_t)v12, *(unsigned int *)(v49 + v21), &v48, &v43))
      goto LABEL_120;
    if (!v48)
    {
      v9 = 4294960559;
      goto LABEL_17;
    }
    v9 = sub_21A674314(*(_DWORD *)(v49 + v21), (const __CFString *)v48, 1, (CFDataRef *)&cf);
    if ((_DWORD)v9)
      goto LABEL_17;
    LODWORD(v52) = *(_DWORD *)(v49 + v21);
    HIDWORD(v52) = *(_DWORD *)(v49 + v21 + 8);
    Length = CFDataGetLength((CFDataRef)cf);
    v53 = Length;
    if (Length)
    {
      v38 = Length;
    }
    else
    {
      CFRelease(cf);
      cf = 0;
      __str.__r_.__value_.__r.__words[0] = 0;
      v9 = sub_21A671008(v52, (uint64_t **)&__str);
      if ((_DWORD)v9)
        goto LABEL_17;
      if (*(_DWORD *)(__str.__r_.__value_.__r.__words[0] + 4) == 13)
        goto LABEL_120;
      v38 = v53;
    }
    if (cf)
    {
      MutableCopy = CFDataCreateMutableCopy(allocator, v38, (CFDataRef)cf);
      CFRelease(cf);
      cf = 0;
      if (!MutableCopy)
      {
        v9 = 0;
        goto LABEL_17;
      }
      v38 = v53;
    }
    else
    {
      MutableCopy = 0;
    }
    if (v38)
      MutableBytePtr = (char *)CFDataGetMutableBytePtr(MutableCopy);
    else
      MutableBytePtr = 0;
    v9 = sub_21A672A7C((uint64_t)v10, 16, (unsigned int *)&v52, MutableBytePtr);
    if ((_DWORD)v9)
      goto LABEL_18;
    if (v43)
    {
      if (v48)
        CFRelease(v48);
      v48 = 0;
    }
    if (MutableCopy)
      CFRelease(MutableCopy);
LABEL_120:
    ++v22;
    v21 += 12;
  }
  while (v22 < v50);
  v52 = 1633896014;
  v53 = 0;
  v9 = sub_21A672A7C((uint64_t)v10, 16, (unsigned int *)&v52, 0);
  if ((_DWORD)v9)
    goto LABEL_17;
  v40 = sub_21A6AF0B4((uint64_t)v12, 1383287118);
  v53 = 0;
  v41 = v40 ? 1633899081 : 1633899074;
  v52 = v41;
  v9 = sub_21A672A7C((uint64_t)v10, 16, (unsigned int *)&v52, 0);
  if ((_DWORD)v9)
    goto LABEL_17;
  v9 = sub_21A672B28((uint64_t)v10, 16, 0);
  if ((_DWORD)v9)
    goto LABEL_17;
  v9 = sub_21A6733A8(v10, 0x7FFFFFFF);
  if ((_DWORD)v9)
    goto LABEL_17;
  MutableCopy = 0;
  do
    v9 = sub_21A672BA4((uint64_t)v10, 0, 60000, v51);
  while (!(_DWORD)v9 && v51[0].i32[0]);
LABEL_18:
  if (cf)
    CFRelease(cf);
  if (MutableCopy)
    CFRelease(MutableCopy);
  sub_21A6720D8((uint64_t)v10);
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v45.__r_.__value_.__l.__data_);
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v46.__r_.__value_.__l.__data_);
  return v9;
}

void sub_21A6D3ED0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a22 < 0)
    operator delete(__p);
  if (a28 < 0)
    operator delete(a23);
  _Unwind_Resume(exception_object);
}

uint64_t sub_21A6D3F24(uint64_t a1)
{
  if (a1)
    return sub_21A6B8640(*(_QWORD *)(a1 + 8));
  else
    return 4294967292;
}

uint64_t sub_21A6D3F38(uint64_t a1, _BYTE *a2)
{
  uint64_t result;
  uint64_t v5;
  char v6;

  if (!a1)
    return 4294967292;
  result = 4294967292;
  if (a2)
  {
    v5 = *(_QWORD *)(a1 + 8);
    if (v5)
    {
      v6 = sub_21A6B8780(v5);
      result = 0;
      *a2 = v6;
    }
  }
  return result;
}

uint64_t sub_21A6D3F88(uint64_t a1, _BYTE *a2)
{
  uint64_t result;
  uint64_t v4;

  if (!a1)
    return 4294967292;
  result = 4294967292;
  if (a2)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4)
    {
      result = 0;
      *a2 = *(_BYTE *)(v4 + 226);
    }
  }
  return result;
}

uint64_t sub_21A6D3FB8(uint64_t a1, int a2, _BYTE *a3)
{
  char *v5;
  _BYTE v7[5];

  v5 = sub_21A6711EC(a2, v7);
  return sub_21A6D4000(a1, v5, a3);
}

uint64_t sub_21A6D4000(uint64_t a1, char *a2, _BYTE *a3)
{
  uint64_t v4;
  uint64_t v5;
  void *__p[2];
  char v8;
  BOOL v9;

  if (!a1)
    return 4294967292;
  v4 = 4294967292;
  if (a3)
  {
    v5 = *(_QWORD *)(a1 + 8);
    if (v5)
    {
      v9 = 0;
      sub_21A6CE0F0(__p, a2);
      v4 = sub_21A6BB1CC(v5, (uint64_t)__p, &v9);
      if (v8 < 0)
        operator delete(__p[0]);
      *a3 = v9;
    }
  }
  return v4;
}

void sub_21A6D4084(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_21A6D40A0(uint64_t a1, char *a2, const __CFString *a3)
{
  uint64_t v4;
  uint64_t v5;
  void *__p[2];
  char v8;

  if (!a1)
    return 4294960591;
  v4 = *(_QWORD *)(a1 + 8);
  sub_21A6CE0F0(__p, a2);
  v5 = sub_21A6B2DEC(v4, (uint64_t)__p, a3, 0);
  if (v8 < 0)
    operator delete(__p[0]);
  return v5;
}

void sub_21A6D4108(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_21A6D4124(uint64_t a1, char *a2, int a3)
{
  uint64_t v4;
  uint64_t v5;
  void *__p[2];
  char v8;

  if (!a1)
    return 4294960591;
  v4 = *(_QWORD *)(a1 + 8);
  sub_21A6CE0F0(__p, a2);
  v5 = sub_21A6B38E4(v4, (uint64_t)__p, a3, 0);
  if (v8 < 0)
    operator delete(__p[0]);
  return v5;
}

void sub_21A6D418C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_21A6D41A8(uint64_t a1, char *a2, int a3)
{
  uint64_t v4;
  uint64_t v5;
  void *__p[2];
  char v8;

  if (!a1)
    return 4294960591;
  v4 = *(_QWORD *)(a1 + 8);
  sub_21A6CE0F0(__p, a2);
  v5 = sub_21A6B79C0(v4, (uint64_t)__p, a3, 0);
  if (v8 < 0)
    operator delete(__p[0]);
  return v5;
}

void sub_21A6D4210(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_21A6D422C(uint64_t a1, int a2, int a3)
{
  if (a1)
    return sub_21A6AF140(*(_QWORD *)(a1 + 8), a2, a3, 0);
  else
    return 4294960591;
}

uint64_t sub_21A6D4244(uint64_t a1, char *a2, const __CFString *a3)
{
  uint64_t v4;
  uint64_t v5;
  void *__p[2];
  char v8;

  if (!a1)
    return 4294960591;
  v4 = *(_QWORD *)(a1 + 8);
  sub_21A6CE0F0(__p, a2);
  v5 = sub_21A6B2DEC(v4, (uint64_t)__p, a3, 2);
  if (v8 < 0)
    operator delete(__p[0]);
  return v5;
}

void sub_21A6D42AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_21A6D42C8(uint64_t a1, int a2, const __CFString *a3)
{
  char *v5;
  _BYTE v7[5];

  v5 = sub_21A6711EC(a2, v7);
  return sub_21A6D40A0(a1, v5, a3);
}

uint64_t sub_21A6D4310(uint64_t a1, int a2, int a3)
{
  if (a1)
    return sub_21A6AFE60(*(_QWORD *)(a1 + 8), a2, a3, 0);
  else
    return 4294960591;
}

uint64_t sub_21A6D4328(uint64_t a1, char *a2, CFMutableDictionaryRef *a3)
{
  uint64_t v4;
  uint64_t v5;
  void *__p[2];
  char v8;

  if (!a1)
    return 4294960591;
  v4 = *(_QWORD *)(a1 + 8);
  sub_21A6CE0F0(__p, a2);
  v5 = sub_21A6B44B4(v4, (uint64_t)__p, a3, 0);
  if (v8 < 0)
    operator delete(__p[0]);
  return v5;
}

void sub_21A6D4390(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_21A6D43AC(uint64_t a1, char *a2, CFMutableDictionaryRef *a3)
{
  uint64_t v4;
  uint64_t v5;
  void *__p[2];
  char v8;

  if (!a1)
    return 4294960591;
  v4 = *(_QWORD *)(a1 + 8);
  sub_21A6CE0F0(__p, a2);
  v5 = sub_21A6B44B4(v4, (uint64_t)__p, a3, 2);
  if (v8 < 0)
    operator delete(__p[0]);
  return v5;
}

void sub_21A6D4414(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_21A6D4430(uint64_t a1, int a2, CFMutableDictionaryRef *a3)
{
  char *v5;
  _BYTE v7[5];

  v5 = sub_21A6711EC(a2, v7);
  return sub_21A6D4328(a1, v5, a3);
}

uint64_t sub_21A6D4478(uint64_t a1, int a2, void *a3)
{
  if (a1)
    return sub_21A6AD02C(*(_QWORD *)(a1 + 8), a2, a3, 0);
  else
    return 4294960591;
}

uint64_t sub_21A6D4490(uint64_t a1, char *a2, void *a3)
{
  uint64_t v4;
  uint64_t v5;
  void *__p[2];
  char v8;

  if (!a1)
    return 4294960591;
  v4 = *(_QWORD *)(a1 + 8);
  sub_21A6CE0F0(__p, a2);
  v5 = sub_21A6B77DC(v4, (uint64_t)__p, a3, 0);
  if (v8 < 0)
    operator delete(__p[0]);
  return v5;
}

void sub_21A6D44F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_21A6D4514(uint64_t a1, int a2, _BYTE *a3)
{
  uint64_t result;
  BOOL v5;

  if (!a1)
    return 4294960591;
  v5 = 0;
  result = sub_21A6B7A3C(*(_QWORD *)(a1 + 8), a2, &v5, 0);
  *a3 = v5;
  return result;
}

uint64_t sub_21A6D4560(uint64_t a1, int a2, _BYTE *a3)
{
  uint64_t result;
  BOOL v5;

  if (!a1)
    return 4294960591;
  v5 = 0;
  result = sub_21A6B7A3C(*(_QWORD *)(a1 + 8), a2, &v5, 2);
  *a3 = v5;
  return result;
}

uint64_t sub_21A6D45AC(uint64_t a1, char *a2, _BYTE *a3)
{
  uint64_t v3;
  uint64_t v5;
  void *__p[2];
  char v8;
  BOOL v9;

  v3 = 4294960591;
  if (a1 && a3)
  {
    v9 = 0;
    v5 = *(_QWORD *)(a1 + 8);
    sub_21A6CE0F0(__p, a2);
    v3 = sub_21A6B79E0(v5, (uint64_t)__p, &v9, 0);
    if (v8 < 0)
      operator delete(__p[0]);
    *a3 = v9;
  }
  return v3;
}

void sub_21A6D4620(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

CFStringRef sub_21A6D4640(unsigned int a1)
{
  UInt8 bytes[4];

  if (!a1)
    return 0;
  *(_DWORD *)bytes = bswap32(a1);
  return CFStringCreateWithBytes((CFAllocatorRef)*MEMORY[0x24BDBD240], bytes, 4, 0, 0);
}

uint64_t sub_21A6D468C(uint64_t a1, const __CFArray **a2)
{
  if (a1)
    return sub_21A6BB974(*(_QWORD *)(a1 + 8), a2);
  else
    return 4294960591;
}

BOOL sub_21A6D46A0(_BOOL8 result)
{
  if (result)
    return sub_21A6BB9F4(*(_QWORD *)(result + 8));
  return result;
}

uint64_t sub_21A6D46B0(uint64_t result)
{
  if (result)
    return sub_21A6AC45C(*(_QWORD *)(result + 8));
  return result;
}

uint64_t sub_21A6D46C0(uint64_t result)
{
  if (result)
    return sub_21A6BBA4C(*(_QWORD *)(result + 8));
  return result;
}

uint64_t sub_21A6D46D0(uint64_t result, int a2)
{
  if (result)
    return sub_21A6BBAB4(*(_QWORD *)(result + 8), a2 != 0);
  return result;
}

uint64_t sub_21A6D46E8(uint64_t a1, _QWORD *a2)
{
  if (a1)
    return sub_21A6B8808(*(_QWORD *)(a1 + 8), a2);
  else
    return 4294960591;
}

uint64_t sub_21A6D46FC(uint64_t a1, CFMutableDictionaryRef *a2)
{
  if (a1)
    return sub_21A6B8A54(*(_QWORD *)(a1 + 8), a2);
  else
    return 4294960591;
}

uint64_t sub_21A6D4710(uint64_t a1, CFMutableDictionaryRef *a2)
{
  if (a1)
    return sub_21A6B8AD4(*(_QWORD *)(a1 + 8), a2);
  else
    return 4294960591;
}

BOOL sub_21A6D4724(_BOOL8 result, int a2)
{
  if (result)
    return sub_21A6AF0B4(*(_QWORD *)(result + 8), a2);
  return result;
}

__CFArray *sub_21A6D4740(__CFArray *result)
{
  if (result)
    return sub_21A6B801C(*((_QWORD *)result + 1));
  return result;
}

BOOL sub_21A6D4750(_BOOL8 result, int a2, BOOL *a3)
{
  if (result)
    return sub_21A6CDB80(*(_QWORD *)(result + 8), a2, a3, 0);
  return result;
}

uint64_t sub_21A6D4764(uint64_t result)
{
  if (result)
    return sub_21A6CDA8C(*(_QWORD *)(result + 8));
  return result;
}

uint64_t sub_21A6D4774(uint64_t a1, int a2)
{
  if (a1)
    return sub_21A6CDC84(*(_QWORD *)(a1 + 8), a2);
  else
    return 4294960591;
}

uint64_t sub_21A6D4788(uint64_t a1, int a2)
{
  if (a1)
    return sub_21A6CDD80(*(_QWORD *)(a1 + 8), a2);
  else
    return 4294960591;
}

uint64_t sub_21A6D479C(uint64_t a1, int *a2, unint64_t a3, _QWORD *a4, _QWORD *a5)
{
  int *v7;
  uint64_t v9;
  int v10;
  uint64_t result;

  v7 = a2;
  *a4 = 0;
  *a5 = 0;
  if (a2)
  {
    if (a3 <= 1)
      v9 = 1;
    else
      v9 = a3;
    do
    {
      v10 = *v7++;
      result = sub_21A6EB0B0(*(_QWORD *)(a1 + 8), v10, (uint64_t)a4, (uint64_t)a5);
      --v9;
    }
    while (v9);
  }
  else
  {
    do
      result = sub_21A6EB0B0(*(_QWORD *)(a1 + 8), *(int *)((char *)dword_2550EF7F0 + (_QWORD)v7++), (uint64_t)a4, (uint64_t)a5);
    while (v7 != (int *)1200);
  }
  return result;
}

uint64_t sub_21A6D4830(uint64_t a1, const __CFString *theArray, __CFArray **a3)
{
  uint64_t v3;
  size_t Count;
  unint64_t v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const __CFAllocator *v19;
  CFMutableArrayRef Mutable;
  __CFArray *v21;
  unint64_t v22;
  uint64_t v23;
  CFStringRef v24;
  CFStringRef v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  CFStringRef v31;
  CFStringRef v32;
  CFStringRef v33;
  int v34;
  BOOL v35;
  int v36;
  uint64_t v38;
  CFIndex capacity;
  void *v41;

  v41 = 0;
  v3 = 4294960591;
  if (!a1 || !a3)
    return v3;
  capacity = 0;
  if (theArray && (Count = CFArrayGetCount((CFArrayRef)theArray)) != 0)
  {
    v8 = Count;
    v9 = (int *)malloc_type_calloc(Count, 4uLL, 0x100004052888210uLL);
    v15 = v9;
    if (!v9)
    {
LABEL_42:
      v3 = 4294960568;
      goto LABEL_49;
    }
    v16 = 0;
    v17 = (uint64_t)v9;
    do
    {
      sub_21A693B94(theArray, v17, (UInt8 *)"[*]:code", v10, v11, v12, v13, v14, v16);
      if ((_DWORD)v18)
      {
        v3 = v18;
        goto LABEL_49;
      }
      ++v16;
      v17 += 4;
    }
    while (v8 != v16);
    sub_21A6D479C(a1, v15, v8, &v41, &capacity);
    free(v15);
  }
  else
  {
    sub_21A6D479C(a1, 0, 0, &v41, &capacity);
  }
  if (!capacity)
  {
    v15 = 0;
    v3 = 4294960569;
    goto LABEL_49;
  }
  v19 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], capacity, MEMORY[0x24BDBD690]);
  if (!Mutable)
  {
    v15 = 0;
    goto LABEL_42;
  }
  v21 = Mutable;
  if (!capacity)
  {
LABEL_40:
    v3 = 0;
    v15 = 0;
    *a3 = v21;
    goto LABEL_49;
  }
  v22 = 0;
  v23 = 4;
  while (1)
  {
    v24 = sub_21A6D4640(*(_DWORD *)((char *)v41 + v23 - 4));
    v25 = sub_21A6D4640(*(_DWORD *)((char *)v41 + v23));
    v31 = v25;
    if ((*(_DWORD *)((char *)v41 + v23) - 1732604481) < 8)
    {
      v32 = v25;
      goto LABEL_20;
    }
    v33 = CFStringCreateWithFormat(v19, 0, CFSTR("vErr.%@"), v25);
    if (!v33)
      break;
    v32 = v33;
    if (v31)
      CFRelease(v31);
LABEL_20:
    v34 = *(_DWORD *)((char *)v41 + v23);
    if (v34 <= 1886741071)
    {
      v35 = v34 == 1849970259;
      v36 = 1869631063;
    }
    else
    {
      v35 = v34 == 1886741072 || v34 == 2002867022;
      v36 = 2002862918;
    }
    if (v35 || v34 == v36)
      v38 = sub_21A693A8C(v19, v21, (uint64_t)"{%kO=%O%kO=%O%kO=%C}", v26, v27, v28, v29, v30, (uint64_t)CFSTR("kValidationErrorKey_BSSetting"));
    else
      v38 = sub_21A693A8C(v19, v21, (uint64_t)"{%kO=%O%kO=%O}", v26, v27, v28, v29, v30, (uint64_t)CFSTR("kValidationErrorKey_BSSetting"));
    v3 = v38;
    if ((_DWORD)v38)
    {
      v31 = v32;
      if (!v24)
        goto LABEL_46;
      goto LABEL_45;
    }
    if (v24)
      CFRelease(v24);
    if (v32)
      CFRelease(v32);
    ++v22;
    v23 += 8;
    if (v22 >= capacity)
      goto LABEL_40;
  }
  v3 = 4294960568;
  if (v24)
LABEL_45:
    CFRelease(v24);
LABEL_46:
  if (v31)
    CFRelease(v31);
  CFRelease(v21);
  v15 = 0;
LABEL_49:
  if (v41)
  {
    free(v41);
    v41 = 0;
  }
  if (v15)
    free(v15);
  return v3;
}

uint64_t sub_21A6D4B5C(uint64_t a1, __CFArray **a2)
{
  return sub_21A6D4830(a1, 0, a2);
}

uint64_t sub_21A6D4B68(uint64_t a1, const char *a2, _QWORD *a3, uint64_t a4)
{
  if (a1 && a3)
    return sub_21A6F47C0(*(_QWORD *)(a1 + 8), a2, a3, a4);
  else
    return 4294967292;
}

uint64_t sub_21A6D4B80(int a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  BOOL v7;
  uint64_t *v8;
  uint64_t result;
  int v10;
  unsigned __int16 v11;

  if ((byte_2550F4D40 & 1) == 0)
  {
    sub_21A6F4694();
    byte_2550F4D40 = 1;
  }
  *a2 = 0;
  v4 = *(_QWORD *)(qword_2550F4E00 + 8);
  if (!v4)
    return 4294967291;
  v5 = qword_2550F4E00 + 8;
  do
  {
    v6 = *(_DWORD *)(v4 + 32);
    v7 = v6 < a1;
    if (v6 >= a1)
      v8 = (uint64_t *)v4;
    else
      v8 = (uint64_t *)(v4 + 8);
    if (!v7)
      v5 = v4;
    v4 = *v8;
  }
  while (*v8);
  if (v5 == qword_2550F4E00 + 8 || *(_DWORD *)(v5 + 32) > a1)
    return 4294967291;
  result = 4294967291;
  v10 = 6;
  switch(*(_DWORD *)(*(_QWORD *)(v5 + 40) + 8))
  {
    case 2:
      goto LABEL_30;
    case 3:
    case 6:
      v10 = 1;
      goto LABEL_30;
    case 4:
      v10 = 2;
      goto LABEL_30;
    case 5:
      v10 = 3;
      goto LABEL_30;
    case 7:
      v10 = 4;
      goto LABEL_30;
    case 8:
      v10 = 7;
      goto LABEL_30;
    case 9:
      if (a1 <= 1651722066)
      {
        if (a1 > 1651722052)
        {
          if (a1 != 1651722053)
          {
            if (a1 == 1651722062)
            {
LABEL_43:
              v10 = 12;
              goto LABEL_30;
            }
            v11 = 18256;
LABEL_42:
            if (a1 != (v11 | 0x62730000))
              return result;
            goto LABEL_43;
          }
        }
        else
        {
          if (a1 == 1633899617)
          {
            v10 = 15;
            goto LABEL_30;
          }
          if (a1 != 1651722051)
          {
            v11 = 18244;
            goto LABEL_42;
          }
        }
        v10 = 11;
        goto LABEL_30;
      }
      if (a1 <= 1702261835)
      {
        if (a1 == 1651722067)
        {
          v10 = 13;
          goto LABEL_30;
        }
        if (a1 != 1651724371 && a1 != 1651725139)
          return result;
        v10 = 10;
LABEL_30:
        result = 0;
        *a2 = v10;
        return result;
      }
      if (a1 <= 1886547537)
      {
        if (a1 == 1702261836)
        {
          v10 = 18;
        }
        else
        {
          if (a1 != 1886213217)
            return result;
          v10 = 14;
        }
        goto LABEL_30;
      }
      if (a1 == 1886547538)
      {
        v10 = 17;
        goto LABEL_30;
      }
      if (a1 == 2003061875)
      {
        v10 = 16;
        goto LABEL_30;
      }
      return result;
    case 0xB:
      v10 = 5;
      goto LABEL_30;
    case 0xC:
      v10 = 8;
      goto LABEL_30;
    case 0xD:
      v10 = 9;
      goto LABEL_30;
    default:
      return result;
  }
}

uint64_t sub_21A6D4DDC(int a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  BOOL v7;
  uint64_t *v8;
  uint64_t result;

  if ((byte_2550F4D40 & 1) == 0)
  {
    sub_21A6F4694();
    byte_2550F4D40 = 1;
  }
  if (!a2)
    return 4294967291;
  v4 = *(_QWORD *)(qword_2550F4E00 + 8);
  if (!v4)
    return 4294967291;
  v5 = qword_2550F4E00 + 8;
  do
  {
    v6 = *(_DWORD *)(v4 + 32);
    v7 = v6 < a1;
    if (v6 >= a1)
      v8 = (uint64_t *)v4;
    else
      v8 = (uint64_t *)(v4 + 8);
    if (!v7)
      v5 = v4;
    v4 = *v8;
  }
  while (*v8);
  if (v5 == qword_2550F4E00 + 8 || *(_DWORD *)(v5 + 32) > a1)
    return 4294967291;
  result = 0;
  *a2 = *(_QWORD *)(v5 + 40);
  return result;
}

uint64_t sub_21A6D4E7C(int a1, _DWORD *a2)
{
  uint64_t result;
  uint64_t v5;

  v5 = 0;
  result = 4294967292;
  if (a1)
  {
    if (a2)
    {
      result = sub_21A6D4DDC(a1, &v5);
      if (!(_DWORD)result)
      {
        if (v5)
        {
          result = 0;
          *a2 = *(_DWORD *)(v5 + 12);
        }
      }
    }
  }
  return result;
}

uint64_t sub_21A6D4ED8(int a1)
{
  unsigned int v2;

  v2 = 0;
  sub_21A6D4E7C(a1, &v2);
  return v2;
}

uint64_t sub_21A6D4F00(int a1, _DWORD *a2)
{
  uint64_t result;
  uint64_t v4;

  v4 = 0;
  if (!a2)
    return 4294967292;
  result = sub_21A6D4DDC(a1, &v4);
  if (!(_DWORD)result)
  {
    if (v4)
    {
      result = 0;
      *a2 = *(_DWORD *)(v4 + 32);
    }
  }
  return result;
}

BOOL sub_21A6D4F54(_BOOL8 result, int a2)
{
  uint64_t v3;

  if (result)
  {
    v3 = result;
    return sub_21A6B7764(*(_QWORD *)(result + 8), a2) || sub_21A6B7F50(*(_QWORD *)(v3 + 8), a2);
  }
  return result;
}

uint64_t sub_21A6D4F98(uint64_t result)
{
  uint64_t v1;

  v1 = 0;
  if ((_DWORD)result)
  {
    if (sub_21A6D4DDC(result, &v1) || !v1)
      return 0;
    else
      return *(unsigned int *)(v1 + 20);
  }
  return result;
}

uint64_t sub_21A6D4FD8(uint64_t a1, uint64_t a2, uint64_t a3, BOOL *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  std::string *v12;
  std::string *v13;
  uint64_t v14;
  uint64_t v15;
  int v17;
  const void *v18;
  char v19;
  std::string __str;
  std::string v21;
  std::string v22;
  CFStringRef v23;
  unint64_t v24;
  char *v25;

  v24 = 0;
  v25 = 0;
  v23 = 0;
  memset(&v22, 0, sizeof(v22));
  memset(&v21, 0, sizeof(v21));
  if (!a1)
    goto LABEL_13;
  v9 = *(_QWORD *)(a1 + 8);
  if (!v9)
  {
    v15 = 4294967279;
    goto LABEL_15;
  }
  if (!(_DWORD)a2)
  {
LABEL_13:
    v15 = 4294967292;
    goto LABEL_15;
  }
  sub_21A6AFF90(v9, 0, (uint64_t)a4, a5, a6, a7, a8, &__str);
  std::string::operator=(&v22, &__str);
  std::string::operator=(&v21, (const std::string *)(*(_QWORD *)(a1 + 8) + 120));
  if ((v22.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v12 = &v22;
  else
    v12 = (std::string *)v22.__r_.__value_.__r.__words[0];
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v13 = &v21;
  else
    v13 = (std::string *)v21.__r_.__value_.__r.__words[0];
  v14 = sub_21A6722F8(*(_QWORD *)(a1 + 16), 4, 60000, (char *)v12, (char *)v13, a2, &v25, &v24);
  v15 = v14;
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__str.__r_.__value_.__l.__data_);
    if ((_DWORD)v15)
      goto LABEL_15;
  }
  else if ((_DWORD)v14)
  {
    goto LABEL_15;
  }
  if (v25)
  {
    if (v24)
    {
      v15 = sub_21A673FCC(a2, (unsigned __int8 *)v25, v24, 1, &v23);
      if (!(_DWORD)v15)
      {
        if (a4)
        {
          v19 = 0;
          __str.__r_.__value_.__r.__words[0] = 0;
          v17 = sub_21A6B5A34(*(_QWORD *)(a1 + 8), a2, (CFTypeRef *)&__str.__r_.__value_.__l.__data_, &v19);
          v18 = (const void *)__str.__r_.__value_.__r.__words[0];
          if (v17 || !__str.__r_.__value_.__r.__words[0])
          {
            if (v17 == -5 || v17 == -6727)
              *a4 = 1;
          }
          else
          {
            *a4 = CFEqual(__str.__r_.__value_.__l.__data_, v23) == 0;
            v18 = (const void *)__str.__r_.__value_.__r.__words[0];
          }
          if (v19 && v18)
            CFRelease(v18);
        }
        v15 = sub_21A6AF354(*(_QWORD *)(a1 + 8), a2, v23, 2);
        if (!(_DWORD)v15)
        {
          CFRelease(v23);
          v23 = 0;
          v15 = sub_21A6AD43C(*(_QWORD *)(a1 + 8), a2, 0, 1);
        }
      }
    }
  }
LABEL_15:
  if (v23)
    CFRelease(v23);
  if (v25)
    free(v25);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v22.__r_.__value_.__l.__data_);
  return v15;
}

void sub_21A6D51F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a22 < 0)
    operator delete(__p);
  if (a28 < 0)
    operator delete(a23);
  _Unwind_Resume(exception_object);
}

uint64_t sub_21A6D523C(uint64_t a1, int a2)
{
  char v4[5];

  sub_21A6711EC(a2, v4);
  return sub_21A6D527C(a1, v4);
}

uint64_t sub_21A6D527C(uint64_t a1, const char *a2)
{
  uint64_t result;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v10 = 0;
  result = 4294967292;
  if (a1 && a2 && *a2)
  {
    v4 = sub_21A6BB08C(a2);
    if (sub_21A6B27A8(v4) && sub_21A6AF0B4(*(_QWORD *)(a1 + 8), 2003390540))
      v4 = 1466517097;
    result = sub_21A6D4DDC(v4, &v10);
    if (!(_DWORD)result)
    {
      if (*(_DWORD *)(v10 + 4))
      {
        result = sub_21A6D4F54(a1, v4);
        if ((_DWORD)result)
          return sub_21A6D4FD8(a1, *(unsigned int *)(v10 + 4), v5, 0, v6, v7, v8, v9);
      }
      else
      {
        return 4294967291;
      }
    }
  }
  return result;
}

uint64_t sub_21A6D5338(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v11;
  std::string *v12;
  std::string *v13;
  std::string __str;
  std::string v16;
  std::string v17;
  int v18;
  uint64_t v19;

  memset(&v17, 0, sizeof(v17));
  memset(&v16, 0, sizeof(v16));
  v8 = 4294967292;
  if (a1 && a2)
  {
    sub_21A6AFF90(*(_QWORD *)(a1 + 8), 0, a4, a5, a6, a7, a8, &__str);
    std::string::operator=(&v17, &__str);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    std::string::operator=(&v16, (const std::string *)(*(_QWORD *)(a1 + 8) + 120));
    v19 = 0;
    v18 = a2;
    if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v12 = &v17;
    else
      v12 = (std::string *)v17.__r_.__value_.__r.__words[0];
    if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v13 = &v16;
    else
      v13 = (std::string *)v16.__r_.__value_.__r.__words[0];
    v8 = sub_21A67306C(*(_QWORD *)(a1 + 16), 0, 60000, (char *)v12, (char *)v13, 1, (uint64_t)&v18, v11);
    if (!(_DWORD)v8)
    {
      if (a2 == 1633899078)
        sub_21A6B8590(*(_QWORD *)(a1 + 8));
      v8 = 0;
    }
  }
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v16.__r_.__value_.__l.__data_);
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v17.__r_.__value_.__l.__data_);
  return v8;
}

void sub_21A6D5450(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0)
    operator delete(__p);
  if (a27 < 0)
    operator delete(a22);
  _Unwind_Resume(exception_object);
}

uint64_t sub_21A6D5498(uint64_t a1, char *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v13;
  _BOOL4 v14;
  uint64_t v15;
  std::string *v16;
  std::string *v17;
  std::string *v18;
  std::string *v19;
  uint64_t v20;
  int64_t v21;
  char *p_p;
  unsigned int v23;
  std::string __str;
  unsigned int v25;
  void *__p;
  int64_t v27;
  uint64_t v28;
  uint64_t v29;
  std::string v30;
  std::string v31;

  memset(&v31, 0, sizeof(v31));
  memset(&v30, 0, sizeof(v30));
  v28 = 0;
  v29 = 0;
  __p = 0;
  v27 = 0;
  v25 = 0;
  if (!a1)
    goto LABEL_8;
  sub_21A6AFF90(*(_QWORD *)(a1 + 8), 0, a4, a5, a6, a7, a8, &__str);
  std::string::operator=(&v31, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0 && !v31.__r_.__value_.__r.__words[0]
    || (std::string::operator=(&v30, (const std::string *)(*(_QWORD *)(a1 + 8) + 120)),
        SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
    && !v30.__r_.__value_.__r.__words[0])
  {
LABEL_8:
    v11 = 4294967292;
    goto LABEL_9;
  }
  v11 = sub_21A6711AC((uint64_t)a2, a3, (_DWORD *)&v29 + 1, 0, 0, (int *)&v25, 0, 0, 0);
  if ((_DWORD)v11)
    goto LABEL_9;
  v11 = sub_21A6AD02C(*(_QWORD *)(a1 + 8), 1937326416, &v29, 0);
  if ((_DWORD)v11)
    goto LABEL_9;
  if ((_DWORD)v29 != HIDWORD(v29))
    goto LABEL_44;
  if (!sub_21A6AF01C(*(_QWORD *)(a1 + 8), 1835626067, (uint64_t)&__p, 0))
  {
    if (SHIBYTE(v28) < 0)
    {
      v21 = v27;
      if (!v27)
        goto LABEL_20;
      p_p = (char *)__p;
    }
    else
    {
      v21 = HIBYTE(v28);
      if (!HIBYTE(v28))
        goto LABEL_20;
      p_p = (char *)&__p;
    }
    v23 = sub_21A6A2654(p_p, v21);
    if (v23)
    {
      if (v25 < v23)
      {
LABEL_44:
        v11 = 4294967277;
        goto LABEL_9;
      }
    }
  }
LABEL_20:
  v14 = sub_21A6AF0B4(*(_QWORD *)(a1 + 8), 1634104688);
  v15 = *(_QWORD *)(a1 + 16);
  if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v16 = &v31;
  else
    v16 = (std::string *)v31.__r_.__value_.__r.__words[0];
  if ((v30.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v17 = &v30;
  else
    v17 = (std::string *)v30.__r_.__value_.__r.__words[0];
  if (v14)
  {
    v11 = sub_21A6727F0(v15, 4, 60000, (char *)v16, (char *)v17, 1718973808, a2, a3);
    if ((_DWORD)v11)
      goto LABEL_9;
    if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v18 = &v31;
    else
      v18 = (std::string *)v31.__r_.__value_.__r.__words[0];
    if ((v30.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v19 = &v30;
    else
      v19 = (std::string *)v30.__r_.__value_.__r.__words[0];
    v20 = sub_21A6727F0(*(_QWORD *)(a1 + 16), 4, 60000, (char *)v18, (char *)v19, 1718973300, 0, 0);
  }
  else
  {
    v20 = sub_21A672C58(v15, 2, 60000, (char *)v16, (char *)v17, a3, (uint64_t)a2, v13);
  }
  v11 = v20;
LABEL_9:
  if (SHIBYTE(v28) < 0)
    operator delete(__p);
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v30.__r_.__value_.__l.__data_);
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v31.__r_.__value_.__l.__data_);
  return v11;
}

void sub_21A6D5708(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  uint64_t v30;

  if (a23 < 0)
    operator delete(__p);
  if (a30 < 0)
    operator delete(a25);
  if (*(char *)(v30 - 33) < 0)
    operator delete(*(void **)(v30 - 56));
  _Unwind_Resume(exception_object);
}

uint64_t sub_21A6D5764(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  char v11;
  std::string *v13;
  std::string *v14;
  char *v15;
  size_t v16;
  std::string __str;
  std::string v19;
  std::string v20;
  size_t v21;
  char *v22;
  char __dst[64];
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v21 = 0;
  v22 = 0;
  memset(&v20, 0, sizeof(v20));
  memset(&v19, 0, sizeof(v19));
  v8 = 4294967292;
  if (a1 && a2 && a3)
  {
    v11 = a4;
    sub_21A6AFF90(*(_QWORD *)(a1 + 8), 0, a4, a5, a6, a7, a8, &__str);
    std::string::operator=(&v20, &__str);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    std::string::operator=(&v19, (const std::string *)(*(_QWORD *)(a1 + 8) + 120));
    if ((v20.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v13 = &v20;
    else
      v13 = (std::string *)v20.__r_.__value_.__r.__words[0];
    if ((v19.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v14 = &v19;
    else
      v14 = (std::string *)v19.__r_.__value_.__r.__words[0];
    v8 = sub_21A6722F8(*(_QWORD *)(a1 + 16), v11, 60000, (char *)v13, (char *)v14, 1718970224, &v22, &v21);
    if (!(_DWORD)v8)
    {
      v16 = v21;
      v15 = v22;
      memcpy(__dst, v22, v21);
      __dst[v16] = 0;
      free(v15);
      if (sscanf(__dst, "%u/%u", a2, a3) == 2)
        v8 = 0;
      else
        v8 = 4294967270;
    }
  }
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v19.__r_.__value_.__l.__data_);
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v20.__r_.__value_.__l.__data_);
  return v8;
}

void sub_21A6D58E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a16 < 0)
    operator delete(__p);
  if (a28 < 0)
    operator delete(a23);
  _Unwind_Resume(exception_object);
}

uint64_t sub_21A6D5930(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  std::string *v11;
  std::string *v12;
  std::string __p;
  std::string v15;
  std::string v16;
  uint64_t v17;

  v17 = 0;
  memset(&v16, 0, sizeof(v16));
  memset(&v15, 0, sizeof(v15));
  v8 = 4294967292;
  if (a1 && a2)
  {
    sub_21A6AFF90(*(_QWORD *)(a1 + 8), 0, a4, a5, a6, a7, a8, &__p);
    std::string::operator=(&v16, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    std::string::operator=(&v15, (const std::string *)(*(_QWORD *)(a1 + 8) + 120));
    v17 = 0;
    if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v11 = &v16;
    else
      v11 = (std::string *)v16.__r_.__value_.__r.__words[0];
    if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v12 = &v15;
    else
      v12 = (std::string *)v15.__r_.__value_.__r.__words[0];
    v8 = sub_21A6731E4(*(_QWORD *)(a1 + 16), 4u, 60000, (char *)v11, (char *)v12, &v17, (uint64_t)CFSTR("acpd.system.interfaces"), (uint64_t)"", (uint64_t)__p.__r_.__value_.__l.__data_);
    *a2 = v17;
    if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v15.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v16.__r_.__value_.__l.__data_);
  return v8;
}

void sub_21A6D5A3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a14 < 0)
    operator delete(__p);
  if (a26 < 0)
    operator delete(a21);
  _Unwind_Resume(exception_object);
}

uint64_t sub_21A6D5A84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  std::string *v9;
  std::string *v10;
  uint64_t v11;
  std::string __str;
  std::string v14;
  std::string v15;

  memset(&v15, 0, sizeof(v15));
  memset(&v14, 0, sizeof(v14));
  if (a1)
  {
    sub_21A6AFF90(*(_QWORD *)(a1 + 8), 0, a4, a5, a6, a7, a8, &__str);
    std::string::operator=(&v15, &__str);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    std::string::operator=(&v14, (const std::string *)(*(_QWORD *)(a1 + 8) + 120));
    if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v9 = &v15;
    else
      v9 = (std::string *)v15.__r_.__value_.__r.__words[0];
    if ((v14.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v10 = &v14;
    else
      v10 = (std::string *)v14.__r_.__value_.__r.__words[0];
    v11 = sub_21A6731E4(*(_QWORD *)(a1 + 16), 4u, 60000, (char *)v9, (char *)v10, 0, (uint64_t)CFSTR("wsc.start"), (uint64_t)"%kO=%i%kO=%i%kO=%i%kO=%i", (uint64_t)CFSTR("mode"));
    if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v14.__r_.__value_.__l.__data_);
  }
  else
  {
    v11 = 4294967292;
  }
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v15.__r_.__value_.__l.__data_);
  return v11;
}

void sub_21A6D5BC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  uint64_t v29;

  if (a23 < 0)
    operator delete(__p);
  if (*(char *)(v29 - 49) < 0)
    operator delete(*(void **)(v29 - 72));
  _Unwind_Resume(exception_object);
}

uint64_t sub_21A6D5C0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  std::string *v9;
  std::string *v10;
  uint64_t v11;
  uint64_t v13;
  std::string __str;
  std::string v15;
  std::string v16;

  memset(&v16, 0, sizeof(v16));
  memset(&v15, 0, sizeof(v15));
  if (a1)
  {
    sub_21A6AFF90(*(_QWORD *)(a1 + 8), 0, a4, a5, a6, a7, a8, &__str);
    std::string::operator=(&v16, &__str);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    std::string::operator=(&v15, (const std::string *)(*(_QWORD *)(a1 + 8) + 120));
    if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v9 = &v16;
    else
      v9 = (std::string *)v16.__r_.__value_.__r.__words[0];
    if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v10 = &v15;
    else
      v10 = (std::string *)v15.__r_.__value_.__r.__words[0];
    v11 = sub_21A6731E4(*(_QWORD *)(a1 + 16), 4u, 60000, (char *)v9, (char *)v10, 0, (uint64_t)CFSTR("wsc.stop"), (uint64_t)"", v13);
    if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v15.__r_.__value_.__l.__data_);
  }
  else
  {
    v11 = 4294967292;
  }
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v16.__r_.__value_.__l.__data_);
  return v11;
}

void sub_21A6D5CFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;

  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v21 - 17) < 0)
    operator delete(*(void **)(v21 - 40));
  _Unwind_Resume(exception_object);
}

uint64_t sub_21A6D5D44(uint64_t a1, CFDictionaryRef theDict)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::string *v10;
  std::string *v11;
  std::string __str;
  std::string v14;
  std::string v15;

  memset(&v15, 0, sizeof(v15));
  memset(&v14, 0, sizeof(v14));
  v2 = 4294967292;
  if (a1 && theDict && CFDictionaryGetCount(theDict))
  {
    sub_21A6AFF90(*(_QWORD *)(a1 + 8), 0, v5, v6, v7, v8, v9, &__str);
    std::string::operator=(&v15, &__str);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    std::string::operator=(&v14, (const std::string *)(*(_QWORD *)(a1 + 8) + 120));
    if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v10 = &v15;
    else
      v10 = (std::string *)v15.__r_.__value_.__r.__words[0];
    if ((v14.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v11 = &v14;
    else
      v11 = (std::string *)v14.__r_.__value_.__r.__words[0];
    v2 = sub_21A6731E4(*(_QWORD *)(a1 + 16), 4u, 60000, (char *)v10, (char *)v11, 0, (uint64_t)CFSTR("wsc.authorize"), (uint64_t)"%##O", (uint64_t)theDict);
    if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v14.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v15.__r_.__value_.__l.__data_);
  return v2;
}

void sub_21A6D5E50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0)
    operator delete(__p);
  if (a27 < 0)
    operator delete(a22);
  _Unwind_Resume(exception_object);
}

uint64_t sub_21A6D5E98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  std::string *v10;
  std::string *v11;
  std::string __str;
  std::string v14;
  std::string v15;

  memset(&v15, 0, sizeof(v15));
  memset(&v14, 0, sizeof(v14));
  v8 = 4294967292;
  if (a1 && a2)
  {
    sub_21A6AFF90(*(_QWORD *)(a1 + 8), 0, a4, a5, a6, a7, a8, &__str);
    std::string::operator=(&v15, &__str);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    std::string::operator=(&v14, (const std::string *)(*(_QWORD *)(a1 + 8) + 120));
    if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v10 = &v15;
    else
      v10 = (std::string *)v15.__r_.__value_.__r.__words[0];
    if ((v14.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v11 = &v14;
    else
      v11 = (std::string *)v14.__r_.__value_.__r.__words[0];
    v8 = sub_21A6731E4(*(_QWORD *)(a1 + 16), 4u, 60000, (char *)v10, (char *)v11, 0, (uint64_t)CFSTR("diskd.disconnectAll"), (uint64_t)"%kO=%O", (uint64_t)CFSTR("message"));
    if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v14.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v15.__r_.__value_.__l.__data_);
  return v8;
}

void sub_21A6D5FA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  uint64_t v23;

  if (a17 < 0)
    operator delete(__p);
  if (*(char *)(v23 - 33) < 0)
    operator delete(*(void **)(v23 - 56));
  _Unwind_Resume(exception_object);
}

uint64_t sub_21A6D5FE8(uint64_t a1, CFDictionaryRef theDict)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::string *v10;
  std::string *v11;
  std::string __str;
  std::string v14;
  std::string v15;

  memset(&v15, 0, sizeof(v15));
  memset(&v14, 0, sizeof(v14));
  v2 = 4294967292;
  if (a1 && theDict && CFDictionaryGetCount(theDict))
  {
    sub_21A6AFF90(*(_QWORD *)(a1 + 8), 0, v5, v6, v7, v8, v9, &__str);
    std::string::operator=(&v15, &__str);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    std::string::operator=(&v14, (const std::string *)(*(_QWORD *)(a1 + 8) + 120));
    if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v10 = &v15;
    else
      v10 = (std::string *)v15.__r_.__value_.__r.__words[0];
    if ((v14.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v11 = &v14;
    else
      v11 = (std::string *)v14.__r_.__value_.__r.__words[0];
    v2 = sub_21A6731E4(*(_QWORD *)(a1 + 16), 4u, 60000, (char *)v10, (char *)v11, 0, (uint64_t)CFSTR("diskd.eraseDisk"), (uint64_t)"%##O", (uint64_t)theDict);
    if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v14.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v15.__r_.__value_.__l.__data_);
  return v2;
}

void sub_21A6D60F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0)
    operator delete(__p);
  if (a27 < 0)
    operator delete(a22);
  _Unwind_Resume(exception_object);
}

uint64_t sub_21A6D613C(uint64_t a1, CFDictionaryRef theDict)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::string *v10;
  std::string *v11;
  std::string __str;
  std::string v14;
  std::string v15;

  memset(&v15, 0, sizeof(v15));
  memset(&v14, 0, sizeof(v14));
  v2 = 4294967292;
  if (a1 && theDict && CFDictionaryGetCount(theDict))
  {
    sub_21A6AFF90(*(_QWORD *)(a1 + 8), 0, v5, v6, v7, v8, v9, &__str);
    std::string::operator=(&v15, &__str);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    std::string::operator=(&v14, (const std::string *)(*(_QWORD *)(a1 + 8) + 120));
    if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v10 = &v15;
    else
      v10 = (std::string *)v15.__r_.__value_.__r.__words[0];
    if ((v14.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v11 = &v14;
    else
      v11 = (std::string *)v14.__r_.__value_.__r.__words[0];
    v2 = sub_21A6731E4(*(_QWORD *)(a1 + 16), 4u, 60000, (char *)v10, (char *)v11, 0, (uint64_t)CFSTR("diskd.archiveDisk"), (uint64_t)"%##O", (uint64_t)theDict);
    if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v14.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v15.__r_.__value_.__l.__data_);
  return v2;
}

void sub_21A6D6248(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0)
    operator delete(__p);
  if (a27 < 0)
    operator delete(a22);
  _Unwind_Resume(exception_object);
}

uint64_t sub_21A6D6290(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  std::string *v10;
  std::string *v11;
  uint64_t v12;
  std::string __str;
  std::string v15;
  std::string v16;

  memset(&v16, 0, sizeof(v16));
  memset(&v15, 0, sizeof(v15));
  if (a1)
  {
    sub_21A6AFF90(*(_QWORD *)(a1 + 8), 0, a4, a5, a6, a7, a8, &__str);
    std::string::operator=(&v16, &__str);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    std::string::operator=(&v15, (const std::string *)(*(_QWORD *)(a1 + 8) + 120));
    if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v10 = &v16;
    else
      v10 = (std::string *)v16.__r_.__value_.__r.__words[0];
    if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v11 = &v15;
    else
      v11 = (std::string *)v15.__r_.__value_.__r.__words[0];
    v12 = sub_21A6731E4(*(_QWORD *)(a1 + 16), 4u, 60000, (char *)v10, (char *)v11, 0, a2, (uint64_t)"", 0);
    if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v15.__r_.__value_.__l.__data_);
  }
  else
  {
    v12 = 4294967292;
  }
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v16.__r_.__value_.__l.__data_);
  return v12;
}

void sub_21A6D638C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0)
    operator delete(__p);
  if (a27 < 0)
    operator delete(a22);
  _Unwind_Resume(exception_object);
}

uint64_t sub_21A6D63D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  std::string *v9;
  std::string *v10;
  uint64_t v11;
  std::string __str;
  std::string v14;
  std::string v15;

  memset(&v15, 0, sizeof(v15));
  memset(&v14, 0, sizeof(v14));
  if (a1)
  {
    sub_21A6AFF90(*(_QWORD *)(a1 + 8), 0, a4, a5, a6, a7, a8, &__str);
    std::string::operator=(&v15, &__str);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    std::string::operator=(&v14, (const std::string *)(*(_QWORD *)(a1 + 8) + 120));
    if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v9 = &v15;
    else
      v9 = (std::string *)v15.__r_.__value_.__r.__words[0];
    if ((v14.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v10 = &v14;
    else
      v10 = (std::string *)v14.__r_.__value_.__r.__words[0];
    v11 = sub_21A6731E4(*(_QWORD *)(a1 + 16), 4u, 60000, (char *)v9, (char *)v10, 0, (uint64_t)CFSTR("acpd.checkConnection"), (uint64_t)"", 0);
    if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v14.__r_.__value_.__l.__data_);
  }
  else
  {
    v11 = 4294967292;
  }
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v15.__r_.__value_.__l.__data_);
  return v11;
}

void sub_21A6D64C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;

  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v21 - 17) < 0)
    operator delete(*(void **)(v21 - 40));
  _Unwind_Resume(exception_object);
}

uint64_t sub_21A6D6510(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::string *v12;
  std::string *v13;
  std::string __str;
  std::string v16;
  std::string v17;

  memset(&v17, 0, sizeof(v17));
  memset(&v16, 0, sizeof(v16));
  v4 = 4294967292;
  if (a2 && a1 && a3)
  {
    if (sub_21A6AF0B4(*(_QWORD *)(a1 + 8), 1919052402))
    {
      sub_21A6AFF90(*(_QWORD *)(a1 + 8), 0, v7, v8, v9, v10, v11, &__str);
      std::string::operator=(&v17, &__str);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
      std::string::operator=(&v16, (const std::string *)(*(_QWORD *)(a1 + 8) + 120));
      if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v12 = &v17;
      else
        v12 = (std::string *)v17.__r_.__value_.__r.__words[0];
      if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v13 = &v16;
      else
        v13 = (std::string *)v16.__r_.__value_.__r.__words[0];
      v4 = sub_21A6731E4(*(_QWORD *)(a1 + 16), 4u, 60000, (char *)v12, (char *)v13, a4, (uint64_t)CFSTR("remoteBonjour.browse"), (uint64_t)"%kO=%O%kO=%O", (uint64_t)CFSTR("domain"));
      if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v16.__r_.__value_.__l.__data_);
    }
    else
    {
      v4 = 4294960561;
    }
  }
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v17.__r_.__value_.__l.__data_);
  return v4;
}

void sub_21A6D6654(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  uint64_t v25;

  if (a19 < 0)
    operator delete(__p);
  if (*(char *)(v25 - 49) < 0)
    operator delete(*(void **)(v25 - 72));
  _Unwind_Resume(exception_object);
}

uint64_t sub_21A6D669C(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12;
  unsigned __int8 *v13;
  _QWORD *v14;
  unsigned __int8 *v15;
  std::string *v16;
  void **v17;
  uint64_t v18;
  void *__p[2];
  uint64_t v21;
  std::string v22;

  sub_21A6AFF90(*(_QWORD *)(a1 + 8), 0, a4, a5, a6, a7, a8, &v22);
  v12 = *(_QWORD *)(a1 + 8);
  if (*(char *)(v12 + 143) < 0)
  {
    sub_21A6CDFB4(__p, *(void **)(v12 + 120), *(_QWORD *)(v12 + 128));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)(v12 + 120);
    v21 = *(_QWORD *)(v12 + 136);
  }
  v15 = *(unsigned __int8 **)(a1 + 24);
  v14 = (_QWORD *)(a1 + 24);
  v13 = v15;
  if (v15)
  {
    sub_21A673D80(v13);
    *v14 = 0;
  }
  if ((v22.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v16 = &v22;
  else
    v16 = (std::string *)v22.__r_.__value_.__r.__words[0];
  if (v21 >= 0)
    v17 = __p;
  else
    v17 = (void **)__p[0];
  v18 = sub_21A673ACC(v14, (const char *)v16, (const char *)v17, 0, a2, a3, a4);
  if (SHIBYTE(v21) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v22.__r_.__value_.__l.__data_);
  return v18;
}

void sub_21A6D6788(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL sub_21A6D67BC(_BOOL8 result)
{
  if (result)
    return *(_QWORD *)(result + 24) != 0;
  return result;
}

void sub_21A6D67D0(char *__s)
{
  void *__p[2];
  char v2;

  sub_21A6CE0F0(__p, __s);
  sub_21A6BB568((char *)__p);
  if (v2 < 0)
    operator delete(__p[0]);
}

void sub_21A6D6814(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_21A6D6830(uint64_t a1)
{
  uint64_t result;

  result = sub_21A6D2BE0(a1);
  if (!(_DWORD)result)
  {
    if (!a1)
      return sub_21A6D2450(a1);
    result = sub_21A6AF1F0(*(_QWORD *)(a1 + 8));
    if (!(_DWORD)result)
    {
      result = sub_21A6BB914(*(_QWORD *)(a1 + 8));
      if (!(_DWORD)result)
        return sub_21A6D2450(a1);
    }
  }
  return result;
}

uint64_t sub_21A6D6880(uint64_t a1, int a2)
{
  CFIndex v4;
  uint64_t v5;
  CFIndex v6;
  std::string *p_p;
  uint64_t v8;
  BOOL v9;
  std::string __p;
  char v12[5];
  _BYTE v13[17];
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  if (!a1)
    return 4294960591;
  sub_21A6711EC(a2, v12);
  if (!sub_21A6B27A8(a2))
  {
    if ((sub_21A6B456C(*(_QWORD *)(a1 + 8), a2) & 1) == 0)
      return sub_21A6BAFD4(*(_QWORD *)(a1 + 8), v12);
    return 0;
  }
  memset(&__p, 0, sizeof(__p));
  v4 = sub_21A6B262C(*(_QWORD *)(a1 + 8), 0);
  if (v4 <= 0)
    return 0;
  v5 = 0;
  v6 = v4 - 1;
  do
  {
    sub_21A6C379C(v13, 0x11uLL, v5);
    MEMORY[0x220747320](&__p, v13);
    sub_21A6B2D64((unsigned __int8 *)&__p, a2, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    v8 = sub_21A6BAFD4(*(_QWORD *)(a1 + 8), (char *)p_p);
    if ((_DWORD)v8)
      v9 = 1;
    else
      v9 = v6 == v5;
    ++v5;
  }
  while (!v9);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v8;
}

void sub_21A6D69C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  _Unwind_Resume(exception_object);
}

uint64_t sub_21A6D69F0(uint64_t result)
{
  if (result)
    return sub_21A6BC4A8(*(_QWORD *)(result + 8), 0);
  return result;
}

uint64_t sub_21A6D6A04(uint64_t result)
{
  if (result)
    return sub_21A6B26A8(*(_QWORD *)(result + 8), 0);
  return result;
}

uint64_t sub_21A6D6A18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  std::string *v9;
  std::string *v10;
  uint64_t v11;
  std::string __str;
  std::string v14;
  std::string v15;

  memset(&v15, 0, sizeof(v15));
  memset(&v14, 0, sizeof(v14));
  if (a1)
  {
    sub_21A6AFF90(*(_QWORD *)(a1 + 8), 0, a4, a5, a6, a7, a8, &__str);
    std::string::operator=(&v15, &__str);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    std::string::operator=(&v14, (const std::string *)(*(_QWORD *)(a1 + 8) + 120));
    if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v9 = &v15;
    else
      v9 = (std::string *)v15.__r_.__value_.__r.__words[0];
    if ((v14.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v10 = &v14;
    else
      v10 = (std::string *)v14.__r_.__value_.__r.__words[0];
    v11 = sub_21A6731E4(*(_QWORD *)(a1 + 16), 4u, 60000, (char *)v9, (char *)v10, 0, (uint64_t)CFSTR("dhcp.client.lease.action"), (uint64_t)"%kO=%O", (uint64_t)CFSTR("action"));
    if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v14.__r_.__value_.__l.__data_);
  }
  else
  {
    v11 = 4294967292;
  }
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v15.__r_.__value_.__l.__data_);
  return v11;
}

void sub_21A6D6B1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  uint64_t v23;

  if (a17 < 0)
    operator delete(__p);
  if (*(char *)(v23 - 17) < 0)
    operator delete(*(void **)(v23 - 40));
  _Unwind_Resume(exception_object);
}

uint64_t sub_21A6D6B64(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BOOL4 v8;
  __int16 v10;
  char *v11;
  int v12;
  std::string __p;
  _BYTE v14[5];
  int v15;
  __CFArray *v16;
  const __CFString *v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;

  v20 = 0;
  v19 = 0;
  v18 = 0;
  v17 = 0;
  v16 = 0;
  v15 = 0;
  sub_21A6CE0F0(&__p, "WiFi.radios.[*].");
  if (!a1)
  {
    v7 = 4294967292;
    goto LABEL_8;
  }
  v7 = sub_21A692FEC((const __CFAllocator *)*MEMORY[0x24BDBD240], (CFTypeRef *)&v17, (uint64_t)"{%kO=[%@]}", v2, v3, v4, v5, v6, (uint64_t)CFSTR("problems"));
  if (!(_DWORD)v7)
  {
    v7 = sub_21A6AD02C(*(_QWORD *)(a1 + 8), 1464626795, &v18, 0);
    if (!(_DWORD)v7)
    {
      if (sub_21A6AF0B4(*(_QWORD *)(a1 + 8), 1147761477))
      {
        v12 = 0;
        v7 = sub_21A6AD02C(*(_QWORD *)(a1 + 8), 2002867012, &v12, 0);
        v8 = (v7 | ~v12 & 0xF) == 0;
        if ((_DWORD)v7)
          goto LABEL_8;
      }
      else
      {
        v8 = 0;
      }
      v7 = sub_21A6AD02C(*(_QWORD *)(a1 + 8), 2002864494, (char *)&v19 + 4, 0);
      if (!(_DWORD)v7)
      {
        sub_21A6B2D64((unsigned __int8 *)&__p, 1651726157, &__p);
        v7 = sub_21A6B77DC(*(_QWORD *)(a1 + 8), (uint64_t)&__p, (char *)&v18 + 4, 0);
        if (!(_DWORD)v7)
        {
          sub_21A6B2D64((unsigned __int8 *)&__p, 1651723853, &__p);
          v7 = sub_21A6B77DC(*(_QWORD *)(a1 + 8), (uint64_t)&__p, &v19, 0);
          if (!(_DWORD)v7)
          {
            if (v8
              || HIDWORD(v19) != 16
              || HIDWORD(v18) == 2
              || HIDWORD(v18) == 3
              || (_DWORD)v19 == 1
              || (_DWORD)v18
              || (v7 = sub_21A6D0A70(v16, 2002865740), !(_DWORD)v7))
            {
              v7 = sub_21A6B7A3C(*(_QWORD *)(a1 + 8), 2002866767, &v20, 0);
              if (!(_DWORD)v7)
              {
                if (!v20 || (v7 = sub_21A6D0A70(v16, 2002866794), !(_DWORD)v7))
                {
                  v7 = sub_21A6AD02C(*(_QWORD *)(a1 + 8), 1937327724, &v15, 0);
                  if (!(_DWORD)v7)
                  {
                    v10 = v15;
                    if ((v15 & 0x40) != 0)
                    {
                      v7 = sub_21A6D0A70(v16, 1668573549);
                      if ((_DWORD)v7)
                        goto LABEL_8;
                      v10 = v15;
                    }
                    if ((v10 & 0x2000) == 0 || (v7 = sub_21A6D0A70(v16, 1936680564), !(_DWORD)v7))
                    {
                      v11 = sub_21A6711EC(1937331060, v14);
                      v7 = sub_21A6D4244(a1, v11, v17);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
LABEL_8:
  if (v17)
    CFRelease(v17);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v7;
}

void sub_21A6D6E24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_21A6D6E48(const __CFString *a1, int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  BOOL v23;
  int v24;
  char v25;
  char v26;
  int v27;

  if (a1)
  {
    if (a2)
    {
      v27 = 0;
      v26 = 0;
      sub_21A693B94(a1, (uint64_t)&v27, (UInt8 *)"%ks:int", a4, a5, a6, a7, a8, (uint64_t)"raWM");
      if (!v15)
      {
        sub_21A693B94(a1, (uint64_t)&v26, (UInt8 *)"%ks:BOOL", v10, v11, v12, v13, v14, (uint64_t)"raEA");
        if (!v21)
        {
          v25 = 0;
          sub_21A693B94(a1, (uint64_t)&v25, (UInt8 *)"%ks:BOOL", v16, v17, v18, v19, v20, (uint64_t)"rTSN");
          v22 = 1;
          switch(v27)
          {
            case 0:
              goto LABEL_17;
            case 1:
              v22 = 2;
              goto LABEL_17;
            case 2:
              v22 = 3;
              goto LABEL_17;
            case 3:
              if (v25)
                goto LABEL_12;
              v23 = v26 == 0;
              v22 = 11;
              v24 = 6;
              goto LABEL_15;
            case 4:
              if (v25)
              {
LABEL_12:
                v22 = 8;
              }
              else
              {
                v23 = v26 == 0;
                v22 = 10;
                v24 = 5;
LABEL_15:
                if (v23)
                  v22 = v24;
              }
LABEL_17:
              *a2 = v22;
              break;
            case 5:
              v23 = v26 == 0;
              v22 = 12;
              v24 = 7;
              goto LABEL_15;
            default:
              v22 = 0;
              goto LABEL_17;
          }
        }
      }
    }
  }
}

uint64_t sub_21A6D6F8C(unsigned int a1)
{
  unsigned int v1;

  v1 = (0x530u >> a1) & 1;
  if (a1 > 0xA)
    v1 = 0;
  if (HIWORD(a1))
    return 1;
  else
    return v1;
}

uint64_t sub_21A6D6FB4(unsigned int a1)
{
  if (a1 >= 0x10000 && (_WORD)a1)
    return 1;
  if ((a1 & 0xFFF8) != 0)
    return 0;
  return (0xCEu >> a1) & 1;
}

uint64_t sub_21A6D6FE4(int a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  int v6;
  uint64_t v7;

  result = 0;
  if (a1 && a2)
  {
    v7 = 0;
    *a2 = 0;
    if (sub_21A6D4DDC(a1, &v7))
      return 0;
    v5 = v7;
    if (!v7)
      return 0;
    *a2 = *(unsigned int *)(v7 + 20);
    if (*(_DWORD *)(v5 + 12) == 2)
      return 3;
    v6 = *(_DWORD *)(v5 + 28) - 2;
    if (v6 > 0xD)
      return 0;
    else
      return dword_21A73F19C[v6];
  }
  return result;
}

uint64_t sub_21A6D7078(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  std::string *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  std::string __str;
  CFTypeRef cf;
  __CFArray *v20;

  cf = 0;
  if (!a1)
    return 4294960591;
  v9 = sub_21A6D5338(a1, 1633899078, a3, a4, a5, a6, a7, a8);
  if (!(_DWORD)v9)
  {
    v20 = 0;
    v9 = sub_21A6B8808(*(_QWORD *)(a1 + 8), &cf);
    if (!(_DWORD)v9)
    {
      if (!cf)
        return 4294960568;
      v9 = sub_21A6CFD64(a1, &v20);
      if (!(_DWORD)v9)
      {
        if (v20)
        {
          v9 = sub_21A6B9930(*(_QWORD *)(a1 + 8), v20, (const __CFString *)cf, 1);
          if (v20)
          {
            CFRelease(v20);
            v20 = 0;
          }
          if (!(_DWORD)v9)
          {
            v11 = *(std::string **)(a1 + 8);
            sub_21A6CE0F0(&__str, "public");
            std::string::operator=(v11 + 5, &__str);
            if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__str.__r_.__value_.__l.__data_);
            v9 = sub_21A6D5338(a1, 1633899074, v12, v13, v14, v15, v16, v17);
          }
        }
        else
        {
          v9 = 4294960568;
        }
      }
    }
    if (cf)
      CFRelease(cf);
  }
  return v9;
}

void sub_21A6D7190(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_21A6D71AC(int a1, const __CFString *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  int v28;
  int v29;
  CFIndex Count;
  CFIndex v31;
  uint64_t i;
  int v33;
  const __CFString *v34;
  CFArrayRef theArray;
  const __CFString *v36;
  CFStringRef v37;
  const __CFString *v38;
  CFStringRef theString1;

  if (!a1)
  {
    if (a3)
    {
      if (*(_QWORD *)a3)
      {
        if (*(_QWORD *)(a3 + 24))
        {
          v38 = 0;
          theString1 = 0;
          v36 = 0;
          v37 = 0;
          theArray = 0;
          sub_21A693B94(a2, (uint64_t)&theString1, (UInt8 *)"%ks.%ks", a4, a5, a6, a7, a8, (uint64_t)"ACPRemoteBonjour");
          if (!v10)
          {
            if (theString1)
            {
              if (CFStringCompare(theString1, *(CFStringRef *)a3, 0) == kCFCompareEqualTo)
              {
                sub_21A693B94(a2, (uint64_t)&v36, (UInt8 *)"%ks.%ks", v11, v12, v13, v14, v15, (uint64_t)"ACPRemoteBonjour");
                if (!v21)
                {
                  if (v36)
                  {
                    sub_21A693B94(v36, (uint64_t)&v38, (UInt8 *)"%ks.%ks", v16, v17, v18, v19, v20, (uint64_t)"txt");
                    if (!v27)
                    {
                      if (v38)
                      {
                        if (!*(_QWORD *)(a3 + 16)
                          || ((v34 = 0,
                               sub_21A693B94(v36, (uint64_t)&v34, (UInt8 *)"%ks.%ks", v22, v23, v24, v25, v26, (uint64_t)"txt"), v28 == -6727)|| !v28 && v34)&& (sub_21A6D039C(v38, *(const __CFString **)(a3 + 16)) & 1) == 0&& (!v34 || (sub_21A6D039C(v34, *(const __CFString **)(a3 + 16)) & 1) == 0))
                        {
                          if (*(_QWORD *)(a3 + 8))
                          {
                            sub_21A693B94(v36, (uint64_t)&theArray, (UInt8 *)"%ks", v22, v23, v24, v25, v26, (uint64_t)"services");
                            if (!v29)
                            {
                              if (theArray)
                              {
                                Count = CFArrayGetCount(theArray);
                                if (Count >= 1)
                                {
                                  v31 = Count;
                                  for (i = 0; i != v31; ++i)
                                  {
                                    sub_21A693B94((const __CFString *)theArray, (uint64_t)&v37, (UInt8 *)"[*].%ks", v22, v23, v24, v25, v26, i);
                                    if (v33 || !v37)
                                      break;
                                    if (CFStringCompare(v37, *(CFStringRef *)(a3 + 8), 0) == kCFCompareEqualTo)
                                      goto LABEL_30;
                                  }
                                }
                              }
                            }
                          }
                          else
                          {
LABEL_30:
                            sub_21A693A8C((const __CFAllocator *)*MEMORY[0x24BDBD240], *(__CFArray **)(a3 + 24), (uint64_t)"%kO=%O", v22, v23, v24, v25, v26, (uint64_t)v38);
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

uint64_t sub_21A6D73D4(uint64_t a1, uint64_t a2, uint64_t a3, const void *a4, unsigned int a5, int a6, _QWORD *a7)
{
  uint64_t v7;
  char *v16;
  CFTypeRef v17;
  _QWORD *v18;
  uint64_t v19;
  const __CFAllocator *v20;
  CFMutableDictionaryRef Mutable;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned __int8 *v37;
  const void *v38;
  CFTypeRef v39;
  CFTypeRef v40;
  CFTypeRef cf;
  CFTypeRef v42;
  _BYTE v43[5];

  v40 = 0;
  cf = 0;
  v42 = 0;
  v39 = 0;
  v7 = 4294960591;
  if (!a1 || !a2 || !a3 || !a7)
    goto LABEL_9;
  if (!sub_21A6AF0B4(*(_QWORD *)(a1 + 8), 1919052402))
  {
    v7 = 4294960561;
    goto LABEL_9;
  }
  if (pthread_main_np())
  {
    v7 = 4294960593;
    goto LABEL_9;
  }
  if (a6)
  {
    v16 = sub_21A6711EC(1651716685, v43);
    v7 = sub_21A6D4328(a1, v16, (CFMutableDictionaryRef *)&v39);
    if ((_DWORD)v7)
      goto LABEL_9;
    v17 = v39;
  }
  else
  {
    v17 = 0;
    v39 = 0;
  }
  v18 = malloc_type_calloc(1uLL, 0x20uLL, 0x60040FAD0F902uLL);
  if (!v18)
  {
LABEL_30:
    v7 = 4294960568;
    goto LABEL_9;
  }
  v19 = (uint64_t)v18;
  *v18 = 0;
  v18[2] = v17;
  if (v17)
    CFRetain(v17);
  *(_QWORD *)(v19 + 8) = a4;
  if (a4)
    CFRetain(a4);
  v20 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
  *(_QWORD *)(v19 + 24) = Mutable;
  if (!Mutable)
  {
    sub_21A6D76BC((const void **)v19);
    goto LABEL_30;
  }
  v7 = sub_21A692FEC(v20, &v42, (uint64_t)"{%ks={%ks={}}}", v22, v23, v24, v25, v26, (uint64_t)"filters");
  if (!(_DWORD)v7)
  {
    v7 = sub_21A6D669C(a1, v42, (uint64_t)sub_21A6D71AC, v19, v27, v28, v29, v30);
    if (!(_DWORD)v7)
    {
      v7 = sub_21A6D6510(a1, a2, a3, &cf);
      if (!(_DWORD)v7)
      {
        if (cf)
        {
          sub_21A693B94((const __CFString *)cf, (uint64_t)&v40, (UInt8 *)"%ks", v31, v32, v33, v34, v35, (uint64_t)"uuid");
          v7 = v36;
          if ((_DWORD)v36)
            goto LABEL_27;
          if (!v40)
            goto LABEL_42;
          v7 = sub_21A6D7674((const void **)v19, v40);
          if ((_DWORD)v7)
            goto LABEL_27;
          if (cf)
          {
            CFRelease(cf);
            cf = 0;
          }
          sleep(a5);
          v37 = *(unsigned __int8 **)(a1 + 24);
          if (v37)
          {
            sub_21A673D80(v37);
            *(_QWORD *)(a1 + 24) = 0;
          }
          *a7 = 0;
          v38 = *(const void **)(v19 + 24);
          if (v38)
          {
            *a7 = v38;
            CFRetain(v38);
            v7 = 0;
          }
          else
          {
LABEL_42:
            v7 = 4294960568;
          }
        }
        else
        {
          v7 = 4294960569;
        }
      }
    }
  }
LABEL_27:
  sub_21A6D76BC((const void **)v19);
  if (v42)
  {
    CFRelease(v42);
    v42 = 0;
  }
LABEL_9:
  if (cf)
  {
    CFRelease(cf);
    cf = 0;
  }
  if (v39)
    CFRelease(v39);
  return v7;
}

uint64_t sub_21A6D7674(const void **a1, CFTypeRef cf)
{
  const void *v4;

  if (!a1)
    return 4294960591;
  v4 = *a1;
  if (v4)
    CFRelease(v4);
  *a1 = cf;
  CFRetain(cf);
  return 0;
}

void sub_21A6D76BC(const void **a1)
{
  const void *v2;
  const void *v3;
  const void *v4;
  const void *v5;

  v2 = *a1;
  if (v2)
  {
    CFRelease(v2);
    *a1 = 0;
  }
  v3 = a1[2];
  if (v3)
  {
    CFRelease(v3);
    a1[2] = 0;
  }
  v4 = a1[1];
  if (v4)
  {
    CFRelease(v4);
    a1[1] = 0;
  }
  v5 = a1[3];
  if (v5)
    CFRelease(v5);
  free(a1);
}

uint64_t sub_21A6D7718(const __CFString *a1, uint64_t a2, uint64_t a3, const void *a4, unsigned int a5, int a6, CFTypeRef *a7)
{
  uint64_t v7;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  CFTypeRef cf;
  CFTypeRef v22;
  int *v23;

  v22 = 0;
  v23 = 0;
  cf = 0;
  v7 = 4294960591;
  if (a1 && a2 && a3 && a7)
  {
    if (pthread_main_np())
    {
      v7 = 4294960593;
    }
    else
    {
      v7 = sub_21A692FEC((const __CFAllocator *)*MEMORY[0x24BDBD240], &cf, (uint64_t)"[%C%C%C]", v15, v16, v17, v18, v19, 1466517097);
      if (!(_DWORD)v7)
      {
        if (!cf)
        {
          v7 = 4294960568;
          goto LABEL_10;
        }
        v7 = sub_21A6D1350((uint64_t *)&v23, a1);
        if (!(_DWORD)v7)
        {
          v7 = sub_21A6D19B8((uint64_t)v23, (const __CFArray *)cf, 1);
          if (!(_DWORD)v7)
          {
            if (v23 && sub_21A6AF0B4(*((_QWORD *)v23 + 1), 1919052402))
            {
              v7 = sub_21A6D73D4((uint64_t)v23, a2, a3, a4, a5, a6, &v22);
              if (!(_DWORD)v7)
              {
                if (v22)
                {
                  v7 = 0;
                  *a7 = v22;
                  v22 = 0;
                }
                else
                {
                  v7 = 4294960568;
                }
              }
            }
            else
            {
              v7 = 4294960561;
            }
          }
        }
      }
    }
  }
  if (cf)
  {
    CFRelease(cf);
    cf = 0;
  }
LABEL_10:
  if (v22)
  {
    CFRelease(v22);
    v22 = 0;
  }
  if (v23)
    sub_21A6D12CC(v23);
  return v7;
}

uint64_t sub_21A6D78B4(uint64_t a1, const __CFString *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void **v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v15[5];
  void *__p[2];
  uint64_t v17;
  const __CFString *v18;

  v17 = 0;
  v18 = 0;
  __p[0] = 0;
  __p[1] = 0;
  if ((_DWORD)a3 == 2003061875)
  {
    MEMORY[0x220747320](__p, "legacywds");
  }
  else
  {
    sub_21A6711EC(a3, v15);
    MEMORY[0x220747320](__p, v15);
  }
  v11 = __p;
  if (v17 < 0)
    v11 = (void **)__p[0];
  sub_21A693B94(a2, (uint64_t)&v18, (UInt8 *)"%ks", v6, v7, v8, v9, v10, (uint64_t)v11);
  v13 = v12;
  if (!(_DWORD)v12)
    v13 = sub_21A6AD43C(*(_QWORD *)(a1 + 8), a3, v18, 0);
  if (SHIBYTE(v17) < 0)
    operator delete(__p[0]);
  return v13;
}

void sub_21A6D798C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_21A6D79AC(uint64_t a1, __CFArray *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const __CFAllocator *v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  CFTypeRef cf;
  _BYTE v18[5];
  CFTypeRef v19;

  v19 = 0;
  sub_21A6711EC(a3, v18);
  v6 = sub_21A6AF29C(*(_QWORD *)(a1 + 8), a3, &v19, 0);
  if ((_DWORD)a3 != 2003061875)
  {
    v14 = v6;
    if ((_DWORD)v6)
    {
      if ((_DWORD)v6 != -5)
        goto LABEL_19;
      if ((_DWORD)a3 != 1918128974)
      {
        if ((_DWORD)a3 != 1918977586 && (_DWORD)a3 != 1918980980)
        {
          v14 = 0;
          goto LABEL_19;
        }
        v15 = sub_21A693A8C((const __CFAllocator *)*MEMORY[0x24BDBD240], a2, (uint64_t)"%ks=%i", v7, v8, v9, v10, v11, (uint64_t)v18);
LABEL_18:
        v14 = v15;
        goto LABEL_19;
      }
      v12 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
    }
    else
    {
      v12 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
    }
    v13 = v18;
    goto LABEL_17;
  }
  if (v19)
  {
LABEL_3:
    v12 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
    v13 = "legacywds";
LABEL_17:
    v15 = sub_21A693A8C(v12, a2, (uint64_t)"%ks=%O", v7, v8, v9, v10, v11, (uint64_t)v13);
    goto LABEL_18;
  }
  cf = 0;
  v15 = sub_21A673FCC(2003061875, 0, 0, 1, (CFStringRef *)&cf);
  if ((_DWORD)v15)
    goto LABEL_18;
  v14 = sub_21A6B4940(*(_QWORD *)(a1 + 8), 2003061875, (CFDataRef)cf, &v19);
  if (cf)
    CFRelease(cf);
  if (!(_DWORD)v14)
    goto LABEL_3;
LABEL_19:
  if (v19)
    CFRelease(v19);
  return v14;
}

uint64_t sub_21A6D7B54(uint64_t a1, _DWORD *a2)
{
  uint64_t result;

  if (!a1)
    return 4294960591;
  result = 4294960591;
  if (a2)
  {
    if (*(_DWORD *)(a1 + 144) == 1634561902)
    {
      result = 0;
      *a2 = *(_DWORD *)(a1 + 84);
    }
  }
  return result;
}

uint64_t sub_21A6D7B90(uint64_t a1, _DWORD *a2)
{
  uint64_t result;

  if (!a1)
    return 4294960591;
  result = 4294960591;
  if (a2)
  {
    if (*(_DWORD *)(a1 + 144) == 1634561902)
    {
      result = 0;
      *a2 = *(_DWORD *)(a1 + 80);
    }
  }
  return result;
}

uint64_t sub_21A6D7BCC(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v10;
  uint64_t result;
  uint64_t v12;

  if (dword_2550EFCA0 <= 800 && (dword_2550EFCA0 != -1 || sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u)))
    sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"OSStatus BSConfiguration_SetTaskState(BSConfigurationContextRef, eBSConfigurationTaskState)", 800, (uint64_t)" \n", a5, a6, a7, a8, v12);
  if (!a1 || *(_DWORD *)(a1 + 144) != 1634561902)
    return 4294960591;
  if (a2 > 6)
    return 4294960586;
  if (a2)
  {
    if (a2 == 6)
      v10 = 1;
    else
      v10 = 2;
    sub_21A70AFE4(*(_QWORD *)(a1 + 128), v10, a3, a4, a5, a6, a7, a8);
    if (*(_DWORD *)(a1 + 80))
      return 4294960587;
  }
  else
  {
    sub_21A70AFE4(*(_QWORD *)(a1 + 128), 0, a3, a4, a5, a6, a7, a8);
  }
  result = 0;
  *(_DWORD *)(a1 + 80) = a2;
  *(_DWORD *)(a1 + 84) = 0;
  return result;
}

uint64_t sub_21A6D7CA8(uint64_t a1, _DWORD *a2)
{
  if (a1 && *(_DWORD *)(a1 + 144) == 1634561902)
    return sub_21A70AFA8(*(_QWORD *)(a1 + 128), a2);
  else
    return 4294960591;
}

uint64_t sub_21A6D7CD0(void *context, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  NSObject *v9;
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  if (dword_2550EFCA0 <= 800 && (dword_2550EFCA0 != -1 || sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u)))
    sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"OSStatus BSConfiguration_RPCRefreshClientListAndSystemInterfacesAsync(BSConfigurationContextRef)", 800, (uint64_t)" \n", a5, a6, a7, a8, v16);
  if (!context)
    return 4294960591;
  if (*((_DWORD *)context + 36) != 1634561902)
    return 4294960591;
  v9 = *((_QWORD *)context + 15);
  if (!v9)
    return 4294960591;
  v10 = *((_QWORD *)context + 14);
  if (!v10)
    return 4294960591;
  dispatch_group_async_f(v9, v10, context, (dispatch_function_t)sub_21A6D7D90);
  sub_21A70ACEC(*((_QWORD *)context + 16), 27, 0, 0, v11, v12, v13, v14);
  return 0;
}

void sub_21A6D7D90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  CFTypeRef cf;

  if (dword_2550EFCA0 <= 800 && (dword_2550EFCA0 != -1 || sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u)))
    sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"void __BSConfiguration_RPCRefreshClientListAndSystemInterfacesSync(void *)", 800, (uint64_t)" \n", a5, a6, a7, a8, v20);
  v21 = 0;
  cf = 0;
  if (a1)
  {
    if (*(_DWORD *)(a1 + 144) == 1634561902 && *(_QWORD *)(a1 + 8))
    {
      v9 = sub_21A709D98(*(_QWORD *)(a1 + 128), a2, a3, a4, a5, a6, a7, a8);
      if ((_DWORD)v9)
      {
        v10 = v9;
        v11 = 0;
      }
      else
      {
        v10 = sub_21A6D523C(*(_QWORD *)(a1 + 8), 1918980940);
        if (!(_DWORD)v10)
        {
          v10 = sub_21A6D5930(*(_QWORD *)(a1 + 8), &cf, v13, v14, v15, v16, v17, v18);
          if (!(_DWORD)v10)
          {
            if (cf)
            {
              sub_21A693B94((const __CFString *)cf, (uint64_t)&v21, (UInt8 *)"%ks", v14, v15, v16, v17, v18, (uint64_t)"data");
              v10 = v19;
              if (!(_DWORD)v19)
              {
                if (v21)
                  v10 = 0;
                else
                  v10 = 4294960568;
              }
            }
            else
            {
              v10 = 4294960568;
            }
          }
        }
        sub_21A709E44(*(_QWORD *)(a1 + 128), v12, v13, v14, v15, v16, v17, v18);
        v11 = v21;
      }
    }
    else
    {
      v11 = 0;
      v10 = 4294960591;
    }
    sub_21A70AB8C(*(_QWORD *)(a1 + 128), 28, 1, v10, v11, a6, a7, a8);
    if (cf)
      CFRelease(cf);
  }
}

uint64_t sub_21A6D7EE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  CFTypeRef cf;
  void *context;

  if (dword_2550EFCA0 <= 800 && (dword_2550EFCA0 != -1 || sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u)))
    sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"OSStatus BSConfiguration_RPCStartRemoteBrowseAsync(BSConfigurationContextRef, CFStringRef, CFStringRef)", 800, (uint64_t)" \n", a5, a6, a7, a8, v22);
  if (!a1 || *(_DWORD *)(a1 + 144) != 1634561902 || !*(_QWORD *)(a1 + 120))
    return 4294960591;
  v11 = 4294960591;
  if (a3)
  {
    if (a2)
    {
      if (*(_QWORD *)(a1 + 112))
      {
        cf = 0;
        context = 0;
        v11 = sub_21A692FEC((const __CFAllocator *)*MEMORY[0x24BDBD240], &cf, (uint64_t)"{%kO=%O%kO=%O}", a4, a5, a6, a7, a8, (uint64_t)CFSTR("kAsyncParam_RemoteBrowse_Domain"));
        if (!(_DWORD)v11)
        {
          if (!cf)
            return 0;
          v11 = sub_21A6D804C(a1, cf, &context, v12, v13, v14, v15, v16);
          if (cf)
          {
            CFRelease(cf);
            cf = 0;
          }
          if (!(_DWORD)v11)
          {
            if (!context)
              return 4294960568;
            dispatch_group_async_f(*(dispatch_group_t *)(a1 + 120), *(dispatch_queue_t *)(a1 + 112), context, (dispatch_function_t)sub_21A6D8130);
            sub_21A70ACEC(*(_QWORD *)(a1 + 128), 27, 0, 0, v17, v18, v19, v20);
            return 0;
          }
        }
      }
    }
  }
  return v11;
}

uint64_t sub_21A6D804C(uint64_t a1, const void *a2, _QWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;

  if (dword_2550EFCA0 <= 800 && (dword_2550EFCA0 != -1 || sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u)))
    sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"OSStatus __AsyncContext_Create(BSConfigurationContextRef, CFDictionaryRef, __AsyncContextRef *)", 800, (uint64_t)" \n", a5, a6, a7, a8, v14);
  result = 4294960591;
  if (a3 && *(_DWORD *)(a1 + 144) == 1634561902)
  {
    v12 = malloc_type_calloc(1uLL, 0x18uLL, 0x106004025F8D3E0uLL);
    if (v12)
    {
      v13 = v12;
      *v12 = a1;
      v12[1] = a2;
      if (a2)
        CFRetain(a2);
      result = 0;
      *((_DWORD *)v13 + 4) = 1634561902;
      *a3 = v13;
    }
    else
    {
      return 4294960568;
    }
  }
  return result;
}

void sub_21A6D8130(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  CFTypeRef v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  CFTypeRef cf;
  uint64_t v26;
  uint64_t v27;

  if (dword_2550EFCA0 <= 800 && (dword_2550EFCA0 != -1 || sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u)))
    sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"void __BSConfiguration_RPCStartRemoteBrowseSync(void *)", 800, (uint64_t)" \n", a5, a6, a7, a8, v24);
  cf = 0;
  if (a1)
  {
    if (*((_DWORD *)a1 + 4) == 1634561902)
    {
      v9 = *a1;
      if (*a1)
      {
        v26 = 0;
        v27 = 0;
        if (*(_DWORD *)(v9 + 144) != 1634561902 || !*(_QWORD *)(v9 + 8))
        {
          v13 = 0;
          v12 = 4294960591;
          goto LABEL_13;
        }
        v10 = sub_21A709D98(*(_QWORD *)(v9 + 128), a2, a3, a4, a5, a6, a7, a8);
        if ((_DWORD)v10)
        {
          v12 = v10;
          v13 = 0;
          goto LABEL_13;
        }
        sub_21A693B94((const __CFString *)a1[1], (uint64_t)&v26, (UInt8 *)"%kO", v11, a5, a6, a7, a8, (uint64_t)CFSTR("kAsyncParam_RemoteBrowse_Domain"));
        v12 = v21;
        if (!(_DWORD)v21)
        {
          if (!v26)
          {
LABEL_22:
            v12 = 4294960568;
            goto LABEL_23;
          }
          sub_21A693B94((const __CFString *)a1[1], (uint64_t)&v27, (UInt8 *)"%kO", v16, v17, v18, v19, v20, (uint64_t)CFSTR("kAsyncParam_RemoteBrowse_Service"));
          v12 = v22;
          if (!(_DWORD)v22)
          {
            v15 = v27;
            if (v27)
            {
              v23 = sub_21A6D6510(*(_QWORD *)(v9 + 8), v26, v27, &cf);
              v12 = v23;
              if ((_DWORD)v23 != -6735)
              {
                if ((_DWORD)v23 == 0 && cf == 0)
                  v12 = 4294960568;
                else
                  v12 = v23;
              }
              goto LABEL_23;
            }
            goto LABEL_22;
          }
        }
LABEL_23:
        sub_21A709E44(*(_QWORD *)(v9 + 128), v14, v15, v16, v17, v18, v19, v20);
        v13 = cf;
LABEL_13:
        sub_21A70A778(*(_QWORD *)(v9 + 128), 28, v12, (uint64_t)v13, a5, a6, a7, a8);
        if (cf)
          CFRelease(cf);
      }
    }
  }
}

uint64_t sub_21A6D82E0(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  CFTypeRef cf;
  void *context;

  if (dword_2550EFCA0 <= 800 && (dword_2550EFCA0 != -1 || sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u)))
    sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"OSStatus BSConfiguration_RPCRefreshBSSettingAsync(BSConfigurationContextRef, BSSetting)", 800, (uint64_t)" \n", a5, a6, a7, a8, v21);
  v10 = 4294960591;
  if (a1)
  {
    if (a2)
    {
      if (*(_DWORD *)(a1 + 144) == 1634561902)
      {
        if (*(_QWORD *)(a1 + 120))
        {
          if (*(_QWORD *)(a1 + 112))
          {
            cf = 0;
            context = 0;
            v10 = sub_21A692FEC((const __CFAllocator *)*MEMORY[0x24BDBD240], &cf, (uint64_t)"{%kO=%i}", a4, a5, a6, a7, a8, (uint64_t)CFSTR("kAsyncParam_Refresh_BSSetting"));
            if (!(_DWORD)v10)
            {
              if (!cf)
                return 0;
              v10 = sub_21A6D804C(a1, cf, &context, v11, v12, v13, v14, v15);
              if (cf)
              {
                CFRelease(cf);
                cf = 0;
              }
              if (!(_DWORD)v10)
              {
                if (!context)
                  return 4294960568;
                dispatch_group_async_f(*(dispatch_group_t *)(a1 + 120), *(dispatch_queue_t *)(a1 + 112), context, (dispatch_function_t)sub_21A6D8428);
                sub_21A70ACEC(*(_QWORD *)(a1 + 128), 27, 0, 0, v16, v17, v18, v19);
                return 0;
              }
            }
          }
        }
      }
    }
  }
  return v10;
}

void sub_21A6D8428(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  CFTypeRef v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  CFTypeRef cf;
  CFTypeRef v25;
  unsigned int v26;

  if (dword_2550EFCA0 <= 800 && (dword_2550EFCA0 != -1 || sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u)))
    sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"void __BSConfiguration_RPCRefreshBSSettingSync(void *)", 800, (uint64_t)" \n", a5, a6, a7, a8, v23);
  cf = 0;
  v25 = 0;
  if (a1)
  {
    v26 = 0;
    if (*((_DWORD *)a1 + 4) == 1634561902)
    {
      v9 = *a1;
      if (*a1)
      {
        if (*(_DWORD *)(v9 + 144) == 1634561902 && *(_QWORD *)(v9 + 8) && a1[1])
        {
          v10 = sub_21A709D98(*(_QWORD *)(v9 + 128), a2, a3, a4, a5, a6, a7, a8);
          if ((_DWORD)v10)
          {
            v13 = v10;
            v14 = 0;
          }
          else
          {
            sub_21A693B94((const __CFString *)a1[1], (uint64_t)&v26, (UInt8 *)"%kO:int", v11, v12, a6, a7, a8, (uint64_t)CFSTR("kAsyncParam_Refresh_BSSetting"));
            v13 = v22;
            if (!(_DWORD)v22)
            {
              v15 = v26;
              if (v26)
              {
                v13 = sub_21A6D523C(*(_QWORD *)(v9 + 8), v26);
                if (!(_DWORD)v13)
                {
                  v13 = sub_21A6D4430(*(_QWORD *)(v9 + 8), v26, (CFMutableDictionaryRef *)&v25);
                  if (!(_DWORD)v13)
                  {
                    v13 = sub_21A692FEC((const __CFAllocator *)*MEMORY[0x24BDBD240], &cf, (uint64_t)"{%kO=%O}", v17, v18, v19, v20, v21, (uint64_t)CFSTR("kBSConfigurationRefreshBSSettingKey_Value"));
                    if (!(_DWORD)v13)
                    {
                      if (cf)
                        v13 = 0;
                      else
                        v13 = 4294960568;
                    }
                  }
                }
              }
              else
              {
                v13 = 4294960568;
              }
            }
            sub_21A709E44(*(_QWORD *)(v9 + 128), v15, v16, v17, v18, v19, v20, v21);
            v14 = cf;
          }
        }
        else
        {
          v14 = 0;
          v13 = 4294960591;
        }
        sub_21A70AB8C(*(_QWORD *)(v9 + 128), 28, 3, v13, (uint64_t)v14, a6, a7, a8);
      }
    }
    sub_21A6E26C4(a1, a2, a3, a4, a5, a6, a7, a8);
    if (cf)
    {
      CFRelease(cf);
      cf = 0;
    }
    if (v25)
      CFRelease(v25);
  }
}

uint64_t sub_21A6D85F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  CFTypeRef cf;
  void *context;

  if (dword_2550EFCA0 <= 800 && (dword_2550EFCA0 != -1 || sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u)))
    sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"OSStatus BSConfiguration_RPCDisconnectAllDiskUsersWithMessageAsync(BSConfigurationContextRef, CFStringRef)", 800, (uint64_t)" \n", a5, a6, a7, a8, v20);
  if (!a1 || *(_DWORD *)(a1 + 144) != 1634561902 || !*(_QWORD *)(a1 + 120) || !*(_QWORD *)(a1 + 112))
    return 4294960591;
  cf = 0;
  context = 0;
  v14 = sub_21A692FEC((const __CFAllocator *)*MEMORY[0x24BDBD240], &cf, (uint64_t)"{%kO=%O}", a4, a5, a6, a7, a8, (uint64_t)CFSTR("kAsyncParam_DisconnectMessage"));
  if (!(_DWORD)v14)
  {
    if (!cf)
      return 0;
    v14 = sub_21A6D804C(a1, cf, &context, v9, v10, v11, v12, v13);
    if (cf)
    {
      CFRelease(cf);
      cf = 0;
    }
    if (!(_DWORD)v14)
    {
      if (!context)
        return 4294960568;
      dispatch_group_async_f(*(dispatch_group_t *)(a1 + 120), *(dispatch_queue_t *)(a1 + 112), context, (dispatch_function_t)sub_21A6D8734);
      sub_21A70ACEC(*(_QWORD *)(a1 + 128), 27, 0, 0, v15, v16, v17, v18);
      return 0;
    }
  }
  return v14;
}

void sub_21A6D8734(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const __CFString *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  if (dword_2550EFCA0 <= 800 && (dword_2550EFCA0 != -1 || sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u)))
    sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"void __BSConfiguration_RPCDisconnectAllDiskUsersWithMessageSync(void *)", 800, (uint64_t)" \n", a5, a6, a7, a8, v22);
  if (a1)
  {
    v23 = 0;
    if (*((_DWORD *)a1 + 4) != 1634561902)
      goto LABEL_17;
    v9 = *a1;
    if (!*a1)
      goto LABEL_17;
    if (*(_DWORD *)(v9 + 144) == 1634561902 && *(_QWORD *)(v9 + 8) && a1[1])
    {
      v12 = sub_21A709D98(*(_QWORD *)(v9 + 128), a2, a3, a4, a5, a6, a7, a8);
      if (!(_DWORD)v12)
      {
        v13 = (const __CFString *)a1[1];
        v23 = 0;
        sub_21A693B94(v13, (uint64_t)&v23, (UInt8 *)"%kO", v10, v11, a6, a7, a8, (uint64_t)CFSTR("kAsyncParam_DisconnectMessage"));
        if ((_DWORD)v14)
        {
          v12 = v14;
          if ((_DWORD)v14 != -6727)
          {
LABEL_22:
            sub_21A709E44(*(_QWORD *)(v9 + 128), v15, v16, v17, v18, v19, v20, v21);
            goto LABEL_16;
          }
          v15 = v23;
        }
        else
        {
          v15 = v23;
          if (!v23)
          {
            v12 = 4294960591;
            goto LABEL_22;
          }
        }
        v12 = sub_21A6D5E98(*(_QWORD *)(v9 + 8), v15, v16, v17, v18, v19, v20, v21);
        goto LABEL_22;
      }
    }
    else
    {
      v12 = 4294960591;
    }
LABEL_16:
    sub_21A70AB8C(*(_QWORD *)(v9 + 128), 28, 4, v12, 0, a6, a7, a8);
LABEL_17:
    sub_21A6E26C4(a1, a2, a3, a4, a5, a6, a7, a8);
  }
}

uint64_t sub_21A6D8884(void *context, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  NSObject *v9;
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  if (dword_2550EFCA0 <= 800 && (dword_2550EFCA0 != -1 || sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u)))
    sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"OSStatus BSConfiguration_RPCRenewDHCPLeaseAsync(BSConfigurationContextRef)", 800, (uint64_t)" \n", a5, a6, a7, a8, v16);
  if (!context)
    return 4294960591;
  if (*((_DWORD *)context + 36) != 1634561902)
    return 4294960591;
  v9 = *((_QWORD *)context + 15);
  if (!v9)
    return 4294960591;
  v10 = *((_QWORD *)context + 14);
  if (!v10)
    return 4294960591;
  dispatch_group_async_f(v9, v10, context, (dispatch_function_t)sub_21A6D8944);
  sub_21A70ACEC(*((_QWORD *)context + 16), 27, 0, 0, v11, v12, v13, v14);
  return 0;
}

void sub_21A6D8944(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  if (dword_2550EFCA0 <= 800 && (dword_2550EFCA0 != -1 || sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u)))
    sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"void __BSConfiguration_RPCRenewDHCPLeaseSync(void *)", 800, (uint64_t)" \n", a5, a6, a7, a8, v21);
  if (a1)
  {
    if (*(_DWORD *)(a1 + 144) == 1634561902 && *(_QWORD *)(a1 + 8))
    {
      v13 = sub_21A709D98(*(_QWORD *)(a1 + 128), a2, a3, a4, a5, a6, a7, a8);
      if (!(_DWORD)v13)
      {
        v13 = sub_21A6D6A18(*(_QWORD *)(a1 + 8), v9, v10, v11, v12, a6, a7, a8);
        sub_21A709E44(*(_QWORD *)(a1 + 128), v14, v15, v16, v17, v18, v19, v20);
      }
    }
    else
    {
      v13 = 4294960591;
    }
    sub_21A70AB8C(*(_QWORD *)(a1 + 128), 28, 5, v13, 0, a6, a7, a8);
  }
}

uint64_t sub_21A6D8A18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  CFTypeRef cf;
  void *v22;

  if (dword_2550EFCA0 <= 800 && (dword_2550EFCA0 != -1 || sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u)))
    sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"OSStatus BSConfiguration_RPCWPSStartAsync(BSConfigurationContextRef, Boolean, Boolean, uint32_t)", 800, (uint64_t)" \n", a5, a6, a7, a8, v20);
  if (!a1 || *(_DWORD *)(a1 + 144) != 1634561902 || !*(_QWORD *)(a1 + 120) || !*(_QWORD *)(a1 + 112))
    return 4294960591;
  v22 = 0;
  cf = 0;
  v14 = sub_21A692FEC((const __CFAllocator *)*MEMORY[0x24BDBD240], &cf, (uint64_t)"{%kO=%b%kO=%b%kO=%i}", a4, a5, a6, a7, a8, (uint64_t)CFSTR("kAsyncParam_WPSStart_UsePIN"));
  if (!(_DWORD)v14)
  {
    if (!cf)
      return 0;
    v14 = sub_21A6D804C(a1, cf, &v22, v9, v10, v11, v12, v13);
    if (cf)
    {
      CFRelease(cf);
      cf = 0;
    }
    if (!(_DWORD)v14)
    {
      if (!v22)
        return 4294960568;
      dispatch_group_async_f(*(dispatch_group_t *)(a1 + 120), *(dispatch_queue_t *)(a1 + 112), v22, (dispatch_function_t)sub_21A6D8B8C);
      sub_21A70ACEC(*(_QWORD *)(a1 + 128), 27, 0, 0, v15, v16, v17, v18);
      return 0;
    }
  }
  return v14;
}

void sub_21A6D8B8C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  __int16 v32;

  if (dword_2550EFCA0 <= 800 && (dword_2550EFCA0 != -1 || sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u)))
    sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"void __BSConfiguration_RPCWPSStartSync(void *)", 800, (uint64_t)" \n", a5, a6, a7, a8, v30);
  if (a1)
  {
    v32 = 0;
    v31 = 0;
    if (*((_DWORD *)a1 + 4) == 1634561902)
    {
      v9 = *a1;
      if (*a1)
      {
        if (*(_DWORD *)(v9 + 144) == 1634561902 && *(_QWORD *)(v9 + 8) && a1[1])
        {
          v12 = sub_21A709D98(*(_QWORD *)(v9 + 128), a2, a3, a4, a5, a6, a7, a8);
          if (!(_DWORD)v12)
          {
            sub_21A693B94((const __CFString *)a1[1], (uint64_t)&v32 + 1, (UInt8 *)"%kO:BOOL", v10, v11, a6, a7, a8, (uint64_t)CFSTR("kAsyncParam_WPSStart_UsePIN"));
            v12 = v20;
            if (!(_DWORD)v20)
            {
              sub_21A693B94((const __CFString *)a1[1], (uint64_t)&v32, (UInt8 *)"%kO:BOOL", v15, v16, v17, v18, v19, (uint64_t)CFSTR("kAsyncParam_WPSStart_DayPass"));
              v12 = v21;
              if (!(_DWORD)v21)
              {
                sub_21A693B94((const __CFString *)a1[1], (uint64_t)&v31, (UInt8 *)"%kO:int", v15, v16, v17, v18, v19, (uint64_t)CFSTR("kAsyncParam_WPSStart_Timeout"));
                if (v26)
                {
                  v27 = 300;
                  v31 = 300;
                }
                else
                {
                  v27 = v31;
                }
                v28 = v32;
                *(_BYTE *)(v9 + 89) = v32;
                if (v28)
                  v29 = 86400;
                else
                  v29 = 0xFFFFFFFFLL;
                v12 = sub_21A6D5A84(*(_QWORD *)(v9 + 8), HIBYTE(v32) != 0, v29, v27, v22, v23, v24, v25);
              }
            }
            sub_21A709E44(*(_QWORD *)(v9 + 128), v13, v14, v15, v16, v17, v18, v19);
          }
        }
        else
        {
          v12 = 4294960591;
        }
        sub_21A70AB8C(*(_QWORD *)(v9 + 128), 28, 6, v12, 0, a6, a7, a8);
      }
    }
    sub_21A6E26C4(a1, a2, a3, a4, a5, a6, a7, a8);
  }
}

uint64_t sub_21A6D8D3C(void *context, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  NSObject *v9;
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  if (dword_2550EFCA0 <= 800 && (dword_2550EFCA0 != -1 || sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u)))
    sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"OSStatus BSConfiguration_RPCWPSStopAsync(BSConfigurationContextRef)", 800, (uint64_t)" \n", a5, a6, a7, a8, v16);
  if (!context)
    return 4294960591;
  if (*((_DWORD *)context + 36) != 1634561902)
    return 4294960591;
  v9 = *((_QWORD *)context + 15);
  if (!v9)
    return 4294960591;
  v10 = *((_QWORD *)context + 14);
  if (!v10)
    return 4294960591;
  dispatch_group_async_f(v9, v10, context, (dispatch_function_t)sub_21A6D8DFC);
  sub_21A70ACEC(*((_QWORD *)context + 16), 27, 0, 0, v11, v12, v13, v14);
  return 0;
}

void sub_21A6D8DFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  CFTypeRef cf;
  void *v29;
  char v30;
  char v31[21];
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  if (dword_2550EFCA0 <= 800 && (dword_2550EFCA0 != -1 || sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u)))
    sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"void __BSConfiguration_RPCWPSStopSync(void *)", 800, (uint64_t)" \n", a5, a6, a7, a8, v27);
  if (a1)
  {
    if (*(_DWORD *)(a1 + 144) == 1634561902 && *(_QWORD *)(a1 + 8))
    {
      v13 = sub_21A709D98(*(_QWORD *)(a1 + 128), a2, a3, a4, a5, a6, a7, a8);
      if (!(_DWORD)v13)
      {
        v13 = sub_21A6D5C0C(*(_QWORD *)(a1 + 8), v9, v10, v11, v12, a6, a7, a8);
        if (!(_DWORD)v13)
        {
          if (dword_2550EFCA0 <= 800 && (dword_2550EFCA0 != -1 || sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u)))
            sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"OSStatus _BSConfiguration_WPSUpdateTimedAccess(BSConfigurationContextRef)", 800, (uint64_t)" \n", v17, v18, v19, v20, v27);
          if (*(_DWORD *)(a1 + 144) == 1634561902 && (v21 = *(_QWORD *)(a1 + 8)) != 0)
          {
            v13 = sub_21A6D523C(v21, 1633895790);
            if (!(_DWORD)v13)
            {
              v30 = 0;
              sub_21A6D6E44(v31, 0x15uLL);
              v13 = sub_21A6D45AC(*(_QWORD *)(a1 + 8), v31, &v30);
              if (!(_DWORD)v13)
              {
                if (v30)
                {
                  cf = 0;
                  v29 = 0;
                  sub_21A692FEC((const __CFAllocator *)*MEMORY[0x24BDBD240], &cf, (uint64_t)"{%kO=%i%kO=%b}", v16, v17, v18, v19, v20, (uint64_t)CFSTR("kAsyncParam_Refresh_BSSetting"));
                  v13 = sub_21A6D804C(a1, cf, &v29, v22, v23, v24, v25, v26);
                  if (cf)
                  {
                    CFRelease(cf);
                    cf = 0;
                  }
                  if (!(_DWORD)v13)
                  {
                    if (v29)
                    {
                      sub_21A6E276C((const __CFString **)v29, v14, v15, v16, v17, v18, v19, v20);
                      v13 = 0;
                    }
                    else
                    {
                      v13 = 4294960568;
                    }
                  }
                }
              }
            }
          }
          else
          {
            v13 = 4294960591;
          }
        }
        sub_21A709E44(*(_QWORD *)(a1 + 128), (uint64_t)v14, v15, v16, v17, v18, v19, v20);
      }
    }
    else
    {
      v13 = 4294960591;
    }
    sub_21A70AB8C(*(_QWORD *)(a1 + 128), 28, 7, v13, 0, a6, a7, a8);
  }
}

uint64_t sub_21A6D9040(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  CFTypeRef cf;
  void *context;

  if (dword_2550EFCA0 <= 800 && (dword_2550EFCA0 != -1 || sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u)))
    sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"OSStatus BSConfiguration_RPCWPSAllowClientAsync(BSConfigurationContextRef, CFStringRef)", 800, (uint64_t)" \n", a5, a6, a7, a8, v20);
  if (!a1 || *(_DWORD *)(a1 + 144) != 1634561902 || !*(_QWORD *)(a1 + 120) || !*(_QWORD *)(a1 + 112))
    return 4294960591;
  cf = 0;
  context = 0;
  v14 = sub_21A692FEC((const __CFAllocator *)*MEMORY[0x24BDBD240], &cf, (uint64_t)"{%kO=%O}", a4, a5, a6, a7, a8, (uint64_t)CFSTR("kAsyncParam_WPSAllowClient_PIN"));
  if (!(_DWORD)v14)
  {
    if (!cf)
      return 0;
    v14 = sub_21A6D804C(a1, cf, &context, v9, v10, v11, v12, v13);
    if (cf)
    {
      CFRelease(cf);
      cf = 0;
    }
    if (!(_DWORD)v14)
    {
      if (!context)
        return 4294960568;
      dispatch_group_async_f(*(dispatch_group_t *)(a1 + 120), *(dispatch_queue_t *)(a1 + 112), context, (dispatch_function_t)sub_21A6D9180);
      sub_21A70ACEC(*(_QWORD *)(a1 + 128), 27, 0, 0, v15, v16, v17, v18);
      return 0;
    }
  }
  return v14;
}

void sub_21A6D9180(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const __CFDictionary *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const __CFDictionary *v22;
  uint64_t v23;

  if (dword_2550EFCA0 <= 800 && (dword_2550EFCA0 != -1 || sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u)))
    sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"void __BSConfiguration_RPCWPSAllowClientSync(void *)", 800, (uint64_t)" \n", a5, a6, a7, a8, v21);
  if (a1)
  {
    v22 = 0;
    v23 = 0;
    if (*((_DWORD *)a1 + 4) != 1634561902)
      goto LABEL_20;
    v9 = *a1;
    if (!*a1)
      goto LABEL_20;
    if (*(_DWORD *)(v9 + 144) == 1634561902 && *(_QWORD *)(v9 + 8) && a1[1])
    {
      v12 = sub_21A709D98(*(_QWORD *)(v9 + 128), a2, a3, a4, a5, a6, a7, a8);
      if (!(_DWORD)v12)
      {
        sub_21A693B94((const __CFString *)a1[1], (uint64_t)&v23, (UInt8 *)"%kO", v10, v11, a6, a7, a8, (uint64_t)CFSTR("kAsyncParam_WPSAllowClient_PIN"));
        v12 = v20;
        if (!(_DWORD)v20)
        {
          if (!v23)
          {
LABEL_22:
            v12 = 4294960568;
            goto LABEL_23;
          }
          v12 = sub_21A692FEC((const __CFAllocator *)*MEMORY[0x24BDBD240], (CFTypeRef *)&v22, (uint64_t)"{%kO=%O%kO=%i%kO=%D%kO=%O}", v15, v16, v17, v18, v19, (uint64_t)CFSTR("pin"));
          if (!(_DWORD)v12)
          {
            v13 = v22;
            if (v22)
            {
              v12 = sub_21A6D5D44(*(_QWORD *)(v9 + 8), v22);
              if (v22)
              {
                CFRelease(v22);
                v22 = 0;
              }
              goto LABEL_23;
            }
            goto LABEL_22;
          }
        }
LABEL_23:
        sub_21A709E44(*(_QWORD *)(v9 + 128), (uint64_t)v13, v14, v15, v16, v17, v18, v19);
      }
    }
    else
    {
      v12 = 4294960591;
    }
    sub_21A70AB8C(*(_QWORD *)(v9 + 128), 28, 8, v12, 0, a6, a7, a8);
LABEL_20:
    sub_21A6E26C4(a1, a2, a3, a4, a5, a6, a7, a8);
  }
}

uint64_t sub_21A6D9354(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (dword_2550EFCA0 <= 800 && (dword_2550EFCA0 != -1 || sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u)))
    sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"OSStatus BSConfiguration_TaskRestartAsync(BSConfigurationContextRef)", 800, (uint64_t)" \n", a5, a6, a7, a8, v14);
  if (!a1 || *(_DWORD *)(a1 + 144) != 1634561902 || !*(_QWORD *)(a1 + 120))
    return 4294960591;
  result = sub_21A6D7BCC(a1, 3u, a3, a4, a5, a6, a7, a8);
  if (!(_DWORD)result)
  {
    dispatch_group_async_f(*(dispatch_group_t *)(a1 + 120), *(dispatch_queue_t *)(a1 + 112), (void *)a1, (dispatch_function_t)sub_21A6D9420);
    sub_21A6DA0E8(a1, 3, 0, 1, v10, v11, v12, v13);
    return 0;
  }
  return result;
}

void sub_21A6D9420(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  const __CFString *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  const __CFString *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  CFTypeRef v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  int v39;
  const char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  BOOL v44;
  BOOL v45;
  uint64_t v46;
  CFTypeRef v47;
  CFTypeRef cf;
  const __CFString *v49;

  if (dword_2550EFCA0 <= 800 && (dword_2550EFCA0 != -1 || sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u)))
    sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"void __BSConfiguration_TaskRestartSync(void *)", 800, (uint64_t)" \n", a5, a6, a7, a8, v43);
  v49 = 0;
  cf = 0;
  v46 = 0;
  if (a1)
  {
    v47 = 0;
    v45 = 0;
    if (*(_DWORD *)(a1 + 144) != 1634561902 || !*(_QWORD *)(a1 + 8))
    {
      v17 = 0;
      v20 = 4294960591;
      goto LABEL_13;
    }
    v9 = sub_21A68EE6C(*(const __CFString **)a1, a2, a3, a4, a5, a6, a7, a8);
    v17 = v9;
    if (v9)
      CFRetain(v9);
    v18 = sub_21A709D98(*(_QWORD *)(a1 + 128), v10, v11, v12, v13, v14, v15, v16);
    if ((_DWORD)v18)
    {
      v20 = v18;
LABEL_13:
      sub_21A6D7BCC(a1, 0, a3, a4, a5, a6, a7, a8);
      sub_21A6E2F9C(a1, 3, 0, v20, v21, v22, v23, v24);
      if (v49)
      {
        CFRelease(v49);
        v49 = 0;
      }
      if (cf)
      {
        CFRelease(cf);
        cf = 0;
      }
      if (v17)
        CFRelease(v17);
      return;
    }
    if (dword_2550EFCA0 <= 800 && (dword_2550EFCA0 != -1 || sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u)))
      sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"void __BSConfiguration_TaskRestartSync(void *)", 800, (uint64_t)"\n\n\t\t          \t\t++++++++++ Config phase: \"%s\" ++++++++++\n\n", a5, a6, a7, a8, (uint64_t)"Stopping monitoring");
    v20 = sub_21A6E2A54(a1, v19, a3, a4, a5, a6, a7, a8);
    if ((_DWORD)v20)
      goto LABEL_78;
    if (dword_2550EFCA0 <= 800 && (dword_2550EFCA0 != -1 || sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u)))
      sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"void __BSConfiguration_TaskRestartSync(void *)", 800, (uint64_t)"\n\n\t\t          \t\t---------- Config phase: \"%s\" ----------\n\n", v28, v29, v30, v31, (uint64_t)"Stopping monitoring");
    v44 = 0;
    v20 = sub_21A6E2AB0(a1, (CFTypeRef *)&v49, &cf, &v46, &v45, &v44);
    if ((_DWORD)v20)
      goto LABEL_78;
    if (dword_2550EFCA0 <= 800)
    {
      if (dword_2550EFCA0 != -1 || sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u))
        sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"void __BSConfiguration_TaskRestartSync(void *)", 800, (uint64_t)"finalNetworkName: %@ goingAwayNetwork: %@ networkMaytransition: %d deviceMayLoseTouch: %d \n", v28, v29, v30, v31, (uint64_t)v49);
      if (dword_2550EFCA0 <= 800 && (dword_2550EFCA0 != -1 || sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u)))
        sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"void __BSConfiguration_TaskRestartSync(void *)", 800, (uint64_t)"\n\n\t\t          \t\t++++++++++ Config phase: \"%s\" ++++++++++\n\n", v28, v29, v30, v31, (uint64_t)"Sending restart action");
    }
    sub_21A70ACEC(*(_QWORD *)(a1 + 128), 20, 0, (uint64_t)v17, v28, v29, v30, v31);
    v20 = sub_21A6D5338(*(_QWORD *)(a1 + 8), 1633899074, v32, v33, v34, v35, v36, v37);
    if ((_DWORD)v20)
      goto LABEL_78;
    if (dword_2550EFCA0 <= 800 && (dword_2550EFCA0 != -1 || sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u)))
      sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"void __BSConfiguration_TaskRestartSync(void *)", 800, (uint64_t)"\n\n\t\t          \t\t---------- Config phase: \"%s\" ----------\n\n", v28, v29, v30, v31, (uint64_t)"Sending restart action");
    sub_21A70ACEC(*(_QWORD *)(a1 + 128), 21, 0, (uint64_t)v17, v28, v29, v30, v31);
    if (*(_DWORD *)(a1 + 144) != 1634561902)
    {
      v20 = 4294960591;
      goto LABEL_78;
    }
    v20 = sub_21A70AFE4(*(_QWORD *)(a1 + 128), 1u, v26, v27, v28, v29, v30, v31);
    if ((_DWORD)v20)
      goto LABEL_78;
    if (v46)
    {
      if (dword_2550EFCA0 <= 800 && (dword_2550EFCA0 != -1 || sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u)))
        sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"void __BSConfiguration_TaskRestartSync(void *)", 800, (uint64_t)"\n\n\t\t          \t\t++++++++++ Config phase: \"%s\" ++++++++++\n\n", v28, v29, v30, v31, (uint64_t)"Disassociating");
      v20 = sub_21A70B94C(*(_QWORD *)(a1 + 128));
      if ((_DWORD)v20)
        goto LABEL_78;
      if (dword_2550EFCA0 <= 800)
      {
        if (dword_2550EFCA0 != -1 || sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u))
          sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"void __BSConfiguration_TaskRestartSync(void *)", 800, (uint64_t)"\n\n\t\t          \t\t---------- Config phase: \"%s\" ----------\n\n", v28, v29, v30, v31, (uint64_t)"Disassociating");
        if (dword_2550EFCA0 <= 800 && (dword_2550EFCA0 != -1 || sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u)))
          sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"void __BSConfiguration_TaskRestartSync(void *)", 800, (uint64_t)"\n\n\t\t          \t\t++++++++++ Config phase: \"%s\" ++++++++++\n\n", v28, v29, v30, v31, (uint64_t)"Clearing Scan Cache");
      }
      v20 = sub_21A70C004(*(_QWORD *)(a1 + 128), (uint64_t)v25, v26, v27, v28, v29, v30, v31);
      if ((_DWORD)v20)
        goto LABEL_78;
      if (dword_2550EFCA0 > 800)
      {
LABEL_68:
        sub_21A68E77C(*(const __CFString **)a1);
        v39 = v38;
        if (dword_2550EFCA0 <= 800 && (dword_2550EFCA0 != -1 || sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u)))
        {
          if (v39)
            v40 = "base station is remote\n";
          else
            v40 = "base station is not remote\n";
          sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"void __BSConfiguration_TaskRestartSync(void *)", 800, (uint64_t)v40, v28, v29, v30, v31, v43);
        }
        if (v39 == 1)
        {
LABEL_76:
          v20 = 0;
          goto LABEL_78;
        }
        if (dword_2550EFCA0 <= 800)
        {
          if (dword_2550EFCA0 != -1 || sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u))
            sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"void __BSConfiguration_TaskRestartSync(void *)", 800, (uint64_t)"\n\n\t\t          \t\t---------- Config phase: \"%s\" ----------\n\n", v28, v29, v30, v31, (uint64_t)"Determining if base station is remote");
          if (dword_2550EFCA0 <= 800)
          {
            if (dword_2550EFCA0 != -1 || sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u))
              sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"void __BSConfiguration_TaskRestartSync(void *)", 800, (uint64_t)"\n\n\t\t          \t\t++++++++++ Config phase: \"%s\" ++++++++++\n\n", v28, v29, v30, v31, (uint64_t)"Pausing after restart");
            if (dword_2550EFCA0 <= 800 && (dword_2550EFCA0 != -1 || sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u)))
              sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"void __BSConfiguration_TaskRestartSync(void *)", 800, (uint64_t)"pausing for: %d secs\n", v28, v29, v30, v31, 20);
          }
        }
        v20 = sub_21A70BD94(*(_QWORD *)(a1 + 128), 20);
        if ((_DWORD)v20)
          goto LABEL_78;
        if (dword_2550EFCA0 <= 800 && (dword_2550EFCA0 != -1 || sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u)))
          sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"void __BSConfiguration_TaskRestartSync(void *)", 800, (uint64_t)"\n\n\t\t          \t\t---------- Config phase: \"%s\" ----------\n\n", v28, v29, v30, v31, (uint64_t)"Pausing after restart");
        if (v49)
        {
          if (v45)
          {
            if (dword_2550EFCA0 <= 800)
            {
              if (dword_2550EFCA0 != -1 || sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u))
                sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"void __BSConfiguration_TaskRestartSync(void *)", 800, (uint64_t)"\n\n\t\t          \t\t++++++++++ Config phase: \"%s\" ++++++++++\n\n", v28, v29, v30, v31, (uint64_t)"Network transition pause");
              if (dword_2550EFCA0 <= 800 && (dword_2550EFCA0 != -1 || sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u)))
                sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"void __BSConfiguration_TaskRestartSync(void *)", 800, (uint64_t)"pausing for: %d secs\n", v28, v29, v30, v31, 20);
            }
            v20 = sub_21A70BD94(*(_QWORD *)(a1 + 128), 20);
            if ((_DWORD)v20)
              goto LABEL_78;
            if (dword_2550EFCA0 <= 800 && (dword_2550EFCA0 != -1 || sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u)))
              sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"void __BSConfiguration_TaskRestartSync(void *)", 800, (uint64_t)"\n\n\t\t          \t\t---------- Config phase: \"%s\" ----------\n\n", v28, v29, v30, v31, (uint64_t)"Network transition pause");
          }
          if (!sub_21A70B84C(*(_QWORD *)(a1 + 128), v49, 0, v27, v28, v29, v30, v31))
          {
            if (dword_2550EFCA0 <= 800 && (dword_2550EFCA0 != -1 || sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u)))
              sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"void __BSConfiguration_TaskRestartSync(void *)", 800, (uint64_t)"\n\n\t\t          \t\t++++++++++ Config phase: \"%s\" ++++++++++\n\n", v28, v29, v30, v31, (uint64_t)"Joining Network");
            v20 = sub_21A70DE00(*(_QWORD *)(a1 + 128), v49, (const __CFString *)cf, 1, 0, v29, v30, v31);
            if ((_DWORD)v20)
              goto LABEL_78;
            if (dword_2550EFCA0 > 800)
            {
LABEL_116:
              if (!sub_21A68F0A8(*(const __CFString **)a1, (uint64_t)v25, v26, v27, v28, v29, v30, v31))
              {
                if (dword_2550EFCA0 <= 800)
                {
                  if (dword_2550EFCA0 != -1 || sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u))
                    sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"void __BSConfiguration_TaskRestartSync(void *)", 800, (uint64_t)"\n\n\t\t          \t\t++++++++++ Config phase: \"%s\" ++++++++++\n\n", v41, v42, v30, v31, (uint64_t)"No bonjour seed pause");
                  if (dword_2550EFCA0 <= 800
                    && (dword_2550EFCA0 != -1 || sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u)))
                  {
                    sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"void __BSConfiguration_TaskRestartSync(void *)", 800, (uint64_t)"pausing for: %d secs\n", v41, v42, v30, v31, 8);
                  }
                }
                v20 = sub_21A70BD94(*(_QWORD *)(a1 + 128), 8);
                if ((_DWORD)v20)
                  goto LABEL_78;
                if (dword_2550EFCA0 <= 800
                  && (dword_2550EFCA0 != -1 || sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u)))
                {
                  sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"void __BSConfiguration_TaskRestartSync(void *)", 800, (uint64_t)"\n\n\t\t          \t\t---------- Config phase: \"%s\" ----------\n\n", v28, v29, v30, v31, (uint64_t)"No bonjour seed pause");
                }
              }
              v20 = sub_21A70D318(*(_QWORD *)(a1 + 128), v17, *(const __CFString **)a1, 1, 120, &v47, v30, v31);
              if (!(_DWORD)v20)
              {
                v25 = v47;
                if (!v47)
                {
                  v20 = 4294960568;
                  goto LABEL_78;
                }
                v20 = sub_21A6E2D80(a1, (const __CFString *)v47);
                if (v47)
                {
                  CFRelease(v47);
                  v47 = 0;
                }
                if ((_DWORD)v20)
                  goto LABEL_78;
                if (dword_2550EFCA0 <= 800)
                {
                  if (dword_2550EFCA0 != -1 || sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u))
                    sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"void __BSConfiguration_TaskRestartSync(void *)", 800, (uint64_t)"\n\n\t\t          \t\t---------- Config phase: \"%s\" ----------\n\n", v28, v29, v30, v31, (uint64_t)"Final waiting for target base after restart");
                  if (dword_2550EFCA0 <= 800
                    && (dword_2550EFCA0 != -1 || sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u)))
                  {
                    sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"void __BSConfiguration_TaskRestartSync(void *)", 800, (uint64_t)"\n\n\t\t          \t\t++++++++++ Config phase: \"%s\" ++++++++++\n\n", v28, v29, v30, v31, (uint64_t)"Rereading settings after restart");
                  }
                }
                v20 = sub_21A6DE984(a1, 0, *(const __CFString **)a1, *(_QWORD *)(a1 + 8), 0, 0, 0, v31);
                if ((_DWORD)v20)
                  goto LABEL_78;
                if (dword_2550EFCA0 <= 800)
                {
                  if (dword_2550EFCA0 != -1 || sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u))
                    sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"void __BSConfiguration_TaskRestartSync(void *)", 800, (uint64_t)"\n\n\t\t          \t\t---------- Config phase: \"%s\" ----------\n\n", v28, v29, v30, v31, (uint64_t)"Rereading settings after restart");
                  if (dword_2550EFCA0 <= 800
                    && (dword_2550EFCA0 != -1 || sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u)))
                  {
                    sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"void __BSConfiguration_TaskRestartSync(void *)", 800, (uint64_t)"\n\n\t\t          \t\t++++++++++ Config phase: \"%s\" ++++++++++\n\n", v28, v29, v30, v31, (uint64_t)"Checking if monitoring needs restored");
                  }
                }
                v20 = sub_21A6E2E9C(a1, (uint64_t)v25, v26, v27, v28, v29, v30, v31);
                if ((_DWORD)v20)
                  goto LABEL_78;
                if (dword_2550EFCA0 <= 800
                  && (dword_2550EFCA0 != -1 || sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u)))
                {
                  sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"void __BSConfiguration_TaskRestartSync(void *)", 800, (uint64_t)"\n\n\t\t          \t\t---------- Config phase: \"%s\" ----------\n\n", v28, v29, v30, v31, (uint64_t)"Checking if monitoring needs restored");
                }
                goto LABEL_76;
              }
LABEL_78:
              sub_21A709E44(*(_QWORD *)(a1 + 128), (uint64_t)v25, v26, v27, v28, v29, v30, v31);
              goto LABEL_13;
            }
            if (dword_2550EFCA0 != -1 || sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u))
              sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"void __BSConfiguration_TaskRestartSync(void *)", 800, (uint64_t)"\n\n\t\t          \t\t---------- Config phase: \"%s\" ----------\n\n", v28, v29, v30, v31, (uint64_t)"Joining Network");
          }
        }
        if (dword_2550EFCA0 <= 800 && (dword_2550EFCA0 != -1 || sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u)))
          sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"void __BSConfiguration_TaskRestartSync(void *)", 800, (uint64_t)"\n\n\t\t          \t\t++++++++++ Config phase: \"%s\" ++++++++++\n\n", v28, v29, v30, v31, (uint64_t)"Final waiting for target base");
        goto LABEL_116;
      }
      if (dword_2550EFCA0 != -1 || sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u))
        sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"void __BSConfiguration_TaskRestartSync(void *)", 800, (uint64_t)"\n\n\t\t          \t\t---------- Config phase: \"%s\" ----------\n\n", v28, v29, v30, v31, (uint64_t)"Clearing Scan Cache");
    }
    if (dword_2550EFCA0 <= 800 && (dword_2550EFCA0 != -1 || sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u)))
      sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"void __BSConfiguration_TaskRestartSync(void *)", 800, (uint64_t)"\n\n\t\t          \t\t++++++++++ Config phase: \"%s\" ++++++++++\n\n", v28, v29, v30, v31, (uint64_t)"Determining if base station is remote");
    goto LABEL_68;
  }
}

void sub_21A6DA0E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  CFTypeRef v13;

  if (*(_DWORD *)(a1 + 144) == 1634561902)
  {
    v13 = 0;
    if (!sub_21A692FEC((const __CFAllocator *)*MEMORY[0x24BDBD240], &v13, (uint64_t)"{%kO=%i%kO=%i%kO=%b}", a4, a5, a6, a7, a8, (uint64_t)CFSTR("kBSConfigurationTaskStart_TaskState")))
    {
      if (v13)
      {
        sub_21A70A778(*(_QWORD *)(a1 + 128), 29, 0, (uint64_t)v13, v9, v10, v11, v12);
        if (v13)
          CFRelease(v13);
      }
    }
  }
}

uint64_t sub_21A6DA190(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  CFTypeRef cf;
  void *context;

  if (dword_2550EFCA0 <= 800 && (dword_2550EFCA0 != -1 || sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u)))
    sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"OSStatus BSConfiguration_TaskRestoreDefaultsAsync(BSConfigurationContextRef, Boolean)", 800, (uint64_t)" \n", a5, a6, a7, a8, v26);
  context = 0;
  if (!a1 || *(_DWORD *)(a1 + 144) != 1634561902 || !*(_QWORD *)(a1 + 120))
    return 4294960591;
  v14 = sub_21A6D7BCC(a1, 4u, a3, a4, a5, a6, a7, a8);
  if (!(_DWORD)v14)
  {
    cf = 0;
    v14 = sub_21A692FEC((const __CFAllocator *)*MEMORY[0x24BDBD240], &cf, (uint64_t)"{%ks=%b}", v9, v10, v11, v12, v13, (uint64_t)"AsyncParam_WaitAndJoinFlag");
    if ((_DWORD)v14)
    {
LABEL_10:
      sub_21A6D7BCC(a1, 0, (uint64_t)v15, v16, v17, v18, v19, v20);
      return v14;
    }
    if (cf)
    {
      v14 = sub_21A6D804C(a1, cf, &context, v16, v17, v18, v19, v20);
      if (cf)
      {
        CFRelease(cf);
        cf = 0;
      }
      if ((_DWORD)v14)
        goto LABEL_10;
      v15 = context;
      if (!context)
      {
        v14 = 4294960568;
        goto LABEL_10;
      }
      dispatch_group_async_f(*(dispatch_group_t *)(a1 + 120), *(dispatch_queue_t *)(a1 + 112), context, (dispatch_function_t)sub_21A6DA2FC);
      sub_21A6DA0E8(a1, 4, 0, 1, v22, v23, v24, v25);
    }
    return 0;
  }
  return v14;
}

void sub_21A6DA2FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  const __CFString *v9;
  uint64_t v10;
  const __CFString *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const __CFString *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  CFTypeRef v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  int v44;
  const char *v45;
  uint64_t v46;
  uint64_t v47;
  CFTypeRef v48;
  __int16 v49;
  CFTypeRef v50;
  CFTypeRef v51;
  CFTypeRef cf;
  char v53;

  if (dword_2550EFCA0 <= 800 && (dword_2550EFCA0 != -1 || sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u)))
    sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"void __BSConfiguration_TaskRestoreDefaultsSync(void *)", 800, (uint64_t)" \n", a5, a6, a7, a8, v46);
  v51 = 0;
  cf = 0;
  v50 = 0;
  if (a1)
  {
    v9 = 0;
    v53 = 0;
    v49 = 0;
    v48 = 0;
    if (*(_DWORD *)(a1 + 16) == 1634561902)
    {
      v10 = *(_QWORD *)a1;
      if (*(_QWORD *)a1)
      {
        if (*(_DWORD *)(v10 + 144) != 1634561902
          || !*(_QWORD *)(v10 + 8)
          || (v11 = *(const __CFString **)(a1 + 8)) == 0)
        {
          v9 = 0;
          v14 = 4294960591;
          goto LABEL_14;
        }
        sub_21A693B94(v11, (uint64_t)&v53, (UInt8 *)"%ks:BOOL", a4, a5, a6, a7, a8, (uint64_t)"AsyncParam_WaitAndJoinFlag");
        if ((_DWORD)v12)
        {
          v14 = v12;
          v9 = 0;
          goto LABEL_14;
        }
        v19 = sub_21A68EE6C(*(const __CFString **)v10, v13, a3, a4, a5, a6, a7, a8);
        v9 = v19;
        if (v19)
          CFRetain(v19);
        v27 = sub_21A709D98(*(_QWORD *)(v10 + 128), v20, v21, v22, v23, v24, v25, v26);
        if ((_DWORD)v27)
        {
          v14 = v27;
          goto LABEL_14;
        }
        if (dword_2550EFCA0 <= 800 && (dword_2550EFCA0 != -1 || sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u)))
          sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"void __BSConfiguration_TaskRestoreDefaultsSync(void *)", 800, (uint64_t)"\n\n\t\t          \t\t++++++++++ Config phase: \"%s\" ++++++++++\n\n", a5, a6, a7, a8, (uint64_t)"Stopping monitoring");
        v14 = sub_21A6E2A54(v10, v28, a3, a4, a5, a6, a7, a8);
        if ((_DWORD)v14)
          goto LABEL_48;
        if (dword_2550EFCA0 <= 800)
        {
          if (dword_2550EFCA0 != -1 || sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u))
            sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"void __BSConfiguration_TaskRestoreDefaultsSync(void *)", 800, (uint64_t)"\n\n\t\t          \t\t---------- Config phase: \"%s\" ----------\n\n", v32, v33, v34, v35, (uint64_t)"Stopping monitoring");
          if (dword_2550EFCA0 <= 800 && (dword_2550EFCA0 != -1 || sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u)))
            sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"void __BSConfiguration_TaskRestoreDefaultsSync(void *)", 800, (uint64_t)"\n\n\t\t          \t\t++++++++++ Config phase: \"%s\" ++++++++++\n\n", v32, v33, v34, v35, (uint64_t)"Sending restore defaults action");
        }
        sub_21A70ACEC(*(_QWORD *)(v10 + 128), 20, 0, (uint64_t)v9, v32, v33, v34, v35);
        v14 = sub_21A6D7078(*(_QWORD *)(v10 + 8), v36, v37, v38, v39, v40, v41, v42);
        if ((_DWORD)v14)
          goto LABEL_48;
        if (dword_2550EFCA0 <= 800 && (dword_2550EFCA0 != -1 || sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u)))
          sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"void __BSConfiguration_TaskRestoreDefaultsSync(void *)", 800, (uint64_t)"\n\n\t\t          \t\t---------- Config phase: \"%s\" ----------\n\n", v32, v33, v34, v35, (uint64_t)"Sending restore defaults action");
        sub_21A70ACEC(*(_QWORD *)(v10 + 128), 21, 0, (uint64_t)v9, v32, v33, v34, v35);
        v14 = sub_21A6E2AB0(v10, &cf, &v51, &v50, (BOOL *)&v49 + 1, (BOOL *)&v49);
        if ((_DWORD)v14)
        {
LABEL_48:
          sub_21A709E44(*(_QWORD *)(v10 + 128), (uint64_t)v29, v30, v31, v32, v33, v34, v35);
LABEL_14:
          sub_21A6D7BCC(v10, 0, a3, a4, a5, a6, a7, a8);
          sub_21A6E2F9C(v10, 4, 0, v14, v15, v16, v17, v18);
          if (cf)
          {
            CFRelease(cf);
            cf = 0;
          }
          goto LABEL_17;
        }
        if (dword_2550EFCA0 <= 800 && (dword_2550EFCA0 != -1 || sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u)))
          sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"void __BSConfiguration_TaskRestoreDefaultsSync(void *)", 800, (uint64_t)"finalNetworkName: %@ goingAwayNetwork: %@ networkMaytransition: %d deviceMayLoseTouch: %d \n", v32, v33, v34, v35, (uint64_t)cf);
        if (v50)
        {
          if (dword_2550EFCA0 <= 800 && (dword_2550EFCA0 != -1 || sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u)))
            sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"void __BSConfiguration_TaskRestoreDefaultsSync(void *)", 800, (uint64_t)"\n\n\t\t          \t\t++++++++++ Config phase: \"%s\" ++++++++++\n\n", v32, v33, v34, v35, (uint64_t)"Disassociating");
          v14 = sub_21A70B94C(*(_QWORD *)(v10 + 128));
          if ((_DWORD)v14)
            goto LABEL_48;
          if (dword_2550EFCA0 <= 800)
          {
            if (dword_2550EFCA0 != -1 || sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u))
              sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"void __BSConfiguration_TaskRestoreDefaultsSync(void *)", 800, (uint64_t)"\n\n\t\t          \t\t---------- Config phase: \"%s\" ----------\n\n", v32, v33, v34, v35, (uint64_t)"Disassociating");
            if (dword_2550EFCA0 <= 800 && (dword_2550EFCA0 != -1 || sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u)))
              sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"void __BSConfiguration_TaskRestoreDefaultsSync(void *)", 800, (uint64_t)"\n\n\t\t          \t\t++++++++++ Config phase: \"%s\" ++++++++++\n\n", v32, v33, v34, v35, (uint64_t)"Clearing Scan Cache");
          }
          v14 = sub_21A70C004(*(_QWORD *)(v10 + 128), (uint64_t)v29, v30, v31, v32, v33, v34, v35);
          if ((_DWORD)v14)
            goto LABEL_48;
          if (dword_2550EFCA0 <= 800)
          {
            if (dword_2550EFCA0 != -1 || sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u))
              sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"void __BSConfiguration_TaskRestoreDefaultsSync(void *)", 800, (uint64_t)"\n\n\t\t          \t\t---------- Config phase: \"%s\" ----------\n\n", v32, v33, v34, v35, (uint64_t)"Clearing Scan Cache");
            if (dword_2550EFCA0 <= 800 && (dword_2550EFCA0 != -1 || sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u)))
              sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"void __BSConfiguration_TaskRestoreDefaultsSync(void *)", 800, (uint64_t)"\n\n\t\t          \t\t++++++++++ Config phase: \"%s\" ++++++++++\n\n", v32, v33, v34, v35, (uint64_t)"Waiting for network to GO AWAY");
          }
          v14 = sub_21A70BB98(*(_QWORD *)(v10 + 128), (const __CFString *)v50, *(const __CFString **)v10);
          if ((_DWORD)v14)
            goto LABEL_48;
          if (dword_2550EFCA0 > 800)
          {
LABEL_85:
            sub_21A68E77C(*(const __CFString **)v10);
            v44 = v43;
            if (dword_2550EFCA0 <= 800 && (dword_2550EFCA0 != -1 || sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u)))
            {
              if (v44)
                v45 = "base station is remote\n";
              else
                v45 = "base station is not remote\n";
              sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"void __BSConfiguration_TaskRestoreDefaultsSync(void *)", 800, (uint64_t)v45, v32, v33, v34, v35, v47);
            }
            if (v44 == 1)
              goto LABEL_147;
            if (dword_2550EFCA0 <= 800 && (dword_2550EFCA0 != -1 || sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u)))
              sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"void __BSConfiguration_TaskRestoreDefaultsSync(void *)", 800, (uint64_t)"\n\n\t\t          \t\t---------- Config phase: \"%s\" ----------\n\n", v32, v33, v34, v35, (uint64_t)"Determining if base station is remote");
            if (!v53)
              goto LABEL_147;
            if (cf)
            {
              if (HIBYTE(v49) && !v50)
              {
                if (dword_2550EFCA0 <= 800)
                {
                  if (dword_2550EFCA0 != -1 || sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u))
                    sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"void __BSConfiguration_TaskRestoreDefaultsSync(void *)", 800, (uint64_t)"\n\n\t\t          \t\t++++++++++ Config phase: \"%s\" ++++++++++\n\n", v32, v33, v34, v35, (uint64_t)"Network transition pause");
                  if (dword_2550EFCA0 <= 800
                    && (dword_2550EFCA0 != -1 || sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u)))
                  {
                    sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"void __BSConfiguration_TaskRestoreDefaultsSync(void *)", 800, (uint64_t)"pausing for: %d secs\n", v32, v33, v34, v35, 40);
                  }
                }
                v14 = sub_21A70BD94(*(_QWORD *)(v10 + 128), 40);
                if ((_DWORD)v14)
                  goto LABEL_48;
                if (dword_2550EFCA0 <= 800
                  && (dword_2550EFCA0 != -1 || sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u)))
                {
                  sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"void __BSConfiguration_TaskRestoreDefaultsSync(void *)", 800, (uint64_t)"\n\n\t\t          \t\t---------- Config phase: \"%s\" ----------\n\n", v32, v33, v34, v35, (uint64_t)"Network transition pause");
                }
              }
              if (!sub_21A70B84C(*(_QWORD *)(v10 + 128), (const __CFString *)cf, 0, v31, v32, v33, v34, v35))
              {
                if (dword_2550EFCA0 <= 800
                  && (dword_2550EFCA0 != -1 || sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u)))
                {
                  sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"void __BSConfiguration_TaskRestoreDefaultsSync(void *)", 800, (uint64_t)"\n\n\t\t          \t\t++++++++++ Config phase: \"%s\" ++++++++++\n\n", v32, v33, v34, v35, (uint64_t)"Joining Network");
                }
                v14 = sub_21A70DE00(*(_QWORD *)(v10 + 128), (const __CFString *)cf, (const __CFString *)v51, 1, 0, v33, v34, v35);
                if ((_DWORD)v14)
                  goto LABEL_48;
                if (dword_2550EFCA0 <= 800
                  && (dword_2550EFCA0 != -1 || sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u)))
                {
                  sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"void __BSConfiguration_TaskRestoreDefaultsSync(void *)", 800, (uint64_t)"\n\n\t\t          \t\t---------- Config phase: \"%s\" ----------\n\n", v32, v33, v34, v35, (uint64_t)"Joining Network");
                }
              }
            }
            if (!sub_21A68F0A8(*(const __CFString **)v10, (uint64_t)v29, v30, v31, v32, v33, v34, v35))
            {
              if (dword_2550EFCA0 <= 800)
              {
                if (dword_2550EFCA0 != -1 || sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u))
                  sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"void __BSConfiguration_TaskRestoreDefaultsSync(void *)", 800, (uint64_t)"\n\n\t\t          \t\t++++++++++ Config phase: \"%s\" ++++++++++\n\n", v32, v33, v34, v35, (uint64_t)"No bonjour seed pause");
                if (dword_2550EFCA0 <= 800
                  && (dword_2550EFCA0 != -1 || sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u)))
                {
                  sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"void __BSConfiguration_TaskRestoreDefaultsSync(void *)", 800, (uint64_t)"pausing for: %d secs\n", v32, v33, v34, v35, 8);
                }
              }
              v14 = sub_21A70BD94(*(_QWORD *)(v10 + 128), 8);
              if ((_DWORD)v14)
                goto LABEL_48;
              if (dword_2550EFCA0 > 800)
                goto LABEL_120;
              if (dword_2550EFCA0 != -1 || sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u))
                sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"void __BSConfiguration_TaskRestoreDefaultsSync(void *)", 800, (uint64_t)"\n\n\t\t          \t\t---------- Config phase: \"%s\" ----------\n\n", v32, v33, v34, v35, (uint64_t)"No bonjour seed pause");
            }
            if (dword_2550EFCA0 <= 800 && (dword_2550EFCA0 != -1 || sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u)))
              sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"void __BSConfiguration_TaskRestoreDefaultsSync(void *)", 800, (uint64_t)"\n\n\t\t          \t\t++++++++++ Config phase: \"%s\" ++++++++++\n\n", v32, v33, v34, v35, (uint64_t)"Final waiting for target base after restore defaults");
LABEL_120:
            v14 = sub_21A70D318(*(_QWORD *)(v10 + 128), 0, *(const __CFString **)v10, 1, 120, &v48, v34, v35);
            if ((_DWORD)v14)
              goto LABEL_48;
            v29 = v48;
            if (!v48)
            {
              v14 = 4294960568;
              goto LABEL_48;
            }
            v14 = sub_21A6E2D80(v10, (const __CFString *)v48);
            if (v48)
            {
              CFRelease(v48);
              v48 = 0;
            }
            if ((_DWORD)v14)
              goto LABEL_48;
            if (dword_2550EFCA0 <= 800)
            {
              if (dword_2550EFCA0 != -1 || sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u))
                sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"void __BSConfiguration_TaskRestoreDefaultsSync(void *)", 800, (uint64_t)"\n\n\t\t          \t\t---------- Config phase: \"%s\" ----------\n\n", v32, v33, v34, v35, (uint64_t)"Final waiting for target base after restore defaults");
              if (dword_2550EFCA0 <= 800 && (dword_2550EFCA0 != -1 || sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u)))
                sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"void __BSConfiguration_TaskRestoreDefaultsSync(void *)", 800, (uint64_t)"\n\n\t\t          \t\t++++++++++ Config phase: \"%s\" ++++++++++\n\n", v32, v33, v34, v35, (uint64_t)"Rereading settings after restore");
            }
            v14 = sub_21A6DE984(v10, 0, *(const __CFString **)v10, *(_QWORD *)(v10 + 8), 0, 0, 0, v35);
            if ((_DWORD)v14)
              goto LABEL_48;
            if (dword_2550EFCA0 <= 800)
            {
              if (dword_2550EFCA0 != -1 || sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u))
                sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"void __BSConfiguration_TaskRestoreDefaultsSync(void *)", 800, (uint64_t)"\n\n\t\t          \t\t---------- Config phase: \"%s\" ----------\n\n", v32, v33, v34, v35, (uint64_t)"Rereading settings after restore");
              if (dword_2550EFCA0 <= 800 && (dword_2550EFCA0 != -1 || sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u)))
                sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"void __BSConfiguration_TaskRestoreDefaultsSync(void *)", 800, (uint64_t)"\n\n\t\t          \t\t++++++++++ Config phase: \"%s\" ++++++++++\n\n", v32, v33, v34, v35, (uint64_t)"Checking if monitoring needs restored");
            }
            v14 = sub_21A6E2E9C(v10, (uint64_t)v29, v30, v31, v32, v33, v34, v35);
            if ((_DWORD)v14)
              goto LABEL_48;
            if (dword_2550EFCA0 <= 800 && (dword_2550EFCA0 != -1 || sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u)))
              sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"void __BSConfiguration_TaskRestoreDefaultsSync(void *)", 800, (uint64_t)"\n\n\t\t          \t\t---------- Config phase: \"%s\" ----------\n\n", v32, v33, v34, v35, (uint64_t)"Checking if monitoring needs restored");
LABEL_147:
            v14 = 0;
            goto LABEL_48;
          }
          if (dword_2550EFCA0 != -1 || sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u))
            sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"void __BSConfiguration_TaskRestoreDefaultsSync(void *)", 800, (uint64_t)"\n\n\t\t          \t\t---------- Config phase: \"%s\" ----------\n\n", v32, v33, v34, v35, (uint64_t)"Waiting for network to GO AWAY");
        }
        if (dword_2550EFCA0 <= 800 && (dword_2550EFCA0 != -1 || sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u)))
          sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"void __BSConfiguration_TaskRestoreDefaultsSync(void *)", 800, (uint64_t)"\n\n\t\t          \t\t++++++++++ Config phase: \"%s\" ++++++++++\n\n", v32, v33, v34, v35, (uint64_t)"Determining if base station is remote");
        goto LABEL_85;
      }
      v9 = 0;
    }
LABEL_17:
    if (v51)
    {
      CFRelease(v51);
      v51 = 0;
    }
    if (v50)
    {
      CFRelease(v50);
      v50 = 0;
    }
    if (v9)
      CFRelease(v9);
    sub_21A6E26C4((_DWORD *)a1, a2, a3, a4, a5, a6, a7, a8);
  }
}

uint64_t sub_21A6DAFBC(uint64_t a1, CFDataRef theData, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  CFTypeRef cf;
  void *context;

  if (dword_2550EFCA0 <= 800 && (dword_2550EFCA0 != -1 || sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u)))
    sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"OSStatus BSConfiguration_TaskUploadFirmwareAsync(BSConfigurationContextRef, CFDataRef)", 800, (uint64_t)" \n", a5, a6, a7, a8, v33);
  context = 0;
  if (!a1 || *(_DWORD *)(a1 + 144) != 1634561902)
    return 4294960591;
  v10 = 4294960591;
  if (theData)
  {
    if (*(_QWORD *)(a1 + 120))
    {
      if (CFDataGetLength(theData))
      {
        v10 = sub_21A6D7BCC(a1, 5u, v11, v12, v13, v14, v15, v16);
        if (!(_DWORD)v10)
        {
          cf = 0;
          v10 = sub_21A692FEC((const __CFAllocator *)*MEMORY[0x24BDBD240], &cf, (uint64_t)"{%ks=%O}", v17, v18, v19, v20, v21, (uint64_t)"AsyncParam_FirmwareData");
          if ((_DWORD)v10)
          {
LABEL_12:
            sub_21A6D7BCC(a1, 0, (uint64_t)v22, v23, v24, v25, v26, v27);
            return v10;
          }
          if (cf)
          {
            v10 = sub_21A6D804C(a1, cf, &context, v23, v24, v25, v26, v27);
            if (cf)
            {
              CFRelease(cf);
              cf = 0;
            }
            if ((_DWORD)v10)
              goto LABEL_12;
            v22 = context;
            if (!context)
            {
              v10 = 4294960568;
              goto LABEL_12;
            }
            dispatch_group_async_f(*(dispatch_group_t *)(a1 + 120), *(dispatch_queue_t *)(a1 + 112), context, (dispatch_function_t)sub_21A6DB138);
            sub_21A6DA0E8(a1, 5, 0, 1, v29, v30, v31, v32);
          }
          return 0;
        }
      }
    }
  }
  return v10;
}

void sub_21A6DB138(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  const __CFString *v9;
  uint64_t v10;
  const __CFString *v11;
  uint64_t v12;
  uint64_t v13;
  CFIndex Length;
  uint64_t v15;
  unint64_t v16;
  const __CFString *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  CFTypeRef v31;
  uint64_t v32;
  CFTypeRef v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *BytePtr;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  const __CFAllocator *v45;
  uint64_t i;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  int v62;
  const char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  CFTypeRef v68;
  unsigned int v69;
  unsigned int v70;
  __int16 v71;
  uint64_t v72;
  CFTypeRef v73;
  CFTypeRef v74;
  CFTypeRef cf;
  CFDataRef theData;

  if (dword_2550EFCA0 <= 800 && (dword_2550EFCA0 != -1 || sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u)))
    sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"void __BSConfiguration_TaskUploadFirmwareSync(void *)", 800, (uint64_t)" \n", a5, a6, a7, a8, v66);
  v74 = 0;
  cf = 0;
  v72 = 0;
  if (a1)
  {
    v9 = 0;
    theData = 0;
    v73 = 0;
    v71 = 0;
    if (*(_DWORD *)(a1 + 16) == 1634561902)
    {
      v10 = *(_QWORD *)a1;
      if (*(_QWORD *)a1)
      {
        if (*(_DWORD *)(v10 + 144) != 1634561902)
          goto LABEL_20;
        if (!*(_QWORD *)(v10 + 8))
          goto LABEL_20;
        v11 = *(const __CFString **)(a1 + 8);
        if (!v11)
          goto LABEL_20;
        sub_21A693B94(v11, (uint64_t)&theData, (UInt8 *)"%ks", a4, a5, a6, a7, a8, (uint64_t)"AsyncParam_FirmwareData");
        if ((_DWORD)v12)
        {
          v13 = v12;
          v9 = 0;
          goto LABEL_21;
        }
        if (!theData)
        {
          v9 = 0;
          v13 = 4294960568;
          goto LABEL_21;
        }
        Length = CFDataGetLength(theData);
        if (!Length)
        {
LABEL_20:
          v9 = 0;
          v13 = 4294960591;
          goto LABEL_21;
        }
        v16 = Length;
        v17 = sub_21A68EE6C(*(const __CFString **)v10, v15, a3, a4, a5, a6, a7, a8);
        v9 = v17;
        if (v17)
          CFRetain(v17);
        v25 = sub_21A709D98(*(_QWORD *)(v10 + 128), v18, v19, v20, v21, v22, v23, v24);
        if ((_DWORD)v25)
        {
          v13 = v25;
          goto LABEL_21;
        }
        if (dword_2550EFCA0 <= 800 && (dword_2550EFCA0 != -1 || sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u)))
          sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"void __BSConfiguration_TaskUploadFirmwareSync(void *)", 800, (uint64_t)"\n\n\t\t          \t\t++++++++++ Config phase: \"%s\" ++++++++++\n\n", a5, a6, a7, a8, (uint64_t)"Stopping monitoring");
        v13 = sub_21A6E2A54(v10, v26, a3, a4, a5, a6, a7, a8);
        if ((_DWORD)v13)
          goto LABEL_49;
        if (dword_2550EFCA0 <= 800 && (dword_2550EFCA0 != -1 || sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u)))
          sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"void __BSConfiguration_TaskUploadFirmwareSync(void *)", 800, (uint64_t)"\n\n\t\t          \t\t---------- Config phase: \"%s\" ----------\n\n", v34, v35, v36, v37, (uint64_t)"Stopping monitoring");
        v13 = sub_21A6E2AB0(v10, &cf, &v74, &v72, (BOOL *)&v71 + 1, (BOOL *)&v71);
        if ((_DWORD)v13)
          goto LABEL_49;
        if (dword_2550EFCA0 <= 800)
        {
          if (dword_2550EFCA0 != -1 || sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u))
            sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"void __BSConfiguration_TaskUploadFirmwareSync(void *)", 800, (uint64_t)"finalNetworkName: %@ goingAwayNetwork: %@ networkMaytransition: %d deviceMayLoseTouch: %d \n", v34, v35, v36, v37, (uint64_t)cf);
          if (dword_2550EFCA0 <= 800 && (dword_2550EFCA0 != -1 || sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u)))
            sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"void __BSConfiguration_TaskUploadFirmwareSync(void *)", 800, (uint64_t)"\n\n\t\t          \t\t++++++++++ Config phase: \"%s\" ++++++++++\n\n", v34, v35, v36, v37, (uint64_t)"Uploading firmware");
        }
        sub_21A70ACEC(*(_QWORD *)(v10 + 128), 20, 0, (uint64_t)v9, v34, v35, v36, v37);
        v38 = *(_QWORD *)(v10 + 8);
        BytePtr = (char *)CFDataGetBytePtr(theData);
        v13 = sub_21A6D5498(v38, BytePtr, v16, v40, v41, v42, v43, v44);
        if ((_DWORD)v13)
          goto LABEL_49;
        if (dword_2550EFCA0 <= 800 && (dword_2550EFCA0 != -1 || sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u)))
          sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"void __BSConfiguration_TaskUploadFirmwareSync(void *)", 800, (uint64_t)"\n\n\t\t          \t\t---------- Config phase: \"%s\" ----------\n\n", v34, v35, v36, v37, (uint64_t)"Uploading firmware");
        sub_21A70ACEC(*(_QWORD *)(v10 + 128), 21, 0, (uint64_t)v9, v34, v35, v36, v37);
        if (sub_21A6D4724(*(_QWORD *)(v10 + 8), 1634104688))
        {
          v69 = 0;
          v70 = 0;
          if (dword_2550EFCA0 <= 800 && (dword_2550EFCA0 != -1 || sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u)))
            sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"void __BSConfiguration_TaskUploadFirmwareSync(void *)", 800, (uint64_t)"\n\n\t\t          \t\t++++++++++ Config phase: \"%s\" ++++++++++\n\n", v34, v35, v36, v37, (uint64_t)"Uploading firmware reading update status");
          v69 = 0;
          v45 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
          for (i = 1; ; i = (i + 1))
          {
            v47 = sub_21A70BD94(*(_QWORD *)(v10 + 128), 1);
            if ((_DWORD)v47)
            {
              v13 = v47;
              goto LABEL_49;
            }
            v48 = sub_21A6D5764(*(_QWORD *)(v10 + 8), (uint64_t)&v70, (uint64_t)&v69, 4, v34, v35, v36, v37);
            if ((_DWORD)v48)
            {
LABEL_81:
              v13 = v48;
              goto LABEL_49;
            }
            if (v69)
            {
              v68 = 0;
              if (dword_2550EFCA0 <= 800 && (dword_2550EFCA0 != -1 || sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u)))
                sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"void __BSConfiguration_TaskUploadFirmwareSync(void *)", 800, (uint64_t)"Firmware progress: %u of %u \n", v34, v35, v36, v37, v70);
              v48 = sub_21A692FEC(v45, &v68, (uint64_t)"{%ks=%i%ks=%i}", (uint64_t)v33, v34, v35, v36, v37, (uint64_t)"kBSConfigurationFirmwareStatus_TotalBytesKey");
              if ((_DWORD)v48)
                goto LABEL_81;
              v33 = v68;
              if (!v68)
                goto LABEL_195;
              sub_21A70A778(*(_QWORD *)(v10 + 128), 31, 0, (uint64_t)v68, v34, v35, v36, v37);
              if (v68)
              {
                CFRelease(v68);
                v68 = 0;
              }
              if (v70 && v70 >= v69)
              {
                v54 = sub_21A692FEC(v45, &v68, (uint64_t)"{%ks=%b}", v49, v50, v51, v52, v53, (uint64_t)"kBSConfigurationFirmwareStatus_UploadComplete");
                v13 = v54;
                if (!(_DWORD)v54)
                {
                  v33 = v68;
                  if (!v68)
                    goto LABEL_195;
                  sub_21A70A778(*(_QWORD *)(v10 + 128), 31, 0, (uint64_t)v68, v34, v35, v36, v37);
                  if (v68)
                  {
                    CFRelease(v68);
                    v68 = 0;
                  }
                  v13 = sub_21A6D7BCC(v10, 0, v55, v56, v57, v58, v59, v60);
                  if (!(_DWORD)v13)
                  {
                    v13 = sub_21A6D7BCC(v10, 3u, v32, (uint64_t)v33, v34, v35, v36, v37);
                    if (!(_DWORD)v13)
                    {
                      v13 = sub_21A70BD94(*(_QWORD *)(v10 + 128), 1);
                      if (!(_DWORD)v13)
                      {
                        v13 = sub_21A6D5338(*(_QWORD *)(v10 + 8), 1633899074, v32, (uint64_t)v33, v34, v35, v36, v37);
                        if (!(_DWORD)v13)
                        {
                          if (dword_2550EFCA0 < 801
                            && (dword_2550EFCA0 != -1 || sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u)))
                          {
                            sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"void __BSConfiguration_TaskUploadFirmwareSync(void *)", 800, (uint64_t)"\n\n\t\t          \t\t---------- Config phase: \"%s\" ----------\n\n", v34, v35, v36, v37, (uint64_t)"Uploading firmware reading update status");
                          }
                          break;
                        }
                      }
                    }
                  }
                }
                goto LABEL_49;
              }
            }
            else
            {
              if (i > 0x12B)
              {
                v13 = 4294960574;
                goto LABEL_49;
              }
              if (dword_2550EFCA0 <= 800 && (dword_2550EFCA0 != -1 || sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u)))
                sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"void __BSConfiguration_TaskUploadFirmwareSync(void *)", 800, (uint64_t)"Still no progress for: %u seconds \n", v34, v35, v36, v37, i);
            }
          }
        }
        if (*(_DWORD *)(v10 + 144) != 1634561902)
        {
          v13 = 4294960591;
          goto LABEL_49;
        }
        v13 = sub_21A70AFE4(*(_QWORD *)(v10 + 128), 1u, v32, (uint64_t)v33, v34, v35, v36, v37);
        if ((_DWORD)v13)
          goto LABEL_49;
        if (dword_2550EFCA0 <= 800 && (dword_2550EFCA0 != -1 || sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u)))
          sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"void __BSConfiguration_TaskUploadFirmwareSync(void *)", 800, (uint64_t)"\n\n\t\t          \t\t++++++++++ Config phase: \"%s\" ++++++++++\n\n", v34, v35, v36, v37, (uint64_t)"Determining if base station is remote");
        sub_21A68E77C(*(const __CFString **)v10);
        v62 = v61;
        if (dword_2550EFCA0 <= 800 && (dword_2550EFCA0 != -1 || sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u)))
        {
          if (v62)
            v63 = "base station is remote\n";
          else
            v63 = "base station is not remote\n";
          sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"void __BSConfiguration_TaskUploadFirmwareSync(void *)", 800, (uint64_t)v63, v34, v35, v36, v37, v67);
        }
        if (v62 == 1)
        {
LABEL_108:
          v13 = 0;
          goto LABEL_49;
        }
        if (dword_2550EFCA0 <= 800 && (dword_2550EFCA0 != -1 || sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u)))
          sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"void __BSConfiguration_TaskUploadFirmwareSync(void *)", 800, (uint64_t)"\n\n\t\t          \t\t---------- Config phase: \"%s\" ----------\n\n", v34, v35, v36, v37, (uint64_t)"Determining if base station is remote");
        if (v72)
        {
          if (dword_2550EFCA0 <= 800 && (dword_2550EFCA0 != -1 || sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u)))
            sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"void __BSConfiguration_TaskUploadFirmwareSync(void *)", 800, (uint64_t)"\n\n\t\t          \t\t++++++++++ Config phase: \"%s\" ++++++++++\n\n", v34, v35, v36, v37, (uint64_t)"Disassociating");
          v13 = sub_21A70B94C(*(_QWORD *)(v10 + 128));
          if ((_DWORD)v13)
            goto LABEL_49;
          if (dword_2550EFCA0 <= 800)
          {
            if (dword_2550EFCA0 != -1 || sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u))
              sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"void __BSConfiguration_TaskUploadFirmwareSync(void *)", 800, (uint64_t)"\n\n\t\t          \t\t---------- Config phase: \"%s\" ----------\n\n", v34, v35, v36, v37, (uint64_t)"Disassociating");
            if (dword_2550EFCA0 <= 800 && (dword_2550EFCA0 != -1 || sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u)))
              sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"void __BSConfiguration_TaskUploadFirmwareSync(void *)", 800, (uint64_t)"\n\n\t\t          \t\t++++++++++ Config phase: \"%s\" ++++++++++\n\n", v34, v35, v36, v37, (uint64_t)"Clearing Scan Cache");
          }
          v13 = sub_21A70C004(*(_QWORD *)(v10 + 128), (uint64_t)v31, v32, (uint64_t)v33, v34, v35, v36, v37);
          if ((_DWORD)v13)
            goto LABEL_49;
          if (dword_2550EFCA0 > 800)
          {
LABEL_142:
            v13 = sub_21A70BD94(*(_QWORD *)(v10 + 128), 20);
            if ((_DWORD)v13)
              goto LABEL_49;
            if (dword_2550EFCA0 <= 800 && (dword_2550EFCA0 != -1 || sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u)))
              sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"void __BSConfiguration_TaskUploadFirmwareSync(void *)", 800, (uint64_t)"\n\n\t\t          \t\t---------- Config phase: \"%s\" ----------\n\n", v34, v35, v36, v37, (uint64_t)"Pausing after restart");
            if (cf)
            {
              if (HIBYTE(v71))
              {
                if (dword_2550EFCA0 <= 800)
                {
                  if (dword_2550EFCA0 != -1 || sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u))
                    sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"void __BSConfiguration_TaskUploadFirmwareSync(void *)", 800, (uint64_t)"\n\n\t\t          \t\t++++++++++ Config phase: \"%s\" ++++++++++\n\n", v34, v35, v36, v37, (uint64_t)"Network transition pause");
                  if (dword_2550EFCA0 <= 800
                    && (dword_2550EFCA0 != -1 || sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u)))
                  {
                    sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"void __BSConfiguration_TaskUploadFirmwareSync(void *)", 800, (uint64_t)"pausing for: %d secs\n", v34, v35, v36, v37, 20);
                  }
                }
                v13 = sub_21A70BD94(*(_QWORD *)(v10 + 128), 20);
                if ((_DWORD)v13)
                  goto LABEL_49;
                if (dword_2550EFCA0 <= 800
                  && (dword_2550EFCA0 != -1 || sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u)))
                {
                  sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"void __BSConfiguration_TaskUploadFirmwareSync(void *)", 800, (uint64_t)"\n\n\t\t          \t\t---------- Config phase: \"%s\" ----------\n\n", v34, v35, v36, v37, (uint64_t)"Network transition pause");
                }
              }
              if (!sub_21A70B84C(*(_QWORD *)(v10 + 128), (const __CFString *)cf, 0, (uint64_t)v33, v34, v35, v36, v37))
              {
                if (dword_2550EFCA0 <= 800
                  && (dword_2550EFCA0 != -1 || sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u)))
                {
                  sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"void __BSConfiguration_TaskUploadFirmwareSync(void *)", 800, (uint64_t)"\n\n\t\t          \t\t++++++++++ Config phase: \"%s\" ++++++++++\n\n", v34, v35, v36, v37, (uint64_t)"Joining Network");
                }
                v13 = sub_21A70DE00(*(_QWORD *)(v10 + 128), (const __CFString *)cf, (const __CFString *)v74, 1, 0, v35, v36, v37);
                if ((_DWORD)v13)
                  goto LABEL_49;
                if (dword_2550EFCA0 > 800)
                  goto LABEL_167;
                if (dword_2550EFCA0 != -1 || sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u))
                  sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"void __BSConfiguration_TaskUploadFirmwareSync(void *)", 800, (uint64_t)"\n\n\t\t          \t\t---------- Config phase: \"%s\" ----------\n\n", v34, v35, v36, v37, (uint64_t)"Joining Network");
              }
            }
            if (dword_2550EFCA0 <= 800 && (dword_2550EFCA0 != -1 || sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u)))
              sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"void __BSConfiguration_TaskUploadFirmwareSync(void *)", 800, (uint64_t)"\n\n\t\t          \t\t++++++++++ Config phase: \"%s\" ++++++++++\n\n", v34, v35, v36, v37, (uint64_t)"Final waiting for target base");
LABEL_167:
            if (!sub_21A68F0A8(*(const __CFString **)v10, (uint64_t)v31, v32, (uint64_t)v33, v34, v35, v36, v37))
            {
              if (dword_2550EFCA0 <= 800)
              {
                if (dword_2550EFCA0 != -1 || sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u))
                  sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"void __BSConfiguration_TaskUploadFirmwareSync(void *)", 800, (uint64_t)"\n\n\t\t          \t\t++++++++++ Config phase: \"%s\" ++++++++++\n\n", v64, v65, v36, v37, (uint64_t)"No bonjour seed pause");
                if (dword_2550EFCA0 <= 800
                  && (dword_2550EFCA0 != -1 || sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u)))
                {
                  sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"void __BSConfiguration_TaskUploadFirmwareSync(void *)", 800, (uint64_t)"pausing for: %d secs\n", v64, v65, v36, v37, 8);
                }
              }
              v13 = sub_21A70BD94(*(_QWORD *)(v10 + 128), 8);
              if ((_DWORD)v13)
                goto LABEL_49;
              if (dword_2550EFCA0 <= 800 && (dword_2550EFCA0 != -1 || sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u)))
                sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"void __BSConfiguration_TaskUploadFirmwareSync(void *)", 800, (uint64_t)"\n\n\t\t          \t\t---------- Config phase: \"%s\" ----------\n\n", v34, v35, v36, v37, (uint64_t)"No bonjour seed pause");
            }
            v13 = sub_21A70D318(*(_QWORD *)(v10 + 128), v9, *(const __CFString **)v10, 1, 120, &v73, v36, v37);
            if ((_DWORD)v13)
              goto LABEL_49;
            v31 = v73;
            if (!v73)
            {
LABEL_195:
              v13 = 4294960568;
              goto LABEL_49;
            }
            v13 = sub_21A6E2D80(v10, (const __CFString *)v73);
            if (v73)
            {
              CFRelease(v73);
              v73 = 0;
            }
            if (!(_DWORD)v13)
            {
              if (dword_2550EFCA0 <= 800)
              {
                if (dword_2550EFCA0 != -1 || sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u))
                  sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"void __BSConfiguration_TaskUploadFirmwareSync(void *)", 800, (uint64_t)"\n\n\t\t          \t\t---------- Config phase: \"%s\" ----------\n\n", v34, v35, v36, v37, (uint64_t)"Final waiting for target base after firmware update");
                if (dword_2550EFCA0 <= 800
                  && (dword_2550EFCA0 != -1 || sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u)))
                {
                  sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"void __BSConfiguration_TaskUploadFirmwareSync(void *)", 800, (uint64_t)"\n\n\t\t          \t\t++++++++++ Config phase: \"%s\" ++++++++++\n\n", v34, v35, v36, v37, (uint64_t)"Rereading settings after firmware update");
                }
              }
              v13 = sub_21A6DE984(v10, 0, *(const __CFString **)v10, *(_QWORD *)(v10 + 8), 0, 0, 0, v37);
              if (!(_DWORD)v13)
              {
                if (dword_2550EFCA0 <= 800)
                {
                  if (dword_2550EFCA0 != -1 || sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u))
                    sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"void __BSConfiguration_TaskUploadFirmwareSync(void *)", 800, (uint64_t)"\n\n\t\t          \t\t---------- Config phase: \"%s\" ----------\n\n", v34, v35, v36, v37, (uint64_t)"Rereading settings after firmware update");
                  if (dword_2550EFCA0 <= 800
                    && (dword_2550EFCA0 != -1 || sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u)))
                  {
                    sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"void __BSConfiguration_TaskUploadFirmwareSync(void *)", 800, (uint64_t)"\n\n\t\t          \t\t++++++++++ Config phase: \"%s\" ++++++++++\n\n", v34, v35, v36, v37, (uint64_t)"Checking if monitoring needs restored");
                  }
                }
                v13 = sub_21A6E2E9C(v10, (uint64_t)v31, v32, (uint64_t)v33, v34, v35, v36, v37);
                if (!(_DWORD)v13)
                {
                  if (dword_2550EFCA0 <= 800
                    && (dword_2550EFCA0 != -1 || sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u)))
                  {
                    sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"void __BSConfiguration_TaskUploadFirmwareSync(void *)", 800, (uint64_t)"\n\n\t\t          \t\t---------- Config phase: \"%s\" ----------\n\n", v34, v35, v36, v37, (uint64_t)"Checking if monitoring needs restored");
                  }
                  goto LABEL_108;
                }
              }
            }
LABEL_49:
            sub_21A709E44(*(_QWORD *)(v10 + 128), (uint64_t)v31, v32, (uint64_t)v33, v34, v35, v36, v37);
LABEL_21:
            sub_21A6D7BCC(v10, 0, a3, a4, a5, a6, a7, a8);
            sub_21A6E2F9C(v10, 5, 0, v13, v27, v28, v29, v30);
            if (cf)
            {
              CFRelease(cf);
              cf = 0;
            }
            goto LABEL_23;
          }
          if (dword_2550EFCA0 != -1 || sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u))
            sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"void __BSConfiguration_TaskUploadFirmwareSync(void *)", 800, (uint64_t)"\n\n\t\t          \t\t---------- Config phase: \"%s\" ----------\n\n", v34, v35, v36, v37, (uint64_t)"Clearing Scan Cache");
        }
        if (dword_2550EFCA0 <= 800)
        {
          if (dword_2550EFCA0 != -1 || sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u))
            sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"void __BSConfiguration_TaskUploadFirmwareSync(void *)", 800, (uint64_t)"\n\n\t\t          \t\t++++++++++ Config phase: \"%s\" ++++++++++\n\n", v34, v35, v36, v37, (uint64_t)"Pausing after restart");
          if (dword_2550EFCA0 <= 800 && (dword_2550EFCA0 != -1 || sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u)))
            sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"void __BSConfiguration_TaskUploadFirmwareSync(void *)", 800, (uint64_t)"pausing for: %d secs\n", v34, v35, v36, v37, 20);
        }
        goto LABEL_142;
      }
      v9 = 0;
    }
LABEL_23:
    if (v74)
    {
      CFRelease(v74);
      v74 = 0;
    }
    if (v9)
      CFRelease(v9);
    sub_21A6E26C4((_DWORD *)a1, a2, a3, a4, a5, a6, a7, a8);
  }
}

uint64_t sub_21A6DC1A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  CFTypeRef cf;
  void *context;

  if (dword_2550EFCA0 <= 800 && (dword_2550EFCA0 != -1 || sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u)))
    sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"OSStatus BSConfiguration_TaskEraseDiskAsync(BSConfigurationContextRef, CFDictionaryRef)", 800, (uint64_t)" \n", a5, a6, a7, a8, v27);
  context = 0;
  if (!a1 || *(_DWORD *)(a1 + 144) != 1634561902)
    return 4294960591;
  v10 = 4294960591;
  if (a2)
  {
    if (*(_QWORD *)(a1 + 120))
    {
      v10 = sub_21A6DC318(a1, 1165123913, a3, a4, a5, a6, a7, a8);
      if (!(_DWORD)v10)
      {
        cf = 0;
        v10 = sub_21A692FEC((const __CFAllocator *)*MEMORY[0x24BDBD240], &cf, (uint64_t)"{%ks=%O}", v11, v12, v13, v14, v15, (uint64_t)"kAsyncParam_DiskOptions");
        if ((_DWORD)v10)
        {
LABEL_11:
          sub_21A6D7BCC(a1, 0, (uint64_t)v16, v17, v18, v19, v20, v21);
          return v10;
        }
        if (cf)
        {
          v10 = sub_21A6D804C(a1, cf, &context, v17, v18, v19, v20, v21);
          if (cf)
          {
            CFRelease(cf);
            cf = 0;
          }
          if ((_DWORD)v10)
            goto LABEL_11;
          v16 = context;
          if (!context)
          {
            v10 = 4294960568;
            goto LABEL_11;
          }
          dispatch_group_async_f(*(dispatch_group_t *)(a1 + 120), *(dispatch_queue_t *)(a1 + 112), context, (dispatch_function_t)sub_21A6DC3B4);
          sub_21A6DA0E8(a1, 6, 1165123913, 1, v23, v24, v25, v26);
        }
        return 0;
      }
    }
  }
  return v10;
}

uint64_t sub_21A6DC318(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;
  uint64_t v11;

  if (dword_2550EFCA0 <= 800 && (dword_2550EFCA0 != -1 || sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u)))
    sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"OSStatus _BSConfiguration_SetTaskStateAndCode(BSConfigurationContextRef, eBSConfigurationTaskState, ACPTaskCode)", 800, (uint64_t)" \n", a5, a6, a7, a8, v11);
  if (*(_DWORD *)(a1 + 144) != 1634561902)
    return 4294960591;
  result = sub_21A6D7BCC(a1, 6u, a3, a4, a5, a6, a7, a8);
  if (!(_DWORD)result)
    *(_DWORD *)(a1 + 84) = a2;
  return result;
}

void sub_21A6DC3B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  const __CFString *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const __CFString *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  const __CFString *v28;
  CFDictionaryRef theDict;

  if (dword_2550EFCA0 <= 800 && (dword_2550EFCA0 != -1 || sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u)))
    sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"void __BSConfiguration_TaskEraseDiskSync(void *)", 800, (uint64_t)" \n", a5, a6, a7, a8, v27);
  if (a1)
  {
    v28 = 0;
    theDict = 0;
    if (*(_DWORD *)(a1 + 16) == 1634561902)
    {
      v9 = *(_QWORD *)a1;
      if (*(_QWORD *)a1)
      {
        if (*(_DWORD *)(v9 + 144) == 1634561902 && *(_QWORD *)(v9 + 8) && (v10 = *(const __CFString **)(a1 + 8)) != 0)
        {
          sub_21A693B94(v10, (uint64_t)&theDict, (UInt8 *)"%ks", a4, a5, a6, a7, a8, (uint64_t)"kAsyncParam_DiskOptions");
          v13 = v12;
          if (!(_DWORD)v12)
          {
            if (theDict)
            {
              v13 = sub_21A709D98(*(_QWORD *)(v9 + 128), v11, a3, a4, a5, a6, a7, a8);
              if (!(_DWORD)v13)
              {
                if (dword_2550EFCA0 <= 800
                  && (dword_2550EFCA0 != -1 || sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u)))
                {
                  sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"void __BSConfiguration_TaskEraseDiskSync(void *)", 800, (uint64_t)"\n\n\t\t          \t\t++++++++++ Config phase: \"%s\" ++++++++++\n\n", a5, a6, a7, a8, (uint64_t)"Starting monitoring if needed");
                }
                v13 = sub_21A6E316C(v9, v14, a3, a4, a5, a6, a7, a8);
                if (!(_DWORD)v13)
                {
                  if (dword_2550EFCA0 <= 800)
                  {
                    if (dword_2550EFCA0 != -1 || sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u))
                      sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"void __BSConfiguration_TaskEraseDiskSync(void *)", 800, (uint64_t)"\n\n\t\t          \t\t---------- Config phase: \"%s\" ----------\n\n", v18, v19, v20, v21, (uint64_t)"Starting monitoring if needed");
                    if (dword_2550EFCA0 <= 800
                      && (dword_2550EFCA0 != -1 || sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u)))
                    {
                      sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"void __BSConfiguration_TaskEraseDiskSync(void *)", 800, (uint64_t)"\n\n\t\t          \t\t++++++++++ Config phase: \"%s\" ++++++++++\n\n", v18, v19, v20, v21, (uint64_t)"Setting internal disk name");
                    }
                  }
                  sub_21A693B94((const __CFString *)theDict, (uint64_t)&v28, (UInt8 *)"%kO", v17, v18, v19, v20, v21, (uint64_t)CFSTR("volumeName"));
                  v13 = v22;
                  if (!(_DWORD)v22)
                  {
                    v16 = v28;
                    if (v28)
                    {
                      v13 = sub_21A6D42C8(*(_QWORD *)(v9 + 8), 1229213293, v28);
                      if (!(_DWORD)v13)
                      {
                        if (dword_2550EFCA0 <= 800)
                        {
                          if (dword_2550EFCA0 != -1 || sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u))
                            sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"void __BSConfiguration_TaskEraseDiskSync(void *)", 800, (uint64_t)"\n\n\t\t          \t\t---------- Config phase: \"%s\" ----------\n\n", v18, v19, v20, v21, (uint64_t)"Setting internal disk name");
                          if (dword_2550EFCA0 <= 800
                            && (dword_2550EFCA0 != -1 || sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u)))
                          {
                            sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"void __BSConfiguration_TaskEraseDiskSync(void *)", 800, (uint64_t)"\n\n\t\t          \t\t++++++++++ Config phase: \"%s\" ++++++++++\n\n", v18, v19, v20, v21, (uint64_t)"Sending erase command");
                          }
                        }
                        v13 = sub_21A6D5FE8(*(_QWORD *)(v9 + 8), theDict);
                        if (!(_DWORD)v13)
                        {
                          if (dword_2550EFCA0 <= 800
                            && (dword_2550EFCA0 != -1 || sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u)))
                          {
                            sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"void __BSConfiguration_TaskEraseDiskSync(void *)", 800, (uint64_t)"\n\n\t\t          \t\t---------- Config phase: \"%s\" ----------\n\n", v18, v19, v20, v21, (uint64_t)"Sending erase command");
                          }
                          if (*(_DWORD *)(v9 + 144) == 1634561902)
                            sub_21A70AFE4(*(_QWORD *)(v9 + 128), 0, (uint64_t)v16, v17, v18, v19, v20, v21);
                          sub_21A709E44(*(_QWORD *)(v9 + 128), v15, (uint64_t)v16, v17, v18, v19, v20, v21);
                          goto LABEL_31;
                        }
                      }
                    }
                    else
                    {
                      v13 = 4294960568;
                    }
                  }
                }
                sub_21A709E44(*(_QWORD *)(v9 + 128), v15, (uint64_t)v16, v17, v18, v19, v20, v21);
              }
            }
            else
            {
              v13 = 4294960568;
            }
          }
        }
        else
        {
          v13 = 4294960591;
        }
        sub_21A6D7BCC(v9, 0, a3, a4, a5, a6, a7, a8);
        sub_21A6E2F9C(v9, 6, 0, v13, v23, v24, v25, v26);
      }
    }
LABEL_31:
    sub_21A6E26C4((_DWORD *)a1, a2, a3, a4, a5, a6, a7, a8);
  }
}

uint64_t sub_21A6DC780(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  CFTypeRef cf;
  void *context;

  if (dword_2550EFCA0 <= 800 && (dword_2550EFCA0 != -1 || sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u)))
    sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"OSStatus BSConfiguration_TaskArchiveDiskAsync(BSConfigurationContextRef, CFDictionaryRef)", 800, (uint64_t)" \n", a5, a6, a7, a8, v27);
  context = 0;
  if (!a1 || *(_DWORD *)(a1 + 144) != 1634561902)
    return 4294960591;
  v10 = 4294960591;
  if (a2)
  {
    if (*(_QWORD *)(a1 + 120))
    {
      v10 = sub_21A6DC318(a1, 1098015561, a3, a4, a5, a6, a7, a8);
      if (!(_DWORD)v10)
      {
        cf = 0;
        v10 = sub_21A692FEC((const __CFAllocator *)*MEMORY[0x24BDBD240], &cf, (uint64_t)"{%ks=%O}", v11, v12, v13, v14, v15, (uint64_t)"kAsyncParam_DiskOptions");
        if ((_DWORD)v10)
        {
LABEL_11:
          sub_21A6D7BCC(a1, 0, (uint64_t)v16, v17, v18, v19, v20, v21);
          return v10;
        }
        if (cf)
        {
          v10 = sub_21A6D804C(a1, cf, &context, v17, v18, v19, v20, v21);
          if (cf)
          {
            CFRelease(cf);
            cf = 0;
          }
          if ((_DWORD)v10)
            goto LABEL_11;
          v16 = context;
          if (!context)
          {
            v10 = 4294960568;
            goto LABEL_11;
          }
          dispatch_group_async_f(*(dispatch_group_t *)(a1 + 120), *(dispatch_queue_t *)(a1 + 112), context, (dispatch_function_t)sub_21A6DC8F8);
          sub_21A6DA0E8(a1, 6, 1098015561, 1, v23, v24, v25, v26);
        }
        return 0;
      }
    }
  }
  return v10;
}

void sub_21A6DC8F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  const __CFString *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  CFDictionaryRef theDict;

  if (dword_2550EFCA0 <= 800 && (dword_2550EFCA0 != -1 || sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u)))
    sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"void __BSConfiguration_TaskArchiveDiskSync(void *)", 800, (uint64_t)" \n", a5, a6, a7, a8, v26);
  if (a1)
  {
    theDict = 0;
    if (*(_DWORD *)(a1 + 16) == 1634561902)
    {
      v9 = *(_QWORD *)a1;
      if (*(_QWORD *)a1)
      {
        if (*(_DWORD *)(v9 + 144) == 1634561902 && *(_QWORD *)(v9 + 8) && (v10 = *(const __CFString **)(a1 + 8)) != 0)
        {
          sub_21A693B94(v10, (uint64_t)&theDict, (UInt8 *)"%ks", a4, a5, a6, a7, a8, (uint64_t)"kAsyncParam_DiskOptions");
          v13 = v12;
          if (!(_DWORD)v12)
          {
            if (theDict)
            {
              v13 = sub_21A709D98(*(_QWORD *)(v9 + 128), v11, a3, a4, a5, a6, a7, a8);
              if (!(_DWORD)v13)
              {
                if (dword_2550EFCA0 <= 800
                  && (dword_2550EFCA0 != -1 || sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u)))
                {
                  sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"void __BSConfiguration_TaskArchiveDiskSync(void *)", 800, (uint64_t)"\n\n\t\t          \t\t++++++++++ Config phase: \"%s\" ++++++++++\n\n", a5, a6, a7, a8, (uint64_t)"Starting monitoring if needed");
                }
                v13 = sub_21A6E316C(v9, v14, a3, a4, a5, a6, a7, a8);
                if (!(_DWORD)v13)
                {
                  if (dword_2550EFCA0 <= 800)
                  {
                    if (dword_2550EFCA0 != -1 || sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u))
                      sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"void __BSConfiguration_TaskArchiveDiskSync(void *)", 800, (uint64_t)"\n\n\t\t          \t\t---------- Config phase: \"%s\" ----------\n\n", v18, v19, v20, v21, (uint64_t)"Starting monitoring if needed");
                    if (dword_2550EFCA0 <= 800
                      && (dword_2550EFCA0 != -1 || sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u)))
                    {
                      sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"void __BSConfiguration_TaskArchiveDiskSync(void *)", 800, (uint64_t)"\n\n\t\t          \t\t++++++++++ Config phase: \"%s\" ++++++++++\n\n", v18, v19, v20, v21, (uint64_t)"Sending erase command");
                    }
                  }
                  v13 = sub_21A6D613C(*(_QWORD *)(v9 + 8), theDict);
                  if (!(_DWORD)v13)
                  {
                    if (dword_2550EFCA0 <= 800
                      && (dword_2550EFCA0 != -1 || sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u)))
                    {
                      sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"void __BSConfiguration_TaskArchiveDiskSync(void *)", 800, (uint64_t)"\n\n\t\t          \t\t---------- Config phase: \"%s\" ----------\n\n", v18, v19, v20, v21, (uint64_t)"Sending erase command");
                    }
                    if (*(_DWORD *)(v9 + 144) == 1634561902)
                      sub_21A70AFE4(*(_QWORD *)(v9 + 128), 0, v16, v17, v18, v19, v20, v21);
                    sub_21A709E44(*(_QWORD *)(v9 + 128), v15, v16, v17, v18, v19, v20, v21);
                    goto LABEL_31;
                  }
                }
                sub_21A709E44(*(_QWORD *)(v9 + 128), v15, v16, v17, v18, v19, v20, v21);
              }
            }
            else
            {
              v13 = 4294960568;
            }
          }
        }
        else
        {
          v13 = 4294960591;
        }
        sub_21A6D7BCC(v9, 0, a3, a4, a5, a6, a7, a8);
        sub_21A6E2F9C(v9, 6, 0, v13, v22, v23, v24, v25);
      }
    }
LABEL_31:
    sub_21A6E26C4((_DWORD *)a1, a2, a3, a4, a5, a6, a7, a8);
  }
}

uint64_t sub_21A6DCBCC(uint64_t a1, uint64_t a2, CFTypeRef cf, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;

  if (dword_2550EFCA0 <= 800 && (dword_2550EFCA0 != -1 || sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u)))
    sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"OSStatus BSConfiguration_SetConfigurationModeAndSetupOptions(BSConfigurationContextRef, eBSConfigurationSettingsMode, CFDictionaryRef)", 800, (uint64_t)"inMode: %d \n", a5, a6, a7, a8, a2);
  result = 4294960591;
  if (a1 && cf && *(_DWORD *)(a1 + 144) == 1634561902)
  {
    *(_DWORD *)(a1 + 72) = a2;
    *(_QWORD *)(a1 + 64) = cf;
    CFRetain(cf);
    return 0;
  }
  return result;
}

uint64_t sub_21A6DCC84(uint64_t a1, CFTypeRef cf, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;
  CFTypeRef v11;
  uint64_t v12;

  if (dword_2550EFCA0 <= 800 && (dword_2550EFCA0 != -1 || sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u)))
    sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"OSStatus BSConfiguration_SetTargetNetwork(BSConfigurationContextRef, CFDictionaryRef)", 800, (uint64_t)" \n", a5, a6, a7, a8, v12);
  result = 4294960591;
  if (a1 && cf && *(_DWORD *)(a1 + 144) == 1634561902)
  {
    if (*(_QWORD *)(a1 + 56))
    {
      return 4294960577;
    }
    else
    {
      v11 = CFRetain(cf);
      result = 0;
      *(_QWORD *)(a1 + 56) = v11;
    }
  }
  return result;
}

uint64_t sub_21A6DCD34(uint64_t a1, const __CFString *a2, const void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;
  uint64_t v12;

  if (dword_2550EFCA0 <= 800 && (dword_2550EFCA0 != -1 || sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u)))
    sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"OSStatus BSConfiguration_SetTargetBaseAndSettings(BSConfigurationContextRef, CFDictionaryRef, CFDictionaryRef)", 800, (uint64_t)" \n", a5, a6, a7, a8, v12);
  result = 4294960591;
  if (a1 && a2 && *(_DWORD *)(a1 + 144) == 1634561902)
  {
    if (*(_QWORD *)a1)
    {
      return 4294960577;
    }
    else
    {
      result = sub_21A6DCE04(a1, a2);
      if (a3)
      {
        if (!(_DWORD)result)
          return sub_21A6D1880(*(_QWORD *)(a1 + 8), a3);
      }
    }
  }
  return result;
}

uint64_t sub_21A6DCE04(uint64_t a1, const __CFString *cf)
{
  const __CFString *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  const __CFString *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int *v19;
  const __CFString *v20;
  uint64_t v21;

  if (!a1)
    return 4294960578;
  if (*(_DWORD *)(a1 + 144) != 1634561902)
    return 4294960578;
  v4 = *(const __CFString **)a1;
  if (*(const __CFString **)a1 == cf)
    return 0;
  if (!cf || !v4)
    goto LABEL_15;
  v5 = CFEqual(cf, v4);
  if (!v5 || dword_2550EFCA0 > 800)
  {
    if (v5)
      return 0;
    v4 = *(const __CFString **)a1;
LABEL_15:
    if (v4)
      CFRelease(v4);
    *(_QWORD *)a1 = cf;
    if (cf)
      CFRetain(cf);
    v20 = *(const __CFString **)a1;
    v19 = *(int **)(a1 + 8);
    if (v19)
    {
      if (v20)
      {
        result = sub_21A6D1610((uint64_t)v19, v20);
        if ((_DWORD)result)
          return result;
      }
      else
      {
        *(_QWORD *)(a1 + 8) = 0;
        sub_21A6D12CC(v19);
      }
    }
    else if (v20)
    {
      v21 = 0;
      result = sub_21A6D1350(&v21, v20);
      if ((_DWORD)result)
        return result;
      if (!v21)
        return 4294960568;
      *(_QWORD *)(a1 + 8) = v21;
    }
    return 0;
  }
  if (dword_2550EFCA0 != -1 || (result = sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u), (_DWORD)result))
  {
    v14 = sub_21A68EE6C(cf, v6, v7, v8, v9, v10, v11, v12);
    sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"OSStatus BSConfiguration_SetTargetBase(BSConfigurationContextRef, CFDictionaryRef)", 800, (uint64_t)"equal SKIPPING update for: %@\n", v15, v16, v17, v18, (uint64_t)v14);
    return 0;
  }
  return result;
}

uint64_t sub_21A6DCF44(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;

  if (dword_2550EFCA0 <= 800 && (dword_2550EFCA0 != -1 || sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u)))
    sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"OSStatus BSConfiguration_Create(BSConfigurationContextRef *)", 800, (uint64_t)" \n", a5, a6, a7, a8, v27);
  if (!a1)
    return 4294960591;
  v9 = (char *)malloc_type_calloc(1uLL, 0x98uLL, 0x1060040BBF23B49uLL);
  if (!v9)
    return 4294960568;
  v10 = (uint64_t)v9;
  *((_QWORD *)v9 + 17) = 0;
  *(_OWORD *)v9 = 0u;
  *((_OWORD *)v9 + 1) = 0u;
  *((_OWORD *)v9 + 2) = 0u;
  *((_OWORD *)v9 + 3) = 0u;
  *(_OWORD *)(v9 + 60) = 0u;
  *((_QWORD *)v9 + 10) = 0;
  *(_DWORD *)(v9 + 87) = 0;
  *((_QWORD *)v9 + 12) = 0;
  *((_QWORD *)v9 + 13) = 0;
  *((_QWORD *)v9 + 15) = dispatch_group_create();
  *(_QWORD *)(v10 + 112) = dispatch_queue_create("BSConfiguration_serial_queue", 0);
  v25 = sub_21A7097E4((_QWORD *)(v10 + 128), v11, v12, v13, v14, v15, v16, v17);
  if (!(_DWORD)v25)
  {
    if (*(_QWORD *)(v10 + 128))
    {
      v25 = 0;
      *(_DWORD *)(v10 + 144) = 1634561902;
      *a1 = v10;
      return v25;
    }
    v25 = 4294960568;
  }
  sub_21A6DD070(v10, v18, v19, v20, v21, v22, v23, v24);
  return v25;
}

uint64_t sub_21A6DD070(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int *v18;
  const void *v19;
  int *v20;
  const void *v21;
  const void *v22;
  const void *v23;
  const void *v24;
  const void *v25;
  NSObject *v26;
  NSObject *v27;
  void *v28;
  uint64_t v30;

  if (dword_2550EFCA0 <= 800 && (dword_2550EFCA0 != -1 || sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u)))
    sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"OSStatus BSConfiguration_Release(BSConfigurationContextRef)", 800, (uint64_t)" \n", a5, a6, a7, a8, v30);
  if (!a1 || *(_DWORD *)(a1 + 144) != 1634561902)
    return 4294960591;
  v9 = sub_21A6DD23C(a1, 1, a3, a4, a5, a6, a7, a8);
  if (dword_2550EFCA0 <= 800)
  {
    v17 = v9;
    if (dword_2550EFCA0 != -1 || sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u))
      sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"OSStatus BSConfiguration_Release(BSConfigurationContextRef)", 800, (uint64_t)"cancel err: %#m \n", v13, v14, v15, v16, v17);
  }
  *(_DWORD *)(a1 + 144) = 1095585614;
  if (*(_QWORD *)a1)
  {
    CFRelease(*(CFTypeRef *)a1);
    *(_QWORD *)a1 = 0;
  }
  v18 = *(int **)(a1 + 8);
  if (v18)
    sub_21A6D12CC(v18);
  v19 = *(const void **)(a1 + 16);
  if (v19)
  {
    CFRelease(v19);
    *(_QWORD *)(a1 + 16) = 0;
  }
  v20 = *(int **)(a1 + 24);
  if (v20)
    sub_21A6D12CC(v20);
  v21 = *(const void **)(a1 + 32);
  if (v21)
  {
    CFRelease(v21);
    *(_QWORD *)(a1 + 32) = 0;
  }
  v22 = *(const void **)(a1 + 40);
  if (v22)
  {
    CFRelease(v22);
    *(_QWORD *)(a1 + 40) = 0;
  }
  v23 = *(const void **)(a1 + 48);
  if (v23)
  {
    CFRelease(v23);
    *(_QWORD *)(a1 + 48) = 0;
  }
  v24 = *(const void **)(a1 + 56);
  if (v24)
  {
    CFRelease(v24);
    *(_QWORD *)(a1 + 56) = 0;
  }
  v25 = *(const void **)(a1 + 64);
  if (v25)
  {
    CFRelease(v25);
    *(_QWORD *)(a1 + 64) = 0;
  }
  v26 = *(NSObject **)(a1 + 120);
  if (v26)
    dispatch_release(v26);
  *(_QWORD *)(a1 + 120) = 0;
  v27 = *(NSObject **)(a1 + 112);
  if (v27)
    dispatch_release(v27);
  *(_QWORD *)(a1 + 112) = 0;
  v28 = *(void **)(a1 + 136);
  if (v28)
    sub_21A72DEF0(v28);
  *(_QWORD *)(a1 + 136) = 0;
  sub_21A709990(*(_DWORD **)(a1 + 128), v10, v11, v12, v13, v14, v15, v16);
  free((void *)a1);
  return 0;
}

uint64_t sub_21A6DD23C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  unsigned int v10;
  uint64_t result;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v8 = a2;
  if (dword_2550EFCA0 <= 800 && (dword_2550EFCA0 != -1 || sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u)))
    sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"OSStatus BSConfiguration_Cancel(BSConfigurationContextRef, Boolean)", 800, (uint64_t)" \n", a5, a6, a7, a8, v20);
  if (!a1 || *(_DWORD *)(a1 + 144) != 1634561902)
    return 4294960591;
  if (v8)
    v10 = 0;
  else
    v10 = sub_21A6DD384((void *)a1, a2, a3, a4, a5, a6, a7, a8);
  v12 = sub_21A709CC4(*(_QWORD *)(a1 + 128), a2, a3, a4, a5, a6, a7, a8);
  if (v12 == -6720)
    v13 = 0;
  else
    v13 = v12;
  v14 = *(_QWORD *)(a1 + 8);
  if (v14)
    sub_21A6D193C(v14);
  v15 = *(_QWORD *)(a1 + 24);
  if (v15)
    sub_21A6D193C(v15);
  dispatch_group_wait(*(dispatch_group_t *)(a1 + 120), 0xFFFFFFFFFFFFFFFFLL);
  if (dword_2550EFCA0 <= 800 && (dword_2550EFCA0 != -1 || sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u)))
    sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"OSStatus BSConfiguration_Cancel(BSConfigurationContextRef, Boolean)", 800, (uint64_t)"Done waiting on dispatch group \n", v16, v17, v18, v19, v20);
  result = 4294960525;
  if (v13 != -6771 && v10 != -6771)
  {
    if (v13)
      return v13;
    else
      return v10;
  }
  return result;
}

uint64_t sub_21A6DD384(void *context, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  NSObject *v9;
  uint64_t v11;

  if (dword_2550EFCA0 <= 800 && (dword_2550EFCA0 != -1 || sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u)))
    sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"OSStatus BSConfiguration_CancelTask(BSConfigurationContextRef)", 800, (uint64_t)" \n", a5, a6, a7, a8, v11);
  if (!context || *((_DWORD *)context + 36) != 1634561902)
    return 4294960591;
  if (*((_DWORD *)context + 20) == 6)
  {
    if (dword_2550EFCA0 <= 800 && (dword_2550EFCA0 != -1 || sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u)))
      sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"OSStatus _BSConfiguration_CancelDiskTaskAsync(BSConfigurationContextRef)", 800, (uint64_t)" \n", a5, a6, a7, a8, v11);
    if (*((_DWORD *)context + 36) == 1634561902)
    {
      v9 = *((_QWORD *)context + 15);
      if (v9)
      {
        dispatch_group_async_f(v9, *((dispatch_queue_t *)context + 14), context, (dispatch_function_t)sub_21A6E3A90);
        return 4294960525;
      }
    }
    return 4294960591;
  }
  return 0;
}

uint64_t sub_21A6DD49C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12;

  if (dword_2550EFCA0 <= 800 && (dword_2550EFCA0 != -1 || sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u)))
    sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"OSStatus BSConfiguration_SetProgressCallback(BSConfigurationContextRef, assistant_progress_t, void *)", 800, (uint64_t)" \n", a5, a6, a7, a8, v12);
  if (a1 && *(_DWORD *)(a1 + 144) == 1634561902)
    return sub_21A70A6D8(*(_QWORD *)(a1 + 128), a2, a3, a4, a5, a6, a7, a8);
  else
    return 4294960591;
}

uint64_t sub_21A6DD54C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12;

  if (dword_2550EFCA0 <= 800 && (dword_2550EFCA0 != -1 || sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u)))
    sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"OSStatus BSConfiguration_SetAssistantCallback(BSConfigurationContextRef, assistant_callback_t, void *)", 800, (uint64_t)" \n", a5, a6, a7, a8, v12);
  if (a1 && *(_DWORD *)(a1 + 144) == 1634561902)
    return sub_21A70A18C(*(_QWORD *)(a1 + 128), a2, a3, a4, a5, a6, a7, a8);
  else
    return 4294960591;
}

uint64_t sub_21A6DD5FC(uint64_t result)
{
  if (result)
    return *(_QWORD *)(result + 128);
  return result;
}

uint64_t sub_21A6DD608(uint64_t a1, uint64_t a2, CFTypeRef cf, CFTypeRef a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (dword_2550EFCA0 <= 800 && (dword_2550EFCA0 != -1 || sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u)))
    sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"OSStatus BSConfiguration_SetModeSourceBaseAndSettings(BSConfigurationContextRef, eBSConfigurationSettingsMode, CFDictionaryRef, CFDictionaryRef)", 800, (uint64_t)"inMode: %d \n", a5, a6, a7, a8, a2);
  if (!a1 || *(_DWORD *)(a1 + 144) != 1634561902)
    return 4294960591;
  *(_DWORD *)(a1 + 72) = a2;
  if (cf)
  {
    *(_QWORD *)(a1 + 16) = cf;
    CFRetain(cf);
  }
  if (a4)
  {
    *(_QWORD *)(a1 + 32) = a4;
    CFRetain(a4);
  }
  return 0;
}

uint64_t sub_21A6DD6D8(uint64_t a1, CFTypeRef cf, int a3, const __CFString *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;
  const char *v13;
  uint64_t v14;
  const __CFString *v15;
  uint64_t v16;
  int v17;
  char v18[21];
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  if (dword_2550EFCA0 <= 800 && (dword_2550EFCA0 != -1 || sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u)))
    sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"OSStatus BSConfiguration_SetSettingsToJoinNetwork(BSConfigurationContextRef, CFDictionaryRef, BSSecMode, CFStringRef)", 800, (uint64_t)" \n", a5, a6, a7, a8, v16);
  if (!a1 || *(_DWORD *)(a1 + 144) != 1634561902)
    return 4294960591;
  result = 4294960591;
  if (cf && *(_QWORD *)(a1 + 8))
  {
    *(_DWORD *)(a1 + 72) = 2;
    *(_QWORD *)(a1 + 48) = cf;
    CFRetain(cf);
    v14 = sub_21A72E204(*(_QWORD *)(a1 + 48), v13);
    if (v14)
    {
      v15 = (const __CFString *)v14;
      v17 = 0;
      result = sub_21A6D4478(*(_QWORD *)(a1 + 8), 1937327724, &v17);
      if (!(_DWORD)result)
      {
        if ((v17 & 0x40) != 0 || (result = sub_21A6D4310(*(_QWORD *)(a1 + 8), 2002862934, 768), !(_DWORD)result))
        {
          sub_21A6D6E44(v18, 0x15uLL);
          result = sub_21A6D4124(*(_QWORD *)(a1 + 8), v18, 1);
          if (!(_DWORD)result)
          {
            sub_21A6D6E44(v18, 0x15uLL);
            result = sub_21A6D40A0(*(_QWORD *)(a1 + 8), v18, v15);
            if (!(_DWORD)result)
            {
              sub_21A6D6E44(v18, 0x15uLL);
              result = sub_21A6D4124(*(_QWORD *)(a1 + 8), v18, a3);
              if (!(_DWORD)result)
              {
                if (a3 == 1
                  || !a4
                  || (sub_21A6D6E44(v18, 0x15uLL), result = sub_21A6D40A0(*(_QWORD *)(a1 + 8), v18, a4), !(_DWORD)result))
                {
                  result = sub_21A6D4310(*(_QWORD *)(a1 + 8), 1651724877, 3);
                  if (!(_DWORD)result)
                  {
                    result = sub_21A6D4724(*(_QWORD *)(a1 + 8), 1884509249);
                    if ((_DWORD)result)
                    {
                      sub_21A6D6E44(v18, 0x15uLL);
                      return sub_21A6D40A0(*(_QWORD *)(a1 + 8), v18, (const __CFString *)*MEMORY[0x24BDBD270]);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    else
    {
      return 4294960569;
    }
  }
  return result;
}

uint64_t sub_21A6DD938(uint64_t a1, const __CFString *a2, int a3, const __CFString *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;
  uint64_t v13[4];

  v13[3] = *MEMORY[0x24BDAC8D0];
  if (dword_2550EFCA0 <= 800 && (dword_2550EFCA0 != -1 || sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u)))
    sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"OSStatus BSConfiguration_SetSettingsToCreateNetwork(BSConfigurationContextRef, CFStringRef, BSSecMode, CFStringRef, Boolean)", 800, (uint64_t)" \n", a5, a6, a7, a8, v13[0]);
  if (!a1 || *(_DWORD *)(a1 + 144) != 1634561902 || !*(_QWORD *)(a1 + 8) || a3 != 1 && !a4)
    return 4294960591;
  *(_DWORD *)(a1 + 72) = 1;
  sub_21A6D6E44((char *)v13 + 3, 0x15uLL);
  result = sub_21A6D4124(*(_QWORD *)(a1 + 8), (char *)v13 + 3, 0);
  if (!(_DWORD)result)
  {
    sub_21A6D6E44((char *)v13 + 3, 0x15uLL);
    result = sub_21A6D40A0(*(_QWORD *)(a1 + 8), (char *)v13 + 3, a2);
    if (!(_DWORD)result)
    {
      sub_21A6D6E44((char *)v13 + 3, 0x15uLL);
      result = sub_21A6D4124(*(_QWORD *)(a1 + 8), (char *)v13 + 3, a3);
      if (!(_DWORD)result)
      {
        if (a3 == 1
          || (sub_21A6D6E44((char *)v13 + 3, 0x15uLL),
              result = sub_21A6D40A0(*(_QWORD *)(a1 + 8), (char *)v13 + 3, a4),
              !(_DWORD)result))
        {
          sub_21A6D6E44((char *)v13 + 3, 0x15uLL);
          result = sub_21A6D40A0(*(_QWORD *)(a1 + 8), (char *)v13 + 3, (const __CFString *)*MEMORY[0x24BDBD270]);
          if (!(_DWORD)result)
            return sub_21A6D4310(*(_QWORD *)(a1 + 8), 1651724877, 0);
        }
      }
    }
  }
  return result;
}

uint64_t sub_21A6DDB28(uint64_t a1, CFTypeRef cf)
{
  if (!a1)
    return 4294960591;
  if (*(_DWORD *)(a1 + 144) != 1634561902 || *(_QWORD *)(a1 + 104))
    return 4294960591;
  *(_DWORD *)(a1 + 72) = 3;
  *(_QWORD *)(a1 + 104) = cf;
  if (cf)
    CFRetain(cf);
  return 0;
}

uint64_t sub_21A6DDB84(uint64_t a1, CFTypeRef cf)
{
  uint64_t result;

  if (!a1)
    return 4294960591;
  result = 4294960591;
  if (cf && *(_DWORD *)(a1 + 144) == 1634561902)
  {
    if (*(_QWORD *)(a1 + 104))
    {
      return 4294960591;
    }
    else
    {
      *(_DWORD *)(a1 + 72) = 4;
      *(_QWORD *)(a1 + 104) = cf;
      CFRetain(cf);
      return 0;
    }
  }
  return result;
}

uint64_t sub_21A6DDBE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t result;
  const __CFString *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  if (dword_2550EFCA0 <= 800 && (dword_2550EFCA0 != -1 || sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u)))
    sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"OSStatus BSConfiguration_SetupSecureWANManagementFlags(BSConfigurationContextRef)", 800, (uint64_t)" \n", a5, a6, a7, a8, v16);
  if (!a1)
    return 4294960591;
  if (*(_DWORD *)(a1 + 144) != 1634561902)
    return 4294960591;
  v9 = *(_QWORD *)(a1 + 8);
  if (!v9)
    return 4294960591;
  v17 = 0;
  result = sub_21A6D4478(v9, 1937327724, (char *)&v17 + 4);
  if (!(_DWORD)result)
  {
    if ((v17 & 0x4000000000) == 0)
      return 0;
    v11 = (const __CFString *)*MEMORY[0x24BDBD268];
    result = sub_21A6D42C8(*(_QWORD *)(a1 + 8), 1651725143, (const __CFString *)*MEMORY[0x24BDBD268]);
    if (!(_DWORD)result)
    {
      result = sub_21A6D4478(*(_QWORD *)(a1 + 8), 1936017004, &v17);
      if (!(_DWORD)result)
      {
        if ((v17 & 0x10001) != 0x10000)
          return 0;
        result = sub_21A6D42C8(*(_QWORD *)(a1 + 8), 1651726147, v11);
        if (!(_DWORD)result)
        {
          if (dword_2550EFCA0 > 800)
            return 0;
          if (dword_2550EFCA0 != -1 || (result = sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u), (_DWORD)result))
          {
            sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"OSStatus BSConfiguration_SetupSecureWANManagementFlags(BSConfigurationContextRef)", 800, (uint64_t)"BSSimpleWanConfiguration OFF \n", v12, v13, v14, v15, v16);
            return 0;
          }
        }
      }
    }
  }
  return result;
}

uint64_t sub_21A6DDD64(uint64_t a1, int a2, const __CFString *a3, const __CFString **a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12;
  uint64_t v13;
  CFTypeID TypeID;
  const __CFString *DeepCopy;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  const __CFString *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _BOOL4 v27;
  uint64_t i;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  CFDataRef theData;
  CFTypeRef cf;

  if (dword_2550EFCA0 <= 800 && (dword_2550EFCA0 != -1 || sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u)))
    sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"OSStatus _BSConfiguration_CopySourceWiFIPlistForImport(BSConfigurationContextRef, eBSConfigurationSettingsMode, CFDictionaryRef, CFDictionaryRef *)", 800, (uint64_t)" \n", a5, a6, a7, a8, v42);
  v12 = 4294960591;
  if (a1)
  {
    if (a4)
    {
      if (a3)
      {
        if (*(_DWORD *)(a1 + 144) == 1634561902)
        {
          theData = 0;
          cf = 0;
          sub_21A693B94(a3, (uint64_t)&cf, (UInt8 *)"%kC", (uint64_t)a4, a5, a6, a7, a8, 1466517097);
          v12 = v13;
          if (!(_DWORD)v13)
          {
            if (!cf)
              return 4294960568;
            TypeID = CFDictionaryGetTypeID();
            if (TypeID != CFGetTypeID(cf))
              return 4294960540;
            DeepCopy = (const __CFString *)CFPropertyListCreateDeepCopy((CFAllocatorRef)*MEMORY[0x24BDBD240], cf, 2uLL);
            if (DeepCopy)
            {
              v21 = DeepCopy;
              sub_21A693B94(a3, (uint64_t)&theData, (UInt8 *)"%kC", v16, v17, v18, v19, v20, 1717920116);
              v12 = v22;
              if (!(_DWORD)v22)
              {
                if (theData)
                {
                  v27 = !sub_21A6D4724(*(_QWORD *)(a1 + 8), 1198748750) || sub_21A70F174(theData, 1198748750) == 0;
                  for (i = 0; i != 29; ++i)
                  {
                    sub_21A69043C(v21, 0, off_24DD077F0[i], 0, v23, v24, v25, v26);
                    if ((_DWORD)v29)
                      goto LABEL_44;
                  }
                  if (*(_DWORD *)(a1 + 144) != 1634561902 || (*(_DWORD *)(a1 + 72) - 13) < 0xFFFFFFFC)
                  {
                    v30 = 0;
                    while (1)
                    {
                      sub_21A69043C(v21, 0, off_24DD078E0[v30], 0, v23, v24, v25, v26);
                      if ((_DWORD)v29)
                        break;
                      if (++v30 == 4)
                      {
                        if (v27)
                        {
                          sub_21A69043C(v21, 0, CFSTR("vaps"), 0, v23, v24, v25, v26);
                          v12 = v31;
                          if ((_DWORD)v31)
                            goto LABEL_45;
                        }
                        if (a2 != 8 && a2 != 6)
                          goto LABEL_35;
                        sub_21A69043C(v21, 0, CFSTR("raCA"), *MEMORY[0x24BDBD270], v23, v24, v25, v26);
                        v12 = v32;
                        if ((_DWORD)v32)
                          goto LABEL_45;
                        if (a2 != 8)
                        {
LABEL_35:
                          v33 = 0;
                          while (1)
                          {
                            sub_21A69043C(v21, 0, off_24DD07908[v33], 0, v23, v24, v25, v26);
                            if ((_DWORD)v29)
                              goto LABEL_44;
                            if (++v33 == 16)
                            {
                              if (a2 != 7 && a2 != 2)
                                goto LABEL_52;
                              v34 = 0;
                              while (1)
                              {
                                sub_21A69043C(v21, 0, off_24DD07990[v34], 0, v23, v24, v25, v26);
                                if ((_DWORD)v29)
                                  goto LABEL_44;
                                if (++v34 == 9)
                                  goto LABEL_52;
                              }
                            }
                          }
                        }
                        goto LABEL_52;
                      }
                    }
LABEL_44:
                    v12 = v29;
                    goto LABEL_45;
                  }
                  if (sub_21A6D4724(*(_QWORD *)(a1 + 8), 1884509249)
                    && sub_21A70F174(theData, 1884509249)
                    || (sub_21A69043C(v21, 0, CFSTR("pSTA"), 0, v36, v37, v38, v39), v12 = v40, !(_DWORD)v40))
                  {
                    if (!v27
                      || (sub_21A69043C(v21, 0, CFSTR("vaps"), 0, v36, v37, v38, v39), v12 = v41, !(_DWORD)v41))
                    {
LABEL_52:
                      v12 = 0;
                      *a4 = v21;
                      return v12;
                    }
                  }
                }
                else
                {
                  v12 = 4294960568;
                }
              }
LABEL_45:
              CFRelease(v21);
            }
            else
            {
              return 4294960568;
            }
          }
        }
      }
    }
  }
  return v12;
}

uint64_t sub_21A6DE0E8(uint64_t a1, const __CFString *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  const __CFString *v91;
  uint64_t v92;
  int v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  int v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  int v137;
  const __CFString *v138;
  const __CFString *v139;
  CFTypeRef v140;
  CFTypeRef cf;
  char v142;
  CFTypeRef v143;
  CFTypeRef v144;
  const void *v145;
  const char *v146;
  const __CFString *v147;
  const __CFString *v148;

  if (dword_2550EFCA0 <= 800 && (dword_2550EFCA0 != -1 || sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u)))
    sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"OSStatus _BSConfiguration_UpdateSettingsWithConfigOptions(BSConfigurationContextRef, CFDictionaryRef)", 800, (uint64_t)" \n", a5, a6, a7, a8, v136);
  v143 = 0;
  v144 = 0;
  if (!a1 || *(_DWORD *)(a1 + 144) != 1634561902)
    return 4294960578;
  if (!a2 || !*(_DWORD *)(a1 + 72))
    return 4294960591;
  v147 = 0;
  v148 = 0;
  v146 = 0;
  v145 = 0;
  v142 = 0;
  sub_21A693B94(a2, (uint64_t)&v148, (UInt8 *)"%kO", a4, a5, a6, a7, a8, (uint64_t)CFSTR("kBSAutoGuessSetupOptionKey_BaseName"));
  v16 = v15;
  if (!(_DWORD)v15)
  {
    if (!v148)
      return 4294960569;
    sub_21A693B94(a2, (uint64_t)&v147, (UInt8 *)"%kO", v10, v11, v12, v13, v14, (uint64_t)CFSTR("kBSAutoGuessSetupOptionKey_TargetBase"));
    if ((_DWORD)v17 != -6727)
    {
      v16 = v17;
      if ((_DWORD)v17)
        return v16;
      if (v147)
      {
        sub_21A693B94(a2, (uint64_t)&v145, (UInt8 *)"%kO", v18, v19, v20, v21, v22, (uint64_t)CFSTR("kBSAutoGuessSetupOptionKey_TargetSettings"));
        v16 = v28;
        if ((_DWORD)v28)
          return v16;
        if (v145)
        {
          v16 = sub_21A6DCD34(a1, v147, v145, v23, v24, v25, v26, v27);
          if ((_DWORD)v16)
            return v16;
          goto LABEL_17;
        }
      }
      return 4294960568;
    }
    cf = 0;
    sub_21A693B94(a2, (uint64_t)&v146, (UInt8 *)"%kO", v18, v19, v20, v21, v22, (uint64_t)CFSTR("kBSAutoGuessSetupOptionKey_TargetNetwork"));
    v16 = v57;
    if ((_DWORD)v57)
      return v16;
    if (!v146)
      return 4294960568;
    if (dword_2550EFCA0 <= 800 && (dword_2550EFCA0 != -1 || sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u)))
      sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"OSStatus _BSConfiguration_UpdateSettingsWithConfigOptions(BSConfigurationContextRef, CFDictionaryRef)", 800, (uint64_t)"\n\n\t\t          \t\t++++++++++ Config phase: \"%s\" ++++++++++\n\n", v53, v54, v55, v56, (uint64_t)"Joining/browsing for target");
    v16 = sub_21A70E918(*(_QWORD *)(a1 + 128), v146, 0, &cf, v53, v54, v55, v56);
    if (!(_DWORD)v16)
    {
      if (!cf)
        goto LABEL_39;
      v16 = sub_21A6DCE04(a1, (const __CFString *)cf);
      if (cf)
      {
        CFRelease(cf);
        cf = 0;
      }
      if (!(_DWORD)v16)
      {
LABEL_39:
        if (dword_2550EFCA0 <= 800)
        {
          if (dword_2550EFCA0 != -1 || sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u))
            sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"OSStatus _BSConfiguration_UpdateSettingsWithConfigOptions(BSConfigurationContextRef, CFDictionaryRef)", 800, (uint64_t)"\n\n\t\t          \t\t---------- Config phase: \"%s\" ----------\n\n", v58, v59, v60, v61, (uint64_t)"Joining/browsing for target");
          if (dword_2550EFCA0 <= 800 && (dword_2550EFCA0 != -1 || sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u)))
            sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"OSStatus _BSConfiguration_UpdateSettingsWithConfigOptions(BSConfigurationContextRef, CFDictionaryRef)", 800, (uint64_t)"\n\n\t\t          \t\t++++++++++ Config phase: \"%s\" ++++++++++\n\n", v58, v59, v60, v61, (uint64_t)"Reading target settings");
        }
        v16 = sub_21A6DE984(a1, 0, *(const __CFString **)a1, *(_QWORD *)(a1 + 8), 0, 0, 1, v61);
        if (!(_DWORD)v16)
        {
          if (dword_2550EFCA0 <= 800 && (dword_2550EFCA0 != -1 || sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u)))
            sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"OSStatus _BSConfiguration_UpdateSettingsWithConfigOptions(BSConfigurationContextRef, CFDictionaryRef)", 800, (uint64_t)"\n\n\t\t          \t\t---------- Config phase: \"%s\" ----------\n\n", v32, v33, v34, v35, (uint64_t)"Reading target settings");
LABEL_17:
          v16 = sub_21A6DDBE8(a1, v29, v30, v31, v32, v33, v34, v35);
          if (!(_DWORD)v16)
          {
            v16 = 4294960561;
            switch(*(_DWORD *)(a1 + 72))
            {
              case 1:
                goto LABEL_79;
              case 2:
                cf = 0;
                v139 = 0;
                v137 = 0;
                sub_21A693B94(a2, (uint64_t)&cf, (UInt8 *)"%kO", v36, v37, v38, v39, v40, (uint64_t)CFSTR("kBSAutoGuessSetupOptionKey_SourceNetwork"));
                v16 = v62;
                if ((_DWORD)v62)
                  return v16;
                if (!cf)
                  return 4294960568;
                sub_21A72E198((uint64_t)cf, (const char *)&v137, 0);
                if (v137 == 8)
                  v137 = 5;
                v140 = 0;
                sub_21A693B94(a2, (uint64_t)&v140, (UInt8 *)"%kO", v63, v64, v65, v66, v67, (uint64_t)CFSTR("kBSAutoGuessSetupOptionKey_NetworkPassword"));
                if ((_DWORD)v68)
                {
                  v16 = v68;
                  if ((_DWORD)v68 != -6727)
                    return v16;
                }
                sub_21A693B94(a2, (uint64_t)&v139, (UInt8 *)"%kO", v69, v70, v71, v72, v73, (uint64_t)CFSTR("kBSAutoGuessSetupOptionKey_BasePassword"));
                if ((_DWORD)v74)
                {
                  v16 = v74;
                  if ((_DWORD)v74 != -6727)
                    return v16;
                  if (!sub_21A68E3B0(*(const __CFString **)a1, v75, v76, v77, v78, v79, v80, v81))
                    return 4294960569;
                  v139 = CFSTR("public");
                }
                else if (!v139)
                {
                  return 4294960568;
                }
                v138 = 0;
                sub_21A693B94(a2, (uint64_t)&v138, (UInt8 *)"%kO", v77, v78, v79, v80, v81, (uint64_t)CFSTR("kBSAutoGuessSetupOptionKey_AirPlayPassword"));
                if ((_DWORD)v131)
                {
                  v16 = v131;
                  if ((_DWORD)v131 != -6727)
                    return v16;
                }
                v16 = sub_21A6DD6D8(a1, cf, v137, (const __CFString *)v140, v132, v133, v134, v135);
                if ((_DWORD)v16)
                  return v16;
                v16 = sub_21A6D42C8(*(_QWORD *)(a1 + 8), 1937330263, v139);
                if ((_DWORD)v16)
                  return v16;
                v91 = v138;
                if (!v138)
                  goto LABEL_67;
                v92 = *(_QWORD *)(a1 + 8);
                v93 = 1635077712;
                goto LABEL_76;
              case 3:
                cf = 0;
                sub_21A693B94(a2, (uint64_t)&cf, (UInt8 *)"%kO", v36, v37, v38, v39, v40, (uint64_t)CFSTR("kBSAutoGuessSetupOptionKey_ConfigChangeLogDict"));
                if ((_DWORD)v82)
                {
                  v16 = v82;
                  if ((_DWORD)v82 != -6727)
                    return v16;
                }
                v83 = sub_21A6DDB28(a1, cf);
                goto LABEL_66;
              case 4:
                v140 = 0;
                cf = 0;
                sub_21A693B94(a2, (uint64_t)&v140, (UInt8 *)"%kO", v36, v37, v38, v39, v40, (uint64_t)CFSTR("kBSAutoGuessSetupOptionKey_ConfigChangeLogDict"));
                v16 = v84;
                if ((_DWORD)v84)
                  return v16;
                if (!v140)
                  return 4294960568;
                v16 = sub_21A6DDB84(a1, v140);
                if ((_DWORD)v16)
                  return v16;
                sub_21A693B94(a2, (uint64_t)&cf, (UInt8 *)"%kO", v85, v86, v87, v88, v89, (uint64_t)CFSTR("kBSAutoGuessSetupOptionKey_BasePassword"));
                v16 = v90;
                if ((_DWORD)v90)
                  return v16;
                v91 = (const __CFString *)cf;
                if (!cf)
                  return 4294960568;
                v92 = *(_QWORD *)(a1 + 8);
                v93 = 1937330263;
                goto LABEL_76;
              case 6:
              case 7:
              case 8:
              case 9:
              case 0xA:
              case 0xB:
                sub_21A693B94(a2, (uint64_t)&v144, (UInt8 *)"%kO", v36, v37, v38, v39, v40, (uint64_t)CFSTR("kBSAutoGuessSetupOptionKey_SourceBase"));
                v16 = v46;
                if ((_DWORD)v46)
                  return v16;
                if (!v144)
                  return 4294960568;
                sub_21A693B94(a2, (uint64_t)&v143, (UInt8 *)"%kO", v41, v42, v43, v44, v45, (uint64_t)CFSTR("kBSAutoGuessSetupOptionKey_SourceSettings"));
                if ((_DWORD)v47 == -6727)
                  goto LABEL_67;
                v16 = v47;
                if ((_DWORD)v47)
                  return v16;
                if (!v143)
                  return 4294960568;
                goto LABEL_67;
              case 0xC:
                sub_21A693B94(a2, (uint64_t)&v144, (UInt8 *)"%kO", v36, v37, v38, v39, v40, (uint64_t)CFSTR("kBSAutoGuessSetupOptionKey_SourceBase"));
                v16 = v94;
                if ((_DWORD)v94)
                  return v16;
                if (!v144)
                  return 4294960568;
LABEL_79:
                v140 = 0;
                cf = 0;
                v138 = 0;
                v139 = 0;
                sub_21A693B94(a2, (uint64_t)&cf, (UInt8 *)"%kO", v36, v37, v38, v39, v40, (uint64_t)CFSTR("kBSAutoGuessSetupOptionKey_NetworkName"));
                v16 = v100;
                if ((_DWORD)v100)
                  return v16;
                if (!cf)
                  return 4294960568;
                sub_21A693B94(a2, (uint64_t)&v140, (UInt8 *)"%kO", v95, v96, v97, v98, v99, (uint64_t)CFSTR("kBSAutoGuessSetupOptionKey_NetworkPassword"));
                v16 = v106;
                if ((_DWORD)v106)
                  return v16;
                if (!v140)
                  return 4294960568;
                sub_21A693B94(a2, (uint64_t)&v139, (UInt8 *)"%kO", v101, v102, v103, v104, v105, (uint64_t)CFSTR("kBSAutoGuessSetupOptionKey_BasePassword"));
                v16 = v112;
                if ((_DWORD)v112)
                  return v16;
                if (!v139)
                  return 4294960568;
                v142 = 0;
                sub_21A693B94(a2, (uint64_t)&v142, (UInt8 *)"%kO:BOOL", v107, v108, v109, v110, v111, (uint64_t)CFSTR("kBSAutoGuessSetupOptionKey_SkipInternetTests"));
                if ((_DWORD)v113)
                {
                  v16 = v113;
                  if ((_DWORD)v113 != -6727)
                    return v16;
                }
                if (!sub_21A6D4724(*(_QWORD *)(a1 + 8), 1464877357))
                  return 4294960561;
                if (sub_21A6D4724(*(_QWORD *)(a1 + 8), 1095062317))
                  v117 = 7;
                else
                  v117 = 4;
                v16 = sub_21A6DD938(a1, (const __CFString *)cf, v117, (const __CFString *)v140, 0, v114, v115, v116);
                if ((_DWORD)v16)
                  return v16;
                v16 = sub_21A6D42C8(*(_QWORD *)(a1 + 8), 1937330263, v139);
                if ((_DWORD)v16)
                  return v16;
                sub_21A6DEDBC(a1, a2, v118, v119, v120, v121, v122, v123);
                v16 = v129;
                if ((_DWORD)v129)
                  return v16;
                sub_21A693B94(a2, (uint64_t)&v138, (UInt8 *)"%kO", v124, v125, v126, v127, v128, (uint64_t)CFSTR("kBSAutoGuessSetupOptionKey_DiskSharing_Password"));
                if ((_DWORD)v130 == -6727)
                  goto LABEL_67;
                v16 = v130;
                if ((_DWORD)v130)
                  return v16;
                if (!v138)
                  return 4294960568;
                v16 = sub_21A6D4310(*(_QWORD *)(a1 + 8), 1651721805, 1);
                if (!(_DWORD)v16)
                {
                  v92 = *(_QWORD *)(a1 + 8);
                  v91 = v138;
                  v93 = 1718842224;
LABEL_76:
                  v83 = sub_21A6D42C8(v92, v93, v91);
LABEL_66:
                  v16 = v83;
                  if (!(_DWORD)v83)
                  {
LABEL_67:
                    if (!v144
                      || (v16 = sub_21A6DD608(a1, *(unsigned int *)(a1 + 72), v144, v143, v48, v49, v50, v51),
                          !(_DWORD)v16))
                    {
                      v16 = sub_21A6D42C8(*(_QWORD *)(a1 + 8), 1937329773, v148);
                    }
                  }
                }
                break;
              default:
                return v16;
            }
          }
        }
      }
    }
  }
  return v16;
}

uint64_t sub_21A6DE984(uint64_t a1, const __CFArray *a2, const __CFString *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  int v9;
  int v10;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  const __CFString *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  CFTypeRef v41;
  uint64_t v42;
  int v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  const __CFString *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unsigned int v59;
  uint64_t v61;
  int v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  CFTypeRef cf;

  v8 = a7;
  v9 = a6;
  v10 = a5;
  if (dword_2550EFCA0 <= 800 && (dword_2550EFCA0 != -1 || sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u)))
    sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"OSStatus _BSConfiguration_ReadPropertiesForBase(BSConfigurationContextRef, CFArrayRef, CFDictionaryRef, BSRef, Boolean, Boolean, Boolean)", 800, (uint64_t)"\n", a5, a6, a7, a8, v61);
  if (!a3 || !a4)
  {
    v32 = 4294960591;
    sub_21A70ACEC(*(_QWORD *)(a1 + 128), 19, 4294960591, 0, a5, a6, a7, a8);
    return v32;
  }
  sub_21A68E77C(a3);
  v23 = 18;
  if (!v15)
    v23 = 3;
  v66 = v23;
  if (v15)
    v24 = 10;
  else
    v24 = 6;
  if (v9)
  {
    v25 = sub_21A709D98(*(_QWORD *)(a1 + 128), v16, v17, v18, v19, v20, v21, v22);
    if (v25)
    {
      v30 = v25;
      v31 = 0;
      a3 = 0;
      goto LABEL_63;
    }
  }
  v65 = v24;
  CFRetain(a3);
  v31 = sub_21A68EE6C(a3, v33, v34, v35, v36, v37, v38, v39);
  if (!v31)
  {
    v30 = -6727;
    goto LABEL_61;
  }
  v62 = v8;
  sub_21A70ACEC(*(_QWORD *)(a1 + 128), 18, 0, (uint64_t)v31, v26, v27, v28, v29);
  v64 = 0;
  v63 = 0;
  v43 = 0;
  while (1)
  {
    while (1)
    {
      v44 = sub_21A6D19B8(a4, a2, 1);
      if (v44 != -16)
        break;
      if (v43)
      {
        v43 = 1;
        if (v10)
          goto LABEL_46;
      }
      else
      {
        if (*(_DWORD *)(a1 + 144) != 1634561902 || !sub_21A68EE6C(a3, v40, (uint64_t)v41, v42, v26, v27, v28, v29))
        {
LABEL_60:
          v30 = -6705;
          goto LABEL_61;
        }
        cf = 0;
        v45 = sub_21A70C6C4(*(_QWORD *)(a1 + 128), CFSTR("keychainBaseStationType"), a3, &cf, v26, v27, v28, v29);
        if (v45)
        {
          v30 = v45;
          if (v45 == -6727)
            goto LABEL_32;
        }
        else
        {
          v41 = cf;
          if (!cf)
          {
            v30 = -6728;
            goto LABEL_61;
          }
          v30 = sub_21A6D42C8(a4, 1651721296, (const __CFString *)cf);
          if (cf)
            CFRelease(cf);
        }
        v43 = 1;
        if (v30)
        {
          if (v30 != -6727)
            goto LABEL_61;
LABEL_32:
          if (v62 && !*(_BYTE *)(a1 + 90))
          {
            v46 = sub_21A709FC0(*(_QWORD *)(a1 + 128), 0, (uint64_t)v41, v42, v26, v27, v28, v29);
            if (v46 || !v10)
            {
              if (v46)
                v30 = v46;
              else
                v30 = -16;
              goto LABEL_61;
            }
          }
          else if (!v10)
          {
            v30 = -16;
            goto LABEL_61;
          }
LABEL_46:
          if (*(_DWORD *)(a1 + 144) != 1634561902)
            goto LABEL_60;
          cf = 0;
          CFRetain(a3);
          v54 = sub_21A68EE6C(a3, v47, v48, v49, v50, v51, v52, v53);
          if (!v54)
          {
            v30 = -6705;
LABEL_74:
            CFRelease(a3);
            goto LABEL_61;
          }
          v59 = sub_21A70CA8C(*(_QWORD *)(a1 + 128), CFSTR("keychainBaseStationType"), (uint64_t)v54, &cf, v55, v56, v57, v58);
          if (v59)
          {
            v30 = v59;
            goto LABEL_74;
          }
          if (!cf)
          {
            v30 = -6728;
            goto LABEL_74;
          }
          v30 = sub_21A6D42C8(a4, 1651721296, (const __CFString *)cf);
          if (cf)
          {
            CFRelease(cf);
            cf = 0;
          }
          CFRelease(a3);
          v63 = 1;
          v43 = 1;
          if (v30)
            goto LABEL_61;
        }
      }
    }
    v30 = v44;
    if (v44 != -6753)
      break;
    if (v64 == v66 - 1)
    {
      v30 = -6753;
      goto LABEL_61;
    }
    if (dword_2550EFCA0 <= 800 && (dword_2550EFCA0 != -1 || sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u)))
      sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"OSStatus _BSConfiguration_ReadPropertiesForBase(BSConfigurationContextRef, CFArrayRef, CFDictionaryRef, BSRef, Boolean, Boolean, Boolean)", 800, (uint64_t)"## connection err, retries: %d of %d \n", v26, v27, v28, v29, v64 + 1);
    ++v64;
    v30 = sub_21A70BD94(*(_QWORD *)(a1 + 128), v65);
    if (v30)
      goto LABEL_61;
  }
  if (!v44)
  {
    LOBYTE(cf) = 0;
    v30 = sub_21A709F1C(*(_QWORD *)(a1 + 128), &cf, (uint64_t)v41, v42, v26, v27, v28, v29);
    if (!v30 && (_BYTE)cf && v63)
      sub_21A6E3C78(a1, a3, a4, v42, v26, v27, v28, v29);
  }
LABEL_61:
  if (v9)
    sub_21A709E44(*(_QWORD *)(a1 + 128), v40, (uint64_t)v41, v42, v26, v27, v28, v29);
LABEL_63:
  if (v30 == -6735)
    v32 = 4294967280;
  else
    v32 = v30;
  sub_21A70ACEC(*(_QWORD *)(a1 + 128), 19, v32, (uint64_t)v31, v26, v27, v28, v29);
  if (a3)
    CFRelease(a3);
  return v32;
}

void sub_21A6DEDBC(uint64_t a1, const __CFString *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  int v29;
  char v30;
  CFStringRef theString;
  char v32[21];
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  if (*(_DWORD *)(a1 + 144) == 1634561902)
  {
    if (*(_QWORD *)(a1 + 8))
    {
      theString = 0;
      v30 = 0;
      v29 = 0;
      sub_21A693B94(a2, (uint64_t)&v30, (UInt8 *)"%kO:BOOL", a4, a5, a6, a7, a8, (uint64_t)CFSTR("kBSAutoGuessSetupOptionKey_GuestNetwork_On"));
      if (!v10)
      {
        sub_21A6D6E44(v32, 0x15uLL);
        if (!sub_21A6D41A8(*(_QWORD *)(a1 + 8), v32, v30 != 0))
        {
          if (v30)
          {
            sub_21A693B94(a2, (uint64_t)&theString, (UInt8 *)"%kO", v11, v12, v13, v14, v15, (uint64_t)CFSTR("kBSAutoGuessSetupOptionKey_GuestNetwork_Name"));
            if (v16 == -6727
              || !v16
              && theString
              && (sub_21A6D6E44(v32, 0x15uLL), !sub_21A6D40A0(*(_QWORD *)(a1 + 8), v32, theString)))
            {
              sub_21A693B94(a2, (uint64_t)&v29, (UInt8 *)"%kO:int", v17, v18, v19, v20, v21, (uint64_t)CFSTR("kBSAutoGuessSetupOptionKey_GuestNetwork_Security"));
              if (!v22)
              {
                sub_21A6D6E44(v32, 0x15uLL);
                if (!sub_21A6D4124(*(_QWORD *)(a1 + 8), v32, v29) && v29 != 1)
                {
                  sub_21A693B94(a2, (uint64_t)&theString, (UInt8 *)"%kO", v23, v24, v25, v26, v27, (uint64_t)CFSTR("kBSAutoGuessSetupOptionKey_GuestNetwork_Password"));
                  if (!v28)
                  {
                    if (theString)
                    {
                      if (CFStringGetLength(theString))
                      {
                        sub_21A6D6E44(v32, 0x15uLL);
                        sub_21A6D40A0(*(_QWORD *)(a1 + 8), v32, theString);
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

uint64_t sub_21A6DEFF0(uint64_t a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v4;

  if (!a1)
    return 4294960591;
  result = 4294960591;
  if (a2 && *(_DWORD *)(a1 + 144) == 1634561902)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4)
    {
      result = 0;
      *a2 = v4;
    }
    else
    {
      return 4294960569;
    }
  }
  return result;
}

uint64_t sub_21A6DF038(uint64_t a1, _BYTE *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;

  if (dword_2550EFCA0 <= 800 && (dword_2550EFCA0 != -1 || sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u)))
    sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"OSStatus BSConfiguration_GetSaveBasePasswordToKeychain(BSConfigurationContextRef, Boolean *)", 800, (uint64_t)" \n", a5, a6, a7, a8, v11);
  if (a1 && *(_DWORD *)(a1 + 144) == 1634561902)
    return sub_21A709F1C(*(_QWORD *)(a1 + 128), a2, a3, a4, a5, a6, a7, a8);
  else
    return 4294960591;
}

uint64_t sub_21A6DF0D4(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;

  if (dword_2550EFCA0 <= 800 && (dword_2550EFCA0 != -1 || sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u)))
    sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"OSStatus BSConfiguration_SetSaveBasePasswordToKeychain(BSConfigurationContextRef, Boolean)", 800, (uint64_t)" \n", a5, a6, a7, a8, v11);
  if (a1 && *(_DWORD *)(a1 + 144) == 1634561902)
    return sub_21A709FC0(*(_QWORD *)(a1 + 128), a2, a3, a4, a5, a6, a7, a8);
  else
    return 4294960591;
}

uint64_t sub_21A6DF170(uint64_t a1, _BYTE *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;

  if (dword_2550EFCA0 <= 800 && (dword_2550EFCA0 != -1 || sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u)))
    sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"OSStatus BSConfiguration_GetSaveWiFiPasswordToKeychain(BSConfigurationContextRef, Boolean *)", 800, (uint64_t)" \n", a5, a6, a7, a8, v11);
  if (a1 && *(_DWORD *)(a1 + 144) == 1634561902)
    return sub_21A70A054(*(_QWORD *)(a1 + 128), a2, a3, a4, a5, a6, a7, a8);
  else
    return 4294960591;
}

uint64_t sub_21A6DF20C(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;

  if (dword_2550EFCA0 <= 800 && (dword_2550EFCA0 != -1 || sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u)))
    sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"OSStatus BSConfiguration_SetSaveWiFiPasswordToKeychain(BSConfigurationContextRef, Boolean)", 800, (uint64_t)" \n", a5, a6, a7, a8, v11);
  if (a1 && *(_DWORD *)(a1 + 144) == 1634561902)
    return sub_21A70A0F8(*(_QWORD *)(a1 + 128), a2, a3, a4, a5, a6, a7, a8);
  else
    return 4294960591;
}

uint64_t sub_21A6DF2A8(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;
  uint64_t v11;

  if (dword_2550EFCA0 <= 800 && (dword_2550EFCA0 != -1 || sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u)))
    sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"OSStatus BSConfiguration_SetAskAboutSavingBasePasswords(BSConfigurationContextRef, Boolean)", 800, (uint64_t)" \n", a5, a6, a7, a8, v11);
  if (!a1 || *(_DWORD *)(a1 + 144) != 1634561902)
    return 4294960591;
  result = 0;
  *(_BYTE *)(a1 + 90) = a2;
  return result;
}

uint64_t sub_21A6DF33C(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;
  uint64_t v11;

  if (dword_2550EFCA0 <= 800 && (dword_2550EFCA0 != -1 || sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u)))
    sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"OSStatus BSConfiguration_SetSettingsModeIsAutomatic(BSConfigurationContextRef, Boolean)", 800, (uint64_t)" \n", a5, a6, a7, a8, v11);
  if (!a1 || *(_DWORD *)(a1 + 144) != 1634561902)
    return 4294960591;
  result = 0;
  *(_BYTE *)(a1 + 76) = a2;
  return result;
}

uint64_t sub_21A6DF3D0(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t result;

  if (!a1 || *(_DWORD *)(a1 + 144) != 1634561902)
    return 4294960578;
  if (!a2)
    return 4294960591;
  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
    return 4294960569;
  result = 0;
  *a2 = v2;
  return result;
}

uint64_t sub_21A6DF418(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t result;

  if (!a1 || *((_DWORD *)a1 + 36) != 1634561902)
    return 4294960578;
  if (!a2)
    return 4294960591;
  v2 = *a1;
  if (!*a1)
    return 4294960569;
  result = 0;
  *a2 = v2;
  return result;
}

uint64_t sub_21A6DF460(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;
  uint64_t v10;
  void *context;

  if (dword_2550EFCA0 <= 800 && (dword_2550EFCA0 != -1 || sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u)))
    sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"OSStatus BSConfiguration_JoinAsync(BSConfigurationContextRef)", 800, (uint64_t)" \n", a5, a6, a7, a8, v10);
  context = 0;
  if (!a1 || *(_DWORD *)(a1 + 144) != 1634561902 || !*(_QWORD *)(a1 + 120))
    return 4294960591;
  result = sub_21A6D804C(a1, 0, &context, a4, a5, a6, a7, a8);
  if (!(_DWORD)result)
  {
    if (context)
    {
      dispatch_group_async_f(*(dispatch_group_t *)(a1 + 120), *(dispatch_queue_t *)(a1 + 112), context, (dispatch_function_t)sub_21A6DF534);
      return 0;
    }
    else
    {
      return 4294960568;
    }
  }
  return result;
}

void sub_21A6DF534(_DWORD *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  const __CFString *v12;
  uint64_t v13;

  if (dword_2550EFCA0 <= 800 && (dword_2550EFCA0 != -1 || sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u)))
    sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"void __BSConfiguration_JoinSync(void *)", 800, (uint64_t)" \n", a5, a6, a7, a8, v13);
  if (a1)
  {
    if (a1[4] == 1634561902)
    {
      v9 = *(_QWORD *)a1;
      v10 = *(const char **)(*(_QWORD *)a1 + 56);
      v11 = sub_21A72E204((uint64_t)v10, a2);
      if (v11)
      {
        v12 = (const __CFString *)v11;
        if (sub_21A72E214((uint64_t)v10, a2))
        {
          if (!sub_21A70B84C(*(_QWORD *)(v9 + 128), v12, 0, a4, a5, a6, a7, a8))
          {
            if (dword_2550EFCA0 <= 800 && (dword_2550EFCA0 != -1 || sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u)))
              sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"void __BSConfiguration_JoinSync(void *)", 800, (uint64_t)"\n\n\t\t          \t\t++++++++++ Config phase: \"%s\" ++++++++++\n\n", a5, a6, a7, a8, (uint64_t)"Joining Network");
            if (!sub_21A70E004(*(_QWORD *)(v9 + 128), v10, &stru_24DD08368, 1, 0, a6, a7, a8)
              && dword_2550EFCA0 <= 800
              && (dword_2550EFCA0 != -1 || sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u)))
            {
              sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"void __BSConfiguration_JoinSync(void *)", 800, (uint64_t)"\n\n\t\t          \t\t---------- Config phase: \"%s\" ----------\n\n", a5, a6, a7, a8, (uint64_t)"Joining Network");
            }
          }
        }
      }
    }
    sub_21A6E26C4(a1, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
  }
}

uint64_t sub_21A6DF6E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;
  uint64_t v10;
  void *context;

  if (dword_2550EFCA0 <= 800 && (dword_2550EFCA0 != -1 || sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u)))
    sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"OSStatus BSConfiguration_JoinAndBrowseAsync(BSConfigurationContextRef)", 800, (uint64_t)" \n", a5, a6, a7, a8, v10);
  context = 0;
  if (!a1 || *(_DWORD *)(a1 + 144) != 1634561902 || !*(_QWORD *)(a1 + 120))
    return 4294960591;
  result = sub_21A6D804C(a1, 0, &context, a4, a5, a6, a7, a8);
  if (!(_DWORD)result)
  {
    if (context)
    {
      dispatch_group_async_f(*(dispatch_group_t *)(a1 + 120), *(dispatch_queue_t *)(a1 + 112), context, (dispatch_function_t)sub_21A6DF7BC);
      return 0;
    }
    else
    {
      return 4294960568;
    }
  }
  return result;
}

void sub_21A6DF7BC(_DWORD *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  CFTypeRef *v9;
  const char *v10;
  uint64_t v11;
  const __CFString *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  const __CFAllocator *v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  CFTypeRef cf;
  const __CFString *v28;

  if (dword_2550EFCA0 <= 800 && (dword_2550EFCA0 != -1 || sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u)))
    sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"void __BSConfiguration_JoinAndBrowseSync(void *)", 800, (uint64_t)" \n", a5, a6, a7, a8, v26);
  cf = 0;
  if (a1)
  {
    v28 = 0;
    if (a1[4] == 1634561902)
    {
      v9 = *(CFTypeRef **)a1;
      v10 = *(const char **)(*(_QWORD *)a1 + 56);
      v11 = sub_21A72E204((uint64_t)v10, a2);
      if (v11)
      {
        v12 = (const __CFString *)v11;
        if (sub_21A72E214((uint64_t)v10, a2))
        {
          if (!sub_21A70B84C((uint64_t)v9[16], v12, 0, a4, a5, a6, a7, a8))
          {
            if (dword_2550EFCA0 <= 800 && (dword_2550EFCA0 != -1 || sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u)))
              sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"void __BSConfiguration_JoinAndBrowseSync(void *)", 800, (uint64_t)"\n\n\t\t          \t\t++++++++++ Config phase: \"%s\" ++++++++++\n\n", v13, v14, v15, v16, (uint64_t)"Joining Network");
            if (sub_21A70E004((uint64_t)v9[16], v10, &stru_24DD08368, 1, 0, v14, v15, v16))
              goto LABEL_22;
            if (dword_2550EFCA0 <= 800 && (dword_2550EFCA0 != -1 || sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u)))
              sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"void __BSConfiguration_JoinAndBrowseSync(void *)", 800, (uint64_t)"\n\n\t\t          \t\t---------- Config phase: \"%s\" ----------\n\n", a5, a6, a7, a8, (uint64_t)"Joining Network");
          }
          v17 = sub_21A72E2F4((uint64_t)v10, a2);
          v18 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
          sub_21A72E284((uint64_t)v10, v19);
          if (!sub_21A692FEC(v18, (CFTypeRef *)&v28, (uint64_t)"{%ks={%ks=%O%ks=%i%ks=%i}}", v20, v21, v22, v23, v24, (uint64_t)"txt")&& sub_21A6CFB44(v17, 1))
          {
            v25 = sub_21A70D318((uint64_t)v9[16], 0, v28, 0, 120, &cf, a7, a8);
            if (v28)
            {
              CFRelease(v28);
              v28 = 0;
            }
            if (!v25 && cf)
            {
              *v9 = cf;
              cf = 0;
            }
          }
        }
      }
    }
LABEL_22:
    sub_21A6E26C4(a1, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
    if (cf)
      CFRelease(cf);
  }
}

uint64_t sub_21A6DFA44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  CFTypeRef v11;
  BOOL v12;
  uint64_t v14;
  CFTypeRef cf;
  void *context;

  if (dword_2550EFCA0 <= 800 && (dword_2550EFCA0 != -1 || sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u)))
    sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"OSStatus BSConfiguration_ReadPropertiesAsync(BSConfigurationContextRef, CFArrayRef)", 800, (uint64_t)" \n", a5, a6, a7, a8, v14);
  context = 0;
  if (!a1 || *(_DWORD *)(a1 + 144) != 1634561902 || !*(_QWORD *)(a1 + 120))
    return 4294960591;
  cf = 0;
  if (a2)
  {
    v10 = sub_21A692FEC((const __CFAllocator *)*MEMORY[0x24BDBD240], &cf, (uint64_t)"{%ks=%O}", a4, a5, a6, a7, a8, (uint64_t)"AsyncParam_PropertiesArray");
    v11 = cf;
    if ((_DWORD)v10)
      v12 = 1;
    else
      v12 = cf == 0;
    if (v12)
      return v10;
  }
  else
  {
    v11 = 0;
    cf = 0;
  }
  v10 = sub_21A6D804C(a1, v11, &context, a4, a5, a6, a7, a8);
  if (cf)
  {
    CFRelease(cf);
    cf = 0;
  }
  if (!(_DWORD)v10)
  {
    if (context)
    {
      dispatch_group_async_f(*(dispatch_group_t *)(a1 + 120), *(dispatch_queue_t *)(a1 + 112), context, (dispatch_function_t)sub_21A6DFB80);
      return 0;
    }
    else
    {
      return 4294960568;
    }
  }
  return v10;
}

void sub_21A6DFB80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  const __CFString *v10;
  int v11;
  const __CFString *v12;
  int v13;
  uint64_t v14;
  const __CFArray *v15;

  if (dword_2550EFCA0 <= 800 && (dword_2550EFCA0 != -1 || sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u)))
    sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"void __BSConfiguration_ReadPropertiesSync(void *)", 800, (uint64_t)" \n", a5, a6, a7, a8, v14);
  if (a1)
  {
    v15 = 0;
    if (*(_DWORD *)(a1 + 16) == 1634561902)
    {
      v9 = *(_QWORD *)a1;
      if (*(_QWORD *)a1)
      {
        if (*(_DWORD *)(v9 + 144) == 1634561902)
        {
          if (*(_QWORD *)v9)
          {
            if (*(_QWORD *)(v9 + 8))
            {
              v15 = 0;
              v10 = *(const __CFString **)(a1 + 8);
              if (!v10
                || (sub_21A693B94(v10, (uint64_t)&v15, (UInt8 *)"%ks", a4, a5, a6, a7, a8, (uint64_t)"AsyncParam_PropertiesArray"), v11 == -6727)|| !v11 && v15)
              {
                if (!sub_21A709EEC(*(_QWORD *)(v9 + 128)))
                  goto LABEL_25;
                v12 = *(const __CFString **)v9;
                CFRetain(*(CFTypeRef *)v9);
                v13 = sub_21A6E2D80(v9, v12);
                if (v12)
                  CFRelease(v12);
                if (!v13)
                {
LABEL_25:
                  if (!sub_21A6DE984(v9, v15, *(const __CFString **)v9, *(_QWORD *)(v9 + 8), 1, 1, 0, a8)&& !sub_21A6E2E9C(v9, a2, a3, a4, a5, a6, a7, a8))
                  {
                    sub_21A6E3B78(v9, a2, a3, a4, a5, a6, a7, a8);
                  }
                }
              }
            }
          }
        }
      }
    }
    sub_21A6E26C4((_DWORD *)a1, a2, a3, a4, a5, a6, a7, a8);
  }
}

uint64_t sub_21A6DFCEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (dword_2550EFCA0 <= 800 && (dword_2550EFCA0 != -1 || sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u)))
    sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"OSStatus BSConfiguration_WriteSettingsAsync(BSConfigurationContextRef)", 800, (uint64_t)" \n", a5, a6, a7, a8, v14);
  if (!a1 || *(_DWORD *)(a1 + 144) != 1634561902 || !*(_QWORD *)(a1 + 120))
    return 4294960591;
  result = sub_21A6D7BCC(a1, 1u, a3, a4, a5, a6, a7, a8);
  if (!(_DWORD)result)
  {
    dispatch_group_async_f(*(dispatch_group_t *)(a1 + 120), *(dispatch_queue_t *)(a1 + 112), (void *)a1, (dispatch_function_t)sub_21A6DFDB8);
    sub_21A70ACEC(*(_QWORD *)(a1 + 128), 14, 0, 0, v10, v11, v12, v13);
    return 0;
  }
  return result;
}

void sub_21A6DFDB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  CFTypeRef v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _BOOL4 v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  const char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  const __CFString *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  const __CFString *v73;
  uint64_t v74;
  int v75;
  uint64_t v76;
  const char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  int v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  const __CFString *v93;
  const __CFString *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  const __CFArray *v143;
  int v144;
  unsigned int v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  const void *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  int v176;
  int v177;
  const char *v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  int *v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  int v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  const __CFString *v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  int v228;
  unsigned int v229;
  const __CFAllocator *v230;
  uint64_t v231;
  char v232;
  uint64_t v233;
  int v234;
  BOOL v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  unsigned int v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  const __CFAllocator *v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  __CFArray *Mutable;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  const __CFAllocator *v264;
  CFTypeRef v265;
  unsigned int v266;
  CFTypeRef v267;
  CFTypeRef v268;
  CFTypeRef v269;
  __int16 v270;
  BOOL v271;
  BOOL v272;
  CFTypeRef v273;
  CFTypeRef v274;
  CFTypeRef v275;
  CFTypeRef v276;
  CFTypeRef v277;
  CFTypeRef v278;
  CFTypeRef DeepCopy;
  CFTypeRef cf;
  CFTypeRef v281;
  const __CFString *v282[3];
  CFBooleanRef v283[3];
  const __CFString *v284[3];
  CFDataRef v285[5];
  CFRange v286;

  v285[3] = *(CFDataRef *)MEMORY[0x24BDAC8D0];
  v271 = 0;
  v268 = 0;
  v269 = 0;
  if (dword_2550EFCA0 <= 800 && (dword_2550EFCA0 != -1 || sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u)))
    sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"void __BSConfiguration_WriteSettingsSync(void *)", 800, (uint64_t)" \n", a5, a6, a7, a8, v263);
  cf = 0;
  v281 = 0;
  v278 = 0;
  DeepCopy = 0;
  v276 = 0;
  v277 = 0;
  v274 = 0;
  v275 = 0;
  v272 = 0;
  v270 = 0;
  v273 = 0;
  v267 = 0;
  if (!a1)
    goto LABEL_56;
  v16 = sub_21A709D98(*(_QWORD *)(a1 + 128), a2, a3, a4, a5, a6, a7, a8);
  if ((_DWORD)v16)
    goto LABEL_48;
  LOBYTE(v270) = 0;
  v17 = *(_QWORD *)(a1 + 8);
  if (v17 && sub_21A6D67BC(v17))
  {
    if (dword_2550EFCA0 <= 800 && (dword_2550EFCA0 != -1 || sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u)))
      sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"void __BSConfiguration_WriteSettingsSync(void *)", 800, (uint64_t)"\n\n\t\t          \t\t++++++++++ Config phase: \"%s\" ++++++++++\n\n", v12, v13, v14, v15, (uint64_t)"Stopping monitoring");
    v16 = sub_21A6E2A54(a1, (uint64_t)v9, v10, v11, v12, v13, v14, v15);
    if ((_DWORD)v16)
      goto LABEL_47;
    if (dword_2550EFCA0 <= 800 && (dword_2550EFCA0 != -1 || sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u)))
      sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"void __BSConfiguration_WriteSettingsSync(void *)", 800, (uint64_t)"\n\n\t\t          \t\t---------- Config phase: \"%s\" ----------\n\n", v12, v13, v14, v15, (uint64_t)"Stopping monitoring");
  }
  if (*(_BYTE *)(a1 + 90))
  {
    if (dword_2550EFCA0 <= 800 && (dword_2550EFCA0 != -1 || sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u)))
      sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"void __BSConfiguration_WriteSettingsSync(void *)", 800, (uint64_t)"\n\n\t\t          \t\t++++++++++ Config phase: \"%s\" ++++++++++\n\n", v12, v13, v14, v15, (uint64_t)"Asking about keychain saving");
    v18 = sub_21A70D6D4(*(_QWORD *)(a1 + 128), (uint64_t)CFSTR("KeychainBasePasswordRemember.title"), 0, 0, (uint64_t)CFSTR("KeychainBasePasswordRemember.message"), 0, 0, (uint64_t)CFSTR("kSave"), (uint64_t)CFSTR("kDontSave")) != -6723;
    v16 = sub_21A6DF0D4(a1, v18, v19, v20, v21, v22, v23, v24);
    if ((_DWORD)v16)
      goto LABEL_47;
    if (dword_2550EFCA0 <= 800 && (dword_2550EFCA0 != -1 || sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u)))
      sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"void __BSConfiguration_WriteSettingsSync(void *)", 800, (uint64_t)"\n\n\t\t          \t\t---------- Config phase: \"%s\" ----------\n\n", v12, v13, v14, v15, (uint64_t)"Done asking about keychain saving");
  }
  if (*(_DWORD *)(a1 + 72))
  {
    v16 = sub_21A6DE0E8(a1, *(const __CFString **)(a1 + 64), v10, v11, v12, v13, v14, v15);
    if ((_DWORD)v16)
      goto LABEL_47;
  }
  if (!*(_QWORD *)a1 || (v25 = *(_QWORD *)(a1 + 8)) == 0)
  {
    v16 = 4294960591;
    goto LABEL_47;
  }
  v16 = sub_21A6D4430(v25, 1937329773, (CFMutableDictionaryRef *)&v276);
  if ((_DWORD)v16)
    goto LABEL_47;
  if (!v276)
  {
    v16 = 4294960568;
    goto LABEL_47;
  }
  v16 = sub_21A70D934(*(_QWORD *)(a1 + 128), 300);
  if ((_DWORD)v16)
    goto LABEL_47;
  v26 = *(_DWORD *)(a1 + 72);
  switch(v26)
  {
    case 0u:
      goto LABEL_240;
    case 1u:
      if (dword_2550EFCA0 <= 800 && (dword_2550EFCA0 != -1 || sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u)))
        sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"void __BSConfiguration_WriteSettingsSync(void *)", 800, (uint64_t)"\n\n\t\t          \t\t++++++++++ Config phase: \"%s\" ++++++++++\n\n", v12, v13, v14, v15, (uint64_t)"Verify connection");
      DeepCopy = 0;
      v27 = sub_21A6E3D58(a1, *(_QWORD *)(a1 + 8), *(const __CFString **)a1, &DeepCopy);
      if ((_DWORD)v27)
      {
        v16 = v27;
        if ((_DWORD)v27 != -6735)
          goto LABEL_424;
        if (dword_2550EFCA0 > 800)
          goto LABEL_239;
        if (dword_2550EFCA0 != -1 || sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u))
          sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"void __BSConfiguration_WriteSettingsSync(void *)", 800, (uint64_t)"***No system status or monitoring support\n", v12, v13, v14, v15, v263);
      }
      else
      {
        v9 = DeepCopy;
        if (DeepCopy)
        {
          v16 = sub_21A6DCE04(a1, (const __CFString *)DeepCopy);
          if (DeepCopy)
          {
            CFRelease(DeepCopy);
            DeepCopy = 0;
          }
          if ((_DWORD)v16)
            goto LABEL_424;
        }
      }
      if (dword_2550EFCA0 <= 800 && (dword_2550EFCA0 != -1 || sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u)))
      {
        v77 = "Verify connection";
        goto LABEL_147;
      }
      goto LABEL_239;
    case 2u:
      LODWORD(v284[0]) = 0;
      sub_21A6D6E44(v285, 0x15uLL);
      v16 = sub_21A6D4490(*(_QWORD *)(a1 + 8), (char *)v285, v284);
      if ((_DWORD)v16)
        goto LABEL_424;
      if (LODWORD(v284[0]) == 1)
        goto LABEL_106;
      if (!*(_QWORD *)(a1 + 48))
        goto LABEL_211;
      sub_21A6D6E44(v285, 0x15uLL);
      v16 = sub_21A6D4328(*(_QWORD *)(a1 + 8), (char *)v285, (CFMutableDictionaryRef *)&v269);
      if ((_DWORD)v16)
        goto LABEL_424;
      if (!v269)
        goto LABEL_558;
      sub_21A6D6E44(v285, 0x15uLL);
      v16 = sub_21A6D4328(*(_QWORD *)(a1 + 8), (char *)v285, (CFMutableDictionaryRef *)&v268);
      if ((_DWORD)v16)
        goto LABEL_424;
      if (!v268)
        goto LABEL_558;
      if (CFStringCompare(&stru_24DD08368, (CFStringRef)v268, 0) == kCFCompareEqualTo && v268)
      {
        CFRelease(v268);
        v268 = 0;
      }
      v92 = sub_21A70C6C4(*(_QWORD *)(a1 + 128), CFSTR("keychainNetworkType"), *(const __CFString **)(a1 + 48), &v281, v88, v89, v90, v91);
      if ((_DWORD)v92)
      {
        v16 = v92;
        if ((_DWORD)v92 != -6727)
          goto LABEL_424;
        v93 = (const __CFString *)v281;
      }
      else
      {
        v93 = (const __CFString *)v281;
        if (!v281)
          goto LABEL_558;
      }
      v51 = (const char *)v268;
      if (v268)
      {
        if (v93)
        {
          v93 = (const __CFString *)CFStringCompare(v93, (CFStringRef)v268, 0);
          if (!v93)
            goto LABEL_106;
        }
      }
      v212 = sub_21A72E058((uint64_t)v93, v51, v52);
      v213 = *(_QWORD *)(a1 + 128);
      if (v212)
      {
        if (sub_21A70B84C(v213, (const __CFString *)v269, 0, v207, v208, v209, v210, v211))
        {
          v16 = sub_21A70E760(*(_QWORD *)(a1 + 128), *(const __CFString **)a1, 0, 0, 0, 0, &DeepCopy, v216);
          if ((_DWORD)v16)
            goto LABEL_424;
          if (DeepCopy)
          {
            v16 = sub_21A6DCE04(a1, (const __CFString *)DeepCopy);
            if (DeepCopy)
            {
              CFRelease(DeepCopy);
              DeepCopy = 0;
            }
            if ((_DWORD)v16)
              goto LABEL_424;
          }
        }
        v217 = (const __CFString *)(v268 ? v268 : v281);
        v16 = sub_21A70E004(*(_QWORD *)(a1 + 128), *(const char **)(a1 + 48), v217, 0, (const void *)1, v214, v215, v216);
        if ((_DWORD)v16)
          goto LABEL_424;
        if (v281)
        {
          CFRelease(v281);
          v281 = 0;
        }
        v16 = sub_21A70C6C4(*(_QWORD *)(a1 + 128), CFSTR("keychainNetworkType"), *(const __CFString **)(a1 + 48), &v281, v218, v219, v220, v221);
        if ((_DWORD)v16)
          goto LABEL_424;
      }
      else
      {
        v16 = sub_21A70CA8C(v213, CFSTR("keychainNetworkType"), (uint64_t)v269, &v281, v208, v209, v210, v211);
        if ((_DWORD)v16)
          goto LABEL_424;
      }
      if (!v281)
        goto LABEL_558;
      v16 = sub_21A6D40A0(*(_QWORD *)(a1 + 8), (char *)v285, (const __CFString *)v281);
      if ((_DWORD)v16)
        goto LABEL_424;
      if (v281)
      {
        CFRelease(v281);
        v281 = 0;
      }
LABEL_106:
      if (sub_21A68E3B0(*(const __CFString **)a1, (uint64_t)v51, v52, v53, v54, v55, v56, v57))
      {
        LODWORD(v283[0]) = 0;
        v16 = sub_21A6D523C(*(_QWORD *)(a1 + 8), 1937327724);
        if ((_DWORD)v16)
          goto LABEL_424;
        v16 = sub_21A6D4478(*(_QWORD *)(a1 + 8), 1937327724, v283);
        if ((_DWORD)v16)
          goto LABEL_424;
        if (dword_2550EFCA0 <= 800 && (dword_2550EFCA0 != -1 || sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u)))
          sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"void __BSConfiguration_WriteSettingsSync(void *)", 800, (uint64_t)"target base systemFlags: 0x%X\n", v12, v13, v14, v15, LODWORD(v283[0]));
        if (((uint64_t)v283[0] & 0x80) == 0)
        {
          v58 = sub_21A6E4354(a1, (uint64_t)v9, v10, v11, v12, v13, v14, v15);
          v16 = v58;
          if ((_DWORD)v58 == -6757 ? 0 : v58)
            goto LABEL_424;
        }
      }
      goto LABEL_239;
    case 3u:
      LODWORD(v284[0]) = 0;
      v16 = sub_21A70E760(*(_QWORD *)(a1 + 128), *(const __CFString **)a1, 0, 0, 0, 0, &DeepCopy, v15);
      if ((_DWORD)v16)
        goto LABEL_424;
      if (DeepCopy)
      {
        v16 = sub_21A6DCE04(a1, (const __CFString *)DeepCopy);
        if (DeepCopy)
        {
          CFRelease(DeepCopy);
          DeepCopy = 0;
        }
        if ((_DWORD)v16)
          goto LABEL_424;
      }
      v16 = sub_21A6D4478(*(_QWORD *)(a1 + 8), 1937327724, v284);
      if ((_DWORD)v16)
        goto LABEL_424;
      if ((BYTE2(v284[0]) & 2) != 0)
      {
        v16 = sub_21A6D523C(*(_QWORD *)(a1 + 8), 1349676902);
        if ((_DWORD)v16)
          goto LABEL_424;
        v76 = sub_21A6D6830(*(_QWORD *)(a1 + 8));
      }
      else
      {
        v285[0] = 0;
        v65 = *(const __CFString **)(a1 + 104);
        if (!v65)
          goto LABEL_423;
        sub_21A693B94(v65, (uint64_t)v285, (UInt8 *)"%ks", v60, v61, v62, v63, v64, (uint64_t)"path");
        if ((_DWORD)v66)
          goto LABEL_128;
        v73 = (const __CFString *)v285[0];
        if (!v285[0])
          goto LABEL_558;
        v74 = *(_QWORD *)(a1 + 8);
        v75 = 0;
LABEL_138:
        v76 = sub_21A6D163C(v74, v73, v75);
      }
      v16 = v76;
      if ((_DWORD)v76)
        goto LABEL_424;
      goto LABEL_239;
    case 4u:
      v285[0] = 0;
      if (!*(_QWORD *)(a1 + 104))
        goto LABEL_423;
      v16 = sub_21A70E760(*(_QWORD *)(a1 + 128), *(const __CFString **)a1, 0, 0, 0, 0, &DeepCopy, v15);
      if ((_DWORD)v16)
        goto LABEL_424;
      if (DeepCopy)
      {
        v16 = sub_21A6DCE04(a1, (const __CFString *)DeepCopy);
        if (DeepCopy)
        {
          CFRelease(DeepCopy);
          DeepCopy = 0;
        }
        if ((_DWORD)v16)
          goto LABEL_424;
      }
      sub_21A693B94(*(const __CFString **)(a1 + 104), (uint64_t)v285, (UInt8 *)"%ks", v67, v68, v69, v70, v71, (uint64_t)"path");
      v16 = v72;
      if ((_DWORD)v72)
        goto LABEL_424;
      v73 = (const __CFString *)v285[0];
      if (!v285[0])
        goto LABEL_558;
      v74 = *(_QWORD *)(a1 + 8);
      v75 = 1;
      goto LABEL_138;
    default:
      if (v26 < 6)
        goto LABEL_239;
      v33 = v26 - 9 < 4 && *(_DWORD *)(a1 + 144) == 1634561902;
      if (!*(_QWORD *)(a1 + 16))
        goto LABEL_423;
      if (*(_QWORD *)(a1 + 32) && !v33)
        goto LABEL_148;
      if (v26 == 12)
        goto LABEL_85;
      if (dword_2550EFCA0 <= 800 && (dword_2550EFCA0 != -1 || sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u)))
        sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"void __BSConfiguration_WriteSettingsSync(void *)", 800, (uint64_t)"\n\n\t\t          \t\t++++++++++ Config phase: \"%s\" ++++++++++\n\n", v12, v13, v14, v15, (uint64_t)"Read source settings");
      v94 = sub_21A68EE6C(*(const __CFString **)(a1 + 16), (uint64_t)v9, v10, v11, v12, v13, v14, v15);
      if (!v94)
        goto LABEL_423;
      v96 = (uint64_t)v94;
      v16 = sub_21A70E760(*(_QWORD *)(a1 + 128), *(const __CFString **)(a1 + 16), 0, 0, (const void *)1, 0, &DeepCopy, v95);
      if ((_DWORD)v16)
        goto LABEL_424;
      if (DeepCopy)
      {
        CFRelease(*(CFTypeRef *)(a1 + 16));
        *(_QWORD *)(a1 + 16) = DeepCopy;
        DeepCopy = 0;
      }
      sub_21A70ACEC(*(_QWORD *)(a1 + 128), 18, 0, v96, v97, v98, v99, v100);
      v16 = sub_21A6E46C0(a1, v33, v101, v102, v103, v104, v105, v106);
      if ((_DWORD)v16)
        goto LABEL_424;
      v107 = *(_QWORD *)(a1 + 24);
      if (!v107)
      {
LABEL_211:
        v16 = 4294960569;
        goto LABEL_424;
      }
      v16 = sub_21A6D46FC(v107, (CFMutableDictionaryRef *)&v278);
      if ((_DWORD)v16)
        goto LABEL_424;
      if (!v278)
        goto LABEL_558;
      if (!sub_21A6D4724(*(_QWORD *)(a1 + 24), 1231975492))
        goto LABEL_206;
      v112 = sub_21A6D4430(*(_QWORD *)(a1 + 24), 1651721294, (CFMutableDictionaryRef *)&v267);
      if ((_DWORD)v112 || !v267)
        goto LABEL_207;
      if (CFStringGetLength((CFStringRef)v267))
      {
        v16 = sub_21A693A8C((const __CFAllocator *)*MEMORY[0x24BDBD240], (__CFArray *)v278, (uint64_t)"%kC=%O", v113, v108, v109, v110, v111, 1229213293);
        if ((_DWORD)v16)
          goto LABEL_424;
      }
LABEL_206:
      v112 = 0;
LABEL_207:
      sub_21A70ACEC(*(_QWORD *)(a1 + 128), 19, v112, v96, v108, v109, v110, v111);
      *(_QWORD *)(a1 + 32) = v278;
      v278 = 0;
      if (dword_2550EFCA0 <= 800 && (dword_2550EFCA0 != -1 || sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u)))
        sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"void __BSConfiguration_WriteSettingsSync(void *)", 800, (uint64_t)"\n\n\t\t          \t\t---------- Config phase: \"%s\" ----------\n\n", v12, v13, v14, v15, (uint64_t)"Read source settings");
LABEL_85:
      v26 = *(_DWORD *)(a1 + 72);
      if (v33)
      {
        v266 = 0;
        if (v26 == 12)
        {
          if (sub_21A68F5B8(*(const __CFString **)(a1 + 16), (uint64_t)v9, v10, v11, v12, v13, v14, v15))
          {
            if (dword_2550EFCA0 <= 800 && (dword_2550EFCA0 != -1 || sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u)))
              sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"void __BSConfiguration_WriteSettingsSync(void *)", 800, (uint64_t)"source base is unconfigurable, so found WAN link in bonjour record\n", v12, v13, v14, v15, v263);
            v266 = 512;
          }
        }
        else
        {
          v16 = sub_21A6D523C(*(_QWORD *)(a1 + 24), 1937327724);
          if ((_DWORD)v16)
            goto LABEL_424;
          v16 = sub_21A6D4478(*(_QWORD *)(a1 + 24), 1937327724, &v266);
          if ((_DWORD)v16)
            goto LABEL_424;
          if (dword_2550EFCA0 <= 800 && (dword_2550EFCA0 != -1 || sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u)))
            sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"void __BSConfiguration_WriteSettingsSync(void *)", 800, (uint64_t)"source base systemFlags: 0x%X\n", v12, v13, v14, v15, v266);
        }
        if ((v266 & 0x200) == 0)
          goto LABEL_94;
        if (dword_2550EFCA0 <= 800 && (dword_2550EFCA0 != -1 || sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u)))
          sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"void __BSConfiguration_WriteSettingsSync(void *)", 800, (uint64_t)"\n\n\t\t          \t\t++++++++++ Config phase: \"%s\" ++++++++++\n\n", v12, v13, v14, v15, (uint64_t)"Prompting for Swap Cabling");
        v114 = sub_21A6E47F8(a1, (uint64_t)v9, v10, v11, v12, v13, v14, v15);
        if ((_DWORD)v114 == -6757)
          v115 = 0;
        else
          v115 = v114;
        if ((_DWORD)v115)
        {
          if ((_DWORD)v115 == -6723)
          {
            v16 = v115;
            goto LABEL_424;
          }
          v16 = v114;
          if ((_DWORD)v115 != -6769)
            goto LABEL_424;
LABEL_232:
          v16 = 4294960527;
          goto LABEL_424;
        }
        v205 = *(int **)(a1 + 24);
        if (v205)
        {
          sub_21A6D12CC(v205);
          *(_QWORD *)(a1 + 24) = 0;
        }
        if (dword_2550EFCA0 <= 800 && (dword_2550EFCA0 != -1 || sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u)))
          sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"void __BSConfiguration_WriteSettingsSync(void *)", 800, (uint64_t)"\n\n\t\t          \t\t---------- Config phase: \"%s\" ----------\n\n", v12, v13, v14, v15, (uint64_t)"Prompting for Swap Cabling");
        v34 = *(_DWORD *)(a1 + 72);
        if (v34 != 12)
        {
LABEL_95:
          if ((v34 - 10) >= 2)
          {
            if (v34 != 12 || !*(_QWORD *)(a1 + 40))
              goto LABEL_237;
          }
          else
          {
            sub_21A693B94(*(const __CFString **)(a1 + 32), (uint64_t)&DeepCopy, (UInt8 *)"%kC", v11, v12, v13, v14, v15, 1466517097);
            v16 = v41;
            if ((_DWORD)v41)
              goto LABEL_424;
            if (!DeepCopy)
              goto LABEL_558;
            sub_21A6901D4((const __CFString *)DeepCopy, 1, v35, v36, v37, v38, v39, v40);
            DeepCopy = 0;
            v42 = *(_DWORD *)(a1 + 72);
            if (v42 == 11)
            {
              if (!*(_QWORD *)(a1 + 40))
              {
                v250 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
                v251 = sub_21A6D6E44(v285, 0x15uLL);
                sub_21A6D6E44(v284, 0x15uLL);
                sub_21A6D6E44(v283, 0x15uLL);
                v50 = sub_21A692FEC(v250, &DeepCopy, (uint64_t)"{%ks=%i%ks=%O%ks=%O%kC=%i}", v252, v253, v254, v255, v256, v251);
                goto LABEL_544;
              }
            }
            else
            {
              if (v42 != 10)
                goto LABEL_237;
              v265 = 0;
              if (!*(_QWORD *)(a1 + 40))
              {
                sub_21A693B94(*(const __CFString **)(a1 + 32), (uint64_t)&v265, (UInt8 *)"%kC", v11, v12, v13, v14, v15, 1717920116);
                v16 = v43;
                if ((_DWORD)v43)
                  goto LABEL_424;
                if (v265)
                {
                  sub_21A70F174((CFDataRef)v265, 1884509249);
                  v264 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
                  v44 = sub_21A6D6E44(v285, 0x15uLL);
                  sub_21A6D6E44(v284, 0x15uLL);
                  sub_21A6D6E44(v283, 0x15uLL);
                  sub_21A6D6E44(v282, 0x15uLL);
                  v50 = sub_21A692FEC(v264, &DeepCopy, (uint64_t)"{%ks=%i%ks=%O%ks=%O%ks=%O%kC=%i}", v45, v46, v47, v48, v49, v44);
LABEL_544:
                  v16 = v50;
                  if ((_DWORD)v50)
                    goto LABEL_424;
                  if (DeepCopy)
                  {
                    *(_QWORD *)(a1 + 40) = DeepCopy;
                    DeepCopy = 0;
                    goto LABEL_237;
                  }
                }
LABEL_558:
                v16 = 4294960568;
                goto LABEL_424;
              }
            }
          }
LABEL_423:
          v16 = 4294960591;
          goto LABEL_424;
        }
        if (dword_2550EFCA0 <= 800 && (dword_2550EFCA0 != -1 || sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u)))
          sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"void __BSConfiguration_WriteSettingsSync(void *)", 800, (uint64_t)"\n\n\t\t          \t\t++++++++++ Config phase: \"%s\" ++++++++++\n\n", v12, v13, v14, v15, (uint64_t)"Verify connection");
        DeepCopy = 0;
        v206 = sub_21A6E3D58(a1, *(_QWORD *)(a1 + 8), *(const __CFString **)a1, &DeepCopy);
        v16 = v206;
        if ((int)v206 > -6724)
        {
          if ((_DWORD)v206)
            goto LABEL_424;
          v9 = DeepCopy;
          if (DeepCopy)
          {
            v16 = sub_21A6DCE04(a1, (const __CFString *)DeepCopy);
            if (DeepCopy)
            {
              CFRelease(DeepCopy);
              DeepCopy = 0;
            }
            if ((_DWORD)v16)
              goto LABEL_424;
          }
        }
        else
        {
          if ((_DWORD)v206 == -6769)
            goto LABEL_232;
          if ((_DWORD)v206 != -6735)
            goto LABEL_424;
          if (dword_2550EFCA0 > 800)
          {
LABEL_94:
            v34 = *(_DWORD *)(a1 + 72);
            goto LABEL_95;
          }
          if (dword_2550EFCA0 != -1 || sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u))
            sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"void __BSConfiguration_WriteSettingsSync(void *)", 800, (uint64_t)"***No system status or monitoring support\n", v12, v13, v14, v15, v263);
        }
        if (dword_2550EFCA0 <= 800 && (dword_2550EFCA0 != -1 || sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u)))
          sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"void __BSConfiguration_WriteSettingsSync(void *)", 800, (uint64_t)"\n\n\t\t          \t\t---------- Config phase: \"%s\" ----------\n\n", v12, v13, v14, v15, (uint64_t)"Verify connection");
        goto LABEL_94;
      }
LABEL_148:
      if (v26 != 6)
        goto LABEL_238;
      LOBYTE(v266) = 0;
      v284[0] = 0;
      v283[0] = 0;
      if (dword_2550EFCA0 <= 800)
      {
        if (dword_2550EFCA0 != -1 || sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u))
          sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"void __BSConfiguration_WriteSettingsSync(void *)", 800, (uint64_t)"Verifying DWDS on Source\n", v12, v13, v14, v15, v263);
        if (dword_2550EFCA0 <= 800 && (dword_2550EFCA0 != -1 || sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u)))
          sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"void __BSConfiguration_WriteSettingsSync(void *)", 800, (uint64_t)"\n\n\t\t          \t\t++++++++++ Config phase: \"%s\" ++++++++++\n\n", v12, v13, v14, v15, (uint64_t)"Verifying DWDS on Source");
      }
      sub_21A693B94(*(const __CFString **)(a1 + 32), (uint64_t)v284, (UInt8 *)"%kC", v11, v12, v13, v14, v15, 1466517097);
      v16 = v81;
      if ((_DWORD)v81)
        goto LABEL_424;
      if (!v284[0])
        goto LABEL_558;
      sub_21A70EEA0(v284[0], 0, 0, 0, &v266, v78, v79, v80);
      v16 = v86;
      if ((_DWORD)v86)
        goto LABEL_424;
      if ((_BYTE)v266)
        goto LABEL_161;
      if (dword_2550EFCA0 <= 800 && (dword_2550EFCA0 != -1 || sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u)))
        sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"void __BSConfiguration_WriteSettingsSync(void *)", 800, (uint64_t)"Enabling DWDS on source\n", v82, v83, v84, v85, v263);
      if (*(_QWORD *)(a1 + 40))
        goto LABEL_423;
      sub_21A6D6E44(v285, 0x15uLL);
      v66 = sub_21A692FEC((const __CFAllocator *)*MEMORY[0x24BDBD240], &DeepCopy, (uint64_t)"{%ks=%b}", v243, v244, v245, v246, v247, (uint64_t)v285);
      if ((_DWORD)v66)
        goto LABEL_128;
      if (!DeepCopy)
        goto LABEL_558;
      *(_QWORD *)(a1 + 40) = DeepCopy;
      DeepCopy = 0;
LABEL_161:
      if (dword_2550EFCA0 <= 800)
      {
        if (dword_2550EFCA0 != -1 || sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u))
          sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"void __BSConfiguration_WriteSettingsSync(void *)", 800, (uint64_t)"\n\n\t\t          \t\t---------- Config phase: \"%s\" ----------\n\n", v82, v83, v84, v85, (uint64_t)"Verifying DWDS on Source");
        if (dword_2550EFCA0 <= 800)
        {
          if (dword_2550EFCA0 != -1 || sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u))
            sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"void __BSConfiguration_WriteSettingsSync(void *)", 800, (uint64_t)"Verifying Timed Access on Source\n", v82, v83, v84, v85, v263);
          if (dword_2550EFCA0 <= 800 && (dword_2550EFCA0 != -1 || sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u)))
            sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"void __BSConfiguration_WriteSettingsSync(void *)", 800, (uint64_t)"\n\n\t\t          \t\t++++++++++ Config phase: \"%s\" ++++++++++\n\n", v82, v83, v84, v85, (uint64_t)"Verifying Timed Access on Source");
        }
      }
      sub_21A690300(v284[0], 0, (uint64_t)CFSTR("acEn"), (uint64_t)v283, v82, v83, v84, v85);
      if (v87 || !CFBooleanGetValue(v283[0]))
        goto LABEL_174;
      v285[0] = 0;
      sub_21A693B94(*(const __CFString **)(a1 + 32), (uint64_t)v285, (UInt8 *)"%kC", v11, v12, v13, v14, v15, 1717920116);
      v16 = v222;
      if ((_DWORD)v222)
        goto LABEL_424;
      if (!v285[0])
        goto LABEL_558;
      if (!sub_21A70F174(v285[0], 1950434124))
        goto LABEL_174;
      v282[0] = 0;
      v265 = 0;
      sub_21A693B94(*(const __CFString **)(a1 + 32), (uint64_t)v282, (UInt8 *)"%kC", v11, v12, v13, v14, v15, 1950434124);
      if ((_DWORD)v66)
      {
LABEL_128:
        v16 = v66;
        goto LABEL_424;
      }
      if (!v282[0])
        goto LABEL_558;
      sub_21A6D0498(v282[0], CFSTR("00:00:00:00:00:00"), &v265, v223, v224, v225, v226, v227);
      if (v228)
        goto LABEL_174;
      if (!v265)
        goto LABEL_558;
      v229 = sub_21A6D09A8((CFArrayRef)v265, (uint64_t)v9, v10, v11, v12, v13, v14, v15);
      if (v265)
      {
        CFRelease(v265);
        v265 = 0;
      }
      if (v229)
        goto LABEL_174;
      if (dword_2550EFCA0 <= 800 && (dword_2550EFCA0 != -1 || sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u)))
        sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"void __BSConfiguration_WriteSettingsSync(void *)", 800, (uint64_t)"Source default ACL is not Full Access\n", v12, v13, v14, v15, v263);
      v230 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
      DeepCopy = CFPropertyListCreateDeepCopy((CFAllocatorRef)*MEMORY[0x24BDBD240], v282[0], 2uLL);
      if (!DeepCopy)
        goto LABEL_558;
      v231 = 0;
      v232 = 1;
      break;
  }
  do
  {
    while (1)
    {
      v233 = v231;
      v234 = sub_21A6D4430(*(_QWORD *)(a1 + 8), dword_21A73F2A0[v231], (CFMutableDictionaryRef *)&v281);
      v9 = v281;
      if (v234)
        v235 = 1;
      else
        v235 = v281 == 0;
      if (v235)
        goto LABEL_494;
      sub_21A6D0498(v282[0], (const __CFString *)v281, &v265, v11, v12, v13, v14, v15);
      if ((_DWORD)v236)
      {
        v16 = v236;
        if ((_DWORD)v236 != -6727)
          goto LABEL_424;
        goto LABEL_497;
      }
      if (!v265)
        goto LABEL_558;
      v241 = sub_21A6D09A8((CFArrayRef)v265, v237, v238, v239, v240, v13, v14, v15);
      if (v265)
      {
        CFRelease(v265);
        v265 = 0;
      }
      if (v241)
        break;
LABEL_497:
      sub_21A6D05EC((const __CFString *)DeepCopy, CFSTR("days=mtwtfss;t=0-0"),
        -2,
        (uint64_t)v276,
        (const __CFString *)v281,
        v13,
        v14,
        v15);
      v16 = v242;
      if (v281)
      {
        CFRelease(v281);
        v281 = 0;
      }
      if ((_DWORD)v16)
        goto LABEL_424;
      v232 = 0;
      v231 = 1;
      if (v233)
        goto LABEL_551;
    }
    if (v281)
    {
      CFRelease(v281);
      v281 = 0;
    }
LABEL_494:
    v231 = 1;
  }
  while (!v233);
  if ((v232 & 1) != 0)
  {
    if (DeepCopy)
    {
      CFRelease(DeepCopy);
      DeepCopy = 0;
    }
    goto LABEL_174;
  }
LABEL_551:
  Mutable = *(__CFArray **)(a1 + 40);
  if (!Mutable)
  {
    Mutable = CFDictionaryCreateMutable(v230, 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
    *(_QWORD *)(a1 + 40) = Mutable;
    if (!Mutable)
      goto LABEL_558;
  }
  v16 = sub_21A693A8C(v230, Mutable, (uint64_t)"%kC=%O", v11, v12, v13, v14, v15, 1950434124);
  if ((_DWORD)v16)
    goto LABEL_424;
  v16 = sub_21A693A8C(v230, *(__CFArray **)(a1 + 32), (uint64_t)"%kC=%O", v258, v259, v260, v261, v262, 1950434124);
  if (DeepCopy)
  {
    CFRelease(DeepCopy);
    DeepCopy = 0;
  }
  if ((_DWORD)v16)
    goto LABEL_424;
LABEL_174:
  if (dword_2550EFCA0 <= 800 && (dword_2550EFCA0 != -1 || sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u)))
    sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"void __BSConfiguration_WriteSettingsSync(void *)", 800, (uint64_t)"\n\n\t\t          \t\t---------- Config phase: \"%s\" ----------\n\n", v12, v13, v14, v15, (uint64_t)"Verifying Timed Acces on Source");
LABEL_237:
  v26 = *(_DWORD *)(a1 + 72);
LABEL_238:
  if (v26 != 12)
  {
    v16 = sub_21A6E4B9C(a1, *(const __CFString **)(a1 + 32), v10, v11, v12, v13, v14, v15);
    if (!(_DWORD)v16)
    {
      if (*(_DWORD *)(a1 + 144) != 1634561902)
        goto LABEL_239;
      v145 = *(_DWORD *)(a1 + 72);
      if (v145 > 0xB || ((1 << v145) & 0xC40) == 0 || !*(_QWORD *)(a1 + 40))
        goto LABEL_239;
      if (dword_2550EFCA0 <= 800 && (dword_2550EFCA0 != -1 || sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u)))
        sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"void __BSConfiguration_WriteSettingsSync(void *)", 800, (uint64_t)"\n\n\t\t          \t\t++++++++++ Config phase: \"%s\" ++++++++++\n\n", v12, v13, v14, v15, (uint64_t)"Configurating source");
      v16 = sub_21A70E760(*(_QWORD *)(a1 + 128), *(const __CFString **)(a1 + 16), 0, 0, (const void *)1, 0, &DeepCopy, v15);
      if (!(_DWORD)v16)
      {
        if (DeepCopy)
        {
          CFRelease(*(CFTypeRef *)(a1 + 16));
          *(_QWORD *)(a1 + 16) = DeepCopy;
          DeepCopy = 0;
        }
        v16 = sub_21A6E5344(a1, *(CFDictionaryRef *)(a1 + 40), &v270, v146, v147, v148, v149, v150);
        if (!(_DWORD)v16)
        {
          v151 = *(const void **)(a1 + 40);
          if (v151)
          {
            CFRelease(v151);
            *(_QWORD *)(a1 + 40) = 0;
          }
          if (dword_2550EFCA0 <= 800 && (dword_2550EFCA0 != -1 || sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u)))
          {
            v77 = "Configurating source";
LABEL_147:
            sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"void __BSConfiguration_WriteSettingsSync(void *)", 800, (uint64_t)"\n\n\t\t          \t\t---------- Config phase: \"%s\" ----------\n\n", v12, v13, v14, v15, (uint64_t)v77);
          }
          goto LABEL_239;
        }
      }
    }
    goto LABEL_424;
  }
LABEL_239:
  v16 = sub_21A6E58C8(a1, (uint64_t)v9, v10, v11, v12, v13, v14, v15);
  if ((_DWORD)v16)
    goto LABEL_424;
LABEL_240:
  sub_21A70ACEC(*(_QWORD *)(a1 + 128), 26, 0, 0, v12, v13, v14, v15);
  if (!sub_21A68F104(*(const __CFString **)a1, v116, v117, v118, v119, v120, v121, v122))
  {
LABEL_243:
    if (dword_2550EFCA0 <= 800 && (dword_2550EFCA0 != -1 || sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u)))
      sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"void __BSConfiguration_WriteSettingsSync(void *)", 800, (uint64_t)"\n\n\t\t          \t\t++++++++++ Config phase: \"%s\" ++++++++++\n\n", v123, v124, v125, v126, (uint64_t)"Rejoining target network if necessary");
    v16 = sub_21A70E760(*(_QWORD *)(a1 + 128), *(const __CFString **)a1, 0, 0, 0, 0, &DeepCopy, v126);
    if ((_DWORD)v16)
      goto LABEL_424;
    if (DeepCopy)
    {
      v16 = sub_21A6DCE04(a1, (const __CFString *)DeepCopy);
      if (DeepCopy)
      {
        CFRelease(DeepCopy);
        DeepCopy = 0;
      }
      if ((_DWORD)v16)
        goto LABEL_424;
    }
    if (dword_2550EFCA0 <= 800 && (dword_2550EFCA0 != -1 || sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u)))
      sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"void __BSConfiguration_WriteSettingsSync(void *)", 800, (uint64_t)"\n\n\t\t          \t\t---------- Config phase: \"%s\" ----------\n\n", v127, v128, v129, v130, (uint64_t)"Rejoining target network if necessary");
    v16 = sub_21A6E2AB0(a1, &v275, &v274, &v273, &v272, &v271);
    if ((_DWORD)v16)
      goto LABEL_424;
    if (dword_2550EFCA0 <= 800 && (dword_2550EFCA0 != -1 || sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u)))
      sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"void __BSConfiguration_WriteSettingsSync(void *)", 800, (uint64_t)"finalNetworkName: %@ goingAwayNetwork: %@ networkMaytransition: %d deviceMayLoseTouch: %d \n", v131, v132, v133, v134, (uint64_t)v275);
    sub_21A70ACEC(*(_QWORD *)(a1 + 128), 20, 0, (uint64_t)v276, v131, v132, v133, v134);
    if (dword_2550EFCA0 <= 800 && (dword_2550EFCA0 != -1 || sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u)))
      sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"void __BSConfiguration_WriteSettingsSync(void *)", 800, (uint64_t)"\n\n\t\t          \t\t++++++++++ Config phase: \"%s\" ++++++++++\n\n", v135, v136, v137, v138, (uint64_t)"Write target settings");
    v16 = sub_21A6D28FC(*(_QWORD *)(a1 + 8), (BOOL *)&v270 + 1, &cf);
    if (HIBYTE(v270))
    {
      if (dword_2550EFCA0 <= 800 && (dword_2550EFCA0 != -1 || sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u)))
        sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"void __BSConfiguration_WriteSettingsSync(void *)", 800, (uint64_t)"Had minimal restart with interruptions: %@\n", v139, v140, v141, v142, (uint64_t)cf);
      v143 = (const __CFArray *)cf;
      v286.length = CFArrayGetCount((CFArrayRef)cf);
      v286.location = 0;
      v144 = CFArrayContainsValue(v143, v286, CFSTR("wifi"));
      if (cf)
      {
        CFRelease(cf);
        cf = 0;
      }
    }
    else
    {
      v144 = 0;
    }
    if ((_DWORD)v16)
      goto LABEL_424;
    if (dword_2550EFCA0 <= 800 && (dword_2550EFCA0 != -1 || sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u)))
      sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"void __BSConfiguration_WriteSettingsSync(void *)", 800, (uint64_t)"\n\n\t\t          \t\t---------- Config phase: \"%s\" ----------\n\n", v139, v140, v141, v142, (uint64_t)"Write target settings");
    sub_21A70ACEC(*(_QWORD *)(a1 + 128), 21, 0, (uint64_t)v276, v139, v140, v141, v142);
    v16 = sub_21A6D3F24(*(_QWORD *)(a1 + 8));
    sub_21A70ACEC(*(_QWORD *)(a1 + 128), 36, v16, (uint64_t)v276, v152, v153, v154, v155);
    if (*(_DWORD *)(a1 + 72) != 9)
    {
      if (*(_DWORD *)(a1 + 144) != 1634561902)
        goto LABEL_423;
      v16 = sub_21A70AFE4(*(_QWORD *)(a1 + 128), 1u, v156, v157, v158, v159, v160, v161);
      if ((_DWORD)v16)
        goto LABEL_424;
    }
    if (v273 && (!HIBYTE(v270) || v144))
    {
      if (dword_2550EFCA0 <= 800 && (dword_2550EFCA0 != -1 || sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u)))
        sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"void __BSConfiguration_WriteSettingsSync(void *)", 800, (uint64_t)"\n\n\t\t          \t\t++++++++++ Config phase: \"%s\" ++++++++++\n\n", v158, v159, v160, v161, (uint64_t)"Disassociating");
      v16 = sub_21A70B94C(*(_QWORD *)(a1 + 128));
      if ((_DWORD)v16)
        goto LABEL_424;
      if (dword_2550EFCA0 <= 800)
      {
        if (dword_2550EFCA0 != -1 || sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u))
          sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"void __BSConfiguration_WriteSettingsSync(void *)", 800, (uint64_t)"\n\n\t\t          \t\t---------- Config phase: \"%s\" ----------\n\n", v201, v202, v203, v204, (uint64_t)"Disassociating");
        if (dword_2550EFCA0 <= 800 && (dword_2550EFCA0 != -1 || sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u)))
          sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"void __BSConfiguration_WriteSettingsSync(void *)", 800, (uint64_t)"\n\n\t\t          \t\t++++++++++ Config phase: \"%s\" ++++++++++\n\n", v201, v202, v203, v204, (uint64_t)"Clearing Scan Cache");
      }
      v16 = sub_21A70C004(*(_QWORD *)(a1 + 128), v198, v199, v200, v201, v202, v203, v204);
      if ((_DWORD)v16)
        goto LABEL_424;
      if (dword_2550EFCA0 <= 800 && (dword_2550EFCA0 != -1 || sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u)))
        sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"void __BSConfiguration_WriteSettingsSync(void *)", 800, (uint64_t)"\n\n\t\t          \t\t---------- Config phase: \"%s\" ----------\n\n", v158, v159, v160, v161, (uint64_t)"Clearing Scan Cache");
      v16 = 0;
    }
    if (*(_DWORD *)(a1 + 72) == 9)
    {
      if (dword_2550EFCA0 <= 800 && (dword_2550EFCA0 != -1 || sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u)))
        sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"void __BSConfiguration_WriteSettingsSync(void *)", 800, (uint64_t)"\n\n\t\t          \t\t++++++++++ Config phase: \"%s\" ++++++++++\n\n", v158, v159, v160, v161, (uint64_t)"Restoring source to defaults");
      v168 = sub_21A6E5EF4(a1, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), v157, v158, v159, v160, v161);
      if (dword_2550EFCA0 <= 800 && (dword_2550EFCA0 != -1 || sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u)))
        sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"void __BSConfiguration_WriteSettingsSync(void *)", 800, (uint64_t)"restoreSourceErr: %#m \n", v164, v165, v166, v167, v168);
      if (!(_DWORD)v168)
      {
        v16 = sub_21A692FEC((const __CFAllocator *)*MEMORY[0x24BDBD240], &v277, (uint64_t)"{%kO=%O}", v163, v164, v165, v166, v167, (uint64_t)CFSTR("kBSConfigurationSetupComplete_RemovedBase"));
        if ((_DWORD)v16)
          goto LABEL_424;
        if (!v277)
          goto LABEL_558;
      }
      if (dword_2550EFCA0 <= 800 && (dword_2550EFCA0 != -1 || sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u)))
        sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"void __BSConfiguration_WriteSettingsSync(void *)", 800, (uint64_t)"\n\n\t\t          \t\t---------- Config phase: \"%s\" ----------\n\n", v164, v165, v166, v167, (uint64_t)"Restoring source to defaults");
      if (*(_DWORD *)(a1 + 144) != 1634561902)
        goto LABEL_423;
      v16 = sub_21A70AFE4(*(_QWORD *)(a1 + 128), 1u, v162, v163, v164, v165, v166, v167);
      if ((_DWORD)v16)
        goto LABEL_424;
    }
    if (v275)
    {
      if (v272 && (!HIBYTE(v270) || v144))
      {
        if (dword_2550EFCA0 <= 800)
        {
          if (dword_2550EFCA0 != -1 || sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u))
            sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"void __BSConfiguration_WriteSettingsSync(void *)", 800, (uint64_t)"\n\n\t\t          \t\t++++++++++ Config phase: \"%s\" ++++++++++\n\n", v158, v159, v160, v161, (uint64_t)"Network transition pause");
          if (dword_2550EFCA0 <= 800 && (dword_2550EFCA0 != -1 || sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u)))
            sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"void __BSConfiguration_WriteSettingsSync(void *)", 800, (uint64_t)"pausing for: %d secs\n", v158, v159, v160, v161, 40);
        }
        v16 = sub_21A70BD94(*(_QWORD *)(a1 + 128), 40);
        if ((_DWORD)v16)
          goto LABEL_424;
        if (dword_2550EFCA0 <= 800 && (dword_2550EFCA0 != -1 || sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u)))
          sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"void __BSConfiguration_WriteSettingsSync(void *)", 800, (uint64_t)"\n\n\t\t          \t\t---------- Config phase: \"%s\" ----------\n\n", v158, v159, v160, v161, (uint64_t)"Network transition pause");
        v16 = 0;
      }
      if (!sub_21A70B84C(*(_QWORD *)(a1 + 128), (const __CFString *)v275, 0, v157, v158, v159, v160, v161))
      {
        if (dword_2550EFCA0 <= 800 && (dword_2550EFCA0 != -1 || sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u)))
          sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"void __BSConfiguration_WriteSettingsSync(void *)", 800, (uint64_t)"\n\n\t\t          \t\t++++++++++ Config phase: \"%s\" ++++++++++\n\n", v158, v159, v160, v161, (uint64_t)"Joining Network");
        v16 = sub_21A70DE00(*(_QWORD *)(a1 + 128), (const __CFString *)v275, (const __CFString *)v274, 1, 0, v159, v160, v161);
        if ((_DWORD)v16)
          goto LABEL_424;
        if (dword_2550EFCA0 > 800)
        {
          v16 = 0;
          goto LABEL_340;
        }
        if (dword_2550EFCA0 != -1 || sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u))
          sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"void __BSConfiguration_WriteSettingsSync(void *)", 800, (uint64_t)"\n\n\t\t          \t\t---------- Config phase: \"%s\" ----------\n\n", v158, v159, v160, v161, (uint64_t)"Joining Network");
        v16 = 0;
      }
    }
    if (dword_2550EFCA0 <= 800 && (dword_2550EFCA0 != -1 || sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u)))
      sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"void __BSConfiguration_WriteSettingsSync(void *)", 800, (uint64_t)"\n\n\t\t          \t\t++++++++++ Config phase: \"%s\" ++++++++++\n\n", v158, v159, v160, v161, (uint64_t)"Determining if base station is remote");
LABEL_340:
    sub_21A68E77C(*(const __CFString **)a1);
    v177 = v176;
    if (dword_2550EFCA0 <= 800 && (dword_2550EFCA0 != -1 || sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u)))
    {
      if (v177)
        v178 = "base station is remote\n";
      else
        v178 = "base station is not remote\n";
      sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"void __BSConfiguration_WriteSettingsSync(void *)", 800, (uint64_t)v178, v172, v173, v174, v175, v263);
    }
    if (v177 == 1)
      goto LABEL_424;
    if (dword_2550EFCA0 <= 800)
    {
      if (dword_2550EFCA0 != -1 || sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u))
        sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"void __BSConfiguration_WriteSettingsSync(void *)", 800, (uint64_t)"\n\n\t\t          \t\t---------- Config phase: \"%s\" ----------\n\n", v172, v173, v174, v175, (uint64_t)"Determining if base station is remote");
      if (dword_2550EFCA0 <= 800 && (dword_2550EFCA0 != -1 || sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u)))
        sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"void __BSConfiguration_WriteSettingsSync(void *)", 800, (uint64_t)"\n\n\t\t          \t\t++++++++++ Config phase: \"%s\" ++++++++++\n\n", v172, v173, v174, v175, (uint64_t)"Final waiting for target base");
    }
    if (!sub_21A68F0A8(*(const __CFString **)a1, v169, v170, v171, v172, v173, v174, v175))
    {
      if (dword_2550EFCA0 <= 800)
      {
        if (dword_2550EFCA0 != -1 || sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u))
          sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"void __BSConfiguration_WriteSettingsSync(void *)", 800, (uint64_t)"\n\n\t\t          \t\t++++++++++ Config phase: \"%s\" ++++++++++\n\n", v179, v180, v181, v182, (uint64_t)"No bonjour seed pause");
        if (dword_2550EFCA0 <= 800 && (dword_2550EFCA0 != -1 || sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u)))
          sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"void __BSConfiguration_WriteSettingsSync(void *)", 800, (uint64_t)"pausing for: %d secs\n", v179, v180, v181, v182, 8);
      }
      v16 = sub_21A70BD94(*(_QWORD *)(a1 + 128), 8);
      if ((_DWORD)v16)
        goto LABEL_424;
      if (dword_2550EFCA0 <= 800 && (dword_2550EFCA0 != -1 || sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u)))
        sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"void __BSConfiguration_WriteSettingsSync(void *)", 800, (uint64_t)"\n\n\t\t          \t\t---------- Config phase: \"%s\" ----------\n\n", v248, v249, v181, v182, (uint64_t)"No bonjour seed pause");
    }
    v16 = sub_21A70D318(*(_QWORD *)(a1 + 128), (const __CFString *)v276, *(const __CFString **)a1, 1, 120, &DeepCopy, v181, v182);
    if ((_DWORD)v16)
      goto LABEL_424;
    if (!DeepCopy)
      goto LABEL_558;
    v16 = sub_21A6E2D80(a1, (const __CFString *)DeepCopy);
    if (DeepCopy)
    {
      CFRelease(DeepCopy);
      DeepCopy = 0;
    }
    if ((_DWORD)v16)
      goto LABEL_424;
    if (dword_2550EFCA0 <= 800 && (dword_2550EFCA0 != -1 || sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u)))
      sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"void __BSConfiguration_WriteSettingsSync(void *)", 800, (uint64_t)"\n\n\t\t          \t\t---------- Config phase: \"%s\" ----------\n\n", v183, v184, v185, v186, (uint64_t)"Final waiting for target base");
    if ((_BYTE)v270)
    {
      if (dword_2550EFCA0 <= 800 && (dword_2550EFCA0 != -1 || sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u)))
        sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"void __BSConfiguration_WriteSettingsSync(void *)", 800, (uint64_t)"\n\n\t\t          \t\t++++++++++ Config phase: \"%s\" ++++++++++\n\n", v183, v184, v185, v186, (uint64_t)"Final waiting for source base");
      v16 = sub_21A70D318(*(_QWORD *)(a1 + 128), 0, *(const __CFString **)(a1 + 16), 0, 120, &DeepCopy, v185, v186);
      if ((_DWORD)v16)
        goto LABEL_424;
      if (!DeepCopy)
        goto LABEL_558;
      CFRelease(*(CFTypeRef *)(a1 + 16));
      *(_QWORD *)(a1 + 16) = DeepCopy;
      DeepCopy = 0;
      if (dword_2550EFCA0 > 800)
      {
LABEL_381:
        v16 = sub_21A6DE984(a1, 0, *(const __CFString **)a1, *(_QWORD *)(a1 + 8), 0, 0, 0, v186);
        if (!(_DWORD)v16)
        {
          if (dword_2550EFCA0 <= 800)
          {
            if (dword_2550EFCA0 != -1 || sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u))
              sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"void __BSConfiguration_WriteSettingsSync(void *)", 800, (uint64_t)"\n\n\t\t          \t\t---------- Config phase: \"%s\" ----------\n\n", v190, v191, v192, v193, (uint64_t)"Rereading settings after restart");
            if (dword_2550EFCA0 <= 800 && (dword_2550EFCA0 != -1 || sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u)))
              sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"void __BSConfiguration_WriteSettingsSync(void *)", 800, (uint64_t)"\n\n\t\t          \t\t++++++++++ Config phase: \"%s\" ++++++++++\n\n", v190, v191, v192, v193, (uint64_t)"Checking if monitoring needs restored");
          }
          v16 = sub_21A6E2E9C(a1, v187, v188, v189, v190, v191, v192, v193);
          if (!(_DWORD)v16)
          {
            if (dword_2550EFCA0 <= 800 && (dword_2550EFCA0 != -1 || sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u)))
              sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"void __BSConfiguration_WriteSettingsSync(void *)", 800, (uint64_t)"\n\n\t\t          \t\t---------- Config phase: \"%s\" ----------\n\n", v194, v195, v196, v197, (uint64_t)"Checking if monitoring needs restored");
            v16 = 0;
          }
        }
        goto LABEL_424;
      }
      if (dword_2550EFCA0 != -1 || sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u))
        sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"void __BSConfiguration_WriteSettingsSync(void *)", 800, (uint64_t)"\n\n\t\t          \t\t---------- Config phase: \"%s\" ----------\n\n", v183, v184, v185, v186, (uint64_t)"Final waiting for source base");
    }
    if (dword_2550EFCA0 <= 800 && (dword_2550EFCA0 != -1 || sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u)))
      sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"void __BSConfiguration_WriteSettingsSync(void *)", 800, (uint64_t)"\n\n\t\t          \t\t++++++++++ Config phase: \"%s\" ++++++++++\n\n", v183, v184, v185, v186, (uint64_t)"Rereading settings after restart");
    goto LABEL_381;
  }
  v16 = sub_21A6CEE6C(*(_QWORD *)(a1 + 8), 1);
  if (!(_DWORD)v16)
  {
    sub_21A6CEDE4(*(_QWORD *)(a1 + 8));
    goto LABEL_243;
  }
LABEL_424:
  sub_21A70DDCC(*(_QWORD *)(a1 + 128));
LABEL_47:
  sub_21A709E44(*(_QWORD *)(a1 + 128), (uint64_t)v9, v10, v11, v12, v13, v14, v15);
LABEL_48:
  *(_BYTE *)(a1 + 90) = 0;
  sub_21A6D7BCC(a1, 0, v10, v11, v12, v13, v14, v15);
  sub_21A70A778(*(_QWORD *)(a1 + 128), 15, v16, (uint64_t)v277, v28, v29, v30, v31);
  if (cf)
  {
    CFRelease(cf);
    cf = 0;
  }
  if (DeepCopy)
  {
    CFRelease(DeepCopy);
    DeepCopy = 0;
  }
  if (v278)
  {
    CFRelease(v278);
    v278 = 0;
  }
  if (v277)
  {
    CFRelease(v277);
    v277 = 0;
  }
LABEL_56:
  if (v281)
  {
    CFRelease(v281);
    v281 = 0;
  }
  if (v276)
  {
    CFRelease(v276);
    v276 = 0;
  }
  if (v275)
  {
    CFRelease(v275);
    v275 = 0;
  }
  if (v274)
  {
    CFRelease(v274);
    v274 = 0;
  }
  if (v273)
  {
    CFRelease(v273);
    v273 = 0;
  }
  if (v269)
  {
    CFRelease(v269);
    v269 = 0;
  }
  if (v268)
  {
    CFRelease(v268);
    v268 = 0;
  }
  if (v267)
    CFRelease(v267);
}

uint64_t sub_21A6E257C(dispatch_group_t *context, int a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12;

  if (dword_2550EFCA0 <= 800 && (dword_2550EFCA0 != -1 || sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u)))
    sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"OSStatus BSConfiguration_SetMonitorForChanges(BSConfigurationContextRef, Boolean, Boolean)", 800, (uint64_t)" \n", a5, a6, a7, a8, v12);
  if (!context)
    return 4294960591;
  if (*((unsigned __int8 *)context + 88) != a2)
  {
    *((_BYTE *)context + 88) = a2;
    if (!a3)
    {
      if (dword_2550EFCA0 <= 800 && (dword_2550EFCA0 != -1 || sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u)))
        sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"OSStatus _BSConfiguration_CheckMonitoringStateAsync(BSConfigurationContextRef)", 800, (uint64_t)" \n", a5, a6, a7, a8, v12);
      dispatch_group_async_f(context[15], context[14], context, (dispatch_function_t)sub_21A6E6FEC);
    }
  }
  return 0;
}

uint64_t sub_21A6E2674(uint64_t a1, _BYTE *a2)
{
  uint64_t result;
  _BOOL4 v5;

  result = 4294960591;
  if (a1 && a2)
  {
    *a2 = 0;
    result = *(_QWORD *)(a1 + 8);
    if (result)
    {
      v5 = sub_21A6D67BC(result);
      result = 0;
      *a2 = v5;
    }
  }
  return result;
}

void sub_21A6E26C4(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  const void *v9;
  uint64_t v10;

  if (dword_2550EFCA0 <= 800 && (dword_2550EFCA0 != -1 || sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u)))
    sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"OSStatus __AsyncContext_Release(__AsyncContextRef)", 800, (uint64_t)" \n", a5, a6, a7, a8, v10);
  if (a1[4] == 1634561902)
  {
    a1[4] = 1095585614;
    *(_QWORD *)a1 = 0;
    v9 = (const void *)*((_QWORD *)a1 + 1);
    if (v9)
      CFRelease(v9);
    free(a1);
  }
}

void sub_21A6E276C(const __CFString **a1, CFTypeRef a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  const __CFString *v9;
  const __CFString *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  CFTypeRef cf;
  CFTypeRef cf2;
  CFTypeRef cf1;
  char v17;
  unsigned int v18;

  if (dword_2550EFCA0 <= 800 && (dword_2550EFCA0 != -1 || sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u)))
    sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"void __BSConfiguration_HandleBSSettingChangedSync(void *)", 800, (uint64_t)" \n", a5, a6, a7, a8, v13);
  cf = 0;
  cf2 = 0;
  cf1 = 0;
  if (a1)
  {
    v18 = 0;
    v17 = 0;
    if (*((_DWORD *)a1 + 4) != 1634561902)
      goto LABEL_37;
    v9 = *a1;
    if (!*a1)
      goto LABEL_37;
    if (LODWORD(v9[4].data) == 1634561902 && v9->info && (v10 = a1[1]) != 0)
    {
      sub_21A693B94(v10, (uint64_t)&v18, (UInt8 *)"%kO:int", a4, a5, a6, a7, a8, (uint64_t)CFSTR("kAsyncParam_Refresh_BSSetting"));
      a3 = v11;
      if (!(_DWORD)v11)
      {
        if (v18)
        {
          sub_21A693B94(a1[1], (uint64_t)&v17, (UInt8 *)"%kO:BOOL", a4, a5, a6, a7, a8, (uint64_t)CFSTR("kAsyncParam_Refresh_Notify"));
          a3 = v12;
          if (!(_DWORD)v12)
          {
            a3 = sub_21A6D4430(v9->info, v18, (CFMutableDictionaryRef *)&cf1);
            if (!(_DWORD)a3)
            {
              a3 = sub_21A6D523C(v9->info, v18);
              if (!(_DWORD)a3)
              {
                cf2 = 0;
                a3 = sub_21A6D4430(v9->info, v18, (CFMutableDictionaryRef *)&cf2);
                if (!(_DWORD)a3)
                {
                  if (v17)
                  {
                    if (cf1)
                    {
                      a2 = cf2;
                      if (cf2)
                      {
                        if (CFEqual(cf1, cf2))
                        {
                          v17 = 0;
                          if (dword_2550EFCA0 > 800)
                            goto LABEL_37;
                          if (dword_2550EFCA0 != -1 || sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u))
                            sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"void __BSConfiguration_HandleBSSettingChangedSync(void *)", 800, (uint64_t)"Changed notify to false because %C if equal \n", a5, a6, a7, a8, v18);
                        }
                      }
                    }
                  }
                  if (v17)
                  {
                    if (cf2)
                    {
                      a3 = sub_21A692FEC((const __CFAllocator *)*MEMORY[0x24BDBD240], &cf, (uint64_t)"{%kO=%C%kO=%O}", a4, a5, a6, a7, a8, (uint64_t)CFSTR("kBSConfigurationRefreshBSSettingKey_BSSetting"));
                      if (!(_DWORD)a3)
                      {
                        if (cf)
                          a3 = 0;
                        else
                          a3 = 4294960568;
                      }
                      goto LABEL_32;
                    }
                    v17 = 0;
                  }
LABEL_37:
                  sub_21A6E26C4(a1, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
                  if (cf1)
                  {
                    CFRelease(cf1);
                    cf1 = 0;
                  }
                  if (cf2)
                  {
                    CFRelease(cf2);
                    cf2 = 0;
                  }
                  if (cf)
                    CFRelease(cf);
                  return;
                }
              }
            }
          }
        }
        else
        {
          a3 = 4294960568;
        }
      }
    }
    else
    {
      a3 = 4294960591;
    }
LABEL_32:
    if (v17)
    {
      sub_21A70A778((uint64_t)v9[4].isa, 34, a3, (uint64_t)cf, a5, a6, a7, a8);
      if (dword_2550EFCA0 <= 800 && (dword_2550EFCA0 != -1 || sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u)))
        sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"void __BSConfiguration_HandleBSSettingChangedSync(void *)", 800, (uint64_t)"BSSetting: %C \n", a5, a6, a7, a8, v18);
    }
    goto LABEL_37;
  }
}

uint64_t sub_21A6E2A54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;

  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    if (sub_21A6D67BC(v9))
      sub_21A6D1988(*(_QWORD *)(a1 + 8));
    v10 = 0;
  }
  else
  {
    v10 = 4294960591;
  }
  sub_21A70ACEC(*(_QWORD *)(a1 + 128), 33, v10, (uint64_t)CFSTR("stopping"), a5, a6, a7, a8);
  return v10;
}

uint64_t sub_21A6E2AB0(uint64_t a1, CFTypeRef *a2, CFTypeRef *a3, _QWORD *a4, BOOL *a5, BOOL *a6)
{
  CFTypeRef v7;
  uint64_t v8;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  BOOL v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  CFComparisonResult v39;
  CFComparisonResult v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  const __CFString *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  CFTypeRef v57;
  CFTypeRef v58;
  CFTypeRef v59;
  CFTypeRef v60;
  CFTypeRef cf;
  CFStringRef theString2;

  cf = 0;
  theString2 = 0;
  v59 = 0;
  v60 = 0;
  v58 = 0;
  if (*(_DWORD *)(a1 + 144) != 1634561902)
  {
    v7 = 0;
    v8 = 4294960578;
    goto LABEL_12;
  }
  v7 = 0;
  v8 = 4294960591;
  if (a2 && a3 && a4 && a5)
  {
    sub_21A68E77C(*(const __CFString **)a1);
    if (v21 || sub_21A68E5F0(*(const __CFString **)a1, v14, v15, v16, v17, v18, v19, v20))
    {
      v27 = 0;
      v28 = 0;
      v7 = 0;
LABEL_9:
      v8 = 0;
      *a2 = cf;
      *a3 = v60;
      v60 = 0;
      cf = 0;
      *a4 = v7;
      *a5 = v28;
      *a6 = v27;
LABEL_10:
      v7 = 0;
      goto LABEL_12;
    }
    v30 = sub_21A70B648(*(_QWORD *)(a1 + 128), &v59, &v58, v22, v23, v24, v25, v26);
    v7 = 0;
    if ((_DWORD)v30 == -6727)
    {
      v27 = 0;
      v28 = 0;
      goto LABEL_9;
    }
    v8 = v30;
    if (!(_DWORD)v30)
    {
      v7 = 0;
      v8 = 4294960568;
      if (v59)
      {
        if (v58)
        {
          v31 = sub_21A6E3038(a1, (CFMutableDictionaryRef *)&cf, (CFMutableDictionaryRef *)&v60, (CFMutableDictionaryRef *)&theString2);
          if ((_DWORD)v31)
          {
            v8 = v31;
            goto LABEL_10;
          }
          v38 = sub_21A68F440(*(const __CFString **)a1, (const __CFString *)v58, v32, v33, v34, v35, v36, v37);
          if (v38)
          {
            v7 = v59;
            CFRetain(v59);
          }
          else
          {
            v7 = 0;
          }
          if (!cf)
          {
            v28 = 0;
            v27 = v38 != 0;
            goto LABEL_9;
          }
          v39 = CFStringCompare((CFStringRef)v59, (CFStringRef)cf, 0);
          v27 = 0;
          v28 = v39 == kCFCompareEqualTo;
          if (v38 || v39 == kCFCompareEqualTo)
            goto LABEL_9;
          v40 = CFStringCompare((CFStringRef)v59, theString2, 0);
          v47 = sub_21A68E42C(*(const __CFString **)a1, (const __CFString *)v59, v41, v42, v43, v44, v45, v46);
          v27 = 0;
          if (v40 == kCFCompareEqualTo || !v47)
          {
            v28 = 0;
            goto LABEL_9;
          }
          v57 = 0;
          if (cf)
          {
            CFRelease(cf);
            cf = 0;
          }
          if (v60)
          {
            CFRelease(v60);
            v60 = 0;
          }
          v52 = (const __CFString *)v59;
          cf = v59;
          v59 = 0;
          v8 = sub_21A70C110(*(_QWORD *)(a1 + 128), v52, 3, &v57, v48, v49, v50, v51);
          if (!(_DWORD)v8)
          {
            if (!v57)
            {
LABEL_52:
              v8 = 4294960568;
              goto LABEL_12;
            }
            v8 = sub_21A70C6C4(*(_QWORD *)(a1 + 128), CFSTR("keychainNetworkType"), (const __CFString *)v57, &v60, v53, v54, v55, v56);
            if (v57)
              CFRelease(v57);
            if ((_DWORD)v8 == -6727)
              goto LABEL_49;
            if (!(_DWORD)v8)
            {
              if (v60)
              {
LABEL_49:
                v27 = 0;
                v28 = 1;
                goto LABEL_9;
              }
              goto LABEL_52;
            }
          }
        }
      }
    }
  }
LABEL_12:
  if (cf)
  {
    CFRelease(cf);
    cf = 0;
  }
  if (v60)
  {
    CFRelease(v60);
    v60 = 0;
  }
  if (v59)
  {
    CFRelease(v59);
    v59 = 0;
  }
  if (v58)
  {
    CFRelease(v58);
    v58 = 0;
  }
  if (v7)
    CFRelease(v7);
  return v8;
}

uint64_t sub_21A6E2D80(uint64_t a1, const __CFString *a2)
{
  uint64_t v3;
  uint64_t v5;
  const __CFString **p_theString;
  const __CFString *v8;
  CFTypeRef cf;
  CFStringRef theString;

  cf = 0;
  theString = 0;
  if (!a2)
    return 4294960591;
  v3 = *(_QWORD *)(a1 + 8);
  if (!v3)
  {
    v5 = 4294960591;
LABEL_12:
    if (theString)
    {
      CFRelease(theString);
      theString = 0;
    }
    goto LABEL_14;
  }
  v5 = sub_21A6D4430(v3, 1937330263, (CFMutableDictionaryRef *)&theString);
  if ((_DWORD)v5)
    goto LABEL_12;
  if (theString)
  {
    v5 = sub_21A6D4430(*(_QWORD *)(a1 + 8), 1651721296, (CFMutableDictionaryRef *)&cf);
    if (!(_DWORD)v5)
    {
      if (cf)
      {
        if (CFStringGetLength(theString) && CFStringCompare((CFStringRef)cf, theString, 0))
          p_theString = &theString;
        else
          p_theString = (const __CFString **)&cf;
        v8 = *p_theString;
        v5 = sub_21A6DCE04(a1, a2);
        if (!(_DWORD)v5)
          v5 = sub_21A6D42C8(*(_QWORD *)(a1 + 8), 1651721296, v8);
      }
      else
      {
        v5 = 4294960568;
      }
    }
    goto LABEL_12;
  }
  v5 = 4294960568;
LABEL_14:
  if (cf)
    CFRelease(cf);
  return v5;
}

uint64_t sub_21A6E2E9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;

  if (dword_2550EFCA0 <= 800 && (dword_2550EFCA0 != -1 || sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u)))
    sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"OSStatus _BSConfiguration_CheckMonitoringStateSync(BSConfigurationContextRef)", 800, (uint64_t)" \n", a5, a6, a7, a8, v25);
  v9 = *(_QWORD *)(a1 + 8);
  if (!v9)
    return 4294960591;
  v26 = 0;
  result = sub_21A6D3F88(v9, &v26);
  if (!(_DWORD)result)
  {
    if (!v26)
      return 0;
    v18 = *(_QWORD *)(a1 + 8);
    v19 = v18 && sub_21A6D67BC(v18);
    if (*(unsigned __int8 *)(a1 + 88) == v19)
      return 0;
    if (*(_BYTE *)(a1 + 88))
    {
      result = sub_21A6E316C(a1, v11, v12, v13, v14, v15, v16, v17);
      if (!(_DWORD)result)
      {
        result = sub_21A6E32F8(a1, 1937331060, 1, v20, v21, v22, v23, v24);
        if (!(_DWORD)result)
          return 0;
      }
    }
    else
    {
      result = sub_21A6E2A54(a1, v11, v12, v13, v14, v15, v16, v17);
      if (!(_DWORD)result)
        return 0;
    }
  }
  return result;
}

void sub_21A6E2F9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  CFTypeRef v14;

  if (*(_DWORD *)(a1 + 144) == 1634561902)
  {
    v14 = 0;
    if (!sub_21A692FEC((const __CFAllocator *)*MEMORY[0x24BDBD240], &v14, (uint64_t)"{%kO=%i%kO=%O}", a4, a5, a6, a7, a8, (uint64_t)CFSTR("kBSConfigurationTaskComplete_TaskState")))
    {
      if (v14)
      {
        sub_21A70A778(*(_QWORD *)(a1 + 128), 30, a4, (uint64_t)v14, v10, v11, v12, v13);
        if (v14)
          CFRelease(v14);
      }
    }
  }
}

uint64_t sub_21A6E3038(uint64_t a1, CFMutableDictionaryRef *a2, CFMutableDictionaryRef *a3, CFMutableDictionaryRef *a4)
{
  uint64_t result;
  uint64_t v8;
  char v10[21];
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  if (*(_DWORD *)(a1 + 144) != 1634561902)
    return 4294960578;
  result = 4294960591;
  if (a2 && a3)
  {
    v8 = *(_QWORD *)(a1 + 8);
    if (v8)
    {
      sub_21A6D6A04(*(_QWORD *)(a1 + 8));
      sub_21A6D6E44(v10, 0x15uLL);
      result = sub_21A6D4328(v8, v10, a2);
      if (!(_DWORD)result)
      {
        sub_21A6D6A04(v8);
        sub_21A6D6E44(v10, 0x15uLL);
        result = sub_21A6D43AC(v8, v10, a4);
        if (!(_DWORD)result)
        {
          sub_21A6D6A04(v8);
          sub_21A6D6E44(v10, 0x15uLL);
          return sub_21A6D4328(v8, v10, a3);
        }
      }
    }
    else
    {
      return 4294960569;
    }
  }
  return result;
}

uint64_t sub_21A6E316C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  CFTypeRef v13;

  v13 = 0;
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    if (sub_21A6D4724(v9, 1095593838) && !sub_21A6D67BC(*(_QWORD *)(a1 + 8)))
    {
      v11 = sub_21A692FEC((const __CFAllocator *)*MEMORY[0x24BDBD240], &v13, (uint64_t)"{%ks={%kC={}%kC={}%kC={}%kC={}%kC={}%kC={}%kC={}%kC={}%kC={}%kC={}%kC={}%kC={}%kC={}%kC={}%kC={}%ks={}%kC={}%kC={}%kC={}%kC={}}}", v10, a5, a6, a7, a8, (uint64_t)"filters");
      if (!(_DWORD)v11)
      {
        if (v13)
          v11 = sub_21A6D669C(*(_QWORD *)(a1 + 8), v13, (uint64_t)sub_21A6E3444, a1, a5, a6, a7, a8);
        else
          v11 = 4294960568;
      }
    }
    else
    {
      v11 = 0;
    }
  }
  else
  {
    v11 = 4294960591;
  }
  sub_21A70ACEC(*(_QWORD *)(a1 + 128), 33, v11, (uint64_t)CFSTR("starting"), a5, a6, a7, a8);
  if (v13)
    CFRelease(v13);
  return v11;
}

uint64_t sub_21A6E32F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  CFTypeRef cf;
  void *context;

  if (dword_2550EFCA0 <= 800 && (dword_2550EFCA0 != -1 || sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u)))
    sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"OSStatus _BSConfiguration_HandleBSSettingChangedAsync(BSConfigurationContextRef, BSSetting, Boolean)", 800, (uint64_t)"inSetting: %C notify: %d \n", a5, a6, a7, a8, a2);
  v10 = 4294960591;
  if ((_DWORD)a2)
  {
    if (*(_DWORD *)(a1 + 144) == 1634561902)
    {
      if (*(_QWORD *)(a1 + 120))
      {
        if (*(_QWORD *)(a1 + 112))
        {
          cf = 0;
          context = 0;
          v10 = sub_21A692FEC((const __CFAllocator *)*MEMORY[0x24BDBD240], &cf, (uint64_t)"{%kO=%i%kO=%b}", a4, a5, a6, a7, a8, (uint64_t)CFSTR("kAsyncParam_Refresh_BSSetting"));
          if (!(_DWORD)v10)
          {
            if (!cf)
              return 0;
            v10 = sub_21A6D804C(a1, cf, &context, v11, v12, v13, v14, v15);
            if (cf)
            {
              CFRelease(cf);
              cf = 0;
            }
            if (!(_DWORD)v10)
            {
              if (!context)
                return 4294960568;
              dispatch_group_async_f(*(dispatch_group_t *)(a1 + 120), *(dispatch_queue_t *)(a1 + 112), context, (dispatch_function_t)sub_21A6E276C);
              return 0;
            }
          }
        }
      }
    }
  }
  return v10;
}

void sub_21A6E3444(uint64_t a1, const __CFString *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  const __CFString *v11;
  CFIndex Count;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  CFIndex v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  __CFArray *v66;
  CFTypeRef cf;
  uint64_t v68;
  CFArrayRef theArray;
  unsigned int v70;

  theArray = 0;
  if (dword_2550EFCA0 <= 800 && (dword_2550EFCA0 != -1 || sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u)))
    sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"void __ACPMonitoringForPropertiesCallback(OSStatus, CFDictionaryRef, void *)", 800, (uint64_t)" \n", a5, a6, a7, a8, v64);
  v70 = 0;
  v68 = 0;
  if (a3)
  {
    sub_21A70A778(*(_QWORD *)(a3 + 128), 135, a1, (uint64_t)a2, a5, a6, a7, a8);
    v11 = (const __CFString *)sub_21A68FCD0(a2, (unsigned int *)&v68);
    if (!sub_21A6CFA78((unsigned int *)"tSaMicswinrpmgoltSedtSadtSysPIawMSawARaw1Caw2CawDCawiFiWSnyDdlCitatsLCAtInrp", &theArray))
    {
      if (!theArray)
        goto LABEL_42;
      Count = CFArrayGetCount(theArray);
      if (Count)
      {
        v18 = Count;
        if (Count < 1)
        {
LABEL_21:
          if (v11)
          {
            cf = 0;
            sub_21A693B94(v11, 0, (UInt8 *)"%kC.%kO", v13, v14, v15, v16, v17, v68);
            if (v32 == -6727)
            {
              sub_21A6E39B0(a3, v11, v68, (unint64_t *)&cf, v28, v29, v30, v31);
              if (!v34)
              {
                v66 = 0;
                sub_21A693B94(v11, (uint64_t)&v66, (UInt8 *)"%kC", v33, v28, v29, v30, v31, v68);
                if (v36 != -6727)
                {
                  if (v66)
                    sub_21A693A8C((const __CFAllocator *)*MEMORY[0x24BDBD240], v66, (uint64_t)"%kO=%lli", v35, v28, v29, v30, v31, (uint64_t)CFSTR("timeEstimate"));
                }
              }
            }
            sub_21A70A778(*(_QWORD *)(a3 + 128), 32, a1, (uint64_t)v11, v28, v29, v30, v31);
            if (dword_2550EFCA0 <= 800 && (dword_2550EFCA0 != -1 || sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u)))
              sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"void __ACPMonitoringForPropertiesCallback(OSStatus, CFDictionaryRef, void *)", 800, (uint64_t)"eBSConfigurationProgressSelector_DiskTaskProgress diskTaskDict: %@\n", v39, v40, v41, v42, (uint64_t)v11);
            if (sub_21A68FDC0(v11, (int *)&v68, v37, v38, v39, v40, v41, v42))
            {
              if (dword_2550EFCA0 <= 800 && (dword_2550EFCA0 != -1 || sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u)))
                sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"void __ACPMonitoringForPropertiesCallback(OSStatus, CFDictionaryRef, void *)", 800, (uint64_t)"eBSConfigurationProgressSelector_DiskTaskProgress *** STARTING \n", v45, v46, v47, v48, v65);
              if (*(_DWORD *)(a3 + 144) == 1634561902 && *(_DWORD *)(a3 + 80) != 6)
              {
                sub_21A6DC318(a3, v68, v43, v44, v45, v46, v47, v48);
                sub_21A6DA0E8(a3, 6, v68, 1, v49, v50, v51, v52);
              }
            }
            else if (sub_21A68FF04(v11, (uint64_t)&v70, v43, v44, v45, v46, v47, v48))
            {
              if (dword_2550EFCA0 <= 800 && (dword_2550EFCA0 != -1 || sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u)))
                sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"void __ACPMonitoringForPropertiesCallback(OSStatus, CFDictionaryRef, void *)", 800, (uint64_t)"eBSConfigurationProgressSelector_DiskTaskProgress *** COMPLETE \n", v55, v56, v57, v58, v65);
              v59 = *(void **)(a3 + 136);
              if (v59)
                sub_21A72DEF0(v59);
              *(_QWORD *)(a3 + 136) = 0;
              sub_21A6D7BCC(a3, 0, v53, v54, v55, v56, v57, v58);
              sub_21A6E2E9C(a3);
              sub_21A6E2F9C(a3, 6, (uint64_t)v11, v70, v60, v61, v62, v63);
            }
          }
        }
        else
        {
          v19 = 0;
          while (1)
          {
            cf = 0;
            sub_21A693B94((const __CFString *)theArray, (uint64_t)&v68 + 4, (UInt8 *)"[*]:code", v13, v14, v15, v16, v17, v19);
            if (v25 || !HIDWORD(v68))
              break;
            sub_21A693B94(a2, (uint64_t)&cf, (UInt8 *)"%kC", v20, v21, v22, v23, v24, HIDWORD(v68));
            if (v26 != -6727)
            {
              if (v26 || !cf)
                break;
              if (HIDWORD(v68) == 1819240301)
              {
                if (sub_21A6E3844(a3, (const __CFString *)cf, v27, v13, v14, v15, v16, v17))
                  break;
              }
              else if (sub_21A6E32F8(a3, HIDWORD(v68), v11 == 0, v13, v14, v15, v16, v17))
              {
                break;
              }
            }
            if (v18 == ++v19)
              goto LABEL_21;
          }
        }
      }
    }
  }
  else
  {
    v11 = 0;
  }
  if (theArray)
  {
    CFRelease(theArray);
    theArray = 0;
  }
LABEL_42:
  if (v11)
    CFRelease(v11);
}

uint64_t sub_21A6E3844(uint64_t a1, const __CFString *cf, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  CFTypeID v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;

  if (dword_2550EFCA0 <= 800 && (dword_2550EFCA0 != -1 || sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u)))
    sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"OSStatus _BSConfiguration_HandleLogMessageAsync(BSConfigurationContextRef, CFTypeRef)", 800, (uint64_t)"inMessage: %@ \n", a5, a6, a7, a8, (uint64_t)cf);
  if (*(_DWORD *)(a1 + 144) != 1634561902)
    return 4294960591;
  if (!*(_QWORD *)(a1 + 8))
    return 4294960591;
  v10 = CFGetTypeID(cf);
  if (v10 != CFStringGetTypeID())
    return 4294960591;
  if (CFStringFind(cf, CFSTR(": Associated"), 0).location == -1
    && CFStringFind(cf, CFSTR(": Rotated"), 0).location == -1
    && CFStringFind(cf, CFSTR(": DHCPACK"), 0).location == -1)
  {
    return 0;
  }
  result = sub_21A6E32F8(a1, 1918980940, 1, v11, v12, v13, v14, v15);
  if (!(_DWORD)result)
  {
    v22 = 0;
    result = sub_21A6D4560(*(_QWORD *)(a1 + 8), 1918977107, &v22);
    if (!(_DWORD)result)
    {
      if (v22)
        return sub_21A6E32F8(a1, 1684558668, 1, v17, v18, v19, v20, v21);
    }
  }
  return result;
}

void sub_21A6E39B0(uint64_t a1, const __CFString *a2, uint64_t a3, unint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;

  if (a4)
  {
    v24 = 0;
    v25 = 0;
    *a4 = 0;
    sub_21A693B94(a2, (uint64_t)&v25, (UInt8 *)"%kC.%kO:int64", (uint64_t)a4, a5, a6, a7, a8, a3);
    if (!v17)
    {
      sub_21A693B94(a2, (uint64_t)&v24, (UInt8 *)"%kC.%kO:int64", v12, v13, v14, v15, v16, a3);
      if (!v18)
      {
        v19 = v25;
        if (v25)
        {
          v22 = *(_QWORD *)(a1 + 136);
          v21 = (uint64_t *)(a1 + 136);
          v20 = v22;
          if (!v22)
          {
            if (sub_21A72DE98(v21))
              return;
            v20 = *v21;
            v19 = v25;
          }
          v23 = sub_21A72DF14(v20, v24, v19);
          if (v23)
            *a4 = v23;
        }
      }
    }
  }
}

uint64_t sub_21A6E3A90(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  int v9;
  const __CFString *v10;
  uint64_t v11;

  v8 = result;
  if (dword_2550EFCA0 <= 800)
  {
    if (dword_2550EFCA0 != -1 || (result = sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u), (_DWORD)result))
      result = sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"void __BSConfiguration_CancelDiskTaskSync(void *)", 800, (uint64_t)" \n", a5, a6, a7, a8, v11);
  }
  if (v8)
  {
    if (*(_DWORD *)(v8 + 144) == 1634561902)
    {
      result = *(_QWORD *)(v8 + 8);
      if (result)
      {
        v9 = *(_DWORD *)(v8 + 84);
        switch(v9)
        {
          case 1098015561:
            v10 = CFSTR("diskd.cancelArchiveDisk");
            return sub_21A6D6290(result, (uint64_t)v10, a3, a4, a5, a6, a7, a8);
          case 1298753353:
            v10 = CFSTR("diskd.cancelMigrateDisk");
            return sub_21A6D6290(result, (uint64_t)v10, a3, a4, a5, a6, a7, a8);
          case 1165123913:
            v10 = CFSTR("diskd.cancelEraseDisk");
            return sub_21A6D6290(result, (uint64_t)v10, a3, a4, a5, a6, a7, a8);
        }
      }
    }
  }
  return result;
}

void sub_21A6E3B78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  if (dword_2550EFCA0 <= 800 && (dword_2550EFCA0 != -1 || sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u)))
    sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"OSStatus _BSConfiguration_CheckForProperTaskState(BSConfigurationContextRef)", 800, (uint64_t)" \n", a5, a6, a7, a8, v22);
  if (*(_DWORD *)(a1 + 144) == 1634561902)
  {
    v9 = *(_QWORD *)(a1 + 8);
    if (v9)
    {
      if (sub_21A6D4724(v9, 1400460148)
        && sub_21A6D4750(*(_QWORD *)(a1 + 8), 1415661904, 0)
        && *(_DWORD *)(a1 + 144) == 1634561902
        && *(_DWORD *)(a1 + 80) != 6)
      {
        v10 = sub_21A6D4764(*(_QWORD *)(a1 + 8));
        if ((_DWORD)v10)
        {
          v17 = v10;
          if (!sub_21A6DC318(a1, v10, v11, v12, v13, v14, v15, v16))
            sub_21A6DA0E8(a1, 6, v17, 0, v18, v19, v20, v21);
        }
      }
    }
  }
}

void sub_21A6E3C78(uint64_t a1, const __CFString *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  const __CFString *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const void *ValueAtIndex;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  CFTypeRef v23;
  CFTypeRef cf;

  v23 = 0;
  cf = 0;
  if (*(_DWORD *)(a1 + 144) == 1634561902)
  {
    v11 = sub_21A68EE6C(a2, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
    if (v11)
    {
      v18 = (uint64_t)v11;
      if (!sub_21A68EB8C(a2, (__CFArray **)&cf, v12, v13, v14, v15, v16, v17))
      {
        if (!cf)
        {
LABEL_6:
          if (v23)
            CFRelease(v23);
          return;
        }
        if (!sub_21A6D4430(a3, 1651721296, (CFMutableDictionaryRef *)&v23))
        {
          if (v23)
          {
            ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)cf, 0);
            if (ValueAtIndex)
              sub_21A70C8C0(*(_QWORD *)(a1 + 128), (uint64_t)CFSTR("keychainBaseStationType"), (uint64_t)ValueAtIndex, v18, (uint64_t)v23, v20, v21, v22);
          }
        }
      }
    }
    if (cf)
    {
      CFRelease(cf);
      cf = 0;
    }
    goto LABEL_6;
  }
}

uint64_t sub_21A6E3D58(uint64_t a1, uint64_t a2, const __CFString *a3, CFTypeRef *a4)
{
  uint64_t v4;
  const __CFString *v5;
  BOOL v9;
  BOOL v10;
  uint64_t v11;
  _BOOL4 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const __CFString *v20;
  const __CFString *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  const char *v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  const __CFArray *v55;
  CFTypeRef cf;
  BOOL v57;
  int v58;

  v4 = 4294960591;
  if (!a4)
    return v4;
  v5 = a3;
  if (!a3 || !a2 || *(_DWORD *)(a1 + 144) != 1634561902)
    return v4;
  if (!sub_21A6D4724(a2, 1400460148) || !sub_21A6D4724(a2, 1095593838))
    return 4294960561;
  v58 = 0;
  v57 = 0;
  v55 = 0;
  cf = 0;
  *a4 = 0;
  v9 = sub_21A6D4750(a2, 2002865740, &v57) && !v57;
  v10 = v9;
  sub_21A6D4750(a2, 2002865737, &v57);
  v12 = v57;
  if (!v10)
  {
    v4 = 0;
    if (v57)
      return v4;
  }
  v4 = sub_21A70E760(*(_QWORD *)(a1 + 128), v5, 0, 0, 0, 0, &cf, v11);
  if ((_DWORD)v4)
    return v4;
  v20 = (const __CFString *)cf;
  if (cf)
  {
    *a4 = cf;
    cf = 0;
    v5 = v20;
  }
  v21 = sub_21A68EE6C(v5, v13, v14, v15, v16, v17, v18, v19);
  if (!v21)
    return 4294960569;
  v26 = (uint64_t)v21;
  sub_21A70ACEC(*(_QWORD *)(a1 + 128), 22, 0, (uint64_t)v21, v22, v23, v24, v25);
  if (!v10)
  {
    v4 = sub_21A6D523C(a2, 1937331060);
    if ((_DWORD)v4)
      return v4;
    if (!sub_21A6D4750(a2, 2002865740, &v57) || v57)
      goto LABEL_93;
  }
  if (dword_2550EFCA0 <= 800 && (dword_2550EFCA0 != -1 || sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u)))
    sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"OSStatus _VerifyConnections(BSConfigurationContextRef, BSRef, CFDictionaryRef, CFDictionaryRef *)", 800, (uint64_t)"\n\t****Is WAN plugged in?\n", v28, v29, v30, v31, v54);
  v32 = sub_21A6E620C(a1, a2, 512, v27, v28, v29, v30, v31);
  if ((_DWORD)v32)
  {
    v4 = v32;
    if ((_DWORD)v32 != -6757)
      return v4;
    if (dword_2550EFCA0 <= 800 && (dword_2550EFCA0 != -1 || sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u)))
    {
      v33 = "User skipped WAN connection\n";
LABEL_46:
      sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"OSStatus _VerifyConnections(BSConfigurationContextRef, BSRef, CFDictionaryRef, CFDictionaryRef *)", 800, (uint64_t)v33, v28, v29, v30, v31, v54);
    }
  }
  else
  {
LABEL_93:
    if (dword_2550EFCA0 <= 800 && (dword_2550EFCA0 != -1 || sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u)))
      sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"OSStatus _VerifyConnections(BSConfigurationContextRef, BSRef, CFDictionaryRef, CFDictionaryRef *)", 800, (uint64_t)"\n\t****Is DHCP or PPPoE?\n", v28, v29, v30, v31, v54);
    v35 = sub_21A6E620C(a1, a2, 3072, v27, v28, v29, v30, v31);
    if (!(_DWORD)v35)
    {
      v4 = sub_21A6D4478(a2, 1937327724, &v58);
      if ((_DWORD)v4)
        return v4;
      if ((v58 & 0x400) != 0)
      {
        if (dword_2550EFCA0 <= 800)
        {
          if (dword_2550EFCA0 != -1 || sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u))
            sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"OSStatus _VerifyConnections(BSConfigurationContextRef, BSRef, CFDictionaryRef, CFDictionaryRef *)", 800, (uint64_t)"Got PPPoE offer\n", v48, v49, v50, v51, v54);
          if (dword_2550EFCA0 <= 800 && (dword_2550EFCA0 != -1 || sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u)))
            sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"OSStatus _VerifyConnections(BSConfigurationContextRef, BSRef, CFDictionaryRef, CFDictionaryRef *)", 800, (uint64_t)"\n\t****Setting up PPPoE\n", v48, v49, v50, v51, v54);
        }
        v53 = sub_21A6E650C(a1, a2, v26, v47, v48, v49, v50, v51);
        if (!(_DWORD)v53)
          goto LABEL_90;
        v4 = v53;
        if ((_DWORD)v53 == -6757)
        {
          if (dword_2550EFCA0 <= 800 && (dword_2550EFCA0 != -1 || sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u)))
            sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"OSStatus _VerifyConnections(BSConfigurationContextRef, BSRef, CFDictionaryRef, CFDictionaryRef *)", 800, (uint64_t)"User skipped PPPoE connection\n", v42, v43, v44, v45, v54);
          goto LABEL_90;
        }
        return v4;
      }
      if (v12)
        goto LABEL_47;
      if (dword_2550EFCA0 <= 800 && (dword_2550EFCA0 != -1 || sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u)))
        sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"OSStatus _VerifyConnections(BSConfigurationContextRef, BSRef, CFDictionaryRef, CFDictionaryRef *)", 800, (uint64_t)"\n\t****Is Internet connected?\n", v48, v49, v50, v51, v54);
      v52 = sub_21A6E6714(a1, a2, v46, v47, v48, v49, v50, v51);
      if (!(_DWORD)v52)
        goto LABEL_47;
      v4 = v52;
      if ((_DWORD)v52 != -6757)
        return v4;
      if (dword_2550EFCA0 > 800 || dword_2550EFCA0 == -1 && !sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u))
        goto LABEL_47;
      v33 = "User skipped Internet connection\n";
      goto LABEL_46;
    }
    v4 = v35;
    if ((_DWORD)v35 != -6757)
      return v4;
    if (dword_2550EFCA0 <= 800 && (dword_2550EFCA0 != -1 || sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u)))
    {
      v33 = "User skipped DHCP/PPPoE connection\n";
      goto LABEL_46;
    }
  }
LABEL_47:
  v4 = sub_21A6D523C(a2, 1937331060);
  if ((_DWORD)v4)
    return v4;
  cf = 0;
  v4 = sub_21A6D4430(a2, 1937331060, (CFMutableDictionaryRef *)&cf);
  if ((_DWORD)v4)
    return v4;
  if (!cf)
    return 4294960568;
  sub_21A693B94((const __CFString *)cf, (uint64_t)&v55, (UInt8 *)"%ks", v36, v37, v38, v39, v40, (uint64_t)"problems");
  v4 = v41;
  if (cf)
  {
    CFRelease(cf);
    cf = 0;
  }
  if ((_DWORD)v4)
    return v4;
  if (!v55)
    return 4294960568;
  if (sub_21A6D0AE8(v55, 1148543566) == -1 && sub_21A6D0AE8(v55, 2002866794) == -1)
    goto LABEL_61;
  if (dword_2550EFCA0 <= 800 && (dword_2550EFCA0 != -1 || sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u)))
    sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"OSStatus _VerifyConnections(BSConfigurationContextRef, BSRef, CFDictionaryRef, CFDictionaryRef *)", 800, (uint64_t)"Setting bridge mode. problems: %@\n", v42, v43, v44, v45, (uint64_t)v55);
  v4 = sub_21A6D4310(a2, 1651724877, 3);
  if (!(_DWORD)v4)
  {
LABEL_61:
    v55 = 0;
LABEL_90:
    sub_21A70ACEC(*(_QWORD *)(a1 + 128), 23, 0, v26, v42, v43, v44, v45);
    return 0;
  }
  return v4;
}

uint64_t sub_21A6E4354(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  const __CFString *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  CFTypeRef cf;
  char *v65;
  unsigned int v66;
  char *v67;

  if (dword_2550EFCA0 <= 800 && (dword_2550EFCA0 != -1 || sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u)))
    sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"OSStatus _PluginAudioCabling(BSConfigurationContextRef)", 800, (uint64_t)" \n", a5, a6, a7, a8, v63);
  v65 = 0;
  v67 = 0;
  if (!*(_QWORD *)(a1 + 8))
    return 4294960591;
  v66 = 0;
  cf = 0;
  if (!*(_QWORD *)a1)
  {
    v16 = 4294960591;
    goto LABEL_31;
  }
  v9 = sub_21A68EE6C(*(const __CFString **)a1, a2, a3, a4, a5, a6, a7, a8);
  if (!v9)
  {
    v16 = 4294960569;
    goto LABEL_31;
  }
  v14 = (uint64_t)v9;
  sub_21A70ACEC(*(_QWORD *)(a1 + 128), 24, 0, (uint64_t)v9, v10, v11, v12, v13);
  v16 = sub_21A70E760(*(_QWORD *)(a1 + 128), *(const __CFString **)a1, 0, 0, 0, 0, &cf, v15);
  if ((_DWORD)v16)
    goto LABEL_31;
  if (cf)
  {
    CFRelease(*(CFTypeRef *)a1);
    *(_QWORD *)a1 = cf;
    cf = 0;
  }
  v16 = sub_21A709AF8(*(_QWORD *)(a1 + 128), &v67);
  if ((_DWORD)v16)
    goto LABEL_31;
  if (!v67)
    goto LABEL_36;
  v16 = sub_21A6D523C(*(_QWORD *)(a1 + 8), 1937327724);
  if ((_DWORD)v16)
    goto LABEL_31;
  v16 = sub_21A6D4478(*(_QWORD *)(a1 + 8), 1937327724, &v66);
  if ((_DWORD)v16)
    goto LABEL_31;
  v21 = v66;
  if ((v66 & 0x80) != 0)
  {
    if (dword_2550EFCA0 <= 800)
    {
      if (dword_2550EFCA0 != -1)
      {
LABEL_41:
        sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"OSStatus _PluginAudioCabling(BSConfigurationContextRef)", 800, (uint64_t)"First check was successful!... systemFlags: 0x%X  Skipping user interaction.\n", v17, v18, v19, v20, v21);
        goto LABEL_42;
      }
      if (sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u))
      {
        v21 = v66;
        goto LABEL_41;
      }
    }
LABEL_42:
    v16 = 4294960539;
    goto LABEL_31;
  }
  v16 = sub_21A70EB58(v67, *(_QWORD *)(a1 + 8), 128, (uint64_t *)&v65, v17, v18, v19, v20);
  if ((_DWORD)v16)
    goto LABEL_31;
  if (!v65)
  {
    v16 = 4294960568;
    goto LABEL_33;
  }
  v16 = sub_21A6D523C(*(_QWORD *)(a1 + 8), 1937327724);
  if ((_DWORD)v16 || (v16 = sub_21A6D4478(*(_QWORD *)(a1 + 8), 1937327724, &v66), (_DWORD)v16))
  {
LABEL_31:
    if (v65)
    {
      sub_21A6D1988(*(_QWORD *)(a1 + 8));
      sub_21A70EA78(v65, v48, v49, v50, v51, v52, v53, v54);
    }
    goto LABEL_33;
  }
  v27 = v66;
  if ((v66 & 0x80) == 0)
  {
    v16 = sub_21A692FEC((const __CFAllocator *)*MEMORY[0x24BDBD240], &cf, (uint64_t)"{%kO=%O}", v22, v23, v24, v25, v26, (uint64_t)CFSTR("kBSConfigurationSwapCabling_TargetBase"));
    if ((_DWORD)v16)
      goto LABEL_31;
    if (cf)
    {
      v16 = sub_21A6E6968((uint64_t)v67, 6, 4294960543, (uint64_t)cf, 0, v28, v29, v30);
      if (cf)
      {
        CFRelease(cf);
        cf = 0;
      }
      sub_21A6D1988(*(_QWORD *)(a1 + 8));
      sub_21A70EA78(v65, v31, v32, v33, v34, v35, v36, v37);
      v65 = 0;
      if ((_DWORD)v16)
        goto LABEL_33;
      v16 = sub_21A6E6B40((uint64_t)v67, 6, v38, v39, v40, v41, v42, v43);
      if (!(_DWORD)v16)
        sub_21A70ACEC(*(_QWORD *)(a1 + 128), 25, 0, v14, v44, v45, v46, v47);
      goto LABEL_31;
    }
LABEL_36:
    v16 = 4294960568;
    goto LABEL_31;
  }
  if (dword_2550EFCA0 > 800)
    goto LABEL_49;
  if (dword_2550EFCA0 != -1)
    goto LABEL_48;
  if (sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u))
  {
    v27 = v66;
LABEL_48:
    sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"OSStatus _PluginAudioCabling(BSConfigurationContextRef)", 800, (uint64_t)"Second check was successful!... systemFlags: 0x%X Skipping user interaction.\n", v23, v24, v25, v26, v27);
  }
LABEL_49:
  sub_21A6D1988(*(_QWORD *)(a1 + 8));
  sub_21A70EA78(v65, v56, v57, v58, v59, v60, v61, v62);
  v65 = 0;
  v16 = 4294960539;
LABEL_33:
  if (v67)
    sub_21A709C24(v67);
  return v16;
}

uint64_t sub_21A6E46C0(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  const __CFString *v10;
  uint64_t v11;
  const __CFArray *v12;
  uint64_t v13;
  CFTypeRef cf;
  uint64_t v16;

  if (dword_2550EFCA0 <= 800 && (dword_2550EFCA0 != -1 || sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u)))
    sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"OSStatus _ReadSettingsForSourceDevice(BSConfigurationContextRef, Boolean, Boolean)", 800, (uint64_t)"\n", a5, a6, a7, a8, (uint64_t)cf);
  if (*(_DWORD *)(a1 + 144) != 1634561902)
    return 4294960591;
  v10 = *(const __CFString **)(a1 + 16);
  if (!v10)
    return 4294960591;
  v16 = 0;
  v11 = *(_QWORD *)(a1 + 24);
  if (!v11)
  {
    v13 = sub_21A6D1350(&v16, v10);
    if ((_DWORD)v13)
      return v13;
    v11 = v16;
    if (!v16)
      return 4294960568;
    *(_QWORD *)(a1 + 24) = v16;
    v16 = 0;
  }
  v12 = 0;
  cf = 0;
  if (a2)
    goto LABEL_9;
  v13 = sub_21A6CFA78((unsigned int *)"tSaMAMarAMalAMawiFiWANarSDarPIalgBhdnEhdVStnnEcaLCAtRLysWPysdlCi", (__CFArray **)&cf);
  if ((_DWORD)v13)
    return v13;
  v12 = (const __CFArray *)cf;
  if (!cf)
    return 4294960568;
  v11 = *(_QWORD *)(a1 + 24);
LABEL_9:
  v13 = sub_21A6DE984(a1, v12, *(const __CFString **)(a1 + 16), v11, 1, 0, 1, a8);
  if (cf)
    CFRelease(cf);
  return v13;
}

uint64_t sub_21A6E47F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  const __CFString *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  CFTypeRef cf;
  char *v65;
  unsigned int v66;
  char *v67;

  if (dword_2550EFCA0 <= 800 && (dword_2550EFCA0 != -1 || sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u)))
    sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"OSStatus _SwapConnections(BSConfigurationContextRef)", 800, (uint64_t)" \n", a5, a6, a7, a8, v63);
  v65 = 0;
  v67 = 0;
  if (*(_DWORD *)(a1 + 144) != 1634561902)
    return 4294960591;
  v66 = 0;
  cf = 0;
  if (!*(_QWORD *)(a1 + 8) || !*(_QWORD *)a1 || !*(_QWORD *)(a1 + 16))
  {
    v16 = 4294960591;
    goto LABEL_34;
  }
  v9 = sub_21A68EE6C(*(const __CFString **)a1, a2, a3, a4, a5, a6, a7, a8);
  if (!v9)
  {
    v16 = 4294960569;
    goto LABEL_34;
  }
  v14 = (uint64_t)v9;
  sub_21A70ACEC(*(_QWORD *)(a1 + 128), 22, 0, (uint64_t)v9, v10, v11, v12, v13);
  v16 = sub_21A70E760(*(_QWORD *)(a1 + 128), *(const __CFString **)a1, 0, 0, 0, 0, &cf, v15);
  if ((_DWORD)v16)
    goto LABEL_34;
  if (cf)
  {
    v16 = sub_21A6DCE04(a1, (const __CFString *)cf);
    if (cf)
    {
      CFRelease(cf);
      cf = 0;
    }
    if ((_DWORD)v16)
      goto LABEL_34;
  }
  v16 = sub_21A709AF8(*(_QWORD *)(a1 + 128), &v67);
  if ((_DWORD)v16)
    goto LABEL_34;
  if (!v67)
    goto LABEL_40;
  v16 = sub_21A6D523C(*(_QWORD *)(a1 + 8), 1937327724);
  if ((_DWORD)v16)
    goto LABEL_34;
  v16 = sub_21A6D4478(*(_QWORD *)(a1 + 8), 1937327724, &v66);
  if ((_DWORD)v16)
    goto LABEL_34;
  v21 = v66;
  if ((v66 & 0x200) != 0)
  {
    if (dword_2550EFCA0 <= 800)
    {
      if (dword_2550EFCA0 != -1)
      {
LABEL_45:
        sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"OSStatus _SwapConnections(BSConfigurationContextRef)", 800, (uint64_t)"First check was successful!... systemFlags: 0x%X  Skipping user interaction.\n", v17, v18, v19, v20, v21);
        goto LABEL_46;
      }
      if (sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u))
      {
        v21 = v66;
        goto LABEL_45;
      }
    }
LABEL_46:
    v16 = 4294960539;
    goto LABEL_34;
  }
  v16 = sub_21A70EB58(v67, *(_QWORD *)(a1 + 8), 512, (uint64_t *)&v65, v17, v18, v19, v20);
  if ((_DWORD)v16)
    goto LABEL_34;
  if (!v65)
  {
    v16 = 4294960568;
    goto LABEL_36;
  }
  v16 = sub_21A6D523C(*(_QWORD *)(a1 + 8), 1937327724);
  if ((_DWORD)v16 || (v16 = sub_21A6D4478(*(_QWORD *)(a1 + 8), 1937327724, &v66), (_DWORD)v16))
  {
LABEL_34:
    if (v65)
    {
      sub_21A6D1988(*(_QWORD *)(a1 + 8));
      sub_21A70EA78(v65, v48, v49, v50, v51, v52, v53, v54);
    }
    goto LABEL_36;
  }
  v27 = v66;
  if ((v66 & 0x200) == 0)
  {
    v16 = sub_21A692FEC((const __CFAllocator *)*MEMORY[0x24BDBD240], &cf, (uint64_t)"{%kO=%O%kO=%O}", v22, v23, v24, v25, v26, (uint64_t)CFSTR("kBSConfigurationSwapCabling_TargetBase"));
    if ((_DWORD)v16)
      goto LABEL_34;
    if (cf)
    {
      v16 = sub_21A6E6968((uint64_t)v67, 5, 4294960543, (uint64_t)cf, 0, v28, v29, v30);
      if (cf)
      {
        CFRelease(cf);
        cf = 0;
      }
      sub_21A6D1988(*(_QWORD *)(a1 + 8));
      sub_21A70EA78(v65, v31, v32, v33, v34, v35, v36, v37);
      v65 = 0;
      if ((_DWORD)v16)
        goto LABEL_36;
      v16 = sub_21A6E6B40((uint64_t)v67, 5, v38, v39, v40, v41, v42, v43);
      if (!(_DWORD)v16)
        sub_21A70ACEC(*(_QWORD *)(a1 + 128), 23, 0, v14, v44, v45, v46, v47);
      goto LABEL_34;
    }
LABEL_40:
    v16 = 4294960568;
    goto LABEL_34;
  }
  if (dword_2550EFCA0 > 800)
    goto LABEL_53;
  if (dword_2550EFCA0 != -1)
    goto LABEL_52;
  if (sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u))
  {
    v27 = v66;
LABEL_52:
    sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"OSStatus _SwapConnections(BSConfigurationContextRef)", 800, (uint64_t)"Second check was successful!... systemFlags: 0x%X Skipping user interaction.\n", v23, v24, v25, v26, v27);
  }
LABEL_53:
  sub_21A6D1988(*(_QWORD *)(a1 + 8));
  sub_21A70EA78(v65, v56, v57, v58, v59, v60, v61, v62);
  v65 = 0;
  v16 = 4294960539;
LABEL_36:
  if (v67)
    sub_21A709C24(v67);
  return v16;
}

uint64_t sub_21A6E4B9C(uint64_t a1, const __CFString *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  const __CFAllocator *v11;
  __CFArray *Mutable;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __CFArray *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  CFStringRef v29;
  CFStringRef v30;
  CFStringRef v31;
  CFStringRef v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  int v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v112;
  CFStringRef theString;
  const __CFString *v114;
  char cStr[5];
  CFTypeRef cf;
  char v117[21];
  uint64_t v118;

  v118 = *MEMORY[0x24BDAC8D0];
  if (dword_2550EFCA0 <= 800 && (dword_2550EFCA0 != -1 || sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u)))
    sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"OSStatus _BSConfiguration_UpdateSettingsWithSourceSettings(BSConfigurationContextRef, CFDictionaryRef)", 800, (uint64_t)" \n", a5, a6, a7, a8, v112);
  v10 = 4294960591;
  if (*(_DWORD *)(a1 + 144) == 1634561902 && a2 && *(_QWORD *)(a1 + 8) && *(_QWORD *)(a1 + 16) && *(_DWORD *)(a1 + 72))
  {
    v11 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
    if (Mutable)
    {
      v18 = Mutable;
      cf = 0;
      v19 = *(_DWORD *)(a1 + 72);
      switch(v19)
      {
        case 6:
        case 8:
          if (v19 == 6)
            v45 = 20;
          else
            v45 = 0;
          v10 = sub_21A6DDD64(a1, v19, a2, (const __CFString **)&cf, v14, v15, v16, v17);
          if (!(_DWORD)v10)
          {
            if (!cf)
              goto LABEL_76;
            v10 = sub_21A693A8C(v11, v18, (uint64_t)"%kC=%O", v46, v47, v48, v49, v50, 1466517097);
            if (cf)
            {
              CFRelease(cf);
              cf = 0;
            }
            if (!(_DWORD)v10)
            {
              sub_21A693B94(a2, (uint64_t)&cf, (UInt8 *)"%kC", v51, v52, v53, v54, v55, 1937330263);
              v10 = v61;
              if (!(_DWORD)v61)
              {
                if (!cf)
                  goto LABEL_76;
                v10 = sub_21A693A8C(v11, v18, (uint64_t)"%kC=%O", v56, v57, v58, v59, v60, 1937330263);
                if (!(_DWORD)v10)
                {
                  sub_21A693B94(a2, (uint64_t)&cf, (UInt8 *)"%kC", v62, v63, v64, v65, v66, 1950434124);
                  if ((_DWORD)v67 == -6727)
                    goto LABEL_46;
                  v10 = v67;
                  if (!(_DWORD)v67)
                  {
                    if (!cf)
                      goto LABEL_76;
                    v10 = sub_21A693A8C(v11, v18, (uint64_t)"%kC=%O", v68, v69, v70, v71, v72, 1950434124);
                    if (!(_DWORD)v10)
                    {
LABEL_46:
                      sub_21A693B94(a2, (uint64_t)&cf, (UInt8 *)"%kC", v68, v69, v70, v71, v72, 1853117270);
                      if ((_DWORD)v73 == -6727)
                        goto LABEL_50;
                      v10 = v73;
                      if (!(_DWORD)v73)
                      {
                        if (!cf)
                          goto LABEL_76;
                        v10 = sub_21A693A8C(v11, v18, (uint64_t)"%kC=%O", v74, v75, v76, v77, v78, 1853117270);
                        if (!(_DWORD)v10)
                        {
LABEL_50:
                          sub_21A693B94(a2, (uint64_t)&cf, (UInt8 *)"%kC", v74, v75, v76, v77, v78, 1766026340);
                          if (v84
                            || !cf
                            || (v10 = sub_21A693A8C(v11, v18, (uint64_t)"%kC=%O", v79, v80, v81, v82, v83, 1766026340),
                                !(_DWORD)v10))
                          {
                            if (!sub_21A6D4724(*(_QWORD *)(a1 + 8), 1768961614)
                              || (v10 = sub_21A693A8C(v11, v18, (uint64_t)"%kC=%b", v85, v86, v87, v88, v89, 912356724),
                                  !(_DWORD)v10)
                              && (v10 = sub_21A693A8C(v11, v18, (uint64_t)"%kC=%i", v90, v91, v92, v93, v94, 912483943),
                                  !(_DWORD)v10))
                            {
                              v10 = sub_21A6D1858(*(_QWORD *)(a1 + 8), a2, v18, 0);
                              if (!(_DWORD)v10)
                              {
                                sub_21A6D6E44(v117, 0x15uLL);
                                v10 = sub_21A6D4124(*(_QWORD *)(a1 + 8), v117, v45);
                                if (!(_DWORD)v10)
                                {
                                  v10 = sub_21A6D4310(*(_QWORD *)(a1 + 8), 1651724877, 3);
                                  if (!(_DWORD)v10)
                                  {
                                    v10 = sub_21A6D422C(*(_QWORD *)(a1 + 8), 1651721281, 1);
                                    if (!(_DWORD)v10)
                                    {
                                      v44 = sub_21A6D4310(*(_QWORD *)(a1 + 8), 2002862934, 768);
                                      goto LABEL_75;
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          goto LABEL_77;
        case 7:
          v10 = sub_21A6DDD64(a1, 7, a2, (const __CFString **)&cf, v14, v15, v16, v17);
          if (!(_DWORD)v10)
          {
            if (!cf)
              goto LABEL_76;
            v10 = sub_21A693A8C(v11, v18, (uint64_t)"%kC=%O", v95, v96, v97, v98, v99, 1466517097);
            if (cf)
            {
              CFRelease(cf);
              cf = 0;
            }
            if (!(_DWORD)v10)
            {
              sub_21A693B94(a2, (uint64_t)&cf, (UInt8 *)"%kC", v100, v101, v102, v103, v104, 1937330263);
              v10 = v110;
              if (!(_DWORD)v110)
              {
                if (!cf)
                  goto LABEL_76;
                v10 = sub_21A693A8C(v11, v18, (uint64_t)"%kC=%O", v105, v106, v107, v108, v109, 1937330263);
                if (!(_DWORD)v10)
                {
                  v10 = sub_21A6D1858(*(_QWORD *)(a1 + 8), a2, v18, 0);
                  if (!(_DWORD)v10)
                  {
                    v10 = sub_21A6D4310(*(_QWORD *)(a1 + 8), 2002862934, 768);
                    if (!(_DWORD)v10)
                    {
                      sub_21A6D6E44(v117, 0x15uLL);
                      v10 = sub_21A6D4124(*(_QWORD *)(a1 + 8), v117, 1);
                      if (!(_DWORD)v10)
                      {
                        v10 = sub_21A6D4310(*(_QWORD *)(a1 + 8), 1651724877, 3);
                        if (!(_DWORD)v10)
                        {
                          if (!sub_21A6D4724(*(_QWORD *)(a1 + 8), 1884509249))
                            goto LABEL_79;
                          sub_21A6D6E44(v117, 0x15uLL);
                          v44 = sub_21A6D40A0(*(_QWORD *)(a1 + 8), v117, (const __CFString *)*MEMORY[0x24BDBD270]);
                          goto LABEL_75;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          goto LABEL_77;
        case 9:
        case 10:
        case 11:
        case 12:
          v114 = 0;
          v10 = sub_21A693A8C(v11, Mutable, (uint64_t)"%##O", v13, v14, v15, v16, v17, (uint64_t)a2);
          if ((_DWORD)v10)
            goto LABEL_77;
          v10 = sub_21A6DDD64(a1, *(_DWORD *)(a1 + 72), (const __CFString *)v18, (const __CFString **)&cf, v20, v21, v22, v23);
          if ((_DWORD)v10)
            goto LABEL_77;
          if (!cf)
            goto LABEL_76;
          v10 = sub_21A693A8C(v11, v18, (uint64_t)"%kC=%O", v24, v25, v26, v27, v28, 1466517097);
          if (cf)
          {
            CFRelease(cf);
            cf = 0;
          }
          if ((_DWORD)v10)
            goto LABEL_77;
          sub_21A6711EC(1937329773, cStr);
          v29 = CFStringCreateWithCString(v11, cStr, 0x8000100u);
          if (!v29)
            goto LABEL_76;
          v30 = v29;
          CFDictionaryRemoveValue(v18, v29);
          CFRelease(v30);
          sub_21A6711EC(1937327182, cStr);
          v31 = CFStringCreateWithCString(v11, cStr, 0x8000100u);
          if (!v31)
            goto LABEL_76;
          v32 = v31;
          CFDictionaryRemoveValue(v18, v31);
          CFRelease(v32);
          sub_21A693B94((const __CFString *)v18, (uint64_t)&v114, (UInt8 *)"%kC", v33, v34, v35, v36, v37, 1937330263);
          v10 = v43;
          if (!(_DWORD)v43)
          {
            if (v114)
            {
              theString = 0;
              sub_21A693B94((const __CFString *)v18, (uint64_t)&theString, (UInt8 *)"%kC", v38, v39, v40, v41, v42, 1229213293);
              v10 = sub_21A6D1858(*(_QWORD *)(a1 + 8), a2, v18, 1);
              if (!(_DWORD)v10)
              {
                v10 = sub_21A6D42C8(*(_QWORD *)(a1 + 8), 1937330263, v114);
                if (!(_DWORD)v10)
                {
                  if (*(_DWORD *)(a1 + 72) != 11
                    || (sub_21A6D6E44(v117, 0x15uLL),
                        v10 = sub_21A6D40A0(*(_QWORD *)(a1 + 8), v117, (const __CFString *)*MEMORY[0x24BDBD270]),
                        !(_DWORD)v10))
                  {
                    v10 = 0;
                    if (sub_21A6D4724(*(_QWORD *)(a1 + 8), 1231975492))
                    {
                      if (theString)
                      {
                        if (CFStringGetLength(theString))
                        {
                          v44 = sub_21A6D42C8(*(_QWORD *)(a1 + 8), 1229213293, theString);
LABEL_75:
                          v10 = v44;
                        }
                        else
                        {
LABEL_79:
                          v10 = 0;
                        }
                      }
                    }
                  }
                }
              }
            }
            else
            {
LABEL_76:
              v10 = 4294960568;
            }
          }
LABEL_77:
          CFRelease(v18);
          return v10;
        default:
          goto LABEL_77;
      }
    }
    return 4294960568;
  }
  return v10;
}

uint64_t sub_21A6E5344(uint64_t a1, CFDictionaryRef theDict, _BYTE *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  CFIndex Count;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const __CFString *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  BOOL v55;
  const void **v56;
  const __CFString *v57;
  CFStringRef theString;
  CFTypeRef cf;
  uint64_t v60;
  char buffer[256];
  uint64_t v62;

  v62 = *MEMORY[0x24BDAC8D0];
  if (dword_2550EFCA0 <= 800 && (dword_2550EFCA0 != -1 || sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u)))
    sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"OSStatus _WriteSettingsToSourceDevice(BSConfigurationContextRef, CFDictionaryRef, Boolean *)", 800, (uint64_t)"\n", a5, a6, a7, a8, v54);
  v56 = 0;
  if (*(_DWORD *)(a1 + 144) != 1634561902)
    return 4294960591;
  cf = 0;
  v60 = 0;
  v57 = 0;
  theString = 0;
  v11 = 4294960591;
  v55 = 0;
  if (theDict)
  {
    if (*(_QWORD *)(a1 + 16))
    {
      Count = CFDictionaryGetCount(theDict);
      if (a3)
      {
        if (Count)
        {
          v20 = sub_21A68EE6C(*(const __CFString **)(a1 + 16), v13, v14, v15, v16, v17, v18, v19);
          if (v20)
          {
            v22 = (uint64_t)v20;
            v11 = sub_21A70E760(*(_QWORD *)(a1 + 128), *(const __CFString **)(a1 + 16), 0, 0, (const void *)1, 0, &v60, v21);
            if (!(_DWORD)v11)
            {
              if (v60)
              {
                CFRelease(*(CFTypeRef *)(a1 + 16));
                *(_QWORD *)(a1 + 16) = v60;
                v60 = 0;
              }
              v11 = sub_21A6E46C0(a1, 1, v23, v24, v25, v26, v27, v28);
              if (!(_DWORD)v11)
              {
                if (!*(_QWORD *)(a1 + 24))
                {
                  v11 = 4294960569;
                  goto LABEL_15;
                }
                v11 = sub_21A695640(theDict, &v56);
                if ((_DWORD)v11)
                  goto LABEL_15;
                if (!v56)
                  return 4294960568;
                while (sub_21A6956DC((uint64_t *)v56, &theString, &v57))
                {
                  if (CFStringGetCString(theString, buffer, 256, 0x8000100u))
                  {
                    v34 = sub_21A6D40A0(*(_QWORD *)(a1 + 24), buffer, v57);
                    if ((_DWORD)v34)
                    {
                      v11 = v34;
                      goto LABEL_15;
                    }
                  }
                }
                if (dword_2550EFCA0 <= 800
                  && (dword_2550EFCA0 != -1 || sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u)))
                {
                  sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"OSStatus _WriteSettingsToSourceDevice(BSConfigurationContextRef, CFDictionaryRef, Boolean *)", 800, (uint64_t)"\n\n\t\t          \t\t++++++++++ Config phase: \"%s\" ++++++++++\n\n", v30, v31, v32, v33, (uint64_t)"Write source settings");
                }
                sub_21A70ACEC(*(_QWORD *)(a1 + 128), 20, 0, v22, v30, v31, v32, v33);
                v11 = sub_21A6D28FC(*(_QWORD *)(a1 + 24), &v55, &cf);
                if (v55)
                {
                  if (dword_2550EFCA0 <= 800
                    && (dword_2550EFCA0 != -1 || sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u)))
                  {
                    sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"OSStatus _WriteSettingsToSourceDevice(BSConfigurationContextRef, CFDictionaryRef, Boolean *)", 800, (uint64_t)"Had minimal restart with interruptions: %@\n", v35, v36, v37, v38, (uint64_t)cf);
                  }
                  if (cf)
                  {
                    CFRelease(cf);
                    cf = 0;
                  }
                }
                if ((_DWORD)v11)
                  goto LABEL_15;
                sub_21A70ACEC(*(_QWORD *)(a1 + 128), 21, 0, v22, v35, v36, v37, v38);
                if (dword_2550EFCA0 <= 800
                  && (dword_2550EFCA0 != -1 || sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u)))
                {
                  sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"OSStatus _WriteSettingsToSourceDevice(BSConfigurationContextRef, CFDictionaryRef, Boolean *)", 800, (uint64_t)"\n\n\t\t          \t\t---------- Config phase: \"%s\" ----------\n\n", v42, v43, v44, v45, (uint64_t)"Write source settings");
                }
                if ((*(_DWORD *)(a1 + 72) & 0xFFFFFFFE) == 0xA)
                {
                  v11 = 0;
                  *a3 = 1;
                  goto LABEL_15;
                }
                *a3 = 0;
                if (!sub_21A68F0A8(*(const __CFString **)(a1 + 16), v39, v40, v41, v42, v43, v44, v45))
                {
                  if (dword_2550EFCA0 <= 800)
                  {
                    if (dword_2550EFCA0 != -1 || sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u))
                      sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"OSStatus _WriteSettingsToSourceDevice(BSConfigurationContextRef, CFDictionaryRef, Boolean *)", 800, (uint64_t)"\n\n\t\t          \t\t++++++++++ Config phase: \"%s\" ++++++++++\n\n", v46, v47, v48, v49, (uint64_t)"No bonjour seed pause");
                    if (dword_2550EFCA0 <= 800
                      && (dword_2550EFCA0 != -1 || sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u)))
                    {
                      sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"OSStatus _WriteSettingsToSourceDevice(BSConfigurationContextRef, CFDictionaryRef, Boolean *)", 800, (uint64_t)"pausing for: %d secs\n", v46, v47, v48, v49, 8);
                    }
                  }
                  v11 = sub_21A70BD94(*(_QWORD *)(a1 + 128), 8);
                  if ((_DWORD)v11)
                    goto LABEL_15;
                  if (dword_2550EFCA0 > 800)
                    goto LABEL_51;
                  if (dword_2550EFCA0 != -1 || sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u))
                    sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"OSStatus _WriteSettingsToSourceDevice(BSConfigurationContextRef, CFDictionaryRef, Boolean *)", 800, (uint64_t)"\n\n\t\t          \t\t---------- Config phase: \"%s\" ----------\n\n", v46, v47, v48, v49, (uint64_t)"No bonjour seed pause");
                }
                if (dword_2550EFCA0 <= 800
                  && (dword_2550EFCA0 != -1 || sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u)))
                {
                  sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"OSStatus _WriteSettingsToSourceDevice(BSConfigurationContextRef, CFDictionaryRef, Boolean *)", 800, (uint64_t)"\n\n\t\t          \t\t++++++++++ Config phase: \"%s\" ++++++++++\n\n", v46, v47, v48, v49, (uint64_t)"Waiting for source base");
                }
LABEL_51:
                v11 = sub_21A70E760(*(_QWORD *)(a1 + 128), *(const __CFString **)(a1 + 16), 1, 1, (const void *)1, 0, &v60, v49);
                if (!(_DWORD)v11)
                {
                  if (v60)
                  {
                    CFRelease(*(CFTypeRef *)(a1 + 16));
                    *(_QWORD *)(a1 + 16) = v60;
                    v60 = 0;
                  }
                  if (dword_2550EFCA0 <= 800
                    && (dword_2550EFCA0 != -1 || sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u)))
                  {
                    sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"OSStatus _WriteSettingsToSourceDevice(BSConfigurationContextRef, CFDictionaryRef, Boolean *)", 800, (uint64_t)"\n\n\t\t          \t\t---------- Config phase: \"%s\" ----------\n\n", v50, v51, v52, v53, (uint64_t)"Waiting for source base");
                  }
                  v11 = 0;
                }
              }
            }
          }
        }
      }
    }
  }
LABEL_15:
  if (v56)
    sub_21A6956D0(v56);
  return v11;
}

uint64_t sub_21A6E58C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v28;
  char *v29;
  CFTypeRef v30;
  CFTypeRef v31;
  CFTypeRef cf;
  const __CFString *v33;
  CFTypeRef v34[4];

  v34[3] = *(CFTypeRef *)MEMORY[0x24BDAC8D0];
  if (dword_2550EFCA0 <= 800 && (dword_2550EFCA0 != -1 || sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u)))
    sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"OSStatus _ShowAdditionalConfigurationUI(BSConfigurationContextRef)", 800, (uint64_t)"\n\n\t\t          \t\t++++++++++ Config phase: \"%s\" ++++++++++\n\n", a5, a6, a7, a8, (uint64_t)"Show Additional Configuration UI As Needed");
  if (!*(_BYTE *)(a1 + 76) && *(_DWORD *)(a1 + 72) == 1 && sub_21A6D4724(*(_QWORD *)(a1 + 8), 1198748750))
  {
    v28 = 0;
    v13 = sub_21A6D4514(*(_QWORD *)(a1 + 8), 1918979649, &v28);
    if ((_DWORD)v13)
      goto LABEL_84;
    if (dword_2550EFCA0 <= 800 && (dword_2550EFCA0 != -1 || sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u)))
    {
      if (v28)
        v14 = "On";
      else
        v14 = "Off";
      sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"OSStatus _ShowAdditionalConfigurationUI(BSConfigurationContextRef)", 800, (uint64_t)"NAT: %s \n", v9, v10, v11, v12, (uint64_t)v14);
    }
    if (v28)
    {
      if (dword_2550EFCA0 <= 800 && (dword_2550EFCA0 != -1 || sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u)))
        sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"OSStatus _ShowAdditionalConfigurationUI(BSConfigurationContextRef)", 800, (uint64_t)"\n\n\t\t          \t\t++++++++++ Config phase: \"%s\" ++++++++++\n\n", v9, v10, v11, v12, (uint64_t)"Prompt for Guest Network config");
      v33 = 0;
      v29 = 0;
      v30 = 0;
      v31 = 0;
      cf = 0;
      if (*(_DWORD *)(a1 + 144) == 1634561902 && *(_QWORD *)(a1 + 8) && *(_QWORD *)a1)
      {
        v13 = sub_21A709AF8(*(_QWORD *)(a1 + 128), &v29);
        if (!(_DWORD)v13)
        {
          if (!v29)
          {
            v13 = 4294960568;
LABEL_40:
            if (cf)
            {
              CFRelease(cf);
              cf = 0;
            }
            if (v31)
            {
              CFRelease(v31);
              v31 = 0;
            }
            if (v30)
              CFRelease(v30);
            if ((_DWORD)v13)
              goto LABEL_84;
            if (dword_2550EFCA0 <= 800 && (dword_2550EFCA0 != -1 || sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u)))
              sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"OSStatus _ShowAdditionalConfigurationUI(BSConfigurationContextRef)", 800, (uint64_t)"\n\n\t\t          \t\t---------- Config phase: \"%s\" ----------\n\n", v9, v10, v11, v12, (uint64_t)"Prompt for Guest Network config");
            goto LABEL_51;
          }
          v13 = sub_21A6D4430(*(_QWORD *)(a1 + 8), 1937329773, (CFMutableDictionaryRef *)&v31);
          if (!(_DWORD)v13)
          {
            if (v31)
            {
              sub_21A6D6E44(v34, 0x15uLL);
              v13 = sub_21A6D4328(*(_QWORD *)(a1 + 8), (char *)v34, (CFMutableDictionaryRef *)&v30);
              if ((_DWORD)v13)
                goto LABEL_38;
              if (v30)
              {
                v13 = sub_21A692FEC((const __CFAllocator *)*MEMORY[0x24BDBD240], (CFTypeRef *)&v33, (uint64_t)"{%ks=%O%ks=%O%ks=%O}", v15, v9, v10, v11, v12, (uint64_t)"kBSConfigurationUIConfig_TargetBaseKey");
                if ((_DWORD)v13)
                  goto LABEL_38;
                if (v33)
                {
                  sub_21A6E6E74((uint64_t)v29, 8, (uint64_t)v33, &cf, v9, v10, v11, v12);
                  v13 = v18;
                  if (v33)
                  {
                    CFRelease(v33);
                    v33 = 0;
                  }
                  if (!(_DWORD)v13)
                  {
                    if (cf)
                    {
                      sub_21A6DEDBC(a1, (const __CFString *)cf, v16, v17, v9, v10, v11, v12);
                      v13 = v19;
                    }
                    else
                    {
                      v13 = 0;
                    }
                  }
                  goto LABEL_38;
                }
              }
            }
            v13 = 4294960568;
          }
        }
      }
      else
      {
        v13 = 4294960591;
      }
LABEL_38:
      if (v29)
        sub_21A709C24(v29);
      goto LABEL_40;
    }
  }
LABEL_51:
  if (!sub_21A6D4724(*(_QWORD *)(a1 + 8), 1097749364))
  {
LABEL_83:
    v13 = 0;
    goto LABEL_84;
  }
  if (dword_2550EFCA0 <= 800 && (dword_2550EFCA0 != -1 || sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u)))
    sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"OSStatus _ShowAdditionalConfigurationUI(BSConfigurationContextRef)", 800, (uint64_t)"\n\n\t\t          \t\t++++++++++ Config phase: \"%s\" ++++++++++\n\n", v9, v10, v11, v12, (uint64_t)"Prompt Send Diags & Usage");
  cf = 0;
  v33 = 0;
  if (*(_DWORD *)(a1 + 144) == 1634561902)
  {
    v34[0] = 0;
    if (*(_QWORD *)(a1 + 8) && *(_QWORD *)a1)
    {
      v13 = sub_21A709AF8(*(_QWORD *)(a1 + 128), &cf);
      if ((_DWORD)v13)
        goto LABEL_74;
      if (!cf)
      {
        v13 = 4294960568;
LABEL_76:
        if (v33)
          CFRelease(v33);
        if ((_DWORD)v13)
          goto LABEL_84;
        if (dword_2550EFCA0 > 800)
          return 0;
        if (dword_2550EFCA0 != -1 || sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u))
          sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"OSStatus _ShowAdditionalConfigurationUI(BSConfigurationContextRef)", 800, (uint64_t)"\n\n\t\t          \t\t---------- Config phase: \"%s\" ----------\n\n", v9, v10, v11, v12, (uint64_t)"Prompt Send Diags & Usage");
        goto LABEL_83;
      }
      if (sub_21A68EE6C(*(const __CFString **)a1, v20, v21, v22, v9, v10, v11, v12))
      {
        v13 = sub_21A692FEC((const __CFAllocator *)*MEMORY[0x24BDBD240], v34, (uint64_t)"{%ks=%O}", v23, v9, v10, v11, v12, (uint64_t)"kBSConfigurationConnectionStatus_DeviceName");
        if ((_DWORD)v13)
          goto LABEL_74;
        if (v34[0])
        {
          sub_21A6E6E74((uint64_t)cf, 7, (uint64_t)v34[0], (CFTypeRef *)&v33, v9, v10, v11, v12);
          v13 = v25;
          if (v34[0])
          {
            CFRelease(v34[0]);
            v34[0] = 0;
          }
          if ((_DWORD)v13)
            goto LABEL_74;
          if (v33)
          {
            v31 = 0;
            sub_21A693B94(v33, (uint64_t)&v31, (UInt8 *)"%kC", v24, v9, v10, v11, v12, 1937011781);
            if ((_DWORD)v26)
            {
LABEL_71:
              v13 = v26;
              goto LABEL_74;
            }
            if (v31)
            {
              v26 = sub_21A6D42C8(*(_QWORD *)(a1 + 8), 1937011781, (const __CFString *)v31);
              goto LABEL_71;
            }
          }
        }
        v13 = 4294960568;
      }
      else
      {
        v13 = 4294960569;
      }
    }
    else
    {
      v13 = 4294960591;
    }
LABEL_74:
    if (cf)
      sub_21A709C24((char *)cf);
    goto LABEL_76;
  }
  v13 = 4294960591;
LABEL_84:
  if (dword_2550EFCA0 <= 800 && (dword_2550EFCA0 != -1 || sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u)))
    sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"OSStatus _ShowAdditionalConfigurationUI(BSConfigurationContextRef)", 800, (uint64_t)"\n\n\t\t          \t\t---------- Config phase: \"%s\" ----------\n\n", v9, v10, v11, v12, (uint64_t)"Show Additional Configuration UI As Needed");
  return v13;
}

uint64_t sub_21A6E5EF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  const __CFString *v9;
  uint64_t v11;
  const __CFString *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  CFTypeRef v52;
  CFTypeRef v53;
  CFTypeRef v54;
  CFTypeRef cf;
  CFTypeRef v56;
  uint64_t v57;
  char v58[21];
  uint64_t v59;

  v9 = (const __CFString *)a2;
  v59 = *MEMORY[0x24BDAC8D0];
  v57 = a3;
  if (dword_2550EFCA0 <= 800 && (dword_2550EFCA0 != -1 || sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u)))
    sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"OSStatus _RestoreDefaultsAndOptionallyWaitForDevice(BSConfigurationContextRef, CFDictionaryRef, BSRef, Boolean, CFDictionaryRef *)", 800, (uint64_t)" \n", a5, a6, a7, a8, (uint64_t)v52);
  v54 = 0;
  cf = 0;
  v52 = 0;
  v53 = 0;
  v11 = 4294960591;
  v56 = 0;
  if (v9)
  {
    if (*(_DWORD *)(a1 + 144) == 1634561902)
    {
      v12 = sub_21A68EE6C(v9, a2, a3, a4, a5, a6, a7, a8);
      if (v12)
      {
        v14 = (uint64_t)v12;
        v11 = sub_21A70E760(*(_QWORD *)(a1 + 128), v9, 0, 0, (const void *)1, 0, &v54, v13);
        if (!(_DWORD)v11)
        {
          if (v54)
            v9 = (const __CFString *)v54;
          if (!a3)
          {
            v11 = sub_21A6D1350(&v57, v9);
            if ((_DWORD)v11)
              goto LABEL_23;
            if (!v57)
              goto LABEL_22;
          }
          v11 = sub_21A6CFA78((unsigned int *)"tSaMAMarAMalAMawiFiWANarSDarPIalgBhdnEhdVStnnEcaLCAtRLysWPysdlCi", (__CFArray **)&cf);
          if ((_DWORD)v11)
            goto LABEL_23;
          if (!cf)
            goto LABEL_22;
          v11 = sub_21A6DE984(a1, (const __CFArray *)cf, v9, v57, 1, 0, 0, v15);
          if (cf)
          {
            CFRelease(cf);
            cf = 0;
          }
          if (!(_DWORD)v11)
          {
            v21 = sub_21A70B648(*(_QWORD *)(a1 + 128), &v53, &v52, v16, v17, v18, v19, v20);
            v11 = v21;
            if ((_DWORD)v21 == -6727)
            {
              v28 = 0;
            }
            else
            {
              if ((_DWORD)v21)
                goto LABEL_23;
              v28 = sub_21A68F440(v9, (const __CFString *)v52, v22, v23, v24, v25, v26, v27);
            }
            sub_21A70ACEC(*(_QWORD *)(a1 + 128), 20, v11, v14, v24, v25, v26, v27);
            v11 = sub_21A6D7078(v57, v30, v31, v32, v33, v34, v35, v36);
            if (!(_DWORD)v11)
            {
              sub_21A70ACEC(*(_QWORD *)(a1 + 128), 21, 0, v14, v37, v38, v39, v40);
              sub_21A6D6E44(v58, 0x15uLL);
              v11 = sub_21A6D4328(v57, v58, (CFMutableDictionaryRef *)&v56);
              if (!(_DWORD)v11)
              {
                if (v56)
                {
                  if (!v28)
                    goto LABEL_44;
                  if (dword_2550EFCA0 <= 800
                    && (dword_2550EFCA0 != -1 || sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u)))
                  {
                    sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"OSStatus _RestoreDefaultsAndOptionallyWaitForDevice(BSConfigurationContextRef, CFDictionaryRef, BSRef, Boolean, CFDictionaryRef *)", 800, (uint64_t)"networkWillGoAway \n", v41, v42, v43, v44, (uint64_t)v52);
                  }
                  v11 = sub_21A70B94C(*(_QWORD *)(a1 + 128));
                  if (!(_DWORD)v11)
                  {
                    v11 = sub_21A70C004(*(_QWORD *)(a1 + 128), v45, v46, v47, v48, v49, v50, v51);
                    if (!(_DWORD)v11)
                    {
                      v11 = sub_21A70BB98(*(_QWORD *)(a1 + 128), (const __CFString *)v53, v9);
                      if (!(_DWORD)v11)
                      {
LABEL_44:
                        v11 = 0;
                        v54 = 0;
                      }
                    }
                  }
                  goto LABEL_23;
                }
LABEL_22:
                v11 = 4294960568;
              }
            }
          }
        }
      }
    }
  }
LABEL_23:
  if (v53)
  {
    CFRelease(v53);
    v53 = 0;
  }
  if (v52)
  {
    CFRelease(v52);
    v52 = 0;
  }
  if (v54)
  {
    CFRelease(v54);
    v54 = 0;
  }
  if (v56)
    CFRelease(v56);
  return v11;
}

uint64_t sub_21A6E620C(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unsigned int v50;
  char *v51;
  unsigned int v52;
  char *v53;

  if (dword_2550EFCA0 <= 800 && (dword_2550EFCA0 != -1 || sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u)))
    sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"OSStatus _VerifyConnectionWithSystemFlags(BSConfigurationContextRef, BSRef, ACPSystemFlags)", 800, (uint64_t)" \n", a5, a6, a7, a8, v49);
  v51 = 0;
  v53 = 0;
  if (*(_DWORD *)(a1 + 144) != 1634561902)
    return 4294960591;
  v52 = 0;
  if (a3 == 512)
    v11 = 1;
  else
    v11 = 2;
  v12 = sub_21A709AF8(*(_QWORD *)(a1 + 128), &v53);
  if ((_DWORD)v12)
    goto LABEL_39;
  if (!v53)
  {
    v12 = 4294960568;
LABEL_39:
    if (v51)
    {
      sub_21A6D1988(a2);
      sub_21A70EA78(v51, v34, v35, v36, v37, v38, v39, v40);
    }
    goto LABEL_41;
  }
  v50 = v11;
  v13 = 0;
  if (a3 == 512)
    v14 = 1;
  else
    v14 = 8;
  do
  {
    if (v13)
    {
      v15 = sub_21A70BD94(*(_QWORD *)(a1 + 128), 1);
      if ((_DWORD)v15)
        goto LABEL_36;
    }
    v15 = sub_21A6D523C(a2, 1937327724);
    if ((_DWORD)v15)
      goto LABEL_36;
    v15 = sub_21A6D4478(a2, 1937327724, &v52);
    if ((_DWORD)v15)
      goto LABEL_36;
    if (dword_2550EFCA0 <= 800 && (dword_2550EFCA0 != -1 || sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u)))
      sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"OSStatus _VerifyConnectionWithSystemFlags(BSConfigurationContextRef, BSRef, ACPSystemFlags)", 800, (uint64_t)"systemFlags: 0x%X retries: %ld of %ld \n", v18, v19, v20, v21, v52);
    if ((v52 & a3) != 0)
      goto LABEL_35;
    ++v13;
  }
  while (v14 != v13);
  v12 = sub_21A70EB58(v53, a2, a3, (uint64_t *)&v51, v18, v19, v20, v21);
  if ((_DWORD)v12)
    goto LABEL_39;
  if (v51)
  {
    v12 = sub_21A6D523C(a2, 1937327724);
    if (!(_DWORD)v12)
    {
      v12 = sub_21A6D4478(a2, 1937327724, &v52);
      if (!(_DWORD)v12)
      {
        v26 = v52;
        if ((v52 & a3) != 0)
        {
          if (dword_2550EFCA0 <= 800)
          {
            if (dword_2550EFCA0 != -1)
            {
LABEL_33:
              sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"OSStatus _VerifyConnectionWithSystemFlags(BSConfigurationContextRef, BSRef, ACPSystemFlags)", 800, (uint64_t)"Second check was successful!... systemFlags: 0x%X \n", v22, v23, v24, v25, v26);
              goto LABEL_34;
            }
            if (sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u))
            {
              v26 = v52;
              goto LABEL_33;
            }
          }
LABEL_34:
          sub_21A6D1988(a2);
          sub_21A70EA78(v51, v27, v28, v29, v30, v31, v32, v33);
          v51 = 0;
LABEL_35:
          v15 = sub_21A6E6B40((uint64_t)v53, v50, v16, v17, v18, v19, v20, v21);
LABEL_36:
          v12 = v15;
          goto LABEL_39;
        }
        v12 = sub_21A6E6968((uint64_t)v53, v50, 4294960543, 0, 0, v23, v24, v25);
        sub_21A6D1988(a2);
        sub_21A70EA78(v51, v42, v43, v44, v45, v46, v47, v48);
        v51 = 0;
        if (!(_DWORD)v12)
          goto LABEL_35;
        goto LABEL_41;
      }
    }
    goto LABEL_39;
  }
  v12 = 4294960568;
LABEL_41:
  if (v53)
    sub_21A709C24(v53);
  return v12;
}

uint64_t sub_21A6E650C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const __CFAllocator *v22;
  __CFArray *Mutable;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __CFArray *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  BOOL v41;
  uint64_t v43;
  CFTypeRef cf;
  char *v45;

  if (dword_2550EFCA0 <= 800 && (dword_2550EFCA0 != -1 || sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u)))
    sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"OSStatus _VerifyPPPoEConnection(BSConfigurationContextRef, BSRef, CFStringRef)", 800, (uint64_t)" \n", a5, a6, a7, a8, v43);
  cf = 0;
  v45 = 0;
  if (*(_DWORD *)(a1 + 144) != 1634561902)
    return 4294960591;
  v17 = sub_21A709AF8(*(_QWORD *)(a1 + 128), &v45);
  if (!(_DWORD)v17)
  {
    if (!v45)
    {
LABEL_17:
      v17 = 4294960568;
      goto LABEL_18;
    }
    v17 = sub_21A6E6C54(a1, v10, v11, v12, v13, v14, v15, v16);
    if ((_DWORD)v17 == -6735)
    {
      if (dword_2550EFCA0 <= 800 && (dword_2550EFCA0 != -1 || sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u)))
        sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"OSStatus _VerifyPPPoEConnection(BSConfigurationContextRef, BSRef, CFStringRef)", 800, (uint64_t)"Base station doesn't support verifying PPPoE Credentials\n", v18, v19, v20, v21, v43);
      v22 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
      Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 1, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
      if (Mutable)
      {
        v29 = Mutable;
        v30 = sub_21A693A8C(v22, Mutable, (uint64_t)"%ks=%O", v24, v25, v26, v27, v28, (uint64_t)"kBSConfigurationConnectionStatus_DeviceName");
        if ((_DWORD)v30)
        {
          v17 = v30;
          CFRelease(v29);
        }
        else
        {
          v17 = sub_21A6E6968((uint64_t)v45, 3, 4294960542, (uint64_t)v29, &cf, v31, v32, v33);
          CFRelease(v29);
          if ((_DWORD)v17)
            v41 = (_DWORD)v17 == -6757;
          else
            v41 = 1;
          if (v41 && cf != 0)
            sub_21A6E6CD8(a2, (CFDictionaryRef)cf);
          if (!(_DWORD)v17)
            v17 = sub_21A6E6B40((uint64_t)v45, 3, v35, v36, v37, v38, v39, v40);
        }
        goto LABEL_18;
      }
      goto LABEL_17;
    }
  }
LABEL_18:
  if (cf)
  {
    CFRelease(cf);
    cf = 0;
  }
  if (v45)
    sub_21A709C24(v45);
  return v17;
}

uint64_t sub_21A6E6714(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *global_queue;
  NSObject *v26;
  dispatch_time_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *context;

  if (dword_2550EFCA0 <= 800 && (dword_2550EFCA0 != -1 || sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u)))
    sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"OSStatus _VerifyInternetConnection(BSConfigurationContextRef, BSRef)", 800, (uint64_t)" \n", a5, a6, a7, a8, v32);
  context = 0;
  if (*(_DWORD *)(a1 + 144) != 1634561902)
    return 4294960591;
  v17 = sub_21A709AF8(*(_QWORD *)(a1 + 128), &context);
  if (!(_DWORD)v17)
  {
    if (!context)
      return 4294960568;
    if (sub_21A6D63D4(a2, v10, v11, v12, v13, v14, v15, v16))
    {
      *((_QWORD *)context + 15) = a2;
      global_queue = dispatch_get_global_queue(0, 0);
      v26 = dispatch_source_create(MEMORY[0x24BDACA18], 0, 0, global_queue);
      dispatch_set_context(v26, context);
      dispatch_source_set_event_handler_f(v26, (dispatch_function_t)sub_21A6E6D68);
      v27 = dispatch_time(0, 1000000000);
      dispatch_source_set_timer(v26, v27, 0x3B9ACA00uLL, 0x3B9ACA00uLL);
      dispatch_resume(v26);
      v17 = sub_21A6E6968((uint64_t)context, 4, 4294960543, 0, 0, v28, v29, v30);
      dispatch_source_cancel(v26);
      while (1)
      {
        v31 = pthread_mutex_trylock((pthread_mutex_t *)((char *)context + 56));
        if (dword_2550EFCA0 <= 800 && (dword_2550EFCA0 != -1 || sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u)))
          sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"OSStatus _VerifyInternetConnection(BSConfigurationContextRef, BSRef)", 800, (uint64_t)"Waiting for __InternetCheckTimerFiredCallback mutexlock: %d\n", v21, v22, v23, v24, v31);
        if ((_DWORD)v31 != 16)
          break;
        v17 = sub_21A70BD94(*(_QWORD *)(a1 + 128), 1);
      }
      if ((_DWORD)v31)
      {
        if ((_DWORD)v17)
          goto LABEL_23;
      }
      else
      {
        pthread_mutex_unlock((pthread_mutex_t *)((char *)context + 56));
        if ((_DWORD)v17)
        {
LABEL_23:
          if (!v26)
            goto LABEL_7;
LABEL_28:
          dispatch_release(v26);
          goto LABEL_7;
        }
      }
    }
    else
    {
      v26 = 0;
    }
    v17 = sub_21A6E6B40((uint64_t)context, 4, v19, v20, v21, v22, v23, v24);
    if (!v26)
      goto LABEL_7;
    goto LABEL_28;
  }
LABEL_7:
  if (context)
    sub_21A709C24((char *)context);
  return v17;
}

uint64_t sub_21A6E6968(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, CFTypeRef *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  __CFArray *v11;
  const __CFAllocator *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  CFTypeRef v41;
  uint64_t v43;
  CFTypeRef cf;

  if (dword_2550EFCA0 <= 800 && (dword_2550EFCA0 != -1 || sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u)))
    sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"OSStatus _CopyAndWaitResultsDictFromConnectionStatusUpdate(AssistantCallbackContextRef, eBSConfigurationUIConfigSelector, OSStatus, CFDictionaryRef, CFDictionaryRef *)", 800, (uint64_t)" \n", (uint64_t)a5, a6, a7, a8, v43);
  if (!a1 || *(_DWORD *)a1 != 1634561902)
  {
    v18 = 4294960578;
    goto LABEL_19;
  }
  v11 = *(__CFArray **)(a1 + 24);
  if (v11)
  {
    v12 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
    v18 = sub_21A693A8C((const __CFAllocator *)*MEMORY[0x24BDBD240], v11, (uint64_t)"%ks=%i", a4, (uint64_t)a5, a6, a7, a8, (uint64_t)"kBSAssistantCallback_Configuration_UIConfigSelector");
    if (!(_DWORD)v18)
    {
      v18 = sub_21A693A8C(v12, *(__CFArray **)(a1 + 24), (uint64_t)"%ks=%i", v13, v14, v15, v16, v17, (uint64_t)"kBSAssistantCallback_Configuration_UIConfigConnectionStatusOSStatus");
      if (!(_DWORD)v18)
      {
        if (!a4
          || (v18 = sub_21A70B204(a1, (uint64_t)CFSTR("kBSAssistantCallback_Configuration_UIConfigParamDict"), a4, v20, v21, v22, v23, v24), !(_DWORD)v18))
        {
          v18 = sub_21A70A23C((_QWORD *)a1, 1, v19, v20, v21, v22, v23, v24);
          if (!(_DWORD)v18)
          {
            v32 = sub_21A70A598(a1, v25, v26, v27, v28, v29, v30, v31);
            v33 = *(_DWORD *)(a1 + 32);
            if (v33)
              v18 = v33;
            else
              v18 = v32;
            if (!a5)
              return v18;
            goto LABEL_20;
          }
        }
      }
    }
LABEL_19:
    if (!a5)
      return v18;
    goto LABEL_20;
  }
  v18 = 4294960591;
  if (!a5)
    return v18;
LABEL_20:
  cf = 0;
  if (sub_21A70B1D4(a1, CFSTR("kBSAssistantCallback_Configuration_UIConfigResultsDict")))
  {
    while (1)
    {
      sub_21A70B0B0(a1, (uint64_t)CFSTR("kBSAssistantCallback_Configuration_UIConfigResultsDict"), &cf, v34, v35, v36, v37, v38);
      v40 = v39;
      if (!(_DWORD)v39)
      {
        v41 = cf;
        if (cf)
        {
          *a5 = cf;
          CFRetain(v41);
          return v18;
        }
        v40 = 4294960568;
      }
      v18 = v40;
      if (!sub_21A70B1D4(a1, CFSTR("kBSAssistantCallback_Configuration_UIConfigResultsDict")))
        return v40;
    }
  }
  return v18;
}

uint64_t sub_21A6E6B40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  __CFArray *v9;
  const __CFAllocator *v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  if (dword_2550EFCA0 <= 800 && (dword_2550EFCA0 != -1 || sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u)))
    sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"OSStatus _SendAndNoWaitResultsDictFromConnectionStatusUpdate(AssistantCallbackContextRef, eBSConfigurationUIConfigSelector, OSStatus, CFDictionaryRef)", 800, (uint64_t)" \n", a5, a6, a7, a8, v23);
  if (!a1 || *(_DWORD *)a1 != 1634561902)
    return 4294960578;
  v9 = *(__CFArray **)(a1 + 24);
  if (!v9)
    return 4294960591;
  v10 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  result = sub_21A693A8C((const __CFAllocator *)*MEMORY[0x24BDBD240], v9, (uint64_t)"%ks=%i", a4, a5, a6, a7, a8, (uint64_t)"kBSAssistantCallback_Configuration_UIConfigSelector");
  if (!(_DWORD)result)
  {
    result = sub_21A693A8C(v10, *(__CFArray **)(a1 + 24), (uint64_t)"%ks=%i", v12, v13, v14, v15, v16, (uint64_t)"kBSAssistantCallback_Configuration_UIConfigConnectionStatusOSStatus");
    if (!(_DWORD)result)
      return sub_21A70A490((_QWORD *)a1, 1, v17, v18, v19, v20, v21, v22);
  }
  return result;
}

uint64_t sub_21A6E6C54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;

  if (dword_2550EFCA0 <= 800 && (dword_2550EFCA0 != -1 || sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u)))
    sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"OSStatus _VerifyPPPoECredentials(BSConfigurationContextRef, BSRef, CFDictionaryRef)", 800, (uint64_t)" \n", a5, a6, a7, a8, v10);
  if (*(_DWORD *)(a1 + 144) == 1634561902)
    return 4294960561;
  else
    return 4294960591;
}

void sub_21A6E6CD8(uint64_t a1, CFDictionaryRef theDict)
{
  int v4;
  CFTypeRef cf;

  if (CFDictionaryGetCount(theDict))
  {
    cf = 0;
    if (!sub_21A6D46E8(a1, &cf))
    {
      if (cf)
      {
        v4 = sub_21A6D1858(a1, (const __CFString *)cf, theDict, 0);
        if (cf)
        {
          CFRelease(cf);
          cf = 0;
        }
        if (!v4)
          sub_21A6D4310(a1, 1651722563, 2);
      }
    }
  }
}

uint64_t sub_21A6E6D68(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  if (result)
  {
    v1 = result;
    if (*(_DWORD *)result == 1634561902)
    {
      v2 = *(_QWORD *)(result + 120);
      if (v2)
      {
        pthread_mutex_lock((pthread_mutex_t *)(result + 56));
        if (sub_21A6D63D4(v2, v3, v4, v5, v6, v7, v8, v9))
        {
          if (dword_2550EFCA0 <= 800 && (dword_2550EFCA0 != -1 || sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u)))
            sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"void __InternetCheckTimerFiredCallback(void *)", 800, (uint64_t)"BAD internet result \n", v12, v13, v14, v15, v16);
        }
        else
        {
          if (dword_2550EFCA0 <= 800 && (dword_2550EFCA0 != -1 || sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u)))
            sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"void __InternetCheckTimerFiredCallback(void *)", 800, (uint64_t)"Good internet result \n", v12, v13, v14, v15, v16);
          sub_21A70B2E0((_QWORD *)v1, 0, v10, v11, v12, v13, v14, v15);
        }
        return pthread_mutex_unlock((pthread_mutex_t *)(v1 + 56));
      }
    }
  }
  return result;
}

void sub_21A6E6E74(uint64_t a1, uint64_t a2, uint64_t a3, CFTypeRef *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  CFTypeRef v37;
  uint64_t v38;
  CFTypeRef cf;

  if (dword_2550EFCA0 <= 800 && (dword_2550EFCA0 != -1 || sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u)))
    sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"OSStatus _CopyAndWaitResultsDictFromUIConfigPrompt(AssistantCallbackContextRef, eBSConfigurationUIConfigSelector, CFDictionaryRef, CFDictionaryRef *)", 800, (uint64_t)" \n", a5, a6, a7, a8, v38);
  cf = 0;
  if (a1)
  {
    if (*(_DWORD *)a1 == 1634561902)
    {
      if (a4)
      {
        if (*(_QWORD *)(a1 + 24))
        {
          if (!sub_21A70B274(a1, (uint64_t)CFSTR("kBSAssistantCallback_Configuration_UIConfigSelector"), a2, (uint64_t)a4, a5, a6, a7, a8)&& !sub_21A70B204(a1, (uint64_t)CFSTR("kBSAssistantCallback_Configuration_UIConfigParamDict"), a3, v12, v13, v14, v15, v16)&& !sub_21A70A23C((_QWORD *)a1, 1, v17, v18, v19, v20, v21, v22))
          {
            v30 = sub_21A70A598(a1, v23, v24, v25, v26, v27, v28, v29);
            if (!*(_DWORD *)(a1 + 32) && !v30)
            {
              if (sub_21A70B1D4(a1, CFSTR("kBSAssistantCallback_Configuration_UIConfigResultsDict")))
              {
                sub_21A70B0B0(a1, (uint64_t)CFSTR("kBSAssistantCallback_Configuration_UIConfigResultsDict"), &cf, v31, v32, v33, v34, v35);
                if (!v36)
                {
                  v37 = cf;
                  if (cf)
                  {
                    *a4 = cf;
                    CFRetain(v37);
                  }
                }
              }
              else
              {
                *a4 = 0;
              }
            }
          }
        }
      }
    }
  }
}

uint64_t sub_21A6E6FEC(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;

  v8 = result;
  if (dword_2550EFCA0 <= 800)
  {
    if (dword_2550EFCA0 != -1 || (result = sub_21A69876C((uint64_t)&dword_2550EFCA0, 0x320u), (_DWORD)result))
      result = sub_21A698FDC((uint64_t)&dword_2550EFCA0, (uint64_t)"void __BSConfiguration_CheckMonitoringStateSync(void *)", 800, (uint64_t)" \n", a5, a6, a7, a8, v9);
  }
  if (v8)
    return sub_21A6E2E9C(v8, a2, a3, a4, a5, a6, a7, a8);
  return result;
}

uint64_t sub_21A6E7068(uint64_t a1, uint64_t a2, __CFArray **a3)
{
  const __CFAllocator *v5;
  CFMutableArrayRef Mutable;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if (!a3)
    return 4294967292;
  v5 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD690]);
  *a3 = Mutable;
  if (!Mutable)
    return 4294967293;
  if (!sub_21A6AF0B4(a1, 1130911088))
    return 0;
  v12 = sub_21A693A8C(v5, *a3, (uint64_t)"%i%i%i", v7, v8, v9, v10, v11, 86400);
  if ((_DWORD)v12 && *a3)
  {
    CFRelease(*a3);
    *a3 = 0;
  }
  return v12;
}

uint64_t sub_21A6E7140(uint64_t a1, uint64_t a2, __CFArray **a3)
{
  const __CFAllocator *v4;
  CFMutableArrayRef Mutable;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int *i;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;

  if (!a3)
    return 4294967292;
  v4 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD690]);
  *a3 = Mutable;
  if (!Mutable)
    return 4294967293;
  v11 = 1;
  for (i = &dword_24DD049E8; ; i += 12)
  {
    v13 = sub_21A693A8C(v4, *a3, (uint64_t)"%i", v6, v7, v8, v9, v10, v11);
    if ((_DWORD)v13)
      break;
    v14 = *i;
    v11 = v14;
    if (!v14)
      return 0;
  }
  v15 = v13;
  if (*a3)
  {
    CFRelease(*a3);
    *a3 = 0;
  }
  return v15;
}

uint64_t sub_21A6E720C(uint64_t a1, uint64_t a2, CFMutableArrayRef *a3)
{
  const __CFAllocator *v5;
  CFMutableArrayRef Mutable;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const __CFArray *Value;
  const __CFArray *v15;
  CFIndex Count;
  CFIndex v17;
  CFIndex v18;
  const __CFDictionary *ValueAtIndex;
  const void *v20;
  CFTypeRef cf;

  cf = 0;
  if (!a3)
    return 4294967292;
  v5 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD690]);
  *a3 = Mutable;
  if (Mutable)
  {
    v12 = sub_21A6AF29C(a1, 1937329234, &cf, 0);
    if (cf)
    {
      if (!(_DWORD)v12 && CFDictionaryGetCount((CFDictionaryRef)cf) >= 1)
      {
        Value = (const __CFArray *)CFDictionaryGetValue((CFDictionaryRef)cf, CFSTR("regions"));
        if (Value)
        {
          v15 = Value;
          Count = CFArrayGetCount(Value);
          if (Count >= 1)
          {
            v17 = Count;
            v18 = 0;
            while (1)
            {
              ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v15, v18);
              v20 = CFDictionaryGetValue(ValueAtIndex, CFSTR("region"));
              if (!v20)
                break;
              CFArrayAppendValue(*a3, v20);
              v12 = 0;
              if (v17 == ++v18)
                goto LABEL_11;
            }
          }
          v12 = 0;
          goto LABEL_11;
        }
        v12 = 4294967291;
        goto LABEL_7;
      }
      v12 = sub_21A693A8C(v5, *a3, (uint64_t)"%i", v7, v8, v9, v10, v11, 0);
    }
    if ((_DWORD)v12)
    {
LABEL_7:
      if (*a3)
      {
        CFRelease(*a3);
        *a3 = 0;
      }
    }
  }
  else
  {
    v12 = 4294967293;
  }
LABEL_11:
  if (cf)
    CFRelease(cf);
  return v12;
}

uint64_t sub_21A6E7374(uint64_t a1, uint64_t a2, __CFArray **a3)
{
  const __CFAllocator *v5;
  CFMutableArrayRef Mutable;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if (!a3)
    return 4294967292;
  v5 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD690]);
  *a3 = Mutable;
  if (!Mutable)
    return 4294967293;
  if (sub_21A6AF0B4(a1, 1400468300))
  {
    v12 = sub_21A693A8C(v5, *a3, (uint64_t)"%i%i%i%i%i%i%i%i", v7, v8, v9, v10, v11, 0);
    if (!(_DWORD)v12)
      return v12;
  }
  else
  {
    v12 = 4294967274;
  }
  if (*a3)
  {
    CFRelease(*a3);
    *a3 = 0;
  }
  return v12;
}

uint64_t sub_21A6E7458(uint64_t a1, char *a2, __CFArray **a3)
{
  uint64_t v5;
  const __CFAllocator *v7;
  CFMutableArrayRef Mutable;
  _BOOL4 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  void *__p[2];
  char v18;
  unsigned __int16 v19;
  unsigned int v20;
  void *v21[2];
  char v22;
  std::string v23;

  memset(&v23, 0, sizeof(v23));
  sub_21A6CE0F0(v21, a2);
  v20 = 0;
  v19 = 0;
  v5 = sub_21A6AD02C(a1, 1937326416, &v20, 0);
  if ((_DWORD)v5)
    goto LABEL_5;
  sub_21A6CE0F0(__p, "raMd");
  sub_21A6B3A38((unsigned __int8 *)v21, (uint64_t)__p, &v23);
  if (v18 < 0)
    operator delete(__p[0]);
  v5 = sub_21A6B78C4(a1, (uint64_t)&v23, &v19, 0);
  if ((_DWORD)v5)
    goto LABEL_5;
  if (!a3)
  {
    v5 = 4294967292;
    goto LABEL_9;
  }
  v7 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD690]);
  *a3 = Mutable;
  if (Mutable)
  {
    v9 = sub_21A6AF0B4(a1, 1296257652);
    v15 = v20 < 3 || v9;
    if (v15 == 1)
    {
      if (v19 <= 0xAu)
      {
        if (((1 << v19) & 0x5B0) != 0)
        {
          v16 = sub_21A693A8C(v7, *a3, (uint64_t)"%i%i%i%i%i", v10, v11, v12, v13, v14, 6);
LABEL_31:
          v5 = v16;
          goto LABEL_5;
        }
        if (((1 << v19) & 0x46) != 0)
        {
          v16 = sub_21A693A8C(v7, *a3, (uint64_t)"%i%i%i%i", v10, v11, v12, v13, v14, 1);
          goto LABEL_31;
        }
        if (v19 == 3)
        {
          v16 = sub_21A693A8C(v7, *a3, (uint64_t)"%i%i%i%i%i%i%i%i%i", v10, v11, v12, v13, v14, 1);
          goto LABEL_31;
        }
      }
      v16 = sub_21A693A8C(v7, *a3, (uint64_t)"%i%i", v10, v11, v12, v13, v14, 1);
      goto LABEL_31;
    }
    v5 = 4294967274;
  }
  else
  {
    v5 = 4294967293;
  }
LABEL_5:
  if (a3 && (_DWORD)v5 && *a3)
  {
    CFRelease(*a3);
    *a3 = 0;
  }
LABEL_9:
  if (v22 < 0)
    operator delete(v21[0]);
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v23.__r_.__value_.__l.__data_);
  return v5;
}

void sub_21A6E76C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  uint64_t v24;

  if (a24 < 0)
    operator delete(__p);
  if (*(char *)(v24 - 57) < 0)
    operator delete(*(void **)(v24 - 80));
  if (*(char *)(v24 - 33) < 0)
    operator delete(*(void **)(v24 - 56));
  _Unwind_Resume(exception_object);
}

uint64_t sub_21A6E7714(uint64_t a1, char *a2, CFTypeRef *a3)
{
  const __CFAllocator *v6;
  __CFArray *Mutable;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if (sub_21A6AF0B4(a1, 1935819842))
  {
    if (a3)
    {
      v6 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
      Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD690]);
      *a3 = Mutable;
      if (Mutable)
      {
        v13 = sub_21A693A8C(v6, Mutable, (uint64_t)"%i%i%i", v8, v9, v10, v11, v12, 1000);
        if ((_DWORD)v13 && *a3)
        {
          CFRelease(*a3);
          *a3 = 0;
        }
      }
      else
      {
        return 4294967293;
      }
    }
    else
    {
      return 4294967292;
    }
  }
  else
  {
    sub_21A6E7458(a1, a2, (__CFArray **)a3);
    return 0;
  }
  return v13;
}

uint64_t sub_21A6E77F4(uint64_t a1, char *a2, CFArrayRef *a3, int a4)
{
  int v7;
  _BOOL4 v8;
  _BOOL4 v9;
  const __CFArray *v10;
  const __CFArray *v11;
  const __CFArray *v12;
  CFArrayRef *v13;
  uint64_t v14;
  int v15;
  _BOOL4 v16;
  const __CFAllocator *v17;
  CFMutableArrayRef Mutable;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  void *v26;
  void **v27;
  void **v28;
  void **v29;
  _QWORD *v30;
  void **v31;
  BOOL v33;
  uint64_t v34;
  char v35;
  char v36;
  int64_t size;
  std::string *v38;
  _BYTE *v39;
  std::string *v40;
  _BYTE *v41;
  std::string::size_type v42;
  int v43;
  int v44;
  __CFArray *v45;
  uint64_t v46;
  __CFArray *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _BOOL4 v63;
  uint64_t v65;
  uint64_t v66;
  int v67;
  void *v68;
  void **v69;
  void **v70;
  void **v71;
  _QWORD *v72;
  void **v73;
  unsigned int v75;
  uint64_t v76;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  __CFArray *v84;
  CFArrayRef *v85;
  CFArrayRef *v86;
  const __CFArray *v87;
  int v88;
  int v89;
  _BOOL4 v91;
  uint64_t v92;
  _BOOL4 v93;
  _BOOL4 v94;
  _BOOL4 v95;
  _BOOL4 v96;
  void *__p[2];
  uint64_t v98;
  int v99;
  char v100;
  __int128 v101;
  uint64_t v102;
  std::string v103;
  char __str[16];
  uint64_t v105;

  v105 = *MEMORY[0x24BDAC8D0];
  memset(&v103, 0, sizeof(v103));
  sub_21A6CE0F0(&v101, a2);
  v7 = sub_21A6AF0B4(a1, 2003390540);
  v95 = sub_21A6AF0B4(a1, 942682734);
  v96 = sub_21A6AF0B4(a1, 825319779);
  v94 = sub_21A6AF0B4(a1, 1852782669);
  v8 = sub_21A6AF0B4(a1, 1935819842);
  v100 = 0;
  if (v7)
  {
    v9 = v8;
    v91 = sub_21A6BAD44(a1, CFSTR("80211n_2_4GHz"));
    LODWORD(v92) = sub_21A6BAD44(a1, CFSTR("80211n_5GHz"));
    v10 = (const __CFArray *)sub_21A6BAD88(a1, CFSTR("5GHz_channels"));
    v11 = v10;
    if (v10)
      HIDWORD(v92) = CFArrayGetCount(v10) > 0;
    else
      HIDWORD(v92) = 0;
    v8 = v9;
  }
  else
  {
    v92 = 0;
    v11 = 0;
    v91 = 1;
  }
  v93 = v8;
  if (v8)
  {
    v99 = 0;
    v88 = v7;
    v89 = a4;
    v12 = v11;
    v13 = a3;
    if (SHIBYTE(v102) < 0)
    {
      sub_21A6CDFB4(__p, (void *)v101, *((unint64_t *)&v101 + 1));
    }
    else
    {
      *(_OWORD *)__p = v101;
      v98 = v102;
    }
    v24 = HIBYTE(v98);
    v25 = SHIBYTE(v98);
    v26 = __p[0];
    if (v98 >= 0)
    {
      v27 = __p;
    }
    else
    {
      v24 = (uint64_t)__p[1];
      v27 = (void **)__p[0];
    }
    v28 = (void **)((char *)v27 + v24);
    if (v24 >= 16)
    {
      v29 = v27;
      do
      {
        v30 = memchr(v29, 87, v24 - 15);
        if (!v30)
          break;
        v31 = (void **)v30;
        if (*v30 == 0x6461722E69466957 && v30[1] == 0x2E5D2A5B2E736F69)
          goto LABEL_30;
        v29 = (void **)((char *)v30 + 1);
        v24 = (char *)v28 - ((char *)v31 + 1);
      }
      while (v24 > 15);
    }
    v31 = v28;
LABEL_30:
    if (v25 < 0)
      operator delete(v26);
    if (v31 != v28 && v31 == v27)
    {
      a3 = v13;
      v11 = v12;
      if (sub_21A6B262C(a1, 0) == 2)
      {
        v86 = v13;
        v33 = 0;
        v34 = 0;
        v35 = 1;
        while (1)
        {
          v36 = v35;
          MEMORY[0x220747320](&v103, "WiFi.radios.[*].");
          snprintf(__str, 0x10uLL, "%ld", v34);
          if ((v103.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            size = HIBYTE(v103.__r_.__value_.__r.__words[2]);
          else
            size = v103.__r_.__value_.__l.__size_;
          if ((v103.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v38 = &v103;
          else
            v38 = (std::string *)v103.__r_.__value_.__r.__words[0];
          v39 = (char *)v38 + size;
          if (size >= 1)
          {
            v40 = v38;
            do
            {
              v41 = memchr(v40, 42, size);
              if (!v41)
                break;
              if (*v41 == 42)
                goto LABEL_48;
              v40 = (std::string *)(v41 + 1);
              size = v39 - (_BYTE *)v40;
            }
            while (v39 - (_BYTE *)v40 > 0);
          }
          v41 = v39;
LABEL_48:
          if (v41 == v39)
            v42 = -1;
          else
            v42 = v41 - (_BYTE *)v38;
          std::string::replace(&v103, v42, 1uLL, __str);
          sub_21A6CE0F0(__p, "phymodes");
          sub_21A6B3A38((unsigned __int8 *)&v103, (uint64_t)__p, &v103);
          if (SHIBYTE(v98) < 0)
            operator delete(__p[0]);
          v14 = sub_21A6B77DC(a1, (uint64_t)&v103, &v99, 0);
          if ((_DWORD)v14)
            break;
          if ((v99 & 0xE) != 0)
          {
            v14 = sub_21A6BC380(a1, &v100, 0, 0);
            if ((_DWORD)v14)
              break;
            v43 = 1;
          }
          else
          {
            v43 = 0;
            v33 = (v99 & 0x70) != 0;
          }
          v35 = 0;
          v34 = 1;
          if ((v36 & 1) == 0)
          {
            a3 = v86;
            v11 = v12;
            a4 = v89;
            goto LABEL_108;
          }
        }
        a3 = v86;
        v11 = v12;
      }
      else
      {
        v14 = 4294967292;
      }
      goto LABEL_135;
    }
    sub_21A6CE0F0(__p, "phymodes");
    a4 = v89;
    a3 = v13;
    v11 = v12;
    sub_21A6B3A38((unsigned __int8 *)&v101, (uint64_t)__p, &v103);
    if (SHIBYTE(v98) < 0)
      operator delete(__p[0]);
    v14 = sub_21A6B77DC(a1, (uint64_t)&v103, &v99, 0);
    if ((_DWORD)v14)
      goto LABEL_135;
    if ((v99 & 0xE) != 0)
    {
      v14 = sub_21A6BC380(a1, &v100, 0, 0);
      if ((_DWORD)v14)
        goto LABEL_135;
      v33 = 0;
      v43 = 1;
    }
    else
    {
      v43 = 0;
      v33 = (v99 & 0x70) != 0;
    }
LABEL_108:
    v15 = v33;
    v16 = v43 != 0;
    v7 = v88;
    if (!a3)
      goto LABEL_109;
  }
  else
  {
    v14 = sub_21A6BC380(a1, &v100, 0, 0);
    if ((_DWORD)v14)
      goto LABEL_135;
    v15 = v95 || v96;
    v16 = 1;
    if (!a3)
    {
LABEL_109:
      v14 = 4294967292;
      goto LABEL_139;
    }
  }
  v17 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD690]);
  *a3 = Mutable;
  if (!Mutable)
  {
    v14 = 4294967293;
    goto LABEL_135;
  }
  if (v94)
  {
    if (v96)
    {
      v85 = a3;
      v87 = v11;
      if (SHIBYTE(v102) < 0)
      {
        sub_21A6CDFB4(__p, (void *)v101, *((unint64_t *)&v101 + 1));
      }
      else
      {
        *(_OWORD *)__p = v101;
        v98 = v102;
      }
      v66 = HIBYTE(v98);
      v67 = SHIBYTE(v98);
      v68 = __p[0];
      if (v98 >= 0)
      {
        v69 = __p;
      }
      else
      {
        v66 = (uint64_t)__p[1];
        v69 = (void **)__p[0];
      }
      v70 = (void **)((char *)v69 + v66);
      if (v66 >= 16)
      {
        v71 = v69;
        do
        {
          v72 = memchr(v71, 87, v66 - 15);
          if (!v72)
            break;
          v73 = (void **)v72;
          if (*v72 == 0x6461722E69466957 && v72[1] == 0x2E5D2A5B2E736F69)
            goto LABEL_123;
          v71 = (void **)((char *)v72 + 1);
          v66 = (char *)v70 - ((char *)v73 + 1);
        }
        while (v66 > 15);
      }
      v73 = v70;
LABEL_123:
      if (v67 < 0)
        operator delete(v68);
      if (v15)
        v75 = 10;
      else
        v75 = 6;
      if (v73 != v70 && v73 == v69)
        v65 = 655366;
      else
        v65 = v75;
      if (!((v73 != v70 && v73 == v69) | (v15 | v16) & 1))
      {
        v14 = 0;
        v11 = v87;
        goto LABEL_139;
      }
      a3 = v85;
      v11 = v87;
      goto LABEL_133;
    }
    goto LABEL_154;
  }
  if (v93 && sub_21A6BB08C(a2) == 1651718221)
  {
    v44 = v92 & HIDWORD(v92);
    if (v91)
    {
      v45 = *a3;
      if (v44)
      {
        if (!v96)
        {
          v46 = 327686;
          goto LABEL_157;
        }
        v14 = sub_21A693A8C(v17, v45, (uint64_t)"%i%i%i%i%i%i", v19, v20, v21, v22, v23, 655366);
        if (!(_DWORD)v14)
        {
          if (!a4)
          {
LABEL_158:
            v14 = 0;
            if (!CFArrayGetCount(*a3) || !a4)
              goto LABEL_139;
            v84 = *a3;
            if (v100)
              v76 = sub_21A693A8C(v17, v84, (uint64_t)"%i%i%i%i%i%i%i%i%i%i%i", v79, v80, v81, v82, v83, 8888);
            else
              v76 = sub_21A693A8C(v17, v84, (uint64_t)"%i%i%i%i%i%i%i%i%i%i%i%i%i%i", v79, v80, v81, v82, v83, 8888);
            goto LABEL_134;
          }
          v45 = *a3;
          v46 = 8888;
LABEL_157:
          v14 = sub_21A693A8C(v17, v45, (uint64_t)"%i%i%i%i", v19, v20, v21, v22, v23, v46);
          if ((_DWORD)v14)
            goto LABEL_135;
          goto LABEL_158;
        }
        goto LABEL_135;
      }
      v14 = sub_21A693A8C(v17, v45, (uint64_t)"%i", v19, v20, v21, v22, v23, 6);
      if ((_DWORD)v14)
        goto LABEL_135;
      if (!v100)
      {
        v14 = sub_21A693A8C(v17, *a3, (uint64_t)"%i", v19, v20, v21, v22, v23, 7);
        if ((_DWORD)v14)
          goto LABEL_135;
      }
      if ((a4 & 1) == 0)
        goto LABEL_154;
      v78 = 1;
    }
    else
    {
      if (!v44)
      {
        v14 = 4294967274;
        goto LABEL_135;
      }
      v78 = 8;
    }
    v76 = sub_21A693A8C(v17, *a3, (uint64_t)"%i%i%i", v19, v20, v21, v22, v23, v78);
    goto LABEL_134;
  }
  if (v95)
  {
    v47 = *a3;
    if (v91 && v16)
    {
      v14 = sub_21A693A8C(v17, v47, (uint64_t)"%i", v19, v20, v21, v22, v23, 6);
      if ((_DWORD)v14)
        goto LABEL_135;
      v47 = *a3;
      if (!v100)
      {
        v14 = sub_21A693A8C(v17, v47, (uint64_t)"%i", v48, v49, v50, v51, v52, 7);
        if ((_DWORD)v14)
          goto LABEL_135;
        v47 = *a3;
      }
    }
    if (((HIDWORD(v92) & v92 | ~v7) & v15) == 1 && !v100)
    {
      if (CFArrayGetCount(v47) >= 1)
      {
        v14 = sub_21A693A8C(v17, *a3, (uint64_t)"%i", v53, v54, v55, v56, v57, 8888);
        if ((_DWORD)v14)
          goto LABEL_135;
      }
      v14 = sub_21A693A8C(v17, *a3, (uint64_t)"%i%i", v53, v54, v55, v56, v57, 5);
      if ((_DWORD)v14)
        goto LABEL_135;
      v47 = *a3;
    }
    if (CFArrayGetCount(v47))
    {
      if (a4)
      {
        v14 = sub_21A693A8C(v17, *a3, (uint64_t)"%i", v19, v20, v21, v22, v23, 8888);
        if ((_DWORD)v14)
          goto LABEL_135;
      }
    }
  }
  if (!v96
    || ((HIDWORD(v92) & v92 | ~v7) & v15) != 1
    || v100
    || (v14 = sub_21A693A8C(v17, *a3, (uint64_t)"%i", v19, v20, v21, v22, v23, 10), !(_DWORD)v14))
  {
    if (v95 && CFArrayGetCount(*a3) && !a4)
      goto LABEL_154;
    if (!v16
      || (v14 = sub_21A693A8C(v17, *a3, (uint64_t)"%i", v19, v20, v21, v22, v23, 1), !(_DWORD)v14)
      && (!sub_21A6AF0B4(a1, 1382108499)
       || (v14 = sub_21A693A8C(v17, *a3, (uint64_t)"%i%i", v58, v59, v60, v61, v62, 2), !(_DWORD)v14)))
    {
      if ((v15 & (HIDWORD(v92) | v7 ^ 1)) == 1)
      {
        v63 = sub_21A6AF0B4(a1, 942682721);
        if (!v100 && v63)
        {
          v65 = 4;
LABEL_133:
          v76 = sub_21A693A8C(v17, *a3, (uint64_t)"%i", v19, v20, v21, v22, v23, v65);
LABEL_134:
          v14 = v76;
          goto LABEL_135;
        }
      }
LABEL_154:
      v14 = 0;
      goto LABEL_139;
    }
  }
LABEL_135:
  if (a3 && (_DWORD)v14 && *a3)
  {
    CFRelease(*a3);
    *a3 = 0;
  }
LABEL_139:
  if (v11)
    CFRelease(v11);
  if (SHIBYTE(v102) < 0)
    operator delete((void *)v101);
  if (SHIBYTE(v103.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v103.__r_.__value_.__l.__data_);
  return v14;
}

void sub_21A6E8328(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  uint64_t v36;

  if (*(char *)(v36 - 137) < 0)
    operator delete(*(void **)(v36 - 160));
  if (*(char *)(v36 - 113) < 0)
    operator delete(*(void **)(v36 - 136));
  _Unwind_Resume(exception_object);
}

uint64_t sub_21A6E83A8(uint64_t a1, uint64_t a2, CFTypeRef *a3)
{
  const __CFAllocator *v5;
  CFMutableArrayRef Mutable;
  _BOOL4 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __CFArray *v13;
  uint64_t v14;
  uint64_t v15;

  if (!a3)
    return 4294967292;
  v5 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD690]);
  *a3 = Mutable;
  if (!Mutable)
    return 4294967293;
  v7 = sub_21A6AF0B4(a1, 1417171063);
  v13 = (__CFArray *)*a3;
  if (v7)
    v14 = sub_21A693A8C(v5, v13, (uint64_t)"%i%i%i%i", v8, v9, v10, v11, v12, 10);
  else
    v14 = sub_21A693A8C(v5, v13, (uint64_t)"%i", v8, v9, v10, v11, v12, 100);
  v15 = v14;
  if ((_DWORD)v14 && *a3)
  {
    CFRelease(*a3);
    *a3 = 0;
  }
  return v15;
}

uint64_t sub_21A6E8480(uint64_t a1, uint64_t a2, __CFArray **a3)
{
  const __CFAllocator *v5;
  __CFArray *Mutable;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  if (!a3)
    return 4294967292;
  v5 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD690]);
  *a3 = Mutable;
  if (!Mutable)
    return 4294967293;
  v12 = sub_21A693A8C(v5, Mutable, (uint64_t)"%i", v7, v8, v9, v10, v11, 0);
  if (!(_DWORD)v12)
  {
    if (!sub_21A6AF0B4(a1, 1112757313)
      || (v12 = sub_21A693A8C(v5, *a3, (uint64_t)"%i", v14, v15, v16, v17, v18, 1), !(_DWORD)v12))
    {
      if (!sub_21A6AF0B4(a1, 1147761495))
        return 0;
      v12 = sub_21A693A8C(v5, *a3, (uint64_t)"%i", v19, v20, v21, v22, v23, 3);
      if (!(_DWORD)v12)
        return v12;
    }
  }
  if (*a3)
  {
    CFRelease(*a3);
    *a3 = 0;
  }
  return v12;
}

uint64_t sub_21A6E859C(uint64_t a1, uint64_t a2, __CFArray **a3, int a4)
{
  const __CFAllocator *v6;
  __CFArray *Mutable;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;

  if (!a3)
    return 4294967292;
  v6 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD690]);
  *a3 = Mutable;
  if (!Mutable)
    return 4294967293;
  v18 = sub_21A693A8C(v6, Mutable, (uint64_t)"%i%i", v8, v9, v10, v11, v12, 768);
  if ((_DWORD)v18)
    v19 = 1;
  else
    v19 = a4 == 0;
  if (!v19)
    v18 = sub_21A693A8C(v6, *a3, (uint64_t)"%i", v13, v14, v15, v16, v17, 2304);
  if ((_DWORD)v18 && *a3)
  {
    CFRelease(*a3);
    *a3 = 0;
  }
  return v18;
}

uint64_t sub_21A6E8670(uint64_t a1, char *a2, __CFArray **a3)
{
  const __CFAllocator *v5;
  CFMutableArrayRef Mutable;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *__p[2];
  char v20;
  std::string v21;
  int v22;

  v22 = 0;
  memset(&v21, 0, sizeof(v21));
  sub_21A6CE0F0(__p, a2);
  if (!a3)
  {
    v12 = 4294967292;
    goto LABEL_9;
  }
  v5 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD690]);
  *a3 = Mutable;
  if (!Mutable)
  {
    v12 = 4294967293;
    goto LABEL_9;
  }
  sub_21A6B2D64((unsigned __int8 *)__p, 1752641585, &v21);
  v12 = sub_21A6B77DC(a1, (uint64_t)&v21, &v22, 0);
  if ((_DWORD)v12)
    goto LABEL_20;
  v12 = sub_21A693A8C(v5, *a3, (uint64_t)"%i", v7, v8, v9, v10, v11, 16);
  if ((_DWORD)v12)
    goto LABEL_20;
  if ((v22 & 1) != 0)
  {
    v12 = 0;
    goto LABEL_9;
  }
  v12 = sub_21A693A8C(v5, *a3, (uint64_t)"%i", v13, v14, v15, v16, v17, 4);
  if ((_DWORD)v12)
  {
LABEL_20:
    if (*a3)
    {
      CFRelease(*a3);
      *a3 = 0;
    }
  }
LABEL_9:
  if (v20 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
  return v12;
}

void sub_21A6E87B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_21A6E87E4(uint64_t a1, uint64_t a2, __CFArray **a3)
{
  const __CFAllocator *v5;
  __CFArray *Mutable;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  if (!sub_21A6AF0B4(a1, 1396995415))
    return 0;
  if (!a3)
    return 4294967292;
  v5 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD690]);
  *a3 = Mutable;
  if (!Mutable)
    return 4294967293;
  v12 = sub_21A693A8C(v5, Mutable, (uint64_t)"%i%i%i%i%i", v7, v8, v9, v10, v11, 0);
  if (!(_DWORD)v12)
  {
    if (!sub_21A6AF0B4(a1, 1734960965)
      || (v12 = sub_21A693A8C(v5, *a3, (uint64_t)"%i", v13, v14, v15, v16, v17, 9), !(_DWORD)v12))
    {
      sub_21A6AF0B4(a1, 1953392453);
      if (sub_21A6AF0B4(a1, 1147761477))
      {
        v12 = sub_21A693A8C(v5, *a3, (uint64_t)"%i", v18, v19, v20, v21, v22, 15);
        if (!(_DWORD)v12)
          return v12;
        goto LABEL_5;
      }
      return 0;
    }
  }
LABEL_5:
  if (*a3)
  {
    CFRelease(*a3);
    *a3 = 0;
  }
  return v12;
}

uint64_t sub_21A6E8938(uint64_t a1, uint64_t a2, __CFArray **a3)
{
  const __CFAllocator *v5;
  __CFArray *Mutable;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  if (!sub_21A6AF0B4(a1, 1768961614))
    return 0;
  if (!a3)
    return 4294967292;
  v5 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD690]);
  *a3 = Mutable;
  if (!Mutable)
    return 4294967293;
  v12 = sub_21A693A8C(v5, Mutable, (uint64_t)"%i%i%i", v7, v8, v9, v10, v11, 0);
  if (!(_DWORD)v12)
  {
    if (!sub_21A6AF0B4(a1, 1768961607)
      || (v12 = sub_21A693A8C(v5, *a3, (uint64_t)"%i", v13, v14, v15, v16, v17, 3), !(_DWORD)v12))
    {
      if (sub_21A6AF0B4(a1, 1765166674))
      {
        v12 = sub_21A693A8C(v5, *a3, (uint64_t)"%i", v18, v19, v20, v21, v22, 5);
        if (!(_DWORD)v12)
          return v12;
        goto LABEL_5;
      }
      return 0;
    }
  }
LABEL_5:
  if (*a3)
  {
    CFRelease(*a3);
    *a3 = 0;
  }
  return v12;
}

uint64_t sub_21A6E8A74(uint64_t a1, uint64_t a2, CFTypeRef *a3)
{
  const __CFAllocator *v4;
  __CFArray *Mutable;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (!a3)
    return 4294967292;
  v4 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD690]);
  *a3 = Mutable;
  if (!Mutable)
    return 4294967293;
  v11 = sub_21A693A8C(v4, Mutable, (uint64_t)"%i%i%i%i%i%i%i%i%i%i", v6, v7, v8, v9, v10, 30);
  if ((_DWORD)v11 && *a3)
  {
    CFRelease(*a3);
    *a3 = 0;
  }
  return v11;
}

uint64_t sub_21A6E8B3C(uint64_t a1, uint64_t a2, __CFArray **a3)
{
  int v4;
  const __CFAllocator *v5;
  __CFArray *Mutable;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  if (!a3)
    return 4294967292;
  v4 = *(_DWORD *)(a1 + 260);
  v5 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 37, MEMORY[0x24BDBD690]);
  *a3 = Mutable;
  if (Mutable)
    v12 = v4 == 1;
  else
    v12 = 1;
  if (v12 || v4 == 4)
  {
    if (Mutable)
      return 0;
    v14 = 4294967293;
  }
  else
  {
    v15 = sub_21A693A8C(v5, Mutable, (uint64_t)"%i", v7, v8, v9, v10, v11, 37);
    v14 = v15;
    if (!(_DWORD)v15)
    {
      v21 = 1;
      while (1)
      {
        v22 = sub_21A693A8C(v5, *a3, (uint64_t)"%i", v16, v17, v18, v19, v20, v21);
        if ((_DWORD)v22)
          break;
        v21 = (v21 + 1);
        if ((_DWORD)v21 == 37)
          return 0;
      }
      v14 = v22;
    }
  }
  if (*a3)
  {
    CFRelease(*a3);
    *a3 = 0;
  }
  return v14;
}

uint64_t sub_21A6E8C34(uint64_t a1, char *a2, __CFArray **a3)
{
  const __CFAllocator *v5;
  CFMutableArrayRef Mutable;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *__p[2];
  char v15;
  std::string v16;
  int v17;

  v17 = 0;
  memset(&v16, 0, sizeof(v16));
  sub_21A6CE0F0(__p, a2);
  if (!a3)
  {
    v12 = 4294967292;
    goto LABEL_12;
  }
  v5 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD690]);
  *a3 = Mutable;
  if (!Mutable)
  {
    v12 = 4294967293;
    goto LABEL_12;
  }
  sub_21A6B2D64((unsigned __int8 *)__p, 1752641585, &v16);
  v12 = sub_21A6B77DC(a1, (uint64_t)&v16, &v17, 0);
  if ((_DWORD)v12)
    goto LABEL_19;
  if ((v17 & 1) != 0)
  {
    v12 = 0;
    goto LABEL_12;
  }
  v12 = sub_21A693A8C(v5, *a3, (uint64_t)"%i%i", v7, v8, v9, v10, v11, 1);
  if ((_DWORD)v12)
  {
LABEL_19:
    if (*a3)
    {
      CFRelease(*a3);
      *a3 = 0;
    }
  }
LABEL_12:
  if (v15 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v16.__r_.__value_.__l.__data_);
  return v12;
}

void sub_21A6E8D54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_21A6E8D88(uint64_t a1, char *a2, __CFArray **a3)
{
  const __CFAllocator *v5;
  CFMutableArrayRef Mutable;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *__p[2];
  char v15;
  std::string v16;
  int v17;

  v17 = 0;
  memset(&v16, 0, sizeof(v16));
  sub_21A6CE0F0(__p, a2);
  if (!a3)
  {
    v12 = 4294967292;
    goto LABEL_12;
  }
  v5 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD690]);
  *a3 = Mutable;
  if (!Mutable)
  {
    v12 = 4294967293;
    goto LABEL_12;
  }
  sub_21A6B2D64((unsigned __int8 *)__p, 1752641585, &v16);
  v12 = sub_21A6B77DC(a1, (uint64_t)&v16, &v17, 0);
  if ((_DWORD)v12)
    goto LABEL_19;
  if ((v17 & 1) != 0)
  {
    v12 = 0;
    goto LABEL_12;
  }
  v12 = sub_21A693A8C(v5, *a3, (uint64_t)"%i%i", v7, v8, v9, v10, v11, 1);
  if ((_DWORD)v12)
  {
LABEL_19:
    if (*a3)
    {
      CFRelease(*a3);
      *a3 = 0;
    }
  }
LABEL_12:
  if (v15 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v16.__r_.__value_.__l.__data_);
  return v12;
}

void sub_21A6E8EA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_21A6E8EDC(uint64_t a1, uint64_t a2, CFTypeRef *a3)
{
  const __CFAllocator *v4;
  __CFArray *Mutable;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (!a3)
    return 4294967292;
  v4 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD690]);
  *a3 = Mutable;
  if (!Mutable)
    return 4294967293;
  v11 = sub_21A693A8C(v4, Mutable, (uint64_t)"%i%i", v6, v7, v8, v9, v10, 1645);
  if ((_DWORD)v11 && *a3)
  {
    CFRelease(*a3);
    *a3 = 0;
  }
  return v11;
}

uint64_t sub_21A6E8F78(uint64_t a1, uint64_t a2, __CFArray **a3)
{
  const __CFAllocator *v5;
  CFMutableArrayRef Mutable;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if (!a3)
    return 4294967292;
  v5 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD690]);
  *a3 = Mutable;
  if (!Mutable)
    return 4294967293;
  if (!sub_21A6AF0B4(a1, 1279607875))
    return 0;
  v12 = sub_21A693A8C(v5, *a3, (uint64_t)"%i%i", v7, v8, v9, v10, v11, 1);
  if ((_DWORD)v12 && *a3)
  {
    CFRelease(*a3);
    *a3 = 0;
  }
  return v12;
}

uint64_t sub_21A6E903C(uint64_t a1, uint64_t a2, CFTypeRef *a3)
{
  const __CFAllocator *v4;
  __CFArray *Mutable;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (!a3)
    return 4294967292;
  v4 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD690]);
  *a3 = Mutable;
  if (!Mutable)
    return 4294967293;
  v11 = sub_21A693A8C(v4, Mutable, (uint64_t)"%i%i%i%i%i%i%i%i%i", v6, v7, v8, v9, v10, 3600);
  if ((_DWORD)v11 && *a3)
  {
    CFRelease(*a3);
    *a3 = 0;
  }
  return v11;
}

uint64_t sub_21A6E9114(uint64_t a1, uint64_t a2, CFTypeRef *a3)
{
  const __CFAllocator *v4;
  __CFArray *Mutable;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (!a3)
    return 4294967292;
  v4 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD690]);
  *a3 = Mutable;
  if (!Mutable)
    return 4294967293;
  v11 = sub_21A693A8C(v4, Mutable, (uint64_t)"%i%i", v6, v7, v8, v9, v10, 1);
  if ((_DWORD)v11 && *a3)
  {
    CFRelease(*a3);
    *a3 = 0;
  }
  return v11;
}

uint64_t sub_21A6E91B0(uint64_t a1, uint64_t a2, __CFArray **a3)
{
  const __CFAllocator *v5;
  CFMutableArrayRef Mutable;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if (!a3)
    return 4294967292;
  v5 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD690]);
  *a3 = Mutable;
  if (!Mutable)
    return 4294967293;
  if (!sub_21A6AF0B4(a1, 1314148397))
    return 0;
  v12 = sub_21A693A8C(v5, *a3, (uint64_t)"%i%i%i", v7, v8, v9, v10, v11, 1);
  if ((_DWORD)v12 && *a3)
  {
    CFRelease(*a3);
    *a3 = 0;
  }
  return v12;
}

uint64_t sub_21A6E927C(uint64_t a1, char *a2, __CFArray **a3, int a4)
{
  _BOOL4 v8;
  _BOOL4 v9;
  BOOL v10;
  uint64_t v11;
  unsigned int v12;
  int v13;
  uint64_t v14;
  BOOL v15;
  int v17;
  __CFArray *Mutable;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  _BOOL4 v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  int v78;
  _BOOL4 v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  int v86;
  int v87;
  const __CFAllocator *v88;
  BOOL v89;
  void *__p[2];
  char v91;
  unsigned int v92;
  void *v93[2];
  char v94;
  std::string v95;
  int v96;
  uint64_t v97;

  v8 = sub_21A6AF0B4(a1, 1164858228);
  v9 = sub_21A6AF0B4(a1, 1852787795);
  v10 = sub_21A6AF0B4(a1, 1852788045);
  v97 = 0;
  v96 = 0;
  memset(&v95, 0, sizeof(v95));
  sub_21A6CE0F0(v93, a2);
  v92 = 0;
  v11 = sub_21A6AD02C(a1, 1937326416, &v92, 0);
  if ((_DWORD)v11)
    goto LABEL_24;
  v12 = v92;
  sub_21A6B2D64((unsigned __int8 *)v93, 1651718221, &v95);
  v11 = sub_21A6B77DC(a1, (uint64_t)&v95, (char *)&v97 + 4, 0);
  if ((_DWORD)v11)
    goto LABEL_24;
  sub_21A6CE0F0(__p, "raSt");
  sub_21A6B3A38((unsigned __int8 *)v93, (uint64_t)__p, &v95);
  if (v91 < 0)
    operator delete(__p[0]);
  v11 = sub_21A6B77DC(a1, (uint64_t)&v95, &v97, 0);
  if ((_DWORD)v11)
    goto LABEL_24;
  v13 = v97;
  if (sub_21A6AF0B4(a1, 1146569811))
  {
    v89 = 0;
    sub_21A6CE0F0(__p, "dWDS");
    sub_21A6B3A38((unsigned __int8 *)v93, (uint64_t)__p, &v95);
    if (v91 < 0)
      operator delete(__p[0]);
    v14 = sub_21A6B79E0(a1, (uint64_t)&v95, &v89, 0);
    v11 = v14;
    if ((_DWORD)v14)
      v15 = 1;
    else
      v15 = !v89;
    v17 = !v15 && v13 == 1;
    if ((_DWORD)v14)
      goto LABEL_24;
  }
  else
  {
    v17 = 0;
  }
  sub_21A6CE0F0(__p, "wdFl");
  sub_21A6B3A38((unsigned __int8 *)v93, (uint64_t)__p, &v95);
  if (v91 < 0)
    operator delete(__p[0]);
  v11 = sub_21A6B77DC(a1, (uint64_t)&v95, &v96, 0);
  if (!(_DWORD)v11)
  {
    if (!a3)
    {
      v11 = 4294967292;
      goto LABEL_28;
    }
    v87 = v96;
    v88 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
    Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD690]);
    *a3 = Mutable;
    if (!Mutable)
    {
      v11 = 4294967293;
      goto LABEL_24;
    }
    if (SHIDWORD(v97) > 0x80000)
    {
      if (SHIDWORD(v97) > 655360)
      {
        if ((HIDWORD(v97) - 655361) > 6 || ((1 << (BYTE4(v97) - 1)) & 0x67) == 0)
          goto LABEL_95;
      }
      else if ((HIDWORD(v97) - 524289) >= 3 && HIDWORD(v97) != 524294)
      {
        if (HIDWORD(v97) != 524295)
          goto LABEL_95;
        goto LABEL_50;
      }
    }
    else
    {
      if (HIDWORD(v97) <= 0xA)
      {
        if (((1 << SBYTE4(v97)) & 0x660) != 0)
          goto LABEL_62;
        if (((1 << SBYTE4(v97)) & 0x180) != 0)
        {
LABEL_50:
          v11 = sub_21A693A8C(v88, Mutable, (uint64_t)"%i%i", v20, v21, v22, v23, v24, 1);
          if (v11 | v87)
            v30 = 1;
          else
            v30 = v17;
          v31 = v13 != 1 || v8;
          if (v30 == 1 || (v31 & 1) == 0)
            goto LABEL_24;
          goto LABEL_58;
        }
      }
      if (((HIDWORD(v97) - 327681) > 6 || ((1 << (BYTE4(v97) - 1)) & 0x67) == 0)
        && (HIDWORD(v97) - 262150) >= 2)
      {
LABEL_95:
        v11 = sub_21A693A8C(v88, Mutable, (uint64_t)"%i", v20, v21, v22, v23, v24, 1);
        if ((_DWORD)v11)
          goto LABEL_24;
        v57 = v12 < 0x6C ? 1 : a4;
        if ((v9 | v17) != 1)
        {
          if (v57)
          {
            v11 = sub_21A693A8C(v88, *a3, (uint64_t)"%i%i%i", v52, v53, v54, v55, v56, 8888);
            if ((_DWORD)v11)
              goto LABEL_24;
            if (sub_21A6AF0B4(a1, 1414745645) && v13 != 1)
            {
              v11 = sub_21A693A8C(v88, *a3, (uint64_t)"%i", v58, v59, v60, v61, v62, 8);
              if ((_DWORD)v11)
                goto LABEL_24;
            }
          }
        }
        if (!sub_21A6AF0B4(a1, 1095062317))
        {
          if (v9 || !sub_21A6AF0B4(a1, 1464877357))
          {
            v11 = 0;
            goto LABEL_28;
          }
          v85 = sub_21A693A8C(v88, *a3, (uint64_t)"%i", v80, v81, v82, v83, v84, 4);
          v11 = v85;
          v86 = v13 != 1 || v8;
          if ((_DWORD)v85 || !v86)
            goto LABEL_24;
          v32 = 9;
LABEL_59:
          v11 = sub_21A693A8C(v88, *a3, (uint64_t)"%i", v25, v26, v27, v28, v29, v32);
          goto LABEL_24;
        }
        v11 = sub_21A693A8C(v88, *a3, (uint64_t)"%i", v63, v64, v65, v66, v67, 8888);
        if ((_DWORD)v11)
          goto LABEL_24;
        if (((v9 | a4 ^ 1) & 1) == 0)
        {
          v11 = sub_21A693A8C(v88, *a3, (uint64_t)"%i", v68, v69, v70, v71, v72, 6);
          if ((_DWORD)v11)
            goto LABEL_24;
        }
        if (!v10)
        {
          v11 = sub_21A693A8C(v88, *a3, (uint64_t)"%i", v68, v69, v70, v71, v72, 5);
          if ((_DWORD)v11)
            goto LABEL_24;
        }
        v11 = sub_21A693A8C(v88, *a3, (uint64_t)"%i", v68, v69, v70, v71, v72, 7);
        v78 = v11 | v87 ? 1 : v17;
        v79 = v13 != 1 || v8;
        if (v78 == 1)
          goto LABEL_24;
        if (!v79)
          goto LABEL_24;
        v11 = sub_21A693A8C(v88, *a3, (uint64_t)"%i", v73, v74, v75, v76, v77, 8888);
        if ((_DWORD)v11)
          goto LABEL_24;
        if (((v9 | a4 ^ 1) & 1) == 0)
        {
          v11 = sub_21A693A8C(v88, *a3, (uint64_t)"%i", v25, v26, v27, v28, v29, 11);
          if ((_DWORD)v11)
            goto LABEL_24;
        }
        if (v10)
        {
LABEL_58:
          v32 = 12;
          goto LABEL_59;
        }
LABEL_87:
        v11 = sub_21A693A8C(v88, *a3, (uint64_t)"%i", v25, v26, v27, v28, v29, 10);
        if ((_DWORD)v11)
          goto LABEL_24;
        goto LABEL_58;
      }
    }
LABEL_62:
    v11 = sub_21A693A8C(v88, Mutable, (uint64_t)"%i", v20, v21, v22, v23, v24, 1);
    if ((_DWORD)v11)
      goto LABEL_24;
    v38 = v12 < 0x6C ? 1 : a4;
    if (!v9 && v38)
    {
      v39 = v13 == 1 ? v17 : 1;
      if ((v39 & 1) == 0)
      {
        v11 = sub_21A693A8C(v88, *a3, (uint64_t)"%i%i%i", v33, v34, v35, v36, v37, 8888);
        if ((_DWORD)v11)
          goto LABEL_24;
      }
      if (((!sub_21A6AF0B4(a1, 1414745645) | v17) & 1) == 0 && (v13 != 1 || sub_21A6AF0B4(a1, 1735546692)))
      {
        if (v39)
        {
          v11 = sub_21A693A8C(v88, *a3, (uint64_t)"%i", v33, v34, v35, v36, v37, 8888);
          if ((_DWORD)v11)
            goto LABEL_24;
        }
        v11 = sub_21A693A8C(v88, *a3, (uint64_t)"%i", v33, v34, v35, v36, v37, 8);
        if ((_DWORD)v11)
          goto LABEL_24;
      }
    }
    v11 = sub_21A693A8C(v88, *a3, (uint64_t)"%i", v33, v34, v35, v36, v37, 8888);
    if ((_DWORD)v11)
      goto LABEL_24;
    if (!v10)
    {
      v11 = sub_21A693A8C(v88, *a3, (uint64_t)"%i", v40, v41, v42, v43, v44, 5);
      if ((_DWORD)v11)
        goto LABEL_24;
    }
    v11 = sub_21A693A8C(v88, *a3, (uint64_t)"%i", v40, v41, v42, v43, v44, 7);
    v50 = v11 | v87 ? 1 : v17;
    v51 = v13 != 1 || v8;
    if (v50 == 1)
      goto LABEL_24;
    if (!v51)
      goto LABEL_24;
    v11 = sub_21A693A8C(v88, *a3, (uint64_t)"%i", v45, v46, v47, v48, v49, 8888);
    if ((_DWORD)v11)
      goto LABEL_24;
    if (v10)
      goto LABEL_58;
    goto LABEL_87;
  }
LABEL_24:
  if (a3 && (_DWORD)v11 && *a3)
  {
    CFRelease(*a3);
    *a3 = 0;
  }
LABEL_28:
  if (v94 < 0)
    operator delete(v93[0]);
  if (SHIBYTE(v95.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v95.__r_.__value_.__l.__data_);
  return v11;
}

void sub_21A6E9A64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a27 < 0)
    operator delete(__p);
  if (a33 < 0)
    operator delete(a28);
  _Unwind_Resume(exception_object);
}

uint64_t sub_21A6E9ACC(uint64_t a1, char *a2, __CFArray **a3, int a4)
{
  CFMutableArrayRef Mutable;
  int64_t size;
  int v10;
  void *v11;
  std::string *v12;
  _BOOL4 v13;
  uint64_t v14;
  std::string *v15;
  std::string *v16;
  std::string *v17;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __CFArray *v26;
  int v27;
  _BOOL4 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  const __CFString *v35;
  char v36;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  const __CFString *v45;
  const __CFArray *Value;
  const __CFArray *v47;
  CFIndex Count;
  CFIndex v49;
  const __CFDictionary *ValueAtIndex;
  const __CFDictionary *v51;
  const __CFNumber *v52;
  const __CFArray *v53;
  const __CFArray *v54;
  CFIndex v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  CFIndex v61;
  const void *v62;
  const __CFAllocator *v63;
  BOOL v64;
  uint64_t valuePtr;
  void *__p[2];
  char v67;
  void *v68[2];
  char v69;
  int v70;
  unsigned int v71;
  unsigned __int16 v72;
  std::string v73;
  const __CFDictionary *v74;

  v74 = 0;
  if (!a3)
    return 4294967292;
  v63 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD690]);
  *a3 = Mutable;
  if (Mutable)
  {
    if (!sub_21A6AF0B4(a1, 1935819842))
      goto LABEL_32;
    sub_21A6CE0F0(&v73, a2);
    size = HIBYTE(v73.__r_.__value_.__r.__words[2]);
    v10 = SHIBYTE(v73.__r_.__value_.__r.__words[2]);
    v11 = (void *)v73.__r_.__value_.__r.__words[0];
    if ((v73.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    {
      v12 = &v73;
    }
    else
    {
      size = v73.__r_.__value_.__l.__size_;
      v12 = (std::string *)v73.__r_.__value_.__r.__words[0];
    }
    if (size >= 16)
    {
      v15 = (std::string *)((char *)v12 + size);
      v16 = v12;
      do
      {
        v17 = (std::string *)memchr(v16, 87, size - 15);
        if (!v17)
          break;
        if (v17->__r_.__value_.__r.__words[0] == 0x6461722E69466957
          && v17->__r_.__value_.__l.__size_ == 0x2E5D2A5B2E736F69)
        {
          goto LABEL_20;
        }
        v16 = (std::string *)((char *)&v17->__r_.__value_.__l.__data_ + 1);
        size = (char *)v15 - (char *)v16;
      }
      while ((char *)v15 - (char *)v16 > 15);
      v17 = v15;
LABEL_20:
      v13 = v17 != v15 && v17 == v12;
      if (v10 < 0)
      {
LABEL_31:
        operator delete(v11);
        if (!v13)
        {
LABEL_32:
          v72 = 0;
          v70 = 0;
          v71 = 0;
          memset(&v73, 0, sizeof(v73));
          sub_21A6CE0F0(v68, a2);
          sub_21A6CE0F0(__p, "raMd");
          sub_21A6B3A38((unsigned __int8 *)v68, (uint64_t)__p, &v73);
          if (v67 < 0)
            operator delete(__p[0]);
          v14 = sub_21A6B77DC(a1, (uint64_t)&v73, &v71, 0);
          if ((_DWORD)v14)
            goto LABEL_39;
          sub_21A6CE0F0(__p, "wdFl");
          sub_21A6B3A38((unsigned __int8 *)v68, (uint64_t)__p, &v73);
          if (v67 < 0)
            operator delete(__p[0]);
          v14 = sub_21A6B77DC(a1, (uint64_t)&v73, &v70, 0);
          if ((_DWORD)v14)
            goto LABEL_39;
          v14 = sub_21A6B7928(a1, 1918979139, &v72, 0);
          if ((_DWORD)v14)
            goto LABEL_39;
          v27 = v70;
          if (!sub_21A6AF0B4(a1, 1935819842))
          {
            v28 = sub_21A6AF0B4(a1, 1094936659);
            if (!v27 && v28)
            {
              v14 = sub_21A693A8C(v63, *a3, (uint64_t)"%i", v29, v30, v31, v32, v33, 1000);
              if ((_DWORD)v14)
                goto LABEL_39;
            }
          }
          if (sub_21A6AF29C(a1, 1937329234, (CFTypeRef *)&v74, 0)
            || !v74
            || CFDictionaryGetCount(v74) < 1)
          {
            if ((sub_21A6D6F8C(v71) & 1) == 0)
            {
              if (CFArrayGetCount(*a3) < 1
                || (v14 = sub_21A693A8C(v63, *a3, (uint64_t)"%i", v38, v39, v40, v41, v42, 8888), !(_DWORD)v14))
              {
                v43 = 0;
                while (1)
                {
                  if ((((unint64_t)v72 >> v43) & 1) != 0)
                  {
                    if (v43 == 13 && v71 != 1)
                      goto LABEL_64;
                    v14 = sub_21A693A8C(v63, *a3, (uint64_t)"%i", v38, v39, v40, v41, v42, v43 + 1);
                    if ((_DWORD)v14)
                      goto LABEL_39;
                  }
                  v14 = 0;
                  if (++v43 == 14)
                    goto LABEL_39;
                }
              }
              goto LABEL_39;
            }
          }
          else
          {
            valuePtr = 0;
            v14 = sub_21A6AD02C(a1, 1937330789, &valuePtr, 0);
            if ((_DWORD)v14)
            {
LABEL_39:
              if (v69 < 0)
                operator delete(v68[0]);
              if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v73.__r_.__value_.__l.__data_);
              goto LABEL_57;
            }
            v35 = 0;
            v36 = 1;
            switch(v71)
            {
              case 1u:
                v36 = 0;
                v35 = CFSTR("b_only_channels");
                break;
              case 2u:
                v36 = 0;
                v35 = CFSTR("bg_channels");
                break;
              case 3u:
                v36 = 0;
                v35 = CFSTR("g_only_channels");
                break;
              case 4u:
                v36 = 0;
                v35 = CFSTR("a_only_channels");
                break;
              case 5u:
              case 0xAu:
                v36 = 0;
                v35 = CFSTR("an_channels");
                break;
              case 6u:
                v36 = 0;
                v35 = CFSTR("bgn_channels");
                break;
              case 7u:
                v36 = 0;
                v35 = CFSTR("2_4GHz_n_only_channels");
                break;
              case 8u:
                v36 = 0;
                v35 = CFSTR("5GHz_n_only_channels");
                break;
              default:
                break;
            }
            if (sub_21A6D6F8C(v71))
            {
              v64 = 0;
              sub_21A6CE0F0(__p, "raWC");
              sub_21A6B3A38((unsigned __int8 *)v68, (uint64_t)__p, &v73);
              if (v67 < 0)
                operator delete(__p[0]);
              v44 = sub_21A6B79E0(a1, (uint64_t)&v73, &v64, 0);
              v14 = v44;
              if (v64)
                v45 = CFSTR("5GHz_wide_channels");
              else
                v45 = CFSTR("5GHz_channels");
              if ((_DWORD)v44)
                goto LABEL_39;
            }
            else
            {
              v45 = CFSTR("2_4GHz_channels");
            }
            if ((sub_21A6D6FB4(v71) | a4) == 1)
            {
              Value = (const __CFArray *)CFDictionaryGetValue(v74, CFSTR("regions"));
              v47 = Value;
              if (!Value)
              {
LABEL_111:
                v14 = 0;
                goto LABEL_39;
              }
              Count = CFArrayGetCount(Value);
              if (Count >= 1)
              {
                v49 = 0;
                do
                {
                  ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v47, v49);
                  v51 = ValueAtIndex;
                  if (!ValueAtIndex)
                    goto LABEL_111;
                  v52 = (const __CFNumber *)CFDictionaryGetValue(ValueAtIndex, CFSTR("region"));
                  if (!v52)
                    goto LABEL_111;
                  CFNumberGetValue(v52, kCFNumberIntType, (char *)&valuePtr + 4);
                  if (HIDWORD(valuePtr) == (_DWORD)valuePtr)
                  {
                    if ((v36 & 1) != 0
                      || (v53 = (const __CFArray *)CFDictionaryGetValue(v51, v35), (v54 = v53) == 0)
                      || !CFArrayGetCount(v53))
                    {
                      v54 = (const __CFArray *)CFDictionaryGetValue(v51, v45);
                      if (!v54)
                        goto LABEL_111;
                    }
                    v55 = CFArrayGetCount(v54);
                    if (!v55)
                      break;
                    if (CFArrayGetCount(*a3) < 1
                      || (v14 = sub_21A693A8C(v63, *a3, (uint64_t)"%i", v56, v57, v58, v59, v60, 8888), !(_DWORD)v14))
                    {
                      if (v55 < 1)
                        break;
                      v61 = 0;
                      while (1)
                      {
                        v62 = CFArrayGetValueAtIndex(v54, v61);
                        if (!v62)
                          goto LABEL_111;
                        CFArrayAppendValue(*a3, v62);
                        if (v55 == ++v61)
                          goto LABEL_64;
                      }
                    }
                    goto LABEL_39;
                  }
                }
                while (Count != ++v49);
              }
            }
          }
LABEL_64:
          v14 = 0;
          goto LABEL_39;
        }
LABEL_28:
        v73.__r_.__value_.__s.__data_[0] = 0;
        v20 = sub_21A6BC380(a1, &v73, 0, 0);
        if (!(_DWORD)v20)
        {
          v26 = *a3;
          if (v73.__r_.__value_.__s.__data_[0])
            v20 = sub_21A693A8C(v63, v26, (uint64_t)"%i", v21, v22, v23, v24, v25, 2000);
          else
            v20 = sub_21A693A8C(v63, v26, (uint64_t)"%i%i", v21, v22, v23, v24, v25, 1000);
        }
        v14 = v20;
        goto LABEL_57;
      }
    }
    else
    {
      v13 = 0;
      if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0)
        goto LABEL_31;
    }
    if (!v13)
      goto LABEL_32;
    goto LABEL_28;
  }
  v14 = 4294967293;
LABEL_57:
  if (v74)
  {
    CFRelease(v74);
    v74 = 0;
  }
  if ((_DWORD)v14 && *a3)
  {
    CFRelease(*a3);
    *a3 = 0;
  }
  return v14;
}

void sub_21A6EA19C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  if (a26 < 0)
    operator delete(__p);
  if (a34 < 0)
    operator delete(a29);
  _Unwind_Resume(exception_object);
}

uint64_t sub_21A6EA214(uint64_t a1, uint64_t a2, CFTypeRef *a3)
{
  const __CFAllocator *v4;
  __CFArray *Mutable;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (!a3)
    return 4294967292;
  v4 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD690]);
  *a3 = Mutable;
  if (!Mutable)
    return 4294967293;
  v11 = sub_21A693A8C(v4, Mutable, (uint64_t)"%i%i", v6, v7, v8, v9, v10, 0);
  if ((_DWORD)v11 && *a3)
  {
    CFRelease(*a3);
    *a3 = 0;
  }
  return v11;
}

uint64_t sub_21A6EA2AC(uint64_t a1, char *a2, CFTypeRef *a3)
{
  const __CFAllocator *v6;
  CFMutableArrayRef Mutable;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v16;
  void *__p;
  char v18;
  std::string v19;

  sub_21A6CE0F0(&v19, "WiFi.radios.[*].");
  sub_21A6CE0F0(&__p, a2);
  v16 = 0;
  if (a3)
  {
    v6 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
    Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD690]);
    *a3 = Mutable;
    if (Mutable)
    {
      sub_21A6B2D64((unsigned __int8 *)&v19, 1651723853, &v19);
      v13 = sub_21A6B77DC(a1, (uint64_t)&v19, &v16, 0);
      if ((_DWORD)v13
        || (v16 != 3 && v16
          ? (v14 = sub_21A693A8C(v6, (__CFArray *)*a3, (uint64_t)"%i%i", v8, v9, v10, v11, v12, 6))
          : (v14 = sub_21A693A8C(v6, (__CFArray *)*a3, (uint64_t)"%i%i%i", v8, v9, v10, v11, v12, 6)),
            v13 = v14,
            (_DWORD)v14))
      {
        if (*a3)
        {
          CFRelease(*a3);
          *a3 = 0;
        }
      }
    }
    else
    {
      v13 = 4294967293;
    }
  }
  else
  {
    v13 = 4294967292;
  }
  if (v18 < 0)
    operator delete(__p);
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v19.__r_.__value_.__l.__data_);
  return v13;
}

void sub_21A6EA404(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_21A6EA438(uint64_t a1, uint64_t a2, CFTypeRef *a3)
{
  const __CFAllocator *v4;
  __CFArray *Mutable;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (!a3)
    return 4294967292;
  v4 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD690]);
  *a3 = Mutable;
  if (!Mutable)
    return 4294967293;
  v11 = sub_21A693A8C(v4, Mutable, (uint64_t)"%i%i%i%i%i", v6, v7, v8, v9, v10, 0);
  if ((_DWORD)v11 && *a3)
  {
    CFRelease(*a3);
    *a3 = 0;
  }
  return v11;
}

uint64_t sub_21A6EA4E4(uint64_t a1, uint64_t a2, CFTypeRef *a3)
{
  const __CFAllocator *v4;
  __CFArray *Mutable;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (!a3)
    return 4294967292;
  v4 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD690]);
  *a3 = Mutable;
  if (!Mutable)
    return 4294967293;
  v11 = sub_21A693A8C(v4, Mutable, (uint64_t)"%i%i%i", v6, v7, v8, v9, v10, 0);
  if ((_DWORD)v11 && *a3)
  {
    CFRelease(*a3);
    *a3 = 0;
  }
  return v11;
}

uint64_t sub_21A6EA584(uint64_t a1, uint64_t a2, CFTypeRef *a3, int a4)
{
  const __CFAllocator *v7;
  CFMutableArrayRef Mutable;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BOOL4 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v22;
  std::string __p;

  sub_21A6CE0F0(&__p, "WiFi.radios.[*].");
  v22 = 0;
  if (a3)
  {
    v7 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
    Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD690]);
    *a3 = Mutable;
    if (Mutable)
    {
      sub_21A6B2D64((unsigned __int8 *)&__p, 1651723853, &__p);
      v14 = sub_21A6B77DC(a1, (uint64_t)&__p, &v22, 0);
      if ((_DWORD)v14
        || (!v22 ? (v15 = !sub_21A6BC5A8(a1)) : (v15 = 1),
            (v14 = sub_21A693A8C(v7, (__CFArray *)*a3, (uint64_t)"%i", v9, v10, v11, v12, v13, 0), (_DWORD)v14)
         || v15 && (v14 = sub_21A693A8C(v7, (__CFArray *)*a3, (uint64_t)"%i", v16, v17, v18, v19, v20, 1), (_DWORD)v14)
         || a4 && (v14 = sub_21A693A8C(v7, (__CFArray *)*a3, (uint64_t)"%i", v16, v17, v18, v19, v20, 2), (_DWORD)v14)
         || (v14 = sub_21A693A8C(v7, (__CFArray *)*a3, (uint64_t)"%i", v16, v17, v18, v19, v20, 3), (_DWORD)v14)))
      {
        if (*a3)
        {
          CFRelease(*a3);
          *a3 = 0;
        }
      }
    }
    else
    {
      v14 = 4294967293;
    }
  }
  else
  {
    v14 = 4294967292;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v14;
}

void sub_21A6EA71C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_21A6EA738(uint64_t a1, char *a2, __CFArray **a3, int a4)
{
  const __CFAllocator *v7;
  __CFArray *Mutable;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  void *__p;
  char v39;

  sub_21A6CE0F0(&__p, a2);
  v37 = 0;
  if (!a3)
  {
    v14 = 4294967292;
    goto LABEL_9;
  }
  v7 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD690]);
  *a3 = Mutable;
  if (!Mutable)
  {
    v14 = 4294967293;
    goto LABEL_9;
  }
  v14 = sub_21A693A8C(v7, Mutable, (uint64_t)"%i", v9, v10, v11, v12, v13, 0);
  if ((_DWORD)v14)
    goto LABEL_27;
  v14 = sub_21A6AD02C(a1, 1937326416, &v37, 0);
  if ((_DWORD)v14)
    goto LABEL_27;
  if ((sub_21A6AF0B4(a1, 1464095533) & a4) == 1)
  {
    v14 = sub_21A693A8C(v7, *a3, (uint64_t)"%i", v16, v17, v18, v19, v20, 10);
    if ((_DWORD)v14)
      goto LABEL_27;
  }
  if (sub_21A6AF0B4(a1, 1112757313))
  {
    v21 = sub_21A671298(v37);
    if (v21 == 4 || v21 == 10 || a4)
    {
      v14 = sub_21A693A8C(v7, *a3, (uint64_t)"%i", v22, v23, v24, v25, v26, 1);
      if ((_DWORD)v14)
        goto LABEL_27;
    }
  }
  if (sub_21A6AF0B4(a1, 1146569811))
  {
    v14 = sub_21A693A8C(v7, *a3, (uint64_t)"%i", v27, v28, v29, v30, v31, 20);
    if ((_DWORD)v14)
      goto LABEL_27;
  }
  if (!sub_21A6AF0B4(a1, 1147761495))
  {
    v14 = 0;
    goto LABEL_9;
  }
  v14 = sub_21A693A8C(v7, *a3, (uint64_t)"%i%i", v32, v33, v34, v35, v36, 8888);
  if ((_DWORD)v14)
  {
LABEL_27:
    if (*a3)
    {
      CFRelease(*a3);
      *a3 = 0;
    }
  }
LABEL_9:
  if (v39 < 0)
    operator delete(__p);
  return v14;
}

void sub_21A6EA934(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_21A6EA954(uint64_t a1, uint64_t a2, __CFArray **a3, int a4)
{
  const __CFAllocator *v7;
  __CFArray *Mutable;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  if (!a3)
    return 4294967292;
  v7 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD690]);
  *a3 = Mutable;
  if (!Mutable)
    return 4294967293;
  v14 = sub_21A693A8C(v7, Mutable, (uint64_t)"%i", v9, v10, v11, v12, v13, 0);
  if (!(_DWORD)v14)
  {
    v20 = sub_21A6AF0B4(a1, 1950434124) ? 3 : 1;
    v14 = sub_21A693A8C(v7, *a3, (uint64_t)"%i", v15, v16, v17, v18, v19, v20);
    if (!(_DWORD)v14)
    {
      if (!a4)
        return 0;
      v14 = sub_21A693A8C(v7, *a3, (uint64_t)"%i", v21, v22, v23, v24, v25, 2);
      if (!(_DWORD)v14)
        return v14;
    }
  }
  if (*a3)
  {
    CFRelease(*a3);
    *a3 = 0;
  }
  return v14;
}

uint64_t sub_21A6EAA74(uint64_t a1, uint64_t a2, CFTypeRef *a3)
{
  const __CFAllocator *v4;
  __CFArray *Mutable;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (!a3)
    return 4294967292;
  v4 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD690]);
  *a3 = Mutable;
  if (!Mutable)
    return 4294967293;
  v11 = sub_21A693A8C(v4, Mutable, (uint64_t)"%i%i%i%i%i%i%i%i", v6, v7, v8, v9, v10, 900);
  if ((_DWORD)v11 && *a3)
  {
    CFRelease(*a3);
    *a3 = 0;
  }
  return v11;
}

uint64_t sub_21A6EAB30(uint64_t a1, uint64_t a2, CFTypeRef *a3)
{
  const __CFAllocator *v4;
  __CFArray *Mutable;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (!a3)
    return 4294967292;
  v4 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD690]);
  *a3 = Mutable;
  if (!Mutable)
    return 4294967293;
  v11 = sub_21A693A8C(v4, Mutable, (uint64_t)"%i%i%i", v6, v7, v8, v9, v10, 0);
  if ((_DWORD)v11 && *a3)
  {
    CFRelease(*a3);
    *a3 = 0;
  }
  return v11;
}

uint64_t sub_21A6EABD0(uint64_t a1, uint64_t a2, CFTypeRef *a3)
{
  const __CFAllocator *v4;
  __CFArray *Mutable;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (!a3)
    return 4294967292;
  v4 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD690]);
  *a3 = Mutable;
  if (!Mutable)
    return 4294967293;
  v11 = sub_21A693A8C(v4, Mutable, (uint64_t)"%i%i%i", v6, v7, v8, v9, v10, 0);
  if ((_DWORD)v11 && *a3)
  {
    CFRelease(*a3);
    *a3 = 0;
  }
  return v11;
}

uint64_t sub_21A6EAC70(uint64_t a1, uint64_t a2, CFMutableArrayRef *a3, char a4)
{
  CFMutableArrayRef Mutable;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  const __CFArray *v10;
  __CFArray *v11;
  uint64_t v12;
  const void **v13;
  CFRange v14;

  if (!a3)
    return 4294967292;
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD690]);
  *a3 = Mutable;
  if (!Mutable)
    return 4294967293;
  if ((a4 & 1) != 0)
  {
    result = sub_21A6F55B4((uint64_t)Mutable, v7, v8);
    if (!result)
      return result;
    v10 = (const __CFArray *)result;
    v11 = *a3;
    v14.length = CFArrayGetCount((CFArrayRef)result);
    v14.location = 0;
    CFArrayAppendArray(v11, v10, v14);
  }
  else
  {
    v12 = 44;
    v13 = (const void **)off_2550F40E8;
    do
    {
      if (*v13)
        CFArrayAppendValue(*a3, *v13);
      v13 += 2;
      --v12;
    }
    while (v12);
  }
  return 0;
}

uint64_t sub_21A6EAD38(uint64_t a1, uint64_t a2, CFTypeRef *a3)
{
  BOOL v5;
  const __CFAllocator *v6;
  __CFArray *Mutable;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v20;
  std::string __p;

  v5 = sub_21A6AF0B4(a1, 1852788045);
  sub_21A6CE0F0(&__p, "WiFi.radios.[*].");
  v20 = 0;
  if (a3)
  {
    v6 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
    Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD690]);
    *a3 = Mutable;
    if (Mutable)
    {
      v18 = sub_21A693A8C(v6, Mutable, (uint64_t)"%i", v8, v9, v10, v11, v12, 1);
      if ((_DWORD)v18
        || !v5
        && ((sub_21A6B2D64((unsigned __int8 *)&__p, 1651718221, &__p),
             v18 = sub_21A6B77DC(a1, (uint64_t)&__p, &v20, 0),
             (_DWORD)v18)
         || (v20 - 7) >= 2
         && v20 != 524295
         && (v18 = sub_21A693A8C(v6, (__CFArray *)*a3, (uint64_t)"%i", v13, v14, v15, v16, v17, 5), (_DWORD)v18))
        || (v18 = sub_21A693A8C(v6, (__CFArray *)*a3, (uint64_t)"%i", v13, v14, v15, v16, v17, 7), (_DWORD)v18))
      {
        if (*a3)
        {
          CFRelease(*a3);
          *a3 = 0;
        }
      }
    }
    else
    {
      v18 = 4294967293;
    }
  }
  else
  {
    v18 = 4294967292;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v18;
}

void sub_21A6EAEBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_21A6EAED8(uint64_t a1, uint64_t a2, CFTypeRef *a3)
{
  const __CFAllocator *v4;
  __CFArray *Mutable;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (!a3)
    return 4294967292;
  v4 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD690]);
  *a3 = Mutable;
  if (!Mutable)
    return 4294967293;
  v11 = sub_21A693A8C(v4, Mutable, (uint64_t)"%i%i%i", v6, v7, v8, v9, v10, 0);
  if ((_DWORD)v11 && *a3)
  {
    CFRelease(*a3);
    *a3 = 0;
  }
  return v11;
}

uint64_t sub_21A6EAF78(uint64_t a1, uint64_t a2, __CFArray **a3, int a4)
{
  const __CFAllocator *v7;
  CFMutableArrayRef Mutable;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __CFArray *v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  BOOL v19;
  int v20;

  if (!a3)
    return 4294967292;
  v7 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD690]);
  *a3 = Mutable;
  if (!Mutable)
    return 4294967293;
  if (sub_21A6BDA38(a1))
  {
    v14 = *a3;
    v15 = 2;
    goto LABEL_5;
  }
  v20 = 0;
  v17 = sub_21A6AF0B4(a1, 1347437878);
  v16 = sub_21A6AD02C(a1, 1651722563, &v20, 0);
  if (!(_DWORD)v16)
  {
    v19 = v20 != 2 || v17;
    if (!v19 && !a4 || (v16 = sub_21A693A8C(v7, *a3, (uint64_t)"%i", v9, v10, v11, v12, v13, 0), !(_DWORD)v16))
    {
      v14 = *a3;
      v15 = 1;
LABEL_5:
      v16 = sub_21A693A8C(v7, v14, (uint64_t)"%i", v9, v10, v11, v12, v13, v15);
      if (!(_DWORD)v16)
        return v16;
    }
  }
  if (*a3)
  {
    CFRelease(*a3);
    *a3 = 0;
  }
  return v16;
}

uint64_t sub_21A6EB0B0(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  int v8;
  CFIndex v9;
  CFIndex v10;
  std::string *v11;
  uint64_t v12;
  std::string __p;
  char v15[5];
  _BYTE v16[17];
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  sub_21A6711EC(a2, v15);
  v8 = sub_21A6B27A8(a2) ^ 1;
  if (a2 == 1633899617)
    LOBYTE(v8) = 0;
  if ((v8 & 1) != 0)
  {
    if ((sub_21A6B456C(a1, a2) & 1) == 0)
      return sub_21A6EB288(a1, v15, a3, a4);
    return 0;
  }
  memset(&__p, 0, sizeof(__p));
  v9 = sub_21A6B262C(a1, 0);
  if (v9 <= 0)
    return 0;
  LODWORD(v10) = 0;
  while (1)
  {
    if ((sub_21A6D69EC(v16, 0x11uLL),
          MEMORY[0x220747320](&__p, v16),
          sub_21A6B2D64((unsigned __int8 *)&__p, a2, &__p),
          a2 != 2003061875)
      && a2 != 1651726157
      || (_DWORD)v10 == sub_21A6B26A8(a1, 0))
    {
      v11 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? &__p
          : (std::string *)__p.__r_.__value_.__r.__words[0];
      v12 = sub_21A6EB288(a1, (const char *)v11, a3, a4);
      if ((_DWORD)v12)
        break;
    }
    v10 = (v10 + 1);
    if (v9 <= v10)
    {
      v12 = 0;
      break;
    }
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v12;
}

void sub_21A6EB264(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  _Unwind_Resume(exception_object);
}

uint64_t sub_21A6EB288(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  signed int v8;
  uint64_t v9;
  uint64_t v10;
  signed int v11;
  BOOL v12;
  uint64_t *v13;
  uint64_t (*v15)(uint64_t, const char *, uint64_t, uint64_t);

  v8 = sub_21A6BB08C(a2);
  v9 = *(_QWORD *)(qword_2550F4E00 + 8);
  if (!v9)
    return 4294967292;
  v10 = qword_2550F4E00 + 8;
  do
  {
    v11 = *(_DWORD *)(v9 + 32);
    v12 = v11 < v8;
    if (v11 >= v8)
      v13 = (uint64_t *)v9;
    else
      v13 = (uint64_t *)(v9 + 8);
    if (!v12)
      v10 = v9;
    v9 = *v13;
  }
  while (*v13);
  if (v10 == qword_2550F4E00 + 8 || v8 < *(_DWORD *)(v10 + 32))
    return 4294967292;
  v15 = *(uint64_t (**)(uint64_t, const char *, uint64_t, uint64_t))(*(_QWORD *)(v10 + 40) + 40);
  if (v15)
    return v15(a1, a2, a3, a4);
  else
    return 0;
}

uint64_t sub_21A6EB340(uint64_t a1, char *a2, void **a3, uint64_t *a4)
{
  uint64_t v7;
  int v8;
  unint64_t v9;
  void *__p;
  unint64_t v12;
  uint64_t v13;
  void *v14[2];
  char v15;
  std::string v16;

  memset(&v16, 0, sizeof(v16));
  sub_21A6CE0F0(v14, a2);
  __p = 0;
  v12 = 0;
  v13 = 0;
  sub_21A6B2D64((unsigned __int8 *)v14, 1937329773, &v16);
  v7 = sub_21A6B7B5C(a1, (uint64_t)&v16, (uint64_t)&__p, 0);
  if (!(_DWORD)v7)
  {
    v8 = 1732604483;
    if (SHIBYTE(v13) < 0)
    {
      v9 = v12;
      if (v12 > 0x40)
      {
LABEL_8:
        sub_21A6EB47C(1937329773, v8, a3, a4);
        goto LABEL_9;
      }
    }
    else
    {
      v9 = HIBYTE(v13);
      if (HIBYTE(v13) > 0x40u)
        goto LABEL_8;
    }
    if (v9)
      goto LABEL_9;
    v8 = 1732604481;
    goto LABEL_8;
  }
LABEL_9:
  if (SHIBYTE(v13) < 0)
    operator delete(__p);
  if (v15 < 0)
    operator delete(v14[0]);
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v16.__r_.__value_.__l.__data_);
  return v7;
}

void sub_21A6EB438(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

char *sub_21A6EB47C(int a1, int a2, void **a3, uint64_t *a4)
{
  char *result;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;

  result = (char *)*a3;
  if (!*a3)
  {
    result = (char *)malloc_type_malloc(8uLL, 0x100004000313F17uLL);
    *a3 = result;
    if (!result)
      return result;
    goto LABEL_10;
  }
  v9 = *a4;
  if (*a4 < 1)
  {
LABEL_7:
    result = (char *)malloc_type_realloc(result, 8 * v9 + 8, 0x100004000313F17uLL);
    if (!result)
      return result;
    *a3 = result;
LABEL_10:
    v11 = *a4;
    v12 = &result[8 * *a4];
    *(_DWORD *)v12 = a1;
    *((_DWORD *)v12 + 1) = a2;
    *a4 = v11 + 1;
    return result;
  }
  v10 = (char *)*a3;
  while (*((_DWORD *)v10 + 1) != a2 || *(_DWORD *)v10 != a1)
  {
    v10 += 8;
    if (v10 >= &result[8 * v9])
      goto LABEL_7;
  }
  return result;
}

uint64_t sub_21A6EB548(uint64_t a1, char *a2, void **a3, uint64_t *a4)
{
  uint64_t v7;
  int v8;
  std::string::size_type size;
  std::string __p;
  void *v12[2];
  char v13;
  std::string v14;

  memset(&v14, 0, sizeof(v14));
  sub_21A6CE0F0(v12, a2);
  memset(&__p, 0, sizeof(__p));
  sub_21A6B2D64((unsigned __int8 *)v12, 1937330263, &v14);
  v7 = sub_21A6B7B5C(a1, (uint64_t)&v14, (uint64_t)&__p, 0);
  if (!(_DWORD)v7)
  {
    v8 = 1732604483;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      size = __p.__r_.__value_.__l.__size_;
      if (__p.__r_.__value_.__l.__size_ > 0x20)
      {
LABEL_9:
        sub_21A6EB47C(1937330263, v8, a3, a4);
        goto LABEL_10;
      }
    }
    else
    {
      size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      if (HIBYTE(__p.__r_.__value_.__r.__words[2]) > 0x20u)
        goto LABEL_9;
    }
    if (!size && !*(_BYTE *)(a1 + 193))
    {
      v8 = 1732604481;
      goto LABEL_9;
    }
    if (!std::string::compare(&__p, "public")
      && sub_21A6AF0B4(a1, 1400460148)
      && !sub_21A6EB6D4(a1, 1886741072))
    {
      v8 = 1886741072;
      goto LABEL_9;
    }
  }
LABEL_10:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v13 < 0)
    operator delete(v12[0]);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__r_.__value_.__l.__data_);
  return v7;
}

void sub_21A6EB690(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_21A6EB6D4(uint64_t a1, int a2)
{
  const __CFArray *Value;
  const __CFString *v4;
  CFIndex Count;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  CFIndex v11;
  uint64_t i;
  int v13;
  uint64_t v14;
  int v16;
  CFDictionaryRef theDict;

  theDict = 0;
  v16 = 0;
  sub_21A6AF29C(a1, 1937328487, (CFTypeRef *)&theDict, 0);
  if (!theDict)
    return 0;
  Value = (const __CFArray *)CFDictionaryGetValue(theDict, CFSTR("problems"));
  if (Value)
  {
    v4 = (const __CFString *)Value;
    Count = CFArrayGetCount(Value);
    if (Count >= 1)
    {
      v11 = Count;
      for (i = 0; v11 != i; ++i)
      {
        sub_21A693B94(v4, (uint64_t)&v16, (UInt8 *)"[*].%kO:code", v6, v7, v8, v9, v10, i);
        if (v13)
          break;
        if (v16 == a2)
        {
          v14 = 1;
          goto LABEL_9;
        }
      }
    }
  }
  v14 = 0;
LABEL_9:
  if (theDict)
    CFRelease(theDict);
  return v14;
}

uint64_t sub_21A6EB7B8(uint64_t a1, char *a2, void **a3, uint64_t *a4)
{
  uint64_t v7;
  unint64_t v8;
  void *__p;
  unint64_t v11;
  uint64_t v12;
  void *v13[2];
  char v14;
  std::string v15;

  memset(&v15, 0, sizeof(v15));
  sub_21A6CE0F0(v13, a2);
  __p = 0;
  v11 = 0;
  v12 = 0;
  sub_21A6B2D64((unsigned __int8 *)v13, 1937326964, &v15);
  v7 = sub_21A6B7B5C(a1, (uint64_t)&v15, (uint64_t)&__p, 0);
  if (!(_DWORD)v7)
  {
    v8 = HIBYTE(v12);
    if (v12 < 0)
      v8 = v11;
    if (v8 >= 0x41)
      sub_21A6EB47C(1937326964, 1732604483, a3, a4);
  }
  if (SHIBYTE(v12) < 0)
    operator delete(__p);
  if (v14 < 0)
    operator delete(v13[0]);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v15.__r_.__value_.__l.__data_);
  return v7;
}

void sub_21A6EB8A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_21A6EB8E4(uint64_t a1, char *a2, void **a3, uint64_t *a4)
{
  uint64_t v7;
  char v8;
  void *__p;
  unint64_t v11;
  uint64_t v12;
  void *v13[2];
  char v14;
  std::string v15;

  memset(&v15, 0, sizeof(v15));
  sub_21A6CE0F0(v13, a2);
  __p = 0;
  v11 = 0;
  v12 = 0;
  sub_21A6B2D64((unsigned __int8 *)v13, 1937329263, &v15);
  v7 = sub_21A6B7B5C(a1, (uint64_t)&v15, (uint64_t)&__p, 0);
  v8 = HIBYTE(v12);
  if (!(_DWORD)v7 && SHIBYTE(v12) < 0 && v11 > 0x80)
  {
    sub_21A6EB47C(1937329263, 1732604483, a3, a4);
    v8 = HIBYTE(v12);
  }
  if (v8 < 0)
    operator delete(__p);
  if (v14 < 0)
    operator delete(v13[0]);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v15.__r_.__value_.__l.__data_);
  return v7;
}

void sub_21A6EB9C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_21A6EBA08(uint64_t a1, char *a2, void **a3, uint64_t *a4)
{
  uint64_t v7;
  uint64_t v8;
  void *__p;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  void *v14[2];
  char v15;
  std::string v16;

  memset(&v16, 0, sizeof(v16));
  sub_21A6CE0F0(v14, a2);
  if (sub_21A6AF0B4(a1, 2000834122))
  {
    v13 = 0;
    __p = 0;
    v11 = 0;
    v12 = 0;
    sub_21A6B2D64((unsigned __int8 *)v14, 2002929742, &v16);
    v7 = sub_21A6B7B5C(a1, (uint64_t)&v16, (uint64_t)&__p, 0);
    if (!(_DWORD)v7)
    {
      sub_21A6B2D64((unsigned __int8 *)v14, 2002929006, &v16);
      v7 = sub_21A6B79E0(a1, (uint64_t)&v16, &v13, 0);
      if (!(_DWORD)v7 && v13)
      {
        v8 = HIBYTE(v12);
        if (v12 < 0)
          v8 = v11;
        if (!v8)
          sub_21A6EB47C(2002929742, 1732604482, a3, a4);
        v7 = 0;
      }
    }
    if (SHIBYTE(v12) < 0)
      operator delete(__p);
  }
  else
  {
    v7 = 0;
  }
  if (v15 < 0)
    operator delete(v14[0]);
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v16.__r_.__value_.__l.__data_);
  return v7;
}

void sub_21A6EBB48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a21 < 0)
    operator delete(__p);
  if (a27 < 0)
    operator delete(a22);
  _Unwind_Resume(exception_object);
}

uint64_t sub_21A6EBB94(uint64_t a1, char *a2, void **a3, uint64_t *a4)
{
  uint64_t v7;
  _BOOL4 v8;
  _BOOL4 v9;
  __int16 v11;
  void *__p[2];
  char v13;
  std::string v14;

  memset(&v14, 0, sizeof(v14));
  sub_21A6CE0F0(__p, a2);
  v11 = 0;
  sub_21A6B2D64((unsigned __int8 *)__p, 2002927939, &v14);
  v7 = sub_21A6B79E0(a1, (uint64_t)&v14, (BOOL *)&v11 + 1, 0);
  if (!(_DWORD)v7)
  {
    sub_21A6B2D64((unsigned __int8 *)__p, 2002929006, &v14);
    v7 = sub_21A6B79E0(a1, (uint64_t)&v14, (BOOL *)&v11, 0);
    if (!(_DWORD)v7)
    {
      v8 = sub_21A6AF0B4(a1, 2000834122);
      v7 = 0;
      v9 = HIBYTE(v11) && v8;
      if (v9 && !(_BYTE)v11)
      {
        sub_21A6EB47C(2002927939, 1918320962, a3, a4);
        v7 = 0;
      }
    }
  }
  if (v13 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__r_.__value_.__l.__data_);
  return v7;
}

void sub_21A6EBCB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_21A6EBCE4(uint64_t a1, char *a2, void **a3, uint64_t *a4)
{
  uint64_t v7;
  char *p_p;
  int v9;
  unsigned int v11;
  void *__p;
  uint64_t v13;
  uint64_t v14;
  void *v15[2];
  char v16;
  std::string v17;

  memset(&v17, 0, sizeof(v17));
  sub_21A6CE0F0(v15, a2);
  __p = 0;
  v13 = 0;
  v14 = 0;
  v11 = 0;
  sub_21A6B2D64((unsigned __int8 *)v15, 1936474988, &v17);
  v7 = sub_21A6B7B5C(a1, (uint64_t)&v17, (uint64_t)&__p, 0);
  if (!(_DWORD)v7)
  {
    if (SHIBYTE(v14) < 0)
    {
      if (!v13)
        goto LABEL_15;
      p_p = (char *)__p;
    }
    else
    {
      if (!HIBYTE(v14))
        goto LABEL_15;
      p_p = (char *)&__p;
    }
    v7 = sub_21A6A16C4(p_p, 0, &v11, 0, 0, 0, 0);
    if ((_DWORD)v7)
      goto LABEL_16;
    if (sub_21A6AF0B4(a1, 1400468300))
    {
      if (!v11)
        goto LABEL_15;
      v9 = 1936474953;
      if (v11 + 1 >= 2 && HIBYTE(v11) - 225 > 0xDu)
        goto LABEL_15;
    }
    else
    {
      v9 = 1732604484;
    }
    sub_21A6EB47C(1936474988, v9, a3, a4);
LABEL_15:
    v7 = 0;
  }
LABEL_16:
  if (SHIBYTE(v14) < 0)
    operator delete(__p);
  if (v16 < 0)
    operator delete(v15[0]);
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v17.__r_.__value_.__l.__data_);
  return v7;
}

void sub_21A6EBE40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_21A6EBE84(uint64_t a1, char *a2, void **a3, uint64_t *a4)
{
  uint64_t v7;
  int v8;
  unsigned int v10;
  void *__p[2];
  char v12;
  std::string v13;

  memset(&v13, 0, sizeof(v13));
  sub_21A6CE0F0(__p, a2);
  v10 = 0;
  sub_21A6B2D64((unsigned __int8 *)__p, 1936488044, &v13);
  v7 = sub_21A6B77DC(a1, (uint64_t)&v13, &v10, 0);
  if (!(_DWORD)v7 && v10)
  {
    if (sub_21A6AF0B4(a1, 1400468300))
    {
      if (v10 < 8)
        goto LABEL_8;
      v8 = 1936477257;
    }
    else
    {
      v8 = 1732604484;
    }
    sub_21A6EB47C(1936488044, v8, a3, a4);
  }
LABEL_8:
  if (v12 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
  return v7;
}

void sub_21A6EBF70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_21A6EBFA4(uint64_t a1, char *a2, void **a3, uint64_t *a4)
{
  uint64_t v7;
  int v8;
  unint64_t v9;
  void *__p[2];
  char v12;
  void *v13;
  unint64_t v14;
  uint64_t v15;
  void *v16[2];
  char v17;
  std::string v18;

  memset(&v18, 0, sizeof(v18));
  sub_21A6CE0F0(v16, a2);
  v13 = 0;
  v14 = 0;
  v15 = 0;
  sub_21A6CE0F0(__p, "raNm");
  sub_21A6B3A38((unsigned __int8 *)v16, (uint64_t)__p, &v18);
  if (v12 < 0)
    operator delete(__p[0]);
  v7 = sub_21A6B7B5C(a1, (uint64_t)&v18, (uint64_t)&v13, 0);
  if (!(_DWORD)v7)
  {
    v8 = 1732604483;
    if (SHIBYTE(v15) < 0)
    {
      v9 = v14;
      if (v14 > 0x20)
      {
LABEL_10:
        sub_21A6EB47C(1918979693, v8, a3, a4);
        goto LABEL_11;
      }
    }
    else
    {
      v9 = HIBYTE(v15);
      if (HIBYTE(v15) >= 0x21u)
        goto LABEL_10;
    }
    if (v9)
      goto LABEL_11;
    v8 = 1732604481;
    goto LABEL_10;
  }
LABEL_11:
  if (SHIBYTE(v15) < 0)
    operator delete(v13);
  if (v17 < 0)
    operator delete(v16[0]);
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v18.__r_.__value_.__l.__data_);
  return v7;
}

void sub_21A6EC0B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  uint64_t v26;

  if (a14 < 0)
    operator delete(__p);
  if (a26 < 0)
    operator delete(a21);
  if (*(char *)(v26 - 33) < 0)
    operator delete(*(void **)(v26 - 56));
  _Unwind_Resume(exception_object);
}

uint64_t sub_21A6EC118(uint64_t a1, char *a2, void **a3, uint64_t *a4)
{
  uint64_t v7;
  _BOOL4 v8;
  _BOOL4 v9;
  uint64_t v10;
  int v11;
  CFIndex Length;
  uint64_t v13;
  void *__p[2];
  char v16;
  __int16 v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  CFDataRef theData;
  void *v23[2];
  char v24;
  std::string v25;

  memset(&v25, 0, sizeof(v25));
  sub_21A6CE0F0(v23, a2);
  v21 = 0;
  theData = 0;
  v19 = 0;
  v20 = 0;
  v18 = 0;
  v17 = 0;
  sub_21A6CE0F0(__p, "raSt");
  sub_21A6B3A38((unsigned __int8 *)v23, (uint64_t)__p, &v25);
  if (v16 < 0)
    operator delete(__p[0]);
  v7 = sub_21A6B77DC(a1, (uint64_t)&v25, &v18, 0);
  if (!(_DWORD)v7 && (_DWORD)v18 != 3)
  {
    sub_21A6CE0F0(__p, "raWE");
    sub_21A6B3A38((unsigned __int8 *)v23, (uint64_t)__p, &v25);
    if (v16 < 0)
      operator delete(__p[0]);
    v7 = sub_21A6B44B4(a1, (uint64_t)&v25, &theData, 0);
    if (!(_DWORD)v7)
    {
      sub_21A6CE0F0(__p, "raCr");
      sub_21A6B3A38((unsigned __int8 *)v23, (uint64_t)__p, &v25);
      if (v16 < 0)
        operator delete(__p[0]);
      v7 = sub_21A6B7B5C(a1, (uint64_t)&v25, (uint64_t)&v19, 0);
      if (!(_DWORD)v7)
      {
        sub_21A6CE0F0(__p, "raWM");
        sub_21A6B3A38((unsigned __int8 *)v23, (uint64_t)__p, &v25);
        if (v16 < 0)
          operator delete(__p[0]);
        v7 = sub_21A6B77DC(a1, (uint64_t)&v25, (char *)&v18 + 4, 0);
        if (!(_DWORD)v7)
        {
          sub_21A6CE0F0(__p, "raEA");
          sub_21A6B3A38((unsigned __int8 *)v23, (uint64_t)__p, &v25);
          if (v16 < 0)
            operator delete(__p[0]);
          v7 = sub_21A6B79E0(a1, (uint64_t)&v25, (BOOL *)&v17 + 1, 0);
          if (!(_DWORD)v7)
          {
            sub_21A6CE0F0(__p, "rTSN");
            sub_21A6B3A38((unsigned __int8 *)v23, (uint64_t)__p, &v25);
            if (v16 < 0)
              operator delete(__p[0]);
            v7 = sub_21A6B79E0(a1, (uint64_t)&v25, (BOOL *)&v17, 0);
            if (!(_DWORD)v7)
            {
              if ((HIDWORD(v18) - 3) >= 3)
              {
                if (HIDWORD(v18) == 2)
                {
                  if (CFDataGetLength(theData) == 13)
                  {
LABEL_42:
                    v7 = 0;
                    goto LABEL_43;
                  }
                  v11 = 1769419083;
                }
                else
                {
                  if (HIDWORD(v18) != 1 || CFDataGetLength(theData) == 5)
                    goto LABEL_42;
                  v11 = 1769419851;
                }
              }
              else
              {
                v8 = sub_21A6AF0B4(a1, 1414745645);
                if ((_BYTE)v17)
                  v9 = v8;
                else
                  v9 = 0;
                if (v9)
                {
                  v10 = HIBYTE(v21);
                  if (v21 < 0)
                    v10 = v20;
                  if (v10 == 13)
                    goto LABEL_42;
                  v11 = 1767134030;
                }
                else
                {
                  if (HIBYTE(v17))
                    goto LABEL_42;
                  Length = CFDataGetLength(theData);
                  v11 = 1767329857;
                  if (Length == 32)
                  {
                    v13 = HIBYTE(v21);
                    if (v21 < 0)
                      v13 = v20;
                    if (v13)
                      goto LABEL_42;
                  }
                }
              }
              sub_21A6EB47C(1651725131, v11, a3, a4);
              goto LABEL_42;
            }
          }
        }
      }
    }
  }
LABEL_43:
  if (theData)
  {
    CFRelease(theData);
    theData = 0;
  }
  if (SHIBYTE(v21) < 0)
    operator delete(v19);
  if (v24 < 0)
    operator delete(v23[0]);
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v25.__r_.__value_.__l.__data_);
  return v7;
}

void sub_21A6EC47C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  uint64_t v30;

  if (a15 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  if (a30 < 0)
    operator delete(a25);
  if (*(char *)(v30 - 33) < 0)
    operator delete(*(void **)(v30 - 56));
  _Unwind_Resume(exception_object);
}

uint64_t sub_21A6EC504(uint64_t a1, char *a2, void **a3, uint64_t *a4)
{
  uint64_t v7;
  _BOOL4 v8;
  unsigned int v9;
  _BOOL4 v10;
  int v11;
  void *__p[2];
  char v14;
  int v15;
  unsigned int v16;
  BOOL v17;
  void *v18[2];
  char v19;
  std::string v20;

  memset(&v20, 0, sizeof(v20));
  sub_21A6CE0F0(v18, a2);
  v17 = 0;
  v15 = 0;
  v16 = 0;
  sub_21A6CE0F0(__p, "raSt");
  sub_21A6B3A38((unsigned __int8 *)v18, (uint64_t)__p, &v20);
  if (v14 < 0)
    operator delete(__p[0]);
  v7 = sub_21A6B77DC(a1, (uint64_t)&v20, &v15, 0);
  if (!(_DWORD)v7)
  {
    sub_21A6CE0F0(__p, "raWM");
    sub_21A6B3A38((unsigned __int8 *)v18, (uint64_t)__p, &v20);
    if (v14 < 0)
      operator delete(__p[0]);
    v7 = sub_21A6B77DC(a1, (uint64_t)&v20, &v16, 0);
    if (!(_DWORD)v7)
    {
      sub_21A6CE0F0(__p, "raEA");
      sub_21A6B3A38((unsigned __int8 *)v18, (uint64_t)__p, &v20);
      if (v14 < 0)
        operator delete(__p[0]);
      v7 = sub_21A6B79E0(a1, (uint64_t)&v20, &v17, 0);
      if (!(v7 | v15))
      {
        v8 = sub_21A6AF0B4(a1, 1400460148);
        v9 = v16;
        if (v16)
          v10 = 0;
        else
          v10 = v8;
        if (v10)
        {
          if (sub_21A6EB6D4(a1, 1869631063))
          {
LABEL_29:
            v7 = 0;
            goto LABEL_30;
          }
          v11 = 1869631063;
LABEL_28:
          sub_21A6EB47C(1651725133, v11, a3, a4);
          goto LABEL_29;
        }
        v11 = 2004045141;
        if (v16 == 4)
        {
          if (!sub_21A6AF0B4(a1, 1095062317))
            goto LABEL_28;
          v9 = v16;
        }
        if (v9 == 3)
        {
          if (!sub_21A6AF0B4(a1, 1464877357))
            goto LABEL_28;
          v9 = v16;
        }
        if (v9 == 5)
        {
          if (!sub_21A6AF0B4(a1, 1095062317))
            goto LABEL_28;
          v9 = v16;
        }
        v7 = 0;
        if (v17 && v9 <= 2)
        {
          v11 = 1732604485;
          goto LABEL_28;
        }
      }
    }
  }
LABEL_30:
  if (v19 < 0)
    operator delete(v18[0]);
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v20.__r_.__value_.__l.__data_);
  return v7;
}

void sub_21A6EC744(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  uint64_t v23;

  if (a15 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  if (*(char *)(v23 - 33) < 0)
    operator delete(*(void **)(v23 - 56));
  _Unwind_Resume(exception_object);
}

uint64_t sub_21A6EC7A4(uint64_t a1, char *a2, void **a3, uint64_t *a4)
{
  uint64_t v7;
  int v9;
  unsigned __int16 v10;
  unsigned int v11;
  void *__p[2];
  char v13;
  BOOL v14;
  void *v15[2];
  char v16;
  std::string v17;

  memset(&v17, 0, sizeof(v17));
  sub_21A6CE0F0(v15, a2);
  v14 = 0;
  sub_21A6CE0F0(__p, "raCA");
  sub_21A6B3A38((unsigned __int8 *)v15, (uint64_t)__p, &v17);
  if (v13 < 0)
    operator delete(__p[0]);
  v7 = sub_21A6B79E0(a1, (uint64_t)&v17, &v14, 0);
  if (!(_DWORD)v7)
  {
    if (v14)
    {
      if (!sub_21A6AF0B4(a1, 1094936659))
        sub_21A6EB47C(1651724867, 1633898067, a3, a4);
      goto LABEL_7;
    }
    v11 = 0;
    v10 = 0;
    v9 = 0;
    sub_21A6CE0F0(__p, "raMd");
    sub_21A6B3A38((unsigned __int8 *)v15, (uint64_t)__p, &v17);
    if (v13 < 0)
      operator delete(__p[0]);
    v7 = sub_21A6B77DC(a1, (uint64_t)&v17, &v11, 0);
    if (!(_DWORD)v7)
    {
      if (v11 != 9)
      {
        v7 = sub_21A6B7928(a1, 1918979139, &v10, 0);
        if ((_DWORD)v7)
          goto LABEL_11;
        sub_21A6CE0F0(__p, "raCh");
        sub_21A6B3A38((unsigned __int8 *)v15, (uint64_t)__p, &v17);
        if (v13 < 0)
          operator delete(__p[0]);
        v7 = sub_21A6B77DC(a1, (uint64_t)&v17, &v9, 0);
        if ((_DWORD)v7)
          goto LABEL_11;
        if (sub_21A6D6F8C(v11))
        {
          if ((v9 - 166) < 0xFFFFFF7C)
            goto LABEL_25;
        }
        else if ((((unint64_t)v10 >> (v9 - 1)) & 1) == 0)
        {
LABEL_25:
          sub_21A6EB47C(1651724867, 1732604485, a3, a4);
        }
      }
LABEL_7:
      v7 = 0;
    }
  }
LABEL_11:
  if (v16 < 0)
    operator delete(v15[0]);
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v17.__r_.__value_.__l.__data_);
  return v7;
}

void sub_21A6EC9C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  uint64_t v23;

  if (a16 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  if (*(char *)(v23 - 33) < 0)
    operator delete(*(void **)(v23 - 56));
  _Unwind_Resume(exception_object);
}

uint64_t sub_21A6ECA24()
{
  return 0;
}

uint64_t sub_21A6ECA2C()
{
  return 0;
}

uint64_t sub_21A6ECA34(uint64_t a1, char *a2, void **a3, uint64_t *a4)
{
  uint64_t v7;
  _BOOL4 v8;
  int v9;
  void *__p[2];
  char v12;
  unsigned __int16 v13;
  void *v14[2];
  char v15;
  std::string v16;

  memset(&v16, 0, sizeof(v16));
  sub_21A6CE0F0(v14, a2);
  v13 = 0;
  sub_21A6CE0F0(__p, "raPo");
  sub_21A6B3A38((unsigned __int8 *)v14, (uint64_t)__p, &v16);
  if (v12 < 0)
    operator delete(__p[0]);
  v7 = sub_21A6B78C4(a1, (uint64_t)&v16, &v13, 0);
  if (!(_DWORD)v7 && v13 != 100)
  {
    v8 = sub_21A6AF0B4(a1, 1417171063);
    v9 = 1732604484;
    if (v8)
    {
      if (v13 <= 0x64u)
      {
        if (v13 > 3u)
          goto LABEL_11;
        v9 = 1732604487;
      }
      else
      {
        v9 = 1732604486;
      }
    }
    sub_21A6EB47C(1918980207, v9, a3, a4);
  }
LABEL_11:
  if (v15 < 0)
    operator delete(v14[0]);
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v16.__r_.__value_.__l.__data_);
  return v7;
}

void sub_21A6ECB48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a14 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a27 < 0)
    operator delete(a22);
  _Unwind_Resume(exception_object);
}

uint64_t sub_21A6ECB98(uint64_t a1, char *a2, void **a3, uint64_t *a4)
{
  uint64_t v7;
  int v9;
  void *__p[2];
  char v11;
  BOOL v12;
  int v13;
  void *v14[2];
  char v15;
  std::string v16;

  memset(&v16, 0, sizeof(v16));
  sub_21A6CE0F0(v14, a2);
  v13 = 0;
  sub_21A6CE0F0(__p, "raSt");
  sub_21A6B3A38((unsigned __int8 *)v14, (uint64_t)__p, &v16);
  if (v11 < 0)
    operator delete(__p[0]);
  v7 = sub_21A6B77DC(a1, (uint64_t)&v16, &v13, 0);
  if (!(_DWORD)v7)
  {
    v12 = 0;
    if (sub_21A6AF0B4(a1, 1146569811))
    {
      sub_21A6CE0F0(__p, "dWDS");
      sub_21A6B3A38((unsigned __int8 *)v14, (uint64_t)__p, &v16);
      if (v11 < 0)
        operator delete(__p[0]);
      sub_21A6B79E0(a1, (uint64_t)&v16, &v12, 0);
    }
    if (v13 == 3)
    {
      if (sub_21A6AF0B4(a1, 1147761495))
        goto LABEL_4;
      v9 = 2003062355;
    }
    else
    {
      if (v13 != 1 || v12 || sub_21A6AF0B4(a1, 1112757313))
        goto LABEL_4;
      v9 = 1936543315;
    }
    sub_21A6EB47C(1918980980, v9, a3, a4);
  }
LABEL_4:
  if (v15 < 0)
    operator delete(v14[0]);
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v16.__r_.__value_.__l.__data_);
  return v7;
}

void sub_21A6ECD1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a14 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a27 < 0)
    operator delete(a22);
  _Unwind_Resume(exception_object);
}

uint64_t sub_21A6ECD74(uint64_t a1, char *a2, void **a3, uint64_t *a4)
{
  uint64_t v7;
  int v9;
  BOOL v10;
  __int16 v11;
  uint64_t v12;
  void *__p[2];
  char v14;
  std::string v15;

  memset(&v15, 0, sizeof(v15));
  sub_21A6CE0F0(__p, a2);
  v12 = 0;
  v11 = 0;
  v10 = 0;
  v9 = 0;
  sub_21A6B2D64((unsigned __int8 *)__p, 2002862934, &v15);
  v7 = sub_21A6B77DC(a1, (uint64_t)&v15, (char *)&v12 + 4, 0);
  if (!(_DWORD)v7)
  {
    sub_21A6B2D64((unsigned __int8 *)__p, 2002864494, &v15);
    v7 = sub_21A6B77DC(a1, (uint64_t)&v15, &v12, 0);
    if (!(_DWORD)v7 && (_DWORD)v12 == 16)
    {
      if ((v12 & 0x80000000000) != 0)
      {
LABEL_18:
        v7 = 0;
        goto LABEL_2;
      }
      sub_21A6B2D64((unsigned __int8 *)__p, 1918979649, &v15);
      v7 = sub_21A6B79E0(a1, (uint64_t)&v15, (BOOL *)&v11 + 1, 0);
      if (!(_DWORD)v7)
      {
        sub_21A6B2D64((unsigned __int8 *)__p, 1918977107, &v15);
        v7 = sub_21A6B79E0(a1, (uint64_t)&v15, (BOOL *)&v11, 0);
        if (!(_DWORD)v7)
        {
          sub_21A6B2D64((unsigned __int8 *)__p, 912483943, &v15);
          v7 = sub_21A6B77DC(a1, (uint64_t)&v15, &v9, 0);
          if (!(_DWORD)v7)
          {
            sub_21A6B2D64((unsigned __int8 *)__p, 912356724, &v15);
            v7 = sub_21A6B79E0(a1, (uint64_t)&v15, &v10, 0);
            if (!(_DWORD)v7 && (~HIDWORD(v12) & 0x300) == 0 && !HIBYTE(v11) && (_BYTE)v11)
            {
              sub_21A6EB47C(2002862934, 1145590644, a3, a4);
              goto LABEL_18;
            }
          }
        }
      }
    }
  }
LABEL_2:
  if (v14 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v15.__r_.__value_.__l.__data_);
  return v7;
}

void sub_21A6ECF64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_21A6ECF98(uint64_t a1, char *a2, void **a3, uint64_t *a4)
{
  uint64_t v7;
  int v8;
  void *__p[2];
  char v11;
  uint64_t v12;
  void *v13[2];
  char v14;
  std::string v15;

  memset(&v15, 0, sizeof(v15));
  sub_21A6CE0F0(v13, a2);
  v12 = 0;
  sub_21A6CE0F0(__p, "raKT");
  sub_21A6B3A38((unsigned __int8 *)v13, (uint64_t)__p, &v15);
  if (v11 < 0)
    operator delete(__p[0]);
  v7 = sub_21A6B77DC(a1, (uint64_t)&v15, (char *)&v12 + 4, 0);
  if (!(_DWORD)v7)
  {
    sub_21A6CE0F0(__p, "raWM");
    sub_21A6B3A38((unsigned __int8 *)v13, (uint64_t)__p, &v15);
    if (v11 < 0)
      operator delete(__p[0]);
    v7 = sub_21A6B77DC(a1, (uint64_t)&v15, &v12, 0);
    if (!(_DWORD)v7)
    {
      if ((v12 - 3) <= 5)
      {
        v8 = 1802785868;
        if (HIDWORD(v12) < 0x258)
        {
          v8 = 1802785875;
LABEL_11:
          sub_21A6EB47C(1918978900, v8, a3, a4);
          goto LABEL_12;
        }
        if (HIDWORD(v12) >= 0x23C345C5)
          goto LABEL_11;
      }
LABEL_12:
      v7 = 0;
    }
  }
  if (v14 < 0)
    operator delete(v13[0]);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v15.__r_.__value_.__l.__data_);
  return v7;
}

void sub_21A6ED0F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a14 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a27 < 0)
    operator delete(a22);
  _Unwind_Resume(exception_object);
}

uint64_t sub_21A6ED148(uint64_t a1, char *a2, void **a3, uint64_t *a4)
{
  uint64_t v7;
  char *p_p;
  int v9;
  char *v10;
  int v12;
  uint64_t v13;
  void *__p;
  uint64_t v15;
  uint64_t v16;
  void *v17[2];
  char v18;
  std::string v19;

  memset(&v19, 0, sizeof(v19));
  sub_21A6CE0F0(v17, a2);
  __p = 0;
  v15 = 0;
  v16 = 0;
  v13 = 0;
  v12 = 0;
  sub_21A6B2D64((unsigned __int8 *)v17, 2002863153, &v19);
  v7 = sub_21A6B7B5C(a1, (uint64_t)&v19, (uint64_t)&__p, 0);
  if (!(_DWORD)v7)
  {
    if (SHIBYTE(v16) < 0)
    {
      if (!v15)
        goto LABEL_8;
      p_p = (char *)__p;
    }
    else
    {
      if (!HIBYTE(v16))
        goto LABEL_8;
      p_p = (char *)&__p;
    }
    v7 = sub_21A6A16C4(p_p, 0, (unsigned int *)&v13 + 1, 0, 0, 0, 0);
    if ((_DWORD)v7)
      goto LABEL_24;
LABEL_8:
    if (HIDWORD(v13))
    {
      v9 = 1732604485;
      if ((HIDWORD(v13) + 1) >= 2 && (HIBYTE(HIDWORD(v13)) - 225) >= 0xE)
        goto LABEL_23;
      goto LABEL_11;
    }
    if (!sub_21A6AF0B4(a1, 1400460148))
      goto LABEL_23;
    sub_21A6B2D64((unsigned __int8 *)v17, 2002863154, &v19);
    v7 = sub_21A6B7B5C(a1, (uint64_t)&v19, (uint64_t)&__p, 0);
    if ((_DWORD)v7)
      goto LABEL_24;
    if (SHIBYTE(v16) < 0)
    {
      if (v15)
      {
        v10 = (char *)__p;
LABEL_19:
        v7 = sub_21A6A16C4(v10, 0, (unsigned int *)&v13, 0, 0, 0, 0);
        if ((_DWORD)v7)
          goto LABEL_24;
      }
    }
    else if (HIBYTE(v16))
    {
      v10 = (char *)&__p;
      goto LABEL_19;
    }
    sub_21A6B2D64((unsigned __int8 *)v17, 2002862934, &v19);
    v7 = sub_21A6B77DC(a1, (uint64_t)&v19, &v12, 0);
    if (v7 | v13)
      goto LABEL_24;
    if ((v12 & 0x400) == 0 || sub_21A6EB6D4(a1, 1849970259))
      goto LABEL_23;
    v9 = 1849970259;
LABEL_11:
    sub_21A6EB47C(2002863153, v9, a3, a4);
LABEL_23:
    v7 = 0;
  }
LABEL_24:
  if (SHIBYTE(v16) < 0)
    operator delete(__p);
  if (v18 < 0)
    operator delete(v17[0]);
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v19.__r_.__value_.__l.__data_);
  return v7;
}

void sub_21A6ED374(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  uint64_t v23;

  if (*(char *)(v23 - 33) < 0)
    operator delete(*(void **)(v23 - 56));
  _Unwind_Resume(exception_object);
}

uint64_t sub_21A6ED3B8(uint64_t a1, char *a2, void **a3, uint64_t *a4)
{
  uint64_t v7;
  char *p_p;
  unsigned int v10;
  void *__p;
  uint64_t v12;
  uint64_t v13;
  void *v14[2];
  char v15;
  std::string v16;

  memset(&v16, 0, sizeof(v16));
  sub_21A6CE0F0(v14, a2);
  __p = 0;
  v12 = 0;
  v13 = 0;
  v10 = 0;
  sub_21A6B2D64((unsigned __int8 *)v14, 2002863154, &v16);
  v7 = sub_21A6B7B5C(a1, (uint64_t)&v16, (uint64_t)&__p, 0);
  if (!(_DWORD)v7)
  {
    if (SHIBYTE(v13) < 0)
    {
      if (v12)
      {
        p_p = (char *)__p;
        goto LABEL_7;
      }
    }
    else if (HIBYTE(v13))
    {
      p_p = (char *)&__p;
LABEL_7:
      v7 = sub_21A6A16C4(p_p, 0, &v10, 0, 0, 0, 0);
      if ((_DWORD)v7)
        goto LABEL_13;
      if (v10 && (v10 + 1 < 2 || HIBYTE(v10) - 225 <= 0xDu))
        sub_21A6EB47C(2002863154, 1732604485, a3, a4);
    }
    v7 = 0;
  }
LABEL_13:
  if (SHIBYTE(v13) < 0)
    operator delete(__p);
  if (v15 < 0)
    operator delete(v14[0]);
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v16.__r_.__value_.__l.__data_);
  return v7;
}

void sub_21A6ED4F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_21A6ED538(uint64_t a1, char *a2, void **a3, uint64_t *a4)
{
  uint64_t v7;
  char *v8;
  unsigned int v10;
  void *__p[2];
  uint64_t v12;
  int v13;
  void *v14[2];
  char v15;
  std::string v16;

  memset(&v16, 0, sizeof(v16));
  sub_21A6CE0F0(v14, a2);
  v13 = 0;
  sub_21A6B2D64((unsigned __int8 *)v14, 2002862934, &v16);
  v7 = sub_21A6B77DC(a1, (uint64_t)&v16, &v13, 0);
  if (!(_DWORD)v7)
  {
    if ((v13 & 0x400) != 0)
    {
      __p[0] = 0;
      __p[1] = 0;
      v12 = 0;
      v10 = 0;
      sub_21A6B2D64((unsigned __int8 *)v14, 2002864464, &v16);
      v7 = sub_21A6B7B5C(a1, (uint64_t)&v16, (uint64_t)__p, 0);
      if (!(_DWORD)v7)
      {
        v8 = v12 >= 0 ? (char *)__p : (char *)__p[0];
        v7 = sub_21A6A16C4(v8, 0, &v10, 0, 0, 0, 0);
        if (!(_DWORD)v7)
        {
          if (v10 + 1 < 2 || HIBYTE(v10) - 225 <= 0xDu)
            sub_21A6EB47C(2002864464, 1732604485, a3, a4);
          v7 = 0;
        }
      }
      if (SHIBYTE(v12) < 0)
        operator delete(__p[0]);
    }
    else
    {
      v7 = 0;
    }
  }
  if (v15 < 0)
    operator delete(v14[0]);
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v16.__r_.__value_.__l.__data_);
  return v7;
}

void sub_21A6ED6A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  uint64_t v23;

  if (a16 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  if (*(char *)(v23 - 33) < 0)
    operator delete(*(void **)(v23 - 56));
  _Unwind_Resume(exception_object);
}

uint64_t sub_21A6ED6F4(uint64_t a1, char *a2, void **a3, uint64_t *a4)
{
  uint64_t v7;
  uint64_t v8;
  void *__p;
  uint64_t v11;
  uint64_t v12;
  int v13;
  void *v14[2];
  char v15;
  std::string v16;

  memset(&v16, 0, sizeof(v16));
  sub_21A6CE0F0(v14, a2);
  v13 = 0;
  sub_21A6B2D64((unsigned __int8 *)v14, 2002862934, &v16);
  v7 = sub_21A6B77DC(a1, (uint64_t)&v16, &v13, 0);
  if (!(_DWORD)v7)
  {
    if ((v13 & 0x400) != 0)
    {
      __p = 0;
      v11 = 0;
      v12 = 0;
      sub_21A6B2D64((unsigned __int8 *)v14, 2002867021, &v16);
      v7 = sub_21A6B7B5C(a1, (uint64_t)&v16, (uint64_t)&__p, 0);
      if (!(_DWORD)v7)
      {
        v8 = HIBYTE(v12);
        if (v12 < 0)
          v8 = v11;
        if (!v8)
          sub_21A6EB47C(2002867021, 1732604485, a3, a4);
      }
      if (SHIBYTE(v12) < 0)
        operator delete(__p);
    }
    else
    {
      v7 = 0;
    }
  }
  if (v15 < 0)
    operator delete(v14[0]);
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v16.__r_.__value_.__l.__data_);
  return v7;
}

void sub_21A6ED81C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a14 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a27 < 0)
    operator delete(a22);
  _Unwind_Resume(exception_object);
}

uint64_t sub_21A6ED868(uint64_t a1, char *a2, void **a3, uint64_t *a4)
{
  uint64_t v7;
  char *p_p;
  char *v10;
  int v11;
  char *v12;
  int v13;
  unsigned int v14;
  void *__p;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  int v20;
  void *v21[2];
  char v22;
  std::string v23;

  memset(&v23, 0, sizeof(v23));
  sub_21A6CE0F0(v21, a2);
  v20 = 0;
  sub_21A6B2D64((unsigned __int8 *)v21, 2002862934, &v23);
  v7 = sub_21A6B77DC(a1, (uint64_t)&v23, &v20, 0);
  if ((_DWORD)v7)
    goto LABEL_7;
  if ((v20 & 0x400) == 0)
  {
    v7 = 0;
    goto LABEL_7;
  }
  v19 = 0;
  v17 = 0;
  v18 = 0;
  __p = 0;
  v16 = 0;
  sub_21A6B2D64((unsigned __int8 *)v21, 2002867021, &v23);
  v7 = sub_21A6B7B5C(a1, (uint64_t)&v23, (uint64_t)&__p, 0);
  if (!(_DWORD)v7)
  {
    if (SHIBYTE(v17) < 0)
    {
      if (!v16)
        goto LABEL_18;
      p_p = (char *)__p;
    }
    else
    {
      if (!HIBYTE(v17))
        goto LABEL_18;
      p_p = (char *)&__p;
    }
    v7 = sub_21A6A16C4(p_p, 0, &v19, 0, 0, 0, 0);
    if ((_DWORD)v7)
      goto LABEL_5;
LABEL_18:
    sub_21A6B2D64((unsigned __int8 *)v21, 2002866753, &v23);
    v7 = sub_21A6B7B5C(a1, (uint64_t)&v23, (uint64_t)&__p, 0);
    if ((_DWORD)v7)
      goto LABEL_5;
    if (SHIBYTE(v17) < 0)
    {
      if (!v16)
        goto LABEL_25;
      v10 = (char *)__p;
    }
    else
    {
      if (!HIBYTE(v17))
        goto LABEL_25;
      v10 = (char *)&__p;
    }
    v7 = sub_21A6A16C4(v10, 0, (unsigned int *)&v18 + 1, 0, 0, 0, 0);
    if ((_DWORD)v7)
      goto LABEL_5;
LABEL_25:
    sub_21A6B2D64((unsigned __int8 *)v21, 2002864464, &v23);
    v7 = sub_21A6B7B5C(a1, (uint64_t)&v23, (uint64_t)&__p, 0);
    if ((_DWORD)v7)
      goto LABEL_5;
    v11 = SHIBYTE(v17);
    if (SHIBYTE(v17) < 0)
    {
      v11 = v16;
      if (!v16)
        goto LABEL_33;
      v12 = (char *)__p;
    }
    else
    {
      if (!HIBYTE(v17))
        goto LABEL_33;
      v12 = (char *)&__p;
    }
    v7 = sub_21A6A16C4(v12, 0, (unsigned int *)&v18, 0, 0, 0, 0);
    if ((_DWORD)v7)
      goto LABEL_5;
    v11 = v18;
LABEL_33:
    v13 = 1732604485;
    if ((HIDWORD(v18) + 1) >= 2 && (HIBYTE(HIDWORD(v18)) - 225) >= 0xE)
    {
      v7 = 0;
      v14 = v19 & v11;
      if (v14 == -1442971648 || (HIDWORD(v18) & v19) == v14)
        goto LABEL_5;
      v13 = 1920159053;
    }
    sub_21A6EB47C(2002866753, v13, a3, a4);
    v7 = 0;
  }
LABEL_5:
  if (SHIBYTE(v17) < 0)
    operator delete(__p);
LABEL_7:
  if (v22 < 0)
    operator delete(v21[0]);
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v23.__r_.__value_.__l.__data_);
  return v7;
}

void sub_21A6EDB00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  uint64_t v23;

  if (a15 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  if (*(char *)(v23 - 33) < 0)
    operator delete(*(void **)(v23 - 56));
  _Unwind_Resume(exception_object);
}

uint64_t sub_21A6EDB4C(uint64_t a1, char *a2, void **a3, uint64_t *a4)
{
  uint64_t v7;
  unint64_t v8;
  void *__p;
  unint64_t v11;
  uint64_t v12;
  void *v13[2];
  char v14;
  std::string v15;

  memset(&v15, 0, sizeof(v15));
  sub_21A6CE0F0(v13, a2);
  __p = 0;
  v11 = 0;
  v12 = 0;
  sub_21A6B2D64((unsigned __int8 *)v13, 2002863171, &v15);
  v7 = sub_21A6B7B5C(a1, (uint64_t)&v15, (uint64_t)&__p, 0);
  if (!(_DWORD)v7)
  {
    v8 = HIBYTE(v12);
    if (v12 < 0)
      v8 = v11;
    if (v8 >= 0x40)
      sub_21A6EB47C(2002863171, 1732604483, a3, a4);
  }
  if (SHIBYTE(v12) < 0)
    operator delete(__p);
  if (v14 < 0)
    operator delete(v13[0]);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v15.__r_.__value_.__l.__data_);
  return v7;
}

void sub_21A6EDC34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_21A6EDC78(uint64_t a1, char *a2, void **a3, uint64_t *a4)
{
  uint64_t v7;
  char v8;
  void *__p;
  unint64_t v11;
  uint64_t v12;
  void *v13[2];
  char v14;
  std::string v15;

  memset(&v15, 0, sizeof(v15));
  sub_21A6CE0F0(v13, a2);
  __p = 0;
  v11 = 0;
  v12 = 0;
  sub_21A6B2D64((unsigned __int8 *)v13, 2002863182, &v15);
  v7 = sub_21A6B7B5C(a1, (uint64_t)&v15, (uint64_t)&__p, 0);
  v8 = HIBYTE(v12);
  if (!(_DWORD)v7 && SHIBYTE(v12) < 0 && v11 > 0x100)
  {
    sub_21A6EB47C(2002863182, 1732604483, a3, a4);
    v8 = HIBYTE(v12);
  }
  if (v8 < 0)
    operator delete(__p);
  if (v14 < 0)
    operator delete(v13[0]);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v15.__r_.__value_.__l.__data_);
  return v7;
}

void sub_21A6EDD58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_21A6EDD9C(uint64_t a1, char *a2, void **a3, uint64_t *a4)
{
  uint64_t v7;
  uint64_t v8;
  const char *p_p;
  uint64_t v10;
  void *__p;
  uint64_t v13;
  uint64_t v14;
  int v15;
  void *v16[2];
  char v17;
  std::string v18;

  memset(&v18, 0, sizeof(v18));
  sub_21A6CE0F0(v16, a2);
  v15 = 0;
  __p = 0;
  v13 = 0;
  v14 = 0;
  sub_21A6B2D64((unsigned __int8 *)v16, 2002864494, &v18);
  v7 = sub_21A6B77DC(a1, (uint64_t)&v18, &v15, 0);
  if ((_DWORD)v7)
    goto LABEL_16;
  sub_21A6B2D64((unsigned __int8 *)v16, 1836011598, &v18);
  v7 = sub_21A6B7B5C(a1, (uint64_t)&v18, (uint64_t)&__p, 0);
  if ((_DWORD)v7)
    goto LABEL_16;
  if (v15 != 4)
  {
LABEL_15:
    v7 = 0;
    goto LABEL_16;
  }
  if (v14 >= 0)
    v8 = HIBYTE(v14);
  else
    v8 = v13;
  if (!v8)
  {
    sub_21A6EB47C(1836011598, 1732604481, a3, a4);
    goto LABEL_15;
  }
  if (v14 >= 0)
    p_p = (const char *)&__p;
  else
    p_p = (const char *)__p;
  v10 = sub_21A6EDF7C(p_p);
  if ((_DWORD)v10 == -15)
  {
    sub_21A6EB47C(1836011598, 1732604483, a3, a4);
    v7 = 4294967281;
  }
  else
  {
    v7 = v10;
    if ((_DWORD)v10 == -26)
    {
      sub_21A6EB47C(1836011598, 1732604485, a3, a4);
      v7 = 4294967270;
    }
  }
LABEL_16:
  if (SHIBYTE(v14) < 0)
    operator delete(__p);
  if (v17 < 0)
    operator delete(v16[0]);
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v18.__r_.__value_.__l.__data_);
  return v7;
}

void sub_21A6EDF38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_21A6EDF7C(const char *a1)
{
  unsigned int v1;
  unsigned __int8 *v2;
  unsigned int v3;

  v1 = *(unsigned __int8 *)a1;
  if (*a1)
  {
    v2 = (unsigned __int8 *)(a1 + 1);
    while (v1 - 48 <= 9 || v1 <= 0x2E && ((1 << v1) & 0x770000000000) != 0)
    {
      v3 = *v2++;
      v1 = v3;
      if (!v3)
        goto LABEL_7;
    }
    return 4294967270;
  }
  else
  {
LABEL_7:
    if (strlen(a1) <= 0xFF)
      return 0;
    else
      return 4294967281;
  }
}

uint64_t sub_21A6EDFE4(uint64_t a1, char *a2, void **a3, uint64_t *a4)
{
  uint64_t v7;
  void **v9;
  uint64_t v10;
  int v11;
  void *__p[2];
  uint64_t v13;
  void *v14[2];
  char v15;
  std::string v16;

  memset(&v16, 0, sizeof(v16));
  sub_21A6CE0F0(v14, a2);
  __p[0] = 0;
  __p[1] = 0;
  v13 = 0;
  v11 = 0;
  sub_21A6B2D64((unsigned __int8 *)v14, 1836007760, &v16);
  v7 = sub_21A6B7B5C(a1, (uint64_t)&v16, (uint64_t)__p, 0);
  if (!(_DWORD)v7)
  {
    sub_21A6B2D64((unsigned __int8 *)v14, 2002864494, &v16);
    v7 = sub_21A6B77DC(a1, (uint64_t)&v16, &v11, 0);
    if (!(_DWORD)v7 && v11 == 4)
    {
      if (v13 >= 0)
        v9 = __p;
      else
        v9 = (void **)__p[0];
      v10 = sub_21A6EDF7C((const char *)v9);
      if ((_DWORD)v10 == -15)
      {
        sub_21A6EB47C(1836007760, 1732604483, a3, a4);
        v7 = 4294967281;
      }
      else
      {
        v7 = v10;
        if ((_DWORD)v10 == -26)
        {
          sub_21A6EB47C(1836007760, 1732604485, a3, a4);
          v7 = 4294967270;
        }
      }
    }
  }
  if (SHIBYTE(v13) < 0)
    operator delete(__p[0]);
  if (v15 < 0)
    operator delete(v14[0]);
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v16.__r_.__value_.__l.__data_);
  return v7;
}

void sub_21A6EE148(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_21A6EE18C(uint64_t a1, char *a2, void **a3, uint64_t *a4)
{
  uint64_t v7;
  int v9;
  void *__p;
  unint64_t v11;
  uint64_t v12;
  void *v13[2];
  char v14;
  std::string v15;

  memset(&v15, 0, sizeof(v15));
  sub_21A6CE0F0(v13, a2);
  __p = 0;
  v11 = 0;
  v12 = 0;
  v9 = 0;
  sub_21A6B2D64((unsigned __int8 *)v13, 1836012878, &v15);
  v7 = sub_21A6B7B5C(a1, (uint64_t)&v15, (uint64_t)&__p, 0);
  if (!(_DWORD)v7)
  {
    sub_21A6B2D64((unsigned __int8 *)v13, 2002864494, &v15);
    v7 = sub_21A6B77DC(a1, (uint64_t)&v15, &v9, 0);
    if (!(_DWORD)v7 && v9 == 4)
    {
      v7 = 0;
      if (SHIBYTE(v12) < 0 && v11 >= 0x100)
      {
        sub_21A6EB47C(1836012878, 1732604483, a3, a4);
        v7 = 0;
      }
    }
  }
  if (SHIBYTE(v12) < 0)
    operator delete(__p);
  if (v14 < 0)
    operator delete(v13[0]);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v15.__r_.__value_.__l.__data_);
  return v7;
}

void sub_21A6EE2B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_21A6EE2FC(uint64_t a1, char *a2, void **a3, uint64_t *a4)
{
  uint64_t v7;
  int v9;
  void *__p;
  unint64_t v11;
  uint64_t v12;
  void *v13[2];
  char v14;
  std::string v15;

  memset(&v15, 0, sizeof(v15));
  sub_21A6CE0F0(v13, a2);
  __p = 0;
  v11 = 0;
  v12 = 0;
  v9 = 0;
  sub_21A6B2D64((unsigned __int8 *)v13, 1836011607, &v15);
  v7 = sub_21A6B7B5C(a1, (uint64_t)&v15, (uint64_t)&__p, 0);
  if (!(_DWORD)v7)
  {
    sub_21A6B2D64((unsigned __int8 *)v13, 2002864494, &v15);
    v7 = sub_21A6B77DC(a1, (uint64_t)&v15, &v9, 0);
    if (!(_DWORD)v7 && v9 == 4)
    {
      v7 = 0;
      if (SHIBYTE(v12) < 0 && v11 >= 0x100)
      {
        sub_21A6EB47C(1836011607, 1732604485, a3, a4);
        v7 = 0;
      }
    }
  }
  if (SHIBYTE(v12) < 0)
    operator delete(__p);
  if (v14 < 0)
    operator delete(v13[0]);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v15.__r_.__value_.__l.__data_);
  return v7;
}

void sub_21A6EE428(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_21A6EE46C(uint64_t a1, char *a2, void **a3, uint64_t *a4)
{
  uint64_t v7;
  int v9;
  int v10;
  void *__p[2];
  char v12;
  std::string v13;

  memset(&v13, 0, sizeof(v13));
  sub_21A6CE0F0(__p, a2);
  v10 = 0;
  sub_21A6B2D64((unsigned __int8 *)__p, 2002864494, &v13);
  v7 = sub_21A6B77DC(a1, (uint64_t)&v13, &v10, 0);
  if ((_DWORD)v7)
    goto LABEL_4;
  if (v10 != 4)
    goto LABEL_4;
  v9 = 0;
  sub_21A6B2D64((unsigned __int8 *)__p, 1836009796, &v13);
  v7 = sub_21A6B77DC(a1, (uint64_t)&v13, &v9, 0);
  if ((_DWORD)v7)
    goto LABEL_4;
  if (v9 > 299)
  {
    if (v9 <= 899)
    {
      if (v9 == 300 || v9 == 600)
        goto LABEL_4;
    }
    else if (v9 == 900 || v9 == 1200 || v9 == 1800)
    {
      goto LABEL_4;
    }
LABEL_21:
    sub_21A6EB47C(1836009796, 1732604485, a3, a4);
    goto LABEL_4;
  }
  if ((v9 > 0x3C || ((1 << v9) & 0x1000000040000001) == 0) && v9 != 120)
    goto LABEL_21;
LABEL_4:
  if (v12 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
  return v7;
}

void sub_21A6EE5D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  _Unwind_Resume(exception_object);
}

uint64_t sub_21A6EE610(uint64_t a1, char *a2, void **a3, uint64_t *a4)
{
  uint64_t v7;
  unsigned int v9;
  unsigned int v10;
  int v11;
  void *__p[2];
  char v13;
  std::string v14;

  memset(&v14, 0, sizeof(v14));
  sub_21A6CE0F0(__p, a2);
  v11 = 0;
  sub_21A6B2D64((unsigned __int8 *)__p, 2002864494, &v14);
  v7 = sub_21A6B77DC(a1, (uint64_t)&v14, &v11, 0);
  if (!(_DWORD)v7 && v11 == 4)
  {
    v9 = 0;
    v10 = 0;
    sub_21A6B2D64((unsigned __int8 *)__p, 1836008259, &v14);
    v7 = sub_21A6B77DC(a1, (uint64_t)&v14, &v10, 0);
    if (!(_DWORD)v7)
    {
      sub_21A6B2D64((unsigned __int8 *)__p, 1836008265, &v14);
      v7 = sub_21A6B77DC(a1, (uint64_t)&v14, &v9, 0);
      if (!(_DWORD)v7)
      {
        if (v10 > 0x62 || v9 >= 0x26)
          sub_21A6EB47C(1651721027, 1732604485, a3, a4);
        v7 = 0;
      }
    }
  }
  if (v13 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__r_.__value_.__l.__data_);
  return v7;
}

void sub_21A6EE754(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_21A6EE78C(uint64_t a1, char *a2, void **a3, uint64_t *a4)
{
  uint64_t v7;
  int v9;
  int v10;
  void *__p[2];
  char v12;
  std::string v13;

  memset(&v13, 0, sizeof(v13));
  sub_21A6CE0F0(__p, a2);
  v10 = 0;
  sub_21A6B2D64((unsigned __int8 *)__p, 2002864494, &v13);
  v7 = sub_21A6B77DC(a1, (uint64_t)&v13, &v10, 0);
  if (!(_DWORD)v7 && v10 == 4)
  {
    v9 = 0;
    sub_21A6B2D64((unsigned __int8 *)__p, 1836010832, &v13);
    v7 = sub_21A6B77DC(a1, (uint64_t)&v13, &v9, 0);
    if (!(_DWORD)v7 && (v9 - 3) <= 0xFFFFFFFD)
      sub_21A6EB47C(1836010832, 1732604485, a3, a4);
  }
  if (v12 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
  return v7;
}

void sub_21A6EE894(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  _Unwind_Resume(exception_object);
}

BOOL sub_21A6EE8CC(uint64_t a1, char *a2)
{
  int v3;
  char v4;
  int v6;
  void *__p[2];
  char v8;
  std::string v9;

  memset(&v9, 0, sizeof(v9));
  sub_21A6CE0F0(__p, a2);
  v6 = 0;
  sub_21A6B2D64((unsigned __int8 *)__p, 1752641585, &v9);
  v3 = sub_21A6B77DC(a1, (uint64_t)&v9, &v6, 0);
  v4 = v6;
  if (v8 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v9.__r_.__value_.__l.__data_);
  return (v3 | v4 & 1) == 0;
}

void sub_21A6EE964(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_21A6EE998(uint64_t a1, char *a2, void **a3, uint64_t *a4)
{
  _BOOL4 v8;
  BOOL v9;
  uint64_t v10;
  unint64_t v11;
  int v12;
  void *__p;
  unint64_t v16;
  uint64_t v17;
  void *v18[2];
  char v19;
  std::string v20;

  memset(&v20, 0, sizeof(v20));
  sub_21A6CE0F0(v18, a2);
  __p = 0;
  v16 = 0;
  v17 = 0;
  v8 = sub_21A6EE8CC(a1, a2);
  v9 = sub_21A6AF0B4(a1, 1382368329);
  sub_21A6B2D64((unsigned __int8 *)v18, 1885623630, &v20);
  v10 = sub_21A6B7B5C(a1, (uint64_t)&v20, (uint64_t)&__p, 0);
  if (!(_DWORD)v10)
  {
    v11 = HIBYTE(v17);
    if (v17 < 0)
      v11 = v16;
    if (v11)
    {
      v12 = 1732604483;
      if (v8 && v9)
      {
        if (v11 <= 0xFF)
          goto LABEL_13;
      }
      else
      {
        v12 = 1732604484;
      }
      sub_21A6EB47C(1885623630, v12, a3, a4);
    }
  }
LABEL_13:
  if (SHIBYTE(v17) < 0)
    operator delete(__p);
  if (v19 < 0)
    operator delete(v18[0]);
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v20.__r_.__value_.__l.__data_);
  return v10;
}

void sub_21A6EEAC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a21 < 0)
    operator delete(__p);
  if (a27 < 0)
    operator delete(a22);
  _Unwind_Resume(exception_object);
}

uint64_t sub_21A6EEB14(uint64_t a1, char *a2, void **a3, uint64_t *a4)
{
  _BOOL4 v8;
  BOOL v9;
  uint64_t v10;
  unint64_t v11;
  int v12;
  void *__p;
  unint64_t v16;
  uint64_t v17;
  void *v18[2];
  char v19;
  std::string v20;

  memset(&v20, 0, sizeof(v20));
  sub_21A6CE0F0(v18, a2);
  __p = 0;
  v16 = 0;
  v17 = 0;
  v8 = sub_21A6EE8CC(a1, a2);
  v9 = sub_21A6AF0B4(a1, 1382368329);
  sub_21A6B2D64((unsigned __int8 *)v18, 1885622359, &v20);
  v10 = sub_21A6B7B5C(a1, (uint64_t)&v20, (uint64_t)&__p, 0);
  if (!(_DWORD)v10)
  {
    v11 = HIBYTE(v17);
    if (v17 < 0)
      v11 = v16;
    if (v11)
    {
      v12 = 1732604483;
      if (v8 && v9)
      {
        if (v11 <= 0xFF)
          goto LABEL_13;
      }
      else
      {
        v12 = 1732604484;
      }
      sub_21A6EB47C(1885622359, v12, a3, a4);
    }
  }
LABEL_13:
  if (SHIBYTE(v17) < 0)
    operator delete(__p);
  if (v19 < 0)
    operator delete(v18[0]);
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v20.__r_.__value_.__l.__data_);
  return v10;
}

void sub_21A6EEC44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a21 < 0)
    operator delete(__p);
  if (a27 < 0)
    operator delete(a22);
  _Unwind_Resume(exception_object);
}

uint64_t sub_21A6EEC90(uint64_t a1, char *a2, void **a3, uint64_t *a4)
{
  char *v6;
  _BOOL4 v8;
  _BOOL4 v9;
  uint64_t v10;
  int v12;
  void *__p[2];
  char v14;
  std::string v15;

  v6 = a2;
  memset(&v15, 0, sizeof(v15));
  sub_21A6CE0F0(__p, a2);
  LODWORD(v6) = sub_21A6EE8CC(a1, v6);
  v8 = sub_21A6AF0B4(a1, 1382368329);
  if ((_DWORD)v6)
    v9 = v8;
  else
    v9 = 0;
  if (v9)
  {
    v12 = 0;
    sub_21A6B2D64((unsigned __int8 *)__p, 1885618514, &v15);
    v10 = sub_21A6B77DC(a1, (uint64_t)&v15, &v12, 0);
    if (!(_DWORD)v10 && (v12 - 8) <= 0xFFFFFFF8)
      sub_21A6EB47C(1885618514, 1732604485, a3, a4);
  }
  else
  {
    v10 = 0;
  }
  if (v14 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v15.__r_.__value_.__l.__data_);
  return v10;
}

void sub_21A6EED94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  _Unwind_Resume(exception_object);
}

uint64_t sub_21A6EEDD0(uint64_t a1, char *a2, void **a3, uint64_t *a4)
{
  char *v6;
  _BOOL4 v8;
  _BOOL4 v9;
  uint64_t v10;
  int v12;
  void *__p[2];
  char v14;
  std::string v15;

  v6 = a2;
  memset(&v15, 0, sizeof(v15));
  sub_21A6CE0F0(__p, a2);
  LODWORD(v6) = sub_21A6EE8CC(a1, v6);
  v8 = sub_21A6AF0B4(a1, 1382368329);
  if ((_DWORD)v6)
    v9 = v8;
  else
    v9 = 0;
  if (!v9)
  {
    v10 = 0;
    goto LABEL_13;
  }
  v12 = 0;
  sub_21A6B2D64((unsigned __int8 *)__p, 1885620548, &v15);
  v10 = sub_21A6B77DC(a1, (uint64_t)&v15, &v12, 0);
  if ((_DWORD)v10)
    goto LABEL_13;
  if (v12 <= 299)
  {
    if ((v12 > 0x3C || ((1 << v12) & 0x1000000040000001) == 0) && v12 != 120)
      goto LABEL_24;
  }
  else if (v12 <= 899)
  {
    if (v12 != 300 && v12 != 600)
      goto LABEL_24;
  }
  else if (v12 != 900 && v12 != 1200 && v12 != 1800)
  {
LABEL_24:
    sub_21A6EB47C(1885620548, 1732604485, a3, a4);
  }
LABEL_13:
  if (v14 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v15.__r_.__value_.__l.__data_);
  return v10;
}

void sub_21A6EEF34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  _Unwind_Resume(exception_object);
}

uint64_t sub_21A6EEF70(uint64_t a1, char *a2, void **a3, uint64_t *a4)
{
  char *v6;
  _BOOL4 v8;
  _BOOL4 v9;
  uint64_t v10;
  int v11;
  int v13;
  void *__p[2];
  char v15;
  std::string v16;

  v6 = a2;
  memset(&v16, 0, sizeof(v16));
  sub_21A6CE0F0(__p, a2);
  LODWORD(v6) = sub_21A6EE8CC(a1, v6);
  v8 = sub_21A6AF0B4(a1, 1382368329);
  if ((_DWORD)v6)
    v9 = v8;
  else
    v9 = 0;
  if (!v9)
  {
    v10 = 0;
    goto LABEL_11;
  }
  v13 = 0;
  sub_21A6B2D64((unsigned __int8 *)__p, 1885621571, &v16);
  v10 = sub_21A6B77DC(a1, (uint64_t)&v16, &v13, 0);
  if ((_DWORD)v10)
    goto LABEL_11;
  if (v13 <= 3599)
  {
    if (v13 && v13 != 900 && v13 != 1800)
LABEL_23:
      sub_21A6EB47C(1885621571, 1732604485, a3, a4);
  }
  else
  {
    if (v13 > 14399)
    {
      if (v13 == 14400)
        goto LABEL_11;
      v11 = 28800;
    }
    else
    {
      if (v13 == 3600)
        goto LABEL_11;
      v11 = 7200;
    }
    if (v13 != v11)
      goto LABEL_23;
  }
LABEL_11:
  if (v15 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v16.__r_.__value_.__l.__data_);
  return v10;
}

void sub_21A6EF0BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  _Unwind_Resume(exception_object);
}

uint64_t sub_21A6EF0F8(uint64_t a1, char *a2, void **a3, uint64_t *a4)
{
  uint64_t v7;
  char v8;
  void *__p;
  unint64_t v11;
  uint64_t v12;
  void *v13[2];
  char v14;
  std::string v15;

  memset(&v15, 0, sizeof(v15));
  sub_21A6CE0F0(v13, a2);
  __p = 0;
  v11 = 0;
  v12 = 0;
  sub_21A6B2D64((unsigned __int8 *)v13, 1885688654, &v15);
  v7 = sub_21A6B7B5C(a1, (uint64_t)&v15, (uint64_t)&__p, 0);
  v8 = HIBYTE(v12);
  if (!(_DWORD)v7 && SHIBYTE(v12) < 0 && v11 > 0xFF)
  {
    sub_21A6EB47C(1885688654, 1732604483, a3, a4);
    v8 = HIBYTE(v12);
  }
  if (v8 < 0)
    operator delete(__p);
  if (v14 < 0)
    operator delete(v13[0]);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v15.__r_.__value_.__l.__data_);
  return v7;
}

void sub_21A6EF1D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_21A6EF21C(uint64_t a1, char *a2, void **a3, uint64_t *a4)
{
  uint64_t v7;
  char v8;
  void *__p;
  unint64_t v11;
  uint64_t v12;
  void *v13[2];
  char v14;
  std::string v15;

  memset(&v15, 0, sizeof(v15));
  sub_21A6CE0F0(v13, a2);
  if (sub_21A6EF35C(a1))
  {
    __p = 0;
    v11 = 0;
    v12 = 0;
    sub_21A6B2D64((unsigned __int8 *)v13, 1885689166, &v15);
    v7 = sub_21A6B7B5C(a1, (uint64_t)&v15, (uint64_t)&__p, 0);
    v8 = HIBYTE(v12);
    if (!(_DWORD)v7 && SHIBYTE(v12) < 0 && v11 > 0xFF)
    {
      sub_21A6EB47C(1885689166, 1732604483, a3, a4);
      v8 = HIBYTE(v12);
    }
    if (v8 < 0)
      operator delete(__p);
  }
  else
  {
    v7 = 0;
  }
  if (v14 < 0)
    operator delete(v13[0]);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v15.__r_.__value_.__l.__data_);
  return v7;
}

void sub_21A6EF310(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a21 < 0)
    operator delete(__p);
  if (a27 < 0)
    operator delete(a22);
  _Unwind_Resume(exception_object);
}

BOOL sub_21A6EF35C(uint64_t a1)
{
  _BOOL8 v2;
  uint64_t v5;
  void *__p[2];
  uint64_t v7;
  std::string v8;

  memset(&v8, 0, sizeof(v8));
  __p[0] = 0;
  __p[1] = 0;
  v7 = 0;
  v5 = 0;
  sub_21A6B2D64((unsigned __int8 *)__p, 2002864494, &v8);
  v2 = !sub_21A6B77DC(a1, (uint64_t)&v8, (char *)&v5 + 4, 0)
    && (sub_21A6B2D64((unsigned __int8 *)__p, 2002862934, &v8), !sub_21A6B77DC(a1, (uint64_t)&v8, &v5, 0))
    && (~(_DWORD)v5 & 0x900) == 0
    && HIDWORD(v5) == 16;
  if (SHIBYTE(v7) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v8.__r_.__value_.__l.__data_);
  return v2;
}

void sub_21A6EF42C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  _Unwind_Resume(exception_object);
}

uint64_t sub_21A6EF458(uint64_t a1, char *a2, void **a3, uint64_t *a4)
{
  uint64_t v7;
  char v8;
  void *__p;
  unint64_t v11;
  uint64_t v12;
  void *v13[2];
  char v14;
  std::string v15;

  memset(&v15, 0, sizeof(v15));
  sub_21A6CE0F0(v13, a2);
  if (sub_21A6EF35C(a1))
  {
    __p = 0;
    v11 = 0;
    v12 = 0;
    sub_21A6B2D64((unsigned __int8 *)v13, 1885687895, &v15);
    v7 = sub_21A6B7B5C(a1, (uint64_t)&v15, (uint64_t)&__p, 0);
    v8 = HIBYTE(v12);
    if (!(_DWORD)v7 && SHIBYTE(v12) < 0 && v11 > 0xFF)
    {
      sub_21A6EB47C(1885687895, 1732604483, a3, a4);
      v8 = HIBYTE(v12);
    }
    if (v8 < 0)
      operator delete(__p);
  }
  else
  {
    v7 = 0;
  }
  if (v14 < 0)
    operator delete(v13[0]);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v15.__r_.__value_.__l.__data_);
  return v7;
}

void sub_21A6EF54C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a21 < 0)
    operator delete(__p);
  if (a27 < 0)
    operator delete(a22);
  _Unwind_Resume(exception_object);
}

uint64_t sub_21A6EF598(uint64_t a1, char *a2, void **a3, uint64_t *a4)
{
  uint64_t v7;
  BOOL v9;
  int v10;
  void *__p[2];
  char v12;
  std::string v13;

  memset(&v13, 0, sizeof(v13));
  sub_21A6CE0F0(__p, a2);
  if (!sub_21A6EF35C(a1))
    goto LABEL_22;
  v10 = 0;
  sub_21A6B2D64((unsigned __int8 *)__p, 1885686084, &v13);
  v7 = sub_21A6B77DC(a1, (uint64_t)&v13, &v10, 0);
  if ((_DWORD)v7)
    goto LABEL_23;
  v7 = v10;
  if (v10 <= 299)
  {
    if (v10 > 59)
    {
      if (v10 != 60 && v10 != 120)
        goto LABEL_21;
    }
    else
    {
      if (!v10)
        goto LABEL_23;
      if (v10 != 30)
        goto LABEL_21;
    }
  }
  else if (v10 <= 899)
  {
    if (v10 != 300 && v10 != 600)
      goto LABEL_21;
  }
  else if (v10 != 900 && v10 != 1800 && v10 != 1200)
  {
LABEL_21:
    sub_21A6EB47C(1885686084, 1732604485, a3, a4);
LABEL_22:
    v7 = 0;
    goto LABEL_23;
  }
  v9 = 0;
  sub_21A6B2D64((unsigned __int8 *)__p, 2002929006, &v13);
  v7 = sub_21A6B79E0(a1, (uint64_t)&v13, &v9, 0);
  if (!(_DWORD)v7 && v9)
    sub_21A6EB47C(1885686084, 1464880708, a3, a4);
LABEL_23:
  if (v12 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
  return v7;
}

void sub_21A6EF728(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  _Unwind_Resume(exception_object);
}

uint64_t sub_21A6EF764(uint64_t a1, char *a2, void **a3, uint64_t *a4)
{
  uint64_t v7;
  char *p_p;
  char *v9;
  char *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  unsigned int v23;
  unint64_t v24;
  void *__p;
  uint64_t v26;
  uint64_t v27;
  void *v28[2];
  char v29;
  std::string v30;

  memset(&v30, 0, sizeof(v30));
  sub_21A6CE0F0(v28, a2);
  __p = 0;
  v26 = 0;
  v27 = 0;
  v24 = 0;
  v23 = 0;
  v22 = 0;
  sub_21A6B2D64((unsigned __int8 *)v28, 1918977107, &v30);
  v7 = sub_21A6B79E0(a1, (uint64_t)&v30, &v22, 0);
  if ((_DWORD)v7)
    goto LABEL_29;
  if (!v22)
    goto LABEL_29;
  sub_21A6B2D64((unsigned __int8 *)v28, 1684554343, &v30);
  v7 = sub_21A6B7B5C(a1, (uint64_t)&v30, (uint64_t)&__p, 0);
  if ((_DWORD)v7)
    goto LABEL_29;
  if (v27 >= 0)
    p_p = (char *)&__p;
  else
    p_p = (char *)__p;
  v7 = sub_21A6A16C4(p_p, 0, (unsigned int *)&v24 + 1, 0, 0, 0, 0);
  if ((_DWORD)v7)
  {
    sub_21A6EB47C(1684554343, 1732604485, a3, a4);
    goto LABEL_29;
  }
  sub_21A6B2D64((unsigned __int8 *)v28, 1684555118, &v30);
  v7 = sub_21A6B7B5C(a1, (uint64_t)&v30, (uint64_t)&__p, 0);
  if ((_DWORD)v7)
    goto LABEL_29;
  v9 = v27 >= 0 ? (char *)&__p : (char *)__p;
  v7 = sub_21A6A16C4(v9, 0, (unsigned int *)&v24, 0, 0, 0, 0);
  if ((_DWORD)v7)
    goto LABEL_29;
  sub_21A6B2D64((unsigned __int8 *)v28, 2002864464, &v30);
  v7 = sub_21A6B7B5C(a1, (uint64_t)&v30, (uint64_t)&__p, 0);
  if ((_DWORD)v7)
    goto LABEL_29;
  if ((SHIBYTE(v27) & 0x80000000) == 0)
  {
    if (HIBYTE(v27))
    {
      v10 = (char *)&__p;
      goto LABEL_20;
    }
LABEL_22:
    v23 = 0;
    goto LABEL_23;
  }
  if (!v26)
    goto LABEL_22;
  v10 = (char *)__p;
LABEL_20:
  v7 = sub_21A6A16C4(v10, 0, &v23, 0, 0, 0, 0);
  if ((_DWORD)v7)
    goto LABEL_29;
LABEL_23:
  if ((HIDWORD(v24) + 1) < 2
    || (v11 = bswap32(HIDWORD(v24)), v11 - 225 < 0xE)
    || (v12 = v11 & 0xFF000000, v12 == -16777216)
    || !v12)
  {
    sub_21A6EB47C(1684554343, 1732604485, a3, a4);
LABEL_28:
    v7 = 0;
    goto LABEL_29;
  }
  if ((v24 + 1) < 2)
    goto LABEL_28;
  v14 = bswap32(v24);
  if (v14 - 225 < 0xE)
    goto LABEL_28;
  v7 = 0;
  v15 = v14 & 0xFF000000;
  if (v15 != -16777216)
  {
    if (v15)
    {
      v20 = 0;
      v21 = 0;
      sub_21A6B2D64((unsigned __int8 *)v28, 2002862934, &v30);
      v7 = sub_21A6B77DC(a1, (uint64_t)&v30, (char *)&v21 + 4, 0);
      if (!(_DWORD)v7)
      {
        v7 = sub_21A6B77DC(a1, (uint64_t)&v30, &v21, 2);
        if (!(_DWORD)v7)
        {
          MEMORY[0x220747320](&v30, "WiFi.radios.[*].");
          sub_21A6B2D64((unsigned __int8 *)&v30, 1651723853, &v30);
          v7 = sub_21A6B77DC(a1, (uint64_t)&v30, (char *)&v20 + 4, 0);
          if (!(_DWORD)v7)
          {
            v7 = sub_21A6B77DC(a1, (uint64_t)&v30, &v20, 2);
            if (!(_DWORD)v7)
            {
              v16 = bswap32(HIDWORD(v24));
              v17 = bswap32(v24);
              v24 = __PAIR64__(v16, v17);
              v23 = bswap32(v23);
              if (((v17 ^ v16) & 0xFFFFFF) != 0)
                goto LABEL_28;
              v18 = HIBYTE(v16);
              if (v18 == 1 || v18 > HIBYTE(v17))
                goto LABEL_28;
              if ((v21 & 0x400) != 0)
              {
                v7 = 0;
                if ((v21 & 0x10000000000) != 0 || (_DWORD)v20 != HIDWORD(v20))
                  goto LABEL_29;
              }
              else if ((_DWORD)v20 != HIDWORD(v20))
              {
                goto LABEL_28;
              }
              v19 = 0;
              sub_21A6B2D64((unsigned __int8 *)v28, 1918979649, &v30);
              v7 = sub_21A6B79E0(a1, (uint64_t)&v30, &v19, 0);
              if ((_DWORD)v7)
                goto LABEL_29;
              if (v19)
              {
                if (((v24 ^ v23) & 0xFFFFFF) != 0)
                  goto LABEL_29;
                goto LABEL_58;
              }
              if (HIBYTE(v23) <= BYTE3(v24) && HIBYTE(v23) >= HIBYTE(v24))
LABEL_58:
                sub_21A6EB47C(1684554343, 1684232023, a3, a4);
            }
          }
        }
      }
    }
  }
LABEL_29:
  if (SHIBYTE(v27) < 0)
    operator delete(__p);
  if (v29 < 0)
    operator delete(v28[0]);
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v30.__r_.__value_.__l.__data_);
  return v7;
}

void sub_21A6EFBCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  uint64_t v25;

  if (a19 < 0)
    operator delete(__p);
  if (a25 < 0)
    operator delete(a20);
  if (*(char *)(v25 - 33) < 0)
    operator delete(*(void **)(v25 - 56));
  _Unwind_Resume(exception_object);
}

uint64_t sub_21A6EFC18(uint64_t a1, char *a2, void **a3, uint64_t *a4)
{
  uint64_t v7;
  char *v8;
  char *p_p;
  char *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  unsigned int v23;
  unint64_t v24;
  void *__p;
  uint64_t v26;
  uint64_t v27;
  void *v28[2];
  char v29;
  std::string v30;

  memset(&v30, 0, sizeof(v30));
  sub_21A6CE0F0(v28, a2);
  __p = 0;
  v26 = 0;
  v27 = 0;
  v24 = 0;
  v23 = 0;
  v22 = 0;
  sub_21A6B2D64((unsigned __int8 *)v28, 1918977107, &v30);
  v7 = sub_21A6B79E0(a1, (uint64_t)&v30, &v22, 0);
  if ((_DWORD)v7)
    goto LABEL_29;
  if (!v22)
    goto LABEL_29;
  sub_21A6B2D64((unsigned __int8 *)v28, 1684554343, &v30);
  v7 = sub_21A6B7B5C(a1, (uint64_t)&v30, (uint64_t)&__p, 0);
  if ((_DWORD)v7)
    goto LABEL_29;
  v8 = v27 >= 0 ? (char *)&__p : (char *)__p;
  v7 = sub_21A6A16C4(v8, 0, (unsigned int *)&v24 + 1, 0, 0, 0, 0);
  if ((_DWORD)v7)
    goto LABEL_29;
  sub_21A6B2D64((unsigned __int8 *)v28, 1684555118, &v30);
  v7 = sub_21A6B7B5C(a1, (uint64_t)&v30, (uint64_t)&__p, 0);
  if ((_DWORD)v7)
    goto LABEL_29;
  if (v27 >= 0)
    p_p = (char *)&__p;
  else
    p_p = (char *)__p;
  v7 = sub_21A6A16C4(p_p, 0, (unsigned int *)&v24, 0, 0, 0, 0);
  if ((_DWORD)v7)
  {
    sub_21A6EB47C(1684555118, 1732604485, a3, a4);
    goto LABEL_29;
  }
  sub_21A6B2D64((unsigned __int8 *)v28, 2002864464, &v30);
  v7 = sub_21A6B7B5C(a1, (uint64_t)&v30, (uint64_t)&__p, 0);
  if ((_DWORD)v7)
    goto LABEL_29;
  if ((SHIBYTE(v27) & 0x80000000) == 0)
  {
    if (HIBYTE(v27))
    {
      v10 = (char *)&__p;
      goto LABEL_20;
    }
LABEL_22:
    v23 = 0;
    goto LABEL_23;
  }
  if (!v26)
    goto LABEL_22;
  v10 = (char *)__p;
LABEL_20:
  v7 = sub_21A6A16C4(v10, 0, &v23, 0, 0, 0, 0);
  if ((_DWORD)v7)
    goto LABEL_29;
LABEL_23:
  if ((v24 + 1) < 2
    || (v11 = bswap32(v24), v11 - 225 < 0xE)
    || (v12 = v11 & 0xFF000000, v12 == -16777216)
    || !v12)
  {
    sub_21A6EB47C(1684555118, 1732604485, a3, a4);
LABEL_28:
    v7 = 0;
    goto LABEL_29;
  }
  if ((HIDWORD(v24) + 1) < 2)
    goto LABEL_28;
  v14 = bswap32(HIDWORD(v24));
  if (v14 - 225 < 0xE)
    goto LABEL_28;
  v7 = 0;
  v15 = v14 & 0xFF000000;
  if (v15 != -16777216)
  {
    if (v15)
    {
      v20 = 0;
      v21 = 0;
      sub_21A6B2D64((unsigned __int8 *)v28, 2002862934, &v30);
      v7 = sub_21A6B77DC(a1, (uint64_t)&v30, (char *)&v21 + 4, 0);
      if (!(_DWORD)v7)
      {
        v7 = sub_21A6B77DC(a1, (uint64_t)&v30, &v21, 2);
        if (!(_DWORD)v7)
        {
          MEMORY[0x220747320](&v30, "WiFi.radios.[*].");
          sub_21A6B2D64((unsigned __int8 *)&v30, 1651723853, &v30);
          v7 = sub_21A6B77DC(a1, (uint64_t)&v30, (char *)&v20 + 4, 0);
          if (!(_DWORD)v7)
          {
            v7 = sub_21A6B77DC(a1, (uint64_t)&v30, &v20, 2);
            if (!(_DWORD)v7)
            {
              v16 = bswap32(HIDWORD(v24));
              v17 = bswap32(v24);
              v24 = __PAIR64__(v16, v17);
              v23 = bswap32(v23);
              if (((v17 ^ v16) & 0xFFFFFF) != 0 || (v18 = HIBYTE(v17), v18 == 1) || v18 < HIBYTE(v16))
              {
                sub_21A6EB47C(1684555118, 1684558433, a3, a4);
                goto LABEL_28;
              }
              if ((v21 & 0x400) != 0)
              {
                v7 = 0;
                if ((v21 & 0x10000000000) != 0 || (_DWORD)v20 != HIDWORD(v20))
                  goto LABEL_29;
              }
              else if ((_DWORD)v20 != HIDWORD(v20))
              {
                goto LABEL_28;
              }
              v19 = 0;
              sub_21A6B2D64((unsigned __int8 *)v28, 1918979649, &v30);
              v7 = sub_21A6B79E0(a1, (uint64_t)&v30, &v19, 0);
              if ((_DWORD)v7)
                goto LABEL_29;
              if (v19)
              {
                if (((v24 ^ v23) & 0xFFFFFF) != 0)
                  goto LABEL_29;
                goto LABEL_59;
              }
              if (HIBYTE(v23) <= BYTE3(v24) && HIBYTE(v23) >= HIBYTE(v24))
LABEL_59:
                sub_21A6EB47C(1684555118, 1684232023, a3, a4);
            }
          }
        }
      }
    }
  }
LABEL_29:
  if (SHIBYTE(v27) < 0)
    operator delete(__p);
  if (v29 < 0)
    operator delete(v28[0]);
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v30.__r_.__value_.__l.__data_);
  return v7;
}

void sub_21A6F00A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  uint64_t v25;

  if (a19 < 0)
    operator delete(__p);
  if (a25 < 0)
    operator delete(a20);
  if (*(char *)(v25 - 33) < 0)
    operator delete(*(void **)(v25 - 56));
  _Unwind_Resume(exception_object);
}

uint64_t sub_21A6F00EC(uint64_t a1, char *a2, void **a3, uint64_t *a4)
{
  uint64_t v7;
  unsigned int v9;
  BOOL v10;
  void *__p[2];
  char v12;
  std::string v13;

  memset(&v13, 0, sizeof(v13));
  sub_21A6CE0F0(__p, a2);
  v10 = 0;
  sub_21A6B2D64((unsigned __int8 *)__p, 1918977107, &v13);
  v7 = sub_21A6B79E0(a1, (uint64_t)&v13, &v10, 0);
  if (!(_DWORD)v7 && v10)
  {
    v9 = 0;
    sub_21A6B2D64((unsigned __int8 *)__p, 1684556901, &v13);
    v7 = sub_21A6B77DC(a1, (uint64_t)&v13, &v9, 0);
    if (!(_DWORD)v7 && v9 < 0x258)
      sub_21A6EB47C(1684556901, 1732604482, a3, a4);
  }
  if (v12 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
  return v7;
}

void sub_21A6F01EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_21A6F0224(uint64_t a1, char *a2, void **a3, uint64_t *a4)
{
  uint64_t v7;
  unint64_t v8;
  _BOOL4 v9;
  int v10;
  void *__p;
  uint64_t v13;
  uint64_t v14;
  void *v15[2];
  char v16;
  std::string v17;

  memset(&v17, 0, sizeof(v17));
  sub_21A6CE0F0(v15, a2);
  __p = 0;
  v13 = 0;
  v14 = 0;
  sub_21A6B2D64((unsigned __int8 *)v15, 1684557159, &v17);
  v7 = sub_21A6B7B5C(a1, (uint64_t)&v17, (uint64_t)&__p, 0);
  if (!(_DWORD)v7)
  {
    v8 = v14 >= 0 ? HIBYTE(v14) : v13;
    if (v8)
    {
      v9 = sub_21A6AF0B4(a1, 1145922931);
      v10 = 1732604483;
      if (v9)
      {
        if (v8 < 0x100)
          goto LABEL_11;
      }
      else
      {
        v10 = 1732604484;
      }
      sub_21A6EB47C(1684557159, v10, a3, a4);
    }
  }
LABEL_11:
  if (SHIBYTE(v14) < 0)
    operator delete(__p);
  if (v16 < 0)
    operator delete(v15[0]);
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v17.__r_.__value_.__l.__data_);
  return v7;
}

void sub_21A6F0334(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_21A6F0378(uint64_t a1, char *a2, void **a3, uint64_t *a4)
{
  uint64_t v7;
  unint64_t v8;
  _BOOL4 v9;
  int v10;
  void *__p;
  uint64_t v13;
  uint64_t v14;
  void *v15[2];
  char v16;
  std::string v17;

  memset(&v17, 0, sizeof(v17));
  sub_21A6CE0F0(v15, a2);
  __p = 0;
  v13 = 0;
  v14 = 0;
  sub_21A6B2D64((unsigned __int8 *)v15, 1684551989, &v17);
  v7 = sub_21A6B7B5C(a1, (uint64_t)&v17, (uint64_t)&__p, 0);
  if (!(_DWORD)v7)
  {
    v8 = v14 >= 0 ? HIBYTE(v14) : v13;
    if (v8)
    {
      v9 = sub_21A6AF0B4(a1, 1684551989);
      v10 = 1732604483;
      if (v9)
      {
        if (v8 < 0x100)
          goto LABEL_11;
      }
      else
      {
        v10 = 1732604484;
      }
      sub_21A6EB47C(1684551989, v10, a3, a4);
    }
  }
LABEL_11:
  if (SHIBYTE(v14) < 0)
    operator delete(__p);
  if (v16 < 0)
    operator delete(v15[0]);
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v17.__r_.__value_.__l.__data_);
  return v7;
}

void sub_21A6F0488(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_21A6F04CC(uint64_t a1, char *a2, void **a3, uint64_t *a4)
{
  uint64_t v7;
  uint64_t v8;
  char *p_p;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  char *v14;
  int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  int v19;
  unsigned int v20;
  BOOL v22;
  unint64_t v23;
  unint64_t v24;
  void *__p;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  void *v29[2];
  char v30;
  std::string v31;

  memset(&v31, 0, sizeof(v31));
  sub_21A6CE0F0(v29, a2);
  v28 = 0;
  sub_21A6B2D64((unsigned __int8 *)v29, 1918979649, &v31);
  v7 = sub_21A6B79E0(a1, (uint64_t)&v31, &v28, 0);
  if (!(_DWORD)v7)
  {
    if (!sub_21A6AF0B4(a1, 1198748750))
    {
      v7 = 0;
      goto LABEL_62;
    }
    v7 = 0;
    if (sub_21A6BC5A8(a1) && v28)
    {
      __p = 0;
      v26 = 0;
      v27 = 0;
      v23 = 0;
      v24 = 0;
      sub_21A6B2D64((unsigned __int8 *)v29, 1735279207, &v31);
      if (sub_21A6B7B5C(a1, (uint64_t)&v31, (uint64_t)&__p, 0))
      {
LABEL_6:
        v8 = sub_21A6A16C4("172.16.42.2", 0, (unsigned int *)&v24 + 1, 0, 0, 0, 0);
        goto LABEL_14;
      }
      if (SHIBYTE(v27) < 0)
      {
        if (!v26)
          goto LABEL_6;
        p_p = (char *)__p;
      }
      else
      {
        if (!HIBYTE(v27))
          goto LABEL_6;
        p_p = (char *)&__p;
      }
      v8 = sub_21A6A16C4(p_p, 0, (unsigned int *)&v24 + 1, 0, 0, 0, 0);
LABEL_14:
      v7 = v8;
      if ((_DWORD)v8)
      {
        sub_21A6EB47C(1651722052, 1732604485, a3, a4);
        goto LABEL_60;
      }
      sub_21A6B2D64((unsigned __int8 *)v29, 1735279982, &v31);
      if (sub_21A6B7B5C(a1, (uint64_t)&v31, (uint64_t)&__p, 0))
        goto LABEL_17;
      if (SHIBYTE(v27) < 0)
      {
        if (v26)
        {
          v11 = (char *)__p;
          goto LABEL_23;
        }
      }
      else if (HIBYTE(v27))
      {
        v11 = (char *)&__p;
LABEL_23:
        v10 = sub_21A6A16C4(v11, 0, (unsigned int *)&v24, 0, 0, 0, 0);
LABEL_24:
        v7 = v10;
        if ((_DWORD)v10)
        {
          sub_21A6EB47C(1651722052, 1732604485, a3, a4);
          goto LABEL_60;
        }
        sub_21A6B2D64((unsigned __int8 *)v29, 1684554343, &v31);
        v7 = sub_21A6B7B5C(a1, (uint64_t)&v31, (uint64_t)&__p, 0);
        if ((_DWORD)v7)
          goto LABEL_60;
        if (SHIBYTE(v27) < 0)
        {
          if (v26)
          {
            v12 = (char *)__p;
            goto LABEL_32;
          }
        }
        else if (HIBYTE(v27))
        {
          v12 = (char *)&__p;
LABEL_32:
          v13 = sub_21A6A16C4(v12, 0, (unsigned int *)&v23 + 1, 0, 0, 0, 0);
LABEL_34:
          v7 = v13;
          if ((_DWORD)v13)
            goto LABEL_60;
          sub_21A6B2D64((unsigned __int8 *)v29, 2002864464, &v31);
          v7 = sub_21A6B7B5C(a1, (uint64_t)&v31, (uint64_t)&__p, 0);
          if ((_DWORD)v7)
            goto LABEL_60;
          LODWORD(v23) = 0;
          if (SHIBYTE(v27) < 0)
          {
            if (!v26)
              goto LABEL_42;
            v14 = (char *)__p;
          }
          else
          {
            if (!HIBYTE(v27))
              goto LABEL_42;
            v14 = (char *)&__p;
          }
          v7 = sub_21A6A16C4(v14, 0, (unsigned int *)&v23, 0, 0, 0, 0);
          if ((_DWORD)v7)
            goto LABEL_60;
LABEL_42:
          v15 = 1732604485;
          if (!(_DWORD)v24)
          {
LABEL_58:
            sub_21A6EB47C(1651722052, v15, a3, a4);
LABEL_59:
            v7 = 0;
            goto LABEL_60;
          }
          if (!sub_21A6AF0B4(a1, 1198748750))
          {
            v15 = 1732604484;
            goto LABEL_58;
          }
          if ((v24 + 1) < 2)
            goto LABEL_58;
          v16 = bswap32(v24);
          if (v16 - 225 < 0xE
            || (v16 & 0xFF000000) == 0xFF000000
            || (v16 & 0xFF000000) == 0)
          {
            goto LABEL_58;
          }
          if ((HIDWORD(v24) + 1) < 2)
            goto LABEL_59;
          v17 = bswap32(HIDWORD(v24));
          if (v17 - 225 < 0xE)
            goto LABEL_59;
          v7 = 0;
          if ((v17 & 0xFF000000) != 0xFF000000 && (v17 & 0xFF000000) != 0)
          {
            v15 = 1684558433;
            v18 = bswap32(HIDWORD(v23));
            v24 = __PAIR64__(v17, v16);
            v23 = __PAIR64__(v18, bswap32(v23));
            v19 = v16 & 0xFFFFFF;
            if ((v16 & 0xFFFFFF) != (v17 & 0xFFFFFF))
              goto LABEL_58;
            v20 = HIBYTE(v16);
            if (v20 == 1 || v20 < HIBYTE(v17))
              goto LABEL_58;
            if (v19 == (v18 & 0xFFFFFF))
            {
              v15 = 1735279720;
              goto LABEL_58;
            }
            v22 = 0;
            sub_21A6B2D64((unsigned __int8 *)v29, 1918979649, &v31);
            v7 = sub_21A6B79E0(a1, (uint64_t)&v31, &v22, 0);
            if (!(_DWORD)v7)
            {
              if (v22)
              {
                if (((v24 ^ v23) & 0xFFFFFF) != 0)
                  goto LABEL_60;
                goto LABEL_73;
              }
              if (BYTE3(v23) <= BYTE3(v24) && BYTE3(v23) >= HIBYTE(v24))
LABEL_73:
                sub_21A6EB47C(1651722052, 1684232023, a3, a4);
            }
          }
LABEL_60:
          if (SHIBYTE(v27) < 0)
            operator delete(__p);
          goto LABEL_62;
        }
        v13 = sub_21A6A16C4("10.0.1.2", 0, (unsigned int *)&v23 + 1, 0, 0, 0, 0);
        goto LABEL_34;
      }
LABEL_17:
      v10 = sub_21A6A16C4("172.16.42.200", 0, (unsigned int *)&v24, 0, 0, 0, 0);
      goto LABEL_24;
    }
  }
LABEL_62:
  if (v30 < 0)
    operator delete(v29[0]);
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v31.__r_.__value_.__l.__data_);
  return v7;
}

void sub_21A6F09E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  uint64_t v25;

  if (a18 < 0)
    operator delete(__p);
  if (a25 < 0)
    operator delete(a20);
  if (*(char *)(v25 - 33) < 0)
    operator delete(*(void **)(v25 - 56));
  _Unwind_Resume(exception_object);
}

uint64_t sub_21A6F0A34(uint64_t a1, char *a2, void **a3, uint64_t *a4)
{
  uint64_t v7;
  _BOOL4 v8;
  int v9;
  unsigned int v11;
  BOOL v12;
  void *__p[2];
  char v14;
  std::string v15;

  memset(&v15, 0, sizeof(v15));
  sub_21A6CE0F0(__p, a2);
  v12 = 0;
  sub_21A6B2D64((unsigned __int8 *)__p, 1918979649, &v15);
  v7 = sub_21A6B79E0(a1, (uint64_t)&v15, &v12, 0);
  if (!(_DWORD)v7)
  {
    if (sub_21A6AF0B4(a1, 1198748750))
    {
      v7 = 0;
      if (sub_21A6BC5A8(a1) && v12)
      {
        v11 = 0;
        sub_21A6B2D64((unsigned __int8 *)__p, 1735281765, &v15);
        v7 = sub_21A6B77DC(a1, (uint64_t)&v15, &v11, 0);
        if (!(_DWORD)v7)
        {
          if (v11)
          {
            v8 = sub_21A6AF0B4(a1, 1198748750);
            v9 = 1732604482;
            if (v8)
            {
              if (v11 > 0x257)
                goto LABEL_11;
            }
            else
            {
              v9 = 1732604484;
            }
            sub_21A6EB47C(1735281765, v9, a3, a4);
          }
        }
      }
    }
    else
    {
      v7 = 0;
    }
  }
LABEL_11:
  if (v14 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v15.__r_.__value_.__l.__data_);
  return v7;
}

void sub_21A6F0B84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  _Unwind_Resume(exception_object);
}

uint64_t sub_21A6F0BBC(uint64_t a1, char *a2, void **a3, uint64_t *a4)
{
  uint64_t v7;
  unint64_t v8;
  _BOOL4 v9;
  int v10;
  void *__p;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  void *v16[2];
  char v17;
  std::string v18;

  memset(&v18, 0, sizeof(v18));
  sub_21A6CE0F0(v16, a2);
  v15 = 0;
  sub_21A6B2D64((unsigned __int8 *)v16, 1918979649, &v18);
  v7 = sub_21A6B79E0(a1, (uint64_t)&v18, &v15, 0);
  if (!(_DWORD)v7)
  {
    if (!sub_21A6AF0B4(a1, 1198748750))
    {
      v7 = 0;
      goto LABEL_18;
    }
    v7 = 0;
    if (sub_21A6BC5A8(a1) && v15)
    {
      __p = 0;
      v13 = 0;
      v14 = 0;
      sub_21A6B2D64((unsigned __int8 *)v16, 1735282023, &v18);
      v7 = sub_21A6B7B5C(a1, (uint64_t)&v18, (uint64_t)&__p, 0);
      if (!(_DWORD)v7)
      {
        v8 = v14 >= 0 ? HIBYTE(v14) : v13;
        if (v8)
        {
          v9 = sub_21A6AF0B4(a1, 1198748750);
          v10 = 1732604483;
          if (v9)
          {
            if (v8 < 0x100)
              goto LABEL_16;
          }
          else
          {
            v10 = 1732604484;
          }
          sub_21A6EB47C(1735282023, v10, a3, a4);
        }
      }
LABEL_16:
      if (SHIBYTE(v14) < 0)
        operator delete(__p);
    }
  }
LABEL_18:
  if (v17 < 0)
    operator delete(v16[0]);
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v18.__r_.__value_.__l.__data_);
  return v7;
}

void sub_21A6F0D34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a14 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a27 < 0)
    operator delete(a22);
  _Unwind_Resume(exception_object);
}

uint64_t sub_21A6F0D80(uint64_t a1, char *a2, void **a3, uint64_t *a4)
{
  uint64_t v7;
  unint64_t v8;
  _BOOL4 v9;
  int v10;
  void *__p;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  void *v16[2];
  char v17;
  std::string v18;

  memset(&v18, 0, sizeof(v18));
  sub_21A6CE0F0(v16, a2);
  v15 = 0;
  sub_21A6B2D64((unsigned __int8 *)v16, 1918979649, &v18);
  v7 = sub_21A6B79E0(a1, (uint64_t)&v18, &v15, 0);
  if (!(_DWORD)v7)
  {
    if (!sub_21A6AF0B4(a1, 1198748750))
    {
      v7 = 0;
      goto LABEL_18;
    }
    v7 = 0;
    if (sub_21A6BC5A8(a1) && v15)
    {
      __p = 0;
      v13 = 0;
      v14 = 0;
      sub_21A6B2D64((unsigned __int8 *)v16, 1735276853, &v18);
      v7 = sub_21A6B7B5C(a1, (uint64_t)&v18, (uint64_t)&__p, 0);
      if (!(_DWORD)v7)
      {
        v8 = v14 >= 0 ? HIBYTE(v14) : v13;
        if (v8)
        {
          v9 = sub_21A6AF0B4(a1, 1198748750);
          v10 = 1732604483;
          if (v9)
          {
            if (v8 < 0x100)
              goto LABEL_16;
          }
          else
          {
            v10 = 1732604484;
          }
          sub_21A6EB47C(1735276853, v10, a3, a4);
        }
      }
LABEL_16:
      if (SHIBYTE(v14) < 0)
        operator delete(__p);
    }
  }
LABEL_18:
  if (v17 < 0)
    operator delete(v16[0]);
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v18.__r_.__value_.__l.__data_);
  return v7;
}

void sub_21A6F0EF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a14 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a27 < 0)
    operator delete(a22);
  _Unwind_Resume(exception_object);
}

uint64_t sub_21A6F0F44(uint64_t a1, char *a2, void **a3, uint64_t *a4)
{
  uint64_t v7;
  char *p_p;
  int v10;
  char *v11;
  char *v12;
  _BOOL4 v13;
  int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  void *__p;
  uint64_t v19;
  uint64_t v20;
  void *v21[2];
  char v22;
  std::string v23;

  memset(&v23, 0, sizeof(v23));
  sub_21A6CE0F0(v21, a2);
  __p = 0;
  v19 = 0;
  v20 = 0;
  v17 = 0;
  sub_21A6B2D64((unsigned __int8 *)v21, 1849970010, &v23);
  v7 = sub_21A6B7B5C(a1, (uint64_t)&v23, (uint64_t)&__p, 0);
  if ((_DWORD)v7)
    goto LABEL_2;
  if (SHIBYTE(v20) < 0)
  {
    if (!v19)
      goto LABEL_32;
    v15 = 0;
    v16 = 0;
    p_p = (char *)__p;
  }
  else
  {
    if (!HIBYTE(v20))
      goto LABEL_32;
    v15 = 0;
    v16 = 0;
    p_p = (char *)&__p;
  }
  v10 = sub_21A6A16C4(p_p, 0, &v17, 0, 0, 0, 0);
  sub_21A6B2D64((unsigned __int8 *)v21, 1684558670, &v23);
  v7 = sub_21A6B7B5C(a1, (uint64_t)&v23, (uint64_t)&__p, 0);
  if (!(_DWORD)v7)
  {
    v11 = v20 >= 0 ? (char *)&__p : (char *)__p;
    v7 = sub_21A6A16C4(v11, 0, &v15, 0, 0, 0, 0);
    if (!(_DWORD)v7)
    {
      sub_21A6B2D64((unsigned __int8 *)v21, 1684554343, &v23);
      v7 = sub_21A6B7B5C(a1, (uint64_t)&v23, (uint64_t)&__p, 0);
      if (!(_DWORD)v7)
      {
        v12 = v20 >= 0 ? (char *)&__p : (char *)__p;
        v7 = sub_21A6A16C4(v12, 0, &v16, 0, 0, 0, 0);
        if (!(_DWORD)v7)
        {
          v13 = sub_21A6AF0B4(a1, 1313105224);
          v14 = 1732604485;
          if (v13)
          {
            if (!v10 && v17 + 1 >= 2 && HIBYTE(v17) - 225 >= 0xEu && ((v16 ^ v17) & v15) == 0)
              goto LABEL_32;
          }
          else
          {
            v14 = 1732604484;
          }
          sub_21A6EB47C(1849970010, v14, a3, a4);
LABEL_32:
          v7 = 0;
        }
      }
    }
  }
LABEL_2:
  if (SHIBYTE(v20) < 0)
    operator delete(__p);
  if (v22 < 0)
    operator delete(v21[0]);
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v23.__r_.__value_.__l.__data_);
  return v7;
}

void sub_21A6F118C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a17 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  if (a29 < 0)
    operator delete(a24);
  _Unwind_Resume(exception_object);
}

uint64_t sub_21A6F11D4(uint64_t a1, char *a2, void **a3, uint64_t *a4)
{
  uint64_t v7;
  CFArrayRef theArray;
  void *__p[2];
  char v11;
  std::string v12;

  memset(&v12, 0, sizeof(v12));
  sub_21A6CE0F0(__p, a2);
  theArray = 0;
  sub_21A6B2D64((unsigned __int8 *)__p, 1886213217, &v12);
  v7 = sub_21A6B44B4(a1, (uint64_t)&v12, &theArray, 0);
  if (!(_DWORD)v7 && CFArrayGetCount(theArray) >= 21)
    sub_21A6EB47C(1886213217, 1732604488, a3, a4);
  if (theArray)
    CFRelease(theArray);
  if (v11 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v12.__r_.__value_.__l.__data_);
  return v7;
}

void sub_21A6F12A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_21A6F12DC(uint64_t a1, char *a2, void **a3, uint64_t *a4)
{
  uint64_t v7;
  CFIndex Count;
  int v9;
  BOOL v11;
  unsigned int v12;
  CFArrayRef theArray;
  void *__p[2];
  char v15;
  std::string v16;

  memset(&v16, 0, sizeof(v16));
  sub_21A6CE0F0(__p, a2);
  theArray = 0;
  v12 = 0;
  v11 = 0;
  v7 = sub_21A6AF29C(a1, 1633899617, (CFTypeRef *)&theArray, 0);
  if (!(_DWORD)v7)
  {
    v7 = sub_21A6AD02C(a1, 1835090284, &v12, 0);
    if (!(_DWORD)v7)
    {
      sub_21A6B2D64((unsigned __int8 *)__p, 1633895790, &v16);
      v7 = sub_21A6B79E0(a1, (uint64_t)&v16, &v11, 0);
      if (!(_DWORD)v7)
      {
        Count = CFArrayGetCount(theArray);
        if (Count > v12)
        {
          v9 = 1732604488;
          goto LABEL_6;
        }
        v7 = 0;
        if (!CFArrayGetCount(theArray) && v11)
        {
          if (sub_21A6AF0B4(a1, 1950434124))
            goto LABEL_7;
          v9 = 1633895789;
LABEL_6:
          sub_21A6EB47C(1633899617, v9, a3, a4);
LABEL_7:
          v7 = 0;
        }
      }
    }
  }
  if (theArray)
    CFRelease(theArray);
  if (v15 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v16.__r_.__value_.__l.__data_);
  return v7;
}

void sub_21A6F1438(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_21A6F146C(uint64_t a1, char *a2, void **a3, uint64_t *a4)
{
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  BOOL v12;
  void *__p[2];
  char v14;
  int v15;
  uint64_t v16;
  void *v17[2];
  char v18;
  std::string v19;

  memset(&v19, 0, sizeof(v19));
  sub_21A6CE0F0(v17, a2);
  v16 = 0;
  v15 = 0;
  sub_21A6B2D64((unsigned __int8 *)v17, 2003060332, &v19);
  v7 = sub_21A6B77DC(a1, (uint64_t)&v19, (char *)&v16 + 4, 0);
  if (!(_DWORD)v7)
  {
    sub_21A6CE0F0(__p, "raWM");
    sub_21A6B3A38((unsigned __int8 *)v17, (uint64_t)__p, &v19);
    if (v14 < 0)
      operator delete(__p[0]);
    v7 = sub_21A6B77DC(a1, (uint64_t)&v19, &v16, 0);
    if (!(_DWORD)v7)
    {
      sub_21A6B2D64((unsigned __int8 *)v17, 1651718221, &v19);
      v7 = sub_21A6B77DC(a1, (uint64_t)&v19, &v15, 0);
      if (!(_DWORD)v7)
      {
        if (HIDWORD(v16) >= 8)
        {
          sub_21A6EB47C(1651726157, 1732604485, a3, a4);
LABEL_21:
          v7 = 0;
          goto LABEL_22;
        }
        if ((v16 & 0x300000000) == 0)
          goto LABEL_21;
        v12 = 0;
        sub_21A6CE0F0(__p, "raEA");
        sub_21A6B3A38((unsigned __int8 *)v17, (uint64_t)__p, &v19);
        if (v14 < 0)
          operator delete(__p[0]);
        v7 = sub_21A6B79E0(a1, (uint64_t)&v19, &v12, 0);
        if (!(_DWORD)v7)
        {
          v8 = 1651725133;
          if (!sub_21A6AF0B4(a1, 1464095533))
          {
            v8 = 1651726157;
            v10 = 1732604484;
            goto LABEL_29;
          }
          v9 = v16;
          if ((v16 - 3) <= 5)
          {
            if (!sub_21A6AF0B4(a1, 1464877399))
            {
              v10 = 2004307539;
              goto LABEL_29;
            }
            v9 = v16;
          }
          v10 = 2003060078;
          if ((v9 - 9) >= 0xFFFFFFFA && v12)
            goto LABEL_29;
          if ((v15 - 4) <= 6 && ((0x53u >> (v15 - 4)) & 1) != 0)
          {
            v10 = 2003060329;
            v8 = 1651718221;
LABEL_29:
            sub_21A6EB47C(v8, v10, a3, a4);
          }
        }
      }
    }
  }
LABEL_22:
  if (v18 < 0)
    operator delete(v17[0]);
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v19.__r_.__value_.__l.__data_);
  return v7;
}

void sub_21A6F16D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a15 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  if (a29 < 0)
    operator delete(a24);
  _Unwind_Resume(exception_object);
}

uint64_t sub_21A6F172C(uint64_t a1, char *a2, void **a3, uint64_t *a4)
{
  uint64_t v7;
  CFTypeID v8;
  int v9;
  void *__p[2];
  char v12;
  CFTypeRef cf;
  int v14;
  void *v15[2];
  char v16;
  std::string v17;

  memset(&v17, 0, sizeof(v17));
  sub_21A6CE0F0(v15, a2);
  v14 = 0;
  cf = 0;
  sub_21A6B2D64((unsigned __int8 *)v15, 2003060332, &v17);
  v7 = sub_21A6B77DC(a1, (uint64_t)&v17, &v14, 0);
  if (!(_DWORD)v7)
  {
    sub_21A6CE0F0(__p, "legacywds");
    sub_21A6B3A38((unsigned __int8 *)v15, (uint64_t)__p, &v17);
    if (v12 < 0)
      operator delete(__p[0]);
    v7 = sub_21A6B44B4(a1, (uint64_t)&v17, (CFMutableDictionaryRef *)&cf, 0);
    if (!(_DWORD)v7)
    {
      v8 = CFGetTypeID(cf);
      if (v8 != CFArrayGetTypeID())
      {
        v7 = 4294960540;
        goto LABEL_13;
      }
      if (CFArrayGetCount((CFArrayRef)cf) <= 5)
      {
        if ((v14 & 3) == 0 || CFArrayGetCount((CFArrayRef)cf))
          goto LABEL_12;
        v9 = 1999720036;
      }
      else
      {
        v9 = 1732604488;
      }
      sub_21A6EB47C(2003061875, v9, a3, a4);
LABEL_12:
      v7 = 0;
    }
  }
LABEL_13:
  if (cf)
    CFRelease(cf);
  if (v16 < 0)
    operator delete(v15[0]);
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v17.__r_.__value_.__l.__data_);
  return v7;
}

void sub_21A6F189C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  uint64_t v23;

  if (a15 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  if (*(char *)(v23 - 33) < 0)
    operator delete(*(void **)(v23 - 56));
  _Unwind_Resume(exception_object);
}

uint64_t sub_21A6F18EC(uint64_t a1, char *a2, void **a3, uint64_t *a4)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int v11;
  unsigned int v12;
  void *__p[2];
  char v15;
  void *v16[2];
  char v17;
  unsigned int v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  char v23;
  std::string v24;

  memset(&v24, 0, sizeof(v24));
  sub_21A6CE0F0(&v22, a2);
  v19 = 0;
  v20 = 0;
  v21 = 0;
  v18 = 0;
  sub_21A6CE0F0(v16, a2);
  sub_21A6CE0F0(__p, "raI1");
  sub_21A6B3A38((unsigned __int8 *)v16, (uint64_t)__p, &v24);
  if (v15 < 0)
    operator delete(__p[0]);
  if (v17 < 0)
    operator delete(v16[0]);
  v8 = sub_21A6B7B5C(a1, (uint64_t)&v24, (uint64_t)&v19, 0);
  v9 = v8;
  if ((_DWORD)v8 == -5 || !(_DWORD)v8)
  {
    if (SHIBYTE(v21) < 0)
    {
      if (v20)
      {
        v10 = (char *)v19;
        goto LABEL_12;
      }
    }
    else if (HIBYTE(v21))
    {
      v10 = (char *)&v19;
LABEL_12:
      v9 = sub_21A6A16C4(v10, 0, &v18, 0, 0, 0, 0);
      goto LABEL_14;
    }
    v9 = 0;
LABEL_14:
    if (sub_21A6F1B38(a1, a2))
    {
      v11 = 1732604481;
      if ((_DWORD)v9 || (v12 = v18, v18 + 1 < 2) || HIBYTE(v18) - 225 < 0xEu)
      {
LABEL_24:
        sub_21A6EB47C(1918978353, v11, a3, a4);
        goto LABEL_25;
      }
    }
    else
    {
      v12 = v18;
      if (!v18)
        goto LABEL_25;
    }
    if (v12 + 1 >= 2)
    {
      if (HIBYTE(v12) - 225 > 0xDu)
        goto LABEL_25;
      v11 = 1732604485;
    }
    else
    {
      v11 = 1732604485;
    }
    goto LABEL_24;
  }
LABEL_25:
  if (SHIBYTE(v21) < 0)
    operator delete(v19);
  if (v23 < 0)
    operator delete(v22);
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v24.__r_.__value_.__l.__data_);
  return v9;
}

void sub_21A6F1AC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  uint64_t v33;

  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  if (a27 < 0)
    operator delete(a22);
  if (a33 < 0)
    operator delete(a28);
  if (*(char *)(v33 - 49) < 0)
    operator delete(*(void **)(v33 - 72));
  _Unwind_Resume(exception_object);
}

uint64_t sub_21A6F1B38(uint64_t a1, char *a2)
{
  uint64_t v3;
  void *__p[2];
  char v6;
  int v7;
  BOOL v8;
  int v9;
  void *v10[2];
  char v11;
  std::string v12;

  memset(&v12, 0, sizeof(v12));
  sub_21A6CE0F0(v10, a2);
  v9 = 0;
  v8 = 0;
  v7 = 0;
  sub_21A6CE0F0(__p, "raWM");
  sub_21A6B3A38((unsigned __int8 *)v10, (uint64_t)__p, &v12);
  if (v6 < 0)
    operator delete(__p[0]);
  if (sub_21A6B77DC(a1, (uint64_t)&v12, &v9, 0))
    goto LABEL_10;
  sub_21A6CE0F0(__p, "raEA");
  sub_21A6B3A38((unsigned __int8 *)v10, (uint64_t)__p, &v12);
  if (v6 < 0)
    operator delete(__p[0]);
  if (sub_21A6B79E0(a1, (uint64_t)&v12, &v8, 0))
    goto LABEL_10;
  sub_21A6CE0F0(__p, "raFl");
  sub_21A6B3A38((unsigned __int8 *)v10, (uint64_t)__p, &v12);
  if (v6 < 0)
    operator delete(__p[0]);
  if (sub_21A6B77DC(a1, (uint64_t)&v12, &v7, 0))
  {
LABEL_10:
    v3 = 0;
  }
  else if (v8 && (v9 - 3) < 6)
  {
    v3 = 1;
  }
  else
  {
    v3 = v7 & 1;
  }
  if (v11 < 0)
    operator delete(v10[0]);
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v12.__r_.__value_.__l.__data_);
  return v3;
}

void sub_21A6F1CA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  uint64_t v23;

  if (a15 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  if (*(char *)(v23 - 17) < 0)
    operator delete(*(void **)(v23 - 40));
  _Unwind_Resume(exception_object);
}

uint64_t sub_21A6F1D04(uint64_t a1, char *a2, void **a3, uint64_t *a4)
{
  uint64_t v8;
  int v9;
  int v10;
  void *__p[2];
  char v13;
  unsigned int v14;
  void *v15[2];
  char v16;
  std::string v17;

  memset(&v17, 0, sizeof(v17));
  sub_21A6CE0F0(v15, a2);
  v14 = 0;
  sub_21A6B2D64((unsigned __int8 *)v15, 1651724337, &v17);
  if (!sub_21A6BC8AC(a1, (uint64_t)&v17))
    goto LABEL_10;
  sub_21A6CE0F0(__p, "raAu");
  sub_21A6B3A38((unsigned __int8 *)v15, (uint64_t)__p, &v17);
  if (v13 < 0)
    operator delete(__p[0]);
  v8 = sub_21A6B77DC(a1, (uint64_t)&v17, &v14, 0);
  if (!(_DWORD)v8)
  {
    v9 = sub_21A6F1B38(a1, a2);
    v10 = 1732604481;
    if (!v9 || v14)
    {
      if (v14 < 0x10000)
      {
LABEL_10:
        v8 = 0;
        goto LABEL_11;
      }
      v10 = 1732604486;
    }
    sub_21A6EB47C(1651724337, v10, a3, a4);
    goto LABEL_10;
  }
LABEL_11:
  if (v16 < 0)
    operator delete(v15[0]);
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v17.__r_.__value_.__l.__data_);
  return v8;
}

void sub_21A6F1E30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a14 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a27 < 0)
    operator delete(a22);
  _Unwind_Resume(exception_object);
}

uint64_t sub_21A6F1E80(uint64_t a1, char *a2, void **a3, uint64_t *a4)
{
  _BOOL4 v8;
  uint64_t v9;
  int v10;
  int v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  void *__p[2];
  char v18;
  void *v19;
  unint64_t v20;
  uint64_t v21;
  void *v22[2];
  char v23;
  std::string v24;

  memset(&v24, 0, sizeof(v24));
  sub_21A6CE0F0(v22, a2);
  v8 = sub_21A6AF0B4(a1, 909398611);
  v19 = 0;
  v20 = 0;
  v21 = 0;
  sub_21A6CE0F0(__p, "raSe");
  sub_21A6B3A38((unsigned __int8 *)v22, (uint64_t)__p, &v24);
  if (v18 < 0)
    operator delete(__p[0]);
  v9 = sub_21A6B7B5C(a1, (uint64_t)&v24, (uint64_t)&v19, 0);
  if (!(_DWORD)v9)
  {
    v10 = sub_21A6F1B38(a1, a2);
    v11 = 1732604481;
    v12 = HIBYTE(v21);
    if (v10)
    {
      v13 = v20;
      if (v21 >= 0)
        v14 = HIBYTE(v21);
      else
        v14 = v20;
      if (!v14)
        goto LABEL_17;
    }
    else
    {
      v13 = v20;
    }
    if (v21 < 0)
      v12 = v13;
    v15 = 32;
    if (v8)
      v15 = 64;
    if (v12 > v15)
    {
      v11 = 1732604483;
LABEL_17:
      sub_21A6EB47C(1918980965, v11, a3, a4);
    }
  }
  if (SHIBYTE(v21) < 0)
    operator delete(v19);
  if (v23 < 0)
    operator delete(v22[0]);
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v24.__r_.__value_.__l.__data_);
  return v9;
}

void sub_21A6F1FE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a14 < 0)
    operator delete(__p);
  if (a26 < 0)
    operator delete(a21);
  if (a32 < 0)
    operator delete(a27);
  _Unwind_Resume(exception_object);
}

uint64_t sub_21A6F2044(uint64_t a1, char *a2, void **a3, uint64_t *a4)
{
  uint64_t v7;
  char *v8;
  void *__p[2];
  char v11;
  unsigned int v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16[2];
  char v17;
  std::string v18;

  memset(&v18, 0, sizeof(v18));
  sub_21A6CE0F0(v16, a2);
  v13 = 0;
  v14 = 0;
  v15 = 0;
  v12 = 0;
  sub_21A6CE0F0(__p, "raI2");
  sub_21A6B3A38((unsigned __int8 *)v16, (uint64_t)__p, &v18);
  if (v11 < 0)
    operator delete(__p[0]);
  v7 = sub_21A6B7B5C(a1, (uint64_t)&v18, (uint64_t)&v13, 0);
  if (!(_DWORD)v7)
  {
    if (SHIBYTE(v15) < 0)
    {
      if (v14)
      {
        v8 = (char *)v13;
        goto LABEL_9;
      }
    }
    else if (HIBYTE(v15))
    {
      v8 = (char *)&v13;
LABEL_9:
      v7 = sub_21A6A16C4(v8, 0, &v12, 0, 0, 0, 0);
      if ((_DWORD)v7 || v12 + 1 < 2 || HIBYTE(v12) - 225 <= 0xDu)
      {
        sub_21A6EB47C(1918978354, 1732604485, a3, a4);
        goto LABEL_14;
      }
    }
    v7 = 0;
  }
LABEL_14:
  if (SHIBYTE(v15) < 0)
    operator delete(v13);
  if (v17 < 0)
    operator delete(v16[0]);
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v18.__r_.__value_.__l.__data_);
  return v7;
}

void sub_21A6F219C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  uint64_t v28;

  if (a15 < 0)
    operator delete(__p);
  if (a28 < 0)
    operator delete(a23);
  if (*(char *)(v28 - 33) < 0)
    operator delete(*(void **)(v28 - 56));
  _Unwind_Resume(exception_object);
}

uint64_t sub_21A6F21FC(uint64_t a1, char *a2, void **a3, uint64_t *a4)
{
  uint64_t v7;
  void *__p[2];
  char v10;
  unsigned int v11;
  void *v12[2];
  char v13;
  std::string v14;

  memset(&v14, 0, sizeof(v14));
  sub_21A6CE0F0(v12, a2);
  v11 = 0;
  sub_21A6B2D64((unsigned __int8 *)v12, 1651724338, &v14);
  if (!sub_21A6BC8AC(a1, (uint64_t)&v14))
    goto LABEL_7;
  sub_21A6CE0F0(__p, "raU2");
  sub_21A6B3A38((unsigned __int8 *)v12, (uint64_t)__p, &v14);
  if (v10 < 0)
    operator delete(__p[0]);
  v7 = sub_21A6B77DC(a1, (uint64_t)&v14, &v11, 0);
  if (!(_DWORD)v7 && HIWORD(v11))
  {
    sub_21A6EB47C(1651724338, 1732604486, a3, a4);
LABEL_7:
    v7 = 0;
  }
  if (v13 < 0)
    operator delete(v12[0]);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__r_.__value_.__l.__data_);
  return v7;
}

void sub_21A6F2304(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a14 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a27 < 0)
    operator delete(a22);
  _Unwind_Resume(exception_object);
}

uint64_t sub_21A6F2354(uint64_t a1, char *a2, void **a3, uint64_t *a4)
{
  _BOOL4 v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  void *__p[2];
  char v13;
  void *v14;
  unint64_t v15;
  uint64_t v16;
  void *v17[2];
  char v18;
  std::string v19;

  memset(&v19, 0, sizeof(v19));
  sub_21A6CE0F0(v17, a2);
  v7 = sub_21A6AF0B4(a1, 909398611);
  v14 = 0;
  v15 = 0;
  v16 = 0;
  sub_21A6CE0F0(__p, "raS2");
  sub_21A6B3A38((unsigned __int8 *)v17, (uint64_t)__p, &v19);
  if (v13 < 0)
    operator delete(__p[0]);
  v8 = sub_21A6B7B5C(a1, (uint64_t)&v19, (uint64_t)&v14, 0);
  if (!(_DWORD)v8)
  {
    v9 = HIBYTE(v16);
    if (v16 < 0)
      v9 = v15;
    v10 = 32;
    if (v7)
      v10 = 64;
    if (v9 > v10)
      sub_21A6EB47C(1918980914, 1732604483, a3, a4);
  }
  if (SHIBYTE(v16) < 0)
    operator delete(v14);
  if (v18 < 0)
    operator delete(v17[0]);
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v19.__r_.__value_.__l.__data_);
  return v8;
}

void sub_21A6F247C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  uint64_t v26;

  if (a14 < 0)
    operator delete(__p);
  if (a26 < 0)
    operator delete(a21);
  if (*(char *)(v26 - 33) < 0)
    operator delete(*(void **)(v26 - 56));
  _Unwind_Resume(exception_object);
}

uint64_t sub_21A6F24E0(uint64_t a1, char *a2, void **a3, uint64_t *a4)
{
  uint64_t v7;
  char v8;
  void *__p;
  unint64_t v11;
  uint64_t v12;
  void *v13[2];
  char v14;
  std::string v15;

  memset(&v15, 0, sizeof(v15));
  sub_21A6CE0F0(v13, a2);
  __p = 0;
  v11 = 0;
  v12 = 0;
  sub_21A6B2D64((unsigned __int8 *)v13, 1853117270, &v15);
  v7 = sub_21A6B7B5C(a1, (uint64_t)&v15, (uint64_t)&__p, 0);
  v8 = HIBYTE(v12);
  if (!(_DWORD)v7 && SHIBYTE(v12) < 0 && v11 > 0xFF)
  {
    sub_21A6EB47C(1651723856, 1732604483, a3, a4);
    v8 = HIBYTE(v12);
  }
  if (v8 < 0)
    operator delete(__p);
  if (v14 < 0)
    operator delete(v13[0]);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v15.__r_.__value_.__l.__data_);
  return v7;
}

void sub_21A6F25C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_21A6F2604(uint64_t a1, char *a2, void **a3, uint64_t *a4)
{
  uint64_t v7;
  int v8;
  void *__p[2];
  char v11;
  int v12;
  int v13;
  __int16 v14;
  void *v15[2];
  char v16;
  std::string v17;

  memset(&v17, 0, sizeof(v17));
  sub_21A6CE0F0(v15, a2);
  v14 = 0;
  v12 = 0;
  v13 = 0;
  v7 = sub_21A6B7A3C(a1, 1918977107, (BOOL *)&v14 + 1, 0);
  if (!(_DWORD)v7)
  {
    v7 = sub_21A6B7A3C(a1, 1918979649, (BOOL *)&v14, 0);
    if (!(_DWORD)v7)
    {
      v7 = sub_21A6AD02C(a1, 2002864494, &v13, 0);
      if (!(_DWORD)v7)
      {
        sub_21A6CE0F0(__p, "raSt");
        sub_21A6B3A38((unsigned __int8 *)v15, (uint64_t)__p, &v17);
        if (v11 < 0)
          operator delete(__p[0]);
        v7 = sub_21A6B77DC(a1, (uint64_t)&v17, &v12, 0);
        if (!(_DWORD)v7)
        {
          if (sub_21A6EF35C(a1) || v13 == 4)
          {
            v8 = 1919763024;
            if (HIBYTE(v14) && (_BYTE)v14)
              goto LABEL_15;
          }
          else
          {
            if (v12 != 1 || !(HIBYTE(v14) | v14))
              goto LABEL_15;
            v8 = 1919767380;
          }
          sub_21A6EB47C(1651724877, v8, a3, a4);
LABEL_15:
          v7 = 0;
        }
      }
    }
  }
  if (v16 < 0)
    operator delete(v15[0]);
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v17.__r_.__value_.__l.__data_);
  return v7;
}

void sub_21A6F2790(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  uint64_t v23;

  if (a15 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  if (*(char *)(v23 - 33) < 0)
    operator delete(*(void **)(v23 - 56));
  _Unwind_Resume(exception_object);
}

uint64_t sub_21A6F27E0(uint64_t a1, char *a2, void **a3, uint64_t *a4)
{
  uint64_t v7;
  uint64_t v8;
  int v10;
  void *__p;
  uint64_t v12;
  uint64_t v13;
  void *v14[2];
  char v15;
  std::string v16;

  memset(&v16, 0, sizeof(v16));
  sub_21A6CE0F0(v14, a2);
  __p = 0;
  v12 = 0;
  v13 = 0;
  if (!sub_21A6B7F50(a1, 1718842224))
    goto LABEL_10;
  sub_21A6B2D64((unsigned __int8 *)v14, 1718842224, &v16);
  v7 = sub_21A6B7B5C(a1, (uint64_t)&v16, (uint64_t)&__p, 0);
  if ((_DWORD)v7)
    goto LABEL_11;
  if (sub_21A6B7F50(a1, 1651721805))
  {
    v10 = 0;
    v7 = sub_21A6AD02C(a1, 1651721805, &v10, 0);
    if (!(_DWORD)v7 && v10 == 1)
    {
      v8 = HIBYTE(v13);
      if (v13 < 0)
        v8 = v12;
      if (!v8)
        sub_21A6EB47C(1718842224, 1732604481, a3, a4);
    }
  }
  else
  {
LABEL_10:
    v7 = 0;
  }
LABEL_11:
  if (SHIBYTE(v13) < 0)
    operator delete(__p);
  if (v15 < 0)
    operator delete(v14[0]);
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v16.__r_.__value_.__l.__data_);
  return v7;
}

void sub_21A6F2924(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a27 < 0)
    operator delete(a22);
  _Unwind_Resume(exception_object);
}

uint64_t sub_21A6F296C(uint64_t a1, char *a2, void **a3, uint64_t *a4)
{
  uint64_t v7;
  unint64_t v9;
  int v10;
  BOOL v11;
  void *__p;
  unint64_t v13;
  uint64_t v14;
  void *v15[2];
  char v16;
  std::string v17;

  memset(&v17, 0, sizeof(v17));
  sub_21A6CE0F0(v15, a2);
  __p = 0;
  v13 = 0;
  v14 = 0;
  sub_21A6B2D64((unsigned __int8 *)v15, 1635077710, &v17);
  v7 = sub_21A6B7B5C(a1, (uint64_t)&v17, (uint64_t)&__p, 0);
  if (!(_DWORD)v7)
  {
    if (v14 >= 0)
      v9 = HIBYTE(v14);
    else
      v9 = v13;
    if (v9)
    {
      v11 = 0;
      sub_21A6B2D64((unsigned __int8 *)v15, 1635078258, &v17);
      v7 = sub_21A6B79E0(a1, (uint64_t)&v17, &v11, 0);
      if ((_DWORD)v7)
        goto LABEL_2;
      v10 = 1732604483;
      if (v11)
      {
        if (v9 < 0x33)
          goto LABEL_2;
      }
      else
      {
        v10 = 1732604484;
      }
      sub_21A6EB47C(1635077710, v10, a3, a4);
    }
    else
    {
      v7 = 0;
    }
  }
LABEL_2:
  if (SHIBYTE(v14) < 0)
    operator delete(__p);
  if (v16 < 0)
    operator delete(v15[0]);
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v17.__r_.__value_.__l.__data_);
  return v7;
}

void sub_21A6F2AB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a27 < 0)
    operator delete(a22);
  _Unwind_Resume(exception_object);
}

uint64_t sub_21A6F2AF8(uint64_t a1, char *a2, void **a3, uint64_t *a4)
{
  uint64_t v7;
  unint64_t v9;
  BOOL v10;
  void *__p;
  unint64_t v12;
  uint64_t v13;
  void *v14[2];
  char v15;
  std::string v16;

  memset(&v16, 0, sizeof(v16));
  sub_21A6CE0F0(v14, a2);
  __p = 0;
  v12 = 0;
  v13 = 0;
  sub_21A6B2D64((unsigned __int8 *)v14, 1635077712, &v16);
  v7 = sub_21A6B7B5C(a1, (uint64_t)&v16, (uint64_t)&__p, 0);
  if (!(_DWORD)v7)
  {
    if (v13 >= 0)
      v9 = HIBYTE(v13);
    else
      v9 = v12;
    if (v9)
    {
      v10 = 0;
      sub_21A6B2D64((unsigned __int8 *)v14, 1635078258, &v16);
      v7 = sub_21A6B79E0(a1, (uint64_t)&v16, &v10, 0);
      if (!(_DWORD)v7)
      {
        if (!v10)
          sub_21A6EB47C(1635077712, 1732604484, a3, a4);
        if (v9 >= 0x21)
          sub_21A6EB47C(1635077712, 1732604483, a3, a4);
      }
    }
    else
    {
      v7 = 0;
    }
  }
  if (SHIBYTE(v13) < 0)
    operator delete(__p);
  if (v15 < 0)
    operator delete(v14[0]);
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v16.__r_.__value_.__l.__data_);
  return v7;
}

void sub_21A6F2C50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a27 < 0)
    operator delete(a22);
  _Unwind_Resume(exception_object);
}

uint64_t sub_21A6F2C98(uint64_t a1, char *a2, void **a3, uint64_t *a4)
{
  uint64_t v7;
  __int16 v9;
  int v10;
  void *__p[2];
  char v12;
  std::string v13;

  memset(&v13, 0, sizeof(v13));
  sub_21A6CE0F0(__p, a2);
  if (!sub_21A6AF0B4(a1, 1400460148) || !sub_21A6AF0B4(a1, 1396928343))
  {
LABEL_11:
    v7 = 0;
    goto LABEL_12;
  }
  v10 = 0;
  v9 = 0;
  sub_21A6B2D64((unsigned __int8 *)__p, 1918979649, &v13);
  v7 = sub_21A6B79E0(a1, (uint64_t)&v13, (BOOL *)&v9 + 1, 0);
  if (!(_DWORD)v7)
  {
    sub_21A6B2D64((unsigned __int8 *)__p, 1918977107, &v13);
    v7 = sub_21A6B79E0(a1, (uint64_t)&v13, (BOOL *)&v9, 0);
    if (!(_DWORD)v7)
    {
      sub_21A6B2D64((unsigned __int8 *)__p, 1936605510, &v13);
      v7 = sub_21A6B77DC(a1, (uint64_t)&v13, &v10, 0);
      if (!(_DWORD)v7 && HIBYTE(v9) && (_BYTE)v9)
      {
        if ((v10 & 1) == 0 && !sub_21A6EB6D4(a1, 2002867022))
          sub_21A6EB47C(1651725143, 2002867022, a3, a4);
        goto LABEL_11;
      }
    }
  }
LABEL_12:
  if (v12 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
  return v7;
}

void sub_21A6F2E0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  _Unwind_Resume(exception_object);
}

uint64_t sub_21A6F2E44(uint64_t a1, char *a2, void **a3, uint64_t *a4)
{
  uint64_t v7;
  BOOL v9;
  int v10;
  void *__p[2];
  char v12;
  std::string v13;

  memset(&v13, 0, sizeof(v13));
  sub_21A6CE0F0(__p, a2);
  if (!sub_21A6AF0B4(a1, 2000834122))
    goto LABEL_7;
  v10 = 0;
  v9 = 0;
  sub_21A6B2D64((unsigned __int8 *)__p, 1970496070, &v13);
  v7 = sub_21A6B77DC(a1, (uint64_t)&v13, &v10, 0);
  if (!(_DWORD)v7)
  {
    sub_21A6B2D64((unsigned __int8 *)__p, 2002929006, &v13);
    v7 = sub_21A6B79E0(a1, (uint64_t)&v13, &v9, 0);
    if (!(_DWORD)v7 && (v10 & 0x100) != 0 && !v9)
    {
      sub_21A6EB47C(1651726160, 1918320962, a3, a4);
LABEL_7:
      v7 = 0;
    }
  }
  if (v12 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
  return v7;
}

void sub_21A6F2F58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  _Unwind_Resume(exception_object);
}

uint64_t sub_21A6F2F90(uint64_t a1, char *a2, void **a3, uint64_t *a4)
{
  uint64_t v7;
  BOOL v9;
  __int16 v10;
  void *__p[2];
  char v12;
  std::string v13;

  memset(&v13, 0, sizeof(v13));
  sub_21A6CE0F0(__p, a2);
  if (!sub_21A6AF0B4(a1, 1400460148) || !sub_21A6AF0B4(a1, 1396928343))
  {
LABEL_11:
    v7 = 0;
    goto LABEL_12;
  }
  v10 = 0;
  v9 = 0;
  sub_21A6B2D64((unsigned __int8 *)__p, 1918979649, &v13);
  v7 = sub_21A6B79E0(a1, (uint64_t)&v13, (BOOL *)&v10 + 1, 0);
  if (!(_DWORD)v7)
  {
    sub_21A6B2D64((unsigned __int8 *)__p, 1918977107, &v13);
    v7 = sub_21A6B79E0(a1, (uint64_t)&v13, (BOOL *)&v10, 0);
    if (!(_DWORD)v7)
    {
      sub_21A6B2D64((unsigned __int8 *)__p, 2002865741, &v13);
      v7 = sub_21A6B79E0(a1, (uint64_t)&v13, &v9, 0);
      if (!(_DWORD)v7 && HIBYTE(v10) && (_BYTE)v10 && !v9)
      {
        if (!sub_21A6EB6D4(a1, 2002862918))
          sub_21A6EB47C(1651726147, 2002862918, a3, a4);
        goto LABEL_11;
      }
    }
  }
LABEL_12:
  if (v12 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
  return v7;
}

void sub_21A6F3104(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  _Unwind_Resume(exception_object);
}

uint64_t sub_21A6F313C()
{
  return 0;
}

uint64_t sub_21A6F3144(uint64_t a1, char *a2, void **a3, uint64_t *a4)
{
  uint64_t v7;
  BOOL v9;
  int v10;
  void *__p[2];
  char v12;
  std::string v13;

  memset(&v13, 0, sizeof(v13));
  sub_21A6CE0F0(__p, a2);
  if (!sub_21A6AF0B4(a1, 2000834122))
    goto LABEL_7;
  v10 = 0;
  v9 = 0;
  sub_21A6B2D64((unsigned __int8 *)__p, 1970496070, &v13);
  v7 = sub_21A6B77DC(a1, (uint64_t)&v13, &v10, 0);
  if (!(_DWORD)v7)
  {
    sub_21A6B2D64((unsigned __int8 *)__p, 2002929006, &v13);
    v7 = sub_21A6B79E0(a1, (uint64_t)&v13, &v9, 0);
    if (!(_DWORD)v7 && (v10 & 0x200) != 0 && !v9)
    {
      sub_21A6EB47C(1651726150, 1918320962, a3, a4);
LABEL_7:
      v7 = 0;
    }
  }
  if (v12 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
  return v7;
}

void sub_21A6F3258(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  _Unwind_Resume(exception_object);
}

uint64_t sub_21A6F3290(uint64_t a1, char *a2, void **a3, uint64_t *a4)
{
  uint64_t v8;
  uint64_t v9;
  int v10;
  unint64_t v11;
  unint64_t v12;
  void *v14[2];
  char v15;
  void *v16[2];
  char v17;
  uint64_t v18;
  void *__p;
  unint64_t v20;
  uint64_t v21;
  BOOL v22;
  void *v23[2];
  uint64_t v24;
  void *v25[2];
  char v26;
  std::string v27;
  char v28[17];
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  memset(&v27, 0, sizeof(v27));
  sub_21A6CE0F0(v25, a2);
  v23[0] = 0;
  v23[1] = 0;
  v24 = 0;
  v22 = 0;
  v8 = sub_21A6D69EC(v28, 0x11uLL);
  MEMORY[0x220747320](v25, v8);
  sub_21A6CE0F0(&__p, "raNm");
  sub_21A6B3A38((unsigned __int8 *)v25, (uint64_t)&__p, &v27);
  if (SHIBYTE(v21) < 0)
    operator delete(__p);
  v9 = sub_21A6B7B5C(a1, (uint64_t)&v27, (uint64_t)v23, 0);
  if (!(_DWORD)v9)
  {
    sub_21A6B2D64((unsigned __int8 *)v25, 1918979649, &v27);
    v9 = sub_21A6B79E0(a1, (uint64_t)&v27, &v22, 0);
    if (!(_DWORD)v9)
    {
      if (!sub_21A6AF0B4(a1, 1198748750))
      {
        v9 = 0;
        goto LABEL_29;
      }
      v9 = 0;
      if (sub_21A6BC5A8(a1) && v22)
      {
        v18 = 0;
        __p = 0;
        v20 = 0;
        v21 = 0;
        sub_21A6CE0F0(v16, a2);
        sub_21A6CE0F0(v14, "raNm");
        v9 = (*(uint64_t (**)(uint64_t, void **, void **, std::string *))(*(_QWORD *)a1 + 16))(a1, v16, v14, &v27);
        if (v15 < 0)
          operator delete(v14[0]);
        if (v17 < 0)
          operator delete(v16[0]);
        if ((_DWORD)v9)
          goto LABEL_27;
        v9 = sub_21A6B7B5C(a1, (uint64_t)&v27, (uint64_t)&__p, 0);
        if ((_DWORD)v9)
          goto LABEL_27;
        v10 = 1732604481;
        v11 = HIBYTE(v21);
        if (v21 < 0)
          v11 = v20;
        if (v11)
        {
          v9 = sub_21A6D4DDC(1651722062, &v18);
          if ((_DWORD)v9)
            goto LABEL_27;
          v12 = HIBYTE(v21);
          if (v21 < 0)
            v12 = v20;
          if (v12 <= *(unsigned int *)(v18 + 20))
          {
            if (!sub_21A6BB5DC((unsigned __int8 *)&__p, (unsigned __int8 *)v23))
            {
LABEL_26:
              v9 = 0;
LABEL_27:
              if (SHIBYTE(v21) < 0)
                operator delete(__p);
              goto LABEL_29;
            }
            v10 = 1735283310;
          }
          else
          {
            v10 = 1732604483;
          }
        }
        sub_21A6EB47C(1651722062, v10, a3, a4);
        goto LABEL_26;
      }
    }
  }
LABEL_29:
  if (SHIBYTE(v24) < 0)
    operator delete(v23[0]);
  if (v26 < 0)
    operator delete(v25[0]);
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v27.__r_.__value_.__l.__data_);
  return v9;
}

void sub_21A6F3544(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  uint64_t v40;

  if (a27 < 0)
    operator delete(__p);
  if (a34 < 0)
    operator delete(a29);
  if (a40 < 0)
    operator delete(a35);
  if (*(char *)(v40 - 81) < 0)
    operator delete(*(void **)(v40 - 104));
  _Unwind_Resume(exception_object);
}

uint64_t sub_21A6F35D8(uint64_t a1, char *a2, void **a3, uint64_t *a4)
{
  uint64_t v8;
  _BOOL4 v10;
  _BOOL4 v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  void *__p[2];
  char v16;
  void *v17[2];
  char v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  __int16 v23;
  CFTypeRef cf;
  BOOL v25;
  void *v26[2];
  char v27;
  std::string v28;

  memset(&v28, 0, sizeof(v28));
  sub_21A6CE0F0(v26, a2);
  v25 = 0;
  cf = 0;
  sub_21A6B2D64((unsigned __int8 *)v26, 1918979649, &v28);
  v8 = sub_21A6B79E0(a1, (uint64_t)&v28, &v25, 0);
  if (!(_DWORD)v8)
  {
    if (!sub_21A6AF0B4(a1, 1198748750))
    {
      v8 = 0;
      goto LABEL_15;
    }
    v8 = 0;
    if (sub_21A6BC5A8(a1) && v25)
    {
      v23 = 0;
      v22 = 0;
      v19 = 0;
      v20 = 0;
      v21 = 0;
      sub_21A6CE0F0(v17, a2);
      sub_21A6CE0F0(__p, "raWM");
      v8 = (*(uint64_t (**)(uint64_t, void **, void **, std::string *))(*(_QWORD *)a1 + 16))(a1, v17, __p, &v28);
      if (v16 < 0)
        operator delete(__p[0]);
      if (v18 < 0)
        operator delete(v17[0]);
      if ((_DWORD)v8)
        goto LABEL_11;
      v8 = sub_21A6B77DC(a1, (uint64_t)&v28, &v22, 0);
      if ((_DWORD)v8)
        goto LABEL_11;
      if (!v22)
        goto LABEL_56;
      sub_21A6CE0F0(v17, "raWE");
      sub_21A6B3A38((unsigned __int8 *)&v28, (uint64_t)v17, &v28);
      if (v18 < 0)
        operator delete(v17[0]);
      sub_21A6B44B4(a1, (uint64_t)&v28, (CFMutableDictionaryRef *)&cf, 0);
      if ((v22 - 3) >= 3)
      {
        if (v22 == 2)
        {
          v13 = 1769419083;
          if (cf && CFDataGetLength((CFDataRef)cf) == 13)
            goto LABEL_56;
        }
        else
        {
          if (v22 != 1 || cf && CFDataGetLength((CFDataRef)cf) == 5)
            goto LABEL_56;
          v13 = 1769419851;
        }
      }
      else
      {
        sub_21A6CE0F0(v17, "raEA");
        sub_21A6B3A38((unsigned __int8 *)&v28, (uint64_t)v17, &v28);
        if (v18 < 0)
          operator delete(v17[0]);
        sub_21A6B79E0(a1, (uint64_t)&v28, (BOOL *)&v23 + 1, 0);
        sub_21A6CE0F0(v17, "raCr");
        sub_21A6B3A38((unsigned __int8 *)&v28, (uint64_t)v17, &v28);
        if (v18 < 0)
          operator delete(v17[0]);
        sub_21A6B7B5C(a1, (uint64_t)&v28, (uint64_t)&v19, 0);
        sub_21A6CE0F0(v17, "rTSN");
        sub_21A6B3A38((unsigned __int8 *)&v28, (uint64_t)v17, &v28);
        if (v18 < 0)
          operator delete(v17[0]);
        v8 = sub_21A6B79E0(a1, (uint64_t)&v28, (BOOL *)&v23, 0);
        if ((_DWORD)v8)
          goto LABEL_11;
        v10 = sub_21A6AF0B4(a1, 1414745645);
        if ((_BYTE)v23)
          v11 = v10;
        else
          v11 = 0;
        if (v11)
        {
          v12 = HIBYTE(v21);
          if (v21 < 0)
            v12 = v20;
          if (v12 == 13)
            goto LABEL_56;
          v13 = 1767134030;
        }
        else
        {
          if (HIBYTE(v23))
            goto LABEL_56;
          v13 = 1767329857;
          if (cf && CFDataGetLength((CFDataRef)cf) == 32)
          {
            v14 = HIBYTE(v21);
            if (v21 < 0)
              v14 = v20;
            if (v14)
              goto LABEL_56;
          }
        }
      }
      sub_21A6EB47C(1651722064, v13, a3, a4);
LABEL_56:
      v8 = 0;
LABEL_11:
      if (SHIBYTE(v21) < 0)
        operator delete(v19);
    }
  }
LABEL_15:
  if (cf)
    CFRelease(cf);
  if (v27 < 0)
    operator delete(v26[0]);
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v28.__r_.__value_.__l.__data_);
  return v8;
}

void sub_21A6F39A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  uint64_t v35;

  if (a20 < 0)
    operator delete(__p);
  if (a26 < 0)
    operator delete(a21);
  if (a35 < 0)
    operator delete(a30);
  if (*(char *)(v35 - 49) < 0)
    operator delete(*(void **)(v35 - 72));
  _Unwind_Resume(exception_object);
}

uint64_t sub_21A6F3A40(uint64_t a1, char *a2, void **a3, uint64_t *a4)
{
  size_t v8;
  size_t v9;
  int v10;
  uint64_t v11;
  _BOOL4 v14;
  _BYTE *p_p;
  BOOL v17;
  int v18;
  void *__p;
  uint64_t v20;
  uint64_t v21;
  void *v22[2];
  char v23;
  std::string v24;
  __int128 v25;
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  if (!sub_21A6AF0B4(a1, 1768961614))
    return 0;
  memset(&v24, 0, sizeof(v24));
  sub_21A6CE0F0(v22, a2);
  __p = 0;
  v20 = 0;
  v21 = 0;
  v18 = 0;
  v17 = 0;
  v8 = strlen(a2);
  if (v8 >= 4)
    v9 = 4;
  else
    v9 = v8;
  if (!strncmp(a2, "6Wad", v9))
    v10 = 911696228;
  else
    v10 = 1651717697;
  sub_21A6B2D64((unsigned __int8 *)v22, 912483943, &v24);
  v11 = sub_21A6B77DC(a1, (uint64_t)&v24, &v18, 0);
  if (!(_DWORD)v11)
  {
    sub_21A6B2D64((unsigned __int8 *)v22, 912356724, &v24);
    v11 = sub_21A6B79E0(a1, (uint64_t)&v24, &v17, 0);
    if (!(_DWORD)v11)
    {
      sub_21A6B2D64((unsigned __int8 *)v22, 911696228, &v24);
      v11 = sub_21A6B7B5C(a1, (uint64_t)&v24, (uint64_t)&__p, 0);
      if (!(_DWORD)v11)
      {
        v14 = (v18 == 5 || (v18 & 0xFFFFFFFD) == 1) && !v17;
        v25 = 0uLL;
        if (v17)
        {
LABEL_21:
          v11 = 0;
          goto LABEL_22;
        }
        if (SHIBYTE(v21) < 0)
        {
          if (v20)
          {
            p_p = __p;
LABEL_35:
            v11 = sub_21A6A11D4(p_p, 0, &v25, 0, 0, 0, 0);
            if ((_DWORD)v11)
            {
              sub_21A6EB47C(v10, 1732604485, a3, a4);
              goto LABEL_22;
            }
          }
        }
        else if (HIBYTE(v21))
        {
          p_p = &__p;
          goto LABEL_35;
        }
        if (v14 && sub_21A6A102C((unsigned __int8 *)&v25, 0))
          sub_21A6EB47C(v10, 1732604485, a3, a4);
        goto LABEL_21;
      }
    }
  }
LABEL_22:
  if (SHIBYTE(v21) < 0)
    operator delete(__p);
  if (v23 < 0)
    operator delete(v22[0]);
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v24.__r_.__value_.__l.__data_);
  return v11;
}

void sub_21A6F3CA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_21A6F3CE4(uint64_t a1, char *a2, void **a3, uint64_t *a4)
{
  uint64_t v8;
  _BOOL4 v11;
  _BYTE *p_p;
  BOOL v14;
  char v15;
  BOOL v16;
  int v17;
  void *__p;
  uint64_t v19;
  uint64_t v20;
  void *v21[2];
  char v22;
  std::string v23;
  __int128 v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  if (!sub_21A6AF0B4(a1, 1768961614))
    return 0;
  memset(&v23, 0, sizeof(v23));
  sub_21A6CE0F0(v21, a2);
  __p = 0;
  v19 = 0;
  v20 = 0;
  v17 = 0;
  v16 = 0;
  sub_21A6B2D64((unsigned __int8 *)v21, 912483943, &v23);
  v8 = sub_21A6B77DC(a1, (uint64_t)&v23, &v17, 0);
  if (!(_DWORD)v8)
  {
    sub_21A6B2D64((unsigned __int8 *)v21, 912356724, &v23);
    v8 = sub_21A6B79E0(a1, (uint64_t)&v23, &v16, 0);
    if (!(_DWORD)v8)
    {
      sub_21A6B2D64((unsigned __int8 *)v21, 911697783, &v23);
      v8 = sub_21A6B7B5C(a1, (uint64_t)&v23, (uint64_t)&__p, 0);
      if (!(_DWORD)v8)
      {
        v11 = (v17 == 5 || (v17 & 0xFFFFFFFD) == 1) && !v16;
        v24 = 0uLL;
        if (v16)
        {
LABEL_15:
          v8 = 0;
          goto LABEL_16;
        }
        if (SHIBYTE(v20) < 0)
        {
          if (v19)
          {
            p_p = __p;
LABEL_29:
            v8 = sub_21A6A11D4(p_p, 0, &v24, 0, 0, 0, 0);
            if ((_DWORD)v8)
            {
              sub_21A6EB47C(911697783, 1732604485, a3, a4);
              goto LABEL_16;
            }
          }
        }
        else if (HIBYTE(v20))
        {
          p_p = &__p;
          goto LABEL_29;
        }
        if (v11)
        {
          v14 = v17 == 3 && !v16;
          v15 = v14 ? 0 : 3;
          if (sub_21A6A102C((unsigned __int8 *)&v24, v15))
            sub_21A6EB47C(911697783, 1732604485, a3, a4);
        }
        goto LABEL_15;
      }
    }
  }
LABEL_16:
  if (SHIBYTE(v20) < 0)
    operator delete(__p);
  if (v22 < 0)
    operator delete(v21[0]);
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v23.__r_.__value_.__l.__data_);
  return v8;
}

void sub_21A6F3F1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_21A6F3F60(uint64_t a1, char *a2, void **a3, uint64_t *a4)
{
  uint64_t v8;
  _BOOL4 v11;
  _BYTE *p_p;
  BOOL v14;
  int v15;
  void *__p;
  uint64_t v17;
  uint64_t v18;
  void *v19[2];
  char v20;
  std::string v21;
  __int128 v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  if (!sub_21A6AF0B4(a1, 1768961614))
    return 0;
  memset(&v21, 0, sizeof(v21));
  sub_21A6CE0F0(v19, a2);
  __p = 0;
  v17 = 0;
  v18 = 0;
  v15 = 0;
  v14 = 0;
  sub_21A6B2D64((unsigned __int8 *)v19, 912483943, &v21);
  v8 = sub_21A6B77DC(a1, (uint64_t)&v21, &v15, 0);
  if (!(_DWORD)v8)
  {
    sub_21A6B2D64((unsigned __int8 *)v19, 912356724, &v21);
    v8 = sub_21A6B79E0(a1, (uint64_t)&v21, &v14, 0);
    if (!(_DWORD)v8)
    {
      sub_21A6B2D64((unsigned __int8 *)v19, 910975332, &v21);
      v8 = sub_21A6B7B5C(a1, (uint64_t)&v21, (uint64_t)&__p, 0);
      if (!(_DWORD)v8)
      {
        v11 = (v15 == 3 || v15 == 5) && !v14;
        v22 = 0uLL;
        if (v14)
        {
LABEL_15:
          v8 = 0;
          goto LABEL_16;
        }
        if (SHIBYTE(v18) < 0)
        {
          if (v17)
          {
            p_p = __p;
LABEL_29:
            v8 = sub_21A6A11D4(p_p, 0, &v22, 0, 0, 0, 0);
            if ((_DWORD)v8)
            {
              sub_21A6EB47C(910975332, 1732604485, a3, a4);
              goto LABEL_16;
            }
          }
        }
        else if (HIBYTE(v18))
        {
          p_p = &__p;
          goto LABEL_29;
        }
        if (v11 && sub_21A6A102C((unsigned __int8 *)&v22, 0))
          sub_21A6EB47C(910975332, 1732604485, a3, a4);
        goto LABEL_15;
      }
    }
  }
LABEL_16:
  if (SHIBYTE(v18) < 0)
    operator delete(__p);
  if (v20 < 0)
    operator delete(v19[0]);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
  return v8;
}

void sub_21A6F4180(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_21A6F41C4(uint64_t a1, char *a2, void **a3, uint64_t *a4)
{
  size_t v8;
  size_t v9;
  int v10;
  uint64_t v11;
  _BOOL4 v14;
  _BYTE *p_p;
  BOOL v17;
  int v18;
  void *__p;
  uint64_t v20;
  uint64_t v21;
  void *v22[2];
  char v23;
  std::string v24;
  __int128 v25;
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  if (!sub_21A6AF0B4(a1, 1768961614))
    return 0;
  memset(&v24, 0, sizeof(v24));
  sub_21A6CE0F0(v22, a2);
  __p = 0;
  v20 = 0;
  v21 = 0;
  v18 = 0;
  v17 = 0;
  v8 = strlen(a2);
  if (v8 >= 4)
    v9 = 4;
  else
    v9 = v8;
  if (!strncmp(a2, "6PDa", v9))
    v10 = 911230049;
  else
    v10 = 1651717712;
  sub_21A6B2D64((unsigned __int8 *)v22, 912483943, &v24);
  v11 = sub_21A6B77DC(a1, (uint64_t)&v24, &v18, 0);
  if (!(_DWORD)v11)
  {
    sub_21A6B2D64((unsigned __int8 *)v22, 912356724, &v24);
    v11 = sub_21A6B79E0(a1, (uint64_t)&v24, &v17, 0);
    if (!(_DWORD)v11)
    {
      sub_21A6B2D64((unsigned __int8 *)v22, 911230049, &v24);
      v11 = sub_21A6B7B5C(a1, (uint64_t)&v24, (uint64_t)&__p, 0);
      if (!(_DWORD)v11)
      {
        v14 = (v18 == 3 || v18 == 5) && !v17;
        v25 = 0uLL;
        if (v17)
        {
LABEL_21:
          v11 = 0;
          goto LABEL_22;
        }
        if (SHIBYTE(v21) < 0)
        {
          if (v20)
          {
            p_p = __p;
LABEL_35:
            v11 = sub_21A6A11D4(p_p, 0, &v25, 0, 0, 0, 0);
            if ((_DWORD)v11)
            {
              sub_21A6EB47C(v10, 1732604485, a3, a4);
              goto LABEL_22;
            }
          }
        }
        else if (HIBYTE(v21))
        {
          p_p = &__p;
          goto LABEL_35;
        }
        if (v14 && sub_21A6A102C((unsigned __int8 *)&v25, 0))
          sub_21A6EB47C(v10, 1732604485, a3, a4);
        goto LABEL_21;
      }
    }
  }
LABEL_22:
  if (SHIBYTE(v21) < 0)
    operator delete(__p);
  if (v23 < 0)
    operator delete(v22[0]);
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v24.__r_.__value_.__l.__data_);
  return v11;
}

void sub_21A6F4420(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_21A6F4464(uint64_t a1, char *a2, void **a3, uint64_t *a4)
{
  uint64_t v8;
  BOOL v9;
  _BOOL4 v10;
  char *p_p;
  unsigned int v13;
  BOOL v14;
  int v15;
  void *__p;
  uint64_t v17;
  uint64_t v18;
  void *v19[2];
  char v20;
  std::string v21;

  if (!sub_21A6AF0B4(a1, 1768961614))
    return 0;
  memset(&v21, 0, sizeof(v21));
  sub_21A6CE0F0(v19, a2);
  __p = 0;
  v17 = 0;
  v18 = 0;
  v15 = 0;
  v14 = 0;
  sub_21A6B2D64((unsigned __int8 *)v19, 912483943, &v21);
  v8 = sub_21A6B77DC(a1, (uint64_t)&v21, &v15, 0);
  if (!(_DWORD)v8)
  {
    sub_21A6B2D64((unsigned __int8 *)v19, 912356724, &v21);
    v8 = sub_21A6B79E0(a1, (uint64_t)&v21, &v14, 0);
    if (!(_DWORD)v8)
    {
      sub_21A6B2D64((unsigned __int8 *)v19, 911701093, &v21);
      v8 = sub_21A6B7B5C(a1, (uint64_t)&v21, (uint64_t)&__p, 0);
      if (!(_DWORD)v8)
      {
        v9 = v15 == 3 && !v14;
        v10 = v9;
        v13 = 0;
        if (!v14)
        {
          if (SHIBYTE(v18) < 0)
          {
            if (!v17)
              goto LABEL_20;
            p_p = (char *)__p;
          }
          else
          {
            if (!HIBYTE(v18))
              goto LABEL_20;
            p_p = (char *)&__p;
          }
          v8 = sub_21A6A16C4(p_p, 0, &v13, 0, 0, 0, 0);
          if ((_DWORD)v8)
          {
            sub_21A6EB47C(911701093, 1732604485, a3, a4);
            goto LABEL_24;
          }
LABEL_20:
          if (v10 && sub_21A6A0F50(bswap32(v13)))
            sub_21A6EB47C(911701093, 1732604485, a3, a4);
          v8 = 0;
        }
      }
    }
  }
LABEL_24:
  if (SHIBYTE(v18) < 0)
    operator delete(__p);
  if (v20 < 0)
    operator delete(v19[0]);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
  return v8;
}

void sub_21A6F4650(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  uint64_t v23;

  if (*(char *)(v23 - 33) < 0)
    operator delete(*(void **)(v23 - 56));
  _Unwind_Resume(exception_object);
}

uint64_t **sub_21A6F4694()
{
  _QWORD *v0;
  int *v1;
  uint64_t **result;
  int v3;

  if (!qword_2550F4E00)
  {
    v0 = (_QWORD *)operator new();
    v0[2] = 0;
    v0[1] = 0;
    *v0 = v0 + 1;
    qword_2550F4E00 = (uint64_t)v0;
  }
  v1 = &dword_2550EFCE0;
  do
  {
    result = sub_21A6F4718((uint64_t **)qword_2550F4E00, v1);
    *result = (uint64_t *)v1;
    v3 = *v1;
    v1 += 14;
  }
  while (v3 != 1651721040);
  return result;
}

uint64_t **sub_21A6F4718(uint64_t **a1, int *a2)
{
  uint64_t *v3;
  uint64_t **v4;
  int v5;
  uint64_t **v6;
  int v7;
  _DWORD *v8;

  v4 = a1 + 1;
  v3 = a1[1];
  v5 = *a2;
  if (v3)
  {
    while (1)
    {
      while (1)
      {
        v6 = (uint64_t **)v3;
        v7 = *((_DWORD *)v3 + 8);
        if (v5 >= v7)
          break;
        v3 = *v6;
        v4 = v6;
        if (!*v6)
          goto LABEL_9;
      }
      if (v7 >= v5)
        break;
      v3 = v6[1];
      if (!v3)
      {
        v4 = v6 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    v6 = a1 + 1;
LABEL_9:
    v8 = operator new(0x30uLL);
    v8[8] = v5;
    *((_QWORD *)v8 + 5) = 0;
    sub_21A6F5378(a1, (uint64_t)v6, v4, (uint64_t *)v8);
    v6 = (uint64_t **)v8;
  }
  return v6 + 5;
}

uint64_t sub_21A6F47C0(uint64_t a1, const char *a2, _QWORD *a3, uint64_t a4)
{
  signed int v8;
  uint64_t v9;
  uint64_t v10;
  signed int v11;
  BOOL v12;
  uint64_t *v13;
  uint64_t (*v14)(uint64_t, const char *, _QWORD *, uint64_t);

  if (!a3)
    return 4294967292;
  v8 = sub_21A6BB08C(a2);
  v9 = *(_QWORD *)(qword_2550F4E00 + 8);
  if (!v9)
    goto LABEL_12;
  v10 = qword_2550F4E00 + 8;
  do
  {
    v11 = *(_DWORD *)(v9 + 32);
    v12 = v11 < v8;
    if (v11 >= v8)
      v13 = (uint64_t *)v9;
    else
      v13 = (uint64_t *)(v9 + 8);
    if (!v12)
      v10 = v9;
    v9 = *v13;
  }
  while (*v13);
  if (v10 == qword_2550F4E00 + 8 || v8 < *(_DWORD *)(v10 + 32))
LABEL_12:
    v10 = qword_2550F4E00 + 8;
  *a3 = 0;
  if (v10 == qword_2550F4E00 + 8)
    return 0;
  v14 = *(uint64_t (**)(uint64_t, const char *, _QWORD *, uint64_t))(*(_QWORD *)(v10 + 40) + 48);
  if (!v14)
    return 0;
  else
    return v14(a1, a2, a3, a4);
}

uint64_t sub_21A6F4890(const __CFDictionary *a1)
{
  const __CFArray *Value;
  __CFString *v2;
  CFIndex Count;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  CFIndex v9;
  uint64_t v10;
  const __CFAllocator *v11;
  uint64_t v12;
  uint64_t v13;
  CFStringRef v14;
  int64_t size;
  std::string *v16;
  _BYTE *v17;
  std::string *v18;
  _BYTE *v19;
  std::string::size_type v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  std::string *v26;
  std::string v28;
  unsigned __int8 v29[6];
  char cStr[16];
  __int128 v31;
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  memset(&v28, 0, sizeof(v28));
  if (!a1)
    return 4294967292;
  Value = (const __CFArray *)CFDictionaryGetValue(a1, CFSTR("legacywds"));
  if (!Value)
    return 0;
  v2 = (__CFString *)Value;
  Count = CFArrayGetCount(Value);
  if (Count < 1)
    return 0;
  v9 = Count;
  v10 = 0;
  v11 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  while (1)
  {
    sub_21A693B94(v2, (uint64_t)v29, (UInt8 *)"[*].%kO:mac", v4, v5, v6, v7, v8, v10);
    v13 = v12;
    if ((_DWORD)v12)
      break;
    *(_OWORD *)cStr = 0u;
    v31 = 0u;
    sub_21A6A1FDC(v29, 6, cStr);
    v14 = CFStringCreateWithCString(v11, cStr, 0x8000100u);
    if (v14)
    {
      snprintf(cStr, 0x20uLL, "%ld", v10);
      MEMORY[0x220747320](&v28, "[*].");
      if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v28.__r_.__value_.__r.__words[2]);
      else
        size = v28.__r_.__value_.__l.__size_;
      if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v16 = &v28;
      else
        v16 = (std::string *)v28.__r_.__value_.__r.__words[0];
      v17 = (char *)v16 + size;
      if (size >= 1)
      {
        v18 = v16;
        do
        {
          v19 = memchr(v18, 42, size);
          if (!v19)
            break;
          if (*v19 == 42)
            goto LABEL_19;
          v18 = (std::string *)(v19 + 1);
          size = v17 - (_BYTE *)v18;
        }
        while (v17 - (_BYTE *)v18 > 0);
      }
      v19 = v17;
LABEL_19:
      if (v19 == v17)
        v20 = -1;
      else
        v20 = v19 - (_BYTE *)v16;
      std::string::replace(&v28, v20, 1uLL, cStr);
      std::string::append(&v28, "PeerMAC");
      if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v26 = &v28;
      else
        v26 = (std::string *)v28.__r_.__value_.__r.__words[0];
      v13 = sub_21A6951D8(v2, (uint64_t)v26, v14, v21, v22, v23, v24, v25);
      CFRelease(v14);
      if ((_DWORD)v13)
        break;
      if (++v10 != v9)
        continue;
    }
    v13 = 0;
    break;
  }
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v28.__r_.__value_.__l.__data_);
  return v13;
}

void sub_21A6F4AAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_21A6F4AC8(const __CFDictionary *a1)
{
  const __CFArray *Value;
  __CFString *v2;
  CFIndex Count;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  CFIndex v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int64_t size;
  std::string *v14;
  _BYTE *v15;
  std::string *v16;
  _BYTE *v17;
  std::string::size_type v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  std::string *v24;
  std::string v26;
  CFTypeRef cf;
  CFTypeRef v28;
  char __str[32];
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  v28 = 0;
  memset(&v26, 0, sizeof(v26));
  if (!a1)
    return 4294967292;
  cf = 0;
  Value = (const __CFArray *)CFDictionaryGetValue(a1, CFSTR("legacywds"));
  if (!Value)
    return 0;
  v2 = (__CFString *)Value;
  Count = CFArrayGetCount(Value);
  if (Count < 1)
    return 0;
  v9 = Count;
  v10 = 0;
  while (1)
  {
    sub_21A693B94(v2, (uint64_t)&v28, (UInt8 *)"[*].%kO", v4, v5, v6, v7, v8, v10);
    v12 = v11;
    if ((_DWORD)v11)
      break;
    v12 = sub_21A674314(1918979393, (const __CFString *)v28, 1, (CFDataRef *)&cf);
    if ((_DWORD)v12)
      break;
    snprintf(__str, 0x20uLL, "%ld", v10);
    MEMORY[0x220747320](&v26, "[*].");
    if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v26.__r_.__value_.__r.__words[2]);
    else
      size = v26.__r_.__value_.__l.__size_;
    if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v14 = &v26;
    else
      v14 = (std::string *)v26.__r_.__value_.__r.__words[0];
    v15 = (char *)v14 + size;
    if (size >= 1)
    {
      v16 = v14;
      do
      {
        v17 = memchr(v16, 42, size);
        if (!v17)
          break;
        if (*v17 == 42)
          goto LABEL_19;
        v16 = (std::string *)(v17 + 1);
        size = v15 - (_BYTE *)v16;
      }
      while (v15 - (_BYTE *)v16 > 0);
    }
    v17 = v15;
LABEL_19:
    v18 = v17 == v15 ? -1 : v17 - (_BYTE *)v14;
    std::string::replace(&v26, v18, 1uLL, __str);
    std::string::append(&v26, "PeerMAC");
    v24 = (v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? &v26
        : (std::string *)v26.__r_.__value_.__r.__words[0];
    v12 = sub_21A6951D8(v2, (uint64_t)v24, cf, v19, v20, v21, v22, v23);
    CFRelease(cf);
    if ((_DWORD)v12)
      break;
    if (++v10 == v9)
    {
      v12 = 0;
      break;
    }
  }
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v26.__r_.__value_.__l.__data_);
  return v12;
}

void sub_21A6F4CD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_21A6F4CEC(const __CFDictionary *a1)
{
  const __CFArray *Value;
  __CFString *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  CFIndex Count;
  uint64_t i;
  uint64_t v10;
  uint64_t v11;
  CFTypeID v12;
  const __CFString *v13;
  CFTypeID TypeID;
  int64_t size;
  std::string *v16;
  _BYTE *v17;
  std::string *v18;
  _BYTE *v19;
  std::string::size_type v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  std::string *v26;
  std::string v28;
  CFTypeRef v29;
  CFTypeRef cf;
  char __str[32];
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  v29 = 0;
  cf = 0;
  memset(&v28, 0, sizeof(v28));
  if (a1)
  {
    Value = (const __CFArray *)CFDictionaryGetValue(a1, CFSTR("vaps"));
    v2 = (__CFString *)Value;
    if (Value)
    {
      Count = CFArrayGetCount(Value);
      if (Count >= 1)
      {
        for (i = 0; i != Count; ++i)
        {
          sub_21A693B94(v2, (uint64_t)&cf, (UInt8 *)"[*].%kO", v3, v4, v5, v6, v7, i);
          v11 = v10;
          if ((_DWORD)v10 != -6727)
          {
            if ((_DWORD)v10)
              goto LABEL_32;
            if (!cf)
              break;
            v12 = CFGetTypeID(cf);
            if (v12 == CFDataGetTypeID())
            {
              v13 = (const __CFString *)cf;
              TypeID = CFStringGetTypeID();
              v11 = sub_21A6F4F30(TypeID, v13, TypeID, &v29);
              if ((_DWORD)v11)
                goto LABEL_32;
              snprintf(__str, 0x20uLL, "%ld", i);
              MEMORY[0x220747320](&v28, "[*].");
              if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                size = HIBYTE(v28.__r_.__value_.__r.__words[2]);
              else
                size = v28.__r_.__value_.__l.__size_;
              if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v16 = &v28;
              else
                v16 = (std::string *)v28.__r_.__value_.__r.__words[0];
              v17 = (char *)v16 + size;
              if (size >= 1)
              {
                v18 = v16;
                do
                {
                  v19 = memchr(v18, 42, size);
                  if (!v19)
                    break;
                  if (*v19 == 42)
                    goto LABEL_22;
                  v18 = (std::string *)(v19 + 1);
                  size = v17 - (_BYTE *)v18;
                }
                while (v17 - (_BYTE *)v18 > 0);
              }
              v19 = v17;
LABEL_22:
              v20 = v19 == v17 ? -1 : v19 - (_BYTE *)v16;
              std::string::replace(&v28, v20, 1uLL, __str);
              std::string::append(&v28, "raCr");
              v26 = (v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
                  ? &v28
                  : (std::string *)v28.__r_.__value_.__r.__words[0];
              v11 = sub_21A6951D8(v2, (uint64_t)v26, v29, v21, v22, v23, v24, v25);
              CFRelease(v29);
              if ((_DWORD)v11)
                goto LABEL_32;
            }
          }
        }
      }
    }
    v11 = 0;
  }
  else
  {
    v11 = 4294967292;
  }
LABEL_32:
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v28.__r_.__value_.__l.__data_);
  return v11;
}

void sub_21A6F4F10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_21A6F4F30(int a1, const __CFString *cf, uint64_t a3, _QWORD *a4)
{
  uint64_t result;
  CFTypeID v8;
  CFTypeID v9;
  CFTypeID TypeID;
  CFTypeID v11;
  size_t v12;
  BOOL v13;
  const __CFAllocator *v14;
  const UInt8 *BytePtr;
  CFIndex Length;
  void *v17;
  CFTypeID v18;
  CFTypeID v19;
  _QWORD *v20;
  void *v21;
  char *__s;

  result = 4294967292;
  if (cf && a4)
  {
    v8 = CFGetTypeID(cf);
    if (v8 == a3)
    {
      *a4 = cf;
      CFRetain(cf);
      return 0;
    }
    v9 = v8;
    TypeID = CFStringGetTypeID();
    v11 = CFDataGetTypeID();
    if (v9 == TypeID)
    {
      if (v11 == a3)
      {
        v21 = 0;
        __s = 0;
        result = sub_21A694C44(cf, (const char **)&__s, (UInt8 **)&v21);
        if ((_DWORD)result)
          return result;
        v12 = strlen(__s);
        *a4 = CFDataCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], (const UInt8 *)__s, v12);
        free(v21);
        v13 = *a4 == 0;
        goto LABEL_16;
      }
      return 4294967292;
    }
    if (v9 == v11)
    {
      if (CFStringGetTypeID() != a3)
        return 4294967292;
      v14 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
      BytePtr = CFDataGetBytePtr((CFDataRef)cf);
      Length = CFDataGetLength((CFDataRef)cf);
      v17 = (void *)CFStringCreateWithBytes(v14, BytePtr, Length, 0x8000100u, 0);
LABEL_15:
      *a4 = v17;
      v13 = v17 == 0;
LABEL_16:
      if (v13)
        return 4294967293;
      else
        return 0;
    }
    v18 = CFBooleanGetTypeID();
    v19 = CFNumberGetTypeID();
    if (v9 == v18)
    {
      if (v19 != a3)
        return 4294967292;
      LODWORD(__s) = *MEMORY[0x24BDBD268] != (_QWORD)cf;
      v17 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], kCFNumberSInt32Type, &__s);
      goto LABEL_15;
    }
    if (v9 != v19 || CFBooleanGetTypeID() != a3)
      return 4294967292;
    LODWORD(__s) = 0;
    if (!CFNumberGetValue((CFNumberRef)cf, kCFNumberSInt32Type, &__s))
      return 4294967293;
    if (__s > 1)
      return 4294967292;
    result = 0;
    if ((_DWORD)__s)
      v20 = (_QWORD *)MEMORY[0x24BDBD270];
    else
      v20 = (_QWORD *)MEMORY[0x24BDBD268];
    *a4 = *v20;
  }
  return result;
}

uint64_t sub_21A6F5134(const __CFDictionary *a1)
{
  const __CFArray *Value;
  __CFString *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  CFIndex Count;
  uint64_t i;
  uint64_t v10;
  uint64_t v11;
  CFTypeID v12;
  const __CFString *v13;
  CFTypeID TypeID;
  int64_t size;
  std::string *v16;
  _BYTE *v17;
  std::string *v18;
  _BYTE *v19;
  std::string::size_type v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  std::string *v26;
  std::string v28;
  CFTypeRef v29;
  CFTypeRef cf;
  char __str[32];
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  v29 = 0;
  cf = 0;
  memset(&v28, 0, sizeof(v28));
  if (a1)
  {
    Value = (const __CFArray *)CFDictionaryGetValue(a1, CFSTR("vaps"));
    v2 = (__CFString *)Value;
    if (Value)
    {
      Count = CFArrayGetCount(Value);
      if (Count >= 1)
      {
        for (i = 0; i != Count; ++i)
        {
          sub_21A693B94(v2, (uint64_t)&cf, (UInt8 *)"[*].%kO", v3, v4, v5, v6, v7, i);
          v11 = v10;
          if ((_DWORD)v10 != -6727)
          {
            if ((_DWORD)v10)
              goto LABEL_32;
            if (!cf)
              break;
            v12 = CFGetTypeID(cf);
            if (v12 == CFStringGetTypeID())
            {
              v13 = (const __CFString *)cf;
              TypeID = CFDataGetTypeID();
              v11 = sub_21A6F4F30(TypeID, v13, TypeID, &v29);
              if ((_DWORD)v11)
                goto LABEL_32;
              snprintf(__str, 0x20uLL, "%ld", i);
              MEMORY[0x220747320](&v28, "[*].");
              if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                size = HIBYTE(v28.__r_.__value_.__r.__words[2]);
              else
                size = v28.__r_.__value_.__l.__size_;
              if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v16 = &v28;
              else
                v16 = (std::string *)v28.__r_.__value_.__r.__words[0];
              v17 = (char *)v16 + size;
              if (size >= 1)
              {
                v18 = v16;
                do
                {
                  v19 = memchr(v18, 42, size);
                  if (!v19)
                    break;
                  if (*v19 == 42)
                    goto LABEL_22;
                  v18 = (std::string *)(v19 + 1);
                  size = v17 - (_BYTE *)v18;
                }
                while (v17 - (_BYTE *)v18 > 0);
              }
              v19 = v17;
LABEL_22:
              v20 = v19 == v17 ? -1 : v19 - (_BYTE *)v16;
              std::string::replace(&v28, v20, 1uLL, __str);
              std::string::append(&v28, "raCr");
              v26 = (v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
                  ? &v28
                  : (std::string *)v28.__r_.__value_.__r.__words[0];
              v11 = sub_21A6951D8(v2, (uint64_t)v26, v29, v21, v22, v23, v24, v25);
              CFRelease(v29);
              if ((_DWORD)v11)
                goto LABEL_32;
            }
          }
        }
      }
    }
    v11 = 0;
  }
  else
  {
    v11 = 4294967292;
  }
LABEL_32:
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v28.__r_.__value_.__l.__data_);
  return v11;
}

void sub_21A6F5358(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t *sub_21A6F5378(uint64_t **a1, uint64_t a2, uint64_t **a3, uint64_t *a4)
{
  uint64_t *v5;
  uint64_t *result;

  *a4 = 0;
  a4[1] = 0;
  a4[2] = a2;
  *a3 = a4;
  v5 = (uint64_t *)**a1;
  if (v5)
  {
    *a1 = v5;
    a4 = *a3;
  }
  result = sub_21A6F53CC(a1[1], a4);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return result;
}

uint64_t *sub_21A6F53CC(uint64_t *result, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t **v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *((_BYTE *)a2 + 24) = a2 == result;
  if (a2 != result)
  {
    do
    {
      v2 = (uint64_t *)a2[2];
      if (*((_BYTE *)v2 + 24))
        return result;
      v3 = (uint64_t *)v2[2];
      v4 = (uint64_t *)*v3;
      if ((uint64_t *)*v3 == v2)
      {
        v7 = v3[1];
        if (!v7 || (v8 = *(unsigned __int8 *)(v7 + 24), v5 = (_BYTE *)(v7 + 24), v8))
        {
          if ((uint64_t *)*v2 == a2)
          {
            v9 = (uint64_t **)a2[2];
          }
          else
          {
            v9 = (uint64_t **)v2[1];
            v10 = *v9;
            v2[1] = (uint64_t)*v9;
            if (v10)
            {
              v10[2] = (uint64_t)v2;
              v3 = (uint64_t *)v2[2];
            }
            v9[2] = v3;
            *(_QWORD *)(v2[2] + 8 * (*(_QWORD *)v2[2] != (_QWORD)v2)) = v9;
            *v9 = v2;
            v2[2] = (uint64_t)v9;
            v3 = v9[2];
            v2 = (uint64_t *)*v3;
          }
          *((_BYTE *)v9 + 24) = 1;
          *((_BYTE *)v3 + 24) = 0;
          v13 = v2[1];
          *v3 = v13;
          if (v13)
            *(_QWORD *)(v13 + 16) = v3;
          v2[2] = v3[2];
          *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v2;
          v2[1] = (uint64_t)v3;
          goto LABEL_27;
        }
      }
      else if (!v4 || (v6 = *((unsigned __int8 *)v4 + 24), v5 = v4 + 3, v6))
      {
        if ((uint64_t *)*v2 == a2)
        {
          v11 = a2[1];
          *v2 = v11;
          if (v11)
          {
            *(_QWORD *)(v11 + 16) = v2;
            v3 = (uint64_t *)v2[2];
          }
          a2[2] = (uint64_t)v3;
          *(_QWORD *)(v2[2] + 8 * (*(_QWORD *)v2[2] != (_QWORD)v2)) = a2;
          a2[1] = (uint64_t)v2;
          v2[2] = (uint64_t)a2;
          v3 = (uint64_t *)a2[2];
        }
        else
        {
          a2 = (uint64_t *)a2[2];
        }
        *((_BYTE *)a2 + 24) = 1;
        *((_BYTE *)v3 + 24) = 0;
        v2 = (uint64_t *)v3[1];
        v12 = *v2;
        v3[1] = *v2;
        if (v12)
          *(_QWORD *)(v12 + 16) = v3;
        v2[2] = v3[2];
        *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v2;
        *v2 = (uint64_t)v3;
LABEL_27:
        v3[2] = (uint64_t)v2;
        return result;
      }
      *((_BYTE *)v2 + 24) = 1;
      a2 = v3;
      *((_BYTE *)v3 + 24) = v3 == result;
      *v5 = 1;
    }
    while (v3 != result);
  }
  return result;
}

__CFString *sub_21A6F5564(uint64_t a1, const char *a2, uint64_t a3)
{
  __CFString *result;
  const char *v4;
  uint64_t v5;
  void *v6;
  const char *v7;
  uint64_t v8;

  result = (__CFString *)objc_msgSend_systemTimeZone(MEMORY[0x24BDBCF38], a2, a3);
  if (result)
  {
    v6 = (void *)objc_msgSend_name(result, v4, v5);
    if (objc_msgSend_length(v6, v7, v8))
      return (__CFString *)v6;
    else
      return CFSTR("GMT");
  }
  return result;
}

uint64_t sub_21A6F55A8(uint64_t a1, const char *a2, uint64_t a3)
{
  return objc_msgSend_timeZoneDataVersion(MEMORY[0x24BDBCF38], a2, a3);
}

uint64_t sub_21A6F55B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x24BEDD108](MEMORY[0x24BDBCF38], sel_knownTimeZoneNames, a3);
}

uint64_t sub_21A6F55C0(CFStringRef theString, _QWORD *a2)
{
  uint64_t result;
  const char *v5;
  const char *v6;
  void *v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  const char *v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  const char *v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  const char *v21;

  result = 4294960591;
  if (theString && a2)
  {
    if (CFStringGetLength(theString))
    {
      v7 = (void *)objc_msgSend_timeZoneWithName_(MEMORY[0x24BDBCF38], v5, (uint64_t)theString);
      if (v7
        || (v7 = (void *)objc_msgSend_timeZoneWithAbbreviation_(MEMORY[0x24BDBCF38], v6, (uint64_t)theString)) != 0)
      {
        v8 = objc_msgSend_dictionaryWithCapacity_(MEMORY[0x24BDBCED8], v6, 3);
        if (v8)
        {
          v11 = (void *)v8;
          v12 = objc_msgSend_name(v7, v9, v10);
          objc_msgSend_setObject_forKey_(v11, v13, v12, CFSTR("zoneName"));
          v16 = objc_msgSend_data(v7, v14, v15);
          objc_msgSend_setObject_forKey_(v11, v17, v16, CFSTR("zoneFile"));
          v20 = objc_msgSend_timeZoneDataVersion(MEMORY[0x24BDBCF38], v18, v19);
          objc_msgSend_setObject_forKey_(v11, v21, v20, CFSTR("zoneVersion"));
          result = 0;
          *a2 = v11;
        }
        else
        {
          return 4294960568;
        }
      }
      else
      {
        return 4294960569;
      }
    }
    else
    {
      return 4294960591;
    }
  }
  return result;
}

const __CFString *sub_21A6F56B8(const __CFString *result, const char *a2, uint64_t a3)
{
  const __CFString *v3;
  const __CFString *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  CFStringRef theString2;

  if (result)
  {
    v3 = result;
    result = (const __CFString *)sub_21A6F55A8((uint64_t)result, a2, a3);
    if (result)
    {
      v4 = result;
      result = (const __CFString *)CFStringGetLength(result);
      if (result)
      {
        theString2 = 0;
        sub_21A693B94(v3, (uint64_t)&theString2, (UInt8 *)"%kO", v5, v6, v7, v8, v9, (uint64_t)CFSTR("zoneVersion"));
        if (v10 || !theString2)
          return 0;
        else
          return (const __CFString *)(CFStringCompare(v4, theString2, 1uLL) == kCFCompareGreaterThan);
      }
    }
  }
  return result;
}

uint64_t sub_21A6F573C(const __CFString *a1, __CFString **a2)
{
  CFIndex Length;
  unsigned __int8 v5;
  uint64_t v6;
  __CFString *v7;

  if (a1)
  {
    Length = CFStringGetLength(a1);
    v5 = 0;
    if (a2 && Length)
    {
      v6 = 0;
      v5 = 0;
      do
      {
        v7 = off_2550F43A8[v6 + 1];
        if (CFStringCompare(a1, off_2550F43A8[v6], 1uLL) == kCFCompareEqualTo)
        {
          *a2 = v7;
          v5 = 1;
        }
        v6 += 2;
      }
      while (v6 != 36);
    }
  }
  else
  {
    return 0;
  }
  return v5;
}

__CFDictionary *sub_21A6F57C8(const __CFString *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __CFDictionary *Mutable;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v15;
  const __CFDictionary *v16;
  const __CFDictionary *v17;
  const __CFDictionary *v18;
  int v19;
  const __CFDictionary *Value;
  const __CFDictionary *v21;
  CFDictionaryRef theDict;
  unsigned int v24;

  v24 = 0;
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
  if (Mutable)
  {
    sub_21A693B94(a1, (uint64_t)&v24, (UInt8 *)"%kO:int", v2, v3, v4, v5, v6, (uint64_t)CFSTR("Version"));
    v15 = v24 == 2 && v8 == 0 || v24 > 1;
    if (v15
      || (v16 = (const __CFDictionary *)CFDictionaryGetValue((CFDictionaryRef)a1, CFSTR("Changed")),
          v17 = (const __CFDictionary *)CFDictionaryGetValue((CFDictionaryRef)a1, CFSTR("Unchanged")),
          !v16)
      || (v18 = v17) == 0)
    {
      theDict = 0;
      sub_21A693B94(a1, (uint64_t)&theDict, (UInt8 *)"%kO.[0]", v9, v10, v11, v12, v13, (uint64_t)CFSTR("Configurations"));
      if (v19)
        return Mutable;
      if (!theDict)
        return Mutable;
      Value = (const __CFDictionary *)CFDictionaryGetValue(theDict, CFSTR("Changed"));
      if (!Value)
        return Mutable;
      v16 = Value;
      v21 = (const __CFDictionary *)CFDictionaryGetValue(theDict, CFSTR("Unchanged"));
      if (!v21)
        return Mutable;
      v18 = v21;
    }
    if (!sub_21A693B5C((uint64_t)Mutable, v18))
    {
      CFDictionarySetValue(Mutable, CFSTR("APPLE-CONFIG"), &stru_24DD08368);
      CFDictionaryApplyFunction(v16, (CFDictionaryApplierFunction)sub_21A6F5920, Mutable);
    }
  }
  return Mutable;
}

void sub_21A6F5920(const void *a1, CFDictionaryRef theDict, __CFDictionary *a3)
{
  const void *Value;

  if (a3)
  {
    Value = CFDictionaryGetValue(theDict, CFSTR("Current"));
    if (Value)
      CFDictionarySetValue(a3, a1, Value);
  }
}

uint64_t sub_21A6F5974(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _OWORD *v9;
  uint64_t v10;
  const __CFAllocator *v11;
  CFMutableArrayRef Mutable;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  CFMutableDictionaryRef v20;
  uint64_t v21;
  uint64_t v23;

  if (dword_2550F44C8 <= 800 && (dword_2550F44C8 != -1 || sub_21A69876C((uint64_t)&dword_2550F44C8, 0x320u)))
    sub_21A698FDC((uint64_t)&dword_2550F44C8, (uint64_t)"OSStatus SBSEngine_Create(StepByStepContextRef *)", 800, (uint64_t)" \n", a5, a6, a7, a8, v23);
  if (!a1)
    return 4294960591;
  v9 = malloc_type_calloc(1uLL, 0x60uLL, 0x106004078599C16uLL);
  if (!v9)
    return 4294960568;
  v10 = (uint64_t)v9;
  *v9 = 0u;
  v9[1] = 0u;
  *((_QWORD *)v9 + 4) = dispatch_group_create();
  *(_BYTE *)(v10 + 40) = 1;
  v11 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD690]);
  *(_QWORD *)(v10 + 48) = Mutable;
  if (!Mutable)
    goto LABEL_13;
  v20 = CFDictionaryCreateMutable(v11, 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
  *(_QWORD *)(v10 + 56) = v20;
  if (!v20)
    goto LABEL_13;
  *(_QWORD *)(v10 + 64) = 0;
  *(_QWORD *)(v10 + 80) = 0;
  v21 = sub_21A7097E4((_QWORD *)(v10 + 88), v13, v14, v15, v16, v17, v18, v19);
  if ((_DWORD)v21)
  {
LABEL_14:
    sub_21A6F5AC0(v10, v13, v14, v15, v16, v17, v18, v19);
    return v21;
  }
  if (!*(_QWORD *)(v10 + 88))
  {
LABEL_13:
    v21 = 4294960568;
    goto LABEL_14;
  }
  v21 = 0;
  *a1 = v10;
  return v21;
}

uint64_t sub_21A6F5AC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int *v16;
  const void *v17;
  int *v18;
  NSObject *v19;
  const void *v20;
  const void *v21;
  const void *v22;
  const void *v23;
  const void *v24;
  uint64_t v26;

  if (dword_2550F44C8 <= 800 && (dword_2550F44C8 != -1 || sub_21A69876C((uint64_t)&dword_2550F44C8, 0x320u)))
    sub_21A698FDC((uint64_t)&dword_2550F44C8, (uint64_t)"OSStatus SBSEngine_Release(StepByStepContextRef)", 800, (uint64_t)" \n", a5, a6, a7, a8, v26);
  if (!a1)
    return 4294960591;
  dispatch_group_wait(*(dispatch_group_t *)(a1 + 32), 0xFFFFFFFFFFFFFFFFLL);
  if (*(_QWORD *)a1)
  {
    CFRelease(*(CFTypeRef *)a1);
    *(_QWORD *)a1 = 0;
  }
  v16 = *(int **)(a1 + 8);
  if (v16)
    sub_21A6D12CC(v16);
  v17 = *(const void **)(a1 + 16);
  if (v17)
  {
    CFRelease(v17);
    *(_QWORD *)(a1 + 16) = 0;
  }
  v18 = *(int **)(a1 + 24);
  if (v18)
    sub_21A6D12CC(v18);
  v19 = *(NSObject **)(a1 + 32);
  if (v19)
    dispatch_release(v19);
  v20 = *(const void **)(a1 + 48);
  if (v20)
  {
    CFRelease(v20);
    *(_QWORD *)(a1 + 48) = 0;
  }
  v21 = *(const void **)(a1 + 56);
  if (v21)
  {
    CFRelease(v21);
    *(_QWORD *)(a1 + 56) = 0;
  }
  v22 = *(const void **)(a1 + 72);
  if (v22)
  {
    CFRelease(v22);
    *(_QWORD *)(a1 + 72) = 0;
  }
  v23 = *(const void **)(a1 + 64);
  if (v23)
  {
    CFRelease(v23);
    *(_QWORD *)(a1 + 64) = 0;
  }
  v24 = *(const void **)(a1 + 80);
  if (v24)
  {
    CFRelease(v24);
    *(_QWORD *)(a1 + 80) = 0;
  }
  sub_21A709990(*(_DWORD **)(a1 + 88), v9, v10, v11, v12, v13, v14, v15);
  free((void *)a1);
  return 0;
}

uint64_t sub_21A6F5BE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;

  if (dword_2550F44C8 <= 800 && (dword_2550F44C8 != -1 || sub_21A69876C((uint64_t)&dword_2550F44C8, 0x320u)))
    sub_21A698FDC((uint64_t)&dword_2550F44C8, (uint64_t)"OSStatus SBSEngine_Cancel(StepByStepContextRef)", 800, (uint64_t)" \n", a5, a6, a7, a8, v10);
  if (a1)
    return sub_21A709CC4(*(_QWORD *)(a1 + 88), a2, a3, a4, a5, a6, a7, a8);
  else
    return 4294960591;
}

uint64_t sub_21A6F5C68(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  NSObject *v9;
  NSObject *global_queue;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  if (dword_2550F44C8 <= 800 && (dword_2550F44C8 != -1 || sub_21A69876C((uint64_t)&dword_2550F44C8, 0x320u)))
    sub_21A698FDC((uint64_t)&dword_2550F44C8, (uint64_t)"OSStatus SBSEngine_Resume(StepByStepContextRef)", 800, (uint64_t)" \n", a5, a6, a7, a8, v23);
  if (!a1)
    return 4294960591;
  v9 = a1[4];
  if (!v9 || !a1[6])
    return 4294960591;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_group_async_f(v9, global_queue, a1, (dispatch_function_t)sub_21A6F5D34);
  result = sub_21A709D98(a1[11], v11, v12, v13, v14, v15, v16, v17);
  if (!(_DWORD)result)
  {
    sub_21A70ACEC(a1[11], 14, 0, 0, v19, v20, v21, v22);
    return 0;
  }
  return result;
}

void sub_21A6F5D34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  _BOOL4 v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BOOL4 v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _BOOL4 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  __CFString *v41;
  int v42;
  _BOOL4 v43;
  unsigned int v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  __CFString *v55;
  int v56;
  uint64_t v57;
  unsigned int v58;
  unsigned int v59;
  uint64_t v60;
  uint64_t v61;
  const char *v62;
  uint64_t v63;
  const __CFString *v64;
  uint64_t v65;
  const __CFString *v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  CFIndex Count;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  __CFArray *v76;
  const char *v77;
  unsigned int v78;
  unsigned int v79;
  uint64_t v80;
  __CFArray *Mutable;
  uint64_t v82;
  __CFArray *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  CFIndex v98;
  uint64_t v99;
  uint64_t v100;
  unsigned int v101;
  unsigned int v102;
  unsigned int v103;
  unsigned int v104;
  unsigned int v105;
  unsigned int v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  unsigned int v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  _BOOL4 v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  _BOOL4 v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  unsigned int v155;
  unsigned int v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  const char *v164;
  uint64_t v165;
  uint64_t v166;
  __CFString *v167;
  int v168;
  __CFArray *v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  int v179;
  __CFString *v180;
  uint64_t v181;
  int v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  CFIndex v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  const char *v203;
  int v204;
  CFTypeRef v205;
  _BOOL4 v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  _BOOL4 v212;
  uint64_t v213;
  uint64_t v214;
  _BOOL4 v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  unsigned int v227;
  unsigned int v228;
  CFTypeRef v229;
  _BOOL4 v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  const char *v235;
  const __CFString *v236;
  uint64_t v237;
  const __CFString *v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  int v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  __CFString *v246;
  int v247;
  uint64_t v248;
  uint64_t v249;
  const __CFAllocator *allocator;
  int v251;
  CFArrayRef theArray;
  CFTypeRef v253;
  CFTypeRef cf;
  CFTypeRef ValueAtIndex;
  __CFArray *v256;
  __CFString *v257;
  __CFString *v258;
  CFTypeRef v259[2];

  if (dword_2550F44C8 <= 800 && (dword_2550F44C8 != -1 || sub_21A69876C((uint64_t)&dword_2550F44C8, 0x320u)))
    sub_21A698FDC((uint64_t)&dword_2550F44C8, (uint64_t)"void __SBSEngine_StepByStepSync(void *)", 800, (uint64_t)" \n", a5, a6, a7, a8, v249);
  if (!a1)
    return;
  if (!*(_QWORD *)a1 || !*(_QWORD *)(a1 + 8))
  {
LABEL_661:
    v9 = 4294960591;
    goto LABEL_662;
  }
  v9 = 4294960573;
  if (sub_21A709EEC(*(_QWORD *)(a1 + 88)))
    goto LABEL_662;
  allocator = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  while (2)
  {
    switch(sub_21A6FA5C0(a1))
    {
      case 1u:
        if (dword_2550F44C8 <= 800 && (dword_2550F44C8 != -1 || sub_21A69876C((uint64_t)&dword_2550F44C8, 0x320u)))
          sub_21A698FDC((uint64_t)&dword_2550F44C8, (uint64_t)"void __SBSEngine_StepByStepSync(void *)", 800, (uint64_t)"\n\n\t\t          \t\t++++++++++ SBS state: \"%s\" ++++++++++\n\n", a5, a6, a7, a8, (uint64_t)"eSBSStep_CreateExtendOrReplace");
        v257 = 0;
        if (!*(_QWORD *)(a1 + 48))
          goto LABEL_661;
        v258 = 0;
        v259[0] = 0;
        LODWORD(ValueAtIndex) = 0;
        sub_21A6FAD28(a1, v259);
        v9 = v11;
        if ((_DWORD)v11)
          goto LABEL_17;
        if (!v259[0])
        {
          v9 = 4294960568;
          goto LABEL_17;
        }
        if (*(_QWORD *)(a1 + 80))
        {
          v112 = sub_21A693A8C(allocator, (__CFArray *)v259[0], (uint64_t)"%ks=%O", v10, a5, a6, a7, a8, (uint64_t)"kSBSKey_AutoGuessRecommendation");
        }
        else
        {
          if (CFDictionaryContainsKey((CFDictionaryRef)v259[0], CFSTR("kSBSKey_SelectorChoice")))
            goto LABEL_384;
          v112 = sub_21A693A8C(allocator, (__CFArray *)v259[0], (uint64_t)"%ks=%i", v158, a5, a6, a7, a8, (uint64_t)"kSBSKey_SelectorChoice");
        }
        v9 = v112;
        if ((_DWORD)v112)
          goto LABEL_17;
LABEL_384:
        if (*(_QWORD *)(a1 + 64))
        {
          if (!CFDictionaryContainsKey((CFDictionaryRef)v259[0], CFSTR("kSBSKey_RestoreRecommendation")))
          {
            v9 = sub_21A693A8C(allocator, (__CFArray *)v259[0], (uint64_t)"%ks=%O", v159, a5, a6, a7, a8, (uint64_t)"kSBSKey_RestoreRecommendation");
            if ((_DWORD)v9)
              goto LABEL_17;
          }
        }
        v258 = 0;
        v9 = sub_21A6FADB0(a1, 1, (uint64_t)v259[0], (CFTypeRef *)&v258, a5, a6, a7, a8);
        if ((_DWORD)v9)
          goto LABEL_17;
        if (!v258)
          goto LABEL_503;
        sub_21A693B94(v258, (uint64_t)&ValueAtIndex, (UInt8 *)"%ks:int", v160, a5, a6, a7, a8, (uint64_t)"kSBSKey_SelectorChoice");
        v9 = v162;
        if ((_DWORD)v162)
          goto LABEL_17;
        v163 = sub_21A693A8C(allocator, (__CFArray *)v259[0], (uint64_t)"%ks=%i", v161, a5, a6, a7, a8, (uint64_t)"kSBSKey_SelectorChoice");
        v9 = v163;
        if ((_DWORD)v163)
          goto LABEL_17;
        v9 = 4294960587;
        if ((int)ValueAtIndex > 299)
        {
          if ((_DWORD)ValueAtIndex == 300)
          {
            v167 = 0;
            v168 = 10;
          }
          else
          {
            if ((_DWORD)ValueAtIndex != 400
              || (v256 = 0,
                  sub_21A693B94((const __CFString *)v259[0], (uint64_t)&v256, (UInt8 *)"%ks", v166, a5, a6, a7, a8, (uint64_t)"kSBSKey_RestoreRecommendation"), v9 = v208, (_DWORD)v208))
            {
LABEL_17:
              if (v257)
                CFRelease(v257);
              if (!(_DWORD)v9)
              {
                if (dword_2550F44C8 <= 800)
                {
                  v12 = "eSBSStep_CreateExtendOrReplace";
                  if (dword_2550F44C8 != -1)
                    goto LABEL_628;
                  v13 = sub_21A69876C((uint64_t)&dword_2550F44C8, 0x320u);
                  v12 = "eSBSStep_CreateExtendOrReplace";
                  if (v13)
                    goto LABEL_628;
                }
                goto LABEL_629;
              }
              goto LABEL_662;
            }
            if (!v256)
              goto LABEL_503;
            v9 = sub_21A692FEC(allocator, (CFTypeRef *)&v257, (uint64_t)"{%ks=%O}", v207, a5, a6, a7, a8, (uint64_t)"kSBSKey_RestoreRecommendation");
            if ((_DWORD)v9)
              goto LABEL_17;
            v167 = v257;
            if (!v257)
            {
LABEL_503:
              v9 = 4294960569;
              goto LABEL_17;
            }
            v168 = 16;
          }
        }
        else if ((_DWORD)ValueAtIndex == 100)
        {
          v167 = 0;
          v168 = 2;
        }
        else
        {
          if ((_DWORD)ValueAtIndex != 200)
            goto LABEL_17;
          if (*(_QWORD *)a1 && !sub_21A72E058(v163, v164, v165))
          {
            v167 = 0;
            v168 = 5;
          }
          else
          {
            v167 = 0;
            v168 = 7;
          }
        }
        v9 = sub_21A6F8F10(a1, v168, (uint64_t)v167);
        goto LABEL_17;
      case 2u:
        if (dword_2550F44C8 <= 800 && (dword_2550F44C8 != -1 || sub_21A69876C((uint64_t)&dword_2550F44C8, 0x320u)))
          sub_21A698FDC((uint64_t)&dword_2550F44C8, (uint64_t)"void __SBSEngine_StepByStepSync(void *)", 800, (uint64_t)"\n\n\t\t          \t\t++++++++++ SBS state: \"%s\" ++++++++++\n\n", a5, a6, a7, a8, (uint64_t)"eSBSStep_Create_Config");
        v33 = sub_21A6FA624(a1);
        if ((_DWORD)v33)
          goto LABEL_665;
        v44 = sub_21A6FA5C0(a1);
        LOBYTE(v24) = v44 == 2;
        if (dword_2550F44C8 > 800)
          goto LABEL_609;
        v45 = v44;
        if (dword_2550F44C8 == -1 && !sub_21A69876C((uint64_t)&dword_2550F44C8, 0x320u))
          goto LABEL_609;
        sub_21A698FDC((uint64_t)&dword_2550F44C8, (uint64_t)"void __SBSEngine_StepByStepSync(void *)", 800, (uint64_t)"\n\n\t\t          \t\t---------- SBS state: \"%s\" ----------\n\n", v20, v21, v22, v23, (uint64_t)"eSBSStep_Create_Config");
        if (v45 != 2)
          goto LABEL_629;
        goto LABEL_664;
      case 3u:
        if (dword_2550F44C8 <= 800 && (dword_2550F44C8 != -1 || sub_21A69876C((uint64_t)&dword_2550F44C8, 0x320u)))
          sub_21A698FDC((uint64_t)&dword_2550F44C8, (uint64_t)"void __SBSEngine_StepByStepSync(void *)", 800, (uint64_t)"\n\n\t\t          \t\t++++++++++ SBS state: \"%s\" ++++++++++\n\n", a5, a6, a7, a8, (uint64_t)"eSBSStep_Guest_Config");
        v258 = 0;
        if (!*(_QWORD *)(a1 + 48))
          goto LABEL_661;
        v259[0] = 0;
        v257 = 0;
        if (*(_QWORD *)a1 && *(_QWORD *)(a1 + 8) && *(_QWORD *)(a1 + 72))
        {
          sub_21A6FAD28(a1, v259);
          v9 = v27;
          if ((_DWORD)v27)
            goto LABEL_249;
          if (v259[0])
          {
            sub_21A693B94(*(const __CFString **)(a1 + 72), (uint64_t)&v257, (UInt8 *)"%ks", v26, a5, a6, a7, a8, (uint64_t)"kSBSKey_Result_ConfigurationOptions");
            v9 = v29;
            if ((_DWORD)v29)
              goto LABEL_249;
            if (v257)
            {
              v9 = sub_21A693A8C(allocator, (__CFArray *)v259[0], (uint64_t)"%##O", v28, a5, a6, a7, a8, (uint64_t)v257);
              if ((_DWORD)v9)
                goto LABEL_249;
              v30 = sub_21A6FADB0(a1, 3, (uint64_t)v259[0], (CFTypeRef *)&v258, a5, a6, a7, a8);
              if ((_DWORD)v30 == -6769)
              {
                v32 = sub_21A6F8F10(a1, 0, 0);
              }
              else
              {
                v9 = v30;
                if ((_DWORD)v30)
                  goto LABEL_249;
                if (!v258)
                {
                  v9 = 4294960569;
                  goto LABEL_662;
                }
                v32 = sub_21A693A8C(allocator, (__CFArray *)v257, (uint64_t)"%##O", v31, a5, a6, a7, a8, (uint64_t)v258);
              }
              v9 = v32;
            }
            else
            {
              v9 = 4294960569;
            }
          }
          else
          {
            v9 = 4294960568;
          }
        }
        else
        {
          v9 = 4294960591;
        }
LABEL_249:
        if (v258)
          CFRelease(v258);
        if ((_DWORD)v9)
          goto LABEL_662;
        v101 = sub_21A6FA5C0(a1);
        v24 = v101 == 3;
        if (dword_2550F44C8 <= 800)
        {
          v102 = v101;
          if (dword_2550F44C8 != -1 || sub_21A69876C((uint64_t)&dword_2550F44C8, 0x320u))
          {
            sub_21A698FDC((uint64_t)&dword_2550F44C8, (uint64_t)"void __SBSEngine_StepByStepSync(void *)", 800, (uint64_t)"\n\n\t\t          \t\t---------- SBS state: \"%s\" ----------\n\n", v20, v21, v22, v23, (uint64_t)"eSBSStep_Guest_Config");
            if (v102 == 3)
              goto LABEL_664;
            goto LABEL_629;
          }
        }
LABEL_609:
        if (!v24)
        {
LABEL_629:
          if (sub_21A709EEC(*(_QWORD *)(a1 + 88)))
          {
            v9 = 4294960573;
            goto LABEL_662;
          }
          continue;
        }
LABEL_664:
        v33 = sub_21A709E44(*(_QWORD *)(a1 + 88), v17, v18, v19, v20, v21, v22, v23);
LABEL_665:
        v9 = v33;
LABEL_662:
        sub_21A70A778(*(_QWORD *)(a1 + 88), 15, v9, *(_QWORD *)(a1 + 72), a5, a6, a7, a8);
        return;
      case 4u:
        if (dword_2550F44C8 <= 800 && (dword_2550F44C8 != -1 || sub_21A69876C((uint64_t)&dword_2550F44C8, 0x320u)))
          sub_21A698FDC((uint64_t)&dword_2550F44C8, (uint64_t)"void __SBSEngine_StepByStepSync(void *)", 800, (uint64_t)"\n\n\t\t          \t\t++++++++++ SBS state: \"%s\" ++++++++++\n\n", a5, a6, a7, a8, (uint64_t)"eSBSStep_ExtendWiredOrWireless");
        v257 = 0;
        if (!*(_QWORD *)(a1 + 48))
          goto LABEL_661;
        v258 = 0;
        v259[0] = 0;
        LODWORD(cf) = 0;
        if (!*(_QWORD *)a1)
          goto LABEL_534;
        sub_21A6FAD28(a1, v259);
        v9 = v46;
        if ((_DWORD)v46)
          goto LABEL_535;
        if (!v259[0])
          goto LABEL_542;
        if (!CFDictionaryContainsKey((CFDictionaryRef)v259[0], CFSTR("kSBSKey_SelectorChoice")))
        {
          v169 = (__CFArray *)v259[0];
          sub_21A68F5B8(*(const __CFString **)a1, v47, v48, v49, a5, a6, a7, a8);
          v9 = sub_21A693A8C(allocator, v169, (uint64_t)"%ks=%i", v170, v171, v172, v173, v174, (uint64_t)"kSBSKey_SelectorChoice");
          if ((_DWORD)v9)
            goto LABEL_535;
        }
        v258 = 0;
        v50 = sub_21A6FADB0(a1, 4, (uint64_t)v259[0], (CFTypeRef *)&v258, a5, a6, a7, a8);
        if ((_DWORD)v50 == -6769)
        {
          v55 = 0;
          v56 = 0;
          goto LABEL_420;
        }
        v9 = v50;
        if ((_DWORD)v50)
          goto LABEL_535;
        if (!v258)
          goto LABEL_543;
        sub_21A693B94(v258, (uint64_t)&cf, (UInt8 *)"%ks:int", v51, a5, a6, a7, a8, (uint64_t)"kSBSKey_SelectorChoice");
        v9 = v53;
        if ((_DWORD)v53)
          goto LABEL_535;
        v9 = sub_21A693A8C(allocator, (__CFArray *)v259[0], (uint64_t)"%ks=%i", v52, a5, a6, a7, a8, (uint64_t)"kSBSKey_SelectorChoice");
        if ((_DWORD)v9)
          goto LABEL_535;
        if ((_DWORD)cf == 220)
        {
          v55 = 0;
          v56 = 5;
          goto LABEL_420;
        }
        if ((_DWORD)cf != 210)
        {
          v9 = 4294960587;
          goto LABEL_535;
        }
        v256 = 0;
        v54 = sub_21A6FB014(a1, (CFTypeRef *)&v256);
        if ((_DWORD)v54 == -6727)
          goto LABEL_132;
        v9 = v54;
        ValueAtIndex = 0;
        if ((_DWORD)v54)
          goto LABEL_535;
        if (!v256)
          goto LABEL_542;
        if (sub_21A6D4724(*(_QWORD *)(a1 + 8), 1852787795))
          v209 = 14;
        else
          v209 = 6;
        v210 = sub_21A6FB22C(v256, (const char *)v209, *(const __CFString **)a1, (__CFArray **)&ValueAtIndex);
        if ((_DWORD)v210 == -6727)
        {
LABEL_132:
          v55 = 0;
          v56 = 8;
LABEL_420:
          v9 = sub_21A6F8F10(a1, v56, (uint64_t)v55);
          goto LABEL_535;
        }
        v9 = v210;
        if (!(_DWORD)v210)
        {
          if (ValueAtIndex)
          {
            if (CFArrayGetCount((CFArrayRef)ValueAtIndex))
            {
              v9 = sub_21A692FEC(allocator, (CFTypeRef *)&v257, (uint64_t)"{%ks=%O}", v211, a5, a6, a7, a8, (uint64_t)"kSBSKey_NetworkScanRecordList");
              if (ValueAtIndex)
                CFRelease(ValueAtIndex);
              if (!(_DWORD)v9)
              {
                v55 = v257;
                if (v257)
                {
                  v56 = 7;
                  goto LABEL_420;
                }
LABEL_543:
                v9 = 4294960569;
              }
            }
            else
            {
LABEL_534:
              v9 = 4294960591;
            }
          }
          else
          {
LABEL_542:
            v9 = 4294960568;
          }
        }
LABEL_535:
        if (v257)
          CFRelease(v257);
        if ((_DWORD)v9)
          goto LABEL_662;
        if (dword_2550F44C8 > 800)
          goto LABEL_629;
        v12 = "eSBSStep_ExtendWiredOrWireless";
        if (dword_2550F44C8 == -1)
        {
          v212 = sub_21A69876C((uint64_t)&dword_2550F44C8, 0x320u);
          v12 = "eSBSStep_ExtendWiredOrWireless";
          if (!v212)
            goto LABEL_629;
        }
        goto LABEL_628;
      case 5u:
        if (dword_2550F44C8 <= 800 && (dword_2550F44C8 != -1 || sub_21A69876C((uint64_t)&dword_2550F44C8, 0x320u)))
          sub_21A698FDC((uint64_t)&dword_2550F44C8, (uint64_t)"void __SBSEngine_StepByStepSync(void *)", 800, (uint64_t)"\n\n\t\t          \t\t++++++++++ SBS state: \"%s\" ++++++++++\n\n", a5, a6, a7, a8, (uint64_t)"eSBSStep_ExtendWired_Connections");
        v33 = sub_21A6FA94C(a1);
        if ((_DWORD)v33)
          goto LABEL_665;
        if (dword_2550F44C8 > 800)
          goto LABEL_629;
        v12 = "eSBSStep_ExtendWired_Connections";
        if (dword_2550F44C8 == -1)
        {
          v34 = sub_21A69876C((uint64_t)&dword_2550F44C8, 0x320u);
          v12 = "eSBSStep_ExtendWired_Connections";
          if (!v34)
            goto LABEL_629;
        }
        goto LABEL_628;
      case 6u:
        if (dword_2550F44C8 <= 800 && (dword_2550F44C8 != -1 || sub_21A69876C((uint64_t)&dword_2550F44C8, 0x320u)))
          sub_21A698FDC((uint64_t)&dword_2550F44C8, (uint64_t)"void __SBSEngine_StepByStepSync(void *)", 800, (uint64_t)"\n\n\t\t          \t\t++++++++++ SBS state: \"%s\" ++++++++++\n\n", a5, a6, a7, a8, (uint64_t)"eSBSStep_ExtendWired_Config");
        v258 = 0;
        v259[0] = 0;
        ValueAtIndex = 0;
        v256 = 0;
        v257 = 0;
        if (!*(_QWORD *)(a1 + 48))
          goto LABEL_661;
        sub_21A6FAD28(a1, v259);
        v9 = v57;
        if ((_DWORD)v57)
          goto LABEL_139;
        if (!v259[0])
          goto LABEL_339;
        v113 = sub_21A6FADB0(a1, 6, (uint64_t)v259[0], (CFTypeRef *)&v258, a5, a6, a7, a8);
        if ((_DWORD)v113 == -6769)
        {
          v9 = sub_21A6F8F10(a1, 0, 0);
        }
        else
        {
          v9 = v113;
          if ((_DWORD)v113)
            goto LABEL_139;
          if (v258)
          {
            sub_21A693B94(v258, (uint64_t)&ValueAtIndex, (UInt8 *)"%ks", v114, a5, a6, a7, a8, (uint64_t)"kSBSKey_SourceBase");
            v9 = v115;
            if ((_DWORD)v115)
              goto LABEL_139;
            if (!ValueAtIndex)
              goto LABEL_339;
            v9 = sub_21A6D4710(*(_QWORD *)(a1 + 8), &v256);
            if (!(_DWORD)v9)
            {
              if (!v256)
              {
                v9 = 4294960569;
                goto LABEL_141;
              }
              v9 = sub_21A692FEC(allocator, (CFTypeRef *)&v257, (uint64_t)"{%ks=%i%ks=%O%ks=%O%ks=%O%ks=%O}", v116, a5, a6, a7, a8, (uint64_t)"kSBSKey_Result_ConfigurationChoice");
              if (!(_DWORD)v9)
              {
                if (v257)
                {
                  v9 = 0;
                  *(_QWORD *)(a1 + 72) = v257;
                  v257 = 0;
                  goto LABEL_139;
                }
LABEL_339:
                v9 = 4294960568;
              }
            }
          }
          else
          {
            v9 = 4294960569;
          }
        }
LABEL_139:
        if (v256)
        {
          CFRelease(v256);
          v256 = 0;
        }
LABEL_141:
        if (v258)
        {
          CFRelease(v258);
          v258 = 0;
        }
        if (v257)
          CFRelease(v257);
        if ((_DWORD)v9)
          goto LABEL_662;
        v58 = sub_21A6FA5C0(a1);
        v24 = v58 == 6;
        if (dword_2550F44C8 > 800)
          goto LABEL_609;
        v59 = v58;
        if (dword_2550F44C8 == -1 && !sub_21A69876C((uint64_t)&dword_2550F44C8, 0x320u))
          goto LABEL_609;
        sub_21A698FDC((uint64_t)&dword_2550F44C8, (uint64_t)"void __SBSEngine_StepByStepSync(void *)", 800, (uint64_t)"\n\n\t\t          \t\t---------- SBS state: \"%s\" ----------\n\n", v20, v21, v22, v23, (uint64_t)"eSBSStep_ExtendWired_Config");
        if (v59 == 6)
          goto LABEL_664;
        goto LABEL_629;
      case 7u:
        if (dword_2550F44C8 <= 800 && (dword_2550F44C8 != -1 || sub_21A69876C((uint64_t)&dword_2550F44C8, 0x320u)))
          sub_21A698FDC((uint64_t)&dword_2550F44C8, (uint64_t)"void __SBSEngine_StepByStepSync(void *)", 800, (uint64_t)"\n\n\t\t          \t\t++++++++++ SBS state: \"%s\" ++++++++++\n\n", a5, a6, a7, a8, (uint64_t)"eSBSStep_ExtendNetworkChoice");
        v257 = 0;
        v258 = 0;
        v256 = 0;
        cf = 0;
        ValueAtIndex = 0;
        v253 = 0;
        if (!*(_QWORD *)(a1 + 48))
          goto LABEL_661;
        if (!*(_QWORD *)a1)
        {
          v83 = 0;
          v9 = 4294960591;
          goto LABEL_475;
        }
        sub_21A6FAD28(a1, &v258);
        if ((_DWORD)v82)
          goto LABEL_202;
        if (!v258)
          goto LABEL_474;
        if (!CFDictionaryContainsKey((CFDictionaryRef)v258, CFSTR("kSBSKey_SelectorChoice")))
        {
          v82 = sub_21A693A8C(allocator, (__CFArray *)v258, (uint64_t)"%ks=%i", v143, v144, v145, v146, v147, (uint64_t)"kSBSKey_SelectorChoice");
          if ((_DWORD)v82)
            goto LABEL_202;
        }
        v148 = sub_21A6FB014(a1, &v253);
        if ((_DWORD)v148 == -6727)
          goto LABEL_446;
        v9 = v148;
        if ((_DWORD)v148)
          goto LABEL_203;
        if (!v253)
          goto LABEL_474;
        if (sub_21A6D4724(*(_QWORD *)(a1 + 8), 1112757313))
        {
          LODWORD(v259[0]) = 0;
          v82 = sub_21A6D4478(*(_QWORD *)(a1 + 8), 1937326416, v259);
          if ((_DWORD)v82)
            goto LABEL_202;
          v150 = LODWORD(v259[0]) >= 0x77 && !sub_21A6D4724(*(_QWORD *)(a1 + 8), 1632923251);
        }
        else
        {
          v150 = 1;
        }
        if (sub_21A6D4724(*(_QWORD *)(a1 + 8), 1852787795))
          v182 = 14;
        else
          v182 = 6;
        if (sub_21A6FB22C((CFArrayRef)v253, (const char *)(v182 | v150), *(const __CFString **)a1, &v256) != -6727)
        {
          v82 = sub_21A693A8C(allocator, (__CFArray *)v258, (uint64_t)"%ks=%O", v149, a5, a6, a7, a8, (uint64_t)"kSBSKey_NetworkScanRecordList");
          if ((_DWORD)v82)
          {
LABEL_202:
            v9 = v82;
LABEL_203:
            v83 = 0;
            goto LABEL_475;
          }
        }
LABEL_446:
        sub_21A693B94(v258, (uint64_t)&v256, (UInt8 *)"%ks", v149, a5, a6, a7, a8, (uint64_t)"kSBSKey_NetworkScanRecordList");
        if ((_DWORD)v82)
          goto LABEL_202;
        if (!v256)
          goto LABEL_474;
        if (CFDictionaryContainsKey((CFDictionaryRef)v258, CFSTR("kSBSKey_SourceNetwork")))
          goto LABEL_456;
        if (!v256)
          goto LABEL_456;
        v188 = sub_21A70B648(*(_QWORD *)(a1 + 88), &cf, 0, v183, v184, v185, v186, v187);
        if ((_DWORD)v188 == -6727)
          goto LABEL_456;
        v9 = v188;
        v83 = 0;
        if ((_DWORD)v188)
          goto LABEL_475;
        if (!cf)
        {
          v83 = 0;
          v9 = 4294960568;
          goto LABEL_477;
        }
        v189 = sub_21A68F700((const __CFString *)cf, 0, v256);
        if (v189 == -1)
          goto LABEL_456;
        if (!CFArrayGetValueAtIndex(v256, v189))
        {
LABEL_474:
          v83 = 0;
          v9 = 4294960568;
          goto LABEL_475;
        }
        v82 = sub_21A693A8C(allocator, (__CFArray *)v258, (uint64_t)"%ks=%O", v190, a5, a6, a7, a8, (uint64_t)"kSBSKey_SourceNetwork");
        if ((_DWORD)v82)
          goto LABEL_202;
LABEL_456:
        v83 = sub_21A6D4740(*(__CFArray **)(a1 + 8));
        if (v83)
        {
          v194 = sub_21A693A8C(allocator, (__CFArray *)v258, (uint64_t)"%ks=%O", v193, a5, a6, a7, a8, (uint64_t)"kSBSKey_TargetBaseFeatures");
          if ((_DWORD)v194)
            goto LABEL_509;
        }
        if (*(_BYTE *)(a1 + 41))
          goto LABEL_459;
        if (!sub_21A68F5B8(*(const __CFString **)a1, v191, v192, v193, a5, a6, a7, a8))
          goto LABEL_459;
        v259[0] = 0;
        if (!sub_21A6FB3A8(a1, CFSTR("kSBSCacheKey_TargetRemoteBrowseRecords"), v259))
        {
          if (v259[0])
            goto LABEL_459;
        }
        v259[0] = 0;
        v9 = sub_21A70E760(*(_QWORD *)(a1 + 88), *(const __CFString **)a1, 0, 0, 0, 0, v259, a8);
        if ((_DWORD)v9)
          goto LABEL_475;
        if (v259[0])
        {
          v9 = sub_21A6F8D1C(a1, (const __CFString *)v259[0]);
          if (v259[0])
          {
            CFRelease(v259[0]);
            v259[0] = 0;
          }
          if ((_DWORD)v9)
            goto LABEL_475;
        }
        sub_21A6FB5C8(a1, (CFArrayRef *)&v253);
        v253 = 0;
        *(_BYTE *)(a1 + 41) = 1;
LABEL_459:
        v257 = 0;
        v195 = sub_21A6FADB0(a1, 7, (uint64_t)v258, (CFTypeRef *)&v257, a5, a6, a7, a8);
        if ((_DWORD)v195 == -6769)
        {
          v205 = 0;
          v204 = 0;
LABEL_508:
          v194 = sub_21A6F8F10(a1, v204, (uint64_t)v205);
LABEL_509:
          v9 = v194;
          goto LABEL_475;
        }
        v9 = v195;
        if ((_DWORD)v195 != -6723)
        {
          v259[0] = 0;
          LODWORD(theArray) = 0;
          if (!(_DWORD)v195)
          {
            if (!v257)
              goto LABEL_569;
            sub_21A693B94(v257, (uint64_t)&theArray, (UInt8 *)"%ks:int", v196, a5, a6, a7, a8, (uint64_t)"kSBSKey_SelectorChoice");
            v9 = v198;
            if (!(_DWORD)v198)
            {
              v9 = sub_21A693A8C(allocator, (__CFArray *)v258, (uint64_t)"%ks=%i", v197, a5, a6, a7, a8, (uint64_t)"kSBSKey_SelectorChoice");
              if (!(_DWORD)v9)
              {
                sub_21A693B94(v257, (uint64_t)v259, (UInt8 *)"%ks", v199, a5, a6, a7, a8, (uint64_t)"kSBSKey_SourceNetwork");
                v9 = v201;
                if (!(_DWORD)v201)
                {
                  if (!v259[0])
                    goto LABEL_569;
                  v9 = sub_21A693A8C(allocator, (__CFArray *)v258, (uint64_t)"%ks=%O", v200, a5, a6, a7, a8, (uint64_t)"kSBSKey_SourceNetwork");
                  if (!(_DWORD)v9)
                  {
                    v9 = sub_21A692FEC(allocator, &ValueAtIndex, (uint64_t)"{%ks=%i%ks=%O}", v202, a5, a6, a7, a8, (uint64_t)"kSBSKey_SelectorChoice");
                    if (!(_DWORD)v9)
                    {
                      if (!ValueAtIndex)
                      {
LABEL_569:
                        v9 = 4294960569;
                        goto LABEL_475;
                      }
                      if (sub_21A72E2F4((uint64_t)v259[0], v203))
                        v204 = 8;
                      else
                        v204 = 9;
                      v205 = ValueAtIndex;
                      goto LABEL_508;
                    }
                  }
                }
              }
            }
          }
        }
LABEL_475:
        if (cf)
        {
          CFRelease(cf);
          cf = 0;
        }
LABEL_477:
        if (ValueAtIndex)
        {
          CFRelease(ValueAtIndex);
          ValueAtIndex = 0;
        }
        if (v83)
          CFRelease(v83);
        if ((_DWORD)v9)
          goto LABEL_662;
        if (dword_2550F44C8 > 800)
          goto LABEL_629;
        v12 = "eSBSStep_ExtendNetworkChoice";
        if (dword_2550F44C8 == -1)
        {
          v206 = sub_21A69876C((uint64_t)&dword_2550F44C8, 0x320u);
          v12 = "eSBSStep_ExtendNetworkChoice";
          if (!v206)
            goto LABEL_629;
        }
        goto LABEL_628;
      case 8u:
        if (dword_2550F44C8 <= 800 && (dword_2550F44C8 != -1 || sub_21A69876C((uint64_t)&dword_2550F44C8, 0x320u)))
          sub_21A698FDC((uint64_t)&dword_2550F44C8, (uint64_t)"void __SBSEngine_StepByStepSync(void *)", 800, (uint64_t)"\n\n\t\t          \t\t++++++++++ SBS state: \"%s\" ++++++++++\n\n", a5, a6, a7, a8, (uint64_t)"eSBSStep_ExtendWireless_Config");
        v258 = 0;
        v259[0] = 0;
        cf = 0;
        ValueAtIndex = 0;
        theArray = 0;
        v253 = 0;
        v251 = 0;
        v256 = 0;
        v257 = 0;
        if (!*(_QWORD *)a1)
        {
          v9 = 4294960591;
          goto LABEL_601;
        }
        if (!*(_QWORD *)(a1 + 48))
          goto LABEL_314;
        sub_21A6FAD28(a1, v259);
        v9 = v61;
        if ((_DWORD)v61)
          goto LABEL_597;
        if (!v259[0])
          goto LABEL_596;
        sub_21A693B94((const __CFString *)v259[0], (uint64_t)&cf, (UInt8 *)"%ks", v60, a5, a6, a7, a8, (uint64_t)"kSBSKey_SourceNetwork");
        v9 = v63;
        if ((_DWORD)v63)
          goto LABEL_597;
        if (!cf)
          goto LABEL_596;
        v64 = (const __CFString *)sub_21A72E204((uint64_t)cf, v62);
        if (!v64)
          goto LABEL_314;
        v66 = v64;
        if (sub_21A70B84C(*(_QWORD *)(a1 + 88), v64, 0, v65, a5, a6, a7, a8))
        {
          v68 = 0;
        }
        else
        {
          v68 = 1;
          v181 = sub_21A70E004(*(_QWORD *)(a1 + 88), (const char *)cf, 0, 0, (const void *)1, a6, a7, a8);
          if ((_DWORD)v181 == -6723)
            goto LABEL_612;
          v9 = v181;
          if ((_DWORD)v181)
            goto LABEL_597;
        }
        sub_21A693B94((const __CFString *)v259[0], (uint64_t)&v251, (UInt8 *)"%ks:int", v67, a5, a6, a7, a8, (uint64_t)"kSBSKey_SelectorChoice");
        v9 = v69;
        if ((_DWORD)v69)
          goto LABEL_597;
        v70 = sub_21A6FB744(a1, v68, &v253);
        if ((_DWORD)v70 == -6727)
          goto LABEL_611;
        v9 = v70;
        if ((_DWORD)v70)
          goto LABEL_597;
        if (!v253)
          goto LABEL_596;
        v71 = sub_21A6FB9D4(a1, (CFArrayRef)v253, *(const __CFString **)a1, 1, v251 == 211, 0, v66, &theArray);
        if ((_DWORD)v71 == -6727)
          goto LABEL_611;
        v9 = v71;
        if ((_DWORD)v71)
          goto LABEL_597;
        if (!theArray)
          goto LABEL_596;
        Count = CFArrayGetCount(theArray);
        if (!Count)
        {
LABEL_314:
          v9 = 4294960591;
          goto LABEL_597;
        }
        v74 = Count;
        v9 = sub_21A693A8C(allocator, (__CFArray *)v259[0], (uint64_t)"%ks=%O", v73, a5, a6, a7, a8, (uint64_t)"kSBSKey_BrowseRecordList");
        CFRelease(theArray);
        if ((_DWORD)v9)
          goto LABEL_597;
        if (v74 < 2)
        {
          if (v74 != 1)
          {
LABEL_611:
            v9 = sub_21A70D6D4(*(_QWORD *)(a1 + 88), (uint64_t)CFSTR("kAskUserWarning_Prompt"), 0, 0, (uint64_t)CFSTR("kAskUserWarning_NoBaseStationsFound_OnNetwork"), (uint64_t)v66, 0, 0, 0);
            if ((_DWORD)v9)
              goto LABEL_597;
LABEL_612:
            v9 = sub_21A6F8F10(a1, 0, 0);
            goto LABEL_597;
          }
          ValueAtIndex = CFArrayGetValueAtIndex(theArray, 0);
          if (!ValueAtIndex)
            goto LABEL_596;
          v76 = (__CFArray *)v259[0];
          v77 = "kSBSKey_SourceBase";
        }
        else
        {
          v76 = (__CFArray *)v259[0];
          v77 = "kSBSKey_BrowseRecordList";
        }
        v9 = sub_21A693A8C(allocator, v76, (uint64_t)"%ks=%O", v75, a5, a6, a7, a8, (uint64_t)v77);
        if ((_DWORD)v9)
          goto LABEL_597;
        v218 = sub_21A6FADB0(a1, 8, (uint64_t)v259[0], (CFTypeRef *)&v258, a5, a6, a7, a8);
        if ((_DWORD)v218 == -6769)
          goto LABEL_612;
        v9 = v218;
        if ((_DWORD)v218)
          goto LABEL_597;
        if (v258)
        {
          sub_21A693B94(v258, (uint64_t)&ValueAtIndex, (UInt8 *)"%ks", v219, a5, a6, a7, a8, (uint64_t)"kSBSKey_SourceBase");
          v9 = v220;
          if ((_DWORD)v220)
            goto LABEL_597;
          if (!ValueAtIndex)
            goto LABEL_596;
          v9 = sub_21A6D4710(*(_QWORD *)(a1 + 8), (CFMutableDictionaryRef *)&v257);
          if (!(_DWORD)v9)
          {
            if (!v257)
            {
              v9 = 4294960569;
              goto LABEL_599;
            }
            v9 = sub_21A693A8C(allocator, (__CFArray *)v258, (uint64_t)"%ks=%i", v221, a5, a6, a7, a8, (uint64_t)"kSBSKey_SelectorChoice");
            if (!(_DWORD)v9)
            {
              sub_21A6FBE34(a1, (const __CFString *)ValueAtIndex);
              v9 = sub_21A692FEC(allocator, (CFTypeRef *)&v256, (uint64_t)"{%ks=%i%ks=%O%ks=%O%ks=%O%ks=%O}", v222, v223, v224, v225, v226, (uint64_t)"kSBSKey_Result_ConfigurationChoice");
              if (!(_DWORD)v9)
              {
                if (v256)
                {
                  v9 = 0;
                  *(_QWORD *)(a1 + 72) = v256;
                  v256 = 0;
                  goto LABEL_597;
                }
LABEL_596:
                v9 = 4294960568;
              }
            }
          }
        }
        else
        {
          v9 = 4294960569;
        }
LABEL_597:
        if (v257)
        {
          CFRelease(v257);
          v257 = 0;
        }
LABEL_599:
        if (v258)
        {
          CFRelease(v258);
          v258 = 0;
        }
LABEL_601:
        if (v256)
          CFRelease(v256);
        if ((_DWORD)v9)
          goto LABEL_662;
        v227 = sub_21A6FA5C0(a1);
        v24 = v227 == 8;
        if (dword_2550F44C8 > 800)
          goto LABEL_609;
        v228 = v227;
        if (dword_2550F44C8 == -1 && !sub_21A69876C((uint64_t)&dword_2550F44C8, 0x320u))
          goto LABEL_609;
        sub_21A698FDC((uint64_t)&dword_2550F44C8, (uint64_t)"void __SBSEngine_StepByStepSync(void *)", 800, (uint64_t)"\n\n\t\t          \t\t---------- SBS state: \"%s\" ----------\n\n", v20, v21, v22, v23, (uint64_t)"eSBSStep_ExtendWireless_Config");
        if (v228 == 8)
          goto LABEL_664;
        goto LABEL_629;
      case 9u:
        if (dword_2550F44C8 <= 800 && (dword_2550F44C8 != -1 || sub_21A69876C((uint64_t)&dword_2550F44C8, 0x320u)))
          sub_21A698FDC((uint64_t)&dword_2550F44C8, (uint64_t)"void __SBSEngine_StepByStepSync(void *)", 800, (uint64_t)"\n\n\t\t          \t\t++++++++++ SBS state: \"%s\" ++++++++++\n\n", a5, a6, a7, a8, (uint64_t)"eSBSStep_Join_Config");
        v256 = 0;
        v257 = 0;
        v258 = 0;
        if (!*(_QWORD *)a1)
          goto LABEL_661;
        v259[0] = 0;
        cf = 0;
        ValueAtIndex = 0;
        if (!*(_QWORD *)(a1 + 48))
        {
          v9 = 4294960591;
          goto LABEL_353;
        }
        sub_21A6FAD28(a1, v259);
        v9 = v85;
        if ((_DWORD)v85)
          goto LABEL_353;
        if (!v259[0])
          goto LABEL_352;
        sub_21A693B94((const __CFString *)v259[0], (uint64_t)&ValueAtIndex, (UInt8 *)"%ks", v84, a5, a6, a7, a8, (uint64_t)"kSBSKey_SourceNetwork");
        v9 = v86;
        if ((_DWORD)v86)
          goto LABEL_353;
        if (!ValueAtIndex)
          goto LABEL_352;
        v87 = sub_21A70C6C4(*(_QWORD *)(a1 + 88), CFSTR("keychainNetworkType"), (const __CFString *)ValueAtIndex, &cf, a5, a6, a7, a8);
        if ((_DWORD)v87 == -6727)
          goto LABEL_220;
        v9 = v87;
        if ((_DWORD)v87)
          goto LABEL_353;
        if (!cf)
          goto LABEL_352;
        v9 = sub_21A693A8C(allocator, (__CFArray *)v259[0], (uint64_t)"%ks=%O", v88, a5, a6, a7, a8, (uint64_t)"kSBSKey_NetworkPassword");
        if (cf)
        {
          CFRelease(cf);
          cf = 0;
        }
        if ((_DWORD)v9)
          goto LABEL_353;
LABEL_220:
        v89 = sub_21A6FADB0(a1, 9, (uint64_t)v259[0], (CFTypeRef *)&v258, a5, a6, a7, a8);
        if ((_DWORD)v89 == -6769)
        {
          v9 = sub_21A6F8F10(a1, 0, 0);
        }
        else
        {
          v9 = v89;
          if ((_DWORD)v89)
            goto LABEL_353;
          if (v258)
          {
            sub_21A693B94(v258, (uint64_t)&ValueAtIndex, (UInt8 *)"%ks", v90, a5, a6, a7, a8, (uint64_t)"kSBSKey_SourceNetwork");
            v9 = v91;
            if ((_DWORD)v91)
              goto LABEL_353;
            if (!ValueAtIndex)
              goto LABEL_352;
            v9 = sub_21A6D4710(*(_QWORD *)(a1 + 8), (CFMutableDictionaryRef *)&v257);
            if (!(_DWORD)v9)
            {
              if (!v257)
              {
                v9 = 4294960569;
                goto LABEL_355;
              }
              v9 = sub_21A692FEC(allocator, (CFTypeRef *)&v256, (uint64_t)"{%ks=%i%ks=%O%ks=%O%ks=%O%ks=%O}", v92, a5, a6, a7, a8, (uint64_t)"kSBSKey_Result_ConfigurationChoice");
              if (!(_DWORD)v9)
              {
                if (v256)
                {
                  v9 = 0;
                  *(_QWORD *)(a1 + 72) = v256;
                  v256 = 0;
                  goto LABEL_353;
                }
LABEL_352:
                v9 = 4294960568;
              }
            }
          }
          else
          {
            v9 = 4294960569;
          }
        }
LABEL_353:
        if (v257)
        {
          CFRelease(v257);
          v257 = 0;
        }
LABEL_355:
        if (v258)
        {
          CFRelease(v258);
          v258 = 0;
        }
        if (v256)
          CFRelease(v256);
        if ((_DWORD)v9)
          goto LABEL_662;
        v155 = sub_21A6FA5C0(a1);
        v24 = v155 == 9;
        if (dword_2550F44C8 > 800)
          goto LABEL_609;
        v156 = v155;
        if (dword_2550F44C8 == -1 && !sub_21A69876C((uint64_t)&dword_2550F44C8, 0x320u))
          goto LABEL_609;
        sub_21A698FDC((uint64_t)&dword_2550F44C8, (uint64_t)"void __SBSEngine_StepByStepSync(void *)", 800, (uint64_t)"\n\n\t\t          \t\t---------- SBS state: \"%s\" ----------\n\n", v20, v21, v22, v23, (uint64_t)"eSBSStep_Join_Config");
        if (v156 == 9)
          goto LABEL_664;
        goto LABEL_629;
      case 0xAu:
        if (dword_2550F44C8 <= 800 && (dword_2550F44C8 != -1 || sub_21A69876C((uint64_t)&dword_2550F44C8, 0x320u)))
          sub_21A698FDC((uint64_t)&dword_2550F44C8, (uint64_t)"void __SBSEngine_StepByStepSync(void *)", 800, (uint64_t)"\n\n\t\t          \t\t++++++++++ SBS state: \"%s\" ++++++++++\n\n", a5, a6, a7, a8, (uint64_t)"eSBSStep_ReplaceChoice");
        v257 = 0;
        if (!*(_QWORD *)(a1 + 48))
          goto LABEL_661;
        v258 = 0;
        v259[0] = 0;
        LODWORD(cf) = 0;
        if (!*(_QWORD *)a1)
          goto LABEL_555;
        sub_21A6FAD28(a1, v259);
        v9 = v35;
        if ((_DWORD)v35)
          goto LABEL_556;
        if (!v259[0])
          goto LABEL_563;
        v258 = 0;
        v36 = sub_21A6FADB0(a1, 10, (uint64_t)v259[0], (CFTypeRef *)&v258, a5, a6, a7, a8);
        if ((_DWORD)v36 == -6769)
        {
          v41 = 0;
          v42 = 0;
          goto LABEL_406;
        }
        v9 = v36;
        if ((_DWORD)v36)
          goto LABEL_556;
        if (!v258)
          goto LABEL_564;
        sub_21A693B94(v258, (uint64_t)&cf, (UInt8 *)"%ks:int", v37, a5, a6, a7, a8, (uint64_t)"kSBSKey_SelectorChoice");
        v9 = v39;
        if ((_DWORD)v39)
          goto LABEL_556;
        v9 = sub_21A693A8C(allocator, (__CFArray *)v259[0], (uint64_t)"%ks=%i", v38, a5, a6, a7, a8, (uint64_t)"kSBSKey_SelectorChoice");
        if ((_DWORD)v9)
          goto LABEL_556;
        if ((_DWORD)cf == 330)
        {
          v41 = 0;
          v42 = 13;
          goto LABEL_406;
        }
        if ((_DWORD)cf == 320)
        {
          v41 = 0;
          v42 = 12;
          goto LABEL_406;
        }
        if ((_DWORD)cf != 310)
        {
          v9 = 4294960587;
          goto LABEL_556;
        }
        v256 = 0;
        v40 = sub_21A6FB014(a1, (CFTypeRef *)&v256);
        if ((_DWORD)v40 == -6727)
          goto LABEL_95;
        v9 = v40;
        ValueAtIndex = 0;
        if ((_DWORD)v40)
          goto LABEL_556;
        if (!v256)
          goto LABEL_563;
        v213 = sub_21A6FB22C(v256, (const char *)2, *(const __CFString **)a1, (__CFArray **)&ValueAtIndex);
        if ((_DWORD)v213 == -6727)
        {
LABEL_95:
          v41 = 0;
          v42 = 15;
LABEL_406:
          v9 = sub_21A6F8F10(a1, v42, (uint64_t)v41);
          goto LABEL_556;
        }
        v9 = v213;
        if (!(_DWORD)v213)
        {
          if (ValueAtIndex)
          {
            if (CFArrayGetCount((CFArrayRef)ValueAtIndex))
            {
              v9 = sub_21A692FEC(allocator, (CFTypeRef *)&v257, (uint64_t)"{%ks=%O}", v214, a5, a6, a7, a8, (uint64_t)"kSBSKey_NetworkScanRecordList");
              if (ValueAtIndex)
                CFRelease(ValueAtIndex);
              if (!(_DWORD)v9)
              {
                v41 = v257;
                if (v257)
                {
                  v42 = 11;
                  goto LABEL_406;
                }
LABEL_564:
                v9 = 4294960569;
              }
            }
            else
            {
LABEL_555:
              v9 = 4294960591;
            }
          }
          else
          {
LABEL_563:
            v9 = 4294960568;
          }
        }
LABEL_556:
        if (v257)
          CFRelease(v257);
        if ((_DWORD)v9)
          goto LABEL_662;
        if (dword_2550F44C8 <= 800)
        {
          v12 = "eSBSStep_ReplaceChoice";
          if (dword_2550F44C8 != -1
            || (v215 = sub_21A69876C((uint64_t)&dword_2550F44C8, 0x320u), v12 = "eSBSStep_ReplaceChoice", v215))
          {
LABEL_628:
            sub_21A698FDC((uint64_t)&dword_2550F44C8, (uint64_t)"void __SBSEngine_StepByStepSync(void *)", 800, (uint64_t)"\n\n\t\t          \t\t---------- SBS state: \"%s\" ----------\n\n", a5, a6, a7, a8, (uint64_t)v12);
          }
        }
        goto LABEL_629;
      case 0xBu:
        if (dword_2550F44C8 <= 800 && (dword_2550F44C8 != -1 || sub_21A69876C((uint64_t)&dword_2550F44C8, 0x320u)))
          sub_21A698FDC((uint64_t)&dword_2550F44C8, (uint64_t)"void __SBSEngine_StepByStepSync(void *)", 800, (uint64_t)"\n\n\t\t          \t\t++++++++++ SBS state: \"%s\" ++++++++++\n\n", a5, a6, a7, a8, (uint64_t)"eSBSStep_ReplaceNetworkChoice");
        v258 = 0;
        v259[0] = 0;
        v256 = 0;
        v257 = 0;
        cf = 0;
        ValueAtIndex = 0;
        theArray = 0;
        v253 = 0;
        if (!*(_QWORD *)(a1 + 48))
          goto LABEL_661;
        if (!*(_QWORD *)a1)
          goto LABEL_615;
        sub_21A6FAD28(a1, v259);
        v9 = v94;
        if ((_DWORD)v94)
          goto LABEL_617;
        if (!v259[0])
          goto LABEL_616;
        sub_21A693B94((const __CFString *)v259[0], (uint64_t)&v256, (UInt8 *)"%ks", v93, a5, a6, a7, a8, (uint64_t)"kSBSKey_NetworkScanRecordList");
        v9 = v95;
        if ((_DWORD)v95)
          goto LABEL_617;
        if (!v256)
          goto LABEL_616;
        if (CFDictionaryContainsKey((CFDictionaryRef)v259[0], CFSTR("kSBSKey_SourceNetwork")))
          goto LABEL_632;
        if (!v256)
          goto LABEL_632;
        v97 = sub_21A70B648(*(_QWORD *)(a1 + 88), &ValueAtIndex, 0, v96, a5, a6, a7, a8);
        if ((_DWORD)v97 == -6727)
          goto LABEL_632;
        v9 = v97;
        if ((_DWORD)v97)
          goto LABEL_617;
        if (!ValueAtIndex)
          goto LABEL_616;
        v98 = sub_21A68F700((const __CFString *)ValueAtIndex, 0, v256);
        if (v98 == -1)
          goto LABEL_632;
        if (!CFArrayGetValueAtIndex(v256, v98))
          goto LABEL_616;
        v100 = sub_21A693A8C(allocator, (__CFArray *)v259[0], (uint64_t)"%ks=%O", v99, a5, a6, a7, a8, (uint64_t)"kSBSKey_SourceNetwork");
        while (2)
        {
          v9 = v100;
          if ((_DWORD)v100)
            goto LABEL_617;
LABEL_632:
          while (2)
          {
            v258 = 0;
            v231 = sub_21A6FADB0(a1, 11, (uint64_t)v259[0], (CFTypeRef *)&v258, a5, a6, a7, a8);
            if ((_DWORD)v231)
            {
              v9 = v231;
              if ((_DWORD)v231 == -6769)
              {
                v246 = 0;
                v247 = 0;
LABEL_650:
                v233 = sub_21A6F8F10(a1, v247, (uint64_t)v246);
LABEL_651:
                v9 = v233;
              }
LABEL_617:
              v229 = v253;
              goto LABEL_618;
            }
            if (!v258)
              goto LABEL_660;
            sub_21A693B94(v258, (uint64_t)&theArray, (UInt8 *)"%ks", v232, a5, a6, a7, a8, (uint64_t)"kSBSKey_SourceNetwork");
            if ((_DWORD)v233)
              goto LABEL_651;
            if (!theArray)
              goto LABEL_660;
            v233 = sub_21A693A8C(allocator, (__CFArray *)v259[0], (uint64_t)"%ks=%O", v234, a5, a6, a7, a8, (uint64_t)"kSBSKey_SourceNetwork");
            if ((_DWORD)v233)
              goto LABEL_651;
            v236 = (const __CFString *)sub_21A72E204((uint64_t)theArray, v235);
            if (!v236)
              goto LABEL_615;
            v238 = v236;
            if (!sub_21A70B84C(*(_QWORD *)(a1 + 88), v236, 0, v237, a5, a6, a7, a8))
            {
              v242 = 1;
              v243 = sub_21A70E004(*(_QWORD *)(a1 + 88), (const char *)theArray, 0, 0, (const void *)1, v239, v240, v241);
              if ((_DWORD)v243 != -6723)
              {
                v9 = v243;
                if (!(_DWORD)v243)
                  goto LABEL_643;
                goto LABEL_617;
              }
              continue;
            }
            break;
          }
          v242 = 0;
LABEL_643:
          v244 = sub_21A6FB744(a1, v242, &cf);
          if ((_DWORD)v244 == -6727)
          {
LABEL_647:
            v100 = sub_21A70D6D4(*(_QWORD *)(a1 + 88), (uint64_t)CFSTR("kAskUserWarning_Prompt"), 0, 0, (uint64_t)CFSTR("kAskUserWarning_NoBaseStationsFound_OnNetwork"), (uint64_t)v238, 0, 0, 0);
            continue;
          }
          break;
        }
        v9 = v244;
        if ((_DWORD)v244)
          goto LABEL_617;
        if (!cf)
          goto LABEL_616;
        v245 = sub_21A6FB9D4(a1, (CFArrayRef)cf, *(const __CFString **)a1, 0, 0, 1, v238, (CFMutableArrayRef *)&v253);
        if ((_DWORD)v245 == -6727)
          goto LABEL_647;
        v9 = v245;
        if ((_DWORD)v245)
          goto LABEL_617;
        if (!v253)
        {
LABEL_616:
          v9 = 4294960568;
          goto LABEL_617;
        }
        if (!CFArrayGetCount((CFArrayRef)v253))
        {
LABEL_615:
          v9 = 4294960591;
          goto LABEL_617;
        }
        v229 = v253;
        v9 = 4294960569;
        if (theArray && v253)
        {
          v9 = sub_21A692FEC(allocator, (CFTypeRef *)&v257, (uint64_t)"{%ks=%O%ks=%O}", v248, a5, a6, a7, a8, (uint64_t)"kSBSKey_SourceNetwork");
          if (!(_DWORD)v9)
          {
            v246 = v257;
            if (v257)
            {
              v247 = 15;
              goto LABEL_650;
            }
LABEL_660:
            v9 = 4294960569;
          }
          goto LABEL_617;
        }
LABEL_618:
        if (v229)
        {
          CFRelease(v229);
          v253 = 0;
        }
        if (ValueAtIndex)
        {
          CFRelease(ValueAtIndex);
          ValueAtIndex = 0;
        }
        if (v257)
          CFRelease(v257);
        if ((_DWORD)v9)
          goto LABEL_662;
        if (dword_2550F44C8 <= 800)
        {
          v12 = "eSBSStep_ReplaceNetworkChoice";
          if (dword_2550F44C8 != -1)
            goto LABEL_628;
          v230 = sub_21A69876C((uint64_t)&dword_2550F44C8, 0x320u);
          v12 = "eSBSStep_ReplaceNetworkChoice";
          if (v230)
            goto LABEL_628;
        }
        goto LABEL_629;
      case 0xCu:
        if (dword_2550F44C8 <= 800 && (dword_2550F44C8 != -1 || sub_21A69876C((uint64_t)&dword_2550F44C8, 0x320u)))
          sub_21A698FDC((uint64_t)&dword_2550F44C8, (uint64_t)"void __SBSEngine_StepByStepSync(void *)", 800, (uint64_t)"\n\n\t\t          \t\t++++++++++ SBS state: \"%s\" ++++++++++\n\n", a5, a6, a7, a8, (uint64_t)"eSBSStep_ReplaceConfiguration_Config");
        v258 = 0;
        v259[0] = 0;
        v256 = 0;
        v257 = 0;
        cf = 0;
        ValueAtIndex = 0;
        if (!*(_QWORD *)(a1 + 48))
          goto LABEL_661;
        sub_21A6FAD28(a1, v259);
        v9 = v15;
        if ((_DWORD)v15)
          goto LABEL_40;
        if (!v259[0])
          goto LABEL_382;
        if (CFDictionaryContainsKey((CFDictionaryRef)v259[0], CFSTR("kSBSKey_PreviousConfigurationList")))
          goto LABEL_286;
        v9 = sub_21A692FEC(allocator, (CFTypeRef *)&v256, (uint64_t)"[%C%C%C%C%C%C%C%C%C]", v107, a5, a6, a7, a8, 1717920116);
        if ((_DWORD)v9)
          goto LABEL_40;
        if (!v256)
          goto LABEL_382;
        v9 = sub_21A70B464(*(_QWORD *)(a1 + 88), 0, (uint64_t)v256, &ValueAtIndex, a5, a6, a7, a8);
        if (v256)
        {
          CFRelease(v256);
          v256 = 0;
        }
        if ((_DWORD)v9 == -6727)
          goto LABEL_286;
        v253 = 0;
        if ((_DWORD)v9)
          goto LABEL_40;
        if (!ValueAtIndex)
          goto LABEL_382;
        v9 = sub_21A6FBED8((const __CFArray *)ValueAtIndex, *(const __CFString **)a1, (__CFArray **)&v253);
        if (ValueAtIndex)
        {
          CFRelease(ValueAtIndex);
          ValueAtIndex = 0;
        }
        if ((_DWORD)v9 == -6727)
          goto LABEL_286;
        if ((_DWORD)v9)
          goto LABEL_40;
        if (!v253)
          goto LABEL_382;
        if (CFArrayGetCount((CFArrayRef)v253))
        {
          v9 = sub_21A693A8C(allocator, (__CFArray *)v259[0], (uint64_t)"%ks=%O", v157, a5, a6, a7, a8, (uint64_t)"kSBSKey_PreviousConfigurationList");
          if (v253)
            CFRelease(v253);
          if (!(_DWORD)v9)
          {
LABEL_286:
            v108 = sub_21A6FADB0(a1, 12, (uint64_t)v259[0], (CFTypeRef *)&v258, a5, a6, a7, a8);
            if ((_DWORD)v108 == -6769)
            {
              v9 = sub_21A6F8F10(a1, 0, 0);
            }
            else
            {
              v9 = v108;
              if ((_DWORD)v108 != -6723)
              {
                v253 = 0;
                if (!(_DWORD)v108)
                {
                  if (!v258)
                    goto LABEL_430;
                  v9 = sub_21A6D4710(*(_QWORD *)(a1 + 8), (CFMutableDictionaryRef *)&cf);
                  if ((_DWORD)v9)
                    goto LABEL_40;
                  if (cf)
                  {
                    sub_21A693B94(v258, (uint64_t)&v253, (UInt8 *)"%ks", v109, a5, a6, a7, a8, (uint64_t)"kSBSKey_SourceConfiguration");
                    v9 = v111;
                    if (!(_DWORD)v111)
                    {
                      if (v253)
                      {
                        v9 = sub_21A692FEC(allocator, (CFTypeRef *)&v257, (uint64_t)"{%ks=%i%ks=%O%ks=%O%ks=%O%ks=%O}", v110, a5, a6, a7, a8, (uint64_t)"kSBSKey_Result_ConfigurationChoice");
                        if (!(_DWORD)v9)
                        {
                          *(_QWORD *)(a1 + 72) = v257;
                          v257 = 0;
                        }
                      }
                      else
                      {
LABEL_382:
                        v9 = 4294960568;
                      }
                    }
                  }
                  else
                  {
LABEL_430:
                    v9 = 4294960569;
                  }
                }
              }
            }
          }
        }
        else
        {
          v9 = 4294960591;
        }
LABEL_40:
        if (cf)
        {
          CFRelease(cf);
          cf = 0;
        }
        if (v258)
        {
          CFRelease(v258);
          v258 = 0;
        }
        if (v257)
          CFRelease(v257);
        if ((_DWORD)v9)
          goto LABEL_662;
        v16 = sub_21A6FA5C0(a1);
        v24 = v16 == 12;
        if (dword_2550F44C8 > 800)
          goto LABEL_609;
        v25 = v16;
        if (dword_2550F44C8 == -1 && !sub_21A69876C((uint64_t)&dword_2550F44C8, 0x320u))
          goto LABEL_609;
        sub_21A698FDC((uint64_t)&dword_2550F44C8, (uint64_t)"void __SBSEngine_StepByStepSync(void *)", 800, (uint64_t)"\n\n\t\t          \t\t---------- SBS state: \"%s\" ----------\n\n", v20, v21, v22, v23, (uint64_t)"eSBSStep_ReplaceConfiguration_Config");
        if (v25 == 12)
          goto LABEL_664;
        goto LABEL_629;
      case 0xDu:
        if (dword_2550F44C8 <= 800 && (dword_2550F44C8 != -1 || sub_21A69876C((uint64_t)&dword_2550F44C8, 0x320u)))
          sub_21A698FDC((uint64_t)&dword_2550F44C8, (uint64_t)"void __SBSEngine_StepByStepSync(void *)", 800, (uint64_t)"\n\n\t\t          \t\t++++++++++ SBS state: \"%s\" ++++++++++\n\n", a5, a6, a7, a8, (uint64_t)"eSBSStep_ReplaceOther_Connections");
        v33 = sub_21A6FA94C(a1);
        if ((_DWORD)v33)
          goto LABEL_665;
        if (dword_2550F44C8 > 800)
          goto LABEL_629;
        v12 = "eSBSStep_ReplaceOther_Connections";
        if (dword_2550F44C8 == -1)
        {
          v43 = sub_21A69876C((uint64_t)&dword_2550F44C8, 0x320u);
          v12 = "eSBSStep_ReplaceOther_Connections";
          if (!v43)
            goto LABEL_629;
        }
        goto LABEL_628;
      case 0xEu:
        if (dword_2550F44C8 <= 800 && (dword_2550F44C8 != -1 || sub_21A69876C((uint64_t)&dword_2550F44C8, 0x320u)))
          sub_21A698FDC((uint64_t)&dword_2550F44C8, (uint64_t)"void __SBSEngine_StepByStepSync(void *)", 800, (uint64_t)"\n\n\t\t          \t\t++++++++++ SBS state: \"%s\" ++++++++++\n\n", a5, a6, a7, a8, (uint64_t)"eSBSStep_ReplaceOther_Config");
        v33 = sub_21A6FA624(a1);
        if ((_DWORD)v33)
          goto LABEL_665;
        v78 = sub_21A6FA5C0(a1);
        LOBYTE(v24) = v78 == 14;
        if (dword_2550F44C8 > 800)
          goto LABEL_609;
        v79 = v78;
        if (dword_2550F44C8 == -1 && !sub_21A69876C((uint64_t)&dword_2550F44C8, 0x320u))
          goto LABEL_609;
        sub_21A698FDC((uint64_t)&dword_2550F44C8, (uint64_t)"void __SBSEngine_StepByStepSync(void *)", 800, (uint64_t)"\n\n\t\t          \t\t---------- SBS state: \"%s\" ----------\n\n", v20, v21, v22, v23, (uint64_t)"eSBSStep_ReplaceOther_Config");
        if (v79 == 14)
          goto LABEL_664;
        goto LABEL_629;
      case 0xFu:
        if (dword_2550F44C8 <= 800 && (dword_2550F44C8 != -1 || sub_21A69876C((uint64_t)&dword_2550F44C8, 0x320u)))
          sub_21A698FDC((uint64_t)&dword_2550F44C8, (uint64_t)"void __SBSEngine_StepByStepSync(void *)", 800, (uint64_t)"\n\n\t\t          \t\t++++++++++ SBS state: \"%s\" ++++++++++\n\n", a5, a6, a7, a8, (uint64_t)"eSBSStep_ReplaceBaseStation_Config");
        v258 = 0;
        v259[0] = 0;
        cf = 0;
        ValueAtIndex = 0;
        v256 = 0;
        v257 = 0;
        v253 = 0;
        if (!*(_QWORD *)(a1 + 48))
        {
          v9 = 4294960591;
          goto LABEL_271;
        }
        sub_21A6FAD28(a1, v259);
        v9 = v14;
        if ((_DWORD)v14)
          goto LABEL_30;
        if (!v259[0])
          goto LABEL_418;
        if (!CFDictionaryContainsKey((CFDictionaryRef)v259[0], CFSTR("kSBSKey_SelectorChoice")))
        {
          v9 = sub_21A693A8C(allocator, (__CFArray *)v259[0], (uint64_t)"%ks=%i", v117, v118, v119, v120, v121, (uint64_t)"kSBSKey_SelectorChoice");
          if ((_DWORD)v9)
            goto LABEL_30;
        }
        if (CFDictionaryContainsKey((CFDictionaryRef)v259[0], CFSTR("kSBSKey_BrowseRecordList")))
          goto LABEL_318;
        theArray = 0;
        v175 = sub_21A6FB744(a1, 0, &theArray);
        if ((_DWORD)v175 == -6727)
          goto LABEL_427;
        v9 = v175;
        if ((_DWORD)v175)
          goto LABEL_30;
        if (!theArray)
          goto LABEL_418;
        v176 = sub_21A6FB9D4(a1, theArray, *(const __CFString **)a1, 0, 0, 1, 0, (CFMutableArrayRef *)&v253);
        if ((_DWORD)v176 == -6727)
        {
LABEL_427:
          v9 = sub_21A70D6D4(*(_QWORD *)(a1 + 88), (uint64_t)CFSTR("kAskUserWarning_Prompt"), 0, 0, (uint64_t)CFSTR("kAskUserWarning_NoBaseStationsFound_OnEthernet"), 0, 0, 0, 0);
          if ((_DWORD)v9)
            goto LABEL_30;
LABEL_428:
          v178 = a1;
          v179 = 0;
          v180 = 0;
LABEL_429:
          v9 = sub_21A6F8F10(v178, v179, (uint64_t)v180);
          goto LABEL_30;
        }
        v9 = v176;
        if ((_DWORD)v176)
          goto LABEL_30;
        if (!v253)
        {
LABEL_418:
          v9 = 4294960568;
          goto LABEL_30;
        }
        if (!CFArrayGetCount((CFArrayRef)v253))
        {
          v9 = 4294960591;
          goto LABEL_30;
        }
        v9 = sub_21A693A8C(allocator, (__CFArray *)v259[0], (uint64_t)"%ks=%O", v177, a5, a6, a7, a8, (uint64_t)"kSBSKey_BrowseRecordList");
        if (v253)
        {
          CFRelease(v253);
          v253 = 0;
        }
        if ((_DWORD)v9)
          goto LABEL_30;
LABEL_318:
        v122 = sub_21A6FADB0(a1, 15, (uint64_t)v259[0], (CFTypeRef *)&v258, a5, a6, a7, a8);
        if ((_DWORD)v122 == -6769)
          goto LABEL_428;
        v9 = v122;
        if ((_DWORD)v122)
          goto LABEL_30;
        if (!v258)
          goto LABEL_568;
        sub_21A693B94(v258, (uint64_t)&ValueAtIndex, (UInt8 *)"%ks", v123, a5, a6, a7, a8, (uint64_t)"kSBSKey_SourceBase");
        v9 = v127;
        if ((_DWORD)v127)
          goto LABEL_30;
        if (!ValueAtIndex)
          goto LABEL_418;
        v128 = sub_21A68E368((const __CFString *)ValueAtIndex, v124, v125, v126, a5, a6, a7, a8);
        v136 = sub_21A690128((const __CFString *)ValueAtIndex, v129, v130, v131, v132, v133, v134, v135);
        if (v128 == 3 || v128 == 102 || !v136)
        {
          v9 = sub_21A692FEC(allocator, (CFTypeRef *)&v257, (uint64_t)"{%ks=%O%ks=%i}", v137, v138, v139, v140, v141, (uint64_t)"kSBSKey_SourceBase");
          if (!(_DWORD)v9)
          {
            v180 = v257;
            if (v257)
            {
              v178 = a1;
              v179 = 2;
              goto LABEL_429;
            }
LABEL_568:
            v9 = 4294960569;
          }
        }
        else
        {
          v9 = sub_21A6D4710(*(_QWORD *)(a1 + 8), (CFMutableDictionaryRef *)&cf);
          if (!(_DWORD)v9)
          {
            if (!cf)
            {
              v9 = 4294960569;
              goto LABEL_32;
            }
            v9 = sub_21A692FEC(allocator, (CFTypeRef *)&v256, (uint64_t)"{%ks=%i%ks=%O%ks=%O%ks=%O%ks=%O}", v142, a5, a6, a7, a8, (uint64_t)"kSBSKey_Result_ConfigurationChoice");
            if (!(_DWORD)v9)
            {
              *(_QWORD *)(a1 + 72) = v256;
              v256 = 0;
            }
          }
        }
LABEL_30:
        if (cf)
        {
          CFRelease(cf);
          cf = 0;
        }
LABEL_32:
        if (v258)
        {
          CFRelease(v258);
          v258 = 0;
        }
LABEL_271:
        if (v256)
        {
          CFRelease(v256);
          v256 = 0;
        }
        if (v257)
        {
          CFRelease(v257);
          v257 = 0;
        }
        if (v253)
          CFRelease(v253);
        if ((_DWORD)v9)
          goto LABEL_662;
        v105 = sub_21A6FA5C0(a1);
        v24 = v105 == 15;
        if (dword_2550F44C8 > 800)
          goto LABEL_609;
        v106 = v105;
        if (dword_2550F44C8 == -1 && !sub_21A69876C((uint64_t)&dword_2550F44C8, 0x320u))
          goto LABEL_609;
        sub_21A698FDC((uint64_t)&dword_2550F44C8, (uint64_t)"void __SBSEngine_StepByStepSync(void *)", 800, (uint64_t)"\n\n\t\t          \t\t---------- SBS state: \"%s\" ----------\n\n", v20, v21, v22, v23, (uint64_t)"eSBSStep_ReplaceBaseStation_Config");
        if (v106 == 15)
          goto LABEL_664;
        goto LABEL_629;
      case 0x10u:
        if (dword_2550F44C8 <= 800 && (dword_2550F44C8 != -1 || sub_21A69876C((uint64_t)&dword_2550F44C8, 0x320u)))
          sub_21A698FDC((uint64_t)&dword_2550F44C8, (uint64_t)"void __SBSEngine_StepByStepSync(void *)", 800, (uint64_t)"\n\n\t\t          \t\t++++++++++ SBS state: \"%s\" ++++++++++\n\n", a5, a6, a7, a8, (uint64_t)"eSBSStep_Restore_Config");
        v258 = 0;
        v259[0] = 0;
        v256 = 0;
        v257 = 0;
        if (!*(_QWORD *)(a1 + 48))
          goto LABEL_661;
        if (!*(_QWORD *)a1 || !*(_QWORD *)(a1 + 8))
        {
          Mutable = 0;
          v9 = 4294960591;
          goto LABEL_258;
        }
        sub_21A6FAD28(a1, v259);
        if ((_DWORD)v80)
          goto LABEL_193;
        if (!v259[0])
        {
          Mutable = 0;
          v9 = 4294960568;
          goto LABEL_258;
        }
        v151 = sub_21A6FADB0(a1, 16, (uint64_t)v259[0], (CFTypeRef *)&v258, a5, a6, a7, a8);
        if ((_DWORD)v151 == -6769)
        {
          v80 = sub_21A6F8F10(a1, 0, 0);
LABEL_193:
          v9 = v80;
LABEL_194:
          Mutable = 0;
          goto LABEL_258;
        }
        v9 = v151;
        if ((_DWORD)v151 == -6723)
          goto LABEL_194;
        Mutable = 0;
        ValueAtIndex = 0;
        if ((_DWORD)v151)
          goto LABEL_258;
        if (!v258)
          goto LABEL_433;
        v80 = sub_21A6D4710(*(_QWORD *)(a1 + 8), (CFMutableDictionaryRef *)&v257);
        if ((_DWORD)v80)
          goto LABEL_193;
        if (!v257)
        {
LABEL_433:
          Mutable = 0;
          v9 = 4294960569;
          goto LABEL_434;
        }
        Mutable = CFDictionaryCreateMutable(allocator, 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
        if (!Mutable)
          goto LABEL_580;
        v153 = sub_21A693A8C(allocator, Mutable, (uint64_t)"%ks=%i%ks=%O%ks=%O%ks=%O", v152, a5, a6, a7, a8, (uint64_t)"kSBSKey_Result_ConfigurationChoice");
        if ((_DWORD)v153
          || (sub_21A693B94(*(const __CFString **)a1, (uint64_t)&ValueAtIndex, (UInt8 *)"%ks.%ks", v154, a5, a6, a7, a8, (uint64_t)"txt"), (_DWORD)v153))
        {
          v9 = v153;
          goto LABEL_258;
        }
        if (!ValueAtIndex)
          goto LABEL_580;
        if (sub_21A70B464(*(_QWORD *)(a1 + 88), (uint64_t)ValueAtIndex, 0, (CFTypeRef *)&v256, a5, a6, a7, a8) == -6727)goto LABEL_574;
        if (CFArrayGetValueAtIndex(v256, 0))
        {
          v217 = sub_21A693A8C(allocator, Mutable, (uint64_t)"%ks=%O", v216, a5, a6, a7, a8, (uint64_t)"kSBSKey_Result_ConfigChangeLogDict");
          if ((_DWORD)v217)
          {
            v9 = v217;
          }
          else
          {
LABEL_574:
            v9 = 0;
            *(_QWORD *)(a1 + 72) = Mutable;
            Mutable = 0;
          }
        }
        else
        {
LABEL_580:
          v9 = 4294960568;
        }
LABEL_434:
        if (v256)
        {
          CFRelease(v256);
          v256 = 0;
        }
LABEL_258:
        if (v257)
        {
          CFRelease(v257);
          v257 = 0;
        }
        if (v258)
        {
          CFRelease(v258);
          v258 = 0;
        }
        if (Mutable)
          CFRelease(Mutable);
        if ((_DWORD)v9)
          goto LABEL_662;
        v103 = sub_21A6FA5C0(a1);
        v24 = v103 == 16;
        if (dword_2550F44C8 > 800)
          goto LABEL_609;
        v104 = v103;
        if (dword_2550F44C8 == -1 && !sub_21A69876C((uint64_t)&dword_2550F44C8, 0x320u))
          goto LABEL_609;
        sub_21A698FDC((uint64_t)&dword_2550F44C8, (uint64_t)"void __SBSEngine_StepByStepSync(void *)", 800, (uint64_t)"\n\n\t\t          \t\t---------- SBS state: \"%s\" ----------\n\n", v20, v21, v22, v23, (uint64_t)"eSBSStep_Restore_Config");
        if (v104 == 16)
          goto LABEL_664;
        goto LABEL_629;
      default:
        v9 = 4294960587;
        goto LABEL_662;
    }
  }
}

uint64_t sub_21A6F8888(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12;

  if (dword_2550F44C8 <= 800 && (dword_2550F44C8 != -1 || sub_21A69876C((uint64_t)&dword_2550F44C8, 0x320u)))
    sub_21A698FDC((uint64_t)&dword_2550F44C8, (uint64_t)"OSStatus SBSEngine_SetProgressCallback(StepByStepContextRef, assistant_progress_t, void *)", 800, (uint64_t)" \n", a5, a6, a7, a8, v12);
  if (a1)
    return sub_21A70A6D8(*(_QWORD *)(a1 + 88), a2, a3, a4, a5, a6, a7, a8);
  else
    return 4294960591;
}

uint64_t sub_21A6F8924(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12;

  if (dword_2550F44C8 <= 800 && (dword_2550F44C8 != -1 || sub_21A69876C((uint64_t)&dword_2550F44C8, 0x320u)))
    sub_21A698FDC((uint64_t)&dword_2550F44C8, (uint64_t)"OSStatus SBSEngine_SetAssistantCallback(StepByStepContextRef, assistant_callback_t, void *)", 800, (uint64_t)" \n", a5, a6, a7, a8, v12);
  if (a1)
    return sub_21A70A18C(*(_QWORD *)(a1 + 88), a2, a3, a4, a5, a6, a7, a8);
  else
    return 4294960591;
}

uint64_t sub_21A6F89C0(uint64_t a1, CFTypeRef cf)
{
  const void *v4;

  if (!a1)
    return 4294960591;
  v4 = *(const void **)(a1 + 80);
  if (v4)
  {
    CFRelease(v4);
    *(_QWORD *)(a1 + 80) = 0;
  }
  if (cf)
  {
    *(_QWORD *)(a1 + 80) = cf;
    CFRetain(cf);
  }
  return 0;
}

uint64_t sub_21A6F8A10(uint64_t a1, CFTypeRef cf)
{
  const void *v4;

  if (!a1)
    return 4294960591;
  v4 = *(const void **)(a1 + 64);
  if (v4)
  {
    CFRelease(v4);
    *(_QWORD *)(a1 + 64) = 0;
  }
  if (cf)
  {
    *(_QWORD *)(a1 + 64) = cf;
    CFRetain(cf);
  }
  return 0;
}

uint64_t sub_21A6F8A60(uint64_t a1, uint64_t a2, int a3)
{
  const __CFString *v4;

  if (!a1 || !a2 || (a3 - 1) > 1)
    return 4294960591;
  if (a3 == 1)
    v4 = CFSTR("kSBSCacheKey_ScanRecordsMerged");
  else
    v4 = CFSTR("kSBSCacheKey_ScanRecordsUnmerged");
  return sub_21A6F8AA0(a1, v4, a2);
}

uint64_t sub_21A6F8AA0(uint64_t a1, CFStringRef theString1, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  CFStringRef v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __CFArray *v30;
  const __CFAllocator *v31;
  CFMutableDictionaryRef Mutable;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __CFArray *v39;
  CFTypeRef cf;

  cf = 0;
  v3 = 4294960591;
  if (!theString1 || !a3)
    return v3;
  if (*(_QWORD *)(a1 + 56))
  {
    if (CFStringCompare(theString1, CFSTR("kSBSCacheKey_BrowseRecords"), 0))
    {
      if (CFStringCompare(theString1, CFSTR("kSBSCacheKey_BaseSettings"), 0) == kCFCompareEqualTo)
        goto LABEL_20;
      v16 = sub_21A693A8C((const __CFAllocator *)*MEMORY[0x24BDBD240], *(__CFArray **)(a1 + 56), (uint64_t)"%kO=%O", v11, v12, v13, v14, v15, (uint64_t)theString1);
      goto LABEL_7;
    }
    v17 = sub_21A70B648(*(_QWORD *)(a1 + 88), &cf, 0, v6, v7, v8, v9, v10);
    v18 = theString1;
    if ((_DWORD)v17 != -6727)
    {
      v3 = v17;
      if ((_DWORD)v17)
        goto LABEL_20;
      v18 = (CFStringRef)cf;
      if (!cf)
        return 4294960568;
    }
    v39 = 0;
    if (CFDictionaryContainsKey(*(CFDictionaryRef *)(a1 + 56), theString1))
    {
      sub_21A693B94(*(const __CFString **)(a1 + 56), (uint64_t)&v39, (UInt8 *)"%kO", v19, v20, v21, v22, v23, (uint64_t)theString1);
      v3 = v29;
      if ((_DWORD)v29)
        goto LABEL_20;
      v30 = v39;
      if (v39)
      {
        v31 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
LABEL_17:
        v16 = sub_21A693A8C(v31, v30, (uint64_t)"%kO=%O", v24, v25, v26, v27, v28, (uint64_t)v18);
LABEL_7:
        v3 = v16;
        goto LABEL_20;
      }
      goto LABEL_19;
    }
    v31 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
    v39 = Mutable;
    if (!Mutable)
    {
LABEL_19:
      v3 = 4294960568;
      goto LABEL_20;
    }
    v30 = Mutable;
    v3 = sub_21A693A8C(v31, *(__CFArray **)(a1 + 56), (uint64_t)"%kO=%O", v33, v34, v35, v36, v37, (uint64_t)theString1);
    CFRelease(v30);
    if (!(_DWORD)v3)
      goto LABEL_17;
  }
LABEL_20:
  if (cf)
    CFRelease(cf);
  return v3;
}

uint64_t sub_21A6F8C60(_QWORD *a1, const __CFString *a2, const void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;
  uint64_t v12;

  if (dword_2550F44C8 <= 800 && (dword_2550F44C8 != -1 || sub_21A69876C((uint64_t)&dword_2550F44C8, 0x320u)))
    sub_21A698FDC((uint64_t)&dword_2550F44C8, (uint64_t)"OSStatus SBSEngine_SetTargetBaseAndSettings(StepByStepContextRef, CFDictionaryRef, CFDictionaryRef)", 800, (uint64_t)" \n", a5, a6, a7, a8, v12);
  result = 4294960591;
  if (a1 && a2)
  {
    if (*a1)
    {
      return 4294960577;
    }
    else
    {
      result = sub_21A6F8D1C((uint64_t)a1, a2);
      if (a3)
      {
        if (!(_DWORD)result)
          return sub_21A6D1880(a1[1], a3);
      }
    }
  }
  return result;
}

uint64_t sub_21A6F8D1C(uint64_t a1, const __CFString *cf)
{
  const __CFString *v3;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  const __CFString *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int *v19;
  const __CFString *v20;
  uint64_t v21;

  v3 = *(const __CFString **)a1;
  if (*(const __CFString **)a1 == cf)
    return 0;
  if (!v3)
    goto LABEL_11;
  v5 = CFEqual(cf, v3);
  if (!v5 || dword_2550F44C8 > 800)
  {
    if (v5)
      return 0;
    if (*(_QWORD *)a1)
      CFRelease(*(CFTypeRef *)a1);
LABEL_11:
    *(_QWORD *)a1 = cf;
    CFRetain(cf);
    v20 = *(const __CFString **)a1;
    v19 = *(int **)(a1 + 8);
    if (v19)
    {
      if (v20)
      {
        result = sub_21A6D1610((uint64_t)v19, v20);
        if ((_DWORD)result)
          return result;
      }
      else
      {
        sub_21A6D12CC(v19);
        *(_QWORD *)(a1 + 8) = 0;
      }
    }
    else if (v20)
    {
      v21 = 0;
      result = sub_21A6D1350(&v21, v20);
      if ((_DWORD)result)
        return result;
      if (!v21)
        return 4294960568;
      *(_QWORD *)(a1 + 8) = v21;
    }
    return 0;
  }
  if (dword_2550F44C8 != -1 || (result = sub_21A69876C((uint64_t)&dword_2550F44C8, 0x320u), (_DWORD)result))
  {
    v14 = sub_21A68EE6C(cf, v6, v7, v8, v9, v10, v11, v12);
    sub_21A698FDC((uint64_t)&dword_2550F44C8, (uint64_t)"OSStatus _SetTargetBase(StepByStepContextRef, CFDictionaryRef)", 800, (uint64_t)"equal SKIPPING update for: %@\n", v15, v16, v17, v18, (uint64_t)v14);
    return 0;
  }
  return result;
}

uint64_t sub_21A6F8E28(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  __CFArray *v9;
  uint64_t result;
  NSObject *v11;
  NSObject *global_queue;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  if (dword_2550F44C8 <= 800 && (dword_2550F44C8 != -1 || sub_21A69876C((uint64_t)&dword_2550F44C8, 0x320u)))
    sub_21A698FDC((uint64_t)&dword_2550F44C8, (uint64_t)"OSStatus SBSEngine_StepByStepAsync(StepByStepContextRef)", 800, (uint64_t)" \n", a5, a6, a7, a8, v24);
  if (!a1)
    return 4294960591;
  if (!a1[4])
    return 4294960591;
  v9 = (__CFArray *)a1[6];
  if (!v9)
    return 4294960591;
  CFArrayRemoveAllValues(v9);
  result = sub_21A6F8F10((uint64_t)a1, 1, 0);
  if (!(_DWORD)result)
  {
    v11 = a1[4];
    global_queue = dispatch_get_global_queue(0, 0);
    dispatch_group_async_f(v11, global_queue, a1, (dispatch_function_t)sub_21A6F5D34);
    result = sub_21A709D98(a1[11], v13, v14, v15, v16, v17, v18, v19);
    if (!(_DWORD)result)
    {
      sub_21A70ACEC(a1[11], 14, 0, 0, v20, v21, v22, v23);
      return 0;
    }
  }
  return result;
}

uint64_t sub_21A6F8F10(uint64_t a1, int a2, uint64_t a3)
{
  const __CFArray *v4;
  const __CFAllocator *v6;
  __CFArray *Mutable;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __CFArray *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  CFIndex Count;

  v4 = *(const __CFArray **)(a1 + 48);
  if (!v4 || !*(_QWORD *)a1)
    return 4294960591;
  if (a2)
  {
    v6 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
    if (Mutable)
    {
      v13 = Mutable;
      v19 = sub_21A693A8C(v6, Mutable, (uint64_t)"%ks=%i", v8, v9, v10, v11, v12, (uint64_t)"kSBSKey_Step");
      if (!(_DWORD)v19)
      {
        v19 = sub_21A693A8C(v6, v13, (uint64_t)"%ks=%i", v14, v15, v16, v17, v18, (uint64_t)"kSBSKey_Mode");
        if (!(_DWORD)v19)
        {
          v19 = sub_21A693A8C(v6, v13, (uint64_t)"%ks=%O", v20, v21, v22, v23, v24, (uint64_t)"kSBSKey_TargetBase");
          if (!(_DWORD)v19)
          {
            if (!a3 || (v19 = sub_21A693A8C(v6, v13, (uint64_t)"%##O", v25, v26, v27, v28, v29, a3), !(_DWORD)v19))
              v19 = sub_21A693A8C(v6, *(__CFArray **)(a1 + 48), (uint64_t)"%O", v25, v26, v27, v28, v29, (uint64_t)v13);
          }
        }
      }
      CFRelease(v13);
    }
    else
    {
      return 4294960568;
    }
  }
  else
  {
    Count = CFArrayGetCount(v4);
    if (Count)
    {
      CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(a1 + 48), Count - 1);
      return 0;
    }
    else
    {
      return 4294960586;
    }
  }
  return v19;
}

uint64_t sub_21A6F9094(const __CFString *a1, __CFArray **a2)
{
  uint64_t v2;
  const __CFAllocator *v5;
  CFMutableDictionaryRef Mutable;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __CFArray *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v49;
  uint64_t v50;

  v2 = 4294960591;
  if (a1 && a2)
  {
    v5 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
    if (!Mutable)
      return 4294960568;
    v12 = Mutable;
    v50 = 0;
    v49 = 0;
    sub_21A693B94(a1, (uint64_t)&v50, (UInt8 *)"%ks", v7, v8, v9, v10, v11, (uint64_t)"kSBSKey_GuestNetwork_On");
    v19 = v18;
    if ((_DWORD)v18)
      goto LABEL_24;
    if (v50)
    {
      v19 = sub_21A693A8C(v5, v12, (uint64_t)"%ks=%O", v13, v14, v15, v16, v17, (uint64_t)"kBSAutoGuessSetupOptionKey_GuestNetwork_On");
      if ((_DWORD)v19)
        goto LABEL_24;
      sub_21A693B94(a1, (uint64_t)&v50, (UInt8 *)"%ks", v20, v21, v22, v23, v24, (uint64_t)"kSBSKey_GuestNetwork_Name");
      if ((_DWORD)v25 != -6727)
      {
        v19 = v25;
        if ((_DWORD)v25)
          goto LABEL_24;
        if (!v50)
          goto LABEL_23;
        v19 = sub_21A693A8C(v5, v12, (uint64_t)"%ks=%O", v26, v27, v28, v29, v30, (uint64_t)"kBSAutoGuessSetupOptionKey_GuestNetwork_Name");
        if ((_DWORD)v19)
          goto LABEL_24;
      }
      sub_21A693B94(a1, (uint64_t)&v49, (UInt8 *)"%ks:int", v26, v27, v28, v29, v30, (uint64_t)"kSBSKey_GuestNetwork_Security");
      v2 = v31;
      if ((_DWORD)v31 == -6727)
      {
LABEL_16:
        *a2 = v12;
        return v2;
      }
      if ((_DWORD)v31)
      {
        v19 = v31;
        goto LABEL_24;
      }
      if (v50)
      {
        v19 = sub_21A693A8C(v5, v12, (uint64_t)"%ks=%i", v32, v33, v34, v35, v36, (uint64_t)"kBSAutoGuessSetupOptionKey_GuestNetwork_Security");
        if ((_DWORD)v19)
          goto LABEL_24;
        if (v49 == 1)
          goto LABEL_16;
        sub_21A693B94(a1, (uint64_t)&v50, (UInt8 *)"%ks", v37, v38, v39, v40, v41, (uint64_t)"kSBSKey_GuestNetwork_Password");
        v19 = v47;
        if ((_DWORD)v47)
        {
LABEL_24:
          CFRelease(v12);
          return v19;
        }
        if (v50)
        {
          v19 = sub_21A693A8C(v5, v12, (uint64_t)"%ks=%O", v42, v43, v44, v45, v46, (uint64_t)"kBSAutoGuessSetupOptionKey_GuestNetwork_Password");
          if (!(_DWORD)v19)
            goto LABEL_16;
          goto LABEL_24;
        }
      }
    }
LABEL_23:
    v19 = 4294960568;
    goto LABEL_24;
  }
  return v2;
}

uint64_t sub_21A6F92CC(const __CFString *a1, __CFArray **a2, __CFArray **a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  const __CFAllocator *v31;
  __CFArray *Mutable;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __CFArray *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  __CFArray *v54;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  __CFArray *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  CFMutableDictionaryRef v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  CFMutableDictionaryRef v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  const __CFString *v254;
  int v255;
  CFTypeRef cf;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  const __CFString *v260;
  int v261;

  v8 = 4294960591;
  if (a2)
  {
    if (a3)
    {
      v261 = 0;
      v260 = 0;
      v258 = 0;
      v259 = 0;
      v257 = 0;
      sub_21A693B94(a1, (uint64_t)&v261, (UInt8 *)"%ks:int", a4, a5, a6, a7, a8, (uint64_t)"kSBSKey_Result_ConfigurationChoice");
      v8 = v17;
      if (!(_DWORD)v17)
      {
        sub_21A693B94(a1, (uint64_t)&v260, (UInt8 *)"%ks", v12, v13, v14, v15, v16, (uint64_t)"kSBSKey_Result_ConfigurationOptions");
        v8 = v23;
        if (!(_DWORD)v23)
        {
          if (!v260)
            return 4294960568;
          sub_21A693B94(a1, (uint64_t)&v259, (UInt8 *)"%ks", v18, v19, v20, v21, v22, (uint64_t)"kSBSKey_Result_TargetBase");
          v8 = v29;
          if ((_DWORD)v29)
            return v8;
          if (!v259)
            return 4294960568;
          sub_21A693B94(a1, (uint64_t)&v258, (UInt8 *)"%ks", v24, v25, v26, v27, v28, (uint64_t)"kSBSKey_Result_TargetBaseSettings");
          v8 = v30;
          if ((_DWORD)v30)
            return v8;
          if (!v258)
            return 4294960568;
          v31 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
          Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
          if (!Mutable)
            return 4294960568;
          v38 = Mutable;
          v8 = sub_21A693A8C(v31, Mutable, (uint64_t)"%ks=%O", v33, v34, v35, v36, v37, (uint64_t)"BSAutoGuess_UnconfiguredBase");
          if ((_DWORD)v8
            || (v8 = sub_21A693A8C(v31, v38, (uint64_t)"%ks=%O", v39, v40, v41, v42, v43, (uint64_t)"BSAutoGuess_UnconfiguredBaseSettings"), (_DWORD)v8)|| (v8 = sub_21A693A8C(v31, v38, (uint64_t)"%ks=%b", v44, v45, v46, v47, v48,
                       (uint64_t)"kBSAutoGuessSetupOptionKey_RecommendationIsAutomatic"),
                (_DWORD)v8))
          {
LABEL_14:
            v54 = v38;
LABEL_15:
            CFRelease(v54);
            return v8;
          }
          v254 = a1;
          switch(v261)
          {
            case 1:
              cf = 0;
              v255 = 0;
              v61 = CFDictionaryCreateMutable(v31, 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
              if (!v61)
                goto LABEL_110;
              sub_21A693B94(v260, (uint64_t)&v257, (UInt8 *)"%ks", v56, v57, v58, v59, v60, (uint64_t)"kSBSKey_BaseName");
              if ((_DWORD)v62 == -6727)
                goto LABEL_24;
              v8 = v62;
              if ((_DWORD)v62)
                goto LABEL_128;
              if (!v257)
                goto LABEL_110;
              v8 = sub_21A693A8C(v31, v61, (uint64_t)"%ks=%O", v63, v64, v65, v66, v67, (uint64_t)"kBSAutoGuessSetupOptionKey_BaseName");
              if ((_DWORD)v8)
                goto LABEL_128;
LABEL_24:
              sub_21A693B94(v260, (uint64_t)&v257, (UInt8 *)"%ks", v63, v64, v65, v66, v67, (uint64_t)"kSBSKey_BasePassword");
              v8 = v73;
              if ((_DWORD)v73)
                goto LABEL_128;
              if (!v257)
                goto LABEL_110;
              v8 = sub_21A693A8C(v31, v61, (uint64_t)"%ks=%O", v68, v69, v70, v71, v72, (uint64_t)"kBSAutoGuessSetupOptionKey_BasePassword");
              if ((_DWORD)v8)
                goto LABEL_128;
              sub_21A693B94(v260, (uint64_t)&v257, (UInt8 *)"%ks", v74, v75, v76, v77, v78, (uint64_t)"kSBSKey_NetworkName");
              v8 = v84;
              if ((_DWORD)v84)
                goto LABEL_128;
              if (!v257)
                goto LABEL_110;
              v8 = sub_21A693A8C(v31, v61, (uint64_t)"%ks=%O", v79, v80, v81, v82, v83, (uint64_t)"kBSAutoGuessSetupOptionKey_NetworkName");
              if ((_DWORD)v8)
                goto LABEL_128;
              sub_21A693B94(v260, (uint64_t)&v257, (UInt8 *)"%ks", v85, v86, v87, v88, v89, (uint64_t)"kSBSKey_NetworkPassword");
              v8 = v95;
              if ((_DWORD)v95)
                goto LABEL_128;
              if (!v257)
                goto LABEL_110;
              v8 = sub_21A693A8C(v31, v61, (uint64_t)"%ks=%O", v90, v91, v92, v93, v94, (uint64_t)"kBSAutoGuessSetupOptionKey_NetworkPassword");
              if ((_DWORD)v8)
                goto LABEL_128;
              v96 = sub_21A6F9094(v260, (__CFArray **)&cf);
              if ((_DWORD)v96 == -6727)
                goto LABEL_39;
              v8 = v96;
              if ((_DWORD)v96)
                goto LABEL_128;
              if (!cf)
                goto LABEL_110;
              v8 = sub_21A693A8C(v31, v61, (uint64_t)"%k##O", v97, v98, v99, v100, v101, (uint64_t)cf);
              if (cf)
              {
                CFRelease(cf);
                cf = 0;
              }
              if ((_DWORD)v8)
                goto LABEL_128;
LABEL_39:
              sub_21A693B94(v260, (uint64_t)&v257, (UInt8 *)"%ks", v97, v98, v99, v100, v101, (uint64_t)"kSBSKey_DiskSharing_Password");
              if ((_DWORD)v102 == -6727)
                goto LABEL_43;
              v8 = v102;
              if ((_DWORD)v102)
                goto LABEL_128;
              if (!v257)
                goto LABEL_110;
              v8 = sub_21A693A8C(v31, v61, (uint64_t)"%ks=%O", v103, v104, v105, v106, v107, (uint64_t)"kBSAutoGuessSetupOptionKey_DiskSharing_Password");
              if ((_DWORD)v8)
                goto LABEL_128;
LABEL_43:
              sub_21A693B94(v260, (uint64_t)&v255, (UInt8 *)"%ks:int", v103, v104, v105, v106, v107, (uint64_t)"kSBSKey_SelectorChoice");
              if ((_DWORD)v108 == -6727)
                goto LABEL_59;
              v8 = v108;
              if ((_DWORD)v108)
                goto LABEL_128;
              if ((v255 - 101) > 1)
                goto LABEL_97;
              sub_21A693B94(v254, (uint64_t)&v257, (UInt8 *)"%ks", v109, v110, v111, v112, v113, (uint64_t)"kSBSKey_Result_SourceBase");
              v8 = v119;
              if ((_DWORD)v119)
                goto LABEL_128;
              if (!v257)
                goto LABEL_110;
              v8 = sub_21A693A8C(v31, v38, (uint64_t)"%ks=%O", v114, v115, v116, v117, v118, (uint64_t)"BSAutoGuess_SourceBase");
              if (!(_DWORD)v8)
                goto LABEL_59;
              goto LABEL_128;
            case 2:
              v120 = CFDictionaryCreateMutable(v31, 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
              if (!v120)
                goto LABEL_98;
              v61 = v120;
              sub_21A693B94(v260, (uint64_t)&v257, (UInt8 *)"%ks", v121, v122, v123, v124, v125, (uint64_t)"kSBSKey_BaseName");
              if ((_DWORD)v126 == -6727)
                goto LABEL_56;
              v8 = v126;
              if ((_DWORD)v126)
                goto LABEL_128;
              if (!v257)
                goto LABEL_127;
              v132 = sub_21A693A8C(v31, v61, (uint64_t)"%ks=%O", v127, v128, v129, v130, v131, (uint64_t)"kBSAutoGuessSetupOptionKey_BaseName");
              if ((_DWORD)v132)
                goto LABEL_82;
LABEL_56:
              sub_21A693B94(v254, (uint64_t)&v257, (UInt8 *)"%ks", v127, v128, v129, v130, v131, (uint64_t)"kSBSKey_Result_SourceBase");
              if ((_DWORD)v132)
                goto LABEL_82;
              if (!v257)
                goto LABEL_127;
              v132 = sub_21A693A8C(v31, v38, (uint64_t)"%ks=%O", v133, v134, v135, v136, v137, (uint64_t)"BSAutoGuess_SourceBase");
              if (!(_DWORD)v132)
                goto LABEL_59;
              goto LABEL_82;
            case 3:
              LODWORD(cf) = 0;
              v61 = CFDictionaryCreateMutable(v31, 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
              if (!v61)
                goto LABEL_110;
              sub_21A693B94(v260, (uint64_t)&v257, (UInt8 *)"%ks", v138, v139, v140, v141, v142, (uint64_t)"kSBSKey_BaseName");
              if ((_DWORD)v143 == -6727)
                goto LABEL_66;
              v8 = v143;
              if ((_DWORD)v143)
                goto LABEL_128;
              if (!v257)
                goto LABEL_110;
              v8 = sub_21A693A8C(v31, v61, (uint64_t)"%ks=%O", v144, v145, v146, v147, v148, (uint64_t)"kBSAutoGuessSetupOptionKey_BaseName");
              if ((_DWORD)v8)
                goto LABEL_128;
LABEL_66:
              sub_21A693B94(v260, (uint64_t)&cf, (UInt8 *)"%ks:int", v144, v145, v146, v147, v148, (uint64_t)"kSBSKey_SelectorChoice");
              if ((_DWORD)v149 == -6727)
                goto LABEL_71;
              v8 = v149;
              if ((_DWORD)v149)
                goto LABEL_128;
              if (!v257)
                goto LABEL_110;
              if ((_DWORD)cf == 212)
              {
                v8 = sub_21A693A8C(v31, v61, (uint64_t)"%ks=%b", v150, v151, v152, v153, v154, (uint64_t)"kBSAutoGuessSetupOptionKey_ExtendOption_JoinApple");
                if ((_DWORD)v8)
                  goto LABEL_128;
              }
LABEL_71:
              sub_21A693B94(v254, (uint64_t)&v257, (UInt8 *)"%ks", v150, v151, v152, v153, v154, (uint64_t)"kSBSKey_Result_SourceBase");
              v8 = v160;
              if ((_DWORD)v160)
                goto LABEL_128;
              if (!v257)
                goto LABEL_110;
              v8 = sub_21A693A8C(v31, v38, (uint64_t)"%ks=%O", v155, v156, v157, v158, v159, (uint64_t)"BSAutoGuess_SourceBase");
              if ((_DWORD)v8)
                goto LABEL_128;
              v8 = sub_21A693A8C(v31, v38, (uint64_t)"%ks=%s", v161, v162, v163, v164, v165, (uint64_t)"BSAutoGuess_Recommendation");
              if (!(_DWORD)v8)
                goto LABEL_97;
              goto LABEL_111;
            case 4:
              v166 = CFDictionaryCreateMutable(v31, 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
              if (!v166)
              {
LABEL_98:
                v8 = 4294960568;
                goto LABEL_14;
              }
              v61 = v166;
              sub_21A693B94(v260, (uint64_t)&v257, (UInt8 *)"%ks", v167, v168, v169, v170, v171, (uint64_t)"kSBSKey_BaseName");
              if ((_DWORD)v172 == -6727)
                goto LABEL_81;
              v8 = v172;
              if ((_DWORD)v172)
                goto LABEL_128;
              if (!v257)
                goto LABEL_127;
              v132 = sub_21A693A8C(v31, v61, (uint64_t)"%ks=%O", v173, v174, v175, v176, v177, (uint64_t)"kBSAutoGuessSetupOptionKey_BaseName");
              if ((_DWORD)v132)
                goto LABEL_82;
LABEL_81:
              sub_21A693B94(v260, (uint64_t)&v257, (UInt8 *)"%ks", v173, v174, v175, v176, v177, (uint64_t)"kSBSKey_BasePassword");
              if ((_DWORD)v132)
                goto LABEL_82;
              if (!v257)
                goto LABEL_127;
              v132 = sub_21A693A8C(v31, v61, (uint64_t)"%ks=%O", v178, v179, v180, v181, v182, (uint64_t)"kBSAutoGuessSetupOptionKey_BasePassword");
              if ((_DWORD)v132)
                goto LABEL_82;
              sub_21A693B94(v260, (uint64_t)&v257, (UInt8 *)"%ks", v232, v233, v234, v235, v236, (uint64_t)"kSBSKey_AirPlayPassword");
              if ((_DWORD)v237 == -6727)
                goto LABEL_119;
              v8 = v237;
              if ((_DWORD)v237)
                goto LABEL_128;
              if (!v257)
                goto LABEL_127;
              v132 = sub_21A693A8C(v31, v61, (uint64_t)"%ks=%O", v238, v239, v240, v241, v242, (uint64_t)"kBSAutoGuessSetupOptionKey_AirPlayPassword");
              if ((_DWORD)v132)
                goto LABEL_82;
LABEL_119:
              sub_21A693B94(v254, (uint64_t)&v257, (UInt8 *)"%ks", v238, v239, v240, v241, v242, (uint64_t)"kSBSKey_Result_SourceNetwork");
              if ((_DWORD)v132)
                goto LABEL_82;
              if (!v257)
                goto LABEL_127;
              v132 = sub_21A693A8C(v31, v38, (uint64_t)"%ks=%O", v243, v244, v245, v246, v247, (uint64_t)"BSAutoGuess_SourceNetwork");
              if ((_DWORD)v132)
                goto LABEL_82;
              sub_21A693B94(v260, (uint64_t)&v257, (UInt8 *)"%ks", v248, v249, v250, v251, v252, (uint64_t)"kSBSKey_NetworkPassword");
              if ((_DWORD)v253 == -6727)
                goto LABEL_59;
              v8 = v253;
              if (!(_DWORD)v253)
              {
                if (v257)
                {
                  v132 = sub_21A693A8C(v31, v61, (uint64_t)"%ks=%O", v109, v110, v111, v112, v113, (uint64_t)"kBSAutoGuessSetupOptionKey_NetworkPassword");
                  if ((_DWORD)v132)
                  {
LABEL_82:
                    v8 = v132;
                  }
                  else
                  {
LABEL_59:
                    v8 = sub_21A693A8C(v31, v38, (uint64_t)"%ks=%s", v109, v110, v111, v112, v113, (uint64_t)"BSAutoGuess_Recommendation");
                    if (!(_DWORD)v8)
                      goto LABEL_97;
                  }
                }
                else
                {
LABEL_127:
                  v8 = 4294960568;
                }
              }
LABEL_128:
              CFRelease(v38);
              goto LABEL_129;
            case 5:
              LODWORD(cf) = 0;
              sub_21A693B94(v260, (uint64_t)&v257, (UInt8 *)"%ks", v49, v50, v51, v52, v53, (uint64_t)"kSBSKey_BaseName");
              v61 = 0;
              if ((_DWORD)v183 == -6727)
                goto LABEL_88;
              v8 = v183;
              if ((_DWORD)v183)
                goto LABEL_111;
              if (!v257)
                goto LABEL_109;
              v61 = CFDictionaryCreateMutable(v31, 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
              if (!v61)
                goto LABEL_110;
              v8 = sub_21A693A8C(v31, v61, (uint64_t)"%ks=%O", v189, v190, v191, v192, v193, (uint64_t)"kBSAutoGuessSetupOptionKey_BaseName");
              if ((_DWORD)v8)
                goto LABEL_111;
LABEL_88:
              sub_21A693B94(v254, (uint64_t)&v257, (UInt8 *)"%ks", v184, v185, v186, v187, v188, (uint64_t)"kSBSKey_Result_SourceBase");
              if ((_DWORD)v194)
                goto LABEL_108;
              if (!v257)
                goto LABEL_110;
              v194 = sub_21A693A8C(v31, v38, (uint64_t)"%ks=%O", v195, v196, v197, v198, v199, (uint64_t)"BSAutoGuess_SourceBase");
              if (!(_DWORD)v194)
              {
                sub_21A693B94(v260, (uint64_t)&cf, (UInt8 *)"%ks:int", v200, v201, v202, v203, v204, (uint64_t)"kSBSKey_SelectorChoice");
                if (!(_DWORD)v194)
                  goto LABEL_96;
              }
              goto LABEL_108;
            case 6:
              cf = 0;
              sub_21A693B94(a1, (uint64_t)&cf, (UInt8 *)"%ks", v49, v50, v51, v52, v53, (uint64_t)"kSBSKey_Result_ConfigChangeLogDict");
              if ((_DWORD)v210)
              {
                v8 = v210;
                v61 = 0;
                goto LABEL_111;
              }
              if (cf)
              {
                v61 = CFDictionaryCreateMutable(v31, 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
                if (v61)
                {
                  v194 = sub_21A693A8C(v31, v61, (uint64_t)"%ks=%O", v217, v218, v219, v220, v221, (uint64_t)"kBSAutoGuessSetupOptionKey_ConfigChangeLogDict");
                  if ((_DWORD)v194
                    || (sub_21A693B94(v260, (uint64_t)&v257, (UInt8 *)"%ks", v222, v223, v224, v225, v226, (uint64_t)"kSBSKey_BasePassword"), (_DWORD)v194))
                  {
LABEL_108:
                    v8 = v194;
                    goto LABEL_111;
                  }
                  if (v257)
                  {
                    v194 = sub_21A693A8C(v31, v61, (uint64_t)"%ks=%O", v227, v228, v229, v230, v231, (uint64_t)"kBSAutoGuessSetupOptionKey_BasePassword");
                    if (!(_DWORD)v194)
                    {
LABEL_96:
                      v194 = sub_21A693A8C(v31, v38, (uint64_t)"%ks=%s", v205, v206, v207, v208, v209, (uint64_t)"BSAutoGuess_Recommendation");
                      if (!(_DWORD)v194)
                      {
LABEL_97:
                        v8 = 0;
                        *a2 = v38;
                        *a3 = v61;
                        return v8;
                      }
                    }
                    goto LABEL_108;
                  }
                }
              }
              else
              {
LABEL_109:
                v61 = 0;
              }
LABEL_110:
              v8 = 4294960568;
LABEL_111:
              CFRelease(v38);
              if (v61)
              {
LABEL_129:
                v54 = v61;
                goto LABEL_15;
              }
              break;
            case 7:
              cf = 0;
              sub_21A693B94(a1, (uint64_t)&cf, (UInt8 *)"%ks", v49, v50, v51, v52, v53, (uint64_t)"kSBSKey_Result_ConfigChangeLogDict");
              v61 = 0;
              if ((_DWORD)v211 == -6727)
                goto LABEL_96;
              v8 = v211;
              v61 = CFDictionaryCreateMutable(v31, 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
              if (!v61)
                goto LABEL_110;
              if ((_DWORD)v8)
                goto LABEL_128;
              if (!cf)
                goto LABEL_110;
              v8 = sub_21A693A8C(v31, v61, (uint64_t)"%ks=%O", v212, v213, v214, v215, v216, (uint64_t)"kBSAutoGuessSetupOptionKey_ConfigChangeLogDict");
              if (!(_DWORD)v8)
                goto LABEL_96;
              goto LABEL_128;
            default:
              v8 = 4294960591;
              goto LABEL_14;
          }
        }
      }
    }
  }
  return v8;
}

uint64_t sub_21A6F9F74(const __CFString *a1, const __CFArray *a2, _QWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  CFNumberRef v73;
  uint64_t v74;
  const __CFAllocator *v75;
  const __CFArray *v76;
  const __CFArray *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  CFNumberRef v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  int v95;
  CFNumberRef v96;
  int valuePtr;
  const __CFArray *v99;
  __CFString *Mutable;
  uint64_t v101;
  void *v102;
  uint64_t v103;
  uint64_t v104;
  CFStringRef v105;
  CFTypeRef v106;
  void *values[2];

  values[1] = *(void **)MEMORY[0x24BDAC8D0];
  v106 = 0;
  valuePtr = 0;
  v8 = 4294960591;
  if (a1)
  {
    if (a3)
    {
      v104 = 0;
      v105 = 0;
      v102 = 0;
      v103 = 0;
      Mutable = 0;
      v101 = 0;
      v99 = 0;
      sub_21A693B94(a1, (uint64_t)&v105, (UInt8 *)"%ks", a4, a5, a6, a7, a8, (uint64_t)"BSAutoGuess_Recommendation");
      v8 = v17;
      if (!(_DWORD)v17)
      {
        if (!v105)
          return 4294960568;
        v103 = 0;
        v104 = 0;
        sub_21A693B94(a1, (uint64_t)&v104, (UInt8 *)"%ks", v12, v13, v14, v15, v16, (uint64_t)"BSAutoGuess_UnconfiguredBase");
        if ((_DWORD)v18 == -6727)
        {
          sub_21A693B94(a1, (uint64_t)&v103, (UInt8 *)"%ks", v19, v20, v21, v22, v23, (uint64_t)"BSAutoGuess_UnconfiguredNetwork");
          v8 = v24;
          if ((_DWORD)v24)
            return v8;
          if (!v103)
            return 4294960568;
        }
        else
        {
          v8 = v18;
          if ((_DWORD)v18)
            return v8;
          if (!v104)
            return 4294960568;
        }
        if (CFStringCompare(v105, CFSTR("BSSetupRecommend_OfferExtendWirelessly"), 0))
        {
          if (CFStringCompare(v105, CFSTR("BSSetupRecommend_AskUserChooseBaseWireless"), 0))
          {
            if (CFStringCompare(v105, CFSTR("BSSetupRecommend_OfferExtendOverEthernet"), 0))
            {
              if (CFStringCompare(v105, CFSTR("BSSetupRecommend_AskUserChooseBaseWired"), 0))
              {
                if (CFStringCompare(v105, CFSTR("BSSetupRecommend_OfferCreate"), 0) == kCFCompareEqualTo)
                {
                  v73 = 0;
                  goto LABEL_41;
                }
                if (CFStringCompare(v105, CFSTR("BSSetupRecommend_OfferJoinNetwork"), 0))
                {
                  if (CFStringCompare(v105, CFSTR("BSSetupRecommend_AskUserChooseNetworkToJoin"), 0))
                  {
                    if (CFStringCompare(v105, CFSTR("BSSetupRecommend_OfferReplace"), 0))
                    {
                      if (CFStringCompare(v105, CFSTR("BSSetupRecommend_OfferReplaceSourceIsUnconfigurable"), 0))
                      {
                        CFStringCompare(v105, CFSTR("BSSetupRecommend_NoNetworkToJoin"), 0);
                        return 4294960561;
                      }
                      LODWORD(values[0]) = 0;
                      sub_21A693B94(a1, (uint64_t)&v102, (UInt8 *)"%ks", v65, v66, v67, v68, v69, (uint64_t)"BSAutoGuess_SourceBase");
                      v8 = v93;
                      if ((_DWORD)v93)
                        return v8;
                      if (!v102)
                        return 4294960568;
                      sub_21A693B94(a1, (uint64_t)values, (UInt8 *)"%ks:int", v88, v89, v90, v91, v92, (uint64_t)"kBSAutoGuessSetupOptionKey_NoConfigureReason");
                      v8 = v94;
                      if ((_DWORD)v94)
                        return v8;
                      if (LODWORD(values[0]) == 2)
                      {
                        v95 = 102;
                      }
                      else
                      {
                        if (LODWORD(values[0]) != 1)
                          goto LABEL_71;
                        v95 = 101;
                      }
                      valuePtr = v95;
LABEL_71:
                      v96 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], kCFNumberSInt32Type, &valuePtr);
                      if (v96)
                      {
                        v73 = v96;
                        goto LABEL_41;
                      }
                      return 4294960568;
                    }
                    sub_21A693B94(a1, (uint64_t)&v102, (UInt8 *)"%ks", v60, v61, v62, v63, v64, (uint64_t)"BSAutoGuess_SourceBase");
                    v8 = v86;
                    if ((_DWORD)v86)
                      return v8;
                    if (!v102)
                      return 4294960568;
                    valuePtr = 313;
                    v87 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], kCFNumberSInt32Type, &valuePtr);
                    if (!v87)
                      return 4294960568;
                    v73 = v87;
LABEL_41:
                    v8 = sub_21A692FEC((const __CFAllocator *)*MEMORY[0x24BDBD240], &v106, (uint64_t)"{%ks=%i%ks=%i%ks=%O%ks=%O%ks=%O%ks=%O%ks=%O%ks=%O}", v45, v46, v47, v48, v49, (uint64_t)"kSBSKey_Step");
                    if ((_DWORD)v8)
                    {
                      if (!v106)
                        goto LABEL_47;
                      CFRelease(v106);
                    }
                    else
                    {
                      if (!v106)
                      {
                        v8 = 4294960568;
                        if (!v73)
                          return v8;
                        goto LABEL_48;
                      }
                      v8 = 0;
                      *a3 = v106;
                    }
                    v106 = 0;
LABEL_47:
                    if (!v73)
                      return v8;
LABEL_48:
                    CFRelease(v73);
                    return v8;
                  }
                  sub_21A693B94(a1, (uint64_t)&v99, (UInt8 *)"%ks", v55, v56, v57, v58, v59, (uint64_t)"BSAutoGuess_AskUserList");
                }
                else
                {
                  sub_21A693B94(a1, (uint64_t)&v101, (UInt8 *)"%ks", v50, v51, v52, v53, v54, (uint64_t)"BSAutoGuess_SourceNetwork");
                  v8 = v84;
                  if ((_DWORD)v84)
                    return v8;
                  if (!v101)
                    return 4294960568;
                  sub_21A693B94(a1, (uint64_t)&v99, (UInt8 *)"%ks", v79, v80, v81, v82, v83, (uint64_t)"BSAutoGuess_AskUserList");
                  if ((_DWORD)v85 == -6727)
                  {
LABEL_58:
                    v73 = 0;
                    goto LABEL_41;
                  }
                }
                v8 = v85;
                if ((_DWORD)v85)
                  return v8;
                if (!v99)
                  return 4294960568;
                goto LABEL_58;
              }
              sub_21A693B94(a1, (uint64_t)&v99, (UInt8 *)"%ks", v40, v41, v42, v43, v44, (uint64_t)"BSAutoGuess_AskUserList");
              v8 = v78;
              if ((_DWORD)v78)
                return v8;
              if (!v99)
                return 4294960568;
            }
            else
            {
              sub_21A693B94(a1, (uint64_t)&v102, (UInt8 *)"%ks", v35, v36, v37, v38, v39, (uint64_t)"BSAutoGuess_SourceBase");
              v8 = v74;
              if ((_DWORD)v74)
                return v8;
              if (!v102)
                return 4294960568;
            }
            v73 = 0;
            goto LABEL_41;
          }
          sub_21A693B94(a1, (uint64_t)&v99, (UInt8 *)"%ks", v30, v31, v32, v33, v34, (uint64_t)"BSAutoGuess_AskUserList");
          v8 = v71;
          if ((_DWORD)v71)
            return v8;
          if (!v99)
            return 4294960568;
          v72 = sub_21A6D0D74(a2, v99, &Mutable);
          v73 = 0;
          if ((_DWORD)v72 == -6727)
            goto LABEL_41;
          v8 = v72;
          if (!(_DWORD)v72)
            goto LABEL_41;
        }
        else
        {
          sub_21A693B94(a1, (uint64_t)&v102, (UInt8 *)"%ks", v25, v26, v27, v28, v29, (uint64_t)"BSAutoGuess_SourceBase");
          if ((_DWORD)v70)
            return v70;
          if (!v102)
            return 4294960568;
          v75 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
          Mutable = (__CFString *)CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
          if (!Mutable)
            return 4294960568;
          values[0] = v102;
          v76 = CFArrayCreate(v75, (const void **)values, 1, MEMORY[0x24BDBD690]);
          if (!v76)
            return 4294960568;
          v77 = v76;
          v8 = sub_21A6D0D74(a2, v76, &Mutable);
          CFRelease(v77);
          if (!(_DWORD)v8 || (_DWORD)v8 == -6727)
          {
            v73 = 0;
            goto LABEL_41;
          }
        }
      }
    }
  }
  return v8;
}

const __CFArray *sub_21A6FA5C0(uint64_t a1)
{
  const __CFArray *result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;

  v8 = 0;
  result = *(const __CFArray **)(a1 + 48);
  if (result)
  {
    result = (const __CFArray *)CFArrayGetCount(result);
    if (result)
    {
      sub_21A693B94(*(const __CFString **)(a1 + 48), (uint64_t)&v8, (UInt8 *)"[*].%ks:int", v3, v4, v5, v6, v7, (uint64_t)result - 1);
      return (const __CFArray *)v8;
    }
  }
  return result;
}

uint64_t sub_21A6FA624(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __CFArray *v9;
  __CFArray *Mutable;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  const __CFAllocator *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  CFTypeRef cf;
  __CFArray *v46;
  unsigned int v47;
  __CFString *v48;

  v46 = 0;
  cf = 0;
  if (!*(_QWORD *)(a1 + 48))
    return 4294960591;
  v48 = 0;
  v47 = 0;
  if (!*(_QWORD *)a1 || !*(_QWORD *)(a1 + 8))
    goto LABEL_26;
  sub_21A6FAD28(a1, &v48);
  if (!(_DWORD)v2)
  {
    if (!v48)
    {
      v9 = 0;
      Mutable = 0;
      goto LABEL_37;
    }
    sub_21A693B94(v48, (uint64_t)&v47, (UInt8 *)"%kO:int", v3, v4, v5, v6, v7, (uint64_t)CFSTR("kSBSKey_Step"));
    if ((_DWORD)v2)
      goto LABEL_5;
    if (v47 == 14 || v47 == 2)
    {
      v9 = sub_21A6D4740(*(__CFArray **)(a1 + 8));
      if (!v9
        || (v16 = sub_21A693A8C((const __CFAllocator *)*MEMORY[0x24BDBD240], (__CFArray *)v48, (uint64_t)"%ks=%O", v11, v12, v13, v14, v15, (uint64_t)"kSBSKey_TargetBaseFeatures"), !(_DWORD)v16))
      {
        v17 = sub_21A6FADB0(a1, v47, (uint64_t)v48, (CFTypeRef *)&v46, v12, v13, v14, v15);
        if ((_DWORD)v17 == -6769)
        {
          v16 = sub_21A6F8F10(a1, 0, 0);
        }
        else
        {
          v8 = v17;
          if ((_DWORD)v17 == -6723)
            goto LABEL_6;
          Mutable = 0;
          v44 = 0;
          v43 = 0;
          if ((_DWORD)v17)
            goto LABEL_27;
          if (!v46)
            goto LABEL_40;
          v16 = sub_21A6D4710(*(_QWORD *)(a1 + 8), (CFMutableDictionaryRef *)&cf);
          if (!(_DWORD)v16)
          {
            if (cf)
            {
              v18 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
              Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
              if (Mutable)
              {
                sub_21A693B94(v48, (uint64_t)&v43, (UInt8 *)"%ks:int", v19, v20, v21, v22, v23, (uint64_t)"kSBSKey_SelectorChoice");
                if ((_DWORD)v24 != -6727)
                {
                  v8 = v24;
                  if ((_DWORD)v24)
                    goto LABEL_27;
                  v30 = sub_21A693A8C(v18, v46, (uint64_t)"%ks=%i", v25, v26, v27, v28, v29, (uint64_t)"kSBSKey_SelectorChoice");
                  if ((_DWORD)v30)
                    goto LABEL_25;
                }
                v30 = sub_21A693A8C(v18, Mutable, (uint64_t)"%ks=%i%ks=%O%ks=%O%ks=%O", v25, v26, v27, v28, v29, (uint64_t)"kSBSKey_Result_ConfigurationChoice");
                if ((_DWORD)v30)
                {
LABEL_25:
                  v8 = v30;
                  goto LABEL_27;
                }
                sub_21A693B94(v48, (uint64_t)&v44, (UInt8 *)"%ks", v31, v32, v33, v34, v35, (uint64_t)"kSBSKey_SourceBase");
                if ((_DWORD)v37 == -6727)
                {
LABEL_45:
                  v8 = 0;
                  *(_QWORD *)(a1 + 72) = Mutable;
                  goto LABEL_6;
                }
                v8 = v37;
                if ((_DWORD)v37)
                  goto LABEL_27;
                if (v44)
                {
                  v30 = sub_21A693A8C(v18, Mutable, (uint64_t)"%ks=%O", v38, v39, v40, v41, v42, (uint64_t)"kSBSKey_Result_SourceBase");
                  if ((_DWORD)v30)
                    goto LABEL_25;
                  goto LABEL_45;
                }
              }
LABEL_37:
              v8 = 4294960568;
              goto LABEL_27;
            }
LABEL_40:
            Mutable = 0;
            v8 = 4294960569;
            goto LABEL_27;
          }
        }
      }
      v8 = v16;
      goto LABEL_6;
    }
LABEL_26:
    v9 = 0;
    Mutable = 0;
    v8 = 4294960591;
    goto LABEL_27;
  }
LABEL_5:
  v8 = v2;
  v9 = 0;
LABEL_6:
  Mutable = 0;
LABEL_27:
  if (cf)
  {
    CFRelease(cf);
    cf = 0;
  }
  if (v46)
  {
    CFRelease(v46);
    v46 = 0;
  }
  if (Mutable)
    CFRelease(Mutable);
  if (v9)
    CFRelease(v9);
  return v8;
}

uint64_t sub_21A6FA94C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const __CFAllocator *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  CFTypeRef v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  CFIndex Count;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  const char *v52;
  const __CFArray *v54;
  char *v55;
  CFTypeRef cf;
  CFArrayRef theArray;
  char *v58;
  int v59;
  const __CFString *ValueAtIndex;
  unsigned int v61;
  __CFString *v62;

  v62 = 0;
  v61 = 0;
  ValueAtIndex = 0;
  v59 = 0;
  theArray = 0;
  v58 = 0;
  cf = 0;
  if (!*(_QWORD *)(a1 + 48))
  {
    v8 = 4294960591;
    goto LABEL_50;
  }
  if (!*(_QWORD *)a1 || !*(_QWORD *)(a1 + 8))
    goto LABEL_45;
  sub_21A6FAD28(a1, &v62);
  v8 = v7;
  if ((_DWORD)v7)
    goto LABEL_46;
  if (!v62)
    goto LABEL_53;
  sub_21A693B94(v62, (uint64_t)&v61, (UInt8 *)"%ks:int", v2, v3, v4, v5, v6, (uint64_t)"kSBSKey_Step");
  v8 = v14;
  if ((_DWORD)v14)
    goto LABEL_46;
  if ((v61 & 0xFFFFFFF7) != 5)
    goto LABEL_45;
  v15 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  v8 = sub_21A693A8C((const __CFAllocator *)*MEMORY[0x24BDBD240], (__CFArray *)v62, (uint64_t)"%ks=%b", v9, v10, v11, v12, v13, (uint64_t)"kSBSKey_CannotBeBackedInto");
  if ((_DWORD)v8)
    goto LABEL_46;
  v8 = sub_21A70E760(*(_QWORD *)(a1 + 88), *(const __CFString **)a1, 0, 0, 0, 0, &ValueAtIndex, v16);
  if ((_DWORD)v8)
    goto LABEL_46;
  if (ValueAtIndex)
  {
    v8 = sub_21A6F8D1C(a1, ValueAtIndex);
    if (ValueAtIndex)
    {
      CFRelease(ValueAtIndex);
      ValueAtIndex = 0;
    }
    if ((_DWORD)v8)
      goto LABEL_46;
  }
  v8 = sub_21A6D523C(*(_QWORD *)(a1 + 8), 1937327724);
  if ((_DWORD)v8)
    goto LABEL_46;
  v8 = sub_21A6D4478(*(_QWORD *)(a1 + 8), 1937327724, &v59);
  if ((_DWORD)v8)
    goto LABEL_46;
  if ((v59 & 0x200) == 0)
  {
    v55 = 0;
    v8 = sub_21A709AF8(*(_QWORD *)(a1 + 88), &v58);
    if ((_DWORD)v8)
      goto LABEL_46;
    if (!v58)
      goto LABEL_53;
    v8 = sub_21A70EB58(v58, *(_QWORD *)(a1 + 8), 512, (uint64_t *)&v55, v17, v18, v19, v20);
    if ((_DWORD)v8)
      goto LABEL_46;
    if (!v55)
      goto LABEL_53;
    sub_21A6FAE98((uint64_t)v58, v61, (uint64_t)v62, 0, v21, v22, v23, v24);
    v8 = v25;
    sub_21A6D1988(*(_QWORD *)(a1 + 8));
    sub_21A70EA78(v55, v26, v27, v28, v29, v30, v31, v32);
    if ((_DWORD)v8 == -6769)
    {
LABEL_28:
      v42 = 0;
      v43 = 0;
LABEL_33:
      v8 = sub_21A6F8F10(a1, v43, (uint64_t)v42);
      goto LABEL_46;
    }
    if ((_DWORD)v8)
      goto LABEL_46;
    v8 = sub_21A6FB4CC(a1, v33, v34, v35, v36, v37, v38, v39);
    if ((_DWORD)v8)
      goto LABEL_46;
  }
  if (v61 != 5)
  {
    v43 = 14;
    goto LABEL_31;
  }
  v55 = 0;
  v40 = sub_21A6FB5C8(a1, (CFArrayRef *)&v55);
  if ((v40 & 0xFFFFFFF7) == 0xFFFFE5B1)
    goto LABEL_26;
  v8 = v40;
  v54 = 0;
  if ((_DWORD)v40)
    goto LABEL_46;
  if (!v55)
  {
LABEL_53:
    v8 = 4294960568;
    goto LABEL_46;
  }
  v44 = sub_21A6FB744(a1, 0, &v54);
  if ((_DWORD)v44 != -6727)
  {
    v8 = v44;
    if ((_DWORD)v44)
      goto LABEL_46;
    if (!v54)
      goto LABEL_53;
    v45 = sub_21A6FB850((const __CFArray *)v55, v54, &theArray);
    if ((_DWORD)v45 != -6727)
    {
      v8 = v45;
      if ((_DWORD)v45)
        goto LABEL_46;
      if (theArray)
      {
        Count = CFArrayGetCount(theArray);
        if (Count)
        {
          if (Count < 2)
          {
            ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(theArray, 0);
            if (!ValueAtIndex)
              goto LABEL_60;
            v52 = "kSBSKey_SourceBase";
          }
          else
          {
            v52 = "kSBSKey_BrowseRecordList";
          }
          v8 = sub_21A692FEC(v15, &cf, (uint64_t)"{%ks=%O}", v47, v48, v49, v50, v51, (uint64_t)v52);
          if ((_DWORD)v8)
            goto LABEL_46;
          if (cf)
          {
            v43 = 6;
LABEL_31:
            v8 = sub_21A6F8F10(a1, 0, 0);
            if (!(_DWORD)v8)
            {
              v42 = cf;
              goto LABEL_33;
            }
            goto LABEL_46;
          }
LABEL_60:
          v8 = 4294960569;
          goto LABEL_46;
        }
LABEL_45:
        v8 = 4294960591;
        goto LABEL_46;
      }
      goto LABEL_53;
    }
  }
LABEL_26:
  v41 = sub_21A70D6D4(*(_QWORD *)(a1 + 88), (uint64_t)CFSTR("kAskUserWarning_Prompt"), 0, 0, (uint64_t)CFSTR("kAskUserWarning_NoBaseStationsFound_OnEthernet"), 0, 0, 0, 0);
  if ((_DWORD)v41 == -6723)
  {
    v8 = 4294960573;
    goto LABEL_46;
  }
  v8 = v41;
  if (!(_DWORD)v41)
    goto LABEL_28;
LABEL_46:
  if (cf)
  {
    CFRelease(cf);
    cf = 0;
  }
  if (theArray)
  {
    CFRelease(theArray);
    theArray = 0;
  }
LABEL_50:
  if (v58)
    sub_21A709C24(v58);
  return v8;
}

void sub_21A6FAD28(uint64_t a1, _QWORD *a2)
{
  CFIndex Count;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const __CFString *v10;
  int v11;
  uint64_t v12;

  if (a2)
  {
    if (*(_QWORD *)(a1 + 48))
    {
      Count = CFArrayGetCount(*(CFArrayRef *)(a1 + 48));
      if (Count)
      {
        v10 = *(const __CFString **)(a1 + 48);
        v12 = 0;
        sub_21A693B94(v10, (uint64_t)&v12, (UInt8 *)"[*]", v5, v6, v7, v8, v9, Count - 1);
        if (!v11)
        {
          if (v12)
            *a2 = v12;
        }
      }
    }
  }
}

uint64_t sub_21A6FADB0(uint64_t a1, uint64_t a2, uint64_t a3, CFTypeRef *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  if (dword_2550F44C8 <= 800 && (dword_2550F44C8 != -1 || sub_21A69876C((uint64_t)&dword_2550F44C8, 0x320u)))
    sub_21A698FDC((uint64_t)&dword_2550F44C8, (uint64_t)"OSStatus _CopyAndWaitResultsDictFromStep(StepByStepContextRef, eSBSStep, CFDictionaryRef, CFDictionaryRef *)", 800, (uint64_t)" \n", a5, a6, a7, a8, v20);
  v21 = 0;
  v16 = sub_21A709AF8(*(_QWORD *)(a1 + 88), &v21);
  v17 = (char *)v21;
  if (!(_DWORD)v16)
  {
    if (!v21)
      return 4294960568;
    if (*(_QWORD *)(v21 + 24))
    {
      sub_21A6FAE98(v21, a2, a3, a4, v12, v13, v14, v15);
      v16 = v19;
      v17 = (char *)v21;
      if (!v21)
        return v16;
    }
    else
    {
      v16 = 4294960591;
    }
    goto LABEL_7;
  }
  if (v21)
LABEL_7:
    sub_21A709C24(v17);
  return v16;
}

void sub_21A6FAE98(uint64_t a1, uint64_t a2, uint64_t a3, CFTypeRef *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  CFTypeRef v31;
  uint64_t v32;
  CFTypeRef cf;

  if (dword_2550F44C8 <= 800 && (dword_2550F44C8 != -1 || sub_21A69876C((uint64_t)&dword_2550F44C8, 0x320u)))
    sub_21A698FDC((uint64_t)&dword_2550F44C8, (uint64_t)"OSStatus _CopyAndWaitResultsDictFromStepWithCallbackContext(AssistantCallbackContextRef, eSBSStep, CFDictionaryRef, CFDictionaryRef *)", 800, (uint64_t)" \n", a5, a6, a7, a8, v32);
  if (a1
    && *(_DWORD *)a1 == 1634561902
    && !sub_21A693A8C((const __CFAllocator *)*MEMORY[0x24BDBD240], *(__CFArray **)(a1 + 24), (uint64_t)"%ks=%i", (uint64_t)a4, a5, a6, a7, a8, (uint64_t)"kBSAssistantCallbackKey_SBS_SBSStep")&& (!a3|| !sub_21A70B204(a1, (uint64_t)CFSTR("kBSAssistantCallbackKey_SBS_SBSParamDict"), a3, v12, v13, v14, v15, v16))
    && !sub_21A70A23C((_QWORD *)a1, 1, v11, v12, v13, v14, v15, v16))
  {
    v24 = sub_21A70A598(a1, v17, v18, v19, v20, v21, v22, v23);
    if (!*(_DWORD *)(a1 + 32) && !v24)
    {
      if (a4)
      {
        if (sub_21A70B1D4(a1, CFSTR("kBSAssistantCallbackKey_SBS_SBSOptionsDict")))
        {
          cf = 0;
          sub_21A70B0B0(a1, (uint64_t)CFSTR("kBSAssistantCallbackKey_SBS_SBSOptionsDict"), &cf, v25, v26, v27, v28, v29);
          if (!v30)
          {
            v31 = cf;
            if (cf)
            {
              *a4 = cf;
              CFRetain(v31);
            }
          }
        }
      }
    }
  }
}

uint64_t sub_21A6FB014(uint64_t a1, CFTypeRef *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  CFTypeRef v17;
  const __CFAllocator *v18;
  CFIndex Count;
  __CFArray *MutableCopy;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __CFArray *v26;
  uint64_t v27;
  int v29[2];
  CFTypeRef v30;
  CFTypeRef cf;

  v30 = 0;
  cf = 0;
  if (!a2)
    return 4294960591;
  v4 = sub_21A6FB3A8(a1, CFSTR("kSBSCacheKey_ScanRecordsMerged"), &cf);
  if ((_DWORD)v4 == -6727)
  {
    if (!cf)
    {
      v16 = sub_21A70C220(*(_QWORD *)(a1 + 88), 0, 3, 1, (uint64_t)&cf, v7, v8, v9);
      v10 = v16;
      v17 = cf;
      if ((_DWORD)v16 || !cf)
      {
        if ((_DWORD)v16)
          goto LABEL_29;
      }
      else
      {
        v10 = sub_21A6F8AA0(a1, CFSTR("kSBSCacheKey_ScanRecordsMerged"), (uint64_t)cf);
        CFRelease(cf);
        if ((_DWORD)v10)
          goto LABEL_29;
        v17 = cf;
      }
      if (!v17)
        goto LABEL_28;
    }
  }
  else
  {
    v10 = v4;
    if ((_DWORD)v4)
      goto LABEL_29;
    if (!cf)
      goto LABEL_28;
  }
  *(_QWORD *)v29 = 0;
  v11 = sub_21A70B648(*(_QWORD *)(a1 + 88), (CFTypeRef *)v29, 0, v5, v6, v7, v8, v9);
  if ((_DWORD)v11 == -6727)
  {
LABEL_12:
    v10 = 0;
    *a2 = cf;
    cf = 0;
    goto LABEL_29;
  }
  v10 = v11;
  if (!(_DWORD)v11)
  {
    if (!*(_QWORD *)v29)
    {
LABEL_28:
      v10 = 4294960568;
      goto LABEL_29;
    }
    if (sub_21A68F700(*(const __CFString **)v29, 0, (CFArrayRef)cf) == -1)
    {
      v10 = sub_21A70C110(*(_QWORD *)(a1 + 88), *(const __CFString **)v29, 3, &v30, v12, v13, v14, v15);
      if ((_DWORD)v10)
        goto LABEL_29;
      if (!v30)
        goto LABEL_28;
      v18 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
      if (cf)
      {
        Count = CFArrayGetCount((CFArrayRef)cf);
        MutableCopy = CFArrayCreateMutableCopy(v18, Count + 1, (CFArrayRef)cf);
      }
      else
      {
        MutableCopy = CFArrayCreateMutable(v18, 1, MEMORY[0x24BDBD690]);
      }
      v26 = MutableCopy;
      if (!MutableCopy)
        goto LABEL_28;
      v27 = sub_21A693A8C(v18, MutableCopy, (uint64_t)"%O", v21, v22, v23, v24, v25, (uint64_t)v30);
      if ((_DWORD)v27)
      {
        v10 = v27;
        CFRelease(v26);
        goto LABEL_29;
      }
      v10 = sub_21A6F8AA0(a1, CFSTR("kSBSCacheKey_ScanRecordsMerged"), (uint64_t)v26);
      cf = v26;
      CFRelease(v26);
      if ((_DWORD)v10)
        goto LABEL_29;
    }
    goto LABEL_12;
  }
LABEL_29:
  if (v30)
  {
    CFRelease(v30);
    v30 = 0;
  }
  if (cf)
    CFRelease(cf);
  return v10;
}

uint64_t sub_21A6FB22C(CFArrayRef theArray, const char *a2, const __CFString *a3, __CFArray **a4)
{
  uint64_t v4;
  const __CFString *v6;
  CFIndex Count;
  uint64_t v10;
  const __CFAllocator *v11;
  CFMutableArrayRef Mutable;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __CFArray *v18;
  uint64_t i;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  const __CFString *v27;
  const __CFString *v29;

  v4 = 4294960591;
  if (theArray)
  {
    if (a4)
    {
      v6 = a3;
      if ((_DWORD)a2 || a3)
      {
        Count = CFArrayGetCount(theArray);
        if (Count)
        {
          v10 = Count;
          v11 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
          Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD690]);
          if (Mutable)
          {
            v18 = Mutable;
            v29 = 0;
            if (v10 >= 1)
            {
              for (i = 0; v10 != i; ++i)
              {
                sub_21A693B94((const __CFString *)theArray, (uint64_t)&v29, (UInt8 *)"[*]", v13, v14, v15, v16, v17, i);
                if ((_DWORD)v20)
                {
LABEL_24:
                  v4 = v20;
                  goto LABEL_27;
                }
                v27 = v29;
                if (!v29)
                {
                  v4 = 4294960568;
                  goto LABEL_27;
                }
                if (v6)
                {
                  if (sub_21A68F610(v6, v29, v21, v22, v23, v24, v25, v26))
                  {
                    v6 = 0;
                    continue;
                  }
                  v27 = v29;
                }
                if (!sub_21A72E378((uint64_t)v27, a2))
                {
                  v20 = sub_21A693A8C(v11, v18, (uint64_t)"%O", v13, v14, v15, v16, v17, (uint64_t)v29);
                  if ((_DWORD)v20)
                    goto LABEL_24;
                }
              }
            }
            if (CFArrayGetCount(v18))
            {
              v4 = 0;
              *a4 = v18;
            }
            else
            {
              v4 = 4294960569;
LABEL_27:
              CFRelease(v18);
            }
          }
          else
          {
            return 4294960568;
          }
        }
        else
        {
          return 4294960569;
        }
      }
    }
  }
  return v4;
}

uint64_t sub_21A6FB3A8(uint64_t a1, CFStringRef theString1, CFTypeRef *a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  CFTypeRef cf;
  CFTypeRef v26;

  cf = 0;
  v26 = 0;
  v3 = 4294960591;
  if (!theString1 || !a3)
    return v3;
  if (!*(_QWORD *)(a1 + 56))
    goto LABEL_15;
  if (CFStringCompare(theString1, CFSTR("kSBSCacheKey_BrowseRecords"), 0))
  {
    if (CFStringCompare(theString1, CFSTR("kSBSCacheKey_BaseSettings"), 0))
    {
      sub_21A693B94(*(const __CFString **)(a1 + 56), (uint64_t)&v26, (UInt8 *)"%kO", v12, v13, v14, v15, v16, (uint64_t)theString1);
      goto LABEL_11;
    }
LABEL_15:
    if (cf)
    {
      CFRelease(cf);
      cf = 0;
    }
    goto LABEL_17;
  }
  v18 = sub_21A70B648(*(_QWORD *)(a1 + 88), &cf, 0, v7, v8, v9, v10, v11);
  if ((_DWORD)v18 == -6727)
    goto LABEL_10;
  v3 = v18;
  if ((_DWORD)v18)
    goto LABEL_15;
  if (cf)
  {
LABEL_10:
    sub_21A693B94(*(const __CFString **)(a1 + 56), (uint64_t)&v26, (UInt8 *)"%kO.%kO", v19, v20, v21, v22, v23, (uint64_t)theString1);
LABEL_11:
    v3 = v17;
    if (!(_DWORD)v17)
    {
      if (v26)
      {
        v3 = 0;
        *a3 = v26;
        v26 = 0;
      }
      else
      {
        v3 = 4294960568;
      }
    }
    goto LABEL_15;
  }
  v3 = 4294960568;
LABEL_17:
  if (v26)
    CFRelease(v26);
  return v3;
}

uint64_t sub_21A6FB4CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  __CFArray *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *context;

  if (dword_2550F44C8 <= 800 && (dword_2550F44C8 != -1 || sub_21A69876C((uint64_t)&dword_2550F44C8, 0x320u)))
    sub_21A698FDC((uint64_t)&dword_2550F44C8, (uint64_t)"OSStatus _SendResetContextCommand(StepByStepContextRef)", 800, (uint64_t)" \n", a5, a6, a7, a8, v24);
  context = 0;
  v14 = sub_21A709AF8(*(_QWORD *)(a1 + 88), &context);
  v15 = (char *)context;
  if (!(_DWORD)v14)
  {
    if (!context)
      return 4294960568;
    v17 = (__CFArray *)*((_QWORD *)context + 3);
    if (!v17)
    {
      v14 = 4294960591;
      goto LABEL_7;
    }
    v14 = sub_21A693A8C((const __CFAllocator *)*MEMORY[0x24BDBD240], v17, (uint64_t)"%ks=%i", v9, v10, v11, v12, v13, (uint64_t)"kBSAssistantCallbackKey_SBS_SBSStep");
    v15 = (char *)context;
    if (!(_DWORD)v14)
    {
      v14 = sub_21A70A490(context, 1, v18, v19, v20, v21, v22, v23);
      v15 = (char *)context;
    }
  }
  if (v15)
LABEL_7:
    sub_21A709C24(v15);
  return v14;
}

uint64_t sub_21A6FB5C8(uint64_t a1, CFArrayRef *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  CFArrayRef v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  CFTypeRef cf;
  CFArrayRef theArray;

  theArray = 0;
  if (!a2)
    return 4294960591;
  v4 = sub_21A6FB3A8(a1, CFSTR("kSBSCacheKey_TargetRemoteBrowseRecords"), (CFTypeRef *)&theArray);
  if ((_DWORD)v4 != -6727)
  {
    v9 = v4;
    if (!(_DWORD)v4)
    {
      v10 = theArray;
      if (!theArray)
        return 4294960568;
      v9 = 0;
      goto LABEL_9;
    }
    goto LABEL_21;
  }
  v10 = theArray;
  if (theArray)
  {
    v9 = 4294960569;
LABEL_9:
    *a2 = v10;
    return v9;
  }
  cf = 0;
  sub_21A70A778(*(_QWORD *)(a1 + 88), 3, 0, 0, v5, v6, v7, v8);
  v9 = sub_21A6D7718(*(const __CFString **)a1, (uint64_t)CFSTR("local."), (uint64_t)CFSTR("_airport._tcp"), CFSTR("wan"), 2u, 1, &cf);
  sub_21A70A778(*(_QWORD *)(a1 + 88), 4, 0, 0, v11, v12, v13, v14);
  if (!(_DWORD)v9)
  {
    if (!cf)
      goto LABEL_20;
    v9 = sub_21A68F2EC(cf, &theArray);
    if (cf)
    {
      CFRelease(cf);
      cf = 0;
    }
    if ((_DWORD)v9)
      goto LABEL_21;
    if (theArray)
    {
      if (CFArrayGetCount(theArray))
      {
        v9 = sub_21A6F8AA0(a1, CFSTR("kSBSCacheKey_TargetRemoteBrowseRecords"), (uint64_t)theArray);
        CFRelease(theArray);
        if (!(_DWORD)v9)
        {
          v10 = theArray;
          goto LABEL_9;
        }
      }
      else
      {
        v9 = 4294960569;
      }
    }
    else
    {
LABEL_20:
      v9 = 4294960568;
    }
  }
LABEL_21:
  if (theArray)
    CFRelease(theArray);
  return v9;
}

uint64_t sub_21A6FB744(uint64_t a1, int a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  CFTypeRef v13;
  unsigned int v14;
  CFTypeRef cf;

  cf = 0;
  if (!a3)
    return 4294960591;
  v6 = sub_21A6FB3A8(a1, CFSTR("kSBSCacheKey_BrowseRecords"), &cf);
  if ((_DWORD)v6 == -6727)
  {
    v13 = cf;
    if (cf)
    {
      v12 = 4294960569;
      goto LABEL_9;
    }
    if (!a2 || (v12 = sub_21A70BD94(*(_QWORD *)(a1 + 88), 8), !(_DWORD)v12))
    {
      v14 = sub_21A70D5E4(*(_QWORD *)(a1 + 88), 15, &cf, v7, v8, v9, v10, v11);
      if (v14)
      {
        if (v14 == -6727)
          v12 = 4294960569;
        else
          v12 = v14;
      }
      else
      {
        if (!cf)
          return 4294960568;
        v12 = sub_21A6F8AA0(a1, CFSTR("kSBSCacheKey_BrowseRecords"), (uint64_t)cf);
        CFRelease(cf);
        if (!(_DWORD)v12)
        {
          v13 = cf;
          goto LABEL_9;
        }
      }
    }
  }
  else
  {
    v12 = v6;
    if (!(_DWORD)v6)
    {
      v13 = cf;
      if (cf)
      {
        v12 = 0;
LABEL_9:
        *a3 = v13;
        return v12;
      }
      return 4294960568;
    }
  }
  if (cf)
    CFRelease(cf);
  return v12;
}

uint64_t sub_21A6FB850(const __CFArray *a1, const __CFArray *a2, __CFArray **a3)
{
  uint64_t v3;
  CFIndex Count;
  uint64_t v8;
  const __CFAllocator *v9;
  CFMutableArrayRef Mutable;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __CFArray *v16;
  uint64_t v17;
  uint64_t v18;
  CFIndex v19;
  const void *ValueAtIndex;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  const __CFString *v28;

  v3 = 4294960591;
  if (a1 && a3)
  {
    Count = CFArrayGetCount(a1);
    if (Count && (v8 = Count, CFArrayGetCount(a2)))
    {
      v9 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
      Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD690]);
      if (Mutable)
      {
        v16 = Mutable;
        v28 = 0;
        if (v8 >= 1)
        {
          v17 = 0;
          while (1)
          {
            sub_21A693B94((const __CFString *)a1, (uint64_t)&v28, (UInt8 *)"[*].%kO.%kO", v11, v12, v13, v14, v15, v17);
            if ((_DWORD)v18 != -6727)
            {
              v3 = v18;
              if ((_DWORD)v18)
                goto LABEL_23;
              if (!v28)
              {
LABEL_21:
                v3 = 4294960568;
                goto LABEL_23;
              }
              v19 = sub_21A68F3C8(a2, v28);
              if (v19 != -1)
              {
                ValueAtIndex = CFArrayGetValueAtIndex(a2, v19);
                if (!ValueAtIndex)
                  goto LABEL_21;
                v26 = sub_21A693A8C(v9, v16, (uint64_t)"%O", v21, v22, v23, v24, v25, (uint64_t)ValueAtIndex);
                if ((_DWORD)v26)
                  break;
              }
            }
            if (v8 == ++v17)
              goto LABEL_15;
          }
          v3 = v26;
          goto LABEL_23;
        }
LABEL_15:
        if (!CFArrayGetCount(v16))
        {
          v3 = 4294960569;
LABEL_23:
          CFRelease(v16);
          return v3;
        }
        v3 = 0;
        *a3 = v16;
      }
      else
      {
        return 4294960568;
      }
    }
    else
    {
      return 4294960569;
    }
  }
  return v3;
}

uint64_t sub_21A6FB9D4(uint64_t a1, CFArrayRef theArray, const __CFString *a3, int a4, int a5, int a6, const __CFString *a7, CFMutableArrayRef *a8)
{
  CFIndex Count;
  uint64_t v17;
  CFMutableArrayRef Mutable;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  CFMutableArrayRef v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  const char *v31;
  const __CFString *v32;
  const __CFString *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  const __CFString *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  const __CFString *v48;
  uint64_t v49;
  const char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  const __CFString *v57;
  uint64_t v58;
  uint64_t v59;
  unsigned int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  const __CFString *v67;
  const __CFString *v68;
  uint64_t v69;
  const __CFString *v70;
  int v71;
  CFMutableArrayRef v72;
  const __CFAllocator *v73;
  const __CFString *v74;
  unsigned int v75;

  if (!a8)
    return 4294960591;
  Count = CFArrayGetCount(theArray);
  if (!Count)
    return 4294960569;
  v17 = Count;
  v73 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD690]);
  if (!Mutable)
    return 4294960568;
  v24 = Mutable;
  v69 = a1;
  v70 = a7;
  v71 = a6;
  v74 = 0;
  if (v17 >= 1)
  {
    v25 = 0;
    v26 = 0;
    v72 = Mutable;
    while (1)
    {
      sub_21A693B94((const __CFString *)theArray, (uint64_t)&v74, (UInt8 *)"[*]", v19, v20, v21, v22, v23, v26);
      if ((_DWORD)v27)
      {
LABEL_70:
        v65 = v27;
        goto LABEL_73;
      }
      if (!v74)
      {
        v65 = 4294960568;
LABEL_73:
        CFRelease(v24);
        return v65;
      }
      if (a5)
        v25 = sub_21A68E368(v74, v28, v29, v19, v20, v21, v22, v23);
      if (a3 && sub_21A68F680(a3, v74, v29, v19, v20, v21, v22, v23))
      {
        a3 = 0;
        goto LABEL_56;
      }
      if (a4 && !sub_21A68EFC0(v74, v28, v29, v19, v20, v21, v22, v23))
      {
        v30 = dword_2550F44C8;
        if (dword_2550F44C8 <= 800)
        {
          v31 = "Skipping non-wireless %@\n";
          goto LABEL_29;
        }
        goto LABEL_56;
      }
      if (a5 && (v25 == 3 || v25 == 102 || sub_21A6900C8(v74, v28, v29, v19, v20, v21, v22, v23)))
      {
        v30 = dword_2550F44C8;
        if (dword_2550F44C8 <= 800)
        {
          v31 = "Skipping non-extendable %@\n";
          goto LABEL_29;
        }
        goto LABEL_56;
      }
      if (v71)
      {
        v32 = v74;
        if (v74)
        {
          if (*(_QWORD *)(v69 + 8))
            break;
        }
      }
LABEL_51:
      v57 = v74;
      if (v70)
      {
        v60 = sub_21A68E42C(v74, v70, v29, v19, v20, v21, v22, v23);
        v57 = v74;
        if (!v60)
        {
          if (!sub_21A68E5F0(v74, v58, v59, v19, v20, v21, v22, v23))
            goto LABEL_56;
          v57 = v74;
        }
      }
      v27 = sub_21A693A8C(v73, v24, (uint64_t)"%O", v19, v20, v21, v22, v23, (uint64_t)v57);
      if ((_DWORD)v27)
        goto LABEL_70;
LABEL_56:
      if (v17 == ++v26)
        goto LABEL_68;
    }
    v33 = sub_21A68EFC0(v74, v28, v29, v19, v20, v21, v22, v23);
    if (v33 && (v41 = (uint64_t)v33, CFStringGetLength(v33)))
    {
      v42 = sub_21A72E224(v41, (const char *)3, v35);
    }
    else
    {
      v48 = sub_21A68EE24(v32, v34, v35, v36, v37, v38, v39, v40);
      v49 = (uint64_t)v48;
      if (!v48)
        goto LABEL_37;
      if (!CFStringGetLength(v48))
      {
        v49 = 0;
LABEL_37:
        if (sub_21A6D4724(*(_QWORD *)(v69 + 8), 1852787795))
        {
          v75 = 0;
          if (v49)
          {
            if (sub_21A72E198(v49, (const char *)&v75, 0) && (v75 & 0xFFFFFFFE) == 2)
            {
              v24 = v72;
              if (dword_2550F44C8 <= 800 && (dword_2550F44C8 != -1 || sub_21A69876C((uint64_t)&dword_2550F44C8, 0x320u)))
              {
                v67 = sub_21A68EE6C(v32, v28, v29, v19, v20, v21, v22, v23);
                sub_21A698FDC((uint64_t)&dword_2550F44C8, (uint64_t)"Boolean _IsSourceBaseReplaceable(StepByStepContextRef, CFDictionaryRef)", 800, (uint64_t)"This base is irreplaceable because it's WEP %@\n", v52, v53, v54, v55, (uint64_t)v67);
              }
LABEL_63:
              v30 = dword_2550F44C8;
              if (dword_2550F44C8 <= 800)
              {
                v31 = "Skipping irreplaceable %@\n";
LABEL_29:
                if (v30 != -1 || sub_21A69876C((uint64_t)&dword_2550F44C8, 0x320u))
                {
                  v43 = sub_21A68EE6C(v74, v28, v29, v19, v20, v21, v22, v23);
                  sub_21A698FDC((uint64_t)&dword_2550F44C8, (uint64_t)"OSStatus _CopyNarrowedDownBrowseRecords(StepByStepContextRef, CFArrayRef, CFDictionaryRef, Boolean, Boolean, Boolean, CFStringRef, CFArrayRef *)", 800, (uint64_t)v31, v44, v45, v46, v47, (uint64_t)v43);
                }
                v24 = v72;
                goto LABEL_56;
              }
              goto LABEL_56;
            }
          }
        }
        v24 = v72;
        if (!sub_21A6900C8(v32, v28, v29, v19, v20, v21, v22, v23)
          && sub_21A68F008(v32, v56, v29, v19, v20, v21, v22, v23) == 1)
        {
          if (!sub_21A6D4724(*(_QWORD *)(v69 + 8), 1112757313)
            || (v75 = 0, !sub_21A6D4478(*(_QWORD *)(v69 + 8), 1937326416, &v75))
            && v75 >= 0x77
            && !sub_21A6D4724(*(_QWORD *)(v69 + 8), 1632923251))
          {
            if (dword_2550F44C8 > 800)
              goto LABEL_56;
            if (dword_2550F44C8 != -1 || sub_21A69876C((uint64_t)&dword_2550F44C8, 0x320u))
            {
              v68 = sub_21A68EE6C(v32, v28, v29, v19, v20, v21, v22, v23);
              sub_21A698FDC((uint64_t)&dword_2550F44C8, (uint64_t)"Boolean _IsSourceBaseReplaceable(StepByStepContextRef, CFDictionaryRef)", 800, (uint64_t)"This base is irreplaceable because it's a STA %@\n", v61, v62, v63, v64, (uint64_t)v68);
            }
            goto LABEL_63;
          }
        }
        goto LABEL_51;
      }
      v42 = sub_21A72E258(v49, v50, v51);
    }
    v49 = v42;
    goto LABEL_37;
  }
LABEL_68:
  if (!CFArrayGetCount(v24))
  {
    v65 = 4294960569;
    goto LABEL_73;
  }
  v65 = 0;
  *a8 = v24;
  return v65;
}

BOOL sub_21A6FBE34(uint64_t a1, const __CFString *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  _BOOL8 result;
  int v10;
  CFArrayRef v11;
  const __CFString *v12;

  if (!a2)
    return 0;
  v11 = 0;
  v12 = 0;
  v8 = sub_21A6FB5C8(a1, &v11);
  result = 0;
  if (!v8)
  {
    sub_21A693B94(a2, (uint64_t)&v12, (UInt8 *)"%kO.%kO", v3, v4, v5, v6, v7, (uint64_t)CFSTR("txt"));
    return !v10 && v12 && sub_21A68F3C8(v11, v12) != -1;
  }
  return result;
}

uint64_t sub_21A6FBED8(const __CFArray *a1, const __CFString *a2, __CFArray **a3)
{
  uint64_t v3;
  const __CFString *v5;
  CFIndex Count;
  uint64_t v8;
  const __CFAllocator *v9;
  CFMutableArrayRef Mutable;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __CFArray *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  const __CFString *v26;
  const __CFString *v27;

  v3 = 4294960591;
  if (a2 && a3)
  {
    v5 = a2;
    Count = CFArrayGetCount(a1);
    if (Count)
    {
      v8 = Count;
      v9 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
      Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD690]);
      if (Mutable)
      {
        v16 = Mutable;
        v26 = 0;
        v27 = 0;
        if (v8 >= 1)
        {
          v17 = 0;
          while (1)
          {
            sub_21A693B94((const __CFString *)a1, (uint64_t)&v27, (UInt8 *)"[*]", v11, v12, v13, v14, v15, v17);
            if ((_DWORD)v18)
              goto LABEL_21;
            if (!v27)
              break;
            sub_21A693B94(v27, (uint64_t)&v26, (UInt8 *)"%ks", v19, v20, v21, v22, v23, (uint64_t)"macAddress");
            if ((_DWORD)v18)
            {
LABEL_21:
              v3 = v18;
              goto LABEL_24;
            }
            if (!v26)
              break;
            if (v5 && sub_21A68F440(v5, v26, v24, v11, v12, v13, v14, v15))
            {
              v5 = 0;
            }
            else
            {
              v18 = sub_21A693A8C(v9, v16, (uint64_t)"%O", v11, v12, v13, v14, v15, (uint64_t)v27);
              if ((_DWORD)v18)
                goto LABEL_21;
            }
            if (v8 == ++v17)
              goto LABEL_17;
          }
          v3 = 4294960568;
          goto LABEL_24;
        }
LABEL_17:
        if (!CFArrayGetCount(v16))
        {
          v3 = 4294960569;
LABEL_24:
          CFRelease(v16);
          return v3;
        }
        v3 = 0;
        *a3 = v16;
      }
      else
      {
        return 4294960568;
      }
    }
    else
    {
      return 4294960569;
    }
  }
  return v3;
}

void *sub_21A6FC054(const char *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_21A695CDC((uint64_t)&unk_2550F4E08, 1000, a1, (uint64_t)&a9, a5, a6, a7, a8);
  return &unk_2550F4E08;
}

const __CFString *sub_21A6FC09C(const __CFString *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  const __CFString *v8;
  const __CFString *v10;

  v8 = &stru_24DD08368;
  v10 = &stru_24DD08368;
  if (a1)
  {
    sub_21A693B94(a1, (uint64_t)&v10, (UInt8 *)"%ks.%ks", a4, a5, a6, a7, a8, (uint64_t)"txt");
    return v10;
  }
  return v8;
}

void sub_21A6FC0F0(uint64_t a1, CFArrayRef theArray, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  CFIndex Count;
  const __CFAllocator *v11;
  uint64_t v12;
  CFMutableDictionaryRef Mutable;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  const __CFString *v64;

  v64 = 0;
  if (theArray)
  {
    Count = CFArrayGetCount(theArray);
    if (dword_2550F4508 <= 800 && (dword_2550F4508 != -1 || sub_21A69876C((uint64_t)&dword_2550F4508, 0x320u)))
      sub_21A698FDC((uint64_t)&dword_2550F4508, (uint64_t)"void dlog_user__BaseStationArray(const char *, CFArrayRef)", 800, (uint64_t)"%s BaseStation list count: %d\n", a5, a6, a7, a8, a1);
    if (Count)
    {
      v11 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
      Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 8, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
      if (Mutable)
      {
        if (Count < 1)
        {
LABEL_62:
          CFRelease(Mutable);
          return;
        }
        v14 = 0;
        while (1)
        {
          sub_21A693B94((const __CFString *)theArray, (uint64_t)&v64, (UInt8 *)"[*].%ks", v12, a5, a6, a7, a8, v14);
          if (v20)
            v21 = 1;
          else
            v21 = v64 == 0;
          if (v21)
            v64 = CFSTR("<Not found>");
          v22 = sub_21A693A8C(v11, Mutable, (uint64_t)"%ks=%O", v15, v16, v17, v18, v19, (uint64_t)"name");
          if ((_DWORD)v22)
            break;
          sub_21A693B94((const __CFString *)theArray, (uint64_t)&v64, (UInt8 *)"[*].%ks.%kC", v23, a5, a6, a7, a8, v14);
          if (v29 || !v64)
            v64 = CFSTR("<Not found>");
          v22 = sub_21A693A8C(v11, Mutable, (uint64_t)"%kC=%O", v24, v25, v26, v27, v28, 1937327724);
          if ((_DWORD)v22)
            break;
          sub_21A693B94((const __CFString *)theArray, (uint64_t)&v64, (UInt8 *)"[*].%ks.%kC", v30, a5, a6, a7, a8, v14);
          if (v36 || !v64)
            v64 = CFSTR("<Not found>");
          v22 = sub_21A693A8C(v11, Mutable, (uint64_t)"%kC=%O", v31, v32, v33, v34, v35, 1937326416);
          if ((_DWORD)v22)
            break;
          sub_21A693B94((const __CFString *)theArray, (uint64_t)&v64, (UInt8 *)"[*].%ks.%ks", v37, a5, a6, a7, a8, v14);
          if (v43 || !v64)
            v64 = CFSTR("<Not found>");
          v22 = sub_21A693A8C(v11, Mutable, (uint64_t)"%ks=%O", v38, v39, v40, v41, v42, (uint64_t)"raMA");
          if ((_DWORD)v22)
            break;
          sub_21A693B94((const __CFString *)theArray, (uint64_t)&v64, (UInt8 *)"[*].%ks.%ks", v44, a5, a6, a7, a8, v14);
          if (v45 != -6727)
          {
            if (v45 || !v64)
              v64 = CFSTR("<Not found>");
            v22 = sub_21A693A8C(v11, Mutable, (uint64_t)"%ks=%O", v46, a5, a6, a7, a8, (uint64_t)"raM2");
            if ((_DWORD)v22)
              break;
          }
          sub_21A693B94((const __CFString *)theArray, (uint64_t)&v64, (UInt8 *)"[*].%ks.%ks", v46, a5, a6, a7, a8, v14);
          if (v52 || !v64)
            v64 = CFSTR("<Not found>");
          v22 = sub_21A693A8C(v11, Mutable, (uint64_t)"%ks=%O", v47, v48, v49, v50, v51, (uint64_t)"raNm");
          if ((_DWORD)v22)
            break;
          sub_21A693B94((const __CFString *)theArray, (uint64_t)&v64, (UInt8 *)"[*].%ks.%ks", v53, a5, a6, a7, a8, v14);
          if (v59 || !v64)
            v64 = CFSTR("<Not found>");
          v22 = sub_21A693A8C(v11, Mutable, (uint64_t)"%ks=%O", v54, v55, v56, v57, v58, (uint64_t)"syVs");
          if ((_DWORD)v22)
            break;
          sub_21A693B94((const __CFString *)theArray, (uint64_t)&v64, (UInt8 *)"[*].%ks.%ks", v60, a5, a6, a7, a8, v14);
          if (v61 != -6727)
          {
            if (v61 || !v64)
              v64 = CFSTR("<Not found>");
            v22 = sub_21A693A8C(v11, Mutable, (uint64_t)"%ks=%O", v62, a5, a6, a7, a8, (uint64_t)"prob");
            if ((_DWORD)v22)
              break;
          }
          if (dword_2550F4508 <= 800 && (dword_2550F4508 != -1 || sub_21A69876C((uint64_t)&dword_2550F4508, 0x320u)))
            sub_21A698FDC((uint64_t)&dword_2550F4508, (uint64_t)"void dlog_user__BaseStationArray(const char *, CFArrayRef)", 800, (uint64_t)"\t%@", a5, a6, a7, a8, (uint64_t)Mutable);
          CFDictionaryRemoveAllValues(Mutable);
          if (Count == ++v14)
            goto LABEL_61;
        }
        v63 = v22;
      }
      else
      {
        v63 = 4294960568;
      }
    }
    else
    {
      Mutable = 0;
      v63 = 4294960569;
    }
  }
  else
  {
    Mutable = 0;
    v63 = 4294960591;
  }
  if (dword_2550F4508 <= 800 && (dword_2550F4508 != -1 || sub_21A69876C((uint64_t)&dword_2550F4508, 0x320u)))
    sub_21A698FDC((uint64_t)&dword_2550F4508, (uint64_t)"void dlog_user__BaseStationArray(const char *, CFArrayRef)", 800, (uint64_t)"err: %d index: %d", a5, a6, a7, a8, v63);
LABEL_61:
  if (Mutable)
    goto LABEL_62;
}

void sub_21A6FC5DC(uint64_t a1, CFArrayRef theArray, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  CFIndex Count;
  const __CFAllocator *v11;
  uint64_t v12;
  CFMutableDictionaryRef Mutable;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  const __CFString *v52;

  v52 = 0;
  if (theArray)
  {
    Count = CFArrayGetCount(theArray);
    if (dword_2550F4508 <= 800 && (dword_2550F4508 != -1 || sub_21A69876C((uint64_t)&dword_2550F4508, 0x320u)))
      sub_21A698FDC((uint64_t)&dword_2550F4508, (uint64_t)"void dlog_user__NetworkArray(const char *, CFArrayRef)", 800, (uint64_t)"%sNetwork list count: %d\n", a5, a6, a7, a8, a1);
    if (Count)
    {
      v11 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
      Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 3, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
      if (Mutable)
      {
        if (Count < 1)
        {
LABEL_50:
          CFRelease(Mutable);
          return;
        }
        v14 = 0;
        while (1)
        {
          sub_21A693B94((const __CFString *)theArray, (uint64_t)&v52, (UInt8 *)"[*].%kO", v12, a5, a6, a7, a8, v14);
          if (v20)
            v21 = 1;
          else
            v21 = v52 == 0;
          if (v21)
            v52 = CFSTR("<Not found>");
          v22 = sub_21A693A8C(v11, Mutable, (uint64_t)"%kO=%O", v15, v16, v17, v18, v19, (uint64_t)CFSTR("SSID_STR"));
          if ((_DWORD)v22)
            break;
          sub_21A693B94((const __CFString *)theArray, (uint64_t)&v52, (UInt8 *)"[*].%kO", v23, a5, a6, a7, a8, v14);
          if (v24 == -6727)
            sub_21A693B94((const __CFString *)theArray, (uint64_t)&v52, (UInt8 *)"[*].%kO", v25, v26, v27, v28, v29, v14);
          if (v24 || !v52)
            v52 = CFSTR("<Not found>");
          v22 = sub_21A693A8C(v11, Mutable, (uint64_t)"%kO=%O", v25, v26, v27, v28, v29, (uint64_t)CFSTR("BSSID"));
          if ((_DWORD)v22)
            break;
          sub_21A693B94((const __CFString *)theArray, (uint64_t)&v52, (UInt8 *)"[*].%kO", v30, a5, a6, a7, a8, v14);
          if (v36 || !v52)
            v52 = CFSTR("<Not found>");
          v22 = sub_21A693A8C(v11, Mutable, (uint64_t)"%kO=%O", v31, v32, v33, v34, v35, (uint64_t)CFSTR("CHANNEL"));
          if ((_DWORD)v22)
            break;
          sub_21A693B94((const __CFString *)theArray, (uint64_t)&v52, (UInt8 *)"[*].%kO", v37, a5, a6, a7, a8, v14);
          if (v43 || !v52)
            v52 = CFSTR("<Not found>");
          v22 = sub_21A693A8C(v11, Mutable, (uint64_t)"%kO=%O", v38, v39, v40, v41, v42, (uint64_t)CFSTR("IE"));
          if ((_DWORD)v22)
            break;
          sub_21A693B94((const __CFString *)theArray, (uint64_t)&v52, (UInt8 *)"[*].%kO", v44, a5, a6, a7, a8, v14);
          if (v50 || !v52)
            v52 = CFSTR("<Not found>");
          v22 = sub_21A693A8C(v11, Mutable, (uint64_t)"%kO=%O", v45, v46, v47, v48, v49, (uint64_t)CFSTR("APPLE_IE"));
          if ((_DWORD)v22)
            break;
          if (dword_2550F4508 <= 800 && (dword_2550F4508 != -1 || sub_21A69876C((uint64_t)&dword_2550F4508, 0x320u)))
            sub_21A698FDC((uint64_t)&dword_2550F4508, (uint64_t)"void dlog_user__NetworkArray(const char *, CFArrayRef)", 800, (uint64_t)"\t%@", a5, a6, a7, a8, (uint64_t)Mutable);
          CFDictionaryRemoveAllValues(Mutable);
          if (Count == ++v14)
            goto LABEL_49;
        }
        v51 = v22;
      }
      else
      {
        v51 = 4294960568;
      }
    }
    else
    {
      Mutable = 0;
      v51 = 4294960569;
    }
  }
  else
  {
    Mutable = 0;
    v51 = 4294960591;
  }
  if (dword_2550F4508 <= 800 && (dword_2550F4508 != -1 || sub_21A69876C((uint64_t)&dword_2550F4508, 0x320u)))
    sub_21A698FDC((uint64_t)&dword_2550F4508, (uint64_t)"void dlog_user__NetworkArray(const char *, CFArrayRef)", 800, (uint64_t)"err: %d index: %d", a5, a6, a7, a8, v51);
LABEL_49:
  if (Mutable)
    goto LABEL_50;
}

void sub_21A6FC98C(uint64_t a1, CFDictionaryRef theDict, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  CFIndex Count;
  const __CFAllocator *v11;
  __CFArray *Mutable;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const void **v22;

  v21 = 0;
  v22 = 0;
  if (!theDict)
  {
    Mutable = 0;
    v14 = 4294960591;
    goto LABEL_13;
  }
  Count = CFDictionaryGetCount(theDict);
  if (!Count)
  {
    Mutable = 0;
    v14 = 4294960569;
    goto LABEL_13;
  }
  v11 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], Count, MEMORY[0x24BDBD690]);
  if (!Mutable)
  {
LABEL_12:
    v14 = 4294960568;
    goto LABEL_13;
  }
  v13 = sub_21A695640(theDict, &v22);
  if (!(_DWORD)v13)
  {
    if (v22)
    {
      while (sub_21A6956DC((uint64_t *)v22, 0, &v21))
      {
        v13 = sub_21A693A8C(v11, Mutable, (uint64_t)"%O", v16, v17, v18, v19, v20, v21);
        if ((_DWORD)v13)
          goto LABEL_5;
      }
      sub_21A6FC0F0(a1, Mutable, v15, v16, v17, v18, v19, v20);
      goto LABEL_18;
    }
    goto LABEL_12;
  }
LABEL_5:
  v14 = v13;
LABEL_13:
  if (dword_2550F4508 <= 800 && (dword_2550F4508 != -1 || sub_21A69876C((uint64_t)&dword_2550F4508, 0x320u)))
    sub_21A698FDC((uint64_t)&dword_2550F4508, (uint64_t)"void dlog_user__BaseStationDictionaryList(const char *, CFDictionaryRef)", 800, (uint64_t)"err: %d", a5, a6, a7, a8, v14);
  if (Mutable)
LABEL_18:
    CFRelease(Mutable);
  if (v22)
    sub_21A6956D0(v22);
}

void sub_21A6FCAF4(uint64_t a1, CFDictionaryRef theDict, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  CFIndex Count;
  const __CFAllocator *v11;
  __CFArray *Mutable;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const void **v22;

  v21 = 0;
  v22 = 0;
  if (!theDict)
  {
    Mutable = 0;
    v14 = 4294960591;
    goto LABEL_13;
  }
  Count = CFDictionaryGetCount(theDict);
  if (!Count)
  {
    Mutable = 0;
    v14 = 4294960569;
    goto LABEL_13;
  }
  v11 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], Count, MEMORY[0x24BDBD690]);
  if (!Mutable)
  {
LABEL_12:
    v14 = 4294960568;
    goto LABEL_13;
  }
  v13 = sub_21A695640(theDict, &v22);
  if (!(_DWORD)v13)
  {
    if (v22)
    {
      while (sub_21A6956DC((uint64_t *)v22, 0, &v21))
      {
        v13 = sub_21A693A8C(v11, Mutable, (uint64_t)"%O", v16, v17, v18, v19, v20, v21);
        if ((_DWORD)v13)
          goto LABEL_5;
      }
      sub_21A6FC5DC(a1, Mutable, v15, v16, v17, v18, v19, v20);
      goto LABEL_18;
    }
    goto LABEL_12;
  }
LABEL_5:
  v14 = v13;
LABEL_13:
  if (dword_2550F4508 <= 800 && (dword_2550F4508 != -1 || sub_21A69876C((uint64_t)&dword_2550F4508, 0x320u)))
    sub_21A698FDC((uint64_t)&dword_2550F4508, (uint64_t)"void dlog_user__NetworkDictionaryList(const char *, CFDictionaryRef)", 800, (uint64_t)"err: %d ", a5, a6, a7, a8, v14);
  if (Mutable)
LABEL_18:
    CFRelease(Mutable);
  if (v22)
    sub_21A6956D0(v22);
}

void sub_21A6FCC5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  const __CFAllocator *v10;
  uint64_t v11;
  __CFArray *Mutable;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  if (a2)
  {
    v10 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
    Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 1, MEMORY[0x24BDBD690]);
    if (Mutable)
    {
      v13 = sub_21A693A8C(v10, Mutable, (uint64_t)"%O", v11, a5, a6, a7, a8, a2);
      if (!(_DWORD)v13)
      {
        sub_21A6FC0F0(a1, Mutable, v14, v15, a5, a6, a7, a8);
LABEL_14:
        CFRelease(Mutable);
        return;
      }
      v16 = v13;
    }
    else
    {
      v16 = 4294960568;
    }
  }
  else
  {
    Mutable = 0;
    v16 = 4294960591;
  }
  if (dword_2550F4508 <= 800 && (dword_2550F4508 != -1 || sub_21A69876C((uint64_t)&dword_2550F4508, 0x320u)))
    sub_21A698FDC((uint64_t)&dword_2550F4508, (uint64_t)"void dlog_user__BaseStationDictionary(const char *, CFDictionaryRef)", 800, (uint64_t)"err: %d", a5, a6, a7, a8, v16);
  if (Mutable)
    goto LABEL_14;
}

void sub_21A6FCD64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  const __CFAllocator *v10;
  uint64_t v11;
  __CFArray *Mutable;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  if (a2)
  {
    v10 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
    Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 1, MEMORY[0x24BDBD690]);
    if (Mutable)
    {
      v13 = sub_21A693A8C(v10, Mutable, (uint64_t)"%O", v11, a5, a6, a7, a8, a2);
      if (!(_DWORD)v13)
      {
        sub_21A6FC5DC(a1, Mutable, v14, v15, a5, a6, a7, a8);
LABEL_14:
        CFRelease(Mutable);
        return;
      }
      v16 = v13;
    }
    else
    {
      v16 = 4294960568;
    }
  }
  else
  {
    Mutable = 0;
    v16 = 4294960591;
  }
  if (dword_2550F4508 <= 800 && (dword_2550F4508 != -1 || sub_21A69876C((uint64_t)&dword_2550F4508, 0x320u)))
    sub_21A698FDC((uint64_t)&dword_2550F4508, (uint64_t)"void dlog_user__NetworkDictionary(const char *, CFDictionaryRef)", 800, (uint64_t)"err: %d", a5, a6, a7, a8, v16);
  if (Mutable)
    goto LABEL_14;
}

uint64_t sub_21A6FCE6C(const __CFString *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  int v10;
  uint64_t result;
  uint64_t v12;
  unsigned int v13;

  if (dword_2550F4508 <= 800 && (dword_2550F4508 != -1 || sub_21A69876C((uint64_t)&dword_2550F4508, 0x320u)))
    sub_21A698FDC((uint64_t)&dword_2550F4508, (uint64_t)"Boolean _BaseStationHasPPPoEAvailable(CFDictionaryRef)", 800, (uint64_t)"\n", a5, a6, a7, a8, v12);
  if (!a1)
    return 0;
  v13 = 0;
  sub_21A693B94(a1, (uint64_t)&v13, (UInt8 *)"%ks.%kC:int", a4, a5, a6, a7, a8, (uint64_t)"txt");
  v10 = v9;
  result = 0;
  if (!v10)
    return (v13 >> 10) & 1;
  return result;
}

uint64_t sub_21A6FCF28(const __CFString *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  int v10;
  uint64_t result;
  uint64_t v12;
  unsigned int v13;

  if (dword_2550F4508 <= 800 && (dword_2550F4508 != -1 || sub_21A69876C((uint64_t)&dword_2550F4508, 0x320u)))
    sub_21A698FDC((uint64_t)&dword_2550F4508, (uint64_t)"Boolean _BaseStationHasDHCPLease(CFDictionaryRef)", 800, (uint64_t)"\n", a5, a6, a7, a8, v12);
  if (!a1)
    return 0;
  v13 = 0;
  sub_21A693B94(a1, (uint64_t)&v13, (UInt8 *)"%ks.%kC:int", a4, a5, a6, a7, a8, (uint64_t)"txt");
  v10 = v9;
  result = 0;
  if (!v10)
    return (v13 >> 11) & 1;
  return result;
}

BOOL sub_21A6FCFE4(const __CFString *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9;
  uint64_t v12;

  if (dword_2550F4508 <= 800 && (dword_2550F4508 != -1 || sub_21A69876C((uint64_t)&dword_2550F4508, 0x320u)))
    sub_21A698FDC((uint64_t)&dword_2550F4508, (uint64_t)"Boolean _BaseStationIs80211g(CFDictionaryRef)", 800, (uint64_t)"\n", a5, a6, a7, a8, v12);
  if (!a1)
    return 0;
  v9 = sub_21A68E368(a1, a2, a3, a4, a5, a6, a7, a8);
  return v9 == 3 || v9 == 102;
}

BOOL sub_21A6FD070(const __CFString *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  const __CFString *v9;
  uint64_t v11;

  if (dword_2550F4508 <= 800 && (dword_2550F4508 != -1 || sub_21A69876C((uint64_t)&dword_2550F4508, 0x320u)))
    sub_21A698FDC((uint64_t)&dword_2550F4508, (uint64_t)"Boolean _BaseStationIsTooNewToSetUp(CFDictionaryRef)", 800, (uint64_t)"\n", a5, a6, a7, a8, v11);
  if (!a1)
    return 0;
  v9 = sub_21A68E368(a1, a2, a3, a4, a5, a6, a7, a8);
  return sub_21A731CD8((_BOOL8)v9) == 0;
}

uint64_t sub_21A6FD0F8(CFArrayRef theArray, __CFArray **a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  CFIndex Count;
  uint64_t v12;
  const __CFAllocator *v13;
  CFMutableDictionaryRef Mutable;
  __CFArray *v15;
  CFIndex v16;
  const __CFString *ValueAtIndex;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  const __CFString *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v38;
  uint64_t v39;

  if (dword_2550F4508 <= 800 && (dword_2550F4508 != -1 || sub_21A69876C((uint64_t)&dword_2550F4508, 0x320u)))
    sub_21A698FDC((uint64_t)&dword_2550F4508, (uint64_t)"OSStatus _CopyAllUnconfiguredBaseStations(CFArrayRef, CFDictionaryRef *)", 800, (uint64_t)"\n", a5, a6, a7, a8, v38);
  v10 = 4294960591;
  if (theArray && a2)
  {
    Count = CFArrayGetCount(theArray);
    if (Count)
    {
      v12 = Count;
      v13 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
      Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
      if (Mutable)
      {
        v15 = Mutable;
        v39 = 0;
        if (v12 >= 1)
        {
          v16 = 0;
          while (1)
          {
            ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(theArray, v16);
            if (!ValueAtIndex)
            {
LABEL_21:
              v10 = 4294960568;
              goto LABEL_24;
            }
            v25 = ValueAtIndex;
            if (sub_21A68F104(ValueAtIndex, v18, v19, v20, v21, v22, v23, v24))
            {
              sub_21A693B94(v25, (uint64_t)&v39, (UInt8 *)"%ks", v26, v27, v28, v29, v30, (uint64_t)"name");
              if ((_DWORD)v31)
                break;
              if (!v39)
                goto LABEL_21;
              v31 = sub_21A693A8C(v13, v15, (uint64_t)"%kO=%O", v32, v33, v34, v35, v36, v39);
              if ((_DWORD)v31)
                break;
            }
            if (v12 == ++v16)
              goto LABEL_17;
          }
          v10 = v31;
          goto LABEL_24;
        }
LABEL_17:
        if (!CFDictionaryGetCount(v15))
        {
          v10 = 4294960569;
LABEL_24:
          CFRelease(v15);
          return v10;
        }
        v10 = 0;
        *a2 = v15;
      }
      else
      {
        return 4294960568;
      }
    }
    else
    {
      return 4294960569;
    }
  }
  return v10;
}

uint64_t sub_21A6FD2A4(CFArrayRef theArray, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  CFIndex Count;
  CFIndex v10;
  uint64_t v11;
  CFIndex i;
  const __CFString *ValueAtIndex;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;

  if (dword_2550F4508 <= 800 && (dword_2550F4508 != -1 || sub_21A69876C((uint64_t)&dword_2550F4508, 0x320u)))
    sub_21A698FDC((uint64_t)&dword_2550F4508, (uint64_t)"CFIndex _ConfiguredBaseStationCount(CFArrayRef)", 800, (uint64_t)"\n", a5, a6, a7, a8, v22);
  if (!theArray)
    return 0;
  Count = CFArrayGetCount(theArray);
  if (Count < 1)
    return 0;
  v10 = Count;
  v11 = 0;
  for (i = 0; i != v10; ++i)
  {
    ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(theArray, i);
    if (!ValueAtIndex)
      break;
    if (!sub_21A68F104(ValueAtIndex, v14, v15, v16, v17, v18, v19, v20))
      ++v11;
  }
  return v11;
}

uint64_t sub_21A6FD368(const __CFString *a1, const void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  const void **v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v26;
  const void **v27;
  const __CFString *v28;
  const __CFString *v29;
  const __CFString *v30;

  if (dword_2550F4508 <= 800 && (dword_2550F4508 != -1 || sub_21A69876C((uint64_t)&dword_2550F4508, 0x320u)))
    sub_21A698FDC((uint64_t)&dword_2550F4508, (uint64_t)"Boolean _BaseStationHasPreviousConfig(CFDictionaryRef, CFDictionaryRef)", 800, (uint64_t)"\n", a5, a6, a7, a8, v26);
  v10 = 0;
  v27 = 0;
  if (a1 && a2)
  {
    v29 = 0;
    v30 = 0;
    v28 = 0;
    v16 = sub_21A695640(a2, &v27);
    v10 = 0;
    v17 = v27;
    if (!v16 && v27)
    {
      v29 = 0;
      sub_21A693B94(a1, (uint64_t)&v30, (UInt8 *)"%ks", v11, v12, v13, v14, v15, (uint64_t)"raMA");
      v10 = 0;
      if (!v18)
      {
        if (v30)
        {
          if (!CFDictionaryContainsKey((CFDictionaryRef)a1, CFSTR("raM2"))
            || (sub_21A693B94(a1, (uint64_t)&v29, (UInt8 *)"%ks", v19, v20, v21, v22, v23, (uint64_t)"raM2"),
                v10 = 0,
                !v24)
            && v29)
          {
            while (sub_21A6956DC((uint64_t *)v27, &v28, 0))
            {
              if ((sub_21A6D039C(v30, v28) & 1) != 0
                || v29 && (sub_21A6D039C(v29, v28) & 1) != 0)
              {
                v10 = 1;
                goto LABEL_20;
              }
            }
            v10 = 0;
          }
        }
      }
LABEL_20:
      v17 = v27;
    }
    if (v17)
      sub_21A6956D0(v17);
  }
  return v10;
}

uint64_t sub_21A6FD4E8(const __CFString *a1, const void *a2, _QWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  const void **v33;
  const __CFString *v34;
  const __CFString *v35;
  const __CFString *v36;
  const __CFString *v37;

  if (dword_2550F4508 <= 800 && (dword_2550F4508 != -1 || sub_21A69876C((uint64_t)&dword_2550F4508, 0x320u)))
    sub_21A698FDC((uint64_t)&dword_2550F4508, (uint64_t)"OSStatus _GetConfigFilePathForBaseStation(CFDictionaryRef, CFDictionaryRef, CFStringRef *)", 800, (uint64_t)"\n", a5, a6, a7, a8, v31);
  v37 = 0;
  v35 = 0;
  v36 = 0;
  v33 = 0;
  v34 = 0;
  v32 = 0;
  v11 = 4294960591;
  if (a1)
  {
    if (a2)
    {
      if (a3)
      {
        v11 = sub_21A695640(a2, &v33);
        if (!(_DWORD)v11)
        {
          if (!v33)
            return 4294960568;
          v36 = 0;
          v32 = 0;
          sub_21A693B94(a1, (uint64_t)&v37, (UInt8 *)"%ks", v12, v13, v14, v15, v16, (uint64_t)"raMA");
          v11 = v18;
          if (!(_DWORD)v18)
          {
            if (v37)
            {
              if (!CFDictionaryContainsKey((CFDictionaryRef)a1, CFSTR("raM2"))
                || (sub_21A693B94(a1, (uint64_t)&v36, (UInt8 *)"%ks", v19, v20, v21, v22, v23, (uint64_t)"raM2"),
                    v11 = v24,
                    !(_DWORD)v24)
                && v36)
              {
                v11 = 4294960569;
                if (sub_21A6956DC((uint64_t *)v33, &v35, &v34))
                {
                  while ((sub_21A6D039C(v37, v35) & 1) == 0
                       && (!v36 || !sub_21A6D039C(v36, v35)))
                  {
                    if (!sub_21A6956DC((uint64_t *)v33, &v35, &v34))
                      goto LABEL_9;
                  }
                  sub_21A693B94(v34, (uint64_t)&v32, (UInt8 *)"%ks", v25, v26, v27, v28, v29, (uint64_t)"path");
                  v11 = v30;
                  if (!(_DWORD)v30)
                  {
                    if (v32)
                    {
                      v11 = 0;
                      *a3 = v32;
                    }
                    else
                    {
                      v11 = 4294960568;
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
LABEL_9:
  if (v33)
    sub_21A6956D0(v33);
  return v11;
}

BOOL sub_21A6FD6D0(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  uint64_t v12;

  if (dword_2550F4508 <= 800 && (dword_2550F4508 != -1 || sub_21A69876C((uint64_t)&dword_2550F4508, 0x320u)))
    sub_21A698FDC((uint64_t)&dword_2550F4508, (uint64_t)"Boolean _NetworkIs80211g(CFDictionaryRef)", 800, (uint64_t)"\n", a5, a6, a7, a8, v12);
  if (!a1)
    return 0;
  v9 = sub_21A72E2F4(a1, a2);
  return v9 == 3 || v9 == 102;
}

uint64_t sub_21A6FD75C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;
  uint64_t v10;

  if (dword_2550F4508 <= 800 && (dword_2550F4508 != -1 || sub_21A69876C((uint64_t)&dword_2550F4508, 0x320u)))
    sub_21A698FDC((uint64_t)&dword_2550F4508, (uint64_t)"Boolean _NetworkIsTooNewToSetUp(CFDictionaryRef)", 800, (uint64_t)"\n", a5, a6, a7, a8, v10);
  if (!a1)
    return 0;
  result = sub_21A72E2F4(a1, a2);
  if ((_DWORD)result)
    return sub_21A731CD8(result) == 0;
  return result;
}

uint64_t sub_21A6FD7E8(CFArrayRef theArray, __CFArray **a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  CFIndex Count;
  uint64_t v11;
  const __CFAllocator *v12;
  CFMutableDictionaryRef Mutable;
  __CFArray *v14;
  CFIndex v15;
  const __CFString *ValueAtIndex;
  const char *v17;
  const __CFString *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;

  if (dword_2550F4508 <= 800 && (dword_2550F4508 != -1 || sub_21A69876C((uint64_t)&dword_2550F4508, 0x320u)))
    sub_21A698FDC((uint64_t)&dword_2550F4508, (uint64_t)"OSStatus _CopyAllUnconfiguredNetworks(CFArrayRef, CFDictionaryRef *)", 800, (uint64_t)"\n", a5, a6, a7, a8, v32);
  if (!a2)
    return 4294960591;
  if (!theArray)
    return 4294960569;
  Count = CFArrayGetCount(theArray);
  if (!Count)
    return 4294960569;
  v11 = Count;
  v12 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
  if (!Mutable)
    return 4294960568;
  v14 = Mutable;
  v33 = 0;
  if (v11 >= 1)
  {
    v15 = 0;
    while (1)
    {
      ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(theArray, v15);
      if (!ValueAtIndex)
      {
LABEL_22:
        v30 = 4294960568;
        goto LABEL_25;
      }
      v18 = ValueAtIndex;
      if (sub_21A72E284((uint64_t)ValueAtIndex, v17))
      {
        sub_21A693B94(v18, (uint64_t)&v33, (UInt8 *)"%kO", v19, v20, v21, v22, v23, (uint64_t)CFSTR("SSID_STR"));
        if ((_DWORD)v24)
          break;
        if (!v33)
          goto LABEL_22;
        v24 = sub_21A693A8C(v12, v14, (uint64_t)"%kO=%O", v25, v26, v27, v28, v29, v33);
        if ((_DWORD)v24)
          break;
      }
      if (v11 == ++v15)
        goto LABEL_17;
    }
    v30 = v24;
    goto LABEL_25;
  }
LABEL_17:
  if (!CFDictionaryGetCount(v14))
  {
    v30 = 4294960569;
LABEL_25:
    CFRelease(v14);
    return v30;
  }
  v30 = 0;
  *a2 = v14;
  return v30;
}

uint64_t sub_21A6FD998(const void *a1, __CFDictionary **a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  CFMutableDictionaryRef Mutable;
  __CFDictionary *v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  const void *v22;
  const void *v23;
  const void **v24;

  if (dword_2550F4508 <= 800 && (dword_2550F4508 != -1 || sub_21A69876C((uint64_t)&dword_2550F4508, 0x320u)))
    sub_21A698FDC((uint64_t)&dword_2550F4508, (uint64_t)"OSStatus _CopyNetworksFilter80211g(CFDictionaryRef, CFDictionaryRef *)", 800, (uint64_t)"\n", a5, a6, a7, a8, v21);
  v24 = 0;
  v10 = 4294960591;
  if (a1 && a2)
  {
    v22 = 0;
    v23 = 0;
    v10 = sub_21A695640(a1, &v24);
    if (!(_DWORD)v10)
    {
      if (!v24)
        return 4294960568;
      Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
      if (Mutable)
      {
        v12 = Mutable;
        while (sub_21A6956DC((uint64_t *)v24, &v23, &v22))
        {
          if (!sub_21A6FD6D0((uint64_t)v22, v13, v14, v15, v16, v17, v18, v19))
            CFDictionarySetValue(v12, v23, v22);
        }
        if (CFDictionaryGetCount(v12))
        {
          v10 = 0;
          *a2 = v12;
        }
        else
        {
          CFRelease(v12);
          v10 = 4294960569;
        }
      }
      else
      {
        v10 = 4294960568;
      }
    }
    if (v24)
      sub_21A6956D0(v24);
  }
  return v10;
}

uint64_t sub_21A6FDAE8(CFArrayRef theArray, __CFArray **a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  CFIndex Count;
  uint64_t v11;
  const __CFAllocator *v12;
  CFMutableArrayRef Mutable;
  __CFArray *v14;
  CFIndex v15;
  const void *ValueAtIndex;
  const char *v17;
  uint64_t v18;
  const __CFString *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;

  if (dword_2550F4508 <= 800 && (dword_2550F4508 != -1 || sub_21A69876C((uint64_t)&dword_2550F4508, 0x320u)))
    sub_21A698FDC((uint64_t)&dword_2550F4508, (uint64_t)"OSStatus _CopyNetworksFilterDuplicateNames(CFArrayRef, CFArrayRef *)", 800, (uint64_t)"\n", a5, a6, a7, a8, v28);
  if (!a2)
    return 4294960591;
  if (!theArray)
    return 4294960569;
  Count = CFArrayGetCount(theArray);
  if (!Count)
    return 4294960569;
  v11 = Count;
  v12 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD690]);
  if (!Mutable)
    return 4294960568;
  v14 = Mutable;
  if (v11 >= 1)
  {
    v15 = 0;
    while (1)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(theArray, v15);
      if (!ValueAtIndex)
      {
        v26 = 4294960568;
        goto LABEL_25;
      }
      v18 = (uint64_t)ValueAtIndex;
      v19 = (const __CFString *)sub_21A72E204((uint64_t)ValueAtIndex, v17);
      if (v19)
      {
        if (sub_21A68F700(v19, 0, v14) == -1)
        {
          v25 = sub_21A693A8C(v12, v14, (uint64_t)"%O", v20, v21, v22, v23, v24, v18);
          if ((_DWORD)v25)
            break;
        }
      }
      if (v11 == ++v15)
        goto LABEL_16;
    }
    v26 = v25;
    goto LABEL_25;
  }
LABEL_16:
  if (!CFArrayGetCount(v14))
  {
    v26 = 4294960569;
LABEL_25:
    CFRelease(v14);
    return v26;
  }
  v26 = 0;
  *a2 = v14;
  return v26;
}

uint64_t sub_21A6FDC6C(CFArrayRef theArray, const __CFDictionary *a2, CFTypeRef *a3)
{
  const char *v6;
  const char *v7;
  uint64_t v8;
  const __CFArray *v9;
  const __CFArray *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  CFTypeRef v17;
  CFTypeRef cf;

  cf = 0;
  if (!a2)
    return 4294960591;
  if (theArray)
  {
    if (CFArrayGetCount(theArray))
    {
      if (sub_21A68E2C8((uint64_t)a2) - 3 <= 1 && !sub_21A68E31C(a2))
      {
        sub_21A72E304((uint64_t)a2, v6);
        sub_21A72E324((uint64_t)a2, v7);
      }
      v9 = (const __CFArray *)sub_21A72E364((uint64_t)theArray);
      if (v9)
      {
        v10 = v9;
        if (CFArrayGetCount(v9))
        {
          v8 = sub_21A6FDAE8(v10, (__CFArray **)&cf, v11, v12, v13, v14, v15, v16);
          CFRelease(v10);
          if (!(_DWORD)v8)
          {
            v17 = cf;
            if (!cf)
              return 4294960568;
            v8 = 0;
            if (a3)
            {
              *a3 = cf;
              return v8;
            }
LABEL_18:
            CFRelease(v17);
            return v8;
          }
LABEL_17:
          v17 = cf;
          if (!cf)
            return v8;
          goto LABEL_18;
        }
        CFRelease(v10);
      }
    }
    v8 = 4294960569;
    goto LABEL_17;
  }
  return 4294960569;
}

BOOL sub_21A6FDD90(const __CFString *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  char v11;

  if (dword_2550F4508 <= 800 && (dword_2550F4508 != -1 || sub_21A69876C((uint64_t)&dword_2550F4508, 0x320u)))
    sub_21A698FDC((uint64_t)&dword_2550F4508, (uint64_t)"Boolean _HostNotUsingWireless(CFDictionaryRef)", 800, (uint64_t)"\n", a5, a6, a7, a8, v10);
  v11 = 0;
  sub_21A693B94(a1, (uint64_t)&v11, (UInt8 *)"%ks:BOOL", a4, a5, a6, a7, a8, (uint64_t)"BSAutoGuessContext_HostNotUsingWireless");
  return v11 != 0;
}

BOOL sub_21A6FDE30(const __CFString *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  char v11;

  if (dword_2550F4508 <= 800 && (dword_2550F4508 != -1 || sub_21A69876C((uint64_t)&dword_2550F4508, 0x320u)))
    sub_21A698FDC((uint64_t)&dword_2550F4508, (uint64_t)"Boolean _HostHasPreferredNetworkSupport(CFDictionaryRef)", 800, (uint64_t)"\n", a5, a6, a7, a8, v10);
  v11 = 0;
  sub_21A693B94(a1, (uint64_t)&v11, (UInt8 *)"%ks:BOOL", a4, a5, a6, a7, a8, (uint64_t)"BSAutoGuessContext_HostHasPreferredNetworkSupport");
  return v11 != 0;
}

uint64_t sub_21A6FDED0(CFDictionaryRef theDict, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v12;
  const void **v13;

  if (dword_2550F4508 <= 800 && (dword_2550F4508 != -1 || sub_21A69876C((uint64_t)&dword_2550F4508, 0x320u)))
    sub_21A698FDC((uint64_t)&dword_2550F4508, (uint64_t)"OSStatus _GetTheOnlyDictionaryKey(CFDictionaryRef, CFStringRef *)", 800, (uint64_t)"\n", a5, a6, a7, a8, v12);
  v13 = 0;
  v10 = 4294960591;
  if (theDict && a2)
  {
    v12 = 0;
    if (CFDictionaryGetCount(theDict) == 1)
    {
      v10 = sub_21A695640(theDict, &v13);
      if (!(_DWORD)v10)
      {
        if (!v13)
          return 4294960568;
        sub_21A6956DC((uint64_t *)v13, &v12, 0);
        if (v12)
        {
          v10 = 0;
          *a2 = v12;
        }
        else
        {
          v10 = 4294960569;
        }
      }
    }
    else
    {
      v10 = 4294960586;
    }
    if (v13)
      sub_21A6956D0(v13);
  }
  return v10;
}

uint64_t sub_21A6FDFD0(CFDictionaryRef theDict, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v12;
  const void **v13;

  if (dword_2550F4508 <= 800 && (dword_2550F4508 != -1 || sub_21A69876C((uint64_t)&dword_2550F4508, 0x320u)))
    sub_21A698FDC((uint64_t)&dword_2550F4508, (uint64_t)"OSStatus _GetTheOnlyDictionaryValue(CFDictionaryRef, CFTypeRef *)", 800, (uint64_t)"\n", a5, a6, a7, a8, v12);
  v13 = 0;
  v10 = 4294960591;
  if (theDict && a2)
  {
    v12 = 0;
    if (CFDictionaryGetCount(theDict) == 1)
    {
      v10 = sub_21A695640(theDict, &v13);
      if (!(_DWORD)v10)
      {
        if (!v13)
          return 4294960568;
        sub_21A6956DC((uint64_t *)v13, 0, &v12);
        if (v12)
        {
          v10 = 0;
          *a2 = v12;
        }
        else
        {
          v10 = 4294960569;
        }
      }
    }
    else
    {
      v10 = 4294960586;
    }
    if (v13)
      sub_21A6956D0(v13);
  }
  return v10;
}

void sub_21A6FE0D0(const __CFString *a1, const __CFArray *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v10;
  CFIndex Count;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  CFIndex v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  const __CFString *v24;
  _BOOL4 v25;
  uint64_t v26;
  const __CFString *v27;
  const __CFString *v28;

  if (dword_2550F4508 <= 800 && (dword_2550F4508 != -1 || sub_21A69876C((uint64_t)&dword_2550F4508, 0x320u)))
    sub_21A698FDC((uint64_t)&dword_2550F4508, (uint64_t)"OSStatus _UpdateBrowsedBaseStationsWithBrowseInfo(CFDictionaryRef, CFMutableArrayRef)", 800, (uint64_t)"\n", a5, a6, a7, a8, v26);
  if (a1)
  {
    if (a2)
    {
      v27 = 0;
      v28 = 0;
      sub_21A693B94(a1, (uint64_t)&v28, (UInt8 *)"%ks", a4, a5, a6, a7, a8, (uint64_t)"raMA");
      if (!v10)
      {
        if (v28)
        {
          Count = CFArrayGetCount(a2);
          if (Count < 1)
          {
LABEL_19:
            if (dword_2550F4508 <= 800 && (dword_2550F4508 != -1 || sub_21A69876C((uint64_t)&dword_2550F4508, 0x320u)))
              sub_21A698FDC((uint64_t)&dword_2550F4508, (uint64_t)"OSStatus _UpdateBrowsedBaseStationsWithBrowseInfo(CFDictionaryRef, CFMutableArrayRef)", 800, (uint64_t)"tempMACAddress: %@ was not found -- appending", v13, v14, v15, v16, (uint64_t)v28);
            CFArrayAppendValue(a2, a1);
          }
          else
          {
            v17 = Count;
            v18 = 0;
            while (1)
            {
              sub_21A693B94((const __CFString *)a2, (uint64_t)&v27, (UInt8 *)"[*].%ks", v12, v13, v14, v15, v16, v18);
              if (v23)
                break;
              v24 = v27;
              if (!v27)
                break;
              if (dword_2550F4508 <= 800)
              {
                if (dword_2550F4508 != -1 || (v25 = sub_21A69876C((uint64_t)&dword_2550F4508, 0x320u), v24 = v27, v25))
                {
                  sub_21A698FDC((uint64_t)&dword_2550F4508, (uint64_t)"OSStatus _UpdateBrowsedBaseStationsWithBrowseInfo(CFDictionaryRef, CFMutableArrayRef)", 800, (uint64_t)"Comparing nextMACAddress: %@ and tempMACAddress: %@", v19, v20, v21, v22, (uint64_t)v24);
                  v24 = v27;
                }
              }
              if (sub_21A6D039C(v24, v28))
              {
                if (dword_2550F4508 <= 800
                  && (dword_2550F4508 != -1 || sub_21A69876C((uint64_t)&dword_2550F4508, 0x320u)))
                {
                  sub_21A698FDC((uint64_t)&dword_2550F4508, (uint64_t)"OSStatus _UpdateBrowsedBaseStationsWithBrowseInfo(CFDictionaryRef, CFMutableArrayRef)", 800, (uint64_t)"tempMACAddress: %@ was found", v13, v14, v15, v16, (uint64_t)v28);
                }
                return;
              }
              if (v17 == ++v18)
                goto LABEL_19;
            }
          }
        }
      }
    }
  }
}

void sub_21A6FE318(CFArrayRef theArray, const __CFArray *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  CFIndex Count;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  CFIndex v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  int v25;
  uint64_t v26;
  const __CFString *v27;

  if (dword_2550F4508 <= 800 && (dword_2550F4508 != -1 || sub_21A69876C((uint64_t)&dword_2550F4508, 0x320u)))
    sub_21A698FDC((uint64_t)&dword_2550F4508, (uint64_t)"OSStatus _UpdateBrowsedBaseStationsWithRecords(CFArrayRef, CFMutableArrayRef)", 800, (uint64_t)"\n", a5, a6, a7, a8, v26);
  if (theArray)
  {
    if (a2)
    {
      Count = CFArrayGetCount(theArray);
      if (Count >= 1)
      {
        v16 = Count;
        v17 = 0;
        v27 = 0;
        do
        {
          sub_21A693B94((const __CFString *)theArray, (uint64_t)&v27, (UInt8 *)"[*]", v11, v12, v13, v14, v15, v17);
          if (v24)
            break;
          if (!v27)
            break;
          sub_21A6FE0D0(v27, a2, v18, v19, v20, v21, v22, v23);
          if (v25)
            break;
          ++v17;
        }
        while (v16 != v17);
      }
    }
  }
}

void sub_21A6FE410(__CFArray *a1, const __CFString *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16[2];

  if (a1)
  {
    if (a2)
    {
      *(_QWORD *)v16 = 0;
      sub_21A693B94(a2, (uint64_t)v16, (UInt8 *)"%kO", a4, a5, a6, a7, a8, (uint64_t)CFSTR("SSID_STR"));
      if (!v10)
      {
        if (*(_QWORD *)v16)
        {
          if (sub_21A68F700(*(const __CFString **)v16, 0, a1) == -1)
            sub_21A693A8C((const __CFAllocator *)*MEMORY[0x24BDBD240], a1, (uint64_t)"%O", v11, v12, v13, v14, v15, (uint64_t)a2);
        }
      }
    }
  }
}

uint64_t sub_21A6FE4B8(const __CFString *a1, const __CFArray *a2, _QWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  CFIndex v14;
  const void *ValueAtIndex;
  uint64_t v16;
  const __CFString *v17;

  if (dword_2550F4508 <= 800 && (dword_2550F4508 != -1 || sub_21A69876C((uint64_t)&dword_2550F4508, 0x320u)))
    sub_21A698FDC((uint64_t)&dword_2550F4508, (uint64_t)"OSStatus _GetLocalBrowseInfoForRemoteBase(CFDictionaryRef, CFArrayRef, CFDictionaryRef *)", 800, (uint64_t)"\n", a5, a6, a7, a8, v16);
  v11 = 4294960591;
  if (a1)
  {
    if (a2)
    {
      if (a3)
      {
        v17 = 0;
        sub_21A693B94(a1, (uint64_t)&v17, (UInt8 *)"%ks.%ks", a4, a5, a6, a7, a8, (uint64_t)"txt");
        v11 = v12;
        if (!(_DWORD)v12)
        {
          if (v17)
          {
            v14 = sub_21A68F3C8(a2, v17);
            v11 = 4294960569;
            if (v14 != -1)
            {
              ValueAtIndex = CFArrayGetValueAtIndex(a2, v14);
              *a3 = ValueAtIndex;
              if (ValueAtIndex)
                return 0;
              else
                return 4294960569;
            }
          }
          else
          {
            return 4294960568;
          }
        }
      }
    }
  }
  return v11;
}

uint64_t sub_21A6FE5C0(CFDictionaryRef theDict, CFTypeRef *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  if (dword_2550F4508 <= 800 && (dword_2550F4508 != -1 || sub_21A69876C((uint64_t)&dword_2550F4508, 0x320u)))
    sub_21A698FDC((uint64_t)&dword_2550F4508, (uint64_t)"OSStatus _CreateBrowseInfoForRemoteBase(CFDictionaryRef, CFDictionaryRef *)", 800, (uint64_t)"\n", a5, a6, a7, a8, v16);
  result = 4294960591;
  if (theDict && a2)
  {
    if (CFDictionaryGetValue(theDict, CFSTR("txt")))
    {
      result = sub_21A692FEC((const __CFAllocator *)*MEMORY[0x24BDBD240], a2, (uint64_t)"{%##O%##O}", v11, v12, v13, v14, v15, (uint64_t)theDict);
      if (!(_DWORD)result)
      {
        if (*a2)
          return 0;
        else
          return 4294960568;
      }
    }
    else
    {
      return 4294960591;
    }
  }
  return result;
}

uint64_t sub_21A6FE694(const void *a1, __CFArray **a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  const __CFAllocator *v11;
  CFMutableArrayRef Mutable;
  __CFArray *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  CFTypeRef cf;
  CFDictionaryRef theDict;
  const void **v30;

  if (dword_2550F4508 <= 800 && (dword_2550F4508 != -1 || sub_21A69876C((uint64_t)&dword_2550F4508, 0x320u)))
    sub_21A698FDC((uint64_t)&dword_2550F4508, (uint64_t)"OSStatus _RemoteBrowseResultsToBaseStationArray(CFDictionaryRef, CFArrayRef *)", 800, (uint64_t)"\n", a5, a6, a7, a8, v27);
  v30 = 0;
  v10 = 4294960591;
  if (a1 && a2)
  {
    cf = 0;
    theDict = 0;
    v11 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
    Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD690]);
    if (Mutable)
    {
      v13 = Mutable;
      v10 = sub_21A695640(a1, &v30);
      if (!(_DWORD)v10)
      {
        if (v30)
        {
          while (1)
          {
            if (!sub_21A6956DC((uint64_t *)v30, 0, &theDict))
            {
              v10 = 0;
              *a2 = v13;
              goto LABEL_22;
            }
            v20 = sub_21A6FE5C0(theDict, &cf, v14, v15, v16, v17, v18, v19);
            if ((_DWORD)v20)
              break;
            if (!cf)
              goto LABEL_18;
            v10 = sub_21A693A8C(v11, v13, (uint64_t)"%O", v21, v22, v23, v24, v25, (uint64_t)cf);
            if (cf)
            {
              CFRelease(cf);
              cf = 0;
            }
            if ((_DWORD)v10)
              goto LABEL_21;
          }
          v10 = v20;
        }
        else
        {
LABEL_18:
          v10 = 4294960568;
        }
      }
LABEL_21:
      CFRelease(v13);
    }
    else
    {
      v10 = 4294960568;
    }
LABEL_22:
    if (v30)
      sub_21A6956D0(v30);
  }
  return v10;
}

uint64_t sub_21A6FE80C(uint64_t a1, const __CFDictionary *a2, uint64_t a3, _BYTE *a4, _QWORD *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v10;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  const __CFString *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  CFTypeRef cf;
  CFMutableDictionaryRef v50;
  CFTypeRef v51;
  int *v52;

  v10 = a3;
  v52 = 0;
  cf = 0;
  if (a4)
    *a4 = 0;
  v50 = 0;
  v51 = 0;
  sub_21A6FCC5C((uint64_t)"_CopyAllNeededSettingsFromBaseStation for base:\n", (uint64_t)a2, a3, (uint64_t)a4, (uint64_t)a5, a6, a7, a8);
  v13 = 4294960591;
  if (!a1 || !a2 || !a5)
    goto LABEL_8;
  if (sub_21A68E3E4(a2))
    goto LABEL_7;
  v22 = sub_21A68F104((const __CFString *)a2, v14, v15, v16, v17, v18, v19, v20);
  if (!(sub_21A6FCFE4((const __CFString *)a2, v23, v24, v25, v26, v27, v28, v29) | v22))
  {
    v13 = sub_21A6CFA78((unsigned int *)"AMarAMalAMawiFiWANarSDarVCawforPgBhdnEhdRLysPIawPIalVStnLCAtFAnslFesRSarFbsuSYHPWPyslFystSysgIys", (__CFArray **)&cf);
    if ((_DWORD)v13)
      goto LABEL_8;
    if (!cf)
    {
      v13 = 4294960568;
      goto LABEL_10;
    }
  }
  v13 = sub_21A6D1350((uint64_t *)&v52, (const __CFString *)a2);
  if ((_DWORD)v13)
    goto LABEL_8;
  if (!v52)
    goto LABEL_39;
  v37 = sub_21A68EE6C((const __CFString *)a2, v30, v31, v32, v33, v34, v35, v36);
  if (!v37)
  {
LABEL_7:
    v13 = 4294960569;
    goto LABEL_8;
  }
  if (!v22)
  {
    v43 = (uint64_t)v37;
    if (dword_2550F4508 <= 800 && (dword_2550F4508 != -1 || sub_21A69876C((uint64_t)&dword_2550F4508, 0x320u)))
      sub_21A698FDC((uint64_t)&dword_2550F4508, (uint64_t)"OSStatus _CopyAllNeededSettingsFromBaseStation(AutoGuessContextRef, CFDictionaryRef, Boolean, Boolean *, CFDictionaryRef *)", 800, (uint64_t)"Calling back for password promptflag: %d\n", v38, v39, v40, v41, v10);
    v44 = sub_21A70C6C4(*(_QWORD *)(a1 + 48), CFSTR("keychainBaseStationType"), (const __CFString *)a2, &v51, v38, v39, v40, v41);
    v13 = v44;
    if (v10 && (_DWORD)v44 == -6727)
      v13 = sub_21A70CA8C(*(_QWORD *)(a1 + 48), CFSTR("keychainBaseStationType"), v43, &v51, v45, v46, v47, v48);
    if ((_DWORD)v13)
      goto LABEL_8;
    if (v51)
    {
      sub_21A6D42C8((uint64_t)v52, 1651721296, (const __CFString *)v51);
      if (v51)
      {
        CFRelease(v51);
        v51 = 0;
      }
      goto LABEL_18;
    }
LABEL_39:
    v13 = 4294960568;
    goto LABEL_8;
  }
LABEL_18:
  v42 = sub_21A6D19B8((uint64_t)v52, (const __CFArray *)cf, 1);
  if (a4 && v42 == -6768)
  {
    *a4 = 1;
    goto LABEL_7;
  }
  if (v42)
    goto LABEL_7;
  v13 = sub_21A6D4710((uint64_t)v52, &v50);
  if (!(_DWORD)v13)
  {
    if (v50)
    {
      v13 = 0;
      *a5 = v50;
      goto LABEL_8;
    }
    goto LABEL_39;
  }
LABEL_8:
  if (cf)
  {
    CFRelease(cf);
    cf = 0;
  }
LABEL_10:
  if (v52)
    sub_21A6D12CC(v52);
  return v13;
}

uint64_t sub_21A6FEA6C(uint64_t a1, const __CFDictionary *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 v14;
  CFTypeRef cf;

  cf = 0;
  v14 = 0;
  if (a1)
  {
    if (a2)
    {
      sub_21A6FCC5C((uint64_t)"_IsSecurityErrorWithBase for base:\n", (uint64_t)a2, a3, a4, a5, a6, a7, a8);
      sub_21A6FE80C(a1, a2, 0, &v14, &cf, v10, v11, v12);
      if (cf)
        CFRelease(cf);
    }
  }
  return v14;
}

uint64_t sub_21A6FEADC(uint64_t a1, const __CFString *a2, uint64_t a3, CFTypeRef *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  const __CFAllocator *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  CFTypeRef cf;

  cf = 0;
  if (!a1)
    return 4294960591;
  v60 = 0;
  v61 = 0;
  v9 = 4294960591;
  if (!a4)
    goto LABEL_32;
  if (!a2)
    goto LABEL_32;
  if (!*(_QWORD *)(a1 + 16))
    goto LABEL_32;
  sub_21A6FCC5C((uint64_t)"Get cached settings for base station:\n", (uint64_t)a2, a3, (uint64_t)a4, a5, a6, a7, a8);
  sub_21A693B94(a2, (uint64_t)&v61, (UInt8 *)"%ks", v13, v14, v15, v16, v17, (uint64_t)"raMA");
  v9 = v18;
  if ((_DWORD)v18)
    goto LABEL_32;
  if (!v61)
    goto LABEL_31;
  v60 = 0;
  if (CFDictionaryContainsKey((CFDictionaryRef)a2, CFSTR("raM2")))
  {
    sub_21A693B94(a2, (uint64_t)&v60, (UInt8 *)"%ks", v19, v20, v21, v22, v23, (uint64_t)"raM2");
    v9 = v24;
    if ((_DWORD)v24)
      goto LABEL_32;
    v25 = v60;
    if (!v60)
      goto LABEL_31;
    if (dword_2550F4508 <= 800)
    {
      if (dword_2550F4508 != -1)
      {
LABEL_14:
        sub_21A698FDC((uint64_t)&dword_2550F4508, (uint64_t)"OSStatus _CopyCachedSettingsForBaseStation(AutoGuessContextRef, CFDictionaryRef, Boolean, CFDictionaryRef *)", 800, (uint64_t)"inBaseStation has Radio MAC Address 2: %@", v20, v21, v22, v23, v25);
        goto LABEL_15;
      }
      if (sub_21A69876C((uint64_t)&dword_2550F4508, 0x320u))
      {
        v25 = v60;
        goto LABEL_14;
      }
    }
  }
LABEL_15:
  sub_21A693B94(*(const __CFString **)(a1 + 16), (uint64_t)&cf, (UInt8 *)"%kO:obj", v19, v20, v21, v22, v23, v61);
  v9 = v31;
  if ((_DWORD)v31 == -6727 && v60)
  {
    sub_21A693B94(*(const __CFString **)(a1 + 16), (uint64_t)&cf, (UInt8 *)"%kO:obj", v26, v27, v28, v29, v30, v60);
    v9 = v32;
  }
  if (!(_DWORD)v9)
    goto LABEL_41;
  if ((_DWORD)v9 != -6727)
    goto LABEL_32;
  v33 = sub_21A6FE80C(a1, (const __CFDictionary *)a2, a3, 0, &cf, v28, v29, v30);
  if ((_DWORD)v33 == -6727)
  {
    v50 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
    cf = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, 0, 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
    if (!cf)
      return 4294960568;
    v9 = sub_21A693A8C(v50, *(__CFArray **)(a1 + 16), (uint64_t)"%kO=%O", v51, v52, v53, v54, v55, v61);
    if ((_DWORD)v9)
      goto LABEL_32;
    if (dword_2550F4508 <= 800 && (dword_2550F4508 != -1 || sub_21A69876C((uint64_t)&dword_2550F4508, 0x320u)))
      sub_21A698FDC((uint64_t)&dword_2550F4508, (uint64_t)"OSStatus _CopyCachedSettingsForBaseStation(AutoGuessContextRef, CFDictionaryRef, Boolean, CFDictionaryRef *)", 800, (uint64_t)"Added BLANK settings for %@ to cache.\n", v56, v57, v58, v59, v61);
LABEL_41:
    if (cf)
    {
      if (CFDictionaryGetCount((CFDictionaryRef)cf))
      {
        v9 = 0;
        *a4 = cf;
        return v9;
      }
      v9 = 4294960569;
      goto LABEL_32;
    }
    return 4294960568;
  }
  v9 = v33;
  if ((_DWORD)v33)
    goto LABEL_32;
  if (!cf)
    return 4294960568;
  sub_21A693B94((const __CFString *)cf, (uint64_t)&v61, (UInt8 *)"%kC", v34, v35, v36, v37, v38, 1918979393);
  v9 = v44;
  if ((_DWORD)v44)
    goto LABEL_32;
  if (!v61)
  {
LABEL_31:
    v9 = 4294960568;
    goto LABEL_32;
  }
  v9 = sub_21A693A8C((const __CFAllocator *)*MEMORY[0x24BDBD240], *(__CFArray **)(a1 + 16), (uint64_t)"%kO=%O", v39, v40, v41, v42, v43, v61);
  if (!(_DWORD)v9)
  {
    if (dword_2550F4508 <= 800 && (dword_2550F4508 != -1 || sub_21A69876C((uint64_t)&dword_2550F4508, 0x320u)))
      sub_21A698FDC((uint64_t)&dword_2550F4508, (uint64_t)"OSStatus _CopyCachedSettingsForBaseStation(AutoGuessContextRef, CFDictionaryRef, Boolean, CFDictionaryRef *)", 800, (uint64_t)"Added settings for %@ to cache.\n", v45, v46, v47, v48, v61);
    goto LABEL_41;
  }
LABEL_32:
  if (cf)
    CFRelease(cf);
  return v9;
}

void sub_21A6FEE4C(const __CFString *a1, int *a2, CFTypeRef *a3, BOOL *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  const __CFString *v17;

  if (dword_2550F4508 <= 800 && (dword_2550F4508 != -1 || sub_21A69876C((uint64_t)&dword_2550F4508, 0x320u)))
    sub_21A698FDC((uint64_t)&dword_2550F4508, (uint64_t)"OSStatus _NetworkInfoFromSettingsDictionary(CFDictionaryRef, BSNetworkMode *, CFStringRef *, Boolean *)", 800, (uint64_t)"\n", a5, a6, a7, a8, v16);
  if (a1)
  {
    if (a2)
    {
      v17 = 0;
      sub_21A693B94(a1, (uint64_t)&v17, (UInt8 *)"%kC", (uint64_t)a4, a5, a6, a7, a8, 1466517097);
      if (!v15)
      {
        if (v17)
          sub_21A70EEA0(v17, a2, a3, a4, 0, v12, v13, v14);
      }
    }
  }
}

uint64_t sub_21A6FEF24(uint64_t a1, int *a2, CFTypeRef *a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  CFNumberRef number;
  CFTypeRef cf;

  number = 0;
  cf = 0;
  if (dword_2550F4508 <= 800 && (dword_2550F4508 != -1 || sub_21A69876C((uint64_t)&dword_2550F4508, 0x320u)))
    sub_21A698FDC((uint64_t)&dword_2550F4508, (uint64_t)"OSStatus _NetworkAndRouterInfoFromInstance(BSRef, BSNetworkMode *, CFStringRef *, BSRouterMode *)", 800, (uint64_t)"\n", a5, a6, a7, a8, (uint64_t)number);
  v12 = 4294960591;
  if (a1)
  {
    if (a2)
    {
      v12 = sub_21A6D4430(a1, 1466517097, (CFMutableDictionaryRef *)&cf);
      if (!(_DWORD)v12)
      {
        if (!a4)
        {
LABEL_12:
          sub_21A70EEA0((const __CFString *)cf, a2, a3, 0, 0, v13, v14, v15);
          v12 = v16;
          goto LABEL_13;
        }
        v12 = sub_21A6D4430(a1, 1651724877, &number);
        if ((_DWORD)v12)
          goto LABEL_13;
        if (number)
        {
          if (CFNumberGetValue(number, kCFNumberSInt32Type, a4))
            goto LABEL_12;
          v12 = 4294960553;
        }
        else
        {
          v12 = 4294960568;
        }
      }
    }
  }
LABEL_13:
  if (cf)
  {
    CFRelease(cf);
    cf = 0;
  }
  if (number)
    CFRelease(number);
  return v12;
}

uint64_t sub_21A6FF060(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  CFTypeRef v10;
  uint64_t v12;
  CFTypeRef cf;

  if (dword_2550F4508 <= 800 && (dword_2550F4508 != -1 || sub_21A69876C((uint64_t)&dword_2550F4508, 0x320u)))
    sub_21A698FDC((uint64_t)&dword_2550F4508, (uint64_t)"Boolean _ConflictingDHCPRange(BSRef)", 800, (uint64_t)"\n", a5, a6, a7, a8, v12);
  cf = 0;
  if (a1
    && !sub_21A6D523C(a1, 2002864464)
    && sub_21A6CED60(a1, 1684554343, (__CFString **)&cf))
  {
    v9 = sub_21A6CED60(a1, 1684555118, (__CFString **)&cf) ^ 1;
  }
  else
  {
    v9 = 1;
  }
  v10 = cf;
  if (cf && dword_2550F4508 <= 800)
  {
    if (dword_2550F4508 == -1)
    {
      if (!sub_21A69876C((uint64_t)&dword_2550F4508, 0x320u))
      {
LABEL_16:
        v10 = cf;
        goto LABEL_17;
      }
      v10 = cf;
    }
    sub_21A698FDC((uint64_t)&dword_2550F4508, (uint64_t)"Boolean _ConflictingDHCPRange(BSRef)", 800, (uint64_t)"errorString: %@\n", a5, a6, a7, a8, (uint64_t)v10);
    goto LABEL_16;
  }
LABEL_17:
  if (v10)
    CFRelease(v10);
  return v9;
}

uint64_t sub_21A6FF198(uint64_t a1, const __CFString *a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  int v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  const UInt8 *BytePtr;
  const UInt8 *v25;
  unint64_t v26;
  unint64_t Length;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  const UInt8 *v34;
  int v35;
  CFTypeRef cf;
  CFDataRef theData;

  cf = 0;
  theData = 0;
  v8 = 4294960591;
  if (a1)
  {
    if (a2)
    {
      if (a4)
      {
        v11 = a3;
        sub_21A6FCC5C((uint64_t)"_BaseStationCountOfPortsInUse for base station:\n", (uint64_t)a2, a3, (uint64_t)a4, a5, a6, a7, a8);
        v8 = sub_21A6FEADC(a1, a2, 0, &cf, v13, v14, v15, v16);
        if (!(_DWORD)v8)
        {
          if (!cf)
            return 4294960568;
          sub_21A693B94((const __CFString *)cf, (uint64_t)&theData, (UInt8 *)"%kC", v17, v18, v19, v20, v21, 1346918739);
          v8 = v23;
          if (!(_DWORD)v23)
          {
            if (theData && (BytePtr = CFDataGetBytePtr(theData)) != 0)
            {
              v25 = BytePtr;
              v26 = v11 != 0;
              Length = CFDataGetLength(theData);
              v32 = 0;
              v33 = (Length >> 2) - v26;
              if (Length >> 2 > v26)
              {
                v34 = &v25[4 * v26];
                do
                {
                  v35 = *(_DWORD *)v34;
                  v34 += 4;
                  if (v35)
                    ++v32;
                  --v33;
                }
                while (v33);
              }
              if (dword_2550F4508 <= 800 && (dword_2550F4508 != -1 || sub_21A69876C((uint64_t)&dword_2550F4508, 0x320u)))
                sub_21A698FDC((uint64_t)&dword_2550F4508, (uint64_t)"OSStatus _BaseStationCountOfPortsInUse(AutoGuessContextRef, CFDictionaryRef, eWhichPorts, CFIndex *)", 800, (uint64_t)"portsInUseCountIs: %d", v28, v29, v30, v31, v32);
              v8 = 0;
              *a4 = v32;
            }
            else
            {
              v8 = 4294960568;
            }
          }
        }
      }
    }
  }
  if (cf)
    CFRelease(cf);
  return v8;
}

uint64_t sub_21A6FF30C(uint64_t a1, const __CFString *a2, int a3, _BYTE *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  CFDataRef theData;
  CFTypeRef cf;

  if (dword_2550F4508 <= 800 && (dword_2550F4508 != -1 || sub_21A69876C((uint64_t)&dword_2550F4508, 0x320u)))
    sub_21A698FDC((uint64_t)&dword_2550F4508, (uint64_t)"OSStatus _BaseStationHasFeature(AutoGuessContextRef, CFDictionaryRef, ACPFeatureCode, Boolean *)", 800, (uint64_t)"\n", a5, a6, a7, a8, v20);
  theData = 0;
  cf = 0;
  v12 = 4294960591;
  if (a1)
  {
    if (a2)
    {
      if (a4)
      {
        v12 = sub_21A6FEADC(a1, a2, 0, &cf, a5, a6, a7, a8);
        if (!(_DWORD)v12)
        {
          if (!cf)
            return 4294960568;
          sub_21A693B94((const __CFString *)cf, (uint64_t)&theData, (UInt8 *)"%kC", v13, v14, v15, v16, v17, 1717920116);
          v12 = v19;
          if (!(_DWORD)v19)
          {
            if (theData)
            {
              v12 = 0;
              *a4 = sub_21A70F174(theData, a3);
            }
            else
            {
              v12 = 4294960568;
            }
          }
        }
      }
    }
  }
  if (cf)
    CFRelease(cf);
  return v12;
}

uint64_t sub_21A6FF430(uint64_t a1, CFDictionaryRef theDict, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;
  uint64_t v11;

  if (dword_2550F4508 <= 800 && (dword_2550F4508 != -1 || sub_21A69876C((uint64_t)&dword_2550F4508, 0x320u)))
    sub_21A698FDC((uint64_t)&dword_2550F4508, (uint64_t)"Boolean _BaseStationIsSimultaneousDualBand(AutoGuessContextRef, CFDictionaryRef)", 800, (uint64_t)"\n", a5, a6, a7, a8, v11);
  result = 0;
  if (a1 && theDict)
  {
    result = CFDictionaryContainsKey(theDict, CFSTR("raMA"));
    if ((_DWORD)result)
      return CFDictionaryContainsKey(theDict, CFSTR("raM2")) != 0;
  }
  return result;
}

uint64_t sub_21A6FF4D4(uint64_t a1, const __CFString *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;
  int v11;
  int v12;
  uint64_t v13;
  int v14;

  if (dword_2550F4508 <= 800 && (dword_2550F4508 != -1 || sub_21A69876C((uint64_t)&dword_2550F4508, 0x320u)))
    sub_21A698FDC((uint64_t)&dword_2550F4508, (uint64_t)"Boolean _BaseStationIsAudioPortInUse(AutoGuessContextRef, CFDictionaryRef)", 800, (uint64_t)"\n", a5, a6, a7, a8, v13);
  result = 0;
  if (a1 && a2)
  {
    v14 = 0;
    sub_21A693B94(a2, (uint64_t)&v14, (UInt8 *)"%ks.%kC:int", a4, a5, a6, a7, a8, (uint64_t)"txt");
    v12 = v11;
    result = 0;
    if (!v12)
      return v14 >> 7;
  }
  return result;
}

uint64_t sub_21A6FF594(uint64_t a1, const __CFString *a2, const __CFString *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  const __CFString *v15;
  unsigned __int8 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  int v41;
  int v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  char v56;
  int v57;
  const __CFString *v58;
  int v59;
  CFDataRef theData;
  const __CFString *v61;
  const __CFString *v62;
  const __CFString *v63;

  theData = 0;
  v61 = 0;
  v59 = 0;
  v58 = 0;
  v57 = 0;
  v62 = 0;
  v63 = 0;
  v14 = sub_21A6FEADC(a1, a2, 0, (CFTypeRef *)&v63, a5, a6, a7, a8);
  v15 = v63;
  v16 = 1;
  if (!v14 && v63)
  {
    if (sub_21A6FEADC(a1, a3, 0, (CFTypeRef *)&v62, v10, v11, v12, v13))
      goto LABEL_8;
    if (!v62)
      goto LABEL_8;
    sub_21A693B94(v63, (uint64_t)&theData, (UInt8 *)"%kC", v17, v18, v19, v20, v21, 1717920116);
    if (v27)
      goto LABEL_8;
    if (!theData)
      goto LABEL_8;
    sub_21A693B94(v62, (uint64_t)&v61, (UInt8 *)"%kC", v22, v23, v24, v25, v26, 1466517097);
    if (v33)
      goto LABEL_8;
    if (!v61)
      goto LABEL_8;
    sub_21A693B94(v61, (uint64_t)&v58, (UInt8 *)"%ks", v28, v29, v30, v31, v32, (uint64_t)"radios");
    if (v40)
      goto LABEL_8;
    if (!v58)
      goto LABEL_8;
    sub_21A693B94(v58, (uint64_t)&v59, (UInt8 *)"[*].%ks:int", v35, v36, v37, v38, v39, 0);
    if (v41)
      goto LABEL_8;
    if (v59 != 1 || sub_21A70F174(theData, 1112757313))
    {
      v42 = sub_21A70F174(theData, 1852787795);
      v43 = sub_21A70F174(theData, 1852788045);
      if (!(v42 | v43))
        goto LABEL_8;
      v49 = v43;
      sub_21A693B94(v58, (uint64_t)&v57, (UInt8 *)"[*].%ks:int", v44, v45, v46, v47, v48, 0);
      if (v55)
        goto LABEL_8;
      if ((v57 - 1) < 3)
      {
        v16 = v42 == 0;
LABEL_8:
        v15 = v63;
        goto LABEL_9;
      }
      if (v57 != 4)
        goto LABEL_8;
      if (!v49)
      {
        if (v42)
        {
          v56 = 0;
          sub_21A693B94(v58, (uint64_t)&v56, (UInt8 *)"[*].%ks:BOOL", v50, v51, v52, v53, v54, 0);
          v16 = v56 ^ 1;
        }
        goto LABEL_8;
      }
    }
    v16 = 0;
    goto LABEL_8;
  }
LABEL_9:
  if (v15)
  {
    CFRelease(v15);
    v63 = 0;
  }
  if (v62)
    CFRelease(v62);
  return v16;
}

uint64_t sub_21A6FF7B4(uint64_t a1, const __CFString *a2, const __CFArray *a3, const __CFString **a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  int v21;
  BOOL v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  const __CFString *v50;
  BOOL v51;
  int v52;
  uint64_t v53;
  int v54[2];
  int v55[2];
  const __CFString *v56;
  int v57;
  CFTypeRef cf;
  int v59;

  if (dword_2550F4508 <= 800 && (dword_2550F4508 != -1 || sub_21A69876C((uint64_t)&dword_2550F4508, 0x320u)))
    sub_21A698FDC((uint64_t)&dword_2550F4508, (uint64_t)"Boolean _BaseStationIsInSTAMode(AutoGuessContextRef, CFDictionaryRef, CFArrayRef, CFStringRef *)", 800, (uint64_t)"\n", a5, a6, a7, a8, v53);
  result = 0;
  v56 = 0;
  if (a1 && a2 && a4)
  {
    v59 = 0;
    cf = 0;
    v57 = 0;
    v13 = sub_21A6FEADC(a1, a2, 0, &cf, a5, a6, a7, a8);
    if (v13 == -6727)
    {
      *(_QWORD *)v55 = 0;
      sub_21A693B94(a2, (uint64_t)v55, (UInt8 *)"%ks.%ks", v14, v15, v16, v17, v18, (uint64_t)"txt");
      if (v29)
        return 0;
      if (!*(_QWORD *)v55)
        return 0;
      *(_QWORD *)v54 = 0;
      sub_21A693B94(a2, (uint64_t)v54, (UInt8 *)"%ks.%ks", v24, v25, v26, v27, v28, (uint64_t)"txt");
      if (v30 != -6727 && (v30 || !*(_QWORD *)v54))
        return 0;
      if (sub_21A68F8D8(*(const __CFString **)v55, 0, a3) != -1
        || *(_QWORD *)v54 && sub_21A68F8D8(*(const __CFString **)v54, 0, a3) != -1)
      {
        return 0;
      }
      sub_21A693B94(a2, (uint64_t)&v59, (UInt8 *)"%ks.%kC:int", v31, v32, v33, v34, v35, (uint64_t)"txt");
      if (v41)
        return 0;
      sub_21A693B94(a2, (uint64_t)&v56, (UInt8 *)"%ks.%ks", v36, v37, v38, v39, v40, (uint64_t)"txt");
      if (v42 == -6727)
      {
        v50 = sub_21A68EEAC(a2, v43, v44, v45, v46, v47, v48, v49);
        v56 = v50;
        v51 = v50 == 0;
      }
      else
      {
        v52 = v42;
        v50 = v56;
        v51 = v52 != 0;
      }
      if (v51 || !v50)
        return 0;
      v22 = (v59 & 0x18000) == 0;
LABEL_16:
      if (v22)
      {
        *a4 = v56;
        return 1;
      }
      return 0;
    }
    v19 = v13;
    result = 0;
    if (!v19)
    {
      result = (uint64_t)cf;
      if (cf)
      {
        sub_21A6FEE4C((const __CFString *)cf, &v57, (CFTypeRef *)&v56, 0, v15, v16, v17, v18);
        v21 = v20;
        if (cf)
          CFRelease(cf);
        result = 0;
        if (!v21)
        {
          if (v56)
          {
            v22 = v57 == 1;
            goto LABEL_16;
          }
        }
      }
    }
  }
  return result;
}

CFTypeRef sub_21A6FFA20(uint64_t a1, const __CFString *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  CFTypeRef result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  int v18;
  uint64_t v19;
  CFTypeRef cf;
  char v21;

  if (dword_2550F4508 <= 800 && (dword_2550F4508 != -1 || sub_21A69876C((uint64_t)&dword_2550F4508, 0x320u)))
    sub_21A698FDC((uint64_t)&dword_2550F4508, (uint64_t)"Boolean _BaseStationIsNATEnabled(AutoGuessContextRef, CFDictionaryRef)", 800, (uint64_t)"\n", a5, a6, a7, a8, v19);
  result = 0;
  if (a1)
  {
    if (a2)
    {
      v21 = 0;
      cf = 0;
      v16 = sub_21A6FEADC(a1, a2, 0, &cf, a5, a6, a7, a8);
      result = 0;
      if (!v16)
      {
        result = cf;
        if (cf)
        {
          sub_21A693B94((const __CFString *)cf, (uint64_t)&v21, (UInt8 *)"%kC:BOOL", v11, v12, v13, v14, v15, 1918979649);
          v18 = v17;
          if (cf)
            CFRelease(cf);
          if (v18)
            return 0;
          else
            return (CFTypeRef)(v21 != 0);
        }
      }
    }
  }
  return result;
}

CFTypeRef sub_21A6FFB18(uint64_t a1, const __CFString *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  CFTypeRef result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  int v17;
  CFTypeRef cf;
  BOOL v19;
  int v20;

  if (dword_2550F4508 <= 800 && (dword_2550F4508 != -1 || sub_21A69876C((uint64_t)&dword_2550F4508, 0x320u)))
    sub_21A698FDC((uint64_t)&dword_2550F4508, (uint64_t)"Boolean _BaseStationIsCreatingGuestNetwork(AutoGuessContextRef, CFDictionaryRef)", 800, (uint64_t)"\n", a5, a6, a7, a8, (uint64_t)cf);
  result = 0;
  if (a1)
  {
    if (a2)
    {
      v20 = 0;
      v19 = 0;
      cf = 0;
      v15 = sub_21A6FEADC(a1, a2, 0, &cf, a5, a6, a7, a8);
      result = 0;
      if (!v15)
      {
        result = cf;
        if (cf)
        {
          sub_21A6FEE4C((const __CFString *)cf, &v20, 0, &v19, v11, v12, v13, v14);
          v17 = v16;
          if (cf)
            CFRelease(cf);
          if (v17)
            return 0;
          else
            return (CFTypeRef)v19;
        }
      }
    }
  }
  return result;
}

BOOL sub_21A6FFC08(uint64_t a1, const __CFString *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BOOL8 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v18;
  unsigned int v19;
  CFStringRef theString;
  CFTypeRef cf;
  char buffer[256];
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  if (dword_2550F4508 <= 800 && (dword_2550F4508 != -1 || sub_21A69876C((uint64_t)&dword_2550F4508, 0x320u)))
    sub_21A698FDC((uint64_t)&dword_2550F4508, (uint64_t)"Boolean _BaseStationHasPublicRoutableIP(AutoGuessContextRef, CFDictionaryRef)", 800, (uint64_t)"\n", a5, a6, a7, a8, v18);
  v10 = 0;
  cf = 0;
  if (a1 && a2)
  {
    theString = 0;
    v19 = 0;
    v10 = 0;
    if (!sub_21A6FEADC(a1, a2, 0, &cf, a5, a6, a7, a8))
    {
      if (!cf)
        return 0;
      sub_21A693B94((const __CFString *)cf, (uint64_t)&theString, (UInt8 *)"%kC", v11, v12, v13, v14, v15, 2002864464);
      if (!v16 && theString && CFStringGetCString(theString, buffer, 256, 0x8000100u))
      {
        v10 = 0;
        if (!sub_21A6A16C4(buffer, 0, &v19, 0, 0, 0, 0))
          v10 = sub_21A6A10B4(bswap32(v19));
      }
      else
      {
        v10 = 0;
      }
    }
    if (cf)
      CFRelease(cf);
  }
  return v10;
}

CFTypeRef sub_21A6FFD88(uint64_t a1, const __CFString *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  CFTypeRef result;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  int v19;
  int v21;
  uint64_t v22;
  int v23;
  CFTypeRef cf;
  int v25;

  if (dword_2550F4508 <= 800 && (dword_2550F4508 != -1 || sub_21A69876C((uint64_t)&dword_2550F4508, 0x320u)))
    sub_21A698FDC((uint64_t)&dword_2550F4508, (uint64_t)"Boolean _BaseStationIsInCreateMode(AutoGuessContextRef, CFDictionaryRef)", 800, (uint64_t)"\n", a5, a6, a7, a8, v22);
  result = 0;
  if (a1 && a2)
  {
    v25 = 0;
    cf = 0;
    v23 = 0;
    v11 = sub_21A6FEADC(a1, a2, 0, &cf, a5, a6, a7, a8);
    if (v11 == -6727)
    {
      sub_21A693B94(a2, (uint64_t)&v25, (UInt8 *)"%ks.%kC:int", v12, v13, v14, v15, v16, (uint64_t)"txt");
      if (!v21)
        return (CFTypeRef)((v25 & 0x10000) == 0);
      return 0;
    }
    v17 = v11;
    result = 0;
    if (!v17)
    {
      result = cf;
      if (cf)
      {
        sub_21A6FEE4C((const __CFString *)cf, &v23, 0, 0, v13, v14, v15, v16);
        v19 = v18;
        if (cf)
          CFRelease(cf);
        if (!v19)
          return (CFTypeRef)(v23 == 0);
        return 0;
      }
    }
  }
  return result;
}

void sub_21A6FFEB8(uint64_t a1, const __CFString *a2, const void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  void *key;
  CFTypeRef cf;

  cf = a3;
  if (!a1 || !a2 || !*(_QWORD *)(a1 + 16))
    return;
  key = 0;
  sub_21A6FCC5C((uint64_t)"_SetCachedSettingsForBaseStation:\n", (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  if (a3)
  {
    sub_21A693B94(a2, (uint64_t)&key, (UInt8 *)"%ks", v12, v13, v14, v15, v16, (uint64_t)"raMA");
    if (v17 || !key)
      return;
    v38 = 0;
    if (!CFDictionaryContainsKey((CFDictionaryRef)a2, CFSTR("raM2")))
      goto LABEL_15;
    sub_21A693B94(a2, (uint64_t)&v38, (UInt8 *)"%ks", v18, v19, v20, v21, v22, (uint64_t)"raM2");
    if (v27)
      return;
    v28 = v38;
    if (!v38)
      return;
    if (dword_2550F4508 > 800)
      goto LABEL_15;
    if (dword_2550F4508 == -1)
    {
      if (!sub_21A69876C((uint64_t)&dword_2550F4508, 0x320u))
      {
LABEL_15:
        if (CFDictionaryContainsKey(*(CFDictionaryRef *)(a1 + 16), key))
        {
          CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a1 + 16), key);
          if (dword_2550F4508 <= 800 && (dword_2550F4508 != -1 || sub_21A69876C((uint64_t)&dword_2550F4508, 0x320u)))
            sub_21A698FDC((uint64_t)&dword_2550F4508, (uint64_t)"OSStatus _SetCachedSettingsForBaseStation(AutoGuessContextRef, CFDictionaryRef, CFDictionaryRef, Boolean)", 800, (uint64_t)"inContext->cachedBaseSttings contains tempMACAddress: %@ -- removing", v30, v31, v32, v33, (uint64_t)key);
        }
        else if (v38)
        {
          if (CFDictionaryContainsKey(*(CFDictionaryRef *)(a1 + 16), v38))
          {
            CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a1 + 16), v38);
            if (dword_2550F4508 <= 800 && (dword_2550F4508 != -1 || sub_21A69876C((uint64_t)&dword_2550F4508, 0x320u)))
              sub_21A698FDC((uint64_t)&dword_2550F4508, (uint64_t)"OSStatus _SetCachedSettingsForBaseStation(AutoGuessContextRef, CFDictionaryRef, CFDictionaryRef, Boolean)", 800, (uint64_t)"inContext->cachedBaseSttings contains tempMACAddress2: %@ -- removing", v30, v31, v32, v33, (uint64_t)v38);
          }
        }
        if (!sub_21A693A8C((const __CFAllocator *)*MEMORY[0x24BDBD240], *(__CFArray **)(a1 + 16), (uint64_t)"%kO=%O", v29, v30, v31, v32, v33, (uint64_t)key)&& dword_2550F4508 <= 800&& (dword_2550F4508 != -1 || sub_21A69876C((uint64_t)&dword_2550F4508, 0x320u)))
        {
          sub_21A698FDC((uint64_t)&dword_2550F4508, (uint64_t)"OSStatus _SetCachedSettingsForBaseStation(AutoGuessContextRef, CFDictionaryRef, CFDictionaryRef, Boolean)", 800, (uint64_t)"Added settings for %@ to cache.\n", v34, v35, v36, v37, (uint64_t)key);
        }
        return;
      }
      v28 = v38;
    }
    sub_21A698FDC((uint64_t)&dword_2550F4508, (uint64_t)"OSStatus _SetCachedSettingsForBaseStation(AutoGuessContextRef, CFDictionaryRef, CFDictionaryRef, Boolean)", 800, (uint64_t)"inBaseStation has Radio MAC Address 2: %@", v23, v24, v25, v26, (uint64_t)v28);
    goto LABEL_15;
  }
  if (!sub_21A6FEADC(a1, a2, a4, &cf, v13, v14, v15, v16) && cf)
    CFRelease(cf);
}

void sub_21A700180(uint64_t a1, CFArrayRef theArray, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  CFIndex Count;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  CFIndex v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  uint64_t v25;
  const __CFString *v26;

  if (dword_2550F4508 <= 800 && (dword_2550F4508 != -1 || sub_21A69876C((uint64_t)&dword_2550F4508, 0x320u)))
    sub_21A698FDC((uint64_t)&dword_2550F4508, (uint64_t)"OSStatus _CacheNeededSettingsForBaseStationList(AutoGuessContextRef, CFArrayRef)", 800, (uint64_t)"\n", a5, a6, a7, a8, v25);
  if (a1)
  {
    if (theArray)
    {
      Count = CFArrayGetCount(theArray);
      if (Count >= 1)
      {
        v16 = Count;
        v17 = 0;
        v26 = 0;
        do
        {
          sub_21A693B94((const __CFString *)theArray, (uint64_t)&v26, (UInt8 *)"[*]", v11, v12, v13, v14, v15, v17);
          if (v22 || !v26)
            break;
          sub_21A6FFEB8(a1, v26, 0, 0, v18, v19, v20, v21);
          if (v23 && v23 != -6727)
            break;
          ++v17;
        }
        while (v16 != v17);
      }
    }
  }
}

uint64_t sub_21A70028C(uint64_t a1, const char *a2, uint64_t a3, unsigned int a4, _QWORD *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;
  const __CFString *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  if (dword_2550F4508 <= 800 && (dword_2550F4508 != -1 || sub_21A69876C((uint64_t)&dword_2550F4508, 0x320u)))
    sub_21A698FDC((uint64_t)&dword_2550F4508, (uint64_t)"OSStatus _JoinNetworkAndBrowseForBaseStations(AutoGuessContextRef, CFDictionaryRef, Boolean, uint32_t, CFArrayRef *)", 800, (uint64_t)"\n", (uint64_t)a5, a6, a7, a8, v24);
  result = 4294960591;
  if (a1 && a2 && a5)
  {
    v13 = (const __CFString *)sub_21A72E204((uint64_t)a2, a2);
    if (v13)
    {
      if (sub_21A70B84C(*(_QWORD *)(a1 + 48), v13, 0, v14, v15, v16, v17, v18)
        || (result = sub_21A70E004(*(_QWORD *)(a1 + 48), a2, 0, 0, 0, v21, v22, v23), !(_DWORD)result))
      {
        v25 = 0;
        result = sub_21A70D5E4(*(_QWORD *)(a1 + 48), a4, &v25, v19, v20, v21, v22, v23);
        if (!(_DWORD)result)
        {
          if (v25)
          {
            result = 0;
            *a5 = v25;
          }
          else
          {
            return 4294960568;
          }
        }
      }
    }
    else
    {
      return 4294960569;
    }
  }
  return result;
}

uint64_t sub_21A700398(uint64_t a1, CFArrayRef theArray, uint64_t a3, unsigned int a4, CFTypeRef *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12;
  CFIndex Count;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  CFIndex v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  CFTypeRef cf;
  const char *v29;
  const __CFString *v30;

  if (dword_2550F4508 <= 800 && (dword_2550F4508 != -1 || sub_21A69876C((uint64_t)&dword_2550F4508, 0x320u)))
    sub_21A698FDC((uint64_t)&dword_2550F4508, (uint64_t)"OSStatus _JoinANetworkAndBrowseForBaseStations(AutoGuessContextRef, CFArrayRef, Boolean, uint32_t, CFArrayRef *)", 800, (uint64_t)"\n", (uint64_t)a5, a6, a7, a8, v27);
  cf = 0;
  v12 = 4294960591;
  if (a1 && theArray && a5)
  {
    Count = CFArrayGetCount(theArray);
    if (Count < 1)
    {
      return 4294960569;
    }
    else
    {
      v19 = Count;
      v20 = 0;
      v29 = 0;
      while (1)
      {
        sub_21A693B94((const __CFString *)theArray, (uint64_t)&v29, (UInt8 *)"[*]", v14, v15, v16, v17, v18, v20);
        if ((_DWORD)v21)
        {
          v12 = v21;
          goto LABEL_25;
        }
        if (!v29)
          break;
        v25 = sub_21A70028C(a1, v29, 0, a4, &cf, v22, v23, v24);
        v12 = v25;
        if ((_DWORD)v25 != -6723)
        {
          if (!(_DWORD)v25)
          {
            if (!cf)
              return 4294960568;
            v12 = 0;
            *a5 = cf;
            return v12;
          }
          if (dword_2550F4508 <= 800 && (dword_2550F4508 != -1 || sub_21A69876C((uint64_t)&dword_2550F4508, 0x320u)))
          {
            v30 = &stru_24DD08368;
            if (v29)
              sub_21A693B94((const __CFString *)v29, (uint64_t)&v30, (UInt8 *)"%kO", v14, v15, v16, v17, v18, (uint64_t)CFSTR("SSID_STR"));
            sub_21A698FDC((uint64_t)&dword_2550F4508, (uint64_t)"OSStatus _JoinANetworkAndBrowseForBaseStations(AutoGuessContextRef, CFArrayRef, Boolean, uint32_t, CFArrayRef *)", 800, (uint64_t)"Err: %d, joining/browsing network: %@", v15, v16, v17, v18, v12);
          }
          if (v19 != ++v20)
            continue;
        }
        goto LABEL_25;
      }
      v12 = 4294960568;
LABEL_25:
      if (cf)
        CFRelease(cf);
    }
  }
  return v12;
}

uint64_t sub_21A700584(uint64_t a1, CFArrayRef theArray, const __CFString *a3, uint64_t a4, uint64_t *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  uint64_t result;
  CFIndex v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const void *ValueAtIndex;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v9 = a4;
  if (dword_2550F4508 <= 800)
  {
    if (dword_2550F4508 != -1 || sub_21A69876C((uint64_t)&dword_2550F4508, 0x320u))
      sub_21A698FDC((uint64_t)&dword_2550F4508, (uint64_t)"OSStatus _CopyScanInfoForNetwork(AutoGuessContextRef, CFMutableArrayRef, CFStringRef, WiFiType, CFDictionaryRef *)", 800, (uint64_t)"\n", (uint64_t)a5, a6, a7, a8, v38);
    if (dword_2550F4508 <= 800 && (dword_2550F4508 != -1 || sub_21A69876C((uint64_t)&dword_2550F4508, 0x320u)))
      sub_21A698FDC((uint64_t)&dword_2550F4508, (uint64_t)"OSStatus _CopyScanInfoForNetwork(AutoGuessContextRef, CFMutableArrayRef, CFStringRef, WiFiType, CFDictionaryRef *)", 800, (uint64_t)"_CopyScanInfoForNetwork %@\n", (uint64_t)a5, a6, a7, a8, (uint64_t)a3);
  }
  sub_21A6FC5DC((uint64_t)"Scanned networks", theArray, (uint64_t)a3, a4, (uint64_t)a5, a6, a7, a8);
  result = 4294960591;
  if (a1 && a3 && a5)
  {
    v14 = sub_21A68F7D0(a3, v9, 0, theArray);
    if (v14 != -1)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(theArray, v14);
      if (ValueAtIndex)
      {
        v20 = (uint64_t)ValueAtIndex;
        CFRetain(ValueAtIndex);
        sub_21A6FCD64((uint64_t)"foundScanInfo from BSAssistant_IndexOfNetworkNameInNetworkList", v20, v21, v22, v23, v24, v25, v26);
LABEL_15:
        result = 0;
        *a5 = v20;
        return result;
      }
      return 4294960568;
    }
    if (dword_2550F4508 <= 800 && (dword_2550F4508 != -1 || sub_21A69876C((uint64_t)&dword_2550F4508, 0x320u)))
      sub_21A698FDC((uint64_t)&dword_2550F4508, (uint64_t)"OSStatus _CopyScanInfoForNetwork(AutoGuessContextRef, CFMutableArrayRef, CFStringRef, WiFiType, CFDictionaryRef *)", 800, (uint64_t)"Callback will direct scan to find it if not visible\n", v15, v16, v17, v18, v38);
    v39 = 0;
    result = sub_21A70C110(*(_QWORD *)(a1 + 48), a3, v9, (CFTypeRef *)&v39, v15, v16, v17, v18);
    if (!(_DWORD)result)
    {
      if (!v39)
        return 4294960568;
      result = sub_21A693A8C((const __CFAllocator *)*MEMORY[0x24BDBD240], theArray, (uint64_t)"%O", v27, v28, v29, v30, v31, v39);
      if (!(_DWORD)result)
      {
        sub_21A6FCD64((uint64_t)"foundScanInfo from callback\n", v39, v32, v33, v34, v35, v36, v37);
        v20 = v39;
        if (v39)
          goto LABEL_15;
        return 4294960569;
      }
    }
  }
  return result;
}

uint64_t sub_21A700794(uint64_t a1, const __CFArray *a2, CFArrayRef theArray, __CFArray **a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12;
  CFIndex Count;
  uint64_t v14;
  const __CFAllocator *v15;
  CFMutableArrayRef Mutable;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __CFArray *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v34;
  CFTypeRef cf;
  const __CFString *v36;

  if (dword_2550F4508 <= 800 && (dword_2550F4508 != -1 || sub_21A69876C((uint64_t)&dword_2550F4508, 0x320u)))
    sub_21A698FDC((uint64_t)&dword_2550F4508, (uint64_t)"OSStatus _CopyScanInfoForNetworksNamed(AutoGuessContextRef, CFMutableArrayRef, CFArrayRef, CFArrayRef *)", 800, (uint64_t)"\n", a5, a6, a7, a8, v34);
  v12 = 4294960591;
  if (a1 && theArray && a4)
  {
    Count = CFArrayGetCount(theArray);
    if (Count)
    {
      v14 = Count;
      v15 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
      Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD690]);
      if (Mutable)
      {
        v22 = Mutable;
        v36 = 0;
        if (v14 >= 1)
        {
          v23 = 0;
          while (1)
          {
            cf = 0;
            sub_21A693B94((const __CFString *)theArray, (uint64_t)&v36, (UInt8 *)"[*]", v17, v18, v19, v20, v21, v23);
            if ((_DWORD)v24 || (v24 = sub_21A700584(a1, a2, v36, 3, (uint64_t *)&cf, v25, v26, v27), (_DWORD)v24))
            {
              v12 = v24;
              goto LABEL_26;
            }
            if (!cf)
              break;
            v12 = sub_21A693A8C(v15, v22, (uint64_t)"%O", v28, v29, v30, v31, v32, (uint64_t)cf);
            if (cf)
              CFRelease(cf);
            if ((_DWORD)v12)
              goto LABEL_26;
            if (v14 == ++v23)
              goto LABEL_19;
          }
          v12 = 4294960568;
          goto LABEL_26;
        }
LABEL_19:
        if (!CFArrayGetCount(v22))
        {
          v12 = 4294960569;
LABEL_26:
          CFRelease(v22);
          return v12;
        }
        v12 = 0;
        *a4 = v22;
      }
      else
      {
        return 4294960568;
      }
    }
    else
    {
      return 4294960569;
    }
  }
  return v12;
}

uint64_t sub_21A700950(uint64_t a1, uint64_t a2, CFDictionaryRef theDict, CFTypeRef *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  CFTypeRef cf;
  void *context;

  if (dword_2550F4508 <= 800 && (dword_2550F4508 != -1 || sub_21A69876C((uint64_t)&dword_2550F4508, 0x320u)))
    sub_21A698FDC((uint64_t)&dword_2550F4508, (uint64_t)"OSStatus _AskUserToChooseFromList(AutoGuessContextRef, eAssistantCallback, CFDictionaryRef, CFStringRef *)", 800, (uint64_t)"\n", a5, a6, a7, a8, v38);
  cf = 0;
  context = 0;
  v12 = 4294960591;
  if (theDict)
  {
    if (a1)
    {
      if ((a2 - 7) >= 0xFFFFFFFE && CFDictionaryGetCount(theDict) >= 2)
      {
        v12 = sub_21A709AF8(*(_QWORD *)(a1 + 48), &context);
        if (!(_DWORD)v12)
        {
          if (context)
          {
            v12 = sub_21A70B204((uint64_t)context, (uint64_t)CFSTR("BSAssistantCallback_AskUserDictionary"), (uint64_t)theDict, v13, v14, v15, v16, v17);
            if (!(_DWORD)v12)
            {
              v12 = sub_21A70A23C(context, a2, v19, v20, v21, v22, v23, v24);
              if (!(_DWORD)v12)
              {
                v12 = sub_21A70A598((uint64_t)context, v25, v26, v27, v28, v29, v30, v31);
                if (!(_DWORD)v12)
                {
                  v12 = *((unsigned int *)context + 8);
                  if (!(_DWORD)v12)
                  {
                    sub_21A693B94(*((const __CFString **)context + 3), (uint64_t)&cf, (UInt8 *)"%ks:obj", v32, v33, v34, v35, v36, (uint64_t)"BSAssistantCallback_String");
                    v12 = v37;
                    if (!(_DWORD)v37)
                    {
                      *a4 = cf;
                      cf = 0;
                    }
                  }
                }
              }
            }
          }
          else
          {
            v12 = 4294960568;
          }
        }
      }
    }
  }
  sub_21A709C24((char *)context);
  if (cf)
    CFRelease(cf);
  return v12;
}

BOOL sub_21A700AC4(const __CFString *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9;
  _BOOL8 result;

  if (!((unint64_t)a1 | a2))
    return 0;
  if (!a1)
  {
    if (!a2)
      return 0;
    return sub_21A72E2A4(a2, (const char *)a2) != 0;
  }
  v9 = sub_21A690078(a1, a2, a3, a4, a5, a6, a7, a8);
  result = v9 != 0;
  if (!v9 && a2)
    return sub_21A72E2A4(a2, (const char *)a2) != 0;
  return result;
}

BOOL sub_21A700B2C(const __CFString *a1)
{
  if (!a1)
    return 1;
  return CFStringCompare(a1, CFSTR("BSSetupRecommend_DeviceIsTooNewToSetUp"), 0)
      && CFStringCompare(a1, CFSTR("BSSetupRecommend_UseAUFor80211g"), 0);
}

uint64_t sub_21A700B8C(int a1, const void *a2, int a3, uint64_t a4, const void *a5, const __CFString *a6, const __CFString *a7, const void *a8, const __CFString *a9, const void *a10, void *a11, uint64_t a12)
{
  const __CFAllocator *v19;
  __CFDictionary *Mutable;
  __CFDictionary *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  CFNumberRef value;
  CFTypeRef cf;
  int valuePtr;

  valuePtr = a1;
  if (!a12 || !*(_QWORD *)(a12 + 8))
    return 4294960591;
  cf = 0;
  v19 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  value = CFNumberCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], kCFNumberSInt32Type, &valuePtr);
  if (value)
  {
    Mutable = CFDictionaryCreateMutable(v19, 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
    if (!Mutable)
    {
      v27 = 4294960568;
LABEL_45:
      CFRelease(value);
      return v27;
    }
    v21 = Mutable;
    CFDictionarySetValue(Mutable, CFSTR("BSAutoGuess_FinalState"), value);
    CFDictionarySetValue(v21, CFSTR("BSAutoGuess_StateTrace"), a2);
    if (a3 != -1)
    {
      v27 = sub_21A693A8C(v19, v21, (uint64_t)"%ks=%i", v22, v23, v24, v25, v26, (uint64_t)"BSAutoGuess_RestoreNetworkMode");
      if ((_DWORD)v27)
        goto LABEL_44;
    }
    if (CFStringCompare(a6, CFSTR("BSSetupRecommend_OfferReplaceSourceIsUnconfigurable"), 0))
    {
      if ((_DWORD)a4 == -1)
      {
LABEL_15:
        if (a5)
          CFDictionarySetValue(v21, CFSTR("BSAutoGuess_RestoreData"), a5);
        CFDictionarySetValue(v21, CFSTR("BSAutoGuess_Recommendation"), a6);
        if (a8)
          CFDictionarySetValue(v21, CFSTR("BSAutoGuess_UnconfiguredNetwork"), a8);
        if (a10)
          CFDictionarySetValue(v21, CFSTR("BSAutoGuess_SourceNetwork"), a10);
        if (a11)
          CFDictionarySetValue(v21, CFSTR("BSAutoGuess_AskUserList"), a11);
        if (a7)
        {
          CFDictionarySetValue(v21, CFSTR("BSAutoGuess_UnconfiguredBase"), a7);
          if (sub_21A700B2C(a6))
          {
            v38 = sub_21A6FEADC(a12, a7, 0, &cf, v34, v35, v36, v37);
            if ((_DWORD)v38 == -6727)
            {
              if (!sub_21A6FEA6C(a12, (const __CFDictionary *)a7, v39, v40, v41, v42, v43, v44))
              {
                v27 = 4294960569;
                goto LABEL_44;
              }
              CFDictionarySetValue(v21, CFSTR("BSAutoGuess_Recommendation"), CFSTR("BSSetupRecommend_FirmwareUpdateRequired"));
            }
            else
            {
              v27 = v38;
              if ((_DWORD)v38)
                goto LABEL_44;
              if (!cf)
              {
LABEL_47:
                v27 = 4294960568;
                goto LABEL_44;
              }
              CFDictionarySetValue(v21, CFSTR("BSAutoGuess_UnconfiguredBaseSettings"), cf);
              if (cf)
              {
                CFRelease(cf);
                cf = 0;
              }
            }
          }
        }
        if (!a9)
          goto LABEL_39;
        v45 = sub_21A6FEADC(a12, a9, 0, &cf, v34, v35, v36, v37);
        if ((_DWORD)v45 == -6727)
        {
LABEL_38:
          CFDictionarySetValue(v21, CFSTR("BSAutoGuess_SourceBase"), a9);
LABEL_39:
          CFArrayAppendValue(*(CFMutableArrayRef *)(a12 + 8), v21);
          if (dword_2550F4508 <= 800 && (dword_2550F4508 != -1 || sub_21A69876C((uint64_t)&dword_2550F4508, 0x320u)))
            sub_21A698FDC((uint64_t)&dword_2550F4508, (uint64_t)"OSStatus __SetupOfferToDoSomething(BaseStationAutoGuessStates, CFArrayRef, BSNetworkMode, int32_t, CFStringRef, CFStringRef, CFDictionaryRef, CFDictionaryRef, CFDictionaryRef, CFDictionaryRef, CFArrayRef, AutoGuessContextRef)", 800, (uint64_t)"Reason: %d Recommendation: %@\n", v46, v47, v48, v49, a4);
          v27 = 0;
          goto LABEL_44;
        }
        v27 = v45;
        if (!(_DWORD)v45)
        {
          if (cf)
          {
            CFDictionarySetValue(v21, CFSTR("BSAutoGuess_SourceBaseSettings"), cf);
            if (cf)
            {
              CFRelease(cf);
              cf = 0;
            }
            goto LABEL_38;
          }
          goto LABEL_47;
        }
LABEL_44:
        CFRelease(v21);
        goto LABEL_45;
      }
      v33 = sub_21A693A8C(v19, v21, (uint64_t)"%ks=%i", v28, v29, v30, v31, v32, (uint64_t)"BSAutoGuess_NoRestoreReason");
    }
    else
    {
      v33 = sub_21A693A8C(v19, v21, (uint64_t)"%ks=%i", v28, v29, v30, v31, v32, (uint64_t)"kBSAutoGuessSetupOptionKey_NoConfigureReason");
    }
    v27 = v33;
    if ((_DWORD)v33)
      goto LABEL_44;
    goto LABEL_15;
  }
  return 4294960568;
}

uint64_t sub_21A700F1C(int a1, const void *a2, uint64_t a3)
{
  return sub_21A700B8C(a1, a2, -1, 0xFFFFFFFFLL, 0, CFSTR("BSSetupRecommend_TellUserCannotFindDevices"), 0, 0, 0, 0, 0, a3);
}

uint64_t sub_21A700F5C(int a1, const void *a2, uint64_t a3)
{
  return sub_21A700B8C(a1, a2, -1, 0xFFFFFFFFLL, 0, CFSTR("BSSetupRecommend_WaitForBaseStation"), 0, 0, 0, 0, 0, a3);
}

uint64_t sub_21A700F9C(CFDictionaryRef theDict, const void *a2, const __CFString **a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const __CFString *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  const __CFString *v35;
  const char *v36;
  CFDictionaryRef theDicta;
  const __CFString *v38;
  uint64_t v39;
  const void **v40;

  if (dword_2550F4508 <= 800 && (dword_2550F4508 != -1 || sub_21A69876C((uint64_t)&dword_2550F4508, 0x320u)))
    sub_21A698FDC((uint64_t)&dword_2550F4508, (uint64_t)"OSStatus _IntelligentlyChooseABaseToConfigure(CFDictionaryRef, CFDictionaryRef, CFDictionaryRef *)", 800, (uint64_t)"\n", a5, a6, a7, a8, (uint64_t)theDicta);
  v38 = 0;
  v39 = 0;
  v40 = 0;
  theDicta = 0;
  if (theDict && CFDictionaryGetCount(theDict))
  {
    v11 = sub_21A695640(theDict, &v40);
    if (!(_DWORD)v11)
    {
      if (v40)
      {
        if (sub_21A6956DC((uint64_t *)v40, &v39, &v38))
        {
          v19 = 0;
          v11 = 0;
          while (1)
          {
            if (sub_21A68F5B8(v38, v12, v13, v14, v15, v16, v17, v18))
            {
              sub_21A6FCC5C((uint64_t)"Base station has WAN link", (uint64_t)v38, v21, v22, v23, v24, v25, v26);
              v27 = sub_21A6D7718(v38, (uint64_t)CFSTR("local."), (uint64_t)CFSTR("_airport._tcp"), CFSTR("wan"), 2u, 1, (CFTypeRef *)&theDicta);
              v11 = v27;
              if ((_DWORD)v27 != -6735)
              {
                if ((_DWORD)v27)
                  goto LABEL_24;
                if (!theDicta)
                  goto LABEL_31;
                v11 = 0;
                if (CFDictionaryGetCount(theDicta))
                  break;
              }
            }
            if (sub_21A68F294(v38, v20, v21, v22, v23, v24, v25, v26))
            {
              v35 = v38;
              v36 = "Base station has restore profile";
LABEL_34:
              sub_21A6FCC5C((uint64_t)v36, (uint64_t)v35, v28, v29, v30, v31, v32, v33);
              break;
            }
            if (a2 && sub_21A6FD368(v38, a2, v28, v29, v30, v31, v32, v33))
            {
              v35 = v38;
              v36 = "Base station has previous config files";
              goto LABEL_34;
            }
            if (!v19)
              v19 = v38;
            if (!sub_21A6956DC((uint64_t *)v40, &v39, &v38))
              goto LABEL_36;
          }
          v19 = v38;
LABEL_36:
          if (v19)
          {
            *a3 = v19;
            goto LABEL_26;
          }
        }
        v11 = 4294960569;
      }
      else
      {
LABEL_31:
        v11 = 4294960568;
      }
    }
  }
  else
  {
    v11 = 4294960591;
  }
LABEL_24:
  if (a3)
    CFRelease(a3);
LABEL_26:
  if (theDicta)
  {
    CFRelease(theDicta);
    theDicta = 0;
  }
  if (v40)
    sub_21A6956D0(v40);
  return v11;
}

void sub_21A7011B8(uint64_t a1, const __CFString *a2, const __CFString *a3, int *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  int v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  int v50;
  unsigned int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  char v73;
  __int16 v74;
  uint64_t v75;
  uint64_t v76;

  if (dword_2550F4508 <= 800 && (dword_2550F4508 != -1 || sub_21A69876C((uint64_t)&dword_2550F4508, 0x320u)))
    sub_21A698FDC((uint64_t)&dword_2550F4508, (uint64_t)"OSStatus _ShouldNewBaseStationReplaceExistingBaseStation(AutoGuessContextRef, CFDictionaryRef, CFDictionaryRef, eReplaceMode *)", 800, (uint64_t)"\n", a5, a6, a7, a8, v71);
  if (a3)
  {
    if (a2)
    {
      if (a1)
      {
        if (a4)
        {
          v75 = 0;
          v76 = 0;
          v74 = 0;
          *a4 = 0;
          sub_21A6FF594(a1, a2, a3, (uint64_t)a4, a5, a6, a7, a8);
          sub_21A693B94(a3, (uint64_t)&v75, (UInt8 *)"%kO.%kO:int", v12, v13, v14, v15, v16, (uint64_t)CFSTR("txt"));
          if (!v24)
          {
            if (dword_2550F4508 <= 800 && (dword_2550F4508 != -1 || sub_21A69876C((uint64_t)&dword_2550F4508, 0x320u)))
              sub_21A698FDC((uint64_t)&dword_2550F4508, (uint64_t)"OSStatus _ShouldNewBaseStationReplaceExistingBaseStation(AutoGuessContextRef, CFDictionaryRef, CFDictionaryRef, eReplaceMode *)", 800, (uint64_t)"-- existingProdID2 is: %d", v20, v21, v22, v23, v75);
            v25 = 2;
            if ((_DWORD)v75 == 3 || (_DWORD)v75 == 102)
              goto LABEL_16;
            v26 = *a4;
            if (*a4)
              goto LABEL_18;
            if (!sub_21A690128(a3, v17, v18, v19, v20, v21, v22, v23))
            {
              v25 = 3;
              goto LABEL_16;
            }
            v26 = *a4;
            if (*a4)
              goto LABEL_18;
            v76 = -1;
            if ((_DWORD)v75 == 104)
            {
              if (sub_21A6FF198(a1, a3, 1, &v76, v29, v30, v31, v32) || v76 == -1)
                return;
              if (v76 > 1)
                goto LABEL_61;
              v26 = *a4;
              if (*a4)
                goto LABEL_18;
            }
            if (sub_21A6FF4D4(a1, a3, v27, v28, v29, v30, v31, v32))
            {
              sub_21A6FCC5C((uint64_t)"Existing base station has audio port in use:\n", (uint64_t)a3, v33, v34, v35, v36, v37, v38);
              if (sub_21A6FF30C(a1, a2, 1632923251, (_BYTE *)&v74 + 1, v39, v40, v41, v42))
                return;
              v49 = HIBYTE(v74) ? "New base station has audio port:\n" : "New base station does not have audio port:\n";
              sub_21A6FCC5C((uint64_t)v49, (uint64_t)a2, v43, v44, v45, v46, v47, v48);
              if (!HIBYTE(v74))
              {
LABEL_60:
                v26 = *a4;
                goto LABEL_18;
              }
            }
            sub_21A693B94(a2, (uint64_t)&v75 + 4, (UInt8 *)"%ks.%kC:int", v34, v35, v36, v37, v38, (uint64_t)"txt");
            if (v50)
              return;
            v51 = sub_21A671268(v75);
            if (v51 <= sub_21A671268(HIDWORD(v75)))
            {
              if (dword_2550F4508 <= 800 && (dword_2550F4508 != -1 || sub_21A69876C((uint64_t)&dword_2550F4508, 0x320u)))
                sub_21A698FDC((uint64_t)&dword_2550F4508, (uint64_t)"OSStatus _ShouldNewBaseStationReplaceExistingBaseStation(AutoGuessContextRef, CFDictionaryRef, CFDictionaryRef, eReplaceMode *)", 800, (uint64_t)"Existing base station has less ethernet ports than the new base station", v54, v55, v56, v57, v72);
            }
            else
            {
              if (dword_2550F4508 <= 800 && (dword_2550F4508 != -1 || sub_21A69876C((uint64_t)&dword_2550F4508, 0x320u)))
                sub_21A698FDC((uint64_t)&dword_2550F4508, (uint64_t)"OSStatus _ShouldNewBaseStationReplaceExistingBaseStation(AutoGuessContextRef, CFDictionaryRef, CFDictionaryRef, eReplaceMode *)", 800, (uint64_t)"Existing base station has more ethernet ports than the new base station", v54, v55, v56, v57, v72);
              v58 = v76;
              if (v76 == -1)
              {
                if (sub_21A6FF198(a1, a3, 1, &v76, v54, v55, v56, v57))
                  return;
                v58 = v76;
                if (v76 == -1)
                  return;
              }
              if (v58 >= sub_21A671268(HIDWORD(v75)))
                goto LABEL_60;
            }
            if (!sub_21A6FF430(a1, (CFDictionaryRef)a2, v52, v53, v54, v55, v56, v57)
              || sub_21A6FF430(a1, (CFDictionaryRef)a3, v59, v60, v61, v62, v63, v64))
            {
              v26 = *a4;
              if (!*a4)
              {
                v70 = sub_21A6FF30C(a1, a2, 825319779, &v74, v61, v62, v63, v64);
                if (!v70 && (_BYTE)v74)
                {
                  v73 = 0;
                  v70 = sub_21A6FF30C(a1, a3, 825319779, &v73, v66, v67, v68, v69);
                  if (!v70)
                  {
                    if (v73)
                      goto LABEL_56;
                    goto LABEL_55;
                  }
                  if ((v75 - 1) < 0x76)
LABEL_55:
                    *a4 = 1;
                }
LABEL_56:
                if (*a4 && !sub_21A6FF594(a1, a2, a3, v65, v66, v67, v68, v69))
                  *a4 = 0;
                if (v70)
                  return;
                goto LABEL_60;
              }
LABEL_18:
              v25 = 1;
              if (v26 <= 3 && v26 != 1)
                return;
LABEL_16:
              *a4 = v25;
              return;
            }
LABEL_61:
            v25 = 1;
            goto LABEL_16;
          }
        }
      }
    }
  }
}

uint64_t sub_21A7015F0(uint64_t a1, CFArrayRef theArray, const __CFArray *a3, const __CFArray **a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12;
  CFIndex Count;
  uint64_t v14;
  const __CFAllocator *v15;
  CFMutableArrayRef Mutable;
  const __CFArray *v17;
  CFIndex i;
  const __CFString *ValueAtIndex;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  const __CFString *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v50;
  const __CFAllocator *v51;
  CFTypeRef cf;
  void *value;
  CFRange v54;

  if (dword_2550F4508 <= 800 && (dword_2550F4508 != -1 || sub_21A69876C((uint64_t)&dword_2550F4508, 0x320u)))
    sub_21A698FDC((uint64_t)&dword_2550F4508, (uint64_t)"OSStatus _CopyAllNetworksForBaseStationsInSTAMode(AutoGuessContextRef, CFArrayRef, CFMutableArrayRef, CFArrayRef *)", 800, (uint64_t)"\n", a5, a6, a7, a8, v50);
  v12 = 4294960591;
  if (!a1 || !theArray || !a4)
    return v12;
  Count = CFArrayGetCount(theArray);
  if (!Count)
    return 4294960569;
  v14 = Count;
  v15 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD690]);
  if (!Mutable)
    return 4294960568;
  v17 = Mutable;
  v51 = v15;
  value = 0;
  if (v14 >= 1)
  {
    for (i = 0; v14 != i; ++i)
    {
      ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(theArray, i);
      if (!ValueAtIndex)
      {
LABEL_36:
        v12 = 4294960568;
        goto LABEL_38;
      }
      v27 = ValueAtIndex;
      if (!sub_21A690078(ValueAtIndex, v20, v21, v22, v23, v24, v25, v26)
        && sub_21A6FF7B4(a1, v27, a3, (const __CFString **)&value, v28, v29, v30, v31)
        && value)
      {
        v54.length = CFArrayGetCount(v17);
        v54.location = 0;
        if (CFArrayContainsValue(v17, v54, value))
        {
          if (dword_2550F4508 <= 800 && (dword_2550F4508 != -1 || sub_21A69876C((uint64_t)&dword_2550F4508, 0x320u)))
            sub_21A698FDC((uint64_t)&dword_2550F4508, (uint64_t)"OSStatus _CopyAllNetworksForBaseStationsInSTAMode(AutoGuessContextRef, CFArrayRef, CFMutableArrayRef, CFArrayRef *)", 800, (uint64_t)"Already added STA network: %@\n", v32, v33, v34, v35, (uint64_t)value);
        }
        else
        {
          cf = 0;
          if (dword_2550F4508 <= 800 && (dword_2550F4508 != -1 || sub_21A69876C((uint64_t)&dword_2550F4508, 0x320u)))
            sub_21A698FDC((uint64_t)&dword_2550F4508, (uint64_t)"OSStatus _CopyAllNetworksForBaseStationsInSTAMode(AutoGuessContextRef, CFArrayRef, CFMutableArrayRef, CFArrayRef *)", 800, (uint64_t)"Adding STA network: %@ if it is scannable\n", v32, v33, v34, v35, (uint64_t)value);
          v36 = sub_21A700584(a1, a3, (const __CFString *)value, 3, (uint64_t *)&cf, v33, v34, v35);
          if ((_DWORD)v36 != -6727)
          {
            v12 = v36;
            if ((_DWORD)v36)
              goto LABEL_38;
            if (!cf)
              goto LABEL_36;
            CFRelease(cf);
            cf = 0;
            sub_21A6FCC5C((uint64_t)"Base station is in STA mode:\n", (uint64_t)v27, v37, v38, v39, v40, v41, v42);
            v48 = sub_21A693A8C(v51, v17, (uint64_t)"%O", v43, v44, v45, v46, v47, (uint64_t)value);
            if ((_DWORD)v48)
            {
              v12 = v48;
LABEL_38:
              CFRelease(v17);
              return v12;
            }
          }
        }
      }
    }
  }
  if (!CFArrayGetCount(v17))
  {
    v12 = 4294960569;
    goto LABEL_38;
  }
  v12 = 0;
  *a4 = v17;
  return v12;
}

uint64_t sub_21A7018B4(uint64_t a1, char a2, CFArrayRef theArray, __CFArray **a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12;
  CFIndex Count;
  uint64_t v14;
  const __CFAllocator *v15;
  CFMutableArrayRef Mutable;
  __CFArray *v17;
  CFIndex v18;
  const __CFString *ValueAtIndex;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;

  if (dword_2550F4508 <= 800 && (dword_2550F4508 != -1 || sub_21A69876C((uint64_t)&dword_2550F4508, 0x320u)))
    sub_21A698FDC((uint64_t)&dword_2550F4508, (uint64_t)"OSStatus _NarrowBaseStationList(AutoGuessContextRef, eNarrowBaseStationList, CFArrayRef, CFArrayRef *)", 800, (uint64_t)"\n", a5, a6, a7, a8, v30);
  v12 = 4294960591;
  if (a1)
  {
    if (theArray)
    {
      if (a4)
      {
        Count = CFArrayGetCount(theArray);
        if (Count)
        {
          v14 = Count;
          v15 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
          Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD690]);
          if (Mutable)
          {
            v17 = Mutable;
            if (v14 >= 1)
            {
              v18 = 0;
              while (1)
              {
                ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(theArray, v18);
                if (!ValueAtIndex)
                {
                  v12 = 4294960568;
                  goto LABEL_23;
                }
                v27 = (uint64_t)ValueAtIndex;
                if ((a2 & 1) == 0 || !sub_21A6FCFE4(ValueAtIndex, v20, v21, v22, v23, v24, v25, v26))
                {
                  v28 = sub_21A693A8C(v15, v17, (uint64_t)"%O", v22, v23, v24, v25, v26, v27);
                  if ((_DWORD)v28)
                    break;
                }
                if (v14 == ++v18)
                  goto LABEL_17;
              }
              v12 = v28;
              goto LABEL_23;
            }
LABEL_17:
            if (!CFArrayGetCount(v17))
            {
              v12 = 4294960569;
LABEL_23:
              CFRelease(v17);
              return v12;
            }
            v12 = 0;
            *a4 = v17;
          }
          else
          {
            return 4294960568;
          }
        }
      }
    }
  }
  return v12;
}

uint64_t sub_21A701A34(uint64_t a1, CFArrayRef theArray, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;
  CFIndex Count;
  uint64_t v13;
  CFIndex v14;
  uint64_t v15;
  const __CFString *ValueAtIndex;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  CFIndex v30;
  const __CFString *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  CFIndex v45;
  const __CFDictionary *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;

  if (dword_2550F4508 <= 800 && (dword_2550F4508 != -1 || sub_21A69876C((uint64_t)&dword_2550F4508, 0x320u)))
    sub_21A698FDC((uint64_t)&dword_2550F4508, (uint64_t)"OSStatus _NarrowBaseStationListToBestOneToExtend(AutoGuessContextRef, CFArrayRef, CFDictionaryRef *)", 800, (uint64_t)"\n", a5, a6, a7, a8, v60);
  result = 4294960591;
  if (a1 && theArray && a3)
  {
    Count = CFArrayGetCount(theArray);
    if (Count)
    {
      v13 = Count;
      if (Count >= 1)
      {
        v14 = 0;
        v15 = 0;
        do
        {
          ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(theArray, v14);
          if (!ValueAtIndex)
            return 4294960568;
          v23 = (uint64_t)ValueAtIndex;
          if (sub_21A6FFA20(a1, ValueAtIndex, v17, v18, v19, v20, v21, v22))
          {
            if (v15)
            {
              sub_21A6FCC5C((uint64_t)"_BaseStationIsNATEnabled true again for base so clearing found base:\n", v23, v24, v25, v26, v27, v28, v29);
              goto LABEL_20;
            }
            sub_21A6FCC5C((uint64_t)"_BaseStationIsNATEnabled true for base:\n", v23, v24, v25, v26, v27, v28, v29);
            v15 = v23;
          }
          ++v14;
        }
        while (v13 != v14);
        if (v15)
        {
LABEL_17:
          result = 0;
          *a3 = v15;
          return result;
        }
LABEL_20:
        if (v13 >= 1)
        {
          v30 = 0;
          v15 = 0;
          while (1)
          {
            v31 = (const __CFString *)CFArrayGetValueAtIndex(theArray, v30);
            if (!v31)
              return 4294960568;
            v38 = (uint64_t)v31;
            if (sub_21A6FFB18(a1, v31, v32, v33, v34, v35, v36, v37))
            {
              if (v15)
              {
                sub_21A6FCC5C((uint64_t)"_BaseStationIsCreatingGuestNetwork true again for base so clearing found base:\n", v38, v39, v40, v41, v42, v43, v44);
LABEL_30:
                v45 = 0;
                v15 = 0;
                while (1)
                {
                  v46 = (const __CFDictionary *)CFArrayGetValueAtIndex(theArray, v45);
                  if (!v46)
                    return 4294960568;
                  v53 = (uint64_t)v46;
                  if (sub_21A6FF430(a1, v46, v47, v48, v49, v50, v51, v52))
                  {
                    if (v15)
                    {
                      sub_21A6FCC5C((uint64_t)"_BaseStationIsSimultaneousDualBand true again for base so clearing found base:\n", v53, v54, v55, v56, v57, v58, v59);
                      return 4294960569;
                    }
                    sub_21A6FCC5C((uint64_t)"_BaseStationIsSimultaneousDualBand true for base:\n", v53, v54, v55, v56, v57, v58, v59);
                    v15 = v53;
                  }
                  if (v13 == ++v45)
                  {
                    if (v15)
                      goto LABEL_17;
                    return 4294960569;
                  }
                }
              }
              sub_21A6FCC5C((uint64_t)"_BaseStationIsCreatingGuestNetwork true for base:\n", v38, v39, v40, v41, v42, v43, v44);
              v15 = v38;
            }
            if (v13 == ++v30)
            {
              if (v15)
                goto LABEL_17;
              goto LABEL_30;
            }
          }
        }
      }
      return 4294960569;
    }
    else
    {
      return 4294960591;
    }
  }
  return result;
}

void sub_21A701C54(CFArrayRef theArray, uint64_t a2, const __CFDate *a3, const __CFString **a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  const __CFString *v14;
  const __CFString *v15;

  if (theArray && a4)
  {
    v15 = 0;
    sub_21A68FA3C(theArray, a3, &v15);
    if (v12 == -6727)
    {
      sub_21A693B94((const __CFString *)theArray, (uint64_t)&v15, (UInt8 *)"[*]", v7, v8, v9, v10, v11, a2);
      if (v13)
        return;
      v14 = v15;
      if (!v15)
        return;
    }
    else
    {
      v14 = v15;
      if (!v15)
        return;
    }
    *a4 = v14;
  }
}

uint64_t sub_21A701CFC(uint64_t a1, const __CFArray *a2, CFArrayRef theArray, const __CFString *a4, uint64_t a5, __CFArray **a6, uint64_t a7, uint64_t a8)
{
  char v9;
  uint64_t v14;
  const __CFAllocator *v15;
  CFMutableArrayRef Mutable;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __CFArray *v22;
  CFDateRef v23;
  CFAbsoluteTime Current;
  uint64_t v25;
  const __CFArray *v26;
  CFIndex Count;
  uint64_t v28;
  CFIndex v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  CFIndex v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  const void *v53;
  const char *v54;
  uint64_t v55;
  const char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  CFIndex v62;
  uint64_t v63;
  const __CFString *ValueAtIndex;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  const __CFString *v68;
  CFIndex v69;
  uint64_t v70;
  const char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v79;
  __CFArray *v80;
  const __CFDate *otherDate;
  const __CFArray *theArraya;
  unsigned int v83;
  CFStringRef theString2;
  CFStringRef theString1;
  CFDateRef theDate;
  const __CFString *v87;
  CFTypeRef cf;

  v9 = a5;
  if (dword_2550F4508 <= 800 && (dword_2550F4508 != -1 || sub_21A69876C((uint64_t)&dword_2550F4508, 0x320u)))
    sub_21A698FDC((uint64_t)&dword_2550F4508, (uint64_t)"OSStatus _CopyNetworksScannableInPreferredList(AutoGuessContextRef, CFMutableArrayRef, CFArrayRef, CFDictionaryRef, ScanOptions, CFArrayRef *)", 800, (uint64_t)"\n", a5, (uint64_t)a6, a7, a8, v79);
  v14 = 4294960591;
  if (!a1 || !a6 || (v9 & 3) == 0)
    return v14;
  if (!theArray || !CFArrayGetCount(theArray))
    return 4294960569;
  *a6 = 0;
  v15 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD690]);
  if (!Mutable)
    return 4294960568;
  v22 = Mutable;
  v23 = 0;
  theArraya = 0;
  v87 = 0;
  cf = 0;
  theString1 = 0;
  theDate = 0;
  theString2 = 0;
  v83 = 0;
  if ((v9 & 2) != 0)
  {
    theArraya = CFArrayCreateMutable(v15, 0, MEMORY[0x24BDBD690]);
    if (!theArraya)
    {
      v26 = 0;
      otherDate = 0;
      goto LABEL_21;
    }
    Current = CFAbsoluteTimeGetCurrent();
    v23 = CFDateCreate(v15, Current + -1209600.0);
    if (!v23)
    {
      otherDate = 0;
      goto LABEL_78;
    }
  }
  otherDate = v23;
  if (!a4)
  {
    theString2 = 0;
    goto LABEL_23;
  }
  sub_21A693B94(a4, (uint64_t)&theString2, (UInt8 *)"%kO", v17, v18, v19, v20, v21, (uint64_t)CFSTR("SSID_STR"));
  if ((_DWORD)v25)
  {
    v14 = v25;
LABEL_82:
    v26 = theArraya;
    goto LABEL_83;
  }
  if (!theString2)
  {
LABEL_78:
    v14 = 4294960568;
    goto LABEL_82;
  }
LABEL_23:
  Count = CFArrayGetCount(theArray);
  if (!Count)
    goto LABEL_81;
  v80 = v22;
  theDate = 0;
  if (Count < 1)
  {
LABEL_55:
    v22 = v80;
    if (theArraya)
    {
      v62 = CFArrayGetCount(theArraya);
      if (v62)
      {
        v63 = v62 >= 6 ? 6 : v62;
        if (v62 >= 1)
        {
          v26 = theArraya;
          ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(theArraya, 0);
          theString1 = ValueAtIndex;
          if (ValueAtIndex)
          {
            v68 = ValueAtIndex;
            v69 = 0;
            do
            {
              v70 = sub_21A700584(a1, a2, v68, 3, (uint64_t *)&cf, v65, v66, v67);
              if ((_DWORD)v70 != -6727)
              {
                v14 = v70;
                if ((_DWORD)v70)
                  goto LABEL_82;
                if (!cf)
                  goto LABEL_78;
                if (sub_21A72E1E4((uint64_t)cf, v71))
                {
                  if (cf)
                  {
                    CFRelease(cf);
                    cf = 0;
                  }
                  sub_21A6FCD64((uint64_t)"Skipping IBSS network", 0, v72, v73, v74, v75, v76, v77);
                }
                else
                {
                  v14 = sub_21A693A8C(v15, v80, (uint64_t)"%O", v73, v74, v75, v76, v77, (uint64_t)cf);
                  if (cf)
                  {
                    CFRelease(cf);
                    cf = 0;
                  }
                  if ((_DWORD)v14)
                    goto LABEL_82;
                  if ((v9 & 8) != 0)
                    goto LABEL_79;
                }
              }
              if (++v69 >= v63)
                goto LABEL_79;
              v68 = (const __CFString *)CFArrayGetValueAtIndex(theArraya, v69);
              theString1 = v68;
              v14 = 4294960568;
            }
            while (v68);
            goto LABEL_82;
          }
LABEL_21:
          v14 = 4294960568;
          goto LABEL_83;
        }
      }
    }
LABEL_79:
    if (CFArrayGetCount(v80))
    {
      v14 = 0;
      *a6 = v80;
      v26 = theArraya;
      goto LABEL_84;
    }
LABEL_81:
    v14 = 4294960569;
    goto LABEL_82;
  }
  v28 = 0;
  while (1)
  {
    v29 = Count;
    sub_21A701C54(theArray, v28, theDate, &v87);
    if ((_DWORD)v30)
      goto LABEL_89;
    if (!v87)
      break;
    sub_21A693B94(v87, (uint64_t)&v83, (UInt8 *)"%ks:int", v31, v32, v33, v34, v35, (uint64_t)"WiFiShim_PreferredNetwork_SecMode");
    if ((_DWORD)v30)
    {
LABEL_89:
      v14 = v30;
      goto LABEL_91;
    }
    if (v83 - 9 <= 3)
    {
      if (dword_2550F4508 <= 800 && (dword_2550F4508 != -1 || sub_21A69876C((uint64_t)&dword_2550F4508, 0x320u)))
        sub_21A698FDC((uint64_t)&dword_2550F4508, (uint64_t)"OSStatus _CopyNetworksScannableInPreferredList(AutoGuessContextRef, CFMutableArrayRef, CFArrayRef, CFDictionaryRef, ScanOptions, CFArrayRef *)", 800, (uint64_t)"skipping Enterprise preferred network: %@\n", v37, v38, v39, v40, (uint64_t)v87);
      goto LABEL_54;
    }
    sub_21A693B94(v87, (uint64_t)&theString1, (UInt8 *)"%ks", v36, v37, v38, v39, v40, (uint64_t)"WiFiShim_PreferredNetwork_SSID");
    if ((_DWORD)v30)
      goto LABEL_89;
    if (!theString1)
      break;
    sub_21A693B94(v87, (uint64_t)&theDate, (UInt8 *)"%ks", v41, v42, v43, v44, v45, (uint64_t)"WiFiShim_PreferredNetwork_TimeAssociated");
    if ((_DWORD)v46 != -6727)
    {
      v14 = v46;
      if ((_DWORD)v46)
        goto LABEL_91;
      if (!theDate)
        break;
    }
    if (theString2 && CFStringCompare(theString1, theString2, 0) == kCFCompareEqualTo)
      goto LABEL_54;
    v47 = sub_21A68F7D0(theString1, 3, 0, a2);
    if (v47 == -1)
    {
      if ((v9 & 2) == 0
        || (v9 & 4) != 0 && v83 < 2
        || theDate && CFDateCompare(theDate, otherDate, 0) != kCFCompareGreaterThan)
      {
        goto LABEL_54;
      }
      v30 = sub_21A693A8C(v15, theArraya, (uint64_t)"%O", v48, v49, v50, v51, v52, (uint64_t)theString1);
    }
    else
    {
      if ((v9 & 1) == 0)
        goto LABEL_54;
      v53 = CFArrayGetValueAtIndex(a2, v47);
      cf = v53;
      if (!v53)
        break;
      v55 = (uint64_t)v53;
      if (sub_21A72E284((uint64_t)v53, v54) || sub_21A72E1E4(v55, v56))
        goto LABEL_54;
      v30 = sub_21A693A8C(v15, v80, (uint64_t)"%O", v57, v58, v59, v60, v61, v55);
    }
    if ((_DWORD)v30)
      goto LABEL_89;
LABEL_54:
    ++v28;
    Count = v29;
    if (v29 == v28)
      goto LABEL_55;
  }
  v14 = 4294960568;
LABEL_91:
  v26 = theArraya;
  v22 = v80;
LABEL_83:
  CFRelease(v22);
LABEL_84:
  if (v26)
    CFRelease(v26);
  if (otherDate)
    CFRelease(otherDate);
  return v14;
}

uint64_t sub_21A702224(uint64_t a1, CFArrayRef theArray, const __CFArray *a3, const __CFArray *a4, CFMutableArrayRef *a5)
{
  uint64_t v5;
  CFIndex Count;
  uint64_t v12;
  const __CFAllocator *v13;
  CFMutableArrayRef Mutable;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  CFMutableArrayRef v20;
  uint64_t i;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  const __CFString *v28;
  CFIndex v29;
  const __CFString *ValueAtIndex;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  const __CFString *v39;
  const __CFString *v40;
  const __CFString *v41;
  CFTypeRef cf;

  v5 = 4294960591;
  if (!a1 || !theArray || !a5)
    return v5;
  Count = CFArrayGetCount(theArray);
  if (!Count)
    return 4294960569;
  v12 = Count;
  v13 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD690]);
  if (!Mutable)
    return 4294960568;
  v20 = Mutable;
  v41 = 0;
  cf = 0;
  v39 = 0;
  v40 = 0;
  if (v12 >= 1)
  {
    for (i = 0; v12 != i; ++i)
    {
      sub_21A693B94((const __CFString *)theArray, (uint64_t)&v41, (UInt8 *)"[*]", v15, v16, v17, v18, v19, i);
      if ((_DWORD)v22)
      {
LABEL_30:
        v5 = v22;
        goto LABEL_34;
      }
      v28 = v41;
      if (!v41)
        goto LABEL_32;
      if (a3)
      {
        sub_21A693B94(v41, (uint64_t)&v40, (UInt8 *)"%ks.%ks", v23, v24, v25, v26, v27, (uint64_t)"txt");
        if ((_DWORD)v22)
          goto LABEL_30;
        if (!v40)
        {
          v5 = 0;
LABEL_34:
          CFRelease(v20);
          return v5;
        }
        v29 = sub_21A68F3C8(a3, v40);
        if (v29 != -1)
        {
          ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(a3, v29);
          v41 = ValueAtIndex;
          if (!ValueAtIndex)
          {
            v5 = 4294960586;
            goto LABEL_34;
          }
LABEL_24:
          v22 = sub_21A693A8C(v13, v20, (uint64_t)"%O", v31, v32, v33, v34, v35, (uint64_t)ValueAtIndex);
          if ((_DWORD)v22)
            goto LABEL_30;
          continue;
        }
        v28 = v41;
      }
      sub_21A693B94(v28, (uint64_t)&v39, (UInt8 *)"%ks.%ks", v23, v24, v25, v26, v27, (uint64_t)"txt");
      if ((_DWORD)v36 != -6727)
      {
        v5 = v36;
        if ((_DWORD)v36)
          goto LABEL_34;
        if (!v39)
          goto LABEL_32;
        v37 = sub_21A700584(a1, a4, v39, 3, (uint64_t *)&cf, v17, v18, v19);
        if ((_DWORD)v37 != -6727)
        {
          v5 = v37;
          if ((_DWORD)v37)
            goto LABEL_34;
          if (!cf)
          {
LABEL_32:
            v5 = 4294960568;
            goto LABEL_34;
          }
          CFRelease(cf);
          cf = 0;
          ValueAtIndex = v41;
          goto LABEL_24;
        }
      }
    }
  }
  if (!CFArrayGetCount(v20))
  {
    v5 = 4294960569;
    goto LABEL_34;
  }
  v5 = 0;
  *a5 = v20;
  return v5;
}

uint64_t sub_21A702454(uint64_t a1, const __CFString *a2, CFArrayRef theArray, const __CFArray *a4, CFMutableArrayRef *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v13;
  const __CFAllocator *v14;
  CFMutableArrayRef Mutable;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  CFMutableArrayRef v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  CFIndex Count;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  CFIndex v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  CFIndex v39;
  const __CFString *ValueAtIndex;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  const __CFString *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v52;
  const __CFAllocator *v53;
  char v54;
  const __CFString *v55;
  const __CFString *v56;

  if (dword_2550F4508 <= 800 && (dword_2550F4508 != -1 || sub_21A69876C((uint64_t)&dword_2550F4508, 0x320u)))
    sub_21A698FDC((uint64_t)&dword_2550F4508, (uint64_t)"OSStatus _BaseStationsBrowsedAndCreatingNetworksVisibleToBaseStation(AutoGuessContextRef, CFDictionaryRef, CFArrayRef, CFArrayRef, CFArrayRef *)", 800, (uint64_t)"\n", (uint64_t)a5, a6, a7, a8, v52);
  v13 = 4294960569;
  if (!theArray)
    return v13;
  if (!a4)
    return v13;
  if (!CFArrayGetCount(theArray))
    return v13;
  if (!CFArrayGetCount(a4))
    return v13;
  v13 = 4294960591;
  if (!a1 || !a5)
    return v13;
  *a5 = 0;
  v14 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD690]);
  if (!Mutable)
    return 4294960568;
  v20 = Mutable;
  v55 = 0;
  v56 = 0;
  v54 = 0;
  v21 = sub_21A6FF30C(a1, a2, 1852787795, &v54, v16, v17, v18, v19);
  v13 = v21;
  if (v54)
    v22 = (_DWORD)v21 == 0;
  else
    v22 = 0;
  if (v22)
    v23 = 30;
  else
    v23 = 22;
  Count = CFArrayGetCount(a4);
  if (Count >= 1)
  {
    v30 = Count;
    v53 = v14;
    v31 = 0;
    while (1)
    {
      sub_21A693B94((const __CFString *)a4, (uint64_t)&v56, (UInt8 *)"[*]", v25, v26, v27, v28, v29, v31);
      if ((_DWORD)v32)
      {
LABEL_36:
        v13 = v32;
        goto LABEL_42;
      }
      if (!v56)
        goto LABEL_38;
      if (sub_21A72E378((uint64_t)v56, (const char *)v23))
      {
        sub_21A6FCD64((uint64_t)"Skipping IBSS, non-secure, enterprise, or legacy sec mode network: %@\n", (uint64_t)v56, v33, v34, v35, v36, v37, v38);
      }
      else
      {
        sub_21A693B94(v56, (uint64_t)&v55, (UInt8 *)"%kO", v34, v35, v36, v37, v38, (uint64_t)CFSTR("BSSID"));
        if ((_DWORD)v32)
          goto LABEL_36;
        if (!v55)
        {
LABEL_38:
          v13 = 4294960568;
          goto LABEL_42;
        }
        v39 = sub_21A68F3C8(theArray, v55);
        if (v39 != -1)
        {
          ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(theArray, v39);
          if (!ValueAtIndex)
          {
            v13 = 4294960586;
LABEL_42:
            CFRelease(v20);
            return v13;
          }
          v48 = ValueAtIndex;
          if (!sub_21A68F104(ValueAtIndex, v41, v42, v43, v44, v45, v46, v47)
            && !sub_21A68F680(a2, v48, v49, v25, v26, v27, v28, v29)
            && (!CFArrayGetCount(v20) || sub_21A68F3C8(v20, v55) == -1))
          {
            if (sub_21A6FFD88(a1, v48, v50, v25, v26, v27, v28, v29))
            {
              v32 = sub_21A693A8C(v53, v20, (uint64_t)"%O", v25, v26, v27, v28, v29, (uint64_t)v48);
              if ((_DWORD)v32)
                goto LABEL_36;
            }
          }
        }
      }
      if (v30 == ++v31)
      {
        v13 = 0;
        break;
      }
    }
  }
  if (!CFArrayGetCount(v20))
  {
    v13 = 4294960569;
    goto LABEL_42;
  }
  *a5 = v20;
  return v13;
}

BOOL sub_21A7026F8(const __CFString *a1, CFArrayRef theArray, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BOOL8 result;
  uint64_t v11;

  if (dword_2550F4508 <= 800 && (dword_2550F4508 != -1 || sub_21A69876C((uint64_t)&dword_2550F4508, 0x320u)))
    sub_21A698FDC((uint64_t)&dword_2550F4508, (uint64_t)"Boolean _WirelessNetworkVisibleInNetworkScan(CFStringRef, CFArrayRef)", 800, (uint64_t)"\n", a5, a6, a7, a8, v11);
  result = 0;
  if (a1)
  {
    if (theArray)
      return sub_21A68F700(a1, 0, theArray) != -1;
  }
  return result;
}

uint64_t sub_21A702788(CFDictionaryRef theDict, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;
  uint64_t v10;

  if (dword_2550F4508 <= 800 && (dword_2550F4508 != -1 || sub_21A69876C((uint64_t)&dword_2550F4508, 0x320u)))
    sub_21A698FDC((uint64_t)&dword_2550F4508, (uint64_t)"Boolean _UnconfiguredBaseStationIsSpecifiedByBonjourRecord(CFDictionaryRef)", 800, (uint64_t)"\n", a5, a6, a7, a8, v10);
  if (!theDict)
    return 0;
  result = CFDictionaryContainsKey(theDict, CFSTR("BSAutoGuessContext_ChosenUnconfiguredBrowseRecord"));
  if ((_DWORD)result)
    return CFDictionaryContainsKey(theDict, CFSTR("BSAutoGuessContext_ChosenUnconfiguredScanRecord")) == 0;
  return result;
}

BOOL sub_21A702828(CFDictionaryRef theDict, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;

  if (dword_2550F4508 <= 800 && (dword_2550F4508 != -1 || sub_21A69876C((uint64_t)&dword_2550F4508, 0x320u)))
    sub_21A698FDC((uint64_t)&dword_2550F4508, (uint64_t)"Boolean _UnconfiguredBaseStationIsSpecifiedByWirelessScanRecord(CFDictionaryRef)", 800, (uint64_t)"\n", a5, a6, a7, a8, v10);
  return theDict
      && !CFDictionaryContainsKey(theDict, CFSTR("BSAutoGuessContext_ChosenUnconfiguredBrowseRecord"))
      && CFDictionaryContainsKey(theDict, CFSTR("BSAutoGuessContext_ChosenUnconfiguredScanRecord")) != 0;
}

BOOL sub_21A7028C8(CFDictionaryRef theDict, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BOOL8 result;
  uint64_t v17;

  if (dword_2550F4508 <= 800 && (dword_2550F4508 != -1 || sub_21A69876C((uint64_t)&dword_2550F4508, 0x320u)))
    sub_21A698FDC((uint64_t)&dword_2550F4508, (uint64_t)"Boolean _UnconfiguredBaseStationInContextDictionary(CFDictionaryRef)", 800, (uint64_t)"\n", a5, a6, a7, a8, v17);
  if (!theDict)
    return 0;
  if (sub_21A702788(theDict, a2, a3, a4, a5, a6, a7, a8))
    return 1;
  result = sub_21A702828(theDict, v9, v10, v11, v12, v13, v14, v15);
  if (result)
    return 1;
  return result;
}

uint64_t sub_21A702958(const void ***a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  const void **v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;

  if (dword_2550F4508 <= 800 && (dword_2550F4508 != -1 || sub_21A69876C((uint64_t)&dword_2550F4508, 0x320u)))
    sub_21A698FDC((uint64_t)&dword_2550F4508, (uint64_t)"OSStatus BSAutoGuess_Create(AutoGuessContextRef *)", 800, (uint64_t)"BSAutoGuess_Create\n", a5, a6, a7, a8, v28);
  if (!a1)
    return 4294960591;
  v9 = (char *)malloc_type_calloc(1uLL, 0x38uLL, 0x1060040837169E1uLL);
  if (!v9)
    return 4294960568;
  v17 = (const void **)v9;
  *(_OWORD *)(v9 + 28) = 0u;
  v18 = v9 + 48;
  *(_OWORD *)v9 = 0u;
  *((_OWORD *)v9 + 1) = 0u;
  v26 = sub_21A7097E4((_QWORD *)v9 + 6, v10, v11, v12, v13, v14, v15, v16);
  if (!(_DWORD)v26)
  {
    if (*v18)
    {
      v26 = 0;
      *a1 = v17;
      return v26;
    }
    v26 = 4294960568;
  }
  sub_21A702A48(v17, v19, v20, v21, v22, v23, v24, v25);
  return v26;
}

uint64_t sub_21A702A48(const void **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  const void *v9;
  const void *v10;
  const void *v11;
  const void *v12;
  const void *v13;

  if (!a1)
    return 4294960591;
  v9 = *a1;
  if (v9)
  {
    CFRelease(v9);
    *a1 = 0;
  }
  v10 = a1[1];
  if (v10)
  {
    CFRelease(v10);
    a1[1] = 0;
  }
  v11 = a1[2];
  if (v11)
  {
    CFRelease(v11);
    a1[2] = 0;
  }
  v12 = a1[3];
  if (v12)
  {
    CFRelease(v12);
    a1[3] = 0;
  }
  v13 = a1[4];
  if (v13)
  {
    CFRelease(v13);
    a1[4] = 0;
  }
  sub_21A709990(a1[6], a2, a3, a4, a5, a6, a7, a8);
  free(a1);
  return 0;
}

uint64_t sub_21A702AD4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12;

  if (dword_2550F4508 <= 800 && (dword_2550F4508 != -1 || sub_21A69876C((uint64_t)&dword_2550F4508, 0x320u)))
    sub_21A698FDC((uint64_t)&dword_2550F4508, (uint64_t)"OSStatus BSAutoGuess_SetAssistantCallback(AutoGuessContextRef, assistant_callback_t, void *)", 800, (uint64_t)" \n", a5, a6, a7, a8, v12);
  if (a1)
    return sub_21A70A18C(*(_QWORD *)(a1 + 48), a2, a3, a4, a5, a6, a7, a8);
  else
    return 4294960591;
}

uint64_t sub_21A702B70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12;

  if (dword_2550F4508 <= 800 && (dword_2550F4508 != -1 || sub_21A69876C((uint64_t)&dword_2550F4508, 0x320u)))
    sub_21A698FDC((uint64_t)&dword_2550F4508, (uint64_t)"OSStatus BSAutoGuess_SetProgressCallback(AutoGuessContextRef, assistant_progress_t, void *)", 800, (uint64_t)" \n", a5, a6, a7, a8, v12);
  if (a1)
    return sub_21A70A6D8(*(_QWORD *)(a1 + 48), a2, a3, a4, a5, a6, a7, a8);
  else
    return 4294960591;
}

uint64_t sub_21A702C0C(uint64_t *a1, CFDictionaryRef theDict, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;
  CFMutableArrayRef Mutable;
  NSObject *global_queue;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  if (dword_2550F4508 <= 800 && (dword_2550F4508 != -1 || sub_21A69876C((uint64_t)&dword_2550F4508, 0x320u)))
    sub_21A698FDC((uint64_t)&dword_2550F4508, (uint64_t)"OSStatus BSAutoGuess_PerformGuess(AutoGuessContextRef, CFDictionaryRef)", 800, (uint64_t)"Auto Guess START\n", a5, a6, a7, a8, v24);
  result = 4294960591;
  if (a1 && theDict)
  {
    if (CFDictionaryGetCount(theDict))
    {
      *a1 = (uint64_t)theDict;
      CFRetain(theDict);
      Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD690]);
      a1[1] = (uint64_t)Mutable;
      if (Mutable)
      {
        global_queue = dispatch_get_global_queue(0, 0);
        dispatch_async_f(global_queue, a1, (dispatch_function_t)sub_21A702D10);
        result = sub_21A709D98(a1[6], v13, v14, v15, v16, v17, v18, v19);
        if (!(_DWORD)result)
        {
          sub_21A70A778(a1[6], 17, 0, 0, v20, v21, v22, v23);
          return 0;
        }
      }
      else
      {
        return 4294960568;
      }
    }
    else
    {
      return 4294960591;
    }
  }
  return result;
}

int *sub_21A702D10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  CFAllocatorRef *v9;
  const __CFDictionary *v10;
  const __CFString *Value;
  const __CFArray *v12;
  const void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BOOL4 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _BOOL4 v29;
  const __CFAllocator *v30;
  const __CFArray *Mutable;
  const __CFDictionary *v32;
  CFMutableDictionaryRef MutableCopy;
  CFDictionaryRef v34;
  uint64_t v35;
  char v36;
  const __CFArray *v37;
  CFMutableArrayRef v38;
  const __CFArray *v39;
  CFMutableArrayRef v40;
  uint64_t v41;
  int v42;
  _BOOL4 v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  const char *v61;
  uint64_t v62;
  const char *v63;
  uint64_t v64;
  const void *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  char *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  const __CFDictionary *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  int v162;
  CFDictionaryRef v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  char *v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  const __CFString *v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  char *v209;
  const char *v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  const char *v217;
  char *v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  const char *v226;
  char *v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  char *v240;
  uint64_t v241;
  CFDictionaryRef v242;
  uint64_t v243;
  CFIndex Count;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  char *v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  char *v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  char *v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  const char *v304;
  char *v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  const char *v320;
  char *v321;
  int v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  CFIndex v329;
  const char *v330;
  const __CFArray *v331;
  const __CFDictionary *v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  char *v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  const __CFString *v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  char *v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  char *v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  char *v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  uint64_t v405;
  char *v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t v409;
  uint64_t v410;
  uint64_t v411;
  uint64_t v412;
  uint64_t v413;
  uint64_t v414;
  uint64_t v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t v418;
  char *v419;
  uint64_t v420;
  uint64_t v421;
  uint64_t v422;
  uint64_t v423;
  uint64_t v424;
  uint64_t v425;
  uint64_t v426;
  uint64_t v427;
  uint64_t v428;
  uint64_t v429;
  uint64_t v430;
  uint64_t v431;
  uint64_t v432;
  uint64_t v433;
  char *v434;
  uint64_t v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t v438;
  uint64_t v439;
  uint64_t v440;
  uint64_t v441;
  uint64_t v442;
  uint64_t v443;
  uint64_t v444;
  char *v445;
  uint64_t v446;
  uint64_t v447;
  uint64_t v448;
  uint64_t v449;
  uint64_t v450;
  uint64_t v451;
  uint64_t v452;
  uint64_t v453;
  uint64_t v454;
  uint64_t v455;
  uint64_t v456;
  uint64_t v457;
  uint64_t v458;
  uint64_t v459;
  uint64_t v460;
  uint64_t v461;
  uint64_t v462;
  uint64_t v463;
  uint64_t v464;
  uint64_t v465;
  uint64_t v466;
  uint64_t v467;
  uint64_t v468;
  uint64_t v469;
  uint64_t v470;
  uint64_t v471;
  uint64_t v472;
  uint64_t v473;
  uint64_t v474;
  uint64_t v475;
  uint64_t v476;
  uint64_t v477;
  uint64_t v478;
  uint64_t v479;
  uint64_t v480;
  uint64_t v481;
  uint64_t v482;
  uint64_t v483;
  uint64_t v484;
  uint64_t v485;
  uint64_t v486;
  uint64_t v487;
  uint64_t v488;
  uint64_t v489;
  uint64_t v490;
  uint64_t v491;
  CFIndex v492;
  uint64_t v493;
  uint64_t v494;
  uint64_t v495;
  uint64_t v496;
  uint64_t v497;
  CFIndex v498;
  const __CFString *v499;
  uint64_t v500;
  uint64_t v501;
  uint64_t v502;
  uint64_t v503;
  uint64_t v504;
  uint64_t v505;
  uint64_t v506;
  uint64_t v507;
  uint64_t v508;
  uint64_t v509;
  uint64_t v510;
  uint64_t v511;
  uint64_t v512;
  uint64_t v513;
  uint64_t v514;
  uint64_t v515;
  uint64_t v516;
  uint64_t v517;
  uint64_t v518;
  uint64_t v519;
  uint64_t v520;
  uint64_t v521;
  _BOOL4 v522;
  BOOL v523;
  uint64_t v524;
  uint64_t v525;
  uint64_t v526;
  uint64_t v527;
  uint64_t v528;
  uint64_t v529;
  uint64_t v530;
  uint64_t v531;
  uint64_t v532;
  uint64_t v533;
  uint64_t v534;
  uint64_t v535;
  char *v536;
  uint64_t v537;
  uint64_t v538;
  uint64_t v539;
  uint64_t v540;
  uint64_t v541;
  uint64_t v542;
  uint64_t v543;
  uint64_t v544;
  char *v545;
  uint64_t v546;
  uint64_t v547;
  uint64_t v548;
  uint64_t v549;
  uint64_t v550;
  uint64_t v551;
  _BOOL4 v552;
  uint64_t v553;
  uint64_t v554;
  uint64_t v555;
  const __CFArray *v556;
  const __CFDictionary *v557;
  uint64_t v558;
  uint64_t v559;
  uint64_t v560;
  uint64_t v561;
  uint64_t v562;
  uint64_t v563;
  uint64_t v564;
  uint64_t v565;
  uint64_t v566;
  const __CFString *v567;
  uint64_t v568;
  uint64_t v569;
  uint64_t v570;
  uint64_t v571;
  uint64_t v572;
  uint64_t v573;
  uint64_t v574;
  uint64_t v575;
  uint64_t v576;
  uint64_t v577;
  uint64_t v578;
  uint64_t v579;
  uint64_t v580;
  uint64_t v581;
  uint64_t v582;
  uint64_t v583;
  uint64_t v584;
  uint64_t v585;
  uint64_t v586;
  uint64_t v587;
  uint64_t v588;
  uint64_t v589;
  uint64_t v590;
  uint64_t v591;
  uint64_t v592;
  uint64_t v593;
  uint64_t v594;
  uint64_t v595;
  const __CFDictionary *v596;
  uint64_t v597;
  uint64_t v598;
  uint64_t v599;
  uint64_t v600;
  uint64_t v601;
  uint64_t v602;
  uint64_t v603;
  uint64_t v604;
  uint64_t v605;
  uint64_t v606;
  uint64_t v607;
  uint64_t v608;
  uint64_t v609;
  uint64_t v610;
  uint64_t v611;
  uint64_t v612;
  uint64_t v613;
  uint64_t v614;
  uint64_t v615;
  uint64_t v616;
  uint64_t v617;
  uint64_t v618;
  uint64_t v619;
  uint64_t v620;
  const __CFDictionary *v621;
  uint64_t v622;
  uint64_t v623;
  const __CFString *v624;
  uint64_t v625;
  uint64_t v626;
  uint64_t v627;
  uint64_t v628;
  uint64_t v629;
  uint64_t v630;
  uint64_t v631;
  uint64_t v632;
  uint64_t v633;
  uint64_t v634;
  uint64_t v635;
  uint64_t v636;
  const __CFString *v637;
  uint64_t v638;
  uint64_t v639;
  uint64_t v640;
  uint64_t v641;
  uint64_t v642;
  uint64_t v643;
  uint64_t v644;
  uint64_t v645;
  uint64_t v646;
  uint64_t v647;
  uint64_t v648;
  uint64_t v649;
  uint64_t v650;
  uint64_t v651;
  uint64_t v652;
  uint64_t v653;
  uint64_t v654;
  uint64_t v655;
  uint64_t v656;
  uint64_t v657;
  uint64_t v658;
  uint64_t v659;
  uint64_t v660;
  uint64_t v661;
  uint64_t v662;
  uint64_t v663;
  uint64_t v664;
  uint64_t v665;
  uint64_t v666;
  const __CFDictionary *v667;
  uint64_t v668;
  uint64_t v669;
  uint64_t v670;
  uint64_t v671;
  uint64_t v672;
  uint64_t v673;
  uint64_t v674;
  uint64_t v675;
  uint64_t v676;
  uint64_t v677;
  uint64_t v678;
  uint64_t v679;
  uint64_t v680;
  uint64_t v681;
  uint64_t v682;
  uint64_t v683;
  uint64_t v684;
  uint64_t v685;
  uint64_t v686;
  uint64_t v687;
  uint64_t v688;
  uint64_t v689;
  uint64_t v690;
  uint64_t v691;
  uint64_t v692;
  uint64_t v693;
  uint64_t v694;
  uint64_t v695;
  uint64_t v696;
  uint64_t v697;
  uint64_t v698;
  uint64_t v699;
  uint64_t v700;
  uint64_t v701;
  uint64_t v702;
  uint64_t v703;
  uint64_t v704;
  uint64_t v705;
  uint64_t v706;
  uint64_t v707;
  uint64_t v708;
  uint64_t v709;
  uint64_t v710;
  uint64_t v711;
  const __CFString *v712;
  uint64_t v713;
  uint64_t v714;
  uint64_t v715;
  uint64_t v716;
  CFIndex v717;
  uint64_t v718;
  uint64_t v719;
  uint64_t v720;
  uint64_t v721;
  uint64_t v722;
  uint64_t v723;
  uint64_t v724;
  uint64_t v725;
  uint64_t v726;
  uint64_t v727;
  uint64_t v728;
  uint64_t v729;
  const __CFString *v730;
  uint64_t v731;
  uint64_t v732;
  uint64_t v733;
  uint64_t v734;
  uint64_t v735;
  uint64_t v736;
  uint64_t v737;
  uint64_t v738;
  uint64_t v739;
  uint64_t v740;
  uint64_t v741;
  uint64_t v742;
  uint64_t v743;
  uint64_t v744;
  uint64_t v745;
  uint64_t v746;
  uint64_t v747;
  uint64_t v748;
  uint64_t v749;
  uint64_t v750;
  uint64_t v751;
  uint64_t v752;
  uint64_t v753;
  uint64_t v754;
  uint64_t v755;
  uint64_t v756;
  uint64_t v757;
  uint64_t v758;
  uint64_t v759;
  uint64_t v760;
  uint64_t v761;
  uint64_t v762;
  uint64_t v763;
  char *v764;
  uint64_t v765;
  uint64_t v766;
  uint64_t v767;
  uint64_t v768;
  uint64_t v769;
  uint64_t v770;
  uint64_t v771;
  uint64_t v772;
  uint64_t v773;
  uint64_t v774;
  uint64_t v775;
  uint64_t v776;
  uint64_t v777;
  uint64_t v778;
  uint64_t v779;
  uint64_t v780;
  uint64_t v781;
  uint64_t v782;
  uint64_t v783;
  uint64_t v784;
  uint64_t v785;
  uint64_t v786;
  uint64_t v787;
  uint64_t v788;
  uint64_t v789;
  uint64_t v790;
  uint64_t v791;
  uint64_t v792;
  uint64_t v793;
  uint64_t v794;
  uint64_t v795;
  uint64_t v796;
  uint64_t v797;
  uint64_t v798;
  uint64_t v799;
  uint64_t v800;
  const __CFDictionary *v801;
  uint64_t v802;
  uint64_t v803;
  uint64_t v804;
  uint64_t v805;
  uint64_t v806;
  uint64_t v807;
  uint64_t v808;
  uint64_t v809;
  uint64_t v810;
  uint64_t v811;
  CFArrayRef v812;
  const __CFString *v813;
  uint64_t v814;
  uint64_t v815;
  uint64_t v816;
  uint64_t v817;
  uint64_t v818;
  uint64_t v819;
  uint64_t v820;
  uint64_t v821;
  uint64_t v822;
  uint64_t v823;
  uint64_t v824;
  uint64_t v825;
  uint64_t v826;
  uint64_t v827;
  uint64_t v828;
  uint64_t v829;
  uint64_t v830;
  uint64_t v831;
  uint64_t v832;
  uint64_t v833;
  uint64_t v834;
  uint64_t v835;
  uint64_t v836;
  uint64_t v837;
  uint64_t v838;
  uint64_t v839;
  uint64_t v840;
  uint64_t v841;
  uint64_t v842;
  uint64_t v843;
  uint64_t v844;
  uint64_t v845;
  uint64_t v846;
  uint64_t v847;
  uint64_t v848;
  uint64_t v849;
  uint64_t v850;
  uint64_t v851;
  uint64_t v852;
  const __CFDictionary *v853;
  uint64_t v854;
  uint64_t v855;
  uint64_t v856;
  uint64_t v857;
  uint64_t v858;
  uint64_t v859;
  uint64_t v860;
  uint64_t v861;
  uint64_t v862;
  uint64_t v863;
  CFArrayRef v864;
  const __CFString *v865;
  uint64_t v866;
  uint64_t v867;
  uint64_t v868;
  uint64_t v869;
  uint64_t v870;
  uint64_t v871;
  uint64_t v872;
  uint64_t v873;
  uint64_t v874;
  uint64_t v875;
  uint64_t v876;
  uint64_t v877;
  uint64_t v878;
  uint64_t v879;
  uint64_t v880;
  uint64_t v881;
  uint64_t v882;
  uint64_t v883;
  uint64_t v884;
  uint64_t v885;
  uint64_t v886;
  uint64_t v887;
  uint64_t v888;
  const __CFString *v889;
  uint64_t v890;
  uint64_t v891;
  uint64_t v892;
  uint64_t v893;
  uint64_t v894;
  uint64_t v895;
  uint64_t v896;
  uint64_t v897;
  uint64_t v898;
  uint64_t v899;
  uint64_t v900;
  uint64_t v901;
  uint64_t v902;
  uint64_t v903;
  uint64_t v904;
  const __CFString *v905;
  uint64_t v906;
  uint64_t v907;
  uint64_t v908;
  uint64_t v909;
  uint64_t v910;
  uint64_t v911;
  uint64_t v912;
  uint64_t v913;
  uint64_t v914;
  uint64_t v915;
  uint64_t v916;
  uint64_t v917;
  uint64_t v918;
  uint64_t v919;
  uint64_t v920;
  uint64_t v921;
  uint64_t v922;
  uint64_t v923;
  uint64_t v924;
  uint64_t v925;
  uint64_t v926;
  uint64_t v927;
  uint64_t v928;
  uint64_t v929;
  uint64_t v930;
  uint64_t v931;
  uint64_t v932;
  uint64_t v933;
  uint64_t v934;
  uint64_t v935;
  uint64_t v936;
  uint64_t v937;
  uint64_t v938;
  uint64_t v939;
  uint64_t v940;
  uint64_t v941;
  uint64_t v942;
  uint64_t v943;
  uint64_t v944;
  uint64_t v945;
  uint64_t v946;
  uint64_t v947;
  uint64_t v948;
  uint64_t v949;
  uint64_t v950;
  uint64_t v951;
  uint64_t v952;
  uint64_t v953;
  uint64_t v954;
  uint64_t v955;
  uint64_t v956;
  uint64_t v957;
  uint64_t v958;
  uint64_t v959;
  uint64_t v960;
  uint64_t v961;
  uint64_t v962;
  uint64_t v963;
  uint64_t v964;
  uint64_t v965;
  uint64_t v966;
  uint64_t v967;
  uint64_t v968;
  uint64_t v969;
  uint64_t v970;
  uint64_t v971;
  const __CFDictionary *v972;
  uint64_t v973;
  uint64_t v974;
  uint64_t v975;
  uint64_t v976;
  uint64_t v977;
  uint64_t v978;
  uint64_t v979;
  uint64_t v980;
  uint64_t v981;
  uint64_t v982;
  uint64_t v983;
  uint64_t v984;
  uint64_t v985;
  uint64_t v986;
  uint64_t v987;
  uint64_t v988;
  uint64_t v989;
  uint64_t v990;
  uint64_t v991;
  uint64_t v992;
  uint64_t v993;
  uint64_t v994;
  uint64_t v995;
  uint64_t v996;
  uint64_t v997;
  uint64_t v998;
  uint64_t v999;
  uint64_t v1000;
  uint64_t v1001;
  uint64_t v1002;
  uint64_t v1003;
  uint64_t v1004;
  uint64_t v1005;
  uint64_t v1006;
  uint64_t v1007;
  uint64_t v1008;
  uint64_t v1009;
  uint64_t v1010;
  uint64_t v1011;
  uint64_t v1012;
  uint64_t v1013;
  uint64_t v1014;
  uint64_t v1015;
  uint64_t v1016;
  uint64_t v1017;
  uint64_t v1018;
  uint64_t v1019;
  uint64_t v1020;
  uint64_t v1021;
  uint64_t v1022;
  uint64_t v1023;
  uint64_t v1024;
  uint64_t v1025;
  uint64_t v1026;
  uint64_t v1027;
  uint64_t v1028;
  uint64_t v1029;
  uint64_t v1030;
  uint64_t v1031;
  uint64_t v1032;
  uint64_t v1033;
  uint64_t v1034;
  uint64_t v1035;
  uint64_t v1036;
  uint64_t v1037;
  uint64_t v1038;
  uint64_t v1039;
  uint64_t v1040;
  int *result;
  uint64_t v1042;
  uint64_t v1043;
  uint64_t v1044;
  uint64_t v1045;
  uint64_t v1046;
  uint64_t v1047;
  uint64_t v1048;
  uint64_t v1049;
  uint64_t v1050;
  uint64_t v1051;
  uint64_t v1052;
  uint64_t v1053;
  uint64_t v1054;
  uint64_t v1055;
  uint64_t v1056;
  uint64_t v1057;
  uint64_t v1058;
  uint64_t v1059;
  uint64_t v1060;
  uint64_t v1061;
  uint64_t v1062;
  uint64_t v1063;
  uint64_t v1064;
  uint64_t v1065;
  uint64_t v1066;
  uint64_t v1067;
  uint64_t v1068;
  uint64_t v1069;
  uint64_t v1070;
  uint64_t v1071;
  uint64_t v1072;
  uint64_t v1073;
  uint64_t v1074;
  uint64_t v1075;
  uint64_t v1076;
  uint64_t v1077;
  uint64_t v1078;
  uint64_t v1079;
  uint64_t v1080;
  uint64_t v1081;
  uint64_t v1082;
  uint64_t v1083;
  uint64_t v1084;
  uint64_t v1085;
  uint64_t v1086;
  uint64_t v1087;
  uint64_t v1088;
  uint64_t v1089;
  uint64_t v1090;
  uint64_t v1091;
  uint64_t v1092;
  uint64_t v1093;
  uint64_t v1094;
  uint64_t v1095;
  uint64_t v1096;
  uint64_t v1097;
  uint64_t v1098;
  uint64_t v1099;
  uint64_t v1100;
  uint64_t v1101;
  uint64_t v1102;
  uint64_t v1103;
  uint64_t v1104;
  uint64_t v1105;
  uint64_t v1106;
  uint64_t v1107;
  uint64_t v1108;
  uint64_t v1109;
  uint64_t v1110;
  uint64_t v1111;
  uint64_t v1112;
  const char *v1113;
  const __CFArray *v1114;
  _BOOL4 v1115;
  const __CFString *v1116;
  _BOOL4 v1117;
  _BOOL4 v1118;
  const void *v1119;
  CFTypeRef cf;
  int *v1121;
  CFDictionaryRef theDict;
  CFArrayRef theArray;
  CFTypeRef v1124;
  CFTypeRef v1125;
  int v1126;
  int v1127;
  const __CFString *v1128;
  const __CFString *ValueAtIndex;
  const __CFString *v1130;
  CFIndex v1131;
  __CFArray *v1132[2];

  ValueAtIndex = 0;
  v1130 = 0;
  v1128 = 0;
  v1124 = 0;
  v1125 = 0;
  v1126 = -1;
  v1127 = -1;
  theDict = 0;
  theArray = 0;
  v1121 = 0;
  v1131 = 0;
  v9 = (CFAllocatorRef *)MEMORY[0x24BDBD240];
  if (!a1 || (v10 = *(const __CFDictionary **)a1) == 0 || !CFDictionaryGetCount(v10))
  {
    Mutable = 0;
    goto LABEL_8;
  }
  Value = (const __CFString *)CFDictionaryGetValue(*(CFDictionaryRef *)a1, CFSTR("BSAutoGuessContext_HostCurrentWirelessAssociation"));
  v12 = (const __CFArray *)CFDictionaryGetValue(*(CFDictionaryRef *)a1, CFSTR("BSAutoGuessContext_HostPreferredNetworks"));
  v13 = CFDictionaryGetValue(*(CFDictionaryRef *)a1, CFSTR("BSAutoGuessContext_HostPrevConfigFiles"));
  *(_QWORD *)(a1 + 24) = CFDictionaryGetValue(*(CFDictionaryRef *)a1, CFSTR("BSAutoGuessContext_HostBrowsedBaseStations"));
  *(_QWORD *)(a1 + 16) = CFDictionaryGetValue(*(CFDictionaryRef *)a1, CFSTR("BSAutoGuessContext_CachedBaseStationSettings"));
  *(_QWORD *)(a1 + 32) = CFDictionaryGetValue(*(CFDictionaryRef *)a1, CFSTR("BSAutoGuessContext_HostScannedNetworks"));
  v21 = sub_21A6FDD90(*(const __CFString **)a1, v14, v15, v16, v17, v18, v19, v20);
  v29 = sub_21A6FDE30(*(const __CFString **)a1, v22, v23, v24, v25, v26, v27, v28);
  v30 = *v9;
  Mutable = CFArrayCreateMutable(*v9, 0, MEMORY[0x24BDBD690]);
  if (!Mutable)
  {
LABEL_8:
    v34 = 0;
    v35 = 4294960591;
LABEL_9:
    v36 = 1;
    goto LABEL_10;
  }
  v32 = *(const __CFDictionary **)(a1 + 16);
  if (v32)
    MutableCopy = CFDictionaryCreateMutableCopy(v30, 0, v32);
  else
    MutableCopy = CFDictionaryCreateMutable(v30, 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
  *(_QWORD *)(a1 + 16) = MutableCopy;
  if (!MutableCopy
    || ((v37 = *(const __CFArray **)(a1 + 24)) == 0
      ? (v38 = CFArrayCreateMutable(v30, 0, MEMORY[0x24BDBD690]))
      : (v38 = CFArrayCreateMutableCopy(v30, 0, v37)),
        (*(_QWORD *)(a1 + 24) = v38) == 0
     || ((v39 = *(const __CFArray **)(a1 + 32)) == 0
       ? (v40 = CFArrayCreateMutable(v30, 0, MEMORY[0x24BDBD690]))
       : (v40 = CFArrayCreateMutableCopy(v30, 0, v39)),
         (*(_QWORD *)(a1 + 32) = v40) == 0)))
  {
    v34 = 0;
    v35 = 4294960568;
    goto LABEL_9;
  }
  v1118 = v29;
  v1119 = v13;
  if (dword_2550F4508 >= 801)
  {
    v43 = Value != 0;
  }
  else
  {
    if (dword_2550F4508 != -1 || sub_21A69876C((uint64_t)&dword_2550F4508, 0x320u))
      sub_21A698FDC((uint64_t)&dword_2550F4508, (uint64_t)"void __BSAutoGuessConfiguration(void *)", 800, (uint64_t)"State machine starting... \n", a5, a6, a7, a8, v1110);
    v42 = dword_2550F4508;
    v43 = Value != 0;
    if (Value && dword_2550F4508 <= 800)
    {
      if (dword_2550F4508 != -1 || sub_21A69876C((uint64_t)&dword_2550F4508, 0x320u))
        sub_21A698FDC((uint64_t)&dword_2550F4508, (uint64_t)"void __BSAutoGuessConfiguration(void *)", 800, (uint64_t)"currentAssociationNetworkDict: %@\n", a5, a6, a7, a8, (uint64_t)Value);
      v42 = dword_2550F4508;
    }
    if (v12 && v42 <= 800)
    {
      if (v42 != -1 || sub_21A69876C((uint64_t)&dword_2550F4508, 0x320u))
        sub_21A698FDC((uint64_t)&dword_2550F4508, (uint64_t)"void __BSAutoGuessConfiguration(void *)", 800, (uint64_t)"myHostPreferredNetworks: %@\n", a5, a6, a7, a8, (uint64_t)v12);
      v42 = dword_2550F4508;
    }
    if (v1119 && v42 <= 800 && (v42 != -1 || sub_21A69876C((uint64_t)&dword_2550F4508, 0x320u)))
      sub_21A698FDC((uint64_t)&dword_2550F4508, (uint64_t)"void __BSAutoGuessConfiguration(void *)", 800, (uint64_t)"myHostPreviousConfigFiles: %@\n", a5, a6, a7, a8, (uint64_t)v1119);
    if (dword_2550F4508 <= 800)
    {
      if (dword_2550F4508 != -1 || sub_21A69876C((uint64_t)&dword_2550F4508, 0x320u))
        sub_21A698FDC((uint64_t)&dword_2550F4508, (uint64_t)"void __BSAutoGuessConfiguration(void *)", 800, (uint64_t)"noWirelessOnHost: %d\n", a5, a6, a7, a8, v21);
      if (dword_2550F4508 <= 800 && (dword_2550F4508 != -1 || sub_21A69876C((uint64_t)&dword_2550F4508, 0x320u)))
        sub_21A698FDC((uint64_t)&dword_2550F4508, (uint64_t)"void __BSAutoGuessConfiguration(void *)", 800, (uint64_t)"hostHasPreferredNetworkSupport: %d\n", a5, a6, a7, a8, v29);
    }
  }
  sub_21A6FC0F0((uint64_t)"obj->browsedBaseStations: \n", *(CFArrayRef *)(a1 + 24), v41, a4, a5, a6, a7, a8);
  sub_21A6FC5DC((uint64_t)"obj->scannedNetworks: \n", *(CFArrayRef *)(a1 + 32), v44, v45, v46, v47, v48, v49);
  v1117 = v43;
  if (!v43)
    goto LABEL_62;
  v1132[0] = 0;
  sub_21A693B94(Value, (uint64_t)v1132, (UInt8 *)"%kO", v50, v51, v52, v53, v54, (uint64_t)CFSTR("SSID_STR"));
  v35 = v55;
  if ((_DWORD)v55)
  {
LABEL_64:
    v34 = 0;
    goto LABEL_9;
  }
  if (!v1132[0])
  {
LABEL_946:
    v35 = 4294960568;
    goto LABEL_64;
  }
  if (sub_21A68F700((const __CFString *)v1132[0], 0, *(CFArrayRef *)(a1 + 32)) == -1)
  {
    v35 = sub_21A70C110(*(_QWORD *)(a1 + 48), (const __CFString *)v1132[0], 3, (CFTypeRef *)&theDict, v56, v57, v58, v59);
    if ((_DWORD)v35)
      goto LABEL_64;
    if (theDict)
    {
      v35 = sub_21A693A8C(v30, *(__CFArray **)(a1 + 32), (uint64_t)"%O", a4, a5, a6, a7, a8, (uint64_t)theDict);
      if (theDict)
      {
        CFRelease(theDict);
        theDict = 0;
      }
      if ((_DWORD)v35)
        goto LABEL_64;
      goto LABEL_62;
    }
    goto LABEL_946;
  }
LABEL_62:
  v60 = sub_21A70D934(*(_QWORD *)(a1 + 48), 300);
  if ((_DWORD)v60)
  {
    v35 = v60;
    goto LABEL_64;
  }
  sub_21A70A778(*(_QWORD *)(a1 + 48), 15, 0, 0, a5, a6, a7, a8);
  if (sub_21A709EEC(*(_QWORD *)(a1 + 48)))
  {
    v36 = 0;
    v34 = 0;
    v35 = 4294960573;
    goto LABEL_10;
  }
  v1114 = v12;
  v63 = "(%d) No unconfigured networks are visible because Wi-Fi is disabled.";
  v34 = 0;
  v1116 = 0;
  v1115 = v21;
  if (!v21)
    v63 = "(%d) No unconfigured networks are visible in Wi-Fi scans.";
  v1112 = 0;
  v1113 = v63;
  v64 = 1;
  v65 = v1119;
  while ((int)v64 <= 601)
  {
    if ((int)v64 > 400)
    {
      switch((int)v64)
      {
        case 501:
          if (dword_2550F4508 <= 800 && (dword_2550F4508 != -1 || sub_21A69876C((uint64_t)&dword_2550F4508, 0x320u)))
            sub_21A698FDC((uint64_t)&dword_2550F4508, (uint64_t)"void __BSAutoGuessConfiguration(void *)", 800, (uint64_t)"\n********************************************************************************\n* Entering state: %d (%s)\n********************************************************************************\n\n", a5, a6, a7, a8, 501);
          v1131 = 0;
          v66 = sub_21A6FF198(a1, v1130, 0, &v1131, a5, a6, a7, a8);
          if ((_DWORD)v66)
          {
            v35 = v66;
            if ((_DWORD)v66 != -6727)
            {
              v36 = 0;
              goto LABEL_10;
            }
          }
          if (v1131)
          {
            v1132[0] = (__CFArray *)&stru_24DD08368;
            if (v1130)
              sub_21A693B94(v1130, (uint64_t)v1132, (UInt8 *)"%ks", a4, a5, a6, a7, a8, (uint64_t)"name");
            sub_21A6FC054("(%d) An Ethernet port of the base station named \"%@\" is plugged in.", v67, v68, a4, a5, a6, a7, a8, 501);
            v64 = 502;
            v74 = "BASE_HAS_WAN_PLUGGED_IN_TRUE";
          }
          else
          {
            v1132[0] = (__CFArray *)&stru_24DD08368;
            if (v1130)
              sub_21A693B94(v1130, (uint64_t)v1132, (UInt8 *)"%ks", a4, a5, a6, a7, a8, (uint64_t)"name");
            sub_21A6FC054("(%d) An Ethernet port of the base station named \"%@\" is not plugged in.", v67, v68, a4, a5, a6, a7, a8, 501);
            v64 = 504;
            v74 = "BASE_HAS_WAN_PLUGGED_IN_FALSE";
          }
          sub_21A709424(Mutable, byte_2550F4E08, v74, v69, v70, v71, v72, v73);
          if (dword_2550F4508 > 800 || dword_2550F4508 == -1 && !sub_21A69876C((uint64_t)&dword_2550F4508, 0x320u))
            goto LABEL_932;
          v385 = 501;
          break;
        case 502:
          if (dword_2550F4508 <= 800 && (dword_2550F4508 != -1 || sub_21A69876C((uint64_t)&dword_2550F4508, 0x320u)))
            sub_21A698FDC((uint64_t)&dword_2550F4508, (uint64_t)"void __BSAutoGuessConfiguration(void *)", 800, (uint64_t)"\n********************************************************************************\n* Entering state: %d (%s)\n********************************************************************************\n\n", a5, a6, a7, a8, 502);
          if (sub_21A6FCE6C(v1130, (uint64_t)v61, v62, a4, a5, a6, a7, a8))
          {
            v1132[0] = (__CFArray *)&stru_24DD08368;
            if (v1130)
              sub_21A693B94(v1130, (uint64_t)v1132, (UInt8 *)"%ks", v230, v231, v232, v233, v234, (uint64_t)"name");
            sub_21A6FC054("(%d) A PPPoE server is available to the base station named \"%@\".", v228, v229, v230, v231, v232, v233, v234, 502);
            v64 = 1701;
            v240 = "BASE_HAS_PPPOE_AVAILABLE_TRUE";
          }
          else
          {
            v1132[0] = (__CFArray *)&stru_24DD08368;
            if (v1130)
              sub_21A693B94(v1130, (uint64_t)v1132, (UInt8 *)"%ks", v230, v231, v232, v233, v234, (uint64_t)"name");
            sub_21A6FC054("(%d) A PPPoE server is not available to the base station named \"%@\".", v228, v229, v230, v231, v232, v233, v234, 502);
            v64 = 505;
            v240 = "BASE_HAS_PPPOE_AVAILABLE_FALSE";
          }
          sub_21A709424(Mutable, byte_2550F4E08, v240, v235, v236, v237, v238, v239);
          if (dword_2550F4508 > 800 || dword_2550F4508 == -1 && !sub_21A69876C((uint64_t)&dword_2550F4508, 0x320u))
            goto LABEL_932;
          v385 = 502;
          break;
        case 503:
          if (dword_2550F4508 <= 800 && (dword_2550F4508 != -1 || sub_21A69876C((uint64_t)&dword_2550F4508, 0x320u)))
            sub_21A698FDC((uint64_t)&dword_2550F4508, (uint64_t)"void __BSAutoGuessConfiguration(void *)", 800, (uint64_t)"\n********************************************************************************\n* Entering state: %d (%s)\n********************************************************************************\n\n", a5, a6, a7, a8, 503);
          v1131 = 0;
          v241 = sub_21A6D7718(v1130, (uint64_t)CFSTR("local."), (uint64_t)CFSTR("_airport._tcp"), 0, 2u, 1, (CFTypeRef *)&theDict);
          if ((_DWORD)v241 == -6735)
            goto LABEL_755;
          v35 = v241;
          v1132[0] = 0;
          if ((_DWORD)v241)
            goto LABEL_1097;
          if (!theDict)
            goto LABEL_1126;
          Count = CFDictionaryGetCount(theDict);
          v242 = theDict;
          if (Count)
          {
            sub_21A6FC98C((uint64_t)"State 501 remote browse results \n", theDict, v243, a4, a5, a6, a7, a8);
            v35 = sub_21A6FE694(theDict, v1132, v245, v246, v247, v248, v249, v250);
            if (theDict)
            {
              CFRelease(theDict);
              theDict = 0;
            }
            if ((_DWORD)v35)
            {
LABEL_1097:
              v36 = 0;
              goto LABEL_10;
            }
            if (!v1132[0])
              goto LABEL_1126;
            v35 = sub_21A702224(a1, v1132[0], *(const __CFArray **)(a1 + 24), *(const __CFArray **)(a1 + 32), &theArray);
            if (v1132[0])
            {
              CFRelease(v1132[0]);
              v1132[0] = 0;
            }
            if ((_DWORD)v35 == -6727)
            {
              v1131 = 0;
            }
            else
            {
              if ((_DWORD)v35)
                goto LABEL_1097;
              if (!theArray)
              {
LABEL_1126:
                v36 = 0;
                v35 = 4294960568;
                goto LABEL_10;
              }
              v1131 = CFArrayGetCount(theArray);
            }
          }
          else if (theDict)
          {
            CFRelease(theDict);
            theDict = 0;
          }
LABEL_755:
          if (v1131 == 1)
          {
            ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(theArray, 0);
            v730 = (const __CFString *)CFArrayGetValueAtIndex(theArray, 0);
            v736 = sub_21A6FE4B8(v730, *(const __CFArray **)(a1 + 24), &ValueAtIndex, v731, v732, v733, v734, v735);
            if ((_DWORD)v736)
            {
              v35 = v736;
              if ((_DWORD)v736 != -6727)
                goto LABEL_1097;
            }
            if (!ValueAtIndex)
              goto LABEL_1192;
            CFRetain(ValueAtIndex);
            v1132[0] = (__CFArray *)&stru_24DD08368;
            if (ValueAtIndex)
              sub_21A693B94(ValueAtIndex, (uint64_t)v1132, (UInt8 *)"%ks", v739, v740, v741, v742, v743, (uint64_t)"name");
            v1132[0] = (__CFArray *)&stru_24DD08368;
            if (v1130)
              sub_21A693B94(v1130, (uint64_t)v1132, (UInt8 *)"%ks", v739, v740, v741, v742, v743, (uint64_t)"name");
            sub_21A6FC054("(%d) One base station named \"%@\" is detected on the WAN port of the base station named \"%@\".", v737, v738, v739, v740, v741, v742, v743, 503);
            sub_21A7095E0(Mutable, byte_2550F4E08, "NUMBER_BASE_STATIONS_ON_WAN_PORT_IS_ONE_TRUE", v1131, v755, v756, v757, v758);
            v64 = 1501;
          }
          else if (v1131)
          {
            if (v1131 < 2)
            {
              v64 = 503;
            }
            else
            {
              if (sub_21A701A34(a1, theArray, (uint64_t *)&ValueAtIndex, a4, a5, a6, a7, a8) == -6727)
              {
                v1132[0] = (__CFArray *)&stru_24DD08368;
                if (v1130)
                  sub_21A693B94(v1130, (uint64_t)v1132, (UInt8 *)"%ks", v746, v747, v748, v749, v750, (uint64_t)"name");
                sub_21A6FC054("(%d) %d base stations are detected on the WAN port of the base station named \"%@\". However, one could not be automatically chosen as a canidate for extension.", v744, v745, v746, v747, v748, v749, v750, 503);
                sub_21A7095E0(Mutable, byte_2550F4E08, "NUMBER_BASE_STATIONS_ON_WAN_PORT_IS_GREATER_THAN_ONE_TRUE", v1131, v751, v752, v753, v754);
                v1124 = theArray;
                CFRetain(theArray);
                v64 = 1502;
              }
              else
              {
                v766 = sub_21A6FE4B8(ValueAtIndex, *(const __CFArray **)(a1 + 24), &ValueAtIndex, v746, v747, v748, v749, v750);
                if ((_DWORD)v766)
                {
                  v35 = v766;
                  if ((_DWORD)v766 != -6727)
                    goto LABEL_1097;
                }
                if (!ValueAtIndex)
                {
LABEL_1192:
                  v36 = 0;
                  v35 = 4294960569;
                  goto LABEL_10;
                }
                CFRetain(ValueAtIndex);
                v1132[0] = (__CFArray *)&stru_24DD08368;
                if (v1130)
                  sub_21A693B94(v1130, (uint64_t)v1132, (UInt8 *)"%ks", v769, v770, v771, v772, v773, (uint64_t)"name");
                v1132[0] = (__CFArray *)&stru_24DD08368;
                if (ValueAtIndex)
                  sub_21A693B94(ValueAtIndex, (uint64_t)v1132, (UInt8 *)"%ks", v769, v770, v771, v772, v773, (uint64_t)"name");
                sub_21A6FC054("(%d) %d base stations are detected on the WAN port of the base station named \"%@\". The base station named \"%@\" was automatically chosen as a canidate for extension.", v767, v768, v769, v770, v771, v772, v773, 503);
                sub_21A7095E0(Mutable, byte_2550F4E08, "NUMBER_BASE_STATIONS_ON_WAN_PORT_IS_GREATER_THAN_ONE_TRUE", v1131, v873, v874, v875, v876);
                v64 = 1501;
              }
              v65 = v1119;
            }
          }
          else
          {
            v1132[0] = (__CFArray *)&stru_24DD08368;
            if (v1130)
              sub_21A693B94(v1130, (uint64_t)v1132, (UInt8 *)"%ks", a4, a5, a6, a7, a8, (uint64_t)"name");
            sub_21A6FC054("(%d) No base stations are detected on the WAN port of the base station named \"%@\".", (uint64_t)v242, v243, a4, a5, a6, a7, a8, 503);
            sub_21A7095E0(Mutable, byte_2550F4E08, "NUMBER_BASE_STATIONS_ON_WAN_PORT_IS_ZERO_TRUE", v1131, v726, v727, v728, v729);
            v64 = 504;
          }
          if (theArray)
          {
            CFRelease(theArray);
            theArray = 0;
          }
          if (dword_2550F4508 > 800 || dword_2550F4508 == -1 && !sub_21A69876C((uint64_t)&dword_2550F4508, 0x320u))
            goto LABEL_932;
          v385 = 503;
          break;
        case 504:
          if (dword_2550F4508 <= 800 && (dword_2550F4508 != -1 || sub_21A69876C((uint64_t)&dword_2550F4508, 0x320u)))
            sub_21A698FDC((uint64_t)&dword_2550F4508, (uint64_t)"void __BSAutoGuessConfiguration(void *)", 800, (uint64_t)"\n********************************************************************************\n* Entering state: %d (%s)\n********************************************************************************\n\n", a5, a6, a7, a8, 504);
          v1131 = sub_21A6FD2A4(*(CFArrayRef *)(a1 + 24), (uint64_t)v61, v62, a4, a5, a6, a7, a8);
          if (v1131)
          {
            sub_21A6FC054("(%d) %d existing base stations have been found.", v251, v252, v253, v254, v255, v256, v257, 504);
            v64 = 401;
            v263 = "HOST_BASE_STATIONS_BROWSED_TRUE";
          }
          else
          {
            sub_21A6FC054("(%d) No existing base stations have been found.", v251, v252, v253, v254, v255, v256, v257, 504);
            v64 = 700;
            v263 = "HOST_BASE_STATIONS_BROWSED_FALSE";
          }
          sub_21A709424(Mutable, byte_2550F4E08, v263, v258, v259, v260, v261, v262);
          if (dword_2550F4508 > 800 || dword_2550F4508 == -1 && !sub_21A69876C((uint64_t)&dword_2550F4508, 0x320u))
            goto LABEL_932;
          v385 = 504;
          break;
        case 505:
          if (dword_2550F4508 <= 800 && (dword_2550F4508 != -1 || sub_21A69876C((uint64_t)&dword_2550F4508, 0x320u)))
            sub_21A698FDC((uint64_t)&dword_2550F4508, (uint64_t)"void __BSAutoGuessConfiguration(void *)", 800, (uint64_t)"\n********************************************************************************\n* Entering state: %d (%s)\n********************************************************************************\n\n", a5, a6, a7, a8, 505);
          if (sub_21A6FCF28(v1130, (uint64_t)v61, v62, a4, a5, a6, a7, a8))
          {
            v1132[0] = (__CFArray *)&stru_24DD08368;
            if (v1130)
              sub_21A693B94(v1130, (uint64_t)v1132, (UInt8 *)"%ks", v266, v267, v268, v269, v270, (uint64_t)"name");
            sub_21A6FC054("(%d) The base station named \"%@\" has a DHCP lease.", v264, v265, v266, v267, v268, v269, v270, 505);
            v64 = 506;
            v276 = "BASE_HAS_DHCP_LEASE_TRUE";
          }
          else
          {
            v1132[0] = (__CFArray *)&stru_24DD08368;
            if (v1130)
              sub_21A693B94(v1130, (uint64_t)v1132, (UInt8 *)"%ks", v266, v267, v268, v269, v270, (uint64_t)"name");
            sub_21A6FC054("(%d) The base station named \"%@\" does not have a DHCP lease.", v264, v265, v266, v267, v268, v269, v270, 505);
            v64 = 503;
            v276 = "BASE_HAS_DHCP_LEASE_FALSE";
          }
          sub_21A709424(Mutable, byte_2550F4E08, v276, v271, v272, v273, v274, v275);
          if (dword_2550F4508 > 800 || dword_2550F4508 == -1 && !sub_21A69876C((uint64_t)&dword_2550F4508, 0x320u))
            goto LABEL_932;
          v385 = 505;
          break;
        case 506:
          if (dword_2550F4508 <= 800 && (dword_2550F4508 != -1 || sub_21A69876C((uint64_t)&dword_2550F4508, 0x320u)))
            sub_21A698FDC((uint64_t)&dword_2550F4508, (uint64_t)"void __BSAutoGuessConfiguration(void *)", 800, (uint64_t)"\n********************************************************************************\n* Entering state: %d (%s)\n********************************************************************************\n\n", a5, a6, a7, a8, 506);
          if (sub_21A6FFC08(a1, v1130, v62, a4, a5, a6, a7, a8))
          {
            v1132[0] = (__CFArray *)&stru_24DD08368;
            if (v1130)
              sub_21A693B94(v1130, (uint64_t)v1132, (UInt8 *)"%ks", v279, v280, v281, v282, v283, (uint64_t)"name");
            sub_21A6FC054("(%d) The base station named \"%@\" has a public routable IP address.", v277, v278, v279, v280, v281, v282, v283, 506);
            v64 = 1701;
            v289 = "BASE_HAS_PUBLIC_ROUTABLE_IP_TRUE";
          }
          else
          {
            v1132[0] = (__CFArray *)&stru_24DD08368;
            if (v1130)
              sub_21A693B94(v1130, (uint64_t)v1132, (UInt8 *)"%ks", v279, v280, v281, v282, v283, (uint64_t)"name");
            sub_21A6FC054("(%d) The base station named \"%@\" does not have a public routable IP address.", v277, v278, v279, v280, v281, v282, v283, 506);
            v64 = 503;
            v289 = "BASE_HAS_PUBLIC_ROUTABLE_IP_FALSE";
          }
          sub_21A709424(Mutable, byte_2550F4E08, v289, v284, v285, v286, v287, v288);
          if (dword_2550F4508 > 800 || dword_2550F4508 == -1 && !sub_21A69876C((uint64_t)&dword_2550F4508, 0x320u))
            goto LABEL_932;
          v385 = 506;
          break;
        default:
          switch((int)v64)
          {
            case 401:
              if (dword_2550F4508 <= 800 && (dword_2550F4508 != -1 || sub_21A69876C((uint64_t)&dword_2550F4508, 0x320u)))
                sub_21A698FDC((uint64_t)&dword_2550F4508, (uint64_t)"void __BSAutoGuessConfiguration(void *)", 800, (uint64_t)"\n********************************************************************************\n* Entering state: %d (%s)\n********************************************************************************\n\n", a5, a6, a7, a8, 401);
              sub_21A70A778(*(_QWORD *)(a1 + 48), 15, 0, 0, a5, a6, a7, a8);
              v139 = sub_21A702454(a1, v1130, *(CFArrayRef *)(a1 + 24), *(const __CFArray **)(a1 + 32), &theArray, v136, v137, v138);
              if ((_DWORD)v139)
              {
                v35 = v139;
                if ((_DWORD)v139 != -6727)
                  goto LABEL_1184;
                v1131 = 0;
LABEL_482:
                sub_21A6FC054("(%d) No existing configured base stations are creating a network.", v140, v141, a4, a5, a6, a7, a8, 401);
                sub_21A709424(Mutable, byte_2550F4E08, "HOST_BROWSED_BASE_STATIONS_CREATING_NETWORK_IS_ZERO_TRUE", v493, v494, v495, v496, v497);
                v64 = 403;
                goto LABEL_483;
              }
              if (!theArray)
                goto LABEL_1185;
              v492 = CFArrayGetCount(theArray);
              v1131 = v492;
              if (v492 != 1)
              {
                if (!v492)
                  goto LABEL_482;
                if (v492 < 2)
                {
                  v64 = 401;
                  goto LABEL_483;
                }
                cf = 0;
                sub_21A6FC0F0((uint64_t)"State 401 count >= 2 configed bases creating network: \n", theArray, v141, a4, a5, a6, a7, a8);
                v35 = sub_21A7018B4(a1, 1, theArray, (__CFArray **)&cf, v713, v714, v715, v716);
                if (theArray)
                  CFRelease(theArray);
                theArray = (CFArrayRef)cf;
                if ((_DWORD)v35 != -6727)
                {
                  if ((_DWORD)v35)
                    goto LABEL_1184;
                  if (!cf)
                  {
LABEL_1185:
                    v36 = 0;
                    v35 = 4294960568;
                    goto LABEL_10;
                  }
                  v717 = CFArrayGetCount((CFArrayRef)cf);
                  v1131 = v717;
                  if (v717 == 1)
                  {
                    sub_21A6FC0F0((uint64_t)"State 401 (2) count == 1 configed base creating network: \n", theArray, v719, v720, a5, a6, a7, a8);
                    ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(theArray, 0);
                    CFRetain(ValueAtIndex);
                    v889 = ValueAtIndex;
                    v1132[0] = (__CFArray *)&stru_24DD08368;
                    if (ValueAtIndex)
                    {
                      sub_21A693B94(ValueAtIndex, (uint64_t)v1132, (UInt8 *)"%ks", v884, v885, v886, v887, v888, (uint64_t)"name");
                      v889 = ValueAtIndex;
                    }
                    sub_21A6FC09C(v889, v882, v883, v884, v885, v886, v887, v888);
                    sub_21A6FC054("(%d) One non G-Only configured base station named \"%@\" is creating a network called \"%@\".", v914, v915, v916, v917, v918, v919, v920, 401);
                    sub_21A709424(Mutable, byte_2550F4E08, "HOST_BROWSED_BASE_STATIONS_CREATING_NETWORK_IS_ONE_TRUE", v921, v922, v923, v924, v925);
LABEL_936:
                    v64 = 402;
                    goto LABEL_937;
                  }
                  if (!v717)
                  {
                    sub_21A6FC054("(%d) No non G-Only configured base stations are creating a network.", v718, v719, v720, a5, a6, a7, a8, 401);
                    sub_21A709424(Mutable, byte_2550F4E08, "HOST_BROWSED_BASE_STATIONS_CREATING_NETWORK_IS_ZERO_TRUE", v721, v722, v723, v724, v725);
                    v64 = 403;
LABEL_937:
                    v65 = v1119;
                    goto LABEL_483;
                  }
                  if (v717 >= 2)
                  {
                    sub_21A6FC0F0((uint64_t)"State 401 (2) count >= 2 non G-Only configed bases creating network: \n", theArray, v719, v720, a5, a6, a7, a8);
                    v895 = sub_21A701A34(a1, theArray, (uint64_t *)&ValueAtIndex, v890, v891, v892, v893, v894);
                    if ((_DWORD)v895 == -6727)
                    {
                      sub_21A6FC054("(%d) %d existing configured base stations are creating networks. However, one could not be automatically chosen.", v896, v897, a4, a5, a6, a7, a8, 401);
                      sub_21A7095E0(Mutable, byte_2550F4E08, "HOST_BROWSED_BASE_STATIONS_CREATING_NETWORK_IS_GREATER_THAN_ONE_TRUE", v1131, v926, v927, v928, v929);
                      v1124 = theArray;
                      CFRetain(theArray);
                      v64 = 1407;
                      goto LABEL_937;
                    }
                    v35 = v895;
                    if ((_DWORD)v895)
                    {
LABEL_1184:
                      v36 = 0;
                      goto LABEL_10;
                    }
                    if (!ValueAtIndex)
                      goto LABEL_1185;
                    CFRetain(ValueAtIndex);
                    v905 = ValueAtIndex;
                    v1132[0] = (__CFArray *)&stru_24DD08368;
                    if (ValueAtIndex)
                    {
                      sub_21A693B94(ValueAtIndex, (uint64_t)v1132, (UInt8 *)"%ks", v900, v901, v902, v903, v904, (uint64_t)"name");
                      v905 = ValueAtIndex;
                    }
                    sub_21A6FC09C(v905, v898, v899, v900, v901, v902, v903, v904);
                    sub_21A6FC054("(%d) %d existing configured base stations are creating networks. The base station named \"%@\" which creates the network called \"%@\" was automatically chosen.", v930, v931, v932, v933, v934, v935, v936, 401);
                    sub_21A7095E0(Mutable, byte_2550F4E08, "HOST_BROWSED_BASE_STATIONS_CREATING_NETWORK_IS_GREATER_THAN_ONE_TRUE", v1131, v937, v938, v939, v940);
                    goto LABEL_936;
                  }
                }
                v64 = 401;
                goto LABEL_937;
              }
              sub_21A6FC0F0((uint64_t)"State 401 count == 1 configed base creating network: \n", theArray, v141, a4, a5, a6, a7, a8);
              ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(theArray, 0);
              CFRetain(ValueAtIndex);
              v712 = ValueAtIndex;
              v1132[0] = (__CFArray *)&stru_24DD08368;
              if (ValueAtIndex)
              {
                sub_21A693B94(ValueAtIndex, (uint64_t)v1132, (UInt8 *)"%ks", v707, v708, v709, v710, v711, (uint64_t)"name");
                v712 = ValueAtIndex;
              }
              sub_21A6FC09C(v712, v705, v706, v707, v708, v709, v710, v711);
              sub_21A6FC054("(%d) One existing configured base station named \"%@\" is creating a network called \"%@\".", v789, v790, v791, v792, v793, v794, v795, 401);
              sub_21A709424(Mutable, byte_2550F4E08, "HOST_BROWSED_BASE_STATIONS_CREATING_NETWORK_IS_ONE_TRUE", v796, v797, v798, v799, v800);
              v64 = 402;
LABEL_483:
              if (theArray)
              {
                CFRelease(theArray);
                theArray = 0;
              }
              if (dword_2550F4508 > 800 || dword_2550F4508 == -1 && !sub_21A69876C((uint64_t)&dword_2550F4508, 0x320u))
                goto LABEL_932;
              v385 = 401;
              goto LABEL_931;
            case 402:
              LODWORD(cf) = 0;
              if (dword_2550F4508 <= 800 && (dword_2550F4508 != -1 || sub_21A69876C((uint64_t)&dword_2550F4508, 0x320u)))
                sub_21A698FDC((uint64_t)&dword_2550F4508, (uint64_t)"void __BSAutoGuessConfiguration(void *)", 800, (uint64_t)"\n********************************************************************************\n* Entering state: %d (%s)\n********************************************************************************\n\n", a5, a6, a7, a8, 402);
              LODWORD(cf) = 0;
              sub_21A7011B8(a1, v1130, ValueAtIndex, (int *)&cf, a5, a6, a7, a8);
              switch((_DWORD)cf)
              {
                case 3:
                  v1132[0] = (__CFArray *)&stru_24DD08368;
                  if (ValueAtIndex)
                    sub_21A693B94(ValueAtIndex, (uint64_t)v1132, (UInt8 *)"%ks", v348, v349, v350, v351, v352, (uint64_t)"name");
                  v1132[0] = (__CFArray *)&stru_24DD08368;
                  if (v1130)
                    sub_21A693B94(v1130, (uint64_t)v1132, (UInt8 *)"%ks", v348, v349, v350, v351, v352, (uint64_t)"name");
                  sub_21A6FC054("(%d) The existing base station named \"%@\" is unconfigurable (non-SRP FW) but will be replaced by the new base station named \"%@\"", v346, v347, v348, v349, v350, v351, v352, 402);
                  v64 = 1409;
                  v764 = "PREVIOUS_DEVICE_IS_UNCONFIGURABLE_OLD_FW_TRUE";
                  break;
                case 2:
                  v1132[0] = (__CFArray *)&stru_24DD08368;
                  if (ValueAtIndex)
                    sub_21A693B94(ValueAtIndex, (uint64_t)v1132, (UInt8 *)"%ks", v348, v349, v350, v351, v352, (uint64_t)"name");
                  v1132[0] = (__CFArray *)&stru_24DD08368;
                  if (v1130)
                    sub_21A693B94(v1130, (uint64_t)v1132, (UInt8 *)"%ks", v348, v349, v350, v351, v352, (uint64_t)"name");
                  sub_21A6FC054("(%d) The existing base station named \"%@\" is unconfigurable (Q61/P81) but will be replaced by the new base station named \"%@\"", v346, v347, v348, v349, v350, v351, v352, 402);
                  v64 = 1408;
                  v764 = "PREVIOUS_DEVICE_IS_UNCONFIGURABLE_Q61_P81_TRUE";
                  break;
                case 1:
                  v1132[0] = (__CFArray *)&stru_24DD08368;
                  if (ValueAtIndex)
                    sub_21A693B94(ValueAtIndex, (uint64_t)v1132, (UInt8 *)"%ks", v348, v349, v350, v351, v352, (uint64_t)"name");
                  v1132[0] = (__CFArray *)&stru_24DD08368;
                  if (v1130)
                    sub_21A693B94(v1130, (uint64_t)v1132, (UInt8 *)"%ks", v348, v349, v350, v351, v352, (uint64_t)"name");
                  sub_21A6FC054("(%d) The existing base station named \"%@\" is inferior to the new base station named \"%@\"", v346, v347, v348, v349, v350, v351, v352, 402);
                  v64 = 1402;
                  v764 = "EXISTING_DEVICE_IS_INFERIOR_TRUE";
                  break;
                default:
                  v1132[0] = (__CFArray *)&stru_24DD08368;
                  if (ValueAtIndex)
                    sub_21A693B94(ValueAtIndex, (uint64_t)v1132, (UInt8 *)"%ks", v348, v349, v350, v351, v352, (uint64_t)"name");
                  v1132[0] = (__CFArray *)&stru_24DD08368;
                  if (v1130)
                    sub_21A693B94(v1130, (uint64_t)v1132, (UInt8 *)"%ks", v348, v349, v350, v351, v352, (uint64_t)"name");
                  sub_21A6FC054("(%d) Existing base station named \"%@\" is not inferior to the new base station named \"%@\"", v346, v347, v348, v349, v350, v351, v352, 402);
                  v64 = 1401;
                  v764 = "EXISTING_DEVICE_IS_INFERIOR_FALSE";
                  break;
              }
              sub_21A709424(Mutable, byte_2550F4E08, v764, v759, v760, v761, v762, v763);
              if (dword_2550F4508 > 800 || dword_2550F4508 == -1 && !sub_21A69876C((uint64_t)&dword_2550F4508, 0x320u))
                goto LABEL_932;
              v385 = 402;
              goto LABEL_931;
            case 403:
              LOBYTE(cf) = 0;
              if (dword_2550F4508 <= 800 && (dword_2550F4508 != -1 || sub_21A69876C((uint64_t)&dword_2550F4508, 0x320u)))
                sub_21A698FDC((uint64_t)&dword_2550F4508, (uint64_t)"void __BSAutoGuessConfiguration(void *)", 800, (uint64_t)"\n********************************************************************************\n* Entering state: %d (%s)\n********************************************************************************\n\n", a5, a6, a7, a8, 403);
              v353 = sub_21A6FF30C(a1, v1130, 1112757313, &cf, a5, a6, a7, a8);
              if ((_DWORD)v353)
                goto LABEL_1080;
              if (!(_BYTE)cf)
                goto LABEL_465;
              v356 = sub_21A68E368(v1130, v354, v355, a4, a5, a6, a7, a8);
              if (v356 < 0x77)
                goto LABEL_333;
              v357 = (uint64_t)v356;
              LOBYTE(v1132[0]) = 0;
              v353 = sub_21A6FF30C(a1, v1130, 1632923251, v1132, a5, a6, a7, a8);
              if ((_DWORD)v353)
              {
LABEL_1080:
                v35 = v353;
                v36 = 0;
                goto LABEL_10;
              }
              if (!LOBYTE(v1132[0]))
              {
                if (dword_2550F4508 <= 800
                  && (dword_2550F4508 != -1 || sub_21A69876C((uint64_t)&dword_2550F4508, 0x320u)))
                {
                  sub_21A698FDC((uint64_t)&dword_2550F4508, (uint64_t)"void __BSAutoGuessConfiguration(void *)", 800, (uint64_t)"Ignoring kACPFeatureCodeBeingSTA for this product id:(%d)", a5, a6, a7, a8, v357);
                }
                LOBYTE(cf) = 0;
              }
LABEL_333:
              if ((_BYTE)cf)
              {
                v1132[0] = (__CFArray *)&stru_24DD08368;
                if (v1130)
                  sub_21A693B94(v1130, (uint64_t)v1132, (UInt8 *)"%ks", a4, a5, a6, a7, a8, (uint64_t)"name");
                sub_21A6FC054("(%d) Chosen base station named \"%@\" supports STA mode", v354, v355, a4, a5, a6, a7, a8, 403);
                v64 = 404;
                v363 = "CHOSEN_BASE_STATION_SUPPORTS_STA_TRUE";
              }
              else
              {
LABEL_465:
                v1132[0] = (__CFArray *)&stru_24DD08368;
                if (v1130)
                  sub_21A693B94(v1130, (uint64_t)v1132, (UInt8 *)"%ks", a4, a5, a6, a7, a8, (uint64_t)"name");
                sub_21A6FC054("(%d) Chosen base station named \"%@\" does not support STA mode", v354, v355, a4, a5, a6, a7, a8, 403);
                v64 = 700;
                v363 = "CHOSEN_BASE_STATION_SUPPORTS_STA_FALSE";
              }
              sub_21A709424(Mutable, byte_2550F4E08, v363, v358, v359, v360, v361, v362);
              if (dword_2550F4508 > 800 || dword_2550F4508 == -1 && !sub_21A69876C((uint64_t)&dword_2550F4508, 0x320u))
                goto LABEL_932;
              v385 = 403;
              goto LABEL_931;
            case 404:
              if (dword_2550F4508 <= 800 && (dword_2550F4508 != -1 || sub_21A69876C((uint64_t)&dword_2550F4508, 0x320u)))
                sub_21A698FDC((uint64_t)&dword_2550F4508, (uint64_t)"void __BSAutoGuessConfiguration(void *)", 800, (uint64_t)"\n********************************************************************************\n* Entering state: %d (%s)\n********************************************************************************\n\n", a5, a6, a7, a8, 404);
              v364 = sub_21A7015F0(a1, *(CFArrayRef *)(a1 + 24), *(const __CFArray **)(a1 + 32), &theArray, a5, a6, a7, a8);
              if ((_DWORD)v364)
              {
                v35 = v364;
                if ((_DWORD)v364 != -6727)
                  goto LABEL_1256;
                v1131 = 0;
LABEL_344:
                sub_21A6FC054("(%d) No existing configured base stations are joined to a network.", v365, v366, a4, a5, a6, a7, a8, 404);
                v64 = 700;
                v372 = "NUMBER_BROWSED_BASE_STATIONS_IN_STA_MODE_NETWORKS_IS_ZERO_TRUE";
LABEL_499:
                sub_21A709424(Mutable, byte_2550F4E08, v372, v367, v368, v369, v370, v371);
                goto LABEL_500;
              }
              if (!theArray)
                goto LABEL_1125;
              v498 = CFArrayGetCount(theArray);
              v1131 = v498;
              if (v498 == 1)
              {
                v499 = (const __CFString *)CFArrayGetValueAtIndex(theArray, 0);
                if (!v499)
                  goto LABEL_1125;
                v500 = sub_21A700584(a1, *(CFArrayRef *)(a1 + 32), v499, 3, (uint64_t *)&theDict, a6, a7, a8);
                if ((_DWORD)v500)
                {
                  v35 = v500;
LABEL_1256:
                  v36 = 0;
                  goto LABEL_10;
                }
                if (!theDict)
                {
LABEL_1125:
                  v36 = 0;
                  v35 = 4294960568;
                  goto LABEL_10;
                }
                v1128 = (const __CFString *)theDict;
                CFRetain(theDict);
                if (theDict)
                {
                  CFRelease(theDict);
                  theDict = 0;
                }
                v1132[0] = (__CFArray *)&stru_24DD08368;
                if (v1128)
                  sub_21A693B94(v1128, (uint64_t)v1132, (UInt8 *)"%kO", v503, v504, v505, v506, v507, (uint64_t)CFSTR("SSID_STR"));
                sub_21A6FC054("(%d) All the existing configured base stations are joining the same network called \"%@\".", v501, v502, v503, v504, v505, v506, v507, 404);
                v64 = 1403;
                v372 = "NUMBER_BROWSED_BASE_STATIONS_IN_STA_MODE_NETWORKS_IS_ONE_TRUE";
                goto LABEL_499;
              }
              if (v498 < 2)
                goto LABEL_344;
              sub_21A6FC054("(%d) The existing configured base stations are joined to %d different networks.", v365, v366, a4, a5, a6, a7, a8, 404);
              sub_21A7095E0(Mutable, byte_2550F4E08, "NUMBER_BROWSED_BASE_STATIONS_IN_STA_MODE_NETWORKS_IS_GREATER_THAN_ONE_TRUE", v1131, v669, v670, v671, v672);
              v35 = sub_21A700794(a1, *(const __CFArray **)(a1 + 32), theArray, (__CFArray **)&v1124, v673, v674, v675, v676);
              if (theArray)
              {
                CFRelease(theArray);
                theArray = 0;
              }
              if ((_DWORD)v35)
              {
LABEL_1015:
                v36 = 0;
                goto LABEL_10;
              }
              v64 = 1406;
              if (!v1124)
              {
                v36 = 0;
                v35 = 4294960568;
                goto LABEL_10;
              }
              v65 = v1119;
LABEL_500:
              if (theArray)
              {
                CFRelease(theArray);
                theArray = 0;
              }
              if (dword_2550F4508 > 800 || dword_2550F4508 == -1 && !sub_21A69876C((uint64_t)&dword_2550F4508, 0x320u))
                goto LABEL_932;
              v385 = 404;
              break;
            default:
              goto LABEL_1083;
          }
          break;
      }
LABEL_931:
      sub_21A698FDC((uint64_t)&dword_2550F4508, (uint64_t)"void __BSAutoGuessConfiguration(void *)", 800, (uint64_t)"\n********************************************************************************\n* Exiting state: %d\n********************************************************************************\n\n", a5, a6, a7, a8, v385);
      goto LABEL_932;
    }
    switch((int)v64)
    {
      case 'e':
        if (dword_2550F4508 <= 800 && (dword_2550F4508 != -1 || sub_21A69876C((uint64_t)&dword_2550F4508, 0x320u)))
          sub_21A698FDC((uint64_t)&dword_2550F4508, (uint64_t)"void __BSAutoGuessConfiguration(void *)", 800, (uint64_t)"\n********************************************************************************\n* Entering state: %d (%s)\n********************************************************************************\n\n", a5, a6, a7, a8, 101);
        v95 = sub_21A6FD0F8(*(CFArrayRef *)(a1 + 24), &theDict, v62, a4, a5, a6, a7, a8);
        if ((_DWORD)v95 == -6727)
        {
          v1131 = 0;
          v65 = v1119;
LABEL_473:
          sub_21A6FC054("(%d) No unconfigured base stations are on the current network.", v96, v97, a4, a5, a6, a7, a8, 101);
          v64 = 801;
          v115 = "NUMBER_UNCONFIGURED_BASES_DISCOVERED_IS_ZERO_TRUE";
LABEL_474:
          sub_21A7095E0(Mutable, byte_2550F4E08, v115, v1131, v111, v112, v113, v114);
          goto LABEL_475;
        }
        v35 = v95;
        if ((_DWORD)v95)
          goto LABEL_1178;
        v65 = v1119;
        if (!theDict)
        {
LABEL_1179:
          v36 = 0;
          v35 = 4294960568;
          goto LABEL_10;
        }
        v1131 = CFDictionaryGetCount(theDict);
        sub_21A6FC98C((uint64_t)"State 101 unconfigured bases: \n", theDict, v98, v99, v100, v101, v102, v103);
        if (v1131 == 1)
        {
          v35 = sub_21A6FDFD0(theDict, &v1130, v97, a4, a5, a6, a7, a8);
          if (theDict)
          {
            CFRelease(theDict);
            theDict = 0;
          }
          if ((_DWORD)v35)
          {
LABEL_1178:
            v36 = 0;
            goto LABEL_10;
          }
          if (!v1130)
            goto LABEL_1179;
          CFRetain(v1130);
          v1132[0] = (__CFArray *)&stru_24DD08368;
          if (v1130)
            sub_21A693B94(v1130, (uint64_t)v1132, (UInt8 *)"%ks", v700, v701, v702, v703, v704, (uint64_t)"name");
          sub_21A6FC054("(%d) One unconfigured base station \"%@\" is connected and has been chosen.", v698, v699, v700, v701, v702, v703, v704, 101);
          v64 = 102;
          v115 = "NUMBER_UNCONFIGURED_BASES_DISCOVERED_IS_ONE_TRUE";
          goto LABEL_474;
        }
        if (!v1131)
          goto LABEL_473;
        if (v1131 >= 2)
        {
          v35 = sub_21A700F9C(theDict, v1119, &v1130, a4, a5, a6, a7, a8);
          if (theDict)
          {
            CFRelease(theDict);
            theDict = 0;
          }
          if ((_DWORD)v35)
            goto LABEL_1178;
          if (!v1130)
            goto LABEL_1179;
          CFRetain(v1130);
          v1132[0] = (__CFArray *)&stru_24DD08368;
          if (v1130)
            sub_21A693B94(v1130, (uint64_t)v1132, (UInt8 *)"%ks", v106, v107, v108, v109, v110, (uint64_t)"name");
          sub_21A6FC054("(%d) Found %d unconfigured base stations and automatically chose to configure the base station named \"%@\".", v104, v105, v106, v107, v108, v109, v110, 101);
          v64 = 102;
          v115 = "NUMBER_UNCONFIGURED_BASES_DISCOVERED_IS_GREATER_THAN_ONE_TRUE";
          v65 = v1119;
          goto LABEL_474;
        }
        v64 = 101;
LABEL_475:
        if (dword_2550F4508 > 800 || dword_2550F4508 == -1 && !sub_21A69876C((uint64_t)&dword_2550F4508, 0x320u))
          break;
        v385 = 101;
        goto LABEL_931;
      case 'f':
        if (dword_2550F4508 <= 800 && (dword_2550F4508 != -1 || sub_21A69876C((uint64_t)&dword_2550F4508, 0x320u)))
          sub_21A698FDC((uint64_t)&dword_2550F4508, (uint64_t)"void __BSAutoGuessConfiguration(void *)", 800, (uint64_t)"\n********************************************************************************\n* Entering state: %d (%s)\n********************************************************************************\n\n", a5, a6, a7, a8, 102);
        sub_21A70A778(*(_QWORD *)(a1 + 48), 16, 0, (uint64_t)v1130, a5, a6, a7, a8);
        if (sub_21A6FCFE4(v1130, v290, v291, v292, v293, v294, v295, v296))
        {
          v64 = 1101;
          v304 = "(%d) This base station is an 802.11g model. We don't support it with this software.";
          v305 = "CHOSEN_BASE_STATION_IS_80211G_TRUE";
        }
        else
        {
          v522 = sub_21A6FD070(v1130, v297, v298, v299, v300, v301, v302, v303);
          v523 = !v522;
          if (v522)
            v304 = "(%d) This base station is too new to be set up with this software.";
          else
            v304 = "(%d) This base station is not an 802.11g model. OK to continue.";
          if (v523)
            v305 = "CHOSEN_BASE_STATION_IS_80211G_FALSE";
          else
            v305 = "CHOSEN_BASE_STATION_IS_TOO_NEW_TRUE";
          if (v523)
            v64 = 104;
          else
            v64 = 1104;
        }
        sub_21A6FC054(v304, v297, v298, v299, v300, v301, v302, v303, 102);
        sub_21A709424(Mutable, byte_2550F4E08, v305, v524, v525, v526, v527, v528);
        v65 = v1119;
        if (dword_2550F4508 > 800 || dword_2550F4508 == -1 && !sub_21A69876C((uint64_t)&dword_2550F4508, 0x320u))
          break;
        v385 = 102;
        goto LABEL_931;
      case 'g':
        if (dword_2550F4508 <= 800 && (dword_2550F4508 != -1 || sub_21A69876C((uint64_t)&dword_2550F4508, 0x320u)))
          sub_21A698FDC((uint64_t)&dword_2550F4508, (uint64_t)"void __BSAutoGuessConfiguration(void *)", 800, (uint64_t)"\n********************************************************************************\n* Entering state: %d (%s)\n********************************************************************************\n\n", a5, a6, a7, a8, 103);
        v65 = v1119;
        if (sub_21A68F294(v1130, (uint64_t)v61, v62, a4, a5, a6, a7, a8))
        {
          v1132[0] = (__CFArray *)&stru_24DD08368;
          if (v1130)
            sub_21A693B94(v1130, (uint64_t)v1132, (UInt8 *)"%ks", v308, v309, v310, v311, v312, (uint64_t)"name");
          sub_21A6FC054("(%d) The chosen base station \"%@\" has a restore profile.", v306, v307, v308, v309, v310, v311, v312, 103);
LABEL_560:
          v64 = 602;
          v536 = "TEXT_RECORD_HAS_PROFILE_OR_PREVIOUS_CONFIG_FILE_TRUE";
          goto LABEL_561;
        }
        if (sub_21A6FD368(v1130, v1119, v307, v308, v309, v310, v311, v312))
        {
          v1132[0] = (__CFArray *)&stru_24DD08368;
          if (v1130)
            sub_21A693B94(v1130, (uint64_t)v1132, (UInt8 *)"%ks", v531, v532, v533, v534, v535, (uint64_t)"name");
          sub_21A6FC054("(%d) The chosen base station \"%@\" has a previous configuration file.", v529, v530, v531, v532, v533, v534, v535, 103);
          goto LABEL_560;
        }
        v1132[0] = (__CFArray *)&stru_24DD08368;
        if (v1130)
          sub_21A693B94(v1130, (uint64_t)v1132, (UInt8 *)"%ks", v531, v532, v533, v534, v535, (uint64_t)"name");
        sub_21A6FC054("(%d) The chosen base station \"%@\" does not have a restore profile or previous configuration file.", v529, v530, v531, v532, v533, v534, v535, 103);
        v64 = 501;
        v536 = "TEXT_RECORD_HAS_PROFILE_OR_PREVIOUS_CONFIG_FILE_FALSE";
LABEL_561:
        sub_21A709424(Mutable, byte_2550F4E08, v536, v313, v314, v315, v316, v317);
        if (dword_2550F4508 > 800 || dword_2550F4508 == -1 && !sub_21A69876C((uint64_t)&dword_2550F4508, 0x320u))
          break;
        v385 = 103;
        goto LABEL_931;
      case 'h':
        if (dword_2550F4508 <= 800 && (dword_2550F4508 != -1 || sub_21A69876C((uint64_t)&dword_2550F4508, 0x320u)))
          sub_21A698FDC((uint64_t)&dword_2550F4508, (uint64_t)"void __BSAutoGuessConfiguration(void *)", 800, (uint64_t)"\n********************************************************************************\n* Entering state: %d (%s)\n********************************************************************************\n\n", a5, a6, a7, a8, 104);
        if (sub_21A690078(v1130, (uint64_t)v61, v62, a4, a5, a6, a7, a8))
        {
          v64 = 105;
          v320 = "(%d) This base station is a STA-only device.";
          v321 = "CHOSEN_BASE_STATION_IS_STA_ONLY_TRUE";
          v65 = v1119;
        }
        else
        {
          sub_21A6FFEB8(a1, v1130, 0, 0, a5, a6, a7, a8);
          v65 = v1119;
          if ((_DWORD)v537 == -6768)
          {
            v64 = 1102;
            v320 = "(%d) Security error reading chosen base. We don't support it with this software.";
            v321 = "CHOSEN_BASE_STATION_IS_OLDFW_TRUE";
          }
          else
          {
            v35 = v537;
            if ((_DWORD)v537)
            {
              v36 = 0;
              goto LABEL_10;
            }
            v64 = 103;
            v320 = "(%d) This base station is not a STA-only device.";
            v321 = "CHOSEN_BASE_STATION_IS_STA_ONLY_FALSE";
          }
        }
        sub_21A6FC054(v320, v318, v319, a4, a5, a6, a7, a8, 104);
        sub_21A709424(Mutable, byte_2550F4E08, v321, v693, v694, v695, v696, v697);
        if (dword_2550F4508 > 800 || dword_2550F4508 == -1 && !sub_21A69876C((uint64_t)&dword_2550F4508, 0x320u))
          break;
        v385 = 104;
        goto LABEL_931;
      case 'i':
        if (dword_2550F4508 <= 800 && (dword_2550F4508 != -1 || sub_21A69876C((uint64_t)&dword_2550F4508, 0x320u)))
          sub_21A698FDC((uint64_t)&dword_2550F4508, (uint64_t)"void __BSAutoGuessConfiguration(void *)", 800, (uint64_t)"\n********************************************************************************\n* Entering state: %d (%s)\n********************************************************************************\n\n", a5, a6, a7, a8, 105);
        v1128 = 0;
        if (!v1117)
          goto LABEL_373;
        v1132[0] = 0;
        cf = 0;
        v322 = sub_21A68E2C8((uint64_t)v1116);
        sub_21A693B94(Value, (uint64_t)v1132, (UInt8 *)"%kO", v323, v324, v325, v326, v327, (uint64_t)CFSTR("SSID_STR"));
        if ((_DWORD)v328)
        {
          v35 = v328;
          goto LABEL_1189;
        }
        if (!v1132[0])
          goto LABEL_1081;
        v329 = sub_21A68F7D0((const __CFString *)v1132[0], 3, 0, *(const __CFArray **)(a1 + 32));
        if (v329 == -1)
        {
          v35 = 4294960560;
          goto LABEL_1189;
        }
        cf = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 32), v329);
        if (!cf)
          goto LABEL_1081;
        if (!v1116 || (v322 - 3) > 1)
          goto LABEL_299;
        if (sub_21A72E304((uint64_t)v1116, v330) || !sub_21A72E344((uint64_t)cf, v61))
        {
          if (!cf)
            goto LABEL_308;
        }
        else
        {
          v765 = sub_21A700584(a1, *(CFArrayRef *)(a1 + 32), (const __CFString *)v1132[0], 1, (uint64_t *)&cf, a6, a7, a8);
          if ((_DWORD)v765 == -6727)
            goto LABEL_308;
          v35 = v765;
          if ((_DWORD)v765)
            goto LABEL_1189;
          if (!cf)
          {
LABEL_1081:
            v35 = 4294960568;
LABEL_1189:
            v36 = 0;
            goto LABEL_10;
          }
        }
        if (sub_21A72E324((uint64_t)v1116, v61))
        {
          if (!cf)
            goto LABEL_308;
        }
        else if (sub_21A72E2C4((uint64_t)cf, v61) || !cf)
        {
          goto LABEL_308;
        }
LABEL_299:
        v331 = CFArrayCreateMutable(v30, 1, MEMORY[0x24BDBD690]);
        theArray = v331;
        if (!v331)
          goto LABEL_1081;
        CFArrayAppendValue(v331, cf);
        if (v1116)
          v332 = (const __CFDictionary *)v1116;
        else
          v332 = (const __CFDictionary *)v1130;
        v35 = sub_21A6FDC6C(theArray, v332, 0);
        if (theArray)
        {
          CFRelease(theArray);
          theArray = 0;
        }
        if ((_DWORD)v35 != -6727)
        {
          if ((_DWORD)v35)
            goto LABEL_1189;
          v1128 = (const __CFString *)cf;
          CFRetain(cf);
        }
LABEL_308:
        if (v1128)
        {
          v1132[0] = (__CFArray *)&stru_24DD08368;
          sub_21A693B94(v1128, (uint64_t)v1132, (UInt8 *)"%ks.%ks", a4, a5, a6, a7, a8, (uint64_t)"txt");
          sub_21A6FC054("(%d) Current network called \"%@\" will be joined by STA-only device.", v333, v334, v335, v336, v337, v338, v339, 105);
          v64 = 1403;
          v345 = "CURRENT_NETWORK_FOR_STA_ONLY_TO_JOIN_IS_TRUE";
        }
        else
        {
LABEL_373:
          sub_21A6FC054("(%d) No current network for the STA-only device to join.", (uint64_t)v61, v62, a4, a5, a6, a7, a8, 105);
          v64 = 700;
          v345 = "CURRENT_NETWORK_FOR_STA_ONLY_TO_JOIN_IS_FALSE";
        }
        sub_21A709424(Mutable, byte_2550F4E08, v345, v340, v341, v342, v343, v344);
        v65 = v1119;
        if (dword_2550F4508 > 800 || dword_2550F4508 == -1 && !sub_21A69876C((uint64_t)&dword_2550F4508, 0x320u))
          break;
        v385 = 105;
        goto LABEL_931;
      default:
        if ((_DWORD)v64 != 1)
        {
          v65 = v1119;
          if ((_DWORD)v64 != 10)
          {
LABEL_1083:
            if (dword_2550F4508 <= 800)
            {
              if (dword_2550F4508 != -1 || sub_21A69876C((uint64_t)&dword_2550F4508, 0x320u))
                sub_21A698FDC((uint64_t)&dword_2550F4508, (uint64_t)"void __BSAutoGuessConfiguration(void *)", 800, (uint64_t)"\n********************************************************************************\n* Entering state: %d (%s)\n********************************************************************************\n\n", a5, a6, a7, a8, v64);
              if (dword_2550F4508 <= 800)
              {
                if (dword_2550F4508 != -1 || sub_21A69876C((uint64_t)&dword_2550F4508, 0x320u))
                  sub_21A698FDC((uint64_t)&dword_2550F4508, (uint64_t)"void __BSAutoGuessConfiguration(void *)", 800, (uint64_t)"in undefined state %d\n", a5, a6, a7, a8, v64);
                if (dword_2550F4508 <= 800)
                {
                  if (dword_2550F4508 != -1 || sub_21A69876C((uint64_t)&dword_2550F4508, 0x320u))
                    sub_21A698FDC((uint64_t)&dword_2550F4508, (uint64_t)"void __BSAutoGuessConfiguration(void *)", 800, (uint64_t)"\n********************************************************************************\n* Exiting state: %d\n********************************************************************************\n\n", a5, a6, a7, a8, v64);
                  v36 = 0;
                  v35 = 4294960564;
                  goto LABEL_10;
                }
              }
            }
            LODWORD(v35) = -6732;
            goto LABEL_1099;
          }
          if (dword_2550F4508 <= 800 && (dword_2550F4508 != -1 || sub_21A69876C((uint64_t)&dword_2550F4508, 0x320u)))
            sub_21A698FDC((uint64_t)&dword_2550F4508, (uint64_t)"void __BSAutoGuessConfiguration(void *)", 800, (uint64_t)"\n********************************************************************************\n* Entering state: %d (%s)\n********************************************************************************\n\n", a5, a6, a7, a8, 10);
          v162 = sub_21A702788(*(CFDictionaryRef *)a1, (uint64_t)v61, v62, a4, a5, a6, a7, a8);
          v163 = *(CFDictionaryRef *)a1;
          if (v162)
          {
            sub_21A693B94((const __CFString *)v163, (uint64_t)&v1130, (UInt8 *)"%ks", v157, v158, v159, v160, v161, (uint64_t)"BSAutoGuessContext_ChosenUnconfiguredBrowseRecord");
            if ((_DWORD)v164)
              goto LABEL_1171;
            if (!v1130)
            {
LABEL_1176:
              v36 = 0;
              v35 = 4294960568;
              goto LABEL_10;
            }
            CFRetain(v1130);
            sub_21A6FCC5C((uint64_t)"Base station is specified by a bonjour record", (uint64_t)v1130, v165, v166, v167, v168, v169, v170);
            v1132[0] = (__CFArray *)&stru_24DD08368;
            if (v1130)
              sub_21A693B94(v1130, (uint64_t)v1132, (UInt8 *)"%ks", v173, v174, v175, v176, v177, (uint64_t)"name");
            sub_21A6FC054("(%d) The base station named \"%@\" was specified with a Bonjour record.", v171, v172, v173, v174, v175, v176, v177, 10);
            v64 = 102;
            v183 = "SIG_UNCONFIGURED_BASE_SPECIFIED_BY_BONJOUR_RECORD_TRUE";
            goto LABEL_512;
          }
          if (sub_21A702828(v163, v155, v156, v157, v158, v159, v160, v161))
          {
            sub_21A693B94(*(const __CFString **)a1, (uint64_t)&v1128, (UInt8 *)"%ks", v508, a5, a6, a7, a8, (uint64_t)"BSAutoGuessContext_ChosenUnconfiguredScanRecord");
            if ((_DWORD)v164)
            {
LABEL_1171:
              v35 = v164;
              v36 = 0;
              goto LABEL_10;
            }
            if (!v1128)
              goto LABEL_1176;
            CFRetain(v1128);
            sub_21A6FCD64((uint64_t)"Base station is specified by a wireless scan record", (uint64_t)v1128, v509, v510, v511, v512, v513, v514);
            v1132[0] = (__CFArray *)&stru_24DD08368;
            if (v1128)
              sub_21A693B94(v1128, (uint64_t)v1132, (UInt8 *)"%kO", v517, v518, v519, v520, v521, (uint64_t)CFSTR("SSID_STR"));
            sub_21A6FC054("(%d) The base station named \"%@\" was specified with a Wi-Fi scan", v515, v516, v517, v518, v519, v520, v521, 10);
            v64 = 807;
            v183 = "SIG_UNCONFIGURED_BASE_SPECIFIED_BY_WIRELESS_SCAN_RECORD_TRUE";
LABEL_512:
            sub_21A709424(Mutable, byte_2550F4E08, v183, v178, v179, v180, v181, v182);
          }
          else
          {
            v64 = 10;
          }
          if (dword_2550F4508 <= 800 && (dword_2550F4508 != -1 || sub_21A69876C((uint64_t)&dword_2550F4508, 0x320u)))
          {
            v385 = 10;
            goto LABEL_931;
          }
          break;
        }
        v65 = v1119;
        if (dword_2550F4508 <= 800 && (dword_2550F4508 != -1 || sub_21A69876C((uint64_t)&dword_2550F4508, 0x320u)))
          sub_21A698FDC((uint64_t)&dword_2550F4508, (uint64_t)"void __BSAutoGuessConfiguration(void *)", 800, (uint64_t)"\n********************************************************************************\n* Entering state: %d (%s)\n********************************************************************************\n\n", a5, a6, a7, a8, 1);
        if (sub_21A7028C8(*(CFDictionaryRef *)a1, (uint64_t)v61, v62, a4, a5, a6, a7, a8))
        {
          if (dword_2550F4508 <= 800 && (dword_2550F4508 != -1 || sub_21A69876C((uint64_t)&dword_2550F4508, 0x320u)))
            sub_21A698FDC((uint64_t)&dword_2550F4508, (uint64_t)"void __BSAutoGuessConfiguration(void *)", 800, (uint64_t)"Unconfigured base station passed in to state machine", a5, a6, a7, a8, v1110);
          sub_21A6FC054("(%d) The user chose a specific base station to set up", v373, v374, v375, a5, a6, a7, a8, 1);
          sub_21A709424(Mutable, byte_2550F4E08, "SIG_UNCONFIGURED_BASE_IN_IOCONTEXT_DICTIONARY_TRUE", v376, v377, v378, v379, v380);
          v64 = 10;
        }
        else
        {
          if (dword_2550F4508 > 800)
          {
            v64 = 101;
            break;
          }
          if (dword_2550F4508 != -1 || sub_21A69876C((uint64_t)&dword_2550F4508, 0x320u))
            sub_21A698FDC((uint64_t)&dword_2550F4508, (uint64_t)"void __BSAutoGuessConfiguration(void *)", 800, (uint64_t)"(%d) No unconfigured base station passed in to state machine", a5, a6, a7, a8, 1);
          v64 = 101;
        }
        if (dword_2550F4508 <= 800 && (dword_2550F4508 != -1 || sub_21A69876C((uint64_t)&dword_2550F4508, 0x320u)))
        {
          v385 = 1;
          goto LABEL_931;
        }
        break;
    }
LABEL_932:
    v35 = 4294960573;
    if (sub_21A709EEC(*(_QWORD *)(a1 + 48)))
      goto LABEL_988;
  }
  if ((int)v64 > 800)
  {
    if ((int)v64 > 1200)
    {
      if ((int)v64 <= 1500)
      {
        switch((int)v64)
        {
          case 1401:
            if (dword_2550F4508 <= 800 && (dword_2550F4508 != -1 || sub_21A69876C((uint64_t)&dword_2550F4508, 0x320u)))
              sub_21A698FDC((uint64_t)&dword_2550F4508, (uint64_t)"void __BSAutoGuessConfiguration(void *)", 800, (uint64_t)"\n********************************************************************************\n* Entering state: %d (%s)\n********************************************************************************\n\n", a5, a6, a7, a8, 1401);
            v941 = sub_21A700B8C(1401, Mutable, -1, 0xFFFFFFFFLL, 0, CFSTR("BSSetupRecommend_OfferExtendWirelessly"), v1130, 0, ValueAtIndex, 0, 0, a1);
            if ((_DWORD)v941)
            {
              v35 = v941;
              v36 = 0;
              goto LABEL_10;
            }
            v1132[0] = (__CFArray *)&stru_24DD08368;
            if (ValueAtIndex)
              sub_21A693B94(ValueAtIndex, (uint64_t)v1132, (UInt8 *)"%ks", a4, a5, a6, a7, a8, (uint64_t)"name");
            v1132[0] = (__CFArray *)&stru_24DD08368;
            if (v1130)
              sub_21A693B94(v1130, (uint64_t)v1132, (UInt8 *)"%ks", a4, a5, a6, a7, a8, (uint64_t)"name");
            sub_21A6FC054("(%d) Offer to Extend the existing base station named \"%@\" wirelessly with the chosen base station named \"%@\".", v942, v943, a4, a5, a6, a7, a8, 1401);
            sub_21A709424(Mutable, byte_2550F4E08, "EXTEND_PREVIOUSLY_CONFIGURED_DEVICE_WIRELESSLY", v1072, v1073, v1074, v1075, v1076);
            if (dword_2550F4508 > 800 || dword_2550F4508 == -1 && !sub_21A69876C((uint64_t)&dword_2550F4508, 0x320u))
              goto LABEL_1245;
            goto LABEL_1244;
          case 1402:
            if (dword_2550F4508 <= 800 && (dword_2550F4508 != -1 || sub_21A69876C((uint64_t)&dword_2550F4508, 0x320u)))
              sub_21A698FDC((uint64_t)&dword_2550F4508, (uint64_t)"void __BSAutoGuessConfiguration(void *)", 800, (uint64_t)"\n********************************************************************************\n* Entering state: %d (%s)\n********************************************************************************\n\n", a5, a6, a7, a8, 1402);
            v969 = sub_21A700B8C(1402, Mutable, -1, 0xFFFFFFFFLL, 0, CFSTR("BSSetupRecommend_OfferReplace"), v1130, 0, ValueAtIndex, 0, 0, a1);
            if ((_DWORD)v969)
            {
              v35 = v969;
              v36 = 0;
              goto LABEL_10;
            }
            v1132[0] = (__CFArray *)&stru_24DD08368;
            if (ValueAtIndex)
              sub_21A693B94(ValueAtIndex, (uint64_t)v1132, (UInt8 *)"%ks", a4, a5, a6, a7, a8, (uint64_t)"name");
            v1132[0] = (__CFArray *)&stru_24DD08368;
            if (v1130)
              sub_21A693B94(v1130, (uint64_t)v1132, (UInt8 *)"%ks", a4, a5, a6, a7, a8, (uint64_t)"name");
            sub_21A6FC054("(%d) Offer to Replace the existing base station named \"%@\" with the chosen base station named \"%@\".", v970, v971, a4, a5, a6, a7, a8, 1402);
            sub_21A709424(Mutable, byte_2550F4E08, "REPLACE_PREVIOUSLY_CONFIGURED_DEVICE", v1077, v1078, v1079, v1080, v1081);
            if (dword_2550F4508 > 800 || dword_2550F4508 == -1 && !sub_21A69876C((uint64_t)&dword_2550F4508, 0x320u))
              goto LABEL_1245;
            goto LABEL_1244;
          case 1403:
            if (dword_2550F4508 <= 800 && (dword_2550F4508 != -1 || sub_21A69876C((uint64_t)&dword_2550F4508, 0x320u)))
              sub_21A698FDC((uint64_t)&dword_2550F4508, (uint64_t)"void __BSAutoGuessConfiguration(void *)", 800, (uint64_t)"\n********************************************************************************\n* Entering state: %d (%s)\n********************************************************************************\n\n", a5, a6, a7, a8, 1403);
            theArray = 0;
            if (sub_21A700AC4(v1130, (uint64_t)v1116, v62, a4, a5, a6, a7, a8))
            {
              v972 = (const __CFDictionary *)(v1116 ? v1116 : v1130);
              v973 = sub_21A6FDC6C(*(CFArrayRef *)(a1 + 32), v972, (CFTypeRef *)&theArray);
              if ((_DWORD)v973)
              {
                v35 = v973;
                if ((_DWORD)v973 != -6727)
                  goto LABEL_1008;
              }
            }
            v35 = sub_21A700B8C(1403, Mutable, -1, 0xFFFFFFFFLL, 0, CFSTR("BSSetupRecommend_OfferJoinNetwork"), v1130, v1116, 0, v1128, theArray, a1);
            if (theArray)
            {
              CFRelease(theArray);
              theArray = 0;
            }
            if ((_DWORD)v35)
            {
LABEL_1008:
              v36 = 0;
              goto LABEL_10;
            }
            v1132[0] = (__CFArray *)&stru_24DD08368;
            if (v1128)
              sub_21A693B94(v1128, (uint64_t)v1132, (UInt8 *)"%kO", a4, a5, a6, a7, a8, (uint64_t)CFSTR("SSID_STR"));
            if (v1130)
            {
              v1132[0] = (__CFArray *)&stru_24DD08368;
              sub_21A693B94(v1130, (uint64_t)v1132, (UInt8 *)"%ks", a4, a5, a6, a7, a8, (uint64_t)"name");
            }
            else
            {
              v1132[0] = (__CFArray *)&stru_24DD08368;
              if (v1116)
                sub_21A693B94(v1116, (uint64_t)v1132, (UInt8 *)"%kO", a4, a5, a6, a7, a8, (uint64_t)CFSTR("SSID_STR"));
            }
            sub_21A6FC054("(%d) Offer to Join the network called \"%@\" with the chosen base station named \"%@\".", v974, v975, a4, a5, a6, a7, a8, 1403);
            sub_21A709424(Mutable, byte_2550F4E08, "JOIN_WIRELESS_NETWORK", v1102, v1103, v1104, v1105, v1106);
            if (dword_2550F4508 <= 800 && (dword_2550F4508 != -1 || sub_21A69876C((uint64_t)&dword_2550F4508, 0x320u)))
              goto LABEL_1244;
            goto LABEL_1245;
          case 1404:
          case 1405:
            goto LABEL_1083;
          case 1406:
            if (dword_2550F4508 <= 800 && (dword_2550F4508 != -1 || sub_21A69876C((uint64_t)&dword_2550F4508, 0x320u)))
              sub_21A698FDC((uint64_t)&dword_2550F4508, (uint64_t)"void __BSAutoGuessConfiguration(void *)", 800, (uint64_t)"\n********************************************************************************\n* Entering state: %d (%s)\n********************************************************************************\n\n", a5, a6, a7, a8, 1406);
            v976 = sub_21A700B8C(1406, Mutable, -1, 0xFFFFFFFFLL, 0, CFSTR("BSSetupRecommend_AskUserChooseNetworkToJoin"), v1130, v1116, 0, 0, (void *)v1124, a1);
            if ((_DWORD)v976)
            {
              v35 = v976;
              goto LABEL_1015;
            }
            if (v1130)
            {
              v1132[0] = (__CFArray *)&stru_24DD08368;
              sub_21A693B94(v1130, (uint64_t)v1132, (UInt8 *)"%ks", a4, a5, a6, a7, a8, (uint64_t)"name");
            }
            else
            {
              v1132[0] = (__CFArray *)&stru_24DD08368;
              if (v1116)
                sub_21A693B94(v1116, (uint64_t)v1132, (UInt8 *)"%kO", a4, a5, a6, a7, a8, (uint64_t)CFSTR("SSID_STR"));
            }
            sub_21A6FC054("(%d) Unable to make a configuration suggestion for the chosen base station or network named \"%@\".", v977, v978, a4, a5, a6, a7, a8, 1406);
            sub_21A709424(Mutable, byte_2550F4E08, "JOIN_WIRELESS_NETWORK", v1082, v1083, v1084, v1085, v1086);
            if (v1124)
            {
              CFRelease(v1124);
              v1124 = 0;
            }
            if (dword_2550F4508 > 800 || dword_2550F4508 == -1 && !sub_21A69876C((uint64_t)&dword_2550F4508, 0x320u))
              goto LABEL_1245;
            goto LABEL_1244;
          case 1407:
            if (dword_2550F4508 <= 800 && (dword_2550F4508 != -1 || sub_21A69876C((uint64_t)&dword_2550F4508, 0x320u)))
              sub_21A698FDC((uint64_t)&dword_2550F4508, (uint64_t)"void __BSAutoGuessConfiguration(void *)", 800, (uint64_t)"\n********************************************************************************\n* Entering state: %d (%s)\n********************************************************************************\n\n", a5, a6, a7, a8, 1407);
            v979 = sub_21A700B8C(1407, Mutable, -1, 0xFFFFFFFFLL, 0, CFSTR("BSSetupRecommend_AskUserChooseBaseWireless"), v1130, 0, 0, 0, (void *)v1124, a1);
            if ((_DWORD)v979)
            {
              v35 = v979;
              v36 = 0;
              goto LABEL_10;
            }
            v1132[0] = (__CFArray *)&stru_24DD08368;
            if (v1130)
              sub_21A693B94(v1130, (uint64_t)v1132, (UInt8 *)"%ks", a4, a5, a6, a7, a8, (uint64_t)"name");
            sub_21A6FC054("(%d) Unable to make a configuration suggestion for the chosen base station named \"%@\".", v980, v981, a4, a5, a6, a7, a8, 1407);
            sub_21A709424(Mutable, byte_2550F4E08, "EXTEND_PREVIOUSLY_CONFIGURED_DEVICE_WIRELESSLY", v1042, v1043, v1044, v1045, v1046);
            if (v1124)
            {
              CFRelease(v1124);
              v1124 = 0;
            }
            if (dword_2550F4508 > 800 || dword_2550F4508 == -1 && !sub_21A69876C((uint64_t)&dword_2550F4508, 0x320u))
              goto LABEL_1245;
            goto LABEL_1244;
          case 1408:
            if (dword_2550F4508 <= 800 && (dword_2550F4508 != -1 || sub_21A69876C((uint64_t)&dword_2550F4508, 0x320u)))
              sub_21A698FDC((uint64_t)&dword_2550F4508, (uint64_t)"void __BSAutoGuessConfiguration(void *)", 800, (uint64_t)"\n********************************************************************************\n* Entering state: %d (%s)\n********************************************************************************\n\n", a5, a6, a7, a8, 1408);
            v982 = sub_21A700B8C(1408, Mutable, -1, 1, 0, CFSTR("BSSetupRecommend_OfferReplaceSourceIsUnconfigurable"), v1130, 0, ValueAtIndex, 0, 0, a1);
            if ((_DWORD)v982)
            {
              v35 = v982;
              v36 = 0;
              goto LABEL_10;
            }
            v1132[0] = (__CFArray *)&stru_24DD08368;
            if (ValueAtIndex)
              sub_21A693B94(ValueAtIndex, (uint64_t)v1132, (UInt8 *)"%ks", a4, a5, a6, a7, a8, (uint64_t)"name");
            v1132[0] = (__CFArray *)&stru_24DD08368;
            if (v1130)
              sub_21A693B94(v1130, (uint64_t)v1132, (UInt8 *)"%ks", a4, a5, a6, a7, a8, (uint64_t)"name");
            sub_21A6FC054("(%d) Offer to Replace the existing base station named \"%@\" with the chosen base station named \"%@\" . The existing base station is a Q61 or P81.", v983, v984, a4, a5, a6, a7, a8, 1408);
            sub_21A709424(Mutable, byte_2550F4E08, "REPLACE_PREVIOUSLY_CONFIGURED_DEVICE_UNCONFIGURABLE", v1087, v1088, v1089, v1090, v1091);
            if (dword_2550F4508 > 800 || dword_2550F4508 == -1 && !sub_21A69876C((uint64_t)&dword_2550F4508, 0x320u))
              goto LABEL_1245;
            goto LABEL_1244;
          case 1409:
            if (dword_2550F4508 <= 800 && (dword_2550F4508 != -1 || sub_21A69876C((uint64_t)&dword_2550F4508, 0x320u)))
              sub_21A698FDC((uint64_t)&dword_2550F4508, (uint64_t)"void __BSAutoGuessConfiguration(void *)", 800, (uint64_t)"\n********************************************************************************\n* Entering state: %d (%s)\n********************************************************************************\n\n", a5, a6, a7, a8, 1409);
            v985 = sub_21A700B8C(1409, Mutable, -1, 2, 0, CFSTR("BSSetupRecommend_OfferReplaceSourceIsUnconfigurable"), v1130, 0, ValueAtIndex, 0, 0, a1);
            if ((_DWORD)v985)
            {
              v35 = v985;
              v36 = 0;
              goto LABEL_10;
            }
            v1132[0] = (__CFArray *)&stru_24DD08368;
            if (ValueAtIndex)
              sub_21A693B94(ValueAtIndex, (uint64_t)v1132, (UInt8 *)"%ks", a4, a5, a6, a7, a8, (uint64_t)"name");
            v1132[0] = (__CFArray *)&stru_24DD08368;
            if (v1130)
              sub_21A693B94(v1130, (uint64_t)v1132, (UInt8 *)"%ks", a4, a5, a6, a7, a8, (uint64_t)"name");
            sub_21A6FC054("(%d) Offer to Replace the existing base station named \"%@\" with the chosen base station named \"%@\" . The existing base station is unconfigurable.", v986, v987, a4, a5, a6, a7, a8, 1409);
            sub_21A709424(Mutable, byte_2550F4E08, "REPLACE_PREVIOUSLY_CONFIGURED_DEVICE_UNCONFIGURABLE", v1092, v1093, v1094, v1095, v1096);
            if (dword_2550F4508 > 800 || dword_2550F4508 == -1 && !sub_21A69876C((uint64_t)&dword_2550F4508, 0x320u))
              goto LABEL_1245;
            goto LABEL_1244;
          default:
            if ((_DWORD)v64 != 1201)
              goto LABEL_1083;
            if (dword_2550F4508 <= 800 && (dword_2550F4508 != -1 || sub_21A69876C((uint64_t)&dword_2550F4508, 0x320u)))
              sub_21A698FDC((uint64_t)&dword_2550F4508, (uint64_t)"void __BSAutoGuessConfiguration(void *)", 800, (uint64_t)"\n********************************************************************************\n* Entering state: %d (%s)\n********************************************************************************\n\n", a5, a6, a7, a8, 1201);
            v966 = sub_21A700F5C(1201, Mutable, a1);
            if ((_DWORD)v966)
            {
              v35 = v966;
              v36 = 0;
              goto LABEL_10;
            }
            sub_21A6FC054("(%d) Cannot find any unconfigured AirPort base stations and all configured devices appear to be functioning normally.", v967, v968, a4, a5, a6, a7, a8, 1201);
            sub_21A709424(Mutable, byte_2550F4E08, "NOTHING_FOUND_TO_CONFIGURE", v1067, v1068, v1069, v1070, v1071);
            if (dword_2550F4508 > 800 || dword_2550F4508 == -1 && !sub_21A69876C((uint64_t)&dword_2550F4508, 0x320u))
              goto LABEL_1245;
            goto LABEL_1244;
        }
      }
      if ((int)v64 <= 1700)
      {
        if ((_DWORD)v64 == 1501)
        {
          if (dword_2550F4508 <= 800 && (dword_2550F4508 != -1 || sub_21A69876C((uint64_t)&dword_2550F4508, 0x320u)))
            sub_21A698FDC((uint64_t)&dword_2550F4508, (uint64_t)"void __BSAutoGuessConfiguration(void *)", 800, (uint64_t)"\n********************************************************************************\n* Entering state: %d (%s)\n********************************************************************************\n\n", a5, a6, a7, a8, 1501);
          v994 = sub_21A700B8C(1501, Mutable, -1, 0xFFFFFFFFLL, 0, CFSTR("BSSetupRecommend_OfferExtendOverEthernet"), v1130, 0, ValueAtIndex, 0, 0, a1);
          if ((_DWORD)v994)
          {
            v35 = v994;
            v36 = 0;
            goto LABEL_10;
          }
          v1132[0] = (__CFArray *)&stru_24DD08368;
          if (ValueAtIndex)
            sub_21A693B94(ValueAtIndex, (uint64_t)v1132, (UInt8 *)"%ks", a4, a5, a6, a7, a8, (uint64_t)"name");
          v1132[0] = (__CFArray *)&stru_24DD08368;
          if (v1130)
            sub_21A693B94(v1130, (uint64_t)v1132, (UInt8 *)"%ks", a4, a5, a6, a7, a8, (uint64_t)"name");
          sub_21A6FC054("(%d) Offer to Extend the existing base station named \"%@\" over ethernet with the chosen base station named \"%@\".", v995, v996, a4, a5, a6, a7, a8, 1501);
          sub_21A709424(Mutable, byte_2550F4E08, "EXTEND_USING_OTHER_BASE_CONFIGURATION_OVER_ETHERNET", v1097, v1098, v1099, v1100, v1101);
          if (dword_2550F4508 <= 800 && (dword_2550F4508 != -1 || sub_21A69876C((uint64_t)&dword_2550F4508, 0x320u)))
            goto LABEL_1244;
        }
        else
        {
          if (dword_2550F4508 <= 800 && (dword_2550F4508 != -1 || sub_21A69876C((uint64_t)&dword_2550F4508, 0x320u)))
            sub_21A698FDC((uint64_t)&dword_2550F4508, (uint64_t)"void __BSAutoGuessConfiguration(void *)", 800, (uint64_t)"\n********************************************************************************\n* Entering state: %d (%s)\n********************************************************************************\n\n", a5, a6, a7, a8, 1502);
          v963 = sub_21A700B8C(1502, Mutable, -1, 0xFFFFFFFFLL, 0, CFSTR("BSSetupRecommend_AskUserChooseBaseWired"), v1130, 0, 0, 0, (void *)v1124, a1);
          if ((_DWORD)v963)
          {
            v35 = v963;
            v36 = 0;
            goto LABEL_10;
          }
          v1132[0] = (__CFArray *)&stru_24DD08368;
          if (v1130)
            sub_21A693B94(v1130, (uint64_t)v1132, (UInt8 *)"%ks", a4, a5, a6, a7, a8, (uint64_t)"name");
          sub_21A6FC054("(%d) Unable to make a configuration suggestion for the chosen base station named \"%@\".", v964, v965, a4, a5, a6, a7, a8, 1502);
          sub_21A709424(Mutable, byte_2550F4E08, "ASK_USER_WHAT_TO_DO_2", v1052, v1053, v1054, v1055, v1056);
          if (v1124)
          {
            CFRelease(v1124);
            v1124 = 0;
          }
          if (dword_2550F4508 <= 800 && (dword_2550F4508 != -1 || sub_21A69876C((uint64_t)&dword_2550F4508, 0x320u)))
            goto LABEL_1244;
        }
      }
      else if ((_DWORD)v64 == 1701)
      {
        if (dword_2550F4508 <= 800 && (dword_2550F4508 != -1 || sub_21A69876C((uint64_t)&dword_2550F4508, 0x320u)))
          sub_21A698FDC((uint64_t)&dword_2550F4508, (uint64_t)"void __BSAutoGuessConfiguration(void *)", 800, (uint64_t)"\n********************************************************************************\n* Entering state: %d (%s)\n********************************************************************************\n\n", a5, a6, a7, a8, 1701);
        v988 = sub_21A700B8C(1701, Mutable, -1, 0xFFFFFFFFLL, 0, CFSTR("BSSetupRecommend_OfferCreate"), v1130, 0, 0, 0, 0, a1);
        if ((_DWORD)v988)
        {
          v35 = v988;
          v36 = 0;
          goto LABEL_10;
        }
        v1132[0] = (__CFArray *)&stru_24DD08368;
        if (v1130)
          sub_21A693B94(v1130, (uint64_t)v1132, (UInt8 *)"%ks", a4, a5, a6, a7, a8, (uint64_t)"name");
        sub_21A6FC054("(%d) Offer to Create a Wi-Fi network with the chosen base station named \"%@\".", v989, v990, a4, a5, a6, a7, a8, 1701);
        sub_21A709424(Mutable, byte_2550F4E08, "OFFER_TO_CREATE_NETWORK", v1057, v1058, v1059, v1060, v1061);
        if (dword_2550F4508 <= 800 && (dword_2550F4508 != -1 || sub_21A69876C((uint64_t)&dword_2550F4508, 0x320u)))
          goto LABEL_1244;
      }
      else if ((_DWORD)v64 == 1801)
      {
        if (dword_2550F4508 <= 800 && (dword_2550F4508 != -1 || sub_21A69876C((uint64_t)&dword_2550F4508, 0x320u)))
          sub_21A698FDC((uint64_t)&dword_2550F4508, (uint64_t)"void __BSAutoGuessConfiguration(void *)", 800, (uint64_t)"\n********************************************************************************\n* Entering state: %d (%s)\n********************************************************************************\n\n", a5, a6, a7, a8, 1801);
        v991 = sub_21A700F1C(1801, Mutable, a1);
        if ((_DWORD)v991)
        {
          v35 = v991;
          v36 = 0;
          goto LABEL_10;
        }
        sub_21A6FC054("(%d) The new AirPort base station needs to be plugged in to your current network using an Ethernet cable.", v992, v993, a4, a5, a6, a7, a8, 1801);
        sub_21A709424(Mutable, byte_2550F4E08, "TELL_USER_CANNOT_FIND_DEVICES", v1062, v1063, v1064, v1065, v1066);
        if (dword_2550F4508 <= 800 && (dword_2550F4508 != -1 || sub_21A69876C((uint64_t)&dword_2550F4508, 0x320u)))
          goto LABEL_1244;
      }
      else
      {
        if (dword_2550F4508 <= 800 && (dword_2550F4508 != -1 || sub_21A69876C((uint64_t)&dword_2550F4508, 0x320u)))
          sub_21A698FDC((uint64_t)&dword_2550F4508, (uint64_t)"void __BSAutoGuessConfiguration(void *)", 800, (uint64_t)"\n********************************************************************************\n* Entering state: %d (%s)\n********************************************************************************\n\n", a5, a6, a7, a8, 1802);
        v944 = sub_21A700B8C(1802, Mutable, -1, 0xFFFFFFFFLL, 0, CFSTR("BSSetupRecommend_UseAUFor80211g"), 0, v1128, 0, 0, 0, a1);
        if ((_DWORD)v944)
        {
          v35 = v944;
          v36 = 0;
          goto LABEL_10;
        }
        sub_21A6FC054("(%d) Use AirPort Utility for 802.11g to configure this network.", v945, v946, a4, a5, a6, a7, a8, 1802);
        sub_21A709424(Mutable, byte_2550F4E08, "TELL_USER_USE_AU_FOR_80211G", v1047, v1048, v1049, v1050, v1051);
        if (v1128)
        {
          CFRelease(v1128);
          v1128 = 0;
        }
        if (dword_2550F4508 > 800 || dword_2550F4508 == -1 && !sub_21A69876C((uint64_t)&dword_2550F4508, 0x320u))
          goto LABEL_1245;
LABEL_1244:
        sub_21A698FDC((uint64_t)&dword_2550F4508, (uint64_t)"void __BSAutoGuessConfiguration(void *)", 800, (uint64_t)"\n********************************************************************************\n* Exiting state: %d\n********************************************************************************\n\n", v959, v960, v961, v962, v64);
      }
LABEL_1245:
      v1107 = sub_21A72ACF0();
      if (!(_DWORD)v1107)
        v1107 = sub_21A709E44(*(_QWORD *)(a1 + 48), v1108, v1109, a4, a5, a6, a7, a8);
      v35 = v1107;
      v36 = 0;
      goto LABEL_10;
    }
    switch((int)v64)
    {
      case 801:
        if (dword_2550F4508 <= 800 && (dword_2550F4508 != -1 || sub_21A69876C((uint64_t)&dword_2550F4508, 0x320u)))
          sub_21A698FDC((uint64_t)&dword_2550F4508, (uint64_t)"void __BSAutoGuessConfiguration(void *)", 800, (uint64_t)"\n********************************************************************************\n* Entering state: %d (%s)\n********************************************************************************\n\n", a5, a6, a7, a8, 801);
        v75 = sub_21A6FD7E8(*(CFArrayRef *)(a1 + 32), &theDict, v62, a4, a5, a6, a7, a8);
        if ((_DWORD)v75 == -6727)
        {
          v1131 = 0;
LABEL_356:
          sub_21A6FC054(v1113, v76, v77, a4, a5, a6, a7, a8, 801);
          sub_21A7095E0(Mutable, byte_2550F4E08, "NUMBER_UNCONFIGURED_APPLE_NETWORKS_VISIBLE_IS_ZERO_TRUE", v1131, v381, v382, v383, v384);
          if (theDict)
          {
            CFRelease(theDict);
            theDict = 0;
          }
          v64 = 1201;
          goto LABEL_359;
        }
        v35 = v75;
        if ((_DWORD)v75)
          goto LABEL_1254;
        if (!theDict)
        {
          v36 = 0;
          v35 = 4294960568;
          goto LABEL_10;
        }
        v1131 = CFDictionaryGetCount(theDict);
        sub_21A6FCAF4((uint64_t)"State 801 scan records: \n", theDict, v78, v79, v80, v81, v82, v83);
        if (v1131 != 1)
        {
          if (v1131)
          {
            if (v1131 < 2)
            {
              v64 = 801;
            }
            else
            {
              v34 = theDict;
              CFRetain(theDict);
              if (theDict)
              {
                CFRelease(theDict);
                theDict = 0;
              }
              sub_21A6FC054("(%d) %d unconfigured network are visible in Wi-Fi scans", v84, v85, v86, v87, v88, v89, v90, 801);
              sub_21A7095E0(Mutable, byte_2550F4E08, "NUMBER_UNCONFIGURED_APPLE_NETWORKS_VISIBLE_IS_GREATER_THAN_ONE_TRUE", v1131, v91, v92, v93, v94);
              v64 = 806;
            }
            goto LABEL_359;
          }
          goto LABEL_356;
        }
        cf = 0;
        v623 = sub_21A6FDED0(theDict, &cf, v77, a4, a5, a6, a7, a8);
        if ((_DWORD)v623)
        {
          v35 = v623;
LABEL_1254:
          v36 = 0;
          goto LABEL_10;
        }
        if (!cf)
        {
          v35 = 4294960568;
          goto LABEL_1254;
        }
        v624 = (const __CFString *)CFDictionaryGetValue(theDict, cf);
        v1128 = v624;
        if (!v624)
        {
          v35 = 4294960569;
          goto LABEL_1254;
        }
        CFRetain(v624);
        v1132[0] = (__CFArray *)&stru_24DD08368;
        if (v1128)
          sub_21A693B94(v1128, (uint64_t)v1132, (UInt8 *)"%kO", v627, v628, v629, v630, v631, (uint64_t)CFSTR("SSID_STR"));
        sub_21A6FC054("(%d) One unconfigured network called \"%@\" is visible in Wi-Fi scans and has been chosen.", v625, v626, v627, v628, v629, v630, v631, 801);
        sub_21A7095E0(Mutable, byte_2550F4E08, "NUMBER_UNCONFIGURED_APPLE_NETWORKS_VISIBLE_IS_ONE_TRUE", v1131, v632, v633, v634, v635);
        if (theDict)
        {
          CFRelease(theDict);
          theDict = 0;
        }
        v64 = 807;
LABEL_359:
        if (dword_2550F4508 > 800 || dword_2550F4508 == -1 && !sub_21A69876C((uint64_t)&dword_2550F4508, 0x320u))
          goto LABEL_932;
        v385 = 801;
        break;
      case 802:
        if (dword_2550F4508 <= 800 && (dword_2550F4508 != -1 || sub_21A69876C((uint64_t)&dword_2550F4508, 0x320u)))
          sub_21A698FDC((uint64_t)&dword_2550F4508, (uint64_t)"void __BSAutoGuessConfiguration(void *)", 800, (uint64_t)"\n********************************************************************************\n* Entering state: %d (%s)\n********************************************************************************\n\n", a5, a6, a7, a8, 802);
        if (v1115)
        {
          sub_21A6FC054("(%d) The computer has wireless disabled and cannot switch networks", (uint64_t)v61, v62, a4, a5, a6, a7, a8, 802);
          sub_21A7095E0(Mutable, byte_2550F4E08, "CAN_SWITCH_NETWORKS_FALSE", v1131, v184, v185, v186, v187);
          v64 = 1801;
        }
        else
        {
          cf = 0;
          sub_21A700180(a1, *(CFArrayRef *)(a1 + 24), v62, a4, a5, a6, a7, a8);
          if ((_DWORD)v457)
            goto LABEL_1052;
          sub_21A6FCD64((uint64_t)"State 802 join network: \n", (uint64_t)v1128, v458, a4, a5, a6, a7, a8);
          sub_21A70A778(*(_QWORD *)(a1 + 48), 5, 0, (uint64_t)v1128, v459, v460, v461, v462);
          v467 = sub_21A70E918(*(_QWORD *)(a1 + 48), (const char *)v1128, (_DWORD)v1112 == 0, &cf, v463, v464, v465, v466);
          if ((_DWORD)v467)
          {
            v35 = v467;
            goto LABEL_1183;
          }
          if (!cf)
          {
            v35 = 4294960568;
            goto LABEL_1183;
          }
          sub_21A70A778(*(_QWORD *)(a1 + 48), 6, 0, (uint64_t)v1128, a5, a6, a7, a8);
          sub_21A6FCC5C((uint64_t)"State 802 save base station: \n", (uint64_t)cf, v468, v469, v470, v471, v472, v473);
          sub_21A6FE0D0((const __CFString *)cf, *(const __CFArray **)(a1 + 24), v474, v475, v476, v477, v478, v479);
          if ((_DWORD)v457
            || (v1130 = (const __CFString *)cf,
                sub_21A6FFEB8(a1, (const __CFString *)cf, 0, 0, a5, a6, a7, a8),
                (_DWORD)v457))
          {
LABEL_1052:
            v35 = v457;
LABEL_1183:
            v36 = 0;
            goto LABEL_10;
          }
          sub_21A70A778(*(_QWORD *)(a1 + 48), 16, 0, (uint64_t)v1130, a5, a6, a7, a8);
          v1132[0] = (__CFArray *)&stru_24DD08368;
          if (v1128)
            sub_21A693B94(v1128, (uint64_t)v1132, (UInt8 *)"%kO", v482, v483, v484, v485, v486, (uint64_t)CFSTR("SSID_STR"));
          v1132[0] = (__CFArray *)&stru_24DD08368;
          if (v1130)
            sub_21A693B94(v1130, (uint64_t)v1132, (UInt8 *)"%ks", v482, v483, v484, v485, v486, (uint64_t)"name");
          sub_21A6FC054("(%d) The computer has Wi-Fi enabled and can switch networks. Switched to the network called \"%@\" to configure the AirPort base station named \"%@\"", v480, v481, v482, v483, v484, v485, v486, 802);
          sub_21A7095E0(Mutable, byte_2550F4E08, "CAN_SWITCH_NETWORKS_TRUE", v1131, v689, v690, v691, v692);
          v64 = 103;
        }
        if (v1128)
        {
          CFRelease(v1128);
          v1128 = 0;
        }
        if (dword_2550F4508 > 800 || dword_2550F4508 == -1 && !sub_21A69876C((uint64_t)&dword_2550F4508, 0x320u))
          goto LABEL_932;
        v385 = 802;
        goto LABEL_931;
      case 803:
      case 804:
      case 805:
        goto LABEL_1083;
      case 806:
        cf = 0;
        if (dword_2550F4508 <= 800 && (dword_2550F4508 != -1 || sub_21A69876C((uint64_t)&dword_2550F4508, 0x320u)))
          sub_21A698FDC((uint64_t)&dword_2550F4508, (uint64_t)"void __BSAutoGuessConfiguration(void *)", 800, (uint64_t)"\n********************************************************************************\n* Entering state: %d (%s)\n********************************************************************************\n\n", a5, a6, a7, a8, 806);
        v35 = sub_21A6FD998(v34, &theDict, v62, a4, a5, a6, a7, a8);
        if (v34)
          CFRelease(v34);
        if ((_DWORD)v35 == -6727)
        {
          v1131 = 0;
LABEL_364:
          sub_21A6FC054("(%d) Found zero unconfigured networks in Wi-Fi scans after filtering.", v188, v189, a4, a5, a6, a7, a8, 806);
          v64 = 1201;
          v209 = "NUMBER_UNCONFIGURED_APPLE_NETWORKS_VISIBLE_IS_ZERO_TRUE";
LABEL_365:
          sub_21A7095E0(Mutable, byte_2550F4E08, v209, v1131, v205, v206, v207, v208);
          goto LABEL_366;
        }
        if ((_DWORD)v35)
          goto LABEL_1249;
        if (!theDict)
        {
LABEL_1082:
          v35 = 4294960568;
LABEL_1249:
          v36 = 0;
          v34 = 0;
          goto LABEL_10;
        }
        v1131 = CFDictionaryGetCount(theDict);
        sub_21A6FCAF4((uint64_t)"State 806 filtered records: \n", theDict, v190, v191, v192, v193, v194, v195);
        if (v1131 == 1)
        {
          v636 = sub_21A6FDED0(theDict, &cf, v189, a4, a5, a6, a7, a8);
          if ((_DWORD)v636)
          {
            v35 = v636;
            goto LABEL_1249;
          }
          if (!cf)
            goto LABEL_1082;
          v637 = (const __CFString *)CFDictionaryGetValue(theDict, cf);
          v1128 = v637;
          if (!v637)
          {
LABEL_1193:
            v35 = 4294960569;
            goto LABEL_1249;
          }
          CFRetain(v637);
          v1132[0] = (__CFArray *)&stru_24DD08368;
          if (v1128)
            sub_21A693B94(v1128, (uint64_t)v1132, (UInt8 *)"%kO", v640, v641, v642, v643, v644, (uint64_t)CFSTR("SSID_STR"));
          sub_21A6FC054("(%d) Found %d unconfigured network in Wi-Fi scans after filtering and the network is named \"%@\".", v638, v639, v640, v641, v642, v643, v644, 806);
          v64 = 807;
          v209 = "NUMBER_UNCONFIGURED_APPLE_NETWORKS_VISIBLE_IS_ONE_TRUE";
          goto LABEL_365;
        }
        if (!v1131)
          goto LABEL_364;
        if (v1131 >= 2)
        {
          v196 = sub_21A700950(a1, 6, theDict, &cf, a5, a6, a7, a8);
          if ((_DWORD)v196)
          {
            v35 = v196;
            goto LABEL_1249;
          }
          if (!cf)
            goto LABEL_1082;
          v197 = (const __CFString *)CFDictionaryGetValue(theDict, cf);
          v1128 = v197;
          if (!v197)
            goto LABEL_1193;
          CFRetain(v197);
          v1132[0] = (__CFArray *)&stru_24DD08368;
          if (v1128)
            sub_21A693B94(v1128, (uint64_t)v1132, (UInt8 *)"%kO", v200, v201, v202, v203, v204, (uint64_t)CFSTR("SSID_STR"));
          sub_21A6FC054("(%d) Found %d unconfigured networks in Wi-Fi scans and the user chose to configure the one called \"%@\".", v198, v199, v200, v201, v202, v203, v204, 806);
          v64 = 807;
          LODWORD(v1112) = 1;
          v209 = "NUMBER_UNCONFIGURED_APPLE_NETWORKS_VISIBLE_IS_GREATER_THAN_ONE_TRUE";
          v65 = v1119;
          goto LABEL_365;
        }
        v64 = 806;
LABEL_366:
        if (theDict)
        {
          CFRelease(theDict);
          theDict = 0;
        }
        if (dword_2550F4508 <= 800 && (dword_2550F4508 != -1 || sub_21A69876C((uint64_t)&dword_2550F4508, 0x320u)))
          sub_21A698FDC((uint64_t)&dword_2550F4508, (uint64_t)"void __BSAutoGuessConfiguration(void *)", 800, (uint64_t)"\n********************************************************************************\n* Exiting state: %d\n********************************************************************************\n\n", a5, a6, a7, a8, 806);
        v34 = 0;
        goto LABEL_932;
      case 807:
        if (dword_2550F4508 <= 800 && (dword_2550F4508 != -1 || sub_21A69876C((uint64_t)&dword_2550F4508, 0x320u)))
          sub_21A698FDC((uint64_t)&dword_2550F4508, (uint64_t)"void __BSAutoGuessConfiguration(void *)", 800, (uint64_t)"\n********************************************************************************\n* Entering state: %d (%s)\n********************************************************************************\n\n", a5, a6, a7, a8, 807);
        if (sub_21A6FD6D0((uint64_t)v1128, v61, v62, a4, a5, a6, a7, a8))
        {
          v64 = 1802;
          v217 = "(%d) This network is an 802.11g model. We don't support it with this software.";
          v218 = "CHOSEN_NETWORK_IS_80211G_TRUE";
        }
        else if (sub_21A6FD75C((uint64_t)v1128, v210, v211, v212, v213, v214, v215, v216))
        {
          v1116 = v1128;
          v1128 = 0;
          v64 = 1104;
          v217 = "(%d) This network is too new to be set up with this software.";
          v218 = "CHOSEN_NETWORK_IS_TOO_NEW_TRUE";
        }
        else
        {
          v64 = 808;
          v217 = "(%d) This network is not an 802.11g model. OK to continue.";
          v218 = "CHOSEN_NETWORK_IS_80211G_FALSE";
        }
        sub_21A6FC054(v217, (uint64_t)v210, v211, v212, v213, v214, v215, v216, 807);
        sub_21A709424(Mutable, byte_2550F4E08, v218, v677, v678, v679, v680, v681);
        if (dword_2550F4508 > 800 || dword_2550F4508 == -1 && !sub_21A69876C((uint64_t)&dword_2550F4508, 0x320u))
          goto LABEL_932;
        v385 = 807;
        goto LABEL_931;
      case 808:
        if (dword_2550F4508 <= 800 && (dword_2550F4508 != -1 || sub_21A69876C((uint64_t)&dword_2550F4508, 0x320u)))
          sub_21A698FDC((uint64_t)&dword_2550F4508, (uint64_t)"void __BSAutoGuessConfiguration(void *)", 800, (uint64_t)"\n********************************************************************************\n* Entering state: %d (%s)\n********************************************************************************\n\n", a5, a6, a7, a8, 808);
        if (sub_21A72E2A4((uint64_t)v1128, v61))
        {
          v1116 = v1128;
          v1128 = 0;
          v64 = 105;
          v226 = "(%d) This network is a STA-only device.";
          v227 = "CHOSEN_NETWORK_IS_STA_ONLY_TRUE";
        }
        else
        {
          v64 = 802;
          v226 = "(%d) This network is not a STA-only device.";
          v227 = "CHOSEN_NETWORK_IS_STA_ONLY_FALSE";
        }
        sub_21A6FC054(v226, v219, v220, v221, v222, v223, v224, v225, 808);
        sub_21A709424(Mutable, byte_2550F4E08, v227, v487, v488, v489, v490, v491);
        if (dword_2550F4508 > 800 || dword_2550F4508 == -1 && !sub_21A69876C((uint64_t)&dword_2550F4508, 0x320u))
          goto LABEL_932;
        v385 = 808;
        goto LABEL_931;
      default:
        switch((int)v64)
        {
          case 1101:
            if (dword_2550F4508 <= 800 && (dword_2550F4508 != -1 || sub_21A69876C((uint64_t)&dword_2550F4508, 0x320u)))
              sub_21A698FDC((uint64_t)&dword_2550F4508, (uint64_t)"void __BSAutoGuessConfiguration(void *)", 800, (uint64_t)"\n********************************************************************************\n* Entering state: %d (%s)\n********************************************************************************\n\n", a5, a6, a7, a8, 1101);
            sub_21A700B8C(1101, Mutable, -1, 0xFFFFFFFFLL, 0, CFSTR("BSSetupRecommend_UseAUFor80211g"), v1130, 0, 0, 0, 0, a1);
            sub_21A6FC054("(%d) Use AirPort Utility for 802.11g to configure this base station.", v947, v948, v949, v950, v951, v952, v953, 1101);
            sub_21A709424(Mutable, byte_2550F4E08, "TELL_USER_USE_AU_FOR_80211G", v954, v955, v956, v957, v958);
            if (dword_2550F4508 > 800 || dword_2550F4508 == -1 && !sub_21A69876C((uint64_t)&dword_2550F4508, 0x320u))
              goto LABEL_1245;
            goto LABEL_1244;
          case 1102:
            if (dword_2550F4508 <= 800 && (dword_2550F4508 != -1 || sub_21A69876C((uint64_t)&dword_2550F4508, 0x320u)))
              sub_21A698FDC((uint64_t)&dword_2550F4508, (uint64_t)"void __BSAutoGuessConfiguration(void *)", 800, (uint64_t)"\n********************************************************************************\n* Entering state: %d (%s)\n********************************************************************************\n\n", a5, a6, a7, a8, 1102);
            sub_21A700B8C(1102, Mutable, -1, 0xFFFFFFFFLL, 0, CFSTR("BSSetupRecommend_FirmwareUpdateRequired"), v1130, 0, 0, 0, 0, a1);
            sub_21A6FC054("(%d) A firmware update is required before configuring this base station.", v997, v998, v999, v1000, v1001, v1002, v1003, 1102);
            sub_21A709424(Mutable, byte_2550F4E08, "TELL_USER_FIRMWARE_UPDATE_REQUIRED", v1004, v1005, v1006, v1007, v1008);
            if (dword_2550F4508 > 800 || dword_2550F4508 == -1 && !sub_21A69876C((uint64_t)&dword_2550F4508, 0x320u))
              goto LABEL_1245;
            goto LABEL_1244;
          case 1103:
            if (dword_2550F4508 <= 800 && (dword_2550F4508 != -1 || sub_21A69876C((uint64_t)&dword_2550F4508, 0x320u)))
              sub_21A698FDC((uint64_t)&dword_2550F4508, (uint64_t)"void __BSAutoGuessConfiguration(void *)", 800, (uint64_t)"\n********************************************************************************\n* Entering state: %d (%s)\n********************************************************************************\n\n", a5, a6, a7, a8, 1103);
            sub_21A700B8C(1103, Mutable, -1, 0xFFFFFFFFLL, 0, CFSTR("BSSetupRecommend_NoNetworkToJoin"), v1130, v1116, 0, 0, 0, a1);
            sub_21A6FC054("(%d) No network was found for the STA-only device.", v1009, v1010, v1011, v1012, v1013, v1014, v1015, 1103);
            sub_21A709424(Mutable, byte_2550F4E08, "TELL_USER_NO_NETWORK_FOR_STA_ONLY", v1016, v1017, v1018, v1019, v1020);
            if (dword_2550F4508 > 800 || dword_2550F4508 == -1 && !sub_21A69876C((uint64_t)&dword_2550F4508, 0x320u))
              goto LABEL_1245;
            goto LABEL_1244;
          case 1104:
            if (dword_2550F4508 <= 800 && (dword_2550F4508 != -1 || sub_21A69876C((uint64_t)&dword_2550F4508, 0x320u)))
              sub_21A698FDC((uint64_t)&dword_2550F4508, (uint64_t)"void __BSAutoGuessConfiguration(void *)", 800, (uint64_t)"\n********************************************************************************\n* Entering state: %d (%s)\n********************************************************************************\n\n", a5, a6, a7, a8, 1104);
            sub_21A700B8C(1104, Mutable, -1, 0xFFFFFFFFLL, 0, CFSTR("BSSetupRecommend_DeviceIsTooNewToSetUp"), v1130, v1116, 0, 0, 0, a1);
            sub_21A6FC054("(%d) Device is too new to set up.", v1021, v1022, v1023, v1024, v1025, v1026, v1027, 1104);
            sub_21A709424(Mutable, byte_2550F4E08, "TELL_USER_DEVICE_IS_TOO_NEW_TO_SET_UP", v1028, v1029, v1030, v1031, v1032);
            if (dword_2550F4508 > 800 || dword_2550F4508 == -1 && !sub_21A69876C((uint64_t)&dword_2550F4508, 0x320u))
              goto LABEL_1245;
            goto LABEL_1244;
          default:
            goto LABEL_1083;
        }
    }
    goto LABEL_931;
  }
  switch((int)v64)
  {
    case 602:
      cf = 0;
      if (dword_2550F4508 <= 800 && (dword_2550F4508 != -1 || sub_21A69876C((uint64_t)&dword_2550F4508, 0x320u)))
        sub_21A698FDC((uint64_t)&dword_2550F4508, (uint64_t)"void __BSAutoGuessConfiguration(void *)", 800, (uint64_t)"\n********************************************************************************\n* Entering state: %d (%s)\n********************************************************************************\n\n", a5, a6, a7, a8, 602);
      sub_21A70A778(*(_QWORD *)(a1 + 48), 14, 0, 0, a5, a6, a7, a8);
      v116 = sub_21A6D1350((uint64_t *)&v1121, v1130);
      if ((_DWORD)v116)
        goto LABEL_1053;
      if (!v1121)
        goto LABEL_1079;
      v116 = sub_21A6FEADC(a1, v1130, 0, &cf, a5, a6, a7, a8);
      if ((_DWORD)v116)
        goto LABEL_1053;
      if (!cf)
        goto LABEL_1079;
      v35 = sub_21A6D1880((uint64_t)v1121, cf);
      if (cf)
      {
        CFRelease(cf);
        cf = 0;
      }
      if ((_DWORD)v35)
        goto LABEL_1054;
      if (sub_21A68F294(v1130, v117, v118, a4, a5, a6, a7, a8))
      {
        v125 = sub_21A6D6830((uint64_t)v1121);
        if (dword_2550F4508 <= 800 && (dword_2550F4508 != -1 || sub_21A69876C((uint64_t)&dword_2550F4508, 0x320u)))
          sub_21A698FDC((uint64_t)&dword_2550F4508, (uint64_t)"void __BSAutoGuessConfiguration(void *)", 800, (uint64_t)"BSSwitchToRestoreProfile err: %m\n", v121, v122, v123, v124, v125);
        if (!(_DWORD)v125)
          goto LABEL_705;
      }
      if (!sub_21A6FD368(v1130, v65, v119, v120, v121, v122, v123, v124))
        goto LABEL_143;
      v1132[0] = 0;
      v116 = sub_21A6FD4E8(v1130, v65, v1132, v128, v121, v122, v123, v124);
      if ((_DWORD)v116)
        goto LABEL_1053;
      if (!v1132[0])
      {
LABEL_1079:
        v36 = 0;
        v35 = 4294960568;
        goto LABEL_10;
      }
      v129 = sub_21A6D163C((uint64_t)v1121, (const __CFString *)v1132[0], 0);
      if (dword_2550F4508 <= 800 && (dword_2550F4508 != -1 || sub_21A69876C((uint64_t)&dword_2550F4508, 0x320u)))
        sub_21A698FDC((uint64_t)&dword_2550F4508, (uint64_t)"void __BSAutoGuessConfiguration(void *)", 800, (uint64_t)"BSImportFromConfigFile err: %m\n", v121, v122, v123, v124, v129);
      if ((_DWORD)v129)
      {
LABEL_143:
        v1132[0] = (__CFArray *)&stru_24DD08368;
        if (v1130)
          sub_21A693B94(v1130, (uint64_t)v1132, (UInt8 *)"%ks", v128, v121, v122, v123, v124, (uint64_t)"name");
        sub_21A6FC054("(%d) The chosen base station \"%@\" does not actually have a restore profile.", v126, v127, v128, v121, v122, v123, v124, 602);
        v64 = 501;
        v135 = "TEXT_RECORD_HAS_PROFILE_OR_PREVIOUS_CONFIG_FILE_FALSE";
      }
      else
      {
LABEL_705:
        v116 = sub_21A6FEF24((uint64_t)v1121, &v1127, &v1125, &v1126, v121, v122, v123, v124);
        if ((_DWORD)v116)
        {
LABEL_1053:
          v35 = v116;
LABEL_1054:
          v36 = 0;
          goto LABEL_10;
        }
        v64 = 602;
        if (v1127 <= 2)
        {
          if (v1127)
          {
            if (v1127 != 1)
              goto LABEL_868;
            v1132[0] = (__CFArray *)&stru_24DD08368;
            if (v1130)
              sub_21A693B94(v1130, (uint64_t)v1132, (UInt8 *)"%ks", a4, a5, a6, a7, a8, (uint64_t)"name");
            sub_21A6FC054("(%d) The previous settings for the chosen base station named \"%@\" are configured to Join a network called \"%@\".", v682, v683, a4, a5, a6, a7, a8, 602);
            v64 = 606;
            v135 = "RESTORE_PROFILE_NETWORK_MODE_JOIN_TRUE";
          }
          else
          {
            v1132[0] = (__CFArray *)&stru_24DD08368;
            if (v1130)
              sub_21A693B94(v1130, (uint64_t)v1132, (UInt8 *)"%ks", a4, a5, a6, a7, a8, (uint64_t)"name");
            sub_21A6FC054("(%d) The previous settings for the chosen base station named \"%@\" are configured to Create a network called \"%@\".", v682, v683, a4, a5, a6, a7, a8, 602);
            v64 = 603;
            v135 = "RESTORE_PROFILE_NETWORK_MODE_CREATE_TRUE";
          }
        }
        else if (v1127 == 3)
        {
          v1132[0] = (__CFArray *)&stru_24DD08368;
          if (v1130)
            sub_21A693B94(v1130, (uint64_t)v1132, (UInt8 *)"%ks", a4, a5, a6, a7, a8, (uint64_t)"name");
          sub_21A6FC054("(%d) The previous settings for the chosen base station named \"%@\" are configured with Wi-Fi disabled.", v682, v683, a4, a5, a6, a7, a8, 602);
          v64 = 605;
          v135 = "BASE_STATION_WIRELESS_ENABLED_FALSE";
        }
        else if (v1127 == 10)
        {
          v1132[0] = (__CFArray *)&stru_24DD08368;
          if (v1130)
            sub_21A693B94(v1130, (uint64_t)v1132, (UInt8 *)"%ks", a4, a5, a6, a7, a8, (uint64_t)"name");
          sub_21A6FC054("(%d) The previous settings for the chosen base station named \"%@\" are configured to Extend a network called \"%@\" using WDS.", v682, v683, a4, a5, a6, a7, a8, 602);
          v64 = 606;
          v135 = "RESTORE_PROFILE_NETWORK_MODE_WDS_TRUE";
        }
        else
        {
          v65 = v1119;
          if (v1127 != 20)
            goto LABEL_868;
          v1132[0] = (__CFArray *)&stru_24DD08368;
          if (v1130)
            sub_21A693B94(v1130, (uint64_t)v1132, (UInt8 *)"%ks", a4, a5, a6, a7, a8, (uint64_t)"name");
          sub_21A6FC054("(%d) The previous settings for the chosen base station named \"%@\" are configured to Extend a network called \"%@\" using DWDS.", v682, v683, a4, a5, a6, a7, a8, 602);
          v64 = 606;
          v135 = "RESTORE_PROFILE_NETWORK_MODE_DWDS_EXTENDER_TRUE";
        }
        v65 = v1119;
      }
      sub_21A709424(Mutable, byte_2550F4E08, v135, v130, v131, v132, v133, v134);
LABEL_868:
      if (dword_2550F4508 > 800 || dword_2550F4508 == -1 && !sub_21A69876C((uint64_t)&dword_2550F4508, 0x320u))
        goto LABEL_932;
      v385 = 602;
      goto LABEL_931;
    case 603:
      if (dword_2550F4508 <= 800 && (dword_2550F4508 != -1 || sub_21A69876C((uint64_t)&dword_2550F4508, 0x320u)))
        sub_21A698FDC((uint64_t)&dword_2550F4508, (uint64_t)"void __BSAutoGuessConfiguration(void *)", 800, (uint64_t)"\n********************************************************************************\n* Entering state: %d (%s)\n********************************************************************************\n\n", a5, a6, a7, a8, 603);
      if (sub_21A68F5B8(v1130, (uint64_t)v61, v62, a4, a5, a6, a7, a8))
      {
        v1132[0] = (__CFArray *)&stru_24DD08368;
        if (v1130)
          sub_21A693B94(v1130, (uint64_t)v1132, (UInt8 *)"%ks", v388, v389, v390, v391, v392, (uint64_t)"name");
        sub_21A6FC054("(%d) The chosen base station named \"%@\" indicates its WAN port is connected.", v386, v387, v388, v389, v390, v391, v392, 603);
        v64 = 604;
        v398 = "WAN_LINK_TRUE";
      }
      else
      {
        v399 = sub_21A700B8C(603, Mutable, v1127, 0xFFFFFFFFLL, v1125, CFSTR("BSSetupRecommend_OfferRestore"), v1130, 0, 0, 0, 0, a1);
        if ((_DWORD)v399)
          goto LABEL_987;
        v1132[0] = (__CFArray *)&stru_24DD08368;
        if (v1130)
          sub_21A693B94(v1130, (uint64_t)v1132, (UInt8 *)"%ks", a4, a5, a6, a7, a8, (uint64_t)"name");
        sub_21A6FC054("(%d) The chosen base station named \"%@\" indicates its WAN port is not connected.", v645, v646, a4, a5, a6, a7, a8, 603);
        v64 = 501;
        v398 = "WAN_LINK_FALSE";
      }
      sub_21A709424(Mutable, byte_2550F4E08, v398, v393, v394, v395, v396, v397);
      if (dword_2550F4508 > 800 || dword_2550F4508 == -1 && !sub_21A69876C((uint64_t)&dword_2550F4508, 0x320u))
        goto LABEL_932;
      v385 = 603;
      goto LABEL_931;
    case 604:
      if (dword_2550F4508 <= 800 && (dword_2550F4508 != -1 || sub_21A69876C((uint64_t)&dword_2550F4508, 0x320u)))
        sub_21A698FDC((uint64_t)&dword_2550F4508, (uint64_t)"void __BSAutoGuessConfiguration(void *)", 800, (uint64_t)"\n********************************************************************************\n* Entering state: %d (%s)\n********************************************************************************\n\n", a5, a6, a7, a8, 604);
      if (v1126 == 3)
      {
        v399 = sub_21A700B8C(604, Mutable, v1127, 0xFFFFFFFFLL, v1125, CFSTR("BSSetupRecommend_OfferRestore"), v1130, 0, 0, 0, 0, a1);
        if ((_DWORD)v399)
          goto LABEL_987;
        v1132[0] = (__CFArray *)&stru_24DD08368;
        if (v1130)
          sub_21A693B94(v1130, (uint64_t)v1132, (UInt8 *)"%ks", a4, a5, a6, a7, a8, (uint64_t)"name");
        sub_21A6FC054("(%d) The chosen base station named \"%@\" previous configuration is bridge mode and can be restored.", v400, v401, a4, a5, a6, a7, a8, 604);
        v64 = 501;
        v406 = "RESTORE_PROFILE_ROUTER_MODE_IS_BRIDGE_TRUE";
      }
      else
      {
        v1132[0] = (__CFArray *)&stru_24DD08368;
        if (v1130)
          sub_21A693B94(v1130, (uint64_t)v1132, (UInt8 *)"%ks", a4, a5, a6, a7, a8, (uint64_t)"name");
        sub_21A6FC054("(%d) The chosen base station named \"%@\" previous configuration is not bridge mode.", (uint64_t)v61, v62, a4, a5, a6, a7, a8, 604);
        v64 = 608;
        v406 = "RESTORE_PROFILE_ROUTER_MODE_IS_BRIDGE_FALSE";
      }
      sub_21A7095E0(Mutable, byte_2550F4E08, v406, v1131, v402, v403, v404, v405);
      if (dword_2550F4508 > 800 || dword_2550F4508 == -1 && !sub_21A69876C((uint64_t)&dword_2550F4508, 0x320u))
        goto LABEL_932;
      v385 = 604;
      goto LABEL_931;
    case 605:
      if (dword_2550F4508 <= 800 && (dword_2550F4508 != -1 || sub_21A69876C((uint64_t)&dword_2550F4508, 0x320u)))
        sub_21A698FDC((uint64_t)&dword_2550F4508, (uint64_t)"void __BSAutoGuessConfiguration(void *)", 800, (uint64_t)"\n********************************************************************************\n* Entering state: %d (%s)\n********************************************************************************\n\n", a5, a6, a7, a8, 605);
      if (sub_21A68F5B8(v1130, (uint64_t)v61, v62, a4, a5, a6, a7, a8))
      {
        v1132[0] = (__CFArray *)&stru_24DD08368;
        if (v1130)
          sub_21A693B94(v1130, (uint64_t)v1132, (UInt8 *)"%ks", v409, v410, v411, v412, v413, (uint64_t)"name");
        sub_21A6FC054("(%d) The chosen base station named \"%@\" indicates its WAN port is connected.", v407, v408, v409, v410, v411, v412, v413, 605);
        v64 = 604;
        v419 = "WAN_LINK_TRUE";
      }
      else
      {
        v399 = sub_21A700B8C(605, Mutable, v1127, 3, 0, CFSTR("BSSetupRecommend_OfferNoRestore"), v1130, 0, 0, 0, 0, a1);
        if ((_DWORD)v399)
          goto LABEL_987;
        v1132[0] = (__CFArray *)&stru_24DD08368;
        if (v1130)
          sub_21A693B94(v1130, (uint64_t)v1132, (UInt8 *)"%ks", a4, a5, a6, a7, a8, (uint64_t)"name");
        sub_21A6FC054("(%d) The chosen base station named \"%@\" indicates its WAN port is not connected.", v647, v648, a4, a5, a6, a7, a8, 605);
        v64 = 501;
        v419 = "WAN_LINK_FALSE";
      }
      sub_21A709424(Mutable, byte_2550F4E08, v419, v414, v415, v416, v417, v418);
      if (dword_2550F4508 > 800 || dword_2550F4508 == -1 && !sub_21A69876C((uint64_t)&dword_2550F4508, 0x320u))
        goto LABEL_932;
      v385 = 605;
      goto LABEL_931;
    case 606:
      if (dword_2550F4508 <= 800 && (dword_2550F4508 != -1 || sub_21A69876C((uint64_t)&dword_2550F4508, 0x320u)))
        sub_21A698FDC((uint64_t)&dword_2550F4508, (uint64_t)"void __BSAutoGuessConfiguration(void *)", 800, (uint64_t)"\n********************************************************************************\n* Entering state: %d (%s)\n********************************************************************************\n\n", a5, a6, a7, a8, 606);
      if (sub_21A7026F8((const __CFString *)v1125, *(CFArrayRef *)(a1 + 32), v62, a4, a5, a6, a7, a8))
      {
        v399 = sub_21A700B8C(606, Mutable, v1127, 0xFFFFFFFFLL, v1125, CFSTR("BSSetupRecommend_OfferRestore"), v1130, 0, 0, 0, 0, a1);
        if ((_DWORD)v399)
          goto LABEL_987;
        sub_21A6FC054("(%d) The network called \"%@\" is visible in the Wi-Fi scan.", v427, v428, a4, a5, a6, a7, a8, 606);
        v64 = 501;
        v434 = "WIRELESS_NETWORK_VISIBLE_IN_NETWORK_SCAN_TRUE";
      }
      else
      {
        sub_21A6FC054("(%d) The network called \"%@\" is not visible in the Wi-Fi scan.", v420, v421, v422, v423, v424, v425, v426, 606);
        v64 = 607;
        v434 = "WIRELESS_NETWORK_VISIBLE_IN_NETWORK_SCAN_FALSE";
      }
      sub_21A709424(Mutable, byte_2550F4E08, v434, v429, v430, v431, v432, v433);
      if (dword_2550F4508 > 800 || dword_2550F4508 == -1 && !sub_21A69876C((uint64_t)&dword_2550F4508, 0x320u))
        goto LABEL_932;
      v385 = 606;
      goto LABEL_931;
    case 607:
      if (dword_2550F4508 <= 800 && (dword_2550F4508 != -1 || sub_21A69876C((uint64_t)&dword_2550F4508, 0x320u)))
        sub_21A698FDC((uint64_t)&dword_2550F4508, (uint64_t)"void __BSAutoGuessConfiguration(void *)", 800, (uint64_t)"\n********************************************************************************\n* Entering state: %d (%s)\n********************************************************************************\n\n", a5, a6, a7, a8, 607);
      v435 = sub_21A700584(a1, *(CFArrayRef *)(a1 + 32), (const __CFString *)v1125, 3, (uint64_t *)&theDict, a6, a7, a8);
      v35 = v435;
      if ((v435 & 0xFFFFFFF7) != 0xFFFFE5B1)
      {
        if ((_DWORD)v435)
        {
          v36 = 0;
          goto LABEL_10;
        }
        if (!theDict)
        {
          v36 = 0;
          v35 = 4294960568;
          goto LABEL_10;
        }
        v399 = sub_21A700B8C(607, Mutable, v1127, 0xFFFFFFFFLL, v1125, CFSTR("BSSetupRecommend_OfferRestore"), v1130, 0, 0, 0, 0, a1);
        if ((_DWORD)v399)
          goto LABEL_987;
        sub_21A6FC054("(%d) The network called \"%@\" is found in a directed Wi-Fi scan.", v538, v539, a4, a5, a6, a7, a8, 607);
        v545 = "WIRELESS_NETWORK_VISIBLE_IN_DIRECT_NETWORK_SCAN_TRUE";
        goto LABEL_785;
      }
      if ((_DWORD)v435 == -6735)
      {
        v399 = sub_21A700B8C(607, Mutable, v1127, 1, v1125, CFSTR("BSSetupRecommend_OfferNoRestore"), v1130, 0, 0, 0, 0, a1);
      }
      else
      {
        if ((_DWORD)v435 != -6727)
        {
LABEL_784:
          sub_21A6FC054("(%d) The network called \"%@\" is not found in a directed Wi-Fi scan.", v436, v437, a4, a5, a6, a7, a8, 607);
          v545 = "WIRELESS_NETWORK_VISIBLE_IN_DIRECT_NETWORK_SCAN_FALSE";
LABEL_785:
          sub_21A709424(Mutable, byte_2550F4E08, v545, v540, v541, v542, v543, v544);
          if (theDict)
          {
            CFRelease(theDict);
            theDict = 0;
          }
          if (v1125)
          {
            CFRelease(v1125);
            v1125 = 0;
          }
          if (dword_2550F4508 <= 800 && (dword_2550F4508 != -1 || sub_21A69876C((uint64_t)&dword_2550F4508, 0x320u)))
          {
            v655 = 607;
LABEL_793:
            sub_21A698FDC((uint64_t)&dword_2550F4508, (uint64_t)"void __BSAutoGuessConfiguration(void *)", 800, (uint64_t)"\n********************************************************************************\n* Exiting state: %d\n********************************************************************************\n\n", v651, v652, v653, v654, v655);
          }
LABEL_794:
          v64 = 501;
          goto LABEL_932;
        }
        v399 = sub_21A700B8C(607, Mutable, v1127, 2, v1125, CFSTR("BSSetupRecommend_OfferNoRestore"), v1130, 0, 0, 0, 0, a1);
      }
      if (!(_DWORD)v399)
        goto LABEL_784;
LABEL_987:
      v35 = v399;
LABEL_988:
      v36 = 0;
LABEL_10:
      if (dword_2550F4508 <= 800 && (dword_2550F4508 != -1 || sub_21A69876C((uint64_t)&dword_2550F4508, 0x320u)))
        sub_21A698FDC((uint64_t)&dword_2550F4508, (uint64_t)"void __BSAutoGuessConfiguration(void *)", 800, (uint64_t)"State machine exiting... err: %d state: %d\n", a5, a6, a7, a8, v35);
      if ((v36 & 1) != 0)
      {
        if (!a1)
          goto LABEL_1108;
        goto LABEL_1100;
      }
LABEL_1099:
      sub_21A70DDCC(*(_QWORD *)(a1 + 48));
LABEL_1100:
      *(_DWORD *)(a1 + 40) = v35;
      v1132[0] = 0;
      if (!sub_21A692FEC(*v9, (CFTypeRef *)v1132, (uint64_t)"{%ks=%i%ks=%O}", a4, a5, a6, a7, a8, (uint64_t)"BSAutoGuessComplete_ErrorResult"))
      {
        if (!v1132[0])
          goto LABEL_1108;
        sub_21A70A778(*(_QWORD *)(a1 + 48), 18, *(unsigned int *)(a1 + 40), (uint64_t)v1132[0], v1033, v1034, v1035, v1036);
        if (dword_2550F4508 <= 800 && (dword_2550F4508 != -1 || sub_21A69876C((uint64_t)&dword_2550F4508, 0x320u)))
          sub_21A698FDC((uint64_t)&dword_2550F4508, (uint64_t)"void _BSAutoGuess_NotifyComplete(AutoGuessContextRef)", 800, (uint64_t)"Auto Guess END\n", v1037, v1038, v1039, v1040, v1111);
      }
      if (v1132[0])
        CFRelease(v1132[0]);
LABEL_1108:
      if (Mutable)
        CFRelease(Mutable);
      if (theArray)
      {
        CFRelease(theArray);
        theArray = 0;
      }
      if (theDict)
      {
        CFRelease(theDict);
        theDict = 0;
      }
      if (v1125)
      {
        CFRelease(v1125);
        v1125 = 0;
      }
      if (v1128)
      {
        CFRelease(v1128);
        v1128 = 0;
      }
      if (v34)
        CFRelease(v34);
      if (v1124)
      {
        CFRelease(v1124);
        v1124 = 0;
      }
      result = v1121;
      if (v1121)
        return sub_21A6D12CC(v1121);
      return result;
    case 608:
      if (dword_2550F4508 <= 800 && (dword_2550F4508 != -1 || sub_21A69876C((uint64_t)&dword_2550F4508, 0x320u)))
        sub_21A698FDC((uint64_t)&dword_2550F4508, (uint64_t)"void __BSAutoGuessConfiguration(void *)", 800, (uint64_t)"\n********************************************************************************\n* Entering state: %d (%s)\n********************************************************************************\n\n", a5, a6, a7, a8, 608);
      if (sub_21A6FF060((uint64_t)v1121, (uint64_t)v61, v62, a4, a5, a6, a7, a8))
      {
        v399 = sub_21A700B8C(608, Mutable, v1127, 4, 0, CFSTR("BSSetupRecommend_OfferNoRestore"), v1130, 0, 0, 0, 0, a1);
        if ((_DWORD)v399)
          goto LABEL_987;
        v1132[0] = (__CFArray *)&stru_24DD08368;
        if (v1130)
          sub_21A693B94(v1130, (uint64_t)v1132, (UInt8 *)"%ks", a4, a5, a6, a7, a8, (uint64_t)"name");
        sub_21A6FC054("(%d) The DHCP range in the the previous settings of the chosen base station named \"%@\" conflicts with the network the WAN port is plugged in to.", v438, v439, a4, a5, a6, a7, a8, 608);
        v445 = "DHCP_RANGE_CONFLICT_TRUE";
      }
      else
      {
        v399 = sub_21A700B8C(608, Mutable, v1127, 0xFFFFFFFFLL, v1125, CFSTR("BSSetupRecommend_OfferRestore"), v1130, 0, 0, 0, 0, a1);
        if ((_DWORD)v399)
          goto LABEL_987;
        v1132[0] = (__CFArray *)&stru_24DD08368;
        if (v1130)
          sub_21A693B94(v1130, (uint64_t)v1132, (UInt8 *)"%ks", a4, a5, a6, a7, a8, (uint64_t)"name");
        sub_21A6FC054("(%d) The DHCP range in the previous settings of the chosen base station named \"%@\" does not conflict with the network the WAN port is plugged in to.", v649, v650, a4, a5, a6, a7, a8, 608);
        v445 = "DHCP_RANGE_CONFLICT_FALSE";
      }
      sub_21A709424(Mutable, byte_2550F4E08, v445, v440, v441, v442, v443, v444);
      sub_21A6D12CC(v1121);
      v1121 = 0;
      if (dword_2550F4508 > 800 || dword_2550F4508 == -1 && !sub_21A69876C((uint64_t)&dword_2550F4508, 0x320u))
        goto LABEL_794;
      v655 = 608;
      goto LABEL_793;
    default:
      switch((int)v64)
      {
        case 700:
          if (dword_2550F4508 <= 800 && (dword_2550F4508 != -1 || sub_21A69876C((uint64_t)&dword_2550F4508, 0x320u)))
            sub_21A698FDC((uint64_t)&dword_2550F4508, (uint64_t)"void __BSAutoGuessConfiguration(void *)", 800, (uint64_t)"\n********************************************************************************\n* Entering state: %d (%s)\n********************************************************************************\n\n", a5, a6, a7, a8, 700);
          if (HIDWORD(v1112))
          {
            sub_21A6FC054("(%d) Already looked at preferred networks.", (uint64_t)v61, v62, a4, a5, a6, a7, a8, 700);
            sub_21A709424(Mutable, byte_2550F4E08, "CONSIDERED_PREFERRED_NETWORKS_TRUE", v142, v143, v144, v145, v146);
            if (sub_21A700AC4(v1130, (uint64_t)v1116, v147, v148, v149, v150, v151, v152))
            {
              if (v1116)
                v153 = (const __CFDictionary *)v1116;
              else
                v153 = (const __CFDictionary *)v1130;
              v154 = sub_21A6FDC6C(*(CFArrayRef *)(a1 + 32), v153, &v1124);
              if ((_DWORD)v154 == -6727)
              {
                v64 = 1103;
              }
              else
              {
                v35 = v154;
                if ((_DWORD)v154)
                {
                  v36 = 0;
                  goto LABEL_10;
                }
                if (!v1124)
                {
                  v36 = 0;
                  v35 = 4294960568;
                  goto LABEL_10;
                }
                v64 = 1406;
              }
            }
            else
            {
              v64 = 1701;
            }
          }
          else
          {
            sub_21A6FC054("(%d) Will look at preferred networks.", (uint64_t)v61, v62, a4, a5, a6, a7, a8, 700);
            sub_21A709424(Mutable, byte_2550F4E08, "CONSIDERED_PREFERRED_NETWORKS_FALSE", v684, v685, v686, v687, v688);
            v64 = 701;
            HIDWORD(v1112) = 1;
          }
          if (dword_2550F4508 > 800 || dword_2550F4508 == -1 && !sub_21A69876C((uint64_t)&dword_2550F4508, 0x320u))
            goto LABEL_932;
          v385 = 700;
          goto LABEL_931;
        case 701:
          if (dword_2550F4508 <= 800 && (dword_2550F4508 != -1 || sub_21A69876C((uint64_t)&dword_2550F4508, 0x320u)))
            sub_21A698FDC((uint64_t)&dword_2550F4508, (uint64_t)"void __BSAutoGuessConfiguration(void *)", 800, (uint64_t)"\n********************************************************************************\n* Entering state: %d (%s)\n********************************************************************************\n\n", a5, a6, a7, a8, 701);
          if (v1118)
          {
            sub_21A6FC054("(%d) The computer has support for accessing the preferred networks list.", (uint64_t)v61, v62, a4, a5, a6, a7, a8, 701);
            sub_21A709424(Mutable, byte_2550F4E08, "HOST_SUPPORTS_PREFERRED_NETWORK_ACCESS_TRUE", v446, v447, v448, v449, v450);
            v64 = 702;
          }
          else
          {
            sub_21A6FC054("(%d) The computer does not have support for accessing the preferred networks list.", (uint64_t)v61, v62, a4, a5, a6, a7, a8, 701);
            sub_21A709424(Mutable, byte_2550F4E08, "HOST_SUPPORTS_PREFERRED_NETWORK_ACCESS_FALSE", v656, v657, v658, v659, v660);
            if (sub_21A700AC4(v1130, (uint64_t)v1116, v661, v662, v663, v664, v665, v666))
            {
              if (v1116)
                v667 = (const __CFDictionary *)v1116;
              else
                v667 = (const __CFDictionary *)v1130;
              v668 = sub_21A6FDC6C(*(CFArrayRef *)(a1 + 32), v667, &v1124);
              if ((_DWORD)v668 == -6727)
              {
                v64 = 1103;
              }
              else
              {
                v35 = v668;
                if ((_DWORD)v668)
                {
                  v36 = 0;
                  goto LABEL_10;
                }
                if (!v1124)
                {
                  v36 = 0;
                  v35 = 4294960568;
                  goto LABEL_10;
                }
                v64 = 1406;
                v65 = v1119;
              }
            }
            else
            {
              v64 = 1701;
            }
          }
          if (dword_2550F4508 > 800 || dword_2550F4508 == -1 && !sub_21A69876C((uint64_t)&dword_2550F4508, 0x320u))
            goto LABEL_932;
          v385 = 701;
          goto LABEL_931;
        case 702:
          if (dword_2550F4508 <= 800 && (dword_2550F4508 != -1 || sub_21A69876C((uint64_t)&dword_2550F4508, 0x320u)))
            sub_21A698FDC((uint64_t)&dword_2550F4508, (uint64_t)"void __BSAutoGuessConfiguration(void *)", 800, (uint64_t)"\n********************************************************************************\n* Entering state: %d (%s)\n********************************************************************************\n\n", a5, a6, a7, a8, 702);
          v451 = sub_21A701CFC(a1, *(const __CFArray **)(a1 + 32), v1114, Value, 1, &theArray, a7, a8);
          if ((_DWORD)v451)
          {
            v35 = v451;
            if ((_DWORD)v451 != -6727)
              goto LABEL_1266;
            v1131 = 0;
LABEL_613:
            sub_21A6FC054("(%d) There are no preferred networks visible in the Wi-Fi scan.", v452, v453, a4, a5, a6, a7, a8, 702);
            sub_21A709424(Mutable, byte_2550F4E08, "VISIBLE_PREFERRED_NETWORK_FALSE", v580, v581, v582, v583, v584);
            v64 = 703;
            goto LABEL_876;
          }
          if (!theArray)
            goto LABEL_1190;
          v1131 = CFArrayGetCount(theArray);
          if (!v1131)
            goto LABEL_613;
          sub_21A6FC5DC((uint64_t)"State 702 scan records: \n", theArray, v453, a4, a5, a6, a7, a8);
          v552 = sub_21A700AC4(v1130, (uint64_t)v1116, v546, v547, v548, v549, v550, v551);
          v556 = theArray;
          theArray = 0;
          if (v552)
          {
            if (v1116)
              v557 = (const __CFDictionary *)v1116;
            else
              v557 = (const __CFDictionary *)v1130;
            v35 = sub_21A6FDC6C(v556, v557, (CFTypeRef *)&theArray);
            if (v556)
              CFRelease(v556);
            if ((_DWORD)v35 == -6727)
            {
              sub_21A6FC054("(%d) There are no preferred networks available after filtering.", v558, v559, a4, a5, a6, a7, a8, 702);
LABEL_840:
              sub_21A709424(Mutable, byte_2550F4E08, "VISIBLE_PREFERRED_NETWORK_FALSE", v776, v777, v778, v779, v780);
              v64 = 703;
              goto LABEL_875;
            }
            if ((_DWORD)v35)
              goto LABEL_1266;
            if (!theArray)
              goto LABEL_1190;
            v1131 = CFArrayGetCount(theArray);
            if (v1131 == 1)
            {
              v567 = (const __CFString *)CFArrayGetValueAtIndex(theArray, 0);
              v1128 = v567;
              if (!v567)
                goto LABEL_1190;
              CFRetain(v567);
              v1132[0] = (__CFArray *)&stru_24DD08368;
              if (v1128)
                sub_21A693B94(v1128, (uint64_t)v1132, (UInt8 *)"%kO", v570, v571, v572, v573, v574, (uint64_t)CFSTR("SSID_STR"));
              sub_21A6FC054("(%d) Found one preferred network called \"%@\" that can be joined by STA-only device.", v568, v569, v570, v571, v572, v573, v574, 702);
LABEL_612:
              sub_21A709424(Mutable, byte_2550F4E08, "NUMBER_PREFERRED_NETWORKS_FOR_STA_ONLY_TO_JOIN_IS_ONE_TRUE", v575, v576, v577, v578, v579);
              v64 = 1403;
              goto LABEL_875;
            }
            sub_21A6FC054("(%d) Found %d preferred networks that could be joined by STA-only device.", v560, v561, v562, v563, v564, v565, v566, 702);
            sub_21A7095E0(Mutable, byte_2550F4E08, "NUMBER_PREFERRED_NETWORKS_FOR_STA_ONLY_TO_JOIN_IS_GREATER_THAN_ONE_TRUE", v1131, v849, v850, v851, v852);
            if (theArray)
            {
              CFRelease(theArray);
              theArray = 0;
            }
            if (v1116)
              v853 = (const __CFDictionary *)v1116;
            else
              v853 = (const __CFDictionary *)v1130;
            v854 = sub_21A6FDC6C(*(CFArrayRef *)(a1 + 32), v853, (CFTypeRef *)&theArray);
            if ((_DWORD)v854 == -6727)
            {
              sub_21A6FC054("(%d) There are no networks available (after re-filtering all networks).", v855, v856, a4, a5, a6, a7, a8, 702);
              goto LABEL_840;
            }
            v35 = v854;
            if ((_DWORD)v854)
              goto LABEL_1266;
            if (!theArray)
            {
LABEL_1190:
              v36 = 0;
              v35 = 4294960568;
              goto LABEL_10;
            }
            v1131 = CFArrayGetCount(theArray);
            v864 = theArray;
            if (v1131 == 1)
            {
              v865 = (const __CFString *)CFArrayGetValueAtIndex(theArray, 0);
              v1128 = v865;
              if (!v865)
                goto LABEL_1190;
              CFRetain(v865);
              v1132[0] = (__CFArray *)&stru_24DD08368;
              if (v1128)
                sub_21A693B94(v1128, (uint64_t)v1132, (UInt8 *)"%kO", v868, v869, v870, v871, v872, (uint64_t)CFSTR("SSID_STR"));
              sub_21A6FC054("(%d) Found one network called \"%@\" that can be joined by STA-only device (after re-filtering all networks).", v866, v867, v868, v869, v870, v871, v872, 702);
              goto LABEL_612;
            }
            theArray = 0;
            v1124 = v864;
            sub_21A6FC054("(%d) Found %d networks that could be joined by STA-only device (after re-filtering all networks).", v857, v858, v859, v860, v861, v862, v863, 702);
            sub_21A7095E0(Mutable, byte_2550F4E08, "NUMBER_PREFERRED_NETWORKS_FOR_STA_ONLY_TO_JOIN_IS_GREATER_THAN_ONE_TRUE", v1131, v910, v911, v912, v913);
            v64 = 1406;
          }
          else
          {
            v35 = sub_21A700398(a1, v556, 0, 0xFu, (CFTypeRef *)&theArray, v553, v554, v555);
            if (v556)
              CFRelease(v556);
            if ((_DWORD)v35)
            {
              if ((_DWORD)v35 == -6723)
                goto LABEL_1266;
              sub_21A6FC054("(%d) There are no preferred networks successfully joined and base stations found. err: %d", v774, v775, a4, a5, a6, a7, a8, 702);
              goto LABEL_840;
            }
            if (!theArray)
              goto LABEL_1190;
            sub_21A6FC0F0((uint64_t)"State 702 adding browse record: \n", theArray, v775, a4, a5, a6, a7, a8);
            sub_21A6FE318(theArray, *(const __CFArray **)(a1 + 24), v821, v822, v823, v824, v825, v826);
            if ((_DWORD)v827)
            {
              v35 = v827;
LABEL_1266:
              v36 = 0;
              goto LABEL_10;
            }
            sub_21A6FC054("(%d) At least one of your preferred networks is visible in the Wi-Fi scan.", v828, v829, a4, a5, a6, a7, a8, 702);
            sub_21A709424(Mutable, byte_2550F4E08, "VISIBLE_PREFERRED_NETWORK_TRUE", v830, v831, v832, v833, v834);
            v64 = 401;
          }
LABEL_875:
          v65 = v1119;
LABEL_876:
          if (theArray)
          {
            CFRelease(theArray);
            theArray = 0;
          }
          if (dword_2550F4508 > 800 || dword_2550F4508 == -1 && !sub_21A69876C((uint64_t)&dword_2550F4508, 0x320u))
            goto LABEL_932;
          v385 = 702;
          goto LABEL_931;
        case 703:
          if (dword_2550F4508 <= 800 && (dword_2550F4508 != -1 || sub_21A69876C((uint64_t)&dword_2550F4508, 0x320u)))
            sub_21A698FDC((uint64_t)&dword_2550F4508, (uint64_t)"void __BSAutoGuessConfiguration(void *)", 800, (uint64_t)"\n********************************************************************************\n* Entering state: %d (%s)\n********************************************************************************\n\n", a5, a6, a7, a8, 703);
          v454 = sub_21A701CFC(a1, *(const __CFArray **)(a1 + 32), v1114, Value, 14, &theArray, a7, a8);
          if ((_DWORD)v454)
          {
            v35 = v454;
            if ((_DWORD)v454 != -6727)
              goto LABEL_1252;
            v1131 = 0;
          }
          else
          {
            if (!theArray)
              goto LABEL_1191;
            v1131 = CFArrayGetCount(theArray);
            if (v1131)
            {
              cf = 0;
              sub_21A6FC5DC((uint64_t)"State 703 scan records: \n", theArray, v456, a4, a5, a6, a7, a8);
              sub_21A693B94((const __CFString *)theArray, (uint64_t)&cf, (UInt8 *)"[*]", v585, v586, v587, v588, v589, 0);
              if ((_DWORD)v590)
                goto LABEL_1194;
              if (!cf)
                goto LABEL_1251;
              sub_21A6FE410(*(__CFArray **)(a1 + 32), (const __CFString *)cf, v591, a4, a5, a6, a7, a8);
              if ((_DWORD)v590)
              {
LABEL_1194:
                v35 = v590;
                goto LABEL_1252;
              }
              if (sub_21A700AC4(v1130, (uint64_t)v1116, v592, a4, a5, a6, a7, a8))
              {
                if (v1116)
                  v596 = (const __CFDictionary *)v1116;
                else
                  v596 = (const __CFDictionary *)v1130;
                v597 = sub_21A6FDC6C(theArray, v596, 0);
                if ((_DWORD)v597 != -6727)
                {
                  v35 = v597;
                  if ((_DWORD)v597)
                    goto LABEL_1252;
                  v1128 = (const __CFString *)cf;
                  CFRetain(cf);
                  v1132[0] = (__CFArray *)&stru_24DD08368;
                  if (v1128)
                    sub_21A693B94(v1128, (uint64_t)v1132, (UInt8 *)"%kO", v600, v601, v602, v603, v604, (uint64_t)CFSTR("SSID_STR"));
                  sub_21A6FC054("(%d) Found one hidden preferred network called \"%@\" that can be joined by STA-only device.", v598, v599, v600, v601, v602, v603, v604, 703);
                  goto LABEL_628;
                }
                if (theArray)
                {
                  CFRelease(theArray);
                  theArray = 0;
                }
                if (v1116)
                  v801 = (const __CFDictionary *)v1116;
                else
                  v801 = (const __CFDictionary *)v1130;
                v802 = sub_21A6FDC6C(*(CFArrayRef *)(a1 + 32), v801, (CFTypeRef *)&theArray);
                if ((_DWORD)v802 == -6727)
                {
                  sub_21A6FC054("(%d) There are no networks available (after re-filtering all networks).", v803, v804, a4, a5, a6, a7, a8, 703);
                  sub_21A709424(Mutable, byte_2550F4E08, "HIDDEN_PREFERRED_NETWORK_FALSE", v877, v878, v879, v880, v881);
                  v64 = 1103;
                }
                else
                {
                  v35 = v802;
                  if ((_DWORD)v802)
                    goto LABEL_1252;
                  if (!theArray)
                  {
LABEL_1251:
                    v35 = 4294960568;
LABEL_1252:
                    v36 = 0;
                    goto LABEL_10;
                  }
                  v1131 = CFArrayGetCount(theArray);
                  v812 = theArray;
                  if (v1131 == 1)
                  {
                    v813 = (const __CFString *)CFArrayGetValueAtIndex(theArray, 0);
                    v1128 = v813;
                    if (!v813)
                      goto LABEL_1251;
                    CFRetain(v813);
                    v1132[0] = (__CFArray *)&stru_24DD08368;
                    if (v1128)
                      sub_21A693B94(v1128, (uint64_t)v1132, (UInt8 *)"%kO", v816, v817, v818, v819, v820, (uint64_t)CFSTR("SSID_STR"));
                    sub_21A6FC054("(%d) Found one network called \"%@\" that can be joined by STA-only device (after re-filtering all networks).", v814, v815, v816, v817, v818, v819, v820, 703);
LABEL_628:
                    sub_21A709424(Mutable, byte_2550F4E08, "HIDDEN_PREFERRED_NETWORK_TRUE", v605, v606, v607, v608, v609);
                    v64 = 1403;
                  }
                  else
                  {
                    theArray = 0;
                    v1124 = v812;
                    sub_21A6FC054("(%d) Found %d networks that could be joined by STA-only device (after re-filtering all networks).", v805, v806, v807, v808, v809, v810, v811, 703);
                    sub_21A7095E0(Mutable, byte_2550F4E08, "HIDDEN_PREFERRED_NETWORK_TRUE", v1131, v906, v907, v908, v909);
                    v64 = 1406;
                  }
                }
              }
              else
              {
                v781 = sub_21A70028C(a1, (const char *)cf, 0, 0xFu, &theArray, v593, v594, v595);
                if ((_DWORD)v781)
                {
                  if ((_DWORD)v781 == -6723)
                  {
                    v35 = v781;
                    goto LABEL_1252;
                  }
                  sub_21A6FC054("(%d) There are no preferred networks found using a directed Wi-Fi scan and base stations found. err: %d", v782, v783, a4, a5, a6, a7, a8, 703);
                  sub_21A709424(Mutable, byte_2550F4E08, "HIDDEN_PREFERRED_NETWORK_FALSE", v784, v785, v786, v787, v788);
                  v64 = 1701;
                }
                else
                {
                  if (!theArray)
                    goto LABEL_1251;
                  sub_21A6FC0F0((uint64_t)"State 703 adding browse record: \n", theArray, v783, a4, a5, a6, a7, a8);
                  sub_21A6FE318(theArray, *(const __CFArray **)(a1 + 24), v835, v836, v837, v838, v839, v840);
                  v35 = v843;
                  if (theArray)
                  {
                    CFRelease(theArray);
                    theArray = 0;
                  }
                  if ((_DWORD)v35)
                    goto LABEL_1252;
                  v1132[0] = (__CFArray *)&stru_24DD08368;
                  if (cf)
                    sub_21A693B94((const __CFString *)cf, (uint64_t)v1132, (UInt8 *)"%kO", a4, a5, a6, a7, a8, (uint64_t)CFSTR("SSID_STR"));
                  sub_21A6FC054("(%d) The hidden preferred network called \"%@\" was found using a directed Wi-Fi scan.", v841, v842, a4, a5, a6, a7, a8, 703);
                  sub_21A709424(Mutable, byte_2550F4E08, "HIDDEN_PREFERRED_NETWORK_TRUE", v844, v845, v846, v847, v848);
                  v64 = 401;
                }
              }
              v65 = v1119;
              goto LABEL_925;
            }
          }
          sub_21A6FC054("(%d) There are no preferred networks found using a directed Wi-Fi scan.", v455, v456, a4, a5, a6, a7, a8, 703);
          sub_21A709424(Mutable, byte_2550F4E08, "HIDDEN_PREFERRED_NETWORK_FALSE", v610, v611, v612, v613, v614);
          if (sub_21A700AC4(v1130, (uint64_t)v1116, v615, v616, v617, v618, v619, v620))
          {
            if (v1116)
              v621 = (const __CFDictionary *)v1116;
            else
              v621 = (const __CFDictionary *)v1130;
            v622 = sub_21A6FDC6C(*(CFArrayRef *)(a1 + 32), v621, &v1124);
            if ((_DWORD)v622 == -6727)
            {
              v64 = 1103;
            }
            else
            {
              v35 = v622;
              if ((_DWORD)v622)
                goto LABEL_1252;
              if (!v1124)
              {
LABEL_1191:
                v36 = 0;
                v35 = 4294960568;
                goto LABEL_10;
              }
              v64 = 1406;
            }
          }
          else
          {
            v64 = 1701;
          }
LABEL_925:
          if (theArray)
          {
            CFRelease(theArray);
            theArray = 0;
          }
          if (dword_2550F4508 > 800 || dword_2550F4508 == -1 && !sub_21A69876C((uint64_t)&dword_2550F4508, 0x320u))
            goto LABEL_932;
          v385 = 703;
          break;
        default:
          goto LABEL_1083;
      }
      goto LABEL_931;
  }
}

