uint64_t static MatchedMedName.supportsSecureCoding.getter()
{
  return 1;
}

id MatchedMedName.__allocating_init(identifier:display:pronunciationHint:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  objc_class *v6;
  id v8;
  uint64_t v9;
  void *v10;
  id v11;
  uint64_t v12;
  void *v13;
  id v20;

  v20 = objc_allocWithZone(v6);
  if (a2)
  {
    v12 = MEMORY[0x24957CFB4](a1);
    swift_bridgeObjectRelease();
    v13 = (void *)v12;
  }
  else
  {
    v13 = 0;
  }
  v11 = (id)MEMORY[0x24957CFB4](a3, a4);
  if (a6)
  {
    v9 = MEMORY[0x24957CFB4](a5);
    swift_bridgeObjectRelease();
    v10 = (void *)v9;
  }
  else
  {
    v10 = 0;
  }
  v8 = objc_msgSend(v20, sel_initWithIdentifier_displayString_pronunciationHint_, v13, v11);

  swift_bridgeObjectRelease();
  return v8;
}

id MatchedMedName.init(identifier:display:pronunciationHint:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  id v6;
  id v8;
  uint64_t v9;
  void *v10;
  id v11;
  uint64_t v12;
  void *v13;
  objc_super v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  id v27;

  v27 = 0;
  v25 = a1;
  v26 = a2;
  v23 = a3;
  v24 = a4;
  v21 = a5;
  v22 = a6;
  swift_bridgeObjectRetain();
  if (a2)
  {
    v12 = MEMORY[0x24957CFB4](a1);
    swift_bridgeObjectRelease();
    v13 = (void *)v12;
  }
  else
  {
    v13 = 0;
  }
  swift_bridgeObjectRetain();
  v11 = (id)MEMORY[0x24957CFB4](a3, a4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  if (a6)
  {
    v9 = MEMORY[0x24957CFB4](a5);
    swift_bridgeObjectRelease();
    v10 = (void *)v9;
  }
  else
  {
    v10 = 0;
  }
  v20.receiver = 0;
  v20.super_class = (Class)type metadata accessor for MatchedMedName();
  v8 = objc_msgSendSuper2(&v20, sel_initWithIdentifier_displayString_pronunciationHint_, v13, v11, v10);

  v6 = v8;
  v27 = v8;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return v8;
}

uint64_t type metadata accessor for MatchedMedName()
{
  return objc_opt_self();
}

id MatchedMedName.__allocating_init(coder:)(void *a1)
{
  objc_class *v1;
  id v4;

  v4 = objc_msgSend(objc_allocWithZone(v1), sel_initWithCoder_, a1);

  return v4;
}

id MatchedMedName.init(coder:)(void *a1)
{
  id v1;
  id v5;
  objc_super v6;
  void *v7;
  id v8;

  v8 = 0;
  v7 = a1;
  v6.receiver = 0;
  v6.super_class = (Class)type metadata accessor for MatchedMedName();
  v5 = objc_msgSendSuper2(&v6, sel_initWithCoder_, a1);
  if (v5)
  {
    v1 = v5;
    v8 = v5;

    return v5;
  }
  else
  {

    return 0;
  }
}

id MatchedMedName.__deallocating_deinit()
{
  void *v0;
  objc_super v2;
  void *v3;

  v3 = v0;
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for MatchedMedName();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

id static MatchedMedNameResolutionResult.success(with:)(uint64_t a1)
{
  uint64_t v1;
  objc_super v4;
  uint64_t v5;
  uint64_t v6;

  v6 = a1;
  v5 = v1;
  v4.receiver = (id)swift_getObjCClassFromMetadata();
  v4.super_class = (Class)&OBJC_METACLASS___MatchedMedNameResolutionResult;
  return objc_msgSendSuper2(&v4, sel_successWithResolvedObject_, a1);
}

id static MatchedMedNameResolutionResult.disambiguation(with:)(uint64_t a1)
{
  uint64_t v1;
  void *ObjCClassFromMetadata;
  Class isa;
  id v5;
  objc_super v6;
  uint64_t v7;
  uint64_t v8;

  v8 = a1;
  v7 = v1;
  ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata();
  swift_bridgeObjectRetain();
  type metadata accessor for MatchedMedName();
  type metadata accessor for INObject();
  _arrayForceCast<A, B>(_:)();
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v6.receiver = ObjCClassFromMetadata;
  v6.super_class = (Class)&OBJC_METACLASS___MatchedMedNameResolutionResult;
  v5 = objc_msgSendSuper2(&v6, sel_disambiguationWithObjectsToDisambiguate_, isa);

  return v5;
}

unint64_t type metadata accessor for INObject()
{
  unint64_t ObjCClassMetadata;
  uint64_t v2;

  v2 = lazy cache variable for type metadata for INObject;
  if (!lazy cache variable for type metadata for INObject)
  {
    objc_opt_self();
    ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for INObject);
    return ObjCClassMetadata;
  }
  return v2;
}

id static MatchedMedNameResolutionResult.confirmationRequired(with:)(void *a1)
{
  uint64_t v1;
  id v2;
  id v4;
  id v5;
  void *v6;
  void *ObjCClassFromMetadata;
  objc_super v9;
  uint64_t v10;
  void *v11;

  v11 = a1;
  v10 = v1;
  ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata();
  v2 = a1;
  if (a1)
    v6 = a1;
  else
    v6 = 0;
  v9.receiver = ObjCClassFromMetadata;
  v9.super_class = (Class)&OBJC_METACLASS___MatchedMedNameResolutionResult;
  v5 = objc_msgSendSuper2(&v9, sel_confirmationRequiredWithObjectToConfirm_, v6);

  return v5;
}

void static MatchedMedNameResolutionResult.success(with:)()
{
  implicit closure #1 in default argument 0 of fatalError(_:file:line:)();
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

id sub_2474A2118(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, id a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  void *v17;

  return a1;
}

void static MatchedMedNameResolutionResult.disambiguation(with:)()
{
  implicit closure #1 in default argument 0 of fatalError(_:file:line:)();
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

id sub_2474A220C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, id a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  void *v17;

  swift_bridgeObjectRelease();

  return a1;
}

void static MatchedMedNameResolutionResult.confirmationRequired(with:)()
{
  implicit closure #1 in default argument 0 of fatalError(_:file:line:)();
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

id sub_2474A22EC(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, id a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  void *v17;

  return a1;
}

id MatchedMedNameResolutionResult.__allocating_init(JSONDictionary:intent:)(uint64_t a1, void *a2)
{
  objc_class *v2;
  id v4;
  Class isa;
  id v7;

  v4 = objc_allocWithZone(v2);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  v7 = objc_msgSend(v4, sel_initWithJSONDictionary_forIntent_);

  swift_bridgeObjectRelease();
  return v7;
}

id MatchedMedNameResolutionResult.init(JSONDictionary:intent:)(uint64_t a1, void *a2)
{
  id v2;
  Class isa;
  id v7;
  objc_super v8;
  void *v9;
  uint64_t v10;
  id v11;

  v11 = 0;
  v10 = a1;
  v9 = a2;
  swift_bridgeObjectRetain();
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v8.receiver = 0;
  v8.super_class = (Class)type metadata accessor for MatchedMedNameResolutionResult();
  v7 = objc_msgSendSuper2(&v8, sel_initWithJSONDictionary_forIntent_, isa, a2);

  if (v7)
  {
    v2 = v7;
    v11 = v7;

    swift_bridgeObjectRelease();
    return v7;
  }
  else
  {

    swift_bridgeObjectRelease();
    return 0;
  }
}

id MatchedMedNameResolutionResult.__deallocating_deinit()
{
  void *v0;
  objc_super v2;
  void *v3;

  v3 = v0;
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for MatchedMedNameResolutionResult();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t variable initialization expression of LogQuantityIntentResponse.code()
{
  return 0;
}

unint64_t variable initialization expression of HealthKitPersistor.store()
{
  type metadata accessor for HKHealthStore();
  return (unint64_t)NSDateFormatter.__allocating_init()();
}

void variable initialization expression of GetHealthQuantityIntentHandler.storage(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = 0;
  a1[4] = 0;
}

uint64_t variable initialization expression of LogPeriodIntentResponse.code()
{
  return 0;
}

uint64_t variable initialization expression of LogSpecificMedicationsIntentResponse.code()
{
  return 0;
}

uint64_t variable initialization expression of GetSleepAnalysisIntentResponse.code()
{
  return 0;
}

uint64_t variable initialization expression of GetHealthQuantityIntentResponse.code()
{
  return 0;
}

unint64_t variable initialization expression of DataProviderFactory.store()
{
  type metadata accessor for HKHealthStore();
  return (unint64_t)NSDateFormatter.__allocating_init()();
}

uint64_t variable initialization expression of DeleteHealthSampleIntentResponse.code()
{
  return 0;
}

uint64_t variable initialization expression of GetAcitivitySummaryIntentResponse.code()
{
  return 0;
}

uint64_t variable initialization expression of GetCardioFitnessIntentResponse.code()
{
  return 0;
}

uint64_t variable initialization expression of GetBloodPressureIntentHandler.signposter()
{
  return OSSignposter.init()();
}

uint64_t variable initialization expression of GetBloodPressureIntentResponse.code()
{
  return 0;
}

uint64_t variable initialization expression of LogBloodPressureIntentResponse.code()
{
  return 0;
}

uint64_t variable initialization expression of GetMenstruationPredictionIntentResponse.code()
{
  return 0;
}

uint64_t variable initialization expression of LogGenericMedicationsIntentResponse.code()
{
  return 0;
}

unint64_t variable initialization expression of BloodPressurePersistor.store()
{
  type metadata accessor for HKHealthStore();
  return (unint64_t)NSDateFormatter.__allocating_init()();
}

uint64_t variable initialization expression of GetAmbiguousDistanceIntentResponse.code()
{
  return 0;
}

uint64_t variable initialization expression of UndoMedsIntentResponse.code()
{
  return 0;
}

uint64_t variable initialization expression of Statistics.queryDateRange@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  v1 = type metadata accessor for DateInterval();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 56))(a1, 1);
}

uint64_t protocol witness for Error._domain.getter in conformance related decl 'e' for HKErrorCode()
{
  lazy protocol witness table accessor for type related decl 'e' for HKErrorCode and conformance related decl 'e' for HKErrorCode();
  return Error<>._domain.getter();
}

uint64_t protocol witness for Error._code.getter in conformance related decl 'e' for HKErrorCode()
{
  lazy protocol witness table accessor for type related decl 'e' for HKErrorCode and conformance related decl 'e' for HKErrorCode();
  return Error<>._code.getter();
}

uint64_t protocol witness for Error._userInfo.getter in conformance related decl 'e' for HKErrorCode()
{
  return Error._userInfo.getter();
}

uint64_t protocol witness for Error._getEmbeddedNSError() in conformance related decl 'e' for HKErrorCode()
{
  lazy protocol witness table accessor for type related decl 'e' for HKErrorCode and conformance related decl 'e' for HKErrorCode();
  return _BridgedStoredNSError._getEmbeddedNSError()();
}

void *protocol witness for _BridgedStoredNSError._nsError.getter in conformance related decl 'e' for HKErrorCode()
{
  void **v0;

  return related decl 'e' for HKErrorCode._nsError.getter(*v0);
}

void *related decl 'e' for HKErrorCode._nsError.getter(void *a1)
{
  id v1;

  v1 = a1;
  return a1;
}

void *protocol witness for _BridgedStoredNSError.init(_nsError:) in conformance related decl 'e' for HKErrorCode@<X0>(void *a1@<X0>, _QWORD *a2@<X8>)
{
  void *result;

  result = related decl 'e' for HKErrorCode.init(_nsError:)(a1);
  *a2 = result;
  return result;
}

void *related decl 'e' for HKErrorCode.init(_nsError:)(void *a1)
{
  id v1;

  v1 = a1;

  return a1;
}

uint64_t protocol witness for SetAlgebra.init() in conformance HKStatisticsOptions()
{
  lazy protocol witness table accessor for type HKStatisticsOptions and conformance HKStatisticsOptions();
  lazy protocol witness table accessor for type UInt and conformance UInt();
  return OptionSet<>.init()();
}

uint64_t protocol witness for SetAlgebra.contains(_:) in conformance HKStatisticsOptions()
{
  lazy protocol witness table accessor for type HKStatisticsOptions and conformance HKStatisticsOptions();
  return OptionSet<>.contains(_:)() & 1;
}

uint64_t protocol witness for SetAlgebra.union(_:) in conformance HKStatisticsOptions()
{
  lazy protocol witness table accessor for type HKStatisticsOptions and conformance HKStatisticsOptions();
  return OptionSet.union(_:)();
}

uint64_t protocol witness for SetAlgebra.intersection(_:) in conformance HKStatisticsOptions()
{
  lazy protocol witness table accessor for type HKStatisticsOptions and conformance HKStatisticsOptions();
  return OptionSet.intersection(_:)();
}

uint64_t protocol witness for SetAlgebra.symmetricDifference(_:) in conformance HKStatisticsOptions()
{
  lazy protocol witness table accessor for type HKStatisticsOptions and conformance HKStatisticsOptions();
  return OptionSet.symmetricDifference(_:)();
}

uint64_t protocol witness for SetAlgebra.insert(_:) in conformance HKStatisticsOptions()
{
  lazy protocol witness table accessor for type HKStatisticsOptions and conformance HKStatisticsOptions();
  return OptionSet<>.insert(_:)() & 1;
}

uint64_t protocol witness for SetAlgebra.remove(_:) in conformance HKStatisticsOptions()
{
  lazy protocol witness table accessor for type HKStatisticsOptions and conformance HKStatisticsOptions();
  return OptionSet<>.remove(_:)();
}

uint64_t protocol witness for SetAlgebra.update(with:) in conformance HKStatisticsOptions()
{
  lazy protocol witness table accessor for type HKStatisticsOptions and conformance HKStatisticsOptions();
  return OptionSet<>.update(with:)();
}

uint64_t protocol witness for SetAlgebra.formUnion(_:) in conformance HKStatisticsOptions()
{
  lazy protocol witness table accessor for type HKStatisticsOptions and conformance HKStatisticsOptions();
  lazy protocol witness table accessor for type UInt and conformance UInt();
  return OptionSet<>.formUnion(_:)();
}

uint64_t protocol witness for SetAlgebra.formIntersection(_:) in conformance HKStatisticsOptions()
{
  lazy protocol witness table accessor for type HKStatisticsOptions and conformance HKStatisticsOptions();
  lazy protocol witness table accessor for type UInt and conformance UInt();
  return OptionSet<>.formIntersection(_:)();
}

uint64_t protocol witness for SetAlgebra.formSymmetricDifference(_:) in conformance HKStatisticsOptions()
{
  lazy protocol witness table accessor for type HKStatisticsOptions and conformance HKStatisticsOptions();
  lazy protocol witness table accessor for type UInt and conformance UInt();
  return OptionSet<>.formSymmetricDifference(_:)();
}

uint64_t protocol witness for SetAlgebra.subtracting(_:) in conformance HKStatisticsOptions()
{
  return SetAlgebra.subtracting(_:)();
}

uint64_t protocol witness for SetAlgebra.isSubset(of:) in conformance HKStatisticsOptions()
{
  return SetAlgebra.isSubset(of:)() & 1;
}

uint64_t protocol witness for SetAlgebra.isDisjoint(with:) in conformance HKStatisticsOptions()
{
  return SetAlgebra.isDisjoint(with:)() & 1;
}

uint64_t protocol witness for SetAlgebra.isSuperset(of:) in conformance HKStatisticsOptions()
{
  return SetAlgebra.isSuperset(of:)() & 1;
}

uint64_t protocol witness for SetAlgebra.isEmpty.getter in conformance HKStatisticsOptions()
{
  return SetAlgebra.isEmpty.getter() & 1;
}

uint64_t protocol witness for SetAlgebra.init<A>(_:) in conformance HKStatisticsOptions()
{
  return SetAlgebra.init<A>(_:)();
}

uint64_t protocol witness for SetAlgebra.subtract(_:) in conformance HKStatisticsOptions()
{
  return SetAlgebra.subtract(_:)();
}

uint64_t protocol witness for SetAlgebra.init() in conformance HKQueryOptions()
{
  lazy protocol witness table accessor for type HKQueryOptions and conformance HKQueryOptions();
  lazy protocol witness table accessor for type UInt and conformance UInt();
  return OptionSet<>.init()();
}

uint64_t protocol witness for SetAlgebra.contains(_:) in conformance HKQueryOptions()
{
  lazy protocol witness table accessor for type HKQueryOptions and conformance HKQueryOptions();
  return OptionSet<>.contains(_:)() & 1;
}

uint64_t protocol witness for SetAlgebra.union(_:) in conformance HKQueryOptions()
{
  lazy protocol witness table accessor for type HKQueryOptions and conformance HKQueryOptions();
  return OptionSet.union(_:)();
}

uint64_t protocol witness for SetAlgebra.intersection(_:) in conformance HKQueryOptions()
{
  lazy protocol witness table accessor for type HKQueryOptions and conformance HKQueryOptions();
  return OptionSet.intersection(_:)();
}

uint64_t protocol witness for SetAlgebra.symmetricDifference(_:) in conformance HKQueryOptions()
{
  lazy protocol witness table accessor for type HKQueryOptions and conformance HKQueryOptions();
  return OptionSet.symmetricDifference(_:)();
}

uint64_t protocol witness for SetAlgebra.insert(_:) in conformance HKQueryOptions()
{
  lazy protocol witness table accessor for type HKQueryOptions and conformance HKQueryOptions();
  return OptionSet<>.insert(_:)() & 1;
}

uint64_t protocol witness for SetAlgebra.remove(_:) in conformance HKQueryOptions()
{
  lazy protocol witness table accessor for type HKQueryOptions and conformance HKQueryOptions();
  return OptionSet<>.remove(_:)();
}

uint64_t protocol witness for SetAlgebra.update(with:) in conformance HKQueryOptions()
{
  lazy protocol witness table accessor for type HKQueryOptions and conformance HKQueryOptions();
  return OptionSet<>.update(with:)();
}

uint64_t protocol witness for SetAlgebra.formUnion(_:) in conformance HKQueryOptions()
{
  lazy protocol witness table accessor for type HKQueryOptions and conformance HKQueryOptions();
  lazy protocol witness table accessor for type UInt and conformance UInt();
  return OptionSet<>.formUnion(_:)();
}

uint64_t protocol witness for SetAlgebra.formIntersection(_:) in conformance HKQueryOptions()
{
  lazy protocol witness table accessor for type HKQueryOptions and conformance HKQueryOptions();
  lazy protocol witness table accessor for type UInt and conformance UInt();
  return OptionSet<>.formIntersection(_:)();
}

uint64_t protocol witness for SetAlgebra.formSymmetricDifference(_:) in conformance HKQueryOptions()
{
  lazy protocol witness table accessor for type HKQueryOptions and conformance HKQueryOptions();
  lazy protocol witness table accessor for type UInt and conformance UInt();
  return OptionSet<>.formSymmetricDifference(_:)();
}

void protocol witness for RawRepresentable.init(rawValue:) in conformance HKMedicationDoseEventStatus(uint64_t a1@<X8>)
{
  uint64_t v1;
  char v2;

  HKMedicationDoseEventStatus.init(rawValue:)();
  *(_QWORD *)a1 = v1;
  *(_BYTE *)(a1 + 8) = v2 & 1;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance HKMedicationDoseEventStatus(_QWORD *a1@<X8>)
{
  uint64_t v1;

  HKMedicationDoseEventStatus.rawValue.getter();
  *a1 = v1;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance HKManualEntryValidationResult()
{
  lazy protocol witness table accessor for type HKManualEntryValidationResult and conformance HKManualEntryValidationResult();
  return == infix<A>(_:_:)() & 1;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance HKMedicationDoseEventStatus()
{
  lazy protocol witness table accessor for type HKMedicationDoseEventStatus and conformance HKMedicationDoseEventStatus();
  return == infix<A>(_:_:)() & 1;
}

uint64_t protocol witness for SetAlgebra.init() in conformance HKSleepDaySummaryQueryOptions()
{
  lazy protocol witness table accessor for type HKSleepDaySummaryQueryOptions and conformance HKSleepDaySummaryQueryOptions();
  lazy protocol witness table accessor for type UInt and conformance UInt();
  return OptionSet<>.init()();
}

uint64_t protocol witness for SetAlgebra.contains(_:) in conformance HKSleepDaySummaryQueryOptions()
{
  lazy protocol witness table accessor for type HKSleepDaySummaryQueryOptions and conformance HKSleepDaySummaryQueryOptions();
  return OptionSet<>.contains(_:)() & 1;
}

uint64_t protocol witness for SetAlgebra.union(_:) in conformance HKSleepDaySummaryQueryOptions()
{
  lazy protocol witness table accessor for type HKSleepDaySummaryQueryOptions and conformance HKSleepDaySummaryQueryOptions();
  return OptionSet.union(_:)();
}

uint64_t protocol witness for SetAlgebra.intersection(_:) in conformance HKSleepDaySummaryQueryOptions()
{
  lazy protocol witness table accessor for type HKSleepDaySummaryQueryOptions and conformance HKSleepDaySummaryQueryOptions();
  return OptionSet.intersection(_:)();
}

uint64_t protocol witness for SetAlgebra.symmetricDifference(_:) in conformance HKSleepDaySummaryQueryOptions()
{
  lazy protocol witness table accessor for type HKSleepDaySummaryQueryOptions and conformance HKSleepDaySummaryQueryOptions();
  return OptionSet.symmetricDifference(_:)();
}

uint64_t protocol witness for SetAlgebra.insert(_:) in conformance HKSleepDaySummaryQueryOptions()
{
  lazy protocol witness table accessor for type HKSleepDaySummaryQueryOptions and conformance HKSleepDaySummaryQueryOptions();
  return OptionSet<>.insert(_:)() & 1;
}

uint64_t protocol witness for SetAlgebra.remove(_:) in conformance HKSleepDaySummaryQueryOptions()
{
  lazy protocol witness table accessor for type HKSleepDaySummaryQueryOptions and conformance HKSleepDaySummaryQueryOptions();
  return OptionSet<>.remove(_:)();
}

uint64_t protocol witness for SetAlgebra.update(with:) in conformance HKSleepDaySummaryQueryOptions()
{
  lazy protocol witness table accessor for type HKSleepDaySummaryQueryOptions and conformance HKSleepDaySummaryQueryOptions();
  return OptionSet<>.update(with:)();
}

uint64_t protocol witness for SetAlgebra.formUnion(_:) in conformance HKSleepDaySummaryQueryOptions()
{
  lazy protocol witness table accessor for type HKSleepDaySummaryQueryOptions and conformance HKSleepDaySummaryQueryOptions();
  lazy protocol witness table accessor for type UInt and conformance UInt();
  return OptionSet<>.formUnion(_:)();
}

uint64_t protocol witness for SetAlgebra.formIntersection(_:) in conformance HKSleepDaySummaryQueryOptions()
{
  lazy protocol witness table accessor for type HKSleepDaySummaryQueryOptions and conformance HKSleepDaySummaryQueryOptions();
  lazy protocol witness table accessor for type UInt and conformance UInt();
  return OptionSet<>.formIntersection(_:)();
}

uint64_t protocol witness for SetAlgebra.formSymmetricDifference(_:) in conformance HKSleepDaySummaryQueryOptions()
{
  lazy protocol witness table accessor for type HKSleepDaySummaryQueryOptions and conformance HKSleepDaySummaryQueryOptions();
  lazy protocol witness table accessor for type UInt and conformance UInt();
  return OptionSet<>.formSymmetricDifference(_:)();
}

uint64_t protocol witness for SetAlgebra.init() in conformance HKDeleteObjectOptions()
{
  lazy protocol witness table accessor for type HKDeleteObjectOptions and conformance HKDeleteObjectOptions();
  lazy protocol witness table accessor for type UInt and conformance UInt();
  return OptionSet<>.init()();
}

uint64_t protocol witness for SetAlgebra.contains(_:) in conformance HKDeleteObjectOptions()
{
  lazy protocol witness table accessor for type HKDeleteObjectOptions and conformance HKDeleteObjectOptions();
  return OptionSet<>.contains(_:)() & 1;
}

uint64_t protocol witness for SetAlgebra.union(_:) in conformance HKDeleteObjectOptions()
{
  lazy protocol witness table accessor for type HKDeleteObjectOptions and conformance HKDeleteObjectOptions();
  return OptionSet.union(_:)();
}

uint64_t protocol witness for SetAlgebra.intersection(_:) in conformance HKDeleteObjectOptions()
{
  lazy protocol witness table accessor for type HKDeleteObjectOptions and conformance HKDeleteObjectOptions();
  return OptionSet.intersection(_:)();
}

uint64_t protocol witness for SetAlgebra.symmetricDifference(_:) in conformance HKDeleteObjectOptions()
{
  lazy protocol witness table accessor for type HKDeleteObjectOptions and conformance HKDeleteObjectOptions();
  return OptionSet.symmetricDifference(_:)();
}

uint64_t protocol witness for SetAlgebra.insert(_:) in conformance HKDeleteObjectOptions()
{
  lazy protocol witness table accessor for type HKDeleteObjectOptions and conformance HKDeleteObjectOptions();
  return OptionSet<>.insert(_:)() & 1;
}

uint64_t protocol witness for SetAlgebra.remove(_:) in conformance HKDeleteObjectOptions()
{
  lazy protocol witness table accessor for type HKDeleteObjectOptions and conformance HKDeleteObjectOptions();
  return OptionSet<>.remove(_:)();
}

uint64_t protocol witness for SetAlgebra.update(with:) in conformance HKDeleteObjectOptions()
{
  lazy protocol witness table accessor for type HKDeleteObjectOptions and conformance HKDeleteObjectOptions();
  return OptionSet<>.update(with:)();
}

uint64_t protocol witness for SetAlgebra.formUnion(_:) in conformance HKDeleteObjectOptions()
{
  lazy protocol witness table accessor for type HKDeleteObjectOptions and conformance HKDeleteObjectOptions();
  lazy protocol witness table accessor for type UInt and conformance UInt();
  return OptionSet<>.formUnion(_:)();
}

uint64_t protocol witness for SetAlgebra.formIntersection(_:) in conformance HKDeleteObjectOptions()
{
  lazy protocol witness table accessor for type HKDeleteObjectOptions and conformance HKDeleteObjectOptions();
  lazy protocol witness table accessor for type UInt and conformance UInt();
  return OptionSet<>.formIntersection(_:)();
}

uint64_t protocol witness for SetAlgebra.formSymmetricDifference(_:) in conformance HKDeleteObjectOptions()
{
  lazy protocol witness table accessor for type HKDeleteObjectOptions and conformance HKDeleteObjectOptions();
  lazy protocol witness table accessor for type UInt and conformance UInt();
  return OptionSet<>.formSymmetricDifference(_:)();
}

uint64_t protocol witness for static CustomNSError.errorDomain.getter in conformance related decl 'e' for HKErrorCode()
{
  return static related decl 'e' for HKErrorCode.errorDomain.getter();
}

uint64_t static related decl 'e' for HKErrorCode.errorDomain.getter()
{
  id v0;
  id v2;
  uint64_t v3;

  v2 = (id)*MEMORY[0x24BDD2BE8];
  v0 = (id)*MEMORY[0x24BDD2BE8];
  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

uint64_t protocol witness for CustomNSError.errorCode.getter in conformance related decl 'e' for HKErrorCode()
{
  lazy protocol witness table accessor for type related decl 'e' for HKErrorCode and conformance related decl 'e' for HKErrorCode();
  return _BridgedStoredNSError.errorCode.getter();
}

uint64_t protocol witness for CustomNSError.errorUserInfo.getter in conformance related decl 'e' for HKErrorCode()
{
  lazy protocol witness table accessor for type related decl 'e' for HKErrorCode and conformance related decl 'e' for HKErrorCode();
  return _BridgedStoredNSError.errorUserInfo.getter();
}

uint64_t protocol witness for _ObjectiveCBridgeableError.init(_bridgedNSError:) in conformance related decl 'e' for HKErrorCode(void *a1)
{
  id v1;

  v1 = a1;
  lazy protocol witness table accessor for type related decl 'e' for HKErrorCode and conformance related decl 'e' for HKErrorCode();
  return _BridgedStoredNSError.init(_bridgedNSError:)();
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance related decl 'e' for HKErrorCode()
{
  lazy protocol witness table accessor for type related decl 'e' for HKErrorCode and conformance related decl 'e' for HKErrorCode();
  return _BridgedStoredNSError.hashValue.getter();
}

uint64_t _BridgedStoredNSError.hashValue.getter()
{
  id v1;
  uint64_t v2;

  v1 = (id)dispatch thunk of _BridgedStoredNSError._nsError.getter();
  v2 = NSObject.hashValue.getter();

  return v2;
}

uint64_t protocol witness for Hashable.hash(into:) in conformance related decl 'e' for HKErrorCode()
{
  lazy protocol witness table accessor for type related decl 'e' for HKErrorCode and conformance related decl 'e' for HKErrorCode();
  return _BridgedStoredNSError.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance related decl 'e' for HKErrorCode(Swift::Int a1)
{
  return Hashable._rawHashValue(seed:)(a1);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance HKStatisticsOptions()
{
  lazy protocol witness table accessor for type HKStatisticsOptions and conformance HKStatisticsOptions();
  return == infix<A>(_:_:)() & 1;
}

uint64_t protocol witness for ExpressibleByArrayLiteral.init(arrayLiteral:) in conformance HKStatisticsOptions()
{
  lazy protocol witness table accessor for type HKStatisticsOptions and conformance HKStatisticsOptions();
  return SetAlgebra<>.init(arrayLiteral:)();
}

__C::HKQueryOptions protocol witness for OptionSet.init(rawValue:) in conformance HKStatisticsOptions@<X0>(Swift::UInt *a1@<X0>, __C::HKQueryOptions *a2@<X8>)
{
  __C::HKQueryOptions result;

  result.rawValue = HKQueryOptions.init(rawValue:)(*a1).rawValue;
  a2->rawValue = result.rawValue;
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance HKQueryOptions()
{
  lazy protocol witness table accessor for type HKQueryOptions and conformance HKQueryOptions();
  return == infix<A>(_:_:)() & 1;
}

uint64_t protocol witness for ExpressibleByArrayLiteral.init(arrayLiteral:) in conformance HKQueryOptions()
{
  lazy protocol witness table accessor for type HKQueryOptions and conformance HKQueryOptions();
  return SetAlgebra<>.init(arrayLiteral:)();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance HKSleepDaySummaryQueryOptions()
{
  lazy protocol witness table accessor for type HKSleepDaySummaryQueryOptions and conformance HKSleepDaySummaryQueryOptions();
  return == infix<A>(_:_:)() & 1;
}

uint64_t protocol witness for ExpressibleByArrayLiteral.init(arrayLiteral:) in conformance HKSleepDaySummaryQueryOptions()
{
  lazy protocol witness table accessor for type HKSleepDaySummaryQueryOptions and conformance HKSleepDaySummaryQueryOptions();
  return SetAlgebra<>.init(arrayLiteral:)();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance HKDeleteObjectOptions()
{
  lazy protocol witness table accessor for type HKDeleteObjectOptions and conformance HKDeleteObjectOptions();
  return == infix<A>(_:_:)() & 1;
}

uint64_t protocol witness for ExpressibleByArrayLiteral.init(arrayLiteral:) in conformance HKDeleteObjectOptions()
{
  lazy protocol witness table accessor for type HKDeleteObjectOptions and conformance HKDeleteObjectOptions();
  return SetAlgebra<>.init(arrayLiteral:)();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance related decl 'e' for HKErrorCode()
{
  lazy protocol witness table accessor for type related decl 'e' for HKErrorCode and conformance related decl 'e' for HKErrorCode();
  return static _BridgedStoredNSError.== infix(_:_:)() & 1;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance HKErrorCode()
{
  lazy protocol witness table accessor for type HKErrorCode and conformance HKErrorCode();
  return == infix<A>(_:_:)() & 1;
}

__C::HKQueryOptions protocol witness for RawRepresentable.init(rawValue:) in conformance HKStatisticsOptions@<X0>(Swift::UInt *a1@<X0>, uint64_t a2@<X8>)
{
  __C::HKQueryOptions result;

  result.rawValue = HKQueryOptions.init(rawValue:)(*a1).rawValue;
  *(__C::HKQueryOptions *)a2 = result;
  *(_BYTE *)(a2 + 8) = 0;
  return result;
}

__C::HKQueryOptions protocol witness for RawRepresentable.rawValue.getter in conformance HKStatisticsOptions@<X0>(__C::HKQueryOptions *a1@<X8>)
{
  Swift::UInt *v1;
  __C::HKQueryOptions result;

  result.rawValue = HKQueryOptions.init(rawValue:)(*v1).rawValue;
  a1->rawValue = result.rawValue;
  return result;
}

uint64_t implicit closure #1 in default argument 0 of fatalError(_:file:line:)()
{
  swift_bridgeObjectRetain();
  return 0;
}

uint64_t type metadata accessor for MatchedMedNameResolutionResult()
{
  return objc_opt_self();
}

unint64_t type metadata accessor for HKHealthStore()
{
  unint64_t ObjCClassMetadata;
  uint64_t v2;

  v2 = lazy cache variable for type metadata for HKHealthStore;
  if (!lazy cache variable for type metadata for HKHealthStore)
  {
    objc_opt_self();
    ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for HKHealthStore);
    return ObjCClassMetadata;
  }
  return v2;
}

uint64_t type metadata accessor for HKDeleteObjectOptions()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t ForeignTypeMetadata;
  uint64_t v4;

  v4 = lazy cache variable for type metadata for HKDeleteObjectOptions;
  if (!lazy cache variable for type metadata for HKDeleteObjectOptions)
  {
    ForeignTypeMetadata = swift_getForeignTypeMetadata();
    v4 = ForeignTypeMetadata;
    if (!v0)
    {
      v1 = ForeignTypeMetadata;
      atomic_store(ForeignTypeMetadata, (unint64_t *)&lazy cache variable for type metadata for HKDeleteObjectOptions);
      return v1;
    }
  }
  return v4;
}

uint64_t type metadata accessor for HKMedicationDoseEventStatus()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t ForeignTypeMetadata;
  uint64_t v4;

  v4 = lazy cache variable for type metadata for HKMedicationDoseEventStatus;
  if (!lazy cache variable for type metadata for HKMedicationDoseEventStatus)
  {
    ForeignTypeMetadata = swift_getForeignTypeMetadata();
    v4 = ForeignTypeMetadata;
    if (!v0)
    {
      v1 = ForeignTypeMetadata;
      atomic_store(ForeignTypeMetadata, (unint64_t *)&lazy cache variable for type metadata for HKMedicationDoseEventStatus);
      return v1;
    }
  }
  return v4;
}

uint64_t type metadata accessor for HKWheelchairUse()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t ForeignTypeMetadata;
  uint64_t v4;

  v4 = lazy cache variable for type metadata for HKWheelchairUse;
  if (!lazy cache variable for type metadata for HKWheelchairUse)
  {
    ForeignTypeMetadata = swift_getForeignTypeMetadata();
    v4 = ForeignTypeMetadata;
    if (!v0)
    {
      v1 = ForeignTypeMetadata;
      atomic_store(ForeignTypeMetadata, (unint64_t *)&lazy cache variable for type metadata for HKWheelchairUse);
      return v1;
    }
  }
  return v4;
}

__n128 __swift_memcpy16_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for HKDayIndexRange(uint64_t a1, int a2)
{
  int v3;

  if (a2)
  {
    if (*(_BYTE *)(a1 + 16))
      v3 = *(_OWORD *)a1;
    else
      v3 = -1;
  }
  else
  {
    v3 = -1;
  }
  return (v3 + 1);
}

uint64_t storeEnumTagSinglePayload for HKDayIndexRange(uint64_t result, int a2, int a3)
{
  _BOOL4 v3;

  v3 = a3 != 0;
  if (a2)
  {
    *(_OWORD *)result = (a2 - 1);
    if (a3)
    {
      if (v3)
        *(_BYTE *)(result + 16) = 1;
      else
        __break(1u);
    }
  }
  else if (a3)
  {
    if (v3)
      *(_BYTE *)(result + 16) = 0;
    else
      __break(1u);
  }
  return result;
}

uint64_t type metadata accessor for HKDayIndexRange()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t ForeignTypeMetadata;
  uint64_t v4;

  v4 = lazy cache variable for type metadata for HKDayIndexRange;
  if (!lazy cache variable for type metadata for HKDayIndexRange)
  {
    ForeignTypeMetadata = swift_getForeignTypeMetadata();
    v4 = ForeignTypeMetadata;
    if (!v0)
    {
      v1 = ForeignTypeMetadata;
      atomic_store(ForeignTypeMetadata, (unint64_t *)&lazy cache variable for type metadata for HKDayIndexRange);
      return v1;
    }
  }
  return v4;
}

uint64_t type metadata accessor for HKMedicationDoseEventLogOrigin()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t ForeignTypeMetadata;
  uint64_t v4;

  v4 = lazy cache variable for type metadata for HKMedicationDoseEventLogOrigin;
  if (!lazy cache variable for type metadata for HKMedicationDoseEventLogOrigin)
  {
    ForeignTypeMetadata = swift_getForeignTypeMetadata();
    v4 = ForeignTypeMetadata;
    if (!v0)
    {
      v1 = ForeignTypeMetadata;
      atomic_store(ForeignTypeMetadata, (unint64_t *)&lazy cache variable for type metadata for HKMedicationDoseEventLogOrigin);
      return v1;
    }
  }
  return v4;
}

uint64_t type metadata accessor for HKStatisticsOptions()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t ForeignTypeMetadata;
  uint64_t v4;

  v4 = lazy cache variable for type metadata for HKStatisticsOptions;
  if (!lazy cache variable for type metadata for HKStatisticsOptions)
  {
    ForeignTypeMetadata = swift_getForeignTypeMetadata();
    v4 = ForeignTypeMetadata;
    if (!v0)
    {
      v1 = ForeignTypeMetadata;
      atomic_store(ForeignTypeMetadata, (unint64_t *)&lazy cache variable for type metadata for HKStatisticsOptions);
      return v1;
    }
  }
  return v4;
}

uint64_t type metadata accessor for related decl 'e' for HKErrorCode()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t ForeignTypeMetadata;
  uint64_t v4;

  v4 = lazy cache variable for type metadata for related decl 'e' for HKErrorCode;
  if (!lazy cache variable for type metadata for related decl 'e' for HKErrorCode)
  {
    ForeignTypeMetadata = swift_getForeignTypeMetadata();
    v4 = ForeignTypeMetadata;
    if (!v0)
    {
      v1 = ForeignTypeMetadata;
      atomic_store(ForeignTypeMetadata, (unint64_t *)&lazy cache variable for type metadata for related decl 'e' for HKErrorCode);
      return v1;
    }
  }
  return v4;
}

uint64_t type metadata accessor for HKManualEntryValidationResult()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t ForeignTypeMetadata;
  uint64_t v4;

  v4 = lazy cache variable for type metadata for HKManualEntryValidationResult;
  if (!lazy cache variable for type metadata for HKManualEntryValidationResult)
  {
    ForeignTypeMetadata = swift_getForeignTypeMetadata();
    v4 = ForeignTypeMetadata;
    if (!v0)
    {
      v1 = ForeignTypeMetadata;
      atomic_store(ForeignTypeMetadata, (unint64_t *)&lazy cache variable for type metadata for HKManualEntryValidationResult);
      return v1;
    }
  }
  return v4;
}

unint64_t base witness table accessor for Equatable in related decl 'e' for HKErrorCode()
{
  return lazy protocol witness table accessor for type related decl 'e' for HKErrorCode and conformance related decl 'e' for HKErrorCode();
}

unint64_t lazy protocol witness table accessor for type related decl 'e' for HKErrorCode and conformance related decl 'e' for HKErrorCode()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type related decl 'e' for HKErrorCode and conformance related decl 'e' for HKErrorCode;
  if (!lazy protocol witness table cache variable for type related decl 'e' for HKErrorCode and conformance related decl 'e' for HKErrorCode)
  {
    v0 = type metadata accessor for related decl 'e' for HKErrorCode();
    v1 = MEMORY[0x24957D92C](&protocol conformance descriptor for related decl 'e' for HKErrorCode, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type related decl 'e' for HKErrorCode and conformance related decl 'e' for HKErrorCode);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type related decl 'e' for HKErrorCode and conformance related decl 'e' for HKErrorCode;
  if (!lazy protocol witness table cache variable for type related decl 'e' for HKErrorCode and conformance related decl 'e' for HKErrorCode)
  {
    v0 = type metadata accessor for related decl 'e' for HKErrorCode();
    v1 = MEMORY[0x24957D92C](&protocol conformance descriptor for related decl 'e' for HKErrorCode, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type related decl 'e' for HKErrorCode and conformance related decl 'e' for HKErrorCode);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type related decl 'e' for HKErrorCode and conformance related decl 'e' for HKErrorCode;
  if (!lazy protocol witness table cache variable for type related decl 'e' for HKErrorCode and conformance related decl 'e' for HKErrorCode)
  {
    v0 = type metadata accessor for related decl 'e' for HKErrorCode();
    v1 = MEMORY[0x24957D92C](&protocol conformance descriptor for related decl 'e' for HKErrorCode, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type related decl 'e' for HKErrorCode and conformance related decl 'e' for HKErrorCode);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type related decl 'e' for HKErrorCode and conformance related decl 'e' for HKErrorCode;
  if (!lazy protocol witness table cache variable for type related decl 'e' for HKErrorCode and conformance related decl 'e' for HKErrorCode)
  {
    v0 = type metadata accessor for related decl 'e' for HKErrorCode();
    v1 = MEMORY[0x24957D92C](&protocol conformance descriptor for related decl 'e' for HKErrorCode, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type related decl 'e' for HKErrorCode and conformance related decl 'e' for HKErrorCode);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type related decl 'e' for HKErrorCode and conformance related decl 'e' for HKErrorCode;
  if (!lazy protocol witness table cache variable for type related decl 'e' for HKErrorCode and conformance related decl 'e' for HKErrorCode)
  {
    v0 = type metadata accessor for related decl 'e' for HKErrorCode();
    v1 = MEMORY[0x24957D92C](&protocol conformance descriptor for related decl 'e' for HKErrorCode, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type related decl 'e' for HKErrorCode and conformance related decl 'e' for HKErrorCode);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type related decl 'e' for HKErrorCode and conformance related decl 'e' for HKErrorCode;
  if (!lazy protocol witness table cache variable for type related decl 'e' for HKErrorCode and conformance related decl 'e' for HKErrorCode)
  {
    v0 = type metadata accessor for related decl 'e' for HKErrorCode();
    v1 = MEMORY[0x24957D92C](&protocol conformance descriptor for related decl 'e' for HKErrorCode, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type related decl 'e' for HKErrorCode and conformance related decl 'e' for HKErrorCode);
    return v1;
  }
  return v3;
}

unint64_t base witness table accessor for Error in related decl 'e' for HKErrorCode()
{
  return lazy protocol witness table accessor for type related decl 'e' for HKErrorCode and conformance related decl 'e' for HKErrorCode();
}

unint64_t base witness table accessor for RawRepresentable in HKStatisticsOptions()
{
  return lazy protocol witness table accessor for type HKStatisticsOptions and conformance HKStatisticsOptions();
}

unint64_t lazy protocol witness table accessor for type HKStatisticsOptions and conformance HKStatisticsOptions()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type HKStatisticsOptions and conformance HKStatisticsOptions;
  if (!lazy protocol witness table cache variable for type HKStatisticsOptions and conformance HKStatisticsOptions)
  {
    v0 = type metadata accessor for HKStatisticsOptions();
    v1 = MEMORY[0x24957D92C](&protocol conformance descriptor for HKStatisticsOptions, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type HKStatisticsOptions and conformance HKStatisticsOptions);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type HKStatisticsOptions and conformance HKStatisticsOptions;
  if (!lazy protocol witness table cache variable for type HKStatisticsOptions and conformance HKStatisticsOptions)
  {
    v0 = type metadata accessor for HKStatisticsOptions();
    v1 = MEMORY[0x24957D92C](&protocol conformance descriptor for HKStatisticsOptions, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type HKStatisticsOptions and conformance HKStatisticsOptions);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type HKStatisticsOptions and conformance HKStatisticsOptions;
  if (!lazy protocol witness table cache variable for type HKStatisticsOptions and conformance HKStatisticsOptions)
  {
    v0 = type metadata accessor for HKStatisticsOptions();
    v1 = MEMORY[0x24957D92C](&protocol conformance descriptor for HKStatisticsOptions, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type HKStatisticsOptions and conformance HKStatisticsOptions);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type HKStatisticsOptions and conformance HKStatisticsOptions;
  if (!lazy protocol witness table cache variable for type HKStatisticsOptions and conformance HKStatisticsOptions)
  {
    v0 = type metadata accessor for HKStatisticsOptions();
    v1 = MEMORY[0x24957D92C](&protocol conformance descriptor for HKStatisticsOptions, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type HKStatisticsOptions and conformance HKStatisticsOptions);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type HKStatisticsOptions and conformance HKStatisticsOptions;
  if (!lazy protocol witness table cache variable for type HKStatisticsOptions and conformance HKStatisticsOptions)
  {
    v0 = type metadata accessor for HKStatisticsOptions();
    v1 = MEMORY[0x24957D92C](&protocol conformance descriptor for HKStatisticsOptions, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type HKStatisticsOptions and conformance HKStatisticsOptions);
    return v1;
  }
  return v3;
}

unint64_t base witness table accessor for SetAlgebra in HKStatisticsOptions()
{
  return lazy protocol witness table accessor for type HKStatisticsOptions and conformance HKStatisticsOptions();
}

unint64_t base witness table accessor for RawRepresentable in HKDeleteObjectOptions()
{
  return lazy protocol witness table accessor for type HKDeleteObjectOptions and conformance HKDeleteObjectOptions();
}

unint64_t lazy protocol witness table accessor for type HKDeleteObjectOptions and conformance HKDeleteObjectOptions()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type HKDeleteObjectOptions and conformance HKDeleteObjectOptions;
  if (!lazy protocol witness table cache variable for type HKDeleteObjectOptions and conformance HKDeleteObjectOptions)
  {
    v0 = type metadata accessor for HKDeleteObjectOptions();
    v1 = MEMORY[0x24957D92C](&protocol conformance descriptor for HKDeleteObjectOptions, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type HKDeleteObjectOptions and conformance HKDeleteObjectOptions);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type HKDeleteObjectOptions and conformance HKDeleteObjectOptions;
  if (!lazy protocol witness table cache variable for type HKDeleteObjectOptions and conformance HKDeleteObjectOptions)
  {
    v0 = type metadata accessor for HKDeleteObjectOptions();
    v1 = MEMORY[0x24957D92C](&protocol conformance descriptor for HKDeleteObjectOptions, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type HKDeleteObjectOptions and conformance HKDeleteObjectOptions);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type HKDeleteObjectOptions and conformance HKDeleteObjectOptions;
  if (!lazy protocol witness table cache variable for type HKDeleteObjectOptions and conformance HKDeleteObjectOptions)
  {
    v0 = type metadata accessor for HKDeleteObjectOptions();
    v1 = MEMORY[0x24957D92C](&protocol conformance descriptor for HKDeleteObjectOptions, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type HKDeleteObjectOptions and conformance HKDeleteObjectOptions);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type HKDeleteObjectOptions and conformance HKDeleteObjectOptions;
  if (!lazy protocol witness table cache variable for type HKDeleteObjectOptions and conformance HKDeleteObjectOptions)
  {
    v0 = type metadata accessor for HKDeleteObjectOptions();
    v1 = MEMORY[0x24957D92C](&protocol conformance descriptor for HKDeleteObjectOptions, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type HKDeleteObjectOptions and conformance HKDeleteObjectOptions);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type HKDeleteObjectOptions and conformance HKDeleteObjectOptions;
  if (!lazy protocol witness table cache variable for type HKDeleteObjectOptions and conformance HKDeleteObjectOptions)
  {
    v0 = type metadata accessor for HKDeleteObjectOptions();
    v1 = MEMORY[0x24957D92C](&protocol conformance descriptor for HKDeleteObjectOptions, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type HKDeleteObjectOptions and conformance HKDeleteObjectOptions);
    return v1;
  }
  return v3;
}

unint64_t base witness table accessor for SetAlgebra in HKDeleteObjectOptions()
{
  return lazy protocol witness table accessor for type HKDeleteObjectOptions and conformance HKDeleteObjectOptions();
}

unint64_t base witness table accessor for Equatable in HKDeleteObjectOptions()
{
  return lazy protocol witness table accessor for type HKDeleteObjectOptions and conformance HKDeleteObjectOptions();
}

unint64_t base witness table accessor for ExpressibleByArrayLiteral in HKDeleteObjectOptions()
{
  return lazy protocol witness table accessor for type HKDeleteObjectOptions and conformance HKDeleteObjectOptions();
}

unint64_t base witness table accessor for Equatable in HKStatisticsOptions()
{
  return lazy protocol witness table accessor for type HKStatisticsOptions and conformance HKStatisticsOptions();
}

unint64_t base witness table accessor for ExpressibleByArrayLiteral in HKStatisticsOptions()
{
  return lazy protocol witness table accessor for type HKStatisticsOptions and conformance HKStatisticsOptions();
}

unint64_t base witness table accessor for CustomNSError in related decl 'e' for HKErrorCode()
{
  return lazy protocol witness table accessor for type related decl 'e' for HKErrorCode and conformance related decl 'e' for HKErrorCode();
}

unint64_t base witness table accessor for _ObjectiveCBridgeableError in related decl 'e' for HKErrorCode()
{
  return lazy protocol witness table accessor for type related decl 'e' for HKErrorCode and conformance related decl 'e' for HKErrorCode();
}

unint64_t base witness table accessor for Hashable in related decl 'e' for HKErrorCode()
{
  return lazy protocol witness table accessor for type related decl 'e' for HKErrorCode and conformance related decl 'e' for HKErrorCode();
}

unint64_t associated type witness table accessor for _BridgedStoredNSError.Code : _ErrorCodeProtocol in related decl 'e' for HKErrorCode()
{
  return lazy protocol witness table accessor for type HKErrorCode and conformance HKErrorCode();
}

unint64_t lazy protocol witness table accessor for type HKErrorCode and conformance HKErrorCode()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type HKErrorCode and conformance HKErrorCode;
  if (!lazy protocol witness table cache variable for type HKErrorCode and conformance HKErrorCode)
  {
    v0 = type metadata accessor for HKErrorCode();
    v1 = MEMORY[0x24957D92C](&protocol conformance descriptor for HKErrorCode, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type HKErrorCode and conformance HKErrorCode);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type HKErrorCode and conformance HKErrorCode;
  if (!lazy protocol witness table cache variable for type HKErrorCode and conformance HKErrorCode)
  {
    v0 = type metadata accessor for HKErrorCode();
    v1 = MEMORY[0x24957D92C]("ю.\n,i", v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type HKErrorCode and conformance HKErrorCode);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type HKErrorCode and conformance HKErrorCode;
  if (!lazy protocol witness table cache variable for type HKErrorCode and conformance HKErrorCode)
  {
    v0 = type metadata accessor for HKErrorCode();
    v1 = MEMORY[0x24957D92C](&protocol conformance descriptor for HKErrorCode, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type HKErrorCode and conformance HKErrorCode);
    return v1;
  }
  return v3;
}

uint64_t type metadata accessor for HKErrorCode()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t ForeignTypeMetadata;
  uint64_t v4;

  v4 = lazy cache variable for type metadata for HKErrorCode;
  if (!lazy cache variable for type metadata for HKErrorCode)
  {
    ForeignTypeMetadata = swift_getForeignTypeMetadata();
    v4 = ForeignTypeMetadata;
    if (!v0)
    {
      v1 = ForeignTypeMetadata;
      atomic_store(ForeignTypeMetadata, (unint64_t *)&lazy cache variable for type metadata for HKErrorCode);
      return v1;
    }
  }
  return v4;
}

unint64_t associated type witness table accessor for _BridgedStoredNSError.Code : RawRepresentable in related decl 'e' for HKErrorCode()
{
  return lazy protocol witness table accessor for type HKErrorCode and conformance HKErrorCode();
}

unint64_t associated type witness table accessor for _BridgedStoredNSError.Code.RawRepresentable.RawValue : FixedWidthInteger in related decl 'e' for HKErrorCode()
{
  return lazy protocol witness table accessor for type Int and conformance Int();
}

unint64_t lazy protocol witness table accessor for type Int and conformance Int()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type Int and conformance Int;
  if (!lazy protocol witness table cache variable for type Int and conformance Int)
  {
    v0 = MEMORY[0x24957D92C](MEMORY[0x24BEE17C8], MEMORY[0x24BEE1768]);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type Int and conformance Int);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type Int and conformance Int;
  if (!lazy protocol witness table cache variable for type Int and conformance Int)
  {
    v0 = MEMORY[0x24957D92C](MEMORY[0x24BEE17B0], MEMORY[0x24BEE1768]);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type Int and conformance Int);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type Int and conformance Int;
  if (!lazy protocol witness table cache variable for type Int and conformance Int)
  {
    v0 = MEMORY[0x24957D92C](MEMORY[0x24BEE1790], MEMORY[0x24BEE1768]);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type Int and conformance Int);
    return v0;
  }
  return v2;
}

unint64_t base witness table accessor for Equatable in HKErrorCode()
{
  return lazy protocol witness table accessor for type HKErrorCode and conformance HKErrorCode();
}

unint64_t associated type witness table accessor for _ErrorCodeProtocol._ErrorType : _BridgedStoredNSError in HKErrorCode()
{
  return lazy protocol witness table accessor for type related decl 'e' for HKErrorCode and conformance related decl 'e' for HKErrorCode();
}

unint64_t lazy protocol witness table accessor for type HKManualEntryValidationResult and conformance HKManualEntryValidationResult()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type HKManualEntryValidationResult and conformance HKManualEntryValidationResult;
  if (!lazy protocol witness table cache variable for type HKManualEntryValidationResult and conformance HKManualEntryValidationResult)
  {
    v0 = type metadata accessor for HKManualEntryValidationResult();
    v1 = MEMORY[0x24957D92C](&protocol conformance descriptor for HKManualEntryValidationResult, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type HKManualEntryValidationResult and conformance HKManualEntryValidationResult);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type HKManualEntryValidationResult and conformance HKManualEntryValidationResult;
  if (!lazy protocol witness table cache variable for type HKManualEntryValidationResult and conformance HKManualEntryValidationResult)
  {
    v0 = type metadata accessor for HKManualEntryValidationResult();
    v1 = MEMORY[0x24957D92C](&protocol conformance descriptor for HKManualEntryValidationResult, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type HKManualEntryValidationResult and conformance HKManualEntryValidationResult);
    return v1;
  }
  return v3;
}

unint64_t lazy protocol witness table accessor for type UInt and conformance UInt()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type UInt and conformance UInt;
  if (!lazy protocol witness table cache variable for type UInt and conformance UInt)
  {
    v0 = MEMORY[0x24957D92C](MEMORY[0x24BEE1EC8], MEMORY[0x24BEE1E88]);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type UInt and conformance UInt);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type UInt and conformance UInt;
  if (!lazy protocol witness table cache variable for type UInt and conformance UInt)
  {
    v0 = MEMORY[0x24957D92C](MEMORY[0x24BEE1EC0], MEMORY[0x24BEE1E88]);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type UInt and conformance UInt);
    return v0;
  }
  return v2;
}

unint64_t lazy protocol witness table accessor for type HKMedicationDoseEventStatus and conformance HKMedicationDoseEventStatus()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type HKMedicationDoseEventStatus and conformance HKMedicationDoseEventStatus;
  if (!lazy protocol witness table cache variable for type HKMedicationDoseEventStatus and conformance HKMedicationDoseEventStatus)
  {
    v0 = type metadata accessor for HKMedicationDoseEventStatus();
    v1 = MEMORY[0x24957D92C](&protocol conformance descriptor for HKMedicationDoseEventStatus, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type HKMedicationDoseEventStatus and conformance HKMedicationDoseEventStatus);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type HKMedicationDoseEventStatus and conformance HKMedicationDoseEventStatus;
  if (!lazy protocol witness table cache variable for type HKMedicationDoseEventStatus and conformance HKMedicationDoseEventStatus)
  {
    v0 = type metadata accessor for HKMedicationDoseEventStatus();
    v1 = MEMORY[0x24957D92C](&protocol conformance descriptor for HKMedicationDoseEventStatus, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type HKMedicationDoseEventStatus and conformance HKMedicationDoseEventStatus);
    return v1;
  }
  return v3;
}

uint64_t type metadata accessor for HKSiriAuthorizationStatus()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t ForeignTypeMetadata;
  uint64_t v4;

  v4 = lazy cache variable for type metadata for HKSiriAuthorizationStatus;
  if (!lazy cache variable for type metadata for HKSiriAuthorizationStatus)
  {
    ForeignTypeMetadata = swift_getForeignTypeMetadata();
    v4 = ForeignTypeMetadata;
    if (!v0)
    {
      v1 = ForeignTypeMetadata;
      atomic_store(ForeignTypeMetadata, (unint64_t *)&lazy cache variable for type metadata for HKSiriAuthorizationStatus);
      return v1;
    }
  }
  return v4;
}

uint64_t type metadata accessor for HKSleepDaySummaryQueryOptions()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t ForeignTypeMetadata;
  uint64_t v4;

  v4 = lazy cache variable for type metadata for HKSleepDaySummaryQueryOptions;
  if (!lazy cache variable for type metadata for HKSleepDaySummaryQueryOptions)
  {
    ForeignTypeMetadata = swift_getForeignTypeMetadata();
    v4 = ForeignTypeMetadata;
    if (!v0)
    {
      v1 = ForeignTypeMetadata;
      atomic_store(ForeignTypeMetadata, (unint64_t *)&lazy cache variable for type metadata for HKSleepDaySummaryQueryOptions);
      return v1;
    }
  }
  return v4;
}

uint64_t type metadata accessor for HKQueryOptions()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t ForeignTypeMetadata;
  uint64_t v4;

  v4 = lazy cache variable for type metadata for HKQueryOptions;
  if (!lazy cache variable for type metadata for HKQueryOptions)
  {
    ForeignTypeMetadata = swift_getForeignTypeMetadata();
    v4 = ForeignTypeMetadata;
    if (!v0)
    {
      v1 = ForeignTypeMetadata;
      atomic_store(ForeignTypeMetadata, (unint64_t *)&lazy cache variable for type metadata for HKQueryOptions);
      return v1;
    }
  }
  return v4;
}

unint64_t base witness table accessor for RawRepresentable in HKQueryOptions()
{
  return lazy protocol witness table accessor for type HKQueryOptions and conformance HKQueryOptions();
}

unint64_t lazy protocol witness table accessor for type HKQueryOptions and conformance HKQueryOptions()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type HKQueryOptions and conformance HKQueryOptions;
  if (!lazy protocol witness table cache variable for type HKQueryOptions and conformance HKQueryOptions)
  {
    v0 = type metadata accessor for HKQueryOptions();
    v1 = MEMORY[0x24957D92C](&protocol conformance descriptor for HKQueryOptions, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type HKQueryOptions and conformance HKQueryOptions);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type HKQueryOptions and conformance HKQueryOptions;
  if (!lazy protocol witness table cache variable for type HKQueryOptions and conformance HKQueryOptions)
  {
    v0 = type metadata accessor for HKQueryOptions();
    v1 = MEMORY[0x24957D92C](&protocol conformance descriptor for HKQueryOptions, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type HKQueryOptions and conformance HKQueryOptions);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type HKQueryOptions and conformance HKQueryOptions;
  if (!lazy protocol witness table cache variable for type HKQueryOptions and conformance HKQueryOptions)
  {
    v0 = type metadata accessor for HKQueryOptions();
    v1 = MEMORY[0x24957D92C](&protocol conformance descriptor for HKQueryOptions, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type HKQueryOptions and conformance HKQueryOptions);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type HKQueryOptions and conformance HKQueryOptions;
  if (!lazy protocol witness table cache variable for type HKQueryOptions and conformance HKQueryOptions)
  {
    v0 = type metadata accessor for HKQueryOptions();
    v1 = MEMORY[0x24957D92C](&protocol conformance descriptor for HKQueryOptions, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type HKQueryOptions and conformance HKQueryOptions);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type HKQueryOptions and conformance HKQueryOptions;
  if (!lazy protocol witness table cache variable for type HKQueryOptions and conformance HKQueryOptions)
  {
    v0 = type metadata accessor for HKQueryOptions();
    v1 = MEMORY[0x24957D92C]("ٍ.\n<g", v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type HKQueryOptions and conformance HKQueryOptions);
    return v1;
  }
  return v3;
}

unint64_t base witness table accessor for SetAlgebra in HKQueryOptions()
{
  return lazy protocol witness table accessor for type HKQueryOptions and conformance HKQueryOptions();
}

unint64_t base witness table accessor for RawRepresentable in HKSleepDaySummaryQueryOptions()
{
  return lazy protocol witness table accessor for type HKSleepDaySummaryQueryOptions and conformance HKSleepDaySummaryQueryOptions();
}

unint64_t lazy protocol witness table accessor for type HKSleepDaySummaryQueryOptions and conformance HKSleepDaySummaryQueryOptions()
{
  uint64_t Options;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type HKSleepDaySummaryQueryOptions and conformance HKSleepDaySummaryQueryOptions;
  if (!lazy protocol witness table cache variable for type HKSleepDaySummaryQueryOptions and conformance HKSleepDaySummaryQueryOptions)
  {
    Options = type metadata accessor for HKSleepDaySummaryQueryOptions();
    v1 = MEMORY[0x24957D92C](&protocol conformance descriptor for HKSleepDaySummaryQueryOptions, Options);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type HKSleepDaySummaryQueryOptions and conformance HKSleepDaySummaryQueryOptions);
    return v1;
  }
  return v3;
}

{
  uint64_t Options;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type HKSleepDaySummaryQueryOptions and conformance HKSleepDaySummaryQueryOptions;
  if (!lazy protocol witness table cache variable for type HKSleepDaySummaryQueryOptions and conformance HKSleepDaySummaryQueryOptions)
  {
    Options = type metadata accessor for HKSleepDaySummaryQueryOptions();
    v1 = MEMORY[0x24957D92C](&protocol conformance descriptor for HKSleepDaySummaryQueryOptions, Options);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type HKSleepDaySummaryQueryOptions and conformance HKSleepDaySummaryQueryOptions);
    return v1;
  }
  return v3;
}

{
  uint64_t Options;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type HKSleepDaySummaryQueryOptions and conformance HKSleepDaySummaryQueryOptions;
  if (!lazy protocol witness table cache variable for type HKSleepDaySummaryQueryOptions and conformance HKSleepDaySummaryQueryOptions)
  {
    Options = type metadata accessor for HKSleepDaySummaryQueryOptions();
    v1 = MEMORY[0x24957D92C](&protocol conformance descriptor for HKSleepDaySummaryQueryOptions, Options);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type HKSleepDaySummaryQueryOptions and conformance HKSleepDaySummaryQueryOptions);
    return v1;
  }
  return v3;
}

{
  uint64_t Options;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type HKSleepDaySummaryQueryOptions and conformance HKSleepDaySummaryQueryOptions;
  if (!lazy protocol witness table cache variable for type HKSleepDaySummaryQueryOptions and conformance HKSleepDaySummaryQueryOptions)
  {
    Options = type metadata accessor for HKSleepDaySummaryQueryOptions();
    v1 = MEMORY[0x24957D92C](&protocol conformance descriptor for HKSleepDaySummaryQueryOptions, Options);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type HKSleepDaySummaryQueryOptions and conformance HKSleepDaySummaryQueryOptions);
    return v1;
  }
  return v3;
}

{
  uint64_t Options;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type HKSleepDaySummaryQueryOptions and conformance HKSleepDaySummaryQueryOptions;
  if (!lazy protocol witness table cache variable for type HKSleepDaySummaryQueryOptions and conformance HKSleepDaySummaryQueryOptions)
  {
    Options = type metadata accessor for HKSleepDaySummaryQueryOptions();
    v1 = MEMORY[0x24957D92C](&protocol conformance descriptor for HKSleepDaySummaryQueryOptions, Options);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type HKSleepDaySummaryQueryOptions and conformance HKSleepDaySummaryQueryOptions);
    return v1;
  }
  return v3;
}

unint64_t base witness table accessor for SetAlgebra in HKSleepDaySummaryQueryOptions()
{
  return lazy protocol witness table accessor for type HKSleepDaySummaryQueryOptions and conformance HKSleepDaySummaryQueryOptions();
}

unint64_t base witness table accessor for Equatable in HKSleepDaySummaryQueryOptions()
{
  return lazy protocol witness table accessor for type HKSleepDaySummaryQueryOptions and conformance HKSleepDaySummaryQueryOptions();
}

unint64_t base witness table accessor for ExpressibleByArrayLiteral in HKSleepDaySummaryQueryOptions()
{
  return lazy protocol witness table accessor for type HKSleepDaySummaryQueryOptions and conformance HKSleepDaySummaryQueryOptions();
}

unint64_t base witness table accessor for Equatable in HKQueryOptions()
{
  return lazy protocol witness table accessor for type HKQueryOptions and conformance HKQueryOptions();
}

unint64_t base witness table accessor for ExpressibleByArrayLiteral in HKQueryOptions()
{
  return lazy protocol witness table accessor for type HKQueryOptions and conformance HKQueryOptions();
}

uint64_t getFormattedTimeString(time:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  const void *v4;
  void *v5;
  char *v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  Class v11;
  id v12;
  Class isa;
  void (*v14)(char *, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  unint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  Class v28;
  const void *v29;
  char *v30;
  NSDateFormatter v31;

  v20 = a1;
  v30 = 0;
  v29 = 0;
  v28 = 0;
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  v19 = (*(_QWORD *)(*(_QWORD *)(v1 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v1);
  v27 = (uint64_t)&v9 - v19;
  v26 = type metadata accessor for Date();
  v25 = *(_QWORD *)(v26 - 8);
  v21 = (*(_QWORD *)(v25 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2 = MEMORY[0x24BDAC7A8](v20);
  v22 = (char *)&v9 - v21;
  v23 = (v3 + 15) & 0xFFFFFFFFFFFFFFF0;
  v4 = (const void *)MEMORY[0x24BDAC7A8](v2);
  v24 = (char *)&v9 - v23;
  v30 = (char *)&v9 - v23;
  v29 = v4;
  outlined init with copy of Date?(v4, v5);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v25 + 48))(v27, 1, v26) == 1)
  {
    v10 = 0;
    outlined destroy of Date?(v27);
    v17 = v10;
    v18 = v10;
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v25 + 32))(v24, v27, v26);
    type metadata accessor for NSDateFormatter();
    v31 = NSDateFormatter.__allocating_init()();
    v6 = v22;
    isa = v31.super.super.isa;
    v28 = v31.super.super.isa;
    -[objc_class setTimeStyle:](v31.super.super.isa, sel_setTimeStyle_, 1, v31._counter);
    (*(void (**)(char *, char *, uint64_t))(v25 + 16))(v6, v24, v26);
    v11 = Date._bridgeToObjectiveC()().super.isa;
    v14 = *(void (**)(char *, uint64_t))(v25 + 8);
    v14(v22, v26);
    v12 = -[objc_class stringFromDate:](isa, sel_stringFromDate_, v11);

    v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v16 = v7;

    v14(v24, v26);
    v17 = v15;
    v18 = v16;
  }
  return v17;
}

uint64_t __swift_instantiateConcreteTypeFromMangledName(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v4;

  v4 = *a1;
  if (*a1 < 0)
  {
    v2 = MEMORY[0x24957D914]((char *)a1 + (int)*a1, -(*a1 >> 32), 0);
    *a1 = v2;
    return v2;
  }
  return v4;
}

void *outlined init with copy of Date?(const void *a1, void *a2)
{
  uint64_t v2;
  uint64_t v6;
  uint64_t v7;

  v6 = type metadata accessor for Date();
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t))(v7 + 48))(a1, 1))
  {
    v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
    memcpy(a2, a1, *(_QWORD *)(*(_QWORD *)(v2 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v7 + 16))(a2, a1, v6);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a2, 0, 1, v6);
  }
  return a2;
}

uint64_t outlined destroy of Date?(uint64_t a1)
{
  uint64_t v3;
  uint64_t v4;

  v3 = type metadata accessor for Date();
  v4 = *(_QWORD *)(v3 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t))(v4 + 48))(a1, 1))
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(a1, v3);
  return a1;
}

unint64_t type metadata accessor for NSDateFormatter()
{
  unint64_t ObjCClassMetadata;
  uint64_t v2;

  v2 = lazy cache variable for type metadata for NSDateFormatter;
  if (!lazy cache variable for type metadata for NSDateFormatter)
  {
    objc_opt_self();
    ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for NSDateFormatter);
    return ObjCClassMetadata;
  }
  return v2;
}

NSDateFormatter __swiftcall NSDateFormatter.__allocating_init()()
{
  id v0;
  objc_class *v1;
  NSMutableDictionary *v2;
  __CFDateFormatter *v3;
  NSUInteger v4;
  NSDateFormatter result;

  v0 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  v1 = (objc_class *)@nonobjc NSDateFormatter.init()();
  result._counter = v4;
  result._formatter = v3;
  result._attributes = v2;
  result.super.super.isa = v1;
  return result;
}

uint64_t Date.startOfDay.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;

  v5 = a1;
  v9 = 0;
  v8 = type metadata accessor for Calendar();
  v6 = *(_QWORD *)(v8 - 8);
  v4 = (*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v8);
  v7 = (char *)&v3 - v4;
  v9 = v1;
  static Calendar.current.getter();
  Calendar.startOfDay(for:)();
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v7, v8);
}

uint64_t Date.endOfDay.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v9;
  char v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  const char *v33;
  const char *v34;
  const char *v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t *v47;
  int v48;
  int v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  void (*v56)(char *, uint64_t);
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  unsigned int v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;

  v32 = a1;
  v33 = "Fatal error";
  v34 = "Unexpectedly found nil while unwrapping an Optional value";
  v35 = "SiriWellnessIntents/DateFormatter.swift";
  v65 = 0;
  v64 = 0;
  v46 = 0;
  v63 = type metadata accessor for Date();
  v60 = *(_QWORD *)(v63 - 8);
  v36 = (*(_QWORD *)(v60 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](0);
  v52 = (uint64_t)&v31 - v36;
  v59 = type metadata accessor for Calendar();
  v57 = *(_QWORD *)(v59 - 8);
  v37 = (*(_QWORD *)(v57 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v59);
  v58 = (char *)&v31 - v37;
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  v38 = (*(_QWORD *)(*(_QWORD *)(v1 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v1);
  v61 = (char *)&v31 - v38;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TimeZone?);
  v39 = (*(_QWORD *)(*(_QWORD *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v2);
  v45 = (char *)&v31 - v39;
  v40 = (*(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Calendar?)
                               - 8)
                   + 64)
       + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v46);
  v44 = (char *)&v31 - v40;
  v55 = type metadata accessor for DateComponents();
  v53 = *(_QWORD *)(v55 - 8);
  v42 = *(_QWORD *)(v53 + 64);
  v41 = (v42 + 15) & 0xFFFFFFFFFFFFFFF0;
  v3 = MEMORY[0x24BDAC7A8](v44);
  v54 = (char *)&v31 - v41;
  v43 = (v42 + 15) & 0xFFFFFFFFFFFFFFF0;
  v4 = MEMORY[0x24BDAC7A8](v3);
  v51 = (char *)&v31 - v43;
  v65 = (char *)&v31 - v43;
  v64 = v50;
  v6 = *(void (**)(uint64_t, uint64_t))(v5 + 56);
  v62 = 1;
  v6(v4, 1);
  v7 = type metadata accessor for TimeZone();
  (*(void (**)(char *, _QWORD))(*(_QWORD *)(v7 - 8) + 56))(v45, v62);
  v47 = &v9;
  v9 = 0;
  v48 = 1;
  v10 = 1;
  v11 = 0;
  v12 = 1;
  v13 = 0;
  v14 = 1;
  v15 = 0;
  v16 = 1;
  v17 = 0;
  v18 = 1;
  v19 = 0;
  v20 = 1;
  v21 = 0;
  v22 = 1;
  v23 = 0;
  v24 = 1;
  v25 = 0;
  v26 = 1;
  v27 = 0;
  LOBYTE(v28) = 1;
  v29 = 0;
  v30 = 1;
  DateComponents.init(calendar:timeZone:era:year:month:day:hour:minute:second:nanosecond:weekday:weekdayOrdinal:quarter:weekOfMonth:weekOfYear:yearForWeekOfYear:)();
  v49 = 0;
  DateComponents.day.setter();
  DateComponents.second.setter();
  static Calendar.current.getter();
  (*(void (**)(char *, char *, uint64_t))(v53 + 16))(v54, v51, v55);
  Date.startOfDay.getter(v52);
  default argument 2 of Calendar.date(byAdding:to:wrappingComponents:)();
  Calendar.date(byAdding:to:wrappingComponents:)();
  (*(void (**)(uint64_t, uint64_t))(v60 + 8))(v52, v63);
  v56 = *(void (**)(char *, uint64_t))(v53 + 8);
  v56(v54, v55);
  (*(void (**)(char *, uint64_t))(v57 + 8))(v58, v59);
  if ((*(unsigned int (**)(char *, _QWORD, uint64_t))(v60 + 48))(v61, v62, v63) == 1)
  {
    LOBYTE(v27) = 2;
    v28 = 27;
    LODWORD(v29) = 0;
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  (*(void (**)(uint64_t, char *, uint64_t))(v60 + 32))(v32, v61, v63);
  return ((uint64_t (*)(char *, uint64_t))v56)(v51, v55);
}

uint64_t default argument 2 of Calendar.date(byAdding:to:wrappingComponents:)()
{
  return 0;
}

id @nonobjc NSDateFormatter.init()()
{
  void *v0;

  return objc_msgSend(v0, sel_init);
}

id LogQuantityIntent.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

id LogQuantityIntent.init()()
{
  id v0;
  id v2;
  objc_super v3;
  id v4;

  v4 = 0;
  v3.receiver = 0;
  v3.super_class = (Class)type metadata accessor for LogQuantityIntent();
  v2 = objc_msgSendSuper2(&v3, sel_init);
  v0 = v2;
  v4 = v2;

  return v2;
}

uint64_t type metadata accessor for LogQuantityIntent()
{
  return objc_opt_self();
}

id LogQuantityIntent.__allocating_init(coder:)(void *a1)
{
  objc_class *v1;
  id v4;

  v4 = objc_msgSend(objc_allocWithZone(v1), sel_initWithCoder_, a1);

  return v4;
}

id LogQuantityIntent.init(coder:)(void *a1)
{
  id v1;
  id v5;
  objc_super v6;
  void *v7;
  id v8;

  v8 = 0;
  v7 = a1;
  v6.receiver = 0;
  v6.super_class = (Class)type metadata accessor for LogQuantityIntent();
  v5 = objc_msgSendSuper2(&v6, sel_initWithCoder_, a1);
  if (v5)
  {
    v1 = v5;
    v8 = v5;

    return v5;
  }
  else
  {

    return 0;
  }
}

id LogQuantityIntent.__allocating_init(identifier:backingStore:)(uint64_t a1, uint64_t a2, void *a3)
{
  objc_class *v3;
  id v5;
  uint64_t v6;
  void *v7;
  id v11;

  v11 = objc_allocWithZone(v3);
  if (a2)
  {
    v6 = MEMORY[0x24957CFB4](a1);
    swift_bridgeObjectRelease();
    v7 = (void *)v6;
  }
  else
  {
    v7 = 0;
  }
  v5 = objc_msgSend(v11, sel_initWithIdentifier_backingStore_);

  return v5;
}

id LogQuantityIntent.init(identifier:backingStore:)(uint64_t a1, uint64_t a2, void *a3)
{
  id v3;
  id v5;
  uint64_t v6;
  void *v7;
  objc_super v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  id v15;

  v15 = 0;
  v13 = a1;
  v14 = a2;
  v12 = a3;
  swift_bridgeObjectRetain();
  if (a2)
  {
    v6 = MEMORY[0x24957CFB4](a1);
    swift_bridgeObjectRelease();
    v7 = (void *)v6;
  }
  else
  {
    v7 = 0;
  }
  v11.receiver = 0;
  v11.super_class = (Class)type metadata accessor for LogQuantityIntent();
  v5 = objc_msgSendSuper2(&v11, sel_initWithIdentifier_backingStore_, v7, a3);

  v3 = v5;
  v15 = v5;

  swift_bridgeObjectRelease();
  return v5;
}

id LogQuantityIntent.__allocating_init(domain:verb:parametersByName:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  objc_class *v5;
  id v6;
  id v8;
  id v9;
  Class isa;
  id v13;
  void *v16;
  void *v18;

  v13 = objc_allocWithZone(v5);
  v16 = (void *)MEMORY[0x24957CFB4](a1, a2);
  v18 = (void *)MEMORY[0x24957CFB4](a3, a4);
  if (a5)
  {
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    v6 = objc_msgSend(v13, sel_initWithDomain_verb_parametersByName_, v16, v18, isa);
  }
  else
  {
    v6 = objc_msgSend(v13, sel_initWithDomain_verb_parametersByName_, v16, v18, 0);
  }
  v9 = v6;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v9;
}

id LogQuantityIntent.init(domain:verb:parametersByName:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  id v5;
  id v7;
  Class isa;
  Class v9;
  id v12;
  void *v15;
  objc_super v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id v23;

  v23 = 0;
  v21 = a1;
  v22 = a2;
  v19 = a3;
  v20 = a4;
  v18 = a5;
  swift_bridgeObjectRetain();
  v12 = (id)MEMORY[0x24957CFB4](a1, a2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v15 = (void *)MEMORY[0x24957CFB4](a3, a4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  if (a5)
  {
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    v9 = isa;
  }
  else
  {
    v9 = 0;
  }
  v17.receiver = 0;
  v17.super_class = (Class)type metadata accessor for LogQuantityIntent();
  v7 = objc_msgSendSuper2(&v17, sel_initWithDomain_verb_parametersByName_, v12, v15, v9);

  v5 = v7;
  v23 = v7;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return v7;
}

id LogQuantityIntent.__deallocating_deinit()
{
  void *v0;
  objc_super v2;
  void *v3;

  v3 = v0;
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for LogQuantityIntent();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t LogQuantityIntentResponseCode.init(rawValue:)(uint64_t a1)
{
  switch(a1)
  {
    case 0:
      return 0;
    case 1:
      return 1;
    case 2:
      return 2;
    case 3:
      return 3;
    case 4:
      return 4;
    case 5:
      return 5;
    case 6:
      return 6;
    case 100:
      return 100;
    case 101:
      return 101;
    case 102:
      return 102;
    case 103:
      return 103;
  }
  return 0;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance LogQuantityIntentResponseCode()
{
  lazy protocol witness table accessor for type LogQuantityIntentResponseCode and conformance LogQuantityIntentResponseCode();
  return == infix<A>(_:_:)() & 1;
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance LogQuantityIntentResponseCode()
{
  lazy protocol witness table accessor for type LogQuantityIntentResponseCode and conformance LogQuantityIntentResponseCode();
  return RawRepresentable<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance LogQuantityIntentResponseCode()
{
  lazy protocol witness table accessor for type LogQuantityIntentResponseCode and conformance LogQuantityIntentResponseCode();
  return RawRepresentable<>.hash(into:)();
}

uint64_t protocol witness for Hashable._rawHashValue(seed:) in conformance LogQuantityIntentResponseCode()
{
  lazy protocol witness table accessor for type LogQuantityIntentResponseCode and conformance LogQuantityIntentResponseCode();
  return RawRepresentable<>._rawHashValue(seed:)();
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance LogQuantityIntentResponseCode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  char v3;

  result = LogQuantityIntentResponseCode.init(rawValue:)(*a1);
  *(_QWORD *)a2 = result;
  *(_BYTE *)(a2 + 8) = v3 & 1;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance LogQuantityIntentResponseCode(_QWORD *a1@<X8>)
{
  uint64_t v1;

  LogQuantityIntentResponseCode.rawValue.getter();
  *a1 = v1;
}

uint64_t LogQuantityIntentResponse.code.getter()
{
  uint64_t v0;
  uint64_t *v2;
  uint64_t v3;

  v2 = (uint64_t *)(v0 + OBJC_IVAR___LogQuantityIntentResponse_code);
  swift_beginAccess();
  v3 = *v2;
  swift_endAccess();
  return v3;
}

uint64_t LogQuantityIntentResponse.code.setter(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)(v1 + OBJC_IVAR___LogQuantityIntentResponse_code);
  swift_beginAccess();
  *v3 = a1;
  return swift_endAccess();
}

uint64_t (*LogQuantityIntentResponse.code.modify())()
{
  swift_beginAccess();
  return LogQuantityIntentResponse.code.modify;
}

uint64_t LogQuantityIntentResponse.code.modify()
{
  return swift_endAccess();
}

void key path getter for LogQuantityIntentResponse.code : LogQuantityIntentResponse(id *a1@<X0>, uint64_t *a2@<X8>)
{
  id v2;
  id v3;

  v3 = *a1;
  v2 = *a1;
  *a2 = LogQuantityIntentResponse.code.getter();

}

void key path setter for LogQuantityIntentResponse.code : LogQuantityIntentResponse(uint64_t *a1, id *a2)
{
  id v2;
  id v3;
  uint64_t v4;

  v4 = *a1;
  v3 = *a2;
  v2 = *a2;
  LogQuantityIntentResponse.code.setter(v4);

}

char *LogQuantityIntentResponse.__allocating_init(code:userActivity:)(uint64_t a1, void *a2)
{
  objc_class *v2;
  id v3;

  v3 = objc_allocWithZone(v2);
  return LogQuantityIntentResponse.init(code:userActivity:)(a1, a2);
}

char *LogQuantityIntentResponse.init(code:userActivity:)(uint64_t a1, void *a2)
{
  char *v2;
  char *v3;
  char *v4;
  char *v6;
  char *v9;
  void *v10;

  v9 = (char *)objc_msgSend(v10, sel_init);
  v2 = v9;
  v3 = v9;
  v4 = v9;
  v6 = &v9[OBJC_IVAR___LogQuantityIntentResponse_code];
  swift_beginAccess();
  *(_QWORD *)v6 = a1;
  swift_endAccess();

  objc_msgSend(v9, sel_setUserActivity_, a2);
  return v9;
}

id LogQuantityIntentResponse.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

id LogQuantityIntentResponse.init()()
{
  char *v0;
  char *v1;
  id v2;
  id v4;
  objc_super v5;
  void *v6;

  v1 = v0;
  v6 = v0;
  *(_QWORD *)&v0[OBJC_IVAR___LogQuantityIntentResponse_code] = 0;

  v5.receiver = v6;
  v5.super_class = (Class)type metadata accessor for LogQuantityIntentResponse();
  v4 = objc_msgSendSuper2(&v5, sel_init);
  v2 = v4;
  v6 = v4;

  return v4;
}

uint64_t type metadata accessor for LogQuantityIntentResponse()
{
  return objc_opt_self();
}

id LogQuantityIntentResponse.__allocating_init(coder:)(void *a1)
{
  objc_class *v1;
  id v4;

  v4 = objc_msgSend(objc_allocWithZone(v1), sel_initWithCoder_, a1);

  return v4;
}

id LogQuantityIntentResponse.init(coder:)(void *a1)
{
  char *v1;
  char *v2;
  id v3;
  id v7;
  objc_super v8;
  void *v9;
  id v10;

  v9 = a1;
  v2 = v1;
  v10 = v1;
  *(_QWORD *)&v1[OBJC_IVAR___LogQuantityIntentResponse_code] = 0;

  v8.receiver = v10;
  v8.super_class = (Class)type metadata accessor for LogQuantityIntentResponse();
  v7 = objc_msgSendSuper2(&v8, sel_initWithCoder_, a1);
  if (v7)
  {
    v3 = v7;
    v10 = v7;

    return v7;
  }
  else
  {

    return 0;
  }
}

id LogQuantityIntentResponse.__allocating_init(backingStore:)(void *a1)
{
  objc_class *v1;
  id v4;

  v4 = objc_msgSend(objc_allocWithZone(v1), sel_initWithBackingStore_, a1);

  return v4;
}

id LogQuantityIntentResponse.init(backingStore:)(void *a1)
{
  char *v1;
  char *v2;
  id v3;
  id v7;
  objc_super v8;
  void *v9;
  id v10;

  v9 = a1;
  v2 = v1;
  v10 = v1;
  *(_QWORD *)&v1[OBJC_IVAR___LogQuantityIntentResponse_code] = 0;

  v8.receiver = v10;
  v8.super_class = (Class)type metadata accessor for LogQuantityIntentResponse();
  v7 = objc_msgSendSuper2(&v8, sel_initWithBackingStore_, a1);
  if (v7)
  {
    v3 = v7;
    v10 = v7;

    return v7;
  }
  else
  {

    return 0;
  }
}

id LogQuantityIntentResponse.__allocating_init(propertiesByName:)(uint64_t a1)
{
  objc_class *v1;
  id v2;
  id v4;
  id v5;
  Class isa;
  id v8;

  v8 = objc_allocWithZone(v1);
  if (a1)
  {
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    v2 = objc_msgSend(v8, sel_initWithPropertiesByName_, isa);
  }
  else
  {
    v2 = objc_msgSend(v8, sel_initWithPropertiesByName_, 0);
  }
  v5 = v2;

  return v5;
}

id LogQuantityIntentResponse.init(propertiesByName:)(uint64_t a1)
{
  char *v1;
  char *v2;
  id v3;
  id v6;
  Class isa;
  Class v8;
  objc_super v10;
  uint64_t v11;
  id v12;

  v11 = a1;
  v2 = v1;
  v12 = v1;
  *(_QWORD *)&v1[OBJC_IVAR___LogQuantityIntentResponse_code] = 0;

  swift_bridgeObjectRetain();
  if (a1)
  {
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    v8 = isa;
  }
  else
  {
    v8 = 0;
  }
  v10.receiver = v12;
  v10.super_class = (Class)type metadata accessor for LogQuantityIntentResponse();
  v6 = objc_msgSendSuper2(&v10, sel_initWithPropertiesByName_, v8);

  if (v6)
  {
    v3 = v6;
    v12 = v6;
    swift_bridgeObjectRelease();

    return v6;
  }
  else
  {

    swift_bridgeObjectRelease();
    return 0;
  }
}

id LogQuantityIntentResponse.__deallocating_deinit()
{
  void *v0;
  objc_super v2;
  void *v3;

  v3 = v0;
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for LogQuantityIntentResponse();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

unint64_t base witness table accessor for Equatable in LogQuantityIntentResponseCode()
{
  return lazy protocol witness table accessor for type LogQuantityIntentResponseCode and conformance LogQuantityIntentResponseCode();
}

unint64_t lazy protocol witness table accessor for type LogQuantityIntentResponseCode and conformance LogQuantityIntentResponseCode()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type LogQuantityIntentResponseCode and conformance LogQuantityIntentResponseCode;
  if (!lazy protocol witness table cache variable for type LogQuantityIntentResponseCode and conformance LogQuantityIntentResponseCode)
  {
    v0 = MEMORY[0x24957D92C](&protocol conformance descriptor for LogQuantityIntentResponseCode, &type metadata for LogQuantityIntentResponseCode);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type LogQuantityIntentResponseCode and conformance LogQuantityIntentResponseCode);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type LogQuantityIntentResponseCode and conformance LogQuantityIntentResponseCode;
  if (!lazy protocol witness table cache variable for type LogQuantityIntentResponseCode and conformance LogQuantityIntentResponseCode)
  {
    v0 = MEMORY[0x24957D92C](&protocol conformance descriptor for LogQuantityIntentResponseCode, &type metadata for LogQuantityIntentResponseCode);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type LogQuantityIntentResponseCode and conformance LogQuantityIntentResponseCode);
    return v0;
  }
  return v2;
}

void sub_2474A7760(id *a1@<X0>, uint64_t *a2@<X8>)
{
  key path getter for LogQuantityIntentResponse.code : LogQuantityIntentResponse(a1, a2);
}

void sub_2474A7774(uint64_t *a1, id *a2)
{
  key path setter for LogQuantityIntentResponse.code : LogQuantityIntentResponse(a1, a2);
}

ValueMetadata *type metadata accessor for LogQuantityIntentResponseCode()
{
  return &type metadata for LogQuantityIntentResponseCode;
}

id LogQuantityIntentHandler.__allocating_init(storage:)(_QWORD *a1)
{
  objc_class *v1;
  id v2;

  v2 = objc_allocWithZone(v1);
  return LogQuantityIntentHandler.init(storage:)(a1);
}

id LogQuantityIntentHandler.init(storage:)(_QWORD *a1)
{
  void *v1;
  id v2;
  SiriWellnessIntents::HealthKitPersistor v3;
  id v4;
  id v6;
  char *v7;
  objc_class *ObjectType;
  objc_super v10;
  _QWORD v11[5];
  _QWORD __dst[6];
  id v13;

  ObjectType = (objc_class *)swift_getObjectType();
  __dst[5] = a1;
  v2 = v1;
  v13 = v1;
  outlined init with copy of QuantityPersisting?(a1, v11);
  if (v11[3])
  {
    outlined init with take of QuantityPersisting(v11, __dst);
  }
  else
  {
    v3.store.super.isa = HealthKitPersistor.init()().store.super.isa;
    __dst[3] = &type metadata for HealthKitPersistor;
    __dst[4] = &protocol witness table for HealthKitPersistor;
    __dst[0] = v3.store.super.isa;
    outlined destroy of QuantityPersisting?((uint64_t)v11);
  }
  outlined init with take of QuantityPersisting(__dst, &v7[OBJC_IVAR____TtC19SiriWellnessIntents24LogQuantityIntentHandler_storage]);

  v10.receiver = v13;
  v10.super_class = ObjectType;
  v6 = objc_msgSendSuper2(&v10, sel_init);
  v4 = v6;
  v13 = v6;
  outlined destroy of QuantityPersisting?((uint64_t)a1);

  return v6;
}

_QWORD *outlined init with copy of QuantityPersisting?(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;

  if (a1[3])
  {
    v2 = a1[3];
    a2[3] = v2;
    a2[4] = a1[4];
    (**(void (***)(void))(v2 - 8))();
  }
  else
  {
    memcpy(a2, a1, 0x28uLL);
  }
  return a2;
}

SiriWellnessIntents::HealthKitPersistor __swiftcall HealthKitPersistor.init()()
{
  id v0;
  void *v2;
  id v3;

  v3 = 0;
  type metadata accessor for HKHealthStore();
  v2 = (void *)NSDateFormatter.__allocating_init()();
  v0 = v2;
  v3 = v2;
  outlined destroy of HealthKitPersistor(&v3);
  return (SiriWellnessIntents::HealthKitPersistor)v2;
}

uint64_t outlined destroy of QuantityPersisting?(uint64_t a1)
{
  if (*(_QWORD *)(a1 + 24))
    __swift_destroy_boxed_opaque_existential_1(a1);
  return a1;
}

uint64_t __swift_destroy_boxed_opaque_existential_1(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 24);
  if ((*(_DWORD *)(*(_QWORD *)(v2 - 8) + 80) & 0x20000) != 0)
    return swift_release();
  else
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1);
}

void *outlined init with take of QuantityPersisting(const void *a1, void *__dst)
{
  memcpy(__dst, a1, 0x28uLL);
  return __dst;
}

uint64_t LogQuantityIntentHandler.handle(intent:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2[38] = v1;
  v2[37] = a1;
  v2[29] = v2;
  v2[30] = 0;
  v2[31] = 0;
  v2[27] = 0;
  v2[28] = 0;
  v3 = type metadata accessor for Logger();
  v2[39] = v3;
  v2[40] = *(_QWORD *)(v3 - 8);
  v2[41] = swift_task_alloc();
  v2[42] = swift_task_alloc();
  v2[43] = swift_task_alloc();
  v2[44] = swift_task_alloc();
  v2[45] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  v2[46] = swift_task_alloc();
  v2[47] = swift_task_alloc();
  v4 = type metadata accessor for Date();
  v2[48] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v2[49] = v5;
  v2[50] = *(_QWORD *)(v5 + 64);
  v2[51] = swift_task_alloc();
  v2[52] = swift_task_alloc();
  v2[53] = swift_task_alloc();
  v2[54] = swift_task_alloc();
  v2[30] = a1;
  v2[31] = v1;
  return swift_task_switch();
}

{
  uint64_t *v1;
  uint64_t v3;

  v3 = *v1;
  *(_QWORD *)(v3 + 232) = *v1;
  *(_QWORD *)(v3 + 560) = a1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  return swift_task_switch();
}

uint64_t LogQuantityIntentHandler.handle(intent:)()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);
  _QWORD *v9;
  void (*v10)(uint64_t, uint64_t);
  uint64_t *v11;
  _QWORD *v12;
  uint64_t v14;
  id v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint8_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  uint32_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  NSObject *log;
  os_log_type_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t (*v49)(uint64_t, uint64_t, uint64_t);
  uint64_t v50;
  uint8_t *buf;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint32_t size;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  NSObject *oslog;
  os_log_type_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  void (*v70)(uint64_t, uint64_t);
  id v71;
  id v72;
  uint64_t v73;
  void (*v74)(uint64_t, uint64_t);
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  id v81;
  uint64_t v82;
  unsigned int (*v83)(uint64_t, uint64_t, uint64_t);
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  id v89;
  uint8_t *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t (*v93)(uint64_t, uint64_t, uint64_t);
  uint64_t v94;
  uint8_t *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t (*v98)(uint64_t, uint64_t, uint64_t);
  uint64_t v99;

  v1 = *(void **)(v0 + 296);
  *(_QWORD *)(v0 + 232) = v0;
  v89 = objc_msgSend(v1, sel_start);
  if (v89)
  {
    v84 = *(_QWORD *)(v88 + 424);
    v85 = *(_QWORD *)(v88 + 392);
    v86 = *(_QWORD *)(v88 + 384);
    v87 = *(_QWORD *)(v88 + 376);
    static Date._unconditionallyBridgeFromObjectiveC(_:)();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v85 + 32))(v87, v84, v86);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v85 + 56))(v87, 0, 1, v86);

  }
  else
  {
    (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v88 + 392) + 56))(*(_QWORD *)(v88 + 376), 1, 1, *(_QWORD *)(v88 + 384));
  }
  v83 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v88 + 392) + 48);
  if (v83(*(_QWORD *)(v88 + 376), 1, *(_QWORD *)(v88 + 384)) == 1)
  {
    v82 = *(_QWORD *)(v88 + 376);
    Date.init()();
    outlined destroy of Date?(v82);
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v88 + 392) + 32))(*(_QWORD *)(v88 + 432), *(_QWORD *)(v88 + 376), *(_QWORD *)(v88 + 384));
  }
  v81 = objc_msgSend(*(id *)(v88 + 296), sel_end);
  if (v81)
  {
    v77 = *(_QWORD *)(v88 + 424);
    v78 = *(_QWORD *)(v88 + 392);
    v79 = *(_QWORD *)(v88 + 384);
    v80 = *(_QWORD *)(v88 + 368);
    static Date._unconditionallyBridgeFromObjectiveC(_:)();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v78 + 32))(v80, v77, v79);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v78 + 56))(v80, 0, 1, v79);

  }
  else
  {
    (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v88 + 392) + 56))(*(_QWORD *)(v88 + 368), 1, 1, *(_QWORD *)(v88 + 384));
  }
  v2 = *(_QWORD *)(v88 + 432);
  v3 = *(_QWORD *)(v88 + 408);
  v75 = *(_QWORD *)(v88 + 384);
  v76 = *(_QWORD *)(v88 + 368);
  v74 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v88 + 392) + 16);
  *(_QWORD *)(v88 + 440) = v74;
  v74(v3, v2);
  if (v83(v76, 1, v75) == 1)
  {
    v73 = *(_QWORD *)(v88 + 368);
    ((void (*)(_QWORD, _QWORD, _QWORD))v74)(*(_QWORD *)(v88 + 416), *(_QWORD *)(v88 + 408), *(_QWORD *)(v88 + 384));
    outlined destroy of Date?(v73);
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v88 + 392) + 32))(*(_QWORD *)(v88 + 416), *(_QWORD *)(v88 + 368), *(_QWORD *)(v88 + 384));
  }
  v4 = *(_QWORD *)(v88 + 408);
  v5 = *(_QWORD *)(v88 + 384);
  v71 = *(id *)(v88 + 296);
  v70 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v88 + 392) + 8);
  *(_QWORD *)(v88 + 448) = v70;
  v70(v4, v5);
  v72 = objc_msgSend(v71, sel_quantityIdentifier);
  if (v72)
  {
    v66 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v67 = v6;

    v68 = v66;
    v69 = v67;
  }
  else
  {
    v68 = 0;
    v69 = 0;
  }
  *(_QWORD *)(v88 + 464) = v69;
  *(_QWORD *)(v88 + 456) = v68;
  if (v69)
  {
    v7 = *(_QWORD *)(v88 + 360);
    v54 = *(_QWORD *)(v88 + 320);
    v56 = *(_QWORD *)(v88 + 312);
    *(_QWORD *)(v88 + 216) = v68;
    *(_QWORD *)(v88 + 224) = v69;
    v55 = Logger.wellnessIntents.unsafeMutableAddressor();
    swift_beginAccess();
    v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v54 + 16);
    *(_QWORD *)(v88 + 472) = v8;
    v8(v7, v55, v56);
    swift_endAccess();
    swift_bridgeObjectRetain();
    v58 = swift_allocObject();
    *(_QWORD *)(v58 + 16) = v68;
    *(_QWORD *)(v58 + 24) = v69;
    oslog = Logger.logObject.getter();
    v65 = static os_log_type_t.debug.getter();
    *(_QWORD *)(v88 + 264) = 12;
    *(_QWORD *)(v88 + 480) = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    *(_QWORD *)(v88 + 488) = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    *(_QWORD *)(v88 + 496) = lazy protocol witness table accessor for type Int and conformance Int();
    UnsignedInteger<>.init<A>(_:)();
    size = *(_DWORD *)(v88 + 572);
    v60 = swift_allocObject();
    *(_BYTE *)(v60 + 16) = 32;
    v61 = swift_allocObject();
    *(_BYTE *)(v61 + 16) = 8;
    v59 = swift_allocObject();
    *(_QWORD *)(v59 + 16) = partial apply for implicit closure #4 in LogQuantityIntentHandler.handle(intent:);
    *(_QWORD *)(v59 + 24) = v58;
    v62 = swift_allocObject();
    *(_QWORD *)(v62 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:);
    *(_QWORD *)(v62 + 24) = v59;
    *(_QWORD *)(v88 + 504) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
    _allocateUninitializedArray<A>(_:)();
    v63 = v9;
    swift_retain();
    *v63 = partial apply for closure #1 in OSLogArguments.append(_:);
    v63[1] = v60;
    swift_retain();
    v63[2] = partial apply for closure #1 in OSLogArguments.append(_:);
    v63[3] = v61;
    swift_retain();
    v63[4] = partial apply for closure #1 in OSLogArguments.append(_:);
    v63[5] = v62;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(oslog, v65))
    {
      buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      v50 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      v52 = createStorage<A>(capacity:type:)(0);
      v53 = createStorage<A>(capacity:type:)(1);
      v95 = buf;
      v96 = v52;
      v97 = v53;
      serialize(_:at:)(2, &v95);
      serialize(_:at:)(1, &v95);
      v98 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v99 = v60;
      closure #1 in osLogInternal(_:log:type:)(&v98, (uint64_t)&v95, (uint64_t)&v96, (uint64_t)&v97);
      v98 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v99 = v61;
      closure #1 in osLogInternal(_:log:type:)(&v98, (uint64_t)&v95, (uint64_t)&v96, (uint64_t)&v97);
      v98 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v99 = v62;
      closure #1 in osLogInternal(_:log:type:)(&v98, (uint64_t)&v95, (uint64_t)&v96, (uint64_t)&v97);
      _os_log_impl(&dword_24749F000, oslog, v65, "Checking authorization for %s...", buf, size);
      destroyStorage<A>(_:count:)(v52, 0, v50);
      destroyStorage<A>(_:count:)(v53, 1, MEMORY[0x24BEE4AD8] + 8);
      MEMORY[0x24957D398](buf, MEMORY[0x24BEE4260]);
      swift_release();
      swift_release();
      swift_release();
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
    }
    *(_QWORD *)(v88 + 512) = 0;
    v42 = *(_QWORD *)(v88 + 360);
    v41 = *(_QWORD *)(v88 + 320);
    v43 = *(_QWORD *)(v88 + 312);
    v44 = *(_QWORD *)(v88 + 304);

    v10 = *(void (**)(uint64_t, uint64_t))(v41 + 8);
    *(_QWORD *)(v88 + 520) = v10;
    v10(v42, v43);
    outlined init with copy of QuantityPersisting(v44 + OBJC_IVAR____TtC19SiriWellnessIntents24LogQuantityIntentHandler_storage, v88 + 16);
    v47 = *(_QWORD *)(v88 + 40);
    v48 = *(_QWORD *)(v88 + 48);
    __swift_project_boxed_opaque_existential_1((_QWORD *)(v88 + 16), v47);
    v45 = _allocateUninitializedArray<A>(_:)();
    v46 = v11;
    swift_bridgeObjectRetain();
    *v46 = v68;
    v46[1] = v69;
    _finalizeUninitializedArray<A>(_:)();
    *(_QWORD *)(v88 + 528) = v45;
    v49 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v48 + 8) + **(int **)(v48 + 8));
    v12 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v88 + 536) = v12;
    *v12 = *(_QWORD *)(v88 + 232);
    v12[1] = LogQuantityIntentHandler.handle(intent:);
    return v49(v45, v47, v48);
  }
  else
  {
    v14 = *(_QWORD *)(v88 + 328);
    v28 = *(_QWORD *)(v88 + 320);
    v30 = *(_QWORD *)(v88 + 312);
    v31 = *(id *)(v88 + 296);
    v29 = Logger.wellnessIntents.unsafeMutableAddressor();
    swift_beginAccess();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v28 + 16))(v14, v29, v30);
    swift_endAccess();
    v15 = v31;
    v33 = swift_allocObject();
    *(_QWORD *)(v33 + 16) = v31;
    log = Logger.logObject.getter();
    v40 = static os_log_type_t.error.getter();
    *(_QWORD *)(v88 + 256) = 12;
    lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    lazy protocol witness table accessor for type Int and conformance Int();
    UnsignedInteger<>.init<A>(_:)();
    v32 = *(_DWORD *)(v88 + 568);
    v35 = swift_allocObject();
    *(_BYTE *)(v35 + 16) = 64;
    v36 = swift_allocObject();
    *(_BYTE *)(v36 + 16) = 8;
    v34 = swift_allocObject();
    *(_QWORD *)(v34 + 16) = partial apply for implicit closure #3 in LogQuantityIntentHandler.handle(intent:);
    *(_QWORD *)(v34 + 24) = v33;
    v37 = swift_allocObject();
    *(_QWORD *)(v37 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:);
    *(_QWORD *)(v37 + 24) = v34;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
    _allocateUninitializedArray<A>(_:)();
    v38 = v16;
    swift_retain();
    *v38 = partial apply for closure #1 in OSLogArguments.append(_:);
    v38[1] = v35;
    swift_retain();
    v38[2] = partial apply for closure #1 in OSLogArguments.append(_:);
    v38[3] = v36;
    swift_retain();
    v38[4] = partial apply for closure #1 in OSLogArguments.append(_:);
    v38[5] = v37;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(log, v40))
    {
      v25 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      v26 = createStorage<A>(capacity:type:)(1);
      v27 = createStorage<A>(capacity:type:)(0);
      v90 = v25;
      v91 = v26;
      v92 = v27;
      serialize(_:at:)(2, &v90);
      serialize(_:at:)(1, &v90);
      v93 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v94 = v35;
      closure #1 in osLogInternal(_:log:type:)(&v93, (uint64_t)&v90, (uint64_t)&v91, (uint64_t)&v92);
      v93 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v94 = v36;
      closure #1 in osLogInternal(_:log:type:)(&v93, (uint64_t)&v90, (uint64_t)&v91, (uint64_t)&v92);
      v93 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v94 = v37;
      closure #1 in osLogInternal(_:log:type:)(&v93, (uint64_t)&v90, (uint64_t)&v91, (uint64_t)&v92);
      _os_log_impl(&dword_24749F000, log, v40, "Intent with missing slots! You must perform slot filling before handling the intent. Intent: %@", v25, v32);
      destroyStorage<A>(_:count:)(v26, 1, v24);
      destroyStorage<A>(_:count:)(v27, 0, MEMORY[0x24BEE4AD8] + 8);
      MEMORY[0x24957D398](v25, MEMORY[0x24BEE4260]);
      swift_release();
      swift_release();
      swift_release();
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
    }
    v21 = *(_QWORD *)(v88 + 432);
    v20 = *(_QWORD *)(v88 + 416);
    v22 = *(_QWORD *)(v88 + 384);
    v18 = *(_QWORD *)(v88 + 328);
    v17 = *(_QWORD *)(v88 + 320);
    v19 = *(_QWORD *)(v88 + 312);

    (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v18, v19);
    type metadata accessor for LogQuantityIntentResponse();
    v23 = LogQuantityIntentResponse.__allocating_init(code:userActivity:)(5, 0);
    v70(v20, v22);
    v70(v21, v22);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(char *))(*(_QWORD *)(v88 + 232) + 8))(v23);
  }
}

{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  id v6;
  id v7;
  _QWORD *v8;
  double v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(uint64_t, uint64_t);
  char *v22;
  uint64_t v23;
  uint8_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(uint64_t, uint64_t, uint64_t);
  uint64_t v30;
  uint64_t v31;
  uint32_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  NSObject *log;
  os_log_type_t v40;
  uint64_t v41;
  uint64_t (*v42)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, double);
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void (*v49)(uint64_t, uint64_t);
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  id v53;
  double v54;
  id v55;
  uint64_t v56;
  uint8_t *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void (*v61)(uint64_t, uint64_t);
  uint64_t v62;
  uint64_t v63;
  void (*v64)(uint64_t, uint64_t, uint64_t);
  uint64_t v65;
  uint64_t v66;
  id v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  void (*v72)(uint64_t, uint64_t, uint64_t);
  int v73;
  uint64_t v74;
  uint64_t v75;
  void (*v76)(unint64_t, uint64_t, uint64_t);
  uint64_t v77;
  uint32_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  _QWORD *v104;
  NSObject *oslog;
  os_log_type_t v106;
  uint64_t v107;
  uint64_t v108;
  uint8_t *buf;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  void (*v114)(uint64_t, uint64_t, uint64_t);
  uint64_t v115;
  uint64_t v116;
  uint32_t size;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  _QWORD *v123;
  NSObject *v124;
  os_log_type_t v125;
  uint64_t v126;
  char v127;
  uint8_t *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t (*v131)(uint64_t, uint64_t, uint64_t);
  uint64_t v132;
  uint8_t *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t (*v136)(uint64_t, uint64_t, uint64_t);
  uint64_t v137;
  uint8_t *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t (*v141)(uint64_t, uint64_t, uint64_t);
  uint64_t v142;

  v127 = *(_BYTE *)(v0 + 588);
  *(_QWORD *)(v0 + 232) = v0;
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  if ((v127 & 1) == 0)
  {
    v29 = *(void (**)(uint64_t, uint64_t, uint64_t))(v126 + 472);
    v30 = *(_QWORD *)(v126 + 456);
    v12 = *(_QWORD *)(v126 + 336);
    v28 = *(_QWORD *)(v126 + 312);
    v31 = *(_QWORD *)(v126 + 464);
    v27 = Logger.wellnessIntents.unsafeMutableAddressor();
    swift_beginAccess();
    v29(v12, v27, v28);
    swift_endAccess();
    swift_bridgeObjectRetain();
    v33 = swift_allocObject();
    *(_QWORD *)(v33 + 16) = v30;
    *(_QWORD *)(v33 + 24) = v31;
    log = Logger.logObject.getter();
    v40 = static os_log_type_t.error.getter();
    *(_QWORD *)(v126 + 272) = 12;
    UnsignedInteger<>.init<A>(_:)();
    v32 = *(_DWORD *)(v126 + 576);
    v35 = swift_allocObject();
    *(_BYTE *)(v35 + 16) = 32;
    v36 = swift_allocObject();
    *(_BYTE *)(v36 + 16) = 8;
    v34 = swift_allocObject();
    *(_QWORD *)(v34 + 16) = partial apply for implicit closure #4 in LogQuantityIntentHandler.handle(intent:);
    *(_QWORD *)(v34 + 24) = v33;
    v37 = swift_allocObject();
    *(_QWORD *)(v37 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:);
    *(_QWORD *)(v37 + 24) = v34;
    _allocateUninitializedArray<A>(_:)();
    v38 = v13;
    swift_retain();
    *v38 = partial apply for closure #1 in OSLogArguments.append(_:);
    v38[1] = v35;
    swift_retain();
    v38[2] = partial apply for closure #1 in OSLogArguments.append(_:);
    v38[3] = v36;
    swift_retain();
    v38[4] = partial apply for closure #1 in OSLogArguments.append(_:);
    v38[5] = v37;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(log, v40))
    {
      v14 = *(_QWORD *)(v126 + 512);
      v24 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      v25 = createStorage<A>(capacity:type:)(0);
      v26 = createStorage<A>(capacity:type:)(1);
      v128 = v24;
      v129 = v25;
      v130 = v26;
      serialize(_:at:)(2, &v128);
      serialize(_:at:)(1, &v128);
      v131 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v132 = v35;
      result = closure #1 in osLogInternal(_:log:type:)(&v131, (uint64_t)&v128, (uint64_t)&v129, (uint64_t)&v130);
      if (v14)
        return result;
      v131 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v132 = v36;
      closure #1 in osLogInternal(_:log:type:)(&v131, (uint64_t)&v128, (uint64_t)&v129, (uint64_t)&v130);
      v131 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v132 = v37;
      closure #1 in osLogInternal(_:log:type:)(&v131, (uint64_t)&v128, (uint64_t)&v129, (uint64_t)&v130);
      _os_log_impl(&dword_24749F000, log, v40, "Not authorized to write to: %s", v24, v32);
      destroyStorage<A>(_:count:)(v25, 0, v23);
      destroyStorage<A>(_:count:)(v26, 1, MEMORY[0x24BEE4AD8] + 8);
      MEMORY[0x24957D398](v24, MEMORY[0x24BEE4260]);
      swift_release();
      swift_release();
      swift_release();
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
    }
    v17 = *(void (**)(uint64_t, uint64_t))(v126 + 520);
    v21 = *(void (**)(uint64_t, uint64_t))(v126 + 448);
    v19 = *(_QWORD *)(v126 + 432);
    v18 = *(_QWORD *)(v126 + 416);
    v20 = *(_QWORD *)(v126 + 384);
    v15 = *(_QWORD *)(v126 + 336);
    v16 = *(_QWORD *)(v126 + 312);

    v17(v15, v16);
    type metadata accessor for LogQuantityIntentResponse();
    v22 = LogQuantityIntentResponse.__allocating_init(code:userActivity:)(101, 0);
    swift_bridgeObjectRelease();
    v21(v18, v20);
    v21(v19, v20);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(char *))(*(_QWORD *)(v126 + 232) + 8))(v22);
  }
  v114 = *(void (**)(uint64_t, uint64_t, uint64_t))(v126 + 472);
  v115 = *(_QWORD *)(v126 + 456);
  v1 = *(_QWORD *)(v126 + 352);
  v113 = *(_QWORD *)(v126 + 312);
  v116 = *(_QWORD *)(v126 + 464);
  v112 = Logger.wellnessIntents.unsafeMutableAddressor();
  swift_beginAccess();
  v114(v1, v112, v113);
  swift_endAccess();
  swift_bridgeObjectRetain();
  v118 = swift_allocObject();
  *(_QWORD *)(v118 + 16) = v115;
  *(_QWORD *)(v118 + 24) = v116;
  v124 = Logger.logObject.getter();
  v125 = static os_log_type_t.debug.getter();
  *(_QWORD *)(v126 + 280) = 12;
  UnsignedInteger<>.init<A>(_:)();
  size = *(_DWORD *)(v126 + 580);
  v120 = swift_allocObject();
  *(_BYTE *)(v120 + 16) = 32;
  v121 = swift_allocObject();
  *(_BYTE *)(v121 + 16) = 8;
  v119 = swift_allocObject();
  *(_QWORD *)(v119 + 16) = partial apply for implicit closure #4 in LogQuantityIntentHandler.handle(intent:);
  *(_QWORD *)(v119 + 24) = v118;
  v122 = swift_allocObject();
  *(_QWORD *)(v122 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:);
  *(_QWORD *)(v122 + 24) = v119;
  _allocateUninitializedArray<A>(_:)();
  v123 = v2;
  swift_retain();
  *v123 = partial apply for closure #1 in OSLogArguments.append(_:);
  v123[1] = v120;
  swift_retain();
  v123[2] = partial apply for closure #1 in OSLogArguments.append(_:);
  v123[3] = v121;
  swift_retain();
  v123[4] = partial apply for closure #1 in OSLogArguments.append(_:);
  v123[5] = v122;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(v124, v125))
  {
    v3 = *(_QWORD *)(v126 + 512);
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    v108 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    v110 = createStorage<A>(capacity:type:)(0);
    v111 = createStorage<A>(capacity:type:)(1);
    v138 = buf;
    v139 = v110;
    v140 = v111;
    serialize(_:at:)(2, &v138);
    serialize(_:at:)(1, &v138);
    v141 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v142 = v120;
    result = closure #1 in osLogInternal(_:log:type:)(&v141, (uint64_t)&v138, (uint64_t)&v139, (uint64_t)&v140);
    if (v3)
      return result;
    v141 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v142 = v121;
    closure #1 in osLogInternal(_:log:type:)(&v141, (uint64_t)&v138, (uint64_t)&v139, (uint64_t)&v140);
    v141 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v142 = v122;
    closure #1 in osLogInternal(_:log:type:)(&v141, (uint64_t)&v138, (uint64_t)&v139, (uint64_t)&v140);
    _os_log_impl(&dword_24749F000, v124, v125, "Authorization check successful for %s!", buf, size);
    destroyStorage<A>(_:count:)(v110, 0, v108);
    destroyStorage<A>(_:count:)(v111, 1, MEMORY[0x24BEE4AD8] + 8);
    MEMORY[0x24957D398](buf, MEMORY[0x24BEE4260]);
    swift_release();
    swift_release();
    swift_release();
    v107 = 0;
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
    v107 = *(_QWORD *)(v126 + 512);
  }
  v61 = *(void (**)(uint64_t, uint64_t))(v126 + 520);
  v64 = *(void (**)(uint64_t, uint64_t, uint64_t))(v126 + 472);
  v65 = *(_QWORD *)(v126 + 456);
  v72 = *(void (**)(uint64_t, uint64_t, uint64_t))(v126 + 440);
  v68 = *(_QWORD *)(v126 + 432);
  v74 = *(_QWORD *)(v126 + 424);
  v71 = *(_QWORD *)(v126 + 416);
  v69 = *(_QWORD *)(v126 + 392);
  v75 = *(_QWORD *)(v126 + 384);
  v60 = *(_QWORD *)(v126 + 352);
  v5 = *(_QWORD *)(v126 + 344);
  v63 = *(_QWORD *)(v126 + 312);
  v67 = *(id *)(v126 + 296);
  v66 = *(_QWORD *)(v126 + 464);

  v61(v60, v63);
  v62 = Logger.wellnessIntents.unsafeMutableAddressor();
  swift_beginAccess();
  v64(v5, v62, v63);
  swift_endAccess();
  swift_bridgeObjectRetain();
  v79 = swift_allocObject();
  *(_QWORD *)(v79 + 16) = v65;
  *(_QWORD *)(v79 + 24) = v66;
  v6 = v67;
  v81 = swift_allocObject();
  *(_QWORD *)(v81 + 16) = v67;
  v7 = v67;
  v83 = swift_allocObject();
  *(_QWORD *)(v83 + 16) = v67;
  v72(v74, v68, v75);
  v73 = *(_DWORD *)(v69 + 80);
  v70 = swift_allocObject();
  v76 = *(void (**)(unint64_t, uint64_t, uint64_t))(v69 + 32);
  v76(v70 + ((v73 + 16) & ~(unint64_t)v73), v74, v75);
  swift_retain();
  v85 = swift_allocObject();
  *(_QWORD *)(v85 + 16) = partial apply for implicit closure #10 in LogQuantityIntentHandler.handle(intent:);
  *(_QWORD *)(v85 + 24) = v70;
  swift_release();
  v72(v74, v71, v75);
  v77 = swift_allocObject();
  v76(v77 + ((v73 + 16) & ~(unint64_t)v73), v74, v75);
  swift_retain();
  v87 = swift_allocObject();
  *(_QWORD *)(v87 + 16) = partial apply for implicit closure #10 in LogQuantityIntentHandler.handle(intent:);
  *(_QWORD *)(v87 + 24) = v77;
  swift_release();
  oslog = Logger.logObject.getter();
  v106 = static os_log_type_t.debug.getter();
  *(_QWORD *)(v126 + 288) = 52;
  UnsignedInteger<>.init<A>(_:)();
  v78 = *(_DWORD *)(v126 + 584);
  v89 = swift_allocObject();
  *(_BYTE *)(v89 + 16) = 32;
  v90 = swift_allocObject();
  *(_BYTE *)(v90 + 16) = 8;
  v80 = swift_allocObject();
  *(_QWORD *)(v80 + 16) = partial apply for implicit closure #4 in LogQuantityIntentHandler.handle(intent:);
  *(_QWORD *)(v80 + 24) = v79;
  v91 = swift_allocObject();
  *(_QWORD *)(v91 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:);
  *(_QWORD *)(v91 + 24) = v80;
  v92 = swift_allocObject();
  *(_BYTE *)(v92 + 16) = 0;
  v93 = swift_allocObject();
  *(_BYTE *)(v93 + 16) = 8;
  v82 = swift_allocObject();
  *(_QWORD *)(v82 + 16) = partial apply for implicit closure #8 in LogQuantityIntentHandler.handle(intent:);
  *(_QWORD *)(v82 + 24) = v81;
  v94 = swift_allocObject();
  *(_QWORD *)(v94 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:);
  *(_QWORD *)(v94 + 24) = v82;
  v95 = swift_allocObject();
  *(_BYTE *)(v95 + 16) = 32;
  v96 = swift_allocObject();
  *(_BYTE *)(v96 + 16) = 8;
  v84 = swift_allocObject();
  *(_QWORD *)(v84 + 16) = partial apply for implicit closure #9 in LogQuantityIntentHandler.handle(intent:);
  *(_QWORD *)(v84 + 24) = v83;
  v97 = swift_allocObject();
  *(_QWORD *)(v97 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:);
  *(_QWORD *)(v97 + 24) = v84;
  v98 = swift_allocObject();
  *(_BYTE *)(v98 + 16) = 32;
  v99 = swift_allocObject();
  *(_BYTE *)(v99 + 16) = 8;
  v86 = swift_allocObject();
  *(_QWORD *)(v86 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation<A>(_:align:privacy:);
  *(_QWORD *)(v86 + 24) = v85;
  v100 = swift_allocObject();
  *(_QWORD *)(v100 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:);
  *(_QWORD *)(v100 + 24) = v86;
  v101 = swift_allocObject();
  *(_BYTE *)(v101 + 16) = 32;
  v102 = swift_allocObject();
  *(_BYTE *)(v102 + 16) = 8;
  v88 = swift_allocObject();
  *(_QWORD *)(v88 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation<A>(_:align:privacy:);
  *(_QWORD *)(v88 + 24) = v87;
  v103 = swift_allocObject();
  *(_QWORD *)(v103 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:);
  *(_QWORD *)(v103 + 24) = v88;
  _allocateUninitializedArray<A>(_:)();
  v104 = v8;
  swift_retain();
  *v104 = partial apply for closure #1 in OSLogArguments.append(_:);
  v104[1] = v89;
  swift_retain();
  v104[2] = partial apply for closure #1 in OSLogArguments.append(_:);
  v104[3] = v90;
  swift_retain();
  v104[4] = partial apply for closure #1 in OSLogArguments.append(_:);
  v104[5] = v91;
  swift_retain();
  v104[6] = partial apply for closure #1 in OSLogArguments.append(_:);
  v104[7] = v92;
  swift_retain();
  v104[8] = partial apply for closure #1 in OSLogArguments.append(_:);
  v104[9] = v93;
  swift_retain();
  v104[10] = partial apply for closure #1 in OSLogArguments.append(_:);
  v104[11] = v94;
  swift_retain();
  v104[12] = partial apply for closure #1 in OSLogArguments.append(_:);
  v104[13] = v95;
  swift_retain();
  v104[14] = partial apply for closure #1 in OSLogArguments.append(_:);
  v104[15] = v96;
  swift_retain();
  v104[16] = partial apply for closure #1 in OSLogArguments.append(_:);
  v104[17] = v97;
  swift_retain();
  v104[18] = partial apply for closure #1 in OSLogArguments.append(_:);
  v104[19] = v98;
  swift_retain();
  v104[20] = partial apply for closure #1 in OSLogArguments.append(_:);
  v104[21] = v99;
  swift_retain();
  v104[22] = partial apply for closure #1 in OSLogArguments.append(_:);
  v104[23] = v100;
  swift_retain();
  v104[24] = partial apply for closure #1 in OSLogArguments.append(_:);
  v104[25] = v101;
  swift_retain();
  v104[26] = partial apply for closure #1 in OSLogArguments.append(_:);
  v104[27] = v102;
  swift_retain();
  v104[28] = partial apply for closure #1 in OSLogArguments.append(_:);
  v104[29] = v103;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(oslog, v106))
  {
    v57 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    v56 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    v58 = createStorage<A>(capacity:type:)(0);
    v59 = createStorage<A>(capacity:type:)(4);
    v133 = v57;
    v134 = v58;
    v135 = v59;
    serialize(_:at:)(2, &v133);
    serialize(_:at:)(5, &v133);
    v136 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v137 = v89;
    result = closure #1 in osLogInternal(_:log:type:)(&v136, (uint64_t)&v133, (uint64_t)&v134, (uint64_t)&v135);
    if (v107)
      return result;
    v136 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v137 = v90;
    closure #1 in osLogInternal(_:log:type:)(&v136, (uint64_t)&v133, (uint64_t)&v134, (uint64_t)&v135);
    v136 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v137 = v91;
    closure #1 in osLogInternal(_:log:type:)(&v136, (uint64_t)&v133, (uint64_t)&v134, (uint64_t)&v135);
    v136 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v137 = v92;
    closure #1 in osLogInternal(_:log:type:)(&v136, (uint64_t)&v133, (uint64_t)&v134, (uint64_t)&v135);
    v136 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v137 = v93;
    closure #1 in osLogInternal(_:log:type:)(&v136, (uint64_t)&v133, (uint64_t)&v134, (uint64_t)&v135);
    v136 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v137 = v94;
    closure #1 in osLogInternal(_:log:type:)(&v136, (uint64_t)&v133, (uint64_t)&v134, (uint64_t)&v135);
    v136 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v137 = v95;
    closure #1 in osLogInternal(_:log:type:)(&v136, (uint64_t)&v133, (uint64_t)&v134, (uint64_t)&v135);
    v136 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v137 = v96;
    closure #1 in osLogInternal(_:log:type:)(&v136, (uint64_t)&v133, (uint64_t)&v134, (uint64_t)&v135);
    v136 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v137 = v97;
    closure #1 in osLogInternal(_:log:type:)(&v136, (uint64_t)&v133, (uint64_t)&v134, (uint64_t)&v135);
    v136 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v137 = v98;
    closure #1 in osLogInternal(_:log:type:)(&v136, (uint64_t)&v133, (uint64_t)&v134, (uint64_t)&v135);
    v136 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v137 = v99;
    closure #1 in osLogInternal(_:log:type:)(&v136, (uint64_t)&v133, (uint64_t)&v134, (uint64_t)&v135);
    v136 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v137 = v100;
    closure #1 in osLogInternal(_:log:type:)(&v136, (uint64_t)&v133, (uint64_t)&v134, (uint64_t)&v135);
    v136 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v137 = v101;
    closure #1 in osLogInternal(_:log:type:)(&v136, (uint64_t)&v133, (uint64_t)&v134, (uint64_t)&v135);
    v136 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v137 = v102;
    closure #1 in osLogInternal(_:log:type:)(&v136, (uint64_t)&v133, (uint64_t)&v134, (uint64_t)&v135);
    v136 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v137 = v103;
    closure #1 in osLogInternal(_:log:type:)(&v136, (uint64_t)&v133, (uint64_t)&v134, (uint64_t)&v135);
    _os_log_impl(&dword_24749F000, oslog, v106, "Persisting sample...\n  identifier: %s\n  value: %f\n  unit: %s\n  start: %s\n  end: %s", v57, v78);
    destroyStorage<A>(_:count:)(v58, 0, v56);
    destroyStorage<A>(_:count:)(v59, 4, MEMORY[0x24BEE4AD8] + 8);
    MEMORY[0x24957D398](v57, MEMORY[0x24BEE4260]);
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
  }
  v49 = *(void (**)(uint64_t, uint64_t))(v126 + 520);
  v47 = *(_QWORD *)(v126 + 344);
  v48 = *(_QWORD *)(v126 + 312);
  v50 = *(_QWORD *)(v126 + 304);
  v53 = *(id *)(v126 + 296);

  v49(v47, v48);
  outlined init with copy of QuantityPersisting(v50 + OBJC_IVAR____TtC19SiriWellnessIntents24LogQuantityIntentHandler_storage, v126 + 56);
  v51 = *(_QWORD *)(v126 + 80);
  v52 = *(_QWORD *)(v126 + 88);
  __swift_project_boxed_opaque_existential_1((_QWORD *)(v126 + 56), v51);
  objc_msgSend(v53, sel_value);
  v54 = v9;
  v55 = objc_msgSend(v53, sel_units);
  if (v55)
  {
    v43 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v44 = v10;

    v45 = v43;
    v46 = v44;
  }
  else
  {
    v45 = 0;
    v46 = 0;
  }
  *(_QWORD *)(v126 + 544) = v46;
  v41 = *(_QWORD *)(v126 + 464);
  v42 = (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, double))(*(_QWORD *)(v52 + 16)
                                                                                            + **(int **)(v52 + 16));
  v11 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v126 + 552) = v11;
  *v11 = *(_QWORD *)(v126 + 232);
  v11[1] = LogQuantityIntentHandler.handle(intent:);
  return v42(*(_QWORD *)(v126 + 456), v41, v45, v46, v51, v52, v54);
}

{
  _QWORD *v0;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);
  uint64_t v6;

  v5 = (void (*)(uint64_t, uint64_t))v0[56];
  v3 = v0[54];
  v2 = v0[52];
  v4 = v0[48];
  v0[29] = v0;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 7));
  swift_bridgeObjectRelease();
  v5(v2, v4);
  v5(v3, v4);
  v6 = v0[70];
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(v0[29] + 8))(v6);
}

uint64_t LogQuantityIntentHandler.handle(intent:)(char a1)
{
  uint64_t *v1;
  uint64_t v3;

  v3 = *v1;
  *(_QWORD *)(v3 + 232) = *v1;
  *(_BYTE *)(v3 + 588) = a1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  return swift_task_switch();
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> implicit closure #4 in LogQuantityIntentHandler.handle(intent:)()
{
  swift_bridgeObjectRetain();
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> _finalizeUninitializedArray<A>(_:)()
{
  type metadata accessor for Array();
  Array._endMutation()();
}

id implicit closure #8 in LogQuantityIntentHandler.handle(intent:)(void *a1)
{
  return objc_msgSend(a1, sel_value);
}

uint64_t implicit closure #9 in LogQuantityIntentHandler.handle(intent:)(void *a1)
{
  id v2;

  v2 = objc_msgSend(a1, sel_units);
  if (v2)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();

  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
  lazy protocol witness table accessor for type String? and conformance A?();
  return String.init<A>(describing:)();
}

uint64_t implicit closure #10 in LogQuantityIntentHandler.handle(intent:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  v2 = type metadata accessor for Date();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a2, a1);
}

uint64_t @objc closure #1 in LogQuantityIntentHandler.handle(intent:)(void *a1, const void *a2, void *a3)
{
  _QWORD *v3;
  id v5;
  id v6;
  _QWORD *v7;
  uint64_t v10;

  v3[4] = a3;
  v3[3] = a1;
  v3[2] = v3;
  v5 = a1;
  v3[5] = _Block_copy(a2);
  v6 = a3;
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v10 + 48) = v7;
  *v7 = *(_QWORD *)(v10 + 16);
  v7[1] = @objc closure #1 in LogQuantityIntentHandler.handle(intent:);
  return LogQuantityIntentHandler.handle(intent:)((uint64_t)a1);
}

uint64_t @objc closure #1 in LogQuantityIntentHandler.handle(intent:)(void *a1)
{
  uint64_t *v1;
  void *v3;
  void *v4;
  void (**aBlock)(void *, void *);
  uint64_t v7;

  v7 = *v1;
  aBlock = *(void (***)(void *, void *))(*v1 + 40);
  v3 = *(void **)(*v1 + 32);
  v4 = *(void **)(*v1 + 24);
  *(_QWORD *)(*v1 + 16) = *v1;
  swift_task_dealloc();

  aBlock[2](aBlock, a1);
  _Block_release(aBlock);

  return (*(uint64_t (**)(void))(*(_QWORD *)(v7 + 16) + 8))();
}

uint64_t _runTaskForBridgedAsyncMethod(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  char *v22;

  v16 = a1;
  v15 = a2;
  v14 = (*(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?)
                               - 8)
                   + 64)
       + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8]();
  v22 = (char *)&v13 - v14;
  v2 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(v22, 1);
  v17 = 48;
  v18 = 7;
  v3 = swift_allocObject();
  v4 = v15;
  v5 = (_QWORD *)v3;
  v6 = v16;
  v21 = v5;
  v5[2] = 0;
  v5[3] = 0;
  v5[4] = v6;
  v5[5] = v4;
  v19 = v5[2];
  v20 = v5[3];
  swift_unknownObjectRetain();
  v7 = swift_allocObject();
  v8 = v20;
  v9 = v21;
  v10 = (_QWORD *)v7;
  v11 = (uint64_t)v22;
  v10[2] = v19;
  v10[3] = v8;
  v10[4] = &_sIeghH_IeAgH_TRTATu;
  v10[5] = v9;
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgmq5(v11, (uint64_t)&_sIeAgH_ytIeAgHr_TRTATu, (uint64_t)v10);
  return swift_release();
}

id LogQuantityIntentHandler.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

uint64_t LogQuantityIntentHandler.init()()
{
  uint64_t result;
  uint64_t v1;

  if (!"SiriWellnessIntents.LogQuantityIntentHandler")
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  result = closure #1 in _unimplementedInitializer(className:initName:file:line:column:)((uint64_t)"SiriWellnessIntents.LogQuantityIntentHandler", 44, (unint64_t)"init()", 6, 2, (unint64_t)"SiriWellnessIntents/LogQuantityIntentHandler.swift", 50, 2, v1, 0xFuLL, 0x14uLL);
  __break(1u);
  return result;
}

id LogQuantityIntentHandler.__deallocating_deinit()
{
  void *v0;
  objc_super v2;
  void *v3;

  v3 = v0;
  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of HealthKitPersistor(id *a1)
{

}

uint64_t sub_2474AB74C()
{
  uint64_t v0;

  return swift_deallocObject();
}

void *partial apply for implicit closure #3 in LogQuantityIntentHandler.handle(intent:)()
{
  uint64_t v0;

  return related decl 'e' for HKErrorCode._nsError.getter(*(void **)(v0 + 16));
}

uint64_t HealthKitPersistor.isLoggingAuthorized(for:)(uint64_t a1, id a2)
{
  _QWORD *v2;
  id v3;
  _QWORD *v4;
  uint64_t v6;

  v2[5] = a2;
  v2[2] = v2;
  v2[3] = 0;
  v2[4] = 0;
  v2[3] = a1;
  v2[4] = a2;
  v3 = a2;
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v6 + 48) = v4;
  *v4 = *(_QWORD *)(v6 + 16);
  v4[1] = HealthKitPersistor.isLoggingAuthorized(for:);
  return isSiriAuthorizedToAccessHealthData(store:)((uint64_t)a2);
}

uint64_t HealthKitPersistor.isLoggingAuthorized(for:)(unsigned int a1)
{
  uint64_t *v1;
  void *v3;
  uint64_t v4;

  v4 = *v1;
  v3 = *(void **)(*v1 + 40);
  *(_QWORD *)(*v1 + 16) = *v1;
  swift_task_dealloc();

  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)(v4 + 16) + 8))(a1);
}

id HealthKitPersistor.getHKUnit(from:)()
{
  char v2;

  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("mmol/L", 6uLL, 1);
  v2 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  if ((v2 & 1) != 0)
    return objc_msgSend((id)objc_opt_self(), sel__millimolesBloodGlucosePerLiterUnit);
  type metadata accessor for HKUnit();
  swift_bridgeObjectRetain();
  return @nonobjc HKUnit.__allocating_init(from:)();
}

id @nonobjc HKUnit.__allocating_init(from:)()
{
  id v1;
  id v2;

  v1 = (id)MEMORY[0x24957CFB4]();
  v2 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_unitFromString_, v1);

  swift_bridgeObjectRelease();
  return v2;
}

uint64_t HealthKitPersistor.save(quantityIdentifier:value:units:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, double a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)(v6 + 984) = a5;
  *(_QWORD *)(v6 + 976) = a4;
  *(_QWORD *)(v6 + 968) = a3;
  *(double *)(v6 + 960) = a6;
  *(_QWORD *)(v6 + 952) = a2;
  *(_QWORD *)(v6 + 944) = a1;
  *(_QWORD *)(v6 + 456) = v6;
  *(_QWORD *)(v6 + 408) = 0;
  *(_QWORD *)(v6 + 416) = 0;
  *(_QWORD *)(v6 + 464) = 0;
  *(_QWORD *)(v6 + 424) = 0;
  *(_QWORD *)(v6 + 432) = 0;
  *(_QWORD *)(v6 + 472) = 0;
  *(_QWORD *)(v6 + 488) = 0;
  *(_QWORD *)(v6 + 496) = 0;
  *(_QWORD *)(v6 + 512) = 0;
  *(_QWORD *)(v6 + 576) = 0;
  *(_QWORD *)(v6 + 584) = 0;
  *(_QWORD *)(v6 + 592) = 0;
  *(_QWORD *)(v6 + 608) = 0;
  *(_QWORD *)(v6 + 632) = 0;
  *(_QWORD *)(v6 + 656) = 0;
  *(_QWORD *)(v6 + 664) = 0;
  *(_QWORD *)(v6 + 688) = 0;
  *(_QWORD *)(v6 + 440) = 0;
  *(_QWORD *)(v6 + 448) = 0;
  v7 = type metadata accessor for UUID();
  *(_QWORD *)(v6 + 992) = v7;
  *(_QWORD *)(v6 + 1000) = *(_QWORD *)(v7 - 8);
  *(_QWORD *)(v6 + 1008) = swift_task_alloc();
  v8 = type metadata accessor for Date();
  *(_QWORD *)(v6 + 1016) = v8;
  *(_QWORD *)(v6 + 1024) = *(_QWORD *)(v8 - 8);
  *(_QWORD *)(v6 + 1032) = swift_task_alloc();
  *(_QWORD *)(v6 + 1040) = swift_task_alloc();
  v9 = type metadata accessor for Logger();
  *(_QWORD *)(v6 + 1048) = v9;
  *(_QWORD *)(v6 + 1056) = *(_QWORD *)(v9 - 8);
  *(_QWORD *)(v6 + 1064) = swift_task_alloc();
  *(_QWORD *)(v6 + 1072) = swift_task_alloc();
  *(_QWORD *)(v6 + 1080) = swift_task_alloc();
  *(_QWORD *)(v6 + 1088) = swift_task_alloc();
  *(_QWORD *)(v6 + 1096) = swift_task_alloc();
  *(_QWORD *)(v6 + 1104) = swift_task_alloc();
  *(_QWORD *)(v6 + 1112) = swift_task_alloc();
  *(_QWORD *)(v6 + 1120) = swift_task_alloc();
  *(_QWORD *)(v6 + 1128) = swift_task_alloc();
  *(_QWORD *)(v6 + 1136) = swift_task_alloc();
  *(_QWORD *)(v6 + 1144) = swift_task_alloc();
  *(_QWORD *)(v6 + 1152) = swift_task_alloc();
  *(_QWORD *)(v6 + 408) = a1;
  *(_QWORD *)(v6 + 416) = a2;
  *(double *)(v6 + 464) = a6;
  *(_QWORD *)(v6 + 424) = a3;
  *(_QWORD *)(v6 + 432) = a4;
  *(_QWORD *)(v6 + 472) = a5;
  return swift_task_switch();
}

uint64_t HealthKitPersistor.save(quantityIdentifier:value:units:)()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t, uint64_t, uint64_t);
  void (*v3)(uint64_t, uint64_t);
  id v4;
  id v5;
  id v6;
  _QWORD *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint8_t *buf;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint32_t v26;
  os_log_type_t v27;
  NSObject *v28;
  uint64_t v29;

  v1 = *(_QWORD *)(v0 + 1152);
  v23 = *(_QWORD *)(v0 + 1056);
  v25 = *(_QWORD *)(v0 + 1048);
  *(_QWORD *)(v0 + 456) = v0;
  v24 = Logger.wellnessIntents.unsafeMutableAddressor();
  swift_beginAccess();
  v2 = *(void (**)(uint64_t, uint64_t, uint64_t))(v23 + 16);
  *(_QWORD *)(v0 + 1160) = v2;
  v2(v1, v24, v25);
  swift_endAccess();
  v28 = Logger.logObject.getter();
  v27 = static os_log_type_t.debug.getter();
  *(_QWORD *)(v0 + 480) = 2;
  *(_QWORD *)(v0 + 1168) = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  *(_QWORD *)(v0 + 1176) = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  *(_QWORD *)(v0 + 1184) = lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  v26 = *(_DWORD *)(v0 + 1296);
  *(_QWORD *)(v0 + 1192) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
  v29 = _allocateUninitializedArray<A>(_:)();
  if (os_log_type_enabled(v28, v27))
  {
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    v19 = createStorage<A>(capacity:type:)(0);
    v20 = createStorage<A>(capacity:type:)(0);
    *(_QWORD *)(v22 + 912) = buf;
    *(_QWORD *)(v22 + 920) = v19;
    *(_QWORD *)(v22 + 928) = v20;
    serialize(_:at:)(0, (_BYTE **)(v22 + 912));
    serialize(_:at:)(0, (_BYTE **)(v22 + 912));
    *(_QWORD *)(v22 + 936) = v29;
    v21 = (_QWORD *)swift_task_alloc();
    v21[2] = v22 + 912;
    v21[3] = v22 + 920;
    v21[4] = v22 + 928;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
    lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
    Sequence.forEach(_:)();
    swift_task_dealloc();
    _os_log_impl(&dword_24749F000, v28, v27, "Starting to save quantity.", buf, v26);
    destroyStorage<A>(_:count:)(v19, 0, v17);
    destroyStorage<A>(_:count:)(v20, 0, MEMORY[0x24BEE4AD8] + 8);
    MEMORY[0x24957D398](buf, MEMORY[0x24BEE4260]);
  }
  swift_bridgeObjectRelease();
  v10 = *(_QWORD *)(v22 + 1152);
  v9 = *(_QWORD *)(v22 + 1056);
  v11 = *(_QWORD *)(v22 + 1048);
  v15 = *(id *)(v22 + 984);
  v13 = *(_QWORD *)(v22 + 952);
  v12 = *(_QWORD *)(v22 + 944);

  v3 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
  *(_QWORD *)(v22 + 1200) = v3;
  v3(v10, v11);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v14 = (id)MEMORY[0x24957CFB4](v12, v13);
  *(_QWORD *)(v22 + 1208) = v14;
  v4 = v14;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  *(_QWORD *)(v22 + 488) = v14;
  type metadata accessor for HKQuantityType();
  v5 = v14;
  v16 = MEMORY[0x24957D314](v14);
  *(_QWORD *)(v22 + 1216) = v16;
  *(_QWORD *)(v22 + 496) = v16;
  v6 = v15;
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v22 + 1224) = v7;
  *v7 = *(_QWORD *)(v22 + 456);
  v7[1] = HealthKitPersistor.save(quantityIdentifier:value:units:);
  return getPreferredUnit(for:store:)(v16, (uint64_t)v15);
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  id v5;
  uint64_t v6;
  id v7;
  void *v8;
  uint64_t v9;
  id v10;
  id v11;
  _QWORD *v12;
  id v13;
  id v14;
  _QWORD *v15;
  uint64_t v16;
  id v17;
  id v18;
  id v19;
  _QWORD *v20;
  uint64_t v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(uint64_t, uint64_t);
  id v27;
  id v28;
  char *v29;
  uint64_t v30;
  uint8_t *v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(uint64_t, uint64_t, uint64_t);
  uint32_t v38;
  os_log_type_t v39;
  NSObject *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void (*v44)(uint64_t, uint64_t);
  id v45;
  uint64_t v46;
  uint64_t v47;
  uint8_t *v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  void (*v53)(uint64_t, uint64_t);
  uint64_t v54;
  uint64_t v55;
  void (*v56)(uint64_t, uint64_t, uint64_t);
  uint32_t v57;
  os_log_type_t v58;
  NSObject *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint8_t *v63;
  uint64_t v64;
  uint64_t v65;
  id v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  void (*v72)(uint64_t, uint64_t, uint64_t);
  id v73;
  uint32_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  _QWORD *v80;
  NSObject *v81;
  os_log_type_t v82;
  uint64_t v83;
  uint64_t v84;
  void (*v85)(uint64_t, uint64_t);
  id v86;
  id v87;
  char *v88;
  uint64_t v89;
  uint8_t *v90;
  uint64_t v91;
  uint64_t v92;
  _QWORD *v93;
  uint64_t v94;
  uint64_t v95;
  void (*v96)(uint64_t, uint64_t, uint64_t);
  uint32_t v97;
  os_log_type_t v98;
  NSObject *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  void (*v103)(uint64_t, uint64_t);
  NSString *identifier;
  uint64_t v105;
  uint64_t v106;
  uint8_t *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  void (*v113)(uint64_t, uint64_t, uint64_t);
  id v114;
  uint32_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  _QWORD *v121;
  NSObject *v122;
  os_log_type_t v123;
  id v124;
  char v125;
  uint64_t v126;
  uint64_t v127;
  void (*v128)(uint64_t, uint64_t);
  id v129;
  id v130;
  char *v131;
  char *v132;
  uint64_t v133;
  uint64_t v134;
  uint8_t *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  void (*v140)(uint64_t, uint64_t, uint64_t);
  id v141;
  uint32_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  _QWORD *v153;
  NSObject *v154;
  os_log_type_t v155;
  uint64_t v156;
  uint64_t v157;
  void (*v158)(uint64_t, uint64_t);
  void *v159;
  uint64_t v160;
  uint64_t v161;
  uint8_t *v162;
  uint64_t v163;
  uint64_t v164;
  _QWORD *v165;
  uint64_t v166;
  uint64_t v167;
  void (*v168)(uint64_t, uint64_t, uint64_t);
  uint32_t v169;
  os_log_type_t v170;
  NSObject *v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  void (*v175)(uint64_t, uint64_t);
  uint64_t v176;
  uint64_t v177;
  uint8_t *v178;
  uint64_t v179;
  uint64_t v180;
  _QWORD *v181;
  uint64_t v182;
  uint64_t v183;
  void (*v184)(uint64_t, uint64_t, uint64_t);
  uint32_t v185;
  os_log_type_t v186;
  NSObject *log;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  void (*v191)(uint64_t, uint64_t);
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint8_t *buf;
  uint64_t v196;
  uint64_t v197;
  _QWORD *v198;
  uint64_t v199;
  uint64_t v200;
  void (*v201)(uint64_t, uint64_t, uint64_t);
  uint32_t size;
  os_log_type_t v203;
  NSObject *oslog;
  uint64_t v205;
  uint64_t v206;
  id v207;
  uint64_t v208;
  uint64_t v209;
  uint8_t *v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t (*v213)(uint64_t, uint64_t, uint64_t);
  uint64_t v214;
  uint8_t *v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t (*v218)(uint64_t, uint64_t, uint64_t);
  uint64_t v219;
  uint8_t *v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t (*v223)(uint64_t, uint64_t, uint64_t);
  uint64_t v224;

  v207 = (id)v0[154];
  v0[57] = v0;
  v208 = v0[155];
  v0[156] = v207;
  v209 = v0[122];
  v0[64] = v207;
  swift_bridgeObjectRetain();
  if (v209)
  {
    v1 = *(_QWORD *)(v206 + 976);
    v201 = *(void (**)(uint64_t, uint64_t, uint64_t))(v206 + 1160);
    v2 = *(_QWORD *)(v206 + 1144);
    v200 = *(_QWORD *)(v206 + 1048);
    *(_QWORD *)(v206 + 440) = *(_QWORD *)(v206 + 968);
    *(_QWORD *)(v206 + 448) = v1;
    v199 = Logger.wellnessIntents.unsafeMutableAddressor();
    swift_beginAccess();
    v201(v2, v199, v200);
    swift_endAccess();
    oslog = Logger.logObject.getter();
    v203 = static os_log_type_t.debug.getter();
    *(_QWORD *)(v206 + 872) = 2;
    UnsignedInteger<>.init<A>(_:)();
    size = *(_DWORD *)(v206 + 1340);
    v205 = _allocateUninitializedArray<A>(_:)();
    if (os_log_type_enabled(oslog, v203))
    {
      buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      v194 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      v196 = createStorage<A>(capacity:type:)(0);
      v197 = createStorage<A>(capacity:type:)(0);
      *(_QWORD *)(v206 + 880) = buf;
      *(_QWORD *)(v206 + 888) = v196;
      *(_QWORD *)(v206 + 896) = v197;
      serialize(_:at:)(0, (_BYTE **)(v206 + 880));
      serialize(_:at:)(0, (_BYTE **)(v206 + 880));
      *(_QWORD *)(v206 + 904) = v205;
      v198 = (_QWORD *)swift_task_alloc();
      v198[2] = v206 + 880;
      v198[3] = v206 + 888;
      v198[4] = v206 + 896;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
      lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
      result = Sequence.forEach(_:)();
      if (v208)
        return result;
      swift_task_dealloc();
      _os_log_impl(&dword_24749F000, oslog, v203, "Trying to convert unit to HKUnit.", buf, size);
      destroyStorage<A>(_:count:)(v196, 0, v194);
      destroyStorage<A>(_:count:)(v197, 0, MEMORY[0x24BEE4AD8] + 8);
      MEMORY[0x24957D398](buf, MEMORY[0x24BEE4260]);
      swift_bridgeObjectRelease();
      v193 = 0;
    }
    else
    {
      swift_bridgeObjectRelease();
      v193 = v208;
    }
    v191 = *(void (**)(uint64_t, uint64_t))(v206 + 1200);
    v189 = *(_QWORD *)(v206 + 1144);
    v190 = *(_QWORD *)(v206 + 1048);

    v191(v189, v190);
    *(_QWORD *)(v206 + 504) = HealthKitPersistor.getHKUnit(from:)();
    swift_bridgeObjectRelease();
    v192 = v193;
  }
  else
  {
    v184 = *(void (**)(uint64_t, uint64_t, uint64_t))(v206 + 1160);
    v4 = *(_QWORD *)(v206 + 1136);
    v183 = *(_QWORD *)(v206 + 1048);
    v182 = Logger.wellnessIntents.unsafeMutableAddressor();
    swift_beginAccess();
    v184(v4, v182, v183);
    swift_endAccess();
    log = Logger.logObject.getter();
    v186 = static os_log_type_t.debug.getter();
    *(_QWORD *)(v206 + 520) = 2;
    UnsignedInteger<>.init<A>(_:)();
    v185 = *(_DWORD *)(v206 + 1300);
    v188 = _allocateUninitializedArray<A>(_:)();
    if (os_log_type_enabled(log, v186))
    {
      v178 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      v177 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      v179 = createStorage<A>(capacity:type:)(0);
      v180 = createStorage<A>(capacity:type:)(0);
      *(_QWORD *)(v206 + 840) = v178;
      *(_QWORD *)(v206 + 848) = v179;
      *(_QWORD *)(v206 + 856) = v180;
      serialize(_:at:)(0, (_BYTE **)(v206 + 840));
      serialize(_:at:)(0, (_BYTE **)(v206 + 840));
      *(_QWORD *)(v206 + 864) = v188;
      v181 = (_QWORD *)swift_task_alloc();
      v181[2] = v206 + 840;
      v181[3] = v206 + 848;
      v181[4] = v206 + 856;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
      lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
      result = Sequence.forEach(_:)();
      if (v208)
        return result;
      swift_task_dealloc();
      _os_log_impl(&dword_24749F000, log, v186, "Using preferred unit.", v178, v185);
      destroyStorage<A>(_:count:)(v179, 0, v177);
      destroyStorage<A>(_:count:)(v180, 0, MEMORY[0x24BEE4AD8] + 8);
      MEMORY[0x24957D398](v178, MEMORY[0x24BEE4260]);
      swift_bridgeObjectRelease();
      v176 = 0;
    }
    else
    {
      swift_bridgeObjectRelease();
      v176 = v208;
    }
    v175 = *(void (**)(uint64_t, uint64_t))(v206 + 1200);
    v173 = *(_QWORD *)(v206 + 1136);
    v174 = *(_QWORD *)(v206 + 1048);

    v175(v173, v174);
    v5 = v207;
    *(_QWORD *)(v206 + 504) = v207;
    v192 = v176;
  }
  v168 = *(void (**)(uint64_t, uint64_t, uint64_t))(v206 + 1160);
  v6 = *(_QWORD *)(v206 + 1128);
  v167 = *(_QWORD *)(v206 + 1048);
  v166 = Logger.wellnessIntents.unsafeMutableAddressor();
  swift_beginAccess();
  v168(v6, v166, v167);
  swift_endAccess();
  v171 = Logger.logObject.getter();
  v170 = static os_log_type_t.debug.getter();
  *(_QWORD *)(v206 + 528) = 2;
  UnsignedInteger<>.init<A>(_:)();
  v169 = *(_DWORD *)(v206 + 1304);
  v172 = _allocateUninitializedArray<A>(_:)();
  if (os_log_type_enabled(v171, v170))
  {
    v162 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    v161 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    v163 = createStorage<A>(capacity:type:)(0);
    v164 = createStorage<A>(capacity:type:)(0);
    *(_QWORD *)(v206 + 808) = v162;
    *(_QWORD *)(v206 + 816) = v163;
    *(_QWORD *)(v206 + 824) = v164;
    serialize(_:at:)(0, (_BYTE **)(v206 + 808));
    serialize(_:at:)(0, (_BYTE **)(v206 + 808));
    *(_QWORD *)(v206 + 832) = v172;
    v165 = (_QWORD *)swift_task_alloc();
    v165[2] = v206 + 808;
    v165[3] = v206 + 816;
    v165[4] = v206 + 824;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
    lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
    result = Sequence.forEach(_:)();
    if (v192)
      return result;
    swift_task_dealloc();
    _os_log_impl(&dword_24749F000, v171, v170, "Starting to convert optional HKUnit to non-optional HKUnit.", v162, v169);
    destroyStorage<A>(_:count:)(v163, 0, v161);
    destroyStorage<A>(_:count:)(v164, 0, MEMORY[0x24BEE4AD8] + 8);
    MEMORY[0x24957D398](v162, MEMORY[0x24BEE4260]);
    swift_bridgeObjectRelease();
    v160 = 0;
  }
  else
  {
    swift_bridgeObjectRelease();
    v160 = v192;
  }
  v158 = *(void (**)(uint64_t, uint64_t))(v206 + 1200);
  v156 = *(_QWORD *)(v206 + 1128);
  v157 = *(_QWORD *)(v206 + 1048);

  v158(v156, v157);
  v159 = *(void **)(v206 + 504);
  *(_QWORD *)(v206 + 1256) = v159;
  v7 = v159;
  if (!v159)
  {
    v37 = *(void (**)(uint64_t, uint64_t, uint64_t))(v206 + 1160);
    v23 = *(_QWORD *)(v206 + 1072);
    v36 = *(_QWORD *)(v206 + 1048);
    v35 = Logger.wellnessIntents.unsafeMutableAddressor();
    swift_beginAccess();
    v37(v23, v35, v36);
    swift_endAccess();
    v40 = Logger.logObject.getter();
    v39 = static os_log_type_t.error.getter();
    *(_QWORD *)(v206 + 536) = 2;
    UnsignedInteger<>.init<A>(_:)();
    v38 = *(_DWORD *)(v206 + 1308);
    v41 = _allocateUninitializedArray<A>(_:)();
    if (os_log_type_enabled(v40, v39))
    {
      v31 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      v32 = createStorage<A>(capacity:type:)(0);
      v33 = createStorage<A>(capacity:type:)(0);
      *(_QWORD *)(v206 + 544) = v31;
      *(_QWORD *)(v206 + 552) = v32;
      *(_QWORD *)(v206 + 560) = v33;
      serialize(_:at:)(0, (_BYTE **)(v206 + 544));
      serialize(_:at:)(0, (_BYTE **)(v206 + 544));
      *(_QWORD *)(v206 + 568) = v41;
      v34 = (_QWORD *)swift_task_alloc();
      v34[2] = v206 + 544;
      v34[3] = v206 + 552;
      v34[4] = v206 + 560;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
      lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
      result = Sequence.forEach(_:)();
      if (v160)
        return result;
      swift_task_dealloc();
      _os_log_impl(&dword_24749F000, v40, v39, "Could not create an HKUnit.", v31, v38);
      destroyStorage<A>(_:count:)(v32, 0, v30);
      destroyStorage<A>(_:count:)(v33, 0, MEMORY[0x24BEE4AD8] + 8);
      MEMORY[0x24957D398](v31, MEMORY[0x24BEE4260]);
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    v27 = *(id *)(v206 + 1216);
    v28 = *(id *)(v206 + 1208);
    v26 = *(void (**)(uint64_t, uint64_t))(v206 + 1200);
    v24 = *(_QWORD *)(v206 + 1072);
    v25 = *(_QWORD *)(v206 + 1048);

    v26(v24, v25);
    type metadata accessor for LogQuantityIntentResponse();
    v29 = LogQuantityIntentResponse.__allocating_init(code:userActivity:)(5, 0);

    outlined destroy of HealthKitPersistor((id *)(v206 + 504));
    v132 = v29;
    goto LABEL_58;
  }
  v8 = *(void **)(v206 + 1216);
  *(_QWORD *)(v206 + 576) = v159;
  if ((objc_msgSend(v8, sel_isCompatibleWithUnit_) & 1) != 0)
  {
    *(_QWORD *)(v206 + 584) = *(_QWORD *)(v206 + 960);
    type metadata accessor for NSObject();
    v124 = objc_msgSend((id)objc_opt_self(), sel_percentUnit);
    v125 = static NSObject.== infix(_:_:)();

    if ((v125 & 1) != 0)
      *(double *)(v206 + 584) = *(double *)(v206 + 960) / 100.0;
    v113 = *(void (**)(uint64_t, uint64_t, uint64_t))(v206 + 1160);
    v110 = *(_QWORD *)(v206 + 1112);
    v112 = *(_QWORD *)(v206 + 1048);
    type metadata accessor for HKQuantity();
    v13 = v159;
    v114 = @nonobjc HKQuantity.__allocating_init(unit:doubleValue:)(v159, *(double *)(v206 + 584));
    *(_QWORD *)(v206 + 1264) = v114;
    *(_QWORD *)(v206 + 592) = v114;
    v111 = Logger.wellnessIntents.unsafeMutableAddressor();
    swift_beginAccess();
    v113(v110, v111, v112);
    swift_endAccess();
    v14 = v114;
    v116 = swift_allocObject();
    *(_QWORD *)(v116 + 16) = v114;
    v122 = Logger.logObject.getter();
    v123 = static os_log_type_t.debug.getter();
    *(_QWORD *)(v206 + 600) = 12;
    UnsignedInteger<>.init<A>(_:)();
    v115 = *(_DWORD *)(v206 + 1312);
    v118 = swift_allocObject();
    *(_BYTE *)(v118 + 16) = 64;
    v119 = swift_allocObject();
    *(_BYTE *)(v119 + 16) = 8;
    v117 = swift_allocObject();
    *(_QWORD *)(v117 + 16) = partial apply for implicit closure #3 in LogQuantityIntentHandler.handle(intent:);
    *(_QWORD *)(v117 + 24) = v116;
    v120 = swift_allocObject();
    *(_QWORD *)(v120 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:);
    *(_QWORD *)(v120 + 24) = v117;
    _allocateUninitializedArray<A>(_:)();
    v121 = v15;
    swift_retain();
    *v121 = partial apply for closure #1 in OSLogArguments.append(_:);
    v121[1] = v118;
    swift_retain();
    v121[2] = partial apply for closure #1 in OSLogArguments.append(_:);
    v121[3] = v119;
    swift_retain();
    v121[4] = partial apply for closure #1 in OSLogArguments.append(_:);
    v121[5] = v120;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(v122, v123))
    {
      v107 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      v106 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      v108 = createStorage<A>(capacity:type:)(1);
      v109 = createStorage<A>(capacity:type:)(0);
      v215 = v107;
      v216 = v108;
      v217 = v109;
      serialize(_:at:)(2, &v215);
      serialize(_:at:)(1, &v215);
      v218 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v219 = v118;
      result = closure #1 in osLogInternal(_:log:type:)(&v218, (uint64_t)&v215, (uint64_t)&v216, (uint64_t)&v217);
      if (v160)
        return result;
      v218 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v219 = v119;
      closure #1 in osLogInternal(_:log:type:)(&v218, (uint64_t)&v215, (uint64_t)&v216, (uint64_t)&v217);
      v218 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v219 = v120;
      closure #1 in osLogInternal(_:log:type:)(&v218, (uint64_t)&v215, (uint64_t)&v216, (uint64_t)&v217);
      _os_log_impl(&dword_24749F000, v122, v123, "Created HKQuantity: %@", v107, v115);
      destroyStorage<A>(_:count:)(v108, 1, v106);
      destroyStorage<A>(_:count:)(v109, 0, MEMORY[0x24BEE4AD8] + 8);
      MEMORY[0x24957D398](v107, MEMORY[0x24BEE4260]);
      swift_release();
      swift_release();
      swift_release();
      v105 = 0;
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
      v105 = v160;
    }
    identifier = *(NSString **)(v206 + 1208);
    v103 = *(void (**)(uint64_t, uint64_t))(v206 + 1200);
    v101 = *(_QWORD *)(v206 + 1112);
    v102 = *(_QWORD *)(v206 + 1048);

    v103(v101, v102);
    if (!validateQuantity(identifier:quantity:)(identifier, (HKQuantity)v114))
    {
      v96 = *(void (**)(uint64_t, uint64_t, uint64_t))(v206 + 1160);
      v16 = *(_QWORD *)(v206 + 1104);
      v95 = *(_QWORD *)(v206 + 1048);
      v94 = Logger.wellnessIntents.unsafeMutableAddressor();
      swift_beginAccess();
      v96(v16, v94, v95);
      swift_endAccess();
      v99 = Logger.logObject.getter();
      v98 = static os_log_type_t.error.getter();
      *(_QWORD *)(v206 + 760) = 2;
      UnsignedInteger<>.init<A>(_:)();
      v97 = *(_DWORD *)(v206 + 1332);
      v100 = _allocateUninitializedArray<A>(_:)();
      if (os_log_type_enabled(v99, v98))
      {
        v90 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
        v89 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
        v91 = createStorage<A>(capacity:type:)(0);
        v92 = createStorage<A>(capacity:type:)(0);
        *(_QWORD *)(v206 + 768) = v90;
        *(_QWORD *)(v206 + 776) = v91;
        *(_QWORD *)(v206 + 784) = v92;
        serialize(_:at:)(0, (_BYTE **)(v206 + 768));
        serialize(_:at:)(0, (_BYTE **)(v206 + 768));
        *(_QWORD *)(v206 + 792) = v100;
        v93 = (_QWORD *)swift_task_alloc();
        v93[2] = v206 + 768;
        v93[3] = v206 + 776;
        v93[4] = v206 + 784;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
        lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
        result = Sequence.forEach(_:)();
        if (v105)
          return result;
        swift_task_dealloc();
        _os_log_impl(&dword_24749F000, v99, v98, "Quantity validation failed - value outside valid bounds.", v90, v97);
        destroyStorage<A>(_:count:)(v91, 0, v89);
        destroyStorage<A>(_:count:)(v92, 0, MEMORY[0x24BEE4AD8] + 8);
        MEMORY[0x24957D398](v90, MEMORY[0x24BEE4260]);
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRelease();
      }
      v86 = *(id *)(v206 + 1216);
      v87 = *(id *)(v206 + 1208);
      v85 = *(void (**)(uint64_t, uint64_t))(v206 + 1200);
      v83 = *(_QWORD *)(v206 + 1104);
      v84 = *(_QWORD *)(v206 + 1048);

      v85(v83, v84);
      type metadata accessor for LogQuantityIntentResponse();
      v88 = LogQuantityIntentResponse.__allocating_init(code:userActivity:)(102, 0);

      outlined destroy of HealthKitPersistor((id *)(v206 + 504));
      v132 = v88;
      goto LABEL_58;
    }
    v66 = *(id *)(v206 + 1216);
    v72 = *(void (**)(uint64_t, uint64_t, uint64_t))(v206 + 1160);
    v69 = *(_QWORD *)(v206 + 1096);
    v71 = *(_QWORD *)(v206 + 1048);
    v67 = *(_QWORD *)(v206 + 1040);
    v68 = *(_QWORD *)(v206 + 1032);
    type metadata accessor for HKQuantitySample();
    v17 = v66;
    v18 = v114;
    Date.init()();
    Date.init()();
    v73 = @nonobjc HKQuantitySample.__allocating_init(type:quantity:start:end:)(v66, v114, v67, v68);
    *(_QWORD *)(v206 + 1272) = v73;
    *(_QWORD *)(v206 + 608) = v73;
    v70 = Logger.wellnessIntents.unsafeMutableAddressor();
    swift_beginAccess();
    v72(v69, v70, v71);
    swift_endAccess();
    v19 = v73;
    v75 = swift_allocObject();
    *(_QWORD *)(v75 + 16) = v73;
    v81 = Logger.logObject.getter();
    v82 = static os_log_type_t.debug.getter();
    *(_QWORD *)(v206 + 616) = 12;
    UnsignedInteger<>.init<A>(_:)();
    v74 = *(_DWORD *)(v206 + 1316);
    v77 = swift_allocObject();
    *(_BYTE *)(v77 + 16) = 64;
    v78 = swift_allocObject();
    *(_BYTE *)(v78 + 16) = 8;
    v76 = swift_allocObject();
    *(_QWORD *)(v76 + 16) = partial apply for implicit closure #3 in LogQuantityIntentHandler.handle(intent:);
    *(_QWORD *)(v76 + 24) = v75;
    v79 = swift_allocObject();
    *(_QWORD *)(v79 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:);
    *(_QWORD *)(v79 + 24) = v76;
    _allocateUninitializedArray<A>(_:)();
    v80 = v20;
    swift_retain();
    *v80 = partial apply for closure #1 in OSLogArguments.append(_:);
    v80[1] = v77;
    swift_retain();
    v80[2] = partial apply for closure #1 in OSLogArguments.append(_:);
    v80[3] = v78;
    swift_retain();
    v80[4] = partial apply for closure #1 in OSLogArguments.append(_:);
    v80[5] = v79;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(v81, v82))
    {
      v63 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      v62 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      v64 = createStorage<A>(capacity:type:)(1);
      v65 = createStorage<A>(capacity:type:)(0);
      v210 = v63;
      v211 = v64;
      v212 = v65;
      serialize(_:at:)(2, &v210);
      serialize(_:at:)(1, &v210);
      v213 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v214 = v77;
      result = closure #1 in osLogInternal(_:log:type:)(&v213, (uint64_t)&v210, (uint64_t)&v211, (uint64_t)&v212);
      if (v105)
        return result;
      v213 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v214 = v78;
      closure #1 in osLogInternal(_:log:type:)(&v213, (uint64_t)&v210, (uint64_t)&v211, (uint64_t)&v212);
      v213 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v214 = v79;
      closure #1 in osLogInternal(_:log:type:)(&v213, (uint64_t)&v210, (uint64_t)&v211, (uint64_t)&v212);
      _os_log_impl(&dword_24749F000, v81, v82, "Created HKQuantitySample: %@", v63, v74);
      destroyStorage<A>(_:count:)(v64, 1, v62);
      destroyStorage<A>(_:count:)(v65, 0, MEMORY[0x24BEE4AD8] + 8);
      MEMORY[0x24957D398](v63, MEMORY[0x24BEE4260]);
      swift_release();
      swift_release();
      swift_release();
      v61 = 0;
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
      v61 = v105;
    }
    v53 = *(void (**)(uint64_t, uint64_t))(v206 + 1200);
    v56 = *(void (**)(uint64_t, uint64_t, uint64_t))(v206 + 1160);
    v52 = *(_QWORD *)(v206 + 1096);
    v21 = *(_QWORD *)(v206 + 1088);
    v55 = *(_QWORD *)(v206 + 1048);

    v53(v52, v55);
    v54 = Logger.wellnessIntents.unsafeMutableAddressor();
    swift_beginAccess();
    v56(v21, v54, v55);
    swift_endAccess();
    v59 = Logger.logObject.getter();
    v58 = static os_log_type_t.debug.getter();
    *(_QWORD *)(v206 + 624) = 2;
    UnsignedInteger<>.init<A>(_:)();
    v57 = *(_DWORD *)(v206 + 1320);
    v60 = _allocateUninitializedArray<A>(_:)();
    if (os_log_type_enabled(v59, v58))
    {
      v48 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      v47 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      v49 = createStorage<A>(capacity:type:)(0);
      v50 = createStorage<A>(capacity:type:)(0);
      *(_QWORD *)(v206 + 728) = v48;
      *(_QWORD *)(v206 + 736) = v49;
      *(_QWORD *)(v206 + 744) = v50;
      serialize(_:at:)(0, (_BYTE **)(v206 + 728));
      serialize(_:at:)(0, (_BYTE **)(v206 + 728));
      *(_QWORD *)(v206 + 752) = v60;
      v51 = (_QWORD *)swift_task_alloc();
      v51[2] = v206 + 728;
      v51[3] = v206 + 736;
      v51[4] = v206 + 744;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
      lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
      result = Sequence.forEach(_:)();
      if (v61)
        return result;
      swift_task_dealloc();
      _os_log_impl(&dword_24749F000, v59, v58, "Trying to save to store.", v48, v57);
      destroyStorage<A>(_:count:)(v49, 0, v47);
      destroyStorage<A>(_:count:)(v50, 0, MEMORY[0x24BEE4AD8] + 8);
      MEMORY[0x24957D398](v48, MEMORY[0x24BEE4260]);
      swift_bridgeObjectRelease();
      v46 = 0;
    }
    else
    {
      swift_bridgeObjectRelease();
      v46 = v61;
    }
    *(_QWORD *)(v206 + 1280) = v46;
    v44 = *(void (**)(uint64_t, uint64_t))(v206 + 1200);
    v42 = *(_QWORD *)(v206 + 1088);
    v43 = *(_QWORD *)(v206 + 1048);
    v45 = *(id *)(v206 + 984);

    v44(v42, v43);
    v22 = v45;
    *(_QWORD *)(v206 + 16) = *(_QWORD *)(v206 + 456);
    *(_QWORD *)(v206 + 56) = v133;
    *(_QWORD *)(v206 + 24) = HealthKitPersistor.save(quantityIdentifier:value:units:);
    *(_QWORD *)(v206 + 112) = swift_continuation_init();
    *(_QWORD *)(v206 + 80) = MEMORY[0x24BDAC760];
    *(_DWORD *)(v206 + 88) = 0x40000000;
    *(_DWORD *)(v206 + 92) = 0;
    *(_QWORD *)(v206 + 96) = @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned Bool, @unowned NSError?) -> () with result type () zero on error;
    *(_QWORD *)(v206 + 104) = &block_descriptor;
    objc_msgSend(v45, sel_saveObject_withCompletion_, v73, v206 + 80);
    return __swift_continuation_await_point(v206 + 16);
  }
  v141 = *(id *)(v206 + 1216);
  v140 = *(void (**)(uint64_t, uint64_t, uint64_t))(v206 + 1160);
  v9 = *(_QWORD *)(v206 + 1120);
  v139 = *(_QWORD *)(v206 + 1048);
  v138 = Logger.wellnessIntents.unsafeMutableAddressor();
  swift_beginAccess();
  v140(v9, v138, v139);
  swift_endAccess();
  v10 = v159;
  v143 = swift_allocObject();
  *(_QWORD *)(v143 + 16) = v159;
  v11 = v141;
  v145 = swift_allocObject();
  *(_QWORD *)(v145 + 16) = v141;
  v154 = Logger.logObject.getter();
  v155 = static os_log_type_t.error.getter();
  *(_QWORD *)(v206 + 800) = 22;
  UnsignedInteger<>.init<A>(_:)();
  v142 = *(_DWORD *)(v206 + 1336);
  v147 = swift_allocObject();
  *(_BYTE *)(v147 + 16) = 64;
  v148 = swift_allocObject();
  *(_BYTE *)(v148 + 16) = 8;
  v144 = swift_allocObject();
  *(_QWORD *)(v144 + 16) = partial apply for implicit closure #3 in LogQuantityIntentHandler.handle(intent:);
  *(_QWORD *)(v144 + 24) = v143;
  v149 = swift_allocObject();
  *(_QWORD *)(v149 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:);
  *(_QWORD *)(v149 + 24) = v144;
  v150 = swift_allocObject();
  *(_BYTE *)(v150 + 16) = 64;
  v151 = swift_allocObject();
  *(_BYTE *)(v151 + 16) = 8;
  v146 = swift_allocObject();
  *(_QWORD *)(v146 + 16) = partial apply for implicit closure #3 in LogQuantityIntentHandler.handle(intent:);
  *(_QWORD *)(v146 + 24) = v145;
  v152 = swift_allocObject();
  *(_QWORD *)(v152 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:);
  *(_QWORD *)(v152 + 24) = v146;
  _allocateUninitializedArray<A>(_:)();
  v153 = v12;
  swift_retain();
  *v153 = partial apply for closure #1 in OSLogArguments.append(_:);
  v153[1] = v147;
  swift_retain();
  v153[2] = partial apply for closure #1 in OSLogArguments.append(_:);
  v153[3] = v148;
  swift_retain();
  v153[4] = partial apply for closure #1 in OSLogArguments.append(_:);
  v153[5] = v149;
  swift_retain();
  v153[6] = partial apply for closure #1 in OSLogArguments.append(_:);
  v153[7] = v150;
  swift_retain();
  v153[8] = partial apply for closure #1 in OSLogArguments.append(_:);
  v153[9] = v151;
  swift_retain();
  v153[10] = partial apply for closure #1 in OSLogArguments.append(_:);
  v153[11] = v152;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (!os_log_type_enabled(v154, v155))
  {
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    goto LABEL_26;
  }
  v135 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
  v134 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
  v136 = createStorage<A>(capacity:type:)(2);
  v137 = createStorage<A>(capacity:type:)(0);
  v220 = v135;
  v221 = v136;
  v222 = v137;
  serialize(_:at:)(2, &v220);
  serialize(_:at:)(2, &v220);
  v223 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  v224 = v147;
  result = closure #1 in osLogInternal(_:log:type:)(&v223, (uint64_t)&v220, (uint64_t)&v221, (uint64_t)&v222);
  if (!v160)
  {
    v223 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v224 = v148;
    closure #1 in osLogInternal(_:log:type:)(&v223, (uint64_t)&v220, (uint64_t)&v221, (uint64_t)&v222);
    v223 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v224 = v149;
    closure #1 in osLogInternal(_:log:type:)(&v223, (uint64_t)&v220, (uint64_t)&v221, (uint64_t)&v222);
    v223 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v224 = v150;
    closure #1 in osLogInternal(_:log:type:)(&v223, (uint64_t)&v220, (uint64_t)&v221, (uint64_t)&v222);
    v223 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v224 = v151;
    closure #1 in osLogInternal(_:log:type:)(&v223, (uint64_t)&v220, (uint64_t)&v221, (uint64_t)&v222);
    v223 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v224 = v152;
    closure #1 in osLogInternal(_:log:type:)(&v223, (uint64_t)&v220, (uint64_t)&v221, (uint64_t)&v222);
    _os_log_impl(&dword_24749F000, v154, v155, "%@ is incompatible with %@.", v135, v142);
    destroyStorage<A>(_:count:)(v136, 2, v134);
    destroyStorage<A>(_:count:)(v137, 0, MEMORY[0x24BEE4AD8] + 8);
    MEMORY[0x24957D398](v135, MEMORY[0x24BEE4260]);
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
LABEL_26:
    v129 = *(id *)(v206 + 1216);
    v130 = *(id *)(v206 + 1208);
    v128 = *(void (**)(uint64_t, uint64_t))(v206 + 1200);
    v126 = *(_QWORD *)(v206 + 1120);
    v127 = *(_QWORD *)(v206 + 1048);

    v128(v126, v127);
    type metadata accessor for LogQuantityIntentResponse();
    v131 = LogQuantityIntentResponse.__allocating_init(code:userActivity:)(102, 0);

    outlined destroy of HealthKitPersistor((id *)(v206 + 504));
    v132 = v131;
LABEL_58:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(char *))(*(_QWORD *)(v206 + 456) + 8))(v132);
  }
  return result;
}

{
  _QWORD *v0;
  _QWORD *v1;

  v1 = (_QWORD *)*v0;
  v1[57] = *v0;
  v1[161] = v1[6];
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t result;
  id v5;
  id v6;
  double v7;
  double v8;
  id v9;
  Swift::String v10;
  _QWORD *v11;
  id v12;
  id v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  Class v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  id v31;
  id v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(uint64_t, uint64_t);
  uint64_t v37;
  id v38;
  Class isa;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(uint64_t, uint64_t);
  id v43;
  Class v44;
  id v45;
  id v46;
  double v47;
  Swift::Double value;
  id store;
  char *v50;
  id v51;
  _QWORD *v52;
  uint64_t v53;
  HKUnit v54;
  uint64_t v55;
  uint8_t *buf;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void (*v63)(uint64_t, uint64_t, uint64_t);
  uint32_t v64;
  os_log_type_t v65;
  NSObject *v66;
  uint64_t v67;
  HKHealthStore_optional v68;
  Swift::Double_optional v69;

  v63 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1160);
  v1 = *(_QWORD *)(v0 + 1080);
  v62 = *(_QWORD *)(v0 + 1048);
  v2 = *(void **)(v0 + 984);
  *(_QWORD *)(v0 + 456) = v0;

  v61 = Logger.wellnessIntents.unsafeMutableAddressor();
  swift_beginAccess();
  v63(v1, v61, v62);
  swift_endAccess();
  v66 = Logger.logObject.getter();
  v65 = static os_log_type_t.debug.getter();
  *(_QWORD *)(v0 + 648) = 2;
  UnsignedInteger<>.init<A>(_:)();
  v64 = *(_DWORD *)(v0 + 1328);
  v67 = _allocateUninitializedArray<A>(_:)();
  if (os_log_type_enabled(v66, v65))
  {
    v3 = *(_QWORD *)(v60 + 1280);
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    v55 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    v57 = createStorage<A>(capacity:type:)(0);
    v58 = createStorage<A>(capacity:type:)(0);
    *(_QWORD *)(v60 + 696) = buf;
    *(_QWORD *)(v60 + 704) = v57;
    *(_QWORD *)(v60 + 712) = v58;
    serialize(_:at:)(0, (_BYTE **)(v60 + 696));
    serialize(_:at:)(0, (_BYTE **)(v60 + 696));
    *(_QWORD *)(v60 + 720) = v67;
    v59 = (_QWORD *)swift_task_alloc();
    v59[2] = v60 + 696;
    v59[3] = v60 + 704;
    v59[4] = v60 + 712;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
    lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
    result = Sequence.forEach(_:)();
    if (v3)
      return result;
    swift_task_dealloc();
    _os_log_impl(&dword_24749F000, v66, v65, "Getting intent response.", buf, v64);
    destroyStorage<A>(_:count:)(v57, 0, v55);
    destroyStorage<A>(_:count:)(v58, 0, MEMORY[0x24BEE4AD8] + 8);
    MEMORY[0x24957D398](buf, MEMORY[0x24BEE4260]);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  v45 = *(id *)(v60 + 1272);
  v36 = *(void (**)(uint64_t, uint64_t))(v60 + 1200);
  v34 = *(_QWORD *)(v60 + 1080);
  v35 = *(_QWORD *)(v60 + 1048);
  v40 = *(_QWORD *)(v60 + 1040);
  v37 = *(_QWORD *)(v60 + 1024);
  v41 = *(_QWORD *)(v60 + 1016);
  store = *(id *)(v60 + 984);
  v54.super.isa = *(Class *)(v60 + 1256);

  v36(v34, v35);
  type metadata accessor for LogQuantityIntentResponse();
  v50 = LogQuantityIntentResponse.__allocating_init(code:userActivity:)(4, 0);
  *(_QWORD *)(v60 + 656) = v50;
  v5 = v45;
  v38 = objc_msgSend(v45, sel_startDate);
  static Date._unconditionallyBridgeFromObjectiveC(_:)();
  isa = Date._bridgeToObjectiveC()().super.isa;

  v42 = *(void (**)(uint64_t, uint64_t))(v37 + 8);
  v42(v40, v41);

  objc_msgSend(v50, sel_setStart_, isa);
  v6 = v45;
  v43 = objc_msgSend(v45, sel_endDate);
  static Date._unconditionallyBridgeFromObjectiveC(_:)();
  v44 = Date._bridgeToObjectiveC()().super.isa;

  v42(v40, v41);
  objc_msgSend(v50, sel_setEnd_, v44);

  v46 = objc_msgSend(v45, sel_quantity);
  objc_msgSend(v46, sel_doubleValueForUnit_, v54.super.isa);
  v47 = v7;

  objc_msgSend(v50, sel_setDoubleValue_, v47);
  objc_msgSend(v50, sel_doubleValue);
  value = v8;
  v9 = store;
  v69.value = value;
  v68.is_nil = (char)store;
  v69.is_nil = LOBYTE(value);
  v68.value.super.isa = 0;
  v10 = localizedUnitName(for:value:store:)(v54, v69, v68);

  v51 = (id)MEMORY[0x24957CFB4](v10._countAndFlagsBits, v10._object);
  swift_bridgeObjectRelease();
  objc_msgSend(v50, sel_setUnits_, v51);

  type metadata accessor for HKUnit();
  v53 = _allocateUninitializedArray<A>(_:)();
  v52 = v11;
  *v11 = objc_msgSend((id)objc_opt_self(), sel_countUnit);
  v52[1] = objc_msgSend((id)objc_opt_self(), sel__countPerMinuteUnit);
  v52[2] = objc_msgSend((id)objc_opt_self(), sel_percentUnit);
  _finalizeUninitializedArray<A>(_:)();
  *(_QWORD *)(v60 + 664) = v53;
  *(_QWORD *)(v60 + 672) = v53;
  *(HKUnit *)(v60 + 680) = v54;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [HKUnit]);
  lazy protocol witness table accessor for type [HKUnit] and conformance [A]();
  lazy protocol witness table accessor for type HKUnit and conformance NSObject();
  if ((Sequence<>.contains(_:)() & 1) != 0)
  {
    v31 = *(id *)(v60 + 1216);
    v32 = *(id *)(v60 + 984);
    v12 = v32;
    v33 = objc_msgSend(v31, sel_hk_metadataValueDisplayTypeInStore_, v32);

    if (v33)
    {
      v27 = *(id *)(v60 + 984);
      *(_QWORD *)(v60 + 688) = v33;
      v13 = v27;
      v28 = localizedUnitName(for:store:)((uint64_t)v33, v27);
      v29 = v14;

      v30 = (id)MEMORY[0x24957CFB4](v28, v29);
      swift_bridgeObjectRelease();
      objc_msgSend(v50, sel_setUnits_, v30);

    }
  }
  v21 = *(id *)(v60 + 1272);
  v22 = *(id *)(v60 + 1264);
  v24 = *(id *)(v60 + 1248);
  v25 = *(id *)(v60 + 1216);
  v26 = *(id *)(v60 + 1208);
  v17 = *(_QWORD *)(v60 + 1008);
  v16 = *(_QWORD *)(v60 + 1000);
  v18 = *(_QWORD *)(v60 + 992);
  v23 = *(id *)(v60 + 1256);
  v15 = v21;
  v19 = objc_msgSend(v21, sel_UUID);
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();
  v20 = UUID._bridgeToObjectiveC()().super.isa;

  (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v17, v18);
  objc_msgSend(v50, sel_setUuidOfLastSavedSample_, v20);

  swift_bridgeObjectRelease();
  outlined destroy of HealthKitPersistor((id *)(v60 + 504));

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(char *))(*(_QWORD *)(v60 + 456) + 8))(v50);
}

{
  _QWORD *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  uint64_t v6;
  id v7;
  void *v8;
  uint64_t v9;
  id v10;
  id v11;
  _QWORD *v12;
  id v13;
  id v14;
  _QWORD *v15;
  uint64_t v16;
  id v17;
  id v18;
  id v19;
  _QWORD *v20;
  uint64_t v21;
  id v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(uint64_t, uint64_t);
  id v28;
  id v29;
  char *v30;
  uint64_t v31;
  uint8_t *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(uint64_t, uint64_t, uint64_t);
  uint32_t v39;
  os_log_type_t v40;
  NSObject *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void (*v45)(uint64_t, uint64_t);
  id v46;
  uint64_t v47;
  uint8_t *v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  void (*v53)(uint64_t, uint64_t);
  uint64_t v54;
  uint64_t v55;
  void (*v56)(uint64_t, uint64_t, uint64_t);
  uint32_t v57;
  os_log_type_t v58;
  NSObject *v59;
  uint64_t v60;
  uint64_t v61;
  uint8_t *v62;
  uint64_t v63;
  uint64_t v64;
  id v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  void (*v71)(uint64_t, uint64_t, uint64_t);
  id v72;
  uint32_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  NSObject *v80;
  os_log_type_t v81;
  uint64_t v82;
  uint64_t v83;
  void (*v84)(uint64_t, uint64_t);
  id v85;
  id v86;
  char *v87;
  uint64_t v88;
  uint8_t *v89;
  uint64_t v90;
  uint64_t v91;
  _QWORD *v92;
  uint64_t v93;
  uint64_t v94;
  void (*v95)(uint64_t, uint64_t, uint64_t);
  uint32_t v96;
  os_log_type_t v97;
  NSObject *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  void (*v102)(uint64_t, uint64_t);
  NSString *identifier;
  uint64_t v104;
  uint8_t *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  void (*v111)(uint64_t, uint64_t, uint64_t);
  id v112;
  uint32_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  _QWORD *v119;
  NSObject *v120;
  os_log_type_t v121;
  id v122;
  char v123;
  uint64_t v124;
  uint64_t v125;
  void (*v126)(uint64_t, uint64_t);
  id v127;
  id v128;
  char *v129;
  char *v130;
  uint64_t v131;
  uint64_t v132;
  uint8_t *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  void (*v138)(uint64_t, uint64_t, uint64_t);
  id v139;
  uint32_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  _QWORD *v151;
  NSObject *v152;
  os_log_type_t v153;
  uint64_t v154;
  uint64_t v155;
  void (*v156)(uint64_t, uint64_t);
  void *v157;
  uint64_t v158;
  uint8_t *v159;
  uint64_t v160;
  uint64_t v161;
  _QWORD *v162;
  uint64_t v163;
  uint64_t v164;
  void (*v165)(uint64_t, uint64_t, uint64_t);
  uint32_t v166;
  os_log_type_t v167;
  NSObject *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  void (*v172)(uint64_t, uint64_t);
  uint64_t v173;
  uint8_t *v174;
  uint64_t v175;
  uint64_t v176;
  _QWORD *v177;
  uint64_t v178;
  uint64_t v179;
  void (*v180)(uint64_t, uint64_t, uint64_t);
  uint32_t v181;
  os_log_type_t v182;
  NSObject *log;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  void (*v187)(uint64_t, uint64_t);
  uint64_t v188;
  uint8_t *buf;
  uint64_t v190;
  uint64_t v191;
  _QWORD *v192;
  uint64_t v193;
  uint64_t v194;
  void (*v195)(uint64_t, uint64_t, uint64_t);
  uint32_t size;
  os_log_type_t v197;
  NSObject *oslog;
  uint64_t v199;
  uint64_t v200;
  void *v201;
  uint64_t v202;
  uint8_t *v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t (*v206)(uint64_t, uint64_t, uint64_t);
  uint64_t v207;
  uint8_t *v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t (*v211)(uint64_t, uint64_t, uint64_t);
  uint64_t v212;
  uint8_t *v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t (*v216)(uint64_t, uint64_t, uint64_t);
  uint64_t v217;

  v201 = (void *)v0[155];
  v1 = (void *)v0[123];
  v0[57] = v0;

  v0[156] = 0;
  v202 = v0[122];
  v0[64] = 0;
  swift_bridgeObjectRetain();
  if (v202)
  {
    v2 = *(_QWORD *)(v200 + 976);
    v195 = *(void (**)(uint64_t, uint64_t, uint64_t))(v200 + 1160);
    v3 = *(_QWORD *)(v200 + 1144);
    v194 = *(_QWORD *)(v200 + 1048);
    *(_QWORD *)(v200 + 440) = *(_QWORD *)(v200 + 968);
    *(_QWORD *)(v200 + 448) = v2;
    v193 = Logger.wellnessIntents.unsafeMutableAddressor();
    swift_beginAccess();
    v195(v3, v193, v194);
    swift_endAccess();
    oslog = Logger.logObject.getter();
    v197 = static os_log_type_t.debug.getter();
    *(_QWORD *)(v200 + 872) = 2;
    UnsignedInteger<>.init<A>(_:)();
    size = *(_DWORD *)(v200 + 1340);
    v199 = _allocateUninitializedArray<A>(_:)();
    if (os_log_type_enabled(oslog, v197))
    {
      buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      v188 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      v190 = createStorage<A>(capacity:type:)(0);
      v191 = createStorage<A>(capacity:type:)(0);
      *(_QWORD *)(v200 + 880) = buf;
      *(_QWORD *)(v200 + 888) = v190;
      *(_QWORD *)(v200 + 896) = v191;
      serialize(_:at:)(0, (_BYTE **)(v200 + 880));
      serialize(_:at:)(0, (_BYTE **)(v200 + 880));
      *(_QWORD *)(v200 + 904) = v199;
      v192 = (_QWORD *)swift_task_alloc();
      v192[2] = v200 + 880;
      v192[3] = v200 + 888;
      v192[4] = v200 + 896;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
      lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
      Sequence.forEach(_:)();
      swift_task_dealloc();
      _os_log_impl(&dword_24749F000, oslog, v197, "Trying to convert unit to HKUnit.", buf, size);
      destroyStorage<A>(_:count:)(v190, 0, v188);
      destroyStorage<A>(_:count:)(v191, 0, MEMORY[0x24BEE4AD8] + 8);
      MEMORY[0x24957D398](buf, MEMORY[0x24BEE4260]);
    }
    swift_bridgeObjectRelease();
    v187 = *(void (**)(uint64_t, uint64_t))(v200 + 1200);
    v185 = *(_QWORD *)(v200 + 1144);
    v186 = *(_QWORD *)(v200 + 1048);

    v187(v185, v186);
    *(_QWORD *)(v200 + 504) = HealthKitPersistor.getHKUnit(from:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    v180 = *(void (**)(uint64_t, uint64_t, uint64_t))(v200 + 1160);
    v4 = *(_QWORD *)(v200 + 1136);
    v179 = *(_QWORD *)(v200 + 1048);
    v178 = Logger.wellnessIntents.unsafeMutableAddressor();
    swift_beginAccess();
    v180(v4, v178, v179);
    swift_endAccess();
    log = Logger.logObject.getter();
    v182 = static os_log_type_t.debug.getter();
    *(_QWORD *)(v200 + 520) = 2;
    UnsignedInteger<>.init<A>(_:)();
    v181 = *(_DWORD *)(v200 + 1300);
    v184 = _allocateUninitializedArray<A>(_:)();
    if (os_log_type_enabled(log, v182))
    {
      v174 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      v173 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      v175 = createStorage<A>(capacity:type:)(0);
      v176 = createStorage<A>(capacity:type:)(0);
      *(_QWORD *)(v200 + 840) = v174;
      *(_QWORD *)(v200 + 848) = v175;
      *(_QWORD *)(v200 + 856) = v176;
      serialize(_:at:)(0, (_BYTE **)(v200 + 840));
      serialize(_:at:)(0, (_BYTE **)(v200 + 840));
      *(_QWORD *)(v200 + 864) = v184;
      v177 = (_QWORD *)swift_task_alloc();
      v177[2] = v200 + 840;
      v177[3] = v200 + 848;
      v177[4] = v200 + 856;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
      lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
      Sequence.forEach(_:)();
      swift_task_dealloc();
      _os_log_impl(&dword_24749F000, log, v182, "Using preferred unit.", v174, v181);
      destroyStorage<A>(_:count:)(v175, 0, v173);
      destroyStorage<A>(_:count:)(v176, 0, MEMORY[0x24BEE4AD8] + 8);
      MEMORY[0x24957D398](v174, MEMORY[0x24BEE4260]);
    }
    swift_bridgeObjectRelease();
    v172 = *(void (**)(uint64_t, uint64_t))(v200 + 1200);
    v170 = *(_QWORD *)(v200 + 1136);
    v171 = *(_QWORD *)(v200 + 1048);

    v172(v170, v171);
    v5 = 0;
    *(_QWORD *)(v200 + 504) = 0;
  }
  v165 = *(void (**)(uint64_t, uint64_t, uint64_t))(v200 + 1160);
  v6 = *(_QWORD *)(v200 + 1128);
  v164 = *(_QWORD *)(v200 + 1048);
  v163 = Logger.wellnessIntents.unsafeMutableAddressor();
  swift_beginAccess();
  v165(v6, v163, v164);
  swift_endAccess();
  v168 = Logger.logObject.getter();
  v167 = static os_log_type_t.debug.getter();
  *(_QWORD *)(v200 + 528) = 2;
  UnsignedInteger<>.init<A>(_:)();
  v166 = *(_DWORD *)(v200 + 1304);
  v169 = _allocateUninitializedArray<A>(_:)();
  if (os_log_type_enabled(v168, v167))
  {
    v159 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    v158 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    v160 = createStorage<A>(capacity:type:)(0);
    v161 = createStorage<A>(capacity:type:)(0);
    *(_QWORD *)(v200 + 808) = v159;
    *(_QWORD *)(v200 + 816) = v160;
    *(_QWORD *)(v200 + 824) = v161;
    serialize(_:at:)(0, (_BYTE **)(v200 + 808));
    serialize(_:at:)(0, (_BYTE **)(v200 + 808));
    *(_QWORD *)(v200 + 832) = v169;
    v162 = (_QWORD *)swift_task_alloc();
    v162[2] = v200 + 808;
    v162[3] = v200 + 816;
    v162[4] = v200 + 824;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
    lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
    Sequence.forEach(_:)();
    swift_task_dealloc();
    _os_log_impl(&dword_24749F000, v168, v167, "Starting to convert optional HKUnit to non-optional HKUnit.", v159, v166);
    destroyStorage<A>(_:count:)(v160, 0, v158);
    destroyStorage<A>(_:count:)(v161, 0, MEMORY[0x24BEE4AD8] + 8);
    MEMORY[0x24957D398](v159, MEMORY[0x24BEE4260]);
  }
  swift_bridgeObjectRelease();
  v156 = *(void (**)(uint64_t, uint64_t))(v200 + 1200);
  v154 = *(_QWORD *)(v200 + 1128);
  v155 = *(_QWORD *)(v200 + 1048);

  v156(v154, v155);
  v157 = *(void **)(v200 + 504);
  *(_QWORD *)(v200 + 1256) = v157;
  v7 = v157;
  if (!v157)
  {
    v38 = *(void (**)(uint64_t, uint64_t, uint64_t))(v200 + 1160);
    v24 = *(_QWORD *)(v200 + 1072);
    v37 = *(_QWORD *)(v200 + 1048);
    v36 = Logger.wellnessIntents.unsafeMutableAddressor();
    swift_beginAccess();
    v38(v24, v36, v37);
    swift_endAccess();
    v41 = Logger.logObject.getter();
    v40 = static os_log_type_t.error.getter();
    *(_QWORD *)(v200 + 536) = 2;
    UnsignedInteger<>.init<A>(_:)();
    v39 = *(_DWORD *)(v200 + 1308);
    v42 = _allocateUninitializedArray<A>(_:)();
    if (os_log_type_enabled(v41, v40))
    {
      v32 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      v33 = createStorage<A>(capacity:type:)(0);
      v34 = createStorage<A>(capacity:type:)(0);
      *(_QWORD *)(v200 + 544) = v32;
      *(_QWORD *)(v200 + 552) = v33;
      *(_QWORD *)(v200 + 560) = v34;
      serialize(_:at:)(0, (_BYTE **)(v200 + 544));
      serialize(_:at:)(0, (_BYTE **)(v200 + 544));
      *(_QWORD *)(v200 + 568) = v42;
      v35 = (_QWORD *)swift_task_alloc();
      v35[2] = v200 + 544;
      v35[3] = v200 + 552;
      v35[4] = v200 + 560;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
      lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
      Sequence.forEach(_:)();
      swift_task_dealloc();
      _os_log_impl(&dword_24749F000, v41, v40, "Could not create an HKUnit.", v32, v39);
      destroyStorage<A>(_:count:)(v33, 0, v31);
      destroyStorage<A>(_:count:)(v34, 0, MEMORY[0x24BEE4AD8] + 8);
      MEMORY[0x24957D398](v32, MEMORY[0x24BEE4260]);
    }
    swift_bridgeObjectRelease();
    v28 = *(id *)(v200 + 1216);
    v29 = *(id *)(v200 + 1208);
    v27 = *(void (**)(uint64_t, uint64_t))(v200 + 1200);
    v25 = *(_QWORD *)(v200 + 1072);
    v26 = *(_QWORD *)(v200 + 1048);

    v27(v25, v26);
    type metadata accessor for LogQuantityIntentResponse();
    v30 = LogQuantityIntentResponse.__allocating_init(code:userActivity:)(5, 0);

    outlined destroy of HealthKitPersistor((id *)(v200 + 504));
    v130 = v30;
    goto LABEL_34;
  }
  v8 = *(void **)(v200 + 1216);
  *(_QWORD *)(v200 + 576) = v157;
  if ((objc_msgSend(v8, sel_isCompatibleWithUnit_) & 1) == 0)
  {
    v139 = *(id *)(v200 + 1216);
    v138 = *(void (**)(uint64_t, uint64_t, uint64_t))(v200 + 1160);
    v9 = *(_QWORD *)(v200 + 1120);
    v137 = *(_QWORD *)(v200 + 1048);
    v136 = Logger.wellnessIntents.unsafeMutableAddressor();
    swift_beginAccess();
    v138(v9, v136, v137);
    swift_endAccess();
    v10 = v157;
    v141 = swift_allocObject();
    *(_QWORD *)(v141 + 16) = v157;
    v11 = v139;
    v143 = swift_allocObject();
    *(_QWORD *)(v143 + 16) = v139;
    v152 = Logger.logObject.getter();
    v153 = static os_log_type_t.error.getter();
    *(_QWORD *)(v200 + 800) = 22;
    UnsignedInteger<>.init<A>(_:)();
    v140 = *(_DWORD *)(v200 + 1336);
    v145 = swift_allocObject();
    *(_BYTE *)(v145 + 16) = 64;
    v146 = swift_allocObject();
    *(_BYTE *)(v146 + 16) = 8;
    v142 = swift_allocObject();
    *(_QWORD *)(v142 + 16) = partial apply for implicit closure #3 in LogQuantityIntentHandler.handle(intent:);
    *(_QWORD *)(v142 + 24) = v141;
    v147 = swift_allocObject();
    *(_QWORD *)(v147 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:);
    *(_QWORD *)(v147 + 24) = v142;
    v148 = swift_allocObject();
    *(_BYTE *)(v148 + 16) = 64;
    v149 = swift_allocObject();
    *(_BYTE *)(v149 + 16) = 8;
    v144 = swift_allocObject();
    *(_QWORD *)(v144 + 16) = partial apply for implicit closure #3 in LogQuantityIntentHandler.handle(intent:);
    *(_QWORD *)(v144 + 24) = v143;
    v150 = swift_allocObject();
    *(_QWORD *)(v150 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:);
    *(_QWORD *)(v150 + 24) = v144;
    _allocateUninitializedArray<A>(_:)();
    v151 = v12;
    swift_retain();
    *v151 = partial apply for closure #1 in OSLogArguments.append(_:);
    v151[1] = v145;
    swift_retain();
    v151[2] = partial apply for closure #1 in OSLogArguments.append(_:);
    v151[3] = v146;
    swift_retain();
    v151[4] = partial apply for closure #1 in OSLogArguments.append(_:);
    v151[5] = v147;
    swift_retain();
    v151[6] = partial apply for closure #1 in OSLogArguments.append(_:);
    v151[7] = v148;
    swift_retain();
    v151[8] = partial apply for closure #1 in OSLogArguments.append(_:);
    v151[9] = v149;
    swift_retain();
    v151[10] = partial apply for closure #1 in OSLogArguments.append(_:);
    v151[11] = v150;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(v152, v153))
    {
      v133 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      v132 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      v134 = createStorage<A>(capacity:type:)(2);
      v135 = createStorage<A>(capacity:type:)(0);
      v213 = v133;
      v214 = v134;
      v215 = v135;
      serialize(_:at:)(2, &v213);
      serialize(_:at:)(2, &v213);
      v216 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v217 = v145;
      closure #1 in osLogInternal(_:log:type:)(&v216, (uint64_t)&v213, (uint64_t)&v214, (uint64_t)&v215);
      v216 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v217 = v146;
      closure #1 in osLogInternal(_:log:type:)(&v216, (uint64_t)&v213, (uint64_t)&v214, (uint64_t)&v215);
      v216 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v217 = v147;
      closure #1 in osLogInternal(_:log:type:)(&v216, (uint64_t)&v213, (uint64_t)&v214, (uint64_t)&v215);
      v216 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v217 = v148;
      closure #1 in osLogInternal(_:log:type:)(&v216, (uint64_t)&v213, (uint64_t)&v214, (uint64_t)&v215);
      v216 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v217 = v149;
      closure #1 in osLogInternal(_:log:type:)(&v216, (uint64_t)&v213, (uint64_t)&v214, (uint64_t)&v215);
      v216 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v217 = v150;
      closure #1 in osLogInternal(_:log:type:)(&v216, (uint64_t)&v213, (uint64_t)&v214, (uint64_t)&v215);
      _os_log_impl(&dword_24749F000, v152, v153, "%@ is incompatible with %@.", v133, v140);
      destroyStorage<A>(_:count:)(v134, 2, v132);
      destroyStorage<A>(_:count:)(v135, 0, MEMORY[0x24BEE4AD8] + 8);
      MEMORY[0x24957D398](v133, MEMORY[0x24BEE4260]);
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
    }
    v127 = *(id *)(v200 + 1216);
    v128 = *(id *)(v200 + 1208);
    v126 = *(void (**)(uint64_t, uint64_t))(v200 + 1200);
    v124 = *(_QWORD *)(v200 + 1120);
    v125 = *(_QWORD *)(v200 + 1048);

    v126(v124, v125);
    type metadata accessor for LogQuantityIntentResponse();
    v129 = LogQuantityIntentResponse.__allocating_init(code:userActivity:)(102, 0);

    outlined destroy of HealthKitPersistor((id *)(v200 + 504));
    v130 = v129;
LABEL_34:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(char *))(*(_QWORD *)(v200 + 456) + 8))(v130);
  }
  *(_QWORD *)(v200 + 584) = *(_QWORD *)(v200 + 960);
  type metadata accessor for NSObject();
  v122 = objc_msgSend((id)objc_opt_self(), sel_percentUnit);
  v123 = static NSObject.== infix(_:_:)();

  if ((v123 & 1) != 0)
    *(double *)(v200 + 584) = *(double *)(v200 + 960) / 100.0;
  v111 = *(void (**)(uint64_t, uint64_t, uint64_t))(v200 + 1160);
  v108 = *(_QWORD *)(v200 + 1112);
  v110 = *(_QWORD *)(v200 + 1048);
  type metadata accessor for HKQuantity();
  v13 = v157;
  v112 = @nonobjc HKQuantity.__allocating_init(unit:doubleValue:)(v157, *(double *)(v200 + 584));
  *(_QWORD *)(v200 + 1264) = v112;
  *(_QWORD *)(v200 + 592) = v112;
  v109 = Logger.wellnessIntents.unsafeMutableAddressor();
  swift_beginAccess();
  v111(v108, v109, v110);
  swift_endAccess();
  v14 = v112;
  v114 = swift_allocObject();
  *(_QWORD *)(v114 + 16) = v112;
  v120 = Logger.logObject.getter();
  v121 = static os_log_type_t.debug.getter();
  *(_QWORD *)(v200 + 600) = 12;
  UnsignedInteger<>.init<A>(_:)();
  v113 = *(_DWORD *)(v200 + 1312);
  v116 = swift_allocObject();
  *(_BYTE *)(v116 + 16) = 64;
  v117 = swift_allocObject();
  *(_BYTE *)(v117 + 16) = 8;
  v115 = swift_allocObject();
  *(_QWORD *)(v115 + 16) = partial apply for implicit closure #3 in LogQuantityIntentHandler.handle(intent:);
  *(_QWORD *)(v115 + 24) = v114;
  v118 = swift_allocObject();
  *(_QWORD *)(v118 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:);
  *(_QWORD *)(v118 + 24) = v115;
  _allocateUninitializedArray<A>(_:)();
  v119 = v15;
  swift_retain();
  *v119 = partial apply for closure #1 in OSLogArguments.append(_:);
  v119[1] = v116;
  swift_retain();
  v119[2] = partial apply for closure #1 in OSLogArguments.append(_:);
  v119[3] = v117;
  swift_retain();
  v119[4] = partial apply for closure #1 in OSLogArguments.append(_:);
  v119[5] = v118;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(v120, v121))
  {
    v105 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    v104 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    v106 = createStorage<A>(capacity:type:)(1);
    v107 = createStorage<A>(capacity:type:)(0);
    v208 = v105;
    v209 = v106;
    v210 = v107;
    serialize(_:at:)(2, &v208);
    serialize(_:at:)(1, &v208);
    v211 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v212 = v116;
    closure #1 in osLogInternal(_:log:type:)(&v211, (uint64_t)&v208, (uint64_t)&v209, (uint64_t)&v210);
    v211 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v212 = v117;
    closure #1 in osLogInternal(_:log:type:)(&v211, (uint64_t)&v208, (uint64_t)&v209, (uint64_t)&v210);
    v211 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v212 = v118;
    closure #1 in osLogInternal(_:log:type:)(&v211, (uint64_t)&v208, (uint64_t)&v209, (uint64_t)&v210);
    _os_log_impl(&dword_24749F000, v120, v121, "Created HKQuantity: %@", v105, v113);
    destroyStorage<A>(_:count:)(v106, 1, v104);
    destroyStorage<A>(_:count:)(v107, 0, MEMORY[0x24BEE4AD8] + 8);
    MEMORY[0x24957D398](v105, MEMORY[0x24BEE4260]);
    swift_release();
    swift_release();
    swift_release();
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
  }
  identifier = *(NSString **)(v200 + 1208);
  v102 = *(void (**)(uint64_t, uint64_t))(v200 + 1200);
  v100 = *(_QWORD *)(v200 + 1112);
  v101 = *(_QWORD *)(v200 + 1048);

  v102(v100, v101);
  if (!validateQuantity(identifier:quantity:)(identifier, (HKQuantity)v112))
  {
    v95 = *(void (**)(uint64_t, uint64_t, uint64_t))(v200 + 1160);
    v16 = *(_QWORD *)(v200 + 1104);
    v94 = *(_QWORD *)(v200 + 1048);
    v93 = Logger.wellnessIntents.unsafeMutableAddressor();
    swift_beginAccess();
    v95(v16, v93, v94);
    swift_endAccess();
    v98 = Logger.logObject.getter();
    v97 = static os_log_type_t.error.getter();
    *(_QWORD *)(v200 + 760) = 2;
    UnsignedInteger<>.init<A>(_:)();
    v96 = *(_DWORD *)(v200 + 1332);
    v99 = _allocateUninitializedArray<A>(_:)();
    if (os_log_type_enabled(v98, v97))
    {
      v89 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      v88 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      v90 = createStorage<A>(capacity:type:)(0);
      v91 = createStorage<A>(capacity:type:)(0);
      *(_QWORD *)(v200 + 768) = v89;
      *(_QWORD *)(v200 + 776) = v90;
      *(_QWORD *)(v200 + 784) = v91;
      serialize(_:at:)(0, (_BYTE **)(v200 + 768));
      serialize(_:at:)(0, (_BYTE **)(v200 + 768));
      *(_QWORD *)(v200 + 792) = v99;
      v92 = (_QWORD *)swift_task_alloc();
      v92[2] = v200 + 768;
      v92[3] = v200 + 776;
      v92[4] = v200 + 784;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
      lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
      Sequence.forEach(_:)();
      swift_task_dealloc();
      _os_log_impl(&dword_24749F000, v98, v97, "Quantity validation failed - value outside valid bounds.", v89, v96);
      destroyStorage<A>(_:count:)(v90, 0, v88);
      destroyStorage<A>(_:count:)(v91, 0, MEMORY[0x24BEE4AD8] + 8);
      MEMORY[0x24957D398](v89, MEMORY[0x24BEE4260]);
    }
    swift_bridgeObjectRelease();
    v85 = *(id *)(v200 + 1216);
    v86 = *(id *)(v200 + 1208);
    v84 = *(void (**)(uint64_t, uint64_t))(v200 + 1200);
    v82 = *(_QWORD *)(v200 + 1104);
    v83 = *(_QWORD *)(v200 + 1048);

    v84(v82, v83);
    type metadata accessor for LogQuantityIntentResponse();
    v87 = LogQuantityIntentResponse.__allocating_init(code:userActivity:)(102, 0);

    outlined destroy of HealthKitPersistor((id *)(v200 + 504));
    v130 = v87;
    goto LABEL_34;
  }
  v65 = *(id *)(v200 + 1216);
  v71 = *(void (**)(uint64_t, uint64_t, uint64_t))(v200 + 1160);
  v68 = *(_QWORD *)(v200 + 1096);
  v70 = *(_QWORD *)(v200 + 1048);
  v66 = *(_QWORD *)(v200 + 1040);
  v67 = *(_QWORD *)(v200 + 1032);
  type metadata accessor for HKQuantitySample();
  v17 = v65;
  v18 = v112;
  Date.init()();
  Date.init()();
  v72 = @nonobjc HKQuantitySample.__allocating_init(type:quantity:start:end:)(v65, v112, v66, v67);
  *(_QWORD *)(v200 + 1272) = v72;
  *(_QWORD *)(v200 + 608) = v72;
  v69 = Logger.wellnessIntents.unsafeMutableAddressor();
  swift_beginAccess();
  v71(v68, v69, v70);
  swift_endAccess();
  v19 = v72;
  v74 = swift_allocObject();
  *(_QWORD *)(v74 + 16) = v72;
  v80 = Logger.logObject.getter();
  v81 = static os_log_type_t.debug.getter();
  *(_QWORD *)(v200 + 616) = 12;
  UnsignedInteger<>.init<A>(_:)();
  v73 = *(_DWORD *)(v200 + 1316);
  v76 = swift_allocObject();
  *(_BYTE *)(v76 + 16) = 64;
  v77 = swift_allocObject();
  *(_BYTE *)(v77 + 16) = 8;
  v75 = swift_allocObject();
  *(_QWORD *)(v75 + 16) = partial apply for implicit closure #3 in LogQuantityIntentHandler.handle(intent:);
  *(_QWORD *)(v75 + 24) = v74;
  v78 = swift_allocObject();
  *(_QWORD *)(v78 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:);
  *(_QWORD *)(v78 + 24) = v75;
  _allocateUninitializedArray<A>(_:)();
  v79 = v20;
  swift_retain();
  *v79 = partial apply for closure #1 in OSLogArguments.append(_:);
  v79[1] = v76;
  swift_retain();
  v79[2] = partial apply for closure #1 in OSLogArguments.append(_:);
  v79[3] = v77;
  swift_retain();
  v79[4] = partial apply for closure #1 in OSLogArguments.append(_:);
  v79[5] = v78;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(v80, v81))
  {
    v62 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    v61 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    v63 = createStorage<A>(capacity:type:)(1);
    v64 = createStorage<A>(capacity:type:)(0);
    v203 = v62;
    v204 = v63;
    v205 = v64;
    serialize(_:at:)(2, &v203);
    serialize(_:at:)(1, &v203);
    v206 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v207 = v76;
    closure #1 in osLogInternal(_:log:type:)(&v206, (uint64_t)&v203, (uint64_t)&v204, (uint64_t)&v205);
    v206 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v207 = v77;
    closure #1 in osLogInternal(_:log:type:)(&v206, (uint64_t)&v203, (uint64_t)&v204, (uint64_t)&v205);
    v206 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v207 = v78;
    closure #1 in osLogInternal(_:log:type:)(&v206, (uint64_t)&v203, (uint64_t)&v204, (uint64_t)&v205);
    _os_log_impl(&dword_24749F000, v80, v81, "Created HKQuantitySample: %@", v62, v73);
    destroyStorage<A>(_:count:)(v63, 1, v61);
    destroyStorage<A>(_:count:)(v64, 0, MEMORY[0x24BEE4AD8] + 8);
    MEMORY[0x24957D398](v62, MEMORY[0x24BEE4260]);
    swift_release();
    swift_release();
    swift_release();
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
  }
  v53 = *(void (**)(uint64_t, uint64_t))(v200 + 1200);
  v56 = *(void (**)(uint64_t, uint64_t, uint64_t))(v200 + 1160);
  v52 = *(_QWORD *)(v200 + 1096);
  v21 = *(_QWORD *)(v200 + 1088);
  v55 = *(_QWORD *)(v200 + 1048);

  v53(v52, v55);
  v54 = Logger.wellnessIntents.unsafeMutableAddressor();
  swift_beginAccess();
  v56(v21, v54, v55);
  swift_endAccess();
  v59 = Logger.logObject.getter();
  v58 = static os_log_type_t.debug.getter();
  *(_QWORD *)(v200 + 624) = 2;
  UnsignedInteger<>.init<A>(_:)();
  v57 = *(_DWORD *)(v200 + 1320);
  v60 = _allocateUninitializedArray<A>(_:)();
  if (os_log_type_enabled(v59, v58))
  {
    v48 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    v47 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    v49 = createStorage<A>(capacity:type:)(0);
    v50 = createStorage<A>(capacity:type:)(0);
    *(_QWORD *)(v200 + 728) = v48;
    *(_QWORD *)(v200 + 736) = v49;
    *(_QWORD *)(v200 + 744) = v50;
    serialize(_:at:)(0, (_BYTE **)(v200 + 728));
    serialize(_:at:)(0, (_BYTE **)(v200 + 728));
    *(_QWORD *)(v200 + 752) = v60;
    v51 = (_QWORD *)swift_task_alloc();
    v51[2] = v200 + 728;
    v51[3] = v200 + 736;
    v51[4] = v200 + 744;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
    lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
    Sequence.forEach(_:)();
    swift_task_dealloc();
    _os_log_impl(&dword_24749F000, v59, v58, "Trying to save to store.", v48, v57);
    destroyStorage<A>(_:count:)(v49, 0, v47);
    destroyStorage<A>(_:count:)(v50, 0, MEMORY[0x24BEE4AD8] + 8);
    MEMORY[0x24957D398](v48, MEMORY[0x24BEE4260]);
  }
  swift_bridgeObjectRelease();
  *(_QWORD *)(v200 + 1280) = 0;
  v45 = *(void (**)(uint64_t, uint64_t))(v200 + 1200);
  v43 = *(_QWORD *)(v200 + 1088);
  v44 = *(_QWORD *)(v200 + 1048);
  v46 = *(id *)(v200 + 984);

  v45(v43, v44);
  v22 = v46;
  *(_QWORD *)(v200 + 16) = *(_QWORD *)(v200 + 456);
  *(_QWORD *)(v200 + 56) = v131;
  *(_QWORD *)(v200 + 24) = HealthKitPersistor.save(quantityIdentifier:value:units:);
  *(_QWORD *)(v200 + 112) = swift_continuation_init();
  *(_QWORD *)(v200 + 80) = MEMORY[0x24BDAC760];
  *(_DWORD *)(v200 + 88) = 0x40000000;
  *(_DWORD *)(v200 + 92) = 0;
  *(_QWORD *)(v200 + 96) = @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned Bool, @unowned NSError?) -> () with result type () zero on error;
  *(_QWORD *)(v200 + 104) = &block_descriptor;
  objc_msgSend(v46, sel_saveObject_withCompletion_, v72, v200 + 80);
  return __swift_continuation_await_point(v200 + 16);
}

{
  uint64_t v0;
  id v1;
  id v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t);
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;
  char *v15;
  uint64_t v16;
  uint8_t *buf;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(uint64_t, uint64_t, uint64_t);
  id v26;
  uint32_t size;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  NSObject *v34;
  os_log_type_t v35;
  uint8_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t (*v39)(uint64_t, uint64_t, uint64_t);
  uint64_t v40;

  v26 = *(id *)(v0 + 1288);
  v25 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1160);
  v21 = *(_QWORD *)(v0 + 1064);
  v24 = *(_QWORD *)(v0 + 1048);
  v22 = *(id *)(v0 + 984);
  *(_QWORD *)(v0 + 456) = v0;
  swift_willThrow();

  v1 = v26;
  *(_QWORD *)(v0 + 632) = v26;
  v23 = Logger.wellnessIntents.unsafeMutableAddressor();
  swift_beginAccess();
  v25(v21, v23, v24);
  swift_endAccess();
  v2 = v26;
  v28 = swift_allocObject();
  *(_QWORD *)(v28 + 16) = v26;
  v34 = Logger.logObject.getter();
  v35 = static os_log_type_t.error.getter();
  *(_QWORD *)(v0 + 640) = 12;
  UnsignedInteger<>.init<A>(_:)();
  size = *(_DWORD *)(v0 + 1324);
  v30 = swift_allocObject();
  *(_BYTE *)(v30 + 16) = 32;
  v31 = swift_allocObject();
  *(_BYTE *)(v31 + 16) = 8;
  v29 = swift_allocObject();
  *(_QWORD *)(v29 + 16) = partial apply for implicit closure #5 in HealthKitPersistor.save(quantityIdentifier:value:units:);
  *(_QWORD *)(v29 + 24) = v28;
  v32 = swift_allocObject();
  *(_QWORD *)(v32 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:);
  *(_QWORD *)(v32 + 24) = v29;
  _allocateUninitializedArray<A>(_:)();
  v33 = v3;
  swift_retain();
  *v33 = partial apply for closure #1 in OSLogArguments.append(_:);
  v33[1] = v30;
  swift_retain();
  v33[2] = partial apply for closure #1 in OSLogArguments.append(_:);
  v33[3] = v31;
  swift_retain();
  v33[4] = partial apply for closure #1 in OSLogArguments.append(_:);
  v33[5] = v32;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(v34, v35))
  {
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    v18 = createStorage<A>(capacity:type:)(0);
    v19 = createStorage<A>(capacity:type:)(1);
    v36 = buf;
    v37 = v18;
    v38 = v19;
    serialize(_:at:)(2, &v36);
    serialize(_:at:)(1, &v36);
    v39 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v40 = v30;
    closure #1 in osLogInternal(_:log:type:)(&v39, (uint64_t)&v36, (uint64_t)&v37, (uint64_t)&v38);
    v39 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v40 = v31;
    closure #1 in osLogInternal(_:log:type:)(&v39, (uint64_t)&v36, (uint64_t)&v37, (uint64_t)&v38);
    v39 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v40 = v32;
    closure #1 in osLogInternal(_:log:type:)(&v39, (uint64_t)&v36, (uint64_t)&v37, (uint64_t)&v38);
    _os_log_impl(&dword_24749F000, v34, v35, "Failed to persist sample. Error: %s", buf, size);
    destroyStorage<A>(_:count:)(v18, 0, v16);
    destroyStorage<A>(_:count:)(v19, 1, MEMORY[0x24BEE4AD8] + 8);
    MEMORY[0x24957D398](buf, MEMORY[0x24BEE4260]);
    swift_release();
    swift_release();
    swift_release();
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
  }
  v8 = *(id *)(v20 + 1288);
  v9 = *(id *)(v20 + 1272);
  v10 = *(id *)(v20 + 1264);
  v12 = *(id *)(v20 + 1248);
  v13 = *(id *)(v20 + 1216);
  v14 = *(id *)(v20 + 1208);
  v7 = *(void (**)(uint64_t, uint64_t))(v20 + 1200);
  v5 = *(_QWORD *)(v20 + 1064);
  v6 = *(_QWORD *)(v20 + 1048);
  v11 = *(id *)(v20 + 1256);

  v7(v5, v6);
  type metadata accessor for LogQuantityIntentResponse();
  v15 = LogQuantityIntentResponse.__allocating_init(code:userActivity:)(5, 0);

  outlined destroy of HealthKitPersistor((id *)(v20 + 504));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(char *))(*(_QWORD *)(v20 + 456) + 8))(v15);
}

uint64_t HealthKitPersistor.save(quantityIdentifier:value:units:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v5;

  v3 = (_QWORD *)*v2;
  v5 = *v2 + 16;
  v3[57] = *v2;
  v3[154] = a1;
  v3[155] = v1;
  swift_task_dealloc();
  if (!v1)

  return swift_task_switch();
}

id @nonobjc HKQuantity.__allocating_init(unit:doubleValue:)(void *a1, double a2)
{
  id v4;

  v4 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_quantityWithUnit_doubleValue_, a1, a2);

  return v4;
}

id @nonobjc HKQuantitySample.__allocating_init(type:quantity:start:end:)(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  Class v5;
  Class isa;
  uint64_t v9;
  void (*v10)(uint64_t);
  id v13;

  isa = Date._bridgeToObjectiveC()().super.isa;
  v5 = Date._bridgeToObjectiveC()().super.isa;
  v13 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_quantitySampleWithType_quantity_startDate_endDate_, a1, a2, isa, v5);

  v9 = type metadata accessor for Date();
  v10 = *(void (**)(uint64_t))(*(_QWORD *)(v9 - 8) + 8);
  v10(a4);

  ((void (*)(uint64_t, uint64_t))v10)(a3, v9);
  return v13;
}

void @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned Bool, @unowned NSError?) -> () with result type () zero on error(uint64_t a1, char a2, id a3)
{
  id v3;
  id v4;
  id v5;
  uint64_t v6;
  uint64_t v10;

  v3 = a3;
  v10 = *(_QWORD *)(a1 + 32);
  if ((a2 & 1) != 0)
  {
    _resumeUnsafeThrowingContinuation<A>(_:_:)(v10, v6, MEMORY[0x24BEE4AE0] + 8);
  }
  else
  {
    if (a3)
    {
      v5 = a3;
    }
    else
    {
      _diagnoseUnexpectedNilOptional(_filenameStart:_filenameLength:_filenameIsASCII:_line:_isImplicitUnwrap:)("", 0, 1, 0, 1);
      __break(1u);
    }
    v4 = v5;
    _resumeUnsafeThrowingContinuationWithError<A>(_:_:)(v10, (uint64_t)v5, MEMORY[0x24BEE4AE0] + 8);
  }

}

uint64_t implicit closure #5 in HealthKitPersistor.save(quantityIdentifier:value:units:)(void *a1)
{
  id v1;

  v1 = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  return String.init<A>(describing:)();
}

uint64_t protocol witness for QuantityPersisting.isLoggingAuthorized(for:) in conformance HealthKitPersistor(uint64_t a1)
{
  id *v1;
  uint64_t v2;
  _QWORD *v3;
  id v5;

  *(_QWORD *)(v2 + 16) = v2;
  v5 = *v1;
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 24) = v3;
  *v3 = *(_QWORD *)(v2 + 16);
  v3[1] = protocol witness for QuantityPersisting.isLoggingAuthorized(for:) in conformance HealthKitPersistor;
  return HealthKitPersistor.isLoggingAuthorized(for:)(a1, v5);
}

uint64_t protocol witness for QuantityPersisting.isLoggingAuthorized(for:) in conformance HealthKitPersistor(unsigned int a1)
{
  uint64_t *v1;
  uint64_t v3;

  v3 = *v1;
  *(_QWORD *)(*v1 + 16) = *v1;
  swift_task_dealloc();
  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)(v3 + 16) + 8))(a1);
}

uint64_t protocol witness for QuantityPersisting.save(quantityIdentifier:value:units:) in conformance HealthKitPersistor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5)
{
  uint64_t *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v13;

  *(_QWORD *)(v6 + 16) = v6;
  v13 = *v5;
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v6 + 24) = v7;
  *v7 = *(_QWORD *)(v6 + 16);
  v7[1] = protocol witness for QuantityPersisting.save(quantityIdentifier:value:units:) in conformance HealthKitPersistor;
  return HealthKitPersistor.save(quantityIdentifier:value:units:)(a1, a2, a3, a4, v13, a5);
}

uint64_t protocol witness for QuantityPersisting.save(quantityIdentifier:value:units:) in conformance HealthKitPersistor(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;

  v3 = *v1;
  *(_QWORD *)(*v1 + 16) = *v1;
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v3 + 16) + 8))(a1);
}

unint64_t lazy protocol witness table accessor for type UInt32 and conformance UInt32()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type UInt32 and conformance UInt32;
  if (!lazy protocol witness table cache variable for type UInt32 and conformance UInt32)
  {
    v0 = MEMORY[0x24957D92C](MEMORY[0x24BEE4540], MEMORY[0x24BEE44F0]);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type UInt32 and conformance UInt32);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type UInt32 and conformance UInt32;
  if (!lazy protocol witness table cache variable for type UInt32 and conformance UInt32)
  {
    v0 = MEMORY[0x24957D92C](MEMORY[0x24BEE4518], MEMORY[0x24BEE44F0]);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type UInt32 and conformance UInt32);
    return v0;
  }
  return v2;
}

uint64_t createStorage<A>(capacity:type:)(uint64_t a1)
{
  if (a1)
    return static UnsafeMutablePointer.allocate(capacity:)();
  else
    return 0;
}

uint64_t serialize(_:at:)(uint64_t result, _BYTE **a2)
{
  _BYTE *v2;

  v2 = *a2;
  *v2 = result;
  *a2 = v2 + 1;
  return result;
}

uint64_t closure #1 in osLogInternal(_:log:type:)(uint64_t (**a1)(uint64_t, uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*a1)(a2, a3, a4);
}

uint64_t destroyStorage<A>(_:count:)(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  v3 = result;
  if (result)
  {
    UnsafeMutablePointer.deinitialize(count:)();
    return MEMORY[0x24957D398](v3, a3);
  }
  return result;
}

uint64_t implicit closure #1 in OSLogInterpolation.appendInterpolation<A>(_:align:privacy:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void (*v4)(void);
  uint64_t v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v12 = a3;
  v9 = a4;
  v10 = *(_QWORD *)(a3 - 8);
  v8 = (*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4 = (void (*)(void))MEMORY[0x24BDAC7A8](a1);
  v11 = (char *)&v7 - v8;
  v4();
  v13 = dispatch thunk of CustomStringConvertible.description.getter();
  v14 = v5;
  (*(void (**)(char *, uint64_t))(v10 + 8))(v11, v12);
  return v13;
}

uint64_t specialized closure #1 in StaticString.withUTF8Buffer<A>(_:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  return a3();
}

uint64_t specialized Unicode.Scalar.withUTF8CodeUnits<A>(_:)(uint64_t (*a1)(uint64_t *, uint64_t), uint64_t a2, unsigned int a3)
{
  uint64_t result;
  uint64_t v4;
  unsigned int v5;
  int v6;
  int v7;
  uint64_t v8;

  if (a3 < 0x80uLL)
  {
    if (a3 > 0xFF)
      goto LABEL_12;
    v5 = (a3 + 1);
  }
  else
  {
    v7 = (a3 & 0x3F) << 8;
    if (a3 >> 6 < 0x20uLL)
    {
      v5 = (v7 | (a3 >> 6)) + 33217;
    }
    else
    {
      v6 = (v7 | (a3 >> 6) & 0x3F) << 8;
      if (a3 >> 12 < 0x10uLL)
        v5 = (v6 | (a3 >> 12)) + 8487393;
      else
        v5 = ((a3 >> 18) | ((v6 | (a3 >> 12) & 0x3F) << 8)) - 2122219023;
    }
  }
  v4 = 4 - ((uint64_t)__clz(v5) >> 3);
  v8 = (v5 - 0x101010101010101) & ((1 << ((8 * v4) & 0x3F)) - 1);
  if (v4 >= 0)
    return a1(&v8, v4);
  _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
LABEL_12:
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t closure #1 in _unimplementedInitializer(className:initName:file:line:column:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, unint64_t a6@<X5>, uint64_t a7@<X6>, int a8@<W7>, uint64_t a9@<X8>, unint64_t a10, unint64_t a11)
{
  unsigned int v11;
  uint64_t result;
  char v13[8];
  uint64_t v14;
  uint64_t (*v15)@<X0>(uint64_t@<X0>, uint64_t@<X1>, uint64_t@<X8>);
  char *v16;
  uint64_t v17;
  uint64_t *v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  int v27;
  unint64_t v28;
  unint64_t v29;
  const char *v30;
  const char *v31;
  const char *v32;
  const char *v33;
  const char *v34;
  const char *v35;
  const char *v36;
  uint64_t v37;
  char v38;
  unint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;

  v20 = a9;
  v21 = a1;
  v22 = a2;
  v23 = a3;
  v24 = a4;
  v25 = a6;
  v26 = a7;
  v27 = a8;
  v28 = a10;
  v29 = a11;
  v30 = "Fatal error";
  v31 = "Unexpectedly found nil while unwrapping an Optional value";
  v32 = "Swift/StaticString.swift";
  v33 = "Not enough bits to represent the passed value";
  v34 = "Swift/Integers.swift";
  v35 = "UnsafeBufferPointer with negative count";
  v36 = "Swift/UnsafeBufferPointer.swift";
  v37 = 0;
  v39 = a6;
  v40 = a7;
  v41 = a8;
  v42 = a1;
  v43 = a2;
  v44 = a10;
  v45 = a11;
  if ((a5 & 1) != 0)
  {
    if (v23 <= 0xFFFFFFFF)
    {
      v19 = v23;
      if ((v23 < 0xD800 || v19 > 0xDFFF) && v19 <= 0x10FFFF)
      {
        v18 = &v17;
        MEMORY[0x24BDAC7A8]();
        v15 = partial apply for closure #1 in closure #1 in _unimplementedInitializer(className:initName:file:line:column:);
        v16 = &v38;
        specialized Unicode.Scalar.withUTF8CodeUnits<A>(_:)((uint64_t (*)(uint64_t *, uint64_t))partial apply for specialized closure #1 in StaticString.withUTF8Buffer<A>(_:), (uint64_t)v13, v11);
        return (uint64_t)v18;
      }
      v13[0] = 2;
      v14 = 148;
      LODWORD(v15) = 0;
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
    }
    v13[0] = 2;
    v14 = 3455;
    LODWORD(v15) = 0;
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  if (v23)
    v46 = v23;
  else
    v46 = 0;
  v17 = v46;
  if (!v46)
  {
    v13[0] = 2;
    v14 = 136;
    LODWORD(v15) = 0;
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  if (v24 >= 0)
    return closure #1 in closure #1 in _unimplementedInitializer(className:initName:file:line:column:)(v17, v24, v25, v26, v27, v21, v22, v28, v20, v29);
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t closure #1 in closure #1 in _unimplementedInitializer(className:initName:file:line:column:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X6>, unint64_t a8@<X7>, uint64_t a9@<X8>, unint64_t a10)
{
  unsigned int v10;
  uint64_t result;
  char v12[8];
  uint64_t v13;
  uint64_t (*v14)(uint64_t, uint64_t);
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  const char *v29;
  const char *v30;
  const char *v31;
  const char *v32;
  const char *v33;
  const char *v34;
  const char *v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;

  v20 = a9;
  v21 = a1;
  v22 = a2;
  v23 = a3;
  v24 = a4;
  v25 = a6;
  v26 = a7;
  v27 = a8;
  v28 = a10;
  v29 = "Fatal error";
  v30 = "Unexpectedly found nil while unwrapping an Optional value";
  v31 = "Swift/StaticString.swift";
  v32 = "Not enough bits to represent the passed value";
  v33 = "Swift/Integers.swift";
  v34 = "UnsafeBufferPointer with negative count";
  v35 = "Swift/UnsafeBufferPointer.swift";
  v36 = 0;
  v38 = a6;
  v39 = a7;
  v40 = a1;
  v41 = a2;
  v42 = a8;
  v43 = a10;
  if ((a5 & 1) != 0)
  {
    if (v23 <= 0xFFFFFFFF)
    {
      v19 = v23;
      if ((v23 < 0xD800 || v19 > 0xDFFF) && v19 <= 0x10FFFF)
      {
        v18 = &v16;
        MEMORY[0x24BDAC7A8]();
        v14 = partial apply for closure #1 in closure #1 in closure #1 in _unimplementedInitializer(className:initName:file:line:column:);
        v15 = &v37;
        specialized Unicode.Scalar.withUTF8CodeUnits<A>(_:)((uint64_t (*)(uint64_t *, uint64_t))partial apply for specialized closure #1 in StaticString.withUTF8Buffer<A>(_:), (uint64_t)v12, v10);
        return (uint64_t)v18;
      }
      v12[0] = 2;
      v13 = 148;
      LODWORD(v14) = 0;
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
    }
    v12[0] = 2;
    v13 = 3455;
    LODWORD(v14) = 0;
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  if (v23)
    v44 = v23;
  else
    v44 = 0;
  v17 = v44;
  if (!v44)
  {
    v12[0] = 2;
    v13 = 136;
    LODWORD(v14) = 0;
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  if (v24 >= 0)
    return closure #1 in closure #1 in closure #1 in _unimplementedInitializer(className:initName:file:line:column:)(v17, v24, v25, v26, v21, v22, v27, v28);
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t closure #1 in closure #1 in closure #1 in _unimplementedInitializer(className:initName:file:line:column:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7, unint64_t a8)
{
  uint64_t result;

  if (!a3)
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  if (a4 >= (uint64_t)0xFFFFFFFF80000000)
  {
    if (a4 <= 0x7FFFFFFF)
    {
      if (!a5)
      {
        _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
      }
      if (a6 >= (uint64_t)0xFFFFFFFF80000000)
      {
        if (a6 <= 0x7FFFFFFF)
        {
          if (!a1)
          {
            _assertionFailure(_:_:file:line:flags:)();
            __break(1u);
          }
          if (a2 >= (uint64_t)0xFFFFFFFF80000000)
          {
            if (a2 <= 0x7FFFFFFF)
            {
              if (a7 <= 0xFFFFFFFF)
              {
                if (a8 <= 0xFFFFFFFF)
                  return _swift_stdlib_reportUnimplementedInitializerInFile();
                _assertionFailure(_:_:file:line:flags:)();
                __break(1u);
              }
              _assertionFailure(_:_:file:line:flags:)();
              __break(1u);
            }
            _assertionFailure(_:_:file:line:flags:)();
            __break(1u);
          }
          _assertionFailure(_:_:file:line:flags:)();
          __break(1u);
        }
        _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
      }
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
    }
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

Swift::Void __swiftcall Array._endMutation()()
{
  _QWORD *v0;

  *v0 = *v0;
}

uint64_t _sIeghH_IeAgH_TR(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t (*v6)(void);

  *(_QWORD *)(v3 + 16) = v3;
  v6 = (uint64_t (*)(void))((char *)a3 + *a3);
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 24) = v4;
  *v4 = *(_QWORD *)(v3 + 16);
  v4[1] = _sIeghH_IeAgH_TRTQ0_;
  return v6();
}

uint64_t _sIeghH_IeAgH_TRTQ0_()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  *(_QWORD *)(*v0 + 16) = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v2 + 16) + 8))();
}

uint64_t _sIeAgH_ytIeAgHr_TR(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t (*v7)(void);

  *(_QWORD *)(v4 + 16) = v4;
  v7 = (uint64_t (*)(void))((char *)a4 + *a4);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 24) = v5;
  *v5 = *(_QWORD *)(v4 + 16);
  v5[1] = _sIeghH_IeAgH_TRTQ0_;
  return v7();
}

uint64_t _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgmq5(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;

  v9 = type metadata accessor for TaskPriority();
  v10 = *(_QWORD *)(v9 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t))(v10 + 48))(a1, 1) == 1)
  {
    outlined destroy of TaskPriority?(a1);
  }
  else
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(a1, v9);
  }
  v5 = *(_QWORD *)(a3 + 16);
  swift_unknownObjectRetain();
  if (v5)
  {
    swift_getObjectType();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
  v4 = swift_allocObject();
  *(_QWORD *)(v4 + 16) = a2;
  *(_QWORD *)(v4 + 24) = a3;
  return swift_task_create();
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tgq5(uint64_t a1, int *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t (*v5)(uint64_t);

  *(_QWORD *)(v2 + 16) = v2;
  v5 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 24) = v3;
  *v3 = *(_QWORD *)(v2 + 16);
  v3[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tgq5TQ0_;
  return v5(a1);
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tgq5TQ0_()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  *(_QWORD *)(*v0 + 16) = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v2 + 16) + 8))();
}

uint64_t implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:)(uint64_t (*a1)(void))
{
  return a1();
}

_BYTE **closure #1 in OSLogArguments.append(_:)(_BYTE **result, uint64_t a2, uint64_t a3, char a4)
{
  _BYTE *v4;

  v4 = *result;
  *v4 = a4;
  *result = v4 + 1;
  return result;
}

uint64_t sub_2474B5B44()
{
  return swift_deallocObject();
}

_BYTE **partial apply for closure #1 in OSLogArguments.append(_:)(_BYTE **a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

uint64_t sub_2474B5B74()
{
  return swift_deallocObject();
}

uint64_t sub_2474B5B9C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:)()
{
  uint64_t v0;

  return implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:)(*(uint64_t (**)(void))(v0 + 16));
}

void closure #1 in OSLogArguments.append(_:)(uint64_t *a1, _QWORD **a2, uint64_t a3, uint64_t (*a4)(void))
{
  _QWORD *v4;
  id v7;
  uint64_t v8;

  v7 = (id)a4();
  v8 = *a1;
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  *a1 = v8 + 8;
  v4 = *a2;
  if (*a2)
  {
    *v4 = v7;
    *a2 = v4 + 1;
  }
  else
  {

  }
}

uint64_t sub_2474B5D20()
{
  swift_release();
  return swift_deallocObject();
}

void partial apply for closure #1 in OSLogArguments.append(_:)(uint64_t *a1, _QWORD **a2, uint64_t a3)
{
  uint64_t v3;

  closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(uint64_t (**)(void))(v3 + 16));
}

uint64_t sub_2474B5D68()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #4 in LogQuantityIntentHandler.handle(intent:)()
{
  uint64_t v0;
  uint64_t result;

  result = *(_QWORD *)(v0 + 16);
  implicit closure #4 in LogQuantityIntentHandler.handle(intent:)();
  return result;
}

uint64_t sub_2474B5DB0()
{
  return swift_deallocObject();
}

uint64_t sub_2474B5DD8()
{
  return swift_deallocObject();
}

uint64_t sub_2474B5E00()
{
  swift_release();
  return swift_deallocObject();
}

_QWORD *closure #1 in OSLogArguments.append(_:)(_QWORD *a1, uint64_t a2, uint64_t *a3, uint64_t (*a4)(void))
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *result;
  uint64_t v8;

  v4 = a4();
  getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v4, v5, a3);
  v8 = *a1;
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease();
  result = a1;
  *a1 = v8 + 8;
  return result;
}

uint64_t sub_2474B5EB8()
{
  swift_release();
  return swift_deallocObject();
}

_QWORD *partial apply for closure #1 in OSLogArguments.append(_:)(_QWORD *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(uint64_t (**)(void))(v3 + 16));
}

uint64_t outlined init with copy of QuantityPersisting(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v2;
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
  (**(void (***)(uint64_t))(v2 - 8))(a2);
  return a2;
}

_QWORD *__swift_project_boxed_opaque_existential_1(_QWORD *result, uint64_t a2)
{
  int v2;

  v2 = *(_DWORD *)(*(_QWORD *)(a2 - 8) + 80);
  if ((v2 & 0x20000) != 0)
    return (_QWORD *)(*result + ((v2 + 16) & ~(unint64_t)v2));
  return result;
}

uint64_t sub_2474B5FA0()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_2474B5FDC()
{
  return swift_deallocObject();
}

uint64_t sub_2474B6004()
{
  return swift_deallocObject();
}

uint64_t sub_2474B602C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2474B6068()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2474B60A4()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_2474B60E0()
{
  return swift_deallocObject();
}

uint64_t sub_2474B6108()
{
  return swift_deallocObject();
}

uint64_t sub_2474B6130()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2474B616C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2474B61A8()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_2474B61E4()
{
  uint64_t v0;

  return swift_deallocObject();
}

id partial apply for implicit closure #8 in LogQuantityIntentHandler.handle(intent:)()
{
  uint64_t v0;

  return implicit closure #8 in LogQuantityIntentHandler.handle(intent:)(*(void **)(v0 + 16));
}

uint64_t sub_2474B6228()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #9 in LogQuantityIntentHandler.handle(intent:)()
{
  uint64_t v0;

  return implicit closure #9 in LogQuantityIntentHandler.handle(intent:)(*(void **)(v0 + 16));
}

uint64_t sub_2474B626C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(type metadata accessor for Date() - 8);
  (*(void (**)(unint64_t))(v1 + 8))(v0 + ((*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80)));
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #10 in LogQuantityIntentHandler.handle(intent:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for Date() - 8) + 80);
  return implicit closure #10 in LogQuantityIntentHandler.handle(intent:)(v1 + ((v2 + 16) & ~v2), a1);
}

uint64_t sub_2474B631C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation<A>(_:align:privacy:)()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v5 = *(_QWORD *)(v0 + 16);
  v3 = *(_QWORD *)(v0 + 24);
  v4 = type metadata accessor for Date();
  v1 = lazy protocol witness table accessor for type Date and conformance Date();
  return implicit closure #1 in OSLogInterpolation.appendInterpolation<A>(_:align:privacy:)(v5, v3, v4, v1);
}

unint64_t lazy protocol witness table accessor for type Date and conformance Date()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type Date and conformance Date;
  if (!lazy protocol witness table cache variable for type Date and conformance Date)
  {
    v0 = type metadata accessor for Date();
    v1 = MEMORY[0x24957D92C](MEMORY[0x24BDCE988], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type Date and conformance Date);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type Date and conformance Date;
  if (!lazy protocol witness table cache variable for type Date and conformance Date)
  {
    v0 = type metadata accessor for Date();
    v1 = MEMORY[0x24957D92C](MEMORY[0x24BDCE948], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type Date and conformance Date);
    return v1;
  }
  return v3;
}

uint64_t sub_2474B6410()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(type metadata accessor for Date() - 8);
  (*(void (**)(unint64_t))(v1 + 8))(v0 + ((*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80)));
  return swift_deallocObject();
}

uint64_t sub_2474B6480()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2474B64BC()
{
  return swift_deallocObject();
}

uint64_t sub_2474B64E4()
{
  return swift_deallocObject();
}

uint64_t sub_2474B650C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2474B6548()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2474B6584()
{
  return swift_deallocObject();
}

uint64_t sub_2474B65AC()
{
  return swift_deallocObject();
}

uint64_t getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  __int16 v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v11;
  _QWORD v12[4];
  _QWORD v13[4];
  uint64_t v14;
  uint64_t v15;
  __int16 v16;
  uint64_t v17;

  v14 = specialized _StringGuts._deconstructUTF8<A>(scratch:)((uint64_t)&v17, 0, 0, 1, a1, a2);
  v15 = v3;
  v16 = v4;
  v11 = v17;
  if (v14)
  {
    v12[3] = swift_getObjectType();
    v12[0] = v14;
    v6 = *a3;
    if (*a3)
    {
      outlined init with copy of Any((uint64_t)v12, v6);
      *a3 = v6 + 32;
    }
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
  }
  else
  {
    v13[3] = MEMORY[0x24BEE2520];
    v13[0] = a1;
    v13[1] = a2;
    v7 = *a3;
    if (*a3)
    {
      outlined init with copy of Any((uint64_t)v13, v7);
      *a3 = v7 + 32;
    }
    swift_bridgeObjectRetain();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
  }
  return v11;
}

uint64_t specialized _StringGuts._deconstructUTF8<A>(scratch:)(uint64_t result, void *a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  char v13;
  char v14;
  int64_t v15;
  int64_t v16;
  _QWORD *v17;
  _QWORD v21[4];
  char v22;
  char v23;
  uint64_t v24;

  v17 = (_QWORD *)result;
  v24 = a6;
  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (a2)
      {
        if (!a3)
          __break(1u);
        v16 = a3 - (_QWORD)a2;
      }
      else
      {
        v16 = 0;
      }
      v15 = (a6 & 0xF00000000000000uLL) >> 56;
      if (v15 < v16)
      {
        if (a2)
        {
          v21[0] = a5;
          v21[1] = a6 & (-(uint64_t)bswap64(0xFFuLL) - 1);
          specialized UnsafeMutableRawPointer.initializeMemory<A>(as:from:count:)(v21, v15, a2);
          UnsafeMutableRawBufferPointer.subscript.setter();
          *v17 = a2;
          v11 = 0;
          v12 = v15;
          v13 = 1;
          v14 = 0;
LABEL_26:
          v21[2] = v11;
          v21[3] = v12;
          v22 = v13 & 1;
          v23 = v14 & 1;
          return (uint64_t)v11;
        }
        goto LABEL_28;
      }
    }
LABEL_13:
    v6 = _StringGuts._allocateForDeconstruct()(a5, a6);
    *v17 = v7;
    v11 = v6;
    v12 = v8;
    v13 = 0;
    v14 = 1;
    goto LABEL_26;
  }
  if ((a6 & 0x1000000000000000) != 0)
    goto LABEL_13;
  if ((a5 & 0x1000000000000000) != 0)
  {
    if ((a6 & 0xFFFFFFFFFFFFFFFLL) != 0xFFFFFFFFFFFFFFE0)
    {
      v10 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
      goto LABEL_21;
    }
    __break(1u);
  }
  result = _StringObject.sharedUTF8.getter();
  if (!result)
    goto LABEL_29;
  v10 = result;
LABEL_21:
  *v17 = v10;
  if (a6 < 0)
  {
    v9 = 0;
LABEL_25:
    v11 = (_QWORD *)v9;
    v12 = a5 & 0xFFFFFFFFFFFFLL;
    v13 = 0;
    v14 = 0;
    goto LABEL_26;
  }
  if ((a6 & 0xFFFFFFFFFFFFFFFLL) != 0)
  {
    swift_unknownObjectRetain();
    v9 = a6 & 0xFFFFFFFFFFFFFFFLL;
    goto LABEL_25;
  }
  __break(1u);
LABEL_28:
  __break(1u);
LABEL_29:
  __break(1u);
  return result;
}

void *specialized UnsafeMutableRawPointer.initializeMemory<A>(as:from:count:)(const void *a1, size_t a2, void *__dst)
{
  memcpy(__dst, a1, a2);
  return __dst;
}

_QWORD *_StringGuts._allocateForDeconstruct()(uint64_t a1, uint64_t a2)
{
  _QWORD *result;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v6 = specialized _copyCollectionToContiguousArray<A>(_:)(a1, a2);
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  v4 = v6[2];
  specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(v4);
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v4, 0);
  Array._endMutation()();
  swift_retain();
  v5 = specialized Array.count.getter((uint64_t)v6);
  swift_bridgeObjectRelease();
  result = (_QWORD *)v5;
  if (!__OFSUB__(v5, 1))
    return v6;
  __break(1u);
  return result;
}

_QWORD *specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1, uint64_t a2)
{
  _QWORD *result;
  char v3;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD v8[3];

  v8[2] = a2;
  if ((a2 & 0x1000000000000000) != 0)
  {
    v7 = String.UTF8View._foreignCount()();
  }
  else if ((a2 & 0x2000000000000000) != 0)
  {
    v7 = (a2 & 0xF00000000000000uLL) >> 56;
  }
  else
  {
    v7 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (!v7)
    return (_QWORD *)specialized ContiguousArray.init()();
  v5 = specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(v7, 0);
  swift_retain();
  swift_release();
  result = (_QWORD *)_StringGuts.copyUTF8(into:)();
  v6 = result;
  if ((v3 & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRetain();
    result = v8;
    v8[0] = 0;
    v8[1] = 0xE000000000000000;
    outlined destroy of String.UTF8View();
    if (v6 == (_QWORD *)v7)
      return v5;
  }
  __break(1u);
  return result;
}

uint64_t specialized Array._makeUniqueAndReserveCapacityIfNotUnique()()
{
  uint64_t *v0;
  uint64_t result;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;

  v4 = *v0;
  result = swift_isUniquelyReferenced_nonNull_native();
  *v0 = v4;
  if ((result & 1) == 0)
  {
    v2 = specialized Array.count.getter(*v3);
    result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2 + 1, 1, *v3);
    *v3 = result;
  }
  return result;
}

uint64_t specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(uint64_t result)
{
  uint64_t v1;
  uint64_t *v2;

  if (*(_QWORD *)(*(_QWORD *)v1 + 24) >> 1 < result + 1)
  {
    result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(*(_QWORD *)(*(_QWORD *)v1 + 24) >> 1 != 0, result + 1, 1, *v2);
    *v2 = result;
  }
  return result;
}

uint64_t specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v5 = a1 + 1;
  v4 = *v2;
  swift_bridgeObjectRetain();
  *(_QWORD *)(v4 + 16) = v5;
  swift_release();
  v6 = *v2;
  swift_retain();
  *(_BYTE *)(v6 + 32 + a1) = a2;
  return swift_release();
}

uint64_t specialized Array.count.getter(uint64_t a1)
{
  return specialized Array._getCount()(a1);
}

_QWORD *specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  size_t v4;
  _QWORD *v6;
  uint64_t v7;

  if (a2 < a1)
    v7 = a1;
  else
    v7 = a2;
  if (v7)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
    v6 = (_QWORD *)swift_allocObject();
    if ((_swift_stdlib_has_malloc_size() & 1) != 0)
    {
      v4 = (size_t)v6 + _swift_stdlib_malloc_size(v6);
      swift_retain();
      v6[2] = a1;
      v6[3] = 2 * (v4 - (_QWORD)(v6 + 4));
    }
    else
    {
      swift_retain();
      v6[2] = a1;
      v6[3] = 2 * v7;
    }
    swift_release();
    return v6;
  }
  else
  {
    v3 = MEMORY[0x24BEE4AF8];
    swift_retain();
    return (_QWORD *)v3;
  }
}

uint64_t specialized ContiguousArray.init()()
{
  uint64_t v1;

  v1 = MEMORY[0x24BEE4AF8];
  swift_retain();
  return v1;
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, uint64_t a2, char a3, uint64_t a4)
{
  uint64_t result;
  char *v5;
  size_t v6;
  char *v7;
  _QWORD *v8;
  uint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v16;

  swift_retain();
  result = swift_retain();
  v16 = *(_QWORD *)(a4 + 24) >> 1;
  if ((a3 & 1) != 0)
  {
    if (v16 < a2)
    {
      if ((unsigned __int128)(v16 * (__int128)2) >> 64 != (2 * v16) >> 63)
      {
        __break(1u);
        return result;
      }
      if (2 * v16 < a2)
        v11 = a2;
      else
        v11 = 2 * v16;
    }
    else
    {
      v11 = *(_QWORD *)(a4 + 24) >> 1;
    }
  }
  else
  {
    v11 = a2;
  }
  v10 = *(_QWORD *)(a4 + 16);
  if (v11 < v10)
    v9 = *(_QWORD *)(a4 + 16);
  else
    v9 = v11;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
    v8 = (_QWORD *)swift_allocObject();
    if ((_swift_stdlib_has_malloc_size() & 1) != 0)
    {
      v6 = (size_t)v8 + _swift_stdlib_malloc_size(v8);
      swift_retain();
      v8[2] = v10;
      v8[3] = 2 * (v6 - (_QWORD)(v8 + 4));
    }
    else
    {
      swift_retain();
      v8[2] = v10;
      v8[3] = 2 * v9;
    }
    swift_release();
    v7 = (char *)v8;
  }
  else
  {
    v5 = (char *)MEMORY[0x24BEE4AF8];
    swift_retain();
    v7 = v5;
  }
  if ((a1 & 1) != 0)
  {
    swift_release();
    swift_bridgeObjectRelease();
    specialized UnsafeMutablePointer.moveInitialize(from:count:)((char *)(a4 + 32), v10, v7 + 32);
    *(_QWORD *)(a4 + 16) = 0;
    swift_release();
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_release();
    swift_retain();
    swift_release();
    specialized UnsafeMutablePointer.initialize(from:count:)((const void *)(a4 + 32), v10, v7 + 32);
    swift_unknownObjectRelease();
  }
  return (uint64_t)v7;
}

uint64_t specialized Array._getCount()(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

void *specialized UnsafeMutablePointer.initialize(from:count:)(const void *a1, size_t a2, void *__dst)
{
  return memcpy(__dst, a1, a2);
}

char *specialized UnsafeMutablePointer.moveInitialize(from:count:)(char *result, size_t a2, char *a3)
{
  if (a3 < result || a3 >= &result[a2] || a3 != result)
    return (char *)memmove(a3, result, a2);
  return result;
}

uint64_t sub_2474B740C()
{
  swift_release();
  return swift_deallocObject();
}

_QWORD *closure #1 in OSLogArguments.append(_:)(_QWORD *a1, uint64_t a2, uint64_t a3, void (*a4)(void))
{
  _QWORD *result;
  uint64_t v5;

  a4();
  v5 = *a1;
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  result = a1;
  *a1 = v5 + 8;
  return result;
}

uint64_t sub_2474B74AC()
{
  swift_release();
  return swift_deallocObject();
}

_QWORD *partial apply for closure #1 in OSLogArguments.append(_:)(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(void (**)(void))(v3 + 16));
}

uint64_t sub_2474B74F4()
{
  return swift_deallocObject();
}

uint64_t sub_2474B751C()
{
  return swift_deallocObject();
}

uint64_t sub_2474B7544()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2474B7580()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2474B75BC()
{
  return swift_deallocObject();
}

uint64_t sub_2474B75E4()
{
  return swift_deallocObject();
}

uint64_t sub_2474B760C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2474B7648()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2474B7684()
{
  return swift_deallocObject();
}

uint64_t sub_2474B76AC()
{
  return swift_deallocObject();
}

uint64_t sub_2474B76D4()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2474B7710()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2474B774C()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 24));
  return swift_deallocObject();
}

uint64_t partial apply for @objc closure #1 in LogQuantityIntentHandler.handle(intent:)()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  const void *v4;
  void *v5;
  void *v6;

  *(_QWORD *)(v1 + 16) = v1;
  v6 = (void *)v0[2];
  v4 = (const void *)v0[3];
  v5 = (void *)v0[4];
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 24) = v2;
  *v2 = *(_QWORD *)(v1 + 16);
  v2[1] = _sIeghH_IeAgH_TRTQ0_;
  return ((uint64_t (*)(void *, const void *, void *))((char *)&async function pointer to @objc closure #1 in LogQuantityIntentHandler.handle(intent:)
                                                               + async function pointer to @objc closure #1 in LogQuantityIntentHandler.handle(intent:)))(v6, v4, v5);
}

unint64_t type metadata accessor for HKUnit()
{
  unint64_t ObjCClassMetadata;
  uint64_t v2;

  v2 = lazy cache variable for type metadata for HKUnit;
  if (!lazy cache variable for type metadata for HKUnit)
  {
    objc_opt_self();
    ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for HKUnit);
    return ObjCClassMetadata;
  }
  return v2;
}

unint64_t type metadata accessor for HKQuantityType()
{
  unint64_t ObjCClassMetadata;
  uint64_t v2;

  v2 = lazy cache variable for type metadata for HKQuantityType;
  if (!lazy cache variable for type metadata for HKQuantityType)
  {
    objc_opt_self();
    ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for HKQuantityType);
    return ObjCClassMetadata;
  }
  return v2;
}

uint64_t partial apply for closure #1 in osLogInternal(_:log:type:)(uint64_t (**a1)(uint64_t, uint64_t, uint64_t))
{
  uint64_t *v1;

  return closure #1 in osLogInternal(_:log:type:)(a1, v1[2], v1[3], v1[4]);
}

unint64_t lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type [(_:_:_:)] and conformance [A];
  if (!lazy protocol witness table cache variable for type [(_:_:_:)] and conformance [A])
  {
    v0 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [(_:_:_:)]);
    v1 = MEMORY[0x24957D92C](MEMORY[0x24BEE12C8], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type [(_:_:_:)] and conformance [A]);
    return v1;
  }
  return v3;
}

uint64_t __swift_instantiateConcreteTypeFromMangledNameAbstract(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v4;

  v4 = *a1;
  if (*a1 < 0)
  {
    v2 = MEMORY[0x24957D920](255, (char *)a1 + (int)*a1, -(*a1 >> 32), 0);
    *a1 = v2;
    return v2;
  }
  return v4;
}

unint64_t type metadata accessor for NSObject()
{
  unint64_t ObjCClassMetadata;
  uint64_t v2;

  v2 = lazy cache variable for type metadata for NSObject;
  if (!lazy cache variable for type metadata for NSObject)
  {
    objc_opt_self();
    ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for NSObject);
    return ObjCClassMetadata;
  }
  return v2;
}

unint64_t type metadata accessor for HKQuantity()
{
  unint64_t ObjCClassMetadata;
  uint64_t v2;

  v2 = lazy cache variable for type metadata for HKQuantity;
  if (!lazy cache variable for type metadata for HKQuantity)
  {
    objc_opt_self();
    ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for HKQuantity);
    return ObjCClassMetadata;
  }
  return v2;
}

uint64_t sub_2474B7AE4()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t sub_2474B7B20()
{
  return swift_deallocObject();
}

uint64_t sub_2474B7B48()
{
  return swift_deallocObject();
}

uint64_t sub_2474B7B70()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2474B7BAC()
{
  swift_release();
  return swift_deallocObject();
}

unint64_t type metadata accessor for HKQuantitySample()
{
  unint64_t ObjCClassMetadata;
  uint64_t v2;

  v2 = lazy cache variable for type metadata for HKQuantitySample;
  if (!lazy cache variable for type metadata for HKQuantitySample)
  {
    objc_opt_self();
    ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for HKQuantitySample);
    return ObjCClassMetadata;
  }
  return v2;
}

uint64_t sub_2474B7C4C()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t sub_2474B7C88()
{
  return swift_deallocObject();
}

uint64_t sub_2474B7CB0()
{
  return swift_deallocObject();
}

uint64_t sub_2474B7CD8()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2474B7D14()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2474B7D54()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #5 in HealthKitPersistor.save(quantityIdentifier:value:units:)()
{
  uint64_t v0;

  return implicit closure #5 in HealthKitPersistor.save(quantityIdentifier:value:units:)(*(void **)(v0 + 16));
}

uint64_t sub_2474B7D98()
{
  return swift_deallocObject();
}

uint64_t sub_2474B7DC0()
{
  return swift_deallocObject();
}

uint64_t sub_2474B7DE8()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2474B7E24()
{
  swift_release();
  return swift_deallocObject();
}

unint64_t lazy protocol witness table accessor for type [HKUnit] and conformance [A]()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type [HKUnit] and conformance [A];
  if (!lazy protocol witness table cache variable for type [HKUnit] and conformance [A])
  {
    v0 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [HKUnit]);
    v1 = MEMORY[0x24957D92C](MEMORY[0x24BEE12C8], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type [HKUnit] and conformance [A]);
    return v1;
  }
  return v3;
}

unint64_t lazy protocol witness table accessor for type HKUnit and conformance NSObject()
{
  unint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type HKUnit and conformance NSObject;
  if (!lazy protocol witness table cache variable for type HKUnit and conformance NSObject)
  {
    v0 = type metadata accessor for HKUnit();
    v1 = MEMORY[0x24957D92C](MEMORY[0x24BEE5BE0], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type HKUnit and conformance NSObject);
    return v1;
  }
  return v3;
}

uint64_t sub_2474B7F40()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t sub_2474B7F7C()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t sub_2474B7FB8()
{
  return swift_deallocObject();
}

uint64_t sub_2474B7FE0()
{
  return swift_deallocObject();
}

uint64_t sub_2474B8008()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2474B8044()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2474B8080()
{
  return swift_deallocObject();
}

uint64_t sub_2474B80A8()
{
  return swift_deallocObject();
}

uint64_t sub_2474B80D0()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2474B810C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t type metadata accessor for LogQuantityIntentHandler()
{
  return objc_opt_self();
}

ValueMetadata *type metadata accessor for HealthKitPersistor()
{
  return &type metadata for HealthKitPersistor;
}

uint64_t partial apply for closure #1 in closure #1 in _unimplementedInitializer(className:initName:file:line:column:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;

  return closure #1 in closure #1 in _unimplementedInitializer(className:initName:file:line:column:)(a1, a2, *(_QWORD *)(v3 + 16), *(_QWORD *)(v3 + 24), *(_BYTE *)(v3 + 32), *(_QWORD *)(v3 + 40), *(_QWORD *)(v3 + 48), *(_QWORD *)(v3 + 56), a3, *(_QWORD *)(v3 + 64));
}

uint64_t partial apply for specialized closure #1 in StaticString.withUTF8Buffer<A>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return specialized closure #1 in StaticString.withUTF8Buffer<A>(_:)(a1, a2, *(uint64_t (**)(void))(v2 + 16));
}

uint64_t partial apply for closure #1 in closure #1 in closure #1 in _unimplementedInitializer(className:initName:file:line:column:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return closure #1 in closure #1 in closure #1 in _unimplementedInitializer(className:initName:file:line:column:)(a1, a2, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32), *(_QWORD *)(v2 + 40), *(_QWORD *)(v2 + 48), *(_QWORD *)(v2 + 56));
}

uint64_t sub_2474B8204()
{
  swift_unknownObjectRelease();
  swift_release();
  return swift_deallocObject();
}

uint64_t _sIeghH_IeAgH_TRTA()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v4;
  int *v5;
  uint64_t v6;

  *(_QWORD *)(v1 + 16) = v1;
  v6 = v0[2];
  v4 = v0[3];
  v5 = (int *)v0[4];
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 24) = v2;
  *v2 = *(_QWORD *)(v1 + 16);
  v2[1] = _sIeghH_IeAgH_TRTQ0_;
  return ((uint64_t (*)(uint64_t, uint64_t, int *))((char *)&_sIeghH_IeAgH_TRTu + _sIeghH_IeAgH_TRTu))(v6, v4, v5);
}

uint64_t sub_2474B8300()
{
  swift_unknownObjectRelease();
  swift_release();
  return swift_deallocObject();
}

uint64_t _sIeAgH_ytIeAgHr_TRTA(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  int *v7;

  *(_QWORD *)(v2 + 16) = v2;
  v5 = v1[2];
  v6 = v1[3];
  v7 = (int *)v1[4];
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 24) = v3;
  *v3 = *(_QWORD *)(v2 + 16);
  v3[1] = _sIeghH_IeAgH_TRTQ0_;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, int *))((char *)&_sIeAgH_ytIeAgHr_TRTu
                                                                   + _sIeAgH_ytIeAgHr_TRTu))(a1, v5, v6, v7);
}

uint64_t outlined destroy of TaskPriority?(uint64_t a1)
{
  uint64_t v3;
  uint64_t v4;

  v3 = type metadata accessor for TaskPriority();
  v4 = *(_QWORD *)(v3 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t))(v4 + 48))(a1, 1))
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(a1, v3);
  return a1;
}

uint64_t sub_2474B8474()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tgq5TA(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  int *v5;

  *(_QWORD *)(v2 + 16) = v2;
  v5 = *(int **)(v1 + 16);
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 24) = v3;
  *v3 = *(_QWORD *)(v2 + 16);
  v3[1] = _sIeghH_IeAgH_TRTQ0_;
  return ((uint64_t (*)(uint64_t, int *))((char *)&_sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tgq5Tu
                                                 + _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tgq5Tu))(a1, v5);
}

unint64_t lazy protocol witness table accessor for type String? and conformance A?()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type String? and conformance A?;
  if (!lazy protocol witness table cache variable for type String? and conformance A?)
  {
    v0 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for String?);
    v1 = MEMORY[0x24957D92C](MEMORY[0x24BE8DD20], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type String? and conformance A?);
    return v1;
  }
  return v3;
}

uint64_t outlined init with copy of Any(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v2;
  (**(void (***)(uint64_t))(v2 - 8))(a2);
  return a2;
}

uint64_t _swift_stdlib_has_malloc_size()
{
  return 1;
}

size_t _swift_stdlib_malloc_size(const void *a1)
{
  return malloc_size(a1);
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of String.UTF8View()
{
  swift_bridgeObjectRelease();
}

id GetAmbiguousDistanceIntentHandler.__allocating_init(provider:)(uint64_t a1)
{
  objc_class *v1;
  id v2;

  v2 = objc_allocWithZone(v1);
  return GetAmbiguousDistanceIntentHandler.init(provider:)(a1);
}

id GetAmbiguousDistanceIntentHandler.init(provider:)(uint64_t a1)
{
  char *v1;
  char *v2;
  id v3;
  id v5;
  objc_class *ObjectType;
  id v8;
  objc_super v9;
  _BYTE v10[40];
  uint64_t v11;
  id v12;

  ObjectType = (objc_class *)swift_getObjectType();
  v11 = a1;
  v2 = v1;
  v12 = v1;
  outlined init with copy of QuantityPersisting(a1, (uint64_t)v10);
  outlined init with take of QuantityPersisting(v10, &v1[OBJC_IVAR____TtC19SiriWellnessIntents33GetAmbiguousDistanceIntentHandler_provider]);

  v9.receiver = v12;
  v9.super_class = ObjectType;
  v8 = objc_msgSendSuper2(&v9, sel_init);
  v3 = v8;
  v12 = v8;
  __swift_destroy_boxed_opaque_existential_1(a1);

  return v8;
}

uint64_t GetAmbiguousDistanceIntentHandler.handle(intent:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v2[16] = v1;
  v2[15] = a1;
  v2[12] = v2;
  v2[13] = 0;
  v2[14] = 0;
  v3 = type metadata accessor for Date();
  v2[17] = v3;
  v2[18] = *(_QWORD *)(v3 - 8);
  v2[19] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  v2[20] = swift_task_alloc();
  v2[21] = swift_task_alloc();
  v2[13] = a1;
  v2[14] = v1;
  return swift_task_switch();
}

{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v5 = *v1;
  v4 = *(_QWORD *)(*v1 + 168);
  v3 = *(_QWORD *)(*v1 + 160);
  *(_QWORD *)(v5 + 96) = *v1;
  *(_QWORD *)(v5 + 192) = a1;
  swift_task_dealloc();
  outlined destroy of Date?(v3);
  outlined destroy of Date?(v4);
  return swift_task_switch();
}

uint64_t GetAmbiguousDistanceIntentHandler.handle(intent:)()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, uint64_t);
  uint64_t v8;

  v1 = v0[16];
  v0[12] = v0;
  outlined init with copy of QuantityPersisting(v1 + OBJC_IVAR____TtC19SiriWellnessIntents33GetAmbiguousDistanceIntentHandler_provider, (uint64_t)(v0 + 2));
  v8 = v0[5];
  v4 = v0[6];
  __swift_project_boxed_opaque_existential_1(v0 + 2, v8);
  v6 = *(_QWORD *)(v4 + 8);
  v7 = (uint64_t (*)(uint64_t, uint64_t))(*(_QWORD *)(v6 + 8) + **(int **)(v6 + 8));
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v5 + 176) = v2;
  *v2 = *(_QWORD *)(v5 + 96);
  v2[1] = GetAmbiguousDistanceIntentHandler.handle(intent:);
  return v7(v8, v6);
}

{
  uint64_t v0;
  _QWORD *v1;
  char *v3;
  uint64_t (*v4)(_QWORD, _QWORD, uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  id v17;
  uint64_t v18;
  char v19;

  v19 = *(_BYTE *)(v0 + 200);
  *(_QWORD *)(v0 + 96) = v0;
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  if ((v19 & 1) != 0)
  {
    v16 = *(void **)(v18 + 120);
    outlined init with copy of QuantityPersisting(*(_QWORD *)(v18 + 128) + OBJC_IVAR____TtC19SiriWellnessIntents33GetAmbiguousDistanceIntentHandler_provider, v18 + 56);
    v14 = *(_QWORD *)(v18 + 80);
    v15 = *(_QWORD *)(v18 + 88);
    __swift_project_boxed_opaque_existential_1((_QWORD *)(v18 + 56), v14);
    v17 = objc_msgSend(v16, sel_startDate);
    if (v17)
    {
      v13 = *(_QWORD *)(v18 + 168);
      v10 = *(_QWORD *)(v18 + 152);
      v11 = *(_QWORD *)(v18 + 144);
      v12 = *(_QWORD *)(v18 + 136);
      static Date._unconditionallyBridgeFromObjectiveC(_:)();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 32))(v13, v10, v12);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v11 + 56))(v13, 0, 1, v12);

    }
    else
    {
      (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v18 + 144) + 56))(*(_QWORD *)(v18 + 168), 1, 1, *(_QWORD *)(v18 + 136));
    }
    v9 = objc_msgSend(*(id *)(v18 + 120), sel_endDate);
    if (v9)
    {
      v8 = *(_QWORD *)(v18 + 160);
      v5 = *(_QWORD *)(v18 + 152);
      v6 = *(_QWORD *)(v18 + 144);
      v7 = *(_QWORD *)(v18 + 136);
      static Date._unconditionallyBridgeFromObjectiveC(_:)();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 32))(v8, v5, v7);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v6 + 56))(v8, 0, 1, v7);

    }
    else
    {
      (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v18 + 144) + 56))(*(_QWORD *)(v18 + 160), 1, 1, *(_QWORD *)(v18 + 136));
    }
    v4 = (uint64_t (*)(_QWORD, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v15 + 16) + **(int **)(v15 + 16));
    v1 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v18 + 184) = v1;
    *v1 = *(_QWORD *)(v18 + 96);
    v1[1] = GetAmbiguousDistanceIntentHandler.handle(intent:);
    return v4(*(_QWORD *)(v18 + 168), *(_QWORD *)(v18 + 160), v14, v15);
  }
  else
  {
    type metadata accessor for GetAmbiguousDistanceIntentResponse();
    v3 = GetAmbiguousDistanceIntentResponse.__allocating_init(code:userActivity:)(101, 0);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(char *))(*(_QWORD *)(v18 + 96) + 8))(v3);
  }
}

{
  uint64_t v0;
  uint64_t v2;

  *(_QWORD *)(v0 + 96) = v0;
  __swift_destroy_boxed_opaque_existential_1(v0 + 56);
  v2 = *(_QWORD *)(v0 + 192);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v0 + 96) + 8))(v2);
}

uint64_t GetAmbiguousDistanceIntentHandler.handle(intent:)(char a1)
{
  uint64_t *v1;
  uint64_t v3;

  v3 = *v1;
  *(_QWORD *)(v3 + 96) = *v1;
  *(_BYTE *)(v3 + 200) = a1;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t @objc closure #1 in GetAmbiguousDistanceIntentHandler.handle(intent:)(void *a1, const void *a2, void *a3)
{
  _QWORD *v3;
  id v5;
  id v6;
  _QWORD *v7;
  uint64_t v10;

  v3[4] = a3;
  v3[3] = a1;
  v3[2] = v3;
  v5 = a1;
  v3[5] = _Block_copy(a2);
  v6 = a3;
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v10 + 48) = v7;
  *v7 = *(_QWORD *)(v10 + 16);
  v7[1] = @objc closure #1 in LogQuantityIntentHandler.handle(intent:);
  return GetAmbiguousDistanceIntentHandler.handle(intent:)((uint64_t)a1);
}

uint64_t sub_2474B8F24()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 24));
  return swift_deallocObject();
}

uint64_t partial apply for @objc closure #1 in GetAmbiguousDistanceIntentHandler.handle(intent:)()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  const void *v4;
  void *v5;
  void *v6;

  *(_QWORD *)(v1 + 16) = v1;
  v6 = (void *)v0[2];
  v4 = (const void *)v0[3];
  v5 = (void *)v0[4];
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 24) = v2;
  *v2 = *(_QWORD *)(v1 + 16);
  v2[1] = _sIeghH_IeAgH_TRTQ0_;
  return ((uint64_t (*)(void *, const void *, void *))((char *)&async function pointer to @objc closure #1 in GetAmbiguousDistanceIntentHandler.handle(intent:)
                                                               + async function pointer to @objc closure #1 in GetAmbiguousDistanceIntentHandler.handle(intent:)))(v6, v4, v5);
}

id GetAmbiguousDistanceIntentHandler.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

uint64_t GetAmbiguousDistanceIntentHandler.init()()
{
  uint64_t result;
  uint64_t v1;

  if (!"SiriWellnessIntents.GetAmbiguousDistanceIntentHandler")
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  result = closure #1 in _unimplementedInitializer(className:initName:file:line:column:)((uint64_t)"SiriWellnessIntents.GetAmbiguousDistanceIntentHandler", 53, (unint64_t)"init()", 6, 2, (unint64_t)"SiriWellnessIntents/GetAmbiguousDistanceIntentHandler.swift", 59, 2, v1, 0xAuLL, 0x14uLL);
  __break(1u);
  return result;
}

id GetAmbiguousDistanceIntentHandler.__deallocating_deinit()
{
  void *v0;
  objc_super v2;
  void *v3;

  v3 = v0;
  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for GetAmbiguousDistanceIntentHandler()
{
  return objc_opt_self();
}

id GetHealthQuantityIntentHandler.__allocating_init(storage:)(_QWORD *a1)
{
  objc_class *v1;
  id v2;

  v2 = objc_allocWithZone(v1);
  return GetHealthQuantityIntentHandler.init(storage:)(a1);
}

id GetHealthQuantityIntentHandler.init(storage:)(_QWORD *a1)
{
  char *v1;
  char *v2;
  char *v3;
  char *v4;
  id v5;
  char *v7;
  id v8;
  objc_class *ObjectType;
  id v11;
  objc_super v12;
  _QWORD v13[6];
  id v14;

  ObjectType = (objc_class *)swift_getObjectType();
  v13[5] = a1;
  v2 = v1;
  v3 = v1;
  v14 = v1;
  v4 = &v1[OBJC_IVAR____TtC19SiriWellnessIntents30GetHealthQuantityIntentHandler_storage];
  *(_QWORD *)v4 = 0;
  *((_QWORD *)v4 + 1) = 0;
  *((_QWORD *)v4 + 2) = 0;
  *((_QWORD *)v4 + 3) = 0;
  *((_QWORD *)v4 + 4) = 0;

  outlined init with copy of QuantityPersisting?(a1, v13);
  v7 = &v1[OBJC_IVAR____TtC19SiriWellnessIntents30GetHealthQuantityIntentHandler_storage];
  swift_beginAccess();
  outlined assign with take of QuantityFetching?(v13, v7);
  swift_endAccess();

  v12.receiver = v14;
  v12.super_class = ObjectType;
  v11 = objc_msgSendSuper2(&v12, sel_init);
  v5 = v11;
  v14 = v11;
  outlined destroy of QuantityPersisting?((uint64_t)a1);

  return v11;
}

_QWORD *outlined assign with take of QuantityFetching?(const void *a1, _QWORD *a2)
{
  if (a2[3])
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a2);
    memcpy(a2, a1, 0x28uLL);
  }
  else
  {
    memcpy(a2, a1, 0x28uLL);
  }
  return a2;
}

uint64_t GetHealthQuantityIntentHandler.handle(intent:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v2[77] = v1;
  v2[76] = a1;
  v2[49] = v2;
  v2[50] = 0;
  v2[51] = 0;
  v2[47] = 0;
  v2[48] = 0;
  v2[61] = 0;
  v2[65] = 0;
  v2[74] = 0;
  v3 = type metadata accessor for Date();
  v2[78] = v3;
  v2[79] = *(_QWORD *)(v3 - 8);
  v2[80] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  v2[81] = swift_task_alloc();
  v2[82] = swift_task_alloc();
  v4 = type metadata accessor for Logger();
  v2[83] = v4;
  v2[84] = *(_QWORD *)(v4 - 8);
  v2[85] = swift_task_alloc();
  v2[86] = swift_task_alloc();
  v2[87] = swift_task_alloc();
  v2[88] = swift_task_alloc();
  v2[89] = swift_task_alloc();
  v2[90] = swift_task_alloc();
  v2[91] = swift_task_alloc();
  v2[92] = swift_task_alloc();
  v2[93] = swift_task_alloc();
  v2[50] = a1;
  v2[51] = v1;
  return swift_task_switch();
}

{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;

  v3 = (_QWORD *)*v2;
  v6 = *v2 + 16;
  v3[49] = *v2;
  v3[106] = a1;
  v3[107] = v1;
  swift_task_dealloc();
  if (!v1)
  {
    v5 = *(_QWORD *)(v6 + 640);
    outlined destroy of Date?(*(_QWORD *)(v6 + 632));
    outlined destroy of Date?(v5);
  }
  return swift_task_switch();
}

uint64_t GetHealthQuantityIntentHandler.handle(intent:)()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t, uint64_t);
  _QWORD *v10;
  void (*v11)(uint64_t, uint64_t);
  uint64_t *v12;
  _QWORD *v13;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint8_t *v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint32_t v29;
  os_log_type_t v30;
  NSObject *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint8_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint32_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  NSObject *log;
  os_log_type_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t (*v61)(uint64_t, uint64_t, uint64_t);
  uint64_t v62;
  uint8_t *buf;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint32_t size;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  NSObject *oslog;
  os_log_type_t v77;
  void *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  id v88;
  uint8_t *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t (*v92)(uint64_t, uint64_t, uint64_t);
  uint64_t v93;
  uint8_t *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t (*v97)(uint64_t, uint64_t, uint64_t);
  uint64_t v98;

  v1 = *(void **)(v0 + 608);
  *(_QWORD *)(v0 + 392) = v0;
  v88 = objc_msgSend(v1, sel_quantityIdentifier);
  if (v88)
  {
    v83 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v84 = v2;

    v85 = v83;
    v86 = v84;
  }
  else
  {
    v85 = 0;
    v86 = 0;
  }
  *(_QWORD *)(v87 + 760) = v86;
  *(_QWORD *)(v87 + 752) = v85;
  if (!v86)
  {
    v17 = *(_QWORD *)(v87 + 704);
    v26 = *(_QWORD *)(v87 + 672);
    v28 = *(_QWORD *)(v87 + 664);
    v27 = Logger.wellnessIntents.unsafeMutableAddressor();
    swift_beginAccess();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v26 + 16))(v17, v27, v28);
    swift_endAccess();
    v31 = Logger.logObject.getter();
    v30 = static os_log_type_t.error.getter();
    *(_QWORD *)(v87 + 416) = 2;
    lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    lazy protocol witness table accessor for type Int and conformance Int();
    UnsignedInteger<>.init<A>(_:)();
    v29 = *(_DWORD *)(v87 + 864);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
    v32 = _allocateUninitializedArray<A>(_:)();
    if (os_log_type_enabled(v31, v30))
    {
      v22 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      v23 = createStorage<A>(capacity:type:)(0);
      v24 = createStorage<A>(capacity:type:)(0);
      *(_QWORD *)(v87 + 424) = v22;
      *(_QWORD *)(v87 + 432) = v23;
      *(_QWORD *)(v87 + 440) = v24;
      serialize(_:at:)(0, (_BYTE **)(v87 + 424));
      serialize(_:at:)(0, (_BYTE **)(v87 + 424));
      *(_QWORD *)(v87 + 448) = v32;
      v25 = (_QWORD *)swift_task_alloc();
      v25[2] = v87 + 424;
      v25[3] = v87 + 432;
      v25[4] = v87 + 440;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
      lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
      Sequence.forEach(_:)();
      swift_task_dealloc();
      _os_log_impl(&dword_24749F000, v31, v30, "Need to specify HealthKitQuantityIdentifier in your intent.", v22, v29);
      destroyStorage<A>(_:count:)(v23, 0, v21);
      destroyStorage<A>(_:count:)(v24, 0, MEMORY[0x24BEE4AD8] + 8);
      MEMORY[0x24957D398](v22, MEMORY[0x24BEE4260]);
    }
    swift_bridgeObjectRelease();
    v19 = *(_QWORD *)(v87 + 704);
    v18 = *(_QWORD *)(v87 + 672);
    v20 = *(_QWORD *)(v87 + 664);

    (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v19, v20);
    type metadata accessor for GetHealthQuantityIntentResponse();
    v37 = GetHealthQuantityIntentResponse.__allocating_init(code:userActivity:)(5, 0);
    goto LABEL_23;
  }
  v3 = *(_QWORD *)(v87 + 616);
  *(_QWORD *)(v87 + 376) = v85;
  *(_QWORD *)(v87 + 384) = v86;
  v82 = (_QWORD *)(v3 + OBJC_IVAR____TtC19SiriWellnessIntents30GetHealthQuantityIntentHandler_storage);
  swift_beginAccess();
  outlined init with copy of QuantityPersisting?(v82, (_QWORD *)(v87 + 96));
  swift_endAccess();
  swift_bridgeObjectRetain();
  if (*(_QWORD *)(v87 + 120))
  {
    outlined init with take of QuantityPersisting((const void *)(v87 + 96), (void *)(v87 + 56));
  }
  else
  {
    swift_bridgeObjectRetain();
    v78 = HealthKitFetcher.init(identifier:)(v85, v86);
    v79 = v4;
    v80 = v5;
    v81 = v6;
    if (v78)
    {
      *(_QWORD *)(v87 + 80) = &type metadata for HealthKitFetcher;
      *(_QWORD *)(v87 + 88) = &protocol witness table for HealthKitFetcher;
      v7 = (_QWORD *)swift_allocObject();
      *(_QWORD *)(v87 + 56) = v7;
      v7[2] = v78;
      v7[3] = v79;
      v7[4] = v80;
      v7[5] = v81;
    }
    else
    {
      *(_QWORD *)(v87 + 56) = 0;
      *(_QWORD *)(v87 + 64) = 0;
      *(_QWORD *)(v87 + 72) = 0;
      *(_QWORD *)(v87 + 80) = 0;
      *(_QWORD *)(v87 + 88) = 0;
    }
    outlined destroy of QuantityPersisting?(v87 + 96);
  }
  swift_bridgeObjectRelease();
  if (!*(_QWORD *)(v87 + 80))
  {
    v15 = *(_QWORD *)(v87 + 712);
    v42 = *(_QWORD *)(v87 + 672);
    v44 = *(_QWORD *)(v87 + 664);
    outlined destroy of QuantityPersisting?(v87 + 56);
    v43 = Logger.wellnessIntents.unsafeMutableAddressor();
    swift_beginAccess();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v42 + 16))(v15, v43, v44);
    swift_endAccess();
    swift_bridgeObjectRetain();
    v46 = swift_allocObject();
    *(_QWORD *)(v46 + 16) = v85;
    *(_QWORD *)(v46 + 24) = v86;
    log = Logger.logObject.getter();
    v53 = static os_log_type_t.error.getter();
    *(_QWORD *)(v87 + 456) = 12;
    lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    lazy protocol witness table accessor for type Int and conformance Int();
    UnsignedInteger<>.init<A>(_:)();
    v45 = *(_DWORD *)(v87 + 868);
    v48 = swift_allocObject();
    *(_BYTE *)(v48 + 16) = 32;
    v49 = swift_allocObject();
    *(_BYTE *)(v49 + 16) = 8;
    v47 = swift_allocObject();
    *(_QWORD *)(v47 + 16) = partial apply for implicit closure #4 in LogQuantityIntentHandler.handle(intent:);
    *(_QWORD *)(v47 + 24) = v46;
    v50 = swift_allocObject();
    *(_QWORD *)(v50 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:);
    *(_QWORD *)(v50 + 24) = v47;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
    _allocateUninitializedArray<A>(_:)();
    v51 = v16;
    swift_retain();
    *v51 = partial apply for closure #1 in OSLogArguments.append(_:);
    v51[1] = v48;
    swift_retain();
    v51[2] = partial apply for closure #1 in OSLogArguments.append(_:);
    v51[3] = v49;
    swift_retain();
    v51[4] = partial apply for closure #1 in OSLogArguments.append(_:);
    v51[5] = v50;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(log, v53))
    {
      v39 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      v40 = createStorage<A>(capacity:type:)(0);
      v41 = createStorage<A>(capacity:type:)(1);
      v89 = v39;
      v90 = v40;
      v91 = v41;
      serialize(_:at:)(2, &v89);
      serialize(_:at:)(1, &v89);
      v92 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v93 = v48;
      closure #1 in osLogInternal(_:log:type:)(&v92, (uint64_t)&v89, (uint64_t)&v90, (uint64_t)&v91);
      v92 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v93 = v49;
      closure #1 in osLogInternal(_:log:type:)(&v92, (uint64_t)&v89, (uint64_t)&v90, (uint64_t)&v91);
      v92 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v93 = v50;
      closure #1 in osLogInternal(_:log:type:)(&v92, (uint64_t)&v89, (uint64_t)&v90, (uint64_t)&v91);
      _os_log_impl(&dword_24749F000, log, v53, "Could not correctly create storage wrapper because of incorrect HealthKit idnetifier: %s", v39, v45);
      destroyStorage<A>(_:count:)(v40, 0, v38);
      destroyStorage<A>(_:count:)(v41, 1, MEMORY[0x24BEE4AD8] + 8);
      MEMORY[0x24957D398](v39, MEMORY[0x24BEE4260]);
      swift_release();
      swift_release();
      swift_release();
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
    }
    v34 = *(_QWORD *)(v87 + 712);
    v33 = *(_QWORD *)(v87 + 672);
    v35 = *(_QWORD *)(v87 + 664);

    (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v34, v35);
    type metadata accessor for GetHealthQuantityIntentResponse();
    v36 = GetHealthQuantityIntentResponse.__allocating_init(code:userActivity:)(5, 0);
    swift_bridgeObjectRelease();
    v37 = v36;
LABEL_23:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(char *))(*(_QWORD *)(v87 + 392) + 8))(v37);
  }
  v8 = *(_QWORD *)(v87 + 744);
  v66 = *(_QWORD *)(v87 + 672);
  v68 = *(_QWORD *)(v87 + 664);
  outlined init with take of QuantityPersisting((const void *)(v87 + 56), (void *)(v87 + 16));
  v67 = Logger.wellnessIntents.unsafeMutableAddressor();
  swift_beginAccess();
  v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(v66 + 16);
  *(_QWORD *)(v87 + 768) = v9;
  v9(v8, v67, v68);
  swift_endAccess();
  swift_bridgeObjectRetain();
  v70 = swift_allocObject();
  *(_QWORD *)(v70 + 16) = v85;
  *(_QWORD *)(v70 + 24) = v86;
  oslog = Logger.logObject.getter();
  v77 = static os_log_type_t.debug.getter();
  *(_QWORD *)(v87 + 464) = 12;
  *(_QWORD *)(v87 + 776) = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  *(_QWORD *)(v87 + 784) = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  *(_QWORD *)(v87 + 792) = lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  size = *(_DWORD *)(v87 + 872);
  v72 = swift_allocObject();
  *(_BYTE *)(v72 + 16) = 32;
  v73 = swift_allocObject();
  *(_BYTE *)(v73 + 16) = 8;
  v71 = swift_allocObject();
  *(_QWORD *)(v71 + 16) = partial apply for implicit closure #4 in LogQuantityIntentHandler.handle(intent:);
  *(_QWORD *)(v71 + 24) = v70;
  v74 = swift_allocObject();
  *(_QWORD *)(v74 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:);
  *(_QWORD *)(v74 + 24) = v71;
  *(_QWORD *)(v87 + 800) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
  _allocateUninitializedArray<A>(_:)();
  v75 = v10;
  swift_retain();
  *v75 = partial apply for closure #1 in OSLogArguments.append(_:);
  v75[1] = v72;
  swift_retain();
  v75[2] = partial apply for closure #1 in OSLogArguments.append(_:);
  v75[3] = v73;
  swift_retain();
  v75[4] = partial apply for closure #1 in OSLogArguments.append(_:);
  v75[5] = v74;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(oslog, v77))
  {
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    v62 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    v64 = createStorage<A>(capacity:type:)(0);
    v65 = createStorage<A>(capacity:type:)(1);
    v94 = buf;
    v95 = v64;
    v96 = v65;
    serialize(_:at:)(2, &v94);
    serialize(_:at:)(1, &v94);
    v97 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v98 = v72;
    closure #1 in osLogInternal(_:log:type:)(&v97, (uint64_t)&v94, (uint64_t)&v95, (uint64_t)&v96);
    v97 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v98 = v73;
    closure #1 in osLogInternal(_:log:type:)(&v97, (uint64_t)&v94, (uint64_t)&v95, (uint64_t)&v96);
    v97 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v98 = v74;
    closure #1 in osLogInternal(_:log:type:)(&v97, (uint64_t)&v94, (uint64_t)&v95, (uint64_t)&v96);
    _os_log_impl(&dword_24749F000, oslog, v77, "Checking authorization for %s...", buf, size);
    destroyStorage<A>(_:count:)(v64, 0, v62);
    destroyStorage<A>(_:count:)(v65, 1, MEMORY[0x24BEE4AD8] + 8);
    MEMORY[0x24957D398](buf, MEMORY[0x24BEE4260]);
    swift_release();
    swift_release();
    swift_release();
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
  }
  *(_QWORD *)(v87 + 808) = 0;
  v55 = *(_QWORD *)(v87 + 744);
  v54 = *(_QWORD *)(v87 + 672);
  v56 = *(_QWORD *)(v87 + 664);

  v11 = *(void (**)(uint64_t, uint64_t))(v54 + 8);
  *(_QWORD *)(v87 + 816) = v11;
  v11(v55, v56);
  v59 = *(_QWORD *)(v87 + 40);
  v60 = *(_QWORD *)(v87 + 48);
  __swift_project_boxed_opaque_existential_1((_QWORD *)(v87 + 16), v59);
  v57 = _allocateUninitializedArray<A>(_:)();
  v58 = v12;
  swift_bridgeObjectRetain();
  *v58 = v85;
  v58[1] = v86;
  _finalizeUninitializedArray<A>(_:)();
  *(_QWORD *)(v87 + 824) = v57;
  v61 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v60 + 8) + **(int **)(v60 + 8));
  v13 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v87 + 832) = v13;
  *v13 = *(_QWORD *)(v87 + 392);
  v13[1] = GetHealthQuantityIntentHandler.handle(intent:);
  return v61(v57, v59, v60);
}

{
  uint64_t v0;
  char v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t result;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t);
  char *v13;
  uint64_t v14;
  uint8_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(uint64_t, uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint32_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  NSObject *log;
  os_log_type_t v31;
  uint64_t (*v32)(_QWORD, _QWORD, uint64_t, uint64_t);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void (*v44)(uint64_t, uint64_t);
  uint64_t v45;
  uint64_t v46;
  id v47;
  id v48;
  uint64_t v49;
  uint8_t *buf;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void (*v55)(uint64_t, uint64_t, uint64_t);
  uint64_t v56;
  uint64_t v57;
  uint32_t size;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  NSObject *oslog;
  os_log_type_t v66;
  uint64_t v67;
  uint8_t *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t (*v71)(uint64_t, uint64_t, uint64_t);
  uint64_t v72;
  uint8_t *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t (*v76)(uint64_t, uint64_t, uint64_t);
  uint64_t v77;

  v1 = *(_BYTE *)(v0 + 900);
  *(_QWORD *)(v0 + 392) = v0;
  if ((v1 & 1) == 0)
  {
    v20 = *(void (**)(uint64_t, uint64_t, uint64_t))(v67 + 768);
    v21 = *(_QWORD *)(v67 + 752);
    v7 = *(_QWORD *)(v67 + 720);
    v19 = *(_QWORD *)(v67 + 664);
    v22 = *(_QWORD *)(v67 + 760);
    v18 = Logger.wellnessIntents.unsafeMutableAddressor();
    swift_beginAccess();
    v20(v7, v18, v19);
    swift_endAccess();
    swift_bridgeObjectRetain();
    v24 = swift_allocObject();
    *(_QWORD *)(v24 + 16) = v21;
    *(_QWORD *)(v24 + 24) = v22;
    log = Logger.logObject.getter();
    v31 = static os_log_type_t.error.getter();
    *(_QWORD *)(v67 + 472) = 12;
    UnsignedInteger<>.init<A>(_:)();
    v23 = *(_DWORD *)(v67 + 876);
    v26 = swift_allocObject();
    *(_BYTE *)(v26 + 16) = 32;
    v27 = swift_allocObject();
    *(_BYTE *)(v27 + 16) = 8;
    v25 = swift_allocObject();
    *(_QWORD *)(v25 + 16) = partial apply for implicit closure #4 in LogQuantityIntentHandler.handle(intent:);
    *(_QWORD *)(v25 + 24) = v24;
    v28 = swift_allocObject();
    *(_QWORD *)(v28 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:);
    *(_QWORD *)(v28 + 24) = v25;
    _allocateUninitializedArray<A>(_:)();
    v29 = v8;
    swift_retain();
    *v29 = partial apply for closure #1 in OSLogArguments.append(_:);
    v29[1] = v26;
    swift_retain();
    v29[2] = partial apply for closure #1 in OSLogArguments.append(_:);
    v29[3] = v27;
    swift_retain();
    v29[4] = partial apply for closure #1 in OSLogArguments.append(_:);
    v29[5] = v28;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(log, v31))
    {
      v9 = *(_QWORD *)(v67 + 808);
      v15 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      v16 = createStorage<A>(capacity:type:)(0);
      v17 = createStorage<A>(capacity:type:)(1);
      v68 = v15;
      v69 = v16;
      v70 = v17;
      serialize(_:at:)(2, &v68);
      serialize(_:at:)(1, &v68);
      v71 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v72 = v26;
      result = closure #1 in osLogInternal(_:log:type:)(&v71, (uint64_t)&v68, (uint64_t)&v69, (uint64_t)&v70);
      if (v9)
        return result;
      v71 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v72 = v27;
      closure #1 in osLogInternal(_:log:type:)(&v71, (uint64_t)&v68, (uint64_t)&v69, (uint64_t)&v70);
      v71 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v72 = v28;
      closure #1 in osLogInternal(_:log:type:)(&v71, (uint64_t)&v68, (uint64_t)&v69, (uint64_t)&v70);
      _os_log_impl(&dword_24749F000, log, v31, "Not authorized to read: %s", v15, v23);
      destroyStorage<A>(_:count:)(v16, 0, v14);
      destroyStorage<A>(_:count:)(v17, 1, MEMORY[0x24BEE4AD8] + 8);
      MEMORY[0x24957D398](v15, MEMORY[0x24BEE4260]);
      swift_release();
      swift_release();
      swift_release();
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
    }
    v12 = *(void (**)(uint64_t, uint64_t))(v67 + 816);
    v10 = *(_QWORD *)(v67 + 720);
    v11 = *(_QWORD *)(v67 + 664);

    v12(v10, v11);
    type metadata accessor for GetHealthQuantityIntentResponse();
    v13 = GetHealthQuantityIntentResponse.__allocating_init(code:userActivity:)(101, 0);
    __swift_destroy_boxed_opaque_existential_1(v67 + 16);
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(char *))(*(_QWORD *)(v67 + 392) + 8))(v13);
  }
  v55 = *(void (**)(uint64_t, uint64_t, uint64_t))(v67 + 768);
  v56 = *(_QWORD *)(v67 + 752);
  v2 = *(_QWORD *)(v67 + 736);
  v54 = *(_QWORD *)(v67 + 664);
  v57 = *(_QWORD *)(v67 + 760);
  v53 = Logger.wellnessIntents.unsafeMutableAddressor();
  swift_beginAccess();
  v55(v2, v53, v54);
  swift_endAccess();
  swift_bridgeObjectRetain();
  v59 = swift_allocObject();
  *(_QWORD *)(v59 + 16) = v56;
  *(_QWORD *)(v59 + 24) = v57;
  oslog = Logger.logObject.getter();
  v66 = static os_log_type_t.debug.getter();
  *(_QWORD *)(v67 + 480) = 12;
  UnsignedInteger<>.init<A>(_:)();
  size = *(_DWORD *)(v67 + 880);
  v61 = swift_allocObject();
  *(_BYTE *)(v61 + 16) = 32;
  v62 = swift_allocObject();
  *(_BYTE *)(v62 + 16) = 8;
  v60 = swift_allocObject();
  *(_QWORD *)(v60 + 16) = partial apply for implicit closure #4 in LogQuantityIntentHandler.handle(intent:);
  *(_QWORD *)(v60 + 24) = v59;
  v63 = swift_allocObject();
  *(_QWORD *)(v63 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:);
  *(_QWORD *)(v63 + 24) = v60;
  _allocateUninitializedArray<A>(_:)();
  v64 = v3;
  swift_retain();
  *v64 = partial apply for closure #1 in OSLogArguments.append(_:);
  v64[1] = v61;
  swift_retain();
  v64[2] = partial apply for closure #1 in OSLogArguments.append(_:);
  v64[3] = v62;
  swift_retain();
  v64[4] = partial apply for closure #1 in OSLogArguments.append(_:);
  v64[5] = v63;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(oslog, v66))
  {
    v4 = *(_QWORD *)(v67 + 808);
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    v49 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    v51 = createStorage<A>(capacity:type:)(0);
    v52 = createStorage<A>(capacity:type:)(1);
    v73 = buf;
    v74 = v51;
    v75 = v52;
    serialize(_:at:)(2, &v73);
    serialize(_:at:)(1, &v73);
    v76 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v77 = v61;
    result = closure #1 in osLogInternal(_:log:type:)(&v76, (uint64_t)&v73, (uint64_t)&v74, (uint64_t)&v75);
    if (v4)
      return result;
    v76 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v77 = v62;
    closure #1 in osLogInternal(_:log:type:)(&v76, (uint64_t)&v73, (uint64_t)&v74, (uint64_t)&v75);
    v76 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v77 = v63;
    closure #1 in osLogInternal(_:log:type:)(&v76, (uint64_t)&v73, (uint64_t)&v74, (uint64_t)&v75);
    _os_log_impl(&dword_24749F000, oslog, v66, "Authorization check successful for %s!", buf, size);
    destroyStorage<A>(_:count:)(v51, 0, v49);
    destroyStorage<A>(_:count:)(v52, 1, MEMORY[0x24BEE4AD8] + 8);
    MEMORY[0x24957D398](buf, MEMORY[0x24BEE4260]);
    swift_release();
    swift_release();
    swift_release();
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
  }
  v44 = *(void (**)(uint64_t, uint64_t))(v67 + 816);
  v42 = *(_QWORD *)(v67 + 736);
  v43 = *(_QWORD *)(v67 + 664);
  v47 = *(id *)(v67 + 608);

  v44(v42, v43);
  v45 = *(_QWORD *)(v67 + 40);
  v46 = *(_QWORD *)(v67 + 48);
  __swift_project_boxed_opaque_existential_1((_QWORD *)(v67 + 16), v45);
  v48 = objc_msgSend(v47, sel_start);
  if (v48)
  {
    v41 = *(_QWORD *)(v67 + 656);
    v38 = *(_QWORD *)(v67 + 640);
    v39 = *(_QWORD *)(v67 + 632);
    v40 = *(_QWORD *)(v67 + 624);
    static Date._unconditionallyBridgeFromObjectiveC(_:)();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v39 + 32))(v41, v38, v40);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v39 + 56))(v41, 0, 1, v40);

  }
  else
  {
    (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v67 + 632) + 56))(*(_QWORD *)(v67 + 656), 1, 1, *(_QWORD *)(v67 + 624));
  }
  v37 = objc_msgSend(*(id *)(v67 + 608), sel_end);
  if (v37)
  {
    v36 = *(_QWORD *)(v67 + 648);
    v33 = *(_QWORD *)(v67 + 640);
    v34 = *(_QWORD *)(v67 + 632);
    v35 = *(_QWORD *)(v67 + 624);
    static Date._unconditionallyBridgeFromObjectiveC(_:)();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v34 + 32))(v36, v33, v35);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v34 + 56))(v36, 0, 1, v35);

  }
  else
  {
    (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v67 + 632) + 56))(*(_QWORD *)(v67 + 648), 1, 1, *(_QWORD *)(v67 + 624));
  }
  v32 = (uint64_t (*)(_QWORD, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v46 + 16) + **(int **)(v46 + 16));
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v67 + 840) = v6;
  *v6 = *(_QWORD *)(v67 + 392);
  v6[1] = GetHealthQuantityIntentHandler.handle(intent:);
  return v32(*(_QWORD *)(v67 + 656), *(_QWORD *)(v67 + 648), v45, v46);
}

{
  uint64_t v0;
  uint64_t v1;
  id v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint8_t *buf;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t, uint64_t);
  id v18;
  uint32_t size;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  NSObject *oslog;
  os_log_type_t v27;
  uint8_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t (*v31)(uint64_t, uint64_t, uint64_t);
  uint64_t v32;

  v18 = *(id *)(v0 + 848);
  v17 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 768);
  v1 = *(_QWORD *)(v0 + 728);
  v16 = *(_QWORD *)(v0 + 664);
  *(_QWORD *)(v0 + 392) = v0;
  *(_QWORD *)(v0 + 592) = v18;
  v15 = Logger.wellnessIntents.unsafeMutableAddressor();
  swift_beginAccess();
  v17(v1, v15, v16);
  swift_endAccess();
  v2 = v18;
  v20 = swift_allocObject();
  *(_QWORD *)(v20 + 16) = v18;
  oslog = Logger.logObject.getter();
  v27 = static os_log_type_t.debug.getter();
  *(_QWORD *)(v0 + 600) = 12;
  UnsignedInteger<>.init<A>(_:)();
  size = *(_DWORD *)(v0 + 896);
  v22 = swift_allocObject();
  *(_BYTE *)(v22 + 16) = 64;
  v23 = swift_allocObject();
  *(_BYTE *)(v23 + 16) = 8;
  v21 = swift_allocObject();
  *(_QWORD *)(v21 + 16) = partial apply for implicit closure #3 in LogQuantityIntentHandler.handle(intent:);
  *(_QWORD *)(v21 + 24) = v20;
  v24 = swift_allocObject();
  *(_QWORD *)(v24 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:);
  *(_QWORD *)(v24 + 24) = v21;
  _allocateUninitializedArray<A>(_:)();
  v25 = v3;
  swift_retain();
  *v25 = partial apply for closure #1 in OSLogArguments.append(_:);
  v25[1] = v22;
  swift_retain();
  v25[2] = partial apply for closure #1 in OSLogArguments.append(_:);
  v25[3] = v23;
  swift_retain();
  v25[4] = partial apply for closure #1 in OSLogArguments.append(_:);
  v25[5] = v24;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (!os_log_type_enabled(oslog, v27))
  {
    swift_release();
    swift_release();
    swift_release();
    goto LABEL_6;
  }
  v4 = v14[107];
  buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
  v12 = createStorage<A>(capacity:type:)(1);
  v13 = createStorage<A>(capacity:type:)(0);
  v28 = buf;
  v29 = v12;
  v30 = v13;
  serialize(_:at:)(2, &v28);
  serialize(_:at:)(1, &v28);
  v31 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  v32 = v22;
  result = closure #1 in osLogInternal(_:log:type:)(&v31, (uint64_t)&v28, (uint64_t)&v29, (uint64_t)&v30);
  if (!v4)
  {
    v31 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v32 = v23;
    closure #1 in osLogInternal(_:log:type:)(&v31, (uint64_t)&v28, (uint64_t)&v29, (uint64_t)&v30);
    v31 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v32 = v24;
    closure #1 in osLogInternal(_:log:type:)(&v31, (uint64_t)&v28, (uint64_t)&v29, (uint64_t)&v30);
    _os_log_impl(&dword_24749F000, oslog, v27, "Response from querying storage: %@", buf, size);
    destroyStorage<A>(_:count:)(v12, 1, v10);
    destroyStorage<A>(_:count:)(v13, 0, MEMORY[0x24BEE4AD8] + 8);
    MEMORY[0x24957D398](buf, MEMORY[0x24BEE4260]);
    swift_release();
    swift_release();
    swift_release();
LABEL_6:
    v8 = (void (*)(uint64_t, uint64_t))v14[102];
    v6 = v14[91];
    v7 = v14[83];

    v8(v6, v7);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)(v14 + 2));
    swift_bridgeObjectRelease();
    v9 = v14[106];
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(uint64_t))(v14[49] + 8))(v9);
  }
  return result;
}

{
  _QWORD *v0;
  uint64_t v1;
  id v2;
  id v3;
  id v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  _QWORD *v9;
  uint64_t v10;
  id v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t);
  id v16;
  char *v17;
  uint64_t v18;
  uint8_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(uint64_t, uint64_t, uint64_t);
  id v25;
  uint32_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  NSObject *v33;
  os_log_type_t v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(uint64_t, uint64_t);
  id v38;
  char *v39;
  uint64_t v40;
  uint8_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void (*v46)(uint64_t, uint64_t, uint64_t);
  uint32_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  NSObject *log;
  os_log_type_t v56;
  uint64_t v57;
  uint64_t v58;
  void (*v59)(uint64_t, uint64_t);
  id v60;
  char *v61;
  uint64_t v62;
  uint8_t *buf;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  uint64_t v68;
  void (*v69)(uint64_t, uint64_t, uint64_t);
  uint32_t size;
  os_log_type_t v71;
  NSObject *oslog;
  uint64_t v73;
  void *v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  id v78;
  uint8_t *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t (*v82)(uint64_t, uint64_t, uint64_t);
  uint64_t v83;
  uint8_t *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t (*v87)(uint64_t, uint64_t, uint64_t);
  uint64_t v88;

  v78 = (id)v0[107];
  v77 = v0[82];
  v1 = v0[81];
  v0[49] = v0;
  outlined destroy of Date?(v1);
  outlined destroy of Date?(v77);
  v2 = v78;
  v0[61] = v78;
  v3 = v78;
  v0[62] = v78;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  type metadata accessor for related decl 'e' for HKErrorCode();
  if ((swift_dynamicCast() & 1) != 0)
    v74 = *(void **)(v76 + 504);
  else
    v74 = 0;
  if (v74)
  {
    *(_QWORD *)(v76 + 520) = v74;
    v5 = v74;
    *(_QWORD *)(v76 + 536) = v74;
    lazy protocol witness table accessor for type related decl 'e' for HKErrorCode and conformance related decl 'e' for HKErrorCode();
    _BridgedStoredNSError.code.getter();
    outlined destroy of HealthKitPersistor((id *)(v76 + 536));
    if (*(_QWORD *)(v76 + 528) == 6)
    {
      v69 = *(void (**)(uint64_t, uint64_t, uint64_t))(v76 + 768);
      v6 = *(_QWORD *)(v76 + 696);
      v68 = *(_QWORD *)(v76 + 664);
      v67 = Logger.wellnessIntents.unsafeMutableAddressor();
      swift_beginAccess();
      v69(v6, v67, v68);
      swift_endAccess();
      oslog = Logger.logObject.getter();
      v71 = static os_log_type_t.error.getter();
      *(_QWORD *)(v76 + 552) = 2;
      UnsignedInteger<>.init<A>(_:)();
      size = *(_DWORD *)(v76 + 892);
      v73 = _allocateUninitializedArray<A>(_:)();
      if (os_log_type_enabled(oslog, v71))
      {
        buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
        v62 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
        v64 = createStorage<A>(capacity:type:)(0);
        v65 = createStorage<A>(capacity:type:)(0);
        *(_QWORD *)(v76 + 560) = buf;
        *(_QWORD *)(v76 + 568) = v64;
        *(_QWORD *)(v76 + 576) = v65;
        serialize(_:at:)(0, (_BYTE **)(v76 + 560));
        serialize(_:at:)(0, (_BYTE **)(v76 + 560));
        *(_QWORD *)(v76 + 584) = v73;
        v66 = (_QWORD *)swift_task_alloc();
        v66[2] = v76 + 560;
        v66[3] = v76 + 568;
        v66[4] = v76 + 576;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
        lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
        Sequence.forEach(_:)();
        swift_task_dealloc();
        _os_log_impl(&dword_24749F000, oslog, v71, "HealthKit database was inaccessible", buf, size);
        destroyStorage<A>(_:count:)(v64, 0, v62);
        destroyStorage<A>(_:count:)(v65, 0, MEMORY[0x24BEE4AD8] + 8);
        MEMORY[0x24957D398](buf, MEMORY[0x24BEE4260]);
      }
      swift_bridgeObjectRelease();
      v60 = *(id *)(v76 + 856);
      v59 = *(void (**)(uint64_t, uint64_t))(v76 + 816);
      v57 = *(_QWORD *)(v76 + 696);
      v58 = *(_QWORD *)(v76 + 664);

      v59(v57, v58);
      type metadata accessor for GetHealthQuantityIntentResponse();
      v61 = GetHealthQuantityIntentResponse.__allocating_init(code:userActivity:)(103, 0);

      __swift_destroy_boxed_opaque_existential_1(v76 + 16);
      swift_bridgeObjectRelease();
      v75 = v61;
    }
    else
    {
      v46 = *(void (**)(uint64_t, uint64_t, uint64_t))(v76 + 768);
      v7 = *(_QWORD *)(v76 + 688);
      v45 = *(_QWORD *)(v76 + 664);
      v44 = Logger.wellnessIntents.unsafeMutableAddressor();
      swift_beginAccess();
      v46(v7, v44, v45);
      swift_endAccess();
      v8 = v74;
      v48 = swift_allocObject();
      *(_QWORD *)(v48 + 16) = v74;
      default argument 2 of OSLogInterpolation.appendInterpolation(_:privacy:attributes:)();
      swift_bridgeObjectRelease();
      log = Logger.logObject.getter();
      v56 = static os_log_type_t.error.getter();
      *(_QWORD *)(v76 + 544) = 12;
      UnsignedInteger<>.init<A>(_:)();
      v47 = *(_DWORD *)(v76 + 888);
      v51 = swift_allocObject();
      *(_BYTE *)(v51 + 16) = 64;
      v52 = swift_allocObject();
      *(_BYTE *)(v52 + 16) = 8;
      v49 = swift_allocObject();
      *(_QWORD *)(v49 + 16) = partial apply for implicit closure #7 in GetHealthQuantityIntentHandler.handle(intent:);
      *(_QWORD *)(v49 + 24) = v48;
      v50 = swift_allocObject();
      *(_QWORD *)(v50 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:attributes:);
      *(_QWORD *)(v50 + 24) = v49;
      v53 = swift_allocObject();
      *(_QWORD *)(v53 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:);
      *(_QWORD *)(v53 + 24) = v50;
      _allocateUninitializedArray<A>(_:)();
      v54 = v9;
      swift_retain();
      *v54 = partial apply for closure #1 in OSLogArguments.append(_:);
      v54[1] = v51;
      swift_retain();
      v54[2] = partial apply for closure #1 in OSLogArguments.append(_:);
      v54[3] = v52;
      swift_retain();
      v54[4] = partial apply for closure #1 in OSLogArguments.append(_:);
      v54[5] = v53;
      _finalizeUninitializedArray<A>(_:)();
      swift_bridgeObjectRelease();
      if (os_log_type_enabled(log, v56))
      {
        v41 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
        v40 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
        v42 = createStorage<A>(capacity:type:)(1);
        v43 = createStorage<A>(capacity:type:)(0);
        v84 = v41;
        v85 = v42;
        v86 = v43;
        serialize(_:at:)(2, &v84);
        serialize(_:at:)(1, &v84);
        v87 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
        v88 = v51;
        closure #1 in osLogInternal(_:log:type:)(&v87, (uint64_t)&v84, (uint64_t)&v85, (uint64_t)&v86);
        v87 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
        v88 = v52;
        closure #1 in osLogInternal(_:log:type:)(&v87, (uint64_t)&v84, (uint64_t)&v85, (uint64_t)&v86);
        v87 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
        v88 = v53;
        closure #1 in osLogInternal(_:log:type:)(&v87, (uint64_t)&v84, (uint64_t)&v85, (uint64_t)&v86);
        _os_log_impl(&dword_24749F000, log, v56, "HealthKit threw an error: %@", v41, v47);
        destroyStorage<A>(_:count:)(v42, 1, v40);
        destroyStorage<A>(_:count:)(v43, 0, MEMORY[0x24BEE4AD8] + 8);
        MEMORY[0x24957D398](v41, MEMORY[0x24BEE4260]);
        swift_release();
        swift_release();
        swift_release();
      }
      else
      {
        swift_release();
        swift_release();
        swift_release();
      }
      v38 = *(id *)(v76 + 856);
      v37 = *(void (**)(uint64_t, uint64_t))(v76 + 816);
      v35 = *(_QWORD *)(v76 + 688);
      v36 = *(_QWORD *)(v76 + 664);

      v37(v35, v36);
      type metadata accessor for GetHealthQuantityIntentResponse();
      v39 = GetHealthQuantityIntentResponse.__allocating_init(code:userActivity:)(5, 0);

      __swift_destroy_boxed_opaque_existential_1(v76 + 16);
      swift_bridgeObjectRelease();
      v75 = v39;
    }
  }
  else
  {
    v25 = *(id *)(v76 + 856);
    v24 = *(void (**)(uint64_t, uint64_t, uint64_t))(v76 + 768);
    v10 = *(_QWORD *)(v76 + 680);
    v23 = *(_QWORD *)(v76 + 664);
    v22 = Logger.wellnessIntents.unsafeMutableAddressor();
    swift_beginAccess();
    v24(v10, v22, v23);
    swift_endAccess();
    v11 = v25;
    v27 = swift_allocObject();
    *(_QWORD *)(v27 + 16) = v25;
    v33 = Logger.logObject.getter();
    v34 = static os_log_type_t.error.getter();
    *(_QWORD *)(v76 + 512) = 12;
    UnsignedInteger<>.init<A>(_:)();
    v26 = *(_DWORD *)(v76 + 884);
    v29 = swift_allocObject();
    *(_BYTE *)(v29 + 16) = 32;
    v30 = swift_allocObject();
    *(_BYTE *)(v30 + 16) = 8;
    v28 = swift_allocObject();
    *(_QWORD *)(v28 + 16) = partial apply for implicit closure #5 in HealthKitPersistor.save(quantityIdentifier:value:units:);
    *(_QWORD *)(v28 + 24) = v27;
    v31 = swift_allocObject();
    *(_QWORD *)(v31 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:);
    *(_QWORD *)(v31 + 24) = v28;
    _allocateUninitializedArray<A>(_:)();
    v32 = v12;
    swift_retain();
    *v32 = partial apply for closure #1 in OSLogArguments.append(_:);
    v32[1] = v29;
    swift_retain();
    v32[2] = partial apply for closure #1 in OSLogArguments.append(_:);
    v32[3] = v30;
    swift_retain();
    v32[4] = partial apply for closure #1 in OSLogArguments.append(_:);
    v32[5] = v31;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(v33, v34))
    {
      v19 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      v20 = createStorage<A>(capacity:type:)(0);
      v21 = createStorage<A>(capacity:type:)(1);
      v79 = v19;
      v80 = v20;
      v81 = v21;
      serialize(_:at:)(2, &v79);
      serialize(_:at:)(1, &v79);
      v82 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v83 = v29;
      closure #1 in osLogInternal(_:log:type:)(&v82, (uint64_t)&v79, (uint64_t)&v80, (uint64_t)&v81);
      v82 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v83 = v30;
      closure #1 in osLogInternal(_:log:type:)(&v82, (uint64_t)&v79, (uint64_t)&v80, (uint64_t)&v81);
      v82 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v83 = v31;
      closure #1 in osLogInternal(_:log:type:)(&v82, (uint64_t)&v79, (uint64_t)&v80, (uint64_t)&v81);
      _os_log_impl(&dword_24749F000, v33, v34, "Something went wrong while fetching data: %s", v19, v26);
      destroyStorage<A>(_:count:)(v20, 0, v18);
      destroyStorage<A>(_:count:)(v21, 1, MEMORY[0x24BEE4AD8] + 8);
      MEMORY[0x24957D398](v19, MEMORY[0x24BEE4260]);
      swift_release();
      swift_release();
      swift_release();
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
    }
    v16 = *(id *)(v76 + 856);
    v15 = *(void (**)(uint64_t, uint64_t))(v76 + 816);
    v13 = *(_QWORD *)(v76 + 680);
    v14 = *(_QWORD *)(v76 + 664);

    v15(v13, v14);
    type metadata accessor for GetHealthQuantityIntentResponse();
    v17 = GetHealthQuantityIntentResponse.__allocating_init(code:userActivity:)(5, 0);

    __swift_destroy_boxed_opaque_existential_1(v76 + 16);
    swift_bridgeObjectRelease();
    v75 = v17;
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(char *))(*(_QWORD *)(v76 + 392) + 8))(v75);
}

uint64_t GetHealthQuantityIntentHandler.handle(intent:)(char a1)
{
  uint64_t *v1;
  uint64_t v3;

  v3 = *v1;
  *(_QWORD *)(v3 + 392) = *v1;
  *(_BYTE *)(v3 + 900) = a1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  return swift_task_switch();
}

void *HealthKitFetcher.init(identifier:)(uint64_t a1, uint64_t a2)
{
  id v2;
  _QWORD *v3;
  id v4;
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  _QWORD *v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v31;
  id v32;
  id v33;
  id v34;
  id v35;
  id v36;
  id v37;
  id v38;
  id v39;
  id v40;
  id v41;
  id v42;
  id v43;
  id v44;
  id v45;
  id v46;
  id v47;
  id v48;
  id v49;
  id v50;
  id v51;
  id v52;
  id v53;
  id v54;
  id v55;
  id v56;
  id v57;
  uint64_t v58;
  _QWORD *v59;
  id v60;
  id v61;
  id v62;
  id v63;
  id v64;
  id v65;
  id v66;
  id v67;
  id v68;
  id v69;
  id v70;
  id v71;
  id v72;
  id v73;
  id v74;
  id v75;
  id v76;
  id v77;
  id v78;
  id v79;
  id v80;
  id v81;
  id v82;
  id v83;
  void *v84;
  void *v85;
  id v86;
  void *v87;
  void *v88;
  id v89;
  void *v92;
  uint64_t v93;
  _QWORD *v94;
  void *ObjCClassFromMetadata;
  void *v96;
  id v97;
  __int128 v98;
  __int128 v99;

  v98 = 0u;
  v99 = 0u;
  type metadata accessor for HKHealthStore();
  v92 = (void *)NSDateFormatter.__allocating_init()();
  v2 = v92;
  *(_QWORD *)&v98 = v92;
  type metadata accessor for HKQuantityType();
  v93 = _allocateUninitializedArray<A>(_:)();
  v94 = v3;
  ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata();
  v96 = (void *)*MEMORY[0x24BDD3678];
  v4 = (id)*MEMORY[0x24BDD3678];
  v97 = objc_msgSend(ObjCClassFromMetadata, sel_quantityTypeForIdentifier_, v96);

  if (!v97)
    goto LABEL_22;
  *v94 = v97;
  v87 = (void *)swift_getObjCClassFromMetadata();
  v88 = (void *)*MEMORY[0x24BDD3340];
  v5 = (id)*MEMORY[0x24BDD3340];
  v89 = objc_msgSend(v87, sel_quantityTypeForIdentifier_, v88);

  if (!v89)
  {
LABEL_21:
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
LABEL_22:
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    goto LABEL_23;
  }
  v94[1] = v89;
  v84 = (void *)swift_getObjCClassFromMetadata();
  v85 = (void *)*MEMORY[0x24BDD3590];
  v6 = (id)*MEMORY[0x24BDD3590];
  v86 = objc_msgSend(v84, sel_quantityTypeForIdentifier_, v85);

  if (!v86)
  {
LABEL_20:
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    goto LABEL_21;
  }
  v94[2] = v86;
  v81 = (id)swift_getObjCClassFromMetadata();
  v82 = (id)*MEMORY[0x24BDD3620];
  v7 = (id)*MEMORY[0x24BDD3620];
  v83 = objc_msgSend(v81, sel_quantityTypeForIdentifier_, v82);

  if (!v83)
  {
LABEL_19:
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    goto LABEL_20;
  }
  v94[3] = v83;
  v78 = (id)swift_getObjCClassFromMetadata();
  v79 = (id)*MEMORY[0x24BDD3388];
  v8 = (id)*MEMORY[0x24BDD3388];
  v80 = objc_msgSend(v78, sel_quantityTypeForIdentifier_, v79);

  if (!v80)
  {
LABEL_18:
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    goto LABEL_19;
  }
  v94[4] = v80;
  v75 = (id)swift_getObjCClassFromMetadata();
  v76 = (id)*MEMORY[0x24BDD3560];
  v9 = (id)*MEMORY[0x24BDD3560];
  v77 = objc_msgSend(v75, sel_quantityTypeForIdentifier_, v76);

  if (!v77)
  {
LABEL_17:
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    goto LABEL_18;
  }
  v94[5] = v77;
  v72 = (id)swift_getObjCClassFromMetadata();
  v73 = (id)*MEMORY[0x24BDD3368];
  v10 = (id)*MEMORY[0x24BDD3368];
  v74 = objc_msgSend(v72, sel_quantityTypeForIdentifier_, v73);

  if (!v74)
  {
LABEL_16:
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    goto LABEL_17;
  }
  v94[6] = v74;
  v69 = (id)swift_getObjCClassFromMetadata();
  v70 = (id)*MEMORY[0x24BDD3568];
  v11 = (id)*MEMORY[0x24BDD3568];
  v71 = objc_msgSend(v69, sel_quantityTypeForIdentifier_, v70);

  if (!v71)
  {
LABEL_15:
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    goto LABEL_16;
  }
  v94[7] = v71;
  v66 = (id)swift_getObjCClassFromMetadata();
  v67 = (id)*MEMORY[0x24BDD3348];
  v12 = (id)*MEMORY[0x24BDD3348];
  v68 = objc_msgSend(v66, sel_quantityTypeForIdentifier_, v67);

  if (!v68)
  {
LABEL_14:
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    goto LABEL_15;
  }
  v94[8] = v68;
  v63 = (id)swift_getObjCClassFromMetadata();
  v64 = (id)*MEMORY[0x24BDD3530];
  v13 = (id)*MEMORY[0x24BDD3530];
  v65 = objc_msgSend(v63, sel_quantityTypeForIdentifier_, v64);

  if (!v65)
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    goto LABEL_14;
  }
  v94[9] = v65;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRetain();
  *(_QWORD *)&v99 = v93;
  v58 = _allocateUninitializedArray<A>(_:)();
  v59 = v14;
  v60 = (id)swift_getObjCClassFromMetadata();
  v61 = (id)*MEMORY[0x24BDD3380];
  v15 = (id)*MEMORY[0x24BDD3380];
  v62 = objc_msgSend(v60, sel_quantityTypeForIdentifier_, v61);

  if (!v62)
  {
LABEL_41:
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    goto LABEL_42;
  }
  v57 = v62;
LABEL_23:
  *v59 = v57;
  v54 = (id)swift_getObjCClassFromMetadata();
  v55 = (id)*MEMORY[0x24BDD3398];
  v16 = (id)*MEMORY[0x24BDD3398];
  v56 = objc_msgSend(v54, sel_quantityTypeForIdentifier_, v55);

  if (!v56)
  {
LABEL_40:
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    goto LABEL_41;
  }
  v59[1] = v56;
  v51 = (id)swift_getObjCClassFromMetadata();
  v52 = (id)*MEMORY[0x24BDD33B8];
  v17 = (id)*MEMORY[0x24BDD33B8];
  v53 = objc_msgSend(v51, sel_quantityTypeForIdentifier_, v52);

  if (!v53)
  {
LABEL_39:
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    goto LABEL_40;
  }
  v59[2] = v53;
  v48 = (id)swift_getObjCClassFromMetadata();
  v49 = (id)*MEMORY[0x24BDD33C8];
  v18 = (id)*MEMORY[0x24BDD33C8];
  v50 = objc_msgSend(v48, sel_quantityTypeForIdentifier_, v49);

  if (!v50)
  {
LABEL_38:
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    goto LABEL_39;
  }
  v59[3] = v50;
  v45 = (id)swift_getObjCClassFromMetadata();
  v46 = (id)*MEMORY[0x24BDD35B8];
  v19 = (id)*MEMORY[0x24BDD35B8];
  v47 = objc_msgSend(v45, sel_quantityTypeForIdentifier_, v46);

  if (!v47)
  {
LABEL_37:
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    goto LABEL_38;
  }
  v59[4] = v47;
  v42 = (id)swift_getObjCClassFromMetadata();
  v43 = (id)*MEMORY[0x24BDD35D0];
  v20 = (id)*MEMORY[0x24BDD35D0];
  v44 = objc_msgSend(v42, sel_quantityTypeForIdentifier_, v43);

  if (!v44)
  {
LABEL_36:
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    goto LABEL_37;
  }
  v59[5] = v44;
  v39 = (id)swift_getObjCClassFromMetadata();
  v40 = (id)*MEMORY[0x24BDD3608];
  v21 = (id)*MEMORY[0x24BDD3608];
  v41 = objc_msgSend(v39, sel_quantityTypeForIdentifier_, v40);

  if (!v41)
  {
LABEL_35:
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    goto LABEL_36;
  }
  v59[6] = v41;
  v36 = (id)swift_getObjCClassFromMetadata();
  v37 = (id)*MEMORY[0x24BDD3628];
  v22 = (id)*MEMORY[0x24BDD3628];
  v38 = objc_msgSend(v36, sel_quantityTypeForIdentifier_, v37);

  if (!v38)
  {
LABEL_34:
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    goto LABEL_35;
  }
  v59[7] = v38;
  v33 = (id)swift_getObjCClassFromMetadata();
  v34 = (id)*MEMORY[0x24BDD36C0];
  v23 = (id)*MEMORY[0x24BDD36C0];
  v35 = objc_msgSend(v33, sel_quantityTypeForIdentifier_, v34);

  if (!v35)
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    goto LABEL_34;
  }
  v59[8] = v35;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRetain();
  *((_QWORD *)&v99 + 1) = v58;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v31 = (id)MEMORY[0x24957CFB4](a1, a2);
  v24 = v31;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  v32 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_quantityTypeForIdentifier_, v31);
  if (!v32)
  {
LABEL_42:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    outlined destroy of [HKQuantityType]();
    outlined destroy of [HKQuantityType]();
    return 0;
  }
  v25 = v32;
  v26 = v32;
  *((_QWORD *)&v98 + 1) = v32;

  v27 = v92;
  v28 = v32;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  outlined destroy of HealthKitFetcher((id *)&v98);
  return v92;
}

void *implicit closure #7 in GetHealthQuantityIntentHandler.handle(intent:)(void *a1)
{
  id v1;
  id v2;

  v1 = a1;
  v2 = a1;

  return a1;
}

uint64_t @objc closure #1 in GetHealthQuantityIntentHandler.handle(intent:)(void *a1, const void *a2, void *a3)
{
  _QWORD *v3;
  id v5;
  id v6;
  _QWORD *v7;
  uint64_t v10;

  v3[4] = a3;
  v3[3] = a1;
  v3[2] = v3;
  v5 = a1;
  v3[5] = _Block_copy(a2);
  v6 = a3;
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v10 + 48) = v7;
  *v7 = *(_QWORD *)(v10 + 16);
  v7[1] = @objc closure #1 in LogQuantityIntentHandler.handle(intent:);
  return GetHealthQuantityIntentHandler.handle(intent:)((uint64_t)a1);
}

id GetHealthQuantityIntentHandler.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

uint64_t GetHealthQuantityIntentHandler.init()()
{
  uint64_t result;
  uint64_t v1;

  if (!"SiriWellnessIntents.GetHealthQuantityIntentHandler")
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  result = closure #1 in _unimplementedInitializer(className:initName:file:line:column:)((uint64_t)"SiriWellnessIntents.GetHealthQuantityIntentHandler", 50, (unint64_t)"init()", 6, 2, (unint64_t)"SiriWellnessIntents/GetHealthQuantityIntentHandler.swift", 56, 2, v1, 0x10uLL, 0x14uLL);
  __break(1u);
  return result;
}

id GetHealthQuantityIntentHandler.__deallocating_deinit()
{
  void *v0;
  objc_super v2;
  void *v3;

  v3 = v0;
  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

void HealthKitFetcher.predicate(start:end:)(const void *a1@<X0>, const void *a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  id v16;
  unint64_t v17;
  uint64_t v18;
  Class v19;
  id v20;
  Class v21;
  Class v22;
  Class v23;
  Class isa;
  Class v25;
  uint64_t v26;
  const void *v27;
  uint64_t v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char *v33;
  unint64_t v34;
  const void *v35;
  id v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int (*v40)(char *, uint64_t);
  id v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  uint64_t v45;

  v26 = a7;
  v35 = a1;
  v27 = a2;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v31 = a6;
  v45 = 0;
  v44 = 0;
  v42 = 0u;
  v43 = 0u;
  v41 = 0;
  v32 = (*(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?)
                               - 8)
                   + 64)
       + 15) & 0xFFFFFFFFFFFFFFF0;
  v7 = MEMORY[0x24BDAC7A8](v35);
  v33 = (char *)&v18 - v32;
  v34 = (v8 + 15) & 0xFFFFFFFFFFFFFFF0;
  v9 = MEMORY[0x24BDAC7A8](v7);
  v37 = (char *)&v18 - v34;
  v45 = v9;
  v44 = v10;
  *(_QWORD *)&v42 = v11;
  *((_QWORD *)&v42 + 1) = v12;
  *(_QWORD *)&v43 = v13;
  *((_QWORD *)&v43 + 1) = v14;
  v36 = (id)objc_opt_self();
  outlined init with copy of Date?(v35, v37);
  v38 = type metadata accessor for Date();
  v39 = *(_QWORD *)(v38 - 8);
  v40 = *(unsigned int (**)(char *, uint64_t))(v39 + 48);
  if (v40(v37, 1) == 1)
  {
    v25 = 0;
  }
  else
  {
    isa = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v39 + 8))(v37, v38);
    v25 = isa;
  }
  v23 = v25;
  outlined init with copy of Date?(v27, v33);
  if (((unsigned int (*)(char *, uint64_t, uint64_t))v40)(v33, 1, v38) == 1)
  {
    v22 = 0;
  }
  else
  {
    v21 = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v39 + 8))(v33, v38);
    v22 = v21;
  }
  v19 = v22;
  v20 = objc_msgSend(v36, sel_predicateForSamplesWithStartDate_endDate_options_, v23);

  v41 = v20;
  v15 = v29;
  v16 = v20;
  v17 = type metadata accessor for HKSample();
  MEMORY[0x24957CEB8](v29, v20, v17);

}

uint64_t HealthKitFetcher.isReadingAuthorized(for:)(uint64_t a1, id a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  id v6;
  _QWORD *v7;
  uint64_t v9;

  *(_QWORD *)(v5 + 64) = a2;
  *(_QWORD *)(v5 + 48) = v5;
  *(_QWORD *)(v5 + 56) = 0;
  *(_OWORD *)(v5 + 16) = 0u;
  *(_OWORD *)(v5 + 32) = 0u;
  *(_QWORD *)(v5 + 56) = a1;
  *(_QWORD *)(v5 + 16) = a2;
  *(_QWORD *)(v5 + 24) = a3;
  *(_QWORD *)(v5 + 32) = a4;
  *(_QWORD *)(v5 + 40) = a5;
  v6 = a2;
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v9 + 72) = v7;
  *v7 = *(_QWORD *)(v9 + 48);
  v7[1] = HealthKitFetcher.isReadingAuthorized(for:);
  return isSiriAuthorizedToAccessHealthData(store:)((uint64_t)a2);
}

uint64_t HealthKitFetcher.isReadingAuthorized(for:)(unsigned int a1)
{
  uint64_t *v1;
  void *v3;
  uint64_t v4;

  v4 = *v1;
  v3 = *(void **)(*v1 + 64);
  *(_QWORD *)(*v1 + 48) = *v1;
  swift_task_dealloc();

  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)(v4 + 48) + 8))(a1);
}

uint64_t HealthKitFetcher.query(start:end:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)(v6 + 816) = a6;
  *(_QWORD *)(v6 + 808) = a5;
  *(_QWORD *)(v6 + 800) = a4;
  *(_QWORD *)(v6 + 792) = a3;
  *(_QWORD *)(v6 + 784) = a2;
  *(_QWORD *)(v6 + 776) = a1;
  *(_QWORD *)(v6 + 336) = v6;
  *(_QWORD *)(v6 + 344) = 0;
  *(_QWORD *)(v6 + 352) = 0;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_OWORD *)(v6 + 32) = 0u;
  *(_QWORD *)(v6 + 368) = 0;
  *(_QWORD *)(v6 + 376) = 0;
  *(_QWORD *)(v6 + 392) = 0;
  *(_QWORD *)(v6 + 528) = 0;
  *(_QWORD *)(v6 + 536) = 0;
  *(_QWORD *)(v6 + 552) = 0;
  *(_QWORD *)(v6 + 616) = 0;
  *(_QWORD *)(v6 + 624) = 0;
  *(_QWORD *)(v6 + 632) = 0;
  *(_QWORD *)(v6 + 640) = 0;
  *(_QWORD *)(v6 + 728) = 0;
  *(_QWORD *)(v6 + 736) = 0;
  v7 = type metadata accessor for Calendar();
  *(_QWORD *)(v6 + 824) = v7;
  *(_QWORD *)(v6 + 832) = *(_QWORD *)(v7 - 8);
  *(_QWORD *)(v6 + 840) = swift_task_alloc();
  v8 = type metadata accessor for Date();
  *(_QWORD *)(v6 + 848) = v8;
  v9 = *(_QWORD *)(v8 - 8);
  *(_QWORD *)(v6 + 856) = v9;
  *(_QWORD *)(v6 + 864) = *(_QWORD *)(v9 + 64);
  *(_QWORD *)(v6 + 872) = swift_task_alloc();
  *(_QWORD *)(v6 + 880) = swift_task_alloc();
  *(_QWORD *)(v6 + 888) = swift_task_alloc();
  v10 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?)
                  - 8);
  *(_QWORD *)(v6 + 896) = v10;
  *(_QWORD *)(v6 + 904) = *(_QWORD *)(v10 + 64);
  *(_QWORD *)(v6 + 912) = swift_task_alloc();
  *(_QWORD *)(v6 + 920) = swift_task_alloc();
  *(_QWORD *)(v6 + 928) = swift_task_alloc();
  v11 = type metadata accessor for Logger();
  *(_QWORD *)(v6 + 936) = v11;
  *(_QWORD *)(v6 + 944) = *(_QWORD *)(v11 - 8);
  *(_QWORD *)(v6 + 952) = swift_task_alloc();
  *(_QWORD *)(v6 + 960) = swift_task_alloc();
  *(_QWORD *)(v6 + 968) = swift_task_alloc();
  *(_QWORD *)(v6 + 976) = swift_task_alloc();
  *(_QWORD *)(v6 + 984) = swift_task_alloc();
  *(_QWORD *)(v6 + 992) = swift_task_alloc();
  *(_QWORD *)(v6 + 1000) = swift_task_alloc();
  *(_QWORD *)(v6 + 1008) = swift_task_alloc();
  *(_QWORD *)(v6 + 1016) = swift_task_alloc();
  *(_QWORD *)(v6 + 1024) = swift_task_alloc();
  *(_QWORD *)(v6 + 1032) = swift_task_alloc();
  *(_QWORD *)(v6 + 1040) = swift_task_alloc();
  *(_QWORD *)(v6 + 344) = a1;
  *(_QWORD *)(v6 + 352) = a2;
  *(_QWORD *)(v6 + 16) = a3;
  *(_QWORD *)(v6 + 24) = a4;
  *(_QWORD *)(v6 + 32) = a5;
  *(_QWORD *)(v6 + 40) = a6;
  return swift_task_switch();
}

uint64_t HealthKitFetcher.query(start:end:)()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t, uint64_t, uint64_t);
  id v3;
  id v4;
  _QWORD *v5;
  void (*v6)(uint64_t, uint64_t);
  char *v7;
  char *v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  id v24;
  _QWORD *v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  id v31;
  uint64_t v32;
  uint8_t *buf;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  id v40;
  id v41;
  uint64_t v42;
  uint64_t v43;
  const void *v44;
  uint64_t v45;
  const void *v46;
  int v47;
  void *v48;
  uint32_t size;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  NSObject *oslog;
  os_log_type_t v67;
  uint8_t *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t (*v71)(uint64_t, uint64_t, uint64_t);
  uint64_t v72;

  v1 = *(_QWORD *)(v0 + 1040);
  v37 = *(_QWORD *)(v0 + 944);
  v39 = *(_QWORD *)(v0 + 936);
  v48 = *(void **)(v0 + 928);
  v45 = *(_QWORD *)(v0 + 896);
  v43 = *(_QWORD *)(v0 + 816);
  v42 = *(_QWORD *)(v0 + 808);
  v41 = *(id *)(v0 + 800);
  v40 = *(id *)(v0 + 792);
  v46 = *(const void **)(v0 + 784);
  v44 = *(const void **)(v0 + 776);
  *(_QWORD *)(v0 + 336) = v0;
  v38 = Logger.wellnessIntents.unsafeMutableAddressor();
  swift_beginAccess();
  v2 = *(void (**)(uint64_t, uint64_t, uint64_t))(v37 + 16);
  *(_QWORD *)(v0 + 1048) = v2;
  v2(v1, v38, v39);
  swift_endAccess();
  v3 = v40;
  v4 = v41;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v50 = (_QWORD *)swift_allocObject();
  v50[2] = v40;
  v50[3] = v41;
  v50[4] = v42;
  v50[5] = v43;
  outlined init with copy of Date?(v44, v48);
  v47 = *(_DWORD *)(v45 + 80);
  v52 = swift_allocObject();
  outlined init with take of Date?(v48, (void *)(v52 + ((v47 + 16) & ~(unint64_t)v47)));
  outlined init with copy of Date?(v46, v48);
  v54 = swift_allocObject();
  outlined init with take of Date?(v48, (void *)(v54 + ((v47 + 16) & ~(unint64_t)v47)));
  oslog = Logger.logObject.getter();
  v67 = static os_log_type_t.debug.getter();
  *(_QWORD *)(v0 + 360) = 32;
  *(_QWORD *)(v0 + 1056) = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  *(_QWORD *)(v0 + 1064) = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  *(_QWORD *)(v0 + 1072) = lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  size = *(_DWORD *)(v0 + 1312);
  v56 = swift_allocObject();
  *(_BYTE *)(v56 + 16) = 64;
  v57 = swift_allocObject();
  *(_BYTE *)(v57 + 16) = 8;
  v51 = swift_allocObject();
  *(_QWORD *)(v51 + 16) = partial apply for implicit closure #1 in HealthKitFetcher.query(start:end:);
  *(_QWORD *)(v51 + 24) = v50;
  v58 = swift_allocObject();
  *(_QWORD *)(v58 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:);
  *(_QWORD *)(v58 + 24) = v51;
  v59 = swift_allocObject();
  *(_BYTE *)(v59 + 16) = 32;
  v60 = swift_allocObject();
  *(_BYTE *)(v60 + 16) = 8;
  v53 = swift_allocObject();
  *(_QWORD *)(v53 + 16) = partial apply for implicit closure #2 in HealthKitFetcher.query(start:end:);
  *(_QWORD *)(v53 + 24) = v52;
  v61 = swift_allocObject();
  *(_QWORD *)(v61 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:);
  *(_QWORD *)(v61 + 24) = v53;
  v62 = swift_allocObject();
  *(_BYTE *)(v62 + 16) = 32;
  v63 = swift_allocObject();
  *(_BYTE *)(v63 + 16) = 8;
  v55 = swift_allocObject();
  *(_QWORD *)(v55 + 16) = partial apply for implicit closure #2 in HealthKitFetcher.query(start:end:);
  *(_QWORD *)(v55 + 24) = v54;
  v64 = swift_allocObject();
  *(_QWORD *)(v64 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:);
  *(_QWORD *)(v64 + 24) = v55;
  *(_QWORD *)(v0 + 1080) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
  _allocateUninitializedArray<A>(_:)();
  v65 = v5;
  swift_retain();
  *v65 = partial apply for closure #1 in OSLogArguments.append(_:);
  v65[1] = v56;
  swift_retain();
  v65[2] = partial apply for closure #1 in OSLogArguments.append(_:);
  v65[3] = v57;
  swift_retain();
  v65[4] = partial apply for closure #1 in OSLogArguments.append(_:);
  v65[5] = v58;
  swift_retain();
  v65[6] = partial apply for closure #1 in OSLogArguments.append(_:);
  v65[7] = v59;
  swift_retain();
  v65[8] = partial apply for closure #1 in OSLogArguments.append(_:);
  v65[9] = v60;
  swift_retain();
  v65[10] = partial apply for closure #1 in OSLogArguments.append(_:);
  v65[11] = v61;
  swift_retain();
  v65[12] = partial apply for closure #1 in OSLogArguments.append(_:);
  v65[13] = v62;
  swift_retain();
  v65[14] = partial apply for closure #1 in OSLogArguments.append(_:);
  v65[15] = v63;
  swift_retain();
  v65[16] = partial apply for closure #1 in OSLogArguments.append(_:);
  v65[17] = v64;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(oslog, v67))
  {
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    v34 = createStorage<A>(capacity:type:)(1);
    v35 = createStorage<A>(capacity:type:)(2);
    v68 = buf;
    v69 = v34;
    v70 = v35;
    serialize(_:at:)(2, &v68);
    serialize(_:at:)(3, &v68);
    v71 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v72 = v56;
    closure #1 in osLogInternal(_:log:type:)(&v71, (uint64_t)&v68, (uint64_t)&v69, (uint64_t)&v70);
    v71 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v72 = v57;
    closure #1 in osLogInternal(_:log:type:)(&v71, (uint64_t)&v68, (uint64_t)&v69, (uint64_t)&v70);
    v71 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v72 = v58;
    closure #1 in osLogInternal(_:log:type:)(&v71, (uint64_t)&v68, (uint64_t)&v69, (uint64_t)&v70);
    v71 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v72 = v59;
    closure #1 in osLogInternal(_:log:type:)(&v71, (uint64_t)&v68, (uint64_t)&v69, (uint64_t)&v70);
    v71 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v72 = v60;
    closure #1 in osLogInternal(_:log:type:)(&v71, (uint64_t)&v68, (uint64_t)&v69, (uint64_t)&v70);
    v71 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v72 = v61;
    closure #1 in osLogInternal(_:log:type:)(&v71, (uint64_t)&v68, (uint64_t)&v69, (uint64_t)&v70);
    v71 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v72 = v62;
    closure #1 in osLogInternal(_:log:type:)(&v71, (uint64_t)&v68, (uint64_t)&v69, (uint64_t)&v70);
    v71 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v72 = v63;
    closure #1 in osLogInternal(_:log:type:)(&v71, (uint64_t)&v68, (uint64_t)&v69, (uint64_t)&v70);
    v71 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v72 = v64;
    closure #1 in osLogInternal(_:log:type:)(&v71, (uint64_t)&v68, (uint64_t)&v69, (uint64_t)&v70);
    _os_log_impl(&dword_24749F000, oslog, v67, "Executing HealthKit queries for %@ between dates %s - %s", buf, size);
    destroyStorage<A>(_:count:)(v34, 1, v32);
    destroyStorage<A>(_:count:)(v35, 2, MEMORY[0x24BEE4AD8] + 8);
    MEMORY[0x24957D398](buf, MEMORY[0x24BEE4260]);
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
  }
  v28 = v36[130];
  v27 = v36[118];
  v29 = v36[117];
  v31 = (id)v36[100];

  v6 = *(void (**)(uint64_t, uint64_t))(v27 + 8);
  v36[136] = v6;
  v6(v28, v29);
  v36[137] = type metadata accessor for GetHealthQuantityIntentResponse();
  v30 = GetHealthQuantityIntentResponse.__allocating_init(code:userActivity:)(4, 0);
  v36[138] = v30;
  v7 = v30;
  v8 = v30;
  v9 = v30;
  v10 = v30;
  v11 = v30;
  v12 = v30;
  v13 = v30;
  v14 = v30;
  v15 = v30;
  v16 = v30;
  v17 = v30;
  v18 = v30;
  v19 = v30;
  v20 = v30;
  v21 = v30;
  v22 = v30;
  v23 = v30;
  v36[46] = v30;
  v24 = v31;
  v25 = (_QWORD *)swift_task_alloc();
  v36[139] = v25;
  *v25 = v36[42];
  v25[1] = HealthKitFetcher.query(start:end:);
  return localizedPreferredUnitName(for:value:store:)(v36[100], 0, 1, 0);
}

{
  _QWORD *v0;
  uint64_t v1;
  id v2;
  id v3;
  _QWORD *v4;
  id v6;
  id v7;
  id v8;
  _QWORD *v9;
  id v10;

  v1 = v0[141];
  v7 = (id)v0[138];
  v8 = (id)v0[100];
  v10 = (id)v0[99];
  v0[42] = v0;
  v6 = (id)MEMORY[0x24957CFB4](v1);
  swift_bridgeObjectRelease();
  objc_msgSend(v7, sel_setUnit_, v6);

  v2 = v8;
  v3 = v10;
  v4 = (_QWORD *)swift_task_alloc();
  v9[143] = v4;
  *v4 = v9[42];
  v4[1] = HealthKitFetcher.query(start:end:);
  return getPreferredUnit(for:store:)(v9[100], (uint64_t)v10);
}

{
  _QWORD *v0;
  void *v1;
  id v2;
  uint64_t v3;
  id v4;
  _QWORD *v5;
  uint64_t result;
  id v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  id v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(uint64_t, uint64_t);
  char *v26;
  uint64_t v27;
  uint8_t *v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(uint64_t, uint64_t, uint64_t);
  id v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  uint32_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  NSObject *v46;
  os_log_type_t v47;
  uint64_t v48;
  uint64_t v49;
  void (*v50)(uint64_t, uint64_t);
  id v51;
  char *v52;
  uint64_t v53;
  uint8_t *v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  void (*v60)(uint64_t, uint64_t, uint64_t);
  uint32_t v61;
  os_log_type_t v62;
  NSObject *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  void (*v67)(uint64_t, uint64_t);
  uint64_t v68;
  uint8_t *v69;
  uint64_t v70;
  uint64_t v71;
  id v72;
  uint64_t v73;
  uint64_t v74;
  void (*v75)(uint64_t, uint64_t, uint64_t);
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  void (*v80)(uint64_t, uint64_t, uint64_t);
  int v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint32_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  _QWORD *v96;
  NSObject *v97;
  os_log_type_t v98;
  uint64_t v99;
  uint64_t v100;
  void (*v101)(uint64_t, uint64_t);
  uint64_t v102;
  uint8_t *v103;
  uint64_t v104;
  uint64_t v105;
  _QWORD *v106;
  id v107;
  uint64_t v108;
  uint64_t v109;
  void (*v110)(uint64_t, uint64_t, uint64_t);
  uint32_t v111;
  os_log_type_t v112;
  NSObject *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  id v119;
  char v120;
  id v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  void (*v126)(uint64_t, uint64_t);
  const void *v127;
  uint64_t v128;
  void *v129;
  id v130;
  uint64_t v131;
  id v132;
  uint64_t v133;
  uint64_t v134;
  void *v135;
  unsigned int (*v136)(void *, uint64_t, uint64_t);
  uint64_t v137;
  uint64_t v138;
  void (*v139)(uint64_t, uint64_t);
  uint64_t v140;
  uint8_t *v141;
  uint64_t v142;
  uint64_t v143;
  _QWORD *v144;
  uint64_t v145;
  uint64_t v146;
  void (*v147)(uint64_t, uint64_t, uint64_t);
  uint32_t v148;
  os_log_type_t v149;
  NSObject *log;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  void (*v154)(uint64_t, uint64_t);
  uint64_t v155;
  id v156;
  char v157;
  uint64_t v158;
  uint64_t v159;
  uint8_t *buf;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  void (*v165)(uint64_t, uint64_t, uint64_t);
  uint64_t v166;
  uint32_t size;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  _QWORD *v178;
  NSObject *oslog;
  os_log_type_t v180;
  uint64_t v181;
  uint64_t v182;
  id v183;
  uint8_t *v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t (*v187)(uint64_t, uint64_t, uint64_t);
  uint64_t v188;
  uint8_t *v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t (*v192)(uint64_t, uint64_t, uint64_t);
  uint64_t v193;
  uint8_t *v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t (*v197)(uint64_t, uint64_t, uint64_t);
  uint64_t v198;

  v1 = (void *)v0[144];
  v0[42] = v0;
  v183 = v1;
  v182 = v0[145];
  v0[146] = v1;
  v0[47] = v1;
  v2 = v1;
  if (!v183)
  {
    v31 = *(id *)(v181 + 1104);
    v34 = *(void (**)(uint64_t, uint64_t, uint64_t))(v181 + 1048);
    v19 = *(_QWORD *)(v181 + 952);
    v33 = *(_QWORD *)(v181 + 936);
    v38 = *(_QWORD *)(v181 + 816);
    v37 = *(_QWORD *)(v181 + 808);
    v36 = *(id *)(v181 + 800);
    v35 = *(id *)(v181 + 792);

    v32 = Logger.wellnessIntents.unsafeMutableAddressor();
    swift_beginAccess();
    v34(v19, v32, v33);
    swift_endAccess();
    v20 = v35;
    v21 = v36;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v40 = (_QWORD *)swift_allocObject();
    v40[2] = v35;
    v40[3] = v36;
    v40[4] = v37;
    v40[5] = v38;
    v46 = Logger.logObject.getter();
    v47 = static os_log_type_t.error.getter();
    *(_QWORD *)(v181 + 384) = 12;
    UnsignedInteger<>.init<A>(_:)();
    v39 = *(_DWORD *)(v181 + 1316);
    v42 = swift_allocObject();
    *(_BYTE *)(v42 + 16) = 64;
    v43 = swift_allocObject();
    *(_BYTE *)(v43 + 16) = 8;
    v41 = swift_allocObject();
    *(_QWORD *)(v41 + 16) = partial apply for implicit closure #1 in HealthKitFetcher.query(start:end:);
    *(_QWORD *)(v41 + 24) = v40;
    v44 = swift_allocObject();
    *(_QWORD *)(v44 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:);
    *(_QWORD *)(v44 + 24) = v41;
    _allocateUninitializedArray<A>(_:)();
    v45 = v22;
    swift_retain();
    *v45 = partial apply for closure #1 in OSLogArguments.append(_:);
    v45[1] = v42;
    swift_retain();
    v45[2] = partial apply for closure #1 in OSLogArguments.append(_:);
    v45[3] = v43;
    swift_retain();
    v45[4] = partial apply for closure #1 in OSLogArguments.append(_:);
    v45[5] = v44;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(v46, v47))
    {
      v28 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      v29 = createStorage<A>(capacity:type:)(1);
      v30 = createStorage<A>(capacity:type:)(0);
      v184 = v28;
      v185 = v29;
      v186 = v30;
      serialize(_:at:)(2, &v184);
      serialize(_:at:)(1, &v184);
      v187 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v188 = v42;
      result = closure #1 in osLogInternal(_:log:type:)(&v187, (uint64_t)&v184, (uint64_t)&v185, (uint64_t)&v186);
      if (v182)
        return result;
      v187 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v188 = v43;
      closure #1 in osLogInternal(_:log:type:)(&v187, (uint64_t)&v184, (uint64_t)&v185, (uint64_t)&v186);
      v187 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v188 = v44;
      closure #1 in osLogInternal(_:log:type:)(&v187, (uint64_t)&v184, (uint64_t)&v185, (uint64_t)&v186);
      _os_log_impl(&dword_24749F000, v46, v47, "Failed to get units for %@", v28, v39);
      destroyStorage<A>(_:count:)(v29, 1, v27);
      destroyStorage<A>(_:count:)(v30, 0, MEMORY[0x24BEE4AD8] + 8);
      MEMORY[0x24957D398](v28, MEMORY[0x24BEE4260]);
      swift_release();
      swift_release();
      swift_release();
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
    }
    v25 = *(void (**)(uint64_t, uint64_t))(v181 + 1088);
    v23 = *(_QWORD *)(v181 + 952);
    v24 = *(_QWORD *)(v181 + 936);

    v25(v23, v24);
    v26 = GetHealthQuantityIntentResponse.__allocating_init(code:userActivity:)(5, 0);

    v52 = v26;
LABEL_43:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(char *))(*(_QWORD *)(v181 + 336) + 8))(v52);
  }
  v166 = *(_QWORD *)(v181 + 1104);
  v165 = *(void (**)(uint64_t, uint64_t, uint64_t))(v181 + 1048);
  v3 = *(_QWORD *)(v181 + 1032);
  v164 = *(_QWORD *)(v181 + 936);
  *(_QWORD *)(v181 + 392) = v183;
  v163 = Logger.wellnessIntents.unsafeMutableAddressor();
  swift_beginAccess();
  v165(v3, v163, v164);
  swift_endAccess();
  v168 = swift_allocObject();
  *(_QWORD *)(v168 + 16) = v166;
  v4 = v183;
  v170 = swift_allocObject();
  *(_QWORD *)(v170 + 16) = v183;
  oslog = Logger.logObject.getter();
  v180 = static os_log_type_t.debug.getter();
  *(_QWORD *)(v181 + 400) = 22;
  UnsignedInteger<>.init<A>(_:)();
  size = *(_DWORD *)(v181 + 1320);
  v172 = swift_allocObject();
  *(_BYTE *)(v172 + 16) = 32;
  v173 = swift_allocObject();
  *(_BYTE *)(v173 + 16) = 8;
  v169 = swift_allocObject();
  *(_QWORD *)(v169 + 16) = partial apply for specialized implicit closure #5 in HealthKitFetcher.query(start:end:);
  *(_QWORD *)(v169 + 24) = v168;
  v174 = swift_allocObject();
  *(_QWORD *)(v174 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:);
  *(_QWORD *)(v174 + 24) = v169;
  v175 = swift_allocObject();
  *(_BYTE *)(v175 + 16) = 64;
  v176 = swift_allocObject();
  *(_BYTE *)(v176 + 16) = 8;
  v171 = swift_allocObject();
  *(_QWORD *)(v171 + 16) = partial apply for implicit closure #3 in LogQuantityIntentHandler.handle(intent:);
  *(_QWORD *)(v171 + 24) = v170;
  v177 = swift_allocObject();
  *(_QWORD *)(v177 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:);
  *(_QWORD *)(v177 + 24) = v171;
  _allocateUninitializedArray<A>(_:)();
  v178 = v5;
  swift_retain();
  *v178 = partial apply for closure #1 in OSLogArguments.append(_:);
  v178[1] = v172;
  swift_retain();
  v178[2] = partial apply for closure #1 in OSLogArguments.append(_:);
  v178[3] = v173;
  swift_retain();
  v178[4] = partial apply for closure #1 in OSLogArguments.append(_:);
  v178[5] = v174;
  swift_retain();
  v178[6] = partial apply for closure #1 in OSLogArguments.append(_:);
  v178[7] = v175;
  swift_retain();
  v178[8] = partial apply for closure #1 in OSLogArguments.append(_:);
  v178[9] = v176;
  swift_retain();
  v178[10] = partial apply for closure #1 in OSLogArguments.append(_:);
  v178[11] = v177;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(oslog, v180))
  {
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    v159 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    v161 = createStorage<A>(capacity:type:)(1);
    v162 = createStorage<A>(capacity:type:)(1);
    v194 = buf;
    v195 = v161;
    v196 = v162;
    serialize(_:at:)(2, &v194);
    serialize(_:at:)(2, &v194);
    v197 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v198 = v172;
    result = closure #1 in osLogInternal(_:log:type:)(&v197, (uint64_t)&v194, (uint64_t)&v195, (uint64_t)&v196);
    if (v182)
      return result;
    v197 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v198 = v173;
    closure #1 in osLogInternal(_:log:type:)(&v197, (uint64_t)&v194, (uint64_t)&v195, (uint64_t)&v196);
    v197 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v198 = v174;
    closure #1 in osLogInternal(_:log:type:)(&v197, (uint64_t)&v194, (uint64_t)&v195, (uint64_t)&v196);
    v197 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v198 = v175;
    closure #1 in osLogInternal(_:log:type:)(&v197, (uint64_t)&v194, (uint64_t)&v195, (uint64_t)&v196);
    v197 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v198 = v176;
    closure #1 in osLogInternal(_:log:type:)(&v197, (uint64_t)&v194, (uint64_t)&v195, (uint64_t)&v196);
    v197 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v198 = v177;
    closure #1 in osLogInternal(_:log:type:)(&v197, (uint64_t)&v194, (uint64_t)&v195, (uint64_t)&v196);
    _os_log_impl(&dword_24749F000, oslog, v180, "Localized unit -> %s <- found for %@", buf, size);
    destroyStorage<A>(_:count:)(v161, 1, v159);
    destroyStorage<A>(_:count:)(v162, 1, MEMORY[0x24BEE4AD8] + 8);
    MEMORY[0x24957D398](buf, MEMORY[0x24BEE4260]);
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    v158 = 0;
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    v158 = v182;
  }
  v154 = *(void (**)(uint64_t, uint64_t))(v181 + 1088);
  v152 = *(_QWORD *)(v181 + 1032);
  v153 = *(_QWORD *)(v181 + 936);
  v155 = *(_QWORD *)(v181 + 816);
  v156 = *(id *)(v181 + 800);

  v154(v152, v153);
  swift_bridgeObjectRetain();
  *(_QWORD *)(v181 + 408) = v155;
  v7 = v156;
  *(_QWORD *)(v181 + 416) = v156;
  *(_QWORD *)(v181 + 1176) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [HKQuantityType]);
  *(_QWORD *)(v181 + 1184) = lazy protocol witness table accessor for type [HKQuantityType] and conformance [A]();
  *(_QWORD *)(v181 + 1192) = lazy protocol witness table accessor for type HKQuantityType and conformance NSObject();
  v157 = Sequence<>.contains(_:)();

  outlined destroy of [HKQuantityType]();
  if ((v157 & 1) == 0)
  {
    v132 = *(id *)(v181 + 1104);

    v135 = *(void **)(v181 + 920);
    v133 = *(_QWORD *)(v181 + 856);
    v134 = *(_QWORD *)(v181 + 848);
    outlined init with copy of Date?(*(const void **)(v181 + 776), v135);
    v136 = *(unsigned int (**)(void *, uint64_t, uint64_t))(v133 + 48);
    if (v136(v135, 1, v134) == 1)
    {
      v130 = *(id *)(v181 + 1104);
      v131 = *(_QWORD *)(v181 + 920);

      outlined destroy of Date?(v131);
    }
    else
    {
      v10 = *(_QWORD *)(v181 + 920);
      v129 = *(void **)(v181 + 912);
      v11 = *(_QWORD *)(v181 + 880);
      v128 = *(_QWORD *)(v181 + 848);
      v127 = *(const void **)(v181 + 784);
      v126 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v181 + 856) + 32);
      *(_QWORD *)(v181 + 1224) = v126;
      v126(v11, v10);
      outlined init with copy of Date?(v127, v129);
      if (v136(v129, 1, v128) != 1)
      {
        v116 = *(_QWORD *)(v181 + 912);
        v115 = *(_QWORD *)(v181 + 872);
        v117 = *(_QWORD *)(v181 + 848);
        v118 = *(_QWORD *)(v181 + 808);
        v119 = *(id *)(v181 + 800);

        ((void (*)(uint64_t, uint64_t, uint64_t))v126)(v115, v116, v117);
        swift_bridgeObjectRetain();
        *(_QWORD *)(v181 + 464) = v118;
        v12 = v119;
        *(_QWORD *)(v181 + 472) = v119;
        v120 = Sequence<>.contains(_:)();

        outlined destroy of [HKQuantityType]();
        if ((v120 & 1) == 0)
        {
          v107 = *(id *)(v181 + 1104);
          v110 = *(void (**)(uint64_t, uint64_t, uint64_t))(v181 + 1048);
          v13 = *(_QWORD *)(v181 + 1008);
          v109 = *(_QWORD *)(v181 + 936);

          v108 = Logger.wellnessIntents.unsafeMutableAddressor();
          swift_beginAccess();
          v110(v13, v108, v109);
          swift_endAccess();
          v113 = Logger.logObject.getter();
          v112 = static os_log_type_t.debug.getter();
          *(_QWORD *)(v181 + 568) = 2;
          UnsignedInteger<>.init<A>(_:)();
          v111 = *(_DWORD *)(v181 + 1344);
          v114 = _allocateUninitializedArray<A>(_:)();
          if (os_log_type_enabled(v113, v112))
          {
            v103 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
            v102 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
            v104 = createStorage<A>(capacity:type:)(0);
            v105 = createStorage<A>(capacity:type:)(0);
            *(_QWORD *)(v181 + 648) = v103;
            *(_QWORD *)(v181 + 656) = v104;
            *(_QWORD *)(v181 + 664) = v105;
            serialize(_:at:)(0, (_BYTE **)(v181 + 648));
            serialize(_:at:)(0, (_BYTE **)(v181 + 648));
            *(_QWORD *)(v181 + 672) = v114;
            v106 = (_QWORD *)swift_task_alloc();
            v106[2] = v181 + 648;
            v106[3] = v181 + 656;
            v106[4] = v181 + 664;
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
            lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
            result = Sequence.forEach(_:)();
            if (v158)
              return result;
            swift_task_dealloc();
            _os_log_impl(&dword_24749F000, v113, v112, "Searching for discrete min, max and average for data", v103, v111);
            destroyStorage<A>(_:count:)(v104, 0, v102);
            destroyStorage<A>(_:count:)(v105, 0, MEMORY[0x24BEE4AD8] + 8);
            MEMORY[0x24957D398](v103, MEMORY[0x24BEE4260]);
            swift_bridgeObjectRelease();
          }
          else
          {
            swift_bridgeObjectRelease();
          }
          v101 = *(void (**)(uint64_t, uint64_t))(v181 + 1088);
          v99 = *(_QWORD *)(v181 + 1008);
          v100 = *(_QWORD *)(v181 + 936);

          v101(v99, v100);
          v14 = (_QWORD *)swift_task_alloc();
          *(_QWORD *)(v181 + 1232) = v14;
          *v14 = *(_QWORD *)(v181 + 336);
          v14[1] = HealthKitFetcher.query(start:end:);
          return HealthKitFetcher.getDiscreteStats(startDate:endDate:)(*(_QWORD *)(v181 + 880), *(_QWORD *)(v181 + 872), *(_QWORD *)(v181 + 792), *(_QWORD *)(v181 + 800), *(_QWORD *)(v181 + 808), *(_QWORD *)(v181 + 816));
        }
        v72 = *(id *)(v181 + 1104);
        v75 = *(void (**)(uint64_t, uint64_t, uint64_t))(v181 + 1048);
        v15 = *(_QWORD *)(v181 + 992);
        v74 = *(_QWORD *)(v181 + 936);
        v82 = *(_QWORD *)(v181 + 888);
        v76 = *(_QWORD *)(v181 + 880);
        v79 = *(_QWORD *)(v181 + 872);
        v77 = *(_QWORD *)(v181 + 856);
        v83 = *(_QWORD *)(v181 + 848);

        v73 = Logger.wellnessIntents.unsafeMutableAddressor();
        swift_beginAccess();
        v75(v15, v73, v74);
        swift_endAccess();
        v80 = *(void (**)(uint64_t, uint64_t, uint64_t))(v77 + 16);
        *(_QWORD *)(v181 + 1256) = v80;
        v80(v82, v76, v83);
        v81 = *(_DWORD *)(v77 + 80);
        *(_DWORD *)(v181 + 1360) = v81;
        v78 = swift_allocObject();
        ((void (*)(unint64_t, uint64_t, uint64_t))v126)(v78 + ((v81 + 16) & ~(unint64_t)v81), v82, v83);
        swift_retain();
        v86 = swift_allocObject();
        *(_QWORD *)(v86 + 16) = partial apply for implicit closure #10 in LogQuantityIntentHandler.handle(intent:);
        *(_QWORD *)(v86 + 24) = v78;
        swift_release();
        v80(v82, v79, v83);
        v84 = swift_allocObject();
        ((void (*)(unint64_t, uint64_t, uint64_t))v126)(v84 + ((v81 + 16) & ~(unint64_t)v81), v82, v83);
        swift_retain();
        v88 = swift_allocObject();
        *(_QWORD *)(v88 + 16) = partial apply for implicit closure #10 in LogQuantityIntentHandler.handle(intent:);
        *(_QWORD *)(v88 + 24) = v84;
        swift_release();
        v97 = Logger.logObject.getter();
        v98 = static os_log_type_t.debug.getter();
        *(_QWORD *)(v181 + 480) = 22;
        UnsignedInteger<>.init<A>(_:)();
        v85 = *(_DWORD *)(v181 + 1328);
        v90 = swift_allocObject();
        *(_BYTE *)(v90 + 16) = 32;
        v91 = swift_allocObject();
        *(_BYTE *)(v91 + 16) = 8;
        v87 = swift_allocObject();
        *(_QWORD *)(v87 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation<A>(_:align:privacy:);
        *(_QWORD *)(v87 + 24) = v86;
        v92 = swift_allocObject();
        *(_QWORD *)(v92 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:);
        *(_QWORD *)(v92 + 24) = v87;
        v93 = swift_allocObject();
        *(_BYTE *)(v93 + 16) = 32;
        v94 = swift_allocObject();
        *(_BYTE *)(v94 + 16) = 8;
        v89 = swift_allocObject();
        *(_QWORD *)(v89 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation<A>(_:align:privacy:);
        *(_QWORD *)(v89 + 24) = v88;
        v95 = swift_allocObject();
        *(_QWORD *)(v95 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:);
        *(_QWORD *)(v95 + 24) = v89;
        _allocateUninitializedArray<A>(_:)();
        v96 = v16;
        swift_retain();
        *v96 = partial apply for closure #1 in OSLogArguments.append(_:);
        v96[1] = v90;
        swift_retain();
        v96[2] = partial apply for closure #1 in OSLogArguments.append(_:);
        v96[3] = v91;
        swift_retain();
        v96[4] = partial apply for closure #1 in OSLogArguments.append(_:);
        v96[5] = v92;
        swift_retain();
        v96[6] = partial apply for closure #1 in OSLogArguments.append(_:);
        v96[7] = v93;
        swift_retain();
        v96[8] = partial apply for closure #1 in OSLogArguments.append(_:);
        v96[9] = v94;
        swift_retain();
        v96[10] = partial apply for closure #1 in OSLogArguments.append(_:);
        v96[11] = v95;
        _finalizeUninitializedArray<A>(_:)();
        swift_bridgeObjectRelease();
        if (os_log_type_enabled(v97, v98))
        {
          v69 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
          v68 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
          v70 = createStorage<A>(capacity:type:)(0);
          v71 = createStorage<A>(capacity:type:)(2);
          v189 = v69;
          v190 = v70;
          v191 = v71;
          serialize(_:at:)(2, &v189);
          serialize(_:at:)(2, &v189);
          v192 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
          v193 = v90;
          result = closure #1 in osLogInternal(_:log:type:)(&v192, (uint64_t)&v189, (uint64_t)&v190, (uint64_t)&v191);
          if (v158)
            return result;
          v192 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
          v193 = v91;
          closure #1 in osLogInternal(_:log:type:)(&v192, (uint64_t)&v189, (uint64_t)&v190, (uint64_t)&v191);
          v192 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
          v193 = v92;
          closure #1 in osLogInternal(_:log:type:)(&v192, (uint64_t)&v189, (uint64_t)&v190, (uint64_t)&v191);
          v192 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
          v193 = v93;
          closure #1 in osLogInternal(_:log:type:)(&v192, (uint64_t)&v189, (uint64_t)&v190, (uint64_t)&v191);
          v192 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
          v193 = v94;
          closure #1 in osLogInternal(_:log:type:)(&v192, (uint64_t)&v189, (uint64_t)&v190, (uint64_t)&v191);
          v192 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
          v193 = v95;
          closure #1 in osLogInternal(_:log:type:)(&v192, (uint64_t)&v189, (uint64_t)&v190, (uint64_t)&v191);
          _os_log_impl(&dword_24749F000, v97, v98, "Searching for the total value for cumulative datatypes in %s - %s", v69, v85);
          destroyStorage<A>(_:count:)(v70, 0, v68);
          destroyStorage<A>(_:count:)(v71, 2, MEMORY[0x24BEE4AD8] + 8);
          MEMORY[0x24957D398](v69, MEMORY[0x24BEE4260]);
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          swift_release();
        }
        else
        {
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          swift_release();
        }
        v67 = *(void (**)(uint64_t, uint64_t))(v181 + 1088);
        v65 = *(_QWORD *)(v181 + 992);
        v66 = *(_QWORD *)(v181 + 936);

        v67(v65, v66);
        v17 = (_QWORD *)swift_task_alloc();
        *(_QWORD *)(v181 + 1264) = v17;
        *v17 = *(_QWORD *)(v181 + 336);
        v17[1] = HealthKitFetcher.query(start:end:);
        return HealthKitFetcher.getCumulativeTotal(startDate:endDate:)(*(_QWORD *)(v181 + 880), *(_QWORD *)(v181 + 872), *(_QWORD *)(v181 + 792), *(_QWORD *)(v181 + 800), *(_QWORD *)(v181 + 808), *(_QWORD *)(v181 + 816));
      }
      v121 = *(id *)(v181 + 1104);
      v122 = *(_QWORD *)(v181 + 912);
      v125 = *(_QWORD *)(v181 + 880);
      v123 = *(_QWORD *)(v181 + 856);
      v124 = *(_QWORD *)(v181 + 848);

      outlined destroy of Date?(v122);
      (*(void (**)(uint64_t, uint64_t))(v123 + 8))(v125, v124);
    }
    v60 = *(void (**)(uint64_t, uint64_t, uint64_t))(v181 + 1048);
    v18 = *(_QWORD *)(v181 + 960);
    v59 = *(_QWORD *)(v181 + 936);
    v58 = Logger.wellnessIntents.unsafeMutableAddressor();
    swift_beginAccess();
    v60(v18, v58, v59);
    swift_endAccess();
    v63 = Logger.logObject.getter();
    v62 = static os_log_type_t.error.getter();
    *(_QWORD *)(v181 + 424) = 2;
    UnsignedInteger<>.init<A>(_:)();
    v61 = *(_DWORD *)(v181 + 1324);
    v64 = _allocateUninitializedArray<A>(_:)();
    if (os_log_type_enabled(v63, v62))
    {
      v54 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      v53 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      v55 = createStorage<A>(capacity:type:)(0);
      v56 = createStorage<A>(capacity:type:)(0);
      *(_QWORD *)(v181 + 432) = v54;
      *(_QWORD *)(v181 + 440) = v55;
      *(_QWORD *)(v181 + 448) = v56;
      serialize(_:at:)(0, (_BYTE **)(v181 + 432));
      serialize(_:at:)(0, (_BYTE **)(v181 + 432));
      *(_QWORD *)(v181 + 456) = v64;
      v57 = (_QWORD *)swift_task_alloc();
      v57[2] = v181 + 432;
      v57[3] = v181 + 440;
      v57[4] = v181 + 448;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
      lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
      result = Sequence.forEach(_:)();
      if (v158)
        return result;
      swift_task_dealloc();
      _os_log_impl(&dword_24749F000, v63, v62, "Stopping search because no dates range was specified", v54, v61);
      destroyStorage<A>(_:count:)(v55, 0, v53);
      destroyStorage<A>(_:count:)(v56, 0, MEMORY[0x24BEE4AD8] + 8);
      MEMORY[0x24957D398](v54, MEMORY[0x24BEE4260]);
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    v51 = *(id *)(v181 + 1168);
    v50 = *(void (**)(uint64_t, uint64_t))(v181 + 1088);
    v48 = *(_QWORD *)(v181 + 960);
    v49 = *(_QWORD *)(v181 + 936);

    v50(v48, v49);
    v52 = *(char **)(v181 + 1104);
    goto LABEL_43;
  }
  v147 = *(void (**)(uint64_t, uint64_t, uint64_t))(v181 + 1048);
  v8 = *(_QWORD *)(v181 + 1024);
  v146 = *(_QWORD *)(v181 + 936);
  v145 = Logger.wellnessIntents.unsafeMutableAddressor();
  swift_beginAccess();
  v147(v8, v145, v146);
  swift_endAccess();
  log = Logger.logObject.getter();
  v149 = static os_log_type_t.debug.getter();
  *(_QWORD *)(v181 + 680) = 2;
  UnsignedInteger<>.init<A>(_:)();
  v148 = *(_DWORD *)(v181 + 1352);
  v151 = _allocateUninitializedArray<A>(_:)();
  if (!os_log_type_enabled(log, v149))
  {
    swift_bridgeObjectRelease();
    goto LABEL_13;
  }
  v141 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
  v140 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
  v142 = createStorage<A>(capacity:type:)(0);
  v143 = createStorage<A>(capacity:type:)(0);
  *(_QWORD *)(v181 + 744) = v141;
  *(_QWORD *)(v181 + 752) = v142;
  *(_QWORD *)(v181 + 760) = v143;
  serialize(_:at:)(0, (_BYTE **)(v181 + 744));
  serialize(_:at:)(0, (_BYTE **)(v181 + 744));
  *(_QWORD *)(v181 + 768) = v151;
  v144 = (_QWORD *)swift_task_alloc();
  v144[2] = v181 + 744;
  v144[3] = v181 + 752;
  v144[4] = v181 + 760;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
  lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
  result = Sequence.forEach(_:)();
  if (!v158)
  {
    swift_task_dealloc();
    _os_log_impl(&dword_24749F000, log, v149, "Searching for most recent sample", v141, v148);
    destroyStorage<A>(_:count:)(v142, 0, v140);
    destroyStorage<A>(_:count:)(v143, 0, MEMORY[0x24BEE4AD8] + 8);
    MEMORY[0x24957D398](v141, MEMORY[0x24BEE4260]);
    swift_bridgeObjectRelease();
LABEL_13:
    v139 = *(void (**)(uint64_t, uint64_t))(v181 + 1088);
    v137 = *(_QWORD *)(v181 + 1024);
    v138 = *(_QWORD *)(v181 + 936);

    v139(v137, v138);
    v9 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v181 + 1200) = v9;
    *v9 = *(_QWORD *)(v181 + 336);
    v9[1] = HealthKitFetcher.query(start:end:);
    return HealthKitFetcher.getMostRecent(startDate:endDate:)(*(_QWORD *)(v181 + 776), *(_QWORD *)(v181 + 784), *(_QWORD *)(v181 + 792), *(_QWORD *)(v181 + 800), *(_QWORD *)(v181 + 808), *(_QWORD *)(v181 + 816));
  }
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  double v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t, uint64_t);
  id v19;
  uint64_t v20;
  uint8_t *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(uint64_t, uint64_t, uint64_t);
  uint32_t v28;
  os_log_type_t v29;
  NSObject *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(uint64_t, uint64_t);
  uint64_t v35;
  uint8_t *v36;
  uint64_t v37;
  uint64_t v38;
  id v39;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(uint64_t, uint64_t, uint64_t);
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void (*v47)(uint64_t, uint64_t, uint64_t);
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint32_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  NSObject *v64;
  os_log_type_t v65;
  uint64_t v66;
  uint64_t v67;
  void (*v68)(uint64_t, uint64_t);
  uint64_t v69;
  uint8_t *v70;
  uint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  id v74;
  uint64_t v75;
  uint64_t v76;
  void (*v77)(uint64_t, uint64_t, uint64_t);
  uint32_t v78;
  os_log_type_t v79;
  NSObject *log;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  id v86;
  char v87;
  id v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  void (*v93)(uint64_t, uint64_t);
  const void *v94;
  uint64_t v95;
  void *v96;
  id v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  void (*v101)(uint64_t, uint64_t);
  id v102;
  char *v103;
  char *v104;
  uint64_t v105;
  uint8_t *buf;
  uint64_t v107;
  uint64_t v108;
  _QWORD *v109;
  uint64_t v110;
  uint64_t v111;
  void (*v112)(uint64_t, uint64_t, uint64_t);
  uint32_t size;
  os_log_type_t v114;
  NSObject *oslog;
  uint64_t v116;
  id v117;
  uint64_t v118;
  id v119;
  Class isa;
  uint64_t v121;
  void (*v122)(uint64_t, uint64_t);
  uint64_t v123;
  id v124;
  Class v125;
  id v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  void *v130;
  unsigned int (*v131)(void *, uint64_t, uint64_t);
  double v132;
  double v133;
  char v134;
  id v135;
  id v136;
  id v137;
  uint64_t v138;
  uint8_t *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t (*v142)(uint64_t, uint64_t, uint64_t);
  uint64_t v143;

  v1 = *(_QWORD *)(v0 + 1208);
  *(_QWORD *)(v0 + 336) = v0;
  if (!v1)
  {
    v135 = *(id *)(v138 + 1104);

    goto LABEL_10;
  }
  v136 = *(id *)(v138 + 1208);
  *(_QWORD *)(v138 + 728) = v136;
  v137 = objc_msgSend(v136, sel_mostRecentQuantity);
  if (v137)
  {
    objc_msgSend(v137, sel_doubleValueForUnit_, *(_QWORD *)(v138 + 1168));
    v132 = v2;

    v133 = v132;
    v134 = 0;
  }
  else
  {
    v133 = 0.0;
    v134 = 1;
  }
  if ((v134 & 1) != 0)
  {
    v117 = *(id *)(v138 + 1104);

LABEL_10:
    v112 = *(void (**)(uint64_t, uint64_t, uint64_t))(v138 + 1048);
    v4 = *(_QWORD *)(v138 + 1016);
    v111 = *(_QWORD *)(v138 + 936);
    v110 = Logger.wellnessIntents.unsafeMutableAddressor();
    swift_beginAccess();
    v112(v4, v110, v111);
    swift_endAccess();
    oslog = Logger.logObject.getter();
    v114 = static os_log_type_t.error.getter();
    *(_QWORD *)(v138 + 688) = 2;
    UnsignedInteger<>.init<A>(_:)();
    size = *(_DWORD *)(v138 + 1356);
    v116 = _allocateUninitializedArray<A>(_:)();
    if (os_log_type_enabled(oslog, v114))
    {
      v5 = *(_QWORD *)(v138 + 1216);
      buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      v105 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      v107 = createStorage<A>(capacity:type:)(0);
      v108 = createStorage<A>(capacity:type:)(0);
      *(_QWORD *)(v138 + 696) = buf;
      *(_QWORD *)(v138 + 704) = v107;
      *(_QWORD *)(v138 + 712) = v108;
      serialize(_:at:)(0, (_BYTE **)(v138 + 696));
      serialize(_:at:)(0, (_BYTE **)(v138 + 696));
      *(_QWORD *)(v138 + 720) = v116;
      v109 = (_QWORD *)swift_task_alloc();
      v109[2] = v138 + 696;
      v109[3] = v138 + 704;
      v109[4] = v138 + 712;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
      lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
      result = Sequence.forEach(_:)();
      if (v5)
        return result;
      swift_task_dealloc();
      _os_log_impl(&dword_24749F000, oslog, v114, "Couldn't find the recent sample statistics returning .dataUnavailable", buf, size);
      destroyStorage<A>(_:count:)(v107, 0, v105);
      destroyStorage<A>(_:count:)(v108, 0, MEMORY[0x24BEE4AD8] + 8);
      MEMORY[0x24957D398](buf, MEMORY[0x24BEE4260]);
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    v102 = *(id *)(v138 + 1168);
    v101 = *(void (**)(uint64_t, uint64_t))(v138 + 1088);
    v99 = *(_QWORD *)(v138 + 1016);
    v100 = *(_QWORD *)(v138 + 936);

    v101(v99, v100);
    v103 = GetHealthQuantityIntentResponse.__allocating_init(code:userActivity:)(102, 0);

    v104 = v103;
LABEL_37:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(char *))(*(_QWORD *)(v138 + 336) + 8))(v104);
  }
  v3 = *(void **)(v138 + 1104);
  v126 = v3;
  v123 = *(_QWORD *)(v138 + 888);
  v118 = *(_QWORD *)(v138 + 856);
  v121 = *(_QWORD *)(v138 + 848);
  *(double *)(v138 + 736) = v133;
  objc_msgSend(v3, sel_setMostRecent_, v133);

  v119 = objc_msgSend(v136, sel_startDate);
  static Date._unconditionallyBridgeFromObjectiveC(_:)();
  isa = Date._bridgeToObjectiveC()().super.isa;
  v122 = *(void (**)(uint64_t, uint64_t))(v118 + 8);
  v122(v123, v121);

  objc_msgSend(v126, sel_setSampleStartDate_, isa);
  v124 = objc_msgSend(v136, sel_endDate);
  static Date._unconditionallyBridgeFromObjectiveC(_:)();
  v125 = Date._bridgeToObjectiveC()().super.isa;
  v122(v123, v121);

  objc_msgSend(v126, sel_setSampleEndDate_, v125);
  v127 = *(_QWORD *)(v138 + 1216);
  v130 = *(void **)(v138 + 920);
  v128 = *(_QWORD *)(v138 + 856);
  v129 = *(_QWORD *)(v138 + 848);
  outlined init with copy of Date?(*(const void **)(v138 + 776), v130);
  v131 = *(unsigned int (**)(void *, uint64_t, uint64_t))(v128 + 48);
  if (v131(v130, 1, v129) == 1)
  {
    v97 = *(id *)(v138 + 1104);
    v98 = *(_QWORD *)(v138 + 920);

    outlined destroy of Date?(v98);
  }
  else
  {
    v7 = *(_QWORD *)(v138 + 920);
    v96 = *(void **)(v138 + 912);
    v8 = *(_QWORD *)(v138 + 880);
    v95 = *(_QWORD *)(v138 + 848);
    v94 = *(const void **)(v138 + 784);
    v93 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v138 + 856) + 32);
    *(_QWORD *)(v138 + 1224) = v93;
    v93(v8, v7);
    outlined init with copy of Date?(v94, v96);
    if (v131(v96, 1, v95) != 1)
    {
      v83 = *(_QWORD *)(v138 + 912);
      v82 = *(_QWORD *)(v138 + 872);
      v84 = *(_QWORD *)(v138 + 848);
      v85 = *(_QWORD *)(v138 + 808);
      v86 = *(id *)(v138 + 800);

      ((void (*)(uint64_t, uint64_t, uint64_t))v93)(v82, v83, v84);
      swift_bridgeObjectRetain();
      *(_QWORD *)(v138 + 464) = v85;
      v9 = v86;
      *(_QWORD *)(v138 + 472) = v86;
      v87 = Sequence<>.contains(_:)();

      outlined destroy of [HKQuantityType]();
      if ((v87 & 1) == 0)
      {
        v74 = *(id *)(v138 + 1104);
        v77 = *(void (**)(uint64_t, uint64_t, uint64_t))(v138 + 1048);
        v10 = *(_QWORD *)(v138 + 1008);
        v76 = *(_QWORD *)(v138 + 936);

        v75 = Logger.wellnessIntents.unsafeMutableAddressor();
        swift_beginAccess();
        v77(v10, v75, v76);
        swift_endAccess();
        log = Logger.logObject.getter();
        v79 = static os_log_type_t.debug.getter();
        *(_QWORD *)(v138 + 568) = 2;
        UnsignedInteger<>.init<A>(_:)();
        v78 = *(_DWORD *)(v138 + 1344);
        v81 = _allocateUninitializedArray<A>(_:)();
        if (os_log_type_enabled(log, v79))
        {
          v70 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
          v69 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
          v71 = createStorage<A>(capacity:type:)(0);
          v72 = createStorage<A>(capacity:type:)(0);
          *(_QWORD *)(v138 + 648) = v70;
          *(_QWORD *)(v138 + 656) = v71;
          *(_QWORD *)(v138 + 664) = v72;
          serialize(_:at:)(0, (_BYTE **)(v138 + 648));
          serialize(_:at:)(0, (_BYTE **)(v138 + 648));
          *(_QWORD *)(v138 + 672) = v81;
          v73 = (_QWORD *)swift_task_alloc();
          v73[2] = v138 + 648;
          v73[3] = v138 + 656;
          v73[4] = v138 + 664;
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
          lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
          result = Sequence.forEach(_:)();
          if (v127)
            return result;
          swift_task_dealloc();
          _os_log_impl(&dword_24749F000, log, v79, "Searching for discrete min, max and average for data", v70, v78);
          destroyStorage<A>(_:count:)(v71, 0, v69);
          destroyStorage<A>(_:count:)(v72, 0, MEMORY[0x24BEE4AD8] + 8);
          MEMORY[0x24957D398](v70, MEMORY[0x24BEE4260]);
          swift_bridgeObjectRelease();
        }
        else
        {
          swift_bridgeObjectRelease();
        }
        v68 = *(void (**)(uint64_t, uint64_t))(v138 + 1088);
        v66 = *(_QWORD *)(v138 + 1008);
        v67 = *(_QWORD *)(v138 + 936);

        v68(v66, v67);
        v11 = (_QWORD *)swift_task_alloc();
        *(_QWORD *)(v138 + 1232) = v11;
        *v11 = *(_QWORD *)(v138 + 336);
        v11[1] = HealthKitFetcher.query(start:end:);
        return HealthKitFetcher.getDiscreteStats(startDate:endDate:)(*(_QWORD *)(v138 + 880), *(_QWORD *)(v138 + 872), *(_QWORD *)(v138 + 792), *(_QWORD *)(v138 + 800), *(_QWORD *)(v138 + 808), *(_QWORD *)(v138 + 816));
      }
      v39 = *(id *)(v138 + 1104);
      v42 = *(void (**)(uint64_t, uint64_t, uint64_t))(v138 + 1048);
      v12 = *(_QWORD *)(v138 + 992);
      v41 = *(_QWORD *)(v138 + 936);
      v49 = *(_QWORD *)(v138 + 888);
      v43 = *(_QWORD *)(v138 + 880);
      v46 = *(_QWORD *)(v138 + 872);
      v44 = *(_QWORD *)(v138 + 856);
      v50 = *(_QWORD *)(v138 + 848);

      v40 = Logger.wellnessIntents.unsafeMutableAddressor();
      swift_beginAccess();
      v42(v12, v40, v41);
      swift_endAccess();
      v47 = *(void (**)(uint64_t, uint64_t, uint64_t))(v44 + 16);
      *(_QWORD *)(v138 + 1256) = v47;
      v47(v49, v43, v50);
      v48 = *(_DWORD *)(v44 + 80);
      *(_DWORD *)(v138 + 1360) = v48;
      v45 = swift_allocObject();
      ((void (*)(unint64_t, uint64_t, uint64_t))v93)(v45 + ((v48 + 16) & ~(unint64_t)v48), v49, v50);
      swift_retain();
      v53 = swift_allocObject();
      *(_QWORD *)(v53 + 16) = partial apply for implicit closure #10 in LogQuantityIntentHandler.handle(intent:);
      *(_QWORD *)(v53 + 24) = v45;
      swift_release();
      v47(v49, v46, v50);
      v51 = swift_allocObject();
      ((void (*)(unint64_t, uint64_t, uint64_t))v93)(v51 + ((v48 + 16) & ~(unint64_t)v48), v49, v50);
      swift_retain();
      v55 = swift_allocObject();
      *(_QWORD *)(v55 + 16) = partial apply for implicit closure #10 in LogQuantityIntentHandler.handle(intent:);
      *(_QWORD *)(v55 + 24) = v51;
      swift_release();
      v64 = Logger.logObject.getter();
      v65 = static os_log_type_t.debug.getter();
      *(_QWORD *)(v138 + 480) = 22;
      UnsignedInteger<>.init<A>(_:)();
      v52 = *(_DWORD *)(v138 + 1328);
      v57 = swift_allocObject();
      *(_BYTE *)(v57 + 16) = 32;
      v58 = swift_allocObject();
      *(_BYTE *)(v58 + 16) = 8;
      v54 = swift_allocObject();
      *(_QWORD *)(v54 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation<A>(_:align:privacy:);
      *(_QWORD *)(v54 + 24) = v53;
      v59 = swift_allocObject();
      *(_QWORD *)(v59 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:);
      *(_QWORD *)(v59 + 24) = v54;
      v60 = swift_allocObject();
      *(_BYTE *)(v60 + 16) = 32;
      v61 = swift_allocObject();
      *(_BYTE *)(v61 + 16) = 8;
      v56 = swift_allocObject();
      *(_QWORD *)(v56 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation<A>(_:align:privacy:);
      *(_QWORD *)(v56 + 24) = v55;
      v62 = swift_allocObject();
      *(_QWORD *)(v62 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:);
      *(_QWORD *)(v62 + 24) = v56;
      _allocateUninitializedArray<A>(_:)();
      v63 = v13;
      swift_retain();
      *v63 = partial apply for closure #1 in OSLogArguments.append(_:);
      v63[1] = v57;
      swift_retain();
      v63[2] = partial apply for closure #1 in OSLogArguments.append(_:);
      v63[3] = v58;
      swift_retain();
      v63[4] = partial apply for closure #1 in OSLogArguments.append(_:);
      v63[5] = v59;
      swift_retain();
      v63[6] = partial apply for closure #1 in OSLogArguments.append(_:);
      v63[7] = v60;
      swift_retain();
      v63[8] = partial apply for closure #1 in OSLogArguments.append(_:);
      v63[9] = v61;
      swift_retain();
      v63[10] = partial apply for closure #1 in OSLogArguments.append(_:);
      v63[11] = v62;
      _finalizeUninitializedArray<A>(_:)();
      swift_bridgeObjectRelease();
      if (os_log_type_enabled(v64, v65))
      {
        v36 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
        v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
        v37 = createStorage<A>(capacity:type:)(0);
        v38 = createStorage<A>(capacity:type:)(2);
        v139 = v36;
        v140 = v37;
        v141 = v38;
        serialize(_:at:)(2, &v139);
        serialize(_:at:)(2, &v139);
        v142 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
        v143 = v57;
        result = closure #1 in osLogInternal(_:log:type:)(&v142, (uint64_t)&v139, (uint64_t)&v140, (uint64_t)&v141);
        if (v127)
          return result;
        v142 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
        v143 = v58;
        closure #1 in osLogInternal(_:log:type:)(&v142, (uint64_t)&v139, (uint64_t)&v140, (uint64_t)&v141);
        v142 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
        v143 = v59;
        closure #1 in osLogInternal(_:log:type:)(&v142, (uint64_t)&v139, (uint64_t)&v140, (uint64_t)&v141);
        v142 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
        v143 = v60;
        closure #1 in osLogInternal(_:log:type:)(&v142, (uint64_t)&v139, (uint64_t)&v140, (uint64_t)&v141);
        v142 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
        v143 = v61;
        closure #1 in osLogInternal(_:log:type:)(&v142, (uint64_t)&v139, (uint64_t)&v140, (uint64_t)&v141);
        v142 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
        v143 = v62;
        closure #1 in osLogInternal(_:log:type:)(&v142, (uint64_t)&v139, (uint64_t)&v140, (uint64_t)&v141);
        _os_log_impl(&dword_24749F000, v64, v65, "Searching for the total value for cumulative datatypes in %s - %s", v36, v52);
        destroyStorage<A>(_:count:)(v37, 0, v35);
        destroyStorage<A>(_:count:)(v38, 2, MEMORY[0x24BEE4AD8] + 8);
        MEMORY[0x24957D398](v36, MEMORY[0x24BEE4260]);
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
      }
      else
      {
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
      }
      v34 = *(void (**)(uint64_t, uint64_t))(v138 + 1088);
      v32 = *(_QWORD *)(v138 + 992);
      v33 = *(_QWORD *)(v138 + 936);

      v34(v32, v33);
      v14 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v138 + 1264) = v14;
      *v14 = *(_QWORD *)(v138 + 336);
      v14[1] = HealthKitFetcher.query(start:end:);
      return HealthKitFetcher.getCumulativeTotal(startDate:endDate:)(*(_QWORD *)(v138 + 880), *(_QWORD *)(v138 + 872), *(_QWORD *)(v138 + 792), *(_QWORD *)(v138 + 800), *(_QWORD *)(v138 + 808), *(_QWORD *)(v138 + 816));
    }
    v88 = *(id *)(v138 + 1104);
    v89 = *(_QWORD *)(v138 + 912);
    v92 = *(_QWORD *)(v138 + 880);
    v90 = *(_QWORD *)(v138 + 856);
    v91 = *(_QWORD *)(v138 + 848);

    outlined destroy of Date?(v89);
    (*(void (**)(uint64_t, uint64_t))(v90 + 8))(v92, v91);
  }
  v27 = *(void (**)(uint64_t, uint64_t, uint64_t))(v138 + 1048);
  v15 = *(_QWORD *)(v138 + 960);
  v26 = *(_QWORD *)(v138 + 936);
  v25 = Logger.wellnessIntents.unsafeMutableAddressor();
  swift_beginAccess();
  v27(v15, v25, v26);
  swift_endAccess();
  v30 = Logger.logObject.getter();
  v29 = static os_log_type_t.error.getter();
  *(_QWORD *)(v138 + 424) = 2;
  UnsignedInteger<>.init<A>(_:)();
  v28 = *(_DWORD *)(v138 + 1324);
  v31 = _allocateUninitializedArray<A>(_:)();
  if (!os_log_type_enabled(v30, v29))
  {
    swift_bridgeObjectRelease();
    goto LABEL_36;
  }
  v21 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
  v22 = createStorage<A>(capacity:type:)(0);
  v23 = createStorage<A>(capacity:type:)(0);
  *(_QWORD *)(v138 + 432) = v21;
  *(_QWORD *)(v138 + 440) = v22;
  *(_QWORD *)(v138 + 448) = v23;
  serialize(_:at:)(0, (_BYTE **)(v138 + 432));
  serialize(_:at:)(0, (_BYTE **)(v138 + 432));
  *(_QWORD *)(v138 + 456) = v31;
  v24 = (_QWORD *)swift_task_alloc();
  v24[2] = v138 + 432;
  v24[3] = v138 + 440;
  v24[4] = v138 + 448;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
  lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
  result = Sequence.forEach(_:)();
  if (!v127)
  {
    swift_task_dealloc();
    _os_log_impl(&dword_24749F000, v30, v29, "Stopping search because no dates range was specified", v21, v28);
    destroyStorage<A>(_:count:)(v22, 0, v20);
    destroyStorage<A>(_:count:)(v23, 0, MEMORY[0x24BEE4AD8] + 8);
    MEMORY[0x24957D398](v21, MEMORY[0x24BEE4260]);
    swift_bridgeObjectRelease();
LABEL_36:
    v19 = *(id *)(v138 + 1168);
    v18 = *(void (**)(uint64_t, uint64_t))(v138 + 1088);
    v16 = *(_QWORD *)(v138 + 960);
    v17 = *(_QWORD *)(v138 + 936);

    v18(v16, v17);
    v104 = *(char **)(v138 + 1104);
    goto LABEL_37;
  }
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  double v2;
  double v3;
  double v4;
  void *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t, uint64_t);
  id v19;
  uint64_t v20;
  uint8_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(uint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(uint64_t, uint64_t);
  id v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint8_t *buf;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(uint64_t, uint64_t, uint64_t);
  uint32_t size;
  os_log_type_t v44;
  NSObject *log;
  uint64_t v46;
  id v47;
  uint64_t v48;
  id v49;
  Class isa;
  uint64_t v51;
  void (*v52)(uint64_t, uint64_t);
  uint64_t v53;
  id v54;
  Class v55;
  id v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void (*v60)(uint64_t, uint64_t, uint64_t);
  uint64_t v61;
  uint32_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  os_log_t oslog;
  os_log_type_t v70;
  double v71;
  double v72;
  char v73;
  id v74;
  id v75;
  double v76;
  double v77;
  char v78;
  id v79;
  id v80;
  double v81;
  double v82;
  char v83;
  id v84;
  id v85;
  id v86;
  uint64_t v87;
  uint8_t *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t (*v91)(uint64_t, uint64_t, uint64_t);
  uint64_t v92;

  v1 = *(_QWORD *)(v0 + 1240);
  *(_QWORD *)(v0 + 336) = v0;
  if (!v1)
  {
    v84 = *(id *)(v87 + 1104);

    goto LABEL_20;
  }
  v85 = *(id *)(v87 + 1240);
  *(_QWORD *)(v87 + 616) = v85;
  v86 = objc_msgSend(v85, sel_minimumQuantity);
  if (v86)
  {
    objc_msgSend(v86, sel_doubleValueForUnit_, *(_QWORD *)(v87 + 1168));
    v81 = v2;

    v82 = v81;
    v83 = 0;
  }
  else
  {
    v82 = 0.0;
    v83 = 1;
  }
  if ((v83 & 1) != 0)
  {
    v79 = *(id *)(v87 + 1104);

    goto LABEL_20;
  }
  *(double *)(v87 + 624) = v82;
  v80 = objc_msgSend(v85, sel_maximumQuantity);
  if (v80)
  {
    objc_msgSend(v80, sel_doubleValueForUnit_, *(_QWORD *)(v87 + 1168));
    v76 = v3;

    v77 = v76;
    v78 = 0;
  }
  else
  {
    v77 = 0.0;
    v78 = 1;
  }
  if ((v78 & 1) != 0)
  {
    v74 = *(id *)(v87 + 1104);

    goto LABEL_20;
  }
  *(double *)(v87 + 632) = v77;
  v75 = objc_msgSend(v85, sel_averageQuantity);
  if (v75)
  {
    objc_msgSend(v75, sel_doubleValueForUnit_, *(_QWORD *)(v87 + 1168));
    v71 = v4;

    v72 = v71;
    v73 = 0;
  }
  else
  {
    v72 = 0.0;
    v73 = 1;
  }
  if ((v73 & 1) != 0)
  {
    v47 = *(id *)(v87 + 1104);

LABEL_20:
    v42 = *(void (**)(uint64_t, uint64_t, uint64_t))(v87 + 1048);
    v8 = *(_QWORD *)(v87 + 1000);
    v41 = *(_QWORD *)(v87 + 936);
    v40 = Logger.wellnessIntents.unsafeMutableAddressor();
    swift_beginAccess();
    v42(v8, v40, v41);
    swift_endAccess();
    log = Logger.logObject.getter();
    v44 = static os_log_type_t.error.getter();
    *(_QWORD *)(v87 + 576) = 2;
    UnsignedInteger<>.init<A>(_:)();
    size = *(_DWORD *)(v87 + 1348);
    v46 = _allocateUninitializedArray<A>(_:)();
    if (os_log_type_enabled(log, v44))
    {
      v9 = *(_QWORD *)(v87 + 1248);
      buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      v37 = createStorage<A>(capacity:type:)(0);
      v38 = createStorage<A>(capacity:type:)(0);
      *(_QWORD *)(v87 + 584) = buf;
      *(_QWORD *)(v87 + 592) = v37;
      *(_QWORD *)(v87 + 600) = v38;
      serialize(_:at:)(0, (_BYTE **)(v87 + 584));
      serialize(_:at:)(0, (_BYTE **)(v87 + 584));
      *(_QWORD *)(v87 + 608) = v46;
      v39 = (_QWORD *)swift_task_alloc();
      v39[2] = v87 + 584;
      v39[3] = v87 + 592;
      v39[4] = v87 + 600;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
      lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
      result = Sequence.forEach(_:)();
      if (v9)
        return result;
      swift_task_dealloc();
      _os_log_impl(&dword_24749F000, log, v44, "Couldn't find the correct statistics returning .dataUnavailable", buf, size);
      destroyStorage<A>(_:count:)(v37, 0, v35);
      destroyStorage<A>(_:count:)(v38, 0, MEMORY[0x24BEE4AD8] + 8);
      MEMORY[0x24957D398](buf, MEMORY[0x24BEE4260]);
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    v32 = *(id *)(v87 + 1168);
    v26 = *(void (**)(uint64_t, uint64_t))(v87 + 1088);
    v24 = *(_QWORD *)(v87 + 1000);
    v25 = *(_QWORD *)(v87 + 936);
    v29 = *(_QWORD *)(v87 + 880);
    v28 = *(_QWORD *)(v87 + 872);
    v27 = *(_QWORD *)(v87 + 856);
    v30 = *(_QWORD *)(v87 + 848);

    v26(v24, v25);
    v33 = GetHealthQuantityIntentResponse.__allocating_init(code:userActivity:)(102, 0);
    v31 = *(void (**)(uint64_t, uint64_t))(v27 + 8);
    v31(v28, v30);
    v31(v29, v30);

    v34 = v33;
LABEL_30:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(char *))(*(_QWORD *)(v87 + 336) + 8))(v34);
  }
  v5 = *(void **)(v87 + 1104);
  v56 = v5;
  v53 = *(_QWORD *)(v87 + 888);
  v48 = *(_QWORD *)(v87 + 856);
  v51 = *(_QWORD *)(v87 + 848);
  *(double *)(v87 + 640) = v72;
  objc_msgSend(v5, sel_setMinimum_, v82);

  objc_msgSend(v56, sel_setMaximum_, v77);
  objc_msgSend(v56, sel_setAverage_, v72);

  v49 = objc_msgSend(v85, sel_startDate);
  static Date._unconditionallyBridgeFromObjectiveC(_:)();
  isa = Date._bridgeToObjectiveC()().super.isa;
  v52 = *(void (**)(uint64_t, uint64_t))(v48 + 8);
  v52(v53, v51);

  objc_msgSend(v56, sel_setSampleStartDate_, isa);
  v54 = objc_msgSend(v85, sel_endDate);
  static Date._unconditionallyBridgeFromObjectiveC(_:)();
  v55 = Date._bridgeToObjectiveC()().super.isa;
  v52(v53, v51);

  objc_msgSend(v56, sel_setSampleEndDate_, v55);
  v57 = *(_QWORD *)(v87 + 1248);
  v61 = *(_QWORD *)(v87 + 1104);
  v60 = *(void (**)(uint64_t, uint64_t, uint64_t))(v87 + 1048);
  v6 = *(_QWORD *)(v87 + 968);
  v59 = *(_QWORD *)(v87 + 936);
  v58 = Logger.wellnessIntents.unsafeMutableAddressor();
  swift_beginAccess();
  v60(v6, v58, v59);
  swift_endAccess();
  v63 = swift_allocObject();
  *(_QWORD *)(v63 + 16) = v61;
  oslog = (os_log_t)Logger.logObject.getter();
  v70 = static os_log_type_t.debug.getter();
  *(_QWORD *)(v87 + 560) = 12;
  UnsignedInteger<>.init<A>(_:)();
  v62 = *(_DWORD *)(v87 + 1340);
  v65 = swift_allocObject();
  *(_BYTE *)(v65 + 16) = 32;
  v66 = swift_allocObject();
  *(_BYTE *)(v66 + 16) = 8;
  v64 = swift_allocObject();
  *(_QWORD *)(v64 + 16) = partial apply for specialized implicit closure #12 in HealthKitFetcher.query(start:end:);
  *(_QWORD *)(v64 + 24) = v63;
  v67 = swift_allocObject();
  *(_QWORD *)(v67 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:);
  *(_QWORD *)(v67 + 24) = v64;
  _allocateUninitializedArray<A>(_:)();
  v68 = v7;
  swift_retain();
  *v68 = partial apply for closure #1 in OSLogArguments.append(_:);
  v68[1] = v65;
  swift_retain();
  v68[2] = partial apply for closure #1 in OSLogArguments.append(_:);
  v68[3] = v66;
  swift_retain();
  v68[4] = partial apply for closure #1 in OSLogArguments.append(_:);
  v68[5] = v67;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (!os_log_type_enabled(oslog, v70))
  {
    swift_release();
    swift_release();
    swift_release();
LABEL_29:
    v19 = *(id *)(v87 + 1168);
    v13 = *(void (**)(uint64_t, uint64_t))(v87 + 1088);
    v11 = *(_QWORD *)(v87 + 968);
    v12 = *(_QWORD *)(v87 + 936);
    v16 = *(_QWORD *)(v87 + 880);
    v15 = *(_QWORD *)(v87 + 872);
    v14 = *(_QWORD *)(v87 + 856);
    v17 = *(_QWORD *)(v87 + 848);

    v13(v11, v12);
    v18 = *(void (**)(uint64_t, uint64_t))(v14 + 8);
    v18(v15, v17);
    v18(v16, v17);

    v34 = *(char **)(v87 + 1104);
    goto LABEL_30;
  }
  v21 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
  v22 = createStorage<A>(capacity:type:)(0);
  v23 = createStorage<A>(capacity:type:)(1);
  v88 = v21;
  v89 = v22;
  v90 = v23;
  serialize(_:at:)(2, &v88);
  serialize(_:at:)(1, &v88);
  v91 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  v92 = v65;
  result = closure #1 in osLogInternal(_:log:type:)(&v91, (uint64_t)&v88, (uint64_t)&v89, (uint64_t)&v90);
  if (!v57)
  {
    v91 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v92 = v66;
    closure #1 in osLogInternal(_:log:type:)(&v91, (uint64_t)&v88, (uint64_t)&v89, (uint64_t)&v90);
    v91 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v92 = v67;
    closure #1 in osLogInternal(_:log:type:)(&v91, (uint64_t)&v88, (uint64_t)&v89, (uint64_t)&v90);
    _os_log_impl(&dword_24749F000, oslog, v70, "Returning response: %s", v21, v62);
    destroyStorage<A>(_:count:)(v22, 0, v20);
    destroyStorage<A>(_:count:)(v23, 1, MEMORY[0x24BEE4AD8] + 8);
    MEMORY[0x24957D398](v21, MEMORY[0x24BEE4260]);
    swift_release();
    swift_release();
    swift_release();
    goto LABEL_29;
  }
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  double v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t result;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t);
  id v20;
  uint64_t v21;
  uint8_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(uint64_t, uint64_t);
  id v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint8_t *v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  void (*v43)(uint64_t, uint64_t, uint64_t);
  uint32_t v44;
  os_log_type_t v45;
  NSObject *log;
  uint64_t v47;
  uint64_t v48;
  id v49;
  Class isa;
  uint64_t v51;
  void (*v52)(uint64_t, uint64_t);
  uint64_t v53;
  id v54;
  Class v55;
  id v56;
  id v57;
  uint64_t v58;
  uint64_t v59;
  void (*v60)(uint64_t, uint64_t, uint64_t);
  uint64_t v61;
  uint32_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  os_log_t v69;
  os_log_type_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  void (*v74)(uint64_t, uint64_t);
  id v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint8_t *buf;
  uint64_t v83;
  uint64_t v84;
  id v85;
  uint64_t v86;
  uint64_t v87;
  void (*v88)(uint64_t, uint64_t, uint64_t);
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  void (*v92)(uint64_t, uint64_t, uint64_t);
  int v93;
  uint64_t v94;
  uint64_t v95;
  void (*v96)(unint64_t, uint64_t, uint64_t);
  uint64_t v97;
  uint32_t size;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  _QWORD *v114;
  NSObject *oslog;
  os_log_type_t v116;
  double v117;
  double v118;
  char v119;
  id v120;
  id v121;
  id v122;
  uint64_t v123;
  uint8_t *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t (*v127)(uint64_t, uint64_t, uint64_t);
  uint64_t v128;
  uint8_t *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t (*v132)(uint64_t, uint64_t, uint64_t);
  uint64_t v133;

  v1 = *(_QWORD *)(v0 + 1272);
  *(_QWORD *)(v0 + 336) = v0;
  if (!v1)
  {
    v120 = *(id *)(v123 + 1104);

    goto LABEL_17;
  }
  v121 = *(id *)(v123 + 1272);
  *(_QWORD *)(v123 + 528) = v121;
  v122 = objc_msgSend(v121, sel_sumQuantity);
  if (v122)
  {
    objc_msgSend(v122, sel_doubleValueForUnit_, *(_QWORD *)(v123 + 1168));
    v117 = v2;

    v118 = v117;
    v119 = 0;
  }
  else
  {
    v118 = 0.0;
    v119 = 1;
  }
  if ((v119 & 1) != 0)
  {
    v85 = *(id *)(v123 + 1104);

LABEL_17:
    v43 = *(void (**)(uint64_t, uint64_t, uint64_t))(v123 + 1048);
    v10 = *(_QWORD *)(v123 + 976);
    v42 = *(_QWORD *)(v123 + 936);
    v41 = Logger.wellnessIntents.unsafeMutableAddressor();
    swift_beginAccess();
    v43(v10, v41, v42);
    swift_endAccess();
    log = Logger.logObject.getter();
    v45 = static os_log_type_t.error.getter();
    *(_QWORD *)(v123 + 488) = 2;
    UnsignedInteger<>.init<A>(_:)();
    v44 = *(_DWORD *)(v123 + 1332);
    v47 = _allocateUninitializedArray<A>(_:)();
    if (os_log_type_enabled(log, v45))
    {
      v11 = *(_QWORD *)(v123 + 1280);
      v37 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      v38 = createStorage<A>(capacity:type:)(0);
      v39 = createStorage<A>(capacity:type:)(0);
      *(_QWORD *)(v123 + 496) = v37;
      *(_QWORD *)(v123 + 504) = v38;
      *(_QWORD *)(v123 + 512) = v39;
      serialize(_:at:)(0, (_BYTE **)(v123 + 496));
      serialize(_:at:)(0, (_BYTE **)(v123 + 496));
      *(_QWORD *)(v123 + 520) = v47;
      v40 = (_QWORD *)swift_task_alloc();
      v40[2] = v123 + 496;
      v40[3] = v123 + 504;
      v40[4] = v123 + 512;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
      lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
      result = Sequence.forEach(_:)();
      if (v11)
        return result;
      swift_task_dealloc();
      _os_log_impl(&dword_24749F000, log, v45, "Couldn't find the total statistics returning .dataUnavailable", v37, v44);
      destroyStorage<A>(_:count:)(v38, 0, v36);
      destroyStorage<A>(_:count:)(v39, 0, MEMORY[0x24BEE4AD8] + 8);
      MEMORY[0x24957D398](v37, MEMORY[0x24BEE4260]);
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    v33 = *(id *)(v123 + 1168);
    v27 = *(void (**)(uint64_t, uint64_t))(v123 + 1088);
    v25 = *(_QWORD *)(v123 + 976);
    v26 = *(_QWORD *)(v123 + 936);
    v30 = *(_QWORD *)(v123 + 880);
    v29 = *(_QWORD *)(v123 + 872);
    v28 = *(_QWORD *)(v123 + 856);
    v31 = *(_QWORD *)(v123 + 848);

    v27(v25, v26);
    v34 = GetHealthQuantityIntentResponse.__allocating_init(code:userActivity:)(102, 0);
    v32 = *(void (**)(uint64_t, uint64_t))(v28 + 8);
    v32(v29, v31);
    v32(v30, v31);

    v35 = v34;
LABEL_27:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(char *))(*(_QWORD *)(v123 + 336) + 8))(v35);
  }
  v93 = *(_DWORD *)(v123 + 1360);
  v92 = *(void (**)(uint64_t, uint64_t, uint64_t))(v123 + 1256);
  v96 = *(void (**)(unint64_t, uint64_t, uint64_t))(v123 + 1224);
  v88 = *(void (**)(uint64_t, uint64_t, uint64_t))(v123 + 1048);
  v3 = *(_QWORD *)(v123 + 984);
  v87 = *(_QWORD *)(v123 + 936);
  v94 = *(_QWORD *)(v123 + 888);
  v89 = *(_QWORD *)(v123 + 880);
  v91 = *(_QWORD *)(v123 + 872);
  v95 = *(_QWORD *)(v123 + 848);
  *(double *)(v123 + 536) = v118;
  v86 = Logger.wellnessIntents.unsafeMutableAddressor();
  swift_beginAccess();
  v88(v3, v86, v87);
  swift_endAccess();
  v92(v94, v89, v95);
  v90 = swift_allocObject();
  v96(v90 + ((v93 + 16) & ~(unint64_t)v93), v94, v95);
  swift_retain();
  v99 = swift_allocObject();
  *(_QWORD *)(v99 + 16) = partial apply for implicit closure #10 in LogQuantityIntentHandler.handle(intent:);
  *(_QWORD *)(v99 + 24) = v90;
  swift_release();
  v92(v94, v91, v95);
  v97 = swift_allocObject();
  v96(v97 + ((v93 + 16) & ~(unint64_t)v93), v94, v95);
  swift_retain();
  v101 = swift_allocObject();
  *(_QWORD *)(v101 + 16) = partial apply for implicit closure #10 in LogQuantityIntentHandler.handle(intent:);
  *(_QWORD *)(v101 + 24) = v97;
  swift_release();
  v103 = swift_allocObject();
  *(double *)(v103 + 16) = v118;
  oslog = Logger.logObject.getter();
  v116 = static os_log_type_t.debug.getter();
  *(_QWORD *)(v123 + 544) = 32;
  UnsignedInteger<>.init<A>(_:)();
  size = *(_DWORD *)(v123 + 1336);
  v105 = swift_allocObject();
  *(_BYTE *)(v105 + 16) = 32;
  v106 = swift_allocObject();
  *(_BYTE *)(v106 + 16) = 8;
  v100 = swift_allocObject();
  *(_QWORD *)(v100 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation<A>(_:align:privacy:);
  *(_QWORD *)(v100 + 24) = v99;
  v107 = swift_allocObject();
  *(_QWORD *)(v107 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:);
  *(_QWORD *)(v107 + 24) = v100;
  v108 = swift_allocObject();
  *(_BYTE *)(v108 + 16) = 32;
  v109 = swift_allocObject();
  *(_BYTE *)(v109 + 16) = 8;
  v102 = swift_allocObject();
  *(_QWORD *)(v102 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation<A>(_:align:privacy:);
  *(_QWORD *)(v102 + 24) = v101;
  v110 = swift_allocObject();
  *(_QWORD *)(v110 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:);
  *(_QWORD *)(v110 + 24) = v102;
  v111 = swift_allocObject();
  *(_BYTE *)(v111 + 16) = 0;
  v112 = swift_allocObject();
  *(_BYTE *)(v112 + 16) = 8;
  v104 = swift_allocObject();
  *(_QWORD *)(v104 + 16) = partial apply for implicit closure #11 in HealthKitFetcher.query(start:end:);
  *(_QWORD *)(v104 + 24) = v103;
  v113 = swift_allocObject();
  *(_QWORD *)(v113 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:);
  *(_QWORD *)(v113 + 24) = v104;
  _allocateUninitializedArray<A>(_:)();
  v114 = v4;
  swift_retain();
  *v114 = partial apply for closure #1 in OSLogArguments.append(_:);
  v114[1] = v105;
  swift_retain();
  v114[2] = partial apply for closure #1 in OSLogArguments.append(_:);
  v114[3] = v106;
  swift_retain();
  v114[4] = partial apply for closure #1 in OSLogArguments.append(_:);
  v114[5] = v107;
  swift_retain();
  v114[6] = partial apply for closure #1 in OSLogArguments.append(_:);
  v114[7] = v108;
  swift_retain();
  v114[8] = partial apply for closure #1 in OSLogArguments.append(_:);
  v114[9] = v109;
  swift_retain();
  v114[10] = partial apply for closure #1 in OSLogArguments.append(_:);
  v114[11] = v110;
  swift_retain();
  v114[12] = partial apply for closure #1 in OSLogArguments.append(_:);
  v114[13] = v111;
  swift_retain();
  v114[14] = partial apply for closure #1 in OSLogArguments.append(_:);
  v114[15] = v112;
  swift_retain();
  v114[16] = partial apply for closure #1 in OSLogArguments.append(_:);
  v114[17] = v113;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(oslog, v116))
  {
    v5 = *(_QWORD *)(v123 + 1280);
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    v81 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    v83 = createStorage<A>(capacity:type:)(0);
    v84 = createStorage<A>(capacity:type:)(2);
    v129 = buf;
    v130 = v83;
    v131 = v84;
    serialize(_:at:)(2, &v129);
    serialize(_:at:)(3, &v129);
    v132 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v133 = v105;
    result = closure #1 in osLogInternal(_:log:type:)(&v132, (uint64_t)&v129, (uint64_t)&v130, (uint64_t)&v131);
    if (v5)
      return result;
    v132 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v133 = v106;
    closure #1 in osLogInternal(_:log:type:)(&v132, (uint64_t)&v129, (uint64_t)&v130, (uint64_t)&v131);
    v132 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v133 = v107;
    closure #1 in osLogInternal(_:log:type:)(&v132, (uint64_t)&v129, (uint64_t)&v130, (uint64_t)&v131);
    v132 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v133 = v108;
    closure #1 in osLogInternal(_:log:type:)(&v132, (uint64_t)&v129, (uint64_t)&v130, (uint64_t)&v131);
    v132 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v133 = v109;
    closure #1 in osLogInternal(_:log:type:)(&v132, (uint64_t)&v129, (uint64_t)&v130, (uint64_t)&v131);
    v132 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v133 = v110;
    closure #1 in osLogInternal(_:log:type:)(&v132, (uint64_t)&v129, (uint64_t)&v130, (uint64_t)&v131);
    v132 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v133 = v111;
    closure #1 in osLogInternal(_:log:type:)(&v132, (uint64_t)&v129, (uint64_t)&v130, (uint64_t)&v131);
    v132 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v133 = v112;
    closure #1 in osLogInternal(_:log:type:)(&v132, (uint64_t)&v129, (uint64_t)&v130, (uint64_t)&v131);
    v132 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v133 = v113;
    closure #1 in osLogInternal(_:log:type:)(&v132, (uint64_t)&v129, (uint64_t)&v130, (uint64_t)&v131);
    _os_log_impl(&dword_24749F000, oslog, v116, "Got total value in %s - %s: %f", buf, size);
    destroyStorage<A>(_:count:)(v83, 0, v81);
    destroyStorage<A>(_:count:)(v84, 2, MEMORY[0x24BEE4AD8] + 8);
    MEMORY[0x24957D398](buf, MEMORY[0x24BEE4260]);
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    v80 = 0;
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    v80 = *(_QWORD *)(v123 + 1280);
  }
  v75 = *(id *)(v123 + 1104);
  v74 = *(void (**)(uint64_t, uint64_t))(v123 + 1088);
  v72 = *(_QWORD *)(v123 + 984);
  v73 = *(_QWORD *)(v123 + 936);
  v78 = *(_QWORD *)(v123 + 840);
  v76 = *(_QWORD *)(v123 + 832);
  v77 = *(_QWORD *)(v123 + 824);

  v74(v72, v73);
  objc_msgSend(v75, sel_setTotal_, v118);

  static Calendar.current.getter();
  v79 = Calendar.numberOfDaysBetween(_:and:)();
  (*(void (**)(uint64_t, uint64_t))(v76 + 8))(v78, v77);
  *(double *)(v123 + 552) = (double)v79;
  if ((double)v79 > 1.0)
  {
    v71 = *(_QWORD *)(v123 + 1168);
    v7 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v123 + 1288) = v7;
    *v7 = *(_QWORD *)(v123 + 336);
    v7[1] = HealthKitFetcher.query(start:end:);
    return HealthKitFetcher.getCumulativeAverage(startDate:endDate:unit:)(*(_QWORD *)(v123 + 880), *(_QWORD *)(v123 + 872), v71, *(_QWORD *)(v123 + 792), *(_QWORD *)(v123 + 800), *(_QWORD *)(v123 + 808), *(_QWORD *)(v123 + 816));
  }

  v56 = *(id *)(v123 + 1104);
  v53 = *(_QWORD *)(v123 + 888);
  v48 = *(_QWORD *)(v123 + 856);
  v51 = *(_QWORD *)(v123 + 848);
  v57 = *(id *)(v123 + 1272);
  v49 = objc_msgSend(v57, sel_startDate);
  static Date._unconditionallyBridgeFromObjectiveC(_:)();
  isa = Date._bridgeToObjectiveC()().super.isa;
  v52 = *(void (**)(uint64_t, uint64_t))(v48 + 8);
  v52(v53, v51);

  objc_msgSend(v56, sel_setSampleStartDate_, isa);
  v54 = objc_msgSend(v57, sel_endDate);
  static Date._unconditionallyBridgeFromObjectiveC(_:)();
  v55 = Date._bridgeToObjectiveC()().super.isa;
  v52(v53, v51);

  objc_msgSend(v56, sel_setSampleEndDate_, v55);
  v61 = *(_QWORD *)(v123 + 1104);
  v60 = *(void (**)(uint64_t, uint64_t, uint64_t))(v123 + 1048);
  v8 = *(_QWORD *)(v123 + 968);
  v59 = *(_QWORD *)(v123 + 936);
  v58 = Logger.wellnessIntents.unsafeMutableAddressor();
  swift_beginAccess();
  v60(v8, v58, v59);
  swift_endAccess();
  v63 = swift_allocObject();
  *(_QWORD *)(v63 + 16) = v61;
  v69 = (os_log_t)Logger.logObject.getter();
  v70 = static os_log_type_t.debug.getter();
  *(_QWORD *)(v123 + 560) = 12;
  UnsignedInteger<>.init<A>(_:)();
  v62 = *(_DWORD *)(v123 + 1340);
  v65 = swift_allocObject();
  *(_BYTE *)(v65 + 16) = 32;
  v66 = swift_allocObject();
  *(_BYTE *)(v66 + 16) = 8;
  v64 = swift_allocObject();
  *(_QWORD *)(v64 + 16) = partial apply for specialized implicit closure #12 in HealthKitFetcher.query(start:end:);
  *(_QWORD *)(v64 + 24) = v63;
  v67 = swift_allocObject();
  *(_QWORD *)(v67 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:);
  *(_QWORD *)(v67 + 24) = v64;
  _allocateUninitializedArray<A>(_:)();
  v68 = v9;
  swift_retain();
  *v68 = partial apply for closure #1 in OSLogArguments.append(_:);
  v68[1] = v65;
  swift_retain();
  v68[2] = partial apply for closure #1 in OSLogArguments.append(_:);
  v68[3] = v66;
  swift_retain();
  v68[4] = partial apply for closure #1 in OSLogArguments.append(_:);
  v68[5] = v67;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (!os_log_type_enabled(v69, v70))
  {
    swift_release();
    swift_release();
    swift_release();
LABEL_26:
    v20 = *(id *)(v123 + 1168);
    v14 = *(void (**)(uint64_t, uint64_t))(v123 + 1088);
    v12 = *(_QWORD *)(v123 + 968);
    v13 = *(_QWORD *)(v123 + 936);
    v17 = *(_QWORD *)(v123 + 880);
    v16 = *(_QWORD *)(v123 + 872);
    v15 = *(_QWORD *)(v123 + 856);
    v18 = *(_QWORD *)(v123 + 848);

    v14(v12, v13);
    v19 = *(void (**)(uint64_t, uint64_t))(v15 + 8);
    v19(v16, v18);
    v19(v17, v18);

    v35 = *(char **)(v123 + 1104);
    goto LABEL_27;
  }
  v22 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
  v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
  v23 = createStorage<A>(capacity:type:)(0);
  v24 = createStorage<A>(capacity:type:)(1);
  v124 = v22;
  v125 = v23;
  v126 = v24;
  serialize(_:at:)(2, &v124);
  serialize(_:at:)(1, &v124);
  v127 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  v128 = v65;
  result = closure #1 in osLogInternal(_:log:type:)(&v127, (uint64_t)&v124, (uint64_t)&v125, (uint64_t)&v126);
  if (!v80)
  {
    v127 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v128 = v66;
    closure #1 in osLogInternal(_:log:type:)(&v127, (uint64_t)&v124, (uint64_t)&v125, (uint64_t)&v126);
    v127 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v128 = v67;
    closure #1 in osLogInternal(_:log:type:)(&v127, (uint64_t)&v124, (uint64_t)&v125, (uint64_t)&v126);
    _os_log_impl(&dword_24749F000, v69, v70, "Returning response: %s", v22, v62);
    destroyStorage<A>(_:count:)(v23, 0, v21);
    destroyStorage<A>(_:count:)(v24, 1, MEMORY[0x24BEE4AD8] + 8);
    MEMORY[0x24957D398](v22, MEMORY[0x24BEE4260]);
    swift_release();
    swift_release();
    swift_release();
    goto LABEL_26;
  }
  return result;
}

{
  uint64_t v0;
  double v1;
  void *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t);
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint8_t *buf;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  Class isa;
  uint64_t v26;
  void (*v27)(uint64_t, uint64_t);
  uint64_t v28;
  id v29;
  Class v30;
  id v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(uint64_t, uint64_t, uint64_t);
  uint64_t v36;
  uint32_t size;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  NSObject *oslog;
  os_log_type_t v45;
  uint8_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t (*v49)(uint64_t, uint64_t, uint64_t);
  uint64_t v50;

  v1 = *(double *)(v0 + 1296);
  v2 = *(void **)(v0 + 1104);
  v21 = v2;
  *(_QWORD *)(v0 + 336) = v0;
  objc_msgSend(v2, sel_setAverage_, v1);

  v22 = *(_QWORD *)(v0 + 1304);
  v32 = *(id *)(v0 + 1272);
  v31 = *(id *)(v0 + 1104);
  v28 = *(_QWORD *)(v0 + 888);
  v23 = *(_QWORD *)(v0 + 856);
  v26 = *(_QWORD *)(v0 + 848);
  v24 = objc_msgSend(v32, sel_startDate);
  static Date._unconditionallyBridgeFromObjectiveC(_:)();
  isa = Date._bridgeToObjectiveC()().super.isa;
  v27 = *(void (**)(uint64_t, uint64_t))(v23 + 8);
  v27(v28, v26);

  objc_msgSend(v31, sel_setSampleStartDate_, isa);
  v29 = objc_msgSend(v32, sel_endDate);
  static Date._unconditionallyBridgeFromObjectiveC(_:)();
  v30 = Date._bridgeToObjectiveC()().super.isa;
  v27(v28, v26);

  objc_msgSend(v31, sel_setSampleEndDate_, v30);
  v36 = *(_QWORD *)(v0 + 1104);
  v35 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1048);
  v3 = *(_QWORD *)(v0 + 968);
  v34 = *(_QWORD *)(v0 + 936);
  v33 = Logger.wellnessIntents.unsafeMutableAddressor();
  swift_beginAccess();
  v35(v3, v33, v34);
  swift_endAccess();
  v38 = swift_allocObject();
  *(_QWORD *)(v38 + 16) = v36;
  oslog = Logger.logObject.getter();
  v45 = static os_log_type_t.debug.getter();
  *(_QWORD *)(v0 + 560) = 12;
  UnsignedInteger<>.init<A>(_:)();
  size = *(_DWORD *)(v0 + 1340);
  v40 = swift_allocObject();
  *(_BYTE *)(v40 + 16) = 32;
  v41 = swift_allocObject();
  *(_BYTE *)(v41 + 16) = 8;
  v39 = swift_allocObject();
  *(_QWORD *)(v39 + 16) = partial apply for specialized implicit closure #12 in HealthKitFetcher.query(start:end:);
  *(_QWORD *)(v39 + 24) = v38;
  v42 = swift_allocObject();
  *(_QWORD *)(v42 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:);
  *(_QWORD *)(v42 + 24) = v39;
  _allocateUninitializedArray<A>(_:)();
  v43 = v4;
  swift_retain();
  *v43 = partial apply for closure #1 in OSLogArguments.append(_:);
  v43[1] = v40;
  swift_retain();
  v43[2] = partial apply for closure #1 in OSLogArguments.append(_:);
  v43[3] = v41;
  swift_retain();
  v43[4] = partial apply for closure #1 in OSLogArguments.append(_:);
  v43[5] = v42;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (!os_log_type_enabled(oslog, v45))
  {
    swift_release();
    swift_release();
    swift_release();
    goto LABEL_6;
  }
  buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
  v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
  v18 = createStorage<A>(capacity:type:)(0);
  v19 = createStorage<A>(capacity:type:)(1);
  v46 = buf;
  v47 = v18;
  v48 = v19;
  serialize(_:at:)(2, &v46);
  serialize(_:at:)(1, &v46);
  v49 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  v50 = v40;
  result = closure #1 in osLogInternal(_:log:type:)(&v49, (uint64_t)&v46, (uint64_t)&v47, (uint64_t)&v48);
  if (!v22)
  {
    v49 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v50 = v41;
    closure #1 in osLogInternal(_:log:type:)(&v49, (uint64_t)&v46, (uint64_t)&v47, (uint64_t)&v48);
    v49 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v50 = v42;
    closure #1 in osLogInternal(_:log:type:)(&v49, (uint64_t)&v46, (uint64_t)&v47, (uint64_t)&v48);
    _os_log_impl(&dword_24749F000, oslog, v45, "Returning response: %s", buf, size);
    destroyStorage<A>(_:count:)(v18, 0, v16);
    destroyStorage<A>(_:count:)(v19, 1, MEMORY[0x24BEE4AD8] + 8);
    MEMORY[0x24957D398](buf, MEMORY[0x24BEE4260]);
    swift_release();
    swift_release();
    swift_release();
LABEL_6:
    v14 = *(id *)(v20 + 1168);
    v8 = *(void (**)(uint64_t, uint64_t))(v20 + 1088);
    v6 = *(_QWORD *)(v20 + 968);
    v7 = *(_QWORD *)(v20 + 936);
    v11 = *(_QWORD *)(v20 + 880);
    v10 = *(_QWORD *)(v20 + 872);
    v9 = *(_QWORD *)(v20 + 856);
    v12 = *(_QWORD *)(v20 + 848);

    v8(v6, v7);
    v13 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
    v13(v10, v12);
    v13(v11, v12);

    v15 = *(_QWORD *)(v20 + 1104);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v20 + 336) + 8))(v15);
  }
  return result;
}

{
  uint64_t v0;
  void *v1;
  id v3;

  v3 = *(id *)(v0 + 1104);
  v1 = *(void **)(v0 + 800);
  *(_QWORD *)(v0 + 336) = v0;

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)())(*(_QWORD *)(v0 + 336) + 8))();
}

{
  _QWORD *v0;
  void *v1;
  id v2;
  uint64_t v3;
  id v4;
  id v5;
  _QWORD *v6;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);
  char *v11;
  uint64_t v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t, uint64_t);
  id v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint32_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  NSObject *v31;
  os_log_type_t v32;
  uint64_t v33;
  id v34;
  id v35;
  uint8_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t (*v39)(uint64_t, uint64_t, uint64_t);
  uint64_t v40;

  v35 = (id)v0[145];
  v34 = (id)v0[100];
  v1 = (void *)v0[99];
  v0[42] = v0;

  v0[146] = 0;
  v0[47] = 0;
  v2 = 0;
  v16 = *(id *)(v33 + 1104);
  v19 = *(void (**)(uint64_t, uint64_t, uint64_t))(v33 + 1048);
  v3 = *(_QWORD *)(v33 + 952);
  v18 = *(_QWORD *)(v33 + 936);
  v23 = *(_QWORD *)(v33 + 816);
  v22 = *(_QWORD *)(v33 + 808);
  v21 = *(id *)(v33 + 800);
  v20 = *(id *)(v33 + 792);

  v17 = Logger.wellnessIntents.unsafeMutableAddressor();
  swift_beginAccess();
  v19(v3, v17, v18);
  swift_endAccess();
  v4 = v20;
  v5 = v21;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v25 = (_QWORD *)swift_allocObject();
  v25[2] = v20;
  v25[3] = v21;
  v25[4] = v22;
  v25[5] = v23;
  v31 = Logger.logObject.getter();
  v32 = static os_log_type_t.error.getter();
  *(_QWORD *)(v33 + 384) = 12;
  UnsignedInteger<>.init<A>(_:)();
  v24 = *(_DWORD *)(v33 + 1316);
  v27 = swift_allocObject();
  *(_BYTE *)(v27 + 16) = 64;
  v28 = swift_allocObject();
  *(_BYTE *)(v28 + 16) = 8;
  v26 = swift_allocObject();
  *(_QWORD *)(v26 + 16) = partial apply for implicit closure #1 in HealthKitFetcher.query(start:end:);
  *(_QWORD *)(v26 + 24) = v25;
  v29 = swift_allocObject();
  *(_QWORD *)(v29 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:);
  *(_QWORD *)(v29 + 24) = v26;
  _allocateUninitializedArray<A>(_:)();
  v30 = v6;
  swift_retain();
  *v30 = partial apply for closure #1 in OSLogArguments.append(_:);
  v30[1] = v27;
  swift_retain();
  v30[2] = partial apply for closure #1 in OSLogArguments.append(_:);
  v30[3] = v28;
  swift_retain();
  v30[4] = partial apply for closure #1 in OSLogArguments.append(_:);
  v30[5] = v29;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(v31, v32))
  {
    v13 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    v14 = createStorage<A>(capacity:type:)(1);
    v15 = createStorage<A>(capacity:type:)(0);
    v36 = v13;
    v37 = v14;
    v38 = v15;
    serialize(_:at:)(2, &v36);
    serialize(_:at:)(1, &v36);
    v39 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v40 = v27;
    closure #1 in osLogInternal(_:log:type:)(&v39, (uint64_t)&v36, (uint64_t)&v37, (uint64_t)&v38);
    v39 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v40 = v28;
    closure #1 in osLogInternal(_:log:type:)(&v39, (uint64_t)&v36, (uint64_t)&v37, (uint64_t)&v38);
    v39 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v40 = v29;
    closure #1 in osLogInternal(_:log:type:)(&v39, (uint64_t)&v36, (uint64_t)&v37, (uint64_t)&v38);
    _os_log_impl(&dword_24749F000, v31, v32, "Failed to get units for %@", v13, v24);
    destroyStorage<A>(_:count:)(v14, 1, v12);
    destroyStorage<A>(_:count:)(v15, 0, MEMORY[0x24BEE4AD8] + 8);
    MEMORY[0x24957D398](v13, MEMORY[0x24BEE4260]);
    swift_release();
    swift_release();
    swift_release();
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
  }
  v10 = *(void (**)(uint64_t, uint64_t))(v33 + 1088);
  v8 = *(_QWORD *)(v33 + 952);
  v9 = *(_QWORD *)(v33 + 936);

  v10(v8, v9);
  v11 = GetHealthQuantityIntentResponse.__allocating_init(code:userActivity:)(5, 0);

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(char *))(*(_QWORD *)(v33 + 336) + 8))(v11);
}

{
  uint64_t v0;
  id v2;

  v2 = *(id *)(v0 + 1168);
  *(_QWORD *)(v0 + 336) = v0;

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)())(*(_QWORD *)(v0 + 336) + 8))();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t);
  id v7;

  v7 = *(id *)(v0 + 1168);
  v4 = *(_QWORD *)(v0 + 880);
  v1 = *(_QWORD *)(v0 + 872);
  v2 = *(_QWORD *)(v0 + 856);
  v5 = *(_QWORD *)(v0 + 848);
  *(_QWORD *)(v0 + 336) = v0;
  v6 = *(void (**)(uint64_t))(v2 + 8);
  v6(v1);
  ((void (*)(uint64_t, uint64_t))v6)(v4, v5);

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)())(*(_QWORD *)(v0 + 336) + 8))();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t);
  id v7;

  v7 = *(id *)(v0 + 1168);
  v4 = *(_QWORD *)(v0 + 880);
  v1 = *(_QWORD *)(v0 + 872);
  v2 = *(_QWORD *)(v0 + 856);
  v5 = *(_QWORD *)(v0 + 848);
  *(_QWORD *)(v0 + 336) = v0;
  v6 = *(void (**)(uint64_t))(v2 + 8);
  v6(v1);
  ((void (*)(uint64_t, uint64_t))v6)(v4, v5);

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)())(*(_QWORD *)(v0 + 336) + 8))();
}

{
  uint64_t v0;
  void *v1;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t);
  id v9;

  v3 = *(id *)(v0 + 1272);
  v9 = *(id *)(v0 + 1168);
  v1 = *(void **)(v0 + 1104);
  v6 = *(_QWORD *)(v0 + 880);
  v5 = *(_QWORD *)(v0 + 872);
  v4 = *(_QWORD *)(v0 + 856);
  v7 = *(_QWORD *)(v0 + 848);
  *(_QWORD *)(v0 + 336) = v0;

  v8 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
  v8(v5, v7);
  v8(v6, v7);

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)())(*(_QWORD *)(v0 + 336) + 8))();
}

uint64_t HealthKitFetcher.query(start:end:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  void *v5;
  uint64_t v6;
  _QWORD *v7;

  v7 = (_QWORD *)*v3;
  v6 = *v3 + 16;
  v7[42] = *v3;
  v7[140] = v2;
  v7[141] = a1;
  v7[142] = a2;
  swift_task_dealloc();
  if (v2)
  {
    v5 = *(void **)(v6 + 1088);

  }
  else
  {

  }
  return swift_task_switch();
}

uint64_t HealthKitFetcher.query(start:end:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  void *v5;
  uint64_t v6;

  v3 = (_QWORD *)*v2;
  v6 = *v2 + 16;
  v3[42] = *v2;
  v3[144] = a1;
  v3[145] = v1;
  swift_task_dealloc();
  if (!v1)
  {
    v5 = *(void **)(v6 + 784);

  }
  return swift_task_switch();
}

{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  void *v5;
  uint64_t v6;

  v3 = (_QWORD *)*v2;
  v6 = *v2 + 16;
  v3[42] = *v2;
  v3[151] = a1;
  v3[152] = v1;
  swift_task_dealloc();
  if (v1)
  {
    v5 = *(void **)(v6 + 1088);

  }
  return swift_task_switch();
}

{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  void *v5;
  uint64_t v6;

  v3 = (_QWORD *)*v2;
  v6 = *v2 + 16;
  v3[42] = *v2;
  v3[155] = a1;
  v3[156] = v1;
  swift_task_dealloc();
  if (v1)
  {
    v5 = *(void **)(v6 + 1088);

  }
  return swift_task_switch();
}

{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  void *v5;
  uint64_t v6;

  v3 = (_QWORD *)*v2;
  v6 = *v2 + 16;
  v3[42] = *v2;
  v3[159] = a1;
  v3[160] = v1;
  swift_task_dealloc();
  if (v1)
  {
    v5 = *(void **)(v6 + 1088);

  }
  return swift_task_switch();
}

uint64_t HealthKitFetcher.query(start:end:)(double a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  void *v5;
  uint64_t v6;

  v3 = *v2;
  v6 = *v2 + 16;
  *(_QWORD *)(v3 + 336) = *v2;
  *(double *)(v3 + 1296) = a1;
  *(_QWORD *)(v3 + 1304) = v1;
  swift_task_dealloc();
  if (v1)
  {
    v5 = *(void **)(v6 + 1088);

  }
  return swift_task_switch();
}

id implicit closure #1 in HealthKitFetcher.query(start:end:)(int a1, id a2)
{
  id v2;

  v2 = a2;
  return a2;
}

uint64_t implicit closure #2 in HealthKitFetcher.query(start:end:)(uint64_t a1)
{
  const void *v1;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;

  v3 = a1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  v4 = (*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1 = (const void *)MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v3 - v4;
  outlined init with copy of Date?(v1, (char *)&v3 - v4);
  lazy protocol witness table accessor for type Date? and conformance A?();
  return String.init<A>(describing:)();
}

uint64_t specialized implicit closure #5 in HealthKitFetcher.query(start:end:)(void *a1)
{
  id v1;
  id v4;

  v1 = a1;
  v4 = objc_msgSend(a1, sel_unit);
  if (v4)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();

  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
  lazy protocol witness table accessor for type String? and conformance A?();
  return String.init<A>(describing:)();
}

uint64_t HealthKitFetcher.getMostRecent(startDate:endDate:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t Descriptor;

  *(_QWORD *)(v6 + 112) = a6;
  *(_QWORD *)(v6 + 104) = a5;
  *(_QWORD *)(v6 + 96) = a4;
  *(_QWORD *)(v6 + 88) = a3;
  *(_QWORD *)(v6 + 80) = a2;
  *(_QWORD *)(v6 + 72) = a1;
  *(_QWORD *)(v6 + 48) = v6;
  *(_QWORD *)(v6 + 56) = 0;
  *(_QWORD *)(v6 + 64) = 0;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_OWORD *)(v6 + 32) = 0u;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HKSamplePredicate<HKQuantitySample>);
  *(_QWORD *)(v6 + 120) = swift_task_alloc();
  Descriptor = type metadata accessor for HKStatisticsQueryDescriptor();
  *(_QWORD *)(v6 + 128) = Descriptor;
  *(_QWORD *)(v6 + 136) = *(_QWORD *)(Descriptor - 8);
  *(_QWORD *)(v6 + 144) = swift_task_alloc();
  *(_QWORD *)(v6 + 56) = a1;
  *(_QWORD *)(v6 + 64) = a2;
  *(_QWORD *)(v6 + 16) = a3;
  *(_QWORD *)(v6 + 24) = a4;
  *(_QWORD *)(v6 + 32) = a5;
  *(_QWORD *)(v6 + 40) = a6;
  return swift_task_switch();
}

uint64_t HealthKitFetcher.getMostRecent(startDate:endDate:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  const void *v6;
  const void *v7;
  id v8;
  _QWORD *v9;
  id v11;
  uint64_t v12;

  v1 = v0[15];
  v2 = v0[14];
  v3 = v0[13];
  v4 = (void *)v0[12];
  v5 = v0[11];
  v11 = (id)v5;
  v6 = (const void *)v0[10];
  v7 = (const void *)v0[9];
  v0[6] = v0;
  HealthKitFetcher.predicate(start:end:)(v7, v6, v5, v4, v3, v2, v1);
  HKStatisticsQueryDescriptor.init(predicate:options:)();
  v8 = v11;
  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v12 + 152) = v9;
  *v9 = *(_QWORD *)(v12 + 48);
  v9[1] = HealthKitFetcher.getMostRecent(startDate:endDate:);
  return HKStatisticsQueryDescriptor.result(for:)();
}

{
  _QWORD *v0;
  uint64_t v1;

  v1 = v0[17];
  v0[6] = v0;
  (*(void (**)(void))(v1 + 8))();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(_QWORD))(v0[6] + 8))(v0[20]);
}

{
  _QWORD *v0;
  void *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v5 = v0[18];
  v3 = v0[17];
  v4 = v0[16];
  v1 = (void *)v0[11];
  v0[6] = v0;

  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v5, v4);
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)())(v0[6] + 8))();
}

uint64_t HealthKitFetcher.getMostRecent(startDate:endDate:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v5;

  v3 = (_QWORD *)*v2;
  v3[6] = *v2;
  v3 += 6;
  v5 = v3 - 4;
  v3[14] = a1;
  v3[15] = v1;
  swift_task_dealloc();
  if (!v1)

  return swift_task_switch();
}

uint64_t HealthKitFetcher.getDiscreteStats(startDate:endDate:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t Descriptor;

  *(_QWORD *)(v6 + 120) = a6;
  *(_QWORD *)(v6 + 112) = a5;
  *(_QWORD *)(v6 + 104) = a4;
  *(_QWORD *)(v6 + 96) = a3;
  *(_QWORD *)(v6 + 88) = a2;
  *(_QWORD *)(v6 + 80) = a1;
  *(_QWORD *)(v6 + 48) = v6;
  *(_QWORD *)(v6 + 56) = 0;
  *(_QWORD *)(v6 + 64) = 0;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_OWORD *)(v6 + 32) = 0u;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  *(_QWORD *)(v6 + 128) = swift_task_alloc();
  *(_QWORD *)(v6 + 136) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HKSamplePredicate<HKQuantitySample>);
  *(_QWORD *)(v6 + 144) = swift_task_alloc();
  Descriptor = type metadata accessor for HKStatisticsQueryDescriptor();
  *(_QWORD *)(v6 + 152) = Descriptor;
  *(_QWORD *)(v6 + 160) = *(_QWORD *)(Descriptor - 8);
  *(_QWORD *)(v6 + 168) = swift_task_alloc();
  *(_QWORD *)(v6 + 56) = a1;
  *(_QWORD *)(v6 + 64) = a2;
  *(_QWORD *)(v6 + 16) = a3;
  *(_QWORD *)(v6 + 24) = a4;
  *(_QWORD *)(v6 + 32) = a5;
  *(_QWORD *)(v6 + 40) = a6;
  return swift_task_switch();
}

uint64_t HealthKitFetcher.getDiscreteStats(startDate:endDate:)()
{
  _QWORD *v0;
  _QWORD *v1;
  id v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(const void *, uint64_t);
  uint64_t v9;
  void (*v10)(const void *);
  void *v11;
  uint64_t v12;
  uint64_t v13;
  const void *v14;
  const void *v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;

  v16 = v0[18];
  v15 = (const void *)v0[17];
  v14 = (const void *)v0[16];
  v13 = v0[15];
  v12 = v0[14];
  v11 = (void *)v0[13];
  v17 = (void *)v0[12];
  v7 = v0[11];
  v5 = v0[10];
  v0[6] = v0;
  v9 = type metadata accessor for Date();
  v6 = *(_QWORD *)(v9 - 8);
  v8 = *(void (**)(const void *, uint64_t))(v6 + 16);
  v8(v15, v5);
  v10 = *(void (**)(const void *))(v6 + 56);
  v10(v15);
  ((void (*)(const void *, uint64_t, uint64_t))v8)(v14, v7, v9);
  ((void (*)(const void *, _QWORD, uint64_t, uint64_t))v10)(v14, 0, 1, v9);
  HealthKitFetcher.predicate(start:end:)(v15, v14, (uint64_t)v17, v11, v12, v13, v16);
  outlined destroy of Date?((uint64_t)v14);
  outlined destroy of Date?((uint64_t)v15);
  type metadata accessor for HKStatisticsOptions();
  _allocateUninitializedArray<A>(_:)();
  *v1 = 4;
  v1[1] = 8;
  v1[2] = 2;
  _finalizeUninitializedArray<A>(_:)();
  lazy protocol witness table accessor for type HKStatisticsOptions and conformance HKStatisticsOptions();
  SetAlgebra<>.init(arrayLiteral:)();
  HKStatisticsQueryDescriptor.init(predicate:options:)();
  v2 = v17;
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v18 + 176) = v3;
  *v3 = *(_QWORD *)(v18 + 48);
  v3[1] = HealthKitFetcher.getDiscreteStats(startDate:endDate:);
  return HKStatisticsQueryDescriptor.result(for:)();
}

{
  _QWORD *v0;
  uint64_t v1;

  v1 = v0[20];
  v0[6] = v0;
  (*(void (**)(void))(v1 + 8))();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(_QWORD))(v0[6] + 8))(v0[23]);
}

{
  _QWORD *v0;
  void *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v5 = v0[21];
  v3 = v0[20];
  v4 = v0[19];
  v1 = (void *)v0[12];
  v0[6] = v0;

  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v5, v4);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)())(v0[6] + 8))();
}

uint64_t HealthKitFetcher.getDiscreteStats(startDate:endDate:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v5;

  v3 = (_QWORD *)*v2;
  v3[6] = *v2;
  v3 += 6;
  v5 = v3 - 4;
  v3[17] = a1;
  v3[18] = v1;
  swift_task_dealloc();
  if (!v1)

  return swift_task_switch();
}

uint64_t HealthKitFetcher.getCumulativeTotal(startDate:endDate:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t Descriptor;

  *(_QWORD *)(v6 + 112) = a6;
  *(_QWORD *)(v6 + 104) = a5;
  *(_QWORD *)(v6 + 96) = a4;
  *(_QWORD *)(v6 + 88) = a3;
  *(_QWORD *)(v6 + 80) = a2;
  *(_QWORD *)(v6 + 72) = a1;
  *(_QWORD *)(v6 + 48) = v6;
  *(_QWORD *)(v6 + 56) = 0;
  *(_QWORD *)(v6 + 64) = 0;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_OWORD *)(v6 + 32) = 0u;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  *(_QWORD *)(v6 + 120) = swift_task_alloc();
  *(_QWORD *)(v6 + 128) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HKSamplePredicate<HKQuantitySample>);
  *(_QWORD *)(v6 + 136) = swift_task_alloc();
  Descriptor = type metadata accessor for HKStatisticsQueryDescriptor();
  *(_QWORD *)(v6 + 144) = Descriptor;
  *(_QWORD *)(v6 + 152) = *(_QWORD *)(Descriptor - 8);
  *(_QWORD *)(v6 + 160) = swift_task_alloc();
  *(_QWORD *)(v6 + 56) = a1;
  *(_QWORD *)(v6 + 64) = a2;
  *(_QWORD *)(v6 + 16) = a3;
  *(_QWORD *)(v6 + 24) = a4;
  *(_QWORD *)(v6 + 32) = a5;
  *(_QWORD *)(v6 + 40) = a6;
  return swift_task_switch();
}

uint64_t HealthKitFetcher.getCumulativeTotal(startDate:endDate:)()
{
  _QWORD *v0;
  id v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(const void *, uint64_t);
  uint64_t v8;
  void (*v9)(const void *);
  void *v10;
  uint64_t v11;
  uint64_t v12;
  const void *v13;
  const void *v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;

  v15 = v0[17];
  v14 = (const void *)v0[16];
  v13 = (const void *)v0[15];
  v12 = v0[14];
  v11 = v0[13];
  v10 = (void *)v0[12];
  v16 = (void *)v0[11];
  v6 = v0[10];
  v4 = v0[9];
  v0[6] = v0;
  v8 = type metadata accessor for Date();
  v5 = *(_QWORD *)(v8 - 8);
  v7 = *(void (**)(const void *, uint64_t))(v5 + 16);
  v7(v14, v4);
  v9 = *(void (**)(const void *))(v5 + 56);
  v9(v14);
  ((void (*)(const void *, uint64_t, uint64_t))v7)(v13, v6, v8);
  ((void (*)(const void *, _QWORD, uint64_t, uint64_t))v9)(v13, 0, 1, v8);
  HealthKitFetcher.predicate(start:end:)(v14, v13, (uint64_t)v16, v10, v11, v12, v15);
  outlined destroy of Date?((uint64_t)v13);
  outlined destroy of Date?((uint64_t)v14);
  HKStatisticsQueryDescriptor.init(predicate:options:)();
  v1 = v16;
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v17 + 168) = v2;
  *v2 = *(_QWORD *)(v17 + 48);
  v2[1] = HealthKitFetcher.getCumulativeTotal(startDate:endDate:);
  return HKStatisticsQueryDescriptor.result(for:)();
}

{
  _QWORD *v0;
  uint64_t v1;

  v1 = v0[19];
  v0[6] = v0;
  (*(void (**)(void))(v1 + 8))();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(_QWORD))(v0[6] + 8))(v0[22]);
}

{
  _QWORD *v0;
  void *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v5 = v0[20];
  v3 = v0[19];
  v4 = v0[18];
  v1 = (void *)v0[11];
  v0[6] = v0;

  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v5, v4);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)())(v0[6] + 8))();
}

uint64_t HealthKitFetcher.getCumulativeTotal(startDate:endDate:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v5;

  v3 = (_QWORD *)*v2;
  v3[6] = *v2;
  v3 += 6;
  v5 = v3 - 4;
  v3[16] = a1;
  v3[17] = v1;
  swift_task_dealloc();
  if (!v1)

  return swift_task_switch();
}

uint64_t HealthKitFetcher.getCumulativeAverage(startDate:endDate:unit:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t Descriptor;
  uint64_t v10;

  *(_QWORD *)(v7 + 272) = a7;
  *(_QWORD *)(v7 + 264) = a6;
  *(_QWORD *)(v7 + 256) = a5;
  *(_QWORD *)(v7 + 248) = a4;
  *(_QWORD *)(v7 + 240) = a3;
  *(_QWORD *)(v7 + 232) = a2;
  *(_QWORD *)(v7 + 224) = a1;
  *(_QWORD *)(v7 + 168) = v7;
  *(_QWORD *)(v7 + 176) = 0;
  *(_QWORD *)(v7 + 184) = 0;
  *(_QWORD *)(v7 + 192) = 0;
  *(_OWORD *)(v7 + 64) = 0u;
  *(_OWORD *)(v7 + 80) = 0u;
  *(_QWORD *)(v7 + 200) = 0;
  *(_QWORD *)(v7 + 208) = 0;
  *(_QWORD *)(v7 + 216) = 0;
  v8 = type metadata accessor for Date();
  *(_QWORD *)(v7 + 280) = v8;
  *(_QWORD *)(v7 + 288) = *(_QWORD *)(v8 - 8);
  *(_QWORD *)(v7 + 296) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  *(_QWORD *)(v7 + 304) = swift_task_alloc();
  *(_QWORD *)(v7 + 312) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HKSamplePredicate<HKQuantitySample>);
  *(_QWORD *)(v7 + 320) = swift_task_alloc();
  Descriptor = type metadata accessor for HKStatisticsCollectionQueryDescriptor();
  *(_QWORD *)(v7 + 328) = Descriptor;
  *(_QWORD *)(v7 + 336) = *(_QWORD *)(Descriptor - 8);
  *(_QWORD *)(v7 + 344) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TimeZone?);
  *(_QWORD *)(v7 + 352) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Calendar?);
  *(_QWORD *)(v7 + 360) = swift_task_alloc();
  v10 = type metadata accessor for DateComponents();
  *(_QWORD *)(v7 + 368) = v10;
  *(_QWORD *)(v7 + 376) = *(_QWORD *)(v10 - 8);
  *(_QWORD *)(v7 + 384) = swift_task_alloc();
  *(_QWORD *)(v7 + 392) = swift_task_alloc();
  *(_QWORD *)(v7 + 176) = a1;
  *(_QWORD *)(v7 + 184) = a2;
  *(_QWORD *)(v7 + 192) = a3;
  *(_QWORD *)(v7 + 64) = a4;
  *(_QWORD *)(v7 + 72) = a5;
  *(_QWORD *)(v7 + 80) = a6;
  *(_QWORD *)(v7 + 88) = a7;
  return swift_task_switch();
}

uint64_t HealthKitFetcher.getCumulativeAverage(startDate:endDate:unit:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  id v3;
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(const void *);
  void *v11;
  uint64_t v12;
  uint64_t v13;
  const void *v14;
  const void *v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(const void *, uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const void *v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;

  v20 = v0[49];
  v23 = v0[48];
  v19 = v0[47];
  v21 = v0[46];
  v6 = v0[45];
  v7 = v0[44];
  v24 = v0[40];
  v15 = (const void *)v0[39];
  v14 = (const void *)v0[38];
  v22 = (const void *)v0[37];
  v8 = v0[36];
  v17 = v0[35];
  v13 = v0[34];
  v12 = v0[33];
  v11 = (void *)v0[32];
  v25 = (void *)v0[31];
  v9 = v0[29];
  v16 = v0[28];
  v0[21] = v0;
  v1 = type metadata accessor for Calendar();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 56))(v6, 1);
  v2 = type metadata accessor for TimeZone();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(v7, 1);
  DateComponents.init(calendar:timeZone:era:year:month:day:hour:minute:second:nanosecond:weekday:weekdayOrdinal:quarter:weekOfMonth:weekOfYear:yearForWeekOfYear:)();
  v18 = *(void (**)(const void *, uint64_t, uint64_t))(v8 + 16);
  v0[50] = v18;
  v18(v15, v16, v17);
  v10 = *(void (**)(const void *))(v8 + 56);
  v10(v15);
  v18(v14, v9, v17);
  ((void (*)(const void *, _QWORD, uint64_t, uint64_t))v10)(v14, 0, 1, v17);
  HealthKitFetcher.predicate(start:end:)(v15, v14, (uint64_t)v25, v11, v12, v13, v24);
  outlined destroy of Date?((uint64_t)v14);
  outlined destroy of Date?((uint64_t)v15);
  v18(v22, v16, v17);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v19 + 16))(v23, v20, v21);
  HKStatisticsCollectionQueryDescriptor.init(predicate:options:anchorDate:intervalComponents:)();
  v3 = v25;
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v26 + 408) = v4;
  *v4 = *(_QWORD *)(v26 + 168);
  v4[1] = HealthKitFetcher.getCumulativeAverage(startDate:endDate:unit:);
  return HKStatisticsCollectionQueryDescriptor.result(for:)();
}

{
  uint64_t v0;
  uint64_t v1;
  id v2;
  _QWORD *v3;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(uint64_t, uint64_t, uint64_t);
  uint64_t v27;
  void (*v28)(uint64_t, uint64_t);
  uint64_t v29;
  void *v30;
  void *v31;
  void *v32;
  Class v33;
  Class isa;
  uint64_t v35;
  uint64_t v36;

  v31 = *(void **)(v0 + 416);
  v26 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 400);
  v1 = *(_QWORD *)(v0 + 296);
  v24 = *(_QWORD *)(v0 + 288);
  v27 = *(_QWORD *)(v0 + 280);
  v30 = *(void **)(v0 + 240);
  v25 = *(_QWORD *)(v0 + 232);
  v23 = *(_QWORD *)(v0 + 224);
  *(_QWORD *)(v0 + 168) = v0;
  *(_QWORD *)(v0 + 200) = v31;
  v29 = swift_allocObject();
  *(_QWORD *)(v0 + 208) = v29 + 16;
  *(_QWORD *)(v29 + 16) = 0;
  v35 = swift_allocObject();
  *(_QWORD *)(v0 + 216) = v35 + 16;
  *(_QWORD *)(v35 + 16) = 0;
  v26(v1, v23, v27);
  isa = Date._bridgeToObjectiveC()().super.isa;
  v28 = *(void (**)(uint64_t, uint64_t))(v24 + 8);
  v28(v1, v27);
  v26(v1, v25, v27);
  v33 = Date._bridgeToObjectiveC()().super.isa;
  v28(v1, v27);
  swift_retain();
  v2 = v30;
  swift_retain();
  v3 = (_QWORD *)swift_allocObject();
  v3[2] = v29;
  v3[3] = v30;
  v3[4] = v35;
  *(_QWORD *)(v0 + 48) = partial apply for closure #1 in HealthKitFetcher.getCumulativeAverage(startDate:endDate:unit:);
  *(_QWORD *)(v0 + 56) = v3;
  *(_QWORD *)(v0 + 16) = MEMORY[0x24BDAC760];
  *(_DWORD *)(v0 + 24) = 1107296256;
  *(_DWORD *)(v0 + 28) = 0;
  *(_QWORD *)(v0 + 32) = thunk for @escaping @callee_guaranteed (@guaranteed HKStatistics, @unowned UnsafeMutablePointer<ObjCBool>) -> ();
  *(_QWORD *)(v0 + 40) = &block_descriptor_0;
  v32 = _Block_copy((const void *)(v0 + 16));
  swift_release();
  objc_msgSend(v31, sel_enumerateStatisticsFromDate_toDate_withBlock_, isa, v33, v32);
  _Block_release(v32);

  swift_beginAccess();
  v36 = *(_QWORD *)(v35 + 16);
  swift_endAccess();
  if (v36 <= 0)
  {
    v5 = (id)v22[52];
    v10 = v22[49];
    v9 = v22[47];
    v11 = v22[46];
    v7 = v22[43];
    v6 = v22[42];
    v8 = v22[41];
    swift_release();
    swift_release();

    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v7, v8);
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v10, v11);
    v21 = 0.0;
  }
  else
  {
    v14 = (id)v22[52];
    v19 = v22[49];
    v18 = v22[47];
    v20 = v22[46];
    v16 = v22[43];
    v15 = v22[42];
    v17 = v22[41];
    swift_beginAccess();
    v13 = *(double *)(v29 + 16);
    swift_endAccess();
    swift_beginAccess();
    v12 = *(_QWORD *)(v35 + 16);
    swift_endAccess();
    swift_release();
    swift_release();

    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v16, v17);
    (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v19, v20);
    v21 = v13 / (double)v12;
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(double))(v22[21] + 8))(v21);
}

{
  _QWORD *v0;
  void *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v7 = v0[49];
  v5 = v0[47];
  v6 = v0[46];
  v8 = v0[43];
  v3 = v0[42];
  v4 = v0[41];
  v1 = (void *)v0[31];
  v0[21] = v0;

  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v8, v4);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v7, v6);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)())(v0[21] + 8))();
}

uint64_t HealthKitFetcher.getCumulativeAverage(startDate:endDate:unit:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v5;

  v3 = (_QWORD *)*v2;
  v3[21] = *v2;
  v3 += 21;
  v5 = v3 - 19;
  v3[31] = a1;
  v3[32] = v1;
  swift_task_dealloc();
  if (!v1)

  return swift_task_switch();
}

uint64_t specialized implicit closure #12 in HealthKitFetcher.query(start:end:)(void *a1)
{
  id v1;

  v1 = a1;
  type metadata accessor for GetHealthQuantityIntentResponse();
  lazy protocol witness table accessor for type GetHealthQuantityIntentResponse and conformance NSObject();
  return String.init<A>(describing:)();
}

void closure #1 in HealthKitFetcher.getCumulativeAverage(startDate:endDate:unit:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  double v5;
  uint64_t v6;
  double v8;
  uint64_t v9;
  id v13;

  v13 = objc_msgSend(a1, sel_sumQuantity);
  if (v13)
  {
    objc_msgSend(v13, sel_doubleValueForUnit_, a4);
    v8 = v5;
    swift_beginAccess();
    *(double *)(a3 + 16) = *(double *)(a3 + 16) + v8;
    swift_endAccess();
    swift_beginAccess();
    v6 = *(_QWORD *)(a5 + 16);
    v9 = v6 + 1;
    if (__OFADD__(v6, 1))
    {
      __break(1u);
    }
    else
    {
      *(_QWORD *)(a5 + 16) = v9;
      swift_endAccess();

    }
  }
}

uint64_t thunk for @escaping @callee_guaranteed (@guaranteed HKStatistics, @unowned UnsafeMutablePointer<ObjCBool>) -> ()(uint64_t a1, void *a2, uint64_t a3)
{
  id v3;
  void (*v6)(void *, uint64_t);

  v6 = *(void (**)(void *, uint64_t))(a1 + 32);
  swift_retain();
  v3 = a2;
  v6(a2, a3);

  return swift_release();
}

uint64_t protocol witness for QuantityFetching.isReadingAuthorized(for:) in conformance HealthKitFetcher(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)(v2 + 16) = v2;
  v5 = *(id *)v1;
  v6 = *(_QWORD *)(v1 + 8);
  v7 = *(_QWORD *)(v1 + 16);
  v8 = *(_QWORD *)(v1 + 24);
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 24) = v3;
  *v3 = *(_QWORD *)(v2 + 16);
  v3[1] = protocol witness for QuantityPersisting.isLoggingAuthorized(for:) in conformance HealthKitPersistor;
  return HealthKitFetcher.isReadingAuthorized(for:)(a1, v5, v6, v7, v8);
}

uint64_t protocol witness for QuantityFetching.query(start:end:) in conformance HealthKitFetcher(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v3 + 16) = v3;
  v7 = *v2;
  v8 = v2[1];
  v9 = v2[2];
  v10 = v2[3];
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 24) = v4;
  *v4 = *(_QWORD *)(v3 + 16);
  v4[1] = protocol witness for QuantityFetching.query(start:end:) in conformance HealthKitFetcher;
  return HealthKitFetcher.query(start:end:)(a1, a2, v7, v8, v9, v10);
}

_QWORD *protocol witness for QuantityFetching.query(start:end:) in conformance HealthKitFetcher(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v7;

  v3 = *v2;
  *(_QWORD *)(v3 + 16) = *v2;
  v7 = (_QWORD *)(v3 + 16);
  v4 = swift_task_dealloc();
  if (v1)
    return (*(_QWORD *(**)(_QWORD *__return_ptr, uint64_t))(*v7 + 8))(v7, v4);
  else
    return (*(_QWORD *(**)(_QWORD *__return_ptr, uint64_t))(*v7 + 8))(v7, a1);
}

uint64_t sub_2474CDD88()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_2474CDDC4()
{
  return swift_deallocObject();
}

uint64_t sub_2474CDDEC()
{
  return swift_deallocObject();
}

uint64_t sub_2474CDE14()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2474CDE50()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2474CDE8C()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_2474CDEC8()
{
  return swift_deallocObject();
}

uint64_t sub_2474CDEF0()
{
  return swift_deallocObject();
}

uint64_t sub_2474CDF18()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2474CDF54()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2474CDF90()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_2474CDFCC()
{
  return swift_deallocObject();
}

uint64_t sub_2474CDFF4()
{
  return swift_deallocObject();
}

uint64_t sub_2474CE01C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2474CE058()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2474CE094()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_2474CE0D0()
{
  return swift_deallocObject();
}

uint64_t sub_2474CE0F8()
{
  return swift_deallocObject();
}

uint64_t sub_2474CE120()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2474CE15C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2474CE198()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t sub_2474CE1D4()
{
  return swift_deallocObject();
}

uint64_t sub_2474CE1FC()
{
  return swift_deallocObject();
}

uint64_t sub_2474CE224()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2474CE260()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2474CE29C()
{
  uint64_t v0;

  return swift_deallocObject();
}

void *partial apply for implicit closure #7 in GetHealthQuantityIntentHandler.handle(intent:)()
{
  uint64_t v0;

  return implicit closure #7 in GetHealthQuantityIntentHandler.handle(intent:)(*(void **)(v0 + 16));
}

uint64_t sub_2474CE2E0()
{
  return swift_deallocObject();
}

uint64_t sub_2474CE308()
{
  return swift_deallocObject();
}

uint64_t sub_2474CE330()
{
  swift_release();
  return swift_deallocObject();
}

void *partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:attributes:)()
{
  uint64_t v0;

  return implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:attributes:)(*(void (**)(void))(v0 + 16));
}

uint64_t sub_2474CE378()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2474CE3B4()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2474CE3F0()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t sub_2474CE42C()
{
  return swift_deallocObject();
}

uint64_t sub_2474CE454()
{
  return swift_deallocObject();
}

uint64_t sub_2474CE47C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2474CE4B8()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2474CE4F4()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of [HKQuantityType]()
{
  swift_bridgeObjectRelease();
}

id *outlined destroy of HealthKitFetcher(id *a1)
{

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_2474CE5BC()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 24));
  return swift_deallocObject();
}

uint64_t partial apply for @objc closure #1 in GetHealthQuantityIntentHandler.handle(intent:)()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  const void *v4;
  void *v5;
  void *v6;

  *(_QWORD *)(v1 + 16) = v1;
  v6 = (void *)v0[2];
  v4 = (const void *)v0[3];
  v5 = (void *)v0[4];
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 24) = v2;
  *v2 = *(_QWORD *)(v1 + 16);
  v2[1] = _sIeghH_IeAgH_TRTQ0_;
  return ((uint64_t (*)(void *, const void *, void *))((char *)&async function pointer to @objc closure #1 in GetHealthQuantityIntentHandler.handle(intent:)
                                                               + async function pointer to @objc closure #1 in GetHealthQuantityIntentHandler.handle(intent:)))(v6, v4, v5);
}

unint64_t type metadata accessor for HKSample()
{
  unint64_t ObjCClassMetadata;
  uint64_t v2;

  v2 = lazy cache variable for type metadata for HKSample;
  if (!lazy cache variable for type metadata for HKSample)
  {
    objc_opt_self();
    ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for HKSample);
    return ObjCClassMetadata;
  }
  return v2;
}

uint64_t sub_2474CE718()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

id partial apply for implicit closure #1 in HealthKitFetcher.query(start:end:)()
{
  uint64_t v0;

  return implicit closure #1 in HealthKitFetcher.query(start:end:)(*(_QWORD *)(v0 + 16), *(id *)(v0 + 24));
}

uint64_t sub_2474CE780()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?)
                                      - 8)
                          + 80);
  v4 = (v1 + 16) & ~v1;
  v5 = type metadata accessor for Date();
  v6 = *(_QWORD *)(v5 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t))(v6 + 48))(v0 + v4, 1))
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v3 + v4, v5);
  return swift_deallocObject();
}

void *outlined init with take of Date?(const void *a1, void *a2)
{
  uint64_t v2;
  uint64_t v6;
  uint64_t v7;

  v6 = type metadata accessor for Date();
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t))(v7 + 48))(a1, 1))
  {
    v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
    memcpy(a2, a1, *(_QWORD *)(*(_QWORD *)(v2 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v7 + 32))(a2, a1, v6);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a2, 0, 1, v6);
  }
  return a2;
}

uint64_t partial apply for implicit closure #2 in HealthKitFetcher.query(start:end:)()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?)
                                      - 8)
                          + 80);
  return implicit closure #2 in HealthKitFetcher.query(start:end:)(v0 + ((v1 + 16) & ~v1));
}

uint64_t sub_2474CE934()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?)
                                      - 8)
                          + 80);
  v4 = (v1 + 16) & ~v1;
  v5 = type metadata accessor for Date();
  v6 = *(_QWORD *)(v5 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t))(v6 + 48))(v0 + v4, 1))
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v3 + v4, v5);
  return swift_deallocObject();
}

uint64_t sub_2474CE9F8()
{
  return swift_deallocObject();
}

uint64_t sub_2474CEA20()
{
  return swift_deallocObject();
}

uint64_t sub_2474CEA48()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2474CEA84()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2474CEAC0()
{
  return swift_deallocObject();
}

uint64_t sub_2474CEAE8()
{
  return swift_deallocObject();
}

uint64_t sub_2474CEB10()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2474CEB4C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2474CEB88()
{
  return swift_deallocObject();
}

uint64_t sub_2474CEBB0()
{
  return swift_deallocObject();
}

uint64_t sub_2474CEBD8()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2474CEC14()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2474CEC50()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_2474CECA4()
{
  return swift_deallocObject();
}

uint64_t sub_2474CECCC()
{
  return swift_deallocObject();
}

uint64_t sub_2474CECF4()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2474CED30()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2474CED6C()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t partial apply for specialized implicit closure #5 in HealthKitFetcher.query(start:end:)()
{
  uint64_t v0;

  return specialized implicit closure #5 in HealthKitFetcher.query(start:end:)(*(void **)(v0 + 16));
}

uint64_t sub_2474CEDB0()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t sub_2474CEDEC()
{
  return swift_deallocObject();
}

uint64_t sub_2474CEE14()
{
  return swift_deallocObject();
}

uint64_t sub_2474CEE3C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2474CEE78()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2474CEEB4()
{
  return swift_deallocObject();
}

uint64_t sub_2474CEEDC()
{
  return swift_deallocObject();
}

uint64_t sub_2474CEF04()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2474CEF40()
{
  swift_release();
  return swift_deallocObject();
}

unint64_t lazy protocol witness table accessor for type [HKQuantityType] and conformance [A]()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type [HKQuantityType] and conformance [A];
  if (!lazy protocol witness table cache variable for type [HKQuantityType] and conformance [A])
  {
    v0 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [HKQuantityType]);
    v1 = MEMORY[0x24957D92C](MEMORY[0x24BEE12C8], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type [HKQuantityType] and conformance [A]);
    return v1;
  }
  return v3;
}

unint64_t lazy protocol witness table accessor for type HKQuantityType and conformance NSObject()
{
  unint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type HKQuantityType and conformance NSObject;
  if (!lazy protocol witness table cache variable for type HKQuantityType and conformance NSObject)
  {
    v0 = type metadata accessor for HKQuantityType();
    v1 = MEMORY[0x24957D92C](MEMORY[0x24BEE5BE0], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type HKQuantityType and conformance NSObject);
    return v1;
  }
  return v3;
}

{
  unint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type HKQuantityType and conformance NSObject;
  if (!lazy protocol witness table cache variable for type HKQuantityType and conformance NSObject)
  {
    v0 = type metadata accessor for HKQuantityType();
    v1 = MEMORY[0x24957D92C](MEMORY[0x24BEE5BD8], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type HKQuantityType and conformance NSObject);
    return v1;
  }
  return v3;
}

uint64_t sub_2474CF05C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(type metadata accessor for Date() - 8);
  (*(void (**)(unint64_t))(v1 + 8))(v0 + ((*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80)));
  return swift_deallocObject();
}

uint64_t sub_2474CF0CC()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2474CF108()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(type metadata accessor for Date() - 8);
  (*(void (**)(unint64_t))(v1 + 8))(v0 + ((*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80)));
  return swift_deallocObject();
}

uint64_t sub_2474CF178()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2474CF1B4()
{
  return swift_deallocObject();
}

uint64_t sub_2474CF1DC()
{
  return swift_deallocObject();
}

uint64_t sub_2474CF204()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2474CF240()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2474CF27C()
{
  return swift_deallocObject();
}

uint64_t sub_2474CF2A4()
{
  return swift_deallocObject();
}

uint64_t sub_2474CF2CC()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2474CF308()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2474CF344()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(type metadata accessor for Date() - 8);
  (*(void (**)(unint64_t))(v1 + 8))(v0 + ((*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80)));
  return swift_deallocObject();
}

uint64_t sub_2474CF3B4()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2474CF3F0()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(type metadata accessor for Date() - 8);
  (*(void (**)(unint64_t))(v1 + 8))(v0 + ((*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80)));
  return swift_deallocObject();
}

uint64_t sub_2474CF460()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2474CF49C()
{
  return swift_deallocObject();
}

__C::HKQueryOptions partial apply for implicit closure #11 in HealthKitFetcher.query(start:end:)(Swift::UInt rawValue)
{
  return HKQueryOptions.init(rawValue:)(rawValue);
}

uint64_t sub_2474CF4CC()
{
  return swift_deallocObject();
}

uint64_t sub_2474CF4F4()
{
  return swift_deallocObject();
}

uint64_t sub_2474CF51C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2474CF558()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2474CF594()
{
  return swift_deallocObject();
}

uint64_t sub_2474CF5BC()
{
  return swift_deallocObject();
}

uint64_t sub_2474CF5E4()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2474CF620()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2474CF65C()
{
  return swift_deallocObject();
}

uint64_t sub_2474CF684()
{
  return swift_deallocObject();
}

uint64_t sub_2474CF6AC()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2474CF6E8()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2474CF724()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t partial apply for specialized implicit closure #12 in HealthKitFetcher.query(start:end:)()
{
  uint64_t v0;

  return specialized implicit closure #12 in HealthKitFetcher.query(start:end:)(*(void **)(v0 + 16));
}

uint64_t sub_2474CF768()
{
  return swift_deallocObject();
}

uint64_t sub_2474CF790()
{
  return swift_deallocObject();
}

uint64_t sub_2474CF7B8()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2474CF7F4()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2474CF830()
{
  return swift_deallocObject();
}

uint64_t sub_2474CF858()
{
  uint64_t v0;

  swift_release();

  swift_release();
  return swift_deallocObject();
}

void partial apply for closure #1 in HealthKitFetcher.getCumulativeAverage(startDate:endDate:unit:)(void *a1, uint64_t a2)
{
  uint64_t *v2;

  closure #1 in HealthKitFetcher.getCumulativeAverage(startDate:endDate:unit:)(a1, a2, v2[2], v2[3], v2[4]);
}

uint64_t block_copy_helper(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a2 + 32);
  v5 = *(_QWORD *)(a2 + 40);
  swift_retain();
  result = a1;
  *(_QWORD *)(a1 + 32) = v4;
  *(_QWORD *)(a1 + 40) = v5;
  return result;
}

uint64_t block_destroy_helper()
{
  return swift_release();
}

uint64_t type metadata accessor for GetHealthQuantityIntentHandler()
{
  return objc_opt_self();
}

uint64_t initializeBufferWithCopyOfBuffer for HealthKitFetcher(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;

  v4 = *a2;
  swift_retain();
  *a1 = v4;
  return *a1 + 16;
}

uint64_t destroy for HealthKitFetcher(id *a1)
{

  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for HealthKitFetcher(_QWORD *a1, uint64_t a2)
{
  id v2;
  id v3;
  _QWORD *result;
  id v5;
  void *v6;
  uint64_t v7;
  uint64_t v10;

  v5 = *(id *)a2;
  v2 = *(id *)a2;
  *a1 = v5;
  v6 = *(void **)(a2 + 8);
  v3 = v6;
  a1[1] = v6;
  v7 = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  a1[2] = v7;
  v10 = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  result = a1;
  a1[3] = v10;
  return result;
}

uint64_t assignWithCopy for HealthKitFetcher(uint64_t a1, uint64_t a2)
{
  id v2;
  void *v3;
  id v4;
  void *v5;
  id v7;
  void *v8;
  uint64_t v9;
  uint64_t v11;

  v7 = *(id *)a2;
  v2 = *(id *)a2;
  v3 = *(void **)a1;
  *(_QWORD *)a1 = v7;

  v8 = *(void **)(a2 + 8);
  v4 = v8;
  v5 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v8;

  v9 = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  *(_QWORD *)(a1 + 16) = v9;
  swift_bridgeObjectRelease();
  v11 = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  *(_QWORD *)(a1 + 24) = v11;
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy32_8(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  result = *(__n128 *)(a2 + 16);
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t assignWithTake for HealthKitFetcher(uint64_t a1, _QWORD *a2)
{
  void *v2;
  void *v3;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = *a2;

  v3 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = a2[1];

  *(_QWORD *)(a1 + 16) = a2[2];
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 24) = a2[3];
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for HealthKitFetcher(uint64_t a1, unsigned int a2)
{
  int v3;
  int v4;

  if (a2)
  {
    if (a2 > 0x7FFFFFFF && *(_BYTE *)(a1 + 32))
    {
      v4 = *(_QWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v3 = -1;
      if (*(_QWORD *)a1 < 0x100000000uLL)
        v3 = *(_QWORD *)a1;
      v4 = v3;
    }
  }
  else
  {
    v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for HealthKitFetcher(uint64_t result, unsigned int a2, unsigned int a3)
{
  _BOOL4 v3;

  v3 = a3 > 0x7FFFFFFF;
  if (a2 > 0x7FFFFFFF)
  {
    *(_QWORD *)result = a2 + 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    if (a3 > 0x7FFFFFFF)
    {
      if (v3)
        *(_BYTE *)(result + 32) = 1;
      else
        __break(1u);
    }
  }
  else
  {
    if (a3 > 0x7FFFFFFF)
    {
      if (v3)
        *(_BYTE *)(result + 32) = 0;
      else
        __break(1u);
    }
    if (a2)
      *(_QWORD *)result = a2 - 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for HealthKitFetcher()
{
  return &type metadata for HealthKitFetcher;
}

unint64_t lazy protocol witness table accessor for type GetHealthQuantityIntentResponse and conformance NSObject()
{
  uint64_t HealthQuantityIntentResponse;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type GetHealthQuantityIntentResponse and conformance NSObject;
  if (!lazy protocol witness table cache variable for type GetHealthQuantityIntentResponse and conformance NSObject)
  {
    HealthQuantityIntentResponse = type metadata accessor for GetHealthQuantityIntentResponse();
    v1 = MEMORY[0x24957D92C](MEMORY[0x24BDD0240], HealthQuantityIntentResponse);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type GetHealthQuantityIntentResponse and conformance NSObject);
    return v1;
  }
  return v3;
}

unint64_t lazy protocol witness table accessor for type Date? and conformance A?()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type Date? and conformance A?;
  if (!lazy protocol witness table cache variable for type Date? and conformance A?)
  {
    v0 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Date?);
    v1 = MEMORY[0x24957D92C](MEMORY[0x24BE8DD20], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type Date? and conformance A?);
    return v1;
  }
  return v3;
}

id LogPeriodIntent.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

id LogPeriodIntent.init()()
{
  id v0;
  id v2;
  objc_super v3;
  id v4;

  v4 = 0;
  v3.receiver = 0;
  v3.super_class = (Class)type metadata accessor for LogPeriodIntent();
  v2 = objc_msgSendSuper2(&v3, sel_init);
  v0 = v2;
  v4 = v2;

  return v2;
}

uint64_t type metadata accessor for LogPeriodIntent()
{
  return objc_opt_self();
}

id LogPeriodIntent.__allocating_init(coder:)(void *a1)
{
  objc_class *v1;
  id v4;

  v4 = objc_msgSend(objc_allocWithZone(v1), sel_initWithCoder_, a1);

  return v4;
}

id LogPeriodIntent.init(coder:)(void *a1)
{
  id v1;
  id v5;
  objc_super v6;
  void *v7;
  id v8;

  v8 = 0;
  v7 = a1;
  v6.receiver = 0;
  v6.super_class = (Class)type metadata accessor for LogPeriodIntent();
  v5 = objc_msgSendSuper2(&v6, sel_initWithCoder_, a1);
  if (v5)
  {
    v1 = v5;
    v8 = v5;

    return v5;
  }
  else
  {

    return 0;
  }
}

id LogPeriodIntent.__allocating_init(identifier:backingStore:)(uint64_t a1, uint64_t a2, void *a3)
{
  objc_class *v3;
  id v5;
  uint64_t v6;
  void *v7;
  id v11;

  v11 = objc_allocWithZone(v3);
  if (a2)
  {
    v6 = MEMORY[0x24957CFB4](a1);
    swift_bridgeObjectRelease();
    v7 = (void *)v6;
  }
  else
  {
    v7 = 0;
  }
  v5 = objc_msgSend(v11, sel_initWithIdentifier_backingStore_);

  return v5;
}

id LogPeriodIntent.init(identifier:backingStore:)(uint64_t a1, uint64_t a2, void *a3)
{
  id v3;
  id v5;
  uint64_t v6;
  void *v7;
  objc_super v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  id v15;

  v15 = 0;
  v13 = a1;
  v14 = a2;
  v12 = a3;
  swift_bridgeObjectRetain();
  if (a2)
  {
    v6 = MEMORY[0x24957CFB4](a1);
    swift_bridgeObjectRelease();
    v7 = (void *)v6;
  }
  else
  {
    v7 = 0;
  }
  v11.receiver = 0;
  v11.super_class = (Class)type metadata accessor for LogPeriodIntent();
  v5 = objc_msgSendSuper2(&v11, sel_initWithIdentifier_backingStore_, v7, a3);

  v3 = v5;
  v15 = v5;

  swift_bridgeObjectRelease();
  return v5;
}

id LogPeriodIntent.__allocating_init(domain:verb:parametersByName:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  objc_class *v5;
  id v6;
  id v8;
  id v9;
  Class isa;
  id v13;
  void *v16;
  void *v18;

  v13 = objc_allocWithZone(v5);
  v16 = (void *)MEMORY[0x24957CFB4](a1, a2);
  v18 = (void *)MEMORY[0x24957CFB4](a3, a4);
  if (a5)
  {
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    v6 = objc_msgSend(v13, sel_initWithDomain_verb_parametersByName_, v16, v18, isa);
  }
  else
  {
    v6 = objc_msgSend(v13, sel_initWithDomain_verb_parametersByName_, v16, v18, 0);
  }
  v9 = v6;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v9;
}

id LogPeriodIntent.init(domain:verb:parametersByName:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  id v5;
  id v7;
  Class isa;
  Class v9;
  id v12;
  void *v15;
  objc_super v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id v23;

  v23 = 0;
  v21 = a1;
  v22 = a2;
  v19 = a3;
  v20 = a4;
  v18 = a5;
  swift_bridgeObjectRetain();
  v12 = (id)MEMORY[0x24957CFB4](a1, a2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v15 = (void *)MEMORY[0x24957CFB4](a3, a4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  if (a5)
  {
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    v9 = isa;
  }
  else
  {
    v9 = 0;
  }
  v17.receiver = 0;
  v17.super_class = (Class)type metadata accessor for LogPeriodIntent();
  v7 = objc_msgSendSuper2(&v17, sel_initWithDomain_verb_parametersByName_, v12, v15, v9);

  v5 = v7;
  v23 = v7;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return v7;
}

id LogPeriodIntent.__deallocating_deinit()
{
  void *v0;
  objc_super v2;
  void *v3;

  v3 = v0;
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for LogPeriodIntent();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t LogPeriodIntentResponseCode.init(rawValue:)(uint64_t a1)
{
  switch(a1)
  {
    case 0:
      return 0;
    case 1:
      return 1;
    case 2:
      return 2;
    case 3:
      return 3;
    case 4:
      return 4;
    case 5:
      return 5;
    case 6:
      return 6;
    case 100:
      return 100;
    case 101:
      return 101;
    case 102:
      return 102;
  }
  return 0;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance LogPeriodIntentResponseCode()
{
  lazy protocol witness table accessor for type LogPeriodIntentResponseCode and conformance LogPeriodIntentResponseCode();
  return == infix<A>(_:_:)() & 1;
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance LogPeriodIntentResponseCode()
{
  lazy protocol witness table accessor for type LogPeriodIntentResponseCode and conformance LogPeriodIntentResponseCode();
  return RawRepresentable<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance LogPeriodIntentResponseCode()
{
  lazy protocol witness table accessor for type LogPeriodIntentResponseCode and conformance LogPeriodIntentResponseCode();
  return RawRepresentable<>.hash(into:)();
}

uint64_t protocol witness for Hashable._rawHashValue(seed:) in conformance LogPeriodIntentResponseCode()
{
  lazy protocol witness table accessor for type LogPeriodIntentResponseCode and conformance LogPeriodIntentResponseCode();
  return RawRepresentable<>._rawHashValue(seed:)();
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance LogPeriodIntentResponseCode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  char v3;

  result = LogPeriodIntentResponseCode.init(rawValue:)(*a1);
  *(_QWORD *)a2 = result;
  *(_BYTE *)(a2 + 8) = v3 & 1;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance LogPeriodIntentResponseCode(_QWORD *a1@<X8>)
{
  uint64_t v1;

  LogPeriodIntentResponseCode.rawValue.getter();
  *a1 = v1;
}

uint64_t LogPeriodIntentResponse.code.getter()
{
  uint64_t v0;
  uint64_t *v2;
  uint64_t v3;

  v2 = (uint64_t *)(v0 + OBJC_IVAR___LogPeriodIntentResponse_code);
  swift_beginAccess();
  v3 = *v2;
  swift_endAccess();
  return v3;
}

uint64_t LogPeriodIntentResponse.code.setter(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)(v1 + OBJC_IVAR___LogPeriodIntentResponse_code);
  swift_beginAccess();
  *v3 = a1;
  return swift_endAccess();
}

uint64_t (*LogPeriodIntentResponse.code.modify())()
{
  swift_beginAccess();
  return LogQuantityIntentResponse.code.modify;
}

void key path getter for LogPeriodIntentResponse.code : LogPeriodIntentResponse(id *a1@<X0>, uint64_t *a2@<X8>)
{
  id v2;
  id v3;

  v3 = *a1;
  v2 = *a1;
  *a2 = LogPeriodIntentResponse.code.getter();

}

void key path setter for LogPeriodIntentResponse.code : LogPeriodIntentResponse(uint64_t *a1, id *a2)
{
  id v2;
  id v3;
  uint64_t v4;

  v4 = *a1;
  v3 = *a2;
  v2 = *a2;
  LogPeriodIntentResponse.code.setter(v4);

}

char *LogPeriodIntentResponse.__allocating_init(code:userActivity:)(uint64_t a1, void *a2)
{
  objc_class *v2;
  id v3;

  v3 = objc_allocWithZone(v2);
  return LogPeriodIntentResponse.init(code:userActivity:)(a1, a2);
}

char *LogPeriodIntentResponse.init(code:userActivity:)(uint64_t a1, void *a2)
{
  char *v2;
  char *v3;
  char *v4;
  char *v6;
  char *v9;
  void *v10;

  v9 = (char *)objc_msgSend(v10, sel_init);
  v2 = v9;
  v3 = v9;
  v4 = v9;
  v6 = &v9[OBJC_IVAR___LogPeriodIntentResponse_code];
  swift_beginAccess();
  *(_QWORD *)v6 = a1;
  swift_endAccess();

  objc_msgSend(v9, sel_setUserActivity_, a2);
  return v9;
}

id LogPeriodIntentResponse.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

id LogPeriodIntentResponse.init()()
{
  char *v0;
  char *v1;
  id v2;
  id v4;
  objc_super v5;
  void *v6;

  v1 = v0;
  v6 = v0;
  *(_QWORD *)&v0[OBJC_IVAR___LogPeriodIntentResponse_code] = 0;

  v5.receiver = v6;
  v5.super_class = (Class)type metadata accessor for LogPeriodIntentResponse();
  v4 = objc_msgSendSuper2(&v5, sel_init);
  v2 = v4;
  v6 = v4;

  return v4;
}

uint64_t type metadata accessor for LogPeriodIntentResponse()
{
  return objc_opt_self();
}

id LogPeriodIntentResponse.__allocating_init(coder:)(void *a1)
{
  objc_class *v1;
  id v4;

  v4 = objc_msgSend(objc_allocWithZone(v1), sel_initWithCoder_, a1);

  return v4;
}

id LogPeriodIntentResponse.init(coder:)(void *a1)
{
  char *v1;
  char *v2;
  id v3;
  id v7;
  objc_super v8;
  void *v9;
  id v10;

  v9 = a1;
  v2 = v1;
  v10 = v1;
  *(_QWORD *)&v1[OBJC_IVAR___LogPeriodIntentResponse_code] = 0;

  v8.receiver = v10;
  v8.super_class = (Class)type metadata accessor for LogPeriodIntentResponse();
  v7 = objc_msgSendSuper2(&v8, sel_initWithCoder_, a1);
  if (v7)
  {
    v3 = v7;
    v10 = v7;

    return v7;
  }
  else
  {

    return 0;
  }
}

id LogPeriodIntentResponse.__allocating_init(backingStore:)(void *a1)
{
  objc_class *v1;
  id v4;

  v4 = objc_msgSend(objc_allocWithZone(v1), sel_initWithBackingStore_, a1);

  return v4;
}

id LogPeriodIntentResponse.init(backingStore:)(void *a1)
{
  char *v1;
  char *v2;
  id v3;
  id v7;
  objc_super v8;
  void *v9;
  id v10;

  v9 = a1;
  v2 = v1;
  v10 = v1;
  *(_QWORD *)&v1[OBJC_IVAR___LogPeriodIntentResponse_code] = 0;

  v8.receiver = v10;
  v8.super_class = (Class)type metadata accessor for LogPeriodIntentResponse();
  v7 = objc_msgSendSuper2(&v8, sel_initWithBackingStore_, a1);
  if (v7)
  {
    v3 = v7;
    v10 = v7;

    return v7;
  }
  else
  {

    return 0;
  }
}

id LogPeriodIntentResponse.__allocating_init(propertiesByName:)(uint64_t a1)
{
  objc_class *v1;
  id v2;
  id v4;
  id v5;
  Class isa;
  id v8;

  v8 = objc_allocWithZone(v1);
  if (a1)
  {
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    v2 = objc_msgSend(v8, sel_initWithPropertiesByName_, isa);
  }
  else
  {
    v2 = objc_msgSend(v8, sel_initWithPropertiesByName_, 0);
  }
  v5 = v2;

  return v5;
}

id LogPeriodIntentResponse.init(propertiesByName:)(uint64_t a1)
{
  char *v1;
  char *v2;
  id v3;
  id v6;
  Class isa;
  Class v8;
  objc_super v10;
  uint64_t v11;
  id v12;

  v11 = a1;
  v2 = v1;
  v12 = v1;
  *(_QWORD *)&v1[OBJC_IVAR___LogPeriodIntentResponse_code] = 0;

  swift_bridgeObjectRetain();
  if (a1)
  {
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    v8 = isa;
  }
  else
  {
    v8 = 0;
  }
  v10.receiver = v12;
  v10.super_class = (Class)type metadata accessor for LogPeriodIntentResponse();
  v6 = objc_msgSendSuper2(&v10, sel_initWithPropertiesByName_, v8);

  if (v6)
  {
    v3 = v6;
    v12 = v6;
    swift_bridgeObjectRelease();

    return v6;
  }
  else
  {

    swift_bridgeObjectRelease();
    return 0;
  }
}

id LogPeriodIntentResponse.__deallocating_deinit()
{
  void *v0;
  objc_super v2;
  void *v3;

  v3 = v0;
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for LogPeriodIntentResponse();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

unint64_t base witness table accessor for Equatable in LogPeriodIntentResponseCode()
{
  return lazy protocol witness table accessor for type LogPeriodIntentResponseCode and conformance LogPeriodIntentResponseCode();
}

unint64_t lazy protocol witness table accessor for type LogPeriodIntentResponseCode and conformance LogPeriodIntentResponseCode()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type LogPeriodIntentResponseCode and conformance LogPeriodIntentResponseCode;
  if (!lazy protocol witness table cache variable for type LogPeriodIntentResponseCode and conformance LogPeriodIntentResponseCode)
  {
    v0 = MEMORY[0x24957D92C](&protocol conformance descriptor for LogPeriodIntentResponseCode, &type metadata for LogPeriodIntentResponseCode);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type LogPeriodIntentResponseCode and conformance LogPeriodIntentResponseCode);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type LogPeriodIntentResponseCode and conformance LogPeriodIntentResponseCode;
  if (!lazy protocol witness table cache variable for type LogPeriodIntentResponseCode and conformance LogPeriodIntentResponseCode)
  {
    v0 = MEMORY[0x24957D92C](&protocol conformance descriptor for LogPeriodIntentResponseCode, &type metadata for LogPeriodIntentResponseCode);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type LogPeriodIntentResponseCode and conformance LogPeriodIntentResponseCode);
    return v0;
  }
  return v2;
}

void sub_2474D17A4(id *a1@<X0>, uint64_t *a2@<X8>)
{
  key path getter for LogPeriodIntentResponse.code : LogPeriodIntentResponse(a1, a2);
}

void sub_2474D17B8(uint64_t *a1, id *a2)
{
  key path setter for LogPeriodIntentResponse.code : LogPeriodIntentResponse(a1, a2);
}

ValueMetadata *type metadata accessor for LogPeriodIntentResponseCode()
{
  return &type metadata for LogPeriodIntentResponseCode;
}

uint64_t static MatchedMedSchedule.supportsSecureCoding.getter()
{
  return 1;
}

id MatchedMedSchedule.__allocating_init(identifier:display:pronunciationHint:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  objc_class *v6;
  id v8;
  uint64_t v9;
  void *v10;
  id v11;
  uint64_t v12;
  void *v13;
  id v20;

  v20 = objc_allocWithZone(v6);
  if (a2)
  {
    v12 = MEMORY[0x24957CFB4](a1);
    swift_bridgeObjectRelease();
    v13 = (void *)v12;
  }
  else
  {
    v13 = 0;
  }
  v11 = (id)MEMORY[0x24957CFB4](a3, a4);
  if (a6)
  {
    v9 = MEMORY[0x24957CFB4](a5);
    swift_bridgeObjectRelease();
    v10 = (void *)v9;
  }
  else
  {
    v10 = 0;
  }
  v8 = objc_msgSend(v20, sel_initWithIdentifier_displayString_pronunciationHint_, v13, v11);

  swift_bridgeObjectRelease();
  return v8;
}

id MatchedMedSchedule.init(identifier:display:pronunciationHint:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  id v6;
  id v8;
  uint64_t v9;
  void *v10;
  id v11;
  uint64_t v12;
  void *v13;
  objc_super v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  id v27;

  v27 = 0;
  v25 = a1;
  v26 = a2;
  v23 = a3;
  v24 = a4;
  v21 = a5;
  v22 = a6;
  swift_bridgeObjectRetain();
  if (a2)
  {
    v12 = MEMORY[0x24957CFB4](a1);
    swift_bridgeObjectRelease();
    v13 = (void *)v12;
  }
  else
  {
    v13 = 0;
  }
  swift_bridgeObjectRetain();
  v11 = (id)MEMORY[0x24957CFB4](a3, a4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  if (a6)
  {
    v9 = MEMORY[0x24957CFB4](a5);
    swift_bridgeObjectRelease();
    v10 = (void *)v9;
  }
  else
  {
    v10 = 0;
  }
  v20.receiver = 0;
  v20.super_class = (Class)type metadata accessor for MatchedMedSchedule();
  v8 = objc_msgSendSuper2(&v20, sel_initWithIdentifier_displayString_pronunciationHint_, v13, v11, v10);

  v6 = v8;
  v27 = v8;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return v8;
}

uint64_t type metadata accessor for MatchedMedSchedule()
{
  return objc_opt_self();
}

id MatchedMedSchedule.__allocating_init(coder:)(void *a1)
{
  objc_class *v1;
  id v4;

  v4 = objc_msgSend(objc_allocWithZone(v1), sel_initWithCoder_, a1);

  return v4;
}

id MatchedMedSchedule.init(coder:)(void *a1)
{
  id v1;
  id v5;
  objc_super v6;
  void *v7;
  id v8;

  v8 = 0;
  v7 = a1;
  v6.receiver = 0;
  v6.super_class = (Class)type metadata accessor for MatchedMedSchedule();
  v5 = objc_msgSendSuper2(&v6, sel_initWithCoder_, a1);
  if (v5)
  {
    v1 = v5;
    v8 = v5;

    return v5;
  }
  else
  {

    return 0;
  }
}

id MatchedMedSchedule.__deallocating_deinit()
{
  void *v0;
  objc_super v2;
  void *v3;

  v3 = v0;
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for MatchedMedSchedule();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

id static MatchedMedScheduleResolutionResult.success(with:)(uint64_t a1)
{
  uint64_t v1;
  objc_super v4;
  uint64_t v5;
  uint64_t v6;

  v6 = a1;
  v5 = v1;
  v4.receiver = (id)swift_getObjCClassFromMetadata();
  v4.super_class = (Class)&OBJC_METACLASS___MatchedMedScheduleResolutionResult;
  return objc_msgSendSuper2(&v4, sel_successWithResolvedObject_, a1);
}

id static MatchedMedScheduleResolutionResult.disambiguation(with:)(uint64_t a1)
{
  uint64_t v1;
  void *ObjCClassFromMetadata;
  Class isa;
  id v5;
  objc_super v6;
  uint64_t v7;
  uint64_t v8;

  v8 = a1;
  v7 = v1;
  ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata();
  swift_bridgeObjectRetain();
  type metadata accessor for MatchedMedSchedule();
  type metadata accessor for INObject();
  _arrayForceCast<A, B>(_:)();
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v6.receiver = ObjCClassFromMetadata;
  v6.super_class = (Class)&OBJC_METACLASS___MatchedMedScheduleResolutionResult;
  v5 = objc_msgSendSuper2(&v6, sel_disambiguationWithObjectsToDisambiguate_, isa);

  return v5;
}

id static MatchedMedScheduleResolutionResult.confirmationRequired(with:)(void *a1)
{
  uint64_t v1;
  id v2;
  id v4;
  id v5;
  void *v6;
  void *ObjCClassFromMetadata;
  objc_super v9;
  uint64_t v10;
  void *v11;

  v11 = a1;
  v10 = v1;
  ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata();
  v2 = a1;
  if (a1)
    v6 = a1;
  else
    v6 = 0;
  v9.receiver = ObjCClassFromMetadata;
  v9.super_class = (Class)&OBJC_METACLASS___MatchedMedScheduleResolutionResult;
  v5 = objc_msgSendSuper2(&v9, sel_confirmationRequiredWithObjectToConfirm_, v6);

  return v5;
}

void static MatchedMedScheduleResolutionResult.success(with:)()
{
  implicit closure #1 in default argument 0 of fatalError(_:file:line:)();
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

id sub_2474D2354(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, id a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  void *v17;

  return a1;
}

void static MatchedMedScheduleResolutionResult.disambiguation(with:)()
{
  implicit closure #1 in default argument 0 of fatalError(_:file:line:)();
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

id sub_2474D2448(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, id a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  void *v17;

  swift_bridgeObjectRelease();

  return a1;
}

void static MatchedMedScheduleResolutionResult.confirmationRequired(with:)()
{
  implicit closure #1 in default argument 0 of fatalError(_:file:line:)();
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

id sub_2474D2528(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, id a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  void *v17;

  return a1;
}

id MatchedMedScheduleResolutionResult.__allocating_init(JSONDictionary:intent:)(uint64_t a1, void *a2)
{
  objc_class *v2;
  id v4;
  Class isa;
  id v7;

  v4 = objc_allocWithZone(v2);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  v7 = objc_msgSend(v4, sel_initWithJSONDictionary_forIntent_);

  swift_bridgeObjectRelease();
  return v7;
}

id MatchedMedScheduleResolutionResult.init(JSONDictionary:intent:)(uint64_t a1, void *a2)
{
  id v2;
  Class isa;
  id v7;
  objc_super v8;
  void *v9;
  uint64_t v10;
  id v11;

  v11 = 0;
  v10 = a1;
  v9 = a2;
  swift_bridgeObjectRetain();
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v8.receiver = 0;
  v8.super_class = (Class)type metadata accessor for MatchedMedScheduleResolutionResult();
  v7 = objc_msgSendSuper2(&v8, sel_initWithJSONDictionary_forIntent_, isa, a2);

  if (v7)
  {
    v2 = v7;
    v11 = v7;

    swift_bridgeObjectRelease();
    return v7;
  }
  else
  {

    swift_bridgeObjectRelease();
    return 0;
  }
}

id MatchedMedScheduleResolutionResult.__deallocating_deinit()
{
  void *v0;
  objc_super v2;
  void *v3;

  v3 = v0;
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for MatchedMedScheduleResolutionResult();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for MatchedMedScheduleResolutionResult()
{
  return objc_opt_self();
}

uint64_t getPreferredUnit(for:store:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;

  v2[47] = a2;
  v2[46] = a1;
  v2[30] = v2;
  v2[31] = 0;
  v2[32] = 0;
  v2[35] = 0;
  v2[37] = 0;
  v2[39] = 0;
  v2[44] = 0;
  v3 = type metadata accessor for Logger();
  v2[48] = v3;
  v2[49] = *(_QWORD *)(v3 - 8);
  v2[50] = swift_task_alloc();
  v2[51] = swift_task_alloc();
  v2[52] = swift_task_alloc();
  v2[53] = swift_task_alloc();
  v2[54] = swift_task_alloc();
  v2[31] = a1;
  v2[32] = a2;
  return swift_task_switch();
}

uint64_t getPreferredUnit(for:store:)()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t, uint64_t, uint64_t);
  id v3;
  _QWORD *v4;
  void (*v5)(uint64_t, uint64_t);
  id v6;
  _QWORD *v7;
  id v8;
  _QWORD *v10;
  id v11;
  Class isa;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  uint8_t *buf;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  uint32_t size;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  NSObject *v33;
  os_log_type_t v34;
  void *v35;
  uint8_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t (*v39)(uint64_t, uint64_t, uint64_t);
  uint64_t v40;

  v1 = *(_QWORD *)(v0 + 432);
  v22 = *(_QWORD *)(v0 + 392);
  v24 = *(_QWORD *)(v0 + 384);
  v25 = *(id *)(v0 + 368);
  *(_QWORD *)(v0 + 240) = v0;
  v23 = Logger.wellnessIntents.unsafeMutableAddressor();
  swift_beginAccess();
  v2 = *(void (**)(uint64_t, uint64_t, uint64_t))(v22 + 16);
  *(_QWORD *)(v0 + 440) = v2;
  v2(v1, v23, v24);
  swift_endAccess();
  v3 = v25;
  v27 = swift_allocObject();
  *(_QWORD *)(v27 + 16) = v25;
  v33 = Logger.logObject.getter();
  v34 = static os_log_type_t.debug.getter();
  *(_QWORD *)(v0 + 264) = 12;
  *(_QWORD *)(v0 + 448) = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  *(_QWORD *)(v0 + 456) = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  *(_QWORD *)(v0 + 464) = lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  size = *(_DWORD *)(v0 + 536);
  v29 = swift_allocObject();
  *(_BYTE *)(v29 + 16) = 64;
  v30 = swift_allocObject();
  *(_BYTE *)(v30 + 16) = 8;
  v28 = swift_allocObject();
  *(_QWORD *)(v28 + 16) = partial apply for implicit closure #3 in LogQuantityIntentHandler.handle(intent:);
  *(_QWORD *)(v28 + 24) = v27;
  v31 = swift_allocObject();
  *(_QWORD *)(v31 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:);
  *(_QWORD *)(v31 + 24) = v28;
  *(_QWORD *)(v0 + 472) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
  _allocateUninitializedArray<A>(_:)();
  v32 = v4;
  swift_retain();
  *v32 = partial apply for closure #1 in OSLogArguments.append(_:);
  v32[1] = v29;
  swift_retain();
  v32[2] = partial apply for closure #1 in OSLogArguments.append(_:);
  v32[3] = v30;
  swift_retain();
  v32[4] = partial apply for closure #1 in OSLogArguments.append(_:);
  v32[5] = v31;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(v33, v34))
  {
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    v19 = createStorage<A>(capacity:type:)(1);
    v20 = createStorage<A>(capacity:type:)(0);
    v36 = buf;
    v37 = v19;
    v38 = v20;
    serialize(_:at:)(2, &v36);
    serialize(_:at:)(1, &v36);
    v39 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v40 = v29;
    closure #1 in osLogInternal(_:log:type:)(&v39, (uint64_t)&v36, (uint64_t)&v37, (uint64_t)&v38);
    v39 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v40 = v30;
    closure #1 in osLogInternal(_:log:type:)(&v39, (uint64_t)&v36, (uint64_t)&v37, (uint64_t)&v38);
    v39 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v40 = v31;
    closure #1 in osLogInternal(_:log:type:)(&v39, (uint64_t)&v36, (uint64_t)&v37, (uint64_t)&v38);
    _os_log_impl(&dword_24749F000, v33, v34, "Getting preferred unit for quantityType: %@", buf, size);
    destroyStorage<A>(_:count:)(v19, 1, v17);
    destroyStorage<A>(_:count:)(v20, 0, MEMORY[0x24BEE4AD8] + 8);
    MEMORY[0x24957D398](buf, MEMORY[0x24BEE4260]);
    swift_release();
    swift_release();
    swift_release();
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
  }
  *(_QWORD *)(v21 + 480) = 0;
  v14 = *(_QWORD *)(v21 + 432);
  v13 = *(_QWORD *)(v21 + 392);
  v15 = *(_QWORD *)(v21 + 384);
  v16 = *(id *)(v21 + 376);

  v5 = *(void (**)(uint64_t, uint64_t))(v13 + 8);
  *(_QWORD *)(v21 + 488) = v5;
  v5(v14, v15);
  v6 = v16;
  *(_QWORD *)(v21 + 272) = v16;
  if (*(_QWORD *)(v21 + 272))
  {
    v35 = *(void **)(v21 + 272);
  }
  else
  {
    type metadata accessor for HKHealthStore();
    v35 = (void *)NSDateFormatter.__allocating_init()();
    outlined destroy of HealthKitPersistor((id *)(v21 + 272));
  }
  v11 = *(id *)(v21 + 368);
  *(_QWORD *)(v21 + 496) = v35;
  *(_QWORD *)(v21 + 280) = v35;
  *(_QWORD *)(v21 + 504) = type metadata accessor for HKQuantityType();
  _allocateUninitializedArray<A>(_:)();
  v10 = v7;
  v8 = v11;
  *v10 = v11;
  _finalizeUninitializedArray<A>(_:)();
  *(_QWORD *)(v21 + 512) = lazy protocol witness table accessor for type HKQuantityType and conformance NSObject();
  Set.init(arrayLiteral:)();
  isa = Set._bridgeToObjectiveC()().super.isa;
  *(_QWORD *)(v21 + 520) = isa;
  swift_bridgeObjectRelease();
  *(_QWORD *)(v21 + 16) = *(_QWORD *)(v21 + 240);
  *(_QWORD *)(v21 + 56) = v21 + 288;
  *(_QWORD *)(v21 + 24) = getPreferredUnit(for:store:);
  *(_QWORD *)(v21 + 112) = swift_continuation_init();
  *(_QWORD *)(v21 + 80) = MEMORY[0x24BDAC760];
  *(_DWORD *)(v21 + 88) = 0x40000000;
  *(_DWORD *)(v21 + 92) = 0;
  *(_QWORD *)(v21 + 96) = @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned NSDictionary, @unowned NSError?) -> () with result type [HKQuantityType : HKUnit];
  *(_QWORD *)(v21 + 104) = &block_descriptor_1;
  objc_msgSend(v35, sel_preferredUnitsForQuantityTypes_completion_, isa, v21 + 80);
  return __swift_continuation_await_point(v21 + 16);
}

{
  _QWORD *v0;
  _QWORD *v1;

  v1 = (_QWORD *)*v0;
  v1[30] = *v0;
  v1[66] = v1[6];
  return swift_task_switch();
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  id v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t result;
  id v7;
  unint64_t v8;
  uint64_t v9;
  id v10;
  id v11;
  _QWORD *v12;
  uint64_t v13;
  id v14;
  _QWORD *v15;
  uint64_t v16;
  id v17;
  id v18;
  id v19;
  _QWORD *v20;
  uint64_t v21;
  void (*v22)(uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint8_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(uint64_t, uint64_t);
  id v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(uint64_t, uint64_t, uint64_t);
  id v35;
  id v36;
  uint32_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  NSObject *v50;
  os_log_type_t v51;
  uint64_t v52;
  uint8_t *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void (*v58)(uint64_t, uint64_t, uint64_t);
  id v59;
  uint64_t v60;
  uint32_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  NSObject *log;
  os_log_type_t v74;
  uint64_t v75;
  void (*v76)(uint64_t, uint64_t);
  id v77;
  uint64_t v78;
  uint64_t v79;
  uint8_t *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  void (*v85)(uint64_t, uint64_t, uint64_t);
  id v86;
  uint32_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  _QWORD *v98;
  NSObject *oslog;
  os_log_type_t v100;
  uint64_t v101;
  uint64_t v102;
  void (*v103)(uint64_t, uint64_t);
  id v104;
  uint64_t v105;
  uint64_t v106;
  void *v107;
  uint64_t v108;
  uint64_t v109;
  uint8_t *buf;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  void (*v116)(uint64_t, uint64_t, uint64_t);
  uint64_t v117;
  uint64_t v118;
  id v119;
  uint32_t size;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  _QWORD *v131;
  NSObject *v132;
  os_log_type_t v133;
  uint8_t *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t (*v137)(uint64_t, uint64_t, uint64_t);
  uint64_t v138;
  uint8_t *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t (*v142)(uint64_t, uint64_t, uint64_t);
  uint64_t v143;
  uint8_t *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t (*v147)(uint64_t, uint64_t, uint64_t);
  uint64_t v148;
  uint8_t *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t (*v152)(uint64_t, uint64_t, uint64_t);
  uint64_t v153;

  v1 = *(void **)(v0 + 520);
  v116 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 440);
  v2 = *(_QWORD *)(v0 + 424);
  v115 = *(_QWORD *)(v0 + 384);
  v119 = *(id *)(v0 + 368);
  *(_QWORD *)(v0 + 240) = v0;
  v117 = *(_QWORD *)(v0 + 288);
  *(_QWORD *)(v0 + 312) = v117;

  v114 = Logger.wellnessIntents.unsafeMutableAddressor();
  swift_beginAccess();
  v116(v2, v114, v115);
  swift_endAccess();
  swift_bridgeObjectRetain();
  v118 = swift_allocObject();
  *(_QWORD *)(v118 + 16) = v117;
  swift_retain();
  v121 = swift_allocObject();
  *(_QWORD *)(v121 + 16) = partial apply for implicit closure #3 in getPreferredUnit(for:store:);
  *(_QWORD *)(v121 + 24) = v118;
  swift_release();
  v3 = v119;
  v123 = swift_allocObject();
  *(_QWORD *)(v123 + 16) = v119;
  v132 = Logger.logObject.getter();
  v133 = static os_log_type_t.debug.getter();
  *(_QWORD *)(v0 + 320) = 22;
  UnsignedInteger<>.init<A>(_:)();
  size = *(_DWORD *)(v0 + 544);
  v125 = swift_allocObject();
  *(_BYTE *)(v125 + 16) = 32;
  v126 = swift_allocObject();
  *(_BYTE *)(v126 + 16) = 8;
  v122 = swift_allocObject();
  *(_QWORD *)(v122 + 16) = _s2os18OSLogInterpolationV06appendC0_5align7privacyyxyXA_AA0B15StringAlignmentVAA0B7PrivacyVts06CustomG11ConvertibleRzlFSSycfu_TA_0;
  *(_QWORD *)(v122 + 24) = v121;
  v127 = swift_allocObject();
  *(_QWORD *)(v127 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:);
  *(_QWORD *)(v127 + 24) = v122;
  v128 = swift_allocObject();
  *(_BYTE *)(v128 + 16) = 64;
  v129 = swift_allocObject();
  *(_BYTE *)(v129 + 16) = 8;
  v124 = swift_allocObject();
  *(_QWORD *)(v124 + 16) = partial apply for implicit closure #3 in LogQuantityIntentHandler.handle(intent:);
  *(_QWORD *)(v124 + 24) = v123;
  v130 = swift_allocObject();
  *(_QWORD *)(v130 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:);
  *(_QWORD *)(v130 + 24) = v124;
  _allocateUninitializedArray<A>(_:)();
  v131 = v4;
  swift_retain();
  *v131 = partial apply for closure #1 in OSLogArguments.append(_:);
  v131[1] = v125;
  swift_retain();
  v131[2] = partial apply for closure #1 in OSLogArguments.append(_:);
  v131[3] = v126;
  swift_retain();
  v131[4] = partial apply for closure #1 in OSLogArguments.append(_:);
  v131[5] = v127;
  swift_retain();
  v131[6] = partial apply for closure #1 in OSLogArguments.append(_:);
  v131[7] = v128;
  swift_retain();
  v131[8] = partial apply for closure #1 in OSLogArguments.append(_:);
  v131[9] = v129;
  swift_retain();
  v131[10] = partial apply for closure #1 in OSLogArguments.append(_:);
  v131[11] = v130;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(v132, v133))
  {
    v5 = *(_QWORD *)(v113 + 480);
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    v109 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    v111 = createStorage<A>(capacity:type:)(1);
    v112 = createStorage<A>(capacity:type:)(1);
    v149 = buf;
    v150 = v111;
    v151 = v112;
    serialize(_:at:)(2, &v149);
    serialize(_:at:)(2, &v149);
    v152 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v153 = v125;
    result = closure #1 in osLogInternal(_:log:type:)(&v152, (uint64_t)&v149, (uint64_t)&v150, (uint64_t)&v151);
    if (v5)
      return result;
    v152 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v153 = v126;
    closure #1 in osLogInternal(_:log:type:)(&v152, (uint64_t)&v149, (uint64_t)&v150, (uint64_t)&v151);
    v152 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v153 = v127;
    closure #1 in osLogInternal(_:log:type:)(&v152, (uint64_t)&v149, (uint64_t)&v150, (uint64_t)&v151);
    v152 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v153 = v128;
    closure #1 in osLogInternal(_:log:type:)(&v152, (uint64_t)&v149, (uint64_t)&v150, (uint64_t)&v151);
    v152 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v153 = v129;
    closure #1 in osLogInternal(_:log:type:)(&v152, (uint64_t)&v149, (uint64_t)&v150, (uint64_t)&v151);
    v152 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v153 = v130;
    closure #1 in osLogInternal(_:log:type:)(&v152, (uint64_t)&v149, (uint64_t)&v150, (uint64_t)&v151);
    _os_log_impl(&dword_24749F000, v132, v133, "Received preferredUnits=%s for quantityType=%@", buf, size);
    destroyStorage<A>(_:count:)(v111, 1, v109);
    destroyStorage<A>(_:count:)(v112, 1, MEMORY[0x24BEE4AD8] + 8);
    MEMORY[0x24957D398](buf, MEMORY[0x24BEE4260]);
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    v108 = 0;
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    v108 = *(_QWORD *)(v113 + 480);
  }
  v106 = *(_QWORD *)(v113 + 512);
  v105 = *(_QWORD *)(v113 + 504);
  v103 = *(void (**)(uint64_t, uint64_t))(v113 + 488);
  v101 = *(_QWORD *)(v113 + 424);
  v102 = *(_QWORD *)(v113 + 384);
  v104 = *(id *)(v113 + 368);

  v103(v101, v102);
  v7 = v104;
  *(_QWORD *)(v113 + 336) = v104;
  v8 = type metadata accessor for HKUnit();
  MEMORY[0x24957CF6C](v113 + 336, v117, v105, v8, v106);

  v107 = *(void **)(v113 + 328);
  if (v107)
  {
    v85 = *(void (**)(uint64_t, uint64_t, uint64_t))(v113 + 440);
    v9 = *(_QWORD *)(v113 + 416);
    v84 = *(_QWORD *)(v113 + 384);
    v86 = *(id *)(v113 + 368);
    *(_QWORD *)(v113 + 352) = v107;
    v83 = Logger.wellnessIntents.unsafeMutableAddressor();
    swift_beginAccess();
    v85(v9, v83, v84);
    swift_endAccess();
    v10 = v107;
    v88 = swift_allocObject();
    *(_QWORD *)(v88 + 16) = v107;
    v11 = v86;
    v90 = swift_allocObject();
    *(_QWORD *)(v90 + 16) = v86;
    oslog = Logger.logObject.getter();
    v100 = static os_log_type_t.debug.getter();
    *(_QWORD *)(v113 + 360) = 22;
    UnsignedInteger<>.init<A>(_:)();
    v87 = *(_DWORD *)(v113 + 552);
    v92 = swift_allocObject();
    *(_BYTE *)(v92 + 16) = 64;
    v93 = swift_allocObject();
    *(_BYTE *)(v93 + 16) = 8;
    v89 = swift_allocObject();
    *(_QWORD *)(v89 + 16) = partial apply for implicit closure #3 in LogQuantityIntentHandler.handle(intent:);
    *(_QWORD *)(v89 + 24) = v88;
    v94 = swift_allocObject();
    *(_QWORD *)(v94 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:);
    *(_QWORD *)(v94 + 24) = v89;
    v95 = swift_allocObject();
    *(_BYTE *)(v95 + 16) = 64;
    v96 = swift_allocObject();
    *(_BYTE *)(v96 + 16) = 8;
    v91 = swift_allocObject();
    *(_QWORD *)(v91 + 16) = partial apply for implicit closure #3 in LogQuantityIntentHandler.handle(intent:);
    *(_QWORD *)(v91 + 24) = v90;
    v97 = swift_allocObject();
    *(_QWORD *)(v97 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:);
    *(_QWORD *)(v97 + 24) = v91;
    _allocateUninitializedArray<A>(_:)();
    v98 = v12;
    swift_retain();
    *v98 = partial apply for closure #1 in OSLogArguments.append(_:);
    v98[1] = v92;
    swift_retain();
    v98[2] = partial apply for closure #1 in OSLogArguments.append(_:);
    v98[3] = v93;
    swift_retain();
    v98[4] = partial apply for closure #1 in OSLogArguments.append(_:);
    v98[5] = v94;
    swift_retain();
    v98[6] = partial apply for closure #1 in OSLogArguments.append(_:);
    v98[7] = v95;
    swift_retain();
    v98[8] = partial apply for closure #1 in OSLogArguments.append(_:);
    v98[9] = v96;
    swift_retain();
    v98[10] = partial apply for closure #1 in OSLogArguments.append(_:);
    v98[11] = v97;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (!os_log_type_enabled(oslog, v100))
    {
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      goto LABEL_12;
    }
    v80 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    v79 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    v81 = createStorage<A>(capacity:type:)(2);
    v82 = createStorage<A>(capacity:type:)(0);
    v144 = v80;
    v145 = v81;
    v146 = v82;
    serialize(_:at:)(2, &v144);
    serialize(_:at:)(2, &v144);
    v147 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v148 = v92;
    result = closure #1 in osLogInternal(_:log:type:)(&v147, (uint64_t)&v144, (uint64_t)&v145, (uint64_t)&v146);
    if (!v108)
    {
      v147 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v148 = v93;
      closure #1 in osLogInternal(_:log:type:)(&v147, (uint64_t)&v144, (uint64_t)&v145, (uint64_t)&v146);
      v147 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v148 = v94;
      closure #1 in osLogInternal(_:log:type:)(&v147, (uint64_t)&v144, (uint64_t)&v145, (uint64_t)&v146);
      v147 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v148 = v95;
      closure #1 in osLogInternal(_:log:type:)(&v147, (uint64_t)&v144, (uint64_t)&v145, (uint64_t)&v146);
      v147 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v148 = v96;
      closure #1 in osLogInternal(_:log:type:)(&v147, (uint64_t)&v144, (uint64_t)&v145, (uint64_t)&v146);
      v147 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v148 = v97;
      closure #1 in osLogInternal(_:log:type:)(&v147, (uint64_t)&v144, (uint64_t)&v145, (uint64_t)&v146);
      _os_log_impl(&dword_24749F000, oslog, v100, "Retrieved preferred unit=%@ for quantityType=%@", v80, v87);
      destroyStorage<A>(_:count:)(v81, 2, v79);
      destroyStorage<A>(_:count:)(v82, 0, MEMORY[0x24BEE4AD8] + 8);
      MEMORY[0x24957D398](v80, MEMORY[0x24BEE4260]);
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
LABEL_12:
      v77 = *(id *)(v113 + 496);
      v76 = *(void (**)(uint64_t, uint64_t))(v113 + 488);
      v78 = *(_QWORD *)(v113 + 416);
      v75 = *(_QWORD *)(v113 + 384);

      v76(v78, v75);
      swift_bridgeObjectRelease();

      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      return (*(uint64_t (**)(void *))(*(_QWORD *)(v113 + 240) + 8))(v107);
    }
  }
  else
  {
    v58 = *(void (**)(uint64_t, uint64_t, uint64_t))(v113 + 440);
    v13 = *(_QWORD *)(v113 + 408);
    v57 = *(_QWORD *)(v113 + 384);
    v59 = *(id *)(v113 + 368);
    v56 = Logger.wellnessIntents.unsafeMutableAddressor();
    swift_beginAccess();
    v58(v13, v56, v57);
    swift_endAccess();
    v14 = v59;
    v62 = swift_allocObject();
    *(_QWORD *)(v62 + 16) = v59;
    swift_bridgeObjectRetain();
    v60 = swift_allocObject();
    *(_QWORD *)(v60 + 16) = v117;
    swift_retain();
    v64 = swift_allocObject();
    *(_QWORD *)(v64 + 16) = partial apply for implicit closure #3 in getPreferredUnit(for:store:);
    *(_QWORD *)(v64 + 24) = v60;
    swift_release();
    log = Logger.logObject.getter();
    v74 = static os_log_type_t.error.getter();
    *(_QWORD *)(v113 + 344) = 22;
    UnsignedInteger<>.init<A>(_:)();
    v61 = *(_DWORD *)(v113 + 548);
    v66 = swift_allocObject();
    *(_BYTE *)(v66 + 16) = 64;
    v67 = swift_allocObject();
    *(_BYTE *)(v67 + 16) = 8;
    v63 = swift_allocObject();
    *(_QWORD *)(v63 + 16) = partial apply for implicit closure #3 in LogQuantityIntentHandler.handle(intent:);
    *(_QWORD *)(v63 + 24) = v62;
    v68 = swift_allocObject();
    *(_QWORD *)(v68 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:);
    *(_QWORD *)(v68 + 24) = v63;
    v69 = swift_allocObject();
    *(_BYTE *)(v69 + 16) = 32;
    v70 = swift_allocObject();
    *(_BYTE *)(v70 + 16) = 8;
    v65 = swift_allocObject();
    *(_QWORD *)(v65 + 16) = _s2os18OSLogInterpolationV06appendC0_5align7privacyyxyXA_AA0B15StringAlignmentVAA0B7PrivacyVts06CustomG11ConvertibleRzlFSSycfu_TA_0;
    *(_QWORD *)(v65 + 24) = v64;
    v71 = swift_allocObject();
    *(_QWORD *)(v71 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:);
    *(_QWORD *)(v71 + 24) = v65;
    _allocateUninitializedArray<A>(_:)();
    v72 = v15;
    swift_retain();
    *v72 = partial apply for closure #1 in OSLogArguments.append(_:);
    v72[1] = v66;
    swift_retain();
    v72[2] = partial apply for closure #1 in OSLogArguments.append(_:);
    v72[3] = v67;
    swift_retain();
    v72[4] = partial apply for closure #1 in OSLogArguments.append(_:);
    v72[5] = v68;
    swift_retain();
    v72[6] = partial apply for closure #1 in OSLogArguments.append(_:);
    v72[7] = v69;
    swift_retain();
    v72[8] = partial apply for closure #1 in OSLogArguments.append(_:);
    v72[9] = v70;
    swift_retain();
    v72[10] = partial apply for closure #1 in OSLogArguments.append(_:);
    v72[11] = v71;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(log, v74))
    {
      v53 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      v52 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      v54 = createStorage<A>(capacity:type:)(1);
      v55 = createStorage<A>(capacity:type:)(1);
      v139 = v53;
      v140 = v54;
      v141 = v55;
      serialize(_:at:)(2, &v139);
      serialize(_:at:)(2, &v139);
      v142 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v143 = v66;
      result = closure #1 in osLogInternal(_:log:type:)(&v142, (uint64_t)&v139, (uint64_t)&v140, (uint64_t)&v141);
      if (v108)
        return result;
      v142 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v143 = v67;
      closure #1 in osLogInternal(_:log:type:)(&v142, (uint64_t)&v139, (uint64_t)&v140, (uint64_t)&v141);
      v142 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v143 = v68;
      closure #1 in osLogInternal(_:log:type:)(&v142, (uint64_t)&v139, (uint64_t)&v140, (uint64_t)&v141);
      v142 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v143 = v69;
      closure #1 in osLogInternal(_:log:type:)(&v142, (uint64_t)&v139, (uint64_t)&v140, (uint64_t)&v141);
      v142 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v143 = v70;
      closure #1 in osLogInternal(_:log:type:)(&v142, (uint64_t)&v139, (uint64_t)&v140, (uint64_t)&v141);
      v142 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v143 = v71;
      closure #1 in osLogInternal(_:log:type:)(&v142, (uint64_t)&v139, (uint64_t)&v140, (uint64_t)&v141);
      _os_log_impl(&dword_24749F000, log, v74, "Failed to find quantityType=%@ in preferredUnits=%s", v53, v61);
      destroyStorage<A>(_:count:)(v54, 1, v52);
      destroyStorage<A>(_:count:)(v55, 1, MEMORY[0x24BEE4AD8] + 8);
      MEMORY[0x24957D398](v53, MEMORY[0x24BEE4260]);
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
    }
    v31 = *(id *)(v113 + 496);
    v30 = *(void (**)(uint64_t, uint64_t))(v113 + 488);
    v28 = *(_QWORD *)(v113 + 408);
    v29 = *(_QWORD *)(v113 + 384);

    v30(v28, v29);
    lazy protocol witness table accessor for type HealthKitLocalizationError and conformance HealthKitLocalizationError();
    v36 = (id)swift_allocError();
    swift_willThrow();
    swift_bridgeObjectRelease();

    v34 = *(void (**)(uint64_t, uint64_t, uint64_t))(v113 + 440);
    v16 = *(_QWORD *)(v113 + 400);
    v33 = *(_QWORD *)(v113 + 384);
    v35 = *(id *)(v113 + 368);
    v17 = v36;
    *(_QWORD *)(v113 + 296) = v36;
    v32 = Logger.wellnessIntents.unsafeMutableAddressor();
    swift_beginAccess();
    v34(v16, v32, v33);
    swift_endAccess();
    v18 = v35;
    v38 = swift_allocObject();
    *(_QWORD *)(v38 + 16) = v35;
    v19 = v36;
    v40 = swift_allocObject();
    *(_QWORD *)(v40 + 16) = v36;
    default argument 2 of OSLogInterpolation.appendInterpolation(_:privacy:attributes:)();
    swift_bridgeObjectRelease();
    v50 = Logger.logObject.getter();
    v51 = static os_log_type_t.error.getter();
    *(_QWORD *)(v113 + 304) = 22;
    UnsignedInteger<>.init<A>(_:)();
    v37 = *(_DWORD *)(v113 + 540);
    v43 = swift_allocObject();
    *(_BYTE *)(v43 + 16) = 64;
    v44 = swift_allocObject();
    *(_BYTE *)(v44 + 16) = 8;
    v39 = swift_allocObject();
    *(_QWORD *)(v39 + 16) = partial apply for implicit closure #3 in LogQuantityIntentHandler.handle(intent:);
    *(_QWORD *)(v39 + 24) = v38;
    v45 = swift_allocObject();
    *(_QWORD *)(v45 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:);
    *(_QWORD *)(v45 + 24) = v39;
    v46 = swift_allocObject();
    *(_BYTE *)(v46 + 16) = 64;
    v47 = swift_allocObject();
    *(_BYTE *)(v47 + 16) = 8;
    v41 = swift_allocObject();
    *(_QWORD *)(v41 + 16) = partial apply for implicit closure #10 in getPreferredUnit(for:store:);
    *(_QWORD *)(v41 + 24) = v40;
    v42 = swift_allocObject();
    *(_QWORD *)(v42 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:attributes:);
    *(_QWORD *)(v42 + 24) = v41;
    v48 = swift_allocObject();
    *(_QWORD *)(v48 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:);
    *(_QWORD *)(v48 + 24) = v42;
    _allocateUninitializedArray<A>(_:)();
    v49 = v20;
    swift_retain();
    *v49 = partial apply for closure #1 in OSLogArguments.append(_:);
    v49[1] = v43;
    swift_retain();
    v49[2] = partial apply for closure #1 in OSLogArguments.append(_:);
    v49[3] = v44;
    swift_retain();
    v49[4] = partial apply for closure #1 in OSLogArguments.append(_:);
    v49[5] = v45;
    swift_retain();
    v49[6] = partial apply for closure #1 in OSLogArguments.append(_:);
    v49[7] = v46;
    swift_retain();
    v49[8] = partial apply for closure #1 in OSLogArguments.append(_:);
    v49[9] = v47;
    swift_retain();
    v49[10] = partial apply for closure #1 in OSLogArguments.append(_:);
    v49[11] = v48;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(v50, v51))
    {
      v25 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      v26 = createStorage<A>(capacity:type:)(2);
      v27 = createStorage<A>(capacity:type:)(0);
      v134 = v25;
      v135 = v26;
      v136 = v27;
      serialize(_:at:)(2, &v134);
      serialize(_:at:)(2, &v134);
      v137 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v138 = v43;
      closure #1 in osLogInternal(_:log:type:)(&v137, (uint64_t)&v134, (uint64_t)&v135, (uint64_t)&v136);
      v137 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v138 = v44;
      closure #1 in osLogInternal(_:log:type:)(&v137, (uint64_t)&v134, (uint64_t)&v135, (uint64_t)&v136);
      v137 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v138 = v45;
      closure #1 in osLogInternal(_:log:type:)(&v137, (uint64_t)&v134, (uint64_t)&v135, (uint64_t)&v136);
      v137 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v138 = v46;
      closure #1 in osLogInternal(_:log:type:)(&v137, (uint64_t)&v134, (uint64_t)&v135, (uint64_t)&v136);
      v137 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v138 = v47;
      closure #1 in osLogInternal(_:log:type:)(&v137, (uint64_t)&v134, (uint64_t)&v135, (uint64_t)&v136);
      v137 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v138 = v48;
      closure #1 in osLogInternal(_:log:type:)(&v137, (uint64_t)&v134, (uint64_t)&v135, (uint64_t)&v136);
      _os_log_impl(&dword_24749F000, v50, v51, "Failed to fetch preferredUnits for quantityType=%@ with error: %@", v25, v37);
      destroyStorage<A>(_:count:)(v26, 2, v24);
      destroyStorage<A>(_:count:)(v27, 0, MEMORY[0x24BEE4AD8] + 8);
      MEMORY[0x24957D398](v25, MEMORY[0x24BEE4260]);
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
    }
    v22 = *(void (**)(uint64_t, uint64_t))(v113 + 488);
    v23 = *(_QWORD *)(v113 + 400);
    v21 = *(_QWORD *)(v113 + 384);

    v22(v23, v21);
    swift_willThrow();

    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)())(*(_QWORD *)(v113 + 240) + 8))();
  }
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  id v2;
  id v3;
  id v4;
  _QWORD *v5;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint8_t *buf;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  id v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t, uint64_t);
  id v20;
  id v21;
  uint32_t size;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  NSObject *oslog;
  os_log_type_t v36;
  uint8_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t (*v40)(uint64_t, uint64_t, uint64_t);
  uint64_t v41;

  v15 = *(id *)(v0 + 520);
  v16 = *(id *)(v0 + 496);
  *(_QWORD *)(v0 + 240) = v0;
  swift_willThrow();

  v21 = *(id *)(v0 + 528);
  v19 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 440);
  v1 = *(_QWORD *)(v0 + 400);
  v18 = *(_QWORD *)(v0 + 384);
  v20 = *(id *)(v0 + 368);
  v2 = v21;
  *(_QWORD *)(v0 + 296) = v21;
  v17 = Logger.wellnessIntents.unsafeMutableAddressor();
  swift_beginAccess();
  v19(v1, v17, v18);
  swift_endAccess();
  v3 = v20;
  v23 = swift_allocObject();
  *(_QWORD *)(v23 + 16) = v20;
  v4 = v21;
  v25 = swift_allocObject();
  *(_QWORD *)(v25 + 16) = v21;
  default argument 2 of OSLogInterpolation.appendInterpolation(_:privacy:attributes:)();
  swift_bridgeObjectRelease();
  oslog = Logger.logObject.getter();
  v36 = static os_log_type_t.error.getter();
  *(_QWORD *)(v0 + 304) = 22;
  UnsignedInteger<>.init<A>(_:)();
  size = *(_DWORD *)(v0 + 540);
  v28 = swift_allocObject();
  *(_BYTE *)(v28 + 16) = 64;
  v29 = swift_allocObject();
  *(_BYTE *)(v29 + 16) = 8;
  v24 = swift_allocObject();
  *(_QWORD *)(v24 + 16) = partial apply for implicit closure #3 in LogQuantityIntentHandler.handle(intent:);
  *(_QWORD *)(v24 + 24) = v23;
  v30 = swift_allocObject();
  *(_QWORD *)(v30 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:);
  *(_QWORD *)(v30 + 24) = v24;
  v31 = swift_allocObject();
  *(_BYTE *)(v31 + 16) = 64;
  v32 = swift_allocObject();
  *(_BYTE *)(v32 + 16) = 8;
  v26 = swift_allocObject();
  *(_QWORD *)(v26 + 16) = partial apply for implicit closure #10 in getPreferredUnit(for:store:);
  *(_QWORD *)(v26 + 24) = v25;
  v27 = swift_allocObject();
  *(_QWORD *)(v27 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:attributes:);
  *(_QWORD *)(v27 + 24) = v26;
  v33 = swift_allocObject();
  *(_QWORD *)(v33 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:);
  *(_QWORD *)(v33 + 24) = v27;
  _allocateUninitializedArray<A>(_:)();
  v34 = v5;
  swift_retain();
  *v34 = partial apply for closure #1 in OSLogArguments.append(_:);
  v34[1] = v28;
  swift_retain();
  v34[2] = partial apply for closure #1 in OSLogArguments.append(_:);
  v34[3] = v29;
  swift_retain();
  v34[4] = partial apply for closure #1 in OSLogArguments.append(_:);
  v34[5] = v30;
  swift_retain();
  v34[6] = partial apply for closure #1 in OSLogArguments.append(_:);
  v34[7] = v31;
  swift_retain();
  v34[8] = partial apply for closure #1 in OSLogArguments.append(_:);
  v34[9] = v32;
  swift_retain();
  v34[10] = partial apply for closure #1 in OSLogArguments.append(_:);
  v34[11] = v33;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(oslog, v36))
  {
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    v12 = createStorage<A>(capacity:type:)(2);
    v13 = createStorage<A>(capacity:type:)(0);
    v37 = buf;
    v38 = v12;
    v39 = v13;
    serialize(_:at:)(2, &v37);
    serialize(_:at:)(2, &v37);
    v40 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v41 = v28;
    closure #1 in osLogInternal(_:log:type:)(&v40, (uint64_t)&v37, (uint64_t)&v38, (uint64_t)&v39);
    v40 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v41 = v29;
    closure #1 in osLogInternal(_:log:type:)(&v40, (uint64_t)&v37, (uint64_t)&v38, (uint64_t)&v39);
    v40 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v41 = v30;
    closure #1 in osLogInternal(_:log:type:)(&v40, (uint64_t)&v37, (uint64_t)&v38, (uint64_t)&v39);
    v40 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v41 = v31;
    closure #1 in osLogInternal(_:log:type:)(&v40, (uint64_t)&v37, (uint64_t)&v38, (uint64_t)&v39);
    v40 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v41 = v32;
    closure #1 in osLogInternal(_:log:type:)(&v40, (uint64_t)&v37, (uint64_t)&v38, (uint64_t)&v39);
    v40 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v41 = v33;
    closure #1 in osLogInternal(_:log:type:)(&v40, (uint64_t)&v37, (uint64_t)&v38, (uint64_t)&v39);
    _os_log_impl(&dword_24749F000, oslog, v36, "Failed to fetch preferredUnits for quantityType=%@ with error: %@", buf, size);
    destroyStorage<A>(_:count:)(v12, 2, v10);
    destroyStorage<A>(_:count:)(v13, 0, MEMORY[0x24BEE4AD8] + 8);
    MEMORY[0x24957D398](buf, MEMORY[0x24BEE4260]);
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
  }
  v8 = (void (*)(uint64_t, uint64_t))v14[61];
  v9 = v14[50];
  v7 = v14[48];

  v8(v9, v7);
  swift_willThrow();

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)())(v14[30] + 8))();
}

Swift::String __swiftcall localizedUnitName(for:value:store:)(HKUnit a1, Swift::Double_optional value, HKHealthStore_optional store)
{
  id v3;
  id v4;
  void *v5;
  void *v6;
  uint64_t v7;
  void *v8;
  Swift::String result;
  id v10;
  uint64_t v11;
  void *v12;
  Class v13;
  id v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  void *v18;
  id v19;
  id v20;
  Swift::Double v22;
  char isa;
  void *v24;
  id v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  Class v30;

  v22 = *(double *)&value.is_nil;
  isa = (char)store.value.super.isa;
  v24 = *(void **)&store.is_nil;
  v30 = a1.super.isa;
  v28 = *(_QWORD *)&value.is_nil;
  v29 = (uint64_t)store.value.super.isa & 1;
  v27 = *(_QWORD *)&store.is_nil;
  v3 = *(id *)&store.is_nil;
  v25 = v24;
  if (v24)
  {
    v26 = v25;
  }
  else
  {
    type metadata accessor for HKHealthStore();
    v26 = (id)NSDateFormatter.__allocating_init()();
    outlined destroy of HealthKitPersistor(&v25);
  }
  v19 = v26;
  type metadata accessor for HKUnitPreferenceController();
  v4 = v19;
  v20 = HKUnitPreferenceController.__allocating_init(healthStore:)(v19);
  if ((isa & 1) != 0)
  {
    v10 = objc_msgSend(v20, sel_localizedDisplayNameForUnit_value_, a1.super.isa, 0);
    v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v12 = v6;

    v17 = v11;
    v18 = v12;
  }
  else
  {
    type metadata accessor for NSNumber();
    v13 = NSNumber.__allocating_init(value:)(v22).super.super.isa;
    v14 = objc_msgSend(v20, sel_localizedDisplayNameForUnit_value_, a1.super.isa);

    v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v16 = v5;

    v17 = v15;
    v18 = v16;
  }
  v7 = v17;
  v8 = v18;
  result._object = v8;
  result._countAndFlagsBits = v7;
  return result;
}

uint64_t localizedUnitName(for:store:)(uint64_t a1, id a2)
{
  id v2;
  id v3;
  id v5;
  id v6;
  uint64_t v7;
  id v10;
  id v11;
  id v12;
  id v13;
  uint64_t v14;

  v14 = a1;
  v13 = a2;
  v2 = a2;
  v11 = a2;
  if (a2)
  {
    v12 = v11;
  }
  else
  {
    type metadata accessor for HKHealthStore();
    v12 = (id)NSDateFormatter.__allocating_init()();
    outlined destroy of HealthKitPersistor(&v11);
  }
  v6 = v12;
  type metadata accessor for HKUnitPreferenceController();
  v3 = v6;
  v10 = HKUnitPreferenceController.__allocating_init(healthStore:)(v6);
  v5 = objc_msgSend(v10, sel_localizedDisplayNameForDisplayType_, a1);
  v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v7;
}

uint64_t default argument 2 of OSLogInterpolation.appendInterpolation(_:privacy:attributes:)()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1)._countAndFlagsBits;
}

uint64_t localizedPreferredUnitName(for:value:store:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  uint64_t v4;

  *(_QWORD *)(v4 + 96) = a4;
  *(_BYTE *)(v4 + 25) = a3;
  *(_QWORD *)(v4 + 88) = a2;
  *(_QWORD *)(v4 + 80) = a1;
  *(_QWORD *)(v4 + 32) = v4;
  *(_QWORD *)(v4 + 40) = 0;
  *(_QWORD *)(v4 + 16) = 0;
  *(_BYTE *)(v4 + 24) = 0;
  *(_QWORD *)(v4 + 48) = 0;
  *(_QWORD *)(v4 + 64) = 0;
  *(_QWORD *)(v4 + 72) = 0;
  *(_QWORD *)(v4 + 40) = a1;
  *(_QWORD *)(v4 + 16) = a2;
  *(_BYTE *)(v4 + 24) = a3 & 1;
  *(_QWORD *)(v4 + 48) = a4;
  return swift_task_switch();
}

uint64_t localizedPreferredUnitName(for:value:store:)()
{
  _QWORD *v0;
  id v1;
  id v2;
  _QWORD *v3;
  uint64_t v5;
  void *v6;
  void *v7;

  v6 = (void *)v0[12];
  v0[4] = v0;
  v1 = v6;
  v0[7] = v6;
  if (v0[7])
  {
    v7 = *(void **)(v5 + 56);
  }
  else
  {
    type metadata accessor for HKHealthStore();
    v7 = (void *)NSDateFormatter.__allocating_init()();
    outlined destroy of HealthKitPersistor((id *)(v5 + 56));
  }
  *(_QWORD *)(v5 + 104) = v7;
  *(_QWORD *)(v5 + 64) = v7;
  v2 = v7;
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v5 + 112) = v3;
  *v3 = *(_QWORD *)(v5 + 32);
  v3[1] = localizedPreferredUnitName(for:value:store:);
  return getPreferredUnit(for:store:)(*(_QWORD *)(v5 + 80), (uint64_t)v7);
}

{
  uint64_t v0;
  id v1;
  Swift::String v2;
  uint64_t value;
  char v5;
  void *fora;
  void *store;
  HKHealthStore_optional v8;
  Swift::Double_optional v9;

  fora = *(void **)(v0 + 120);
  store = *(void **)(v0 + 104);
  v5 = *(_BYTE *)(v0 + 25);
  value = *(_QWORD *)(v0 + 88);
  *(_QWORD *)(v0 + 32) = v0;
  *(_QWORD *)(v0 + 72) = fora;
  v1 = store;
  v9.is_nil = value;
  v8.is_nil = (char)store;
  v8.value.super.isa = (Class)(v5 & 1);
  v2 = localizedUnitName(for:value:store:)((HKUnit)fora, v9, v8);

  return (*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)(v0 + 32) + 8))(v2._countAndFlagsBits, v2._object);
}

{
  uint64_t v0;
  id v2;

  v2 = *(id *)(v0 + 104);
  *(_QWORD *)(v0 + 32) = v0;

  return (*(uint64_t (**)())(*(_QWORD *)(v0 + 32) + 8))();
}

uint64_t localizedPreferredUnitName(for:value:store:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v5;

  v3 = (_QWORD *)*v2;
  v3[4] = *v2;
  v3 += 4;
  v5 = v3 - 2;
  v3[11] = a1;
  v3[12] = v1;
  swift_task_dealloc();
  if (!v1)

  return swift_task_switch();
}

uint64_t static HealthKitLocalizationError.__derived_enum_equals(_:_:)()
{
  return 1;
}

uint64_t HealthKitLocalizationError.hash(into:)()
{
  return Hasher.combine<A>(_:)();
}

uint64_t HealthKitLocalizationError.hashValue.getter()
{
  lazy protocol witness table accessor for type HealthKitLocalizationError and conformance HealthKitLocalizationError();
  return _hashValue<A>(for:)();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance HealthKitLocalizationError()
{
  return static HealthKitLocalizationError.__derived_enum_equals(_:_:)() & 1;
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance HealthKitLocalizationError()
{
  return HealthKitLocalizationError.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance HealthKitLocalizationError()
{
  return HealthKitLocalizationError.hash(into:)();
}

uint64_t protocol witness for Error._domain.getter in conformance HealthKitLocalizationError()
{
  return Error._domain.getter();
}

uint64_t protocol witness for Error._code.getter in conformance HealthKitLocalizationError()
{
  return Error._code.getter();
}

uint64_t protocol witness for Error._getEmbeddedNSError() in conformance HealthKitLocalizationError()
{
  return Error._getEmbeddedNSError()();
}

uint64_t sub_2474D6810()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t implicit closure #3 in getPreferredUnit(for:store:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;

  swift_bridgeObjectRetain();
  result = a1;
  *a2 = a1;
  return result;
}

void *implicit closure #10 in getPreferredUnit(for:store:)(void *a1)
{
  id v1;

  v1 = a1;
  return a1;
}

id HKUnitPreferenceController.__allocating_init(healthStore:)(void *a1)
{
  id v1;

  v1 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  return @nonobjc HKUnitPreferenceController.init(healthStore:)(a1);
}

NSNumber __swiftcall NSNumber.__allocating_init(value:)(Swift::Double value)
{
  id v1;

  v1 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  return (NSNumber)@nonobjc NSNumber.init(value:)();
}

BOOL static HKHealthStore.Error.__derived_enum_equals(_:_:)(char a1, char a2)
{
  return ((a1 & 1) != 0) == (unint64_t)((a2 & 1) != 0);
}

uint64_t HKHealthStore.Error.hash(into:)()
{
  return Hasher.combine<A>(_:)();
}

uint64_t HKHealthStore.Error.hashValue.getter()
{
  lazy protocol witness table accessor for type HKHealthStore.Error and conformance HKHealthStore.Error();
  return _hashValue<A>(for:)();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance HKHealthStore.Error(_BYTE *a1, _BYTE *a2)
{
  return static HKHealthStore.Error.__derived_enum_equals(_:_:)(*a1 & 1, *a2 & 1);
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance HKHealthStore.Error()
{
  return HKHealthStore.Error.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance HKHealthStore.Error()
{
  return HKHealthStore.Error.hash(into:)();
}

uint64_t HKHealthStore.query(quantityType:start:end:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;
  id v6;
  _QWORD *v7;
  uint64_t v11;
  void *v12;

  v5[12] = v4;
  v5[11] = a4;
  v5[10] = a3;
  v5[9] = a2;
  v5[8] = a1;
  v5[2] = v5;
  v5[3] = 0;
  v5[4] = 0;
  v5[5] = 0;
  v5[6] = 0;
  v5[7] = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  v5[13] = swift_task_alloc();
  v5[14] = swift_task_alloc();
  v5[3] = a2;
  v5[4] = a3;
  v5[5] = a4;
  v5[6] = v12;
  v6 = v12;
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v11 + 120) = v7;
  *v7 = *(_QWORD *)(v11 + 16);
  v7[1] = HKHealthStore.query(quantityType:start:end:);
  return getPreferredUnit(for:store:)(a2, (uint64_t)v12);
}

uint64_t HKHealthStore.query(quantityType:start:end:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v5;

  v3 = (_QWORD *)*v2;
  v3[2] = *v2;
  v5 = v3 + 2;
  v3[16] = a1;
  v3[17] = v1;
  swift_task_dealloc();
  if (!v1)

  return swift_task_switch();
}

uint64_t HKHealthStore.query(quantityType:start:end:)()
{
  _QWORD *v0;
  id v1;
  id v2;
  id v3;
  _QWORD *v4;
  const void *v6;
  const void *v7;
  id v8;
  void *v9;
  void *v10;
  id v11;
  id v12;
  uint64_t v13;
  _QWORD *v14;

  v12 = (id)v0[16];
  v9 = (void *)v0[14];
  v10 = (void *)v0[13];
  v8 = (id)v0[12];
  v7 = (const void *)v0[11];
  v6 = (const void *)v0[10];
  v11 = (id)v0[9];
  v0[2] = v0;
  v0[7] = v12;
  v0[18] = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("query(quantityType:start:end:)", 0x1EuLL, 1)._object;
  v1 = v8;
  outlined init with copy of Date?(v6, v9);
  outlined init with copy of Date?(v7, v10);
  v2 = v11;
  v3 = v12;
  v14 = (_QWORD *)swift_task_alloc();
  v0[19] = v14;
  v14[2] = v8;
  v14[3] = v9;
  v14[4] = v10;
  v14[5] = v11;
  v14[6] = v12;
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v13 + 160) = v4;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Statistics<Double>?);
  *v4 = *(_QWORD *)(v13 + 16);
  v4[1] = HKHealthStore.query(quantityType:start:end:);
  return withCheckedThrowingContinuation<A>(isolation:function:_:)();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  _QWORD *v9;

  v2 = *v1;
  *(_QWORD *)(v2 + 16) = *v1;
  v9 = (_QWORD *)(v2 + 16);
  *(_QWORD *)(v2 + 168) = v0;
  swift_task_dealloc();
  if (!v0)
  {
    v8 = (void *)v9[14];
    v5 = v9[12];
    v6 = v9[11];
    v4 = (void *)v9[10];
    v7 = (void *)v9[7];
    swift_task_dealloc();

    outlined destroy of Date?(v5);
    outlined destroy of Date?(v6);

    swift_bridgeObjectRelease();
  }
  return swift_task_switch();
}

{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + 128);
  *(_QWORD *)(v0 + 16) = v0;

  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 16) + 8))();
}

{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + 96);
  *(_QWORD *)(v0 + 16) = v0;

  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 16) + 8))();
}

{
  _QWORD *v0;
  id v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  id v6;

  v6 = (id)v0[16];
  v3 = v0[14];
  v4 = v0[13];
  v2 = (id)v0[12];
  v5 = (id)v0[9];
  v0[2] = v0;
  swift_task_dealloc();

  outlined destroy of Date?(v3);
  outlined destroy of Date?(v4);

  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0[2] + 8))();
}

uint64_t closure #1 in HKHealthStore.query(quantityType:start:end:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, void *a5, void *a6)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const void *v11;
  uint64_t v12;
  uint64_t v13;
  int *v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  id v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  int *v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  id v42;
  id v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  void *v49;
  id v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  id v54;
  char *v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  id v60;
  _QWORD v62[3];
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  int *v77;
  uint64_t v78;
  id v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  char *v88;
  uint64_t v89;
  unint64_t v90;
  unint64_t v91;
  unint64_t v92;
  char *v93;
  void *v94;
  unint64_t v95;
  void *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  id v100;
  id v101;
  char *v102;
  uint64_t v103;
  char *v104;
  id v105;
  id v106;
  char *v107;
  id v108;
  uint64_t v109;
  uint64_t v110;
  const void *v111;
  uint64_t v112;
  void *v113;
  uint64_t v114;
  char *v115;

  v76 = a1;
  v105 = a2;
  v62[1] = a3;
  v62[2] = a4;
  v100 = a5;
  v94 = a6;
  v115 = 0;
  v114 = 0;
  v113 = 0;
  v112 = 0;
  v111 = 0;
  v110 = 0;
  v109 = 0;
  v108 = 0;
  v89 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<Statistics<Double>?, Error>);
  v86 = *(_QWORD *)(v89 - 8);
  v83 = *(_QWORD *)(v86 + 64);
  v62[0] = (v83 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v89);
  v88 = (char *)v62 - v62[0];
  v77 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (dateRange: DateInterval?, predicate: NSPredicate?, sortDescriptors: [NSSortDescriptor], limit: Int));
  v84 = *((_QWORD *)v77 - 1);
  v85 = *(_QWORD *)(v84 + 64);
  v63 = (v85 + 15) & 0xFFFFFFFFFFFFFFF0;
  v7 = MEMORY[0x24BDAC7A8](v77);
  v93 = (char *)v62 - v63;
  v64 = (v85 + 15) & 0xFFFFFFFFFFFFFFF0;
  v8 = MEMORY[0x24BDAC7A8](v7);
  v102 = (char *)v62 - v64;
  v65 = (v85 + 15) & 0xFFFFFFFFFFFFFFF0;
  v9 = MEMORY[0x24BDAC7A8](v8);
  v104 = (char *)v62 - v65;
  v66 = (v85 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v9);
  v107 = (char *)v62 - v66;
  v115 = (char *)v62 - v66;
  v114 = v76;
  v113 = a2;
  v112 = v10;
  v111 = v11;
  v110 = v12;
  v109 = v13;
  v67 = v14[12];
  v68 = v14[16];
  v69 = v14[20];
  v79 = (id)HKHealthStore.queryParameters(start:end:)((char *)v62 - v66, v10, v11);
  v80 = v15;
  v97 = v16;
  v17 = v79;
  v18 = v79;
  v19 = v79;
  *(_QWORD *)&v107[v67] = v79;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v20 = v69;
  v21 = v97;
  v22 = v107;
  *(_QWORD *)&v107[v68] = v80;
  *(_QWORD *)&v22[v20] = v21;
  type metadata accessor for HKSampleQuery();
  v23 = v100;
  v70 = v77[12];
  v71 = v77[16];
  v72 = v77[20];
  outlined init with copy of DateInterval?(v107, v104);
  v24 = v71;
  v25 = v72;
  v26 = v77;
  v27 = v80;
  v28 = v97;
  v29 = v102;
  v30 = v104;
  v31 = v107;
  *(_QWORD *)&v104[v70] = v79;
  *(_QWORD *)&v30[v24] = v27;
  *(_QWORD *)&v30[v25] = v28;
  v96 = *(void **)&v30[v26[12]];
  v103 = *(_QWORD *)&v30[v26[16]];
  v73 = v26[12];
  v74 = v26[16];
  v75 = v26[20];
  outlined init with copy of DateInterval?(v31, v29);
  v32 = v74;
  v33 = v75;
  v34 = v76;
  v35 = v77;
  v36 = v80;
  v37 = v86;
  v38 = v89;
  v39 = v97;
  v40 = (uint64_t)v102;
  v41 = v88;
  *(_QWORD *)&v102[v73] = v79;
  *(_QWORD *)(v40 + v32) = v36;
  *(_QWORD *)(v40 + v33) = v39;
  v101 = *(id *)(v40 + v35[12]);
  v98 = *(_QWORD *)(v40 + v35[16]);
  (*(void (**)(char *, uint64_t, uint64_t))(v37 + 16))(v41, v34, v38);
  v42 = v100;
  v43 = v105;
  v78 = v77[12];
  v81 = v77[16];
  v82 = v77[20];
  outlined init with copy of DateInterval?(v107, v93);
  v44 = v80;
  v45 = v81;
  v46 = v82;
  v47 = v93;
  v48 = v97;
  v49 = v94;
  *(_QWORD *)&v93[v78] = v79;
  *(_QWORD *)&v47[v45] = v44;
  *(_QWORD *)&v47[v46] = v48;
  v50 = v49;
  v87 = (*(unsigned __int8 *)(v86 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v86 + 80);
  v90 = (v87 + v83 + 7) & 0xFFFFFFFFFFFFFFF8;
  v91 = (v90 + 15) & 0xFFFFFFFFFFFFFFF8;
  v92 = (v91 + 8 + *(unsigned __int8 *)(v84 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v84 + 80);
  v95 = (v92 + v85 + 7) & 0xFFFFFFFFFFFFFFF8;
  v99 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v86 + 32))(v99 + v87, v88, v89);
  v51 = v91;
  v52 = v92;
  v53 = v99;
  v54 = v105;
  v55 = v93;
  *(_QWORD *)(v99 + v90) = v100;
  *(_QWORD *)(v53 + v51) = v54;
  outlined init with take of (dateRange: DateInterval?, predicate: NSPredicate?, sortDescriptors: [NSSortDescriptor], limit: Int)(v55, (char *)(v53 + v52));
  v56 = v96;
  v57 = v97;
  v58 = v98;
  v59 = v99;
  v60 = v100;
  *(_QWORD *)(v99 + v95) = v94;
  v106 = HKSampleQuery.__allocating_init(sampleType:predicate:limit:sortDescriptors:resultsHandler:)(v60, v56, v57, v58, (uint64_t)partial apply for closure #1 in closure #1 in HKHealthStore.query(quantityType:start:end:), v59);

  outlined destroy of DateInterval?((uint64_t)v102);
  swift_bridgeObjectRelease();
  outlined destroy of DateInterval?((uint64_t)v104);
  v108 = v106;
  objc_msgSend(v105, sel_executeQuery_);

  return outlined destroy of (dateRange: DateInterval?, predicate: NSPredicate?, sortDescriptors: [NSSortDescriptor], limit: Int)((uint64_t)v107);
}

uint64_t HKHealthStore.queryParameters(start:end:)(void *a1, uint64_t a2, const void *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  const void *v7;
  id v8;
  Swift::String_optional v9;
  void *v10;
  id v11;
  id v12;
  _QWORD *v13;
  id v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  int *v18;
  void *v19;
  _BOOL8 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int *v24;
  void *v25;
  _BOOL8 v26;
  char *v27;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _BOOL8 v40;
  uint64_t v41;
  _BOOL8 v42;
  _BOOL4 v43;
  void *v44;
  int *v45;
  unint64_t v46;
  char *v47;
  unint64_t v48;
  char *v49;
  unint64_t v50;
  char *v51;
  uint64_t v52;
  const void *v53;
  unint64_t v54;
  id v55;
  id v56;
  id v57;
  _BOOL8 v58;
  id v59;
  id v60;
  id v61;
  uint64_t v62;
  const void *v63;
  uint64_t v64;
  char *v65;
  char *v66;

  v44 = a1;
  v52 = a2;
  v53 = a3;
  v66 = 0;
  v65 = 0;
  v64 = 0;
  v63 = 0;
  v62 = 0;
  v61 = 0;
  v60 = 0;
  v58 = 0;
  v45 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DateInterval?, NSPredicate?, [NSSortDescriptor], Int));
  v46 = (*(_QWORD *)(*((_QWORD *)v45 - 1) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4 = MEMORY[0x24BDAC7A8](v45);
  v47 = (char *)&v29 - v46;
  v48 = (v5 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v4);
  v49 = (char *)&v29 - v48;
  v66 = (char *)&v29 - v48;
  v50 = (*(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateInterval?)
                               - 8)
                   + 64)
       + 15) & 0xFFFFFFFFFFFFFFF0;
  v6 = MEMORY[0x24BDAC7A8](v52);
  v51 = (char *)&v29 - v50;
  v65 = (char *)&v29 - v50;
  v64 = v6;
  v63 = v7;
  v62 = v3;
  closure #1 in HKHealthStore.queryParameters(start:end:)(v6, v7, (uint64_t)&v29 - v50);
  v57 = closure #2 in HKHealthStore.queryParameters(start:end:)(v52, v53);
  v61 = v57;
  v54 = type metadata accessor for NSSortDescriptor();
  v55 = (id)*MEMORY[0x24BDD3718];
  v8 = v55;
  v9.value._countAndFlagsBits = static String._unconditionallyBridgeFromObjectiveC(_:)();
  NSSortDescriptor.__allocating_init(key:ascending:)(0, v9, 0);
  v56 = v10;

  v60 = v56;
  v59 = v57;
  v43 = v57 == 0;
  v42 = v57 == 0;
  v40 = v42;
  v58 = v42;
  v30 = v45[12];
  v33 = v45[16];
  v34 = v45[20];
  outlined init with copy of DateInterval?(v51, v49);
  v11 = v57;
  v12 = v57;
  *(_QWORD *)&v49[v30] = v57;
  v32 = _allocateUninitializedArray<A>(_:)();
  v31 = v13;
  v14 = v56;
  v15 = v32;
  *v31 = v56;
  _finalizeUninitializedArray<A>(_:)();
  v36 = v15;
  swift_bridgeObjectRetain();
  v16 = v49;
  v17 = v34;
  v18 = v45;
  v19 = v47;
  v20 = v40;
  *(_QWORD *)&v49[v33] = v36;
  *(_QWORD *)&v16[v17] = v20;
  v35 = v18[12];
  v37 = v18[16];
  v38 = v18[20];
  outlined init with copy of DateInterval?(v16, v19);
  v21 = v36;
  v22 = v37;
  v23 = v38;
  v24 = v45;
  v25 = v44;
  v26 = v40;
  v27 = v47;
  *(_QWORD *)&v47[v35] = v57;
  *(_QWORD *)&v27[v22] = v21;
  *(_QWORD *)&v27[v23] = v26;
  v41 = *(_QWORD *)&v27[v24[12]];
  v39 = *(_QWORD *)&v27[v24[16]];
  outlined init with take of DateInterval?(v27, v25);
  outlined destroy of (DateInterval?, NSPredicate?, [NSSortDescriptor], Int)((uint64_t)v49);

  outlined destroy of DateInterval?((uint64_t)v51);
  return v41;
}

void closure #1 in closure #1 in HKHealthStore.query(quantityType:start:end:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, const void *a7, void *a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  char *v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  id v35;
  char *v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  _QWORD *v48;
  char *v50;
  __n128 v51;
  uint64_t v52;
  uint64_t *v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _BYTE *v58;
  _QWORD v59[3];
  uint64_t v60;
  uint8_t *v61;
  uint64_t v62;
  uint64_t v63;
  _BYTE **v64;
  uint64_t *v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint8_t *v71;
  uint64_t v72;
  uint64_t v73;
  unsigned int v74;
  uint64_t *v75;
  _QWORD *v76;
  _BYTE **v77;
  uint64_t *v78;
  _QWORD *v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  unint64_t v83;
  unint64_t v84;
  uint64_t *v85;
  uint32_t v86;
  int v87;
  NSObject *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  unint64_t v93;
  unint64_t v94;
  uint64_t *v95;
  uint32_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  _QWORD *v106;
  uint64_t v107;
  NSObject *v108;
  int v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  id *v117;
  uint64_t v118;
  uint64_t v119;
  uint8_t *v120;
  uint64_t v121;
  uint64_t v122;
  _BYTE **v123;
  uint64_t *v124;
  uint64_t *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t *v128;
  id v129;
  unint64_t v130;
  unint64_t v131;
  uint64_t *v132;
  uint32_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  _QWORD *v143;
  uint64_t v144;
  NSObject *v145;
  int v146;
  uint64_t v147;
  void *v148;
  uint64_t v149;
  unint64_t v150;
  char *v151;
  unint64_t v152;
  char *v153;
  uint64_t v154;
  uint64_t v155;
  unint64_t v156;
  char *v157;
  uint64_t v158;
  uint64_t v159;
  id v160;
  uint64_t v161;
  const void *v162;
  void *v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  unint64_t v167;
  char *v168;
  unint64_t v169;
  uint64_t v170;
  char *v171;
  unint64_t v172;
  char *v173;
  void *v174;
  uint64_t (*v175)(uint64_t, uint64_t, uint64_t);
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  _BYTE *v179;
  id v180;
  uint64_t v181;
  uint32_t v182;
  uint64_t v183;
  void *v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  _BYTE *v188;
  uint64_t v189;
  uint32_t v190;
  char v191;
  uint64_t v192;
  uint64_t (*v193)(uint64_t, uint64_t, uint64_t);
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  _BYTE *v197;
  uint64_t v198;
  uint64_t v199;
  uint32_t v200;
  char v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  void *v207;
  uint64_t v208;
  uint64_t v209;
  char *v210;

  v158 = a1;
  v164 = a2;
  v174 = a3;
  v159 = a4;
  v160 = a5;
  v161 = a6;
  v162 = a7;
  v163 = a8;
  v210 = 0;
  v209 = 0;
  v208 = 0;
  v207 = 0;
  v206 = 0;
  v205 = 0;
  v204 = 0;
  v203 = 0;
  v202 = 0;
  v149 = 0;
  v192 = 0;
  v184 = 0;
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Statistics<Double>?);
  v150 = (*(_QWORD *)(*(_QWORD *)(v8 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v8);
  v151 = (char *)v59 - v150;
  v152 = (v9 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8]((char *)v59 - v150);
  v153 = (char *)v59 - v152;
  v154 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Statistics<Double>);
  v155 = *(_QWORD *)(v154 - 8);
  v156 = (*(_QWORD *)(v155 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v154);
  v157 = (char *)v59 - v156;
  v210 = (char *)v59 - v156;
  v165 = type metadata accessor for Logger();
  v166 = *(_QWORD *)(v165 - 8);
  v170 = *(_QWORD *)(v166 + 64);
  v167 = (v170 + 15) & 0xFFFFFFFFFFFFFFF0;
  v10 = MEMORY[0x24BDAC7A8](v174);
  v168 = (char *)v59 - v167;
  v169 = (v170 + 15) & 0xFFFFFFFFFFFFFFF0;
  v11 = MEMORY[0x24BDAC7A8](v10);
  v171 = (char *)v59 - v169;
  v172 = (v170 + 15) & 0xFFFFFFFFFFFFFFF0;
  v12 = (void *)MEMORY[0x24BDAC7A8](v11);
  v173 = (char *)v59 - v172;
  v209 = v13;
  v208 = v14;
  v207 = v12;
  v206 = v15;
  v205 = v16;
  v204 = v17;
  v203 = v18;
  v202 = v19;
  v20 = v12;
  if (v174)
  {
    v148 = v174;
    v21 = v173;
    v129 = v174;
    v184 = v174;
    v127 = Logger.wellnessIntents.unsafeMutableAddressor();
    v128 = &v183;
    v135 = 32;
    swift_beginAccess();
    (*(void (**)(char *, uint64_t, uint64_t))(v166 + 16))(v21, v127, v165);
    swift_endAccess();
    v22 = v129;
    v136 = 7;
    v137 = swift_allocObject();
    *(_QWORD *)(v137 + 16) = v129;
    v145 = Logger.logObject.getter();
    v146 = static os_log_type_t.error.getter();
    v132 = &v181;
    v181 = 12;
    v130 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    v131 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    lazy protocol witness table accessor for type Int and conformance Int();
    UnsignedInteger<>.init<A>(_:)();
    v133 = v182;
    v134 = 17;
    v139 = swift_allocObject();
    *(_BYTE *)(v139 + 16) = 64;
    v140 = swift_allocObject();
    *(_BYTE *)(v140 + 16) = 8;
    v23 = swift_allocObject();
    v24 = v137;
    v138 = v23;
    *(_QWORD *)(v23 + 16) = partial apply for implicit closure #1 in closure #1 in closure #1 in HKHealthStore.query(correlationType:firstQuantityType:secondQuantityType:start:end:);
    *(_QWORD *)(v23 + 24) = v24;
    v25 = swift_allocObject();
    v26 = v138;
    v142 = v25;
    *(_QWORD *)(v25 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:);
    *(_QWORD *)(v25 + 24) = v26;
    v144 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
    v141 = _allocateUninitializedArray<A>(_:)();
    v143 = v27;
    swift_retain();
    v28 = v139;
    v29 = v143;
    *v143 = partial apply for closure #1 in OSLogArguments.append(_:);
    v29[1] = v28;
    swift_retain();
    v30 = v140;
    v31 = v143;
    v143[2] = partial apply for closure #1 in OSLogArguments.append(_:);
    v31[3] = v30;
    swift_retain();
    v32 = v142;
    v33 = v143;
    v143[4] = partial apply for closure #1 in OSLogArguments.append(_:);
    v33[5] = v32;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(v145, (os_log_type_t)v146))
    {
      v34 = v149;
      v120 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      v119 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      v121 = createStorage<A>(capacity:type:)(1);
      v122 = createStorage<A>(capacity:type:)(0);
      v123 = &v179;
      v179 = v120;
      v124 = &v178;
      v178 = v121;
      v125 = &v177;
      v177 = v122;
      serialize(_:at:)(2, &v179);
      serialize(_:at:)(1, v123);
      v175 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v176 = v139;
      closure #1 in osLogInternal(_:log:type:)(&v175, (uint64_t)v123, (uint64_t)v124, (uint64_t)v125);
      v126 = v34;
      if (v34)
      {
        __break(1u);
      }
      else
      {
        v175 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
        v176 = v140;
        closure #1 in osLogInternal(_:log:type:)(&v175, (uint64_t)&v179, (uint64_t)&v178, (uint64_t)&v177);
        v118 = 0;
        v175 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
        v176 = v142;
        closure #1 in osLogInternal(_:log:type:)(&v175, (uint64_t)&v179, (uint64_t)&v178, (uint64_t)&v177);
        _os_log_impl(&dword_24749F000, v145, (os_log_type_t)v146, "Error while querying HealthKit for quantity samples: %@", v120, v133);
        destroyStorage<A>(_:count:)(v121, 1, v119);
        destroyStorage<A>(_:count:)(v122, 0, MEMORY[0x24BEE4AD8] + 8);
        MEMORY[0x24957D398](v120, MEMORY[0x24BEE4260]);
        swift_release();
        swift_release();
        swift_release();
      }
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
    }

    (*(void (**)(char *, uint64_t))(v166 + 8))(v173, v165);
    v35 = v129;
    v117 = &v180;
    v180 = v129;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<Statistics<Double>?, Error>);
    CheckedContinuation.resume(throwing:)();

  }
  else
  {
    swift_bridgeObjectRetain();
    if (v164)
    {
      v147 = v164;
      v114 = v164;
      v112 = 0;
      v113 = type metadata accessor for HKSample();
      type metadata accessor for HKQuantitySample();
      v115 = _arrayConditionalCast<A, B>(_:)();
      swift_bridgeObjectRelease();
      v116 = v115;
    }
    else
    {
      v116 = 0;
    }
    v111 = v116;
    if (v116)
    {
      v110 = v111;
      v90 = v111;
      v192 = v111;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (dateRange: DateInterval?, predicate: NSPredicate?, sortDescriptors: [NSSortDescriptor], limit: Int));
      HKHealthStore.computeStatistics(queryDateRange:samples:unit:)(v162, v90, v163, v153);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v155 + 48))(v153, 1, v154) != 1)
      {
        outlined init with take of Statistics<Double>(v153, v157);
        v51 = outlined init with copy of Statistics<Double>(v157, v151);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t, __n128))(v155 + 56))(v151, 0, 1, v154, v51);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<Statistics<Double>?, Error>);
        CheckedContinuation.resume(returning:)();
        outlined destroy of Statistics<Double>((uint64_t)v157);
        swift_bridgeObjectRelease();
      }
      else
      {
        v50 = v168;
        outlined destroy of Statistics<Double>?((uint64_t)v153);
        v81 = Logger.wellnessIntents.unsafeMutableAddressor();
        v82 = &v191;
        swift_beginAccess();
        (*(void (**)(char *, uint64_t, uint64_t))(v166 + 16))(v50, v81, v165);
        swift_endAccess();
        v88 = Logger.logObject.getter();
        v87 = static os_log_type_t.debug.getter();
        v85 = &v189;
        v189 = 2;
        v83 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
        v84 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
        lazy protocol witness table accessor for type Int and conformance Int();
        UnsignedInteger<>.init<A>(_:)();
        v86 = v190;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
        v89 = _allocateUninitializedArray<A>(_:)();
        if (os_log_type_enabled(v88, (os_log_type_t)v87))
        {
          v52 = v149;
          v71 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
          v69 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
          v70 = 0;
          v72 = createStorage<A>(capacity:type:)(0);
          v73 = createStorage<A>(capacity:type:)(v70);
          v77 = &v188;
          v188 = v71;
          v78 = &v187;
          v187 = v72;
          v75 = &v186;
          v186 = v73;
          v74 = 0;
          serialize(_:at:)(0, &v188);
          serialize(_:at:)(v74, v77);
          v185 = v89;
          v76 = v59;
          MEMORY[0x24BDAC7A8](v59);
          v53 = v78;
          v54 = &v59[-6];
          v79 = &v59[-6];
          v54[2] = v77;
          v54[3] = v53;
          v54[4] = v55;
          v80 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
          lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
          Sequence.forEach(_:)();
          if (v52)
          {
            __break(1u);
          }
          else
          {
            _os_log_impl(&dword_24749F000, v88, (os_log_type_t)v87, "Empty array of quantity samples.", v71, v86);
            v68 = 0;
            destroyStorage<A>(_:count:)(v72, 0, v69);
            destroyStorage<A>(_:count:)(v73, v68, MEMORY[0x24BEE4AD8] + 8);
            MEMORY[0x24957D398](v71, MEMORY[0x24BEE4260]);
            swift_bridgeObjectRelease();
          }
        }
        else
        {
          swift_bridgeObjectRelease();
        }

        (*(void (**)(char *, uint64_t))(v166 + 8))(v168, v165);
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v155 + 56))(v151, 1, 1, v154);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<Statistics<Double>?, Error>);
        CheckedContinuation.resume(returning:)();
        swift_bridgeObjectRelease();
      }
    }
    else
    {
      v36 = v171;
      v91 = Logger.wellnessIntents.unsafeMutableAddressor();
      v92 = &v201;
      v98 = 32;
      swift_beginAccess();
      (*(void (**)(char *, uint64_t, uint64_t))(v166 + 16))(v36, v91, v165);
      swift_endAccess();
      v37 = v160;
      v99 = 7;
      v100 = swift_allocObject();
      *(_QWORD *)(v100 + 16) = v160;
      v108 = Logger.logObject.getter();
      v109 = static os_log_type_t.error.getter();
      v95 = &v199;
      v199 = 12;
      v93 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
      v94 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
      lazy protocol witness table accessor for type Int and conformance Int();
      UnsignedInteger<>.init<A>(_:)();
      v96 = v200;
      v97 = 17;
      v102 = swift_allocObject();
      *(_BYTE *)(v102 + 16) = 32;
      v103 = swift_allocObject();
      *(_BYTE *)(v103 + 16) = 8;
      v38 = swift_allocObject();
      v39 = v100;
      v101 = v38;
      *(_QWORD *)(v38 + 16) = partial apply for implicit closure #2 in closure #1 in closure #1 in HKHealthStore.query(correlationType:firstQuantityType:secondQuantityType:start:end:);
      *(_QWORD *)(v38 + 24) = v39;
      v40 = swift_allocObject();
      v41 = v101;
      v105 = v40;
      *(_QWORD *)(v40 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:);
      *(_QWORD *)(v40 + 24) = v41;
      v107 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
      v104 = _allocateUninitializedArray<A>(_:)();
      v106 = v42;
      swift_retain();
      v43 = v102;
      v44 = v106;
      *v106 = partial apply for closure #1 in OSLogArguments.append(_:);
      v44[1] = v43;
      swift_retain();
      v45 = v103;
      v46 = v106;
      v106[2] = partial apply for closure #1 in OSLogArguments.append(_:);
      v46[3] = v45;
      swift_retain();
      v47 = v105;
      v48 = v106;
      v106[4] = partial apply for closure #1 in OSLogArguments.append(_:);
      v48[5] = v47;
      _finalizeUninitializedArray<A>(_:)();
      swift_bridgeObjectRelease();
      if (os_log_type_enabled(v108, (os_log_type_t)v109))
      {
        v56 = v149;
        v61 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
        v60 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
        v62 = createStorage<A>(capacity:type:)(0);
        v63 = createStorage<A>(capacity:type:)(1);
        v64 = &v197;
        v197 = v61;
        v65 = &v196;
        v196 = v62;
        v66 = &v195;
        v195 = v63;
        serialize(_:at:)(2, &v197);
        serialize(_:at:)(1, v64);
        v193 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
        v194 = v102;
        closure #1 in osLogInternal(_:log:type:)(&v193, (uint64_t)v64, (uint64_t)v65, (uint64_t)v66);
        v67 = v56;
        if (v56)
        {
          __break(1u);
        }
        else
        {
          v193 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
          v194 = v103;
          closure #1 in osLogInternal(_:log:type:)(&v193, (uint64_t)&v197, (uint64_t)&v196, (uint64_t)&v195);
          v59[2] = 0;
          v193 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
          v194 = v105;
          closure #1 in osLogInternal(_:log:type:)(&v193, (uint64_t)&v197, (uint64_t)&v196, (uint64_t)&v195);
          _os_log_impl(&dword_24749F000, v108, (os_log_type_t)v109, "%s samples could not be converted to [HKQuantitySample]. Programmer Error.", v61, v96);
          destroyStorage<A>(_:count:)(v62, 0, v60);
          destroyStorage<A>(_:count:)(v63, 1, MEMORY[0x24BEE4AD8] + 8);
          MEMORY[0x24957D398](v61, MEMORY[0x24BEE4260]);
          swift_release();
          swift_release();
          swift_release();
        }
      }
      else
      {
        swift_release();
        swift_release();
        swift_release();
      }

      (*(void (**)(char *, uint64_t))(v166 + 8))(v171, v165);
      lazy protocol witness table accessor for type HKHealthStore.Error and conformance HKHealthStore.Error();
      v57 = swift_allocError();
      *v58 = 0;
      v59[1] = &v198;
      v198 = v57;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<Statistics<Double>?, Error>);
      CheckedContinuation.resume(throwing:)();
    }
  }
}

uint64_t implicit closure #1 in closure #1 in closure #1 in HKHealthStore.query(quantityType:start:end:)(void *a1)
{
  id v1;
  uint64_t v4;

  v1 = a1;
  v4 = _convertErrorToNSError(_:)();

  return v4;
}

uint64_t implicit closure #2 in closure #1 in closure #1 in HKHealthStore.query(quantityType:start:end:)(void *a1)
{
  id v1;
  id v4;
  uint64_t v5;

  v1 = a1;
  v4 = objc_msgSend(a1, sel_identifier);
  v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v5;
}

uint64_t HKHealthStore.computeStatistics(queryDateRange:samples:unit:)@<X0>(const void *a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, char *a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  id v17;
  unint64_t v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t result;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __n128 v28;
  char *v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t *v32;
  uint64_t v33;
  _QWORD v34[4];
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint8_t *v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int v41;
  uint64_t *v42;
  uint64_t *v43;
  _BYTE **v44;
  uint64_t *v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t *v52;
  uint32_t v53;
  int v54;
  NSObject *v55;
  uint64_t v56;
  id v57;
  double v58;
  double v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  id v69;
  id v70;
  id v71;
  uint64_t v72;
  uint64_t *v73;
  uint64_t v74;
  uint64_t v75;
  void *v76;
  id v77;
  uint64_t *v78;
  void *v79;
  void *v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t *v83;
  void *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  char *v92;
  unint64_t v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  char *v98;
  uint64_t v99;
  unint64_t v100;
  char *v101;
  unint64_t v102;
  char *v103;
  id v104;
  uint64_t v105;
  const void *v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  unint64_t v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t v116;
  uint64_t v117;
  double v118;
  double v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  double v125;
  double v126;
  uint64_t v127;
  uint64_t v128;
  double v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  char v133;
  uint64_t v134;
  uint64_t v135;
  char v136;
  uint64_t v137;
  uint64_t v138;
  char v139;
  uint64_t v140;
  uint64_t v141;
  char v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  char v146;
  _QWORD v147[2];
  char v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  void *v153;
  uint64_t v154;
  void *v155;
  void *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  _BYTE *v160;
  uint64_t v161;
  uint32_t v162;
  char v163;
  uint64_t v164;
  void *v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  char *v174;
  char *v175;

  v88 = a4;
  v106 = a1;
  v105 = a2;
  v104 = a3;
  v175 = 0;
  v174 = 0;
  v173 = 0;
  v172 = 0;
  v171 = 0;
  v170 = 0;
  v113 = 0;
  v168 = 0;
  v166 = 0;
  v156 = 0;
  v153 = 0;
  v152 = 0;
  v150 = 0;
  v144 = 0;
  v130 = 0;
  v131 = 0;
  v126 = 0.0;
  v125 = 0.0;
  v123 = 0;
  v124 = 0;
  v99 = 0;
  v89 = type metadata accessor for Logger();
  v90 = *(_QWORD *)(v89 - 8);
  v91 = (*(_QWORD *)(v90 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v89);
  v92 = (char *)&v35 - v91;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateInterval?);
  v93 = (*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v5);
  v94 = (char *)&v35 - v93;
  v95 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Statistics<Double>);
  v96 = *(_QWORD *)(v95 - 8);
  v97 = (*(_QWORD *)(v96 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v99);
  v98 = (char *)&v35 - v97;
  v175 = (char *)&v35 - v97;
  v100 = (*(_QWORD *)(*(_QWORD *)(type metadata accessor for Date() - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v6 = MEMORY[0x24BDAC7A8](v99);
  v101 = (char *)&v35 - v100;
  v102 = (v7 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v6);
  v103 = (char *)&v35 - v102;
  v107 = type metadata accessor for DateInterval();
  v108 = *(_QWORD *)(v107 - 8);
  v109 = (*(_QWORD *)(v108 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v8 = MEMORY[0x24BDAC7A8](v106);
  v110 = (uint64_t)&v35 - v109;
  v111 = (v9 + 15) & 0xFFFFFFFFFFFFFFF0;
  v10 = MEMORY[0x24BDAC7A8](v8);
  v112 = (char *)&v35 - v111;
  v174 = (char *)&v35 - v111;
  v173 = v10;
  v172 = v11;
  v171 = v12;
  v170 = v4;
  v169 = v11;
  v114 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [HKQuantitySample]);
  v115 = lazy protocol witness table accessor for type [HKQuantitySample] and conformance [A]();
  v13 = Sequence.sorted(by:)();
  v116 = 0;
  v117 = v13;
  v85 = v13;
  v168 = v13;
  v167 = v105;
  v14 = Sequence.sorted(by:)();
  v86 = 0;
  v87 = v14;
  v81 = v14;
  v166 = v14;
  swift_bridgeObjectRetain();
  v83 = &v164;
  v164 = v85;
  v82 = lazy protocol witness table accessor for type [HKQuantitySample] and conformance [A]();
  Collection.first.getter();
  outlined destroy of [HKQuantityType]();
  v84 = v165;
  if (!v165)
  {
LABEL_19:
    v29 = v92;
    v48 = Logger.wellnessIntents.unsafeMutableAddressor();
    v49 = &v163;
    swift_beginAccess();
    (*(void (**)(char *, uint64_t, uint64_t))(v90 + 16))(v29, v48, v89);
    swift_endAccess();
    v55 = Logger.logObject.getter();
    v54 = static os_log_type_t.debug.getter();
    v52 = &v161;
    v161 = 2;
    v50 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    v51 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    lazy protocol witness table accessor for type Int and conformance Int();
    UnsignedInteger<>.init<A>(_:)();
    v53 = v162;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
    v56 = _allocateUninitializedArray<A>(_:)();
    if (os_log_type_enabled(v55, (os_log_type_t)v54))
    {
      v30 = v86;
      v38 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      v37 = 0;
      v39 = createStorage<A>(capacity:type:)(0);
      v40 = createStorage<A>(capacity:type:)(v37);
      v44 = &v160;
      v160 = v38;
      v45 = &v159;
      v159 = v39;
      v42 = &v158;
      v158 = v40;
      v41 = 0;
      serialize(_:at:)(0, &v160);
      serialize(_:at:)(v41, v44);
      v157 = v56;
      v43 = &v35;
      MEMORY[0x24BDAC7A8](&v35);
      v31 = v45;
      v32 = &v35 - 6;
      v46 = &v35 - 6;
      v32[2] = (uint64_t)v44;
      v32[3] = (uint64_t)v31;
      v32[4] = v33;
      v47 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
      lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
      Sequence.forEach(_:)();
      if (v30)
      {
        __break(1u);
      }
      else
      {
        _os_log_impl(&dword_24749F000, v55, (os_log_type_t)v54, "Empty array of quantity samples.", v38, v53);
        v35 = 0;
        destroyStorage<A>(_:count:)(v39, 0, v36);
        destroyStorage<A>(_:count:)(v40, v35, MEMORY[0x24BEE4AD8] + 8);
        MEMORY[0x24957D398](v38, MEMORY[0x24BEE4260]);
        swift_bridgeObjectRelease();
      }
    }
    else
    {
      swift_bridgeObjectRelease();
    }

    (*(void (**)(char *, uint64_t))(v90 + 8))(v92, v89);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v96 + 56))(v88, 1, 1, v95);
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  v80 = v84;
  v77 = v84;
  v156 = v84;
  swift_bridgeObjectRetain();
  v78 = &v154;
  v154 = v81;
  lazy protocol witness table accessor for type [HKQuantitySample] and conformance [A]();
  BidirectionalCollection.last.getter();
  outlined destroy of [HKQuantityType]();
  v79 = v155;
  if (!v155)
  {

    goto LABEL_19;
  }
  v76 = v79;
  v15 = v86;
  v69 = v79;
  v153 = v79;
  v16 = v77;
  v71 = objc_msgSend(v77, sel_startDate);
  static Date._unconditionallyBridgeFromObjectiveC(_:)();

  v17 = v69;
  v70 = objc_msgSend(v69, sel_endDate);
  static Date._unconditionallyBridgeFromObjectiveC(_:)();

  DateInterval.init(start:end:)();
  v18 = type metadata accessor for HKQuantitySample();
  v72 = MEMORY[0x24957D110](v105, v18);
  v152 = v72;
  v151 = v105;
  v19 = v104;
  v73 = &v35;
  MEMORY[0x24BDAC7A8](&v35);
  v34[2] = v20;
  result = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF((void (*)(char *, char *))partial apply for closure #3 in HKHealthStore.computeStatistics(queryDateRange:samples:unit:), (uint64_t)v34, v21, MEMORY[0x24BEE13C8], MEMORY[0x24BEE4078], v22, MEMORY[0x24BEE40A8], v23);
  v74 = v15;
  v75 = result;
  if (v15)
  {
    __break(1u);
  }
  else
  {
    v66 = v75;

    v150 = v66;
    swift_bridgeObjectRetain();
    v68 = v147;
    v147[0] = v66;
    v67 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Double]);
    lazy protocol witness table accessor for type [Double] and conformance [A]();
    BidirectionalCollection.last.getter();
    outlined destroy of [HKQuantityType]();
    v145 = v147[1];
    v146 = v148 & 1;
    if ((v148 & 1) != 0)
      v149 = 0;
    else
      v149 = v145;
    v64 = v149;
    v144 = v149;
    v140 = v66;
    v65 = lazy protocol witness table accessor for type [Double] and conformance [A]();
    Sequence<>.min()();
    v138 = v141;
    v139 = v142 & 1;
    if ((v142 & 1) != 0)
      v143 = 0;
    else
      v143 = v138;
    v63 = v143;
    v134 = v66;
    Sequence<>.max()();
    v132 = v135;
    v133 = v136 & 1;
    if ((v136 & 1) != 0)
      v137 = 0;
    else
      v137 = v132;
    v25 = v74;
    v62 = v137;
    v130 = v63;
    v131 = v137;
    v128 = v66;
    v127 = 0;
    result = Sequence.reduce<A>(_:_:)();
    if (!v25)
    {
      v59 = v129;
      v126 = v129;
      v26 = MEMORY[0x24957D128](v66);
      v58 = v59 / (double)v26;
      v125 = v58;
      v57 = objc_msgSend(v104, sel_unitString);
      v60 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v61 = v27;
      v123 = v60;
      v124 = v27;

      outlined init with copy of DateInterval?(v106, v94);
      (*(void (**)(uint64_t, char *, uint64_t))(v108 + 16))(v110, v112, v107);
      v122 = v63;
      v121 = v62;
      v120 = v64;
      v119 = v58;
      v118 = v59;
      Statistics.init(queryDateRange:dataDateRange:sampleCount:unit:valueRange:latestValue:averageValue:totalValue:)(v94, v110, v72, v60, v61, (uint64_t)&v122, (uint64_t)&v121, (uint64_t)&v120, v98, (uint64_t)&v119, (uint64_t)&v118, MEMORY[0x24BEE13C8]);
      v28 = outlined init with copy of Statistics<Double>(v98, v88);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t, __n128))(v96 + 56))(v88, 0, 1, v95, v28);
      outlined destroy of Statistics<Double>((uint64_t)v98);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v108 + 8))(v112, v107);

      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }
  }
  __break(1u);
  return result;
}

id HKSampleQuery.__allocating_init(sampleType:predicate:limit:sortDescriptors:resultsHandler:)(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  id v6;

  v6 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  return @nonobjc HKSampleQuery.init(sampleType:predicate:limit:sortDescriptors:resultsHandler:)(a1, a2, a3, a4, a5, a6);
}

uint64_t HKHealthStore.query<A>(categoryType:start:end:enumerationType:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  _QWORD *v8;

  v8[14] = v7;
  v8[13] = a7;
  v8[12] = a6;
  v8[11] = a4;
  v8[10] = a3;
  v8[9] = a2;
  v8[8] = a1;
  v8[2] = v8;
  v8[3] = 0;
  v8[4] = 0;
  v8[5] = 0;
  v8[6] = 0;
  v8[7] = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  v8[15] = swift_task_alloc();
  v8[16] = swift_task_alloc();
  v8[3] = a2;
  v8[4] = a3;
  v8[5] = a4;
  v8[6] = a5;
  v8[7] = v7;
  return swift_task_switch();
}

uint64_t HKHealthStore.query<A>(categoryType:start:end:enumerationType:)()
{
  _QWORD *v0;
  id v1;
  id v2;
  _QWORD *v3;
  const void *v5;
  const void *v6;
  uint64_t v7;
  id v8;
  void *v9;
  void *v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v9 = (void *)v0[16];
  v10 = (void *)v0[15];
  v8 = (id)v0[14];
  v7 = v0[13];
  v12 = v0[12];
  v6 = (const void *)v0[11];
  v5 = (const void *)v0[10];
  v11 = (id)v0[9];
  v0[2] = v0;
  v0[17] = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("query(categoryType:start:end:enumerationType:)", 0x2EuLL, 1)._object;
  v1 = v8;
  outlined init with copy of Date?(v5, v9);
  outlined init with copy of Date?(v6, v10);
  v2 = v11;
  v14 = (_QWORD *)swift_task_alloc();
  v0[18] = v14;
  v14[2] = v12;
  v14[3] = v7;
  v14[4] = v8;
  v14[5] = v9;
  v14[6] = v10;
  v14[7] = v11;
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v13 + 152) = v3;
  type metadata accessor for Date();
  swift_getTupleTypeMetadata2();
  type metadata accessor for Optional();
  *v3 = *(_QWORD *)(v13 + 16);
  v3[1] = HKHealthStore.query<A>(categoryType:start:end:enumerationType:);
  return withCheckedThrowingContinuation<A>(isolation:function:_:)();
}

{
  _QWORD *v0;
  id v2;
  id v3;
  uint64_t v4;
  uint64_t v5;

  v4 = v0[16];
  v5 = v0[15];
  v2 = (id)v0[14];
  v3 = (id)v0[9];
  v0[2] = v0;
  swift_task_dealloc();

  outlined destroy of Date?(v4);
  outlined destroy of Date?(v5);

  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0[2] + 8))();
}

_QWORD *HKHealthStore.query<A>(categoryType:start:end:enumerationType:)()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;

  v2 = *v1;
  *(_QWORD *)(v2 + 16) = *v1;
  v8 = (_QWORD *)(v2 + 16);
  v9 = (_QWORD *)(v2 + 16);
  *(_QWORD *)(v2 + 160) = v0;
  swift_task_dealloc();
  if (v0)
    return (_QWORD *)swift_task_switch();
  v6 = v8[14];
  v7 = v8[13];
  v4 = (void *)v8[12];
  v5 = (void *)v8[7];
  swift_task_dealloc();

  outlined destroy of Date?(v6);
  outlined destroy of Date?(v7);

  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(_QWORD *(**)(_QWORD *__return_ptr))(*v9 + 8))(v9);
}

uint64_t closure #1 in HKHealthStore.query<A>(categoryType:start:end:enumerationType:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const void *v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int *v25;
  uint64_t v26;
  void *v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  id v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  char *v45;
  uint64_t v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  id v51;
  _QWORD v53[3];
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  id v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  int *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  char *v80;
  uint64_t v81;
  unint64_t v82;
  void *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  id v87;
  id v88;
  char *v89;
  uint64_t v90;
  char *v91;
  id v92;
  id v93;
  char *v94;
  id v95;
  uint64_t v96;
  const void *v97;
  uint64_t v98;
  void *v99;
  uint64_t v100;
  char *v101;
  uint64_t v102;

  v74 = a1;
  v92 = a2;
  v55 = a3;
  v56 = a4;
  v87 = a5;
  v76 = a6;
  v77 = a7;
  v101 = 0;
  v100 = 0;
  v99 = 0;
  v98 = 0;
  v97 = 0;
  v96 = 0;
  v95 = 0;
  v102 = a6;
  v53[1] = 255;
  type metadata accessor for Date();
  swift_getTupleTypeMetadata2();
  v53[2] = type metadata accessor for Optional();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Error);
  v62 = 0;
  v81 = type metadata accessor for CheckedContinuation();
  v78 = *(_QWORD *)(v81 - 8);
  v75 = *(_QWORD *)(v78 + 64);
  v54 = (v75 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v81);
  v80 = (char *)v53 - v54;
  v73 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (dateRange: DateInterval?, predicate: NSPredicate?, sortDescriptors: [NSSortDescriptor], limit: Int));
  v59 = *(_QWORD *)(*((_QWORD *)v73 - 1) + 64);
  v57 = (v59 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v73);
  v89 = (char *)v53 - v57;
  v58 = (v59 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v8);
  v91 = (char *)v53 - v58;
  v60 = (v59 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v9);
  v94 = (char *)v53 - v60;
  v101 = (char *)v53 - v60;
  v100 = v74;
  v99 = a2;
  v98 = v10;
  v97 = v11;
  v96 = v12;
  v61 = v13[12];
  v63 = v13[16];
  v64 = v13[20];
  v69 = (id)HKHealthStore.queryParameters(start:end:)((char *)v53 - v60, v10, v11);
  v70 = v14;
  v84 = v15;
  v16 = v69;
  v17 = v69;
  *(_QWORD *)&v94[v61] = v69;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v18 = v64;
  v19 = v84;
  v20 = v94;
  *(_QWORD *)&v94[v63] = v70;
  *(_QWORD *)&v20[v18] = v19;
  type metadata accessor for HKSampleQuery();
  v21 = v87;
  v65 = v73[12];
  v66 = v73[16];
  v67 = v73[20];
  outlined init with copy of DateInterval?(v94, v91);
  v22 = v66;
  v23 = v67;
  v24 = v70;
  v25 = v73;
  v26 = v84;
  v27 = v89;
  v28 = v91;
  v29 = v94;
  *(_QWORD *)&v91[v65] = v69;
  *(_QWORD *)&v28[v22] = v24;
  *(_QWORD *)&v28[v23] = v26;
  v83 = *(void **)&v28[v25[12]];
  v90 = *(_QWORD *)&v28[v25[16]];
  v68 = v25[12];
  v71 = v25[16];
  v72 = v25[20];
  outlined init with copy of DateInterval?(v29, v27);
  v30 = v70;
  v31 = v71;
  v32 = v72;
  v33 = v73;
  v34 = v74;
  v35 = v78;
  v36 = v81;
  v37 = v84;
  v38 = (uint64_t)v89;
  v39 = v80;
  *(_QWORD *)&v89[v68] = v69;
  *(_QWORD *)(v38 + v31) = v30;
  *(_QWORD *)(v38 + v32) = v37;
  v88 = *(id *)(v38 + v33[12]);
  v85 = *(_QWORD *)(v38 + v33[16]);
  (*(void (**)(char *, uint64_t, uint64_t))(v35 + 16))(v39, v34, v36);
  v40 = v87;
  v79 = (*(unsigned __int8 *)(v78 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v78 + 80);
  v82 = (v79 + v75 + 7) & 0xFFFFFFFFFFFFFFF8;
  v41 = swift_allocObject();
  v42 = v77;
  v43 = v78;
  v44 = v79;
  v45 = v80;
  v46 = v81;
  v86 = v41;
  *(_QWORD *)(v41 + 16) = v76;
  *(_QWORD *)(v41 + 24) = v42;
  (*(void (**)(unint64_t, char *, uint64_t))(v43 + 32))(v41 + v44, v45, v46);
  v47 = v83;
  v48 = v84;
  v49 = v85;
  v50 = v86;
  v51 = v87;
  *(_QWORD *)(v86 + v82) = v87;
  v93 = HKSampleQuery.__allocating_init(sampleType:predicate:limit:sortDescriptors:resultsHandler:)(v51, v47, v48, v49, (uint64_t)partial apply for closure #1 in closure #1 in HKHealthStore.query<A>(categoryType:start:end:enumerationType:), v50);

  outlined destroy of DateInterval?((uint64_t)v89);
  swift_bridgeObjectRelease();
  outlined destroy of DateInterval?((uint64_t)v91);
  v95 = v93;
  objc_msgSend(v92, sel_executeQuery_);

  return outlined destroy of (dateRange: DateInterval?, predicate: NSPredicate?, sortDescriptors: [NSSortDescriptor], limit: Int)((uint64_t)v94);
}

void closure #1 in closure #1 in HKHealthStore.query<A>(categoryType:start:end:enumerationType:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  id v18;
  uint64_t v19;
  char *v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v34;
  _BYTE *v35;
  id v36;
  uint64_t v37;
  _QWORD v38[3];
  uint64_t v39;
  uint8_t *v40;
  uint64_t v41;
  uint64_t v42;
  _BYTE **v43;
  uint64_t *v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  id v48;
  void (*v49)(void);
  uint64_t v50;
  char *v51;
  _QWORD *v52;
  id v53;
  uint64_t v54;
  char *v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t *v58;
  uint32_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  NSObject *v71;
  int v72;
  id v73;
  id v74;
  void *v75;
  void *v76;
  id v77;
  uint64_t v78;
  void *v79;
  void *v80;
  void *v81;
  uint64_t v82;
  _QWORD *v83;
  uint64_t v84;
  void *v85;
  void *v86;
  id *v87;
  id v88;
  uint64_t v89;
  id v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t TupleTypeMetadata2;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  unint64_t v101;
  char *v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  id v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  unint64_t v120;
  char *v121;
  id v122;
  id v123;
  id v124;
  _QWORD v125[2];
  _QWORD v126[2];
  id v127;
  uint64_t (*v128)(uint64_t, uint64_t, uint64_t);
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  _BYTE *v132;
  uint64_t v133;
  uint32_t v134;
  char v135;
  uint64_t v136;
  uint64_t v137;
  void *v138;
  uint64_t v139;
  uint64_t v140;
  char *v141;
  char *v142;
  uint64_t v143;

  v114 = a1;
  v117 = a2;
  v122 = a3;
  v115 = a4;
  v116 = a5;
  v106 = a6;
  v91 = a7;
  v142 = 0;
  v141 = 0;
  v140 = 0;
  v139 = 0;
  v138 = 0;
  v137 = 0;
  v136 = 0;
  v93 = 0;
  v92 = 0;
  v127 = 0;
  v124 = 0;
  v143 = a6;
  v94 = 255;
  v98 = type metadata accessor for Date();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v107 = 0;
  v96 = type metadata accessor for Optional();
  v97 = (*(_QWORD *)(*(_QWORD *)(v96 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](0);
  v99 = (char *)v38 - v97;
  v100 = *(_QWORD *)(v98 - 8);
  v101 = (*(_QWORD *)(v100 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v7);
  v102 = (char *)v38 - v101;
  v103 = *(_QWORD *)(v8 - 8);
  v104 = (*(_QWORD *)(v103 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v9);
  v105 = (uint64_t)v38 - v104;
  v142 = (char *)v38 - v104;
  v108 = type metadata accessor for Optional();
  v109 = (*(_QWORD *)(*(_QWORD *)(v108 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v107);
  v110 = (uint64_t)v38 - v109;
  v111 = *(_QWORD *)(v10 - 8);
  v112 = (*(_QWORD *)(v111 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v11);
  v113 = (char *)v38 - v112;
  v141 = (char *)v38 - v112;
  v118 = type metadata accessor for Logger();
  v119 = *(_QWORD *)(v118 - 8);
  v120 = (*(_QWORD *)(v119 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v122);
  v121 = (char *)v38 - v120;
  v140 = v12;
  v139 = v13;
  v138 = v14;
  v137 = v15;
  v136 = v16;
  v17 = v14;
  if (v122)
  {
    v90 = v122;
    v88 = v122;
    v124 = v122;
    v18 = v122;
    v87 = &v123;
    v123 = v88;
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Error);
    type metadata accessor for CheckedContinuation();
    CheckedContinuation.resume(throwing:)();

  }
  else
  {
    swift_bridgeObjectRetain();
    if (v117)
    {
      v89 = v117;
      v84 = v117;
      swift_bridgeObjectRetain();
      v83 = v125;
      v125[0] = v84;
      v82 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [HKSample]);
      lazy protocol witness table accessor for type [HKSample] and conformance [A]();
      Collection.first.getter();
      outlined destroy of [HKQuantityType]();
      v85 = (void *)v125[1];
      swift_bridgeObjectRelease();
      v86 = v85;
    }
    else
    {
      v86 = 0;
    }
    v81 = v86;
    if (v86)
    {
      v80 = v81;
      v77 = v81;
      objc_opt_self();
      v19 = swift_dynamicCastObjCClass();
      v78 = v19;
      if (v19)
      {
        v76 = (void *)v78;
      }
      else
      {
        v75 = 0;

        v76 = v75;
      }
      v79 = v76;
    }
    else
    {
      v79 = 0;
    }
    v74 = v79;
    if (v79)
    {
      v73 = v74;
      v53 = v74;
      v127 = v74;
      v126[1] = objc_msgSend(v74, sel_value);
      dispatch thunk of RawRepresentable.init(rawValue:)();
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v111 + 48))(v110, 1, v106) != 1)
      {
        (*(void (**)(char *, uint64_t, uint64_t))(v111 + 32))(v113, v110, v106);
        v50 = v105 + *(int *)(TupleTypeMetadata2 + 48);
        v47 = v105 + *(int *)(TupleTypeMetadata2 + 48);
        v49 = *(void (**)(void))(v111 + 16);
        v49();
        v36 = v53;
        v48 = objc_msgSend(v53, sel_startDate);
        static Date._unconditionallyBridgeFromObjectiveC(_:)();
        (*(void (**)(uint64_t, char *, uint64_t))(v100 + 32))(v47, v102, v98);

        v51 = &v99[*(int *)(TupleTypeMetadata2 + 48)];
        v49();
        (*(void (**)(char *, uint64_t, uint64_t))(v100 + 16))(v51, v50, v98);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v103 + 56))(v99, 0, 1, TupleTypeMetadata2);
        __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Error);
        type metadata accessor for CheckedContinuation();
        CheckedContinuation.resume(returning:)();
        outlined destroy of (value: A, startDate: Date)(v105, v106, TupleTypeMetadata2);
        (*(void (**)(char *, uint64_t))(v111 + 8))(v113, v106);
      }
      else
      {
        outlined destroy of A?(v110, v106);
        lazy protocol witness table accessor for type HKHealthStore.Error and conformance HKHealthStore.Error();
        v34 = swift_allocError();
        *v35 = 1;
        v52 = v126;
        v126[0] = v34;
        __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Error);
        type metadata accessor for CheckedContinuation();
        CheckedContinuation.resume(throwing:)();
      }

    }
    else
    {
      v20 = v121;
      v54 = Logger.wellnessIntents.unsafeMutableAddressor();
      v55 = &v135;
      v61 = 32;
      swift_beginAccess();
      (*(void (**)(char *, uint64_t, uint64_t))(v119 + 16))(v20, v54, v118);
      swift_endAccess();
      v21 = v116;
      v62 = 7;
      v63 = swift_allocObject();
      *(_QWORD *)(v63 + 16) = v116;
      v71 = Logger.logObject.getter();
      v72 = static os_log_type_t.debug.getter();
      v58 = &v133;
      v133 = 12;
      v56 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
      v57 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
      lazy protocol witness table accessor for type Int and conformance Int();
      UnsignedInteger<>.init<A>(_:)();
      v59 = v134;
      v60 = 17;
      v65 = swift_allocObject();
      *(_BYTE *)(v65 + 16) = 32;
      v66 = swift_allocObject();
      *(_BYTE *)(v66 + 16) = 8;
      v22 = swift_allocObject();
      v23 = v63;
      v64 = v22;
      *(_QWORD *)(v22 + 16) = partial apply for implicit closure #2 in closure #1 in closure #1 in HKHealthStore.query(correlationType:firstQuantityType:secondQuantityType:start:end:);
      *(_QWORD *)(v22 + 24) = v23;
      v24 = swift_allocObject();
      v25 = v64;
      v68 = v24;
      *(_QWORD *)(v24 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:);
      *(_QWORD *)(v24 + 24) = v25;
      v70 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
      v67 = _allocateUninitializedArray<A>(_:)();
      v69 = v26;
      swift_retain();
      v27 = v65;
      v28 = v69;
      *v69 = partial apply for closure #1 in OSLogArguments.append(_:);
      v28[1] = v27;
      swift_retain();
      v29 = v66;
      v30 = v69;
      v69[2] = partial apply for closure #1 in OSLogArguments.append(_:);
      v30[3] = v29;
      swift_retain();
      v31 = v68;
      v32 = v69;
      v69[4] = partial apply for closure #1 in OSLogArguments.append(_:);
      v32[5] = v31;
      _finalizeUninitializedArray<A>(_:)();
      swift_bridgeObjectRelease();
      if (os_log_type_enabled(v71, (os_log_type_t)v72))
      {
        v37 = v92;
        v40 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
        v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
        v41 = createStorage<A>(capacity:type:)(0);
        v42 = createStorage<A>(capacity:type:)(1);
        v43 = &v132;
        v132 = v40;
        v44 = &v131;
        v131 = v41;
        v45 = &v130;
        v130 = v42;
        serialize(_:at:)(2, &v132);
        serialize(_:at:)(1, v43);
        v128 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
        v129 = v65;
        closure #1 in osLogInternal(_:log:type:)(&v128, (uint64_t)v43, (uint64_t)v44, (uint64_t)v45);
        v46 = v37;
        if (v37)
        {
          __break(1u);
        }
        else
        {
          v128 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
          v129 = v66;
          closure #1 in osLogInternal(_:log:type:)(&v128, (uint64_t)&v132, (uint64_t)&v131, (uint64_t)&v130);
          v38[1] = 0;
          v128 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
          v129 = v68;
          closure #1 in osLogInternal(_:log:type:)(&v128, (uint64_t)&v132, (uint64_t)&v131, (uint64_t)&v130);
          _os_log_impl(&dword_24749F000, v71, (os_log_type_t)v72, "No samples found for %s", v40, v59);
          destroyStorage<A>(_:count:)(v41, 0, v39);
          destroyStorage<A>(_:count:)(v42, 1, MEMORY[0x24BEE4AD8] + 8);
          MEMORY[0x24957D398](v40, MEMORY[0x24BEE4260]);
          swift_release();
          swift_release();
          swift_release();
        }
      }
      else
      {
        swift_release();
        swift_release();
        swift_release();
      }

      (*(void (**)(char *, uint64_t))(v119 + 8))(v121, v118);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v103 + 56))(v99, 1, 1, TupleTypeMetadata2);
      __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Error);
      type metadata accessor for CheckedContinuation();
      CheckedContinuation.resume(returning:)();
    }
  }
}

uint64_t HKHealthStore.query(correlationType:firstQuantityType:secondQuantityType:start:end:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;

  v7[40] = v6;
  v7[39] = a6;
  v7[38] = a5;
  v7[37] = a4;
  v7[36] = a3;
  v7[35] = a2;
  v7[34] = a1;
  v7[18] = v7;
  v7[19] = 0;
  v7[20] = 0;
  v7[21] = 0;
  v7[22] = 0;
  v7[23] = 0;
  v7[24] = 0;
  v7[26] = 0;
  v7[30] = 0;
  v7[33] = 0;
  v8 = type metadata accessor for Logger();
  v7[41] = v8;
  v7[42] = *(_QWORD *)(v8 - 8);
  v7[43] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  v7[44] = swift_task_alloc();
  v7[45] = swift_task_alloc();
  v7[19] = a2;
  v7[20] = a3;
  v7[21] = a4;
  v7[22] = a5;
  v7[23] = a6;
  v7[24] = v6;
  return swift_task_switch();
}

uint64_t HKHealthStore.query(correlationType:firstQuantityType:secondQuantityType:start:end:)()
{
  uint64_t v0;
  _QWORD *v1;
  id v2;
  id v3;
  id v5;
  _QWORD *v6;
  id v7;
  Class isa;
  void *v9;

  v9 = *(void **)(v0 + 320);
  v7 = *(id *)(v0 + 296);
  v5 = *(id *)(v0 + 288);
  *(_QWORD *)(v0 + 144) = v0;
  *(_QWORD *)(v0 + 368) = type metadata accessor for HKQuantityType();
  _allocateUninitializedArray<A>(_:)();
  v6 = v1;
  v2 = v5;
  *v6 = v5;
  v3 = v7;
  v6[1] = v7;
  _finalizeUninitializedArray<A>(_:)();
  *(_QWORD *)(v0 + 376) = lazy protocol witness table accessor for type HKQuantityType and conformance NSObject();
  Set.init(arrayLiteral:)();
  isa = Set._bridgeToObjectiveC()().super.isa;
  *(_QWORD *)(v0 + 384) = isa;
  swift_bridgeObjectRelease();
  *(_QWORD *)(v0 + 16) = *(_QWORD *)(v0 + 144);
  *(_QWORD *)(v0 + 56) = v0 + 200;
  *(_QWORD *)(v0 + 24) = HKHealthStore.query(correlationType:firstQuantityType:secondQuantityType:start:end:);
  *(_QWORD *)(v0 + 112) = swift_continuation_init();
  *(_QWORD *)(v0 + 80) = MEMORY[0x24BDAC760];
  *(_DWORD *)(v0 + 88) = 0x40000000;
  *(_DWORD *)(v0 + 92) = 0;
  *(_QWORD *)(v0 + 96) = @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned NSDictionary, @unowned NSError?) -> () with result type [HKQuantityType : HKUnit];
  *(_QWORD *)(v0 + 104) = &block_descriptor_181;
  objc_msgSend(v9, sel_preferredUnitsForQuantityTypes_completion_, isa, v0 + 80);
  return __swift_continuation_await_point(v0 + 16);
}

{
  _QWORD *v0;
  _QWORD *v1;

  v1 = (_QWORD *)*v0;
  v1[18] = *v0;
  v1[49] = v1[6];
  return swift_task_switch();
}

{
  uint64_t v0;
  void *v1;
  id v2;
  id v3;
  id v4;
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v13;
  id v14;
  id v15;
  _QWORD *v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint8_t *buf;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  id v29;
  uint32_t size;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  NSObject *oslog;
  os_log_type_t v43;
  const void *v44;
  const void *v45;
  id v46;
  void *v47;
  void *v48;
  void *v49;
  void *v50;
  void *v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  uint64_t v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  void *v61;
  uint8_t *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t (*v65)(uint64_t, uint64_t, uint64_t);
  uint64_t v66;

  v1 = *(void **)(v0 + 384);
  v58 = *(_QWORD *)(v0 + 368);
  v57 = *(void **)(v0 + 288);
  *(_QWORD *)(v0 + 144) = v0;
  v59 = *(_QWORD *)(v0 + 200);
  *(_QWORD *)(v0 + 400) = v59;
  *(_QWORD *)(v0 + 208) = v59;

  v2 = v57;
  *(_QWORD *)(v0 + 224) = v57;
  v60 = type metadata accessor for HKUnit();
  MEMORY[0x24957CF6C](v0 + 224, v59, v58);

  v61 = *(void **)(v0 + 216);
  *(_QWORD *)(v0 + 408) = v61;
  if (v61)
  {
    v54 = *(_QWORD *)(v56 + 376);
    v53 = *(_QWORD *)(v56 + 368);
    v52 = *(void **)(v56 + 296);
    *(_QWORD *)(v56 + 240) = v61;
    v3 = v52;
    *(_QWORD *)(v56 + 256) = v52;
    MEMORY[0x24957CF6C](v56 + 256, v59, v53, v60, v54);

    v55 = *(void **)(v56 + 248);
    *(_QWORD *)(v56 + 416) = v55;
    if (v55)
    {
      v47 = *(void **)(v56 + 360);
      v48 = *(void **)(v56 + 352);
      v46 = *(id *)(v56 + 320);
      v45 = *(const void **)(v56 + 312);
      v44 = *(const void **)(v56 + 304);
      v51 = *(void **)(v56 + 296);
      v50 = *(void **)(v56 + 288);
      v49 = *(void **)(v56 + 280);
      *(_QWORD *)(v56 + 264) = v55;
      *(_QWORD *)(v56 + 424) = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("query(correlationType:firstQuantityType:secondQuantityType:start:end:)", 0x46uLL, 1)._object;
      v4 = v46;
      outlined init with copy of Date?(v44, v47);
      outlined init with copy of Date?(v45, v48);
      v5 = v49;
      v6 = v50;
      v7 = v51;
      v8 = v61;
      v9 = v55;
      v10 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v56 + 432) = v10;
      v10[2] = v46;
      v10[3] = v47;
      v10[4] = v48;
      v10[5] = v49;
      v10[6] = v50;
      v10[7] = v51;
      v10[8] = v61;
      v10[9] = v55;
      v11 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v56 + 440) = v11;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Statistics<(first: Double, second: Double)>?);
      *v11 = *(_QWORD *)(v56 + 144);
      v11[1] = HKHealthStore.query(correlationType:firstQuantityType:secondQuantityType:start:end:);
      return withCheckedThrowingContinuation<A>(isolation:function:_:)();
    }

  }
  v13 = *(_QWORD *)(v56 + 344);
  v25 = *(_QWORD *)(v56 + 336);
  v27 = *(_QWORD *)(v56 + 328);
  v29 = *(id *)(v56 + 296);
  v28 = *(id *)(v56 + 288);
  v26 = Logger.wellnessIntents.unsafeMutableAddressor();
  swift_beginAccess();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v25 + 16))(v13, v26, v27);
  swift_endAccess();
  v14 = v28;
  v31 = swift_allocObject();
  *(_QWORD *)(v31 + 16) = v28;
  v15 = v29;
  v33 = swift_allocObject();
  *(_QWORD *)(v33 + 16) = v29;
  oslog = Logger.logObject.getter();
  v43 = static os_log_type_t.error.getter();
  *(_QWORD *)(v56 + 232) = 22;
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  size = *(_DWORD *)(v56 + 456);
  v35 = swift_allocObject();
  *(_BYTE *)(v35 + 16) = 64;
  v36 = swift_allocObject();
  *(_BYTE *)(v36 + 16) = 8;
  v32 = swift_allocObject();
  *(_QWORD *)(v32 + 16) = partial apply for implicit closure #3 in LogQuantityIntentHandler.handle(intent:);
  *(_QWORD *)(v32 + 24) = v31;
  v37 = swift_allocObject();
  *(_QWORD *)(v37 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:);
  *(_QWORD *)(v37 + 24) = v32;
  v38 = swift_allocObject();
  *(_BYTE *)(v38 + 16) = 64;
  v39 = swift_allocObject();
  *(_BYTE *)(v39 + 16) = 8;
  v34 = swift_allocObject();
  *(_QWORD *)(v34 + 16) = partial apply for implicit closure #3 in LogQuantityIntentHandler.handle(intent:);
  *(_QWORD *)(v34 + 24) = v33;
  v40 = swift_allocObject();
  *(_QWORD *)(v40 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:);
  *(_QWORD *)(v40 + 24) = v34;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
  _allocateUninitializedArray<A>(_:)();
  v41 = v16;
  swift_retain();
  *v41 = partial apply for closure #1 in OSLogArguments.append(_:);
  v41[1] = v35;
  swift_retain();
  v41[2] = partial apply for closure #1 in OSLogArguments.append(_:);
  v41[3] = v36;
  swift_retain();
  v41[4] = partial apply for closure #1 in OSLogArguments.append(_:);
  v41[5] = v37;
  swift_retain();
  v41[6] = partial apply for closure #1 in OSLogArguments.append(_:);
  v41[7] = v38;
  swift_retain();
  v41[8] = partial apply for closure #1 in OSLogArguments.append(_:);
  v41[9] = v39;
  swift_retain();
  v41[10] = partial apply for closure #1 in OSLogArguments.append(_:);
  v41[11] = v40;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(oslog, v43))
  {
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    v23 = createStorage<A>(capacity:type:)(2);
    v24 = createStorage<A>(capacity:type:)(0);
    v62 = buf;
    v63 = v23;
    v64 = v24;
    serialize(_:at:)(2, &v62);
    serialize(_:at:)(2, &v62);
    v65 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v66 = v35;
    closure #1 in osLogInternal(_:log:type:)(&v65, (uint64_t)&v62, (uint64_t)&v63, (uint64_t)&v64);
    v65 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v66 = v36;
    closure #1 in osLogInternal(_:log:type:)(&v65, (uint64_t)&v62, (uint64_t)&v63, (uint64_t)&v64);
    v65 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v66 = v37;
    closure #1 in osLogInternal(_:log:type:)(&v65, (uint64_t)&v62, (uint64_t)&v63, (uint64_t)&v64);
    v65 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v66 = v38;
    closure #1 in osLogInternal(_:log:type:)(&v65, (uint64_t)&v62, (uint64_t)&v63, (uint64_t)&v64);
    v65 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v66 = v39;
    closure #1 in osLogInternal(_:log:type:)(&v65, (uint64_t)&v62, (uint64_t)&v63, (uint64_t)&v64);
    v65 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v66 = v40;
    closure #1 in osLogInternal(_:log:type:)(&v65, (uint64_t)&v62, (uint64_t)&v63, (uint64_t)&v64);
    _os_log_impl(&dword_24749F000, oslog, v43, "Failed to get preferred units for %@ or %@", buf, size);
    destroyStorage<A>(_:count:)(v23, 2, v21);
    destroyStorage<A>(_:count:)(v24, 0, MEMORY[0x24BEE4AD8] + 8);
    MEMORY[0x24957D398](buf, MEMORY[0x24BEE4260]);
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
  }
  v19 = *(_QWORD *)(v56 + 344);
  v18 = *(_QWORD *)(v56 + 336);
  v20 = *(_QWORD *)(v56 + 328);

  (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v19, v20);
  lazy protocol witness table accessor for type HKHealthStore.Error and conformance HKHealthStore.Error();
  swift_allocError();
  *v17 = 0;
  swift_willThrow();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v56 + 144) + 8))();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  _QWORD *v12;

  v2 = *v1;
  *(_QWORD *)(v2 + 144) = *v1;
  v2 += 144;
  v12 = (_QWORD *)(v2 - 128);
  *(_QWORD *)(v2 + 304) = v0;
  swift_task_dealloc();
  if (!v0)
  {
    v11 = (void *)v12[50];
    v10 = (void *)v12[49];
    v5 = v12[43];
    v6 = v12[42];
    v4 = (void *)v12[38];
    v9 = (void *)v12[35];
    v8 = (void *)v12[34];
    v7 = (void *)v12[33];
    swift_task_dealloc();

    outlined destroy of Date?(v5);
    outlined destroy of Date?(v6);

    swift_bridgeObjectRelease();
  }
  return swift_task_switch();
}

{
  _QWORD *v0;
  void *v1;
  id v3;

  v1 = (void *)v0[52];
  v3 = (id)v0[51];
  v0[18] = v0;

  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0[18] + 8))();
}

{
  uint64_t v0;
  id v2;

  v2 = *(id *)(v0 + 384);
  *(_QWORD *)(v0 + 144) = v0;
  swift_willThrow();

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 144) + 8))();
}

{
  _QWORD *v0;
  id v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;

  v8 = (id)v0[52];
  v9 = (id)v0[51];
  v3 = v0[45];
  v4 = v0[44];
  v2 = (id)v0[40];
  v7 = (id)v0[37];
  v6 = (id)v0[36];
  v5 = (id)v0[35];
  v0[18] = v0;
  swift_task_dealloc();

  outlined destroy of Date?(v3);
  outlined destroy of Date?(v4);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0[18] + 8))();
}

uint64_t closure #1 in HKHealthStore.query(correlationType:firstQuantityType:secondQuantityType:start:end:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, void *a5, void *a6, void *a7, void *a8, void *a9)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int *v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  id v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  int *v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  id v48;
  id v49;
  id v50;
  id v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  void *v57;
  id v58;
  id v59;
  id v60;
  unint64_t v61;
  id v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  id v67;
  char *v68;
  unint64_t v69;
  id v70;
  void *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  id v75;
  _QWORD v77[3];
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  int *v91;
  uint64_t v92;
  id v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  char *v102;
  uint64_t v103;
  unint64_t v104;
  id v105;
  unint64_t v106;
  id v107;
  unint64_t v108;
  unint64_t v109;
  unint64_t v110;
  char *v111;
  void *v112;
  unint64_t v113;
  unint64_t v114;
  id v115;
  void *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  id v120;
  id v121;
  char *v122;
  uint64_t v123;
  char *v124;
  id v125;
  id v126;
  char *v127;
  id v128;
  id v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  const void *v134;
  uint64_t v135;
  void *v136;
  uint64_t v137;
  char *v138;

  v90 = a1;
  v125 = a2;
  v77[1] = a3;
  v77[2] = a4;
  v120 = a5;
  v105 = a6;
  v107 = a7;
  v112 = a8;
  v115 = a9;
  v138 = 0;
  v137 = 0;
  v136 = 0;
  v135 = 0;
  v134 = 0;
  v133 = 0;
  v132 = 0;
  v131 = 0;
  v130 = 0;
  v129 = 0;
  v128 = 0;
  v103 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<Statistics<(first: Double, second: Double)>?, Error>);
  v100 = *(_QWORD *)(v103 - 8);
  v97 = *(_QWORD *)(v100 + 64);
  v77[0] = (v97 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v103);
  v102 = (char *)v77 - v77[0];
  v91 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (dateRange: DateInterval?, predicate: NSPredicate?, sortDescriptors: [NSSortDescriptor], limit: Int));
  v98 = *((_QWORD *)v91 - 1);
  v99 = *(_QWORD *)(v98 + 64);
  v78 = (v99 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v91);
  v111 = (char *)v77 - v78;
  v79 = (v99 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v10);
  v122 = (char *)v77 - v79;
  v80 = (v99 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v11);
  v124 = (char *)v77 - v80;
  MEMORY[0x24BDAC7A8](v12);
  v127 = (char *)v77 - v13;
  v138 = (char *)v77 - v13;
  v137 = v90;
  v136 = a2;
  v135 = v14;
  v134 = v15;
  v133 = v16;
  v132 = v17;
  v131 = v18;
  v130 = v19;
  v129 = v115;
  v81 = v20[12];
  v82 = v20[16];
  v83 = v20[20];
  v93 = (id)HKHealthStore.queryParameters(start:end:)((char *)v77 - v13, v14, v15);
  v94 = v21;
  v117 = v22;
  v23 = v93;
  v24 = v93;
  v25 = v93;
  *(_QWORD *)&v127[v81] = v93;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v26 = v83;
  v27 = v117;
  v28 = v127;
  *(_QWORD *)&v127[v82] = v94;
  *(_QWORD *)&v28[v26] = v27;
  type metadata accessor for HKSampleQuery();
  v29 = v120;
  v84 = v91[12];
  v85 = v91[16];
  v86 = v91[20];
  outlined init with copy of DateInterval?(v127, v124);
  v30 = v85;
  v31 = v86;
  v32 = v91;
  v33 = v94;
  v34 = v117;
  v35 = v122;
  v36 = v124;
  v37 = v127;
  *(_QWORD *)&v124[v84] = v93;
  *(_QWORD *)&v36[v30] = v33;
  *(_QWORD *)&v36[v31] = v34;
  v116 = *(void **)&v36[v32[12]];
  v123 = *(_QWORD *)&v36[v32[16]];
  v87 = v32[12];
  v88 = v32[16];
  v89 = v32[20];
  outlined init with copy of DateInterval?(v37, v35);
  v38 = v88;
  v39 = v89;
  v40 = v90;
  v41 = v91;
  v42 = v94;
  v43 = v100;
  v44 = v103;
  v45 = v117;
  v46 = (uint64_t)v122;
  v47 = v102;
  *(_QWORD *)&v122[v87] = v93;
  *(_QWORD *)(v46 + v38) = v42;
  *(_QWORD *)(v46 + v39) = v45;
  v121 = *(id *)(v46 + v41[12]);
  v118 = *(_QWORD *)(v46 + v41[16]);
  (*(void (**)(char *, uint64_t, uint64_t))(v43 + 16))(v47, v40, v44);
  v48 = v120;
  v49 = v105;
  v50 = v107;
  v51 = v125;
  v92 = v91[12];
  v95 = v91[16];
  v96 = v91[20];
  outlined init with copy of DateInterval?(v127, v111);
  v52 = v94;
  v53 = v95;
  v54 = v96;
  v55 = v111;
  v56 = v117;
  v57 = v112;
  *(_QWORD *)&v111[v92] = v93;
  *(_QWORD *)&v55[v53] = v52;
  *(_QWORD *)&v55[v54] = v56;
  v58 = v57;
  v59 = v115;
  v101 = (*(unsigned __int8 *)(v100 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v100 + 80);
  v104 = (v101 + v97 + 7) & 0xFFFFFFFFFFFFFFF8;
  v106 = (v104 + 15) & 0xFFFFFFFFFFFFFFF8;
  v108 = (v106 + 15) & 0xFFFFFFFFFFFFFFF8;
  v109 = (v108 + 15) & 0xFFFFFFFFFFFFFFF8;
  v110 = (v109 + 8 + *(unsigned __int8 *)(v98 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v98 + 80);
  v113 = (v110 + v99 + 7) & 0xFFFFFFFFFFFFFFF8;
  v114 = (v113 + 15) & 0xFFFFFFFFFFFFFFF8;
  v119 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v100 + 32))(v119 + v101, v102, v103);
  v60 = v105;
  v61 = v106;
  v62 = v107;
  v63 = v108;
  v64 = v109;
  v65 = v110;
  v66 = v119;
  v67 = v125;
  v68 = v111;
  *(_QWORD *)(v119 + v104) = v120;
  *(_QWORD *)(v66 + v61) = v60;
  *(_QWORD *)(v66 + v63) = v62;
  *(_QWORD *)(v66 + v64) = v67;
  outlined init with take of (dateRange: DateInterval?, predicate: NSPredicate?, sortDescriptors: [NSSortDescriptor], limit: Int)(v68, (char *)(v66 + v65));
  v69 = v114;
  v70 = v115;
  v71 = v116;
  v72 = v117;
  v73 = v118;
  v74 = v119;
  v75 = v120;
  *(_QWORD *)(v119 + v113) = v112;
  *(_QWORD *)(v74 + v69) = v70;
  v126 = HKSampleQuery.__allocating_init(sampleType:predicate:limit:sortDescriptors:resultsHandler:)(v75, v71, v72, v73, (uint64_t)partial apply for closure #1 in closure #1 in HKHealthStore.query(correlationType:firstQuantityType:secondQuantityType:start:end:), v74);

  outlined destroy of DateInterval?((uint64_t)v122);
  swift_bridgeObjectRelease();
  outlined destroy of DateInterval?((uint64_t)v124);
  v128 = v126;
  objc_msgSend(v125, sel_executeQuery_);

  return outlined destroy of (dateRange: DateInterval?, predicate: NSPredicate?, sortDescriptors: [NSSortDescriptor], limit: Int)((uint64_t)v127);
}

void closure #1 in closure #1 in HKHealthStore.query(correlationType:firstQuantityType:secondQuantityType:start:end:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, void *a6, void *a7, uint64_t a8, char *a9, void *a10, void *a11)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  char *v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  id v41;
  char *v42;
  id v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  id v56;
  id v57;
  id v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  int *v65;
  int *v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  __n128 v74;
  uint64_t v75;
  _BYTE *v76;
  _BYTE *v77;
  _QWORD v78[2];
  uint64_t v79;
  uint8_t *v80;
  uint64_t v81;
  uint64_t v82;
  _BYTE **v83;
  uint64_t *v84;
  uint64_t *v85;
  uint64_t v86;
  char *v87;
  id *v88;
  char *v89;
  uint64_t *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  _QWORD *v103;
  _QWORD *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  _QWORD *v108;
  _QWORD *v109;
  _QWORD *v110;
  id v111;
  uint64_t v112;
  id v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unsigned int (*v118)(char *, uint64_t, int *);
  uint64_t v119;
  uint64_t KeyPath;
  uint64_t v121;
  unint64_t v122;
  unint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  _QWORD *v127;
  _QWORD *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  char *v134;
  unint64_t v135;
  unint64_t v136;
  uint64_t *v137;
  uint32_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  _QWORD *v148;
  uint64_t v149;
  NSObject *v150;
  int v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  unint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint8_t *v162;
  uint64_t v163;
  uint64_t v164;
  _BYTE **v165;
  uint64_t *v166;
  uint64_t *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t *v170;
  id v171;
  unint64_t v172;
  unint64_t v173;
  uint64_t *v174;
  uint32_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  _QWORD *v185;
  uint64_t v186;
  NSObject *v187;
  int v188;
  uint64_t v189;
  void *v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  unint64_t v194;
  uint64_t v195;
  int *v196;
  unint64_t v197;
  char *v198;
  uint64_t v199;
  uint64_t v200;
  unint64_t v201;
  char *v202;
  unint64_t v203;
  char *v204;
  unint64_t v205;
  char *v206;
  unint64_t v207;
  char *v208;
  int *v209;
  uint64_t v210;
  unint64_t v211;
  char *v212;
  unint64_t v213;
  char *v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  unint64_t v218;
  char *v219;
  uint64_t v220;
  id v221;
  id v222;
  id v223;
  uint64_t v224;
  void *v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  unint64_t v229;
  uint64_t v230;
  char *v231;
  uint64_t v232;
  char *v233;
  void *v234;
  char *v235;
  void *v236;
  uint64_t (*v237)(uint64_t, uint64_t, uint64_t);
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  _BYTE *v241[2];
  uint64_t v242;
  uint32_t v243;
  uint64_t v244;
  void *v245;
  _QWORD v246[2];
  _QWORD v247[2];
  _QWORD v248[2];
  _QWORD v249[2];
  _QWORD v250[2];
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t (*v266)(uint64_t, uint64_t, uint64_t);
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  _BYTE *v270[2];
  uint64_t v271;
  uint32_t v272;
  char v273;
  uint64_t v274;
  void *v275;
  char *v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  void *v282;
  uint64_t v283;
  uint64_t v284;
  char *v285;
  char *v286;
  char *v287;

  v232 = a1;
  v226 = a2;
  v236 = a3;
  v220 = a4;
  v221 = a5;
  v222 = a6;
  v223 = a7;
  v224 = a8;
  v233 = a9;
  v234 = a10;
  v225 = a11;
  v287 = 0;
  v286 = 0;
  v285 = 0;
  v284 = 0;
  v283 = 0;
  v282 = 0;
  v281 = 0;
  v280 = 0;
  v279 = 0;
  v278 = 0;
  v277 = 0;
  v276 = 0;
  v275 = 0;
  v274 = 0;
  v191 = 0;
  v265 = 0;
  v263 = 0;
  v259 = 0;
  v260 = 0;
  v257 = 0;
  v258 = 0;
  v255 = 0;
  v256 = 0;
  v253 = 0;
  v254 = 0;
  v251 = 0;
  v252 = 0;
  v245 = 0;
  v215 = 0;
  v192 = type metadata accessor for DateInterval();
  v193 = *(_QWORD *)(v192 - 8);
  v194 = (*(_QWORD *)(v193 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v192);
  v195 = (uint64_t)v78 - v194;
  v196 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (dateRange: DateInterval?, predicate: NSPredicate?, sortDescriptors: [NSSortDescriptor], limit: Int));
  v197 = (*(_QWORD *)(*((_QWORD *)v196 - 1) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v196);
  v198 = (char *)v78 - v197;
  v199 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Statistics<(first: Double, second: Double)>);
  v200 = *(_QWORD *)(v199 - 8);
  v201 = (*(_QWORD *)(v200 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v199);
  v202 = (char *)v78 - v201;
  v287 = (char *)v78 - v201;
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Statistics<(first: Double, second: Double)>?);
  v203 = (*(_QWORD *)(*(_QWORD *)(v11 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v11);
  v204 = (char *)v78 - v203;
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Statistics<Double>?);
  v205 = (*(_QWORD *)(*(_QWORD *)(v12 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v12);
  v206 = (char *)v78 - v205;
  v207 = (v13 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8]((char *)v78 - v205);
  v208 = (char *)v78 - v207;
  v209 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Statistics<Double>);
  v210 = *((_QWORD *)v209 - 1);
  v211 = (*(_QWORD *)(v210 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v209);
  v212 = (char *)v78 - v211;
  v286 = (char *)v78 - v211;
  v213 = (v14 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v15);
  v214 = (char *)v78 - v213;
  v285 = (char *)v78 - v213;
  v216 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<Statistics<(first: Double, second: Double)>?, Error>);
  v217 = *(_QWORD *)(v216 - 8);
  v218 = (*(_QWORD *)(v217 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v215);
  v219 = (char *)v78 - v218;
  v227 = type metadata accessor for Logger();
  v228 = *(_QWORD *)(v227 - 8);
  v230 = *(_QWORD *)(v228 + 64);
  v229 = (v230 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v236);
  v231 = (char *)v78 - v229;
  MEMORY[0x24BDAC7A8](v16);
  v235 = (char *)v78 - v17;
  v284 = v232;
  v283 = v18;
  v282 = v19;
  v281 = v20;
  v280 = v21;
  v279 = v22;
  v278 = v23;
  v277 = v24;
  v276 = v233;
  v275 = v234;
  v274 = v25;
  v26 = v19;
  if (v236)
  {
    v190 = v236;
    v27 = v235;
    v171 = v236;
    v245 = v236;
    v169 = Logger.wellnessIntents.unsafeMutableAddressor();
    v170 = &v244;
    v177 = 32;
    swift_beginAccess();
    (*(void (**)(char *, uint64_t, uint64_t))(v228 + 16))(v27, v169, v227);
    swift_endAccess();
    v28 = v171;
    v178 = 7;
    v179 = swift_allocObject();
    *(_QWORD *)(v179 + 16) = v171;
    v187 = Logger.logObject.getter();
    v188 = static os_log_type_t.error.getter();
    v174 = &v242;
    v242 = 12;
    v172 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    v173 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    lazy protocol witness table accessor for type Int and conformance Int();
    UnsignedInteger<>.init<A>(_:)();
    v175 = v243;
    v176 = 17;
    v181 = swift_allocObject();
    *(_BYTE *)(v181 + 16) = 64;
    v182 = swift_allocObject();
    *(_BYTE *)(v182 + 16) = 8;
    v29 = swift_allocObject();
    v30 = v179;
    v180 = v29;
    *(_QWORD *)(v29 + 16) = partial apply for implicit closure #1 in closure #1 in closure #1 in HKHealthStore.query(correlationType:firstQuantityType:secondQuantityType:start:end:);
    *(_QWORD *)(v29 + 24) = v30;
    v31 = swift_allocObject();
    v32 = v180;
    v184 = v31;
    *(_QWORD *)(v31 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:);
    *(_QWORD *)(v31 + 24) = v32;
    v186 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
    v183 = _allocateUninitializedArray<A>(_:)();
    v185 = v33;
    swift_retain();
    v34 = v181;
    v35 = v185;
    *v185 = partial apply for closure #1 in OSLogArguments.append(_:);
    v35[1] = v34;
    swift_retain();
    v36 = v182;
    v37 = v185;
    v185[2] = partial apply for closure #1 in OSLogArguments.append(_:);
    v37[3] = v36;
    swift_retain();
    v38 = v184;
    v39 = v185;
    v185[4] = partial apply for closure #1 in OSLogArguments.append(_:);
    v39[5] = v38;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(v187, (os_log_type_t)v188))
    {
      v40 = v191;
      v162 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      v161 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      v163 = createStorage<A>(capacity:type:)(1);
      v164 = createStorage<A>(capacity:type:)(0);
      v165 = v241;
      v241[0] = v162;
      v166 = &v240;
      v240 = v163;
      v167 = &v239;
      v239 = v164;
      serialize(_:at:)(2, v241);
      serialize(_:at:)(1, v165);
      v237 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v238 = v181;
      closure #1 in osLogInternal(_:log:type:)(&v237, (uint64_t)v165, (uint64_t)v166, (uint64_t)v167);
      v168 = v40;
      if (v40)
      {
        __break(1u);
      }
      else
      {
        v237 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
        v238 = v182;
        closure #1 in osLogInternal(_:log:type:)(&v237, (uint64_t)v241, (uint64_t)&v240, (uint64_t)&v239);
        v159 = 0;
        v237 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
        v238 = v184;
        closure #1 in osLogInternal(_:log:type:)(&v237, (uint64_t)v241, (uint64_t)&v240, (uint64_t)&v239);
        _os_log_impl(&dword_24749F000, v187, (os_log_type_t)v188, "Error while querying HealthKit for quantity samples: %@", v162, v175);
        destroyStorage<A>(_:count:)(v163, 1, v161);
        destroyStorage<A>(_:count:)(v164, 0, MEMORY[0x24BEE4AD8] + 8);
        MEMORY[0x24957D398](v162, MEMORY[0x24BEE4260]);
        swift_release();
        swift_release();
        swift_release();
      }
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
    }

    (*(void (**)(char *, uint64_t))(v228 + 8))(v235, v227);
    v41 = v171;
    v241[1] = v171;
    CheckedContinuation.resume(throwing:)();

    return;
  }
  swift_bridgeObjectRetain();
  if (v226)
  {
    v189 = v226;
    v156 = v226;
    v154 = 0;
    v155 = type metadata accessor for HKSample();
    type metadata accessor for HKCorrelation();
    v157 = _arrayConditionalCast<A, B>(_:)();
    swift_bridgeObjectRelease();
    v158 = v157;
  }
  else
  {
    v158 = 0;
  }
  v153 = v158;
  if (v158)
  {
    v152 = v153;
    v55 = v191;
    v126 = v153;
    v265 = v153;
    v264 = v153;
    v56 = v222;
    v57 = v223;
    (*(void (**)(char *, uint64_t, uint64_t))(v217 + 16))(v219, v220, v216);
    v127 = v78;
    MEMORY[0x24BDAC7A8](v78);
    v58 = v223;
    v59 = &v78[-6];
    v128 = &v78[-6];
    v59[2] = v222;
    v59[3] = v58;
    v59[4] = v60;
    v129 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [HKCorrelation]);
    v130 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (HKQuantitySample, HKQuantitySample));
    lazy protocol witness table accessor for type [HKCorrelation] and conformance [A]();
    v61 = Sequence.compactMap<A>(_:)();
    v131 = v55;
    v132 = v61;
    if (v55)
    {
      __break(1u);
    }
    else
    {
      v62 = v131;
      v119 = v132;

      (*(void (**)(char *, uint64_t))(v217 + 8))(v219, v216);
      v263 = v119;
      v262 = v119;
      KeyPath = swift_getKeyPath();
      swift_retain();
      v121 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(HKQuantitySample, HKQuantitySample)]);
      v122 = type metadata accessor for HKQuantitySample();
      v123 = lazy protocol witness table accessor for type [(HKQuantitySample, HKQuantitySample)] and conformance [A]();
      v63 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF((void (*)(char *, char *))partial apply for implicit closure #3 in closure #1 in closure #1 in HKHealthStore.query(correlationType:firstQuantityType:secondQuantityType:start:end:), KeyPath, v121, v122, MEMORY[0x24BEE4078], v123, MEMORY[0x24BEE40A8], v160);
      v124 = v62;
      v125 = v63;
      if (!v62)
      {
        v117 = v125;
        swift_release();
        swift_release();
        HKHealthStore.computeStatistics(queryDateRange:samples:unit:)(v233, v117, v234, v208);
        swift_bridgeObjectRelease();
        v118 = *(unsigned int (**)(char *, uint64_t, int *))(v210 + 48);
        if (v118(v208, 1, v209) == 1)
        {
          outlined destroy of Statistics<Double>?((uint64_t)v208);
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v200 + 56))(v204, 1, 1, v199);
          CheckedContinuation.resume(returning:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          return;
        }
        v64 = v124;
        outlined init with take of Statistics<Double>(v208, v214);
        v261 = v119;
        v115 = swift_getKeyPath();
        swift_retain();
        v116 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF((void (*)(char *, char *))partial apply for implicit closure #3 in closure #1 in closure #1 in HKHealthStore.query(correlationType:firstQuantityType:secondQuantityType:start:end:), v115, v121, v122, MEMORY[0x24BEE4078], v123, MEMORY[0x24BEE40A8], v160);
        if (!v64)
        {
          v114 = v116;
          swift_release();
          swift_release();
          HKHealthStore.computeStatistics(queryDateRange:samples:unit:)(v233, v114, v225, v206);
          swift_bridgeObjectRelease();
          if (v118(v206, 1, v209) == 1)
          {
            outlined destroy of Statistics<Double>?((uint64_t)v206);
            (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v200 + 56))(v204, 1, 1, v199);
            CheckedContinuation.resume(returning:)();
          }
          else
          {
            outlined init with take of Statistics<Double>(v206, v212);
            v93 = *(_QWORD *)&v214[v209[10]];
            v94 = *(_QWORD *)&v212[v209[10]];
            v259 = v93;
            v260 = v94;
            v95 = *(_QWORD *)&v214[v209[10] + 8];
            v96 = *(_QWORD *)&v212[v209[10] + 8];
            v257 = v95;
            v258 = v96;
            v97 = *(_QWORD *)&v214[v209[11]];
            v98 = *(_QWORD *)&v212[v209[11]];
            v255 = v97;
            v256 = v98;
            v99 = *(_QWORD *)&v214[v209[12]];
            v100 = *(_QWORD *)&v212[v209[12]];
            v253 = v99;
            v254 = v100;
            v101 = *(_QWORD *)&v214[v209[13]];
            v102 = *(_QWORD *)&v212[v209[13]];
            v251 = v101;
            v252 = v102;
            v87 = &v198[v196[12]];
            v89 = &v198[v196[16]];
            v92 = v196[20];
            v88 = (id *)&v233[v196[12]];
            v90 = (uint64_t *)&v233[v196[16]];
            v91 = v196[20];
            outlined init with copy of DateInterval?(v233, v198);
            outlined init with copy of NSPredicate?(v88, v87);
            outlined init with copy of [NSSortDescriptor](v90, v89);
            v65 = v196;
            v66 = v209;
            v67 = v193;
            v68 = v192;
            v69 = v198;
            v70 = v214;
            v71 = v195;
            *(_QWORD *)&v198[v92] = *(_QWORD *)&v233[v91];
            v113 = *(id *)&v69[v65[12]];
            v112 = *(_QWORD *)&v69[v65[16]];
            (*(void (**)(uint64_t, char *, uint64_t))(v67 + 16))(v71, &v70[v66[7]], v68);
            v105 = MEMORY[0x24957D110](v119, v130);
            v111 = objc_msgSend(v234, sel_unitString);
            v106 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            v107 = v72;
            v108 = v250;
            v250[0] = v93;
            v250[1] = v94;
            v109 = v249;
            v249[0] = v95;
            v249[1] = v96;
            v110 = v248;
            v248[0] = v97;
            v248[1] = v98;
            v103 = v247;
            v247[0] = v99;
            v247[1] = v100;
            v104 = v246;
            v246[0] = v101;
            v246[1] = v102;
            v73 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (first: Double, second: Double));
            Statistics.init(queryDateRange:dataDateRange:sampleCount:unit:valueRange:latestValue:averageValue:totalValue:)(v198, v195, v105, v106, v107, (uint64_t)v108, (uint64_t)v109, (uint64_t)v110, v202, (uint64_t)v103, (uint64_t)v104, v73);

            swift_bridgeObjectRelease();
            v74 = outlined init with copy of Statistics<(first: Double, second: Double)>(v202, v204);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t, __n128))(v200 + 56))(v204, 0, 1, v199, v74);
            CheckedContinuation.resume(returning:)();
            outlined destroy of Statistics<(first: Double, second: Double)>((uint64_t)v202);
            outlined destroy of Statistics<Double>((uint64_t)v212);
          }
          outlined destroy of Statistics<Double>((uint64_t)v214);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          return;
        }
LABEL_37:
        __break(1u);
        return;
      }
    }
    __break(1u);
    goto LABEL_37;
  }
  v42 = v231;
  v133 = Logger.wellnessIntents.unsafeMutableAddressor();
  v134 = &v273;
  v140 = 32;
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v228 + 16))(v42, v133, v227);
  swift_endAccess();
  v43 = v221;
  v141 = 7;
  v142 = swift_allocObject();
  *(_QWORD *)(v142 + 16) = v221;
  v150 = Logger.logObject.getter();
  v151 = static os_log_type_t.error.getter();
  v137 = &v271;
  v271 = 12;
  v135 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  v136 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  v138 = v272;
  v139 = 17;
  v144 = swift_allocObject();
  *(_BYTE *)(v144 + 16) = 32;
  v145 = swift_allocObject();
  *(_BYTE *)(v145 + 16) = 8;
  v44 = swift_allocObject();
  v45 = v142;
  v143 = v44;
  *(_QWORD *)(v44 + 16) = partial apply for implicit closure #2 in closure #1 in closure #1 in HKHealthStore.query(correlationType:firstQuantityType:secondQuantityType:start:end:);
  *(_QWORD *)(v44 + 24) = v45;
  v46 = swift_allocObject();
  v47 = v143;
  v147 = v46;
  *(_QWORD *)(v46 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:);
  *(_QWORD *)(v46 + 24) = v47;
  v149 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
  v146 = _allocateUninitializedArray<A>(_:)();
  v148 = v48;
  swift_retain();
  v49 = v144;
  v50 = v148;
  *v148 = partial apply for closure #1 in OSLogArguments.append(_:);
  v50[1] = v49;
  swift_retain();
  v51 = v145;
  v52 = v148;
  v148[2] = partial apply for closure #1 in OSLogArguments.append(_:);
  v52[3] = v51;
  swift_retain();
  v53 = v147;
  v54 = v148;
  v148[4] = partial apply for closure #1 in OSLogArguments.append(_:);
  v54[5] = v53;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(v150, (os_log_type_t)v151))
  {
    v75 = v191;
    v80 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    v79 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    v81 = createStorage<A>(capacity:type:)(0);
    v82 = createStorage<A>(capacity:type:)(1);
    v83 = v270;
    v270[0] = v80;
    v84 = &v269;
    v269 = v81;
    v85 = &v268;
    v268 = v82;
    serialize(_:at:)(2, v270);
    serialize(_:at:)(1, v83);
    v266 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v267 = v144;
    closure #1 in osLogInternal(_:log:type:)(&v266, (uint64_t)v83, (uint64_t)v84, (uint64_t)v85);
    v86 = v75;
    if (v75)
    {
      __break(1u);
    }
    else
    {
      v266 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v267 = v145;
      closure #1 in osLogInternal(_:log:type:)(&v266, (uint64_t)v270, (uint64_t)&v269, (uint64_t)&v268);
      v78[1] = 0;
      v266 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v267 = v147;
      closure #1 in osLogInternal(_:log:type:)(&v266, (uint64_t)v270, (uint64_t)&v269, (uint64_t)&v268);
      _os_log_impl(&dword_24749F000, v150, (os_log_type_t)v151, "Samples returned for %s were not correlations", v80, v138);
      destroyStorage<A>(_:count:)(v81, 0, v79);
      destroyStorage<A>(_:count:)(v82, 1, MEMORY[0x24BEE4AD8] + 8);
      MEMORY[0x24957D398](v80, MEMORY[0x24BEE4260]);
      swift_release();
      swift_release();
      swift_release();
    }
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
  }

  (*(void (**)(char *, uint64_t))(v228 + 8))(v231, v227);
  lazy protocol witness table accessor for type HKHealthStore.Error and conformance HKHealthStore.Error();
  v76 = (_BYTE *)swift_allocError();
  *v77 = 0;
  v270[1] = v76;
  CheckedContinuation.resume(throwing:)();
}

uint64_t closure #1 in closure #1 in closure #1 in HKHealthStore.query(correlationType:firstQuantityType:secondQuantityType:start:end:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  double v5;
  id *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  id v13;
  _QWORD *v14;
  id v15;
  uint64_t result;
  char *v17;
  uint64_t *v18;
  uint64_t **v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE *v23;
  _QWORD *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint8_t *v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t *v35;
  uint64_t **v36;
  uint64_t *v37;
  uint64_t *v38;
  uint64_t **v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t *v46;
  uint32_t v47;
  int v48;
  NSObject *v49;
  uint64_t v50;
  id v51;
  uint64_t v52;
  void *v53;
  void *v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  id v58;
  uint64_t v59;
  void *v60;
  void *v61;
  void *v62;
  id v63;
  id v64;
  _QWORD *v65;
  uint64_t v66;
  void *v67;
  void *v68;
  void *v69;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  id v73;
  uint64_t v74;
  void *v75;
  void *v76;
  void *v77;
  _QWORD *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  char *v87;
  id v88;
  uint64_t v89;
  unint64_t v90;
  id v91;
  unint64_t v92;
  uint64_t v93;
  unint64_t v94;
  _QWORD *v95;
  uint64_t v96;
  void *v97;
  void *v98;
  _QWORD v99[2];
  void *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  _BYTE *v104;
  uint64_t v105;
  uint64_t v106;
  uint32_t v107;
  char v108;
  _QWORD v109[2];
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  id v113;

  v78 = a5;
  v83 = a1;
  v82 = a2;
  v80 = a3;
  v81 = a4;
  v113 = 0;
  v112 = 0;
  v111 = 0;
  v110 = 0;
  v100 = 0;
  v98 = 0;
  v89 = 0;
  v84 = type metadata accessor for Logger();
  v85 = *(_QWORD *)(v84 - 8);
  v86 = (*(_QWORD *)(v85 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v5 = MEMORY[0x24BDAC7A8](v83);
  v87 = (char *)&v25 - v86;
  v88 = *v6;
  v113 = v88;
  v112 = v7;
  v111 = v8;
  v110 = v9;
  v91 = objc_msgSend(v88, sel_objectsForType_, v5);
  v90 = type metadata accessor for HKSample();
  v92 = lazy protocol witness table accessor for type HKSample and conformance NSObject();
  v96 = static Set._unconditionallyBridgeFromObjectiveC(_:)();
  swift_bridgeObjectRetain();
  v95 = v109;
  v109[0] = v96;
  v93 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Set<HKSample>);
  v94 = lazy protocol witness table accessor for type Set<HKSample> and conformance Set<A>();
  Collection.first.getter();
  outlined destroy of [HKQuantityType]();
  v97 = (void *)v109[1];
  swift_bridgeObjectRelease();
  if (v97)
  {
    v77 = v97;
    v73 = v97;
    objc_opt_self();
    v10 = swift_dynamicCastObjCClass();
    v74 = v10;
    if (v10)
    {
      v72 = v74;
    }
    else
    {
      v71 = 0;

      v72 = v71;
    }
    v70 = (void *)v72;

    v76 = v70;
  }
  else
  {
    v75 = 0;

    v76 = v75;
  }
  v69 = v76;
  if (v76)
  {
    v68 = v69;
    v63 = v69;
    v100 = v69;
    v64 = objc_msgSend(v88, sel_objectsForType_, v80);
    v66 = static Set._unconditionallyBridgeFromObjectiveC(_:)();
    swift_bridgeObjectRetain();
    v65 = v99;
    v99[0] = v66;
    Collection.first.getter();
    outlined destroy of [HKQuantityType]();
    v67 = (void *)v99[1];
    swift_bridgeObjectRelease();
    if (v67)
    {
      v62 = v67;
      v58 = v67;
      objc_opt_self();
      v11 = swift_dynamicCastObjCClass();
      v59 = v11;
      if (v11)
      {
        v57 = v59;
      }
      else
      {
        v56 = 0;

        v57 = v56;
      }
      v55 = (void *)v57;

      v61 = v55;
    }
    else
    {
      v60 = 0;

      v61 = v60;
    }
    v54 = v61;
    if (v61)
    {
      v53 = v54;
      v51 = v54;
      v98 = v54;
      v12 = v63;
      v13 = v51;
      v14 = v78;
      v15 = v51;
      *v78 = v63;
      v14[1] = v15;

      result = v79;
      v52 = v79;
      return result;
    }

  }
  v17 = v87;
  v42 = Logger.wellnessIntents.unsafeMutableAddressor();
  v43 = &v108;
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v85 + 16))(v17, v42, v84);
  swift_endAccess();
  v49 = Logger.logObject.getter();
  v48 = static os_log_type_t.error.getter();
  v46 = &v106;
  v106 = 2;
  v44 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  v45 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  v47 = v107;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
  v50 = _allocateUninitializedArray<A>(_:)();
  if (os_log_type_enabled(v49, (os_log_type_t)v48))
  {
    v31 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    v30 = 0;
    v32 = createStorage<A>(capacity:type:)(0);
    v33 = createStorage<A>(capacity:type:)(v30);
    v37 = (uint64_t *)&v104;
    v104 = v31;
    v38 = &v103;
    v103 = v32;
    v35 = &v102;
    v102 = v33;
    v34 = 0;
    serialize(_:at:)(0, &v104);
    serialize(_:at:)(v34, (_BYTE **)v37);
    v101 = v50;
    v36 = &v25;
    MEMORY[0x24BDAC7A8](&v25);
    v18 = v38;
    v19 = &v25 - 6;
    v39 = &v25 - 6;
    v19[2] = v37;
    v19[3] = v18;
    v19[4] = v20;
    v40 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
    lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
    v21 = v79;
    Sequence.forEach(_:)();
    v41 = v21;
    if (v21)
    {
      __break(1u);
    }
    else
    {
      _os_log_impl(&dword_24749F000, v49, (os_log_type_t)v48, "Unable to extract quantities from correlation due to wrong identifiers. Programmer Error.", v31, v47);
      v27 = 0;
      destroyStorage<A>(_:count:)(v32, 0, v29);
      destroyStorage<A>(_:count:)(v33, v27, MEMORY[0x24BEE4AD8] + 8);
      MEMORY[0x24957D398](v31, MEMORY[0x24BEE4260]);
      swift_bridgeObjectRelease();
      v28 = v41;
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    v28 = v79;
  }
  v26 = v28;

  (*(void (**)(char *, uint64_t))(v85 + 8))(v87, v84);
  lazy protocol witness table accessor for type HKHealthStore.Error and conformance HKHealthStore.Error();
  v22 = swift_allocError();
  *v23 = 0;
  v25 = &v105;
  v105 = v22;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<Statistics<(first: Double, second: Double)>?, Error>);
  CheckedContinuation.resume(throwing:)();
  v24 = v78;
  result = v26;
  *v78 = 0;
  v24[1] = 0;
  return result;
}

uint64_t implicit closure #3 in closure #1 in closure #1 in HKHealthStore.query(correlationType:firstQuantityType:secondQuantityType:start:end:)(uint64_t a1)
{
  id v1;
  id v2;
  id v4;
  id v5;
  id v6[2];

  v4 = *(id *)a1;
  v5 = *(id *)(a1 + 8);
  v1 = *(id *)a1;
  v2 = v5;
  swift_retain();
  v6[0] = v4;
  v6[1] = v5;
  swift_getAtKeyPath();
  outlined destroy of (HKQuantitySample, HKQuantitySample)(v6);
  return swift_release();
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF(void (*a1)(char *, char *), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v14;
  _QWORD v15[2];
  void (*v16)(char *, _QWORD);
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t i;
  uint64_t v29;
  void (*v30)(char *, char *);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  const char *v35;
  const char *v36;
  const char *v37;
  const char *v38;
  const char *v39;
  const char *v40;
  uint64_t v41;
  unint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t AssociatedTypeWitness;
  uint64_t v47;
  unint64_t v48;
  char *v49;
  unint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  char *v57;
  unint64_t v58;
  char *v59;
  Swift::Int v60;
  char v61;
  uint64_t v62;
  char v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;

  v30 = a1;
  v31 = a2;
  v53 = a3;
  v44 = a4;
  v32 = a5;
  v52 = a6;
  v34 = a8;
  v35 = "Fatal error";
  v36 = "Index out of bounds";
  v37 = "Swift/Collection.swift";
  v38 = "Range requires lowerBound <= upperBound";
  v39 = "Swift/Range.swift";
  v40 = "Index out of range";
  v67 = a3;
  v66 = a4;
  v65 = a5;
  v41 = *(_QWORD *)(a5 - 8);
  v42 = (*(_QWORD *)(v41 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](a1);
  v43 = (char *)v15 - v42;
  v45 = 0;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v47 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v48 = (*(_QWORD *)(v47 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v8 = MEMORY[0x24BDAC7A8](v45);
  v49 = (char *)v15 - v48;
  v50 = (*(_QWORD *)(*(_QWORD *)(v9 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v8);
  v51 = (char *)v15 - v50;
  v54 = swift_getAssociatedTypeWitness();
  v55 = *(_QWORD *)(v54 - 8);
  v56 = (*(_QWORD *)(v55 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v10 = MEMORY[0x24BDAC7A8](v53);
  v57 = (char *)v15 - v56;
  v58 = (v11 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v10);
  v59 = (char *)v15 - v58;
  v60 = dispatch thunk of Collection.count.getter();
  if (v60)
  {
    v64 = MEMORY[0x24957D4A0](v44);
    v29 = type metadata accessor for ContiguousArray();
    ContiguousArray.reserveCapacity(_:)(v60);
    result = dispatch thunk of Collection.startIndex.getter();
    if (v60 >= 0)
    {
      v27 = 0;
      for (i = v33; ; i = v18)
      {
        v25 = i;
        v26 = v27;
        if (v27 == v60)
          goto LABEL_17;
        if (v26 < 0 || v26 >= v60)
          goto LABEL_16;
        v62 = v26;
        if (v60 < 0)
          goto LABEL_15;
        if (v26 >= v60)
          break;
        v24 = v26 + 1;
        if (__OFADD__(v26, 1))
        {
          __break(1u);
          return result;
        }
        v63 = 0;
        v23 = v24;
LABEL_18:
        v22 = v23;
        if ((v63 & 1) != 0)
        {
          (*(void (**)(char *, char *, uint64_t))(v55 + 32))(v57, v59, v54);
          _expectEnd<A>(of:is:)();
          (*(void (**)(char *, uint64_t))(v55 + 8))(v57, v54);
          v19 = v64;
          swift_retain();
          swift_release();
          v20 = v19;
          v21 = v25;
          return v20;
        }
        v17 = &v61;
        v16 = (void (*)(char *, _QWORD))dispatch thunk of Collection.subscript.read();
        (*(void (**)(char *))(v47 + 16))(v49);
        v16(v17, 0);
        v14 = v25;
        v30(v49, v43);
        v18 = v14;
        if (v14)
        {
          (*(void (**)(char *, uint64_t))(v47 + 8))(v49, AssociatedTypeWitness);
          (*(void (**)(char *, uint64_t))(v55 + 8))(v59, v54);
          outlined destroy of ContiguousArray<A1>();
          (*(void (**)(uint64_t, char *, uint64_t))(v41 + 32))(v34, v43, v32);
          return v15[1];
        }
        (*(void (**)(char *, uint64_t))(v47 + 8))(v49, AssociatedTypeWitness);
        ContiguousArray.append(_:)();
        dispatch thunk of Collection.formIndex(after:)();
        result = v18;
        v27 = v22;
      }
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
LABEL_15:
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
LABEL_16:
      _fatalErrorMessage(_:_:file:line:flags:)();
      __break(1u);
LABEL_17:
      v62 = 0;
      v63 = 1;
      v23 = v26;
      goto LABEL_18;
    }
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  v20 = static Array._allocateUninitialized(_:)();
  v21 = v33;
  return v20;
}

uint64_t closure #1 in HKHealthStore.queryParameters(start:end:)@<X0>(uint64_t a1@<X0>, const void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const void *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v13;
  void (*v14)(char *, char *, uint64_t);
  void (*v15)(char *, uint64_t);
  void (*v16)(char *, uint64_t, uint64_t);
  uint64_t v17;
  unint64_t v18;
  char *v19;
  unint64_t v20;
  const void *v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  unint64_t v25;
  char *v26;
  unint64_t v27;
  uint64_t v28;
  char *v29;
  unint64_t v30;
  char *v31;
  _QWORD *v32;
  uint64_t v33;
  char *v34;
  unsigned int (*v35)(char *, uint64_t, uint64_t);
  uint64_t v36;
  const void *v37;
  char *v38;
  char *v39;

  v17 = a3;
  v22 = a1;
  v21 = a2;
  v39 = 0;
  v38 = 0;
  v37 = 0;
  v36 = 0;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  v18 = (*(_QWORD *)(*(_QWORD *)(v3 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v3);
  v19 = (char *)&v14 - v18;
  v20 = (v4 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8]((char *)&v14 - v18);
  v34 = (char *)&v14 - v20;
  v33 = type metadata accessor for Date();
  v32 = *(_QWORD **)(v33 - 8);
  v28 = v32[8];
  v23 = (v28 + 15) & 0xFFFFFFFFFFFFFFF0;
  v5 = MEMORY[0x24BDAC7A8](v22);
  v24 = (char *)&v14 - v23;
  v25 = (v28 + 15) & 0xFFFFFFFFFFFFFFF0;
  v6 = MEMORY[0x24BDAC7A8](v5);
  v26 = (char *)&v14 - v25;
  v27 = (v28 + 15) & 0xFFFFFFFFFFFFFFF0;
  v7 = MEMORY[0x24BDAC7A8](v6);
  v29 = (char *)&v14 - v27;
  v39 = (char *)&v14 - v27;
  v30 = (v28 + 15) & 0xFFFFFFFFFFFFFFF0;
  v8 = (const void *)MEMORY[0x24BDAC7A8](v7);
  v31 = (char *)&v14 - v30;
  v38 = (char *)&v14 - v30;
  v37 = v8;
  v36 = v9;
  outlined init with copy of Date?(v8, v10);
  v35 = (unsigned int (*)(char *, uint64_t, uint64_t))v32[6];
  if (v35(v34, 1, v33) == 1)
  {
    outlined destroy of Date?((uint64_t)v34);
  }
  else
  {
    v16 = (void (*)(char *, uint64_t, uint64_t))v32[4];
    v16(v31, (uint64_t)v34, v33);
    outlined init with copy of Date?(v21, v19);
    if (v35(v19, 1, v33) != 1)
    {
      v16(v29, (uint64_t)v19, v33);
      v14 = (void (*)(char *, char *, uint64_t))v32[2];
      v14(v26, v31, v33);
      v14(v24, v29, v33);
      DateInterval.init(start:end:)();
      v11 = type metadata accessor for DateInterval();
      (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v17, 0, 1);
      v15 = (void (*)(char *, uint64_t))v32[1];
      v15(v29, v33);
      return ((uint64_t (*)(char *, uint64_t))v15)(v31, v33);
    }
    outlined destroy of Date?((uint64_t)v19);
    ((void (*)(char *, uint64_t))v32[1])(v31, v33);
  }
  v13 = type metadata accessor for DateInterval();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v17, 1);
}

id closure #2 in HKHealthStore.queryParameters(start:end:)(uint64_t a1, const void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  const void *v6;
  uint64_t v7;
  void *v8;
  char *v9;
  NSDate v10;
  char *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v15;
  void (*v16)(char *, char *, uint64_t);
  uint64_t v17;
  uint64_t v18;
  id v19;
  Class v20;
  Class isa;
  void (*v22)(char *, uint64_t);
  id v23;
  void (*v25)(char *, uint64_t, uint64_t);
  unint64_t v26;
  char *v27;
  unint64_t v28;
  const void *v29;
  uint64_t v30;
  unint64_t v31;
  char *v32;
  unint64_t v33;
  uint64_t v34;
  char *v35;
  unint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int (*v41)(uint64_t, uint64_t, uint64_t);
  uint64_t v42;
  uint64_t v43;
  const void *v44;
  char *v45;
  char *v46;

  v30 = a1;
  v29 = a2;
  v46 = 0;
  v45 = 0;
  v44 = 0;
  v43 = 0;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  v26 = (*(_QWORD *)(*(_QWORD *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v2);
  v27 = (char *)&v15 - v26;
  v28 = (v3 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8]((char *)&v15 - v26);
  v40 = (uint64_t)&v15 - v28;
  v39 = type metadata accessor for Date();
  v38 = *(_QWORD *)(v39 - 8);
  v34 = *(_QWORD *)(v38 + 64);
  v31 = (v34 + 15) & 0xFFFFFFFFFFFFFFF0;
  v4 = MEMORY[0x24BDAC7A8](v30);
  v32 = (char *)&v15 - v31;
  v33 = (v34 + 15) & 0xFFFFFFFFFFFFFFF0;
  v5 = MEMORY[0x24BDAC7A8](v4);
  v35 = (char *)&v15 - v33;
  v46 = (char *)&v15 - v33;
  v36 = (v34 + 15) & 0xFFFFFFFFFFFFFFF0;
  v6 = (const void *)MEMORY[0x24BDAC7A8](v5);
  v37 = (char *)&v15 - v36;
  v45 = (char *)&v15 - v36;
  v44 = v6;
  v43 = v7;
  outlined init with copy of Date?(v6, v8);
  v41 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v38 + 48);
  if (v41(v40, 1, v39) == 1)
  {
    outlined destroy of Date?(v40);
    return 0;
  }
  v25 = *(void (**)(char *, uint64_t, uint64_t))(v38 + 32);
  v25(v37, v40, v39);
  outlined init with copy of Date?(v29, v27);
  if (v41((uint64_t)v27, 1, v39) == 1)
  {
    outlined destroy of Date?((uint64_t)v27);
    (*(void (**)(char *, uint64_t))(v38 + 8))(v37, v39);
    return 0;
  }
  v9 = v32;
  v25(v35, (uint64_t)v27, v39);
  v19 = (id)objc_opt_self();
  v16 = *(void (**)(char *, char *, uint64_t))(v38 + 16);
  v16(v9, v37, v39);
  v10.super.isa = Date._bridgeToObjectiveC()().super.isa;
  v11 = v32;
  isa = v10.super.isa;
  v22 = *(void (**)(char *, uint64_t))(v38 + 8);
  v22(v32, v39);
  v16(v11, v35, v39);
  v20 = Date._bridgeToObjectiveC()().super.isa;
  v22(v32, v39);
  type metadata accessor for HKQueryOptions();
  v17 = 1;
  v12 = _allocateUninitializedArray<A>(_:)();
  *v13 = v17;
  _finalizeUninitializedArray<A>(_:)();
  v18 = v12;
  lazy protocol witness table accessor for type HKQueryOptions and conformance HKQueryOptions();
  SetAlgebra<>.init(arrayLiteral:)();
  v23 = objc_msgSend(v19, sel_predicateForSamplesWithStartDate_endDate_options_, isa, v20, v42);

  v22(v35, v39);
  v22(v37, v39);
  return v23;
}

void __swiftcall NSSortDescriptor.__allocating_init(key:ascending:)(NSSortDescriptor *__return_ptr retstr, Swift::String_optional key, Swift::Bool ascending)
{
  id v3;
  void *object;
  uint64_t countAndFlagsBits;

  countAndFlagsBits = key.value._countAndFlagsBits;
  object = key.value._object;
  v3 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  @nonobjc NSSortDescriptor.init(key:ascending:)(countAndFlagsBits, (uint64_t)object);
}

uint64_t closure #1 in HKHealthStore.computeStatistics(queryDateRange:samples:unit:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  id *v4;
  id *v5;
  id v6;
  id v7;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  id v13;
  unint64_t v14;
  id v15;
  uint64_t v16;
  char *v17;
  id v18;
  char *v19;
  uint64_t v20;
  void (*v21)(char *, uint64_t);
  id v22;
  int v23;
  id v24;
  id v25;

  v10 = a1;
  v9 = a2;
  v25 = 0;
  v24 = 0;
  v20 = type metadata accessor for Date();
  v16 = *(_QWORD *)(v20 - 8);
  v11 = (*(_QWORD *)(v16 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2 = MEMORY[0x24BDAC7A8](v10);
  v17 = (char *)&v9 - v11;
  v12 = (v3 + 15) & 0xFFFFFFFFFFFFFFF0;
  v4 = (id *)MEMORY[0x24BDAC7A8](v2);
  v19 = (char *)&v9 - v12;
  v13 = *v4;
  v25 = v13;
  v15 = *v5;
  v24 = v15;
  v6 = v13;
  v14 = 0x1F2DCC000uLL;
  v22 = objc_msgSend(v13, (SEL)0x1F2DCCC48, v9);
  static Date._unconditionallyBridgeFromObjectiveC(_:)();

  v7 = v15;
  v18 = objc_msgSend(v15, (SEL)(v14 + 3144));
  static Date._unconditionallyBridgeFromObjectiveC(_:)();

  v23 = static Date.< infix(_:_:)();
  v21 = *(void (**)(char *, uint64_t))(v16 + 8);
  v21(v17, v20);

  v21(v19, v20);
  return v23 & 1;
}

uint64_t closure #2 in HKHealthStore.computeStatistics(queryDateRange:samples:unit:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  id *v4;
  id *v5;
  id v6;
  id v7;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  id v13;
  unint64_t v14;
  id v15;
  uint64_t v16;
  char *v17;
  id v18;
  char *v19;
  uint64_t v20;
  void (*v21)(char *, uint64_t);
  id v22;
  int v23;
  id v24;
  id v25;

  v10 = a1;
  v9 = a2;
  v25 = 0;
  v24 = 0;
  v20 = type metadata accessor for Date();
  v16 = *(_QWORD *)(v20 - 8);
  v11 = (*(_QWORD *)(v16 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2 = MEMORY[0x24BDAC7A8](v10);
  v17 = (char *)&v9 - v11;
  v12 = (v3 + 15) & 0xFFFFFFFFFFFFFFF0;
  v4 = (id *)MEMORY[0x24BDAC7A8](v2);
  v19 = (char *)&v9 - v12;
  v13 = *v4;
  v25 = v13;
  v15 = *v5;
  v24 = v15;
  v6 = v13;
  v14 = 0x1F351F000uLL;
  v22 = objc_msgSend(v13, (SEL)0x1F351FF48, v9);
  static Date._unconditionallyBridgeFromObjectiveC(_:)();

  v7 = v15;
  v18 = objc_msgSend(v15, (SEL)(v14 + 3912));
  static Date._unconditionallyBridgeFromObjectiveC(_:)();

  v23 = static Date.< infix(_:_:)();
  v21 = *(void (**)(char *, uint64_t))(v16 + 8);
  v21(v17, v20);

  v21(v19, v20);
  return v23 & 1;
}

double closure #3 in HKHealthStore.computeStatistics(queryDateRange:samples:unit:)@<D0>(id *a1@<X0>, uint64_t a2@<X1>, double *a3@<X8>)
{
  double v3;
  double result;
  id v6;
  double v8;

  v6 = objc_msgSend(*a1, sel_quantity);
  objc_msgSend(v6, sel_doubleValueForUnit_, a2);
  v8 = v3;

  result = v8;
  *a3 = v8;
  return result;
}

double implicit closure #4 in HKHealthStore.computeStatistics(queryDateRange:samples:unit:)@<D0>(double *a1@<X0>, double *a2@<X1>, double *a3@<X8>)
{
  double result;

  result = *a1 + *a2;
  *a3 = result;
  return result;
}

id @nonobjc HKUnitPreferenceController.init(healthStore:)(void *a1)
{
  void *v1;
  id v4;

  v4 = objc_msgSend(v1, sel_initWithHealthStore_);

  return v4;
}

id @nonobjc NSNumber.init(value:)()
{
  void *v0;

  return objc_msgSend(v0, sel_initWithDouble_);
}

id @nonobjc HKSampleQuery.init(sampleType:predicate:limit:sortDescriptors:resultsHandler:)(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  const void *v7;
  id v8;
  Class isa;
  Class v10;
  void *v16;
  uint64_t aBlock;
  int v18;
  int v19;
  uint64_t (*v20)(uint64_t, void *, void *, void *);
  void *v21;
  uint64_t v22;
  uint64_t v23;

  if (a4)
  {
    type metadata accessor for NSSortDescriptor();
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    v10 = isa;
  }
  else
  {
    v10 = 0;
  }
  v22 = a5;
  v23 = a6;
  aBlock = MEMORY[0x24BDAC760];
  v18 = 1107296256;
  v19 = 0;
  v20 = thunk for @escaping @callee_guaranteed (@guaranteed HKSampleQuery, @guaranteed [HKSample]?, @guaranteed Error?) -> ();
  v21 = &block_descriptor_225;
  v7 = _Block_copy(&aBlock);
  v8 = objc_msgSend(v16, sel_initWithSampleType_predicate_limit_sortDescriptors_resultsHandler_, a1, a2, a3, v10);
  _Block_release(v7);
  swift_release();

  return v8;
}

uint64_t thunk for @escaping @callee_guaranteed (@guaranteed HKSampleQuery, @guaranteed [HKSample]?, @guaranteed Error?) -> ()(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v4;
  id v5;
  id v6;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void (*v12)(void *, uint64_t);

  v12 = *(void (**)(void *, uint64_t))(a1 + 32);
  swift_retain();
  v4 = a2;
  v5 = a3;
  if (a3)
  {
    type metadata accessor for HKSample();
    v9 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    v10 = v9;
  }
  else
  {
    v10 = 0;
  }
  v6 = a4;
  if (a4)
    v8 = a4;
  else
    v8 = 0;
  v12(a2, v10);

  swift_bridgeObjectRelease();
  return swift_release();
}

id @nonobjc NSSortDescriptor.init(key:ascending:)(uint64_t a1, uint64_t a2)
{
  id v3;
  uint64_t v4;
  void *v5;
  void *v6;

  if (a2)
  {
    v4 = MEMORY[0x24957CFB4](a1);
    swift_bridgeObjectRelease();
    v5 = (void *)v4;
  }
  else
  {
    v5 = 0;
  }
  v3 = objc_msgSend(v6, sel_initWithKey_ascending_);

  return v3;
}

void *implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:attributes:)(void (*a1)(void))
{
  id v1;
  void *v3;

  a1();
  v3 = (void *)_swift_stdlib_bridgeErrorToNSError();
  v1 = v3;
  swift_unknownObjectRelease();
  return v3;
}

uint64_t sub_2474E057C()
{
  return swift_deallocObject();
}

uint64_t sub_2474E05A4()
{
  return swift_deallocObject();
}

uint64_t sub_2474E05CC()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2474E0608()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2474E06B4()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t sub_2474E06F0()
{
  uint64_t v0;

  return swift_deallocObject();
}

void *partial apply for implicit closure #10 in getPreferredUnit(for:store:)()
{
  uint64_t v0;

  return implicit closure #10 in getPreferredUnit(for:store:)(*(void **)(v0 + 16));
}

uint64_t sub_2474E0734()
{
  return swift_deallocObject();
}

uint64_t sub_2474E075C()
{
  return swift_deallocObject();
}

uint64_t sub_2474E0784()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2474E07C0()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2474E07FC()
{
  return swift_deallocObject();
}

uint64_t sub_2474E0824()
{
  return swift_deallocObject();
}

uint64_t sub_2474E084C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2474E0888()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2474E08C4()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2474E0900()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #3 in getPreferredUnit(for:store:)@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  return implicit closure #3 in getPreferredUnit(for:store:)(*(_QWORD *)(v1 + 16), a1);
}

uint64_t sub_2474E0944()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t _s2os18OSLogInterpolationV06appendC0_5align7privacyyxyXA_AA0B15StringAlignmentVAA0B7PrivacyVts06CustomG11ConvertibleRzlFSSycfu_TA_0()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v5 = *(_QWORD *)(v0 + 16);
  v3 = *(_QWORD *)(v0 + 24);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [HKQuantityType : HKUnit]);
  v1 = lazy protocol witness table accessor for type [HKQuantityType : HKUnit] and conformance [A : B]();
  return implicit closure #1 in OSLogInterpolation.appendInterpolation<A>(_:align:privacy:)(v5, v3, v4, v1);
}

uint64_t sub_2474E0A3C()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t sub_2474E0A78()
{
  return swift_deallocObject();
}

uint64_t sub_2474E0AA0()
{
  return swift_deallocObject();
}

uint64_t sub_2474E0AC8()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2474E0B04()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2474E0B40()
{
  return swift_deallocObject();
}

uint64_t sub_2474E0B68()
{
  return swift_deallocObject();
}

uint64_t sub_2474E0B90()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2474E0BCC()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2474E0C08()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t sub_2474E0C44()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_2474E0C80()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2474E0CBC()
{
  return swift_deallocObject();
}

uint64_t sub_2474E0CE4()
{
  return swift_deallocObject();
}

uint64_t sub_2474E0D0C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2474E0D48()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2474E0D84()
{
  return swift_deallocObject();
}

uint64_t sub_2474E0DAC()
{
  return swift_deallocObject();
}

uint64_t sub_2474E0DD4()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2474E0E10()
{
  swift_release();
  return swift_deallocObject();
}

unint64_t lazy protocol witness table accessor for type HealthKitLocalizationError and conformance HealthKitLocalizationError()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type HealthKitLocalizationError and conformance HealthKitLocalizationError;
  if (!lazy protocol witness table cache variable for type HealthKitLocalizationError and conformance HealthKitLocalizationError)
  {
    v0 = MEMORY[0x24957D92C](&protocol conformance descriptor for HealthKitLocalizationError, &type metadata for HealthKitLocalizationError);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type HealthKitLocalizationError and conformance HealthKitLocalizationError);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type HealthKitLocalizationError and conformance HealthKitLocalizationError;
  if (!lazy protocol witness table cache variable for type HealthKitLocalizationError and conformance HealthKitLocalizationError)
  {
    v0 = MEMORY[0x24957D92C](&protocol conformance descriptor for HealthKitLocalizationError, &type metadata for HealthKitLocalizationError);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type HealthKitLocalizationError and conformance HealthKitLocalizationError);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type HealthKitLocalizationError and conformance HealthKitLocalizationError;
  if (!lazy protocol witness table cache variable for type HealthKitLocalizationError and conformance HealthKitLocalizationError)
  {
    v0 = MEMORY[0x24957D92C](&protocol conformance descriptor for HealthKitLocalizationError, &type metadata for HealthKitLocalizationError);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type HealthKitLocalizationError and conformance HealthKitLocalizationError);
    return v0;
  }
  return v2;
}

uint64_t sub_2474E0EB8()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t sub_2474E0EF4()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t sub_2474E0F30()
{
  return swift_deallocObject();
}

uint64_t sub_2474E0F58()
{
  return swift_deallocObject();
}

uint64_t sub_2474E0F80()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2474E0FBC()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2474E0FF8()
{
  return swift_deallocObject();
}

uint64_t sub_2474E1020()
{
  return swift_deallocObject();
}

uint64_t sub_2474E1048()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2474E1084()
{
  swift_release();
  return swift_deallocObject();
}

unint64_t type metadata accessor for HKUnitPreferenceController()
{
  unint64_t ObjCClassMetadata;
  uint64_t v2;

  v2 = lazy cache variable for type metadata for HKUnitPreferenceController;
  if (!lazy cache variable for type metadata for HKUnitPreferenceController)
  {
    objc_opt_self();
    ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for HKUnitPreferenceController);
    return ObjCClassMetadata;
  }
  return v2;
}

unint64_t type metadata accessor for NSNumber()
{
  unint64_t ObjCClassMetadata;
  uint64_t v2;

  v2 = lazy cache variable for type metadata for NSNumber;
  if (!lazy cache variable for type metadata for NSNumber)
  {
    objc_opt_self();
    ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
    return ObjCClassMetadata;
  }
  return v2;
}

unint64_t lazy protocol witness table accessor for type HKHealthStore.Error and conformance HKHealthStore.Error()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type HKHealthStore.Error and conformance HKHealthStore.Error;
  if (!lazy protocol witness table cache variable for type HKHealthStore.Error and conformance HKHealthStore.Error)
  {
    v0 = MEMORY[0x24957D92C](&protocol conformance descriptor for HKHealthStore.Error, &type metadata for HKHealthStore.Error);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type HKHealthStore.Error and conformance HKHealthStore.Error);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type HKHealthStore.Error and conformance HKHealthStore.Error;
  if (!lazy protocol witness table cache variable for type HKHealthStore.Error and conformance HKHealthStore.Error)
  {
    v0 = MEMORY[0x24957D92C](&protocol conformance descriptor for HKHealthStore.Error, &type metadata for HKHealthStore.Error);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type HKHealthStore.Error and conformance HKHealthStore.Error);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type HKHealthStore.Error and conformance HKHealthStore.Error;
  if (!lazy protocol witness table cache variable for type HKHealthStore.Error and conformance HKHealthStore.Error)
  {
    v0 = MEMORY[0x24957D92C](&protocol conformance descriptor for HKHealthStore.Error, &type metadata for HKHealthStore.Error);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type HKHealthStore.Error and conformance HKHealthStore.Error);
    return v0;
  }
  return v2;
}

uint64_t partial apply for closure #1 in HKHealthStore.query(quantityType:start:end:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in HKHealthStore.query(quantityType:start:end:)(a1, *(void **)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(void **)(v1 + 40), *(void **)(v1 + 48));
}

unint64_t type metadata accessor for NSSortDescriptor()
{
  unint64_t ObjCClassMetadata;
  uint64_t v2;

  v2 = lazy cache variable for type metadata for NSSortDescriptor;
  if (!lazy cache variable for type metadata for NSSortDescriptor)
  {
    objc_opt_self();
    ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for NSSortDescriptor);
    return ObjCClassMetadata;
  }
  return v2;
}

void *outlined init with copy of DateInterval?(const void *a1, void *a2)
{
  uint64_t v2;
  uint64_t v6;
  uint64_t v7;

  v6 = type metadata accessor for DateInterval();
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t))(v7 + 48))(a1, 1))
  {
    v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateInterval?);
    memcpy(a2, a1, *(_QWORD *)(*(_QWORD *)(v2 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v7 + 16))(a2, a1, v6);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a2, 0, 1, v6);
  }
  return a2;
}

void *outlined init with take of DateInterval?(const void *a1, void *a2)
{
  uint64_t v2;
  uint64_t v6;
  uint64_t v7;

  v6 = type metadata accessor for DateInterval();
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t))(v7 + 48))(a1, 1))
  {
    v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateInterval?);
    memcpy(a2, a1, *(_QWORD *)(*(_QWORD *)(v2 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v7 + 32))(a2, a1, v6);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a2, 0, 1, v6);
  }
  return a2;
}

uint64_t outlined destroy of (DateInterval?, NSPredicate?, [NSSortDescriptor], Int)(uint64_t a1)
{
  uint64_t v3;
  uint64_t v4;

  v3 = type metadata accessor for DateInterval();
  v4 = *(_QWORD *)(v3 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t))(v4 + 48))(a1, 1))
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(a1, v3);
  objc_release(*(id *)(a1
                     + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DateInterval?, NSPredicate?, [NSSortDescriptor], Int))
                              + 48)));
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t outlined destroy of DateInterval?(uint64_t a1)
{
  uint64_t v3;
  uint64_t v4;

  v3 = type metadata accessor for DateInterval();
  v4 = *(_QWORD *)(v3 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t))(v4 + 48))(a1, 1))
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(a1, v3);
  return a1;
}

unint64_t lazy protocol witness table accessor for type [HKQuantitySample] and conformance [A]()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type [HKQuantitySample] and conformance [A];
  if (!lazy protocol witness table cache variable for type [HKQuantitySample] and conformance [A])
  {
    v0 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [HKQuantitySample]);
    v1 = MEMORY[0x24957D92C](MEMORY[0x24BEE12C8], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type [HKQuantitySample] and conformance [A]);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type [HKQuantitySample] and conformance [A];
  if (!lazy protocol witness table cache variable for type [HKQuantitySample] and conformance [A])
  {
    v0 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [HKQuantitySample]);
    v1 = MEMORY[0x24957D92C](MEMORY[0x24BEE12E0], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type [HKQuantitySample] and conformance [A]);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type [HKQuantitySample] and conformance [A];
  if (!lazy protocol witness table cache variable for type [HKQuantitySample] and conformance [A])
  {
    v0 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [HKQuantitySample]);
    v1 = MEMORY[0x24957D92C](MEMORY[0x24BEE12B0], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type [HKQuantitySample] and conformance [A]);
    return v1;
  }
  return v3;
}

double partial apply for closure #3 in HKHealthStore.computeStatistics(queryDateRange:samples:unit:)@<D0>(id *a1@<X0>, double *a2@<X8>)
{
  uint64_t v2;

  return closure #3 in HKHealthStore.computeStatistics(queryDateRange:samples:unit:)(a1, *(_QWORD *)(v2 + 16), a2);
}

unint64_t lazy protocol witness table accessor for type [Double] and conformance [A]()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type [Double] and conformance [A];
  if (!lazy protocol witness table cache variable for type [Double] and conformance [A])
  {
    v0 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [Double]);
    v1 = MEMORY[0x24957D92C](MEMORY[0x24BEE12B0], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type [Double] and conformance [A]);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type [Double] and conformance [A];
  if (!lazy protocol witness table cache variable for type [Double] and conformance [A])
  {
    v0 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [Double]);
    v1 = MEMORY[0x24957D92C](MEMORY[0x24BEE12C8], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type [Double] and conformance [A]);
    return v1;
  }
  return v3;
}

__n128 outlined init with copy of Statistics<Double>(char *a1, char *a2)
{
  uint64_t v2;
  char *v3;
  __n128 result;
  char *v5;
  uint64_t v6;
  int *v7;
  uint64_t v10;
  uint64_t v11;

  v10 = type metadata accessor for DateInterval();
  v11 = *(_QWORD *)(v10 - 8);
  if ((*(unsigned int (**)(char *, uint64_t))(v11 + 48))(a1, 1))
  {
    v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateInterval?);
    memcpy(a2, a1, *(_QWORD *)(*(_QWORD *)(v2 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v11 + 16))(a2, a1, v10);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(a2, 0, 1, v10);
  }
  v7 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Statistics<Double>);
  (*(void (**)(char *, char *, uint64_t))(v11 + 16))(&a2[v7[7]], &a1[v7[7]], v10);
  *(_QWORD *)&a2[v7[8]] = *(_QWORD *)&a1[v7[8]];
  v5 = &a2[v7[9]];
  v3 = &a1[v7[9]];
  *(_QWORD *)v5 = *(_QWORD *)v3;
  v6 = *((_QWORD *)v3 + 1);
  swift_bridgeObjectRetain();
  *((_QWORD *)v5 + 1) = v6;
  result = *(__n128 *)&a1[v7[10]];
  *(__n128 *)&a2[v7[10]] = result;
  *(_QWORD *)&a2[v7[11]] = *(_QWORD *)&a1[v7[11]];
  *(_QWORD *)&a2[v7[12]] = *(_QWORD *)&a1[v7[12]];
  *(_QWORD *)&a2[v7[13]] = *(_QWORD *)&a1[v7[13]];
  return result;
}

uint64_t outlined destroy of Statistics<Double>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = type metadata accessor for DateInterval();
  v5 = *(_QWORD *)(v4 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t))(v5 + 48))(a1, 1))
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Statistics<Double>);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1 + *(int *)(v2 + 28), v4);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t partial apply for closure #1 in HKHealthStore.query<A>(categoryType:start:end:enumerationType:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in HKHealthStore.query<A>(categoryType:start:end:enumerationType:)(a1, *(void **)(v1 + 32), *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48), *(void **)(v1 + 56), *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_2474E1A2C()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t sub_2474E1A68()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t sub_2474E1AA4()
{
  return swift_deallocObject();
}

uint64_t sub_2474E1ACC()
{
  return swift_deallocObject();
}

uint64_t sub_2474E1AF4()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2474E1B30()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2474E1B6C()
{
  return swift_deallocObject();
}

uint64_t sub_2474E1B94()
{
  return swift_deallocObject();
}

uint64_t sub_2474E1BBC()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2474E1BF8()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in HKHealthStore.query(correlationType:firstQuantityType:secondQuantityType:start:end:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in HKHealthStore.query(correlationType:firstQuantityType:secondQuantityType:start:end:)(a1, *(void **)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(void **)(v1 + 40), *(void **)(v1 + 48), *(void **)(v1 + 56), *(void **)(v1 + 64), *(void **)(v1 + 72));
}

unint64_t base witness table accessor for Equatable in HealthKitLocalizationError()
{
  return lazy protocol witness table accessor for type HealthKitLocalizationError and conformance HealthKitLocalizationError();
}

uint64_t getEnumTagSinglePayload for HealthKitLocalizationError(unsigned __int8 *a1, int a2)
{
  int v2;
  int v4;
  int v5;
  int v6;

  if (a2)
  {
    v6 = 1;
    if ((a2 + 1) >= 0x100)
    {
      if ((a2 + 1) >= 0x10000)
        v2 = 4;
      else
        v2 = 2;
      v6 = v2;
    }
    if (v6 == 1)
    {
      v5 = *a1;
    }
    else if (v6 == 2)
    {
      v5 = *(unsigned __int16 *)a1;
    }
    else
    {
      v5 = *(_DWORD *)a1;
    }
    if (v5)
      v4 = v5 - 1;
    else
      v4 = -1;
  }
  else
  {
    v4 = -1;
  }
  return (v4 + 1);
}

_BYTE *storeEnumTagSinglePayload for HealthKitLocalizationError(_BYTE *result, int a2, int a3)
{
  int v3;
  int v4;
  int v5;

  v5 = 0;
  if (a3)
  {
    v4 = 1;
    if ((a3 + 1) >= 0x100)
    {
      if ((a3 + 1) >= 0x10000)
        v3 = 4;
      else
        v3 = 2;
      v4 = v3;
    }
    v5 = v4;
  }
  if (a2)
  {
    if (v5)
    {
      if (v5 == 1)
      {
        *result = a2;
      }
      else if (v5 == 2)
      {
        *(_WORD *)result = a2;
      }
      else
      {
        *(_DWORD *)result = a2;
      }
    }
  }
  else if (v5)
  {
    if (v5 == 1)
    {
      *result = 0;
    }
    else if (v5 == 2)
    {
      *(_WORD *)result = 0;
    }
    else
    {
      *(_DWORD *)result = 0;
    }
  }
  return result;
}

uint64_t getEnumTag for HealthKitLocalizationError()
{
  return 0;
}

ValueMetadata *type metadata accessor for HealthKitLocalizationError()
{
  return &type metadata for HealthKitLocalizationError;
}

_BYTE *__swift_memcpy1_1(_BYTE *result, _BYTE *a2)
{
  *result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for HKHealthStore.Error(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v5;
  int v6;
  unsigned int v7;
  int v8;

  if (a2)
  {
    if (a2 <= 0xFE)
      goto LABEL_15;
    v7 = ((a2 + 1) >> 8) + 1;
    v8 = 1;
    if (v7 >= 0x100)
    {
      if (v7 >= 0x10000)
        v2 = 4;
      else
        v2 = 2;
      v8 = v2;
    }
    if (v8 == 1)
      v6 = a1[1];
    else
      v6 = v8 == 2 ? *(unsigned __int16 *)(a1 + 1) : *(_DWORD *)(a1 + 1);
    if (v6)
    {
      v5 = (*a1 | ((v6 - 1) << 8)) + 254;
    }
    else
    {
LABEL_15:
      v3 = *a1 - 2;
      if (v3 < 0)
        v3 = -1;
      v5 = v3;
    }
  }
  else
  {
    v5 = -1;
  }
  return (v5 + 1);
}

_BYTE *storeEnumTagSinglePayload for HKHealthStore.Error(_BYTE *result, unsigned int a2, unsigned int a3)
{
  int v3;
  unsigned int v4;
  unsigned int v5;
  int v6;
  int v7;

  v7 = 0;
  if (a3 > 0xFE)
  {
    v5 = ((a3 + 1) >> 8) + 1;
    v6 = 1;
    if (v5 >= 0x100)
    {
      if (v5 >= 0x10000)
        v3 = 4;
      else
        v3 = 2;
      v6 = v3;
    }
    v7 = v6;
  }
  if (a2 > 0xFE)
  {
    v4 = ((a2 - 255) >> 8) + 1;
    *result = a2 + 1;
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = v4;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = v4;
      }
      else
      {
        *(_DWORD *)(result + 1) = v4;
      }
    }
  }
  else
  {
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = 0;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = 0;
      }
      else
      {
        *(_DWORD *)(result + 1) = 0;
      }
    }
    if (a2)
      *result = a2 + 1;
  }
  return result;
}

uint64_t getEnumTag for HKHealthStore.Error(_BYTE *a1)
{
  return *a1 & 1;
}

_BYTE *destructiveInjectEnumTag for HKHealthStore.Error(_BYTE *result, char a2)
{
  *result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for HKHealthStore.Error()
{
  return &type metadata for HKHealthStore.Error;
}

unint64_t base witness table accessor for Equatable in HKHealthStore.Error()
{
  return lazy protocol witness table accessor for type HKHealthStore.Error and conformance HKHealthStore.Error();
}

unint64_t type metadata accessor for HKSampleQuery()
{
  unint64_t ObjCClassMetadata;
  uint64_t v2;

  v2 = lazy cache variable for type metadata for HKSampleQuery;
  if (!lazy cache variable for type metadata for HKSampleQuery)
  {
    objc_opt_self();
    ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for HKSampleQuery);
    return ObjCClassMetadata;
  }
  return v2;
}

uint64_t sub_2474E263C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<Statistics<(first: Double, second: Double)>?, Error>);
  v4 = *(_QWORD *)(v6 - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v9 = (v5 + *(_QWORD *)(v4 + 64) + 7) & 0xFFFFFFFFFFFFFFF8;
  v10 = (v9 + 15) & 0xFFFFFFFFFFFFFFF8;
  v11 = (v10 + 15) & 0xFFFFFFFFFFFFFFF8;
  v12 = (v11 + 15) & 0xFFFFFFFFFFFFFFF8;
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (dateRange: DateInterval?, predicate: NSPredicate?, sortDescriptors: [NSSortDescriptor], limit: Int));
  v1 = *(_QWORD *)(v7 - 8);
  v13 = (v12 + 8 + *(unsigned __int8 *)(v1 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v8 = (v13 + *(_QWORD *)(v1 + 64) + 7) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(unint64_t, uint64_t))(v4 + 8))(v0 + v5, v6);

  v14 = type metadata accessor for DateInterval();
  v15 = *(_QWORD *)(v14 - 8);
  if (!(*(unsigned int (**)(unint64_t, uint64_t))(v15 + 48))(v0 + v13, 1))
    (*(void (**)(unint64_t, uint64_t))(v15 + 8))(v3 + v13, v14);

  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

char *outlined init with take of (dateRange: DateInterval?, predicate: NSPredicate?, sortDescriptors: [NSSortDescriptor], limit: Int)(char *a1, char *a2)
{
  uint64_t v2;
  int *v3;
  char *result;
  uint64_t v7;
  uint64_t v8;

  v7 = type metadata accessor for DateInterval();
  v8 = *(_QWORD *)(v7 - 8);
  if ((*(unsigned int (**)(char *, uint64_t))(v8 + 48))(a1, 1))
  {
    v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateInterval?);
    memcpy(a2, a1, *(_QWORD *)(*(_QWORD *)(v2 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(a2, a1, v7);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a2, 0, 1, v7);
  }
  v3 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (dateRange: DateInterval?, predicate: NSPredicate?, sortDescriptors: [NSSortDescriptor], limit: Int));
  result = a2;
  *(_QWORD *)&a2[v3[12]] = *(_QWORD *)&a1[v3[12]];
  *(_QWORD *)&a2[v3[16]] = *(_QWORD *)&a1[v3[16]];
  *(_QWORD *)&a2[v3[20]] = *(_QWORD *)&a1[v3[20]];
  return result;
}

void partial apply for closure #1 in closure #1 in HKHealthStore.query(correlationType:firstQuantityType:secondQuantityType:start:end:)(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v14;

  v4 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<Statistics<(first: Double, second: Double)>?, Error>)
                 - 8);
  v14 = (*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v8 = (v14 + *(_QWORD *)(v4 + 64) + 7) & 0xFFFFFFFFFFFFFFF8;
  v9 = (v8 + 15) & 0xFFFFFFFFFFFFFFF8;
  v10 = (v9 + 15) & 0xFFFFFFFFFFFFFFF8;
  v11 = (v10 + 15) & 0xFFFFFFFFFFFFFFF8;
  v5 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (dateRange: DateInterval?, predicate: NSPredicate?, sortDescriptors: [NSSortDescriptor], limit: Int))
                 - 8);
  v6 = (v11 + 8 + *(unsigned __int8 *)(v5 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v7 = (v6 + *(_QWORD *)(v5 + 64) + 7) & 0xFFFFFFFFFFFFFFF8;
  closure #1 in closure #1 in HKHealthStore.query(correlationType:firstQuantityType:secondQuantityType:start:end:)(a1, a2, a3, v3 + v14, *(void **)(v3 + v8), *(void **)(v3 + v9), *(void **)(v3 + v10), *(_QWORD *)(v3 + v11), (char *)(v3 + v6), *(void **)(v3 + v7), *(void **)(v3 + ((v7 + 15) & 0xFFFFFFFFFFFFFFF8)));
}

uint64_t outlined destroy of (dateRange: DateInterval?, predicate: NSPredicate?, sortDescriptors: [NSSortDescriptor], limit: Int)(uint64_t a1)
{
  uint64_t v3;
  uint64_t v4;

  v3 = type metadata accessor for DateInterval();
  v4 = *(_QWORD *)(v3 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t))(v4 + 48))(a1, 1))
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(a1, v3);
  objc_release(*(id *)(a1
                     + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (dateRange: DateInterval?, predicate: NSPredicate?, sortDescriptors: [NSSortDescriptor], limit: Int))
                              + 48)));
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t block_copy_helper_0(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a2 + 32);
  v5 = *(_QWORD *)(a2 + 40);
  swift_retain();
  result = a1;
  *(_QWORD *)(a1 + 32) = v4;
  *(_QWORD *)(a1 + 40) = v5;
  return result;
}

uint64_t block_destroy_helper_0()
{
  return swift_release();
}

uint64_t sub_2474E2B8C()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #2 in closure #1 in closure #1 in HKHealthStore.query(correlationType:firstQuantityType:secondQuantityType:start:end:)()
{
  uint64_t v0;

  return implicit closure #2 in closure #1 in closure #1 in HKHealthStore.query(quantityType:start:end:)(*(void **)(v0 + 16));
}

uint64_t sub_2474E2BD0()
{
  return swift_deallocObject();
}

uint64_t sub_2474E2BF8()
{
  return swift_deallocObject();
}

uint64_t sub_2474E2C20()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2474E2C5C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in closure #1 in HKHealthStore.query(correlationType:firstQuantityType:secondQuantityType:start:end:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t *v2;

  return closure #1 in closure #1 in closure #1 in HKHealthStore.query(correlationType:firstQuantityType:secondQuantityType:start:end:)(a1, v2[2], v2[3], v2[4], a2);
}

unint64_t lazy protocol witness table accessor for type [HKCorrelation] and conformance [A]()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type [HKCorrelation] and conformance [A];
  if (!lazy protocol witness table cache variable for type [HKCorrelation] and conformance [A])
  {
    v0 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [HKCorrelation]);
    v1 = MEMORY[0x24957D92C](MEMORY[0x24BEE12C8], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type [HKCorrelation] and conformance [A]);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type [HKCorrelation] and conformance [A];
  if (!lazy protocol witness table cache variable for type [HKCorrelation] and conformance [A])
  {
    v0 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [HKCorrelation]);
    v1 = MEMORY[0x24957D92C](MEMORY[0x24BEE12E0], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type [HKCorrelation] and conformance [A]);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type [HKCorrelation] and conformance [A];
  if (!lazy protocol witness table cache variable for type [HKCorrelation] and conformance [A])
  {
    v0 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [HKCorrelation]);
    v1 = MEMORY[0x24957D92C](MEMORY[0x24BEE12B0], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type [HKCorrelation] and conformance [A]);
    return v1;
  }
  return v3;
}

uint64_t partial apply for implicit closure #3 in closure #1 in closure #1 in HKHealthStore.query(correlationType:firstQuantityType:secondQuantityType:start:end:)(uint64_t a1)
{
  return implicit closure #3 in closure #1 in closure #1 in HKHealthStore.query(correlationType:firstQuantityType:secondQuantityType:start:end:)(a1);
}

uint64_t outlined destroy of Statistics<Double>?(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Statistics<Double>);
  if (!(*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(a1, 1))
  {
    v2 = type metadata accessor for DateInterval();
    v3 = *(_QWORD *)(v2 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t))(v3 + 48))(a1, 1))
      (*(void (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(a1 + *(int *)(v5 + 28), v2);
    swift_bridgeObjectRelease();
  }
  return a1;
}

__n128 outlined init with take of Statistics<Double>(char *a1, char *a2)
{
  uint64_t v2;
  __n128 result;
  int *v4;
  uint64_t v7;
  uint64_t v8;

  v7 = type metadata accessor for DateInterval();
  v8 = *(_QWORD *)(v7 - 8);
  if ((*(unsigned int (**)(char *, uint64_t))(v8 + 48))(a1, 1))
  {
    v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateInterval?);
    memcpy(a2, a1, *(_QWORD *)(*(_QWORD *)(v2 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(a2, a1, v7);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a2, 0, 1, v7);
  }
  v4 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Statistics<Double>);
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(&a2[v4[7]], &a1[v4[7]], v7);
  *(_QWORD *)&a2[v4[8]] = *(_QWORD *)&a1[v4[8]];
  *(_OWORD *)&a2[v4[9]] = *(_OWORD *)&a1[v4[9]];
  result = *(__n128 *)&a1[v4[10]];
  *(__n128 *)&a2[v4[10]] = result;
  *(_QWORD *)&a2[v4[11]] = *(_QWORD *)&a1[v4[11]];
  *(_QWORD *)&a2[v4[12]] = *(_QWORD *)&a1[v4[12]];
  *(_QWORD *)&a2[v4[13]] = *(_QWORD *)&a1[v4[13]];
  return result;
}

_QWORD *outlined init with copy of NSPredicate?(id *a1, _QWORD *a2)
{
  id v2;
  _QWORD *result;
  id v4;

  v4 = *a1;
  v2 = *a1;
  result = a2;
  *a2 = v4;
  return result;
}

_QWORD *outlined init with copy of [NSSortDescriptor](uint64_t *a1, _QWORD *a2)
{
  _QWORD *result;
  uint64_t v4;

  v4 = *a1;
  swift_bridgeObjectRetain();
  result = a2;
  *a2 = v4;
  return result;
}

__n128 outlined init with copy of Statistics<(first: Double, second: Double)>(char *a1, char *a2)
{
  uint64_t v2;
  char *v3;
  char *v4;
  uint64_t v5;
  __n128 result;
  char *v7;
  uint64_t v8;
  int *v9;
  uint64_t v12;
  uint64_t v13;

  v12 = type metadata accessor for DateInterval();
  v13 = *(_QWORD *)(v12 - 8);
  if ((*(unsigned int (**)(char *, uint64_t))(v13 + 48))(a1, 1))
  {
    v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateInterval?);
    memcpy(a2, a1, *(_QWORD *)(*(_QWORD *)(v2 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v13 + 16))(a2, a1, v12);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(a2, 0, 1, v12);
  }
  v9 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Statistics<(first: Double, second: Double)>);
  (*(void (**)(char *, char *, uint64_t))(v13 + 16))(&a2[v9[7]], &a1[v9[7]], v12);
  *(_QWORD *)&a2[v9[8]] = *(_QWORD *)&a1[v9[8]];
  v7 = &a2[v9[9]];
  v3 = &a1[v9[9]];
  *(_QWORD *)v7 = *(_QWORD *)v3;
  v8 = *((_QWORD *)v3 + 1);
  swift_bridgeObjectRetain();
  *((_QWORD *)v7 + 1) = v8;
  v4 = &a2[v9[10]];
  v5 = v9[10];
  *(_OWORD *)v4 = *(_OWORD *)&a1[v5];
  *((_OWORD *)v4 + 1) = *(_OWORD *)&a1[v5 + 16];
  *(_OWORD *)&a2[v9[11]] = *(_OWORD *)&a1[v9[11]];
  *(_OWORD *)&a2[v9[12]] = *(_OWORD *)&a1[v9[12]];
  result = *(__n128 *)&a1[v9[13]];
  *(__n128 *)&a2[v9[13]] = result;
  return result;
}

uint64_t outlined destroy of Statistics<(first: Double, second: Double)>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = type metadata accessor for DateInterval();
  v5 = *(_QWORD *)(v4 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t))(v5 + 48))(a1, 1))
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Statistics<(first: Double, second: Double)>);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1 + *(int *)(v2 + 28), v4);
  swift_bridgeObjectRelease();
  return a1;
}

unint64_t type metadata accessor for HKCorrelation()
{
  unint64_t ObjCClassMetadata;
  uint64_t v2;

  v2 = lazy cache variable for type metadata for HKCorrelation;
  if (!lazy cache variable for type metadata for HKCorrelation)
  {
    objc_opt_self();
    ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for HKCorrelation);
    return ObjCClassMetadata;
  }
  return v2;
}

uint64_t sub_2474E3340()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #1 in closure #1 in closure #1 in HKHealthStore.query(correlationType:firstQuantityType:secondQuantityType:start:end:)()
{
  uint64_t v0;

  return implicit closure #1 in closure #1 in closure #1 in HKHealthStore.query(quantityType:start:end:)(*(void **)(v0 + 16));
}

uint64_t sub_2474E3384()
{
  return swift_deallocObject();
}

uint64_t sub_2474E33AC()
{
  return swift_deallocObject();
}

uint64_t sub_2474E33D4()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2474E3410()
{
  swift_release();
  return swift_deallocObject();
}

id *outlined destroy of (HKQuantitySample, HKQuantitySample)(id *a1)
{

  return a1;
}

unint64_t lazy protocol witness table accessor for type HKSample and conformance NSObject()
{
  unint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type HKSample and conformance NSObject;
  if (!lazy protocol witness table cache variable for type HKSample and conformance NSObject)
  {
    v0 = type metadata accessor for HKSample();
    v1 = MEMORY[0x24957D92C](MEMORY[0x24BEE5BD8], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type HKSample and conformance NSObject);
    return v1;
  }
  return v3;
}

unint64_t lazy protocol witness table accessor for type Set<HKSample> and conformance Set<A>()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type Set<HKSample> and conformance Set<A>;
  if (!lazy protocol witness table cache variable for type Set<HKSample> and conformance Set<A>)
  {
    v0 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Set<HKSample>);
    v1 = MEMORY[0x24957D92C](MEMORY[0x24BEE1728], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type Set<HKSample> and conformance Set<A>);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type Set<HKSample> and conformance Set<A>;
  if (!lazy protocol witness table cache variable for type Set<HKSample> and conformance Set<A>)
  {
    v0 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Set<HKSample>);
    v1 = MEMORY[0x24957D92C](MEMORY[0x24BEE1718], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type Set<HKSample> and conformance Set<A>);
    return v1;
  }
  return v3;
}

uint64_t sub_2474E3560()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v4;

  type metadata accessor for Date();
  swift_getTupleTypeMetadata2();
  type metadata accessor for Optional();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Error);
  v1 = *(_QWORD *)(type metadata accessor for CheckedContinuation() - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v4 = (v2 + *(_QWORD *)(v1 + 64) + 7) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(unint64_t))(v1 + 8))(v0 + v2);

  return swift_deallocObject();
}

void partial apply for closure #1 in closure #1 in HKHealthStore.query<A>(categoryType:start:end:enumerationType:)(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;

  v7 = *(_QWORD *)(v3 + 16);
  v8 = *(_QWORD *)(v3 + 24);
  type metadata accessor for Date();
  swift_getTupleTypeMetadata2();
  type metadata accessor for Optional();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Error);
  v4 = *(_QWORD *)(type metadata accessor for CheckedContinuation() - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  closure #1 in closure #1 in HKHealthStore.query<A>(categoryType:start:end:enumerationType:)(a1, a2, a3, v3 + v5, *(void **)(v3 + ((v5 + *(_QWORD *)(v4 + 64) + 7) & 0xFFFFFFFFFFFFFFF8)), v7, v8);
}

uint64_t sub_2474E3734()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t sub_2474E3770()
{
  return swift_deallocObject();
}

uint64_t sub_2474E3798()
{
  return swift_deallocObject();
}

uint64_t sub_2474E37C0()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2474E37FC()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t outlined destroy of A?(uint64_t a1, uint64_t a2)
{
  uint64_t v5;

  v5 = *(_QWORD *)(a2 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t))(v5 + 48))(a1, 1))
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, a2);
  return a1;
}

uint64_t outlined destroy of (value: A, startDate: Date)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;

  (*(void (**)(void))(*(_QWORD *)(a2 - 8) + 8))();
  v6 = *(int *)(a3 + 48);
  v3 = type metadata accessor for Date();
  (*(void (**)(uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1 + v6);
  return a1;
}

unint64_t lazy protocol witness table accessor for type [HKSample] and conformance [A]()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type [HKSample] and conformance [A];
  if (!lazy protocol witness table cache variable for type [HKSample] and conformance [A])
  {
    v0 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [HKSample]);
    v1 = MEMORY[0x24957D92C](MEMORY[0x24BEE12E0], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type [HKSample] and conformance [A]);
    return v1;
  }
  return v3;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of ContiguousArray<A1>()
{
  swift_release();
}

uint64_t sub_2474E39A4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<Statistics<Double>?, Error>);
  v4 = *(_QWORD *)(v6 - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v9 = (v5 + *(_QWORD *)(v4 + 64) + 7) & 0xFFFFFFFFFFFFFFF8;
  v10 = (v9 + 15) & 0xFFFFFFFFFFFFFFF8;
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (dateRange: DateInterval?, predicate: NSPredicate?, sortDescriptors: [NSSortDescriptor], limit: Int));
  v1 = *(_QWORD *)(v7 - 8);
  v11 = (v10 + 8 + *(unsigned __int8 *)(v1 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v8 = (v11 + *(_QWORD *)(v1 + 64) + 7) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(unint64_t, uint64_t))(v4 + 8))(v0 + v5, v6);

  v12 = type metadata accessor for DateInterval();
  v13 = *(_QWORD *)(v12 - 8);
  if (!(*(unsigned int (**)(unint64_t, uint64_t))(v13 + 48))(v0 + v11, 1))
    (*(void (**)(unint64_t, uint64_t))(v13 + 8))(v3 + v11, v12);

  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

void partial apply for closure #1 in closure #1 in HKHealthStore.query(quantityType:start:end:)(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v11;

  v4 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<Statistics<Double>?, Error>)
                 - 8);
  v11 = (*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v7 = (v11 + *(_QWORD *)(v4 + 64) + 7) & 0xFFFFFFFFFFFFFFF8;
  v8 = (v7 + 15) & 0xFFFFFFFFFFFFFFF8;
  v5 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (dateRange: DateInterval?, predicate: NSPredicate?, sortDescriptors: [NSSortDescriptor], limit: Int))
                 - 8);
  v6 = (v8 + 8 + *(unsigned __int8 *)(v5 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  closure #1 in closure #1 in HKHealthStore.query(quantityType:start:end:)(a1, a2, a3, v3 + v11, *(void **)(v3 + v7), *(_QWORD *)(v3 + v8), (const void *)(v3 + v6), *(void **)(v3 + ((v6 + *(_QWORD *)(v5 + 64) + 7) & 0xFFFFFFFFFFFFFFF8)));
}

uint64_t sub_2474E3C3C()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t sub_2474E3C78()
{
  return swift_deallocObject();
}

uint64_t sub_2474E3CA0()
{
  return swift_deallocObject();
}

uint64_t sub_2474E3CC8()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2474E3D04()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2474E3D40()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t sub_2474E3D7C()
{
  return swift_deallocObject();
}

uint64_t sub_2474E3DA4()
{
  return swift_deallocObject();
}

uint64_t sub_2474E3DCC()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2474E3E08()
{
  swift_release();
  return swift_deallocObject();
}

id UndoMedsIntentHandler.__allocating_init(storage:)(_QWORD *a1)
{
  objc_class *v1;
  id v2;

  v2 = objc_allocWithZone(v1);
  return UndoMedsIntentHandler.init(storage:)(a1);
}

id UndoMedsIntentHandler.init(storage:)(_QWORD *a1)
{
  void *v1;
  id v2;
  id v3;
  uint64_t v4;
  id v5;
  id v7;
  char *v8;
  objc_class *ObjectType;
  objc_super v11;
  _QWORD v12[5];
  _QWORD __dst[6];
  id v14;

  ObjectType = (objc_class *)swift_getObjectType();
  __dst[5] = a1;
  v2 = v1;
  v14 = v1;
  outlined init with copy of QuantityPersisting?(a1, v12);
  if (v12[3])
  {
    outlined init with take of QuantityPersisting(v12, __dst);
  }
  else
  {
    v3 = MedsUndoer.init()();
    __dst[3] = &type metadata for MedsUndoer;
    __dst[4] = &protocol witness table for MedsUndoer;
    __dst[0] = v3;
    __dst[1] = v4;
    outlined destroy of QuantityPersisting?((uint64_t)v12);
  }
  outlined init with take of QuantityPersisting(__dst, &v8[OBJC_IVAR____TtC19SiriWellnessIntents21UndoMedsIntentHandler_storage]);

  v11.receiver = v14;
  v11.super_class = ObjectType;
  v7 = objc_msgSendSuper2(&v11, sel_init);
  v5 = v7;
  v14 = v7;
  outlined destroy of QuantityPersisting?((uint64_t)a1);

  return v7;
}

id MedsUndoer.init()()
{
  id v0;
  id v1;
  id v2;
  id v3;
  id v4;
  id v6;
  id v7;
  id v8;
  id v9;

  v8 = 0;
  v9 = 0;
  type metadata accessor for HKHealthStore();
  v7 = (id)NSDateFormatter.__allocating_init()();
  v0 = v7;
  v1 = v7;
  v8 = v7;
  type metadata accessor for HKMedicationExposableDoseEventControl();
  v6 = HKUnitPreferenceController.__allocating_init(healthStore:)(v7);
  v2 = v6;
  v9 = v6;
  v3 = v7;
  v4 = v6;

  outlined destroy of (HKQuantitySample, HKQuantitySample)(&v8);
  return v7;
}

unint64_t type metadata accessor for HKMedicationExposableDoseEventControl()
{
  unint64_t ObjCClassMetadata;
  uint64_t v2;

  v2 = lazy cache variable for type metadata for HKMedicationExposableDoseEventControl;
  if (!lazy cache variable for type metadata for HKMedicationExposableDoseEventControl)
  {
    objc_opt_self();
    ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for HKMedicationExposableDoseEventControl);
    return ObjCClassMetadata;
  }
  return v2;
}

uint64_t UndoMedsIntentHandler.handle(intent:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v2[20] = v1;
  v2[19] = a1;
  v2[10] = v2;
  v2[11] = 0;
  v2[12] = 0;
  v2[18] = 0;
  v3 = type metadata accessor for Logger();
  v2[21] = v3;
  v2[22] = *(_QWORD *)(v3 - 8);
  v2[23] = swift_task_alloc();
  v2[11] = a1;
  v2[12] = v1;
  return swift_task_switch();
}

{
  uint64_t *v1;
  uint64_t v3;

  v3 = *v1;
  *(_QWORD *)(v3 + 80) = *v1;
  *(_QWORD *)(v3 + 208) = a1;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t UndoMedsIntentHandler.handle(intent:)()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint8_t *buf;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint32_t v18;
  os_log_type_t v19;
  NSObject *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t (*v24)(uint64_t, uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  id v28;

  v1 = *(void **)(v0 + 152);
  *(_QWORD *)(v0 + 80) = v0;
  v28 = objc_msgSend(v1, sel_matchingMeds);
  if (v28)
  {
    type metadata accessor for MatchedMedName();
    v25 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    v26 = v25;
  }
  else
  {
    v26 = 0;
  }
  *(_QWORD *)(v27 + 192) = v26;
  if (v26)
  {
    v2 = *(_QWORD *)(v27 + 160);
    *(_QWORD *)(v27 + 144) = v26;
    outlined init with copy of QuantityPersisting(v2 + OBJC_IVAR____TtC19SiriWellnessIntents21UndoMedsIntentHandler_storage, v27 + 16);
    v22 = *(_QWORD *)(v27 + 40);
    v23 = *(_QWORD *)(v27 + 48);
    __swift_project_boxed_opaque_existential_1((_QWORD *)(v27 + 16), v22);
    v24 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 + 8) + **(int **)(v23 + 8));
    v3 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v27 + 200) = v3;
    *v3 = *(_QWORD *)(v27 + 80);
    v3[1] = UndoMedsIntentHandler.handle(intent:);
    return v24(v26, v22, v23);
  }
  else
  {
    v5 = *(_QWORD *)(v27 + 184);
    v15 = *(_QWORD *)(v27 + 176);
    v17 = *(_QWORD *)(v27 + 168);
    v16 = Logger.wellnessIntents.unsafeMutableAddressor();
    swift_beginAccess();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 16))(v5, v16, v17);
    swift_endAccess();
    v20 = Logger.logObject.getter();
    v19 = static os_log_type_t.error.getter();
    *(_QWORD *)(v27 + 104) = 2;
    lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    lazy protocol witness table accessor for type Int and conformance Int();
    UnsignedInteger<>.init<A>(_:)();
    v18 = *(_DWORD *)(v27 + 216);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
    v21 = _allocateUninitializedArray<A>(_:)();
    if (os_log_type_enabled(v20, v19))
    {
      buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      v12 = createStorage<A>(capacity:type:)(0);
      v13 = createStorage<A>(capacity:type:)(0);
      *(_QWORD *)(v27 + 112) = buf;
      *(_QWORD *)(v27 + 120) = v12;
      *(_QWORD *)(v27 + 128) = v13;
      serialize(_:at:)(0, (_BYTE **)(v27 + 112));
      serialize(_:at:)(0, (_BYTE **)(v27 + 112));
      *(_QWORD *)(v27 + 136) = v21;
      v14 = (_QWORD *)swift_task_alloc();
      v14[2] = v27 + 112;
      v14[3] = v27 + 120;
      v14[4] = v27 + 128;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
      lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
      Sequence.forEach(_:)();
      swift_task_dealloc();
      _os_log_impl(&dword_24749F000, v20, v19, "Missing matchingMeds. Aborting delete.", buf, v18);
      destroyStorage<A>(_:count:)(v12, 0, v10);
      destroyStorage<A>(_:count:)(v13, 0, MEMORY[0x24BEE4AD8] + 8);
      MEMORY[0x24957D398](buf, MEMORY[0x24BEE4260]);
    }
    swift_bridgeObjectRelease();
    v7 = *(_QWORD *)(v27 + 184);
    v6 = *(_QWORD *)(v27 + 176);
    v8 = *(_QWORD *)(v27 + 168);

    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v7, v8);
    type metadata accessor for UndoMedsIntentResponse();
    v9 = UndoMedsIntentResponse.__allocating_init(code:userActivity:)(5, 0);
    swift_task_dealloc();
    return (*(uint64_t (**)(char *))(*(_QWORD *)(v27 + 80) + 8))(v9);
  }
}

{
  uint64_t v0;
  uint64_t v2;

  *(_QWORD *)(v0 + 80) = v0;
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  swift_bridgeObjectRelease();
  v2 = *(_QWORD *)(v0 + 208);
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v0 + 80) + 8))(v2);
}

uint64_t @objc closure #1 in UndoMedsIntentHandler.handle(intent:)(void *a1, const void *a2, void *a3)
{
  _QWORD *v3;
  id v5;
  id v6;
  _QWORD *v7;
  uint64_t v10;

  v3[4] = a3;
  v3[3] = a1;
  v3[2] = v3;
  v5 = a1;
  v3[5] = _Block_copy(a2);
  v6 = a3;
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v10 + 48) = v7;
  *v7 = *(_QWORD *)(v10 + 16);
  v7[1] = @objc closure #1 in LogQuantityIntentHandler.handle(intent:);
  return UndoMedsIntentHandler.handle(intent:)((uint64_t)a1);
}

id UndoMedsIntentHandler.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

uint64_t UndoMedsIntentHandler.init()()
{
  uint64_t result;
  uint64_t v1;

  if (!"SiriWellnessIntents.UndoMedsIntentHandler")
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  result = closure #1 in _unimplementedInitializer(className:initName:file:line:column:)((uint64_t)"SiriWellnessIntents.UndoMedsIntentHandler", 41, (unint64_t)"init()", 6, 2, (unint64_t)"SiriWellnessIntents/UndoMedsIntentHandler.swift", 47, 2, v1, 0xFuLL, 0x14uLL);
  __break(1u);
  return result;
}

id UndoMedsIntentHandler.__deallocating_deinit()
{
  void *v0;
  objc_super v2;
  void *v3;

  v3 = v0;
  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t MedsUndoer.undo(matchingMeds:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;

  v3[39] = a3;
  v3[38] = a2;
  v3[37] = a1;
  v3[26] = v3;
  v3[27] = 0;
  v3[24] = 0;
  v3[25] = 0;
  v3[29] = 0;
  v3[30] = 0;
  v4 = type metadata accessor for Logger();
  v3[40] = v4;
  v3[41] = *(_QWORD *)(v4 - 8);
  v3[42] = swift_task_alloc();
  v3[43] = swift_task_alloc();
  v3[44] = swift_task_alloc();
  v3[27] = a1;
  v3[24] = a2;
  v3[25] = a3;
  return swift_task_switch();
}

uint64_t MedsUndoer.undo(matchingMeds:)()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t, uint64_t, uint64_t);
  _QWORD *v3;
  void (*v4)(uint64_t, uint64_t);
  _QWORD *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint8_t *buf;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint32_t size;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  NSObject *v27;
  os_log_type_t v28;
  uint8_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t (*v32)(uint64_t, uint64_t, uint64_t);
  uint64_t v33;

  v1 = *(_QWORD *)(v0 + 352);
  v15 = *(_QWORD *)(v0 + 328);
  v17 = *(_QWORD *)(v0 + 320);
  v18 = *(_QWORD *)(v0 + 296);
  *(_QWORD *)(v0 + 208) = v0;
  v16 = Logger.wellnessIntents.unsafeMutableAddressor();
  swift_beginAccess();
  v2 = *(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 16);
  *(_QWORD *)(v0 + 360) = v2;
  v2(v1, v16, v17);
  swift_endAccess();
  swift_bridgeObjectRetain();
  v19 = swift_allocObject();
  *(_QWORD *)(v19 + 16) = v18;
  swift_retain();
  v21 = swift_allocObject();
  *(_QWORD *)(v21 + 16) = partial apply for implicit closure #3 in getPreferredUnit(for:store:);
  *(_QWORD *)(v21 + 24) = v19;
  swift_release();
  v27 = Logger.logObject.getter();
  v28 = static os_log_type_t.debug.getter();
  *(_QWORD *)(v0 + 224) = 12;
  *(_QWORD *)(v0 + 368) = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  *(_QWORD *)(v0 + 376) = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  *(_QWORD *)(v0 + 384) = lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  size = *(_DWORD *)(v0 + 448);
  v23 = swift_allocObject();
  *(_BYTE *)(v23 + 16) = 32;
  v24 = swift_allocObject();
  *(_BYTE *)(v24 + 16) = 8;
  v22 = swift_allocObject();
  *(_QWORD *)(v22 + 16) = _s2os18OSLogInterpolationV06appendC0_5align7privacyyxyXA_AA0B15StringAlignmentVAA0B7PrivacyVts06CustomG11ConvertibleRzlFSSycfu_TA_1;
  *(_QWORD *)(v22 + 24) = v21;
  v25 = swift_allocObject();
  *(_QWORD *)(v25 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:);
  *(_QWORD *)(v25 + 24) = v22;
  *(_QWORD *)(v0 + 392) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
  _allocateUninitializedArray<A>(_:)();
  v26 = v3;
  swift_retain();
  *v26 = partial apply for closure #1 in OSLogArguments.append(_:);
  v26[1] = v23;
  swift_retain();
  v26[2] = partial apply for closure #1 in OSLogArguments.append(_:);
  v26[3] = v24;
  swift_retain();
  v26[4] = partial apply for closure #1 in OSLogArguments.append(_:);
  v26[5] = v25;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(v27, v28))
  {
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    v12 = createStorage<A>(capacity:type:)(0);
    v13 = createStorage<A>(capacity:type:)(1);
    v29 = buf;
    v30 = v12;
    v31 = v13;
    serialize(_:at:)(2, &v29);
    serialize(_:at:)(1, &v29);
    v32 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v33 = v23;
    closure #1 in osLogInternal(_:log:type:)(&v32, (uint64_t)&v29, (uint64_t)&v30, (uint64_t)&v31);
    v32 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v33 = v24;
    closure #1 in osLogInternal(_:log:type:)(&v32, (uint64_t)&v29, (uint64_t)&v30, (uint64_t)&v31);
    v32 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v33 = v25;
    closure #1 in osLogInternal(_:log:type:)(&v32, (uint64_t)&v29, (uint64_t)&v30, (uint64_t)&v31);
    _os_log_impl(&dword_24749F000, v27, v28, "Starting to undo matching meds: %s", buf, size);
    destroyStorage<A>(_:count:)(v12, 0, v10);
    destroyStorage<A>(_:count:)(v13, 1, MEMORY[0x24BEE4AD8] + 8);
    MEMORY[0x24957D398](buf, MEMORY[0x24BEE4260]);
    swift_release();
    swift_release();
    swift_release();
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
  }
  v14[50] = 0;
  v8 = v14[44];
  v7 = v14[41];
  v9 = v14[40];

  v4 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
  v14[51] = v4;
  v4(v8, v9);
  v5 = (_QWORD *)swift_task_alloc();
  v14[52] = v5;
  *v5 = v14[26];
  v5[1] = MedsUndoer.undo(matchingMeds:);
  return MedsUndoer.convertMatchedMedNamesToDoseEvents(matchingMeds:)(v14[37], v14[38], v14[39]);
}

{
  uint64_t v0;
  uint64_t v1;
  id v2;
  uint64_t v4;
  Class isa;
  id v6;

  v1 = *(_QWORD *)(v0 + 424);
  v6 = *(id *)(v0 + 312);
  *(_QWORD *)(v0 + 208) = v0;
  *(_QWORD *)(v0 + 232) = v1;
  v2 = v6;
  swift_bridgeObjectRetain();
  type metadata accessor for HKMedicationExposableDoseEvent();
  isa = Array._bridgeToObjectiveC()().super.isa;
  *(_QWORD *)(v0 + 432) = isa;
  swift_bridgeObjectRelease();
  *(_QWORD *)(v0 + 16) = *(_QWORD *)(v0 + 208);
  *(_QWORD *)(v0 + 56) = v4;
  *(_QWORD *)(v0 + 24) = MedsUndoer.undo(matchingMeds:);
  *(_QWORD *)(v0 + 112) = swift_continuation_init();
  *(_QWORD *)(v0 + 80) = MEMORY[0x24BDAC760];
  *(_DWORD *)(v0 + 88) = 0x40000000;
  *(_DWORD *)(v0 + 92) = 0;
  *(_QWORD *)(v0 + 96) = @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned Bool, @unowned NSError?) -> () with result type () zero on error;
  *(_QWORD *)(v0 + 104) = &block_descriptor_2;
  objc_msgSend(v6, sel_writeDoseEvents_completion_, isa, v0 + 80);
  return __swift_continuation_await_point(v0 + 16);
}

{
  _QWORD *v0;
  _QWORD *v1;

  v1 = (_QWORD *)*v0;
  v1[26] = *v0;
  v1[55] = v1[6];
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t);
  char *v9;
  uint64_t v10;
  uint8_t *buf;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t, uint64_t, uint64_t);
  uint64_t v19;
  uint32_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  NSObject *v27;
  os_log_type_t v28;
  uint8_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t (*v32)(uint64_t, uint64_t, uint64_t);
  uint64_t v33;

  v15 = *(id *)(v0 + 432);
  v19 = *(_QWORD *)(v0 + 424);
  v18 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 360);
  v1 = *(_QWORD *)(v0 + 344);
  v17 = *(_QWORD *)(v0 + 320);
  v2 = *(void **)(v0 + 312);
  *(_QWORD *)(v0 + 208) = v0;

  v16 = Logger.wellnessIntents.unsafeMutableAddressor();
  swift_beginAccess();
  v18(v1, v16, v17);
  swift_endAccess();
  swift_bridgeObjectRetain();
  v21 = swift_allocObject();
  *(_QWORD *)(v21 + 16) = v19;
  v27 = Logger.logObject.getter();
  v28 = static os_log_type_t.debug.getter();
  *(_QWORD *)(v0 + 288) = 12;
  UnsignedInteger<>.init<A>(_:)();
  v20 = *(_DWORD *)(v0 + 456);
  v23 = swift_allocObject();
  *(_BYTE *)(v23 + 16) = 32;
  v24 = swift_allocObject();
  *(_BYTE *)(v24 + 16) = 8;
  v22 = swift_allocObject();
  *(_QWORD *)(v22 + 16) = partial apply for implicit closure #2 in MedsUndoer.undo(matchingMeds:);
  *(_QWORD *)(v22 + 24) = v21;
  v25 = swift_allocObject();
  *(_QWORD *)(v25 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:);
  *(_QWORD *)(v25 + 24) = v22;
  _allocateUninitializedArray<A>(_:)();
  v26 = v3;
  swift_retain();
  *v26 = partial apply for closure #1 in OSLogArguments.append(_:);
  v26[1] = v23;
  swift_retain();
  v26[2] = partial apply for closure #1 in OSLogArguments.append(_:);
  v26[3] = v24;
  swift_retain();
  v26[4] = partial apply for closure #1 in OSLogArguments.append(_:);
  v26[5] = v25;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (!os_log_type_enabled(v27, v28))
  {
    swift_release();
    swift_release();
    swift_release();
    goto LABEL_6;
  }
  v4 = v14[50];
  buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
  v12 = createStorage<A>(capacity:type:)(0);
  v13 = createStorage<A>(capacity:type:)(1);
  v29 = buf;
  v30 = v12;
  v31 = v13;
  serialize(_:at:)(2, &v29);
  serialize(_:at:)(1, &v29);
  v32 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  v33 = v23;
  result = closure #1 in osLogInternal(_:log:type:)(&v32, (uint64_t)&v29, (uint64_t)&v30, (uint64_t)&v31);
  if (!v4)
  {
    v32 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v33 = v24;
    closure #1 in osLogInternal(_:log:type:)(&v32, (uint64_t)&v29, (uint64_t)&v30, (uint64_t)&v31);
    v32 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v33 = v25;
    closure #1 in osLogInternal(_:log:type:)(&v32, (uint64_t)&v29, (uint64_t)&v30, (uint64_t)&v31);
    _os_log_impl(&dword_24749F000, v27, v28, "successfully undid writing of %s doseEvents, returning .success", buf, v20);
    destroyStorage<A>(_:count:)(v12, 0, v10);
    destroyStorage<A>(_:count:)(v13, 1, MEMORY[0x24BEE4AD8] + 8);
    MEMORY[0x24957D398](buf, MEMORY[0x24BEE4260]);
    swift_release();
    swift_release();
    swift_release();
LABEL_6:
    v8 = (void (*)(uint64_t, uint64_t))v14[51];
    v6 = v14[43];
    v7 = v14[40];

    v8(v6, v7);
    type metadata accessor for UndoMedsIntentResponse();
    v9 = UndoMedsIntentResponse.__allocating_init(code:userActivity:)(4, 0);
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(char *))(v14[26] + 8))(v9);
  }
  return result;
}

{
  uint64_t v0;
  id v1;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);
  id v6;
  char *v7;
  uint64_t v8;
  uint8_t *buf;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  id v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(uint64_t, uint64_t, uint64_t);
  uint32_t v21;
  os_log_type_t v22;
  NSObject *v23;
  uint64_t v24;

  v17 = *(void **)(v0 + 440);
  v16 = *(id *)(v0 + 432);
  v20 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 360);
  v14 = *(_QWORD *)(v0 + 336);
  v19 = *(_QWORD *)(v0 + 320);
  v15 = *(id *)(v0 + 312);
  *(_QWORD *)(v0 + 208) = v0;
  swift_willThrow();

  v1 = v17;
  *(_QWORD *)(v0 + 240) = v17;
  v18 = Logger.wellnessIntents.unsafeMutableAddressor();
  swift_beginAccess();
  v20(v14, v18, v19);
  swift_endAccess();
  v23 = Logger.logObject.getter();
  v22 = static os_log_type_t.debug.getter();
  *(_QWORD *)(v0 + 248) = 2;
  UnsignedInteger<>.init<A>(_:)();
  v21 = *(_DWORD *)(v0 + 452);
  v24 = _allocateUninitializedArray<A>(_:)();
  if (os_log_type_enabled(v23, v22))
  {
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    v10 = createStorage<A>(capacity:type:)(0);
    v11 = createStorage<A>(capacity:type:)(0);
    *(_QWORD *)(v13 + 256) = buf;
    *(_QWORD *)(v13 + 264) = v10;
    *(_QWORD *)(v13 + 272) = v11;
    serialize(_:at:)(0, (_BYTE **)(v13 + 256));
    serialize(_:at:)(0, (_BYTE **)(v13 + 256));
    *(_QWORD *)(v13 + 280) = v24;
    v12 = (_QWORD *)swift_task_alloc();
    v12[2] = v13 + 256;
    v12[3] = v13 + 264;
    v12[4] = v13 + 272;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
    lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
    Sequence.forEach(_:)();
    swift_task_dealloc();
    _os_log_impl(&dword_24749F000, v23, v22, "failed to undo writing of doseEvents, returning .success", buf, v21);
    destroyStorage<A>(_:count:)(v10, 0, v8);
    destroyStorage<A>(_:count:)(v11, 0, MEMORY[0x24BEE4AD8] + 8);
    MEMORY[0x24957D398](buf, MEMORY[0x24BEE4260]);
  }
  swift_bridgeObjectRelease();
  v6 = *(id *)(v13 + 440);
  v5 = *(void (**)(uint64_t, uint64_t))(v13 + 408);
  v3 = *(_QWORD *)(v13 + 336);
  v4 = *(_QWORD *)(v13 + 320);

  v5(v3, v4);
  type metadata accessor for UndoMedsIntentResponse();
  v7 = UndoMedsIntentResponse.__allocating_init(code:userActivity:)(5, 0);

  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(char *))(*(_QWORD *)(v13 + 208) + 8))(v7);
}

uint64_t MedsUndoer.undo(matchingMeds:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;

  v3 = *v1;
  *(_QWORD *)(v3 + 208) = *v1;
  *(_QWORD *)(v3 + 424) = a1;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t MedsUndoer.convertMatchedMedNamesToDoseEvents(matchingMeds:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3[85] = a3;
  v3[84] = a2;
  v3[83] = a1;
  v3[46] = v3;
  v3[47] = 0;
  v3[40] = 0;
  v3[41] = 0;
  v3[48] = 0;
  v3[50] = 0;
  v3[56] = 0;
  v3[62] = 0;
  v3[31] = 0;
  v3[32] = 0;
  v3[33] = 0;
  v3[63] = 0;
  v3[42] = 0;
  v3[43] = 0;
  v3[66] = 0;
  v3[78] = 0;
  v3[80] = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  v3[86] = swift_task_alloc();
  v4 = type metadata accessor for UUID();
  v3[87] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[88] = v5;
  v3[89] = *(_QWORD *)(v5 + 64);
  v3[90] = swift_task_alloc();
  v3[91] = swift_task_alloc();
  v6 = type metadata accessor for Logger();
  v3[92] = v6;
  v3[93] = *(_QWORD *)(v6 - 8);
  v3[94] = swift_task_alloc();
  v3[95] = swift_task_alloc();
  v3[96] = swift_task_alloc();
  v7 = type metadata accessor for Date();
  v3[97] = v7;
  v3[98] = *(_QWORD *)(v7 - 8);
  v3[99] = swift_task_alloc();
  v3[100] = swift_task_alloc();
  v3[101] = swift_task_alloc();
  v3[102] = swift_task_alloc();
  v8 = type metadata accessor for DateInterval();
  v3[103] = v8;
  v3[104] = *(_QWORD *)(v8 - 8);
  v3[105] = swift_task_alloc();
  v3[106] = swift_task_alloc();
  v3[47] = a1;
  v3[40] = a2;
  v3[41] = a3;
  return swift_task_switch();
}

uint64_t MedsUndoer.convertMatchedMedNamesToDoseEvents(matchingMeds:)()
{
  uint64_t v0;
  id v1;
  void (*v2)(uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  Class isa;
  void *v16;

  v11 = *(_QWORD *)(v0 + 848);
  v14 = *(_QWORD *)(v0 + 840);
  v12 = *(_QWORD *)(v0 + 832);
  v13 = *(_QWORD *)(v0 + 824);
  v5 = *(_QWORD *)(v0 + 816);
  v9 = *(_QWORD *)(v0 + 808);
  v6 = *(_QWORD *)(v0 + 800);
  v10 = *(_QWORD *)(v0 + 792);
  v4 = *(_QWORD *)(v0 + 784);
  v7 = *(_QWORD *)(v0 + 776);
  v16 = *(void **)(v0 + 680);
  *(_QWORD *)(v0 + 368) = v0;
  Date.init()();
  Date.startOfDay.getter(v9);
  v8 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
  v8(v5, v7);
  Date.init()();
  Date.endOfDay.getter(v10);
  v8(v6, v7);
  DateInterval.init(start:end:)();
  v1 = v16;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 16))(v14, v11, v13);
  isa = DateInterval._bridgeToObjectiveC()().super.isa;
  *(_QWORD *)(v0 + 856) = isa;
  v2 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
  *(_QWORD *)(v0 + 864) = v2;
  v2(v14, v13);
  *(_QWORD *)(v0 + 16) = *(_QWORD *)(v0 + 368);
  *(_QWORD *)(v0 + 56) = v0 + 392;
  *(_QWORD *)(v0 + 24) = MedsUndoer.convertMatchedMedNamesToDoseEvents(matchingMeds:);
  *(_QWORD *)(v0 + 176) = swift_continuation_init();
  *(_QWORD *)(v0 + 144) = MEMORY[0x24BDAC760];
  *(_DWORD *)(v0 + 152) = 0x40000000;
  *(_DWORD *)(v0 + 156) = 0;
  *(_QWORD *)(v0 + 160) = @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned NSArray?, @unowned NSError?) -> () with result type [HKMedicationExposableDoseEvent];
  *(_QWORD *)(v0 + 168) = &block_descriptor_43;
  objc_msgSend(v16, sel_doseEventsForDateInterval_medicationIdentifier_completion_, isa, 0, v0 + 144);
  return __swift_continuation_await_point(v0 + 16);
}

{
  _QWORD *v0;
  _QWORD *v1;

  v1 = (_QWORD *)*v0;
  v1[46] = *v0;
  v1[109] = v1[6];
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  id v11;
  void (*v12)(uint64_t, uint64_t);
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  Class isa;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint8_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(uint64_t, uint64_t, uint64_t);
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void (*v40)(void);
  uint64_t v41;
  uint32_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  NSObject *log;
  os_log_type_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  id v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint8_t *buf;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint32_t size;
  os_log_type_t v70;
  NSObject *oslog;
  uint64_t v72;
  uint64_t v73;
  id v74;
  id v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  void *v84;
  void *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;

  v85 = (void *)v0[107];
  v84 = (void *)v0[85];
  v0[46] = v0;
  v86 = v0[49];
  swift_bridgeObjectRetain();
  v0[48] = v86;

  v0[58] = v86;
  v0[110] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [HKMedicationExposableDoseEvent]);
  lazy protocol witness table accessor for type [HKMedicationExposableDoseEvent] and conformance [A]();
  v87 = Sequence.sorted(by:)();
  outlined destroy of [HKQuantityType]();
  *(_QWORD *)(v83 + 472) = v87;
  lazy protocol witness table accessor for type [HKMedicationExposableDoseEvent] and conformance [A]();
  v82 = _ArrayProtocol.filter(_:)();
  v81 = *(_QWORD *)(v83 + 664);
  *(_QWORD *)(v83 + 480) = v82;
  lazy protocol witness table accessor for type [HKMedicationExposableDoseEvent] and conformance [A]();
  BidirectionalCollection.reversed()();
  *(_QWORD *)(v83 + 488) = *(_QWORD *)(v83 + 456);
  type metadata accessor for HKMedicationExposableDoseEvent();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ReversedCollection<[HKMedicationExposableDoseEvent]>);
  lazy protocol witness table accessor for type ReversedCollection<[HKMedicationExposableDoseEvent]> and conformance ReversedCollection<A>();
  v80 = Array.init<A>(_:)();
  swift_bridgeObjectRetain();
  *(_QWORD *)(v83 + 448) = v80;
  *(_QWORD *)(v83 + 496) = _allocateUninitializedArray<A>(_:)();
  v1 = type metadata accessor for MatchedMedName();
  if (MEMORY[0x24957D110](v81, v1) < 0)
    return _assertionFailure(_:_:file:line:flags:)();
  *(_QWORD *)(v83 + 248) = specialized Collection<>.makeIterator()();
  *(_QWORD *)(v83 + 256) = v3;
  *(_QWORD *)(v83 + 264) = v4;
  while (1)
  {
    v88 = specialized IndexingIterator.next()();
    if ((v5 & 1) != 0)
      break;
    *(_QWORD *)(v83 + 640) = v88;
    swift_bridgeObjectRetain();
    Array.subscript.getter();
    v79 = *(_QWORD *)(v83 + 648);
    swift_bridgeObjectRelease();
    *(_QWORD *)(v83 + 656) = v79;
    Array.append(_:)();
  }
  swift_bridgeObjectRelease();
  *(_QWORD *)(v83 + 504) = _allocateUninitializedArray<A>(_:)();
  v76 = *(_QWORD *)(v83 + 496);
  swift_bridgeObjectRetain();
  *(_QWORD *)(v83 + 512) = v76;
  lazy protocol witness table accessor for type [HKMedicationExposableDoseEvent] and conformance [A]();
  Collection<>.makeIterator()();
  v77 = 0;
  v78 = 0;
  while (1)
  {
    while (1)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<[HKMedicationExposableDoseEvent]>);
      IndexingIterator.next()();
      v75 = *(id *)(v83 + 520);
      *(_QWORD *)(v83 + 888) = v75;
      if (!v75)
      {
        v14 = *(void (**)(uint64_t, uint64_t))(v83 + 864);
        v15 = *(_QWORD *)(v83 + 848);
        v13 = *(_QWORD *)(v83 + 824);
        outlined destroy of [HKQuantityType]();
        v16 = *(_QWORD *)(v83 + 504);
        swift_bridgeObjectRetain();
        outlined destroy of [HKQuantityType]();
        outlined destroy of [HKQuantityType]();
        outlined destroy of [HKQuantityType]();
        outlined destroy of [HKQuantityType]();
        v14(v15, v13);
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v83 + 368) + 8))(v16);
      }
      *(_QWORD *)(v83 + 528) = v75;
      *(_QWORD *)(v83 + 536) = objc_msgSend(v75, sel_logOrigin);
      *(_QWORD *)(v83 + 544) = 2;
      type metadata accessor for HKMedicationDoseEventLogOrigin();
      lazy protocol witness table accessor for type HKMedicationDoseEventLogOrigin and conformance HKMedicationDoseEventLogOrigin();
      if ((== infix<A>(_:_:)() & 1) == 0)
        break;
      v74 = MedsUndoer.getUpdatedDoseEvent(doseEvent:matchingMeds:)(v75, *(_QWORD *)(v83 + 664), *(_QWORD *)(v83 + 672), *(_QWORD *)(v83 + 680));
      if (v74)
      {
        *(_QWORD *)(v83 + 624) = v74;
        v6 = v74;
        *(_QWORD *)(v83 + 632) = v74;
        Array.append(_:)();

        v73 = v77;
        goto LABEL_24;
      }
      v7 = *(_QWORD *)(v83 + 768);
      v66 = *(_QWORD *)(v83 + 744);
      v68 = *(_QWORD *)(v83 + 736);
      v67 = Logger.wellnessIntents.unsafeMutableAddressor();
      swift_beginAccess();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v66 + 16))(v7, v67, v68);
      swift_endAccess();
      oslog = Logger.logObject.getter();
      v70 = static os_log_type_t.error.getter();
      *(_QWORD *)(v83 + 584) = 2;
      lazy protocol witness table accessor for type UInt32 and conformance UInt32();
      lazy protocol witness table accessor for type UInt32 and conformance UInt32();
      lazy protocol witness table accessor for type Int and conformance Int();
      UnsignedInteger<>.init<A>(_:)();
      size = *(_DWORD *)(v83 + 936);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
      v72 = _allocateUninitializedArray<A>(_:)();
      if (os_log_type_enabled(oslog, v70))
      {
        buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
        v61 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
        v63 = createStorage<A>(capacity:type:)(0);
        v64 = createStorage<A>(capacity:type:)(0);
        *(_QWORD *)(v83 + 592) = buf;
        *(_QWORD *)(v83 + 600) = v63;
        *(_QWORD *)(v83 + 608) = v64;
        serialize(_:at:)(0, (_BYTE **)(v83 + 592));
        serialize(_:at:)(0, (_BYTE **)(v83 + 592));
        *(_QWORD *)(v83 + 616) = v72;
        v65 = (_QWORD *)swift_task_alloc();
        v65[2] = v83 + 592;
        v65[3] = v83 + 600;
        v65[4] = v83 + 608;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
        lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
        Sequence.forEach(_:)();
        swift_task_dealloc();
        _os_log_impl(&dword_24749F000, oslog, v70, "Failed to get a matching med for this doseEvent, skipping", buf, size);
        destroyStorage<A>(_:count:)(v63, 0, v61);
        destroyStorage<A>(_:count:)(v64, 0, MEMORY[0x24BEE4AD8] + 8);
        MEMORY[0x24957D398](buf, MEMORY[0x24BEE4260]);
        swift_bridgeObjectRelease();
        v59 = 0;
        v60 = 0;
      }
      else
      {
        swift_bridgeObjectRelease();
        v59 = v77;
        v60 = v78;
      }
      v57 = *(_QWORD *)(v83 + 768);
      v56 = *(_QWORD *)(v83 + 744);
      v58 = *(_QWORD *)(v83 + 736);

      (*(void (**)(uint64_t, uint64_t))(v56 + 8))(v57, v58);
      v77 = v59;
      v78 = v60;
    }
    v55 = objc_msgSend(v75, sel_persistedUUID);
    if (v55)
    {
      v51 = *(_QWORD *)(v83 + 720);
      v52 = *(_QWORD *)(v83 + 704);
      v53 = *(_QWORD *)(v83 + 696);
      v54 = *(_QWORD *)(v83 + 688);
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v52 + 32))(v54, v51, v53);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v52 + 56))(v54, 0, 1, v53);

    }
    else
    {
      (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v83 + 704) + 56))(*(_QWORD *)(v83 + 688), 1, 1, *(_QWORD *)(v83 + 696));
    }
    if ((*(unsigned int (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)(v83 + 704) + 48))(*(_QWORD *)(v83 + 688), 1, *(_QWORD *)(v83 + 696)) != 1)break;
    outlined destroy of UUID?(*(_QWORD *)(v83 + 688));
    v73 = v77;
LABEL_24:

    v77 = v73;
  }
  v8 = *(_QWORD *)(v83 + 760);
  v31 = *(_QWORD *)(v83 + 744);
  v33 = *(_QWORD *)(v83 + 736);
  v34 = *(_QWORD *)(v83 + 728);
  v38 = *(_QWORD *)(v83 + 720);
  v36 = *(_QWORD *)(v83 + 704);
  v39 = *(_QWORD *)(v83 + 696);
  v40 = *(void (**)(void))(v36 + 32);
  v40();
  v32 = Logger.wellnessIntents.unsafeMutableAddressor();
  swift_beginAccess();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v31 + 16))(v8, v32, v33);
  swift_endAccess();
  v35 = *(void (**)(uint64_t, uint64_t, uint64_t))(v36 + 16);
  v35(v38, v34, v39);
  v37 = (*(unsigned __int8 *)(v36 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v36 + 80);
  v41 = swift_allocObject();
  ((void (*)(unint64_t, uint64_t, uint64_t))v40)(v41 + v37, v38, v39);
  swift_retain();
  v43 = swift_allocObject();
  *(_QWORD *)(v43 + 16) = partial apply for implicit closure #1 in MedsUndoer.convertMatchedMedNamesToDoseEvents(matchingMeds:);
  *(_QWORD *)(v43 + 24) = v41;
  swift_release();
  log = Logger.logObject.getter();
  v50 = static os_log_type_t.debug.getter();
  *(_QWORD *)(v83 + 552) = 12;
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  v42 = *(_DWORD *)(v83 + 932);
  v45 = swift_allocObject();
  *(_BYTE *)(v45 + 16) = 32;
  v46 = swift_allocObject();
  *(_BYTE *)(v46 + 16) = 8;
  v44 = swift_allocObject();
  *(_QWORD *)(v44 + 16) = implicit closure #1 in OSLogInterpolation.appendInterpolation<A>(_:align:privacy:)partial apply;
  *(_QWORD *)(v44 + 24) = v43;
  v47 = swift_allocObject();
  *(_QWORD *)(v47 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:);
  *(_QWORD *)(v47 + 24) = v44;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
  _allocateUninitializedArray<A>(_:)();
  v48 = v9;
  swift_retain();
  *v48 = partial apply for closure #1 in OSLogArguments.append(_:);
  v48[1] = v45;
  swift_retain();
  v48[2] = partial apply for closure #1 in OSLogArguments.append(_:);
  v48[3] = v46;
  swift_retain();
  v48[4] = partial apply for closure #1 in OSLogArguments.append(_:);
  v48[5] = v47;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(log, v50))
  {
    v28 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    v29 = createStorage<A>(capacity:type:)(0);
    v30 = createStorage<A>(capacity:type:)(1);
    *(_QWORD *)(v83 + 560) = v28;
    *(_QWORD *)(v83 + 568) = v29;
    *(_QWORD *)(v83 + 576) = v30;
    serialize(_:at:)(2, (_BYTE **)(v83 + 560));
    serialize(_:at:)(1, (_BYTE **)(v83 + 560));
    *(_QWORD *)(v83 + 352) = partial apply for closure #1 in OSLogArguments.append(_:);
    *(_QWORD *)(v83 + 360) = v45;
    closure #1 in osLogInternal(_:log:type:)((uint64_t (**)(uint64_t, uint64_t, uint64_t))(v83 + 352), v83 + 560, v83 + 568, v83 + 576);
    *(_QWORD *)(v83 + 352) = partial apply for closure #1 in OSLogArguments.append(_:);
    *(_QWORD *)(v83 + 360) = v46;
    closure #1 in osLogInternal(_:log:type:)((uint64_t (**)(uint64_t, uint64_t, uint64_t))(v83 + 352), v83 + 560, v83 + 568, v83 + 576);
    *(_QWORD *)(v83 + 352) = partial apply for closure #1 in OSLogArguments.append(_:);
    *(_QWORD *)(v83 + 360) = v47;
    closure #1 in osLogInternal(_:log:type:)((uint64_t (**)(uint64_t, uint64_t, uint64_t))(v83 + 352), v83 + 560, v83 + 568, v83 + 576);
    _os_log_impl(&dword_24749F000, log, v50, "Deleting as needed doseEvent with persistent uuid: %s", v28, v42);
    destroyStorage<A>(_:count:)(v29, 0, v27);
    destroyStorage<A>(_:count:)(v30, 1, MEMORY[0x24BEE4AD8] + 8);
    MEMORY[0x24957D398](v28, MEMORY[0x24BEE4260]);
    swift_release();
    swift_release();
    swift_release();
    v25 = 0;
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
    v25 = v77;
  }
  *(_QWORD *)(v83 + 896) = v25;
  v18 = *(_QWORD *)(v83 + 760);
  v17 = *(_QWORD *)(v83 + 744);
  v19 = *(_QWORD *)(v83 + 736);
  v20 = *(_QWORD *)(v83 + 728);
  v10 = *(_QWORD *)(v83 + 720);
  v21 = *(_QWORD *)(v83 + 704);
  v22 = *(_QWORD *)(v83 + 696);
  v24 = *(id *)(v83 + 680);

  (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v18, v19);
  v11 = v24;
  v35(v10, v20, v22);
  isa = UUID._bridgeToObjectiveC()().super.isa;
  *(_QWORD *)(v83 + 904) = isa;
  v12 = *(void (**)(uint64_t, uint64_t))(v21 + 8);
  *(_QWORD *)(v83 + 912) = v12;
  v12(v10, v22);
  *(_QWORD *)(v83 + 80) = *(_QWORD *)(v83 + 368);
  *(_QWORD *)(v83 + 120) = v26;
  *(_QWORD *)(v83 + 88) = MedsUndoer.convertMatchedMedNamesToDoseEvents(matchingMeds:);
  *(_QWORD *)(v83 + 216) = swift_continuation_init();
  *(_QWORD *)(v83 + 184) = MEMORY[0x24BDAC760];
  *(_DWORD *)(v83 + 192) = 0x40000000;
  *(_DWORD *)(v83 + 196) = 0;
  *(_QWORD *)(v83 + 200) = @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned Bool, @unowned NSError?) -> () with result type () zero on error;
  *(_QWORD *)(v83 + 208) = &block_descriptor_68;
  objc_msgSend(v24, sel_deleteDoseEventWithPersistentUUID_completion_, isa, v83 + 184);
  return __swift_continuation_await_point(v83 + 80);
}

{
  _QWORD *v0;
  _QWORD *v1;

  v1 = (_QWORD *)*v0;
  v1[46] = *v0;
  v1[115] = v1[14];
  return swift_task_switch();
}

{
  _QWORD *v0;
  void *v1;
  id v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  id v8;
  void (*v9)(uint64_t, uint64_t);
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  Class isa;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint8_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(uint64_t, uint64_t, uint64_t);
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(void);
  uint64_t v38;
  uint32_t size;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  NSObject *oslog;
  os_log_type_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  id v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint8_t *buf;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint32_t v67;
  os_log_type_t v68;
  NSObject *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  id v73;
  uint64_t i;
  uint64_t v75;
  void *v76;
  uint64_t v77;
  void *v78;
  uint64_t v79;
  uint64_t v80;
  void (*v81)(uint64_t, uint64_t);
  uint64_t v82;

  v81 = (void (*)(uint64_t, uint64_t))v0[114];
  v78 = (void *)v0[113];
  v79 = v0[91];
  v80 = v0[87];
  v1 = (void *)v0[85];
  v0[46] = v0;

  v81(v79, v80);
  v82 = v0[112];
  while (2)
  {
    v71 = v82;
    v72 = v48;
LABEL_24:

    v75 = v71;
    for (i = v72; ; i = v58)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<[HKMedicationExposableDoseEvent]>);
      IndexingIterator.next()();
      v76 = *(void **)(v77 + 520);
      *(_QWORD *)(v77 + 888) = v76;
      if (!v76)
      {
        v11 = *(void (**)(uint64_t, uint64_t))(v77 + 864);
        v12 = *(_QWORD *)(v77 + 848);
        v10 = *(_QWORD *)(v77 + 824);
        outlined destroy of [HKQuantityType]();
        v13 = *(_QWORD *)(v77 + 504);
        swift_bridgeObjectRetain();
        outlined destroy of [HKQuantityType]();
        outlined destroy of [HKQuantityType]();
        outlined destroy of [HKQuantityType]();
        outlined destroy of [HKQuantityType]();
        v11(v12, v10);
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v77 + 368) + 8))(v13);
      }
      *(_QWORD *)(v77 + 528) = v76;
      *(_QWORD *)(v77 + 536) = objc_msgSend(v76, sel_logOrigin);
      *(_QWORD *)(v77 + 544) = 2;
      type metadata accessor for HKMedicationDoseEventLogOrigin();
      lazy protocol witness table accessor for type HKMedicationDoseEventLogOrigin and conformance HKMedicationDoseEventLogOrigin();
      if ((== infix<A>(_:_:)() & 1) == 0)
        break;
      v73 = MedsUndoer.getUpdatedDoseEvent(doseEvent:matchingMeds:)(v76, *(_QWORD *)(v77 + 664), *(_QWORD *)(v77 + 672), *(_QWORD *)(v77 + 680));
      if (v73)
      {
        *(_QWORD *)(v77 + 624) = v73;
        v2 = v73;
        *(_QWORD *)(v77 + 632) = v73;
        Array.append(_:)();

        v71 = v75;
        v72 = i;
        goto LABEL_24;
      }
      v3 = *(_QWORD *)(v77 + 768);
      v64 = *(_QWORD *)(v77 + 744);
      v66 = *(_QWORD *)(v77 + 736);
      v65 = Logger.wellnessIntents.unsafeMutableAddressor();
      swift_beginAccess();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v64 + 16))(v3, v65, v66);
      swift_endAccess();
      v69 = Logger.logObject.getter();
      v68 = static os_log_type_t.error.getter();
      *(_QWORD *)(v77 + 584) = 2;
      lazy protocol witness table accessor for type UInt32 and conformance UInt32();
      lazy protocol witness table accessor for type UInt32 and conformance UInt32();
      lazy protocol witness table accessor for type Int and conformance Int();
      UnsignedInteger<>.init<A>(_:)();
      v67 = *(_DWORD *)(v77 + 936);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
      v70 = _allocateUninitializedArray<A>(_:)();
      if (os_log_type_enabled(v69, v68))
      {
        buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
        v59 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
        v61 = createStorage<A>(capacity:type:)(0);
        v62 = createStorage<A>(capacity:type:)(0);
        *(_QWORD *)(v77 + 592) = buf;
        *(_QWORD *)(v77 + 600) = v61;
        *(_QWORD *)(v77 + 608) = v62;
        serialize(_:at:)(0, (_BYTE **)(v77 + 592));
        serialize(_:at:)(0, (_BYTE **)(v77 + 592));
        *(_QWORD *)(v77 + 616) = v70;
        v63 = (_QWORD *)swift_task_alloc();
        v63[2] = v77 + 592;
        v63[3] = v77 + 600;
        v63[4] = v77 + 608;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
        lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
        result = Sequence.forEach(_:)();
        if (v75)
          return result;
        swift_task_dealloc();
        _os_log_impl(&dword_24749F000, v69, v68, "Failed to get a matching med for this doseEvent, skipping", buf, v67);
        destroyStorage<A>(_:count:)(v61, 0, v59);
        destroyStorage<A>(_:count:)(v62, 0, MEMORY[0x24BEE4AD8] + 8);
        MEMORY[0x24957D398](buf, MEMORY[0x24BEE4260]);
        swift_bridgeObjectRelease();
        v57 = 0;
        v58 = 0;
      }
      else
      {
        swift_bridgeObjectRelease();
        v57 = v75;
        v58 = i;
      }
      v55 = *(_QWORD *)(v77 + 768);
      v54 = *(_QWORD *)(v77 + 744);
      v56 = *(_QWORD *)(v77 + 736);

      (*(void (**)(uint64_t, uint64_t))(v54 + 8))(v55, v56);
      v75 = v57;
    }
    v53 = objc_msgSend(v76, sel_persistedUUID);
    if (v53)
    {
      v49 = *(_QWORD *)(v77 + 720);
      v50 = *(_QWORD *)(v77 + 704);
      v51 = *(_QWORD *)(v77 + 696);
      v52 = *(_QWORD *)(v77 + 688);
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v50 + 32))(v52, v49, v51);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v50 + 56))(v52, 0, 1, v51);

    }
    else
    {
      (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v77 + 704) + 56))(*(_QWORD *)(v77 + 688), 1, 1, *(_QWORD *)(v77 + 696));
    }
    if ((*(unsigned int (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)(v77 + 704) + 48))(*(_QWORD *)(v77 + 688), 1, *(_QWORD *)(v77 + 696)) == 1)
    {
      outlined destroy of UUID?(*(_QWORD *)(v77 + 688));
      v82 = v75;
      v48 = i;
      continue;
    }
    break;
  }
  v5 = *(_QWORD *)(v77 + 760);
  v28 = *(_QWORD *)(v77 + 744);
  v30 = *(_QWORD *)(v77 + 736);
  v31 = *(_QWORD *)(v77 + 728);
  v35 = *(_QWORD *)(v77 + 720);
  v33 = *(_QWORD *)(v77 + 704);
  v36 = *(_QWORD *)(v77 + 696);
  v37 = *(void (**)(void))(v33 + 32);
  v37();
  v29 = Logger.wellnessIntents.unsafeMutableAddressor();
  swift_beginAccess();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v28 + 16))(v5, v29, v30);
  swift_endAccess();
  v32 = *(void (**)(uint64_t, uint64_t, uint64_t))(v33 + 16);
  v32(v35, v31, v36);
  v34 = (*(unsigned __int8 *)(v33 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v33 + 80);
  v38 = swift_allocObject();
  ((void (*)(unint64_t, uint64_t, uint64_t))v37)(v38 + v34, v35, v36);
  swift_retain();
  v40 = swift_allocObject();
  *(_QWORD *)(v40 + 16) = partial apply for implicit closure #1 in MedsUndoer.convertMatchedMedNamesToDoseEvents(matchingMeds:);
  *(_QWORD *)(v40 + 24) = v38;
  swift_release();
  oslog = Logger.logObject.getter();
  v47 = static os_log_type_t.debug.getter();
  *(_QWORD *)(v77 + 552) = 12;
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  size = *(_DWORD *)(v77 + 932);
  v42 = swift_allocObject();
  *(_BYTE *)(v42 + 16) = 32;
  v43 = swift_allocObject();
  *(_BYTE *)(v43 + 16) = 8;
  v41 = swift_allocObject();
  *(_QWORD *)(v41 + 16) = implicit closure #1 in OSLogInterpolation.appendInterpolation<A>(_:align:privacy:)partial apply;
  *(_QWORD *)(v41 + 24) = v40;
  v44 = swift_allocObject();
  *(_QWORD *)(v44 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:);
  *(_QWORD *)(v44 + 24) = v41;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
  _allocateUninitializedArray<A>(_:)();
  v45 = v6;
  swift_retain();
  *v45 = partial apply for closure #1 in OSLogArguments.append(_:);
  v45[1] = v42;
  swift_retain();
  v45[2] = partial apply for closure #1 in OSLogArguments.append(_:);
  v45[3] = v43;
  swift_retain();
  v45[4] = partial apply for closure #1 in OSLogArguments.append(_:);
  v45[5] = v44;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(oslog, v47))
  {
    v25 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    v26 = createStorage<A>(capacity:type:)(0);
    v27 = createStorage<A>(capacity:type:)(1);
    *(_QWORD *)(v77 + 560) = v25;
    *(_QWORD *)(v77 + 568) = v26;
    *(_QWORD *)(v77 + 576) = v27;
    serialize(_:at:)(2, (_BYTE **)(v77 + 560));
    serialize(_:at:)(1, (_BYTE **)(v77 + 560));
    *(_QWORD *)(v77 + 352) = partial apply for closure #1 in OSLogArguments.append(_:);
    *(_QWORD *)(v77 + 360) = v42;
    result = closure #1 in osLogInternal(_:log:type:)((uint64_t (**)(uint64_t, uint64_t, uint64_t))(v77 + 352), v77 + 560, v77 + 568, v77 + 576);
    if (v75)
      return result;
    *(_QWORD *)(v77 + 352) = partial apply for closure #1 in OSLogArguments.append(_:);
    *(_QWORD *)(v77 + 360) = v43;
    closure #1 in osLogInternal(_:log:type:)((uint64_t (**)(uint64_t, uint64_t, uint64_t))(v77 + 352), v77 + 560, v77 + 568, v77 + 576);
    *(_QWORD *)(v77 + 352) = partial apply for closure #1 in OSLogArguments.append(_:);
    *(_QWORD *)(v77 + 360) = v44;
    closure #1 in osLogInternal(_:log:type:)((uint64_t (**)(uint64_t, uint64_t, uint64_t))(v77 + 352), v77 + 560, v77 + 568, v77 + 576);
    _os_log_impl(&dword_24749F000, oslog, v47, "Deleting as needed doseEvent with persistent uuid: %s", v25, size);
    destroyStorage<A>(_:count:)(v26, 0, v24);
    destroyStorage<A>(_:count:)(v27, 1, MEMORY[0x24BEE4AD8] + 8);
    MEMORY[0x24957D398](v25, MEMORY[0x24BEE4260]);
    swift_release();
    swift_release();
    swift_release();
    v22 = 0;
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
    v22 = v75;
  }
  *(_QWORD *)(v77 + 896) = v22;
  v15 = *(_QWORD *)(v77 + 760);
  v14 = *(_QWORD *)(v77 + 744);
  v16 = *(_QWORD *)(v77 + 736);
  v17 = *(_QWORD *)(v77 + 728);
  v7 = *(_QWORD *)(v77 + 720);
  v18 = *(_QWORD *)(v77 + 704);
  v19 = *(_QWORD *)(v77 + 696);
  v21 = *(id *)(v77 + 680);

  (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v15, v16);
  v8 = v21;
  v32(v7, v17, v19);
  isa = UUID._bridgeToObjectiveC()().super.isa;
  *(_QWORD *)(v77 + 904) = isa;
  v9 = *(void (**)(uint64_t, uint64_t))(v18 + 8);
  *(_QWORD *)(v77 + 912) = v9;
  v9(v7, v19);
  *(_QWORD *)(v77 + 80) = *(_QWORD *)(v77 + 368);
  *(_QWORD *)(v77 + 120) = v23;
  *(_QWORD *)(v77 + 88) = MedsUndoer.convertMatchedMedNamesToDoseEvents(matchingMeds:);
  *(_QWORD *)(v77 + 216) = swift_continuation_init();
  *(_QWORD *)(v77 + 184) = MEMORY[0x24BDAC760];
  *(_DWORD *)(v77 + 192) = 0x40000000;
  *(_DWORD *)(v77 + 196) = 0;
  *(_QWORD *)(v77 + 200) = @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned Bool, @unowned NSError?) -> () with result type () zero on error;
  *(_QWORD *)(v77 + 208) = &block_descriptor_68;
  objc_msgSend(v21, sel_deleteDoseEventWithPersistentUUID_completion_, isa, v77 + 184);
  return __swift_continuation_await_point(v77 + 80);
}

{
  uint64_t v0;
  uint64_t v1;
  id v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint8_t *buf;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t, uint64_t);
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint32_t v23;
  os_log_type_t v24;
  NSObject *v25;
  uint64_t v26;

  v18 = *(void (**)(uint64_t, uint64_t))(v0 + 864);
  v15 = *(void **)(v0 + 856);
  v16 = *(_QWORD *)(v0 + 848);
  v17 = *(_QWORD *)(v0 + 824);
  v14 = *(void **)(v0 + 680);
  *(_QWORD *)(v0 + 368) = v0;
  swift_willThrow();

  v18(v16, v17);
  v19 = *(void **)(v0 + 872);
  v1 = *(_QWORD *)(v0 + 752);
  v20 = *(_QWORD *)(v0 + 744);
  v22 = *(_QWORD *)(v0 + 736);
  v2 = v19;
  *(_QWORD *)(v0 + 400) = v19;
  v21 = Logger.wellnessIntents.unsafeMutableAddressor();
  swift_beginAccess();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v20 + 16))(v1, v21, v22);
  swift_endAccess();
  v25 = Logger.logObject.getter();
  v24 = static os_log_type_t.error.getter();
  *(_QWORD *)(v0 + 408) = 2;
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  v23 = *(_DWORD *)(v0 + 928);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
  v26 = _allocateUninitializedArray<A>(_:)();
  if (os_log_type_enabled(v25, v24))
  {
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    v10 = createStorage<A>(capacity:type:)(0);
    v11 = createStorage<A>(capacity:type:)(0);
    *(_QWORD *)(v13 + 416) = buf;
    *(_QWORD *)(v13 + 424) = v10;
    *(_QWORD *)(v13 + 432) = v11;
    serialize(_:at:)(0, (_BYTE **)(v13 + 416));
    serialize(_:at:)(0, (_BYTE **)(v13 + 416));
    *(_QWORD *)(v13 + 440) = v26;
    v12 = (_QWORD *)swift_task_alloc();
    v12[2] = v13 + 416;
    v12[3] = v13 + 424;
    v12[4] = v13 + 432;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
    lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
    Sequence.forEach(_:)();
    swift_task_dealloc();
    _os_log_impl(&dword_24749F000, v25, v24, "failed to get or delete dose events in convertMatchedMedNamesToDoseEvents", buf, v23);
    destroyStorage<A>(_:count:)(v10, 0, v8);
    destroyStorage<A>(_:count:)(v11, 0, MEMORY[0x24BEE4AD8] + 8);
    MEMORY[0x24957D398](buf, MEMORY[0x24BEE4260]);
  }
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(v13 + 752);
  v4 = *(_QWORD *)(v13 + 744);
  v6 = *(_QWORD *)(v13 + 736);

  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v5, v6);
  type metadata accessor for HKMedicationExposableDoseEvent();
  v7 = _allocateUninitializedArray<A>(_:)();

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v13 + 368) + 8))(v7);
}

{
  uint64_t v0;
  uint64_t v1;
  id v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint8_t *buf;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t, uint64_t);
  void *v19;
  uint64_t v20;
  void (*v21)(uint64_t, uint64_t);
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint32_t v27;
  os_log_type_t v28;
  NSObject *v29;
  uint64_t v30;

  v18 = *(void (**)(uint64_t, uint64_t))(v0 + 912);
  v15 = *(void **)(v0 + 904);
  v19 = *(void **)(v0 + 888);
  v21 = *(void (**)(uint64_t, uint64_t))(v0 + 864);
  v22 = *(_QWORD *)(v0 + 848);
  v20 = *(_QWORD *)(v0 + 824);
  v16 = *(_QWORD *)(v0 + 728);
  v17 = *(_QWORD *)(v0 + 696);
  v14 = *(void **)(v0 + 680);
  *(_QWORD *)(v0 + 368) = v0;
  swift_willThrow();

  v18(v16, v17);
  outlined destroy of [HKQuantityType]();
  outlined destroy of [HKQuantityType]();
  outlined destroy of [HKQuantityType]();
  outlined destroy of [HKQuantityType]();
  outlined destroy of [HKQuantityType]();
  v21(v22, v20);
  v23 = *(void **)(v0 + 920);
  v1 = *(_QWORD *)(v0 + 752);
  v24 = *(_QWORD *)(v0 + 744);
  v26 = *(_QWORD *)(v0 + 736);
  v2 = v23;
  *(_QWORD *)(v0 + 400) = v23;
  v25 = Logger.wellnessIntents.unsafeMutableAddressor();
  swift_beginAccess();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v24 + 16))(v1, v25, v26);
  swift_endAccess();
  v29 = Logger.logObject.getter();
  v28 = static os_log_type_t.error.getter();
  *(_QWORD *)(v0 + 408) = 2;
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  v27 = *(_DWORD *)(v0 + 928);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
  v30 = _allocateUninitializedArray<A>(_:)();
  if (os_log_type_enabled(v29, v28))
  {
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    v10 = createStorage<A>(capacity:type:)(0);
    v11 = createStorage<A>(capacity:type:)(0);
    *(_QWORD *)(v13 + 416) = buf;
    *(_QWORD *)(v13 + 424) = v10;
    *(_QWORD *)(v13 + 432) = v11;
    serialize(_:at:)(0, (_BYTE **)(v13 + 416));
    serialize(_:at:)(0, (_BYTE **)(v13 + 416));
    *(_QWORD *)(v13 + 440) = v30;
    v12 = (_QWORD *)swift_task_alloc();
    v12[2] = v13 + 416;
    v12[3] = v13 + 424;
    v12[4] = v13 + 432;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
    lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
    Sequence.forEach(_:)();
    swift_task_dealloc();
    _os_log_impl(&dword_24749F000, v29, v28, "failed to get or delete dose events in convertMatchedMedNamesToDoseEvents", buf, v27);
    destroyStorage<A>(_:count:)(v10, 0, v8);
    destroyStorage<A>(_:count:)(v11, 0, MEMORY[0x24BEE4AD8] + 8);
    MEMORY[0x24957D398](buf, MEMORY[0x24BEE4260]);
  }
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(v13 + 752);
  v4 = *(_QWORD *)(v13 + 744);
  v6 = *(_QWORD *)(v13 + 736);

  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v5, v6);
  type metadata accessor for HKMedicationExposableDoseEvent();
  v7 = _allocateUninitializedArray<A>(_:)();

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v13 + 368) + 8))(v7);
}

uint64_t implicit closure #2 in MedsUndoer.undo(matchingMeds:)(uint64_t a1)
{
  unint64_t v1;

  v1 = type metadata accessor for HKMedicationExposableDoseEvent();
  MEMORY[0x24957D110](a1, v1);
  return String.init<A>(describing:)();
}

void @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned NSArray?, @unowned NSError?) -> () with result type [HKMedicationExposableDoseEvent](uint64_t a1, id a2, void *a3)
{
  id v3;
  id v4;
  id v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  uint64_t v12;
  uint64_t v13;

  v3 = a2;
  v4 = a3;
  v12 = *(_QWORD *)(a1 + 32);
  if (a3)
  {
    v7 = a3;
    v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [HKMedicationExposableDoseEvent]);
    _resumeUnsafeThrowingContinuationWithError<A>(_:_:)(v12, (uint64_t)a3, v8);
  }
  else
  {
    v5 = a2;
    type metadata accessor for HKMedicationExposableDoseEvent();
    v13 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
    v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [HKMedicationExposableDoseEvent]);
    _resumeUnsafeThrowingContinuation<A>(_:_:)(v12, (uint64_t)&v13, v6);

  }
}

uint64_t closure #1 in MedsUndoer.convertMatchedMedNamesToDoseEvents(matchingMeds:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  id *v4;
  id *v5;
  _QWORD v7[2];
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  id v12;
  uint64_t v13;
  char *v14;
  id v15;
  char *v16;
  uint64_t v17;
  void (*v18)(char *, uint64_t);
  id v19;
  int v20;
  id v21;
  id v22;

  v8 = a1;
  v7[1] = a2;
  v22 = 0;
  v21 = 0;
  v17 = type metadata accessor for Date();
  v13 = *(_QWORD *)(v17 - 8);
  v9 = (*(_QWORD *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2 = MEMORY[0x24BDAC7A8](v8);
  v14 = (char *)v7 - v9;
  v10 = (v3 + 15) & 0xFFFFFFFFFFFFFFF0;
  v4 = (id *)MEMORY[0x24BDAC7A8](v2);
  v16 = (char *)v7 - v10;
  v22 = *v4;
  v12 = *v5;
  v21 = v12;
  v11 = 0x1F2DCC000uLL;
  v19 = objc_msgSend(v22, (SEL)0x1F2DCCC48);
  static Date._unconditionallyBridgeFromObjectiveC(_:)();
  v15 = objc_msgSend(v12, (SEL)(v11 + 3144));
  static Date._unconditionallyBridgeFromObjectiveC(_:)();
  v20 = static Date.< infix(_:_:)();
  v18 = *(void (**)(char *, uint64_t))(v13 + 8);
  v18(v14, v17);

  v18(v16, v17);
  return v20 & 1;
}

uint64_t closure #2 in MedsUndoer.convertMatchedMedNamesToDoseEvents(matchingMeds:)(id *a1)
{
  id v1;
  char v3;
  id v4;
  char v5;

  v4 = *a1;
  objc_msgSend(*a1, sel_status);
  type metadata accessor for HKMedicationDoseEventStatus();
  lazy protocol witness table accessor for type HKMedicationDoseEventStatus and conformance HKMedicationDoseEventStatus();
  v5 = == infix<A>(_:_:)();
  v1 = v4;
  if ((v5 & 1) != 0)
  {
    v3 = 1;
  }
  else
  {
    objc_msgSend(v4, sel_status);
    v3 = == infix<A>(_:_:)();
  }

  return v3 & 1;
}

id MedsUndoer.getUpdatedDoseEvent(doseEvent:matchingMeds:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  Swift::String v33;
  uint64_t v34;
  Swift::String v35;
  char *v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint8_t *v47;
  uint64_t v48;
  uint64_t v49;
  unsigned int v50;
  uint64_t *v51;
  uint64_t *v52;
  _BYTE **v53;
  uint64_t *v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint32_t v59;
  int v60;
  NSObject *v61;
  uint64_t v62;
  id v63;
  id v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  void *v68;
  uint64_t v69;
  _QWORD *v70;
  int v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  void *v76;
  id v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  id v82;
  id v83;
  id v84;
  int v86;
  uint64_t v87;
  uint64_t v88;
  void *v89;
  uint64_t v90;
  _QWORD *v91;
  int v92;
  int v93;
  uint64_t countAndFlagsBits;
  uint64_t v95;
  uint64_t v96;
  void *object;
  id v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  id v103;
  id v104;
  int v105;
  int v106;
  int v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  _QWORD *v112;
  int v113;
  int v114;
  uint64_t v115;
  uint64_t v116;
  id v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  id v122;
  uint64_t v123;
  uint64_t v124;
  id v125;
  id v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  id v131;
  id v132;
  int v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  _QWORD *v138;
  int v139;
  int v140;
  id v141;
  id v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  id v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  id v152;
  id v153;
  id v154;
  id v155;
  uint64_t v156;
  id v157;
  void (*v158)(char *, uint64_t);
  uint64_t v159;
  uint64_t v160;
  uint64_t i;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint8_t *v166;
  uint64_t v167;
  uint64_t v168;
  _BYTE **v169;
  uint64_t *v170;
  uint64_t *v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  unint64_t v177;
  char *v178;
  unint64_t v179;
  char *v180;
  uint64_t v181;
  _QWORD *v182;
  uint64_t v183;
  uint64_t v184;
  void (*v185)(char *, uint64_t, uint64_t);
  char *v186;
  id v187;
  unint64_t v188;
  unint64_t v189;
  uint64_t *v190;
  unint64_t v191;
  uint32_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  _QWORD *v202;
  uint64_t v203;
  NSObject *v204;
  int v205;
  uint64_t (*v206)(uint64_t, uint64_t, uint64_t);
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  _BYTE *v210;
  _QWORD v211[2];
  _QWORD v212[2];
  _QWORD v213[2];
  uint64_t v214;
  uint64_t v215;
  _QWORD v216[2];
  id v217;
  _QWORD v218[2];
  id v219;
  id v220;
  _QWORD v221[2];
  uint64_t v222;
  void *v223;
  _QWORD v224[2];
  uint64_t v225;
  void *v226;
  _QWORD v227[2];
  uint64_t v228;
  uint64_t v229;
  id v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  _BYTE *v234[2];
  uint32_t v235;
  char v236;
  void *v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint32_t v242;
  char v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;

  v187 = a1;
  v176 = a2;
  v174 = a3;
  v175 = a4;
  v247 = 0;
  v246 = 0;
  v244 = 0;
  v245 = 0;
  v239 = 0;
  v240 = 0;
  v181 = 0;
  v173 = 0;
  v230 = 0;
  v220 = 0;
  v219 = 0;
  v217 = 0;
  v184 = type metadata accessor for Logger();
  v182 = *(_QWORD **)(v184 - 8);
  v177 = (v182[8] + 15) & 0xFFFFFFFFFFFFFFF0;
  v4 = MEMORY[0x24BDAC7A8](v187);
  v178 = (char *)&v42 - v177;
  v179 = (v5 + 15) & 0xFFFFFFFFFFFFFFF0;
  v6 = MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v42 - v179;
  v180 = (char *)&v42 - v179;
  v247 = v6;
  v246 = v8;
  v244 = v9;
  v245 = v10;
  v183 = Logger.wellnessIntents.unsafeMutableAddressor();
  v186 = &v243;
  v194 = 32;
  swift_beginAccess();
  v185 = (void (*)(char *, uint64_t, uint64_t))v182[2];
  v185(v7, v183, v184);
  swift_endAccess();
  v11 = v187;
  v195 = 7;
  v196 = swift_allocObject();
  *(_QWORD *)(v196 + 16) = v187;
  v204 = Logger.logObject.getter();
  v205 = static os_log_type_t.debug.getter();
  v190 = &v241;
  v241 = 12;
  v188 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  v189 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  v191 = lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  v192 = v242;
  v193 = 17;
  v198 = swift_allocObject();
  *(_BYTE *)(v198 + 16) = 32;
  v199 = swift_allocObject();
  *(_BYTE *)(v199 + 16) = 8;
  v12 = swift_allocObject();
  v13 = v196;
  v197 = v12;
  *(_QWORD *)(v12 + 16) = partial apply for implicit closure #1 in MedsUndoer.getUpdatedDoseEvent(doseEvent:matchingMeds:);
  *(_QWORD *)(v12 + 24) = v13;
  v14 = swift_allocObject();
  v15 = v197;
  v201 = v14;
  *(_QWORD *)(v14 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:);
  *(_QWORD *)(v14 + 24) = v15;
  v203 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
  v200 = _allocateUninitializedArray<A>(_:)();
  v202 = v16;
  swift_retain();
  v17 = v198;
  v18 = v202;
  *v202 = partial apply for closure #1 in OSLogArguments.append(_:);
  v18[1] = v17;
  swift_retain();
  v19 = v199;
  v20 = v202;
  v202[2] = partial apply for closure #1 in OSLogArguments.append(_:);
  v20[3] = v19;
  swift_retain();
  v21 = v201;
  v22 = v202;
  v202[4] = partial apply for closure #1 in OSLogArguments.append(_:);
  v22[5] = v21;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(v204, (os_log_type_t)v205))
  {
    v23 = v173;
    v166 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    v165 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    v167 = createStorage<A>(capacity:type:)(0);
    v168 = createStorage<A>(capacity:type:)(1);
    v169 = &v210;
    v210 = v166;
    v170 = &v209;
    v209 = v167;
    v171 = &v208;
    v208 = v168;
    serialize(_:at:)(2, &v210);
    serialize(_:at:)(1, v169);
    v206 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v207 = v198;
    closure #1 in osLogInternal(_:log:type:)(&v206, (uint64_t)v169, (uint64_t)v170, (uint64_t)v171);
    v172 = v23;
    if (v23)
    {
      __break(1u);
    }
    else
    {
      v206 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v207 = v199;
      closure #1 in osLogInternal(_:log:type:)(&v206, (uint64_t)&v210, (uint64_t)&v209, (uint64_t)&v208);
      v163 = 0;
      v25 = v163;
      v206 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v207 = v201;
      closure #1 in osLogInternal(_:log:type:)(&v206, (uint64_t)&v210, (uint64_t)&v209, (uint64_t)&v208);
      v162 = v25;
      _os_log_impl(&dword_24749F000, v204, (os_log_type_t)v205, "Starting to get updated status dose event for %s", v166, v192);
      destroyStorage<A>(_:count:)(v167, 0, v165);
      destroyStorage<A>(_:count:)(v168, 1, MEMORY[0x24BEE4AD8] + 8);
      MEMORY[0x24957D398](v166, MEMORY[0x24BEE4260]);
      swift_release();
      swift_release();
      swift_release();
      v164 = v162;
    }
  }
  else
  {
    v24 = v173;
    swift_release();
    swift_release();
    swift_release();
    v164 = v24;
  }
  v160 = v164;

  v158 = (void (*)(char *, uint64_t))v182[1];
  v158(v180, v184);
  swift_bridgeObjectRetain();
  v238 = v176;
  v159 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [MatchedMedName]);
  lazy protocol witness table accessor for type [MatchedMedName] and conformance [A]();
  Collection<>.makeIterator()();
  for (i = v160; ; i = v156)
  {
    v156 = i;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<[MatchedMedName]>);
    IndexingIterator.next()();
    v157 = v237;
    if (!v237)
      break;
    v155 = v157;
    v153 = v157;
    v230 = v157;
    v154 = objc_msgSend(v157, sel_medicationID);
    if (v154)
    {
      v152 = v154;
      v147 = v154;
      v148 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v149 = v26;

      v150 = v148;
      v151 = v149;
    }
    else
    {
      v150 = 0;
      v151 = 0;
    }
    v145 = v151;
    v144 = v150;
    swift_bridgeObjectRetain();
    v142 = objc_msgSend(v187, sel_medicationIdentifier);
    v141 = objc_msgSend(v142, sel_underlyingIdentifier);
    v143 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v146 = v27;

    swift_bridgeObjectRetain();
    v227[0] = v144;
    v227[1] = v145;
    v228 = v143;
    v229 = v146;
    if (v145)
    {
      outlined init with copy of String?(v227, v211);
      if (v229)
      {
        v134 = v211[0];
        v137 = v211[1];
        swift_bridgeObjectRetain();
        v135 = v228;
        v138 = v227;
        v136 = v229;
        swift_bridgeObjectRetain();
        v139 = static String.== infix(_:_:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        outlined destroy of String.UTF8View();
        v140 = v139;
        goto LABEL_20;
      }
      outlined destroy of String.UTF8View();
LABEL_22:
      outlined destroy of (String?, String?)();
      v140 = 0;
      goto LABEL_20;
    }
    if (v229)
      goto LABEL_22;
    outlined destroy of String.UTF8View();
    v140 = 1;
LABEL_20:
    v133 = v140;
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    v28 = v153;
    v29 = v187;
    if ((v133 & 1) == 0)
    {
      v107 = 0;
      goto LABEL_39;
    }
    v132 = objc_msgSend(v153, sel_scheduleID);
    if (v132)
    {
      v131 = v132;
      v126 = v132;
      v127 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v128 = v30;

      v129 = v127;
      v130 = v128;
    }
    else
    {
      v129 = 0;
      v130 = 0;
    }
    v123 = v130;
    v124 = v129;
    swift_bridgeObjectRetain();
    v125 = objc_msgSend(v187, sel_scheduleItemIdentifier);
    if (v125)
    {
      v122 = v125;
      v117 = v125;
      v118 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v119 = v31;

      v120 = v118;
      v121 = v119;
    }
    else
    {
      v120 = 0;
      v121 = 0;
    }
    v116 = v121;
    v115 = v120;
    swift_bridgeObjectRetain();
    v213[0] = v124;
    v213[1] = v123;
    v214 = v115;
    v215 = v116;
    if (!v123)
    {
      if (!v215)
      {
        outlined destroy of String.UTF8View();
        v114 = 1;
        goto LABEL_36;
      }
      goto LABEL_37;
    }
    outlined init with copy of String?(v213, v212);
    if (!v215)
    {
      outlined destroy of String.UTF8View();
LABEL_37:
      outlined destroy of (String?, String?)();
      v114 = 0;
      goto LABEL_36;
    }
    v108 = v212[0];
    v111 = v212[1];
    swift_bridgeObjectRetain();
    v109 = v214;
    v112 = v213;
    v110 = v215;
    swift_bridgeObjectRetain();
    v113 = static String.== infix(_:_:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined destroy of String.UTF8View();
    v114 = v113;
LABEL_36:
    v106 = v114;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v107 = v106;
LABEL_39:
    v105 = v107;

    if ((v105 & 1) != 0)
    {
      v104 = objc_msgSend(v153, sel_completionStatus);
      if (v104)
      {
        v103 = v104;
        v98 = v104;
        v99 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        v100 = v32;

        v101 = v99;
        v102 = v100;
      }
      else
      {
        v101 = 0;
        v102 = 0;
      }
      v96 = v102;
      v95 = v101;
      swift_bridgeObjectRetain();
      v33 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("taken", 5uLL, 1);
      countAndFlagsBits = v33._countAndFlagsBits;
      object = v33._object;
      swift_bridgeObjectRetain();
      v224[0] = v95;
      v224[1] = v96;
      v225 = countAndFlagsBits;
      v226 = object;
      if (v96)
      {
        outlined init with copy of String?(v224, v216);
        if (v226)
        {
          v87 = v216[0];
          v90 = v216[1];
          swift_bridgeObjectRetain();
          v88 = v225;
          v91 = v224;
          v89 = v226;
          swift_bridgeObjectRetain();
          v92 = static String.== infix(_:_:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          outlined destroy of String.UTF8View();
          v93 = v92;
          goto LABEL_49;
        }
        outlined destroy of String.UTF8View();
LABEL_51:
        outlined destroy of (String?, String?)();
        v93 = 0;
      }
      else
      {
        if (v226)
          goto LABEL_51;
        outlined destroy of String.UTF8View();
        v93 = 1;
      }
LABEL_49:
      v86 = v93;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v86 & 1) != 0)
      {
        v84 = objc_msgSend(v187, sel_updateForNewStatus_, 4);
        v217 = v84;

        outlined destroy of [HKQuantityType]();
        return v84;
      }
      v83 = objc_msgSend(v153, sel_completionStatus);
      if (v83)
      {
        v82 = v83;
        v77 = v83;
        v78 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        v79 = v34;

        v80 = v78;
        v81 = v79;
      }
      else
      {
        v80 = 0;
        v81 = 0;
      }
      v75 = v81;
      v74 = v80;
      swift_bridgeObjectRetain();
      v35 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("skipped", 7uLL, 1);
      v73 = v35._countAndFlagsBits;
      v76 = v35._object;
      swift_bridgeObjectRetain();
      v221[0] = v74;
      v221[1] = v75;
      v222 = v73;
      v223 = v76;
      if (v75)
      {
        outlined init with copy of String?(v221, v218);
        if (v223)
        {
          v66 = v218[0];
          v69 = v218[1];
          swift_bridgeObjectRetain();
          v67 = v222;
          v70 = v221;
          v68 = v223;
          swift_bridgeObjectRetain();
          v71 = static String.== infix(_:_:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          outlined destroy of String.UTF8View();
          v72 = v71;
          goto LABEL_63;
        }
        outlined destroy of String.UTF8View();
LABEL_65:
        outlined destroy of (String?, String?)();
        v72 = 0;
      }
      else
      {
        if (v223)
          goto LABEL_65;
        outlined destroy of String.UTF8View();
        v72 = 1;
      }
LABEL_63:
      v65 = v72;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v65 & 1) != 0)
      {
        v64 = objc_msgSend(v187, sel_updateForNewStatus_, 5);
        v219 = v64;

        outlined destroy of [HKQuantityType]();
        return v64;
      }
      else
      {
        v63 = objc_msgSend(v187, sel_updateForNewStatus_, 6);
        v220 = v63;

        outlined destroy of [HKQuantityType]();
        return v63;
      }
    }

  }
  v36 = v178;
  outlined destroy of [HKQuantityType]();
  v57 = Logger.wellnessIntents.unsafeMutableAddressor();
  v58 = &v236;
  swift_beginAccess();
  v185(v36, v57, v184);
  swift_endAccess();
  v61 = Logger.logObject.getter();
  v60 = static os_log_type_t.error.getter();
  v234[1] = (_BYTE *)2;
  UnsignedInteger<>.init<A>(_:)();
  v59 = v235;
  v62 = _allocateUninitializedArray<A>(_:)();
  if (os_log_type_enabled(v61, (os_log_type_t)v60))
  {
    v37 = v156;
    v47 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    v45 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    v46 = 0;
    v48 = createStorage<A>(capacity:type:)(0);
    v49 = createStorage<A>(capacity:type:)(v46);
    v53 = v234;
    v234[0] = v47;
    v54 = &v233;
    v233 = v48;
    v51 = &v232;
    v232 = v49;
    v50 = 0;
    serialize(_:at:)(0, v234);
    serialize(_:at:)(v50, v53);
    v231 = v62;
    v52 = &v42;
    MEMORY[0x24BDAC7A8](&v42);
    v38 = v54;
    v39 = &v42 - 6;
    v55 = &v42 - 6;
    v39[2] = (uint64_t)v53;
    v39[3] = (uint64_t)v38;
    v39[4] = v40;
    v56 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
    lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
    Sequence.forEach(_:)();
    if (v37)
    {
      __break(1u);
    }
    else
    {
      _os_log_impl(&dword_24749F000, v61, (os_log_type_t)v60, "Couldn't find a matching med for this doseEvent, returning nil", v47, v59);
      v44 = 0;
      destroyStorage<A>(_:count:)(v48, 0, v45);
      destroyStorage<A>(_:count:)(v49, v44, MEMORY[0x24BEE4AD8] + 8);
      MEMORY[0x24957D398](v47, MEMORY[0x24BEE4260]);
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  v43 = 0;

  v158(v178, v184);
  return (id)v43;
}

uint64_t implicit closure #1 in MedsUndoer.convertMatchedMedNamesToDoseEvents(matchingMeds:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  v2 = type metadata accessor for UUID();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a2, a1);
}

uint64_t implicit closure #1 in MedsUndoer.getUpdatedDoseEvent(doseEvent:matchingMeds:)(void *a1)
{
  id v2;
  id v3;
  uint64_t v4;

  v2 = objc_msgSend(a1, sel_medicationIdentifier);
  v3 = objc_msgSend(v2, sel_underlyingIdentifier);
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  v4 = String.init<A>(describing:)();
  return v4;
}

uint64_t protocol witness for MedsUndoing.undo(matchingMeds:) in conformance MedsUndoer(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)(v2 + 16) = v2;
  v5 = *v1;
  v6 = v1[1];
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 24) = v3;
  *v3 = *(_QWORD *)(v2 + 16);
  v3[1] = protocol witness for QuantityPersisting.save(quantityIdentifier:value:units:) in conformance HealthKitPersistor;
  return MedsUndoer.undo(matchingMeds:)(a1, v5, v6);
}

uint64_t sub_2474EAA30()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 24));
  return swift_deallocObject();
}

uint64_t partial apply for @objc closure #1 in UndoMedsIntentHandler.handle(intent:)()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  const void *v4;
  void *v5;
  void *v6;

  *(_QWORD *)(v1 + 16) = v1;
  v6 = (void *)v0[2];
  v4 = (const void *)v0[3];
  v5 = (void *)v0[4];
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 24) = v2;
  *v2 = *(_QWORD *)(v1 + 16);
  v2[1] = _sIeghH_IeAgH_TRTQ0_;
  return ((uint64_t (*)(void *, const void *, void *))((char *)&async function pointer to @objc closure #1 in UndoMedsIntentHandler.handle(intent:)
                                                               + async function pointer to @objc closure #1 in UndoMedsIntentHandler.handle(intent:)))(v6, v4, v5);
}

uint64_t sub_2474EAB28()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_2474EAB64()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t _s2os18OSLogInterpolationV06appendC0_5align7privacyyxyXA_AA0B15StringAlignmentVAA0B7PrivacyVts06CustomG11ConvertibleRzlFSSycfu_TA_1()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v5 = *(_QWORD *)(v0 + 16);
  v3 = *(_QWORD *)(v0 + 24);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [MatchedMedName]);
  v1 = lazy protocol witness table accessor for type [MatchedMedName] and conformance [A]();
  return implicit closure #1 in OSLogInterpolation.appendInterpolation<A>(_:align:privacy:)(v5, v3, v4, v1);
}

unint64_t lazy protocol witness table accessor for type [MatchedMedName] and conformance [A]()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type [MatchedMedName] and conformance [A];
  if (!lazy protocol witness table cache variable for type [MatchedMedName] and conformance [A])
  {
    v0 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [MatchedMedName]);
    v1 = MEMORY[0x24957D92C](MEMORY[0x24BEE12F8], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type [MatchedMedName] and conformance [A]);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type [MatchedMedName] and conformance [A];
  if (!lazy protocol witness table cache variable for type [MatchedMedName] and conformance [A])
  {
    v0 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [MatchedMedName]);
    v1 = MEMORY[0x24957D92C](MEMORY[0x24BEE12E0], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type [MatchedMedName] and conformance [A]);
    return v1;
  }
  return v3;
}

uint64_t sub_2474EAC5C()
{
  return swift_deallocObject();
}

uint64_t sub_2474EAC84()
{
  return swift_deallocObject();
}

uint64_t sub_2474EACAC()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2474EACE8()
{
  swift_release();
  return swift_deallocObject();
}

unint64_t type metadata accessor for HKMedicationExposableDoseEvent()
{
  unint64_t ObjCClassMetadata;
  uint64_t v2;

  v2 = lazy cache variable for type metadata for HKMedicationExposableDoseEvent;
  if (!lazy cache variable for type metadata for HKMedicationExposableDoseEvent)
  {
    objc_opt_self();
    ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for HKMedicationExposableDoseEvent);
    return ObjCClassMetadata;
  }
  return v2;
}

uint64_t sub_2474EAD88()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #2 in MedsUndoer.undo(matchingMeds:)()
{
  uint64_t v0;

  return implicit closure #2 in MedsUndoer.undo(matchingMeds:)(*(_QWORD *)(v0 + 16));
}

uint64_t sub_2474EADCC()
{
  return swift_deallocObject();
}

uint64_t sub_2474EADF4()
{
  return swift_deallocObject();
}

uint64_t sub_2474EAE1C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2474EAE58()
{
  swift_release();
  return swift_deallocObject();
}

unint64_t lazy protocol witness table accessor for type [HKMedicationExposableDoseEvent] and conformance [A]()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type [HKMedicationExposableDoseEvent] and conformance [A];
  if (!lazy protocol witness table cache variable for type [HKMedicationExposableDoseEvent] and conformance [A])
  {
    v0 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [HKMedicationExposableDoseEvent]);
    v1 = MEMORY[0x24957D92C](MEMORY[0x24BEE12C8], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type [HKMedicationExposableDoseEvent] and conformance [A]);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type [HKMedicationExposableDoseEvent] and conformance [A];
  if (!lazy protocol witness table cache variable for type [HKMedicationExposableDoseEvent] and conformance [A])
  {
    v0 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [HKMedicationExposableDoseEvent]);
    v1 = MEMORY[0x24957D92C](MEMORY[0x24BEE12F0], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type [HKMedicationExposableDoseEvent] and conformance [A]);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type [HKMedicationExposableDoseEvent] and conformance [A];
  if (!lazy protocol witness table cache variable for type [HKMedicationExposableDoseEvent] and conformance [A])
  {
    v0 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [HKMedicationExposableDoseEvent]);
    v1 = MEMORY[0x24957D92C](MEMORY[0x24BEE12B0], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type [HKMedicationExposableDoseEvent] and conformance [A]);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type [HKMedicationExposableDoseEvent] and conformance [A];
  if (!lazy protocol witness table cache variable for type [HKMedicationExposableDoseEvent] and conformance [A])
  {
    v0 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [HKMedicationExposableDoseEvent]);
    v1 = MEMORY[0x24957D92C](MEMORY[0x24BEE12E0], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type [HKMedicationExposableDoseEvent] and conformance [A]);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type [HKMedicationExposableDoseEvent] and conformance [A];
  if (!lazy protocol witness table cache variable for type [HKMedicationExposableDoseEvent] and conformance [A])
  {
    v0 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [HKMedicationExposableDoseEvent]);
    v1 = MEMORY[0x24957D92C](MEMORY[0x24BEE12F8], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type [HKMedicationExposableDoseEvent] and conformance [A]);
    return v1;
  }
  return v3;
}

unint64_t lazy protocol witness table accessor for type ReversedCollection<[HKMedicationExposableDoseEvent]> and conformance ReversedCollection<A>()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type ReversedCollection<[HKMedicationExposableDoseEvent]> and conformance ReversedCollection<A>;
  if (!lazy protocol witness table cache variable for type ReversedCollection<[HKMedicationExposableDoseEvent]> and conformance ReversedCollection<A>)
  {
    v0 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ReversedCollection<[HKMedicationExposableDoseEvent]>);
    v1 = MEMORY[0x24957D92C](MEMORY[0x24BEE3048], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type ReversedCollection<[HKMedicationExposableDoseEvent]> and conformance ReversedCollection<A>);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type ReversedCollection<[HKMedicationExposableDoseEvent]> and conformance ReversedCollection<A>;
  if (!lazy protocol witness table cache variable for type ReversedCollection<[HKMedicationExposableDoseEvent]> and conformance ReversedCollection<A>)
  {
    v0 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ReversedCollection<[HKMedicationExposableDoseEvent]>);
    v1 = MEMORY[0x24957D92C](MEMORY[0x24BEE3058], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type ReversedCollection<[HKMedicationExposableDoseEvent]> and conformance ReversedCollection<A>);
    return v1;
  }
  return v3;
}

unint64_t lazy protocol witness table accessor for type HKMedicationDoseEventLogOrigin and conformance HKMedicationDoseEventLogOrigin()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type HKMedicationDoseEventLogOrigin and conformance HKMedicationDoseEventLogOrigin;
  if (!lazy protocol witness table cache variable for type HKMedicationDoseEventLogOrigin and conformance HKMedicationDoseEventLogOrigin)
  {
    v0 = type metadata accessor for HKMedicationDoseEventLogOrigin();
    v1 = MEMORY[0x24957D92C](&protocol conformance descriptor for HKMedicationDoseEventLogOrigin, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type HKMedicationDoseEventLogOrigin and conformance HKMedicationDoseEventLogOrigin);
    return v1;
  }
  return v3;
}

uint64_t outlined destroy of UUID?(uint64_t a1)
{
  uint64_t v3;
  uint64_t v4;

  v3 = type metadata accessor for UUID();
  v4 = *(_QWORD *)(v3 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t))(v4 + 48))(a1, 1))
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(a1, v3);
  return a1;
}

uint64_t sub_2474EB1A4()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(type metadata accessor for UUID() - 8);
  (*(void (**)(unint64_t))(v1 + 8))(v0 + ((*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80)));
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #1 in MedsUndoer.convertMatchedMedNamesToDoseEvents(matchingMeds:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for UUID() - 8) + 80);
  return implicit closure #1 in MedsUndoer.convertMatchedMedNamesToDoseEvents(matchingMeds:)(v1 + ((v2 + 16) & ~v2), a1);
}

uint64_t sub_2474EB254()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t implicit closure #1 in OSLogInterpolation.appendInterpolation<A>(_:align:privacy:)partial apply()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v5 = *(_QWORD *)(v0 + 16);
  v3 = *(_QWORD *)(v0 + 24);
  v4 = type metadata accessor for UUID();
  v1 = lazy protocol witness table accessor for type UUID and conformance UUID();
  return implicit closure #1 in OSLogInterpolation.appendInterpolation<A>(_:align:privacy:)(v5, v3, v4, v1);
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v5 = *(_QWORD *)(v0 + 16);
  v3 = *(_QWORD *)(v0 + 24);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  v1 = lazy protocol witness table accessor for type [String] and conformance [A]();
  return implicit closure #1 in OSLogInterpolation.appendInterpolation<A>(_:align:privacy:)(v5, v3, v4, v1);
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v5 = *(_QWORD *)(v0 + 16);
  v3 = *(_QWORD *)(v0 + 24);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [HKMedicationExposableDoseEvent]);
  v1 = lazy protocol witness table accessor for type [HKMedicationExposableDoseEvent] and conformance [A]();
  return implicit closure #1 in OSLogInterpolation.appendInterpolation<A>(_:align:privacy:)(v5, v3, v4, v1);
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v5 = *(_QWORD *)(v0 + 16);
  v3 = *(_QWORD *)(v0 + 24);
  v4 = type metadata accessor for DateInterval();
  v1 = lazy protocol witness table accessor for type DateInterval and conformance DateInterval();
  return implicit closure #1 in OSLogInterpolation.appendInterpolation<A>(_:align:privacy:)(v5, v3, v4, v1);
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v5 = *(_QWORD *)(v0 + 16);
  v3 = *(_QWORD *)(v0 + 24);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Set<String?>);
  v1 = lazy protocol witness table accessor for type Set<String?> and conformance Set<A>();
  return implicit closure #1 in OSLogInterpolation.appendInterpolation<A>(_:align:privacy:)(v5, v3, v4, v1);
}

unint64_t lazy protocol witness table accessor for type UUID and conformance UUID()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type UUID and conformance UUID;
  if (!lazy protocol witness table cache variable for type UUID and conformance UUID)
  {
    v0 = type metadata accessor for UUID();
    v1 = MEMORY[0x24957D92C](MEMORY[0x24BDCEAB8], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID);
    return v1;
  }
  return v3;
}

uint64_t sub_2474EB348()
{
  return swift_deallocObject();
}

uint64_t sub_2474EB370()
{
  return swift_deallocObject();
}

uint64_t sub_2474EB398()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2474EB3D4()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2474EB410()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #1 in MedsUndoer.getUpdatedDoseEvent(doseEvent:matchingMeds:)()
{
  uint64_t v0;

  return implicit closure #1 in MedsUndoer.getUpdatedDoseEvent(doseEvent:matchingMeds:)(*(void **)(v0 + 16));
}

uint64_t sub_2474EB454()
{
  return swift_deallocObject();
}

uint64_t sub_2474EB47C()
{
  return swift_deallocObject();
}

uint64_t sub_2474EB4A4()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2474EB4E0()
{
  swift_release();
  return swift_deallocObject();
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of (String?, String?)()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
}

_QWORD *outlined init with copy of String?(_QWORD *a1, _QWORD *a2)
{
  _QWORD *result;
  uint64_t v4;

  *a2 = *a1;
  v4 = a1[1];
  swift_bridgeObjectRetain();
  result = a2;
  a2[1] = v4;
  return result;
}

uint64_t type metadata accessor for UndoMedsIntentHandler()
{
  return objc_opt_self();
}

_QWORD *initializeBufferWithCopyOfBuffer for MedsUndoer(_QWORD *a1, uint64_t a2)
{
  id v2;
  id v3;
  _QWORD *result;
  id v5;
  void *v7;

  v5 = *(id *)a2;
  v2 = *(id *)a2;
  *a1 = v5;
  v7 = *(void **)(a2 + 8);
  v3 = v7;
  result = a1;
  a1[1] = v7;
  return result;
}

void destroy for MedsUndoer(id *a1)
{

}

uint64_t assignWithCopy for MedsUndoer(uint64_t a1, uint64_t a2)
{
  id v2;
  void *v3;
  id v4;
  void *v5;
  id v7;
  void *v9;

  v7 = *(id *)a2;
  v2 = *(id *)a2;
  v3 = *(void **)a1;
  *(_QWORD *)a1 = v7;

  v9 = *(void **)(a2 + 8);
  v4 = v9;
  v5 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v9;

  return a1;
}

uint64_t assignWithTake for MedsUndoer(uint64_t a1, _QWORD *a2)
{
  void *v2;
  void *v3;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = *a2;

  v3 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = a2[1];

  return a1;
}

uint64_t getEnumTagSinglePayload for MedsUndoer(uint64_t a1, unsigned int a2)
{
  int v3;
  int v4;

  if (a2)
  {
    if (a2 > 0x7FFFFFFF && *(_BYTE *)(a1 + 16))
    {
      v4 = *(_OWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v3 = -1;
      if (*(_QWORD *)a1 < 0x100000000uLL)
        v3 = *(_QWORD *)a1;
      v4 = v3;
    }
  }
  else
  {
    v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for MedsUndoer(uint64_t result, unsigned int a2, unsigned int a3)
{
  _BOOL4 v3;

  v3 = a3 > 0x7FFFFFFF;
  if (a2 > 0x7FFFFFFF)
  {
    *(_OWORD *)result = a2 + 0x80000000;
    if (a3 > 0x7FFFFFFF)
    {
      if (v3)
        *(_BYTE *)(result + 16) = 1;
      else
        __break(1u);
    }
  }
  else
  {
    if (a3 > 0x7FFFFFFF)
    {
      if (v3)
        *(_BYTE *)(result + 16) = 0;
      else
        __break(1u);
    }
    if (a2)
      *(_QWORD *)result = a2 - 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for MedsUndoer()
{
  return &type metadata for MedsUndoer;
}

Swift::Bool __swiftcall validateQuantity(identifier:quantity:)(HKQuantityTypeIdentifier identifier, HKQuantity quantity)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  void *v8;
  char *v9;
  objc_class *v10;
  uint64_t v11;
  id v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint8_t *v57;
  uint64_t v58;
  uint64_t v59;
  unsigned int v60;
  uint64_t *v61;
  uint64_t *v62;
  _BYTE **v63;
  uint64_t *v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t *v71;
  uint32_t v72;
  int v73;
  NSObject *v74;
  uint64_t v75;
  uint64_t *v76;
  uint64_t v77;
  id *v78;
  int v79;
  int v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint8_t *v89;
  uint64_t v90;
  uint64_t v91;
  _BYTE **v92;
  uint64_t *v93;
  uint64_t *v94;
  uint64_t v95;
  id v96;
  uint64_t v97;
  char *v98;
  id v99;
  uint64_t v100;
  id v101;
  unint64_t v102;
  unint64_t v103;
  uint64_t *v104;
  uint32_t v105;
  uint64_t v106;
  uint64_t v107;
  int v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  int v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  _QWORD *v127;
  uint64_t v128;
  NSObject *v129;
  int v130;
  id v131;
  uint64_t v132;
  Class isa;
  HKQuantityTypeIdentifier v134;
  uint64_t v135;
  uint64_t v136;
  unint64_t v137;
  char *v138;
  unint64_t v139;
  char *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  id v144;
  id v145;
  uint64_t (*v146)(uint64_t, uint64_t, uint64_t);
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  _BYTE *v150;
  uint64_t v151;
  id v152;
  uint64_t v153;
  uint32_t v154;
  char v155;
  id v156;
  id v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  _BYTE *v161;
  uint64_t v162;
  uint32_t v163;
  char v164;
  id v165;
  uint64_t v166;
  void *v167;

  v134 = identifier;
  isa = quantity.super.isa;
  v167 = 0;
  v166 = 0;
  v165 = 0;
  v132 = 0;
  v157 = 0;
  v156 = 0;
  v143 = 0;
  v135 = type metadata accessor for Logger();
  v136 = *(_QWORD *)(v135 - 8);
  v137 = (*(_QWORD *)(v136 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2 = MEMORY[0x24BDAC7A8](v134);
  v138 = (char *)&v53 - v137;
  v139 = (v3 + 15) & 0xFFFFFFFFFFFFFFF0;
  v4 = (void *)MEMORY[0x24BDAC7A8](v2);
  v140 = (char *)&v53 - v139;
  v167 = v4;
  v166 = v5;
  v141 = HKQuantityTypeIdentifier.rawValue.getter(v4);
  v142 = v6;
  swift_bridgeObjectRetain();
  v144 = (id)MEMORY[0x24957CFB4](v141, v142);
  v7 = v144;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  v165 = v144;
  type metadata accessor for HKQuantityType();
  v145 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_quantityTypeForIdentifier_, v144);
  if (v145)
  {
    v131 = v145;
    v99 = v145;
    v157 = v145;
    type metadata accessor for HKManualEntryValidationController();
    v8 = (void *)NSDateFormatter.__allocating_init()();
    v9 = v140;
    v96 = v8;
    v101 = objc_msgSend(v8, sel_validateQuantity_ofType_, isa, v99);

    v156 = v101;
    v97 = Logger.wellnessIntents.unsafeMutableAddressor();
    v98 = &v155;
    v113 = 32;
    swift_beginAccess();
    (*(void (**)(char *, uint64_t, uint64_t))(v136 + 16))(v9, v97, v135);
    swift_endAccess();
    v10 = isa;
    v100 = 24;
    v114 = 7;
    v11 = swift_allocObject();
    v12 = v99;
    v106 = v11;
    *(_QWORD *)(v11 + 16) = isa;
    v13 = v12;
    v109 = swift_allocObject();
    *(_QWORD *)(v109 + 16) = v99;
    v115 = swift_allocObject();
    *(_QWORD *)(v115 + 16) = v101;
    v129 = Logger.logObject.getter();
    v130 = static os_log_type_t.debug.getter();
    v104 = &v153;
    v153 = v113;
    v102 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    v103 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    lazy protocol witness table accessor for type Int and conformance Int();
    UnsignedInteger<>.init<A>(_:)();
    v105 = v154;
    v111 = 17;
    v117 = swift_allocObject();
    v108 = 64;
    *(_BYTE *)(v117 + 16) = 64;
    v118 = swift_allocObject();
    v112 = 8;
    *(_BYTE *)(v118 + 16) = 8;
    v14 = swift_allocObject();
    v15 = v106;
    v107 = v14;
    *(_QWORD *)(v14 + 16) = partial apply for implicit closure #3 in LogQuantityIntentHandler.handle(intent:);
    *(_QWORD *)(v14 + 24) = v15;
    v16 = swift_allocObject();
    v17 = v107;
    v119 = v16;
    *(_QWORD *)(v16 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:);
    *(_QWORD *)(v16 + 24) = v17;
    v120 = swift_allocObject();
    *(_BYTE *)(v120 + 16) = v108;
    v121 = swift_allocObject();
    *(_BYTE *)(v121 + 16) = v112;
    v18 = swift_allocObject();
    v19 = v109;
    v110 = v18;
    *(_QWORD *)(v18 + 16) = partial apply for implicit closure #3 in LogQuantityIntentHandler.handle(intent:);
    *(_QWORD *)(v18 + 24) = v19;
    v20 = swift_allocObject();
    v21 = v110;
    v122 = v20;
    *(_QWORD *)(v20 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:);
    *(_QWORD *)(v20 + 24) = v21;
    v123 = swift_allocObject();
    *(_BYTE *)(v123 + 16) = 32;
    v124 = swift_allocObject();
    *(_BYTE *)(v124 + 16) = v112;
    v22 = swift_allocObject();
    v23 = v115;
    v116 = v22;
    *(_QWORD *)(v22 + 16) = partial apply for implicit closure #3 in validateQuantity(identifier:quantity:);
    *(_QWORD *)(v22 + 24) = v23;
    v24 = swift_allocObject();
    v25 = v116;
    v126 = v24;
    *(_QWORD *)(v24 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:);
    *(_QWORD *)(v24 + 24) = v25;
    v128 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
    v125 = _allocateUninitializedArray<A>(_:)();
    v127 = v26;
    swift_retain();
    v27 = v117;
    v28 = v127;
    *v127 = partial apply for closure #1 in OSLogArguments.append(_:);
    v28[1] = v27;
    swift_retain();
    v29 = v118;
    v30 = v127;
    v127[2] = partial apply for closure #1 in OSLogArguments.append(_:);
    v30[3] = v29;
    swift_retain();
    v31 = v119;
    v32 = v127;
    v127[4] = partial apply for closure #1 in OSLogArguments.append(_:);
    v32[5] = v31;
    swift_retain();
    v33 = v120;
    v34 = v127;
    v127[6] = partial apply for closure #1 in OSLogArguments.append(_:);
    v34[7] = v33;
    swift_retain();
    v35 = v121;
    v36 = v127;
    v127[8] = partial apply for closure #1 in OSLogArguments.append(_:);
    v36[9] = v35;
    swift_retain();
    v37 = v122;
    v38 = v127;
    v127[10] = partial apply for closure #1 in OSLogArguments.append(_:);
    v38[11] = v37;
    swift_retain();
    v39 = v123;
    v40 = v127;
    v127[12] = partial apply for closure #1 in OSLogArguments.append(_:);
    v40[13] = v39;
    swift_retain();
    v41 = v124;
    v42 = v127;
    v127[14] = partial apply for closure #1 in OSLogArguments.append(_:);
    v42[15] = v41;
    swift_retain();
    v43 = v126;
    v44 = v127;
    v127[16] = partial apply for closure #1 in OSLogArguments.append(_:);
    v44[17] = v43;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(v129, (os_log_type_t)v130))
    {
      v45 = v132;
      v89 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      v88 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      v90 = createStorage<A>(capacity:type:)(2);
      v91 = createStorage<A>(capacity:type:)(1);
      v92 = &v150;
      v150 = v89;
      v93 = &v149;
      v149 = v90;
      v94 = &v148;
      v148 = v91;
      serialize(_:at:)(2, &v150);
      serialize(_:at:)(3, v92);
      v146 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v147 = v117;
      closure #1 in osLogInternal(_:log:type:)(&v146, (uint64_t)v92, (uint64_t)v93, (uint64_t)v94);
      v95 = v45;
      if (v45)
      {
        __break(1u);
      }
      else
      {
        v146 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
        v147 = v118;
        closure #1 in osLogInternal(_:log:type:)(&v146, (uint64_t)&v150, (uint64_t)&v149, (uint64_t)&v148);
        v87 = 0;
        v46 = v87;
        v146 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
        v147 = v119;
        closure #1 in osLogInternal(_:log:type:)(&v146, (uint64_t)&v150, (uint64_t)&v149, (uint64_t)&v148);
        v86 = v46;
        v146 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
        v147 = v120;
        closure #1 in osLogInternal(_:log:type:)(&v146, (uint64_t)&v150, (uint64_t)&v149, (uint64_t)&v148);
        v85 = 0;
        v146 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
        v147 = v121;
        closure #1 in osLogInternal(_:log:type:)(&v146, (uint64_t)&v150, (uint64_t)&v149, (uint64_t)&v148);
        v84 = 0;
        v146 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
        v147 = v122;
        closure #1 in osLogInternal(_:log:type:)(&v146, (uint64_t)&v150, (uint64_t)&v149, (uint64_t)&v148);
        v83 = 0;
        v146 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
        v147 = v123;
        closure #1 in osLogInternal(_:log:type:)(&v146, (uint64_t)&v150, (uint64_t)&v149, (uint64_t)&v148);
        v82 = 0;
        v146 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
        v147 = v124;
        closure #1 in osLogInternal(_:log:type:)(&v146, (uint64_t)&v150, (uint64_t)&v149, (uint64_t)&v148);
        v81 = 0;
        v146 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
        v147 = v126;
        closure #1 in osLogInternal(_:log:type:)(&v146, (uint64_t)&v150, (uint64_t)&v149, (uint64_t)&v148);
        _os_log_impl(&dword_24749F000, v129, (os_log_type_t)v130, "%@ for %@ returned validation result: %s", v89, v105);
        destroyStorage<A>(_:count:)(v90, 2, v88);
        destroyStorage<A>(_:count:)(v91, 1, MEMORY[0x24BEE4AD8] + 8);
        MEMORY[0x24957D398](v89, MEMORY[0x24BEE4260]);
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
      }
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
    }

    (*(void (**)(char *, uint64_t))(v136 + 8))(v140, v135);
    v78 = &v152;
    v152 = v101;
    v76 = &v151;
    v151 = 2;
    v77 = type metadata accessor for HKManualEntryValidationResult();
    lazy protocol witness table accessor for type HKManualEntryValidationResult and conformance HKManualEntryValidationResult();
    v79 = dispatch thunk of static Equatable.== infix(_:_:)() ^ 1;

    v80 = v79;
  }
  else
  {
    v47 = v138;
    v67 = Logger.wellnessIntents.unsafeMutableAddressor();
    v68 = &v164;
    swift_beginAccess();
    (*(void (**)(char *, uint64_t, uint64_t))(v136 + 16))(v47, v67, v135);
    swift_endAccess();
    v74 = Logger.logObject.getter();
    v73 = static os_log_type_t.error.getter();
    v71 = &v162;
    v162 = 2;
    v69 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    v70 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    lazy protocol witness table accessor for type Int and conformance Int();
    UnsignedInteger<>.init<A>(_:)();
    v72 = v163;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
    v75 = _allocateUninitializedArray<A>(_:)();
    if (os_log_type_enabled(v74, (os_log_type_t)v73))
    {
      v48 = v132;
      v57 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      v55 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      v56 = 0;
      v58 = createStorage<A>(capacity:type:)(0);
      v59 = createStorage<A>(capacity:type:)(v56);
      v63 = &v161;
      v161 = v57;
      v64 = &v160;
      v160 = v58;
      v61 = &v159;
      v159 = v59;
      v60 = 0;
      serialize(_:at:)(0, &v161);
      serialize(_:at:)(v60, v63);
      v158 = v75;
      v62 = &v53;
      MEMORY[0x24BDAC7A8](&v53);
      v49 = v64;
      v50 = &v53 - 6;
      v65 = &v53 - 6;
      v50[2] = (uint64_t)v63;
      v50[3] = (uint64_t)v49;
      v50[4] = v51;
      v66 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
      lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
      Sequence.forEach(_:)();
      if (v48)
      {
        __break(1u);
      }
      else
      {
        _os_log_impl(&dword_24749F000, v74, (os_log_type_t)v73, "Couldn't create a HKQuantityType in validateQuantity(identifier: HKQuantityTypeIdentifier, quantity: HKQuantity). Returning false.", v57, v72);
        v54 = 0;
        destroyStorage<A>(_:count:)(v58, 0, v55);
        destroyStorage<A>(_:count:)(v59, v54, MEMORY[0x24BEE4AD8] + 8);
        MEMORY[0x24957D398](v57, MEMORY[0x24BEE4260]);
        swift_bridgeObjectRelease();
      }
    }
    else
    {
      swift_bridgeObjectRelease();
    }

    (*(void (**)(char *, uint64_t))(v136 + 8))(v138, v135);
    v80 = 0;
  }
  return v80 & 1;
}

uint64_t HKQuantityTypeIdentifier.rawValue.getter(void *a1)
{
  id v1;
  uint64_t v4;

  v1 = a1;
  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v4;
}

uint64_t implicit closure #3 in validateQuantity(identifier:quantity:)()
{
  type metadata accessor for HKManualEntryValidationResult();
  return String.init<A>(describing:)();
}

unint64_t type metadata accessor for HKManualEntryValidationController()
{
  unint64_t ObjCClassMetadata;
  uint64_t v2;

  v2 = lazy cache variable for type metadata for HKManualEntryValidationController;
  if (!lazy cache variable for type metadata for HKManualEntryValidationController)
  {
    objc_opt_self();
    ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for HKManualEntryValidationController);
    return ObjCClassMetadata;
  }
  return v2;
}

uint64_t sub_2474ECE70()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t sub_2474ECEAC()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t sub_2474ECEE8()
{
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #3 in validateQuantity(identifier:quantity:)()
{
  return implicit closure #3 in validateQuantity(identifier:quantity:)();
}

uint64_t sub_2474ECF18()
{
  return swift_deallocObject();
}

uint64_t sub_2474ECF40()
{
  return swift_deallocObject();
}

uint64_t sub_2474ECF68()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2474ECFA4()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2474ECFE0()
{
  return swift_deallocObject();
}

uint64_t sub_2474ED008()
{
  return swift_deallocObject();
}

uint64_t sub_2474ED030()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2474ED06C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2474ED0A8()
{
  return swift_deallocObject();
}

uint64_t sub_2474ED0D0()
{
  return swift_deallocObject();
}

uint64_t sub_2474ED0F8()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2474ED134()
{
  swift_release();
  return swift_deallocObject();
}

id GetMenstruationPredictionIntentHandler.__allocating_init(store:)(_QWORD *a1)
{
  objc_class *v1;
  id v2;

  v2 = objc_allocWithZone(v1);
  return GetMenstruationPredictionIntentHandler.init(store:)(a1);
}

id GetMenstruationPredictionIntentHandler.init(store:)(_QWORD *a1)
{
  void *v1;
  id v2;
  SiriWellnessIntents::CycleTrackingFetcher v3;
  id v4;
  id v6;
  char *v7;
  objc_class *ObjectType;
  objc_super v10;
  _QWORD v11[5];
  _QWORD __dst[6];
  id v13;

  ObjectType = (objc_class *)swift_getObjectType();
  __dst[5] = a1;
  v2 = v1;
  v13 = v1;
  outlined init with copy of QuantityPersisting?(a1, v11);
  if (v11[3])
  {
    outlined init with take of QuantityPersisting(v11, __dst);
  }
  else
  {
    v3.store.super.isa = CycleTrackingFetcher.init()().store.super.isa;
    __dst[3] = &type metadata for CycleTrackingFetcher;
    __dst[4] = &protocol witness table for CycleTrackingFetcher;
    __dst[0] = v3.store.super.isa;
    outlined destroy of QuantityPersisting?((uint64_t)v11);
  }
  outlined init with take of QuantityPersisting(__dst, &v7[OBJC_IVAR____TtC19SiriWellnessIntents38GetMenstruationPredictionIntentHandler_store]);

  v10.receiver = v13;
  v10.super_class = ObjectType;
  v6 = objc_msgSendSuper2(&v10, sel_init);
  v4 = v6;
  v13 = v6;
  outlined destroy of QuantityPersisting?((uint64_t)a1);

  return v6;
}

SiriWellnessIntents::CycleTrackingFetcher __swiftcall CycleTrackingFetcher.init()()
{
  id v0;
  void *v2;
  id v3;

  v3 = 0;
  type metadata accessor for HKHealthStore();
  v2 = (void *)NSDateFormatter.__allocating_init()();
  v0 = v2;
  v3 = v2;
  outlined destroy of HealthKitPersistor(&v3);
  return (SiriWellnessIntents::CycleTrackingFetcher)v2;
}

uint64_t GetMenstruationPredictionIntentHandler.handle(intent:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v2[16] = v1;
  v2[15] = a1;
  v2[12] = v2;
  v2[13] = 0;
  v2[14] = 0;
  v2[13] = a1;
  v2[14] = v1;
  return swift_task_switch();
}

{
  uint64_t *v1;
  uint64_t v3;

  v3 = *v1;
  *(_QWORD *)(v3 + 96) = *v1;
  *(_QWORD *)(v3 + 152) = a1;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t GetMenstruationPredictionIntentHandler.handle(intent:)()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);
  uint64_t v7;

  v1 = v0[16];
  v0[12] = v0;
  outlined init with copy of QuantityPersisting(v1 + OBJC_IVAR____TtC19SiriWellnessIntents38GetMenstruationPredictionIntentHandler_store, (uint64_t)(v0 + 2));
  v7 = v0[5];
  v5 = v0[6];
  __swift_project_boxed_opaque_existential_1(v0 + 2, v7);
  v6 = (uint64_t (*)(uint64_t, uint64_t))(*(_QWORD *)(v5 + 8) + **(int **)(v5 + 8));
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 136) = v2;
  *v2 = *(_QWORD *)(v4 + 96);
  v2[1] = GetMenstruationPredictionIntentHandler.handle(intent:);
  return v6(v7, v5);
}

{
  uint64_t v0;
  _QWORD *v1;
  char *v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(id, uint64_t, uint64_t);
  id v8;
  _QWORD *v9;
  char v10;

  v10 = *(_BYTE *)(v0 + 160);
  *(_QWORD *)(v0 + 96) = v0;
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  if ((v10 & 1) != 0)
  {
    v4 = (id)v9[15];
    outlined init with copy of QuantityPersisting(v9[16] + OBJC_IVAR____TtC19SiriWellnessIntents38GetMenstruationPredictionIntentHandler_store, (uint64_t)(v9 + 7));
    v5 = v9[10];
    v6 = v9[11];
    __swift_project_boxed_opaque_existential_1(v9 + 7, v5);
    v8 = objc_msgSend(v4, sel_projectionFocus);
    v7 = (uint64_t (*)(id, uint64_t, uint64_t))(*(_QWORD *)(v6 + 16) + **(int **)(v6 + 16));
    v1 = (_QWORD *)swift_task_alloc();
    v9[18] = v1;
    *v1 = v9[12];
    v1[1] = GetMenstruationPredictionIntentHandler.handle(intent:);
    return v7(v8, v5, v6);
  }
  else
  {
    type metadata accessor for GetMenstruationPredictionIntentResponse();
    v3 = GetMenstruationPredictionIntentResponse.__allocating_init(code:userActivity:)(101, 0);
    return (*(uint64_t (**)(char *))(v9[12] + 8))(v3);
  }
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 96) = v0;
  __swift_destroy_boxed_opaque_existential_1(v0 + 56);
  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)(v0 + 96) + 8))(*(_QWORD *)(v0 + 152));
}

uint64_t GetMenstruationPredictionIntentHandler.handle(intent:)(char a1)
{
  uint64_t *v1;
  uint64_t v3;

  v3 = *v1;
  *(_QWORD *)(v3 + 96) = *v1;
  *(_BYTE *)(v3 + 160) = a1;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t @objc closure #1 in GetMenstruationPredictionIntentHandler.handle(intent:)(void *a1, const void *a2, void *a3)
{
  _QWORD *v3;
  id v5;
  id v6;
  _QWORD *v7;
  uint64_t v10;

  v3[4] = a3;
  v3[3] = a1;
  v3[2] = v3;
  v5 = a1;
  v3[5] = _Block_copy(a2);
  v6 = a3;
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v10 + 48) = v7;
  *v7 = *(_QWORD *)(v10 + 16);
  v7[1] = @objc closure #1 in LogQuantityIntentHandler.handle(intent:);
  return GetMenstruationPredictionIntentHandler.handle(intent:)((uint64_t)a1);
}

uint64_t sub_2474ED844()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 24));
  return swift_deallocObject();
}

uint64_t partial apply for @objc closure #1 in GetMenstruationPredictionIntentHandler.handle(intent:)()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  const void *v4;
  void *v5;
  void *v6;

  *(_QWORD *)(v1 + 16) = v1;
  v6 = (void *)v0[2];
  v4 = (const void *)v0[3];
  v5 = (void *)v0[4];
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 24) = v2;
  *v2 = *(_QWORD *)(v1 + 16);
  v2[1] = _sIeghH_IeAgH_TRTQ0_;
  return ((uint64_t (*)(void *, const void *, void *))((char *)&async function pointer to @objc closure #1 in GetMenstruationPredictionIntentHandler.handle(intent:)
                                                               + async function pointer to @objc closure #1 in GetMenstruationPredictionIntentHandler.handle(intent:)))(v6, v4, v5);
}

id GetMenstruationPredictionIntentHandler.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

uint64_t GetMenstruationPredictionIntentHandler.init()()
{
  uint64_t result;
  uint64_t v1;

  if (!"SiriWellnessIntents.GetMenstruationPredictionIntentHandler")
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  result = closure #1 in _unimplementedInitializer(className:initName:file:line:column:)((uint64_t)"SiriWellnessIntents.GetMenstruationPredictionIntentHandler", 58, (unint64_t)"init()", 6, 2, (unint64_t)"SiriWellnessIntents/GetMenstruationPredictionIntentHandler.swift", 64, 2, v1, 0xFuLL, 0x14uLL);
  __break(1u);
  return result;
}

id GetMenstruationPredictionIntentHandler.__deallocating_deinit()
{
  void *v0;
  objc_super v2;
  void *v3;

  v3 = v0;
  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t CycleTrackingFetcher.isReadingAuthorized()(void *a1)
{
  _QWORD *v1;
  id v2;
  _QWORD *v3;
  uint64_t v5;

  v1[4] = a1;
  v1[2] = v1;
  v1[3] = 0;
  v1[3] = a1;
  v2 = a1;
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v5 + 40) = v3;
  *v3 = *(_QWORD *)(v5 + 16);
  v3[1] = CycleTrackingFetcher.isReadingAuthorized();
  return isSiriAuthorizedToAccessHealthData(store:)((uint64_t)a1);
}

uint64_t CycleTrackingFetcher.isReadingAuthorized()(unsigned int a1)
{
  uint64_t *v1;
  void *v3;
  uint64_t v4;

  v4 = *v1;
  v3 = *(void **)(*v1 + 32);
  *(_QWORD *)(*v1 + 16) = *v1;
  swift_task_dealloc();

  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)(v4 + 16) + 8))(a1);
}

uint64_t CycleTrackingFetcher.query(projectionFocus:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;

  v2[7] = a2;
  v2[6] = a1;
  v2[2] = v2;
  v2[3] = 0;
  v2[4] = 0;
  v2[3] = a1;
  v2[4] = a2;
  return swift_task_switch();
}

uint64_t CycleTrackingFetcher.query(projectionFocus:)()
{
  _QWORD *v0;
  id v1;
  _QWORD *v2;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = (id)v0[7];
  v5 = v0[6];
  v0[2] = v0;
  v0[8] = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("query(projectionFocus:)", 0x17uLL, 1)._object;
  v1 = v4;
  v7 = swift_task_alloc();
  v0[9] = v7;
  *(_QWORD *)(v7 + 16) = v4;
  *(_QWORD *)(v7 + 24) = v5;
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v6 + 80) = v2;
  type metadata accessor for GetMenstruationPredictionIntentResponse();
  *v2 = *(_QWORD *)(v6 + 16);
  v2[1] = CycleTrackingFetcher.query(projectionFocus:);
  return withCheckedContinuation<A>(isolation:function:_:)();
}

{
  uint64_t v0;
  void *v2;

  v2 = *(void **)(*(_QWORD *)v0 + 56);
  *(_QWORD *)(*(_QWORD *)v0 + 16) = *(_QWORD *)v0;
  swift_task_dealloc();
  swift_task_dealloc();

  swift_bridgeObjectRelease();
  return swift_task_switch();
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 16) = v0;
  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)(v0 + 16) + 8))(*(_QWORD *)(v0 + 40));
}

uint64_t closure #1 in CycleTrackingFetcher.query(projectionFocus:)(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[2];
  uint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;

  v7[0] = a1;
  v12 = a2;
  v13 = a3;
  v17 = 0;
  v16 = 0;
  v15 = 0;
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<GetMenstruationPredictionIntentResponse, Never>);
  v8 = *(_QWORD *)(v11 - 8);
  v7[1] = *(_QWORD *)(v8 + 64);
  MEMORY[0x24BDAC7A8](v11);
  v10 = (char *)v7 - v3;
  v17 = v4;
  v16 = v12;
  v15 = v13;
  (*(void (**)(char *, uint64_t))(v5 + 16))((char *)v7 - v3, v4);
  v9 = (*(unsigned __int8 *)(v8 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  v14 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v8 + 32))(v14 + v9, v10, v11);
  CycleTrackingFetcher.queryCycleTrackingData(projectionFocus:completion:)(v13, (uint64_t)partial apply for closure #1 in closure #1 in CycleTrackingFetcher.query(projectionFocus:), v14, v12);
  return swift_release();
}

uint64_t closure #1 in closure #1 in CycleTrackingFetcher.query(projectionFocus:)(void *a1)
{
  id v1;

  v1 = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<GetMenstruationPredictionIntentResponse, Never>);
  return CheckedContinuation.resume(returning:)();
}

uint64_t CycleTrackingFetcher.queryCycleTrackingData(projectionFocus:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  id v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  id v16;
  id v17;
  char *v18;
  id v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint8_t *v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t *v32;
  uint64_t *v33;
  _BYTE **v34;
  uint64_t *v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void (*v43)(uint64_t, void *, void *);
  _QWORD *v44;
  char *v45;
  id v46;
  id v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t *v55;
  uint32_t v56;
  uint64_t v57;
  int v58;
  NSObject *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _BYTE *v64;
  uint64_t v65;
  uint32_t v66;
  char v67;
  id v68;
  void (*v69)(uint64_t, void *, void *);
  _QWORD *v70;
  void *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;

  v42 = a1;
  v40 = a2;
  v41 = a3;
  v47 = a4;
  v74 = 0;
  v72 = 0;
  v73 = 0;
  v71 = 0;
  v69 = 0;
  v70 = 0;
  v68 = 0;
  v48 = 0;
  v38 = 0;
  v57 = 0;
  v51 = type metadata accessor for Logger();
  v49 = *(_QWORD *)(v51 - 8);
  v39 = (*(_QWORD *)(v49 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4 = (void *)MEMORY[0x24BDAC7A8](v47);
  v45 = (char *)&v25 - v39;
  v74 = v5;
  v72 = v6;
  v73 = v7;
  v71 = v4;
  v8 = v4;
  v9 = v47;
  swift_retain();
  v10 = v47;
  v11 = swift_allocObject();
  v12 = v40;
  v13 = v41;
  v14 = v42;
  v15 = (_QWORD *)v11;
  v16 = v47;
  v44 = v15;
  v15[2] = v47;
  v15[3] = v12;
  v15[4] = v13;
  v15[5] = v16;
  v15[6] = v14;
  v43 = partial apply for closure #1 in CycleTrackingFetcher.queryCycleTrackingData(projectionFocus:completion:);
  v69 = partial apply for closure #1 in CycleTrackingFetcher.queryCycleTrackingData(projectionFocus:completion:);
  v70 = v15;

  type metadata accessor for HKMCAnalysisQuery();
  swift_retain();
  v17 = HKMCAnalysisQuery.__allocating_init(updateHandler:)((uint64_t)v43, (uint64_t)v44);
  v18 = v45;
  v46 = v17;
  v68 = v17;
  v19 = v47;
  objc_msgSend(v47, sel_executeQuery_, v46);

  v50 = Logger.wellnessIntents.unsafeMutableAddressor();
  v52 = &v67;
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v49 + 16))(v18, v50, v51);
  swift_endAccess();
  v59 = Logger.logObject.getter();
  v58 = static os_log_type_t.debug.getter();
  v55 = &v65;
  v65 = 2;
  v53 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  v54 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  v56 = v66;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
  v60 = _allocateUninitializedArray<A>(_:)();
  if (os_log_type_enabled(v59, (os_log_type_t)v58))
  {
    v20 = v38;
    v28 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    v27 = 0;
    v29 = createStorage<A>(capacity:type:)(0);
    v30 = createStorage<A>(capacity:type:)(v27);
    v34 = &v64;
    v64 = v28;
    v35 = &v63;
    v63 = v29;
    v32 = &v62;
    v62 = v30;
    v31 = 0;
    serialize(_:at:)(0, &v64);
    serialize(_:at:)(v31, v34);
    v61 = v60;
    v33 = &v25;
    MEMORY[0x24BDAC7A8](&v25);
    v21 = v35;
    v22 = &v25 - 6;
    v36 = &v25 - 6;
    v22[2] = (uint64_t)v34;
    v22[3] = (uint64_t)v21;
    v22[4] = v23;
    v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
    lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
    Sequence.forEach(_:)();
    if (v20)
    {
      __break(1u);
    }
    else
    {
      _os_log_impl(&dword_24749F000, v59, (os_log_type_t)v58, "Querying menstrual cycles", v28, v56);
      v25 = 0;
      destroyStorage<A>(_:count:)(v29, 0, v26);
      destroyStorage<A>(_:count:)(v30, v25, MEMORY[0x24BEE4AD8] + 8);
      MEMORY[0x24957D398](v28, MEMORY[0x24BEE4260]);
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    swift_bridgeObjectRelease();
  }

  (*(void (**)(char *, uint64_t))(v49 + 8))(v45, v51);
  return swift_release();
}

void closure #1 in CycleTrackingFetcher.queryCycleTrackingData(projectionFocus:completion:)(uint64_t a1, void *a2, void *a3, uint64_t a4, void (*a5)(void), uint64_t a6, uint64_t a7, _BYTE *a8)
{
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  id v19;
  char *v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  id v34;
  char *v35;
  uint64_t v36;
  uint64_t *v37;
  void **v38;
  void *v39;
  char *v40;
  uint64_t v41;
  uint64_t *v42;
  void **v43;
  void *v44;
  void *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint8_t *v50;
  uint64_t v51;
  uint64_t v52;
  unsigned int v53;
  uint64_t *v54;
  void **v55;
  _BYTE **v56;
  uint64_t *v57;
  void **v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t *v64;
  uint32_t v65;
  int v66;
  NSObject *v67;
  uint64_t v68;
  void *v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint8_t *v74;
  uint64_t v75;
  uint64_t v76;
  unsigned int v77;
  uint64_t *v78;
  void **v79;
  _BYTE **v80;
  uint64_t *v81;
  void **v82;
  uint64_t v83;
  char *v84;
  id v85;
  uint64_t v86;
  char *v87;
  unint64_t v88;
  unint64_t v89;
  uint64_t *v90;
  uint32_t v91;
  int v92;
  NSObject *v93;
  uint64_t v94;
  void *v95;
  _BOOL4 v96;
  id v97;
  unsigned int v98;
  int v99;
  void *v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  uint8_t *v104;
  uint64_t v105;
  uint64_t v106;
  _BYTE **v107;
  uint64_t *v108;
  uint64_t *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t *v112;
  id v113;
  unint64_t v114;
  unint64_t v115;
  uint64_t *v116;
  uint32_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  _QWORD *v127;
  uint64_t v128;
  NSObject *v129;
  int v130;
  void *v131;
  id v132;
  uint64_t v133;
  void (*v134)(void);
  uint64_t v135;
  uint64_t v136;
  _BYTE *v137;
  uint64_t v138;
  void *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  unint64_t v143;
  char *v144;
  unint64_t v145;
  uint64_t v146;
  char *v147;
  unint64_t v148;
  char *v149;
  id v150;
  uint64_t (*v151)(uint64_t, uint64_t, uint64_t);
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  _BYTE *v155;
  uint64_t v156;
  uint32_t v157;
  uint64_t v158;
  id v159;
  char v160;
  char *v161;
  void *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  _BYTE *v166;
  uint64_t v167;
  uint32_t v168;
  char v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  _BYTE *v173;
  char *v174;
  uint64_t v175;
  uint32_t v176;
  char v177;
  char v178;
  char v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  void *v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;

  v138 = a1;
  v139 = a2;
  v150 = a3;
  v140 = a4;
  v134 = a5;
  v135 = a6;
  v136 = a7;
  v137 = a8;
  v187 = 0;
  v186 = 0;
  v185 = 0;
  v184 = 0;
  v182 = 0;
  v183 = 0;
  v181 = 0;
  v180 = 0;
  v174 = 0;
  v133 = 0;
  v162 = 0;
  v161 = 0;
  v159 = 0;
  v141 = type metadata accessor for Logger();
  v142 = *(_QWORD *)(v141 - 8);
  v146 = *(_QWORD *)(v142 + 64);
  v143 = (v146 + 15) & 0xFFFFFFFFFFFFFFF0;
  v8 = MEMORY[0x24BDAC7A8](v140);
  v144 = (char *)&v45 - v143;
  v145 = v143;
  v9 = MEMORY[0x24BDAC7A8](v8);
  v147 = (char *)&v45 - v145;
  v148 = (v146 + 15) & 0xFFFFFFFFFFFFFFF0;
  v10 = (void *)MEMORY[0x24BDAC7A8](v9);
  v149 = (char *)&v45 - v148;
  v187 = v11;
  v186 = v12;
  v185 = v13;
  v184 = v10;
  v182 = v14;
  v183 = v15;
  v181 = v16;
  v180 = v17;
  objc_msgSend(v10, sel_stopQuery_);
  v18 = v150;
  if (v150)
  {
    v132 = v150;
    v20 = v149;
    v113 = v150;
    v159 = v150;
    v111 = Logger.wellnessIntents.unsafeMutableAddressor();
    v112 = &v158;
    v119 = 32;
    swift_beginAccess();
    (*(void (**)(char *, uint64_t, uint64_t))(v142 + 16))(v20, v111, v141);
    swift_endAccess();
    v21 = v113;
    v120 = 7;
    v121 = swift_allocObject();
    *(_QWORD *)(v121 + 16) = v113;
    v129 = Logger.logObject.getter();
    v130 = static os_log_type_t.error.getter();
    v116 = &v156;
    v156 = 12;
    v114 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    v115 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    lazy protocol witness table accessor for type Int and conformance Int();
    UnsignedInteger<>.init<A>(_:)();
    v117 = v157;
    v118 = 17;
    v123 = swift_allocObject();
    *(_BYTE *)(v123 + 16) = 64;
    v124 = swift_allocObject();
    *(_BYTE *)(v124 + 16) = 8;
    v22 = swift_allocObject();
    v23 = v121;
    v122 = v22;
    *(_QWORD *)(v22 + 16) = partial apply for implicit closure #1 in closure #1 in closure #1 in HKHealthStore.query(correlationType:firstQuantityType:secondQuantityType:start:end:);
    *(_QWORD *)(v22 + 24) = v23;
    v24 = swift_allocObject();
    v25 = v122;
    v126 = v24;
    *(_QWORD *)(v24 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:);
    *(_QWORD *)(v24 + 24) = v25;
    v128 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
    v125 = _allocateUninitializedArray<A>(_:)();
    v127 = v26;
    swift_retain();
    v27 = v123;
    v28 = v127;
    *v127 = partial apply for closure #1 in OSLogArguments.append(_:);
    v28[1] = v27;
    swift_retain();
    v29 = v124;
    v30 = v127;
    v127[2] = partial apply for closure #1 in OSLogArguments.append(_:);
    v30[3] = v29;
    swift_retain();
    v31 = v126;
    v32 = v127;
    v127[4] = partial apply for closure #1 in OSLogArguments.append(_:);
    v32[5] = v31;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(v129, (os_log_type_t)v130))
    {
      v33 = v133;
      v104 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      v103 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      v105 = createStorage<A>(capacity:type:)(1);
      v106 = createStorage<A>(capacity:type:)(0);
      v107 = &v155;
      v155 = v104;
      v108 = &v154;
      v154 = v105;
      v109 = &v153;
      v153 = v106;
      serialize(_:at:)(2, &v155);
      serialize(_:at:)(1, v107);
      v151 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v152 = v123;
      closure #1 in osLogInternal(_:log:type:)(&v151, (uint64_t)v107, (uint64_t)v108, (uint64_t)v109);
      v110 = v33;
      if (v33)
      {
        __break(1u);
      }
      else
      {
        v151 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
        v152 = v124;
        closure #1 in osLogInternal(_:log:type:)(&v151, (uint64_t)&v155, (uint64_t)&v154, (uint64_t)&v153);
        v102 = 0;
        v151 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
        v152 = v126;
        closure #1 in osLogInternal(_:log:type:)(&v151, (uint64_t)&v155, (uint64_t)&v154, (uint64_t)&v153);
        _os_log_impl(&dword_24749F000, v129, (os_log_type_t)v130, "Failed to query menstrual cycle analysis: %@", v104, v117);
        destroyStorage<A>(_:count:)(v105, 1, v103);
        destroyStorage<A>(_:count:)(v106, 0, MEMORY[0x24BEE4AD8] + 8);
        MEMORY[0x24957D398](v104, MEMORY[0x24BEE4260]);
        swift_release();
        swift_release();
        swift_release();
      }
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
    }

    (*(void (**)(char *, uint64_t))(v142 + 8))(v149, v141);
    swift_retain();
    v100 = 0;
    type metadata accessor for GetMenstruationPredictionIntentResponse();
    v101 = GetMenstruationPredictionIntentResponse.__allocating_init(code:userActivity:)(5, v100);
    v134();

    swift_release();
    return;
  }
  v19 = v139;
  if (v139)
  {
    v131 = v139;
    v97 = v139;
    v98 = objc_msgSend(v139, sel_menstruationProjectionsEnabled);

    v99 = v98 & 1;
  }
  else
  {
    v99 = 2;
  }
  v178 = v99;
  v179 = 1;
  if (v99 != 2)
  {
    outlined init with copy of Bool?(&v178, &v160);
    if (v179 != 2)
    {
      v96 = (v160 & 1) == (v179 & 1);
      goto LABEL_21;
    }
    goto LABEL_23;
  }
  if (v179 != 2)
  {
LABEL_23:
    v96 = 0;
    goto LABEL_21;
  }
  v96 = 1;
LABEL_21:
  if (v96)
  {
    v34 = v139;
    if (v139)
    {
      v95 = v139;
      v85 = v139;
      v162 = v139;
      v84 = CycleTrackingFetcher.buildIntentResponse(hkAnalysis:projectionFocus:)(v139, v137, v136);
      v161 = v84;
      swift_retain();
      ((void (*)(char *))v134)(v84);
      swift_release();

    }
    else
    {
      v35 = v147;
      v86 = Logger.wellnessIntents.unsafeMutableAddressor();
      v87 = &v169;
      swift_beginAccess();
      (*(void (**)(char *, uint64_t, uint64_t))(v142 + 16))(v35, v86, v141);
      swift_endAccess();
      v93 = Logger.logObject.getter();
      v92 = static os_log_type_t.debug.getter();
      v90 = &v167;
      v167 = 2;
      v88 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
      v89 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
      lazy protocol witness table accessor for type Int and conformance Int();
      UnsignedInteger<>.init<A>(_:)();
      v91 = v168;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
      v94 = _allocateUninitializedArray<A>(_:)();
      if (os_log_type_enabled(v93, (os_log_type_t)v92))
      {
        v36 = v133;
        v74 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
        v72 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
        v73 = 0;
        v75 = createStorage<A>(capacity:type:)(0);
        v76 = createStorage<A>(capacity:type:)(v73);
        v80 = &v166;
        v166 = v74;
        v81 = &v165;
        v165 = v75;
        v78 = &v164;
        v164 = v76;
        v77 = 0;
        serialize(_:at:)(0, &v166);
        serialize(_:at:)(v77, v80);
        v163 = v94;
        v79 = &v45;
        MEMORY[0x24BDAC7A8](&v45);
        v37 = v81;
        v38 = &v45 - 6;
        v82 = &v45 - 6;
        v38[2] = v80;
        v38[3] = v37;
        v38[4] = v39;
        v83 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
        lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
        Sequence.forEach(_:)();
        if (v36)
        {
          __break(1u);
        }
        else
        {
          _os_log_impl(&dword_24749F000, v93, (os_log_type_t)v92, "No menstrual cycle analysis found", v74, v91);
          v71 = 0;
          destroyStorage<A>(_:count:)(v75, 0, v72);
          destroyStorage<A>(_:count:)(v76, v71, MEMORY[0x24BEE4AD8] + 8);
          MEMORY[0x24957D398](v74, MEMORY[0x24BEE4260]);
          swift_bridgeObjectRelease();
        }
      }
      else
      {
        swift_bridgeObjectRelease();
      }

      (*(void (**)(char *, uint64_t))(v142 + 8))(v147, v141);
      swift_retain();
      v69 = 0;
      type metadata accessor for GetMenstruationPredictionIntentResponse();
      v70 = GetMenstruationPredictionIntentResponse.__allocating_init(code:userActivity:)(102, v69);
      v134();

      swift_release();
    }
  }
  else
  {
    v40 = v144;
    v60 = Logger.wellnessIntents.unsafeMutableAddressor();
    v61 = &v177;
    swift_beginAccess();
    (*(void (**)(char *, uint64_t, uint64_t))(v142 + 16))(v40, v60, v141);
    swift_endAccess();
    v67 = Logger.logObject.getter();
    v66 = static os_log_type_t.error.getter();
    v64 = &v175;
    v175 = 2;
    v62 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    v63 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    lazy protocol witness table accessor for type Int and conformance Int();
    UnsignedInteger<>.init<A>(_:)();
    v65 = v176;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
    v68 = _allocateUninitializedArray<A>(_:)();
    if (os_log_type_enabled(v67, (os_log_type_t)v66))
    {
      v41 = v133;
      v50 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      v48 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      v49 = 0;
      v51 = createStorage<A>(capacity:type:)(0);
      v52 = createStorage<A>(capacity:type:)(v49);
      v56 = &v173;
      v173 = v50;
      v57 = &v172;
      v172 = v51;
      v54 = &v171;
      v171 = v52;
      v53 = 0;
      serialize(_:at:)(0, &v173);
      serialize(_:at:)(v53, v56);
      v170 = v68;
      v55 = &v45;
      MEMORY[0x24BDAC7A8](&v45);
      v42 = v57;
      v43 = &v45 - 6;
      v58 = &v45 - 6;
      v43[2] = v56;
      v43[3] = v42;
      v43[4] = v44;
      v59 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
      lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
      Sequence.forEach(_:)();
      if (v41)
      {
        __break(1u);
      }
      else
      {
        _os_log_impl(&dword_24749F000, v67, (os_log_type_t)v66, "Predictions are not enabled", v50, v65);
        v47 = 0;
        destroyStorage<A>(_:count:)(v51, 0, v48);
        destroyStorage<A>(_:count:)(v52, v47, MEMORY[0x24BEE4AD8] + 8);
        MEMORY[0x24957D398](v50, MEMORY[0x24BEE4260]);
        swift_bridgeObjectRelease();
      }
    }
    else
    {
      swift_bridgeObjectRelease();
    }

    (*(void (**)(char *, uint64_t))(v142 + 8))(v144, v141);
    v45 = 0;
    type metadata accessor for GetMenstruationPredictionIntentResponse();
    v46 = GetMenstruationPredictionIntentResponse.__allocating_init(code:userActivity:)(103, v45);
    v174 = v46;
    swift_retain();
    ((void (*)(char *))v134)(v46);
    swift_release();

  }
}

char *CycleTrackingFetcher.buildIntentResponse(hkAnalysis:projectionFocus:)(void *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  char *result;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  _QWORD *v79;
  uint64_t v80;
  _QWORD *v81;
  uint64_t v82;
  _QWORD *v83;
  uint64_t v84;
  _QWORD *v85;
  uint64_t v86;
  uint64_t v87;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  _QWORD *v100;
  uint64_t v101;
  _QWORD *v102;
  uint64_t v103;
  _QWORD *v104;
  uint64_t v105;
  _QWORD *v106;
  uint64_t v107;
  _QWORD *v108;
  uint64_t v109;
  _QWORD *v110;
  uint64_t v111;
  _QWORD *v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  uint64_t v116;
  uint64_t *v117;
  uint64_t *v118;
  uint64_t v119;
  void (*v120)(char *, uint64_t, uint64_t, uint64_t);
  char *v121;
  uint64_t v122;
  uint64_t *v123;
  uint64_t *v124;
  uint64_t v125;
  uint64_t v126;
  char *v128;
  uint64_t v129;
  uint64_t *v130;
  uint64_t *v131;
  uint64_t v132;
  uint64_t v133;
  void *v134;
  char *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint8_t *v139;
  uint64_t v140;
  uint64_t v141;
  unsigned int v142;
  uint64_t *v143;
  uint64_t *v144;
  _BYTE **v145;
  uint64_t *v146;
  uint64_t *v147;
  uint64_t v148;
  uint64_t v149;
  char *v150;
  uint32_t v151;
  int v152;
  NSObject *v153;
  uint64_t v154;
  Class v156;
  void (*v157)(char *, uint64_t);
  Class v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  id v165;
  id v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  int v171;
  id v172;
  uint64_t v173;
  _QWORD *v174;
  uint64_t v175;
  id v176;
  uint64_t v177;
  uint64_t v178;
  id v179;
  uint64_t v180;
  uint64_t v181;
  id v182;
  id v183;
  void (*v184)(char *, uint64_t);
  Class v185;
  void (*v186)(char *, uint64_t);
  Class v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint8_t *v191;
  uint64_t v192;
  uint64_t v193;
  unsigned int v194;
  uint64_t *v195;
  uint64_t *v196;
  _BYTE **v197;
  uint64_t *v198;
  uint64_t *v199;
  uint64_t v200;
  uint64_t v201;
  _QWORD *v202;
  uint32_t v203;
  int v204;
  NSObject *v205;
  uint64_t v206;
  Class v207;
  Class v208;
  Class v209;
  void (*v210)(char *, uint64_t);
  Class v211;
  unsigned int v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint8_t *v216;
  uint64_t v217;
  uint64_t v218;
  unsigned int v219;
  uint64_t *v220;
  uint64_t *v221;
  _BYTE **v222;
  uint64_t *v223;
  uint64_t *v224;
  uint64_t v225;
  uint64_t v226;
  _QWORD *v227;
  uint32_t v228;
  int v229;
  NSObject *v230;
  uint64_t v231;
  int v232;
  int v233;
  int v234;
  uint64_t *v235;
  _QWORD *v236;
  unint64_t v237;
  uint64_t v238;
  _BOOL4 v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint8_t *v247;
  uint64_t v248;
  uint64_t v249;
  unsigned int v250;
  _BYTE **v251;
  uint64_t *v252;
  uint64_t *v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t *v256;
  uint32_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  int v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  _QWORD *v273;
  NSObject *v274;
  int v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint8_t *v287;
  uint64_t v288;
  uint64_t v289;
  _BYTE **v290;
  uint64_t *v291;
  uint64_t *v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t *v295;
  uint64_t v296;
  uint64_t v297;
  uint32_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  int v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  _QWORD *v314;
  NSObject *v315;
  int v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  void (*v320)(char *, uint64_t, uint64_t);
  void *v321;
  id v322;
  char *v323;
  unsigned int (*v324)(uint64_t, uint64_t, uint64_t);
  void *v325;
  void *v326;
  void (*v327)(char *, uint64_t);
  void (*v328)(char *, uint64_t);
  Class isa;
  id v330;
  uint64_t v331;
  uint64_t *v332;
  uint64_t *v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint8_t *v343;
  uint64_t v344;
  uint64_t v345;
  unsigned int v346;
  _BYTE **v347;
  uint64_t *v348;
  uint64_t *v349;
  uint64_t v350;
  uint64_t v351;
  unint64_t v352;
  char *v353;
  uint64_t v354;
  uint64_t v355;
  unint64_t v356;
  char *v357;
  unint64_t v358;
  uint64_t v359;
  unint64_t v360;
  uint64_t v361;
  unint64_t v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  unint64_t v366;
  char *v367;
  unint64_t v368;
  char *v369;
  unint64_t v370;
  char *v371;
  uint64_t v372;
  uint64_t v373;
  unint64_t v374;
  char *v375;
  uint64_t v376;
  uint64_t v377;
  unint64_t v378;
  char *v379;
  unint64_t v380;
  char *v381;
  uint64_t v382;
  _BYTE *v383;
  unint64_t v384;
  char *v385;
  unint64_t v386;
  char *v387;
  unint64_t v388;
  char *v389;
  unint64_t v390;
  char *v391;
  unint64_t v392;
  char *v393;
  unint64_t v394;
  char *v395;
  uint64_t v396;
  unint64_t v397;
  uint64_t v398;
  id v399;
  uint64_t v400;
  _QWORD *v401;
  uint64_t v402;
  uint64_t v403;
  void (*v404)(char *, uint64_t, uint64_t);
  char *v405;
  uint64_t v406;
  uint64_t v407;
  id v408;
  uint64_t v409;
  unint64_t v410;
  unint64_t v411;
  uint64_t *v412;
  unint64_t v413;
  uint32_t v414;
  uint64_t v415;
  uint64_t v416;
  uint64_t v417;
  int v418;
  uint64_t v419;
  uint64_t v420;
  uint64_t v421;
  uint64_t v422;
  uint64_t v423;
  uint64_t v424;
  uint64_t v425;
  uint64_t v426;
  uint64_t v427;
  uint64_t v428;
  uint64_t v429;
  _QWORD *v430;
  uint64_t v431;
  NSObject *v432;
  int v433;
  uint64_t (*v434)(uint64_t, uint64_t, uint64_t);
  uint64_t v435;
  uint64_t v436;
  uint64_t v437;
  _BYTE *v438;
  uint64_t (*v439)(uint64_t, uint64_t, uint64_t);
  uint64_t v440;
  uint64_t v441;
  uint64_t v442;
  _BYTE *v443;
  uint64_t (*v444)(uint64_t, uint64_t, uint64_t);
  uint64_t v445;
  uint64_t v446;
  uint64_t v447;
  _BYTE *v448[5];
  uint64_t v449;
  _QWORD v450[2];
  uint64_t v451;
  uint64_t v452;
  _BYTE *v453[2];
  uint32_t v454;
  _QWORD v455[4];
  uint64_t v456;
  uint64_t v457;
  _BYTE *v458[2];
  uint32_t v459;
  _QWORD v460[6];
  uint32_t v461;
  uint64_t v462;
  uint64_t v463;
  uint64_t v464;
  uint64_t v465;
  uint64_t v466;
  uint32_t v467;
  uint64_t v468;
  uint64_t v469;
  id v470;
  uint64_t v471;
  id v472;
  uint64_t v473;
  uint64_t v474;
  id v475;
  uint64_t v476;
  id v477;
  uint64_t v478;
  id v479;
  uint64_t v480;
  id v481;
  uint64_t v482;
  _QWORD v483[2];
  uint64_t v484;
  uint64_t v485;
  id v486;
  uint64_t v487;
  char *v488;
  void *v489;
  uint64_t v490;
  uint64_t v491;
  uint64_t v492;
  _BYTE *v493[2];
  uint32_t v494;
  char v495;
  uint64_t v496;
  void *v497;
  uint64_t v498;
  uint64_t v499;
  uint32_t v500;
  char v501;
  uint64_t v502;
  uint64_t v503;
  uint64_t v504;
  void *v505;
  char *v506;
  char *v507;
  char *v508;
  char *v509;
  uint64_t v510;
  id v511;
  uint64_t v512;
  uint64_t v513;
  id v514;
  uint64_t v515;
  uint64_t v516;
  uint64_t v517;
  uint64_t v518;

  v408 = a1;
  v383 = a2;
  v382 = a3;
  v509 = 0;
  v508 = 0;
  v507 = 0;
  v506 = 0;
  v505 = 0;
  v504 = 0;
  v503 = 0;
  v502 = 0;
  v498 = 0;
  v400 = 0;
  v351 = 0;
  v489 = 0;
  v488 = 0;
  v484 = 0;
  v485 = 0;
  v474 = 0;
  v469 = 0;
  v465 = 0;
  v463 = 0;
  v464 = 0;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  v352 = (*(_QWORD *)(*(_QWORD *)(v3 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v3);
  v353 = (char *)&v133 - v352;
  v396 = 0;
  v354 = type metadata accessor for Date();
  v355 = *(_QWORD *)(v354 - 8);
  v356 = (*(_QWORD *)(v355 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v354);
  v357 = (char *)&v133 - v356;
  v358 = (*(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateInterval?)
                                - 8)
                    + 64)
        + 15) & 0xFFFFFFFFFFFFFFF0;
  v4 = MEMORY[0x24BDAC7A8](v396);
  v359 = (uint64_t)&v133 - v358;
  v360 = (v5 + 15) & 0xFFFFFFFFFFFFFFF0;
  v6 = MEMORY[0x24BDAC7A8](v4);
  v361 = (uint64_t)&v133 - v360;
  v362 = (v7 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v6);
  v363 = (uint64_t)&v133 - v362;
  v364 = type metadata accessor for DateInterval();
  v365 = *(_QWORD *)(v364 - 8);
  v366 = (*(_QWORD *)(v365 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v8 = MEMORY[0x24BDAC7A8](v396);
  v367 = (char *)&v133 - v366;
  v509 = (char *)&v133 - v366;
  v368 = (v9 + 15) & 0xFFFFFFFFFFFFFFF0;
  v10 = MEMORY[0x24BDAC7A8](v8);
  v369 = (char *)&v133 - v368;
  v508 = (char *)&v133 - v368;
  v370 = (v11 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v10);
  v371 = (char *)&v133 - v370;
  v507 = (char *)&v133 - v370;
  v372 = type metadata accessor for Calendar.Identifier();
  v373 = *(_QWORD *)(v372 - 8);
  v374 = (*(_QWORD *)(v373 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v396);
  v375 = (char *)&v133 - v374;
  v376 = type metadata accessor for Calendar();
  v377 = *(_QWORD *)(v376 - 8);
  v378 = (*(_QWORD *)(v377 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v12 = MEMORY[0x24BDAC7A8](v396);
  v379 = (char *)&v133 - v378;
  v380 = (v13 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v12);
  v381 = (char *)&v133 - v380;
  v506 = (char *)&v133 - v380;
  v403 = type metadata accessor for Logger();
  v401 = *(_QWORD **)(v403 - 8);
  v384 = (v401[8] + 15) & 0xFFFFFFFFFFFFFFF0;
  v14 = MEMORY[0x24BDAC7A8](v408);
  v385 = (char *)&v133 - v384;
  v386 = (v15 + 15) & 0xFFFFFFFFFFFFFFF0;
  v16 = MEMORY[0x24BDAC7A8](v14);
  v387 = (char *)&v133 - v386;
  v388 = (v17 + 15) & 0xFFFFFFFFFFFFFFF0;
  v18 = MEMORY[0x24BDAC7A8](v16);
  v389 = (char *)&v133 - v388;
  v390 = (v19 + 15) & 0xFFFFFFFFFFFFFFF0;
  v20 = MEMORY[0x24BDAC7A8](v18);
  v391 = (char *)&v133 - v390;
  v392 = (v21 + 15) & 0xFFFFFFFFFFFFFFF0;
  v22 = MEMORY[0x24BDAC7A8](v20);
  v393 = (char *)&v133 - v392;
  v394 = (v23 + 15) & 0xFFFFFFFFFFFFFFF0;
  v24 = (void *)MEMORY[0x24BDAC7A8](v22);
  v25 = (char *)&v133 - v394;
  v395 = (char *)&v133 - v394;
  v505 = v24;
  v504 = v26;
  v503 = v27;
  v399 = objc_msgSend(v24, sel_menstruationProjections);
  v397 = type metadata accessor for HKMCProjection();
  v398 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  v406 = MEMORY[0x24957D110](v398, v397);
  v502 = v406;
  swift_bridgeObjectRelease();

  v402 = Logger.wellnessIntents.unsafeMutableAddressor();
  v405 = &v501;
  v419 = 32;
  swift_beginAccess();
  v404 = (void (*)(char *, uint64_t, uint64_t))v401[2];
  v404(v25, v402, v403);
  swift_endAccess();
  v407 = 24;
  v420 = 7;
  v28 = swift_allocObject();
  v29 = v408;
  v415 = v28;
  *(_QWORD *)(v28 + 16) = v406;
  v30 = v29;
  v409 = swift_allocObject();
  *(_QWORD *)(v409 + 16) = v408;
  swift_retain();
  v31 = swift_allocObject();
  v32 = v409;
  v421 = v31;
  *(_QWORD *)(v31 + 16) = partial apply for implicit closure #2 in CycleTrackingFetcher.buildIntentResponse(hkAnalysis:projectionFocus:);
  *(_QWORD *)(v31 + 24) = v32;
  swift_release();
  v432 = Logger.logObject.getter();
  v433 = static os_log_type_t.debug.getter();
  v412 = &v499;
  v499 = 22;
  v410 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  v411 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  v413 = lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  v414 = v500;
  v417 = 17;
  v423 = swift_allocObject();
  *(_BYTE *)(v423 + 16) = 0;
  v424 = swift_allocObject();
  v418 = 8;
  *(_BYTE *)(v424 + 16) = 8;
  v33 = swift_allocObject();
  v34 = v415;
  v416 = v33;
  *(_QWORD *)(v33 + 16) = partial apply for implicit closure #1 in CycleTrackingFetcher.buildIntentResponse(hkAnalysis:projectionFocus:);
  *(_QWORD *)(v33 + 24) = v34;
  v35 = swift_allocObject();
  v36 = v416;
  v425 = v35;
  *(_QWORD *)(v35 + 16) = partial apply for thunk for @escaping @callee_guaranteed () -> (@unowned Int);
  *(_QWORD *)(v35 + 24) = v36;
  v426 = swift_allocObject();
  *(_BYTE *)(v426 + 16) = 32;
  v427 = swift_allocObject();
  *(_BYTE *)(v427 + 16) = v418;
  v37 = swift_allocObject();
  v38 = v421;
  v422 = v37;
  *(_QWORD *)(v37 + 16) = _s2os18OSLogInterpolationV06appendC0_5align7privacyyxyXA_AA0B15StringAlignmentVAA0B7PrivacyVts06CustomG11ConvertibleRzlFSSycfu_TA_2;
  *(_QWORD *)(v37 + 24) = v38;
  v39 = swift_allocObject();
  v40 = v422;
  v429 = v39;
  *(_QWORD *)(v39 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:);
  *(_QWORD *)(v39 + 24) = v40;
  v431 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
  v428 = _allocateUninitializedArray<A>(_:)();
  v430 = v41;
  swift_retain();
  v42 = v423;
  v43 = v430;
  *v430 = partial apply for closure #1 in OSLogArguments.append(_:);
  v43[1] = v42;
  swift_retain();
  v44 = v424;
  v45 = v430;
  v430[2] = partial apply for closure #1 in OSLogArguments.append(_:);
  v45[3] = v44;
  swift_retain();
  v46 = v425;
  v47 = v430;
  v430[4] = partial apply for closure #1 in OSLogArguments.append<A>(_:);
  v47[5] = v46;
  swift_retain();
  v48 = v426;
  v49 = v430;
  v430[6] = partial apply for closure #1 in OSLogArguments.append(_:);
  v49[7] = v48;
  swift_retain();
  v50 = v427;
  v51 = v430;
  v430[8] = partial apply for closure #1 in OSLogArguments.append(_:);
  v51[9] = v50;
  swift_retain();
  v52 = v429;
  v53 = v430;
  v430[10] = partial apply for closure #1 in OSLogArguments.append(_:);
  v53[11] = v52;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(v432, (os_log_type_t)v433))
  {
    v54 = v351;
    v343 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    v342 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    v344 = createStorage<A>(capacity:type:)(0);
    v345 = createStorage<A>(capacity:type:)(1);
    v347 = &v438;
    v438 = v343;
    v348 = &v437;
    v437 = v344;
    v349 = &v436;
    v436 = v345;
    v346 = 2;
    serialize(_:at:)(2, &v438);
    serialize(_:at:)(v346, v347);
    v434 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v435 = v423;
    closure #1 in osLogInternal(_:log:type:)(&v434, (uint64_t)v347, (uint64_t)v348, (uint64_t)v349);
    v350 = v54;
    if (v54)
    {
      __break(1u);
    }
    else
    {
      v434 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v435 = v424;
      closure #1 in osLogInternal(_:log:type:)(&v434, (uint64_t)&v438, (uint64_t)&v437, (uint64_t)&v436);
      v340 = 0;
      v434 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append<A>(_:);
      v435 = v425;
      closure #1 in osLogInternal(_:log:type:)(&v434, (uint64_t)&v438, (uint64_t)&v437, (uint64_t)&v436);
      v339 = 0;
      v434 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v435 = v426;
      closure #1 in osLogInternal(_:log:type:)(&v434, (uint64_t)&v438, (uint64_t)&v437, (uint64_t)&v436);
      v338 = 0;
      v434 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v435 = v427;
      closure #1 in osLogInternal(_:log:type:)(&v434, (uint64_t)&v438, (uint64_t)&v437, (uint64_t)&v436);
      v337 = 0;
      v434 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v435 = v429;
      closure #1 in osLogInternal(_:log:type:)(&v434, (uint64_t)&v438, (uint64_t)&v437, (uint64_t)&v436);
      v336 = 0;
      _os_log_impl(&dword_24749F000, v432, (os_log_type_t)v433, "Found %ld projections in %s", v343, v414);
      destroyStorage<A>(_:count:)(v344, 0, v342);
      destroyStorage<A>(_:count:)(v345, 1, MEMORY[0x24BEE4AD8] + 8);
      MEMORY[0x24957D398](v343, MEMORY[0x24BEE4260]);
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      v341 = v336;
    }
  }
  else
  {
    v55 = v351;
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    v341 = v55;
  }
  v56 = v379;
  v57 = v341;

  v327 = (void (*)(char *, uint64_t))v401[1];
  v327(v395, v403);
  (*(void (**)(char *, _QWORD, uint64_t))(v373 + 104))(v375, *MEMORY[0x24BDCEF70], v372);
  Calendar.init(identifier:)();
  (*(void (**)(char *, uint64_t))(v373 + 8))(v375, v372);
  (*(void (**)(char *, char *, uint64_t))(v377 + 16))(v56, v381, v376);
  isa = Calendar._bridgeToObjectiveC()().super.isa;
  v328 = *(void (**)(char *, uint64_t))(v377 + 8);
  v328(v379, v376);
  v331 = HKMCTodayIndex();

  v498 = v331;
  v330 = objc_msgSend(v408, sel_menstruationProjections);
  v496 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  v332 = &v133;
  v58 = MEMORY[0x24BDAC7A8](v331);
  v333 = &v133 - 4;
  *(&v133 - 2) = v58;
  v334 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [HKMCProjection]);
  lazy protocol witness table accessor for type [HKMCProjection] and conformance [A]();
  result = (char *)Sequence.first(where:)();
  v335 = v57;
  if (v57)
  {
    __break(1u);
  }
  else
  {
    outlined destroy of [HKQuantityType]();

    v326 = v497;
    if (!v497)
    {
      v128 = v385;
      v149 = Logger.wellness.unsafeMutableAddressor();
      v150 = &v495;
      swift_beginAccess();
      v404(v128, v149, v403);
      swift_endAccess();
      v153 = Logger.logObject.getter();
      v152 = static os_log_type_t.error.getter();
      v493[1] = (_BYTE *)2;
      UnsignedInteger<>.init<A>(_:)();
      v151 = v494;
      v154 = _allocateUninitializedArray<A>(_:)();
      if (os_log_type_enabled(v153, (os_log_type_t)v152))
      {
        v129 = v335;
        v139 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
        v137 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
        v138 = 0;
        v140 = createStorage<A>(capacity:type:)(0);
        v141 = createStorage<A>(capacity:type:)(v138);
        v145 = v493;
        v493[0] = v139;
        v146 = &v492;
        v492 = v140;
        v143 = &v491;
        v491 = v141;
        v142 = 0;
        serialize(_:at:)(0, v493);
        serialize(_:at:)(v142, v145);
        v490 = v154;
        v144 = &v133;
        MEMORY[0x24BDAC7A8](&v133);
        v130 = v146;
        v131 = &v133 - 6;
        v147 = &v133 - 6;
        v131[2] = (uint64_t)v145;
        v131[3] = (uint64_t)v130;
        v131[4] = v132;
        v148 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
        lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
        Sequence.forEach(_:)();
        if (v129)
        {
          __break(1u);
        }
        else
        {
          _os_log_impl(&dword_24749F000, v153, (os_log_type_t)v152, "Found no usable projections in the analysis", v139, v151);
          v136 = 0;
          destroyStorage<A>(_:count:)(v140, 0, v137);
          destroyStorage<A>(_:count:)(v141, v136, MEMORY[0x24BEE4AD8] + 8);
          MEMORY[0x24957D398](v139, MEMORY[0x24BEE4260]);
          swift_bridgeObjectRelease();
        }
      }
      else
      {
        swift_bridgeObjectRelease();
      }

      v327(v385, v403);
      v134 = 0;
      type metadata accessor for GetMenstruationPredictionIntentResponse();
      v135 = GetMenstruationPredictionIntentResponse.__allocating_init(code:userActivity:)(102, v134);
      v328(v381, v376);
      return v135;
    }
    v325 = v326;
    v322 = v326;
    v489 = v326;
    v321 = 0;
    type metadata accessor for GetMenstruationPredictionIntentResponse();
    v323 = GetMenstruationPredictionIntentResponse.__allocating_init(code:userActivity:)(4, v321);
    v488 = v323;
    v486 = objc_msgSend(v322, sel_mostLikelyDays);
    v487 = v60;
    Calendar.dateInterval(for:)((uint64_t)v486, v60, v363);
    v324 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v365 + 48);
    if (v324(v363, 1, v364) == 1)
    {
      outlined destroy of DateInterval?(v363);
LABEL_60:
      v183 = objc_msgSend(v408, sel_cycles);
      if (v183)
      {
        v182 = v183;
        v179 = v183;
        type metadata accessor for HKMCCycle();
        v180 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

        v181 = v180;
      }
      else
      {
        v181 = 0;
      }
      v178 = v181;
      if (!v181)
        goto LABEL_75;
      v177 = v178;
      v175 = v178;
      swift_bridgeObjectRetain();
      v174 = v483;
      v483[0] = v175;
      v173 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [HKMCCycle]);
      lazy protocol witness table accessor for type [HKMCCycle] and conformance [A]();
      Collection.first.getter();
      outlined destroy of [HKQuantityType]();
      v176 = (id)v483[1];
      swift_bridgeObjectRelease();
      if (v176)
      {
        v172 = v176;
        v165 = v176;
        v166 = objc_msgSend(v176, sel_menstruationSegment);

        v481 = objc_msgSend(v166, sel_days);
        v482 = v126;
        v167 = (uint64_t)v481;
        v168 = v126;

        v169 = v167;
        v170 = v168;
        v171 = 0;
      }
      else
      {
LABEL_75:
        v169 = 0;
        v170 = 0;
        v171 = 1;
      }
      v163 = v170;
      v164 = v169;
      if ((v171 & 1) == 0)
      {
        v161 = v164;
        v162 = v163;
        v160 = v163;
        v159 = v164;
        v484 = v164;
        v485 = v163;
        static Calendar.current.getter();
        Calendar.dateInterval(for:)(v159, v160, v359);
        v328(v379, v376);
        if (v324(v359, 1, v364) != 1)
        {
          (*(void (**)(char *, uint64_t, uint64_t))(v365 + 32))(v367, v359, v364);
          DateInterval.start.getter();
          v156 = Date._bridgeToObjectiveC()().super.isa;
          v157 = *(void (**)(char *, uint64_t))(v355 + 8);
          v157(v357, v354);
          objc_msgSend(v323, sel_setLastPeriodStart_, v156);

          DateInterval.end.getter();
          v158 = Date._bridgeToObjectiveC()().super.isa;
          v157(v357, v354);
          objc_msgSend(v323, sel_setLastPeriodEnd_, v158);

          (*(void (**)(char *, uint64_t))(v365 + 8))(v367, v364);
        }
        else
        {
          outlined destroy of DateInterval?(v359);
        }
      }

      v328(v381, v376);
      return v323;
    }
    v320 = *(void (**)(char *, uint64_t, uint64_t))(v365 + 32);
    v320(v371, v363, v364);
    v479 = objc_msgSend(v322, sel_allDays);
    v480 = v61;
    Calendar.dateInterval(for:)((uint64_t)v479, v61, v361);
    if (v324(v361, 1, v364) == 1)
    {
      outlined destroy of DateInterval?(v361);
      (*(void (**)(char *, uint64_t))(v365 + 8))(v371, v364);
      goto LABEL_60;
    }
    v320(v369, v361, v364);
    v477 = objc_msgSend(v322, sel_mostLikelyDays);
    v478 = v62;
    v475 = v477;
    v476 = v62;
    v514 = v477;
    v515 = v62;
    v513 = (uint64_t)v477 + v62 - 1;
    if (v513 < (uint64_t)v477)
      v319 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v319 = v513;
    v318 = v319;
    v474 = v319;
    v472 = objc_msgSend(v322, sel_allDays);
    v473 = v63;
    v470 = v472;
    v471 = v63;
    v511 = v472;
    v512 = v63;
    v510 = (uint64_t)v472 + v63 - 1;
    if (v510 < (uint64_t)v472)
      v317 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v317 = v510;
    v64 = v393;
    v297 = v317;
    v469 = v317;
    v294 = Logger.wellnessIntents.unsafeMutableAddressor();
    v295 = &v468;
    v303 = 32;
    swift_beginAccess();
    v404(v64, v294, v403);
    swift_endAccess();
    v296 = 24;
    v304 = 7;
    v299 = swift_allocObject();
    *(_QWORD *)(v299 + 16) = v318;
    v305 = swift_allocObject();
    *(_QWORD *)(v305 + 16) = v297;
    v315 = Logger.logObject.getter();
    v316 = static os_log_type_t.debug.getter();
    v466 = 22;
    UnsignedInteger<>.init<A>(_:)();
    v298 = v467;
    v301 = 17;
    v307 = swift_allocObject();
    *(_BYTE *)(v307 + 16) = 0;
    v308 = swift_allocObject();
    v302 = 8;
    *(_BYTE *)(v308 + 16) = 8;
    v65 = swift_allocObject();
    v66 = v299;
    v300 = v65;
    *(_QWORD *)(v65 + 16) = partial apply for implicit closure #1 in CycleTrackingFetcher.buildIntentResponse(hkAnalysis:projectionFocus:);
    *(_QWORD *)(v65 + 24) = v66;
    v67 = swift_allocObject();
    v68 = v300;
    v309 = v67;
    *(_QWORD *)(v67 + 16) = partial apply for thunk for @escaping @callee_guaranteed () -> (@unowned Int);
    *(_QWORD *)(v67 + 24) = v68;
    v310 = swift_allocObject();
    *(_BYTE *)(v310 + 16) = 0;
    v311 = swift_allocObject();
    *(_BYTE *)(v311 + 16) = v302;
    v69 = swift_allocObject();
    v70 = v305;
    v306 = v69;
    *(_QWORD *)(v69 + 16) = partial apply for implicit closure #1 in CycleTrackingFetcher.buildIntentResponse(hkAnalysis:projectionFocus:);
    *(_QWORD *)(v69 + 24) = v70;
    v71 = swift_allocObject();
    v72 = v306;
    v313 = v71;
    *(_QWORD *)(v71 + 16) = partial apply for thunk for @escaping @callee_guaranteed () -> (@unowned Int);
    *(_QWORD *)(v71 + 24) = v72;
    v312 = _allocateUninitializedArray<A>(_:)();
    v314 = v73;
    swift_retain();
    v74 = v307;
    v75 = v314;
    *v314 = partial apply for closure #1 in OSLogArguments.append(_:);
    v75[1] = v74;
    swift_retain();
    v76 = v308;
    v77 = v314;
    v314[2] = partial apply for closure #1 in OSLogArguments.append(_:);
    v77[3] = v76;
    swift_retain();
    v78 = v309;
    v79 = v314;
    v314[4] = partial apply for closure #1 in OSLogArguments.append<A>(_:);
    v79[5] = v78;
    swift_retain();
    v80 = v310;
    v81 = v314;
    v314[6] = partial apply for closure #1 in OSLogArguments.append(_:);
    v81[7] = v80;
    swift_retain();
    v82 = v311;
    v83 = v314;
    v314[8] = partial apply for closure #1 in OSLogArguments.append(_:);
    v83[9] = v82;
    swift_retain();
    v84 = v313;
    v85 = v314;
    v314[10] = partial apply for closure #1 in OSLogArguments.append<A>(_:);
    v85[11] = v84;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(v315, (os_log_type_t)v316))
    {
      v86 = v335;
      v287 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      v285 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      v286 = 0;
      v288 = createStorage<A>(capacity:type:)(0);
      v289 = createStorage<A>(capacity:type:)(v286);
      v290 = &v443;
      v443 = v287;
      v291 = &v442;
      v442 = v288;
      v292 = &v441;
      v441 = v289;
      serialize(_:at:)(0, &v443);
      serialize(_:at:)(2, v290);
      v439 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v440 = v307;
      closure #1 in osLogInternal(_:log:type:)(&v439, (uint64_t)v290, (uint64_t)v291, (uint64_t)v292);
      v293 = v86;
      if (v86)
      {
        __break(1u);
      }
      else
      {
        v439 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
        v440 = v308;
        closure #1 in osLogInternal(_:log:type:)(&v439, (uint64_t)&v443, (uint64_t)&v442, (uint64_t)&v441);
        v283 = 0;
        v439 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append<A>(_:);
        v440 = v309;
        closure #1 in osLogInternal(_:log:type:)(&v439, (uint64_t)&v443, (uint64_t)&v442, (uint64_t)&v441);
        v282 = 0;
        v439 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
        v440 = v310;
        closure #1 in osLogInternal(_:log:type:)(&v439, (uint64_t)&v443, (uint64_t)&v442, (uint64_t)&v441);
        v281 = 0;
        v439 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
        v440 = v311;
        closure #1 in osLogInternal(_:log:type:)(&v439, (uint64_t)&v443, (uint64_t)&v442, (uint64_t)&v441);
        v280 = 0;
        v439 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append<A>(_:);
        v440 = v313;
        closure #1 in osLogInternal(_:log:type:)(&v439, (uint64_t)&v443, (uint64_t)&v442, (uint64_t)&v441);
        v279 = 0;
        _os_log_impl(&dword_24749F000, v315, (os_log_type_t)v316, "end_mostLikelyDays: %ld. end_allDays: %ld", v287, v298);
        v278 = 0;
        destroyStorage<A>(_:count:)(v288, 0, v285);
        destroyStorage<A>(_:count:)(v289, v278, MEMORY[0x24BEE4AD8] + 8);
        MEMORY[0x24957D398](v287, MEMORY[0x24BEE4260]);
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        v284 = v279;
      }
    }
    else
    {
      v87 = v335;
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      v284 = v87;
    }
    v276 = v284;

    result = (char *)((uint64_t (*)(char *, uint64_t))v327)(v393, v403);
    v277 = v297 - v318;
    if (!__OFSUB__(v297, v318))
    {
      v89 = v391;
      v465 = v277;
      v463 = v318;
      v464 = v277;
      v255 = Logger.wellnessIntents.unsafeMutableAddressor();
      v256 = &v462;
      v262 = 32;
      swift_beginAccess();
      v404(v89, v255, v403);
      swift_endAccess();
      v263 = 7;
      v258 = swift_allocObject();
      *(_QWORD *)(v258 + 16) = v277;
      v90 = swift_allocObject();
      v91 = v277;
      v264 = v90;
      *(_QWORD *)(v90 + 16) = v318;
      *(_QWORD *)(v90 + 24) = v91;
      v274 = Logger.logObject.getter();
      v275 = static os_log_type_t.debug.getter();
      v460[5] = 22;
      UnsignedInteger<>.init<A>(_:)();
      v257 = v461;
      v260 = 17;
      v266 = swift_allocObject();
      *(_BYTE *)(v266 + 16) = 0;
      v267 = swift_allocObject();
      v261 = 8;
      *(_BYTE *)(v267 + 16) = 8;
      v92 = swift_allocObject();
      v93 = v258;
      v259 = v92;
      *(_QWORD *)(v92 + 16) = partial apply for implicit closure #1 in CycleTrackingFetcher.buildIntentResponse(hkAnalysis:projectionFocus:);
      *(_QWORD *)(v92 + 24) = v93;
      v94 = swift_allocObject();
      v95 = v259;
      v268 = v94;
      *(_QWORD *)(v94 + 16) = partial apply for thunk for @escaping @callee_guaranteed () -> (@unowned Int);
      *(_QWORD *)(v94 + 24) = v95;
      v269 = swift_allocObject();
      *(_BYTE *)(v269 + 16) = 32;
      v270 = swift_allocObject();
      *(_BYTE *)(v270 + 16) = v261;
      v96 = swift_allocObject();
      v97 = v264;
      v265 = v96;
      *(_QWORD *)(v96 + 16) = partial apply for implicit closure #6 in CycleTrackingFetcher.buildIntentResponse(hkAnalysis:projectionFocus:);
      *(_QWORD *)(v96 + 24) = v97;
      v98 = swift_allocObject();
      v99 = v265;
      v272 = v98;
      *(_QWORD *)(v98 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:);
      *(_QWORD *)(v98 + 24) = v99;
      v271 = _allocateUninitializedArray<A>(_:)();
      v273 = v100;
      swift_retain();
      v101 = v266;
      v102 = v273;
      *v273 = partial apply for closure #1 in OSLogArguments.append(_:);
      v102[1] = v101;
      swift_retain();
      v103 = v267;
      v104 = v273;
      v273[2] = partial apply for closure #1 in OSLogArguments.append(_:);
      v104[3] = v103;
      swift_retain();
      v105 = v268;
      v106 = v273;
      v273[4] = partial apply for closure #1 in OSLogArguments.append<A>(_:);
      v106[5] = v105;
      swift_retain();
      v107 = v269;
      v108 = v273;
      v273[6] = partial apply for closure #1 in OSLogArguments.append(_:);
      v108[7] = v107;
      swift_retain();
      v109 = v270;
      v110 = v273;
      v273[8] = partial apply for closure #1 in OSLogArguments.append(_:);
      v110[9] = v109;
      swift_retain();
      v111 = v272;
      v112 = v273;
      v273[10] = partial apply for closure #1 in OSLogArguments.append(_:);
      v112[11] = v111;
      _finalizeUninitializedArray<A>(_:)();
      swift_bridgeObjectRelease();
      if (os_log_type_enabled(v274, (os_log_type_t)v275))
      {
        v113 = v276;
        v247 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
        v246 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
        v248 = createStorage<A>(capacity:type:)(0);
        v249 = createStorage<A>(capacity:type:)(1);
        v251 = v448;
        v448[0] = v247;
        v252 = &v447;
        v447 = v248;
        v253 = &v446;
        v446 = v249;
        v250 = 2;
        serialize(_:at:)(2, v448);
        serialize(_:at:)(v250, v251);
        v444 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
        v445 = v266;
        closure #1 in osLogInternal(_:log:type:)(&v444, (uint64_t)v251, (uint64_t)v252, (uint64_t)v253);
        v254 = v113;
        if (v113)
        {
          __break(1u);
        }
        else
        {
          v444 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
          v445 = v267;
          closure #1 in osLogInternal(_:log:type:)(&v444, (uint64_t)v448, (uint64_t)&v447, (uint64_t)&v446);
          v244 = 0;
          v444 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append<A>(_:);
          v445 = v268;
          closure #1 in osLogInternal(_:log:type:)(&v444, (uint64_t)v448, (uint64_t)&v447, (uint64_t)&v446);
          v243 = 0;
          v444 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
          v445 = v269;
          closure #1 in osLogInternal(_:log:type:)(&v444, (uint64_t)v448, (uint64_t)&v447, (uint64_t)&v446);
          v242 = 0;
          v444 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
          v445 = v270;
          closure #1 in osLogInternal(_:log:type:)(&v444, (uint64_t)v448, (uint64_t)&v447, (uint64_t)&v446);
          v241 = 0;
          v444 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
          v445 = v272;
          closure #1 in osLogInternal(_:log:type:)(&v444, (uint64_t)v448, (uint64_t)&v447, (uint64_t)&v446);
          v240 = 0;
          _os_log_impl(&dword_24749F000, v274, (os_log_type_t)v275, "trailingDuration: %ld. trailingAllDays: %s", v247, v257);
          destroyStorage<A>(_:count:)(v248, 0, v246);
          destroyStorage<A>(_:count:)(v249, 1, MEMORY[0x24BEE4AD8] + 8);
          MEMORY[0x24957D398](v247, MEMORY[0x24BEE4260]);
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          v245 = v240;
        }
      }
      else
      {
        v114 = v276;
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        v245 = v114;
      }
      v238 = v245;

      v327(v391, v403);
      v460[3] = v318;
      v460[4] = v277;
      v517 = v318;
      v518 = v277;
      v516 = v331;
      v239 = 0;
      if (v331 >= v318)
        v239 = v516 - v517 < v518;
      if (v239)
      {
        v236 = v450;
        v450[0] = v383;
        v235 = &v449;
        v449 = 1;
        v237 = lazy protocol witness table accessor for type PeriodProjectionFocus and conformance PeriodProjectionFocus();
        if ((== infix<A>(_:_:)() & 1) != 0)
        {
          v234 = 1;
        }
        else
        {
          v448[4] = v383;
          v448[3] = (_BYTE *)3;
          v234 = == infix<A>(_:_:)();
        }
        if ((v234 & 1) != 0)
        {
          v233 = 1;
        }
        else
        {
          v448[2] = v383;
          v448[1] = (_BYTE *)5;
          v233 = == infix<A>(_:_:)();
        }
        v232 = v233;
      }
      else
      {
        v232 = 0;
      }
      if ((v232 & 1) != 0)
      {
        v115 = v389;
        v226 = Logger.wellnessIntents.unsafeMutableAddressor();
        v227 = v455;
        swift_beginAccess();
        v404(v115, v226, v403);
        swift_endAccess();
        v230 = Logger.logObject.getter();
        v229 = static os_log_type_t.debug.getter();
        v453[1] = (_BYTE *)2;
        UnsignedInteger<>.init<A>(_:)();
        v228 = v454;
        v231 = _allocateUninitializedArray<A>(_:)();
        if (os_log_type_enabled(v230, (os_log_type_t)v229))
        {
          v116 = v238;
          v216 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
          v214 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
          v215 = 0;
          v217 = createStorage<A>(capacity:type:)(0);
          v218 = createStorage<A>(capacity:type:)(v215);
          v222 = v453;
          v453[0] = v216;
          v223 = &v452;
          v452 = v217;
          v220 = &v451;
          v451 = v218;
          v219 = 0;
          serialize(_:at:)(0, v453);
          serialize(_:at:)(v219, v222);
          v450[1] = v231;
          v221 = &v133;
          MEMORY[0x24BDAC7A8](&v133);
          v117 = v223;
          v118 = &v133 - 6;
          v224 = &v133 - 6;
          v118[2] = (uint64_t)v222;
          v118[3] = (uint64_t)v117;
          v118[4] = v119;
          v225 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
          lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
          Sequence.forEach(_:)();
          if (v116)
          {
            __break(1u);
          }
          else
          {
            _os_log_impl(&dword_24749F000, v230, (os_log_type_t)v229, "Setting nextPeriodStart/End for the trailingAllDays range", v216, v228);
            v213 = 0;
            destroyStorage<A>(_:count:)(v217, 0, v214);
            destroyStorage<A>(_:count:)(v218, v213, MEMORY[0x24BEE4AD8] + 8);
            MEMORY[0x24957D398](v216, MEMORY[0x24BEE4260]);
            swift_bridgeObjectRelease();
          }
        }
        else
        {
          swift_bridgeObjectRelease();
        }

        v327(v389, v403);
        DateInterval.end.getter();
        v211 = Date._bridgeToObjectiveC()().super.isa;
        v210 = *(void (**)(char *, uint64_t))(v355 + 8);
        v210(v357, v354);
        objc_msgSend(v323, sel_setNextPeriodStart_, v211);

        v120 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v355 + 56);
        v212 = 1;
        v120(v353, 1, 1, v354);
        if ((*(unsigned int (**)(char *, _QWORD, uint64_t))(v355 + 48))(v353, v212, v354) == 1)
        {
          v209 = 0;
        }
        else
        {
          v208 = Date._bridgeToObjectiveC()().super.isa;
          v210(v353, v354);
          v209 = v208;
        }
        v207 = v209;
        objc_msgSend(v323, sel_setNextPeriodEnd_);

      }
      else
      {
        v121 = v387;
        v201 = Logger.wellnessIntents.unsafeMutableAddressor();
        v202 = v460;
        swift_beginAccess();
        v404(v121, v201, v403);
        swift_endAccess();
        v205 = Logger.logObject.getter();
        v204 = static os_log_type_t.debug.getter();
        v458[1] = (_BYTE *)2;
        UnsignedInteger<>.init<A>(_:)();
        v203 = v459;
        v206 = _allocateUninitializedArray<A>(_:)();
        if (os_log_type_enabled(v205, (os_log_type_t)v204))
        {
          v122 = v238;
          v191 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
          v189 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
          v190 = 0;
          v192 = createStorage<A>(capacity:type:)(0);
          v193 = createStorage<A>(capacity:type:)(v190);
          v197 = v458;
          v458[0] = v191;
          v198 = &v457;
          v457 = v192;
          v195 = &v456;
          v456 = v193;
          v194 = 0;
          serialize(_:at:)(0, v458);
          serialize(_:at:)(v194, v197);
          v455[3] = v206;
          v196 = &v133;
          MEMORY[0x24BDAC7A8](&v133);
          v123 = v198;
          v124 = &v133 - 6;
          v199 = &v133 - 6;
          v124[2] = (uint64_t)v197;
          v124[3] = (uint64_t)v123;
          v124[4] = v125;
          v200 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
          lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
          Sequence.forEach(_:)();
          if (v122)
          {
            __break(1u);
          }
          else
          {
            _os_log_impl(&dword_24749F000, v205, (os_log_type_t)v204, "Setting nextPeriodStart/End for the standard range", v191, v203);
            v188 = 0;
            destroyStorage<A>(_:count:)(v192, 0, v189);
            destroyStorage<A>(_:count:)(v193, v188, MEMORY[0x24BEE4AD8] + 8);
            MEMORY[0x24957D398](v191, MEMORY[0x24BEE4260]);
            swift_bridgeObjectRelease();
          }
        }
        else
        {
          swift_bridgeObjectRelease();
        }

        v327(v387, v403);
        DateInterval.end.getter();
        v185 = Date._bridgeToObjectiveC()().super.isa;
        v186 = *(void (**)(char *, uint64_t))(v355 + 8);
        v186(v357, v354);
        objc_msgSend(v323, sel_setNextPeriodEnd_, v185);

        DateInterval.start.getter();
        v187 = Date._bridgeToObjectiveC()().super.isa;
        v186(v357, v354);
        objc_msgSend(v323, sel_setNextPeriodStart_, v187);

      }
      v184 = *(void (**)(char *, uint64_t))(v365 + 8);
      v184(v369, v364);
      v184(v371, v364);
      goto LABEL_60;
    }
  }
  __break(1u);
  return result;
}

id HKMCAnalysisQuery.__allocating_init(updateHandler:)(uint64_t a1, uint64_t a2)
{
  id v2;

  v2 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  return @nonobjc HKMCAnalysisQuery.init(updateHandler:)(a1, a2);
}

void implicit closure #2 in CycleTrackingFetcher.buildIntentResponse(hkAnalysis:projectionFocus:)(void *a1@<X0>, uint64_t *a2@<X8>)
{
  id v3;

  v3 = objc_msgSend(a1, sel_menstruationProjections);
  type metadata accessor for HKMCProjection();
  *a2 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

}

BOOL closure #1 in CycleTrackingFetcher.buildIntentResponse(hkAnalysis:projectionFocus:)(id *a1, uint64_t a2)
{
  id v2;
  id v3;
  uint64_t v4;
  BOOL v6;
  uint64_t v7;
  id v9;
  unsigned __int8 v10;

  v9 = *a1;
  v10 = objc_msgSend(*a1, sel_isPartiallyLogged);
  v2 = v9;
  if ((v10 & 1) != 0)
  {
    v6 = 0;
  }
  else
  {
    v3 = objc_msgSend(v9, sel_allDays);
    if ((uint64_t)v3 + v4 - 1 < (uint64_t)v3)
      v7 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v7 = (uint64_t)v3 + v4 - 1;
    v6 = v7 >= a2;
  }

  return v6;
}

uint64_t implicit closure #6 in CycleTrackingFetcher.buildIntentResponse(hkAnalysis:projectionFocus:)()
{
  type metadata accessor for HKDayIndexRange();
  return String.init<A>(describing:)();
}

uint64_t protocol witness for CycleTrackingAnalysisFetching.isReadingAuthorized() in conformance CycleTrackingFetcher()
{
  void **v0;
  uint64_t v1;
  _QWORD *v2;
  void *v4;

  *(_QWORD *)(v1 + 16) = v1;
  v4 = *v0;
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 24) = v2;
  *v2 = *(_QWORD *)(v1 + 16);
  v2[1] = protocol witness for QuantityPersisting.isLoggingAuthorized(for:) in conformance HealthKitPersistor;
  return CycleTrackingFetcher.isReadingAuthorized()(v4);
}

uint64_t protocol witness for CycleTrackingAnalysisFetching.query(projectionFocus:) in conformance CycleTrackingFetcher(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v5;

  *(_QWORD *)(v2 + 16) = v2;
  v5 = *v1;
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 24) = v3;
  *v3 = *(_QWORD *)(v2 + 16);
  v3[1] = protocol witness for QuantityPersisting.save(quantityIdentifier:value:units:) in conformance HealthKitPersistor;
  return CycleTrackingFetcher.query(projectionFocus:)(a1, v5);
}

id @nonobjc HKMCAnalysisQuery.init(updateHandler:)(uint64_t a1, uint64_t a2)
{
  id v3;
  const void *v4;
  id v5;
  uint64_t aBlock;
  int v7;
  int v8;
  uint64_t (*v9)(uint64_t, void *, void *, void *);
  void *v10;
  uint64_t v11;
  uint64_t v12;

  v11 = a1;
  v12 = a2;
  aBlock = MEMORY[0x24BDAC760];
  v7 = 1107296256;
  v8 = 0;
  v9 = thunk for @escaping @callee_guaranteed (@guaranteed HKMCAnalysisQuery, @guaranteed HKMCAnalysis?, @guaranteed Error?) -> ();
  v10 = &block_descriptor_3;
  v4 = _Block_copy(&aBlock);
  v5 = objc_msgSend(v3, sel_initWithUpdateHandler_);
  _Block_release(v4);
  swift_release();
  return v5;
}

uint64_t thunk for @escaping @callee_guaranteed (@guaranteed HKMCAnalysisQuery, @guaranteed HKMCAnalysis?, @guaranteed Error?) -> ()(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v4;
  id v5;
  id v6;
  void *v8;
  void (*v9)(void *, void *);

  v9 = *(void (**)(void *, void *))(a1 + 32);
  swift_retain();
  v4 = a2;
  v5 = a3;
  v6 = a4;
  if (a4)
    v8 = a4;
  else
    v8 = 0;
  v9(a2, a3);

  return swift_release();
}

uint64_t partial apply for closure #1 in CycleTrackingFetcher.query(projectionFocus:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in CycleTrackingFetcher.query(projectionFocus:)(a1, *(void **)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_2474F2398()
{
  uint64_t v0;

  swift_release();
  return swift_deallocObject();
}

void partial apply for closure #1 in CycleTrackingFetcher.queryCycleTrackingData(projectionFocus:completion:)(uint64_t a1, void *a2, void *a3)
{
  uint64_t v3;

  closure #1 in CycleTrackingFetcher.queryCycleTrackingData(projectionFocus:completion:)(a1, a2, a3, *(_QWORD *)(v3 + 16), *(void (**)(void))(v3 + 24), *(_QWORD *)(v3 + 32), *(_QWORD *)(v3 + 40), *(_BYTE **)(v3 + 48));
}

unint64_t type metadata accessor for HKMCAnalysisQuery()
{
  unint64_t ObjCClassMetadata;
  uint64_t v2;

  v2 = lazy cache variable for type metadata for HKMCAnalysisQuery;
  if (!lazy cache variable for type metadata for HKMCAnalysisQuery)
  {
    objc_opt_self();
    ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for HKMCAnalysisQuery);
    return ObjCClassMetadata;
  }
  return v2;
}

unint64_t type metadata accessor for HKMCProjection()
{
  unint64_t ObjCClassMetadata;
  uint64_t v2;

  v2 = lazy cache variable for type metadata for HKMCProjection;
  if (!lazy cache variable for type metadata for HKMCProjection)
  {
    objc_opt_self();
    ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for HKMCProjection);
    return ObjCClassMetadata;
  }
  return v2;
}

uint64_t sub_2474F24C4()
{
  return swift_deallocObject();
}

__C::HKQueryOptions partial apply for implicit closure #1 in CycleTrackingFetcher.buildIntentResponse(hkAnalysis:projectionFocus:)()
{
  uint64_t v0;

  return HKQueryOptions.init(rawValue:)(*(_QWORD *)(v0 + 16));
}

uint64_t sub_2474F24F4()
{
  uint64_t v0;

  return swift_deallocObject();
}

void partial apply for implicit closure #2 in CycleTrackingFetcher.buildIntentResponse(hkAnalysis:projectionFocus:)(uint64_t *a1@<X8>)
{
  uint64_t v1;

  implicit closure #2 in CycleTrackingFetcher.buildIntentResponse(hkAnalysis:projectionFocus:)(*(void **)(v1 + 16), a1);
}

uint64_t sub_2474F2538()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t _s2os18OSLogInterpolationV06appendC0_5align7privacyyxyXA_AA0B15StringAlignmentVAA0B7PrivacyVts06CustomG11ConvertibleRzlFSSycfu_TA_2()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v5 = *(_QWORD *)(v0 + 16);
  v3 = *(_QWORD *)(v0 + 24);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [HKMCProjection]);
  v1 = lazy protocol witness table accessor for type [HKMCProjection] and conformance [A]();
  return implicit closure #1 in OSLogInterpolation.appendInterpolation<A>(_:align:privacy:)(v5, v3, v4, v1);
}

unint64_t lazy protocol witness table accessor for type [HKMCProjection] and conformance [A]()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type [HKMCProjection] and conformance [A];
  if (!lazy protocol witness table cache variable for type [HKMCProjection] and conformance [A])
  {
    v0 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [HKMCProjection]);
    v1 = MEMORY[0x24957D92C](MEMORY[0x24BEE12F8], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type [HKMCProjection] and conformance [A]);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type [HKMCProjection] and conformance [A];
  if (!lazy protocol witness table cache variable for type [HKMCProjection] and conformance [A])
  {
    v0 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [HKMCProjection]);
    v1 = MEMORY[0x24957D92C](MEMORY[0x24BEE12C8], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type [HKMCProjection] and conformance [A]);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type [HKMCProjection] and conformance [A];
  if (!lazy protocol witness table cache variable for type [HKMCProjection] and conformance [A])
  {
    v0 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [HKMCProjection]);
    v1 = MEMORY[0x24957D92C](MEMORY[0x24BEE12E0], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type [HKMCProjection] and conformance [A]);
    return v1;
  }
  return v3;
}

uint64_t sub_2474F2630()
{
  return swift_deallocObject();
}

uint64_t sub_2474F2658()
{
  return swift_deallocObject();
}

uint64_t closure #1 in OSLogArguments.append<A>(_:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  void (*v8)(uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v13[3];
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE v19[16];
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v15 = a1;
  v18 = a6;
  v13[1] = a7;
  v22 = a6;
  v16 = *(_QWORD *)(a6 - 8);
  v13[0] = (*(_QWORD *)(v16 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v7 = MEMORY[0x24BDAC7A8]();
  v17 = (uint64_t)v13 - v13[0];
  v8(v7);
  v14 = dispatch thunk of static FixedWidthInteger.bitWidth.getter() >> 3;
  v20 = *v15;
  v21 = v20 + v14;
  _ss27_withUnprotectedUnsafeBytes2of_q0_x_q0_SWq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v17, partial apply for closure #1 in serialize<A>(_:at:), (uint64_t)v19, v18, MEMORY[0x24BEE4078], MEMORY[0x24BEE4AE0] + 8, MEMORY[0x24BEE40A8], v13[2]);
  v9 = v16;
  v10 = v17;
  v11 = v18;
  *v15 += v14;
  return (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 8))(v10, v11);
}

uint64_t closure #1 in serialize<A>(_:at:)()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t _ss27_withUnprotectedUnsafeBytes2of_q0_x_q0_SWq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(uint64_t a1, uint64_t (*a2)(void), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t (*v17)(void);
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v17 = a2;
  v13 = a5;
  v14 = a8;
  v23 = a4;
  v22 = a5;
  v21 = a6;
  v15 = *(_QWORD *)(a5 - 8);
  v16 = (*(_QWORD *)(v15 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v9 = MEMORY[0x24BDAC7A8]();
  v18 = (char *)&v12 - v16;
  v20 = v9 + *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64);
  result = v17();
  v19 = v8;
  if (v8)
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v15 + 32))(v14, v18, v13);
  return result;
}

uint64_t thunk for @escaping @callee_guaranteed () -> (@unowned Int)@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = a1();
  *a2 = result;
  return result;
}

uint64_t sub_2474F28D8()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed () -> (@unowned Int)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;

  return thunk for @escaping @callee_guaranteed () -> (@unowned Int)(*(uint64_t (**)(void))(v1 + 16), a1);
}

uint64_t sub_2474F2920()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in OSLogArguments.append<A>(_:)(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;

  v8 = *(_QWORD *)(v3 + 16);
  v9 = *(_QWORD *)(v3 + 24);
  v4 = lazy protocol witness table accessor for type Int and conformance Int();
  return closure #1 in OSLogArguments.append<A>(_:)(a1, a2, a3, v8, v9, MEMORY[0x24BEE1768], v4);
}

uint64_t sub_2474F29BC()
{
  return swift_deallocObject();
}

uint64_t sub_2474F29E4()
{
  return swift_deallocObject();
}

uint64_t sub_2474F2A0C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2474F2A48()
{
  swift_release();
  return swift_deallocObject();
}

BOOL partial apply for closure #1 in CycleTrackingFetcher.buildIntentResponse(hkAnalysis:projectionFocus:)(id *a1)
{
  uint64_t v1;

  return closure #1 in CycleTrackingFetcher.buildIntentResponse(hkAnalysis:projectionFocus:)(a1, *(_QWORD *)(v1 + 16));
}

unint64_t lazy protocol witness table accessor for type [HKMCCycle] and conformance [A]()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type [HKMCCycle] and conformance [A];
  if (!lazy protocol witness table cache variable for type [HKMCCycle] and conformance [A])
  {
    v0 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [HKMCCycle]);
    v1 = MEMORY[0x24957D92C](MEMORY[0x24BEE12E0], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type [HKMCCycle] and conformance [A]);
    return v1;
  }
  return v3;
}

unint64_t type metadata accessor for HKMCCycle()
{
  unint64_t ObjCClassMetadata;
  uint64_t v2;

  v2 = lazy cache variable for type metadata for HKMCCycle;
  if (!lazy cache variable for type metadata for HKMCCycle)
  {
    objc_opt_self();
    ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for HKMCCycle);
    return ObjCClassMetadata;
  }
  return v2;
}

uint64_t sub_2474F2BF0()
{
  return swift_deallocObject();
}

uint64_t sub_2474F2C18()
{
  return swift_deallocObject();
}

uint64_t sub_2474F2C40()
{
  return swift_deallocObject();
}

uint64_t sub_2474F2C68()
{
  return swift_deallocObject();
}

uint64_t sub_2474F2C90()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2474F2CCC()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2474F2D08()
{
  return swift_deallocObject();
}

uint64_t sub_2474F2D30()
{
  return swift_deallocObject();
}

uint64_t sub_2474F2D58()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2474F2D94()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2474F2DD0()
{
  return swift_deallocObject();
}

uint64_t sub_2474F2DF8()
{
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #6 in CycleTrackingFetcher.buildIntentResponse(hkAnalysis:projectionFocus:)()
{
  return implicit closure #6 in CycleTrackingFetcher.buildIntentResponse(hkAnalysis:projectionFocus:)();
}

uint64_t sub_2474F2E2C()
{
  return swift_deallocObject();
}

uint64_t sub_2474F2E54()
{
  return swift_deallocObject();
}

uint64_t sub_2474F2E7C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2474F2EB8()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2474F2EF4()
{
  return swift_deallocObject();
}

uint64_t sub_2474F2F1C()
{
  return swift_deallocObject();
}

uint64_t sub_2474F2F44()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2474F2F80()
{
  swift_release();
  return swift_deallocObject();
}

unint64_t lazy protocol witness table accessor for type PeriodProjectionFocus and conformance PeriodProjectionFocus()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type PeriodProjectionFocus and conformance PeriodProjectionFocus;
  if (!lazy protocol witness table cache variable for type PeriodProjectionFocus and conformance PeriodProjectionFocus)
  {
    v0 = MEMORY[0x24957D92C](&protocol conformance descriptor for PeriodProjectionFocus, &type metadata for PeriodProjectionFocus);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type PeriodProjectionFocus and conformance PeriodProjectionFocus);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type PeriodProjectionFocus and conformance PeriodProjectionFocus;
  if (!lazy protocol witness table cache variable for type PeriodProjectionFocus and conformance PeriodProjectionFocus)
  {
    v0 = MEMORY[0x24957D92C](&protocol conformance descriptor for PeriodProjectionFocus, &type metadata for PeriodProjectionFocus);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type PeriodProjectionFocus and conformance PeriodProjectionFocus);
    return v0;
  }
  return v2;
}

uint64_t type metadata accessor for GetMenstruationPredictionIntentHandler()
{
  return objc_opt_self();
}

ValueMetadata *type metadata accessor for CycleTrackingFetcher()
{
  return &type metadata for CycleTrackingFetcher;
}

uint64_t partial apply for closure #1 in serialize<A>(_:at:)()
{
  return closure #1 in serialize<A>(_:at:)();
}

uint64_t block_copy_helper_1(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a2 + 32);
  v5 = *(_QWORD *)(a2 + 40);
  swift_retain();
  result = a1;
  *(_QWORD *)(a1 + 32) = v4;
  *(_QWORD *)(a1 + 40) = v5;
  return result;
}

uint64_t block_destroy_helper_1()
{
  return swift_release();
}

_BYTE *outlined init with copy of Bool?(_BYTE *a1, _BYTE *a2)
{
  _BYTE *result;

  result = a2;
  *a2 = *a1;
  return result;
}

uint64_t sub_2474F30F8()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t sub_2474F3134()
{
  return swift_deallocObject();
}

uint64_t sub_2474F315C()
{
  return swift_deallocObject();
}

uint64_t sub_2474F3184()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2474F31C0()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2474F31FC()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<GetMenstruationPredictionIntentResponse, Never>)
                 - 8);
  (*(void (**)(unint64_t))(v1 + 8))(v0 + ((*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80)));
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in CycleTrackingFetcher.query(projectionFocus:)(void *a1)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<GetMenstruationPredictionIntentResponse, Never>);
  return closure #1 in closure #1 in CycleTrackingFetcher.query(projectionFocus:)(a1);
}

id GetActivitySummaryIntentHandler.__allocating_init(store:)(_QWORD *a1)
{
  objc_class *v1;
  id v2;

  v2 = objc_allocWithZone(v1);
  return GetActivitySummaryIntentHandler.init(store:)(a1);
}

id GetActivitySummaryIntentHandler.init(store:)(_QWORD *a1)
{
  void *v1;
  id v2;
  SiriWellnessIntents::CycleTrackingFetcher v3;
  id v4;
  id v6;
  char *v7;
  objc_class *ObjectType;
  objc_super v10;
  _QWORD v11[5];
  _QWORD __dst[6];
  id v13;

  ObjectType = (objc_class *)swift_getObjectType();
  __dst[5] = a1;
  v2 = v1;
  v13 = v1;
  outlined init with copy of QuantityPersisting?(a1, v11);
  if (v11[3])
  {
    outlined init with take of QuantityPersisting(v11, __dst);
  }
  else
  {
    v3.store.super.isa = CycleTrackingFetcher.init()().store.super.isa;
    __dst[3] = &type metadata for ActivitySummaryFetcher;
    __dst[4] = &protocol witness table for ActivitySummaryFetcher;
    __dst[0] = v3.store.super.isa;
    outlined destroy of QuantityPersisting?((uint64_t)v11);
  }
  outlined init with take of QuantityPersisting(__dst, &v7[OBJC_IVAR____TtC19SiriWellnessIntents31GetActivitySummaryIntentHandler_store]);

  v10.receiver = v13;
  v10.super_class = ObjectType;
  v6 = objc_msgSendSuper2(&v10, sel_init);
  v4 = v6;
  v13 = v6;
  outlined destroy of QuantityPersisting?((uint64_t)a1);

  return v6;
}

uint64_t GetActivitySummaryIntentHandler.handle(intent:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v2[20] = v1;
  v2[15] = v2;
  v2[16] = 0;
  v2[17] = 0;
  v2[18] = 0;
  v3 = type metadata accessor for Logger();
  v2[21] = v3;
  v2[22] = *(_QWORD *)(v3 - 8);
  v2[23] = swift_task_alloc();
  v2[16] = a1;
  v2[17] = v1;
  return swift_task_switch();
}

{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;

  v3 = (_QWORD *)*v2;
  v3[15] = *v2;
  v3[26] = a1;
  v3[27] = v1;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t GetActivitySummaryIntentHandler.handle(intent:)()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);
  uint64_t v7;

  v1 = v0[20];
  v0[15] = v0;
  outlined init with copy of QuantityPersisting(v1 + OBJC_IVAR____TtC19SiriWellnessIntents31GetActivitySummaryIntentHandler_store, (uint64_t)(v0 + 2));
  v7 = v0[5];
  v5 = v0[6];
  __swift_project_boxed_opaque_existential_1(v0 + 2, v7);
  v6 = (uint64_t (*)(uint64_t, uint64_t))(*(_QWORD *)(v5 + 8) + **(int **)(v5 + 8));
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 192) = v2;
  *v2 = *(_QWORD *)(v4 + 120);
  v2[1] = GetActivitySummaryIntentHandler.handle(intent:);
  return v6(v7, v5);
}

{
  uint64_t v0;
  _QWORD *v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t);
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char v8;

  v8 = *(_BYTE *)(v0 + 228);
  *(_QWORD *)(v0 + 120) = v0;
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  if ((v8 & 1) != 0)
  {
    outlined init with copy of QuantityPersisting(v7[20] + OBJC_IVAR____TtC19SiriWellnessIntents31GetActivitySummaryIntentHandler_store, (uint64_t)(v7 + 7));
    v5 = v7[10];
    v3 = v7[11];
    __swift_project_boxed_opaque_existential_1(v7 + 7, v5);
    v4 = (uint64_t (*)(uint64_t, uint64_t))(*(_QWORD *)(v3 + 16) + **(int **)(v3 + 16));
    v2 = (_QWORD *)swift_task_alloc();
    v7[25] = v2;
    *v2 = v7[15];
    v2[1] = GetActivitySummaryIntentHandler.handle(intent:);
    return v4(v5, v3);
  }
  else
  {
    type metadata accessor for GetAcitivitySummaryIntentResponse();
    v6 = GetAcitivitySummaryIntentResponse.__allocating_init(code:userActivity:)(101, 0);
    swift_task_dealloc();
    return (*(uint64_t (**)(char *))(v7[15] + 8))(v6);
  }
}

{
  uint64_t v0;
  uint64_t v2;

  *(_QWORD *)(v0 + 120) = v0;
  __swift_destroy_boxed_opaque_existential_1(v0 + 56);
  v2 = *(_QWORD *)(v0 + 208);
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v0 + 120) + 8))(v2);
}

{
  uint64_t v0;
  uint64_t v1;
  id v2;
  id v3;
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  char *v10;
  uint64_t v11;
  uint8_t *buf;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  uint32_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  NSObject *v27;
  os_log_type_t v28;
  uint8_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t (*v32)(uint64_t, uint64_t, uint64_t);
  uint64_t v33;

  v19 = *(id *)(v0 + 216);
  v1 = *(_QWORD *)(v0 + 184);
  v16 = *(_QWORD *)(v0 + 176);
  v18 = *(_QWORD *)(v0 + 168);
  *(_QWORD *)(v0 + 120) = v0;
  __swift_destroy_boxed_opaque_existential_1(v0 + 56);
  v2 = v19;
  *(_QWORD *)(v0 + 144) = v19;
  v17 = Logger.wellnessIntents.unsafeMutableAddressor();
  swift_beginAccess();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v16 + 16))(v1, v17, v18);
  swift_endAccess();
  v3 = v19;
  v21 = swift_allocObject();
  *(_QWORD *)(v21 + 16) = v19;
  v27 = Logger.logObject.getter();
  v28 = static os_log_type_t.error.getter();
  *(_QWORD *)(v0 + 152) = 12;
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  v20 = *(_DWORD *)(v0 + 224);
  v23 = swift_allocObject();
  *(_BYTE *)(v23 + 16) = 32;
  v24 = swift_allocObject();
  *(_BYTE *)(v24 + 16) = 8;
  v22 = swift_allocObject();
  *(_QWORD *)(v22 + 16) = partial apply for implicit closure #5 in HealthKitPersistor.save(quantityIdentifier:value:units:);
  *(_QWORD *)(v22 + 24) = v21;
  v25 = swift_allocObject();
  *(_QWORD *)(v25 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:);
  *(_QWORD *)(v25 + 24) = v22;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
  _allocateUninitializedArray<A>(_:)();
  v26 = v4;
  swift_retain();
  *v26 = partial apply for closure #1 in OSLogArguments.append(_:);
  v26[1] = v23;
  swift_retain();
  v26[2] = partial apply for closure #1 in OSLogArguments.append(_:);
  v26[3] = v24;
  swift_retain();
  v26[4] = partial apply for closure #1 in OSLogArguments.append(_:);
  v26[5] = v25;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(v27, v28))
  {
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    v13 = createStorage<A>(capacity:type:)(0);
    v14 = createStorage<A>(capacity:type:)(1);
    v29 = buf;
    v30 = v13;
    v31 = v14;
    serialize(_:at:)(2, &v29);
    serialize(_:at:)(1, &v29);
    v32 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v33 = v23;
    closure #1 in osLogInternal(_:log:type:)(&v32, (uint64_t)&v29, (uint64_t)&v30, (uint64_t)&v31);
    v32 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v33 = v24;
    closure #1 in osLogInternal(_:log:type:)(&v32, (uint64_t)&v29, (uint64_t)&v30, (uint64_t)&v31);
    v32 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v33 = v25;
    closure #1 in osLogInternal(_:log:type:)(&v32, (uint64_t)&v29, (uint64_t)&v30, (uint64_t)&v31);
    _os_log_impl(&dword_24749F000, v27, v28, "%s", buf, v20);
    destroyStorage<A>(_:count:)(v13, 0, v11);
    destroyStorage<A>(_:count:)(v14, 1, MEMORY[0x24BEE4AD8] + 8);
    MEMORY[0x24957D398](buf, MEMORY[0x24BEE4260]);
    swift_release();
    swift_release();
    swift_release();
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
  }
  v9 = (id)v15[27];
  v7 = v15[23];
  v6 = v15[22];
  v8 = v15[21];

  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v7, v8);
  type metadata accessor for GetAcitivitySummaryIntentResponse();
  v10 = GetAcitivitySummaryIntentResponse.__allocating_init(code:userActivity:)(5, 0);

  swift_task_dealloc();
  return (*(uint64_t (**)(char *))(v15[15] + 8))(v10);
}

uint64_t GetActivitySummaryIntentHandler.handle(intent:)(char a1)
{
  uint64_t *v1;
  uint64_t v3;

  v3 = *v1;
  *(_QWORD *)(v3 + 120) = *v1;
  *(_BYTE *)(v3 + 228) = a1;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_2474F3E90()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t @objc closure #1 in GetActivitySummaryIntentHandler.handle(intent:)(void *a1, const void *a2, void *a3)
{
  _QWORD *v3;
  id v5;
  id v6;
  _QWORD *v7;
  uint64_t v10;

  v3[4] = a3;
  v3[3] = a1;
  v3[2] = v3;
  v5 = a1;
  v3[5] = _Block_copy(a2);
  v6 = a3;
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v10 + 48) = v7;
  *v7 = *(_QWORD *)(v10 + 16);
  v7[1] = @objc closure #1 in LogQuantityIntentHandler.handle(intent:);
  return GetActivitySummaryIntentHandler.handle(intent:)((uint64_t)a1);
}

id GetActivitySummaryIntentHandler.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

uint64_t GetActivitySummaryIntentHandler.init()()
{
  uint64_t result;
  uint64_t v1;

  if (!"SiriWellnessIntents.GetActivitySummaryIntentHandler")
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  result = closure #1 in _unimplementedInitializer(className:initName:file:line:column:)((uint64_t)"SiriWellnessIntents.GetActivitySummaryIntentHandler", 51, (unint64_t)"init()", 6, 2, (unint64_t)"SiriWellnessIntents/GetActivitySummaryIntentHandler.swift", 57, 2, v1, 0xEuLL, 0x14uLL);
  __break(1u);
  return result;
}

id GetActivitySummaryIntentHandler.__deallocating_deinit()
{
  void *v0;
  objc_super v2;
  void *v3;

  v3 = v0;
  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t ActivitySummaryFetcher.query()(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)(v1 + 176) = a1;
  *(_QWORD *)(v1 + 40) = v1;
  *(_QWORD *)(v1 + 48) = 0;
  *(_QWORD *)(v1 + 56) = 0;
  *(_QWORD *)(v1 + 64) = 0;
  *(_QWORD *)(v1 + 112) = 0;
  *(_QWORD *)(v1 + 120) = 0;
  *(_QWORD *)(v1 + 128) = 0;
  *(_QWORD *)(v1 + 136) = 0;
  *(_BYTE *)(v1 + 400) = 0;
  v2 = type metadata accessor for Logger();
  *(_QWORD *)(v1 + 184) = v2;
  *(_QWORD *)(v1 + 192) = *(_QWORD *)(v2 - 8);
  *(_QWORD *)(v1 + 200) = swift_task_alloc();
  v3 = type metadata accessor for Date();
  *(_QWORD *)(v1 + 208) = v3;
  *(_QWORD *)(v1 + 216) = *(_QWORD *)(v3 - 8);
  *(_QWORD *)(v1 + 224) = swift_task_alloc();
  v4 = type metadata accessor for Calendar();
  *(_QWORD *)(v1 + 232) = v4;
  *(_QWORD *)(v1 + 240) = *(_QWORD *)(v4 - 8);
  *(_QWORD *)(v1 + 248) = swift_task_alloc();
  v5 = type metadata accessor for DateComponents();
  *(_QWORD *)(v1 + 256) = v5;
  *(_QWORD *)(v1 + 264) = *(_QWORD *)(v5 - 8);
  *(_QWORD *)(v1 + 272) = swift_task_alloc();
  *(_QWORD *)(v1 + 280) = swift_task_alloc();
  *(_QWORD *)(v1 + 48) = a1;
  return swift_task_switch();
}

{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v5;

  v3 = (_QWORD *)*v2;
  v3[5] = *v2;
  v3 += 5;
  v5 = v3 - 3;
  v3[36] = a1;
  v3[37] = v1;
  swift_task_dealloc();
  if (!v1)

  return swift_task_switch();
}

uint64_t ActivitySummaryFetcher.query()()
{
  _QWORD *v0;
  uint64_t v1;
  void (*v2)(uint64_t, uint64_t);
  id v3;
  id v4;
  id v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t);
  uint64_t v16;
  uint8_t *buf;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint32_t size;
  os_log_type_t v25;
  NSObject *oslog;
  uint64_t v27;
  void *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(void);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  Class isa;
  id v49;
  void *ObjCClassFromMetadata;
  void *v51;
  uint64_t v52;

  v43 = v0[35];
  v46 = v0[34];
  v44 = v0[33];
  v45 = v0[32];
  v41 = v0[31];
  v40 = v0[30];
  v42 = v0[29];
  v38 = v0[28];
  v37 = v0[27];
  v39 = v0[26];
  v0[5] = v0;
  v35 = type metadata accessor for Calendar.Component();
  _allocateUninitializedArray<A>(_:)();
  v33 = v1;
  v31 = *(_QWORD *)(v35 - 8);
  v34 = *(void (**)(void))(v31 + 104);
  v34();
  v32 = *(_QWORD *)(v31 + 72);
  ((void (*)(uint64_t, _QWORD, uint64_t))v34)(v33 + v32, *MEMORY[0x24BDCF220], v35);
  ((void (*)(uint64_t, _QWORD, uint64_t))v34)(v33 + 2 * v32, *MEMORY[0x24BDCF250], v35);
  ((void (*)(uint64_t, _QWORD, uint64_t))v34)(v33 + 3 * v32, *MEMORY[0x24BDCF240], v35);
  ((void (*)(uint64_t, _QWORD, uint64_t))v34)(v33 + 4 * v32, *MEMORY[0x24BDCF228], v35);
  _finalizeUninitializedArray<A>(_:)();
  lazy protocol witness table accessor for type Calendar.Component and conformance Calendar.Component();
  v36 = Set.init(arrayLiteral:)();
  v0[36] = v36;
  v0[7] = v36;
  static Calendar.current.getter();
  Date.init()();
  Calendar.dateComponents(_:from:)();
  (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v38, v39);
  (*(void (**)(uint64_t, uint64_t))(v40 + 8))(v41, v42);
  v47 = (void *)objc_opt_self();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v44 + 16))(v46, v43, v45);
  isa = DateComponents._bridgeToObjectiveC()().super.isa;
  v2 = *(void (**)(uint64_t, uint64_t))(v44 + 8);
  v0[37] = v2;
  v2(v46, v45);
  v49 = objc_msgSend(v47, sel_predicateForActivitySummaryWithDateComponents_, isa);
  v0[38] = v49;

  v0[8] = v49;
  type metadata accessor for HKQuantityType();
  ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata();
  v51 = (void *)*MEMORY[0x24BDD3340];
  v3 = (id)*MEMORY[0x24BDD3340];
  v4 = objc_msgSend(ObjCClassFromMetadata, sel_quantityTypeForIdentifier_, v51);
  v0[39] = v4;
  v52 = (uint64_t)v4;

  if (v52)
  {
    v28 = *(void **)(v30 + 176);
    *(_QWORD *)(v30 + 112) = v52;
    v5 = v28;
    v29 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v30 + 320) = v29;
    *v29 = *(_QWORD *)(v30 + 40);
    v29[1] = ActivitySummaryFetcher.query();
    return getPreferredUnit(for:store:)(v52, (uint64_t)v28);
  }
  else
  {
    v7 = *(_QWORD *)(v30 + 200);
    v21 = *(_QWORD *)(v30 + 192);
    v23 = *(_QWORD *)(v30 + 184);
    v22 = Logger.wellnessIntents.unsafeMutableAddressor();
    swift_beginAccess();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v21 + 16))(v7, v22, v23);
    swift_endAccess();
    oslog = Logger.logObject.getter();
    v25 = static os_log_type_t.error.getter();
    *(_QWORD *)(v30 + 72) = 2;
    lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    lazy protocol witness table accessor for type Int and conformance Int();
    UnsignedInteger<>.init<A>(_:)();
    size = *(_DWORD *)(v30 + 404);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
    v27 = _allocateUninitializedArray<A>(_:)();
    if (os_log_type_enabled(oslog, v25))
    {
      buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      v18 = createStorage<A>(capacity:type:)(0);
      v19 = createStorage<A>(capacity:type:)(0);
      *(_QWORD *)(v30 + 80) = buf;
      *(_QWORD *)(v30 + 88) = v18;
      *(_QWORD *)(v30 + 96) = v19;
      serialize(_:at:)(0, (_BYTE **)(v30 + 80));
      serialize(_:at:)(0, (_BYTE **)(v30 + 80));
      *(_QWORD *)(v30 + 104) = v27;
      v20 = (_QWORD *)swift_task_alloc();
      v20[2] = v30 + 80;
      v20[3] = v30 + 88;
      v20[4] = v30 + 96;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
      lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
      Sequence.forEach(_:)();
      swift_task_dealloc();
      _os_log_impl(&dword_24749F000, oslog, v25, "Error fetching preferred unit for .activeEnergyBurned", buf, size);
      destroyStorage<A>(_:count:)(v18, 0, v16);
      destroyStorage<A>(_:count:)(v19, 0, MEMORY[0x24BEE4AD8] + 8);
      MEMORY[0x24957D398](buf, MEMORY[0x24BEE4260]);
    }
    swift_bridgeObjectRelease();
    v11 = *(id *)(v30 + 304);
    v15 = *(void (**)(uint64_t, uint64_t))(v30 + 296);
    v13 = *(_QWORD *)(v30 + 280);
    v14 = *(_QWORD *)(v30 + 256);
    v9 = *(_QWORD *)(v30 + 200);
    v8 = *(_QWORD *)(v30 + 192);
    v10 = *(_QWORD *)(v30 + 184);

    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v9, v10);
    type metadata accessor for GetAcitivitySummaryIntentResponse();
    v12 = GetAcitivitySummaryIntentResponse.__allocating_init(code:userActivity:)(5, 0);

    v15(v13, v14);
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(char *))(*(_QWORD *)(v30 + 40) + 8))(v12);
  }
}

{
  _QWORD *v0;
  void *v1;
  id v2;
  id v3;
  id v4;
  id v5;
  id v6;
  id v7;
  id v8;
  uint64_t result;
  uint64_t v10;
  id v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(uint64_t, uint64_t);
  uint64_t v24;
  uint8_t *buf;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint32_t size;
  os_log_type_t v33;
  NSObject *oslog;
  uint64_t v35;
  id v36;
  void *v37;
  char v38;
  void *v39;
  uint64_t v40;
  _QWORD *v41;
  void *v42;
  void *v43;
  void *v44;
  id v45;
  void *v46;
  id v47;
  uint64_t v48;
  id v49;
  uint64_t v50;
  void *v51;
  uint64_t v52;

  v1 = (void *)v0[41];
  v0[5] = v0;
  v51 = v1;
  v52 = v0[42];
  v0[43] = v1;
  if (!v1)
  {

    v48 = v52;
    goto LABEL_11;
  }
  *(_QWORD *)(v50 + 120) = v1;
  v49 = ActivitySummaryFetcher.summaryUnit(for:)(v1);
  *(_QWORD *)(v50 + 352) = v49;
  if (!v49)
  {
    v46 = *(void **)(v50 + 312);

    v48 = v52;
    goto LABEL_11;
  }
  *(_QWORD *)(v50 + 128) = v49;
  v47 = ActivitySummaryFetcher.unitEnergy(for:)(v51);
  *(_QWORD *)(v50 + 360) = v47;
  if (!v47)
  {
    v42 = *(void **)(v50 + 312);

    v48 = v52;
LABEL_11:
    v10 = *(_QWORD *)(v50 + 200);
    v29 = *(_QWORD *)(v50 + 192);
    v31 = *(_QWORD *)(v50 + 184);
    v30 = Logger.wellnessIntents.unsafeMutableAddressor();
    swift_beginAccess();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v29 + 16))(v10, v30, v31);
    swift_endAccess();
    oslog = Logger.logObject.getter();
    v33 = static os_log_type_t.error.getter();
    *(_QWORD *)(v50 + 72) = 2;
    lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    lazy protocol witness table accessor for type Int and conformance Int();
    UnsignedInteger<>.init<A>(_:)();
    size = *(_DWORD *)(v50 + 404);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
    v35 = _allocateUninitializedArray<A>(_:)();
    if (os_log_type_enabled(oslog, v33))
    {
      buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      v26 = createStorage<A>(capacity:type:)(0);
      v27 = createStorage<A>(capacity:type:)(0);
      *(_QWORD *)(v50 + 80) = buf;
      *(_QWORD *)(v50 + 88) = v26;
      *(_QWORD *)(v50 + 96) = v27;
      serialize(_:at:)(0, (_BYTE **)(v50 + 80));
      serialize(_:at:)(0, (_BYTE **)(v50 + 80));
      *(_QWORD *)(v50 + 104) = v35;
      v28 = (_QWORD *)swift_task_alloc();
      v28[2] = v50 + 80;
      v28[3] = v50 + 88;
      v28[4] = v50 + 96;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
      lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
      result = Sequence.forEach(_:)();
      if (v48)
        return result;
      swift_task_dealloc();
      _os_log_impl(&dword_24749F000, oslog, v33, "Error fetching preferred unit for .activeEnergyBurned", buf, size);
      destroyStorage<A>(_:count:)(v26, 0, v24);
      destroyStorage<A>(_:count:)(v27, 0, MEMORY[0x24BEE4AD8] + 8);
      MEMORY[0x24957D398](buf, MEMORY[0x24BEE4260]);
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    v19 = *(id *)(v50 + 304);
    v23 = *(void (**)(uint64_t, uint64_t))(v50 + 296);
    v21 = *(_QWORD *)(v50 + 280);
    v22 = *(_QWORD *)(v50 + 256);
    v17 = *(_QWORD *)(v50 + 200);
    v16 = *(_QWORD *)(v50 + 192);
    v18 = *(_QWORD *)(v50 + 184);

    (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v17, v18);
    type metadata accessor for GetAcitivitySummaryIntentResponse();
    v20 = GetAcitivitySummaryIntentResponse.__allocating_init(code:userActivity:)(5, 0);

    v23(v21, v22);
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(char *))(*(_QWORD *)(v50 + 40) + 8))(v20);
  }
  v44 = *(void **)(v50 + 176);
  *(_QWORD *)(v50 + 136) = v47;
  v2 = v44;
  *(_QWORD *)(v50 + 144) = 0;
  v45 = objc_msgSend(v44, sel_wheelchairUseWithError_, v50 + 144);
  v43 = *(void **)(v50 + 144);
  v3 = v43;

  if (v45)
  {
    v37 = *(void **)(v50 + 304);
    v39 = *(void **)(v50 + 176);
    v36 = objc_msgSend(v45, sel_wheelchairUse);

    *(_QWORD *)(v50 + 152) = v36;
    *(_QWORD *)(v50 + 160) = 2;
    type metadata accessor for HKWheelchairUse();
    lazy protocol witness table accessor for type HKWheelchairUse and conformance HKWheelchairUse();
    v38 = == infix<A>(_:_:)();
    *(_BYTE *)(v50 + 400) = v38 & 1;
    *(_QWORD *)(v50 + 368) = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("query()", 7uLL, 1)._object;
    v4 = v37;
    v5 = v49;
    v6 = v47;
    v7 = v51;
    v8 = v39;
    v40 = swift_task_alloc();
    *(_QWORD *)(v50 + 376) = v40;
    *(_QWORD *)(v40 + 16) = v37;
    *(_BYTE *)(v40 + 24) = v38 & 1;
    *(_QWORD *)(v40 + 32) = v49;
    *(_QWORD *)(v40 + 40) = v47;
    *(_QWORD *)(v40 + 48) = v51;
    *(_QWORD *)(v40 + 56) = v39;
    v41 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v50 + 384) = v41;
    type metadata accessor for GetAcitivitySummaryIntentResponse();
    *v41 = *(_QWORD *)(v50 + 40);
    v41[1] = ActivitySummaryFetcher.query();
    return withCheckedThrowingContinuation<A>(isolation:function:_:)();
  }
  else
  {
    v12 = *(id *)(v50 + 304);
    v15 = *(void (**)(uint64_t, uint64_t))(v50 + 296);
    v13 = *(_QWORD *)(v50 + 280);
    v14 = *(_QWORD *)(v50 + 256);
    v11 = *(id *)(v50 + 312);
    _convertNSErrorToError(_:)();

    swift_willThrow();
    v15(v13, v14);
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)())(*(_QWORD *)(v50 + 40) + 8))();
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  _QWORD *v9;

  v2 = *v1;
  *(_QWORD *)(v2 + 40) = *v1;
  v2 += 40;
  v9 = (_QWORD *)(v2 - 24);
  *(_QWORD *)(v2 + 352) = v0;
  swift_task_dealloc();
  if (!v0)
  {
    v6 = (void *)v9[43];
    v5 = (void *)v9[42];
    v7 = (void *)v9[41];
    v4 = (void *)v9[36];
    v8 = (void *)v9[20];
    swift_task_dealloc();

    swift_bridgeObjectRelease();
  }
  return swift_task_switch();
}

{
  _QWORD *v0;
  void *v1;
  uint64_t v3;
  id v4;
  id v5;
  id v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);

  v1 = (void *)v0[45];
  v4 = (id)v0[44];
  v5 = (id)v0[43];
  v6 = (id)v0[39];
  v7 = (id)v0[38];
  v10 = (void (*)(uint64_t, uint64_t))v0[37];
  v8 = v0[35];
  v9 = v0[32];
  v0[5] = v0;
  v3 = v0[21];

  v10(v8, v9);
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(v0[5] + 8))(v3);
}

{
  _QWORD *v0;
  void *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t);
  uint64_t v12;
  uint8_t *buf;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint32_t size;
  os_log_type_t v21;
  NSObject *oslog;
  uint64_t v23;
  uint64_t v24;
  void *v25;

  v25 = (void *)v0[42];
  v1 = (void *)v0[22];
  v0[5] = v0;

  v0[43] = 0;
  v2 = *(_QWORD *)(v24 + 200);
  v17 = *(_QWORD *)(v24 + 192);
  v19 = *(_QWORD *)(v24 + 184);
  v18 = Logger.wellnessIntents.unsafeMutableAddressor();
  swift_beginAccess();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 16))(v2, v18, v19);
  swift_endAccess();
  oslog = Logger.logObject.getter();
  v21 = static os_log_type_t.error.getter();
  *(_QWORD *)(v24 + 72) = 2;
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  size = *(_DWORD *)(v24 + 404);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
  v23 = _allocateUninitializedArray<A>(_:)();
  if (os_log_type_enabled(oslog, v21))
  {
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    v14 = createStorage<A>(capacity:type:)(0);
    v15 = createStorage<A>(capacity:type:)(0);
    *(_QWORD *)(v24 + 80) = buf;
    *(_QWORD *)(v24 + 88) = v14;
    *(_QWORD *)(v24 + 96) = v15;
    serialize(_:at:)(0, (_BYTE **)(v24 + 80));
    serialize(_:at:)(0, (_BYTE **)(v24 + 80));
    *(_QWORD *)(v24 + 104) = v23;
    v16 = (_QWORD *)swift_task_alloc();
    v16[2] = v24 + 80;
    v16[3] = v24 + 88;
    v16[4] = v24 + 96;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
    lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
    Sequence.forEach(_:)();
    swift_task_dealloc();
    _os_log_impl(&dword_24749F000, oslog, v21, "Error fetching preferred unit for .activeEnergyBurned", buf, size);
    destroyStorage<A>(_:count:)(v14, 0, v12);
    destroyStorage<A>(_:count:)(v15, 0, MEMORY[0x24BEE4AD8] + 8);
    MEMORY[0x24957D398](buf, MEMORY[0x24BEE4260]);
  }
  swift_bridgeObjectRelease();
  v7 = *(id *)(v24 + 304);
  v11 = *(void (**)(uint64_t, uint64_t))(v24 + 296);
  v9 = *(_QWORD *)(v24 + 280);
  v10 = *(_QWORD *)(v24 + 256);
  v5 = *(_QWORD *)(v24 + 200);
  v4 = *(_QWORD *)(v24 + 192);
  v6 = *(_QWORD *)(v24 + 184);

  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v5, v6);
  type metadata accessor for GetAcitivitySummaryIntentResponse();
  v8 = GetAcitivitySummaryIntentResponse.__allocating_init(code:userActivity:)(5, 0);

  v11(v9, v10);
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(char *))(*(_QWORD *)(v24 + 40) + 8))(v8);
}

{
  _QWORD *v0;
  id v2;
  id v3;
  id v4;
  id v5;
  id v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);

  v3 = (id)v0[45];
  v4 = (id)v0[44];
  v5 = (id)v0[43];
  v6 = (id)v0[39];
  v7 = (id)v0[38];
  v10 = (void (*)(uint64_t, uint64_t))v0[37];
  v8 = v0[35];
  v9 = v0[32];
  v2 = (id)v0[22];
  v0[5] = v0;
  swift_task_dealloc();

  swift_bridgeObjectRelease();
  v10(v8, v9);
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)())(v0[5] + 8))();
}

id ActivitySummaryFetcher.summaryUnit(for:)(void *a1)
{
  id v2;
  char v3;
  id v4;
  char v5;
  id v6;
  id v8;
  char v9;

  v8 = objc_msgSend(a1, sel_unitString);
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("kJ", 2uLL, 1);
  swift_bridgeObjectRetain();
  v9 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v9 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v6 = objc_msgSend((id)objc_opt_self(), sel_jouleUnitWithMetricPrefix_, 9);
    swift_bridgeObjectRelease();

    return v6;
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Cal", 3uLL, 1);
    swift_bridgeObjectRetain();
    v5 = static String.== infix(_:_:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v5 & 1) != 0)
    {
      swift_bridgeObjectRelease();
      v4 = objc_msgSend((id)objc_opt_self(), sel_largeCalorieUnit);
      swift_bridgeObjectRelease();

      return v4;
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("kcal", 4uLL, 1);
      swift_bridgeObjectRetain();
      v3 = static String.== infix(_:_:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v3 & 1) != 0)
      {
        v2 = objc_msgSend((id)objc_opt_self(), sel_kilocalorieUnit);
        swift_bridgeObjectRelease();

        return v2;
      }
      else
      {
        swift_bridgeObjectRelease();

        return 0;
      }
    }
  }
}

id ActivitySummaryFetcher.unitEnergy(for:)(void *a1)
{
  char v2;
  char v3;
  id v4;
  id v6;
  char v7;

  v6 = objc_msgSend(a1, sel_unitString);
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("kJ", 2uLL, 1);
  swift_bridgeObjectRetain();
  v7 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v7 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v4 = objc_msgSend((id)objc_opt_self(), sel_kilojoules);
    swift_bridgeObjectRelease();

    return v4;
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Cal", 3uLL, 1);
    swift_bridgeObjectRetain();
    v3 = static String.== infix(_:_:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v3 & 1) != 0
      || (swift_bridgeObjectRelease(),
          swift_bridgeObjectRetain(),
          String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("kcal", 4uLL, 1),
          swift_bridgeObjectRetain(),
          v2 = static String.== infix(_:_:)(),
          swift_bridgeObjectRelease(),
          swift_bridgeObjectRelease(),
          (v2 & 1) != 0))
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      return objc_msgSend((id)objc_opt_self(), sel_kilocalories);
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      return 0;
    }
  }
}

void closure #1 in ActivitySummaryFetcher.query()(uint64_t a1, void *a2, int a3, void *a4, void *a5, void *a6, void *a7)
{
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  unint64_t v18;
  id v19;
  unint64_t v20;
  id v21;
  unint64_t v22;
  uint64_t v23;
  id v24;
  id v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char *v32;
  uint64_t v33;
  int v34;
  int v35;
  uint64_t v36;
  id v37;
  unint64_t v38;
  id v39;
  unint64_t v40;
  id v41;
  unint64_t v42;
  uint64_t v43;
  id v44;
  id v45;
  id v46;
  id v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  uint64_t v54;

  v28 = a1;
  v44 = a2;
  v35 = a3;
  v37 = a4;
  v39 = a5;
  v41 = a6;
  v45 = a7;
  v54 = 0;
  v53 = 0;
  v52 = 0;
  v51 = 0;
  v50 = 0;
  v49 = 0;
  v48 = 0;
  v47 = 0;
  v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<GetAcitivitySummaryIntentResponse, Error>);
  v30 = *(_QWORD *)(v33 - 8);
  v29 = *(_QWORD *)(v30 + 64);
  v27 = (v29 + 15) & 0xFFFFFFFFFFFFFFF0;
  v32 = (char *)&v26 - v27;
  v54 = MEMORY[0x24BDAC7A8](v28);
  v53 = v7;
  v34 = 1;
  v52 = v8 & 1;
  v51 = v9;
  v50 = v10;
  v49 = v11;
  v48 = v12;
  type metadata accessor for HKActivitySummaryQuery();
  v13 = v44;
  (*(void (**)(char *, uint64_t, uint64_t))(v30 + 16))(v32, v28, v33);
  v14 = v37;
  v15 = v39;
  v16 = v41;
  v31 = (*(unsigned __int8 *)(v30 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v30 + 80);
  v36 = v31 + v29;
  v38 = (v31 + v29 + 8) & 0xFFFFFFFFFFFFFFF8;
  v40 = (v38 + 15) & 0xFFFFFFFFFFFFFFF8;
  v42 = (v40 + 15) & 0xFFFFFFFFFFFFFFF8;
  v43 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v30 + 32))(v43 + v31, v32, v33);
  v17 = v37;
  v18 = v38;
  v19 = v39;
  v20 = v40;
  v21 = v41;
  v22 = v42;
  v23 = v43;
  v24 = v44;
  *(_BYTE *)(v43 + v36) = v35 & v34;
  *(_QWORD *)(v23 + v18) = v17;
  *(_QWORD *)(v23 + v20) = v19;
  *(_QWORD *)(v23 + v22) = v21;
  v46 = HKActivitySummaryQuery.__allocating_init(predicate:resultsHandler:)(v24, (uint64_t)partial apply for closure #1 in closure #1 in ActivitySummaryFetcher.query(), v23);
  v47 = v46;
  v25 = v45;
  objc_msgSend(v45, sel_executeQuery_, v46);

}

void closure #1 in closure #1 in ActivitySummaryFetcher.query()(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, int a5, uint64_t a6, void *a7, void *a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  char *v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  id v35;
  char *v36;
  char *v37;
  id v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  NSNumber v51;
  char *v52;
  void *v53;
  double v54;
  double v55;
  void *v56;
  double v57;
  double v58;
  uint64_t v59;
  id v60;
  uint64_t v61;
  id v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  Class isa;
  id v69;
  id v70;
  double v71;
  unint64_t v72;
  id v73;
  id v74;
  double v75;
  id v76;
  id v77;
  double v78;
  unint64_t v79;
  unint64_t v80;
  id v81;
  id v82;
  double v83;
  id v84;
  void *v85;
  uint64_t v86;
  unint64_t v87;
  id v88;
  uint64_t v89;
  unint64_t v90;
  Class v91;
  void (*v92)(char *, char *, uint64_t);
  Class v93;
  uint64_t v94;
  id v95;
  id v96;
  char **v97;
  void (*v98)(char *, uint64_t, __n128);
  char *v99;
  uint64_t v100;
  uint64_t v101;
  uint8_t *v102;
  uint64_t v103;
  uint64_t v104;
  _BYTE **v105;
  uint64_t *v106;
  uint64_t *v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  id v111;
  unint64_t v112;
  unint64_t v113;
  uint64_t *v114;
  uint32_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  _QWORD *v125;
  uint64_t v126;
  NSObject *v127;
  int v128;
  void *v129;
  char **v130;
  char *v131;
  void *v132;
  void *v133;
  uint64_t v134;
  _QWORD *v135;
  uint64_t v136;
  void *v137;
  void *v138;
  id *v139;
  uint64_t v140;
  uint64_t v141;
  uint8_t *v142;
  uint64_t v143;
  uint64_t v144;
  _BYTE **v145;
  uint64_t *v146;
  uint64_t *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t *v150;
  id v151;
  unint64_t v152;
  unint64_t v153;
  uint64_t *v154;
  uint32_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  _QWORD *v165;
  uint64_t v166;
  NSObject *v167;
  int v168;
  uint64_t v169;
  void *v170;
  uint64_t v171;
  uint64_t v172;
  _QWORD *v173;
  unint64_t v174;
  char *v175;
  unint64_t v176;
  char *v177;
  unint64_t v178;
  char *v179;
  uint64_t v180;
  uint64_t v181;
  int v182;
  uint64_t v183;
  id v184;
  id v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  unint64_t v189;
  uint64_t v190;
  char *v191;
  unint64_t v192;
  char *v193;
  void *v194;
  uint64_t (*v195)(uint64_t, uint64_t, uint64_t);
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  _BYTE *v199;
  id v200;
  uint64_t v201;
  uint32_t v202;
  uint64_t v203;
  void *v204;
  _QWORD v205[2];
  uint64_t (*v206)(uint64_t, uint64_t, uint64_t);
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  _BYTE *v210;
  char *v211;
  char *v212;
  uint64_t v213;
  uint32_t v214;
  char v215;
  void *v216;
  char *v217;
  char *v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  char v222;
  uint64_t v223;
  void *v224;
  uint64_t v225;
  uint64_t v226;
  char *v227;
  char *v228;
  NSMeasurement v229;
  NSMeasurement v230;

  v180 = a1;
  v186 = a2;
  v194 = a3;
  v181 = a4;
  v182 = a5;
  v183 = a6;
  v184 = a7;
  v185 = a8;
  v228 = 0;
  v227 = 0;
  v226 = 0;
  v225 = 0;
  v224 = 0;
  v223 = 0;
  v222 = 0;
  v221 = 0;
  v220 = 0;
  v219 = 0;
  v218 = 0;
  v216 = 0;
  v212 = 0;
  v171 = 0;
  v204 = 0;
  v172 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<NSUnitEnergy>);
  v173 = *(_QWORD **)(v172 - 8);
  v174 = (v173[8] + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v172);
  v175 = (char *)&v67 - v174;
  v176 = (v8 + 15) & 0xFFFFFFFFFFFFFFF0;
  v9 = MEMORY[0x24BDAC7A8]((char *)&v67 - v174);
  v177 = (char *)&v67 - v176;
  v228 = (char *)&v67 - v176;
  v178 = (v10 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v9);
  v179 = (char *)&v67 - v178;
  v227 = (char *)&v67 - v178;
  v187 = type metadata accessor for Logger();
  v188 = *(_QWORD *)(v187 - 8);
  v190 = *(_QWORD *)(v188 + 64);
  v189 = (v190 + 15) & 0xFFFFFFFFFFFFFFF0;
  v11 = MEMORY[0x24BDAC7A8](v194);
  v191 = (char *)&v67 - v189;
  v192 = (v190 + 15) & 0xFFFFFFFFFFFFFFF0;
  v12 = (void *)MEMORY[0x24BDAC7A8](v11);
  v193 = (char *)&v67 - v192;
  v226 = v13;
  v225 = v14;
  v224 = v12;
  v223 = v15;
  v222 = v16 & 1;
  v221 = v17;
  v220 = v18;
  v219 = v19;
  v20 = v12;
  if (v194)
  {
    v170 = v194;
    v21 = v193;
    v151 = v194;
    v204 = v194;
    v149 = Logger.wellnessIntents.unsafeMutableAddressor();
    v150 = &v203;
    v157 = 32;
    swift_beginAccess();
    (*(void (**)(char *, uint64_t, uint64_t))(v188 + 16))(v21, v149, v187);
    swift_endAccess();
    v22 = v151;
    v158 = 7;
    v159 = swift_allocObject();
    *(_QWORD *)(v159 + 16) = v151;
    v167 = Logger.logObject.getter();
    v168 = static os_log_type_t.error.getter();
    v154 = &v201;
    v201 = 12;
    v152 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    v153 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    lazy protocol witness table accessor for type Int and conformance Int();
    UnsignedInteger<>.init<A>(_:)();
    v155 = v202;
    v156 = 17;
    v161 = swift_allocObject();
    *(_BYTE *)(v161 + 16) = 64;
    v162 = swift_allocObject();
    *(_BYTE *)(v162 + 16) = 8;
    v23 = swift_allocObject();
    v24 = v159;
    v160 = v23;
    *(_QWORD *)(v23 + 16) = partial apply for implicit closure #1 in closure #1 in closure #1 in HKHealthStore.query(correlationType:firstQuantityType:secondQuantityType:start:end:);
    *(_QWORD *)(v23 + 24) = v24;
    v25 = swift_allocObject();
    v26 = v160;
    v164 = v25;
    *(_QWORD *)(v25 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:);
    *(_QWORD *)(v25 + 24) = v26;
    v166 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
    v163 = _allocateUninitializedArray<A>(_:)();
    v165 = v27;
    swift_retain();
    v28 = v161;
    v29 = v165;
    *v165 = partial apply for closure #1 in OSLogArguments.append(_:);
    v29[1] = v28;
    swift_retain();
    v30 = v162;
    v31 = v165;
    v165[2] = partial apply for closure #1 in OSLogArguments.append(_:);
    v31[3] = v30;
    swift_retain();
    v32 = v164;
    v33 = v165;
    v165[4] = partial apply for closure #1 in OSLogArguments.append(_:);
    v33[5] = v32;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(v167, (os_log_type_t)v168))
    {
      v34 = v171;
      v142 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      v141 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      v143 = createStorage<A>(capacity:type:)(1);
      v144 = createStorage<A>(capacity:type:)(0);
      v145 = &v199;
      v199 = v142;
      v146 = &v198;
      v198 = v143;
      v147 = &v197;
      v197 = v144;
      serialize(_:at:)(2, &v199);
      serialize(_:at:)(1, v145);
      v195 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v196 = v161;
      closure #1 in osLogInternal(_:log:type:)(&v195, (uint64_t)v145, (uint64_t)v146, (uint64_t)v147);
      v148 = v34;
      if (v34)
      {
        __break(1u);
      }
      else
      {
        v195 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
        v196 = v162;
        closure #1 in osLogInternal(_:log:type:)(&v195, (uint64_t)&v199, (uint64_t)&v198, (uint64_t)&v197);
        v140 = 0;
        v195 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
        v196 = v164;
        closure #1 in osLogInternal(_:log:type:)(&v195, (uint64_t)&v199, (uint64_t)&v198, (uint64_t)&v197);
        _os_log_impl(&dword_24749F000, v167, (os_log_type_t)v168, "Error while querying HealthKit for quantity samples: %@", v142, v155);
        destroyStorage<A>(_:count:)(v143, 1, v141);
        destroyStorage<A>(_:count:)(v144, 0, MEMORY[0x24BEE4AD8] + 8);
        MEMORY[0x24957D398](v142, MEMORY[0x24BEE4260]);
        swift_release();
        swift_release();
        swift_release();
      }
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
    }

    (*(void (**)(char *, uint64_t))(v188 + 8))(v193, v187);
    v35 = v151;
    v139 = &v200;
    v200 = v151;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<GetAcitivitySummaryIntentResponse, Error>);
    CheckedContinuation.resume(throwing:)();

  }
  else
  {
    swift_bridgeObjectRetain();
    if (v186)
    {
      v169 = v186;
      v136 = v186;
      swift_bridgeObjectRetain();
      v135 = v205;
      v205[0] = v136;
      v134 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [HKActivitySummary]);
      lazy protocol witness table accessor for type [HKActivitySummary] and conformance [A]();
      Collection.first.getter();
      outlined destroy of [HKQuantityType]();
      v137 = (void *)v205[1];
      swift_bridgeObjectRelease();
      v138 = v137;
    }
    else
    {
      v138 = 0;
    }
    v133 = v138;
    if (v138)
    {
      v132 = v133;
      v37 = v191;
      v111 = v133;
      v216 = v133;
      v109 = Logger.wellnessIntents.unsafeMutableAddressor();
      v110 = &v215;
      v117 = 32;
      swift_beginAccess();
      (*(void (**)(char *, uint64_t, uint64_t))(v188 + 16))(v37, v109, v187);
      swift_endAccess();
      v38 = v111;
      v118 = 7;
      v119 = swift_allocObject();
      *(_QWORD *)(v119 + 16) = v111;
      v127 = Logger.logObject.getter();
      v128 = static os_log_type_t.debug.getter();
      v114 = &v213;
      v213 = 12;
      v112 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
      v113 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
      lazy protocol witness table accessor for type Int and conformance Int();
      UnsignedInteger<>.init<A>(_:)();
      v115 = v214;
      v116 = 17;
      v121 = swift_allocObject();
      *(_BYTE *)(v121 + 16) = 64;
      v122 = swift_allocObject();
      *(_BYTE *)(v122 + 16) = 8;
      v39 = swift_allocObject();
      v40 = v119;
      v120 = v39;
      *(_QWORD *)(v39 + 16) = partial apply for implicit closure #3 in LogQuantityIntentHandler.handle(intent:);
      *(_QWORD *)(v39 + 24) = v40;
      v41 = swift_allocObject();
      v42 = v120;
      v124 = v41;
      *(_QWORD *)(v41 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:);
      *(_QWORD *)(v41 + 24) = v42;
      v126 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
      v123 = _allocateUninitializedArray<A>(_:)();
      v125 = v43;
      swift_retain();
      v44 = v121;
      v45 = v125;
      *v125 = partial apply for closure #1 in OSLogArguments.append(_:);
      v45[1] = v44;
      swift_retain();
      v46 = v122;
      v47 = v125;
      v125[2] = partial apply for closure #1 in OSLogArguments.append(_:);
      v47[3] = v46;
      swift_retain();
      v48 = v124;
      v49 = v125;
      v125[4] = partial apply for closure #1 in OSLogArguments.append(_:);
      v49[5] = v48;
      _finalizeUninitializedArray<A>(_:)();
      swift_bridgeObjectRelease();
      if (os_log_type_enabled(v127, (os_log_type_t)v128))
      {
        v50 = v171;
        v102 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
        v101 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
        v103 = createStorage<A>(capacity:type:)(1);
        v104 = createStorage<A>(capacity:type:)(0);
        v105 = &v210;
        v210 = v102;
        v106 = &v209;
        v209 = v103;
        v107 = &v208;
        v208 = v104;
        serialize(_:at:)(2, &v210);
        serialize(_:at:)(1, v105);
        v206 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
        v207 = v121;
        closure #1 in osLogInternal(_:log:type:)(&v206, (uint64_t)v105, (uint64_t)v106, (uint64_t)v107);
        v108 = v50;
        if (v50)
        {
          __break(1u);
        }
        else
        {
          v206 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
          v207 = v122;
          closure #1 in osLogInternal(_:log:type:)(&v206, (uint64_t)&v210, (uint64_t)&v209, (uint64_t)&v208);
          v100 = 0;
          v206 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
          v207 = v124;
          closure #1 in osLogInternal(_:log:type:)(&v206, (uint64_t)&v210, (uint64_t)&v209, (uint64_t)&v208);
          _os_log_impl(&dword_24749F000, v127, (os_log_type_t)v128, "summary: %@", v102, v115);
          destroyStorage<A>(_:count:)(v103, 1, v101);
          destroyStorage<A>(_:count:)(v104, 0, MEMORY[0x24BEE4AD8] + 8);
          MEMORY[0x24957D398](v102, MEMORY[0x24BEE4260]);
          swift_release();
          swift_release();
          swift_release();
        }
      }
      else
      {
        swift_release();
        swift_release();
        swift_release();
      }

      (*(void (**)(char *, uint64_t))(v188 + 8))(v191, v187);
      v85 = 0;
      type metadata accessor for GetAcitivitySummaryIntentResponse();
      v99 = GetAcitivitySummaryIntentResponse.__allocating_init(code:userActivity:)(4, v85);
      v212 = v99;
      type metadata accessor for NSNumber();
      v51.super.super.isa = NSNumber.__allocating_init(value:)(v182 & 1).super.super.isa;
      v52 = v175;
      isa = v51.super.super.isa;
      objc_msgSend(v99, sel_setIsWheelchairUser_);

      v70 = objc_msgSend(v111, sel_appleExerciseTime);
      v79 = 0x24BDD4000uLL;
      v53 = (void *)objc_opt_self();
      v72 = 0x1F3A5B000uLL;
      v69 = objc_msgSend(v53, (SEL)0x1F3A5B4C4);
      v87 = 0x1F3F06000uLL;
      objc_msgSend(v70, (SEL)0x1F3F06C8ALL);
      v71 = v54;

      objc_msgSend(v99, sel_setAppleExerciseTime_, v71);
      v74 = objc_msgSend(v111, sel_appleExerciseTimeGoal);
      v73 = objc_msgSend((id)objc_opt_self(), (SEL)(v72 + 1220));
      objc_msgSend(v74, (SEL)(v87 + 3210));
      v75 = v55;

      objc_msgSend(v99, sel_setAppleExerciseTimeGoal_, v75);
      v77 = objc_msgSend(v111, sel_appleStandHours);
      v56 = (void *)objc_opt_self();
      v80 = 0x1F3F05000uLL;
      v76 = objc_msgSend(v56, (SEL)0x1F3F053FFLL);
      objc_msgSend(v77, (SEL)(v87 + 3210));
      v78 = v57;

      objc_msgSend(v99, sel_setAppleStandHours_, v78);
      v82 = objc_msgSend(v111, sel_appleStandHoursGoal);
      v81 = objc_msgSend((id)objc_opt_self(), (SEL)(v80 + 1023));
      objc_msgSend(v82, (SEL)(v87 + 3210));
      v83 = v58;

      objc_msgSend(v99, sel_setAppleStandHoursGoal_, v83);
      v84 = objc_msgSend(v111, sel_activeEnergyBurnedGoal);
      objc_msgSend(v84, (SEL)(v87 + 3210), v183);
      v86 = v59;

      v60 = v184;
      v90 = type metadata accessor for NSUnitEnergy();
      Measurement.init(value:unit:)();
      v88 = objc_msgSend(v111, sel_activeEnergyBurned);
      objc_msgSend(v88, (SEL)(v87 + 3210), v183);
      v89 = v61;

      v62 = v184;
      Measurement.init(value:unit:)();
      v92 = (void (*)(char *, char *, uint64_t))v173[2];
      v92(v52, v179, v172);
      v229 = Measurement._bridgeToObjectiveC()();
      v63 = v175;
      v91 = v229.super.isa;
      v98 = (void (*)(char *, uint64_t, __n128))v173[1];
      v98(v175, v172, *(__n128 *)&v229._doubleValue);
      objc_msgSend(v99, sel_setActiveEnergyBurnedGoal_, v91);

      v92(v63, v177, v172);
      v230 = Measurement._bridgeToObjectiveC()();
      v93 = v230.super.isa;
      v98(v175, v172, *(__n128 *)&v230._doubleValue);
      objc_msgSend(v99, sel_setActiveEnergyBurned_, v93);

      v95 = objc_msgSend(v185, sel_unitString);
      v64 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v94 = v65;
      v96 = (id)MEMORY[0x24957CFB4](v64);
      swift_bridgeObjectRelease();

      objc_msgSend(v99, sel_setActiveEnergyBurnedUnit_, v96);
      v66 = v99;
      v97 = &v211;
      v211 = v99;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<GetAcitivitySummaryIntentResponse, Error>);
      CheckedContinuation.resume(returning:)();
      ((void (*)(char *, uint64_t))v98)(v177, v172);
      ((void (*)(char *, uint64_t))v98)(v179, v172);

    }
    else
    {
      v129 = 0;
      type metadata accessor for GetAcitivitySummaryIntentResponse();
      v131 = GetAcitivitySummaryIntentResponse.__allocating_init(code:userActivity:)(102, v129);
      v218 = v131;
      v36 = v131;
      v130 = &v217;
      v217 = v131;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<GetAcitivitySummaryIntentResponse, Error>);
      CheckedContinuation.resume(returning:)();

    }
  }
}

NSNumber __swiftcall NSNumber.__allocating_init(value:)(Swift::Bool value)
{
  id v1;

  v1 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  return (NSNumber)@nonobjc NSNumber.init(value:)(value);
}

id HKActivitySummaryQuery.__allocating_init(predicate:resultsHandler:)(void *a1, uint64_t a2, uint64_t a3)
{
  id v3;

  v3 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  return @nonobjc HKActivitySummaryQuery.init(predicate:resultsHandler:)(a1, a2, a3);
}

uint64_t protocol witness for ActivitySummaryFetching.isReadingAuthorized() in conformance ActivitySummaryFetcher()
{
  void **v0;
  uint64_t v1;
  _QWORD *v2;
  void *v4;

  *(_QWORD *)(v1 + 16) = v1;
  v4 = *v0;
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 24) = v2;
  *v2 = *(_QWORD *)(v1 + 16);
  v2[1] = protocol witness for QuantityPersisting.isLoggingAuthorized(for:) in conformance HealthKitPersistor;
  return CycleTrackingFetcher.isReadingAuthorized()(v4);
}

uint64_t protocol witness for ActivitySummaryFetching.query() in conformance ActivitySummaryFetcher()
{
  uint64_t *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v4;

  *(_QWORD *)(v1 + 16) = v1;
  v4 = *v0;
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 24) = v2;
  *v2 = *(_QWORD *)(v1 + 16);
  v2[1] = protocol witness for QuantityFetching.query(start:end:) in conformance HealthKitFetcher;
  return ActivitySummaryFetcher.query()(v4);
}

id @nonobjc NSNumber.init(value:)(char a1)
{
  void *v1;

  return objc_msgSend(v1, sel_initWithBool_, a1 & 1);
}

id @nonobjc HKActivitySummaryQuery.init(predicate:resultsHandler:)(void *a1, uint64_t a2, uint64_t a3)
{
  id v4;
  const void *v5;
  id v7;
  uint64_t aBlock;
  int v9;
  int v10;
  uint64_t (*v11)(uint64_t, void *, void *, void *);
  void *v12;
  uint64_t v13;
  uint64_t v14;

  v13 = a2;
  v14 = a3;
  aBlock = MEMORY[0x24BDAC760];
  v9 = 1107296256;
  v10 = 0;
  v11 = thunk for @escaping @callee_guaranteed (@guaranteed HKActivitySummaryQuery, @guaranteed [HKActivitySummary]?, @guaranteed Error?) -> ();
  v12 = &block_descriptor_4;
  v5 = _Block_copy(&aBlock);
  v7 = objc_msgSend(v4, sel_initWithPredicate_resultsHandler_, a1);
  _Block_release(v5);
  swift_release();

  return v7;
}

uint64_t thunk for @escaping @callee_guaranteed (@guaranteed HKActivitySummaryQuery, @guaranteed [HKActivitySummary]?, @guaranteed Error?) -> ()(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v4;
  id v5;
  id v6;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void (*v12)(void *, uint64_t);

  v12 = *(void (**)(void *, uint64_t))(a1 + 32);
  swift_retain();
  v4 = a2;
  v5 = a3;
  if (a3)
  {
    type metadata accessor for HKActivitySummary();
    v9 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    v10 = v9;
  }
  else
  {
    v10 = 0;
  }
  v6 = a4;
  if (a4)
    v8 = a4;
  else
    v8 = 0;
  v12(a2, v10);

  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t sub_2474F8510()
{
  return swift_deallocObject();
}

uint64_t sub_2474F8538()
{
  return swift_deallocObject();
}

uint64_t sub_2474F8560()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2474F859C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2474F85D8()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 24));
  return swift_deallocObject();
}

uint64_t partial apply for @objc closure #1 in GetActivitySummaryIntentHandler.handle(intent:)()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  const void *v4;
  void *v5;
  void *v6;

  *(_QWORD *)(v1 + 16) = v1;
  v6 = (void *)v0[2];
  v4 = (const void *)v0[3];
  v5 = (void *)v0[4];
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 24) = v2;
  *v2 = *(_QWORD *)(v1 + 16);
  v2[1] = _sIeghH_IeAgH_TRTQ0_;
  return ((uint64_t (*)(void *, const void *, void *))((char *)&async function pointer to @objc closure #1 in GetActivitySummaryIntentHandler.handle(intent:)
                                                               + async function pointer to @objc closure #1 in GetActivitySummaryIntentHandler.handle(intent:)))(v6, v4, v5);
}

unint64_t lazy protocol witness table accessor for type Calendar.Component and conformance Calendar.Component()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type Calendar.Component and conformance Calendar.Component;
  if (!lazy protocol witness table cache variable for type Calendar.Component and conformance Calendar.Component)
  {
    v0 = type metadata accessor for Calendar.Component();
    v1 = MEMORY[0x24957D92C](MEMORY[0x24BDCF2A8], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type Calendar.Component and conformance Calendar.Component);
    return v1;
  }
  return v3;
}

unint64_t lazy protocol witness table accessor for type HKWheelchairUse and conformance HKWheelchairUse()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type HKWheelchairUse and conformance HKWheelchairUse;
  if (!lazy protocol witness table cache variable for type HKWheelchairUse and conformance HKWheelchairUse)
  {
    v0 = type metadata accessor for HKWheelchairUse();
    v1 = MEMORY[0x24957D92C](&protocol conformance descriptor for HKWheelchairUse, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type HKWheelchairUse and conformance HKWheelchairUse);
    return v1;
  }
  return v3;
}

void partial apply for closure #1 in ActivitySummaryFetcher.query()(uint64_t a1)
{
  uint64_t v1;

  closure #1 in ActivitySummaryFetcher.query()(a1, *(void **)(v1 + 16), *(_BYTE *)(v1 + 24) & 1, *(void **)(v1 + 32), *(void **)(v1 + 40), *(void **)(v1 + 48), *(void **)(v1 + 56));
}

uint64_t type metadata accessor for GetActivitySummaryIntentHandler()
{
  return objc_opt_self();
}

ValueMetadata *type metadata accessor for ActivitySummaryFetcher()
{
  return &type metadata for ActivitySummaryFetcher;
}

unint64_t type metadata accessor for HKActivitySummaryQuery()
{
  unint64_t ObjCClassMetadata;
  uint64_t v2;

  v2 = lazy cache variable for type metadata for HKActivitySummaryQuery;
  if (!lazy cache variable for type metadata for HKActivitySummaryQuery)
  {
    objc_opt_self();
    ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for HKActivitySummaryQuery);
    return ObjCClassMetadata;
  }
  return v2;
}

uint64_t sub_2474F886C()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<GetAcitivitySummaryIntentResponse, Error>)
                 - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v4 = (v2 + *(_QWORD *)(v1 + 64) + 8) & 0xFFFFFFFFFFFFFFF8;
  v5 = (v4 + 15) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(unint64_t))(v1 + 8))(v0 + v2);

  return swift_deallocObject();
}

void partial apply for closure #1 in closure #1 in ActivitySummaryFetcher.query()(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;

  v4 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<GetAcitivitySummaryIntentResponse, Error>)
                 - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = v5 + *(_QWORD *)(v4 + 64);
  closure #1 in closure #1 in ActivitySummaryFetcher.query()(a1, a2, a3, v3 + v5, *(_BYTE *)(v3 + v6) & 1, *(_QWORD *)(v3 + ((v6 + 8) & 0xFFFFFFFFFFFFFFF8)), *(void **)(v3 + ((((v6 + 8) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)), *(void **)(v3 + ((((((v6 + 8) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)));
}

uint64_t block_copy_helper_2(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a2 + 32);
  v5 = *(_QWORD *)(a2 + 40);
  swift_retain();
  result = a1;
  *(_QWORD *)(a1 + 32) = v4;
  *(_QWORD *)(a1 + 40) = v5;
  return result;
}

uint64_t block_destroy_helper_2()
{
  return swift_release();
}

unint64_t type metadata accessor for HKActivitySummary()
{
  unint64_t ObjCClassMetadata;
  uint64_t v2;

  v2 = lazy cache variable for type metadata for HKActivitySummary;
  if (!lazy cache variable for type metadata for HKActivitySummary)
  {
    objc_opt_self();
    ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for HKActivitySummary);
    return ObjCClassMetadata;
  }
  return v2;
}

uint64_t sub_2474F8AB0()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t sub_2474F8AEC()
{
  return swift_deallocObject();
}

uint64_t sub_2474F8B14()
{
  return swift_deallocObject();
}

uint64_t sub_2474F8B3C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2474F8B78()
{
  swift_release();
  return swift_deallocObject();
}

unint64_t type metadata accessor for NSUnitEnergy()
{
  unint64_t ObjCClassMetadata;
  uint64_t v2;

  v2 = lazy cache variable for type metadata for NSUnitEnergy;
  if (!lazy cache variable for type metadata for NSUnitEnergy)
  {
    objc_opt_self();
    ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for NSUnitEnergy);
    return ObjCClassMetadata;
  }
  return v2;
}

unint64_t lazy protocol witness table accessor for type [HKActivitySummary] and conformance [A]()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type [HKActivitySummary] and conformance [A];
  if (!lazy protocol witness table cache variable for type [HKActivitySummary] and conformance [A])
  {
    v0 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [HKActivitySummary]);
    v1 = MEMORY[0x24957D92C](MEMORY[0x24BEE12E0], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type [HKActivitySummary] and conformance [A]);
    return v1;
  }
  return v3;
}

uint64_t sub_2474F8C88()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t sub_2474F8CC4()
{
  return swift_deallocObject();
}

uint64_t sub_2474F8CEC()
{
  return swift_deallocObject();
}

uint64_t sub_2474F8D14()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2474F8D50()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t PeriodFlow.init(rawValue:)(uint64_t a1)
{
  switch(a1)
  {
    case 0:
      return 0;
    case 1:
      return 1;
    case 2:
      return 2;
    case 3:
      return 3;
    case 4:
      return 4;
    case 5:
      return 5;
  }
  return 0;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PeriodFlow()
{
  lazy protocol witness table accessor for type PeriodFlow and conformance PeriodFlow();
  return == infix<A>(_:_:)() & 1;
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance PeriodFlow()
{
  lazy protocol witness table accessor for type PeriodFlow and conformance PeriodFlow();
  return RawRepresentable<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PeriodFlow()
{
  lazy protocol witness table accessor for type PeriodFlow and conformance PeriodFlow();
  return RawRepresentable<>.hash(into:)();
}

uint64_t protocol witness for Hashable._rawHashValue(seed:) in conformance PeriodFlow()
{
  lazy protocol witness table accessor for type PeriodFlow and conformance PeriodFlow();
  return RawRepresentable<>._rawHashValue(seed:)();
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance PeriodFlow@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  char v3;

  result = PeriodFlow.init(rawValue:)(*a1);
  *(_QWORD *)a2 = result;
  *(_BYTE *)(a2 + 8) = v3 & 1;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance PeriodFlow(_QWORD *a1@<X8>)
{
  uint64_t v1;

  PeriodFlow.rawValue.getter();
  *a1 = v1;
}

id static PeriodFlowResolutionResult.success(with:)()
{
  uint64_t v0;
  id ObjCClassFromMetadata;

  ObjCClassFromMetadata = (id)swift_getObjCClassFromMetadata();
  PeriodFlow.rawValue.getter();
  return objc_msgSend(ObjCClassFromMetadata, sel_successWithResolvedValue_, v0);
}

id static PeriodFlowResolutionResult.confirmationRequired(with:)()
{
  uint64_t v0;
  id ObjCClassFromMetadata;

  ObjCClassFromMetadata = (id)swift_getObjCClassFromMetadata();
  PeriodFlow.rawValue.getter();
  return objc_msgSend(ObjCClassFromMetadata, sel_confirmationRequiredWithValueToConfirm_, v0);
}

id PeriodFlowResolutionResult.__allocating_init(JSONDictionary:intent:)(uint64_t a1, void *a2)
{
  objc_class *v2;
  id v4;
  Class isa;
  id v7;

  v4 = objc_allocWithZone(v2);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  v7 = objc_msgSend(v4, sel_initWithJSONDictionary_forIntent_);

  swift_bridgeObjectRelease();
  return v7;
}

id PeriodFlowResolutionResult.init(JSONDictionary:intent:)(uint64_t a1, void *a2)
{
  id v2;
  Class isa;
  id v7;
  objc_super v8;
  void *v9;
  uint64_t v10;
  id v11;

  v11 = 0;
  v10 = a1;
  v9 = a2;
  swift_bridgeObjectRetain();
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v8.receiver = 0;
  v8.super_class = (Class)type metadata accessor for PeriodFlowResolutionResult();
  v7 = objc_msgSendSuper2(&v8, sel_initWithJSONDictionary_forIntent_, isa, a2);

  if (v7)
  {
    v2 = v7;
    v11 = v7;

    swift_bridgeObjectRelease();
    return v7;
  }
  else
  {

    swift_bridgeObjectRelease();
    return 0;
  }
}

uint64_t type metadata accessor for PeriodFlowResolutionResult()
{
  return objc_opt_self();
}

id PeriodFlowResolutionResult.__deallocating_deinit()
{
  void *v0;
  objc_super v2;
  void *v3;

  v3 = v0;
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for PeriodFlowResolutionResult();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

unint64_t base witness table accessor for Equatable in PeriodFlow()
{
  return lazy protocol witness table accessor for type PeriodFlow and conformance PeriodFlow();
}

unint64_t lazy protocol witness table accessor for type PeriodFlow and conformance PeriodFlow()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type PeriodFlow and conformance PeriodFlow;
  if (!lazy protocol witness table cache variable for type PeriodFlow and conformance PeriodFlow)
  {
    v0 = MEMORY[0x24957D92C](&protocol conformance descriptor for PeriodFlow, &type metadata for PeriodFlow);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type PeriodFlow and conformance PeriodFlow);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type PeriodFlow and conformance PeriodFlow;
  if (!lazy protocol witness table cache variable for type PeriodFlow and conformance PeriodFlow)
  {
    v0 = MEMORY[0x24957D92C](&protocol conformance descriptor for PeriodFlow, &type metadata for PeriodFlow);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type PeriodFlow and conformance PeriodFlow);
    return v0;
  }
  return v2;
}

ValueMetadata *type metadata accessor for PeriodFlow()
{
  return &type metadata for PeriodFlow;
}

SiriWellnessIntents::WellnessAttribute_optional __swiftcall WellnessAttribute.init(rawValue:)(Swift::String rawValue)
{
  uint64_t v1;
  uint64_t v2;
  Swift::Int v6;
  SiriWellnessIntents::WellnessAttribute_optional v7;

  v1 = _allocateUninitializedArray<A>(_:)();
  *(_QWORD *)v2 = "completed";
  *(_QWORD *)(v2 + 8) = 9;
  *(_BYTE *)(v2 + 16) = 2;
  *(_QWORD *)(v2 + 24) = "distance";
  *(_QWORD *)(v2 + 32) = 8;
  *(_BYTE *)(v2 + 40) = 2;
  *(_QWORD *)(v2 + 48) = "duration";
  *(_QWORD *)(v2 + 56) = 8;
  *(_BYTE *)(v2 + 64) = 2;
  *(_QWORD *)(v2 + 72) = "start";
  *(_QWORD *)(v2 + 80) = 5;
  *(_BYTE *)(v2 + 88) = 2;
  *(_QWORD *)(v2 + 96) = "stop";
  *(_QWORD *)(v2 + 104) = 4;
  *(_BYTE *)(v2 + 112) = 2;
  _finalizeUninitializedArray<A>(_:)();
  v6 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)v1, rawValue);
  swift_bridgeObjectRelease();
  switch(v6)
  {
    case 0:
      v7.value = SiriWellnessIntents_WellnessAttribute_completed;
LABEL_12:
      swift_bridgeObjectRelease();
      return v7;
    case 1:
      v7.value = SiriWellnessIntents_WellnessAttribute_distance;
      goto LABEL_12;
    case 2:
      v7.value = SiriWellnessIntents_WellnessAttribute_duration;
      goto LABEL_12;
    case 3:
      v7.value = SiriWellnessIntents_WellnessAttribute_start;
      goto LABEL_12;
    case 4:
      v7.value = SiriWellnessIntents_WellnessAttribute_stop;
      goto LABEL_12;
  }
  swift_bridgeObjectRelease();
  return (SiriWellnessIntents::WellnessAttribute_optional)5;
}

void WellnessAttribute.rawValue.getter(char a1)
{
  __asm { BR              X8 }
}

uint64_t sub_2474F9780()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("completed", 9uLL, 1)._countAndFlagsBits;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance WellnessAttribute()
{
  lazy protocol witness table accessor for type WellnessAttribute and conformance WellnessAttribute();
  return == infix<A>(_:_:)() & 1;
}

unint64_t base witness table accessor for Equatable in WellnessAttribute()
{
  return lazy protocol witness table accessor for type WellnessAttribute and conformance WellnessAttribute();
}

unint64_t lazy protocol witness table accessor for type WellnessAttribute and conformance WellnessAttribute()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type WellnessAttribute and conformance WellnessAttribute;
  if (!lazy protocol witness table cache variable for type WellnessAttribute and conformance WellnessAttribute)
  {
    v0 = MEMORY[0x24957D92C](&protocol conformance descriptor for WellnessAttribute, &type metadata for WellnessAttribute);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type WellnessAttribute and conformance WellnessAttribute);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type WellnessAttribute and conformance WellnessAttribute;
  if (!lazy protocol witness table cache variable for type WellnessAttribute and conformance WellnessAttribute)
  {
    v0 = MEMORY[0x24957D92C](&protocol conformance descriptor for WellnessAttribute, &type metadata for WellnessAttribute);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type WellnessAttribute and conformance WellnessAttribute);
    return v0;
  }
  return v2;
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance WellnessAttribute()
{
  lazy protocol witness table accessor for type WellnessAttribute and conformance WellnessAttribute();
  return RawRepresentable<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance WellnessAttribute()
{
  lazy protocol witness table accessor for type WellnessAttribute and conformance WellnessAttribute();
  return RawRepresentable<>.hash(into:)();
}

uint64_t protocol witness for Hashable._rawHashValue(seed:) in conformance WellnessAttribute()
{
  lazy protocol witness table accessor for type WellnessAttribute and conformance WellnessAttribute();
  return RawRepresentable<>._rawHashValue(seed:)();
}

SiriWellnessIntents::WellnessAttribute_optional protocol witness for RawRepresentable.init(rawValue:) in conformance WellnessAttribute@<W0>(Swift::String *a1@<X0>, SiriWellnessIntents::WellnessAttribute_optional *a2@<X8>)
{
  SiriWellnessIntents::WellnessAttribute_optional result;

  result.value = WellnessAttribute.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance WellnessAttribute(_QWORD *a1@<X8>)
{
  char *v1;
  uint64_t v2;
  uint64_t v3;

  WellnessAttribute.rawValue.getter(*v1);
  *a1 = v2;
  a1[1] = v3;
}

uint64_t getEnumTagSinglePayload for WellnessAttribute(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v5;
  int v6;
  unsigned int v7;
  int v8;

  if (a2)
  {
    if (a2 <= 0xFB)
      goto LABEL_15;
    v7 = ((a2 + 4) >> 8) + 1;
    v8 = 1;
    if (v7 >= 0x100)
    {
      if (v7 >= 0x10000)
        v2 = 4;
      else
        v2 = 2;
      v8 = v2;
    }
    if (v8 == 1)
      v6 = a1[1];
    else
      v6 = v8 == 2 ? *(unsigned __int16 *)(a1 + 1) : *(_DWORD *)(a1 + 1);
    if (v6)
    {
      v5 = (*a1 | ((v6 - 1) << 8)) + 251;
    }
    else
    {
LABEL_15:
      v3 = *a1 - 5;
      if (v3 < 0)
        v3 = -1;
      v5 = v3;
    }
  }
  else
  {
    v5 = -1;
  }
  return (v5 + 1);
}

_BYTE *storeEnumTagSinglePayload for WellnessAttribute(_BYTE *result, unsigned int a2, unsigned int a3)
{
  int v3;
  unsigned int v4;
  unsigned int v5;
  int v6;
  int v7;

  v7 = 0;
  if (a3 > 0xFB)
  {
    v5 = ((a3 + 4) >> 8) + 1;
    v6 = 1;
    if (v5 >= 0x100)
    {
      if (v5 >= 0x10000)
        v3 = 4;
      else
        v3 = 2;
      v6 = v3;
    }
    v7 = v6;
  }
  if (a2 > 0xFB)
  {
    v4 = ((a2 - 252) >> 8) + 1;
    *result = a2 + 4;
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = v4;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = v4;
      }
      else
      {
        *(_DWORD *)(result + 1) = v4;
      }
    }
  }
  else
  {
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = 0;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = 0;
      }
      else
      {
        *(_DWORD *)(result + 1) = 0;
      }
    }
    if (a2)
      *result = a2 + 4;
  }
  return result;
}

uint64_t getEnumTag for WellnessAttribute(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *destructiveInjectEnumTag for WellnessAttribute(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

ValueMetadata *type metadata accessor for WellnessAttribute()
{
  return &type metadata for WellnessAttribute;
}

id LogSpecificMedicationsIntentHandler.__allocating_init(storage:)(_QWORD *a1)
{
  objc_class *v1;
  id v2;

  v2 = objc_allocWithZone(v1);
  return LogSpecificMedicationsIntentHandler.init(storage:)(a1);
}

id LogSpecificMedicationsIntentHandler.init(storage:)(_QWORD *a1)
{
  void *v1;
  id v2;
  id v3;
  uint64_t v4;
  id v5;
  id v7;
  char *v8;
  objc_class *ObjectType;
  objc_super v11;
  _QWORD v12[5];
  _QWORD __dst[6];
  id v14;

  ObjectType = (objc_class *)swift_getObjectType();
  __dst[5] = a1;
  v2 = v1;
  v14 = v1;
  outlined init with copy of QuantityPersisting?(a1, v12);
  if (v12[3])
  {
    outlined init with take of QuantityPersisting(v12, __dst);
  }
  else
  {
    v3 = MedsUndoer.init()();
    __dst[3] = &type metadata for SpecificMedicationsPersistor;
    __dst[4] = &protocol witness table for SpecificMedicationsPersistor;
    __dst[0] = v3;
    __dst[1] = v4;
    outlined destroy of QuantityPersisting?((uint64_t)v12);
  }
  outlined init with take of QuantityPersisting(__dst, &v8[OBJC_IVAR____TtC19SiriWellnessIntents35LogSpecificMedicationsIntentHandler_storage]);

  v11.receiver = v14;
  v11.super_class = ObjectType;
  v7 = objc_msgSendSuper2(&v11, sel_init);
  v5 = v7;
  v14 = v7;
  outlined destroy of QuantityPersisting?((uint64_t)a1);

  return v7;
}

uint64_t LogSpecificMedicationsIntentHandler.handle(intent:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)(v2 + 712) = v1;
  *(_QWORD *)(v2 + 704) = a1;
  *(_QWORD *)(v2 + 408) = v2;
  *(_QWORD *)(v2 + 416) = 0;
  *(_QWORD *)(v2 + 424) = 0;
  *(_BYTE *)(v2 + 1016) = 0;
  *(_QWORD *)(v2 + 344) = 0;
  *(_QWORD *)(v2 + 352) = 0;
  *(_QWORD *)(v2 + 592) = 0;
  *(_QWORD *)(v2 + 392) = 0;
  *(_QWORD *)(v2 + 400) = 0;
  v3 = type metadata accessor for Date();
  *(_QWORD *)(v2 + 720) = v3;
  *(_QWORD *)(v2 + 728) = *(_QWORD *)(v3 - 8);
  *(_QWORD *)(v2 + 736) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  *(_QWORD *)(v2 + 744) = swift_task_alloc();
  *(_QWORD *)(v2 + 752) = swift_task_alloc();
  v4 = type metadata accessor for Logger();
  *(_QWORD *)(v2 + 760) = v4;
  *(_QWORD *)(v2 + 768) = *(_QWORD *)(v4 - 8);
  *(_QWORD *)(v2 + 776) = swift_task_alloc();
  *(_QWORD *)(v2 + 784) = swift_task_alloc();
  *(_QWORD *)(v2 + 792) = swift_task_alloc();
  *(_QWORD *)(v2 + 800) = swift_task_alloc();
  *(_QWORD *)(v2 + 808) = swift_task_alloc();
  *(_QWORD *)(v2 + 816) = swift_task_alloc();
  *(_QWORD *)(v2 + 824) = swift_task_alloc();
  *(_QWORD *)(v2 + 416) = a1;
  *(_QWORD *)(v2 + 424) = v1;
  return swift_task_switch();
}

{
  uint64_t *v1;
  uint64_t v3;

  v3 = *v1;
  *(_QWORD *)(v3 + 408) = *v1;
  *(_QWORD *)(v3 + 936) = a1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_task_switch();
}

{
  uint64_t *v1;
  uint64_t v3;

  v3 = *v1;
  *(_QWORD *)(v3 + 408) = *v1;
  *(_QWORD *)(v3 + 976) = a1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_task_switch();
}

{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v5 = *v1;
  v4 = *(_QWORD *)(*v1 + 752);
  v3 = *(_QWORD *)(*v1 + 744);
  *(_QWORD *)(v5 + 408) = *v1;
  *(_QWORD *)(v5 + 1008) = a1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of Date?(v3);
  outlined destroy of Date?(v4);
  return swift_task_switch();
}

uint64_t LogSpecificMedicationsIntentHandler.handle(intent:)()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t, uint64_t, uint64_t);
  void (*v3)(uint64_t, uint64_t);
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint8_t *buf;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint32_t v22;
  os_log_type_t v23;
  NSObject *v24;
  uint64_t v25;

  v1 = *(_QWORD *)(v0 + 824);
  v19 = *(_QWORD *)(v0 + 768);
  v21 = *(_QWORD *)(v0 + 760);
  *(_QWORD *)(v0 + 408) = v0;
  v20 = Logger.wellnessIntents.unsafeMutableAddressor();
  swift_beginAccess();
  v2 = *(void (**)(uint64_t, uint64_t, uint64_t))(v19 + 16);
  *(_QWORD *)(v0 + 832) = v2;
  v2(v1, v20, v21);
  swift_endAccess();
  v24 = Logger.logObject.getter();
  v23 = static os_log_type_t.debug.getter();
  *(_QWORD *)(v0 + 432) = 2;
  *(_QWORD *)(v0 + 840) = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  *(_QWORD *)(v0 + 848) = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  *(_QWORD *)(v0 + 856) = lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  v22 = *(_DWORD *)(v0 + 1020);
  *(_QWORD *)(v0 + 864) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
  v25 = _allocateUninitializedArray<A>(_:)();
  if (os_log_type_enabled(v24, v23))
  {
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    v15 = createStorage<A>(capacity:type:)(0);
    v16 = createStorage<A>(capacity:type:)(0);
    *(_QWORD *)(v18 + 672) = buf;
    *(_QWORD *)(v18 + 680) = v15;
    *(_QWORD *)(v18 + 688) = v16;
    serialize(_:at:)(0, (_BYTE **)(v18 + 672));
    serialize(_:at:)(0, (_BYTE **)(v18 + 672));
    *(_QWORD *)(v18 + 696) = v25;
    v17 = (_QWORD *)swift_task_alloc();
    v17[2] = v18 + 672;
    v17[3] = v18 + 680;
    v17[4] = v18 + 688;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
    lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
    Sequence.forEach(_:)();
    swift_task_dealloc();
    _os_log_impl(&dword_24749F000, v24, v23, "Checking authorization for medications...", buf, v22);
    destroyStorage<A>(_:count:)(v15, 0, v13);
    destroyStorage<A>(_:count:)(v16, 0, MEMORY[0x24BEE4AD8] + 8);
    MEMORY[0x24957D398](buf, MEMORY[0x24BEE4260]);
  }
  swift_bridgeObjectRelease();
  *(_QWORD *)(v18 + 872) = 0;
  v7 = *(_QWORD *)(v18 + 824);
  v6 = *(_QWORD *)(v18 + 768);
  v8 = *(_QWORD *)(v18 + 760);
  v9 = *(_QWORD *)(v18 + 712);

  v3 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  *(_QWORD *)(v18 + 880) = v3;
  v3(v7, v8);
  outlined init with copy of QuantityPersisting(v9 + OBJC_IVAR____TtC19SiriWellnessIntents35LogSpecificMedicationsIntentHandler_storage, v18 + 16);
  v12 = *(_QWORD *)(v18 + 40);
  v10 = *(_QWORD *)(v18 + 48);
  __swift_project_boxed_opaque_existential_1((_QWORD *)(v18 + 16), v12);
  v11 = (uint64_t (*)(uint64_t, uint64_t))(*(_QWORD *)(v10 + 8) + **(int **)(v10 + 8));
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v18 + 888) = v4;
  *v4 = *(_QWORD *)(v18 + 408);
  v4[1] = LogSpecificMedicationsIntentHandler.handle(intent:);
  return v11(v12, v10);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  id v4;
  void *v5;
  void *v6;
  id v7;
  objc_class *v8;
  id v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  id v19;
  id v20;
  _QWORD *v21;
  id v22;
  uint64_t v23;
  id v24;
  id v25;
  _QWORD *v26;
  uint64_t v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  _QWORD *v33;
  id v34;
  id v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void (*v43)(uint64_t, uint64_t);
  uint64_t v44;
  uint8_t *v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  void (*v51)(uint64_t, uint64_t, uint64_t);
  uint32_t v52;
  os_log_type_t v53;
  NSObject *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void (*v58)(uint64_t, uint64_t);
  uint64_t v59;
  uint8_t *v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  void (*v66)(uint64_t, uint64_t, uint64_t);
  uint32_t v67;
  os_log_type_t v68;
  NSObject *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  id v74;
  id v75;
  uint64_t v76;
  uint64_t v77;
  id v78;
  id v79;
  unsigned __int8 v80;
  char v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  id v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  void (*v93)(uint64_t, uint64_t);
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  id v97;
  id v98;
  uint64_t v99;
  uint8_t *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  void (*v105)(uint64_t, uint64_t, uint64_t);
  id v106;
  uint32_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  _QWORD *v140;
  NSObject *v141;
  os_log_type_t v142;
  uint64_t v143;
  id v144;
  unsigned __int8 v145;
  char v146;
  id v147;
  unsigned __int8 v148;
  char v149;
  uint64_t v150;
  uint64_t v151;
  id v152;
  id v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  void (*v158)(uint64_t, uint64_t);
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  id v162;
  id v163;
  uint64_t v164;
  uint8_t *v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  void (*v170)(uint64_t, uint64_t, uint64_t);
  id v171;
  uint32_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  _QWORD *v200;
  os_log_t log;
  os_log_type_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  id v207;
  uint64_t v208;
  uint64_t v209;
  void (*v210)(uint64_t, uint64_t);
  char *v211;
  char *v212;
  uint64_t v213;
  uint8_t *v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  void (*v219)(uint64_t, uint64_t, uint64_t);
  uint32_t size;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  _QWORD *v226;
  NSObject *oslog;
  os_log_type_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  id v234;
  id v235;
  char v236;
  uint64_t v237;
  uint64_t v238;
  id v239;
  id v240;
  uint64_t v241;
  uint64_t v242;
  id v243;
  uint64_t v244;
  uint64_t v245;
  char v246;
  id v247;
  Class isa;
  uint64_t v249;
  uint64_t v250;
  id v251;
  id v252;
  unsigned __int8 v253;
  char v254;
  uint64_t v255;
  uint64_t v256;
  void (*v257)(uint64_t, uint64_t);
  id v258;
  uint64_t v259;
  uint64_t v260;
  uint8_t *buf;
  uint64_t v262;
  uint64_t v263;
  _QWORD *v264;
  uint64_t v265;
  uint64_t v266;
  void (*v267)(uint64_t, uint64_t, uint64_t);
  uint32_t v268;
  os_log_type_t v269;
  NSObject *v270;
  uint64_t v271;
  uint64_t v272;
  char v273;
  uint8_t *v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t (*v277)(uint64_t, uint64_t, uint64_t);
  uint64_t v278;
  uint8_t *v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t (*v282)(uint64_t, uint64_t, uint64_t);
  uint64_t v283;
  uint8_t *v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t (*v287)(uint64_t, uint64_t, uint64_t);
  uint64_t v288;
  id v289;
  id v290;
  char v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;

  v273 = *(_BYTE *)(v0 + 1018);
  *(_QWORD *)(v0 + 408) = v0;
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  if ((v273 & 1) == 0)
  {
    v51 = *(void (**)(uint64_t, uint64_t, uint64_t))(v272 + 832);
    v39 = *(_QWORD *)(v272 + 776);
    v50 = *(_QWORD *)(v272 + 760);
    v49 = Logger.wellnessIntents.unsafeMutableAddressor();
    swift_beginAccess();
    v51(v39, v49, v50);
    swift_endAccess();
    v54 = Logger.logObject.getter();
    v53 = static os_log_type_t.error.getter();
    *(_QWORD *)(v272 + 440) = 2;
    UnsignedInteger<>.init<A>(_:)();
    v52 = *(_DWORD *)(v272 + 1024);
    v55 = _allocateUninitializedArray<A>(_:)();
    if (os_log_type_enabled(v54, v53))
    {
      v40 = *(_QWORD *)(v272 + 872);
      v45 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      v44 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      v46 = createStorage<A>(capacity:type:)(0);
      v47 = createStorage<A>(capacity:type:)(0);
      *(_QWORD *)(v272 + 448) = v45;
      *(_QWORD *)(v272 + 456) = v46;
      *(_QWORD *)(v272 + 464) = v47;
      serialize(_:at:)(0, (_BYTE **)(v272 + 448));
      serialize(_:at:)(0, (_BYTE **)(v272 + 448));
      *(_QWORD *)(v272 + 472) = v55;
      v48 = (_QWORD *)swift_task_alloc();
      v48[2] = v272 + 448;
      v48[3] = v272 + 456;
      v48[4] = v272 + 464;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
      lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
      result = Sequence.forEach(_:)();
      if (v40)
        return result;
      swift_task_dealloc();
      _os_log_impl(&dword_24749F000, v54, v53, "Not authorized to write medications data.", v45, v52);
      destroyStorage<A>(_:count:)(v46, 0, v44);
      destroyStorage<A>(_:count:)(v47, 0, MEMORY[0x24BEE4AD8] + 8);
      MEMORY[0x24957D398](v45, MEMORY[0x24BEE4260]);
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    v43 = *(void (**)(uint64_t, uint64_t))(v272 + 880);
    v41 = *(_QWORD *)(v272 + 776);
    v42 = *(_QWORD *)(v272 + 760);

    v43(v41, v42);
    type metadata accessor for LogSpecificMedicationsIntentResponse();
    v212 = LogSpecificMedicationsIntentResponse.__allocating_init(code:userActivity:)(101, 0);
LABEL_115:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(char *))(*(_QWORD *)(v272 + 408) + 8))(v212);
  }
  v267 = *(void (**)(uint64_t, uint64_t, uint64_t))(v272 + 832);
  v1 = *(_QWORD *)(v272 + 816);
  v266 = *(_QWORD *)(v272 + 760);
  v265 = Logger.wellnessIntents.unsafeMutableAddressor();
  swift_beginAccess();
  v267(v1, v265, v266);
  swift_endAccess();
  v270 = Logger.logObject.getter();
  v269 = static os_log_type_t.debug.getter();
  *(_QWORD *)(v272 + 480) = 2;
  UnsignedInteger<>.init<A>(_:)();
  v268 = *(_DWORD *)(v272 + 1028);
  v271 = _allocateUninitializedArray<A>(_:)();
  if (os_log_type_enabled(v270, v269))
  {
    v2 = *(_QWORD *)(v272 + 872);
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    v260 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    v262 = createStorage<A>(capacity:type:)(0);
    v263 = createStorage<A>(capacity:type:)(0);
    *(_QWORD *)(v272 + 640) = buf;
    *(_QWORD *)(v272 + 648) = v262;
    *(_QWORD *)(v272 + 656) = v263;
    serialize(_:at:)(0, (_BYTE **)(v272 + 640));
    serialize(_:at:)(0, (_BYTE **)(v272 + 640));
    *(_QWORD *)(v272 + 664) = v271;
    v264 = (_QWORD *)swift_task_alloc();
    v264[2] = v272 + 640;
    v264[3] = v272 + 648;
    v264[4] = v272 + 656;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
    lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
    result = Sequence.forEach(_:)();
    if (v2)
      return result;
    swift_task_dealloc();
    _os_log_impl(&dword_24749F000, v270, v269, "Authorization check successful for medications!", buf, v268);
    destroyStorage<A>(_:count:)(v262, 0, v260);
    destroyStorage<A>(_:count:)(v263, 0, MEMORY[0x24BEE4AD8] + 8);
    MEMORY[0x24957D398](buf, MEMORY[0x24BEE4260]);
    swift_bridgeObjectRelease();
    v259 = 0;
  }
  else
  {
    swift_bridgeObjectRelease();
    v259 = *(_QWORD *)(v272 + 872);
  }
  v257 = *(void (**)(uint64_t, uint64_t))(v272 + 880);
  v255 = *(_QWORD *)(v272 + 816);
  v256 = *(_QWORD *)(v272 + 760);
  v258 = *(id *)(v272 + 704);

  v257(v255, v256);
  *(_QWORD *)(v272 + 488) = objc_msgSend(v258, sel_medStatus);
  if (*(_QWORD *)(v272 + 488))
  {
    v252 = *(id *)(v272 + 488);
    v4 = v252;
    outlined destroy of HealthKitPersistor((id *)(v272 + 488));
    v253 = objc_msgSend(v252, sel_BOOLValue);

    v254 = v253 & 1;
  }
  else
  {
    outlined destroy of HealthKitPersistor((id *)(v272 + 488));
    v254 = 2;
  }
  if (v254 == 2)
  {
    v66 = *(void (**)(uint64_t, uint64_t, uint64_t))(v272 + 832);
    v38 = *(_QWORD *)(v272 + 784);
    v65 = *(_QWORD *)(v272 + 760);
    v64 = Logger.wellnessIntents.unsafeMutableAddressor();
    swift_beginAccess();
    v66(v38, v64, v65);
    swift_endAccess();
    v69 = Logger.logObject.getter();
    v68 = static os_log_type_t.error.getter();
    *(_QWORD *)(v272 + 496) = 2;
    UnsignedInteger<>.init<A>(_:)();
    v67 = *(_DWORD *)(v272 + 1032);
    v70 = _allocateUninitializedArray<A>(_:)();
    if (os_log_type_enabled(v69, v68))
    {
      v60 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      v59 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      v61 = createStorage<A>(capacity:type:)(0);
      v62 = createStorage<A>(capacity:type:)(0);
      *(_QWORD *)(v272 + 504) = v60;
      *(_QWORD *)(v272 + 512) = v61;
      *(_QWORD *)(v272 + 520) = v62;
      serialize(_:at:)(0, (_BYTE **)(v272 + 504));
      serialize(_:at:)(0, (_BYTE **)(v272 + 504));
      *(_QWORD *)(v272 + 528) = v70;
      v63 = (_QWORD *)swift_task_alloc();
      v63[2] = v272 + 504;
      v63[3] = v272 + 512;
      v63[4] = v272 + 520;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
      lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
      result = Sequence.forEach(_:)();
      if (v259)
        return result;
      swift_task_dealloc();
      _os_log_impl(&dword_24749F000, v69, v68, "Unable to extract BOOLean value for medStatusTaken from LogSpecificMedicationsIntent.", v60, v67);
      destroyStorage<A>(_:count:)(v61, 0, v59);
      destroyStorage<A>(_:count:)(v62, 0, MEMORY[0x24BEE4AD8] + 8);
      MEMORY[0x24957D398](v60, MEMORY[0x24BEE4260]);
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    v58 = *(void (**)(uint64_t, uint64_t))(v272 + 880);
    v56 = *(_QWORD *)(v272 + 784);
    v57 = *(_QWORD *)(v272 + 760);

    v58(v56, v57);
    type metadata accessor for LogSpecificMedicationsIntentResponse();
    v212 = LogSpecificMedicationsIntentResponse.__allocating_init(code:userActivity:)(5, 0);
    goto LABEL_115;
  }
  v5 = *(void **)(v272 + 704);
  *(_BYTE *)(v272 + 1016) = v254 & 1;
  v251 = objc_msgSend(v5, sel_medicationIDs);
  if (v251)
  {
    v249 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    v250 = v249;
  }
  else
  {
    v250 = 0;
  }
  *(_QWORD *)(v272 + 896) = v250;
  if (!v250)
    goto LABEL_50;
  v6 = *(void **)(v272 + 704);
  *(_QWORD *)(v272 + 592) = v250;
  v247 = objc_msgSend(v6, sel_logAsNeeded);
  v7 = v247;
  type metadata accessor for NSNumber();
  isa = NSNumber.init(BOOLeanLiteral:)(1).super.super.isa;
  v8 = isa;
  *(_QWORD *)(v272 + 360) = v247;
  *(_QWORD *)(v272 + 368) = isa;
  if (*(_QWORD *)(v272 + 360))
  {
    outlined init with copy of NSPredicate?((id *)(v272 + 360), (_QWORD *)(v272 + 632));
    if (*(_QWORD *)(v272 + 368))
    {
      v289 = *(id *)(v272 + 632);
      v290 = *(id *)(v272 + 368);
      v246 = static NSObject.== infix(_:_:)();

      outlined destroy of HealthKitPersistor((id *)(v272 + 360));
      if ((v246 & 1) == 0)
        goto LABEL_49;
      goto LABEL_26;
    }

  }
  else if (!*(_QWORD *)(v272 + 368))
  {
    outlined destroy of HealthKitPersistor((id *)(v272 + 360));

LABEL_26:
    swift_bridgeObjectRetain();
    *(_QWORD *)(v272 + 600) = v250;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    lazy protocol witness table accessor for type [String] and conformance [A]();
    Collection.first.getter();
    outlined destroy of [HKQuantityType]();
    v244 = *(_QWORD *)(v272 + 376);
    v245 = *(_QWORD *)(v272 + 384);
    *(_QWORD *)(v272 + 904) = v245;
    if (v245)
    {
      *(_QWORD *)(v272 + 392) = v244;
      *(_QWORD *)(v272 + 400) = v245;
      if (MEMORY[0x24957D11C](v250) == 1)
      {
        v243 = *(id *)(v272 + 704);
        outlined init with copy of QuantityPersisting(*(_QWORD *)(v272 + 712) + OBJC_IVAR____TtC19SiriWellnessIntents35LogSpecificMedicationsIntentHandler_storage, v272 + 136);
        v241 = *(_QWORD *)(v272 + 160);
        v242 = *(_QWORD *)(v272 + 168);
        __swift_project_boxed_opaque_existential_1((_QWORD *)(v272 + 136), v241);
        *(_QWORD *)(v272 + 616) = objc_msgSend(v243, sel_dosage);
        if (*(_QWORD *)(v272 + 616))
        {
          v240 = *(id *)(v272 + 616);
          v9 = v240;
          outlined destroy of HealthKitPersistor((id *)(v272 + 616));
          objc_msgSend(v240, sel_doubleValue);

        }
        else
        {
          outlined destroy of HealthKitPersistor((id *)(v272 + 616));
        }
        v239 = objc_msgSend(*(id *)(v272 + 704), sel_dosageUnit);
        if (v239)
        {
          static String._unconditionallyBridgeFromObjectiveC(_:)();
          v237 = v10;

          v238 = v237;
        }
        else
        {
          v238 = 0;
        }
        *(_QWORD *)(v272 + 912) = v238;
        *(_QWORD *)(v272 + 624) = objc_msgSend(*(id *)(v272 + 704), sel_strength);
        if (*(_QWORD *)(v272 + 624))
        {
          v235 = *(id *)(v272 + 624);
          v11 = v235;
          outlined destroy of HealthKitPersistor((id *)(v272 + 624));
          objc_msgSend(v235, sel_doubleValue);

          v236 = 0;
        }
        else
        {
          outlined destroy of HealthKitPersistor((id *)(v272 + 624));
          v236 = 1;
        }
        v234 = objc_msgSend(*(id *)(v272 + 704), sel_strengthUnit);
        if (v234)
        {
          v230 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          v231 = v12;

          v232 = v230;
          v233 = v231;
        }
        else
        {
          v232 = 0;
          v233 = 0;
        }
        *(_QWORD *)(v272 + 920) = v233;
        v229 = *(_QWORD *)(v242 + 32) + **(int **)(v242 + 32);
        v13 = (_QWORD *)swift_task_alloc();
        *(_QWORD *)(v272 + 928) = v13;
        *v13 = *(_QWORD *)(v272 + 408);
        v13[1] = LogSpecificMedicationsIntentHandler.handle(intent:);
        v291 = v236 & 1;
        v292 = v232;
        v293 = v233;
        v294 = v241;
        v295 = v242;
        __asm { BR              X8 }
      }
      swift_bridgeObjectRelease();
    }
    v219 = *(void (**)(uint64_t, uint64_t, uint64_t))(v272 + 832);
    v14 = *(_QWORD *)(v272 + 808);
    v218 = *(_QWORD *)(v272 + 760);
    v217 = Logger.wellnessIntents.unsafeMutableAddressor();
    swift_beginAccess();
    v219(v14, v217, v218);
    swift_endAccess();
    swift_bridgeObjectRetain();
    v221 = swift_allocObject();
    *(_QWORD *)(v221 + 16) = v250;
    oslog = Logger.logObject.getter();
    v228 = static os_log_type_t.error.getter();
    *(_QWORD *)(v272 + 608) = 12;
    UnsignedInteger<>.init<A>(_:)();
    size = *(_DWORD *)(v272 + 1044);
    v223 = swift_allocObject();
    *(_BYTE *)(v223 + 16) = 0;
    v224 = swift_allocObject();
    *(_BYTE *)(v224 + 16) = 8;
    v222 = swift_allocObject();
    *(_QWORD *)(v222 + 16) = partial apply for implicit closure #1 in LogSpecificMedicationsIntentHandler.handle(intent:);
    *(_QWORD *)(v222 + 24) = v221;
    v225 = swift_allocObject();
    *(_QWORD *)(v225 + 16) = partial apply for thunk for @escaping @callee_guaranteed () -> (@unowned Int);
    *(_QWORD *)(v225 + 24) = v222;
    _allocateUninitializedArray<A>(_:)();
    v226 = v15;
    swift_retain();
    *v226 = partial apply for closure #1 in OSLogArguments.append(_:);
    v226[1] = v223;
    swift_retain();
    v226[2] = partial apply for closure #1 in OSLogArguments.append(_:);
    v226[3] = v224;
    swift_retain();
    v226[4] = partial apply for closure #1 in OSLogArguments.append<A>(_:);
    v226[5] = v225;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(oslog, v228))
    {
      v214 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      v213 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      v215 = createStorage<A>(capacity:type:)(0);
      v216 = createStorage<A>(capacity:type:)(0);
      v284 = v214;
      v285 = v215;
      v286 = v216;
      serialize(_:at:)(0, &v284);
      serialize(_:at:)(1, &v284);
      v287 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v288 = v223;
      result = closure #1 in osLogInternal(_:log:type:)(&v287, (uint64_t)&v284, (uint64_t)&v285, (uint64_t)&v286);
      if (v259)
        return result;
      v287 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v288 = v224;
      closure #1 in osLogInternal(_:log:type:)(&v287, (uint64_t)&v284, (uint64_t)&v285, (uint64_t)&v286);
      v287 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append<A>(_:);
      v288 = v225;
      closure #1 in osLogInternal(_:log:type:)(&v287, (uint64_t)&v284, (uint64_t)&v285, (uint64_t)&v286);
      _os_log_impl(&dword_24749F000, oslog, v228, "saveAsNeededWithStrength should only be called with a single medicationID but %ld found, returning .failure.", v214, size);
      destroyStorage<A>(_:count:)(v215, 0, v213);
      destroyStorage<A>(_:count:)(v216, 0, MEMORY[0x24BEE4AD8] + 8);
      MEMORY[0x24957D398](v214, MEMORY[0x24BEE4260]);
      swift_release();
      swift_release();
      swift_release();
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
    }
    v210 = *(void (**)(uint64_t, uint64_t))(v272 + 880);
    v208 = *(_QWORD *)(v272 + 808);
    v209 = *(_QWORD *)(v272 + 760);

    v210(v208, v209);
    type metadata accessor for LogSpecificMedicationsIntentResponse();
    v211 = LogSpecificMedicationsIntentResponse.__allocating_init(code:userActivity:)(5, 0);
    swift_bridgeObjectRelease();
    v212 = v211;
    goto LABEL_115;
  }
  outlined destroy of (HKQuantitySample, HKQuantitySample)((id *)(v272 + 360));

LABEL_49:
  swift_bridgeObjectRelease();
LABEL_50:
  v207 = objc_msgSend(*(id *)(v272 + 704), sel_scheduleID);
  if (v207)
  {
    v203 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v204 = v16;

    v205 = v203;
    v206 = v204;
  }
  else
  {
    v205 = 0;
    v206 = 0;
  }
  *(_QWORD *)(v272 + 944) = v206;
  if (!v206)
  {
    v105 = *(void (**)(uint64_t, uint64_t, uint64_t))(v272 + 832);
    v27 = *(_QWORD *)(v272 + 792);
    v104 = *(_QWORD *)(v272 + 760);
    v106 = *(id *)(v272 + 704);
    v103 = Logger.wellnessIntents.unsafeMutableAddressor();
    swift_beginAccess();
    v105(v27, v103, v104);
    swift_endAccess();
    v28 = v106;
    v108 = swift_allocObject();
    *(_QWORD *)(v108 + 16) = v106;
    v29 = v106;
    v110 = swift_allocObject();
    *(_QWORD *)(v110 + 16) = v106;
    v30 = v106;
    v112 = swift_allocObject();
    *(_QWORD *)(v112 + 16) = v106;
    v114 = swift_allocObject();
    *(_BYTE *)(v114 + 16) = v254 & 1;
    v31 = v106;
    v118 = swift_allocObject();
    *(_QWORD *)(v118 + 16) = v106;
    v32 = v106;
    v120 = swift_allocObject();
    *(_QWORD *)(v120 + 16) = v106;
    v141 = Logger.logObject.getter();
    v142 = static os_log_type_t.debug.getter();
    *(_QWORD *)(v272 + 536) = 58;
    UnsignedInteger<>.init<A>(_:)();
    v107 = *(_DWORD *)(v272 + 1036);
    v122 = swift_allocObject();
    *(_BYTE *)(v122 + 16) = 32;
    v123 = swift_allocObject();
    *(_BYTE *)(v123 + 16) = 8;
    v109 = swift_allocObject();
    *(_QWORD *)(v109 + 16) = partial apply for implicit closure #2 in LogSpecificMedicationsIntentHandler.handle(intent:);
    *(_QWORD *)(v109 + 24) = v108;
    v124 = swift_allocObject();
    *(_QWORD *)(v124 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:);
    *(_QWORD *)(v124 + 24) = v109;
    v125 = swift_allocObject();
    *(_BYTE *)(v125 + 16) = 32;
    v126 = swift_allocObject();
    *(_BYTE *)(v126 + 16) = 8;
    v111 = swift_allocObject();
    *(_QWORD *)(v111 + 16) = partial apply for implicit closure #3 in LogSpecificMedicationsIntentHandler.handle(intent:);
    *(_QWORD *)(v111 + 24) = v110;
    v127 = swift_allocObject();
    *(_QWORD *)(v127 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:);
    *(_QWORD *)(v127 + 24) = v111;
    v128 = swift_allocObject();
    *(_BYTE *)(v128 + 16) = 32;
    v129 = swift_allocObject();
    *(_BYTE *)(v129 + 16) = 8;
    v113 = swift_allocObject();
    *(_QWORD *)(v113 + 16) = partial apply for implicit closure #4 in LogSpecificMedicationsIntentHandler.handle(intent:);
    *(_QWORD *)(v113 + 24) = v112;
    v130 = swift_allocObject();
    *(_QWORD *)(v130 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:);
    *(_QWORD *)(v130 + 24) = v113;
    v131 = swift_allocObject();
    *(_BYTE *)(v131 + 16) = 0;
    v132 = swift_allocObject();
    *(_BYTE *)(v132 + 16) = 4;
    v115 = swift_allocObject();
    *(_QWORD *)(v115 + 16) = partial apply for implicit closure #5 in LogSpecificMedicationsIntentHandler.handle(intent:);
    *(_QWORD *)(v115 + 24) = v114;
    v116 = swift_allocObject();
    *(_QWORD *)(v116 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:format:privacy:);
    *(_QWORD *)(v116 + 24) = v115;
    v117 = swift_allocObject();
    *(_QWORD *)(v117 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:);
    *(_QWORD *)(v117 + 24) = v116;
    v133 = swift_allocObject();
    *(_QWORD *)(v133 + 16) = partial apply for thunk for @escaping @callee_guaranteed () -> (@unowned Int32);
    *(_QWORD *)(v133 + 24) = v117;
    v134 = swift_allocObject();
    *(_BYTE *)(v134 + 16) = 32;
    v135 = swift_allocObject();
    *(_BYTE *)(v135 + 16) = 8;
    v119 = swift_allocObject();
    *(_QWORD *)(v119 + 16) = partial apply for implicit closure #6 in LogSpecificMedicationsIntentHandler.handle(intent:);
    *(_QWORD *)(v119 + 24) = v118;
    v136 = swift_allocObject();
    *(_QWORD *)(v136 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:);
    *(_QWORD *)(v136 + 24) = v119;
    v137 = swift_allocObject();
    *(_BYTE *)(v137 + 16) = 32;
    v138 = swift_allocObject();
    *(_BYTE *)(v138 + 16) = 8;
    v121 = swift_allocObject();
    *(_QWORD *)(v121 + 16) = partial apply for implicit closure #7 in LogSpecificMedicationsIntentHandler.handle(intent:);
    *(_QWORD *)(v121 + 24) = v120;
    v139 = swift_allocObject();
    *(_QWORD *)(v139 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:);
    *(_QWORD *)(v139 + 24) = v121;
    _allocateUninitializedArray<A>(_:)();
    v140 = v33;
    swift_retain();
    *v140 = partial apply for closure #1 in OSLogArguments.append(_:);
    v140[1] = v122;
    swift_retain();
    v140[2] = partial apply for closure #1 in OSLogArguments.append(_:);
    v140[3] = v123;
    swift_retain();
    v140[4] = partial apply for closure #1 in OSLogArguments.append(_:);
    v140[5] = v124;
    swift_retain();
    v140[6] = partial apply for closure #1 in OSLogArguments.append(_:);
    v140[7] = v125;
    swift_retain();
    v140[8] = partial apply for closure #1 in OSLogArguments.append(_:);
    v140[9] = v126;
    swift_retain();
    v140[10] = partial apply for closure #1 in OSLogArguments.append(_:);
    v140[11] = v127;
    swift_retain();
    v140[12] = partial apply for closure #1 in OSLogArguments.append(_:);
    v140[13] = v128;
    swift_retain();
    v140[14] = partial apply for closure #1 in OSLogArguments.append(_:);
    v140[15] = v129;
    swift_retain();
    v140[16] = partial apply for closure #1 in OSLogArguments.append(_:);
    v140[17] = v130;
    swift_retain();
    v140[18] = partial apply for closure #1 in OSLogArguments.append(_:);
    v140[19] = v131;
    swift_retain();
    v140[20] = partial apply for closure #1 in OSLogArguments.append(_:);
    v140[21] = v132;
    swift_retain();
    v140[22] = _s2os14OSLogArgumentsV6appendyyxycs17FixedWidthIntegerRzlFySpys5UInt8VGz_SpySo8NSObjectCSgGSgzSpyypGSgztcfU_TA_0;
    v140[23] = v133;
    swift_retain();
    v140[24] = partial apply for closure #1 in OSLogArguments.append(_:);
    v140[25] = v134;
    swift_retain();
    v140[26] = partial apply for closure #1 in OSLogArguments.append(_:);
    v140[27] = v135;
    swift_retain();
    v140[28] = partial apply for closure #1 in OSLogArguments.append(_:);
    v140[29] = v136;
    swift_retain();
    v140[30] = partial apply for closure #1 in OSLogArguments.append(_:);
    v140[31] = v137;
    swift_retain();
    v140[32] = partial apply for closure #1 in OSLogArguments.append(_:);
    v140[33] = v138;
    swift_retain();
    v140[34] = partial apply for closure #1 in OSLogArguments.append(_:);
    v140[35] = v139;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(v141, v142))
    {
      v100 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      v99 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      v101 = createStorage<A>(capacity:type:)(0);
      v102 = createStorage<A>(capacity:type:)(5);
      v274 = v100;
      v275 = v101;
      v276 = v102;
      serialize(_:at:)(2, &v274);
      serialize(_:at:)(6, &v274);
      v277 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v278 = v122;
      result = closure #1 in osLogInternal(_:log:type:)(&v277, (uint64_t)&v274, (uint64_t)&v275, (uint64_t)&v276);
      if (v259)
        return result;
      v277 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v278 = v123;
      closure #1 in osLogInternal(_:log:type:)(&v277, (uint64_t)&v274, (uint64_t)&v275, (uint64_t)&v276);
      v277 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v278 = v124;
      closure #1 in osLogInternal(_:log:type:)(&v277, (uint64_t)&v274, (uint64_t)&v275, (uint64_t)&v276);
      v277 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v278 = v125;
      closure #1 in osLogInternal(_:log:type:)(&v277, (uint64_t)&v274, (uint64_t)&v275, (uint64_t)&v276);
      v277 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v278 = v126;
      closure #1 in osLogInternal(_:log:type:)(&v277, (uint64_t)&v274, (uint64_t)&v275, (uint64_t)&v276);
      v277 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v278 = v127;
      closure #1 in osLogInternal(_:log:type:)(&v277, (uint64_t)&v274, (uint64_t)&v275, (uint64_t)&v276);
      v277 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v278 = v128;
      closure #1 in osLogInternal(_:log:type:)(&v277, (uint64_t)&v274, (uint64_t)&v275, (uint64_t)&v276);
      v277 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v278 = v129;
      closure #1 in osLogInternal(_:log:type:)(&v277, (uint64_t)&v274, (uint64_t)&v275, (uint64_t)&v276);
      v277 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v278 = v130;
      closure #1 in osLogInternal(_:log:type:)(&v277, (uint64_t)&v274, (uint64_t)&v275, (uint64_t)&v276);
      v277 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v278 = v131;
      closure #1 in osLogInternal(_:log:type:)(&v277, (uint64_t)&v274, (uint64_t)&v275, (uint64_t)&v276);
      v277 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v278 = v132;
      closure #1 in osLogInternal(_:log:type:)(&v277, (uint64_t)&v274, (uint64_t)&v275, (uint64_t)&v276);
      v277 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))_s2os14OSLogArgumentsV6appendyyxycs17FixedWidthIntegerRzlFySpys5UInt8VGz_SpySo8NSObjectCSgGSgzSpyypGSgztcfU_TA_0;
      v278 = v133;
      closure #1 in osLogInternal(_:log:type:)(&v277, (uint64_t)&v274, (uint64_t)&v275, (uint64_t)&v276);
      v277 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v278 = v134;
      closure #1 in osLogInternal(_:log:type:)(&v277, (uint64_t)&v274, (uint64_t)&v275, (uint64_t)&v276);
      v277 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v278 = v135;
      closure #1 in osLogInternal(_:log:type:)(&v277, (uint64_t)&v274, (uint64_t)&v275, (uint64_t)&v276);
      v277 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v278 = v136;
      closure #1 in osLogInternal(_:log:type:)(&v277, (uint64_t)&v274, (uint64_t)&v275, (uint64_t)&v276);
      v277 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v278 = v137;
      closure #1 in osLogInternal(_:log:type:)(&v277, (uint64_t)&v274, (uint64_t)&v275, (uint64_t)&v276);
      v277 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v278 = v138;
      closure #1 in osLogInternal(_:log:type:)(&v277, (uint64_t)&v274, (uint64_t)&v275, (uint64_t)&v276);
      v277 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v278 = v139;
      closure #1 in osLogInternal(_:log:type:)(&v277, (uint64_t)&v274, (uint64_t)&v275, (uint64_t)&v276);
      _os_log_impl(&dword_24749F000, v141, v142, "Not provided scheduleID, so persisting specific medication as default...\nstartTime: %s,\nendTime: %s,\nmedicationID: %s,\nmedStatusIsTaken: %{BOOL}d,\ndosage: %s,\ndosageUnit: %s,", v100, v107);
      destroyStorage<A>(_:count:)(v101, 0, v99);
      destroyStorage<A>(_:count:)(v102, 5, MEMORY[0x24BEE4AD8] + 8);
      MEMORY[0x24957D398](v100, MEMORY[0x24BEE4260]);
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
    }
    v93 = *(void (**)(uint64_t, uint64_t))(v272 + 880);
    v91 = *(_QWORD *)(v272 + 792);
    v92 = *(_QWORD *)(v272 + 760);
    v94 = *(_QWORD *)(v272 + 712);
    v97 = *(id *)(v272 + 704);

    v93(v91, v92);
    outlined init with copy of QuantityPersisting(v94 + OBJC_IVAR____TtC19SiriWellnessIntents35LogSpecificMedicationsIntentHandler_storage, v272 + 56);
    v95 = *(_QWORD *)(v272 + 80);
    v96 = *(_QWORD *)(v272 + 88);
    __swift_project_boxed_opaque_existential_1((_QWORD *)(v272 + 56), v95);
    v98 = objc_msgSend(v97, sel_startTime);
    if (v98)
    {
      v90 = *(_QWORD *)(v272 + 752);
      v87 = *(_QWORD *)(v272 + 736);
      v88 = *(_QWORD *)(v272 + 728);
      v89 = *(_QWORD *)(v272 + 720);
      static Date._unconditionallyBridgeFromObjectiveC(_:)();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v88 + 32))(v90, v87, v89);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v88 + 56))(v90, 0, 1, v89);

    }
    else
    {
      (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v272 + 728) + 56))(*(_QWORD *)(v272 + 752), 1, 1, *(_QWORD *)(v272 + 720));
    }
    v86 = objc_msgSend(*(id *)(v272 + 704), sel_endTime);
    if (v86)
    {
      v85 = *(_QWORD *)(v272 + 744);
      v82 = *(_QWORD *)(v272 + 736);
      v83 = *(_QWORD *)(v272 + 728);
      v84 = *(_QWORD *)(v272 + 720);
      static Date._unconditionallyBridgeFromObjectiveC(_:)();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v83 + 32))(v85, v82, v84);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v83 + 56))(v85, 0, 1, v84);

    }
    else
    {
      (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v272 + 728) + 56))(*(_QWORD *)(v272 + 744), 1, 1, *(_QWORD *)(v272 + 720));
    }
    *(_QWORD *)(v272 + 544) = objc_msgSend(*(id *)(v272 + 704), sel_hasMeridiem);
    if (*(_QWORD *)(v272 + 544))
    {
      v79 = *(id *)(v272 + 544);
      v34 = v79;
      outlined destroy of HealthKitPersistor((id *)(v272 + 544));
      v80 = objc_msgSend(v79, sel_BOOLValue);

      v81 = v80 & 1;
    }
    else
    {
      outlined destroy of HealthKitPersistor((id *)(v272 + 544));
      v81 = 2;
    }
    if (v81 == 2)
      *(_BYTE *)(v272 + 1017) = 0;
    else
      *(_BYTE *)(v272 + 1017) = v81 & 1;
    v78 = objc_msgSend(*(id *)(v272 + 704), sel_medicationIDs);
    if (v78)
    {
      v76 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      v77 = v76;
    }
    else
    {
      v77 = 0;
    }
    *(_QWORD *)(v272 + 984) = v77;
    *(_QWORD *)(v272 + 552) = objc_msgSend(*(id *)(v272 + 704), sel_dosage);
    if (*(_QWORD *)(v272 + 552))
    {
      v75 = *(id *)(v272 + 552);
      v35 = v75;
      outlined destroy of HealthKitPersistor((id *)(v272 + 552));
      objc_msgSend(v75, sel_doubleValue);

    }
    else
    {
      outlined destroy of HealthKitPersistor((id *)(v272 + 552));
    }
    v74 = objc_msgSend(*(id *)(v272 + 704), sel_dosageUnit);
    if (v74)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      v72 = v36;

      v73 = v72;
    }
    else
    {
      v73 = 0;
    }
    *(_QWORD *)(v272 + 992) = v73;
    v71 = *(_QWORD *)(v96 + 16) + **(int **)(v96 + 16);
    v37 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v272 + 1000) = v37;
    *v37 = *(_QWORD *)(v272 + 408);
    v37[1] = LogSpecificMedicationsIntentHandler.handle(intent:);
    v293 = v73;
    v294 = v95;
    v295 = v96;
    __asm { BR              X8 }
  }
  v170 = *(void (**)(uint64_t, uint64_t, uint64_t))(v272 + 832);
  v17 = *(_QWORD *)(v272 + 800);
  v169 = *(_QWORD *)(v272 + 760);
  v171 = *(id *)(v272 + 704);
  *(_QWORD *)(v272 + 344) = v205;
  *(_QWORD *)(v272 + 352) = v206;
  v168 = Logger.wellnessIntents.unsafeMutableAddressor();
  swift_beginAccess();
  v170(v17, v168, v169);
  swift_endAccess();
  swift_bridgeObjectRetain();
  v173 = swift_allocObject();
  *(_QWORD *)(v173 + 16) = v205;
  *(_QWORD *)(v173 + 24) = v206;
  v18 = v171;
  v175 = swift_allocObject();
  *(_QWORD *)(v175 + 16) = v171;
  v177 = swift_allocObject();
  *(_BYTE *)(v177 + 16) = v254 & 1;
  v19 = v171;
  v181 = swift_allocObject();
  *(_QWORD *)(v181 + 16) = v171;
  v20 = v171;
  v183 = swift_allocObject();
  *(_QWORD *)(v183 + 16) = v171;
  log = (os_log_t)Logger.logObject.getter();
  v202 = static os_log_type_t.debug.getter();
  *(_QWORD *)(v272 + 560) = 48;
  UnsignedInteger<>.init<A>(_:)();
  v172 = *(_DWORD *)(v272 + 1040);
  v185 = swift_allocObject();
  *(_BYTE *)(v185 + 16) = 32;
  v186 = swift_allocObject();
  *(_BYTE *)(v186 + 16) = 8;
  v174 = swift_allocObject();
  *(_QWORD *)(v174 + 16) = partial apply for implicit closure #4 in LogQuantityIntentHandler.handle(intent:);
  *(_QWORD *)(v174 + 24) = v173;
  v187 = swift_allocObject();
  *(_QWORD *)(v187 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:);
  *(_QWORD *)(v187 + 24) = v174;
  v188 = swift_allocObject();
  *(_BYTE *)(v188 + 16) = 32;
  v189 = swift_allocObject();
  *(_BYTE *)(v189 + 16) = 8;
  v176 = swift_allocObject();
  *(_QWORD *)(v176 + 16) = partial apply for implicit closure #4 in LogSpecificMedicationsIntentHandler.handle(intent:);
  *(_QWORD *)(v176 + 24) = v175;
  v190 = swift_allocObject();
  *(_QWORD *)(v190 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:);
  *(_QWORD *)(v190 + 24) = v176;
  v191 = swift_allocObject();
  *(_BYTE *)(v191 + 16) = 0;
  v192 = swift_allocObject();
  *(_BYTE *)(v192 + 16) = 4;
  v178 = swift_allocObject();
  *(_QWORD *)(v178 + 16) = partial apply for implicit closure #5 in LogSpecificMedicationsIntentHandler.handle(intent:);
  *(_QWORD *)(v178 + 24) = v177;
  v179 = swift_allocObject();
  *(_QWORD *)(v179 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:format:privacy:);
  *(_QWORD *)(v179 + 24) = v178;
  v180 = swift_allocObject();
  *(_QWORD *)(v180 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:);
  *(_QWORD *)(v180 + 24) = v179;
  v193 = swift_allocObject();
  *(_QWORD *)(v193 + 16) = partial apply for thunk for @escaping @callee_guaranteed () -> (@unowned Int32);
  *(_QWORD *)(v193 + 24) = v180;
  v194 = swift_allocObject();
  *(_BYTE *)(v194 + 16) = 32;
  v195 = swift_allocObject();
  *(_BYTE *)(v195 + 16) = 8;
  v182 = swift_allocObject();
  *(_QWORD *)(v182 + 16) = partial apply for implicit closure #6 in LogSpecificMedicationsIntentHandler.handle(intent:);
  *(_QWORD *)(v182 + 24) = v181;
  v196 = swift_allocObject();
  *(_QWORD *)(v196 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:);
  *(_QWORD *)(v196 + 24) = v182;
  v197 = swift_allocObject();
  *(_BYTE *)(v197 + 16) = 32;
  v198 = swift_allocObject();
  *(_BYTE *)(v198 + 16) = 8;
  v184 = swift_allocObject();
  *(_QWORD *)(v184 + 16) = partial apply for implicit closure #7 in LogSpecificMedicationsIntentHandler.handle(intent:);
  *(_QWORD *)(v184 + 24) = v183;
  v199 = swift_allocObject();
  *(_QWORD *)(v199 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:);
  *(_QWORD *)(v199 + 24) = v184;
  _allocateUninitializedArray<A>(_:)();
  v200 = v21;
  swift_retain();
  *v200 = partial apply for closure #1 in OSLogArguments.append(_:);
  v200[1] = v185;
  swift_retain();
  v200[2] = partial apply for closure #1 in OSLogArguments.append(_:);
  v200[3] = v186;
  swift_retain();
  v200[4] = partial apply for closure #1 in OSLogArguments.append(_:);
  v200[5] = v187;
  swift_retain();
  v200[6] = partial apply for closure #1 in OSLogArguments.append(_:);
  v200[7] = v188;
  swift_retain();
  v200[8] = partial apply for closure #1 in OSLogArguments.append(_:);
  v200[9] = v189;
  swift_retain();
  v200[10] = partial apply for closure #1 in OSLogArguments.append(_:);
  v200[11] = v190;
  swift_retain();
  v200[12] = partial apply for closure #1 in OSLogArguments.append(_:);
  v200[13] = v191;
  swift_retain();
  v200[14] = partial apply for closure #1 in OSLogArguments.append(_:);
  v200[15] = v192;
  swift_retain();
  v200[16] = _s2os14OSLogArgumentsV6appendyyxycs17FixedWidthIntegerRzlFySpys5UInt8VGz_SpySo8NSObjectCSgGSgzSpyypGSgztcfU_TA_0;
  v200[17] = v193;
  swift_retain();
  v200[18] = partial apply for closure #1 in OSLogArguments.append(_:);
  v200[19] = v194;
  swift_retain();
  v200[20] = partial apply for closure #1 in OSLogArguments.append(_:);
  v200[21] = v195;
  swift_retain();
  v200[22] = partial apply for closure #1 in OSLogArguments.append(_:);
  v200[23] = v196;
  swift_retain();
  v200[24] = partial apply for closure #1 in OSLogArguments.append(_:);
  v200[25] = v197;
  swift_retain();
  v200[26] = partial apply for closure #1 in OSLogArguments.append(_:);
  v200[27] = v198;
  swift_retain();
  v200[28] = partial apply for closure #1 in OSLogArguments.append(_:);
  v200[29] = v199;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (!os_log_type_enabled(log, v202))
  {
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
LABEL_59:
    v158 = *(void (**)(uint64_t, uint64_t))(v272 + 880);
    v156 = *(_QWORD *)(v272 + 800);
    v157 = *(_QWORD *)(v272 + 760);
    v159 = *(_QWORD *)(v272 + 712);
    v162 = *(id *)(v272 + 704);

    v158(v156, v157);
    outlined init with copy of QuantityPersisting(v159 + OBJC_IVAR____TtC19SiriWellnessIntents35LogSpecificMedicationsIntentHandler_storage, v272 + 96);
    v160 = *(_QWORD *)(v272 + 120);
    v161 = *(_QWORD *)(v272 + 128);
    __swift_project_boxed_opaque_existential_1((_QWORD *)(v272 + 96), v160);
    v163 = objc_msgSend(v162, sel_medicationIDs);
    if (v163)
    {
      v154 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      v155 = v154;
    }
    else
    {
      v155 = 0;
    }
    *(_QWORD *)(v272 + 952) = v155;
    *(_QWORD *)(v272 + 568) = objc_msgSend(*(id *)(v272 + 704), sel_dosage);
    if (*(_QWORD *)(v272 + 568))
    {
      v153 = *(id *)(v272 + 568);
      v22 = v153;
      outlined destroy of HealthKitPersistor((id *)(v272 + 568));
      objc_msgSend(v153, sel_doubleValue);

    }
    else
    {
      outlined destroy of HealthKitPersistor((id *)(v272 + 568));
    }
    v152 = objc_msgSend(*(id *)(v272 + 704), sel_dosageUnit);
    if (v152)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      v150 = v23;

      v151 = v150;
    }
    else
    {
      v151 = 0;
    }
    *(_QWORD *)(v272 + 960) = v151;
    *(_QWORD *)(v272 + 576) = objc_msgSend(*(id *)(v272 + 704), sel_confirmedAsNeeded);
    if (*(_QWORD *)(v272 + 576))
    {
      v147 = *(id *)(v272 + 576);
      v24 = v147;
      outlined destroy of HealthKitPersistor((id *)(v272 + 576));
      v148 = objc_msgSend(v147, sel_BOOLValue);

      v149 = v148 & 1;
    }
    else
    {
      outlined destroy of HealthKitPersistor((id *)(v272 + 576));
      v149 = 2;
    }
    *(_QWORD *)(v272 + 584) = objc_msgSend(*(id *)(v272 + 704), sel_confirmedAsScheduled);
    if (*(_QWORD *)(v272 + 584))
    {
      v144 = *(id *)(v272 + 584);
      v25 = v144;
      outlined destroy of HealthKitPersistor((id *)(v272 + 584));
      v145 = objc_msgSend(v144, sel_BOOLValue);

      v146 = v145 & 1;
    }
    else
    {
      outlined destroy of HealthKitPersistor((id *)(v272 + 584));
      v146 = 2;
    }
    v143 = *(_QWORD *)(v161 + 24) + **(int **)(v161 + 24);
    v26 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v272 + 968) = v26;
    *v26 = *(_QWORD *)(v272 + 408);
    v26[1] = LogSpecificMedicationsIntentHandler.handle(intent:);
    LOBYTE(v293) = v149;
    BYTE1(v293) = v146;
    v294 = v160;
    v295 = v161;
    __asm { BR              X8 }
  }
  v165 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
  v164 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
  v166 = createStorage<A>(capacity:type:)(0);
  v167 = createStorage<A>(capacity:type:)(4);
  v279 = v165;
  v280 = v166;
  v281 = v167;
  serialize(_:at:)(2, &v279);
  serialize(_:at:)(5, &v279);
  v282 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  v283 = v185;
  result = closure #1 in osLogInternal(_:log:type:)(&v282, (uint64_t)&v279, (uint64_t)&v280, (uint64_t)&v281);
  if (!v259)
  {
    v282 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v283 = v186;
    closure #1 in osLogInternal(_:log:type:)(&v282, (uint64_t)&v279, (uint64_t)&v280, (uint64_t)&v281);
    v282 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v283 = v187;
    closure #1 in osLogInternal(_:log:type:)(&v282, (uint64_t)&v279, (uint64_t)&v280, (uint64_t)&v281);
    v282 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v283 = v188;
    closure #1 in osLogInternal(_:log:type:)(&v282, (uint64_t)&v279, (uint64_t)&v280, (uint64_t)&v281);
    v282 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v283 = v189;
    closure #1 in osLogInternal(_:log:type:)(&v282, (uint64_t)&v279, (uint64_t)&v280, (uint64_t)&v281);
    v282 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v283 = v190;
    closure #1 in osLogInternal(_:log:type:)(&v282, (uint64_t)&v279, (uint64_t)&v280, (uint64_t)&v281);
    v282 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v283 = v191;
    closure #1 in osLogInternal(_:log:type:)(&v282, (uint64_t)&v279, (uint64_t)&v280, (uint64_t)&v281);
    v282 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v283 = v192;
    closure #1 in osLogInternal(_:log:type:)(&v282, (uint64_t)&v279, (uint64_t)&v280, (uint64_t)&v281);
    v282 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))_s2os14OSLogArgumentsV6appendyyxycs17FixedWidthIntegerRzlFySpys5UInt8VGz_SpySo8NSObjectCSgGSgzSpyypGSgztcfU_TA_0;
    v283 = v193;
    closure #1 in osLogInternal(_:log:type:)(&v282, (uint64_t)&v279, (uint64_t)&v280, (uint64_t)&v281);
    v282 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v283 = v194;
    closure #1 in osLogInternal(_:log:type:)(&v282, (uint64_t)&v279, (uint64_t)&v280, (uint64_t)&v281);
    v282 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v283 = v195;
    closure #1 in osLogInternal(_:log:type:)(&v282, (uint64_t)&v279, (uint64_t)&v280, (uint64_t)&v281);
    v282 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v283 = v196;
    closure #1 in osLogInternal(_:log:type:)(&v282, (uint64_t)&v279, (uint64_t)&v280, (uint64_t)&v281);
    v282 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v283 = v197;
    closure #1 in osLogInternal(_:log:type:)(&v282, (uint64_t)&v279, (uint64_t)&v280, (uint64_t)&v281);
    v282 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v283 = v198;
    closure #1 in osLogInternal(_:log:type:)(&v282, (uint64_t)&v279, (uint64_t)&v280, (uint64_t)&v281);
    v282 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v283 = v199;
    closure #1 in osLogInternal(_:log:type:)(&v282, (uint64_t)&v279, (uint64_t)&v280, (uint64_t)&v281);
    _os_log_impl(&dword_24749F000, log, v202, "Provided scheduleID and potentially {medicationID, dosage, dosageUnit}, so persisting specific medication...\n    scheduleID: %s,\n    medicationID: %s,\n    medStatusIsTaken: %{BOOL}d,\n    dosage: %s,\n    dosageUnit: %s,", v165, v172);
    destroyStorage<A>(_:count:)(v166, 0, v164);
    destroyStorage<A>(_:count:)(v167, 4, MEMORY[0x24BEE4AD8] + 8);
    MEMORY[0x24957D398](v165, MEMORY[0x24BEE4260]);
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    goto LABEL_59;
  }
  return result;
}

{
  uint64_t v0;
  uint64_t v2;

  *(_QWORD *)(v0 + 408) = v0;
  __swift_destroy_boxed_opaque_existential_1(v0 + 136);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v2 = *(_QWORD *)(v0 + 936);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v0 + 408) + 8))(v2);
}

{
  uint64_t v0;
  uint64_t v2;

  *(_QWORD *)(v0 + 408) = v0;
  __swift_destroy_boxed_opaque_existential_1(v0 + 96);
  swift_bridgeObjectRelease();
  v2 = *(_QWORD *)(v0 + 976);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v0 + 408) + 8))(v2);
}

{
  uint64_t v0;
  uint64_t v2;

  *(_QWORD *)(v0 + 408) = v0;
  __swift_destroy_boxed_opaque_existential_1(v0 + 56);
  v2 = *(_QWORD *)(v0 + 1008);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v0 + 408) + 8))(v2);
}

uint64_t LogSpecificMedicationsIntentHandler.handle(intent:)(char a1)
{
  uint64_t *v1;
  uint64_t v3;

  v3 = *v1;
  *(_QWORD *)(v3 + 408) = *v1;
  *(_BYTE *)(v3 + 1018) = a1;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t implicit closure #1 in LogSpecificMedicationsIntentHandler.handle(intent:)()
{
  return MEMORY[0x24957D11C]();
}

uint64_t implicit closure #2 in LogSpecificMedicationsIntentHandler.handle(intent:)(uint64_t a1)
{
  void *v1;
  uint64_t v3;
  id v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  id v14;

  v10 = a1;
  v6 = type metadata accessor for Date();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = (*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v3 - v8;
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  v12 = (*(_QWORD *)(*(_QWORD *)(v11 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1 = (void *)MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v3 - v12;
  v14 = objc_msgSend(v1, sel_startTime);
  if (v14)
  {
    v5 = v14;
    v4 = v14;
    static Date._unconditionallyBridgeFromObjectiveC(_:)();
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v13, v9, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v13, 0, 1, v6);

  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v7 + 56))(v13, 1, 1, v6);
  }
  lazy protocol witness table accessor for type Date? and conformance A?();
  return String.init<A>(describing:)();
}

uint64_t implicit closure #3 in LogSpecificMedicationsIntentHandler.handle(intent:)(uint64_t a1)
{
  void *v1;
  uint64_t v3;
  id v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  id v14;

  v10 = a1;
  v6 = type metadata accessor for Date();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = (*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v3 - v8;
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  v12 = (*(_QWORD *)(*(_QWORD *)(v11 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1 = (void *)MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v3 - v12;
  v14 = objc_msgSend(v1, sel_endTime);
  if (v14)
  {
    v5 = v14;
    v4 = v14;
    static Date._unconditionallyBridgeFromObjectiveC(_:)();
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v13, v9, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v13, 0, 1, v6);

  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v7 + 56))(v13, 1, 1, v6);
  }
  lazy protocol witness table accessor for type Date? and conformance A?();
  return String.init<A>(describing:)();
}

uint64_t implicit closure #4 in LogSpecificMedicationsIntentHandler.handle(intent:)(void *a1)
{
  id v2;

  v2 = objc_msgSend(a1, sel_medicationIDs);
  if (v2)
  {
    static Array._unconditionallyBridgeFromObjectiveC(_:)();

  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]?);
  lazy protocol witness table accessor for type [String]? and conformance A?();
  return String.init<A>(describing:)();
}

uint64_t implicit closure #5 in LogSpecificMedicationsIntentHandler.handle(intent:)(char a1)
{
  return a1 & 1;
}

uint64_t implicit closure #6 in LogSpecificMedicationsIntentHandler.handle(intent:)(void *a1)
{
  objc_msgSend(a1, sel_dosage);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSNumber?);
  lazy protocol witness table accessor for type NSNumber? and conformance A?();
  return String.init<A>(describing:)();
}

uint64_t implicit closure #7 in LogSpecificMedicationsIntentHandler.handle(intent:)(void *a1)
{
  id v2;

  v2 = objc_msgSend(a1, sel_dosageUnit);
  if (v2)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();

  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
  lazy protocol witness table accessor for type String? and conformance A?();
  return String.init<A>(describing:)();
}

uint64_t @objc closure #1 in LogSpecificMedicationsIntentHandler.handle(intent:)(void *a1, const void *a2, void *a3)
{
  _QWORD *v3;
  id v5;
  id v6;
  _QWORD *v7;
  uint64_t v10;

  v3[4] = a3;
  v3[3] = a1;
  v3[2] = v3;
  v5 = a1;
  v3[5] = _Block_copy(a2);
  v6 = a3;
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v10 + 48) = v7;
  *v7 = *(_QWORD *)(v10 + 16);
  v7[1] = @objc closure #1 in LogQuantityIntentHandler.handle(intent:);
  return LogSpecificMedicationsIntentHandler.handle(intent:)((uint64_t)a1);
}

id LogSpecificMedicationsIntentHandler.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

uint64_t LogSpecificMedicationsIntentHandler.init()()
{
  uint64_t result;
  uint64_t v1;

  if (!"SiriWellnessIntents.LogSpecificMedicationsIntentHandler")
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  result = closure #1 in _unimplementedInitializer(className:initName:file:line:column:)((uint64_t)"SiriWellnessIntents.LogSpecificMedicationsIntentHandler", 55, (unint64_t)"init()", 6, 2, (unint64_t)"SiriWellnessIntents/LogSpecificMedicationsIntentHandler.swift", 61, 2, v1, 0x12uLL, 0x14uLL);
  __break(1u);
  return result;
}

id LogSpecificMedicationsIntentHandler.__deallocating_deinit()
{
  void *v0;
  objc_super v2;
  void *v3;

  v3 = v0;
  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t SpecificMedicationsPersistor.isLoggingAuthorized()(void *a1, uint64_t a2)
{
  _QWORD *v2;
  id v3;
  _QWORD *v4;
  uint64_t v6;

  v2[5] = a1;
  v2[4] = v2;
  v2[2] = 0;
  v2[3] = 0;
  v2[2] = a1;
  v2[3] = a2;
  v3 = a1;
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v6 + 48) = v4;
  *v4 = *(_QWORD *)(v6 + 32);
  v4[1] = SpecificMedicationsPersistor.isLoggingAuthorized();
  return isSiriAuthorizedToAccessHealthData(store:)((uint64_t)a1);
}

uint64_t SpecificMedicationsPersistor.isLoggingAuthorized()(unsigned int a1)
{
  uint64_t *v1;
  void *v3;
  uint64_t v4;

  v4 = *v1;
  v3 = *(void **)(*v1 + 40);
  *(_QWORD *)(*v1 + 32) = *v1;
  swift_task_dealloc();

  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)(v4 + 32) + 8))(a1);
}

uint64_t SpecificMedicationsPersistor.save(startTime:endTime:hasMeridiem:medicationIDs:medStatusTaken:dosage:dosageUnit:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, char a5, uint64_t a6, char a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  *(_QWORD *)(v8 + 360) = v22;
  *(_QWORD *)(v8 + 352) = v21;
  *(_QWORD *)(v8 + 344) = v20;
  *(_QWORD *)(v8 + 336) = a8;
  *(_BYTE *)(v8 + 131) = a7;
  *(_QWORD *)(v8 + 328) = a6;
  *(_BYTE *)(v8 + 130) = a5 & 1;
  *(_QWORD *)(v8 + 320) = a4;
  *(_BYTE *)(v8 + 129) = a3 & 1;
  *(_QWORD *)(v8 + 312) = a2;
  *(_QWORD *)(v8 + 304) = a1;
  *(_QWORD *)(v8 + 136) = v8;
  *(_QWORD *)(v8 + 144) = 0;
  *(_QWORD *)(v8 + 152) = 0;
  *(_BYTE *)(v8 + 512) = 0;
  *(_QWORD *)(v8 + 160) = 0;
  *(_BYTE *)(v8 + 520) = 0;
  *(_QWORD *)(v8 + 120) = 0;
  *(_BYTE *)(v8 + 128) = 0;
  *(_QWORD *)(v8 + 88) = 0;
  *(_QWORD *)(v8 + 96) = 0;
  *(_QWORD *)(v8 + 104) = 0;
  *(_QWORD *)(v8 + 112) = 0;
  *(_BYTE *)(v8 + 528) = 0;
  *(_BYTE *)(v8 + 536) = 0;
  *(_QWORD *)(v8 + 216) = 0;
  *(_QWORD *)(v8 + 224) = 0;
  v11 = type metadata accessor for DateInterval();
  *(_QWORD *)(v8 + 368) = v11;
  *(_QWORD *)(v8 + 376) = *(_QWORD *)(v11 - 8);
  *(_QWORD *)(v8 + 384) = swift_task_alloc();
  *(_QWORD *)(v8 + 392) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateInterval?);
  *(_QWORD *)(v8 + 400) = swift_task_alloc();
  *(_QWORD *)(v8 + 408) = swift_task_alloc();
  *(_QWORD *)(v8 + 416) = swift_task_alloc();
  v12 = type metadata accessor for Logger();
  *(_QWORD *)(v8 + 424) = v12;
  *(_QWORD *)(v8 + 432) = *(_QWORD *)(v12 - 8);
  *(_QWORD *)(v8 + 440) = swift_task_alloc();
  *(_QWORD *)(v8 + 448) = swift_task_alloc();
  *(_QWORD *)(v8 + 456) = swift_task_alloc();
  *(_QWORD *)(v8 + 144) = a1;
  *(_QWORD *)(v8 + 152) = a2;
  *(_BYTE *)(v8 + 512) = a3 & 1;
  *(_QWORD *)(v8 + 160) = a4;
  *(_BYTE *)(v8 + 520) = a5 & 1;
  *(_QWORD *)(v8 + 120) = a6;
  *(_BYTE *)(v8 + 128) = a7 & 1;
  *(_QWORD *)(v8 + 88) = a8;
  *(_QWORD *)(v8 + 96) = v20;
  *(_QWORD *)(v8 + 104) = v21;
  *(_QWORD *)(v8 + 112) = v22;
  return swift_task_switch();
}

uint64_t SpecificMedicationsPersistor.save(startTime:endTime:hasMeridiem:medicationIDs:medStatusTaken:dosage:dosageUnit:)()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  const void *v4;
  _QWORD *v5;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint8_t *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint32_t v21;
  os_log_type_t v22;
  NSObject *log;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint8_t *buf;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint32_t size;
  os_log_type_t v47;
  NSObject *oslog;
  uint64_t v49;
  BOOL v50;
  BOOL v51;
  BOOL v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void (*v56)(uint64_t, uint64_t);
  uint64_t v57;
  const void *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unsigned int (*v62)(uint64_t, uint64_t, uint64_t);
  uint64_t v63;
  uint8_t *v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  void (*v72)(uint64_t, uint64_t, uint64_t);
  uint32_t v73;
  os_log_type_t v74;
  NSObject *v75;
  uint64_t v76;

  v1 = *(_QWORD *)(v0 + 456);
  v69 = *(_QWORD *)(v0 + 432);
  v71 = *(_QWORD *)(v0 + 424);
  *(_QWORD *)(v0 + 136) = v0;
  v70 = Logger.wellnessIntents.unsafeMutableAddressor();
  swift_beginAccess();
  v72 = *(void (**)(uint64_t, uint64_t, uint64_t))(v69 + 16);
  v72(v1, v70, v71);
  swift_endAccess();
  v75 = Logger.logObject.getter();
  v74 = static os_log_type_t.debug.getter();
  *(_QWORD *)(v0 + 168) = 2;
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  v73 = *(_DWORD *)(v0 + 132);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
  v76 = _allocateUninitializedArray<A>(_:)();
  if (os_log_type_enabled(v75, v74))
  {
    v64 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    v63 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    v65 = createStorage<A>(capacity:type:)(0);
    v66 = createStorage<A>(capacity:type:)(0);
    *(_QWORD *)(v68 + 272) = v64;
    *(_QWORD *)(v68 + 280) = v65;
    *(_QWORD *)(v68 + 288) = v66;
    serialize(_:at:)(0, (_BYTE **)(v68 + 272));
    serialize(_:at:)(0, (_BYTE **)(v68 + 272));
    *(_QWORD *)(v68 + 296) = v76;
    v67 = (_QWORD *)swift_task_alloc();
    v67[2] = v68 + 272;
    v67[3] = v68 + 280;
    v67[4] = v68 + 288;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
    lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
    Sequence.forEach(_:)();
    swift_task_dealloc();
    _os_log_impl(&dword_24749F000, v75, v74, "Starting to save medication.", v64, v73);
    destroyStorage<A>(_:count:)(v65, 0, v63);
    destroyStorage<A>(_:count:)(v66, 0, MEMORY[0x24BEE4AD8] + 8);
    MEMORY[0x24957D398](v64, MEMORY[0x24BEE4260]);
  }
  swift_bridgeObjectRelease();
  v54 = *(_QWORD *)(v68 + 456);
  v53 = *(_QWORD *)(v68 + 432);
  v55 = *(_QWORD *)(v68 + 424);
  v60 = *(_QWORD *)(v68 + 416);
  v59 = *(_QWORD *)(v68 + 376);
  v61 = *(_QWORD *)(v68 + 368);
  v58 = *(const void **)(v68 + 312);
  v57 = *(_QWORD *)(v68 + 304);

  v56 = *(void (**)(uint64_t, uint64_t))(v53 + 8);
  v56(v54, v55);
  dateInterval(startTime:endTime:)(v57, v58, v60);
  v62 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v59 + 48);
  v52 = v62(v60, 1, v61) != 1;
  v2 = *(_BYTE *)(v68 + 131);
  *(_BYTE *)(v68 + 528) = v52;
  v51 = (v2 & 1) == 0;
  swift_bridgeObjectRetain();
  v50 = v51 || *(_QWORD *)(v68 + 344) != 0;
  swift_bridgeObjectRelease();
  *(_BYTE *)(v68 + 536) = v50;
  if (v52 && v50)
  {
    v3 = *(_QWORD *)(v68 + 448);
    v45 = *(_QWORD *)(v68 + 424);
    v44 = Logger.wellnessIntents.unsafeMutableAddressor();
    swift_beginAccess();
    v72(v3, v44, v45);
    swift_endAccess();
    oslog = Logger.logObject.getter();
    v47 = static os_log_type_t.error.getter();
    *(_QWORD *)(v68 + 232) = 2;
    UnsignedInteger<>.init<A>(_:)();
    size = *(_DWORD *)(v68 + 524);
    v49 = _allocateUninitializedArray<A>(_:)();
    if (os_log_type_enabled(oslog, v47))
    {
      buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      v41 = createStorage<A>(capacity:type:)(0);
      v42 = createStorage<A>(capacity:type:)(0);
      *(_QWORD *)(v68 + 240) = buf;
      *(_QWORD *)(v68 + 248) = v41;
      *(_QWORD *)(v68 + 256) = v42;
      serialize(_:at:)(0, (_BYTE **)(v68 + 240));
      serialize(_:at:)(0, (_BYTE **)(v68 + 240));
      *(_QWORD *)(v68 + 264) = v49;
      v43 = (_QWORD *)swift_task_alloc();
      v43[2] = v68 + 240;
      v43[3] = v68 + 248;
      v43[4] = v68 + 256;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
      lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
      Sequence.forEach(_:)();
      swift_task_dealloc();
      _os_log_impl(&dword_24749F000, oslog, v47, "User specified dosage or dosageUnit while logging a scheduled med. This isn't currently supported. Returning failure.", buf, size);
      destroyStorage<A>(_:count:)(v41, 0, v39);
      destroyStorage<A>(_:count:)(v42, 0, MEMORY[0x24BEE4AD8] + 8);
      MEMORY[0x24957D398](buf, MEMORY[0x24BEE4260]);
    }
    swift_bridgeObjectRelease();
    v34 = *(_QWORD *)(v68 + 448);
    v35 = *(_QWORD *)(v68 + 424);
    v36 = *(_QWORD *)(v68 + 416);

    v56(v34, v35);
    type metadata accessor for LogSpecificMedicationsIntentResponse();
    v37 = LogSpecificMedicationsIntentResponse.__allocating_init(code:userActivity:)(5, 0);
    outlined destroy of DateInterval?(v36);
    v38 = v37;
  }
  else
  {
    v33 = *(_QWORD *)(v68 + 320);
    swift_bridgeObjectRetain();
    if (v33)
    {
      v30 = *(_QWORD *)(v68 + 320);
      v4 = *(const void **)(v68 + 416);
      v32 = *(void **)(v68 + 408);
      v31 = *(_QWORD *)(v68 + 368);
      *(_QWORD *)(v68 + 224) = v30;
      outlined init with copy of DateInterval?(v4, v32);
      if (v62((uint64_t)v32, 1, v31) != 1)
      {
        (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v68 + 376) + 32))(*(_QWORD *)(v68 + 392), *(_QWORD *)(v68 + 408), *(_QWORD *)(v68 + 368));
        v5 = (_QWORD *)swift_task_alloc();
        *(_QWORD *)(v68 + 464) = v5;
        *v5 = *(_QWORD *)(v68 + 136);
        v5[1] = SpecificMedicationsPersistor.save(startTime:endTime:hasMeridiem:medicationIDs:medStatusTaken:dosage:dosageUnit:);
        return SpecificMedicationsPersistor.saveScheduledMedication(named:specifiedDateInterval:medStatusTaken:hasMeridiem:)(v30, *(_QWORD *)(v68 + 392), *(_BYTE *)(v68 + 130) & 1, *(_BYTE *)(v68 + 129) & 1, *(_QWORD *)(v68 + 352), *(_QWORD *)(v68 + 360));
      }
      outlined destroy of DateInterval?(*(_QWORD *)(v68 + 408));
      swift_bridgeObjectRelease();
    }
    v29 = *(void **)(v68 + 400);
    v28 = *(_QWORD *)(v68 + 368);
    outlined init with copy of DateInterval?(*(const void **)(v68 + 416), v29);
    if (v62((uint64_t)v29, 1, v28) != 1)
    {
      (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v68 + 376) + 32))(*(_QWORD *)(v68 + 384), *(_QWORD *)(v68 + 400), *(_QWORD *)(v68 + 368));
      v7 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v68 + 480) = v7;
      *v7 = *(_QWORD *)(v68 + 136);
      v7[1] = SpecificMedicationsPersistor.save(startTime:endTime:hasMeridiem:medicationIDs:medStatusTaken:dosage:dosageUnit:);
      return SpecificMedicationsPersistor.saveScheduledMedication(specifiedDateInterval:medStatusTaken:hasMeridiem:)(*(_QWORD *)(v68 + 384), *(_BYTE *)(v68 + 130) & 1, *(_BYTE *)(v68 + 129) & 1, *(_QWORD *)(v68 + 352), *(_QWORD *)(v68 + 360));
    }
    v27 = *(_QWORD *)(v68 + 320);
    outlined destroy of DateInterval?(*(_QWORD *)(v68 + 400));
    swift_bridgeObjectRetain();
    if (v27)
    {
      v26 = *(_QWORD *)(v68 + 320);
      v25 = *(_BYTE *)(v68 + 131);
      *(_QWORD *)(v68 + 216) = v26;
      v8 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v68 + 496) = v8;
      *v8 = *(_QWORD *)(v68 + 136);
      v8[1] = SpecificMedicationsPersistor.save(startTime:endTime:hasMeridiem:medicationIDs:medStatusTaken:dosage:dosageUnit:);
      return SpecificMedicationsPersistor.saveMedication(named:medStatusTaken:dosage:dosageUnit:)(v26, *(_BYTE *)(v68 + 130) & 1, *(_QWORD *)(v68 + 328), v25 & 1, *(_QWORD *)(v68 + 336), *(_QWORD *)(v68 + 344), *(_QWORD *)(v68 + 352), *(_QWORD *)(v68 + 360));
    }
    v9 = *(_QWORD *)(v68 + 440);
    v20 = *(_QWORD *)(v68 + 424);
    v19 = Logger.wellnessIntents.unsafeMutableAddressor();
    swift_beginAccess();
    v72(v9, v19, v20);
    swift_endAccess();
    log = Logger.logObject.getter();
    v22 = static os_log_type_t.error.getter();
    *(_QWORD *)(v68 + 176) = 2;
    UnsignedInteger<>.init<A>(_:)();
    v21 = *(_DWORD *)(v68 + 516);
    v24 = _allocateUninitializedArray<A>(_:)();
    if (os_log_type_enabled(log, v22))
    {
      v15 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      v16 = createStorage<A>(capacity:type:)(0);
      v17 = createStorage<A>(capacity:type:)(0);
      *(_QWORD *)(v68 + 184) = v15;
      *(_QWORD *)(v68 + 192) = v16;
      *(_QWORD *)(v68 + 200) = v17;
      serialize(_:at:)(0, (_BYTE **)(v68 + 184));
      serialize(_:at:)(0, (_BYTE **)(v68 + 184));
      *(_QWORD *)(v68 + 208) = v24;
      v18 = (_QWORD *)swift_task_alloc();
      v18[2] = v68 + 184;
      v18[3] = v68 + 192;
      v18[4] = v68 + 200;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
      lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
      Sequence.forEach(_:)();
      swift_task_dealloc();
      _os_log_impl(&dword_24749F000, log, v22, "Neither time nor schedule specified even though this is a Specific Med Logging Intent Handler, returning .failure.", v15, v21);
      destroyStorage<A>(_:count:)(v16, 0, v14);
      destroyStorage<A>(_:count:)(v17, 0, MEMORY[0x24BEE4AD8] + 8);
      MEMORY[0x24957D398](v15, MEMORY[0x24BEE4260]);
    }
    swift_bridgeObjectRelease();
    v10 = *(_QWORD *)(v68 + 440);
    v11 = *(_QWORD *)(v68 + 424);
    v12 = *(_QWORD *)(v68 + 416);

    v56(v10, v11);
    type metadata accessor for LogSpecificMedicationsIntentResponse();
    v13 = LogSpecificMedicationsIntentResponse.__allocating_init(code:userActivity:)(5, 0);
    outlined destroy of DateInterval?(v12);
    v38 = v13;
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(char *))(*(_QWORD *)(v68 + 136) + 8))(v38);
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;

  v5 = v0[52];
  v1 = v0[49];
  v2 = v0[47];
  v3 = v0[46];
  v0[17] = v0;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_bridgeObjectRelease();
  outlined destroy of DateInterval?(v5);
  v6 = v0[59];
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(v0[17] + 8))(v6);
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;

  v5 = v0[52];
  v1 = v0[48];
  v2 = v0[47];
  v3 = v0[46];
  v0[17] = v0;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  outlined destroy of DateInterval?(v5);
  v6 = v0[61];
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(v0[17] + 8))(v6);
}

{
  _QWORD *v0;
  uint64_t v2;
  uint64_t v3;

  v2 = v0[52];
  v0[17] = v0;
  swift_bridgeObjectRelease();
  outlined destroy of DateInterval?(v2);
  v3 = v0[63];
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(v0[17] + 8))(v3);
}

uint64_t SpecificMedicationsPersistor.save(startTime:endTime:hasMeridiem:medicationIDs:medStatusTaken:dosage:dosageUnit:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;

  v3 = *v1;
  *(_QWORD *)(v3 + 136) = *v1;
  *(_QWORD *)(v3 + 472) = a1;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t *v1;
  uint64_t v3;

  v3 = *v1;
  *(_QWORD *)(v3 + 136) = *v1;
  *(_QWORD *)(v3 + 488) = a1;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t *v1;
  uint64_t v3;

  v3 = *v1;
  *(_QWORD *)(v3 + 136) = *v1;
  *(_QWORD *)(v3 + 504) = a1;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t SpecificMedicationsPersistor.saveScheduledMedication(named:specifiedDateInterval:medStatusTaken:hasMeridiem:)(uint64_t a1, uint64_t a2, char a3, char a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)(v6 + 240) = a6;
  *(_QWORD *)(v6 + 232) = a5;
  *(_BYTE *)(v6 + 450) = a4 & 1;
  *(_BYTE *)(v6 + 449) = a3 & 1;
  *(_QWORD *)(v6 + 224) = a2;
  *(_QWORD *)(v6 + 216) = a1;
  *(_QWORD *)(v6 + 104) = v6;
  *(_QWORD *)(v6 + 112) = 0;
  *(_QWORD *)(v6 + 120) = 0;
  *(_BYTE *)(v6 + 448) = 0;
  *(_BYTE *)(v6 + 456) = 0;
  *(_QWORD *)(v6 + 40) = 0;
  *(_QWORD *)(v6 + 48) = 0;
  *(_QWORD *)(v6 + 128) = 0;
  *(_QWORD *)(v6 + 136) = 0;
  *(_QWORD *)(v6 + 56) = 0;
  *(_QWORD *)(v6 + 64) = 0;
  *(_BYTE *)(v6 + 464) = 0;
  *(_BYTE *)(v6 + 472) = 0;
  *(_QWORD *)(v6 + 88) = 0;
  *(_QWORD *)(v6 + 96) = 0;
  *(_QWORD *)(v6 + 168) = 0;
  *(_QWORD *)(v6 + 184) = 0;
  *(_QWORD *)(v6 + 192) = 0;
  v7 = type metadata accessor for Logger();
  *(_QWORD *)(v6 + 248) = v7;
  *(_QWORD *)(v6 + 256) = *(_QWORD *)(v7 - 8);
  *(_QWORD *)(v6 + 264) = swift_task_alloc();
  v8 = type metadata accessor for DateInterval();
  *(_QWORD *)(v6 + 272) = v8;
  *(_QWORD *)(v6 + 280) = *(_QWORD *)(v8 - 8);
  *(_QWORD *)(v6 + 288) = swift_task_alloc();
  *(_QWORD *)(v6 + 296) = swift_task_alloc();
  *(_QWORD *)(v6 + 112) = a1;
  *(_QWORD *)(v6 + 120) = a2;
  *(_BYTE *)(v6 + 448) = a3 & 1;
  *(_BYTE *)(v6 + 456) = a4 & 1;
  *(_QWORD *)(v6 + 40) = a5;
  *(_QWORD *)(v6 + 48) = a6;
  return swift_task_switch();
}

uint64_t SpecificMedicationsPersistor.saveScheduledMedication(named:specifiedDateInterval:medStatusTaken:hasMeridiem:)()
{
  uint64_t v0;
  char v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  unsigned __int8 v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v1 = *(_BYTE *)(v0 + 450);
  *(_QWORD *)(v0 + 104) = v0;
  if ((v1 & 1) != 0)
  {
    v2 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v19 + 304) = v2;
    *v2 = *(_QWORD *)(v19 + 104);
    v2[1] = SpecificMedicationsPersistor.saveScheduledMedication(named:specifiedDateInterval:medStatusTaken:hasMeridiem:);
    return SpecificMedicationsPersistor.saveScheduledMedication(named:specifiedDateInterval:medStatusTaken:)(*(_QWORD *)(v19 + 216), *(_QWORD *)(v19 + 224), *(_BYTE *)(v19 + 449) & 1, *(_QWORD *)(v19 + 232), *(_QWORD *)(v19 + 240));
  }
  else
  {
    v16 = *(_QWORD *)(v19 + 216);
    getFallbackDateInterval(specifiedDateInterval:)(*(_QWORD *)(v19 + 224), *(_QWORD *)(v19 + 296));
    type metadata accessor for HKMedicationExposableDoseEvent();
    *(_QWORD *)(v19 + 128) = _allocateUninitializedArray<A>(_:)();
    *(_QWORD *)(v19 + 136) = _allocateUninitializedArray<A>(_:)();
    swift_bridgeObjectRetain();
    *(_QWORD *)(v19 + 144) = v16;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    lazy protocol witness table accessor for type [String] and conformance [A]();
    Collection<>.makeIterator()();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<[String]>);
    IndexingIterator.next()();
    v17 = *(_QWORD *)(v19 + 72);
    *(_QWORD *)(v19 + 312) = v17;
    v18 = *(_QWORD *)(v19 + 80);
    *(_QWORD *)(v19 + 320) = v18;
    if (v18)
    {
      *(_QWORD *)(v19 + 88) = v17;
      *(_QWORD *)(v19 + 96) = v18;
      *(_QWORD *)(v19 + 328) = type metadata accessor for HKMedicationIdentifier();
      swift_bridgeObjectRetain();
      v15 = HKMedicationIdentifier.__allocating_init(rawIdentifier:)();
      *(_QWORD *)(v19 + 336) = v15;
      v3 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v19 + 344) = v3;
      *v3 = *(_QWORD *)(v19 + 104);
      v3[1] = SpecificMedicationsPersistor.saveScheduledMedication(named:specifiedDateInterval:medStatusTaken:hasMeridiem:);
      return SpecificMedicationsPersistor.getDoseEvents(for:medicationIdentifier:)(*(_QWORD *)(v19 + 224), (uint64_t)v15, *(_QWORD *)(v19 + 232), *(_QWORD *)(v19 + 240));
    }
    else
    {
      outlined destroy of [HKQuantityType]();
      v11 = *(_QWORD *)(v19 + 128);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      *(_QWORD *)(v19 + 152) = v11;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [HKMedicationExposableDoseEvent]);
      lazy protocol witness table accessor for type [HKMedicationExposableDoseEvent] and conformance [A]();
      v12 = Collection.isEmpty.getter();
      outlined destroy of [HKQuantityType]();
      swift_bridgeObjectRelease();
      *(_BYTE *)(v19 + 464) = (v12 ^ 1) & 1;
      v13 = *(_QWORD *)(v19 + 136);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      *(_QWORD *)(v19 + 160) = v13;
      v14 = Collection.isEmpty.getter();
      outlined destroy of [HKQuantityType]();
      swift_bridgeObjectRelease();
      *(_BYTE *)(v19 + 472) = (v14 ^ 1) & 1;
      if (((v12 ^ 1) & 1) != 0 || ((v14 ^ 1) & 1) != 0)
      {
        if (((v12 ^ 1) & 1) != 0 && ((v14 ^ 1) & 1) != 0)
        {
          SpecificMedicationsPersistor.getDateIntervalCloserToNow(firstDateInterval:secondDateInterval:)(*(_QWORD *)(v19 + 224), *(_QWORD *)(v19 + 296), *(_QWORD *)(v19 + 232), *(_QWORD *)(v19 + 240), *(_QWORD *)(v19 + 288));
          v4 = (_QWORD *)swift_task_alloc();
          *(_QWORD *)(v19 + 400) = v4;
          *v4 = *(_QWORD *)(v19 + 104);
          v4[1] = SpecificMedicationsPersistor.saveScheduledMedication(named:specifiedDateInterval:medStatusTaken:hasMeridiem:);
          return SpecificMedicationsPersistor.saveScheduledMedication(named:specifiedDateInterval:medStatusTaken:)(*(_QWORD *)(v19 + 216), *(_QWORD *)(v19 + 288), *(_BYTE *)(v19 + 449) & 1, *(_QWORD *)(v19 + 232), *(_QWORD *)(v19 + 240));
        }
        else
        {
          v6 = (_QWORD *)swift_task_alloc();
          if (((v12 ^ 1) & 1) != 0)
          {
            *(_QWORD *)(v19 + 416) = v6;
            *v6 = *(_QWORD *)(v19 + 104);
            v6[1] = SpecificMedicationsPersistor.saveScheduledMedication(named:specifiedDateInterval:medStatusTaken:hasMeridiem:);
            return SpecificMedicationsPersistor.saveScheduledMedication(named:specifiedDateInterval:medStatusTaken:)(*(_QWORD *)(v19 + 216), *(_QWORD *)(v19 + 224), *(_BYTE *)(v19 + 449) & 1, *(_QWORD *)(v19 + 232), *(_QWORD *)(v19 + 240));
          }
          else
          {
            *(_QWORD *)(v19 + 432) = v6;
            *v6 = *(_QWORD *)(v19 + 104);
            v6[1] = SpecificMedicationsPersistor.saveScheduledMedication(named:specifiedDateInterval:medStatusTaken:hasMeridiem:);
            return SpecificMedicationsPersistor.saveScheduledMedication(named:specifiedDateInterval:medStatusTaken:)(*(_QWORD *)(v19 + 216), *(_QWORD *)(v19 + 296), *(_BYTE *)(v19 + 449) & 1, *(_QWORD *)(v19 + 232), *(_QWORD *)(v19 + 240));
          }
        }
      }
      else
      {
        v9 = *(_QWORD *)(v19 + 296);
        v7 = *(_QWORD *)(v19 + 280);
        v8 = *(_QWORD *)(v19 + 272);
        type metadata accessor for LogSpecificMedicationsIntentResponse();
        v10 = LogSpecificMedicationsIntentResponse.__allocating_init(code:userActivity:)(105, 0);
        outlined destroy of [HKQuantityType]();
        outlined destroy of [HKQuantityType]();
        (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v9, v8);
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        return (*(uint64_t (**)(char *))(*(_QWORD *)(v19 + 104) + 8))(v10);
      }
    }
  }
}

{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v4;
  id v5;

  v1 = v0[44];
  v0[13] = v0;
  v0[23] = v1;
  swift_bridgeObjectRetain();
  v5 = HKMedicationIdentifier.__allocating_init(rawIdentifier:)();
  v0[46] = v5;
  v2 = (_QWORD *)swift_task_alloc();
  v4[47] = v2;
  *v2 = v4[13];
  v2[1] = SpecificMedicationsPersistor.saveScheduledMedication(named:specifiedDateInterval:medStatusTaken:hasMeridiem:);
  return SpecificMedicationsPersistor.getDoseEvents(for:medicationIdentifier:)(v4[37], (uint64_t)v5, v4[29], v4[30]);
}

{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  unsigned __int8 v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v15 = v0[48];
  v16 = v0[44];
  v0[13] = v0;
  v0[24] = v15;
  swift_bridgeObjectRetain();
  v0[25] = v16;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [HKMedicationExposableDoseEvent]);
  lazy protocol witness table accessor for type [HKMedicationExposableDoseEvent] and conformance [A]();
  Array.append<A>(contentsOf:)();
  swift_bridgeObjectRetain();
  v0[26] = v15;
  Array.append<A>(contentsOf:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<[String]>);
  IndexingIterator.next()();
  v17 = v0[9];
  v0[39] = v17;
  v18 = v0[10];
  v0[40] = v18;
  if (v18)
  {
    *(_QWORD *)(v14 + 88) = v17;
    *(_QWORD *)(v14 + 96) = v18;
    *(_QWORD *)(v14 + 328) = type metadata accessor for HKMedicationIdentifier();
    swift_bridgeObjectRetain();
    v13 = HKMedicationIdentifier.__allocating_init(rawIdentifier:)();
    *(_QWORD *)(v14 + 336) = v13;
    v1 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v14 + 344) = v1;
    *v1 = *(_QWORD *)(v14 + 104);
    v1[1] = SpecificMedicationsPersistor.saveScheduledMedication(named:specifiedDateInterval:medStatusTaken:hasMeridiem:);
    return SpecificMedicationsPersistor.getDoseEvents(for:medicationIdentifier:)(*(_QWORD *)(v14 + 224), (uint64_t)v13, *(_QWORD *)(v14 + 232), *(_QWORD *)(v14 + 240));
  }
  else
  {
    outlined destroy of [HKQuantityType]();
    v9 = *(_QWORD *)(v14 + 128);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    *(_QWORD *)(v14 + 152) = v9;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [HKMedicationExposableDoseEvent]);
    lazy protocol witness table accessor for type [HKMedicationExposableDoseEvent] and conformance [A]();
    v10 = Collection.isEmpty.getter();
    outlined destroy of [HKQuantityType]();
    swift_bridgeObjectRelease();
    *(_BYTE *)(v14 + 464) = (v10 ^ 1) & 1;
    v11 = *(_QWORD *)(v14 + 136);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    *(_QWORD *)(v14 + 160) = v11;
    v12 = Collection.isEmpty.getter();
    outlined destroy of [HKQuantityType]();
    swift_bridgeObjectRelease();
    *(_BYTE *)(v14 + 472) = (v12 ^ 1) & 1;
    if (((v10 ^ 1) & 1) != 0 || ((v12 ^ 1) & 1) != 0)
    {
      if (((v10 ^ 1) & 1) != 0 && ((v12 ^ 1) & 1) != 0)
      {
        SpecificMedicationsPersistor.getDateIntervalCloserToNow(firstDateInterval:secondDateInterval:)(*(_QWORD *)(v14 + 224), *(_QWORD *)(v14 + 296), *(_QWORD *)(v14 + 232), *(_QWORD *)(v14 + 240), *(_QWORD *)(v14 + 288));
        v3 = (_QWORD *)swift_task_alloc();
        *(_QWORD *)(v14 + 400) = v3;
        *v3 = *(_QWORD *)(v14 + 104);
        v3[1] = SpecificMedicationsPersistor.saveScheduledMedication(named:specifiedDateInterval:medStatusTaken:hasMeridiem:);
        return SpecificMedicationsPersistor.saveScheduledMedication(named:specifiedDateInterval:medStatusTaken:)(*(_QWORD *)(v14 + 216), *(_QWORD *)(v14 + 288), *(_BYTE *)(v14 + 449) & 1, *(_QWORD *)(v14 + 232), *(_QWORD *)(v14 + 240));
      }
      else
      {
        v4 = (_QWORD *)swift_task_alloc();
        if (((v10 ^ 1) & 1) != 0)
        {
          *(_QWORD *)(v14 + 416) = v4;
          *v4 = *(_QWORD *)(v14 + 104);
          v4[1] = SpecificMedicationsPersistor.saveScheduledMedication(named:specifiedDateInterval:medStatusTaken:hasMeridiem:);
          return SpecificMedicationsPersistor.saveScheduledMedication(named:specifiedDateInterval:medStatusTaken:)(*(_QWORD *)(v14 + 216), *(_QWORD *)(v14 + 224), *(_BYTE *)(v14 + 449) & 1, *(_QWORD *)(v14 + 232), *(_QWORD *)(v14 + 240));
        }
        else
        {
          *(_QWORD *)(v14 + 432) = v4;
          *v4 = *(_QWORD *)(v14 + 104);
          v4[1] = SpecificMedicationsPersistor.saveScheduledMedication(named:specifiedDateInterval:medStatusTaken:hasMeridiem:);
          return SpecificMedicationsPersistor.saveScheduledMedication(named:specifiedDateInterval:medStatusTaken:)(*(_QWORD *)(v14 + 216), *(_QWORD *)(v14 + 296), *(_BYTE *)(v14 + 449) & 1, *(_QWORD *)(v14 + 232), *(_QWORD *)(v14 + 240));
        }
      }
    }
    else
    {
      v7 = *(_QWORD *)(v14 + 296);
      v5 = *(_QWORD *)(v14 + 280);
      v6 = *(_QWORD *)(v14 + 272);
      type metadata accessor for LogSpecificMedicationsIntentResponse();
      v8 = LogSpecificMedicationsIntentResponse.__allocating_init(code:userActivity:)(105, 0);
      outlined destroy of [HKQuantityType]();
      outlined destroy of [HKQuantityType]();
      (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v7, v6);
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      return (*(uint64_t (**)(char *))(*(_QWORD *)(v14 + 104) + 8))(v8);
    }
  }
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  void (*v5)(uint64_t);
  uint64_t v6;
  uint64_t v7;

  v6 = v0[37];
  v1 = v0[36];
  v2 = v0[35];
  v4 = v0[34];
  v0[13] = v0;
  v5 = *(void (**)(uint64_t))(v2 + 8);
  v5(v1);
  outlined destroy of [HKQuantityType]();
  outlined destroy of [HKQuantityType]();
  ((void (*)(uint64_t, uint64_t))v5)(v6, v4);
  v7 = v0[51];
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(v0[13] + 8))(v7);
}

{
  _QWORD *v0;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v4 = v0[37];
  v2 = v0[35];
  v3 = v0[34];
  v0[13] = v0;
  outlined destroy of [HKQuantityType]();
  outlined destroy of [HKQuantityType]();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v4, v3);
  v5 = v0[53];
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(v0[13] + 8))(v5);
}

{
  _QWORD *v0;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v4 = v0[37];
  v2 = v0[35];
  v3 = v0[34];
  v0[13] = v0;
  outlined destroy of [HKQuantityType]();
  outlined destroy of [HKQuantityType]();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v4, v3);
  v5 = v0[55];
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(v0[13] + 8))(v5);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  id v3;
  id v4;
  _QWORD *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint8_t *buf;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  uint32_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  NSObject *v31;
  os_log_type_t v32;
  uint8_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t (*v36)(uint64_t, uint64_t, uint64_t);
  uint64_t v37;

  v1 = *(void **)(v0 + 336);
  *(_QWORD *)(v0 + 104) = v0;

  swift_bridgeObjectRelease();
  outlined destroy of [HKQuantityType]();
  v22 = *(id *)(v0 + 360);
  v2 = *(_QWORD *)(v0 + 264);
  v19 = *(_QWORD *)(v0 + 256);
  v21 = *(_QWORD *)(v0 + 248);
  v3 = v22;
  *(_QWORD *)(v0 + 168) = v22;
  v20 = Logger.wellnessIntents.unsafeMutableAddressor();
  swift_beginAccess();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v19 + 16))(v2, v20, v21);
  swift_endAccess();
  v4 = v22;
  v24 = swift_allocObject();
  *(_QWORD *)(v24 + 16) = v22;
  default argument 2 of OSLogInterpolation.appendInterpolation(_:privacy:attributes:)();
  swift_bridgeObjectRelease();
  v31 = Logger.logObject.getter();
  v32 = static os_log_type_t.error.getter();
  *(_QWORD *)(v0 + 176) = 12;
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  v23 = *(_DWORD *)(v0 + 452);
  v27 = swift_allocObject();
  *(_BYTE *)(v27 + 16) = 64;
  v28 = swift_allocObject();
  *(_BYTE *)(v28 + 16) = 8;
  v25 = swift_allocObject();
  *(_QWORD *)(v25 + 16) = partial apply for implicit closure #10 in getPreferredUnit(for:store:);
  *(_QWORD *)(v25 + 24) = v24;
  v26 = swift_allocObject();
  *(_QWORD *)(v26 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:attributes:);
  *(_QWORD *)(v26 + 24) = v25;
  v29 = swift_allocObject();
  *(_QWORD *)(v29 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:);
  *(_QWORD *)(v29 + 24) = v26;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
  _allocateUninitializedArray<A>(_:)();
  v30 = v5;
  swift_retain();
  *v30 = partial apply for closure #1 in OSLogArguments.append(_:);
  v30[1] = v27;
  swift_retain();
  v30[2] = partial apply for closure #1 in OSLogArguments.append(_:);
  v30[3] = v28;
  swift_retain();
  v30[4] = partial apply for closure #1 in OSLogArguments.append(_:);
  v30[5] = v29;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(v31, v32))
  {
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    v16 = createStorage<A>(capacity:type:)(1);
    v17 = createStorage<A>(capacity:type:)(0);
    v33 = buf;
    v34 = v16;
    v35 = v17;
    serialize(_:at:)(2, &v33);
    serialize(_:at:)(1, &v33);
    v36 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v37 = v27;
    closure #1 in osLogInternal(_:log:type:)(&v36, (uint64_t)&v33, (uint64_t)&v34, (uint64_t)&v35);
    v36 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v37 = v28;
    closure #1 in osLogInternal(_:log:type:)(&v36, (uint64_t)&v33, (uint64_t)&v34, (uint64_t)&v35);
    v36 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v37 = v29;
    closure #1 in osLogInternal(_:log:type:)(&v36, (uint64_t)&v33, (uint64_t)&v34, (uint64_t)&v35);
    _os_log_impl(&dword_24749F000, v31, v32, "Failed fetching dose events for specified timeframe: %@", buf, v23);
    destroyStorage<A>(_:count:)(v16, 1, v14);
    destroyStorage<A>(_:count:)(v17, 0, MEMORY[0x24BEE4AD8] + 8);
    MEMORY[0x24957D398](buf, MEMORY[0x24BEE4260]);
    swift_release();
    swift_release();
    swift_release();
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
  }
  v12 = v18[37];
  v10 = v18[35];
  v11 = v18[34];
  v8 = v18[33];
  v7 = v18[32];
  v9 = v18[31];

  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v8, v9);
  type metadata accessor for LogSpecificMedicationsIntentResponse();
  v13 = LogSpecificMedicationsIntentResponse.__allocating_init(code:userActivity:)(5, 0);

  outlined destroy of [HKQuantityType]();
  outlined destroy of [HKQuantityType]();
  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v12, v11);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(char *))(v18[13] + 8))(v13);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  id v3;
  id v4;
  _QWORD *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint8_t *buf;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  uint32_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  NSObject *v31;
  os_log_type_t v32;
  uint8_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t (*v36)(uint64_t, uint64_t, uint64_t);
  uint64_t v37;

  v1 = *(void **)(v0 + 368);
  *(_QWORD *)(v0 + 104) = v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of [HKQuantityType]();
  v22 = *(id *)(v0 + 392);
  v2 = *(_QWORD *)(v0 + 264);
  v19 = *(_QWORD *)(v0 + 256);
  v21 = *(_QWORD *)(v0 + 248);
  v3 = v22;
  *(_QWORD *)(v0 + 168) = v22;
  v20 = Logger.wellnessIntents.unsafeMutableAddressor();
  swift_beginAccess();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v19 + 16))(v2, v20, v21);
  swift_endAccess();
  v4 = v22;
  v24 = swift_allocObject();
  *(_QWORD *)(v24 + 16) = v22;
  default argument 2 of OSLogInterpolation.appendInterpolation(_:privacy:attributes:)();
  swift_bridgeObjectRelease();
  v31 = Logger.logObject.getter();
  v32 = static os_log_type_t.error.getter();
  *(_QWORD *)(v0 + 176) = 12;
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  v23 = *(_DWORD *)(v0 + 452);
  v27 = swift_allocObject();
  *(_BYTE *)(v27 + 16) = 64;
  v28 = swift_allocObject();
  *(_BYTE *)(v28 + 16) = 8;
  v25 = swift_allocObject();
  *(_QWORD *)(v25 + 16) = partial apply for implicit closure #10 in getPreferredUnit(for:store:);
  *(_QWORD *)(v25 + 24) = v24;
  v26 = swift_allocObject();
  *(_QWORD *)(v26 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:attributes:);
  *(_QWORD *)(v26 + 24) = v25;
  v29 = swift_allocObject();
  *(_QWORD *)(v29 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:);
  *(_QWORD *)(v29 + 24) = v26;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
  _allocateUninitializedArray<A>(_:)();
  v30 = v5;
  swift_retain();
  *v30 = partial apply for closure #1 in OSLogArguments.append(_:);
  v30[1] = v27;
  swift_retain();
  v30[2] = partial apply for closure #1 in OSLogArguments.append(_:);
  v30[3] = v28;
  swift_retain();
  v30[4] = partial apply for closure #1 in OSLogArguments.append(_:);
  v30[5] = v29;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(v31, v32))
  {
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    v16 = createStorage<A>(capacity:type:)(1);
    v17 = createStorage<A>(capacity:type:)(0);
    v33 = buf;
    v34 = v16;
    v35 = v17;
    serialize(_:at:)(2, &v33);
    serialize(_:at:)(1, &v33);
    v36 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v37 = v27;
    closure #1 in osLogInternal(_:log:type:)(&v36, (uint64_t)&v33, (uint64_t)&v34, (uint64_t)&v35);
    v36 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v37 = v28;
    closure #1 in osLogInternal(_:log:type:)(&v36, (uint64_t)&v33, (uint64_t)&v34, (uint64_t)&v35);
    v36 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v37 = v29;
    closure #1 in osLogInternal(_:log:type:)(&v36, (uint64_t)&v33, (uint64_t)&v34, (uint64_t)&v35);
    _os_log_impl(&dword_24749F000, v31, v32, "Failed fetching dose events for specified timeframe: %@", buf, v23);
    destroyStorage<A>(_:count:)(v16, 1, v14);
    destroyStorage<A>(_:count:)(v17, 0, MEMORY[0x24BEE4AD8] + 8);
    MEMORY[0x24957D398](buf, MEMORY[0x24BEE4260]);
    swift_release();
    swift_release();
    swift_release();
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
  }
  v12 = v18[37];
  v10 = v18[35];
  v11 = v18[34];
  v8 = v18[33];
  v7 = v18[32];
  v9 = v18[31];

  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v8, v9);
  type metadata accessor for LogSpecificMedicationsIntentResponse();
  v13 = LogSpecificMedicationsIntentResponse.__allocating_init(code:userActivity:)(5, 0);

  outlined destroy of [HKQuantityType]();
  outlined destroy of [HKQuantityType]();
  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v12, v11);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(char *))(v18[13] + 8))(v13);
}

uint64_t SpecificMedicationsPersistor.saveScheduledMedication(named:specifiedDateInterval:medStatusTaken:hasMeridiem:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;

  v3 = *v1;
  *(_QWORD *)(*v1 + 104) = *v1;
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v3 + 104) + 8))(a1);
}

{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v5;

  v3 = (_QWORD *)*v2;
  v3[13] = *v2;
  v3 += 13;
  v5 = v3 - 11;
  v3[31] = a1;
  v3[32] = v1;
  swift_task_dealloc();
  if (!v1)

  return swift_task_switch();
}

{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v5;

  v3 = (_QWORD *)*v2;
  v3[13] = *v2;
  v3 += 13;
  v5 = v3 - 11;
  v3[35] = a1;
  v3[36] = v1;
  swift_task_dealloc();
  if (!v1)

  return swift_task_switch();
}

{
  uint64_t *v1;
  uint64_t v3;

  v3 = *v1;
  *(_QWORD *)(v3 + 104) = *v1;
  *(_QWORD *)(v3 + 408) = a1;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t *v1;
  uint64_t v3;

  v3 = *v1;
  *(_QWORD *)(v3 + 104) = *v1;
  *(_QWORD *)(v3 + 424) = a1;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t *v1;
  uint64_t v3;

  v3 = *v1;
  *(_QWORD *)(v3 + 104) = *v1;
  *(_QWORD *)(v3 + 440) = a1;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t SpecificMedicationsPersistor.saveScheduledMedication(specifiedDateInterval:medStatusTaken:hasMeridiem:)(uint64_t a1, char a2, char a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)(v5 + 136) = a5;
  *(_QWORD *)(v5 + 128) = a4;
  *(_BYTE *)(v5 + 306) = a3 & 1;
  *(_BYTE *)(v5 + 305) = a2 & 1;
  *(_QWORD *)(v5 + 120) = a1;
  *(_QWORD *)(v5 + 56) = v5;
  *(_QWORD *)(v5 + 64) = 0;
  *(_BYTE *)(v5 + 304) = 0;
  *(_BYTE *)(v5 + 312) = 0;
  *(_QWORD *)(v5 + 40) = 0;
  *(_QWORD *)(v5 + 48) = 0;
  *(_QWORD *)(v5 + 72) = 0;
  *(_QWORD *)(v5 + 88) = 0;
  *(_QWORD *)(v5 + 96) = 0;
  *(_BYTE *)(v5 + 320) = 0;
  *(_BYTE *)(v5 + 328) = 0;
  v6 = type metadata accessor for Logger();
  *(_QWORD *)(v5 + 144) = v6;
  *(_QWORD *)(v5 + 152) = *(_QWORD *)(v6 - 8);
  *(_QWORD *)(v5 + 160) = swift_task_alloc();
  v7 = type metadata accessor for DateInterval();
  *(_QWORD *)(v5 + 168) = v7;
  *(_QWORD *)(v5 + 176) = *(_QWORD *)(v7 - 8);
  *(_QWORD *)(v5 + 184) = swift_task_alloc();
  *(_QWORD *)(v5 + 192) = swift_task_alloc();
  *(_QWORD *)(v5 + 64) = a1;
  *(_BYTE *)(v5 + 304) = a2 & 1;
  *(_BYTE *)(v5 + 312) = a3 & 1;
  *(_QWORD *)(v5 + 40) = a4;
  *(_QWORD *)(v5 + 48) = a5;
  return swift_task_switch();
}

uint64_t SpecificMedicationsPersistor.saveScheduledMedication(specifiedDateInterval:medStatusTaken:hasMeridiem:)()
{
  uint64_t v0;
  char v1;
  _QWORD *v2;
  _QWORD *v4;
  uint64_t v5;

  v1 = *(_BYTE *)(v0 + 306);
  *(_QWORD *)(v0 + 56) = v0;
  if ((v1 & 1) != 0)
  {
    v2 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v5 + 200) = v2;
    *v2 = *(_QWORD *)(v5 + 56);
    v2[1] = SpecificMedicationsPersistor.saveScheduledMedication(specifiedDateInterval:medStatusTaken:hasMeridiem:);
    return SpecificMedicationsPersistor.saveScheduledMedication(specifiedDateInterval:medStatusTaken:)(*(_QWORD *)(v5 + 120), *(_BYTE *)(v5 + 305) & 1, *(_QWORD *)(v5 + 128), *(_QWORD *)(v5 + 136));
  }
  else
  {
    getFallbackDateInterval(specifiedDateInterval:)(*(_QWORD *)(v5 + 120), *(_QWORD *)(v5 + 192));
    v4 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v5 + 208) = v4;
    *v4 = *(_QWORD *)(v5 + 56);
    v4[1] = SpecificMedicationsPersistor.saveScheduledMedication(specifiedDateInterval:medStatusTaken:hasMeridiem:);
    return SpecificMedicationsPersistor.getDoseEvents(for:medicationIdentifier:)(*(_QWORD *)(v5 + 120), 0, *(_QWORD *)(v5 + 128), *(_QWORD *)(v5 + 136));
  }
}

{
  uint64_t v0;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  unsigned __int8 v12;

  v11 = *(_QWORD *)(v0 + 240);
  v9 = *(_QWORD *)(v0 + 216);
  *(_QWORD *)(v0 + 56) = v0;
  *(_QWORD *)(v0 + 96) = v11;
  swift_bridgeObjectRetain();
  *(_QWORD *)(v0 + 104) = v9;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [HKMedicationExposableDoseEvent]);
  lazy protocol witness table accessor for type [HKMedicationExposableDoseEvent] and conformance [A]();
  v10 = Collection.isEmpty.getter();
  outlined destroy of [HKQuantityType]();
  *(_BYTE *)(v0 + 320) = (v10 ^ 1) & 1;
  swift_bridgeObjectRetain();
  *(_QWORD *)(v0 + 112) = v11;
  v12 = Collection.isEmpty.getter();
  outlined destroy of [HKQuantityType]();
  *(_BYTE *)(v0 + 328) = (v12 ^ 1) & 1;
  if (((v10 ^ 1) & 1) != 0 || ((v12 ^ 1) & 1) != 0)
  {
    if (((v10 ^ 1) & 1) != 0 && ((v12 ^ 1) & 1) != 0)
    {
      SpecificMedicationsPersistor.getDateIntervalCloserToNow(firstDateInterval:secondDateInterval:)(*(_QWORD *)(v8 + 120), *(_QWORD *)(v8 + 192), *(_QWORD *)(v8 + 128), *(_QWORD *)(v8 + 136), *(_QWORD *)(v8 + 184));
      v2 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v8 + 256) = v2;
      *v2 = *(_QWORD *)(v8 + 56);
      v2[1] = SpecificMedicationsPersistor.saveScheduledMedication(specifiedDateInterval:medStatusTaken:hasMeridiem:);
      return SpecificMedicationsPersistor.saveScheduledMedication(specifiedDateInterval:medStatusTaken:)(*(_QWORD *)(v8 + 184), *(_BYTE *)(v8 + 305) & 1, *(_QWORD *)(v8 + 128), *(_QWORD *)(v8 + 136));
    }
    else
    {
      v3 = (_QWORD *)swift_task_alloc();
      if (((v10 ^ 1) & 1) != 0)
      {
        *(_QWORD *)(v8 + 272) = v3;
        *v3 = *(_QWORD *)(v8 + 56);
        v3[1] = SpecificMedicationsPersistor.saveScheduledMedication(specifiedDateInterval:medStatusTaken:hasMeridiem:);
        return SpecificMedicationsPersistor.saveScheduledMedication(specifiedDateInterval:medStatusTaken:)(*(_QWORD *)(v8 + 120), *(_BYTE *)(v8 + 305) & 1, *(_QWORD *)(v8 + 128), *(_QWORD *)(v8 + 136));
      }
      else
      {
        *(_QWORD *)(v8 + 288) = v3;
        *v3 = *(_QWORD *)(v8 + 56);
        v3[1] = SpecificMedicationsPersistor.saveScheduledMedication(specifiedDateInterval:medStatusTaken:hasMeridiem:);
        return SpecificMedicationsPersistor.saveScheduledMedication(specifiedDateInterval:medStatusTaken:)(*(_QWORD *)(v8 + 192), *(_BYTE *)(v8 + 305) & 1, *(_QWORD *)(v8 + 128), *(_QWORD *)(v8 + 136));
      }
    }
  }
  else
  {
    v5 = *(_QWORD *)(v8 + 192);
    v4 = *(_QWORD *)(v8 + 176);
    v6 = *(_QWORD *)(v8 + 168);
    type metadata accessor for LogSpecificMedicationsIntentResponse();
    v7 = LogSpecificMedicationsIntentResponse.__allocating_init(code:userActivity:)(105, 0);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v5, v6);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(char *))(*(_QWORD *)(v8 + 56) + 8))(v7);
  }
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t);
  uint64_t v7;

  v4 = v0[24];
  v1 = v0[23];
  v2 = v0[22];
  v5 = v0[21];
  v0[7] = v0;
  v6 = *(void (**)(uint64_t))(v2 + 8);
  v6(v1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  ((void (*)(uint64_t, uint64_t))v6)(v4, v5);
  v7 = v0[33];
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(v0[7] + 8))(v7);
}

{
  _QWORD *v0;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = v0[24];
  v2 = v0[22];
  v4 = v0[21];
  v0[7] = v0;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v3, v4);
  v5 = v0[35];
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(v0[7] + 8))(v5);
}

{
  _QWORD *v0;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = v0[24];
  v2 = v0[22];
  v4 = v0[21];
  v0[7] = v0;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v3, v4);
  v5 = v0[37];
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(v0[7] + 8))(v5);
}

{
  uint64_t v0;
  uint64_t v1;
  id v2;
  id v3;
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint8_t *buf;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  uint32_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  NSObject *v30;
  os_log_type_t v31;
  uint8_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t (*v35)(uint64_t, uint64_t, uint64_t);
  uint64_t v36;

  *(_QWORD *)(v0 + 56) = v0;
  v21 = *(id *)(v0 + 224);
  v1 = *(_QWORD *)(v0 + 160);
  v18 = *(_QWORD *)(v0 + 152);
  v20 = *(_QWORD *)(v0 + 144);
  v2 = v21;
  *(_QWORD *)(v0 + 72) = v21;
  v19 = Logger.wellnessIntents.unsafeMutableAddressor();
  swift_beginAccess();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v18 + 16))(v1, v19, v20);
  swift_endAccess();
  v3 = v21;
  v23 = swift_allocObject();
  *(_QWORD *)(v23 + 16) = v21;
  default argument 2 of OSLogInterpolation.appendInterpolation(_:privacy:attributes:)();
  swift_bridgeObjectRelease();
  v30 = Logger.logObject.getter();
  v31 = static os_log_type_t.error.getter();
  *(_QWORD *)(v0 + 80) = 12;
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  v22 = *(_DWORD *)(v0 + 308);
  v26 = swift_allocObject();
  *(_BYTE *)(v26 + 16) = 64;
  v27 = swift_allocObject();
  *(_BYTE *)(v27 + 16) = 8;
  v24 = swift_allocObject();
  *(_QWORD *)(v24 + 16) = partial apply for implicit closure #10 in getPreferredUnit(for:store:);
  *(_QWORD *)(v24 + 24) = v23;
  v25 = swift_allocObject();
  *(_QWORD *)(v25 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:attributes:);
  *(_QWORD *)(v25 + 24) = v24;
  v28 = swift_allocObject();
  *(_QWORD *)(v28 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:);
  *(_QWORD *)(v28 + 24) = v25;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
  _allocateUninitializedArray<A>(_:)();
  v29 = v4;
  swift_retain();
  *v29 = partial apply for closure #1 in OSLogArguments.append(_:);
  v29[1] = v26;
  swift_retain();
  v29[2] = partial apply for closure #1 in OSLogArguments.append(_:);
  v29[3] = v27;
  swift_retain();
  v29[4] = partial apply for closure #1 in OSLogArguments.append(_:);
  v29[5] = v28;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(v30, v31))
  {
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    v15 = createStorage<A>(capacity:type:)(1);
    v16 = createStorage<A>(capacity:type:)(0);
    v32 = buf;
    v33 = v15;
    v34 = v16;
    serialize(_:at:)(2, &v32);
    serialize(_:at:)(1, &v32);
    v35 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v36 = v26;
    closure #1 in osLogInternal(_:log:type:)(&v35, (uint64_t)&v32, (uint64_t)&v33, (uint64_t)&v34);
    v35 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v36 = v27;
    closure #1 in osLogInternal(_:log:type:)(&v35, (uint64_t)&v32, (uint64_t)&v33, (uint64_t)&v34);
    v35 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v36 = v28;
    closure #1 in osLogInternal(_:log:type:)(&v35, (uint64_t)&v32, (uint64_t)&v33, (uint64_t)&v34);
    _os_log_impl(&dword_24749F000, v30, v31, "Failed fetching dose events for specified timeframe: %@", buf, v22);
    destroyStorage<A>(_:count:)(v15, 1, v13);
    destroyStorage<A>(_:count:)(v16, 0, MEMORY[0x24BEE4AD8] + 8);
    MEMORY[0x24957D398](buf, MEMORY[0x24BEE4260]);
    swift_release();
    swift_release();
    swift_release();
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
  }
  v10 = v17[24];
  v9 = v17[22];
  v11 = v17[21];
  v7 = v17[20];
  v6 = v17[19];
  v8 = v17[18];

  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v7, v8);
  type metadata accessor for LogSpecificMedicationsIntentResponse();
  v12 = LogSpecificMedicationsIntentResponse.__allocating_init(code:userActivity:)(5, 0);

  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v10, v11);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(char *))(v17[7] + 8))(v12);
}

{
  uint64_t v0;
  uint64_t v1;
  id v2;
  id v3;
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint8_t *buf;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  uint32_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  NSObject *v30;
  os_log_type_t v31;
  uint8_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t (*v35)(uint64_t, uint64_t, uint64_t);
  uint64_t v36;

  *(_QWORD *)(v0 + 56) = v0;
  swift_bridgeObjectRelease();
  v21 = *(id *)(v0 + 248);
  v1 = *(_QWORD *)(v0 + 160);
  v18 = *(_QWORD *)(v0 + 152);
  v20 = *(_QWORD *)(v0 + 144);
  v2 = v21;
  *(_QWORD *)(v0 + 72) = v21;
  v19 = Logger.wellnessIntents.unsafeMutableAddressor();
  swift_beginAccess();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v18 + 16))(v1, v19, v20);
  swift_endAccess();
  v3 = v21;
  v23 = swift_allocObject();
  *(_QWORD *)(v23 + 16) = v21;
  default argument 2 of OSLogInterpolation.appendInterpolation(_:privacy:attributes:)();
  swift_bridgeObjectRelease();
  v30 = Logger.logObject.getter();
  v31 = static os_log_type_t.error.getter();
  *(_QWORD *)(v0 + 80) = 12;
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  v22 = *(_DWORD *)(v0 + 308);
  v26 = swift_allocObject();
  *(_BYTE *)(v26 + 16) = 64;
  v27 = swift_allocObject();
  *(_BYTE *)(v27 + 16) = 8;
  v24 = swift_allocObject();
  *(_QWORD *)(v24 + 16) = partial apply for implicit closure #10 in getPreferredUnit(for:store:);
  *(_QWORD *)(v24 + 24) = v23;
  v25 = swift_allocObject();
  *(_QWORD *)(v25 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:attributes:);
  *(_QWORD *)(v25 + 24) = v24;
  v28 = swift_allocObject();
  *(_QWORD *)(v28 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:);
  *(_QWORD *)(v28 + 24) = v25;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
  _allocateUninitializedArray<A>(_:)();
  v29 = v4;
  swift_retain();
  *v29 = partial apply for closure #1 in OSLogArguments.append(_:);
  v29[1] = v26;
  swift_retain();
  v29[2] = partial apply for closure #1 in OSLogArguments.append(_:);
  v29[3] = v27;
  swift_retain();
  v29[4] = partial apply for closure #1 in OSLogArguments.append(_:);
  v29[5] = v28;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(v30, v31))
  {
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    v15 = createStorage<A>(capacity:type:)(1);
    v16 = createStorage<A>(capacity:type:)(0);
    v32 = buf;
    v33 = v15;
    v34 = v16;
    serialize(_:at:)(2, &v32);
    serialize(_:at:)(1, &v32);
    v35 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v36 = v26;
    closure #1 in osLogInternal(_:log:type:)(&v35, (uint64_t)&v32, (uint64_t)&v33, (uint64_t)&v34);
    v35 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v36 = v27;
    closure #1 in osLogInternal(_:log:type:)(&v35, (uint64_t)&v32, (uint64_t)&v33, (uint64_t)&v34);
    v35 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v36 = v28;
    closure #1 in osLogInternal(_:log:type:)(&v35, (uint64_t)&v32, (uint64_t)&v33, (uint64_t)&v34);
    _os_log_impl(&dword_24749F000, v30, v31, "Failed fetching dose events for specified timeframe: %@", buf, v22);
    destroyStorage<A>(_:count:)(v15, 1, v13);
    destroyStorage<A>(_:count:)(v16, 0, MEMORY[0x24BEE4AD8] + 8);
    MEMORY[0x24957D398](buf, MEMORY[0x24BEE4260]);
    swift_release();
    swift_release();
    swift_release();
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
  }
  v10 = v17[24];
  v9 = v17[22];
  v11 = v17[21];
  v7 = v17[20];
  v6 = v17[19];
  v8 = v17[18];

  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v7, v8);
  type metadata accessor for LogSpecificMedicationsIntentResponse();
  v12 = LogSpecificMedicationsIntentResponse.__allocating_init(code:userActivity:)(5, 0);

  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v10, v11);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(char *))(v17[7] + 8))(v12);
}

uint64_t SpecificMedicationsPersistor.saveScheduledMedication(specifiedDateInterval:medStatusTaken:hasMeridiem:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;

  v3 = *v1;
  *(_QWORD *)(*v1 + 56) = *v1;
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v3 + 56) + 8))(a1);
}

{
  uint64_t v1;
  uint64_t **v2;
  uint64_t *v3;
  _QWORD *v4;
  uint64_t *v7;
  _QWORD *v8;
  uint64_t *v9;

  v3 = *v2;
  v3[7] = (uint64_t)*v2;
  v7 = v3 + 2;
  v8 = v3 + 7;
  v9 = v3 + 11;
  v3[27] = a1;
  v3[28] = v1;
  swift_task_dealloc();
  if (v1)
    return swift_task_switch();
  *v9 = a1;
  v4 = (_QWORD *)swift_task_alloc();
  v7[27] = (uint64_t)v4;
  *v4 = *v8;
  v4[1] = SpecificMedicationsPersistor.saveScheduledMedication(specifiedDateInterval:medStatusTaken:hasMeridiem:);
  return SpecificMedicationsPersistor.getDoseEvents(for:medicationIdentifier:)(v7[22], 0, v7[14], v7[15]);
}

{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;

  v3 = (_QWORD *)*v2;
  v3[7] = *v2;
  v3[30] = a1;
  v3[31] = v1;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t *v1;
  uint64_t v3;

  v3 = *v1;
  *(_QWORD *)(v3 + 56) = *v1;
  *(_QWORD *)(v3 + 264) = a1;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t *v1;
  uint64_t v3;

  v3 = *v1;
  *(_QWORD *)(v3 + 56) = *v1;
  *(_QWORD *)(v3 + 280) = a1;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t *v1;
  uint64_t v3;

  v3 = *v1;
  *(_QWORD *)(v3 + 56) = *v1;
  *(_QWORD *)(v3 + 296) = a1;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t SpecificMedicationsPersistor.saveMedication(named:medStatusTaken:dosage:dosageUnit:)(uint64_t a1, char a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  *(_QWORD *)(v8 + 1200) = a8;
  *(_QWORD *)(v8 + 1192) = a7;
  *(_QWORD *)(v8 + 1184) = a6;
  *(_QWORD *)(v8 + 1176) = a5;
  *(_BYTE *)(v8 + 634) = a4;
  *(_QWORD *)(v8 + 1168) = a3;
  *(_BYTE *)(v8 + 633) = a2 & 1;
  *(_QWORD *)(v8 + 1160) = a1;
  *(_QWORD *)(v8 + 640) = v8;
  *(_QWORD *)(v8 + 648) = 0;
  *(_BYTE *)(v8 + 1720) = 0;
  *(_QWORD *)(v8 + 624) = 0;
  *(_BYTE *)(v8 + 632) = 0;
  *(_QWORD *)(v8 + 496) = 0;
  *(_QWORD *)(v8 + 504) = 0;
  *(_QWORD *)(v8 + 512) = 0;
  *(_QWORD *)(v8 + 520) = 0;
  *(_QWORD *)(v8 + 672) = 0;
  *(_QWORD *)(v8 + 680) = 0;
  *(_QWORD *)(v8 + 528) = 0;
  *(_QWORD *)(v8 + 536) = 0;
  *(_QWORD *)(v8 + 712) = 0;
  *(_QWORD *)(v8 + 744) = 0;
  *(_QWORD *)(v8 + 752) = 0;
  *(_QWORD *)(v8 + 768) = 0;
  *(_QWORD *)(v8 + 560) = 0;
  *(_QWORD *)(v8 + 568) = 0;
  *(_BYTE *)(v8 + 1728) = 0;
  *(_QWORD *)(v8 + 896) = 0;
  *(_QWORD *)(v8 + 952) = 0;
  *(_QWORD *)(v8 + 576) = 0;
  *(_QWORD *)(v8 + 584) = 0;
  *(_QWORD *)(v8 + 976) = 0;
  *(_QWORD *)(v8 + 984) = 0;
  *(_QWORD *)(v8 + 992) = 0;
  *(_QWORD *)(v8 + 1048) = 0;
  *(_QWORD *)(v8 + 608) = 0;
  *(_QWORD *)(v8 + 616) = 0;
  *(_QWORD *)(v8 + 1056) = 0;
  *(_QWORD *)(v8 + 1064) = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  *(_QWORD *)(v8 + 1208) = swift_task_alloc();
  *(_QWORD *)(v8 + 1216) = swift_task_alloc();
  v9 = type metadata accessor for Date();
  *(_QWORD *)(v8 + 1224) = v9;
  *(_QWORD *)(v8 + 1232) = *(_QWORD *)(v9 - 8);
  *(_QWORD *)(v8 + 1240) = swift_task_alloc();
  *(_QWORD *)(v8 + 1248) = swift_task_alloc();
  *(_QWORD *)(v8 + 1256) = swift_task_alloc();
  *(_QWORD *)(v8 + 1264) = swift_task_alloc();
  v10 = type metadata accessor for DateInterval();
  *(_QWORD *)(v8 + 1272) = v10;
  v11 = *(_QWORD *)(v10 - 8);
  *(_QWORD *)(v8 + 1280) = v11;
  *(_QWORD *)(v8 + 1288) = *(_QWORD *)(v11 + 64);
  *(_QWORD *)(v8 + 1296) = swift_task_alloc();
  *(_QWORD *)(v8 + 1304) = swift_task_alloc();
  v12 = type metadata accessor for Logger();
  *(_QWORD *)(v8 + 1312) = v12;
  *(_QWORD *)(v8 + 1320) = *(_QWORD *)(v12 - 8);
  *(_QWORD *)(v8 + 1328) = swift_task_alloc();
  *(_QWORD *)(v8 + 1336) = swift_task_alloc();
  *(_QWORD *)(v8 + 1344) = swift_task_alloc();
  *(_QWORD *)(v8 + 1352) = swift_task_alloc();
  *(_QWORD *)(v8 + 1360) = swift_task_alloc();
  *(_QWORD *)(v8 + 1368) = swift_task_alloc();
  *(_QWORD *)(v8 + 1376) = swift_task_alloc();
  *(_QWORD *)(v8 + 1384) = swift_task_alloc();
  *(_QWORD *)(v8 + 1392) = swift_task_alloc();
  *(_QWORD *)(v8 + 1400) = swift_task_alloc();
  *(_QWORD *)(v8 + 1408) = swift_task_alloc();
  *(_QWORD *)(v8 + 648) = a1;
  *(_BYTE *)(v8 + 1720) = a2 & 1;
  *(_QWORD *)(v8 + 624) = a3;
  *(_BYTE *)(v8 + 632) = a4 & 1;
  *(_QWORD *)(v8 + 496) = a5;
  *(_QWORD *)(v8 + 504) = a6;
  *(_QWORD *)(v8 + 512) = a7;
  *(_QWORD *)(v8 + 520) = a8;
  return swift_task_switch();
}

uint64_t SpecificMedicationsPersistor.saveMedication(named:medStatusTaken:dosage:dosageUnit:)()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t);
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint8_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(uint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(uint64_t, uint64_t, uint64_t);
  uint32_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  NSObject *v39;
  os_log_type_t v40;
  uint64_t v41;
  uint8_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void (*v47)(uint64_t, uint64_t, uint64_t);
  uint32_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  NSObject *v55;
  os_log_type_t v56;
  id v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint8_t *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  void (*v71)(uint64_t, uint64_t);
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  void (*v77)(uint64_t, uint64_t);
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint32_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  _QWORD *v93;
  NSObject *log;
  os_log_type_t v95;
  uint64_t v96;
  uint8_t *buf;
  uint64_t v98;
  uint64_t v99;
  _QWORD *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  void (*v105)(uint64_t, uint64_t, uint64_t);
  uint32_t size;
  os_log_type_t v107;
  NSObject *oslog;
  uint64_t v109;
  uint8_t *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t (*v113)(uint64_t, uint64_t, uint64_t);
  uint64_t v114;
  uint8_t *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t (*v118)(uint64_t, uint64_t, uint64_t);
  uint64_t v119;
  uint8_t *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t (*v123)(uint64_t, uint64_t, uint64_t);
  uint64_t v124;

  v1 = *(_QWORD *)(v0 + 1408);
  v102 = *(_QWORD *)(v0 + 1320);
  v104 = *(_QWORD *)(v0 + 1312);
  *(_QWORD *)(v0 + 640) = v0;
  v103 = Logger.wellnessIntents.unsafeMutableAddressor();
  swift_beginAccess();
  v105 = *(void (**)(uint64_t, uint64_t, uint64_t))(v102 + 16);
  *(_QWORD *)(v0 + 1416) = v105;
  v105(v1, v103, v104);
  swift_endAccess();
  oslog = Logger.logObject.getter();
  v107 = static os_log_type_t.debug.getter();
  *(_QWORD *)(v0 + 656) = 2;
  *(_QWORD *)(v0 + 1424) = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  *(_QWORD *)(v0 + 1432) = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  *(_QWORD *)(v0 + 1440) = lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  size = *(_DWORD *)(v0 + 636);
  *(_QWORD *)(v0 + 1448) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
  v109 = _allocateUninitializedArray<A>(_:)();
  if (os_log_type_enabled(oslog, v107))
  {
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    v96 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    v98 = createStorage<A>(capacity:type:)(0);
    v99 = createStorage<A>(capacity:type:)(0);
    *(_QWORD *)(v101 + 1128) = buf;
    *(_QWORD *)(v101 + 1136) = v98;
    *(_QWORD *)(v101 + 1144) = v99;
    serialize(_:at:)(0, (_BYTE **)(v101 + 1128));
    serialize(_:at:)(0, (_BYTE **)(v101 + 1128));
    *(_QWORD *)(v101 + 1152) = v109;
    v100 = (_QWORD *)swift_task_alloc();
    v100[2] = v101 + 1128;
    v100[3] = v101 + 1136;
    v100[4] = v101 + 1144;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
    lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
    Sequence.forEach(_:)();
    swift_task_dealloc();
    _os_log_impl(&dword_24749F000, oslog, v107, "Got name.", buf, size);
    destroyStorage<A>(_:count:)(v98, 0, v96);
    destroyStorage<A>(_:count:)(v99, 0, MEMORY[0x24BEE4AD8] + 8);
    MEMORY[0x24957D398](buf, MEMORY[0x24BEE4260]);
  }
  swift_bridgeObjectRelease();
  v70 = *(_QWORD *)(v101 + 1408);
  v74 = *(_QWORD *)(v101 + 1400);
  v69 = *(_QWORD *)(v101 + 1320);
  v81 = *(_QWORD *)(v101 + 1312);
  v82 = *(_QWORD *)(v101 + 1304);
  v85 = *(_QWORD *)(v101 + 1296);
  v84 = *(_QWORD *)(v101 + 1280);
  v86 = *(_QWORD *)(v101 + 1272);
  v73 = *(_QWORD *)(v101 + 1264);
  v78 = *(_QWORD *)(v101 + 1256);
  v75 = *(_QWORD *)(v101 + 1248);
  v79 = *(_QWORD *)(v101 + 1240);
  v72 = *(_QWORD *)(v101 + 1232);
  v76 = *(_QWORD *)(v101 + 1224);

  v71 = *(void (**)(uint64_t, uint64_t))(v69 + 8);
  *(_QWORD *)(v101 + 1456) = v71;
  v71(v70, v81);
  Date.init()();
  Date.startOfDay.getter(v78);
  v77 = *(void (**)(uint64_t, uint64_t))(v72 + 8);
  v77(v73, v76);
  Date.init()();
  Date.endOfDay.getter(v79);
  v77(v75, v76);
  DateInterval.init(start:end:)();
  v80 = Logger.wellnessIntents.unsafeMutableAddressor();
  swift_beginAccess();
  v105(v74, v80, v81);
  swift_endAccess();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v84 + 16))(v85, v82, v86);
  v83 = (*(unsigned __int8 *)(v84 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v84 + 80);
  v88 = swift_allocObject();
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v84 + 32))(v88 + v83, v85, v86);
  log = Logger.logObject.getter();
  v95 = static os_log_type_t.debug.getter();
  *(_QWORD *)(v101 + 664) = 12;
  UnsignedInteger<>.init<A>(_:)();
  v87 = *(_DWORD *)(v101 + 1724);
  v90 = swift_allocObject();
  *(_BYTE *)(v90 + 16) = 32;
  v91 = swift_allocObject();
  *(_BYTE *)(v91 + 16) = 8;
  v89 = swift_allocObject();
  *(_QWORD *)(v89 + 16) = partial apply for implicit closure #1 in SpecificMedicationsPersistor.saveMedication(named:medStatusTaken:dosage:dosageUnit:);
  *(_QWORD *)(v89 + 24) = v88;
  v92 = swift_allocObject();
  *(_QWORD *)(v92 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:);
  *(_QWORD *)(v92 + 24) = v89;
  _allocateUninitializedArray<A>(_:)();
  v93 = v2;
  swift_retain();
  *v93 = partial apply for closure #1 in OSLogArguments.append(_:);
  v93[1] = v90;
  swift_retain();
  v93[2] = partial apply for closure #1 in OSLogArguments.append(_:);
  v93[3] = v91;
  swift_retain();
  v93[4] = partial apply for closure #1 in OSLogArguments.append(_:);
  v93[5] = v92;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(log, v95))
  {
    v66 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    v65 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    v67 = createStorage<A>(capacity:type:)(0);
    v68 = createStorage<A>(capacity:type:)(1);
    v120 = v66;
    v121 = v67;
    v122 = v68;
    serialize(_:at:)(2, &v120);
    serialize(_:at:)(1, &v120);
    v123 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v124 = v90;
    closure #1 in osLogInternal(_:log:type:)(&v123, (uint64_t)&v120, (uint64_t)&v121, (uint64_t)&v122);
    v123 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v124 = v91;
    closure #1 in osLogInternal(_:log:type:)(&v123, (uint64_t)&v120, (uint64_t)&v121, (uint64_t)&v122);
    v123 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v124 = v92;
    closure #1 in osLogInternal(_:log:type:)(&v123, (uint64_t)&v120, (uint64_t)&v121, (uint64_t)&v122);
    _os_log_impl(&dword_24749F000, log, v95, "searching dateinterval1: %s", v66, v87);
    destroyStorage<A>(_:count:)(v67, 0, v65);
    destroyStorage<A>(_:count:)(v68, 1, MEMORY[0x24BEE4AD8] + 8);
    MEMORY[0x24957D398](v66, MEMORY[0x24BEE4260]);
    swift_release();
    swift_release();
    swift_release();
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
  }
  v58 = *(_QWORD *)(v101 + 1400);
  v59 = *(_QWORD *)(v101 + 1312);
  v61 = *(_QWORD *)(v101 + 1160);

  v71(v58, v59);
  v60 = swift_allocObject();
  *(_QWORD *)(v101 + 1464) = v60;
  *(_QWORD *)(v101 + 672) = v60 + 16;
  *(_QWORD *)(v101 + 1472) = type metadata accessor for HKMedicationExposableDoseEvent();
  *(_QWORD *)(v60 + 16) = _allocateUninitializedArray<A>(_:)();
  v3 = swift_allocObject();
  *(_QWORD *)(v101 + 1480) = v3;
  *(_QWORD *)(v101 + 680) = v3 + 16;
  *(_QWORD *)(v3 + 16) = 0;
  swift_bridgeObjectRetain();
  *(_QWORD *)(v101 + 688) = v61;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  lazy protocol witness table accessor for type [String] and conformance [A]();
  Collection<>.makeIterator()();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<[String]>);
  IndexingIterator.next()();
  v62 = *(_QWORD *)(v101 + 544);
  v63 = *(_QWORD *)(v101 + 552);
  *(_QWORD *)(v101 + 1488) = v63;
  if (v63)
  {
    *(_QWORD *)(v101 + 608) = v62;
    *(_QWORD *)(v101 + 616) = v63;
    type metadata accessor for HKMedicationIdentifier();
    swift_bridgeObjectRetain();
    v57 = HKMedicationIdentifier.__allocating_init(rawIdentifier:)();
    *(_QWORD *)(v101 + 1496) = v57;
    v4 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v101 + 1504) = v4;
    *v4 = *(_QWORD *)(v101 + 640);
    v4[1] = SpecificMedicationsPersistor.saveMedication(named:medStatusTaken:dosage:dosageUnit:);
    return SpecificMedicationsPersistor.getDoseEvents(for:medicationIdentifier:)(*(_QWORD *)(v101 + 1304), (uint64_t)v57, *(_QWORD *)(v101 + 1192), *(_QWORD *)(v101 + 1200));
  }
  else
  {
    v49 = *(_QWORD *)(v101 + 1464);
    v47 = *(void (**)(uint64_t, uint64_t, uint64_t))(v101 + 1416);
    v6 = *(_QWORD *)(v101 + 1392);
    v46 = *(_QWORD *)(v101 + 1312);
    outlined destroy of [HKQuantityType]();
    v45 = Logger.wellnessIntents.unsafeMutableAddressor();
    swift_beginAccess();
    v47(v6, v45, v46);
    swift_endAccess();
    swift_retain();
    v55 = Logger.logObject.getter();
    v56 = static os_log_type_t.debug.getter();
    *(_QWORD *)(v101 + 696) = 12;
    UnsignedInteger<>.init<A>(_:)();
    v48 = *(_DWORD *)(v101 + 1732);
    v51 = swift_allocObject();
    *(_BYTE *)(v51 + 16) = 0;
    v52 = swift_allocObject();
    *(_BYTE *)(v52 + 16) = 8;
    v50 = swift_allocObject();
    *(_QWORD *)(v50 + 16) = partial apply for implicit closure #2 in SpecificMedicationsPersistor.saveMedication(named:medStatusTaken:dosage:dosageUnit:);
    *(_QWORD *)(v50 + 24) = v49;
    v53 = swift_allocObject();
    *(_QWORD *)(v53 + 16) = partial apply for thunk for @escaping @callee_guaranteed () -> (@unowned Int);
    *(_QWORD *)(v53 + 24) = v50;
    _allocateUninitializedArray<A>(_:)();
    v54 = v7;
    swift_retain();
    *v54 = partial apply for closure #1 in OSLogArguments.append(_:);
    v54[1] = v51;
    swift_retain();
    v54[2] = partial apply for closure #1 in OSLogArguments.append(_:);
    v54[3] = v52;
    swift_retain();
    v54[4] = partial apply for closure #1 in OSLogArguments.append<A>(_:);
    v54[5] = v53;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(v55, v56))
    {
      v42 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      v41 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      v43 = createStorage<A>(capacity:type:)(0);
      v44 = createStorage<A>(capacity:type:)(0);
      v115 = v42;
      v116 = v43;
      v117 = v44;
      serialize(_:at:)(0, &v115);
      serialize(_:at:)(1, &v115);
      v118 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v119 = v51;
      closure #1 in osLogInternal(_:log:type:)(&v118, (uint64_t)&v115, (uint64_t)&v116, (uint64_t)&v117);
      v118 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v119 = v52;
      closure #1 in osLogInternal(_:log:type:)(&v118, (uint64_t)&v115, (uint64_t)&v116, (uint64_t)&v117);
      v118 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append<A>(_:);
      v119 = v53;
      closure #1 in osLogInternal(_:log:type:)(&v118, (uint64_t)&v115, (uint64_t)&v116, (uint64_t)&v117);
      _os_log_impl(&dword_24749F000, v55, v56, "starting to get list of scheduled doseEvents (%ld)", v42, v48);
      destroyStorage<A>(_:count:)(v43, 0, v41);
      destroyStorage<A>(_:count:)(v44, 0, MEMORY[0x24BEE4AD8] + 8);
      MEMORY[0x24957D398](v42, MEMORY[0x24BEE4260]);
      swift_release();
      swift_release();
      swift_release();
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
    }
    v33 = *(_QWORD *)(v101 + 1464);
    v26 = *(void (**)(uint64_t, uint64_t))(v101 + 1456);
    v31 = *(void (**)(uint64_t, uint64_t, uint64_t))(v101 + 1416);
    v25 = *(_QWORD *)(v101 + 1392);
    v8 = *(_QWORD *)(v101 + 1384);
    v30 = *(_QWORD *)(v101 + 1312);

    v26(v25, v30);
    swift_beginAccess();
    v27 = *(_QWORD *)(v33 + 16);
    swift_bridgeObjectRetain();
    swift_endAccess();
    v28 = filterUniqueDoseEvents(doseEvents:)(v27);
    swift_bridgeObjectRelease();
    swift_beginAccess();
    *(_QWORD *)(v33 + 16) = v28;
    swift_bridgeObjectRelease();
    swift_endAccess();
    v29 = Logger.wellnessIntents.unsafeMutableAddressor();
    swift_beginAccess();
    v31(v8, v29, v30);
    swift_endAccess();
    swift_retain();
    v39 = Logger.logObject.getter();
    v40 = static os_log_type_t.debug.getter();
    *(_QWORD *)(v101 + 704) = 12;
    UnsignedInteger<>.init<A>(_:)();
    v32 = *(_DWORD *)(v101 + 1736);
    v35 = swift_allocObject();
    *(_BYTE *)(v35 + 16) = 0;
    v36 = swift_allocObject();
    *(_BYTE *)(v36 + 16) = 8;
    v34 = swift_allocObject();
    *(_QWORD *)(v34 + 16) = partial apply for implicit closure #2 in SpecificMedicationsPersistor.saveMedication(named:medStatusTaken:dosage:dosageUnit:);
    *(_QWORD *)(v34 + 24) = v33;
    v37 = swift_allocObject();
    *(_QWORD *)(v37 + 16) = partial apply for thunk for @escaping @callee_guaranteed () -> (@unowned Int);
    *(_QWORD *)(v37 + 24) = v34;
    _allocateUninitializedArray<A>(_:)();
    v38 = v9;
    swift_retain();
    *v38 = partial apply for closure #1 in OSLogArguments.append(_:);
    v38[1] = v35;
    swift_retain();
    v38[2] = partial apply for closure #1 in OSLogArguments.append(_:);
    v38[3] = v36;
    swift_retain();
    v38[4] = partial apply for closure #1 in OSLogArguments.append<A>(_:);
    v38[5] = v37;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(v39, v40))
    {
      v22 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      v23 = createStorage<A>(capacity:type:)(0);
      v24 = createStorage<A>(capacity:type:)(0);
      v110 = v22;
      v111 = v23;
      v112 = v24;
      serialize(_:at:)(0, &v110);
      serialize(_:at:)(1, &v110);
      v113 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v114 = v35;
      closure #1 in osLogInternal(_:log:type:)(&v113, (uint64_t)&v110, (uint64_t)&v111, (uint64_t)&v112);
      v113 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v114 = v36;
      closure #1 in osLogInternal(_:log:type:)(&v113, (uint64_t)&v110, (uint64_t)&v111, (uint64_t)&v112);
      v113 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append<A>(_:);
      v114 = v37;
      closure #1 in osLogInternal(_:log:type:)(&v113, (uint64_t)&v110, (uint64_t)&v111, (uint64_t)&v112);
      _os_log_impl(&dword_24749F000, v39, v40, "Name only: got %ld scheduled doseEvents", v22, v32);
      destroyStorage<A>(_:count:)(v23, 0, v21);
      destroyStorage<A>(_:count:)(v24, 0, MEMORY[0x24BEE4AD8] + 8);
      MEMORY[0x24957D398](v22, MEMORY[0x24BEE4260]);
      swift_release();
      swift_release();
      swift_release();
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
    }
    v15 = *(void (**)(uint64_t, uint64_t))(v101 + 1456);
    v13 = *(_QWORD *)(v101 + 1384);
    v14 = *(_QWORD *)(v101 + 1312);
    v16 = (uint64_t *)(*(_QWORD *)(v101 + 1464) + 16);

    v15(v13, v14);
    v17 = swift_allocObject();
    *(_QWORD *)(v101 + 1528) = v17;
    *(_QWORD *)(v101 + 712) = v17 + 16;
    swift_beginAccess();
    v18 = *v16;
    swift_bridgeObjectRetain();
    swift_endAccess();
    *(_QWORD *)(v101 + 720) = v18;
    v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [HKMedicationExposableDoseEvent]);
    *(_QWORD *)(v101 + 1536) = v19;
    v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
    *(_QWORD *)(v101 + 1544) = v20;
    v10 = lazy protocol witness table accessor for type [HKMedicationExposableDoseEvent] and conformance [A]();
    *(_QWORD *)(v101 + 1552) = v10;
    v11 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF((void (*)(char *, char *))closure #1 in SpecificMedicationsPersistor.saveScheduledMedication(named:specifiedDateInterval:medStatusTaken:), 0, v19, v20, MEMORY[0x24BEE4078], v10, MEMORY[0x24BEE40A8], v64);
    *(_QWORD *)(v101 + 1560) = 0;
    outlined destroy of [HKQuantityType]();
    *(_QWORD *)(v101 + 728) = v11;
    *(_QWORD *)(v101 + 1568) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String?]);
    lazy protocol witness table accessor for type String? and conformance <A> A?();
    lazy protocol witness table accessor for type [String?] and conformance [A]();
    *(_QWORD *)(v101 + 736) = Set.init<A>(_:)();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Set<String?>);
    lazy protocol witness table accessor for type Set<String?> and conformance Set<A>();
    *(_QWORD *)(v17 + 16) = Array.init<A>(_:)();
    v12 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v101 + 1576) = v12;
    *v12 = *(_QWORD *)(v101 + 640);
    v12[1] = SpecificMedicationsPersistor.saveMedication(named:medStatusTaken:dosage:dosageUnit:);
    return SpecificMedicationsPersistor.getMedicationsMatching(medicationIDs:strength:strengthUnit:isAsNeeded:)(*(_QWORD *)(v101 + 1160), 0, 1, 0, 0, 1, *(_QWORD *)(v101 + 1192), *(_QWORD *)(v101 + 1200));
  }
}

{
  _QWORD *v0;
  uint64_t result;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t);
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint8_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(uint64_t, uint64_t, uint64_t);
  uint32_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  NSObject *log;
  os_log_type_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint8_t *buf;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void (*v48)(uint64_t, uint64_t, uint64_t);
  uint32_t size;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  NSObject *oslog;
  os_log_type_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  id v62;
  uint64_t v63;
  uint64_t v64;
  unsigned int v65;
  uint8_t *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t (*v69)(uint64_t, uint64_t, uint64_t);
  uint64_t v70;
  uint8_t *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t (*v74)(uint64_t, uint64_t, uint64_t);
  uint64_t v75;

  v64 = v0[189];
  v0[80] = v0;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v0[132] = v64;
  v0[139] = v64;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [HKMedicationExposableDoseEvent]);
  lazy protocol witness table accessor for type [HKMedicationExposableDoseEvent] and conformance [A]();
  Array.append<A>(contentsOf:)();
  swift_bridgeObjectRetain();
  v0[140] = v64;
  lazy protocol witness table accessor for type [HKMedicationExposableDoseEvent] and conformance [A]();
  v65 = Collection.isEmpty.getter();
  outlined destroy of [HKQuantityType]();
  swift_bridgeObjectRelease();
  result = v65;
  if ((v65 & 1) == 0)
  {
    v3 = *(_QWORD *)(*(_QWORD *)(v63 + 1480) + 16);
    v59 = v3 + 1;
    if (__OFADD__(v3, 1))
    {
      __break(1u);
      return result;
    }
    *(_QWORD *)(*(_QWORD *)(v63 + 1480) + 16) = v59;
  }
  outlined destroy of [HKQuantityType]();
  swift_bridgeObjectRelease();
  v58 = *(_QWORD *)(v63 + 1520);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<[String]>);
  IndexingIterator.next()();
  v61 = *(_QWORD *)(v63 + 544);
  v60 = *(_QWORD *)(v63 + 552);
  *(_QWORD *)(v63 + 1488) = v60;
  if (v60)
  {
    *(_QWORD *)(v63 + 608) = v61;
    *(_QWORD *)(v63 + 616) = v60;
    type metadata accessor for HKMedicationIdentifier();
    swift_bridgeObjectRetain();
    v62 = HKMedicationIdentifier.__allocating_init(rawIdentifier:)();
    *(_QWORD *)(v63 + 1496) = v62;
    v2 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v63 + 1504) = v2;
    *v2 = *(_QWORD *)(v63 + 640);
    v2[1] = SpecificMedicationsPersistor.saveMedication(named:medStatusTaken:dosage:dosageUnit:);
    return SpecificMedicationsPersistor.getDoseEvents(for:medicationIdentifier:)(*(_QWORD *)(v63 + 1304), (uint64_t)v62, *(_QWORD *)(v63 + 1192), *(_QWORD *)(v63 + 1200));
  }
  v50 = *(_QWORD *)(v63 + 1464);
  v48 = *(void (**)(uint64_t, uint64_t, uint64_t))(v63 + 1416);
  v5 = *(_QWORD *)(v63 + 1392);
  v47 = *(_QWORD *)(v63 + 1312);
  outlined destroy of [HKQuantityType]();
  v46 = Logger.wellnessIntents.unsafeMutableAddressor();
  swift_beginAccess();
  v48(v5, v46, v47);
  swift_endAccess();
  swift_retain();
  oslog = Logger.logObject.getter();
  v57 = static os_log_type_t.debug.getter();
  *(_QWORD *)(v63 + 696) = 12;
  UnsignedInteger<>.init<A>(_:)();
  size = *(_DWORD *)(v63 + 1732);
  v52 = swift_allocObject();
  *(_BYTE *)(v52 + 16) = 0;
  v53 = swift_allocObject();
  *(_BYTE *)(v53 + 16) = 8;
  v51 = swift_allocObject();
  *(_QWORD *)(v51 + 16) = partial apply for implicit closure #2 in SpecificMedicationsPersistor.saveMedication(named:medStatusTaken:dosage:dosageUnit:);
  *(_QWORD *)(v51 + 24) = v50;
  v54 = swift_allocObject();
  *(_QWORD *)(v54 + 16) = partial apply for thunk for @escaping @callee_guaranteed () -> (@unowned Int);
  *(_QWORD *)(v54 + 24) = v51;
  _allocateUninitializedArray<A>(_:)();
  v55 = v6;
  swift_retain();
  *v55 = partial apply for closure #1 in OSLogArguments.append(_:);
  v55[1] = v52;
  swift_retain();
  v55[2] = partial apply for closure #1 in OSLogArguments.append(_:);
  v55[3] = v53;
  swift_retain();
  v55[4] = partial apply for closure #1 in OSLogArguments.append<A>(_:);
  v55[5] = v54;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(oslog, v57))
  {
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    v42 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    v44 = createStorage<A>(capacity:type:)(0);
    v45 = createStorage<A>(capacity:type:)(0);
    v71 = buf;
    v72 = v44;
    v73 = v45;
    serialize(_:at:)(0, &v71);
    serialize(_:at:)(1, &v71);
    v74 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v75 = v52;
    result = closure #1 in osLogInternal(_:log:type:)(&v74, (uint64_t)&v71, (uint64_t)&v72, (uint64_t)&v73);
    if (v58)
      return result;
    v74 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v75 = v53;
    closure #1 in osLogInternal(_:log:type:)(&v74, (uint64_t)&v71, (uint64_t)&v72, (uint64_t)&v73);
    v74 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append<A>(_:);
    v75 = v54;
    closure #1 in osLogInternal(_:log:type:)(&v74, (uint64_t)&v71, (uint64_t)&v72, (uint64_t)&v73);
    _os_log_impl(&dword_24749F000, oslog, v57, "starting to get list of scheduled doseEvents (%ld)", buf, size);
    destroyStorage<A>(_:count:)(v44, 0, v42);
    destroyStorage<A>(_:count:)(v45, 0, MEMORY[0x24BEE4AD8] + 8);
    MEMORY[0x24957D398](buf, MEMORY[0x24BEE4260]);
    swift_release();
    swift_release();
    swift_release();
    v40 = 0;
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
    v40 = v58;
  }
  v32 = *(_QWORD *)(v63 + 1464);
  v25 = *(void (**)(uint64_t, uint64_t))(v63 + 1456);
  v30 = *(void (**)(uint64_t, uint64_t, uint64_t))(v63 + 1416);
  v24 = *(_QWORD *)(v63 + 1392);
  v7 = *(_QWORD *)(v63 + 1384);
  v29 = *(_QWORD *)(v63 + 1312);

  v25(v24, v29);
  swift_beginAccess();
  v26 = *(_QWORD *)(v32 + 16);
  swift_bridgeObjectRetain();
  swift_endAccess();
  v27 = filterUniqueDoseEvents(doseEvents:)(v26);
  swift_bridgeObjectRelease();
  swift_beginAccess();
  *(_QWORD *)(v32 + 16) = v27;
  swift_bridgeObjectRelease();
  swift_endAccess();
  v28 = Logger.wellnessIntents.unsafeMutableAddressor();
  swift_beginAccess();
  v30(v7, v28, v29);
  swift_endAccess();
  swift_retain();
  log = Logger.logObject.getter();
  v39 = static os_log_type_t.debug.getter();
  *(_QWORD *)(v63 + 704) = 12;
  UnsignedInteger<>.init<A>(_:)();
  v31 = *(_DWORD *)(v63 + 1736);
  v34 = swift_allocObject();
  *(_BYTE *)(v34 + 16) = 0;
  v35 = swift_allocObject();
  *(_BYTE *)(v35 + 16) = 8;
  v33 = swift_allocObject();
  *(_QWORD *)(v33 + 16) = partial apply for implicit closure #2 in SpecificMedicationsPersistor.saveMedication(named:medStatusTaken:dosage:dosageUnit:);
  *(_QWORD *)(v33 + 24) = v32;
  v36 = swift_allocObject();
  *(_QWORD *)(v36 + 16) = partial apply for thunk for @escaping @callee_guaranteed () -> (@unowned Int);
  *(_QWORD *)(v36 + 24) = v33;
  _allocateUninitializedArray<A>(_:)();
  v37 = v8;
  swift_retain();
  *v37 = partial apply for closure #1 in OSLogArguments.append(_:);
  v37[1] = v34;
  swift_retain();
  v37[2] = partial apply for closure #1 in OSLogArguments.append(_:);
  v37[3] = v35;
  swift_retain();
  v37[4] = partial apply for closure #1 in OSLogArguments.append<A>(_:);
  v37[5] = v36;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(log, v39))
  {
    v21 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    v22 = createStorage<A>(capacity:type:)(0);
    v23 = createStorage<A>(capacity:type:)(0);
    v66 = v21;
    v67 = v22;
    v68 = v23;
    serialize(_:at:)(0, &v66);
    serialize(_:at:)(1, &v66);
    v69 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v70 = v34;
    result = closure #1 in osLogInternal(_:log:type:)(&v69, (uint64_t)&v66, (uint64_t)&v67, (uint64_t)&v68);
    if (v40)
      return result;
    v69 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v70 = v35;
    closure #1 in osLogInternal(_:log:type:)(&v69, (uint64_t)&v66, (uint64_t)&v67, (uint64_t)&v68);
    v69 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append<A>(_:);
    v70 = v36;
    closure #1 in osLogInternal(_:log:type:)(&v69, (uint64_t)&v66, (uint64_t)&v67, (uint64_t)&v68);
    _os_log_impl(&dword_24749F000, log, v39, "Name only: got %ld scheduled doseEvents", v21, v31);
    destroyStorage<A>(_:count:)(v22, 0, v20);
    destroyStorage<A>(_:count:)(v23, 0, MEMORY[0x24BEE4AD8] + 8);
    MEMORY[0x24957D398](v21, MEMORY[0x24BEE4260]);
    swift_release();
    swift_release();
    swift_release();
    v19 = 0;
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
    v19 = v40;
  }
  v13 = *(void (**)(uint64_t, uint64_t))(v63 + 1456);
  v11 = *(_QWORD *)(v63 + 1384);
  v12 = *(_QWORD *)(v63 + 1312);
  v14 = (uint64_t *)(*(_QWORD *)(v63 + 1464) + 16);

  v13(v11, v12);
  v15 = swift_allocObject();
  *(_QWORD *)(v63 + 1528) = v15;
  *(_QWORD *)(v63 + 712) = v15 + 16;
  swift_beginAccess();
  v16 = *v14;
  swift_bridgeObjectRetain();
  swift_endAccess();
  *(_QWORD *)(v63 + 720) = v16;
  v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [HKMedicationExposableDoseEvent]);
  *(_QWORD *)(v63 + 1536) = v17;
  v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
  *(_QWORD *)(v63 + 1544) = v18;
  v9 = lazy protocol witness table accessor for type [HKMedicationExposableDoseEvent] and conformance [A]();
  *(_QWORD *)(v63 + 1552) = v9;
  result = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF((void (*)(char *, char *))closure #1 in SpecificMedicationsPersistor.saveScheduledMedication(named:specifiedDateInterval:medStatusTaken:), 0, v17, v18, MEMORY[0x24BEE4078], v9, MEMORY[0x24BEE40A8], v41);
  *(_QWORD *)(v63 + 1560) = v19;
  if (!v19)
  {
    outlined destroy of [HKQuantityType]();
    *(_QWORD *)(v63 + 728) = result;
    *(_QWORD *)(v63 + 1568) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String?]);
    lazy protocol witness table accessor for type String? and conformance <A> A?();
    lazy protocol witness table accessor for type [String?] and conformance [A]();
    *(_QWORD *)(v63 + 736) = Set.init<A>(_:)();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Set<String?>);
    lazy protocol witness table accessor for type Set<String?> and conformance Set<A>();
    *(_QWORD *)(v15 + 16) = Array.init<A>(_:)();
    v10 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v63 + 1576) = v10;
    *v10 = *(_QWORD *)(v63 + 640);
    v10[1] = SpecificMedicationsPersistor.saveMedication(named:medStatusTaken:dosage:dosageUnit:);
    return SpecificMedicationsPersistor.getMedicationsMatching(medicationIDs:strength:strengthUnit:isAsNeeded:)(*(_QWORD *)(v63 + 1160), 0, 1, 0, 0, 1, *(_QWORD *)(v63 + 1192), *(_QWORD *)(v63 + 1200));
  }
  return result;
}

{
  NSNumber *v0;
  Class v1;
  objc_class *v2;
  unint64_t v3;
  uint64_t result;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  id v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t *v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(uint64_t, uint64_t);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint8_t *v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(uint64_t, uint64_t, uint64_t);
  uint32_t v43;
  os_log_type_t v44;
  NSObject *v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  BOOL v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  id v56;
  uint64_t v57;
  uint64_t v58;
  void (*v59)(uint64_t, uint64_t);
  uint64_t *v60;
  uint64_t v61;
  id v62;
  uint64_t v63;
  uint8_t *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  void (*v69)(uint64_t, uint64_t, uint64_t);
  char v70;
  uint32_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  NSObject *v80;
  os_log_type_t v81;
  Class v82;
  id v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  void (*v90)(uint64_t, uint64_t);
  uint64_t *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint8_t *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  void (*v100)(uint64_t, uint64_t, uint64_t);
  uint64_t v101;
  uint32_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  _QWORD *v113;
  NSObject *v114;
  os_log_type_t v115;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  void (*v122)(uint64_t, uint64_t);
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  char *v126;
  char *v127;
  uint64_t v128;
  uint8_t *v129;
  uint64_t v130;
  uint64_t v131;
  _QWORD *v132;
  uint64_t v133;
  uint64_t v134;
  void (*v135)(uint64_t, uint64_t, uint64_t);
  uint32_t v136;
  os_log_type_t v137;
  NSObject *log;
  uint64_t v139;
  uint64_t *v140;
  uint64_t v141;
  char v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  id v147;
  id v148;
  uint64_t v149;
  uint64_t v150;
  void (*v151)(uint64_t, uint64_t);
  uint64_t v152;
  uint8_t *buf;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  void (*v158)(uint64_t, uint64_t, uint64_t);
  uint32_t size;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  _QWORD *v165;
  NSObject *oslog;
  os_log_type_t v167;
  uint64_t v168;
  objc_class *isa;
  objc_class *v170;
  NSNumber *v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint8_t *v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t (*v179)(uint64_t, uint64_t, uint64_t);
  uint64_t v180;
  uint8_t *v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t (*v184)(uint64_t, uint64_t, uint64_t);
  uint64_t v185;
  uint8_t *v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t (*v189)(uint64_t, uint64_t, uint64_t);
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;

  isa = v0[198].super.super.isa;
  v1 = v0[195].super.super.isa;
  v173 = (uint64_t)v0[184].super.super.isa;
  v0[80].super.super.isa = (Class)v0;
  v0[93].super.super.isa = isa;
  type metadata accessor for NSNumber();
  v170 = NSNumber.init(integerLiteral:)(-1).super.super.isa;
  v0[199].super.super.isa = v170;
  v0[94].super.super.isa = v170;
  v0[95].super.super.isa = isa;
  v2 = v170;
  v171 = (NSNumber *)swift_task_alloc();
  v171[2].super.super.isa = v170;
  v172 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [HKUserTrackedMedication]);
  v3 = lazy protocol witness table accessor for type [HKUserTrackedMedication] and conformance [A]();
  result = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF((void (*)(char *, char *))partial apply for closure #2 in SpecificMedicationsPersistor.saveMedication(named:medStatusTaken:dosage:dosageUnit:), (uint64_t)v171, v172, v173, MEMORY[0x24BEE4078], v3, MEMORY[0x24BEE40A8], v174);
  v175 = result;
  v0[200].super.super.isa = (Class)result;
  if (!v1)
  {
    v158 = *(void (**)(uint64_t, uint64_t, uint64_t))(v168 + 1416);
    v5 = *(_QWORD *)(v168 + 1376);
    v157 = *(_QWORD *)(v168 + 1312);
    swift_task_dealloc();

    *(_QWORD *)(v168 + 768) = v175;
    v156 = Logger.wellnessIntents.unsafeMutableAddressor();
    swift_beginAccess();
    v158(v5, v156, v157);
    swift_endAccess();
    swift_bridgeObjectRetain();
    v160 = swift_allocObject();
    *(_QWORD *)(v160 + 16) = v175;
    oslog = Logger.logObject.getter();
    v167 = static os_log_type_t.debug.getter();
    *(_QWORD *)(v168 + 776) = 12;
    UnsignedInteger<>.init<A>(_:)();
    size = *(_DWORD *)(v168 + 1740);
    v162 = swift_allocObject();
    *(_BYTE *)(v162 + 16) = 0;
    v163 = swift_allocObject();
    *(_BYTE *)(v163 + 16) = 8;
    v161 = swift_allocObject();
    *(_QWORD *)(v161 + 16) = partial apply for implicit closure #4 in SpecificMedicationsPersistor.saveMedication(named:medStatusTaken:dosage:dosageUnit:);
    *(_QWORD *)(v161 + 24) = v160;
    v164 = swift_allocObject();
    *(_QWORD *)(v164 + 16) = partial apply for thunk for @escaping @callee_guaranteed () -> (@unowned Int);
    *(_QWORD *)(v164 + 24) = v161;
    _allocateUninitializedArray<A>(_:)();
    v165 = v6;
    swift_retain();
    *v165 = partial apply for closure #1 in OSLogArguments.append(_:);
    v165[1] = v162;
    swift_retain();
    v165[2] = partial apply for closure #1 in OSLogArguments.append(_:);
    v165[3] = v163;
    swift_retain();
    v165[4] = partial apply for closure #1 in OSLogArguments.append<A>(_:);
    v165[5] = v164;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(oslog, v167))
    {
      buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      v152 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      v154 = createStorage<A>(capacity:type:)(0);
      v155 = createStorage<A>(capacity:type:)(0);
      v186 = buf;
      v187 = v154;
      v188 = v155;
      serialize(_:at:)(0, &v186);
      serialize(_:at:)(1, &v186);
      v189 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v190 = v162;
      closure #1 in osLogInternal(_:log:type:)(&v189, (uint64_t)&v186, (uint64_t)&v187, (uint64_t)&v188);
      v189 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v190 = v163;
      closure #1 in osLogInternal(_:log:type:)(&v189, (uint64_t)&v186, (uint64_t)&v187, (uint64_t)&v188);
      v189 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append<A>(_:);
      v190 = v164;
      closure #1 in osLogInternal(_:log:type:)(&v189, (uint64_t)&v186, (uint64_t)&v187, (uint64_t)&v188);
      _os_log_impl(&dword_24749F000, oslog, v167, "Name only: created %ld as needed doseEvents with matching name", buf, size);
      destroyStorage<A>(_:count:)(v154, 0, v152);
      destroyStorage<A>(_:count:)(v155, 0, MEMORY[0x24BEE4AD8] + 8);
      MEMORY[0x24957D398](buf, MEMORY[0x24BEE4260]);
      swift_release();
      swift_release();
      swift_release();
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
    }
    v151 = *(void (**)(uint64_t, uint64_t))(v168 + 1456);
    v149 = *(_QWORD *)(v168 + 1376);
    v150 = *(_QWORD *)(v168 + 1312);

    v151(v149, v150);
    swift_bridgeObjectRetain();
    *(_QWORD *)(v168 + 784) = v175;
    swift_beginAccess();
    lazy protocol witness table accessor for type [HKMedicationExposableDoseEvent] and conformance [A]();
    Array.append<A>(contentsOf:)();
    swift_endAccess();
    swift_bridgeObjectRetain();
    *(_QWORD *)(v168 + 792) = v175;
    Collection<>.makeIterator()();
    while (1)
    {
      *(_QWORD *)(v168 + 1608) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<[HKMedicationExposableDoseEvent]>);
      IndexingIterator.next()();
      v148 = *(id *)(v168 + 800);
      if (!v148)
        break;
      *(_QWORD *)(v168 + 1048) = v148;
      v147 = objc_msgSend(v148, sel_scheduleItemIdentifier);
      if (v147)
      {
        v143 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        v144 = v7;

        v145 = v143;
        v146 = v144;
      }
      else
      {
        v145 = 0;
        v146 = 0;
      }
      *(_QWORD *)(v168 + 592) = v145;
      *(_QWORD *)(v168 + 600) = v146;
      Array.append(_:)();

    }
    v140 = (uint64_t *)(*(_QWORD *)(v168 + 1464) + 16);
    outlined destroy of [HKQuantityType]();
    swift_beginAccess();
    v141 = *v140;
    swift_bridgeObjectRetain();
    swift_endAccess();
    swift_bridgeObjectRetain();
    *(_QWORD *)(v168 + 808) = v141;
    v142 = Collection.isEmpty.getter();
    outlined destroy of [HKQuantityType]();
    swift_bridgeObjectRelease();
    if ((v142 & 1) != 0)
    {
      v135 = *(void (**)(uint64_t, uint64_t, uint64_t))(v168 + 1416);
      v8 = *(_QWORD *)(v168 + 1368);
      v134 = *(_QWORD *)(v168 + 1312);
      v133 = Logger.wellnessIntents.unsafeMutableAddressor();
      swift_beginAccess();
      v135(v8, v133, v134);
      swift_endAccess();
      log = Logger.logObject.getter();
      v137 = static os_log_type_t.debug.getter();
      *(_QWORD *)(v168 + 1008) = 2;
      UnsignedInteger<>.init<A>(_:)();
      v136 = *(_DWORD *)(v168 + 1760);
      v139 = _allocateUninitializedArray<A>(_:)();
      if (os_log_type_enabled(log, v137))
      {
        v129 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
        v128 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
        v130 = createStorage<A>(capacity:type:)(0);
        v131 = createStorage<A>(capacity:type:)(0);
        *(_QWORD *)(v168 + 1016) = v129;
        *(_QWORD *)(v168 + 1024) = v130;
        *(_QWORD *)(v168 + 1032) = v131;
        serialize(_:at:)(0, (_BYTE **)(v168 + 1016));
        serialize(_:at:)(0, (_BYTE **)(v168 + 1016));
        *(_QWORD *)(v168 + 1040) = v139;
        v132 = (_QWORD *)swift_task_alloc();
        v132[2] = v168 + 1016;
        v132[3] = v168 + 1024;
        v132[4] = v168 + 1032;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
        lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
        Sequence.forEach(_:)();
        swift_task_dealloc();
        _os_log_impl(&dword_24749F000, log, v137, "Name specified, but no potential time match nor as needed match found. Returning .noMatchFound.", v129, v136);
        destroyStorage<A>(_:count:)(v130, 0, v128);
        destroyStorage<A>(_:count:)(v131, 0, MEMORY[0x24BEE4AD8] + 8);
        MEMORY[0x24957D398](v129, MEMORY[0x24BEE4260]);
      }
      swift_bridgeObjectRelease();
      v122 = *(void (**)(uint64_t, uint64_t))(v168 + 1456);
      v120 = *(_QWORD *)(v168 + 1368);
      v121 = *(_QWORD *)(v168 + 1312);
      v124 = *(_QWORD *)(v168 + 1304);
      v123 = *(_QWORD *)(v168 + 1280);
      v125 = *(_QWORD *)(v168 + 1272);

      v122(v120, v121);
      type metadata accessor for LogSpecificMedicationsIntentResponse();
      v126 = LogSpecificMedicationsIntentResponse.__allocating_init(code:userActivity:)(105, 0);
      swift_bridgeObjectRelease();

      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      swift_release();
      (*(void (**)(uint64_t, uint64_t))(v123 + 8))(v124, v125);
      v127 = v126;
    }
    else
    {
      v117 = *(_QWORD *)(v168 + 1544);
      v118 = *(_QWORD *)(*(_QWORD *)(v168 + 1528) + 16);
      swift_bridgeObjectRetain();
      v119 = MEMORY[0x24957D110](v118, v117);
      swift_bridgeObjectRelease();
      if (v119 > 1 || *(_QWORD *)(*(_QWORD *)(v168 + 1480) + 16) > 1)
      {
        v101 = *(_QWORD *)(v168 + 1528);
        v105 = *(_QWORD *)(v168 + 1480);
        v100 = *(void (**)(uint64_t, uint64_t, uint64_t))(v168 + 1416);
        v9 = *(_QWORD *)(v168 + 1360);
        v99 = *(_QWORD *)(v168 + 1312);
        v98 = Logger.wellnessIntents.unsafeMutableAddressor();
        swift_beginAccess();
        v100(v9, v98, v99);
        swift_endAccess();
        swift_retain();
        swift_retain();
        v103 = swift_allocObject();
        *(_QWORD *)(v103 + 16) = partial apply for implicit closure #6 in SpecificMedicationsPersistor.saveMedication(named:medStatusTaken:dosage:dosageUnit:);
        *(_QWORD *)(v103 + 24) = v101;
        swift_release();
        swift_retain();
        v114 = Logger.logObject.getter();
        v115 = static os_log_type_t.debug.getter();
        *(_QWORD *)(v168 + 944) = 22;
        UnsignedInteger<>.init<A>(_:)();
        v102 = *(_DWORD *)(v168 + 1756);
        v107 = swift_allocObject();
        *(_BYTE *)(v107 + 16) = 32;
        v108 = swift_allocObject();
        *(_BYTE *)(v108 + 16) = 8;
        v104 = swift_allocObject();
        *(_QWORD *)(v104 + 16) = _s2os18OSLogInterpolationV06appendC0_5align7privacyyxyXA_AA0B15StringAlignmentVAA0B7PrivacyVts06CustomG11ConvertibleRzlFSSycfu_TA_3;
        *(_QWORD *)(v104 + 24) = v103;
        v109 = swift_allocObject();
        *(_QWORD *)(v109 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:);
        *(_QWORD *)(v109 + 24) = v104;
        v110 = swift_allocObject();
        *(_BYTE *)(v110 + 16) = 0;
        v111 = swift_allocObject();
        *(_BYTE *)(v111 + 16) = 8;
        v106 = swift_allocObject();
        *(_QWORD *)(v106 + 16) = partial apply for implicit closure #7 in SpecificMedicationsPersistor.saveMedication(named:medStatusTaken:dosage:dosageUnit:);
        *(_QWORD *)(v106 + 24) = v105;
        v112 = swift_allocObject();
        *(_QWORD *)(v112 + 16) = partial apply for thunk for @escaping @callee_guaranteed () -> (@unowned Int);
        *(_QWORD *)(v112 + 24) = v106;
        _allocateUninitializedArray<A>(_:)();
        v113 = v10;
        swift_retain();
        *v113 = partial apply for closure #1 in OSLogArguments.append(_:);
        v113[1] = v107;
        swift_retain();
        v113[2] = partial apply for closure #1 in OSLogArguments.append(_:);
        v113[3] = v108;
        swift_retain();
        v113[4] = partial apply for closure #1 in OSLogArguments.append(_:);
        v113[5] = v109;
        swift_retain();
        v113[6] = partial apply for closure #1 in OSLogArguments.append(_:);
        v113[7] = v110;
        swift_retain();
        v113[8] = partial apply for closure #1 in OSLogArguments.append(_:);
        v113[9] = v111;
        swift_retain();
        v113[10] = partial apply for closure #1 in OSLogArguments.append<A>(_:);
        v113[11] = v112;
        _finalizeUninitializedArray<A>(_:)();
        swift_bridgeObjectRelease();
        if (os_log_type_enabled(v114, v115))
        {
          v95 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
          v94 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
          v96 = createStorage<A>(capacity:type:)(0);
          v97 = createStorage<A>(capacity:type:)(1);
          v181 = v95;
          v182 = v96;
          v183 = v97;
          serialize(_:at:)(2, &v181);
          serialize(_:at:)(2, &v181);
          v184 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
          v185 = v107;
          closure #1 in osLogInternal(_:log:type:)(&v184, (uint64_t)&v181, (uint64_t)&v182, (uint64_t)&v183);
          v184 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
          v185 = v108;
          closure #1 in osLogInternal(_:log:type:)(&v184, (uint64_t)&v181, (uint64_t)&v182, (uint64_t)&v183);
          v184 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
          v185 = v109;
          closure #1 in osLogInternal(_:log:type:)(&v184, (uint64_t)&v181, (uint64_t)&v182, (uint64_t)&v183);
          v184 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
          v185 = v110;
          closure #1 in osLogInternal(_:log:type:)(&v184, (uint64_t)&v181, (uint64_t)&v182, (uint64_t)&v183);
          v184 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
          v185 = v111;
          closure #1 in osLogInternal(_:log:type:)(&v184, (uint64_t)&v181, (uint64_t)&v182, (uint64_t)&v183);
          v184 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append<A>(_:);
          v185 = v112;
          closure #1 in osLogInternal(_:log:type:)(&v184, (uint64_t)&v181, (uint64_t)&v182, (uint64_t)&v183);
          _os_log_impl(&dword_24749F000, v114, v115, "Multiple times (%s) or strengths (%ld) found for specified name today, now returning .needsNameDisambiguation", v95, v102);
          destroyStorage<A>(_:count:)(v96, 0, v94);
          destroyStorage<A>(_:count:)(v97, 1, MEMORY[0x24BEE4AD8] + 8);
          MEMORY[0x24957D398](v95, MEMORY[0x24BEE4260]);
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          swift_release();
        }
        else
        {
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          swift_release();
        }
        v90 = *(void (**)(uint64_t, uint64_t))(v168 + 1456);
        v88 = *(_QWORD *)(v168 + 1360);
        v89 = *(_QWORD *)(v168 + 1312);
        v91 = (uint64_t *)(*(_QWORD *)(v168 + 1464) + 16);

        v90(v88, v89);
        *(_QWORD *)(v168 + 1616) = type metadata accessor for MatchedMedName();
        *(_QWORD *)(v168 + 952) = _allocateUninitializedArray<A>(_:)();
        swift_beginAccess();
        v92 = *v91;
        swift_bridgeObjectRetain();
        swift_endAccess();
        *(_QWORD *)(v168 + 960) = v92;
        Collection<>.makeIterator()();
        IndexingIterator.next()();
        v93 = *(_QWORD *)(v168 + 968);
        *(_QWORD *)(v168 + 1624) = v93;
        if (v93)
        {
          *(_QWORD *)(v168 + 984) = v93;
          v11 = (_QWORD *)swift_task_alloc();
          *(_QWORD *)(v168 + 1632) = v11;
          *v11 = *(_QWORD *)(v168 + 640);
          v11[1] = SpecificMedicationsPersistor.saveMedication(named:medStatusTaken:dosage:dosageUnit:);
          return SpecificMedicationsPersistor.buildMatchedMedName(from:shouldIncludeAsNeededParams:)(v93, 1, *(_QWORD *)(v168 + 1192), *(_QWORD *)(v168 + 1200));
        }
        v83 = *(id *)(v168 + 1592);
        v85 = *(_QWORD *)(v168 + 1304);
        v84 = *(_QWORD *)(v168 + 1280);
        v86 = *(_QWORD *)(v168 + 1272);
        outlined destroy of [HKQuantityType]();
        type metadata accessor for LogSpecificMedicationsIntentResponse();
        v87 = LogSpecificMedicationsIntentResponse.__allocating_init(code:userActivity:)(103, 0);
        v12 = v87;
        v13 = v87;
        *(_QWORD *)(v168 + 976) = v87;
        swift_bridgeObjectRetain();
        v82 = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
        objc_msgSend(v87, sel_setMatchingMeds_, v82);

        outlined destroy of [HKQuantityType]();
        swift_bridgeObjectRelease();

        swift_bridgeObjectRelease();
        swift_release();
        swift_release();
        swift_release();
        (*(void (**)(uint64_t, uint64_t))(v84 + 8))(v85, v86);
        v127 = v87;
      }
      else
      {
        v69 = *(void (**)(uint64_t, uint64_t, uint64_t))(v168 + 1416);
        v14 = *(_QWORD *)(v168 + 1352);
        v68 = *(_QWORD *)(v168 + 1312);
        v70 = *(_BYTE *)(v168 + 633);
        v67 = Logger.wellnessIntents.unsafeMutableAddressor();
        swift_beginAccess();
        v69(v14, v67, v68);
        swift_endAccess();
        v72 = swift_allocObject();
        *(_BYTE *)(v72 + 16) = v70 & 1;
        v80 = Logger.logObject.getter();
        v81 = static os_log_type_t.debug.getter();
        *(_QWORD *)(v168 + 816) = 8;
        UnsignedInteger<>.init<A>(_:)();
        v71 = *(_DWORD *)(v168 + 1744);
        v76 = swift_allocObject();
        *(_BYTE *)(v76 + 16) = 0;
        v77 = swift_allocObject();
        *(_BYTE *)(v77 + 16) = 4;
        v73 = swift_allocObject();
        *(_QWORD *)(v73 + 16) = partial apply for implicit closure #5 in LogSpecificMedicationsIntentHandler.handle(intent:);
        *(_QWORD *)(v73 + 24) = v72;
        v74 = swift_allocObject();
        *(_QWORD *)(v74 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:format:privacy:);
        *(_QWORD *)(v74 + 24) = v73;
        v75 = swift_allocObject();
        *(_QWORD *)(v75 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:);
        *(_QWORD *)(v75 + 24) = v74;
        v78 = swift_allocObject();
        *(_QWORD *)(v78 + 16) = partial apply for thunk for @escaping @callee_guaranteed () -> (@unowned Int32);
        *(_QWORD *)(v78 + 24) = v75;
        _allocateUninitializedArray<A>(_:)();
        v79 = v15;
        swift_retain();
        *v79 = partial apply for closure #1 in OSLogArguments.append(_:);
        v79[1] = v76;
        swift_retain();
        v79[2] = partial apply for closure #1 in OSLogArguments.append(_:);
        v79[3] = v77;
        swift_retain();
        v79[4] = _s2os14OSLogArgumentsV6appendyyxycs17FixedWidthIntegerRzlFySpys5UInt8VGz_SpySo8NSObjectCSgGSgzSpyypGSgztcfU_TA_0;
        v79[5] = v78;
        _finalizeUninitializedArray<A>(_:)();
        swift_bridgeObjectRelease();
        if (os_log_type_enabled(v80, v81))
        {
          v64 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
          v63 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
          v65 = createStorage<A>(capacity:type:)(0);
          v66 = createStorage<A>(capacity:type:)(0);
          v176 = v64;
          v177 = v65;
          v178 = v66;
          serialize(_:at:)(0, &v176);
          serialize(_:at:)(1, &v176);
          v179 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
          v180 = v76;
          closure #1 in osLogInternal(_:log:type:)(&v179, (uint64_t)&v176, (uint64_t)&v177, (uint64_t)&v178);
          v179 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
          v180 = v77;
          closure #1 in osLogInternal(_:log:type:)(&v179, (uint64_t)&v176, (uint64_t)&v177, (uint64_t)&v178);
          v179 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))_s2os14OSLogArgumentsV6appendyyxycs17FixedWidthIntegerRzlFySpys5UInt8VGz_SpySo8NSObjectCSgGSgzSpyypGSgztcfU_TA_0;
          v180 = v78;
          closure #1 in osLogInternal(_:log:type:)(&v179, (uint64_t)&v176, (uint64_t)&v177, (uint64_t)&v178);
          _os_log_impl(&dword_24749F000, v80, v81, "Calling writeDoseEvent() for specified name with medStatus: %{BOOL}d", v64, v71);
          destroyStorage<A>(_:count:)(v65, 0, v63);
          destroyStorage<A>(_:count:)(v66, 0, MEMORY[0x24BEE4AD8] + 8);
          MEMORY[0x24957D398](v64, MEMORY[0x24BEE4260]);
          swift_release();
          swift_release();
          swift_release();
        }
        else
        {
          swift_release();
          swift_release();
          swift_release();
        }
        *(_QWORD *)(v168 + 1648) = 0;
        v59 = *(void (**)(uint64_t, uint64_t))(v168 + 1456);
        v57 = *(_QWORD *)(v168 + 1352);
        v58 = *(_QWORD *)(v168 + 1312);
        v60 = (uint64_t *)(*(_QWORD *)(v168 + 1464) + 16);

        v59(v57, v58);
        swift_beginAccess();
        v61 = *v60;
        swift_bridgeObjectRetain();
        swift_endAccess();
        swift_bridgeObjectRetain();
        *(_QWORD *)(v168 + 832) = v61;
        Collection.first.getter();
        outlined destroy of [HKQuantityType]();
        v62 = *(id *)(v168 + 824);
        swift_bridgeObjectRelease();
        if (v62)
        {
          v56 = objc_msgSend(v62, sel_scheduledDate);
          if (v56)
          {
            v52 = *(_QWORD *)(v168 + 1264);
            v53 = *(_QWORD *)(v168 + 1232);
            v54 = *(_QWORD *)(v168 + 1224);
            v55 = *(_QWORD *)(v168 + 1208);
            static Date._unconditionallyBridgeFromObjectiveC(_:)();
            (*(void (**)(uint64_t, uint64_t, uint64_t))(v53 + 32))(v55, v52, v54);
            (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v53 + 56))(v55, 0, 1, v54);

          }
          else
          {
            (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v168 + 1232) + 56))(*(_QWORD *)(v168 + 1208), 1, 1, *(_QWORD *)(v168 + 1224));
          }
          outlined init with take of Date?(*(const void **)(v168 + 1208), *(void **)(v168 + 1216));

        }
        else
        {
          (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v168 + 1232) + 56))(*(_QWORD *)(v168 + 1216), 1, 1, *(_QWORD *)(v168 + 1224));
        }
        v51 = (*(unsigned int (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)(v168 + 1232) + 48))(*(_QWORD *)(v168 + 1216), 1, *(_QWORD *)(v168 + 1224)) != 1;
        outlined destroy of Date?(*(_QWORD *)(v168 + 1216));
        *(_BYTE *)(v168 + 1728) = v51;
        if (!v51)
        {
          v27 = *(_BYTE *)(v168 + 634);
          v25 = (uint64_t *)(*(_QWORD *)(v168 + 1464) + 16);
          v18 = *(id *)(v168 + 1200);
          swift_beginAccess();
          v26 = *v25;
          *(_QWORD *)(v168 + 1696) = *v25;
          swift_bridgeObjectRetain();
          swift_endAccess();
          v19 = (_QWORD *)swift_task_alloc();
          *(_QWORD *)(v168 + 1704) = v19;
          *v19 = *(_QWORD *)(v168 + 640);
          v19[1] = SpecificMedicationsPersistor.saveMedication(named:medStatusTaken:dosage:dosageUnit:);
          v20 = *(_QWORD *)(v168 + 1200);
          v21 = *(_QWORD *)(v168 + 1184);
          v22 = *(_QWORD *)(v168 + 1176);
          v23 = *(_QWORD *)(v168 + 1168);
          v24 = *(_BYTE *)(v168 + 633);
          v191 = *(_QWORD *)(v168 + 1192);
          v192 = v20;
          return SpecificMedicationsPersistor.writeDoseEvent(medicationController:doseEvents:medStatusTaken:medicationIDPresent:dosage:dosageUnit:)(v20, v26, v24 & 1, 1, v23, v27 & 1, v22, v21);
        }
        v48 = *(_QWORD *)(v168 + 1464);
        swift_beginAccess();
        v49 = *(_QWORD *)(v48 + 16);
        swift_bridgeObjectRetain();
        swift_endAccess();
        swift_bridgeObjectRetain();
        *(_QWORD *)(v168 + 848) = v49;
        Collection.first.getter();
        outlined destroy of [HKQuantityType]();
        v50 = *(_QWORD *)(v168 + 840);
        *(_QWORD *)(v168 + 1656) = v50;
        if (v50)
        {
          v47 = *(_BYTE *)(v168 + 634);
          *(_QWORD *)(v168 + 896) = v50;
          swift_bridgeObjectRelease();
          v16 = (_QWORD *)swift_task_alloc();
          *(_QWORD *)(v168 + 1664) = v16;
          *v16 = *(_QWORD *)(v168 + 640);
          v16[1] = SpecificMedicationsPersistor.saveMedication(named:medStatusTaken:dosage:dosageUnit:);
          return SpecificMedicationsPersistor.updateDosageForDoseEvent(doseEvent:inputDosage:inputDosageUnit:)(v50, *(_QWORD *)(v168 + 1168), v47 & 1, *(_QWORD *)(v168 + 1176), *(_QWORD *)(v168 + 1184), *(_QWORD *)(v168 + 1192), *(_QWORD *)(v168 + 1200));
        }
        v42 = *(void (**)(uint64_t, uint64_t, uint64_t))(v168 + 1416);
        v17 = *(_QWORD *)(v168 + 1336);
        v41 = *(_QWORD *)(v168 + 1312);
        swift_bridgeObjectRelease();
        v40 = Logger.wellnessIntents.unsafeMutableAddressor();
        swift_beginAccess();
        v42(v17, v40, v41);
        swift_endAccess();
        v45 = Logger.logObject.getter();
        v44 = static os_log_type_t.error.getter();
        *(_QWORD *)(v168 + 856) = 2;
        UnsignedInteger<>.init<A>(_:)();
        v43 = *(_DWORD *)(v168 + 1748);
        v46 = _allocateUninitializedArray<A>(_:)();
        if (os_log_type_enabled(v45, v44))
        {
          v36 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
          v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
          v37 = createStorage<A>(capacity:type:)(0);
          v38 = createStorage<A>(capacity:type:)(0);
          *(_QWORD *)(v168 + 864) = v36;
          *(_QWORD *)(v168 + 872) = v37;
          *(_QWORD *)(v168 + 880) = v38;
          serialize(_:at:)(0, (_BYTE **)(v168 + 864));
          serialize(_:at:)(0, (_BYTE **)(v168 + 864));
          *(_QWORD *)(v168 + 888) = v46;
          v39 = (_QWORD *)swift_task_alloc();
          v39[2] = v168 + 864;
          v39[3] = v168 + 872;
          v39[4] = v168 + 880;
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
          lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
          Sequence.forEach(_:)();
          swift_task_dealloc();
          _os_log_impl(&dword_24749F000, v45, v44, "Should have at least one dose event to start confirmation, but found none. Returning failure.", v36, v43);
          destroyStorage<A>(_:count:)(v37, 0, v35);
          destroyStorage<A>(_:count:)(v38, 0, MEMORY[0x24BEE4AD8] + 8);
          MEMORY[0x24957D398](v36, MEMORY[0x24BEE4260]);
        }
        swift_bridgeObjectRelease();
        v30 = *(void (**)(uint64_t, uint64_t))(v168 + 1456);
        v28 = *(_QWORD *)(v168 + 1336);
        v29 = *(_QWORD *)(v168 + 1312);
        v32 = *(_QWORD *)(v168 + 1304);
        v31 = *(_QWORD *)(v168 + 1280);
        v33 = *(_QWORD *)(v168 + 1272);

        v30(v28, v29);
        type metadata accessor for LogSpecificMedicationsIntentResponse();
        v34 = LogSpecificMedicationsIntentResponse.__allocating_init(code:userActivity:)(5, 0);
        swift_bridgeObjectRelease();

        swift_bridgeObjectRelease();
        swift_release();
        swift_release();
        swift_release();
        (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v32, v33);
        v127 = v34;
      }
    }
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(char *))(*(_QWORD *)(v168 + 640) + 8))(v127);
  }
  return result;
}

{
  _QWORD *v0;
  id v1;
  _QWORD *v2;
  char *v4;
  char *v5;
  Class isa;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  id v12;
  id v13;
  uint64_t v14;
  uint64_t v15;

  v12 = (id)v0[205];
  v13 = (id)v0[203];
  v0[80] = v0;
  v0[124] = v12;
  v1 = v12;
  v0[125] = v12;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [MatchedMedName]);
  Array.append(_:)();

  IndexingIterator.next()();
  v15 = *(_QWORD *)(v14 + 968);
  *(_QWORD *)(v14 + 1624) = v15;
  if (v15)
  {
    *(_QWORD *)(v14 + 984) = v15;
    v2 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v14 + 1632) = v2;
    *v2 = *(_QWORD *)(v14 + 640);
    v2[1] = SpecificMedicationsPersistor.saveMedication(named:medStatusTaken:dosage:dosageUnit:);
    return SpecificMedicationsPersistor.buildMatchedMedName(from:shouldIncludeAsNeededParams:)(v15, 1, *(_QWORD *)(v14 + 1192), *(_QWORD *)(v14 + 1200));
  }
  else
  {
    v7 = *(id *)(v14 + 1592);
    v9 = *(_QWORD *)(v14 + 1304);
    v8 = *(_QWORD *)(v14 + 1280);
    v10 = *(_QWORD *)(v14 + 1272);
    outlined destroy of [HKQuantityType]();
    type metadata accessor for LogSpecificMedicationsIntentResponse();
    v11 = LogSpecificMedicationsIntentResponse.__allocating_init(code:userActivity:)(103, 0);
    v4 = v11;
    v5 = v11;
    *(_QWORD *)(v14 + 976) = v11;
    swift_bridgeObjectRetain();
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v11, sel_setMatchingMeds_, isa);

    outlined destroy of [HKQuantityType]();
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v9, v10);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(char *))(*(_QWORD *)(v14 + 640) + 8))(v11);
  }
}

{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t);
  id v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint8_t *buf;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(uint64_t, uint64_t, uint64_t);
  uint32_t size;
  os_log_type_t v24;
  NSObject *oslog;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v1 = *(_QWORD *)(v0 + 1672);
  *(_QWORD *)(v0 + 640) = v0;
  if (v1)
  {
    v27 = *(_QWORD *)(v28 + 1656);

    v2 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v28 + 1680) = v2;
    *v2 = *(_QWORD *)(v28 + 640);
    v2[1] = SpecificMedicationsPersistor.saveMedication(named:medStatusTaken:dosage:dosageUnit:);
    return SpecificMedicationsPersistor.buildConfirmationForScheduledOrAsNeeded(doseEvent:requestedMedStatus:)(v27, *(_BYTE *)(v28 + 633) & 1, *(_QWORD *)(v28 + 1192), *(_QWORD *)(v28 + 1200));
  }
  v22 = *(void (**)(uint64_t, uint64_t, uint64_t))(v28 + 1416);
  v4 = *(_QWORD *)(v28 + 1344);
  v21 = *(_QWORD *)(v28 + 1312);
  v20 = Logger.wellnessIntents.unsafeMutableAddressor();
  swift_beginAccess();
  v22(v4, v20, v21);
  swift_endAccess();
  oslog = Logger.logObject.getter();
  v24 = static os_log_type_t.debug.getter();
  *(_QWORD *)(v28 + 904) = 2;
  UnsignedInteger<>.init<A>(_:)();
  size = *(_DWORD *)(v28 + 1752);
  v26 = _allocateUninitializedArray<A>(_:)();
  if (!os_log_type_enabled(oslog, v24))
  {
    swift_bridgeObjectRelease();
    goto LABEL_8;
  }
  v5 = *(_QWORD *)(v28 + 1648);
  buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
  v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
  v17 = createStorage<A>(capacity:type:)(0);
  v18 = createStorage<A>(capacity:type:)(0);
  *(_QWORD *)(v28 + 912) = buf;
  *(_QWORD *)(v28 + 920) = v17;
  *(_QWORD *)(v28 + 928) = v18;
  serialize(_:at:)(0, (_BYTE **)(v28 + 912));
  serialize(_:at:)(0, (_BYTE **)(v28 + 912));
  *(_QWORD *)(v28 + 936) = v26;
  v19 = (_QWORD *)swift_task_alloc();
  v19[2] = v28 + 912;
  v19[3] = v28 + 920;
  v19[4] = v28 + 928;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
  lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
  result = Sequence.forEach(_:)();
  if (!v5)
  {
    swift_task_dealloc();
    _os_log_impl(&dword_24749F000, oslog, v24, "Got a complex med request wrt dosage/dosageUnit in first turn, skipping confirmAsScheduled & punching out.", buf, size);
    destroyStorage<A>(_:count:)(v17, 0, v15);
    destroyStorage<A>(_:count:)(v18, 0, MEMORY[0x24BEE4AD8] + 8);
    MEMORY[0x24957D398](buf, MEMORY[0x24BEE4260]);
    swift_bridgeObjectRelease();
LABEL_8:
    v10 = *(id *)(v28 + 1592);
    v8 = *(void (**)(uint64_t, uint64_t))(v28 + 1456);
    v6 = *(_QWORD *)(v28 + 1344);
    v7 = *(_QWORD *)(v28 + 1312);
    v12 = *(_QWORD *)(v28 + 1304);
    v11 = *(_QWORD *)(v28 + 1280);
    v13 = *(_QWORD *)(v28 + 1272);
    v9 = *(id *)(v28 + 1656);

    v8(v6, v7);
    type metadata accessor for LogSpecificMedicationsIntentResponse();
    v14 = LogSpecificMedicationsIntentResponse.__allocating_init(code:userActivity:)(112, 0);

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v12, v13);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(char *))(*(_QWORD *)(v28 + 640) + 8))(v14);
  }
  return result;
}

{
  _QWORD *v0;
  void *v1;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = (void *)v0[207];
  v3 = (id)v0[199];
  v5 = v0[163];
  v4 = v0[160];
  v6 = v0[159];
  v0[80] = v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v5, v6);
  v7 = v0[211];
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(v0[80] + 8))(v7);
}

{
  _QWORD *v0;
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = (id)v0[199];
  v4 = v0[163];
  v3 = v0[160];
  v5 = v0[159];
  v0[80] = v0;
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v4, v5);
  v6 = v0[214];
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(v0[80] + 8))(v6);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  id v3;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t);
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint8_t *buf;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(uint64_t, uint64_t, uint64_t);
  uint32_t size;
  os_log_type_t v24;
  NSObject *oslog;
  uint64_t v26;

  v19 = *(id *)(v0 + 1520);
  v1 = *(void **)(v0 + 1496);
  v22 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1416);
  v2 = *(_QWORD *)(v0 + 1328);
  v21 = *(_QWORD *)(v0 + 1312);
  *(_QWORD *)(v0 + 640) = v0;

  swift_bridgeObjectRelease();
  outlined destroy of [HKQuantityType]();
  swift_release();
  swift_release();
  v3 = v19;
  *(_QWORD *)(v0 + 1064) = v19;
  v20 = Logger.wellnessIntents.unsafeMutableAddressor();
  swift_beginAccess();
  v22(v2, v20, v21);
  swift_endAccess();
  oslog = Logger.logObject.getter();
  v24 = static os_log_type_t.error.getter();
  *(_QWORD *)(v0 + 1072) = 2;
  UnsignedInteger<>.init<A>(_:)();
  size = *(_DWORD *)(v0 + 1764);
  v26 = _allocateUninitializedArray<A>(_:)();
  if (os_log_type_enabled(oslog, v24))
  {
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    v15 = createStorage<A>(capacity:type:)(0);
    v16 = createStorage<A>(capacity:type:)(0);
    *(_QWORD *)(v18 + 1080) = buf;
    *(_QWORD *)(v18 + 1088) = v15;
    *(_QWORD *)(v18 + 1096) = v16;
    serialize(_:at:)(0, (_BYTE **)(v18 + 1080));
    serialize(_:at:)(0, (_BYTE **)(v18 + 1080));
    *(_QWORD *)(v18 + 1104) = v26;
    v17 = (_QWORD *)swift_task_alloc();
    v17[2] = v18 + 1080;
    v17[3] = v18 + 1088;
    v17[4] = v18 + 1096;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
    lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
    Sequence.forEach(_:)();
    swift_task_dealloc();
    _os_log_impl(&dword_24749F000, oslog, v24, "Failed fetching dose events for specified timeframe.", buf, size);
    destroyStorage<A>(_:count:)(v15, 0, v13);
    destroyStorage<A>(_:count:)(v16, 0, MEMORY[0x24BEE4AD8] + 8);
    MEMORY[0x24957D398](buf, MEMORY[0x24BEE4260]);
  }
  swift_bridgeObjectRelease();
  v8 = *(id *)(v18 + 1520);
  v7 = *(void (**)(uint64_t, uint64_t))(v18 + 1456);
  v5 = *(_QWORD *)(v18 + 1328);
  v6 = *(_QWORD *)(v18 + 1312);
  v10 = *(_QWORD *)(v18 + 1304);
  v9 = *(_QWORD *)(v18 + 1280);
  v11 = *(_QWORD *)(v18 + 1272);

  v7(v5, v6);
  type metadata accessor for LogSpecificMedicationsIntentResponse();
  v12 = LogSpecificMedicationsIntentResponse.__allocating_init(code:userActivity:)(5, 0);

  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v10, v11);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(char *))(*(_QWORD *)(v18 + 640) + 8))(v12);
}

uint64_t SpecificMedicationsPersistor.saveMedication(named:medStatusTaken:dosage:dosageUnit:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v5;

  v3 = (_QWORD *)*v2;
  v5 = *v2 + 16;
  v3[80] = *v2;
  v3[189] = a1;
  v3[190] = v1;
  swift_task_dealloc();
  if (!v1)

  return swift_task_switch();
}

{
  uint64_t *v1;
  uint64_t v3;

  v3 = *v1;
  *(_QWORD *)(v3 + 640) = *v1;
  *(_QWORD *)(v3 + 1584) = a1;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t *v1;
  uint64_t v3;

  v3 = *v1;
  *(_QWORD *)(v3 + 640) = *v1;
  *(_QWORD *)(v3 + 1640) = a1;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t *v1;
  uint64_t v3;

  v3 = *v1;
  *(_QWORD *)(v3 + 640) = *v1;
  *(_QWORD *)(v3 + 1672) = a1;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t *v1;
  uint64_t v3;

  v3 = *v1;
  *(_QWORD *)(v3 + 640) = *v1;
  *(_QWORD *)(v3 + 1688) = a1;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t *v1;
  void *v3;
  uint64_t v4;

  v4 = *v1;
  v3 = *(void **)(*v1 + 1200);
  *(_QWORD *)(v4 + 640) = *v1;
  *(_QWORD *)(v4 + 1712) = a1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();

  return swift_task_switch();
}

uint64_t SpecificMedicationsPersistor.saveAsNeededWithStrength(medicationID:medStatusTaken:dosage:dosageUnit:strength:strengthUnit:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v11;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  *(_QWORD *)(v8 + 280) = v23;
  *(_QWORD *)(v8 + 272) = v22;
  *(_QWORD *)(v8 + 264) = v21;
  *(_QWORD *)(v8 + 256) = v20;
  *(_BYTE *)(v8 + 115) = v19;
  *(_QWORD *)(v8 + 248) = a8;
  *(_QWORD *)(v8 + 240) = a7;
  *(_QWORD *)(v8 + 232) = a6;
  *(_BYTE *)(v8 + 114) = a5;
  *(_QWORD *)(v8 + 224) = a4;
  *(_BYTE *)(v8 + 113) = a3 & 1;
  *(_QWORD *)(v8 + 216) = a2;
  *(_QWORD *)(v8 + 208) = a1;
  *(_QWORD *)(v8 + 136) = v8;
  *(_QWORD *)(v8 + 40) = 0;
  *(_QWORD *)(v8 + 48) = 0;
  *(_BYTE *)(v8 + 368) = 0;
  *(_QWORD *)(v8 + 104) = 0;
  *(_BYTE *)(v8 + 112) = 0;
  *(_QWORD *)(v8 + 56) = 0;
  *(_QWORD *)(v8 + 64) = 0;
  *(_QWORD *)(v8 + 120) = 0;
  *(_BYTE *)(v8 + 128) = 0;
  *(_QWORD *)(v8 + 72) = 0;
  *(_QWORD *)(v8 + 80) = 0;
  *(_QWORD *)(v8 + 88) = 0;
  *(_QWORD *)(v8 + 96) = 0;
  *(_QWORD *)(v8 + 152) = 0;
  *(_QWORD *)(v8 + 168) = 0;
  v11 = type metadata accessor for Logger();
  *(_QWORD *)(v8 + 288) = v11;
  *(_QWORD *)(v8 + 296) = *(_QWORD *)(v11 - 8);
  *(_QWORD *)(v8 + 304) = swift_task_alloc();
  *(_QWORD *)(v8 + 40) = a1;
  *(_QWORD *)(v8 + 48) = a2;
  *(_BYTE *)(v8 + 368) = a3 & 1;
  *(_QWORD *)(v8 + 104) = a4;
  *(_BYTE *)(v8 + 112) = a5 & 1;
  *(_QWORD *)(v8 + 56) = a6;
  *(_QWORD *)(v8 + 64) = a7;
  *(_QWORD *)(v8 + 120) = a8;
  *(_BYTE *)(v8 + 128) = v19 & 1;
  *(_QWORD *)(v8 + 72) = v20;
  *(_QWORD *)(v8 + 80) = v21;
  *(_QWORD *)(v8 + 88) = v22;
  *(_QWORD *)(v8 + 96) = v23;
  return swift_task_switch();
}

uint64_t SpecificMedicationsPersistor.saveAsNeededWithStrength(medicationID:medStatusTaken:dosage:dosageUnit:strength:strengthUnit:)()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint8_t *buf;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint32_t v22;
  os_log_type_t v23;
  NSObject *v24;
  uint64_t v25;

  v1 = *(_QWORD *)(v0 + 304);
  v19 = *(_QWORD *)(v0 + 296);
  v21 = *(_QWORD *)(v0 + 288);
  *(_QWORD *)(v0 + 136) = v0;
  v20 = Logger.wellnessIntents.unsafeMutableAddressor();
  swift_beginAccess();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v19 + 16))(v1, v20, v21);
  swift_endAccess();
  v24 = Logger.logObject.getter();
  v23 = static os_log_type_t.debug.getter();
  *(_QWORD *)(v0 + 144) = 2;
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  v22 = *(_DWORD *)(v0 + 116);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
  v25 = _allocateUninitializedArray<A>(_:)();
  if (os_log_type_enabled(v24, v23))
  {
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    v15 = createStorage<A>(capacity:type:)(0);
    v16 = createStorage<A>(capacity:type:)(0);
    *(_QWORD *)(v18 + 176) = buf;
    *(_QWORD *)(v18 + 184) = v15;
    *(_QWORD *)(v18 + 192) = v16;
    serialize(_:at:)(0, (_BYTE **)(v18 + 176));
    serialize(_:at:)(0, (_BYTE **)(v18 + 176));
    *(_QWORD *)(v18 + 200) = v25;
    v17 = (_QWORD *)swift_task_alloc();
    v17[2] = v18 + 176;
    v17[3] = v18 + 184;
    v17[4] = v18 + 192;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
    lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
    Sequence.forEach(_:)();
    swift_task_dealloc();
    _os_log_impl(&dword_24749F000, v24, v23, "Starting to save As Needed Medication whose strength we know post-disambiguation", buf, v22);
    destroyStorage<A>(_:count:)(v15, 0, v13);
    destroyStorage<A>(_:count:)(v16, 0, MEMORY[0x24BEE4AD8] + 8);
    MEMORY[0x24957D398](buf, MEMORY[0x24BEE4260]);
  }
  swift_bridgeObjectRelease();
  *(_QWORD *)(v18 + 312) = 0;
  v6 = *(_QWORD *)(v18 + 304);
  v5 = *(_QWORD *)(v18 + 296);
  v7 = *(_QWORD *)(v18 + 288);
  v12 = *(_BYTE *)(v18 + 115);
  v11 = *(_QWORD *)(v18 + 216);
  v9 = *(_QWORD *)(v18 + 208);

  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v6, v7);
  v8 = _allocateUninitializedArray<A>(_:)();
  v10 = v2;
  swift_bridgeObjectRetain();
  *v10 = v9;
  v10[1] = v11;
  _finalizeUninitializedArray<A>(_:)();
  *(_QWORD *)(v18 + 320) = v8;
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v18 + 328) = v3;
  *v3 = *(_QWORD *)(v18 + 136);
  v3[1] = SpecificMedicationsPersistor.saveAsNeededWithStrength(medicationID:medStatusTaken:dosage:dosageUnit:strength:strengthUnit:);
  return SpecificMedicationsPersistor.getMedicationsMatching(medicationIDs:strength:strengthUnit:isAsNeeded:)(v8, *(_QWORD *)(v18 + 248), v12 & 1, *(_QWORD *)(v18 + 256), *(_QWORD *)(v18 + 264), 0, *(_QWORD *)(v18 + 272), *(_QWORD *)(v18 + 280));
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t result;
  id v5;
  _QWORD *v6;
  id v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v1 = v0[42];
  v2 = v0[39];
  v0[17] = v0;
  v0[19] = v1;
  v0[20] = v1;
  v10 = swift_task_alloc();
  *(_QWORD *)(v10 + 16) = -1;
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [HKUserTrackedMedication]);
  v12 = type metadata accessor for HKMedicationExposableDoseEvent();
  v3 = lazy protocol witness table accessor for type [HKUserTrackedMedication] and conformance [A]();
  result = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in SpecificMedicationsPersistor.saveAsNeededWithStrength(medicationID:medStatusTaken:dosage:dosageUnit:strength:strengthUnit:), v10, v11, v12, MEMORY[0x24BEE4078], v3, MEMORY[0x24BEE40A8], v13);
  v14 = result;
  v0[43] = result;
  if (!v2)
  {
    v7 = *(id *)(v9 + 280);
    v8 = *(_BYTE *)(v9 + 114);
    swift_task_dealloc();
    *(_QWORD *)(v9 + 168) = v14;
    v5 = v7;
    v6 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v9 + 352) = v6;
    *v6 = *(_QWORD *)(v9 + 136);
    v6[1] = SpecificMedicationsPersistor.saveAsNeededWithStrength(medicationID:medStatusTaken:dosage:dosageUnit:strength:strengthUnit:);
    return SpecificMedicationsPersistor.writeDoseEvent(medicationController:doseEvents:medStatusTaken:medicationIDPresent:dosage:dosageUnit:)(*(_QWORD *)(v9 + 280), v14, *(_BYTE *)(v9 + 113) & 1, 1, *(_QWORD *)(v9 + 224), v8 & 1, *(_QWORD *)(v9 + 232), *(_QWORD *)(v9 + 240));
  }
  return result;
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 136) = v0;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)(v0 + 136) + 8))(*(_QWORD *)(v0 + 360));
}

uint64_t SpecificMedicationsPersistor.saveAsNeededWithStrength(medicationID:medStatusTaken:dosage:dosageUnit:strength:strengthUnit:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;

  v3 = *v1;
  *(_QWORD *)(v3 + 136) = *v1;
  *(_QWORD *)(v3 + 336) = a1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  return swift_task_switch();
}

{
  uint64_t *v1;
  void *v3;
  uint64_t v4;

  v4 = *v1;
  v3 = *(void **)(*v1 + 280);
  *(_QWORD *)(v4 + 136) = *v1;
  *(_QWORD *)(v4 + 360) = a1;
  swift_task_dealloc();

  return swift_task_switch();
}

uint64_t SpecificMedicationsPersistor.getMedicationsMatching(medicationIDs:strength:strengthUnit:isAsNeeded:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)(v8 + 256) = a8;
  *(_QWORD *)(v8 + 248) = a7;
  *(_BYTE *)(v8 + 130) = a6 & 1;
  *(_QWORD *)(v8 + 240) = a5;
  *(_QWORD *)(v8 + 232) = a4;
  *(_BYTE *)(v8 + 129) = a3;
  *(_QWORD *)(v8 + 224) = a2;
  *(_QWORD *)(v8 + 216) = a1;
  *(_QWORD *)(v8 + 136) = v8;
  *(_QWORD *)(v8 + 144) = 0;
  *(_QWORD *)(v8 + 120) = 0;
  *(_BYTE *)(v8 + 128) = 0;
  *(_QWORD *)(v8 + 88) = 0;
  *(_QWORD *)(v8 + 96) = 0;
  *(_BYTE *)(v8 + 376) = 0;
  *(_QWORD *)(v8 + 104) = 0;
  *(_QWORD *)(v8 + 112) = 0;
  *(_QWORD *)(v8 + 160) = 0;
  *(_QWORD *)(v8 + 200) = 0;
  v9 = type metadata accessor for Logger();
  *(_QWORD *)(v8 + 264) = v9;
  *(_QWORD *)(v8 + 272) = *(_QWORD *)(v9 - 8);
  *(_QWORD *)(v8 + 280) = swift_task_alloc();
  *(_QWORD *)(v8 + 288) = swift_task_alloc();
  *(_QWORD *)(v8 + 296) = swift_task_alloc();
  *(_QWORD *)(v8 + 144) = a1;
  *(_QWORD *)(v8 + 120) = a2;
  *(_BYTE *)(v8 + 128) = a3 & 1;
  *(_QWORD *)(v8 + 88) = a4;
  *(_QWORD *)(v8 + 96) = a5;
  *(_BYTE *)(v8 + 376) = a6 & 1;
  *(_QWORD *)(v8 + 104) = a7;
  *(_QWORD *)(v8 + 112) = a8;
  return swift_task_switch();
}

uint64_t SpecificMedicationsPersistor.getMedicationsMatching(medicationIDs:strength:strengthUnit:isAsNeeded:)()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t, uint64_t, uint64_t);
  _QWORD *v3;
  void (*v4)(uint64_t, uint64_t);
  _QWORD *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint8_t *buf;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint32_t size;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  NSObject *v27;
  os_log_type_t v28;
  uint8_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t (*v32)(uint64_t, uint64_t, uint64_t);
  uint64_t v33;

  v1 = *(_QWORD *)(v0 + 296);
  v15 = *(_QWORD *)(v0 + 272);
  v17 = *(_QWORD *)(v0 + 264);
  v18 = *(_QWORD *)(v0 + 216);
  *(_QWORD *)(v0 + 136) = v0;
  v16 = Logger.wellness.unsafeMutableAddressor();
  swift_beginAccess();
  v2 = *(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 16);
  *(_QWORD *)(v0 + 304) = v2;
  v2(v1, v16, v17);
  swift_endAccess();
  swift_bridgeObjectRetain();
  v19 = swift_allocObject();
  *(_QWORD *)(v19 + 16) = v18;
  swift_retain();
  v21 = swift_allocObject();
  *(_QWORD *)(v21 + 16) = partial apply for implicit closure #3 in getPreferredUnit(for:store:);
  *(_QWORD *)(v21 + 24) = v19;
  swift_release();
  v27 = Logger.logObject.getter();
  v28 = static os_log_type_t.debug.getter();
  *(_QWORD *)(v0 + 152) = 12;
  *(_QWORD *)(v0 + 312) = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  *(_QWORD *)(v0 + 320) = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  *(_QWORD *)(v0 + 328) = lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  size = *(_DWORD *)(v0 + 132);
  v23 = swift_allocObject();
  *(_BYTE *)(v23 + 16) = 32;
  v24 = swift_allocObject();
  *(_BYTE *)(v24 + 16) = 8;
  v22 = swift_allocObject();
  *(_QWORD *)(v22 + 16) = implicit closure #1 in OSLogInterpolation.appendInterpolation<A>(_:align:privacy:)partial apply;
  *(_QWORD *)(v22 + 24) = v21;
  v25 = swift_allocObject();
  *(_QWORD *)(v25 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:);
  *(_QWORD *)(v25 + 24) = v22;
  *(_QWORD *)(v0 + 336) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
  _allocateUninitializedArray<A>(_:)();
  v26 = v3;
  swift_retain();
  *v26 = partial apply for closure #1 in OSLogArguments.append(_:);
  v26[1] = v23;
  swift_retain();
  v26[2] = partial apply for closure #1 in OSLogArguments.append(_:);
  v26[3] = v24;
  swift_retain();
  v26[4] = partial apply for closure #1 in OSLogArguments.append(_:);
  v26[5] = v25;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(v27, v28))
  {
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    v12 = createStorage<A>(capacity:type:)(0);
    v13 = createStorage<A>(capacity:type:)(1);
    v29 = buf;
    v30 = v12;
    v31 = v13;
    serialize(_:at:)(2, &v29);
    serialize(_:at:)(1, &v29);
    v32 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v33 = v23;
    closure #1 in osLogInternal(_:log:type:)(&v32, (uint64_t)&v29, (uint64_t)&v30, (uint64_t)&v31);
    v32 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v33 = v24;
    closure #1 in osLogInternal(_:log:type:)(&v32, (uint64_t)&v29, (uint64_t)&v30, (uint64_t)&v31);
    v32 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v33 = v25;
    closure #1 in osLogInternal(_:log:type:)(&v32, (uint64_t)&v29, (uint64_t)&v30, (uint64_t)&v31);
    _os_log_impl(&dword_24749F000, v27, v28, "Attempting to getMedicationsMatching for medicationIDs: %s", buf, size);
    destroyStorage<A>(_:count:)(v12, 0, v10);
    destroyStorage<A>(_:count:)(v13, 1, MEMORY[0x24BEE4AD8] + 8);
    MEMORY[0x24957D398](buf, MEMORY[0x24BEE4260]);
    swift_release();
    swift_release();
    swift_release();
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
  }
  v8 = v14[37];
  v7 = v14[34];
  v9 = v14[33];

  v4 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
  v14[43] = v4;
  v4(v8, v9);
  v5 = (_QWORD *)swift_task_alloc();
  v14[44] = v5;
  *v5 = v14[17];
  v5[1] = SpecificMedicationsPersistor.getMedicationsMatching(medicationIDs:strength:strengthUnit:isAsNeeded:);
  return SpecificMedicationsPersistor.doUTCQueryForMedications()(v14[31], v14[32]);
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t);
  uint64_t v9;
  uint8_t *buf;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t, uint64_t);
  uint32_t size;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  NSObject *oslog;
  os_log_type_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint8_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t (*v39)(uint64_t, uint64_t, uint64_t);
  uint64_t v40;

  v1 = v0[46];
  v2 = v0[45];
  v34 = v0[27];
  v0[17] = v0;
  v0[22] = v2;
  swift_bridgeObjectRetain();
  *(_QWORD *)(swift_task_alloc() + 16) = v34;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [HKUserTrackedMedication]);
  lazy protocol witness table accessor for type [HKUserTrackedMedication] and conformance [A]();
  result = _ArrayProtocol.filter(_:)();
  v35 = result;
  if (!v1)
  {
    v31 = *(_BYTE *)(v33 + 130);
    swift_task_dealloc();
    swift_bridgeObjectRelease();
    *(_QWORD *)(v33 + 184) = v35;
    *(_BYTE *)(swift_task_alloc() + 16) = v31 & 1;
    v32 = _ArrayProtocol.filter(_:)();
    v28 = *(_QWORD *)(v33 + 240);
    v27 = *(_QWORD *)(v33 + 232);
    v26 = *(_BYTE *)(v33 + 129);
    v25 = *(_QWORD *)(v33 + 224);
    swift_task_dealloc();
    *(_QWORD *)(v33 + 192) = v32;
    swift_bridgeObjectRetain();
    v29 = swift_task_alloc();
    *(_QWORD *)(v29 + 16) = v25;
    *(_BYTE *)(v29 + 24) = v26 & 1;
    *(_QWORD *)(v29 + 32) = v27;
    *(_QWORD *)(v29 + 40) = v28;
    v30 = _ArrayProtocol.filter(_:)();
    v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(v33 + 304);
    v4 = *(_QWORD *)(v33 + 288);
    v14 = *(_QWORD *)(v33 + 264);
    swift_task_dealloc();
    swift_bridgeObjectRelease();
    *(_QWORD *)(v33 + 200) = v30;
    v13 = Logger.wellness.unsafeMutableAddressor();
    swift_beginAccess();
    v15(v4, v13, v14);
    swift_endAccess();
    swift_bridgeObjectRetain();
    v17 = swift_allocObject();
    *(_QWORD *)(v17 + 16) = v30;
    oslog = Logger.logObject.getter();
    v24 = static os_log_type_t.debug.getter();
    *(_QWORD *)(v33 + 208) = 12;
    UnsignedInteger<>.init<A>(_:)();
    size = *(_DWORD *)(v33 + 384);
    v19 = swift_allocObject();
    *(_BYTE *)(v19 + 16) = 0;
    v20 = swift_allocObject();
    *(_BYTE *)(v20 + 16) = 8;
    v18 = swift_allocObject();
    *(_QWORD *)(v18 + 16) = partial apply for implicit closure #2 in SpecificMedicationsPersistor.getMedicationsMatching(medicationIDs:strength:strengthUnit:isAsNeeded:);
    *(_QWORD *)(v18 + 24) = v17;
    v21 = swift_allocObject();
    *(_QWORD *)(v21 + 16) = partial apply for thunk for @escaping @callee_guaranteed () -> (@unowned Int);
    *(_QWORD *)(v21 + 24) = v18;
    _allocateUninitializedArray<A>(_:)();
    v22 = v5;
    swift_retain();
    *v22 = partial apply for closure #1 in OSLogArguments.append(_:);
    v22[1] = v19;
    swift_retain();
    v22[2] = partial apply for closure #1 in OSLogArguments.append(_:);
    v22[3] = v20;
    swift_retain();
    v22[4] = partial apply for closure #1 in OSLogArguments.append<A>(_:);
    v22[5] = v21;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(oslog, v24))
    {
      buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      v11 = createStorage<A>(capacity:type:)(0);
      v12 = createStorage<A>(capacity:type:)(0);
      v36 = buf;
      v37 = v11;
      v38 = v12;
      serialize(_:at:)(0, &v36);
      serialize(_:at:)(1, &v36);
      v39 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v40 = v19;
      closure #1 in osLogInternal(_:log:type:)(&v39, (uint64_t)&v36, (uint64_t)&v37, (uint64_t)&v38);
      v39 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v40 = v20;
      closure #1 in osLogInternal(_:log:type:)(&v39, (uint64_t)&v36, (uint64_t)&v37, (uint64_t)&v38);
      v39 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append<A>(_:);
      v40 = v21;
      closure #1 in osLogInternal(_:log:type:)(&v39, (uint64_t)&v36, (uint64_t)&v37, (uint64_t)&v38);
      _os_log_impl(&dword_24749F000, oslog, v24, "got matchingUserTrackedMeds: %ld", buf, size);
      destroyStorage<A>(_:count:)(v11, 0, v9);
      destroyStorage<A>(_:count:)(v12, 0, MEMORY[0x24BEE4AD8] + 8);
      MEMORY[0x24957D398](buf, MEMORY[0x24BEE4260]);
      swift_release();
      swift_release();
      swift_release();
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
    }
    v8 = *(void (**)(uint64_t, uint64_t))(v33 + 344);
    v6 = *(_QWORD *)(v33 + 288);
    v7 = *(_QWORD *)(v33 + 264);

    v8(v6, v7);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v33 + 136) + 8))(v30);
  }
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  id v2;
  id v3;
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t);
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint8_t *buf;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t, uint64_t, uint64_t);
  id v19;
  uint32_t size;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  NSObject *v28;
  os_log_type_t v29;
  uint8_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t (*v33)(uint64_t, uint64_t, uint64_t);
  uint64_t v34;

  v19 = *(id *)(v0 + 368);
  v18 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 304);
  v1 = *(_QWORD *)(v0 + 280);
  v17 = *(_QWORD *)(v0 + 264);
  *(_QWORD *)(v0 + 136) = v0;
  v2 = v19;
  *(_QWORD *)(v0 + 160) = v19;
  v16 = Logger.wellnessIntents.unsafeMutableAddressor();
  swift_beginAccess();
  v18(v1, v16, v17);
  swift_endAccess();
  v3 = v19;
  v21 = swift_allocObject();
  *(_QWORD *)(v21 + 16) = v19;
  default argument 2 of OSLogInterpolation.appendInterpolation(_:privacy:attributes:)();
  swift_bridgeObjectRelease();
  v28 = Logger.logObject.getter();
  v29 = static os_log_type_t.error.getter();
  *(_QWORD *)(v0 + 168) = 12;
  UnsignedInteger<>.init<A>(_:)();
  size = *(_DWORD *)(v0 + 380);
  v24 = swift_allocObject();
  *(_BYTE *)(v24 + 16) = 64;
  v25 = swift_allocObject();
  *(_BYTE *)(v25 + 16) = 8;
  v22 = swift_allocObject();
  *(_QWORD *)(v22 + 16) = partial apply for implicit closure #10 in getPreferredUnit(for:store:);
  *(_QWORD *)(v22 + 24) = v21;
  v23 = swift_allocObject();
  *(_QWORD *)(v23 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:attributes:);
  *(_QWORD *)(v23 + 24) = v22;
  v26 = swift_allocObject();
  *(_QWORD *)(v26 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:);
  *(_QWORD *)(v26 + 24) = v23;
  _allocateUninitializedArray<A>(_:)();
  v27 = v4;
  swift_retain();
  *v27 = partial apply for closure #1 in OSLogArguments.append(_:);
  v27[1] = v24;
  swift_retain();
  v27[2] = partial apply for closure #1 in OSLogArguments.append(_:);
  v27[3] = v25;
  swift_retain();
  v27[4] = partial apply for closure #1 in OSLogArguments.append(_:);
  v27[5] = v26;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(v28, v29))
  {
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    v13 = createStorage<A>(capacity:type:)(1);
    v14 = createStorage<A>(capacity:type:)(0);
    v30 = buf;
    v31 = v13;
    v32 = v14;
    serialize(_:at:)(2, &v30);
    serialize(_:at:)(1, &v30);
    v33 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v34 = v24;
    closure #1 in osLogInternal(_:log:type:)(&v33, (uint64_t)&v30, (uint64_t)&v31, (uint64_t)&v32);
    v33 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v34 = v25;
    closure #1 in osLogInternal(_:log:type:)(&v33, (uint64_t)&v30, (uint64_t)&v31, (uint64_t)&v32);
    v33 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v34 = v26;
    closure #1 in osLogInternal(_:log:type:)(&v33, (uint64_t)&v30, (uint64_t)&v31, (uint64_t)&v32);
    _os_log_impl(&dword_24749F000, v28, v29, "Error doing UTC Query for Medications: %@", buf, size);
    destroyStorage<A>(_:count:)(v13, 1, v11);
    destroyStorage<A>(_:count:)(v14, 0, MEMORY[0x24BEE4AD8] + 8);
    MEMORY[0x24957D398](buf, MEMORY[0x24BEE4260]);
    swift_release();
    swift_release();
    swift_release();
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
  }
  v9 = (id)v15[46];
  v8 = (void (*)(uint64_t, uint64_t))v15[43];
  v6 = v15[35];
  v7 = v15[33];

  v8(v6, v7);
  type metadata accessor for HKUserTrackedMedication();
  v10 = _allocateUninitializedArray<A>(_:)();

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(v15[17] + 8))(v10);
}

uint64_t SpecificMedicationsPersistor.getMedicationsMatching(medicationIDs:strength:strengthUnit:isAsNeeded:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;

  v3 = (_QWORD *)*v2;
  v3[17] = *v2;
  v3[45] = a1;
  v3[46] = v1;
  swift_task_dealloc();
  return swift_task_switch();
}

id closure #1 in SpecificMedicationsPersistor.saveAsNeededWithStrength(medicationID:medStatusTaken:dosage:dosageUnit:strength:strengthUnit:)@<X0>(uint64_t *a1@<X0>, Swift::Int a2@<X1>, _QWORD *a3@<X8>)
{
  id result;
  uint64_t v5;
  id v6;
  Class isa;
  id v8;

  v5 = *a1;
  v6 = (id)objc_opt_self();
  type metadata accessor for NSNumber();
  isa = NSNumber.__allocating_init(value:)(a2).super.super.isa;
  v8 = objc_msgSend(v6, sel_asNeededExposableDoseEventForMedication_doseQuantity_, v5);

  result = v8;
  *a3 = v8;
  return result;
}

NSNumber __swiftcall NSNumber.__allocating_init(value:)(Swift::Int value)
{
  id v1;

  v1 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  return (NSNumber)@nonobjc NSNumber.init(value:)(value);
}

uint64_t SpecificMedicationsPersistor.writeDoseEvent(medicationController:doseEvents:medStatusTaken:medicationIDPresent:dosage:dosageUnit:)(uint64_t a1, uint64_t a2, char a3, char a4, uint64_t a5, char a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v20;
  uint64_t v21;

  *(_QWORD *)(v8 + 1080) = v21;
  *(_QWORD *)(v8 + 1072) = v20;
  *(_QWORD *)(v8 + 1064) = a8;
  *(_QWORD *)(v8 + 1056) = a7;
  *(_BYTE *)(v8 + 531) = a6;
  *(_QWORD *)(v8 + 1048) = a5;
  *(_BYTE *)(v8 + 530) = a4 & 1;
  *(_BYTE *)(v8 + 529) = a3 & 1;
  *(_QWORD *)(v8 + 1040) = a2;
  *(_QWORD *)(v8 + 1032) = a1;
  *(_QWORD *)(v8 + 536) = v8;
  *(_QWORD *)(v8 + 544) = 0;
  *(_QWORD *)(v8 + 552) = 0;
  *(_BYTE *)(v8 + 1464) = 0;
  *(_BYTE *)(v8 + 1472) = 0;
  *(_QWORD *)(v8 + 520) = 0;
  *(_BYTE *)(v8 + 528) = 0;
  *(_QWORD *)(v8 + 360) = 0;
  *(_QWORD *)(v8 + 368) = 0;
  *(_QWORD *)(v8 + 376) = 0;
  *(_QWORD *)(v8 + 384) = 0;
  *(_QWORD *)(v8 + 568) = 0;
  *(_QWORD *)(v8 + 576) = 0;
  *(_QWORD *)(v8 + 392) = 0;
  *(_QWORD *)(v8 + 400) = 0;
  *(_QWORD *)(v8 + 608) = 0;
  *(_QWORD *)(v8 + 656) = 0;
  *(_QWORD *)(v8 + 664) = 0;
  *(_QWORD *)(v8 + 408) = 0;
  *(_QWORD *)(v8 + 416) = 0;
  *(_QWORD *)(v8 + 704) = 0;
  *(_QWORD *)(v8 + 424) = 0;
  *(_QWORD *)(v8 + 432) = 0;
  *(_QWORD *)(v8 + 728) = 0;
  *(_QWORD *)(v8 + 736) = 0;
  *(_QWORD *)(v8 + 752) = 0;
  *(_QWORD *)(v8 + 472) = 0;
  *(_QWORD *)(v8 + 480) = 0;
  *(_QWORD *)(v8 + 792) = 0;
  *(_QWORD *)(v8 + 800) = 0;
  *(_QWORD *)(v8 + 816) = 0;
  *(_QWORD *)(v8 + 872) = 0;
  *(_QWORD *)(v8 + 896) = 0;
  *(_QWORD *)(v8 + 904) = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  *(_QWORD *)(v8 + 1088) = swift_task_alloc();
  *(_QWORD *)(v8 + 1096) = swift_task_alloc();
  v10 = type metadata accessor for Date();
  *(_QWORD *)(v8 + 1104) = v10;
  *(_QWORD *)(v8 + 1112) = *(_QWORD *)(v10 - 8);
  *(_QWORD *)(v8 + 1120) = swift_task_alloc();
  v11 = type metadata accessor for Logger();
  *(_QWORD *)(v8 + 1128) = v11;
  *(_QWORD *)(v8 + 1136) = *(_QWORD *)(v11 - 8);
  *(_QWORD *)(v8 + 1144) = swift_task_alloc();
  *(_QWORD *)(v8 + 1152) = swift_task_alloc();
  *(_QWORD *)(v8 + 1160) = swift_task_alloc();
  *(_QWORD *)(v8 + 1168) = swift_task_alloc();
  *(_QWORD *)(v8 + 1176) = swift_task_alloc();
  *(_QWORD *)(v8 + 1184) = swift_task_alloc();
  *(_QWORD *)(v8 + 1192) = swift_task_alloc();
  *(_QWORD *)(v8 + 544) = a1;
  *(_QWORD *)(v8 + 552) = a2;
  *(_BYTE *)(v8 + 1464) = a3 & 1;
  *(_BYTE *)(v8 + 1472) = a4 & 1;
  *(_QWORD *)(v8 + 520) = a5;
  *(_BYTE *)(v8 + 528) = a6 & 1;
  *(_QWORD *)(v8 + 360) = a7;
  *(_QWORD *)(v8 + 368) = a8;
  *(_QWORD *)(v8 + 376) = v20;
  *(_QWORD *)(v8 + 384) = v21;
  return swift_task_switch();
}

uint64_t SpecificMedicationsPersistor.writeDoseEvent(medicationController:doseEvents:medStatusTaken:medicationIDPresent:dosage:dosageUnit:)()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t, uint64_t, uint64_t);
  _QWORD *v3;
  void (*v4)(uint64_t, uint64_t);
  uint64_t v5;
  id v6;
  id v7;
  id v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t);
  Class isa;
  id v18;
  uint64_t v19;
  uint8_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint32_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  NSObject *log;
  os_log_type_t v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(uint64_t, uint64_t);
  char v39;
  uint64_t v40;
  uint8_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void (*v46)(uint64_t, uint64_t, uint64_t);
  uint32_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  NSObject *oslog;
  os_log_type_t v65;
  uint64_t v66;
  void *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char v72;
  uint64_t v73;
  uint64_t v74;
  uint8_t *buf;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char v83;
  uint64_t v84;
  uint64_t v85;
  uint32_t size;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  _QWORD *v97;
  NSObject *v98;
  os_log_type_t v99;
  uint8_t *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t (*v103)(uint64_t, uint64_t, uint64_t);
  uint64_t v104;
  uint8_t *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t (*v108)(uint64_t, uint64_t, uint64_t);
  uint64_t v109;

  v1 = *(_QWORD *)(v0 + 1192);
  v79 = *(_QWORD *)(v0 + 1136);
  v81 = *(_QWORD *)(v0 + 1128);
  v85 = *(_QWORD *)(v0 + 1064);
  v84 = *(_QWORD *)(v0 + 1056);
  v83 = *(_BYTE *)(v0 + 531);
  v82 = *(_QWORD *)(v0 + 1048);
  *(_QWORD *)(v0 + 536) = v0;
  v80 = Logger.wellnessIntents.unsafeMutableAddressor();
  swift_beginAccess();
  v2 = *(void (**)(uint64_t, uint64_t, uint64_t))(v79 + 16);
  *(_QWORD *)(v0 + 1200) = v2;
  v2(v1, v80, v81);
  swift_endAccess();
  v87 = swift_allocObject();
  *(_QWORD *)(v87 + 16) = v82;
  *(_BYTE *)(v87 + 24) = v83 & 1;
  swift_bridgeObjectRetain();
  v89 = swift_allocObject();
  *(_QWORD *)(v89 + 16) = v84;
  *(_QWORD *)(v89 + 24) = v85;
  v98 = Logger.logObject.getter();
  v99 = static os_log_type_t.debug.getter();
  *(_QWORD *)(v0 + 560) = 22;
  *(_QWORD *)(v0 + 1208) = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  *(_QWORD *)(v0 + 1216) = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  *(_QWORD *)(v0 + 1224) = lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  size = *(_DWORD *)(v0 + 532);
  v91 = swift_allocObject();
  *(_BYTE *)(v91 + 16) = 32;
  v92 = swift_allocObject();
  *(_BYTE *)(v92 + 16) = 8;
  v88 = swift_allocObject();
  *(_QWORD *)(v88 + 16) = partial apply for implicit closure #1 in SpecificMedicationsPersistor.writeDoseEvent(medicationController:doseEvents:medStatusTaken:medicationIDPresent:dosage:dosageUnit:);
  *(_QWORD *)(v88 + 24) = v87;
  v93 = swift_allocObject();
  *(_QWORD *)(v93 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:);
  *(_QWORD *)(v93 + 24) = v88;
  v94 = swift_allocObject();
  *(_BYTE *)(v94 + 16) = 32;
  v95 = swift_allocObject();
  *(_BYTE *)(v95 + 16) = 8;
  v90 = swift_allocObject();
  *(_QWORD *)(v90 + 16) = partial apply for implicit closure #2 in SpecificMedicationsPersistor.writeDoseEvent(medicationController:doseEvents:medStatusTaken:medicationIDPresent:dosage:dosageUnit:);
  *(_QWORD *)(v90 + 24) = v89;
  v96 = swift_allocObject();
  *(_QWORD *)(v96 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:);
  *(_QWORD *)(v96 + 24) = v90;
  *(_QWORD *)(v0 + 1232) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
  _allocateUninitializedArray<A>(_:)();
  v97 = v3;
  swift_retain();
  *v97 = partial apply for closure #1 in OSLogArguments.append(_:);
  v97[1] = v91;
  swift_retain();
  v97[2] = partial apply for closure #1 in OSLogArguments.append(_:);
  v97[3] = v92;
  swift_retain();
  v97[4] = partial apply for closure #1 in OSLogArguments.append(_:);
  v97[5] = v93;
  swift_retain();
  v97[6] = partial apply for closure #1 in OSLogArguments.append(_:);
  v97[7] = v94;
  swift_retain();
  v97[8] = partial apply for closure #1 in OSLogArguments.append(_:);
  v97[9] = v95;
  swift_retain();
  v97[10] = partial apply for closure #1 in OSLogArguments.append(_:);
  v97[11] = v96;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(v98, v99))
  {
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    v74 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    v76 = createStorage<A>(capacity:type:)(0);
    v77 = createStorage<A>(capacity:type:)(2);
    v105 = buf;
    v106 = v76;
    v107 = v77;
    serialize(_:at:)(2, &v105);
    serialize(_:at:)(2, &v105);
    v108 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v109 = v91;
    closure #1 in osLogInternal(_:log:type:)(&v108, (uint64_t)&v105, (uint64_t)&v106, (uint64_t)&v107);
    v108 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v109 = v92;
    closure #1 in osLogInternal(_:log:type:)(&v108, (uint64_t)&v105, (uint64_t)&v106, (uint64_t)&v107);
    v108 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v109 = v93;
    closure #1 in osLogInternal(_:log:type:)(&v108, (uint64_t)&v105, (uint64_t)&v106, (uint64_t)&v107);
    v108 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v109 = v94;
    closure #1 in osLogInternal(_:log:type:)(&v108, (uint64_t)&v105, (uint64_t)&v106, (uint64_t)&v107);
    v108 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v109 = v95;
    closure #1 in osLogInternal(_:log:type:)(&v108, (uint64_t)&v105, (uint64_t)&v106, (uint64_t)&v107);
    v108 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v109 = v96;
    closure #1 in osLogInternal(_:log:type:)(&v108, (uint64_t)&v105, (uint64_t)&v106, (uint64_t)&v107);
    _os_log_impl(&dword_24749F000, v98, v99, "Starting to write dose event: dosage (%s), dosageUnit (%s)", buf, size);
    destroyStorage<A>(_:count:)(v76, 0, v74);
    destroyStorage<A>(_:count:)(v77, 2, MEMORY[0x24BEE4AD8] + 8);
    MEMORY[0x24957D398](buf, MEMORY[0x24BEE4260]);
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
  }
  v70 = *(_QWORD *)(v78 + 1192);
  v69 = *(_QWORD *)(v78 + 1136);
  v71 = *(_QWORD *)(v78 + 1128);
  v72 = *(_BYTE *)(v78 + 529);

  v4 = *(void (**)(uint64_t, uint64_t))(v69 + 8);
  *(_QWORD *)(v78 + 1240) = v4;
  v4(v70, v71);
  if ((v72 & 1) != 0)
    v68 = 4;
  else
    v68 = 5;
  *(_QWORD *)(v78 + 1248) = v68;
  v66 = *(_QWORD *)(v78 + 1040);
  *(_QWORD *)(v78 + 568) = v68;
  *(_QWORD *)(v78 + 1256) = type metadata accessor for HKMedicationExposableDoseEvent();
  *(_QWORD *)(v78 + 576) = _allocateUninitializedArray<A>(_:)();
  swift_bridgeObjectRetain();
  *(_QWORD *)(v78 + 584) = v66;
  *(_QWORD *)(v78 + 1264) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [HKMedicationExposableDoseEvent]);
  *(_QWORD *)(v78 + 1272) = lazy protocol witness table accessor for type [HKMedicationExposableDoseEvent] and conformance [A]();
  Collection<>.makeIterator()();
  *(_QWORD *)(v78 + 1280) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<[HKMedicationExposableDoseEvent]>);
  IndexingIterator.next()();
  v67 = *(void **)(v78 + 592);
  *(_QWORD *)(v78 + 1288) = v67;
  if (v67)
  {
    v46 = *(void (**)(uint64_t, uint64_t, uint64_t))(v78 + 1200);
    v5 = *(_QWORD *)(v78 + 1184);
    v45 = *(_QWORD *)(v78 + 1128);
    *(_QWORD *)(v78 + 816) = v67;
    v44 = Logger.wellnessIntents.unsafeMutableAddressor();
    swift_beginAccess();
    v46(v5, v44, v45);
    swift_endAccess();
    v6 = v67;
    v48 = swift_allocObject();
    *(_QWORD *)(v48 + 16) = v67;
    v7 = v67;
    v50 = swift_allocObject();
    *(_QWORD *)(v50 + 16) = v67;
    v8 = v67;
    v52 = swift_allocObject();
    *(_QWORD *)(v52 + 16) = v67;
    oslog = Logger.logObject.getter();
    v65 = static os_log_type_t.debug.getter();
    *(_QWORD *)(v78 + 824) = 32;
    UnsignedInteger<>.init<A>(_:)();
    v47 = *(_DWORD *)(v78 + 1480);
    v54 = swift_allocObject();
    *(_BYTE *)(v54 + 16) = 32;
    v55 = swift_allocObject();
    *(_BYTE *)(v55 + 16) = 8;
    v49 = swift_allocObject();
    *(_QWORD *)(v49 + 16) = partial apply for implicit closure #3 in SpecificMedicationsPersistor.writeDoseEvent(medicationController:doseEvents:medStatusTaken:medicationIDPresent:dosage:dosageUnit:);
    *(_QWORD *)(v49 + 24) = v48;
    v56 = swift_allocObject();
    *(_QWORD *)(v56 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:);
    *(_QWORD *)(v56 + 24) = v49;
    v57 = swift_allocObject();
    *(_BYTE *)(v57 + 16) = 32;
    v58 = swift_allocObject();
    *(_BYTE *)(v58 + 16) = 8;
    v51 = swift_allocObject();
    *(_QWORD *)(v51 + 16) = partial apply for implicit closure #4 in SpecificMedicationsPersistor.writeDoseEvent(medicationController:doseEvents:medStatusTaken:medicationIDPresent:dosage:dosageUnit:);
    *(_QWORD *)(v51 + 24) = v50;
    v59 = swift_allocObject();
    *(_QWORD *)(v59 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:);
    *(_QWORD *)(v59 + 24) = v51;
    v60 = swift_allocObject();
    *(_BYTE *)(v60 + 16) = 32;
    v61 = swift_allocObject();
    *(_BYTE *)(v61 + 16) = 8;
    v53 = swift_allocObject();
    *(_QWORD *)(v53 + 16) = partial apply for implicit closure #5 in SpecificMedicationsPersistor.writeDoseEvent(medicationController:doseEvents:medStatusTaken:medicationIDPresent:dosage:dosageUnit:);
    *(_QWORD *)(v53 + 24) = v52;
    v62 = swift_allocObject();
    *(_QWORD *)(v62 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:);
    *(_QWORD *)(v62 + 24) = v53;
    _allocateUninitializedArray<A>(_:)();
    v63 = v9;
    swift_retain();
    *v63 = partial apply for closure #1 in OSLogArguments.append(_:);
    v63[1] = v54;
    swift_retain();
    v63[2] = partial apply for closure #1 in OSLogArguments.append(_:);
    v63[3] = v55;
    swift_retain();
    v63[4] = partial apply for closure #1 in OSLogArguments.append(_:);
    v63[5] = v56;
    swift_retain();
    v63[6] = partial apply for closure #1 in OSLogArguments.append(_:);
    v63[7] = v57;
    swift_retain();
    v63[8] = partial apply for closure #1 in OSLogArguments.append(_:);
    v63[9] = v58;
    swift_retain();
    v63[10] = partial apply for closure #1 in OSLogArguments.append(_:);
    v63[11] = v59;
    swift_retain();
    v63[12] = partial apply for closure #1 in OSLogArguments.append(_:);
    v63[13] = v60;
    swift_retain();
    v63[14] = partial apply for closure #1 in OSLogArguments.append(_:);
    v63[15] = v61;
    swift_retain();
    v63[16] = partial apply for closure #1 in OSLogArguments.append(_:);
    v63[17] = v62;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(oslog, v65))
    {
      v41 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      v40 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      v42 = createStorage<A>(capacity:type:)(0);
      v43 = createStorage<A>(capacity:type:)(3);
      *(_QWORD *)(v78 + 1008) = v41;
      *(_QWORD *)(v78 + 1016) = v42;
      *(_QWORD *)(v78 + 1024) = v43;
      serialize(_:at:)(2, (_BYTE **)(v78 + 1008));
      serialize(_:at:)(3, (_BYTE **)(v78 + 1008));
      *(_QWORD *)(v78 + 504) = partial apply for closure #1 in OSLogArguments.append(_:);
      *(_QWORD *)(v78 + 512) = v54;
      closure #1 in osLogInternal(_:log:type:)((uint64_t (**)(uint64_t, uint64_t, uint64_t))(v78 + 504), v78 + 1008, v78 + 1016, v78 + 1024);
      *(_QWORD *)(v78 + 504) = partial apply for closure #1 in OSLogArguments.append(_:);
      *(_QWORD *)(v78 + 512) = v55;
      closure #1 in osLogInternal(_:log:type:)((uint64_t (**)(uint64_t, uint64_t, uint64_t))(v78 + 504), v78 + 1008, v78 + 1016, v78 + 1024);
      *(_QWORD *)(v78 + 504) = partial apply for closure #1 in OSLogArguments.append(_:);
      *(_QWORD *)(v78 + 512) = v56;
      closure #1 in osLogInternal(_:log:type:)((uint64_t (**)(uint64_t, uint64_t, uint64_t))(v78 + 504), v78 + 1008, v78 + 1016, v78 + 1024);
      *(_QWORD *)(v78 + 504) = partial apply for closure #1 in OSLogArguments.append(_:);
      *(_QWORD *)(v78 + 512) = v57;
      closure #1 in osLogInternal(_:log:type:)((uint64_t (**)(uint64_t, uint64_t, uint64_t))(v78 + 504), v78 + 1008, v78 + 1016, v78 + 1024);
      *(_QWORD *)(v78 + 504) = partial apply for closure #1 in OSLogArguments.append(_:);
      *(_QWORD *)(v78 + 512) = v58;
      closure #1 in osLogInternal(_:log:type:)((uint64_t (**)(uint64_t, uint64_t, uint64_t))(v78 + 504), v78 + 1008, v78 + 1016, v78 + 1024);
      *(_QWORD *)(v78 + 504) = partial apply for closure #1 in OSLogArguments.append(_:);
      *(_QWORD *)(v78 + 512) = v59;
      closure #1 in osLogInternal(_:log:type:)((uint64_t (**)(uint64_t, uint64_t, uint64_t))(v78 + 504), v78 + 1008, v78 + 1016, v78 + 1024);
      *(_QWORD *)(v78 + 504) = partial apply for closure #1 in OSLogArguments.append(_:);
      *(_QWORD *)(v78 + 512) = v60;
      closure #1 in osLogInternal(_:log:type:)((uint64_t (**)(uint64_t, uint64_t, uint64_t))(v78 + 504), v78 + 1008, v78 + 1016, v78 + 1024);
      *(_QWORD *)(v78 + 504) = partial apply for closure #1 in OSLogArguments.append(_:);
      *(_QWORD *)(v78 + 512) = v61;
      closure #1 in osLogInternal(_:log:type:)((uint64_t (**)(uint64_t, uint64_t, uint64_t))(v78 + 504), v78 + 1008, v78 + 1016, v78 + 1024);
      *(_QWORD *)(v78 + 504) = partial apply for closure #1 in OSLogArguments.append(_:);
      *(_QWORD *)(v78 + 512) = v62;
      closure #1 in osLogInternal(_:log:type:)((uint64_t (**)(uint64_t, uint64_t, uint64_t))(v78 + 504), v78 + 1008, v78 + 1016, v78 + 1024);
      _os_log_impl(&dword_24749F000, oslog, v65, "in writeDoseEvent(), started with a doseEvent w/ dosage: (%s), scheduledDosage: (%s), logOrigin: (%s)", v41, v47);
      destroyStorage<A>(_:count:)(v42, 0, v40);
      destroyStorage<A>(_:count:)(v43, 3, MEMORY[0x24BEE4AD8] + 8);
      MEMORY[0x24957D398](v41, MEMORY[0x24BEE4260]);
    }
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    *(_QWORD *)(v78 + 1296) = 0;
    v38 = *(void (**)(uint64_t, uint64_t))(v78 + 1240);
    v36 = *(_QWORD *)(v78 + 1184);
    v37 = *(_QWORD *)(v78 + 1128);
    v39 = *(_BYTE *)(v78 + 531);

    v38(v36, v37);
    v10 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v78 + 1304) = v10;
    *v10 = *(_QWORD *)(v78 + 536);
    v10[1] = SpecificMedicationsPersistor.writeDoseEvent(medicationController:doseEvents:medStatusTaken:medicationIDPresent:dosage:dosageUnit:);
    return SpecificMedicationsPersistor.updateDosageForDoseEvent(doseEvent:inputDosage:inputDosageUnit:)((uint64_t)v67, *(_QWORD *)(v78 + 1048), v39 & 1, *(_QWORD *)(v78 + 1056), *(_QWORD *)(v78 + 1064), *(_QWORD *)(v78 + 1072), *(_QWORD *)(v78 + 1080));
  }
  else
  {
    v25 = *(void (**)(uint64_t, uint64_t, uint64_t))(v78 + 1200);
    v12 = *(_QWORD *)(v78 + 1152);
    v24 = *(_QWORD *)(v78 + 1128);
    outlined destroy of [HKQuantityType]();
    v23 = Logger.wellnessIntents.unsafeMutableAddressor();
    swift_beginAccess();
    v25(v12, v23, v24);
    swift_endAccess();
    v26 = *(_QWORD *)(v78 + 576);
    swift_bridgeObjectRetain();
    v28 = swift_allocObject();
    *(_QWORD *)(v28 + 16) = v26;
    log = Logger.logObject.getter();
    v35 = static os_log_type_t.debug.getter();
    *(_QWORD *)(v78 + 600) = 12;
    UnsignedInteger<>.init<A>(_:)();
    v27 = *(_DWORD *)(v78 + 1468);
    v30 = swift_allocObject();
    *(_BYTE *)(v30 + 16) = 0;
    v31 = swift_allocObject();
    *(_BYTE *)(v31 + 16) = 8;
    v29 = swift_allocObject();
    *(_QWORD *)(v29 + 16) = partial apply for specialized implicit closure #10 in SpecificMedicationsPersistor.writeDoseEvent(medicationController:doseEvents:medStatusTaken:medicationIDPresent:dosage:dosageUnit:);
    *(_QWORD *)(v29 + 24) = v28;
    v32 = swift_allocObject();
    *(_QWORD *)(v32 + 16) = partial apply for thunk for @escaping @callee_guaranteed () -> (@unowned Int);
    *(_QWORD *)(v32 + 24) = v29;
    _allocateUninitializedArray<A>(_:)();
    v33 = v13;
    swift_retain();
    *v33 = partial apply for closure #1 in OSLogArguments.append(_:);
    v33[1] = v30;
    swift_retain();
    v33[2] = partial apply for closure #1 in OSLogArguments.append(_:);
    v33[3] = v31;
    swift_retain();
    v33[4] = partial apply for closure #1 in OSLogArguments.append<A>(_:);
    v33[5] = v32;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(log, v35))
    {
      v20 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      v21 = createStorage<A>(capacity:type:)(0);
      v22 = createStorage<A>(capacity:type:)(0);
      v100 = v20;
      v101 = v21;
      v102 = v22;
      serialize(_:at:)(0, &v100);
      serialize(_:at:)(1, &v100);
      v103 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v104 = v30;
      closure #1 in osLogInternal(_:log:type:)(&v103, (uint64_t)&v100, (uint64_t)&v101, (uint64_t)&v102);
      v103 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v104 = v31;
      closure #1 in osLogInternal(_:log:type:)(&v103, (uint64_t)&v100, (uint64_t)&v101, (uint64_t)&v102);
      v103 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append<A>(_:);
      v104 = v32;
      closure #1 in osLogInternal(_:log:type:)(&v103, (uint64_t)&v100, (uint64_t)&v101, (uint64_t)&v102);
      _os_log_impl(&dword_24749F000, log, v35, "writeDoseEvent() - added %ld doseEvents to updatedDoseEvents", v20, v27);
      destroyStorage<A>(_:count:)(v21, 0, v19);
      destroyStorage<A>(_:count:)(v22, 0, MEMORY[0x24BEE4AD8] + 8);
      MEMORY[0x24957D398](v20, MEMORY[0x24BEE4260]);
      swift_release();
      swift_release();
      swift_release();
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
    }
    v16 = *(void (**)(uint64_t, uint64_t))(v78 + 1240);
    v14 = *(_QWORD *)(v78 + 1152);
    v15 = *(_QWORD *)(v78 + 1128);
    v18 = *(id *)(v78 + 1032);

    v16(v14, v15);
    swift_beginAccess();
    swift_bridgeObjectRetain();
    swift_endAccess();
    isa = Array._bridgeToObjectiveC()().super.isa;
    *(_QWORD *)(v78 + 1320) = isa;
    swift_bridgeObjectRelease();
    *(_QWORD *)(v78 + 16) = *(_QWORD *)(v78 + 536);
    *(_QWORD *)(v78 + 56) = v73;
    *(_QWORD *)(v78 + 24) = SpecificMedicationsPersistor.writeDoseEvent(medicationController:doseEvents:medStatusTaken:medicationIDPresent:dosage:dosageUnit:);
    *(_QWORD *)(v78 + 112) = swift_continuation_init();
    *(_QWORD *)(v78 + 80) = MEMORY[0x24BDAC760];
    *(_DWORD *)(v78 + 88) = 0x40000000;
    *(_DWORD *)(v78 + 92) = 0;
    *(_QWORD *)(v78 + 96) = @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned Bool, @unowned NSError?) -> () with result type () zero on error;
    *(_QWORD *)(v78 + 104) = &block_descriptor_5;
    objc_msgSend(v18, sel_writeDoseEvents_completion_, isa, v78 + 80);
    return __swift_continuation_await_point(v78 + 16);
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  id v3;
  id v4;
  id v5;
  _QWORD *v6;
  uint64_t result;
  _QWORD *v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  id v13;
  id v14;
  _QWORD *v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(uint64_t, uint64_t);
  Class v25;
  id v26;
  uint64_t v27;
  uint8_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(uint64_t, uint64_t, uint64_t);
  uint64_t v34;
  uint32_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  NSObject *v42;
  os_log_type_t v43;
  uint64_t v44;
  uint64_t v45;
  void (*v46)(uint64_t, uint64_t);
  id v47;
  char *v48;
  uint64_t v49;
  uint8_t *v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  void (*v56)(uint64_t, uint64_t, uint64_t);
  uint32_t v57;
  os_log_type_t v58;
  NSObject *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void (*v63)(uint64_t, uint64_t);
  id v64;
  uint64_t v65;
  uint64_t v66;
  uint8_t *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  id v74;
  Class isa;
  uint64_t v76;
  uint64_t v77;
  void (*v78)(uint64_t, uint64_t, uint64_t);
  id v79;
  void *v80;
  uint32_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  _QWORD *v97;
  NSObject *log;
  os_log_type_t v99;
  uint64_t v100;
  uint64_t v101;
  void (*v102)(uint64_t, uint64_t);
  id v103;
  char *v104;
  char *v105;
  uint64_t v106;
  uint8_t *v107;
  uint64_t v108;
  uint64_t v109;
  _QWORD *v110;
  uint64_t v111;
  uint64_t v112;
  void (*v113)(uint64_t, uint64_t, uint64_t);
  uint32_t v114;
  os_log_type_t v115;
  NSObject *oslog;
  uint64_t v117;
  id v118;
  uint64_t v119;
  uint64_t v120;
  void (*v121)(uint64_t, uint64_t);
  char v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint8_t *buf;
  uint64_t v127;
  uint64_t v128;
  void *v129;
  uint64_t v130;
  uint64_t v131;
  void (*v132)(uint64_t, uint64_t, uint64_t);
  uint32_t size;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  _QWORD *v149;
  NSObject *v150;
  os_log_type_t v151;
  uint64_t v152;
  uint8_t *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t (*v156)(uint64_t, uint64_t, uint64_t);
  uint64_t v157;

  v1 = *(_QWORD *)(v0 + 1312);
  *(_QWORD *)(v0 + 536) = v0;
  if (!v1)
  {
    v56 = *(void (**)(uint64_t, uint64_t, uint64_t))(v152 + 1200);
    v18 = *(_QWORD *)(v152 + 1160);
    v55 = *(_QWORD *)(v152 + 1128);
    v54 = Logger.wellnessIntents.unsafeMutableAddressor();
    swift_beginAccess();
    v56(v18, v54, v55);
    swift_endAccess();
    v59 = Logger.logObject.getter();
    v58 = static os_log_type_t.error.getter();
    *(_QWORD *)(v152 + 832) = 2;
    UnsignedInteger<>.init<A>(_:)();
    v57 = *(_DWORD *)(v152 + 1484);
    v60 = _allocateUninitializedArray<A>(_:)();
    if (os_log_type_enabled(v59, v58))
    {
      v19 = *(_QWORD *)(v152 + 1296);
      v50 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      v49 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      v51 = createStorage<A>(capacity:type:)(0);
      v52 = createStorage<A>(capacity:type:)(0);
      *(_QWORD *)(v152 + 840) = v50;
      *(_QWORD *)(v152 + 848) = v51;
      *(_QWORD *)(v152 + 856) = v52;
      serialize(_:at:)(0, (_BYTE **)(v152 + 840));
      serialize(_:at:)(0, (_BYTE **)(v152 + 840));
      *(_QWORD *)(v152 + 864) = v60;
      v53 = (_QWORD *)swift_task_alloc();
      v53[2] = v152 + 840;
      v53[3] = v152 + 848;
      v53[4] = v152 + 856;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
      lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
      result = Sequence.forEach(_:)();
      if (v19)
        return result;
      swift_task_dealloc();
      _os_log_impl(&dword_24749F000, v59, v58, "in writeDoseEvent, got complex dosage logging error, returning .gotComplexDosageLoggingError.", v50, v57);
      destroyStorage<A>(_:count:)(v51, 0, v49);
      destroyStorage<A>(_:count:)(v52, 0, MEMORY[0x24BEE4AD8] + 8);
      MEMORY[0x24957D398](v50, MEMORY[0x24BEE4260]);
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    v46 = *(void (**)(uint64_t, uint64_t))(v152 + 1240);
    v44 = *(_QWORD *)(v152 + 1160);
    v45 = *(_QWORD *)(v152 + 1128);
    v47 = *(id *)(v152 + 1288);

    v46(v44, v45);
    type metadata accessor for LogSpecificMedicationsIntentResponse();
    v48 = LogSpecificMedicationsIntentResponse.__allocating_init(code:userActivity:)(112, 0);

    outlined destroy of [HKQuantityType]();
    outlined destroy of [HKQuantityType]();
    v105 = v48;
LABEL_38:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(char *))(*(_QWORD *)(v152 + 536) + 8))(v105);
  }
  v118 = *(id *)(v152 + 1312);
  *(_QWORD *)(v152 + 872) = v118;
  *(_QWORD *)(v152 + 880) = objc_msgSend(v118, sel_logOrigin);
  *(_QWORD *)(v152 + 888) = 1;
  type metadata accessor for HKMedicationDoseEventLogOrigin();
  lazy protocol witness table accessor for type HKMedicationDoseEventLogOrigin and conformance HKMedicationDoseEventLogOrigin();
  v9 = == infix<A>(_:_:)();
  if ((v9 & 1) != 0)
  {
    *(_QWORD *)(v152 + 992) = *(_QWORD *)(v152 + 1248);
    *(_QWORD *)(v152 + 1000) = 4;
    type metadata accessor for HKMedicationDoseEventStatus();
    lazy protocol witness table accessor for type HKMedicationDoseEventStatus and conformance HKMedicationDoseEventStatus();
    if ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) == 0)
    {
      v113 = *(void (**)(uint64_t, uint64_t, uint64_t))(v152 + 1200);
      v10 = *(_QWORD *)(v152 + 1176);
      v112 = *(_QWORD *)(v152 + 1128);
      v111 = Logger.wellness.unsafeMutableAddressor();
      swift_beginAccess();
      v113(v10, v111, v112);
      swift_endAccess();
      oslog = Logger.logObject.getter();
      v115 = static os_log_type_t.error.getter();
      *(_QWORD *)(v152 + 952) = 2;
      UnsignedInteger<>.init<A>(_:)();
      v114 = *(_DWORD *)(v152 + 1492);
      v117 = _allocateUninitializedArray<A>(_:)();
      if (os_log_type_enabled(oslog, v115))
      {
        v11 = *(_QWORD *)(v152 + 1296);
        v107 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
        v106 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
        v108 = createStorage<A>(capacity:type:)(0);
        v109 = createStorage<A>(capacity:type:)(0);
        *(_QWORD *)(v152 + 960) = v107;
        *(_QWORD *)(v152 + 968) = v108;
        *(_QWORD *)(v152 + 976) = v109;
        serialize(_:at:)(0, (_BYTE **)(v152 + 960));
        serialize(_:at:)(0, (_BYTE **)(v152 + 960));
        *(_QWORD *)(v152 + 984) = v117;
        v110 = (_QWORD *)swift_task_alloc();
        v110[2] = v152 + 960;
        v110[3] = v152 + 968;
        v110[4] = v152 + 976;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
        lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
        result = Sequence.forEach(_:)();
        if (v11)
          return result;
        swift_task_dealloc();
        _os_log_impl(&dword_24749F000, oslog, v115, "This is an as needed dose event; you can only log it as taken, but got different requested status. returning .failure",
          v107,
          v114);
        destroyStorage<A>(_:count:)(v108, 0, v106);
        destroyStorage<A>(_:count:)(v109, 0, MEMORY[0x24BEE4AD8] + 8);
        MEMORY[0x24957D398](v107, MEMORY[0x24BEE4260]);
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRelease();
      }
      v102 = *(void (**)(uint64_t, uint64_t))(v152 + 1240);
      v100 = *(_QWORD *)(v152 + 1176);
      v101 = *(_QWORD *)(v152 + 1128);
      v103 = *(id *)(v152 + 1288);

      v102(v100, v101);
      type metadata accessor for LogSpecificMedicationsIntentResponse();
      v104 = LogSpecificMedicationsIntentResponse.__allocating_init(code:userActivity:)(5, 0);

      outlined destroy of [HKQuantityType]();
      outlined destroy of [HKQuantityType]();
      v105 = v104;
      goto LABEL_38;
    }
  }
  v78 = *(void (**)(uint64_t, uint64_t, uint64_t))(v152 + 1200);
  v70 = *(_QWORD *)(v152 + 1168);
  v77 = *(_QWORD *)(v152 + 1128);
  v73 = *(_QWORD *)(v152 + 1120);
  v71 = *(_QWORD *)(v152 + 1112);
  v72 = *(_QWORD *)(v152 + 1104);
  v80 = *(void **)(v152 + 1288);
  v74 = objc_msgSend(v118, sel_updateForNewStatus_, *(_QWORD *)(v152 + 1248));
  *(_QWORD *)(v152 + 896) = v74;
  Date.init()();
  isa = Date._bridgeToObjectiveC()().super.isa;
  (*(void (**)(uint64_t, uint64_t))(v71 + 8))(v73, v72);
  v79 = objc_msgSend(v74, sel_updateForNewStartDate_, isa);

  *(_QWORD *)(v152 + 904) = v79;
  v76 = Logger.wellnessIntents.unsafeMutableAddressor();
  swift_beginAccess();
  v78(v70, v76, v77);
  swift_endAccess();
  v12 = v79;
  v82 = swift_allocObject();
  *(_QWORD *)(v82 + 16) = v79;
  v13 = v79;
  v84 = swift_allocObject();
  *(_QWORD *)(v84 + 16) = v79;
  v14 = v80;
  v86 = swift_allocObject();
  *(_QWORD *)(v86 + 16) = v80;
  log = Logger.logObject.getter();
  v99 = static os_log_type_t.debug.getter();
  *(_QWORD *)(v152 + 912) = 32;
  UnsignedInteger<>.init<A>(_:)();
  v81 = *(_DWORD *)(v152 + 1488);
  v88 = swift_allocObject();
  *(_BYTE *)(v88 + 16) = 32;
  v89 = swift_allocObject();
  *(_BYTE *)(v89 + 16) = 8;
  v83 = swift_allocObject();
  *(_QWORD *)(v83 + 16) = partial apply for implicit closure #3 in SpecificMedicationsPersistor.writeDoseEvent(medicationController:doseEvents:medStatusTaken:medicationIDPresent:dosage:dosageUnit:);
  *(_QWORD *)(v83 + 24) = v82;
  v90 = swift_allocObject();
  *(_QWORD *)(v90 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:);
  *(_QWORD *)(v90 + 24) = v83;
  v91 = swift_allocObject();
  *(_BYTE *)(v91 + 16) = 32;
  v92 = swift_allocObject();
  *(_BYTE *)(v92 + 16) = 8;
  v85 = swift_allocObject();
  *(_QWORD *)(v85 + 16) = partial apply for implicit closure #4 in SpecificMedicationsPersistor.writeDoseEvent(medicationController:doseEvents:medStatusTaken:medicationIDPresent:dosage:dosageUnit:);
  *(_QWORD *)(v85 + 24) = v84;
  v93 = swift_allocObject();
  *(_QWORD *)(v93 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:);
  *(_QWORD *)(v93 + 24) = v85;
  v94 = swift_allocObject();
  *(_BYTE *)(v94 + 16) = 32;
  v95 = swift_allocObject();
  *(_BYTE *)(v95 + 16) = 8;
  v87 = swift_allocObject();
  *(_QWORD *)(v87 + 16) = partial apply for implicit closure #5 in SpecificMedicationsPersistor.writeDoseEvent(medicationController:doseEvents:medStatusTaken:medicationIDPresent:dosage:dosageUnit:);
  *(_QWORD *)(v87 + 24) = v86;
  v96 = swift_allocObject();
  *(_QWORD *)(v96 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:);
  *(_QWORD *)(v96 + 24) = v87;
  _allocateUninitializedArray<A>(_:)();
  v97 = v15;
  swift_retain();
  *v97 = partial apply for closure #1 in OSLogArguments.append(_:);
  v97[1] = v88;
  swift_retain();
  v97[2] = partial apply for closure #1 in OSLogArguments.append(_:);
  v97[3] = v89;
  swift_retain();
  v97[4] = partial apply for closure #1 in OSLogArguments.append(_:);
  v97[5] = v90;
  swift_retain();
  v97[6] = partial apply for closure #1 in OSLogArguments.append(_:);
  v97[7] = v91;
  swift_retain();
  v97[8] = partial apply for closure #1 in OSLogArguments.append(_:);
  v97[9] = v92;
  swift_retain();
  v97[10] = partial apply for closure #1 in OSLogArguments.append(_:);
  v97[11] = v93;
  swift_retain();
  v97[12] = partial apply for closure #1 in OSLogArguments.append(_:);
  v97[13] = v94;
  swift_retain();
  v97[14] = partial apply for closure #1 in OSLogArguments.append(_:);
  v97[15] = v95;
  swift_retain();
  v97[16] = partial apply for closure #1 in OSLogArguments.append(_:);
  v97[17] = v96;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(log, v99))
  {
    v16 = *(_QWORD *)(v152 + 1296);
    v67 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    v66 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    v68 = createStorage<A>(capacity:type:)(0);
    v69 = createStorage<A>(capacity:type:)(3);
    *(_QWORD *)(v152 + 928) = v67;
    *(_QWORD *)(v152 + 936) = v68;
    *(_QWORD *)(v152 + 944) = v69;
    serialize(_:at:)(2, (_BYTE **)(v152 + 928));
    serialize(_:at:)(3, (_BYTE **)(v152 + 928));
    *(_QWORD *)(v152 + 488) = partial apply for closure #1 in OSLogArguments.append(_:);
    *(_QWORD *)(v152 + 496) = v88;
    result = closure #1 in osLogInternal(_:log:type:)((uint64_t (**)(uint64_t, uint64_t, uint64_t))(v152 + 488), v152 + 928, v152 + 936, v152 + 944);
    if (v16)
      return result;
    *(_QWORD *)(v152 + 488) = partial apply for closure #1 in OSLogArguments.append(_:);
    *(_QWORD *)(v152 + 496) = v89;
    closure #1 in osLogInternal(_:log:type:)((uint64_t (**)(uint64_t, uint64_t, uint64_t))(v152 + 488), v152 + 928, v152 + 936, v152 + 944);
    *(_QWORD *)(v152 + 488) = partial apply for closure #1 in OSLogArguments.append(_:);
    *(_QWORD *)(v152 + 496) = v90;
    closure #1 in osLogInternal(_:log:type:)((uint64_t (**)(uint64_t, uint64_t, uint64_t))(v152 + 488), v152 + 928, v152 + 936, v152 + 944);
    *(_QWORD *)(v152 + 488) = partial apply for closure #1 in OSLogArguments.append(_:);
    *(_QWORD *)(v152 + 496) = v91;
    closure #1 in osLogInternal(_:log:type:)((uint64_t (**)(uint64_t, uint64_t, uint64_t))(v152 + 488), v152 + 928, v152 + 936, v152 + 944);
    *(_QWORD *)(v152 + 488) = partial apply for closure #1 in OSLogArguments.append(_:);
    *(_QWORD *)(v152 + 496) = v92;
    closure #1 in osLogInternal(_:log:type:)((uint64_t (**)(uint64_t, uint64_t, uint64_t))(v152 + 488), v152 + 928, v152 + 936, v152 + 944);
    *(_QWORD *)(v152 + 488) = partial apply for closure #1 in OSLogArguments.append(_:);
    *(_QWORD *)(v152 + 496) = v93;
    closure #1 in osLogInternal(_:log:type:)((uint64_t (**)(uint64_t, uint64_t, uint64_t))(v152 + 488), v152 + 928, v152 + 936, v152 + 944);
    *(_QWORD *)(v152 + 488) = partial apply for closure #1 in OSLogArguments.append(_:);
    *(_QWORD *)(v152 + 496) = v94;
    closure #1 in osLogInternal(_:log:type:)((uint64_t (**)(uint64_t, uint64_t, uint64_t))(v152 + 488), v152 + 928, v152 + 936, v152 + 944);
    *(_QWORD *)(v152 + 488) = partial apply for closure #1 in OSLogArguments.append(_:);
    *(_QWORD *)(v152 + 496) = v95;
    closure #1 in osLogInternal(_:log:type:)((uint64_t (**)(uint64_t, uint64_t, uint64_t))(v152 + 488), v152 + 928, v152 + 936, v152 + 944);
    *(_QWORD *)(v152 + 488) = partial apply for closure #1 in OSLogArguments.append(_:);
    *(_QWORD *)(v152 + 496) = v96;
    closure #1 in osLogInternal(_:log:type:)((uint64_t (**)(uint64_t, uint64_t, uint64_t))(v152 + 488), v152 + 928, v152 + 936, v152 + 944);
    _os_log_impl(&dword_24749F000, log, v99, "in writeDoseEvent(), updated to doseEvent w/ dosage: (%s), scheduledDosage: (%s), logOrigin: (%s)", v67, v81);
    destroyStorage<A>(_:count:)(v68, 0, v66);
    destroyStorage<A>(_:count:)(v69, 3, MEMORY[0x24BEE4AD8] + 8);
    MEMORY[0x24957D398](v67, MEMORY[0x24BEE4260]);
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    v65 = 0;
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    v65 = *(_QWORD *)(v152 + 1296);
  }
  v63 = *(void (**)(uint64_t, uint64_t))(v152 + 1240);
  v61 = *(_QWORD *)(v152 + 1168);
  v62 = *(_QWORD *)(v152 + 1128);
  v64 = *(id *)(v152 + 1288);

  v63(v61, v62);
  v17 = v79;
  *(_QWORD *)(v152 + 920) = v79;
  Array.append(_:)();

  *(_QWORD *)(v152 + 1280) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<[HKMedicationExposableDoseEvent]>);
  IndexingIterator.next()();
  v129 = *(void **)(v152 + 592);
  *(_QWORD *)(v152 + 1288) = v129;
  if (!v129)
  {
    v33 = *(void (**)(uint64_t, uint64_t, uint64_t))(v152 + 1200);
    v20 = *(_QWORD *)(v152 + 1152);
    v32 = *(_QWORD *)(v152 + 1128);
    outlined destroy of [HKQuantityType]();
    v31 = Logger.wellnessIntents.unsafeMutableAddressor();
    swift_beginAccess();
    v33(v20, v31, v32);
    swift_endAccess();
    v34 = *(_QWORD *)(v152 + 576);
    swift_bridgeObjectRetain();
    v36 = swift_allocObject();
    *(_QWORD *)(v36 + 16) = v34;
    v42 = Logger.logObject.getter();
    v43 = static os_log_type_t.debug.getter();
    *(_QWORD *)(v152 + 600) = 12;
    UnsignedInteger<>.init<A>(_:)();
    v35 = *(_DWORD *)(v152 + 1468);
    v38 = swift_allocObject();
    *(_BYTE *)(v38 + 16) = 0;
    v39 = swift_allocObject();
    *(_BYTE *)(v39 + 16) = 8;
    v37 = swift_allocObject();
    *(_QWORD *)(v37 + 16) = partial apply for specialized implicit closure #10 in SpecificMedicationsPersistor.writeDoseEvent(medicationController:doseEvents:medStatusTaken:medicationIDPresent:dosage:dosageUnit:);
    *(_QWORD *)(v37 + 24) = v36;
    v40 = swift_allocObject();
    *(_QWORD *)(v40 + 16) = partial apply for thunk for @escaping @callee_guaranteed () -> (@unowned Int);
    *(_QWORD *)(v40 + 24) = v37;
    _allocateUninitializedArray<A>(_:)();
    v41 = v21;
    swift_retain();
    *v41 = partial apply for closure #1 in OSLogArguments.append(_:);
    v41[1] = v38;
    swift_retain();
    v41[2] = partial apply for closure #1 in OSLogArguments.append(_:);
    v41[3] = v39;
    swift_retain();
    v41[4] = partial apply for closure #1 in OSLogArguments.append<A>(_:);
    v41[5] = v40;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(v42, v43))
    {
      v28 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      v29 = createStorage<A>(capacity:type:)(0);
      v30 = createStorage<A>(capacity:type:)(0);
      v153 = v28;
      v154 = v29;
      v155 = v30;
      serialize(_:at:)(0, &v153);
      serialize(_:at:)(1, &v153);
      v156 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v157 = v38;
      result = closure #1 in osLogInternal(_:log:type:)(&v156, (uint64_t)&v153, (uint64_t)&v154, (uint64_t)&v155);
      if (v65)
        return result;
      v156 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v157 = v39;
      closure #1 in osLogInternal(_:log:type:)(&v156, (uint64_t)&v153, (uint64_t)&v154, (uint64_t)&v155);
      v156 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append<A>(_:);
      v157 = v40;
      closure #1 in osLogInternal(_:log:type:)(&v156, (uint64_t)&v153, (uint64_t)&v154, (uint64_t)&v155);
      _os_log_impl(&dword_24749F000, v42, v43, "writeDoseEvent() - added %ld doseEvents to updatedDoseEvents", v28, v35);
      destroyStorage<A>(_:count:)(v29, 0, v27);
      destroyStorage<A>(_:count:)(v30, 0, MEMORY[0x24BEE4AD8] + 8);
      MEMORY[0x24957D398](v28, MEMORY[0x24BEE4260]);
      swift_release();
      swift_release();
      swift_release();
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
    }
    v24 = *(void (**)(uint64_t, uint64_t))(v152 + 1240);
    v22 = *(_QWORD *)(v152 + 1152);
    v23 = *(_QWORD *)(v152 + 1128);
    v26 = *(id *)(v152 + 1032);

    v24(v22, v23);
    swift_beginAccess();
    swift_bridgeObjectRetain();
    swift_endAccess();
    v25 = Array._bridgeToObjectiveC()().super.isa;
    *(_QWORD *)(v152 + 1320) = v25;
    swift_bridgeObjectRelease();
    *(_QWORD *)(v152 + 16) = *(_QWORD *)(v152 + 536);
    *(_QWORD *)(v152 + 56) = v124;
    *(_QWORD *)(v152 + 24) = SpecificMedicationsPersistor.writeDoseEvent(medicationController:doseEvents:medStatusTaken:medicationIDPresent:dosage:dosageUnit:);
    *(_QWORD *)(v152 + 112) = swift_continuation_init();
    *(_QWORD *)(v152 + 80) = MEMORY[0x24BDAC760];
    *(_DWORD *)(v152 + 88) = 0x40000000;
    *(_DWORD *)(v152 + 92) = 0;
    *(_QWORD *)(v152 + 96) = @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned Bool, @unowned NSError?) -> () with result type () zero on error;
    *(_QWORD *)(v152 + 104) = &block_descriptor_5;
    objc_msgSend(v26, sel_writeDoseEvents_completion_, v25, v152 + 80);
    return __swift_continuation_await_point(v152 + 16);
  }
  v132 = *(void (**)(uint64_t, uint64_t, uint64_t))(v152 + 1200);
  v2 = *(_QWORD *)(v152 + 1184);
  v131 = *(_QWORD *)(v152 + 1128);
  *(_QWORD *)(v152 + 816) = v129;
  v130 = Logger.wellnessIntents.unsafeMutableAddressor();
  swift_beginAccess();
  v132(v2, v130, v131);
  swift_endAccess();
  v3 = v129;
  v134 = swift_allocObject();
  *(_QWORD *)(v134 + 16) = v129;
  v4 = v129;
  v136 = swift_allocObject();
  *(_QWORD *)(v136 + 16) = v129;
  v5 = v129;
  v138 = swift_allocObject();
  *(_QWORD *)(v138 + 16) = v129;
  v150 = Logger.logObject.getter();
  v151 = static os_log_type_t.debug.getter();
  *(_QWORD *)(v152 + 824) = 32;
  UnsignedInteger<>.init<A>(_:)();
  size = *(_DWORD *)(v152 + 1480);
  v140 = swift_allocObject();
  *(_BYTE *)(v140 + 16) = 32;
  v141 = swift_allocObject();
  *(_BYTE *)(v141 + 16) = 8;
  v135 = swift_allocObject();
  *(_QWORD *)(v135 + 16) = partial apply for implicit closure #3 in SpecificMedicationsPersistor.writeDoseEvent(medicationController:doseEvents:medStatusTaken:medicationIDPresent:dosage:dosageUnit:);
  *(_QWORD *)(v135 + 24) = v134;
  v142 = swift_allocObject();
  *(_QWORD *)(v142 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:);
  *(_QWORD *)(v142 + 24) = v135;
  v143 = swift_allocObject();
  *(_BYTE *)(v143 + 16) = 32;
  v144 = swift_allocObject();
  *(_BYTE *)(v144 + 16) = 8;
  v137 = swift_allocObject();
  *(_QWORD *)(v137 + 16) = partial apply for implicit closure #4 in SpecificMedicationsPersistor.writeDoseEvent(medicationController:doseEvents:medStatusTaken:medicationIDPresent:dosage:dosageUnit:);
  *(_QWORD *)(v137 + 24) = v136;
  v145 = swift_allocObject();
  *(_QWORD *)(v145 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:);
  *(_QWORD *)(v145 + 24) = v137;
  v146 = swift_allocObject();
  *(_BYTE *)(v146 + 16) = 32;
  v147 = swift_allocObject();
  *(_BYTE *)(v147 + 16) = 8;
  v139 = swift_allocObject();
  *(_QWORD *)(v139 + 16) = partial apply for implicit closure #5 in SpecificMedicationsPersistor.writeDoseEvent(medicationController:doseEvents:medStatusTaken:medicationIDPresent:dosage:dosageUnit:);
  *(_QWORD *)(v139 + 24) = v138;
  v148 = swift_allocObject();
  *(_QWORD *)(v148 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:);
  *(_QWORD *)(v148 + 24) = v139;
  _allocateUninitializedArray<A>(_:)();
  v149 = v6;
  swift_retain();
  *v149 = partial apply for closure #1 in OSLogArguments.append(_:);
  v149[1] = v140;
  swift_retain();
  v149[2] = partial apply for closure #1 in OSLogArguments.append(_:);
  v149[3] = v141;
  swift_retain();
  v149[4] = partial apply for closure #1 in OSLogArguments.append(_:);
  v149[5] = v142;
  swift_retain();
  v149[6] = partial apply for closure #1 in OSLogArguments.append(_:);
  v149[7] = v143;
  swift_retain();
  v149[8] = partial apply for closure #1 in OSLogArguments.append(_:);
  v149[9] = v144;
  swift_retain();
  v149[10] = partial apply for closure #1 in OSLogArguments.append(_:);
  v149[11] = v145;
  swift_retain();
  v149[12] = partial apply for closure #1 in OSLogArguments.append(_:);
  v149[13] = v146;
  swift_retain();
  v149[14] = partial apply for closure #1 in OSLogArguments.append(_:);
  v149[15] = v147;
  swift_retain();
  v149[16] = partial apply for closure #1 in OSLogArguments.append(_:);
  v149[17] = v148;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (!os_log_type_enabled(v150, v151))
  {
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    v123 = v65;
    goto LABEL_8;
  }
  buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
  v125 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
  v127 = createStorage<A>(capacity:type:)(0);
  v128 = createStorage<A>(capacity:type:)(3);
  *(_QWORD *)(v152 + 1008) = buf;
  *(_QWORD *)(v152 + 1016) = v127;
  *(_QWORD *)(v152 + 1024) = v128;
  serialize(_:at:)(2, (_BYTE **)(v152 + 1008));
  serialize(_:at:)(3, (_BYTE **)(v152 + 1008));
  *(_QWORD *)(v152 + 504) = partial apply for closure #1 in OSLogArguments.append(_:);
  *(_QWORD *)(v152 + 512) = v140;
  result = closure #1 in osLogInternal(_:log:type:)((uint64_t (**)(uint64_t, uint64_t, uint64_t))(v152 + 504), v152 + 1008, v152 + 1016, v152 + 1024);
  if (!v65)
  {
    *(_QWORD *)(v152 + 504) = partial apply for closure #1 in OSLogArguments.append(_:);
    *(_QWORD *)(v152 + 512) = v141;
    closure #1 in osLogInternal(_:log:type:)((uint64_t (**)(uint64_t, uint64_t, uint64_t))(v152 + 504), v152 + 1008, v152 + 1016, v152 + 1024);
    *(_QWORD *)(v152 + 504) = partial apply for closure #1 in OSLogArguments.append(_:);
    *(_QWORD *)(v152 + 512) = v142;
    closure #1 in osLogInternal(_:log:type:)((uint64_t (**)(uint64_t, uint64_t, uint64_t))(v152 + 504), v152 + 1008, v152 + 1016, v152 + 1024);
    *(_QWORD *)(v152 + 504) = partial apply for closure #1 in OSLogArguments.append(_:);
    *(_QWORD *)(v152 + 512) = v143;
    closure #1 in osLogInternal(_:log:type:)((uint64_t (**)(uint64_t, uint64_t, uint64_t))(v152 + 504), v152 + 1008, v152 + 1016, v152 + 1024);
    *(_QWORD *)(v152 + 504) = partial apply for closure #1 in OSLogArguments.append(_:);
    *(_QWORD *)(v152 + 512) = v144;
    closure #1 in osLogInternal(_:log:type:)((uint64_t (**)(uint64_t, uint64_t, uint64_t))(v152 + 504), v152 + 1008, v152 + 1016, v152 + 1024);
    *(_QWORD *)(v152 + 504) = partial apply for closure #1 in OSLogArguments.append(_:);
    *(_QWORD *)(v152 + 512) = v145;
    closure #1 in osLogInternal(_:log:type:)((uint64_t (**)(uint64_t, uint64_t, uint64_t))(v152 + 504), v152 + 1008, v152 + 1016, v152 + 1024);
    *(_QWORD *)(v152 + 504) = partial apply for closure #1 in OSLogArguments.append(_:);
    *(_QWORD *)(v152 + 512) = v146;
    closure #1 in osLogInternal(_:log:type:)((uint64_t (**)(uint64_t, uint64_t, uint64_t))(v152 + 504), v152 + 1008, v152 + 1016, v152 + 1024);
    *(_QWORD *)(v152 + 504) = partial apply for closure #1 in OSLogArguments.append(_:);
    *(_QWORD *)(v152 + 512) = v147;
    closure #1 in osLogInternal(_:log:type:)((uint64_t (**)(uint64_t, uint64_t, uint64_t))(v152 + 504), v152 + 1008, v152 + 1016, v152 + 1024);
    *(_QWORD *)(v152 + 504) = partial apply for closure #1 in OSLogArguments.append(_:);
    *(_QWORD *)(v152 + 512) = v148;
    closure #1 in osLogInternal(_:log:type:)((uint64_t (**)(uint64_t, uint64_t, uint64_t))(v152 + 504), v152 + 1008, v152 + 1016, v152 + 1024);
    _os_log_impl(&dword_24749F000, v150, v151, "in writeDoseEvent(), started with a doseEvent w/ dosage: (%s), scheduledDosage: (%s), logOrigin: (%s)", buf, size);
    destroyStorage<A>(_:count:)(v127, 0, v125);
    destroyStorage<A>(_:count:)(v128, 3, MEMORY[0x24BEE4AD8] + 8);
    MEMORY[0x24957D398](buf, MEMORY[0x24BEE4260]);
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    v123 = 0;
LABEL_8:
    *(_QWORD *)(v152 + 1296) = v123;
    v121 = *(void (**)(uint64_t, uint64_t))(v152 + 1240);
    v119 = *(_QWORD *)(v152 + 1184);
    v120 = *(_QWORD *)(v152 + 1128);
    v122 = *(_BYTE *)(v152 + 531);

    v121(v119, v120);
    v8 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v152 + 1304) = v8;
    *v8 = *(_QWORD *)(v152 + 536);
    v8[1] = SpecificMedicationsPersistor.writeDoseEvent(medicationController:doseEvents:medStatusTaken:medicationIDPresent:dosage:dosageUnit:);
    return SpecificMedicationsPersistor.updateDosageForDoseEvent(doseEvent:inputDosage:inputDosageUnit:)((uint64_t)v129, *(_QWORD *)(v152 + 1048), v122 & 1, *(_QWORD *)(v152 + 1056), *(_QWORD *)(v152 + 1064), *(_QWORD *)(v152 + 1072), *(_QWORD *)(v152 + 1080));
  }
  return result;
}

{
  _QWORD *v0;
  _QWORD *v1;

  v1 = (_QWORD *)*v0;
  v1[67] = *v0;
  v1[166] = v1[6];
  return swift_task_switch();
}

{
  _QWORD *v0;
  void *v1;
  char *v2;
  char *v3;
  char *v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  char *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  Swift::Int v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  Class v19;
  id v20;
  uint64_t v21;
  id v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  Swift::Double v31;
  Class v32;
  id v33;
  uint64_t v34;
  id v35;
  id v36;
  char v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  id v47;
  uint64_t v48;
  Class v49;
  id v50;
  uint64_t v51;
  id v52;
  id v53;
  id v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  id v60;
  Class isa;
  void *v62;
  char v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;

  v1 = (void *)v0[165];
  v66 = v0[130];
  v0[67] = v0;

  type metadata accessor for LogSpecificMedicationsIntentResponse();
  v65 = LogSpecificMedicationsIntentResponse.__allocating_init(code:userActivity:)(4, 0);
  v0[167] = v65;
  v2 = v65;
  v3 = v65;
  v4 = v65;
  v5 = v65;
  v6 = v65;
  v7 = v65;
  v8 = v65;
  v9 = v65;
  v0[82] = v65;
  v0[168] = type metadata accessor for MatchedMedName();
  v0[83] = _allocateUninitializedArray<A>(_:)();
  swift_bridgeObjectRetain();
  v0[84] = v66;
  Collection<>.makeIterator()();
  IndexingIterator.next()();
  v67 = v0[85];
  v0[169] = v67;
  if (v67)
  {
    *(_QWORD *)(v64 + 792) = v67;
    v10 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v64 + 1360) = v10;
    *v10 = *(_QWORD *)(v64 + 536);
    v10[1] = SpecificMedicationsPersistor.writeDoseEvent(medicationController:doseEvents:medStatusTaken:medicationIDPresent:dosage:dosageUnit:);
    return SpecificMedicationsPersistor.buildMatchedMedName(from:shouldIncludeAsNeededParams:)(v67, 1, *(_QWORD *)(v64 + 1072), *(_QWORD *)(v64 + 1080));
  }
  else
  {
    v62 = *(void **)(v64 + 1336);
    v63 = *(_BYTE *)(v64 + 530);
    outlined destroy of [HKQuantityType]();
    swift_bridgeObjectRetain();
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v62, sel_setMatchingMedsBeforeUpdate_, isa);

    if ((v63 & 1) != 0)
    {
      swift_beginAccess();
      v59 = *(_QWORD *)(v64 + 576);
      swift_bridgeObjectRetain();
      swift_endAccess();
      swift_bridgeObjectRetain();
      *(_QWORD *)(v64 + 784) = v59;
      Collection.first.getter();
      outlined destroy of [HKQuantityType]();
      v60 = *(id *)(v64 + 776);
      swift_bridgeObjectRelease();
      if (v60)
      {
        v53 = objc_msgSend(v60, sel_medicationIdentifier);

        v54 = objc_msgSend(v53, sel_underlyingIdentifier);
        v55 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        v56 = v11;

        v57 = v55;
        v58 = v56;
      }
      else
      {
        v57 = 0;
        v58 = 0;
      }
      *(_QWORD *)(v64 + 1376) = v58;
      v12 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v64 + 1384) = v12;
      *v12 = *(_QWORD *)(v64 + 536);
      v12[1] = SpecificMedicationsPersistor.writeDoseEvent(medicationController:doseEvents:medStatusTaken:medicationIDPresent:dosage:dosageUnit:);
      return SpecificMedicationsPersistor.displayNameFor(identifier:)(v57, v58, *(_QWORD *)(v64 + 1072), *(_QWORD *)(v64 + 1080));
    }
    else
    {

      v50 = *(id *)(v64 + 1336);
      v48 = *(_QWORD *)(v64 + 1256);
      v51 = *(_QWORD *)(v64 + 1040);
      type metadata accessor for NSNumber();
      v13 = MEMORY[0x24957D110](v51, v48);
      v49 = NSNumber.__allocating_init(value:)(v13).super.super.isa;
      objc_msgSend(v50, sel_setMedCount_);

      swift_bridgeObjectRetain();
      *(_QWORD *)(v64 + 696) = v51;
      Collection.first.getter();
      outlined destroy of [HKQuantityType]();
      v52 = *(id *)(v64 + 688);
      if (v52)
      {
        v47 = objc_msgSend(v52, sel_scheduledDate);
        if (v47)
        {
          v43 = *(_QWORD *)(v64 + 1120);
          v44 = *(_QWORD *)(v64 + 1112);
          v45 = *(_QWORD *)(v64 + 1104);
          v46 = *(_QWORD *)(v64 + 1088);
          static Date._unconditionallyBridgeFromObjectiveC(_:)();
          (*(void (**)(uint64_t, uint64_t, uint64_t))(v44 + 32))(v46, v43, v45);
          (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v44 + 56))(v46, 0, 1, v45);

        }
        else
        {
          (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v64 + 1112) + 56))(*(_QWORD *)(v64 + 1088), 1, 1, *(_QWORD *)(v64 + 1104));
        }
        outlined init with take of Date?(*(const void **)(v64 + 1088), *(void **)(v64 + 1096));

      }
      else
      {
        (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v64 + 1112) + 56))(*(_QWORD *)(v64 + 1096), 1, 1, *(_QWORD *)(v64 + 1104));
      }
      v40 = *(_QWORD *)(v64 + 1096);
      v41 = getFormattedTimeString(time:)(v40);
      v42 = v14;
      outlined destroy of Date?(v40);
      if (v42)
      {
        v38 = MEMORY[0x24957CFB4](v41);
        swift_bridgeObjectRelease();
        v39 = (void *)v38;
      }
      else
      {
        v39 = 0;
      }
      v36 = *(id *)(v64 + 1336);
      v37 = *(_BYTE *)(v64 + 531);
      objc_msgSend(v36, sel_setMedSchedule_);

      if ((v37 & 1) != 0)
      {
        v28 = *(id *)(v64 + 1336);

        *(_QWORD *)(v64 + 704) = _allocateUninitializedArray<A>(_:)();
        swift_beginAccess();
        v29 = *(_QWORD *)(v64 + 576);
        swift_bridgeObjectRetain();
        swift_endAccess();
        *(_QWORD *)(v64 + 712) = v29;
        Collection<>.makeIterator()();
        IndexingIterator.next()();
        v30 = *(_QWORD *)(v64 + 720);
        *(_QWORD *)(v64 + 1440) = v30;
        if (v30)
        {
          *(_QWORD *)(v64 + 728) = v30;
          v17 = (_QWORD *)swift_task_alloc();
          *(_QWORD *)(v64 + 1448) = v17;
          *v17 = *(_QWORD *)(v64 + 536);
          v17[1] = SpecificMedicationsPersistor.writeDoseEvent(medicationController:doseEvents:medStatusTaken:medicationIDPresent:dosage:dosageUnit:);
          return SpecificMedicationsPersistor.buildMatchedMedName(from:shouldIncludeAsNeededParams:)(v30, 1, *(_QWORD *)(v64 + 1072), *(_QWORD *)(v64 + 1080));
        }
        else
        {
          v20 = *(id *)(v64 + 1336);
          outlined destroy of [HKQuantityType]();
          swift_bridgeObjectRetain();
          v19 = Array._bridgeToObjectiveC()().super.isa;
          swift_bridgeObjectRelease();
          objc_msgSend(v20, sel_setMatchingMeds_, v19);

          outlined destroy of [HKQuantityType]();
          outlined destroy of [HKQuantityType]();

          outlined destroy of [HKQuantityType]();
          v21 = *(_QWORD *)(v64 + 1336);
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v64 + 536) + 8))(v21);
        }
      }
      else
      {
        v31 = *(double *)(v64 + 1048);
        v33 = *(id *)(v64 + 1336);
        v34 = *(_QWORD *)(v64 + 1040);
        *(Swift::Double *)(v64 + 752) = v31;
        v32 = NSNumber.__allocating_init(value:)(v31).super.super.isa;
        objc_msgSend(v33, sel_setDosage_);

        swift_bridgeObjectRetain();
        *(_QWORD *)(v64 + 768) = v34;
        Collection.first.getter();
        outlined destroy of [HKQuantityType]();
        v35 = *(id *)(v64 + 760);
        if (v35)
        {
          v22 = objc_msgSend(v35, sel_medicationIdentifier);

          v23 = objc_msgSend(v22, sel_underlyingIdentifier);
          v24 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          v25 = v15;

          v26 = v24;
          v27 = v25;
        }
        else
        {
          v26 = 0;
          v27 = 0;
        }
        *(_QWORD *)(v64 + 1408) = v27;
        v16 = (_QWORD *)swift_task_alloc();
        *(_QWORD *)(v64 + 1416) = v16;
        *v16 = *(_QWORD *)(v64 + 536);
        v16[1] = SpecificMedicationsPersistor.writeDoseEvent(medicationController:doseEvents:medStatusTaken:medicationIDPresent:dosage:dosageUnit:);
        return SpecificMedicationsPersistor.getAsNeededDosageUnit(for:dosageCount:)(v26, v27, *(_QWORD *)(v64 + 1072), *(_QWORD *)(v64 + 1080), v31);
      }
    }
  }
}

{
  _QWORD *v0;
  id v1;
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  Swift::Int v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  Class v11;
  id v12;
  uint64_t v13;
  id v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  Swift::Double v23;
  Class v24;
  id v25;
  uint64_t v26;
  id v27;
  id v28;
  char v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  id v39;
  uint64_t v40;
  Class v41;
  id v42;
  uint64_t v43;
  id v44;
  id v45;
  id v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  id v52;
  Class isa;
  void *v54;
  char v55;
  uint64_t v56;
  void *v57;
  void *v58;
  uint64_t v59;

  v57 = (void *)v0[171];
  v58 = (void *)v0[169];
  v0[67] = v0;
  v0[100] = v57;
  v1 = v57;
  v0[101] = v57;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [MatchedMedName]);
  Array.append(_:)();

  IndexingIterator.next()();
  v59 = v0[85];
  v0[169] = v59;
  if (v59)
  {
    *(_QWORD *)(v56 + 792) = v59;
    v2 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v56 + 1360) = v2;
    *v2 = *(_QWORD *)(v56 + 536);
    v2[1] = SpecificMedicationsPersistor.writeDoseEvent(medicationController:doseEvents:medStatusTaken:medicationIDPresent:dosage:dosageUnit:);
    return SpecificMedicationsPersistor.buildMatchedMedName(from:shouldIncludeAsNeededParams:)(v59, 1, *(_QWORD *)(v56 + 1072), *(_QWORD *)(v56 + 1080));
  }
  else
  {
    v54 = *(void **)(v56 + 1336);
    v55 = *(_BYTE *)(v56 + 530);
    outlined destroy of [HKQuantityType]();
    swift_bridgeObjectRetain();
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v54, sel_setMatchingMedsBeforeUpdate_, isa);

    if ((v55 & 1) != 0)
    {
      swift_beginAccess();
      v51 = *(_QWORD *)(v56 + 576);
      swift_bridgeObjectRetain();
      swift_endAccess();
      swift_bridgeObjectRetain();
      *(_QWORD *)(v56 + 784) = v51;
      Collection.first.getter();
      outlined destroy of [HKQuantityType]();
      v52 = *(id *)(v56 + 776);
      swift_bridgeObjectRelease();
      if (v52)
      {
        v45 = objc_msgSend(v52, sel_medicationIdentifier);

        v46 = objc_msgSend(v45, sel_underlyingIdentifier);
        v47 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        v48 = v3;

        v49 = v47;
        v50 = v48;
      }
      else
      {
        v49 = 0;
        v50 = 0;
      }
      *(_QWORD *)(v56 + 1376) = v50;
      v4 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v56 + 1384) = v4;
      *v4 = *(_QWORD *)(v56 + 536);
      v4[1] = SpecificMedicationsPersistor.writeDoseEvent(medicationController:doseEvents:medStatusTaken:medicationIDPresent:dosage:dosageUnit:);
      return SpecificMedicationsPersistor.displayNameFor(identifier:)(v49, v50, *(_QWORD *)(v56 + 1072), *(_QWORD *)(v56 + 1080));
    }
    else
    {

      v42 = *(id *)(v56 + 1336);
      v40 = *(_QWORD *)(v56 + 1256);
      v43 = *(_QWORD *)(v56 + 1040);
      type metadata accessor for NSNumber();
      v5 = MEMORY[0x24957D110](v43, v40);
      v41 = NSNumber.__allocating_init(value:)(v5).super.super.isa;
      objc_msgSend(v42, sel_setMedCount_);

      swift_bridgeObjectRetain();
      *(_QWORD *)(v56 + 696) = v43;
      Collection.first.getter();
      outlined destroy of [HKQuantityType]();
      v44 = *(id *)(v56 + 688);
      if (v44)
      {
        v39 = objc_msgSend(v44, sel_scheduledDate);
        if (v39)
        {
          v35 = *(_QWORD *)(v56 + 1120);
          v36 = *(_QWORD *)(v56 + 1112);
          v37 = *(_QWORD *)(v56 + 1104);
          v38 = *(_QWORD *)(v56 + 1088);
          static Date._unconditionallyBridgeFromObjectiveC(_:)();
          (*(void (**)(uint64_t, uint64_t, uint64_t))(v36 + 32))(v38, v35, v37);
          (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v36 + 56))(v38, 0, 1, v37);

        }
        else
        {
          (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v56 + 1112) + 56))(*(_QWORD *)(v56 + 1088), 1, 1, *(_QWORD *)(v56 + 1104));
        }
        outlined init with take of Date?(*(const void **)(v56 + 1088), *(void **)(v56 + 1096));

      }
      else
      {
        (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v56 + 1112) + 56))(*(_QWORD *)(v56 + 1096), 1, 1, *(_QWORD *)(v56 + 1104));
      }
      v32 = *(_QWORD *)(v56 + 1096);
      v33 = getFormattedTimeString(time:)(v32);
      v34 = v6;
      outlined destroy of Date?(v32);
      if (v34)
      {
        v30 = MEMORY[0x24957CFB4](v33);
        swift_bridgeObjectRelease();
        v31 = (void *)v30;
      }
      else
      {
        v31 = 0;
      }
      v28 = *(id *)(v56 + 1336);
      v29 = *(_BYTE *)(v56 + 531);
      objc_msgSend(v28, sel_setMedSchedule_);

      if ((v29 & 1) != 0)
      {
        v20 = *(id *)(v56 + 1336);

        *(_QWORD *)(v56 + 704) = _allocateUninitializedArray<A>(_:)();
        swift_beginAccess();
        v21 = *(_QWORD *)(v56 + 576);
        swift_bridgeObjectRetain();
        swift_endAccess();
        *(_QWORD *)(v56 + 712) = v21;
        Collection<>.makeIterator()();
        IndexingIterator.next()();
        v22 = *(_QWORD *)(v56 + 720);
        *(_QWORD *)(v56 + 1440) = v22;
        if (v22)
        {
          *(_QWORD *)(v56 + 728) = v22;
          v9 = (_QWORD *)swift_task_alloc();
          *(_QWORD *)(v56 + 1448) = v9;
          *v9 = *(_QWORD *)(v56 + 536);
          v9[1] = SpecificMedicationsPersistor.writeDoseEvent(medicationController:doseEvents:medStatusTaken:medicationIDPresent:dosage:dosageUnit:);
          return SpecificMedicationsPersistor.buildMatchedMedName(from:shouldIncludeAsNeededParams:)(v22, 1, *(_QWORD *)(v56 + 1072), *(_QWORD *)(v56 + 1080));
        }
        else
        {
          v12 = *(id *)(v56 + 1336);
          outlined destroy of [HKQuantityType]();
          swift_bridgeObjectRetain();
          v11 = Array._bridgeToObjectiveC()().super.isa;
          swift_bridgeObjectRelease();
          objc_msgSend(v12, sel_setMatchingMeds_, v11);

          outlined destroy of [HKQuantityType]();
          outlined destroy of [HKQuantityType]();

          outlined destroy of [HKQuantityType]();
          v13 = *(_QWORD *)(v56 + 1336);
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v56 + 536) + 8))(v13);
        }
      }
      else
      {
        v23 = *(double *)(v56 + 1048);
        v25 = *(id *)(v56 + 1336);
        v26 = *(_QWORD *)(v56 + 1040);
        *(Swift::Double *)(v56 + 752) = v23;
        v24 = NSNumber.__allocating_init(value:)(v23).super.super.isa;
        objc_msgSend(v25, sel_setDosage_);

        swift_bridgeObjectRetain();
        *(_QWORD *)(v56 + 768) = v26;
        Collection.first.getter();
        outlined destroy of [HKQuantityType]();
        v27 = *(id *)(v56 + 760);
        if (v27)
        {
          v14 = objc_msgSend(v27, sel_medicationIdentifier);

          v15 = objc_msgSend(v14, sel_underlyingIdentifier);
          v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          v17 = v7;

          v18 = v16;
          v19 = v17;
        }
        else
        {
          v18 = 0;
          v19 = 0;
        }
        *(_QWORD *)(v56 + 1408) = v19;
        v8 = (_QWORD *)swift_task_alloc();
        *(_QWORD *)(v56 + 1416) = v8;
        *v8 = *(_QWORD *)(v56 + 536);
        v8[1] = SpecificMedicationsPersistor.writeDoseEvent(medicationController:doseEvents:medStatusTaken:medicationIDPresent:dosage:dosageUnit:);
        return SpecificMedicationsPersistor.getAsNeededDosageUnit(for:dosageCount:)(v18, v19, *(_QWORD *)(v56 + 1072), *(_QWORD *)(v56 + 1080), v23);
      }
    }
  }
}

{
  _QWORD *v0;
  uint64_t v1;
  Swift::Int v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  Class v8;
  id v9;
  uint64_t v10;
  id v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  Swift::Double v20;
  Class v21;
  id v22;
  uint64_t v23;
  id v24;
  id v25;
  char v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  id v37;
  uint64_t v38;
  Class isa;
  void *v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;

  v46 = v0[175];
  v1 = v0[174];
  v0[67] = v0;
  v0[59] = v1;
  v0[60] = v46;
  swift_bridgeObjectRetain();
  if (v46)
  {
    v43 = MEMORY[0x24957CFB4](*(_QWORD *)(v45 + 1392));
    swift_bridgeObjectRelease();
    v44 = (void *)v43;
  }
  else
  {
    v44 = 0;
  }
  v37 = *(id *)(v45 + 1336);
  objc_msgSend(v37, sel_setMedName_);

  swift_bridgeObjectRelease();
  v40 = *(void **)(v45 + 1336);
  v38 = *(_QWORD *)(v45 + 1256);
  v41 = *(_QWORD *)(v45 + 1040);
  type metadata accessor for NSNumber();
  v2 = MEMORY[0x24957D110](v41, v38);
  isa = NSNumber.__allocating_init(value:)(v2).super.super.isa;
  objc_msgSend(v40, sel_setMedCount_);

  swift_bridgeObjectRetain();
  *(_QWORD *)(v45 + 696) = v41;
  Collection.first.getter();
  outlined destroy of [HKQuantityType]();
  v42 = *(void **)(v45 + 688);
  if (v42)
  {
    v36 = objc_msgSend(v42, sel_scheduledDate);
    if (v36)
    {
      v32 = *(_QWORD *)(v45 + 1120);
      v33 = *(_QWORD *)(v45 + 1112);
      v34 = *(_QWORD *)(v45 + 1104);
      v35 = *(_QWORD *)(v45 + 1088);
      static Date._unconditionallyBridgeFromObjectiveC(_:)();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v33 + 32))(v35, v32, v34);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v33 + 56))(v35, 0, 1, v34);

    }
    else
    {
      (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v45 + 1112) + 56))(*(_QWORD *)(v45 + 1088), 1, 1, *(_QWORD *)(v45 + 1104));
    }
    outlined init with take of Date?(*(const void **)(v45 + 1088), *(void **)(v45 + 1096));

  }
  else
  {
    (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v45 + 1112) + 56))(*(_QWORD *)(v45 + 1096), 1, 1, *(_QWORD *)(v45 + 1104));
  }
  v29 = *(_QWORD *)(v45 + 1096);
  v30 = getFormattedTimeString(time:)(v29);
  v31 = v3;
  outlined destroy of Date?(v29);
  if (v31)
  {
    v27 = MEMORY[0x24957CFB4](v30);
    swift_bridgeObjectRelease();
    v28 = (void *)v27;
  }
  else
  {
    v28 = 0;
  }
  v25 = *(id *)(v45 + 1336);
  v26 = *(_BYTE *)(v45 + 531);
  objc_msgSend(v25, sel_setMedSchedule_);

  if ((v26 & 1) != 0)
  {
    v17 = *(id *)(v45 + 1336);

    *(_QWORD *)(v45 + 704) = _allocateUninitializedArray<A>(_:)();
    swift_beginAccess();
    v18 = *(_QWORD *)(v45 + 576);
    swift_bridgeObjectRetain();
    swift_endAccess();
    *(_QWORD *)(v45 + 712) = v18;
    Collection<>.makeIterator()();
    IndexingIterator.next()();
    v19 = *(_QWORD *)(v45 + 720);
    *(_QWORD *)(v45 + 1440) = v19;
    if (v19)
    {
      *(_QWORD *)(v45 + 728) = v19;
      v6 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v45 + 1448) = v6;
      *v6 = *(_QWORD *)(v45 + 536);
      v6[1] = SpecificMedicationsPersistor.writeDoseEvent(medicationController:doseEvents:medStatusTaken:medicationIDPresent:dosage:dosageUnit:);
      return SpecificMedicationsPersistor.buildMatchedMedName(from:shouldIncludeAsNeededParams:)(v19, 1, *(_QWORD *)(v45 + 1072), *(_QWORD *)(v45 + 1080));
    }
    else
    {
      v9 = *(id *)(v45 + 1336);
      outlined destroy of [HKQuantityType]();
      swift_bridgeObjectRetain();
      v8 = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      objc_msgSend(v9, sel_setMatchingMeds_, v8);

      outlined destroy of [HKQuantityType]();
      outlined destroy of [HKQuantityType]();

      outlined destroy of [HKQuantityType]();
      v10 = *(_QWORD *)(v45 + 1336);
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v45 + 536) + 8))(v10);
    }
  }
  else
  {
    v20 = *(double *)(v45 + 1048);
    v22 = *(id *)(v45 + 1336);
    v23 = *(_QWORD *)(v45 + 1040);
    *(Swift::Double *)(v45 + 752) = v20;
    v21 = NSNumber.__allocating_init(value:)(v20).super.super.isa;
    objc_msgSend(v22, sel_setDosage_);

    swift_bridgeObjectRetain();
    *(_QWORD *)(v45 + 768) = v23;
    Collection.first.getter();
    outlined destroy of [HKQuantityType]();
    v24 = *(id *)(v45 + 760);
    if (v24)
    {
      v11 = objc_msgSend(v24, sel_medicationIdentifier);

      v12 = objc_msgSend(v11, sel_underlyingIdentifier);
      v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v14 = v4;

      v15 = v13;
      v16 = v14;
    }
    else
    {
      v15 = 0;
      v16 = 0;
    }
    *(_QWORD *)(v45 + 1408) = v16;
    v5 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v45 + 1416) = v5;
    *v5 = *(_QWORD *)(v45 + 536);
    v5[1] = SpecificMedicationsPersistor.writeDoseEvent(medicationController:doseEvents:medStatusTaken:medicationIDPresent:dosage:dosageUnit:);
    return SpecificMedicationsPersistor.getAsNeededDosageUnit(for:dosageCount:)(v15, v16, *(_QWORD *)(v45 + 1072), *(_QWORD *)(v45 + 1080), v20);
  }
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  Class isa;
  id v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v1 = v0[179];
  v2 = v0[178];
  v0[67] = v0;
  v0[57] = v2;
  v0[58] = v1;
  swift_bridgeObjectRetain();
  if (v0[58])
  {
    *(_OWORD *)(v15 + 440) = *(_OWORD *)(v15 + 456);
  }
  else
  {
    v14 = *(_QWORD *)(v15 + 1064);
    v13 = *(_QWORD *)(v15 + 1056);
    swift_bridgeObjectRetain();
    *(_QWORD *)(v15 + 440) = v13;
    *(_QWORD *)(v15 + 448) = v14;
    outlined destroy of String.UTF8View();
  }
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(v15 + 448))
  {
    v11 = MEMORY[0x24957CFB4](*(_QWORD *)(v15 + 440));
    swift_bridgeObjectRelease();
    v12 = (void *)v11;
  }
  else
  {
    v12 = 0;
  }
  v8 = *(id *)(v15 + 1336);
  objc_msgSend(v8, sel_setDosageUnit_);

  *(_QWORD *)(v15 + 704) = _allocateUninitializedArray<A>(_:)();
  swift_beginAccess();
  v9 = *(_QWORD *)(v15 + 576);
  swift_bridgeObjectRetain();
  swift_endAccess();
  *(_QWORD *)(v15 + 712) = v9;
  Collection<>.makeIterator()();
  IndexingIterator.next()();
  v10 = *(_QWORD *)(v15 + 720);
  *(_QWORD *)(v15 + 1440) = v10;
  if (v10)
  {
    *(_QWORD *)(v15 + 728) = v10;
    v3 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v15 + 1448) = v3;
    *v3 = *(_QWORD *)(v15 + 536);
    v3[1] = SpecificMedicationsPersistor.writeDoseEvent(medicationController:doseEvents:medStatusTaken:medicationIDPresent:dosage:dosageUnit:);
    return SpecificMedicationsPersistor.buildMatchedMedName(from:shouldIncludeAsNeededParams:)(v10, 1, *(_QWORD *)(v15 + 1072), *(_QWORD *)(v15 + 1080));
  }
  else
  {
    v6 = *(id *)(v15 + 1336);
    outlined destroy of [HKQuantityType]();
    swift_bridgeObjectRetain();
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v6, sel_setMatchingMeds_, isa);

    outlined destroy of [HKQuantityType]();
    outlined destroy of [HKQuantityType]();

    outlined destroy of [HKQuantityType]();
    v7 = *(_QWORD *)(v15 + 1336);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v15 + 536) + 8))(v7);
  }
}

{
  _QWORD *v0;
  id v1;
  _QWORD *v2;
  Class isa;
  id v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  uint64_t v10;

  v8 = (void *)v0[182];
  v9 = (void *)v0[180];
  v0[67] = v0;
  v0[92] = v8;
  v1 = v8;
  v0[93] = v8;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [MatchedMedName]);
  Array.append(_:)();

  IndexingIterator.next()();
  v10 = v0[90];
  v0[180] = v10;
  if (v10)
  {
    *(_QWORD *)(v7 + 728) = v10;
    v2 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v7 + 1448) = v2;
    *v2 = *(_QWORD *)(v7 + 536);
    v2[1] = SpecificMedicationsPersistor.writeDoseEvent(medicationController:doseEvents:medStatusTaken:medicationIDPresent:dosage:dosageUnit:);
    return SpecificMedicationsPersistor.buildMatchedMedName(from:shouldIncludeAsNeededParams:)(v10, 1, *(_QWORD *)(v7 + 1072), *(_QWORD *)(v7 + 1080));
  }
  else
  {
    v5 = *(id *)(v7 + 1336);
    outlined destroy of [HKQuantityType]();
    swift_bridgeObjectRetain();
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v5, sel_setMatchingMeds_, isa);

    outlined destroy of [HKQuantityType]();
    outlined destroy of [HKQuantityType]();

    outlined destroy of [HKQuantityType]();
    v6 = *(_QWORD *)(v7 + 1336);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v7 + 536) + 8))(v6);
  }
}

{
  uint64_t v0;
  id v1;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);
  id v6;
  char *v7;
  uint64_t v8;
  uint8_t *buf;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t, uint64_t);
  uint32_t v20;
  os_log_type_t v21;
  NSObject *v22;
  uint64_t v23;

  v16 = *(void **)(v0 + 1328);
  v15 = *(void **)(v0 + 1320);
  v19 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1200);
  v14 = *(_QWORD *)(v0 + 1144);
  v18 = *(_QWORD *)(v0 + 1128);
  *(_QWORD *)(v0 + 536) = v0;
  swift_willThrow();

  v1 = v16;
  *(_QWORD *)(v0 + 608) = v16;
  v17 = Logger.wellnessIntents.unsafeMutableAddressor();
  swift_beginAccess();
  v19(v14, v17, v18);
  swift_endAccess();
  v22 = Logger.logObject.getter();
  v21 = static os_log_type_t.error.getter();
  *(_QWORD *)(v0 + 616) = 2;
  UnsignedInteger<>.init<A>(_:)();
  v20 = *(_DWORD *)(v0 + 1476);
  v23 = _allocateUninitializedArray<A>(_:)();
  if (os_log_type_enabled(v22, v21))
  {
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    v10 = createStorage<A>(capacity:type:)(0);
    v11 = createStorage<A>(capacity:type:)(0);
    *(_QWORD *)(v13 + 624) = buf;
    *(_QWORD *)(v13 + 632) = v10;
    *(_QWORD *)(v13 + 640) = v11;
    serialize(_:at:)(0, (_BYTE **)(v13 + 624));
    serialize(_:at:)(0, (_BYTE **)(v13 + 624));
    *(_QWORD *)(v13 + 648) = v23;
    v12 = (_QWORD *)swift_task_alloc();
    v12[2] = v13 + 624;
    v12[3] = v13 + 632;
    v12[4] = v13 + 640;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
    lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
    Sequence.forEach(_:)();
    swift_task_dealloc();
    _os_log_impl(&dword_24749F000, v22, v21, "Failed writing updated dose events for specific meds.", buf, v20);
    destroyStorage<A>(_:count:)(v10, 0, v8);
    destroyStorage<A>(_:count:)(v11, 0, MEMORY[0x24BEE4AD8] + 8);
    MEMORY[0x24957D398](buf, MEMORY[0x24BEE4260]);
  }
  swift_bridgeObjectRelease();
  v6 = *(id *)(v13 + 1328);
  v5 = *(void (**)(uint64_t, uint64_t))(v13 + 1240);
  v3 = *(_QWORD *)(v13 + 1144);
  v4 = *(_QWORD *)(v13 + 1128);

  v5(v3, v4);
  type metadata accessor for LogSpecificMedicationsIntentResponse();
  v7 = LogSpecificMedicationsIntentResponse.__allocating_init(code:userActivity:)(5, 0);

  outlined destroy of [HKQuantityType]();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(char *))(*(_QWORD *)(v13 + 536) + 8))(v7);
}

uint64_t SpecificMedicationsPersistor.writeDoseEvent(medicationController:doseEvents:medStatusTaken:medicationIDPresent:dosage:dosageUnit:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;

  v3 = *v1;
  *(_QWORD *)(v3 + 536) = *v1;
  *(_QWORD *)(v3 + 1312) = a1;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t *v1;
  uint64_t v3;

  v3 = *v1;
  *(_QWORD *)(v3 + 536) = *v1;
  *(_QWORD *)(v3 + 1368) = a1;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t *v1;
  uint64_t v3;

  v3 = *v1;
  *(_QWORD *)(v3 + 536) = *v1;
  *(_QWORD *)(v3 + 1456) = a1;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t SpecificMedicationsPersistor.writeDoseEvent(medicationController:doseEvents:medStatusTaken:medicationIDPresent:dosage:dosageUnit:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v4;

  v4 = (_QWORD *)*v2;
  v4[67] = *v2;
  v4[174] = a1;
  v4[175] = a2;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  return swift_task_switch();
}

{
  _QWORD *v2;
  _QWORD *v4;

  v4 = (_QWORD *)*v2;
  v4[67] = *v2;
  v4[178] = a1;
  v4[179] = a2;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  return swift_task_switch();
}

uint64_t SpecificMedicationsPersistor.saveWithID(scheduleID:medicationIDs:medStatus:dosage:dosageUnit:confirmedAsNeeded:confirmedAsScheduled:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, char a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v21;
  char v22;
  uint64_t v23;
  uint64_t v24;

  *(_QWORD *)(v8 + 1376) = v24;
  *(_QWORD *)(v8 + 1368) = v23;
  *(_BYTE *)(v8 + 1906) = v22;
  *(_BYTE *)(v8 + 1905) = v21;
  *(_QWORD *)(v8 + 1360) = a8;
  *(_QWORD *)(v8 + 1352) = a7;
  *(_BYTE *)(v8 + 1899) = a6;
  *(_QWORD *)(v8 + 1344) = a5;
  *(_BYTE *)(v8 + 1898) = a4 & 1;
  *(_QWORD *)(v8 + 1336) = a3;
  *(_QWORD *)(v8 + 1328) = a2;
  *(_QWORD *)(v8 + 1320) = a1;
  *(_QWORD *)(v8 + 600) = v8;
  *(_QWORD *)(v8 + 400) = 0;
  *(_QWORD *)(v8 + 408) = 0;
  *(_QWORD *)(v8 + 608) = 0;
  *(_BYTE *)(v8 + 1896) = 0;
  *(_QWORD *)(v8 + 576) = 0;
  *(_BYTE *)(v8 + 584) = 0;
  *(_QWORD *)(v8 + 416) = 0;
  *(_QWORD *)(v8 + 424) = 0;
  *(_BYTE *)(v8 + 1904) = 0;
  *(_BYTE *)(v8 + 1912) = 0;
  *(_QWORD *)(v8 + 432) = 0;
  *(_QWORD *)(v8 + 440) = 0;
  *(_QWORD *)(v8 + 624) = 0;
  *(_QWORD *)(v8 + 632) = 0;
  *(_QWORD *)(v8 + 640) = 0;
  *(_QWORD *)(v8 + 648) = 0;
  *(_QWORD *)(v8 + 720) = 0;
  *(_QWORD *)(v8 + 728) = 0;
  *(_QWORD *)(v8 + 448) = 0;
  *(_QWORD *)(v8 + 456) = 0;
  *(_QWORD *)(v8 + 752) = 0;
  *(_QWORD *)(v8 + 760) = 0;
  *(_QWORD *)(v8 + 808) = 0;
  *(_QWORD *)(v8 + 856) = 0;
  *(_QWORD *)(v8 + 496) = 0;
  *(_QWORD *)(v8 + 504) = 0;
  *(_QWORD *)(v8 + 880) = 0;
  *(_QWORD *)(v8 + 888) = 0;
  *(_QWORD *)(v8 + 896) = 0;
  *(_QWORD *)(v8 + 992) = 0;
  *(_QWORD *)(v8 + 512) = 0;
  *(_QWORD *)(v8 + 520) = 0;
  *(_QWORD *)(v8 + 1064) = 0;
  *(_QWORD *)(v8 + 1176) = 0;
  *(_QWORD *)(v8 + 544) = 0;
  *(_QWORD *)(v8 + 552) = 0;
  *(_QWORD *)(v8 + 1264) = 0;
  v12 = type metadata accessor for Date();
  *(_QWORD *)(v8 + 1384) = v12;
  *(_QWORD *)(v8 + 1392) = *(_QWORD *)(v12 - 8);
  *(_QWORD *)(v8 + 1400) = swift_task_alloc();
  *(_QWORD *)(v8 + 1408) = swift_task_alloc();
  *(_QWORD *)(v8 + 1416) = swift_task_alloc();
  *(_QWORD *)(v8 + 1424) = swift_task_alloc();
  v13 = type metadata accessor for DateInterval();
  *(_QWORD *)(v8 + 1432) = v13;
  *(_QWORD *)(v8 + 1440) = *(_QWORD *)(v13 - 8);
  *(_QWORD *)(v8 + 1448) = swift_task_alloc();
  v14 = type metadata accessor for Logger();
  *(_QWORD *)(v8 + 1456) = v14;
  *(_QWORD *)(v8 + 1464) = *(_QWORD *)(v14 - 8);
  *(_QWORD *)(v8 + 1472) = swift_task_alloc();
  *(_QWORD *)(v8 + 1480) = swift_task_alloc();
  *(_QWORD *)(v8 + 1488) = swift_task_alloc();
  *(_QWORD *)(v8 + 1496) = swift_task_alloc();
  *(_QWORD *)(v8 + 1504) = swift_task_alloc();
  *(_QWORD *)(v8 + 1512) = swift_task_alloc();
  *(_QWORD *)(v8 + 1520) = swift_task_alloc();
  *(_QWORD *)(v8 + 1528) = swift_task_alloc();
  *(_QWORD *)(v8 + 1536) = swift_task_alloc();
  *(_QWORD *)(v8 + 1544) = swift_task_alloc();
  *(_QWORD *)(v8 + 1552) = swift_task_alloc();
  *(_QWORD *)(v8 + 1560) = swift_task_alloc();
  *(_QWORD *)(v8 + 1568) = swift_task_alloc();
  *(_QWORD *)(v8 + 400) = a1;
  *(_QWORD *)(v8 + 408) = a2;
  *(_QWORD *)(v8 + 608) = a3;
  *(_BYTE *)(v8 + 1896) = a4 & 1;
  *(_QWORD *)(v8 + 576) = a5;
  *(_BYTE *)(v8 + 584) = a6 & 1;
  *(_QWORD *)(v8 + 416) = a7;
  *(_QWORD *)(v8 + 424) = a8;
  *(_BYTE *)(v8 + 1904) = v21;
  *(_BYTE *)(v8 + 1912) = v22;
  *(_QWORD *)(v8 + 432) = v23;
  *(_QWORD *)(v8 + 440) = v24;
  return swift_task_switch();
}

uint64_t SpecificMedicationsPersistor.saveWithID(scheduleID:medicationIDs:medStatus:dosage:dosageUnit:confirmedAsNeeded:confirmedAsScheduled:)()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t, uint64_t, uint64_t);
  _QWORD *v3;
  void (*v4)(uint64_t, uint64_t);
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  id v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  char v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void (*v40)(uint64_t, uint64_t);
  id v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint8_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void (*v50)(uint64_t, uint64_t, uint64_t);
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  uint32_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  NSObject *v74;
  os_log_type_t v75;
  uint64_t v76;
  uint64_t v77;
  void (*v78)(uint64_t, uint64_t);
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint8_t *v85;
  uint64_t v86;
  uint64_t v87;
  _QWORD *v88;
  uint64_t v89;
  uint64_t v90;
  void (*v91)(uint64_t, uint64_t, uint64_t);
  uint32_t v92;
  os_log_type_t v93;
  NSObject *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  void (*v98)(uint64_t, uint64_t);
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  uint64_t v103;
  uint8_t *v104;
  uint64_t v105;
  uint64_t v106;
  _QWORD *v107;
  uint64_t v108;
  uint64_t v109;
  void (*v110)(uint64_t, uint64_t, uint64_t);
  uint32_t v111;
  os_log_type_t v112;
  NSObject *v113;
  uint64_t v114;
  char v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  void (*v120)(uint64_t, uint64_t);
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  char *v124;
  char *v125;
  uint64_t v126;
  uint8_t *v127;
  uint64_t v128;
  uint64_t v129;
  _QWORD *v130;
  uint64_t v131;
  uint64_t v132;
  void (*v133)(uint64_t, uint64_t, uint64_t);
  uint32_t v134;
  os_log_type_t v135;
  NSObject *log;
  uint64_t v137;
  id v138;
  uint64_t v139;
  char v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  void (*v144)(uint64_t, uint64_t);
  uint64_t v145;
  void *v146;
  uint64_t v147;
  uint8_t *v148;
  uint64_t v149;
  uint64_t v150;
  _QWORD *v151;
  uint64_t v152;
  uint64_t v153;
  void (*v154)(uint64_t, uint64_t, uint64_t);
  uint32_t v155;
  os_log_type_t v156;
  NSObject *oslog;
  uint64_t v158;
  BOOL v159;
  BOOL v160;
  char v161;
  id v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  void (*v173)(uint64_t, uint64_t);
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint8_t *buf;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  char v189;
  char v190;
  char v191;
  uint64_t v192;
  char v193;
  uint64_t v194;
  uint64_t v195;
  uint32_t size;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  _QWORD *v234;
  NSObject *v235;
  os_log_type_t v236;
  uint8_t *v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t (*v240)(uint64_t, uint64_t, uint64_t);
  uint64_t v241;
  uint8_t *v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t (*v245)(uint64_t, uint64_t, uint64_t);
  uint64_t v246;
  char v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;

  v1 = *(_QWORD *)(v0 + 1568);
  v183 = *(_QWORD *)(v0 + 1464);
  v185 = *(_QWORD *)(v0 + 1456);
  v190 = *(_BYTE *)(v0 + 1906);
  v191 = *(_BYTE *)(v0 + 1905);
  v195 = *(_QWORD *)(v0 + 1360);
  v194 = *(_QWORD *)(v0 + 1352);
  v193 = *(_BYTE *)(v0 + 1899);
  v192 = *(_QWORD *)(v0 + 1344);
  v189 = *(_BYTE *)(v0 + 1898);
  v188 = *(_QWORD *)(v0 + 1336);
  v187 = *(_QWORD *)(v0 + 1328);
  v186 = *(_QWORD *)(v0 + 1320);
  *(_QWORD *)(v0 + 600) = v0;
  v184 = Logger.wellnessIntents.unsafeMutableAddressor();
  swift_beginAccess();
  v2 = *(void (**)(uint64_t, uint64_t, uint64_t))(v183 + 16);
  *(_QWORD *)(v0 + 1576) = v2;
  v2(v1, v184, v185);
  swift_endAccess();
  swift_bridgeObjectRetain();
  v197 = swift_allocObject();
  *(_QWORD *)(v197 + 16) = v186;
  *(_QWORD *)(v197 + 24) = v187;
  swift_bridgeObjectRetain();
  v199 = swift_allocObject();
  *(_QWORD *)(v199 + 16) = v188;
  v201 = swift_allocObject();
  *(_BYTE *)(v201 + 16) = v189 & 1;
  v205 = swift_allocObject();
  *(_BYTE *)(v205 + 16) = v190;
  v207 = swift_allocObject();
  *(_BYTE *)(v207 + 16) = v191;
  v209 = swift_allocObject();
  *(_QWORD *)(v209 + 16) = v192;
  *(_BYTE *)(v209 + 24) = v193 & 1;
  swift_bridgeObjectRetain();
  v211 = swift_allocObject();
  *(_QWORD *)(v211 + 16) = v194;
  *(_QWORD *)(v211 + 24) = v195;
  v235 = Logger.logObject.getter();
  v236 = static os_log_type_t.debug.getter();
  *(_QWORD *)(v0 + 616) = 68;
  *(_QWORD *)(v0 + 1584) = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  *(_QWORD *)(v0 + 1592) = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  *(_QWORD *)(v0 + 1600) = lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  size = *(_DWORD *)(v0 + 596);
  v213 = swift_allocObject();
  *(_BYTE *)(v213 + 16) = 32;
  v214 = swift_allocObject();
  *(_BYTE *)(v214 + 16) = 8;
  v198 = swift_allocObject();
  *(_QWORD *)(v198 + 16) = partial apply for implicit closure #4 in LogQuantityIntentHandler.handle(intent:);
  *(_QWORD *)(v198 + 24) = v197;
  v215 = swift_allocObject();
  *(_QWORD *)(v215 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:);
  *(_QWORD *)(v215 + 24) = v198;
  v216 = swift_allocObject();
  *(_BYTE *)(v216 + 16) = 32;
  v217 = swift_allocObject();
  *(_BYTE *)(v217 + 16) = 8;
  v200 = swift_allocObject();
  *(_QWORD *)(v200 + 16) = partial apply for implicit closure #2 in SpecificMedicationsPersistor.saveWithID(scheduleID:medicationIDs:medStatus:dosage:dosageUnit:confirmedAsNeeded:confirmedAsScheduled:);
  *(_QWORD *)(v200 + 24) = v199;
  v218 = swift_allocObject();
  *(_QWORD *)(v218 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:);
  *(_QWORD *)(v218 + 24) = v200;
  v219 = swift_allocObject();
  *(_BYTE *)(v219 + 16) = 0;
  v220 = swift_allocObject();
  *(_BYTE *)(v220 + 16) = 4;
  v202 = swift_allocObject();
  *(_QWORD *)(v202 + 16) = partial apply for implicit closure #5 in LogSpecificMedicationsIntentHandler.handle(intent:);
  *(_QWORD *)(v202 + 24) = v201;
  v203 = swift_allocObject();
  *(_QWORD *)(v203 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:format:privacy:);
  *(_QWORD *)(v203 + 24) = v202;
  v204 = swift_allocObject();
  *(_QWORD *)(v204 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:);
  *(_QWORD *)(v204 + 24) = v203;
  v221 = swift_allocObject();
  *(_QWORD *)(v221 + 16) = partial apply for thunk for @escaping @callee_guaranteed () -> (@unowned Int32);
  *(_QWORD *)(v221 + 24) = v204;
  v222 = swift_allocObject();
  *(_BYTE *)(v222 + 16) = 32;
  v223 = swift_allocObject();
  *(_BYTE *)(v223 + 16) = 8;
  v206 = swift_allocObject();
  *(_QWORD *)(v206 + 16) = partial apply for implicit closure #4 in SpecificMedicationsPersistor.saveWithID(scheduleID:medicationIDs:medStatus:dosage:dosageUnit:confirmedAsNeeded:confirmedAsScheduled:);
  *(_QWORD *)(v206 + 24) = v205;
  v224 = swift_allocObject();
  *(_QWORD *)(v224 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:);
  *(_QWORD *)(v224 + 24) = v206;
  v225 = swift_allocObject();
  *(_BYTE *)(v225 + 16) = 32;
  v226 = swift_allocObject();
  *(_BYTE *)(v226 + 16) = 8;
  v208 = swift_allocObject();
  *(_QWORD *)(v208 + 16) = partial apply for implicit closure #4 in SpecificMedicationsPersistor.saveWithID(scheduleID:medicationIDs:medStatus:dosage:dosageUnit:confirmedAsNeeded:confirmedAsScheduled:);
  *(_QWORD *)(v208 + 24) = v207;
  v227 = swift_allocObject();
  *(_QWORD *)(v227 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:);
  *(_QWORD *)(v227 + 24) = v208;
  v228 = swift_allocObject();
  *(_BYTE *)(v228 + 16) = 32;
  v229 = swift_allocObject();
  *(_BYTE *)(v229 + 16) = 8;
  v210 = swift_allocObject();
  *(_QWORD *)(v210 + 16) = partial apply for implicit closure #1 in SpecificMedicationsPersistor.writeDoseEvent(medicationController:doseEvents:medStatusTaken:medicationIDPresent:dosage:dosageUnit:);
  *(_QWORD *)(v210 + 24) = v209;
  v230 = swift_allocObject();
  *(_QWORD *)(v230 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:);
  *(_QWORD *)(v230 + 24) = v210;
  v231 = swift_allocObject();
  *(_BYTE *)(v231 + 16) = 32;
  v232 = swift_allocObject();
  *(_BYTE *)(v232 + 16) = 8;
  v212 = swift_allocObject();
  *(_QWORD *)(v212 + 16) = partial apply for implicit closure #2 in SpecificMedicationsPersistor.writeDoseEvent(medicationController:doseEvents:medStatusTaken:medicationIDPresent:dosage:dosageUnit:);
  *(_QWORD *)(v212 + 24) = v211;
  v233 = swift_allocObject();
  *(_QWORD *)(v233 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:);
  *(_QWORD *)(v233 + 24) = v212;
  *(_QWORD *)(v0 + 1608) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
  _allocateUninitializedArray<A>(_:)();
  v234 = v3;
  swift_retain();
  *v234 = partial apply for closure #1 in OSLogArguments.append(_:);
  v234[1] = v213;
  swift_retain();
  v234[2] = partial apply for closure #1 in OSLogArguments.append(_:);
  v234[3] = v214;
  swift_retain();
  v234[4] = partial apply for closure #1 in OSLogArguments.append(_:);
  v234[5] = v215;
  swift_retain();
  v234[6] = partial apply for closure #1 in OSLogArguments.append(_:);
  v234[7] = v216;
  swift_retain();
  v234[8] = partial apply for closure #1 in OSLogArguments.append(_:);
  v234[9] = v217;
  swift_retain();
  v234[10] = partial apply for closure #1 in OSLogArguments.append(_:);
  v234[11] = v218;
  swift_retain();
  v234[12] = partial apply for closure #1 in OSLogArguments.append(_:);
  v234[13] = v219;
  swift_retain();
  v234[14] = partial apply for closure #1 in OSLogArguments.append(_:);
  v234[15] = v220;
  swift_retain();
  v234[16] = _s2os14OSLogArgumentsV6appendyyxycs17FixedWidthIntegerRzlFySpys5UInt8VGz_SpySo8NSObjectCSgGSgzSpyypGSgztcfU_TA_0;
  v234[17] = v221;
  swift_retain();
  v234[18] = partial apply for closure #1 in OSLogArguments.append(_:);
  v234[19] = v222;
  swift_retain();
  v234[20] = partial apply for closure #1 in OSLogArguments.append(_:);
  v234[21] = v223;
  swift_retain();
  v234[22] = partial apply for closure #1 in OSLogArguments.append(_:);
  v234[23] = v224;
  swift_retain();
  v234[24] = partial apply for closure #1 in OSLogArguments.append(_:);
  v234[25] = v225;
  swift_retain();
  v234[26] = partial apply for closure #1 in OSLogArguments.append(_:);
  v234[27] = v226;
  swift_retain();
  v234[28] = partial apply for closure #1 in OSLogArguments.append(_:);
  v234[29] = v227;
  swift_retain();
  v234[30] = partial apply for closure #1 in OSLogArguments.append(_:);
  v234[31] = v228;
  swift_retain();
  v234[32] = partial apply for closure #1 in OSLogArguments.append(_:);
  v234[33] = v229;
  swift_retain();
  v234[34] = partial apply for closure #1 in OSLogArguments.append(_:);
  v234[35] = v230;
  swift_retain();
  v234[36] = partial apply for closure #1 in OSLogArguments.append(_:);
  v234[37] = v231;
  swift_retain();
  v234[38] = partial apply for closure #1 in OSLogArguments.append(_:);
  v234[39] = v232;
  swift_retain();
  v234[40] = partial apply for closure #1 in OSLogArguments.append(_:);
  v234[41] = v233;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(v235, v236))
  {
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    v178 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    v180 = createStorage<A>(capacity:type:)(0);
    v181 = createStorage<A>(capacity:type:)(6);
    v242 = buf;
    v243 = v180;
    v244 = v181;
    serialize(_:at:)(2, &v242);
    serialize(_:at:)(7, &v242);
    v245 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v246 = v213;
    closure #1 in osLogInternal(_:log:type:)(&v245, (uint64_t)&v242, (uint64_t)&v243, (uint64_t)&v244);
    v245 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v246 = v214;
    closure #1 in osLogInternal(_:log:type:)(&v245, (uint64_t)&v242, (uint64_t)&v243, (uint64_t)&v244);
    v245 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v246 = v215;
    closure #1 in osLogInternal(_:log:type:)(&v245, (uint64_t)&v242, (uint64_t)&v243, (uint64_t)&v244);
    v245 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v246 = v216;
    closure #1 in osLogInternal(_:log:type:)(&v245, (uint64_t)&v242, (uint64_t)&v243, (uint64_t)&v244);
    v245 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v246 = v217;
    closure #1 in osLogInternal(_:log:type:)(&v245, (uint64_t)&v242, (uint64_t)&v243, (uint64_t)&v244);
    v245 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v246 = v218;
    closure #1 in osLogInternal(_:log:type:)(&v245, (uint64_t)&v242, (uint64_t)&v243, (uint64_t)&v244);
    v245 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v246 = v219;
    closure #1 in osLogInternal(_:log:type:)(&v245, (uint64_t)&v242, (uint64_t)&v243, (uint64_t)&v244);
    v245 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v246 = v220;
    closure #1 in osLogInternal(_:log:type:)(&v245, (uint64_t)&v242, (uint64_t)&v243, (uint64_t)&v244);
    v245 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))_s2os14OSLogArgumentsV6appendyyxycs17FixedWidthIntegerRzlFySpys5UInt8VGz_SpySo8NSObjectCSgGSgzSpyypGSgztcfU_TA_0;
    v246 = v221;
    closure #1 in osLogInternal(_:log:type:)(&v245, (uint64_t)&v242, (uint64_t)&v243, (uint64_t)&v244);
    v245 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v246 = v222;
    closure #1 in osLogInternal(_:log:type:)(&v245, (uint64_t)&v242, (uint64_t)&v243, (uint64_t)&v244);
    v245 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v246 = v223;
    closure #1 in osLogInternal(_:log:type:)(&v245, (uint64_t)&v242, (uint64_t)&v243, (uint64_t)&v244);
    v245 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v246 = v224;
    closure #1 in osLogInternal(_:log:type:)(&v245, (uint64_t)&v242, (uint64_t)&v243, (uint64_t)&v244);
    v245 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v246 = v225;
    closure #1 in osLogInternal(_:log:type:)(&v245, (uint64_t)&v242, (uint64_t)&v243, (uint64_t)&v244);
    v245 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v246 = v226;
    closure #1 in osLogInternal(_:log:type:)(&v245, (uint64_t)&v242, (uint64_t)&v243, (uint64_t)&v244);
    v245 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v246 = v227;
    closure #1 in osLogInternal(_:log:type:)(&v245, (uint64_t)&v242, (uint64_t)&v243, (uint64_t)&v244);
    v245 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v246 = v228;
    closure #1 in osLogInternal(_:log:type:)(&v245, (uint64_t)&v242, (uint64_t)&v243, (uint64_t)&v244);
    v245 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v246 = v229;
    closure #1 in osLogInternal(_:log:type:)(&v245, (uint64_t)&v242, (uint64_t)&v243, (uint64_t)&v244);
    v245 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v246 = v230;
    closure #1 in osLogInternal(_:log:type:)(&v245, (uint64_t)&v242, (uint64_t)&v243, (uint64_t)&v244);
    v245 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v246 = v231;
    closure #1 in osLogInternal(_:log:type:)(&v245, (uint64_t)&v242, (uint64_t)&v243, (uint64_t)&v244);
    v245 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v246 = v232;
    closure #1 in osLogInternal(_:log:type:)(&v245, (uint64_t)&v242, (uint64_t)&v243, (uint64_t)&v244);
    v245 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v246 = v233;
    closure #1 in osLogInternal(_:log:type:)(&v245, (uint64_t)&v242, (uint64_t)&v243, (uint64_t)&v244);
    _os_log_impl(&dword_24749F000, v235, v236, "Calling saveWithID() for specified scheduleID (%s) and potentially medicationID (%s) with medStatus: %{BOOL}d, confirmedAsScheduled: %s, confirmedAsNeeded: (%s), dosage (%s), dosageUnit (%s)", buf, size);
    destroyStorage<A>(_:count:)(v180, 0, v178);
    destroyStorage<A>(_:count:)(v181, 6, MEMORY[0x24BEE4AD8] + 8);
    MEMORY[0x24957D398](buf, MEMORY[0x24BEE4260]);
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
  }
  v167 = *(_QWORD *)(v182 + 1568);
  v166 = *(_QWORD *)(v182 + 1464);
  v168 = *(_QWORD *)(v182 + 1456);
  v170 = *(_QWORD *)(v182 + 1424);
  v174 = *(_QWORD *)(v182 + 1416);
  v171 = *(_QWORD *)(v182 + 1408);
  v175 = *(_QWORD *)(v182 + 1400);
  v169 = *(_QWORD *)(v182 + 1392);
  v172 = *(_QWORD *)(v182 + 1384);
  v177 = *(_QWORD *)(v182 + 1336);

  v4 = *(void (**)(uint64_t, uint64_t))(v166 + 8);
  *(_QWORD *)(v182 + 1616) = v4;
  v4(v167, v168);
  Date.init()();
  Date.startOfDay.getter(v174);
  v173 = *(void (**)(uint64_t, uint64_t))(v169 + 8);
  v173(v170, v172);
  Date.init()();
  Date.endOfDay.getter(v175);
  v173(v171, v172);
  DateInterval.init(start:end:)();
  *(_QWORD *)(v182 + 1624) = type metadata accessor for HKMedicationExposableDoseEvent();
  v176 = _allocateUninitializedArray<A>(_:)();
  *(_QWORD *)(v182 + 1632) = v176;
  swift_bridgeObjectRetain();
  *(_QWORD *)(v182 + 624) = v176;
  swift_bridgeObjectRetain();
  if (!v177)
  {
    v22 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v182 + 1776) = v22;
    *v22 = *(_QWORD *)(v182 + 600);
    v22[1] = SpecificMedicationsPersistor.saveWithID(scheduleID:medicationIDs:medStatus:dosage:dosageUnit:confirmedAsNeeded:confirmedAsScheduled:);
    return SpecificMedicationsPersistor.getDoseEvents(for:medicationIdentifier:)(*(_QWORD *)(v182 + 1448), 0, *(_QWORD *)(v182 + 1368), *(_QWORD *)(v182 + 1376));
  }
  v163 = *(_QWORD *)(v182 + 1336);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v182 + 992) = v163;
  swift_bridgeObjectRetain();
  *(_QWORD *)(v182 + 1000) = v163;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  lazy protocol witness table accessor for type [String] and conformance [A]();
  Collection<>.makeIterator()();
  *(_QWORD *)(v182 + 1640) = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<[String]>);
  IndexingIterator.next()();
  v164 = *(_QWORD *)(v182 + 528);
  v165 = *(_QWORD *)(v182 + 536);
  *(_QWORD *)(v182 + 1648) = v165;
  if (v165)
  {
    *(_QWORD *)(v182 + 544) = v164;
    *(_QWORD *)(v182 + 552) = v165;
    v5 = swift_allocObject();
    *(_QWORD *)(v182 + 1656) = v5;
    *(_QWORD *)(v182 + 1264) = v5 + 16;
    type metadata accessor for HKMedicationIdentifier();
    swift_bridgeObjectRetain();
    v162 = HKMedicationIdentifier.__allocating_init(rawIdentifier:)();
    *(_QWORD *)(v182 + 1664) = v162;
    v6 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v182 + 1672) = v6;
    *v6 = *(_QWORD *)(v182 + 600);
    v6[1] = SpecificMedicationsPersistor.saveWithID(scheduleID:medicationIDs:medStatus:dosage:dosageUnit:confirmedAsNeeded:confirmedAsScheduled:);
    return SpecificMedicationsPersistor.getDoseEvents(for:medicationIdentifier:)(*(_QWORD *)(v182 + 1448), (uint64_t)v162, *(_QWORD *)(v182 + 1368), *(_QWORD *)(v182 + 1376));
  }
  v161 = *(_BYTE *)(v182 + 1906);
  outlined destroy of [HKQuantityType]();
  *(_BYTE *)(v182 + 585) = v161;
  *(_BYTE *)(v182 + 586) = 1;
  if (*(_BYTE *)(v182 + 585) == 2)
  {
    if (*(_BYTE *)(v182 + 586) != 2)
      goto LABEL_25;
  }
  else
  {
    outlined init with copy of Bool?((_BYTE *)(v182 + 585), (_BYTE *)(v182 + 1897));
    if (*(_BYTE *)(v182 + 586) == 2 || (*(_BYTE *)(v182 + 1897) & 1) != (*(_BYTE *)(v182 + 586) & 1))
    {
LABEL_25:
      *(_BYTE *)(v182 + 587) = *(_BYTE *)(v182 + 1905);
      *(_BYTE *)(v182 + 588) = 1;
      if (*(_BYTE *)(v182 + 587) == 2)
      {
        if (*(_BYTE *)(v182 + 588) != 2)
          goto LABEL_50;
      }
      else
      {
        outlined init with copy of Bool?((_BYTE *)(v182 + 587), (_BYTE *)(v182 + 594));
        if (*(_BYTE *)(v182 + 588) == 2 || (*(_BYTE *)(v182 + 594) & 1) != (*(_BYTE *)(v182 + 588) & 1))
          goto LABEL_50;
      }
      *(_BYTE *)(v182 + 589) = *(_BYTE *)(v182 + 1906);
      *(_BYTE *)(v182 + 590) = 0;
      if (*(_BYTE *)(v182 + 589) == 2)
      {
        if (*(_BYTE *)(v182 + 590) == 2)
        {
          v159 = 1;
LABEL_39:
          if (v159)
          {
            v154 = *(void (**)(uint64_t, uint64_t, uint64_t))(v182 + 1576);
            v7 = *(_QWORD *)(v182 + 1552);
            v153 = *(_QWORD *)(v182 + 1456);
            v152 = Logger.wellnessIntents.unsafeMutableAddressor();
            swift_beginAccess();
            v154(v7, v152, v153);
            swift_endAccess();
            oslog = Logger.logObject.getter();
            v156 = static os_log_type_t.debug.getter();
            *(_QWORD *)(v182 + 1112) = 2;
            UnsignedInteger<>.init<A>(_:)();
            v155 = *(_DWORD *)(v182 + 1940);
            v158 = _allocateUninitializedArray<A>(_:)();
            if (os_log_type_enabled(oslog, v156))
            {
              v148 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
              v147 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
              v149 = createStorage<A>(capacity:type:)(0);
              v150 = createStorage<A>(capacity:type:)(0);
              *(_QWORD *)(v182 + 1184) = v148;
              *(_QWORD *)(v182 + 1192) = v149;
              *(_QWORD *)(v182 + 1200) = v150;
              serialize(_:at:)(0, (_BYTE **)(v182 + 1184));
              serialize(_:at:)(0, (_BYTE **)(v182 + 1184));
              *(_QWORD *)(v182 + 1208) = v158;
              v151 = (_QWORD *)swift_task_alloc();
              v151[2] = v182 + 1184;
              v151[3] = v182 + 1192;
              v151[4] = v182 + 1200;
              __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
              lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
              Sequence.forEach(_:)();
              swift_task_dealloc();
              _os_log_impl(&dword_24749F000, oslog, v156, "saveWithID: confirmedAsNeeded is true, confirmedAsScheduled is false. No reprompt needed - continuing.", v148, v155);
              destroyStorage<A>(_:count:)(v149, 0, v147);
              destroyStorage<A>(_:count:)(v150, 0, MEMORY[0x24BEE4AD8] + 8);
              MEMORY[0x24957D398](v148, MEMORY[0x24BEE4260]);
            }
            swift_bridgeObjectRelease();
            v144 = *(void (**)(uint64_t, uint64_t))(v182 + 1616);
            v142 = *(_QWORD *)(v182 + 1552);
            v143 = *(_QWORD *)(v182 + 1456);

            v144(v142, v143);
            v145 = *(_QWORD *)(v182 + 624);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            *(_QWORD *)(v182 + 1128) = v145;
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [HKMedicationExposableDoseEvent]);
            lazy protocol witness table accessor for type [HKMedicationExposableDoseEvent] and conformance [A]();
            Collection.first.getter();
            outlined destroy of [HKQuantityType]();
            v146 = *(void **)(v182 + 1120);
            *(_QWORD *)(v182 + 1696) = v146;
            if (v146)
            {
              v140 = *(_BYTE *)(v182 + 1899);
              *(_QWORD *)(v182 + 1176) = v146;
              swift_bridgeObjectRelease();
              v138 = objc_msgSend(v146, sel_medicationIdentifier);
              *(_QWORD *)(v182 + 1704) = objc_msgSend(v138, sel_underlyingIdentifier);
              v141 = static String._unconditionallyBridgeFromObjectiveC(_:)();
              v139 = v8;
              *(_QWORD *)(v182 + 1712) = v8;

              v9 = (_QWORD *)swift_task_alloc();
              *(_QWORD *)(v182 + 1720) = v9;
              *v9 = *(_QWORD *)(v182 + 600);
              v9[1] = SpecificMedicationsPersistor.saveWithID(scheduleID:medicationIDs:medStatus:dosage:dosageUnit:confirmedAsNeeded:confirmedAsScheduled:);
              v10 = *(_QWORD *)(v182 + 1376);
              v11 = *(_QWORD *)(v182 + 1368);
              v12 = *(_QWORD *)(v182 + 1360);
              v13 = *(_QWORD *)(v182 + 1352);
              v14 = *(_QWORD *)(v182 + 1344);
              v15 = *(_BYTE *)(v182 + 1898);
              v247 = 1;
              v248 = 0;
              v249 = 0;
              v250 = v11;
              v251 = v10;
              return SpecificMedicationsPersistor.saveAsNeededWithStrength(medicationID:medStatusTaken:dosage:dosageUnit:strength:strengthUnit:)(v141, v139, v15 & 1, v14, v140 & 1, v13, v12, 0);
            }
            v133 = *(void (**)(uint64_t, uint64_t, uint64_t))(v182 + 1576);
            v16 = *(_QWORD *)(v182 + 1544);
            v132 = *(_QWORD *)(v182 + 1456);
            swift_bridgeObjectRelease();
            v131 = Logger.wellness.unsafeMutableAddressor();
            swift_beginAccess();
            v133(v16, v131, v132);
            swift_endAccess();
            log = Logger.logObject.getter();
            v135 = static os_log_type_t.error.getter();
            *(_QWORD *)(v182 + 1136) = 2;
            UnsignedInteger<>.init<A>(_:)();
            v134 = *(_DWORD *)(v182 + 1944);
            v137 = _allocateUninitializedArray<A>(_:)();
            if (os_log_type_enabled(log, v135))
            {
              v127 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
              v126 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
              v128 = createStorage<A>(capacity:type:)(0);
              v129 = createStorage<A>(capacity:type:)(0);
              *(_QWORD *)(v182 + 1144) = v127;
              *(_QWORD *)(v182 + 1152) = v128;
              *(_QWORD *)(v182 + 1160) = v129;
              serialize(_:at:)(0, (_BYTE **)(v182 + 1144));
              serialize(_:at:)(0, (_BYTE **)(v182 + 1144));
              *(_QWORD *)(v182 + 1168) = v137;
              v130 = (_QWORD *)swift_task_alloc();
              v130[2] = v182 + 1144;
              v130[3] = v182 + 1152;
              v130[4] = v182 + 1160;
              __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
              lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
              Sequence.forEach(_:)();
              swift_task_dealloc();
              _os_log_impl(&dword_24749F000, log, v135, "No doseEvent found in saveWithID's fallback condition, returning failure status", v127, v134);
              destroyStorage<A>(_:count:)(v128, 0, v126);
              destroyStorage<A>(_:count:)(v129, 0, MEMORY[0x24BEE4AD8] + 8);
              MEMORY[0x24957D398](v127, MEMORY[0x24BEE4260]);
            }
            swift_bridgeObjectRelease();
            v120 = *(void (**)(uint64_t, uint64_t))(v182 + 1616);
            v118 = *(_QWORD *)(v182 + 1544);
            v119 = *(_QWORD *)(v182 + 1456);
            v123 = *(_QWORD *)(v182 + 1448);
            v121 = *(_QWORD *)(v182 + 1440);
            v122 = *(_QWORD *)(v182 + 1432);

            v120(v118, v119);
            type metadata accessor for LogSpecificMedicationsIntentResponse();
            v124 = LogSpecificMedicationsIntentResponse.__allocating_init(code:userActivity:)(5, 0);
            swift_bridgeObjectRelease();
            outlined destroy of [HKQuantityType]();
            (*(void (**)(uint64_t, uint64_t))(v121 + 8))(v123, v122);
            v125 = v124;
LABEL_65:
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            return (*(uint64_t (**)(char *))(*(_QWORD *)(v182 + 600) + 8))(v125);
          }
LABEL_50:
          v116 = *(_QWORD *)(v182 + 624);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          *(_QWORD *)(v182 + 1016) = v116;
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [HKMedicationExposableDoseEvent]);
          lazy protocol witness table accessor for type [HKMedicationExposableDoseEvent] and conformance [A]();
          Collection.first.getter();
          outlined destroy of [HKQuantityType]();
          v117 = *(_QWORD *)(v182 + 1008);
          *(_QWORD *)(v182 + 1736) = v117;
          if (v117)
          {
            v115 = *(_BYTE *)(v182 + 1899);
            *(_QWORD *)(v182 + 1064) = v117;
            swift_bridgeObjectRelease();
            v17 = (_QWORD *)swift_task_alloc();
            *(_QWORD *)(v182 + 1744) = v17;
            *v17 = *(_QWORD *)(v182 + 600);
            v17[1] = SpecificMedicationsPersistor.saveWithID(scheduleID:medicationIDs:medStatus:dosage:dosageUnit:confirmedAsNeeded:confirmedAsScheduled:);
            return SpecificMedicationsPersistor.updateDosageForDoseEvent(doseEvent:inputDosage:inputDosageUnit:)(v117, *(_QWORD *)(v182 + 1344), v115 & 1, *(_QWORD *)(v182 + 1352), *(_QWORD *)(v182 + 1360), *(_QWORD *)(v182 + 1368), *(_QWORD *)(v182 + 1376));
          }
          v110 = *(void (**)(uint64_t, uint64_t, uint64_t))(v182 + 1576);
          v18 = *(_QWORD *)(v182 + 1528);
          v109 = *(_QWORD *)(v182 + 1456);
          swift_bridgeObjectRelease();
          v108 = Logger.wellness.unsafeMutableAddressor();
          swift_beginAccess();
          v110(v18, v108, v109);
          swift_endAccess();
          v113 = Logger.logObject.getter();
          v112 = static os_log_type_t.error.getter();
          *(_QWORD *)(v182 + 1024) = 2;
          UnsignedInteger<>.init<A>(_:)();
          v111 = *(_DWORD *)(v182 + 1932);
          v114 = _allocateUninitializedArray<A>(_:)();
          if (os_log_type_enabled(v113, v112))
          {
            v104 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
            v103 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
            v105 = createStorage<A>(capacity:type:)(0);
            v106 = createStorage<A>(capacity:type:)(0);
            *(_QWORD *)(v182 + 1032) = v104;
            *(_QWORD *)(v182 + 1040) = v105;
            *(_QWORD *)(v182 + 1048) = v106;
            serialize(_:at:)(0, (_BYTE **)(v182 + 1032));
            serialize(_:at:)(0, (_BYTE **)(v182 + 1032));
            *(_QWORD *)(v182 + 1056) = v114;
            v107 = (_QWORD *)swift_task_alloc();
            v107[2] = v182 + 1032;
            v107[3] = v182 + 1040;
            v107[4] = v182 + 1048;
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
            lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
            Sequence.forEach(_:)();
            swift_task_dealloc();
            _os_log_impl(&dword_24749F000, v113, v112, "No doseEvent found in saveWithID's fallback condition, returning failure status", v104, v111);
            destroyStorage<A>(_:count:)(v105, 0, v103);
            destroyStorage<A>(_:count:)(v106, 0, MEMORY[0x24BEE4AD8] + 8);
            MEMORY[0x24957D398](v104, MEMORY[0x24BEE4260]);
          }
          swift_bridgeObjectRelease();
          v98 = *(void (**)(uint64_t, uint64_t))(v182 + 1616);
          v96 = *(_QWORD *)(v182 + 1528);
          v97 = *(_QWORD *)(v182 + 1456);
          v101 = *(_QWORD *)(v182 + 1448);
          v99 = *(_QWORD *)(v182 + 1440);
          v100 = *(_QWORD *)(v182 + 1432);

          v98(v96, v97);
          type metadata accessor for LogSpecificMedicationsIntentResponse();
          v102 = LogSpecificMedicationsIntentResponse.__allocating_init(code:userActivity:)(5, 0);
          swift_bridgeObjectRelease();
          outlined destroy of [HKQuantityType]();
          (*(void (**)(uint64_t, uint64_t))(v99 + 8))(v101, v100);
          v125 = v102;
          goto LABEL_65;
        }
      }
      else
      {
        outlined init with copy of Bool?((_BYTE *)(v182 + 589), (_BYTE *)(v182 + 593));
        if (*(_BYTE *)(v182 + 590) != 2)
        {
          v159 = (*(_BYTE *)(v182 + 593) & 1) == (*(_BYTE *)(v182 + 590) & 1);
          goto LABEL_39;
        }
      }
      v159 = 0;
      goto LABEL_39;
    }
  }
  *(_BYTE *)(v182 + 591) = *(_BYTE *)(v182 + 1905);
  *(_BYTE *)(v182 + 592) = 0;
  if (*(_BYTE *)(v182 + 591) != 2)
  {
    outlined init with copy of Bool?((_BYTE *)(v182 + 591), (_BYTE *)(v182 + 595));
    if (*(_BYTE *)(v182 + 592) != 2)
    {
      v160 = (*(_BYTE *)(v182 + 595) & 1) == (*(_BYTE *)(v182 + 592) & 1);
      goto LABEL_21;
    }
    goto LABEL_23;
  }
  if (*(_BYTE *)(v182 + 592) != 2)
  {
LABEL_23:
    v160 = 0;
    goto LABEL_21;
  }
  v160 = 1;
LABEL_21:
  if (!v160)
    goto LABEL_25;
  v91 = *(void (**)(uint64_t, uint64_t, uint64_t))(v182 + 1576);
  v19 = *(_QWORD *)(v182 + 1520);
  v90 = *(_QWORD *)(v182 + 1456);
  v89 = Logger.wellnessIntents.unsafeMutableAddressor();
  swift_beginAccess();
  v91(v19, v89, v90);
  swift_endAccess();
  v94 = Logger.logObject.getter();
  v93 = static os_log_type_t.debug.getter();
  *(_QWORD *)(v182 + 1216) = 2;
  UnsignedInteger<>.init<A>(_:)();
  v92 = *(_DWORD *)(v182 + 1948);
  v95 = _allocateUninitializedArray<A>(_:)();
  if (os_log_type_enabled(v94, v93))
  {
    v85 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    v84 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    v86 = createStorage<A>(capacity:type:)(0);
    v87 = createStorage<A>(capacity:type:)(0);
    *(_QWORD *)(v182 + 1232) = v85;
    *(_QWORD *)(v182 + 1240) = v86;
    *(_QWORD *)(v182 + 1248) = v87;
    serialize(_:at:)(0, (_BYTE **)(v182 + 1232));
    serialize(_:at:)(0, (_BYTE **)(v182 + 1232));
    *(_QWORD *)(v182 + 1256) = v95;
    v88 = (_QWORD *)swift_task_alloc();
    v88[2] = v182 + 1232;
    v88[3] = v182 + 1240;
    v88[4] = v182 + 1248;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
    lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
    Sequence.forEach(_:)();
    swift_task_dealloc();
    _os_log_impl(&dword_24749F000, v94, v93, "saveWithID: confirmedAsScheduled is true, confirmedAsNeeded is false. No reprompt needed - continuing.", v85, v92);
    destroyStorage<A>(_:count:)(v86, 0, v84);
    destroyStorage<A>(_:count:)(v87, 0, MEMORY[0x24BEE4AD8] + 8);
    MEMORY[0x24957D398](v85, MEMORY[0x24BEE4260]);
  }
  swift_bridgeObjectRelease();
  v78 = *(void (**)(uint64_t, uint64_t))(v182 + 1616);
  v76 = *(_QWORD *)(v182 + 1520);
  v77 = *(_QWORD *)(v182 + 1456);
  v81 = *(_QWORD *)(v182 + 1328);
  v80 = *(_QWORD *)(v182 + 1320);

  v78(v76, v77);
  v79 = *(_QWORD *)(v182 + 624);
  swift_bridgeObjectRetain();
  *(_QWORD *)(v182 + 1224) = v79;
  swift_bridgeObjectRetain();
  v82 = swift_task_alloc();
  *(_QWORD *)(v82 + 16) = v80;
  *(_QWORD *)(v82 + 24) = v81;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [HKMedicationExposableDoseEvent]);
  lazy protocol witness table accessor for type [HKMedicationExposableDoseEvent] and conformance [A]();
  v83 = _ArrayProtocol.filter(_:)();
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v182 + 632) = v83;
  swift_bridgeObjectRelease();
  v50 = *(void (**)(uint64_t, uint64_t, uint64_t))(v182 + 1576);
  v20 = *(_QWORD *)(v182 + 1480);
  v49 = *(_QWORD *)(v182 + 1456);
  v54 = *(_BYTE *)(v182 + 1898);
  v53 = *(_QWORD *)(v182 + 1336);
  v52 = *(_QWORD *)(v182 + 1328);
  v51 = *(_QWORD *)(v182 + 1320);
  v48 = Logger.wellnessIntents.unsafeMutableAddressor();
  swift_beginAccess();
  v50(v20, v48, v49);
  swift_endAccess();
  swift_bridgeObjectRetain();
  v56 = swift_allocObject();
  *(_QWORD *)(v56 + 16) = v51;
  *(_QWORD *)(v56 + 24) = v52;
  swift_bridgeObjectRetain();
  v58 = swift_allocObject();
  *(_QWORD *)(v58 + 16) = v53;
  v60 = swift_allocObject();
  *(_BYTE *)(v60 + 16) = v54 & 1;
  v74 = Logger.logObject.getter();
  v75 = static os_log_type_t.debug.getter();
  *(_QWORD *)(v182 + 832) = 28;
  UnsignedInteger<>.init<A>(_:)();
  v55 = *(_DWORD *)(v182 + 1920);
  v64 = swift_allocObject();
  *(_BYTE *)(v64 + 16) = 32;
  v65 = swift_allocObject();
  *(_BYTE *)(v65 + 16) = 8;
  v57 = swift_allocObject();
  *(_QWORD *)(v57 + 16) = partial apply for implicit closure #4 in LogQuantityIntentHandler.handle(intent:);
  *(_QWORD *)(v57 + 24) = v56;
  v66 = swift_allocObject();
  *(_QWORD *)(v66 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:);
  *(_QWORD *)(v66 + 24) = v57;
  v67 = swift_allocObject();
  *(_BYTE *)(v67 + 16) = 32;
  v68 = swift_allocObject();
  *(_BYTE *)(v68 + 16) = 8;
  v59 = swift_allocObject();
  *(_QWORD *)(v59 + 16) = partial apply for implicit closure #2 in SpecificMedicationsPersistor.saveWithID(scheduleID:medicationIDs:medStatus:dosage:dosageUnit:confirmedAsNeeded:confirmedAsScheduled:);
  *(_QWORD *)(v59 + 24) = v58;
  v69 = swift_allocObject();
  *(_QWORD *)(v69 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:);
  *(_QWORD *)(v69 + 24) = v59;
  v70 = swift_allocObject();
  *(_BYTE *)(v70 + 16) = 0;
  v71 = swift_allocObject();
  *(_BYTE *)(v71 + 16) = 4;
  v61 = swift_allocObject();
  *(_QWORD *)(v61 + 16) = partial apply for implicit closure #5 in LogSpecificMedicationsIntentHandler.handle(intent:);
  *(_QWORD *)(v61 + 24) = v60;
  v62 = swift_allocObject();
  *(_QWORD *)(v62 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:format:privacy:);
  *(_QWORD *)(v62 + 24) = v61;
  v63 = swift_allocObject();
  *(_QWORD *)(v63 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:);
  *(_QWORD *)(v63 + 24) = v62;
  v72 = swift_allocObject();
  *(_QWORD *)(v72 + 16) = partial apply for thunk for @escaping @callee_guaranteed () -> (@unowned Int32);
  *(_QWORD *)(v72 + 24) = v63;
  _allocateUninitializedArray<A>(_:)();
  v73 = v21;
  swift_retain();
  *v73 = partial apply for closure #1 in OSLogArguments.append(_:);
  v73[1] = v64;
  swift_retain();
  v73[2] = partial apply for closure #1 in OSLogArguments.append(_:);
  v73[3] = v65;
  swift_retain();
  v73[4] = partial apply for closure #1 in OSLogArguments.append(_:);
  v73[5] = v66;
  swift_retain();
  v73[6] = partial apply for closure #1 in OSLogArguments.append(_:);
  v73[7] = v67;
  swift_retain();
  v73[8] = partial apply for closure #1 in OSLogArguments.append(_:);
  v73[9] = v68;
  swift_retain();
  v73[10] = partial apply for closure #1 in OSLogArguments.append(_:);
  v73[11] = v69;
  swift_retain();
  v73[12] = partial apply for closure #1 in OSLogArguments.append(_:);
  v73[13] = v70;
  swift_retain();
  v73[14] = partial apply for closure #1 in OSLogArguments.append(_:);
  v73[15] = v71;
  swift_retain();
  v73[16] = _s2os14OSLogArgumentsV6appendyyxycs17FixedWidthIntegerRzlFySpys5UInt8VGz_SpySo8NSObjectCSgGSgzSpyypGSgztcfU_TA_0;
  v73[17] = v72;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(v74, v75))
  {
    v45 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    v44 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    v46 = createStorage<A>(capacity:type:)(0);
    v47 = createStorage<A>(capacity:type:)(2);
    v237 = v45;
    v238 = v46;
    v239 = v47;
    serialize(_:at:)(2, &v237);
    serialize(_:at:)(3, &v237);
    v240 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v241 = v64;
    closure #1 in osLogInternal(_:log:type:)(&v240, (uint64_t)&v237, (uint64_t)&v238, (uint64_t)&v239);
    v240 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v241 = v65;
    closure #1 in osLogInternal(_:log:type:)(&v240, (uint64_t)&v237, (uint64_t)&v238, (uint64_t)&v239);
    v240 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v241 = v66;
    closure #1 in osLogInternal(_:log:type:)(&v240, (uint64_t)&v237, (uint64_t)&v238, (uint64_t)&v239);
    v240 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v241 = v67;
    closure #1 in osLogInternal(_:log:type:)(&v240, (uint64_t)&v237, (uint64_t)&v238, (uint64_t)&v239);
    v240 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v241 = v68;
    closure #1 in osLogInternal(_:log:type:)(&v240, (uint64_t)&v237, (uint64_t)&v238, (uint64_t)&v239);
    v240 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v241 = v69;
    closure #1 in osLogInternal(_:log:type:)(&v240, (uint64_t)&v237, (uint64_t)&v238, (uint64_t)&v239);
    v240 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v241 = v70;
    closure #1 in osLogInternal(_:log:type:)(&v240, (uint64_t)&v237, (uint64_t)&v238, (uint64_t)&v239);
    v240 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v241 = v71;
    closure #1 in osLogInternal(_:log:type:)(&v240, (uint64_t)&v237, (uint64_t)&v238, (uint64_t)&v239);
    v240 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))_s2os14OSLogArgumentsV6appendyyxycs17FixedWidthIntegerRzlFySpys5UInt8VGz_SpySo8NSObjectCSgGSgzSpyypGSgztcfU_TA_0;
    v241 = v72;
    closure #1 in osLogInternal(_:log:type:)(&v240, (uint64_t)&v237, (uint64_t)&v238, (uint64_t)&v239);
    _os_log_impl(&dword_24749F000, v74, v75, "Calling writeDoseEvent() for specified scheduleID (%s) and potentially medicationID (%s) with medStatus: %{BOOL}d", v45, v55);
    destroyStorage<A>(_:count:)(v46, 0, v44);
    destroyStorage<A>(_:count:)(v47, 2, MEMORY[0x24BEE4AD8] + 8);
    MEMORY[0x24957D398](v45, MEMORY[0x24BEE4260]);
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
  }
  v40 = *(void (**)(uint64_t, uint64_t))(v182 + 1616);
  v38 = *(_QWORD *)(v182 + 1480);
  v39 = *(_QWORD *)(v182 + 1456);
  v41 = *(id *)(v182 + 1376);
  v43 = *(_QWORD *)(v182 + 1336);

  v40(v38, v39);
  v24 = v41;
  v42 = *(_QWORD *)(v182 + 632);
  *(_QWORD *)(v182 + 1872) = v42;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v43)
  {
    v33 = *(_QWORD *)(v182 + 1336);
    swift_bridgeObjectRetain();
    *(_QWORD *)(v182 + 840) = v33;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    lazy protocol witness table accessor for type [String] and conformance [A]();
    Collection.first.getter();
    outlined destroy of [HKQuantityType]();
    v34 = *(_QWORD *)(v182 + 480);
    v35 = *(_QWORD *)(v182 + 488);
    swift_bridgeObjectRelease();
    v36 = v34;
    v37 = v35;
  }
  else
  {
    v36 = 0;
    v37 = 0;
  }
  *(_QWORD *)(v182 + 464) = v36;
  *(_QWORD *)(v182 + 472) = v37;
  v32 = *(_QWORD *)(v182 + 472) != 0;
  v31 = *(_BYTE *)(v182 + 1899);
  outlined destroy of String.UTF8View();
  v25 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v182 + 1880) = v25;
  *v25 = *(_QWORD *)(v182 + 600);
  v25[1] = SpecificMedicationsPersistor.saveWithID(scheduleID:medicationIDs:medStatus:dosage:dosageUnit:confirmedAsNeeded:confirmedAsScheduled:);
  v26 = *(_QWORD *)(v182 + 1376);
  v27 = *(_QWORD *)(v182 + 1360);
  v28 = *(_QWORD *)(v182 + 1352);
  v29 = *(_QWORD *)(v182 + 1344);
  v30 = *(_BYTE *)(v182 + 1898);
  v251 = *(_QWORD *)(v182 + 1368);
  v252 = v26;
  return SpecificMedicationsPersistor.writeDoseEvent(medicationController:doseEvents:medStatusTaken:medicationIDPresent:dosage:dosageUnit:)(v26, v42, v30 & 1, v32, v29, v31 & 1, v28, v27);
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  id v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  char v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void (*v39)(uint64_t, uint64_t);
  id v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint8_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void (*v49)(uint64_t, uint64_t, uint64_t);
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  uint32_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  NSObject *v73;
  os_log_type_t v74;
  uint64_t v75;
  uint64_t v76;
  void (*v77)(uint64_t, uint64_t);
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint8_t *v84;
  uint64_t v85;
  uint64_t v86;
  _QWORD *v87;
  uint64_t v88;
  uint64_t v89;
  void (*v90)(uint64_t, uint64_t, uint64_t);
  uint32_t v91;
  os_log_type_t v92;
  NSObject *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  void (*v97)(uint64_t, uint64_t);
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  uint64_t v102;
  uint8_t *v103;
  uint64_t v104;
  uint64_t v105;
  _QWORD *v106;
  uint64_t v107;
  uint64_t v108;
  void (*v109)(uint64_t, uint64_t, uint64_t);
  uint32_t v110;
  os_log_type_t v111;
  NSObject *v112;
  uint64_t v113;
  char v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  void (*v119)(uint64_t, uint64_t);
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  char *v123;
  char *v124;
  uint64_t v125;
  uint8_t *v126;
  uint64_t v127;
  uint64_t v128;
  _QWORD *v129;
  uint64_t v130;
  uint64_t v131;
  void (*v132)(uint64_t, uint64_t, uint64_t);
  uint32_t v133;
  os_log_type_t v134;
  NSObject *v135;
  uint64_t v136;
  id v137;
  uint64_t v138;
  char v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  void (*v143)(uint64_t, uint64_t);
  uint64_t v144;
  void *v145;
  uint64_t v146;
  uint8_t *v147;
  uint64_t v148;
  uint64_t v149;
  _QWORD *v150;
  uint64_t v151;
  uint64_t v152;
  void (*v153)(uint64_t, uint64_t, uint64_t);
  uint32_t v154;
  os_log_type_t v155;
  NSObject *log;
  uint64_t v157;
  BOOL v158;
  BOOL v159;
  char v160;
  uint64_t v161;
  uint64_t v162;
  void (*v163)(uint64_t, uint64_t);
  uint64_t *v164;
  uint64_t v165;
  uint64_t v166;
  uint8_t *buf;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  void (*v172)(uint64_t, uint64_t, uint64_t);
  uint64_t v173;
  uint32_t size;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  _QWORD *v180;
  NSObject *oslog;
  os_log_type_t v182;
  uint64_t v183;
  uint64_t v184;
  id v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint8_t *v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t (*v196)(uint64_t, uint64_t, uint64_t);
  uint64_t v197;
  char v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;

  v1 = v0[211];
  v2 = v0[210];
  v187 = v0[207];
  v190 = v0[166];
  v189 = v0[165];
  v0[75] = v0;
  *(_QWORD *)(v187 + 16) = v2;
  swift_beginAccess();
  v188 = *(_QWORD *)(v187 + 16);
  swift_bridgeObjectRetain();
  swift_endAccess();
  v0[159] = v188;
  swift_bridgeObjectRetain();
  v191 = swift_task_alloc();
  *(_QWORD *)(v191 + 16) = v189;
  *(_QWORD *)(v191 + 24) = v190;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [HKMedicationExposableDoseEvent]);
  lazy protocol witness table accessor for type [HKMedicationExposableDoseEvent] and conformance [A]();
  result = _ArrayProtocol.filter(_:)();
  v192 = result;
  if (v1)
    return result;
  v173 = *(_QWORD *)(v186 + 1656);
  v172 = *(void (**)(uint64_t, uint64_t, uint64_t))(v186 + 1576);
  v6 = *(_QWORD *)(v186 + 1560);
  v171 = *(_QWORD *)(v186 + 1456);
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  *(_QWORD *)(v173 + 16) = v192;
  swift_bridgeObjectRelease();
  swift_endAccess();
  v170 = Logger.wellnessIntents.unsafeMutableAddressor();
  swift_beginAccess();
  v172(v6, v170, v171);
  swift_endAccess();
  swift_retain();
  swift_retain();
  v175 = swift_allocObject();
  *(_QWORD *)(v175 + 16) = partial apply for implicit closure #6 in SpecificMedicationsPersistor.saveMedication(named:medStatusTaken:dosage:dosageUnit:);
  *(_QWORD *)(v175 + 24) = v173;
  swift_release();
  oslog = Logger.logObject.getter();
  v182 = static os_log_type_t.debug.getter();
  *(_QWORD *)(v186 + 1280) = 12;
  UnsignedInteger<>.init<A>(_:)();
  size = *(_DWORD *)(v186 + 1952);
  v177 = swift_allocObject();
  *(_BYTE *)(v177 + 16) = 32;
  v178 = swift_allocObject();
  *(_BYTE *)(v178 + 16) = 8;
  v176 = swift_allocObject();
  *(_QWORD *)(v176 + 16) = implicit closure #1 in OSLogInterpolation.appendInterpolation<A>(_:align:privacy:)partial apply;
  *(_QWORD *)(v176 + 24) = v175;
  v179 = swift_allocObject();
  *(_QWORD *)(v179 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:);
  *(_QWORD *)(v179 + 24) = v176;
  _allocateUninitializedArray<A>(_:)();
  v180 = v7;
  swift_retain();
  *v180 = partial apply for closure #1 in OSLogArguments.append(_:);
  v180[1] = v177;
  swift_retain();
  v180[2] = partial apply for closure #1 in OSLogArguments.append(_:);
  v180[3] = v178;
  swift_retain();
  v180[4] = partial apply for closure #1 in OSLogArguments.append(_:);
  v180[5] = v179;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(oslog, v182))
  {
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    v166 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    v168 = createStorage<A>(capacity:type:)(0);
    v169 = createStorage<A>(capacity:type:)(1);
    *(_QWORD *)(v186 + 1296) = buf;
    *(_QWORD *)(v186 + 1304) = v168;
    *(_QWORD *)(v186 + 1312) = v169;
    serialize(_:at:)(2, (_BYTE **)(v186 + 1296));
    serialize(_:at:)(1, (_BYTE **)(v186 + 1296));
    *(_QWORD *)(v186 + 560) = partial apply for closure #1 in OSLogArguments.append(_:);
    *(_QWORD *)(v186 + 568) = v177;
    closure #1 in osLogInternal(_:log:type:)((uint64_t (**)(uint64_t, uint64_t, uint64_t))(v186 + 560), v186 + 1296, v186 + 1304, v186 + 1312);
    *(_QWORD *)(v186 + 560) = partial apply for closure #1 in OSLogArguments.append(_:);
    *(_QWORD *)(v186 + 568) = v178;
    closure #1 in osLogInternal(_:log:type:)((uint64_t (**)(uint64_t, uint64_t, uint64_t))(v186 + 560), v186 + 1296, v186 + 1304, v186 + 1312);
    *(_QWORD *)(v186 + 560) = partial apply for closure #1 in OSLogArguments.append(_:);
    *(_QWORD *)(v186 + 568) = v179;
    closure #1 in osLogInternal(_:log:type:)((uint64_t (**)(uint64_t, uint64_t, uint64_t))(v186 + 560), v186 + 1296, v186 + 1304, v186 + 1312);
    _os_log_impl(&dword_24749F000, oslog, v182, "doseEventsForID: %s", buf, size);
    destroyStorage<A>(_:count:)(v168, 0, v166);
    destroyStorage<A>(_:count:)(v169, 1, MEMORY[0x24BEE4AD8] + 8);
    MEMORY[0x24957D398](buf, MEMORY[0x24BEE4260]);
  }
  swift_release();
  swift_release();
  swift_release();
  v163 = *(void (**)(uint64_t, uint64_t))(v186 + 1616);
  v161 = *(_QWORD *)(v186 + 1560);
  v162 = *(_QWORD *)(v186 + 1456);
  v164 = (uint64_t *)(*(_QWORD *)(v186 + 1656) + 16);

  v163(v161, v162);
  swift_beginAccess();
  v165 = *v164;
  swift_bridgeObjectRetain();
  swift_endAccess();
  *(_QWORD *)(v186 + 1288) = v165;
  lazy protocol witness table accessor for type [HKMedicationExposableDoseEvent] and conformance [A]();
  Array.append<A>(contentsOf:)();
  swift_release();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v186 + 1640) = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<[String]>);
  IndexingIterator.next()();
  v184 = *(_QWORD *)(v186 + 528);
  v183 = *(_QWORD *)(v186 + 536);
  *(_QWORD *)(v186 + 1648) = v183;
  if (v183)
  {
    *(_QWORD *)(v186 + 544) = v184;
    *(_QWORD *)(v186 + 552) = v183;
    v4 = swift_allocObject();
    *(_QWORD *)(v186 + 1656) = v4;
    *(_QWORD *)(v186 + 1264) = v4 + 16;
    type metadata accessor for HKMedicationIdentifier();
    swift_bridgeObjectRetain();
    v185 = HKMedicationIdentifier.__allocating_init(rawIdentifier:)();
    *(_QWORD *)(v186 + 1664) = v185;
    v5 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v186 + 1672) = v5;
    *v5 = *(_QWORD *)(v186 + 600);
    v5[1] = SpecificMedicationsPersistor.saveWithID(scheduleID:medicationIDs:medStatus:dosage:dosageUnit:confirmedAsNeeded:confirmedAsScheduled:);
    return SpecificMedicationsPersistor.getDoseEvents(for:medicationIdentifier:)(*(_QWORD *)(v186 + 1448), (uint64_t)v185, *(_QWORD *)(v186 + 1368), *(_QWORD *)(v186 + 1376));
  }
  v160 = *(_BYTE *)(v186 + 1906);
  outlined destroy of [HKQuantityType]();
  *(_BYTE *)(v186 + 585) = v160;
  *(_BYTE *)(v186 + 586) = 1;
  if (*(_BYTE *)(v186 + 585) == 2)
  {
    if (*(_BYTE *)(v186 + 586) != 2)
      goto LABEL_25;
  }
  else
  {
    outlined init with copy of Bool?((_BYTE *)(v186 + 585), (_BYTE *)(v186 + 1897));
    if (*(_BYTE *)(v186 + 586) == 2 || (*(_BYTE *)(v186 + 1897) & 1) != (*(_BYTE *)(v186 + 586) & 1))
    {
LABEL_25:
      *(_BYTE *)(v186 + 587) = *(_BYTE *)(v186 + 1905);
      *(_BYTE *)(v186 + 588) = 1;
      if (*(_BYTE *)(v186 + 587) == 2)
      {
        if (*(_BYTE *)(v186 + 588) != 2)
          goto LABEL_50;
      }
      else
      {
        outlined init with copy of Bool?((_BYTE *)(v186 + 587), (_BYTE *)(v186 + 594));
        if (*(_BYTE *)(v186 + 588) == 2 || (*(_BYTE *)(v186 + 594) & 1) != (*(_BYTE *)(v186 + 588) & 1))
          goto LABEL_50;
      }
      *(_BYTE *)(v186 + 589) = *(_BYTE *)(v186 + 1906);
      *(_BYTE *)(v186 + 590) = 0;
      if (*(_BYTE *)(v186 + 589) == 2)
      {
        if (*(_BYTE *)(v186 + 590) == 2)
        {
          v158 = 1;
LABEL_39:
          if (v158)
          {
            v153 = *(void (**)(uint64_t, uint64_t, uint64_t))(v186 + 1576);
            v8 = *(_QWORD *)(v186 + 1552);
            v152 = *(_QWORD *)(v186 + 1456);
            v151 = Logger.wellnessIntents.unsafeMutableAddressor();
            swift_beginAccess();
            v153(v8, v151, v152);
            swift_endAccess();
            log = Logger.logObject.getter();
            v155 = static os_log_type_t.debug.getter();
            *(_QWORD *)(v186 + 1112) = 2;
            UnsignedInteger<>.init<A>(_:)();
            v154 = *(_DWORD *)(v186 + 1940);
            v157 = _allocateUninitializedArray<A>(_:)();
            if (os_log_type_enabled(log, v155))
            {
              v147 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
              v146 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
              v148 = createStorage<A>(capacity:type:)(0);
              v149 = createStorage<A>(capacity:type:)(0);
              *(_QWORD *)(v186 + 1184) = v147;
              *(_QWORD *)(v186 + 1192) = v148;
              *(_QWORD *)(v186 + 1200) = v149;
              serialize(_:at:)(0, (_BYTE **)(v186 + 1184));
              serialize(_:at:)(0, (_BYTE **)(v186 + 1184));
              *(_QWORD *)(v186 + 1208) = v157;
              v150 = (_QWORD *)swift_task_alloc();
              v150[2] = v186 + 1184;
              v150[3] = v186 + 1192;
              v150[4] = v186 + 1200;
              __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
              lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
              Sequence.forEach(_:)();
              swift_task_dealloc();
              _os_log_impl(&dword_24749F000, log, v155, "saveWithID: confirmedAsNeeded is true, confirmedAsScheduled is false. No reprompt needed - continuing.", v147, v154);
              destroyStorage<A>(_:count:)(v148, 0, v146);
              destroyStorage<A>(_:count:)(v149, 0, MEMORY[0x24BEE4AD8] + 8);
              MEMORY[0x24957D398](v147, MEMORY[0x24BEE4260]);
            }
            swift_bridgeObjectRelease();
            v143 = *(void (**)(uint64_t, uint64_t))(v186 + 1616);
            v141 = *(_QWORD *)(v186 + 1552);
            v142 = *(_QWORD *)(v186 + 1456);

            v143(v141, v142);
            v144 = *(_QWORD *)(v186 + 624);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            *(_QWORD *)(v186 + 1128) = v144;
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [HKMedicationExposableDoseEvent]);
            lazy protocol witness table accessor for type [HKMedicationExposableDoseEvent] and conformance [A]();
            Collection.first.getter();
            outlined destroy of [HKQuantityType]();
            v145 = *(void **)(v186 + 1120);
            *(_QWORD *)(v186 + 1696) = v145;
            if (v145)
            {
              v139 = *(_BYTE *)(v186 + 1899);
              *(_QWORD *)(v186 + 1176) = v145;
              swift_bridgeObjectRelease();
              v137 = objc_msgSend(v145, sel_medicationIdentifier);
              *(_QWORD *)(v186 + 1704) = objc_msgSend(v137, sel_underlyingIdentifier);
              v140 = static String._unconditionallyBridgeFromObjectiveC(_:)();
              v138 = v9;
              *(_QWORD *)(v186 + 1712) = v9;

              v10 = (_QWORD *)swift_task_alloc();
              *(_QWORD *)(v186 + 1720) = v10;
              *v10 = *(_QWORD *)(v186 + 600);
              v10[1] = SpecificMedicationsPersistor.saveWithID(scheduleID:medicationIDs:medStatus:dosage:dosageUnit:confirmedAsNeeded:confirmedAsScheduled:);
              v11 = *(_QWORD *)(v186 + 1376);
              v12 = *(_QWORD *)(v186 + 1368);
              v13 = *(_QWORD *)(v186 + 1360);
              v14 = *(_QWORD *)(v186 + 1352);
              v15 = *(_QWORD *)(v186 + 1344);
              v16 = *(_BYTE *)(v186 + 1898);
              v198 = 1;
              v199 = 0;
              v200 = 0;
              v201 = v12;
              v202 = v11;
              return SpecificMedicationsPersistor.saveAsNeededWithStrength(medicationID:medStatusTaken:dosage:dosageUnit:strength:strengthUnit:)(v140, v138, v16 & 1, v15, v139 & 1, v14, v13, 0);
            }
            v132 = *(void (**)(uint64_t, uint64_t, uint64_t))(v186 + 1576);
            v17 = *(_QWORD *)(v186 + 1544);
            v131 = *(_QWORD *)(v186 + 1456);
            swift_bridgeObjectRelease();
            v130 = Logger.wellness.unsafeMutableAddressor();
            swift_beginAccess();
            v132(v17, v130, v131);
            swift_endAccess();
            v135 = Logger.logObject.getter();
            v134 = static os_log_type_t.error.getter();
            *(_QWORD *)(v186 + 1136) = 2;
            UnsignedInteger<>.init<A>(_:)();
            v133 = *(_DWORD *)(v186 + 1944);
            v136 = _allocateUninitializedArray<A>(_:)();
            if (os_log_type_enabled(v135, v134))
            {
              v126 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
              v125 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
              v127 = createStorage<A>(capacity:type:)(0);
              v128 = createStorage<A>(capacity:type:)(0);
              *(_QWORD *)(v186 + 1144) = v126;
              *(_QWORD *)(v186 + 1152) = v127;
              *(_QWORD *)(v186 + 1160) = v128;
              serialize(_:at:)(0, (_BYTE **)(v186 + 1144));
              serialize(_:at:)(0, (_BYTE **)(v186 + 1144));
              *(_QWORD *)(v186 + 1168) = v136;
              v129 = (_QWORD *)swift_task_alloc();
              v129[2] = v186 + 1144;
              v129[3] = v186 + 1152;
              v129[4] = v186 + 1160;
              __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
              lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
              Sequence.forEach(_:)();
              swift_task_dealloc();
              _os_log_impl(&dword_24749F000, v135, v134, "No doseEvent found in saveWithID's fallback condition, returning failure status", v126, v133);
              destroyStorage<A>(_:count:)(v127, 0, v125);
              destroyStorage<A>(_:count:)(v128, 0, MEMORY[0x24BEE4AD8] + 8);
              MEMORY[0x24957D398](v126, MEMORY[0x24BEE4260]);
            }
            swift_bridgeObjectRelease();
            v119 = *(void (**)(uint64_t, uint64_t))(v186 + 1616);
            v117 = *(_QWORD *)(v186 + 1544);
            v118 = *(_QWORD *)(v186 + 1456);
            v122 = *(_QWORD *)(v186 + 1448);
            v120 = *(_QWORD *)(v186 + 1440);
            v121 = *(_QWORD *)(v186 + 1432);

            v119(v117, v118);
            type metadata accessor for LogSpecificMedicationsIntentResponse();
            v123 = LogSpecificMedicationsIntentResponse.__allocating_init(code:userActivity:)(5, 0);
            swift_bridgeObjectRelease();
            outlined destroy of [HKQuantityType]();
            (*(void (**)(uint64_t, uint64_t))(v120 + 8))(v122, v121);
            v124 = v123;
LABEL_64:
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            return (*(uint64_t (**)(char *))(*(_QWORD *)(v186 + 600) + 8))(v124);
          }
LABEL_50:
          v115 = *(_QWORD *)(v186 + 624);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          *(_QWORD *)(v186 + 1016) = v115;
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [HKMedicationExposableDoseEvent]);
          lazy protocol witness table accessor for type [HKMedicationExposableDoseEvent] and conformance [A]();
          Collection.first.getter();
          outlined destroy of [HKQuantityType]();
          v116 = *(_QWORD *)(v186 + 1008);
          *(_QWORD *)(v186 + 1736) = v116;
          if (v116)
          {
            v114 = *(_BYTE *)(v186 + 1899);
            *(_QWORD *)(v186 + 1064) = v116;
            swift_bridgeObjectRelease();
            v18 = (_QWORD *)swift_task_alloc();
            *(_QWORD *)(v186 + 1744) = v18;
            *v18 = *(_QWORD *)(v186 + 600);
            v18[1] = SpecificMedicationsPersistor.saveWithID(scheduleID:medicationIDs:medStatus:dosage:dosageUnit:confirmedAsNeeded:confirmedAsScheduled:);
            return SpecificMedicationsPersistor.updateDosageForDoseEvent(doseEvent:inputDosage:inputDosageUnit:)(v116, *(_QWORD *)(v186 + 1344), v114 & 1, *(_QWORD *)(v186 + 1352), *(_QWORD *)(v186 + 1360), *(_QWORD *)(v186 + 1368), *(_QWORD *)(v186 + 1376));
          }
          v109 = *(void (**)(uint64_t, uint64_t, uint64_t))(v186 + 1576);
          v19 = *(_QWORD *)(v186 + 1528);
          v108 = *(_QWORD *)(v186 + 1456);
          swift_bridgeObjectRelease();
          v107 = Logger.wellness.unsafeMutableAddressor();
          swift_beginAccess();
          v109(v19, v107, v108);
          swift_endAccess();
          v112 = Logger.logObject.getter();
          v111 = static os_log_type_t.error.getter();
          *(_QWORD *)(v186 + 1024) = 2;
          UnsignedInteger<>.init<A>(_:)();
          v110 = *(_DWORD *)(v186 + 1932);
          v113 = _allocateUninitializedArray<A>(_:)();
          if (os_log_type_enabled(v112, v111))
          {
            v103 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
            v102 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
            v104 = createStorage<A>(capacity:type:)(0);
            v105 = createStorage<A>(capacity:type:)(0);
            *(_QWORD *)(v186 + 1032) = v103;
            *(_QWORD *)(v186 + 1040) = v104;
            *(_QWORD *)(v186 + 1048) = v105;
            serialize(_:at:)(0, (_BYTE **)(v186 + 1032));
            serialize(_:at:)(0, (_BYTE **)(v186 + 1032));
            *(_QWORD *)(v186 + 1056) = v113;
            v106 = (_QWORD *)swift_task_alloc();
            v106[2] = v186 + 1032;
            v106[3] = v186 + 1040;
            v106[4] = v186 + 1048;
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
            lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
            Sequence.forEach(_:)();
            swift_task_dealloc();
            _os_log_impl(&dword_24749F000, v112, v111, "No doseEvent found in saveWithID's fallback condition, returning failure status", v103, v110);
            destroyStorage<A>(_:count:)(v104, 0, v102);
            destroyStorage<A>(_:count:)(v105, 0, MEMORY[0x24BEE4AD8] + 8);
            MEMORY[0x24957D398](v103, MEMORY[0x24BEE4260]);
          }
          swift_bridgeObjectRelease();
          v97 = *(void (**)(uint64_t, uint64_t))(v186 + 1616);
          v95 = *(_QWORD *)(v186 + 1528);
          v96 = *(_QWORD *)(v186 + 1456);
          v100 = *(_QWORD *)(v186 + 1448);
          v98 = *(_QWORD *)(v186 + 1440);
          v99 = *(_QWORD *)(v186 + 1432);

          v97(v95, v96);
          type metadata accessor for LogSpecificMedicationsIntentResponse();
          v101 = LogSpecificMedicationsIntentResponse.__allocating_init(code:userActivity:)(5, 0);
          swift_bridgeObjectRelease();
          outlined destroy of [HKQuantityType]();
          (*(void (**)(uint64_t, uint64_t))(v98 + 8))(v100, v99);
          v124 = v101;
          goto LABEL_64;
        }
      }
      else
      {
        outlined init with copy of Bool?((_BYTE *)(v186 + 589), (_BYTE *)(v186 + 593));
        if (*(_BYTE *)(v186 + 590) != 2)
        {
          v158 = (*(_BYTE *)(v186 + 593) & 1) == (*(_BYTE *)(v186 + 590) & 1);
          goto LABEL_39;
        }
      }
      v158 = 0;
      goto LABEL_39;
    }
  }
  *(_BYTE *)(v186 + 591) = *(_BYTE *)(v186 + 1905);
  *(_BYTE *)(v186 + 592) = 0;
  if (*(_BYTE *)(v186 + 591) == 2)
  {
    if (*(_BYTE *)(v186 + 592) == 2)
    {
      v159 = 1;
      goto LABEL_21;
    }
    goto LABEL_23;
  }
  outlined init with copy of Bool?((_BYTE *)(v186 + 591), (_BYTE *)(v186 + 595));
  if (*(_BYTE *)(v186 + 592) == 2)
  {
LABEL_23:
    v159 = 0;
    goto LABEL_21;
  }
  v159 = (*(_BYTE *)(v186 + 595) & 1) == (*(_BYTE *)(v186 + 592) & 1);
LABEL_21:
  if (!v159)
    goto LABEL_25;
  v90 = *(void (**)(uint64_t, uint64_t, uint64_t))(v186 + 1576);
  v20 = *(_QWORD *)(v186 + 1520);
  v89 = *(_QWORD *)(v186 + 1456);
  v88 = Logger.wellnessIntents.unsafeMutableAddressor();
  swift_beginAccess();
  v90(v20, v88, v89);
  swift_endAccess();
  v93 = Logger.logObject.getter();
  v92 = static os_log_type_t.debug.getter();
  *(_QWORD *)(v186 + 1216) = 2;
  UnsignedInteger<>.init<A>(_:)();
  v91 = *(_DWORD *)(v186 + 1948);
  v94 = _allocateUninitializedArray<A>(_:)();
  if (os_log_type_enabled(v93, v92))
  {
    v84 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    v83 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    v85 = createStorage<A>(capacity:type:)(0);
    v86 = createStorage<A>(capacity:type:)(0);
    *(_QWORD *)(v186 + 1232) = v84;
    *(_QWORD *)(v186 + 1240) = v85;
    *(_QWORD *)(v186 + 1248) = v86;
    serialize(_:at:)(0, (_BYTE **)(v186 + 1232));
    serialize(_:at:)(0, (_BYTE **)(v186 + 1232));
    *(_QWORD *)(v186 + 1256) = v94;
    v87 = (_QWORD *)swift_task_alloc();
    v87[2] = v186 + 1232;
    v87[3] = v186 + 1240;
    v87[4] = v186 + 1248;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
    lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
    Sequence.forEach(_:)();
    swift_task_dealloc();
    _os_log_impl(&dword_24749F000, v93, v92, "saveWithID: confirmedAsScheduled is true, confirmedAsNeeded is false. No reprompt needed - continuing.", v84, v91);
    destroyStorage<A>(_:count:)(v85, 0, v83);
    destroyStorage<A>(_:count:)(v86, 0, MEMORY[0x24BEE4AD8] + 8);
    MEMORY[0x24957D398](v84, MEMORY[0x24BEE4260]);
  }
  swift_bridgeObjectRelease();
  v77 = *(void (**)(uint64_t, uint64_t))(v186 + 1616);
  v75 = *(_QWORD *)(v186 + 1520);
  v76 = *(_QWORD *)(v186 + 1456);
  v80 = *(_QWORD *)(v186 + 1328);
  v79 = *(_QWORD *)(v186 + 1320);

  v77(v75, v76);
  v78 = *(_QWORD *)(v186 + 624);
  swift_bridgeObjectRetain();
  *(_QWORD *)(v186 + 1224) = v78;
  swift_bridgeObjectRetain();
  v81 = swift_task_alloc();
  *(_QWORD *)(v81 + 16) = v79;
  *(_QWORD *)(v81 + 24) = v80;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [HKMedicationExposableDoseEvent]);
  lazy protocol witness table accessor for type [HKMedicationExposableDoseEvent] and conformance [A]();
  v82 = _ArrayProtocol.filter(_:)();
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v186 + 632) = v82;
  swift_bridgeObjectRelease();
  v49 = *(void (**)(uint64_t, uint64_t, uint64_t))(v186 + 1576);
  v21 = *(_QWORD *)(v186 + 1480);
  v48 = *(_QWORD *)(v186 + 1456);
  v53 = *(_BYTE *)(v186 + 1898);
  v52 = *(_QWORD *)(v186 + 1336);
  v51 = *(_QWORD *)(v186 + 1328);
  v50 = *(_QWORD *)(v186 + 1320);
  v47 = Logger.wellnessIntents.unsafeMutableAddressor();
  swift_beginAccess();
  v49(v21, v47, v48);
  swift_endAccess();
  swift_bridgeObjectRetain();
  v55 = swift_allocObject();
  *(_QWORD *)(v55 + 16) = v50;
  *(_QWORD *)(v55 + 24) = v51;
  swift_bridgeObjectRetain();
  v57 = swift_allocObject();
  *(_QWORD *)(v57 + 16) = v52;
  v59 = swift_allocObject();
  *(_BYTE *)(v59 + 16) = v53 & 1;
  v73 = Logger.logObject.getter();
  v74 = static os_log_type_t.debug.getter();
  *(_QWORD *)(v186 + 832) = 28;
  UnsignedInteger<>.init<A>(_:)();
  v54 = *(_DWORD *)(v186 + 1920);
  v63 = swift_allocObject();
  *(_BYTE *)(v63 + 16) = 32;
  v64 = swift_allocObject();
  *(_BYTE *)(v64 + 16) = 8;
  v56 = swift_allocObject();
  *(_QWORD *)(v56 + 16) = partial apply for implicit closure #4 in LogQuantityIntentHandler.handle(intent:);
  *(_QWORD *)(v56 + 24) = v55;
  v65 = swift_allocObject();
  *(_QWORD *)(v65 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:);
  *(_QWORD *)(v65 + 24) = v56;
  v66 = swift_allocObject();
  *(_BYTE *)(v66 + 16) = 32;
  v67 = swift_allocObject();
  *(_BYTE *)(v67 + 16) = 8;
  v58 = swift_allocObject();
  *(_QWORD *)(v58 + 16) = partial apply for implicit closure #2 in SpecificMedicationsPersistor.saveWithID(scheduleID:medicationIDs:medStatus:dosage:dosageUnit:confirmedAsNeeded:confirmedAsScheduled:);
  *(_QWORD *)(v58 + 24) = v57;
  v68 = swift_allocObject();
  *(_QWORD *)(v68 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:);
  *(_QWORD *)(v68 + 24) = v58;
  v69 = swift_allocObject();
  *(_BYTE *)(v69 + 16) = 0;
  v70 = swift_allocObject();
  *(_BYTE *)(v70 + 16) = 4;
  v60 = swift_allocObject();
  *(_QWORD *)(v60 + 16) = partial apply for implicit closure #5 in LogSpecificMedicationsIntentHandler.handle(intent:);
  *(_QWORD *)(v60 + 24) = v59;
  v61 = swift_allocObject();
  *(_QWORD *)(v61 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:format:privacy:);
  *(_QWORD *)(v61 + 24) = v60;
  v62 = swift_allocObject();
  *(_QWORD *)(v62 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:);
  *(_QWORD *)(v62 + 24) = v61;
  v71 = swift_allocObject();
  *(_QWORD *)(v71 + 16) = partial apply for thunk for @escaping @callee_guaranteed () -> (@unowned Int32);
  *(_QWORD *)(v71 + 24) = v62;
  _allocateUninitializedArray<A>(_:)();
  v72 = v22;
  swift_retain();
  *v72 = partial apply for closure #1 in OSLogArguments.append(_:);
  v72[1] = v63;
  swift_retain();
  v72[2] = partial apply for closure #1 in OSLogArguments.append(_:);
  v72[3] = v64;
  swift_retain();
  v72[4] = partial apply for closure #1 in OSLogArguments.append(_:);
  v72[5] = v65;
  swift_retain();
  v72[6] = partial apply for closure #1 in OSLogArguments.append(_:);
  v72[7] = v66;
  swift_retain();
  v72[8] = partial apply for closure #1 in OSLogArguments.append(_:);
  v72[9] = v67;
  swift_retain();
  v72[10] = partial apply for closure #1 in OSLogArguments.append(_:);
  v72[11] = v68;
  swift_retain();
  v72[12] = partial apply for closure #1 in OSLogArguments.append(_:);
  v72[13] = v69;
  swift_retain();
  v72[14] = partial apply for closure #1 in OSLogArguments.append(_:);
  v72[15] = v70;
  swift_retain();
  v72[16] = _s2os14OSLogArgumentsV6appendyyxycs17FixedWidthIntegerRzlFySpys5UInt8VGz_SpySo8NSObjectCSgGSgzSpyypGSgztcfU_TA_0;
  v72[17] = v71;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(v73, v74))
  {
    v44 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    v43 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    v45 = createStorage<A>(capacity:type:)(0);
    v46 = createStorage<A>(capacity:type:)(2);
    v193 = v44;
    v194 = v45;
    v195 = v46;
    serialize(_:at:)(2, &v193);
    serialize(_:at:)(3, &v193);
    v196 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v197 = v63;
    closure #1 in osLogInternal(_:log:type:)(&v196, (uint64_t)&v193, (uint64_t)&v194, (uint64_t)&v195);
    v196 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v197 = v64;
    closure #1 in osLogInternal(_:log:type:)(&v196, (uint64_t)&v193, (uint64_t)&v194, (uint64_t)&v195);
    v196 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v197 = v65;
    closure #1 in osLogInternal(_:log:type:)(&v196, (uint64_t)&v193, (uint64_t)&v194, (uint64_t)&v195);
    v196 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v197 = v66;
    closure #1 in osLogInternal(_:log:type:)(&v196, (uint64_t)&v193, (uint64_t)&v194, (uint64_t)&v195);
    v196 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v197 = v67;
    closure #1 in osLogInternal(_:log:type:)(&v196, (uint64_t)&v193, (uint64_t)&v194, (uint64_t)&v195);
    v196 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v197 = v68;
    closure #1 in osLogInternal(_:log:type:)(&v196, (uint64_t)&v193, (uint64_t)&v194, (uint64_t)&v195);
    v196 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v197 = v69;
    closure #1 in osLogInternal(_:log:type:)(&v196, (uint64_t)&v193, (uint64_t)&v194, (uint64_t)&v195);
    v196 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v197 = v70;
    closure #1 in osLogInternal(_:log:type:)(&v196, (uint64_t)&v193, (uint64_t)&v194, (uint64_t)&v195);
    v196 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))_s2os14OSLogArgumentsV6appendyyxycs17FixedWidthIntegerRzlFySpys5UInt8VGz_SpySo8NSObjectCSgGSgzSpyypGSgztcfU_TA_0;
    v197 = v71;
    closure #1 in osLogInternal(_:log:type:)(&v196, (uint64_t)&v193, (uint64_t)&v194, (uint64_t)&v195);
    _os_log_impl(&dword_24749F000, v73, v74, "Calling writeDoseEvent() for specified scheduleID (%s) and potentially medicationID (%s) with medStatus: %{BOOL}d", v44, v54);
    destroyStorage<A>(_:count:)(v45, 0, v43);
    destroyStorage<A>(_:count:)(v46, 2, MEMORY[0x24BEE4AD8] + 8);
    MEMORY[0x24957D398](v44, MEMORY[0x24BEE4260]);
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
  }
  v39 = *(void (**)(uint64_t, uint64_t))(v186 + 1616);
  v37 = *(_QWORD *)(v186 + 1480);
  v38 = *(_QWORD *)(v186 + 1456);
  v40 = *(id *)(v186 + 1376);
  v42 = *(_QWORD *)(v186 + 1336);

  v39(v37, v38);
  v23 = v40;
  v41 = *(_QWORD *)(v186 + 632);
  *(_QWORD *)(v186 + 1872) = v41;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v42)
  {
    v32 = *(_QWORD *)(v186 + 1336);
    swift_bridgeObjectRetain();
    *(_QWORD *)(v186 + 840) = v32;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    lazy protocol witness table accessor for type [String] and conformance [A]();
    Collection.first.getter();
    outlined destroy of [HKQuantityType]();
    v33 = *(_QWORD *)(v186 + 480);
    v34 = *(_QWORD *)(v186 + 488);
    swift_bridgeObjectRelease();
    v35 = v33;
    v36 = v34;
  }
  else
  {
    v35 = 0;
    v36 = 0;
  }
  *(_QWORD *)(v186 + 464) = v35;
  *(_QWORD *)(v186 + 472) = v36;
  v31 = *(_QWORD *)(v186 + 472) != 0;
  v30 = *(_BYTE *)(v186 + 1899);
  outlined destroy of String.UTF8View();
  v24 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v186 + 1880) = v24;
  *v24 = *(_QWORD *)(v186 + 600);
  v24[1] = SpecificMedicationsPersistor.saveWithID(scheduleID:medicationIDs:medStatus:dosage:dosageUnit:confirmedAsNeeded:confirmedAsScheduled:);
  v25 = *(_QWORD *)(v186 + 1376);
  v26 = *(_QWORD *)(v186 + 1360);
  v27 = *(_QWORD *)(v186 + 1352);
  v28 = *(_QWORD *)(v186 + 1344);
  v29 = *(_BYTE *)(v186 + 1898);
  v202 = *(_QWORD *)(v186 + 1368);
  v203 = v25;
  return SpecificMedicationsPersistor.writeDoseEvent(medicationController:doseEvents:medStatusTaken:medicationIDPresent:dosage:dosageUnit:)(v25, v41, v29 & 1, v31, v28, v30 & 1, v27, v26);
}

{
  _QWORD *v0;
  void *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = (void *)v0[212];
  v5 = v0[181];
  v3 = v0[180];
  v4 = v0[179];
  v0[75] = v0;

  swift_bridgeObjectRelease();
  outlined destroy of [HKQuantityType]();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v5, v4);
  v6 = v0[216];
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(v0[75] + 8))(v6);
}

{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t);
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint8_t *buf;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(uint64_t, uint64_t, uint64_t);
  uint32_t v22;
  os_log_type_t v23;
  NSObject *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v1 = *(_QWORD *)(v0 + 1752);
  *(_QWORD *)(v0 + 600) = v0;
  if (v1)
  {
    v26 = *(_QWORD *)(v27 + 1736);

    v2 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v27 + 1760) = v2;
    *v2 = *(_QWORD *)(v27 + 600);
    v2[1] = SpecificMedicationsPersistor.saveWithID(scheduleID:medicationIDs:medStatus:dosage:dosageUnit:confirmedAsNeeded:confirmedAsScheduled:);
    return SpecificMedicationsPersistor.buildConfirmationForScheduledOrAsNeeded(doseEvent:requestedMedStatus:)(v26, *(_BYTE *)(v27 + 1898) & 1, *(_QWORD *)(v27 + 1368), *(_QWORD *)(v27 + 1376));
  }
  v21 = *(void (**)(uint64_t, uint64_t, uint64_t))(v27 + 1576);
  v4 = *(_QWORD *)(v27 + 1536);
  v20 = *(_QWORD *)(v27 + 1456);
  v19 = Logger.wellnessIntents.unsafeMutableAddressor();
  swift_beginAccess();
  v21(v4, v19, v20);
  swift_endAccess();
  v24 = Logger.logObject.getter();
  v23 = static os_log_type_t.debug.getter();
  *(_QWORD *)(v27 + 1072) = 2;
  UnsignedInteger<>.init<A>(_:)();
  v22 = *(_DWORD *)(v27 + 1936);
  v25 = _allocateUninitializedArray<A>(_:)();
  if (!os_log_type_enabled(v24, v23))
  {
    swift_bridgeObjectRelease();
    goto LABEL_8;
  }
  v5 = *(_QWORD *)(v27 + 1640);
  buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
  v16 = createStorage<A>(capacity:type:)(0);
  v17 = createStorage<A>(capacity:type:)(0);
  *(_QWORD *)(v27 + 1080) = buf;
  *(_QWORD *)(v27 + 1088) = v16;
  *(_QWORD *)(v27 + 1096) = v17;
  serialize(_:at:)(0, (_BYTE **)(v27 + 1080));
  serialize(_:at:)(0, (_BYTE **)(v27 + 1080));
  *(_QWORD *)(v27 + 1104) = v25;
  v18 = (_QWORD *)swift_task_alloc();
  v18[2] = v27 + 1080;
  v18[3] = v27 + 1088;
  v18[4] = v27 + 1096;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
  lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
  result = Sequence.forEach(_:)();
  if (!v5)
  {
    swift_task_dealloc();
    _os_log_impl(&dword_24749F000, v24, v23, "Got a complex med request wrt dosage/dosageUnit in first turn, skipping confirmAsScheduled & punching out.", buf, v22);
    destroyStorage<A>(_:count:)(v16, 0, v14);
    destroyStorage<A>(_:count:)(v17, 0, MEMORY[0x24BEE4AD8] + 8);
    MEMORY[0x24957D398](buf, MEMORY[0x24BEE4260]);
    swift_bridgeObjectRelease();
LABEL_8:
    v8 = *(void (**)(uint64_t, uint64_t))(v27 + 1616);
    v6 = *(_QWORD *)(v27 + 1536);
    v7 = *(_QWORD *)(v27 + 1456);
    v12 = *(_QWORD *)(v27 + 1448);
    v10 = *(_QWORD *)(v27 + 1440);
    v11 = *(_QWORD *)(v27 + 1432);
    v9 = *(id *)(v27 + 1736);

    v8(v6, v7);
    type metadata accessor for LogSpecificMedicationsIntentResponse();
    v13 = LogSpecificMedicationsIntentResponse.__allocating_init(code:userActivity:)(112, 0);

    swift_bridgeObjectRelease();
    outlined destroy of [HKQuantityType]();
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v12, v11);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(char *))(*(_QWORD *)(v27 + 600) + 8))(v13);
  }
  return result;
}

{
  _QWORD *v0;
  void *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = (void *)v0[217];
  v5 = v0[181];
  v3 = v0[180];
  v4 = v0[179];
  v0[75] = v0;

  swift_bridgeObjectRelease();
  outlined destroy of [HKQuantityType]();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v5, v4);
  v6 = v0[221];
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(v0[75] + 8))(v6);
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  id v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  char v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(uint64_t, uint64_t);
  id v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint8_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(uint64_t, uint64_t);
  uint64_t v43;
  uint64_t v44;
  void (*v45)(uint64_t, uint64_t, uint64_t);
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  uint32_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  NSObject *v69;
  os_log_type_t v70;
  uint64_t v71;
  uint8_t *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  void (*v77)(uint64_t, uint64_t, uint64_t);
  uint64_t v78;
  uint32_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  NSObject *v86;
  os_log_type_t v87;
  uint64_t v88;
  Class v89;
  id v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  void (*v96)(uint64_t, uint64_t);
  char *v97;
  uint64_t v98;
  uint64_t v99;
  uint8_t *v100;
  uint64_t v101;
  uint64_t v102;
  _QWORD *v103;
  uint64_t v104;
  uint64_t v105;
  void (*v106)(uint64_t, uint64_t, uint64_t);
  uint32_t v107;
  os_log_type_t v108;
  NSObject *log;
  uint64_t v110;
  uint64_t v111;
  char v112;
  Class isa;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  char *v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  void (*v121)(uint64_t, uint64_t);
  uint64_t v122;
  uint64_t v123;
  uint8_t *v124;
  uint64_t v125;
  uint64_t v126;
  _QWORD *v127;
  uint64_t v128;
  uint64_t v129;
  void (*v130)(uint64_t, uint64_t, uint64_t);
  uint32_t size;
  os_log_type_t v132;
  NSObject *oslog;
  uint64_t v134;
  Swift::Bool v135;
  Swift::Bool v136;
  uint64_t v137;
  uint64_t v138;
  void (*v139)(uint64_t, uint64_t);
  uint64_t v140;
  uint8_t *buf;
  uint64_t v142;
  uint64_t v143;
  _QWORD *v144;
  uint64_t v145;
  uint64_t v146;
  void (*v147)(uint64_t, uint64_t, uint64_t);
  uint32_t v148;
  os_log_type_t v149;
  NSObject *v150;
  uint64_t v151;
  Swift::Bool v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  Swift::OpaquePointer v158;
  uint8_t *v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t (*v162)(uint64_t, uint64_t, uint64_t);
  uint64_t v163;
  uint8_t *v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t (*v167)(uint64_t, uint64_t, uint64_t);
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;

  v1 = v0[224];
  v154 = v0[223];
  v156 = v0[166];
  v155 = v0[165];
  v0[75] = v0;
  swift_bridgeObjectRetain();
  v0[80] = v154;
  v0[87] = v154;
  swift_bridgeObjectRetain();
  v157 = swift_task_alloc();
  *(_QWORD *)(v157 + 16) = v155;
  *(_QWORD *)(v157 + 24) = v156;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [HKMedicationExposableDoseEvent]);
  lazy protocol witness table accessor for type [HKMedicationExposableDoseEvent] and conformance [A]();
  result = _ArrayProtocol.filter(_:)();
  v158._rawValue = (void *)result;
  if (v1)
    return result;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  *(Swift::OpaquePointer *)(v153 + 640) = v158;
  swift_bridgeObjectRelease();
  *(_QWORD *)(v153 + 632) = _allocateUninitializedArray<A>(_:)();
  v152 = allDoseEventsAreUnlogged(doseEvents:)(v158);
  swift_bridgeObjectRelease();
  if (v152)
  {
    v147 = *(void (**)(uint64_t, uint64_t, uint64_t))(v153 + 1576);
    v3 = *(_QWORD *)(v153 + 1512);
    v146 = *(_QWORD *)(v153 + 1456);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v145 = Logger.wellnessIntents.unsafeMutableAddressor();
    swift_beginAccess();
    v147(v3, v145, v146);
    swift_endAccess();
    v150 = Logger.logObject.getter();
    v149 = static os_log_type_t.debug.getter();
    *(_QWORD *)(v153 + 944) = 2;
    UnsignedInteger<>.init<A>(_:)();
    v148 = *(_DWORD *)(v153 + 1928);
    v151 = _allocateUninitializedArray<A>(_:)();
    if (os_log_type_enabled(v150, v149))
    {
      buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      v140 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      v142 = createStorage<A>(capacity:type:)(0);
      v143 = createStorage<A>(capacity:type:)(0);
      *(_QWORD *)(v153 + 960) = buf;
      *(_QWORD *)(v153 + 968) = v142;
      *(_QWORD *)(v153 + 976) = v143;
      serialize(_:at:)(0, (_BYTE **)(v153 + 960));
      serialize(_:at:)(0, (_BYTE **)(v153 + 960));
      *(_QWORD *)(v153 + 984) = v151;
      v144 = (_QWORD *)swift_task_alloc();
      v144[2] = v153 + 960;
      v144[3] = v153 + 968;
      v144[4] = v153 + 976;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
      lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
      Sequence.forEach(_:)();
      swift_task_dealloc();
      _os_log_impl(&dword_24749F000, v150, v149, "All dose events in group are unlogged, continuing to write", buf, v148);
      destroyStorage<A>(_:count:)(v142, 0, v140);
      destroyStorage<A>(_:count:)(v143, 0, MEMORY[0x24BEE4AD8] + 8);
      MEMORY[0x24957D398](buf, MEMORY[0x24BEE4260]);
    }
    swift_bridgeObjectRelease();
    v139 = *(void (**)(uint64_t, uint64_t))(v153 + 1616);
    v137 = *(_QWORD *)(v153 + 1512);
    v138 = *(_QWORD *)(v153 + 1456);

    v139(v137, v138);
    *(Swift::OpaquePointer *)(v153 + 952) = v158;
    lazy protocol witness table accessor for type [HKMedicationExposableDoseEvent] and conformance [A]();
    Array.append<A>(contentsOf:)();
    goto LABEL_21;
  }
  swift_bridgeObjectRelease();
  v136 = allLoggedWithMixedStatus(doseEvents:)(v158);
  swift_bridgeObjectRelease();
  if (v136)
  {
    swift_bridgeObjectRelease();
LABEL_9:
    v130 = *(void (**)(uint64_t, uint64_t, uint64_t))(v153 + 1576);
    v4 = *(_QWORD *)(v153 + 1504);
    v129 = *(_QWORD *)(v153 + 1456);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v128 = Logger.wellnessIntents.unsafeMutableAddressor();
    swift_beginAccess();
    v130(v4, v128, v129);
    swift_endAccess();
    oslog = Logger.logObject.getter();
    v132 = static os_log_type_t.debug.getter();
    *(_QWORD *)(v153 + 848) = 2;
    UnsignedInteger<>.init<A>(_:)();
    size = *(_DWORD *)(v153 + 1924);
    v134 = _allocateUninitializedArray<A>(_:)();
    if (os_log_type_enabled(oslog, v132))
    {
      v124 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      v123 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      v125 = createStorage<A>(capacity:type:)(0);
      v126 = createStorage<A>(capacity:type:)(0);
      *(_QWORD *)(v153 + 912) = v124;
      *(_QWORD *)(v153 + 920) = v125;
      *(_QWORD *)(v153 + 928) = v126;
      serialize(_:at:)(0, (_BYTE **)(v153 + 912));
      serialize(_:at:)(0, (_BYTE **)(v153 + 912));
      *(_QWORD *)(v153 + 936) = v134;
      v127 = (_QWORD *)swift_task_alloc();
      v127[2] = v153 + 912;
      v127[3] = v153 + 920;
      v127[4] = v153 + 928;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
      lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
      Sequence.forEach(_:)();
      swift_task_dealloc();
      _os_log_impl(&dword_24749F000, oslog, v132, "Calling either allLoggedWithMixedStatus or oneExistingStatusWithConflictingRequest", v124, size);
      destroyStorage<A>(_:count:)(v125, 0, v123);
      destroyStorage<A>(_:count:)(v126, 0, MEMORY[0x24BEE4AD8] + 8);
      MEMORY[0x24957D398](v124, MEMORY[0x24BEE4260]);
    }
    swift_bridgeObjectRelease();
    v121 = *(void (**)(uint64_t, uint64_t))(v153 + 1616);
    v119 = *(_QWORD *)(v153 + 1504);
    v120 = *(_QWORD *)(v153 + 1456);

    v121(v119, v120);
    *(_QWORD *)(v153 + 1800) = type metadata accessor for MatchedMedName();
    *(_QWORD *)(v153 + 856) = _allocateUninitializedArray<A>(_:)();
    *(Swift::OpaquePointer *)(v153 + 864) = v158;
    lazy protocol witness table accessor for type [HKMedicationExposableDoseEvent] and conformance [A]();
    Collection<>.makeIterator()();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<[HKMedicationExposableDoseEvent]>);
    IndexingIterator.next()();
    v122 = *(_QWORD *)(v153 + 872);
    *(_QWORD *)(v153 + 1808) = v122;
    if (v122)
    {
      *(_QWORD *)(v153 + 888) = v122;
      v5 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v153 + 1816) = v5;
      *v5 = *(_QWORD *)(v153 + 600);
      v5[1] = SpecificMedicationsPersistor.saveWithID(scheduleID:medicationIDs:medStatus:dosage:dosageUnit:confirmedAsNeeded:confirmedAsScheduled:);
      return SpecificMedicationsPersistor.buildMatchedMedName(from:shouldIncludeAsNeededParams:)(v122, 1, *(_QWORD *)(v153 + 1368), *(_QWORD *)(v153 + 1376));
    }
    v116 = *(_QWORD *)(v153 + 1448);
    v114 = *(_QWORD *)(v153 + 1440);
    v115 = *(_QWORD *)(v153 + 1432);
    outlined destroy of [HKQuantityType]();
    type metadata accessor for LogSpecificMedicationsIntentResponse();
    v117 = LogSpecificMedicationsIntentResponse.__allocating_init(code:userActivity:)(110, 0);
    v6 = v117;
    v7 = v117;
    *(_QWORD *)(v153 + 880) = v117;
    swift_bridgeObjectRetain();
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v117, sel_setMatchingMeds_, isa);

    outlined destroy of [HKQuantityType]();
    outlined destroy of [HKQuantityType]();
    outlined destroy of [HKQuantityType]();
    outlined destroy of [HKQuantityType]();
    (*(void (**)(uint64_t, uint64_t))(v114 + 8))(v116, v115);
    v118 = v117;
LABEL_31:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(char *))(*(_QWORD *)(v153 + 600) + 8))(v118);
  }
  v135 = oneExistingStatusWithConflictingRequest(doseEvents:requestedStatus:)(v158, *(_BYTE *)(v153 + 1898) & 1);
  swift_bridgeObjectRelease();
  if (v135)
    goto LABEL_9;
  swift_bridgeObjectRelease();
  v111 = getUnloggedDoseEvents(doseEvents:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  *(_QWORD *)(v153 + 704) = v111;
  lazy protocol witness table accessor for type [HKMedicationExposableDoseEvent] and conformance [A]();
  v112 = Collection.isEmpty.getter();
  outlined destroy of [HKQuantityType]();
  swift_bridgeObjectRelease();
  if ((v112 & 1) != 0)
  {
    v106 = *(void (**)(uint64_t, uint64_t, uint64_t))(v153 + 1576);
    v8 = *(_QWORD *)(v153 + 1496);
    v105 = *(_QWORD *)(v153 + 1456);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v104 = Logger.wellnessIntents.unsafeMutableAddressor();
    swift_beginAccess();
    v106(v8, v104, v105);
    swift_endAccess();
    log = Logger.logObject.getter();
    v108 = static os_log_type_t.debug.getter();
    *(_QWORD *)(v153 + 712) = 2;
    UnsignedInteger<>.init<A>(_:)();
    v107 = *(_DWORD *)(v153 + 1908);
    v110 = _allocateUninitializedArray<A>(_:)();
    if (os_log_type_enabled(log, v108))
    {
      v100 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      v99 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      v101 = createStorage<A>(capacity:type:)(0);
      v102 = createStorage<A>(capacity:type:)(0);
      *(_QWORD *)(v153 + 776) = v100;
      *(_QWORD *)(v153 + 784) = v101;
      *(_QWORD *)(v153 + 792) = v102;
      serialize(_:at:)(0, (_BYTE **)(v153 + 776));
      serialize(_:at:)(0, (_BYTE **)(v153 + 776));
      *(_QWORD *)(v153 + 800) = v110;
      v103 = (_QWORD *)swift_task_alloc();
      v103[2] = v153 + 776;
      v103[3] = v153 + 784;
      v103[4] = v153 + 792;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
      lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
      Sequence.forEach(_:)();
      swift_task_dealloc();
      _os_log_impl(&dword_24749F000, log, v108, "allMedsLoggedAlready, returning code .allMedsLoggedAlready", v100, v107);
      destroyStorage<A>(_:count:)(v101, 0, v99);
      destroyStorage<A>(_:count:)(v102, 0, MEMORY[0x24BEE4AD8] + 8);
      MEMORY[0x24957D398](v100, MEMORY[0x24BEE4260]);
    }
    swift_bridgeObjectRelease();
    v96 = *(void (**)(uint64_t, uint64_t))(v153 + 1616);
    v94 = *(_QWORD *)(v153 + 1496);
    v95 = *(_QWORD *)(v153 + 1456);

    v96(v94, v95);
    type metadata accessor for LogSpecificMedicationsIntentResponse();
    v97 = LogSpecificMedicationsIntentResponse.__allocating_init(code:userActivity:)(111, 0);
    *(_QWORD *)(v153 + 1832) = v97;
    v9 = v97;
    v10 = v97;
    *(_QWORD *)(v153 + 720) = v97;
    *(_QWORD *)(v153 + 1840) = type metadata accessor for MatchedMedName();
    *(_QWORD *)(v153 + 728) = _allocateUninitializedArray<A>(_:)();
    *(Swift::OpaquePointer *)(v153 + 736) = v158;
    Collection<>.makeIterator()();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<[HKMedicationExposableDoseEvent]>);
    IndexingIterator.next()();
    v98 = *(_QWORD *)(v153 + 744);
    *(_QWORD *)(v153 + 1848) = v98;
    if (v98)
    {
      *(_QWORD *)(v153 + 752) = v98;
      v11 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v153 + 1856) = v11;
      *v11 = *(_QWORD *)(v153 + 600);
      v11[1] = SpecificMedicationsPersistor.saveWithID(scheduleID:medicationIDs:medStatus:dosage:dosageUnit:confirmedAsNeeded:confirmedAsScheduled:);
      return SpecificMedicationsPersistor.buildMatchedMedName(from:shouldIncludeAsNeededParams:)(v98, 1, *(_QWORD *)(v153 + 1368), *(_QWORD *)(v153 + 1376));
    }
    v90 = *(id *)(v153 + 1832);
    v93 = *(_QWORD *)(v153 + 1448);
    v91 = *(_QWORD *)(v153 + 1440);
    v92 = *(_QWORD *)(v153 + 1432);
    outlined destroy of [HKQuantityType]();
    swift_bridgeObjectRetain();
    v89 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v90, sel_setMatchingMeds_, v89);

    outlined destroy of [HKQuantityType]();
    outlined destroy of [HKQuantityType]();
    outlined destroy of [HKQuantityType]();
    outlined destroy of [HKQuantityType]();
    (*(void (**)(uint64_t, uint64_t))(v91 + 8))(v93, v92);
    v118 = *(char **)(v153 + 1832);
    goto LABEL_31;
  }
  swift_bridgeObjectRelease();
  v88 = getUnloggedDoseEvents(doseEvents:)();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v153 + 808) = v88;
  swift_bridgeObjectRetain();
  *(_QWORD *)(v153 + 816) = v88;
  lazy protocol witness table accessor for type [HKMedicationExposableDoseEvent] and conformance [A]();
  Array.append<A>(contentsOf:)();
  swift_bridgeObjectRelease();
LABEL_21:
  v78 = *(_QWORD *)(v153 + 1632);
  v77 = *(void (**)(uint64_t, uint64_t, uint64_t))(v153 + 1576);
  v12 = *(_QWORD *)(v153 + 1488);
  v76 = *(_QWORD *)(v153 + 1456);
  v75 = Logger.wellnessIntents.unsafeMutableAddressor();
  swift_beginAccess();
  v77(v12, v75, v76);
  swift_endAccess();
  v80 = swift_allocObject();
  *(_QWORD *)(v80 + 16) = v78;
  v86 = Logger.logObject.getter();
  v87 = static os_log_type_t.debug.getter();
  *(_QWORD *)(v153 + 824) = 12;
  UnsignedInteger<>.init<A>(_:)();
  v79 = *(_DWORD *)(v153 + 1916);
  v82 = swift_allocObject();
  *(_BYTE *)(v82 + 16) = 0;
  v83 = swift_allocObject();
  *(_BYTE *)(v83 + 16) = 8;
  v81 = swift_allocObject();
  *(_QWORD *)(v81 + 16) = partial apply for specialized implicit closure #10 in SpecificMedicationsPersistor.writeDoseEvent(medicationController:doseEvents:medStatusTaken:medicationIDPresent:dosage:dosageUnit:);
  *(_QWORD *)(v81 + 24) = v80;
  v84 = swift_allocObject();
  *(_QWORD *)(v84 + 16) = partial apply for thunk for @escaping @callee_guaranteed () -> (@unowned Int);
  *(_QWORD *)(v84 + 24) = v81;
  _allocateUninitializedArray<A>(_:)();
  v85 = v13;
  swift_retain();
  *v85 = partial apply for closure #1 in OSLogArguments.append(_:);
  v85[1] = v82;
  swift_retain();
  v85[2] = partial apply for closure #1 in OSLogArguments.append(_:);
  v85[3] = v83;
  swift_retain();
  v85[4] = partial apply for closure #1 in OSLogArguments.append<A>(_:);
  v85[5] = v84;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(v86, v87))
  {
    v72 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    v71 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    v73 = createStorage<A>(capacity:type:)(0);
    v74 = createStorage<A>(capacity:type:)(0);
    v164 = v72;
    v165 = v73;
    v166 = v74;
    serialize(_:at:)(0, &v164);
    serialize(_:at:)(1, &v164);
    v167 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v168 = v82;
    closure #1 in osLogInternal(_:log:type:)(&v167, (uint64_t)&v164, (uint64_t)&v165, (uint64_t)&v166);
    v167 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v168 = v83;
    closure #1 in osLogInternal(_:log:type:)(&v167, (uint64_t)&v164, (uint64_t)&v165, (uint64_t)&v166);
    v167 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append<A>(_:);
    v168 = v84;
    closure #1 in osLogInternal(_:log:type:)(&v167, (uint64_t)&v164, (uint64_t)&v165, (uint64_t)&v166);
    _os_log_impl(&dword_24749F000, v86, v87, "saveWithID, medicationIDs not provided: appended %ld doseEvents", v72, v79);
    destroyStorage<A>(_:count:)(v73, 0, v71);
    destroyStorage<A>(_:count:)(v74, 0, MEMORY[0x24BEE4AD8] + 8);
    MEMORY[0x24957D398](v72, MEMORY[0x24BEE4260]);
    swift_release();
    swift_release();
    swift_release();
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
  }
  v42 = *(void (**)(uint64_t, uint64_t))(v153 + 1616);
  v40 = *(_QWORD *)(v153 + 1488);
  v41 = *(_QWORD *)(v153 + 1456);

  v42(v40, v41);
  outlined destroy of [HKQuantityType]();
  v45 = *(void (**)(uint64_t, uint64_t, uint64_t))(v153 + 1576);
  v14 = *(_QWORD *)(v153 + 1480);
  v44 = *(_QWORD *)(v153 + 1456);
  v49 = *(_BYTE *)(v153 + 1898);
  v48 = *(_QWORD *)(v153 + 1336);
  v47 = *(_QWORD *)(v153 + 1328);
  v46 = *(_QWORD *)(v153 + 1320);
  v43 = Logger.wellnessIntents.unsafeMutableAddressor();
  swift_beginAccess();
  v45(v14, v43, v44);
  swift_endAccess();
  swift_bridgeObjectRetain();
  v51 = swift_allocObject();
  *(_QWORD *)(v51 + 16) = v46;
  *(_QWORD *)(v51 + 24) = v47;
  swift_bridgeObjectRetain();
  v53 = swift_allocObject();
  *(_QWORD *)(v53 + 16) = v48;
  v55 = swift_allocObject();
  *(_BYTE *)(v55 + 16) = v49 & 1;
  v69 = Logger.logObject.getter();
  v70 = static os_log_type_t.debug.getter();
  *(_QWORD *)(v153 + 832) = 28;
  UnsignedInteger<>.init<A>(_:)();
  v50 = *(_DWORD *)(v153 + 1920);
  v59 = swift_allocObject();
  *(_BYTE *)(v59 + 16) = 32;
  v60 = swift_allocObject();
  *(_BYTE *)(v60 + 16) = 8;
  v52 = swift_allocObject();
  *(_QWORD *)(v52 + 16) = partial apply for implicit closure #4 in LogQuantityIntentHandler.handle(intent:);
  *(_QWORD *)(v52 + 24) = v51;
  v61 = swift_allocObject();
  *(_QWORD *)(v61 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:);
  *(_QWORD *)(v61 + 24) = v52;
  v62 = swift_allocObject();
  *(_BYTE *)(v62 + 16) = 32;
  v63 = swift_allocObject();
  *(_BYTE *)(v63 + 16) = 8;
  v54 = swift_allocObject();
  *(_QWORD *)(v54 + 16) = partial apply for implicit closure #2 in SpecificMedicationsPersistor.saveWithID(scheduleID:medicationIDs:medStatus:dosage:dosageUnit:confirmedAsNeeded:confirmedAsScheduled:);
  *(_QWORD *)(v54 + 24) = v53;
  v64 = swift_allocObject();
  *(_QWORD *)(v64 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:);
  *(_QWORD *)(v64 + 24) = v54;
  v65 = swift_allocObject();
  *(_BYTE *)(v65 + 16) = 0;
  v66 = swift_allocObject();
  *(_BYTE *)(v66 + 16) = 4;
  v56 = swift_allocObject();
  *(_QWORD *)(v56 + 16) = partial apply for implicit closure #5 in LogSpecificMedicationsIntentHandler.handle(intent:);
  *(_QWORD *)(v56 + 24) = v55;
  v57 = swift_allocObject();
  *(_QWORD *)(v57 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:format:privacy:);
  *(_QWORD *)(v57 + 24) = v56;
  v58 = swift_allocObject();
  *(_QWORD *)(v58 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:);
  *(_QWORD *)(v58 + 24) = v57;
  v67 = swift_allocObject();
  *(_QWORD *)(v67 + 16) = partial apply for thunk for @escaping @callee_guaranteed () -> (@unowned Int32);
  *(_QWORD *)(v67 + 24) = v58;
  _allocateUninitializedArray<A>(_:)();
  v68 = v15;
  swift_retain();
  *v68 = partial apply for closure #1 in OSLogArguments.append(_:);
  v68[1] = v59;
  swift_retain();
  v68[2] = partial apply for closure #1 in OSLogArguments.append(_:);
  v68[3] = v60;
  swift_retain();
  v68[4] = partial apply for closure #1 in OSLogArguments.append(_:);
  v68[5] = v61;
  swift_retain();
  v68[6] = partial apply for closure #1 in OSLogArguments.append(_:);
  v68[7] = v62;
  swift_retain();
  v68[8] = partial apply for closure #1 in OSLogArguments.append(_:);
  v68[9] = v63;
  swift_retain();
  v68[10] = partial apply for closure #1 in OSLogArguments.append(_:);
  v68[11] = v64;
  swift_retain();
  v68[12] = partial apply for closure #1 in OSLogArguments.append(_:);
  v68[13] = v65;
  swift_retain();
  v68[14] = partial apply for closure #1 in OSLogArguments.append(_:);
  v68[15] = v66;
  swift_retain();
  v68[16] = _s2os14OSLogArgumentsV6appendyyxycs17FixedWidthIntegerRzlFySpys5UInt8VGz_SpySo8NSObjectCSgGSgzSpyypGSgztcfU_TA_0;
  v68[17] = v67;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(v69, v70))
  {
    v37 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    v38 = createStorage<A>(capacity:type:)(0);
    v39 = createStorage<A>(capacity:type:)(2);
    v159 = v37;
    v160 = v38;
    v161 = v39;
    serialize(_:at:)(2, &v159);
    serialize(_:at:)(3, &v159);
    v162 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v163 = v59;
    closure #1 in osLogInternal(_:log:type:)(&v162, (uint64_t)&v159, (uint64_t)&v160, (uint64_t)&v161);
    v162 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v163 = v60;
    closure #1 in osLogInternal(_:log:type:)(&v162, (uint64_t)&v159, (uint64_t)&v160, (uint64_t)&v161);
    v162 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v163 = v61;
    closure #1 in osLogInternal(_:log:type:)(&v162, (uint64_t)&v159, (uint64_t)&v160, (uint64_t)&v161);
    v162 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v163 = v62;
    closure #1 in osLogInternal(_:log:type:)(&v162, (uint64_t)&v159, (uint64_t)&v160, (uint64_t)&v161);
    v162 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v163 = v63;
    closure #1 in osLogInternal(_:log:type:)(&v162, (uint64_t)&v159, (uint64_t)&v160, (uint64_t)&v161);
    v162 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v163 = v64;
    closure #1 in osLogInternal(_:log:type:)(&v162, (uint64_t)&v159, (uint64_t)&v160, (uint64_t)&v161);
    v162 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v163 = v65;
    closure #1 in osLogInternal(_:log:type:)(&v162, (uint64_t)&v159, (uint64_t)&v160, (uint64_t)&v161);
    v162 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v163 = v66;
    closure #1 in osLogInternal(_:log:type:)(&v162, (uint64_t)&v159, (uint64_t)&v160, (uint64_t)&v161);
    v162 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))_s2os14OSLogArgumentsV6appendyyxycs17FixedWidthIntegerRzlFySpys5UInt8VGz_SpySo8NSObjectCSgGSgzSpyypGSgztcfU_TA_0;
    v163 = v67;
    closure #1 in osLogInternal(_:log:type:)(&v162, (uint64_t)&v159, (uint64_t)&v160, (uint64_t)&v161);
    _os_log_impl(&dword_24749F000, v69, v70, "Calling writeDoseEvent() for specified scheduleID (%s) and potentially medicationID (%s) with medStatus: %{BOOL}d", v37, v50);
    destroyStorage<A>(_:count:)(v38, 0, v36);
    destroyStorage<A>(_:count:)(v39, 2, MEMORY[0x24BEE4AD8] + 8);
    MEMORY[0x24957D398](v37, MEMORY[0x24BEE4260]);
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
  }
  v32 = *(void (**)(uint64_t, uint64_t))(v153 + 1616);
  v30 = *(_QWORD *)(v153 + 1480);
  v31 = *(_QWORD *)(v153 + 1456);
  v33 = *(id *)(v153 + 1376);
  v35 = *(_QWORD *)(v153 + 1336);

  v32(v30, v31);
  v16 = v33;
  v34 = *(_QWORD *)(v153 + 632);
  *(_QWORD *)(v153 + 1872) = v34;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v35)
  {
    v25 = *(_QWORD *)(v153 + 1336);
    swift_bridgeObjectRetain();
    *(_QWORD *)(v153 + 840) = v25;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    lazy protocol witness table accessor for type [String] and conformance [A]();
    Collection.first.getter();
    outlined destroy of [HKQuantityType]();
    v26 = *(_QWORD *)(v153 + 480);
    v27 = *(_QWORD *)(v153 + 488);
    swift_bridgeObjectRelease();
    v28 = v26;
    v29 = v27;
  }
  else
  {
    v28 = 0;
    v29 = 0;
  }
  *(_QWORD *)(v153 + 464) = v28;
  *(_QWORD *)(v153 + 472) = v29;
  v24 = *(_QWORD *)(v153 + 472) != 0;
  v23 = *(_BYTE *)(v153 + 1899);
  outlined destroy of String.UTF8View();
  v17 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v153 + 1880) = v17;
  *v17 = *(_QWORD *)(v153 + 600);
  v17[1] = SpecificMedicationsPersistor.saveWithID(scheduleID:medicationIDs:medStatus:dosage:dosageUnit:confirmedAsNeeded:confirmedAsScheduled:);
  v18 = *(_QWORD *)(v153 + 1376);
  v19 = *(_QWORD *)(v153 + 1360);
  v20 = *(_QWORD *)(v153 + 1352);
  v21 = *(_QWORD *)(v153 + 1344);
  v22 = *(_BYTE *)(v153 + 1898);
  v169 = *(_QWORD *)(v153 + 1368);
  v170 = v18;
  return SpecificMedicationsPersistor.writeDoseEvent(medicationController:doseEvents:medStatusTaken:medicationIDPresent:dosage:dosageUnit:)(v18, v34, v22 & 1, v24, v21, v23 & 1, v20, v19);
}

{
  _QWORD *v0;
  id v1;
  _QWORD *v2;
  char *v4;
  char *v5;
  Class isa;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  void *v12;
  void *v13;
  uint64_t v14;

  v12 = (void *)v0[228];
  v13 = (void *)v0[226];
  v0[75] = v0;
  v0[112] = v12;
  v1 = v12;
  v0[113] = v12;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [MatchedMedName]);
  Array.append(_:)();

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<[HKMedicationExposableDoseEvent]>);
  IndexingIterator.next()();
  v14 = v0[109];
  v0[226] = v14;
  if (v14)
  {
    *(_QWORD *)(v11 + 888) = v14;
    v2 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v11 + 1816) = v2;
    *v2 = *(_QWORD *)(v11 + 600);
    v2[1] = SpecificMedicationsPersistor.saveWithID(scheduleID:medicationIDs:medStatus:dosage:dosageUnit:confirmedAsNeeded:confirmedAsScheduled:);
    return SpecificMedicationsPersistor.buildMatchedMedName(from:shouldIncludeAsNeededParams:)(v14, 1, *(_QWORD *)(v11 + 1368), *(_QWORD *)(v11 + 1376));
  }
  else
  {
    v9 = *(_QWORD *)(v11 + 1448);
    v7 = *(_QWORD *)(v11 + 1440);
    v8 = *(_QWORD *)(v11 + 1432);
    outlined destroy of [HKQuantityType]();
    type metadata accessor for LogSpecificMedicationsIntentResponse();
    v10 = LogSpecificMedicationsIntentResponse.__allocating_init(code:userActivity:)(110, 0);
    v4 = v10;
    v5 = v10;
    *(_QWORD *)(v11 + 880) = v10;
    swift_bridgeObjectRetain();
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v10, sel_setMatchingMeds_, isa);

    outlined destroy of [HKQuantityType]();
    outlined destroy of [HKQuantityType]();
    outlined destroy of [HKQuantityType]();
    outlined destroy of [HKQuantityType]();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v9, v8);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(char *))(*(_QWORD *)(v11 + 600) + 8))(v10);
  }
}

{
  _QWORD *v0;
  id v1;
  _QWORD *v2;
  Class isa;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  uint64_t v13;

  v11 = (void *)v0[233];
  v12 = (void *)v0[231];
  v0[75] = v0;
  v0[95] = v11;
  v1 = v11;
  v0[96] = v11;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [MatchedMedName]);
  Array.append(_:)();

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<[HKMedicationExposableDoseEvent]>);
  IndexingIterator.next()();
  v13 = v0[93];
  v0[231] = v13;
  if (v13)
  {
    *(_QWORD *)(v10 + 752) = v13;
    v2 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v10 + 1856) = v2;
    *v2 = *(_QWORD *)(v10 + 600);
    v2[1] = SpecificMedicationsPersistor.saveWithID(scheduleID:medicationIDs:medStatus:dosage:dosageUnit:confirmedAsNeeded:confirmedAsScheduled:);
    return SpecificMedicationsPersistor.buildMatchedMedName(from:shouldIncludeAsNeededParams:)(v13, 1, *(_QWORD *)(v10 + 1368), *(_QWORD *)(v10 + 1376));
  }
  else
  {
    v5 = *(id *)(v10 + 1832);
    v8 = *(_QWORD *)(v10 + 1448);
    v6 = *(_QWORD *)(v10 + 1440);
    v7 = *(_QWORD *)(v10 + 1432);
    outlined destroy of [HKQuantityType]();
    swift_bridgeObjectRetain();
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v5, sel_setMatchingMeds_, isa);

    outlined destroy of [HKQuantityType]();
    outlined destroy of [HKQuantityType]();
    outlined destroy of [HKQuantityType]();
    outlined destroy of [HKQuantityType]();
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v8, v7);
    v9 = *(_QWORD *)(v10 + 1832);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v10 + 600) + 8))(v9);
  }
}

{
  _QWORD *v0;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v4 = v0[181];
  v2 = v0[180];
  v3 = v0[179];
  v0[75] = v0;
  outlined destroy of [HKQuantityType]();
  outlined destroy of [HKQuantityType]();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v4, v3);
  v5 = v0[236];
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(v0[75] + 8))(v5);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  id v3;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t);
  char *v8;
  uint64_t v9;
  uint8_t *buf;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(uint64_t, uint64_t, uint64_t);
  uint32_t v22;
  os_log_type_t v23;
  NSObject *v24;
  uint64_t v25;

  v1 = *(void **)(v0 + 1664);
  v17 = *(_QWORD *)(v0 + 1448);
  v15 = *(_QWORD *)(v0 + 1440);
  v16 = *(_QWORD *)(v0 + 1432);
  *(_QWORD *)(v0 + 600) = v0;

  swift_deallocUninitializedObject();
  swift_bridgeObjectRelease();
  outlined destroy of [HKQuantityType]();
  swift_bridgeObjectRelease();
  outlined destroy of [HKQuantityType]();
  (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v17, v16);
  v18 = *(id *)(v0 + 1688);
  v21 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1576);
  v2 = *(_QWORD *)(v0 + 1472);
  v20 = *(_QWORD *)(v0 + 1456);
  v3 = v18;
  *(_QWORD *)(v0 + 648) = v18;
  v19 = Logger.wellnessIntents.unsafeMutableAddressor();
  swift_beginAccess();
  v21(v2, v19, v20);
  swift_endAccess();
  v24 = Logger.logObject.getter();
  v23 = static os_log_type_t.error.getter();
  *(_QWORD *)(v0 + 656) = 2;
  UnsignedInteger<>.init<A>(_:)();
  v22 = *(_DWORD *)(v0 + 1900);
  v25 = _allocateUninitializedArray<A>(_:)();
  if (os_log_type_enabled(v24, v23))
  {
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    v11 = createStorage<A>(capacity:type:)(0);
    v12 = createStorage<A>(capacity:type:)(0);
    *(_QWORD *)(v14 + 664) = buf;
    *(_QWORD *)(v14 + 672) = v11;
    *(_QWORD *)(v14 + 680) = v12;
    serialize(_:at:)(0, (_BYTE **)(v14 + 664));
    serialize(_:at:)(0, (_BYTE **)(v14 + 664));
    *(_QWORD *)(v14 + 688) = v25;
    v13 = (_QWORD *)swift_task_alloc();
    v13[2] = v14 + 664;
    v13[3] = v14 + 672;
    v13[4] = v14 + 680;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
    lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
    Sequence.forEach(_:)();
    swift_task_dealloc();
    _os_log_impl(&dword_24749F000, v24, v23, "Failed fetching dose events for specified timeframe.", buf, v22);
    destroyStorage<A>(_:count:)(v11, 0, v9);
    destroyStorage<A>(_:count:)(v12, 0, MEMORY[0x24BEE4AD8] + 8);
    MEMORY[0x24957D398](buf, MEMORY[0x24BEE4260]);
  }
  swift_bridgeObjectRelease();
  v7 = *(void (**)(uint64_t, uint64_t))(v14 + 1616);
  v5 = *(_QWORD *)(v14 + 1472);
  v6 = *(_QWORD *)(v14 + 1456);

  v7(v5, v6);
  type metadata accessor for LogSpecificMedicationsIntentResponse();
  v8 = LogSpecificMedicationsIntentResponse.__allocating_init(code:userActivity:)(5, 0);

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(char *))(*(_QWORD *)(v14 + 600) + 8))(v8);
}

{
  uint64_t v0;
  uint64_t v1;
  id v2;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  char *v7;
  uint64_t v8;
  uint8_t *buf;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(uint64_t, uint64_t, uint64_t);
  uint32_t v21;
  os_log_type_t v22;
  NSObject *v23;
  uint64_t v24;

  v16 = *(_QWORD *)(v0 + 1448);
  v14 = *(_QWORD *)(v0 + 1440);
  v15 = *(_QWORD *)(v0 + 1432);
  *(_QWORD *)(v0 + 600) = v0;
  outlined destroy of [HKQuantityType]();
  (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v16, v15);
  v17 = *(id *)(v0 + 1792);
  v20 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1576);
  v1 = *(_QWORD *)(v0 + 1472);
  v19 = *(_QWORD *)(v0 + 1456);
  v2 = v17;
  *(_QWORD *)(v0 + 648) = v17;
  v18 = Logger.wellnessIntents.unsafeMutableAddressor();
  swift_beginAccess();
  v20(v1, v18, v19);
  swift_endAccess();
  v23 = Logger.logObject.getter();
  v22 = static os_log_type_t.error.getter();
  *(_QWORD *)(v0 + 656) = 2;
  UnsignedInteger<>.init<A>(_:)();
  v21 = *(_DWORD *)(v0 + 1900);
  v24 = _allocateUninitializedArray<A>(_:)();
  if (os_log_type_enabled(v23, v22))
  {
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    v10 = createStorage<A>(capacity:type:)(0);
    v11 = createStorage<A>(capacity:type:)(0);
    *(_QWORD *)(v13 + 664) = buf;
    *(_QWORD *)(v13 + 672) = v10;
    *(_QWORD *)(v13 + 680) = v11;
    serialize(_:at:)(0, (_BYTE **)(v13 + 664));
    serialize(_:at:)(0, (_BYTE **)(v13 + 664));
    *(_QWORD *)(v13 + 688) = v24;
    v12 = (_QWORD *)swift_task_alloc();
    v12[2] = v13 + 664;
    v12[3] = v13 + 672;
    v12[4] = v13 + 680;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
    lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
    Sequence.forEach(_:)();
    swift_task_dealloc();
    _os_log_impl(&dword_24749F000, v23, v22, "Failed fetching dose events for specified timeframe.", buf, v21);
    destroyStorage<A>(_:count:)(v10, 0, v8);
    destroyStorage<A>(_:count:)(v11, 0, MEMORY[0x24BEE4AD8] + 8);
    MEMORY[0x24957D398](buf, MEMORY[0x24BEE4260]);
  }
  swift_bridgeObjectRelease();
  v6 = *(void (**)(uint64_t, uint64_t))(v13 + 1616);
  v4 = *(_QWORD *)(v13 + 1472);
  v5 = *(_QWORD *)(v13 + 1456);

  v6(v4, v5);
  type metadata accessor for LogSpecificMedicationsIntentResponse();
  v7 = LogSpecificMedicationsIntentResponse.__allocating_init(code:userActivity:)(5, 0);

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(char *))(*(_QWORD *)(v13 + 600) + 8))(v7);
}

uint64_t SpecificMedicationsPersistor.saveWithID(scheduleID:medicationIDs:medStatus:dosage:dosageUnit:confirmedAsNeeded:confirmedAsScheduled:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v5;

  v3 = (_QWORD *)*v2;
  v5 = *v2 + 16;
  v3[75] = *v2;
  v3[210] = a1;
  v3[211] = v1;
  swift_task_dealloc();
  if (!v1)

  return swift_task_switch();
}

{
  uint64_t *v1;
  void *v3;
  uint64_t v4;

  v4 = *v1;
  v3 = *(void **)(*v1 + 1704);
  *(_QWORD *)(v4 + 600) = *v1;
  *(_QWORD *)(v4 + 1728) = a1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();

  return swift_task_switch();
}

{
  uint64_t *v1;
  uint64_t v3;

  v3 = *v1;
  *(_QWORD *)(v3 + 600) = *v1;
  *(_QWORD *)(v3 + 1752) = a1;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t *v1;
  uint64_t v3;

  v3 = *v1;
  *(_QWORD *)(v3 + 600) = *v1;
  *(_QWORD *)(v3 + 1768) = a1;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;

  v3 = (_QWORD *)*v2;
  v3[75] = *v2;
  v3[223] = a1;
  v3[224] = v1;
  swift_task_dealloc();
  if (v1)
    swift_bridgeObjectRelease();
  return swift_task_switch();
}

{
  uint64_t *v1;
  uint64_t v3;

  v3 = *v1;
  *(_QWORD *)(v3 + 600) = *v1;
  *(_QWORD *)(v3 + 1824) = a1;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t *v1;
  uint64_t v3;

  v3 = *v1;
  *(_QWORD *)(v3 + 600) = *v1;
  *(_QWORD *)(v3 + 1864) = a1;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t *v1;
  void *v3;
  uint64_t v4;

  v4 = *v1;
  v3 = *(void **)(*v1 + 1376);
  *(_QWORD *)(v4 + 600) = *v1;
  *(_QWORD *)(v4 + 1888) = a1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();

  return swift_task_switch();
}

uint64_t implicit closure #2 in SpecificMedicationsPersistor.saveWithID(scheduleID:medicationIDs:medStatus:dosage:dosageUnit:confirmedAsNeeded:confirmedAsScheduled:)()
{
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]?);
  lazy protocol witness table accessor for type [String]? and conformance A?();
  return String.init<A>(describing:)();
}

uint64_t implicit closure #4 in SpecificMedicationsPersistor.saveWithID(scheduleID:medicationIDs:medStatus:dosage:dosageUnit:confirmedAsNeeded:confirmedAsScheduled:)()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Bool?);
  lazy protocol witness table accessor for type Bool? and conformance A?();
  return String.init<A>(describing:)();
}

uint64_t implicit closure #6 in SpecificMedicationsPersistor.saveWithID(scheduleID:medicationIDs:medStatus:dosage:dosageUnit:confirmedAsNeeded:confirmedAsScheduled:)()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Double?);
  lazy protocol witness table accessor for type Double? and conformance A?();
  return String.init<A>(describing:)();
}

uint64_t implicit closure #7 in SpecificMedicationsPersistor.saveWithID(scheduleID:medicationIDs:medStatus:dosage:dosageUnit:confirmedAsNeeded:confirmedAsScheduled:)()
{
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
  lazy protocol witness table accessor for type String? and conformance A?();
  return String.init<A>(describing:)();
}

id HKMedicationIdentifier.__allocating_init(rawIdentifier:)()
{
  id v0;

  v0 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  return @nonobjc HKMedicationIdentifier.init(rawIdentifier:)();
}

uint64_t SpecificMedicationsPersistor.getDoseEvents(for:medicationIdentifier:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4[55] = a4;
  v4[54] = a2;
  v4[53] = a1;
  v4[28] = v4;
  v4[29] = 0;
  v4[30] = 0;
  v4[24] = 0;
  v4[25] = 0;
  v4[36] = 0;
  v4[43] = 0;
  v4[26] = 0;
  v4[27] = 0;
  v4[46] = 0;
  v5 = type metadata accessor for Logger();
  v4[56] = v5;
  v4[57] = *(_QWORD *)(v5 - 8);
  v4[58] = swift_task_alloc();
  v4[59] = swift_task_alloc();
  v4[60] = swift_task_alloc();
  v6 = type metadata accessor for DateInterval();
  v4[61] = v6;
  v4[62] = *(_QWORD *)(v6 - 8);
  v4[63] = swift_task_alloc();
  v4[64] = swift_task_alloc();
  v4[65] = swift_task_alloc();
  v7 = type metadata accessor for Calendar();
  v4[66] = v7;
  v4[67] = *(_QWORD *)(v7 - 8);
  v4[68] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  v4[69] = swift_task_alloc();
  v4[70] = swift_task_alloc();
  v4[71] = swift_task_alloc();
  v8 = type metadata accessor for Date();
  v4[72] = v8;
  v4[73] = *(_QWORD *)(v8 - 8);
  v4[74] = swift_task_alloc();
  v4[75] = swift_task_alloc();
  v4[76] = swift_task_alloc();
  v4[77] = swift_task_alloc();
  v4[78] = swift_task_alloc();
  v4[79] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TimeZone?);
  v4[80] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Calendar?);
  v4[81] = swift_task_alloc();
  v9 = type metadata accessor for DateComponents();
  v4[82] = v9;
  v4[83] = *(_QWORD *)(v9 - 8);
  v4[84] = swift_task_alloc();
  v4[85] = swift_task_alloc();
  v4[29] = a1;
  v4[30] = a2;
  v4[24] = a3;
  v4[25] = a4;
  return swift_task_switch();
}

uint64_t SpecificMedicationsPersistor.getDoseEvents(for:medicationIdentifier:)()
{
  _QWORD *v0;
  uint64_t v1;
  void (*v2)(void);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int (*v20)(uint64_t, uint64_t, uint64_t);
  void (*v21)(void);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  id v27;
  NSDateInterval v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  Class isa;
  uint64_t v33;
  void (*v34)(uint64_t, uint64_t);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  Class v39;
  uint64_t v40;
  uint64_t v41;
  id v42;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _BYTE **v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  uint64_t v55;
  char v56;
  uint64_t v57;
  char v58;
  uint64_t v59;
  char v60;
  uint64_t v61;
  char v62;
  uint64_t v63;
  char v64;
  uint64_t v65;
  char v66;
  uint64_t v67;
  char v68;
  uint64_t v69;
  char v70;
  uint64_t v71;
  char v72;
  uint64_t v73;
  char v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint8_t *buf;
  uint64_t v108;
  uint64_t v109;
  unsigned int v110;
  _BYTE **v111;
  uint64_t v112;
  uint64_t v113;
  _QWORD *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  unint64_t v120;
  unint64_t v121;
  uint64_t v122;
  uint32_t size;
  int v124;
  os_log_t oslog;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  Class v138;
  id v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t *v145;
  int v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  void (*v150)(uint64_t, uint64_t);
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  void (*v154)(uint64_t, uint64_t);
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  unsigned int v160;
  uint64_t v161;

  v147 = v0[85];
  v152 = v0[84];
  v151 = v0[83];
  v153 = v0[82];
  v142 = v0[81];
  v143 = v0[80];
  v148 = v0[78];
  v149 = v0[77];
  v158 = v0[73];
  v161 = v0[72];
  v159 = v0[71];
  v156 = v0[68];
  v155 = v0[67];
  v1 = v155;
  v157 = v0[66];
  v0[28] = v0;
  v2 = *(void (**)(void))(v1 + 56);
  v160 = 1;
  v2();
  v144 = 0;
  v3 = type metadata accessor for TimeZone();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 56))(v143, 1);
  v145 = &v53;
  v53 = 0;
  v146 = 1;
  v54 = 1;
  v55 = 0;
  v56 = 1;
  v57 = 0;
  v58 = 1;
  v59 = 0;
  v60 = 1;
  v61 = 0;
  v62 = 1;
  v63 = 0;
  v64 = 1;
  v65 = 0;
  v66 = 1;
  v67 = 0;
  v68 = 1;
  v69 = 0;
  v70 = 1;
  v71 = 0;
  v72 = 1;
  v73 = 0;
  v74 = 1;
  DateComponents.init(calendar:timeZone:era:year:month:day:hour:minute:second:nanosecond:weekday:weekdayOrdinal:quarter:weekOfMonth:weekOfYear:yearForWeekOfYear:)();
  DateComponents.second.setter();
  static Calendar.current.getter();
  v4 = v147;
  v5 = v152;
  v6 = v153;
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v151 + 16);
  v0[86] = v7;
  v7(v5, v4, v6);
  Date.init()();
  Date.startOfDay.getter(v149);
  v8 = v148;
  v9 = v161;
  v10 = *(void (**)(uint64_t, uint64_t))(v158 + 8);
  v150 = v10;
  v0[87] = v10;
  v10(v8, v9);
  default argument 2 of Calendar.date(byAdding:to:wrappingComponents:)();
  Calendar.date(byAdding:to:wrappingComponents:)();
  v150(v149, v161);
  v11 = v152;
  v12 = v153;
  v13 = *(void (**)(uint64_t, uint64_t))(v151 + 8);
  v154 = v13;
  v0[88] = v13;
  v13(v11, v12);
  v14 = v156;
  v15 = v157;
  v16 = *(void (**)(uint64_t, uint64_t))(v155 + 8);
  v0[89] = v16;
  v16(v14, v15);
  v17 = v159;
  v18 = v160;
  v19 = v161;
  v20 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v158 + 48);
  v0[90] = v20;
  if (v20(v17, v18, v19) == 1)
  {
    v44 = *(_QWORD *)(v141 + 568);
    v45 = *(_QWORD *)(v141 + 464);
    v116 = *(_QWORD *)(v141 + 456);
    v118 = *(_QWORD *)(v141 + 448);
    outlined destroy of Date?(v44);
    v117 = Logger.wellness.unsafeMutableAddressor();
    v119 = v141 + 120;
    swift_beginAccess();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v116 + 16))(v45, v117, v118);
    swift_endAccess();
    oslog = (os_log_t)Logger.logObject.getter();
    v124 = static os_log_type_t.debug.getter();
    v122 = v141 + 248;
    *(_QWORD *)(v141 + 248) = 2;
    v120 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    v121 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    lazy protocol witness table accessor for type Int and conformance Int();
    UnsignedInteger<>.init<A>(_:)();
    size = *(_DWORD *)(v141 + 768);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
    v126 = _allocateUninitializedArray<A>(_:)();
    if (os_log_type_enabled(oslog, (os_log_type_t)v124))
    {
      buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      v105 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      v106 = 0;
      v108 = createStorage<A>(capacity:type:)(0);
      v46 = createStorage<A>(capacity:type:)(v106);
      v47 = v108;
      v48 = v141;
      v109 = v46;
      v49 = (_BYTE **)(v141 + 256);
      v111 = (_BYTE **)(v141 + 256);
      *(_QWORD *)(v141 + 256) = buf;
      v112 = v48 + 264;
      *(_QWORD *)(v48 + 264) = v47;
      v113 = v48 + 272;
      *(_QWORD *)(v48 + 272) = v46;
      v110 = 0;
      serialize(_:at:)(0, v49);
      serialize(_:at:)(v110, v111);
      *(_QWORD *)(v141 + 280) = v126;
      v50 = (_QWORD *)swift_task_alloc();
      v51 = v112;
      v52 = v113;
      v114 = v50;
      v50[2] = v111;
      v50[3] = v51;
      v50[4] = v52;
      v115 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
      lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
      Sequence.forEach(_:)();
      swift_task_dealloc();
      _os_log_impl(&dword_24749F000, oslog, (os_log_type_t)v124, "failed to adjust day start for Meds in getMedScheduleWithDefinedValues, return nil", buf, size);
      v104 = 0;
      destroyStorage<A>(_:count:)(v108, 0, v105);
      destroyStorage<A>(_:count:)(v109, v104, MEMORY[0x24BEE4AD8] + 8);
      MEMORY[0x24957D398](buf, MEMORY[0x24BEE4260]);
    }
    swift_bridgeObjectRelease();
    v80 = *(_QWORD *)(v141 + 680);
    v79 = *(_QWORD *)(v141 + 656);
    v76 = *(_QWORD *)(v141 + 464);
    v75 = *(_QWORD *)(v141 + 456);
    v77 = *(_QWORD *)(v141 + 448);

    (*(void (**)(uint64_t, uint64_t))(v75 + 8))(v76, v77);
    v78 = 0;
    type metadata accessor for HKMedicationExposableDoseEvent();
    v103 = _allocateUninitializedArray<A>(_:)();
    v154(v80, v79);
    v100 = v141 + 232;
    v101 = v141 + 240;
    v102 = v141 + 192;
    v81 = *(_QWORD *)(v141 + 672);
    v82 = *(_QWORD *)(v141 + 648);
    v83 = *(_QWORD *)(v141 + 640);
    v84 = *(_QWORD *)(v141 + 632);
    v85 = *(_QWORD *)(v141 + 624);
    v86 = *(_QWORD *)(v141 + 616);
    v87 = *(_QWORD *)(v141 + 608);
    v88 = *(_QWORD *)(v141 + 600);
    v89 = *(_QWORD *)(v141 + 592);
    v90 = *(_QWORD *)(v141 + 568);
    v91 = *(_QWORD *)(v141 + 560);
    v92 = *(_QWORD *)(v141 + 552);
    v93 = *(_QWORD *)(v141 + 544);
    v94 = *(_QWORD *)(v141 + 520);
    v95 = *(_QWORD *)(v141 + 512);
    v96 = *(_QWORD *)(v141 + 504);
    v97 = *(_QWORD *)(v141 + 480);
    v98 = *(_QWORD *)(v141 + 472);
    v99 = *(_QWORD *)(v141 + 464);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v141 + 224) + 8))(v103);
  }
  else
  {
    v128 = *(_QWORD *)(v141 + 632);
    v131 = *(_QWORD *)(v141 + 624);
    v129 = *(_QWORD *)(v141 + 616);
    v132 = *(_QWORD *)(v141 + 608);
    v127 = *(_QWORD *)(v141 + 584);
    v130 = *(_QWORD *)(v141 + 576);
    v133 = *(_QWORD *)(v141 + 520);
    v136 = *(_QWORD *)(v141 + 512);
    v134 = *(_QWORD *)(v141 + 496);
    v135 = *(_QWORD *)(v141 + 488);
    v139 = *(id *)(v141 + 440);
    v137 = *(_QWORD *)(v141 + 432);
    v21 = *(void (**)(void))(v127 + 32);
    *(_QWORD *)(v141 + 728) = v21;
    v21();
    v22 = v128;
    v23 = v130;
    v24 = v131;
    v25 = *(void (**)(uint64_t, uint64_t, uint64_t))(v127 + 16);
    *(_QWORD *)(v141 + 736) = v25;
    v25(v24, v22, v23);
    Date.init()();
    Date.endOfDay.getter(v132);
    v26 = v136;
    v150(v129, v130);
    DateInterval.init(start:end:)();
    v27 = v139;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v134 + 16))(v26, v133, v135);
    v28.super.isa = DateInterval._bridgeToObjectiveC()().super.isa;
    v29 = v134;
    v30 = v135;
    v31 = v141;
    isa = v28.super.isa;
    v33 = v136;
    v138 = isa;
    *(_QWORD *)(v141 + 744) = isa;
    v34 = *(void (**)(uint64_t, uint64_t))(v29 + 8);
    *(_QWORD *)(v31 + 752) = v34;
    v34(v33, v30);
    v35 = v141;
    v36 = *(_QWORD *)(v141 + 224);
    v140 = v141 + 16;
    *(_QWORD *)(v141 + 16) = v36;
    *(_QWORD *)(v35 + 56) = v35 + 296;
    *(_QWORD *)(v35 + 24) = SpecificMedicationsPersistor.getDoseEvents(for:medicationIdentifier:);
    v37 = swift_continuation_init();
    v38 = v137;
    v39 = v138;
    v40 = v141;
    v41 = v37;
    v42 = v139;
    *(_QWORD *)(v141 + 112) = v41;
    *(_QWORD *)(v40 + 80) = MEMORY[0x24BDAC760];
    *(_DWORD *)(v40 + 88) = 0x40000000;
    *(_DWORD *)(v40 + 92) = 0;
    *(_QWORD *)(v40 + 96) = @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned NSArray?, @unowned NSError?) -> () with result type [HKMedicationExposableDoseEvent];
    *(_QWORD *)(v40 + 104) = &block_descriptor_971;
    objc_msgSend(v42, sel_doseEventsForDateInterval_medicationIdentifier_completion_, v39, v38, v40 + 80);
    return __swift_continuation_await_point(v140);
  }
}

{
  _QWORD *v0;
  _QWORD *v1;

  v1 = (_QWORD *)*v0;
  v1[28] = *v0;
  v1[95] = v1[6];
  return swift_task_switch();
}

{
  _QWORD *v0;
  id v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint8_t *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint32_t v27;
  os_log_type_t v28;
  NSObject *log;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(uint64_t, uint64_t);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(uint64_t, uint64_t);
  uint64_t v39;
  uint64_t v40;
  void (*v41)(uint64_t, uint64_t);
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint8_t *buf;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint32_t size;
  os_log_type_t v58;
  NSObject *oslog;
  uint64_t v60;
  uint64_t v61;
  void (*v62)(uint64_t, uint64_t, uint64_t);
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  id v66;
  uint64_t v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  void (*v71)(uint64_t, uint64_t, uint64_t);
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  void *v75;
  uint64_t v76;
  void *v77;
  uint64_t v78;
  void (*v79)(uint64_t, uint64_t, uint64_t);
  uint64_t v80;
  void (*v81)(uint64_t, uint64_t);
  uint64_t v82;
  uint64_t v83;
  void (*v84)(uint64_t, uint64_t);
  uint64_t v85;
  uint64_t v86;
  void (*v87)(uint64_t, uint64_t);
  uint64_t v88;
  uint64_t v89;
  unsigned int (*v90)(uint64_t, uint64_t, uint64_t);

  v77 = (void *)v0[93];
  v90 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v0[90];
  v87 = (void (*)(uint64_t, uint64_t))v0[89];
  v84 = (void (*)(uint64_t, uint64_t))v0[88];
  v81 = (void (*)(uint64_t, uint64_t))v0[87];
  v79 = (void (*)(uint64_t, uint64_t, uint64_t))v0[86];
  v78 = v0[85];
  v82 = v0[84];
  v83 = v0[82];
  v80 = v0[78];
  v89 = v0[72];
  v88 = v0[70];
  v85 = v0[68];
  v86 = v0[66];
  v75 = (void *)v0[55];
  v0[28] = v0;
  v76 = v0[37];
  swift_bridgeObjectRetain();
  v0[36] = v76;

  static Calendar.current.getter();
  v79(v82, v78, v83);
  DateInterval.start.getter();
  default argument 2 of Calendar.date(byAdding:to:wrappingComponents:)();
  Calendar.date(byAdding:to:wrappingComponents:)();
  v81(v80, v89);
  v84(v82, v83);
  v87(v85, v86);
  if (v90(v88, 1, v89) == 1)
  {
    v23 = *(_QWORD *)(v74 + 560);
    v3 = *(_QWORD *)(v74 + 472);
    v24 = *(_QWORD *)(v74 + 456);
    v26 = *(_QWORD *)(v74 + 448);
    swift_bridgeObjectRelease();
    outlined destroy of Date?(v23);
    v25 = Logger.wellness.unsafeMutableAddressor();
    swift_beginAccess();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v24 + 16))(v3, v25, v26);
    swift_endAccess();
    log = Logger.logObject.getter();
    v28 = static os_log_type_t.debug.getter();
    *(_QWORD *)(v74 + 304) = 2;
    lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    lazy protocol witness table accessor for type Int and conformance Int();
    UnsignedInteger<>.init<A>(_:)();
    v27 = *(_DWORD *)(v74 + 772);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
    v30 = _allocateUninitializedArray<A>(_:)();
    if (os_log_type_enabled(log, v28))
    {
      v19 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      v20 = createStorage<A>(capacity:type:)(0);
      v21 = createStorage<A>(capacity:type:)(0);
      *(_QWORD *)(v74 + 312) = v19;
      *(_QWORD *)(v74 + 320) = v20;
      *(_QWORD *)(v74 + 328) = v21;
      serialize(_:at:)(0, (_BYTE **)(v74 + 312));
      serialize(_:at:)(0, (_BYTE **)(v74 + 312));
      *(_QWORD *)(v74 + 336) = v30;
      v22 = (_QWORD *)swift_task_alloc();
      v22[2] = v74 + 312;
      v22[3] = v74 + 320;
      v22[4] = v74 + 328;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
      lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
      Sequence.forEach(_:)();
      swift_task_dealloc();
      _os_log_impl(&dword_24749F000, log, v28, "failed to adjust interval start for Meds in getMedScheduleWithDefinedValues, return nil", v19, v27);
      destroyStorage<A>(_:count:)(v20, 0, v18);
      destroyStorage<A>(_:count:)(v21, 0, MEMORY[0x24BEE4AD8] + 8);
      MEMORY[0x24957D398](v19, MEMORY[0x24BEE4260]);
    }
    swift_bridgeObjectRelease();
    v9 = *(void (**)(uint64_t, uint64_t))(v74 + 752);
    v16 = *(void (**)(uint64_t, uint64_t))(v74 + 704);
    v13 = *(void (**)(uint64_t, uint64_t))(v74 + 696);
    v14 = *(_QWORD *)(v74 + 680);
    v15 = *(_QWORD *)(v74 + 656);
    v11 = *(_QWORD *)(v74 + 632);
    v12 = *(_QWORD *)(v74 + 576);
    v10 = *(_QWORD *)(v74 + 520);
    v8 = *(_QWORD *)(v74 + 488);
    v6 = *(_QWORD *)(v74 + 472);
    v5 = *(_QWORD *)(v74 + 456);
    v7 = *(_QWORD *)(v74 + 448);

    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v6, v7);
    type metadata accessor for HKMedicationExposableDoseEvent();
    v17 = _allocateUninitializedArray<A>(_:)();
    outlined destroy of [HKQuantityType]();
    v9(v10, v8);
    v13(v11, v12);
    v16(v14, v15);
    v43 = v17;
  }
  else
  {
    v71 = *(void (**)(uint64_t, uint64_t, uint64_t))(v74 + 736);
    v72 = *(_QWORD *)(v74 + 624);
    v69 = *(_QWORD *)(v74 + 600);
    v70 = *(_QWORD *)(v74 + 576);
    (*(void (**)(void))(v74 + 728))();
    v71(v72, v69, v70);
    DateInterval.end.getter();
    DateInterval.init(start:end:)();
    type metadata accessor for HKMedicationExposableDoseEvent();
    *(_QWORD *)(v74 + 344) = _allocateUninitializedArray<A>(_:)();
    *(_QWORD *)(v74 + 352) = v76;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [HKMedicationExposableDoseEvent]);
    lazy protocol witness table accessor for type [HKMedicationExposableDoseEvent] and conformance [A]();
    Collection<>.makeIterator()();
    v73 = 0;
    while (1)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<[HKMedicationExposableDoseEvent]>);
      IndexingIterator.next()();
      v68 = *(void **)(v74 + 360);
      if (!v68)
        break;
      *(_QWORD *)(v74 + 368) = v68;
      v66 = objc_msgSend(v68, sel_scheduledDate);
      if (v66)
      {
        v62 = *(void (**)(uint64_t, uint64_t, uint64_t))(v74 + 728);
        v61 = *(_QWORD *)(v74 + 624);
        v63 = *(_QWORD *)(v74 + 584);
        v64 = *(_QWORD *)(v74 + 576);
        v65 = *(_QWORD *)(v74 + 552);
        static Date._unconditionallyBridgeFromObjectiveC(_:)();
        v62(v65, v61, v64);
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v63 + 56))(v65, 0, 1, v64);

      }
      else
      {
        (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v74 + 584) + 56))(*(_QWORD *)(v74 + 552), 1, 1, *(_QWORD *)(v74 + 576));
      }
      if ((*(unsigned int (**)(_QWORD, uint64_t, _QWORD))(v74 + 720))(*(_QWORD *)(v74 + 552), 1, *(_QWORD *)(v74 + 576)) == 1)
      {
        v2 = *(_QWORD *)(v74 + 480);
        v54 = *(_QWORD *)(v74 + 456);
        v56 = *(_QWORD *)(v74 + 448);
        outlined destroy of Date?(*(_QWORD *)(v74 + 552));
        v55 = Logger.wellnessIntents.unsafeMutableAddressor();
        swift_beginAccess();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v54 + 16))(v2, v55, v56);
        swift_endAccess();
        oslog = Logger.logObject.getter();
        v58 = static os_log_type_t.debug.getter();
        *(_QWORD *)(v74 + 376) = 2;
        lazy protocol witness table accessor for type UInt32 and conformance UInt32();
        lazy protocol witness table accessor for type UInt32 and conformance UInt32();
        lazy protocol witness table accessor for type Int and conformance Int();
        UnsignedInteger<>.init<A>(_:)();
        size = *(_DWORD *)(v74 + 776);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
        v60 = _allocateUninitializedArray<A>(_:)();
        if (os_log_type_enabled(oslog, v58))
        {
          buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
          v49 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
          v51 = createStorage<A>(capacity:type:)(0);
          v52 = createStorage<A>(capacity:type:)(0);
          *(_QWORD *)(v74 + 384) = buf;
          *(_QWORD *)(v74 + 392) = v51;
          *(_QWORD *)(v74 + 400) = v52;
          serialize(_:at:)(0, (_BYTE **)(v74 + 384));
          serialize(_:at:)(0, (_BYTE **)(v74 + 384));
          *(_QWORD *)(v74 + 408) = v60;
          v53 = (_QWORD *)swift_task_alloc();
          v53[2] = v74 + 384;
          v53[3] = v74 + 392;
          v53[4] = v74 + 400;
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
          lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
          Sequence.forEach(_:)();
          swift_task_dealloc();
          _os_log_impl(&dword_24749F000, oslog, v58, "doesn't have a scheduled date, skipping.", buf, size);
          destroyStorage<A>(_:count:)(v51, 0, v49);
          destroyStorage<A>(_:count:)(v52, 0, MEMORY[0x24BEE4AD8] + 8);
          MEMORY[0x24957D398](buf, MEMORY[0x24BEE4260]);
          swift_bridgeObjectRelease();
          v47 = 0;
          v48 = 0;
        }
        else
        {
          swift_bridgeObjectRelease();
          v47 = v73;
          v48 = v67;
        }
        v45 = *(_QWORD *)(v74 + 480);
        v44 = *(_QWORD *)(v74 + 456);
        v46 = *(_QWORD *)(v74 + 448);

        (*(void (**)(uint64_t, uint64_t))(v44 + 8))(v45, v46);
        v73 = v47;
        v67 = v48;
      }
      else
      {
        (*(void (**)(void))(v74 + 728))();
        if ((DateInterval.contains(_:)() & 1) != 0)
        {
          v1 = v68;
          *(_QWORD *)(v74 + 416) = v68;
          Array.append(_:)();
        }
        (*(void (**)(_QWORD, _QWORD))(v74 + 696))(*(_QWORD *)(v74 + 592), *(_QWORD *)(v74 + 576));

      }
    }
    v34 = *(void (**)(uint64_t, uint64_t))(v74 + 752);
    v41 = *(void (**)(uint64_t, uint64_t))(v74 + 704);
    v38 = *(void (**)(uint64_t, uint64_t))(v74 + 696);
    v39 = *(_QWORD *)(v74 + 680);
    v40 = *(_QWORD *)(v74 + 656);
    v36 = *(_QWORD *)(v74 + 632);
    v32 = *(_QWORD *)(v74 + 600);
    v37 = *(_QWORD *)(v74 + 576);
    v35 = *(_QWORD *)(v74 + 520);
    v31 = *(_QWORD *)(v74 + 504);
    v33 = *(_QWORD *)(v74 + 488);
    outlined destroy of [HKQuantityType]();
    v42 = *(_QWORD *)(v74 + 344);
    swift_bridgeObjectRetain();
    outlined destroy of [HKQuantityType]();
    v34(v31, v33);
    v38(v32, v37);
    outlined destroy of [HKQuantityType]();
    v34(v35, v33);
    v38(v36, v37);
    v41(v39, v40);
    v43 = v42;
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v74 + 224) + 8))(v43);
}

{
  _QWORD *v0;
  id v2;
  id v3;
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t);
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5 = (void (*)(uint64_t, uint64_t))v0[94];
  v3 = (id)v0[93];
  v9 = (void (*)(uint64_t, uint64_t))v0[88];
  v7 = (void (*)(uint64_t, uint64_t))v0[87];
  v10 = v0[85];
  v8 = v0[82];
  v11 = v0[79];
  v6 = v0[72];
  v12 = v0[65];
  v4 = v0[61];
  v2 = (id)v0[55];
  v0[28] = v0;
  swift_willThrow();

  v5(v12, v4);
  v7(v11, v6);
  v9(v10, v8);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)())(v0[28] + 8))();
}

uint64_t closure #1 in SpecificMedicationsPersistor.saveWithID(scheduleID:medicationIDs:medStatus:dosage:dosageUnit:confirmedAsNeeded:confirmedAsScheduled:)(id *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  char v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v13;
  uint64_t v14;
  _QWORD v15[3];
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;

  v19 = 0;
  v17 = 0;
  v18 = 0;
  v19 = *a1;
  v17 = a2;
  v18 = a3;
  v13 = objc_msgSend(v19, sel_scheduleItemIdentifier);
  if (v13)
  {
    v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v8 = v3;

    v9 = v7;
    v10 = v8;
  }
  else
  {
    v9 = 0;
    v10 = 0;
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v15[0] = v9;
  v15[1] = v10;
  v15[2] = a2;
  v16 = a3;
  if (!v10)
  {
    if (!v16)
    {
      outlined destroy of String.UTF8View();
      v6 = 1;
      goto LABEL_10;
    }
    goto LABEL_11;
  }
  outlined init with copy of String?(v15, &v14);
  if (!v16)
  {
    outlined destroy of String.UTF8View();
LABEL_11:
    outlined destroy of (String?, String?)();
    v6 = 0;
    goto LABEL_10;
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v5 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of String.UTF8View();
  v6 = v5;
LABEL_10:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v6 & 1;
}

uint64_t implicit closure #8 in SpecificMedicationsPersistor.saveWithID(scheduleID:medicationIDs:medStatus:dosage:dosageUnit:confirmedAsNeeded:confirmedAsScheduled:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t *v3;

  v3 = (uint64_t *)(a1 + 16);
  swift_beginAccess();
  outlined init with copy of [NSSortDescriptor](v3, a2);
  return swift_endAccess();
}

uint64_t SpecificMedicationsPersistor.updateDosageForDoseEvent(doseEvent:inputDosage:inputDosageUnit:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)(v7 + 664) = a7;
  *(_QWORD *)(v7 + 656) = a6;
  *(_QWORD *)(v7 + 648) = a5;
  *(_QWORD *)(v7 + 640) = a4;
  *(_BYTE *)(v7 + 41) = a3;
  *(_QWORD *)(v7 + 632) = a2;
  *(_QWORD *)(v7 + 624) = a1;
  *(_QWORD *)(v7 + 384) = v7;
  *(_QWORD *)(v7 + 392) = 0;
  *(_QWORD *)(v7 + 352) = 0;
  *(_BYTE *)(v7 + 360) = 0;
  *(_QWORD *)(v7 + 288) = 0;
  *(_QWORD *)(v7 + 296) = 0;
  *(_QWORD *)(v7 + 304) = 0;
  *(_QWORD *)(v7 + 312) = 0;
  *(_BYTE *)(v7 + 936) = 0;
  *(_QWORD *)(v7 + 320) = 0;
  *(_QWORD *)(v7 + 328) = 0;
  *(_QWORD *)(v7 + 336) = 0;
  *(_QWORD *)(v7 + 344) = 0;
  *(_BYTE *)(v7 + 944) = 0;
  *(_QWORD *)(v7 + 464) = 0;
  *(_QWORD *)(v7 + 488) = 0;
  *(_QWORD *)(v7 + 496) = 0;
  *(_QWORD *)(v7 + 512) = 0;
  *(_BYTE *)(v7 + 952) = 0;
  *(_QWORD *)(v7 + 616) = 0;
  v8 = type metadata accessor for Logger();
  *(_QWORD *)(v7 + 672) = v8;
  *(_QWORD *)(v7 + 680) = *(_QWORD *)(v8 - 8);
  *(_QWORD *)(v7 + 688) = swift_task_alloc();
  *(_QWORD *)(v7 + 696) = swift_task_alloc();
  *(_QWORD *)(v7 + 704) = swift_task_alloc();
  *(_QWORD *)(v7 + 712) = swift_task_alloc();
  *(_QWORD *)(v7 + 720) = swift_task_alloc();
  *(_QWORD *)(v7 + 728) = swift_task_alloc();
  *(_QWORD *)(v7 + 736) = swift_task_alloc();
  *(_QWORD *)(v7 + 744) = swift_task_alloc();
  *(_QWORD *)(v7 + 752) = swift_task_alloc();
  *(_QWORD *)(v7 + 760) = swift_task_alloc();
  v9 = type metadata accessor for Date();
  *(_QWORD *)(v7 + 768) = v9;
  *(_QWORD *)(v7 + 776) = *(_QWORD *)(v9 - 8);
  *(_QWORD *)(v7 + 784) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  *(_QWORD *)(v7 + 792) = swift_task_alloc();
  *(_QWORD *)(v7 + 392) = a1;
  *(_QWORD *)(v7 + 352) = a2;
  *(_BYTE *)(v7 + 360) = a3 & 1;
  *(_QWORD *)(v7 + 288) = a4;
  *(_QWORD *)(v7 + 296) = a5;
  *(_QWORD *)(v7 + 304) = a6;
  *(_QWORD *)(v7 + 312) = a7;
  return swift_task_switch();
}

uint64_t SpecificMedicationsPersistor.updateDosageForDoseEvent(doseEvent:inputDosage:inputDosageUnit:)()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  _QWORD *v3;
  id v5;
  id v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;

  v1 = *(void **)(v0 + 624);
  *(_QWORD *)(v0 + 384) = v0;
  v16 = objc_msgSend(v1, sel_scheduledDate);
  if (v16)
  {
    v14 = *(_QWORD *)(v15 + 792);
    v11 = *(_QWORD *)(v15 + 784);
    v12 = *(_QWORD *)(v15 + 776);
    v13 = *(_QWORD *)(v15 + 768);
    static Date._unconditionallyBridgeFromObjectiveC(_:)();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 32))(v14, v11, v13);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v12 + 56))(v14, 0, 1, v13);

  }
  else
  {
    (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v15 + 776) + 56))(*(_QWORD *)(v15 + 792), 1, 1, *(_QWORD *)(v15 + 768));
  }
  v10 = (*(unsigned int (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)(v15 + 776) + 48))(*(_QWORD *)(v15 + 792), 1, *(_QWORD *)(v15 + 768)) != 1;
  *(_BYTE *)(v15 + 42) = v10;
  v5 = *(id *)(v15 + 624);
  outlined destroy of Date?(*(_QWORD *)(v15 + 792));
  *(_BYTE *)(v15 + 936) = v10;
  v6 = objc_msgSend(v5, sel_medicationIdentifier);
  v7 = objc_msgSend(v6, sel_underlyingIdentifier);
  v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v8 = v2;
  *(_QWORD *)(v15 + 800) = v9;
  *(_QWORD *)(v15 + 808) = v2;
  *(_QWORD *)(v15 + 320) = v9;
  *(_QWORD *)(v15 + 328) = v2;

  swift_bridgeObjectRetain();
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v15 + 816) = v3;
  *v3 = *(_QWORD *)(v15 + 384);
  v3[1] = SpecificMedicationsPersistor.updateDosageForDoseEvent(doseEvent:inputDosage:inputDosageUnit:);
  return SpecificMedicationsPersistor.getAsNeededDosageUnit(for:dosageCount:)(v9, v8, *(_QWORD *)(v15 + 656), *(_QWORD *)(v15 + 664), 1.0);
}

{
  uint64_t v0;
  Swift::String_optional v1;
  uint64_t v2;
  Swift::String_optional v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  id v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint8_t *v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint32_t v28;
  os_log_type_t v29;
  NSObject *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint8_t *v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint32_t v42;
  os_log_type_t v43;
  NSObject *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint8_t *v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  uint32_t v55;
  os_log_type_t v56;
  NSObject *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint8_t *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint32_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  _QWORD *v80;
  NSObject *v81;
  os_log_type_t v82;
  id v83;
  id v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint8_t *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint32_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  _QWORD *v99;
  NSObject *v100;
  os_log_type_t v101;
  BOOL v102;
  uint64_t v103;
  uint64_t v104;
  char v105;
  id v106;
  char v107;
  uint64_t v108;
  uint64_t v109;
  char v110;
  uint64_t v111;
  uint8_t *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  char v118;
  uint64_t v119;
  uint64_t v120;
  uint32_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  _QWORD *v132;
  NSObject *log;
  os_log_type_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  void (*v138)(uint64_t, uint64_t);
  char v139;
  uint64_t v140;
  uint8_t *buf;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  void (*v148)(uint64_t, uint64_t, uint64_t);
  Swift::Bool v149;
  Swift::String_optional v150;
  uint64_t v151;
  uint64_t v152;
  uint32_t size;
  uint64_t v154;
  uint64_t v155;
  Swift::String_optional *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  _QWORD *v169;
  NSObject *oslog;
  os_log_type_t v171;
  uint8_t *v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t (*v175)(uint64_t, uint64_t, uint64_t);
  uint64_t v176;
  Class isa;
  uint8_t *v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t (*v181)(uint64_t, uint64_t, uint64_t);
  uint64_t v182;
  uint8_t *v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t (*v186)(uint64_t, uint64_t, uint64_t);
  uint64_t v187;
  uint8_t *v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t (*v191)(uint64_t, uint64_t, uint64_t);
  uint64_t v192;

  v1 = *(Swift::String_optional *)(v0 + 848);
  v152 = *(_QWORD *)(v0 + 832);
  v151 = *(_QWORD *)(v0 + 824);
  v2 = *(_QWORD *)(v0 + 760);
  v145 = *(_QWORD *)(v0 + 680);
  v147 = *(_QWORD *)(v0 + 672);
  v3 = *(Swift::String_optional *)(v0 + 640);
  v150 = v3;
  *(_QWORD *)(v0 + 384) = v0;
  v149 = isCompatibleUnit(_:_:)(v3, v1);
  swift_bridgeObjectRelease();
  *(_BYTE *)(v0 + 944) = v149;
  v146 = Logger.wellness.unsafeMutableAddressor();
  swift_beginAccess();
  v148 = *(void (**)(uint64_t, uint64_t, uint64_t))(v145 + 16);
  *(_QWORD *)(v0 + 864) = v148;
  v148(v2, v146, v147);
  swift_endAccess();
  v154 = swift_allocObject();
  *(_BYTE *)(v154 + 16) = v149;
  swift_bridgeObjectRetain();
  v156 = (Swift::String_optional *)swift_allocObject();
  v156[1] = v150;
  swift_bridgeObjectRetain();
  v158 = swift_allocObject();
  *(_QWORD *)(v158 + 16) = v151;
  *(_QWORD *)(v158 + 24) = v152;
  oslog = Logger.logObject.getter();
  v171 = static os_log_type_t.debug.getter();
  *(_QWORD *)(v0 + 400) = 32;
  *(_QWORD *)(v0 + 872) = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  *(_QWORD *)(v0 + 880) = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  *(_QWORD *)(v0 + 888) = lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  size = *(_DWORD *)(v0 + 44);
  v160 = swift_allocObject();
  *(_BYTE *)(v160 + 16) = 32;
  v161 = swift_allocObject();
  *(_BYTE *)(v161 + 16) = 8;
  v155 = swift_allocObject();
  *(_QWORD *)(v155 + 16) = partial apply for implicit closure #1 in SpecificMedicationsPersistor.updateDosageForDoseEvent(doseEvent:inputDosage:inputDosageUnit:);
  *(_QWORD *)(v155 + 24) = v154;
  v162 = swift_allocObject();
  *(_QWORD *)(v162 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:);
  *(_QWORD *)(v162 + 24) = v155;
  v163 = swift_allocObject();
  *(_BYTE *)(v163 + 16) = 32;
  v164 = swift_allocObject();
  *(_BYTE *)(v164 + 16) = 8;
  v157 = swift_allocObject();
  *(_QWORD *)(v157 + 16) = partial apply for implicit closure #2 in SpecificMedicationsPersistor.writeDoseEvent(medicationController:doseEvents:medStatusTaken:medicationIDPresent:dosage:dosageUnit:);
  *(_QWORD *)(v157 + 24) = v156;
  v165 = swift_allocObject();
  *(_QWORD *)(v165 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:);
  *(_QWORD *)(v165 + 24) = v157;
  v166 = swift_allocObject();
  *(_BYTE *)(v166 + 16) = 32;
  v167 = swift_allocObject();
  *(_BYTE *)(v167 + 16) = 8;
  v159 = swift_allocObject();
  *(_QWORD *)(v159 + 16) = partial apply for implicit closure #2 in SpecificMedicationsPersistor.writeDoseEvent(medicationController:doseEvents:medStatusTaken:medicationIDPresent:dosage:dosageUnit:);
  *(_QWORD *)(v159 + 24) = v158;
  v168 = swift_allocObject();
  *(_QWORD *)(v168 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:);
  *(_QWORD *)(v168 + 24) = v159;
  *(_QWORD *)(v0 + 896) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
  _allocateUninitializedArray<A>(_:)();
  v169 = v4;
  swift_retain();
  *v169 = partial apply for closure #1 in OSLogArguments.append(_:);
  v169[1] = v160;
  swift_retain();
  v169[2] = partial apply for closure #1 in OSLogArguments.append(_:);
  v169[3] = v161;
  swift_retain();
  v169[4] = partial apply for closure #1 in OSLogArguments.append(_:);
  v169[5] = v162;
  swift_retain();
  v169[6] = partial apply for closure #1 in OSLogArguments.append(_:);
  v169[7] = v163;
  swift_retain();
  v169[8] = partial apply for closure #1 in OSLogArguments.append(_:);
  v169[9] = v164;
  swift_retain();
  v169[10] = partial apply for closure #1 in OSLogArguments.append(_:);
  v169[11] = v165;
  swift_retain();
  v169[12] = partial apply for closure #1 in OSLogArguments.append(_:);
  v169[13] = v166;
  swift_retain();
  v169[14] = partial apply for closure #1 in OSLogArguments.append(_:);
  v169[15] = v167;
  swift_retain();
  v169[16] = partial apply for closure #1 in OSLogArguments.append(_:);
  v169[17] = v168;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(oslog, v171))
  {
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    v140 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    v142 = createStorage<A>(capacity:type:)(0);
    v143 = createStorage<A>(capacity:type:)(3);
    v188 = buf;
    v189 = v142;
    v190 = v143;
    serialize(_:at:)(2, &v188);
    serialize(_:at:)(3, &v188);
    v191 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v192 = v160;
    closure #1 in osLogInternal(_:log:type:)(&v191, (uint64_t)&v188, (uint64_t)&v189, (uint64_t)&v190);
    v191 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v192 = v161;
    closure #1 in osLogInternal(_:log:type:)(&v191, (uint64_t)&v188, (uint64_t)&v189, (uint64_t)&v190);
    v191 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v192 = v162;
    closure #1 in osLogInternal(_:log:type:)(&v191, (uint64_t)&v188, (uint64_t)&v189, (uint64_t)&v190);
    v191 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v192 = v163;
    closure #1 in osLogInternal(_:log:type:)(&v191, (uint64_t)&v188, (uint64_t)&v189, (uint64_t)&v190);
    v191 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v192 = v164;
    closure #1 in osLogInternal(_:log:type:)(&v191, (uint64_t)&v188, (uint64_t)&v189, (uint64_t)&v190);
    v191 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v192 = v165;
    closure #1 in osLogInternal(_:log:type:)(&v191, (uint64_t)&v188, (uint64_t)&v189, (uint64_t)&v190);
    v191 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v192 = v166;
    closure #1 in osLogInternal(_:log:type:)(&v191, (uint64_t)&v188, (uint64_t)&v189, (uint64_t)&v190);
    v191 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v192 = v167;
    closure #1 in osLogInternal(_:log:type:)(&v191, (uint64_t)&v188, (uint64_t)&v189, (uint64_t)&v190);
    v191 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v192 = v168;
    closure #1 in osLogInternal(_:log:type:)(&v191, (uint64_t)&v188, (uint64_t)&v189, (uint64_t)&v190);
    _os_log_impl(&dword_24749F000, oslog, v171, "hasCompatibleUnit: (%s), with inputDosageUnit (%s) and getAsNeededDosageUnit(%s)", buf, size);
    destroyStorage<A>(_:count:)(v142, 0, v140);
    destroyStorage<A>(_:count:)(v143, 3, MEMORY[0x24BEE4AD8] + 8);
    MEMORY[0x24957D398](buf, MEMORY[0x24BEE4260]);
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
  }
  v139 = *(_BYTE *)(v144 + 42);
  v136 = *(_QWORD *)(v144 + 760);
  v135 = *(_QWORD *)(v144 + 680);
  v137 = *(_QWORD *)(v144 + 672);

  v138 = *(void (**)(uint64_t, uint64_t))(v135 + 8);
  *(_QWORD *)(v144 + 904) = v138;
  v138(v136, v137);
  if ((v139 & 1) != 0)
  {
    v5 = *(_QWORD *)(v144 + 752);
    v116 = *(_QWORD *)(v144 + 672);
    v120 = *(_QWORD *)(v144 + 648);
    v119 = *(_QWORD *)(v144 + 640);
    v118 = *(_BYTE *)(v144 + 41);
    v117 = *(_QWORD *)(v144 + 632);
    v115 = Logger.wellness.unsafeMutableAddressor();
    swift_beginAccess();
    v148(v5, v115, v116);
    swift_endAccess();
    v122 = swift_allocObject();
    *(_QWORD *)(v122 + 16) = v117;
    *(_BYTE *)(v122 + 24) = v118 & 1;
    swift_bridgeObjectRetain();
    v124 = swift_allocObject();
    *(_QWORD *)(v124 + 16) = v119;
    *(_QWORD *)(v124 + 24) = v120;
    log = Logger.logObject.getter();
    v134 = static os_log_type_t.debug.getter();
    *(_QWORD *)(v144 + 584) = 22;
    UnsignedInteger<>.init<A>(_:)();
    v121 = *(_DWORD *)(v144 + 964);
    v126 = swift_allocObject();
    *(_BYTE *)(v126 + 16) = 32;
    v127 = swift_allocObject();
    *(_BYTE *)(v127 + 16) = 8;
    v123 = swift_allocObject();
    *(_QWORD *)(v123 + 16) = partial apply for implicit closure #1 in SpecificMedicationsPersistor.writeDoseEvent(medicationController:doseEvents:medStatusTaken:medicationIDPresent:dosage:dosageUnit:);
    *(_QWORD *)(v123 + 24) = v122;
    v128 = swift_allocObject();
    *(_QWORD *)(v128 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:);
    *(_QWORD *)(v128 + 24) = v123;
    v129 = swift_allocObject();
    *(_BYTE *)(v129 + 16) = 32;
    v130 = swift_allocObject();
    *(_BYTE *)(v130 + 16) = 8;
    v125 = swift_allocObject();
    *(_QWORD *)(v125 + 16) = partial apply for implicit closure #2 in SpecificMedicationsPersistor.writeDoseEvent(medicationController:doseEvents:medStatusTaken:medicationIDPresent:dosage:dosageUnit:);
    *(_QWORD *)(v125 + 24) = v124;
    v131 = swift_allocObject();
    *(_QWORD *)(v131 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:);
    *(_QWORD *)(v131 + 24) = v125;
    _allocateUninitializedArray<A>(_:)();
    v132 = v6;
    swift_retain();
    *v132 = partial apply for closure #1 in OSLogArguments.append(_:);
    v132[1] = v126;
    swift_retain();
    v132[2] = partial apply for closure #1 in OSLogArguments.append(_:);
    v132[3] = v127;
    swift_retain();
    v132[4] = partial apply for closure #1 in OSLogArguments.append(_:);
    v132[5] = v128;
    swift_retain();
    v132[6] = partial apply for closure #1 in OSLogArguments.append(_:);
    v132[7] = v129;
    swift_retain();
    v132[8] = partial apply for closure #1 in OSLogArguments.append(_:);
    v132[9] = v130;
    swift_retain();
    v132[10] = partial apply for closure #1 in OSLogArguments.append(_:);
    v132[11] = v131;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(log, v134))
    {
      v112 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      v111 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      v113 = createStorage<A>(capacity:type:)(0);
      v114 = createStorage<A>(capacity:type:)(2);
      v183 = v112;
      v184 = v113;
      v185 = v114;
      serialize(_:at:)(2, &v183);
      serialize(_:at:)(2, &v183);
      v186 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v187 = v126;
      closure #1 in osLogInternal(_:log:type:)(&v186, (uint64_t)&v183, (uint64_t)&v184, (uint64_t)&v185);
      v186 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v187 = v127;
      closure #1 in osLogInternal(_:log:type:)(&v186, (uint64_t)&v183, (uint64_t)&v184, (uint64_t)&v185);
      v186 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v187 = v128;
      closure #1 in osLogInternal(_:log:type:)(&v186, (uint64_t)&v183, (uint64_t)&v184, (uint64_t)&v185);
      v186 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v187 = v129;
      closure #1 in osLogInternal(_:log:type:)(&v186, (uint64_t)&v183, (uint64_t)&v184, (uint64_t)&v185);
      v186 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v187 = v130;
      closure #1 in osLogInternal(_:log:type:)(&v186, (uint64_t)&v183, (uint64_t)&v184, (uint64_t)&v185);
      v186 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v187 = v131;
      closure #1 in osLogInternal(_:log:type:)(&v186, (uint64_t)&v183, (uint64_t)&v184, (uint64_t)&v185);
      _os_log_impl(&dword_24749F000, log, v134, "updateDosageForDoseEvent: scheduled med, got inputDosage (%s) and inputDosageUnit (%s)", v112, v121);
      destroyStorage<A>(_:count:)(v113, 0, v111);
      destroyStorage<A>(_:count:)(v114, 2, MEMORY[0x24BEE4AD8] + 8);
      MEMORY[0x24957D398](v112, MEMORY[0x24BEE4260]);
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
    }
    v108 = *(_QWORD *)(v144 + 752);
    v109 = *(_QWORD *)(v144 + 672);
    v110 = *(_BYTE *)(v144 + 41);

    v138(v108, v109);
    v7 = *(id *)(v144 + 624);
    if ((v110 & 1) != 0)
    {
      v107 = 1;
LABEL_22:
      v10 = *(_QWORD *)(v144 + 744);
      v92 = *(_QWORD *)(v144 + 672);

      *(_BYTE *)(v144 + 952) = v107 & 1;
      v91 = Logger.wellness.unsafeMutableAddressor();
      swift_beginAccess();
      v148(v10, v91, v92);
      swift_endAccess();
      v94 = swift_allocObject();
      *(_BYTE *)(v94 + 16) = v107 & 1;
      v100 = Logger.logObject.getter();
      v101 = static os_log_type_t.debug.getter();
      *(_QWORD *)(v144 + 592) = 12;
      UnsignedInteger<>.init<A>(_:)();
      v93 = *(_DWORD *)(v144 + 968);
      v96 = swift_allocObject();
      *(_BYTE *)(v96 + 16) = 32;
      v97 = swift_allocObject();
      *(_BYTE *)(v97 + 16) = 8;
      v95 = swift_allocObject();
      *(_QWORD *)(v95 + 16) = partial apply for implicit closure #1 in SpecificMedicationsPersistor.updateDosageForDoseEvent(doseEvent:inputDosage:inputDosageUnit:);
      *(_QWORD *)(v95 + 24) = v94;
      v98 = swift_allocObject();
      *(_QWORD *)(v98 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:);
      *(_QWORD *)(v98 + 24) = v95;
      _allocateUninitializedArray<A>(_:)();
      v99 = v11;
      swift_retain();
      *v99 = partial apply for closure #1 in OSLogArguments.append(_:);
      v99[1] = v96;
      swift_retain();
      v99[2] = partial apply for closure #1 in OSLogArguments.append(_:);
      v99[3] = v97;
      swift_retain();
      v99[4] = partial apply for closure #1 in OSLogArguments.append(_:);
      v99[5] = v98;
      _finalizeUninitializedArray<A>(_:)();
      swift_bridgeObjectRelease();
      if (os_log_type_enabled(v100, v101))
      {
        v88 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
        v87 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
        v89 = createStorage<A>(capacity:type:)(0);
        v90 = createStorage<A>(capacity:type:)(1);
        v178 = v88;
        v179 = v89;
        v180 = v90;
        serialize(_:at:)(2, &v178);
        serialize(_:at:)(1, &v178);
        v181 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
        v182 = v96;
        closure #1 in osLogInternal(_:log:type:)(&v181, (uint64_t)&v178, (uint64_t)&v179, (uint64_t)&v180);
        v181 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
        v182 = v97;
        closure #1 in osLogInternal(_:log:type:)(&v181, (uint64_t)&v178, (uint64_t)&v179, (uint64_t)&v180);
        v181 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
        v182 = v98;
        closure #1 in osLogInternal(_:log:type:)(&v181, (uint64_t)&v178, (uint64_t)&v179, (uint64_t)&v180);
        _os_log_impl(&dword_24749F000, v100, v101, "has compatible dosage: (%s)", v88, v93);
        destroyStorage<A>(_:count:)(v89, 0, v87);
        destroyStorage<A>(_:count:)(v90, 1, MEMORY[0x24BEE4AD8] + 8);
        MEMORY[0x24957D398](v88, MEMORY[0x24BEE4260]);
        swift_release();
        swift_release();
        swift_release();
      }
      else
      {
        swift_release();
        swift_release();
        swift_release();
      }
      v85 = *(_QWORD *)(v144 + 744);
      v86 = *(_QWORD *)(v144 + 672);

      v138(v85, v86);
      if (v149 && (v107 & 1) != 0)
      {
        *(_QWORD *)(v144 + 608) = objc_msgSend(*(id *)(v144 + 624), sel_scheduledDoseQuantity);
        if (*(_QWORD *)(v144 + 608))
        {
          isa = *(Class *)(v144 + 608);
        }
        else
        {
          type metadata accessor for NSNumber();
          isa = NSNumber.init(integerLiteral:)(1).super.super.isa;
          outlined destroy of HealthKitPersistor((id *)(v144 + 608));
        }
        v83 = objc_msgSend(*(id *)(v144 + 624), sel_updateForNewDoseQuantity_);

        *(_QWORD *)(v144 + 616) = v83;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v84 = v83;
        goto LABEL_46;
      }
      v12 = *(_QWORD *)(v144 + 736);
      v66 = *(_QWORD *)(v144 + 672);
      v68 = *(_QWORD *)(v144 + 648);
      v67 = *(_QWORD *)(v144 + 640);
      v65 = Logger.wellness.unsafeMutableAddressor();
      swift_beginAccess();
      v148(v12, v65, v66);
      swift_endAccess();
      v70 = swift_allocObject();
      *(_BYTE *)(v70 + 16) = v149;
      swift_bridgeObjectRetain();
      v72 = swift_allocObject();
      *(_QWORD *)(v72 + 16) = v67;
      *(_QWORD *)(v72 + 24) = v68;
      v81 = Logger.logObject.getter();
      v82 = static os_log_type_t.debug.getter();
      *(_QWORD *)(v144 + 600) = 22;
      UnsignedInteger<>.init<A>(_:)();
      v69 = *(_DWORD *)(v144 + 972);
      v74 = swift_allocObject();
      *(_BYTE *)(v74 + 16) = 32;
      v75 = swift_allocObject();
      *(_BYTE *)(v75 + 16) = 8;
      v71 = swift_allocObject();
      *(_QWORD *)(v71 + 16) = partial apply for implicit closure #1 in SpecificMedicationsPersistor.updateDosageForDoseEvent(doseEvent:inputDosage:inputDosageUnit:);
      *(_QWORD *)(v71 + 24) = v70;
      v76 = swift_allocObject();
      *(_QWORD *)(v76 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:);
      *(_QWORD *)(v76 + 24) = v71;
      v77 = swift_allocObject();
      *(_BYTE *)(v77 + 16) = 32;
      v78 = swift_allocObject();
      *(_BYTE *)(v78 + 16) = 8;
      v73 = swift_allocObject();
      *(_QWORD *)(v73 + 16) = partial apply for implicit closure #2 in SpecificMedicationsPersistor.writeDoseEvent(medicationController:doseEvents:medStatusTaken:medicationIDPresent:dosage:dosageUnit:);
      *(_QWORD *)(v73 + 24) = v72;
      v79 = swift_allocObject();
      *(_QWORD *)(v79 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:);
      *(_QWORD *)(v79 + 24) = v73;
      _allocateUninitializedArray<A>(_:)();
      v80 = v13;
      swift_retain();
      *v80 = partial apply for closure #1 in OSLogArguments.append(_:);
      v80[1] = v74;
      swift_retain();
      v80[2] = partial apply for closure #1 in OSLogArguments.append(_:);
      v80[3] = v75;
      swift_retain();
      v80[4] = partial apply for closure #1 in OSLogArguments.append(_:);
      v80[5] = v76;
      swift_retain();
      v80[6] = partial apply for closure #1 in OSLogArguments.append(_:);
      v80[7] = v77;
      swift_retain();
      v80[8] = partial apply for closure #1 in OSLogArguments.append(_:);
      v80[9] = v78;
      swift_retain();
      v80[10] = partial apply for closure #1 in OSLogArguments.append(_:);
      v80[11] = v79;
      _finalizeUninitializedArray<A>(_:)();
      swift_bridgeObjectRelease();
      if (os_log_type_enabled(v81, v82))
      {
        v62 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
        v61 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
        v63 = createStorage<A>(capacity:type:)(0);
        v64 = createStorage<A>(capacity:type:)(2);
        v172 = v62;
        v173 = v63;
        v174 = v64;
        serialize(_:at:)(2, &v172);
        serialize(_:at:)(2, &v172);
        v175 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
        v176 = v74;
        closure #1 in osLogInternal(_:log:type:)(&v175, (uint64_t)&v172, (uint64_t)&v173, (uint64_t)&v174);
        v175 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
        v176 = v75;
        closure #1 in osLogInternal(_:log:type:)(&v175, (uint64_t)&v172, (uint64_t)&v173, (uint64_t)&v174);
        v175 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
        v176 = v76;
        closure #1 in osLogInternal(_:log:type:)(&v175, (uint64_t)&v172, (uint64_t)&v173, (uint64_t)&v174);
        v175 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
        v176 = v77;
        closure #1 in osLogInternal(_:log:type:)(&v175, (uint64_t)&v172, (uint64_t)&v173, (uint64_t)&v174);
        v175 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
        v176 = v78;
        closure #1 in osLogInternal(_:log:type:)(&v175, (uint64_t)&v172, (uint64_t)&v173, (uint64_t)&v174);
        v175 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
        v176 = v79;
        closure #1 in osLogInternal(_:log:type:)(&v175, (uint64_t)&v172, (uint64_t)&v173, (uint64_t)&v174);
        _os_log_impl(&dword_24749F000, v81, v82, "isScheduled fell through, with hasCompatibleUnit (%s) and hasCompatibleDosage (%s)", v62, v69);
        destroyStorage<A>(_:count:)(v63, 0, v61);
        destroyStorage<A>(_:count:)(v64, 2, MEMORY[0x24BEE4AD8] + 8);
        MEMORY[0x24957D398](v62, MEMORY[0x24BEE4260]);
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
      }
      else
      {
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
      }
      v59 = *(_QWORD *)(v144 + 736);
      v60 = *(_QWORD *)(v144 + 672);

      v138(v59, v60);
LABEL_43:
      v18 = *(_QWORD *)(v144 + 688);
      v27 = *(_QWORD *)(v144 + 672);
      v26 = Logger.wellnessIntents.unsafeMutableAddressor();
      swift_beginAccess();
      v148(v18, v26, v27);
      swift_endAccess();
      v30 = Logger.logObject.getter();
      v29 = static os_log_type_t.error.getter();
      *(_QWORD *)(v144 + 416) = 2;
      UnsignedInteger<>.init<A>(_:)();
      v28 = *(_DWORD *)(v144 + 380);
      v31 = _allocateUninitializedArray<A>(_:)();
      if (os_log_type_enabled(v30, v29))
      {
        v22 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
        v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
        v23 = createStorage<A>(capacity:type:)(0);
        v24 = createStorage<A>(capacity:type:)(0);
        *(_QWORD *)(v144 + 424) = v22;
        *(_QWORD *)(v144 + 432) = v23;
        *(_QWORD *)(v144 + 440) = v24;
        serialize(_:at:)(0, (_BYTE **)(v144 + 424));
        serialize(_:at:)(0, (_BYTE **)(v144 + 424));
        *(_QWORD *)(v144 + 448) = v31;
        v25 = (_QWORD *)swift_task_alloc();
        v25[2] = v144 + 424;
        v25[3] = v144 + 432;
        v25[4] = v144 + 440;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
        lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
        Sequence.forEach(_:)();
        swift_task_dealloc();
        _os_log_impl(&dword_24749F000, v30, v29, "updateDosageForDoseEvent fell through, this is a complex med request. Returning nil.", v22, v28);
        destroyStorage<A>(_:count:)(v23, 0, v21);
        destroyStorage<A>(_:count:)(v24, 0, MEMORY[0x24BEE4AD8] + 8);
        MEMORY[0x24957D398](v22, MEMORY[0x24BEE4260]);
      }
      swift_bridgeObjectRelease();
      v19 = *(_QWORD *)(v144 + 688);
      v20 = *(_QWORD *)(v144 + 672);

      v138(v19, v20);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v84 = 0;
LABEL_46:
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      return (*(uint64_t (**)(id))(*(_QWORD *)(v144 + 384) + 8))(v84);
    }
    v106 = objc_msgSend(*(id *)(v144 + 624), sel_scheduledDoseQuantity);
    if (v106)
    {
      objc_msgSend(v106, sel_doubleValue);
      v103 = v8;

      v104 = v103;
      v105 = 0;
    }
    else
    {
      v104 = 0;
      v105 = 1;
    }
    v9 = *(_BYTE *)(v144 + 41);
    *(_QWORD *)(v144 + 16) = *(_QWORD *)(v144 + 632);
    *(_BYTE *)(v144 + 24) = v9 & 1;
    *(_QWORD *)(v144 + 32) = v104;
    *(_BYTE *)(v144 + 40) = v105 & 1;
    if ((*(_BYTE *)(v144 + 24) & 1) != 0)
    {
      if ((*(_BYTE *)(v144 + 40) & 1) != 0)
      {
        v102 = 1;
        goto LABEL_19;
      }
    }
    else
    {
      outlined init with copy of Double?(v144 + 16, v144 + 368);
      if ((*(_BYTE *)(v144 + 40) & 1) == 0)
      {
        v102 = *(double *)(v144 + 368) == *(double *)(v144 + 32);
LABEL_19:
        v107 = v102;
        goto LABEL_22;
      }
    }
    v102 = 0;
    goto LABEL_19;
  }
  v14 = *(_QWORD *)(v144 + 728);
  v54 = *(_QWORD *)(v144 + 672);
  v53 = Logger.wellness.unsafeMutableAddressor();
  swift_beginAccess();
  v148(v14, v53, v54);
  swift_endAccess();
  v57 = Logger.logObject.getter();
  v56 = static os_log_type_t.debug.getter();
  *(_QWORD *)(v144 + 408) = 2;
  UnsignedInteger<>.init<A>(_:)();
  v55 = *(_DWORD *)(v144 + 364);
  v58 = _allocateUninitializedArray<A>(_:)();
  if (os_log_type_enabled(v57, v56))
  {
    v49 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    v48 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    v50 = createStorage<A>(capacity:type:)(0);
    v51 = createStorage<A>(capacity:type:)(0);
    *(_QWORD *)(v144 + 552) = v49;
    *(_QWORD *)(v144 + 560) = v50;
    *(_QWORD *)(v144 + 568) = v51;
    serialize(_:at:)(0, (_BYTE **)(v144 + 552));
    serialize(_:at:)(0, (_BYTE **)(v144 + 552));
    *(_QWORD *)(v144 + 576) = v58;
    v52 = (_QWORD *)swift_task_alloc();
    v52[2] = v144 + 552;
    v52[3] = v144 + 560;
    v52[4] = v144 + 568;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
    lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
    Sequence.forEach(_:)();
    swift_task_dealloc();
    _os_log_impl(&dword_24749F000, v57, v56, "updateDosageForDoseEvent: this is an as needed event", v49, v55);
    destroyStorage<A>(_:count:)(v50, 0, v48);
    destroyStorage<A>(_:count:)(v51, 0, MEMORY[0x24BEE4AD8] + 8);
    MEMORY[0x24957D398](v49, MEMORY[0x24BEE4260]);
  }
  swift_bridgeObjectRelease();
  v46 = *(_QWORD *)(v144 + 728);
  v47 = *(_QWORD *)(v144 + 672);

  v138(v46, v47);
  if (!v149)
    goto LABEL_43;
  v15 = *(_QWORD *)(v144 + 720);
  v41 = *(_QWORD *)(v144 + 672);
  v40 = Logger.wellness.unsafeMutableAddressor();
  swift_beginAccess();
  v148(v15, v40, v41);
  swift_endAccess();
  v44 = Logger.logObject.getter();
  v43 = static os_log_type_t.debug.getter();
  *(_QWORD *)(v144 + 456) = 2;
  UnsignedInteger<>.init<A>(_:)();
  v42 = *(_DWORD *)(v144 + 940);
  v45 = _allocateUninitializedArray<A>(_:)();
  if (os_log_type_enabled(v44, v43))
  {
    v36 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    v37 = createStorage<A>(capacity:type:)(0);
    v38 = createStorage<A>(capacity:type:)(0);
    *(_QWORD *)(v144 + 520) = v36;
    *(_QWORD *)(v144 + 528) = v37;
    *(_QWORD *)(v144 + 536) = v38;
    serialize(_:at:)(0, (_BYTE **)(v144 + 520));
    serialize(_:at:)(0, (_BYTE **)(v144 + 520));
    *(_QWORD *)(v144 + 544) = v45;
    v39 = (_QWORD *)swift_task_alloc();
    v39[2] = v144 + 520;
    v39[3] = v144 + 528;
    v39[4] = v144 + 536;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
    lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
    Sequence.forEach(_:)();
    swift_task_dealloc();
    _os_log_impl(&dword_24749F000, v44, v43, "updateDosageForDoseEvent: hasCompatibleUnit is true", v36, v42);
    destroyStorage<A>(_:count:)(v37, 0, v35);
    destroyStorage<A>(_:count:)(v38, 0, MEMORY[0x24BEE4AD8] + 8);
    MEMORY[0x24957D398](v36, MEMORY[0x24BEE4260]);
  }
  swift_bridgeObjectRelease();
  *(_QWORD *)(v144 + 912) = 0;
  v34 = *(_QWORD *)(v144 + 808);
  v32 = *(_QWORD *)(v144 + 720);
  v33 = *(_QWORD *)(v144 + 672);

  v138(v32, v33);
  swift_bridgeObjectRetain();
  v16 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v144 + 920) = v16;
  *v16 = *(_QWORD *)(v144 + 384);
  v16[1] = SpecificMedicationsPersistor.updateDosageForDoseEvent(doseEvent:inputDosage:inputDosageUnit:);
  return SpecificMedicationsPersistor.getAsNeededDosageFromHealthApp(for:)(*(_QWORD *)(v144 + 800), v34, *(_QWORD *)(v144 + 656), *(_QWORD *)(v144 + 664));
}

{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t);
  Swift::Double v12;
  id v13;
  Class isa;
  id v15;
  uint64_t v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(uint64_t, uint64_t, uint64_t);
  uint64_t v23;
  uint32_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  NSObject *v31;
  os_log_type_t v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(uint64_t, uint64_t);
  id v36;
  Class v37;
  id v38;
  id v39;
  uint64_t v40;
  uint8_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void (*v46)(uint64_t, uint64_t, uint64_t);
  Swift::Double value;
  uint32_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  NSObject *log;
  os_log_type_t v56;
  uint64_t v57;
  uint64_t v58;
  void (*v59)(uint64_t, uint64_t);
  char v60;
  uint64_t v61;
  uint64_t v62;
  uint8_t *buf;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  void (*v69)(uint64_t, uint64_t, uint64_t);
  uint64_t v70;
  uint32_t size;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  NSObject *oslog;
  os_log_type_t v79;
  uint8_t *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t (*v83)(uint64_t, uint64_t, uint64_t);
  uint64_t v84;
  uint8_t *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t (*v88)(uint64_t, uint64_t, uint64_t);
  uint64_t v89;
  uint8_t *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t (*v93)(uint64_t, uint64_t, uint64_t);
  uint64_t v94;

  v70 = *(_QWORD *)(v0 + 928);
  v69 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 864);
  v1 = *(_QWORD *)(v0 + 712);
  v68 = *(_QWORD *)(v0 + 672);
  *(_QWORD *)(v0 + 384) = v0;
  *(_QWORD *)(v0 + 464) = v70;
  v67 = Logger.wellness.unsafeMutableAddressor();
  swift_beginAccess();
  v69(v1, v67, v68);
  swift_endAccess();
  v72 = swift_allocObject();
  *(_QWORD *)(v72 + 16) = v70;
  oslog = Logger.logObject.getter();
  v79 = static os_log_type_t.debug.getter();
  *(_QWORD *)(v0 + 472) = 12;
  UnsignedInteger<>.init<A>(_:)();
  size = *(_DWORD *)(v0 + 948);
  v74 = swift_allocObject();
  *(_BYTE *)(v74 + 16) = 32;
  v75 = swift_allocObject();
  *(_BYTE *)(v75 + 16) = 8;
  v73 = swift_allocObject();
  *(_QWORD *)(v73 + 16) = partial apply for implicit closure #12 in SpecificMedicationsPersistor.updateDosageForDoseEvent(doseEvent:inputDosage:inputDosageUnit:);
  *(_QWORD *)(v73 + 24) = v72;
  v76 = swift_allocObject();
  *(_QWORD *)(v76 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:);
  *(_QWORD *)(v76 + 24) = v73;
  _allocateUninitializedArray<A>(_:)();
  v77 = v2;
  swift_retain();
  *v77 = partial apply for closure #1 in OSLogArguments.append(_:);
  v77[1] = v74;
  swift_retain();
  v77[2] = partial apply for closure #1 in OSLogArguments.append(_:);
  v77[3] = v75;
  swift_retain();
  v77[4] = partial apply for closure #1 in OSLogArguments.append(_:);
  v77[5] = v76;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(oslog, v79))
  {
    v3 = *(_QWORD *)(v66 + 912);
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    v62 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    v64 = createStorage<A>(capacity:type:)(0);
    v65 = createStorage<A>(capacity:type:)(1);
    v90 = buf;
    v91 = v64;
    v92 = v65;
    serialize(_:at:)(2, &v90);
    serialize(_:at:)(1, &v90);
    v93 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v94 = v74;
    result = closure #1 in osLogInternal(_:log:type:)(&v93, (uint64_t)&v90, (uint64_t)&v91, (uint64_t)&v92);
    if (v3)
      return result;
    v93 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v94 = v75;
    closure #1 in osLogInternal(_:log:type:)(&v93, (uint64_t)&v90, (uint64_t)&v91, (uint64_t)&v92);
    v93 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v94 = v76;
    closure #1 in osLogInternal(_:log:type:)(&v93, (uint64_t)&v90, (uint64_t)&v91, (uint64_t)&v92);
    _os_log_impl(&dword_24749F000, oslog, v79, "updateDosageForDoseEvent: asNeededDosageFromHealthApp (%s)", buf, size);
    destroyStorage<A>(_:count:)(v64, 0, v62);
    destroyStorage<A>(_:count:)(v65, 1, MEMORY[0x24BEE4AD8] + 8);
    MEMORY[0x24957D398](buf, MEMORY[0x24BEE4260]);
    swift_release();
    swift_release();
    swift_release();
    v61 = 0;
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
    v61 = *(_QWORD *)(v66 + 912);
  }
  v59 = *(void (**)(uint64_t, uint64_t))(v66 + 904);
  v57 = *(_QWORD *)(v66 + 712);
  v58 = *(_QWORD *)(v66 + 672);
  v60 = *(_BYTE *)(v66 + 41);

  v59(v57, v58);
  if ((v60 & 1) != 0)
  {
    v23 = *(_QWORD *)(v66 + 928);
    v22 = *(void (**)(uint64_t, uint64_t, uint64_t))(v66 + 864);
    v7 = *(_QWORD *)(v66 + 696);
    v21 = *(_QWORD *)(v66 + 672);
    v20 = Logger.wellness.unsafeMutableAddressor();
    swift_beginAccess();
    v22(v7, v20, v21);
    swift_endAccess();
    v25 = swift_allocObject();
    *(_QWORD *)(v25 + 16) = v23;
    v31 = Logger.logObject.getter();
    v32 = static os_log_type_t.debug.getter();
    *(_QWORD *)(v66 + 480) = 12;
    UnsignedInteger<>.init<A>(_:)();
    v24 = *(_DWORD *)(v66 + 956);
    v27 = swift_allocObject();
    *(_BYTE *)(v27 + 16) = 32;
    v28 = swift_allocObject();
    *(_BYTE *)(v28 + 16) = 8;
    v26 = swift_allocObject();
    *(_QWORD *)(v26 + 16) = partial apply for implicit closure #12 in SpecificMedicationsPersistor.updateDosageForDoseEvent(doseEvent:inputDosage:inputDosageUnit:);
    *(_QWORD *)(v26 + 24) = v25;
    v29 = swift_allocObject();
    *(_QWORD *)(v29 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:);
    *(_QWORD *)(v29 + 24) = v26;
    _allocateUninitializedArray<A>(_:)();
    v30 = v8;
    swift_retain();
    *v30 = partial apply for closure #1 in OSLogArguments.append(_:);
    v30[1] = v27;
    swift_retain();
    v30[2] = partial apply for closure #1 in OSLogArguments.append(_:);
    v30[3] = v28;
    swift_retain();
    v30[4] = partial apply for closure #1 in OSLogArguments.append(_:);
    v30[5] = v29;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(v31, v32))
    {
      v17 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      v18 = createStorage<A>(capacity:type:)(0);
      v19 = createStorage<A>(capacity:type:)(1);
      v80 = v17;
      v81 = v18;
      v82 = v19;
      serialize(_:at:)(2, &v80);
      serialize(_:at:)(1, &v80);
      v83 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v84 = v27;
      result = closure #1 in osLogInternal(_:log:type:)(&v83, (uint64_t)&v80, (uint64_t)&v81, (uint64_t)&v82);
      if (v61)
        return result;
      v83 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v84 = v28;
      closure #1 in osLogInternal(_:log:type:)(&v83, (uint64_t)&v80, (uint64_t)&v81, (uint64_t)&v82);
      v83 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v84 = v29;
      closure #1 in osLogInternal(_:log:type:)(&v83, (uint64_t)&v80, (uint64_t)&v81, (uint64_t)&v82);
      _os_log_impl(&dword_24749F000, v31, v32, "updateDosageForDoseEvent: using healthAppDosage (%s)", v17, v24);
      destroyStorage<A>(_:count:)(v18, 0, v16);
      destroyStorage<A>(_:count:)(v19, 1, MEMORY[0x24BEE4AD8] + 8);
      MEMORY[0x24957D398](v17, MEMORY[0x24BEE4260]);
      swift_release();
      swift_release();
      swift_release();
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
    }
    v12 = *(double *)(v66 + 928);
    v11 = *(void (**)(uint64_t, uint64_t))(v66 + 904);
    v9 = *(_QWORD *)(v66 + 696);
    v10 = *(_QWORD *)(v66 + 672);
    v13 = *(id *)(v66 + 624);

    v11(v9, v10);
    type metadata accessor for NSNumber();
    isa = NSNumber.__allocating_init(value:)(v12).super.super.isa;
    v15 = objc_msgSend(v13, sel_updateForNewDoseQuantity_);

    *(_QWORD *)(v66 + 488) = v15;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v39 = v15;
    goto LABEL_19;
  }
  value = *(double *)(v66 + 632);
  v46 = *(void (**)(uint64_t, uint64_t, uint64_t))(v66 + 864);
  v5 = *(_QWORD *)(v66 + 704);
  v45 = *(_QWORD *)(v66 + 672);
  *(Swift::Double *)(v66 + 496) = value;
  v44 = Logger.wellness.unsafeMutableAddressor();
  swift_beginAccess();
  v46(v5, v44, v45);
  swift_endAccess();
  v49 = swift_allocObject();
  *(Swift::Double *)(v49 + 16) = value;
  log = Logger.logObject.getter();
  v56 = static os_log_type_t.debug.getter();
  *(_QWORD *)(v66 + 504) = 12;
  UnsignedInteger<>.init<A>(_:)();
  v48 = *(_DWORD *)(v66 + 960);
  v51 = swift_allocObject();
  *(_BYTE *)(v51 + 16) = 32;
  v52 = swift_allocObject();
  *(_BYTE *)(v52 + 16) = 8;
  v50 = swift_allocObject();
  *(_QWORD *)(v50 + 16) = partial apply for implicit closure #12 in SpecificMedicationsPersistor.updateDosageForDoseEvent(doseEvent:inputDosage:inputDosageUnit:);
  *(_QWORD *)(v50 + 24) = v49;
  v53 = swift_allocObject();
  *(_QWORD *)(v53 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:);
  *(_QWORD *)(v53 + 24) = v50;
  _allocateUninitializedArray<A>(_:)();
  v54 = v6;
  swift_retain();
  *v54 = partial apply for closure #1 in OSLogArguments.append(_:);
  v54[1] = v51;
  swift_retain();
  v54[2] = partial apply for closure #1 in OSLogArguments.append(_:);
  v54[3] = v52;
  swift_retain();
  v54[4] = partial apply for closure #1 in OSLogArguments.append(_:);
  v54[5] = v53;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (!os_log_type_enabled(log, v56))
  {
    swift_release();
    swift_release();
    swift_release();
    goto LABEL_12;
  }
  v41 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
  v40 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
  v42 = createStorage<A>(capacity:type:)(0);
  v43 = createStorage<A>(capacity:type:)(1);
  v85 = v41;
  v86 = v42;
  v87 = v43;
  serialize(_:at:)(2, &v85);
  serialize(_:at:)(1, &v85);
  v88 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  v89 = v51;
  result = closure #1 in osLogInternal(_:log:type:)(&v88, (uint64_t)&v85, (uint64_t)&v86, (uint64_t)&v87);
  if (!v61)
  {
    v88 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v89 = v52;
    closure #1 in osLogInternal(_:log:type:)(&v88, (uint64_t)&v85, (uint64_t)&v86, (uint64_t)&v87);
    v88 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v89 = v53;
    closure #1 in osLogInternal(_:log:type:)(&v88, (uint64_t)&v85, (uint64_t)&v86, (uint64_t)&v87);
    _os_log_impl(&dword_24749F000, log, v56, "updateDosageForDoseEvent: using inputDosage (%s)", v41, v48);
    destroyStorage<A>(_:count:)(v42, 0, v40);
    destroyStorage<A>(_:count:)(v43, 1, MEMORY[0x24BEE4AD8] + 8);
    MEMORY[0x24957D398](v41, MEMORY[0x24BEE4260]);
    swift_release();
    swift_release();
    swift_release();
LABEL_12:
    v35 = *(void (**)(uint64_t, uint64_t))(v66 + 904);
    v33 = *(_QWORD *)(v66 + 704);
    v34 = *(_QWORD *)(v66 + 672);
    v36 = *(id *)(v66 + 624);

    v35(v33, v34);
    type metadata accessor for NSNumber();
    v37 = NSNumber.__allocating_init(value:)(value).super.super.isa;
    v38 = objc_msgSend(v36, sel_updateForNewDoseQuantity_);

    *(_QWORD *)(v66 + 512) = v38;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v39 = v38;
LABEL_19:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(id))(*(_QWORD *)(v66 + 384) + 8))(v39);
  }
  return result;
}

uint64_t SpecificMedicationsPersistor.updateDosageForDoseEvent(doseEvent:inputDosage:inputDosageUnit:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v7;
  _QWORD *v8;

  v8 = *(_QWORD **)v2;
  v7 = *(_QWORD *)(*(_QWORD *)v2 + 808);
  v8[48] = *(_QWORD *)v2;
  v8[103] = a1;
  v8[104] = a2;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  v8[42] = a1;
  v8[43] = a2;
  swift_bridgeObjectRetain();
  v3 = (_QWORD *)swift_task_alloc();
  v8[105] = v3;
  *v3 = v8[48];
  v3[1] = SpecificMedicationsPersistor.updateDosageForDoseEvent(doseEvent:inputDosage:inputDosageUnit:);
  return SpecificMedicationsPersistor.getAsNeededDosageUnit(for:dosageCount:)(v8[100], v7, v8[82], v8[83], 1.0);
}

{
  _QWORD *v2;
  _QWORD *v4;

  v4 = (_QWORD *)*v2;
  v4[48] = *v2;
  v4[106] = a1;
  v4[107] = a2;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  return swift_task_switch();
}

uint64_t SpecificMedicationsPersistor.updateDosageForDoseEvent(doseEvent:inputDosage:inputDosageUnit:)(double a1)
{
  uint64_t *v1;
  uint64_t v3;

  v3 = *v1;
  *(_QWORD *)(v3 + 384) = *v1;
  *(double *)(v3 + 928) = a1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  return swift_task_switch();
}

uint64_t SpecificMedicationsPersistor.buildConfirmationForScheduledOrAsNeeded(doseEvent:requestedMedStatus:)(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)(v4 + 432) = a4;
  *(_QWORD *)(v4 + 424) = a3;
  *(_BYTE *)(v4 + 553) = a2 & 1;
  *(_QWORD *)(v4 + 416) = a1;
  *(_QWORD *)(v4 + 128) = v4;
  *(_QWORD *)(v4 + 136) = 0;
  *(_BYTE *)(v4 + 552) = 0;
  *(_QWORD *)(v4 + 112) = 0;
  *(_QWORD *)(v4 + 120) = 0;
  *(_QWORD *)(v4 + 152) = 0;
  *(_QWORD *)(v4 + 160) = 0;
  *(_QWORD *)(v4 + 208) = 0;
  *(_QWORD *)(v4 + 216) = 0;
  *(_QWORD *)(v4 + 264) = 0;
  *(_QWORD *)(v4 + 272) = 0;
  *(_QWORD *)(v4 + 352) = 0;
  *(_QWORD *)(v4 + 360) = 0;
  v5 = type metadata accessor for Logger();
  *(_QWORD *)(v4 + 440) = v5;
  *(_QWORD *)(v4 + 448) = *(_QWORD *)(v5 - 8);
  *(_QWORD *)(v4 + 456) = swift_task_alloc();
  *(_QWORD *)(v4 + 464) = swift_task_alloc();
  *(_QWORD *)(v4 + 472) = swift_task_alloc();
  *(_QWORD *)(v4 + 480) = swift_task_alloc();
  *(_QWORD *)(v4 + 136) = a1;
  *(_BYTE *)(v4 + 552) = a2 & 1;
  *(_QWORD *)(v4 + 112) = a3;
  *(_QWORD *)(v4 + 120) = a4;
  return swift_task_switch();
}

uint64_t SpecificMedicationsPersistor.buildConfirmationForScheduledOrAsNeeded(doseEvent:requestedMedStatus:)()
{
  uint64_t v0;
  void *v1;
  id v2;
  uint64_t v3;
  _QWORD *v4;
  id v5;
  id v6;
  id v7;
  id v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint8_t *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint32_t v27;
  os_log_type_t v28;
  NSObject *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint8_t *v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint32_t v42;
  os_log_type_t v43;
  NSObject *log;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint8_t *v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint32_t size;
  os_log_type_t v58;
  NSObject *oslog;
  uint64_t v60;
  char v61;
  BOOL v62;
  id v63;
  id v64;
  char v65;
  BOOL v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint8_t *buf;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint32_t v78;
  os_log_type_t v79;
  NSObject *v80;
  uint64_t v81;
  char v82;
  BOOL v83;
  uint64_t v84;

  v1 = *(void **)(v0 + 416);
  *(_QWORD *)(v0 + 128) = v0;
  if (isLogged(doseEvent:)(v1))
  {
    v83 = (*(_BYTE *)(v84 + 553) & 1) != 0;
    v2 = *(id *)(v84 + 416);
    if (v83)
    {

    }
    else
    {
      *(_QWORD *)(v84 + 400) = objc_msgSend(*(id *)(v84 + 416), sel_status);
      *(_QWORD *)(v84 + 408) = 5;
      type metadata accessor for HKMedicationDoseEventStatus();
      lazy protocol witness table accessor for type HKMedicationDoseEventStatus and conformance HKMedicationDoseEventStatus();
      v82 = == infix<A>(_:_:)();

      if ((v82 & 1) != 0)
      {
        v3 = *(_QWORD *)(v84 + 480);
        v75 = *(_QWORD *)(v84 + 448);
        v77 = *(_QWORD *)(v84 + 440);
        v76 = Logger.wellnessIntents.unsafeMutableAddressor();
        swift_beginAccess();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v75 + 16))(v3, v76, v77);
        swift_endAccess();
        v80 = Logger.logObject.getter();
        v79 = static os_log_type_t.debug.getter();
        *(_QWORD *)(v84 + 344) = 2;
        lazy protocol witness table accessor for type UInt32 and conformance UInt32();
        lazy protocol witness table accessor for type UInt32 and conformance UInt32();
        lazy protocol witness table accessor for type Int and conformance Int();
        UnsignedInteger<>.init<A>(_:)();
        v78 = *(_DWORD *)(v84 + 568);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
        v81 = _allocateUninitializedArray<A>(_:)();
        if (os_log_type_enabled(v80, v79))
        {
          buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
          v70 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
          v72 = createStorage<A>(capacity:type:)(0);
          v73 = createStorage<A>(capacity:type:)(0);
          *(_QWORD *)(v84 + 368) = buf;
          *(_QWORD *)(v84 + 376) = v72;
          *(_QWORD *)(v84 + 384) = v73;
          serialize(_:at:)(0, (_BYTE **)(v84 + 368));
          serialize(_:at:)(0, (_BYTE **)(v84 + 368));
          *(_QWORD *)(v84 + 392) = v81;
          v74 = (_QWORD *)swift_task_alloc();
          v74[2] = v84 + 368;
          v74[3] = v84 + 376;
          v74[4] = v84 + 384;
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
          lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
          Sequence.forEach(_:)();
          swift_task_dealloc();
          _os_log_impl(&dword_24749F000, v80, v79, "requested & existing status both skipped, returning .statusBothSkipped", buf, v78);
          destroyStorage<A>(_:count:)(v72, 0, v70);
          destroyStorage<A>(_:count:)(v73, 0, MEMORY[0x24BEE4AD8] + 8);
          MEMORY[0x24957D398](buf, MEMORY[0x24BEE4260]);
        }
        swift_bridgeObjectRelease();
        v68 = *(_QWORD *)(v84 + 480);
        v67 = *(_QWORD *)(v84 + 448);
        v69 = *(_QWORD *)(v84 + 440);

        (*(void (**)(uint64_t, uint64_t))(v67 + 8))(v68, v69);
        v4 = (_QWORD *)swift_task_alloc();
        *(_QWORD *)(v84 + 488) = v4;
        *v4 = *(_QWORD *)(v84 + 128);
        v4[1] = SpecificMedicationsPersistor.buildConfirmationForScheduledOrAsNeeded(doseEvent:requestedMedStatus:);
        return SpecificMedicationsPersistor.buildMatchedMedName(from:shouldIncludeAsNeededParams:)(*(_QWORD *)(v84 + 416), 1, *(_QWORD *)(v84 + 424), *(_QWORD *)(v84 + 432));
      }
    }
    v66 = (*(_BYTE *)(v84 + 553) & 1) != 1;
    v5 = *(id *)(v84 + 416);
    if (v66)
    {
      v63 = *(id *)(v84 + 416);

      v7 = v63;
    }
    else
    {
      *(_QWORD *)(v84 + 328) = objc_msgSend(*(id *)(v84 + 416), sel_status);
      *(_QWORD *)(v84 + 336) = 4;
      type metadata accessor for HKMedicationDoseEventStatus();
      lazy protocol witness table accessor for type HKMedicationDoseEventStatus and conformance HKMedicationDoseEventStatus();
      v65 = == infix<A>(_:_:)();
      v64 = *(id *)(v84 + 416);

      v6 = v64;
      if ((v65 & 1) != 0)
      {

LABEL_18:
        v9 = *(_QWORD *)(v84 + 472);
        v54 = *(_QWORD *)(v84 + 448);
        v56 = *(_QWORD *)(v84 + 440);
        v55 = Logger.wellnessIntents.unsafeMutableAddressor();
        swift_beginAccess();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v54 + 16))(v9, v55, v56);
        swift_endAccess();
        oslog = Logger.logObject.getter();
        v58 = static os_log_type_t.debug.getter();
        *(_QWORD *)(v84 + 256) = 2;
        lazy protocol witness table accessor for type UInt32 and conformance UInt32();
        lazy protocol witness table accessor for type UInt32 and conformance UInt32();
        lazy protocol witness table accessor for type Int and conformance Int();
        UnsignedInteger<>.init<A>(_:)();
        size = *(_DWORD *)(v84 + 564);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
        v60 = _allocateUninitializedArray<A>(_:)();
        if (os_log_type_enabled(oslog, v58))
        {
          v50 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
          v49 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
          v51 = createStorage<A>(capacity:type:)(0);
          v52 = createStorage<A>(capacity:type:)(0);
          *(_QWORD *)(v84 + 280) = v50;
          *(_QWORD *)(v84 + 288) = v51;
          *(_QWORD *)(v84 + 296) = v52;
          serialize(_:at:)(0, (_BYTE **)(v84 + 280));
          serialize(_:at:)(0, (_BYTE **)(v84 + 280));
          *(_QWORD *)(v84 + 304) = v60;
          v53 = (_QWORD *)swift_task_alloc();
          v53[2] = v84 + 280;
          v53[3] = v84 + 288;
          v53[4] = v84 + 296;
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
          lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
          Sequence.forEach(_:)();
          swift_task_dealloc();
          _os_log_impl(&dword_24749F000, oslog, v58, "needs confirmation whether to log as needed, returning .needsConfirmLogAsNeeded", v50, size);
          destroyStorage<A>(_:count:)(v51, 0, v49);
          destroyStorage<A>(_:count:)(v52, 0, MEMORY[0x24BEE4AD8] + 8);
          MEMORY[0x24957D398](v50, MEMORY[0x24BEE4260]);
        }
        swift_bridgeObjectRelease();
        v47 = *(_QWORD *)(v84 + 472);
        v46 = *(_QWORD *)(v84 + 448);
        v48 = *(_QWORD *)(v84 + 440);

        (*(void (**)(uint64_t, uint64_t))(v46 + 8))(v47, v48);
        v10 = (_QWORD *)swift_task_alloc();
        *(_QWORD *)(v84 + 504) = v10;
        *v10 = *(_QWORD *)(v84 + 128);
        v10[1] = SpecificMedicationsPersistor.buildConfirmationForScheduledOrAsNeeded(doseEvent:requestedMedStatus:);
        return SpecificMedicationsPersistor.buildMatchedMedName(from:shouldIncludeAsNeededParams:)(*(_QWORD *)(v84 + 416), 1, *(_QWORD *)(v84 + 424), *(_QWORD *)(v84 + 432));
      }
    }
    v62 = (*(_BYTE *)(v84 + 553) & 1) != 1;
    v8 = *(id *)(v84 + 416);
    if (v62)
    {
      v61 = 0;
    }
    else
    {
      *(_QWORD *)(v84 + 312) = objc_msgSend(*(id *)(v84 + 416), sel_status);
      *(_QWORD *)(v84 + 320) = 5;
      type metadata accessor for HKMedicationDoseEventStatus();
      lazy protocol witness table accessor for type HKMedicationDoseEventStatus and conformance HKMedicationDoseEventStatus();
      v61 = == infix<A>(_:_:)();
    }

    if ((v61 & 1) != 0)
      goto LABEL_18;
    v12 = *(_QWORD *)(v84 + 464);
    v39 = *(_QWORD *)(v84 + 448);
    v41 = *(_QWORD *)(v84 + 440);
    v40 = Logger.wellnessIntents.unsafeMutableAddressor();
    swift_beginAccess();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v39 + 16))(v12, v40, v41);
    swift_endAccess();
    log = Logger.logObject.getter();
    v43 = static os_log_type_t.debug.getter();
    *(_QWORD *)(v84 + 200) = 2;
    lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    lazy protocol witness table accessor for type Int and conformance Int();
    UnsignedInteger<>.init<A>(_:)();
    v42 = *(_DWORD *)(v84 + 560);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
    v45 = _allocateUninitializedArray<A>(_:)();
    if (os_log_type_enabled(log, v43))
    {
      v35 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      v36 = createStorage<A>(capacity:type:)(0);
      v37 = createStorage<A>(capacity:type:)(0);
      *(_QWORD *)(v84 + 224) = v35;
      *(_QWORD *)(v84 + 232) = v36;
      *(_QWORD *)(v84 + 240) = v37;
      serialize(_:at:)(0, (_BYTE **)(v84 + 224));
      serialize(_:at:)(0, (_BYTE **)(v84 + 224));
      *(_QWORD *)(v84 + 248) = v45;
      v38 = (_QWORD *)swift_task_alloc();
      v38[2] = v84 + 224;
      v38[3] = v84 + 232;
      v38[4] = v84 + 240;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
      lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
      Sequence.forEach(_:)();
      swift_task_dealloc();
      _os_log_impl(&dword_24749F000, log, v43, "needs confirmation whether to update status, returning .needsConfirmUpdateToStatus", v35, v42);
      destroyStorage<A>(_:count:)(v36, 0, v34);
      destroyStorage<A>(_:count:)(v37, 0, MEMORY[0x24BEE4AD8] + 8);
      MEMORY[0x24957D398](v35, MEMORY[0x24BEE4260]);
    }
    swift_bridgeObjectRelease();
    v32 = *(_QWORD *)(v84 + 464);
    v31 = *(_QWORD *)(v84 + 448);
    v33 = *(_QWORD *)(v84 + 440);

    (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v32, v33);
    v13 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v84 + 520) = v13;
    *v13 = *(_QWORD *)(v84 + 128);
    v13[1] = SpecificMedicationsPersistor.buildConfirmationForScheduledOrAsNeeded(doseEvent:requestedMedStatus:);
    return SpecificMedicationsPersistor.buildMatchedMedName(from:shouldIncludeAsNeededParams:)(*(_QWORD *)(v84 + 416), 1, *(_QWORD *)(v84 + 424), *(_QWORD *)(v84 + 432));
  }
  else
  {
    v14 = *(_QWORD *)(v84 + 456);
    v24 = *(_QWORD *)(v84 + 448);
    v26 = *(_QWORD *)(v84 + 440);
    v25 = Logger.wellnessIntents.unsafeMutableAddressor();
    swift_beginAccess();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v24 + 16))(v14, v25, v26);
    swift_endAccess();
    v29 = Logger.logObject.getter();
    v28 = static os_log_type_t.debug.getter();
    *(_QWORD *)(v84 + 144) = 2;
    lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    lazy protocol witness table accessor for type Int and conformance Int();
    UnsignedInteger<>.init<A>(_:)();
    v27 = *(_DWORD *)(v84 + 556);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
    v30 = _allocateUninitializedArray<A>(_:)();
    if (os_log_type_enabled(v29, v28))
    {
      v20 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      v21 = createStorage<A>(capacity:type:)(0);
      v22 = createStorage<A>(capacity:type:)(0);
      *(_QWORD *)(v84 + 168) = v20;
      *(_QWORD *)(v84 + 176) = v21;
      *(_QWORD *)(v84 + 184) = v22;
      serialize(_:at:)(0, (_BYTE **)(v84 + 168));
      serialize(_:at:)(0, (_BYTE **)(v84 + 168));
      *(_QWORD *)(v84 + 192) = v30;
      v23 = (_QWORD *)swift_task_alloc();
      v23[2] = v84 + 168;
      v23[3] = v84 + 176;
      v23[4] = v84 + 184;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
      lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
      Sequence.forEach(_:)();
      swift_task_dealloc();
      _os_log_impl(&dword_24749F000, v29, v28, "one doseEvent found, but needs confirmation whether to log as scheduled, returning .needsConfirmLogAsScheduled", v20, v27);
      destroyStorage<A>(_:count:)(v21, 0, v19);
      destroyStorage<A>(_:count:)(v22, 0, MEMORY[0x24BEE4AD8] + 8);
      MEMORY[0x24957D398](v20, MEMORY[0x24BEE4260]);
    }
    swift_bridgeObjectRelease();
    v17 = *(_QWORD *)(v84 + 456);
    v16 = *(_QWORD *)(v84 + 448);
    v18 = *(_QWORD *)(v84 + 440);

    (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v17, v18);
    v15 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v84 + 536) = v15;
    *v15 = *(_QWORD *)(v84 + 128);
    v15[1] = SpecificMedicationsPersistor.buildConfirmationForScheduledOrAsNeeded(doseEvent:requestedMedStatus:);
    return SpecificMedicationsPersistor.buildMatchedMedName(from:shouldIncludeAsNeededParams:)(*(_QWORD *)(v84 + 416), 1, *(_QWORD *)(v84 + 424), *(_QWORD *)(v84 + 432));
  }
}

{
  uint64_t v0;
  char *v1;
  char *v2;
  _QWORD *v3;
  id v4;
  _QWORD *v6;
  Class isa;
  id v8;
  char *v9;

  v8 = *(id *)(v0 + 496);
  *(_QWORD *)(v0 + 128) = v0;
  *(_QWORD *)(v0 + 352) = v8;
  type metadata accessor for LogSpecificMedicationsIntentResponse();
  v9 = LogSpecificMedicationsIntentResponse.__allocating_init(code:userActivity:)(108, 0);
  v1 = v9;
  v2 = v9;
  *(_QWORD *)(v0 + 360) = v9;
  type metadata accessor for MatchedMedName();
  _allocateUninitializedArray<A>(_:)();
  v6 = v3;
  v4 = v8;
  *v6 = v8;
  _finalizeUninitializedArray<A>(_:)();
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v9, sel_setMatchingMeds_, isa);

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(char *))(*(_QWORD *)(v0 + 128) + 8))(v9);
}

{
  uint64_t v0;
  char *v1;
  char *v2;
  _QWORD *v3;
  id v4;
  _QWORD *v6;
  Class isa;
  id v8;
  char *v9;

  v8 = *(id *)(v0 + 512);
  *(_QWORD *)(v0 + 128) = v0;
  *(_QWORD *)(v0 + 264) = v8;
  type metadata accessor for LogSpecificMedicationsIntentResponse();
  v9 = LogSpecificMedicationsIntentResponse.__allocating_init(code:userActivity:)(107, 0);
  v1 = v9;
  v2 = v9;
  *(_QWORD *)(v0 + 272) = v9;
  type metadata accessor for MatchedMedName();
  _allocateUninitializedArray<A>(_:)();
  v6 = v3;
  v4 = v8;
  *v6 = v8;
  _finalizeUninitializedArray<A>(_:)();
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v9, sel_setMatchingMeds_, isa);

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(char *))(*(_QWORD *)(v0 + 128) + 8))(v9);
}

{
  uint64_t v0;
  char *v1;
  char *v2;
  _QWORD *v3;
  id v4;
  _QWORD *v6;
  Class isa;
  id v8;
  char *v9;

  v8 = *(id *)(v0 + 528);
  *(_QWORD *)(v0 + 128) = v0;
  *(_QWORD *)(v0 + 208) = v8;
  type metadata accessor for LogSpecificMedicationsIntentResponse();
  v9 = LogSpecificMedicationsIntentResponse.__allocating_init(code:userActivity:)(109, 0);
  v1 = v9;
  v2 = v9;
  *(_QWORD *)(v0 + 216) = v9;
  type metadata accessor for MatchedMedName();
  _allocateUninitializedArray<A>(_:)();
  v6 = v3;
  v4 = v8;
  *v6 = v8;
  _finalizeUninitializedArray<A>(_:)();
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v9, sel_setMatchingMeds_, isa);

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(char *))(*(_QWORD *)(v0 + 128) + 8))(v9);
}

{
  uint64_t v0;
  char *v1;
  char *v2;
  _QWORD *v3;
  id v4;
  _QWORD *v6;
  Class isa;
  id v8;
  char *v9;

  v8 = *(id *)(v0 + 544);
  *(_QWORD *)(v0 + 128) = v0;
  *(_QWORD *)(v0 + 152) = v8;
  type metadata accessor for LogSpecificMedicationsIntentResponse();
  v9 = LogSpecificMedicationsIntentResponse.__allocating_init(code:userActivity:)(106, 0);
  v1 = v9;
  v2 = v9;
  *(_QWORD *)(v0 + 160) = v9;
  type metadata accessor for MatchedMedName();
  _allocateUninitializedArray<A>(_:)();
  v6 = v3;
  v4 = v8;
  *v6 = v8;
  _finalizeUninitializedArray<A>(_:)();
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v9, sel_setMatchingMeds_, isa);

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(char *))(*(_QWORD *)(v0 + 128) + 8))(v9);
}

uint64_t SpecificMedicationsPersistor.buildConfirmationForScheduledOrAsNeeded(doseEvent:requestedMedStatus:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;

  v3 = *v1;
  *(_QWORD *)(v3 + 128) = *v1;
  *(_QWORD *)(v3 + 496) = a1;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t *v1;
  uint64_t v3;

  v3 = *v1;
  *(_QWORD *)(v3 + 128) = *v1;
  *(_QWORD *)(v3 + 512) = a1;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t *v1;
  uint64_t v3;

  v3 = *v1;
  *(_QWORD *)(v3 + 128) = *v1;
  *(_QWORD *)(v3 + 528) = a1;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t *v1;
  uint64_t v3;

  v3 = *v1;
  *(_QWORD *)(v3 + 128) = *v1;
  *(_QWORD *)(v3 + 544) = a1;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t SpecificMedicationsPersistor.buildMatchedMedName(from:shouldIncludeAsNeededParams:)(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)(v4 + 232) = a4;
  *(_QWORD *)(v4 + 224) = a3;
  *(_BYTE *)(v4 + 457) = a2 & 1;
  *(_QWORD *)(v4 + 216) = a1;
  *(_QWORD *)(v4 + 136) = v4;
  *(_QWORD *)(v4 + 144) = 0;
  *(_BYTE *)(v4 + 456) = 0;
  *(_QWORD *)(v4 + 40) = 0;
  *(_QWORD *)(v4 + 48) = 0;
  *(_QWORD *)(v4 + 56) = 0;
  *(_QWORD *)(v4 + 64) = 0;
  *(_QWORD *)(v4 + 152) = 0;
  *(_QWORD *)(v4 + 200) = 0;
  *(_QWORD *)(v4 + 104) = 0;
  *(_QWORD *)(v4 + 112) = 0;
  *(_QWORD *)(v4 + 208) = 0;
  *(_QWORD *)(v4 + 120) = 0;
  *(_QWORD *)(v4 + 128) = 0;
  v5 = type metadata accessor for Logger();
  *(_QWORD *)(v4 + 240) = v5;
  *(_QWORD *)(v4 + 248) = *(_QWORD *)(v5 - 8);
  *(_QWORD *)(v4 + 256) = swift_task_alloc();
  v6 = type metadata accessor for UUID();
  *(_QWORD *)(v4 + 264) = v6;
  *(_QWORD *)(v4 + 272) = *(_QWORD *)(v6 - 8);
  *(_QWORD *)(v4 + 280) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  *(_QWORD *)(v4 + 288) = swift_task_alloc();
  v7 = type metadata accessor for Date();
  *(_QWORD *)(v4 + 296) = v7;
  *(_QWORD *)(v4 + 304) = *(_QWORD *)(v7 - 8);
  *(_QWORD *)(v4 + 312) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  *(_QWORD *)(v4 + 320) = swift_task_alloc();
  *(_QWORD *)(v4 + 328) = swift_task_alloc();
  *(_QWORD *)(v4 + 144) = a1;
  *(_BYTE *)(v4 + 456) = a2 & 1;
  *(_QWORD *)(v4 + 40) = a3;
  *(_QWORD *)(v4 + 48) = a4;
  return swift_task_switch();
}

uint64_t SpecificMedicationsPersistor.buildMatchedMedName(from:shouldIncludeAsNeededParams:)()
{
  _QWORD *v0;
  void *v1;
  uint64_t v2;
  Swift::String v3;
  INObject *v4;
  void *v5;
  uint64_t v6;
  _QWORD *v7;
  id v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  void *v21;
  void *v22;
  id v23;

  v1 = (void *)v0[27];
  v21 = v1;
  v0[17] = v0;
  v17 = objc_msgSend(v1, sel_medicationIdentifier);
  v20 = objc_msgSend(v17, sel_underlyingIdentifier);
  v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v19 = v2;
  v0[42] = v18;
  v0[43] = v2;
  v0[7] = v18;
  v0[8] = v2;

  type metadata accessor for MatchedMedName();
  v3 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Match", 5uLL, 1);
  INObject.__allocating_init(identifier:display:)(v4, (Swift::String_optional)0, v3);
  v22 = v5;
  v0[44] = v5;
  v0[19] = v5;
  v23 = objc_msgSend(v21, sel_scheduleItemIdentifier);
  if (v23)
  {
    v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v13 = v6;

    v14 = v12;
    v15 = v13;
  }
  else
  {
    v14 = 0;
    v15 = 0;
  }
  if (v15)
  {
    v10 = MEMORY[0x24957CFB4](v14);
    swift_bridgeObjectRelease();
    v11 = (void *)v10;
  }
  else
  {
    v11 = 0;
  }
  objc_msgSend(v22, sel_setScheduleID_);

  swift_bridgeObjectRetain();
  v9 = (id)MEMORY[0x24957CFB4](v18, v19);
  swift_bridgeObjectRelease();
  objc_msgSend(v22, sel_setMedicationID_, v9);

  swift_bridgeObjectRetain();
  v7 = (_QWORD *)swift_task_alloc();
  v16[45] = v7;
  *v7 = v16[17];
  v7[1] = SpecificMedicationsPersistor.buildMatchedMedName(from:shouldIncludeAsNeededParams:);
  return SpecificMedicationsPersistor.displayNameFor(identifier:)(v18, v19, v16[28], v16[29]);
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t countAndFlagsBits;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v10;
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint8_t *buf;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  id v35;
  uint32_t size;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  _QWORD *v92;
  NSObject *oslog;
  os_log_type_t v94;
  id v95;
  id v96;
  id v97;
  id v98;
  id v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  Class isa;
  Class v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  id v109;
  id v110;
  uint64_t v111;
  void *v112;
  id v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  id v119;
  uint64_t v120;
  uint64_t v121;
  void *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  void *v130;
  void *v131;
  void *v132;
  id v133;
  uint64_t v134;
  uint8_t *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t (*v138)(uint64_t, uint64_t, uint64_t);
  uint64_t v139;

  v1 = v0[47];
  v2 = v0[46];
  v0[17] = v0;
  v0[11] = v2;
  v0[12] = v1;
  if (v0[12])
  {
    v3 = *(_QWORD *)(v134 + 96);
    *(_QWORD *)(v134 + 72) = *(_QWORD *)(v134 + 88);
    *(_QWORD *)(v134 + 80) = v3;
  }
  else
  {
    *(Swift::String *)(v134 + 72) = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Unknown Name", 0xCuLL, 1);
    outlined destroy of String.UTF8View();
  }
  v130 = *(void **)(v134 + 352);
  v132 = *(void **)(v134 + 216);
  v131 = (void *)MEMORY[0x24957CFB4](*(_QWORD *)(v134 + 72));
  swift_bridgeObjectRelease();
  objc_msgSend(v130, sel_setName_, v131);

  v133 = objc_msgSend(v132, sel_scheduledDate);
  if (v133)
  {
    v129 = *(_QWORD *)(v134 + 328);
    v126 = *(_QWORD *)(v134 + 312);
    v127 = *(_QWORD *)(v134 + 304);
    v128 = *(_QWORD *)(v134 + 296);
    static Date._unconditionallyBridgeFromObjectiveC(_:)();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v127 + 32))(v129, v126, v128);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v127 + 56))(v129, 0, 1, v128);

  }
  else
  {
    (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v134 + 304) + 56))(*(_QWORD *)(v134 + 328), 1, 1, *(_QWORD *)(v134 + 296));
  }
  v123 = *(_QWORD *)(v134 + 328);
  v124 = getFormattedTimeString(time:)(v123);
  v125 = v4;
  outlined destroy of Date?(v123);
  if (v125)
  {
    v121 = MEMORY[0x24957CFB4](v124);
    swift_bridgeObjectRelease();
    v122 = (void *)v121;
  }
  else
  {
    v122 = 0;
  }
  v117 = *(_QWORD *)(v134 + 320);
  v114 = *(_QWORD *)(v134 + 312);
  v115 = *(_QWORD *)(v134 + 304);
  v116 = *(_QWORD *)(v134 + 296);
  v113 = *(id *)(v134 + 216);
  objc_msgSend(*(id *)(v134 + 352), sel_setSchedule_);

  v119 = objc_msgSend(v113, sel_startDate);
  static Date._unconditionallyBridgeFromObjectiveC(_:)();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v115 + 32))(v117, v114, v116);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v115 + 56))(v117, 0, 1, v116);
  v118 = getFormattedTimeString(time:)(v117);
  v120 = v5;
  outlined destroy of Date?(v117);

  if (v120)
  {
    v111 = MEMORY[0x24957CFB4](v118);
    swift_bridgeObjectRelease();
    v112 = (void *)v111;
  }
  else
  {
    v112 = 0;
  }
  v109 = *(id *)(v134 + 216);
  objc_msgSend(*(id *)(v134 + 352), sel_setLoggedTime_);

  v110 = objc_msgSend(v109, sel_persistedUUID);
  if (v110)
  {
    v108 = *(_QWORD *)(v134 + 288);
    v105 = *(_QWORD *)(v134 + 280);
    v106 = *(_QWORD *)(v134 + 272);
    v107 = *(_QWORD *)(v134 + 264);
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v106 + 32))(v108, v105, v107);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v106 + 56))(v108, 0, 1, v107);

  }
  else
  {
    (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v134 + 272) + 56))(*(_QWORD *)(v134 + 288), 1, 1, *(_QWORD *)(v134 + 264));
  }
  if ((*(unsigned int (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)(v134 + 272) + 48))(*(_QWORD *)(v134 + 288), 1, *(_QWORD *)(v134 + 264)) == 1)
  {
    v104 = 0;
  }
  else
  {
    v102 = *(_QWORD *)(v134 + 288);
    v100 = *(_QWORD *)(v134 + 272);
    v101 = *(_QWORD *)(v134 + 264);
    isa = UUID._bridgeToObjectiveC()().super.isa;
    (*(void (**)(uint64_t, uint64_t))(v100 + 8))(v102, v101);
    v104 = isa;
  }
  v99 = *(id *)(v134 + 216);
  objc_msgSend(*(id *)(v134 + 352), sel_setPersistedUUID_);

  *(_QWORD *)(v134 + 160) = objc_msgSend(v99, sel_status);
  *(_QWORD *)(v134 + 168) = 4;
  type metadata accessor for HKMedicationDoseEventStatus();
  lazy protocol witness table accessor for type HKMedicationDoseEventStatus and conformance HKMedicationDoseEventStatus();
  if ((== infix<A>(_:_:)() & 1) != 0)
  {
    v97 = *(id *)(v134 + 352);
    countAndFlagsBits = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("taken", 5uLL, 1)._countAndFlagsBits;
    v98 = (id)MEMORY[0x24957CFB4](countAndFlagsBits);
    swift_bridgeObjectRelease();
    objc_msgSend(v97, sel_setCompletionStatus_, v98);

  }
  else
  {
    *(_QWORD *)(v134 + 176) = objc_msgSend(*(id *)(v134 + 216), sel_status);
    *(_QWORD *)(v134 + 184) = 5;
    if ((== infix<A>(_:_:)() & 1) != 0)
    {
      v95 = *(id *)(v134 + 352);
      v7 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("skipped", 7uLL, 1)._countAndFlagsBits;
      v96 = (id)MEMORY[0x24957CFB4](v7);
      swift_bridgeObjectRelease();
      objc_msgSend(v95, sel_setCompletionStatus_, v96);

    }
    else
    {
      objc_msgSend(*(id *)(v134 + 352), sel_setCompletionStatus_, 0);
    }
  }
  if ((*(_BYTE *)(v134 + 457) & 1) != 0)
  {
    v8 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v134 + 384) = v8;
    *v8 = *(_QWORD *)(v134 + 136);
    v8[1] = SpecificMedicationsPersistor.buildMatchedMedName(from:shouldIncludeAsNeededParams:);
    return SpecificMedicationsPersistor.getAsNeededStrengthFromHealthApp(for:)(*(_QWORD *)(v134 + 336), *(_QWORD *)(v134 + 344), *(_QWORD *)(v134 + 224), *(_QWORD *)(v134 + 232));
  }
  else
  {
    v35 = *(id *)(v134 + 352);
    v33 = *(_QWORD *)(v134 + 344);
    v32 = *(_QWORD *)(v134 + 336);
    v10 = *(_QWORD *)(v134 + 256);
    v29 = *(_QWORD *)(v134 + 248);
    v31 = *(_QWORD *)(v134 + 240);
    v34 = *(id *)(v134 + 216);
    v30 = Logger.wellnessIntents.unsafeMutableAddressor();
    swift_beginAccess();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v29 + 16))(v10, v30, v31);
    swift_endAccess();
    v11 = v35;
    v37 = swift_allocObject();
    *(_QWORD *)(v37 + 16) = v35;
    swift_bridgeObjectRetain();
    v39 = swift_allocObject();
    *(_QWORD *)(v39 + 16) = v32;
    *(_QWORD *)(v39 + 24) = v33;
    v12 = v35;
    v41 = swift_allocObject();
    *(_QWORD *)(v41 + 16) = v35;
    v13 = v35;
    v43 = swift_allocObject();
    *(_QWORD *)(v43 + 16) = v35;
    v14 = v35;
    v45 = swift_allocObject();
    *(_QWORD *)(v45 + 16) = v35;
    v15 = v34;
    v47 = swift_allocObject();
    *(_QWORD *)(v47 + 16) = v34;
    v16 = v35;
    v49 = swift_allocObject();
    *(_QWORD *)(v49 + 16) = v35;
    v17 = v35;
    v51 = swift_allocObject();
    *(_QWORD *)(v51 + 16) = v35;
    v18 = v35;
    v53 = swift_allocObject();
    *(_QWORD *)(v53 + 16) = v35;
    v19 = v35;
    v55 = swift_allocObject();
    *(_QWORD *)(v55 + 16) = v35;
    v20 = v35;
    v57 = swift_allocObject();
    *(_QWORD *)(v57 + 16) = v35;
    oslog = Logger.logObject.getter();
    v94 = static os_log_type_t.debug.getter();
    *(_QWORD *)(v134 + 192) = 112;
    lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    lazy protocol witness table accessor for type Int and conformance Int();
    UnsignedInteger<>.init<A>(_:)();
    size = *(_DWORD *)(v134 + 460);
    v59 = swift_allocObject();
    *(_BYTE *)(v59 + 16) = 32;
    v60 = swift_allocObject();
    *(_BYTE *)(v60 + 16) = 8;
    v38 = swift_allocObject();
    *(_QWORD *)(v38 + 16) = partial apply for implicit closure #2 in SpecificMedicationsPersistor.buildMatchedMedName(from:shouldIncludeAsNeededParams:);
    *(_QWORD *)(v38 + 24) = v37;
    v61 = swift_allocObject();
    *(_QWORD *)(v61 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:);
    *(_QWORD *)(v61 + 24) = v38;
    v62 = swift_allocObject();
    *(_BYTE *)(v62 + 16) = 32;
    v63 = swift_allocObject();
    *(_BYTE *)(v63 + 16) = 8;
    v40 = swift_allocObject();
    *(_QWORD *)(v40 + 16) = partial apply for implicit closure #4 in LogQuantityIntentHandler.handle(intent:);
    *(_QWORD *)(v40 + 24) = v39;
    v64 = swift_allocObject();
    *(_QWORD *)(v64 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:);
    *(_QWORD *)(v64 + 24) = v40;
    v65 = swift_allocObject();
    *(_BYTE *)(v65 + 16) = 32;
    v66 = swift_allocObject();
    *(_BYTE *)(v66 + 16) = 8;
    v42 = swift_allocObject();
    *(_QWORD *)(v42 + 16) = partial apply for implicit closure #4 in SpecificMedicationsPersistor.buildMatchedMedName(from:shouldIncludeAsNeededParams:);
    *(_QWORD *)(v42 + 24) = v41;
    v67 = swift_allocObject();
    *(_QWORD *)(v67 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:);
    *(_QWORD *)(v67 + 24) = v42;
    v68 = swift_allocObject();
    *(_BYTE *)(v68 + 16) = 32;
    v69 = swift_allocObject();
    *(_BYTE *)(v69 + 16) = 8;
    v44 = swift_allocObject();
    *(_QWORD *)(v44 + 16) = partial apply for implicit closure #5 in SpecificMedicationsPersistor.buildMatchedMedName(from:shouldIncludeAsNeededParams:);
    *(_QWORD *)(v44 + 24) = v43;
    v70 = swift_allocObject();
    *(_QWORD *)(v70 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:);
    *(_QWORD *)(v70 + 24) = v44;
    v71 = swift_allocObject();
    *(_BYTE *)(v71 + 16) = 32;
    v72 = swift_allocObject();
    *(_BYTE *)(v72 + 16) = 8;
    v46 = swift_allocObject();
    *(_QWORD *)(v46 + 16) = partial apply for implicit closure #6 in SpecificMedicationsPersistor.buildMatchedMedName(from:shouldIncludeAsNeededParams:);
    *(_QWORD *)(v46 + 24) = v45;
    v73 = swift_allocObject();
    *(_QWORD *)(v73 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:);
    *(_QWORD *)(v73 + 24) = v46;
    v74 = swift_allocObject();
    *(_BYTE *)(v74 + 16) = 32;
    v75 = swift_allocObject();
    *(_BYTE *)(v75 + 16) = 8;
    v48 = swift_allocObject();
    *(_QWORD *)(v48 + 16) = partial apply for implicit closure #7 in SpecificMedicationsPersistor.buildMatchedMedName(from:shouldIncludeAsNeededParams:);
    *(_QWORD *)(v48 + 24) = v47;
    v76 = swift_allocObject();
    *(_QWORD *)(v76 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:);
    *(_QWORD *)(v76 + 24) = v48;
    v77 = swift_allocObject();
    *(_BYTE *)(v77 + 16) = 32;
    v78 = swift_allocObject();
    *(_BYTE *)(v78 + 16) = 8;
    v50 = swift_allocObject();
    *(_QWORD *)(v50 + 16) = partial apply for implicit closure #6 in LogSpecificMedicationsIntentHandler.handle(intent:);
    *(_QWORD *)(v50 + 24) = v49;
    v79 = swift_allocObject();
    *(_QWORD *)(v79 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:);
    *(_QWORD *)(v79 + 24) = v50;
    v80 = swift_allocObject();
    *(_BYTE *)(v80 + 16) = 32;
    v81 = swift_allocObject();
    *(_BYTE *)(v81 + 16) = 8;
    v52 = swift_allocObject();
    *(_QWORD *)(v52 + 16) = partial apply for implicit closure #7 in LogSpecificMedicationsIntentHandler.handle(intent:);
    *(_QWORD *)(v52 + 24) = v51;
    v82 = swift_allocObject();
    *(_QWORD *)(v82 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:);
    *(_QWORD *)(v82 + 24) = v52;
    v83 = swift_allocObject();
    *(_BYTE *)(v83 + 16) = 32;
    v84 = swift_allocObject();
    *(_BYTE *)(v84 + 16) = 8;
    v54 = swift_allocObject();
    *(_QWORD *)(v54 + 16) = partial apply for implicit closure #10 in SpecificMedicationsPersistor.buildMatchedMedName(from:shouldIncludeAsNeededParams:);
    *(_QWORD *)(v54 + 24) = v53;
    v85 = swift_allocObject();
    *(_QWORD *)(v85 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:);
    *(_QWORD *)(v85 + 24) = v54;
    v86 = swift_allocObject();
    *(_BYTE *)(v86 + 16) = 32;
    v87 = swift_allocObject();
    *(_BYTE *)(v87 + 16) = 8;
    v56 = swift_allocObject();
    *(_QWORD *)(v56 + 16) = partial apply for implicit closure #11 in SpecificMedicationsPersistor.buildMatchedMedName(from:shouldIncludeAsNeededParams:);
    *(_QWORD *)(v56 + 24) = v55;
    v88 = swift_allocObject();
    *(_QWORD *)(v88 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:);
    *(_QWORD *)(v88 + 24) = v56;
    v89 = swift_allocObject();
    *(_BYTE *)(v89 + 16) = 32;
    v90 = swift_allocObject();
    *(_BYTE *)(v90 + 16) = 8;
    v58 = swift_allocObject();
    *(_QWORD *)(v58 + 16) = partial apply for implicit closure #12 in SpecificMedicationsPersistor.buildMatchedMedName(from:shouldIncludeAsNeededParams:);
    *(_QWORD *)(v58 + 24) = v57;
    v91 = swift_allocObject();
    *(_QWORD *)(v91 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:);
    *(_QWORD *)(v91 + 24) = v58;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
    _allocateUninitializedArray<A>(_:)();
    v92 = v21;
    swift_retain();
    *v92 = partial apply for closure #1 in OSLogArguments.append(_:);
    v92[1] = v59;
    swift_retain();
    v92[2] = partial apply for closure #1 in OSLogArguments.append(_:);
    v92[3] = v60;
    swift_retain();
    v92[4] = partial apply for closure #1 in OSLogArguments.append(_:);
    v92[5] = v61;
    swift_retain();
    v92[6] = partial apply for closure #1 in OSLogArguments.append(_:);
    v92[7] = v62;
    swift_retain();
    v92[8] = partial apply for closure #1 in OSLogArguments.append(_:);
    v92[9] = v63;
    swift_retain();
    v92[10] = partial apply for closure #1 in OSLogArguments.append(_:);
    v92[11] = v64;
    swift_retain();
    v92[12] = partial apply for closure #1 in OSLogArguments.append(_:);
    v92[13] = v65;
    swift_retain();
    v92[14] = partial apply for closure #1 in OSLogArguments.append(_:);
    v92[15] = v66;
    swift_retain();
    v92[16] = partial apply for closure #1 in OSLogArguments.append(_:);
    v92[17] = v67;
    swift_retain();
    v92[18] = partial apply for closure #1 in OSLogArguments.append(_:);
    v92[19] = v68;
    swift_retain();
    v92[20] = partial apply for closure #1 in OSLogArguments.append(_:);
    v92[21] = v69;
    swift_retain();
    v92[22] = partial apply for closure #1 in OSLogArguments.append(_:);
    v92[23] = v70;
    swift_retain();
    v92[24] = partial apply for closure #1 in OSLogArguments.append(_:);
    v92[25] = v71;
    swift_retain();
    v92[26] = partial apply for closure #1 in OSLogArguments.append(_:);
    v92[27] = v72;
    swift_retain();
    v92[28] = partial apply for closure #1 in OSLogArguments.append(_:);
    v92[29] = v73;
    swift_retain();
    v92[30] = partial apply for closure #1 in OSLogArguments.append(_:);
    v92[31] = v74;
    swift_retain();
    v92[32] = partial apply for closure #1 in OSLogArguments.append(_:);
    v92[33] = v75;
    swift_retain();
    v92[34] = partial apply for closure #1 in OSLogArguments.append(_:);
    v92[35] = v76;
    swift_retain();
    v92[36] = partial apply for closure #1 in OSLogArguments.append(_:);
    v92[37] = v77;
    swift_retain();
    v92[38] = partial apply for closure #1 in OSLogArguments.append(_:);
    v92[39] = v78;
    swift_retain();
    v92[40] = partial apply for closure #1 in OSLogArguments.append(_:);
    v92[41] = v79;
    swift_retain();
    v92[42] = partial apply for closure #1 in OSLogArguments.append(_:);
    v92[43] = v80;
    swift_retain();
    v92[44] = partial apply for closure #1 in OSLogArguments.append(_:);
    v92[45] = v81;
    swift_retain();
    v92[46] = partial apply for closure #1 in OSLogArguments.append(_:);
    v92[47] = v82;
    swift_retain();
    v92[48] = partial apply for closure #1 in OSLogArguments.append(_:);
    v92[49] = v83;
    swift_retain();
    v92[50] = partial apply for closure #1 in OSLogArguments.append(_:);
    v92[51] = v84;
    swift_retain();
    v92[52] = partial apply for closure #1 in OSLogArguments.append(_:);
    v92[53] = v85;
    swift_retain();
    v92[54] = partial apply for closure #1 in OSLogArguments.append(_:);
    v92[55] = v86;
    swift_retain();
    v92[56] = partial apply for closure #1 in OSLogArguments.append(_:);
    v92[57] = v87;
    swift_retain();
    v92[58] = partial apply for closure #1 in OSLogArguments.append(_:);
    v92[59] = v88;
    swift_retain();
    v92[60] = partial apply for closure #1 in OSLogArguments.append(_:);
    v92[61] = v89;
    swift_retain();
    v92[62] = partial apply for closure #1 in OSLogArguments.append(_:);
    v92[63] = v90;
    swift_retain();
    v92[64] = partial apply for closure #1 in OSLogArguments.append(_:);
    v92[65] = v91;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(oslog, v94))
    {
      buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      v27 = createStorage<A>(capacity:type:)(0);
      v28 = createStorage<A>(capacity:type:)(11);
      v135 = buf;
      v136 = v27;
      v137 = v28;
      serialize(_:at:)(2, &v135);
      serialize(_:at:)(11, &v135);
      v138 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v139 = v59;
      closure #1 in osLogInternal(_:log:type:)(&v138, (uint64_t)&v135, (uint64_t)&v136, (uint64_t)&v137);
      v138 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v139 = v60;
      closure #1 in osLogInternal(_:log:type:)(&v138, (uint64_t)&v135, (uint64_t)&v136, (uint64_t)&v137);
      v138 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v139 = v61;
      closure #1 in osLogInternal(_:log:type:)(&v138, (uint64_t)&v135, (uint64_t)&v136, (uint64_t)&v137);
      v138 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v139 = v62;
      closure #1 in osLogInternal(_:log:type:)(&v138, (uint64_t)&v135, (uint64_t)&v136, (uint64_t)&v137);
      v138 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v139 = v63;
      closure #1 in osLogInternal(_:log:type:)(&v138, (uint64_t)&v135, (uint64_t)&v136, (uint64_t)&v137);
      v138 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v139 = v64;
      closure #1 in osLogInternal(_:log:type:)(&v138, (uint64_t)&v135, (uint64_t)&v136, (uint64_t)&v137);
      v138 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v139 = v65;
      closure #1 in osLogInternal(_:log:type:)(&v138, (uint64_t)&v135, (uint64_t)&v136, (uint64_t)&v137);
      v138 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v139 = v66;
      closure #1 in osLogInternal(_:log:type:)(&v138, (uint64_t)&v135, (uint64_t)&v136, (uint64_t)&v137);
      v138 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v139 = v67;
      closure #1 in osLogInternal(_:log:type:)(&v138, (uint64_t)&v135, (uint64_t)&v136, (uint64_t)&v137);
      v138 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v139 = v68;
      closure #1 in osLogInternal(_:log:type:)(&v138, (uint64_t)&v135, (uint64_t)&v136, (uint64_t)&v137);
      v138 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v139 = v69;
      closure #1 in osLogInternal(_:log:type:)(&v138, (uint64_t)&v135, (uint64_t)&v136, (uint64_t)&v137);
      v138 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v139 = v70;
      closure #1 in osLogInternal(_:log:type:)(&v138, (uint64_t)&v135, (uint64_t)&v136, (uint64_t)&v137);
      v138 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v139 = v71;
      closure #1 in osLogInternal(_:log:type:)(&v138, (uint64_t)&v135, (uint64_t)&v136, (uint64_t)&v137);
      v138 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v139 = v72;
      closure #1 in osLogInternal(_:log:type:)(&v138, (uint64_t)&v135, (uint64_t)&v136, (uint64_t)&v137);
      v138 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v139 = v73;
      closure #1 in osLogInternal(_:log:type:)(&v138, (uint64_t)&v135, (uint64_t)&v136, (uint64_t)&v137);
      v138 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v139 = v74;
      closure #1 in osLogInternal(_:log:type:)(&v138, (uint64_t)&v135, (uint64_t)&v136, (uint64_t)&v137);
      v138 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v139 = v75;
      closure #1 in osLogInternal(_:log:type:)(&v138, (uint64_t)&v135, (uint64_t)&v136, (uint64_t)&v137);
      v138 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v139 = v76;
      closure #1 in osLogInternal(_:log:type:)(&v138, (uint64_t)&v135, (uint64_t)&v136, (uint64_t)&v137);
      v138 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v139 = v77;
      closure #1 in osLogInternal(_:log:type:)(&v138, (uint64_t)&v135, (uint64_t)&v136, (uint64_t)&v137);
      v138 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v139 = v78;
      closure #1 in osLogInternal(_:log:type:)(&v138, (uint64_t)&v135, (uint64_t)&v136, (uint64_t)&v137);
      v138 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v139 = v79;
      closure #1 in osLogInternal(_:log:type:)(&v138, (uint64_t)&v135, (uint64_t)&v136, (uint64_t)&v137);
      v138 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v139 = v80;
      closure #1 in osLogInternal(_:log:type:)(&v138, (uint64_t)&v135, (uint64_t)&v136, (uint64_t)&v137);
      v138 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v139 = v81;
      closure #1 in osLogInternal(_:log:type:)(&v138, (uint64_t)&v135, (uint64_t)&v136, (uint64_t)&v137);
      v138 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v139 = v82;
      closure #1 in osLogInternal(_:log:type:)(&v138, (uint64_t)&v135, (uint64_t)&v136, (uint64_t)&v137);
      v138 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v139 = v83;
      closure #1 in osLogInternal(_:log:type:)(&v138, (uint64_t)&v135, (uint64_t)&v136, (uint64_t)&v137);
      v138 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v139 = v84;
      closure #1 in osLogInternal(_:log:type:)(&v138, (uint64_t)&v135, (uint64_t)&v136, (uint64_t)&v137);
      v138 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v139 = v85;
      closure #1 in osLogInternal(_:log:type:)(&v138, (uint64_t)&v135, (uint64_t)&v136, (uint64_t)&v137);
      v138 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v139 = v86;
      closure #1 in osLogInternal(_:log:type:)(&v138, (uint64_t)&v135, (uint64_t)&v136, (uint64_t)&v137);
      v138 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v139 = v87;
      closure #1 in osLogInternal(_:log:type:)(&v138, (uint64_t)&v135, (uint64_t)&v136, (uint64_t)&v137);
      v138 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v139 = v88;
      closure #1 in osLogInternal(_:log:type:)(&v138, (uint64_t)&v135, (uint64_t)&v136, (uint64_t)&v137);
      v138 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v139 = v89;
      closure #1 in osLogInternal(_:log:type:)(&v138, (uint64_t)&v135, (uint64_t)&v136, (uint64_t)&v137);
      v138 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v139 = v90;
      closure #1 in osLogInternal(_:log:type:)(&v138, (uint64_t)&v135, (uint64_t)&v136, (uint64_t)&v137);
      v138 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v139 = v91;
      closure #1 in osLogInternal(_:log:type:)(&v138, (uint64_t)&v135, (uint64_t)&v136, (uint64_t)&v137);
      _os_log_impl(&dword_24749F000, oslog, v94, "    Built MatchedMedName:\n        scheduleID (%s),\n        medID (%s),\n        name (%s),\n        schedule (%s),\n        loggedTime (%s),\n        status (%s),\n        dosage (%s),\n        dosageUnit (%s),\n        strength (%s),\n        strengthUnit (%s),\n        completionStatus (%s)", buf, size);
      destroyStorage<A>(_:count:)(v27, 0, v25);
      destroyStorage<A>(_:count:)(v28, 11, MEMORY[0x24BEE4AD8] + 8);
      MEMORY[0x24957D398](buf, MEMORY[0x24BEE4260]);
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
    }
    v24 = *(_QWORD *)(v134 + 256);
    v22 = *(_QWORD *)(v134 + 248);
    v23 = *(_QWORD *)(v134 + 240);

    (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v24, v23);
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(_QWORD))(*(_QWORD *)(v134 + 136) + 8))(*(_QWORD *)(v134 + 352));
  }
}

{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v4;
  Class isa;
  id v6;
  id v7;
  Swift::Double v8;
  uint64_t v9;
  uint64_t v10;
  double *v11;

  v1 = *(_QWORD *)(v0 + 408);
  *(_QWORD *)(v0 + 136) = v0;
  if (v1)
  {
    v8 = v11[49];
    v9 = *((_QWORD *)v11 + 50);
    v10 = *((_QWORD *)v11 + 51);
  }
  else
  {
    v8 = 0.0;
    v9 = 0;
    v10 = 0;
  }
  if (v10)
  {
    v6 = (id)*((_QWORD *)v11 + 44);
    v11[26] = v8;
    *((_QWORD *)v11 + 15) = v9;
    *((_QWORD *)v11 + 16) = v10;
    type metadata accessor for NSNumber();
    isa = NSNumber.__allocating_init(value:)(v8).super.super.isa;
    objc_msgSend(v6, sel_setStrength_);

    swift_bridgeObjectRetain();
    v7 = (id)MEMORY[0x24957CFB4](v9, v10);
    swift_bridgeObjectRelease();
    objc_msgSend(v6, sel_setStrengthUnit_, v7);

    swift_bridgeObjectRelease();
  }
  v4 = *((_QWORD *)v11 + 43);
  swift_bridgeObjectRetain();
  v2 = (_QWORD *)swift_task_alloc();
  *((_QWORD *)v11 + 52) = v2;
  *v2 = *((_QWORD *)v11 + 17);
  v2[1] = SpecificMedicationsPersistor.buildMatchedMedName(from:shouldIncludeAsNeededParams:);
  return SpecificMedicationsPersistor.getAsNeededDosageFromHealthApp(for:)(*((_QWORD *)v11 + 42), v4, *((_QWORD *)v11 + 28), *((_QWORD *)v11 + 29));
}

{
  double *v0;
  _QWORD *v1;
  Swift::Double value;
  id v4;
  Class isa;
  uint64_t v6;
  uint64_t v7;

  value = v0[53];
  v4 = (id)*((_QWORD *)v0 + 44);
  v7 = *((_QWORD *)v0 + 43);
  *((_QWORD *)v0 + 17) = v0;
  v0[25] = value;
  type metadata accessor for NSNumber();
  isa = NSNumber.__allocating_init(value:)(value).super.super.isa;
  objc_msgSend(v4, sel_setDosage_);

  swift_bridgeObjectRetain();
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v6 + 432) = v1;
  *v1 = *(_QWORD *)(v6 + 136);
  v1[1] = SpecificMedicationsPersistor.buildMatchedMedName(from:shouldIncludeAsNeededParams:);
  return SpecificMedicationsPersistor.getAsNeededDosageUnit(for:dosageCount:)(*(_QWORD *)(v6 + 336), v7, *(_QWORD *)(v6 + 224), *(_QWORD *)(v6 + 232), *(double *)(v6 + 424));
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  id v3;
  id v4;
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;
  _QWORD *v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint8_t *buf;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  id v28;
  uint32_t size;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  NSObject *v86;
  os_log_type_t v87;
  uint64_t v88;
  void *v89;
  void *v90;
  uint64_t v91;
  uint64_t v92;
  uint8_t *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t (*v96)(uint64_t, uint64_t, uint64_t);
  uint64_t v97;

  v1 = *(_QWORD *)(v0 + 448);
  *(_QWORD *)(v0 + 136) = v0;
  if (v1)
  {
    v91 = *(_QWORD *)(v92 + 448);
    v88 = *(_QWORD *)(v92 + 440);
    v89 = *(void **)(v92 + 352);
    *(_QWORD *)(v92 + 104) = v88;
    *(_QWORD *)(v92 + 112) = v91;
    swift_bridgeObjectRetain();
    v90 = (void *)MEMORY[0x24957CFB4](v88, v91);
    swift_bridgeObjectRelease();
    objc_msgSend(v89, sel_setDosageUnit_, v90);

    swift_bridgeObjectRelease();
  }
  v28 = *(id *)(v92 + 352);
  v26 = *(_QWORD *)(v92 + 344);
  v25 = *(_QWORD *)(v92 + 336);
  v2 = *(_QWORD *)(v92 + 256);
  v22 = *(_QWORD *)(v92 + 248);
  v24 = *(_QWORD *)(v92 + 240);
  v27 = *(id *)(v92 + 216);
  v23 = Logger.wellnessIntents.unsafeMutableAddressor();
  swift_beginAccess();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v22 + 16))(v2, v23, v24);
  swift_endAccess();
  v3 = v28;
  v30 = swift_allocObject();
  *(_QWORD *)(v30 + 16) = v28;
  swift_bridgeObjectRetain();
  v32 = swift_allocObject();
  *(_QWORD *)(v32 + 16) = v25;
  *(_QWORD *)(v32 + 24) = v26;
  v4 = v28;
  v34 = swift_allocObject();
  *(_QWORD *)(v34 + 16) = v28;
  v5 = v28;
  v36 = swift_allocObject();
  *(_QWORD *)(v36 + 16) = v28;
  v6 = v28;
  v38 = swift_allocObject();
  *(_QWORD *)(v38 + 16) = v28;
  v7 = v27;
  v40 = swift_allocObject();
  *(_QWORD *)(v40 + 16) = v27;
  v8 = v28;
  v42 = swift_allocObject();
  *(_QWORD *)(v42 + 16) = v28;
  v9 = v28;
  v44 = swift_allocObject();
  *(_QWORD *)(v44 + 16) = v28;
  v10 = v28;
  v46 = swift_allocObject();
  *(_QWORD *)(v46 + 16) = v28;
  v11 = v28;
  v48 = swift_allocObject();
  *(_QWORD *)(v48 + 16) = v28;
  v12 = v28;
  v50 = swift_allocObject();
  *(_QWORD *)(v50 + 16) = v28;
  v86 = Logger.logObject.getter();
  v87 = static os_log_type_t.debug.getter();
  *(_QWORD *)(v92 + 192) = 112;
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  size = *(_DWORD *)(v92 + 460);
  v52 = swift_allocObject();
  *(_BYTE *)(v52 + 16) = 32;
  v53 = swift_allocObject();
  *(_BYTE *)(v53 + 16) = 8;
  v31 = swift_allocObject();
  *(_QWORD *)(v31 + 16) = partial apply for implicit closure #2 in SpecificMedicationsPersistor.buildMatchedMedName(from:shouldIncludeAsNeededParams:);
  *(_QWORD *)(v31 + 24) = v30;
  v54 = swift_allocObject();
  *(_QWORD *)(v54 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:);
  *(_QWORD *)(v54 + 24) = v31;
  v55 = swift_allocObject();
  *(_BYTE *)(v55 + 16) = 32;
  v56 = swift_allocObject();
  *(_BYTE *)(v56 + 16) = 8;
  v33 = swift_allocObject();
  *(_QWORD *)(v33 + 16) = partial apply for implicit closure #4 in LogQuantityIntentHandler.handle(intent:);
  *(_QWORD *)(v33 + 24) = v32;
  v57 = swift_allocObject();
  *(_QWORD *)(v57 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:);
  *(_QWORD *)(v57 + 24) = v33;
  v58 = swift_allocObject();
  *(_BYTE *)(v58 + 16) = 32;
  v59 = swift_allocObject();
  *(_BYTE *)(v59 + 16) = 8;
  v35 = swift_allocObject();
  *(_QWORD *)(v35 + 16) = partial apply for implicit closure #4 in SpecificMedicationsPersistor.buildMatchedMedName(from:shouldIncludeAsNeededParams:);
  *(_QWORD *)(v35 + 24) = v34;
  v60 = swift_allocObject();
  *(_QWORD *)(v60 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:);
  *(_QWORD *)(v60 + 24) = v35;
  v61 = swift_allocObject();
  *(_BYTE *)(v61 + 16) = 32;
  v62 = swift_allocObject();
  *(_BYTE *)(v62 + 16) = 8;
  v37 = swift_allocObject();
  *(_QWORD *)(v37 + 16) = partial apply for implicit closure #5 in SpecificMedicationsPersistor.buildMatchedMedName(from:shouldIncludeAsNeededParams:);
  *(_QWORD *)(v37 + 24) = v36;
  v63 = swift_allocObject();
  *(_QWORD *)(v63 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:);
  *(_QWORD *)(v63 + 24) = v37;
  v64 = swift_allocObject();
  *(_BYTE *)(v64 + 16) = 32;
  v65 = swift_allocObject();
  *(_BYTE *)(v65 + 16) = 8;
  v39 = swift_allocObject();
  *(_QWORD *)(v39 + 16) = partial apply for implicit closure #6 in SpecificMedicationsPersistor.buildMatchedMedName(from:shouldIncludeAsNeededParams:);
  *(_QWORD *)(v39 + 24) = v38;
  v66 = swift_allocObject();
  *(_QWORD *)(v66 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:);
  *(_QWORD *)(v66 + 24) = v39;
  v67 = swift_allocObject();
  *(_BYTE *)(v67 + 16) = 32;
  v68 = swift_allocObject();
  *(_BYTE *)(v68 + 16) = 8;
  v41 = swift_allocObject();
  *(_QWORD *)(v41 + 16) = partial apply for implicit closure #7 in SpecificMedicationsPersistor.buildMatchedMedName(from:shouldIncludeAsNeededParams:);
  *(_QWORD *)(v41 + 24) = v40;
  v69 = swift_allocObject();
  *(_QWORD *)(v69 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:);
  *(_QWORD *)(v69 + 24) = v41;
  v70 = swift_allocObject();
  *(_BYTE *)(v70 + 16) = 32;
  v71 = swift_allocObject();
  *(_BYTE *)(v71 + 16) = 8;
  v43 = swift_allocObject();
  *(_QWORD *)(v43 + 16) = partial apply for implicit closure #6 in LogSpecificMedicationsIntentHandler.handle(intent:);
  *(_QWORD *)(v43 + 24) = v42;
  v72 = swift_allocObject();
  *(_QWORD *)(v72 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:);
  *(_QWORD *)(v72 + 24) = v43;
  v73 = swift_allocObject();
  *(_BYTE *)(v73 + 16) = 32;
  v74 = swift_allocObject();
  *(_BYTE *)(v74 + 16) = 8;
  v45 = swift_allocObject();
  *(_QWORD *)(v45 + 16) = partial apply for implicit closure #7 in LogSpecificMedicationsIntentHandler.handle(intent:);
  *(_QWORD *)(v45 + 24) = v44;
  v75 = swift_allocObject();
  *(_QWORD *)(v75 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:);
  *(_QWORD *)(v75 + 24) = v45;
  v76 = swift_allocObject();
  *(_BYTE *)(v76 + 16) = 32;
  v77 = swift_allocObject();
  *(_BYTE *)(v77 + 16) = 8;
  v47 = swift_allocObject();
  *(_QWORD *)(v47 + 16) = partial apply for implicit closure #10 in SpecificMedicationsPersistor.buildMatchedMedName(from:shouldIncludeAsNeededParams:);
  *(_QWORD *)(v47 + 24) = v46;
  v78 = swift_allocObject();
  *(_QWORD *)(v78 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:);
  *(_QWORD *)(v78 + 24) = v47;
  v79 = swift_allocObject();
  *(_BYTE *)(v79 + 16) = 32;
  v80 = swift_allocObject();
  *(_BYTE *)(v80 + 16) = 8;
  v49 = swift_allocObject();
  *(_QWORD *)(v49 + 16) = partial apply for implicit closure #11 in SpecificMedicationsPersistor.buildMatchedMedName(from:shouldIncludeAsNeededParams:);
  *(_QWORD *)(v49 + 24) = v48;
  v81 = swift_allocObject();
  *(_QWORD *)(v81 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:);
  *(_QWORD *)(v81 + 24) = v49;
  v82 = swift_allocObject();
  *(_BYTE *)(v82 + 16) = 32;
  v83 = swift_allocObject();
  *(_BYTE *)(v83 + 16) = 8;
  v51 = swift_allocObject();
  *(_QWORD *)(v51 + 16) = partial apply for implicit closure #12 in SpecificMedicationsPersistor.buildMatchedMedName(from:shouldIncludeAsNeededParams:);
  *(_QWORD *)(v51 + 24) = v50;
  v84 = swift_allocObject();
  *(_QWORD *)(v84 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:);
  *(_QWORD *)(v84 + 24) = v51;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
  _allocateUninitializedArray<A>(_:)();
  v85 = v13;
  swift_retain();
  *v85 = partial apply for closure #1 in OSLogArguments.append(_:);
  v85[1] = v52;
  swift_retain();
  v85[2] = partial apply for closure #1 in OSLogArguments.append(_:);
  v85[3] = v53;
  swift_retain();
  v85[4] = partial apply for closure #1 in OSLogArguments.append(_:);
  v85[5] = v54;
  swift_retain();
  v85[6] = partial apply for closure #1 in OSLogArguments.append(_:);
  v85[7] = v55;
  swift_retain();
  v85[8] = partial apply for closure #1 in OSLogArguments.append(_:);
  v85[9] = v56;
  swift_retain();
  v85[10] = partial apply for closure #1 in OSLogArguments.append(_:);
  v85[11] = v57;
  swift_retain();
  v85[12] = partial apply for closure #1 in OSLogArguments.append(_:);
  v85[13] = v58;
  swift_retain();
  v85[14] = partial apply for closure #1 in OSLogArguments.append(_:);
  v85[15] = v59;
  swift_retain();
  v85[16] = partial apply for closure #1 in OSLogArguments.append(_:);
  v85[17] = v60;
  swift_retain();
  v85[18] = partial apply for closure #1 in OSLogArguments.append(_:);
  v85[19] = v61;
  swift_retain();
  v85[20] = partial apply for closure #1 in OSLogArguments.append(_:);
  v85[21] = v62;
  swift_retain();
  v85[22] = partial apply for closure #1 in OSLogArguments.append(_:);
  v85[23] = v63;
  swift_retain();
  v85[24] = partial apply for closure #1 in OSLogArguments.append(_:);
  v85[25] = v64;
  swift_retain();
  v85[26] = partial apply for closure #1 in OSLogArguments.append(_:);
  v85[27] = v65;
  swift_retain();
  v85[28] = partial apply for closure #1 in OSLogArguments.append(_:);
  v85[29] = v66;
  swift_retain();
  v85[30] = partial apply for closure #1 in OSLogArguments.append(_:);
  v85[31] = v67;
  swift_retain();
  v85[32] = partial apply for closure #1 in OSLogArguments.append(_:);
  v85[33] = v68;
  swift_retain();
  v85[34] = partial apply for closure #1 in OSLogArguments.append(_:);
  v85[35] = v69;
  swift_retain();
  v85[36] = partial apply for closure #1 in OSLogArguments.append(_:);
  v85[37] = v70;
  swift_retain();
  v85[38] = partial apply for closure #1 in OSLogArguments.append(_:);
  v85[39] = v71;
  swift_retain();
  v85[40] = partial apply for closure #1 in OSLogArguments.append(_:);
  v85[41] = v72;
  swift_retain();
  v85[42] = partial apply for closure #1 in OSLogArguments.append(_:);
  v85[43] = v73;
  swift_retain();
  v85[44] = partial apply for closure #1 in OSLogArguments.append(_:);
  v85[45] = v74;
  swift_retain();
  v85[46] = partial apply for closure #1 in OSLogArguments.append(_:);
  v85[47] = v75;
  swift_retain();
  v85[48] = partial apply for closure #1 in OSLogArguments.append(_:);
  v85[49] = v76;
  swift_retain();
  v85[50] = partial apply for closure #1 in OSLogArguments.append(_:);
  v85[51] = v77;
  swift_retain();
  v85[52] = partial apply for closure #1 in OSLogArguments.append(_:);
  v85[53] = v78;
  swift_retain();
  v85[54] = partial apply for closure #1 in OSLogArguments.append(_:);
  v85[55] = v79;
  swift_retain();
  v85[56] = partial apply for closure #1 in OSLogArguments.append(_:);
  v85[57] = v80;
  swift_retain();
  v85[58] = partial apply for closure #1 in OSLogArguments.append(_:);
  v85[59] = v81;
  swift_retain();
  v85[60] = partial apply for closure #1 in OSLogArguments.append(_:);
  v85[61] = v82;
  swift_retain();
  v85[62] = partial apply for closure #1 in OSLogArguments.append(_:);
  v85[63] = v83;
  swift_retain();
  v85[64] = partial apply for closure #1 in OSLogArguments.append(_:);
  v85[65] = v84;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(v86, v87))
  {
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    v20 = createStorage<A>(capacity:type:)(0);
    v21 = createStorage<A>(capacity:type:)(11);
    v93 = buf;
    v94 = v20;
    v95 = v21;
    serialize(_:at:)(2, &v93);
    serialize(_:at:)(11, &v93);
    v96 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v97 = v52;
    closure #1 in osLogInternal(_:log:type:)(&v96, (uint64_t)&v93, (uint64_t)&v94, (uint64_t)&v95);
    v96 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v97 = v53;
    closure #1 in osLogInternal(_:log:type:)(&v96, (uint64_t)&v93, (uint64_t)&v94, (uint64_t)&v95);
    v96 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v97 = v54;
    closure #1 in osLogInternal(_:log:type:)(&v96, (uint64_t)&v93, (uint64_t)&v94, (uint64_t)&v95);
    v96 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v97 = v55;
    closure #1 in osLogInternal(_:log:type:)(&v96, (uint64_t)&v93, (uint64_t)&v94, (uint64_t)&v95);
    v96 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v97 = v56;
    closure #1 in osLogInternal(_:log:type:)(&v96, (uint64_t)&v93, (uint64_t)&v94, (uint64_t)&v95);
    v96 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v97 = v57;
    closure #1 in osLogInternal(_:log:type:)(&v96, (uint64_t)&v93, (uint64_t)&v94, (uint64_t)&v95);
    v96 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v97 = v58;
    closure #1 in osLogInternal(_:log:type:)(&v96, (uint64_t)&v93, (uint64_t)&v94, (uint64_t)&v95);
    v96 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v97 = v59;
    closure #1 in osLogInternal(_:log:type:)(&v96, (uint64_t)&v93, (uint64_t)&v94, (uint64_t)&v95);
    v96 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v97 = v60;
    closure #1 in osLogInternal(_:log:type:)(&v96, (uint64_t)&v93, (uint64_t)&v94, (uint64_t)&v95);
    v96 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v97 = v61;
    closure #1 in osLogInternal(_:log:type:)(&v96, (uint64_t)&v93, (uint64_t)&v94, (uint64_t)&v95);
    v96 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v97 = v62;
    closure #1 in osLogInternal(_:log:type:)(&v96, (uint64_t)&v93, (uint64_t)&v94, (uint64_t)&v95);
    v96 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v97 = v63;
    closure #1 in osLogInternal(_:log:type:)(&v96, (uint64_t)&v93, (uint64_t)&v94, (uint64_t)&v95);
    v96 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v97 = v64;
    closure #1 in osLogInternal(_:log:type:)(&v96, (uint64_t)&v93, (uint64_t)&v94, (uint64_t)&v95);
    v96 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v97 = v65;
    closure #1 in osLogInternal(_:log:type:)(&v96, (uint64_t)&v93, (uint64_t)&v94, (uint64_t)&v95);
    v96 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v97 = v66;
    closure #1 in osLogInternal(_:log:type:)(&v96, (uint64_t)&v93, (uint64_t)&v94, (uint64_t)&v95);
    v96 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v97 = v67;
    closure #1 in osLogInternal(_:log:type:)(&v96, (uint64_t)&v93, (uint64_t)&v94, (uint64_t)&v95);
    v96 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v97 = v68;
    closure #1 in osLogInternal(_:log:type:)(&v96, (uint64_t)&v93, (uint64_t)&v94, (uint64_t)&v95);
    v96 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v97 = v69;
    closure #1 in osLogInternal(_:log:type:)(&v96, (uint64_t)&v93, (uint64_t)&v94, (uint64_t)&v95);
    v96 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v97 = v70;
    closure #1 in osLogInternal(_:log:type:)(&v96, (uint64_t)&v93, (uint64_t)&v94, (uint64_t)&v95);
    v96 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v97 = v71;
    closure #1 in osLogInternal(_:log:type:)(&v96, (uint64_t)&v93, (uint64_t)&v94, (uint64_t)&v95);
    v96 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v97 = v72;
    closure #1 in osLogInternal(_:log:type:)(&v96, (uint64_t)&v93, (uint64_t)&v94, (uint64_t)&v95);
    v96 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v97 = v73;
    closure #1 in osLogInternal(_:log:type:)(&v96, (uint64_t)&v93, (uint64_t)&v94, (uint64_t)&v95);
    v96 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v97 = v74;
    closure #1 in osLogInternal(_:log:type:)(&v96, (uint64_t)&v93, (uint64_t)&v94, (uint64_t)&v95);
    v96 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v97 = v75;
    closure #1 in osLogInternal(_:log:type:)(&v96, (uint64_t)&v93, (uint64_t)&v94, (uint64_t)&v95);
    v96 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v97 = v76;
    closure #1 in osLogInternal(_:log:type:)(&v96, (uint64_t)&v93, (uint64_t)&v94, (uint64_t)&v95);
    v96 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v97 = v77;
    closure #1 in osLogInternal(_:log:type:)(&v96, (uint64_t)&v93, (uint64_t)&v94, (uint64_t)&v95);
    v96 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v97 = v78;
    closure #1 in osLogInternal(_:log:type:)(&v96, (uint64_t)&v93, (uint64_t)&v94, (uint64_t)&v95);
    v96 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v97 = v79;
    closure #1 in osLogInternal(_:log:type:)(&v96, (uint64_t)&v93, (uint64_t)&v94, (uint64_t)&v95);
    v96 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v97 = v80;
    closure #1 in osLogInternal(_:log:type:)(&v96, (uint64_t)&v93, (uint64_t)&v94, (uint64_t)&v95);
    v96 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v97 = v81;
    closure #1 in osLogInternal(_:log:type:)(&v96, (uint64_t)&v93, (uint64_t)&v94, (uint64_t)&v95);
    v96 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v97 = v82;
    closure #1 in osLogInternal(_:log:type:)(&v96, (uint64_t)&v93, (uint64_t)&v94, (uint64_t)&v95);
    v96 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v97 = v83;
    closure #1 in osLogInternal(_:log:type:)(&v96, (uint64_t)&v93, (uint64_t)&v94, (uint64_t)&v95);
    v96 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v97 = v84;
    closure #1 in osLogInternal(_:log:type:)(&v96, (uint64_t)&v93, (uint64_t)&v94, (uint64_t)&v95);
    _os_log_impl(&dword_24749F000, v86, v87, "    Built MatchedMedName:\n        scheduleID (%s),\n        medID (%s),\n        name (%s),\n        schedule (%s),\n        loggedTime (%s),\n        status (%s),\n        dosage (%s),\n        dosageUnit (%s),\n        strength (%s),\n        strengthUnit (%s),\n        completionStatus (%s)", buf, size);
    destroyStorage<A>(_:count:)(v20, 0, v18);
    destroyStorage<A>(_:count:)(v21, 11, MEMORY[0x24BEE4AD8] + 8);
    MEMORY[0x24957D398](buf, MEMORY[0x24BEE4260]);
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
  }
  v17 = *(_QWORD *)(v92 + 256);
  v15 = *(_QWORD *)(v92 + 248);
  v16 = *(_QWORD *)(v92 + 240);

  (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v17, v16);
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)(v92 + 136) + 8))(*(_QWORD *)(v92 + 352));
}

uint64_t SpecificMedicationsPersistor.buildMatchedMedName(from:shouldIncludeAsNeededParams:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v4;

  v4 = (_QWORD *)*v2;
  v4[17] = *v2;
  v4[46] = a1;
  v4[47] = a2;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  return swift_task_switch();
}

{
  _QWORD *v2;
  _QWORD *v4;

  v4 = (_QWORD *)*v2;
  v4[17] = *v2;
  v4[55] = a1;
  v4[56] = a2;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  return swift_task_switch();
}

uint64_t SpecificMedicationsPersistor.buildMatchedMedName(from:shouldIncludeAsNeededParams:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v5;

  v5 = (_QWORD *)*v3;
  v5[17] = *v3;
  v5[49] = a1;
  v5[50] = a2;
  v5[51] = a3;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t SpecificMedicationsPersistor.buildMatchedMedName(from:shouldIncludeAsNeededParams:)(double a1)
{
  uint64_t *v1;
  uint64_t v3;

  v3 = *v1;
  *(_QWORD *)(v3 + 136) = *v1;
  *(double *)(v3 + 424) = a1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  return swift_task_switch();
}

uint64_t specialized implicit closure #12 in SpecificMedicationsPersistor.saveWithID(scheduleID:medicationIDs:medStatus:dosage:dosageUnit:confirmedAsNeeded:confirmedAsScheduled:)(uint64_t a1)
{
  unint64_t v1;
  uint64_t v4;

  swift_bridgeObjectRetain();
  v1 = type metadata accessor for HKMedicationExposableDoseEvent();
  v4 = MEMORY[0x24957D110](a1, v1);
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t SpecificMedicationsPersistor.saveScheduledMedication(named:specifiedDateInterval:medStatusTaken:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)(v5 + 536) = a5;
  *(_QWORD *)(v5 + 528) = a4;
  *(_BYTE *)(v5 + 801) = a3 & 1;
  *(_QWORD *)(v5 + 520) = a2;
  *(_QWORD *)(v5 + 512) = a1;
  *(_QWORD *)(v5 + 216) = v5;
  *(_QWORD *)(v5 + 224) = 0;
  *(_QWORD *)(v5 + 232) = 0;
  *(_BYTE *)(v5 + 800) = 0;
  *(_QWORD *)(v5 + 136) = 0;
  *(_QWORD *)(v5 + 144) = 0;
  *(_QWORD *)(v5 + 248) = 0;
  *(_QWORD *)(v5 + 256) = 0;
  *(_QWORD *)(v5 + 152) = 0;
  *(_QWORD *)(v5 + 160) = 0;
  *(_QWORD *)(v5 + 288) = 0;
  *(_QWORD *)(v5 + 360) = 0;
  *(_QWORD *)(v5 + 376) = 0;
  *(_QWORD *)(v5 + 184) = 0;
  *(_QWORD *)(v5 + 192) = 0;
  *(_QWORD *)(v5 + 400) = 0;
  *(_QWORD *)(v5 + 408) = 0;
  *(_QWORD *)(v5 + 416) = 0;
  *(_QWORD *)(v5 + 200) = 0;
  *(_QWORD *)(v5 + 208) = 0;
  *(_QWORD *)(v5 + 472) = 0;
  *(_QWORD *)(v5 + 480) = 0;
  v6 = type metadata accessor for DateInterval();
  *(_QWORD *)(v5 + 544) = v6;
  v7 = *(_QWORD *)(v6 - 8);
  *(_QWORD *)(v5 + 552) = v7;
  *(_QWORD *)(v5 + 560) = *(_QWORD *)(v7 + 64);
  *(_QWORD *)(v5 + 568) = swift_task_alloc();
  v8 = type metadata accessor for Logger();
  *(_QWORD *)(v5 + 576) = v8;
  *(_QWORD *)(v5 + 584) = *(_QWORD *)(v8 - 8);
  *(_QWORD *)(v5 + 592) = swift_task_alloc();
  *(_QWORD *)(v5 + 600) = swift_task_alloc();
  *(_QWORD *)(v5 + 608) = swift_task_alloc();
  *(_QWORD *)(v5 + 616) = swift_task_alloc();
  *(_QWORD *)(v5 + 624) = swift_task_alloc();
  *(_QWORD *)(v5 + 224) = a1;
  *(_QWORD *)(v5 + 232) = a2;
  *(_BYTE *)(v5 + 800) = a3 & 1;
  *(_QWORD *)(v5 + 136) = a4;
  *(_QWORD *)(v5 + 144) = a5;
  return swift_task_switch();
}

uint64_t SpecificMedicationsPersistor.saveScheduledMedication(named:specifiedDateInterval:medStatusTaken:)()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t, uint64_t, uint64_t);
  _QWORD *v3;
  void (*v4)(uint64_t, uint64_t);
  uint64_t v5;
  _QWORD *v6;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  char *v12;
  char *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t, uint64_t);
  char *v19;
  uint64_t v20;
  uint8_t *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(uint64_t, uint64_t, uint64_t);
  uint32_t v28;
  os_log_type_t v29;
  NSObject *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  Class isa;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  void (*v39)(uint64_t, uint64_t);
  uint64_t v40;
  uint64_t v41;
  uint8_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void (*v47)(uint64_t, uint64_t, uint64_t);
  uint64_t v48;
  uint32_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  NSObject *log;
  os_log_type_t v62;
  uint64_t v63;
  uint64_t v64;
  void (*v65)(uint64_t, uint64_t);
  char *v66;
  char *v67;
  uint64_t v68;
  uint8_t *v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t v74;
  void (*v75)(uint64_t, uint64_t, uint64_t);
  uint32_t v76;
  os_log_type_t v77;
  NSObject *oslog;
  uint64_t v79;
  uint64_t v80;
  char v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  id v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint8_t *buf;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint32_t size;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  _QWORD *v123;
  NSObject *v124;
  os_log_type_t v125;
  uint8_t *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t (*v129)(uint64_t, uint64_t, uint64_t);
  uint64_t v130;
  uint8_t *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t (*v134)(uint64_t, uint64_t, uint64_t);
  uint64_t v135;

  v1 = *(_QWORD *)(v0 + 624);
  v101 = *(_QWORD *)(v0 + 584);
  v103 = *(_QWORD *)(v0 + 576);
  v109 = *(_QWORD *)(v0 + 568);
  v107 = *(_QWORD *)(v0 + 552);
  v110 = *(_QWORD *)(v0 + 544);
  v106 = *(_QWORD *)(v0 + 520);
  v104 = *(_QWORD *)(v0 + 512);
  *(_QWORD *)(v0 + 216) = v0;
  v102 = Logger.wellnessIntents.unsafeMutableAddressor();
  swift_beginAccess();
  v2 = *(void (**)(uint64_t, uint64_t, uint64_t))(v101 + 16);
  *(_QWORD *)(v0 + 632) = v2;
  v2(v1, v102, v103);
  swift_endAccess();
  swift_bridgeObjectRetain();
  v105 = swift_allocObject();
  *(_QWORD *)(v105 + 16) = v104;
  swift_retain();
  v113 = swift_allocObject();
  *(_QWORD *)(v113 + 16) = partial apply for implicit closure #3 in getPreferredUnit(for:store:);
  *(_QWORD *)(v113 + 24) = v105;
  swift_release();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v107 + 16))(v109, v106, v110);
  v108 = (*(unsigned __int8 *)(v107 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v107 + 80);
  v111 = swift_allocObject();
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v107 + 32))(v111 + v108, v109, v110);
  swift_retain();
  v115 = swift_allocObject();
  *(_QWORD *)(v115 + 16) = partial apply for implicit closure #2 in SpecificMedicationsPersistor.saveScheduledMedication(named:specifiedDateInterval:medStatusTaken:);
  *(_QWORD *)(v115 + 24) = v111;
  swift_release();
  v124 = Logger.logObject.getter();
  v125 = static os_log_type_t.debug.getter();
  *(_QWORD *)(v0 + 240) = 22;
  *(_QWORD *)(v0 + 640) = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  *(_QWORD *)(v0 + 648) = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  *(_QWORD *)(v0 + 656) = lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  size = *(_DWORD *)(v0 + 804);
  v117 = swift_allocObject();
  *(_BYTE *)(v117 + 16) = 32;
  v118 = swift_allocObject();
  *(_BYTE *)(v118 + 16) = 8;
  v114 = swift_allocObject();
  *(_QWORD *)(v114 + 16) = implicit closure #1 in OSLogInterpolation.appendInterpolation<A>(_:align:privacy:)partial apply;
  *(_QWORD *)(v114 + 24) = v113;
  v119 = swift_allocObject();
  *(_QWORD *)(v119 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:);
  *(_QWORD *)(v119 + 24) = v114;
  v120 = swift_allocObject();
  *(_BYTE *)(v120 + 16) = 32;
  v121 = swift_allocObject();
  *(_BYTE *)(v121 + 16) = 8;
  v116 = swift_allocObject();
  *(_QWORD *)(v116 + 16) = implicit closure #1 in OSLogInterpolation.appendInterpolation<A>(_:align:privacy:)partial apply;
  *(_QWORD *)(v116 + 24) = v115;
  v122 = swift_allocObject();
  *(_QWORD *)(v122 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:);
  *(_QWORD *)(v122 + 24) = v116;
  *(_QWORD *)(v0 + 664) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
  _allocateUninitializedArray<A>(_:)();
  v123 = v3;
  swift_retain();
  *v123 = partial apply for closure #1 in OSLogArguments.append(_:);
  v123[1] = v117;
  swift_retain();
  v123[2] = partial apply for closure #1 in OSLogArguments.append(_:);
  v123[3] = v118;
  swift_retain();
  v123[4] = partial apply for closure #1 in OSLogArguments.append(_:);
  v123[5] = v119;
  swift_retain();
  v123[6] = partial apply for closure #1 in OSLogArguments.append(_:);
  v123[7] = v120;
  swift_retain();
  v123[8] = partial apply for closure #1 in OSLogArguments.append(_:);
  v123[9] = v121;
  swift_retain();
  v123[10] = partial apply for closure #1 in OSLogArguments.append(_:);
  v123[11] = v122;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(v124, v125))
  {
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    v96 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    v98 = createStorage<A>(capacity:type:)(0);
    v99 = createStorage<A>(capacity:type:)(2);
    v131 = buf;
    v132 = v98;
    v133 = v99;
    serialize(_:at:)(2, &v131);
    serialize(_:at:)(2, &v131);
    v134 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v135 = v117;
    closure #1 in osLogInternal(_:log:type:)(&v134, (uint64_t)&v131, (uint64_t)&v132, (uint64_t)&v133);
    v134 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v135 = v118;
    closure #1 in osLogInternal(_:log:type:)(&v134, (uint64_t)&v131, (uint64_t)&v132, (uint64_t)&v133);
    v134 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v135 = v119;
    closure #1 in osLogInternal(_:log:type:)(&v134, (uint64_t)&v131, (uint64_t)&v132, (uint64_t)&v133);
    v134 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v135 = v120;
    closure #1 in osLogInternal(_:log:type:)(&v134, (uint64_t)&v131, (uint64_t)&v132, (uint64_t)&v133);
    v134 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v135 = v121;
    closure #1 in osLogInternal(_:log:type:)(&v134, (uint64_t)&v131, (uint64_t)&v132, (uint64_t)&v133);
    v134 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v135 = v122;
    closure #1 in osLogInternal(_:log:type:)(&v134, (uint64_t)&v131, (uint64_t)&v132, (uint64_t)&v133);
    _os_log_impl(&dword_24749F000, v124, v125, "Name: %s and Time: %s specified.", buf, size);
    destroyStorage<A>(_:count:)(v98, 0, v96);
    destroyStorage<A>(_:count:)(v99, 2, MEMORY[0x24BEE4AD8] + 8);
    MEMORY[0x24957D398](buf, MEMORY[0x24BEE4260]);
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
  }
  v90 = *(_QWORD *)(v100 + 624);
  v89 = *(_QWORD *)(v100 + 584);
  v91 = *(_QWORD *)(v100 + 576);
  v92 = *(_QWORD *)(v100 + 512);

  v4 = *(void (**)(uint64_t, uint64_t))(v89 + 8);
  *(_QWORD *)(v100 + 672) = v4;
  v4(v90, v91);
  *(_QWORD *)(v100 + 680) = type metadata accessor for HKMedicationExposableDoseEvent();
  *(_QWORD *)(v100 + 248) = _allocateUninitializedArray<A>(_:)();
  v5 = swift_allocObject();
  *(_QWORD *)(v100 + 688) = v5;
  *(_QWORD *)(v100 + 256) = v5 + 16;
  *(_QWORD *)(v5 + 16) = 0;
  swift_bridgeObjectRetain();
  *(_QWORD *)(v100 + 264) = v92;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  lazy protocol witness table accessor for type [String] and conformance [A]();
  Collection<>.makeIterator()();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<[String]>);
  IndexingIterator.next()();
  v93 = *(_QWORD *)(v100 + 168);
  v94 = *(_QWORD *)(v100 + 176);
  *(_QWORD *)(v100 + 696) = v94;
  if (v94)
  {
    *(_QWORD *)(v100 + 200) = v93;
    *(_QWORD *)(v100 + 208) = v94;
    type metadata accessor for HKMedicationIdentifier();
    swift_bridgeObjectRetain();
    v88 = HKMedicationIdentifier.__allocating_init(rawIdentifier:)();
    *(_QWORD *)(v100 + 704) = v88;
    v6 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v100 + 712) = v6;
    *v6 = *(_QWORD *)(v100 + 216);
    v6[1] = SpecificMedicationsPersistor.saveScheduledMedication(named:specifiedDateInterval:medStatusTaken:);
    return SpecificMedicationsPersistor.getDoseEvents(for:medicationIdentifier:)(*(_QWORD *)(v100 + 520), (uint64_t)v88, *(_QWORD *)(v100 + 528), *(_QWORD *)(v100 + 536));
  }
  outlined destroy of [HKQuantityType]();
  v82 = *(_QWORD *)(v100 + 248);
  swift_bridgeObjectRetain();
  v83 = filterUniqueDoseEvents(doseEvents:)(v82);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  *(_QWORD *)(v100 + 248) = v83;
  swift_bridgeObjectRelease();
  *(_QWORD *)(v100 + 272) = v83;
  v84 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [HKMedicationExposableDoseEvent]);
  v85 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
  v86 = lazy protocol witness table accessor for type [HKMedicationExposableDoseEvent] and conformance [A]();
  v87 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF((void (*)(char *, char *))closure #1 in SpecificMedicationsPersistor.saveScheduledMedication(named:specifiedDateInterval:medStatusTaken:), 0, v84, v85, MEMORY[0x24BEE4078], v86, MEMORY[0x24BEE40A8], v95);
  outlined destroy of [HKQuantityType]();
  *(_QWORD *)(v100 + 280) = v87;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String?]);
  lazy protocol witness table accessor for type String? and conformance <A> A?();
  lazy protocol witness table accessor for type [String?] and conformance [A]();
  v80 = Set.init<A>(_:)();
  *(_QWORD *)(v100 + 736) = v80;
  *(_QWORD *)(v100 + 288) = v80;
  swift_bridgeObjectRetain();
  *(_QWORD *)(v100 + 296) = v83;
  v81 = Collection.isEmpty.getter();
  outlined destroy of [HKQuantityType]();
  swift_bridgeObjectRelease();
  if ((v81 & 1) != 0)
  {
    v75 = *(void (**)(uint64_t, uint64_t, uint64_t))(v100 + 632);
    v8 = *(_QWORD *)(v100 + 616);
    v74 = *(_QWORD *)(v100 + 576);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v73 = Logger.wellnessIntents.unsafeMutableAddressor();
    swift_beginAccess();
    v75(v8, v73, v74);
    swift_endAccess();
    oslog = Logger.logObject.getter();
    v77 = static os_log_type_t.debug.getter();
    *(_QWORD *)(v100 + 432) = 2;
    UnsignedInteger<>.init<A>(_:)();
    v76 = *(_DWORD *)(v100 + 816);
    v79 = _allocateUninitializedArray<A>(_:)();
    if (os_log_type_enabled(oslog, v77))
    {
      v69 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      v68 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      v70 = createStorage<A>(capacity:type:)(0);
      v71 = createStorage<A>(capacity:type:)(0);
      *(_QWORD *)(v100 + 440) = v69;
      *(_QWORD *)(v100 + 448) = v70;
      *(_QWORD *)(v100 + 456) = v71;
      serialize(_:at:)(0, (_BYTE **)(v100 + 440));
      serialize(_:at:)(0, (_BYTE **)(v100 + 440));
      *(_QWORD *)(v100 + 464) = v79;
      v72 = (_QWORD *)swift_task_alloc();
      v72[2] = v100 + 440;
      v72[3] = v100 + 448;
      v72[4] = v100 + 456;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
      lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
      Sequence.forEach(_:)();
      swift_task_dealloc();
      _os_log_impl(&dword_24749F000, oslog, v77, "Name and time specified, but no potential time match found. Returning .noMatchFound.", v69, v76);
      destroyStorage<A>(_:count:)(v70, 0, v68);
      destroyStorage<A>(_:count:)(v71, 0, MEMORY[0x24BEE4AD8] + 8);
      MEMORY[0x24957D398](v69, MEMORY[0x24BEE4260]);
    }
    swift_bridgeObjectRelease();
    v65 = *(void (**)(uint64_t, uint64_t))(v100 + 672);
    v63 = *(_QWORD *)(v100 + 616);
    v64 = *(_QWORD *)(v100 + 576);

    v65(v63, v64);
    type metadata accessor for LogSpecificMedicationsIntentResponse();
    v66 = LogSpecificMedicationsIntentResponse.__allocating_init(code:userActivity:)(105, 0);
    swift_bridgeObjectRelease();
    swift_release();
    outlined destroy of [HKQuantityType]();
    v67 = v66;
  }
  else if (Set.count.getter() <= 1 && *(uint64_t *)(*(_QWORD *)(v100 + 688) + 16) <= 1)
  {
    v33 = *(_QWORD *)(v100 + 680);
    swift_bridgeObjectRelease();
    v34 = MEMORY[0x24957D110](v83, v33);
    swift_bridgeObjectRelease();
    if (v34 == 1)
    {
      swift_bridgeObjectRetain();
      *(_QWORD *)(v100 + 352) = v83;
      Collection.first.getter();
      outlined destroy of [HKQuantityType]();
      v32 = *(_QWORD *)(v100 + 344);
      *(_QWORD *)(v100 + 776) = v32;
      if (v32)
      {
        *(_QWORD *)(v100 + 360) = v32;
        swift_bridgeObjectRelease();
        v14 = (_QWORD *)swift_task_alloc();
        *(_QWORD *)(v100 + 784) = v14;
        *v14 = *(_QWORD *)(v100 + 216);
        v14[1] = SpecificMedicationsPersistor.saveScheduledMedication(named:specifiedDateInterval:medStatusTaken:);
        return SpecificMedicationsPersistor.buildConfirmationForScheduledOrAsNeeded(doseEvent:requestedMedStatus:)(v32, *(_BYTE *)(v100 + 801) & 1, *(_QWORD *)(v100 + 528), *(_QWORD *)(v100 + 536));
      }
    }
    swift_bridgeObjectRelease();
    v27 = *(void (**)(uint64_t, uint64_t, uint64_t))(v100 + 632);
    v15 = *(_QWORD *)(v100 + 600);
    v26 = *(_QWORD *)(v100 + 576);
    v25 = Logger.wellness.unsafeMutableAddressor();
    swift_beginAccess();
    v27(v15, v25, v26);
    swift_endAccess();
    v30 = Logger.logObject.getter();
    v29 = static os_log_type_t.error.getter();
    *(_QWORD *)(v100 + 304) = 2;
    UnsignedInteger<>.init<A>(_:)();
    v28 = *(_DWORD *)(v100 + 808);
    v31 = _allocateUninitializedArray<A>(_:)();
    if (os_log_type_enabled(v30, v29))
    {
      v21 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      v22 = createStorage<A>(capacity:type:)(0);
      v23 = createStorage<A>(capacity:type:)(0);
      *(_QWORD *)(v100 + 312) = v21;
      *(_QWORD *)(v100 + 320) = v22;
      *(_QWORD *)(v100 + 328) = v23;
      serialize(_:at:)(0, (_BYTE **)(v100 + 312));
      serialize(_:at:)(0, (_BYTE **)(v100 + 312));
      *(_QWORD *)(v100 + 336) = v31;
      v24 = (_QWORD *)swift_task_alloc();
      v24[2] = v100 + 312;
      v24[3] = v100 + 320;
      v24[4] = v100 + 328;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
      lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
      Sequence.forEach(_:)();
      swift_task_dealloc();
      _os_log_impl(&dword_24749F000, v30, v29, "More than 1 doseEvent found in saveScheduledMedication's fallback condition, returning failure status", v21, v28);
      destroyStorage<A>(_:count:)(v22, 0, v20);
      destroyStorage<A>(_:count:)(v23, 0, MEMORY[0x24BEE4AD8] + 8);
      MEMORY[0x24957D398](v21, MEMORY[0x24BEE4260]);
    }
    swift_bridgeObjectRelease();
    v18 = *(void (**)(uint64_t, uint64_t))(v100 + 672);
    v16 = *(_QWORD *)(v100 + 600);
    v17 = *(_QWORD *)(v100 + 576);

    v18(v16, v17);
    type metadata accessor for LogSpecificMedicationsIntentResponse();
    v19 = LogSpecificMedicationsIntentResponse.__allocating_init(code:userActivity:)(5, 0);
    swift_bridgeObjectRelease();
    swift_release();
    outlined destroy of [HKQuantityType]();
    v67 = v19;
  }
  else
  {
    v52 = *(_QWORD *)(v100 + 688);
    v47 = *(void (**)(uint64_t, uint64_t, uint64_t))(v100 + 632);
    v9 = *(_QWORD *)(v100 + 608);
    v46 = *(_QWORD *)(v100 + 576);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v45 = Logger.wellnessIntents.unsafeMutableAddressor();
    swift_beginAccess();
    v47(v9, v45, v46);
    swift_endAccess();
    swift_bridgeObjectRetain();
    v48 = swift_allocObject();
    *(_QWORD *)(v48 + 16) = v80;
    swift_retain();
    v50 = swift_allocObject();
    *(_QWORD *)(v50 + 16) = partial apply for implicit closure #3 in getPreferredUnit(for:store:);
    *(_QWORD *)(v50 + 24) = v48;
    swift_release();
    swift_retain();
    log = Logger.logObject.getter();
    v62 = static os_log_type_t.debug.getter();
    *(_QWORD *)(v100 + 368) = 22;
    UnsignedInteger<>.init<A>(_:)();
    v49 = *(_DWORD *)(v100 + 812);
    v54 = swift_allocObject();
    *(_BYTE *)(v54 + 16) = 32;
    v55 = swift_allocObject();
    *(_BYTE *)(v55 + 16) = 8;
    v51 = swift_allocObject();
    *(_QWORD *)(v51 + 16) = implicit closure #1 in OSLogInterpolation.appendInterpolation<A>(_:align:privacy:)partial apply;
    *(_QWORD *)(v51 + 24) = v50;
    v56 = swift_allocObject();
    *(_QWORD *)(v56 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:);
    *(_QWORD *)(v56 + 24) = v51;
    v57 = swift_allocObject();
    *(_BYTE *)(v57 + 16) = 0;
    v58 = swift_allocObject();
    *(_BYTE *)(v58 + 16) = 8;
    v53 = swift_allocObject();
    *(_QWORD *)(v53 + 16) = partial apply for implicit closure #7 in SpecificMedicationsPersistor.saveMedication(named:medStatusTaken:dosage:dosageUnit:);
    *(_QWORD *)(v53 + 24) = v52;
    v59 = swift_allocObject();
    *(_QWORD *)(v59 + 16) = partial apply for thunk for @escaping @callee_guaranteed () -> (@unowned Int);
    *(_QWORD *)(v59 + 24) = v53;
    _allocateUninitializedArray<A>(_:)();
    v60 = v10;
    swift_retain();
    *v60 = partial apply for closure #1 in OSLogArguments.append(_:);
    v60[1] = v54;
    swift_retain();
    v60[2] = partial apply for closure #1 in OSLogArguments.append(_:);
    v60[3] = v55;
    swift_retain();
    v60[4] = partial apply for closure #1 in OSLogArguments.append(_:);
    v60[5] = v56;
    swift_retain();
    v60[6] = partial apply for closure #1 in OSLogArguments.append(_:);
    v60[7] = v57;
    swift_retain();
    v60[8] = partial apply for closure #1 in OSLogArguments.append(_:);
    v60[9] = v58;
    swift_retain();
    v60[10] = partial apply for closure #1 in OSLogArguments.append<A>(_:);
    v60[11] = v59;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(log, v62))
    {
      v42 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      v41 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      v43 = createStorage<A>(capacity:type:)(0);
      v44 = createStorage<A>(capacity:type:)(1);
      v126 = v42;
      v127 = v43;
      v128 = v44;
      serialize(_:at:)(2, &v126);
      serialize(_:at:)(2, &v126);
      v129 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v130 = v54;
      closure #1 in osLogInternal(_:log:type:)(&v129, (uint64_t)&v126, (uint64_t)&v127, (uint64_t)&v128);
      v129 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v130 = v55;
      closure #1 in osLogInternal(_:log:type:)(&v129, (uint64_t)&v126, (uint64_t)&v127, (uint64_t)&v128);
      v129 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v130 = v56;
      closure #1 in osLogInternal(_:log:type:)(&v129, (uint64_t)&v126, (uint64_t)&v127, (uint64_t)&v128);
      v129 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v130 = v57;
      closure #1 in osLogInternal(_:log:type:)(&v129, (uint64_t)&v126, (uint64_t)&v127, (uint64_t)&v128);
      v129 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v130 = v58;
      closure #1 in osLogInternal(_:log:type:)(&v129, (uint64_t)&v126, (uint64_t)&v127, (uint64_t)&v128);
      v129 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append<A>(_:);
      v130 = v59;
      closure #1 in osLogInternal(_:log:type:)(&v129, (uint64_t)&v126, (uint64_t)&v127, (uint64_t)&v128);
      _os_log_impl(&dword_24749F000, log, v62, "Multiple times (%s) or strengths (%ld) found for specified name today, returning .needsNameDisambiguation", v42, v49);
      destroyStorage<A>(_:count:)(v43, 0, v41);
      destroyStorage<A>(_:count:)(v44, 1, MEMORY[0x24BEE4AD8] + 8);
      MEMORY[0x24957D398](v42, MEMORY[0x24BEE4260]);
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
    }
    v39 = *(void (**)(uint64_t, uint64_t))(v100 + 672);
    v37 = *(_QWORD *)(v100 + 608);
    v38 = *(_QWORD *)(v100 + 576);

    v39(v37, v38);
    *(_QWORD *)(v100 + 744) = type metadata accessor for MatchedMedName();
    *(_QWORD *)(v100 + 376) = _allocateUninitializedArray<A>(_:)();
    *(_QWORD *)(v100 + 384) = v83;
    Collection<>.makeIterator()();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<[HKMedicationExposableDoseEvent]>);
    IndexingIterator.next()();
    v40 = *(_QWORD *)(v100 + 392);
    *(_QWORD *)(v100 + 752) = v40;
    if (v40)
    {
      *(_QWORD *)(v100 + 408) = v40;
      v11 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v100 + 760) = v11;
      *v11 = *(_QWORD *)(v100 + 216);
      v11[1] = SpecificMedicationsPersistor.saveScheduledMedication(named:specifiedDateInterval:medStatusTaken:);
      return SpecificMedicationsPersistor.buildMatchedMedName(from:shouldIncludeAsNeededParams:)(v40, 1, *(_QWORD *)(v100 + 528), *(_QWORD *)(v100 + 536));
    }
    outlined destroy of [HKQuantityType]();
    type metadata accessor for LogSpecificMedicationsIntentResponse();
    v36 = LogSpecificMedicationsIntentResponse.__allocating_init(code:userActivity:)(103, 0);
    v12 = v36;
    v13 = v36;
    *(_QWORD *)(v100 + 400) = v36;
    swift_bridgeObjectRetain();
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v36, sel_setMatchingMeds_, isa);

    outlined destroy of [HKQuantityType]();
    swift_bridgeObjectRelease();
    swift_release();
    outlined destroy of [HKQuantityType]();
    v67 = v36;
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(char *))(*(_QWORD *)(v100 + 216) + 8))(v67);
}

{
  _QWORD *v0;
  uint64_t result;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  char *v9;
  char *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t);
  char *v16;
  uint64_t v17;
  uint8_t *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(uint64_t, uint64_t, uint64_t);
  uint32_t v25;
  os_log_type_t v26;
  NSObject *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  Class isa;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(uint64_t, uint64_t);
  uint64_t v37;
  uint64_t v38;
  uint8_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void (*v44)(uint64_t, uint64_t, uint64_t);
  uint64_t v45;
  uint32_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  NSObject *log;
  os_log_type_t v59;
  uint64_t v60;
  uint64_t v61;
  void (*v62)(uint64_t, uint64_t);
  char *v63;
  char *v64;
  uint64_t v65;
  uint8_t *buf;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t v71;
  void (*v72)(uint64_t, uint64_t, uint64_t);
  uint32_t size;
  os_log_type_t v74;
  NSObject *oslog;
  uint64_t v76;
  uint64_t v77;
  char v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  id v89;
  uint64_t v90;
  uint64_t v91;
  unsigned int v92;
  uint8_t *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t (*v96)(uint64_t, uint64_t, uint64_t);
  uint64_t v97;

  v91 = v0[90];
  v0[27] = v0;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v0[59] = v91;
  v0[62] = v91;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [HKMedicationExposableDoseEvent]);
  lazy protocol witness table accessor for type [HKMedicationExposableDoseEvent] and conformance [A]();
  Array.append<A>(contentsOf:)();
  swift_bridgeObjectRetain();
  v0[63] = v91;
  lazy protocol witness table accessor for type [HKMedicationExposableDoseEvent] and conformance [A]();
  v92 = Collection.isEmpty.getter();
  outlined destroy of [HKQuantityType]();
  swift_bridgeObjectRelease();
  result = v92;
  if ((v92 & 1) == 0)
  {
    v3 = *(_QWORD *)(*(_QWORD *)(v90 + 688) + 16);
    v86 = v3 + 1;
    if (__OFADD__(v3, 1))
    {
      __break(1u);
      return result;
    }
    *(_QWORD *)(*(_QWORD *)(v90 + 688) + 16) = v86;
  }
  outlined destroy of [HKQuantityType]();
  swift_bridgeObjectRelease();
  v85 = *(_QWORD *)(v90 + 728);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<[String]>);
  IndexingIterator.next()();
  v88 = *(_QWORD *)(v90 + 168);
  v87 = *(_QWORD *)(v90 + 176);
  *(_QWORD *)(v90 + 696) = v87;
  if (v87)
  {
    *(_QWORD *)(v90 + 200) = v88;
    *(_QWORD *)(v90 + 208) = v87;
    type metadata accessor for HKMedicationIdentifier();
    swift_bridgeObjectRetain();
    v89 = HKMedicationIdentifier.__allocating_init(rawIdentifier:)();
    *(_QWORD *)(v90 + 704) = v89;
    v2 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v90 + 712) = v2;
    *v2 = *(_QWORD *)(v90 + 216);
    v2[1] = SpecificMedicationsPersistor.saveScheduledMedication(named:specifiedDateInterval:medStatusTaken:);
    return SpecificMedicationsPersistor.getDoseEvents(for:medicationIdentifier:)(*(_QWORD *)(v90 + 520), (uint64_t)v89, *(_QWORD *)(v90 + 528), *(_QWORD *)(v90 + 536));
  }
  outlined destroy of [HKQuantityType]();
  v79 = *(_QWORD *)(v90 + 248);
  swift_bridgeObjectRetain();
  v80 = filterUniqueDoseEvents(doseEvents:)(v79);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  *(_QWORD *)(v90 + 248) = v80;
  swift_bridgeObjectRelease();
  *(_QWORD *)(v90 + 272) = v80;
  v81 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [HKMedicationExposableDoseEvent]);
  v82 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
  v84 = lazy protocol witness table accessor for type [HKMedicationExposableDoseEvent] and conformance [A]();
  result = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF((void (*)(char *, char *))closure #1 in SpecificMedicationsPersistor.saveScheduledMedication(named:specifiedDateInterval:medStatusTaken:), 0, v81, v82, MEMORY[0x24BEE4078], v84, MEMORY[0x24BEE40A8], v83);
  if (!v85)
  {
    outlined destroy of [HKQuantityType]();
    *(_QWORD *)(v90 + 280) = result;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String?]);
    lazy protocol witness table accessor for type String? and conformance <A> A?();
    lazy protocol witness table accessor for type [String?] and conformance [A]();
    v77 = Set.init<A>(_:)();
    *(_QWORD *)(v90 + 736) = v77;
    *(_QWORD *)(v90 + 288) = v77;
    swift_bridgeObjectRetain();
    *(_QWORD *)(v90 + 296) = v80;
    v78 = Collection.isEmpty.getter();
    outlined destroy of [HKQuantityType]();
    swift_bridgeObjectRelease();
    if ((v78 & 1) != 0)
    {
      v72 = *(void (**)(uint64_t, uint64_t, uint64_t))(v90 + 632);
      v5 = *(_QWORD *)(v90 + 616);
      v71 = *(_QWORD *)(v90 + 576);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v70 = Logger.wellnessIntents.unsafeMutableAddressor();
      swift_beginAccess();
      v72(v5, v70, v71);
      swift_endAccess();
      oslog = Logger.logObject.getter();
      v74 = static os_log_type_t.debug.getter();
      *(_QWORD *)(v90 + 432) = 2;
      UnsignedInteger<>.init<A>(_:)();
      size = *(_DWORD *)(v90 + 816);
      v76 = _allocateUninitializedArray<A>(_:)();
      if (os_log_type_enabled(oslog, v74))
      {
        buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
        v65 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
        v67 = createStorage<A>(capacity:type:)(0);
        v68 = createStorage<A>(capacity:type:)(0);
        *(_QWORD *)(v90 + 440) = buf;
        *(_QWORD *)(v90 + 448) = v67;
        *(_QWORD *)(v90 + 456) = v68;
        serialize(_:at:)(0, (_BYTE **)(v90 + 440));
        serialize(_:at:)(0, (_BYTE **)(v90 + 440));
        *(_QWORD *)(v90 + 464) = v76;
        v69 = (_QWORD *)swift_task_alloc();
        v69[2] = v90 + 440;
        v69[3] = v90 + 448;
        v69[4] = v90 + 456;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
        lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
        Sequence.forEach(_:)();
        swift_task_dealloc();
        _os_log_impl(&dword_24749F000, oslog, v74, "Name and time specified, but no potential time match found. Returning .noMatchFound.", buf, size);
        destroyStorage<A>(_:count:)(v67, 0, v65);
        destroyStorage<A>(_:count:)(v68, 0, MEMORY[0x24BEE4AD8] + 8);
        MEMORY[0x24957D398](buf, MEMORY[0x24BEE4260]);
      }
      swift_bridgeObjectRelease();
      v62 = *(void (**)(uint64_t, uint64_t))(v90 + 672);
      v60 = *(_QWORD *)(v90 + 616);
      v61 = *(_QWORD *)(v90 + 576);

      v62(v60, v61);
      type metadata accessor for LogSpecificMedicationsIntentResponse();
      v63 = LogSpecificMedicationsIntentResponse.__allocating_init(code:userActivity:)(105, 0);
      swift_bridgeObjectRelease();
      swift_release();
      outlined destroy of [HKQuantityType]();
      v64 = v63;
    }
    else if (Set.count.getter() <= 1 && *(uint64_t *)(*(_QWORD *)(v90 + 688) + 16) <= 1)
    {
      v30 = *(_QWORD *)(v90 + 680);
      swift_bridgeObjectRelease();
      v31 = MEMORY[0x24957D110](v80, v30);
      swift_bridgeObjectRelease();
      if (v31 == 1)
      {
        swift_bridgeObjectRetain();
        *(_QWORD *)(v90 + 352) = v80;
        Collection.first.getter();
        outlined destroy of [HKQuantityType]();
        v29 = *(_QWORD *)(v90 + 344);
        *(_QWORD *)(v90 + 776) = v29;
        if (v29)
        {
          *(_QWORD *)(v90 + 360) = v29;
          swift_bridgeObjectRelease();
          v11 = (_QWORD *)swift_task_alloc();
          *(_QWORD *)(v90 + 784) = v11;
          *v11 = *(_QWORD *)(v90 + 216);
          v11[1] = SpecificMedicationsPersistor.saveScheduledMedication(named:specifiedDateInterval:medStatusTaken:);
          return SpecificMedicationsPersistor.buildConfirmationForScheduledOrAsNeeded(doseEvent:requestedMedStatus:)(v29, *(_BYTE *)(v90 + 801) & 1, *(_QWORD *)(v90 + 528), *(_QWORD *)(v90 + 536));
        }
      }
      swift_bridgeObjectRelease();
      v24 = *(void (**)(uint64_t, uint64_t, uint64_t))(v90 + 632);
      v12 = *(_QWORD *)(v90 + 600);
      v23 = *(_QWORD *)(v90 + 576);
      v22 = Logger.wellness.unsafeMutableAddressor();
      swift_beginAccess();
      v24(v12, v22, v23);
      swift_endAccess();
      v27 = Logger.logObject.getter();
      v26 = static os_log_type_t.error.getter();
      *(_QWORD *)(v90 + 304) = 2;
      UnsignedInteger<>.init<A>(_:)();
      v25 = *(_DWORD *)(v90 + 808);
      v28 = _allocateUninitializedArray<A>(_:)();
      if (os_log_type_enabled(v27, v26))
      {
        v18 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
        v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
        v19 = createStorage<A>(capacity:type:)(0);
        v20 = createStorage<A>(capacity:type:)(0);
        *(_QWORD *)(v90 + 312) = v18;
        *(_QWORD *)(v90 + 320) = v19;
        *(_QWORD *)(v90 + 328) = v20;
        serialize(_:at:)(0, (_BYTE **)(v90 + 312));
        serialize(_:at:)(0, (_BYTE **)(v90 + 312));
        *(_QWORD *)(v90 + 336) = v28;
        v21 = (_QWORD *)swift_task_alloc();
        v21[2] = v90 + 312;
        v21[3] = v90 + 320;
        v21[4] = v90 + 328;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
        lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
        Sequence.forEach(_:)();
        swift_task_dealloc();
        _os_log_impl(&dword_24749F000, v27, v26, "More than 1 doseEvent found in saveScheduledMedication's fallback condition, returning failure status", v18, v25);
        destroyStorage<A>(_:count:)(v19, 0, v17);
        destroyStorage<A>(_:count:)(v20, 0, MEMORY[0x24BEE4AD8] + 8);
        MEMORY[0x24957D398](v18, MEMORY[0x24BEE4260]);
      }
      swift_bridgeObjectRelease();
      v15 = *(void (**)(uint64_t, uint64_t))(v90 + 672);
      v13 = *(_QWORD *)(v90 + 600);
      v14 = *(_QWORD *)(v90 + 576);

      v15(v13, v14);
      type metadata accessor for LogSpecificMedicationsIntentResponse();
      v16 = LogSpecificMedicationsIntentResponse.__allocating_init(code:userActivity:)(5, 0);
      swift_bridgeObjectRelease();
      swift_release();
      outlined destroy of [HKQuantityType]();
      v64 = v16;
    }
    else
    {
      v49 = *(_QWORD *)(v90 + 688);
      v44 = *(void (**)(uint64_t, uint64_t, uint64_t))(v90 + 632);
      v6 = *(_QWORD *)(v90 + 608);
      v43 = *(_QWORD *)(v90 + 576);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v42 = Logger.wellnessIntents.unsafeMutableAddressor();
      swift_beginAccess();
      v44(v6, v42, v43);
      swift_endAccess();
      swift_bridgeObjectRetain();
      v45 = swift_allocObject();
      *(_QWORD *)(v45 + 16) = v77;
      swift_retain();
      v47 = swift_allocObject();
      *(_QWORD *)(v47 + 16) = partial apply for implicit closure #3 in getPreferredUnit(for:store:);
      *(_QWORD *)(v47 + 24) = v45;
      swift_release();
      swift_retain();
      log = Logger.logObject.getter();
      v59 = static os_log_type_t.debug.getter();
      *(_QWORD *)(v90 + 368) = 22;
      UnsignedInteger<>.init<A>(_:)();
      v46 = *(_DWORD *)(v90 + 812);
      v51 = swift_allocObject();
      *(_BYTE *)(v51 + 16) = 32;
      v52 = swift_allocObject();
      *(_BYTE *)(v52 + 16) = 8;
      v48 = swift_allocObject();
      *(_QWORD *)(v48 + 16) = implicit closure #1 in OSLogInterpolation.appendInterpolation<A>(_:align:privacy:)partial apply;
      *(_QWORD *)(v48 + 24) = v47;
      v53 = swift_allocObject();
      *(_QWORD *)(v53 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:);
      *(_QWORD *)(v53 + 24) = v48;
      v54 = swift_allocObject();
      *(_BYTE *)(v54 + 16) = 0;
      v55 = swift_allocObject();
      *(_BYTE *)(v55 + 16) = 8;
      v50 = swift_allocObject();
      *(_QWORD *)(v50 + 16) = partial apply for implicit closure #7 in SpecificMedicationsPersistor.saveMedication(named:medStatusTaken:dosage:dosageUnit:);
      *(_QWORD *)(v50 + 24) = v49;
      v56 = swift_allocObject();
      *(_QWORD *)(v56 + 16) = partial apply for thunk for @escaping @callee_guaranteed () -> (@unowned Int);
      *(_QWORD *)(v56 + 24) = v50;
      _allocateUninitializedArray<A>(_:)();
      v57 = v7;
      swift_retain();
      *v57 = partial apply for closure #1 in OSLogArguments.append(_:);
      v57[1] = v51;
      swift_retain();
      v57[2] = partial apply for closure #1 in OSLogArguments.append(_:);
      v57[3] = v52;
      swift_retain();
      v57[4] = partial apply for closure #1 in OSLogArguments.append(_:);
      v57[5] = v53;
      swift_retain();
      v57[6] = partial apply for closure #1 in OSLogArguments.append(_:);
      v57[7] = v54;
      swift_retain();
      v57[8] = partial apply for closure #1 in OSLogArguments.append(_:);
      v57[9] = v55;
      swift_retain();
      v57[10] = partial apply for closure #1 in OSLogArguments.append<A>(_:);
      v57[11] = v56;
      _finalizeUninitializedArray<A>(_:)();
      swift_bridgeObjectRelease();
      if (os_log_type_enabled(log, v59))
      {
        v39 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
        v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
        v40 = createStorage<A>(capacity:type:)(0);
        v41 = createStorage<A>(capacity:type:)(1);
        v93 = v39;
        v94 = v40;
        v95 = v41;
        serialize(_:at:)(2, &v93);
        serialize(_:at:)(2, &v93);
        v96 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
        v97 = v51;
        closure #1 in osLogInternal(_:log:type:)(&v96, (uint64_t)&v93, (uint64_t)&v94, (uint64_t)&v95);
        v96 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
        v97 = v52;
        closure #1 in osLogInternal(_:log:type:)(&v96, (uint64_t)&v93, (uint64_t)&v94, (uint64_t)&v95);
        v96 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
        v97 = v53;
        closure #1 in osLogInternal(_:log:type:)(&v96, (uint64_t)&v93, (uint64_t)&v94, (uint64_t)&v95);
        v96 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
        v97 = v54;
        closure #1 in osLogInternal(_:log:type:)(&v96, (uint64_t)&v93, (uint64_t)&v94, (uint64_t)&v95);
        v96 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
        v97 = v55;
        closure #1 in osLogInternal(_:log:type:)(&v96, (uint64_t)&v93, (uint64_t)&v94, (uint64_t)&v95);
        v96 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append<A>(_:);
        v97 = v56;
        closure #1 in osLogInternal(_:log:type:)(&v96, (uint64_t)&v93, (uint64_t)&v94, (uint64_t)&v95);
        _os_log_impl(&dword_24749F000, log, v59, "Multiple times (%s) or strengths (%ld) found for specified name today, returning .needsNameDisambiguation", v39, v46);
        destroyStorage<A>(_:count:)(v40, 0, v38);
        destroyStorage<A>(_:count:)(v41, 1, MEMORY[0x24BEE4AD8] + 8);
        MEMORY[0x24957D398](v39, MEMORY[0x24BEE4260]);
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
      }
      else
      {
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
      }
      v36 = *(void (**)(uint64_t, uint64_t))(v90 + 672);
      v34 = *(_QWORD *)(v90 + 608);
      v35 = *(_QWORD *)(v90 + 576);

      v36(v34, v35);
      *(_QWORD *)(v90 + 744) = type metadata accessor for MatchedMedName();
      *(_QWORD *)(v90 + 376) = _allocateUninitializedArray<A>(_:)();
      *(_QWORD *)(v90 + 384) = v80;
      Collection<>.makeIterator()();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<[HKMedicationExposableDoseEvent]>);
      IndexingIterator.next()();
      v37 = *(_QWORD *)(v90 + 392);
      *(_QWORD *)(v90 + 752) = v37;
      if (v37)
      {
        *(_QWORD *)(v90 + 408) = v37;
        v8 = (_QWORD *)swift_task_alloc();
        *(_QWORD *)(v90 + 760) = v8;
        *v8 = *(_QWORD *)(v90 + 216);
        v8[1] = SpecificMedicationsPersistor.saveScheduledMedication(named:specifiedDateInterval:medStatusTaken:);
        return SpecificMedicationsPersistor.buildMatchedMedName(from:shouldIncludeAsNeededParams:)(v37, 1, *(_QWORD *)(v90 + 528), *(_QWORD *)(v90 + 536));
      }
      outlined destroy of [HKQuantityType]();
      type metadata accessor for LogSpecificMedicationsIntentResponse();
      v33 = LogSpecificMedicationsIntentResponse.__allocating_init(code:userActivity:)(103, 0);
      v9 = v33;
      v10 = v33;
      *(_QWORD *)(v90 + 400) = v33;
      swift_bridgeObjectRetain();
      isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      objc_msgSend(v33, sel_setMatchingMeds_, isa);

      outlined destroy of [HKQuantityType]();
      swift_bridgeObjectRelease();
      swift_release();
      outlined destroy of [HKQuantityType]();
      v64 = v33;
    }
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(char *))(*(_QWORD *)(v90 + 216) + 8))(v64);
  }
  return result;
}

{
  _QWORD *v0;
  id v1;
  _QWORD *v2;
  char *v4;
  char *v5;
  Class isa;
  char *v7;
  uint64_t v8;
  id v9;
  id v10;
  uint64_t v11;

  v9 = (id)v0[96];
  v10 = (id)v0[94];
  v0[27] = v0;
  v0[52] = v9;
  v1 = v9;
  v0[53] = v9;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [MatchedMedName]);
  Array.append(_:)();

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<[HKMedicationExposableDoseEvent]>);
  IndexingIterator.next()();
  v11 = v0[49];
  v0[94] = v11;
  if (v11)
  {
    *(_QWORD *)(v8 + 408) = v11;
    v2 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v8 + 760) = v2;
    *v2 = *(_QWORD *)(v8 + 216);
    v2[1] = SpecificMedicationsPersistor.saveScheduledMedication(named:specifiedDateInterval:medStatusTaken:);
    return SpecificMedicationsPersistor.buildMatchedMedName(from:shouldIncludeAsNeededParams:)(v11, 1, *(_QWORD *)(v8 + 528), *(_QWORD *)(v8 + 536));
  }
  else
  {
    outlined destroy of [HKQuantityType]();
    type metadata accessor for LogSpecificMedicationsIntentResponse();
    v7 = LogSpecificMedicationsIntentResponse.__allocating_init(code:userActivity:)(103, 0);
    v4 = v7;
    v5 = v7;
    *(_QWORD *)(v8 + 400) = v7;
    swift_bridgeObjectRetain();
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v7, sel_setMatchingMeds_, isa);

    outlined destroy of [HKQuantityType]();
    swift_bridgeObjectRelease();
    swift_release();
    outlined destroy of [HKQuantityType]();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(char *))(*(_QWORD *)(v8 + 216) + 8))(v7);
  }
}

{
  _QWORD *v0;
  void *v1;
  uint64_t v3;

  v1 = (void *)v0[97];
  v0[27] = v0;

  swift_bridgeObjectRelease();
  swift_release();
  outlined destroy of [HKQuantityType]();
  v3 = v0[99];
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(v0[27] + 8))(v3);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  id v3;
  id v4;
  _QWORD *v5;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  id v10;
  char *v11;
  uint64_t v12;
  uint8_t *buf;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t, uint64_t);
  id v20;
  uint32_t size;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  NSObject *v29;
  os_log_type_t v30;
  uint8_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t (*v34)(uint64_t, uint64_t, uint64_t);
  uint64_t v35;

  v20 = *(id *)(v0 + 728);
  v1 = *(void **)(v0 + 704);
  v19 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 632);
  v2 = *(_QWORD *)(v0 + 592);
  v18 = *(_QWORD *)(v0 + 576);
  *(_QWORD *)(v0 + 216) = v0;

  swift_bridgeObjectRelease();
  outlined destroy of [HKQuantityType]();
  swift_release();
  outlined destroy of [HKQuantityType]();
  v3 = v20;
  *(_QWORD *)(v0 + 480) = v20;
  v17 = Logger.wellnessIntents.unsafeMutableAddressor();
  swift_beginAccess();
  v19(v2, v17, v18);
  swift_endAccess();
  v4 = v20;
  v22 = swift_allocObject();
  *(_QWORD *)(v22 + 16) = v20;
  default argument 2 of OSLogInterpolation.appendInterpolation(_:privacy:attributes:)();
  swift_bridgeObjectRelease();
  v29 = Logger.logObject.getter();
  v30 = static os_log_type_t.error.getter();
  *(_QWORD *)(v0 + 488) = 12;
  UnsignedInteger<>.init<A>(_:)();
  size = *(_DWORD *)(v0 + 820);
  v25 = swift_allocObject();
  *(_BYTE *)(v25 + 16) = 64;
  v26 = swift_allocObject();
  *(_BYTE *)(v26 + 16) = 8;
  v23 = swift_allocObject();
  *(_QWORD *)(v23 + 16) = partial apply for implicit closure #10 in getPreferredUnit(for:store:);
  *(_QWORD *)(v23 + 24) = v22;
  v24 = swift_allocObject();
  *(_QWORD *)(v24 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:attributes:);
  *(_QWORD *)(v24 + 24) = v23;
  v27 = swift_allocObject();
  *(_QWORD *)(v27 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:);
  *(_QWORD *)(v27 + 24) = v24;
  _allocateUninitializedArray<A>(_:)();
  v28 = v5;
  swift_retain();
  *v28 = partial apply for closure #1 in OSLogArguments.append(_:);
  v28[1] = v25;
  swift_retain();
  v28[2] = partial apply for closure #1 in OSLogArguments.append(_:);
  v28[3] = v26;
  swift_retain();
  v28[4] = partial apply for closure #1 in OSLogArguments.append(_:);
  v28[5] = v27;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(v29, v30))
  {
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    v14 = createStorage<A>(capacity:type:)(1);
    v15 = createStorage<A>(capacity:type:)(0);
    v31 = buf;
    v32 = v14;
    v33 = v15;
    serialize(_:at:)(2, &v31);
    serialize(_:at:)(1, &v31);
    v34 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v35 = v25;
    closure #1 in osLogInternal(_:log:type:)(&v34, (uint64_t)&v31, (uint64_t)&v32, (uint64_t)&v33);
    v34 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v35 = v26;
    closure #1 in osLogInternal(_:log:type:)(&v34, (uint64_t)&v31, (uint64_t)&v32, (uint64_t)&v33);
    v34 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v35 = v27;
    closure #1 in osLogInternal(_:log:type:)(&v34, (uint64_t)&v31, (uint64_t)&v32, (uint64_t)&v33);
    _os_log_impl(&dword_24749F000, v29, v30, "Failed fetching dose events for specified timeframe: %@", buf, size);
    destroyStorage<A>(_:count:)(v14, 1, v12);
    destroyStorage<A>(_:count:)(v15, 0, MEMORY[0x24BEE4AD8] + 8);
    MEMORY[0x24957D398](buf, MEMORY[0x24BEE4260]);
    swift_release();
    swift_release();
    swift_release();
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
  }
  v10 = (id)v16[91];
  v9 = (void (*)(uint64_t, uint64_t))v16[84];
  v7 = v16[74];
  v8 = v16[72];

  v9(v7, v8);
  type metadata accessor for LogSpecificMedicationsIntentResponse();
  v11 = LogSpecificMedicationsIntentResponse.__allocating_init(code:userActivity:)(5, 0);

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(char *))(v16[27] + 8))(v11);
}

uint64_t SpecificMedicationsPersistor.saveScheduledMedication(named:specifiedDateInterval:medStatusTaken:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v5;

  v3 = (_QWORD *)*v2;
  v3[27] = *v2;
  v3 += 27;
  v5 = v3 - 25;
  v3[63] = a1;
  v3[64] = v1;
  swift_task_dealloc();
  if (!v1)

  return swift_task_switch();
}

{
  uint64_t *v1;
  uint64_t v3;

  v3 = *v1;
  *(_QWORD *)(v3 + 216) = *v1;
  *(_QWORD *)(v3 + 768) = a1;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t *v1;
  uint64_t v3;

  v3 = *v1;
  *(_QWORD *)(v3 + 216) = *v1;
  *(_QWORD *)(v3 + 792) = a1;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t SpecificMedicationsPersistor.getDateIntervalCloserToNow(firstDateInterval:secondDateInterval:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  void (*v28)(char *, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  double v33;
  double v34;
  uint64_t v35;
  double v36;
  double v37;
  uint64_t v38;
  double v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;

  v16 = a5;
  v17 = a1;
  v22 = a2;
  v18 = a3;
  v19 = a4;
  v44 = 0;
  v43 = 0;
  v42 = 0;
  v40 = 0;
  v41 = 0;
  v37 = 0.0;
  v34 = 0.0;
  v27 = type metadata accessor for Date();
  v23 = *(_QWORD *)(v27 - 8);
  v20 = (*(_QWORD *)(v23 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v27);
  v26 = (char *)&v15 - v20;
  v21 = (v6 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8]((char *)&v15 - v20);
  v25 = (char *)&v15 - v21;
  v44 = (char *)&v15 - v21;
  v43 = a1;
  v42 = v7;
  v40 = v8;
  v41 = v9;
  Date.init()();
  DateInterval.start.getter();
  Date.timeIntervalSince(_:)();
  v24 = v10;
  v28 = *(void (**)(char *, uint64_t))(v23 + 8);
  v28(v26, v27);
  v38 = v24;
  v30 = MEMORY[0x24BEE13C8];
  v31 = MEMORY[0x24BEE13F0];
  v32 = MEMORY[0x24BEE1420];
  abs<A>(_:)();
  v33 = v39;
  v37 = v39;
  DateInterval.start.getter();
  Date.timeIntervalSince(_:)();
  v29 = v11;
  v28(v26, v27);
  v35 = v29;
  abs<A>(_:)();
  v34 = v36;
  if (v33 >= v36)
  {
    v13 = type metadata accessor for DateInterval();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(v16, v22);
  }
  else
  {
    v12 = type metadata accessor for DateInterval();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v16, v17);
  }
  return ((uint64_t (*)(char *, uint64_t))v28)(v25, v27);
}

uint64_t implicit closure #2 in SpecificMedicationsPersistor.saveScheduledMedication(named:specifiedDateInterval:medStatusTaken:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  v2 = type metadata accessor for DateInterval();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a2, a1);
}

void closure #1 in SpecificMedicationsPersistor.saveScheduledMedication(named:specifiedDateInterval:medStatusTaken:)(id *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v8;

  v8 = objc_msgSend(*a1, sel_scheduleItemIdentifier);
  if (v8)
  {
    v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v4 = v2;

    v5 = v3;
    v6 = v4;
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  *a2 = v5;
  a2[1] = v6;
}

uint64_t implicit closure #5 in SpecificMedicationsPersistor.saveScheduledMedication(named:specifiedDateInterval:medStatusTaken:)(uint64_t a1)
{
  uint64_t v3;

  swift_beginAccess();
  v3 = *(_QWORD *)(a1 + 16);
  swift_endAccess();
  return v3;
}

uint64_t SpecificMedicationsPersistor.saveScheduledMedication(specifiedDateInterval:medStatusTaken:)(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)(v4 + 1800) = a4;
  *(_QWORD *)(v4 + 1792) = a3;
  *(_BYTE *)(v4 + 2385) = a2 & 1;
  *(_QWORD *)(v4 + 1784) = a1;
  *(_QWORD *)(v4 + 1128) = v4;
  *(_QWORD *)(v4 + 1136) = 0;
  *(_BYTE *)(v4 + 2384) = 0;
  *(_QWORD *)(v4 + 888) = 0;
  *(_QWORD *)(v4 + 896) = 0;
  *(_QWORD *)(v4 + 1160) = 0;
  *(_QWORD *)(v4 + 1168) = 0;
  *(_QWORD *)(v4 + 1232) = 0;
  *(_QWORD *)(v4 + 904) = 0;
  *(_QWORD *)(v4 + 912) = 0;
  *(_QWORD *)(v4 + 1280) = 0;
  *(_QWORD *)(v4 + 1288) = 0;
  *(_QWORD *)(v4 + 920) = 0;
  *(_QWORD *)(v4 + 928) = 0;
  *(_QWORD *)(v4 + 1312) = 0;
  *(_QWORD *)(v4 + 1320) = 0;
  *(_QWORD *)(v4 + 1368) = 0;
  *(_QWORD *)(v4 + 1376) = 0;
  *(_QWORD *)(v4 + 936) = 0;
  *(_QWORD *)(v4 + 944) = 0;
  *(_QWORD *)(v4 + 1400) = 0;
  *(_QWORD *)(v4 + 1416) = 0;
  *(_BYTE *)(v4 + 2392) = 0;
  *(_BYTE *)(v4 + 2400) = 0;
  *(_QWORD *)(v4 + 1440) = 0;
  *(_QWORD *)(v4 + 952) = 0;
  *(_QWORD *)(v4 + 960) = 0;
  *(_QWORD *)(v4 + 1464) = 0;
  *(_QWORD *)(v4 + 1472) = 0;
  *(_QWORD *)(v4 + 1480) = 0;
  *(_QWORD *)(v4 + 1504) = 0;
  *(_QWORD *)(v4 + 968) = 0;
  *(_QWORD *)(v4 + 976) = 0;
  *(_QWORD *)(v4 + 1536) = 0;
  *(_QWORD *)(v4 + 1552) = 0;
  *(_QWORD *)(v4 + 1608) = 0;
  memset((void *)(v4 + 56), 0, 0x28uLL);
  *(_QWORD *)(v4 + 1616) = 0;
  *(_QWORD *)(v4 + 984) = 0;
  *(_QWORD *)(v4 + 992) = 0;
  *(_QWORD *)(v4 + 1000) = 0;
  *(_QWORD *)(v4 + 1008) = 0;
  *(_QWORD *)(v4 + 1624) = 0;
  *(_QWORD *)(v4 + 1632) = 0;
  *(_QWORD *)(v4 + 1728) = 0;
  *(_QWORD *)(v4 + 1096) = 0;
  *(_QWORD *)(v4 + 1104) = 0;
  *(_QWORD *)(v4 + 1744) = 0;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (scheduleDate: Date?, medID: String, count: Int));
  *(_QWORD *)(v4 + 1808) = v5;
  *(_QWORD *)(v4 + 1816) = *(_QWORD *)(v5 - 8);
  *(_QWORD *)(v4 + 1824) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String?, value: (scheduleDate: Date?, medID: String, count: Int))?);
  *(_QWORD *)(v4 + 1832) = swift_task_alloc();
  *(_QWORD *)(v4 + 1840) = swift_task_alloc();
  v6 = type metadata accessor for Date();
  *(_QWORD *)(v4 + 1848) = v6;
  *(_QWORD *)(v4 + 1856) = *(_QWORD *)(v6 - 8);
  *(_QWORD *)(v4 + 1864) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (scheduleDate: Date?, medID: String, count: Int)?);
  *(_QWORD *)(v4 + 1872) = swift_task_alloc();
  *(_QWORD *)(v4 + 1880) = swift_task_alloc();
  *(_QWORD *)(v4 + 1888) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Date?, String, Int)?);
  *(_QWORD *)(v4 + 1896) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  *(_QWORD *)(v4 + 1904) = swift_task_alloc();
  *(_QWORD *)(v4 + 1912) = swift_task_alloc();
  *(_QWORD *)(v4 + 1920) = swift_task_alloc();
  v7 = type metadata accessor for DateInterval();
  *(_QWORD *)(v4 + 1928) = v7;
  v8 = *(_QWORD *)(v7 - 8);
  *(_QWORD *)(v4 + 1936) = v8;
  *(_QWORD *)(v4 + 1944) = *(_QWORD *)(v8 + 64);
  *(_QWORD *)(v4 + 1952) = swift_task_alloc();
  v9 = type metadata accessor for Logger();
  *(_QWORD *)(v4 + 1960) = v9;
  *(_QWORD *)(v4 + 1968) = *(_QWORD *)(v9 - 8);
  *(_QWORD *)(v4 + 1976) = swift_task_alloc();
  *(_QWORD *)(v4 + 1984) = swift_task_alloc();
  *(_QWORD *)(v4 + 1992) = swift_task_alloc();
  *(_QWORD *)(v4 + 2000) = swift_task_alloc();
  *(_QWORD *)(v4 + 2008) = swift_task_alloc();
  *(_QWORD *)(v4 + 2016) = swift_task_alloc();
  *(_QWORD *)(v4 + 2024) = swift_task_alloc();
  *(_QWORD *)(v4 + 2032) = swift_task_alloc();
  *(_QWORD *)(v4 + 2040) = swift_task_alloc();
  *(_QWORD *)(v4 + 2048) = swift_task_alloc();
  *(_QWORD *)(v4 + 2056) = swift_task_alloc();
  *(_QWORD *)(v4 + 2064) = swift_task_alloc();
  *(_QWORD *)(v4 + 2072) = swift_task_alloc();
  *(_QWORD *)(v4 + 1136) = a1;
  *(_BYTE *)(v4 + 2384) = a2 & 1;
  *(_QWORD *)(v4 + 888) = a3;
  *(_QWORD *)(v4 + 896) = a4;
  return swift_task_switch();
}

uint64_t SpecificMedicationsPersistor.saveScheduledMedication(specifiedDateInterval:medStatusTaken:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint32_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  NSObject *log;
  os_log_type_t v31;
  uint64_t v32;
  uint8_t *buf;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(uint64_t, uint64_t, uint64_t);
  uint32_t size;
  os_log_type_t v43;
  NSObject *oslog;
  uint64_t v45;
  uint8_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t (*v49)(uint64_t, uint64_t, uint64_t);
  uint64_t v50;

  v1 = *(_QWORD *)(v0 + 2072);
  v38 = *(_QWORD *)(v0 + 1968);
  v40 = *(_QWORD *)(v0 + 1960);
  *(_QWORD *)(v0 + 1128) = v0;
  v39 = Logger.wellnessIntents.unsafeMutableAddressor();
  swift_beginAccess();
  v41 = *(void (**)(uint64_t, uint64_t, uint64_t))(v38 + 16);
  *(_QWORD *)(v0 + 2080) = v41;
  v41(v1, v39, v40);
  swift_endAccess();
  oslog = Logger.logObject.getter();
  v43 = static os_log_type_t.debug.getter();
  *(_QWORD *)(v0 + 1144) = 2;
  *(_QWORD *)(v0 + 2088) = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  *(_QWORD *)(v0 + 2096) = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  *(_QWORD *)(v0 + 2104) = lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  size = *(_DWORD *)(v0 + 2388);
  *(_QWORD *)(v0 + 2112) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
  v45 = _allocateUninitializedArray<A>(_:)();
  if (os_log_type_enabled(oslog, v43))
  {
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    v34 = createStorage<A>(capacity:type:)(0);
    v35 = createStorage<A>(capacity:type:)(0);
    *(_QWORD *)(v37 + 1752) = buf;
    *(_QWORD *)(v37 + 1760) = v34;
    *(_QWORD *)(v37 + 1768) = v35;
    serialize(_:at:)(0, (_BYTE **)(v37 + 1752));
    serialize(_:at:)(0, (_BYTE **)(v37 + 1752));
    *(_QWORD *)(v37 + 1776) = v45;
    v36 = (_QWORD *)swift_task_alloc();
    v36[2] = v37 + 1752;
    v36[3] = v37 + 1760;
    v36[4] = v37 + 1768;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
    lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
    Sequence.forEach(_:)();
    swift_task_dealloc();
    _os_log_impl(&dword_24749F000, oslog, v43, "Got startTime, endTime.", buf, size);
    destroyStorage<A>(_:count:)(v34, 0, v32);
    destroyStorage<A>(_:count:)(v35, 0, MEMORY[0x24BEE4AD8] + 8);
    MEMORY[0x24957D398](buf, MEMORY[0x24BEE4260]);
  }
  swift_bridgeObjectRelease();
  v14 = *(_QWORD *)(v37 + 2072);
  v2 = *(_QWORD *)(v37 + 2064);
  v13 = *(_QWORD *)(v37 + 1968);
  v17 = *(_QWORD *)(v37 + 1960);
  v21 = *(_QWORD *)(v37 + 1952);
  v20 = *(_QWORD *)(v37 + 1936);
  v22 = *(_QWORD *)(v37 + 1928);
  v18 = *(_QWORD *)(v37 + 1784);

  v15 = *(void (**)(uint64_t, uint64_t))(v13 + 8);
  *(_QWORD *)(v37 + 2120) = v15;
  v15(v14, v17);
  v16 = Logger.wellnessIntents.unsafeMutableAddressor();
  swift_beginAccess();
  v41(v2, v16, v17);
  swift_endAccess();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v20 + 16))(v21, v18, v22);
  v19 = (*(unsigned __int8 *)(v20 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v20 + 80);
  v24 = swift_allocObject();
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v20 + 32))(v24 + v19, v21, v22);
  log = Logger.logObject.getter();
  v31 = static os_log_type_t.debug.getter();
  *(_QWORD *)(v37 + 1152) = 12;
  UnsignedInteger<>.init<A>(_:)();
  v23 = *(_DWORD *)(v37 + 2396);
  v26 = swift_allocObject();
  *(_BYTE *)(v26 + 16) = 32;
  v27 = swift_allocObject();
  *(_BYTE *)(v27 + 16) = 8;
  v25 = swift_allocObject();
  *(_QWORD *)(v25 + 16) = partial apply for implicit closure #1 in SpecificMedicationsPersistor.saveMedication(named:medStatusTaken:dosage:dosageUnit:);
  *(_QWORD *)(v25 + 24) = v24;
  v28 = swift_allocObject();
  *(_QWORD *)(v28 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:);
  *(_QWORD *)(v28 + 24) = v25;
  _allocateUninitializedArray<A>(_:)();
  v29 = v3;
  swift_retain();
  *v29 = partial apply for closure #1 in OSLogArguments.append(_:);
  v29[1] = v26;
  swift_retain();
  v29[2] = partial apply for closure #1 in OSLogArguments.append(_:);
  v29[3] = v27;
  swift_retain();
  v29[4] = partial apply for closure #1 in OSLogArguments.append(_:);
  v29[5] = v28;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(log, v31))
  {
    v10 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    v11 = createStorage<A>(capacity:type:)(0);
    v12 = createStorage<A>(capacity:type:)(1);
    v46 = v10;
    v47 = v11;
    v48 = v12;
    serialize(_:at:)(2, &v46);
    serialize(_:at:)(1, &v46);
    v49 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v50 = v26;
    closure #1 in osLogInternal(_:log:type:)(&v49, (uint64_t)&v46, (uint64_t)&v47, (uint64_t)&v48);
    v49 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v50 = v27;
    closure #1 in osLogInternal(_:log:type:)(&v49, (uint64_t)&v46, (uint64_t)&v47, (uint64_t)&v48);
    v49 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v50 = v28;
    closure #1 in osLogInternal(_:log:type:)(&v49, (uint64_t)&v46, (uint64_t)&v47, (uint64_t)&v48);
    _os_log_impl(&dword_24749F000, log, v31, "searching dateinterval: %s", v10, v23);
    destroyStorage<A>(_:count:)(v11, 0, v9);
    destroyStorage<A>(_:count:)(v12, 1, MEMORY[0x24BEE4AD8] + 8);
    MEMORY[0x24957D398](v10, MEMORY[0x24BEE4260]);
    swift_release();
    swift_release();
    swift_release();
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
  }
  v7 = *(_QWORD *)(v37 + 2064);
  v8 = *(_QWORD *)(v37 + 1960);

  v15(v7, v8);
  v4 = swift_allocObject();
  *(_QWORD *)(v37 + 2128) = v4;
  *(_QWORD *)(v37 + 1160) = v4 + 16;
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v37 + 2136) = v5;
  *v5 = *(_QWORD *)(v37 + 1128);
  v5[1] = SpecificMedicationsPersistor.saveScheduledMedication(specifiedDateInterval:medStatusTaken:);
  return SpecificMedicationsPersistor.getDoseEvents(for:medicationIdentifier:)(*(_QWORD *)(v37 + 1784), 0, *(_QWORD *)(v37 + 1792), *(_QWORD *)(v37 + 1800));
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  char *v4;
  char *v5;
  uint64_t *v6;
  Swift::String v7;
  INObject *v8;
  uint64_t v9;
  id v10;
  id v11;
  uint64_t v12;
  void *v13;
  id v14;
  _QWORD *v15;
  uint64_t result;
  uint64_t v17;
  id v18;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  id v24;
  char *v25;
  char *v26;
  Class isa;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(uint64_t, uint64_t);
  id *v32;
  id v33;
  uint64_t v34;
  _OWORD *v35;
  _OWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint8_t *buf;
  uint64_t v40;
  uint64_t v41;
  id v42;
  uint64_t v43;
  uint64_t v44;
  void (*v45)(uint64_t, uint64_t, uint64_t);
  uint64_t v46;
  uint32_t size;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  NSObject *oslog;
  os_log_type_t v68;
  id v69;
  id v70;
  id *v71;
  id v72;
  uint64_t v73;
  uint64_t v74;
  void *v75;
  id v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  void *v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  void *v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  id v94;
  uint64_t v95;
  uint64_t v96;

  v1 = v0[281];
  v2 = v0[280];
  v0[141] = v0;
  v0[129] = v2;
  v0[130] = v1;
  if (v0[130])
  {
    v17 = *(_QWORD *)(v96 + 1040);
    *(_QWORD *)(v96 + 1016) = *(_QWORD *)(v96 + 1032);
    *(_QWORD *)(v96 + 1024) = v17;
  }
  else
  {
    *(Swift::String *)(v96 + 1016) = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Unknown Name", 0xCuLL, 1);
    outlined destroy of String.UTF8View();
  }
  v70 = *(id *)(v96 + 2224);
  v73 = *(_QWORD *)(v96 + 2200);
  v71 = (id *)(*(_QWORD *)(v96 + 2216) + 16);
  v69 = (id)MEMORY[0x24957CFB4](*(_QWORD *)(v96 + 1016));
  swift_bridgeObjectRelease();
  objc_msgSend(v70, sel_setMedName_, v69);

  swift_beginAccess();
  v72 = *v71;
  v18 = *v71;
  result = swift_endAccess();
  if (__OFSUB__(v73, 1))
  {
    __break(1u);
    return result;
  }
  v50 = *(_QWORD *)(v96 + 2216);
  v46 = *(_QWORD *)(v96 + 2200);
  v45 = *(void (**)(uint64_t, uint64_t, uint64_t))(v96 + 2080);
  v20 = *(_QWORD *)(v96 + 2016);
  v44 = *(_QWORD *)(v96 + 1960);
  *(_QWORD *)(v96 + 1640) = v73 - 1;
  v21 = String.init<A>(_:)();
  v42 = (id)MEMORY[0x24957CFB4](v21);
  swift_bridgeObjectRelease();
  objc_msgSend(v72, sel_setRemainingMedCount_, v42);

  v43 = Logger.wellnessIntents.unsafeMutableAddressor();
  swift_beginAccess();
  v45(v20, v43, v44);
  swift_endAccess();
  swift_retain();
  swift_retain();
  swift_retain();
  v52 = swift_allocObject();
  *(_QWORD *)(v52 + 16) = v46;
  oslog = Logger.logObject.getter();
  v68 = static os_log_type_t.debug.getter();
  *(_QWORD *)(v96 + 1648) = 42;
  UnsignedInteger<>.init<A>(_:)();
  size = *(_DWORD *)(v96 + 2436);
  v54 = swift_allocObject();
  *(_BYTE *)(v54 + 16) = 32;
  v55 = swift_allocObject();
  *(_BYTE *)(v55 + 16) = 8;
  v48 = swift_allocObject();
  *(_QWORD *)(v48 + 16) = partial apply for implicit closure #9 in SpecificMedicationsPersistor.saveScheduledMedication(specifiedDateInterval:medStatusTaken:);
  *(_QWORD *)(v48 + 24) = v50;
  v56 = swift_allocObject();
  *(_QWORD *)(v56 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:);
  *(_QWORD *)(v56 + 24) = v48;
  v57 = swift_allocObject();
  *(_BYTE *)(v57 + 16) = 32;
  v58 = swift_allocObject();
  *(_BYTE *)(v58 + 16) = 8;
  v49 = swift_allocObject();
  *(_QWORD *)(v49 + 16) = partial apply for implicit closure #10 in SpecificMedicationsPersistor.saveScheduledMedication(specifiedDateInterval:medStatusTaken:);
  *(_QWORD *)(v49 + 24) = v50;
  v59 = swift_allocObject();
  *(_QWORD *)(v59 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:);
  *(_QWORD *)(v59 + 24) = v49;
  v60 = swift_allocObject();
  *(_BYTE *)(v60 + 16) = 32;
  v61 = swift_allocObject();
  *(_BYTE *)(v61 + 16) = 8;
  v51 = swift_allocObject();
  *(_QWORD *)(v51 + 16) = partial apply for implicit closure #11 in SpecificMedicationsPersistor.saveScheduledMedication(specifiedDateInterval:medStatusTaken:);
  *(_QWORD *)(v51 + 24) = v50;
  v62 = swift_allocObject();
  *(_QWORD *)(v62 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:);
  *(_QWORD *)(v62 + 24) = v51;
  v63 = swift_allocObject();
  *(_BYTE *)(v63 + 16) = 0;
  v64 = swift_allocObject();
  *(_BYTE *)(v64 + 16) = 8;
  v53 = swift_allocObject();
  *(_QWORD *)(v53 + 16) = partial apply for implicit closure #12 in SpecificMedicationsPersistor.saveScheduledMedication(specifiedDateInterval:medStatusTaken:);
  *(_QWORD *)(v53 + 24) = v52;
  v65 = swift_allocObject();
  *(_QWORD *)(v65 + 16) = partial apply for thunk for @escaping @callee_guaranteed () -> (@unowned Int);
  *(_QWORD *)(v65 + 24) = v53;
  _allocateUninitializedArray<A>(_:)();
  v66 = v22;
  swift_retain();
  *v66 = partial apply for closure #1 in OSLogArguments.append(_:);
  v66[1] = v54;
  swift_retain();
  v66[2] = partial apply for closure #1 in OSLogArguments.append(_:);
  v66[3] = v55;
  swift_retain();
  v66[4] = partial apply for closure #1 in OSLogArguments.append(_:);
  v66[5] = v56;
  swift_retain();
  v66[6] = partial apply for closure #1 in OSLogArguments.append(_:);
  v66[7] = v57;
  swift_retain();
  v66[8] = partial apply for closure #1 in OSLogArguments.append(_:);
  v66[9] = v58;
  swift_retain();
  v66[10] = partial apply for closure #1 in OSLogArguments.append(_:);
  v66[11] = v59;
  swift_retain();
  v66[12] = partial apply for closure #1 in OSLogArguments.append(_:);
  v66[13] = v60;
  swift_retain();
  v66[14] = partial apply for closure #1 in OSLogArguments.append(_:);
  v66[15] = v61;
  swift_retain();
  v66[16] = partial apply for closure #1 in OSLogArguments.append(_:);
  v66[17] = v62;
  swift_retain();
  v66[18] = partial apply for closure #1 in OSLogArguments.append(_:);
  v66[19] = v63;
  swift_retain();
  v66[20] = partial apply for closure #1 in OSLogArguments.append(_:);
  v66[21] = v64;
  swift_retain();
  v66[22] = partial apply for closure #1 in OSLogArguments.append<A>(_:);
  v66[23] = v65;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(oslog, v68))
  {
    v23 = *(_QWORD *)(v96 + 2184);
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    v40 = createStorage<A>(capacity:type:)(0);
    v41 = createStorage<A>(capacity:type:)(3);
    *(_QWORD *)(v96 + 1664) = buf;
    *(_QWORD *)(v96 + 1672) = v40;
    *(_QWORD *)(v96 + 1680) = v41;
    serialize(_:at:)(2, (_BYTE **)(v96 + 1664));
    serialize(_:at:)(4, (_BYTE **)(v96 + 1664));
    *(_QWORD *)(v96 + 1048) = partial apply for closure #1 in OSLogArguments.append(_:);
    *(_QWORD *)(v96 + 1056) = v54;
    result = closure #1 in osLogInternal(_:log:type:)((uint64_t (**)(uint64_t, uint64_t, uint64_t))(v96 + 1048), v96 + 1664, v96 + 1672, v96 + 1680);
    if (v23)
      return result;
    *(_QWORD *)(v96 + 1048) = partial apply for closure #1 in OSLogArguments.append(_:);
    *(_QWORD *)(v96 + 1056) = v55;
    closure #1 in osLogInternal(_:log:type:)((uint64_t (**)(uint64_t, uint64_t, uint64_t))(v96 + 1048), v96 + 1664, v96 + 1672, v96 + 1680);
    *(_QWORD *)(v96 + 1048) = partial apply for closure #1 in OSLogArguments.append(_:);
    *(_QWORD *)(v96 + 1056) = v56;
    closure #1 in osLogInternal(_:log:type:)((uint64_t (**)(uint64_t, uint64_t, uint64_t))(v96 + 1048), v96 + 1664, v96 + 1672, v96 + 1680);
    *(_QWORD *)(v96 + 1048) = partial apply for closure #1 in OSLogArguments.append(_:);
    *(_QWORD *)(v96 + 1056) = v57;
    closure #1 in osLogInternal(_:log:type:)((uint64_t (**)(uint64_t, uint64_t, uint64_t))(v96 + 1048), v96 + 1664, v96 + 1672, v96 + 1680);
    *(_QWORD *)(v96 + 1048) = partial apply for closure #1 in OSLogArguments.append(_:);
    *(_QWORD *)(v96 + 1056) = v58;
    closure #1 in osLogInternal(_:log:type:)((uint64_t (**)(uint64_t, uint64_t, uint64_t))(v96 + 1048), v96 + 1664, v96 + 1672, v96 + 1680);
    *(_QWORD *)(v96 + 1048) = partial apply for closure #1 in OSLogArguments.append(_:);
    *(_QWORD *)(v96 + 1056) = v59;
    closure #1 in osLogInternal(_:log:type:)((uint64_t (**)(uint64_t, uint64_t, uint64_t))(v96 + 1048), v96 + 1664, v96 + 1672, v96 + 1680);
    *(_QWORD *)(v96 + 1048) = partial apply for closure #1 in OSLogArguments.append(_:);
    *(_QWORD *)(v96 + 1056) = v60;
    closure #1 in osLogInternal(_:log:type:)((uint64_t (**)(uint64_t, uint64_t, uint64_t))(v96 + 1048), v96 + 1664, v96 + 1672, v96 + 1680);
    *(_QWORD *)(v96 + 1048) = partial apply for closure #1 in OSLogArguments.append(_:);
    *(_QWORD *)(v96 + 1056) = v61;
    closure #1 in osLogInternal(_:log:type:)((uint64_t (**)(uint64_t, uint64_t, uint64_t))(v96 + 1048), v96 + 1664, v96 + 1672, v96 + 1680);
    *(_QWORD *)(v96 + 1048) = partial apply for closure #1 in OSLogArguments.append(_:);
    *(_QWORD *)(v96 + 1056) = v62;
    closure #1 in osLogInternal(_:log:type:)((uint64_t (**)(uint64_t, uint64_t, uint64_t))(v96 + 1048), v96 + 1664, v96 + 1672, v96 + 1680);
    *(_QWORD *)(v96 + 1048) = partial apply for closure #1 in OSLogArguments.append(_:);
    *(_QWORD *)(v96 + 1056) = v63;
    closure #1 in osLogInternal(_:log:type:)((uint64_t (**)(uint64_t, uint64_t, uint64_t))(v96 + 1048), v96 + 1664, v96 + 1672, v96 + 1680);
    *(_QWORD *)(v96 + 1048) = partial apply for closure #1 in OSLogArguments.append(_:);
    *(_QWORD *)(v96 + 1056) = v64;
    closure #1 in osLogInternal(_:log:type:)((uint64_t (**)(uint64_t, uint64_t, uint64_t))(v96 + 1048), v96 + 1664, v96 + 1672, v96 + 1680);
    *(_QWORD *)(v96 + 1048) = partial apply for closure #1 in OSLogArguments.append<A>(_:);
    *(_QWORD *)(v96 + 1056) = v65;
    closure #1 in osLogInternal(_:log:type:)((uint64_t (**)(uint64_t, uint64_t, uint64_t))(v96 + 1048), v96 + 1664, v96 + 1672, v96 + 1680);
    _os_log_impl(&dword_24749F000, oslog, v68, "Appending MatchedMedSchedule with scheduleID (%s), medName (%s), schedule (%s), and remainingMedCount (%ld)", buf, size);
    destroyStorage<A>(_:count:)(v40, 0, v38);
    destroyStorage<A>(_:count:)(v41, 3, MEMORY[0x24BEE4AD8] + 8);
    MEMORY[0x24957D398](buf, MEMORY[0x24BEE4260]);
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    v37 = 0;
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    v37 = *(_QWORD *)(v96 + 2184);
  }
  v31 = *(void (**)(uint64_t, uint64_t))(v96 + 2120);
  v29 = *(_QWORD *)(v96 + 2016);
  v30 = *(_QWORD *)(v96 + 1960);
  v34 = *(_QWORD *)(v96 + 1904);
  v32 = (id *)(*(_QWORD *)(v96 + 2216) + 16);

  v31(v29, v30);
  swift_beginAccess();
  v33 = *v32;
  v24 = *v32;
  swift_endAccess();
  *(_QWORD *)(v96 + 1656) = v33;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [MatchedMedSchedule]);
  Array.append(_:)();
  swift_release();
  swift_bridgeObjectRelease();
  outlined destroy of Date?(v34);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v96 + 2184) = v37;
  v36 = *(_OWORD **)(v96 + 1840);
  v35 = *(_OWORD **)(v96 + 1832);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String? : (scheduleDate: Date?, medID: String, count: Int)].Iterator);
  Dictionary.Iterator.next()();
  outlined init with take of (key: String?, value: (scheduleDate: Date?, medID: String, count: Int))?(v35, v36);
  v81 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String?, value: (scheduleDate: Date?, medID: String, count: Int)));
  if ((*(unsigned int (**)(_OWORD *, uint64_t))(*(_QWORD *)(v81 - 8) + 48))(v36, 1) == 1)
  {
    outlined destroy of [String? : (scheduleDate: Date?, medID: String, count: Int)].Iterator();
    type metadata accessor for LogSpecificMedicationsIntentResponse();
    v28 = LogSpecificMedicationsIntentResponse.__allocating_init(code:userActivity:)(104, 0);
    v25 = v28;
    v26 = v28;
    *(_QWORD *)(v96 + 1616) = v28;
    swift_bridgeObjectRetain();
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v28, sel_setMatchingSchedules_, isa);

    outlined destroy of [HKQuantityType]();
    swift_release();
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(char *))(*(_QWORD *)(v96 + 1128) + 8))(v28);
  }
  else
  {
    v88 = *(void **)(v96 + 1904);
    v3 = *(uint64_t **)(v96 + 1840);
    v89 = *(char **)(v96 + 1824);
    v87 = *(_QWORD *)(v96 + 1808);
    v86 = *v3;
    v95 = v3[1];
    *(_QWORD *)(v96 + 2192) = v95;
    v4 = (char *)v3 + *(int *)(v81 + 48);
    v5 = &v4[*(int *)(v87 + 48)];
    v82 = *(_QWORD *)v5;
    v84 = *((_QWORD *)v5 + 1);
    v92 = *(_QWORD *)&v4[*(int *)(v87 + 64)];
    *(_QWORD *)(v96 + 2200) = v92;
    v83 = &v89[*(int *)(v87 + 48)];
    v85 = *(int *)(v87 + 64);
    outlined init with take of Date?(v4, v89);
    *(_QWORD *)v83 = v82;
    *((_QWORD *)v83 + 1) = v84;
    *(_QWORD *)&v89[v85] = v92;
    *(_QWORD *)(v96 + 984) = v86;
    *(_QWORD *)(v96 + 992) = v95;
    v6 = (uint64_t *)&v89[*(int *)(v87 + 48)];
    v90 = *v6;
    v91 = v6[1];
    *(_QWORD *)(v96 + 2208) = v91;
    outlined init with take of Date?(v89, v88);
    *(_QWORD *)(v96 + 1000) = v90;
    *(_QWORD *)(v96 + 1008) = v91;
    *(_QWORD *)(v96 + 1624) = v92;
    v93 = swift_allocObject();
    *(_QWORD *)(v96 + 2216) = v93;
    *(_QWORD *)(v96 + 1632) = v93 + 16;
    v7 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Match", 5uLL, 1);
    INObject.__allocating_init(identifier:display:)(v8, (Swift::String_optional)0, v7);
    *(_QWORD *)(v93 + 16) = v9;
    swift_beginAccess();
    v94 = *(id *)(v93 + 16);
    v10 = v94;
    swift_endAccess();
    swift_bridgeObjectRetain();
    if (v95)
    {
      v79 = MEMORY[0x24957CFB4](v86);
      swift_bridgeObjectRelease();
      v80 = (void *)v79;
    }
    else
    {
      v80 = 0;
    }
    v77 = *(_QWORD *)(v96 + 1904);
    objc_msgSend(v94, sel_setScheduleID_);

    swift_beginAccess();
    v76 = *(id *)(v93 + 16);
    v11 = v76;
    swift_endAccess();
    v78 = getFormattedTimeString(time:)(v77);
    if (v12)
    {
      v74 = MEMORY[0x24957CFB4](v78);
      swift_bridgeObjectRelease();
      v75 = (void *)v74;
    }
    else
    {
      v75 = 0;
    }
    objc_msgSend(v76, sel_setSchedule_);

    swift_beginAccess();
    v13 = *(void **)(v93 + 16);
    *(_QWORD *)(v96 + 2224) = v13;
    v14 = v13;
    swift_endAccess();
    swift_bridgeObjectRetain();
    v15 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v96 + 2232) = v15;
    *v15 = *(_QWORD *)(v96 + 1128);
    v15[1] = SpecificMedicationsPersistor.saveScheduledMedication(specifiedDateInterval:medStatusTaken:);
    return SpecificMedicationsPersistor.displayNameFor(identifier:)(v90, v91, *(_QWORD *)(v96 + 1792), *(_QWORD *)(v96 + 1800));
  }
}

{
  uint64_t v0;
  uint64_t v2;

  *(_QWORD *)(v0 + 1128) = v0;
  outlined destroy of [HKQuantityType]();
  swift_release();
  swift_release();
  v2 = *(_QWORD *)(v0 + 2272);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v0 + 1128) + 8))(v2);
}

{
  _QWORD *v0;
  id v1;
  _QWORD *v2;
  char *v4;
  char *v5;
  Class isa;
  char *v7;
  uint64_t v8;
  id v9;
  id v10;
  uint64_t v11;

  v9 = (id)v0[288];
  v10 = (id)v0[286];
  v0[141] = v0;
  v0[185] = v9;
  v1 = v9;
  v0[186] = v9;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [MatchedMedName]);
  Array.append(_:)();

  IndexingIterator.next()();
  v11 = v0[182];
  v0[286] = v11;
  if (v11)
  {
    *(_QWORD *)(v8 + 1472) = v11;
    v2 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v8 + 2296) = v2;
    *v2 = *(_QWORD *)(v8 + 1128);
    v2[1] = SpecificMedicationsPersistor.saveScheduledMedication(specifiedDateInterval:medStatusTaken:);
    return SpecificMedicationsPersistor.buildMatchedMedName(from:shouldIncludeAsNeededParams:)(v11, 1, *(_QWORD *)(v8 + 1792), *(_QWORD *)(v8 + 1800));
  }
  else
  {
    outlined destroy of [HKQuantityType]();
    type metadata accessor for LogSpecificMedicationsIntentResponse();
    v7 = LogSpecificMedicationsIntentResponse.__allocating_init(code:userActivity:)(110, 0);
    v4 = v7;
    v5 = v7;
    *(_QWORD *)(v8 + 1464) = v7;
    swift_bridgeObjectRetain();
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v7, sel_setMatchingMeds_, isa);

    outlined destroy of [HKQuantityType]();
    swift_release();
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(char *))(*(_QWORD *)(v8 + 1128) + 8))(v7);
  }
}

{
  uint64_t v0;
  uint64_t v2;

  *(_QWORD *)(v0 + 1128) = v0;
  outlined destroy of [HKQuantityType]();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  v2 = *(_QWORD *)(v0 + 2336);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v0 + 1128) + 8))(v2);
}

{
  _QWORD *v0;
  id v1;
  _QWORD *v2;
  Class isa;
  id v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  id v9;
  uint64_t v10;

  v8 = (id)v0[297];
  v9 = (id)v0[295];
  v0[141] = v0;
  v0[165] = v8;
  v1 = v8;
  v0[166] = v8;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [MatchedMedName]);
  Array.append(_:)();

  IndexingIterator.next()();
  v10 = v0[163];
  v0[295] = v10;
  if (v10)
  {
    *(_QWORD *)(v7 + 1312) = v10;
    v2 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v7 + 2368) = v2;
    *v2 = *(_QWORD *)(v7 + 1128);
    v2[1] = SpecificMedicationsPersistor.saveScheduledMedication(specifiedDateInterval:medStatusTaken:);
    return SpecificMedicationsPersistor.buildMatchedMedName(from:shouldIncludeAsNeededParams:)(v10, 1, *(_QWORD *)(v7 + 1792), *(_QWORD *)(v7 + 1800));
  }
  else
  {
    v5 = *(id *)(v7 + 2344);
    outlined destroy of [HKQuantityType]();
    swift_bridgeObjectRetain();
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v5, sel_setMatchingMeds_, isa);

    outlined destroy of [HKQuantityType]();
    swift_release();
    swift_release();
    v6 = *(_QWORD *)(v7 + 2344);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v7 + 1128) + 8))(v6);
  }
}

{
  uint64_t v0;
  uint64_t v1;
  id v2;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  id v7;
  char *v8;
  uint64_t v9;
  uint8_t *buf;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t, uint64_t, uint64_t);
  uint32_t size;
  os_log_type_t v20;
  NSObject *oslog;
  uint64_t v22;

  v15 = *(id *)(v0 + 2152);
  v18 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 2080);
  v1 = *(_QWORD *)(v0 + 1976);
  v17 = *(_QWORD *)(v0 + 1960);
  *(_QWORD *)(v0 + 1128) = v0;
  swift_deallocUninitializedObject();
  v2 = v15;
  *(_QWORD *)(v0 + 1168) = v15;
  v16 = Logger.wellnessIntents.unsafeMutableAddressor();
  swift_beginAccess();
  v18(v1, v16, v17);
  swift_endAccess();
  oslog = Logger.logObject.getter();
  v20 = static os_log_type_t.error.getter();
  *(_QWORD *)(v0 + 1176) = 2;
  UnsignedInteger<>.init<A>(_:)();
  size = *(_DWORD *)(v0 + 2404);
  v22 = _allocateUninitializedArray<A>(_:)();
  if (os_log_type_enabled(oslog, v20))
  {
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    v11 = createStorage<A>(capacity:type:)(0);
    v12 = createStorage<A>(capacity:type:)(0);
    *(_QWORD *)(v14 + 1184) = buf;
    *(_QWORD *)(v14 + 1192) = v11;
    *(_QWORD *)(v14 + 1200) = v12;
    serialize(_:at:)(0, (_BYTE **)(v14 + 1184));
    serialize(_:at:)(0, (_BYTE **)(v14 + 1184));
    *(_QWORD *)(v14 + 1208) = v22;
    v13 = (_QWORD *)swift_task_alloc();
    v13[2] = v14 + 1184;
    v13[3] = v14 + 1192;
    v13[4] = v14 + 1200;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
    lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
    Sequence.forEach(_:)();
    swift_task_dealloc();
    _os_log_impl(&dword_24749F000, oslog, v20, "Failed fetching dose events for specified timeframe.", buf, size);
    destroyStorage<A>(_:count:)(v11, 0, v9);
    destroyStorage<A>(_:count:)(v12, 0, MEMORY[0x24BEE4AD8] + 8);
    MEMORY[0x24957D398](buf, MEMORY[0x24BEE4260]);
  }
  swift_bridgeObjectRelease();
  v7 = *(id *)(v14 + 2152);
  v6 = *(void (**)(uint64_t, uint64_t))(v14 + 2120);
  v4 = *(_QWORD *)(v14 + 1976);
  v5 = *(_QWORD *)(v14 + 1960);

  v6(v4, v5);
  type metadata accessor for LogSpecificMedicationsIntentResponse();
  v8 = LogSpecificMedicationsIntentResponse.__allocating_init(code:userActivity:)(5, 0);

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(char *))(*(_QWORD *)(v14 + 1128) + 8))(v8);
}

uint64_t SpecificMedicationsPersistor.saveScheduledMedication(specifiedDateInterval:medStatusTaken:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;

  v3 = (_QWORD *)*v2;
  v3[141] = *v2;
  v3[268] = a1;
  v3[269] = v1;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  id v10;
  id v11;
  id v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t *v30;
  char *v31;
  char *v32;
  uint64_t *v33;
  Swift::String v34;
  INObject *v35;
  uint64_t v36;
  id v37;
  id v38;
  uint64_t v39;
  void *v40;
  id v41;
  _QWORD *v42;
  char *v43;
  char *v44;
  uint64_t v45;
  id v46;
  uint64_t v47;
  _QWORD *v48;
  id v49;
  _QWORD *v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  _QWORD *v54;
  _QWORD *v55;
  char *v56;
  char *v57;
  id v58;
  id v59;
  _QWORD *v60;
  uint64_t v61;
  char v62;
  uint64_t v63;
  char *v64;
  char *v65;
  _QWORD *v66;
  Class v67;
  id v68;
  uint64_t v69;
  uint64_t v70;
  void (*v71)(uint64_t, uint64_t);
  char *v72;
  uint64_t *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint8_t *v77;
  uint64_t v78;
  uint64_t v79;
  _QWORD *v80;
  uint64_t v81;
  uint64_t v82;
  void (*v83)(uint64_t, uint64_t, uint64_t);
  uint32_t v84;
  os_log_type_t v85;
  NSObject *v86;
  uint64_t v87;
  id v88;
  uint64_t v89;
  id v90;
  id v91;
  uint64_t v92;
  uint64_t v93;
  char v94;
  Class v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  void (*v99)(uint64_t, uint64_t);
  uint64_t *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint8_t *v104;
  uint64_t v105;
  uint64_t v106;
  Swift::OpaquePointer v107;
  void **v108;
  char v109;
  Swift::OpaquePointer v110;
  uint64_t v111;
  uint64_t v112;
  void (*v113)(uint64_t, uint64_t, uint64_t);
  Swift::Bool v114;
  Swift::Bool v115;
  uint32_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  _QWORD *v127;
  NSObject *v128;
  os_log_type_t v129;
  uint64_t v130;
  char v131;
  Swift::OpaquePointer v132;
  Swift::Bool v133;
  uint64_t v134;
  Swift::OpaquePointer v135;
  Swift::Bool v136;
  uint64_t v137;
  uint64_t v138;
  void (*v139)(uint64_t, uint64_t);
  id v140;
  uint64_t v141;
  uint64_t v142;
  uint8_t *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  void (*v148)(uint64_t, uint64_t, uint64_t);
  char v149;
  uint32_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  _QWORD *v158;
  NSObject *v159;
  os_log_type_t v160;
  id v161;
  id v162;
  uint64_t v163;
  uint64_t v164;
  void (*v165)(uint64_t, uint64_t);
  uint64_t *v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint8_t *v170;
  uint64_t v171;
  uint64_t v172;
  _QWORD *v173;
  uint64_t v174;
  uint64_t v175;
  void (*v176)(uint64_t, uint64_t, uint64_t);
  uint32_t v177;
  os_log_type_t v178;
  NSObject *v179;
  uint64_t v180;
  uint64_t v181;
  Swift::OpaquePointer doseEvents;
  Swift::Bool v183;
  Class v184;
  char *v185;
  uint64_t v186;
  void *v187;
  id v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  void *v192;
  uint64_t v193;
  char *v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  void *v199;
  char *v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  id v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  void (*v209)(uint64_t, uint64_t);
  _OWORD *v210;
  _OWORD *v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint8_t *v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  void (*v220)(uint64_t, uint64_t, uint64_t);
  uint32_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  _QWORD *v226;
  NSObject *v227;
  os_log_type_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  void (*v234)(uint64_t, uint64_t);
  char *v235;
  char *v236;
  uint64_t v237;
  uint8_t *v238;
  uint64_t v239;
  uint64_t v240;
  _QWORD *v241;
  uint64_t v242;
  uint64_t v243;
  void (*v244)(uint64_t, uint64_t, uint64_t);
  uint32_t v245;
  os_log_type_t v246;
  NSObject *v247;
  uint64_t v248;
  uint64_t *v249;
  uint64_t v250;
  char v251;
  id v252;
  uint64_t v253;
  uint64_t v254;
  void *v255;
  id v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t *v262;
  uint64_t v263;
  id v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  id v269;
  uint64_t v270;
  uint64_t v271;
  char *v272;
  uint64_t v273;
  char *v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  id v282;
  uint64_t v283;
  uint64_t v284;
  char *v285;
  uint64_t v286;
  char *v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  char *v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  void (*v302)(uint64_t, uint64_t);
  id v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint8_t *v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  void (*v312)(uint64_t, uint64_t, uint64_t);
  uint32_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  _QWORD *v329;
  NSObject *v330;
  os_log_type_t v331;
  void *v332;
  uint64_t v333;
  uint64_t v334;
  void (*v335)(uint64_t, uint64_t);
  uint64_t v336;
  unint64_t v337;
  uint64_t v338;
  uint64_t *v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint8_t *v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  void (*v350)(uint64_t, uint64_t);
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  void (*v355)(uint64_t, uint64_t, uint64_t);
  uint32_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  _QWORD *v362;
  NSObject *log;
  os_log_type_t v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  uint8_t *buf;
  uint64_t v369;
  uint64_t v370;
  _QWORD *v371;
  uint64_t v372;
  uint64_t v373;
  void (*v374)(uint64_t, uint64_t, uint64_t);
  uint32_t size;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  _QWORD *v381;
  NSObject *oslog;
  os_log_type_t v383;
  Class v384;
  uint8_t *v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t (*v388)(uint64_t, uint64_t, uint64_t);
  uint64_t v389;
  uint8_t *v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t (*v393)(uint64_t, uint64_t, uint64_t);
  uint64_t v394;
  Class isa;
  uint8_t *v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t (*v399)(uint64_t, uint64_t, uint64_t);
  uint64_t v400;
  uint8_t *v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t (*v404)(uint64_t, uint64_t, uint64_t);
  uint64_t v405;
  uint8_t *v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t (*v409)(uint64_t, uint64_t, uint64_t);
  uint64_t v410;
  uint8_t *v411;
  uint64_t v412;
  uint64_t v413;
  uint64_t (*v414)(uint64_t, uint64_t, uint64_t);
  uint64_t v415;
  uint64_t v416;
  uint64_t v417;

  MEMORY[0x24BDAC7A8](a1);
  v371 = (_QWORD *)v1;
  v2 = *(_QWORD *)(v1 + 2144);
  v376 = *(_QWORD *)(v1 + 2128);
  v374 = *(void (**)(uint64_t, uint64_t, uint64_t))(v1 + 2080);
  v3 = *(_QWORD *)(v1 + 2056);
  v373 = *(_QWORD *)(v1 + 1960);
  *(_QWORD *)(v1 + 1128) = v1;
  *(_QWORD *)(v376 + 16) = v2;
  v372 = Logger.wellnessIntents.unsafeMutableAddressor();
  swift_beginAccess();
  v374(v3, v372, v373);
  swift_endAccess();
  swift_retain();
  oslog = Logger.logObject.getter();
  v383 = static os_log_type_t.debug.getter();
  *(_QWORD *)(v1 + 1216) = 12;
  UnsignedInteger<>.init<A>(_:)();
  size = *(_DWORD *)(v1 + 2408);
  v378 = swift_allocObject();
  *(_BYTE *)(v378 + 16) = 0;
  v379 = swift_allocObject();
  *(_BYTE *)(v379 + 16) = 8;
  v377 = swift_allocObject();
  *(_QWORD *)(v377 + 16) = partial apply for implicit closure #2 in SpecificMedicationsPersistor.saveMedication(named:medStatusTaken:dosage:dosageUnit:);
  *(_QWORD *)(v377 + 24) = v376;
  v380 = swift_allocObject();
  *(_QWORD *)(v380 + 16) = partial apply for thunk for @escaping @callee_guaranteed () -> (@unowned Int);
  *(_QWORD *)(v380 + 24) = v377;
  _allocateUninitializedArray<A>(_:)();
  v381 = v4;
  swift_retain();
  *v381 = partial apply for closure #1 in OSLogArguments.append(_:);
  v381[1] = v378;
  swift_retain();
  v381[2] = partial apply for closure #1 in OSLogArguments.append(_:);
  v381[3] = v379;
  swift_retain();
  v381[4] = partial apply for closure #1 in OSLogArguments.append<A>(_:);
  v381[5] = v380;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(oslog, v383))
  {
    v5 = *(_QWORD *)(v1 + 2152);
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    v367 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    v369 = createStorage<A>(capacity:type:)(0);
    v370 = createStorage<A>(capacity:type:)(0);
    v411 = buf;
    v412 = v369;
    v413 = v370;
    serialize(_:at:)(0, &v411);
    serialize(_:at:)(1, &v411);
    v414 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v415 = v378;
    result = closure #1 in osLogInternal(_:log:type:)(&v414, (uint64_t)&v411, (uint64_t)&v412, (uint64_t)&v413);
    if (v5)
      return result;
    v414 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v415 = v379;
    closure #1 in osLogInternal(_:log:type:)(&v414, (uint64_t)&v411, (uint64_t)&v412, (uint64_t)&v413);
    v414 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append<A>(_:);
    v415 = v380;
    closure #1 in osLogInternal(_:log:type:)(&v414, (uint64_t)&v411, (uint64_t)&v412, (uint64_t)&v413);
    _os_log_impl(&dword_24749F000, oslog, v383, "fetched %ld doseEvents", buf, size);
    destroyStorage<A>(_:count:)(v369, 0, v367);
    destroyStorage<A>(_:count:)(v370, 0, MEMORY[0x24BEE4AD8] + 8);
    MEMORY[0x24957D398](buf, MEMORY[0x24BEE4260]);
    swift_release();
    swift_release();
    swift_release();
    v366 = 0;
    v365 = 0;
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
    v366 = *(_QWORD *)(v1 + 2152);
  }
  v357 = *(_QWORD *)(v1 + 2128);
  v350 = *(void (**)(uint64_t, uint64_t))(v1 + 2120);
  v355 = *(void (**)(uint64_t, uint64_t, uint64_t))(v1 + 2080);
  v349 = *(_QWORD *)(v1 + 2056);
  v7 = *(_QWORD *)(v1 + 2048);
  v354 = *(_QWORD *)(v1 + 1960);

  v350(v349, v354);
  swift_beginAccess();
  v351 = *(_QWORD *)(v357 + 16);
  swift_bridgeObjectRetain();
  swift_endAccess();
  v352 = filterUniqueDoseEvents(doseEvents:)(v351);
  swift_bridgeObjectRelease();
  swift_beginAccess();
  *(_QWORD *)(v357 + 16) = v352;
  swift_bridgeObjectRelease();
  swift_endAccess();
  v353 = Logger.wellnessIntents.unsafeMutableAddressor();
  swift_beginAccess();
  v355(v7, v353, v354);
  swift_endAccess();
  swift_retain();
  log = Logger.logObject.getter();
  v364 = static os_log_type_t.debug.getter();
  *(_QWORD *)(v1 + 1224) = 12;
  UnsignedInteger<>.init<A>(_:)();
  v356 = *(_DWORD *)(v1 + 2412);
  v359 = swift_allocObject();
  *(_BYTE *)(v359 + 16) = 0;
  v360 = swift_allocObject();
  *(_BYTE *)(v360 + 16) = 8;
  v358 = swift_allocObject();
  *(_QWORD *)(v358 + 16) = partial apply for implicit closure #2 in SpecificMedicationsPersistor.saveMedication(named:medStatusTaken:dosage:dosageUnit:);
  *(_QWORD *)(v358 + 24) = v357;
  v361 = swift_allocObject();
  *(_QWORD *)(v361 + 16) = partial apply for thunk for @escaping @callee_guaranteed () -> (@unowned Int);
  *(_QWORD *)(v361 + 24) = v358;
  _allocateUninitializedArray<A>(_:)();
  v362 = v8;
  swift_retain();
  *v362 = partial apply for closure #1 in OSLogArguments.append(_:);
  v362[1] = v359;
  swift_retain();
  v362[2] = partial apply for closure #1 in OSLogArguments.append(_:);
  v362[3] = v360;
  swift_retain();
  v362[4] = partial apply for closure #1 in OSLogArguments.append<A>(_:);
  v362[5] = v361;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(log, v364))
  {
    v346 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    v345 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    v347 = createStorage<A>(capacity:type:)(0);
    v348 = createStorage<A>(capacity:type:)(0);
    v406 = v346;
    v407 = v347;
    v408 = v348;
    serialize(_:at:)(0, &v406);
    serialize(_:at:)(1, &v406);
    v409 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v410 = v359;
    result = closure #1 in osLogInternal(_:log:type:)(&v409, (uint64_t)&v406, (uint64_t)&v407, (uint64_t)&v408);
    if (v366)
      return result;
    v409 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v410 = v360;
    closure #1 in osLogInternal(_:log:type:)(&v409, (uint64_t)&v406, (uint64_t)&v407, (uint64_t)&v408);
    v409 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append<A>(_:);
    v410 = v361;
    closure #1 in osLogInternal(_:log:type:)(&v409, (uint64_t)&v406, (uint64_t)&v407, (uint64_t)&v408);
    _os_log_impl(&dword_24749F000, log, v364, "filtered to %ld unique doseEvents", v346, v356);
    destroyStorage<A>(_:count:)(v347, 0, v345);
    destroyStorage<A>(_:count:)(v348, 0, MEMORY[0x24BEE4AD8] + 8);
    MEMORY[0x24957D398](v346, MEMORY[0x24BEE4260]);
    swift_release();
    swift_release();
    swift_release();
    v343 = 0;
    v344 = 0;
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
    v343 = v366;
    v344 = v365;
  }
  v335 = *(void (**)(uint64_t, uint64_t))(v1 + 2120);
  v333 = *(_QWORD *)(v1 + 2048);
  v334 = *(_QWORD *)(v1 + 1960);
  v339 = (uint64_t *)(*(_QWORD *)(v1 + 2128) + 16);

  v335(v333, v334);
  v338 = swift_allocObject();
  *(_QWORD *)(v1 + 2160) = v338;
  *(_QWORD *)(v1 + 1232) = v338 + 16;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String?, (scheduleDate: Date?, medID: String, count: Int)));
  _allocateUninitializedArray<A>(_:)();
  v336 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
  v337 = lazy protocol witness table accessor for type String? and conformance <A> A?();
  *(_QWORD *)(v338 + 16) = Dictionary.init(dictionaryLiteral:)();
  swift_beginAccess();
  v340 = *v339;
  swift_bridgeObjectRetain();
  swift_endAccess();
  *(_QWORD *)(v1 + 1240) = v340;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [HKMedicationExposableDoseEvent]);
  lazy protocol witness table accessor for type [HKMedicationExposableDoseEvent] and conformance [A]();
  Collection<>.makeIterator()();
  v341 = v343;
  v342 = v344;
  while (1)
  {
    *(_QWORD *)(v1 + 2168) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<[HKMedicationExposableDoseEvent]>);
    IndexingIterator.next()();
    v332 = *(void **)(v1 + 1248);
    if (!v332)
      break;
    v312 = *(void (**)(uint64_t, uint64_t, uint64_t))(v1 + 2080);
    v9 = *(_QWORD *)(v1 + 2040);
    v311 = *(_QWORD *)(v1 + 1960);
    *(_QWORD *)(v1 + 1728) = v332;
    v310 = Logger.wellnessIntents.unsafeMutableAddressor();
    swift_beginAccess();
    v312(v9, v310, v311);
    swift_endAccess();
    v10 = v332;
    v314 = swift_allocObject();
    *(_QWORD *)(v314 + 16) = v332;
    v11 = v332;
    v316 = swift_allocObject();
    *(_QWORD *)(v316 + 16) = v332;
    v12 = v332;
    v318 = swift_allocObject();
    *(_QWORD *)(v318 + 16) = v332;
    v330 = Logger.logObject.getter();
    v331 = static os_log_type_t.debug.getter();
    *(_QWORD *)(v1 + 1736) = 32;
    UnsignedInteger<>.init<A>(_:)();
    v313 = *(_DWORD *)(v1 + 2444);
    v320 = swift_allocObject();
    *(_BYTE *)(v320 + 16) = 32;
    v321 = swift_allocObject();
    *(_BYTE *)(v321 + 16) = 8;
    v315 = swift_allocObject();
    *(_QWORD *)(v315 + 16) = partial apply for implicit closure #4 in SpecificMedicationsPersistor.saveScheduledMedication(specifiedDateInterval:medStatusTaken:);
    *(_QWORD *)(v315 + 24) = v314;
    v322 = swift_allocObject();
    *(_QWORD *)(v322 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:);
    *(_QWORD *)(v322 + 24) = v315;
    v323 = swift_allocObject();
    *(_BYTE *)(v323 + 16) = 32;
    v324 = swift_allocObject();
    *(_BYTE *)(v324 + 16) = 8;
    v317 = swift_allocObject();
    *(_QWORD *)(v317 + 16) = partial apply for implicit closure #5 in SpecificMedicationsPersistor.saveScheduledMedication(specifiedDateInterval:medStatusTaken:);
    *(_QWORD *)(v317 + 24) = v316;
    v325 = swift_allocObject();
    *(_QWORD *)(v325 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:);
    *(_QWORD *)(v325 + 24) = v317;
    v326 = swift_allocObject();
    *(_BYTE *)(v326 + 16) = 32;
    v327 = swift_allocObject();
    *(_BYTE *)(v327 + 16) = 8;
    v319 = swift_allocObject();
    *(_QWORD *)(v319 + 16) = partial apply for implicit closure #7 in SpecificMedicationsPersistor.buildMatchedMedName(from:shouldIncludeAsNeededParams:);
    *(_QWORD *)(v319 + 24) = v318;
    v328 = swift_allocObject();
    *(_QWORD *)(v328 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:);
    *(_QWORD *)(v328 + 24) = v319;
    _allocateUninitializedArray<A>(_:)();
    v329 = v13;
    swift_retain();
    *v329 = partial apply for closure #1 in OSLogArguments.append(_:);
    v329[1] = v320;
    swift_retain();
    v329[2] = partial apply for closure #1 in OSLogArguments.append(_:);
    v329[3] = v321;
    swift_retain();
    v329[4] = partial apply for closure #1 in OSLogArguments.append(_:);
    v329[5] = v322;
    swift_retain();
    v329[6] = partial apply for closure #1 in OSLogArguments.append(_:);
    v329[7] = v323;
    swift_retain();
    v329[8] = partial apply for closure #1 in OSLogArguments.append(_:);
    v329[9] = v324;
    swift_retain();
    v329[10] = partial apply for closure #1 in OSLogArguments.append(_:);
    v329[11] = v325;
    swift_retain();
    v329[12] = partial apply for closure #1 in OSLogArguments.append(_:);
    v329[13] = v326;
    swift_retain();
    v329[14] = partial apply for closure #1 in OSLogArguments.append(_:);
    v329[15] = v327;
    swift_retain();
    v329[16] = partial apply for closure #1 in OSLogArguments.append(_:);
    v329[17] = v328;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(v330, v331))
    {
      v307 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      v306 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      v308 = createStorage<A>(capacity:type:)(0);
      v309 = createStorage<A>(capacity:type:)(3);
      v401 = v307;
      v402 = v308;
      v403 = v309;
      serialize(_:at:)(2, &v401);
      serialize(_:at:)(3, &v401);
      v404 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v405 = v320;
      result = closure #1 in osLogInternal(_:log:type:)(&v404, (uint64_t)&v401, (uint64_t)&v402, (uint64_t)&v403);
      if (v341)
        return result;
      v404 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v405 = v321;
      closure #1 in osLogInternal(_:log:type:)(&v404, (uint64_t)&v401, (uint64_t)&v402, (uint64_t)&v403);
      v404 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v405 = v322;
      closure #1 in osLogInternal(_:log:type:)(&v404, (uint64_t)&v401, (uint64_t)&v402, (uint64_t)&v403);
      v404 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v405 = v323;
      closure #1 in osLogInternal(_:log:type:)(&v404, (uint64_t)&v401, (uint64_t)&v402, (uint64_t)&v403);
      v404 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v405 = v324;
      closure #1 in osLogInternal(_:log:type:)(&v404, (uint64_t)&v401, (uint64_t)&v402, (uint64_t)&v403);
      v404 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v405 = v325;
      closure #1 in osLogInternal(_:log:type:)(&v404, (uint64_t)&v401, (uint64_t)&v402, (uint64_t)&v403);
      v404 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v405 = v326;
      closure #1 in osLogInternal(_:log:type:)(&v404, (uint64_t)&v401, (uint64_t)&v402, (uint64_t)&v403);
      v404 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v405 = v327;
      closure #1 in osLogInternal(_:log:type:)(&v404, (uint64_t)&v401, (uint64_t)&v402, (uint64_t)&v403);
      v404 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v405 = v328;
      closure #1 in osLogInternal(_:log:type:)(&v404, (uint64_t)&v401, (uint64_t)&v402, (uint64_t)&v403);
      _os_log_impl(&dword_24749F000, v330, v331, "got a dose event with scheduleID: %s, medID: %s, status: %s", v307, v313);
      destroyStorage<A>(_:count:)(v308, 0, v306);
      destroyStorage<A>(_:count:)(v309, 3, MEMORY[0x24BEE4AD8] + 8);
      MEMORY[0x24957D398](v307, MEMORY[0x24BEE4260]);
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      v304 = 0;
      v305 = 0;
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      v304 = v341;
      v305 = v342;
    }
    v302 = *(void (**)(uint64_t, uint64_t))(v1 + 2120);
    v300 = *(_QWORD *)(v1 + 2040);
    v301 = *(_QWORD *)(v1 + 1960);

    v302(v300, v301);
    v303 = objc_msgSend(v332, sel_scheduleItemIdentifier);
    if (v303)
    {
      v296 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v297 = v14;

      v298 = v296;
      v299 = v297;
    }
    else
    {
      v298 = 0;
      v299 = 0;
    }
    v295 = *(_QWORD *)(v1 + 1888);
    v293 = *(_QWORD *)(v1 + 1816);
    v294 = *(_QWORD *)(v1 + 1808);
    *(_QWORD *)(v1 + 1064) = v298;
    *(_QWORD *)(v1 + 1072) = v299;
    MEMORY[0x24957CF6C]();
    outlined destroy of String.UTF8View();
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v293 + 48))(v295, 1, v294) == 1)
    {
      v270 = *(_QWORD *)(v1 + 1896);
      outlined destroy of (scheduleDate: Date?, medID: String, count: Int)?(*(_QWORD *)(v1 + 1888));
      v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Date?, String, Int));
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 56))(v270, 1);
    }
    else
    {
      v292 = *(char **)(v1 + 1896);
      v285 = *(char **)(v1 + 1888);
      v15 = *(_QWORD *)(v1 + 1808);
      v16 = &v285[*(int *)(v15 + 48)];
      v286 = *(_QWORD *)v16;
      v288 = *((_QWORD *)v16 + 1);
      v290 = *(_QWORD *)&v285[*(int *)(v15 + 64)];
      v291 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Date?, String, Int));
      v287 = &v292[*(int *)(v291 + 48)];
      v289 = *(int *)(v291 + 64);
      outlined init with take of Date?(v285, v292);
      *(_QWORD *)v287 = v286;
      *((_QWORD *)v287 + 1) = v288;
      *(_QWORD *)&v292[v289] = v290;
      (*(void (**)(void))(*(_QWORD *)(v291 - 8) + 56))();
    }
    v283 = *(_QWORD *)(v1 + 1896);
    v284 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Date?, String, Int));
    if ((*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)(v284 - 8) + 48))(v283, 1) == 1)
    {
      outlined destroy of (Date?, String, Int)?(*(_QWORD *)(v1 + 1896));
      v269 = objc_msgSend(v332, sel_scheduleItemIdentifier);
      if (v269)
      {
        v265 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        v266 = v24;

        v267 = v265;
        v268 = v266;
      }
      else
      {
        v267 = 0;
        v268 = 0;
      }
      v261 = *(_QWORD *)(v1 + 1872);
      v25 = *(_QWORD *)(v1 + 1808);
      v262 = (uint64_t *)(v261 + *(int *)(v25 + 48));
      v263 = *(int *)(v25 + 64);
      v264 = objc_msgSend(v332, sel_scheduledDate);
      if (v264)
      {
        v260 = *(_QWORD *)(v1 + 1912);
        v257 = *(_QWORD *)(v1 + 1864);
        v258 = *(_QWORD *)(v1 + 1856);
        v259 = *(_QWORD *)(v1 + 1848);
        static Date._unconditionallyBridgeFromObjectiveC(_:)();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v258 + 32))(v260, v257, v259);
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v258 + 56))(v260, 0, 1, v259);

      }
      else
      {
        (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v1 + 1856) + 56))(*(_QWORD *)(v1 + 1912), 1, 1, *(_QWORD *)(v1 + 1848));
      }
      v255 = *(void **)(v1 + 1872);
      v253 = *(_QWORD *)(v1 + 1816);
      v254 = *(_QWORD *)(v1 + 1808);
      outlined init with take of Date?(*(const void **)(v1 + 1912), v255);
      v252 = objc_msgSend(v332, sel_medicationIdentifier);
      v256 = objc_msgSend(v252, sel_underlyingIdentifier);
      *v262 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v262[1] = v26;

      *(_QWORD *)(v261 + v263) = 1;
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v253 + 56))(v255, 0, 1, v254);
      *(_QWORD *)(v1 + 1080) = v267;
      *(_QWORD *)(v1 + 1088) = v268;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String? : (scheduleDate: Date?, medID: String, count: Int)]);
      Dictionary.subscript.setter();

      v341 = v304;
      v342 = v305;
    }
    else
    {
      v17 = *(char **)(v1 + 1896);
      v18 = &v17[*(int *)(v284 + 48)];
      v279 = *(_QWORD *)v18;
      v280 = *((_QWORD *)v18 + 1);
      v281 = *(_QWORD *)&v17[*(int *)(v284 + 64)];
      outlined init with take of Date?(v17, *(void **)(v1 + 1920));
      *(_QWORD *)(v1 + 1096) = v279;
      *(_QWORD *)(v1 + 1104) = v280;
      *(_QWORD *)(v1 + 1744) = v281;
      v282 = objc_msgSend(v332, sel_scheduleItemIdentifier);
      if (v282)
      {
        v275 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        v276 = v19;

        v277 = v275;
        v278 = v276;
      }
      else
      {
        v277 = 0;
        v278 = 0;
      }
      v272 = *(char **)(v1 + 1880);
      v20 = *(_QWORD *)(v1 + 1808);
      v274 = &v272[*(int *)(v20 + 48)];
      v273 = *(int *)(v20 + 64);
      outlined init with copy of Date?(*(const void **)(v1 + 1920), v272);
      result = swift_bridgeObjectRetain();
      *(_QWORD *)v274 = v279;
      *((_QWORD *)v274 + 1) = v280;
      if (__OFADD__(v281, 1))
      {
        __break(1u);
        return result;
      }
      v271 = *(_QWORD *)(v1 + 1920);
      v22 = *(_QWORD *)(v1 + 1816);
      *(_QWORD *)&v272[v273] = v281 + 1;
      (*(void (**)(void))(v22 + 56))();
      *(_QWORD *)(v1 + 1112) = v277;
      *(_QWORD *)(v1 + 1120) = v278;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String? : (scheduleDate: Date?, medID: String, count: Int)]);
      Dictionary.subscript.setter();
      swift_bridgeObjectRelease();
      outlined destroy of Date?(v271);

      v341 = v304;
      v342 = v305;
    }
  }
  v249 = (uint64_t *)(*(_QWORD *)(v1 + 2128) + 16);
  outlined destroy of [HKQuantityType]();
  swift_beginAccess();
  v250 = *v249;
  swift_bridgeObjectRetain();
  swift_endAccess();
  swift_bridgeObjectRetain();
  *(_QWORD *)(v1 + 1256) = v250;
  v251 = Collection.isEmpty.getter();
  outlined destroy of [HKQuantityType]();
  swift_bridgeObjectRelease();
  if ((v251 & 1) != 0)
  {
    v244 = *(void (**)(uint64_t, uint64_t, uint64_t))(v1 + 2080);
    v27 = *(_QWORD *)(v1 + 2032);
    v243 = *(_QWORD *)(v1 + 1960);
    v242 = Logger.wellnessIntents.unsafeMutableAddressor();
    swift_beginAccess();
    v244(v27, v242, v243);
    swift_endAccess();
    v247 = Logger.logObject.getter();
    v246 = static os_log_type_t.debug.getter();
    *(_QWORD *)(v1 + 1688) = 2;
    UnsignedInteger<>.init<A>(_:)();
    v245 = *(_DWORD *)(v1 + 2440);
    v248 = _allocateUninitializedArray<A>(_:)();
    if (os_log_type_enabled(v247, v246))
    {
      v238 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      v237 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      v239 = createStorage<A>(capacity:type:)(0);
      v240 = createStorage<A>(capacity:type:)(0);
      *(_QWORD *)(v1 + 1696) = v238;
      *(_QWORD *)(v1 + 1704) = v239;
      *(_QWORD *)(v1 + 1712) = v240;
      serialize(_:at:)(0, (_BYTE **)(v1 + 1696));
      serialize(_:at:)(0, (_BYTE **)(v1 + 1696));
      *(_QWORD *)(v1 + 1720) = v248;
      v241 = (_QWORD *)swift_task_alloc();
      v241[2] = v1 + 1696;
      v241[3] = v1 + 1704;
      v241[4] = v1 + 1712;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
      lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
      result = Sequence.forEach(_:)();
      if (v341)
        return result;
      swift_task_dealloc();
      _os_log_impl(&dword_24749F000, v247, v246, "Time specified, but no potential time match found. Returning .noMatchFound.", v238, v245);
      destroyStorage<A>(_:count:)(v239, 0, v237);
      destroyStorage<A>(_:count:)(v240, 0, MEMORY[0x24BEE4AD8] + 8);
      MEMORY[0x24957D398](v238, MEMORY[0x24BEE4260]);
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    v234 = *(void (**)(uint64_t, uint64_t))(v1 + 2120);
    v232 = *(_QWORD *)(v1 + 2032);
    v233 = *(_QWORD *)(v1 + 1960);

    v234(v232, v233);
    type metadata accessor for LogSpecificMedicationsIntentResponse();
    v235 = LogSpecificMedicationsIntentResponse.__allocating_init(code:userActivity:)(105, 0);
    swift_release();
    swift_release();
    v236 = v235;
    goto LABEL_106;
  }
  v229 = *(_QWORD *)(v1 + 1808);
  v230 = *(_QWORD *)(v338 + 16);
  swift_bridgeObjectRetain();
  v231 = MEMORY[0x24957CF48](v230, v336, v229, v337);
  swift_bridgeObjectRelease();
  if (v231 <= 1)
  {
    v181 = *(_QWORD *)(v1 + 2128);
    swift_beginAccess();
    doseEvents._rawValue = *(void **)(v181 + 16);
    swift_bridgeObjectRetain();
    swift_endAccess();
    v183 = allDoseEventsAreUnlogged(doseEvents:)(doseEvents);
    swift_bridgeObjectRelease();
    if (v183)
    {
      v176 = *(void (**)(uint64_t, uint64_t, uint64_t))(v1 + 2080);
      v45 = *(_QWORD *)(v1 + 2008);
      v175 = *(_QWORD *)(v1 + 1960);
      v174 = Logger.wellnessIntents.unsafeMutableAddressor();
      swift_beginAccess();
      v176(v45, v174, v175);
      swift_endAccess();
      v179 = Logger.logObject.getter();
      v178 = static os_log_type_t.debug.getter();
      *(_QWORD *)(v1 + 1496) = 2;
      UnsignedInteger<>.init<A>(_:)();
      v177 = *(_DWORD *)(v1 + 2424);
      v180 = _allocateUninitializedArray<A>(_:)();
      if (os_log_type_enabled(v179, v178))
      {
        v170 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
        v169 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
        v171 = createStorage<A>(capacity:type:)(0);
        v172 = createStorage<A>(capacity:type:)(0);
        *(_QWORD *)(v1 + 1568) = v170;
        *(_QWORD *)(v1 + 1576) = v171;
        *(_QWORD *)(v1 + 1584) = v172;
        serialize(_:at:)(0, (_BYTE **)(v1 + 1568));
        serialize(_:at:)(0, (_BYTE **)(v1 + 1568));
        *(_QWORD *)(v1 + 1592) = v180;
        v173 = (_QWORD *)swift_task_alloc();
        v173[2] = v1 + 1568;
        v173[3] = v1 + 1576;
        v173[4] = v1 + 1584;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
        lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
        result = Sequence.forEach(_:)();
        if (v341)
          return result;
        swift_task_dealloc();
        _os_log_impl(&dword_24749F000, v179, v178, "All dose events in group are unlogged, continuing to write", v170, v177);
        destroyStorage<A>(_:count:)(v171, 0, v169);
        destroyStorage<A>(_:count:)(v172, 0, MEMORY[0x24BEE4AD8] + 8);
        MEMORY[0x24957D398](v170, MEMORY[0x24BEE4260]);
        swift_bridgeObjectRelease();
        v168 = 0;
      }
      else
      {
        swift_bridgeObjectRelease();
        v168 = v341;
      }
      v165 = *(void (**)(uint64_t, uint64_t))(v1 + 2120);
      v163 = *(_QWORD *)(v1 + 2008);
      v164 = *(_QWORD *)(v1 + 1960);
      v166 = (uint64_t *)(*(_QWORD *)(v1 + 2128) + 16);

      v165(v163, v164);
      type metadata accessor for HKMedicationExposableDoseEvent();
      *(_QWORD *)(v1 + 1504) = _allocateUninitializedArray<A>(_:)();
      swift_beginAccess();
      v167 = *v166;
      swift_bridgeObjectRetain();
      swift_endAccess();
      *(_QWORD *)(v1 + 1512) = v167;
      Collection<>.makeIterator()();
      while (1)
      {
        IndexingIterator.next()();
        v162 = *(id *)(v1 + 1520);
        if (!v162)
          break;
        *(_QWORD *)(v1 + 1536) = v162;
        *(_QWORD *)(v1 + 1544) = objc_msgSend(v162, sel_scheduledDoseQuantity);
        if (*(_QWORD *)(v1 + 1544))
        {
          isa = *(Class *)(v1 + 1544);
        }
        else
        {
          type metadata accessor for NSNumber();
          isa = NSNumber.init(integerLiteral:)(1).super.super.isa;
          outlined destroy of HealthKitPersistor((id *)(v1 + 1544));
        }
        v161 = objc_msgSend(v162, sel_updateForNewDoseQuantity_);

        *(_QWORD *)(v1 + 1552) = v161;
        v46 = v161;
        *(_QWORD *)(v1 + 1560) = v161;
        Array.append(_:)();

      }
      v148 = *(void (**)(uint64_t, uint64_t, uint64_t))(v1 + 2080);
      v47 = *(_QWORD *)(v1 + 2000);
      v147 = *(_QWORD *)(v1 + 1960);
      v149 = *(_BYTE *)(v1 + 2385);
      outlined destroy of [HKQuantityType]();
      v146 = Logger.wellnessIntents.unsafeMutableAddressor();
      swift_beginAccess();
      v148(v47, v146, v147);
      swift_endAccess();
      v151 = swift_allocObject();
      *(_BYTE *)(v151 + 16) = v149 & 1;
      v159 = Logger.logObject.getter();
      v160 = static os_log_type_t.debug.getter();
      *(_QWORD *)(v1 + 1528) = 8;
      UnsignedInteger<>.init<A>(_:)();
      v150 = *(_DWORD *)(v1 + 2428);
      v155 = swift_allocObject();
      *(_BYTE *)(v155 + 16) = 0;
      v156 = swift_allocObject();
      *(_BYTE *)(v156 + 16) = 4;
      v152 = swift_allocObject();
      *(_QWORD *)(v152 + 16) = partial apply for implicit closure #5 in LogSpecificMedicationsIntentHandler.handle(intent:);
      *(_QWORD *)(v152 + 24) = v151;
      v153 = swift_allocObject();
      *(_QWORD *)(v153 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:format:privacy:);
      *(_QWORD *)(v153 + 24) = v152;
      v154 = swift_allocObject();
      *(_QWORD *)(v154 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:);
      *(_QWORD *)(v154 + 24) = v153;
      v157 = swift_allocObject();
      *(_QWORD *)(v157 + 16) = partial apply for thunk for @escaping @callee_guaranteed () -> (@unowned Int32);
      *(_QWORD *)(v157 + 24) = v154;
      _allocateUninitializedArray<A>(_:)();
      v158 = v48;
      swift_retain();
      *v158 = partial apply for closure #1 in OSLogArguments.append(_:);
      v158[1] = v155;
      swift_retain();
      v158[2] = partial apply for closure #1 in OSLogArguments.append(_:);
      v158[3] = v156;
      swift_retain();
      v158[4] = _s2os14OSLogArgumentsV6appendyyxycs17FixedWidthIntegerRzlFySpys5UInt8VGz_SpySo8NSObjectCSgGSgzSpyypGSgztcfU_TA_0;
      v158[5] = v157;
      _finalizeUninitializedArray<A>(_:)();
      swift_bridgeObjectRelease();
      if (os_log_type_enabled(v159, v160))
      {
        v143 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
        v142 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
        v144 = createStorage<A>(capacity:type:)(0);
        v145 = createStorage<A>(capacity:type:)(0);
        v390 = v143;
        v391 = v144;
        v392 = v145;
        serialize(_:at:)(0, &v390);
        serialize(_:at:)(1, &v390);
        v393 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
        v394 = v155;
        result = closure #1 in osLogInternal(_:log:type:)(&v393, (uint64_t)&v390, (uint64_t)&v391, (uint64_t)&v392);
        if (v168)
          return result;
        v393 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
        v394 = v156;
        closure #1 in osLogInternal(_:log:type:)(&v393, (uint64_t)&v390, (uint64_t)&v391, (uint64_t)&v392);
        v393 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))_s2os14OSLogArgumentsV6appendyyxycs17FixedWidthIntegerRzlFySpys5UInt8VGz_SpySo8NSObjectCSgGSgzSpyypGSgztcfU_TA_0;
        v394 = v157;
        closure #1 in osLogInternal(_:log:type:)(&v393, (uint64_t)&v390, (uint64_t)&v391, (uint64_t)&v392);
        _os_log_impl(&dword_24749F000, v159, v160, "Calling writeDoseEvent() for specified time with medStatus: %{BOOL}d", v143, v150);
        destroyStorage<A>(_:count:)(v144, 0, v142);
        destroyStorage<A>(_:count:)(v145, 0, MEMORY[0x24BEE4AD8] + 8);
        MEMORY[0x24957D398](v143, MEMORY[0x24BEE4260]);
        swift_release();
        swift_release();
        swift_release();
      }
      else
      {
        swift_release();
        swift_release();
        swift_release();
      }
      v139 = *(void (**)(uint64_t, uint64_t))(v1 + 2120);
      v137 = *(_QWORD *)(v1 + 2000);
      v138 = *(_QWORD *)(v1 + 1960);
      v140 = *(id *)(v1 + 1800);

      v139(v137, v138);
      v49 = v140;
      v141 = *(_QWORD *)(v1 + 1504);
      *(_QWORD *)(v1 + 2256) = v141;
      swift_bridgeObjectRetain();
      v50 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v1 + 2264) = v50;
      *v50 = *(_QWORD *)(v1 + 1128);
      v50[1] = SpecificMedicationsPersistor.saveScheduledMedication(specifiedDateInterval:medStatusTaken:);
      v51 = *(_QWORD *)(v1 + 1800);
      v52 = *(_BYTE *)(v1 + 2385);
      v416 = *(_QWORD *)(v1 + 1792);
      v417 = v51;
      return SpecificMedicationsPersistor.writeDoseEvent(medicationController:doseEvents:medStatusTaken:medicationIDPresent:dosage:dosageUnit:)(v51, v141, v52 & 1, 0, 0, 1, 0, 0);
    }
    else
    {
      v134 = *(_QWORD *)(v1 + 2128);
      swift_beginAccess();
      v135._rawValue = *(void **)(v134 + 16);
      swift_bridgeObjectRetain();
      swift_endAccess();
      v136 = allLoggedWithMixedStatus(doseEvents:)(v135);
      swift_bridgeObjectRelease();
      if (v136)
        goto LABEL_82;
      v130 = *(_QWORD *)(v1 + 2128);
      v131 = *(_BYTE *)(v1 + 2385);
      swift_beginAccess();
      v132._rawValue = *(void **)(v130 + 16);
      swift_bridgeObjectRetain();
      swift_endAccess();
      v133 = oneExistingStatusWithConflictingRequest(doseEvents:requestedStatus:)(v132, v131 & 1);
      swift_bridgeObjectRelease();
      if (v133)
      {
LABEL_82:
        v113 = *(void (**)(uint64_t, uint64_t, uint64_t))(v1 + 2080);
        v53 = *(_QWORD *)(v1 + 1992);
        v112 = *(_QWORD *)(v1 + 1960);
        v109 = *(_BYTE *)(v1 + 2385);
        v108 = (void **)(*(_QWORD *)(v1 + 2128) + 16);
        swift_beginAccess();
        v107._rawValue = *v108;
        swift_bridgeObjectRetain();
        swift_endAccess();
        v114 = allLoggedWithMixedStatus(doseEvents:)(v107);
        swift_bridgeObjectRelease();
        *(_BYTE *)(v1 + 2392) = v114;
        swift_beginAccess();
        v110._rawValue = *v108;
        swift_bridgeObjectRetain();
        swift_endAccess();
        v115 = oneExistingStatusWithConflictingRequest(doseEvents:requestedStatus:)(v110, v109 & 1);
        swift_bridgeObjectRelease();
        *(_BYTE *)(v1 + 2400) = v115;
        v111 = Logger.wellnessIntents.unsafeMutableAddressor();
        swift_beginAccess();
        v113(v53, v111, v112);
        swift_endAccess();
        v117 = swift_allocObject();
        *(_BYTE *)(v117 + 16) = v114;
        v119 = swift_allocObject();
        *(_BYTE *)(v119 + 16) = v115;
        v128 = Logger.logObject.getter();
        v129 = static os_log_type_t.debug.getter();
        *(_QWORD *)(v1 + 1432) = 22;
        UnsignedInteger<>.init<A>(_:)();
        v116 = *(_DWORD *)(v1 + 2420);
        v121 = swift_allocObject();
        *(_BYTE *)(v121 + 16) = 32;
        v122 = swift_allocObject();
        *(_BYTE *)(v122 + 16) = 8;
        v118 = swift_allocObject();
        *(_QWORD *)(v118 + 16) = partial apply for implicit closure #1 in SpecificMedicationsPersistor.updateDosageForDoseEvent(doseEvent:inputDosage:inputDosageUnit:);
        *(_QWORD *)(v118 + 24) = v117;
        v123 = swift_allocObject();
        *(_QWORD *)(v123 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:);
        *(_QWORD *)(v123 + 24) = v118;
        v124 = swift_allocObject();
        *(_BYTE *)(v124 + 16) = 32;
        v125 = swift_allocObject();
        *(_BYTE *)(v125 + 16) = 8;
        v120 = swift_allocObject();
        *(_QWORD *)(v120 + 16) = partial apply for implicit closure #1 in SpecificMedicationsPersistor.updateDosageForDoseEvent(doseEvent:inputDosage:inputDosageUnit:);
        *(_QWORD *)(v120 + 24) = v119;
        v126 = swift_allocObject();
        *(_QWORD *)(v126 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:);
        *(_QWORD *)(v126 + 24) = v120;
        _allocateUninitializedArray<A>(_:)();
        v127 = v54;
        swift_retain();
        *v127 = partial apply for closure #1 in OSLogArguments.append(_:);
        v127[1] = v121;
        swift_retain();
        v127[2] = partial apply for closure #1 in OSLogArguments.append(_:);
        v127[3] = v122;
        swift_retain();
        v127[4] = partial apply for closure #1 in OSLogArguments.append(_:);
        v127[5] = v123;
        swift_retain();
        v127[6] = partial apply for closure #1 in OSLogArguments.append(_:);
        v127[7] = v124;
        swift_retain();
        v127[8] = partial apply for closure #1 in OSLogArguments.append(_:);
        v127[9] = v125;
        swift_retain();
        v127[10] = partial apply for closure #1 in OSLogArguments.append(_:);
        v127[11] = v126;
        _finalizeUninitializedArray<A>(_:)();
        swift_bridgeObjectRelease();
        if (os_log_type_enabled(v128, v129))
        {
          v104 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
          v103 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
          v105 = createStorage<A>(capacity:type:)(0);
          v106 = createStorage<A>(capacity:type:)(2);
          v385 = v104;
          v386 = v105;
          v387 = v106;
          serialize(_:at:)(2, &v385);
          serialize(_:at:)(2, &v385);
          v388 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
          v389 = v121;
          result = closure #1 in osLogInternal(_:log:type:)(&v388, (uint64_t)&v385, (uint64_t)&v386, (uint64_t)&v387);
          if (v341)
            return result;
          v388 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
          v389 = v122;
          closure #1 in osLogInternal(_:log:type:)(&v388, (uint64_t)&v385, (uint64_t)&v386, (uint64_t)&v387);
          v388 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
          v389 = v123;
          closure #1 in osLogInternal(_:log:type:)(&v388, (uint64_t)&v385, (uint64_t)&v386, (uint64_t)&v387);
          v388 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
          v389 = v124;
          closure #1 in osLogInternal(_:log:type:)(&v388, (uint64_t)&v385, (uint64_t)&v386, (uint64_t)&v387);
          v388 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
          v389 = v125;
          closure #1 in osLogInternal(_:log:type:)(&v388, (uint64_t)&v385, (uint64_t)&v386, (uint64_t)&v387);
          v388 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
          v389 = v126;
          closure #1 in osLogInternal(_:log:type:)(&v388, (uint64_t)&v385, (uint64_t)&v386, (uint64_t)&v387);
          _os_log_impl(&dword_24749F000, v128, v129, "Calling either allLoggedWithMixedStatus (%s) or oneExistingStatusWithConflictingRequest (%s)", v104, v116);
          destroyStorage<A>(_:count:)(v105, 0, v103);
          destroyStorage<A>(_:count:)(v106, 2, MEMORY[0x24BEE4AD8] + 8);
          MEMORY[0x24957D398](v104, MEMORY[0x24BEE4260]);
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          swift_release();
        }
        else
        {
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          swift_release();
        }
        v99 = *(void (**)(uint64_t, uint64_t))(v1 + 2120);
        v97 = *(_QWORD *)(v1 + 1992);
        v98 = *(_QWORD *)(v1 + 1960);
        v100 = (uint64_t *)(*(_QWORD *)(v1 + 2128) + 16);

        v99(v97, v98);
        *(_QWORD *)(v1 + 2280) = type metadata accessor for MatchedMedName();
        *(_QWORD *)(v1 + 1440) = _allocateUninitializedArray<A>(_:)();
        swift_beginAccess();
        v101 = *v100;
        swift_bridgeObjectRetain();
        swift_endAccess();
        *(_QWORD *)(v1 + 1448) = v101;
        Collection<>.makeIterator()();
        IndexingIterator.next()();
        v102 = *(_QWORD *)(v1 + 1456);
        *(_QWORD *)(v1 + 2288) = v102;
        if (v102)
        {
          *(_QWORD *)(v1 + 1472) = v102;
          v55 = (_QWORD *)swift_task_alloc();
          v371[287] = v55;
          *v55 = v371[141];
          v55[1] = SpecificMedicationsPersistor.saveScheduledMedication(specifiedDateInterval:medStatusTaken:);
          return SpecificMedicationsPersistor.buildMatchedMedName(from:shouldIncludeAsNeededParams:)(v102, 1, v371[224], v371[225]);
        }
        outlined destroy of [HKQuantityType]();
        type metadata accessor for LogSpecificMedicationsIntentResponse();
        v96 = LogSpecificMedicationsIntentResponse.__allocating_init(code:userActivity:)(110, 0);
        v56 = v96;
        v57 = v96;
        *(_QWORD *)(v1 + 1464) = v96;
        swift_bridgeObjectRetain();
        v95 = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
        objc_msgSend(v96, sel_setMatchingMeds_, v95);

        outlined destroy of [HKQuantityType]();
        swift_release();
        swift_release();
        v236 = v96;
        goto LABEL_106;
      }
      swift_beginAccess();
      swift_bridgeObjectRetain();
      swift_endAccess();
      v93 = getUnloggedDoseEvents(doseEvents:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      *(_QWORD *)(v1 + 1264) = v93;
      v94 = Collection.isEmpty.getter();
      outlined destroy of [HKQuantityType]();
      swift_bridgeObjectRelease();
      if ((v94 & 1) != 0)
      {
        v83 = *(void (**)(uint64_t, uint64_t, uint64_t))(v1 + 2080);
        v63 = *(_QWORD *)(v1 + 1984);
        v82 = *(_QWORD *)(v1 + 1960);
        v81 = Logger.wellnessIntents.unsafeMutableAddressor();
        swift_beginAccess();
        v83(v63, v81, v82);
        swift_endAccess();
        v86 = Logger.logObject.getter();
        v85 = static os_log_type_t.debug.getter();
        *(_QWORD *)(v1 + 1272) = 2;
        UnsignedInteger<>.init<A>(_:)();
        v84 = *(_DWORD *)(v1 + 2416);
        v87 = _allocateUninitializedArray<A>(_:)();
        if (os_log_type_enabled(v86, v85))
        {
          v77 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
          v76 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
          v78 = createStorage<A>(capacity:type:)(0);
          v79 = createStorage<A>(capacity:type:)(0);
          *(_QWORD *)(v1 + 1336) = v77;
          *(_QWORD *)(v1 + 1344) = v78;
          *(_QWORD *)(v1 + 1352) = v79;
          serialize(_:at:)(0, (_BYTE **)(v1 + 1336));
          serialize(_:at:)(0, (_BYTE **)(v1 + 1336));
          *(_QWORD *)(v1 + 1360) = v87;
          v80 = (_QWORD *)swift_task_alloc();
          v80[2] = v1 + 1336;
          v80[3] = v1 + 1344;
          v80[4] = v1 + 1352;
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
          lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
          result = Sequence.forEach(_:)();
          if (v341)
            return result;
          swift_task_dealloc();
          _os_log_impl(&dword_24749F000, v86, v85, "allMedsLoggedAlready, returning code .allMedsLoggedAlready", v77, v84);
          destroyStorage<A>(_:count:)(v78, 0, v76);
          destroyStorage<A>(_:count:)(v79, 0, MEMORY[0x24BEE4AD8] + 8);
          MEMORY[0x24957D398](v77, MEMORY[0x24BEE4260]);
          swift_bridgeObjectRelease();
        }
        else
        {
          swift_bridgeObjectRelease();
        }
        v71 = *(void (**)(uint64_t, uint64_t))(v1 + 2120);
        v69 = *(_QWORD *)(v1 + 1984);
        v70 = *(_QWORD *)(v1 + 1960);
        v73 = (uint64_t *)(*(_QWORD *)(v1 + 2128) + 16);

        v71(v69, v70);
        type metadata accessor for LogSpecificMedicationsIntentResponse();
        v72 = LogSpecificMedicationsIntentResponse.__allocating_init(code:userActivity:)(111, 0);
        *(_QWORD *)(v1 + 2344) = v72;
        v64 = v72;
        v65 = v72;
        *(_QWORD *)(v1 + 1280) = v72;
        *(_QWORD *)(v1 + 2352) = type metadata accessor for MatchedMedName();
        *(_QWORD *)(v1 + 1288) = _allocateUninitializedArray<A>(_:)();
        swift_beginAccess();
        v74 = *v73;
        swift_bridgeObjectRetain();
        swift_endAccess();
        *(_QWORD *)(v1 + 1296) = v74;
        Collection<>.makeIterator()();
        IndexingIterator.next()();
        v75 = *(_QWORD *)(v1 + 1304);
        *(_QWORD *)(v1 + 2360) = v75;
        if (v75)
        {
          *(_QWORD *)(v1 + 1312) = v75;
          v66 = (_QWORD *)swift_task_alloc();
          v371[296] = v66;
          *v66 = v371[141];
          v66[1] = SpecificMedicationsPersistor.saveScheduledMedication(specifiedDateInterval:medStatusTaken:);
          return SpecificMedicationsPersistor.buildMatchedMedName(from:shouldIncludeAsNeededParams:)(v75, 1, v371[224], v371[225]);
        }
        v68 = *(id *)(v1 + 2344);
        outlined destroy of [HKQuantityType]();
        swift_bridgeObjectRetain();
        v67 = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
        objc_msgSend(v68, sel_setMatchingMeds_, v67);

        outlined destroy of [HKQuantityType]();
        swift_release();
        swift_release();
        v236 = *(char **)(v1 + 2344);
        goto LABEL_106;
      }
      swift_beginAccess();
      swift_bridgeObjectRetain();
      swift_endAccess();
      v92 = getUnloggedDoseEvents(doseEvents:)();
      *(_QWORD *)(v1 + 2312) = v92;
      swift_bridgeObjectRelease();
      *(_QWORD *)(v1 + 1368) = v92;
      type metadata accessor for HKMedicationExposableDoseEvent();
      *(_QWORD *)(v1 + 1376) = _allocateUninitializedArray<A>(_:)();
      swift_bridgeObjectRetain();
      *(_QWORD *)(v1 + 1384) = v92;
      Collection<>.makeIterator()();
      while (1)
      {
        IndexingIterator.next()();
        v91 = *(id *)(v1 + 1392);
        if (!v91)
          break;
        *(_QWORD *)(v1 + 1400) = v91;
        *(_QWORD *)(v1 + 1408) = objc_msgSend(v91, sel_scheduledDoseQuantity);
        if (*(_QWORD *)(v1 + 1408))
        {
          v384 = *(Class *)(v1 + 1408);
        }
        else
        {
          type metadata accessor for NSNumber();
          v384 = NSNumber.init(integerLiteral:)(1).super.super.isa;
          outlined destroy of HealthKitPersistor((id *)(v1 + 1408));
        }
        v90 = objc_msgSend(v91, sel_updateForNewDoseQuantity_);

        *(_QWORD *)(v1 + 1416) = v90;
        v58 = v90;
        *(_QWORD *)(v1 + 1424) = v90;
        Array.append(_:)();

      }
      v88 = *(id *)(v1 + 1800);
      outlined destroy of [HKQuantityType]();
      v59 = v88;
      v89 = *(_QWORD *)(v1 + 1376);
      *(_QWORD *)(v1 + 2320) = v89;
      swift_bridgeObjectRetain();
      v60 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v1 + 2328) = v60;
      *v60 = *(_QWORD *)(v1 + 1128);
      v60[1] = SpecificMedicationsPersistor.saveScheduledMedication(specifiedDateInterval:medStatusTaken:);
      v61 = *(_QWORD *)(v1 + 1800);
      v62 = *(_BYTE *)(v1 + 2385);
      v416 = *(_QWORD *)(v1 + 1792);
      v417 = v61;
      return SpecificMedicationsPersistor.writeDoseEvent(medicationController:doseEvents:medStatusTaken:medicationIDPresent:dosage:dosageUnit:)(v61, v89, v62 & 1, 0, 0, 1, 0, 0);
    }
  }
  else
  {
    v220 = *(void (**)(uint64_t, uint64_t, uint64_t))(v1 + 2080);
    v28 = *(_QWORD *)(v1 + 2024);
    v219 = *(_QWORD *)(v1 + 1960);
    v218 = Logger.wellnessIntents.unsafeMutableAddressor();
    swift_beginAccess();
    v220(v28, v218, v219);
    swift_endAccess();
    swift_retain();
    v227 = Logger.logObject.getter();
    v228 = static os_log_type_t.debug.getter();
    *(_QWORD *)(v1 + 1600) = 12;
    UnsignedInteger<>.init<A>(_:)();
    v221 = *(_DWORD *)(v1 + 2432);
    v223 = swift_allocObject();
    *(_BYTE *)(v223 + 16) = 0;
    v224 = swift_allocObject();
    *(_BYTE *)(v224 + 16) = 8;
    v222 = swift_allocObject();
    *(_QWORD *)(v222 + 16) = partial apply for implicit closure #7 in SpecificMedicationsPersistor.saveScheduledMedication(specifiedDateInterval:medStatusTaken:);
    *(_QWORD *)(v222 + 24) = v338;
    v225 = swift_allocObject();
    *(_QWORD *)(v225 + 16) = partial apply for thunk for @escaping @callee_guaranteed () -> (@unowned Int);
    *(_QWORD *)(v225 + 24) = v222;
    _allocateUninitializedArray<A>(_:)();
    v226 = v29;
    swift_retain();
    *v226 = partial apply for closure #1 in OSLogArguments.append(_:);
    v226[1] = v223;
    swift_retain();
    v226[2] = partial apply for closure #1 in OSLogArguments.append(_:);
    v226[3] = v224;
    swift_retain();
    v226[4] = partial apply for closure #1 in OSLogArguments.append<A>(_:);
    v226[5] = v225;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(v227, v228))
    {
      v215 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      v214 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      v216 = createStorage<A>(capacity:type:)(0);
      v217 = createStorage<A>(capacity:type:)(0);
      v396 = v215;
      v397 = v216;
      v398 = v217;
      serialize(_:at:)(0, &v396);
      serialize(_:at:)(1, &v396);
      v399 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v400 = v223;
      result = closure #1 in osLogInternal(_:log:type:)(&v399, (uint64_t)&v396, (uint64_t)&v397, (uint64_t)&v398);
      if (v341)
        return result;
      v399 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v400 = v224;
      closure #1 in osLogInternal(_:log:type:)(&v399, (uint64_t)&v396, (uint64_t)&v397, (uint64_t)&v398);
      v399 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append<A>(_:);
      v400 = v225;
      closure #1 in osLogInternal(_:log:type:)(&v399, (uint64_t)&v396, (uint64_t)&v397, (uint64_t)&v398);
      _os_log_impl(&dword_24749F000, v227, v228, "Multiple schedules (%ld) found for specified timeframe without name, returning .needsScheduleDisambiguation", v215, v221);
      destroyStorage<A>(_:count:)(v216, 0, v214);
      destroyStorage<A>(_:count:)(v217, 0, MEMORY[0x24BEE4AD8] + 8);
      MEMORY[0x24957D398](v215, MEMORY[0x24BEE4260]);
      swift_release();
      swift_release();
      swift_release();
      v213 = 0;
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
      v213 = v341;
    }
    v209 = *(void (**)(uint64_t, uint64_t))(v1 + 2120);
    v207 = *(_QWORD *)(v1 + 2024);
    v208 = *(_QWORD *)(v1 + 1960);

    v209(v207, v208);
    *(_QWORD *)(v1 + 2176) = type metadata accessor for MatchedMedSchedule();
    *(_QWORD *)(v1 + 1608) = _allocateUninitializedArray<A>(_:)();
    swift_beginAccess();
    swift_bridgeObjectRetain();
    swift_endAccess();
    Dictionary.makeIterator()();
    memcpy((void *)(v1 + 56), (const void *)(v1 + 16), 0x28uLL);
    *(_QWORD *)(v1 + 2184) = v213;
    v211 = *(_OWORD **)(v1 + 1840);
    v210 = *(_OWORD **)(v1 + 1832);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String? : (scheduleDate: Date?, medID: String, count: Int)].Iterator);
    Dictionary.Iterator.next()();
    outlined init with take of (key: String?, value: (scheduleDate: Date?, medID: String, count: Int))?(v210, v211);
    v212 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String?, value: (scheduleDate: Date?, medID: String, count: Int)));
    if ((*(unsigned int (**)(_OWORD *, uint64_t))(*(_QWORD *)(v212 - 8) + 48))(v211, 1) == 1)
    {
      outlined destroy of [String? : (scheduleDate: Date?, medID: String, count: Int)].Iterator();
      type metadata accessor for LogSpecificMedicationsIntentResponse();
      v185 = LogSpecificMedicationsIntentResponse.__allocating_init(code:userActivity:)(104, 0);
      v43 = v185;
      v44 = v185;
      *(_QWORD *)(v1 + 1616) = v185;
      swift_bridgeObjectRetain();
      v184 = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      objc_msgSend(v185, sel_setMatchingSchedules_, v184);

      outlined destroy of [HKQuantityType]();
      swift_release();
      swift_release();
      v236 = v185;
LABEL_106:
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      return (*(uint64_t (**)(char *))(*(_QWORD *)(v1 + 1128) + 8))(v236);
    }
    v199 = *(void **)(v1 + 1904);
    v30 = *(uint64_t **)(v1 + 1840);
    v200 = *(char **)(v1 + 1824);
    v198 = *(_QWORD *)(v1 + 1808);
    v197 = *v30;
    v206 = v30[1];
    *(_QWORD *)(v1 + 2192) = v206;
    v31 = (char *)v30 + *(int *)(v212 + 48);
    v32 = &v31[*(int *)(v198 + 48)];
    v193 = *(_QWORD *)v32;
    v195 = *((_QWORD *)v32 + 1);
    v203 = *(_QWORD *)&v31[*(int *)(v198 + 64)];
    *(_QWORD *)(v1 + 2200) = v203;
    v194 = &v200[*(int *)(v198 + 48)];
    v196 = *(int *)(v198 + 64);
    outlined init with take of Date?(v31, v200);
    *(_QWORD *)v194 = v193;
    *((_QWORD *)v194 + 1) = v195;
    *(_QWORD *)&v200[v196] = v203;
    *(_QWORD *)(v1 + 984) = v197;
    *(_QWORD *)(v1 + 992) = v206;
    v33 = (uint64_t *)&v200[*(int *)(v198 + 48)];
    v201 = *v33;
    v202 = v33[1];
    *(_QWORD *)(v1 + 2208) = v202;
    outlined init with take of Date?(v200, v199);
    *(_QWORD *)(v1 + 1000) = v201;
    *(_QWORD *)(v1 + 1008) = v202;
    *(_QWORD *)(v1 + 1624) = v203;
    v204 = swift_allocObject();
    *(_QWORD *)(v1 + 2216) = v204;
    *(_QWORD *)(v1 + 1632) = v204 + 16;
    v34 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Match", 5uLL, 1);
    INObject.__allocating_init(identifier:display:)(v35, (Swift::String_optional)0, v34);
    *(_QWORD *)(v204 + 16) = v36;
    swift_beginAccess();
    v205 = *(id *)(v204 + 16);
    v37 = v205;
    swift_endAccess();
    swift_bridgeObjectRetain();
    if (v206)
    {
      v191 = MEMORY[0x24957CFB4](v197);
      swift_bridgeObjectRelease();
      v192 = (void *)v191;
    }
    else
    {
      v192 = 0;
    }
    v189 = *(_QWORD *)(v1 + 1904);
    objc_msgSend(v205, sel_setScheduleID_);

    swift_beginAccess();
    v188 = *(id *)(v204 + 16);
    v38 = v188;
    swift_endAccess();
    v190 = getFormattedTimeString(time:)(v189);
    if (v39)
    {
      v186 = MEMORY[0x24957CFB4](v190);
      swift_bridgeObjectRelease();
      v187 = (void *)v186;
    }
    else
    {
      v187 = 0;
    }
    objc_msgSend(v188, sel_setSchedule_);

    swift_beginAccess();
    v40 = *(void **)(v204 + 16);
    *(_QWORD *)(v1 + 2224) = v40;
    v41 = v40;
    swift_endAccess();
    swift_bridgeObjectRetain();
    v42 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v1 + 2232) = v42;
    *v42 = *(_QWORD *)(v1 + 1128);
    v42[1] = SpecificMedicationsPersistor.saveScheduledMedication(specifiedDateInterval:medStatusTaken:);
    return SpecificMedicationsPersistor.displayNameFor(identifier:)(v201, v202, *(_QWORD *)(v1 + 1792), *(_QWORD *)(v1 + 1800));
  }
}

{
  uint64_t *v1;
  void *v3;
  uint64_t v4;

  v4 = *v1;
  v3 = *(void **)(*v1 + 1800);
  *(_QWORD *)(v4 + 1128) = *v1;
  *(_QWORD *)(v4 + 2272) = a1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();

  return swift_task_switch();
}

{
  uint64_t *v1;
  uint64_t v3;

  v3 = *v1;
  *(_QWORD *)(v3 + 1128) = *v1;
  *(_QWORD *)(v3 + 2304) = a1;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t *v1;
  void *v3;
  uint64_t v4;

  v4 = *v1;
  v3 = *(void **)(*v1 + 1800);
  *(_QWORD *)(v4 + 1128) = *v1;
  *(_QWORD *)(v4 + 2336) = a1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();

  return swift_task_switch();
}

{
  uint64_t *v1;
  uint64_t v3;

  v3 = *v1;
  *(_QWORD *)(v3 + 1128) = *v1;
  *(_QWORD *)(v3 + 2376) = a1;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t SpecificMedicationsPersistor.saveScheduledMedication(specifiedDateInterval:medStatusTaken:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v4;

  v4 = (_QWORD *)*v2;
  v4[141] = *v2;
  v4[280] = a1;
  v4[281] = a2;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  return swift_task_switch();
}

uint64_t implicit closure #1 in SpecificMedicationsPersistor.saveScheduledMedication(specifiedDateInterval:medStatusTaken:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;

  v3 = a1;
  v5 = type metadata accessor for DateInterval();
  v4 = (*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v5);
  v6 = (char *)&v3 - v4;
  (*(void (**)(char *))(v1 + 16))((char *)&v3 - v4);
  lazy protocol witness table accessor for type DateInterval and conformance DateInterval();
  return String.init<A>(describing:)();
}

uint64_t implicit closure #2 in SpecificMedicationsPersistor.saveScheduledMedication(specifiedDateInterval:medStatusTaken:)(uint64_t a1)
{
  unint64_t v1;
  uint64_t v4;
  uint64_t v5;

  swift_beginAccess();
  v4 = *(_QWORD *)(a1 + 16);
  swift_bridgeObjectRetain();
  swift_endAccess();
  v1 = type metadata accessor for HKMedicationExposableDoseEvent();
  v5 = MEMORY[0x24957D110](v4, v1);
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t implicit closure #4 in SpecificMedicationsPersistor.saveScheduledMedication(specifiedDateInterval:medStatusTaken:)(void *a1)
{
  id v2;

  v2 = objc_msgSend(a1, sel_scheduleItemIdentifier);
  if (v2)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();

  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
  lazy protocol witness table accessor for type String? and conformance A?();
  return String.init<A>(describing:)();
}

uint64_t implicit closure #5 in SpecificMedicationsPersistor.saveScheduledMedication(specifiedDateInterval:medStatusTaken:)(void *a1)
{
  objc_msgSend(a1, sel_medicationIdentifier);
  type metadata accessor for HKMedicationIdentifier();
  lazy protocol witness table accessor for type HKMedicationIdentifier and conformance NSObject();
  return String.init<A>(describing:)();
}

uint64_t implicit closure #6 in SpecificMedicationsPersistor.saveScheduledMedication(specifiedDateInterval:medStatusTaken:)(void *a1)
{
  objc_msgSend(a1, sel_status);
  type metadata accessor for HKMedicationDoseEventStatus();
  return String.init<A>(describing:)();
}

uint64_t implicit closure #7 in SpecificMedicationsPersistor.saveScheduledMedication(specifiedDateInterval:medStatusTaken:)(uint64_t a1)
{
  unint64_t v1;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  swift_beginAccess();
  v6 = *(_QWORD *)(a1 + 16);
  swift_bridgeObjectRetain();
  swift_endAccess();
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (scheduleDate: Date?, medID: String, count: Int));
  v1 = lazy protocol witness table accessor for type String? and conformance <A> A?();
  v7 = MEMORY[0x24957CF48](v6, v4, v5, v1);
  swift_bridgeObjectRelease();
  return v7;
}

void __swiftcall INObject.__allocating_init(identifier:display:)(INObject *__return_ptr retstr, Swift::String_optional identifier, Swift::String display)
{
  id v3;
  void *object;
  uint64_t countAndFlagsBits;

  countAndFlagsBits = identifier.value._countAndFlagsBits;
  object = identifier.value._object;
  v3 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  @nonobjc INObject.init(identifier:display:)(countAndFlagsBits, (uint64_t)object, display._countAndFlagsBits, (uint64_t)display._object);
}

uint64_t SpecificMedicationsPersistor.displayNameFor(identifier:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;

  v4[34] = a4;
  v4[33] = a3;
  v4[32] = a2;
  v4[31] = a1;
  v4[18] = v4;
  v4[8] = 0;
  v4[9] = 0;
  v4[10] = 0;
  v4[11] = 0;
  v4[12] = 0;
  v4[13] = 0;
  v4[24] = 0;
  v4[30] = 0;
  v5 = type metadata accessor for Logger();
  v4[35] = v5;
  v4[36] = *(_QWORD *)(v5 - 8);
  v4[37] = swift_task_alloc();
  v4[38] = swift_task_alloc();
  v4[8] = a1;
  v4[9] = a2;
  v4[10] = a3;
  v4[11] = a4;
  return swift_task_switch();
}

uint64_t SpecificMedicationsPersistor.displayNameFor(identifier:)()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint8_t *buf;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint32_t v16;
  os_log_type_t v17;
  NSObject *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v21 = *(_QWORD *)(v0 + 256);
  *(_QWORD *)(v0 + 144) = v0;
  swift_bridgeObjectRetain();
  if (v21)
  {
    v1 = *(_QWORD *)(v20 + 256);
    *(_QWORD *)(v20 + 96) = *(_QWORD *)(v20 + 248);
    *(_QWORD *)(v20 + 104) = v1;
    v2 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v20 + 312) = v2;
    *v2 = *(_QWORD *)(v20 + 144);
    v2[1] = SpecificMedicationsPersistor.displayNameFor(identifier:);
    return SpecificMedicationsPersistor.UTCQuery()(*(_QWORD *)(v20 + 264), *(_QWORD *)(v20 + 272));
  }
  else
  {
    v4 = *(_QWORD *)(v20 + 304);
    v13 = *(_QWORD *)(v20 + 288);
    v15 = *(_QWORD *)(v20 + 280);
    v14 = Logger.wellnessIntents.unsafeMutableAddressor();
    swift_beginAccess();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 16))(v4, v14, v15);
    swift_endAccess();
    v18 = Logger.logObject.getter();
    v17 = static os_log_type_t.error.getter();
    *(_QWORD *)(v20 + 152) = 2;
    lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    lazy protocol witness table accessor for type Int and conformance Int();
    UnsignedInteger<>.init<A>(_:)();
    v16 = *(_DWORD *)(v20 + 336);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
    v19 = _allocateUninitializedArray<A>(_:)();
    if (os_log_type_enabled(v18, v17))
    {
      buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      v10 = createStorage<A>(capacity:type:)(0);
      v11 = createStorage<A>(capacity:type:)(0);
      *(_QWORD *)(v20 + 160) = buf;
      *(_QWORD *)(v20 + 168) = v10;
      *(_QWORD *)(v20 + 176) = v11;
      serialize(_:at:)(0, (_BYTE **)(v20 + 160));
      serialize(_:at:)(0, (_BYTE **)(v20 + 160));
      *(_QWORD *)(v20 + 184) = v19;
      v12 = (_QWORD *)swift_task_alloc();
      v12[2] = v20 + 160;
      v12[3] = v20 + 168;
      v12[4] = v20 + 176;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
      lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
      Sequence.forEach(_:)();
      swift_task_dealloc();
      _os_log_impl(&dword_24749F000, v18, v17, "Identifier passed into displayNameFor() was nil, returning nil", buf, v16);
      destroyStorage<A>(_:count:)(v10, 0, v8);
      destroyStorage<A>(_:count:)(v11, 0, MEMORY[0x24BEE4AD8] + 8);
      MEMORY[0x24957D398](buf, MEMORY[0x24BEE4260]);
    }
    swift_bridgeObjectRelease();
    v6 = *(_QWORD *)(v20 + 304);
    v5 = *(_QWORD *)(v20 + 288);
    v7 = *(_QWORD *)(v20 + 280);

    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v6, v7);
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(_QWORD))(*(_QWORD *)(v20 + 144) + 8))(0);
  }
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = v0[40];
  v4 = v0[32];
  v3 = v0[31];
  v0[18] = v0;
  v0[30] = v1;
  swift_bridgeObjectRetain();
  v0[16] = v3;
  v0[17] = v4;
  MEMORY[0x24957CF6C]();
  outlined destroy of String.UTF8View();
  v5 = v0[14];
  v6 = v0[15];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v0[18] + 8))(v5, v6);
}

{
  uint64_t v0;
  uint64_t v1;
  id v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  uint8_t *buf;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint32_t v18;
  os_log_type_t v19;
  NSObject *v20;
  uint64_t v21;

  v14 = *(void **)(v0 + 328);
  v1 = *(_QWORD *)(v0 + 296);
  v15 = *(_QWORD *)(v0 + 288);
  v17 = *(_QWORD *)(v0 + 280);
  *(_QWORD *)(v0 + 144) = v0;
  swift_bridgeObjectRelease();
  v2 = v14;
  *(_QWORD *)(v0 + 192) = v14;
  v16 = Logger.wellnessIntents.unsafeMutableAddressor();
  swift_beginAccess();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 16))(v1, v16, v17);
  swift_endAccess();
  v20 = Logger.logObject.getter();
  v19 = static os_log_type_t.error.getter();
  *(_QWORD *)(v0 + 200) = 2;
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  v18 = *(_DWORD *)(v0 + 340);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
  v21 = _allocateUninitializedArray<A>(_:)();
  if (os_log_type_enabled(v20, v19))
  {
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    v10 = createStorage<A>(capacity:type:)(0);
    v11 = createStorage<A>(capacity:type:)(0);
    *(_QWORD *)(v13 + 208) = buf;
    *(_QWORD *)(v13 + 216) = v10;
    *(_QWORD *)(v13 + 224) = v11;
    serialize(_:at:)(0, (_BYTE **)(v13 + 208));
    serialize(_:at:)(0, (_BYTE **)(v13 + 208));
    *(_QWORD *)(v13 + 232) = v21;
    v12 = (_QWORD *)swift_task_alloc();
    v12[2] = v13 + 208;
    v12[3] = v13 + 216;
    v12[4] = v13 + 224;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
    lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
    Sequence.forEach(_:)();
    swift_task_dealloc();
    _os_log_impl(&dword_24749F000, v20, v19, "Call to UTCQuery() threw, returning nil", buf, v18);
    destroyStorage<A>(_:count:)(v10, 0, v8);
    destroyStorage<A>(_:count:)(v11, 0, MEMORY[0x24BEE4AD8] + 8);
    MEMORY[0x24957D398](buf, MEMORY[0x24BEE4260]);
  }
  swift_bridgeObjectRelease();
  v7 = *(id *)(v13 + 328);
  v5 = *(_QWORD *)(v13 + 296);
  v4 = *(_QWORD *)(v13 + 288);
  v6 = *(_QWORD *)(v13 + 280);

  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v5, v6);
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)(v13 + 144) + 8))(0);
}

uint64_t SpecificMedicationsPersistor.displayNameFor(identifier:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;

  v3 = (_QWORD *)*v2;
  v3[18] = *v2;
  v3[40] = a1;
  v3[41] = v1;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t implicit closure #9 in SpecificMedicationsPersistor.saveScheduledMedication(specifiedDateInterval:medStatusTaken:)(uint64_t a1)
{
  id v1;
  void *v4;
  id v5;

  swift_beginAccess();
  v4 = *(void **)(a1 + 16);
  v1 = v4;
  swift_endAccess();
  v5 = objc_msgSend(v4, sel_scheduleID);
  if (v5)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();

  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
  lazy protocol witness table accessor for type String? and conformance A?();
  return String.init<A>(describing:)();
}

uint64_t implicit closure #10 in SpecificMedicationsPersistor.saveScheduledMedication(specifiedDateInterval:medStatusTaken:)(uint64_t a1)
{
  id v1;
  void *v4;
  id v5;

  swift_beginAccess();
  v4 = *(void **)(a1 + 16);
  v1 = v4;
  swift_endAccess();
  v5 = objc_msgSend(v4, sel_medName);
  if (v5)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();

  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
  lazy protocol witness table accessor for type String? and conformance A?();
  return String.init<A>(describing:)();
}

uint64_t implicit closure #11 in SpecificMedicationsPersistor.saveScheduledMedication(specifiedDateInterval:medStatusTaken:)(uint64_t a1)
{
  id v1;
  void *v4;
  id v5;

  swift_beginAccess();
  v4 = *(void **)(a1 + 16);
  v1 = v4;
  swift_endAccess();
  v5 = objc_msgSend(v4, sel_schedule);
  if (v5)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();

  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
  lazy protocol witness table accessor for type String? and conformance A?();
  return String.init<A>(describing:)();
}

uint64_t implicit closure #12 in SpecificMedicationsPersistor.saveScheduledMedication(specifiedDateInterval:medStatusTaken:)(uint64_t result)
{
  if (__OFSUB__(result, 1))
    __break(1u);
  else
    --result;
  return result;
}

uint64_t implicit closure #16 in SpecificMedicationsPersistor.saveScheduledMedication(specifiedDateInterval:medStatusTaken:)()
{
  return String.init<A>(describing:)();
}

id closure #2 in SpecificMedicationsPersistor.saveMedication(named:medStatusTaken:dosage:dosageUnit:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  id result;

  result = objc_msgSend((id)objc_opt_self(), sel_asNeededExposableDoseEventForMedication_doseQuantity_, *a1, a2);
  *a3 = result;
  return result;
}

uint64_t implicit closure #4 in SpecificMedicationsPersistor.saveMedication(named:medStatusTaken:dosage:dosageUnit:)(uint64_t a1)
{
  unint64_t v1;

  v1 = type metadata accessor for HKMedicationExposableDoseEvent();
  return MEMORY[0x24957D110](a1, v1);
}

uint64_t implicit closure #3 in SpecificMedicationsPersistor.writeDoseEvent(medicationController:doseEvents:medStatusTaken:medicationIDPresent:dosage:dosageUnit:)(void *a1)
{
  objc_msgSend(a1, sel_doseQuantity);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSNumber?);
  lazy protocol witness table accessor for type NSNumber? and conformance A?();
  return String.init<A>(describing:)();
}

uint64_t implicit closure #4 in SpecificMedicationsPersistor.writeDoseEvent(medicationController:doseEvents:medStatusTaken:medicationIDPresent:dosage:dosageUnit:)(void *a1)
{
  objc_msgSend(a1, sel_scheduledDoseQuantity);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSNumber?);
  lazy protocol witness table accessor for type NSNumber? and conformance A?();
  return String.init<A>(describing:)();
}

uint64_t implicit closure #5 in SpecificMedicationsPersistor.writeDoseEvent(medicationController:doseEvents:medStatusTaken:medicationIDPresent:dosage:dosageUnit:)(void *a1)
{
  objc_msgSend(a1, sel_logOrigin);
  type metadata accessor for HKMedicationDoseEventLogOrigin();
  return String.init<A>(describing:)();
}

uint64_t SpecificMedicationsPersistor.getAsNeededDosageUnit(for:dosageCount:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5)
{
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)(v5 + 368) = a4;
  *(_QWORD *)(v5 + 360) = a3;
  *(double *)(v5 + 352) = a5;
  *(_QWORD *)(v5 + 344) = a2;
  *(_QWORD *)(v5 + 336) = a1;
  *(_QWORD *)(v5 + 200) = v5;
  *(_QWORD *)(v5 + 136) = 0;
  *(_QWORD *)(v5 + 144) = 0;
  *(_QWORD *)(v5 + 208) = 0;
  *(_QWORD *)(v5 + 152) = 0;
  *(_QWORD *)(v5 + 160) = 0;
  *(_QWORD *)(v5 + 168) = 0;
  *(_QWORD *)(v5 + 176) = 0;
  *(_QWORD *)(v5 + 256) = 0;
  *(_QWORD *)(v5 + 280) = 0;
  *(_QWORD *)(v5 + 312) = 0;
  *(_QWORD *)(v5 + 184) = 0;
  *(_QWORD *)(v5 + 192) = 0;
  v6 = type metadata accessor for Logger();
  *(_QWORD *)(v5 + 376) = v6;
  *(_QWORD *)(v5 + 384) = *(_QWORD *)(v6 - 8);
  *(_QWORD *)(v5 + 392) = swift_task_alloc();
  *(_QWORD *)(v5 + 400) = swift_task_alloc();
  *(_QWORD *)(v5 + 408) = swift_task_alloc();
  *(_QWORD *)(v5 + 416) = swift_task_alloc();
  *(_QWORD *)(v5 + 424) = swift_task_alloc();
  *(_QWORD *)(v5 + 136) = a1;
  *(_QWORD *)(v5 + 144) = a2;
  *(double *)(v5 + 208) = a5;
  *(_QWORD *)(v5 + 152) = a3;
  *(_QWORD *)(v5 + 160) = a4;
  return swift_task_switch();
}

uint64_t SpecificMedicationsPersistor.getAsNeededDosageUnit(for:dosageCount:)()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint8_t *buf;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint32_t v16;
  os_log_type_t v17;
  NSObject *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v21 = *(_QWORD *)(v0 + 344);
  *(_QWORD *)(v0 + 200) = v0;
  swift_bridgeObjectRetain();
  if (v21)
  {
    v1 = *(_QWORD *)(v20 + 344);
    *(_QWORD *)(v20 + 168) = *(_QWORD *)(v20 + 336);
    *(_QWORD *)(v20 + 176) = v1;
    v2 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v20 + 432) = v2;
    *v2 = *(_QWORD *)(v20 + 200);
    v2[1] = SpecificMedicationsPersistor.getAsNeededDosageUnit(for:dosageCount:);
    return SpecificMedicationsPersistor.doUTCQueryForMedications()(*(_QWORD *)(v20 + 360), *(_QWORD *)(v20 + 368));
  }
  else
  {
    v4 = *(_QWORD *)(v20 + 400);
    v13 = *(_QWORD *)(v20 + 384);
    v15 = *(_QWORD *)(v20 + 376);
    v14 = Logger.wellnessIntents.unsafeMutableAddressor();
    swift_beginAccess();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 16))(v4, v14, v15);
    swift_endAccess();
    v18 = Logger.logObject.getter();
    v17 = static os_log_type_t.debug.getter();
    *(_QWORD *)(v20 + 216) = 2;
    lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    lazy protocol witness table accessor for type Int and conformance Int();
    UnsignedInteger<>.init<A>(_:)();
    v16 = *(_DWORD *)(v20 + 456);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
    v19 = _allocateUninitializedArray<A>(_:)();
    if (os_log_type_enabled(v18, v17))
    {
      buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      v10 = createStorage<A>(capacity:type:)(0);
      v11 = createStorage<A>(capacity:type:)(0);
      *(_QWORD *)(v20 + 224) = buf;
      *(_QWORD *)(v20 + 232) = v10;
      *(_QWORD *)(v20 + 240) = v11;
      serialize(_:at:)(0, (_BYTE **)(v20 + 224));
      serialize(_:at:)(0, (_BYTE **)(v20 + 224));
      *(_QWORD *)(v20 + 248) = v19;
      v12 = (_QWORD *)swift_task_alloc();
      v12[2] = v20 + 224;
      v12[3] = v20 + 232;
      v12[4] = v20 + 240;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
      lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
      Sequence.forEach(_:)();
      swift_task_dealloc();
      _os_log_impl(&dword_24749F000, v18, v17, "medicationID passed into getAsNeededDosageUnitFromHealthApp was nil, returning nil", buf, v16);
      destroyStorage<A>(_:count:)(v10, 0, v8);
      destroyStorage<A>(_:count:)(v11, 0, MEMORY[0x24BEE4AD8] + 8);
      MEMORY[0x24957D398](buf, MEMORY[0x24BEE4260]);
    }
    swift_bridgeObjectRelease();
    v6 = *(_QWORD *)(v20 + 400);
    v5 = *(_QWORD *)(v20 + 384);
    v7 = *(_QWORD *)(v20 + 376);

    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v6, v7);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(_QWORD))(*(_QWORD *)(v20 + 200) + 8))(0);
  }
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  id v5;
  _QWORD *v6;
  Swift::String_optional v7;
  uint64_t v8;
  id v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint32_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  NSObject *v30;
  os_log_type_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint8_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint32_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  NSObject *log;
  os_log_type_t v48;
  Swift::String_optional v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void (*v53)(uint64_t, uint64_t);
  Swift::Double fora;
  uint64_t v55;
  uint8_t *buf;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void (*v62)(uint64_t, uint64_t, uint64_t);
  uint32_t size;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  NSObject *oslog;
  os_log_type_t v71;
  id v72;
  id v73;
  void *v74;
  void *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint8_t *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t (*v84)(uint64_t, uint64_t, uint64_t);
  uint64_t v85;
  uint8_t *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t (*v89)(uint64_t, uint64_t, uint64_t);
  uint64_t v90;
  uint8_t *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t (*v94)(uint64_t, uint64_t, uint64_t);
  uint64_t v95;

  v1 = v0[56];
  v2 = v0[55];
  v78 = v0[43];
  v77 = v0[42];
  v0[25] = v0;
  v0[34] = v2;
  swift_bridgeObjectRetain();
  v79 = swift_task_alloc();
  *(_QWORD *)(v79 + 16) = v77;
  *(_QWORD *)(v79 + 24) = v78;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [HKUserTrackedMedication]);
  lazy protocol witness table accessor for type [HKUserTrackedMedication] and conformance [A]();
  result = _ArrayProtocol.filter(_:)();
  v80 = result;
  if (!v1)
  {
    swift_task_dealloc();
    swift_bridgeObjectRelease();
    *(_QWORD *)(v76 + 280) = v80;
    swift_bridgeObjectRetain();
    *(_QWORD *)(v76 + 296) = v80;
    lazy protocol witness table accessor for type [HKUserTrackedMedication] and conformance [A]();
    Collection.first.getter();
    outlined destroy of [HKQuantityType]();
    v75 = *(void **)(v76 + 288);
    if (v75)
    {
      v72 = objc_msgSend(v75, sel_medication);

      v73 = objc_msgSend(v72, sel_loggingUnit);
      v74 = v73;
    }
    else
    {
      v74 = 0;
    }
    if (v74)
    {
      v4 = *(_QWORD *)(v76 + 424);
      v59 = *(_QWORD *)(v76 + 384);
      v61 = *(_QWORD *)(v76 + 376);
      *(_QWORD *)(v76 + 312) = v74;
      v60 = Logger.wellnessIntents.unsafeMutableAddressor();
      swift_beginAccess();
      v62 = *(void (**)(uint64_t, uint64_t, uint64_t))(v59 + 16);
      v62(v4, v60, v61);
      swift_endAccess();
      v5 = v74;
      v64 = swift_allocObject();
      *(_QWORD *)(v64 + 16) = v74;
      oslog = Logger.logObject.getter();
      v71 = static os_log_type_t.debug.getter();
      *(_QWORD *)(v76 + 320) = 12;
      lazy protocol witness table accessor for type UInt32 and conformance UInt32();
      lazy protocol witness table accessor for type UInt32 and conformance UInt32();
      lazy protocol witness table accessor for type Int and conformance Int();
      UnsignedInteger<>.init<A>(_:)();
      size = *(_DWORD *)(v76 + 468);
      v66 = swift_allocObject();
      *(_BYTE *)(v66 + 16) = 32;
      v67 = swift_allocObject();
      *(_BYTE *)(v67 + 16) = 8;
      v65 = swift_allocObject();
      *(_QWORD *)(v65 + 16) = partial apply for implicit closure #2 in SpecificMedicationsPersistor.getAsNeededDosageUnit(for:dosageCount:);
      *(_QWORD *)(v65 + 24) = v64;
      v68 = swift_allocObject();
      *(_QWORD *)(v68 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:);
      *(_QWORD *)(v68 + 24) = v65;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
      _allocateUninitializedArray<A>(_:)();
      v69 = v6;
      swift_retain();
      *v69 = partial apply for closure #1 in OSLogArguments.append(_:);
      v69[1] = v66;
      swift_retain();
      v69[2] = partial apply for closure #1 in OSLogArguments.append(_:);
      v69[3] = v67;
      swift_retain();
      v69[4] = partial apply for closure #1 in OSLogArguments.append(_:);
      v69[5] = v68;
      _finalizeUninitializedArray<A>(_:)();
      swift_bridgeObjectRelease();
      if (os_log_type_enabled(oslog, v71))
      {
        buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
        v55 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
        v57 = createStorage<A>(capacity:type:)(0);
        v58 = createStorage<A>(capacity:type:)(1);
        v91 = buf;
        v92 = v57;
        v93 = v58;
        serialize(_:at:)(2, &v91);
        serialize(_:at:)(1, &v91);
        v94 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
        v95 = v66;
        closure #1 in osLogInternal(_:log:type:)(&v94, (uint64_t)&v91, (uint64_t)&v92, (uint64_t)&v93);
        v94 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
        v95 = v67;
        closure #1 in osLogInternal(_:log:type:)(&v94, (uint64_t)&v91, (uint64_t)&v92, (uint64_t)&v93);
        v94 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
        v95 = v68;
        closure #1 in osLogInternal(_:log:type:)(&v94, (uint64_t)&v91, (uint64_t)&v92, (uint64_t)&v93);
        _os_log_impl(&dword_24749F000, oslog, v71, "getAsNeededDosageUnit had raw unit of %s", buf, size);
        destroyStorage<A>(_:count:)(v57, 0, v55);
        destroyStorage<A>(_:count:)(v58, 1, MEMORY[0x24BEE4AD8] + 8);
        MEMORY[0x24957D398](buf, MEMORY[0x24BEE4260]);
        swift_release();
        swift_release();
        swift_release();
      }
      else
      {
        swift_release();
        swift_release();
        swift_release();
      }
      v51 = *(_QWORD *)(v76 + 424);
      v50 = *(_QWORD *)(v76 + 384);
      v52 = *(_QWORD *)(v76 + 376);
      fora = *(double *)(v76 + 352);

      v53 = *(void (**)(uint64_t, uint64_t))(v50 + 8);
      v53(v51, v52);
      v7 = HKMedicationLoggingUnit.getDisplayUnit(for:)(fora);
      if (v7.value._object)
      {
        *(Swift::String_optional *)(v76 + 184) = v7;

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v49 = v7;
      }
      else
      {
        v8 = *(_QWORD *)(v76 + 416);
        v39 = *(_QWORD *)(v76 + 376);
        v38 = Logger.wellnessIntents.unsafeMutableAddressor();
        swift_beginAccess();
        v62(v8, v38, v39);
        swift_endAccess();
        v9 = v74;
        v41 = swift_allocObject();
        *(_QWORD *)(v41 + 16) = v74;
        log = Logger.logObject.getter();
        v48 = static os_log_type_t.debug.getter();
        *(_QWORD *)(v76 + 328) = 12;
        UnsignedInteger<>.init<A>(_:)();
        v40 = *(_DWORD *)(v76 + 472);
        v43 = swift_allocObject();
        *(_BYTE *)(v43 + 16) = 64;
        v44 = swift_allocObject();
        *(_BYTE *)(v44 + 16) = 8;
        v42 = swift_allocObject();
        *(_QWORD *)(v42 + 16) = partial apply for implicit closure #3 in LogQuantityIntentHandler.handle(intent:);
        *(_QWORD *)(v42 + 24) = v41;
        v45 = swift_allocObject();
        *(_QWORD *)(v45 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:);
        *(_QWORD *)(v45 + 24) = v42;
        _allocateUninitializedArray<A>(_:)();
        v46 = v10;
        swift_retain();
        *v46 = partial apply for closure #1 in OSLogArguments.append(_:);
        v46[1] = v43;
        swift_retain();
        v46[2] = partial apply for closure #1 in OSLogArguments.append(_:);
        v46[3] = v44;
        swift_retain();
        v46[4] = partial apply for closure #1 in OSLogArguments.append(_:);
        v46[5] = v45;
        _finalizeUninitializedArray<A>(_:)();
        swift_bridgeObjectRelease();
        if (os_log_type_enabled(log, v48))
        {
          v35 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
          v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
          v36 = createStorage<A>(capacity:type:)(1);
          v37 = createStorage<A>(capacity:type:)(0);
          v86 = v35;
          v87 = v36;
          v88 = v37;
          serialize(_:at:)(2, &v86);
          serialize(_:at:)(1, &v86);
          v89 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
          v90 = v43;
          closure #1 in osLogInternal(_:log:type:)(&v89, (uint64_t)&v86, (uint64_t)&v87, (uint64_t)&v88);
          v89 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
          v90 = v44;
          closure #1 in osLogInternal(_:log:type:)(&v89, (uint64_t)&v86, (uint64_t)&v87, (uint64_t)&v88);
          v89 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
          v90 = v45;
          closure #1 in osLogInternal(_:log:type:)(&v89, (uint64_t)&v86, (uint64_t)&v87, (uint64_t)&v88);
          _os_log_impl(&dword_24749F000, log, v48, "Failed to find or map displayDosageUnit, here's dosageUnit: %@", v35, v40);
          destroyStorage<A>(_:count:)(v36, 1, v34);
          destroyStorage<A>(_:count:)(v37, 0, MEMORY[0x24BEE4AD8] + 8);
          MEMORY[0x24957D398](v35, MEMORY[0x24BEE4260]);
          swift_release();
          swift_release();
          swift_release();
        }
        else
        {
          swift_release();
          swift_release();
          swift_release();
        }
        v32 = *(_QWORD *)(v76 + 416);
        v33 = *(_QWORD *)(v76 + 376);

        v53(v32, v33);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v49.value._countAndFlagsBits = 0;
        v49.value._object = 0;
      }
    }
    else
    {
      v11 = *(_QWORD *)(v76 + 408);
      v20 = *(_QWORD *)(v76 + 384);
      v22 = *(_QWORD *)(v76 + 376);
      v21 = Logger.wellnessIntents.unsafeMutableAddressor();
      swift_beginAccess();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v20 + 16))(v11, v21, v22);
      swift_endAccess();
      swift_bridgeObjectRetain();
      v24 = swift_allocObject();
      *(_QWORD *)(v24 + 16) = v80;
      v30 = Logger.logObject.getter();
      v31 = static os_log_type_t.debug.getter();
      *(_QWORD *)(v76 + 304) = 12;
      lazy protocol witness table accessor for type UInt32 and conformance UInt32();
      lazy protocol witness table accessor for type UInt32 and conformance UInt32();
      lazy protocol witness table accessor for type Int and conformance Int();
      UnsignedInteger<>.init<A>(_:)();
      v23 = *(_DWORD *)(v76 + 464);
      v26 = swift_allocObject();
      *(_BYTE *)(v26 + 16) = 32;
      v27 = swift_allocObject();
      *(_BYTE *)(v27 + 16) = 8;
      v25 = swift_allocObject();
      *(_QWORD *)(v25 + 16) = partial apply for implicit closure #1 in SpecificMedicationsPersistor.getAsNeededDosageUnit(for:dosageCount:);
      *(_QWORD *)(v25 + 24) = v24;
      v28 = swift_allocObject();
      *(_QWORD *)(v28 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:);
      *(_QWORD *)(v28 + 24) = v25;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
      _allocateUninitializedArray<A>(_:)();
      v29 = v12;
      swift_retain();
      *v29 = partial apply for closure #1 in OSLogArguments.append(_:);
      v29[1] = v26;
      swift_retain();
      v29[2] = partial apply for closure #1 in OSLogArguments.append(_:);
      v29[3] = v27;
      swift_retain();
      v29[4] = partial apply for closure #1 in OSLogArguments.append(_:);
      v29[5] = v28;
      _finalizeUninitializedArray<A>(_:)();
      swift_bridgeObjectRelease();
      if (os_log_type_enabled(v30, v31))
      {
        v17 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
        v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
        v18 = createStorage<A>(capacity:type:)(0);
        v19 = createStorage<A>(capacity:type:)(1);
        v81 = v17;
        v82 = v18;
        v83 = v19;
        serialize(_:at:)(2, &v81);
        serialize(_:at:)(1, &v81);
        v84 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
        v85 = v26;
        closure #1 in osLogInternal(_:log:type:)(&v84, (uint64_t)&v81, (uint64_t)&v82, (uint64_t)&v83);
        v84 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
        v85 = v27;
        closure #1 in osLogInternal(_:log:type:)(&v84, (uint64_t)&v81, (uint64_t)&v82, (uint64_t)&v83);
        v84 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
        v85 = v28;
        closure #1 in osLogInternal(_:log:type:)(&v84, (uint64_t)&v81, (uint64_t)&v82, (uint64_t)&v83);
        _os_log_impl(&dword_24749F000, v30, v31, "Failed to find or map dosageUnit, here's the med: %s", v17, v23);
        destroyStorage<A>(_:count:)(v18, 0, v16);
        destroyStorage<A>(_:count:)(v19, 1, MEMORY[0x24BEE4AD8] + 8);
        MEMORY[0x24957D398](v17, MEMORY[0x24BEE4260]);
        swift_release();
        swift_release();
        swift_release();
      }
      else
      {
        swift_release();
        swift_release();
        swift_release();
      }
      v14 = *(_QWORD *)(v76 + 408);
      v13 = *(_QWORD *)(v76 + 384);
      v15 = *(_QWORD *)(v76 + 376);

      (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v14, v15);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v49.value._countAndFlagsBits = 0;
      v49.value._object = 0;
    }
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)(v76 + 200) + 8))(v49.value._countAndFlagsBits, v49.value._object);
  }
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  id v2;
  id v3;
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  uint8_t *buf;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  uint32_t size;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  NSObject *v27;
  os_log_type_t v28;
  uint8_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t (*v32)(uint64_t, uint64_t, uint64_t);
  uint64_t v33;

  v18 = *(id *)(v0 + 448);
  v1 = *(_QWORD *)(v0 + 392);
  v15 = *(_QWORD *)(v0 + 384);
  v17 = *(_QWORD *)(v0 + 376);
  *(_QWORD *)(v0 + 200) = v0;
  v2 = v18;
  *(_QWORD *)(v0 + 256) = v18;
  v16 = Logger.wellnessIntents.unsafeMutableAddressor();
  swift_beginAccess();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 16))(v1, v16, v17);
  swift_endAccess();
  v3 = v18;
  v20 = swift_allocObject();
  *(_QWORD *)(v20 + 16) = v18;
  default argument 2 of OSLogInterpolation.appendInterpolation(_:privacy:attributes:)();
  swift_bridgeObjectRelease();
  v27 = Logger.logObject.getter();
  v28 = static os_log_type_t.debug.getter();
  *(_QWORD *)(v0 + 264) = 12;
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  size = *(_DWORD *)(v0 + 460);
  v23 = swift_allocObject();
  *(_BYTE *)(v23 + 16) = 64;
  v24 = swift_allocObject();
  *(_BYTE *)(v24 + 16) = 8;
  v21 = swift_allocObject();
  *(_QWORD *)(v21 + 16) = partial apply for implicit closure #10 in getPreferredUnit(for:store:);
  *(_QWORD *)(v21 + 24) = v20;
  v22 = swift_allocObject();
  *(_QWORD *)(v22 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:attributes:);
  *(_QWORD *)(v22 + 24) = v21;
  v25 = swift_allocObject();
  *(_QWORD *)(v25 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:);
  *(_QWORD *)(v25 + 24) = v22;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
  _allocateUninitializedArray<A>(_:)();
  v26 = v4;
  swift_retain();
  *v26 = partial apply for closure #1 in OSLogArguments.append(_:);
  v26[1] = v23;
  swift_retain();
  v26[2] = partial apply for closure #1 in OSLogArguments.append(_:);
  v26[3] = v24;
  swift_retain();
  v26[4] = partial apply for closure #1 in OSLogArguments.append(_:);
  v26[5] = v25;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(v27, v28))
  {
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    v12 = createStorage<A>(capacity:type:)(1);
    v13 = createStorage<A>(capacity:type:)(0);
    v29 = buf;
    v30 = v12;
    v31 = v13;
    serialize(_:at:)(2, &v29);
    serialize(_:at:)(1, &v29);
    v32 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v33 = v23;
    closure #1 in osLogInternal(_:log:type:)(&v32, (uint64_t)&v29, (uint64_t)&v30, (uint64_t)&v31);
    v32 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v33 = v24;
    closure #1 in osLogInternal(_:log:type:)(&v32, (uint64_t)&v29, (uint64_t)&v30, (uint64_t)&v31);
    v32 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v33 = v25;
    closure #1 in osLogInternal(_:log:type:)(&v32, (uint64_t)&v29, (uint64_t)&v30, (uint64_t)&v31);
    _os_log_impl(&dword_24749F000, v27, v28, "Error getting as needed dosage unit: %@", buf, size);
    destroyStorage<A>(_:count:)(v12, 1, v10);
    destroyStorage<A>(_:count:)(v13, 0, MEMORY[0x24BEE4AD8] + 8);
    MEMORY[0x24957D398](buf, MEMORY[0x24BEE4260]);
    swift_release();
    swift_release();
    swift_release();
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
  }
  v9 = (id)v14[56];
  v7 = v14[49];
  v6 = v14[48];
  v8 = v14[47];

  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v7, v8);
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(_QWORD))(v14[25] + 8))(0);
}

uint64_t SpecificMedicationsPersistor.getAsNeededDosageUnit(for:dosageCount:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;

  v3 = (_QWORD *)*v2;
  v3[25] = *v2;
  v3[55] = a1;
  v3[56] = v1;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t SpecificMedicationsPersistor.getAsNeededStrengthFromHealthApp(for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v10;

  v4[45] = a2;
  v4[44] = a1;
  v4[29] = v4;
  v4[19] = 0;
  v4[20] = 0;
  v4[21] = 0;
  v4[22] = 0;
  v4[30] = 0;
  v4[33] = 0;
  v4[23] = 0;
  v4[24] = 0;
  v4[41] = 0;
  v4[43] = 0;
  v4[27] = 0;
  v4[28] = 0;
  v5 = type metadata accessor for Logger();
  v4[46] = v5;
  v4[47] = *(_QWORD *)(v5 - 8);
  v4[48] = swift_task_alloc();
  v4[49] = swift_task_alloc();
  v4[50] = swift_task_alloc();
  v4[19] = a1;
  v4[20] = a2;
  v4[21] = a3;
  v4[22] = a4;
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v10 + 408) = v6;
  *v6 = *(_QWORD *)(v10 + 232);
  v6[1] = SpecificMedicationsPersistor.getAsNeededStrengthFromHealthApp(for:);
  return SpecificMedicationsPersistor.doUTCQueryForMedications()(a3, a4);
}

uint64_t SpecificMedicationsPersistor.getAsNeededStrengthFromHealthApp(for:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;

  v3 = (_QWORD *)*v2;
  v3[29] = *v2;
  v3[52] = a1;
  v3[53] = v1;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t SpecificMedicationsPersistor.getAsNeededStrengthFromHealthApp(for:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  Swift::String v5;
  char v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint8_t *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint32_t v23;
  os_log_type_t v24;
  NSObject *log;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint8_t *buf;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint32_t size;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  NSObject *oslog;
  os_log_type_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  id v62;
  id v63;
  id v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint8_t *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t (*v74)(uint64_t, uint64_t, uint64_t);
  uint64_t v75;

  v1 = v0[53];
  v2 = v0[52];
  v68 = v0[45];
  v67 = v0[44];
  v0[29] = v0;
  v0[32] = v2;
  swift_bridgeObjectRetain();
  v69 = swift_task_alloc();
  *(_QWORD *)(v69 + 16) = v67;
  *(_QWORD *)(v69 + 24) = v68;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [HKUserTrackedMedication]);
  lazy protocol witness table accessor for type [HKUserTrackedMedication] and conformance [A]();
  result = _ArrayProtocol.filter(_:)();
  v70 = result;
  if (!v1)
  {
    swift_task_dealloc();
    swift_bridgeObjectRelease();
    *(_QWORD *)(v66 + 264) = v70;
    swift_bridgeObjectRetain();
    *(_QWORD *)(v66 + 280) = v70;
    lazy protocol witness table accessor for type [HKUserTrackedMedication] and conformance [A]();
    Collection.first.getter();
    outlined destroy of [HKQuantityType]();
    v65 = *(void **)(v66 + 272);
    if (v65)
    {
      v62 = objc_msgSend(v65, sel_medication);

      v63 = objc_msgSend(v62, sel_displayNameComponents);
      v64 = objc_msgSend(v63, sel_displayStrength);
      if (v64)
      {
        v58 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        v59 = v4;

        v60 = v58;
        v61 = v59;
      }
      else
      {
        v60 = 0;
        v61 = 0;
      }

      v56 = v60;
      v57 = v61;
    }
    else
    {
      v56 = 0;
      v57 = 0;
    }
    if (v57)
    {
      *(_QWORD *)(v66 + 184) = v56;
      *(_QWORD *)(v66 + 192) = v57;
      *(_QWORD *)(v66 + 200) = v56;
      *(_QWORD *)(v66 + 208) = v57;
      v5 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(" ", 1uLL, 1);
      v54 = lazy protocol witness table accessor for type String and conformance String();
      v53 = MEMORY[0x24BEE0D00];
      v52 = default argument 1 of StringProtocol<>.split(separator:maxSplits:omittingEmptySubsequences:)();
      v6 = default argument 2 of StringProtocol<>.split(separator:maxSplits:omittingEmptySubsequences:)();
      v55 = MEMORY[0x24957D3E0](v5._countAndFlagsBits, v5._object, v52, v6 & 1, v53, v54);
      swift_bridgeObjectRelease();
      *(_QWORD *)(v66 + 328) = v55;
      if (MEMORY[0x24957D110]() == 2)
      {
        Array.subscript.getter();
        v51 = Double.init(_:)();
        if ((v7 & 1) != 0)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v48 = 0;
          v49 = 0;
          v50 = 0;
        }
        else
        {
          *(_QWORD *)(v66 + 344) = v51;
          Array.subscript.getter();
          v46 = MEMORY[0x24957D014](*(_QWORD *)(v66 + 48), *(_QWORD *)(v66 + 56), *(_QWORD *)(v66 + 64));
          v47 = v8;
          swift_bridgeObjectRelease();
          *(_QWORD *)(v66 + 216) = v46;
          *(_QWORD *)(v66 + 224) = v47;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v48 = v51;
          v49 = v46;
          v50 = v47;
        }
      }
      else
      {
        v9 = *(_QWORD *)(v66 + 400);
        v34 = *(_QWORD *)(v66 + 376);
        v36 = *(_QWORD *)(v66 + 368);
        v35 = Logger.wellnessIntents.unsafeMutableAddressor();
        swift_beginAccess();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v34 + 16))(v9, v35, v36);
        swift_endAccess();
        swift_bridgeObjectRetain();
        v38 = swift_allocObject();
        *(_QWORD *)(v38 + 16) = v56;
        *(_QWORD *)(v38 + 24) = v57;
        oslog = Logger.logObject.getter();
        v45 = static os_log_type_t.debug.getter();
        *(_QWORD *)(v66 + 336) = 12;
        lazy protocol witness table accessor for type UInt32 and conformance UInt32();
        lazy protocol witness table accessor for type UInt32 and conformance UInt32();
        lazy protocol witness table accessor for type Int and conformance Int();
        UnsignedInteger<>.init<A>(_:)();
        size = *(_DWORD *)(v66 + 440);
        v40 = swift_allocObject();
        *(_BYTE *)(v40 + 16) = 32;
        v41 = swift_allocObject();
        *(_BYTE *)(v41 + 16) = 8;
        v39 = swift_allocObject();
        *(_QWORD *)(v39 + 16) = partial apply for implicit closure #4 in LogQuantityIntentHandler.handle(intent:);
        *(_QWORD *)(v39 + 24) = v38;
        v42 = swift_allocObject();
        *(_QWORD *)(v42 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:);
        *(_QWORD *)(v42 + 24) = v39;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
        _allocateUninitializedArray<A>(_:)();
        v43 = v10;
        swift_retain();
        *v43 = partial apply for closure #1 in OSLogArguments.append(_:);
        v43[1] = v40;
        swift_retain();
        v43[2] = partial apply for closure #1 in OSLogArguments.append(_:);
        v43[3] = v41;
        swift_retain();
        v43[4] = partial apply for closure #1 in OSLogArguments.append(_:);
        v43[5] = v42;
        _finalizeUninitializedArray<A>(_:)();
        swift_bridgeObjectRelease();
        if (os_log_type_enabled(oslog, v45))
        {
          buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
          v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
          v32 = createStorage<A>(capacity:type:)(0);
          v33 = createStorage<A>(capacity:type:)(1);
          v71 = buf;
          v72 = v32;
          v73 = v33;
          serialize(_:at:)(2, &v71);
          serialize(_:at:)(1, &v71);
          v74 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
          v75 = v40;
          closure #1 in osLogInternal(_:log:type:)(&v74, (uint64_t)&v71, (uint64_t)&v72, (uint64_t)&v73);
          v74 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
          v75 = v41;
          closure #1 in osLogInternal(_:log:type:)(&v74, (uint64_t)&v71, (uint64_t)&v72, (uint64_t)&v73);
          v74 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
          v75 = v42;
          closure #1 in osLogInternal(_:log:type:)(&v74, (uint64_t)&v71, (uint64_t)&v72, (uint64_t)&v73);
          _os_log_impl(&dword_24749F000, oslog, v45, "Unexpected displayStrength string format: %s", buf, size);
          destroyStorage<A>(_:count:)(v32, 0, v30);
          destroyStorage<A>(_:count:)(v33, 1, MEMORY[0x24BEE4AD8] + 8);
          MEMORY[0x24957D398](buf, MEMORY[0x24BEE4260]);
          swift_release();
          swift_release();
          swift_release();
        }
        else
        {
          swift_release();
          swift_release();
          swift_release();
        }
        v28 = *(_QWORD *)(v66 + 400);
        v27 = *(_QWORD *)(v66 + 376);
        v29 = *(_QWORD *)(v66 + 368);

        (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v28, v29);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v48 = 0;
        v49 = 0;
        v50 = 0;
      }
    }
    else
    {
      v11 = *(_QWORD *)(v66 + 392);
      v20 = *(_QWORD *)(v66 + 376);
      v22 = *(_QWORD *)(v66 + 368);
      v21 = Logger.wellnessIntents.unsafeMutableAddressor();
      swift_beginAccess();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v20 + 16))(v11, v21, v22);
      swift_endAccess();
      log = Logger.logObject.getter();
      v24 = static os_log_type_t.debug.getter();
      *(_QWORD *)(v66 + 288) = 2;
      lazy protocol witness table accessor for type UInt32 and conformance UInt32();
      lazy protocol witness table accessor for type UInt32 and conformance UInt32();
      lazy protocol witness table accessor for type Int and conformance Int();
      UnsignedInteger<>.init<A>(_:)();
      v23 = *(_DWORD *)(v66 + 436);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
      v26 = _allocateUninitializedArray<A>(_:)();
      if (os_log_type_enabled(log, v24))
      {
        v16 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
        v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
        v17 = createStorage<A>(capacity:type:)(0);
        v18 = createStorage<A>(capacity:type:)(0);
        *(_QWORD *)(v66 + 296) = v16;
        *(_QWORD *)(v66 + 304) = v17;
        *(_QWORD *)(v66 + 312) = v18;
        serialize(_:at:)(0, (_BYTE **)(v66 + 296));
        serialize(_:at:)(0, (_BYTE **)(v66 + 296));
        *(_QWORD *)(v66 + 320) = v26;
        v19 = (_QWORD *)swift_task_alloc();
        v19[2] = v66 + 296;
        v19[3] = v66 + 304;
        v19[4] = v66 + 312;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
        lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
        Sequence.forEach(_:)();
        swift_task_dealloc();
        _os_log_impl(&dword_24749F000, log, v24, "getAsNeededStrengthFromHealthApp: Couldn't find displayStrength in UserTrackedMeds", v16, v23);
        destroyStorage<A>(_:count:)(v17, 0, v15);
        destroyStorage<A>(_:count:)(v18, 0, MEMORY[0x24BEE4AD8] + 8);
        MEMORY[0x24957D398](v16, MEMORY[0x24BEE4260]);
      }
      swift_bridgeObjectRelease();
      v13 = *(_QWORD *)(v66 + 392);
      v12 = *(_QWORD *)(v66 + 376);
      v14 = *(_QWORD *)(v66 + 368);

      (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v13, v14);
      swift_bridgeObjectRelease();
      v48 = 0;
      v49 = 0;
      v50 = 0;
    }
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v66 + 232) + 8))(v48, v49, v50);
  }
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  id v2;
  id v3;
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  uint8_t *buf;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  uint32_t size;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  NSObject *v27;
  os_log_type_t v28;
  uint8_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t (*v32)(uint64_t, uint64_t, uint64_t);
  uint64_t v33;

  v18 = *(id *)(v0 + 424);
  v1 = *(_QWORD *)(v0 + 384);
  v15 = *(_QWORD *)(v0 + 376);
  v17 = *(_QWORD *)(v0 + 368);
  *(_QWORD *)(v0 + 232) = v0;
  v2 = v18;
  *(_QWORD *)(v0 + 240) = v18;
  v16 = Logger.wellnessIntents.unsafeMutableAddressor();
  swift_beginAccess();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 16))(v1, v16, v17);
  swift_endAccess();
  v3 = v18;
  v20 = swift_allocObject();
  *(_QWORD *)(v20 + 16) = v18;
  default argument 2 of OSLogInterpolation.appendInterpolation(_:privacy:attributes:)();
  swift_bridgeObjectRelease();
  v27 = Logger.logObject.getter();
  v28 = static os_log_type_t.error.getter();
  *(_QWORD *)(v0 + 248) = 12;
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  size = *(_DWORD *)(v0 + 432);
  v23 = swift_allocObject();
  *(_BYTE *)(v23 + 16) = 64;
  v24 = swift_allocObject();
  *(_BYTE *)(v24 + 16) = 8;
  v21 = swift_allocObject();
  *(_QWORD *)(v21 + 16) = partial apply for implicit closure #10 in getPreferredUnit(for:store:);
  *(_QWORD *)(v21 + 24) = v20;
  v22 = swift_allocObject();
  *(_QWORD *)(v22 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:attributes:);
  *(_QWORD *)(v22 + 24) = v21;
  v25 = swift_allocObject();
  *(_QWORD *)(v25 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:);
  *(_QWORD *)(v25 + 24) = v22;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
  _allocateUninitializedArray<A>(_:)();
  v26 = v4;
  swift_retain();
  *v26 = partial apply for closure #1 in OSLogArguments.append(_:);
  v26[1] = v23;
  swift_retain();
  v26[2] = partial apply for closure #1 in OSLogArguments.append(_:);
  v26[3] = v24;
  swift_retain();
  v26[4] = partial apply for closure #1 in OSLogArguments.append(_:);
  v26[5] = v25;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(v27, v28))
  {
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    v12 = createStorage<A>(capacity:type:)(1);
    v13 = createStorage<A>(capacity:type:)(0);
    v29 = buf;
    v30 = v12;
    v31 = v13;
    serialize(_:at:)(2, &v29);
    serialize(_:at:)(1, &v29);
    v32 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v33 = v23;
    closure #1 in osLogInternal(_:log:type:)(&v32, (uint64_t)&v29, (uint64_t)&v30, (uint64_t)&v31);
    v32 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v33 = v24;
    closure #1 in osLogInternal(_:log:type:)(&v32, (uint64_t)&v29, (uint64_t)&v30, (uint64_t)&v31);
    v32 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v33 = v25;
    closure #1 in osLogInternal(_:log:type:)(&v32, (uint64_t)&v29, (uint64_t)&v30, (uint64_t)&v31);
    _os_log_impl(&dword_24749F000, v27, v28, "Error doing UTC Query for Medications: %@", buf, size);
    destroyStorage<A>(_:count:)(v12, 1, v10);
    destroyStorage<A>(_:count:)(v13, 0, MEMORY[0x24BEE4AD8] + 8);
    MEMORY[0x24957D398](buf, MEMORY[0x24BEE4260]);
    swift_release();
    swift_release();
    swift_release();
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
  }
  v9 = (id)v14[53];
  v7 = v14[48];
  v6 = v14[47];
  v8 = v14[46];

  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v7, v8);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(_QWORD, _QWORD))(v14[29] + 8))(0, 0);
}

uint64_t SpecificMedicationsPersistor.getAsNeededDosageFromHealthApp(for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4[61] = a4;
  v4[60] = a3;
  v4[59] = a2;
  v4[58] = a1;
  v4[23] = v4;
  v4[17] = 0;
  v4[18] = 0;
  v4[19] = 0;
  v4[20] = 0;
  v4[21] = 0;
  v4[22] = 0;
  v4[29] = 0;
  v4[30] = 0;
  v4[43] = 0;
  v4[51] = 0;
  v4[52] = 0;
  v5 = type metadata accessor for Logger();
  v4[62] = v5;
  v4[63] = *(_QWORD *)(v5 - 8);
  v4[64] = swift_task_alloc();
  v4[65] = swift_task_alloc();
  v4[66] = swift_task_alloc();
  v4[67] = swift_task_alloc();
  v4[68] = swift_task_alloc();
  v6 = type metadata accessor for DateInterval();
  v4[69] = v6;
  v4[70] = *(_QWORD *)(v6 - 8);
  v4[71] = swift_task_alloc();
  v7 = type metadata accessor for Calendar();
  v4[72] = v7;
  v4[73] = *(_QWORD *)(v7 - 8);
  v4[74] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  v4[75] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TimeZone?);
  v4[76] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Calendar?);
  v4[77] = swift_task_alloc();
  v8 = type metadata accessor for DateComponents();
  v4[78] = v8;
  v4[79] = *(_QWORD *)(v8 - 8);
  v4[80] = swift_task_alloc();
  v4[81] = swift_task_alloc();
  v9 = type metadata accessor for Date();
  v4[82] = v9;
  v4[83] = *(_QWORD *)(v9 - 8);
  v4[84] = swift_task_alloc();
  v4[85] = swift_task_alloc();
  v4[86] = swift_task_alloc();
  v4[87] = swift_task_alloc();
  v4[17] = a1;
  v4[18] = a2;
  v4[19] = a3;
  v4[20] = a4;
  return swift_task_switch();
}

uint64_t SpecificMedicationsPersistor.getAsNeededDosageFromHealthApp(for:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t);
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE **v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint8_t *buf;
  uint64_t v67;
  uint64_t v68;
  int v69;
  _BYTE **v70;
  uint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint32_t size;
  int v83;
  os_log_t oslog;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  void (*v90)(uint64_t, uint64_t, uint64_t);
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  id v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t *v100;
  int v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  unsigned int v113;
  uint64_t v114;
  uint64_t v115;
  const char *v116;
  const char *v117;
  const char *v118;
  uint64_t v119;

  v116 = "Fatal error";
  v117 = "Unexpectedly found nil while unwrapping an Optional value";
  v118 = "SiriWellnessIntents/LogSpecificMedicationsIntentHandler.swift";
  v119 = *(_QWORD *)(v0 + 472);
  *(_QWORD *)(v0 + 184) = v0;
  swift_bridgeObjectRetain();
  if (v119)
  {
    v1 = v115;
    v96 = *(_QWORD *)(v115 + 472);
    v2 = v96;
    v103 = *(_QWORD *)(v115 + 696);
    v111 = *(_QWORD *)(v115 + 664);
    v114 = *(_QWORD *)(v115 + 656);
    v102 = *(_QWORD *)(v115 + 648);
    v105 = *(_QWORD *)(v115 + 640);
    v104 = *(_QWORD *)(v115 + 632);
    v106 = *(_QWORD *)(v115 + 624);
    v97 = *(_QWORD *)(v115 + 616);
    v98 = *(_QWORD *)(v115 + 608);
    v112 = *(_QWORD *)(v115 + 600);
    v108 = *(_QWORD *)(v115 + 592);
    v107 = *(_QWORD *)(v115 + 584);
    v109 = *(_QWORD *)(v115 + 576);
    v3 = *(_QWORD *)(v115 + 464);
    v110 = v115 + 168;
    *(_QWORD *)(v115 + 168) = v3;
    *(_QWORD *)(v1 + 176) = v2;
    Date.init()();
    v4 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v107 + 56);
    v113 = 1;
    v4(v97, 1, 1, v109);
    v99 = 0;
    v5 = type metadata accessor for TimeZone();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v98, 1);
    v100 = &v21;
    v21 = 0;
    v101 = 1;
    LOBYTE(v22) = 1;
    v23 = 0;
    v24 = 1;
    v25 = 0;
    v26 = 1;
    v27 = 0;
    v28 = 1;
    v29 = 0;
    v30 = 1;
    v31 = 0;
    v32 = 1;
    v33 = 0;
    v34 = 1;
    v35 = 0;
    v36 = 1;
    v37 = 0;
    v38 = 1;
    v39 = 0;
    v40 = 1;
    v41 = 0;
    v42 = 1;
    DateComponents.init(calendar:timeZone:era:year:month:day:hour:minute:second:nanosecond:weekday:weekdayOrdinal:quarter:weekOfMonth:weekOfYear:yearForWeekOfYear:)();
    DateComponents.day.setter();
    static Calendar.current.getter();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v104 + 16))(v105, v102, v106);
    default argument 2 of Calendar.date(byAdding:to:wrappingComponents:)();
    Calendar.date(byAdding:to:wrappingComponents:)();
    v6 = v105;
    v7 = v106;
    v8 = *(void (**)(uint64_t, uint64_t))(v104 + 8);
    *(_QWORD *)(v115 + 704) = v8;
    v8(v6, v7);
    (*(void (**)(uint64_t, uint64_t))(v107 + 8))(v108, v109);
    if ((*(unsigned int (**)(uint64_t, _QWORD, uint64_t))(v111 + 48))(v112, v113, v114) == 1)
    {
      LOBYTE(v21) = 2;
      v22 = 966;
      LODWORD(v23) = 0;
      return _assertionFailure(_:_:file:line:flags:)();
    }
    else
    {
      v88 = *(_QWORD *)(v115 + 696);
      v87 = *(_QWORD *)(v115 + 688);
      v93 = *(_QWORD *)(v115 + 680);
      v92 = *(_QWORD *)(v115 + 672);
      v86 = *(_QWORD *)(v115 + 664);
      v89 = *(_QWORD *)(v115 + 656);
      v91 = *(_QWORD *)(v115 + 568);
      v94 = *(_QWORD *)(v115 + 464);
      (*(void (**)(void))(v86 + 32))();
      v90 = *(void (**)(uint64_t, uint64_t, uint64_t))(v86 + 16);
      v90(v93, v87, v89);
      v90(v92, v88, v89);
      DateInterval.init(start:end:)();
      type metadata accessor for HKMedicationIdentifier();
      swift_bridgeObjectRetain();
      v95 = HKMedicationIdentifier.__allocating_init(rawIdentifier:)();
      *(_QWORD *)(v115 + 712) = v95;
      v10 = (_QWORD *)swift_task_alloc();
      v11 = (_QWORD *)v115;
      v12 = (uint64_t)v95;
      *(_QWORD *)(v115 + 720) = v10;
      *v10 = v11[23];
      v10[1] = SpecificMedicationsPersistor.getAsNeededDosageFromHealthApp(for:);
      return SpecificMedicationsPersistor.getDoseEvents(for:medicationIdentifier:)(v11[71], v12, v11[60], v11[61]);
    }
  }
  else
  {
    v13 = *(_QWORD *)(v115 + 520);
    v75 = *(_QWORD *)(v115 + 504);
    v77 = *(_QWORD *)(v115 + 496);
    v76 = Logger.wellnessIntents.unsafeMutableAddressor();
    v78 = v115 + 16;
    swift_beginAccess();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v75 + 16))(v13, v76, v77);
    swift_endAccess();
    oslog = (os_log_t)Logger.logObject.getter();
    v83 = static os_log_type_t.debug.getter();
    v81 = v115 + 192;
    *(_QWORD *)(v115 + 192) = 2;
    v79 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    v80 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    lazy protocol witness table accessor for type Int and conformance Int();
    UnsignedInteger<>.init<A>(_:)();
    size = *(_DWORD *)(v115 + 744);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
    v85 = _allocateUninitializedArray<A>(_:)();
    if (os_log_type_enabled(oslog, (os_log_type_t)v83))
    {
      buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      v64 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      v65 = 0;
      v67 = createStorage<A>(capacity:type:)(0);
      v14 = createStorage<A>(capacity:type:)(0);
      v15 = v67;
      v16 = v115;
      v68 = v14;
      v17 = (_BYTE **)(v115 + 200);
      v70 = (_BYTE **)(v115 + 200);
      *(_QWORD *)(v115 + 200) = buf;
      v71 = v16 + 208;
      *(_QWORD *)(v16 + 208) = v15;
      v72 = v16 + 216;
      *(_QWORD *)(v16 + 216) = v14;
      v69 = 0;
      serialize(_:at:)(0, v17);
      serialize(_:at:)(0, v70);
      *(_QWORD *)(v115 + 224) = v85;
      v18 = (_QWORD *)swift_task_alloc();
      v19 = v71;
      v20 = v72;
      v73 = v18;
      v18[2] = v70;
      v18[3] = v19;
      v18[4] = v20;
      v74 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
      lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
      Sequence.forEach(_:)();
      swift_task_dealloc();
      _os_log_impl(&dword_24749F000, oslog, (os_log_type_t)v83, "medicationID passed into getAsNeededDosageFromHealthApp was nil, returning 1.0", buf, size);
      v63 = 0;
      destroyStorage<A>(_:count:)(v67, 0, v64);
      destroyStorage<A>(_:count:)(v68, 0, MEMORY[0x24BEE4AD8] + 8);
      MEMORY[0x24957D398](buf, MEMORY[0x24BEE4260]);
    }
    swift_bridgeObjectRelease();
    v44 = *(_QWORD *)(v115 + 520);
    v43 = *(_QWORD *)(v115 + 504);
    v45 = *(_QWORD *)(v115 + 496);

    (*(void (**)(uint64_t, uint64_t))(v43 + 8))(v44, v45);
    v61 = v115 + 136;
    v62 = v115 + 152;
    v46 = *(_QWORD *)(v115 + 688);
    v47 = *(_QWORD *)(v115 + 680);
    v48 = *(_QWORD *)(v115 + 672);
    v49 = *(_QWORD *)(v115 + 648);
    v50 = *(_QWORD *)(v115 + 640);
    v51 = *(_QWORD *)(v115 + 616);
    v52 = *(_QWORD *)(v115 + 608);
    v53 = *(_QWORD *)(v115 + 600);
    v54 = *(_QWORD *)(v115 + 592);
    v55 = *(_QWORD *)(v115 + 568);
    v56 = *(_QWORD *)(v115 + 544);
    v57 = *(_QWORD *)(v115 + 536);
    v58 = *(_QWORD *)(v115 + 528);
    v59 = *(_QWORD *)(v115 + 520);
    v60 = *(_QWORD *)(v115 + 512);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(double))(*(_QWORD *)(v115 + 184) + 8))(1.0);
  }
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  double v4;
  uint64_t v5;
  double v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  void (*v23)(uint64_t, uint64_t);
  uint64_t v24;
  uint8_t *v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint32_t v32;
  os_log_type_t v33;
  NSObject *log;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void (*v46)(uint64_t, uint64_t);
  uint64_t v47;
  uint64_t v48;
  void (*v49)(uint64_t, uint64_t);
  uint64_t v50;
  uint8_t *v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint32_t size;
  os_log_type_t v59;
  NSObject *oslog;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  void (*v69)(uint64_t, uint64_t);
  uint64_t v70;
  uint64_t v71;
  void (*v72)(uint64_t, uint64_t);
  double v73;
  id v74;
  void *v75;
  uint64_t v76;
  id v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  void (*v88)(uint64_t, uint64_t);
  uint64_t v89;
  uint64_t v90;
  void (*v91)(uint64_t, uint64_t);
  double v92;
  double v93;
  uint64_t v94;
  uint8_t *buf;
  uint64_t v96;
  uint64_t v97;
  _QWORD *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint32_t v102;
  os_log_type_t v103;
  NSObject *v104;
  uint64_t v105;
  id v106;
  void *v107;
  uint64_t v108;
  void *v109;
  uint64_t v110;
  uint64_t v111;
  char v112;

  v111 = v0[91];
  v0[23] = v0;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v0[29] = v111;
  swift_bridgeObjectRetain();
  v0[32] = v111;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [HKMedicationExposableDoseEvent]);
  lazy protocol witness table accessor for type [HKMedicationExposableDoseEvent] and conformance [A]();
  v112 = Collection.isEmpty.getter();
  outlined destroy of [HKQuantityType]();
  swift_bridgeObjectRelease();
  if ((v112 & 1) != 0)
  {
    v8 = *(_QWORD *)(v110 + 528);
    v29 = *(_QWORD *)(v110 + 504);
    v31 = *(_QWORD *)(v110 + 496);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v30 = Logger.wellnessIntents.unsafeMutableAddressor();
    swift_beginAccess();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v29 + 16))(v8, v30, v31);
    swift_endAccess();
    log = Logger.logObject.getter();
    v33 = static os_log_type_t.debug.getter();
    *(_QWORD *)(v110 + 264) = 2;
    lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    lazy protocol witness table accessor for type Int and conformance Int();
    UnsignedInteger<>.init<A>(_:)();
    v32 = *(_DWORD *)(v110 + 752);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
    v35 = _allocateUninitializedArray<A>(_:)();
    if (os_log_type_enabled(log, v33))
    {
      v9 = *(_QWORD *)(v110 + 736);
      v25 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      v26 = createStorage<A>(capacity:type:)(0);
      v27 = createStorage<A>(capacity:type:)(0);
      *(_QWORD *)(v110 + 272) = v25;
      *(_QWORD *)(v110 + 280) = v26;
      *(_QWORD *)(v110 + 288) = v27;
      serialize(_:at:)(0, (_BYTE **)(v110 + 272));
      serialize(_:at:)(0, (_BYTE **)(v110 + 272));
      *(_QWORD *)(v110 + 296) = v35;
      v28 = (_QWORD *)swift_task_alloc();
      v28[2] = v110 + 272;
      v28[3] = v110 + 280;
      v28[4] = v110 + 288;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
      lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
      result = Sequence.forEach(_:)();
      if (v9)
        return result;
      swift_task_dealloc();
      _os_log_impl(&dword_24749F000, log, v33, "No previously logged As Needed dose events in health app. Falling back to dosage == 1.", v25, v32);
      destroyStorage<A>(_:count:)(v26, 0, v24);
      destroyStorage<A>(_:count:)(v27, 0, MEMORY[0x24BEE4AD8] + 8);
      MEMORY[0x24957D398](v25, MEMORY[0x24BEE4260]);
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    v20 = *(void (**)(uint64_t, uint64_t))(v110 + 704);
    v21 = *(_QWORD *)(v110 + 696);
    v17 = *(_QWORD *)(v110 + 688);
    v16 = *(_QWORD *)(v110 + 664);
    v22 = *(_QWORD *)(v110 + 656);
    v18 = *(_QWORD *)(v110 + 648);
    v19 = *(_QWORD *)(v110 + 624);
    v15 = *(_QWORD *)(v110 + 568);
    v13 = *(_QWORD *)(v110 + 560);
    v14 = *(_QWORD *)(v110 + 552);
    v11 = *(_QWORD *)(v110 + 528);
    v10 = *(_QWORD *)(v110 + 504);
    v12 = *(_QWORD *)(v110 + 496);

    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v11, v12);
    outlined destroy of [HKQuantityType]();
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v15, v14);
    v23 = *(void (**)(uint64_t, uint64_t))(v16 + 8);
    v23(v17, v22);
    v20(v18, v19);
    v23(v21, v22);
    swift_bridgeObjectRelease();
    v93 = 1.0;
    goto LABEL_27;
  }
  v108 = *(_QWORD *)(v110 + 728);
  swift_bridgeObjectRetain();
  *(_QWORD *)(v110 + 312) = v108;
  Collection.first.getter();
  outlined destroy of [HKQuantityType]();
  v109 = *(void **)(v110 + 304);
  swift_bridgeObjectRelease();
  if (v109)
  {
    v106 = objc_msgSend(v109, sel_scheduledDoseQuantity);

    v107 = v106;
  }
  else
  {
    v107 = 0;
  }
  if (!v107)
  {
    v5 = *(_QWORD *)(v110 + 736);
    *(_QWORD *)(v110 + 328) = *(_QWORD *)(v110 + 728);
    lazy protocol witness table accessor for type [HKMedicationExposableDoseEvent] and conformance [A]();
    result = Sequence.sorted(by:)();
    if (v5)
      return result;
    outlined destroy of [HKQuantityType]();
    *(_QWORD *)(v110 + 336) = result;
    lazy protocol witness table accessor for type [HKMedicationExposableDoseEvent] and conformance [A]();
    BidirectionalCollection.reversed()();
    v76 = *(_QWORD *)(v110 + 320);
    *(_QWORD *)(v110 + 344) = v76;
    swift_bridgeObjectRetain();
    *(_QWORD *)(v110 + 360) = v76;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ReversedCollection<[HKMedicationExposableDoseEvent]>);
    lazy protocol witness table accessor for type ReversedCollection<[HKMedicationExposableDoseEvent]> and conformance ReversedCollection<A>();
    Collection.first.getter();
    outlined destroy of [HKQuantityType]();
    v77 = *(id *)(v110 + 352);
    if (v77)
    {
      v74 = objc_msgSend(v77, sel_doseQuantity);

      v75 = v74;
    }
    else
    {
      v75 = 0;
    }
    if (v75)
    {
      v69 = *(void (**)(uint64_t, uint64_t))(v110 + 704);
      v70 = *(_QWORD *)(v110 + 696);
      v66 = *(_QWORD *)(v110 + 688);
      v65 = *(_QWORD *)(v110 + 664);
      v71 = *(_QWORD *)(v110 + 656);
      v67 = *(_QWORD *)(v110 + 648);
      v68 = *(_QWORD *)(v110 + 624);
      v64 = *(_QWORD *)(v110 + 568);
      v62 = *(_QWORD *)(v110 + 560);
      v63 = *(_QWORD *)(v110 + 552);
      *(_QWORD *)(v110 + 408) = v75;
      objc_msgSend(v75, sel_doubleValue);
      v73 = v6;

      swift_bridgeObjectRelease();
      outlined destroy of [HKQuantityType]();
      (*(void (**)(uint64_t, uint64_t))(v62 + 8))(v64, v63);
      v72 = *(void (**)(uint64_t, uint64_t))(v65 + 8);
      v72(v66, v71);
      v69(v67, v68);
      v72(v70, v71);
      swift_bridgeObjectRelease();
      v93 = v73;
    }
    else
    {
      v7 = *(_QWORD *)(v110 + 536);
      v55 = *(_QWORD *)(v110 + 504);
      v57 = *(_QWORD *)(v110 + 496);
      v56 = Logger.wellnessIntents.unsafeMutableAddressor();
      swift_beginAccess();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v55 + 16))(v7, v56, v57);
      swift_endAccess();
      oslog = Logger.logObject.getter();
      v59 = static os_log_type_t.debug.getter();
      *(_QWORD *)(v110 + 368) = 2;
      lazy protocol witness table accessor for type UInt32 and conformance UInt32();
      lazy protocol witness table accessor for type UInt32 and conformance UInt32();
      lazy protocol witness table accessor for type Int and conformance Int();
      UnsignedInteger<>.init<A>(_:)();
      size = *(_DWORD *)(v110 + 756);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
      v61 = _allocateUninitializedArray<A>(_:)();
      if (os_log_type_enabled(oslog, v59))
      {
        v51 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
        v50 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
        v52 = createStorage<A>(capacity:type:)(0);
        v53 = createStorage<A>(capacity:type:)(0);
        *(_QWORD *)(v110 + 376) = v51;
        *(_QWORD *)(v110 + 384) = v52;
        *(_QWORD *)(v110 + 392) = v53;
        serialize(_:at:)(0, (_BYTE **)(v110 + 376));
        serialize(_:at:)(0, (_BYTE **)(v110 + 376));
        *(_QWORD *)(v110 + 400) = v61;
        v54 = (_QWORD *)swift_task_alloc();
        v54[2] = v110 + 376;
        v54[3] = v110 + 384;
        v54[4] = v110 + 392;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
        lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
        Sequence.forEach(_:)();
        swift_task_dealloc();
        _os_log_impl(&dword_24749F000, oslog, v59, "No previously logged As Needed dose events in health app. Falling back to dosage == 1.", v51, size);
        destroyStorage<A>(_:count:)(v52, 0, v50);
        destroyStorage<A>(_:count:)(v53, 0, MEMORY[0x24BEE4AD8] + 8);
        MEMORY[0x24957D398](v51, MEMORY[0x24BEE4260]);
      }
      swift_bridgeObjectRelease();
      v46 = *(void (**)(uint64_t, uint64_t))(v110 + 704);
      v47 = *(_QWORD *)(v110 + 696);
      v43 = *(_QWORD *)(v110 + 688);
      v42 = *(_QWORD *)(v110 + 664);
      v48 = *(_QWORD *)(v110 + 656);
      v44 = *(_QWORD *)(v110 + 648);
      v45 = *(_QWORD *)(v110 + 624);
      v41 = *(_QWORD *)(v110 + 568);
      v39 = *(_QWORD *)(v110 + 560);
      v40 = *(_QWORD *)(v110 + 552);
      v37 = *(_QWORD *)(v110 + 536);
      v36 = *(_QWORD *)(v110 + 504);
      v38 = *(_QWORD *)(v110 + 496);

      (*(void (**)(uint64_t, uint64_t))(v36 + 8))(v37, v38);
      swift_bridgeObjectRelease();
      outlined destroy of [HKQuantityType]();
      (*(void (**)(uint64_t, uint64_t))(v39 + 8))(v41, v40);
      v49 = *(void (**)(uint64_t, uint64_t))(v42 + 8);
      v49(v43, v48);
      v46(v44, v45);
      v49(v47, v48);
      swift_bridgeObjectRelease();
      v93 = 1.0;
    }
    goto LABEL_27;
  }
  v1 = *(_QWORD *)(v110 + 544);
  v99 = *(_QWORD *)(v110 + 504);
  v101 = *(_QWORD *)(v110 + 496);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v110 + 416) = v107;
  v100 = Logger.wellnessIntents.unsafeMutableAddressor();
  swift_beginAccess();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v99 + 16))(v1, v100, v101);
  swift_endAccess();
  v104 = Logger.logObject.getter();
  v103 = static os_log_type_t.debug.getter();
  *(_QWORD *)(v110 + 424) = 2;
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  v102 = *(_DWORD *)(v110 + 760);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
  v105 = _allocateUninitializedArray<A>(_:)();
  if (!os_log_type_enabled(v104, v103))
  {
    swift_bridgeObjectRelease();
    goto LABEL_10;
  }
  v2 = *(_QWORD *)(v110 + 736);
  buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
  v94 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
  v96 = createStorage<A>(capacity:type:)(0);
  v97 = createStorage<A>(capacity:type:)(0);
  *(_QWORD *)(v110 + 432) = buf;
  *(_QWORD *)(v110 + 440) = v96;
  *(_QWORD *)(v110 + 448) = v97;
  serialize(_:at:)(0, (_BYTE **)(v110 + 432));
  serialize(_:at:)(0, (_BYTE **)(v110 + 432));
  *(_QWORD *)(v110 + 456) = v105;
  v98 = (_QWORD *)swift_task_alloc();
  v98[2] = v110 + 432;
  v98[3] = v110 + 440;
  v98[4] = v110 + 448;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
  lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
  result = Sequence.forEach(_:)();
  if (!v2)
  {
    swift_task_dealloc();
    _os_log_impl(&dword_24749F000, v104, v103, "This is a scheduled med. Whether being taken per schedule or As Needed, return the scheduledDoseQuantity.", buf, v102);
    destroyStorage<A>(_:count:)(v96, 0, v94);
    destroyStorage<A>(_:count:)(v97, 0, MEMORY[0x24BEE4AD8] + 8);
    MEMORY[0x24957D398](buf, MEMORY[0x24BEE4260]);
    swift_bridgeObjectRelease();
LABEL_10:
    v88 = *(void (**)(uint64_t, uint64_t))(v110 + 704);
    v89 = *(_QWORD *)(v110 + 696);
    v85 = *(_QWORD *)(v110 + 688);
    v84 = *(_QWORD *)(v110 + 664);
    v90 = *(_QWORD *)(v110 + 656);
    v86 = *(_QWORD *)(v110 + 648);
    v87 = *(_QWORD *)(v110 + 624);
    v83 = *(_QWORD *)(v110 + 568);
    v81 = *(_QWORD *)(v110 + 560);
    v82 = *(_QWORD *)(v110 + 552);
    v79 = *(_QWORD *)(v110 + 544);
    v78 = *(_QWORD *)(v110 + 504);
    v80 = *(_QWORD *)(v110 + 496);

    (*(void (**)(uint64_t, uint64_t))(v78 + 8))(v79, v80);
    objc_msgSend(v107, sel_doubleValue);
    v92 = v4;

    outlined destroy of [HKQuantityType]();
    (*(void (**)(uint64_t, uint64_t))(v81 + 8))(v83, v82);
    v91 = *(void (**)(uint64_t, uint64_t))(v84 + 8);
    v91(v85, v90);
    v88(v86, v87);
    v91(v89, v90);
    swift_bridgeObjectRelease();
    v93 = v92;
LABEL_27:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(double))(*(_QWORD *)(v110 + 184) + 8))(v93);
  }
  return result;
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  id v3;
  id v4;
  _QWORD *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  void (*v21)(uint64_t, uint64_t);
  uint64_t v22;
  uint8_t *buf;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint32_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  NSObject *v39;
  os_log_type_t v40;
  uint8_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t (*v44)(uint64_t, uint64_t, uint64_t);
  uint64_t v45;

  v30 = *(void **)(v0 + 736);
  v1 = *(void **)(v0 + 712);
  v2 = *(_QWORD *)(v0 + 512);
  v27 = *(_QWORD *)(v0 + 504);
  v29 = *(_QWORD *)(v0 + 496);
  *(_QWORD *)(v0 + 184) = v0;

  v3 = v30;
  *(_QWORD *)(v0 + 240) = v30;
  v28 = Logger.wellnessIntents.unsafeMutableAddressor();
  swift_beginAccess();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v27 + 16))(v2, v28, v29);
  swift_endAccess();
  v4 = v30;
  v32 = swift_allocObject();
  *(_QWORD *)(v32 + 16) = v30;
  default argument 2 of OSLogInterpolation.appendInterpolation(_:privacy:attributes:)();
  swift_bridgeObjectRelease();
  v39 = Logger.logObject.getter();
  v40 = static os_log_type_t.error.getter();
  *(_QWORD *)(v0 + 248) = 12;
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  v31 = *(_DWORD *)(v0 + 748);
  v35 = swift_allocObject();
  *(_BYTE *)(v35 + 16) = 64;
  v36 = swift_allocObject();
  *(_BYTE *)(v36 + 16) = 8;
  v33 = swift_allocObject();
  *(_QWORD *)(v33 + 16) = partial apply for implicit closure #10 in getPreferredUnit(for:store:);
  *(_QWORD *)(v33 + 24) = v32;
  v34 = swift_allocObject();
  *(_QWORD *)(v34 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:attributes:);
  *(_QWORD *)(v34 + 24) = v33;
  v37 = swift_allocObject();
  *(_QWORD *)(v37 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:);
  *(_QWORD *)(v37 + 24) = v34;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
  _allocateUninitializedArray<A>(_:)();
  v38 = v5;
  swift_retain();
  *v38 = partial apply for closure #1 in OSLogArguments.append(_:);
  v38[1] = v35;
  swift_retain();
  v38[2] = partial apply for closure #1 in OSLogArguments.append(_:);
  v38[3] = v36;
  swift_retain();
  v38[4] = partial apply for closure #1 in OSLogArguments.append(_:);
  v38[5] = v37;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(v39, v40))
  {
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    v24 = createStorage<A>(capacity:type:)(1);
    v25 = createStorage<A>(capacity:type:)(0);
    v41 = buf;
    v42 = v24;
    v43 = v25;
    serialize(_:at:)(2, &v41);
    serialize(_:at:)(1, &v41);
    v44 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v45 = v35;
    closure #1 in osLogInternal(_:log:type:)(&v44, (uint64_t)&v41, (uint64_t)&v42, (uint64_t)&v43);
    v44 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v45 = v36;
    closure #1 in osLogInternal(_:log:type:)(&v44, (uint64_t)&v41, (uint64_t)&v42, (uint64_t)&v43);
    v44 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v45 = v37;
    closure #1 in osLogInternal(_:log:type:)(&v44, (uint64_t)&v41, (uint64_t)&v42, (uint64_t)&v43);
    _os_log_impl(&dword_24749F000, v39, v40, "Failed to write doseEvents: %@. Falling back to dosage == 1.", buf, v31);
    destroyStorage<A>(_:count:)(v24, 1, v22);
    destroyStorage<A>(_:count:)(v25, 0, MEMORY[0x24BEE4AD8] + 8);
    MEMORY[0x24957D398](buf, MEMORY[0x24BEE4260]);
    swift_release();
    swift_release();
    swift_release();
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
  }
  v10 = (id)v26[92];
  v18 = (void (*)(uint64_t, uint64_t))v26[88];
  v19 = v26[87];
  v15 = v26[86];
  v14 = v26[83];
  v20 = v26[82];
  v16 = v26[81];
  v17 = v26[78];
  v12 = v26[71];
  v11 = v26[70];
  v13 = v26[69];
  v8 = v26[64];
  v7 = v26[63];
  v9 = v26[62];

  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v8, v9);
  (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v12, v13);
  v21 = *(void (**)(uint64_t, uint64_t))(v14 + 8);
  v21(v15, v20);
  v18(v16, v17);
  v21(v19, v20);
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(double))(v26[23] + 8))(1.0);
}

uint64_t SpecificMedicationsPersistor.getAsNeededDosageFromHealthApp(for:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v5;

  v3 = (_QWORD *)*v2;
  v3[23] = *v2;
  v3 += 23;
  v5 = v3 - 21;
  v3[68] = a1;
  v3[69] = v1;
  swift_task_dealloc();
  if (!v1)

  return swift_task_switch();
}

uint64_t implicit closure #2 in SpecificMedicationsPersistor.buildMatchedMedName(from:shouldIncludeAsNeededParams:)(void *a1)
{
  id v2;

  v2 = objc_msgSend(a1, sel_scheduleID);
  if (v2)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();

  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
  lazy protocol witness table accessor for type String? and conformance A?();
  return String.init<A>(describing:)();
}

uint64_t implicit closure #4 in SpecificMedicationsPersistor.buildMatchedMedName(from:shouldIncludeAsNeededParams:)(void *a1)
{
  id v2;

  v2 = objc_msgSend(a1, sel_name);
  if (v2)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();

  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
  lazy protocol witness table accessor for type String? and conformance A?();
  return String.init<A>(describing:)();
}

uint64_t implicit closure #5 in SpecificMedicationsPersistor.buildMatchedMedName(from:shouldIncludeAsNeededParams:)(void *a1)
{
  id v2;

  v2 = objc_msgSend(a1, sel_schedule);
  if (v2)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();

  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
  lazy protocol witness table accessor for type String? and conformance A?();
  return String.init<A>(describing:)();
}

uint64_t implicit closure #6 in SpecificMedicationsPersistor.buildMatchedMedName(from:shouldIncludeAsNeededParams:)(void *a1)
{
  id v2;

  v2 = objc_msgSend(a1, sel_loggedTime);
  if (v2)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();

  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
  lazy protocol witness table accessor for type String? and conformance A?();
  return String.init<A>(describing:)();
}

uint64_t implicit closure #10 in SpecificMedicationsPersistor.buildMatchedMedName(from:shouldIncludeAsNeededParams:)(void *a1)
{
  objc_msgSend(a1, sel_strength);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSNumber?);
  lazy protocol witness table accessor for type NSNumber? and conformance A?();
  return String.init<A>(describing:)();
}

uint64_t implicit closure #11 in SpecificMedicationsPersistor.buildMatchedMedName(from:shouldIncludeAsNeededParams:)(void *a1)
{
  id v2;

  v2 = objc_msgSend(a1, sel_strengthUnit);
  if (v2)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();

  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
  lazy protocol witness table accessor for type String? and conformance A?();
  return String.init<A>(describing:)();
}

uint64_t implicit closure #12 in SpecificMedicationsPersistor.buildMatchedMedName(from:shouldIncludeAsNeededParams:)(void *a1)
{
  id v2;

  v2 = objc_msgSend(a1, sel_completionStatus);
  if (v2)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();

  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
  lazy protocol witness table accessor for type String? and conformance A?();
  return String.init<A>(describing:)();
}

uint64_t implicit closure #12 in SpecificMedicationsPersistor.updateDosageForDoseEvent(doseEvent:inputDosage:inputDosageUnit:)()
{
  return String.init<A>(describing:)();
}

uint64_t protocol witness for SpecificMedicationsPersisting.isLoggingAuthorized() in conformance SpecificMedicationsPersistor()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v4;
  void *v5;

  *(_QWORD *)(v1 + 16) = v1;
  v5 = *(void **)v0;
  v4 = *(_QWORD *)(v0 + 8);
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 24) = v2;
  *v2 = *(_QWORD *)(v1 + 16);
  v2[1] = protocol witness for QuantityPersisting.isLoggingAuthorized(for:) in conformance HealthKitPersistor;
  return SpecificMedicationsPersistor.isLoggingAuthorized()(v5, v4);
}

uint64_t protocol witness for SpecificMedicationsPersisting.save(startTime:endTime:hasMeridiem:medicationIDs:medStatusTaken:dosage:dosageUnit:) in conformance SpecificMedicationsPersistor(uint64_t a1, uint64_t a2, char a3, uint64_t a4, char a5, uint64_t a6, char a7, uint64_t a8)
{
  uint64_t v8;
  _QWORD *v9;

  *(_QWORD *)(v8 + 16) = v8;
  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v8 + 24) = v9;
  *v9 = *(_QWORD *)(v8 + 16);
  v9[1] = protocol witness for QuantityPersisting.save(quantityIdentifier:value:units:) in conformance HealthKitPersistor;
  return SpecificMedicationsPersistor.save(startTime:endTime:hasMeridiem:medicationIDs:medStatusTaken:dosage:dosageUnit:)(a1, a2, a3 & 1, a4, a5 & 1, a6, a7 & 1, a8);
}

uint64_t protocol witness for SpecificMedicationsPersisting.saveWithID(scheduleID:medicationIDs:medStatus:dosage:dosageUnit:confirmedAsNeeded:confirmedAsScheduled:) in conformance SpecificMedicationsPersistor(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, char a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  _QWORD *v9;

  *(_QWORD *)(v8 + 16) = v8;
  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v8 + 24) = v9;
  *v9 = *(_QWORD *)(v8 + 16);
  v9[1] = protocol witness for QuantityPersisting.save(quantityIdentifier:value:units:) in conformance HealthKitPersistor;
  return SpecificMedicationsPersistor.saveWithID(scheduleID:medicationIDs:medStatus:dosage:dosageUnit:confirmedAsNeeded:confirmedAsScheduled:)(a1, a2, a3, a4 & 1, a5, a6 & 1, a7, a8);
}

uint64_t protocol witness for SpecificMedicationsPersisting.saveAsNeededWithStrength(medicationID:medStatusTaken:dosage:dosageUnit:strength:strengthUnit:) in conformance SpecificMedicationsPersistor(uint64_t a1, uint64_t a2, char a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  _QWORD *v9;

  *(_QWORD *)(v8 + 16) = v8;
  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v8 + 24) = v9;
  *v9 = *(_QWORD *)(v8 + 16);
  v9[1] = protocol witness for QuantityPersisting.save(quantityIdentifier:value:units:) in conformance HealthKitPersistor;
  return SpecificMedicationsPersistor.saveAsNeededWithStrength(medicationID:medStatusTaken:dosage:dosageUnit:strength:strengthUnit:)(a1, a2, a3 & 1, a4, a5 & 1, a6, a7, a8);
}

uint64_t protocol witness for SpecificMedicationsPersisting.displayNameFor(identifier:) in conformance SpecificMedicationsPersistor(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)(v3 + 16) = v3;
  v7 = *v2;
  v8 = v2[1];
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 24) = v4;
  *v4 = *(_QWORD *)(v3 + 16);
  v4[1] = protocol witness for SpecificMedicationsPersisting.displayNameFor(identifier:) in conformance SpecificMedicationsPersistor;
  return SpecificMedicationsPersistor.displayNameFor(identifier:)(a1, a2, v7, v8);
}

{
  uint64_t *v2;
  uint64_t v4;

  v4 = *v2;
  *(_QWORD *)(*v2 + 16) = *v2;
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 + 16) + 8))(a1, a2);
}

uint64_t protocol witness for SpecificMedicationsPersisting.sampleScheduleIDFor(dateInterval:) in conformance SpecificMedicationsPersistor(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v5 = v2;
  *(_QWORD *)(v2 + 16) = v2;
  v6 = *v1;
  v7 = v1[1];
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v5 + 24) = v3;
  *v3 = *(_QWORD *)(v5 + 16);
  v3[1] = protocol witness for SpecificMedicationsPersisting.displayNameFor(identifier:) in conformance SpecificMedicationsPersistor;
  return SpecificMedicationsPersistor.sampleScheduleIDFor(dateInterval:)(a1, v6, v7);
}

uint64_t SpecificMedicationsPersistor.sampleScheduleIDFor(dateInterval:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v7;

  v3[12] = v3;
  v3[13] = 0;
  v3[8] = 0;
  v3[9] = 0;
  v3[14] = 0;
  v3[15] = 0;
  v3[10] = 0;
  v3[11] = 0;
  v4 = type metadata accessor for Logger();
  v3[24] = v4;
  v3[25] = *(_QWORD *)(v4 - 8);
  v3[26] = swift_task_alloc();
  v3[27] = swift_task_alloc();
  v3[13] = a1;
  v3[8] = a2;
  v3[9] = a3;
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v7 + 224) = v5;
  *v5 = *(_QWORD *)(v7 + 96);
  v5[1] = SpecificMedicationsPersistor.sampleScheduleIDFor(dateInterval:);
  return SpecificMedicationsPersistor.getDoseEvents(for:medicationIdentifier:)(a1, 0, a2, a3);
}

uint64_t SpecificMedicationsPersistor.sampleScheduleIDFor(dateInterval:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;

  v3 = (_QWORD *)*v2;
  v3[12] = *v2;
  v3[29] = a1;
  v3[30] = v1;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t SpecificMedicationsPersistor.sampleScheduleIDFor(dateInterval:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint8_t *buf;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint32_t size;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  NSObject *v23;
  os_log_type_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  uint8_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t (*v38)(uint64_t, uint64_t, uint64_t);
  uint64_t v39;

  v33 = v0[29];
  v0[12] = v0;
  swift_bridgeObjectRetain();
  v0[14] = v33;
  swift_bridgeObjectRetain();
  v0[22] = v33;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [HKMedicationExposableDoseEvent]);
  lazy protocol witness table accessor for type [HKMedicationExposableDoseEvent] and conformance [A]();
  Collection.first.getter();
  outlined destroy of [HKQuantityType]();
  v34 = (void *)v0[21];
  swift_bridgeObjectRelease();
  if (v34)
  {
    v31 = objc_msgSend(v34, sel_scheduleItemIdentifier);
    if (v31)
    {
      v27 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v28 = v1;

      v29 = v27;
      v30 = v28;
    }
    else
    {
      v29 = 0;
      v30 = 0;
    }

    v25 = v29;
    v26 = v30;
  }
  else
  {
    v25 = 0;
    v26 = 0;
  }
  v2 = *(_QWORD *)(v32 + 216);
  v13 = *(_QWORD *)(v32 + 200);
  v15 = *(_QWORD *)(v32 + 192);
  *(_QWORD *)(v32 + 80) = v25;
  *(_QWORD *)(v32 + 88) = v26;
  v14 = Logger.wellnessIntents.unsafeMutableAddressor();
  swift_beginAccess();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 16))(v2, v14, v15);
  swift_endAccess();
  swift_bridgeObjectRetain();
  v17 = swift_allocObject();
  *(_QWORD *)(v17 + 16) = v25;
  *(_QWORD *)(v17 + 24) = v26;
  v23 = Logger.logObject.getter();
  v24 = static os_log_type_t.debug.getter();
  *(_QWORD *)(v32 + 184) = 12;
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  size = *(_DWORD *)(v32 + 252);
  v19 = swift_allocObject();
  *(_BYTE *)(v19 + 16) = 32;
  v20 = swift_allocObject();
  *(_BYTE *)(v20 + 16) = 8;
  v18 = swift_allocObject();
  *(_QWORD *)(v18 + 16) = partial apply for implicit closure #2 in SpecificMedicationsPersistor.writeDoseEvent(medicationController:doseEvents:medStatusTaken:medicationIDPresent:dosage:dosageUnit:);
  *(_QWORD *)(v18 + 24) = v17;
  v21 = swift_allocObject();
  *(_QWORD *)(v21 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:);
  *(_QWORD *)(v21 + 24) = v18;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
  _allocateUninitializedArray<A>(_:)();
  v22 = v3;
  swift_retain();
  *v22 = partial apply for closure #1 in OSLogArguments.append(_:);
  v22[1] = v19;
  swift_retain();
  v22[2] = partial apply for closure #1 in OSLogArguments.append(_:);
  v22[3] = v20;
  swift_retain();
  v22[4] = partial apply for closure #1 in OSLogArguments.append(_:);
  v22[5] = v21;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (!os_log_type_enabled(v23, v24))
  {
    swift_release();
    swift_release();
    swift_release();
    goto LABEL_11;
  }
  v4 = *(_QWORD *)(v32 + 240);
  buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
  v11 = createStorage<A>(capacity:type:)(0);
  v12 = createStorage<A>(capacity:type:)(1);
  v35 = buf;
  v36 = v11;
  v37 = v12;
  serialize(_:at:)(2, &v35);
  serialize(_:at:)(1, &v35);
  v38 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  v39 = v19;
  result = closure #1 in osLogInternal(_:log:type:)(&v38, (uint64_t)&v35, (uint64_t)&v36, (uint64_t)&v37);
  if (!v4)
  {
    v38 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v39 = v20;
    closure #1 in osLogInternal(_:log:type:)(&v38, (uint64_t)&v35, (uint64_t)&v36, (uint64_t)&v37);
    v38 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v39 = v21;
    closure #1 in osLogInternal(_:log:type:)(&v38, (uint64_t)&v35, (uint64_t)&v36, (uint64_t)&v37);
    _os_log_impl(&dword_24749F000, v23, v24, "got scheduleItemIdentifier: %s", buf, size);
    destroyStorage<A>(_:count:)(v11, 0, v9);
    destroyStorage<A>(_:count:)(v12, 1, MEMORY[0x24BEE4AD8] + 8);
    MEMORY[0x24957D398](buf, MEMORY[0x24BEE4260]);
    swift_release();
    swift_release();
    swift_release();
LABEL_11:
    v7 = *(_QWORD *)(v32 + 216);
    v6 = *(_QWORD *)(v32 + 200);
    v8 = *(_QWORD *)(v32 + 192);

    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v7, v8);
    outlined destroy of [HKQuantityType]();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v32 + 96) + 8))(v25, v26);
  }
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  id v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  uint8_t *buf;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint32_t v18;
  os_log_type_t v19;
  NSObject *v20;
  uint64_t v21;

  v14 = *(void **)(v0 + 240);
  v1 = *(_QWORD *)(v0 + 208);
  v15 = *(_QWORD *)(v0 + 200);
  v17 = *(_QWORD *)(v0 + 192);
  *(_QWORD *)(v0 + 96) = v0;
  v2 = v14;
  *(_QWORD *)(v0 + 120) = v14;
  v16 = Logger.wellnessIntents.unsafeMutableAddressor();
  swift_beginAccess();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 16))(v1, v16, v17);
  swift_endAccess();
  v20 = Logger.logObject.getter();
  v19 = static os_log_type_t.error.getter();
  *(_QWORD *)(v0 + 128) = 2;
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  v18 = *(_DWORD *)(v0 + 248);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
  v21 = _allocateUninitializedArray<A>(_:)();
  if (os_log_type_enabled(v20, v19))
  {
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    v10 = createStorage<A>(capacity:type:)(0);
    v11 = createStorage<A>(capacity:type:)(0);
    *(_QWORD *)(v13 + 136) = buf;
    *(_QWORD *)(v13 + 144) = v10;
    *(_QWORD *)(v13 + 152) = v11;
    serialize(_:at:)(0, (_BYTE **)(v13 + 136));
    serialize(_:at:)(0, (_BYTE **)(v13 + 136));
    *(_QWORD *)(v13 + 160) = v21;
    v12 = (_QWORD *)swift_task_alloc();
    v12[2] = v13 + 136;
    v12[3] = v13 + 144;
    v12[4] = v13 + 152;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
    lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
    Sequence.forEach(_:)();
    swift_task_dealloc();
    _os_log_impl(&dword_24749F000, v20, v19, "Failed fetching dose events for specified timeframe.", buf, v18);
    destroyStorage<A>(_:count:)(v10, 0, v8);
    destroyStorage<A>(_:count:)(v11, 0, MEMORY[0x24BEE4AD8] + 8);
    MEMORY[0x24957D398](buf, MEMORY[0x24BEE4260]);
  }
  swift_bridgeObjectRelease();
  v7 = *(id *)(v13 + 240);
  v5 = *(_QWORD *)(v13 + 208);
  v4 = *(_QWORD *)(v13 + 200);
  v6 = *(_QWORD *)(v13 + 192);

  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v5, v6);
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)(v13 + 96) + 8))(0);
}

uint64_t protocol witness for SpecificMedicationsPersisting.buildMatchedMedName(from:shouldIncludeAsNeededParams:) in conformance SpecificMedicationsPersistor(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)(v3 + 16) = v3;
  v7 = *v2;
  v8 = v2[1];
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 24) = v4;
  *v4 = *(_QWORD *)(v3 + 16);
  v4[1] = protocol witness for QuantityPersisting.save(quantityIdentifier:value:units:) in conformance HealthKitPersistor;
  return SpecificMedicationsPersistor.buildMatchedMedName(from:shouldIncludeAsNeededParams:)(a1, a2 & 1, v7, v8);
}

uint64_t SpecificMedicationsPersistor.doUTCQueryForMedications()(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;

  v2[7] = a2;
  v2[6] = a1;
  v2[4] = v2;
  v2[2] = 0;
  v2[3] = 0;
  v2[2] = a1;
  v2[3] = a2;
  return swift_task_switch();
}

uint64_t SpecificMedicationsPersistor.doUTCQueryForMedications()()
{
  _QWORD *v0;
  id v1;
  id v2;
  _QWORD *v3;
  id v5;
  id v6;
  uint64_t v7;
  uint64_t v8;

  v6 = (id)v0[7];
  v5 = (id)v0[6];
  v0[4] = v0;
  v0[8] = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("doUTCQueryForMedications()", 0x1AuLL, 1)._object;
  v1 = v5;
  v2 = v6;
  v8 = swift_task_alloc();
  v0[9] = v8;
  *(_QWORD *)(v8 + 16) = v5;
  *(_QWORD *)(v8 + 24) = v6;
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v7 + 80) = v3;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [HKUserTrackedMedication]);
  *v3 = *(_QWORD *)(v7 + 32);
  v3[1] = SpecificMedicationsPersistor.doUTCQueryForMedications();
  return withCheckedThrowingContinuation<A>(isolation:function:_:)();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v4;
  void *v5;
  uint64_t v6;

  v2 = *v1;
  *(_QWORD *)(v2 + 32) = *v1;
  v2 += 32;
  v6 = v2 - 16;
  *(_QWORD *)(v2 + 56) = v0;
  swift_task_dealloc();
  if (!v0)
  {
    v5 = *(void **)(v6 + 40);
    v4 = *(void **)(v6 + 32);
    swift_task_dealloc();

    swift_bridgeObjectRelease();
  }
  return swift_task_switch();
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 32) = v0;
  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)(v0 + 32) + 8))(*(_QWORD *)(v0 + 40));
}

{
  _QWORD *v0;
  id v2;
  id v3;

  v3 = (id)v0[7];
  v2 = (id)v0[6];
  v0[4] = v0;
  swift_task_dealloc();

  swift_bridgeObjectRelease();
  return (*(uint64_t (**)())(v0[4] + 8))();
}

void closure #1 in SpecificMedicationsPersistor.doUTCQueryForMedications()(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  id v5;
  id v6;
  unint64_t v7;
  uint64_t v8;
  void *v9;
  id v10;
  void *v11;
  const char *v12;
  const char *v13;
  const char *v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  uint64_t v23;
  unint64_t v24;
  void *v25;
  id v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v17 = a1;
  v15 = a2;
  v16 = a3;
  v12 = "Fatal error";
  v13 = "Unexpectedly found nil while implicitly unwrapping an Optional value";
  v14 = "SiriWellnessIntents/LogSpecificMedicationsIntentHandler.swift";
  v30 = 0;
  v28 = 0;
  v29 = 0;
  v27 = 0;
  v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<[HKUserTrackedMedication], Error>);
  v19 = *(_QWORD *)(v18 - 8);
  v20 = *(_QWORD *)(v19 + 64);
  v21 = (v20 + 15) & 0xFFFFFFFFFFFFFFF0;
  v22 = (char *)&v7 - v21;
  v30 = MEMORY[0x24BDAC7A8](v17);
  v28 = v3;
  v29 = v4;
  v23 = 0;
  v24 = type metadata accessor for HKUserTrackedConceptQuery();
  type metadata accessor for HKUserTrackedConceptType();
  v25 = (void *)*MEMORY[0x24BDD3840];
  v5 = v25;
  v26 = HKUserTrackedConceptType.__allocating_init(identifier:)(v25);
  if (v26)
  {
    v11 = v26;
  }
  else
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  v9 = v11;
  (*(void (**)(char *, uint64_t, uint64_t))(v19 + 16))(v22, v17, v18);
  v7 = (*(unsigned __int8 *)(v19 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  v8 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v19 + 32))(v8 + v7, v22, v18);
  v10 = HKUserTrackedConceptQuery.__allocating_init(userTrackedConceptType:predicate:sortDescriptors:resultsHandler:)(v9, 0, 0, (uint64_t)partial apply for closure #1 in closure #1 in SpecificMedicationsPersistor.doUTCQueryForMedications(), v8);
  v27 = v10;
  v6 = v15;
  objc_msgSend(v15, sel_executeQuery_, v10);

}

id HKUserTrackedConceptType.__allocating_init(identifier:)(void *a1)
{
  id v1;

  v1 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  return @nonobjc HKUserTrackedConceptType.init(identifier:)(a1);
}

void closure #1 in closure #1 in SpecificMedicationsPersistor.doUTCQueryForMedications()(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  char *v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  id v24;
  char *v25;
  id v26;
  uint64_t v27;
  id v28;
  uint64_t v29;
  uint64_t *v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD v34[2];
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint8_t *v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int v41;
  uint64_t *v42;
  _QWORD *v43;
  _BYTE **v44;
  uint64_t *v45;
  _QWORD *v46;
  uint64_t v47;
  id *v48;
  id v49;
  id v50;
  id v51;
  void *v52;
  void *v53;
  id v54;
  void *v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t *v58;
  id v59;
  uint64_t v60;
  id v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t i;
  uint64_t v66;
  char *v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t *v70;
  uint32_t v71;
  int v72;
  NSObject *v73;
  uint64_t v74;
  id *v75;
  uint64_t v76;
  uint64_t v77;
  uint8_t *v78;
  uint64_t v79;
  uint64_t v80;
  _BYTE **v81;
  uint64_t *v82;
  uint64_t *v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  id v87;
  unint64_t v88;
  unint64_t v89;
  uint64_t *v90;
  uint32_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  _QWORD *v101;
  uint64_t v102;
  NSObject *v103;
  int v104;
  uint64_t v105;
  void *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t v114;
  char *v115;
  unint64_t v116;
  char *v117;
  void *v118;
  uint64_t (*v119)(uint64_t, uint64_t, uint64_t);
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  _BYTE *v123;
  id v124;
  uint64_t v125;
  uint32_t v126;
  char v127;
  void *v128;
  id v129;
  id v130;
  id v131;
  uint64_t v132;
  void *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  _BYTE *v142;
  uint64_t v143;
  uint64_t v144;
  uint32_t v145;
  char v146;
  uint64_t v147;
  void *v148;
  uint64_t v149;
  uint64_t v150;

  v108 = a1;
  v110 = a2;
  v118 = a3;
  v109 = a4;
  v150 = 0;
  v149 = 0;
  v148 = 0;
  v147 = 0;
  v107 = 0;
  v138 = 0;
  v137 = 0;
  v135 = 0;
  v136 = 0;
  v131 = 0;
  v130 = 0;
  v128 = 0;
  v111 = type metadata accessor for Logger();
  v112 = *(_QWORD *)(v111 - 8);
  v114 = *(_QWORD *)(v112 + 64);
  v113 = (v114 + 15) & 0xFFFFFFFFFFFFFFF0;
  v4 = MEMORY[0x24BDAC7A8](v118);
  v115 = (char *)v34 - v113;
  v116 = v113;
  v5 = (void *)MEMORY[0x24BDAC7A8](v4);
  v117 = (char *)v34 - v116;
  v150 = v6;
  v149 = v7;
  v148 = v5;
  v147 = v8;
  v9 = v5;
  if (v118)
  {
    v106 = v118;
    v10 = v117;
    v87 = v118;
    v128 = v118;
    v85 = Logger.wellnessIntents.unsafeMutableAddressor();
    v86 = &v127;
    v93 = 32;
    swift_beginAccess();
    (*(void (**)(char *, uint64_t, uint64_t))(v112 + 16))(v10, v85, v111);
    swift_endAccess();
    v11 = v87;
    v94 = 7;
    v95 = swift_allocObject();
    *(_QWORD *)(v95 + 16) = v87;
    v103 = Logger.logObject.getter();
    v104 = static os_log_type_t.error.getter();
    v90 = &v125;
    v125 = 12;
    v88 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    v89 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    lazy protocol witness table accessor for type Int and conformance Int();
    UnsignedInteger<>.init<A>(_:)();
    v91 = v126;
    v92 = 17;
    v97 = swift_allocObject();
    *(_BYTE *)(v97 + 16) = 64;
    v98 = swift_allocObject();
    *(_BYTE *)(v98 + 16) = 8;
    v12 = swift_allocObject();
    v13 = v95;
    v96 = v12;
    *(_QWORD *)(v12 + 16) = partial apply for implicit closure #1 in closure #1 in closure #1 in HKHealthStore.query(correlationType:firstQuantityType:secondQuantityType:start:end:);
    *(_QWORD *)(v12 + 24) = v13;
    v14 = swift_allocObject();
    v15 = v96;
    v100 = v14;
    *(_QWORD *)(v14 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:);
    *(_QWORD *)(v14 + 24) = v15;
    v102 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
    v99 = _allocateUninitializedArray<A>(_:)();
    v101 = v16;
    swift_retain();
    v17 = v97;
    v18 = v101;
    *v101 = partial apply for closure #1 in OSLogArguments.append(_:);
    v18[1] = v17;
    swift_retain();
    v19 = v98;
    v20 = v101;
    v101[2] = partial apply for closure #1 in OSLogArguments.append(_:);
    v20[3] = v19;
    swift_retain();
    v21 = v100;
    v22 = v101;
    v101[4] = partial apply for closure #1 in OSLogArguments.append(_:);
    v22[5] = v21;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(v103, (os_log_type_t)v104))
    {
      v23 = v107;
      v78 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      v77 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      v79 = createStorage<A>(capacity:type:)(1);
      v80 = createStorage<A>(capacity:type:)(0);
      v81 = &v123;
      v123 = v78;
      v82 = &v122;
      v122 = v79;
      v83 = &v121;
      v121 = v80;
      serialize(_:at:)(2, &v123);
      serialize(_:at:)(1, v81);
      v119 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v120 = v97;
      closure #1 in osLogInternal(_:log:type:)(&v119, (uint64_t)v81, (uint64_t)v82, (uint64_t)v83);
      v84 = v23;
      if (v23)
      {
        __break(1u);
      }
      else
      {
        v119 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
        v120 = v98;
        closure #1 in osLogInternal(_:log:type:)(&v119, (uint64_t)&v123, (uint64_t)&v122, (uint64_t)&v121);
        v76 = 0;
        v119 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
        v120 = v100;
        closure #1 in osLogInternal(_:log:type:)(&v119, (uint64_t)&v123, (uint64_t)&v122, (uint64_t)&v121);
        _os_log_impl(&dword_24749F000, v103, (os_log_type_t)v104, "Error while querying HealthKit for medication samples: %@", v78, v91);
        destroyStorage<A>(_:count:)(v79, 1, v77);
        destroyStorage<A>(_:count:)(v80, 0, MEMORY[0x24BEE4AD8] + 8);
        MEMORY[0x24957D398](v78, MEMORY[0x24BEE4260]);
        swift_release();
        swift_release();
        swift_release();
      }
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
    }

    (*(void (**)(char *, uint64_t))(v112 + 8))(v117, v111);
    v24 = v87;
    v75 = &v124;
    v124 = v87;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<[HKUserTrackedMedication], Error>);
    CheckedContinuation.resume(throwing:)();

  }
  else
  {
    swift_bridgeObjectRetain();
    if (v110)
    {
      v105 = v110;
      v63 = v110;
      v138 = v110;
      v62 = 0;
      type metadata accessor for HKUserTrackedMedication();
      v137 = _allocateUninitializedArray<A>(_:)();
      swift_bridgeObjectRetain();
      v134 = v63;
      v64 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [HKUserTrackedConcept]);
      lazy protocol witness table accessor for type [HKUserTrackedConcept] and conformance [A]();
      Collection<>.makeIterator()();
      for (i = v107; ; i = v60)
      {
        v60 = i;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<[HKUserTrackedConcept]>);
        IndexingIterator.next()();
        v61 = v133;
        if (!v133)
          break;
        v59 = v61;
        v54 = v61;
        v131 = v61;
        v26 = v61;
        objc_opt_self();
        v27 = swift_dynamicCastObjCClass();
        v55 = (void *)v27;
        if (v27)
        {
          v53 = v55;
        }
        else
        {
          v52 = 0;

          v53 = v52;
        }
        v51 = v53;
        if (v53)
        {
          v50 = v51;
          v49 = v51;
          v130 = v51;
          v28 = v51;
          v48 = &v129;
          v129 = v49;
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [HKUserTrackedMedication]);
          Array.append(_:)();

        }
      }
      outlined destroy of [HKQuantityType]();
      v58 = &v137;
      v56 = v137;
      swift_bridgeObjectRetain();
      v57 = &v132;
      v132 = v56;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<[HKUserTrackedMedication], Error>);
      CheckedContinuation.resume(returning:)();
      outlined destroy of [HKQuantityType]();
      swift_bridgeObjectRelease();
    }
    else
    {
      v25 = v115;
      v66 = Logger.wellnessIntents.unsafeMutableAddressor();
      v67 = &v146;
      swift_beginAccess();
      (*(void (**)(char *, uint64_t, uint64_t))(v112 + 16))(v25, v66, v111);
      swift_endAccess();
      v73 = Logger.logObject.getter();
      v72 = static os_log_type_t.error.getter();
      v70 = &v144;
      v144 = 2;
      v68 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
      v69 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
      lazy protocol witness table accessor for type Int and conformance Int();
      UnsignedInteger<>.init<A>(_:)();
      v71 = v145;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
      v74 = _allocateUninitializedArray<A>(_:)();
      if (os_log_type_enabled(v73, (os_log_type_t)v72))
      {
        v29 = v107;
        v38 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
        v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
        v37 = 0;
        v39 = createStorage<A>(capacity:type:)(0);
        v40 = createStorage<A>(capacity:type:)(v37);
        v44 = &v142;
        v142 = v38;
        v45 = &v141;
        v141 = v39;
        v42 = &v140;
        v140 = v40;
        v41 = 0;
        serialize(_:at:)(0, &v142);
        serialize(_:at:)(v41, v44);
        v139 = v74;
        v43 = v34;
        MEMORY[0x24BDAC7A8](v34);
        v30 = v45;
        v31 = &v34[-6];
        v46 = &v34[-6];
        v31[2] = v44;
        v31[3] = v30;
        v31[4] = v32;
        v47 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
        lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
        Sequence.forEach(_:)();
        if (v29)
        {
          __break(1u);
        }
        else
        {
          _os_log_impl(&dword_24749F000, v73, (os_log_type_t)v72, "No dose events found using HKUserTrackedConceptQuery, returning empty array", v38, v71);
          v35 = 0;
          destroyStorage<A>(_:count:)(v39, 0, v36);
          destroyStorage<A>(_:count:)(v40, v35, MEMORY[0x24BEE4AD8] + 8);
          MEMORY[0x24957D398](v38, MEMORY[0x24BEE4260]);
          swift_bridgeObjectRelease();
        }
      }
      else
      {
        swift_bridgeObjectRelease();
      }

      (*(void (**)(char *, uint64_t))(v112 + 8))(v115, v111);
      v34[0] = 0;
      type metadata accessor for HKUserTrackedMedication();
      v33 = _allocateUninitializedArray<A>(_:)();
      v34[1] = &v143;
      v143 = v33;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<[HKUserTrackedMedication], Error>);
      CheckedContinuation.resume(returning:)();
    }
  }
}

id HKUserTrackedConceptQuery.__allocating_init(userTrackedConceptType:predicate:sortDescriptors:resultsHandler:)(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  id v5;

  v5 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  return @nonobjc HKUserTrackedConceptQuery.init(userTrackedConceptType:predicate:sortDescriptors:resultsHandler:)(a1, a2, a3, a4, a5);
}

uint64_t SpecificMedicationsPersistor.UTCQuery()(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v6;

  v2[17] = v2;
  v2[5] = 0;
  v2[6] = 0;
  v2[18] = 0;
  v2[19] = 0;
  v2[7] = 0;
  v2[8] = 0;
  v2[22] = 0;
  v2[9] = 0;
  v2[10] = 0;
  v2[11] = 0;
  v2[12] = 0;
  v3 = type metadata accessor for Logger();
  v2[24] = v3;
  v2[25] = *(_QWORD *)(v3 - 8);
  v2[26] = swift_task_alloc();
  v2[5] = a1;
  v2[6] = a2;
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v6 + 216) = v4;
  *v4 = *(_QWORD *)(v6 + 136);
  v4[1] = SpecificMedicationsPersistor.UTCQuery();
  return SpecificMedicationsPersistor.doUTCQueryForMedications()(a1, a2);
}

_QWORD *SpecificMedicationsPersistor.UTCQuery()(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v5;
  _QWORD *v6;

  v3 = (_QWORD *)*v2;
  v3[17] = *v2;
  v6 = v3 + 17;
  v3[28] = a1;
  v3[29] = v1;
  swift_task_dealloc();
  if (!v1)
    return (_QWORD *)swift_task_switch();
  v5 = swift_task_dealloc();
  return (*(_QWORD *(**)(_QWORD *__return_ptr, uint64_t))(*v6 + 8))(v6, v5);
}

uint64_t SpecificMedicationsPersistor.UTCQuery()()
{
  _QWORD *v0;
  uint64_t v1;
  id v2;
  _QWORD *v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint8_t *buf;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint32_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  NSObject *v37;
  os_log_type_t v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint8_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t (*v47)(uint64_t, uint64_t, uint64_t);
  uint64_t v48;

  v42 = v0[28];
  v0[17] = v0;
  v0[18] = v42;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, String));
  _allocateUninitializedArray<A>(_:)();
  v0[19] = Dictionary.init(dictionaryLiteral:)();
  swift_bridgeObjectRetain();
  v0[20] = v42;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [HKUserTrackedMedication]);
  lazy protocol witness table accessor for type [HKUserTrackedMedication] and conformance [A]();
  Collection<>.makeIterator()();
  v43 = v0[29];
  while (1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<[HKUserTrackedMedication]>);
    IndexingIterator.next()();
    v40 = *(void **)(v41 + 168);
    if (!v40)
      break;
    v1 = *(_QWORD *)(v41 + 208);
    v27 = *(_QWORD *)(v41 + 200);
    v29 = *(_QWORD *)(v41 + 192);
    *(_QWORD *)(v41 + 176) = v40;
    v28 = Logger.wellnessIntents.unsafeMutableAddressor();
    swift_beginAccess();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v27 + 16))(v1, v28, v29);
    swift_endAccess();
    v2 = v40;
    v31 = swift_allocObject();
    *(_QWORD *)(v31 + 16) = v40;
    v37 = Logger.logObject.getter();
    v38 = static os_log_type_t.debug.getter();
    *(_QWORD *)(v41 + 184) = 12;
    lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    lazy protocol witness table accessor for type Int and conformance Int();
    UnsignedInteger<>.init<A>(_:)();
    v30 = *(_DWORD *)(v41 + 240);
    v33 = swift_allocObject();
    *(_BYTE *)(v33 + 16) = 32;
    v34 = swift_allocObject();
    *(_BYTE *)(v34 + 16) = 8;
    v32 = swift_allocObject();
    *(_QWORD *)(v32 + 16) = partial apply for implicit closure #1 in SpecificMedicationsPersistor.UTCQuery();
    *(_QWORD *)(v32 + 24) = v31;
    v35 = swift_allocObject();
    *(_QWORD *)(v35 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:);
    *(_QWORD *)(v35 + 24) = v32;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
    _allocateUninitializedArray<A>(_:)();
    v36 = v3;
    swift_retain();
    *v36 = partial apply for closure #1 in OSLogArguments.append(_:);
    v36[1] = v33;
    swift_retain();
    v36[2] = partial apply for closure #1 in OSLogArguments.append(_:);
    v36[3] = v34;
    swift_retain();
    v36[4] = partial apply for closure #1 in OSLogArguments.append(_:);
    v36[5] = v35;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(v37, v38))
    {
      buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      v25 = createStorage<A>(capacity:type:)(0);
      v26 = createStorage<A>(capacity:type:)(1);
      v44 = buf;
      v45 = v25;
      v46 = v26;
      serialize(_:at:)(2, &v44);
      serialize(_:at:)(1, &v44);
      v47 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v48 = v33;
      result = closure #1 in osLogInternal(_:log:type:)(&v47, (uint64_t)&v44, (uint64_t)&v45, (uint64_t)&v46);
      if (v43)
        return result;
      v47 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v48 = v34;
      closure #1 in osLogInternal(_:log:type:)(&v47, (uint64_t)&v44, (uint64_t)&v45, (uint64_t)&v46);
      v47 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v48 = v35;
      closure #1 in osLogInternal(_:log:type:)(&v47, (uint64_t)&v44, (uint64_t)&v45, (uint64_t)&v46);
      _os_log_impl(&dword_24749F000, v37, v38, "Got a medication: %s", buf, v30);
      destroyStorage<A>(_:count:)(v25, 0, v23);
      destroyStorage<A>(_:count:)(v26, 1, MEMORY[0x24BEE4AD8] + 8);
      MEMORY[0x24957D398](buf, MEMORY[0x24BEE4260]);
      swift_release();
      swift_release();
      swift_release();
      v21 = 0;
      v22 = 0;
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
      v21 = v43;
      v22 = v39;
    }
    v9 = *(_QWORD *)(v41 + 208);
    v8 = *(_QWORD *)(v41 + 200);
    v10 = *(_QWORD *)(v41 + 192);

    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v9, v10);
    v11 = objc_msgSend(v40, (SEL)0x1F2FC25E1);
    v12 = objc_msgSend(v11, sel_identifier);

    v13 = objc_msgSend(v12, sel_underlyingIdentifier);
    v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v20 = v5;
    *(_QWORD *)(v41 + 72) = v17;
    *(_QWORD *)(v41 + 80) = v5;

    v14 = objc_msgSend(v40, (SEL)0x1F2FC25E1);
    v15 = objc_msgSend(v14, sel_displayNameComponents);

    v16 = objc_msgSend(v15, sel_medicationDisplayName);
    v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v19 = v6;
    *(_QWORD *)(v41 + 88) = v18;
    *(_QWORD *)(v41 + 96) = v6;

    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    *(_QWORD *)(v41 + 104) = v18;
    *(_QWORD *)(v41 + 112) = v19;
    *(_QWORD *)(v41 + 120) = v17;
    *(_QWORD *)(v41 + 128) = v20;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : String]);
    Dictionary.subscript.setter();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    v43 = v21;
    v39 = v22;
  }
  outlined destroy of [HKQuantityType]();
  v7 = *(_QWORD *)(v41 + 152);
  swift_bridgeObjectRetain();
  outlined destroy of [HKQuantityType]();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v41 + 136) + 8))(v7);
}

uint64_t implicit closure #1 in SpecificMedicationsPersistor.UTCQuery()(void *a1)
{
  id v2;
  id v3;
  id v4;
  uint64_t v5;

  v2 = objc_msgSend(a1, sel_medication);
  v3 = objc_msgSend(v2, sel_displayNameComponents);

  v4 = objc_msgSend(v3, sel_medicationDisplayName);
  v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v5;
}

uint64_t closure #1 in SpecificMedicationsPersistor.getMedicationsMatching(medicationIDs:strength:strengthUnit:isAsNeeded:)(id *a1)
{
  id v2;
  id v3;
  id v4;
  char v5;

  v2 = objc_msgSend(*a1, sel_medication);
  v3 = objc_msgSend(v2, sel_identifier);

  v4 = objc_msgSend(v3, sel_underlyingIdentifier);
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  lazy protocol witness table accessor for type [String] and conformance [A]();
  v5 = Sequence<>.contains(_:)();
  outlined destroy of String.UTF8View();

  return v5 & 1;
}

uint64_t closure #2 in SpecificMedicationsPersistor.getMedicationsMatching(medicationIDs:strength:strengthUnit:isAsNeeded:)(id *a1, char a2)
{
  unsigned int v3;

  if ((a2 & 1) != 0)
    v3 = objc_msgSend(*a1, sel_hasSchedule) ^ 1;
  else
    LOBYTE(v3) = 1;
  return v3 & 1;
}

uint64_t closure #3 in SpecificMedicationsPersistor.getMedicationsMatching(medicationIDs:strength:strengthUnit:isAsNeeded:)(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  id *v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char v14;
  char v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint8_t *v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int v46;
  uint64_t *v47;
  uint64_t *v48;
  _BYTE **v49;
  uint64_t *v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint8_t *v59;
  uint64_t v60;
  uint64_t v61;
  _BYTE **v62;
  uint64_t *v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t *v70;
  uint32_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  uint64_t v82;
  NSObject *v83;
  int v84;
  int v85;
  int v86;
  uint64_t v87;
  uint64_t v88;
  double v89;
  uint64_t v90;
  _BOOL4 v91;
  int v92;
  uint64_t v93;
  double v94;
  double v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  Swift::String v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  unint64_t v105;
  unint64_t v106;
  uint64_t *v107;
  uint32_t v108;
  int v109;
  NSObject *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  id v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  id v121;
  uint64_t v122;
  uint64_t v123;
  id v124;
  id v125;
  id v126;
  uint64_t v127;
  uint64_t v128;
  double v129;
  double v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  int v134;
  double v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  unint64_t v139;
  char *v140;
  unint64_t v141;
  char *v142;
  id v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  double v150;
  uint64_t (*v151)(uint64_t, uint64_t, uint64_t);
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  _BYTE *v155;
  uint64_t v156;
  uint32_t v157;
  char v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  _BYTE *v167;
  uint64_t v168;
  uint32_t v169;
  char v170;
  uint64_t v171;
  uint64_t v172;
  double v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  char v177;
  id v178;

  v136 = a1;
  v135 = *(double *)&a2;
  v134 = a3;
  v132 = a4;
  v133 = a5;
  v178 = 0;
  v176 = 0;
  v177 = 0;
  v174 = 0;
  v175 = 0;
  v173 = 0.0;
  v171 = 0;
  v172 = 0;
  v162 = 0;
  v163 = 0;
  v159 = 0;
  v150 = 0.0;
  v144 = 0;
  v145 = 0;
  v137 = type metadata accessor for Logger();
  v138 = *(_QWORD *)(v137 - 8);
  v139 = (*(_QWORD *)(v138 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v5 = MEMORY[0x24BDAC7A8](v136);
  v140 = (char *)&v38 - v139;
  v141 = (v6 + 15) & 0xFFFFFFFFFFFFFFF0;
  v7 = (id *)MEMORY[0x24BDAC7A8](v5);
  v142 = (char *)&v38 - v141;
  v143 = *v7;
  v178 = v143;
  v176 = v8;
  v177 = v9 & 1;
  v174 = v10;
  v175 = v11;
  if ((v9 & 1) != 0 || (v130 = v135, v129 = v135, v173 = v135, swift_bridgeObjectRetain(), !v133))
  {
    v92 = 1;
    v93 = v131;
  }
  else
  {
    v127 = v132;
    v128 = v133;
    v122 = v133;
    v123 = v132;
    v171 = v132;
    v172 = v133;
    v124 = objc_msgSend(v143, sel_medication);
    v125 = objc_msgSend(v124, sel_displayNameComponents);

    v126 = objc_msgSend(v125, sel_displayStrength);
    if (v126)
    {
      v121 = v126;
      v116 = v126;
      v117 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v118 = v12;

      v119 = v117;
      v120 = v118;
    }
    else
    {
      v119 = 0;
      v120 = 0;
    }
    v114 = v120;
    v115 = v119;
    if (v120)
    {
      v112 = v115;
      v113 = v114;
      v97 = v114;
      v96 = v115;
      v162 = v115;
      v163 = v114;

      v160 = v96;
      v161 = v97;
      v101 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(" ", 1uLL, 1);
      v100 = lazy protocol witness table accessor for type String and conformance String();
      v99 = MEMORY[0x24BEE0D00];
      v98 = default argument 1 of StringProtocol<>.split(separator:maxSplits:omittingEmptySubsequences:)();
      v14 = default argument 2 of StringProtocol<>.split(separator:maxSplits:omittingEmptySubsequences:)();
      v102 = MEMORY[0x24957D3E0](v101._countAndFlagsBits, v101._object, v98, v14 & 1, v99, v100);
      swift_bridgeObjectRelease();
      v159 = v102;
      if (MEMORY[0x24957D110]() != 2)
      {
        v18 = v140;
        v66 = Logger.wellnessIntents.unsafeMutableAddressor();
        v67 = &v158;
        v73 = 32;
        swift_beginAccess();
        (*(void (**)(char *, uint64_t, uint64_t))(v138 + 16))(v18, v66, v137);
        swift_endAccess();
        swift_bridgeObjectRetain();
        v74 = 7;
        v19 = swift_allocObject();
        v20 = v97;
        v75 = v19;
        *(_QWORD *)(v19 + 16) = v96;
        *(_QWORD *)(v19 + 24) = v20;
        v83 = Logger.logObject.getter();
        v84 = static os_log_type_t.debug.getter();
        v70 = &v156;
        v156 = 12;
        v68 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
        v69 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
        lazy protocol witness table accessor for type Int and conformance Int();
        UnsignedInteger<>.init<A>(_:)();
        v71 = v157;
        v72 = 17;
        v77 = swift_allocObject();
        *(_BYTE *)(v77 + 16) = 32;
        v78 = swift_allocObject();
        *(_BYTE *)(v78 + 16) = 8;
        v21 = swift_allocObject();
        v22 = v75;
        v76 = v21;
        *(_QWORD *)(v21 + 16) = partial apply for implicit closure #4 in LogQuantityIntentHandler.handle(intent:);
        *(_QWORD *)(v21 + 24) = v22;
        v23 = swift_allocObject();
        v24 = v76;
        v80 = v23;
        *(_QWORD *)(v23 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:);
        *(_QWORD *)(v23 + 24) = v24;
        v82 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
        v79 = _allocateUninitializedArray<A>(_:)();
        v81 = v25;
        swift_retain();
        v26 = v77;
        v27 = v81;
        *v81 = partial apply for closure #1 in OSLogArguments.append(_:);
        v27[1] = v26;
        swift_retain();
        v28 = v78;
        v29 = v81;
        v81[2] = partial apply for closure #1 in OSLogArguments.append(_:);
        v29[3] = v28;
        swift_retain();
        v30 = v80;
        v31 = v81;
        v81[4] = partial apply for closure #1 in OSLogArguments.append(_:);
        v31[5] = v30;
        _finalizeUninitializedArray<A>(_:)();
        swift_bridgeObjectRelease();
        if (os_log_type_enabled(v83, (os_log_type_t)v84))
        {
          v59 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
          v58 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
          v60 = createStorage<A>(capacity:type:)(0);
          v61 = createStorage<A>(capacity:type:)(1);
          v62 = &v155;
          v155 = v59;
          v63 = &v154;
          v154 = v60;
          v64 = &v153;
          v153 = v61;
          serialize(_:at:)(2, &v155);
          serialize(_:at:)(1, v62);
          v32 = v131;
          v151 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
          v152 = v77;
          closure #1 in osLogInternal(_:log:type:)(&v151, (uint64_t)v62, (uint64_t)v63, (uint64_t)v64);
          v65 = v32;
          if (v32)
          {
            __break(1u);
          }
          else
          {
            v151 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
            v152 = v78;
            closure #1 in osLogInternal(_:log:type:)(&v151, (uint64_t)&v155, (uint64_t)&v154, (uint64_t)&v153);
            v56 = 0;
            v151 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
            v152 = v80;
            closure #1 in osLogInternal(_:log:type:)(&v151, (uint64_t)&v155, (uint64_t)&v154, (uint64_t)&v153);
            v55 = 0;
            _os_log_impl(&dword_24749F000, v83, (os_log_type_t)v84, "Unexpected displayStrength string format: %s", v59, v71);
            destroyStorage<A>(_:count:)(v60, 0, v58);
            destroyStorage<A>(_:count:)(v61, 1, MEMORY[0x24BEE4AD8] + 8);
            MEMORY[0x24957D398](v59, MEMORY[0x24BEE4260]);
            swift_release();
            swift_release();
            swift_release();
            v57 = v55;
          }
        }
        else
        {
          swift_release();
          swift_release();
          swift_release();
          v57 = v131;
        }
        v54 = v57;

        (*(void (**)(char *, uint64_t))(v138 + 8))(v140, v137);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v92 = 0;
        v93 = v54;
      }
      else
      {
        Array.subscript.getter();
        v95 = COERCE_DOUBLE(Double.init(_:)());
        if ((v16 & 1) != 0)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v92 = 0;
          v93 = v131;
        }
        else
        {
          v94 = v95;
          v89 = v95;
          v150 = v95;
          Array.subscript.getter();
          v87 = v149;
          v88 = MEMORY[0x24957D014](v146, v147, v148);
          v90 = v17;
          swift_bridgeObjectRelease();
          v144 = v88;
          v145 = v90;
          v91 = v89 != v129;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (v91)
            v86 = 0;
          else
            v86 = static String.== infix(_:_:)();
          v85 = v86;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v92 = v85;
          v93 = v131;
        }
      }
    }
    else
    {
      v13 = v142;

      v103 = Logger.wellnessIntents.unsafeMutableAddressor();
      v104 = &v170;
      swift_beginAccess();
      (*(void (**)(char *, uint64_t, uint64_t))(v138 + 16))(v13, v103, v137);
      swift_endAccess();
      v110 = Logger.logObject.getter();
      v109 = static os_log_type_t.debug.getter();
      v107 = &v168;
      v168 = 2;
      v105 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
      v106 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
      lazy protocol witness table accessor for type Int and conformance Int();
      UnsignedInteger<>.init<A>(_:)();
      v108 = v169;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
      v111 = _allocateUninitializedArray<A>(_:)();
      if (os_log_type_enabled(v110, (os_log_type_t)v109))
      {
        v43 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
        v41 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
        v42 = 0;
        v44 = createStorage<A>(capacity:type:)(0);
        v45 = createStorage<A>(capacity:type:)(v42);
        v49 = &v167;
        v167 = v43;
        v50 = &v166;
        v166 = v44;
        v47 = &v165;
        v165 = v45;
        v46 = 0;
        serialize(_:at:)(0, &v167);
        serialize(_:at:)(v46, v49);
        v164 = v111;
        v48 = &v38;
        MEMORY[0x24BDAC7A8](&v38);
        v33 = v50;
        v34 = &v38 - 6;
        v51 = &v38 - 6;
        v34[2] = (uint64_t)v49;
        v34[3] = (uint64_t)v33;
        v34[4] = v35;
        v52 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
        lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
        v36 = v131;
        Sequence.forEach(_:)();
        v53 = v36;
        if (v36)
        {
          __break(1u);
        }
        else
        {
          _os_log_impl(&dword_24749F000, v110, (os_log_type_t)v109, "Couldn't find displayStrength in UserTrackedMed", v43, v108);
          v39 = 0;
          destroyStorage<A>(_:count:)(v44, 0, v41);
          destroyStorage<A>(_:count:)(v45, v39, MEMORY[0x24BEE4AD8] + 8);
          MEMORY[0x24957D398](v43, MEMORY[0x24BEE4260]);
          swift_bridgeObjectRelease();
          v40 = v53;
        }
      }
      else
      {
        swift_bridgeObjectRelease();
        v40 = v131;
      }
      v38 = v40;

      (*(void (**)(char *, uint64_t))(v138 + 8))(v142, v137);
      swift_bridgeObjectRelease();
      v92 = 0;
      v93 = v38;
    }
  }
  return v92 & 1;
}

uint64_t default argument 1 of StringProtocol<>.split(separator:maxSplits:omittingEmptySubsequences:)()
{
  return 0x7FFFFFFFFFFFFFFFLL;
}

uint64_t default argument 2 of StringProtocol<>.split(separator:maxSplits:omittingEmptySubsequences:)()
{
  return 1;
}

uint64_t implicit closure #2 in SpecificMedicationsPersistor.getMedicationsMatching(medicationIDs:strength:strengthUnit:isAsNeeded:)(uint64_t a1)
{
  unint64_t v1;

  v1 = type metadata accessor for HKUserTrackedMedication();
  return MEMORY[0x24957D110](a1, v1);
}

uint64_t closure #1 in SpecificMedicationsPersistor.getAsNeededStrengthFromHealthApp(for:)(id *a1)
{
  id v2;
  id v3;
  id v4;
  char v5;

  v2 = objc_msgSend(*a1, sel_medication);
  v3 = objc_msgSend(v2, sel_identifier);

  v4 = objc_msgSend(v3, sel_underlyingIdentifier);
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  v5 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();

  return v5 & 1;
}

uint64_t implicit closure #1 in SpecificMedicationsPersistor.getAsNeededDosageUnit(for:dosageCount:)()
{
  void *v1;

  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [HKUserTrackedMedication]);
  lazy protocol witness table accessor for type [HKUserTrackedMedication] and conformance [A]();
  Collection.first.getter();
  outlined destroy of [HKQuantityType]();
  if (v1)
  {
    objc_msgSend(v1, sel_medication);

  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HKMedication?);
  lazy protocol witness table accessor for type HKMedication? and conformance A?();
  return String.init<A>(describing:)();
}

uint64_t implicit closure #2 in SpecificMedicationsPersistor.getAsNeededDosageUnit(for:dosageCount:)(void *a1)
{
  id v1;

  v1 = a1;
  type metadata accessor for HKMedicationLoggingUnit();
  lazy protocol witness table accessor for type HKMedicationLoggingUnit and conformance NSObject();
  return String.init<A>(describing:)();
}

id @nonobjc NSNumber.init(value:)(uint64_t a1)
{
  void *v1;

  return objc_msgSend(v1, sel_initWithInteger_, a1);
}

id @nonobjc HKMedicationIdentifier.init(rawIdentifier:)()
{
  id v1;
  id v2;
  id v3;

  v2 = (id)MEMORY[0x24957CFB4]();
  v3 = objc_msgSend(v1, sel_initWithRawIdentifier_);

  swift_bridgeObjectRelease();
  return v3;
}

id @nonobjc INObject.init(identifier:display:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id v5;
  id v6;
  uint64_t v7;
  void *v8;
  void *v11;

  if (a2)
  {
    v7 = MEMORY[0x24957CFB4](a1);
    swift_bridgeObjectRelease();
    v8 = (void *)v7;
  }
  else
  {
    v8 = 0;
  }
  v5 = (id)MEMORY[0x24957CFB4](a3, a4);
  v6 = objc_msgSend(v11, sel_initWithIdentifier_displayString_, v8);

  swift_bridgeObjectRelease();
  return v6;
}

id @nonobjc HKUserTrackedConceptType.init(identifier:)(void *a1)
{
  void *v1;
  id v4;

  v4 = objc_msgSend(v1, sel_initWithIdentifier_);

  return v4;
}

id @nonobjc HKUserTrackedConceptQuery.init(userTrackedConceptType:predicate:sortDescriptors:resultsHandler:)(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  const void *v6;
  id v7;
  Class isa;
  Class v9;
  void *v14;
  uint64_t aBlock;
  int v16;
  int v17;
  uint64_t (*v18)(uint64_t, void *, void *, void *);
  void *v19;
  uint64_t v20;
  uint64_t v21;

  if (a3)
  {
    type metadata accessor for NSSortDescriptor();
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    v9 = isa;
  }
  else
  {
    v9 = 0;
  }
  v20 = a4;
  v21 = a5;
  aBlock = MEMORY[0x24BDAC760];
  v16 = 1107296256;
  v17 = 0;
  v18 = thunk for @escaping @callee_guaranteed (@guaranteed HKUserTrackedConceptQuery, @guaranteed [HKUserTrackedConcept]?, @guaranteed Error?) -> ();
  v19 = &block_descriptor_2010;
  v6 = _Block_copy(&aBlock);
  v7 = objc_msgSend(v14, sel_initWithUserTrackedConceptType_predicate_sortDescriptors_resultsHandler_, a1, a2, v9);
  _Block_release(v6);
  swift_release();

  return v7;
}

uint64_t thunk for @escaping @callee_guaranteed (@guaranteed HKUserTrackedConceptQuery, @guaranteed [HKUserTrackedConcept]?, @guaranteed Error?) -> ()(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v4;
  id v5;
  id v6;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void (*v12)(void *, uint64_t);

  v12 = *(void (**)(void *, uint64_t))(a1 + 32);
  swift_retain();
  v4 = a2;
  v5 = a3;
  if (a3)
  {
    type metadata accessor for HKUserTrackedConcept();
    v9 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    v10 = v9;
  }
  else
  {
    v10 = 0;
  }
  v6 = a4;
  if (a4)
    v8 = a4;
  else
    v8 = 0;
  v12(a2, v10);

  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t sub_247551158()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #2 in LogSpecificMedicationsIntentHandler.handle(intent:)()
{
  uint64_t v0;

  return implicit closure #2 in LogSpecificMedicationsIntentHandler.handle(intent:)(*(_QWORD *)(v0 + 16));
}

uint64_t sub_24755119C()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #3 in LogSpecificMedicationsIntentHandler.handle(intent:)()
{
  uint64_t v0;

  return implicit closure #3 in LogSpecificMedicationsIntentHandler.handle(intent:)(*(_QWORD *)(v0 + 16));
}

uint64_t sub_2475511E0()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #4 in LogSpecificMedicationsIntentHandler.handle(intent:)()
{
  uint64_t v0;

  return implicit closure #4 in LogSpecificMedicationsIntentHandler.handle(intent:)(*(void **)(v0 + 16));
}

uint64_t sub_247551224()
{
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #5 in LogSpecificMedicationsIntentHandler.handle(intent:)()
{
  uint64_t v0;

  return implicit closure #5 in LogSpecificMedicationsIntentHandler.handle(intent:)(*(_BYTE *)(v0 + 16) & 1);
}

uint64_t sub_247551258()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #6 in LogSpecificMedicationsIntentHandler.handle(intent:)()
{
  uint64_t v0;

  return implicit closure #6 in LogSpecificMedicationsIntentHandler.handle(intent:)(*(void **)(v0 + 16));
}

uint64_t sub_24755129C()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #7 in LogSpecificMedicationsIntentHandler.handle(intent:)()
{
  uint64_t v0;

  return implicit closure #7 in LogSpecificMedicationsIntentHandler.handle(intent:)(*(void **)(v0 + 16));
}

uint64_t sub_2475512E0()
{
  return swift_deallocObject();
}

uint64_t sub_247551308()
{
  return swift_deallocObject();
}

uint64_t sub_247551330()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_24755136C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2475513A8()
{
  return swift_deallocObject();
}

uint64_t sub_2475513D0()
{
  return swift_deallocObject();
}

uint64_t sub_2475513F8()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_247551434()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_247551470()
{
  return swift_deallocObject();
}

uint64_t sub_247551498()
{
  return swift_deallocObject();
}

uint64_t sub_2475514C0()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2475514FC()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_247551538()
{
  return swift_deallocObject();
}

uint64_t sub_247551560()
{
  return swift_deallocObject();
}

BOOL implicit closure #1 in OSLogInterpolation.appendInterpolation(_:format:privacy:)(uint64_t (*a1)(void))
{
  return (a1() & 1) != 0;
}

uint64_t sub_2475515D4()
{
  swift_release();
  return swift_deallocObject();
}

BOOL partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:format:privacy:)()
{
  uint64_t v0;

  return implicit closure #1 in OSLogInterpolation.appendInterpolation(_:format:privacy:)(*(uint64_t (**)(void))(v0 + 16));
}

uint64_t sub_24755161C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t thunk for @escaping @callee_guaranteed () -> (@unowned Int32)@<X0>(uint64_t (*a1)(void)@<X0>, _DWORD *a2@<X8>)
{
  uint64_t result;

  result = a1();
  *a2 = result;
  return result;
}

uint64_t sub_24755168C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed () -> (@unowned Int32)@<X0>(_DWORD *a1@<X8>)
{
  uint64_t v1;

  return thunk for @escaping @callee_guaranteed () -> (@unowned Int32)(*(uint64_t (**)(void))(v1 + 16), a1);
}

uint64_t sub_2475516D4()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t _s2os14OSLogArgumentsV6appendyyxycs17FixedWidthIntegerRzlFySpys5UInt8VGz_SpySo8NSObjectCSgGSgzSpyypGSgztcfU_TA_0(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;

  v8 = *(_QWORD *)(v3 + 16);
  v9 = *(_QWORD *)(v3 + 24);
  v4 = lazy protocol witness table accessor for type Int32 and conformance Int32();
  return closure #1 in OSLogArguments.append<A>(_:)(a1, a2, a3, v8, v9, MEMORY[0x24BEE3F88], v4);
}

unint64_t lazy protocol witness table accessor for type Int32 and conformance Int32()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type Int32 and conformance Int32;
  if (!lazy protocol witness table cache variable for type Int32 and conformance Int32)
  {
    v0 = MEMORY[0x24957D92C](MEMORY[0x24BEE3FD8], MEMORY[0x24BEE3F88]);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type Int32 and conformance Int32);
    return v0;
  }
  return v2;
}

uint64_t sub_2475517D8()
{
  return swift_deallocObject();
}

uint64_t sub_247551800()
{
  return swift_deallocObject();
}

uint64_t sub_247551828()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_247551864()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2475518A0()
{
  return swift_deallocObject();
}

uint64_t sub_2475518C8()
{
  return swift_deallocObject();
}

uint64_t sub_2475518F0()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_24755192C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_247551968()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_2475519A4()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t sub_2475519E0()
{
  return swift_deallocObject();
}

uint64_t sub_247551A08()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t sub_247551A44()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t sub_247551A80()
{
  return swift_deallocObject();
}

uint64_t sub_247551AA8()
{
  return swift_deallocObject();
}

uint64_t sub_247551AD0()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_247551B0C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_247551B48()
{
  return swift_deallocObject();
}

uint64_t sub_247551B70()
{
  return swift_deallocObject();
}

uint64_t sub_247551B98()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_247551BD4()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_247551C10()
{
  return swift_deallocObject();
}

uint64_t sub_247551C38()
{
  return swift_deallocObject();
}

uint64_t sub_247551C60()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_247551C9C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_247551CD8()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_247551D14()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_247551D50()
{
  return swift_deallocObject();
}

uint64_t sub_247551D78()
{
  return swift_deallocObject();
}

uint64_t sub_247551DA0()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_247551DDC()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_247551E18()
{
  return swift_deallocObject();
}

uint64_t sub_247551E40()
{
  return swift_deallocObject();
}

uint64_t sub_247551E68()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_247551EA4()
{
  swift_release();
  return swift_deallocObject();
}

unint64_t lazy protocol witness table accessor for type [String] and conformance [A]()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type [String] and conformance [A];
  if (!lazy protocol witness table cache variable for type [String] and conformance [A])
  {
    v0 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [String]);
    v1 = MEMORY[0x24957D92C](MEMORY[0x24BEE12E0], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance [A]);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type [String] and conformance [A];
  if (!lazy protocol witness table cache variable for type [String] and conformance [A])
  {
    v0 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [String]);
    v1 = MEMORY[0x24957D92C](MEMORY[0x24BEE12F8], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance [A]);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type [String] and conformance [A];
  if (!lazy protocol witness table cache variable for type [String] and conformance [A])
  {
    v0 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [String]);
    v1 = MEMORY[0x24957D92C](MEMORY[0x24BEE12C8], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance [A]);
    return v1;
  }
  return v3;
}

uint64_t sub_247551F50()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #1 in LogSpecificMedicationsIntentHandler.handle(intent:)()
{
  return implicit closure #1 in LogSpecificMedicationsIntentHandler.handle(intent:)();
}

uint64_t sub_247551F94()
{
  return swift_deallocObject();
}

uint64_t sub_247551FBC()
{
  return swift_deallocObject();
}

uint64_t sub_247551FE4()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_247552020()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_24755205C()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 24));
  return swift_deallocObject();
}

uint64_t partial apply for @objc closure #1 in LogSpecificMedicationsIntentHandler.handle(intent:)()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  const void *v4;
  void *v5;
  void *v6;

  *(_QWORD *)(v1 + 16) = v1;
  v6 = (void *)v0[2];
  v4 = (const void *)v0[3];
  v5 = (void *)v0[4];
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 24) = v2;
  *v2 = *(_QWORD *)(v1 + 16);
  v2[1] = _sIeghH_IeAgH_TRTQ0_;
  return ((uint64_t (*)(void *, const void *, void *))((char *)&async function pointer to @objc closure #1 in LogSpecificMedicationsIntentHandler.handle(intent:)
                                                               + async function pointer to @objc closure #1 in LogSpecificMedicationsIntentHandler.handle(intent:)))(v6, v4, v5);
}

unint64_t type metadata accessor for HKMedicationIdentifier()
{
  unint64_t ObjCClassMetadata;
  uint64_t v2;

  v2 = lazy cache variable for type metadata for HKMedicationIdentifier;
  if (!lazy cache variable for type metadata for HKMedicationIdentifier)
  {
    objc_opt_self();
    ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for HKMedicationIdentifier);
    return ObjCClassMetadata;
  }
  return v2;
}

uint64_t sub_2475521B8()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t sub_2475521F4()
{
  return swift_deallocObject();
}

uint64_t sub_24755221C()
{
  return swift_deallocObject();
}

uint64_t sub_247552244()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_247552280()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2475522BC()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2475522F8()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t sub_247552334()
{
  return swift_deallocObject();
}

uint64_t sub_24755235C()
{
  return swift_deallocObject();
}

uint64_t sub_247552384()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2475523C0()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2475523FC()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_247552438()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(type metadata accessor for DateInterval() - 8);
  (*(void (**)(unint64_t))(v1 + 8))(v0 + ((*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80)));
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #1 in SpecificMedicationsPersistor.saveMedication(named:medStatusTaken:dosage:dosageUnit:)()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for DateInterval() - 8) + 80);
  return implicit closure #1 in SpecificMedicationsPersistor.saveScheduledMedication(specifiedDateInterval:medStatusTaken:)(v0 + ((v1 + 16) & ~v1));
}

uint64_t sub_2475524D8()
{
  return swift_deallocObject();
}

uint64_t sub_247552500()
{
  return swift_deallocObject();
}

uint64_t sub_247552528()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_247552564()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2475525A0()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_2475525DC()
{
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #2 in SpecificMedicationsPersistor.saveMedication(named:medStatusTaken:dosage:dosageUnit:)()
{
  uint64_t v0;

  return implicit closure #2 in SpecificMedicationsPersistor.saveScheduledMedication(specifiedDateInterval:medStatusTaken:)(v0);
}

uint64_t sub_24755260C()
{
  return swift_deallocObject();
}

uint64_t sub_247552634()
{
  return swift_deallocObject();
}

uint64_t sub_24755265C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_247552698()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2475526D4()
{
  return swift_deallocObject();
}

uint64_t sub_2475526FC()
{
  return swift_deallocObject();
}

uint64_t sub_247552724()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_247552760()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_24755279C()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

unint64_t lazy protocol witness table accessor for type String? and conformance <A> A?()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = lazy protocol witness table cache variable for type String? and conformance <A> A?;
  if (!lazy protocol witness table cache variable for type String? and conformance <A> A?)
  {
    v0 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for String?);
    v4 = MEMORY[0x24BEE0D10];
    v1 = MEMORY[0x24957D92C](MEMORY[0x24BEE4AB0], v0, &v4);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type String? and conformance <A> A?);
    return v1;
  }
  return v3;
}

unint64_t lazy protocol witness table accessor for type [String?] and conformance [A]()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type [String?] and conformance [A];
  if (!lazy protocol witness table cache variable for type [String?] and conformance [A])
  {
    v0 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [String?]);
    v1 = MEMORY[0x24957D92C](MEMORY[0x24BEE12C8], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type [String?] and conformance [A]);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type [String?] and conformance [A];
  if (!lazy protocol witness table cache variable for type [String?] and conformance [A])
  {
    v0 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [String?]);
    v1 = MEMORY[0x24957D92C](MEMORY[0x24BEE12F8], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type [String?] and conformance [A]);
    return v1;
  }
  return v3;
}

unint64_t lazy protocol witness table accessor for type Set<String?> and conformance Set<A>()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type Set<String?> and conformance Set<A>;
  if (!lazy protocol witness table cache variable for type Set<String?> and conformance Set<A>)
  {
    v0 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Set<String?>);
    v1 = MEMORY[0x24957D92C](MEMORY[0x24BEE1718], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type Set<String?> and conformance Set<A>);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type Set<String?> and conformance Set<A>;
  if (!lazy protocol witness table cache variable for type Set<String?> and conformance Set<A>)
  {
    v0 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Set<String?>);
    v1 = MEMORY[0x24957D92C](MEMORY[0x24BEE1730], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type Set<String?> and conformance Set<A>);
    return v1;
  }
  return v3;
}

id partial apply for closure #2 in SpecificMedicationsPersistor.saveMedication(named:medStatusTaken:dosage:dosageUnit:)@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  return closure #2 in SpecificMedicationsPersistor.saveMedication(named:medStatusTaken:dosage:dosageUnit:)(a1, *(_QWORD *)(v2 + 16), a2);
}

unint64_t lazy protocol witness table accessor for type [HKUserTrackedMedication] and conformance [A]()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type [HKUserTrackedMedication] and conformance [A];
  if (!lazy protocol witness table cache variable for type [HKUserTrackedMedication] and conformance [A])
  {
    v0 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [HKUserTrackedMedication]);
    v1 = MEMORY[0x24957D92C](MEMORY[0x24BEE12E0], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type [HKUserTrackedMedication] and conformance [A]);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type [HKUserTrackedMedication] and conformance [A];
  if (!lazy protocol witness table cache variable for type [HKUserTrackedMedication] and conformance [A])
  {
    v0 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [HKUserTrackedMedication]);
    v1 = MEMORY[0x24957D92C](MEMORY[0x24BEE12F0], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type [HKUserTrackedMedication] and conformance [A]);
    return v1;
  }
  return v3;
}

uint64_t sub_2475529CC()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #4 in SpecificMedicationsPersistor.saveMedication(named:medStatusTaken:dosage:dosageUnit:)()
{
  uint64_t v0;

  return implicit closure #4 in SpecificMedicationsPersistor.saveMedication(named:medStatusTaken:dosage:dosageUnit:)(*(_QWORD *)(v0 + 16));
}

uint64_t sub_247552A10()
{
  return swift_deallocObject();
}

uint64_t sub_247552A38()
{
  return swift_deallocObject();
}

uint64_t sub_247552A60()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_247552A9C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_247552AD8()
{
  return swift_deallocObject();
}

uint64_t sub_247552B00()
{
  return swift_deallocObject();
}

uint64_t sub_247552B28()
{
  return swift_deallocObject();
}

uint64_t sub_247552B50()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_247552B8C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_247552BC8()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_247552C04()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #6 in SpecificMedicationsPersistor.saveMedication(named:medStatusTaken:dosage:dosageUnit:)@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  return implicit closure #8 in SpecificMedicationsPersistor.saveWithID(scheduleID:medicationIDs:medStatus:dosage:dosageUnit:confirmedAsNeeded:confirmedAsScheduled:)(v1, a1);
}

uint64_t sub_247552C48()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t _s2os18OSLogInterpolationV06appendC0_5align7privacyyxyXA_AA0B15StringAlignmentVAA0B7PrivacyVts06CustomG11ConvertibleRzlFSSycfu_TA_3()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v5 = *(_QWORD *)(v0 + 16);
  v3 = *(_QWORD *)(v0 + 24);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String?]);
  v1 = lazy protocol witness table accessor for type [String?] and conformance [A]();
  return implicit closure #1 in OSLogInterpolation.appendInterpolation<A>(_:align:privacy:)(v5, v3, v4, v1);
}

uint64_t partial apply for implicit closure #7 in SpecificMedicationsPersistor.saveMedication(named:medStatusTaken:dosage:dosageUnit:)()
{
  uint64_t v0;

  return implicit closure #5 in SpecificMedicationsPersistor.saveScheduledMedication(named:specifiedDateInterval:medStatusTaken:)(v0);
}

uint64_t sub_247552D48()
{
  return swift_deallocObject();
}

uint64_t sub_247552D70()
{
  return swift_deallocObject();
}

uint64_t sub_247552D98()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_247552DD4()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_247552E10()
{
  return swift_deallocObject();
}

uint64_t sub_247552E38()
{
  return swift_deallocObject();
}

uint64_t sub_247552E60()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_247552E9C()
{
  swift_release();
  return swift_deallocObject();
}

id partial apply for closure #1 in SpecificMedicationsPersistor.saveAsNeededWithStrength(medicationID:medStatusTaken:dosage:dosageUnit:strength:strengthUnit:)@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  return closure #1 in SpecificMedicationsPersistor.saveAsNeededWithStrength(medicationID:medStatusTaken:dosage:dosageUnit:strength:strengthUnit:)(a1, *(_QWORD *)(v2 + 16), a2);
}

uint64_t sub_247552F00()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_247552F3C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_247553034()
{
  return swift_deallocObject();
}

uint64_t sub_24755305C()
{
  return swift_deallocObject();
}

uint64_t sub_247553084()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2475530C0()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2475530FC()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t sub_247553138()
{
  return swift_deallocObject();
}

uint64_t sub_247553160()
{
  return swift_deallocObject();
}

uint64_t sub_247553188()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2475531C4()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_247553200()
{
  swift_release();
  return swift_deallocObject();
}

unint64_t type metadata accessor for HKUserTrackedMedication()
{
  unint64_t ObjCClassMetadata;
  uint64_t v2;

  v2 = lazy cache variable for type metadata for HKUserTrackedMedication;
  if (!lazy cache variable for type metadata for HKUserTrackedMedication)
  {
    objc_opt_self();
    ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for HKUserTrackedMedication);
    return ObjCClassMetadata;
  }
  return v2;
}

uint64_t partial apply for closure #1 in SpecificMedicationsPersistor.getMedicationsMatching(medicationIDs:strength:strengthUnit:isAsNeeded:)(id *a1)
{
  return closure #1 in SpecificMedicationsPersistor.getMedicationsMatching(medicationIDs:strength:strengthUnit:isAsNeeded:)(a1) & 1;
}

uint64_t partial apply for closure #2 in SpecificMedicationsPersistor.getMedicationsMatching(medicationIDs:strength:strengthUnit:isAsNeeded:)(id *a1)
{
  uint64_t v1;

  return closure #2 in SpecificMedicationsPersistor.getMedicationsMatching(medicationIDs:strength:strengthUnit:isAsNeeded:)(a1, *(_BYTE *)(v1 + 16) & 1) & 1;
}

uint64_t partial apply for closure #3 in SpecificMedicationsPersistor.getMedicationsMatching(medicationIDs:strength:strengthUnit:isAsNeeded:)(uint64_t a1)
{
  uint64_t v1;

  return closure #3 in SpecificMedicationsPersistor.getMedicationsMatching(medicationIDs:strength:strengthUnit:isAsNeeded:)(a1, *(_QWORD *)(v1 + 16), *(_BYTE *)(v1 + 24) & 1, *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40)) & 1;
}

uint64_t sub_24755339C()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #2 in SpecificMedicationsPersistor.getMedicationsMatching(medicationIDs:strength:strengthUnit:isAsNeeded:)()
{
  uint64_t v0;

  return implicit closure #2 in SpecificMedicationsPersistor.getMedicationsMatching(medicationIDs:strength:strengthUnit:isAsNeeded:)(*(_QWORD *)(v0 + 16));
}

uint64_t sub_2475533E0()
{
  return swift_deallocObject();
}

uint64_t sub_247553408()
{
  return swift_deallocObject();
}

uint64_t sub_247553430()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_24755346C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2475534A8()
{
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #1 in SpecificMedicationsPersistor.writeDoseEvent(medicationController:doseEvents:medStatusTaken:medicationIDPresent:dosage:dosageUnit:)()
{
  return implicit closure #6 in SpecificMedicationsPersistor.saveWithID(scheduleID:medicationIDs:medStatus:dosage:dosageUnit:confirmedAsNeeded:confirmedAsScheduled:)();
}

uint64_t sub_2475534E0()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #2 in SpecificMedicationsPersistor.writeDoseEvent(medicationController:doseEvents:medStatusTaken:medicationIDPresent:dosage:dosageUnit:)()
{
  return implicit closure #7 in SpecificMedicationsPersistor.saveWithID(scheduleID:medicationIDs:medStatus:dosage:dosageUnit:confirmedAsNeeded:confirmedAsScheduled:)();
}

uint64_t sub_247553528()
{
  return swift_deallocObject();
}

uint64_t sub_247553550()
{
  return swift_deallocObject();
}

uint64_t sub_247553578()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2475535B4()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2475535F0()
{
  return swift_deallocObject();
}

uint64_t sub_247553618()
{
  return swift_deallocObject();
}

uint64_t sub_247553640()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_24755367C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2475536B8()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t partial apply for specialized implicit closure #10 in SpecificMedicationsPersistor.writeDoseEvent(medicationController:doseEvents:medStatusTaken:medicationIDPresent:dosage:dosageUnit:)()
{
  uint64_t v0;

  return specialized implicit closure #12 in SpecificMedicationsPersistor.saveWithID(scheduleID:medicationIDs:medStatus:dosage:dosageUnit:confirmedAsNeeded:confirmedAsScheduled:)(*(_QWORD *)(v0 + 16));
}

uint64_t sub_2475536FC()
{
  return swift_deallocObject();
}

uint64_t sub_247553724()
{
  return swift_deallocObject();
}

uint64_t sub_24755374C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_247553788()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2475537C4()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #3 in SpecificMedicationsPersistor.writeDoseEvent(medicationController:doseEvents:medStatusTaken:medicationIDPresent:dosage:dosageUnit:)()
{
  uint64_t v0;

  return implicit closure #3 in SpecificMedicationsPersistor.writeDoseEvent(medicationController:doseEvents:medStatusTaken:medicationIDPresent:dosage:dosageUnit:)(*(void **)(v0 + 16));
}

uint64_t sub_247553808()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #4 in SpecificMedicationsPersistor.writeDoseEvent(medicationController:doseEvents:medStatusTaken:medicationIDPresent:dosage:dosageUnit:)()
{
  uint64_t v0;

  return implicit closure #4 in SpecificMedicationsPersistor.writeDoseEvent(medicationController:doseEvents:medStatusTaken:medicationIDPresent:dosage:dosageUnit:)(*(void **)(v0 + 16));
}

uint64_t sub_24755384C()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #5 in SpecificMedicationsPersistor.writeDoseEvent(medicationController:doseEvents:medStatusTaken:medicationIDPresent:dosage:dosageUnit:)()
{
  uint64_t v0;

  return implicit closure #5 in SpecificMedicationsPersistor.writeDoseEvent(medicationController:doseEvents:medStatusTaken:medicationIDPresent:dosage:dosageUnit:)(*(void **)(v0 + 16));
}

uint64_t sub_247553890()
{
  return swift_deallocObject();
}

uint64_t sub_2475538B8()
{
  return swift_deallocObject();
}

uint64_t sub_2475538E0()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_24755391C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_247553958()
{
  return swift_deallocObject();
}

uint64_t sub_247553980()
{
  return swift_deallocObject();
}

uint64_t sub_2475539A8()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2475539E4()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_247553A20()
{
  return swift_deallocObject();
}

uint64_t sub_247553A48()
{
  return swift_deallocObject();
}

uint64_t sub_247553A70()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_247553AAC()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_247553AE8()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t sub_247553B24()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t sub_247553B60()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t sub_247553B9C()
{
  return swift_deallocObject();
}

uint64_t sub_247553BC4()
{
  return swift_deallocObject();
}

uint64_t sub_247553BEC()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_247553C28()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_247553C64()
{
  return swift_deallocObject();
}

uint64_t sub_247553C8C()
{
  return swift_deallocObject();
}

uint64_t sub_247553CB4()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_247553CF0()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_247553D2C()
{
  return swift_deallocObject();
}

uint64_t sub_247553D54()
{
  return swift_deallocObject();
}

uint64_t sub_247553D7C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_247553DB8()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_247553E64()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_247553EA0()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #2 in SpecificMedicationsPersistor.saveWithID(scheduleID:medicationIDs:medStatus:dosage:dosageUnit:confirmedAsNeeded:confirmedAsScheduled:)()
{
  return implicit closure #2 in SpecificMedicationsPersistor.saveWithID(scheduleID:medicationIDs:medStatus:dosage:dosageUnit:confirmedAsNeeded:confirmedAsScheduled:)();
}

uint64_t sub_247553EE4()
{
  return swift_deallocObject();
}

uint64_t sub_247553F0C()
{
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #4 in SpecificMedicationsPersistor.saveWithID(scheduleID:medicationIDs:medStatus:dosage:dosageUnit:confirmedAsNeeded:confirmedAsScheduled:)()
{
  return implicit closure #4 in SpecificMedicationsPersistor.saveWithID(scheduleID:medicationIDs:medStatus:dosage:dosageUnit:confirmedAsNeeded:confirmedAsScheduled:)();
}

uint64_t sub_247553F3C()
{
  return swift_deallocObject();
}

uint64_t sub_247553F64()
{
  return swift_deallocObject();
}

uint64_t sub_247553F8C()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_247553FC8()
{
  return swift_deallocObject();
}

uint64_t sub_247553FF0()
{
  return swift_deallocObject();
}

uint64_t sub_247554018()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_247554054()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_247554090()
{
  return swift_deallocObject();
}

uint64_t sub_2475540B8()
{
  return swift_deallocObject();
}

uint64_t sub_2475540E0()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_24755411C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_247554158()
{
  return swift_deallocObject();
}

uint64_t sub_247554180()
{
  return swift_deallocObject();
}

uint64_t sub_2475541A8()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2475541E4()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_247554220()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_24755425C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_247554298()
{
  return swift_deallocObject();
}

uint64_t sub_2475542C0()
{
  return swift_deallocObject();
}

uint64_t sub_2475542E8()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_247554324()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_247554360()
{
  return swift_deallocObject();
}

uint64_t sub_247554388()
{
  return swift_deallocObject();
}

uint64_t sub_2475543B0()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2475543EC()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_247554428()
{
  return swift_deallocObject();
}

uint64_t sub_247554450()
{
  return swift_deallocObject();
}

uint64_t sub_247554478()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2475544B4()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2475544F0()
{
  return swift_deallocObject();
}

uint64_t sub_247554518()
{
  return swift_deallocObject();
}

uint64_t sub_247554540()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_24755457C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #3 in SpecificMedicationsPersistor.saveWithID(scheduleID:medicationIDs:medStatus:dosage:dosageUnit:confirmedAsNeeded:confirmedAsScheduled:)(id *a1)
{
  uint64_t v1;

  return closure #1 in SpecificMedicationsPersistor.saveWithID(scheduleID:medicationIDs:medStatus:dosage:dosageUnit:confirmedAsNeeded:confirmedAsScheduled:)(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24)) & 1;
}

uint64_t sub_2475545E4()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_247554620()
{
  return swift_deallocObject();
}

uint64_t sub_247554648()
{
  return swift_deallocObject();
}

uint64_t sub_247554670()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2475546AC()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2475546E8()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_247554724()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_247554760()
{
  return swift_deallocObject();
}

uint64_t sub_247554788()
{
  return swift_deallocObject();
}

uint64_t sub_2475547B0()
{
  return swift_deallocObject();
}

uint64_t sub_2475547D8()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_247554814()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_247554850()
{
  return swift_deallocObject();
}

uint64_t sub_247554878()
{
  return swift_deallocObject();
}

uint64_t sub_2475548A0()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2475548DC()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_247554918()
{
  return swift_deallocObject();
}

uint64_t sub_247554940()
{
  return swift_deallocObject();
}

uint64_t sub_247554968()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2475549A4()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2475549E0()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_247554A1C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_247554A58()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_247554B50()
{
  return swift_deallocObject();
}

uint64_t sub_247554B78()
{
  return swift_deallocObject();
}

uint64_t sub_247554BA0()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_247554BDC()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_247554C18()
{
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #1 in SpecificMedicationsPersistor.updateDosageForDoseEvent(doseEvent:inputDosage:inputDosageUnit:)()
{
  return implicit closure #16 in SpecificMedicationsPersistor.saveScheduledMedication(specifiedDateInterval:medStatusTaken:)();
}

uint64_t sub_247554C4C()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_247554C88()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_247554CC4()
{
  return swift_deallocObject();
}

uint64_t sub_247554CEC()
{
  return swift_deallocObject();
}

uint64_t sub_247554D14()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_247554D50()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_247554D8C()
{
  return swift_deallocObject();
}

uint64_t sub_247554DB4()
{
  return swift_deallocObject();
}

uint64_t sub_247554DDC()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_247554E18()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_247554E54()
{
  return swift_deallocObject();
}

uint64_t sub_247554E7C()
{
  return swift_deallocObject();
}

uint64_t sub_247554EA4()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_247554EE0()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_247554F1C()
{
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #12 in SpecificMedicationsPersistor.updateDosageForDoseEvent(doseEvent:inputDosage:inputDosageUnit:)()
{
  return implicit closure #12 in SpecificMedicationsPersistor.updateDosageForDoseEvent(doseEvent:inputDosage:inputDosageUnit:)();
}

uint64_t sub_247554F4C()
{
  return swift_deallocObject();
}

uint64_t sub_247554F74()
{
  return swift_deallocObject();
}

uint64_t sub_247554F9C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_247554FD8()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_247555014()
{
  return swift_deallocObject();
}

uint64_t sub_24755503C()
{
  return swift_deallocObject();
}

uint64_t sub_247555064()
{
  return swift_deallocObject();
}

uint64_t sub_24755508C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2475550C8()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_247555104()
{
  return swift_deallocObject();
}

uint64_t sub_24755512C()
{
  return swift_deallocObject();
}

uint64_t sub_247555154()
{
  return swift_deallocObject();
}

uint64_t sub_24755517C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2475551B8()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2475551F4()
{
  return swift_deallocObject();
}

uint64_t sub_24755521C()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_247555258()
{
  return swift_deallocObject();
}

uint64_t sub_247555280()
{
  return swift_deallocObject();
}

uint64_t sub_2475552A8()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2475552E4()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_247555320()
{
  return swift_deallocObject();
}

uint64_t sub_247555348()
{
  return swift_deallocObject();
}

uint64_t sub_247555370()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2475553AC()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2475553E8()
{
  return swift_deallocObject();
}

uint64_t sub_247555410()
{
  return swift_deallocObject();
}

uint64_t sub_247555438()
{
  return swift_deallocObject();
}

uint64_t sub_247555460()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_24755549C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2475554D8()
{
  return swift_deallocObject();
}

uint64_t sub_247555500()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_24755553C()
{
  return swift_deallocObject();
}

uint64_t sub_247555564()
{
  return swift_deallocObject();
}

uint64_t sub_24755558C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2475555C8()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_247555604()
{
  return swift_deallocObject();
}

uint64_t sub_24755562C()
{
  return swift_deallocObject();
}

uint64_t sub_247555654()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_247555690()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t outlined init with copy of Double?(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = a2;
  *(_QWORD *)a2 = *(_QWORD *)a1;
  *(_BYTE *)(a2 + 8) = *(_BYTE *)(a1 + 8);
  return result;
}

uint64_t sub_2475556E8()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #2 in SpecificMedicationsPersistor.buildMatchedMedName(from:shouldIncludeAsNeededParams:)()
{
  uint64_t v0;

  return implicit closure #2 in SpecificMedicationsPersistor.buildMatchedMedName(from:shouldIncludeAsNeededParams:)(*(void **)(v0 + 16));
}

uint64_t sub_24755572C()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_247555768()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #4 in SpecificMedicationsPersistor.buildMatchedMedName(from:shouldIncludeAsNeededParams:)()
{
  uint64_t v0;

  return implicit closure #4 in SpecificMedicationsPersistor.buildMatchedMedName(from:shouldIncludeAsNeededParams:)(*(void **)(v0 + 16));
}

uint64_t sub_2475557AC()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #5 in SpecificMedicationsPersistor.buildMatchedMedName(from:shouldIncludeAsNeededParams:)()
{
  uint64_t v0;

  return implicit closure #5 in SpecificMedicationsPersistor.buildMatchedMedName(from:shouldIncludeAsNeededParams:)(*(void **)(v0 + 16));
}

uint64_t sub_2475557F0()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #6 in SpecificMedicationsPersistor.buildMatchedMedName(from:shouldIncludeAsNeededParams:)()
{
  uint64_t v0;

  return implicit closure #6 in SpecificMedicationsPersistor.buildMatchedMedName(from:shouldIncludeAsNeededParams:)(*(void **)(v0 + 16));
}

uint64_t sub_247555834()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #7 in SpecificMedicationsPersistor.buildMatchedMedName(from:shouldIncludeAsNeededParams:)()
{
  uint64_t v0;

  return implicit closure #6 in SpecificMedicationsPersistor.saveScheduledMedication(specifiedDateInterval:medStatusTaken:)(*(void **)(v0 + 16));
}

uint64_t sub_247555878()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t sub_2475558B4()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t sub_2475558F0()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #10 in SpecificMedicationsPersistor.buildMatchedMedName(from:shouldIncludeAsNeededParams:)()
{
  uint64_t v0;

  return implicit closure #10 in SpecificMedicationsPersistor.buildMatchedMedName(from:shouldIncludeAsNeededParams:)(*(void **)(v0 + 16));
}

uint64_t sub_247555934()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #11 in SpecificMedicationsPersistor.buildMatchedMedName(from:shouldIncludeAsNeededParams:)()
{
  uint64_t v0;

  return implicit closure #11 in SpecificMedicationsPersistor.buildMatchedMedName(from:shouldIncludeAsNeededParams:)(*(void **)(v0 + 16));
}

uint64_t sub_247555978()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #12 in SpecificMedicationsPersistor.buildMatchedMedName(from:shouldIncludeAsNeededParams:)()
{
  uint64_t v0;

  return implicit closure #12 in SpecificMedicationsPersistor.buildMatchedMedName(from:shouldIncludeAsNeededParams:)(*(void **)(v0 + 16));
}

uint64_t sub_2475559BC()
{
  return swift_deallocObject();
}

uint64_t sub_2475559E4()
{
  return swift_deallocObject();
}

uint64_t sub_247555A0C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_247555A48()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_247555A84()
{
  return swift_deallocObject();
}

uint64_t sub_247555AAC()
{
  return swift_deallocObject();
}

uint64_t sub_247555AD4()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_247555B10()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_247555B4C()
{
  return swift_deallocObject();
}

uint64_t sub_247555B74()
{
  return swift_deallocObject();
}

uint64_t sub_247555B9C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_247555BD8()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_247555C14()
{
  return swift_deallocObject();
}

uint64_t sub_247555C3C()
{
  return swift_deallocObject();
}

uint64_t sub_247555C64()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_247555CA0()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_247555CDC()
{
  return swift_deallocObject();
}

uint64_t sub_247555D04()
{
  return swift_deallocObject();
}

uint64_t sub_247555D2C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_247555D68()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_247555DA4()
{
  return swift_deallocObject();
}

uint64_t sub_247555DCC()
{
  return swift_deallocObject();
}

uint64_t sub_247555DF4()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_247555E30()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_247555E6C()
{
  return swift_deallocObject();
}

uint64_t sub_247555E94()
{
  return swift_deallocObject();
}

uint64_t sub_247555EBC()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_247555EF8()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_247555F34()
{
  return swift_deallocObject();
}

uint64_t sub_247555F5C()
{
  return swift_deallocObject();
}

uint64_t sub_247555F84()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_247555FC0()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_247555FFC()
{
  return swift_deallocObject();
}

uint64_t sub_247556024()
{
  return swift_deallocObject();
}

uint64_t sub_24755604C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_247556088()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2475560C4()
{
  return swift_deallocObject();
}

uint64_t sub_2475560EC()
{
  return swift_deallocObject();
}

uint64_t sub_247556114()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_247556150()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_24755618C()
{
  return swift_deallocObject();
}

uint64_t sub_2475561B4()
{
  return swift_deallocObject();
}

uint64_t sub_2475561DC()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_247556218()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_247556254()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_247556290()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2475562CC()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(type metadata accessor for DateInterval() - 8);
  (*(void (**)(unint64_t))(v1 + 8))(v0 + ((*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80)));
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #2 in SpecificMedicationsPersistor.saveScheduledMedication(named:specifiedDateInterval:medStatusTaken:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for DateInterval() - 8) + 80);
  return implicit closure #2 in SpecificMedicationsPersistor.saveScheduledMedication(named:specifiedDateInterval:medStatusTaken:)(v1 + ((v2 + 16) & ~v2), a1);
}

uint64_t sub_24755637C()
{
  swift_release();
  return swift_deallocObject();
}

unint64_t lazy protocol witness table accessor for type DateInterval and conformance DateInterval()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type DateInterval and conformance DateInterval;
  if (!lazy protocol witness table cache variable for type DateInterval and conformance DateInterval)
  {
    v0 = type metadata accessor for DateInterval();
    v1 = MEMORY[0x24957D92C](MEMORY[0x24BDCB8B8], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type DateInterval and conformance DateInterval);
    return v1;
  }
  return v3;
}

uint64_t sub_247556470()
{
  return swift_deallocObject();
}

uint64_t sub_247556498()
{
  return swift_deallocObject();
}

uint64_t sub_2475564C0()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2475564FC()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_247556538()
{
  return swift_deallocObject();
}

uint64_t sub_247556560()
{
  return swift_deallocObject();
}

uint64_t sub_247556588()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2475565C4()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_247556600()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_24755663C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_247556734()
{
  return swift_deallocObject();
}

uint64_t sub_24755675C()
{
  return swift_deallocObject();
}

uint64_t sub_247556784()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2475567C0()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2475567FC()
{
  return swift_deallocObject();
}

uint64_t sub_247556824()
{
  return swift_deallocObject();
}

uint64_t sub_24755684C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_247556888()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2475568C4()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t sub_247556900()
{
  return swift_deallocObject();
}

uint64_t sub_247556928()
{
  return swift_deallocObject();
}

uint64_t sub_247556950()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_24755698C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2475569C8()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_247556A04()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(type metadata accessor for DateInterval() - 8);
  (*(void (**)(unint64_t))(v1 + 8))(v0 + ((*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80)));
  return swift_deallocObject();
}

uint64_t sub_247556A74()
{
  return swift_deallocObject();
}

uint64_t sub_247556A9C()
{
  return swift_deallocObject();
}

uint64_t sub_247556AC4()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_247556B00()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_247556B3C()
{
  return swift_deallocObject();
}

uint64_t sub_247556B64()
{
  return swift_deallocObject();
}

uint64_t sub_247556B8C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_247556BC8()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_247556C04()
{
  return swift_deallocObject();
}

uint64_t sub_247556C2C()
{
  return swift_deallocObject();
}

uint64_t sub_247556C54()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_247556C90()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_247556CCC()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_247556D08()
{
  return swift_deallocObject();
}

uint64_t sub_247556D30()
{
  return swift_deallocObject();
}

uint64_t sub_247556D58()
{
  return swift_deallocObject();
}

uint64_t sub_247556D80()
{
  return swift_deallocObject();
}

uint64_t sub_247556DA8()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_247556DE4()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_247556E20()
{
  return swift_deallocObject();
}

uint64_t sub_247556E48()
{
  return swift_deallocObject();
}

uint64_t sub_247556E70()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_247556EAC()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_247556EE8()
{
  return swift_deallocObject();
}

uint64_t sub_247556F10()
{
  return swift_deallocObject();
}

uint64_t sub_247556F38()
{
  return swift_deallocObject();
}

uint64_t sub_247556F60()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_247556F9C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_247556FD8()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_247557014()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #7 in SpecificMedicationsPersistor.saveScheduledMedication(specifiedDateInterval:medStatusTaken:)()
{
  uint64_t v0;

  return implicit closure #7 in SpecificMedicationsPersistor.saveScheduledMedication(specifiedDateInterval:medStatusTaken:)(v0);
}

uint64_t sub_247557058()
{
  return swift_deallocObject();
}

uint64_t sub_247557080()
{
  return swift_deallocObject();
}

uint64_t sub_2475570A8()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2475570E4()
{
  swift_release();
  return swift_deallocObject();
}

_OWORD *outlined init with take of (key: String?, value: (scheduleDate: Date?, medID: String, count: Int))?(_OWORD *a1, _OWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *__dst;
  char *__src;
  uint64_t v8;
  uint64_t v9;
  uint64_t v12;
  uint64_t v13;

  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String?, value: (scheduleDate: Date?, medID: String, count: Int)));
  v13 = *(_QWORD *)(v12 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t))(v13 + 48))(a1, 1))
  {
    v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String?, value: (scheduleDate: Date?, medID: String, count: Int))?);
    memcpy(a2, a1, *(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  }
  else
  {
    *a2 = *a1;
    __dst = (char *)a2 + *(int *)(v12 + 48);
    __src = (char *)a1 + *(int *)(v12 + 48);
    v8 = type metadata accessor for Date();
    v9 = *(_QWORD *)(v8 - 8);
    if ((*(unsigned int (**)(char *, uint64_t))(v9 + 48))(__src, 1))
    {
      v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
      memcpy(__dst, __src, *(_QWORD *)(*(_QWORD *)(v2 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v9 + 32))(__dst, __src, v8);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56))(__dst, 0, 1, v8);
    }
    v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (scheduleDate: Date?, medID: String, count: Int));
    *(_OWORD *)&__dst[*(int *)(v3 + 48)] = *(_OWORD *)&__src[*(int *)(v3 + 48)];
    *(_QWORD *)&__dst[*(int *)(v3 + 64)] = *(_QWORD *)&__src[*(int *)(v3 + 64)];
    (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v13 + 56))(a2, 0, 1, v12);
  }
  return a2;
}

uint64_t sub_247557340()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #9 in SpecificMedicationsPersistor.saveScheduledMedication(specifiedDateInterval:medStatusTaken:)()
{
  uint64_t v0;

  return implicit closure #9 in SpecificMedicationsPersistor.saveScheduledMedication(specifiedDateInterval:medStatusTaken:)(v0);
}

uint64_t partial apply for implicit closure #10 in SpecificMedicationsPersistor.saveScheduledMedication(specifiedDateInterval:medStatusTaken:)()
{
  uint64_t v0;

  return implicit closure #10 in SpecificMedicationsPersistor.saveScheduledMedication(specifiedDateInterval:medStatusTaken:)(v0);
}

uint64_t partial apply for implicit closure #11 in SpecificMedicationsPersistor.saveScheduledMedication(specifiedDateInterval:medStatusTaken:)()
{
  uint64_t v0;

  return implicit closure #11 in SpecificMedicationsPersistor.saveScheduledMedication(specifiedDateInterval:medStatusTaken:)(v0);
}

uint64_t sub_247557394()
{
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #12 in SpecificMedicationsPersistor.saveScheduledMedication(specifiedDateInterval:medStatusTaken:)()
{
  uint64_t v0;

  return implicit closure #12 in SpecificMedicationsPersistor.saveScheduledMedication(specifiedDateInterval:medStatusTaken:)(*(_QWORD *)(v0 + 16));
}

uint64_t sub_2475573C4()
{
  return swift_deallocObject();
}

uint64_t sub_2475573EC()
{
  return swift_deallocObject();
}

uint64_t sub_247557414()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_247557450()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_24755748C()
{
  return swift_deallocObject();
}

uint64_t sub_2475574B4()
{
  return swift_deallocObject();
}

uint64_t sub_2475574DC()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_247557518()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_247557554()
{
  return swift_deallocObject();
}

uint64_t sub_24755757C()
{
  return swift_deallocObject();
}

uint64_t sub_2475575A4()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2475575E0()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_24755761C()
{
  return swift_deallocObject();
}

uint64_t sub_247557644()
{
  return swift_deallocObject();
}

uint64_t sub_24755766C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2475576A8()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2475576E4()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #4 in SpecificMedicationsPersistor.saveScheduledMedication(specifiedDateInterval:medStatusTaken:)()
{
  uint64_t v0;

  return implicit closure #4 in SpecificMedicationsPersistor.saveScheduledMedication(specifiedDateInterval:medStatusTaken:)(*(void **)(v0 + 16));
}

uint64_t sub_247557728()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #5 in SpecificMedicationsPersistor.saveScheduledMedication(specifiedDateInterval:medStatusTaken:)()
{
  uint64_t v0;

  return implicit closure #5 in SpecificMedicationsPersistor.saveScheduledMedication(specifiedDateInterval:medStatusTaken:)(*(void **)(v0 + 16));
}

uint64_t sub_24755776C()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t sub_2475577A8()
{
  return swift_deallocObject();
}

uint64_t sub_2475577D0()
{
  return swift_deallocObject();
}

uint64_t sub_2475577F8()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_247557834()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_247557870()
{
  return swift_deallocObject();
}

uint64_t sub_247557898()
{
  return swift_deallocObject();
}

uint64_t sub_2475578C0()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2475578FC()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_247557938()
{
  return swift_deallocObject();
}

uint64_t sub_247557960()
{
  return swift_deallocObject();
}

uint64_t sub_247557988()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2475579C4()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t outlined destroy of (scheduleDate: Date?, medID: String, count: Int)?(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (scheduleDate: Date?, medID: String, count: Int));
  if (!(*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(a1, 1))
  {
    v2 = type metadata accessor for Date();
    v3 = *(_QWORD *)(v2 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t))(v3 + 48))(a1, 1))
      (*(void (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
    swift_bridgeObjectRelease();
  }
  return a1;
}

uint64_t outlined destroy of (Date?, String, Int)?(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Date?, String, Int));
  if (!(*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(a1, 1))
  {
    v2 = type metadata accessor for Date();
    v3 = *(_QWORD *)(v2 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t))(v3 + 48))(a1, 1))
      (*(void (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
    swift_bridgeObjectRelease();
  }
  return a1;
}

uint64_t sub_247557B88()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t sub_247557BC4()
{
  return swift_deallocObject();
}

uint64_t sub_247557BEC()
{
  return swift_deallocObject();
}

uint64_t sub_247557C14()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_247557C50()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_247557C8C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in SpecificMedicationsPersistor.getAsNeededDosageUnit(for:dosageCount:)(id *a1)
{
  return closure #1 in SpecificMedicationsPersistor.getAsNeededStrengthFromHealthApp(for:)(a1) & 1;
}

uint64_t sub_247557CF4()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #1 in SpecificMedicationsPersistor.getAsNeededDosageUnit(for:dosageCount:)()
{
  return implicit closure #1 in SpecificMedicationsPersistor.getAsNeededDosageUnit(for:dosageCount:)();
}

uint64_t sub_247557D38()
{
  return swift_deallocObject();
}

uint64_t sub_247557D60()
{
  return swift_deallocObject();
}

uint64_t sub_247557D88()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_247557DC4()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_247557E00()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #2 in SpecificMedicationsPersistor.getAsNeededDosageUnit(for:dosageCount:)()
{
  uint64_t v0;

  return implicit closure #2 in SpecificMedicationsPersistor.getAsNeededDosageUnit(for:dosageCount:)(*(void **)(v0 + 16));
}

uint64_t sub_247557E44()
{
  return swift_deallocObject();
}

uint64_t sub_247557E6C()
{
  return swift_deallocObject();
}

uint64_t sub_247557E94()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_247557ED0()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_247557F0C()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t sub_247557F48()
{
  return swift_deallocObject();
}

uint64_t sub_247557F70()
{
  return swift_deallocObject();
}

uint64_t sub_247557F98()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_247557FD4()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_247558010()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t sub_24755804C()
{
  return swift_deallocObject();
}

uint64_t sub_247558074()
{
  return swift_deallocObject();
}

uint64_t sub_24755809C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2475580D8()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_247558114()
{
  swift_release();
  return swift_deallocObject();
}

unint64_t lazy protocol witness table accessor for type String and conformance String()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type String and conformance String;
  if (!lazy protocol witness table cache variable for type String and conformance String)
  {
    v0 = MEMORY[0x24957D92C](MEMORY[0x24BEE0D50], MEMORY[0x24BEE0D00]);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type String and conformance String);
    return v0;
  }
  return v2;
}

uint64_t sub_2475581B8()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_2475581F4()
{
  return swift_deallocObject();
}

uint64_t sub_24755821C()
{
  return swift_deallocObject();
}

uint64_t sub_247558244()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_247558280()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2475582BC()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t sub_2475582F8()
{
  return swift_deallocObject();
}

uint64_t sub_247558320()
{
  return swift_deallocObject();
}

uint64_t sub_247558348()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_247558384()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2475583C0()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_24755846C()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_2475584A8()
{
  return swift_deallocObject();
}

uint64_t sub_2475584D0()
{
  return swift_deallocObject();
}

uint64_t sub_2475584F8()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_247558534()
{
  swift_release();
  return swift_deallocObject();
}

void partial apply for closure #1 in SpecificMedicationsPersistor.doUTCQueryForMedications()(uint64_t a1)
{
  uint64_t v1;

  closure #1 in SpecificMedicationsPersistor.doUTCQueryForMedications()(a1, *(void **)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_24755857C()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #1 in SpecificMedicationsPersistor.UTCQuery()()
{
  uint64_t v0;

  return implicit closure #1 in SpecificMedicationsPersistor.UTCQuery()(*(void **)(v0 + 16));
}

uint64_t sub_2475585C0()
{
  return swift_deallocObject();
}

uint64_t sub_2475585E8()
{
  return swift_deallocObject();
}

uint64_t sub_247558610()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_24755864C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t type metadata accessor for LogSpecificMedicationsIntentHandler()
{
  return objc_opt_self();
}

ValueMetadata *type metadata accessor for SpecificMedicationsPersistor()
{
  return &type metadata for SpecificMedicationsPersistor;
}

unint64_t type metadata accessor for HKUserTrackedConceptQuery()
{
  unint64_t ObjCClassMetadata;
  uint64_t v2;

  v2 = lazy cache variable for type metadata for HKUserTrackedConceptQuery;
  if (!lazy cache variable for type metadata for HKUserTrackedConceptQuery)
  {
    objc_opt_self();
    ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for HKUserTrackedConceptQuery);
    return ObjCClassMetadata;
  }
  return v2;
}

unint64_t type metadata accessor for HKUserTrackedConceptType()
{
  unint64_t ObjCClassMetadata;
  uint64_t v2;

  v2 = lazy cache variable for type metadata for HKUserTrackedConceptType;
  if (!lazy cache variable for type metadata for HKUserTrackedConceptType)
  {
    objc_opt_self();
    ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for HKUserTrackedConceptType);
    return ObjCClassMetadata;
  }
  return v2;
}

uint64_t sub_247558788()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<[HKUserTrackedMedication], Error>)
                 - 8);
  (*(void (**)(unint64_t))(v1 + 8))(v0 + ((*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80)));
  return swift_deallocObject();
}

void partial apply for closure #1 in closure #1 in SpecificMedicationsPersistor.doUTCQueryForMedications()(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3;
  uint64_t v4;

  v4 = *(unsigned __int8 *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<[HKUserTrackedMedication], Error>)
                                      - 8)
                          + 80);
  closure #1 in closure #1 in SpecificMedicationsPersistor.doUTCQueryForMedications()(a1, a2, a3, v3 + ((v4 + 16) & ~v4));
}

uint64_t block_copy_helper_3(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a2 + 32);
  v5 = *(_QWORD *)(a2 + 40);
  swift_retain();
  result = a1;
  *(_QWORD *)(a1 + 32) = v4;
  *(_QWORD *)(a1 + 40) = v5;
  return result;
}

uint64_t block_destroy_helper_3()
{
  return swift_release();
}

unint64_t type metadata accessor for HKUserTrackedConcept()
{
  unint64_t ObjCClassMetadata;
  uint64_t v2;

  v2 = lazy cache variable for type metadata for HKUserTrackedConcept;
  if (!lazy cache variable for type metadata for HKUserTrackedConcept)
  {
    objc_opt_self();
    ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for HKUserTrackedConcept);
    return ObjCClassMetadata;
  }
  return v2;
}

unint64_t lazy protocol witness table accessor for type [HKUserTrackedConcept] and conformance [A]()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type [HKUserTrackedConcept] and conformance [A];
  if (!lazy protocol witness table cache variable for type [HKUserTrackedConcept] and conformance [A])
  {
    v0 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [HKUserTrackedConcept]);
    v1 = MEMORY[0x24957D92C](MEMORY[0x24BEE12E0], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type [HKUserTrackedConcept] and conformance [A]);
    return v1;
  }
  return v3;
}

uint64_t sub_247558984()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t sub_2475589C0()
{
  return swift_deallocObject();
}

uint64_t sub_2475589E8()
{
  return swift_deallocObject();
}

uint64_t sub_247558A10()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_247558A4C()
{
  swift_release();
  return swift_deallocObject();
}

unint64_t type metadata accessor for HKMedicationLoggingUnit()
{
  unint64_t ObjCClassMetadata;
  uint64_t v2;

  v2 = lazy cache variable for type metadata for HKMedicationLoggingUnit;
  if (!lazy cache variable for type metadata for HKMedicationLoggingUnit)
  {
    objc_opt_self();
    ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for HKMedicationLoggingUnit);
    return ObjCClassMetadata;
  }
  return v2;
}

unint64_t lazy protocol witness table accessor for type HKMedicationLoggingUnit and conformance NSObject()
{
  unint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type HKMedicationLoggingUnit and conformance NSObject;
  if (!lazy protocol witness table cache variable for type HKMedicationLoggingUnit and conformance NSObject)
  {
    v0 = type metadata accessor for HKMedicationLoggingUnit();
    v1 = MEMORY[0x24957D92C](MEMORY[0x24BDD0240], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type HKMedicationLoggingUnit and conformance NSObject);
    return v1;
  }
  return v3;
}

unint64_t lazy protocol witness table accessor for type HKMedication? and conformance A?()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type HKMedication? and conformance A?;
  if (!lazy protocol witness table cache variable for type HKMedication? and conformance A?)
  {
    v0 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for HKMedication?);
    v1 = MEMORY[0x24957D92C](MEMORY[0x24BE8DD20], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type HKMedication? and conformance A?);
    return v1;
  }
  return v3;
}

unint64_t lazy protocol witness table accessor for type HKMedicationIdentifier and conformance NSObject()
{
  unint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type HKMedicationIdentifier and conformance NSObject;
  if (!lazy protocol witness table cache variable for type HKMedicationIdentifier and conformance NSObject)
  {
    v0 = type metadata accessor for HKMedicationIdentifier();
    v1 = MEMORY[0x24957D92C](MEMORY[0x24BDD0240], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type HKMedicationIdentifier and conformance NSObject);
    return v1;
  }
  return v3;
}

unint64_t lazy protocol witness table accessor for type NSNumber? and conformance A?()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type NSNumber? and conformance A?;
  if (!lazy protocol witness table cache variable for type NSNumber? and conformance A?)
  {
    v0 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for NSNumber?);
    v1 = MEMORY[0x24957D92C](MEMORY[0x24BE8DD20], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type NSNumber? and conformance A?);
    return v1;
  }
  return v3;
}

unint64_t lazy protocol witness table accessor for type Double? and conformance A?()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type Double? and conformance A?;
  if (!lazy protocol witness table cache variable for type Double? and conformance A?)
  {
    v0 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Double?);
    v1 = MEMORY[0x24957D92C](MEMORY[0x24BE8DD20], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type Double? and conformance A?);
    return v1;
  }
  return v3;
}

unint64_t lazy protocol witness table accessor for type [String]? and conformance A?()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type [String]? and conformance A?;
  if (!lazy protocol witness table cache variable for type [String]? and conformance A?)
  {
    v0 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [String]?);
    v1 = MEMORY[0x24957D92C](MEMORY[0x24BE8DD20], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type [String]? and conformance A?);
    return v1;
  }
  return v3;
}

unint64_t lazy protocol witness table accessor for type Bool? and conformance A?()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type Bool? and conformance A?;
  if (!lazy protocol witness table cache variable for type Bool? and conformance A?)
  {
    v0 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Bool?);
    v1 = MEMORY[0x24957D92C](MEMORY[0x24BE8DD20], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type Bool? and conformance A?);
    return v1;
  }
  return v3;
}

uint64_t sub_247558DFC()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_247558E38()
{
  return swift_deallocObject();
}

uint64_t sub_247558E60()
{
  return swift_deallocObject();
}

uint64_t sub_247558E88()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_247558EC4()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t isWithinGenericRetentionPolicy(dateInterval:)()
{
  return 1;
}

uint64_t isWithinSleepRetentionPolicy(dateInterval:)()
{
  return 1;
}

uint64_t Logger.wellnessIntents.unsafeMutableAddressor()
{
  uint64_t v0;

  if (one-time initialization token for wellnessIntents != -1)
    swift_once();
  v0 = type metadata accessor for Logger();
  return __swift_project_value_buffer(v0, (uint64_t)static Logger.wellnessIntents);
}

uint64_t one-time initialization function for subsystem()
{
  uint64_t result;
  Swift::String v1;

  v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("com.apple.siri", 0xEuLL, 1);
  result = v1._countAndFlagsBits;
  static Log.subsystem = (__int128)v1;
  return result;
}

__int128 *Log.subsystem.unsafeMutableAddressor()
{
  if (one-time initialization token for subsystem != -1)
    swift_once();
  return &static Log.subsystem;
}

uint64_t one-time initialization function for healthCategory()
{
  uint64_t result;
  Swift::String v1;

  v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Health", 6uLL, 1);
  result = v1._countAndFlagsBits;
  static Log.healthCategory = (__int128)v1;
  return result;
}

__int128 *Log.healthCategory.unsafeMutableAddressor()
{
  if (one-time initialization token for healthCategory != -1)
    swift_once();
  return &static Log.healthCategory;
}

uint64_t one-time initialization function for wellnessCategory()
{
  uint64_t result;
  Swift::String v1;

  v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Wellness", 8uLL, 1);
  result = v1._countAndFlagsBits;
  static Log.wellnessCategory = (__int128)v1;
  return result;
}

__int128 *Log.wellnessCategory.unsafeMutableAddressor()
{
  if (one-time initialization token for wellnessCategory != -1)
    swift_once();
  return &static Log.wellnessCategory;
}

uint64_t one-time initialization function for emergencyCategory()
{
  uint64_t result;
  Swift::String v1;

  v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Emergency", 9uLL, 1);
  result = v1._countAndFlagsBits;
  static Log.emergencyCategory = (__int128)v1;
  return result;
}

__int128 *Log.emergencyCategory.unsafeMutableAddressor()
{
  if (one-time initialization token for emergencyCategory != -1)
    swift_once();
  return &static Log.emergencyCategory;
}

uint64_t one-time initialization function for commonCategory()
{
  uint64_t result;
  Swift::String v1;

  v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("HealthCommon", 0xCuLL, 1);
  result = v1._countAndFlagsBits;
  static Log.commonCategory = (__int128)v1;
  return result;
}

__int128 *Log.commonCategory.unsafeMutableAddressor()
{
  if (one-time initialization token for commonCategory != -1)
    swift_once();
  return &static Log.commonCategory;
}

uint64_t one-time initialization function for health()
{
  uint64_t result;

  type metadata accessor for OS_os_log();
  Log.subsystem.unsafeMutableAddressor();
  swift_bridgeObjectRetain();
  Log.healthCategory.unsafeMutableAddressor();
  swift_bridgeObjectRetain();
  result = OS_os_log.init(subsystem:category:)();
  static Log.health = result;
  return result;
}

{
  id v0;
  uint64_t v2;

  v2 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v2, static Logger.health);
  __swift_project_value_buffer(v2, (uint64_t)static Logger.health);
  v0 = (id)*Log.health.unsafeMutableAddressor();
  return Logger.init(_:)();
}

uint64_t *Log.health.unsafeMutableAddressor()
{
  if (one-time initialization token for health != -1)
    swift_once();
  return &static Log.health;
}

void *static Log.health.getter()
{
  id v0;
  void *v2;

  v2 = (void *)*Log.health.unsafeMutableAddressor();
  v0 = v2;
  return v2;
}

uint64_t one-time initialization function for wellnessIntents()
{
  uint64_t result;

  type metadata accessor for OS_os_log();
  Log.subsystem.unsafeMutableAddressor();
  swift_bridgeObjectRetain();
  Log.wellnessCategory.unsafeMutableAddressor();
  swift_bridgeObjectRetain();
  result = OS_os_log.init(subsystem:category:)();
  static Log.wellnessIntents = result;
  return result;
}

{
  id v0;
  uint64_t v2;

  v2 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v2, static Logger.wellnessIntents);
  __swift_project_value_buffer(v2, (uint64_t)static Logger.wellnessIntents);
  v0 = (id)*Log.wellnessIntents.unsafeMutableAddressor();
  return Logger.init(_:)();
}

uint64_t *Log.wellnessIntents.unsafeMutableAddressor()
{
  if (one-time initialization token for wellnessIntents != -1)
    swift_once();
  return &static Log.wellnessIntents;
}

void *static Log.wellnessIntents.getter()
{
  id v0;
  void *v2;

  v2 = (void *)*Log.wellnessIntents.unsafeMutableAddressor();
  v0 = v2;
  return v2;
}

uint64_t one-time initialization function for emergency()
{
  uint64_t result;

  type metadata accessor for OS_os_log();
  Log.subsystem.unsafeMutableAddressor();
  swift_bridgeObjectRetain();
  Log.emergencyCategory.unsafeMutableAddressor();
  swift_bridgeObjectRetain();
  result = OS_os_log.init(subsystem:category:)();
  static Log.emergency = result;
  return result;
}

{
  id v0;
  uint64_t v2;

  v2 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v2, static Logger.emergency);
  __swift_project_value_buffer(v2, (uint64_t)static Logger.emergency);
  v0 = (id)*Log.emergency.unsafeMutableAddressor();
  return Logger.init(_:)();
}

uint64_t *Log.emergency.unsafeMutableAddressor()
{
  if (one-time initialization token for emergency != -1)
    swift_once();
  return &static Log.emergency;
}

void *static Log.emergency.getter()
{
  id v0;
  void *v2;

  v2 = (void *)*Log.emergency.unsafeMutableAddressor();
  v0 = v2;
  return v2;
}

uint64_t one-time initialization function for common()
{
  uint64_t result;

  type metadata accessor for OS_os_log();
  Log.subsystem.unsafeMutableAddressor();
  swift_bridgeObjectRetain();
  Log.commonCategory.unsafeMutableAddressor();
  swift_bridgeObjectRetain();
  result = OS_os_log.init(subsystem:category:)();
  static Log.common = result;
  return result;
}

{
  id v0;
  uint64_t v2;

  v2 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v2, static Logger.common);
  __swift_project_value_buffer(v2, (uint64_t)static Logger.common);
  v0 = (id)*Log.common.unsafeMutableAddressor();
  return Logger.init(_:)();
}

uint64_t *Log.common.unsafeMutableAddressor()
{
  if (one-time initialization token for common != -1)
    swift_once();
  return &static Log.common;
}

void *static Log.common.getter()
{
  id v0;
  void *v2;

  v2 = (void *)*Log.common.unsafeMutableAddressor();
  v0 = v2;
  return v2;
}

uint64_t __swift_project_value_buffer(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = a2;
  if ((*(_DWORD *)(*(_QWORD *)(a1 - 8) + 80) & 0x20000) != 0)
    return *(_QWORD *)a2;
  return v3;
}

unint64_t type metadata accessor for OS_os_log()
{
  unint64_t ObjCClassMetadata;
  uint64_t v2;

  v2 = lazy cache variable for type metadata for OS_os_log;
  if (!lazy cache variable for type metadata for OS_os_log)
  {
    objc_opt_self();
    ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for OS_os_log);
    return ObjCClassMetadata;
  }
  return v2;
}

uint64_t __swift_allocate_value_buffer(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t *v5;

  v5 = a2;
  if ((*(_DWORD *)(*(_QWORD *)(a1 - 8) + 80) & 0x20000) != 0)
  {
    v2 = swift_slowAlloc();
    *a2 = v2;
    return v2;
  }
  return (uint64_t)v5;
}

uint64_t static Logger.wellnessIntents.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = Logger.wellnessIntents.unsafeMutableAddressor();
  swift_beginAccess();
  v1 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 16))(a1, v3);
  return swift_endAccess();
}

uint64_t static Logger.wellnessIntents.setter(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;

  v7 = a1;
  v8 = type metadata accessor for Logger();
  v6 = *(_QWORD *)(v8 - 8);
  v2 = (*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v8);
  v4 = (char *)&v2 - v2;
  v3 = Logger.wellnessIntents.unsafeMutableAddressor();
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v4, v7, v8);
  v5 = &v9;
  swift_beginAccess();
  (*(void (**)(uint64_t, char *, uint64_t))(v6 + 40))(v3, v4, v8);
  swift_endAccess();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v7, v8);
}

uint64_t (*static Logger.wellnessIntents.modify())()
{
  Logger.wellnessIntents.unsafeMutableAddressor();
  swift_beginAccess();
  return static Logger.wellnessIntents.modify;
}

uint64_t static Logger.wellnessIntents.modify()
{
  return swift_endAccess();
}

uint64_t Logger.health.unsafeMutableAddressor()
{
  uint64_t v0;

  if (one-time initialization token for health != -1)
    swift_once();
  v0 = type metadata accessor for Logger();
  return __swift_project_value_buffer(v0, (uint64_t)static Logger.health);
}

uint64_t static Logger.health.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = Logger.health.unsafeMutableAddressor();
  swift_beginAccess();
  v1 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 16))(a1, v3);
  return swift_endAccess();
}

uint64_t static Logger.health.setter(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;

  v7 = a1;
  v8 = type metadata accessor for Logger();
  v6 = *(_QWORD *)(v8 - 8);
  v2 = (*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v8);
  v4 = (char *)&v2 - v2;
  v3 = Logger.health.unsafeMutableAddressor();
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v4, v7, v8);
  v5 = &v9;
  swift_beginAccess();
  (*(void (**)(uint64_t, char *, uint64_t))(v6 + 40))(v3, v4, v8);
  swift_endAccess();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v7, v8);
}

uint64_t (*static Logger.health.modify())()
{
  Logger.health.unsafeMutableAddressor();
  swift_beginAccess();
  return static Logger.wellnessIntents.modify;
}

uint64_t Logger.emergency.unsafeMutableAddressor()
{
  uint64_t v0;

  if (one-time initialization token for emergency != -1)
    swift_once();
  v0 = type metadata accessor for Logger();
  return __swift_project_value_buffer(v0, (uint64_t)static Logger.emergency);
}

uint64_t static Logger.emergency.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = Logger.emergency.unsafeMutableAddressor();
  swift_beginAccess();
  v1 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 16))(a1, v3);
  return swift_endAccess();
}

uint64_t static Logger.emergency.setter(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;

  v7 = a1;
  v8 = type metadata accessor for Logger();
  v6 = *(_QWORD *)(v8 - 8);
  v2 = (*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v8);
  v4 = (char *)&v2 - v2;
  v3 = Logger.emergency.unsafeMutableAddressor();
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v4, v7, v8);
  v5 = &v9;
  swift_beginAccess();
  (*(void (**)(uint64_t, char *, uint64_t))(v6 + 40))(v3, v4, v8);
  swift_endAccess();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v7, v8);
}

uint64_t (*static Logger.emergency.modify())()
{
  Logger.emergency.unsafeMutableAddressor();
  swift_beginAccess();
  return static Logger.wellnessIntents.modify;
}

uint64_t Logger.common.unsafeMutableAddressor()
{
  uint64_t v0;

  if (one-time initialization token for common != -1)
    swift_once();
  v0 = type metadata accessor for Logger();
  return __swift_project_value_buffer(v0, (uint64_t)static Logger.common);
}

uint64_t static Logger.common.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = Logger.common.unsafeMutableAddressor();
  swift_beginAccess();
  v1 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 16))(a1, v3);
  return swift_endAccess();
}

uint64_t static Logger.common.setter(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;

  v7 = a1;
  v8 = type metadata accessor for Logger();
  v6 = *(_QWORD *)(v8 - 8);
  v2 = (*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v8);
  v4 = (char *)&v2 - v2;
  v3 = Logger.common.unsafeMutableAddressor();
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v4, v7, v8);
  v5 = &v9;
  swift_beginAccess();
  (*(void (**)(uint64_t, char *, uint64_t))(v6 + 40))(v3, v4, v8);
  swift_endAccess();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v7, v8);
}

uint64_t (*static Logger.common.modify())()
{
  Logger.common.unsafeMutableAddressor();
  swift_beginAccess();
  return static Logger.wellnessIntents.modify;
}

ValueMetadata *type metadata accessor for Log()
{
  return &type metadata for Log;
}

void HealthKitDistanceProvider.Source.quantityTypeIdentifier.getter(char a1)
{
  __asm { BR              X8 }
}

uint64_t sub_24755A114()
{
  uint64_t v0;
  id v1;
  uint64_t v3;

  v3 = *MEMORY[0x24BDD3560];
  v1 = (id)*MEMORY[0x24BDD3560];
  *(_QWORD *)(v0 - 32) = v3;
  return *(_QWORD *)(v0 - 32);
}

void static HealthKitDistanceProvider.Source.__derived_enum_equals(_:_:)(char a1)
{
  __asm { BR              X8 }
}

uint64_t sub_24755A220(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, unsigned __int8 a11)
{
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&loc_24755A278
                                                                              + *((int *)qword_24755A2F0 + a11)))(a1, a2, a3, a4, a5);
}

BOOL sub_24755A288()
{
  uint64_t v1;

  return v1 == 0;
}

void HealthKitDistanceProvider.Source.hash(into:)(uint64_t a1, char a2)
{
  __asm { BR              X8 }
}

uint64_t sub_24755A358()
{
  return Hasher.combine<A>(_:)();
}

uint64_t HealthKitDistanceProvider.Source.hashValue.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  type metadata accessor for HealthKitDistanceProvider.Source(0, a2, a3, a4);
  MEMORY[0x24957D92C](&protocol conformance descriptor for HealthKitDistanceProvider<A>.Source);
  return _hashValue<A>(for:)();
}

uint64_t type metadata accessor for HealthKitDistanceProvider.Source(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a4, a4, (uint64_t)&nominal type descriptor for HealthKitDistanceProvider.Source);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance HealthKitDistanceProvider<A>.Source(char *a1)
{
  char v1;

  static HealthKitDistanceProvider.Source.__derived_enum_equals(_:_:)(*a1);
  return v1 & 1;
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance HealthKitDistanceProvider<A>.Source(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned __int8 *v4;

  return HealthKitDistanceProvider.Source.hashValue.getter(*v4, *(_QWORD *)(a1 + 16), a3, a4);
}

void protocol witness for Hashable.hash(into:) in conformance HealthKitDistanceProvider<A>.Source(uint64_t a1)
{
  char *v1;

  HealthKitDistanceProvider.Source.hash(into:)(a1, *v1);
}

void *HealthKitDistanceProvider.init(store:sources:failure:mapIntent:)@<X0>(void *a1@<X0>, void *a2@<X1>, void *a3@<X2>, void *a4@<X3>, void *a5@<X4>, void *a6@<X5>, void *a7@<X6>, _QWORD *a8@<X8>)
{
  id v8;
  id v9;
  id v10;
  void *result;
  id __b[7];

  memset(__b, 0, 0x30uLL);
  __b[6] = a7;
  v8 = a1;
  v9 = a1;
  __b[0] = a1;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  __b[1] = a2;
  swift_retain();
  swift_retain();
  __b[2] = a3;
  __b[3] = a4;
  swift_retain();
  swift_retain();
  __b[4] = a5;
  __b[5] = a6;
  v10 = a1;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();

  swift_release();
  swift_release();
  swift_bridgeObjectRelease();

  outlined destroy of HealthKitDistanceProvider<A>(__b);
  result = a1;
  *a8 = a1;
  a8[1] = a2;
  a8[2] = a3;
  a8[3] = a4;
  a8[4] = a5;
  a8[5] = a6;
  return result;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of HealthKitDistanceProvider<A>(id *a1)
{

  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
}

uint64_t HealthKitDistanceProvider.isQueryAuthorized()()
{
  void **v0;
  _QWORD *v1;
  id v2;
  _QWORD *v3;
  uint64_t v5;
  void *v6;

  v1[2] = v1;
  v1[3] = 0;
  v1[3] = v0;
  v6 = *v0;
  v1[4] = *v0;
  v2 = v6;
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v5 + 40) = v3;
  *v3 = *(_QWORD *)(v5 + 16);
  v3[1] = CycleTrackingFetcher.isReadingAuthorized();
  return isSiriAuthorizedToAccessHealthData(store:)((uint64_t)v6);
}

uint64_t HealthKitDistanceProvider.query(start:end:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  void *__src;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v5[23] = v4;
  v5[22] = a3;
  v5[21] = a2;
  v5[20] = a1;
  v5[14] = v5;
  v5[15] = 0;
  v5[16] = 0;
  memset(v5 + 8, 0, 0x30uLL);
  v5[18] = 0;
  v5[19] = 0;
  memcpy(v5 + 2, __src, 0x30uLL);
  v12 = v5[2];
  v13 = v5[3];
  v14 = v5[4];
  v15 = v5[5];
  v16 = v5[6];
  v17 = v5[7];
  v6 = *(_QWORD *)(a4 + 16);
  v5[24] = v6;
  v5[25] = *(_QWORD *)(v6 - 8);
  v5[26] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  v5[27] = swift_task_alloc();
  v5[28] = swift_task_alloc();
  v5[15] = a2;
  v5[16] = a3;
  v5[8] = v12;
  v5[9] = v13;
  v5[10] = v14;
  v5[11] = v15;
  v5[12] = v16;
  v5[13] = v17;
  return swift_task_switch();
}

{
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  const void *v8;
  const void *v9;
  uint64_t v10;
  id *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t TupleTypeMetadata2;

  v12 = (void *)v4[28];
  v13 = (void *)v4[27];
  v5 = v4[24];
  v10 = v5;
  v11 = (id *)v4[23];
  v9 = (const void *)v4[22];
  v8 = (const void *)v4[21];
  v4[14] = v4;
  v14 = type metadata accessor for HealthKitDistanceProvider.Source(255, v5, a3, a4);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Statistics<Double>?);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  outlined retain of HealthKitDistanceProvider<A>(v11);
  outlined init with copy of Date?(v8, v12);
  outlined init with copy of Date?(v9, v13);
  v17 = (_QWORD *)swift_task_alloc();
  v4[29] = v17;
  v17[2] = v10;
  v17[3] = v11;
  v17[4] = v12;
  v17[5] = v13;
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Statistics<Double>);
  MEMORY[0x24957D92C](&protocol conformance descriptor for HealthKitDistanceProvider<A>.Source, v14);
  v16 = type metadata accessor for Dictionary();
  default argument 1 of withThrowingTaskGroup<A, B>(of:returning:isolation:body:)(TupleTypeMetadata2, v16);
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v15 + 240) = v6;
  *v6 = *(_QWORD *)(v15 + 112);
  v6[1] = HealthKitDistanceProvider.query(start:end:);
  return withThrowingTaskGroup<A, B>(of:returning:isolation:body:)();
}

uint64_t HealthKitDistanceProvider.query(start:end:)()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  id *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v2 = *v1;
  *(_QWORD *)(v2 + 112) = *v1;
  v2 += 112;
  v7 = (_QWORD *)(v2 - 96);
  *(_QWORD *)(v2 + 136) = v0;
  swift_task_dealloc();
  if (!v0)
  {
    v5 = v7[26];
    v6 = v7[25];
    v4 = (id *)v7[21];
    swift_task_dealloc();
    outlined release of HealthKitDistanceProvider<A>(v4);
    outlined destroy of Date?(v5);
    outlined destroy of Date?(v6);
  }
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v1;
  void (*v3)(uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v7 = v0[26];
  v5 = v0[25];
  v6 = v0[24];
  v1 = v0[23];
  v4 = v0[20];
  v0[14] = v0;
  v8 = v0[17];
  v0[19] = v8;
  v3 = *(void (**)(uint64_t))(v1 + 32);
  swift_retain();
  v3(v8);
  swift_release();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v4, v7, v6);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v7, v6);
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0[14] + 8))();
}

{
  _QWORD *v0;
  id v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t);
  id v8;

  v8 = (id)v0[31];
  v4 = v0[28];
  v5 = v0[27];
  v6 = v0[23];
  v0[14] = v0;
  swift_task_dealloc();
  outlined release of HealthKitDistanceProvider<A>((id *)v6);
  outlined destroy of Date?(v4);
  outlined destroy of Date?(v5);
  v1 = v8;
  v0[18] = v8;
  v7 = *(void (**)(uint64_t))(v6 + 16);
  v2 = swift_retain();
  v7(v2);
  swift_release();

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0[14] + 8))();
}

uint64_t closure #1 in HealthKitDistanceProvider.query(start:end:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)(v6 + 192) = a6;
  *(_QWORD *)(v6 + 184) = a5;
  *(_QWORD *)(v6 + 176) = a4;
  *(_QWORD *)(v6 + 168) = a3;
  *(_QWORD *)(v6 + 160) = a2;
  *(_QWORD *)(v6 + 152) = a1;
  *(_QWORD *)(v6 + 96) = v6;
  *(_QWORD *)(v6 + 104) = 0;
  *(_QWORD *)(v6 + 112) = 0;
  *(_QWORD *)(v6 + 120) = 0;
  *(_QWORD *)(v6 + 128) = 0;
  *(_QWORD *)(v6 + 136) = 0;
  memset((void *)(v6 + 56), 0, 0x28uLL);
  *(_BYTE *)(v6 + 360) = 0;
  *(_BYTE *)(v6 + 368) = 0;
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Statistics<Double>);
  *(_QWORD *)(v6 + 200) = v7;
  *(_QWORD *)(v6 + 208) = *(_QWORD *)(v7 - 8);
  *(_QWORD *)(v6 + 216) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Statistics<Double>?);
  *(_QWORD *)(v6 + 224) = swift_task_alloc();
  *(_QWORD *)(v6 + 232) = swift_task_alloc();
  *(_QWORD *)(v6 + 240) = swift_task_alloc();
  v8 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?)
                 - 8);
  *(_QWORD *)(v6 + 248) = v8;
  *(_QWORD *)(v6 + 256) = *(_QWORD *)(v8 + 64);
  *(_QWORD *)(v6 + 264) = swift_task_alloc();
  *(_QWORD *)(v6 + 272) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  *(_QWORD *)(v6 + 280) = swift_task_alloc();
  *(_QWORD *)(v6 + 288) = type metadata accessor for HealthKitDistanceProvider.Source(255, a6, v9, v10);
  *(_QWORD *)(v6 + 296) = swift_getTupleTypeMetadata2();
  type metadata accessor for Optional();
  *(_QWORD *)(v6 + 304) = swift_task_alloc();
  *(_QWORD *)(v6 + 312) = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Error);
  v11 = type metadata accessor for ThrowingTaskGroup.Iterator();
  *(_QWORD *)(v6 + 320) = v11;
  *(_QWORD *)(v6 + 328) = *(_QWORD *)(v11 - 8);
  *(_QWORD *)(v6 + 336) = swift_task_alloc();
  *(_QWORD *)(v6 + 104) = a2;
  *(_QWORD *)(v6 + 112) = a3;
  *(_QWORD *)(v6 + 120) = a4;
  *(_QWORD *)(v6 + 128) = a5;
  return swift_task_switch();
}

uint64_t closure #1 in HealthKitDistanceProvider.query(start:end:)()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  const void *v6;
  const void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id *__src;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;

  v0[12] = v0;
  v0[43] = MEMORY[0x24957D92C](&protocol conformance descriptor for HealthKitDistanceProvider<A>.Source);
  v0[17] = Dictionary.init()();
  swift_bridgeObjectRetain();
  Set.makeIterator()();
  memcpy(v0 + 7, v0 + 2, 0x28uLL);
  while (1)
  {
    type metadata accessor for Set.Iterator();
    Set.Iterator.next()();
    v18 = *(unsigned __int8 *)(v19 + 361);
    if (v18 == 5)
      break;
    v17 = *(_QWORD *)(v19 + 280);
    v12 = *(void **)(v19 + 272);
    v15 = *(void **)(v19 + 264);
    v9 = *(_QWORD *)(v19 + 256);
    v8 = *(_QWORD *)(v19 + 248);
    v10 = *(_QWORD *)(v19 + 192);
    v7 = *(const void **)(v19 + 184);
    v6 = *(const void **)(v19 + 176);
    __src = *(id **)(v19 + 168);
    *(_BYTE *)(v19 + 368) = v18;
    v3 = type metadata accessor for TaskPriority();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 56))(v17, 1);
    outlined retain of HealthKitDistanceProvider<A>(__src);
    outlined init with copy of Date?(v6, v12);
    outlined init with copy of Date?(v7, v15);
    v4 = *(_DWORD *)(v8 + 80);
    v13 = (v4 + 96) & ~v4;
    v14 = (v13 + v9 + v4) & ~v4;
    v16 = swift_allocObject();
    *(_QWORD *)(v16 + 16) = 0;
    *(_QWORD *)(v16 + 24) = 0;
    *(_QWORD *)(v16 + 32) = v10;
    *(_BYTE *)(v16 + 40) = v18;
    memcpy((void *)(v16 + 48), __src, 0x30uLL);
    outlined init with take of Date?(v12, (void *)(v16 + v13));
    outlined init with take of Date?(v15, (void *)(v16 + v14));
    v5 = type metadata accessor for ThrowingTaskGroup();
    _sScg7addTask8priority9operationyScPSg_xyYaKYAcntF(v17, (uint64_t)&async function pointer to partial apply for closure #1 in closure #1 in HealthKitDistanceProvider.query(start:end:), v16, v5);
    outlined destroy of TaskPriority?(v17);
  }
  outlined destroy of [String? : (scheduleDate: Date?, medID: String, count: Int)].Iterator();
  ThrowingTaskGroup.makeAsyncIterator()();
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v19 + 352) = v1;
  *v1 = *(_QWORD *)(v19 + 96);
  v1[1] = closure #1 in HealthKitDistanceProvider.query(start:end:);
  return _sScg8IteratorV4next9isolationxSgScA_pSgYi_tYaq_YKF();
}

{
  uint64_t v0;

  *(_QWORD *)(*(_QWORD *)v0 + 96) = *(_QWORD *)v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  char *v4;
  char *v5;
  __n128 v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  char v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  _QWORD *v17;
  uint64_t v18;

  v1 = v0[38];
  v2 = v0[37];
  v0[12] = v0;
  if ((*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 48))(v1, 1) == 1)
  {
    v17 = *(_QWORD **)(v18 + 152);
    (*(void (**)(void))(*(_QWORD *)(v18 + 328) + 8))();
    *v17 = *(_QWORD *)(v18 + 136);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(*(_QWORD *)(v18 + 96) + 8))();
  }
  else
  {
    v4 = *(char **)(v18 + 304);
    v13 = *(char **)(v18 + 240);
    v16 = *(char **)(v18 + 232);
    v14 = *(_QWORD *)(v18 + 208);
    v15 = *(_QWORD *)(v18 + 200);
    v12 = *v4;
    v5 = &v4[*(int *)(*(_QWORD *)(v18 + 296) + 48)];
    *(_BYTE *)(v18 + 360) = *v4;
    outlined init with take of Statistics<Double>?(v5, v13);
    outlined init with copy of Statistics<Double>?(v13, v16);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v16, 1, v15) == 1)
    {
      outlined destroy of Statistics<Double>?(*(_QWORD *)(v18 + 232));
    }
    else
    {
      v10 = *(char **)(v18 + 224);
      v11 = *(char **)(v18 + 216);
      v8 = *(_QWORD *)(v18 + 208);
      v9 = *(_QWORD *)(v18 + 200);
      outlined init with take of Statistics<Double>(*(char **)(v18 + 232), v11);
      v6 = outlined init with copy of Statistics<Double>(v11, v10);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t, __n128))(v8 + 56))(v10, 0, 1, v9, v6);
      *(_BYTE *)(v18 + 362) = v12;
      type metadata accessor for Dictionary();
      Dictionary.subscript.setter();
      outlined destroy of Statistics<Double>((uint64_t)v11);
    }
    outlined destroy of Statistics<Double>?(*(_QWORD *)(v18 + 240));
    v7 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v18 + 352) = v7;
    *v7 = *(_QWORD *)(v18 + 96);
    v7[1] = closure #1 in HealthKitDistanceProvider.query(start:end:);
    return _sScg8IteratorV4next9isolationxSgScA_pSgYi_tYaq_YKF();
  }
}

{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 328);
  *(_QWORD *)(v0 + 96) = v0;
  (*(void (**)(void))(v1 + 8))();
  outlined destroy of [HKQuantityType]();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 96) + 8))();
}

id *outlined retain of HealthKitDistanceProvider<A>(id *a1)
{
  id v1;

  v1 = *a1;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t partial apply for closure #1 in HealthKitDistanceProvider.query(start:end:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v3 + 16) = v3;
  v10 = v2[2];
  v7 = v2[3];
  v8 = v2[4];
  v9 = v2[5];
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 24) = v4;
  *v4 = *(_QWORD *)(v3 + 16);
  v4[1] = _sIeghH_IeAgH_TRTQ0_;
  return closure #1 in HealthKitDistanceProvider.query(start:end:)(a1, a2, v7, v8, v9, v10);
}

uint64_t closure #1 in closure #1 in HealthKitDistanceProvider.query(start:end:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  char v10;

  v10 = a4;
  *(_QWORD *)(v8 + 88) = a8;
  *(_QWORD *)(v8 + 80) = a7;
  *(_QWORD *)(v8 + 72) = a6;
  *(_QWORD *)(v8 + 64) = a5;
  *(_BYTE *)(v8 + 153) = a4;
  *(_QWORD *)(v8 + 56) = a1;
  *(_QWORD *)(v8 + 16) = v8;
  *(_BYTE *)(v8 + 152) = 0;
  *(_QWORD *)(v8 + 24) = 0;
  *(_QWORD *)(v8 + 32) = 0;
  *(_QWORD *)(v8 + 40) = 0;
  *(_QWORD *)(v8 + 48) = 0;
  type metadata accessor for HealthKitDistanceProvider.Source(255, a8, a3, a4);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Statistics<Double>?);
  *(_QWORD *)(v8 + 96) = swift_getTupleTypeMetadata2();
  *(_QWORD *)(v8 + 104) = swift_task_alloc();
  *(_QWORD *)(v8 + 112) = swift_task_alloc();
  *(_BYTE *)(v8 + 152) = v10;
  *(_QWORD *)(v8 + 24) = a5;
  *(_QWORD *)(v8 + 32) = a6;
  *(_QWORD *)(v8 + 40) = a7;
  return swift_task_switch();
}

uint64_t closure #1 in closure #1 in HealthKitDistanceProvider.query(start:end:)()
{
  uint64_t v0;
  void *v1;
  id v2;
  _QWORD *v3;
  char v5;
  void **v6;
  _QWORD *v7;
  uint64_t v8;

  v6 = *(void ***)(v0 + 64);
  v5 = *(_BYTE *)(v0 + 153);
  *(_QWORD *)(v0 + 16) = v0;
  type metadata accessor for HKQuantityType();
  HealthKitDistanceProvider.Source.quantityTypeIdentifier.getter(v5);
  v8 = MEMORY[0x24957D314]();
  *(_QWORD *)(v0 + 120) = v8;
  *(_QWORD *)(v0 + 48) = v8;
  v1 = *v6;
  *(_QWORD *)(v0 + 128) = *v6;
  v2 = v1;
  v3 = (_QWORD *)swift_task_alloc();
  v7[17] = v3;
  *v3 = v7[2];
  v3[1] = closure #1 in closure #1 in HealthKitDistanceProvider.query(start:end:);
  return HKHealthStore.query(quantityType:start:end:)(v7[14], v8, v7[9], v7[10]);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;

  v2 = *v1;
  *(_QWORD *)(v2 + 16) = *v1;
  v4 = v2 + 16;
  *(_QWORD *)(v2 + 144) = v0;
  swift_task_dealloc();
  if (!v0)

  return swift_task_switch();
}

{
  uint64_t v0;
  char *v1;
  char v2;
  uint64_t v3;
  char v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  _BYTE *v11;

  v9 = *(id *)(v0 + 120);
  v1 = *(char **)(v0 + 112);
  v10 = (uint64_t)v1;
  v11 = *(_BYTE **)(v0 + 104);
  v8 = *(_QWORD *)(v0 + 96);
  v2 = *(_BYTE *)(v0 + 153);
  v5 = v2;
  v7 = *(_BYTE **)(v0 + 56);
  *(_QWORD *)(v0 + 16) = v0;
  v6 = *(int *)(v8 + 48);
  *v11 = v2;
  outlined init with copy of Statistics<Double>?(v1, &v11[v6]);
  v3 = *(int *)(v8 + 48);
  *v7 = v5;
  outlined init with copy of Statistics<Double>?(&v11[v6], &v7[v3]);
  outlined destroy of (HealthKitDistanceProvider<A>.Source, Statistics<Double>?)((uint64_t)v11, v8);
  outlined destroy of Statistics<Double>?(v10);

  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 16) + 8))();
}

{
  _QWORD *v0;
  void *v1;
  id v3;

  v1 = (void *)v0[16];
  v3 = (id)v0[15];
  v0[2] = v0;

  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0[2] + 8))();
}

uint64_t _sScg7addTask8priority9operationyScPSg_xyYaKYAcntF(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  const void *v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  _QWORD v38[5];

  v30 = a1;
  v26 = a2;
  v27 = a3;
  v28 = a4;
  v31 = (*(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?)
                               - 8)
                   + 64)
       + 15) & 0xFFFFFFFFFFFFFFF0;
  v4 = (const void *)MEMORY[0x24BDAC7A8](v30);
  v32 = (uint64_t)&v7 - v31;
  outlined init with copy of TaskPriority?(v4, (char *)&v7 - v31);
  v33 = type metadata accessor for TaskPriority();
  v34 = *(_QWORD *)(v33 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t))(v34 + 48))(v32, 1) == 1)
  {
    v24 = 0;
    outlined destroy of TaskPriority?(v32);
    v25 = v24;
  }
  else
  {
    v23 = TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v32, v33);
    v25 = v23;
  }
  v20 = v25 | 0x3100;
  v22 = *(_QWORD *)(v27 + 16);
  v21 = *(_QWORD *)(v27 + 24);
  swift_unknownObjectRetain();
  if (v22)
  {
    v18 = v22;
    v19 = v21;
    v12 = v21;
    v13 = v22;
    swift_getObjectType();
    v14 = dispatch thunk of Actor.unownedExecutor.getter();
    v15 = v5;
    swift_unknownObjectRelease();
    v16 = v14;
    v17 = v15;
  }
  else
  {
    v16 = 0;
    v17 = 0;
  }
  v7 = v17;
  v8 = v16;
  v9 = *v29;
  v10 = *(_QWORD *)(v28 + 16);
  v38[4] = v10;
  v11 = 0;
  if (v16 != 0 || v17 != 0)
  {
    v38[0] = 0;
    v38[1] = 0;
    v38[2] = v8;
    v38[3] = v7;
    v11 = v38;
  }
  v35 = 1;
  v36 = v11;
  v37 = v9;
  swift_task_create();
  return swift_release();
}

uint64_t default argument 1 of withThrowingTaskGroup<A, B>(of:returning:isolation:body:)(uint64_t a1, uint64_t a2)
{
  return a2;
}

id *outlined release of HealthKitDistanceProvider<A>(id *a1)
{

  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return a1;
}

uint64_t protocol witness for DataProviding.isQueryAuthorized() in conformance HealthKitDistanceProvider<A>()
{
  const void *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v4;

  *(_QWORD *)(v1 + 64) = v1;
  memcpy((void *)(v1 + 16), v0, 0x30uLL);
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 72) = v2;
  *v2 = *(_QWORD *)(v4 + 64);
  v2[1] = protocol witness for DataProviding.isQueryAuthorized() in conformance HealthKitDistanceProvider<A>;
  return HealthKitDistanceProvider.isQueryAuthorized()();
}

uint64_t protocol witness for DataProviding.isQueryAuthorized() in conformance HealthKitDistanceProvider<A>(unsigned int a1)
{
  uint64_t *v1;
  uint64_t v3;

  v3 = *v1;
  *(_QWORD *)(*v1 + 64) = *v1;
  swift_task_dealloc();
  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)(v3 + 64) + 8))(a1);
}

uint64_t protocol witness for DataProviding.isLoggingAuthorized() in conformance HealthKitDistanceProvider<A>()
{
  const void *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v4;

  *(_QWORD *)(v1 + 64) = v1;
  memcpy((void *)(v1 + 16), v0, 0x30uLL);
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 72) = v2;
  *v2 = *(_QWORD *)(v4 + 64);
  v2[1] = protocol witness for DataProviding.isQueryAuthorized() in conformance HealthKitDistanceProvider<A>;
  return HealthKitDistanceProvider.isQueryAuthorized()();
}

void *static HealthKitDistanceProvider<A>.ambiguousDistance(store:)@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  id v2;
  _BYTE *v3;
  void *AmbiguousDistanceIntentResponse;
  void *v6;
  _QWORD v9[6];

  v2 = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HealthKitDistanceProvider<GetAmbiguousDistanceIntentResponse>.Source);
  _allocateUninitializedArray<A>(_:)();
  *v3 = 0;
  v3[1] = 1;
  _finalizeUninitializedArray<A>(_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [HealthKitDistanceProvider<GetAmbiguousDistanceIntentResponse>.Source]);
  lazy protocol witness table accessor for type HealthKitDistanceProvider<GetAmbiguousDistanceIntentResponse>.Source and conformance HealthKitDistanceProvider<A>.Source();
  lazy protocol witness table accessor for type [HealthKitDistanceProvider<GetAmbiguousDistanceIntentResponse>.Source] and conformance [A]();
  v6 = (void *)Set.init<A>(_:)();
  AmbiguousDistanceIntentResponse = (void *)type metadata accessor for GetAmbiguousDistanceIntentResponse();
  HealthKitDistanceProvider.init(store:sources:failure:mapIntent:)(a1, v6, implicit closure #1 in static HealthKitDistanceProvider<A>.ambiguousDistance(store:), 0, closure #1 in static HealthKitDistanceProvider<A>.ambiguousDistance(store:), 0, AmbiguousDistanceIntentResponse, v9);
  return memcpy(a2, v9, 0x30uLL);
}

unint64_t lazy protocol witness table accessor for type HealthKitDistanceProvider<GetAmbiguousDistanceIntentResponse>.Source and conformance HealthKitDistanceProvider<A>.Source()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type HealthKitDistanceProvider<GetAmbiguousDistanceIntentResponse>.Source and conformance HealthKitDistanceProvider<A>.Source;
  if (!lazy protocol witness table cache variable for type HealthKitDistanceProvider<GetAmbiguousDistanceIntentResponse>.Source and conformance HealthKitDistanceProvider<A>.Source)
  {
    v0 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for HealthKitDistanceProvider<GetAmbiguousDistanceIntentResponse>.Source);
    v1 = MEMORY[0x24957D92C](&protocol conformance descriptor for HealthKitDistanceProvider<A>.Source, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type HealthKitDistanceProvider<GetAmbiguousDistanceIntentResponse>.Source and conformance HealthKitDistanceProvider<A>.Source);
    return v1;
  }
  return v3;
}

unint64_t lazy protocol witness table accessor for type [HealthKitDistanceProvider<GetAmbiguousDistanceIntentResponse>.Source] and conformance [A]()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type [HealthKitDistanceProvider<GetAmbiguousDistanceIntentResponse>.Source] and conformance [A];
  if (!lazy protocol witness table cache variable for type [HealthKitDistanceProvider<GetAmbiguousDistanceIntentResponse>.Source] and conformance [A])
  {
    v0 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [HealthKitDistanceProvider<GetAmbiguousDistanceIntentResponse>.Source]);
    v1 = MEMORY[0x24957D92C](MEMORY[0x24BEE12C8], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type [HealthKitDistanceProvider<GetAmbiguousDistanceIntentResponse>.Source] and conformance [A]);
    return v1;
  }
  return v3;
}

char *implicit closure #1 in static HealthKitDistanceProvider<A>.ambiguousDistance(store:)@<X0>(char **a1@<X8>)
{
  char *result;

  type metadata accessor for GetAmbiguousDistanceIntentResponse();
  result = GetAmbiguousDistanceIntentResponse.__allocating_init(code:userActivity:)(5, 0);
  *a1 = result;
  return result;
}

char *closure #1 in static HealthKitDistanceProvider<A>.ambiguousDistance(store:)@<X0>(uint64_t a1@<X0>, char **a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __n128 v12;
  char *v13;
  __n128 v14;
  char *v15;
  char *v16;
  char *v17;
  NSDate v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  char *result;
  uint64_t v24;
  void *v25;
  void *v26;
  Class isa;
  void (*v28)(char *, char *, uint64_t);
  Class v29;
  uint64_t v30;
  uint64_t v31;
  id v32;
  char *v33;
  void (*v34)(char *, char *, uint64_t, __n128);
  void (*v35)(char *, uint64_t);
  unint64_t v36;
  void (*v37)(char *, uint64_t);
  char **v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  unint64_t v42;
  char *v43;
  unint64_t v44;
  char *v45;
  uint64_t v46;
  _QWORD *v47;
  unint64_t v48;
  char *v49;
  unint64_t v50;
  char *v51;
  unint64_t v52;
  char *v53;
  unint64_t v54;
  char *v55;
  unint64_t v56;
  char *v57;
  unint64_t v58;
  unint64_t v59;
  char *v60;
  unint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  unint64_t AmbiguousDistanceIntent;
  uint64_t v67;
  char *v68;
  int *v69;
  unsigned int (*v70)(char *, uint64_t, int *);
  char *v71;
  char *v72;
  char v73;
  char v74;
  uint64_t v75;
  char *v76;
  char *v77;
  char *v78;

  v38 = a2;
  v63 = a1;
  v78 = 0;
  v77 = 0;
  v76 = 0;
  v75 = 0;
  v72 = 0;
  v71 = 0;
  v39 = 0;
  v40 = type metadata accessor for DateInterval();
  v41 = *(_QWORD **)(v40 - 8);
  v42 = (v41[8] + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](0);
  v43 = (char *)&v24 - v42;
  v44 = (v2 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v3);
  v45 = (char *)&v24 - v44;
  v46 = type metadata accessor for Date();
  v47 = *(_QWORD **)(v46 - 8);
  v48 = (v47[8] + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v46);
  v49 = (char *)&v24 - v48;
  v50 = (v4 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8]((char *)&v24 - v48);
  v51 = (char *)&v24 - v50;
  v52 = (v5 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8]((char *)&v24 - v50);
  v53 = (char *)&v24 - v52;
  v54 = (v6 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8]((char *)&v24 - v52);
  v55 = (char *)&v24 - v54;
  v78 = (char *)&v24 - v54;
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Statistics<Double>?);
  v56 = (*(_QWORD *)(*(_QWORD *)(v7 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v7);
  v57 = (char *)&v24 - v56;
  v58 = (v8 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8]((char *)&v24 - v56);
  v68 = (char *)&v24 - v58;
  v69 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Statistics<Double>);
  v67 = *((_QWORD *)v69 - 1);
  v59 = (*(_QWORD *)(v67 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v63);
  v60 = (char *)&v24 - v59;
  v77 = (char *)&v24 - v59;
  v61 = (v9 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v10);
  v62 = (char *)&v24 - v61;
  v76 = (char *)&v24 - v61;
  v75 = v11;
  v65 = &v74;
  v74 = 0;
  v64 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HealthKitDistanceProvider<GetAmbiguousDistanceIntentResponse>.Source);
  AmbiguousDistanceIntent = lazy protocol witness table accessor for type HealthKitDistanceProvider<GetAmbiguousDistanceIntentResponse>.Source and conformance HealthKitDistanceProvider<A>.Source();
  MEMORY[0x24957CF6C](v65, v63, v64, v69);
  v70 = *(unsigned int (**)(char *, uint64_t, int *))(v67 + 48);
  if (v70(v68, 1, v69) == 1)
  {
    outlined destroy of Statistics<Double>?((uint64_t)v68);
  }
  else
  {
    v12 = outlined init with take of Statistics<Double>(v68, v62);
    v73 = 1;
    MEMORY[0x24957CF6C](&v73, v63, v64, v69, AmbiguousDistanceIntent, v12);
    if (v70(v57, 1, v69) != 1)
    {
      v13 = v45;
      v14 = outlined init with take of Statistics<Double>(v57, v60);
      v15 = &v62[v69[7]];
      v34 = (void (*)(char *, char *, uint64_t, __n128))v41[2];
      v34(v13, v15, v40, v14);
      DateInterval.start.getter();
      v16 = v43;
      v35 = (void (*)(char *, uint64_t))v41[1];
      v35(v45, v40);
      ((void (*)(char *, char *, uint64_t))v34)(v16, &v60[v69[7]], v40);
      DateInterval.start.getter();
      v35(v43, v40);
      v36 = lazy protocol witness table accessor for type Date and conformance Date();
      min<A>(_:_:)();
      v37 = (void (*)(char *, uint64_t))v47[1];
      v37(v51, v46);
      v37(v53, v46);
      v72 = v53;
      ((void (*)(char *, char *, uint64_t))v34)(v45, &v62[v69[7]], v40);
      DateInterval.end.getter();
      v17 = v43;
      v35(v45, v40);
      ((void (*)(char *, char *, uint64_t))v34)(v17, &v60[v69[7]], v40);
      DateInterval.end.getter();
      v35(v43, v40);
      max<A>(_:_:)();
      v37(v49, v46);
      v37(v51, v46);
      v26 = 0;
      type metadata accessor for GetAmbiguousDistanceIntentResponse();
      v33 = GetAmbiguousDistanceIntentResponse.__allocating_init(code:userActivity:)(4, v26);
      v71 = v33;
      v28 = (void (*)(char *, char *, uint64_t))v47[2];
      v28(v51, v55, v46);
      v18.super.isa = Date._bridgeToObjectiveC()().super.isa;
      v19 = v51;
      isa = v18.super.isa;
      v37(v51, v46);
      objc_msgSend(v33, sel_setSampleStartDate_, isa);

      v28(v19, v53, v46);
      v29 = Date._bridgeToObjectiveC()().super.isa;
      v37(v51, v46);
      objc_msgSend(v33, sel_setSampleEndDate_, v29);

      objc_msgSend(v33, sel_setWalkRunDistance_, *(double *)&v62[v69[13]]);
      objc_msgSend(v33, sel_setWheelchairDistance_, *(double *)&v60[v69[13]]);
      v20 = &v62[v69[9]];
      v30 = *(_QWORD *)v20;
      v31 = *((_QWORD *)v20 + 1);
      swift_bridgeObjectRetain();
      v32 = (id)MEMORY[0x24957CFB4](v30, v31);
      swift_bridgeObjectRelease();
      objc_msgSend(v33, sel_setUnit_, v32);

      v21 = v33;
      v22 = v33;
      *v38 = v33;

      v37(v53, v46);
      v37(v55, v46);
      outlined destroy of Statistics<Double>((uint64_t)v60);
      return (char *)outlined destroy of Statistics<Double>((uint64_t)v62);
    }
    outlined destroy of Statistics<Double>?((uint64_t)v57);
    outlined destroy of Statistics<Double>((uint64_t)v62);
  }
  v25 = 0;
  type metadata accessor for GetAmbiguousDistanceIntentResponse();
  result = GetAmbiguousDistanceIntentResponse.__allocating_init(code:userActivity:)(102, v25);
  *v38 = result;
  return result;
}

uint64_t protocol witness for AmbiguousDistanceProviding.query(start:end:) in conformance <A> HealthKitDistanceProvider<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  const void *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v7;

  *(_QWORD *)(v4 + 64) = v4;
  memcpy((void *)(v4 + 16), v3, 0x30uLL);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v7 + 80) = v5;
  *v5 = *(_QWORD *)(v7 + 64);
  v5[1] = protocol witness for AmbiguousDistanceProviding.query(start:end:) in conformance <A> HealthKitDistanceProvider<A>;
  return HealthKitDistanceProvider.query(start:end:)(v7 + 72, a1, a2, a3);
}

uint64_t protocol witness for AmbiguousDistanceProviding.query(start:end:) in conformance <A> HealthKitDistanceProvider<A>()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  *(_QWORD *)(*v0 + 64) = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)(v2 + 64) + 8))(*(_QWORD *)(v2 + 72));
}

uint64_t type metadata instantiation function for HealthKitDistanceProvider()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t destroy for HealthKitDistanceProvider(id *a1)
{

  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

_QWORD *initializeWithCopy for HealthKitDistanceProvider(_QWORD *a1, uint64_t a2)
{
  id v2;
  _QWORD *result;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v10;
  uint64_t v11;

  v4 = *(id *)a2;
  v2 = *(id *)a2;
  *a1 = v4;
  v5 = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  a1[1] = v5;
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 24);
  swift_retain();
  a1[2] = v6;
  a1[3] = v7;
  v10 = *(_QWORD *)(a2 + 32);
  v11 = *(_QWORD *)(a2 + 40);
  swift_retain();
  result = a1;
  a1[4] = v10;
  a1[5] = v11;
  return result;
}

uint64_t assignWithCopy for HealthKitDistanceProvider(uint64_t a1, uint64_t a2)
{
  id v2;
  void *v3;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;

  v5 = *(id *)a2;
  v2 = *(id *)a2;
  v3 = *(void **)a1;
  *(_QWORD *)a1 = v5;

  v6 = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRelease();
  v7 = *(_QWORD *)(a2 + 16);
  v8 = *(_QWORD *)(a2 + 24);
  swift_retain();
  *(_QWORD *)(a1 + 16) = v7;
  *(_QWORD *)(a1 + 24) = v8;
  swift_release();
  v10 = *(_QWORD *)(a2 + 32);
  v11 = *(_QWORD *)(a2 + 40);
  swift_retain();
  *(_QWORD *)(a1 + 32) = v10;
  *(_QWORD *)(a1 + 40) = v11;
  swift_release();
  return a1;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> __swift_memcpy48_8(void *a1, const void *a2)
{
  memcpy(a1, a2, 0x30uLL);
}

uint64_t assignWithTake for HealthKitDistanceProvider(uint64_t a1, _QWORD *a2)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = *a2;

  *(_QWORD *)(a1 + 8) = a2[1];
  swift_bridgeObjectRelease();
  v3 = a2[3];
  *(_QWORD *)(a1 + 16) = a2[2];
  *(_QWORD *)(a1 + 24) = v3;
  swift_release();
  v4 = a2[5];
  *(_QWORD *)(a1 + 32) = a2[4];
  *(_QWORD *)(a1 + 40) = v4;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for HealthKitDistanceProvider(uint64_t a1, int a2)
{
  int v3;
  int v4;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 48))
    {
      v4 = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v3 = -1;
      if (!HIDWORD(*(_QWORD *)a1))
        v3 = *(_QWORD *)a1;
      v4 = v3;
    }
  }
  else
  {
    v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for HealthKitDistanceProvider(uint64_t result, unsigned int a2, unsigned int a3)
{
  _BOOL4 v3;

  v3 = a3 > 0x7FFFFFFF;
  if (a2 > 0x7FFFFFFF)
  {
    *(_QWORD *)result = a2 + 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)(result + 32) = 0;
    *(_QWORD *)(result + 40) = 0;
    if (a3 > 0x7FFFFFFF)
    {
      if (v3)
        *(_BYTE *)(result + 48) = 1;
      else
        __break(1u);
    }
  }
  else
  {
    if (a3 > 0x7FFFFFFF)
    {
      if (v3)
        *(_BYTE *)(result + 48) = 0;
      else
        __break(1u);
    }
    if (a2)
      *(_QWORD *)result = a2 - 1;
  }
  return result;
}

uint64_t type metadata accessor for HealthKitDistanceProvider(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a4, a4, (uint64_t)&nominal type descriptor for HealthKitDistanceProvider);
}

uint64_t type metadata instantiation function for HealthKitDistanceProvider.Source()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t base witness table accessor for Equatable in HealthKitDistanceProvider<A>.Source(uint64_t a1)
{
  return MEMORY[0x24957D92C](&protocol conformance descriptor for HealthKitDistanceProvider<A>.Source, a1);
}

char *outlined init with take of Statistics<Double>?(char *a1, char *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  int *v9;
  uint64_t v10;

  v9 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Statistics<Double>);
  v10 = *((_QWORD *)v9 - 1);
  if ((*(unsigned int (**)(char *, uint64_t))(v10 + 48))(a1, 1))
  {
    v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Statistics<Double>?);
    memcpy(a2, a1, *(_QWORD *)(*(_QWORD *)(v3 - 8) + 64));
  }
  else
  {
    v5 = type metadata accessor for DateInterval();
    v6 = *(_QWORD *)(v5 - 8);
    if ((*(unsigned int (**)(char *, uint64_t))(v6 + 48))(a1, 1))
    {
      v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateInterval?);
      memcpy(a2, a1, *(_QWORD *)(*(_QWORD *)(v2 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v6 + 32))(a2, a1, v5);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v6 + 56))(a2, 0, 1, v5);
    }
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(&a2[v9[7]], &a1[v9[7]], v5);
    *(_QWORD *)&a2[v9[8]] = *(_QWORD *)&a1[v9[8]];
    *(_OWORD *)&a2[v9[9]] = *(_OWORD *)&a1[v9[9]];
    *(_OWORD *)&a2[v9[10]] = *(_OWORD *)&a1[v9[10]];
    *(_QWORD *)&a2[v9[11]] = *(_QWORD *)&a1[v9[11]];
    *(_QWORD *)&a2[v9[12]] = *(_QWORD *)&a1[v9[12]];
    *(_QWORD *)&a2[v9[13]] = *(_QWORD *)&a1[v9[13]];
    (*(void (**)(void))(v10 + 56))();
  }
  return a2;
}

char *outlined init with copy of Statistics<Double>?(char *a1, char *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int *v12;
  uint64_t v13;

  v12 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Statistics<Double>);
  v13 = *((_QWORD *)v12 - 1);
  if ((*(unsigned int (**)(char *, uint64_t))(v13 + 48))(a1, 1))
  {
    v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Statistics<Double>?);
    memcpy(a2, a1, *(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  }
  else
  {
    v8 = type metadata accessor for DateInterval();
    v9 = *(_QWORD *)(v8 - 8);
    if ((*(unsigned int (**)(char *, uint64_t))(v9 + 48))(a1, 1))
    {
      v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateInterval?);
      memcpy(a2, a1, *(_QWORD *)(*(_QWORD *)(v2 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v9 + 16))(a2, a1, v8);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56))(a2, 0, 1, v8);
    }
    (*(void (**)(char *, char *, uint64_t))(v9 + 16))(&a2[v12[7]], &a1[v12[7]], v8);
    *(_QWORD *)&a2[v12[8]] = *(_QWORD *)&a1[v12[8]];
    v3 = v12[9];
    v6 = &a2[v3];
    *(_QWORD *)&a2[v3] = *(_QWORD *)&a1[v3];
    v7 = *(_QWORD *)&a1[v3 + 8];
    swift_bridgeObjectRetain();
    *((_QWORD *)v6 + 1) = v7;
    *(_OWORD *)&a2[v12[10]] = *(_OWORD *)&a1[v12[10]];
    *(_QWORD *)&a2[v12[11]] = *(_QWORD *)&a1[v12[11]];
    *(_QWORD *)&a2[v12[12]] = *(_QWORD *)&a1[v12[12]];
    *(_QWORD *)&a2[v12[13]] = *(_QWORD *)&a1[v12[13]];
    (*(void (**)(void))(v13 + 56))();
  }
  return a2;
}

uint64_t sub_24755D914()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int (*v9)(void);

  v1 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?)
                 - 8);
  v2 = *(_DWORD *)(v1 + 80);
  v6 = (v2 + 96) & ~v2;
  v5 = (v6 + *(_QWORD *)(v1 + 64) + v2) & ~v2;
  swift_unknownObjectRelease();

  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  v7 = type metadata accessor for Date();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(unsigned int (**)(void))(v8 + 48);
  if (!((unsigned int (*)(uint64_t, uint64_t))v9)(v0 + v6, 1))
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v4 + v6, v7);
  if (!v9())
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v4 + v5, v7);
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in HealthKitDistanceProvider.query(start:end:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  *(_QWORD *)(v2 + 16) = v2;
  v12 = *(_QWORD *)(v1 + 32);
  v3 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?)
                 - 8);
  v4 = *(_DWORD *)(v3 + 80);
  v10 = (v4 + 96) & ~v4;
  v11 = (v10 + *(_QWORD *)(v3 + 64) + v4) & ~v4;
  v7 = *(_QWORD *)(v1 + 16);
  v8 = *(_QWORD *)(v1 + 24);
  v9 = *(unsigned __int8 *)(v1 + 40);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 24) = v5;
  *v5 = *(_QWORD *)(v2 + 16);
  v5[1] = _sIeghH_IeAgH_TRTQ0_;
  return closure #1 in closure #1 in HealthKitDistanceProvider.query(start:end:)(a1, v7, v8, v9, v1 + 48, v1 + v10, v1 + v11, v12);
}

void *outlined init with copy of TaskPriority?(const void *a1, void *a2)
{
  uint64_t v2;
  uint64_t v6;
  uint64_t v7;

  v6 = type metadata accessor for TaskPriority();
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t))(v7 + 48))(a1, 1))
  {
    v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
    memcpy(a2, a1, *(_QWORD *)(*(_QWORD *)(v2 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v7 + 16))(a2, a1, v6);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a2, 0, 1, v6);
  }
  return a2;
}

uint64_t outlined destroy of (HealthKitDistanceProvider<A>.Source, Statistics<Double>?)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v5 = *(int *)(a2 + 48);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Statistics<Double>);
  if (!(*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(a1 + v5, 1))
  {
    v3 = type metadata accessor for DateInterval();
    v4 = *(_QWORD *)(v3 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t))(v4 + 48))(a1 + v5, 1))
      (*(void (**)(uint64_t, uint64_t))(v4 + 8))(a1 + v5, v3);
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(a1 + v5 + *(int *)(v7 + 28), v3);
    swift_bridgeObjectRelease();
  }
  return a1;
}

uint64_t __swift_instantiateGenericMetadata(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD v6[3];

  v6[0] = a2;
  v6[1] = a3;
  v6[2] = a4;
  return MEMORY[0x24957D8B4](a1, v6, a5);
}

uint64_t _resumeUnsafeThrowingContinuationWithError<A>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD v7[2];

  v7[1] = a3;
  v7[0] = a2;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  return UnsafeContinuation.resume(throwing:)((uint64_t)v7, a1, a3, v3);
}

uint64_t _resumeUnsafeThrowingContinuation<A>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  return UnsafeContinuation.resume(returning:)(a2, a1, a3);
}

id LogPeriodIntentHandler.__allocating_init(storage:)(_QWORD *a1)
{
  objc_class *v1;
  id v2;

  v2 = objc_allocWithZone(v1);
  return LogPeriodIntentHandler.init(storage:)(a1);
}

id LogPeriodIntentHandler.init(storage:)(_QWORD *a1)
{
  void *v1;
  id v2;
  id v3;
  id v4;
  id v6;
  char *v7;
  objc_class *ObjectType;
  objc_super v10;
  _QWORD v11[5];
  _QWORD __dst[6];
  id v13;

  ObjectType = (objc_class *)swift_getObjectType();
  __dst[5] = a1;
  v2 = v1;
  v13 = v1;
  outlined init with copy of QuantityPersisting?(a1, v11);
  if (v11[3])
  {
    outlined init with take of QuantityPersisting(v11, __dst);
  }
  else
  {
    v3 = PeriodPersistor.init()();
    __dst[3] = &type metadata for PeriodPersistor;
    __dst[4] = &protocol witness table for PeriodPersistor;
    __dst[0] = v3;
    outlined destroy of QuantityPersisting?((uint64_t)v11);
  }
  outlined init with take of QuantityPersisting(__dst, &v7[OBJC_IVAR____TtC19SiriWellnessIntents22LogPeriodIntentHandler_storage]);

  v10.receiver = v13;
  v10.super_class = ObjectType;
  v6 = objc_msgSendSuper2(&v10, sel_init);
  v4 = v6;
  v13 = v6;
  outlined destroy of QuantityPersisting?((uint64_t)a1);

  return v6;
}

id PeriodPersistor.init()()
{
  void *v0;
  id v1;
  id v3;
  id v4;

  v4 = 0;
  type metadata accessor for HKMenstrualCyclesStore();
  type metadata accessor for HKHealthStore();
  v0 = (void *)NSDateFormatter.__allocating_init()();
  v3 = HKUnitPreferenceController.__allocating_init(healthStore:)(v0);
  v1 = v3;
  v4 = v3;
  outlined destroy of HealthKitPersistor(&v4);
  return v3;
}

uint64_t LogPeriodIntentHandler.handle(intent:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v2[48] = v1;
  v2[47] = a1;
  v2[24] = v2;
  v2[25] = 0;
  v2[26] = 0;
  v3 = type metadata accessor for Date();
  v2[49] = v3;
  v2[50] = *(_QWORD *)(v3 - 8);
  v2[51] = swift_task_alloc();
  v2[52] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  v2[53] = swift_task_alloc();
  v2[54] = swift_task_alloc();
  v4 = type metadata accessor for Logger();
  v2[55] = v4;
  v2[56] = *(_QWORD *)(v4 - 8);
  v2[57] = swift_task_alloc();
  v2[58] = swift_task_alloc();
  v2[59] = swift_task_alloc();
  v2[60] = swift_task_alloc();
  v2[25] = a1;
  v2[26] = v1;
  return swift_task_switch();
}

{
  uint64_t *v1;
  uint64_t v3;

  v3 = *v1;
  *(_QWORD *)(v3 + 192) = *v1;
  *(_QWORD *)(v3 + 560) = a1;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t LogPeriodIntentHandler.handle(intent:)()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t, uint64_t, uint64_t);
  void (*v3)(uint64_t, uint64_t);
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint8_t *buf;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint32_t v22;
  os_log_type_t v23;
  NSObject *v24;
  uint64_t v25;

  v1 = *(_QWORD *)(v0 + 480);
  v19 = *(_QWORD *)(v0 + 448);
  v21 = *(_QWORD *)(v0 + 440);
  *(_QWORD *)(v0 + 192) = v0;
  v20 = Logger.wellnessIntents.unsafeMutableAddressor();
  swift_beginAccess();
  v2 = *(void (**)(uint64_t, uint64_t, uint64_t))(v19 + 16);
  *(_QWORD *)(v0 + 488) = v2;
  v2(v1, v20, v21);
  swift_endAccess();
  v24 = Logger.logObject.getter();
  v23 = static os_log_type_t.debug.getter();
  *(_QWORD *)(v0 + 216) = 2;
  *(_QWORD *)(v0 + 496) = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  *(_QWORD *)(v0 + 504) = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  *(_QWORD *)(v0 + 512) = lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  v22 = *(_DWORD *)(v0 + 568);
  *(_QWORD *)(v0 + 520) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
  v25 = _allocateUninitializedArray<A>(_:)();
  if (os_log_type_enabled(v24, v23))
  {
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    v15 = createStorage<A>(capacity:type:)(0);
    v16 = createStorage<A>(capacity:type:)(0);
    *(_QWORD *)(v18 + 344) = buf;
    *(_QWORD *)(v18 + 352) = v15;
    *(_QWORD *)(v18 + 360) = v16;
    serialize(_:at:)(0, (_BYTE **)(v18 + 344));
    serialize(_:at:)(0, (_BYTE **)(v18 + 344));
    *(_QWORD *)(v18 + 368) = v25;
    v17 = (_QWORD *)swift_task_alloc();
    v17[2] = v18 + 344;
    v17[3] = v18 + 352;
    v17[4] = v18 + 360;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
    lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
    Sequence.forEach(_:)();
    swift_task_dealloc();
    _os_log_impl(&dword_24749F000, v24, v23, "Checking authorization for Cycle Tracking...", buf, v22);
    destroyStorage<A>(_:count:)(v15, 0, v13);
    destroyStorage<A>(_:count:)(v16, 0, MEMORY[0x24BEE4AD8] + 8);
    MEMORY[0x24957D398](buf, MEMORY[0x24BEE4260]);
  }
  swift_bridgeObjectRelease();
  *(_QWORD *)(v18 + 528) = 0;
  v7 = *(_QWORD *)(v18 + 480);
  v6 = *(_QWORD *)(v18 + 448);
  v8 = *(_QWORD *)(v18 + 440);
  v9 = *(_QWORD *)(v18 + 384);

  v3 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  *(_QWORD *)(v18 + 536) = v3;
  v3(v7, v8);
  outlined init with copy of QuantityPersisting(v9 + OBJC_IVAR____TtC19SiriWellnessIntents22LogPeriodIntentHandler_storage, v18 + 16);
  v12 = *(_QWORD *)(v18 + 40);
  v10 = *(_QWORD *)(v18 + 48);
  __swift_project_boxed_opaque_existential_1((_QWORD *)(v18 + 16), v12);
  v11 = (uint64_t (*)(uint64_t, uint64_t))(*(_QWORD *)(v10 + 8) + **(int **)(v10 + 8));
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v18 + 544) = v4;
  *v4 = *(_QWORD *)(v18 + 192);
  v4[1] = LogPeriodIntentHandler.handle(intent:);
  return v11(v12, v10);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);
  char *v11;
  uint64_t v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t, uint64_t);
  uint32_t v20;
  os_log_type_t v21;
  NSObject *log;
  uint64_t v23;
  id v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t (*v28)(_QWORD, id, uint64_t, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(uint64_t, uint64_t);
  uint64_t v38;
  uint8_t *buf;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  void (*v45)(uint64_t, uint64_t, uint64_t);
  uint32_t size;
  os_log_type_t v47;
  NSObject *oslog;
  uint64_t v49;
  unsigned int (*v50)(_QWORD, uint64_t, _QWORD);
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void (*v57)(uint64_t, uint64_t);
  void *v58;
  id v59;
  uint64_t v60;
  uint64_t v61;
  uint8_t *v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  void (*v68)(uint64_t, uint64_t, uint64_t);
  uint32_t v69;
  os_log_type_t v70;
  NSObject *v71;
  uint64_t v72;
  uint64_t v73;
  char v74;

  v74 = *(_BYTE *)(v0 + 584);
  *(_QWORD *)(v0 + 192) = v0;
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  if ((v74 & 1) == 0)
  {
    v19 = *(void (**)(uint64_t, uint64_t, uint64_t))(v73 + 488);
    v6 = *(_QWORD *)(v73 + 456);
    v18 = *(_QWORD *)(v73 + 440);
    v17 = Logger.wellnessIntents.unsafeMutableAddressor();
    swift_beginAccess();
    v19(v6, v17, v18);
    swift_endAccess();
    log = Logger.logObject.getter();
    v21 = static os_log_type_t.error.getter();
    *(_QWORD *)(v73 + 224) = 2;
    UnsignedInteger<>.init<A>(_:)();
    v20 = *(_DWORD *)(v73 + 572);
    v23 = _allocateUninitializedArray<A>(_:)();
    if (os_log_type_enabled(log, v21))
    {
      v7 = *(_QWORD *)(v73 + 528);
      v13 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      v14 = createStorage<A>(capacity:type:)(0);
      v15 = createStorage<A>(capacity:type:)(0);
      *(_QWORD *)(v73 + 232) = v13;
      *(_QWORD *)(v73 + 240) = v14;
      *(_QWORD *)(v73 + 248) = v15;
      serialize(_:at:)(0, (_BYTE **)(v73 + 232));
      serialize(_:at:)(0, (_BYTE **)(v73 + 232));
      *(_QWORD *)(v73 + 256) = v23;
      v16 = (_QWORD *)swift_task_alloc();
      v16[2] = v73 + 232;
      v16[3] = v73 + 240;
      v16[4] = v73 + 248;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
      lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
      result = Sequence.forEach(_:)();
      if (v7)
        return result;
      swift_task_dealloc();
      _os_log_impl(&dword_24749F000, log, v21, "Not authorized to write Cycle Tracking data.", v13, v20);
      destroyStorage<A>(_:count:)(v14, 0, v12);
      destroyStorage<A>(_:count:)(v15, 0, MEMORY[0x24BEE4AD8] + 8);
      MEMORY[0x24957D398](v13, MEMORY[0x24BEE4260]);
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    v10 = *(void (**)(uint64_t, uint64_t))(v73 + 536);
    v8 = *(_QWORD *)(v73 + 456);
    v9 = *(_QWORD *)(v73 + 440);

    v10(v8, v9);
    type metadata accessor for LogPeriodIntentResponse();
    v11 = LogPeriodIntentResponse.__allocating_init(code:userActivity:)(101, 0);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(char *))(*(_QWORD *)(v73 + 192) + 8))(v11);
  }
  v68 = *(void (**)(uint64_t, uint64_t, uint64_t))(v73 + 488);
  v1 = *(_QWORD *)(v73 + 472);
  v67 = *(_QWORD *)(v73 + 440);
  v66 = Logger.wellnessIntents.unsafeMutableAddressor();
  swift_beginAccess();
  v68(v1, v66, v67);
  swift_endAccess();
  v71 = Logger.logObject.getter();
  v70 = static os_log_type_t.debug.getter();
  *(_QWORD *)(v73 + 264) = 2;
  UnsignedInteger<>.init<A>(_:)();
  v69 = *(_DWORD *)(v73 + 576);
  v72 = _allocateUninitializedArray<A>(_:)();
  if (os_log_type_enabled(v71, v70))
  {
    v2 = *(_QWORD *)(v73 + 528);
    v62 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    v61 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    v63 = createStorage<A>(capacity:type:)(0);
    v64 = createStorage<A>(capacity:type:)(0);
    *(_QWORD *)(v73 + 312) = v62;
    *(_QWORD *)(v73 + 320) = v63;
    *(_QWORD *)(v73 + 328) = v64;
    serialize(_:at:)(0, (_BYTE **)(v73 + 312));
    serialize(_:at:)(0, (_BYTE **)(v73 + 312));
    *(_QWORD *)(v73 + 336) = v72;
    v65 = (_QWORD *)swift_task_alloc();
    v65[2] = v73 + 312;
    v65[3] = v73 + 320;
    v65[4] = v73 + 328;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
    lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
    result = Sequence.forEach(_:)();
    if (v2)
      return result;
    swift_task_dealloc();
    _os_log_impl(&dword_24749F000, v71, v70, "Authorization check successful for Cycle Tracking!", v62, v69);
    destroyStorage<A>(_:count:)(v63, 0, v61);
    destroyStorage<A>(_:count:)(v64, 0, MEMORY[0x24BEE4AD8] + 8);
    MEMORY[0x24957D398](v62, MEMORY[0x24BEE4260]);
    swift_bridgeObjectRelease();
    v60 = 0;
  }
  else
  {
    swift_bridgeObjectRelease();
    v60 = *(_QWORD *)(v73 + 528);
  }
  v57 = *(void (**)(uint64_t, uint64_t))(v73 + 536);
  v55 = *(_QWORD *)(v73 + 472);
  v56 = *(_QWORD *)(v73 + 440);
  v58 = *(void **)(v73 + 376);

  v57(v55, v56);
  v59 = objc_msgSend(v58, sel_date);
  if (v59)
  {
    v54 = *(_QWORD *)(v73 + 432);
    v51 = *(_QWORD *)(v73 + 416);
    v52 = *(_QWORD *)(v73 + 400);
    v53 = *(_QWORD *)(v73 + 392);
    static Date._unconditionallyBridgeFromObjectiveC(_:)();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v52 + 32))(v54, v51, v53);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v52 + 56))(v54, 0, 1, v53);

  }
  else
  {
    (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v73 + 400) + 56))(*(_QWORD *)(v73 + 432), 1, 1, *(_QWORD *)(v73 + 392));
  }
  v50 = *(unsigned int (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)(v73 + 400) + 48);
  if (v50(*(_QWORD *)(v73 + 432), 1, *(_QWORD *)(v73 + 392)) == 1)
  {
    outlined destroy of Date?(*(_QWORD *)(v73 + 432));
    v45 = *(void (**)(uint64_t, uint64_t, uint64_t))(v73 + 488);
    v4 = *(_QWORD *)(v73 + 464);
    v44 = *(_QWORD *)(v73 + 440);
    v43 = Logger.wellness.unsafeMutableAddressor();
    swift_beginAccess();
    v45(v4, v43, v44);
    swift_endAccess();
    oslog = Logger.logObject.getter();
    v47 = static os_log_type_t.debug.getter();
    *(_QWORD *)(v73 + 272) = 2;
    UnsignedInteger<>.init<A>(_:)();
    size = *(_DWORD *)(v73 + 580);
    v49 = _allocateUninitializedArray<A>(_:)();
    if (os_log_type_enabled(oslog, v47))
    {
      buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      v40 = createStorage<A>(capacity:type:)(0);
      v41 = createStorage<A>(capacity:type:)(0);
      *(_QWORD *)(v73 + 280) = buf;
      *(_QWORD *)(v73 + 288) = v40;
      *(_QWORD *)(v73 + 296) = v41;
      serialize(_:at:)(0, (_BYTE **)(v73 + 280));
      serialize(_:at:)(0, (_BYTE **)(v73 + 280));
      *(_QWORD *)(v73 + 304) = v49;
      v42 = (_QWORD *)swift_task_alloc();
      v42[2] = v73 + 280;
      v42[3] = v73 + 288;
      v42[4] = v73 + 296;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
      lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
      result = Sequence.forEach(_:)();
      if (v60)
        return result;
      swift_task_dealloc();
      _os_log_impl(&dword_24749F000, oslog, v47, "LogPeriodIntentHandler missing date. Assuming date is Now.", buf, size);
      destroyStorage<A>(_:count:)(v40, 0, v38);
      destroyStorage<A>(_:count:)(v41, 0, MEMORY[0x24BEE4AD8] + 8);
      MEMORY[0x24957D398](buf, MEMORY[0x24BEE4260]);
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    v37 = *(void (**)(uint64_t, uint64_t))(v73 + 536);
    v35 = *(_QWORD *)(v73 + 464);
    v36 = *(_QWORD *)(v73 + 440);

    v37(v35, v36);
  }
  else
  {
    outlined destroy of Date?(*(_QWORD *)(v73 + 432));
  }
  v34 = objc_msgSend(*(id *)(v73 + 376), sel_date);
  if (v34)
  {
    v33 = *(_QWORD *)(v73 + 424);
    v30 = *(_QWORD *)(v73 + 416);
    v31 = *(_QWORD *)(v73 + 400);
    v32 = *(_QWORD *)(v73 + 392);
    static Date._unconditionallyBridgeFromObjectiveC(_:)();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v31 + 32))(v33, v30, v32);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v31 + 56))(v33, 0, 1, v32);

  }
  else
  {
    (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v73 + 400) + 56))(*(_QWORD *)(v73 + 424), 1, 1, *(_QWORD *)(v73 + 392));
  }
  if (v50(*(_QWORD *)(v73 + 424), 1, *(_QWORD *)(v73 + 392)) == 1)
  {
    v29 = *(_QWORD *)(v73 + 424);
    Date.init()();
    outlined destroy of Date?(v29);
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v73 + 400) + 32))(*(_QWORD *)(v73 + 408), *(_QWORD *)(v73 + 424), *(_QWORD *)(v73 + 392));
  }
  v24 = *(id *)(v73 + 376);
  outlined init with copy of QuantityPersisting(*(_QWORD *)(v73 + 384) + OBJC_IVAR____TtC19SiriWellnessIntents22LogPeriodIntentHandler_storage, v73 + 56);
  v26 = *(_QWORD *)(v73 + 80);
  v27 = *(_QWORD *)(v73 + 88);
  __swift_project_boxed_opaque_existential_1((_QWORD *)(v73 + 56), v26);
  v25 = objc_msgSend(v24, sel_flow);
  v28 = (uint64_t (*)(_QWORD, id, uint64_t, uint64_t))(*(_QWORD *)(v27 + 16) + **(int **)(v27 + 16));
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v73 + 552) = v5;
  *v5 = *(_QWORD *)(v73 + 192);
  v5[1] = LogPeriodIntentHandler.handle(intent:);
  return v28(*(_QWORD *)(v73 + 408), v25, v26, v27);
}

{
  _QWORD *v0;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = v0[51];
  v2 = v0[50];
  v4 = v0[49];
  v0[24] = v0;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 7));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v3, v4);
  v5 = v0[70];
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(v0[24] + 8))(v5);
}

uint64_t LogPeriodIntentHandler.handle(intent:)(char a1)
{
  uint64_t *v1;
  uint64_t v3;

  v3 = *v1;
  *(_QWORD *)(v3 + 192) = *v1;
  *(_BYTE *)(v3 + 584) = a1;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t @objc closure #1 in LogPeriodIntentHandler.handle(intent:)(void *a1, const void *a2, void *a3)
{
  _QWORD *v3;
  id v5;
  id v6;
  _QWORD *v7;
  uint64_t v10;

  v3[4] = a3;
  v3[3] = a1;
  v3[2] = v3;
  v5 = a1;
  v3[5] = _Block_copy(a2);
  v6 = a3;
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v10 + 48) = v7;
  *v7 = *(_QWORD *)(v10 + 16);
  v7[1] = @objc closure #1 in LogQuantityIntentHandler.handle(intent:);
  return LogPeriodIntentHandler.handle(intent:)((uint64_t)a1);
}

id LogPeriodIntentHandler.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

uint64_t LogPeriodIntentHandler.init()()
{
  uint64_t result;
  uint64_t v1;

  if (!"SiriWellnessIntents.LogPeriodIntentHandler")
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  result = closure #1 in _unimplementedInitializer(className:initName:file:line:column:)((uint64_t)"SiriWellnessIntents.LogPeriodIntentHandler", 42, (unint64_t)"init()", 6, 2, (unint64_t)"SiriWellnessIntents/LogPeriodIntentHandler.swift", 48, 2, v1, 0xFuLL, 0x14uLL);
  __break(1u);
  return result;
}

id LogPeriodIntentHandler.__deallocating_deinit()
{
  void *v0;
  objc_super v2;
  void *v3;

  v3 = v0;
  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t static PeriodPersistor.StorageError.__derived_enum_equals(_:_:)()
{
  return 1;
}

uint64_t PeriodPersistor.StorageError.hash(into:)()
{
  return Hasher.combine<A>(_:)();
}

uint64_t PeriodPersistor.StorageError.hashValue.getter()
{
  lazy protocol witness table accessor for type PeriodPersistor.StorageError and conformance PeriodPersistor.StorageError();
  return _hashValue<A>(for:)();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PeriodPersistor.StorageError()
{
  return static PeriodPersistor.StorageError.__derived_enum_equals(_:_:)() & 1;
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance PeriodPersistor.StorageError()
{
  return PeriodPersistor.StorageError.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PeriodPersistor.StorageError()
{
  return PeriodPersistor.StorageError.hash(into:)();
}

uint64_t PeriodPersistor.isLoggingAuthorized()(uint64_t a1)
{
  _QWORD *v1;

  v1[4] = a1;
  v1[2] = v1;
  v1[3] = 0;
  v1[3] = a1;
  return swift_task_switch();
}

uint64_t PeriodPersistor.isLoggingAuthorized()()
{
  _QWORD *v0;
  id v1;
  _QWORD *v2;
  id v4;
  uint64_t v5;
  id v6;

  v4 = (id)v0[4];
  v0[2] = v0;
  v1 = v4;
  v6 = objc_msgSend(v4, sel_healthStore);
  v0[5] = v6;

  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v5 + 48) = v2;
  *v2 = *(_QWORD *)(v5 + 16);
  v2[1] = PeriodPersistor.isLoggingAuthorized();
  return isSiriAuthorizedToAccessHealthData(store:)((uint64_t)v6);
}

uint64_t PeriodPersistor.isLoggingAuthorized()(unsigned int a1)
{
  uint64_t *v1;
  void *v3;
  uint64_t v4;

  v4 = *v1;
  v3 = *(void **)(*v1 + 40);
  *(_QWORD *)(*v1 + 16) = *v1;
  swift_task_dealloc();

  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)(v4 + 16) + 8))(a1);
}

uint64_t PeriodPersistor.save(date:flow:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3[29] = a3;
  v3[28] = a2;
  v3[27] = a1;
  v3[18] = v3;
  v3[19] = 0;
  v3[20] = 0;
  v3[21] = 0;
  v3[22] = 0;
  v3[23] = 0;
  v3[24] = 0;
  v3[26] = 0;
  v4 = type metadata accessor for Logger();
  v3[30] = v4;
  v3[31] = *(_QWORD *)(v4 - 8);
  v3[32] = swift_task_alloc();
  v5 = type metadata accessor for Calendar();
  v3[33] = v5;
  v3[34] = *(_QWORD *)(v5 - 8);
  v3[35] = swift_task_alloc();
  v6 = type metadata accessor for Date();
  v3[36] = v6;
  v3[37] = *(_QWORD *)(v6 - 8);
  v3[38] = swift_task_alloc();
  v3[19] = a1;
  v3[20] = a2;
  v3[21] = a3;
  return swift_task_switch();
}

uint64_t PeriodPersistor.save(date:flow:)()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t, uint64_t);
  void (*v3)(uint64_t, uint64_t);
  id v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  Class isa;
  Class v14;
  unint64_t v15;
  uint64_t v16;
  id v17;
  void *v18;

  v9 = *(_QWORD *)(v0 + 304);
  v7 = *(_QWORD *)(v0 + 296);
  v8 = *(_QWORD *)(v0 + 288);
  v12 = *(_QWORD *)(v0 + 280);
  v10 = *(_QWORD *)(v0 + 272);
  v11 = *(_QWORD *)(v0 + 264);
  v18 = *(void **)(v0 + 232);
  v15 = *(_QWORD *)(v0 + 224);
  v1 = *(_QWORD *)(v0 + 216);
  *(_QWORD *)(v0 + 144) = v0;
  v2 = *(void (**)(uint64_t, uint64_t))(v7 + 16);
  *(_QWORD *)(v0 + 312) = v2;
  v2(v9, v1);
  isa = Date._bridgeToObjectiveC()().super.isa;
  *(_QWORD *)(v0 + 320) = isa;
  *(_QWORD *)(v0 + 176) = isa;
  v3 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
  *(_QWORD *)(v0 + 328) = v3;
  v3(v9, v8);
  static Calendar.current.getter();
  v14 = Calendar._bridgeToObjectiveC()().super.isa;
  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v12, v11);
  v17 = -[objc_class hk_dayIndexWithCalendar:](isa, sel_hk_dayIndexWithCalendar_, v14);

  *(_QWORD *)(v0 + 184) = v17;
  v4 = v18;
  PeriodFlow.toMenstrualFlow()(v15);
  v16 = v5;
  *(_QWORD *)(v0 + 16) = *(_QWORD *)(v0 + 144);
  *(_QWORD *)(v0 + 56) = v0 + 348;
  *(_QWORD *)(v0 + 24) = PeriodPersistor.save(date:flow:);
  *(_QWORD *)(v0 + 112) = swift_continuation_init();
  *(_QWORD *)(v0 + 80) = MEMORY[0x24BDAC760];
  *(_DWORD *)(v0 + 88) = 0x40000000;
  *(_DWORD *)(v0 + 92) = 0;
  *(_QWORD *)(v0 + 96) = @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned Bool, @unowned NSError?) -> () with result type Bool;
  *(_QWORD *)(v0 + 104) = &block_descriptor_6;
  objc_msgSend(v18, sel_saveBleedingFlow_forBleedingType_dayIndex_completion_, v16, 0, v17, v0 + 80);
  return __swift_continuation_await_point(v0 + 16);
}

{
  _QWORD *v0;
  _QWORD *v1;

  v1 = (_QWORD *)*v0;
  v1[18] = *v0;
  v1[42] = v1[6];
  return swift_task_switch();
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  id v3;
  id v4;
  _QWORD *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  char *v11;
  uint64_t v12;
  uint8_t *buf;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  uint32_t size;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  NSObject *v27;
  os_log_type_t v28;
  uint64_t v29;
  void (*v30)(uint64_t, uint64_t, uint64_t);
  uint64_t v31;
  void (*v32)(uint64_t, uint64_t);
  uint64_t v33;
  Class isa;
  uint64_t v35;
  void *v36;
  char *v37;
  char *v38;
  uint64_t v39;
  char v40;
  uint8_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t (*v44)(uint64_t, uint64_t, uint64_t);
  uint64_t v45;

  v1 = *(void **)(v0 + 232);
  *(_QWORD *)(v0 + 144) = v0;
  v40 = *(_BYTE *)(v0 + 348);

  if ((v40 & 1) != 0)
  {
    v32 = *(void (**)(uint64_t, uint64_t))(v39 + 328);
    v36 = *(void **)(v39 + 320);
    v30 = *(void (**)(uint64_t, uint64_t, uint64_t))(v39 + 312);
    v33 = *(_QWORD *)(v39 + 304);
    v31 = *(_QWORD *)(v39 + 288);
    v35 = *(_QWORD *)(v39 + 224);
    v29 = *(_QWORD *)(v39 + 216);
    type metadata accessor for LogPeriodIntentResponse();
    v37 = LogPeriodIntentResponse.__allocating_init(code:userActivity:)(4, 0);
    *(_QWORD *)(v39 + 208) = v37;
    v30(v33, v29, v31);
    isa = Date._bridgeToObjectiveC()().super.isa;
    v32(v33, v31);
    objc_msgSend(v37, sel_setDate_, isa);

    objc_msgSend(v37, sel_setFlow_, v35);
    v38 = v37;
  }
  else
  {
    lazy protocol witness table accessor for type PeriodPersistor.StorageError and conformance PeriodPersistor.StorageError();
    v19 = (id)swift_allocError();
    swift_willThrow();
    v2 = *(_QWORD *)(v39 + 256);
    v16 = *(_QWORD *)(v39 + 248);
    v18 = *(_QWORD *)(v39 + 240);
    v3 = v19;
    *(_QWORD *)(v39 + 192) = v19;
    v17 = Logger.wellnessIntents.unsafeMutableAddressor();
    swift_beginAccess();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v16 + 16))(v2, v17, v18);
    swift_endAccess();
    v4 = v19;
    v21 = swift_allocObject();
    *(_QWORD *)(v21 + 16) = v19;
    v27 = Logger.logObject.getter();
    v28 = static os_log_type_t.error.getter();
    *(_QWORD *)(v39 + 200) = 12;
    lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    lazy protocol witness table accessor for type Int and conformance Int();
    UnsignedInteger<>.init<A>(_:)();
    size = *(_DWORD *)(v39 + 344);
    v23 = swift_allocObject();
    *(_BYTE *)(v23 + 16) = 32;
    v24 = swift_allocObject();
    *(_BYTE *)(v24 + 16) = 8;
    v22 = swift_allocObject();
    *(_QWORD *)(v22 + 16) = partial apply for implicit closure #5 in HealthKitPersistor.save(quantityIdentifier:value:units:);
    *(_QWORD *)(v22 + 24) = v21;
    v25 = swift_allocObject();
    *(_QWORD *)(v25 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:);
    *(_QWORD *)(v25 + 24) = v22;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
    _allocateUninitializedArray<A>(_:)();
    v26 = v5;
    swift_retain();
    *v26 = partial apply for closure #1 in OSLogArguments.append(_:);
    v26[1] = v23;
    swift_retain();
    v26[2] = partial apply for closure #1 in OSLogArguments.append(_:);
    v26[3] = v24;
    swift_retain();
    v26[4] = partial apply for closure #1 in OSLogArguments.append(_:);
    v26[5] = v25;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(v27, v28))
    {
      buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      v14 = createStorage<A>(capacity:type:)(0);
      v15 = createStorage<A>(capacity:type:)(1);
      v41 = buf;
      v42 = v14;
      v43 = v15;
      serialize(_:at:)(2, &v41);
      serialize(_:at:)(1, &v41);
      v44 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v45 = v23;
      closure #1 in osLogInternal(_:log:type:)(&v44, (uint64_t)&v41, (uint64_t)&v42, (uint64_t)&v43);
      v44 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v45 = v24;
      closure #1 in osLogInternal(_:log:type:)(&v44, (uint64_t)&v41, (uint64_t)&v42, (uint64_t)&v43);
      v44 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v45 = v25;
      closure #1 in osLogInternal(_:log:type:)(&v44, (uint64_t)&v41, (uint64_t)&v42, (uint64_t)&v43);
      _os_log_impl(&dword_24749F000, v27, v28, "Failed to persist sample. Error: %s", buf, size);
      destroyStorage<A>(_:count:)(v14, 0, v12);
      destroyStorage<A>(_:count:)(v15, 1, MEMORY[0x24BEE4AD8] + 8);
      MEMORY[0x24957D398](buf, MEMORY[0x24BEE4260]);
      swift_release();
      swift_release();
      swift_release();
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
    }
    v10 = *(id *)(v39 + 320);
    v8 = *(_QWORD *)(v39 + 256);
    v7 = *(_QWORD *)(v39 + 248);
    v9 = *(_QWORD *)(v39 + 240);

    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v8, v9);
    type metadata accessor for LogPeriodIntentResponse();
    v11 = LogPeriodIntentResponse.__allocating_init(code:userActivity:)(5, 0);

    v38 = v11;
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(char *))(*(_QWORD *)(v39 + 144) + 8))(v38);
}

{
  uint64_t v0;
  uint64_t v1;
  id v2;
  id v3;
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  char *v10;
  uint64_t v11;
  uint8_t *buf;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  uint32_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  NSObject *v28;
  os_log_type_t v29;
  uint8_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t (*v33)(uint64_t, uint64_t, uint64_t);
  uint64_t v34;

  v16 = *(id *)(v0 + 232);
  *(_QWORD *)(v0 + 144) = v0;
  swift_willThrow();

  v20 = *(id *)(v0 + 336);
  v1 = *(_QWORD *)(v0 + 256);
  v17 = *(_QWORD *)(v0 + 248);
  v19 = *(_QWORD *)(v0 + 240);
  v2 = v20;
  *(_QWORD *)(v0 + 192) = v20;
  v18 = Logger.wellnessIntents.unsafeMutableAddressor();
  swift_beginAccess();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 16))(v1, v18, v19);
  swift_endAccess();
  v3 = v20;
  v22 = swift_allocObject();
  *(_QWORD *)(v22 + 16) = v20;
  v28 = Logger.logObject.getter();
  v29 = static os_log_type_t.error.getter();
  *(_QWORD *)(v0 + 200) = 12;
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  v21 = *(_DWORD *)(v0 + 344);
  v24 = swift_allocObject();
  *(_BYTE *)(v24 + 16) = 32;
  v25 = swift_allocObject();
  *(_BYTE *)(v25 + 16) = 8;
  v23 = swift_allocObject();
  *(_QWORD *)(v23 + 16) = partial apply for implicit closure #5 in HealthKitPersistor.save(quantityIdentifier:value:units:);
  *(_QWORD *)(v23 + 24) = v22;
  v26 = swift_allocObject();
  *(_QWORD *)(v26 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:);
  *(_QWORD *)(v26 + 24) = v23;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
  _allocateUninitializedArray<A>(_:)();
  v27 = v4;
  swift_retain();
  *v27 = partial apply for closure #1 in OSLogArguments.append(_:);
  v27[1] = v24;
  swift_retain();
  v27[2] = partial apply for closure #1 in OSLogArguments.append(_:);
  v27[3] = v25;
  swift_retain();
  v27[4] = partial apply for closure #1 in OSLogArguments.append(_:);
  v27[5] = v26;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(v28, v29))
  {
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    v13 = createStorage<A>(capacity:type:)(0);
    v14 = createStorage<A>(capacity:type:)(1);
    v30 = buf;
    v31 = v13;
    v32 = v14;
    serialize(_:at:)(2, &v30);
    serialize(_:at:)(1, &v30);
    v33 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v34 = v24;
    closure #1 in osLogInternal(_:log:type:)(&v33, (uint64_t)&v30, (uint64_t)&v31, (uint64_t)&v32);
    v33 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v34 = v25;
    closure #1 in osLogInternal(_:log:type:)(&v33, (uint64_t)&v30, (uint64_t)&v31, (uint64_t)&v32);
    v33 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v34 = v26;
    closure #1 in osLogInternal(_:log:type:)(&v33, (uint64_t)&v30, (uint64_t)&v31, (uint64_t)&v32);
    _os_log_impl(&dword_24749F000, v28, v29, "Failed to persist sample. Error: %s", buf, v21);
    destroyStorage<A>(_:count:)(v13, 0, v11);
    destroyStorage<A>(_:count:)(v14, 1, MEMORY[0x24BEE4AD8] + 8);
    MEMORY[0x24957D398](buf, MEMORY[0x24BEE4260]);
    swift_release();
    swift_release();
    swift_release();
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
  }
  v9 = (id)v15[40];
  v7 = v15[32];
  v6 = v15[31];
  v8 = v15[30];

  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v7, v8);
  type metadata accessor for LogPeriodIntentResponse();
  v10 = LogPeriodIntentResponse.__allocating_init(code:userActivity:)(5, 0);

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(char *))(v15[18] + 8))(v10);
}

void @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned Bool, @unowned NSError?) -> () with result type Bool(uint64_t a1, char a2, id a3)
{
  id v3;
  id v4;
  uint64_t v8;
  char v9;

  v3 = a3;
  v8 = *(_QWORD *)(a1 + 32);
  if (a3)
  {
    v4 = a3;
    _resumeUnsafeThrowingContinuationWithError<A>(_:_:)(v8, (uint64_t)a3, MEMORY[0x24BEE1328]);
  }
  else
  {
    v9 = a2 & 1;
    _resumeUnsafeThrowingContinuation<A>(_:_:)(v8, (uint64_t)&v9, MEMORY[0x24BEE1328]);
  }

}

uint64_t protocol witness for PeriodPersisting.isLoggingAuthorized() in conformance PeriodPersistor()
{
  uint64_t *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v4;

  *(_QWORD *)(v1 + 16) = v1;
  v4 = *v0;
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 24) = v2;
  *v2 = *(_QWORD *)(v1 + 16);
  v2[1] = protocol witness for QuantityPersisting.isLoggingAuthorized(for:) in conformance HealthKitPersistor;
  return PeriodPersistor.isLoggingAuthorized()(v4);
}

uint64_t protocol witness for PeriodPersisting.save(date:flow:) in conformance PeriodPersistor(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v7;

  *(_QWORD *)(v3 + 16) = v3;
  v7 = *v2;
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 24) = v4;
  *v4 = *(_QWORD *)(v3 + 16);
  v4[1] = protocol witness for QuantityPersisting.save(quantityIdentifier:value:units:) in conformance HealthKitPersistor;
  return PeriodPersistor.save(date:flow:)(a1, a2, v7);
}

uint64_t sub_247561070()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 24));
  return swift_deallocObject();
}

uint64_t partial apply for @objc closure #1 in LogPeriodIntentHandler.handle(intent:)()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  const void *v4;
  void *v5;
  void *v6;

  *(_QWORD *)(v1 + 16) = v1;
  v6 = (void *)v0[2];
  v4 = (const void *)v0[3];
  v5 = (void *)v0[4];
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 24) = v2;
  *v2 = *(_QWORD *)(v1 + 16);
  v2[1] = _sIeghH_IeAgH_TRTQ0_;
  return ((uint64_t (*)(void *, const void *, void *))((char *)&async function pointer to @objc closure #1 in LogPeriodIntentHandler.handle(intent:)
                                                               + async function pointer to @objc closure #1 in LogPeriodIntentHandler.handle(intent:)))(v6, v4, v5);
}

unint64_t lazy protocol witness table accessor for type PeriodPersistor.StorageError and conformance PeriodPersistor.StorageError()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type PeriodPersistor.StorageError and conformance PeriodPersistor.StorageError;
  if (!lazy protocol witness table cache variable for type PeriodPersistor.StorageError and conformance PeriodPersistor.StorageError)
  {
    v0 = MEMORY[0x24957D92C](&protocol conformance descriptor for PeriodPersistor.StorageError, &type metadata for PeriodPersistor.StorageError);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type PeriodPersistor.StorageError and conformance PeriodPersistor.StorageError);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type PeriodPersistor.StorageError and conformance PeriodPersistor.StorageError;
  if (!lazy protocol witness table cache variable for type PeriodPersistor.StorageError and conformance PeriodPersistor.StorageError)
  {
    v0 = MEMORY[0x24957D92C](&protocol conformance descriptor for PeriodPersistor.StorageError, &type metadata for PeriodPersistor.StorageError);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type PeriodPersistor.StorageError and conformance PeriodPersistor.StorageError);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type PeriodPersistor.StorageError and conformance PeriodPersistor.StorageError;
  if (!lazy protocol witness table cache variable for type PeriodPersistor.StorageError and conformance PeriodPersistor.StorageError)
  {
    v0 = MEMORY[0x24957D92C](&protocol conformance descriptor for PeriodPersistor.StorageError, &type metadata for PeriodPersistor.StorageError);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type PeriodPersistor.StorageError and conformance PeriodPersistor.StorageError);
    return v0;
  }
  return v2;
}

uint64_t sub_2475611D4()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t UnsafeContinuation.resume(returning:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)(a3 - 8) + 32))(*(_QWORD *)(*(_QWORD *)(a2 + 64) + 40), a1);
  return swift_continuation_throwingResume();
}

uint64_t UnsafeContinuation.resume(throwing:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  swift_allocError();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 32))(v4, a1);
  return swift_continuation_throwingResumeWithError();
}

uint64_t sub_2475612D0()
{
  return swift_deallocObject();
}

uint64_t sub_2475612F8()
{
  return swift_deallocObject();
}

uint64_t sub_247561320()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_24756135C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t type metadata accessor for LogPeriodIntentHandler()
{
  return objc_opt_self();
}

ValueMetadata *type metadata accessor for PeriodPersistor()
{
  return &type metadata for PeriodPersistor;
}

ValueMetadata *type metadata accessor for PeriodPersistor.StorageError()
{
  return &type metadata for PeriodPersistor.StorageError;
}

unint64_t base witness table accessor for Equatable in PeriodPersistor.StorageError()
{
  return lazy protocol witness table accessor for type PeriodPersistor.StorageError and conformance PeriodPersistor.StorageError();
}

unint64_t type metadata accessor for HKMenstrualCyclesStore()
{
  unint64_t ObjCClassMetadata;
  uint64_t v2;

  v2 = lazy cache variable for type metadata for HKMenstrualCyclesStore;
  if (!lazy cache variable for type metadata for HKMenstrualCyclesStore)
  {
    objc_opt_self();
    ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for HKMenstrualCyclesStore);
    return ObjCClassMetadata;
  }
  return v2;
}

uint64_t PeriodProjectionFocus.init(rawValue:)(uint64_t a1)
{
  switch(a1)
  {
    case 0:
      return 0;
    case 1:
      return 1;
    case 2:
      return 2;
    case 3:
      return 3;
    case 4:
      return 4;
    case 5:
      return 5;
    case 6:
      return 6;
  }
  return 0;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PeriodProjectionFocus()
{
  lazy protocol witness table accessor for type PeriodProjectionFocus and conformance PeriodProjectionFocus();
  return == infix<A>(_:_:)() & 1;
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance PeriodProjectionFocus()
{
  lazy protocol witness table accessor for type PeriodProjectionFocus and conformance PeriodProjectionFocus();
  return RawRepresentable<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PeriodProjectionFocus()
{
  lazy protocol witness table accessor for type PeriodProjectionFocus and conformance PeriodProjectionFocus();
  return RawRepresentable<>.hash(into:)();
}

uint64_t protocol witness for Hashable._rawHashValue(seed:) in conformance PeriodProjectionFocus()
{
  lazy protocol witness table accessor for type PeriodProjectionFocus and conformance PeriodProjectionFocus();
  return RawRepresentable<>._rawHashValue(seed:)();
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance PeriodProjectionFocus@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  char v3;

  result = PeriodProjectionFocus.init(rawValue:)(*a1);
  *(_QWORD *)a2 = result;
  *(_BYTE *)(a2 + 8) = v3 & 1;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance PeriodProjectionFocus(_QWORD *a1@<X8>)
{
  uint64_t v1;

  PeriodProjectionFocus.rawValue.getter();
  *a1 = v1;
}

id static PeriodProjectionFocusResolutionResult.success(with:)()
{
  uint64_t v0;
  id ObjCClassFromMetadata;

  ObjCClassFromMetadata = (id)swift_getObjCClassFromMetadata();
  PeriodProjectionFocus.rawValue.getter();
  return objc_msgSend(ObjCClassFromMetadata, sel_successWithResolvedValue_, v0);
}

id static PeriodProjectionFocusResolutionResult.confirmationRequired(with:)()
{
  uint64_t v0;
  id ObjCClassFromMetadata;

  ObjCClassFromMetadata = (id)swift_getObjCClassFromMetadata();
  PeriodProjectionFocus.rawValue.getter();
  return objc_msgSend(ObjCClassFromMetadata, sel_confirmationRequiredWithValueToConfirm_, v0);
}

id PeriodProjectionFocusResolutionResult.__allocating_init(JSONDictionary:intent:)(uint64_t a1, void *a2)
{
  objc_class *v2;
  id v4;
  Class isa;
  id v7;

  v4 = objc_allocWithZone(v2);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  v7 = objc_msgSend(v4, sel_initWithJSONDictionary_forIntent_);

  swift_bridgeObjectRelease();
  return v7;
}

id PeriodProjectionFocusResolutionResult.init(JSONDictionary:intent:)(uint64_t a1, void *a2)
{
  id v2;
  Class isa;
  id v7;
  objc_super v8;
  void *v9;
  uint64_t v10;
  id v11;

  v11 = 0;
  v10 = a1;
  v9 = a2;
  swift_bridgeObjectRetain();
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v8.receiver = 0;
  v8.super_class = (Class)type metadata accessor for PeriodProjectionFocusResolutionResult();
  v7 = objc_msgSendSuper2(&v8, sel_initWithJSONDictionary_forIntent_, isa, a2);

  if (v7)
  {
    v2 = v7;
    v11 = v7;

    swift_bridgeObjectRelease();
    return v7;
  }
  else
  {

    swift_bridgeObjectRelease();
    return 0;
  }
}

uint64_t type metadata accessor for PeriodProjectionFocusResolutionResult()
{
  return objc_opt_self();
}

id PeriodProjectionFocusResolutionResult.__deallocating_deinit()
{
  void *v0;
  objc_super v2;
  void *v3;

  v3 = v0;
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for PeriodProjectionFocusResolutionResult();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

unint64_t base witness table accessor for Equatable in PeriodProjectionFocus()
{
  return lazy protocol witness table accessor for type PeriodProjectionFocus and conformance PeriodProjectionFocus();
}

ValueMetadata *type metadata accessor for PeriodProjectionFocus()
{
  return &type metadata for PeriodProjectionFocus;
}

char *LogSpecificMedicationsIntentResponse.__allocating_init(code:userActivity:)(uint64_t a1, void *a2)
{
  objc_class *v2;
  id v3;

  v3 = objc_allocWithZone(v2);
  return LogSpecificMedicationsIntentResponse.init(code:userActivity:)(a1, a2);
}

id LogSpecificMedicationsIntent.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

id LogSpecificMedicationsIntent.init()()
{
  id v0;
  id v2;
  objc_super v3;
  id v4;

  v4 = 0;
  v3.receiver = 0;
  v3.super_class = (Class)type metadata accessor for LogSpecificMedicationsIntent();
  v2 = objc_msgSendSuper2(&v3, sel_init);
  v0 = v2;
  v4 = v2;

  return v2;
}

id LogSpecificMedicationsIntent.__allocating_init(coder:)(void *a1)
{
  objc_class *v1;
  id v4;

  v4 = objc_msgSend(objc_allocWithZone(v1), sel_initWithCoder_, a1);

  return v4;
}

id LogSpecificMedicationsIntent.init(coder:)(void *a1)
{
  id v1;
  id v5;
  objc_super v6;
  void *v7;
  id v8;

  v8 = 0;
  v7 = a1;
  v6.receiver = 0;
  v6.super_class = (Class)type metadata accessor for LogSpecificMedicationsIntent();
  v5 = objc_msgSendSuper2(&v6, sel_initWithCoder_, a1);
  if (v5)
  {
    v1 = v5;
    v8 = v5;

    return v5;
  }
  else
  {

    return 0;
  }
}

id LogSpecificMedicationsIntent.__allocating_init(identifier:backingStore:)(uint64_t a1, uint64_t a2, void *a3)
{
  objc_class *v3;
  id v5;
  uint64_t v6;
  void *v7;
  id v11;

  v11 = objc_allocWithZone(v3);
  if (a2)
  {
    v6 = MEMORY[0x24957CFB4](a1);
    swift_bridgeObjectRelease();
    v7 = (void *)v6;
  }
  else
  {
    v7 = 0;
  }
  v5 = objc_msgSend(v11, sel_initWithIdentifier_backingStore_);

  return v5;
}

id LogSpecificMedicationsIntent.init(identifier:backingStore:)(uint64_t a1, uint64_t a2, void *a3)
{
  id v3;
  id v5;
  uint64_t v6;
  void *v7;
  objc_super v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  id v15;

  v15 = 0;
  v13 = a1;
  v14 = a2;
  v12 = a3;
  swift_bridgeObjectRetain();
  if (a2)
  {
    v6 = MEMORY[0x24957CFB4](a1);
    swift_bridgeObjectRelease();
    v7 = (void *)v6;
  }
  else
  {
    v7 = 0;
  }
  v11.receiver = 0;
  v11.super_class = (Class)type metadata accessor for LogSpecificMedicationsIntent();
  v5 = objc_msgSendSuper2(&v11, sel_initWithIdentifier_backingStore_, v7, a3);

  v3 = v5;
  v15 = v5;

  swift_bridgeObjectRelease();
  return v5;
}

id LogSpecificMedicationsIntent.__allocating_init(domain:verb:parametersByName:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  objc_class *v5;
  id v6;
  id v8;
  id v9;
  Class isa;
  id v13;
  void *v16;
  void *v18;

  v13 = objc_allocWithZone(v5);
  v16 = (void *)MEMORY[0x24957CFB4](a1, a2);
  v18 = (void *)MEMORY[0x24957CFB4](a3, a4);
  if (a5)
  {
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    v6 = objc_msgSend(v13, sel_initWithDomain_verb_parametersByName_, v16, v18, isa);
  }
  else
  {
    v6 = objc_msgSend(v13, sel_initWithDomain_verb_parametersByName_, v16, v18, 0);
  }
  v9 = v6;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v9;
}

id LogSpecificMedicationsIntent.init(domain:verb:parametersByName:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  id v5;
  id v7;
  Class isa;
  Class v9;
  id v12;
  void *v15;
  objc_super v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id v23;

  v23 = 0;
  v21 = a1;
  v22 = a2;
  v19 = a3;
  v20 = a4;
  v18 = a5;
  swift_bridgeObjectRetain();
  v12 = (id)MEMORY[0x24957CFB4](a1, a2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v15 = (void *)MEMORY[0x24957CFB4](a3, a4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  if (a5)
  {
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    v9 = isa;
  }
  else
  {
    v9 = 0;
  }
  v17.receiver = 0;
  v17.super_class = (Class)type metadata accessor for LogSpecificMedicationsIntent();
  v7 = objc_msgSendSuper2(&v17, sel_initWithDomain_verb_parametersByName_, v12, v15, v9);

  v5 = v7;
  v23 = v7;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return v7;
}

id LogSpecificMedicationsIntent.__deallocating_deinit()
{
  void *v0;
  objc_super v2;
  void *v3;

  v3 = v0;
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for LogSpecificMedicationsIntent();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t LogSpecificMedicationsIntentResponseCode.init(rawValue:)(uint64_t a1)
{
  switch(a1)
  {
    case 0:
      return 0;
    case 1:
      return 1;
    case 2:
      return 2;
    case 3:
      return 3;
    case 4:
      return 4;
    case 5:
      return 5;
    case 6:
      return 6;
    case 100:
      return 100;
    case 101:
      return 101;
    case 102:
      return 102;
    case 103:
      return 103;
    case 104:
      return 104;
    case 105:
      return 105;
    case 106:
      return 106;
    case 107:
      return 107;
    case 108:
      return 108;
    case 109:
      return 109;
    case 110:
      return 110;
    case 111:
      return 111;
    case 112:
      return 112;
  }
  return 0;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance LogSpecificMedicationsIntentResponseCode()
{
  lazy protocol witness table accessor for type LogSpecificMedicationsIntentResponseCode and conformance LogSpecificMedicationsIntentResponseCode();
  return == infix<A>(_:_:)() & 1;
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance LogSpecificMedicationsIntentResponseCode()
{
  lazy protocol witness table accessor for type LogSpecificMedicationsIntentResponseCode and conformance LogSpecificMedicationsIntentResponseCode();
  return RawRepresentable<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance LogSpecificMedicationsIntentResponseCode()
{
  lazy protocol witness table accessor for type LogSpecificMedicationsIntentResponseCode and conformance LogSpecificMedicationsIntentResponseCode();
  return RawRepresentable<>.hash(into:)();
}

uint64_t protocol witness for Hashable._rawHashValue(seed:) in conformance LogSpecificMedicationsIntentResponseCode()
{
  lazy protocol witness table accessor for type LogSpecificMedicationsIntentResponseCode and conformance LogSpecificMedicationsIntentResponseCode();
  return RawRepresentable<>._rawHashValue(seed:)();
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance LogSpecificMedicationsIntentResponseCode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  char v3;

  result = LogSpecificMedicationsIntentResponseCode.init(rawValue:)(*a1);
  *(_QWORD *)a2 = result;
  *(_BYTE *)(a2 + 8) = v3 & 1;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance LogSpecificMedicationsIntentResponseCode(_QWORD *a1@<X8>)
{
  uint64_t v1;

  LogSpecificMedicationsIntentResponseCode.rawValue.getter();
  *a1 = v1;
}

uint64_t LogSpecificMedicationsIntentResponse.code.getter()
{
  uint64_t v0;
  uint64_t *v2;
  uint64_t v3;

  v2 = (uint64_t *)(v0 + OBJC_IVAR___LogSpecificMedicationsIntentResponse_code);
  swift_beginAccess();
  v3 = *v2;
  swift_endAccess();
  return v3;
}

uint64_t LogSpecificMedicationsIntentResponse.code.setter(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)(v1 + OBJC_IVAR___LogSpecificMedicationsIntentResponse_code);
  swift_beginAccess();
  *v3 = a1;
  return swift_endAccess();
}

uint64_t (*LogSpecificMedicationsIntentResponse.code.modify())()
{
  swift_beginAccess();
  return LogQuantityIntentResponse.code.modify;
}

void key path getter for LogSpecificMedicationsIntentResponse.code : LogSpecificMedicationsIntentResponse(id *a1@<X0>, uint64_t *a2@<X8>)
{
  id v2;
  id v3;

  v3 = *a1;
  v2 = *a1;
  *a2 = LogSpecificMedicationsIntentResponse.code.getter();

}

void key path setter for LogSpecificMedicationsIntentResponse.code : LogSpecificMedicationsIntentResponse(uint64_t *a1, id *a2)
{
  id v2;
  id v3;
  uint64_t v4;

  v4 = *a1;
  v3 = *a2;
  v2 = *a2;
  LogSpecificMedicationsIntentResponse.code.setter(v4);

}

char *LogSpecificMedicationsIntentResponse.init(code:userActivity:)(uint64_t a1, void *a2)
{
  char *v2;
  char *v3;
  char *v4;
  char *v6;
  char *v9;
  void *v10;

  v9 = (char *)objc_msgSend(v10, sel_init);
  v2 = v9;
  v3 = v9;
  v4 = v9;
  v6 = &v9[OBJC_IVAR___LogSpecificMedicationsIntentResponse_code];
  swift_beginAccess();
  *(_QWORD *)v6 = a1;
  swift_endAccess();

  objc_msgSend(v9, sel_setUserActivity_, a2);
  return v9;
}

uint64_t type metadata accessor for LogSpecificMedicationsIntent()
{
  return objc_opt_self();
}

id LogSpecificMedicationsIntentResponse.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

id LogSpecificMedicationsIntentResponse.init()()
{
  char *v0;
  char *v1;
  id v2;
  id v4;
  objc_super v5;
  void *v6;

  v1 = v0;
  v6 = v0;
  *(_QWORD *)&v0[OBJC_IVAR___LogSpecificMedicationsIntentResponse_code] = 0;

  v5.receiver = v6;
  v5.super_class = (Class)type metadata accessor for LogSpecificMedicationsIntentResponse();
  v4 = objc_msgSendSuper2(&v5, sel_init);
  v2 = v4;
  v6 = v4;

  return v4;
}

uint64_t type metadata accessor for LogSpecificMedicationsIntentResponse()
{
  return objc_opt_self();
}

id LogSpecificMedicationsIntentResponse.__allocating_init(coder:)(void *a1)
{
  objc_class *v1;
  id v4;

  v4 = objc_msgSend(objc_allocWithZone(v1), sel_initWithCoder_, a1);

  return v4;
}

id LogSpecificMedicationsIntentResponse.init(coder:)(void *a1)
{
  char *v1;
  char *v2;
  id v3;
  id v7;
  objc_super v8;
  void *v9;
  id v10;

  v9 = a1;
  v2 = v1;
  v10 = v1;
  *(_QWORD *)&v1[OBJC_IVAR___LogSpecificMedicationsIntentResponse_code] = 0;

  v8.receiver = v10;
  v8.super_class = (Class)type metadata accessor for LogSpecificMedicationsIntentResponse();
  v7 = objc_msgSendSuper2(&v8, sel_initWithCoder_, a1);
  if (v7)
  {
    v3 = v7;
    v10 = v7;

    return v7;
  }
  else
  {

    return 0;
  }
}

id LogSpecificMedicationsIntentResponse.__allocating_init(backingStore:)(void *a1)
{
  objc_class *v1;
  id v4;

  v4 = objc_msgSend(objc_allocWithZone(v1), sel_initWithBackingStore_, a1);

  return v4;
}

id LogSpecificMedicationsIntentResponse.init(backingStore:)(void *a1)
{
  char *v1;
  char *v2;
  id v3;
  id v7;
  objc_super v8;
  void *v9;
  id v10;

  v9 = a1;
  v2 = v1;
  v10 = v1;
  *(_QWORD *)&v1[OBJC_IVAR___LogSpecificMedicationsIntentResponse_code] = 0;

  v8.receiver = v10;
  v8.super_class = (Class)type metadata accessor for LogSpecificMedicationsIntentResponse();
  v7 = objc_msgSendSuper2(&v8, sel_initWithBackingStore_, a1);
  if (v7)
  {
    v3 = v7;
    v10 = v7;

    return v7;
  }
  else
  {

    return 0;
  }
}

id LogSpecificMedicationsIntentResponse.__allocating_init(propertiesByName:)(uint64_t a1)
{
  objc_class *v1;
  id v2;
  id v4;
  id v5;
  Class isa;
  id v8;

  v8 = objc_allocWithZone(v1);
  if (a1)
  {
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    v2 = objc_msgSend(v8, sel_initWithPropertiesByName_, isa);
  }
  else
  {
    v2 = objc_msgSend(v8, sel_initWithPropertiesByName_, 0);
  }
  v5 = v2;

  return v5;
}

id LogSpecificMedicationsIntentResponse.init(propertiesByName:)(uint64_t a1)
{
  char *v1;
  char *v2;
  id v3;
  id v6;
  Class isa;
  Class v8;
  objc_super v10;
  uint64_t v11;
  id v12;

  v11 = a1;
  v2 = v1;
  v12 = v1;
  *(_QWORD *)&v1[OBJC_IVAR___LogSpecificMedicationsIntentResponse_code] = 0;

  swift_bridgeObjectRetain();
  if (a1)
  {
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    v8 = isa;
  }
  else
  {
    v8 = 0;
  }
  v10.receiver = v12;
  v10.super_class = (Class)type metadata accessor for LogSpecificMedicationsIntentResponse();
  v6 = objc_msgSendSuper2(&v10, sel_initWithPropertiesByName_, v8);

  if (v6)
  {
    v3 = v6;
    v12 = v6;
    swift_bridgeObjectRelease();

    return v6;
  }
  else
  {

    swift_bridgeObjectRelease();
    return 0;
  }
}

id LogSpecificMedicationsIntentResponse.__deallocating_deinit()
{
  void *v0;
  objc_super v2;
  void *v3;

  v3 = v0;
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for LogSpecificMedicationsIntentResponse();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

unint64_t base witness table accessor for Equatable in LogSpecificMedicationsIntentResponseCode()
{
  return lazy protocol witness table accessor for type LogSpecificMedicationsIntentResponseCode and conformance LogSpecificMedicationsIntentResponseCode();
}

unint64_t lazy protocol witness table accessor for type LogSpecificMedicationsIntentResponseCode and conformance LogSpecificMedicationsIntentResponseCode()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type LogSpecificMedicationsIntentResponseCode and conformance LogSpecificMedicationsIntentResponseCode;
  if (!lazy protocol witness table cache variable for type LogSpecificMedicationsIntentResponseCode and conformance LogSpecificMedicationsIntentResponseCode)
  {
    v0 = MEMORY[0x24957D92C](&protocol conformance descriptor for LogSpecificMedicationsIntentResponseCode, &type metadata for LogSpecificMedicationsIntentResponseCode);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type LogSpecificMedicationsIntentResponseCode and conformance LogSpecificMedicationsIntentResponseCode);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type LogSpecificMedicationsIntentResponseCode and conformance LogSpecificMedicationsIntentResponseCode;
  if (!lazy protocol witness table cache variable for type LogSpecificMedicationsIntentResponseCode and conformance LogSpecificMedicationsIntentResponseCode)
  {
    v0 = MEMORY[0x24957D92C](&protocol conformance descriptor for LogSpecificMedicationsIntentResponseCode, &type metadata for LogSpecificMedicationsIntentResponseCode);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type LogSpecificMedicationsIntentResponseCode and conformance LogSpecificMedicationsIntentResponseCode);
    return v0;
  }
  return v2;
}

void sub_2475635CC(id *a1@<X0>, uint64_t *a2@<X8>)
{
  key path getter for LogSpecificMedicationsIntentResponse.code : LogSpecificMedicationsIntentResponse(a1, a2);
}

void sub_2475635E0(uint64_t *a1, id *a2)
{
  key path setter for LogSpecificMedicationsIntentResponse.code : LogSpecificMedicationsIntentResponse(a1, a2);
}

ValueMetadata *type metadata accessor for LogSpecificMedicationsIntentResponseCode()
{
  return &type metadata for LogSpecificMedicationsIntentResponseCode;
}

id LogGenericMedicationsIntentHandler.__allocating_init(storage:)(_QWORD *a1)
{
  objc_class *v1;
  id v2;

  v2 = objc_allocWithZone(v1);
  return LogGenericMedicationsIntentHandler.init(storage:)(a1);
}

id LogGenericMedicationsIntentHandler.init(storage:)(_QWORD *a1)
{
  void *v1;
  id v2;
  id v3;
  id v5;
  char *v6;
  objc_class *ObjectType;
  objc_super v9;
  _QWORD v10[5];
  _QWORD v11[5];
  _QWORD __dst[6];
  id v13;

  ObjectType = (objc_class *)swift_getObjectType();
  __dst[5] = a1;
  v2 = v1;
  v13 = v1;
  outlined init with copy of QuantityPersisting?(a1, v11);
  if (v11[3])
  {
    outlined init with take of QuantityPersisting(v11, __dst);
  }
  else
  {
    memset(v10, 0, sizeof(v10));
    __dst[3] = &type metadata for GenericMedicationsPersistor;
    __dst[4] = &protocol witness table for GenericMedicationsPersistor;
    __dst[0] = swift_allocObject();
    GenericMedicationsPersistor.init(medStorageHelper:)(v10, (_QWORD *)(__dst[0] + 16));
    outlined destroy of QuantityPersisting?((uint64_t)v11);
  }
  outlined init with take of QuantityPersisting(__dst, &v6[OBJC_IVAR____TtC19SiriWellnessIntents34LogGenericMedicationsIntentHandler_storage]);

  v9.receiver = v13;
  v9.super_class = ObjectType;
  v5 = objc_msgSendSuper2(&v9, sel_init);
  v3 = v5;
  v13 = v5;
  outlined destroy of QuantityPersisting?((uint64_t)a1);

  return v5;
}

id *GenericMedicationsPersistor.init(medStorageHelper:)@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  id v2;
  id v3;
  uint64_t v5;
  void *v7;
  _QWORD v9[5];
  _QWORD v10[5];
  _QWORD __dst[6];
  id __b[7];

  memset(__b, 0, sizeof(__b));
  __dst[5] = a1;
  type metadata accessor for HKHealthStore();
  v7 = (void *)NSDateFormatter.__allocating_init()();
  v2 = v7;
  __b[0] = v7;
  type metadata accessor for HKMedicationExposableDoseEventControl();
  __b[1] = HKUnitPreferenceController.__allocating_init(healthStore:)(v7);
  outlined init with copy of QuantityPersisting?(a1, v10);
  if (v10[3])
  {
    outlined init with take of QuantityPersisting(v10, __dst);
  }
  else
  {
    v5 = type metadata accessor for MedStorageHelper();
    memset(v9, 0, sizeof(v9));
    v3 = MedStorageHelper.__allocating_init(storage:)(v9);
    __dst[3] = v5;
    __dst[4] = &protocol witness table for MedStorageHelper;
    __dst[0] = v3;
    outlined destroy of QuantityPersisting?((uint64_t)v10);
  }
  outlined init with take of QuantityPersisting(__dst, &__b[2]);
  outlined init with copy of GenericMedicationsPersistor((uint64_t)__b, a2);
  outlined destroy of QuantityPersisting?((uint64_t)a1);
  return outlined destroy of GenericMedicationsPersistor(__b);
}

uint64_t sub_247563940()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1(v0 + 32);
  return swift_deallocObject();
}

uint64_t LogGenericMedicationsIntentHandler.handle(intent:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(v2 + 584) = v1;
  *(_QWORD *)(v2 + 576) = a1;
  *(_QWORD *)(v2 + 304) = v2;
  *(_QWORD *)(v2 + 312) = 0;
  *(_QWORD *)(v2 + 320) = 0;
  *(_BYTE *)(v2 + 760) = 0;
  *(_BYTE *)(v2 + 768) = 0;
  *(_BYTE *)(v2 + 776) = 0;
  *(_BYTE *)(v2 + 784) = 0;
  v3 = type metadata accessor for Logger();
  *(_QWORD *)(v2 + 592) = v3;
  *(_QWORD *)(v2 + 600) = *(_QWORD *)(v3 - 8);
  *(_QWORD *)(v2 + 608) = swift_task_alloc();
  *(_QWORD *)(v2 + 616) = swift_task_alloc();
  *(_QWORD *)(v2 + 624) = swift_task_alloc();
  *(_QWORD *)(v2 + 632) = swift_task_alloc();
  *(_QWORD *)(v2 + 640) = swift_task_alloc();
  *(_QWORD *)(v2 + 648) = swift_task_alloc();
  *(_QWORD *)(v2 + 656) = swift_task_alloc();
  *(_QWORD *)(v2 + 312) = a1;
  *(_QWORD *)(v2 + 320) = v1;
  return swift_task_switch();
}

{
  uint64_t *v1;
  uint64_t v3;

  v3 = *v1;
  *(_QWORD *)(v3 + 304) = *v1;
  *(_QWORD *)(v3 + 736) = a1;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t *v1;
  uint64_t v3;

  v3 = *v1;
  *(_QWORD *)(v3 + 304) = *v1;
  *(_QWORD *)(v3 + 752) = a1;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t LogGenericMedicationsIntentHandler.handle(intent:)()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t, uint64_t, uint64_t);
  void (*v3)(uint64_t, uint64_t);
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint8_t *buf;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint32_t v22;
  os_log_type_t v23;
  NSObject *v24;
  uint64_t v25;

  v1 = *(_QWORD *)(v0 + 656);
  v19 = *(_QWORD *)(v0 + 600);
  v21 = *(_QWORD *)(v0 + 592);
  *(_QWORD *)(v0 + 304) = v0;
  v20 = Logger.wellnessIntents.unsafeMutableAddressor();
  swift_beginAccess();
  v2 = *(void (**)(uint64_t, uint64_t, uint64_t))(v19 + 16);
  *(_QWORD *)(v0 + 664) = v2;
  v2(v1, v20, v21);
  swift_endAccess();
  v24 = Logger.logObject.getter();
  v23 = static os_log_type_t.debug.getter();
  *(_QWORD *)(v0 + 328) = 2;
  *(_QWORD *)(v0 + 672) = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  *(_QWORD *)(v0 + 680) = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  *(_QWORD *)(v0 + 688) = lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  v22 = *(_DWORD *)(v0 + 764);
  *(_QWORD *)(v0 + 696) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
  v25 = _allocateUninitializedArray<A>(_:)();
  if (os_log_type_enabled(v24, v23))
  {
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    v15 = createStorage<A>(capacity:type:)(0);
    v16 = createStorage<A>(capacity:type:)(0);
    *(_QWORD *)(v18 + 544) = buf;
    *(_QWORD *)(v18 + 552) = v15;
    *(_QWORD *)(v18 + 560) = v16;
    serialize(_:at:)(0, (_BYTE **)(v18 + 544));
    serialize(_:at:)(0, (_BYTE **)(v18 + 544));
    *(_QWORD *)(v18 + 568) = v25;
    v17 = (_QWORD *)swift_task_alloc();
    v17[2] = v18 + 544;
    v17[3] = v18 + 552;
    v17[4] = v18 + 560;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
    lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
    Sequence.forEach(_:)();
    swift_task_dealloc();
    _os_log_impl(&dword_24749F000, v24, v23, "Checking authorization for medications...", buf, v22);
    destroyStorage<A>(_:count:)(v15, 0, v13);
    destroyStorage<A>(_:count:)(v16, 0, MEMORY[0x24BEE4AD8] + 8);
    MEMORY[0x24957D398](buf, MEMORY[0x24BEE4260]);
  }
  swift_bridgeObjectRelease();
  *(_QWORD *)(v18 + 704) = 0;
  v7 = *(_QWORD *)(v18 + 656);
  v6 = *(_QWORD *)(v18 + 600);
  v8 = *(_QWORD *)(v18 + 592);
  v9 = *(_QWORD *)(v18 + 584);

  v3 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  *(_QWORD *)(v18 + 712) = v3;
  v3(v7, v8);
  outlined init with copy of QuantityPersisting(v9 + OBJC_IVAR____TtC19SiriWellnessIntents34LogGenericMedicationsIntentHandler_storage, v18 + 16);
  v12 = *(_QWORD *)(v18 + 40);
  v10 = *(_QWORD *)(v18 + 48);
  __swift_project_boxed_opaque_existential_1((_QWORD *)(v18 + 16), v12);
  v11 = (uint64_t (*)(uint64_t, uint64_t))(*(_QWORD *)(v10 + 8) + **(int **)(v10 + 8));
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v18 + 720) = v4;
  *v4 = *(_QWORD *)(v18 + 304);
  v4[1] = LogGenericMedicationsIntentHandler.handle(intent:);
  return v11(v12, v10);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  id v4;
  void *v5;
  id v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  id v10;
  void *v11;
  id v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(uint64_t, uint64_t);
  uint64_t v23;
  uint8_t *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(uint64_t, uint64_t, uint64_t);
  uint32_t v31;
  os_log_type_t v32;
  NSObject *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(uint64_t, uint64_t);
  uint64_t v38;
  uint8_t *v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  void (*v45)(uint64_t, uint64_t, uint64_t);
  uint32_t v46;
  os_log_type_t v47;
  NSObject *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void (*v52)(uint64_t, uint64_t);
  char *v53;
  uint64_t v54;
  uint8_t *v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  void (*v61)(uint64_t, uint64_t, uint64_t);
  uint32_t v62;
  os_log_type_t v63;
  NSObject *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  void (*v68)(uint64_t, uint64_t);
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t (*v72)(_QWORD, _QWORD, _QWORD, uint64_t, uint64_t);
  uint64_t v73;
  uint8_t *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  void (*v79)(uint64_t, uint64_t, uint64_t);
  uint32_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  _QWORD *v102;
  NSObject *log;
  os_log_type_t v104;
  id v105;
  unsigned __int8 v106;
  char v107;
  id v108;
  unsigned __int8 v109;
  char v110;
  uint64_t v111;
  uint64_t v112;
  void (*v113)(uint64_t, uint64_t);
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t (*v117)(_QWORD, _QWORD, uint64_t, uint64_t);
  uint64_t v118;
  uint8_t *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  void (*v124)(uint64_t, uint64_t, uint64_t);
  uint32_t size;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  _QWORD *v140;
  NSObject *oslog;
  os_log_type_t v142;
  id v143;
  unsigned __int8 v144;
  char v145;
  id v146;
  unsigned __int8 v147;
  char v148;
  uint64_t v149;
  uint64_t v150;
  void (*v151)(uint64_t, uint64_t);
  id v152;
  uint64_t v153;
  uint64_t v154;
  uint8_t *buf;
  uint64_t v156;
  uint64_t v157;
  _QWORD *v158;
  uint64_t v159;
  uint64_t v160;
  void (*v161)(uint64_t, uint64_t, uint64_t);
  uint32_t v162;
  os_log_type_t v163;
  NSObject *v164;
  uint64_t v165;
  uint64_t v166;
  char v167;
  char v168;
  uint8_t *v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t (*v172)(uint64_t, uint64_t, uint64_t);
  uint64_t v173;
  uint8_t *v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t (*v177)(uint64_t, uint64_t, uint64_t);
  uint64_t v178;

  v167 = *(_BYTE *)(v0 + 761);
  *(_QWORD *)(v0 + 304) = v0;
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  if ((v167 & 1) == 0)
  {
    v30 = *(void (**)(uint64_t, uint64_t, uint64_t))(v166 + 664);
    v18 = *(_QWORD *)(v166 + 608);
    v29 = *(_QWORD *)(v166 + 592);
    v28 = Logger.wellnessIntents.unsafeMutableAddressor();
    swift_beginAccess();
    v30(v18, v28, v29);
    swift_endAccess();
    v33 = Logger.logObject.getter();
    v32 = static os_log_type_t.error.getter();
    *(_QWORD *)(v166 + 336) = 2;
    UnsignedInteger<>.init<A>(_:)();
    v31 = *(_DWORD *)(v166 + 772);
    v34 = _allocateUninitializedArray<A>(_:)();
    if (os_log_type_enabled(v33, v32))
    {
      v19 = *(_QWORD *)(v166 + 704);
      v24 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      v25 = createStorage<A>(capacity:type:)(0);
      v26 = createStorage<A>(capacity:type:)(0);
      *(_QWORD *)(v166 + 344) = v24;
      *(_QWORD *)(v166 + 352) = v25;
      *(_QWORD *)(v166 + 360) = v26;
      serialize(_:at:)(0, (_BYTE **)(v166 + 344));
      serialize(_:at:)(0, (_BYTE **)(v166 + 344));
      *(_QWORD *)(v166 + 368) = v34;
      v27 = (_QWORD *)swift_task_alloc();
      v27[2] = v166 + 344;
      v27[3] = v166 + 352;
      v27[4] = v166 + 360;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
      lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
      result = Sequence.forEach(_:)();
      if (v19)
        return result;
      swift_task_dealloc();
      _os_log_impl(&dword_24749F000, v33, v32, "Not authorized to write medications data.", v24, v31);
      destroyStorage<A>(_:count:)(v25, 0, v23);
      destroyStorage<A>(_:count:)(v26, 0, MEMORY[0x24BEE4AD8] + 8);
      MEMORY[0x24957D398](v24, MEMORY[0x24BEE4260]);
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    v22 = *(void (**)(uint64_t, uint64_t))(v166 + 712);
    v20 = *(_QWORD *)(v166 + 608);
    v21 = *(_QWORD *)(v166 + 592);

    v22(v20, v21);
    type metadata accessor for LogGenericMedicationsIntentResponse();
    v53 = LogGenericMedicationsIntentResponse.__allocating_init(code:userActivity:)(101, 0);
LABEL_55:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(char *))(*(_QWORD *)(v166 + 304) + 8))(v53);
  }
  v161 = *(void (**)(uint64_t, uint64_t, uint64_t))(v166 + 664);
  v1 = *(_QWORD *)(v166 + 648);
  v160 = *(_QWORD *)(v166 + 592);
  v159 = Logger.wellnessIntents.unsafeMutableAddressor();
  swift_beginAccess();
  v161(v1, v159, v160);
  swift_endAccess();
  v164 = Logger.logObject.getter();
  v163 = static os_log_type_t.debug.getter();
  *(_QWORD *)(v166 + 376) = 2;
  UnsignedInteger<>.init<A>(_:)();
  v162 = *(_DWORD *)(v166 + 780);
  v165 = _allocateUninitializedArray<A>(_:)();
  if (os_log_type_enabled(v164, v163))
  {
    v2 = *(_QWORD *)(v166 + 704);
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    v154 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    v156 = createStorage<A>(capacity:type:)(0);
    v157 = createStorage<A>(capacity:type:)(0);
    *(_QWORD *)(v166 + 512) = buf;
    *(_QWORD *)(v166 + 520) = v156;
    *(_QWORD *)(v166 + 528) = v157;
    serialize(_:at:)(0, (_BYTE **)(v166 + 512));
    serialize(_:at:)(0, (_BYTE **)(v166 + 512));
    *(_QWORD *)(v166 + 536) = v165;
    v158 = (_QWORD *)swift_task_alloc();
    v158[2] = v166 + 512;
    v158[3] = v166 + 520;
    v158[4] = v166 + 528;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
    lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
    result = Sequence.forEach(_:)();
    if (v2)
      return result;
    swift_task_dealloc();
    _os_log_impl(&dword_24749F000, v164, v163, "Authorization check successful for medications!", buf, v162);
    destroyStorage<A>(_:count:)(v156, 0, v154);
    destroyStorage<A>(_:count:)(v157, 0, MEMORY[0x24BEE4AD8] + 8);
    MEMORY[0x24957D398](buf, MEMORY[0x24BEE4260]);
    swift_bridgeObjectRelease();
    v153 = 0;
  }
  else
  {
    swift_bridgeObjectRelease();
    v153 = *(_QWORD *)(v166 + 704);
  }
  v151 = *(void (**)(uint64_t, uint64_t))(v166 + 712);
  v149 = *(_QWORD *)(v166 + 648);
  v150 = *(_QWORD *)(v166 + 592);
  v152 = *(id *)(v166 + 576);

  v151(v149, v150);
  *(_QWORD *)(v166 + 384) = objc_msgSend(v152, sel_medStatus);
  if (*(_QWORD *)(v166 + 384))
  {
    v146 = *(id *)(v166 + 384);
    v4 = v146;
    outlined destroy of HealthKitPersistor((id *)(v166 + 384));
    v147 = objc_msgSend(v146, sel_BOOLValue);

    v148 = v147 & 1;
  }
  else
  {
    outlined destroy of HealthKitPersistor((id *)(v166 + 384));
    v148 = 2;
  }
  if (v148 == 2)
  {
    v45 = *(void (**)(uint64_t, uint64_t, uint64_t))(v166 + 664);
    v17 = *(_QWORD *)(v166 + 616);
    v44 = *(_QWORD *)(v166 + 592);
    v43 = Logger.wellnessIntents.unsafeMutableAddressor();
    swift_beginAccess();
    v45(v17, v43, v44);
    swift_endAccess();
    v48 = Logger.logObject.getter();
    v47 = static os_log_type_t.error.getter();
    *(_QWORD *)(v166 + 392) = 2;
    UnsignedInteger<>.init<A>(_:)();
    v46 = *(_DWORD *)(v166 + 788);
    v49 = _allocateUninitializedArray<A>(_:)();
    if (os_log_type_enabled(v48, v47))
    {
      v39 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      v40 = createStorage<A>(capacity:type:)(0);
      v41 = createStorage<A>(capacity:type:)(0);
      *(_QWORD *)(v166 + 400) = v39;
      *(_QWORD *)(v166 + 408) = v40;
      *(_QWORD *)(v166 + 416) = v41;
      serialize(_:at:)(0, (_BYTE **)(v166 + 400));
      serialize(_:at:)(0, (_BYTE **)(v166 + 400));
      *(_QWORD *)(v166 + 424) = v49;
      v42 = (_QWORD *)swift_task_alloc();
      v42[2] = v166 + 400;
      v42[3] = v166 + 408;
      v42[4] = v166 + 416;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
      lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
      result = Sequence.forEach(_:)();
      if (v153)
        return result;
      swift_task_dealloc();
      _os_log_impl(&dword_24749F000, v48, v47, "Unable to extract BOOLean value for medStatusTaken from LogGenericMedicationsIntent.", v39, v46);
      destroyStorage<A>(_:count:)(v40, 0, v38);
      destroyStorage<A>(_:count:)(v41, 0, MEMORY[0x24BEE4AD8] + 8);
      MEMORY[0x24957D398](v39, MEMORY[0x24BEE4260]);
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    v37 = *(void (**)(uint64_t, uint64_t))(v166 + 712);
    v35 = *(_QWORD *)(v166 + 616);
    v36 = *(_QWORD *)(v166 + 592);

    v37(v35, v36);
    type metadata accessor for LogGenericMedicationsIntentResponse();
    v53 = LogGenericMedicationsIntentResponse.__allocating_init(code:userActivity:)(5, 0);
    goto LABEL_55;
  }
  v5 = *(void **)(v166 + 576);
  *(_BYTE *)(v166 + 760) = v148 & 1;
  *(_QWORD *)(v166 + 432) = objc_msgSend(v5, sel_shouldOverwriteExistingStatuses);
  if (*(_QWORD *)(v166 + 432))
  {
    v143 = *(id *)(v166 + 432);
    v6 = v143;
    outlined destroy of HealthKitPersistor((id *)(v166 + 432));
    v144 = objc_msgSend(v143, sel_BOOLValue);

    v145 = v144 & 1;
  }
  else
  {
    outlined destroy of HealthKitPersistor((id *)(v166 + 432));
    v145 = 2;
  }
  if (v145 == 2)
  {
    *(_QWORD *)(v166 + 440) = objc_msgSend(*(id *)(v166 + 576), sel_isTimeframeToday);
    if (*(_QWORD *)(v166 + 440))
    {
      v108 = *(id *)(v166 + 440);
      v10 = v108;
      outlined destroy of HealthKitPersistor((id *)(v166 + 440));
      v109 = objc_msgSend(v108, sel_BOOLValue);

      v110 = v109 & 1;
    }
    else
    {
      outlined destroy of HealthKitPersistor((id *)(v166 + 440));
      v110 = 2;
    }
    if (v110 != 2)
    {
      v11 = *(void **)(v166 + 576);
      *(_BYTE *)(v166 + 768) = v110 & 1;
      *(_QWORD *)(v166 + 488) = objc_msgSend(v11, sel_confirmedLogAsScheduled);
      if (*(_QWORD *)(v166 + 488))
      {
        v105 = *(id *)(v166 + 488);
        v12 = v105;
        outlined destroy of HealthKitPersistor((id *)(v166 + 488));
        v106 = objc_msgSend(v105, sel_BOOLValue);

        v107 = v106 & 1;
      }
      else
      {
        outlined destroy of HealthKitPersistor((id *)(v166 + 488));
        v107 = 2;
      }
      if (v107 == 2)
        v168 = 0;
      else
        v168 = v107 & 1;
      v79 = *(void (**)(uint64_t, uint64_t, uint64_t))(v166 + 664);
      v13 = *(_QWORD *)(v166 + 632);
      v78 = *(_QWORD *)(v166 + 592);
      *(_BYTE *)(v166 + 776) = v168 & 1;
      v77 = Logger.wellnessIntents.unsafeMutableAddressor();
      swift_beginAccess();
      v79(v13, v77, v78);
      swift_endAccess();
      v81 = swift_allocObject();
      *(_BYTE *)(v81 + 16) = v110 & 1;
      v85 = swift_allocObject();
      *(_BYTE *)(v85 + 16) = v148 & 1;
      v89 = swift_allocObject();
      *(_BYTE *)(v89 + 16) = v168 & 1;
      log = Logger.logObject.getter();
      v104 = static os_log_type_t.debug.getter();
      *(_QWORD *)(v166 + 496) = 20;
      UnsignedInteger<>.init<A>(_:)();
      v80 = *(_DWORD *)(v166 + 796);
      v93 = swift_allocObject();
      *(_BYTE *)(v93 + 16) = 0;
      v94 = swift_allocObject();
      *(_BYTE *)(v94 + 16) = 4;
      v82 = swift_allocObject();
      *(_QWORD *)(v82 + 16) = partial apply for implicit closure #5 in LogSpecificMedicationsIntentHandler.handle(intent:);
      *(_QWORD *)(v82 + 24) = v81;
      v83 = swift_allocObject();
      *(_QWORD *)(v83 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:format:privacy:);
      *(_QWORD *)(v83 + 24) = v82;
      v84 = swift_allocObject();
      *(_QWORD *)(v84 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:);
      *(_QWORD *)(v84 + 24) = v83;
      v95 = swift_allocObject();
      *(_QWORD *)(v95 + 16) = partial apply for thunk for @escaping @callee_guaranteed () -> (@unowned Int32);
      *(_QWORD *)(v95 + 24) = v84;
      v96 = swift_allocObject();
      *(_BYTE *)(v96 + 16) = 0;
      v97 = swift_allocObject();
      *(_BYTE *)(v97 + 16) = 4;
      v86 = swift_allocObject();
      *(_QWORD *)(v86 + 16) = partial apply for implicit closure #5 in LogSpecificMedicationsIntentHandler.handle(intent:);
      *(_QWORD *)(v86 + 24) = v85;
      v87 = swift_allocObject();
      *(_QWORD *)(v87 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:format:privacy:);
      *(_QWORD *)(v87 + 24) = v86;
      v88 = swift_allocObject();
      *(_QWORD *)(v88 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:);
      *(_QWORD *)(v88 + 24) = v87;
      v98 = swift_allocObject();
      *(_QWORD *)(v98 + 16) = partial apply for thunk for @escaping @callee_guaranteed () -> (@unowned Int32);
      *(_QWORD *)(v98 + 24) = v88;
      v99 = swift_allocObject();
      *(_BYTE *)(v99 + 16) = 0;
      v100 = swift_allocObject();
      *(_BYTE *)(v100 + 16) = 4;
      v90 = swift_allocObject();
      *(_QWORD *)(v90 + 16) = partial apply for implicit closure #5 in LogSpecificMedicationsIntentHandler.handle(intent:);
      *(_QWORD *)(v90 + 24) = v89;
      v91 = swift_allocObject();
      *(_QWORD *)(v91 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:format:privacy:);
      *(_QWORD *)(v91 + 24) = v90;
      v92 = swift_allocObject();
      *(_QWORD *)(v92 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:);
      *(_QWORD *)(v92 + 24) = v91;
      v101 = swift_allocObject();
      *(_QWORD *)(v101 + 16) = partial apply for thunk for @escaping @callee_guaranteed () -> (@unowned Int32);
      *(_QWORD *)(v101 + 24) = v92;
      _allocateUninitializedArray<A>(_:)();
      v102 = v14;
      swift_retain();
      *v102 = partial apply for closure #1 in OSLogArguments.append(_:);
      v102[1] = v93;
      swift_retain();
      v102[2] = partial apply for closure #1 in OSLogArguments.append(_:);
      v102[3] = v94;
      swift_retain();
      v102[4] = _s2os14OSLogArgumentsV6appendyyxycs17FixedWidthIntegerRzlFySpys5UInt8VGz_SpySo8NSObjectCSgGSgzSpyypGSgztcfU_TA_0;
      v102[5] = v95;
      swift_retain();
      v102[6] = partial apply for closure #1 in OSLogArguments.append(_:);
      v102[7] = v96;
      swift_retain();
      v102[8] = partial apply for closure #1 in OSLogArguments.append(_:);
      v102[9] = v97;
      swift_retain();
      v102[10] = _s2os14OSLogArgumentsV6appendyyxycs17FixedWidthIntegerRzlFySpys5UInt8VGz_SpySo8NSObjectCSgGSgzSpyypGSgztcfU_TA_0;
      v102[11] = v98;
      swift_retain();
      v102[12] = partial apply for closure #1 in OSLogArguments.append(_:);
      v102[13] = v99;
      swift_retain();
      v102[14] = partial apply for closure #1 in OSLogArguments.append(_:);
      v102[15] = v100;
      swift_retain();
      v102[16] = _s2os14OSLogArgumentsV6appendyyxycs17FixedWidthIntegerRzlFySpys5UInt8VGz_SpySo8NSObjectCSgGSgzSpyypGSgztcfU_TA_0;
      v102[17] = v101;
      _finalizeUninitializedArray<A>(_:)();
      swift_bridgeObjectRelease();
      if (os_log_type_enabled(log, v104))
      {
        v74 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
        v73 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
        v75 = createStorage<A>(capacity:type:)(0);
        v76 = createStorage<A>(capacity:type:)(0);
        v169 = v74;
        v170 = v75;
        v171 = v76;
        serialize(_:at:)(0, &v169);
        serialize(_:at:)(3, &v169);
        v172 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
        v173 = v93;
        result = closure #1 in osLogInternal(_:log:type:)(&v172, (uint64_t)&v169, (uint64_t)&v170, (uint64_t)&v171);
        if (v153)
          return result;
        v172 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
        v173 = v94;
        closure #1 in osLogInternal(_:log:type:)(&v172, (uint64_t)&v169, (uint64_t)&v170, (uint64_t)&v171);
        v172 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))_s2os14OSLogArgumentsV6appendyyxycs17FixedWidthIntegerRzlFySpys5UInt8VGz_SpySo8NSObjectCSgGSgzSpyypGSgztcfU_TA_0;
        v173 = v95;
        closure #1 in osLogInternal(_:log:type:)(&v172, (uint64_t)&v169, (uint64_t)&v170, (uint64_t)&v171);
        v172 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
        v173 = v96;
        closure #1 in osLogInternal(_:log:type:)(&v172, (uint64_t)&v169, (uint64_t)&v170, (uint64_t)&v171);
        v172 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
        v173 = v97;
        closure #1 in osLogInternal(_:log:type:)(&v172, (uint64_t)&v169, (uint64_t)&v170, (uint64_t)&v171);
        v172 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))_s2os14OSLogArgumentsV6appendyyxycs17FixedWidthIntegerRzlFySpys5UInt8VGz_SpySo8NSObjectCSgGSgzSpyypGSgztcfU_TA_0;
        v173 = v98;
        closure #1 in osLogInternal(_:log:type:)(&v172, (uint64_t)&v169, (uint64_t)&v170, (uint64_t)&v171);
        v172 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
        v173 = v99;
        closure #1 in osLogInternal(_:log:type:)(&v172, (uint64_t)&v169, (uint64_t)&v170, (uint64_t)&v171);
        v172 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
        v173 = v100;
        closure #1 in osLogInternal(_:log:type:)(&v172, (uint64_t)&v169, (uint64_t)&v170, (uint64_t)&v171);
        v172 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))_s2os14OSLogArgumentsV6appendyyxycs17FixedWidthIntegerRzlFySpys5UInt8VGz_SpySo8NSObjectCSgGSgzSpyypGSgztcfU_TA_0;
        v173 = v101;
        closure #1 in osLogInternal(_:log:type:)(&v172, (uint64_t)&v169, (uint64_t)&v170, (uint64_t)&v171);
        _os_log_impl(&dword_24749F000, log, v104, "Persisting generic medications...\n  isTimeframeToday: %{BOOL}d\n  medStatusIsTaken: %{BOOL}d\n  confirmedLogAsScheduled: %{BOOL}d", v74, v80);
        destroyStorage<A>(_:count:)(v75, 0, v73);
        destroyStorage<A>(_:count:)(v76, 0, MEMORY[0x24BEE4AD8] + 8);
        MEMORY[0x24957D398](v74, MEMORY[0x24BEE4260]);
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
      }
      else
      {
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
      }
      v68 = *(void (**)(uint64_t, uint64_t))(v166 + 712);
      v66 = *(_QWORD *)(v166 + 632);
      v67 = *(_QWORD *)(v166 + 592);
      v69 = *(_QWORD *)(v166 + 584);

      v68(v66, v67);
      outlined init with copy of QuantityPersisting(v69 + OBJC_IVAR____TtC19SiriWellnessIntents34LogGenericMedicationsIntentHandler_storage, v166 + 56);
      v70 = *(_QWORD *)(v166 + 80);
      v71 = *(_QWORD *)(v166 + 88);
      __swift_project_boxed_opaque_existential_1((_QWORD *)(v166 + 56), v70);
      v72 = (uint64_t (*)(_QWORD, _QWORD, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v71 + 24)
                                                                             + **(int **)(v71 + 24));
      v15 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v166 + 744) = v15;
      *v15 = *(_QWORD *)(v166 + 304);
      v15[1] = LogGenericMedicationsIntentHandler.handle(intent:);
      return v72(v110 & 1, v148 & 1, v168 & 1, v70, v71);
    }
    v61 = *(void (**)(uint64_t, uint64_t, uint64_t))(v166 + 664);
    v16 = *(_QWORD *)(v166 + 624);
    v60 = *(_QWORD *)(v166 + 592);
    v59 = Logger.wellnessIntents.unsafeMutableAddressor();
    swift_beginAccess();
    v61(v16, v59, v60);
    swift_endAccess();
    v64 = Logger.logObject.getter();
    v63 = static os_log_type_t.error.getter();
    *(_QWORD *)(v166 + 448) = 2;
    UnsignedInteger<>.init<A>(_:)();
    v62 = *(_DWORD *)(v166 + 792);
    v65 = _allocateUninitializedArray<A>(_:)();
    if (os_log_type_enabled(v64, v63))
    {
      v55 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      v54 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      v56 = createStorage<A>(capacity:type:)(0);
      v57 = createStorage<A>(capacity:type:)(0);
      *(_QWORD *)(v166 + 456) = v55;
      *(_QWORD *)(v166 + 464) = v56;
      *(_QWORD *)(v166 + 472) = v57;
      serialize(_:at:)(0, (_BYTE **)(v166 + 456));
      serialize(_:at:)(0, (_BYTE **)(v166 + 456));
      *(_QWORD *)(v166 + 480) = v65;
      v58 = (_QWORD *)swift_task_alloc();
      v58[2] = v166 + 456;
      v58[3] = v166 + 464;
      v58[4] = v166 + 472;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
      lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
      result = Sequence.forEach(_:)();
      if (v153)
        return result;
      swift_task_dealloc();
      _os_log_impl(&dword_24749F000, v64, v63, "Not an override case & unable to extract BOOLean value for isTimeframeToday from LogGenericMedicationsIntent.", v55, v62);
      destroyStorage<A>(_:count:)(v56, 0, v54);
      destroyStorage<A>(_:count:)(v57, 0, MEMORY[0x24BEE4AD8] + 8);
      MEMORY[0x24957D398](v55, MEMORY[0x24BEE4260]);
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    v52 = *(void (**)(uint64_t, uint64_t))(v166 + 712);
    v50 = *(_QWORD *)(v166 + 624);
    v51 = *(_QWORD *)(v166 + 592);

    v52(v50, v51);
    type metadata accessor for LogGenericMedicationsIntentResponse();
    v53 = LogGenericMedicationsIntentResponse.__allocating_init(code:userActivity:)(5, 0);
    goto LABEL_55;
  }
  v124 = *(void (**)(uint64_t, uint64_t, uint64_t))(v166 + 664);
  v7 = *(_QWORD *)(v166 + 640);
  v123 = *(_QWORD *)(v166 + 592);
  *(_BYTE *)(v166 + 784) = v145 & 1;
  v122 = Logger.wellnessIntents.unsafeMutableAddressor();
  swift_beginAccess();
  v124(v7, v122, v123);
  swift_endAccess();
  v126 = swift_allocObject();
  *(_BYTE *)(v126 + 16) = v148 & 1;
  v130 = swift_allocObject();
  *(_BYTE *)(v130 + 16) = v145 & 1;
  oslog = Logger.logObject.getter();
  v142 = static os_log_type_t.debug.getter();
  *(_QWORD *)(v166 + 504) = 14;
  UnsignedInteger<>.init<A>(_:)();
  size = *(_DWORD *)(v166 + 800);
  v134 = swift_allocObject();
  *(_BYTE *)(v134 + 16) = 0;
  v135 = swift_allocObject();
  *(_BYTE *)(v135 + 16) = 4;
  v127 = swift_allocObject();
  *(_QWORD *)(v127 + 16) = partial apply for implicit closure #5 in LogSpecificMedicationsIntentHandler.handle(intent:);
  *(_QWORD *)(v127 + 24) = v126;
  v128 = swift_allocObject();
  *(_QWORD *)(v128 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:format:privacy:);
  *(_QWORD *)(v128 + 24) = v127;
  v129 = swift_allocObject();
  *(_QWORD *)(v129 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:);
  *(_QWORD *)(v129 + 24) = v128;
  v136 = swift_allocObject();
  *(_QWORD *)(v136 + 16) = partial apply for thunk for @escaping @callee_guaranteed () -> (@unowned Int32);
  *(_QWORD *)(v136 + 24) = v129;
  v137 = swift_allocObject();
  *(_BYTE *)(v137 + 16) = 0;
  v138 = swift_allocObject();
  *(_BYTE *)(v138 + 16) = 4;
  v131 = swift_allocObject();
  *(_QWORD *)(v131 + 16) = partial apply for implicit closure #5 in LogSpecificMedicationsIntentHandler.handle(intent:);
  *(_QWORD *)(v131 + 24) = v130;
  v132 = swift_allocObject();
  *(_QWORD *)(v132 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:format:privacy:);
  *(_QWORD *)(v132 + 24) = v131;
  v133 = swift_allocObject();
  *(_QWORD *)(v133 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:);
  *(_QWORD *)(v133 + 24) = v132;
  v139 = swift_allocObject();
  *(_QWORD *)(v139 + 16) = partial apply for thunk for @escaping @callee_guaranteed () -> (@unowned Int32);
  *(_QWORD *)(v139 + 24) = v133;
  _allocateUninitializedArray<A>(_:)();
  v140 = v8;
  swift_retain();
  *v140 = partial apply for closure #1 in OSLogArguments.append(_:);
  v140[1] = v134;
  swift_retain();
  v140[2] = partial apply for closure #1 in OSLogArguments.append(_:);
  v140[3] = v135;
  swift_retain();
  v140[4] = _s2os14OSLogArgumentsV6appendyyxycs17FixedWidthIntegerRzlFySpys5UInt8VGz_SpySo8NSObjectCSgGSgzSpyypGSgztcfU_TA_0;
  v140[5] = v136;
  swift_retain();
  v140[6] = partial apply for closure #1 in OSLogArguments.append(_:);
  v140[7] = v137;
  swift_retain();
  v140[8] = partial apply for closure #1 in OSLogArguments.append(_:);
  v140[9] = v138;
  swift_retain();
  v140[10] = _s2os14OSLogArgumentsV6appendyyxycs17FixedWidthIntegerRzlFySpys5UInt8VGz_SpySo8NSObjectCSgGSgzSpyypGSgztcfU_TA_0;
  v140[11] = v139;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (!os_log_type_enabled(oslog, v142))
  {
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    goto LABEL_18;
  }
  v119 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
  v118 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
  v120 = createStorage<A>(capacity:type:)(0);
  v121 = createStorage<A>(capacity:type:)(0);
  v174 = v119;
  v175 = v120;
  v176 = v121;
  serialize(_:at:)(0, &v174);
  serialize(_:at:)(2, &v174);
  v177 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  v178 = v134;
  result = closure #1 in osLogInternal(_:log:type:)(&v177, (uint64_t)&v174, (uint64_t)&v175, (uint64_t)&v176);
  if (!v153)
  {
    v177 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v178 = v135;
    closure #1 in osLogInternal(_:log:type:)(&v177, (uint64_t)&v174, (uint64_t)&v175, (uint64_t)&v176);
    v177 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))_s2os14OSLogArgumentsV6appendyyxycs17FixedWidthIntegerRzlFySpys5UInt8VGz_SpySo8NSObjectCSgGSgzSpyypGSgztcfU_TA_0;
    v178 = v136;
    closure #1 in osLogInternal(_:log:type:)(&v177, (uint64_t)&v174, (uint64_t)&v175, (uint64_t)&v176);
    v177 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v178 = v137;
    closure #1 in osLogInternal(_:log:type:)(&v177, (uint64_t)&v174, (uint64_t)&v175, (uint64_t)&v176);
    v177 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v178 = v138;
    closure #1 in osLogInternal(_:log:type:)(&v177, (uint64_t)&v174, (uint64_t)&v175, (uint64_t)&v176);
    v177 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))_s2os14OSLogArgumentsV6appendyyxycs17FixedWidthIntegerRzlFySpys5UInt8VGz_SpySo8NSObjectCSgGSgzSpyypGSgztcfU_TA_0;
    v178 = v139;
    closure #1 in osLogInternal(_:log:type:)(&v177, (uint64_t)&v174, (uint64_t)&v175, (uint64_t)&v176);
    _os_log_impl(&dword_24749F000, oslog, v142, "Persisting generic medications with override...\n  medStatusIsTaken: %{BOOL}d\n  shouldOverwriteExistingStatuses: %{BOOL}d", v119, size);
    destroyStorage<A>(_:count:)(v120, 0, v118);
    destroyStorage<A>(_:count:)(v121, 0, MEMORY[0x24BEE4AD8] + 8);
    MEMORY[0x24957D398](v119, MEMORY[0x24BEE4260]);
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
LABEL_18:
    v113 = *(void (**)(uint64_t, uint64_t))(v166 + 712);
    v111 = *(_QWORD *)(v166 + 640);
    v112 = *(_QWORD *)(v166 + 592);
    v114 = *(_QWORD *)(v166 + 584);

    v113(v111, v112);
    outlined init with copy of QuantityPersisting(v114 + OBJC_IVAR____TtC19SiriWellnessIntents34LogGenericMedicationsIntentHandler_storage, v166 + 96);
    v115 = *(_QWORD *)(v166 + 120);
    v116 = *(_QWORD *)(v166 + 128);
    __swift_project_boxed_opaque_existential_1((_QWORD *)(v166 + 96), v115);
    v117 = (uint64_t (*)(_QWORD, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v116 + 16) + **(int **)(v116 + 16));
    v9 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v166 + 728) = v9;
    *v9 = *(_QWORD *)(v166 + 304);
    v9[1] = LogGenericMedicationsIntentHandler.handle(intent:);
    return v117(v148 & 1, v145 & 1, v115, v116);
  }
  return result;
}

{
  uint64_t v0;
  uint64_t v2;

  *(_QWORD *)(v0 + 304) = v0;
  __swift_destroy_boxed_opaque_existential_1(v0 + 96);
  v2 = *(_QWORD *)(v0 + 736);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v0 + 304) + 8))(v2);
}

{
  uint64_t v0;
  uint64_t v2;

  *(_QWORD *)(v0 + 304) = v0;
  __swift_destroy_boxed_opaque_existential_1(v0 + 56);
  v2 = *(_QWORD *)(v0 + 752);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v0 + 304) + 8))(v2);
}

uint64_t LogGenericMedicationsIntentHandler.handle(intent:)(char a1)
{
  uint64_t *v1;
  uint64_t v3;

  v3 = *v1;
  *(_QWORD *)(v3 + 304) = *v1;
  *(_BYTE *)(v3 + 761) = a1;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t @objc closure #1 in LogGenericMedicationsIntentHandler.handle(intent:)(void *a1, const void *a2, void *a3)
{
  _QWORD *v3;
  id v5;
  id v6;
  _QWORD *v7;
  uint64_t v10;

  v3[4] = a3;
  v3[3] = a1;
  v3[2] = v3;
  v5 = a1;
  v3[5] = _Block_copy(a2);
  v6 = a3;
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v10 + 48) = v7;
  *v7 = *(_QWORD *)(v10 + 16);
  v7[1] = @objc closure #1 in LogQuantityIntentHandler.handle(intent:);
  return LogGenericMedicationsIntentHandler.handle(intent:)((uint64_t)a1);
}

id LogGenericMedicationsIntentHandler.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

uint64_t LogGenericMedicationsIntentHandler.init()()
{
  uint64_t result;
  uint64_t v1;

  if (!"SiriWellnessIntents.LogGenericMedicationsIntentHandler")
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  result = closure #1 in _unimplementedInitializer(className:initName:file:line:column:)((uint64_t)"SiriWellnessIntents.LogGenericMedicationsIntentHandler", 54, (unint64_t)"init()", 6, 2, (unint64_t)"SiriWellnessIntents/LogGenericMedicationsIntentHandler.swift", 60, 2, v1, 0x11uLL, 0x14uLL);
  __break(1u);
  return result;
}

id LogGenericMedicationsIntentHandler.__deallocating_deinit()
{
  void *v0;
  objc_super v2;
  void *v3;

  v3 = v0;
  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

_QWORD *outlined init with copy of GenericMedicationsPersistor(uint64_t a1, _QWORD *a2)
{
  id v2;
  id v3;
  uint64_t v4;
  id v6;
  void *v7;

  v6 = *(id *)a1;
  v2 = *(id *)a1;
  *a2 = v6;
  v7 = *(void **)(a1 + 8);
  v3 = v7;
  a2[1] = v7;
  v4 = *(_QWORD *)(a1 + 40);
  a2[5] = v4;
  a2[6] = *(_QWORD *)(a1 + 48);
  (**(void (***)(uint64_t, uint64_t))(v4 - 8))((uint64_t)(a2 + 2), a1 + 16);
  return a2;
}

id *outlined destroy of GenericMedicationsPersistor(id *a1)
{

  __swift_destroy_boxed_opaque_existential_1((uint64_t)(a1 + 2));
  return a1;
}

uint64_t GenericMedicationsPersistor.isLoggingAuthorized()()
{
  uint64_t v0;
  _QWORD *v1;

  v1[4] = v0;
  v1[2] = v1;
  v1[3] = 0;
  v1[3] = v0;
  return swift_task_switch();
}

{
  _QWORD *v0;
  void **v1;
  id v2;
  _QWORD *v3;
  uint64_t v5;
  void *v6;

  v1 = (void **)v0[4];
  v0[2] = v0;
  v6 = *v1;
  v0[5] = *v1;
  v2 = v6;
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v5 + 48) = v3;
  *v3 = *(_QWORD *)(v5 + 16);
  v3[1] = PeriodPersistor.isLoggingAuthorized();
  return isSiriAuthorizedToAccessHealthData(store:)((uint64_t)v6);
}

uint64_t GenericMedicationsPersistor.numMedInAppToday(doseEvents:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v2[15] = a1;
  v2[8] = v2;
  v2[9] = 0;
  v2[10] = 0;
  v2[11] = 0;
  v2[2] = 0;
  v2[3] = 0;
  v2[14] = 0;
  v2[9] = a1;
  v2[10] = v1;
  return swift_task_switch();
}

uint64_t GenericMedicationsPersistor.numMedInAppToday(doseEvents:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  void *v8;
  _QWORD *v9;
  uint64_t v10;

  v10 = v0[15];
  v0[8] = v0;
  _allocateUninitializedArray<A>(_:)();
  v0[11] = Set.init(arrayLiteral:)();
  swift_bridgeObjectRetain();
  v0[12] = v10;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [HKMedicationExposableDoseEvent]);
  lazy protocol witness table accessor for type [HKMedicationExposableDoseEvent] and conformance [A]();
  Collection<>.makeIterator()();
  while (1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<[HKMedicationExposableDoseEvent]>);
    IndexingIterator.next()();
    v8 = (void *)v9[13];
    if (!v8)
      break;
    v9[14] = v8;
    v4 = objc_msgSend(v8, sel_medicationIdentifier);
    v7 = objc_msgSend(v4, sel_underlyingIdentifier);
    v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v6 = v1;

    v9[6] = v5;
    v9[7] = v6;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Set<String>);
    Set.insert(_:)();

    swift_bridgeObjectRelease();
  }
  outlined destroy of [HKQuantityType]();
  swift_bridgeObjectRetain();
  v3 = Set.count.getter();
  swift_bridgeObjectRelease();
  outlined destroy of [HKQuantityType]();
  return (*(uint64_t (**)(uint64_t))(v9[8] + 8))(v3);
}

uint64_t GenericMedicationsPersistor.saveWithOverride(medStatusTaken:shouldOverwriteExistingStatuses:)(char a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)(v3 + 248) = v2;
  *(_BYTE *)(v3 + 530) = a2 & 1;
  *(_BYTE *)(v3 + 529) = a1 & 1;
  *(_QWORD *)(v3 + 168) = v3;
  *(_BYTE *)(v3 + 528) = 0;
  *(_BYTE *)(v3 + 536) = 0;
  *(_QWORD *)(v3 + 176) = 0;
  *(_QWORD *)(v3 + 184) = 0;
  *(_QWORD *)(v3 + 200) = 0;
  *(_QWORD *)(v3 + 144) = 0;
  *(_QWORD *)(v3 + 152) = 0;
  *(_QWORD *)(v3 + 160) = 0;
  v4 = type metadata accessor for Logger();
  *(_QWORD *)(v3 + 256) = v4;
  *(_QWORD *)(v3 + 264) = *(_QWORD *)(v4 - 8);
  *(_QWORD *)(v3 + 272) = swift_task_alloc();
  v5 = type metadata accessor for Date();
  *(_QWORD *)(v3 + 280) = v5;
  *(_QWORD *)(v3 + 288) = *(_QWORD *)(v5 - 8);
  *(_QWORD *)(v3 + 296) = swift_task_alloc();
  *(_QWORD *)(v3 + 304) = swift_task_alloc();
  *(_QWORD *)(v3 + 312) = swift_task_alloc();
  *(_QWORD *)(v3 + 320) = swift_task_alloc();
  v6 = type metadata accessor for DateInterval();
  *(_QWORD *)(v3 + 328) = v6;
  *(_QWORD *)(v3 + 336) = *(_QWORD *)(v6 - 8);
  *(_QWORD *)(v3 + 344) = swift_task_alloc();
  *(_QWORD *)(v3 + 352) = swift_task_alloc();
  *(_BYTE *)(v3 + 528) = a1 & 1;
  *(_BYTE *)(v3 + 536) = a2 & 1;
  *(_QWORD *)(v3 + 176) = v2;
  return swift_task_switch();
}

uint64_t GenericMedicationsPersistor.saveWithOverride(medStatusTaken:shouldOverwriteExistingStatuses:)()
{
  uint64_t v0;
  id v1;
  void (*v2)(uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  Class isa;
  void *v17;

  v12 = *(_QWORD *)(v0 + 352);
  v15 = *(_QWORD *)(v0 + 344);
  v13 = *(_QWORD *)(v0 + 336);
  v14 = *(_QWORD *)(v0 + 328);
  v5 = *(_QWORD *)(v0 + 320);
  v9 = *(_QWORD *)(v0 + 312);
  v6 = *(_QWORD *)(v0 + 304);
  v10 = *(_QWORD *)(v0 + 296);
  v4 = *(_QWORD *)(v0 + 288);
  v7 = *(_QWORD *)(v0 + 280);
  v11 = *(_QWORD *)(v0 + 248);
  *(_QWORD *)(v0 + 168) = v0;
  Date.init()();
  Date.startOfDay.getter(v9);
  v8 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
  v8(v5, v7);
  Date.init()();
  Date.endOfDay.getter(v10);
  v8(v6, v7);
  DateInterval.init(start:end:)();
  v17 = *(void **)(v11 + 8);
  *(_QWORD *)(v0 + 360) = v17;
  v1 = v17;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 16))(v15, v12, v14);
  isa = DateInterval._bridgeToObjectiveC()().super.isa;
  *(_QWORD *)(v0 + 368) = isa;
  v2 = *(void (**)(uint64_t, uint64_t))(v13 + 8);
  *(_QWORD *)(v0 + 376) = v2;
  v2(v15, v14);
  *(_QWORD *)(v0 + 16) = *(_QWORD *)(v0 + 168);
  *(_QWORD *)(v0 + 56) = v0 + 192;
  *(_QWORD *)(v0 + 24) = GenericMedicationsPersistor.saveWithOverride(medStatusTaken:shouldOverwriteExistingStatuses:);
  *(_QWORD *)(v0 + 112) = swift_continuation_init();
  *(_QWORD *)(v0 + 80) = MEMORY[0x24BDAC760];
  *(_DWORD *)(v0 + 88) = 0x40000000;
  *(_DWORD *)(v0 + 92) = 0;
  *(_QWORD *)(v0 + 96) = @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned NSArray?, @unowned NSError?) -> () with result type [HKMedicationExposableDoseEvent];
  *(_QWORD *)(v0 + 104) = &block_descriptor_7;
  objc_msgSend(v17, sel_doseEventsForDateInterval_medicationIdentifier_completion_, isa, 0, v0 + 80);
  return __swift_continuation_await_point(v0 + 16);
}

{
  _QWORD *v0;
  _QWORD *v1;

  v1 = (_QWORD *)*v0;
  v1[21] = *v0;
  v1[48] = v1[6];
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  id v3;
  _QWORD *v4;
  id v6;
  _QWORD *v7;
  id v8;
  _QWORD *v9;
  id v10;
  _QWORD *v11;
  void *v12;
  uint64_t v13;
  void *v14;
  void *v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  id v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;

  v20 = *(id *)(v0 + 368);
  v19 = *(id *)(v0 + 360);
  v26 = *(_BYTE *)(v0 + 529);
  *(_QWORD *)(v0 + 168) = v0;
  v21 = *(_QWORD *)(v0 + 192);
  swift_bridgeObjectRetain();
  *(_QWORD *)(v0 + 184) = v21;

  v22 = filterUniqueDoseEvents(doseEvents:)(v21);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  *(_QWORD *)(v0 + 184) = v22;
  swift_bridgeObjectRelease();
  v23 = GenericMedicationsPersistor.getDoseEventsByStatus(doseEvents:)(v22);
  v24 = v1;
  v25 = v2;
  *(_QWORD *)(v0 + 392) = v23;
  *(_QWORD *)(v0 + 400) = v1;
  *(_QWORD *)(v0 + 408) = v2;
  swift_bridgeObjectRelease();
  *(_QWORD *)(v0 + 144) = v23;
  *(_QWORD *)(v0 + 152) = v24;
  *(_QWORD *)(v0 + 160) = v25;
  if ((v26 & 1) != 0)
  {
    if ((*(_BYTE *)(v18 + 530) & 1) != 0)
    {
      v17 = *(void **)(*(_QWORD *)(v18 + 248) + 8);
      *(_QWORD *)(v18 + 416) = v17;
      v3 = v17;
      type metadata accessor for HKMedicationExposableDoseEvent();
      v16 = static Array.+ infix(_:_:)();
      *(_QWORD *)(v18 + 424) = v16;
      v4 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v18 + 432) = v4;
      *v4 = *(_QWORD *)(v18 + 168);
      v4[1] = GenericMedicationsPersistor.saveWithOverride(medStatusTaken:shouldOverwriteExistingStatuses:);
      return GenericMedicationsPersistor.writeDoseEvent(medicationController:doseEvents:medStatusTaken:)((uint64_t)v17, v16, 1);
    }
    else
    {
      v15 = *(void **)(*(_QWORD *)(v18 + 248) + 8);
      *(_QWORD *)(v18 + 448) = v15;
      v6 = v15;
      v7 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v18 + 456) = v7;
      *v7 = *(_QWORD *)(v18 + 168);
      v7[1] = GenericMedicationsPersistor.saveWithOverride(medStatusTaken:shouldOverwriteExistingStatuses:);
      return GenericMedicationsPersistor.writeDoseEvent(medicationController:doseEvents:medStatusTaken:)((uint64_t)v15, v25, 1);
    }
  }
  else if ((*(_BYTE *)(v18 + 530) & 1) != 0)
  {
    v14 = *(void **)(*(_QWORD *)(v18 + 248) + 8);
    *(_QWORD *)(v18 + 472) = v14;
    v8 = v14;
    type metadata accessor for HKMedicationExposableDoseEvent();
    v13 = static Array.+ infix(_:_:)();
    *(_QWORD *)(v18 + 480) = v13;
    v9 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v18 + 488) = v9;
    *v9 = *(_QWORD *)(v18 + 168);
    v9[1] = GenericMedicationsPersistor.saveWithOverride(medStatusTaken:shouldOverwriteExistingStatuses:);
    return GenericMedicationsPersistor.writeDoseEvent(medicationController:doseEvents:medStatusTaken:)((uint64_t)v14, v13, 0);
  }
  else
  {
    v12 = *(void **)(*(_QWORD *)(v18 + 248) + 8);
    *(_QWORD *)(v18 + 504) = v12;
    v10 = v12;
    v11 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v18 + 512) = v11;
    *v11 = *(_QWORD *)(v18 + 168);
    v11[1] = GenericMedicationsPersistor.saveWithOverride(medStatusTaken:shouldOverwriteExistingStatuses:);
    return GenericMedicationsPersistor.writeDoseEvent(medicationController:doseEvents:medStatusTaken:)((uint64_t)v12, v25, 0);
  }
}

{
  _QWORD *v0;
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;

  v3 = (void (*)(uint64_t, uint64_t))v0[47];
  v4 = v0[44];
  v2 = v0[41];
  v0[21] = v0;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of [HKQuantityType]();
  v3(v4, v2);
  v5 = v0[55];
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(v0[21] + 8))(v5);
}

{
  _QWORD *v0;
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;

  v3 = (void (*)(uint64_t, uint64_t))v0[47];
  v4 = v0[44];
  v2 = v0[41];
  v0[21] = v0;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of [HKQuantityType]();
  v3(v4, v2);
  v5 = v0[58];
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(v0[21] + 8))(v5);
}

{
  _QWORD *v0;
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;

  v3 = (void (*)(uint64_t, uint64_t))v0[47];
  v4 = v0[44];
  v2 = v0[41];
  v0[21] = v0;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of [HKQuantityType]();
  v3(v4, v2);
  v5 = v0[62];
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(v0[21] + 8))(v5);
}

{
  _QWORD *v0;
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;

  v3 = (void (*)(uint64_t, uint64_t))v0[47];
  v4 = v0[44];
  v2 = v0[41];
  v0[21] = v0;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of [HKQuantityType]();
  v3(v4, v2);
  v5 = v0[65];
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(v0[21] + 8))(v5);
}

{
  uint64_t v0;
  id v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  char *v7;
  uint64_t v8;
  uint8_t *buf;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t);
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint32_t v24;
  os_log_type_t v25;
  NSObject *v26;
  uint64_t v27;

  v20 = *(void **)(v0 + 384);
  v19 = *(void (**)(uint64_t, uint64_t))(v0 + 376);
  v16 = *(void **)(v0 + 368);
  v15 = *(void **)(v0 + 360);
  v17 = *(_QWORD *)(v0 + 352);
  v18 = *(_QWORD *)(v0 + 328);
  v14 = *(_QWORD *)(v0 + 272);
  v21 = *(_QWORD *)(v0 + 264);
  v23 = *(_QWORD *)(v0 + 256);
  *(_QWORD *)(v0 + 168) = v0;
  swift_willThrow();

  v19(v17, v18);
  v1 = v20;
  *(_QWORD *)(v0 + 200) = v20;
  v22 = Logger.wellnessIntents.unsafeMutableAddressor();
  swift_beginAccess();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v21 + 16))(v14, v22, v23);
  swift_endAccess();
  v26 = Logger.logObject.getter();
  v25 = static os_log_type_t.error.getter();
  *(_QWORD *)(v0 + 208) = 2;
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  v24 = *(_DWORD *)(v0 + 532);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
  v27 = _allocateUninitializedArray<A>(_:)();
  if (os_log_type_enabled(v26, v25))
  {
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    v10 = createStorage<A>(capacity:type:)(0);
    v11 = createStorage<A>(capacity:type:)(0);
    *(_QWORD *)(v13 + 216) = buf;
    *(_QWORD *)(v13 + 224) = v10;
    *(_QWORD *)(v13 + 232) = v11;
    serialize(_:at:)(0, (_BYTE **)(v13 + 216));
    serialize(_:at:)(0, (_BYTE **)(v13 + 216));
    *(_QWORD *)(v13 + 240) = v27;
    v12 = (_QWORD *)swift_task_alloc();
    v12[2] = v13 + 216;
    v12[3] = v13 + 224;
    v12[4] = v13 + 232;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
    lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
    Sequence.forEach(_:)();
    swift_task_dealloc();
    _os_log_impl(&dword_24749F000, v26, v25, "Failed fetching dose events for timeframe.", buf, v24);
    destroyStorage<A>(_:count:)(v10, 0, v8);
    destroyStorage<A>(_:count:)(v11, 0, MEMORY[0x24BEE4AD8] + 8);
    MEMORY[0x24957D398](buf, MEMORY[0x24BEE4260]);
  }
  swift_bridgeObjectRelease();
  v6 = *(id *)(v13 + 384);
  v4 = *(_QWORD *)(v13 + 272);
  v3 = *(_QWORD *)(v13 + 264);
  v5 = *(_QWORD *)(v13 + 256);

  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v4, v5);
  type metadata accessor for LogGenericMedicationsIntentResponse();
  v7 = LogGenericMedicationsIntentResponse.__allocating_init(code:userActivity:)(5, 0);

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(char *))(*(_QWORD *)(v13 + 168) + 8))(v7);
}

uint64_t GenericMedicationsPersistor.saveWithOverride(medStatusTaken:shouldOverwriteExistingStatuses:)(uint64_t a1)
{
  uint64_t *v1;
  void *v3;
  uint64_t v4;

  v4 = *v1;
  v3 = *(void **)(*v1 + 416);
  *(_QWORD *)(v4 + 168) = *v1;
  *(_QWORD *)(v4 + 440) = a1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();

  return swift_task_switch();
}

{
  uint64_t *v1;
  void *v3;
  uint64_t v4;

  v4 = *v1;
  v3 = *(void **)(*v1 + 448);
  *(_QWORD *)(v4 + 168) = *v1;
  *(_QWORD *)(v4 + 464) = a1;
  swift_task_dealloc();

  return swift_task_switch();
}

{
  uint64_t *v1;
  void *v3;
  uint64_t v4;

  v4 = *v1;
  v3 = *(void **)(*v1 + 472);
  *(_QWORD *)(v4 + 168) = *v1;
  *(_QWORD *)(v4 + 496) = a1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();

  return swift_task_switch();
}

{
  uint64_t *v1;
  void *v3;
  uint64_t v4;

  v4 = *v1;
  v3 = *(void **)(*v1 + 504);
  *(_QWORD *)(v4 + 168) = *v1;
  *(_QWORD *)(v4 + 520) = a1;
  swift_task_dealloc();

  return swift_task_switch();
}

uint64_t GenericMedicationsPersistor.getDoseEventsByStatus(doseEvents:)(uint64_t a1)
{
  char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  _QWORD *v5;
  uint64_t v6;
  id v7;
  id v8;
  id v9;
  _QWORD v11[6];
  uint64_t v12;
  id v13;
  id v14;
  id v15;
  uint64_t v16;
  id v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t i;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint8_t *v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t *v31;
  _QWORD *v32;
  _BYTE **v33;
  uint64_t *v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t *v49;
  uint32_t v50;
  uint64_t v51;
  int v52;
  NSObject *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _BYTE *v58[4];
  id v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint32_t v68;
  char v69;
  uint64_t v70;
  uint64_t v71;

  v39 = a1;
  v71 = 0;
  v70 = 0;
  v66 = 0;
  v65 = 0;
  v64 = 0;
  v62 = 0;
  v63 = 0;
  v59 = 0;
  v42 = 0;
  v38 = 0;
  v51 = 0;
  v45 = type metadata accessor for Logger();
  v43 = *(_QWORD *)(v45 - 8);
  v40 = (*(_QWORD *)(v43 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1 = (char *)v11 - v40;
  v41 = (char *)v11 - v40;
  v71 = MEMORY[0x24BDAC7A8](v39);
  v70 = v2;
  v44 = Logger.wellnessIntents.unsafeMutableAddressor();
  v46 = &v69;
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v43 + 16))(v1, v44, v45);
  swift_endAccess();
  v53 = Logger.logObject.getter();
  v52 = static os_log_type_t.debug.getter();
  v49 = &v67;
  v67 = 2;
  v47 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  v48 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  v50 = v68;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
  v54 = _allocateUninitializedArray<A>(_:)();
  if (os_log_type_enabled(v53, (os_log_type_t)v52))
  {
    v3 = v38;
    v27 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    v26 = 0;
    v28 = createStorage<A>(capacity:type:)(0);
    v29 = createStorage<A>(capacity:type:)(v26);
    v33 = v58;
    v58[0] = v27;
    v34 = &v57;
    v57 = v28;
    v31 = &v56;
    v56 = v29;
    v30 = 0;
    serialize(_:at:)(0, v58);
    serialize(_:at:)(v30, v33);
    v55 = v54;
    v32 = v11;
    MEMORY[0x24BDAC7A8](v11);
    v4 = v34;
    v5 = &v11[-6];
    v35 = &v11[-6];
    v5[2] = v33;
    v5[3] = v4;
    v5[4] = v6;
    v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
    lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
    Sequence.forEach(_:)();
    v37 = v3;
    if (v3)
    {
      __break(1u);
    }
    else
    {
      _os_log_impl(&dword_24749F000, v53, (os_log_type_t)v52, "getting doseEvents by status", v27, v50);
      v23 = 0;
      destroyStorage<A>(_:count:)(v28, 0, v25);
      destroyStorage<A>(_:count:)(v29, v23, MEMORY[0x24BEE4AD8] + 8);
      MEMORY[0x24957D398](v27, MEMORY[0x24BEE4260]);
      swift_bridgeObjectRelease();
      v24 = v37;
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    v24 = v38;
  }
  v21 = v24;

  (*(void (**)(char *, uint64_t))(v43 + 8))(v41, v45);
  v19 = 0;
  v18 = type metadata accessor for HKMedicationExposableDoseEvent();
  v66 = _allocateUninitializedArray<A>(_:)();
  v65 = _allocateUninitializedArray<A>(_:)();
  v64 = _allocateUninitializedArray<A>(_:)();
  swift_bridgeObjectRetain();
  v61 = v39;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [HKMedicationExposableDoseEvent]);
  lazy protocol witness table accessor for type [HKMedicationExposableDoseEvent] and conformance [A]();
  Collection<>.makeIterator()();
  for (i = v21; ; i = v16)
  {
    v16 = i;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<[HKMedicationExposableDoseEvent]>);
    IndexingIterator.next()();
    v17 = v60;
    if (!v60)
      break;
    v15 = v17;
    v13 = v17;
    v59 = v17;
    v14 = objc_msgSend(v17, sel_status);
    if (v14 == (id)4)
    {
      v7 = v13;
      v58[1] = v13;
      Array.append(_:)();
    }
    else
    {
      if (v14 == (id)5)
      {
        v8 = v13;
        v58[2] = v13;
      }
      else
      {
        v9 = v13;
        v58[3] = v13;
      }
      Array.append(_:)();
    }

  }
  outlined destroy of [HKQuantityType]();
  v11[3] = &v66;
  v12 = v66;
  swift_bridgeObjectRetain();
  v11[2] = &v65;
  v11[4] = v65;
  swift_bridgeObjectRetain();
  v11[1] = &v64;
  v11[5] = v64;
  swift_bridgeObjectRetain();
  outlined destroy of [HKQuantityType]();
  outlined destroy of [HKQuantityType]();
  outlined destroy of [HKQuantityType]();
  return v12;
}

uint64_t GenericMedicationsPersistor.writeDoseEvent(medicationController:doseEvents:medStatusTaken:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)(v4 + 520) = v3;
  *(_BYTE *)(v4 + 745) = a3 & 1;
  *(_QWORD *)(v4 + 512) = a2;
  *(_QWORD *)(v4 + 504) = a1;
  *(_QWORD *)(v4 + 264) = v4;
  *(_QWORD *)(v4 + 272) = 0;
  *(_QWORD *)(v4 + 280) = 0;
  *(_BYTE *)(v4 + 744) = 0;
  *(_QWORD *)(v4 + 288) = 0;
  *(_QWORD *)(v4 + 304) = 0;
  *(_QWORD *)(v4 + 312) = 0;
  *(_QWORD *)(v4 + 320) = 0;
  *(_QWORD *)(v4 + 328) = 0;
  *(_QWORD *)(v4 + 248) = 0;
  *(_QWORD *)(v4 + 256) = 0;
  *(_QWORD *)(v4 + 352) = 0;
  *(_QWORD *)(v4 + 400) = 0;
  *(_QWORD *)(v4 + 408) = 0;
  *(_QWORD *)(v4 + 416) = 0;
  *(_QWORD *)(v4 + 424) = 0;
  *(_QWORD *)(v4 + 440) = 0;
  *(_QWORD *)(v4 + 456) = 0;
  v5 = type metadata accessor for Date();
  *(_QWORD *)(v4 + 528) = v5;
  *(_QWORD *)(v4 + 536) = *(_QWORD *)(v5 - 8);
  *(_QWORD *)(v4 + 544) = swift_task_alloc();
  *(_QWORD *)(v4 + 552) = swift_task_alloc();
  v6 = type metadata accessor for Logger();
  *(_QWORD *)(v4 + 560) = v6;
  *(_QWORD *)(v4 + 568) = *(_QWORD *)(v6 - 8);
  *(_QWORD *)(v4 + 576) = swift_task_alloc();
  *(_QWORD *)(v4 + 584) = swift_task_alloc();
  *(_QWORD *)(v4 + 272) = a1;
  *(_QWORD *)(v4 + 280) = a2;
  *(_BYTE *)(v4 + 744) = a3 & 1;
  *(_QWORD *)(v4 + 288) = v3;
  return swift_task_switch();
}

uint64_t GenericMedicationsPersistor.writeDoseEvent(medicationController:doseEvents:medStatusTaken:)()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t, uint64_t, uint64_t);
  void (*v3)(uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  id v6;
  _QWORD *v7;
  uint64_t v9;
  Class v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  Class isa;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(id, uint64_t, uint64_t, uint64_t);
  id v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint8_t *v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint32_t v38;
  os_log_type_t v39;
  NSObject *v40;
  uint64_t v41;

  v1 = *(_QWORD *)(v0 + 584);
  v35 = *(_QWORD *)(v0 + 568);
  v37 = *(_QWORD *)(v0 + 560);
  *(_QWORD *)(v0 + 264) = v0;
  v36 = Logger.wellnessIntents.unsafeMutableAddressor();
  swift_beginAccess();
  v2 = *(void (**)(uint64_t, uint64_t, uint64_t))(v35 + 16);
  *(_QWORD *)(v0 + 592) = v2;
  v2(v1, v36, v37);
  swift_endAccess();
  v40 = Logger.logObject.getter();
  v39 = static os_log_type_t.debug.getter();
  *(_QWORD *)(v0 + 296) = 2;
  *(_QWORD *)(v0 + 600) = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  *(_QWORD *)(v0 + 608) = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  *(_QWORD *)(v0 + 616) = lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  v38 = *(_DWORD *)(v0 + 748);
  *(_QWORD *)(v0 + 624) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
  v41 = _allocateUninitializedArray<A>(_:)();
  if (os_log_type_enabled(v40, v39))
  {
    v30 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    v31 = createStorage<A>(capacity:type:)(0);
    v32 = createStorage<A>(capacity:type:)(0);
    *(_QWORD *)(v34 + 472) = v30;
    *(_QWORD *)(v34 + 480) = v31;
    *(_QWORD *)(v34 + 488) = v32;
    serialize(_:at:)(0, (_BYTE **)(v34 + 472));
    serialize(_:at:)(0, (_BYTE **)(v34 + 472));
    *(_QWORD *)(v34 + 496) = v41;
    v33 = (_QWORD *)swift_task_alloc();
    v33[2] = v34 + 472;
    v33[3] = v34 + 480;
    v33[4] = v34 + 488;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
    lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
    Sequence.forEach(_:)();
    swift_task_dealloc();
    _os_log_impl(&dword_24749F000, v40, v39, "Starting to write dose event", v30, v38);
    destroyStorage<A>(_:count:)(v31, 0, v29);
    destroyStorage<A>(_:count:)(v32, 0, MEMORY[0x24BEE4AD8] + 8);
    MEMORY[0x24957D398](v30, MEMORY[0x24BEE4260]);
  }
  swift_bridgeObjectRelease();
  v26 = *(_QWORD *)(v34 + 584);
  v25 = *(_QWORD *)(v34 + 568);
  v27 = *(_QWORD *)(v34 + 560);
  v28 = *(_BYTE *)(v34 + 745);

  v3 = *(void (**)(uint64_t, uint64_t))(v25 + 8);
  *(_QWORD *)(v34 + 632) = v3;
  v3(v26, v27);
  if ((v28 & 1) != 0)
    v24 = 4;
  else
    v24 = 5;
  *(_QWORD *)(v34 + 640) = v24;
  v22 = *(_QWORD *)(v34 + 512);
  *(_QWORD *)(v34 + 304) = v24;
  *(_QWORD *)(v34 + 648) = type metadata accessor for HKMedicationExposableDoseEvent();
  *(_QWORD *)(v34 + 312) = _allocateUninitializedArray<A>(_:)();
  *(_QWORD *)(v34 + 656) = type metadata accessor for MatchedMedName();
  *(_QWORD *)(v34 + 320) = _allocateUninitializedArray<A>(_:)();
  *(_QWORD *)(v34 + 328) = _allocateUninitializedArray<A>(_:)();
  Date.init()();
  swift_bridgeObjectRetain();
  *(_QWORD *)(v34 + 336) = v22;
  *(_QWORD *)(v34 + 664) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [HKMedicationExposableDoseEvent]);
  lazy protocol witness table accessor for type [HKMedicationExposableDoseEvent] and conformance [A]();
  Collection<>.makeIterator()();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<[HKMedicationExposableDoseEvent]>);
  IndexingIterator.next()();
  v23 = *(id *)(v34 + 344);
  *(_QWORD *)(v34 + 672) = v23;
  if (v23)
  {
    v4 = *(_QWORD *)(v34 + 640);
    v12 = *(_QWORD *)(v34 + 552);
    v5 = *(_QWORD *)(v34 + 544);
    v13 = *(_QWORD *)(v34 + 536);
    v14 = *(_QWORD *)(v34 + 528);
    v17 = *(_QWORD *)(v34 + 520);
    *(_QWORD *)(v34 + 408) = v23;
    v15 = objc_msgSend(v23, sel_updateForNewStatus_, v4);
    *(_QWORD *)(v34 + 680) = v15;
    *(_QWORD *)(v34 + 416) = v15;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 16))(v5, v12, v14);
    isa = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v5, v14);
    v21 = objc_msgSend(v15, sel_updateForNewStartDate_, isa);
    *(_QWORD *)(v34 + 688) = v21;

    *(_QWORD *)(v34 + 424) = v21;
    v6 = v21;
    *(_QWORD *)(v34 + 432) = v21;
    Array.append(_:)();
    outlined init with copy of QuantityPersisting(v17 + 16, v34 + 120);
    v18 = *(_QWORD *)(v34 + 144);
    v19 = *(_QWORD *)(v34 + 152);
    __swift_project_boxed_opaque_existential_1((_QWORD *)(v34 + 120), v18);
    v20 = (uint64_t (*)(id, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 + 24) + **(int **)(v19 + 24));
    v7 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v34 + 696) = v7;
    *v7 = *(_QWORD *)(v34 + 264);
    v7[1] = GenericMedicationsPersistor.writeDoseEvent(medicationController:doseEvents:medStatusTaken:);
    return v20(v21, 1, v18, v19);
  }
  else
  {
    v11 = *(id *)(v34 + 504);
    outlined destroy of [HKQuantityType]();
    swift_bridgeObjectRetain();
    v10 = Array._bridgeToObjectiveC()().super.isa;
    *(_QWORD *)(v34 + 728) = v10;
    swift_bridgeObjectRelease();
    *(_QWORD *)(v34 + 16) = *(_QWORD *)(v34 + 264);
    *(_QWORD *)(v34 + 56) = v9;
    *(_QWORD *)(v34 + 24) = GenericMedicationsPersistor.writeDoseEvent(medicationController:doseEvents:medStatusTaken:);
    *(_QWORD *)(v34 + 112) = swift_continuation_init();
    *(_QWORD *)(v34 + 80) = MEMORY[0x24BDAC760];
    *(_DWORD *)(v34 + 88) = 0x40000000;
    *(_DWORD *)(v34 + 92) = 0;
    *(_QWORD *)(v34 + 96) = @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned Bool, @unowned NSError?) -> () with result type () zero on error;
    *(_QWORD *)(v34 + 104) = &block_descriptor_149;
    objc_msgSend(v11, sel_writeDoseEvents_completion_, v10, v34 + 80);
    return __swift_continuation_await_point(v34 + 16);
  }
}

{
  uint64_t v0;
  uint64_t v1;
  id v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  void *v9;
  _QWORD *v10;

  v1 = *(_QWORD *)(v0 + 704);
  *(_QWORD *)(v0 + 264) = v0;
  if (v1)
  {
    v9 = (void *)v10[88];
    v10[57] = v9;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)(v10 + 15));
    v2 = v9;
    v10[58] = v9;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [MatchedMedName]);
    Array.append(_:)();

  }
  else
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)(v10 + 15));
  }
  v8 = v10[84];
  outlined init with copy of QuantityPersisting(v10[65] + 16, (uint64_t)(v10 + 20));
  v5 = v10[23];
  v6 = v10[24];
  __swift_project_boxed_opaque_existential_1(v10 + 20, v5);
  v7 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 + 24) + **(int **)(v6 + 24));
  v3 = (_QWORD *)swift_task_alloc();
  v10[89] = v3;
  *v3 = v10[33];
  v3[1] = GenericMedicationsPersistor.writeDoseEvent(medicationController:doseEvents:medStatusTaken:);
  return v7(v8, 1, v5, v6);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  id v4;
  _QWORD *v5;
  id v7;
  uint64_t v8;
  Class v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  Class isa;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(id, uint64_t, uint64_t, uint64_t);
  id v24;
  uint64_t v25;

  v1 = *(_QWORD *)(v0 + 720);
  *(_QWORD *)(v0 + 264) = v0;
  if (v1)
  {
    v13 = *(id *)(v25 + 720);
    *(_QWORD *)(v25 + 440) = v13;
    __swift_destroy_boxed_opaque_existential_1(v25 + 160);
    v7 = v13;
    *(_QWORD *)(v25 + 448) = v13;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [MatchedMedName]);
    Array.append(_:)();

  }
  else
  {
    __swift_destroy_boxed_opaque_existential_1(v25 + 160);
  }
  v11 = *(id *)(v25 + 680);
  v12 = *(id *)(v25 + 672);

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<[HKMedicationExposableDoseEvent]>);
  IndexingIterator.next()();
  v14 = *(id *)(v25 + 344);
  *(_QWORD *)(v25 + 672) = v14;
  if (v14)
  {
    v2 = *(_QWORD *)(v25 + 640);
    v15 = *(_QWORD *)(v25 + 552);
    v3 = *(_QWORD *)(v25 + 544);
    v16 = *(_QWORD *)(v25 + 536);
    v17 = *(_QWORD *)(v25 + 528);
    v20 = *(_QWORD *)(v25 + 520);
    *(_QWORD *)(v25 + 408) = v14;
    v18 = objc_msgSend(v14, sel_updateForNewStatus_, v2);
    *(_QWORD *)(v25 + 680) = v18;
    *(_QWORD *)(v25 + 416) = v18;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v16 + 16))(v3, v15, v17);
    isa = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v3, v17);
    v24 = objc_msgSend(v18, sel_updateForNewStartDate_, isa);
    *(_QWORD *)(v25 + 688) = v24;

    *(_QWORD *)(v25 + 424) = v24;
    v4 = v24;
    *(_QWORD *)(v25 + 432) = v24;
    Array.append(_:)();
    outlined init with copy of QuantityPersisting(v20 + 16, v25 + 120);
    v21 = *(_QWORD *)(v25 + 144);
    v22 = *(_QWORD *)(v25 + 152);
    __swift_project_boxed_opaque_existential_1((_QWORD *)(v25 + 120), v21);
    v23 = (uint64_t (*)(id, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 + 24) + **(int **)(v22 + 24));
    v5 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v25 + 696) = v5;
    *v5 = *(_QWORD *)(v25 + 264);
    v5[1] = GenericMedicationsPersistor.writeDoseEvent(medicationController:doseEvents:medStatusTaken:);
    return v23(v24, 1, v21, v22);
  }
  else
  {
    v10 = *(id *)(v25 + 504);
    outlined destroy of [HKQuantityType]();
    swift_bridgeObjectRetain();
    v9 = Array._bridgeToObjectiveC()().super.isa;
    *(_QWORD *)(v25 + 728) = v9;
    swift_bridgeObjectRelease();
    *(_QWORD *)(v25 + 16) = *(_QWORD *)(v25 + 264);
    *(_QWORD *)(v25 + 56) = v8;
    *(_QWORD *)(v25 + 24) = GenericMedicationsPersistor.writeDoseEvent(medicationController:doseEvents:medStatusTaken:);
    *(_QWORD *)(v25 + 112) = swift_continuation_init();
    *(_QWORD *)(v25 + 80) = MEMORY[0x24BDAC760];
    *(_DWORD *)(v25 + 88) = 0x40000000;
    *(_DWORD *)(v25 + 92) = 0;
    *(_QWORD *)(v25 + 96) = @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned Bool, @unowned NSError?) -> () with result type () zero on error;
    *(_QWORD *)(v25 + 104) = &block_descriptor_149;
    objc_msgSend(v10, sel_writeDoseEvents_completion_, v9, v25 + 80);
    return __swift_continuation_await_point(v25 + 16);
  }
}

{
  _QWORD *v0;
  _QWORD *v1;

  v1 = (_QWORD *)*v0;
  v1[33] = *v0;
  v1[92] = v1[6];
  return swift_task_switch();
}

{
  uint64_t v0;
  void *v1;
  char *v2;
  char *v3;
  char *v4;
  Class isa;
  Class v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;

  v1 = *(void **)(v0 + 728);
  v9 = *(_QWORD *)(v0 + 552);
  v8 = *(_QWORD *)(v0 + 536);
  v10 = *(_QWORD *)(v0 + 528);
  *(_QWORD *)(v0 + 264) = v0;

  type metadata accessor for LogGenericMedicationsIntentResponse();
  v11 = LogGenericMedicationsIntentResponse.__allocating_init(code:userActivity:)(4, 0);
  v2 = v11;
  v3 = v11;
  v4 = v11;
  *(_QWORD *)(v0 + 400) = v11;
  swift_bridgeObjectRetain();
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v11, sel_setMatchingMeds_, isa);

  swift_bridgeObjectRetain();
  v7 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v11, sel_setMatchingMedsBeforeUpdate_, v7);

  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v9, v10);
  outlined destroy of [HKQuantityType]();
  outlined destroy of [HKQuantityType]();
  outlined destroy of [HKQuantityType]();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(char *))(*(_QWORD *)(v0 + 264) + 8))(v11);
}

{
  uint64_t v0;
  id v1;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint8_t *buf;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(uint64_t, uint64_t, uint64_t);
  uint32_t v23;
  os_log_type_t v24;
  NSObject *v25;
  uint64_t v26;

  v19 = *(void **)(v0 + 736);
  v18 = *(void **)(v0 + 728);
  v22 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 592);
  v17 = *(_QWORD *)(v0 + 576);
  v21 = *(_QWORD *)(v0 + 560);
  *(_QWORD *)(v0 + 264) = v0;
  swift_willThrow();

  v1 = v19;
  *(_QWORD *)(v0 + 352) = v19;
  v20 = Logger.wellnessIntents.unsafeMutableAddressor();
  swift_beginAccess();
  v22(v17, v20, v21);
  swift_endAccess();
  v25 = Logger.logObject.getter();
  v24 = static os_log_type_t.error.getter();
  *(_QWORD *)(v0 + 360) = 2;
  UnsignedInteger<>.init<A>(_:)();
  v23 = *(_DWORD *)(v0 + 752);
  v26 = _allocateUninitializedArray<A>(_:)();
  if (os_log_type_enabled(v25, v24))
  {
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    v13 = createStorage<A>(capacity:type:)(0);
    v14 = createStorage<A>(capacity:type:)(0);
    *(_QWORD *)(v16 + 368) = buf;
    *(_QWORD *)(v16 + 376) = v13;
    *(_QWORD *)(v16 + 384) = v14;
    serialize(_:at:)(0, (_BYTE **)(v16 + 368));
    serialize(_:at:)(0, (_BYTE **)(v16 + 368));
    *(_QWORD *)(v16 + 392) = v26;
    v15 = (_QWORD *)swift_task_alloc();
    v15[2] = v16 + 368;
    v15[3] = v16 + 376;
    v15[4] = v16 + 384;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
    lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
    Sequence.forEach(_:)();
    swift_task_dealloc();
    _os_log_impl(&dword_24749F000, v25, v24, "Failed writing updated dose events for specific meds.", buf, v23);
    destroyStorage<A>(_:count:)(v13, 0, v11);
    destroyStorage<A>(_:count:)(v14, 0, MEMORY[0x24BEE4AD8] + 8);
    MEMORY[0x24957D398](buf, MEMORY[0x24BEE4260]);
  }
  swift_bridgeObjectRelease();
  v6 = *(id *)(v16 + 736);
  v5 = *(void (**)(uint64_t, uint64_t))(v16 + 632);
  v3 = *(_QWORD *)(v16 + 576);
  v4 = *(_QWORD *)(v16 + 560);
  v8 = *(_QWORD *)(v16 + 552);
  v7 = *(_QWORD *)(v16 + 536);
  v9 = *(_QWORD *)(v16 + 528);

  v5(v3, v4);
  type metadata accessor for LogGenericMedicationsIntentResponse();
  v10 = LogGenericMedicationsIntentResponse.__allocating_init(code:userActivity:)(5, 0);

  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v8, v9);
  outlined destroy of [HKQuantityType]();
  outlined destroy of [HKQuantityType]();
  outlined destroy of [HKQuantityType]();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(char *))(*(_QWORD *)(v16 + 264) + 8))(v10);
}

uint64_t GenericMedicationsPersistor.writeDoseEvent(medicationController:doseEvents:medStatusTaken:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;

  v3 = *v1;
  *(_QWORD *)(v3 + 264) = *v1;
  *(_QWORD *)(v3 + 704) = a1;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t *v1;
  uint64_t v3;

  v3 = *v1;
  *(_QWORD *)(v3 + 264) = *v1;
  *(_QWORD *)(v3 + 720) = a1;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t GenericMedicationsPersistor.save(isTimeframeToday:medStatusTaken:confirmedLogAsScheduled:)(char a1, char a2, char a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)(v4 + 1248) = v3;
  *(_BYTE *)(v4 + 1827) = a3 & 1;
  *(_BYTE *)(v4 + 1826) = a2 & 1;
  *(_BYTE *)(v4 + 1825) = a1 & 1;
  *(_QWORD *)(v4 + 560) = v4;
  *(_BYTE *)(v4 + 1824) = 0;
  *(_BYTE *)(v4 + 1832) = 0;
  *(_BYTE *)(v4 + 1840) = 0;
  *(_QWORD *)(v4 + 568) = 0;
  *(_QWORD *)(v4 + 576) = 0;
  *(_QWORD *)(v4 + 592) = 0;
  *(_QWORD *)(v4 + 648) = 0;
  *(_QWORD *)(v4 + 672) = 0;
  *(_QWORD *)(v4 + 680) = 0;
  *(_QWORD *)(v4 + 528) = 0;
  *(_QWORD *)(v4 + 536) = 0;
  *(_QWORD *)(v4 + 704) = 0;
  *(_QWORD *)(v4 + 752) = 0;
  *(_QWORD *)(v4 + 808) = 0;
  *(_QWORD *)(v4 + 816) = 0;
  *(_QWORD *)(v4 + 544) = 0;
  *(_QWORD *)(v4 + 552) = 0;
  *(_QWORD *)(v4 + 840) = 0;
  *(_QWORD *)(v4 + 888) = 0;
  *(_QWORD *)(v4 + 1112) = 0;
  *(_QWORD *)(v4 + 1120) = 0;
  *(_QWORD *)(v4 + 1168) = 0;
  v5 = type metadata accessor for Logger();
  *(_QWORD *)(v4 + 1256) = v5;
  *(_QWORD *)(v4 + 1264) = *(_QWORD *)(v5 - 8);
  *(_QWORD *)(v4 + 1272) = swift_task_alloc();
  *(_QWORD *)(v4 + 1280) = swift_task_alloc();
  *(_QWORD *)(v4 + 1288) = swift_task_alloc();
  *(_QWORD *)(v4 + 1296) = swift_task_alloc();
  *(_QWORD *)(v4 + 1304) = swift_task_alloc();
  *(_QWORD *)(v4 + 1312) = swift_task_alloc();
  *(_QWORD *)(v4 + 1320) = swift_task_alloc();
  *(_QWORD *)(v4 + 1328) = swift_task_alloc();
  *(_QWORD *)(v4 + 1336) = swift_task_alloc();
  *(_QWORD *)(v4 + 1344) = swift_task_alloc();
  *(_QWORD *)(v4 + 1352) = swift_task_alloc();
  *(_QWORD *)(v4 + 1360) = swift_task_alloc();
  v6 = type metadata accessor for Date();
  *(_QWORD *)(v4 + 1368) = v6;
  *(_QWORD *)(v4 + 1376) = *(_QWORD *)(v6 - 8);
  *(_QWORD *)(v4 + 1384) = swift_task_alloc();
  *(_QWORD *)(v4 + 1392) = swift_task_alloc();
  *(_QWORD *)(v4 + 1400) = swift_task_alloc();
  *(_QWORD *)(v4 + 1408) = swift_task_alloc();
  v7 = type metadata accessor for DateInterval();
  *(_QWORD *)(v4 + 1416) = v7;
  *(_QWORD *)(v4 + 1424) = *(_QWORD *)(v7 - 8);
  *(_QWORD *)(v4 + 1432) = swift_task_alloc();
  *(_QWORD *)(v4 + 1440) = swift_task_alloc();
  *(_BYTE *)(v4 + 1824) = a1 & 1;
  *(_BYTE *)(v4 + 1832) = a2 & 1;
  *(_BYTE *)(v4 + 1840) = a3 & 1;
  *(_QWORD *)(v4 + 568) = v3;
  return swift_task_switch();
}

uint64_t GenericMedicationsPersistor.save(isTimeframeToday:medStatusTaken:confirmedLogAsScheduled:)()
{
  uint64_t v0;
  id v1;
  void (*v2)(uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  Class isa;
  void *v17;

  v12 = *(_QWORD *)(v0 + 1440);
  v15 = *(_QWORD *)(v0 + 1432);
  v13 = *(_QWORD *)(v0 + 1424);
  v14 = *(_QWORD *)(v0 + 1416);
  v5 = *(_QWORD *)(v0 + 1408);
  v9 = *(_QWORD *)(v0 + 1400);
  v6 = *(_QWORD *)(v0 + 1392);
  v10 = *(_QWORD *)(v0 + 1384);
  v4 = *(_QWORD *)(v0 + 1376);
  v7 = *(_QWORD *)(v0 + 1368);
  v11 = *(_QWORD *)(v0 + 1248);
  *(_QWORD *)(v0 + 560) = v0;
  Date.init()();
  Date.startOfDay.getter(v9);
  v8 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
  v8(v5, v7);
  Date.init()();
  Date.endOfDay.getter(v10);
  v8(v6, v7);
  DateInterval.init(start:end:)();
  v17 = *(void **)(v11 + 8);
  *(_QWORD *)(v0 + 1448) = v17;
  v1 = v17;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 16))(v15, v12, v14);
  isa = DateInterval._bridgeToObjectiveC()().super.isa;
  *(_QWORD *)(v0 + 1456) = isa;
  v2 = *(void (**)(uint64_t, uint64_t))(v13 + 8);
  *(_QWORD *)(v0 + 1464) = v2;
  v2(v15, v14);
  *(_QWORD *)(v0 + 16) = *(_QWORD *)(v0 + 560);
  *(_QWORD *)(v0 + 56) = v0 + 584;
  *(_QWORD *)(v0 + 24) = GenericMedicationsPersistor.save(isTimeframeToday:medStatusTaken:confirmedLogAsScheduled:);
  *(_QWORD *)(v0 + 112) = swift_continuation_init();
  *(_QWORD *)(v0 + 80) = MEMORY[0x24BDAC760];
  *(_DWORD *)(v0 + 88) = 0x40000000;
  *(_DWORD *)(v0 + 92) = 0;
  *(_QWORD *)(v0 + 96) = @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned NSArray?, @unowned NSError?) -> () with result type [HKMedicationExposableDoseEvent];
  *(_QWORD *)(v0 + 104) = &block_descriptor_154;
  objc_msgSend(v17, sel_doseEventsForDateInterval_medicationIdentifier_completion_, isa, 0, v0 + 80);
  return __swift_continuation_await_point(v0 + 16);
}

{
  _QWORD *v0;
  _QWORD *v1;

  v1 = (_QWORD *)*v0;
  v1[70] = *v0;
  v1[184] = v1[6];
  return swift_task_switch();
}

{
  _QWORD *v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  char *v5;
  _QWORD *v6;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);
  void (*v11)(uint64_t, uint64_t);
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint32_t v24;
  os_log_type_t v25;
  NSObject *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(uint64_t, uint64_t);
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint8_t *v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint32_t v41;
  os_log_type_t v42;
  NSObject *log;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t (*v49)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void (*v53)(uint64_t, uint64_t);
  uint64_t v54;
  uint64_t v55;
  uint8_t *buf;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void (*v63)(uint64_t, uint64_t, uint64_t);
  uint32_t size;
  os_log_type_t v65;
  NSObject *oslog;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  void (*v72)(uint64_t, uint64_t);
  uint64_t v73;
  char *v74;
  char *v75;
  uint64_t v76;
  uint8_t *v77;
  uint64_t v78;
  uint64_t v79;
  _QWORD *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint32_t v84;
  os_log_type_t v85;
  NSObject *v86;
  uint64_t v87;
  uint64_t v88;
  void *v89;
  void *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;

  v90 = (void *)v0[182];
  v89 = (void *)v0[181];
  v0[70] = v0;
  v91 = v0[73];
  swift_bridgeObjectRetain();
  v0[72] = v91;

  v92 = filterUniqueDoseEvents(doseEvents:)(v91);
  v0[185] = v92;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v0[72] = v92;
  swift_bridgeObjectRelease();
  v1 = type metadata accessor for HKMedicationExposableDoseEvent();
  v93 = MEMORY[0x24957D110](v92, v1);
  swift_bridgeObjectRelease();
  if (!v93)
  {
    v2 = *(_QWORD *)(v88 + 1360);
    v81 = *(_QWORD *)(v88 + 1264);
    v83 = *(_QWORD *)(v88 + 1256);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v82 = Logger.wellnessIntents.unsafeMutableAddressor();
    swift_beginAccess();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v81 + 16))(v2, v82, v83);
    swift_endAccess();
    v86 = Logger.logObject.getter();
    v85 = static os_log_type_t.debug.getter();
    *(_QWORD *)(v88 + 1208) = 2;
    lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    lazy protocol witness table accessor for type Int and conformance Int();
    UnsignedInteger<>.init<A>(_:)();
    v84 = *(_DWORD *)(v88 + 1880);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
    v87 = _allocateUninitializedArray<A>(_:)();
    if (os_log_type_enabled(v86, v85))
    {
      v77 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      v76 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      v78 = createStorage<A>(capacity:type:)(0);
      v79 = createStorage<A>(capacity:type:)(0);
      *(_QWORD *)(v88 + 1216) = v77;
      *(_QWORD *)(v88 + 1224) = v78;
      *(_QWORD *)(v88 + 1232) = v79;
      serialize(_:at:)(0, (_BYTE **)(v88 + 1216));
      serialize(_:at:)(0, (_BYTE **)(v88 + 1216));
      *(_QWORD *)(v88 + 1240) = v87;
      v80 = (_QWORD *)swift_task_alloc();
      v80[2] = v88 + 1216;
      v80[3] = v88 + 1224;
      v80[4] = v88 + 1232;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
      lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
      Sequence.forEach(_:)();
      swift_task_dealloc();
      _os_log_impl(&dword_24749F000, v86, v85, "No medications found for today.", v77, v84);
      destroyStorage<A>(_:count:)(v78, 0, v76);
      destroyStorage<A>(_:count:)(v79, 0, MEMORY[0x24BEE4AD8] + 8);
      MEMORY[0x24957D398](v77, MEMORY[0x24BEE4260]);
    }
    swift_bridgeObjectRelease();
    v72 = *(void (**)(uint64_t, uint64_t))(v88 + 1464);
    v73 = *(_QWORD *)(v88 + 1440);
    v71 = *(_QWORD *)(v88 + 1416);
    v69 = *(_QWORD *)(v88 + 1360);
    v68 = *(_QWORD *)(v88 + 1264);
    v70 = *(_QWORD *)(v88 + 1256);

    (*(void (**)(uint64_t, uint64_t))(v68 + 8))(v69, v70);
    type metadata accessor for LogGenericMedicationsIntentResponse();
    v74 = LogGenericMedicationsIntentResponse.__allocating_init(code:userActivity:)(104, 0);
    outlined destroy of [HKQuantityType]();
    v72(v73, v71);
    v75 = v74;
LABEL_16:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(char *))(*(_QWORD *)(v88 + 560) + 8))(v75);
  }
  if (v93 == 1)
  {
    v3 = *(_QWORD *)(v88 + 1352);
    v60 = *(_QWORD *)(v88 + 1264);
    v62 = *(_QWORD *)(v88 + 1256);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v61 = Logger.wellnessIntents.unsafeMutableAddressor();
    swift_beginAccess();
    v63 = *(void (**)(uint64_t, uint64_t, uint64_t))(v60 + 16);
    *(_QWORD *)(v88 + 1488) = v63;
    v63(v3, v61, v62);
    swift_endAccess();
    oslog = Logger.logObject.getter();
    v65 = static os_log_type_t.debug.getter();
    *(_QWORD *)(v88 + 1048) = 2;
    *(_QWORD *)(v88 + 1496) = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    *(_QWORD *)(v88 + 1504) = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    *(_QWORD *)(v88 + 1512) = lazy protocol witness table accessor for type Int and conformance Int();
    UnsignedInteger<>.init<A>(_:)();
    size = *(_DWORD *)(v88 + 1868);
    *(_QWORD *)(v88 + 1520) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
    v67 = _allocateUninitializedArray<A>(_:)();
    if (os_log_type_enabled(oslog, v65))
    {
      buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      v55 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      v57 = createStorage<A>(capacity:type:)(0);
      v58 = createStorage<A>(capacity:type:)(0);
      *(_QWORD *)(v88 + 1176) = buf;
      *(_QWORD *)(v88 + 1184) = v57;
      *(_QWORD *)(v88 + 1192) = v58;
      serialize(_:at:)(0, (_BYTE **)(v88 + 1176));
      serialize(_:at:)(0, (_BYTE **)(v88 + 1176));
      *(_QWORD *)(v88 + 1200) = v67;
      v59 = (_QWORD *)swift_task_alloc();
      v59[2] = v88 + 1176;
      v59[3] = v88 + 1184;
      v59[4] = v88 + 1192;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
      lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
      Sequence.forEach(_:)();
      swift_task_dealloc();
      _os_log_impl(&dword_24749F000, oslog, v65, "One dose event found for today, treat like a specific meds request.", buf, size);
      destroyStorage<A>(_:count:)(v57, 0, v55);
      destroyStorage<A>(_:count:)(v58, 0, MEMORY[0x24BEE4AD8] + 8);
      MEMORY[0x24957D398](buf, MEMORY[0x24BEE4260]);
    }
    swift_bridgeObjectRelease();
    *(_QWORD *)(v88 + 1528) = 0;
    v51 = *(_QWORD *)(v88 + 1352);
    v50 = *(_QWORD *)(v88 + 1264);
    v52 = *(_QWORD *)(v88 + 1256);

    v53 = *(void (**)(uint64_t, uint64_t))(v50 + 8);
    *(_QWORD *)(v88 + 1536) = v53;
    v53(v51, v52);
    swift_bridgeObjectRetain();
    *(_QWORD *)(v88 + 1064) = v92;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [HKMedicationExposableDoseEvent]);
    lazy protocol witness table accessor for type [HKMedicationExposableDoseEvent] and conformance [A]();
    Collection.first.getter();
    outlined destroy of [HKQuantityType]();
    v54 = *(_QWORD *)(v88 + 1056);
    *(_QWORD *)(v88 + 1544) = v54;
    if (v54)
    {
      v45 = *(_QWORD *)(v88 + 1248);
      *(_QWORD *)(v88 + 1112) = v54;
      swift_bridgeObjectRelease();
      *(_QWORD *)(v88 + 1552) = type metadata accessor for LogGenericMedicationsIntentResponse();
      v46 = LogGenericMedicationsIntentResponse.__allocating_init(code:userActivity:)(106, 0);
      *(_QWORD *)(v88 + 1560) = v46;
      v4 = v46;
      v5 = v46;
      *(_QWORD *)(v88 + 1120) = v46;
      outlined init with copy of QuantityPersisting(v45 + 16, v88 + 200);
      v47 = *(_QWORD *)(v88 + 224);
      v48 = *(_QWORD *)(v88 + 232);
      __swift_project_boxed_opaque_existential_1((_QWORD *)(v88 + 200), v47);
      v49 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v48 + 24) + **(int **)(v48 + 24));
      v6 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v88 + 1568) = v6;
      *v6 = *(_QWORD *)(v88 + 560);
      v6[1] = GenericMedicationsPersistor.save(isTimeframeToday:medStatusTaken:confirmedLogAsScheduled:);
      return v49(v54, 1, v47, v48);
    }
    v8 = *(_QWORD *)(v88 + 1336);
    v40 = *(_QWORD *)(v88 + 1256);
    swift_bridgeObjectRelease();
    v39 = Logger.wellnessIntents.unsafeMutableAddressor();
    swift_beginAccess();
    v63(v8, v39, v40);
    swift_endAccess();
    log = Logger.logObject.getter();
    v42 = static os_log_type_t.error.getter();
    *(_QWORD *)(v88 + 1072) = 2;
    UnsignedInteger<>.init<A>(_:)();
    v41 = *(_DWORD *)(v88 + 1872);
    v44 = _allocateUninitializedArray<A>(_:)();
    if (os_log_type_enabled(log, v42))
    {
      v35 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      v36 = createStorage<A>(capacity:type:)(0);
      v37 = createStorage<A>(capacity:type:)(0);
      *(_QWORD *)(v88 + 1080) = v35;
      *(_QWORD *)(v88 + 1088) = v36;
      *(_QWORD *)(v88 + 1096) = v37;
      serialize(_:at:)(0, (_BYTE **)(v88 + 1080));
      serialize(_:at:)(0, (_BYTE **)(v88 + 1080));
      *(_QWORD *)(v88 + 1104) = v44;
      v38 = (_QWORD *)swift_task_alloc();
      v38[2] = v88 + 1080;
      v38[3] = v88 + 1088;
      v38[4] = v88 + 1096;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
      lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
      Sequence.forEach(_:)();
      swift_task_dealloc();
      _os_log_impl(&dword_24749F000, log, v42, "Supposed to be one dose event in doseEvents, but unable to unpack it - returning .failure", v35, v41);
      destroyStorage<A>(_:count:)(v36, 0, v34);
      destroyStorage<A>(_:count:)(v37, 0, MEMORY[0x24BEE4AD8] + 8);
      MEMORY[0x24957D398](v35, MEMORY[0x24BEE4260]);
    }
    swift_bridgeObjectRelease();
    v31 = *(void (**)(uint64_t, uint64_t))(v88 + 1464);
    v32 = *(_QWORD *)(v88 + 1440);
    v30 = *(_QWORD *)(v88 + 1416);
    v28 = *(_QWORD *)(v88 + 1336);
    v29 = *(_QWORD *)(v88 + 1256);

    v53(v28, v29);
    type metadata accessor for LogGenericMedicationsIntentResponse();
    v33 = LogGenericMedicationsIntentResponse.__allocating_init(code:userActivity:)(5, 0);
    outlined destroy of [HKQuantityType]();
    v31(v32, v30);
    v75 = v33;
    goto LABEL_16;
  }
  v9 = *(_QWORD *)(v88 + 1328);
  v21 = *(_QWORD *)(v88 + 1264);
  v23 = *(_QWORD *)(v88 + 1256);
  swift_bridgeObjectRelease();
  v22 = Logger.wellnessIntents.unsafeMutableAddressor();
  swift_beginAccess();
  v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(v21 + 16);
  *(_QWORD *)(v88 + 1584) = v10;
  v10(v9, v22, v23);
  swift_endAccess();
  v26 = Logger.logObject.getter();
  v25 = static os_log_type_t.debug.getter();
  *(_QWORD *)(v88 + 640) = 2;
  *(_QWORD *)(v88 + 1592) = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  *(_QWORD *)(v88 + 1600) = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  *(_QWORD *)(v88 + 1608) = lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  v24 = *(_DWORD *)(v88 + 1836);
  *(_QWORD *)(v88 + 1616) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
  v27 = _allocateUninitializedArray<A>(_:)();
  if (os_log_type_enabled(v26, v25))
  {
    v17 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    v18 = createStorage<A>(capacity:type:)(0);
    v19 = createStorage<A>(capacity:type:)(0);
    *(_QWORD *)(v88 + 1016) = v17;
    *(_QWORD *)(v88 + 1024) = v18;
    *(_QWORD *)(v88 + 1032) = v19;
    serialize(_:at:)(0, (_BYTE **)(v88 + 1016));
    serialize(_:at:)(0, (_BYTE **)(v88 + 1016));
    *(_QWORD *)(v88 + 1040) = v27;
    v20 = (_QWORD *)swift_task_alloc();
    v20[2] = v88 + 1016;
    v20[3] = v88 + 1024;
    v20[4] = v88 + 1032;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
    lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
    Sequence.forEach(_:)();
    swift_task_dealloc();
    _os_log_impl(&dword_24749F000, v26, v25, "Multiple dose events found for today, proceed with generic meds request.", v17, v24);
    destroyStorage<A>(_:count:)(v18, 0, v16);
    destroyStorage<A>(_:count:)(v19, 0, MEMORY[0x24BEE4AD8] + 8);
    MEMORY[0x24957D398](v17, MEMORY[0x24BEE4260]);
  }
  swift_bridgeObjectRelease();
  *(_QWORD *)(v88 + 1624) = 0;
  v14 = *(_QWORD *)(v88 + 1328);
  v13 = *(_QWORD *)(v88 + 1264);
  v15 = *(_QWORD *)(v88 + 1256);

  v11 = *(void (**)(uint64_t, uint64_t))(v13 + 8);
  *(_QWORD *)(v88 + 1632) = v11;
  v11(v14, v15);
  v12 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v88 + 1640) = v12;
  *v12 = *(_QWORD *)(v88 + 560);
  v12[1] = GenericMedicationsPersistor.save(isTimeframeToday:medStatusTaken:confirmedLogAsScheduled:);
  return GenericMedicationsPersistor.numMedInAppToday(doseEvents:)(v92);
}

{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  id v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t);
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint8_t *buf;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(uint64_t, uint64_t, uint64_t);
  uint32_t v24;
  os_log_type_t v25;
  NSObject *v26;
  uint64_t v27;
  _QWORD *v28;
  Class isa;
  void *v30;
  void *v31;
  void *v32;
  uint64_t v33;
  void (*v34)(uint64_t, uint64_t);
  uint64_t v35;
  char *v36;
  uint64_t v37;

  v1 = *(_QWORD *)(v0 + 1576);
  *(_QWORD *)(v0 + 560) = v0;
  if (v1)
  {
    v31 = *(void **)(v37 + 1576);
    v30 = *(void **)(v37 + 1560);
    v34 = *(void (**)(uint64_t, uint64_t))(v37 + 1464);
    v35 = *(_QWORD *)(v37 + 1440);
    v33 = *(_QWORD *)(v37 + 1416);
    v32 = *(void **)(v37 + 1544);
    *(_QWORD *)(v37 + 1168) = v31;
    __swift_destroy_boxed_opaque_existential_1(v37 + 200);
    type metadata accessor for MatchedMedName();
    _allocateUninitializedArray<A>(_:)();
    v28 = v2;
    v3 = v31;
    *v28 = v31;
    _finalizeUninitializedArray<A>(_:)();
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v30, sel_setMatchingMeds_, isa);

    outlined destroy of [HKQuantityType]();
    v34(v35, v33);
    v36 = *(char **)(v37 + 1560);
LABEL_9:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(char *))(*(_QWORD *)(v37 + 560) + 8))(v36);
  }
  v20 = *(void **)(v37 + 1560);
  v23 = *(void (**)(uint64_t, uint64_t, uint64_t))(v37 + 1488);
  v4 = *(_QWORD *)(v37 + 1344);
  v22 = *(_QWORD *)(v37 + 1256);

  __swift_destroy_boxed_opaque_existential_1(v37 + 200);
  v21 = Logger.wellnessIntents.unsafeMutableAddressor();
  swift_beginAccess();
  v23(v4, v21, v22);
  swift_endAccess();
  v26 = Logger.logObject.getter();
  v25 = static os_log_type_t.error.getter();
  *(_QWORD *)(v37 + 1128) = 2;
  UnsignedInteger<>.init<A>(_:)();
  v24 = *(_DWORD *)(v37 + 1876);
  v27 = _allocateUninitializedArray<A>(_:)();
  if (!os_log_type_enabled(v26, v25))
  {
    swift_bridgeObjectRelease();
    goto LABEL_8;
  }
  v5 = *(_QWORD *)(v37 + 1528);
  buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
  v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
  v17 = createStorage<A>(capacity:type:)(0);
  v18 = createStorage<A>(capacity:type:)(0);
  *(_QWORD *)(v37 + 1136) = buf;
  *(_QWORD *)(v37 + 1144) = v17;
  *(_QWORD *)(v37 + 1152) = v18;
  serialize(_:at:)(0, (_BYTE **)(v37 + 1136));
  serialize(_:at:)(0, (_BYTE **)(v37 + 1136));
  *(_QWORD *)(v37 + 1160) = v27;
  v19 = (_QWORD *)swift_task_alloc();
  v19[2] = v37 + 1136;
  v19[3] = v37 + 1144;
  v19[4] = v37 + 1152;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
  lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
  result = Sequence.forEach(_:)();
  if (!v5)
  {
    swift_task_dealloc();
    _os_log_impl(&dword_24749F000, v26, v25, "GenericMedicationsPersistor: attempt to buildMatchedMed failed, returning .failure.", buf, v24);
    destroyStorage<A>(_:count:)(v17, 0, v15);
    destroyStorage<A>(_:count:)(v18, 0, MEMORY[0x24BEE4AD8] + 8);
    MEMORY[0x24957D398](buf, MEMORY[0x24BEE4260]);
    swift_bridgeObjectRelease();
LABEL_8:
    v9 = *(void (**)(uint64_t, uint64_t))(v37 + 1536);
    v12 = *(void (**)(uint64_t, uint64_t))(v37 + 1464);
    v13 = *(_QWORD *)(v37 + 1440);
    v11 = *(_QWORD *)(v37 + 1416);
    v7 = *(_QWORD *)(v37 + 1344);
    v8 = *(_QWORD *)(v37 + 1256);
    v10 = *(id *)(v37 + 1544);

    v9(v7, v8);
    v14 = LogGenericMedicationsIntentResponse.__allocating_init(code:userActivity:)(5, 0);

    outlined destroy of [HKQuantityType]();
    v12(v13, v11);
    v36 = v14;
    goto LABEL_9;
  }
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  _QWORD *v20;
  id v21;
  _QWORD *v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  Class isa;
  id v27;
  uint64_t v28;
  void (*v29)(uint64_t, uint64_t);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t (*v33)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v34;
  uint64_t v35;
  void (*v36)(uint64_t, uint64_t);
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint8_t *v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  void (*v48)(uint64_t, uint64_t, uint64_t);
  uint32_t v49;
  os_log_type_t v50;
  NSObject *v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  Class v55;
  id v56;
  uint64_t v57;
  void (*v58)(uint64_t, uint64_t);
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t (*v62)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v63;
  uint64_t v64;
  void (*v65)(uint64_t, uint64_t);
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint8_t *v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  uint64_t v76;
  void (*v77)(uint64_t, uint64_t, uint64_t);
  uint32_t v78;
  os_log_type_t v79;
  NSObject *log;
  uint64_t v81;
  Swift::Bool v82;
  Swift::Bool v83;
  uint64_t v84;
  uint64_t v85;
  void (*v86)(uint64_t, uint64_t);
  uint64_t v87;
  uint8_t *buf;
  uint64_t v89;
  uint64_t v90;
  _QWORD *v91;
  uint64_t v92;
  uint64_t v93;
  void (*v94)(uint64_t, uint64_t, uint64_t);
  uint32_t size;
  os_log_type_t v96;
  NSObject *oslog;
  uint64_t v98;
  Swift::OpaquePointer doseEvents;
  Swift::Bool v100;
  uint64_t v101;
  uint64_t v102;
  void (*v103)(uint64_t, uint64_t);
  uint64_t v104;
  void (*v105)(uint64_t, uint64_t);
  uint64_t v106;
  char *v107;
  char *v108;
  uint64_t v109;
  uint8_t *v110;
  uint64_t v111;
  uint64_t v112;
  _QWORD *v113;
  uint64_t v114;
  uint64_t v115;
  void (*v116)(uint64_t, uint64_t, uint64_t);
  uint32_t v117;
  os_log_type_t v118;
  NSObject *v119;
  uint64_t v120;
  uint64_t v121;

  v1 = *(_QWORD *)(v0 + 1648);
  v2 = *(_BYTE *)(v0 + 1825);
  *(_QWORD *)(v0 + 560) = v0;
  *(_QWORD *)(v0 + 648) = v1;
  if ((v2 & 1) == 0 && *(uint64_t *)(v121 + 1648) > 1)
  {
    v116 = *(void (**)(uint64_t, uint64_t, uint64_t))(v121 + 1584);
    v3 = *(_QWORD *)(v121 + 1320);
    v115 = *(_QWORD *)(v121 + 1256);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v114 = Logger.wellnessIntents.unsafeMutableAddressor();
    swift_beginAccess();
    v116(v3, v114, v115);
    swift_endAccess();
    v119 = Logger.logObject.getter();
    v118 = static os_log_type_t.debug.getter();
    *(_QWORD *)(v121 + 976) = 2;
    UnsignedInteger<>.init<A>(_:)();
    v117 = *(_DWORD *)(v121 + 1864);
    v120 = _allocateUninitializedArray<A>(_:)();
    if (os_log_type_enabled(v119, v118))
    {
      v4 = *(_QWORD *)(v121 + 1624);
      v110 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      v109 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      v111 = createStorage<A>(capacity:type:)(0);
      v112 = createStorage<A>(capacity:type:)(0);
      *(_QWORD *)(v121 + 984) = v110;
      *(_QWORD *)(v121 + 992) = v111;
      *(_QWORD *)(v121 + 1000) = v112;
      serialize(_:at:)(0, (_BYTE **)(v121 + 984));
      serialize(_:at:)(0, (_BYTE **)(v121 + 984));
      *(_QWORD *)(v121 + 1008) = v120;
      v113 = (_QWORD *)swift_task_alloc();
      v113[2] = v121 + 984;
      v113[3] = v121 + 992;
      v113[4] = v121 + 1000;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
      lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
      result = Sequence.forEach(_:)();
      if (v4)
        return result;
      swift_task_dealloc();
      _os_log_impl(&dword_24749F000, v119, v118, "Multiple medications found for none (implicitly today) timeframe, returning .multipleMedsFound", v110, v117);
      destroyStorage<A>(_:count:)(v111, 0, v109);
      destroyStorage<A>(_:count:)(v112, 0, MEMORY[0x24BEE4AD8] + 8);
      MEMORY[0x24957D398](v110, MEMORY[0x24BEE4260]);
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    v103 = *(void (**)(uint64_t, uint64_t))(v121 + 1632);
    v105 = *(void (**)(uint64_t, uint64_t))(v121 + 1464);
    v106 = *(_QWORD *)(v121 + 1440);
    v104 = *(_QWORD *)(v121 + 1416);
    v101 = *(_QWORD *)(v121 + 1320);
    v102 = *(_QWORD *)(v121 + 1256);

    v103(v101, v102);
    type metadata accessor for LogGenericMedicationsIntentResponse();
    v107 = LogGenericMedicationsIntentResponse.__allocating_init(code:userActivity:)(103, 0);
    outlined destroy of [HKQuantityType]();
    v105(v106, v104);
    v108 = v107;
    goto LABEL_42;
  }
  if ((*(_BYTE *)(v121 + 1827) & 1) == 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v6 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v121 + 1656) = v6;
    *v6 = *(_QWORD *)(v121 + 560);
    v6[1] = GenericMedicationsPersistor.save(isTimeframeToday:medStatusTaken:confirmedLogAsScheduled:);
    return GenericMedicationsPersistor.getConfirmationLogAsScheduled(doseEvents:)(*(_QWORD *)(v121 + 1480));
  }
  doseEvents._rawValue = *(void **)(v121 + 1480);
  swift_bridgeObjectRelease();
  v100 = allDoseEventsAreUnlogged(doseEvents:)(doseEvents);
  swift_bridgeObjectRelease();
  if (!v100)
  {
    v83 = allLoggedWithMixedStatus(doseEvents:)(*(Swift::OpaquePointer *)(v121 + 1480));
    swift_bridgeObjectRelease();
    if (v83)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      v82 = oneExistingStatusWithConflictingRequest(doseEvents:requestedStatus:)(*(Swift::OpaquePointer *)(v121 + 1480), *(_BYTE *)(v121 + 1826) & 1);
      swift_bridgeObjectRelease();
      if (!v82)
      {
        swift_bridgeObjectRelease();
        v53 = getUnloggedDoseEvents(doseEvents:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRetain();
        *(_QWORD *)(v121 + 656) = v53;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [HKMedicationExposableDoseEvent]);
        lazy protocol witness table accessor for type [HKMedicationExposableDoseEvent] and conformance [A]();
        v54 = Collection.isEmpty.getter();
        outlined destroy of [HKQuantityType]();
        swift_bridgeObjectRelease();
        if ((v54 & 1) == 0)
        {
          swift_bridgeObjectRelease();
          v25 = getUnloggedDoseEvents(doseEvents:)();
          swift_bridgeObjectRelease();
          *(_QWORD *)(v121 + 576) = v25;
          swift_bridgeObjectRelease();
          goto LABEL_41;
        }
        v48 = *(void (**)(uint64_t, uint64_t, uint64_t))(v121 + 1584);
        v15 = *(_QWORD *)(v121 + 1288);
        v47 = *(_QWORD *)(v121 + 1256);
        swift_bridgeObjectRelease();
        v46 = Logger.wellnessIntents.unsafeMutableAddressor();
        swift_beginAccess();
        v48(v15, v46, v47);
        swift_endAccess();
        v51 = Logger.logObject.getter();
        v50 = static os_log_type_t.debug.getter();
        *(_QWORD *)(v121 + 664) = 2;
        UnsignedInteger<>.init<A>(_:)();
        v49 = *(_DWORD *)(v121 + 1844);
        v52 = _allocateUninitializedArray<A>(_:)();
        if (os_log_type_enabled(v51, v50))
        {
          v16 = *(_QWORD *)(v121 + 1624);
          v42 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
          v41 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
          v43 = createStorage<A>(capacity:type:)(0);
          v44 = createStorage<A>(capacity:type:)(0);
          *(_QWORD *)(v121 + 768) = v42;
          *(_QWORD *)(v121 + 776) = v43;
          *(_QWORD *)(v121 + 784) = v44;
          serialize(_:at:)(0, (_BYTE **)(v121 + 768));
          serialize(_:at:)(0, (_BYTE **)(v121 + 768));
          *(_QWORD *)(v121 + 792) = v52;
          v45 = (_QWORD *)swift_task_alloc();
          v45[2] = v121 + 768;
          v45[3] = v121 + 776;
          v45[4] = v121 + 784;
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
          lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
          result = Sequence.forEach(_:)();
          if (v16)
            return result;
          swift_task_dealloc();
          _os_log_impl(&dword_24749F000, v51, v50, "allMedsLoggedAlready, returning code .allMedsLoggedAlready", v42, v49);
          destroyStorage<A>(_:count:)(v43, 0, v41);
          destroyStorage<A>(_:count:)(v44, 0, MEMORY[0x24BEE4AD8] + 8);
          MEMORY[0x24957D398](v42, MEMORY[0x24BEE4260]);
          swift_bridgeObjectRelease();
          v40 = 0;
        }
        else
        {
          swift_bridgeObjectRelease();
          v40 = *(_QWORD *)(v121 + 1624);
        }
        *(_QWORD *)(v121 + 1736) = v40;
        v36 = *(void (**)(uint64_t, uint64_t))(v121 + 1632);
        v38 = *(_QWORD *)(v121 + 1480);
        v34 = *(_QWORD *)(v121 + 1288);
        v35 = *(_QWORD *)(v121 + 1256);

        v36(v34, v35);
        *(_QWORD *)(v121 + 1744) = type metadata accessor for LogGenericMedicationsIntentResponse();
        v37 = LogGenericMedicationsIntentResponse.__allocating_init(code:userActivity:)(108, 0);
        *(_QWORD *)(v121 + 1752) = v37;
        v17 = v37;
        v18 = v37;
        *(_QWORD *)(v121 + 672) = v37;
        *(_QWORD *)(v121 + 1760) = type metadata accessor for MatchedMedName();
        *(_QWORD *)(v121 + 680) = _allocateUninitializedArray<A>(_:)();
        *(_QWORD *)(v121 + 688) = v38;
        Collection<>.makeIterator()();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<[HKMedicationExposableDoseEvent]>);
        IndexingIterator.next()();
        v39 = *(_QWORD *)(v121 + 696);
        *(_QWORD *)(v121 + 1768) = v39;
        if (v39)
        {
          v19 = *(_QWORD *)(v121 + 1248);
          *(_QWORD *)(v121 + 704) = v39;
          outlined init with copy of QuantityPersisting(v19 + 16, v121 + 120);
          v31 = *(_QWORD *)(v121 + 144);
          v32 = *(_QWORD *)(v121 + 152);
          __swift_project_boxed_opaque_existential_1((_QWORD *)(v121 + 120), v31);
          v33 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v32 + 24) + **(int **)(v32 + 24));
          v20 = (_QWORD *)swift_task_alloc();
          *(_QWORD *)(v121 + 1776) = v20;
          *v20 = *(_QWORD *)(v121 + 560);
          v20[1] = GenericMedicationsPersistor.save(isTimeframeToday:medStatusTaken:confirmedLogAsScheduled:);
          return v33(v39, 1, v31, v32);
        }
        v27 = *(id *)(v121 + 1752);
        v29 = *(void (**)(uint64_t, uint64_t))(v121 + 1464);
        v30 = *(_QWORD *)(v121 + 1440);
        v28 = *(_QWORD *)(v121 + 1416);
        outlined destroy of [HKQuantityType]();
        swift_bridgeObjectRetain();
        isa = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
        objc_msgSend(v27, sel_setMatchingMeds_, isa);

        outlined destroy of [HKQuantityType]();
        outlined destroy of [HKQuantityType]();
        v29(v30, v28);
        v108 = *(char **)(v121 + 1752);
LABEL_42:
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        return (*(uint64_t (**)(char *))(*(_QWORD *)(v121 + 560) + 8))(v108);
      }
    }
    v77 = *(void (**)(uint64_t, uint64_t, uint64_t))(v121 + 1584);
    v9 = *(_QWORD *)(v121 + 1304);
    v76 = *(_QWORD *)(v121 + 1256);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v75 = Logger.wellnessIntents.unsafeMutableAddressor();
    swift_beginAccess();
    v77(v9, v75, v76);
    swift_endAccess();
    log = Logger.logObject.getter();
    v79 = static os_log_type_t.debug.getter();
    *(_QWORD *)(v121 + 800) = 2;
    UnsignedInteger<>.init<A>(_:)();
    v78 = *(_DWORD *)(v121 + 1852);
    v81 = _allocateUninitializedArray<A>(_:)();
    if (os_log_type_enabled(log, v79))
    {
      v10 = *(_QWORD *)(v121 + 1624);
      v71 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      v70 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      v72 = createStorage<A>(capacity:type:)(0);
      v73 = createStorage<A>(capacity:type:)(0);
      *(_QWORD *)(v121 + 904) = v71;
      *(_QWORD *)(v121 + 912) = v72;
      *(_QWORD *)(v121 + 920) = v73;
      serialize(_:at:)(0, (_BYTE **)(v121 + 904));
      serialize(_:at:)(0, (_BYTE **)(v121 + 904));
      *(_QWORD *)(v121 + 928) = v81;
      v74 = (_QWORD *)swift_task_alloc();
      v74[2] = v121 + 904;
      v74[3] = v121 + 912;
      v74[4] = v121 + 920;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
      lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
      result = Sequence.forEach(_:)();
      if (v10)
        return result;
      swift_task_dealloc();
      _os_log_impl(&dword_24749F000, log, v79, "Calling either allLoggedWithMixedStatus or oneExistingStatusWithConflictingRequest", v71, v78);
      destroyStorage<A>(_:count:)(v72, 0, v70);
      destroyStorage<A>(_:count:)(v73, 0, MEMORY[0x24BEE4AD8] + 8);
      MEMORY[0x24957D398](v71, MEMORY[0x24BEE4260]);
      swift_bridgeObjectRelease();
      v69 = 0;
    }
    else
    {
      swift_bridgeObjectRelease();
      v69 = *(_QWORD *)(v121 + 1624);
    }
    *(_QWORD *)(v121 + 1680) = v69;
    v65 = *(void (**)(uint64_t, uint64_t))(v121 + 1632);
    v67 = *(_QWORD *)(v121 + 1480);
    v63 = *(_QWORD *)(v121 + 1304);
    v64 = *(_QWORD *)(v121 + 1256);

    v65(v63, v64);
    *(_QWORD *)(v121 + 1688) = type metadata accessor for LogGenericMedicationsIntentResponse();
    v66 = LogGenericMedicationsIntentResponse.__allocating_init(code:userActivity:)(107, 0);
    *(_QWORD *)(v121 + 1696) = v66;
    v11 = v66;
    v12 = v66;
    *(_QWORD *)(v121 + 808) = v66;
    *(_QWORD *)(v121 + 1704) = type metadata accessor for MatchedMedName();
    *(_QWORD *)(v121 + 816) = _allocateUninitializedArray<A>(_:)();
    *(_QWORD *)(v121 + 824) = v67;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [HKMedicationExposableDoseEvent]);
    lazy protocol witness table accessor for type [HKMedicationExposableDoseEvent] and conformance [A]();
    Collection<>.makeIterator()();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<[HKMedicationExposableDoseEvent]>);
    IndexingIterator.next()();
    v68 = *(_QWORD *)(v121 + 832);
    *(_QWORD *)(v121 + 1712) = v68;
    if (v68)
    {
      v13 = *(_QWORD *)(v121 + 1248);
      *(_QWORD *)(v121 + 840) = v68;
      outlined init with copy of QuantityPersisting(v13 + 16, v121 + 160);
      v60 = *(_QWORD *)(v121 + 184);
      v61 = *(_QWORD *)(v121 + 192);
      __swift_project_boxed_opaque_existential_1((_QWORD *)(v121 + 160), v60);
      v62 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v61 + 24) + **(int **)(v61 + 24));
      v14 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v121 + 1720) = v14;
      *v14 = *(_QWORD *)(v121 + 560);
      v14[1] = GenericMedicationsPersistor.save(isTimeframeToday:medStatusTaken:confirmedLogAsScheduled:);
      return v62(v68, 1, v60, v61);
    }
    v56 = *(id *)(v121 + 1696);
    v58 = *(void (**)(uint64_t, uint64_t))(v121 + 1464);
    v59 = *(_QWORD *)(v121 + 1440);
    v57 = *(_QWORD *)(v121 + 1416);
    outlined destroy of [HKQuantityType]();
    swift_bridgeObjectRetain();
    v55 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v56, sel_setMatchingMeds_, v55);

    outlined destroy of [HKQuantityType]();
    outlined destroy of [HKQuantityType]();
    v58(v59, v57);
    v108 = *(char **)(v121 + 1696);
    goto LABEL_42;
  }
  v94 = *(void (**)(uint64_t, uint64_t, uint64_t))(v121 + 1584);
  v7 = *(_QWORD *)(v121 + 1312);
  v93 = *(_QWORD *)(v121 + 1256);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v92 = Logger.wellnessIntents.unsafeMutableAddressor();
  swift_beginAccess();
  v94(v7, v92, v93);
  swift_endAccess();
  oslog = Logger.logObject.getter();
  v96 = static os_log_type_t.debug.getter();
  *(_QWORD *)(v121 + 936) = 2;
  UnsignedInteger<>.init<A>(_:)();
  size = *(_DWORD *)(v121 + 1860);
  v98 = _allocateUninitializedArray<A>(_:)();
  if (!os_log_type_enabled(oslog, v96))
  {
    swift_bridgeObjectRelease();
    goto LABEL_19;
  }
  v8 = *(_QWORD *)(v121 + 1624);
  buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
  v87 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
  v89 = createStorage<A>(capacity:type:)(0);
  v90 = createStorage<A>(capacity:type:)(0);
  *(_QWORD *)(v121 + 944) = buf;
  *(_QWORD *)(v121 + 952) = v89;
  *(_QWORD *)(v121 + 960) = v90;
  serialize(_:at:)(0, (_BYTE **)(v121 + 944));
  serialize(_:at:)(0, (_BYTE **)(v121 + 944));
  *(_QWORD *)(v121 + 968) = v98;
  v91 = (_QWORD *)swift_task_alloc();
  v91[2] = v121 + 944;
  v91[3] = v121 + 952;
  v91[4] = v121 + 960;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
  lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
  result = Sequence.forEach(_:)();
  if (!v8)
  {
    swift_task_dealloc();
    _os_log_impl(&dword_24749F000, oslog, v96, "All dose events for day are unlogged, continuing to write", buf, size);
    destroyStorage<A>(_:count:)(v89, 0, v87);
    destroyStorage<A>(_:count:)(v90, 0, MEMORY[0x24BEE4AD8] + 8);
    MEMORY[0x24957D398](buf, MEMORY[0x24BEE4260]);
    swift_bridgeObjectRelease();
LABEL_19:
    v86 = *(void (**)(uint64_t, uint64_t))(v121 + 1632);
    v84 = *(_QWORD *)(v121 + 1312);
    v85 = *(_QWORD *)(v121 + 1256);

    v86(v84, v85);
LABEL_41:
    v24 = *(void **)(*(_QWORD *)(v121 + 1248) + 8);
    *(_QWORD *)(v121 + 1792) = v24;
    v21 = v24;
    v23 = *(_QWORD *)(v121 + 576);
    *(_QWORD *)(v121 + 1800) = v23;
    swift_bridgeObjectRetain();
    v22 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v121 + 1808) = v22;
    *v22 = *(_QWORD *)(v121 + 560);
    v22[1] = GenericMedicationsPersistor.save(isTimeframeToday:medStatusTaken:confirmedLogAsScheduled:);
    return GenericMedicationsPersistor.writeDoseEvent(medicationController:doseEvents:medStatusTaken:)((uint64_t)v24, v23, *(_BYTE *)(v121 + 1826) & 1);
  }
  return result;
}

{
  _QWORD *v0;
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;

  v3 = (void (*)(uint64_t, uint64_t))v0[183];
  v4 = v0[180];
  v2 = v0[177];
  v0[70] = v0;
  outlined destroy of [HKQuantityType]();
  v3(v4, v2);
  v5 = v0[208];
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(v0[70] + 8))(v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t result;
  id v5;
  uint64_t v6;
  uint64_t v7;
  Class isa;
  id v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t);
  id v16;
  uint64_t v17;
  void (*v18)(uint64_t, uint64_t);
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint8_t *buf;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(uint64_t, uint64_t, uint64_t);
  uint32_t v31;
  os_log_type_t v32;
  NSObject *v33;
  uint64_t v34;
  void *v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t (*v40)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v41;

  v1 = *(_QWORD *)(v0 + 1728);
  *(_QWORD *)(v0 + 560) = v0;
  if (v1)
  {
    v35 = *(void **)(v41 + 1728);
    v36 = *(void **)(v41 + 1712);
    *(_QWORD *)(v41 + 888) = v35;
    __swift_destroy_boxed_opaque_existential_1(v41 + 160);
    v5 = v35;
    *(_QWORD *)(v41 + 896) = v35;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [MatchedMedName]);
    Array.append(_:)();

    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<[HKMedicationExposableDoseEvent]>);
    IndexingIterator.next()();
    v37 = *(_QWORD *)(v41 + 832);
    *(_QWORD *)(v41 + 1712) = v37;
    if (v37)
    {
      v2 = *(_QWORD *)(v41 + 1248);
      *(_QWORD *)(v41 + 840) = v37;
      outlined init with copy of QuantityPersisting(v2 + 16, v41 + 160);
      v38 = *(_QWORD *)(v41 + 184);
      v39 = *(_QWORD *)(v41 + 192);
      __swift_project_boxed_opaque_existential_1((_QWORD *)(v41 + 160), v38);
      v40 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v39 + 24) + **(int **)(v39 + 24));
      v3 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v41 + 1720) = v3;
      *v3 = *(_QWORD *)(v41 + 560);
      v3[1] = GenericMedicationsPersistor.save(isTimeframeToday:medStatusTaken:confirmedLogAsScheduled:);
      return v40(v37, 1, v38, v39);
    }
    v9 = *(id *)(v41 + 1696);
    v11 = *(void (**)(uint64_t, uint64_t))(v41 + 1464);
    v12 = *(_QWORD *)(v41 + 1440);
    v10 = *(_QWORD *)(v41 + 1416);
    outlined destroy of [HKQuantityType]();
    swift_bridgeObjectRetain();
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v9, sel_setMatchingMeds_, isa);

    outlined destroy of [HKQuantityType]();
    outlined destroy of [HKQuantityType]();
    v11(v12, v10);
    v21 = *(char **)(v41 + 1696);
    goto LABEL_11;
  }
  v27 = *(void **)(v41 + 1696);
  v30 = *(void (**)(uint64_t, uint64_t, uint64_t))(v41 + 1584);
  v6 = *(_QWORD *)(v41 + 1296);
  v29 = *(_QWORD *)(v41 + 1256);

  __swift_destroy_boxed_opaque_existential_1(v41 + 160);
  v28 = Logger.wellnessIntents.unsafeMutableAddressor();
  swift_beginAccess();
  v30(v6, v28, v29);
  swift_endAccess();
  v33 = Logger.logObject.getter();
  v32 = static os_log_type_t.error.getter();
  *(_QWORD *)(v41 + 848) = 2;
  UnsignedInteger<>.init<A>(_:)();
  v31 = *(_DWORD *)(v41 + 1856);
  v34 = _allocateUninitializedArray<A>(_:)();
  if (!os_log_type_enabled(v33, v32))
  {
    swift_bridgeObjectRelease();
    goto LABEL_9;
  }
  v7 = *(_QWORD *)(v41 + 1680);
  buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
  v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
  v24 = createStorage<A>(capacity:type:)(0);
  v25 = createStorage<A>(capacity:type:)(0);
  *(_QWORD *)(v41 + 856) = buf;
  *(_QWORD *)(v41 + 864) = v24;
  *(_QWORD *)(v41 + 872) = v25;
  serialize(_:at:)(0, (_BYTE **)(v41 + 856));
  serialize(_:at:)(0, (_BYTE **)(v41 + 856));
  *(_QWORD *)(v41 + 880) = v34;
  v26 = (_QWORD *)swift_task_alloc();
  v26[2] = v41 + 856;
  v26[3] = v41 + 864;
  v26[4] = v41 + 872;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
  lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
  result = Sequence.forEach(_:)();
  if (!v7)
  {
    swift_task_dealloc();
    _os_log_impl(&dword_24749F000, v33, v32, "Couldn't create MatchedMedName from doseEvent, returning .failure.", buf, v31);
    destroyStorage<A>(_:count:)(v24, 0, v22);
    destroyStorage<A>(_:count:)(v25, 0, MEMORY[0x24BEE4AD8] + 8);
    MEMORY[0x24957D398](buf, MEMORY[0x24BEE4260]);
    swift_bridgeObjectRelease();
LABEL_9:
    v15 = *(void (**)(uint64_t, uint64_t))(v41 + 1632);
    v18 = *(void (**)(uint64_t, uint64_t))(v41 + 1464);
    v19 = *(_QWORD *)(v41 + 1440);
    v17 = *(_QWORD *)(v41 + 1416);
    v13 = *(_QWORD *)(v41 + 1296);
    v14 = *(_QWORD *)(v41 + 1256);
    v16 = *(id *)(v41 + 1712);

    v15(v13, v14);
    v20 = LogGenericMedicationsIntentResponse.__allocating_init(code:userActivity:)(5, 0);

    outlined destroy of [HKQuantityType]();
    outlined destroy of [HKQuantityType]();

    outlined destroy of [HKQuantityType]();
    v18(v19, v17);
    v21 = v20;
LABEL_11:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(char *))(*(_QWORD *)(v41 + 560) + 8))(v21);
  }
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t result;
  id v5;
  uint64_t v6;
  uint64_t v7;
  Class isa;
  id v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t);
  id v16;
  uint64_t v17;
  void (*v18)(uint64_t, uint64_t);
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint8_t *buf;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(uint64_t, uint64_t, uint64_t);
  uint32_t v31;
  os_log_type_t v32;
  NSObject *v33;
  uint64_t v34;
  void *v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t (*v40)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v41;

  v1 = *(_QWORD *)(v0 + 1784);
  *(_QWORD *)(v0 + 560) = v0;
  if (v1)
  {
    v35 = *(void **)(v41 + 1784);
    v36 = *(void **)(v41 + 1768);
    *(_QWORD *)(v41 + 752) = v35;
    __swift_destroy_boxed_opaque_existential_1(v41 + 120);
    v5 = v35;
    *(_QWORD *)(v41 + 760) = v35;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [MatchedMedName]);
    Array.append(_:)();

    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<[HKMedicationExposableDoseEvent]>);
    IndexingIterator.next()();
    v37 = *(_QWORD *)(v41 + 696);
    *(_QWORD *)(v41 + 1768) = v37;
    if (v37)
    {
      v2 = *(_QWORD *)(v41 + 1248);
      *(_QWORD *)(v41 + 704) = v37;
      outlined init with copy of QuantityPersisting(v2 + 16, v41 + 120);
      v38 = *(_QWORD *)(v41 + 144);
      v39 = *(_QWORD *)(v41 + 152);
      __swift_project_boxed_opaque_existential_1((_QWORD *)(v41 + 120), v38);
      v40 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v39 + 24) + **(int **)(v39 + 24));
      v3 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v41 + 1776) = v3;
      *v3 = *(_QWORD *)(v41 + 560);
      v3[1] = GenericMedicationsPersistor.save(isTimeframeToday:medStatusTaken:confirmedLogAsScheduled:);
      return v40(v37, 1, v38, v39);
    }
    v9 = *(id *)(v41 + 1752);
    v11 = *(void (**)(uint64_t, uint64_t))(v41 + 1464);
    v12 = *(_QWORD *)(v41 + 1440);
    v10 = *(_QWORD *)(v41 + 1416);
    outlined destroy of [HKQuantityType]();
    swift_bridgeObjectRetain();
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v9, sel_setMatchingMeds_, isa);

    outlined destroy of [HKQuantityType]();
    outlined destroy of [HKQuantityType]();
    v11(v12, v10);
    v21 = *(char **)(v41 + 1752);
    goto LABEL_11;
  }
  v27 = *(void **)(v41 + 1752);
  v30 = *(void (**)(uint64_t, uint64_t, uint64_t))(v41 + 1584);
  v6 = *(_QWORD *)(v41 + 1280);
  v29 = *(_QWORD *)(v41 + 1256);

  __swift_destroy_boxed_opaque_existential_1(v41 + 120);
  v28 = Logger.wellnessIntents.unsafeMutableAddressor();
  swift_beginAccess();
  v30(v6, v28, v29);
  swift_endAccess();
  v33 = Logger.logObject.getter();
  v32 = static os_log_type_t.error.getter();
  *(_QWORD *)(v41 + 712) = 2;
  UnsignedInteger<>.init<A>(_:)();
  v31 = *(_DWORD *)(v41 + 1848);
  v34 = _allocateUninitializedArray<A>(_:)();
  if (!os_log_type_enabled(v33, v32))
  {
    swift_bridgeObjectRelease();
    goto LABEL_9;
  }
  v7 = *(_QWORD *)(v41 + 1736);
  buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
  v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
  v24 = createStorage<A>(capacity:type:)(0);
  v25 = createStorage<A>(capacity:type:)(0);
  *(_QWORD *)(v41 + 720) = buf;
  *(_QWORD *)(v41 + 728) = v24;
  *(_QWORD *)(v41 + 736) = v25;
  serialize(_:at:)(0, (_BYTE **)(v41 + 720));
  serialize(_:at:)(0, (_BYTE **)(v41 + 720));
  *(_QWORD *)(v41 + 744) = v34;
  v26 = (_QWORD *)swift_task_alloc();
  v26[2] = v41 + 720;
  v26[3] = v41 + 728;
  v26[4] = v41 + 736;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
  lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
  result = Sequence.forEach(_:)();
  if (!v7)
  {
    swift_task_dealloc();
    _os_log_impl(&dword_24749F000, v33, v32, "Couldn't create MatchedMedName from doseEvent, returning .failure.", buf, v31);
    destroyStorage<A>(_:count:)(v24, 0, v22);
    destroyStorage<A>(_:count:)(v25, 0, MEMORY[0x24BEE4AD8] + 8);
    MEMORY[0x24957D398](buf, MEMORY[0x24BEE4260]);
    swift_bridgeObjectRelease();
LABEL_9:
    v15 = *(void (**)(uint64_t, uint64_t))(v41 + 1632);
    v18 = *(void (**)(uint64_t, uint64_t))(v41 + 1464);
    v19 = *(_QWORD *)(v41 + 1440);
    v17 = *(_QWORD *)(v41 + 1416);
    v13 = *(_QWORD *)(v41 + 1280);
    v14 = *(_QWORD *)(v41 + 1256);
    v16 = *(id *)(v41 + 1768);

    v15(v13, v14);
    v20 = LogGenericMedicationsIntentResponse.__allocating_init(code:userActivity:)(5, 0);

    outlined destroy of [HKQuantityType]();
    outlined destroy of [HKQuantityType]();

    outlined destroy of [HKQuantityType]();
    v18(v19, v17);
    v21 = v20;
LABEL_11:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(char *))(*(_QWORD *)(v41 + 560) + 8))(v21);
  }
  return result;
}

{
  _QWORD *v0;
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;

  v3 = (void (*)(uint64_t, uint64_t))v0[183];
  v4 = v0[180];
  v2 = v0[177];
  v0[70] = v0;
  outlined destroy of [HKQuantityType]();
  v3(v4, v2);
  v5 = v0[227];
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(v0[70] + 8))(v5);
}

{
  uint64_t v0;
  uint64_t v1;
  id v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint8_t *buf;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t, uint64_t);
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint32_t v23;
  os_log_type_t v24;
  NSObject *v25;
  uint64_t v26;

  v18 = *(void (**)(uint64_t, uint64_t))(v0 + 1464);
  v15 = *(void **)(v0 + 1456);
  v14 = *(void **)(v0 + 1448);
  v16 = *(_QWORD *)(v0 + 1440);
  v17 = *(_QWORD *)(v0 + 1416);
  *(_QWORD *)(v0 + 560) = v0;
  swift_willThrow();

  v18(v16, v17);
  v19 = *(void **)(v0 + 1472);
  v1 = *(_QWORD *)(v0 + 1272);
  v20 = *(_QWORD *)(v0 + 1264);
  v22 = *(_QWORD *)(v0 + 1256);
  v2 = v19;
  *(_QWORD *)(v0 + 592) = v19;
  v21 = Logger.wellnessIntents.unsafeMutableAddressor();
  swift_beginAccess();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v20 + 16))(v1, v21, v22);
  swift_endAccess();
  v25 = Logger.logObject.getter();
  v24 = static os_log_type_t.error.getter();
  *(_QWORD *)(v0 + 600) = 2;
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  v23 = *(_DWORD *)(v0 + 1828);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
  v26 = _allocateUninitializedArray<A>(_:)();
  if (os_log_type_enabled(v25, v24))
  {
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    v10 = createStorage<A>(capacity:type:)(0);
    v11 = createStorage<A>(capacity:type:)(0);
    *(_QWORD *)(v13 + 608) = buf;
    *(_QWORD *)(v13 + 616) = v10;
    *(_QWORD *)(v13 + 624) = v11;
    serialize(_:at:)(0, (_BYTE **)(v13 + 608));
    serialize(_:at:)(0, (_BYTE **)(v13 + 608));
    *(_QWORD *)(v13 + 632) = v26;
    v12 = (_QWORD *)swift_task_alloc();
    v12[2] = v13 + 608;
    v12[3] = v13 + 616;
    v12[4] = v13 + 624;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
    lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
    Sequence.forEach(_:)();
    swift_task_dealloc();
    _os_log_impl(&dword_24749F000, v25, v24, "Failed fetching dose events for timeframe.", buf, v23);
    destroyStorage<A>(_:count:)(v10, 0, v8);
    destroyStorage<A>(_:count:)(v11, 0, MEMORY[0x24BEE4AD8] + 8);
    MEMORY[0x24957D398](buf, MEMORY[0x24BEE4260]);
  }
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(v13 + 1272);
  v4 = *(_QWORD *)(v13 + 1264);
  v6 = *(_QWORD *)(v13 + 1256);

  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v5, v6);
  type metadata accessor for LogGenericMedicationsIntentResponse();
  v7 = LogGenericMedicationsIntentResponse.__allocating_init(code:userActivity:)(5, 0);

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(char *))(*(_QWORD *)(v13 + 560) + 8))(v7);
}

{
  uint64_t v0;
  uint64_t v1;
  id v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint8_t *buf;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t);
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint32_t v21;
  os_log_type_t v22;
  NSObject *v23;
  uint64_t v24;

  v15 = *(void (**)(uint64_t, uint64_t))(v0 + 1464);
  v16 = *(_QWORD *)(v0 + 1440);
  v14 = *(_QWORD *)(v0 + 1416);
  *(_QWORD *)(v0 + 560) = v0;
  swift_bridgeObjectRelease();
  outlined destroy of [HKQuantityType]();
  v15(v16, v14);
  v17 = *(void **)(v0 + 1672);
  v1 = *(_QWORD *)(v0 + 1272);
  v18 = *(_QWORD *)(v0 + 1264);
  v20 = *(_QWORD *)(v0 + 1256);
  v2 = v17;
  *(_QWORD *)(v0 + 592) = v17;
  v19 = Logger.wellnessIntents.unsafeMutableAddressor();
  swift_beginAccess();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v18 + 16))(v1, v19, v20);
  swift_endAccess();
  v23 = Logger.logObject.getter();
  v22 = static os_log_type_t.error.getter();
  *(_QWORD *)(v0 + 600) = 2;
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  v21 = *(_DWORD *)(v0 + 1828);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
  v24 = _allocateUninitializedArray<A>(_:)();
  if (os_log_type_enabled(v23, v22))
  {
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    v10 = createStorage<A>(capacity:type:)(0);
    v11 = createStorage<A>(capacity:type:)(0);
    *(_QWORD *)(v13 + 608) = buf;
    *(_QWORD *)(v13 + 616) = v10;
    *(_QWORD *)(v13 + 624) = v11;
    serialize(_:at:)(0, (_BYTE **)(v13 + 608));
    serialize(_:at:)(0, (_BYTE **)(v13 + 608));
    *(_QWORD *)(v13 + 632) = v24;
    v12 = (_QWORD *)swift_task_alloc();
    v12[2] = v13 + 608;
    v12[3] = v13 + 616;
    v12[4] = v13 + 624;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
    lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
    Sequence.forEach(_:)();
    swift_task_dealloc();
    _os_log_impl(&dword_24749F000, v23, v22, "Failed fetching dose events for timeframe.", buf, v21);
    destroyStorage<A>(_:count:)(v10, 0, v8);
    destroyStorage<A>(_:count:)(v11, 0, MEMORY[0x24BEE4AD8] + 8);
    MEMORY[0x24957D398](buf, MEMORY[0x24BEE4260]);
  }
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(v13 + 1272);
  v4 = *(_QWORD *)(v13 + 1264);
  v6 = *(_QWORD *)(v13 + 1256);

  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v5, v6);
  type metadata accessor for LogGenericMedicationsIntentResponse();
  v7 = LogGenericMedicationsIntentResponse.__allocating_init(code:userActivity:)(5, 0);

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(char *))(*(_QWORD *)(v13 + 560) + 8))(v7);
}

uint64_t GenericMedicationsPersistor.save(isTimeframeToday:medStatusTaken:confirmedLogAsScheduled:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;

  v3 = *v1;
  *(_QWORD *)(v3 + 560) = *v1;
  *(_QWORD *)(v3 + 1576) = a1;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t *v1;
  uint64_t v3;

  v3 = *v1;
  *(_QWORD *)(v3 + 560) = *v1;
  *(_QWORD *)(v3 + 1648) = a1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  return swift_task_switch();
}

{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;

  v3 = (_QWORD *)*v2;
  v3[70] = *v2;
  v3[208] = a1;
  v3[209] = v1;
  swift_task_dealloc();
  if (!v1)
    swift_bridgeObjectRelease();
  return swift_task_switch();
}

{
  uint64_t *v1;
  uint64_t v3;

  v3 = *v1;
  *(_QWORD *)(v3 + 560) = *v1;
  *(_QWORD *)(v3 + 1728) = a1;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t *v1;
  uint64_t v3;

  v3 = *v1;
  *(_QWORD *)(v3 + 560) = *v1;
  *(_QWORD *)(v3 + 1784) = a1;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t *v1;
  void *v3;
  uint64_t v4;

  v4 = *v1;
  v3 = *(void **)(*v1 + 1792);
  *(_QWORD *)(v4 + 560) = *v1;
  *(_QWORD *)(v4 + 1816) = a1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();

  return swift_task_switch();
}

uint64_t GenericMedicationsPersistor.getConfirmationLogAsScheduled(doseEvents:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v2[28] = v1;
  v2[27] = a1;
  v2[12] = v2;
  v2[13] = 0;
  v2[14] = 0;
  v2[16] = 0;
  v2[10] = 0;
  v2[11] = 0;
  v2[19] = 0;
  v2[20] = 0;
  v2[21] = 0;
  v3 = type metadata accessor for Logger();
  v2[29] = v3;
  v2[30] = *(_QWORD *)(v3 - 8);
  v2[31] = swift_task_alloc();
  v2[13] = a1;
  v2[14] = v1;
  return swift_task_switch();
}

{
  uint64_t *v1;
  uint64_t v3;

  v3 = *v1;
  *(_QWORD *)(v3 + 96) = *v1;
  *(_QWORD *)(v3 + 280) = a1;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t GenericMedicationsPersistor.getConfirmationLogAsScheduled(doseEvents:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  char *v5;
  char *v6;
  Class isa;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint8_t *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint32_t v26;
  os_log_type_t v27;
  NSObject *v28;
  uint64_t v29;

  v1 = *(_QWORD *)(v0 + 248);
  v23 = *(_QWORD *)(v0 + 240);
  v25 = *(_QWORD *)(v0 + 232);
  *(_QWORD *)(v0 + 96) = v0;
  v24 = Logger.wellnessIntents.unsafeMutableAddressor();
  swift_beginAccess();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v23 + 16))(v1, v24, v25);
  swift_endAccess();
  v28 = Logger.logObject.getter();
  v27 = static os_log_type_t.debug.getter();
  *(_QWORD *)(v0 + 120) = 2;
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  v26 = *(_DWORD *)(v0 + 288);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
  v29 = _allocateUninitializedArray<A>(_:)();
  if (os_log_type_enabled(v28, v27))
  {
    v18 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    v19 = createStorage<A>(capacity:type:)(0);
    v20 = createStorage<A>(capacity:type:)(0);
    *(_QWORD *)(v22 + 184) = v18;
    *(_QWORD *)(v22 + 192) = v19;
    *(_QWORD *)(v22 + 200) = v20;
    serialize(_:at:)(0, (_BYTE **)(v22 + 184));
    serialize(_:at:)(0, (_BYTE **)(v22 + 184));
    *(_QWORD *)(v22 + 208) = v29;
    v21 = (_QWORD *)swift_task_alloc();
    v21[2] = v22 + 184;
    v21[3] = v22 + 192;
    v21[4] = v22 + 200;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
    lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
    Sequence.forEach(_:)();
    swift_task_dealloc();
    _os_log_impl(&dword_24749F000, v28, v27, "Tried to write dose events but confirmedLogAsScheduled is false, returning .needsConfirmLogAsScheduled", v18, v26);
    destroyStorage<A>(_:count:)(v19, 0, v17);
    destroyStorage<A>(_:count:)(v20, 0, MEMORY[0x24BEE4AD8] + 8);
    MEMORY[0x24957D398](v18, MEMORY[0x24BEE4260]);
  }
  swift_bridgeObjectRelease();
  v13 = *(_QWORD *)(v22 + 248);
  v12 = *(_QWORD *)(v22 + 240);
  v14 = *(_QWORD *)(v22 + 232);
  v15 = *(_QWORD *)(v22 + 216);

  (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v13, v14);
  *(_QWORD *)(v22 + 256) = type metadata accessor for MatchedMedName();
  *(_QWORD *)(v22 + 128) = _allocateUninitializedArray<A>(_:)();
  swift_bridgeObjectRetain();
  *(_QWORD *)(v22 + 136) = v15;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [HKMedicationExposableDoseEvent]);
  lazy protocol witness table accessor for type [HKMedicationExposableDoseEvent] and conformance [A]();
  Collection<>.makeIterator()();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<[HKMedicationExposableDoseEvent]>);
  IndexingIterator.next()();
  v16 = *(_QWORD *)(v22 + 144);
  *(_QWORD *)(v22 + 264) = v16;
  if (v16)
  {
    v2 = *(_QWORD *)(v22 + 224);
    *(_QWORD *)(v22 + 160) = v16;
    outlined init with copy of QuantityPersisting(v2 + 16, v22 + 16);
    v9 = *(_QWORD *)(v22 + 40);
    v10 = *(_QWORD *)(v22 + 48);
    __swift_project_boxed_opaque_existential_1((_QWORD *)(v22 + 16), v9);
    v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 + 24) + **(int **)(v10 + 24));
    v3 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v22 + 272) = v3;
    *v3 = *(_QWORD *)(v22 + 96);
    v3[1] = GenericMedicationsPersistor.getConfirmationLogAsScheduled(doseEvents:);
    return v11(v16, 1, v9, v10);
  }
  else
  {
    outlined destroy of [HKQuantityType]();
    type metadata accessor for LogGenericMedicationsIntentResponse();
    v8 = LogGenericMedicationsIntentResponse.__allocating_init(code:userActivity:)(105, 0);
    v5 = v8;
    v6 = v8;
    *(_QWORD *)(v22 + 152) = v8;
    swift_bridgeObjectRetain();
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v8, sel_setMatchingMeds_, isa);

    outlined destroy of [HKQuantityType]();
    swift_task_dealloc();
    return (*(uint64_t (**)(char *))(*(_QWORD *)(v22 + 96) + 8))(v8);
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  id v5;
  char *v6;
  char *v7;
  Class isa;
  char *v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v15;

  v1 = *(_QWORD *)(v0 + 280);
  *(_QWORD *)(v0 + 96) = v0;
  if (v1)
  {
    v10 = *(id *)(v15 + 280);
    *(_QWORD *)(v15 + 168) = v10;
    __swift_destroy_boxed_opaque_existential_1(v15 + 16);
    v5 = v10;
    *(_QWORD *)(v15 + 176) = v10;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [MatchedMedName]);
    Array.append(_:)();

  }
  else
  {
    __swift_destroy_boxed_opaque_existential_1(v15 + 16);
  }

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<[HKMedicationExposableDoseEvent]>);
  IndexingIterator.next()();
  v11 = *(_QWORD *)(v15 + 144);
  *(_QWORD *)(v15 + 264) = v11;
  if (v11)
  {
    v2 = *(_QWORD *)(v15 + 224);
    *(_QWORD *)(v15 + 160) = v11;
    outlined init with copy of QuantityPersisting(v2 + 16, v15 + 16);
    v12 = *(_QWORD *)(v15 + 40);
    v13 = *(_QWORD *)(v15 + 48);
    __swift_project_boxed_opaque_existential_1((_QWORD *)(v15 + 16), v12);
    v14 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 + 24) + **(int **)(v13 + 24));
    v3 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v15 + 272) = v3;
    *v3 = *(_QWORD *)(v15 + 96);
    v3[1] = GenericMedicationsPersistor.getConfirmationLogAsScheduled(doseEvents:);
    return v14(v11, 1, v12, v13);
  }
  else
  {
    outlined destroy of [HKQuantityType]();
    type metadata accessor for LogGenericMedicationsIntentResponse();
    v9 = LogGenericMedicationsIntentResponse.__allocating_init(code:userActivity:)(105, 0);
    v6 = v9;
    v7 = v9;
    *(_QWORD *)(v15 + 152) = v9;
    swift_bridgeObjectRetain();
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v9, sel_setMatchingMeds_, isa);

    outlined destroy of [HKQuantityType]();
    swift_task_dealloc();
    return (*(uint64_t (**)(char *))(*(_QWORD *)(v15 + 96) + 8))(v9);
  }
}

uint64_t protocol witness for GenericMedicationsPersisting.isLoggingAuthorized() in conformance GenericMedicationsPersistor()
{
  uint64_t v0;
  _QWORD *v1;

  *(_QWORD *)(v0 + 16) = v0;
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 24) = v1;
  *v1 = *(_QWORD *)(v0 + 16);
  v1[1] = protocol witness for QuantityPersisting.isLoggingAuthorized(for:) in conformance HealthKitPersistor;
  return GenericMedicationsPersistor.isLoggingAuthorized()();
}

uint64_t protocol witness for GenericMedicationsPersisting.saveWithOverride(medStatusTaken:shouldOverwriteExistingStatuses:) in conformance GenericMedicationsPersistor(char a1, char a2)
{
  uint64_t v2;
  _QWORD *v3;

  *(_QWORD *)(v2 + 16) = v2;
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 24) = v3;
  *v3 = *(_QWORD *)(v2 + 16);
  v3[1] = protocol witness for QuantityPersisting.save(quantityIdentifier:value:units:) in conformance HealthKitPersistor;
  return GenericMedicationsPersistor.saveWithOverride(medStatusTaken:shouldOverwriteExistingStatuses:)(a1 & 1, a2 & 1);
}

uint64_t protocol witness for GenericMedicationsPersisting.save(isTimeframeToday:medStatusTaken:confirmedLogAsScheduled:) in conformance GenericMedicationsPersistor(char a1, char a2, char a3)
{
  uint64_t v3;
  _QWORD *v4;

  *(_QWORD *)(v3 + 16) = v3;
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 24) = v4;
  *v4 = *(_QWORD *)(v3 + 16);
  v4[1] = protocol witness for QuantityPersisting.save(quantityIdentifier:value:units:) in conformance HealthKitPersistor;
  return GenericMedicationsPersistor.save(isTimeframeToday:medStatusTaken:confirmedLogAsScheduled:)(a1 & 1, a2 & 1, a3 & 1);
}

uint64_t sub_2475710BC()
{
  return swift_deallocObject();
}

uint64_t sub_2475710E4()
{
  return swift_deallocObject();
}

uint64_t sub_24757110C()
{
  return swift_deallocObject();
}

uint64_t sub_247571134()
{
  return swift_deallocObject();
}

uint64_t sub_24757115C()
{
  return swift_deallocObject();
}

uint64_t sub_247571184()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2475711C0()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2475711FC()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_247571238()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_247571274()
{
  return swift_deallocObject();
}

uint64_t sub_24757129C()
{
  return swift_deallocObject();
}

uint64_t sub_2475712C4()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_247571300()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_24757133C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_247571378()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2475713B4()
{
  return swift_deallocObject();
}

uint64_t sub_2475713DC()
{
  return swift_deallocObject();
}

uint64_t sub_247571404()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_247571440()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_24757147C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2475714B8()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2475714F4()
{
  return swift_deallocObject();
}

uint64_t sub_24757151C()
{
  return swift_deallocObject();
}

uint64_t sub_247571544()
{
  return swift_deallocObject();
}

uint64_t sub_24757156C()
{
  return swift_deallocObject();
}

uint64_t sub_247571594()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2475715D0()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_24757160C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_247571648()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_247571684()
{
  return swift_deallocObject();
}

uint64_t sub_2475716AC()
{
  return swift_deallocObject();
}

uint64_t sub_2475716D4()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_247571710()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_24757174C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_247571788()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2475717C4()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 24));
  return swift_deallocObject();
}

uint64_t partial apply for @objc closure #1 in LogGenericMedicationsIntentHandler.handle(intent:)()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  const void *v4;
  void *v5;
  void *v6;

  *(_QWORD *)(v1 + 16) = v1;
  v6 = (void *)v0[2];
  v4 = (const void *)v0[3];
  v5 = (void *)v0[4];
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 24) = v2;
  *v2 = *(_QWORD *)(v1 + 16);
  v2[1] = _sIeghH_IeAgH_TRTQ0_;
  return ((uint64_t (*)(void *, const void *, void *))((char *)&async function pointer to @objc closure #1 in LogGenericMedicationsIntentHandler.handle(intent:)
                                                               + async function pointer to @objc closure #1 in LogGenericMedicationsIntentHandler.handle(intent:)))(v6, v4, v5);
}

uint64_t type metadata accessor for LogGenericMedicationsIntentHandler()
{
  return objc_opt_self();
}

uint64_t destroy for GenericMedicationsPersistor(id *a1)
{

  return __swift_destroy_boxed_opaque_existential_1((uint64_t)(a1 + 2));
}

_QWORD *initializeWithCopy for GenericMedicationsPersistor(_QWORD *a1, uint64_t a2)
{
  id v2;
  id v3;
  uint64_t v4;
  id v6;
  void *v7;

  v6 = *(id *)a2;
  v2 = *(id *)a2;
  *a1 = v6;
  v7 = *(void **)(a2 + 8);
  v3 = v7;
  a1[1] = v7;
  v4 = *(_QWORD *)(a2 + 40);
  a1[5] = v4;
  a1[6] = *(_QWORD *)(a2 + 48);
  (**(void (***)(uint64_t, uint64_t))(v4 - 8))((uint64_t)(a1 + 2), a2 + 16);
  return a1;
}

uint64_t assignWithCopy for GenericMedicationsPersistor(uint64_t a1, uint64_t a2)
{
  id v2;
  void *v3;
  id v4;
  void *v5;
  id v7;
  void *v8;

  v7 = *(id *)a2;
  v2 = *(id *)a2;
  v3 = *(void **)a1;
  *(_QWORD *)a1 = v7;

  v8 = *(void **)(a2 + 8);
  v4 = v8;
  v5 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v8;

  __swift_assign_boxed_opaque_existential_1(a1 + 16, (uint64_t *)(a2 + 16));
  return a1;
}

uint64_t __swift_assign_boxed_opaque_existential_1(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _BYTE v10[24];

  v8 = (_QWORD *)result;
  if ((uint64_t *)result != a2)
  {
    v6 = *(_QWORD *)(result + 24);
    v7 = a2[3];
    if (v6 == v7)
    {
      if ((*(_DWORD *)(*(_QWORD *)(v6 - 8) + 80) & 0x20000) != 0)
      {
        v5 = *a2;
        swift_retain();
        result = swift_release();
        *v8 = v5;
      }
      else
      {
        return (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)(v6 - 8) + 24))(result, a2);
      }
    }
    else
    {
      *(_QWORD *)(result + 24) = v7;
      *(_QWORD *)(result + 32) = a2[4];
      v4 = (*(_DWORD *)(*(_QWORD *)(v7 - 8) + 80) & 0x20000) == 0;
      if ((*(_DWORD *)(*(_QWORD *)(v6 - 8) + 80) & 0x20000) != 0)
      {
        if ((*(_DWORD *)(*(_QWORD *)(v7 - 8) + 80) & 0x20000) != 0)
        {
          v2 = *a2;
          swift_retain();
          *v8 = v2;
        }
        else
        {
          (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)(v7 - 8) + 16))(result, a2);
        }
        return swift_release();
      }
      else
      {
        (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(v10, result);
        if (v4)
        {
          (*(void (**)(_QWORD *, uint64_t *))(*(_QWORD *)(v7 - 8) + 16))(v8, a2);
        }
        else
        {
          v3 = *a2;
          swift_retain();
          *v8 = v3;
        }
        return (*(uint64_t (**)(_BYTE *))(*(_QWORD *)(v6 - 8) + 8))(v10);
      }
    }
  }
  return result;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> __swift_memcpy56_8(void *a1, const void *a2)
{
  memcpy(a1, a2, 0x38uLL);
}

uint64_t assignWithTake for GenericMedicationsPersistor(uint64_t a1, _QWORD *a2)
{
  void *v3;
  void *v4;

  v3 = *(void **)a1;
  *(_QWORD *)a1 = *a2;

  v4 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = a2[1];

  __swift_destroy_boxed_opaque_existential_1(a1 + 16);
  memcpy((void *)(a1 + 16), a2 + 2, 0x28uLL);
  return a1;
}

uint64_t getEnumTagSinglePayload for GenericMedicationsPersistor(uint64_t a1, int a2)
{
  int v3;
  int v4;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 56))
    {
      v4 = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v3 = -1;
      if (!HIDWORD(*(_QWORD *)a1))
        v3 = *(_QWORD *)a1;
      v4 = v3;
    }
  }
  else
  {
    v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for GenericMedicationsPersistor(uint64_t result, unsigned int a2, unsigned int a3)
{
  _BOOL4 v3;

  v3 = a3 > 0x7FFFFFFF;
  if (a2 > 0x7FFFFFFF)
  {
    *(_QWORD *)result = a2 + 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)(result + 32) = 0;
    *(_QWORD *)(result + 40) = 0;
    *(_QWORD *)(result + 48) = 0;
    if (a3 > 0x7FFFFFFF)
    {
      if (v3)
        *(_BYTE *)(result + 56) = 1;
      else
        __break(1u);
    }
  }
  else
  {
    if (a3 > 0x7FFFFFFF)
    {
      if (v3)
        *(_BYTE *)(result + 56) = 0;
      else
        __break(1u);
    }
    if (a2)
      *(_QWORD *)result = a2 - 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for GenericMedicationsPersistor()
{
  return &type metadata for GenericMedicationsPersistor;
}

uint64_t isSiriAuthorizedToAccessHealthData(store:)(uint64_t a1)
{
  _QWORD *v1;

  v1[4] = a1;
  v1[2] = v1;
  v1[3] = 0;
  v1[3] = a1;
  return swift_task_switch();
}

uint64_t isSiriAuthorizedToAccessHealthData(store:)()
{
  _QWORD *v0;
  id v1;
  _QWORD *v2;
  id v4;
  uint64_t v5;
  uint64_t v6;

  v4 = (id)v0[4];
  v0[2] = v0;
  v0[5] = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("isSiriAuthorizedToAccessHealthData(store:)", 0x2AuLL, 1)._object;
  v1 = v4;
  v6 = swift_task_alloc();
  v0[6] = v6;
  *(_QWORD *)(v6 + 16) = v4;
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v5 + 56) = v2;
  *v2 = *(_QWORD *)(v5 + 16);
  v2[1] = isSiriAuthorizedToAccessHealthData(store:);
  return withCheckedContinuation<A>(isolation:function:_:)();
}

{
  uint64_t v0;
  void *v2;

  v2 = *(void **)(*(_QWORD *)v0 + 32);
  *(_QWORD *)(*(_QWORD *)v0 + 16) = *(_QWORD *)v0;
  swift_task_dealloc();
  swift_task_dealloc();

  swift_bridgeObjectRelease();
  return swift_task_switch();
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 16) = v0;
  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)(v0 + 16) + 8))(*(_BYTE *)(v0 + 64) & 1);
}

void closure #1 in isSiriAuthorizedToAccessHealthData(store:)(uint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  void *v13;
  uint64_t aBlock;
  int v15;
  int v16;
  uint64_t (*v17)(uint64_t, uint64_t, void *);
  void *v18;
  void (*v19)(uint64_t, void *);
  uint64_t v20;
  id v21;
  uint64_t v22;

  v4 = a1;
  v12 = a2;
  v22 = 0;
  v21 = 0;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<Bool, Never>);
  v7 = *(_QWORD *)(v10 - 8);
  v6 = *(_QWORD *)(v7 + 64);
  v5 = (v6 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v10);
  v9 = (char *)&v4 - v5;
  v22 = v2;
  v21 = v12;
  (*(void (**)(char *))(v3 + 16))((char *)&v4 - v5);
  v8 = (*(unsigned __int8 *)(v7 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v11 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v7 + 32))(v11 + v8, v9, v10);
  v19 = partial apply for closure #1 in closure #1 in isSiriAuthorizedToAccessHealthData(store:);
  v20 = v11;
  aBlock = MEMORY[0x24BDAC760];
  v15 = 1107296256;
  v16 = 0;
  v17 = thunk for @escaping @callee_guaranteed (@unowned HKSiriAuthorizationStatus, @guaranteed Error?) -> ();
  v18 = &block_descriptor_8;
  v13 = _Block_copy(&aBlock);
  swift_release();
  objc_msgSend(v12, sel_getAllHealthDataAccessForSiriWithCompletion_, v13, v4);
  _Block_release(v13);
}

void partial apply for closure #1 in isSiriAuthorizedToAccessHealthData(store:)(uint64_t a1)
{
  uint64_t v1;

  closure #1 in isSiriAuthorizedToAccessHealthData(store:)(a1, *(void **)(v1 + 16));
}

void closure #1 in closure #1 in isSiriAuthorizedToAccessHealthData(store:)(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  char *v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  _QWORD v38[4];
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint8_t *v43;
  uint64_t v44;
  uint64_t v45;
  _BYTE **v46;
  uint64_t *v47;
  uint64_t *v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint8_t *v53;
  uint64_t v54;
  uint64_t v55;
  _BYTE **v56;
  uint64_t *v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  id v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t *v65;
  uint32_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  NSObject *v79;
  int v80;
  uint64_t v81;
  char *v82;
  unint64_t v83;
  unint64_t v84;
  uint64_t *v85;
  uint32_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  _QWORD *v96;
  uint64_t v97;
  NSObject *v98;
  int v99;
  void *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  char *v108;
  unint64_t v109;
  char *v110;
  void *v111;
  uint64_t (*v112)(uint64_t, uint64_t, uint64_t);
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  _BYTE *v116;
  char v117;
  uint64_t v118;
  uint32_t v119;
  char v120;
  void *v121;
  uint64_t (*v122)(uint64_t, uint64_t, uint64_t);
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  _BYTE *v126;
  char v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint32_t v131;
  char v132;
  uint64_t v133;
  void *v134;
  uint64_t v135;

  v102 = a1;
  v111 = a2;
  v103 = a3;
  v135 = 0;
  v134 = 0;
  v133 = 0;
  v101 = 0;
  v121 = 0;
  v104 = type metadata accessor for Logger();
  v105 = *(_QWORD *)(v104 - 8);
  v107 = *(_QWORD *)(v105 + 64);
  v106 = (v107 + 15) & 0xFFFFFFFFFFFFFFF0;
  v3 = MEMORY[0x24BDAC7A8](v111);
  v108 = (char *)v38 - v106;
  v109 = v106;
  v4 = (void *)MEMORY[0x24BDAC7A8](v3);
  v110 = (char *)v38 - v109;
  v135 = v5;
  v134 = v4;
  v133 = v6;
  v7 = v4;
  if (v111)
  {
    v100 = v111;
    v20 = v108;
    v62 = v111;
    v121 = v111;
    v60 = Logger.wellnessIntents.unsafeMutableAddressor();
    v61 = &v120;
    v69 = 32;
    swift_beginAccess();
    (*(void (**)(char *, uint64_t, uint64_t))(v105 + 16))(v20, v60, v104);
    swift_endAccess();
    v21 = v62;
    v70 = 7;
    v68 = swift_allocObject();
    *(_QWORD *)(v68 + 16) = v62;
    default argument 2 of OSLogInterpolation.appendInterpolation(_:privacy:attributes:)();
    swift_bridgeObjectRelease();
    v79 = Logger.logObject.getter();
    v80 = static os_log_type_t.error.getter();
    v65 = &v118;
    v118 = 12;
    v63 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    v64 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    lazy protocol witness table accessor for type Int and conformance Int();
    UnsignedInteger<>.init<A>(_:)();
    v66 = v119;
    v67 = 17;
    v73 = swift_allocObject();
    *(_BYTE *)(v73 + 16) = 64;
    v74 = swift_allocObject();
    *(_BYTE *)(v74 + 16) = 8;
    v22 = swift_allocObject();
    v23 = v68;
    v71 = v22;
    *(_QWORD *)(v22 + 16) = partial apply for implicit closure #10 in getPreferredUnit(for:store:);
    *(_QWORD *)(v22 + 24) = v23;
    v24 = swift_allocObject();
    v25 = v71;
    v72 = v24;
    *(_QWORD *)(v24 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:attributes:);
    *(_QWORD *)(v24 + 24) = v25;
    v26 = swift_allocObject();
    v27 = v72;
    v76 = v26;
    *(_QWORD *)(v26 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:);
    *(_QWORD *)(v26 + 24) = v27;
    v78 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
    v75 = _allocateUninitializedArray<A>(_:)();
    v77 = v28;
    swift_retain();
    v29 = v73;
    v30 = v77;
    *v77 = partial apply for closure #1 in OSLogArguments.append(_:);
    v30[1] = v29;
    swift_retain();
    v31 = v74;
    v32 = v77;
    v77[2] = partial apply for closure #1 in OSLogArguments.append(_:);
    v32[3] = v31;
    swift_retain();
    v33 = v76;
    v34 = v77;
    v77[4] = partial apply for closure #1 in OSLogArguments.append(_:);
    v34[5] = v33;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(v79, (os_log_type_t)v80))
    {
      v35 = v101;
      v53 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      v52 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      v54 = createStorage<A>(capacity:type:)(1);
      v55 = createStorage<A>(capacity:type:)(0);
      v56 = &v116;
      v116 = v53;
      v57 = &v115;
      v115 = v54;
      v58 = &v114;
      v114 = v55;
      serialize(_:at:)(2, &v116);
      serialize(_:at:)(1, v56);
      v112 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v113 = v73;
      closure #1 in osLogInternal(_:log:type:)(&v112, (uint64_t)v56, (uint64_t)v57, (uint64_t)v58);
      v59 = v35;
      if (v35)
      {
        __break(1u);
      }
      else
      {
        v112 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
        v113 = v74;
        closure #1 in osLogInternal(_:log:type:)(&v112, (uint64_t)&v116, (uint64_t)&v115, (uint64_t)&v114);
        v51 = 0;
        v112 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
        v113 = v76;
        closure #1 in osLogInternal(_:log:type:)(&v112, (uint64_t)&v116, (uint64_t)&v115, (uint64_t)&v114);
        _os_log_impl(&dword_24749F000, v79, (os_log_type_t)v80, "🚨 Could not fetch authorization status for Health data: %@", v53, v66);
        destroyStorage<A>(_:count:)(v54, 1, v52);
        destroyStorage<A>(_:count:)(v55, 0, MEMORY[0x24BEE4AD8] + 8);
        MEMORY[0x24957D398](v53, MEMORY[0x24BEE4260]);
        swift_release();
        swift_release();
        swift_release();
      }
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
    }

    (*(void (**)(char *, uint64_t))(v105 + 8))(v108, v104);
    v50 = &v117;
    v117 = 0;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<Bool, Never>);
    CheckedContinuation.resume(returning:)();

  }
  else
  {
    v8 = v110;
    v81 = Logger.wellnessIntents.unsafeMutableAddressor();
    v82 = &v132;
    v88 = 32;
    swift_beginAccess();
    (*(void (**)(char *, uint64_t, uint64_t))(v105 + 16))(v8, v81, v104);
    swift_endAccess();
    v89 = 7;
    v90 = swift_allocObject();
    *(_QWORD *)(v90 + 16) = v102;
    v98 = Logger.logObject.getter();
    v99 = static os_log_type_t.debug.getter();
    v85 = &v130;
    v130 = 12;
    v83 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    v84 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    lazy protocol witness table accessor for type Int and conformance Int();
    UnsignedInteger<>.init<A>(_:)();
    v86 = v131;
    v87 = 17;
    v92 = swift_allocObject();
    *(_BYTE *)(v92 + 16) = 0;
    v93 = swift_allocObject();
    *(_BYTE *)(v93 + 16) = 8;
    v9 = swift_allocObject();
    v10 = v90;
    v91 = v9;
    *(_QWORD *)(v9 + 16) = partial apply for implicit closure #2 in closure #1 in closure #1 in isSiriAuthorizedToAccessHealthData(store:);
    *(_QWORD *)(v9 + 24) = v10;
    v11 = swift_allocObject();
    v12 = v91;
    v95 = v11;
    *(_QWORD *)(v11 + 16) = partial apply for thunk for @escaping @callee_guaranteed () -> (@unowned Int);
    *(_QWORD *)(v11 + 24) = v12;
    v97 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
    v94 = _allocateUninitializedArray<A>(_:)();
    v96 = v13;
    swift_retain();
    v14 = v92;
    v15 = v96;
    *v96 = partial apply for closure #1 in OSLogArguments.append(_:);
    v15[1] = v14;
    swift_retain();
    v16 = v93;
    v17 = v96;
    v96[2] = partial apply for closure #1 in OSLogArguments.append(_:);
    v17[3] = v16;
    swift_retain();
    v18 = v95;
    v19 = v96;
    v96[4] = partial apply for closure #1 in OSLogArguments.append<A>(_:);
    v19[5] = v18;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(v98, (os_log_type_t)v99))
    {
      v36 = v101;
      v43 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      v41 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      v42 = 0;
      v44 = createStorage<A>(capacity:type:)(0);
      v45 = createStorage<A>(capacity:type:)(v42);
      v46 = &v126;
      v126 = v43;
      v47 = &v125;
      v125 = v44;
      v48 = &v124;
      v124 = v45;
      serialize(_:at:)(0, &v126);
      serialize(_:at:)(1, v46);
      v122 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v123 = v92;
      closure #1 in osLogInternal(_:log:type:)(&v122, (uint64_t)v46, (uint64_t)v47, (uint64_t)v48);
      v49 = v36;
      if (v36)
      {
        __break(1u);
      }
      else
      {
        v122 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
        v123 = v93;
        closure #1 in osLogInternal(_:log:type:)(&v122, (uint64_t)&v126, (uint64_t)&v125, (uint64_t)&v124);
        v40 = 0;
        v122 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append<A>(_:);
        v123 = v95;
        closure #1 in osLogInternal(_:log:type:)(&v122, (uint64_t)&v126, (uint64_t)&v125, (uint64_t)&v124);
        _os_log_impl(&dword_24749F000, v98, (os_log_type_t)v99, "Siri authorization status to access Health data is: %ld", v43, v86);
        v39 = 0;
        destroyStorage<A>(_:count:)(v44, 0, v41);
        destroyStorage<A>(_:count:)(v45, v39, MEMORY[0x24BEE4AD8] + 8);
        MEMORY[0x24957D398](v43, MEMORY[0x24BEE4260]);
        swift_release();
        swift_release();
        swift_release();
      }
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
    }

    (*(void (**)(char *, uint64_t))(v105 + 8))(v110, v104);
    v38[2] = &v129;
    v129 = v102;
    v38[0] = &v128;
    v128 = 1;
    v38[1] = type metadata accessor for HKSiriAuthorizationStatus();
    lazy protocol witness table accessor for type HKSiriAuthorizationStatus and conformance HKSiriAuthorizationStatus();
    v37 = == infix<A>(_:_:)();
    v38[3] = &v127;
    v127 = v37 & 1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<Bool, Never>);
    CheckedContinuation.resume(returning:)();
  }
}

uint64_t sub_2475731C8()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<Bool, Never>)
                 - 8);
  (*(void (**)(unint64_t))(v1 + 8))(v0 + ((*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80)));
  return swift_deallocObject();
}

void partial apply for closure #1 in closure #1 in isSiriAuthorizedToAccessHealthData(store:)(uint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<Bool, Never>)
                                      - 8)
                          + 80);
  closure #1 in closure #1 in isSiriAuthorizedToAccessHealthData(store:)(a1, a2, v2 + ((v3 + 16) & ~v3));
}

void implicit closure #2 in closure #1 in closure #1 in isSiriAuthorizedToAccessHealthData(store:)()
{
  HKMedicationDoseEventStatus.rawValue.getter();
}

uint64_t thunk for @escaping @callee_guaranteed (@unowned HKSiriAuthorizationStatus, @guaranteed Error?) -> ()(uint64_t a1, uint64_t a2, void *a3)
{
  id v3;
  void *v5;
  void (*v7)(uint64_t);

  v7 = *(void (**)(uint64_t))(a1 + 32);
  swift_retain();
  v3 = a3;
  if (a3)
    v5 = a3;
  else
    v5 = 0;
  v7(a2);

  return swift_release();
}

uint64_t block_copy_helper_4(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a2 + 32);
  v5 = *(_QWORD *)(a2 + 40);
  swift_retain();
  result = a1;
  *(_QWORD *)(a1 + 32) = v4;
  *(_QWORD *)(a1 + 40) = v5;
  return result;
}

uint64_t block_destroy_helper_4()
{
  return swift_release();
}

uint64_t sub_2475733A0()
{
  return swift_deallocObject();
}

void partial apply for implicit closure #2 in closure #1 in closure #1 in isSiriAuthorizedToAccessHealthData(store:)()
{
  implicit closure #2 in closure #1 in closure #1 in isSiriAuthorizedToAccessHealthData(store:)();
}

uint64_t sub_2475733D0()
{
  return swift_deallocObject();
}

uint64_t sub_2475733F8()
{
  return swift_deallocObject();
}

uint64_t sub_247573420()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_24757345C()
{
  swift_release();
  return swift_deallocObject();
}

unint64_t lazy protocol witness table accessor for type HKSiriAuthorizationStatus and conformance HKSiriAuthorizationStatus()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type HKSiriAuthorizationStatus and conformance HKSiriAuthorizationStatus;
  if (!lazy protocol witness table cache variable for type HKSiriAuthorizationStatus and conformance HKSiriAuthorizationStatus)
  {
    v0 = type metadata accessor for HKSiriAuthorizationStatus();
    v1 = MEMORY[0x24957D92C](&protocol conformance descriptor for HKSiriAuthorizationStatus, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type HKSiriAuthorizationStatus and conformance HKSiriAuthorizationStatus);
    return v1;
  }
  return v3;
}

uint64_t sub_247573508()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t sub_247573544()
{
  return swift_deallocObject();
}

uint64_t sub_24757356C()
{
  return swift_deallocObject();
}

uint64_t sub_247573594()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2475735D0()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_24757360C()
{
  swift_release();
  return swift_deallocObject();
}

id GetSleepAnalysisIntent.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

id GetSleepAnalysisIntent.init()()
{
  id v0;
  id v2;
  objc_super v3;
  id v4;

  v4 = 0;
  v3.receiver = 0;
  v3.super_class = (Class)type metadata accessor for GetSleepAnalysisIntent();
  v2 = objc_msgSendSuper2(&v3, sel_init);
  v0 = v2;
  v4 = v2;

  return v2;
}

uint64_t type metadata accessor for GetSleepAnalysisIntent()
{
  return objc_opt_self();
}

id GetSleepAnalysisIntent.__allocating_init(coder:)(void *a1)
{
  objc_class *v1;
  id v4;

  v4 = objc_msgSend(objc_allocWithZone(v1), sel_initWithCoder_, a1);

  return v4;
}

id GetSleepAnalysisIntent.init(coder:)(void *a1)
{
  id v1;
  id v5;
  objc_super v6;
  void *v7;
  id v8;

  v8 = 0;
  v7 = a1;
  v6.receiver = 0;
  v6.super_class = (Class)type metadata accessor for GetSleepAnalysisIntent();
  v5 = objc_msgSendSuper2(&v6, sel_initWithCoder_, a1);
  if (v5)
  {
    v1 = v5;
    v8 = v5;

    return v5;
  }
  else
  {

    return 0;
  }
}

id GetSleepAnalysisIntent.__allocating_init(identifier:backingStore:)(uint64_t a1, uint64_t a2, void *a3)
{
  objc_class *v3;
  id v5;
  uint64_t v6;
  void *v7;
  id v11;

  v11 = objc_allocWithZone(v3);
  if (a2)
  {
    v6 = MEMORY[0x24957CFB4](a1);
    swift_bridgeObjectRelease();
    v7 = (void *)v6;
  }
  else
  {
    v7 = 0;
  }
  v5 = objc_msgSend(v11, sel_initWithIdentifier_backingStore_);

  return v5;
}

id GetSleepAnalysisIntent.init(identifier:backingStore:)(uint64_t a1, uint64_t a2, void *a3)
{
  id v3;
  id v5;
  uint64_t v6;
  void *v7;
  objc_super v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  id v15;

  v15 = 0;
  v13 = a1;
  v14 = a2;
  v12 = a3;
  swift_bridgeObjectRetain();
  if (a2)
  {
    v6 = MEMORY[0x24957CFB4](a1);
    swift_bridgeObjectRelease();
    v7 = (void *)v6;
  }
  else
  {
    v7 = 0;
  }
  v11.receiver = 0;
  v11.super_class = (Class)type metadata accessor for GetSleepAnalysisIntent();
  v5 = objc_msgSendSuper2(&v11, sel_initWithIdentifier_backingStore_, v7, a3);

  v3 = v5;
  v15 = v5;

  swift_bridgeObjectRelease();
  return v5;
}

id GetSleepAnalysisIntent.__allocating_init(domain:verb:parametersByName:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  objc_class *v5;
  id v6;
  id v8;
  id v9;
  Class isa;
  id v13;
  void *v16;
  void *v18;

  v13 = objc_allocWithZone(v5);
  v16 = (void *)MEMORY[0x24957CFB4](a1, a2);
  v18 = (void *)MEMORY[0x24957CFB4](a3, a4);
  if (a5)
  {
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    v6 = objc_msgSend(v13, sel_initWithDomain_verb_parametersByName_, v16, v18, isa);
  }
  else
  {
    v6 = objc_msgSend(v13, sel_initWithDomain_verb_parametersByName_, v16, v18, 0);
  }
  v9 = v6;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v9;
}

id GetSleepAnalysisIntent.init(domain:verb:parametersByName:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  id v5;
  id v7;
  Class isa;
  Class v9;
  id v12;
  void *v15;
  objc_super v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id v23;

  v23 = 0;
  v21 = a1;
  v22 = a2;
  v19 = a3;
  v20 = a4;
  v18 = a5;
  swift_bridgeObjectRetain();
  v12 = (id)MEMORY[0x24957CFB4](a1, a2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v15 = (void *)MEMORY[0x24957CFB4](a3, a4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  if (a5)
  {
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    v9 = isa;
  }
  else
  {
    v9 = 0;
  }
  v17.receiver = 0;
  v17.super_class = (Class)type metadata accessor for GetSleepAnalysisIntent();
  v7 = objc_msgSendSuper2(&v17, sel_initWithDomain_verb_parametersByName_, v12, v15, v9);

  v5 = v7;
  v23 = v7;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return v7;
}

id GetSleepAnalysisIntent.__deallocating_deinit()
{
  void *v0;
  objc_super v2;
  void *v3;

  v3 = v0;
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for GetSleepAnalysisIntent();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t GetSleepAnalysisIntentResponseCode.init(rawValue:)(uint64_t a1)
{
  switch(a1)
  {
    case 0:
      return 0;
    case 1:
      return 1;
    case 2:
      return 2;
    case 3:
      return 3;
    case 4:
      return 4;
    case 5:
      return 5;
    case 6:
      return 6;
    case 100:
      return 100;
    case 101:
      return 101;
    case 102:
      return 102;
    case 103:
      return 103;
  }
  return 0;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance GetSleepAnalysisIntentResponseCode()
{
  lazy protocol witness table accessor for type GetSleepAnalysisIntentResponseCode and conformance GetSleepAnalysisIntentResponseCode();
  return == infix<A>(_:_:)() & 1;
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance GetSleepAnalysisIntentResponseCode()
{
  lazy protocol witness table accessor for type GetSleepAnalysisIntentResponseCode and conformance GetSleepAnalysisIntentResponseCode();
  return RawRepresentable<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance GetSleepAnalysisIntentResponseCode()
{
  lazy protocol witness table accessor for type GetSleepAnalysisIntentResponseCode and conformance GetSleepAnalysisIntentResponseCode();
  return RawRepresentable<>.hash(into:)();
}

uint64_t protocol witness for Hashable._rawHashValue(seed:) in conformance GetSleepAnalysisIntentResponseCode()
{
  lazy protocol witness table accessor for type GetSleepAnalysisIntentResponseCode and conformance GetSleepAnalysisIntentResponseCode();
  return RawRepresentable<>._rawHashValue(seed:)();
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance GetSleepAnalysisIntentResponseCode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  char v3;

  result = GetSleepAnalysisIntentResponseCode.init(rawValue:)(*a1);
  *(_QWORD *)a2 = result;
  *(_BYTE *)(a2 + 8) = v3 & 1;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance GetSleepAnalysisIntentResponseCode(_QWORD *a1@<X8>)
{
  uint64_t v1;

  GetSleepAnalysisIntentResponseCode.rawValue.getter();
  *a1 = v1;
}

uint64_t GetSleepAnalysisIntentResponse.code.getter()
{
  uint64_t v0;
  uint64_t *v2;
  uint64_t v3;

  v2 = (uint64_t *)(v0 + OBJC_IVAR___GetSleepAnalysisIntentResponse_code);
  swift_beginAccess();
  v3 = *v2;
  swift_endAccess();
  return v3;
}

uint64_t GetSleepAnalysisIntentResponse.code.setter(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)(v1 + OBJC_IVAR___GetSleepAnalysisIntentResponse_code);
  swift_beginAccess();
  *v3 = a1;
  return swift_endAccess();
}

uint64_t (*GetSleepAnalysisIntentResponse.code.modify())()
{
  swift_beginAccess();
  return LogQuantityIntentResponse.code.modify;
}

void key path getter for GetSleepAnalysisIntentResponse.code : GetSleepAnalysisIntentResponse(id *a1@<X0>, uint64_t *a2@<X8>)
{
  id v2;
  id v3;

  v3 = *a1;
  v2 = *a1;
  *a2 = GetSleepAnalysisIntentResponse.code.getter();

}

void key path setter for GetSleepAnalysisIntentResponse.code : GetSleepAnalysisIntentResponse(uint64_t *a1, id *a2)
{
  id v2;
  id v3;
  uint64_t v4;

  v4 = *a1;
  v3 = *a2;
  v2 = *a2;
  GetSleepAnalysisIntentResponse.code.setter(v4);

}

char *GetSleepAnalysisIntentResponse.__allocating_init(code:userActivity:)(uint64_t a1, void *a2)
{
  objc_class *v2;
  id v3;

  v3 = objc_allocWithZone(v2);
  return GetSleepAnalysisIntentResponse.init(code:userActivity:)(a1, a2);
}

char *GetSleepAnalysisIntentResponse.init(code:userActivity:)(uint64_t a1, void *a2)
{
  char *v2;
  char *v3;
  char *v4;
  char *v6;
  char *v9;
  void *v10;

  v9 = (char *)objc_msgSend(v10, sel_init);
  v2 = v9;
  v3 = v9;
  v4 = v9;
  v6 = &v9[OBJC_IVAR___GetSleepAnalysisIntentResponse_code];
  swift_beginAccess();
  *(_QWORD *)v6 = a1;
  swift_endAccess();

  objc_msgSend(v9, sel_setUserActivity_, a2);
  return v9;
}

id GetSleepAnalysisIntentResponse.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

id GetSleepAnalysisIntentResponse.init()()
{
  char *v0;
  char *v1;
  id v2;
  id v4;
  objc_super v5;
  void *v6;

  v1 = v0;
  v6 = v0;
  *(_QWORD *)&v0[OBJC_IVAR___GetSleepAnalysisIntentResponse_code] = 0;

  v5.receiver = v6;
  v5.super_class = (Class)type metadata accessor for GetSleepAnalysisIntentResponse();
  v4 = objc_msgSendSuper2(&v5, sel_init);
  v2 = v4;
  v6 = v4;

  return v4;
}

uint64_t type metadata accessor for GetSleepAnalysisIntentResponse()
{
  return objc_opt_self();
}

id GetSleepAnalysisIntentResponse.__allocating_init(coder:)(void *a1)
{
  objc_class *v1;
  id v4;

  v4 = objc_msgSend(objc_allocWithZone(v1), sel_initWithCoder_, a1);

  return v4;
}

id GetSleepAnalysisIntentResponse.init(coder:)(void *a1)
{
  char *v1;
  char *v2;
  id v3;
  id v7;
  objc_super v8;
  void *v9;
  id v10;

  v9 = a1;
  v2 = v1;
  v10 = v1;
  *(_QWORD *)&v1[OBJC_IVAR___GetSleepAnalysisIntentResponse_code] = 0;

  v8.receiver = v10;
  v8.super_class = (Class)type metadata accessor for GetSleepAnalysisIntentResponse();
  v7 = objc_msgSendSuper2(&v8, sel_initWithCoder_, a1);
  if (v7)
  {
    v3 = v7;
    v10 = v7;

    return v7;
  }
  else
  {

    return 0;
  }
}

id GetSleepAnalysisIntentResponse.__allocating_init(backingStore:)(void *a1)
{
  objc_class *v1;
  id v4;

  v4 = objc_msgSend(objc_allocWithZone(v1), sel_initWithBackingStore_, a1);

  return v4;
}

id GetSleepAnalysisIntentResponse.init(backingStore:)(void *a1)
{
  char *v1;
  char *v2;
  id v3;
  id v7;
  objc_super v8;
  void *v9;
  id v10;

  v9 = a1;
  v2 = v1;
  v10 = v1;
  *(_QWORD *)&v1[OBJC_IVAR___GetSleepAnalysisIntentResponse_code] = 0;

  v8.receiver = v10;
  v8.super_class = (Class)type metadata accessor for GetSleepAnalysisIntentResponse();
  v7 = objc_msgSendSuper2(&v8, sel_initWithBackingStore_, a1);
  if (v7)
  {
    v3 = v7;
    v10 = v7;

    return v7;
  }
  else
  {

    return 0;
  }
}

id GetSleepAnalysisIntentResponse.__allocating_init(propertiesByName:)(uint64_t a1)
{
  objc_class *v1;
  id v2;
  id v4;
  id v5;
  Class isa;
  id v8;

  v8 = objc_allocWithZone(v1);
  if (a1)
  {
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    v2 = objc_msgSend(v8, sel_initWithPropertiesByName_, isa);
  }
  else
  {
    v2 = objc_msgSend(v8, sel_initWithPropertiesByName_, 0);
  }
  v5 = v2;

  return v5;
}

id GetSleepAnalysisIntentResponse.init(propertiesByName:)(uint64_t a1)
{
  char *v1;
  char *v2;
  id v3;
  id v6;
  Class isa;
  Class v8;
  objc_super v10;
  uint64_t v11;
  id v12;

  v11 = a1;
  v2 = v1;
  v12 = v1;
  *(_QWORD *)&v1[OBJC_IVAR___GetSleepAnalysisIntentResponse_code] = 0;

  swift_bridgeObjectRetain();
  if (a1)
  {
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    v8 = isa;
  }
  else
  {
    v8 = 0;
  }
  v10.receiver = v12;
  v10.super_class = (Class)type metadata accessor for GetSleepAnalysisIntentResponse();
  v6 = objc_msgSendSuper2(&v10, sel_initWithPropertiesByName_, v8);

  if (v6)
  {
    v3 = v6;
    v12 = v6;
    swift_bridgeObjectRelease();

    return v6;
  }
  else
  {

    swift_bridgeObjectRelease();
    return 0;
  }
}

id GetSleepAnalysisIntentResponse.__deallocating_deinit()
{
  void *v0;
  objc_super v2;
  void *v3;

  v3 = v0;
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for GetSleepAnalysisIntentResponse();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

unint64_t base witness table accessor for Equatable in GetSleepAnalysisIntentResponseCode()
{
  return lazy protocol witness table accessor for type GetSleepAnalysisIntentResponseCode and conformance GetSleepAnalysisIntentResponseCode();
}

unint64_t lazy protocol witness table accessor for type GetSleepAnalysisIntentResponseCode and conformance GetSleepAnalysisIntentResponseCode()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GetSleepAnalysisIntentResponseCode and conformance GetSleepAnalysisIntentResponseCode;
  if (!lazy protocol witness table cache variable for type GetSleepAnalysisIntentResponseCode and conformance GetSleepAnalysisIntentResponseCode)
  {
    v0 = MEMORY[0x24957D92C](&protocol conformance descriptor for GetSleepAnalysisIntentResponseCode, &type metadata for GetSleepAnalysisIntentResponseCode);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GetSleepAnalysisIntentResponseCode and conformance GetSleepAnalysisIntentResponseCode);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GetSleepAnalysisIntentResponseCode and conformance GetSleepAnalysisIntentResponseCode;
  if (!lazy protocol witness table cache variable for type GetSleepAnalysisIntentResponseCode and conformance GetSleepAnalysisIntentResponseCode)
  {
    v0 = MEMORY[0x24957D92C](&protocol conformance descriptor for GetSleepAnalysisIntentResponseCode, &type metadata for GetSleepAnalysisIntentResponseCode);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GetSleepAnalysisIntentResponseCode and conformance GetSleepAnalysisIntentResponseCode);
    return v0;
  }
  return v2;
}

void sub_247574E30(id *a1@<X0>, uint64_t *a2@<X8>)
{
  key path getter for GetSleepAnalysisIntentResponse.code : GetSleepAnalysisIntentResponse(a1, a2);
}

void sub_247574E44(uint64_t *a1, id *a2)
{
  key path setter for GetSleepAnalysisIntentResponse.code : GetSleepAnalysisIntentResponse(a1, a2);
}

ValueMetadata *type metadata accessor for GetSleepAnalysisIntentResponseCode()
{
  return &type metadata for GetSleepAnalysisIntentResponseCode;
}

id GetSleepAnalysisIntentHandler.__allocating_init(store:)(_QWORD *a1)
{
  objc_class *v1;
  id v2;

  v2 = objc_allocWithZone(v1);
  return GetSleepAnalysisIntentHandler.init(store:)(a1);
}

id GetSleepAnalysisIntentHandler.init(store:)(_QWORD *a1)
{
  void *v1;
  id v2;
  SiriWellnessIntents::CycleTrackingFetcher v3;
  id v4;
  id v6;
  char *v7;
  objc_class *ObjectType;
  objc_super v10;
  _QWORD v11[5];
  _QWORD __dst[6];
  id v13;

  ObjectType = (objc_class *)swift_getObjectType();
  __dst[5] = a1;
  v2 = v1;
  v13 = v1;
  outlined init with copy of QuantityPersisting?(a1, v11);
  if (v11[3])
  {
    outlined init with take of QuantityPersisting(v11, __dst);
  }
  else
  {
    v3.store.super.isa = CycleTrackingFetcher.init()().store.super.isa;
    __dst[3] = &type metadata for SleepAnalysisFetcher;
    __dst[4] = &protocol witness table for SleepAnalysisFetcher;
    __dst[0] = v3.store.super.isa;
    outlined destroy of QuantityPersisting?((uint64_t)v11);
  }
  outlined init with take of QuantityPersisting(__dst, &v7[OBJC_IVAR____TtC19SiriWellnessIntents29GetSleepAnalysisIntentHandler_store]);

  v10.receiver = v13;
  v10.super_class = ObjectType;
  v6 = objc_msgSendSuper2(&v10, sel_init);
  v4 = v6;
  v13 = v6;
  outlined destroy of QuantityPersisting?((uint64_t)a1);

  return v6;
}

uint64_t GetSleepAnalysisIntentHandler.handle(intent:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v2[28] = v1;
  v2[27] = a1;
  v2[18] = v2;
  v2[19] = 0;
  v2[20] = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  v2[29] = swift_task_alloc();
  v2[30] = swift_task_alloc();
  v3 = type metadata accessor for Date();
  v2[31] = v3;
  v2[32] = *(_QWORD *)(v3 - 8);
  v2[33] = swift_task_alloc();
  v2[34] = swift_task_alloc();
  v2[35] = swift_task_alloc();
  v4 = type metadata accessor for Logger();
  v2[36] = v4;
  v2[37] = *(_QWORD *)(v4 - 8);
  v2[38] = swift_task_alloc();
  v2[39] = swift_task_alloc();
  v2[19] = a1;
  v2[20] = v1;
  return swift_task_switch();
}

{
  uint64_t *v1;
  uint64_t v3;

  v3 = *v1;
  *(_QWORD *)(v3 + 144) = *v1;
  *(_QWORD *)(v3 + 392) = a1;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t GetSleepAnalysisIntentHandler.handle(intent:)()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t, uint64_t, uint64_t);
  id v3;
  _QWORD *v4;
  void (*v5)(uint64_t, uint64_t);
  _QWORD *v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint8_t *buf;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  uint32_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  NSObject *v31;
  os_log_type_t v32;
  uint8_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t (*v36)(uint64_t, uint64_t, uint64_t);
  uint64_t v37;

  v1 = *(_QWORD *)(v0 + 312);
  v20 = *(_QWORD *)(v0 + 296);
  v22 = *(_QWORD *)(v0 + 288);
  v23 = *(id *)(v0 + 216);
  *(_QWORD *)(v0 + 144) = v0;
  v21 = Logger.wellnessIntents.unsafeMutableAddressor();
  swift_beginAccess();
  v2 = *(void (**)(uint64_t, uint64_t, uint64_t))(v20 + 16);
  *(_QWORD *)(v0 + 320) = v2;
  v2(v1, v21, v22);
  swift_endAccess();
  v3 = v23;
  v25 = swift_allocObject();
  *(_QWORD *)(v25 + 16) = v23;
  v31 = Logger.logObject.getter();
  v32 = static os_log_type_t.debug.getter();
  *(_QWORD *)(v0 + 168) = 12;
  *(_QWORD *)(v0 + 328) = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  *(_QWORD *)(v0 + 336) = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  *(_QWORD *)(v0 + 344) = lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  v24 = *(_DWORD *)(v0 + 400);
  v27 = swift_allocObject();
  *(_BYTE *)(v27 + 16) = 64;
  v28 = swift_allocObject();
  *(_BYTE *)(v28 + 16) = 8;
  v26 = swift_allocObject();
  *(_QWORD *)(v26 + 16) = partial apply for implicit closure #3 in LogQuantityIntentHandler.handle(intent:);
  *(_QWORD *)(v26 + 24) = v25;
  v29 = swift_allocObject();
  *(_QWORD *)(v29 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:);
  *(_QWORD *)(v29 + 24) = v26;
  *(_QWORD *)(v0 + 352) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
  _allocateUninitializedArray<A>(_:)();
  v30 = v4;
  swift_retain();
  *v30 = partial apply for closure #1 in OSLogArguments.append(_:);
  v30[1] = v27;
  swift_retain();
  v30[2] = partial apply for closure #1 in OSLogArguments.append(_:);
  v30[3] = v28;
  swift_retain();
  v30[4] = partial apply for closure #1 in OSLogArguments.append(_:);
  v30[5] = v29;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(v31, v32))
  {
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    v17 = createStorage<A>(capacity:type:)(1);
    v18 = createStorage<A>(capacity:type:)(0);
    v33 = buf;
    v34 = v17;
    v35 = v18;
    serialize(_:at:)(2, &v33);
    serialize(_:at:)(1, &v33);
    v36 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v37 = v27;
    closure #1 in osLogInternal(_:log:type:)(&v36, (uint64_t)&v33, (uint64_t)&v34, (uint64_t)&v35);
    v36 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v37 = v28;
    closure #1 in osLogInternal(_:log:type:)(&v36, (uint64_t)&v33, (uint64_t)&v34, (uint64_t)&v35);
    v36 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v37 = v29;
    closure #1 in osLogInternal(_:log:type:)(&v36, (uint64_t)&v33, (uint64_t)&v34, (uint64_t)&v35);
    _os_log_impl(&dword_24749F000, v31, v32, "Handling %@", buf, v24);
    destroyStorage<A>(_:count:)(v17, 1, v15);
    destroyStorage<A>(_:count:)(v18, 0, MEMORY[0x24BEE4AD8] + 8);
    MEMORY[0x24957D398](buf, MEMORY[0x24BEE4260]);
    swift_release();
    swift_release();
    swift_release();
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
  }
  v19[45] = 0;
  v9 = v19[39];
  v8 = v19[37];
  v10 = v19[36];
  v11 = v19[28];

  v5 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  v19[46] = v5;
  v5(v9, v10);
  outlined init with copy of QuantityPersisting(v11 + OBJC_IVAR____TtC19SiriWellnessIntents29GetSleepAnalysisIntentHandler_store, (uint64_t)(v19 + 2));
  v14 = v19[5];
  v12 = v19[6];
  __swift_project_boxed_opaque_existential_1(v19 + 2, v14);
  v13 = (uint64_t (*)(uint64_t, uint64_t))(*(_QWORD *)(v12 + 8) + **(int **)(v12 + 8));
  v6 = (_QWORD *)swift_task_alloc();
  v19[47] = v6;
  *v6 = v19[18];
  v6[1] = GetSleepAnalysisIntentHandler.handle(intent:);
  return v13(v14, v12);
}

{
  uint64_t v0;
  _QWORD *v1;
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t);
  uint64_t v8;
  uint8_t *buf;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t, uint64_t);
  uint32_t size;
  os_log_type_t v17;
  NSObject *oslog;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(_QWORD, _QWORD, uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(uint64_t, uint64_t, uint64_t);
  void *v32;
  id v33;
  unsigned int (*v34)(_QWORD, uint64_t, _QWORD);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  id v39;
  char *v40;
  uint64_t v41;
  char v42;

  v42 = *(_BYTE *)(v0 + 408);
  *(_QWORD *)(v0 + 144) = v0;
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  if ((v42 & 1) == 0)
  {
    type metadata accessor for GetSleepAnalysisIntentResponse();
    v40 = GetSleepAnalysisIntentResponse.__allocating_init(code:userActivity:)(101, 0);
LABEL_20:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(char *))(*(_QWORD *)(v41 + 144) + 8))(v40);
  }
  v39 = objc_msgSend(*(id *)(v41 + 216), sel_start);
  if (v39)
  {
    v35 = *(_QWORD *)(v41 + 272);
    v36 = *(_QWORD *)(v41 + 256);
    v37 = *(_QWORD *)(v41 + 248);
    v38 = *(_QWORD *)(v41 + 240);
    static Date._unconditionallyBridgeFromObjectiveC(_:)();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v36 + 32))(v38, v35, v37);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v36 + 56))(v38, 0, 1, v37);

  }
  else
  {
    (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v41 + 256) + 56))(*(_QWORD *)(v41 + 240), 1, 1, *(_QWORD *)(v41 + 248));
  }
  v34 = *(unsigned int (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)(v41 + 256) + 48);
  if (v34(*(_QWORD *)(v41 + 240), 1, *(_QWORD *)(v41 + 248)) == 1)
  {
    outlined destroy of Date?(*(_QWORD *)(v41 + 240));
  }
  else
  {
    v32 = *(void **)(v41 + 216);
    v31 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v41 + 256) + 32);
    v31(*(_QWORD *)(v41 + 280), *(_QWORD *)(v41 + 240), *(_QWORD *)(v41 + 248));
    v33 = objc_msgSend(v32, sel_end);
    if (v33)
    {
      v27 = *(_QWORD *)(v41 + 272);
      v28 = *(_QWORD *)(v41 + 256);
      v29 = *(_QWORD *)(v41 + 248);
      v30 = *(_QWORD *)(v41 + 232);
      static Date._unconditionallyBridgeFromObjectiveC(_:)();
      v31(v30, v27, v29);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v28 + 56))(v30, 0, 1, v29);

    }
    else
    {
      (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v41 + 256) + 56))(*(_QWORD *)(v41 + 232), 1, 1, *(_QWORD *)(v41 + 248));
    }
    if (v34(*(_QWORD *)(v41 + 232), 1, *(_QWORD *)(v41 + 248)) != 1)
    {
      v20 = *(_QWORD *)(v41 + 224);
      v31(*(_QWORD *)(v41 + 264), *(_QWORD *)(v41 + 232), *(_QWORD *)(v41 + 248));
      outlined init with copy of QuantityPersisting(v20 + OBJC_IVAR____TtC19SiriWellnessIntents29GetSleepAnalysisIntentHandler_store, v41 + 56);
      v21 = *(_QWORD *)(v41 + 80);
      v22 = *(_QWORD *)(v41 + 88);
      __swift_project_boxed_opaque_existential_1((_QWORD *)(v41 + 56), v21);
      v23 = (uint64_t (*)(_QWORD, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v22 + 16) + **(int **)(v22 + 16));
      v1 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v41 + 384) = v1;
      *v1 = *(_QWORD *)(v41 + 144);
      v1[1] = GetSleepAnalysisIntentHandler.handle(intent:);
      return v23(*(_QWORD *)(v41 + 280), *(_QWORD *)(v41 + 264), v21, v22);
    }
    v26 = *(_QWORD *)(v41 + 280);
    v24 = *(_QWORD *)(v41 + 256);
    v25 = *(_QWORD *)(v41 + 248);
    outlined destroy of Date?(*(_QWORD *)(v41 + 232));
    (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v26, v25);
  }
  v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(v41 + 320);
  v3 = *(_QWORD *)(v41 + 304);
  v14 = *(_QWORD *)(v41 + 288);
  v13 = Logger.wellnessIntents.unsafeMutableAddressor();
  swift_beginAccess();
  v15(v3, v13, v14);
  swift_endAccess();
  oslog = Logger.logObject.getter();
  v17 = static os_log_type_t.error.getter();
  *(_QWORD *)(v41 + 176) = 2;
  UnsignedInteger<>.init<A>(_:)();
  size = *(_DWORD *)(v41 + 404);
  v19 = _allocateUninitializedArray<A>(_:)();
  if (!os_log_type_enabled(oslog, v17))
  {
    swift_bridgeObjectRelease();
    goto LABEL_19;
  }
  v4 = *(_QWORD *)(v41 + 360);
  buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
  v10 = createStorage<A>(capacity:type:)(0);
  v11 = createStorage<A>(capacity:type:)(0);
  *(_QWORD *)(v41 + 184) = buf;
  *(_QWORD *)(v41 + 192) = v10;
  *(_QWORD *)(v41 + 200) = v11;
  serialize(_:at:)(0, (_BYTE **)(v41 + 184));
  serialize(_:at:)(0, (_BYTE **)(v41 + 184));
  *(_QWORD *)(v41 + 208) = v19;
  v12 = (_QWORD *)swift_task_alloc();
  v12[2] = v41 + 184;
  v12[3] = v41 + 192;
  v12[4] = v41 + 200;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
  lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
  result = Sequence.forEach(_:)();
  if (!v4)
  {
    swift_task_dealloc();
    _os_log_impl(&dword_24749F000, oslog, v17, "Must provide a start and end Date for querying sleep", buf, size);
    destroyStorage<A>(_:count:)(v10, 0, v8);
    destroyStorage<A>(_:count:)(v11, 0, MEMORY[0x24BEE4AD8] + 8);
    MEMORY[0x24957D398](buf, MEMORY[0x24BEE4260]);
    swift_bridgeObjectRelease();
LABEL_19:
    v7 = *(void (**)(uint64_t, uint64_t))(v41 + 368);
    v5 = *(_QWORD *)(v41 + 304);
    v6 = *(_QWORD *)(v41 + 288);

    v7(v5, v6);
    type metadata accessor for GetSleepAnalysisIntentResponse();
    v40 = GetSleepAnalysisIntentResponse.__allocating_init(code:userActivity:)(5, 0);
    goto LABEL_20;
  }
  return result;
}

{
  _QWORD *v0;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  uint64_t v7;

  v4 = v0[35];
  v3 = v0[33];
  v2 = v0[32];
  v5 = v0[31];
  v0[18] = v0;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 7));
  v6 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  v6(v3, v5);
  v6(v4, v5);
  v7 = v0[49];
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(v0[18] + 8))(v7);
}

uint64_t GetSleepAnalysisIntentHandler.handle(intent:)(char a1)
{
  uint64_t *v1;
  uint64_t v3;

  v3 = *v1;
  *(_QWORD *)(v3 + 144) = *v1;
  *(_BYTE *)(v3 + 408) = a1;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_2475761E4()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t @objc closure #1 in GetSleepAnalysisIntentHandler.handle(intent:)(void *a1, const void *a2, void *a3)
{
  _QWORD *v3;
  id v5;
  id v6;
  _QWORD *v7;
  uint64_t v10;

  v3[4] = a3;
  v3[3] = a1;
  v3[2] = v3;
  v5 = a1;
  v3[5] = _Block_copy(a2);
  v6 = a3;
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v10 + 48) = v7;
  *v7 = *(_QWORD *)(v10 + 16);
  v7[1] = @objc closure #1 in LogQuantityIntentHandler.handle(intent:);
  return GetSleepAnalysisIntentHandler.handle(intent:)((uint64_t)a1);
}

id GetSleepAnalysisIntentHandler.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

uint64_t GetSleepAnalysisIntentHandler.init()()
{
  uint64_t result;
  uint64_t v1;

  if (!"SiriWellnessIntents.GetSleepAnalysisIntentHandler")
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  result = closure #1 in _unimplementedInitializer(className:initName:file:line:column:)((uint64_t)"SiriWellnessIntents.GetSleepAnalysisIntentHandler", 49, (unint64_t)"init()", 6, 2, (unint64_t)"SiriWellnessIntents/GetSleepAnalysisIntentHandler.swift", 55, 2, v1, 0xFuLL, 0x14uLL);
  __break(1u);
  return result;
}

id GetSleepAnalysisIntentHandler.__deallocating_deinit()
{
  void *v0;
  objc_super v2;
  void *v3;

  v3 = v0;
  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

id SleepAnalysisFetcher.morningIndexRange(for:duration:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[2];
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  Class v17;
  Class isa;
  id v19;
  uint64_t v20;
  id v21;
  Class v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v9 = a1;
  v20 = a2;
  v10 = a3;
  v25 = 0;
  v24 = 0;
  v23 = 0;
  v22 = 0;
  v21 = 0;
  v7[1] = 0;
  v15 = type metadata accessor for Calendar();
  v14 = *(_QWORD *)(v15 - 8);
  v8 = (*(_QWORD *)(v14 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](0);
  v16 = (char *)v7 - v8;
  v12 = type metadata accessor for Date();
  v11 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v13 = (char *)v7 - v3;
  v25 = v4;
  v24 = v20;
  v23 = v10;
  (*(void (**)(char *))(v5 + 16))((char *)v7 - v3);
  isa = Date._bridgeToObjectiveC()().super.isa;
  v22 = isa;
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v12);
  static Calendar.autoupdatingCurrent.getter();
  v17 = Calendar._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v15);
  v19 = -[objc_class hk_morningIndexWithCalendar:](isa, sel_hk_morningIndexWithCalendar_, v17);

  v21 = v19;
  return v19;
}

Swift::Double __swiftcall SleepAnalysisFetcher.roundToMinute(_:)(Swift::Double a1)
{
  uint64_t v1;
  double v2;
  uint64_t v3;
  double v5[2];
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  double v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  _DWORD *v15;
  int v16;
  double v17;
  uint64_t v18;
  double v19;

  v5[1] = a1;
  v9 = v1;
  v19 = 0.0;
  v18 = 0;
  v13 = type metadata accessor for FloatingPointRoundingRule();
  v12 = *(_QWORD *)(v13 - 8);
  v7 = *(_QWORD *)(v12 + 64);
  v6 = (v7 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v13);
  v14 = (char *)v5 - v6;
  v8 = v6;
  v2 = MEMORY[0x24BDAC7A8]((char *)v5 - v6);
  v11 = (char *)v5 - v8;
  v19 = v2;
  v18 = v9;
  v10 = v2 / 60.0;
  v15 = (_DWORD *)MEMORY[0x24BEE38D0];
  (*(void (**)(void))(v3 + 104))();
  v17 = v10;
  (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v14, v11, v13);
  v16 = (*(uint64_t (**)(char *, uint64_t))(v12 + 88))(v14, v13);
  if (v16 == *v15)
  {
    v17 = round(v10);
    goto LABEL_15;
  }
  if (v16 == *MEMORY[0x24BEE38C8])
  {
    v17 = rint(v10);
    goto LABEL_15;
  }
  if (v16 == *MEMORY[0x24BEE38E0])
  {
LABEL_12:
    v17 = ceil(v10);
    goto LABEL_15;
  }
  if (v16 == *MEMORY[0x24BEE38E8])
  {
LABEL_14:
    v17 = floor(v10);
    goto LABEL_15;
  }
  if (v16 == *MEMORY[0x24BEE38B8])
  {
    v17 = trunc(v10);
    goto LABEL_15;
  }
  if (v16 == *MEMORY[0x24BEE38C0])
  {
    if ((Double.sign.getter() & 1) == 0)
      goto LABEL_12;
    goto LABEL_14;
  }
  Double._roundSlowPath(_:)();
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v13);
LABEL_15:
  v5[0] = v17;
  (*(void (**)(char *, uint64_t))(v12 + 8))(v11, v13);
  return v5[0] * 60.0;
}

uint64_t SleepAnalysisFetcher.query(start:end:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3[12] = a3;
  v3[11] = a2;
  v3[10] = a1;
  v3[4] = v3;
  v3[5] = 0;
  v3[6] = 0;
  v3[7] = 0;
  v3[8] = 0;
  v3[2] = 0;
  v3[3] = 0;
  v4 = type metadata accessor for Calendar();
  v3[13] = v4;
  v3[14] = *(_QWORD *)(v4 - 8);
  v3[15] = swift_task_alloc();
  v5 = type metadata accessor for DateComponents();
  v3[16] = v5;
  v3[17] = *(_QWORD *)(v5 - 8);
  v3[18] = swift_task_alloc();
  v3[5] = a1;
  v3[6] = a2;
  v3[7] = a3;
  return swift_task_switch();
}

uint64_t SleepAnalysisFetcher.query(start:end:)()
{
  _QWORD *v0;
  uint64_t v1;
  char v2;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  _QWORD *v9;
  id v10;
  uint64_t v11;
  id v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;

  v21 = v0[18];
  v20 = v0[17];
  v22 = v0[16];
  v18 = v0[15];
  v17 = v0[14];
  v19 = v0[13];
  v0[4] = v0;
  static Calendar.current.getter();
  v16 = type metadata accessor for Calendar.Component();
  _allocateUninitializedArray<A>(_:)();
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v16 - 8) + 104))(v1, *MEMORY[0x24BDCF220]);
  _finalizeUninitializedArray<A>(_:)();
  lazy protocol witness table accessor for type Calendar.Component and conformance Calendar.Component();
  Set.init(arrayLiteral:)();
  Calendar.dateComponents(_:from:to:)();
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v18, v19);
  v23 = DateComponents.day.getter();
  v24 = v2;
  (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v21, v22);
  result = v23;
  if ((v24 & 1) != 0)
    v25 = 0;
  else
    v25 = v23;
  v14 = v25 + 1;
  if (__OFADD__(v25, 1))
  {
    __break(1u);
  }
  else
  {
    v5 = v15[12];
    v12 = (id)v5;
    v6 = v15[10];
    v15[8] = v14;
    v10 = SleepAnalysisFetcher.morningIndexRange(for:duration:)(v6, v14, v5);
    v11 = v7;
    v15[2] = v10;
    v15[3] = v7;
    v15[19] = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("query(start:end:)", 0x11uLL, 1)._object;
    v8 = v12;
    v13 = (_QWORD *)swift_task_alloc();
    v15[20] = v13;
    v13[2] = v10;
    v13[3] = v11;
    v13[4] = v12;
    v9 = (_QWORD *)swift_task_alloc();
    v15[21] = v9;
    type metadata accessor for GetSleepAnalysisIntentResponse();
    *v9 = v15[4];
    v9[1] = SleepAnalysisFetcher.query(start:end:);
    return withCheckedContinuation<A>(isolation:function:_:)();
  }
  return result;
}

{
  uint64_t v0;
  void *v2;

  v2 = *(void **)(*(_QWORD *)v0 + 96);
  *(_QWORD *)(*(_QWORD *)v0 + 32) = *(_QWORD *)v0;
  swift_task_dealloc();
  swift_task_dealloc();

  swift_bridgeObjectRelease();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v2;

  *(_QWORD *)(v0 + 32) = v0;
  v2 = *(_QWORD *)(v0 + 72);
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v0 + 32) + 8))(v2);
}

void closure #1 in SleepAnalysisFetcher.query(start:end:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  _QWORD v17[4];
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  id v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v18 = a1;
  v29 = a2;
  v25 = a3;
  v30 = a4;
  v37 = 0;
  v35 = 0;
  v36 = 0;
  v34 = 0;
  v32 = 0;
  v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<GetSleepAnalysisIntentResponse, Never>);
  v20 = *(_QWORD *)(v23 - 8);
  v19 = *(_QWORD *)(v20 + 64);
  v17[0] = (v19 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v18);
  v22 = (char *)v17 - v17[0];
  v37 = v4;
  v35 = v5;
  v36 = v6;
  v34 = v7;
  v17[1] = 0;
  v17[3] = type metadata accessor for HKSleepDaySummaryQuery();
  v26 = 0;
  type metadata accessor for HKSleepDaySummaryQueryOptions();
  v8 = _allocateUninitializedArray<A>(_:)();
  *v9 = 2;
  _finalizeUninitializedArray<A>(_:)();
  v17[2] = v8;
  lazy protocol witness table accessor for type HKSleepDaySummaryQueryOptions and conformance HKSleepDaySummaryQueryOptions();
  SetAlgebra<>.init(arrayLiteral:)();
  v27 = v33;
  (*(void (**)(char *, uint64_t, uint64_t))(v20 + 16))(v22, v18, v23);
  v10 = v30;
  v21 = (*(unsigned __int8 *)(v20 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v20 + 80);
  v24 = (v21 + v19 + 7) & 0xFFFFFFFFFFFFFFF8;
  v28 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v20 + 32))(v28 + v21, v22, v23);
  v11 = v25;
  v12 = v26;
  v13 = v27;
  v14 = v28;
  v15 = v29;
  *(_QWORD *)(v28 + v24) = v30;
  v31 = HKSleepDaySummaryQuery.__allocating_init(morningIndexRange:ascending:limit:options:resultsHandler:)(v15, v11, 1, v12, v13, (uint64_t)partial apply for closure #1 in closure #1 in SleepAnalysisFetcher.query(start:end:), v14);
  v32 = v31;
  v16 = v30;
  objc_msgSend(v30, sel_executeQuery_, v31);

}

void closure #1 in closure #1 in SleepAnalysisFetcher.query(start:end:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  char *v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  char *v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  Swift::Double v54;
  uint64_t v55;
  Swift::Double v56;
  double v57;
  double v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t *v77;
  void **v78;
  void *v79;
  char *v80;
  void *v81[2];
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint8_t *v85;
  uint64_t v86;
  uint64_t v87;
  unsigned int v88;
  uint64_t *v89;
  void **v90;
  _BYTE **v91;
  uint64_t *v92;
  void **v93;
  uint64_t v94;
  void *v95;
  char **v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint8_t *v101;
  uint64_t v102;
  uint64_t v103;
  _BYTE **v104;
  uint64_t *v105;
  uint64_t *v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  unint64_t v110;
  unint64_t v111;
  uint64_t *v112;
  uint32_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  _QWORD *v123;
  uint64_t v124;
  NSObject *v125;
  int v126;
  Class v127;
  char **v128;
  Class v129;
  Class v130;
  id v131;
  id v132;
  id v133;
  Class v134;
  uint64_t *v135;
  id v136;
  Class v137;
  Class v138;
  uint64_t v139;
  uint64_t v140;
  unsigned int (*v141)(char *, uint64_t);
  id v142;
  id v143;
  id v144;
  uint64_t *v145;
  id v146;
  id v147;
  id v148;
  double v149;
  double v150;
  int v151;
  id v152;
  id v153;
  id v154;
  id v155;
  double v156;
  double v157;
  int v158;
  id v159;
  id v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  _QWORD *v164;
  unint64_t v165;
  uint64_t v166;
  id v167;
  Class isa;
  id v169;
  void *v170;
  char *v171;
  uint64_t v172;
  uint64_t v173;
  void *v174;
  char **v175;
  _BOOL4 v176;
  uint64_t v177;
  uint64_t v178;
  unint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  unint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint8_t *v193;
  uint64_t v194;
  uint64_t v195;
  _BYTE **v196;
  uint64_t *v197;
  uint64_t *v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t *v201;
  unint64_t v202;
  unint64_t v203;
  uint64_t *v204;
  uint32_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  _QWORD *v215;
  uint64_t v216;
  NSObject *v217;
  int v218;
  uint64_t v219;
  uint64_t v220;
  unint64_t v221;
  uint64_t *v222;
  int v223;
  uint64_t v224;
  char *v225;
  unint64_t v226;
  unint64_t v227;
  uint64_t *v228;
  uint32_t v229;
  int v230;
  NSObject *v231;
  uint64_t v232;
  void *v233;
  char **v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint8_t *v238;
  uint64_t v239;
  uint64_t v240;
  _BYTE **v241;
  uint64_t *v242;
  uint64_t *v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t *v246;
  id v247;
  unint64_t v248;
  unint64_t v249;
  uint64_t *v250;
  uint32_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  _QWORD *v261;
  uint64_t v262;
  NSObject *v263;
  int v264;
  uint64_t v265;
  void *v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  unint64_t v270;
  char *v271;
  uint64_t v272;
  unint64_t v273;
  char *v274;
  unint64_t v275;
  char *v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  unint64_t v283;
  char *v284;
  unint64_t v285;
  char *v286;
  unint64_t v287;
  uint64_t v288;
  char *v289;
  unint64_t v290;
  char *v291;
  void *v292;
  uint64_t (*v293)(uint64_t, uint64_t, uint64_t);
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  _BYTE *v297;
  char *v298;
  uint64_t v299;
  uint32_t v300;
  uint64_t v301;
  void *v302;
  uint64_t (*v303)(uint64_t, uint64_t, uint64_t);
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  _BYTE *v307;
  char *v308;
  double v309;
  char v310;
  double v311;
  double v312;
  char v313;
  double v314;
  char *v315;
  uint64_t v316;
  void *v317;
  uint64_t v318;
  void *v319;
  Swift::Double v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  Swift::Double v324;
  Swift::Double v325;
  _QWORD v326[3];
  Swift::Double v327;
  char *v328;
  id v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint32_t v335;
  uint64_t v336;
  uint64_t (*v337)(uint64_t, uint64_t, uint64_t);
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  _BYTE *v341;
  char *v342;
  uint64_t v343;
  uint32_t v344;
  char v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  _BYTE *v351;
  char *v352;
  uint64_t v353;
  uint32_t v354;
  char v355;
  uint64_t v356;
  uint64_t v357;
  void *v358;
  uint64_t v359;
  uint64_t v360;

  v277 = a1;
  v280 = a2;
  v292 = a3;
  v278 = a4;
  v279 = a5;
  v360 = 0;
  v359 = 0;
  v358 = 0;
  v357 = 0;
  v356 = 0;
  v267 = 0;
  v347 = 0;
  v332 = 0;
  v330 = 0;
  v329 = 0;
  v328 = 0;
  v325 = 0.0;
  v320 = 0.0;
  v302 = 0;
  v272 = 0;
  v268 = type metadata accessor for DateInterval();
  v269 = *(_QWORD *)(v268 - 8);
  v270 = (*(_QWORD *)(v269 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v268);
  v271 = (char *)v81 - v270;
  v273 = (*(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?)
                                - 8)
                    + 64)
        + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v272);
  v274 = (char *)v81 - v273;
  v275 = (v5 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v6);
  v276 = (char *)v81 - v275;
  v281 = type metadata accessor for Logger();
  v282 = *(_QWORD *)(v281 - 8);
  v288 = *(_QWORD *)(v282 + 64);
  v283 = (v288 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v292);
  v284 = (char *)v81 - v283;
  v285 = (v288 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v7);
  v286 = (char *)v81 - v285;
  v287 = (v288 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v8);
  v289 = (char *)v81 - v287;
  v290 = (v288 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v9);
  v291 = (char *)v81 - v290;
  v360 = v10;
  v359 = v11;
  v358 = v12;
  v357 = v13;
  v356 = v14;
  v15 = v12;
  if (v292)
  {
    v266 = v292;
    v16 = v291;
    v247 = v292;
    v302 = v292;
    v245 = Logger.wellnessIntents.unsafeMutableAddressor();
    v246 = &v301;
    v253 = 32;
    swift_beginAccess();
    (*(void (**)(char *, uint64_t, uint64_t))(v282 + 16))(v16, v245, v281);
    swift_endAccess();
    v17 = v247;
    v254 = 7;
    v255 = swift_allocObject();
    *(_QWORD *)(v255 + 16) = v247;
    v263 = Logger.logObject.getter();
    v264 = static os_log_type_t.error.getter();
    v250 = &v299;
    v299 = 12;
    v248 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    v249 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    lazy protocol witness table accessor for type Int and conformance Int();
    UnsignedInteger<>.init<A>(_:)();
    v251 = v300;
    v252 = 17;
    v257 = swift_allocObject();
    *(_BYTE *)(v257 + 16) = 32;
    v258 = swift_allocObject();
    *(_BYTE *)(v258 + 16) = 8;
    v18 = swift_allocObject();
    v19 = v255;
    v256 = v18;
    *(_QWORD *)(v18 + 16) = partial apply for implicit closure #5 in HealthKitPersistor.save(quantityIdentifier:value:units:);
    *(_QWORD *)(v18 + 24) = v19;
    v20 = swift_allocObject();
    v21 = v256;
    v260 = v20;
    *(_QWORD *)(v20 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:);
    *(_QWORD *)(v20 + 24) = v21;
    v262 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
    v259 = _allocateUninitializedArray<A>(_:)();
    v261 = v22;
    swift_retain();
    v23 = v257;
    v24 = v261;
    *v261 = partial apply for closure #1 in OSLogArguments.append(_:);
    v24[1] = v23;
    swift_retain();
    v25 = v258;
    v26 = v261;
    v261[2] = partial apply for closure #1 in OSLogArguments.append(_:);
    v26[3] = v25;
    swift_retain();
    v27 = v260;
    v28 = v261;
    v261[4] = partial apply for closure #1 in OSLogArguments.append(_:);
    v28[5] = v27;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(v263, (os_log_type_t)v264))
    {
      v29 = v267;
      v238 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      v237 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      v239 = createStorage<A>(capacity:type:)(0);
      v240 = createStorage<A>(capacity:type:)(1);
      v241 = &v297;
      v297 = v238;
      v242 = &v296;
      v296 = v239;
      v243 = &v295;
      v295 = v240;
      serialize(_:at:)(2, &v297);
      serialize(_:at:)(1, v241);
      v293 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v294 = v257;
      closure #1 in osLogInternal(_:log:type:)(&v293, (uint64_t)v241, (uint64_t)v242, (uint64_t)v243);
      v244 = v29;
      if (v29)
      {
        __break(1u);
      }
      else
      {
        v293 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
        v294 = v258;
        closure #1 in osLogInternal(_:log:type:)(&v293, (uint64_t)&v297, (uint64_t)&v296, (uint64_t)&v295);
        v235 = 0;
        v293 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
        v294 = v260;
        closure #1 in osLogInternal(_:log:type:)(&v293, (uint64_t)&v297, (uint64_t)&v296, (uint64_t)&v295);
        _os_log_impl(&dword_24749F000, v263, (os_log_type_t)v264, "Error executing sleep query: %s", v238, v251);
        destroyStorage<A>(_:count:)(v239, 0, v237);
        destroyStorage<A>(_:count:)(v240, 1, MEMORY[0x24BEE4AD8] + 8);
        MEMORY[0x24957D398](v238, MEMORY[0x24BEE4260]);
        swift_release();
        swift_release();
        swift_release();
      }
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
    }

    (*(void (**)(char *, uint64_t))(v282 + 8))(v291, v281);
    v233 = 0;
    type metadata accessor for GetSleepAnalysisIntentResponse();
    v30 = GetSleepAnalysisIntentResponse.__allocating_init(code:userActivity:)(5, v233);
    v234 = &v298;
    v298 = v30;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<GetSleepAnalysisIntentResponse, Never>);
    CheckedContinuation.resume(returning:)();

    return;
  }
  swift_bridgeObjectRetain();
  if (!v280)
  {
    v31 = v289;
    v224 = Logger.wellnessIntents.unsafeMutableAddressor();
    v225 = &v355;
    swift_beginAccess();
    (*(void (**)(char *, uint64_t, uint64_t))(v282 + 16))(v31, v224, v281);
    swift_endAccess();
    v231 = Logger.logObject.getter();
    v230 = static os_log_type_t.error.getter();
    v228 = &v353;
    v353 = 2;
    v226 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    v227 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    lazy protocol witness table accessor for type Int and conformance Int();
    UnsignedInteger<>.init<A>(_:)();
    v229 = v354;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
    v232 = _allocateUninitializedArray<A>(_:)();
    if (os_log_type_enabled(v231, (os_log_type_t)v230))
    {
      v76 = v267;
      v85 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      v83 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      v84 = 0;
      v86 = createStorage<A>(capacity:type:)(0);
      v87 = createStorage<A>(capacity:type:)(v84);
      v91 = &v351;
      v351 = v85;
      v92 = &v350;
      v350 = v86;
      v89 = &v349;
      v349 = v87;
      v88 = 0;
      serialize(_:at:)(0, &v351);
      serialize(_:at:)(v88, v91);
      v348 = v232;
      v90 = v81;
      MEMORY[0x24BDAC7A8](v81);
      v77 = v92;
      v78 = &v81[-6];
      v93 = &v81[-6];
      v78[2] = v91;
      v78[3] = v77;
      v78[4] = v79;
      v94 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
      lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
      Sequence.forEach(_:)();
      if (v76)
      {
        __break(1u);
      }
      else
      {
        _os_log_impl(&dword_24749F000, v231, (os_log_type_t)v230, "Could not unwrap day Summaries", v85, v229);
        v82 = 0;
        destroyStorage<A>(_:count:)(v86, 0, v83);
        destroyStorage<A>(_:count:)(v87, v82, MEMORY[0x24BEE4AD8] + 8);
        MEMORY[0x24957D398](v85, MEMORY[0x24BEE4260]);
        swift_bridgeObjectRelease();
      }
    }
    else
    {
      swift_bridgeObjectRelease();
    }

    (*(void (**)(char *, uint64_t))(v282 + 8))(v289, v281);
    v81[0] = 0;
    type metadata accessor for GetSleepAnalysisIntentResponse();
    v80 = GetSleepAnalysisIntentResponse.__allocating_init(code:userActivity:)(5, v81[0]);
    v81[1] = &v352;
    v352 = v80;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<GetSleepAnalysisIntentResponse, Never>);
    CheckedContinuation.resume(returning:)();
    return;
  }
  v265 = v280;
  v219 = v280;
  v347 = v280;
  swift_bridgeObjectRetain();
  v222 = &v346;
  v346 = v219;
  v220 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [HKSleepDaySummary]);
  v221 = lazy protocol witness table accessor for type [HKSleepDaySummary] and conformance [A]();
  v223 = Collection.isEmpty.getter();
  outlined destroy of [HKQuantityType]();
  if ((v223 & 1) != 0)
  {
    v62 = v284;
    v108 = Logger.wellnessIntents.unsafeMutableAddressor();
    v109 = &v345;
    v115 = 32;
    swift_beginAccess();
    (*(void (**)(char *, uint64_t, uint64_t))(v282 + 16))(v62, v108, v281);
    swift_endAccess();
    swift_bridgeObjectRetain();
    v116 = 7;
    v117 = swift_allocObject();
    *(_QWORD *)(v117 + 16) = v219;
    v125 = Logger.logObject.getter();
    v126 = static os_log_type_t.error.getter();
    v112 = &v343;
    v343 = 12;
    v110 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    v111 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    lazy protocol witness table accessor for type Int and conformance Int();
    UnsignedInteger<>.init<A>(_:)();
    v113 = v344;
    v114 = 17;
    v119 = swift_allocObject();
    *(_BYTE *)(v119 + 16) = 0;
    v120 = swift_allocObject();
    *(_BYTE *)(v120 + 16) = 8;
    v63 = swift_allocObject();
    v64 = v117;
    v118 = v63;
    *(_QWORD *)(v63 + 16) = partial apply for implicit closure #2 in closure #1 in closure #1 in SleepAnalysisFetcher.query(start:end:);
    *(_QWORD *)(v63 + 24) = v64;
    v65 = swift_allocObject();
    v66 = v118;
    v122 = v65;
    *(_QWORD *)(v65 + 16) = partial apply for thunk for @escaping @callee_guaranteed () -> (@unowned Int);
    *(_QWORD *)(v65 + 24) = v66;
    v124 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
    v121 = _allocateUninitializedArray<A>(_:)();
    v123 = v67;
    swift_retain();
    v68 = v119;
    v69 = v123;
    *v123 = partial apply for closure #1 in OSLogArguments.append(_:);
    v69[1] = v68;
    swift_retain();
    v70 = v120;
    v71 = v123;
    v123[2] = partial apply for closure #1 in OSLogArguments.append(_:);
    v71[3] = v70;
    swift_retain();
    v72 = v122;
    v73 = v123;
    v123[4] = partial apply for closure #1 in OSLogArguments.append<A>(_:);
    v73[5] = v72;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(v125, (os_log_type_t)v126))
    {
      v74 = v267;
      v101 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      v99 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      v100 = 0;
      v102 = createStorage<A>(capacity:type:)(0);
      v103 = createStorage<A>(capacity:type:)(v100);
      v104 = &v341;
      v341 = v101;
      v105 = &v340;
      v340 = v102;
      v106 = &v339;
      v339 = v103;
      serialize(_:at:)(0, &v341);
      serialize(_:at:)(1, v104);
      v337 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v338 = v119;
      closure #1 in osLogInternal(_:log:type:)(&v337, (uint64_t)v104, (uint64_t)v105, (uint64_t)v106);
      v107 = v74;
      if (v74)
      {
        __break(1u);
      }
      else
      {
        v337 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
        v338 = v120;
        closure #1 in osLogInternal(_:log:type:)(&v337, (uint64_t)&v341, (uint64_t)&v340, (uint64_t)&v339);
        v98 = 0;
        v337 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append<A>(_:);
        v338 = v122;
        closure #1 in osLogInternal(_:log:type:)(&v337, (uint64_t)&v341, (uint64_t)&v340, (uint64_t)&v339);
        _os_log_impl(&dword_24749F000, v125, (os_log_type_t)v126, "No logged data found in the given date range (Day Summaries count is %ld)", v101, v113);
        v97 = 0;
        destroyStorage<A>(_:count:)(v102, 0, v99);
        destroyStorage<A>(_:count:)(v103, v97, MEMORY[0x24BEE4AD8] + 8);
        MEMORY[0x24957D398](v101, MEMORY[0x24BEE4260]);
        swift_release();
        swift_release();
        swift_release();
      }
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
    }

    (*(void (**)(char *, uint64_t))(v282 + 8))(v284, v281);
    v95 = 0;
    type metadata accessor for GetSleepAnalysisIntentResponse();
    v75 = GetSleepAnalysisIntentResponse.__allocating_init(code:userActivity:)(102, v95);
    v96 = &v342;
    v342 = v75;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<GetSleepAnalysisIntentResponse, Never>);
    CheckedContinuation.resume(returning:)();
    swift_bridgeObjectRelease();
    return;
  }
  v32 = v286;
  v200 = Logger.wellnessIntents.unsafeMutableAddressor();
  v201 = &v336;
  v207 = 32;
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v282 + 16))(v32, v200, v281);
  swift_endAccess();
  swift_bridgeObjectRetain();
  v208 = 7;
  v209 = swift_allocObject();
  *(_QWORD *)(v209 + 16) = v219;
  v217 = Logger.logObject.getter();
  v218 = static os_log_type_t.debug.getter();
  v204 = &v334;
  v334 = 12;
  v202 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  v203 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  v205 = v335;
  v206 = 17;
  v211 = swift_allocObject();
  *(_BYTE *)(v211 + 16) = 0;
  v212 = swift_allocObject();
  *(_BYTE *)(v212 + 16) = 8;
  v33 = swift_allocObject();
  v34 = v209;
  v210 = v33;
  *(_QWORD *)(v33 + 16) = partial apply for implicit closure #2 in closure #1 in closure #1 in SleepAnalysisFetcher.query(start:end:);
  *(_QWORD *)(v33 + 24) = v34;
  v35 = swift_allocObject();
  v36 = v210;
  v214 = v35;
  *(_QWORD *)(v35 + 16) = partial apply for thunk for @escaping @callee_guaranteed () -> (@unowned Int);
  *(_QWORD *)(v35 + 24) = v36;
  v216 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
  v213 = _allocateUninitializedArray<A>(_:)();
  v215 = v37;
  swift_retain();
  v38 = v211;
  v39 = v215;
  *v215 = partial apply for closure #1 in OSLogArguments.append(_:);
  v39[1] = v38;
  swift_retain();
  v40 = v212;
  v41 = v215;
  v215[2] = partial apply for closure #1 in OSLogArguments.append(_:);
  v41[3] = v40;
  swift_retain();
  v42 = v214;
  v43 = v215;
  v215[4] = partial apply for closure #1 in OSLogArguments.append<A>(_:);
  v43[5] = v42;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(v217, (os_log_type_t)v218))
  {
    v44 = v267;
    v193 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    v191 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    v192 = 0;
    v194 = createStorage<A>(capacity:type:)(0);
    v195 = createStorage<A>(capacity:type:)(v192);
    v196 = &v307;
    v307 = v193;
    v197 = &v306;
    v306 = v194;
    v198 = &v305;
    v305 = v195;
    serialize(_:at:)(0, &v307);
    serialize(_:at:)(1, v196);
    v303 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v304 = v211;
    closure #1 in osLogInternal(_:log:type:)(&v303, (uint64_t)v196, (uint64_t)v197, (uint64_t)v198);
    v199 = v44;
    if (v44)
    {
      __break(1u);
    }
    else
    {
      v303 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v304 = v212;
      closure #1 in osLogInternal(_:log:type:)(&v303, (uint64_t)&v307, (uint64_t)&v306, (uint64_t)&v305);
      v189 = 0;
      v46 = v189;
      v303 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append<A>(_:);
      v304 = v214;
      closure #1 in osLogInternal(_:log:type:)(&v303, (uint64_t)&v307, (uint64_t)&v306, (uint64_t)&v305);
      v188 = v46;
      _os_log_impl(&dword_24749F000, v217, (os_log_type_t)v218, "Day Summaries: %ld", v193, v205);
      v187 = 0;
      destroyStorage<A>(_:count:)(v194, 0, v191);
      destroyStorage<A>(_:count:)(v195, v187, MEMORY[0x24BEE4AD8] + 8);
      MEMORY[0x24957D398](v193, MEMORY[0x24BEE4260]);
      swift_release();
      swift_release();
      swift_release();
      v190 = v188;
    }
  }
  else
  {
    v45 = v267;
    swift_release();
    swift_release();
    swift_release();
    v190 = v45;
  }
  v47 = v190;

  (*(void (**)(char *, uint64_t))(v282 + 8))(v286, v281);
  swift_bridgeObjectRetain();
  v333 = v219;
  v184 = lazy protocol witness table accessor for type [HKSleepDaySummary] and conformance [A]();
  v48 = _ArrayProtocol.filter(_:)();
  v185 = v47;
  v186 = v48;
  if (v47)
  {
    __break(1u);
    __break(1u);
LABEL_76:
    __break(1u);
    __break(1u);
    __break(1u);
    __break(1u);
    return;
  }
  v180 = v186;
  v179 = type metadata accessor for HKSleepDaySummary();
  v181 = MEMORY[0x24957D110](v180);
  v332 = v181;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v331 = v219;
  v49 = _ArrayProtocol.filter(_:)();
  v182 = 0;
  v183 = v49;
  v177 = v49;
  v178 = MEMORY[0x24957D110]();
  v330 = v178;
  swift_bridgeObjectRelease();
  if (v181)
    v176 = 0;
  else
    v176 = v178 == 0;
  if (v176)
  {
    v174 = 0;
    type metadata accessor for GetSleepAnalysisIntentResponse();
    v50 = GetSleepAnalysisIntentResponse.__allocating_init(code:userActivity:)(102, v174);
    v175 = &v308;
    v308 = v50;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<GetSleepAnalysisIntentResponse, Never>);
    CheckedContinuation.resume(returning:)();
    swift_bridgeObjectRelease();
    return;
  }
  v51 = v182;
  v167 = (id)objc_opt_self();
  swift_bridgeObjectRetain();
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v169 = objc_msgSend(v167, sel_sleepMetricsForDaySummaries_, isa);

  v329 = v169;
  v170 = 0;
  type metadata accessor for GetSleepAnalysisIntentResponse();
  v171 = GetSleepAnalysisIntentResponse.__allocating_init(code:userActivity:)(4, v170);
  v328 = v171;
  v52 = MEMORY[0x24957D110](v219, v179);
  objc_msgSend(v171, sel_setDaysSummarized_, v52);
  objc_msgSend(v171, sel_setDaysWithAsleepData_, v181);
  v326[2] = v219;
  v53 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF((void (*)(char *, char *))closure #3 in closure #1 in closure #1 in SleepAnalysisFetcher.query(start:end:), 0, v220, MEMORY[0x24BEE13C8], MEMORY[0x24BEE4078], v221, MEMORY[0x24BEE40A8], v236);
  v172 = v51;
  v173 = v53;
  if (v51)
    goto LABEL_76;
  v326[1] = v173;
  v164 = v326;
  v326[0] = 0;
  v163 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Double]);
  v165 = lazy protocol witness table accessor for type [Double] and conformance [A]();
  Sequence.reduce<A>(_:_:)();
  v166 = 0;
  outlined destroy of [HKQuantityType]();
  v325 = v327;
  v54 = SleepAnalysisFetcher.roundToMinute(_:)(v327);
  objc_msgSend(v171, sel_setTotalInBedDuration_, v54);
  v323 = v219;
  v55 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF((void (*)(char *, char *))closure #4 in closure #1 in closure #1 in SleepAnalysisFetcher.query(start:end:), 0, v220, MEMORY[0x24BEE13C8], MEMORY[0x24BEE4078], v221, MEMORY[0x24BEE40A8], v236);
  v161 = 0;
  v162 = v55;
  v322 = v162;
  v321 = 0;
  Sequence.reduce<A>(_:_:)();
  outlined destroy of [HKQuantityType]();
  v320 = v324;
  v56 = SleepAnalysisFetcher.roundToMinute(_:)(v324);
  objc_msgSend(v171, sel_setTotalAsleepDuration_, v56);
  if (v178 > 0)
  {
    v160 = objc_msgSend(v169, sel_averageInBedDuration);
    if (v160)
    {
      v159 = v160;
      v155 = v160;
      v154 = objc_msgSend((id)objc_opt_self(), sel_secondUnit);
      objc_msgSend(v155, sel_doubleValueForUnit_);
      v156 = v57;

      v157 = v156;
      v158 = 0;
    }
    else
    {
      v157 = 0.0;
      v158 = 1;
    }
    v309 = v157;
    v310 = v158 & 1;
    if ((v158 & 1) != 0)
      v311 = 0.0;
    else
      v311 = v309;
    objc_msgSend(v171, sel_setAverageInBedDuration_, v311);
  }
  if (v181 > 0)
  {
    v153 = objc_msgSend(v169, sel_averageSleepDuration);
    if (v153)
    {
      v152 = v153;
      v148 = v153;
      v147 = objc_msgSend((id)objc_opt_self(), sel_secondUnit);
      objc_msgSend(v148, sel_doubleValueForUnit_);
      v149 = v58;

      v150 = v149;
      v151 = 0;
    }
    else
    {
      v150 = 0.0;
      v151 = 1;
    }
    v312 = v150;
    v313 = v151 & 1;
    if ((v151 & 1) != 0)
      v314 = 0.0;
    else
      v314 = v312;
    objc_msgSend(v171, sel_setAverageAsleepDuration_, v314);
  }
  swift_bridgeObjectRetain();
  v145 = &v318;
  v318 = v219;
  Collection.first.getter();
  outlined destroy of [HKQuantityType]();
  v146 = v319;
  if (v319)
  {
    v144 = v146;
    v142 = v146;
    v143 = objc_msgSend(v146, sel_dateInterval);
    static DateInterval._unconditionallyBridgeFromObjectiveC(_:)();

    DateInterval.start.getter();
    (*(void (**)(char *, uint64_t))(v269 + 8))(v271, v268);
    v60 = type metadata accessor for Date();
    (*(void (**)(char *, _QWORD, uint64_t))(*(_QWORD *)(v60 - 8) + 56))(v276, 0, 1);

  }
  else
  {
    v59 = type metadata accessor for Date();
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v59 - 8) + 56))(v276, 1);
  }
  v139 = type metadata accessor for Date();
  v140 = *(_QWORD *)(v139 - 8);
  v141 = *(unsigned int (**)(char *, uint64_t))(v140 + 48);
  if (v141(v276, 1) == 1)
  {
    v138 = 0;
  }
  else
  {
    v137 = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v140 + 8))(v276, v139);
    v138 = v137;
  }
  v134 = v138;
  objc_msgSend(v171, sel_setSummaryStartDate_);

  swift_bridgeObjectRetain();
  v135 = &v316;
  v316 = v219;
  lazy protocol witness table accessor for type [HKSleepDaySummary] and conformance [A]();
  BidirectionalCollection.last.getter();
  outlined destroy of [HKQuantityType]();
  v136 = v317;
  if (v317)
  {
    v133 = v136;
    v131 = v136;
    v132 = objc_msgSend(v136, sel_dateInterval);
    static DateInterval._unconditionallyBridgeFromObjectiveC(_:)();

    DateInterval.end.getter();
    (*(void (**)(char *, uint64_t))(v269 + 8))(v271, v268);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v140 + 56))(v274, 0, 1, v139);

  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v140 + 56))(v274, 1, 1, v139);
  }
  if (((unsigned int (*)(char *, uint64_t, uint64_t))v141)(v274, 1, v139) == 1)
  {
    v130 = 0;
  }
  else
  {
    v129 = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v140 + 8))(v274, v139);
    v130 = v129;
  }
  v127 = v130;
  objc_msgSend(v171, sel_setSummaryEndDate_);

  v61 = v171;
  v128 = &v315;
  v315 = v171;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<GetSleepAnalysisIntentResponse, Never>);
  CheckedContinuation.resume(returning:)();

  swift_bridgeObjectRelease();
}

uint64_t implicit closure #2 in closure #1 in closure #1 in SleepAnalysisFetcher.query(start:end:)(uint64_t a1)
{
  unint64_t v1;

  v1 = type metadata accessor for HKSleepDaySummary();
  return MEMORY[0x24957D110](a1, v1);
}

BOOL closure #1 in closure #1 in closure #1 in SleepAnalysisFetcher.query(start:end:)(id *a1)
{
  double v1;

  objc_msgSend(*a1, sel_sleepDuration);
  return v1 > 0.0;
}

BOOL closure #2 in closure #1 in closure #1 in SleepAnalysisFetcher.query(start:end:)(id *a1)
{
  double v1;

  objc_msgSend(*a1, sel_inBedDuration);
  return v1 > 0.0;
}

id closure #3 in closure #1 in closure #1 in SleepAnalysisFetcher.query(start:end:)@<X0>(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id result;
  uint64_t v3;

  result = objc_msgSend(*a1, sel_inBedDuration);
  *a2 = v3;
  return result;
}

id closure #4 in closure #1 in closure #1 in SleepAnalysisFetcher.query(start:end:)@<X0>(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id result;
  uint64_t v3;

  result = objc_msgSend(*a1, sel_sleepDuration);
  *a2 = v3;
  return result;
}

id HKSleepDaySummaryQuery.__allocating_init(morningIndexRange:ascending:limit:options:resultsHandler:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  id v7;

  v7 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  return @nonobjc HKSleepDaySummaryQuery.init(morningIndexRange:ascending:limit:options:resultsHandler:)(a1, a2, a3 & 1, a4, a5, a6, a7);
}

uint64_t protocol witness for SleepAnalysisFetching.isReadingAuthorized() in conformance SleepAnalysisFetcher()
{
  void **v0;
  uint64_t v1;
  _QWORD *v2;
  void *v4;

  *(_QWORD *)(v1 + 16) = v1;
  v4 = *v0;
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 24) = v2;
  *v2 = *(_QWORD *)(v1 + 16);
  v2[1] = protocol witness for QuantityPersisting.isLoggingAuthorized(for:) in conformance HealthKitPersistor;
  return CycleTrackingFetcher.isReadingAuthorized()(v4);
}

uint64_t protocol witness for SleepAnalysisFetching.query(start:end:) in conformance SleepAnalysisFetcher(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v7;

  *(_QWORD *)(v3 + 16) = v3;
  v7 = *v2;
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 24) = v4;
  *v4 = *(_QWORD *)(v3 + 16);
  v4[1] = protocol witness for QuantityPersisting.save(quantityIdentifier:value:units:) in conformance HealthKitPersistor;
  return SleepAnalysisFetcher.query(start:end:)(a1, a2, v7);
}

id @nonobjc HKSleepDaySummaryQuery.init(morningIndexRange:ascending:limit:options:resultsHandler:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  id v13;
  const void *v14;
  id v15;
  uint64_t aBlock;
  int v17;
  int v18;
  uint64_t (*v19)(uint64_t, void *, void *, void *);
  void *v20;
  uint64_t v21;
  uint64_t v22;

  v21 = a6;
  v22 = a7;
  aBlock = MEMORY[0x24BDAC760];
  v17 = 1107296256;
  v18 = 0;
  v19 = thunk for @escaping @callee_guaranteed (@guaranteed HKSleepDaySummaryQuery, @guaranteed [HKSleepDaySummary]?, @guaranteed Error?) -> ();
  v20 = &block_descriptor_9;
  v14 = _Block_copy(&aBlock);
  v15 = objc_msgSend(v13, sel_initWithMorningIndexRange_ascending_limit_options_resultsHandler_, a1, a2, a3 & 1, a4, a5);
  _Block_release(v14);
  swift_release();
  return v15;
}

uint64_t thunk for @escaping @callee_guaranteed (@guaranteed HKSleepDaySummaryQuery, @guaranteed [HKSleepDaySummary]?, @guaranteed Error?) -> ()(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v4;
  id v5;
  id v6;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void (*v12)(void *, uint64_t);

  v12 = *(void (**)(void *, uint64_t))(a1 + 32);
  swift_retain();
  v4 = a2;
  v5 = a3;
  if (a3)
  {
    type metadata accessor for HKSleepDaySummary();
    v9 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    v10 = v9;
  }
  else
  {
    v10 = 0;
  }
  v6 = a4;
  if (a4)
    v8 = a4;
  else
    v8 = 0;
  v12(a2, v10);

  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t sub_24757934C()
{
  return swift_deallocObject();
}

uint64_t sub_247579374()
{
  return swift_deallocObject();
}

uint64_t sub_24757939C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2475793D8()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_247579414()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 24));
  return swift_deallocObject();
}

uint64_t partial apply for @objc closure #1 in GetSleepAnalysisIntentHandler.handle(intent:)()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  const void *v4;
  void *v5;
  void *v6;

  *(_QWORD *)(v1 + 16) = v1;
  v6 = (void *)v0[2];
  v4 = (const void *)v0[3];
  v5 = (void *)v0[4];
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 24) = v2;
  *v2 = *(_QWORD *)(v1 + 16);
  v2[1] = _sIeghH_IeAgH_TRTQ0_;
  return ((uint64_t (*)(void *, const void *, void *))((char *)&async function pointer to @objc closure #1 in GetSleepAnalysisIntentHandler.handle(intent:)
                                                               + async function pointer to @objc closure #1 in GetSleepAnalysisIntentHandler.handle(intent:)))(v6, v4, v5);
}

void partial apply for closure #1 in SleepAnalysisFetcher.query(start:end:)(uint64_t a1)
{
  uint64_t v1;

  closure #1 in SleepAnalysisFetcher.query(start:end:)(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(void **)(v1 + 32));
}

uint64_t type metadata accessor for GetSleepAnalysisIntentHandler()
{
  return objc_opt_self();
}

ValueMetadata *type metadata accessor for SleepAnalysisFetcher()
{
  return &type metadata for SleepAnalysisFetcher;
}

unint64_t type metadata accessor for HKSleepDaySummaryQuery()
{
  unint64_t ObjCClassMetadata;
  uint64_t v2;

  v2 = lazy cache variable for type metadata for HKSleepDaySummaryQuery;
  if (!lazy cache variable for type metadata for HKSleepDaySummaryQuery)
  {
    objc_opt_self();
    ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for HKSleepDaySummaryQuery);
    return ObjCClassMetadata;
  }
  return v2;
}

uint64_t sub_2475795B8()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v4;

  v1 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<GetSleepAnalysisIntentResponse, Never>)
                 - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v4 = (v2 + *(_QWORD *)(v1 + 64) + 7) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(unint64_t))(v1 + 8))(v0 + v2);

  return swift_deallocObject();
}

void partial apply for closure #1 in closure #1 in SleepAnalysisFetcher.query(start:end:)(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v4 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<GetSleepAnalysisIntentResponse, Never>)
                 - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  closure #1 in closure #1 in SleepAnalysisFetcher.query(start:end:)(a1, a2, a3, v3 + v5, *(_QWORD *)(v3 + ((v5 + *(_QWORD *)(v4 + 64) + 7) & 0xFFFFFFFFFFFFFFF8)));
}

uint64_t block_copy_helper_5(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a2 + 32);
  v5 = *(_QWORD *)(a2 + 40);
  swift_retain();
  result = a1;
  *(_QWORD *)(a1 + 32) = v4;
  *(_QWORD *)(a1 + 40) = v5;
  return result;
}

uint64_t block_destroy_helper_5()
{
  return swift_release();
}

unint64_t type metadata accessor for HKSleepDaySummary()
{
  unint64_t ObjCClassMetadata;
  uint64_t v2;

  v2 = lazy cache variable for type metadata for HKSleepDaySummary;
  if (!lazy cache variable for type metadata for HKSleepDaySummary)
  {
    objc_opt_self();
    ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for HKSleepDaySummary);
    return ObjCClassMetadata;
  }
  return v2;
}

unint64_t lazy protocol witness table accessor for type [HKSleepDaySummary] and conformance [A]()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type [HKSleepDaySummary] and conformance [A];
  if (!lazy protocol witness table cache variable for type [HKSleepDaySummary] and conformance [A])
  {
    v0 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [HKSleepDaySummary]);
    v1 = MEMORY[0x24957D92C](MEMORY[0x24BEE12E0], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type [HKSleepDaySummary] and conformance [A]);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type [HKSleepDaySummary] and conformance [A];
  if (!lazy protocol witness table cache variable for type [HKSleepDaySummary] and conformance [A])
  {
    v0 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [HKSleepDaySummary]);
    v1 = MEMORY[0x24957D92C](MEMORY[0x24BEE12F0], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type [HKSleepDaySummary] and conformance [A]);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type [HKSleepDaySummary] and conformance [A];
  if (!lazy protocol witness table cache variable for type [HKSleepDaySummary] and conformance [A])
  {
    v0 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [HKSleepDaySummary]);
    v1 = MEMORY[0x24957D92C](MEMORY[0x24BEE12B0], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type [HKSleepDaySummary] and conformance [A]);
    return v1;
  }
  return v3;
}

uint64_t sub_2475797EC()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #2 in closure #1 in closure #1 in SleepAnalysisFetcher.query(start:end:)()
{
  uint64_t v0;

  return implicit closure #2 in closure #1 in closure #1 in SleepAnalysisFetcher.query(start:end:)(*(_QWORD *)(v0 + 16));
}

uint64_t sub_247579830()
{
  return swift_deallocObject();
}

uint64_t sub_247579858()
{
  return swift_deallocObject();
}

uint64_t sub_247579880()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2475798BC()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2475798F8()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_247579934()
{
  return swift_deallocObject();
}

uint64_t sub_24757995C()
{
  return swift_deallocObject();
}

uint64_t sub_247579984()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2475799C0()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_247579ADC()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t sub_247579B18()
{
  return swift_deallocObject();
}

uint64_t sub_247579B40()
{
  return swift_deallocObject();
}

uint64_t sub_247579B68()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_247579BA4()
{
  swift_release();
  return swift_deallocObject();
}

char *GetHealthQuantityIntentResponse.__allocating_init(code:userActivity:)(uint64_t a1, void *a2)
{
  objc_class *v2;
  id v3;

  v3 = objc_allocWithZone(v2);
  return GetHealthQuantityIntentResponse.init(code:userActivity:)(a1, a2);
}

id GetHealthQuantityIntent.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

id GetHealthQuantityIntent.init()()
{
  id v0;
  id v2;
  objc_super v3;
  id v4;

  v4 = 0;
  v3.receiver = 0;
  v3.super_class = (Class)type metadata accessor for GetHealthQuantityIntent();
  v2 = objc_msgSendSuper2(&v3, sel_init);
  v0 = v2;
  v4 = v2;

  return v2;
}

id GetHealthQuantityIntent.__allocating_init(coder:)(void *a1)
{
  objc_class *v1;
  id v4;

  v4 = objc_msgSend(objc_allocWithZone(v1), sel_initWithCoder_, a1);

  return v4;
}

id GetHealthQuantityIntent.init(coder:)(void *a1)
{
  id v1;
  id v5;
  objc_super v6;
  void *v7;
  id v8;

  v8 = 0;
  v7 = a1;
  v6.receiver = 0;
  v6.super_class = (Class)type metadata accessor for GetHealthQuantityIntent();
  v5 = objc_msgSendSuper2(&v6, sel_initWithCoder_, a1);
  if (v5)
  {
    v1 = v5;
    v8 = v5;

    return v5;
  }
  else
  {

    return 0;
  }
}

id GetHealthQuantityIntent.__allocating_init(identifier:backingStore:)(uint64_t a1, uint64_t a2, void *a3)
{
  objc_class *v3;
  id v5;
  uint64_t v6;
  void *v7;
  id v11;

  v11 = objc_allocWithZone(v3);
  if (a2)
  {
    v6 = MEMORY[0x24957CFB4](a1);
    swift_bridgeObjectRelease();
    v7 = (void *)v6;
  }
  else
  {
    v7 = 0;
  }
  v5 = objc_msgSend(v11, sel_initWithIdentifier_backingStore_);

  return v5;
}

id GetHealthQuantityIntent.init(identifier:backingStore:)(uint64_t a1, uint64_t a2, void *a3)
{
  id v3;
  id v5;
  uint64_t v6;
  void *v7;
  objc_super v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  id v15;

  v15 = 0;
  v13 = a1;
  v14 = a2;
  v12 = a3;
  swift_bridgeObjectRetain();
  if (a2)
  {
    v6 = MEMORY[0x24957CFB4](a1);
    swift_bridgeObjectRelease();
    v7 = (void *)v6;
  }
  else
  {
    v7 = 0;
  }
  v11.receiver = 0;
  v11.super_class = (Class)type metadata accessor for GetHealthQuantityIntent();
  v5 = objc_msgSendSuper2(&v11, sel_initWithIdentifier_backingStore_, v7, a3);

  v3 = v5;
  v15 = v5;

  swift_bridgeObjectRelease();
  return v5;
}

id GetHealthQuantityIntent.__allocating_init(domain:verb:parametersByName:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  objc_class *v5;
  id v6;
  id v8;
  id v9;
  Class isa;
  id v13;
  void *v16;
  void *v18;

  v13 = objc_allocWithZone(v5);
  v16 = (void *)MEMORY[0x24957CFB4](a1, a2);
  v18 = (void *)MEMORY[0x24957CFB4](a3, a4);
  if (a5)
  {
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    v6 = objc_msgSend(v13, sel_initWithDomain_verb_parametersByName_, v16, v18, isa);
  }
  else
  {
    v6 = objc_msgSend(v13, sel_initWithDomain_verb_parametersByName_, v16, v18, 0);
  }
  v9 = v6;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v9;
}

id GetHealthQuantityIntent.init(domain:verb:parametersByName:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  id v5;
  id v7;
  Class isa;
  Class v9;
  id v12;
  void *v15;
  objc_super v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id v23;

  v23 = 0;
  v21 = a1;
  v22 = a2;
  v19 = a3;
  v20 = a4;
  v18 = a5;
  swift_bridgeObjectRetain();
  v12 = (id)MEMORY[0x24957CFB4](a1, a2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v15 = (void *)MEMORY[0x24957CFB4](a3, a4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  if (a5)
  {
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    v9 = isa;
  }
  else
  {
    v9 = 0;
  }
  v17.receiver = 0;
  v17.super_class = (Class)type metadata accessor for GetHealthQuantityIntent();
  v7 = objc_msgSendSuper2(&v17, sel_initWithDomain_verb_parametersByName_, v12, v15, v9);

  v5 = v7;
  v23 = v7;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return v7;
}

id GetHealthQuantityIntent.__deallocating_deinit()
{
  void *v0;
  objc_super v2;
  void *v3;

  v3 = v0;
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for GetHealthQuantityIntent();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t GetHealthQuantityIntentResponseCode.init(rawValue:)(uint64_t a1)
{
  switch(a1)
  {
    case 0:
      return 0;
    case 1:
      return 1;
    case 2:
      return 2;
    case 3:
      return 3;
    case 4:
      return 4;
    case 5:
      return 5;
    case 6:
      return 6;
    case 100:
      return 100;
    case 101:
      return 101;
    case 102:
      return 102;
    case 103:
      return 103;
  }
  return 0;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance GetHealthQuantityIntentResponseCode()
{
  lazy protocol witness table accessor for type GetHealthQuantityIntentResponseCode and conformance GetHealthQuantityIntentResponseCode();
  return == infix<A>(_:_:)() & 1;
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance GetHealthQuantityIntentResponseCode()
{
  lazy protocol witness table accessor for type GetHealthQuantityIntentResponseCode and conformance GetHealthQuantityIntentResponseCode();
  return RawRepresentable<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance GetHealthQuantityIntentResponseCode()
{
  lazy protocol witness table accessor for type GetHealthQuantityIntentResponseCode and conformance GetHealthQuantityIntentResponseCode();
  return RawRepresentable<>.hash(into:)();
}

uint64_t protocol witness for Hashable._rawHashValue(seed:) in conformance GetHealthQuantityIntentResponseCode()
{
  lazy protocol witness table accessor for type GetHealthQuantityIntentResponseCode and conformance GetHealthQuantityIntentResponseCode();
  return RawRepresentable<>._rawHashValue(seed:)();
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance GetHealthQuantityIntentResponseCode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  char v3;

  result = GetHealthQuantityIntentResponseCode.init(rawValue:)(*a1);
  *(_QWORD *)a2 = result;
  *(_BYTE *)(a2 + 8) = v3 & 1;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance GetHealthQuantityIntentResponseCode(_QWORD *a1@<X8>)
{
  uint64_t v1;

  GetHealthQuantityIntentResponseCode.rawValue.getter();
  *a1 = v1;
}

uint64_t GetHealthQuantityIntentResponse.code.getter()
{
  uint64_t v0;
  uint64_t *v2;
  uint64_t v3;

  v2 = (uint64_t *)(v0 + OBJC_IVAR___GetHealthQuantityIntentResponse_code);
  swift_beginAccess();
  v3 = *v2;
  swift_endAccess();
  return v3;
}

uint64_t GetHealthQuantityIntentResponse.code.setter(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)(v1 + OBJC_IVAR___GetHealthQuantityIntentResponse_code);
  swift_beginAccess();
  *v3 = a1;
  return swift_endAccess();
}

uint64_t (*GetHealthQuantityIntentResponse.code.modify())()
{
  swift_beginAccess();
  return LogQuantityIntentResponse.code.modify;
}

void key path getter for GetHealthQuantityIntentResponse.code : GetHealthQuantityIntentResponse(id *a1@<X0>, uint64_t *a2@<X8>)
{
  id v2;
  id v3;

  v3 = *a1;
  v2 = *a1;
  *a2 = GetHealthQuantityIntentResponse.code.getter();

}

void key path setter for GetHealthQuantityIntentResponse.code : GetHealthQuantityIntentResponse(uint64_t *a1, id *a2)
{
  id v2;
  id v3;
  uint64_t v4;

  v4 = *a1;
  v3 = *a2;
  v2 = *a2;
  GetHealthQuantityIntentResponse.code.setter(v4);

}

char *GetHealthQuantityIntentResponse.init(code:userActivity:)(uint64_t a1, void *a2)
{
  char *v2;
  char *v3;
  char *v4;
  char *v6;
  char *v9;
  void *v10;

  v9 = (char *)objc_msgSend(v10, sel_init);
  v2 = v9;
  v3 = v9;
  v4 = v9;
  v6 = &v9[OBJC_IVAR___GetHealthQuantityIntentResponse_code];
  swift_beginAccess();
  *(_QWORD *)v6 = a1;
  swift_endAccess();

  objc_msgSend(v9, sel_setUserActivity_, a2);
  return v9;
}

uint64_t type metadata accessor for GetHealthQuantityIntent()
{
  return objc_opt_self();
}

id GetHealthQuantityIntentResponse.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

id GetHealthQuantityIntentResponse.init()()
{
  char *v0;
  char *v1;
  id v2;
  id v4;
  objc_super v5;
  void *v6;

  v1 = v0;
  v6 = v0;
  *(_QWORD *)&v0[OBJC_IVAR___GetHealthQuantityIntentResponse_code] = 0;

  v5.receiver = v6;
  v5.super_class = (Class)type metadata accessor for GetHealthQuantityIntentResponse();
  v4 = objc_msgSendSuper2(&v5, sel_init);
  v2 = v4;
  v6 = v4;

  return v4;
}

uint64_t type metadata accessor for GetHealthQuantityIntentResponse()
{
  return objc_opt_self();
}

id GetHealthQuantityIntentResponse.__allocating_init(coder:)(void *a1)
{
  objc_class *v1;
  id v4;

  v4 = objc_msgSend(objc_allocWithZone(v1), sel_initWithCoder_, a1);

  return v4;
}

id GetHealthQuantityIntentResponse.init(coder:)(void *a1)
{
  char *v1;
  char *v2;
  id v3;
  id v7;
  objc_super v8;
  void *v9;
  id v10;

  v9 = a1;
  v2 = v1;
  v10 = v1;
  *(_QWORD *)&v1[OBJC_IVAR___GetHealthQuantityIntentResponse_code] = 0;

  v8.receiver = v10;
  v8.super_class = (Class)type metadata accessor for GetHealthQuantityIntentResponse();
  v7 = objc_msgSendSuper2(&v8, sel_initWithCoder_, a1);
  if (v7)
  {
    v3 = v7;
    v10 = v7;

    return v7;
  }
  else
  {

    return 0;
  }
}

id GetHealthQuantityIntentResponse.__allocating_init(backingStore:)(void *a1)
{
  objc_class *v1;
  id v4;

  v4 = objc_msgSend(objc_allocWithZone(v1), sel_initWithBackingStore_, a1);

  return v4;
}

id GetHealthQuantityIntentResponse.init(backingStore:)(void *a1)
{
  char *v1;
  char *v2;
  id v3;
  id v7;
  objc_super v8;
  void *v9;
  id v10;

  v9 = a1;
  v2 = v1;
  v10 = v1;
  *(_QWORD *)&v1[OBJC_IVAR___GetHealthQuantityIntentResponse_code] = 0;

  v8.receiver = v10;
  v8.super_class = (Class)type metadata accessor for GetHealthQuantityIntentResponse();
  v7 = objc_msgSendSuper2(&v8, sel_initWithBackingStore_, a1);
  if (v7)
  {
    v3 = v7;
    v10 = v7;

    return v7;
  }
  else
  {

    return 0;
  }
}

id GetHealthQuantityIntentResponse.__allocating_init(propertiesByName:)(uint64_t a1)
{
  objc_class *v1;
  id v2;
  id v4;
  id v5;
  Class isa;
  id v8;

  v8 = objc_allocWithZone(v1);
  if (a1)
  {
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    v2 = objc_msgSend(v8, sel_initWithPropertiesByName_, isa);
  }
  else
  {
    v2 = objc_msgSend(v8, sel_initWithPropertiesByName_, 0);
  }
  v5 = v2;

  return v5;
}

id GetHealthQuantityIntentResponse.init(propertiesByName:)(uint64_t a1)
{
  char *v1;
  char *v2;
  id v3;
  id v6;
  Class isa;
  Class v8;
  objc_super v10;
  uint64_t v11;
  id v12;

  v11 = a1;
  v2 = v1;
  v12 = v1;
  *(_QWORD *)&v1[OBJC_IVAR___GetHealthQuantityIntentResponse_code] = 0;

  swift_bridgeObjectRetain();
  if (a1)
  {
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    v8 = isa;
  }
  else
  {
    v8 = 0;
  }
  v10.receiver = v12;
  v10.super_class = (Class)type metadata accessor for GetHealthQuantityIntentResponse();
  v6 = objc_msgSendSuper2(&v10, sel_initWithPropertiesByName_, v8);

  if (v6)
  {
    v3 = v6;
    v12 = v6;
    swift_bridgeObjectRelease();

    return v6;
  }
  else
  {

    swift_bridgeObjectRelease();
    return 0;
  }
}

id GetHealthQuantityIntentResponse.__deallocating_deinit()
{
  void *v0;
  objc_super v2;
  void *v3;

  v3 = v0;
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for GetHealthQuantityIntentResponse();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

unint64_t base witness table accessor for Equatable in GetHealthQuantityIntentResponseCode()
{
  return lazy protocol witness table accessor for type GetHealthQuantityIntentResponseCode and conformance GetHealthQuantityIntentResponseCode();
}

unint64_t lazy protocol witness table accessor for type GetHealthQuantityIntentResponseCode and conformance GetHealthQuantityIntentResponseCode()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GetHealthQuantityIntentResponseCode and conformance GetHealthQuantityIntentResponseCode;
  if (!lazy protocol witness table cache variable for type GetHealthQuantityIntentResponseCode and conformance GetHealthQuantityIntentResponseCode)
  {
    v0 = MEMORY[0x24957D92C]("\t\x1B/\n@Z", &type metadata for GetHealthQuantityIntentResponseCode);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GetHealthQuantityIntentResponseCode and conformance GetHealthQuantityIntentResponseCode);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GetHealthQuantityIntentResponseCode and conformance GetHealthQuantityIntentResponseCode;
  if (!lazy protocol witness table cache variable for type GetHealthQuantityIntentResponseCode and conformance GetHealthQuantityIntentResponseCode)
  {
    v0 = MEMORY[0x24957D92C](&protocol conformance descriptor for GetHealthQuantityIntentResponseCode, &type metadata for GetHealthQuantityIntentResponseCode);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GetHealthQuantityIntentResponseCode and conformance GetHealthQuantityIntentResponseCode);
    return v0;
  }
  return v2;
}

void sub_24757B3C8(id *a1@<X0>, uint64_t *a2@<X8>)
{
  key path getter for GetHealthQuantityIntentResponse.code : GetHealthQuantityIntentResponse(a1, a2);
}

void sub_24757B3DC(uint64_t *a1, id *a2)
{
  key path setter for GetHealthQuantityIntentResponse.code : GetHealthQuantityIntentResponse(a1, a2);
}

ValueMetadata *type metadata accessor for GetHealthQuantityIntentResponseCode()
{
  return &type metadata for GetHealthQuantityIntentResponseCode;
}

SiriWellnessIntents::DataProviderFactory __swiftcall DataProviderFactory.init()()
{
  id v0;
  void *v2;
  id v3;

  v3 = 0;
  type metadata accessor for HKHealthStore();
  v2 = (void *)NSDateFormatter.__allocating_init()();
  v0 = v2;
  v3 = v2;
  outlined destroy of HealthKitPersistor(&v3);
  return (SiriWellnessIntents::DataProviderFactory)v2;
}

void *DataProviderFactory.ambiguousDistanceProvider()@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  id v2;
  uint64_t v3;
  _BYTE v7[48];

  v2 = a1;
  static HealthKitDistanceProvider<A>.ambiguousDistance(store:)(a1, v7);

  a2[3] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HealthKitDistanceProvider<GetAmbiguousDistanceIntentResponse>);
  a2[4] = (uint64_t)&protocol witness table for <A> HealthKitDistanceProvider<A>;
  v3 = swift_allocObject();
  *a2 = v3;
  return memcpy((void *)(v3 + 16), v7, 0x30uLL);
}

uint64_t sub_24757B56C()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

void *DataProviderFactory.bloodPressureProvider()@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  id v2;
  uint64_t v3;
  _BYTE v7[64];

  v2 = a1;
  static HealthKitCorrelationProvider<A>.bloodPressure(store:)(a1, v7);

  a2[3] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HealthKitCorrelationProvider<GetBloodPressureIntentResponse>);
  a2[4] = (uint64_t)&protocol witness table for <A> HealthKitCorrelationProvider<A>;
  v3 = swift_allocObject();
  *a2 = v3;
  return memcpy((void *)(v3 + 16), v7, 0x40uLL);
}

uint64_t sub_24757B664()
{
  id *v0;

  swift_release();
  swift_release();
  return swift_deallocObject();
}

void *protocol witness for DataProviderFactoryProtocol.ambiguousDistanceProvider() in conformance DataProviderFactory@<X0>(uint64_t *a1@<X8>)
{
  void **v1;

  return DataProviderFactory.ambiguousDistanceProvider()(*v1, a1);
}

void *protocol witness for DataProviderFactoryProtocol.bloodPressureProvider() in conformance DataProviderFactory@<X0>(uint64_t *a1@<X8>)
{
  void **v1;

  return DataProviderFactory.bloodPressureProvider()(*v1, a1);
}

ValueMetadata *type metadata accessor for DataProviderFactory()
{
  return &type metadata for DataProviderFactory;
}

uint64_t PeriodFlow.init(healthLogValueCategoryValue:)()
{
  char v2;
  char v3;
  char v4;
  char v5;
  char v6;
  uint64_t v7;

  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("light", 5uLL, 1);
  swift_bridgeObjectRetain();
  v6 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v6 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v7 = 3;
LABEL_11:
    swift_bridgeObjectRelease();
    return v7;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("medium", 6uLL, 1);
  swift_bridgeObjectRetain();
  v5 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v5 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v7 = 4;
    goto LABEL_11;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("heavy", 5uLL, 1);
  swift_bridgeObjectRetain();
  v4 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v4 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v7 = 5;
    goto LABEL_11;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("not", 3uLL, 1);
  swift_bridgeObjectRetain();
  v3 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v3 & 1) != 0
    || (swift_bridgeObjectRelease(),
        swift_bridgeObjectRetain(),
        String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("none", 4uLL, 1),
        swift_bridgeObjectRetain(),
        v2 = static String.== infix(_:_:)(),
        swift_bridgeObjectRelease(),
        swift_bridgeObjectRelease(),
        (v2 & 1) != 0))
  {
    swift_bridgeObjectRelease();
    v7 = 1;
    goto LABEL_11;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t PeriodFlow.init(rawDoubleValue:)(unint64_t a1, char a2)
{
  char v2;
  uint64_t v4;

  if ((a2 & 1) != 0)
    return 2;
  if (((a1 >> 52) & 0x7FF) == 0x7FF)
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  if (*(double *)&a1 <= -9.22337204e18)
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  if (*(double *)&a1 >= 9.22337204e18)
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  v4 = PeriodFlow.init(rawValue:)((uint64_t)*(double *)&a1);
  if ((v2 & 1) != 0)
    return 2;
  else
    return v4;
}

BOOL WellnessMagnitudeUnit.init(rawValue:)(uint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  Swift::String string;
  Swift::Int v6;

  string._countAndFlagsBits = a1;
  string._object = a2;
  v2 = _allocateUninitializedArray<A>(_:)();
  *(_QWORD *)v3 = "none";
  *(_QWORD *)(v3 + 8) = 4;
  *(_BYTE *)(v3 + 16) = 2;
  _finalizeUninitializedArray<A>(_:)();
  v6 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)v2, string);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v6 != 0;
}

uint64_t WellnessMagnitudeUnit.rawValue.getter()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("none", 4uLL, 1)._countAndFlagsBits;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance WellnessMagnitudeUnit()
{
  lazy protocol witness table accessor for type WellnessMagnitudeUnit and conformance WellnessMagnitudeUnit();
  return == infix<A>(_:_:)() & 1;
}

unint64_t base witness table accessor for Equatable in WellnessMagnitudeUnit()
{
  return lazy protocol witness table accessor for type WellnessMagnitudeUnit and conformance WellnessMagnitudeUnit();
}

unint64_t lazy protocol witness table accessor for type WellnessMagnitudeUnit and conformance WellnessMagnitudeUnit()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type WellnessMagnitudeUnit and conformance WellnessMagnitudeUnit;
  if (!lazy protocol witness table cache variable for type WellnessMagnitudeUnit and conformance WellnessMagnitudeUnit)
  {
    v0 = MEMORY[0x24957D92C](&protocol conformance descriptor for WellnessMagnitudeUnit, &type metadata for WellnessMagnitudeUnit);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type WellnessMagnitudeUnit and conformance WellnessMagnitudeUnit);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type WellnessMagnitudeUnit and conformance WellnessMagnitudeUnit;
  if (!lazy protocol witness table cache variable for type WellnessMagnitudeUnit and conformance WellnessMagnitudeUnit)
  {
    v0 = MEMORY[0x24957D92C](&protocol conformance descriptor for WellnessMagnitudeUnit, &type metadata for WellnessMagnitudeUnit);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type WellnessMagnitudeUnit and conformance WellnessMagnitudeUnit);
    return v0;
  }
  return v2;
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance WellnessMagnitudeUnit()
{
  lazy protocol witness table accessor for type WellnessMagnitudeUnit and conformance WellnessMagnitudeUnit();
  return RawRepresentable<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance WellnessMagnitudeUnit()
{
  lazy protocol witness table accessor for type WellnessMagnitudeUnit and conformance WellnessMagnitudeUnit();
  return RawRepresentable<>.hash(into:)();
}

uint64_t protocol witness for Hashable._rawHashValue(seed:) in conformance WellnessMagnitudeUnit()
{
  lazy protocol witness table accessor for type WellnessMagnitudeUnit and conformance WellnessMagnitudeUnit();
  return RawRepresentable<>._rawHashValue(seed:)();
}

BOOL protocol witness for RawRepresentable.init(rawValue:) in conformance WellnessMagnitudeUnit@<W0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  _BOOL8 result;

  result = WellnessMagnitudeUnit.init(rawValue:)(*(_QWORD *)a1, *(void **)(a1 + 8));
  *a2 = result;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance WellnessMagnitudeUnit@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v2;

  result = WellnessMagnitudeUnit.rawValue.getter();
  *a1 = result;
  a1[1] = v2;
  return result;
}

ValueMetadata *type metadata accessor for WellnessMagnitudeUnit()
{
  return &type metadata for WellnessMagnitudeUnit;
}

id DeleteHealthSampleIntent.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

id DeleteHealthSampleIntent.init()()
{
  id v0;
  id v2;
  objc_super v3;
  id v4;

  v4 = 0;
  v3.receiver = 0;
  v3.super_class = (Class)type metadata accessor for DeleteHealthSampleIntent();
  v2 = objc_msgSendSuper2(&v3, sel_init);
  v0 = v2;
  v4 = v2;

  return v2;
}

uint64_t type metadata accessor for DeleteHealthSampleIntent()
{
  return objc_opt_self();
}

id DeleteHealthSampleIntent.__allocating_init(coder:)(void *a1)
{
  objc_class *v1;
  id v4;

  v4 = objc_msgSend(objc_allocWithZone(v1), sel_initWithCoder_, a1);

  return v4;
}

id DeleteHealthSampleIntent.init(coder:)(void *a1)
{
  id v1;
  id v5;
  objc_super v6;
  void *v7;
  id v8;

  v8 = 0;
  v7 = a1;
  v6.receiver = 0;
  v6.super_class = (Class)type metadata accessor for DeleteHealthSampleIntent();
  v5 = objc_msgSendSuper2(&v6, sel_initWithCoder_, a1);
  if (v5)
  {
    v1 = v5;
    v8 = v5;

    return v5;
  }
  else
  {

    return 0;
  }
}

id DeleteHealthSampleIntent.__allocating_init(identifier:backingStore:)(uint64_t a1, uint64_t a2, void *a3)
{
  objc_class *v3;
  id v5;
  uint64_t v6;
  void *v7;
  id v11;

  v11 = objc_allocWithZone(v3);
  if (a2)
  {
    v6 = MEMORY[0x24957CFB4](a1);
    swift_bridgeObjectRelease();
    v7 = (void *)v6;
  }
  else
  {
    v7 = 0;
  }
  v5 = objc_msgSend(v11, sel_initWithIdentifier_backingStore_);

  return v5;
}

id DeleteHealthSampleIntent.init(identifier:backingStore:)(uint64_t a1, uint64_t a2, void *a3)
{
  id v3;
  id v5;
  uint64_t v6;
  void *v7;
  objc_super v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  id v15;

  v15 = 0;
  v13 = a1;
  v14 = a2;
  v12 = a3;
  swift_bridgeObjectRetain();
  if (a2)
  {
    v6 = MEMORY[0x24957CFB4](a1);
    swift_bridgeObjectRelease();
    v7 = (void *)v6;
  }
  else
  {
    v7 = 0;
  }
  v11.receiver = 0;
  v11.super_class = (Class)type metadata accessor for DeleteHealthSampleIntent();
  v5 = objc_msgSendSuper2(&v11, sel_initWithIdentifier_backingStore_, v7, a3);

  v3 = v5;
  v15 = v5;

  swift_bridgeObjectRelease();
  return v5;
}

id DeleteHealthSampleIntent.__allocating_init(domain:verb:parametersByName:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  objc_class *v5;
  id v6;
  id v8;
  id v9;
  Class isa;
  id v13;
  void *v16;
  void *v18;

  v13 = objc_allocWithZone(v5);
  v16 = (void *)MEMORY[0x24957CFB4](a1, a2);
  v18 = (void *)MEMORY[0x24957CFB4](a3, a4);
  if (a5)
  {
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    v6 = objc_msgSend(v13, sel_initWithDomain_verb_parametersByName_, v16, v18, isa);
  }
  else
  {
    v6 = objc_msgSend(v13, sel_initWithDomain_verb_parametersByName_, v16, v18, 0);
  }
  v9 = v6;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v9;
}

id DeleteHealthSampleIntent.init(domain:verb:parametersByName:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  id v5;
  id v7;
  Class isa;
  Class v9;
  id v12;
  void *v15;
  objc_super v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id v23;

  v23 = 0;
  v21 = a1;
  v22 = a2;
  v19 = a3;
  v20 = a4;
  v18 = a5;
  swift_bridgeObjectRetain();
  v12 = (id)MEMORY[0x24957CFB4](a1, a2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v15 = (void *)MEMORY[0x24957CFB4](a3, a4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  if (a5)
  {
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    v9 = isa;
  }
  else
  {
    v9 = 0;
  }
  v17.receiver = 0;
  v17.super_class = (Class)type metadata accessor for DeleteHealthSampleIntent();
  v7 = objc_msgSendSuper2(&v17, sel_initWithDomain_verb_parametersByName_, v12, v15, v9);

  v5 = v7;
  v23 = v7;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return v7;
}

id DeleteHealthSampleIntent.__deallocating_deinit()
{
  void *v0;
  objc_super v2;
  void *v3;

  v3 = v0;
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for DeleteHealthSampleIntent();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t DeleteHealthSampleIntentResponseCode.init(rawValue:)(uint64_t a1)
{
  switch(a1)
  {
    case 0:
      return 0;
    case 1:
      return 1;
    case 2:
      return 2;
    case 3:
      return 3;
    case 4:
      return 4;
    case 5:
      return 5;
    case 6:
      return 6;
    case 100:
      return 100;
    case 101:
      return 101;
    case 102:
      return 102;
  }
  return 0;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance DeleteHealthSampleIntentResponseCode()
{
  lazy protocol witness table accessor for type DeleteHealthSampleIntentResponseCode and conformance DeleteHealthSampleIntentResponseCode();
  return == infix<A>(_:_:)() & 1;
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance DeleteHealthSampleIntentResponseCode()
{
  lazy protocol witness table accessor for type DeleteHealthSampleIntentResponseCode and conformance DeleteHealthSampleIntentResponseCode();
  return RawRepresentable<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance DeleteHealthSampleIntentResponseCode()
{
  lazy protocol witness table accessor for type DeleteHealthSampleIntentResponseCode and conformance DeleteHealthSampleIntentResponseCode();
  return RawRepresentable<>.hash(into:)();
}

uint64_t protocol witness for Hashable._rawHashValue(seed:) in conformance DeleteHealthSampleIntentResponseCode()
{
  lazy protocol witness table accessor for type DeleteHealthSampleIntentResponseCode and conformance DeleteHealthSampleIntentResponseCode();
  return RawRepresentable<>._rawHashValue(seed:)();
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance DeleteHealthSampleIntentResponseCode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  char v3;

  result = DeleteHealthSampleIntentResponseCode.init(rawValue:)(*a1);
  *(_QWORD *)a2 = result;
  *(_BYTE *)(a2 + 8) = v3 & 1;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance DeleteHealthSampleIntentResponseCode(_QWORD *a1@<X8>)
{
  uint64_t v1;

  DeleteHealthSampleIntentResponseCode.rawValue.getter();
  *a1 = v1;
}

uint64_t DeleteHealthSampleIntentResponse.code.getter()
{
  uint64_t v0;
  uint64_t *v2;
  uint64_t v3;

  v2 = (uint64_t *)(v0 + OBJC_IVAR___DeleteHealthSampleIntentResponse_code);
  swift_beginAccess();
  v3 = *v2;
  swift_endAccess();
  return v3;
}

uint64_t DeleteHealthSampleIntentResponse.code.setter(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)(v1 + OBJC_IVAR___DeleteHealthSampleIntentResponse_code);
  swift_beginAccess();
  *v3 = a1;
  return swift_endAccess();
}

uint64_t (*DeleteHealthSampleIntentResponse.code.modify())()
{
  swift_beginAccess();
  return LogQuantityIntentResponse.code.modify;
}

void key path getter for DeleteHealthSampleIntentResponse.code : DeleteHealthSampleIntentResponse(id *a1@<X0>, uint64_t *a2@<X8>)
{
  id v2;
  id v3;

  v3 = *a1;
  v2 = *a1;
  *a2 = DeleteHealthSampleIntentResponse.code.getter();

}

void key path setter for DeleteHealthSampleIntentResponse.code : DeleteHealthSampleIntentResponse(uint64_t *a1, id *a2)
{
  id v2;
  id v3;
  uint64_t v4;

  v4 = *a1;
  v3 = *a2;
  v2 = *a2;
  DeleteHealthSampleIntentResponse.code.setter(v4);

}

char *DeleteHealthSampleIntentResponse.__allocating_init(code:userActivity:)(uint64_t a1, void *a2)
{
  objc_class *v2;
  id v3;

  v3 = objc_allocWithZone(v2);
  return DeleteHealthSampleIntentResponse.init(code:userActivity:)(a1, a2);
}

char *DeleteHealthSampleIntentResponse.init(code:userActivity:)(uint64_t a1, void *a2)
{
  char *v2;
  char *v3;
  char *v4;
  char *v6;
  char *v9;
  void *v10;

  v9 = (char *)objc_msgSend(v10, sel_init);
  v2 = v9;
  v3 = v9;
  v4 = v9;
  v6 = &v9[OBJC_IVAR___DeleteHealthSampleIntentResponse_code];
  swift_beginAccess();
  *(_QWORD *)v6 = a1;
  swift_endAccess();

  objc_msgSend(v9, sel_setUserActivity_, a2);
  return v9;
}

id DeleteHealthSampleIntentResponse.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

id DeleteHealthSampleIntentResponse.init()()
{
  char *v0;
  char *v1;
  id v2;
  id v4;
  objc_super v5;
  void *v6;

  v1 = v0;
  v6 = v0;
  *(_QWORD *)&v0[OBJC_IVAR___DeleteHealthSampleIntentResponse_code] = 0;

  v5.receiver = v6;
  v5.super_class = (Class)type metadata accessor for DeleteHealthSampleIntentResponse();
  v4 = objc_msgSendSuper2(&v5, sel_init);
  v2 = v4;
  v6 = v4;

  return v4;
}

uint64_t type metadata accessor for DeleteHealthSampleIntentResponse()
{
  return objc_opt_self();
}

id DeleteHealthSampleIntentResponse.__allocating_init(coder:)(void *a1)
{
  objc_class *v1;
  id v4;

  v4 = objc_msgSend(objc_allocWithZone(v1), sel_initWithCoder_, a1);

  return v4;
}

id DeleteHealthSampleIntentResponse.init(coder:)(void *a1)
{
  char *v1;
  char *v2;
  id v3;
  id v7;
  objc_super v8;
  void *v9;
  id v10;

  v9 = a1;
  v2 = v1;
  v10 = v1;
  *(_QWORD *)&v1[OBJC_IVAR___DeleteHealthSampleIntentResponse_code] = 0;

  v8.receiver = v10;
  v8.super_class = (Class)type metadata accessor for DeleteHealthSampleIntentResponse();
  v7 = objc_msgSendSuper2(&v8, sel_initWithCoder_, a1);
  if (v7)
  {
    v3 = v7;
    v10 = v7;

    return v7;
  }
  else
  {

    return 0;
  }
}

id DeleteHealthSampleIntentResponse.__allocating_init(backingStore:)(void *a1)
{
  objc_class *v1;
  id v4;

  v4 = objc_msgSend(objc_allocWithZone(v1), sel_initWithBackingStore_, a1);

  return v4;
}

id DeleteHealthSampleIntentResponse.init(backingStore:)(void *a1)
{
  char *v1;
  char *v2;
  id v3;
  id v7;
  objc_super v8;
  void *v9;
  id v10;

  v9 = a1;
  v2 = v1;
  v10 = v1;
  *(_QWORD *)&v1[OBJC_IVAR___DeleteHealthSampleIntentResponse_code] = 0;

  v8.receiver = v10;
  v8.super_class = (Class)type metadata accessor for DeleteHealthSampleIntentResponse();
  v7 = objc_msgSendSuper2(&v8, sel_initWithBackingStore_, a1);
  if (v7)
  {
    v3 = v7;
    v10 = v7;

    return v7;
  }
  else
  {

    return 0;
  }
}

id DeleteHealthSampleIntentResponse.__allocating_init(propertiesByName:)(uint64_t a1)
{
  objc_class *v1;
  id v2;
  id v4;
  id v5;
  Class isa;
  id v8;

  v8 = objc_allocWithZone(v1);
  if (a1)
  {
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    v2 = objc_msgSend(v8, sel_initWithPropertiesByName_, isa);
  }
  else
  {
    v2 = objc_msgSend(v8, sel_initWithPropertiesByName_, 0);
  }
  v5 = v2;

  return v5;
}

id DeleteHealthSampleIntentResponse.init(propertiesByName:)(uint64_t a1)
{
  char *v1;
  char *v2;
  id v3;
  id v6;
  Class isa;
  Class v8;
  objc_super v10;
  uint64_t v11;
  id v12;

  v11 = a1;
  v2 = v1;
  v12 = v1;
  *(_QWORD *)&v1[OBJC_IVAR___DeleteHealthSampleIntentResponse_code] = 0;

  swift_bridgeObjectRetain();
  if (a1)
  {
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    v8 = isa;
  }
  else
  {
    v8 = 0;
  }
  v10.receiver = v12;
  v10.super_class = (Class)type metadata accessor for DeleteHealthSampleIntentResponse();
  v6 = objc_msgSendSuper2(&v10, sel_initWithPropertiesByName_, v8);

  if (v6)
  {
    v3 = v6;
    v12 = v6;
    swift_bridgeObjectRelease();

    return v6;
  }
  else
  {

    swift_bridgeObjectRelease();
    return 0;
  }
}

id DeleteHealthSampleIntentResponse.__deallocating_deinit()
{
  void *v0;
  objc_super v2;
  void *v3;

  v3 = v0;
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for DeleteHealthSampleIntentResponse();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

unint64_t base witness table accessor for Equatable in DeleteHealthSampleIntentResponseCode()
{
  return lazy protocol witness table accessor for type DeleteHealthSampleIntentResponseCode and conformance DeleteHealthSampleIntentResponseCode();
}

unint64_t lazy protocol witness table accessor for type DeleteHealthSampleIntentResponseCode and conformance DeleteHealthSampleIntentResponseCode()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type DeleteHealthSampleIntentResponseCode and conformance DeleteHealthSampleIntentResponseCode;
  if (!lazy protocol witness table cache variable for type DeleteHealthSampleIntentResponseCode and conformance DeleteHealthSampleIntentResponseCode)
  {
    v0 = MEMORY[0x24957D92C](&protocol conformance descriptor for DeleteHealthSampleIntentResponseCode, &type metadata for DeleteHealthSampleIntentResponseCode);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type DeleteHealthSampleIntentResponseCode and conformance DeleteHealthSampleIntentResponseCode);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type DeleteHealthSampleIntentResponseCode and conformance DeleteHealthSampleIntentResponseCode;
  if (!lazy protocol witness table cache variable for type DeleteHealthSampleIntentResponseCode and conformance DeleteHealthSampleIntentResponseCode)
  {
    v0 = MEMORY[0x24957D92C](&protocol conformance descriptor for DeleteHealthSampleIntentResponseCode, &type metadata for DeleteHealthSampleIntentResponseCode);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type DeleteHealthSampleIntentResponseCode and conformance DeleteHealthSampleIntentResponseCode);
    return v0;
  }
  return v2;
}

void sub_24757D804(id *a1@<X0>, uint64_t *a2@<X8>)
{
  key path getter for DeleteHealthSampleIntentResponse.code : DeleteHealthSampleIntentResponse(a1, a2);
}

void sub_24757D818(uint64_t *a1, id *a2)
{
  key path setter for DeleteHealthSampleIntentResponse.code : DeleteHealthSampleIntentResponse(a1, a2);
}

ValueMetadata *type metadata accessor for DeleteHealthSampleIntentResponseCode()
{
  return &type metadata for DeleteHealthSampleIntentResponseCode;
}

SiriWellnessIntents::WellnessSort_optional __swiftcall WellnessSort.init(rawValue:)(Swift::String rawValue)
{
  uint64_t v1;
  uint64_t v2;
  Swift::Int v6;
  SiriWellnessIntents::WellnessSort_optional v7;

  v1 = _allocateUninitializedArray<A>(_:)();
  *(_QWORD *)v2 = "average";
  *(_QWORD *)(v2 + 8) = 7;
  *(_BYTE *)(v2 + 16) = 2;
  *(_QWORD *)(v2 + 24) = "minimum";
  *(_QWORD *)(v2 + 32) = 7;
  *(_BYTE *)(v2 + 40) = 2;
  *(_QWORD *)(v2 + 48) = "maximum";
  *(_QWORD *)(v2 + 56) = 7;
  *(_BYTE *)(v2 + 64) = 2;
  *(_QWORD *)(v2 + 72) = "sum";
  *(_QWORD *)(v2 + 80) = 3;
  *(_BYTE *)(v2 + 88) = 2;
  *(_QWORD *)(v2 + 96) = "first";
  *(_QWORD *)(v2 + 104) = 5;
  *(_BYTE *)(v2 + 112) = 2;
  *(_QWORD *)(v2 + 120) = "last";
  *(_QWORD *)(v2 + 128) = 4;
  *(_BYTE *)(v2 + 136) = 2;
  *(_QWORD *)(v2 + 144) = "next";
  *(_QWORD *)(v2 + 152) = 4;
  *(_BYTE *)(v2 + 160) = 2;
  *(_QWORD *)(v2 + 168) = "above";
  *(_QWORD *)(v2 + 176) = 5;
  *(_BYTE *)(v2 + 184) = 2;
  *(_QWORD *)(v2 + 192) = "below";
  *(_QWORD *)(v2 + 200) = 5;
  *(_BYTE *)(v2 + 208) = 2;
  *(_QWORD *)(v2 + 216) = "unspecified";
  *(_QWORD *)(v2 + 224) = 11;
  *(_BYTE *)(v2 + 232) = 2;
  _finalizeUninitializedArray<A>(_:)();
  v6 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)v1, rawValue);
  swift_bridgeObjectRelease();
  switch(v6)
  {
    case 0:
      v7.value = SiriWellnessIntents_WellnessSort_average;
LABEL_22:
      swift_bridgeObjectRelease();
      return v7;
    case 1:
      v7.value = SiriWellnessIntents_WellnessSort_minimum;
      goto LABEL_22;
    case 2:
      v7.value = SiriWellnessIntents_WellnessSort_maximum;
      goto LABEL_22;
    case 3:
      v7.value = SiriWellnessIntents_WellnessSort_sum;
      goto LABEL_22;
    case 4:
      v7.value = SiriWellnessIntents_WellnessSort_first;
      goto LABEL_22;
    case 5:
      v7.value = SiriWellnessIntents_WellnessSort_last;
      goto LABEL_22;
    case 6:
      v7.value = SiriWellnessIntents_WellnessSort_next;
      goto LABEL_22;
    case 7:
      v7.value = SiriWellnessIntents_WellnessSort_above;
      goto LABEL_22;
    case 8:
      v7.value = SiriWellnessIntents_WellnessSort_below;
      goto LABEL_22;
    case 9:
      v7.value = SiriWellnessIntents_WellnessSort_unspecified;
      goto LABEL_22;
  }
  swift_bridgeObjectRelease();
  return (SiriWellnessIntents::WellnessSort_optional)10;
}

void WellnessSort.rawValue.getter(char a1)
{
  __asm { BR              X8 }
}

uint64_t sub_24757DC34()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("average", 7uLL, 1)._countAndFlagsBits;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance WellnessSort()
{
  lazy protocol witness table accessor for type WellnessSort and conformance WellnessSort();
  return == infix<A>(_:_:)() & 1;
}

unint64_t base witness table accessor for Equatable in WellnessSort()
{
  return lazy protocol witness table accessor for type WellnessSort and conformance WellnessSort();
}

unint64_t lazy protocol witness table accessor for type WellnessSort and conformance WellnessSort()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type WellnessSort and conformance WellnessSort;
  if (!lazy protocol witness table cache variable for type WellnessSort and conformance WellnessSort)
  {
    v0 = MEMORY[0x24957D92C](&protocol conformance descriptor for WellnessSort, &type metadata for WellnessSort);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type WellnessSort and conformance WellnessSort);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type WellnessSort and conformance WellnessSort;
  if (!lazy protocol witness table cache variable for type WellnessSort and conformance WellnessSort)
  {
    v0 = MEMORY[0x24957D92C](&protocol conformance descriptor for WellnessSort, &type metadata for WellnessSort);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type WellnessSort and conformance WellnessSort);
    return v0;
  }
  return v2;
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance WellnessSort()
{
  lazy protocol witness table accessor for type WellnessSort and conformance WellnessSort();
  return RawRepresentable<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance WellnessSort()
{
  lazy protocol witness table accessor for type WellnessSort and conformance WellnessSort();
  return RawRepresentable<>.hash(into:)();
}

uint64_t protocol witness for Hashable._rawHashValue(seed:) in conformance WellnessSort()
{
  lazy protocol witness table accessor for type WellnessSort and conformance WellnessSort();
  return RawRepresentable<>._rawHashValue(seed:)();
}

SiriWellnessIntents::WellnessSort_optional protocol witness for RawRepresentable.init(rawValue:) in conformance WellnessSort@<W0>(Swift::String *a1@<X0>, SiriWellnessIntents::WellnessSort_optional *a2@<X8>)
{
  SiriWellnessIntents::WellnessSort_optional result;

  result.value = WellnessSort.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance WellnessSort(_QWORD *a1@<X8>)
{
  char *v1;
  uint64_t v2;
  uint64_t v3;

  WellnessSort.rawValue.getter(*v1);
  *a1 = v2;
  a1[1] = v3;
}

uint64_t getEnumTagSinglePayload for WellnessSort(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v5;
  int v6;
  unsigned int v7;
  int v8;

  if (a2)
  {
    if (a2 <= 0xF6)
      goto LABEL_15;
    v7 = ((a2 + 9) >> 8) + 1;
    v8 = 1;
    if (v7 >= 0x100)
    {
      if (v7 >= 0x10000)
        v2 = 4;
      else
        v2 = 2;
      v8 = v2;
    }
    if (v8 == 1)
      v6 = a1[1];
    else
      v6 = v8 == 2 ? *(unsigned __int16 *)(a1 + 1) : *(_DWORD *)(a1 + 1);
    if (v6)
    {
      v5 = (*a1 | ((v6 - 1) << 8)) + 246;
    }
    else
    {
LABEL_15:
      v3 = *a1 - 10;
      if (v3 < 0)
        v3 = -1;
      v5 = v3;
    }
  }
  else
  {
    v5 = -1;
  }
  return (v5 + 1);
}

_BYTE *storeEnumTagSinglePayload for WellnessSort(_BYTE *result, unsigned int a2, unsigned int a3)
{
  int v3;
  unsigned int v4;
  unsigned int v5;
  int v6;
  int v7;

  v7 = 0;
  if (a3 > 0xF6)
  {
    v5 = ((a3 + 9) >> 8) + 1;
    v6 = 1;
    if (v5 >= 0x100)
    {
      if (v5 >= 0x10000)
        v3 = 4;
      else
        v3 = 2;
      v6 = v3;
    }
    v7 = v6;
  }
  if (a2 > 0xF6)
  {
    v4 = ((a2 - 247) >> 8) + 1;
    *result = a2 + 9;
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = v4;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = v4;
      }
      else
      {
        *(_DWORD *)(result + 1) = v4;
      }
    }
  }
  else
  {
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = 0;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = 0;
      }
      else
      {
        *(_DWORD *)(result + 1) = 0;
      }
    }
    if (a2)
      *result = a2 + 9;
  }
  return result;
}

ValueMetadata *type metadata accessor for WellnessSort()
{
  return &type metadata for WellnessSort;
}

char *GetAcitivitySummaryIntentResponse.__allocating_init(code:userActivity:)(uint64_t a1, void *a2)
{
  objc_class *v2;
  id v3;

  v3 = objc_allocWithZone(v2);
  return GetAcitivitySummaryIntentResponse.init(code:userActivity:)(a1, a2);
}

id GetAcitivitySummaryIntent.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

id GetAcitivitySummaryIntent.init()()
{
  id v0;
  id v2;
  objc_super v3;
  id v4;

  v4 = 0;
  v3.receiver = 0;
  v3.super_class = (Class)type metadata accessor for GetAcitivitySummaryIntent();
  v2 = objc_msgSendSuper2(&v3, sel_init);
  v0 = v2;
  v4 = v2;

  return v2;
}

id GetAcitivitySummaryIntent.__allocating_init(coder:)(void *a1)
{
  objc_class *v1;
  id v4;

  v4 = objc_msgSend(objc_allocWithZone(v1), sel_initWithCoder_, a1);

  return v4;
}

id GetAcitivitySummaryIntent.init(coder:)(void *a1)
{
  id v1;
  id v5;
  objc_super v6;
  void *v7;
  id v8;

  v8 = 0;
  v7 = a1;
  v6.receiver = 0;
  v6.super_class = (Class)type metadata accessor for GetAcitivitySummaryIntent();
  v5 = objc_msgSendSuper2(&v6, sel_initWithCoder_, a1);
  if (v5)
  {
    v1 = v5;
    v8 = v5;

    return v5;
  }
  else
  {

    return 0;
  }
}

id GetAcitivitySummaryIntent.__allocating_init(identifier:backingStore:)(uint64_t a1, uint64_t a2, void *a3)
{
  objc_class *v3;
  id v5;
  uint64_t v6;
  void *v7;
  id v11;

  v11 = objc_allocWithZone(v3);
  if (a2)
  {
    v6 = MEMORY[0x24957CFB4](a1);
    swift_bridgeObjectRelease();
    v7 = (void *)v6;
  }
  else
  {
    v7 = 0;
  }
  v5 = objc_msgSend(v11, sel_initWithIdentifier_backingStore_);

  return v5;
}

id GetAcitivitySummaryIntent.init(identifier:backingStore:)(uint64_t a1, uint64_t a2, void *a3)
{
  id v3;
  id v5;
  uint64_t v6;
  void *v7;
  objc_super v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  id v15;

  v15 = 0;
  v13 = a1;
  v14 = a2;
  v12 = a3;
  swift_bridgeObjectRetain();
  if (a2)
  {
    v6 = MEMORY[0x24957CFB4](a1);
    swift_bridgeObjectRelease();
    v7 = (void *)v6;
  }
  else
  {
    v7 = 0;
  }
  v11.receiver = 0;
  v11.super_class = (Class)type metadata accessor for GetAcitivitySummaryIntent();
  v5 = objc_msgSendSuper2(&v11, sel_initWithIdentifier_backingStore_, v7, a3);

  v3 = v5;
  v15 = v5;

  swift_bridgeObjectRelease();
  return v5;
}

id GetAcitivitySummaryIntent.__allocating_init(domain:verb:parametersByName:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  objc_class *v5;
  id v6;
  id v8;
  id v9;
  Class isa;
  id v13;
  void *v16;
  void *v18;

  v13 = objc_allocWithZone(v5);
  v16 = (void *)MEMORY[0x24957CFB4](a1, a2);
  v18 = (void *)MEMORY[0x24957CFB4](a3, a4);
  if (a5)
  {
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    v6 = objc_msgSend(v13, sel_initWithDomain_verb_parametersByName_, v16, v18, isa);
  }
  else
  {
    v6 = objc_msgSend(v13, sel_initWithDomain_verb_parametersByName_, v16, v18, 0);
  }
  v9 = v6;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v9;
}

id GetAcitivitySummaryIntent.init(domain:verb:parametersByName:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  id v5;
  id v7;
  Class isa;
  Class v9;
  id v12;
  void *v15;
  objc_super v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id v23;

  v23 = 0;
  v21 = a1;
  v22 = a2;
  v19 = a3;
  v20 = a4;
  v18 = a5;
  swift_bridgeObjectRetain();
  v12 = (id)MEMORY[0x24957CFB4](a1, a2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v15 = (void *)MEMORY[0x24957CFB4](a3, a4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  if (a5)
  {
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    v9 = isa;
  }
  else
  {
    v9 = 0;
  }
  v17.receiver = 0;
  v17.super_class = (Class)type metadata accessor for GetAcitivitySummaryIntent();
  v7 = objc_msgSendSuper2(&v17, sel_initWithDomain_verb_parametersByName_, v12, v15, v9);

  v5 = v7;
  v23 = v7;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return v7;
}

id GetAcitivitySummaryIntent.__deallocating_deinit()
{
  void *v0;
  objc_super v2;
  void *v3;

  v3 = v0;
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for GetAcitivitySummaryIntent();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t GetAcitivitySummaryIntentResponseCode.init(rawValue:)(uint64_t a1)
{
  switch(a1)
  {
    case 0:
      return 0;
    case 1:
      return 1;
    case 2:
      return 2;
    case 3:
      return 3;
    case 4:
      return 4;
    case 5:
      return 5;
    case 6:
      return 6;
    case 100:
      return 100;
    case 101:
      return 101;
    case 102:
      return 102;
    case 103:
      return 103;
  }
  return 0;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance GetAcitivitySummaryIntentResponseCode()
{
  lazy protocol witness table accessor for type GetAcitivitySummaryIntentResponseCode and conformance GetAcitivitySummaryIntentResponseCode();
  return == infix<A>(_:_:)() & 1;
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance GetAcitivitySummaryIntentResponseCode()
{
  lazy protocol witness table accessor for type GetAcitivitySummaryIntentResponseCode and conformance GetAcitivitySummaryIntentResponseCode();
  return RawRepresentable<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance GetAcitivitySummaryIntentResponseCode()
{
  lazy protocol witness table accessor for type GetAcitivitySummaryIntentResponseCode and conformance GetAcitivitySummaryIntentResponseCode();
  return RawRepresentable<>.hash(into:)();
}

uint64_t protocol witness for Hashable._rawHashValue(seed:) in conformance GetAcitivitySummaryIntentResponseCode()
{
  lazy protocol witness table accessor for type GetAcitivitySummaryIntentResponseCode and conformance GetAcitivitySummaryIntentResponseCode();
  return RawRepresentable<>._rawHashValue(seed:)();
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance GetAcitivitySummaryIntentResponseCode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  char v3;

  result = GetAcitivitySummaryIntentResponseCode.init(rawValue:)(*a1);
  *(_QWORD *)a2 = result;
  *(_BYTE *)(a2 + 8) = v3 & 1;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance GetAcitivitySummaryIntentResponseCode(_QWORD *a1@<X8>)
{
  uint64_t v1;

  GetAcitivitySummaryIntentResponseCode.rawValue.getter();
  *a1 = v1;
}

uint64_t GetAcitivitySummaryIntentResponse.code.getter()
{
  uint64_t v0;
  uint64_t *v2;
  uint64_t v3;

  v2 = (uint64_t *)(v0 + OBJC_IVAR___GetAcitivitySummaryIntentResponse_code);
  swift_beginAccess();
  v3 = *v2;
  swift_endAccess();
  return v3;
}

uint64_t GetAcitivitySummaryIntentResponse.code.setter(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)(v1 + OBJC_IVAR___GetAcitivitySummaryIntentResponse_code);
  swift_beginAccess();
  *v3 = a1;
  return swift_endAccess();
}

uint64_t (*GetAcitivitySummaryIntentResponse.code.modify())()
{
  swift_beginAccess();
  return LogQuantityIntentResponse.code.modify;
}

void key path getter for GetAcitivitySummaryIntentResponse.code : GetAcitivitySummaryIntentResponse(id *a1@<X0>, uint64_t *a2@<X8>)
{
  id v2;
  id v3;

  v3 = *a1;
  v2 = *a1;
  *a2 = GetAcitivitySummaryIntentResponse.code.getter();

}

void key path setter for GetAcitivitySummaryIntentResponse.code : GetAcitivitySummaryIntentResponse(uint64_t *a1, id *a2)
{
  id v2;
  id v3;
  uint64_t v4;

  v4 = *a1;
  v3 = *a2;
  v2 = *a2;
  GetAcitivitySummaryIntentResponse.code.setter(v4);

}

char *GetAcitivitySummaryIntentResponse.init(code:userActivity:)(uint64_t a1, void *a2)
{
  char *v2;
  char *v3;
  char *v4;
  char *v6;
  char *v9;
  void *v10;

  v9 = (char *)objc_msgSend(v10, sel_init);
  v2 = v9;
  v3 = v9;
  v4 = v9;
  v6 = &v9[OBJC_IVAR___GetAcitivitySummaryIntentResponse_code];
  swift_beginAccess();
  *(_QWORD *)v6 = a1;
  swift_endAccess();

  objc_msgSend(v9, sel_setUserActivity_, a2);
  return v9;
}

uint64_t type metadata accessor for GetAcitivitySummaryIntent()
{
  return objc_opt_self();
}

id GetAcitivitySummaryIntentResponse.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

id GetAcitivitySummaryIntentResponse.init()()
{
  char *v0;
  char *v1;
  id v2;
  id v4;
  objc_super v5;
  void *v6;

  v1 = v0;
  v6 = v0;
  *(_QWORD *)&v0[OBJC_IVAR___GetAcitivitySummaryIntentResponse_code] = 0;

  v5.receiver = v6;
  v5.super_class = (Class)type metadata accessor for GetAcitivitySummaryIntentResponse();
  v4 = objc_msgSendSuper2(&v5, sel_init);
  v2 = v4;
  v6 = v4;

  return v4;
}

uint64_t type metadata accessor for GetAcitivitySummaryIntentResponse()
{
  return objc_opt_self();
}

id GetAcitivitySummaryIntentResponse.__allocating_init(coder:)(void *a1)
{
  objc_class *v1;
  id v4;

  v4 = objc_msgSend(objc_allocWithZone(v1), sel_initWithCoder_, a1);

  return v4;
}

id GetAcitivitySummaryIntentResponse.init(coder:)(void *a1)
{
  char *v1;
  char *v2;
  id v3;
  id v7;
  objc_super v8;
  void *v9;
  id v10;

  v9 = a1;
  v2 = v1;
  v10 = v1;
  *(_QWORD *)&v1[OBJC_IVAR___GetAcitivitySummaryIntentResponse_code] = 0;

  v8.receiver = v10;
  v8.super_class = (Class)type metadata accessor for GetAcitivitySummaryIntentResponse();
  v7 = objc_msgSendSuper2(&v8, sel_initWithCoder_, a1);
  if (v7)
  {
    v3 = v7;
    v10 = v7;

    return v7;
  }
  else
  {

    return 0;
  }
}

id GetAcitivitySummaryIntentResponse.__allocating_init(backingStore:)(void *a1)
{
  objc_class *v1;
  id v4;

  v4 = objc_msgSend(objc_allocWithZone(v1), sel_initWithBackingStore_, a1);

  return v4;
}

id GetAcitivitySummaryIntentResponse.init(backingStore:)(void *a1)
{
  char *v1;
  char *v2;
  id v3;
  id v7;
  objc_super v8;
  void *v9;
  id v10;

  v9 = a1;
  v2 = v1;
  v10 = v1;
  *(_QWORD *)&v1[OBJC_IVAR___GetAcitivitySummaryIntentResponse_code] = 0;

  v8.receiver = v10;
  v8.super_class = (Class)type metadata accessor for GetAcitivitySummaryIntentResponse();
  v7 = objc_msgSendSuper2(&v8, sel_initWithBackingStore_, a1);
  if (v7)
  {
    v3 = v7;
    v10 = v7;

    return v7;
  }
  else
  {

    return 0;
  }
}

id GetAcitivitySummaryIntentResponse.__allocating_init(propertiesByName:)(uint64_t a1)
{
  objc_class *v1;
  id v2;
  id v4;
  id v5;
  Class isa;
  id v8;

  v8 = objc_allocWithZone(v1);
  if (a1)
  {
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    v2 = objc_msgSend(v8, sel_initWithPropertiesByName_, isa);
  }
  else
  {
    v2 = objc_msgSend(v8, sel_initWithPropertiesByName_, 0);
  }
  v5 = v2;

  return v5;
}

id GetAcitivitySummaryIntentResponse.init(propertiesByName:)(uint64_t a1)
{
  char *v1;
  char *v2;
  id v3;
  id v6;
  Class isa;
  Class v8;
  objc_super v10;
  uint64_t v11;
  id v12;

  v11 = a1;
  v2 = v1;
  v12 = v1;
  *(_QWORD *)&v1[OBJC_IVAR___GetAcitivitySummaryIntentResponse_code] = 0;

  swift_bridgeObjectRetain();
  if (a1)
  {
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    v8 = isa;
  }
  else
  {
    v8 = 0;
  }
  v10.receiver = v12;
  v10.super_class = (Class)type metadata accessor for GetAcitivitySummaryIntentResponse();
  v6 = objc_msgSendSuper2(&v10, sel_initWithPropertiesByName_, v8);

  if (v6)
  {
    v3 = v6;
    v12 = v6;
    swift_bridgeObjectRelease();

    return v6;
  }
  else
  {

    swift_bridgeObjectRelease();
    return 0;
  }
}

id GetAcitivitySummaryIntentResponse.__deallocating_deinit()
{
  void *v0;
  objc_super v2;
  void *v3;

  v3 = v0;
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for GetAcitivitySummaryIntentResponse();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

unint64_t base witness table accessor for Equatable in GetAcitivitySummaryIntentResponseCode()
{
  return lazy protocol witness table accessor for type GetAcitivitySummaryIntentResponseCode and conformance GetAcitivitySummaryIntentResponseCode();
}

unint64_t lazy protocol witness table accessor for type GetAcitivitySummaryIntentResponseCode and conformance GetAcitivitySummaryIntentResponseCode()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GetAcitivitySummaryIntentResponseCode and conformance GetAcitivitySummaryIntentResponseCode;
  if (!lazy protocol witness table cache variable for type GetAcitivitySummaryIntentResponseCode and conformance GetAcitivitySummaryIntentResponseCode)
  {
    v0 = MEMORY[0x24957D92C](&protocol conformance descriptor for GetAcitivitySummaryIntentResponseCode, &type metadata for GetAcitivitySummaryIntentResponseCode);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GetAcitivitySummaryIntentResponseCode and conformance GetAcitivitySummaryIntentResponseCode);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GetAcitivitySummaryIntentResponseCode and conformance GetAcitivitySummaryIntentResponseCode;
  if (!lazy protocol witness table cache variable for type GetAcitivitySummaryIntentResponseCode and conformance GetAcitivitySummaryIntentResponseCode)
  {
    v0 = MEMORY[0x24957D92C](&protocol conformance descriptor for GetAcitivitySummaryIntentResponseCode, &type metadata for GetAcitivitySummaryIntentResponseCode);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GetAcitivitySummaryIntentResponseCode and conformance GetAcitivitySummaryIntentResponseCode);
    return v0;
  }
  return v2;
}

void sub_24757FC4C(id *a1@<X0>, uint64_t *a2@<X8>)
{
  key path getter for GetAcitivitySummaryIntentResponse.code : GetAcitivitySummaryIntentResponse(a1, a2);
}

void sub_24757FC60(uint64_t *a1, id *a2)
{
  key path setter for GetAcitivitySummaryIntentResponse.code : GetAcitivitySummaryIntentResponse(a1, a2);
}

ValueMetadata *type metadata accessor for GetAcitivitySummaryIntentResponseCode()
{
  return &type metadata for GetAcitivitySummaryIntentResponseCode;
}

id GetCardioFitnessIntent.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

id GetCardioFitnessIntent.init()()
{
  id v0;
  id v2;
  objc_super v3;
  id v4;

  v4 = 0;
  v3.receiver = 0;
  v3.super_class = (Class)type metadata accessor for GetCardioFitnessIntent();
  v2 = objc_msgSendSuper2(&v3, sel_init);
  v0 = v2;
  v4 = v2;

  return v2;
}

uint64_t type metadata accessor for GetCardioFitnessIntent()
{
  return objc_opt_self();
}

id GetCardioFitnessIntent.__allocating_init(coder:)(void *a1)
{
  objc_class *v1;
  id v4;

  v4 = objc_msgSend(objc_allocWithZone(v1), sel_initWithCoder_, a1);

  return v4;
}

id GetCardioFitnessIntent.init(coder:)(void *a1)
{
  id v1;
  id v5;
  objc_super v6;
  void *v7;
  id v8;

  v8 = 0;
  v7 = a1;
  v6.receiver = 0;
  v6.super_class = (Class)type metadata accessor for GetCardioFitnessIntent();
  v5 = objc_msgSendSuper2(&v6, sel_initWithCoder_, a1);
  if (v5)
  {
    v1 = v5;
    v8 = v5;

    return v5;
  }
  else
  {

    return 0;
  }
}

id GetCardioFitnessIntent.__allocating_init(identifier:backingStore:)(uint64_t a1, uint64_t a2, void *a3)
{
  objc_class *v3;
  id v5;
  uint64_t v6;
  void *v7;
  id v11;

  v11 = objc_allocWithZone(v3);
  if (a2)
  {
    v6 = MEMORY[0x24957CFB4](a1);
    swift_bridgeObjectRelease();
    v7 = (void *)v6;
  }
  else
  {
    v7 = 0;
  }
  v5 = objc_msgSend(v11, sel_initWithIdentifier_backingStore_);

  return v5;
}

id GetCardioFitnessIntent.init(identifier:backingStore:)(uint64_t a1, uint64_t a2, void *a3)
{
  id v3;
  id v5;
  uint64_t v6;
  void *v7;
  objc_super v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  id v15;

  v15 = 0;
  v13 = a1;
  v14 = a2;
  v12 = a3;
  swift_bridgeObjectRetain();
  if (a2)
  {
    v6 = MEMORY[0x24957CFB4](a1);
    swift_bridgeObjectRelease();
    v7 = (void *)v6;
  }
  else
  {
    v7 = 0;
  }
  v11.receiver = 0;
  v11.super_class = (Class)type metadata accessor for GetCardioFitnessIntent();
  v5 = objc_msgSendSuper2(&v11, sel_initWithIdentifier_backingStore_, v7, a3);

  v3 = v5;
  v15 = v5;

  swift_bridgeObjectRelease();
  return v5;
}

id GetCardioFitnessIntent.__allocating_init(domain:verb:parametersByName:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  objc_class *v5;
  id v6;
  id v8;
  id v9;
  Class isa;
  id v13;
  void *v16;
  void *v18;

  v13 = objc_allocWithZone(v5);
  v16 = (void *)MEMORY[0x24957CFB4](a1, a2);
  v18 = (void *)MEMORY[0x24957CFB4](a3, a4);
  if (a5)
  {
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    v6 = objc_msgSend(v13, sel_initWithDomain_verb_parametersByName_, v16, v18, isa);
  }
  else
  {
    v6 = objc_msgSend(v13, sel_initWithDomain_verb_parametersByName_, v16, v18, 0);
  }
  v9 = v6;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v9;
}

id GetCardioFitnessIntent.init(domain:verb:parametersByName:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  id v5;
  id v7;
  Class isa;
  Class v9;
  id v12;
  void *v15;
  objc_super v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id v23;

  v23 = 0;
  v21 = a1;
  v22 = a2;
  v19 = a3;
  v20 = a4;
  v18 = a5;
  swift_bridgeObjectRetain();
  v12 = (id)MEMORY[0x24957CFB4](a1, a2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v15 = (void *)MEMORY[0x24957CFB4](a3, a4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  if (a5)
  {
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    v9 = isa;
  }
  else
  {
    v9 = 0;
  }
  v17.receiver = 0;
  v17.super_class = (Class)type metadata accessor for GetCardioFitnessIntent();
  v7 = objc_msgSendSuper2(&v17, sel_initWithDomain_verb_parametersByName_, v12, v15, v9);

  v5 = v7;
  v23 = v7;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return v7;
}

id GetCardioFitnessIntent.__deallocating_deinit()
{
  void *v0;
  objc_super v2;
  void *v3;

  v3 = v0;
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for GetCardioFitnessIntent();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t GetCardioFitnessIntentResponseCode.init(rawValue:)(uint64_t a1)
{
  switch(a1)
  {
    case 0:
      return 0;
    case 1:
      return 1;
    case 2:
      return 2;
    case 3:
      return 3;
    case 4:
      return 4;
    case 5:
      return 5;
    case 6:
      return 6;
    case 100:
      return 100;
    case 101:
      return 101;
    case 102:
      return 102;
    case 103:
      return 103;
  }
  return 0;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance GetCardioFitnessIntentResponseCode()
{
  lazy protocol witness table accessor for type GetCardioFitnessIntentResponseCode and conformance GetCardioFitnessIntentResponseCode();
  return == infix<A>(_:_:)() & 1;
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance GetCardioFitnessIntentResponseCode()
{
  lazy protocol witness table accessor for type GetCardioFitnessIntentResponseCode and conformance GetCardioFitnessIntentResponseCode();
  return RawRepresentable<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance GetCardioFitnessIntentResponseCode()
{
  lazy protocol witness table accessor for type GetCardioFitnessIntentResponseCode and conformance GetCardioFitnessIntentResponseCode();
  return RawRepresentable<>.hash(into:)();
}

uint64_t protocol witness for Hashable._rawHashValue(seed:) in conformance GetCardioFitnessIntentResponseCode()
{
  lazy protocol witness table accessor for type GetCardioFitnessIntentResponseCode and conformance GetCardioFitnessIntentResponseCode();
  return RawRepresentable<>._rawHashValue(seed:)();
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance GetCardioFitnessIntentResponseCode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  char v3;

  result = GetCardioFitnessIntentResponseCode.init(rawValue:)(*a1);
  *(_QWORD *)a2 = result;
  *(_BYTE *)(a2 + 8) = v3 & 1;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance GetCardioFitnessIntentResponseCode(_QWORD *a1@<X8>)
{
  uint64_t v1;

  GetCardioFitnessIntentResponseCode.rawValue.getter();
  *a1 = v1;
}

uint64_t GetCardioFitnessIntentResponse.code.getter()
{
  uint64_t v0;
  uint64_t *v2;
  uint64_t v3;

  v2 = (uint64_t *)(v0 + OBJC_IVAR___GetCardioFitnessIntentResponse_code);
  swift_beginAccess();
  v3 = *v2;
  swift_endAccess();
  return v3;
}

uint64_t GetCardioFitnessIntentResponse.code.setter(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)(v1 + OBJC_IVAR___GetCardioFitnessIntentResponse_code);
  swift_beginAccess();
  *v3 = a1;
  return swift_endAccess();
}

uint64_t (*GetCardioFitnessIntentResponse.code.modify())()
{
  swift_beginAccess();
  return LogQuantityIntentResponse.code.modify;
}

void key path getter for GetCardioFitnessIntentResponse.code : GetCardioFitnessIntentResponse(id *a1@<X0>, uint64_t *a2@<X8>)
{
  id v2;
  id v3;

  v3 = *a1;
  v2 = *a1;
  *a2 = GetCardioFitnessIntentResponse.code.getter();

}

void key path setter for GetCardioFitnessIntentResponse.code : GetCardioFitnessIntentResponse(uint64_t *a1, id *a2)
{
  id v2;
  id v3;
  uint64_t v4;

  v4 = *a1;
  v3 = *a2;
  v2 = *a2;
  GetCardioFitnessIntentResponse.code.setter(v4);

}

char *GetCardioFitnessIntentResponse.__allocating_init(code:userActivity:)(uint64_t a1, void *a2)
{
  objc_class *v2;
  id v3;

  v3 = objc_allocWithZone(v2);
  return GetCardioFitnessIntentResponse.init(code:userActivity:)(a1, a2);
}

char *GetCardioFitnessIntentResponse.init(code:userActivity:)(uint64_t a1, void *a2)
{
  char *v2;
  char *v3;
  char *v4;
  char *v6;
  char *v9;
  void *v10;

  v9 = (char *)objc_msgSend(v10, sel_init);
  v2 = v9;
  v3 = v9;
  v4 = v9;
  v6 = &v9[OBJC_IVAR___GetCardioFitnessIntentResponse_code];
  swift_beginAccess();
  *(_QWORD *)v6 = a1;
  swift_endAccess();

  objc_msgSend(v9, sel_setUserActivity_, a2);
  return v9;
}

id GetCardioFitnessIntentResponse.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

id GetCardioFitnessIntentResponse.init()()
{
  char *v0;
  char *v1;
  id v2;
  id v4;
  objc_super v5;
  void *v6;

  v1 = v0;
  v6 = v0;
  *(_QWORD *)&v0[OBJC_IVAR___GetCardioFitnessIntentResponse_code] = 0;

  v5.receiver = v6;
  v5.super_class = (Class)type metadata accessor for GetCardioFitnessIntentResponse();
  v4 = objc_msgSendSuper2(&v5, sel_init);
  v2 = v4;
  v6 = v4;

  return v4;
}

uint64_t type metadata accessor for GetCardioFitnessIntentResponse()
{
  return objc_opt_self();
}

id GetCardioFitnessIntentResponse.__allocating_init(coder:)(void *a1)
{
  objc_class *v1;
  id v4;

  v4 = objc_msgSend(objc_allocWithZone(v1), sel_initWithCoder_, a1);

  return v4;
}

id GetCardioFitnessIntentResponse.init(coder:)(void *a1)
{
  char *v1;
  char *v2;
  id v3;
  id v7;
  objc_super v8;
  void *v9;
  id v10;

  v9 = a1;
  v2 = v1;
  v10 = v1;
  *(_QWORD *)&v1[OBJC_IVAR___GetCardioFitnessIntentResponse_code] = 0;

  v8.receiver = v10;
  v8.super_class = (Class)type metadata accessor for GetCardioFitnessIntentResponse();
  v7 = objc_msgSendSuper2(&v8, sel_initWithCoder_, a1);
  if (v7)
  {
    v3 = v7;
    v10 = v7;

    return v7;
  }
  else
  {

    return 0;
  }
}

id GetCardioFitnessIntentResponse.__allocating_init(backingStore:)(void *a1)
{
  objc_class *v1;
  id v4;

  v4 = objc_msgSend(objc_allocWithZone(v1), sel_initWithBackingStore_, a1);

  return v4;
}

id GetCardioFitnessIntentResponse.init(backingStore:)(void *a1)
{
  char *v1;
  char *v2;
  id v3;
  id v7;
  objc_super v8;
  void *v9;
  id v10;

  v9 = a1;
  v2 = v1;
  v10 = v1;
  *(_QWORD *)&v1[OBJC_IVAR___GetCardioFitnessIntentResponse_code] = 0;

  v8.receiver = v10;
  v8.super_class = (Class)type metadata accessor for GetCardioFitnessIntentResponse();
  v7 = objc_msgSendSuper2(&v8, sel_initWithBackingStore_, a1);
  if (v7)
  {
    v3 = v7;
    v10 = v7;

    return v7;
  }
  else
  {

    return 0;
  }
}

id GetCardioFitnessIntentResponse.__allocating_init(propertiesByName:)(uint64_t a1)
{
  objc_class *v1;
  id v2;
  id v4;
  id v5;
  Class isa;
  id v8;

  v8 = objc_allocWithZone(v1);
  if (a1)
  {
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    v2 = objc_msgSend(v8, sel_initWithPropertiesByName_, isa);
  }
  else
  {
    v2 = objc_msgSend(v8, sel_initWithPropertiesByName_, 0);
  }
  v5 = v2;

  return v5;
}

id GetCardioFitnessIntentResponse.init(propertiesByName:)(uint64_t a1)
{
  char *v1;
  char *v2;
  id v3;
  id v6;
  Class isa;
  Class v8;
  objc_super v10;
  uint64_t v11;
  id v12;

  v11 = a1;
  v2 = v1;
  v12 = v1;
  *(_QWORD *)&v1[OBJC_IVAR___GetCardioFitnessIntentResponse_code] = 0;

  swift_bridgeObjectRetain();
  if (a1)
  {
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    v8 = isa;
  }
  else
  {
    v8 = 0;
  }
  v10.receiver = v12;
  v10.super_class = (Class)type metadata accessor for GetCardioFitnessIntentResponse();
  v6 = objc_msgSendSuper2(&v10, sel_initWithPropertiesByName_, v8);

  if (v6)
  {
    v3 = v6;
    v12 = v6;
    swift_bridgeObjectRelease();

    return v6;
  }
  else
  {

    swift_bridgeObjectRelease();
    return 0;
  }
}

id GetCardioFitnessIntentResponse.__deallocating_deinit()
{
  void *v0;
  objc_super v2;
  void *v3;

  v3 = v0;
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for GetCardioFitnessIntentResponse();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

unint64_t base witness table accessor for Equatable in GetCardioFitnessIntentResponseCode()
{
  return lazy protocol witness table accessor for type GetCardioFitnessIntentResponseCode and conformance GetCardioFitnessIntentResponseCode();
}

unint64_t lazy protocol witness table accessor for type GetCardioFitnessIntentResponseCode and conformance GetCardioFitnessIntentResponseCode()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GetCardioFitnessIntentResponseCode and conformance GetCardioFitnessIntentResponseCode;
  if (!lazy protocol witness table cache variable for type GetCardioFitnessIntentResponseCode and conformance GetCardioFitnessIntentResponseCode)
  {
    v0 = MEMORY[0x24957D92C](&protocol conformance descriptor for GetCardioFitnessIntentResponseCode, &type metadata for GetCardioFitnessIntentResponseCode);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GetCardioFitnessIntentResponseCode and conformance GetCardioFitnessIntentResponseCode);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GetCardioFitnessIntentResponseCode and conformance GetCardioFitnessIntentResponseCode;
  if (!lazy protocol witness table cache variable for type GetCardioFitnessIntentResponseCode and conformance GetCardioFitnessIntentResponseCode)
  {
    v0 = MEMORY[0x24957D92C](&protocol conformance descriptor for GetCardioFitnessIntentResponseCode, &type metadata for GetCardioFitnessIntentResponseCode);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GetCardioFitnessIntentResponseCode and conformance GetCardioFitnessIntentResponseCode);
    return v0;
  }
  return v2;
}

void sub_2475814DC(id *a1@<X0>, uint64_t *a2@<X8>)
{
  key path getter for GetCardioFitnessIntentResponse.code : GetCardioFitnessIntentResponse(a1, a2);
}

void sub_2475814F0(uint64_t *a1, id *a2)
{
  key path setter for GetCardioFitnessIntentResponse.code : GetCardioFitnessIntentResponse(a1, a2);
}

ValueMetadata *type metadata accessor for GetCardioFitnessIntentResponseCode()
{
  return &type metadata for GetCardioFitnessIntentResponseCode;
}

SiriWellnessIntents::WellnessConfirmation_optional __swiftcall WellnessConfirmation.init(rawValue:)(Swift::String rawValue)
{
  uint64_t v1;
  uint64_t v2;
  Swift::Int v6;
  SiriWellnessIntents::WellnessConfirmation_optional v7;

  v1 = _allocateUninitializedArray<A>(_:)();
  *(_QWORD *)v2 = "yes";
  *(_QWORD *)(v2 + 8) = 3;
  *(_BYTE *)(v2 + 16) = 2;
  *(_QWORD *)(v2 + 24) = "no";
  *(_QWORD *)(v2 + 32) = 2;
  *(_BYTE *)(v2 + 40) = 2;
  *(_QWORD *)(v2 + 48) = "cancel";
  *(_QWORD *)(v2 + 56) = 6;
  *(_BYTE *)(v2 + 64) = 2;
  _finalizeUninitializedArray<A>(_:)();
  v6 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)v1, rawValue);
  swift_bridgeObjectRelease();
  switch(v6)
  {
    case 0:
      v7.value = SiriWellnessIntents_WellnessConfirmation_yes;
LABEL_8:
      swift_bridgeObjectRelease();
      return v7;
    case 1:
      v7.value = SiriWellnessIntents_WellnessConfirmation_no;
      goto LABEL_8;
    case 2:
      v7.value = SiriWellnessIntents_WellnessConfirmation_cancel;
      goto LABEL_8;
  }
  swift_bridgeObjectRelease();
  return (SiriWellnessIntents::WellnessConfirmation_optional)3;
}

uint64_t WellnessConfirmation.rawValue.getter(char a1)
{
  if (!a1)
    return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("yes", 3uLL, 1)._countAndFlagsBits;
  if (a1 == 1)
    return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("no", 2uLL, 1)._countAndFlagsBits;
  else
    return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("cancel", 6uLL, 1)._countAndFlagsBits;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance WellnessConfirmation()
{
  lazy protocol witness table accessor for type WellnessConfirmation and conformance WellnessConfirmation();
  return == infix<A>(_:_:)() & 1;
}

unint64_t base witness table accessor for Equatable in WellnessConfirmation()
{
  return lazy protocol witness table accessor for type WellnessConfirmation and conformance WellnessConfirmation();
}

unint64_t lazy protocol witness table accessor for type WellnessConfirmation and conformance WellnessConfirmation()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type WellnessConfirmation and conformance WellnessConfirmation;
  if (!lazy protocol witness table cache variable for type WellnessConfirmation and conformance WellnessConfirmation)
  {
    v0 = MEMORY[0x24957D92C](&protocol conformance descriptor for WellnessConfirmation, &type metadata for WellnessConfirmation);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type WellnessConfirmation and conformance WellnessConfirmation);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type WellnessConfirmation and conformance WellnessConfirmation;
  if (!lazy protocol witness table cache variable for type WellnessConfirmation and conformance WellnessConfirmation)
  {
    v0 = MEMORY[0x24957D92C](&protocol conformance descriptor for WellnessConfirmation, &type metadata for WellnessConfirmation);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type WellnessConfirmation and conformance WellnessConfirmation);
    return v0;
  }
  return v2;
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance WellnessConfirmation()
{
  lazy protocol witness table accessor for type WellnessConfirmation and conformance WellnessConfirmation();
  return RawRepresentable<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance WellnessConfirmation()
{
  lazy protocol witness table accessor for type WellnessConfirmation and conformance WellnessConfirmation();
  return RawRepresentable<>.hash(into:)();
}

uint64_t protocol witness for Hashable._rawHashValue(seed:) in conformance WellnessConfirmation()
{
  lazy protocol witness table accessor for type WellnessConfirmation and conformance WellnessConfirmation();
  return RawRepresentable<>._rawHashValue(seed:)();
}

SiriWellnessIntents::WellnessConfirmation_optional protocol witness for RawRepresentable.init(rawValue:) in conformance WellnessConfirmation@<W0>(Swift::String *a1@<X0>, SiriWellnessIntents::WellnessConfirmation_optional *a2@<X8>)
{
  SiriWellnessIntents::WellnessConfirmation_optional result;

  result.value = WellnessConfirmation.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance WellnessConfirmation@<X0>(uint64_t *a1@<X8>)
{
  char *v1;
  uint64_t result;
  uint64_t v3;

  result = WellnessConfirmation.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t getEnumTagSinglePayload for WellnessConfirmation(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v5;
  int v6;
  unsigned int v7;
  int v8;

  if (a2)
  {
    if (a2 <= 0xFD)
      goto LABEL_15;
    v7 = ((a2 + 2) >> 8) + 1;
    v8 = 1;
    if (v7 >= 0x100)
    {
      if (v7 >= 0x10000)
        v2 = 4;
      else
        v2 = 2;
      v8 = v2;
    }
    if (v8 == 1)
      v6 = a1[1];
    else
      v6 = v8 == 2 ? *(unsigned __int16 *)(a1 + 1) : *(_DWORD *)(a1 + 1);
    if (v6)
    {
      v5 = (*a1 | ((v6 - 1) << 8)) + 253;
    }
    else
    {
LABEL_15:
      v3 = *a1 - 3;
      if (v3 < 0)
        v3 = -1;
      v5 = v3;
    }
  }
  else
  {
    v5 = -1;
  }
  return (v5 + 1);
}

_BYTE *storeEnumTagSinglePayload for WellnessConfirmation(_BYTE *result, unsigned int a2, unsigned int a3)
{
  int v3;
  unsigned int v4;
  unsigned int v5;
  int v6;
  int v7;

  v7 = 0;
  if (a3 > 0xFD)
  {
    v5 = ((a3 + 2) >> 8) + 1;
    v6 = 1;
    if (v5 >= 0x100)
    {
      if (v5 >= 0x10000)
        v3 = 4;
      else
        v3 = 2;
      v6 = v3;
    }
    v7 = v6;
  }
  if (a2 > 0xFD)
  {
    v4 = ((a2 - 254) >> 8) + 1;
    *result = a2 + 2;
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = v4;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = v4;
      }
      else
      {
        *(_DWORD *)(result + 1) = v4;
      }
    }
  }
  else
  {
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = 0;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = 0;
      }
      else
      {
        *(_DWORD *)(result + 1) = 0;
      }
    }
    if (a2)
      *result = a2 + 2;
  }
  return result;
}

ValueMetadata *type metadata accessor for WellnessConfirmation()
{
  return &type metadata for WellnessConfirmation;
}

Swift::tuple_Double_Double __swiftcall minMaxForSample(sample:unit:oMin:oMax:)(HKSample sample, HKUnit unit, Swift::Double oMin, Swift::Double oMax)
{
  objc_class *v4;
  double v5;
  double v6;
  double v7;
  Swift::tuple_Double_Double result;
  Swift::Double v9;
  Swift::Double v10;
  double v11;
  id v12;
  double v13;
  void *v14;
  uint64_t v19;
  double v20;
  double v21;

  v4 = sample.super.super.isa;
  objc_opt_self();
  v19 = swift_dynamicCastObjCClass();
  if (v19)
  {
    v14 = (void *)v19;
  }
  else
  {

    v14 = 0;
  }
  if (v14)
  {
    v12 = objc_msgSend(v14, sel_quantity);
    objc_msgSend(v12, sel_doubleValueForUnit_, unit.super.isa);
    v13 = v5;

    if (oMin == 0.0)
    {
      v11 = v13;
    }
    else
    {
      min<A>(_:_:)();
      v11 = v21;
    }
    max<A>(_:_:)();

    v9 = v11;
    v10 = v20;
  }
  else
  {
    v9 = oMin;
    v10 = oMax;
  }
  v6 = v9;
  v7 = v10;
  result._1 = v7;
  result._0 = v6;
  return result;
}

void conjugate<A>(for:units:target:minKey:maxKey:valueKey:accumulator:)(void *a1, uint64_t a2, void *a3)
{
  id v3;
  id v4;

  v4 = objc_msgSend(a1, sel_objectsForType_);
  type metadata accessor for HKSample();
  lazy protocol witness table accessor for type HKSample and conformance NSObject();
  static Set._unconditionallyBridgeFromObjectiveC(_:)();
  swift_bridgeObjectRetain();
  v3 = a3;
  swift_retain();
  swift_retain();
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Set<HKSample>);
  lazy protocol witness table accessor for type Set<HKSample> and conformance Set<A>();
  Sequence.forEach(_:)();
  swift_bridgeObjectRelease();

  swift_release();
  swift_release();
  swift_release();
  outlined destroy of [HKQuantityType]();

}

void closure #1 in conjugate<A>(for:units:target:minKey:maxKey:valueKey:accumulator:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  Class *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  unint64_t v16;
  objc_class *v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  id v22;
  id v23;
  id v24;
  void *v25;
  void *v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  void (*v30)(char *, uint64_t, uint64_t);
  HKUnit v31;
  Swift::Double v32;
  void (*v33)(char *, uint64_t);
  Swift::tuple_Double_Double v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  id *v38;
  uint64_t v39;
  objc_class *v40;
  objc_class *v41;
  uint64_t v42;
  id v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  unint64_t v50;
  uint64_t v51;
  char *v52;
  unint64_t v53;
  char *v54;
  HKSample v55;
  uint64_t v56;
  id v57;
  _QWORD v58[2];
  uint64_t v59;
  id v60;
  uint64_t v61;
  Swift::Double v62;
  Swift::Double v63;
  Swift::tuple_Double_Double v64;
  Swift::Double v65;
  Swift::Double v66;
  objc_class *v67;
  objc_class *v68;
  objc_class *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  Class isa;
  uint64_t v77;

  v56 = a2;
  v43 = a3;
  v44 = a4;
  v45 = a5;
  v46 = a6;
  v47 = a7;
  isa = 0;
  v75 = 0;
  v74 = 0;
  v73 = 0;
  v72 = 0;
  v71 = 0;
  v70 = 0;
  v67 = 0;
  v64 = (Swift::tuple_Double_Double)0;
  v61 = 0;
  v60 = 0;
  v59 = 0;
  v48 = *(_QWORD *)(*a5 + *MEMORY[0x24BEE2B70]);
  v77 = v48;
  v49 = *(_QWORD **)(v48 - 8);
  v51 = v49[8];
  v50 = (v51 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](a2);
  v52 = (char *)&v20 - v50;
  v53 = v50;
  MEMORY[0x24BDAC7A8](v7);
  v54 = (char *)&v20 - v53;
  v55.super.super.isa = *v8;
  isa = v55.super.super.isa;
  v75 = v9;
  v74 = v10;
  v73 = v11;
  v72 = v12;
  v71 = v13;
  v70 = v14;
  swift_bridgeObjectRetain();
  if (v56)
  {
    v42 = v56;
    v39 = v56;
    v15 = v43;
    v38 = &v57;
    v57 = v43;
    v35 = 0;
    v36 = type metadata accessor for HKQuantityType();
    v37 = type metadata accessor for HKUnit();
    v16 = lazy protocol witness table accessor for type HKQuantityType and conformance NSObject();
    MEMORY[0x24957CF6C](v58, v38, v39, v36, v37, v16);

    v40 = (objc_class *)v58[0];
    swift_bridgeObjectRelease();
    v41 = v40;
  }
  else
  {
    v41 = 0;
  }
  v68 = v41;
  if (v41)
  {
    v69 = v68;
  }
  else
  {
    v69 = (objc_class *)objc_msgSend((id)objc_opt_self(), sel_millimeterOfMercuryUnit);
    outlined destroy of HealthKitPersistor((id *)&v68);
  }
  v31.super.isa = v69;
  v67 = v69;
  swift_retain();
  v30 = (void (*)(char *, uint64_t, uint64_t))v49[2];
  v30(v54, v44, v48);
  swift_getAtKeyPath();
  v32 = v66;
  swift_retain();
  v30(v52, v44, v48);
  swift_getAtKeyPath();
  v34 = minMaxForSample(sample:unit:oMin:oMax:)(v55, v31, v32, v65);
  v33 = (void (*)(char *, uint64_t))v49[1];
  v33(v52, v48);
  swift_release();
  v33(v54, v48);
  swift_release();
  v64 = v34;
  swift_retain();
  v63 = v34._0;
  swift_setAtWritableKeyPath();
  swift_release();
  swift_retain();
  v62 = v34._1;
  swift_setAtWritableKeyPath();
  swift_release();
  swift_retain();
  if (v47)
  {
    v29 = v47;
    v27 = v47;
    v61 = v47;
    v17 = v55.super.super.isa;
    objc_opt_self();
    v18 = swift_dynamicCastObjCClass();
    v28 = (void *)v18;
    if (v18)
    {
      v26 = v28;
    }
    else
    {
      v25 = 0;

      v26 = v25;
    }
    v24 = v26;
    if (v26)
    {
      v23 = v24;
      v22 = v24;
      v60 = v24;
      v20 = objc_msgSend(v24, sel_quantity);
      objc_msgSend(v20, sel_doubleValueForUnit_, v31.super.isa);
      v21 = v19;

      v59 = v21;
      swift_retain();
      v58[1] = v21;
      swift_setAtWritableKeyPath();
      swift_release();

    }
    swift_release();
  }

}

void partial apply for closure #1 in conjugate<A>(for:units:target:minKey:maxKey:valueKey:accumulator:)(uint64_t a1)
{
  uint64_t v1;

  closure #1 in conjugate<A>(for:units:target:minKey:maxKey:valueKey:accumulator:)(a1, *(_QWORD *)(v1 + 16), *(void **)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD **)(v1 + 40), *(_QWORD *)(v1 + 48), *(_QWORD *)(v1 + 56));
}

id GetBloodPressureIntentHandler.__allocating_init(provider:)(uint64_t a1)
{
  objc_class *v1;
  id v2;

  v2 = objc_allocWithZone(v1);
  return GetBloodPressureIntentHandler.init(provider:)(a1);
}

id GetBloodPressureIntentHandler.init(provider:)(uint64_t a1)
{
  char *v1;
  char *v2;
  char *v3;
  id v4;
  id v6;
  objc_class *ObjectType;
  id v9;
  objc_super v10;
  _BYTE v11[40];
  uint64_t v12;
  id v13;

  ObjectType = (objc_class *)swift_getObjectType();
  v12 = a1;
  v2 = v1;
  v3 = v1;
  v13 = v1;
  OSSignposter.init()();

  outlined init with copy of QuantityPersisting(a1, (uint64_t)v11);
  outlined init with take of QuantityPersisting(v11, &v1[OBJC_IVAR____TtC19SiriWellnessIntents29GetBloodPressureIntentHandler_provider]);

  v10.receiver = v13;
  v10.super_class = ObjectType;
  v9 = objc_msgSendSuper2(&v10, sel_init);
  v4 = v9;
  v13 = v9;
  __swift_destroy_boxed_opaque_existential_1(a1);

  return v9;
}

uint64_t GetBloodPressureIntentHandler.handle(intent:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2[73] = v1;
  v2[72] = a1;
  v2[32] = v2;
  v2[33] = 0;
  v2[34] = 0;
  v2[35] = 0;
  v2[41] = 0;
  v2[47] = 0;
  v2[53] = 0;
  v2[54] = 0;
  v2[57] = 0;
  v2[58] = 0;
  v2[60] = 0;
  v3 = type metadata accessor for Logger();
  v2[74] = v3;
  v2[75] = *(_QWORD *)(v3 - 8);
  v2[76] = swift_task_alloc();
  v2[77] = swift_task_alloc();
  v2[78] = swift_task_alloc();
  v2[79] = swift_task_alloc();
  v4 = type metadata accessor for OSSignposter();
  v2[80] = v4;
  v2[81] = *(_QWORD *)(v4 - 8);
  v2[82] = swift_task_alloc();
  v2[83] = swift_task_alloc();
  v2[84] = swift_task_alloc();
  v5 = type metadata accessor for OSSignpostID();
  v2[85] = v5;
  v2[86] = *(_QWORD *)(v5 - 8);
  v2[87] = swift_task_alloc();
  v2[88] = swift_task_alloc();
  v2[89] = swift_task_alloc();
  v2[90] = swift_task_alloc();
  v2[91] = swift_task_alloc();
  v2[33] = a1;
  v2[34] = v1;
  return swift_task_switch();
}

void GetBloodPressureIntentHandler.handle(intent:)()
{
  _QWORD *v0;
  uint64_t v1;
  NSObject *v2;
  void (*v3)(uint64_t, uint64_t, uint64_t);
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint32_t v26;
  uint64_t v27;
  uint8_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(uint64_t, uint64_t);
  uint64_t v38;
  uint64_t v39;
  void (*v40)(uint64_t, uint64_t);
  NSObject *v41;
  os_signpost_type_t v42;
  uint64_t v43[3];

  v36 = v0[84];
  v34 = v0[83];
  v35 = v0[81];
  v39 = v0[80];
  v38 = v0[73];
  v0[32] = v0;
  v1 = OBJC_IVAR____TtC19SiriWellnessIntents29GetBloodPressureIntentHandler_signposter;
  v40 = *(void (**)(uint64_t, uint64_t))(v35 + 16);
  v0[92] = v40;
  v40(v36, v38 + v1);
  OSSignposter.makeSignpostID()();
  v37 = *(void (**)(uint64_t, uint64_t))(v35 + 8);
  v0[93] = v37;
  v37(v36, v39);
  ((void (*)(uint64_t, uint64_t, uint64_t))v40)(v34, v38 + OBJC_IVAR____TtC19SiriWellnessIntents29GetBloodPressureIntentHandler_signposter, v39);
  v41 = OSSignposter.logHandle.getter();
  v42 = static os_signpost_type_t.begin.getter();
  if ((OS_os_log.signpostsEnabled.getter() & 1) == 0)
    goto LABEL_4;
  v43[1] = (uint64_t)"GBPIHandle";
  if ("GBPIHandle")
  {
    v23 = *(_QWORD *)(v33 + 728);
    v25 = *(_QWORD *)(v33 + 720);
    v22 = *(_QWORD *)(v33 + 688);
    v24 = *(_QWORD *)(v33 + 680);
    closure #1 in _globalStringTablePointerOfStaticString(_:)((uint64_t)"GBPIHandle", v43);
    v21 = (const char *)v43[0];
    v43[2] = (uint64_t)"";
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
    v31 = _allocateUninitializedArray<A>(_:)();
    v2 = v41;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v22 + 16))(v25, v23, v24);
    *(_QWORD *)(v33 + 536) = 2;
    lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    lazy protocol witness table accessor for type Int and conformance Int();
    UnsignedInteger<>.init<A>(_:)();
    v26 = *(_DWORD *)(v33 + 924);
    v28 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    v29 = createStorage<A>(capacity:type:)(0);
    v30 = createStorage<A>(capacity:type:)(0);
    *(_QWORD *)(v33 + 544) = v28;
    *(_QWORD *)(v33 + 552) = v29;
    *(_QWORD *)(v33 + 560) = v30;
    serialize(_:at:)(0, (_BYTE **)(v33 + 544));
    serialize(_:at:)(0, (_BYTE **)(v33 + 544));
    *(_QWORD *)(v33 + 568) = v31;
    v32 = (_QWORD *)swift_task_alloc();
    v32[2] = v33 + 544;
    v32[3] = v33 + 552;
    v32[4] = v33 + 560;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
    lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
    Sequence.forEach(_:)();
    v20 = *(_QWORD *)(v33 + 720);
    swift_task_dealloc();
    closure #1 in osSignpostWithoutMessage(log:name:id:type:state:formatString:)(v28, v26, v41, v42, v20, v21, "");
    v18 = *(_QWORD *)(v33 + 720);
    v17 = *(_QWORD *)(v33 + 688);
    v19 = *(_QWORD *)(v33 + 680);
    destroyStorage<A>(_:count:)(v29, 0, v27);
    destroyStorage<A>(_:count:)(v30, 0, MEMORY[0x24BEE4AD8] + 8);
    MEMORY[0x24957D398](v28, MEMORY[0x24BEE4260]);

    (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v18, v19);
    swift_bridgeObjectRelease();
LABEL_4:
    *(_QWORD *)(v33 + 752) = 0;
    v7 = *(_QWORD *)(v33 + 728);
    v8 = *(_QWORD *)(v33 + 712);
    v5 = *(_QWORD *)(v33 + 688);
    v6 = *(_QWORD *)(v33 + 680);
    v10 = *(_QWORD *)(v33 + 664);
    v9 = *(_QWORD *)(v33 + 640);
    v12 = *(_QWORD *)(v33 + 584);

    type metadata accessor for OSSignpostIntervalState();
    v3 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
    *(_QWORD *)(v33 + 760) = v3;
    v3(v8, v7, v6);
    _swift_stdlib_has_malloc_size();
    v11 = OSSignpostIntervalState.__allocating_init(id:isOpen:)();
    *(_QWORD *)(v33 + 768) = v11;
    v37(v10, v9);
    *(_QWORD *)(v33 + 280) = v11;
    outlined init with copy of QuantityPersisting(v12 + OBJC_IVAR____TtC19SiriWellnessIntents29GetBloodPressureIntentHandler_provider, v33 + 80);
    v16 = *(_QWORD *)(v33 + 104);
    v13 = *(_QWORD *)(v33 + 112);
    __swift_project_boxed_opaque_existential_1((_QWORD *)(v33 + 80), v16);
    v14 = *(_QWORD *)(v13 + 8);
    v15 = (void (*)(uint64_t, uint64_t))(*(_QWORD *)(v14 + 8) + **(int **)(v14 + 8));
    v4 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v33 + 776) = v4;
    *v4 = *(_QWORD *)(v33 + 256);
    v4[1] = GetBloodPressureIntentHandler.handle(intent:);
    v15(v16, v14);
    return;
  }
  _assertionFailure(_:_:file:line:flags:)();
}

{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  id v3;
  id v4;
  id v5;
  id v6;
  id v7;
  id v8;
  _QWORD *v9;
  id v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint8_t *v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint32_t v33;
  os_log_type_t v34;
  NSObject *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint8_t *v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint32_t v54;
  os_log_type_t v55;
  NSObject *log;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  id v61;
  id v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  char *v69;
  uint64_t v70;
  uint8_t *buf;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint32_t size;
  os_log_type_t v79;
  NSObject *oslog;
  uint64_t v81;
  _QWORD *v82;
  uint64_t v83;
  Class v84;
  uint64_t v85;
  id v86;
  id v87;
  id v88;
  id v89;
  id v90;
  id v91;
  uint64_t v92;
  uint64_t v93;
  void (*v94)(uint64_t, uint64_t);
  id ObjCClassFromMetadata;
  id v96;
  id v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  const char *v103;
  uint64_t v104;
  uint64_t v105;
  void (*v106)(uint64_t, uint64_t, uint64_t);
  uint64_t v107;
  uint32_t v108;
  uint64_t v109;
  uint8_t *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  _QWORD *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  void (*v118)(uint64_t, uint64_t, uint64_t, NSUInteger);
  Class isa;
  NSObject *v120;
  os_signpost_type_t v121;
  uint64_t v122;
  char v123;
  uint64_t v124[7];
  NSDateFormatter v125;

  v123 = *(_BYTE *)(v0 + 928);
  *(_QWORD *)(v0 + 256) = v0;
  __swift_destroy_boxed_opaque_existential_1(v0 + 80);
  if ((v123 & 1) == 0)
  {
    v14 = *(_QWORD *)(v122 + 616);
    v30 = *(_QWORD *)(v122 + 600);
    v32 = *(_QWORD *)(v122 + 592);
    v31 = Logger.wellness.unsafeMutableAddressor();
    swift_beginAccess();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v30 + 16))(v14, v31, v32);
    swift_endAccess();
    v35 = Logger.logObject.getter();
    v34 = static os_log_type_t.debug.getter();
    *(_QWORD *)(v122 + 288) = 2;
    lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    lazy protocol witness table accessor for type Int and conformance Int();
    UnsignedInteger<>.init<A>(_:)();
    v33 = *(_DWORD *)(v122 + 904);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
    v36 = _allocateUninitializedArray<A>(_:)();
    if (os_log_type_enabled(v35, v34))
    {
      v15 = *(_QWORD *)(v122 + 752);
      v26 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      v27 = createStorage<A>(capacity:type:)(0);
      v28 = createStorage<A>(capacity:type:)(0);
      *(_QWORD *)(v122 + 296) = v26;
      *(_QWORD *)(v122 + 304) = v27;
      *(_QWORD *)(v122 + 312) = v28;
      serialize(_:at:)(0, (_BYTE **)(v122 + 296));
      serialize(_:at:)(0, (_BYTE **)(v122 + 296));
      *(_QWORD *)(v122 + 320) = v36;
      v29 = (_QWORD *)swift_task_alloc();
      v29[2] = v122 + 296;
      v29[3] = v122 + 304;
      v29[4] = v122 + 312;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
      lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
      Sequence.forEach(_:)();
      if (v15)
        return;
      swift_task_dealloc();
      _os_log_impl(&dword_24749F000, v35, v34, "request requires Authorization", v26, v33);
      destroyStorage<A>(_:count:)(v27, 0, v25);
      destroyStorage<A>(_:count:)(v28, 0, MEMORY[0x24BEE4AD8] + 8);
      MEMORY[0x24957D398](v26, MEMORY[0x24BEE4260]);
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    v20 = *(_QWORD *)(v122 + 768);
    v22 = *(_QWORD *)(v122 + 728);
    v21 = *(_QWORD *)(v122 + 688);
    v23 = *(_QWORD *)(v122 + 680);
    v17 = *(_QWORD *)(v122 + 616);
    v16 = *(_QWORD *)(v122 + 600);
    v18 = *(_QWORD *)(v122 + 592);
    v19 = *(_QWORD *)(v122 + 584);

    (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v17, v18);
    type metadata accessor for GetBloodPressureIntentResponse();
    v24 = GetBloodPressureIntentResponse.__allocating_init(code:userActivity:)(101, 0);
    $defer #1 () in GetBloodPressureIntentHandler.handle(intent:)(v19, v20);
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v22, v23);
    v69 = v24;
    goto LABEL_34;
  }
  v118 = *(void (**)(uint64_t, uint64_t, uint64_t, NSUInteger))(v122 + 736);
  v115 = *(_QWORD *)(v122 + 656);
  v117 = *(_QWORD *)(v122 + 640);
  v116 = *(_QWORD *)(v122 + 584);
  type metadata accessor for HKHealthStore();
  v125 = NSDateFormatter.__allocating_init()();
  isa = v125.super.super.isa;
  *(_QWORD *)(v122 + 784) = v125.super.super.isa;
  *(_QWORD *)(v122 + 328) = v125.super.super.isa;
  v118(v115, v116 + OBJC_IVAR____TtC19SiriWellnessIntents29GetBloodPressureIntentHandler_signposter, v117, v125._counter);
  v120 = OSSignposter.logHandle.getter();
  v121 = static os_signpost_type_t.event.getter();
  if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
  {
    v124[1] = (uint64_t)"HKStore initialized";
    if (!"HKStore initialized")
    {
      _assertionFailure(_:_:file:line:flags:)();
      return;
    }
    v106 = *(void (**)(uint64_t, uint64_t, uint64_t))(v122 + 760);
    v1 = *(_QWORD *)(v122 + 752);
    v104 = *(_QWORD *)(v122 + 728);
    v107 = *(_QWORD *)(v122 + 704);
    v105 = *(_QWORD *)(v122 + 680);
    closure #1 in _globalStringTablePointerOfStaticString(_:)((uint64_t)"HKStore initialized", v124);
    v103 = (const char *)v124[0];
    v124[2] = (uint64_t)"";
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
    v113 = _allocateUninitializedArray<A>(_:)();
    v2 = v120;
    v106(v107, v104, v105);
    *(_QWORD *)(v122 + 496) = 2;
    lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    lazy protocol witness table accessor for type Int and conformance Int();
    UnsignedInteger<>.init<A>(_:)();
    v108 = *(_DWORD *)(v122 + 920);
    v110 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    v109 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    v111 = createStorage<A>(capacity:type:)(0);
    v112 = createStorage<A>(capacity:type:)(0);
    *(_QWORD *)(v122 + 504) = v110;
    *(_QWORD *)(v122 + 512) = v111;
    *(_QWORD *)(v122 + 520) = v112;
    serialize(_:at:)(0, (_BYTE **)(v122 + 504));
    serialize(_:at:)(0, (_BYTE **)(v122 + 504));
    *(_QWORD *)(v122 + 528) = v113;
    v114 = (_QWORD *)swift_task_alloc();
    v114[2] = v122 + 504;
    v114[3] = v122 + 512;
    v114[4] = v122 + 520;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
    lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
    Sequence.forEach(_:)();
    if (v1)
      return;
    v101 = *(_QWORD *)(v122 + 704);
    swift_task_dealloc();
    closure #1 in osSignpostWithoutMessage(log:name:id:type:state:formatString:)(v110, v108, v120, v121, v101, v103, "");
    v99 = *(_QWORD *)(v122 + 704);
    v98 = *(_QWORD *)(v122 + 688);
    v100 = *(_QWORD *)(v122 + 680);
    destroyStorage<A>(_:count:)(v111, 0, v109);
    destroyStorage<A>(_:count:)(v112, 0, MEMORY[0x24BEE4AD8] + 8);
    MEMORY[0x24957D398](v110, MEMORY[0x24BEE4260]);

    (*(void (**)(uint64_t, uint64_t))(v98 + 8))(v99, v100);
    swift_bridgeObjectRelease();
    v102 = 0;
  }
  else
  {
    v102 = *(_QWORD *)(v122 + 752);
  }
  *(_QWORD *)(v122 + 792) = v102;
  v94 = *(void (**)(uint64_t, uint64_t))(v122 + 744);
  v92 = *(_QWORD *)(v122 + 656);
  v93 = *(_QWORD *)(v122 + 640);

  v94(v92, v93);
  type metadata accessor for HKCorrelationType();
  ObjCClassFromMetadata = (id)swift_getObjCClassFromMetadata();
  v96 = (id)*MEMORY[0x24BDD2B08];
  v3 = (id)*MEMORY[0x24BDD2B08];
  v4 = objc_msgSend(ObjCClassFromMetadata, sel_correlationTypeForIdentifier_, v96);
  *(_QWORD *)(v122 + 800) = v4;
  v97 = v4;

  if (!v97)
  {
    v13 = *(_QWORD *)(v122 + 624);
    v51 = *(_QWORD *)(v122 + 600);
    v53 = *(_QWORD *)(v122 + 592);
    v52 = Logger.wellness.unsafeMutableAddressor();
    swift_beginAccess();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v51 + 16))(v13, v52, v53);
    swift_endAccess();
    log = Logger.logObject.getter();
    v55 = static os_log_type_t.error.getter();
    *(_QWORD *)(v122 + 336) = 2;
    lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    lazy protocol witness table accessor for type Int and conformance Int();
    UnsignedInteger<>.init<A>(_:)();
    v54 = *(_DWORD *)(v122 + 908);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
    v57 = _allocateUninitializedArray<A>(_:)();
    if (os_log_type_enabled(log, v55))
    {
      v47 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      v46 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      v48 = createStorage<A>(capacity:type:)(0);
      v49 = createStorage<A>(capacity:type:)(0);
      *(_QWORD *)(v122 + 344) = v47;
      *(_QWORD *)(v122 + 352) = v48;
      *(_QWORD *)(v122 + 360) = v49;
      serialize(_:at:)(0, (_BYTE **)(v122 + 344));
      serialize(_:at:)(0, (_BYTE **)(v122 + 344));
      *(_QWORD *)(v122 + 368) = v57;
      v50 = (_QWORD *)swift_task_alloc();
      v50[2] = v122 + 344;
      v50[3] = v122 + 352;
      v50[4] = v122 + 360;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
      lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
      Sequence.forEach(_:)();
      if (v102)
        return;
      swift_task_dealloc();
      _os_log_impl(&dword_24749F000, log, v55, "failed to create correlation type for blood pressure", v47, v54);
      destroyStorage<A>(_:count:)(v48, 0, v46);
      destroyStorage<A>(_:count:)(v49, 0, MEMORY[0x24BEE4AD8] + 8);
      MEMORY[0x24957D398](v47, MEMORY[0x24BEE4260]);
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    v41 = *(_QWORD *)(v122 + 768);
    v43 = *(_QWORD *)(v122 + 728);
    v42 = *(_QWORD *)(v122 + 688);
    v44 = *(_QWORD *)(v122 + 680);
    v38 = *(_QWORD *)(v122 + 624);
    v37 = *(_QWORD *)(v122 + 600);
    v39 = *(_QWORD *)(v122 + 592);
    v40 = *(_QWORD *)(v122 + 584);

    (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v38, v39);
    type metadata accessor for GetBloodPressureIntentResponse();
    v45 = GetBloodPressureIntentResponse.__allocating_init(code:userActivity:)(5, 0);

    $defer #1 () in GetBloodPressureIntentHandler.handle(intent:)(v40, v41);
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v43, v44);
    v69 = v45;
    goto LABEL_34;
  }
  *(_QWORD *)(v122 + 376) = v97;
  v89 = (id)objc_opt_self();
  v90 = (id)*MEMORY[0x24BDD33A8];
  v5 = (id)*MEMORY[0x24BDD33A8];
  v6 = objc_msgSend(v89, sel_quantityTypeForIdentifier_, v90);
  *(_QWORD *)(v122 + 808) = v6;
  v91 = v6;

  if (v91)
  {
    *(_QWORD *)(v122 + 424) = v91;
    v86 = (id)objc_opt_self();
    v87 = (id)*MEMORY[0x24BDD33A0];
    v7 = (id)*MEMORY[0x24BDD33A0];
    v8 = objc_msgSend(v86, sel_quantityTypeForIdentifier_, v87);
    *(_QWORD *)(v122 + 816) = v8;
    v88 = v8;

    if (v88)
    {
      *(_QWORD *)(v122 + 432) = v88;
      type metadata accessor for HKQuantityType();
      v83 = _allocateUninitializedArray<A>(_:)();
      v82 = v9;
      v10 = v91;
      *v82 = v91;
      v11 = v88;
      v82[1] = v88;
      _finalizeUninitializedArray<A>(_:)();
      *(_QWORD *)(v122 + 448) = v83;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [HKQuantityType]);
      lazy protocol witness table accessor for type HKQuantityType and conformance NSObject();
      lazy protocol witness table accessor for type [HKQuantityType] and conformance [A]();
      Set.init<A>(_:)();
      v84 = Set._bridgeToObjectiveC()().super.isa;
      *(_QWORD *)(v122 + 824) = v84;
      swift_bridgeObjectRelease();
      *(_QWORD *)(v122 + 16) = *(_QWORD *)(v122 + 256);
      *(_QWORD *)(v122 + 56) = v122 + 440;
      *(_QWORD *)(v122 + 24) = GetBloodPressureIntentHandler.handle(intent:);
      *(_QWORD *)(v122 + 152) = swift_continuation_init();
      *(_QWORD *)(v122 + 120) = MEMORY[0x24BDAC760];
      *(_DWORD *)(v122 + 128) = 0x40000000;
      *(_DWORD *)(v122 + 132) = 0;
      *(_QWORD *)(v122 + 136) = @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned NSDictionary, @unowned NSError?) -> () with result type [HKQuantityType : HKUnit];
      *(_QWORD *)(v122 + 144) = &block_descriptor_10;
      -[objc_class preferredUnitsForQuantityTypes:completion:](isa, sel_preferredUnitsForQuantityTypes_completion_, v84, v122 + 120);
      __swift_continuation_await_point(v122 + 16);
      return;
    }

    v85 = v102;
  }
  else
  {
    v85 = v102;
  }
  v12 = *(_QWORD *)(v122 + 632);
  v75 = *(_QWORD *)(v122 + 600);
  v77 = *(_QWORD *)(v122 + 592);
  v76 = Logger.wellness.unsafeMutableAddressor();
  swift_beginAccess();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v75 + 16))(v12, v76, v77);
  swift_endAccess();
  oslog = Logger.logObject.getter();
  v79 = static os_log_type_t.error.getter();
  *(_QWORD *)(v122 + 384) = 2;
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  size = *(_DWORD *)(v122 + 912);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
  v81 = _allocateUninitializedArray<A>(_:)();
  if (!os_log_type_enabled(oslog, v79))
  {
    swift_bridgeObjectRelease();
    goto LABEL_21;
  }
  buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
  v70 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
  v72 = createStorage<A>(capacity:type:)(0);
  v73 = createStorage<A>(capacity:type:)(0);
  *(_QWORD *)(v122 + 392) = buf;
  *(_QWORD *)(v122 + 400) = v72;
  *(_QWORD *)(v122 + 408) = v73;
  serialize(_:at:)(0, (_BYTE **)(v122 + 392));
  serialize(_:at:)(0, (_BYTE **)(v122 + 392));
  *(_QWORD *)(v122 + 416) = v81;
  v74 = (_QWORD *)swift_task_alloc();
  v74[2] = v122 + 392;
  v74[3] = v122 + 400;
  v74[4] = v122 + 408;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
  lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
  Sequence.forEach(_:)();
  if (!v85)
  {
    swift_task_dealloc();
    _os_log_impl(&dword_24749F000, oslog, v79, "failed to create quantity types sys/dia", buf, size);
    destroyStorage<A>(_:count:)(v72, 0, v70);
    destroyStorage<A>(_:count:)(v73, 0, MEMORY[0x24BEE4AD8] + 8);
    MEMORY[0x24957D398](buf, MEMORY[0x24BEE4260]);
    swift_bridgeObjectRelease();
LABEL_21:
    v62 = *(id *)(v122 + 784);
    v64 = *(_QWORD *)(v122 + 768);
    v66 = *(_QWORD *)(v122 + 728);
    v65 = *(_QWORD *)(v122 + 688);
    v67 = *(_QWORD *)(v122 + 680);
    v59 = *(_QWORD *)(v122 + 632);
    v58 = *(_QWORD *)(v122 + 600);
    v60 = *(_QWORD *)(v122 + 592);
    v63 = *(_QWORD *)(v122 + 584);
    v61 = *(id *)(v122 + 800);

    (*(void (**)(uint64_t, uint64_t))(v58 + 8))(v59, v60);
    type metadata accessor for GetBloodPressureIntentResponse();
    v68 = GetBloodPressureIntentResponse.__allocating_init(code:userActivity:)(5, 0);

    $defer #1 () in GetBloodPressureIntentHandler.handle(intent:)(v63, v64);
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v65 + 8))(v66, v67);
    v69 = v68;
LABEL_34:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    (*(void (**)(char *))(*(_QWORD *)(v122 + 256) + 8))(v69);
  }
}

uint64_t GetBloodPressureIntentHandler.handle(intent:)(char a1)
{
  uint64_t *v1;
  uint64_t v3;

  v3 = *v1;
  *(_QWORD *)(v3 + 256) = *v1;
  *(_BYTE *)(v3 + 928) = a1;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t GetBloodPressureIntentHandler.handle(intent:)()
{
  _QWORD *v0;
  _QWORD *v1;

  v1 = (_QWORD *)*v0;
  v1[32] = *v0;
  v1[104] = v1[6];
  return swift_task_switch();
}

{
  _QWORD *v0;
  void *v1;
  void *v2;
  id v3;
  id v4;
  id v5;
  id v6;
  id v7;
  id v8;
  _QWORD *v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint8_t *buf;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint32_t size;
  os_log_type_t v33;
  NSObject *oslog;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  void (*v39)(uint64_t, uint64_t, uint64_t);
  id v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  void *v44;
  void *v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  v1 = (void *)v0[103];
  v0[32] = v0;
  v48 = v0[55];

  v49 = v0[99];
  v0[105] = v48;
  if (v48)
  {
    v45 = *(void **)(v47 + 784);
    v39 = *(void (**)(uint64_t, uint64_t, uint64_t))(v47 + 760);
    v37 = *(_QWORD *)(v47 + 728);
    v41 = *(_QWORD *)(v47 + 696);
    v38 = *(_QWORD *)(v47 + 680);
    v40 = *(id *)(v47 + 584);
    v2 = *(void **)(v47 + 576);
    v44 = *(void **)(v47 + 816);
    v42 = *(void **)(v47 + 808);
    v36 = *(void **)(v47 + 800);
    *(_QWORD *)(v47 + 456) = v48;
    v43 = swift_allocObject();
    *(_QWORD *)(v47 + 848) = v43;
    *(_QWORD *)(v47 + 464) = v43 + 16;
    *(_QWORD *)(v47 + 856) = type metadata accessor for GetBloodPressureIntentResponse();
    *(_QWORD *)(v43 + 16) = GetBloodPressureIntentResponse.__allocating_init(code:userActivity:)(4, 0);
    *(_QWORD *)(v47 + 864) = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("handle(intent:)", 0xFuLL, 1)._object;
    v3 = v2;
    v4 = v36;
    v5 = v40;
    v39(v41, v37, v38);
    swift_bridgeObjectRetain();
    v6 = v42;
    swift_retain();
    v7 = v44;
    v8 = v45;
    v46 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v47 + 872) = v46;
    v46[2] = v2;
    v46[3] = v36;
    v46[4] = v40;
    v46[5] = v41;
    v46[6] = v48;
    v46[7] = v42;
    v46[8] = v43;
    v46[9] = v44;
    v46[10] = v45;
    v9 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v47 + 880) = v9;
    *v9 = *(_QWORD *)(v47 + 256);
    v9[1] = GetBloodPressureIntentHandler.handle(intent:);
    return withCheckedThrowingContinuation<A>(isolation:function:_:)();
  }
  v28 = *(id *)(v47 + 808);

  v11 = *(_QWORD *)(v47 + 632);
  v29 = *(_QWORD *)(v47 + 600);
  v31 = *(_QWORD *)(v47 + 592);
  v30 = Logger.wellness.unsafeMutableAddressor();
  swift_beginAccess();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v29 + 16))(v11, v30, v31);
  swift_endAccess();
  oslog = Logger.logObject.getter();
  v33 = static os_log_type_t.error.getter();
  *(_QWORD *)(v47 + 384) = 2;
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  size = *(_DWORD *)(v47 + 912);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
  v35 = _allocateUninitializedArray<A>(_:)();
  if (!os_log_type_enabled(oslog, v33))
  {
    swift_bridgeObjectRelease();
    goto LABEL_8;
  }
  buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
  v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
  v25 = createStorage<A>(capacity:type:)(0);
  v26 = createStorage<A>(capacity:type:)(0);
  *(_QWORD *)(v47 + 392) = buf;
  *(_QWORD *)(v47 + 400) = v25;
  *(_QWORD *)(v47 + 408) = v26;
  serialize(_:at:)(0, (_BYTE **)(v47 + 392));
  serialize(_:at:)(0, (_BYTE **)(v47 + 392));
  *(_QWORD *)(v47 + 416) = v35;
  v27 = (_QWORD *)swift_task_alloc();
  v27[2] = v47 + 392;
  v27[3] = v47 + 400;
  v27[4] = v47 + 408;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
  lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
  result = Sequence.forEach(_:)();
  if (!v49)
  {
    swift_task_dealloc();
    _os_log_impl(&dword_24749F000, oslog, v33, "failed to create quantity types sys/dia", buf, size);
    destroyStorage<A>(_:count:)(v25, 0, v23);
    destroyStorage<A>(_:count:)(v26, 0, MEMORY[0x24BEE4AD8] + 8);
    MEMORY[0x24957D398](buf, MEMORY[0x24BEE4260]);
    swift_bridgeObjectRelease();
LABEL_8:
    v16 = *(id *)(v47 + 784);
    v18 = *(_QWORD *)(v47 + 768);
    v20 = *(_QWORD *)(v47 + 728);
    v19 = *(_QWORD *)(v47 + 688);
    v21 = *(_QWORD *)(v47 + 680);
    v13 = *(_QWORD *)(v47 + 632);
    v12 = *(_QWORD *)(v47 + 600);
    v14 = *(_QWORD *)(v47 + 592);
    v17 = *(_QWORD *)(v47 + 584);
    v15 = *(id *)(v47 + 800);

    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v13, v14);
    type metadata accessor for GetBloodPressureIntentResponse();
    v22 = GetBloodPressureIntentResponse.__allocating_init(code:userActivity:)(5, 0);

    $defer #1 () in GetBloodPressureIntentHandler.handle(intent:)(v17, v18);
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v20, v21);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(char *))(*(_QWORD *)(v47 + 256) + 8))(v22);
  }
  return result;
}

{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t);
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  _QWORD *v14;

  v2 = *v1;
  v14 = (_QWORD *)(*v1 + 16);
  *(_QWORD *)(v2 + 256) = *v1;
  *(_QWORD *)(v2 + 888) = v0;
  swift_task_dealloc();
  if (!v0)
  {
    v12 = (void *)v14[100];
    v11 = (void *)v14[99];
    v6 = (void *)v14[98];
    v13 = (void *)v14[96];
    v9 = v14[85];
    v8 = v14[84];
    v10 = v14[83];
    v7 = (void *)v14[71];
    v5 = (void *)v14[70];
    swift_task_dealloc();

    v3 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
    v14[110] = v3;
    v3(v9, v10);
    swift_bridgeObjectRelease();

    swift_release();
    swift_bridgeObjectRelease();
  }
  return swift_task_switch();
}

{
  _QWORD *v0;
  id v2;
  id v3;
  id v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);
  uint64_t v11;

  v10 = (void (*)(uint64_t, uint64_t))v0[112];
  v2 = (id)v0[102];
  v3 = (id)v0[101];
  v4 = (id)v0[100];
  v5 = (id)v0[98];
  v7 = v0[96];
  v8 = v0[91];
  v9 = v0[85];
  v6 = v0[73];
  v0[32] = v0;
  v11 = v0[59];
  swift_release();
  swift_bridgeObjectRelease();

  $defer #1 () in GetBloodPressureIntentHandler.handle(intent:)(v6, v7);
  swift_release();
  v10(v8, v9);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(v0[32] + 8))(v11);
}

{
  uint64_t v0;
  uint64_t v1;
  id v2;
  id v3;
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  id v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint8_t *buf;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  id v22;
  id v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(uint64_t, uint64_t);
  id v29;
  id v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  uint32_t size;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  NSObject *v52;
  os_log_type_t v53;
  uint8_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t (*v57)(uint64_t, uint64_t, uint64_t);
  uint64_t v58;

  v35 = *(id *)(v0 + 888);
  v30 = *(id *)(v0 + 816);
  v31 = *(id *)(v0 + 808);
  v23 = *(id *)(v0 + 800);
  v29 = *(id *)(v0 + 784);
  v26 = *(_QWORD *)(v0 + 696);
  v25 = *(_QWORD *)(v0 + 688);
  v27 = *(_QWORD *)(v0 + 680);
  v1 = *(_QWORD *)(v0 + 608);
  v32 = *(_QWORD *)(v0 + 600);
  v34 = *(_QWORD *)(v0 + 592);
  v24 = *(id *)(v0 + 584);
  v22 = *(id *)(v0 + 576);
  *(_QWORD *)(v0 + 256) = v0;
  swift_task_dealloc();

  v28 = *(void (**)(uint64_t, uint64_t))(v25 + 8);
  v28(v26, v27);
  swift_bridgeObjectRelease();

  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();

  v2 = v35;
  *(_QWORD *)(v0 + 480) = v35;
  v33 = Logger.wellness.unsafeMutableAddressor();
  swift_beginAccess();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v32 + 16))(v1, v33, v34);
  swift_endAccess();
  v3 = v35;
  v39 = swift_allocObject();
  *(_QWORD *)(v39 + 16) = v35;
  default argument 2 of OSLogInterpolation.appendInterpolation(_:privacy:attributes:)();
  swift_bridgeObjectRelease();
  v52 = Logger.logObject.getter();
  v53 = static os_log_type_t.error.getter();
  *(_QWORD *)(v0 + 488) = 32;
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  size = *(_DWORD *)(v0 + 916);
  v42 = swift_allocObject();
  *(_BYTE *)(v42 + 16) = 32;
  v43 = swift_allocObject();
  *(_BYTE *)(v43 + 16) = 8;
  v37 = swift_allocObject();
  *(_QWORD *)(v37 + 16) = implicit closure #1 in GetBloodPressureIntentHandler.handle(intent:);
  *(_QWORD *)(v37 + 24) = 0;
  v44 = swift_allocObject();
  *(_QWORD *)(v44 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:);
  *(_QWORD *)(v44 + 24) = v37;
  v45 = swift_allocObject();
  *(_BYTE *)(v45 + 16) = 0;
  v46 = swift_allocObject();
  *(_BYTE *)(v46 + 16) = 8;
  v38 = swift_allocObject();
  *(_QWORD *)(v38 + 16) = implicit closure #2 in GetBloodPressureIntentHandler.handle(intent:);
  *(_QWORD *)(v38 + 24) = 0;
  v47 = swift_allocObject();
  *(_QWORD *)(v47 + 16) = partial apply for thunk for @escaping @callee_guaranteed () -> (@unowned Int);
  *(_QWORD *)(v47 + 24) = v38;
  v48 = swift_allocObject();
  *(_BYTE *)(v48 + 16) = 64;
  v49 = swift_allocObject();
  *(_BYTE *)(v49 + 16) = 8;
  v40 = swift_allocObject();
  *(_QWORD *)(v40 + 16) = partial apply for implicit closure #10 in getPreferredUnit(for:store:);
  *(_QWORD *)(v40 + 24) = v39;
  v41 = swift_allocObject();
  *(_QWORD *)(v41 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:attributes:);
  *(_QWORD *)(v41 + 24) = v40;
  v50 = swift_allocObject();
  *(_QWORD *)(v50 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:);
  *(_QWORD *)(v50 + 24) = v41;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
  _allocateUninitializedArray<A>(_:)();
  v51 = v4;
  swift_retain();
  *v51 = partial apply for closure #1 in OSLogArguments.append(_:);
  v51[1] = v42;
  swift_retain();
  v51[2] = partial apply for closure #1 in OSLogArguments.append(_:);
  v51[3] = v43;
  swift_retain();
  v51[4] = partial apply for closure #1 in OSLogArguments.append(_:);
  v51[5] = v44;
  swift_retain();
  v51[6] = partial apply for closure #1 in OSLogArguments.append(_:);
  v51[7] = v45;
  swift_retain();
  v51[8] = partial apply for closure #1 in OSLogArguments.append(_:);
  v51[9] = v46;
  swift_retain();
  v51[10] = partial apply for closure #1 in OSLogArguments.append<A>(_:);
  v51[11] = v47;
  swift_retain();
  v51[12] = partial apply for closure #1 in OSLogArguments.append(_:);
  v51[13] = v48;
  swift_retain();
  v51[14] = partial apply for closure #1 in OSLogArguments.append(_:);
  v51[15] = v49;
  swift_retain();
  v51[16] = partial apply for closure #1 in OSLogArguments.append(_:);
  v51[17] = v50;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(v52, v53))
  {
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    v19 = createStorage<A>(capacity:type:)(1);
    v20 = createStorage<A>(capacity:type:)(1);
    v54 = buf;
    v55 = v19;
    v56 = v20;
    serialize(_:at:)(2, &v54);
    serialize(_:at:)(3, &v54);
    v57 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v58 = v42;
    closure #1 in osLogInternal(_:log:type:)(&v57, (uint64_t)&v54, (uint64_t)&v55, (uint64_t)&v56);
    v57 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v58 = v43;
    closure #1 in osLogInternal(_:log:type:)(&v57, (uint64_t)&v54, (uint64_t)&v55, (uint64_t)&v56);
    v57 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v58 = v44;
    closure #1 in osLogInternal(_:log:type:)(&v57, (uint64_t)&v54, (uint64_t)&v55, (uint64_t)&v56);
    v57 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v58 = v45;
    closure #1 in osLogInternal(_:log:type:)(&v57, (uint64_t)&v54, (uint64_t)&v55, (uint64_t)&v56);
    v57 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v58 = v46;
    closure #1 in osLogInternal(_:log:type:)(&v57, (uint64_t)&v54, (uint64_t)&v55, (uint64_t)&v56);
    v57 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append<A>(_:);
    v58 = v47;
    closure #1 in osLogInternal(_:log:type:)(&v57, (uint64_t)&v54, (uint64_t)&v55, (uint64_t)&v56);
    v57 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v58 = v48;
    closure #1 in osLogInternal(_:log:type:)(&v57, (uint64_t)&v54, (uint64_t)&v55, (uint64_t)&v56);
    v57 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v58 = v49;
    closure #1 in osLogInternal(_:log:type:)(&v57, (uint64_t)&v54, (uint64_t)&v55, (uint64_t)&v56);
    v57 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v58 = v50;
    closure #1 in osLogInternal(_:log:type:)(&v57, (uint64_t)&v54, (uint64_t)&v55, (uint64_t)&v56);
    _os_log_impl(&dword_24749F000, v52, v53, "Failed with Error: %s:%ld %@", buf, size);
    destroyStorage<A>(_:count:)(v19, 1, v17);
    destroyStorage<A>(_:count:)(v20, 1, MEMORY[0x24BEE4AD8] + 8);
    MEMORY[0x24957D398](buf, MEMORY[0x24BEE4260]);
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
  }
  v9 = (id)v21[111];
  v11 = (id)v21[98];
  v13 = v21[96];
  v14 = v21[91];
  v15 = v21[85];
  v7 = v21[76];
  v6 = v21[75];
  v8 = v21[74];
  v12 = v21[73];
  v10 = (id)v21[100];

  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v7, v8);
  v16 = GetBloodPressureIntentResponse.__allocating_init(code:userActivity:)(5, 0);

  $defer #1 () in GetBloodPressureIntentHandler.handle(intent:)(v12, v13);
  swift_release();
  v28(v14, v15);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(char *))(v21[32] + 8))(v16);
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint8_t *buf;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint32_t size;
  os_log_type_t v24;
  NSObject *oslog;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  void *v29;

  v29 = (void *)v0[104];
  v28 = (void *)v0[103];
  v0[32] = v0;
  swift_willThrow();

  v0[105] = 0;
  v19 = *(id *)(v27 + 808);

  v1 = *(_QWORD *)(v27 + 632);
  v20 = *(_QWORD *)(v27 + 600);
  v22 = *(_QWORD *)(v27 + 592);
  v21 = Logger.wellness.unsafeMutableAddressor();
  swift_beginAccess();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v20 + 16))(v1, v21, v22);
  swift_endAccess();
  oslog = Logger.logObject.getter();
  v24 = static os_log_type_t.error.getter();
  *(_QWORD *)(v27 + 384) = 2;
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  size = *(_DWORD *)(v27 + 912);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
  v26 = _allocateUninitializedArray<A>(_:)();
  if (os_log_type_enabled(oslog, v24))
  {
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    v16 = createStorage<A>(capacity:type:)(0);
    v17 = createStorage<A>(capacity:type:)(0);
    *(_QWORD *)(v27 + 392) = buf;
    *(_QWORD *)(v27 + 400) = v16;
    *(_QWORD *)(v27 + 408) = v17;
    serialize(_:at:)(0, (_BYTE **)(v27 + 392));
    serialize(_:at:)(0, (_BYTE **)(v27 + 392));
    *(_QWORD *)(v27 + 416) = v26;
    v18 = (_QWORD *)swift_task_alloc();
    v18[2] = v27 + 392;
    v18[3] = v27 + 400;
    v18[4] = v27 + 408;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
    lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
    Sequence.forEach(_:)();
    swift_task_dealloc();
    _os_log_impl(&dword_24749F000, oslog, v24, "failed to create quantity types sys/dia", buf, size);
    destroyStorage<A>(_:count:)(v16, 0, v14);
    destroyStorage<A>(_:count:)(v17, 0, MEMORY[0x24BEE4AD8] + 8);
    MEMORY[0x24957D398](buf, MEMORY[0x24BEE4260]);
  }
  swift_bridgeObjectRelease();
  v7 = *(id *)(v27 + 784);
  v9 = *(_QWORD *)(v27 + 768);
  v11 = *(_QWORD *)(v27 + 728);
  v10 = *(_QWORD *)(v27 + 688);
  v12 = *(_QWORD *)(v27 + 680);
  v4 = *(_QWORD *)(v27 + 632);
  v3 = *(_QWORD *)(v27 + 600);
  v5 = *(_QWORD *)(v27 + 592);
  v8 = *(_QWORD *)(v27 + 584);
  v6 = *(id *)(v27 + 800);

  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v4, v5);
  type metadata accessor for GetBloodPressureIntentResponse();
  v13 = GetBloodPressureIntentResponse.__allocating_init(code:userActivity:)(5, 0);

  $defer #1 () in GetBloodPressureIntentHandler.handle(intent:)(v8, v9);
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v11, v12);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(char *))(*(_QWORD *)(v27 + 256) + 8))(v13);
}

